public static Collection<Object[]> pdfbox_f10127_0() throws Exception
{    List<Object[]> data = new ArrayList<>();    data.add(wrapProperty("DocumentID", Types.URI, "uuid:FB031973-5E75-11B2-8F06-E7F5C101C07A"));    data.add(wrapProperty("Manager", Types.AgentName, "Raoul"));    data.add(wrapProperty("ManageTo", Types.URI, "uuid:36"));    data.add(wrapProperty("ManageUI", Types.URI, "uuid:3635"));        data.add(wrapProperty("InstanceID", Types.URI, "uuid:42"));    data.add(wrapProperty("OriginalDocumentID", Types.Text, "uuid:142"));        data.add(wrapProperty("RenditionParams", Types.Text, "my params"));    data.add(wrapProperty("VersionID", Types.Text, "14"));    data.add(wrapProperty("Versions", Types.Version, Cardinality.Seq, new String[] { "1", "2", "3" }));    data.add(wrapProperty("History", Types.Text, Cardinality.Seq, new String[] { "action 1", "action 2", "action 3" }));    data.add(wrapProperty("Ingredients", Types.Text, Cardinality.Bag, new String[] { "resource1", "resource2" }));    return data;}
public void pdfbox_f10128_0() throws Exception
{    metadata = XMPMetadata.createXMPMetadata();    schema = metadata.createAndAddXMPRightsManagementSchema();    schemaClass = XMPRightsManagementSchema.class;}
public static Collection<Object[]> pdfbox_f10129_0() throws Exception
{    List<Object[]> data = new ArrayList<>();    data.add(wrapProperty("Certificate", Types.URL, "http://une.url.vers.un.certificat/moncert.cer"));    data.add(wrapProperty("Marked", Types.Boolean, true));    data.add(wrapProperty("Owner", Types.ProperName, Cardinality.Bag, new String[] { "OwnerName" }));    Map<String, String> desc = new HashMap<>(2);    desc.put("fr", "Termes d'utilisation");    desc.put("en", "Usage Terms");    data.add(wrapProperty("UsageTerms", Types.LangAlt, desc));    data.add(wrapProperty("WebStatement", Types.URL, "http://une.url.vers.une.page.fr/"));    return data;}
public void pdfbox_f10130_0() throws Exception
{    parent = XMPMetadata.createXMPMetadata();    schem = new XMPSchema(parent, "nsURI", "nsSchem");}
public void pdfbox_f10131_0() throws Exception
{    String bagName = "BAGTEST";    String value1 = "valueOne";    String value2 = "valueTwo";    schem.addBagValue(bagName, schem.getMetadata().getTypeMapping().createText(null, "rdf", "li", value1));    schem.addQualifiedBagValue(bagName, value2);    List<String> values = schem.getUnqualifiedBagValueList(bagName);    Assert.assertEquals(value1, values.get(0));    Assert.assertEquals(value2, values.get(1));    schem.removeUnqualifiedBagValue(bagName, value1);    List<String> values2 = schem.getUnqualifiedBagValueList(bagName);    Assert.assertEquals(1, values2.size());    Assert.assertEquals(value2, values2.get(0));}
public void pdfbox_f10132_0() throws Exception
{    XMPMetadata meta = XMPMetadata.createXMPMetadata();    ArrayProperty newSeq = meta.getTypeMapping().createArrayProperty(null, "nsSchem", "seqType", Cardinality.Seq);    TypeMapping tm = meta.getTypeMapping();    TextType li1 = tm.createText(null, "rdf", "li", "valeur1");    TextType li2 = tm.createText(null, "rdf", "li", "valeur2");    newSeq.getContainer().addProperty(li1);    newSeq.getContainer().addProperty(li2);    schem.addProperty(newSeq);    List<AbstractField> list = schem.getUnqualifiedArrayList("seqType");    Assert.assertTrue(list.contains(li1));    Assert.assertTrue(list.contains(li2));}
public void pdfbox_f10133_0() throws Exception
{    Calendar date = Calendar.getInstance();    BooleanType bool = parent.getTypeMapping().createBoolean(null, "rdf", "li", true);    String textVal = "seqValue";    String seqName = "SEQNAME";    schem.addUnqualifiedSequenceDateValue(seqName, date);    schem.addUnqualifiedSequenceValue(seqName, bool);    schem.addUnqualifiedSequenceValue(seqName, textVal);    List<Calendar> dates = schem.getUnqualifiedSequenceDateValueList(seqName);    Assert.assertEquals(1, dates.size());    Assert.assertEquals(date, dates.get(0));    List<String> values = schem.getUnqualifiedSequenceValueList(seqName);    Assert.assertEquals(3, values.size());    Assert.assertEquals(DateConverter.toISO8601(date), values.get(0));    Assert.assertEquals(bool.getStringValue(), values.get(1));    Assert.assertEquals(textVal, values.get(2));    schem.removeUnqualifiedSequenceDateValue(seqName, date);    Assert.assertEquals(0, schem.getUnqualifiedSequenceDateValueList(seqName).size());    schem.removeUnqualifiedSequenceValue(seqName, bool);    schem.removeUnqualifiedSequenceValue(seqName, textVal);    Assert.assertEquals(0, schem.getUnqualifiedSequenceValueList(seqName).size());}
public void pdfbox_f10134_0()
{    Assert.assertEquals("", schem.getAboutValue());    String about = "about";    schem.setAboutAsSimple(about);    Assert.assertEquals(about, schem.getAboutValue());    schem.setAboutAsSimple("");    Assert.assertEquals("", schem.getAboutValue());    schem.setAboutAsSimple(null);    Assert.assertEquals("", schem.getAboutValue());}
public void pdfbox_f10135_0() throws Exception
{    schem.setAbout(new Attribute(null, "about", ""));}
public void pdfbox_f10136_0() throws Exception
{    String prop = "testprop";    String val = "value";    String val2 = "value2";    schem.setTextPropertyValueAsSimple(prop, val);    Assert.assertEquals(val, schem.getUnqualifiedTextPropertyValue(prop));    schem.setTextPropertyValueAsSimple(prop, val2);    Assert.assertEquals(val2, schem.getUnqualifiedTextPropertyValue(prop));    schem.setTextPropertyValueAsSimple(prop, null);    Assert.assertNull(schem.getUnqualifiedTextProperty(prop));}
public void pdfbox_f10137_0() throws Exception
{    String prop = "testprop";    String val = "value";    String val2 = "value2";    schem.setTextPropertyValueAsSimple(prop, val);    TextType text = schem.getMetadata().getTypeMapping().createText(null, schem.getPrefix(), prop, "value2");    schem.setTextProperty(text);    Assert.assertEquals(val2, schem.getUnqualifiedTextPropertyValue(prop));    Assert.assertEquals(text, schem.getUnqualifiedTextProperty(prop));}
public void pdfbox_f10138_0() throws Exception
{    String bool = "bool";    boolean boolVal = true;    String date = "date";    Calendar dateVal = Calendar.getInstance();    String integ = "integer";    Integer i = 1;    String langprop = "langprop";    String lang = "x-default";    String langVal = "langVal";    String bagprop = "bagProp";    String bagVal = "bagVal";    String seqprop = "SeqProp";    String seqPropVal = "seqval";    String seqdate = "SeqDate";    String prefSchem = "";    schem.setBooleanPropertyValueAsSimple(bool, boolVal);    schem.setDatePropertyValueAsSimple(date, dateVal);    schem.setIntegerPropertyValueAsSimple(integ, i);    schem.setUnqualifiedLanguagePropertyValue(langprop, lang, langVal);    schem.addBagValueAsSimple(bagprop, bagVal);    schem.addUnqualifiedSequenceValue(seqprop, seqPropVal);    schem.addSequenceDateValueAsSimple(seqdate, dateVal);    Assert.assertEquals(Boolean.valueOf(boolVal), schem.getBooleanProperty(prefSchem + bool).getValue());    Assert.assertEquals(dateVal, schem.getDateProperty(prefSchem + date).getValue());    Assert.assertEquals("" + i, schem.getIntegerProperty(prefSchem + integ).getStringValue());    Assert.assertEquals(langVal, schem.getUnqualifiedLanguagePropertyValue(langprop, lang));    Assert.assertTrue(schem.getUnqualifiedBagValueList(bagprop).contains(bagVal));    Assert.assertTrue(schem.getUnqualifiedSequenceValueList(seqprop).contains(seqPropVal));    Assert.assertTrue(schem.getUnqualifiedSequenceDateValueList(seqdate).contains(dateVal));    Assert.assertTrue(schem.getUnqualifiedLanguagePropertyLanguagesValue(langprop).contains(lang));    Assert.assertEquals(boolVal, schem.getBooleanPropertyValueAsSimple(bool).booleanValue());    Assert.assertEquals(dateVal, schem.getDatePropertyValueAsSimple(date));    Assert.assertEquals(i, schem.getIntegerPropertyValueAsSimple(integ));    Assert.assertEquals(langVal, schem.getUnqualifiedLanguagePropertyValue(langprop, lang));    Assert.assertTrue(schem.getUnqualifiedBagValueList(bagprop).contains(bagVal));    Assert.assertTrue(schem.getUnqualifiedSequenceValueList(seqprop).contains(seqPropVal));    Assert.assertTrue(schem.getUnqualifiedSequenceDateValueList(seqdate).contains(dateVal));    Assert.assertTrue(schem.getUnqualifiedLanguagePropertyLanguagesValue(langprop).contains(lang));}
public void pdfbox_f10139_0() throws Exception
{    Assert.assertEquals("nsURI", schem.getNamespace());        schem.addNamespace("http://www.w3.org/1999/02/22-rdf-syntax-ns#", "rdf");    String aboutVal = "aboutTest";    schem.setAboutAsSimple(aboutVal);    Assert.assertEquals(aboutVal, schem.getAboutValue());    Attribute about = new Attribute(XmpConstants.RDF_NAMESPACE, "about", "YEP");    schem.setAbout(about);    Assert.assertEquals(about, schem.getAboutAttribute());    String textProp = "textProp";    String textPropVal = "TextPropTest";    schem.setTextPropertyValue(textProp, textPropVal);    Assert.assertEquals(textPropVal, schem.getUnqualifiedTextPropertyValue(textProp));    TextType text = parent.getTypeMapping().createText(null, "nsSchem", "textType", "GRINGO");    schem.setTextProperty(text);    Assert.assertEquals(text, schem.getUnqualifiedTextProperty("textType"));    Calendar dateVal = Calendar.getInstance();    String date = "nsSchem:dateProp";    schem.setDatePropertyValue(date, dateVal);    Assert.assertEquals(dateVal, schem.getDatePropertyValue(date));    DateType dateType = parent.getTypeMapping().createDate(null, "nsSchem", "dateType", Calendar.getInstance());    schem.setDateProperty(dateType);    Assert.assertEquals(dateType, schem.getDateProperty("dateType"));    String bool = "nsSchem:booleanTestProp";    Boolean boolVal = false;    schem.setBooleanPropertyValue(bool, boolVal);    Assert.assertEquals(boolVal, schem.getBooleanPropertyValue(bool));    BooleanType boolType = parent.getTypeMapping().createBoolean(null, "nsSchem", "boolType", false);    schem.setBooleanProperty(boolType);    Assert.assertEquals(boolType, schem.getBooleanProperty("boolType"));    String intProp = "nsSchem:IntegerTestProp";    Integer intPropVal = 5;    schem.setIntegerPropertyValue(intProp, intPropVal);    Assert.assertEquals(intPropVal, schem.getIntegerPropertyValue(intProp));    IntegerType intType = parent.getTypeMapping().createInteger(null, "nsSchem", "intType", 5);    schem.setIntegerProperty(intType);    Assert.assertEquals(intType, schem.getIntegerProperty("intType"));        boolean ok = false;    try {        schem.getIntegerProperty("boolType");    } catch (IllegalArgumentException e) {        ok = true;    }    Assert.assertTrue(ok);    ok = false;    try {        schem.getUnqualifiedTextProperty("intType");    } catch (IllegalArgumentException e) {        ok = true;    }    Assert.assertTrue(ok);    ok = false;    try {        schem.getDateProperty("textType");    } catch (IllegalArgumentException e) {        ok = true;    }    Assert.assertTrue(ok);    ok = false;    try {        schem.getBooleanProperty("dateType");    } catch (IllegalArgumentException e) {        ok = true;    }}
public void pdfbox_f10140_0() throws Exception
{    String altProp = "AltProp";    String defaultLang = "x-default";    String defaultVal = "Default Language";    String usLang = "en-us";    String usVal = "American Language";    String frLang = "fr-fr";    String frVal = "Lang française";    schem.setUnqualifiedLanguagePropertyValue(altProp, usLang, usVal);    schem.setUnqualifiedLanguagePropertyValue(altProp, defaultLang, defaultVal);    schem.setUnqualifiedLanguagePropertyValue(altProp, frLang, frVal);    Assert.assertEquals(defaultVal, schem.getUnqualifiedLanguagePropertyValue(altProp, defaultLang));    Assert.assertEquals(frVal, schem.getUnqualifiedLanguagePropertyValue(altProp, frLang));    Assert.assertEquals(usVal, schem.getUnqualifiedLanguagePropertyValue(altProp, usLang));    List<String> languages = schem.getUnqualifiedLanguagePropertyLanguagesValue(altProp);        Assert.assertEquals(defaultLang, languages.get(0));    Assert.assertTrue(languages.contains(usLang));    Assert.assertTrue(languages.contains(frLang));        frVal = "Langue française";    schem.setUnqualifiedLanguagePropertyValue(altProp, frLang, frVal);    Assert.assertEquals(frVal, schem.getUnqualifiedLanguagePropertyValue(altProp, frLang));    schem.setUnqualifiedLanguagePropertyValue(altProp, frLang, null);    languages = schem.getUnqualifiedLanguagePropertyLanguagesValue(altProp);    Assert.assertFalse(languages.contains(frLang));    schem.setUnqualifiedLanguagePropertyValue(altProp, frLang, frVal);}
public void pdfbox_f10141_0() throws Exception
{    String bagName = "bagName";    String seqName = "seqName";    String qseqName = "test:" + seqName;    String altName = "AltProp";    String qaltName = "test:" + altName;    String valBagSchem1 = "BagvalSchem1";    String valBagSchem2 = "BagvalSchem2";    String valSeqSchem1 = "seqvalSchem1";    String valSeqSchem2 = "seqvalSchem2";    String valAltSchem1 = "altvalSchem1";    String langAltSchem1 = "x-default";    String valAltSchem2 = "altvalSchem2";    String langAltSchem2 = "fr-fr";    XMPSchema schem1 = new XMPSchema(parent, "http://www.test.org/schem/", "test");    schem1.addQualifiedBagValue(bagName, valBagSchem1);    schem1.addUnqualifiedSequenceValue(seqName, valSeqSchem1);    schem1.setUnqualifiedLanguagePropertyValue(altName, langAltSchem1, valAltSchem1);    XMPSchema schem2 = new XMPSchema(parent, "http://www.test.org/schem/", "test");    schem2.addQualifiedBagValue(bagName, valBagSchem2);    schem2.addUnqualifiedSequenceValue(seqName, valSeqSchem2);    schem2.setUnqualifiedLanguagePropertyValue(altName, langAltSchem2, valAltSchem2);    schem1.merge(schem2);        Assert.assertEquals(valAltSchem2, schem1.getUnqualifiedLanguagePropertyValue(altName, langAltSchem2));    Assert.assertEquals(valAltSchem1, schem1.getUnqualifiedLanguagePropertyValue(altName, langAltSchem1));    List<String> bag = schem1.getUnqualifiedBagValueList(bagName);    Assert.assertTrue(bag.contains(valBagSchem1));    Assert.assertTrue(bag.contains(valBagSchem2));    List<String> seq = schem1.getUnqualifiedSequenceValueList(seqName);    Assert.assertTrue(seq.contains(valSeqSchem1));    Assert.assertTrue(seq.contains(valSeqSchem1));}
public void pdfbox_f10142_0() throws Exception
{    String boolname = "bool";    boolean boolVal = true;    BooleanType bool = parent.getTypeMapping().createBoolean(null, schem.getPrefix(), boolname, boolVal);    Attribute att = new Attribute(XmpConstants.RDF_NAMESPACE, "test", "vgh");    schem.setAttribute(att);    schem.setBooleanProperty(bool);    Assert.assertEquals(schem.getAllProperties(), schem.getAllProperties());    Assert.assertTrue(schem.getAllProperties().contains(bool));    Assert.assertTrue(schem.getAllAttributes().contains(att));    Assert.assertEquals(bool, schem.getProperty(boolname));}
public static Collection<Object[]> pdfbox_f10143_0() throws Exception
{    List<Object[]> params = new ArrayList<>();    InputStream is = TestValidatePermitedMetadata.class.getResourceAsStream("/permited_metadata.txt");    BufferedReader reader = new BufferedReader(new InputStreamReader(is, "ISO-8859-1"));    String line = reader.readLine();    while (line != null) {        if (line.startsWith("http://")) {                        int pos = line.lastIndexOf(':');            int spos = line.lastIndexOf('/', pos);            String namespace = line.substring(0, spos + 1);            String preferred = line.substring(spos + 1, pos);            String fieldname = line.substring(pos + 1);            params.add(new String[] { namespace, preferred, fieldname });        }                        line = reader.readLine();    }    return params;}
public void pdfbox_f10144_0() throws Exception
{        XMPMetadata xmpmd = new XMPMetadata();    TypeMapping mapping = new TypeMapping(xmpmd);    XMPSchemaFactory factory = mapping.getSchemaFactory(namespace);    assertNotNull("Schema not existing: " + namespace, factory);        XMPSchema schema = factory.createXMPSchema(xmpmd, "aa");    assertEquals(preferred, schema.getPreferedPrefix());        boolean found = false;    Class<?> clz = schema.getClass();    for (Field dfield : clz.getDeclaredFields()) {        PropertyType ptype = dfield.getAnnotation(PropertyType.class);        if (ptype != null) {                        if (String.class.equals(dfield.getType())) {                String value = (String) dfield.get(clz);                if (fieldname.equals(value)) {                                        found = true;                    break;                }            } else {                                throw new IllegalArgumentException("Should be a string : " + dfield.getName());            }        }    }    String msg = String.format("Did not find field definition for '%s' in %s (%s)", fieldname, clz.getSimpleName(), namespace);    assertTrue(msg, found);}
public static Collection<Object[]> pdfbox_f10145_0() throws Exception
{    List<Object[]> data = new ArrayList<>();    data.add(new Object[] { "/validxmp/override_ns.rdf" });    data.add(new Object[] { "/validxmp/ghost2.xmp" });    data.add(new Object[] { "/validxmp/history2.rdf" });    data.add(new Object[] { "/validxmp/Notepad++_A1b.xmp" });    data.add(new Object[] { "/validxmp/metadata.rdf" });    return data;}
public void pdfbox_f10146_0() throws Exception
{    InputStream is = this.getClass().getResourceAsStream(path);    DomXmpParser builder = new DomXmpParser();    XMPMetadata rxmp = builder.parse(is);}
public void pdfbox_f10147_0() throws Exception
{    builder = new DomXmpParser();    xmp = XMPMetadata.createXMPMetadata();    typeMapping = xmp.getTypeMapping();}
public void pdfbox_f10148_0() throws Exception
{    AbstractStructuredType structured = getStructured();        Assert.assertNull(structured.getProperty(fieldName));        Method get = clz.getMethod(calculateSimpleGetter(fieldName));    Object result = get.invoke(structured);    Assert.assertNull(result);}
public void pdfbox_f10149_0() throws Exception
{    internalTestSettingValue();}
public void pdfbox_f10150_0() throws Exception
{    initializeSeed(new Random());    for (int i = 0; i < RAND_LOOP_COUNT; i++) {        internalTestSettingValue();    }}
private void pdfbox_f10151_0() throws Exception
{    AbstractStructuredType structured = getStructured();    Object value = getJavaValue(type);    structured.addSimpleProperty(fieldName, value);    Assert.assertNotNull(structured.getProperty(fieldName));        List<Field> fields = getXmpFields(clz);    for (Field field : fields) {                String name = field.get(null).toString();        if (!name.equals(fieldName)) {            Assert.assertNull(structured.getProperty(name));        }    }}
public void pdfbox_f10152_0() throws Exception
{    internalTestPropertyType();}
public void pdfbox_f10153_0() throws Exception
{    initializeSeed(new Random());    for (int i = 0; i < RAND_LOOP_COUNT; i++) {        internalTestPropertyType();    }}
private void pdfbox_f10154_0() throws Exception
{    AbstractStructuredType structured = getStructured();    Object value = getJavaValue(type);    structured.addSimpleProperty(fieldName, value);    Assert.assertNotNull(structured.getProperty(fieldName));        AbstractSimpleProperty asp = (AbstractSimpleProperty) structured.getProperty(fieldName);    Assert.assertEquals(type.getImplementingClass(), asp.getClass());}
public void pdfbox_f10155_0() throws Exception
{    internalTestSetter();}
public void pdfbox_f10156_0() throws Exception
{    initializeSeed(new Random());    for (int i = 0; i < RAND_LOOP_COUNT; i++) {        internalTestSetter();    }}
private void pdfbox_f10157_0() throws Exception
{    AbstractStructuredType structured = getStructured();    String setter = calculateSimpleSetter(fieldName);    Object value = getJavaValue(type);    Method set = clz.getMethod(setter, getJavaType(type));    set.invoke(structured, value);        Assert.assertEquals(value, ((AbstractSimpleProperty) structured.getProperty(fieldName)).getValue());        Method get = clz.getMethod(calculateSimpleGetter(fieldName));    Object result = get.invoke(structured);    Assert.assertTrue(getJavaType(type).isAssignableFrom(result.getClass()));    Assert.assertEquals(value, result);}
protected void pdfbox_f10158_0(Random rand)
{    this.counterRandom = rand;}
public String pdfbox_f10159_0(String name)
{    StringBuilder sb = new StringBuilder(3 + name.length());    sb.append("get").append(calculateFieldNameForMethod(name));    return sb.toString();}
public String pdfbox_f10160_0(String name)
{    StringBuilder sb = new StringBuilder(4 + name.length());    String fn = calculateFieldNameForMethod(name);    sb.append("get").append(fn);    if (!fn.endsWith("s")) {        sb.append("s");    }    return sb.toString();}
public String pdfbox_f10161_0(String name)
{    StringBuilder sb = new StringBuilder(3 + name.length());    sb.append("set").append(calculateFieldNameForMethod(name));    return sb.toString();}
public String pdfbox_f10162_0(String name)
{    StringBuilder sb = new StringBuilder(name.length());    sb.append(name.substring(0, 1).toUpperCase()).append(name.substring(1));    return sb.toString();}
public Class<?> pdfbox_f10163_0(Types type)
{    if (type.getImplementingClass() == TextType.class) {        return String.class;    } else if (type.getImplementingClass() == DateType.class) {        return Calendar.class;    } else if (type.getImplementingClass() == IntegerType.class) {        return Integer.class;    } else if (TextType.class.isAssignableFrom(type.getImplementingClass())) {        return String.class;    } else {        throw new IllegalArgumentException("Type not expected in test : " + type.getImplementingClass());    }}
public Object pdfbox_f10164_0(Types type)
{    if (TextType.class.isAssignableFrom(type.getImplementingClass())) {        return "Text_String_" + counterRandom.nextLong() % MAX_COUNTER;    } else if (type.getImplementingClass() == DateType.class) {        Calendar calendar = Calendar.getInstance();        calendar.setTimeInMillis(counterRandom.nextLong() % MAX_COUNTER);        return calendar;    } else if (type.getImplementingClass() == IntegerType.class) {        return counterRandom.nextInt();    } else {        throw new IllegalArgumentException("Type not expected in test : " + type.getImplementingClass());    }}
public List<Field> pdfbox_f10165_0(Class<?> clz)
{    Field[] fields = clz.getFields();    List<Field> result = new ArrayList<>(fields.length);    for (Field field : fields) {        if (field.getAnnotation(PropertyType.class) != null) {            result.add(field);        }    }    return result;}
public void pdfbox_f10166_0()
{    String nsUri = "nsUri";    String prefix = "prefix";    String localName = "localName";    String value = "value";    Attribute att = new Attribute(nsUri, localName, value);    Assert.assertEquals(nsUri, att.getNamespace());    Assert.assertEquals(localName, att.getName());    Assert.assertEquals(value, att.getValue());    String nsUri2 = "nsUri2";    String prefix2 = "prefix2";    String localName2 = "localName2";    String value2 = "value2";    att.setNsURI(nsUri2);    att.setName(localName2);    att.setValue(value2);    Assert.assertEquals(nsUri2, att.getNamespace());    Assert.assertEquals(localName2, att.getName());    Assert.assertEquals(value2, att.getValue());}
public void pdfbox_f10167_0()
{    String nsUri = "nsUri";    String localName = "localName";    String value = "value";    Attribute att = new Attribute(nsUri, localName, value);    Assert.assertEquals(nsUri, att.getNamespace());    Assert.assertEquals(localName, att.getName());    att = new Attribute(nsUri, localName, value);    Assert.assertEquals(nsUri, att.getNamespace());    Assert.assertEquals(localName, att.getName());}
public void pdfbox_f10168_0() throws Exception
{    XMPMetadata xmp = XMPMetadata.createXMPMetadata();    st = new MyStructuredType(xmp, MY_NS, MY_PREFIX);}
public void pdfbox_f10169_0() throws Exception
{    Assert.assertEquals(MY_NS, st.getNamespace());    Assert.assertEquals(MY_PREFIX, st.getPrefix());    Assert.assertEquals(MY_PREFIX, st.getPrefix());}
public void pdfbox_f10170_0() throws Exception
{    Assert.assertNull(st.getProperty("NOT_EXISTING"));}
public void pdfbox_f10171_0() throws Exception
{    Assert.assertNull(st.getProperty(MyStructuredType.MYTEXT));}
public void pdfbox_f10172_0() throws Exception
{    String s = "my value";    st.addSimpleProperty(MyStructuredType.MYTEXT, s);    Assert.assertEquals(s, st.getPropertyValueAsString(MyStructuredType.MYTEXT));    Assert.assertNull(st.getPropertyValueAsString(MyStructuredType.MYDATE));    Assert.assertNotNull(st.getProperty(MyStructuredType.MYTEXT));}
public void pdfbox_f10173_0() throws Exception
{    Calendar c = Calendar.getInstance();    st.addSimpleProperty(MyStructuredType.MYDATE, c);    Assert.assertEquals(c, st.getDatePropertyAsCalendar(MyStructuredType.MYDATE));    Assert.assertNull(st.getDatePropertyAsCalendar(MyStructuredType.MYTEXT));    Assert.assertNotNull(st.getProperty(MyStructuredType.MYDATE));}
public static Collection<Object[]> pdfbox_f10174_0() throws Exception
{    Collection<Object[]> result = new ArrayList<>();    result.add(new Object[] { AgentNameType.class, "AgentName" });    result.add(new Object[] { ChoiceType.class, "Choice" });    result.add(new Object[] { GUIDType.class, "GUID" });    result.add(new Object[] { LocaleType.class, "Locale" });    result.add(new Object[] { MIMEType.class, "MIME" });    result.add(new Object[] { PartType.class, "Part" });    result.add(new Object[] { ProperNameType.class, "ProperName" });    result.add(new Object[] { RenditionClassType.class, "RenditionClass" });    result.add(new Object[] { URIType.class, "URI" });    result.add(new Object[] { URLType.class, "URL" });    result.add(new Object[] { XPathType.class, "XPath" });    return result;}
public void pdfbox_f10175_0() throws Exception
{    xmp = XMPMetadata.createXMPMetadata();    constructor = clz.getDeclaredConstructor(XMPMetadata.class, String.class, String.class, String.class, Object.class);}
protected TextType pdfbox_f10176_0(XMPMetadata metadata, String namespaceURI, String prefix, String propertyName, Object value) throws Exception
{    Object[] initargs = new Object[] { metadata, namespaceURI, prefix, propertyName, value };    return constructor.newInstance(initargs);}
public void pdfbox_f10177_0() throws Exception
{    TextType element = instanciate(xmp, null, PREFIX, NAME, VALUE);    Assert.assertNull(element.getNamespace());    Assert.assertTrue(element.getValue() instanceof String);    Assert.assertEquals(VALUE, element.getValue());}
public void pdfbox_f10178_0() throws Exception
{    super.before();}
protected AbstractStructuredType pdfbox_f10179_0()
{    return new JobType(xmp, "job");}
public static Collection<Object[]> pdfbox_f10180_0() throws Exception
{    Collection<Object[]> result = new ArrayList<>();    result.add(new Object[] { JobType.class, "id", Types.Text });    result.add(new Object[] { JobType.class, "name", Types.Text });    result.add(new Object[] { JobType.class, "url", Types.URL });    return result;}
public void pdfbox_f10181_0() throws Exception
{    super.before();}
protected AbstractStructuredType pdfbox_f10182_0()
{    return new LayerType(xmp);}
public static Collection<Object[]> pdfbox_f10183_0() throws Exception
{    Collection<Object[]> result = new ArrayList<>();    result.add(new Object[] { LayerType.class, "LayerName", Types.Text });    result.add(new Object[] { LayerType.class, "LayerText", Types.Text });    return result;}
public void pdfbox_f10184_0() throws Exception
{    super.before();}
protected AbstractStructuredType pdfbox_f10185_0()
{    return new ResourceEventType(xmp);}
public static Collection<Object[]> pdfbox_f10186_0() throws Exception
{    Collection<Object[]> result = new ArrayList<>();    result.add(new Object[] { ResourceEventType.class, "action", Types.Choice });    result.add(new Object[] { ResourceEventType.class, "changed", Types.Text });    result.add(new Object[] { ResourceEventType.class, "instanceID", Types.GUID });    result.add(new Object[] { ResourceEventType.class, "parameters", Types.Text });    result.add(new Object[] { ResourceEventType.class, "softwareAgent", Types.AgentName });    result.add(new Object[] { ResourceEventType.class, "when", Types.Date });    return result;}
public void pdfbox_f10187_0() throws Exception
{    super.before();}
protected AbstractStructuredType pdfbox_f10188_0()
{    return new ResourceRefType(xmp);}
public static Collection<Object[]> pdfbox_f10189_0() throws Exception
{    Collection<Object[]> result = new ArrayList<>();            result.add(new Object[] { ResourceRefType.class, "documentID", Types.URI });    result.add(new Object[] { ResourceRefType.class, "filePath", Types.URI });    result.add(new Object[] { ResourceRefType.class, "fromPart", Types.Part });    result.add(new Object[] { ResourceRefType.class, "instanceID", Types.URI });    result.add(new Object[] { ResourceRefType.class, "lastModifyDate", Types.Date });    result.add(new Object[] { ResourceRefType.class, "manager", Types.AgentName });    result.add(new Object[] { ResourceRefType.class, "managerVariant", Types.Text });    result.add(new Object[] { ResourceRefType.class, "manageTo", Types.URI });    result.add(new Object[] { ResourceRefType.class, "manageUI", Types.URI });    result.add(new Object[] { ResourceRefType.class, "maskMarkers", Types.Choice });    result.add(new Object[] { ResourceRefType.class, "partMapping", Types.Text });    result.add(new Object[] { ResourceRefType.class, "renditionClass", Types.RenditionClass });    result.add(new Object[] { ResourceRefType.class, "renditionParams", Types.Text });    result.add(new Object[] { ResourceRefType.class, "toPart", Types.Part });    result.add(new Object[] { ResourceRefType.class, "versionID", Types.Text });    return result;}
public void pdfbox_f10190_0() throws Exception
{    parent = XMPMetadata.createXMPMetadata();}
public void pdfbox_f10191_0()
{    new BooleanType(parent, null, "test", "booleen", "Not a Boolean");}
public void pdfbox_f10192_0()
{    new DateType(parent, null, "test", "date", "Bad Date");}
public void pdfbox_f10193_0()
{    new IntegerType(parent, null, "test", "integer", "Not an int");}
public void pdfbox_f10194_0() throws Exception
{    new RealType(parent, null, "test", "real", "Not a real");}
public void pdfbox_f10195_0() throws Exception
{    new TextType(parent, null, "test", "text", Calendar.getInstance());}
public void pdfbox_f10196_0() throws Exception
{    boolean boolv = true;    Calendar datev = Calendar.getInstance();    int integerv = 1;    float realv = Float.parseFloat("1.69");    String textv = "TEXTCONTENT";    BooleanType bool = parent.getTypeMapping().createBoolean(null, "test", "booleen", boolv);    DateType date = parent.getTypeMapping().createDate(null, "test", "date", datev);    IntegerType integer = parent.getTypeMapping().createInteger(null, "test", "integer", integerv);    RealType real = parent.getTypeMapping().createReal(null, "test", "real", realv);    TextType text = parent.getTypeMapping().createText(null, "test", "text", textv);    Assert.assertEquals(boolv, bool.getValue());    Assert.assertEquals(datev, date.getValue());    Assert.assertEquals(Integer.valueOf(integerv), integer.getValue());    Assert.assertEquals(realv, real.getValue(), 0);    Assert.assertEquals(textv, text.getStringValue());}
public void pdfbox_f10197_0() throws Exception
{    String boolv = "False";    String datev = "2010-03-22T14:33:11+01:00";    String integerv = "10";    String realv = "1.92";    String textv = "text";    BooleanType bool = new BooleanType(parent, null, "test", "booleen", boolv);    DateType date = new DateType(parent, null, "test", "date", datev);    IntegerType integer = new IntegerType(parent, null, "test", "integer", integerv);    RealType real = new RealType(parent, null, "test", "real", realv);    TextType text = new TextType(parent, null, "test", "text", textv);    Assert.assertEquals(boolv, bool.getStringValue());    Assert.assertEquals(datev, date.getStringValue());    Assert.assertEquals(integerv, integer.getStringValue());    Assert.assertEquals(realv, real.getStringValue());    Assert.assertEquals(textv, text.getStringValue());}
public void pdfbox_f10198_0() throws Exception
{    String ns = "http://www.test.org/pdfa/";    BooleanType bool = parent.getTypeMapping().createBoolean(ns, "test", "booleen", true);    DateType date = parent.getTypeMapping().createDate(ns, "test", "date", Calendar.getInstance());    IntegerType integer = parent.getTypeMapping().createInteger(ns, "test", "integer", 1);    RealType real = parent.getTypeMapping().createReal(ns, "test", "real", (float) 1.6);    TextType text = parent.getTypeMapping().createText(ns, "test", "text", "TEST");    Assert.assertEquals(ns, bool.getNamespace());    Assert.assertEquals(ns, date.getNamespace());    Assert.assertEquals(ns, integer.getNamespace());    Assert.assertEquals(ns, real.getNamespace());    Assert.assertEquals(ns, text.getNamespace());}
public void pdfbox_f10199_0() throws Exception
{    throw new IllegalArgumentException("TEST", new Throwable());}
public void pdfbox_f10200_0() throws Exception
{    IntegerType integer = new IntegerType(parent, null, "test", "integer", 1);    Attribute value = new Attribute("http://www.test.org/test/", "value1", "StringValue1");    Attribute value2 = new Attribute("http://www.test.org/test/", "value2", "StringValue2");    integer.setAttribute(value);        Assert.assertEquals(value, integer.getAttribute(value.getName()));    Assert.assertTrue(integer.containsAttribute(value.getName()));        integer.setAttribute(value2);    Assert.assertEquals(value2, integer.getAttribute(value2.getName()));    integer.removeAttribute(value2.getName());    Assert.assertFalse(integer.containsAttribute(value2.getName()));        Attribute valueNS = new Attribute("http://www.tefst2.org/test/", "value2", "StringValue.2");    integer.setAttribute(valueNS);    Attribute valueNS2 = new Attribute("http://www.test2.org/test/", "value2", "StringValueTwo");    integer.setAttribute(valueNS2);    List<Attribute> atts = integer.getAllAttributes();    /*         * for (Attribute attribute : atts) { System.out.println(attribute.getLocalName ()+" :"+attribute.getValue()); }         */    Assert.assertFalse(atts.contains(valueNS));    Assert.assertTrue(atts.contains(valueNS2));}
public void pdfbox_f10201_0() throws Exception
{    super.before();}
protected AbstractStructuredType pdfbox_f10202_0()
{    return new ThumbnailType(xmp);}
public static Collection<Object[]> pdfbox_f10203_0() throws Exception
{    Collection<Object[]> result = new ArrayList<>();    result.add(new Object[] { ThumbnailType.class, "format", Types.Choice });    result.add(new Object[] { ThumbnailType.class, "height", Types.Integer });    result.add(new Object[] { ThumbnailType.class, "width", Types.Integer });    result.add(new Object[] { ThumbnailType.class, "image", Types.Text });    return result;}
public void pdfbox_f10204_0() throws Exception
{    super.before();}
protected AbstractStructuredType pdfbox_f10205_0()
{    return new VersionType(xmp);}
public static Collection<Object[]> pdfbox_f10206_0() throws Exception
{    Collection<Object[]> result = new ArrayList<>();    result.add(new Object[] { VersionType.class, "modifier", Types.ProperName });    return result;}
public void pdfbox_f10207_0() throws Exception
{    metadata = XMPMetadata.createXMPMetadata();    String tmpNsURI = "http://www.test.org/schem/";    tmp = new XMPSchema(metadata, tmpNsURI, "test");    tmp.addQualifiedBagValue("BagContainer", "Value1");    tmp.addQualifiedBagValue("BagContainer", "Value2");    tmp.addQualifiedBagValue("BagContainer", "Value3");    tmp.addUnqualifiedSequenceValue("SeqContainer", "Value1");    tmp.addUnqualifiedSequenceValue("SeqContainer", "Value2");    tmp.addUnqualifiedSequenceValue("SeqContainer", "Value3");    tmp.addProperty(metadata.getTypeMapping().createText(null, "test", "simpleProperty", "YEP"));    tmp2 = new XMPSchema(metadata, "http://www.space.org/schem/", "space", "space");    tmp2.addUnqualifiedSequenceValue("SeqSpContainer", "ValueSpace1");    tmp2.addUnqualifiedSequenceValue("SeqSpContainer", "ValueSpace2");    tmp2.addUnqualifiedSequenceValue("SeqSpContainer", "ValueSpace3");    metadata.addSchema(tmp);    metadata.addSchema(tmp2);        Assert.assertEquals(tmp, metadata.getSchema(tmpNsURI));    Assert.assertNull(metadata.getSchema("THIS URI NOT EXISTS !"));}
public void pdfbox_f10208_0()
{    List<XMPSchema> vals = metadata.getAllSchemas();    Assert.assertTrue(vals.contains(tmp));    Assert.assertTrue(vals.contains(tmp2));}
public void pdfbox_f10209_0() throws XmpSerializationException
{    throw new XmpSerializationException("TEST");}
public void pdfbox_f10210_0() throws XmpSerializationException
{    throw new XmpSerializationException("TEST", new Throwable());}
public void pdfbox_f10211_0() throws Exception
{    String xpacketBegin = "TESTBEG", xpacketId = "TESTID", xpacketBytes = "TESTBYTES", xpacketEncoding = "TESTENCOD";    metadata = XMPMetadata.createXMPMetadata(xpacketBegin, xpacketId, xpacketBytes, xpacketEncoding);    Assert.assertEquals(xpacketBegin, metadata.getXpacketBegin());    Assert.assertEquals(xpacketId, metadata.getXpacketId());    Assert.assertEquals(xpacketBytes, metadata.getXpacketBytes());    Assert.assertEquals(xpacketEncoding, metadata.getXpacketEncoding());}
public void pdfbox_f10212_0() throws IOException, XmpParsingException
{        String xmpmeta = "<?xpacket id=\"W5M0MpCehiHzreSzNTczkc9d\"?>\n" + "<x:xmpmeta xmlns:x=\"adobe:ns:meta/\" x:xmptk=\"Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39\">\n" + "   <rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n" + "      <rdf:Description rdf:about=\"\"\n" + "            xmlns:xap=\"http://ns.adobe.com/xap/1.0/\">\n" + "         <xap:CreatorTool>Acrobat PDFMaker 8.1 for Word</xap:CreatorTool>\n" + "         <xap:ModifyDate>2008-11-12T15:29:43+01:00</xap:ModifyDate>\n" + "         <xap:CreateDate>2008-11-12T15:29:40+01:00</xap:CreateDate>\n" + "         <xap:MetadataDate>2008-11-12T15:29:43+01:00</xap:MetadataDate>\n" + "      </rdf:Description>\n" + "      <rdf:Description rdf:about=\"\"\n" + "            xmlns:pdf=\"http://ns.adobe.com/pdf/1.3/\">\n" + "         <pdf:Producer>Acrobat Distiller 8.1.0 (Windows)</pdf:Producer>\n" + "      </rdf:Description>\n" + "      <rdf:Description rdf:about=\"\"\n" + "            xmlns:dc=\"http://purl.org/dc/elements/1.1/\">\n" + "         <dc:format>application/pdf</dc:format>\n" + "         <dc:creator>\n" + "            <rdf:Seq>\n" + "               <rdf:li>R002325</rdf:li>\n" + "            </rdf:Seq>\n" + "         </dc:creator>\n" + "         <dc:subject>\n" + "            <rdf:Bag>\n" + "               <rdf:li>one</rdf:li>\n" + "               <rdf:li>two</rdf:li>\n" + "               <rdf:li>three</rdf:li>\n" + "               <rdf:li>four</rdf:li>\n" + "            </rdf:Bag>\n" + "         </dc:subject>\n" + "         <dc:title>\n" + "            <rdf:Alt>\n" + "               <rdf:li xml:lang=\"x-default\"> </rdf:li>\n" + "            </rdf:Alt>\n" + "         </dc:title>\n" + "      </rdf:Description>\n" + "      <rdf:Description rdf:about=\"\"\n" + "            xmlns:xapMM=\"http://ns.adobe.com/xap/1.0/mm/\">\n" + "         <xapMM:DocumentID>uuid:31ae92cf-9a27-45e0-9371-0d2741e25919</xapMM:DocumentID>\n" + "         <xapMM:InstanceID>uuid:2c7eb5da-9210-4666-8cef-e02ef6631c5e</xapMM:InstanceID>\n" + "      </rdf:Description>\n" + "   </rdf:RDF>\n" + "</x:xmpmeta>\n" + "<?xpacket end=\"w\"?>";    DomXmpParser xmpParser = new DomXmpParser();    xmpParser.setStrictParsing(false);        XMPMetadata xmp = xmpParser.parse(xmpmeta.getBytes());    XMPBasicSchema basicSchema = xmp.getXMPBasicSchema();    Calendar createDate1 = basicSchema.getCreateDate();    basicSchema.setCreateDate(new GregorianCalendar());    Calendar createDate2 = basicSchema.getCreateDate();    Assert.assertFalse("CreateDate has not been set", createDate1.equals(createDate2));        DublinCoreSchema dublinCoreSchema = xmp.getDublinCoreSchema();    List<String> subjects = dublinCoreSchema.getSubjects();    Assert.assertEquals(4, subjects.size());}
