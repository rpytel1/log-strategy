public void metron_f1072_0() throws ParseException
{        JSONParser parser = new JSONParser();    message = (JSONObject) parser.parse(input);        when(tuple.getBinaryByField(VALUE.getFieldName())).thenReturn(input.getBytes(StandardCharsets.UTF_8));}
public void metron_f1073_0() throws Exception
{        ProfilerConfig config = toProfilerConfig(profileWithOnlyIfTrue);    ProfileSplitterBolt bolt = createBolt(config);    bolt.execute(tuple);        String expectedEntity = "10.0.0.1";    ProfileConfig expectedConfig = config.getProfiles().get(0);    Values expected = new Values(message, timestamp, expectedEntity, expectedConfig);        verify(outputCollector, times(1)).emit(eq(tuple), eq(expected));        verify(outputCollector, times(1)).ack(eq(tuple));}
public void metron_f1074_0() throws Exception
{        ProfilerConfig config = toProfilerConfig(twoProfilesDefined);    ProfileSplitterBolt bolt = createBolt(config);    bolt.execute(tuple);        final String expectedEntity = "global";    {                ProfileConfig profile1 = config.getProfiles().get(0);        Values expected = new Values(message, timestamp, expectedEntity, profile1);        verify(outputCollector, times(1)).emit(eq(tuple), eq(expected));    }    {                ProfileConfig profile2 = config.getProfiles().get(1);        Values expected = new Values(message, timestamp, expectedEntity, profile2);        verify(outputCollector, times(1)).emit(eq(tuple), eq(expected));    }        verify(outputCollector, times(1)).ack(eq(tuple));}
public void metron_f1075_0() throws Exception
{        ProfilerConfig config = toProfilerConfig(noProfilesDefined);    ProfileSplitterBolt bolt = createBolt(config);    bolt.execute(tuple);        verify(outputCollector, times(0)).emit(any(Tuple.class), any());        verify(outputCollector, times(1)).ack(eq(tuple));}
public void metron_f1076_0() throws Exception
{    ProfilerConfig config = toProfilerConfig(profileWithOnlyIfTrue);    ProfileSplitterBolt bolt = createBolt(config);    bolt.execute(tuple);        verify(outputCollector, times(1)).emit(eq(tuple), any(Values.class));        verify(outputCollector, times(1)).ack(eq(tuple));}
public void metron_f1077_0() throws Exception
{    ProfilerConfig config = toProfilerConfig(profileWithOnlyIfMissing);    ProfileSplitterBolt bolt = createBolt(config);    bolt.execute(tuple);        verify(outputCollector, times(1)).emit(eq(tuple), any(Values.class));        verify(outputCollector, times(1)).ack(eq(tuple));}
public void metron_f1078_0() throws Exception
{    ProfilerConfig config = toProfilerConfig(profileWithOnlyIfFalse);    ProfileSplitterBolt bolt = createBolt(config);    bolt.execute(tuple);        verify(outputCollector, times(0)).emit(any());        verify(outputCollector, times(1)).ack(eq(tuple));}
public void metron_f1079_0() throws Exception
{    ProfilerConfig config = toProfilerConfig(profileWithOnlyIfTrue);    ProfileSplitterBolt bolt = createBolt(config);    bolt.execute(tuple);        String expectedEntity = "10.0.0.1";    ProfileConfig expectedConfig = config.getProfiles().get(0);    Values expected = new Values(message, timestamp, expectedEntity, expectedConfig);        verify(outputCollector, times(1)).emit(eq(tuple), eq(expected));        verify(outputCollector, times(1)).ack(eq(tuple));}
public void metron_f1080_0() throws Exception
{    ProfilerConfig config = toProfilerConfig(profileWithOnlyIfInvalid);    ProfileSplitterBolt bolt = createBolt(config);    bolt.execute(tuple);        verify(outputCollector, times(0)).emit(any(Values.class));}
public void metron_f1081_0() throws Exception
{        when(tuple.getBinary(0)).thenReturn(null);    ProfilerConfig config = toProfilerConfig(profileWithOnlyIfInvalid);    ProfileSplitterBolt bolt = createBolt(config);    bolt.execute(tuple);        verify(outputCollector, times(0)).emit(any(Values.class));}
private ProfilerConfig metron_f1082_0(String configAsJSON) throws Exception
{    InputStream in = new ByteArrayInputStream(configAsJSON.getBytes(StandardCharsets.UTF_8));    return JSONUtils.INSTANCE.load(in, ProfilerConfig.class);}
private ProfileSplitterBolt metron_f1083_0(ProfilerConfig config) throws Exception
{    ProfileSplitterBolt bolt = new ProfileSplitterBolt("zookeeperURL");    bolt.setCuratorFramework(client);    bolt.setZKCache(cache);    bolt.getConfigurations().updateProfilerConfig(config);    bolt.prepare(new HashMap<>(), topologyContext, outputCollector);        DefaultMessageRouter router = new DefaultMessageRouter(bolt.getStellarContext());    router.setClockFactory(new FixedClockFactory(timestamp));    bolt.setRouter(router);    return bolt;}
public static void metron_f1084_0(String[] args)
{    Options options = new Options();    try {        CommandLineParser parser = new PosixParser();        CommandLine cmd = null;        try {            cmd = ParserOptions.parse(parser, args);        } catch (ParseException pe) {            pe.printStackTrace();            final HelpFormatter usageFormatter = new HelpFormatter();            usageFormatter.printHelp("HLLPMeasurement", null, options, null, true);            System.exit(-1);        }        if (cmd.hasOption("h")) {            final HelpFormatter usageFormatter = new HelpFormatter();            usageFormatter.printHelp("HLLPMeasurement", null, options, null, true);            System.exit(0);        }        final String chartDelim = ParserOptions.CHART_DELIM.get(cmd, "|");        final int numTrials = Integer.parseInt(ParserOptions.NUM_TRIALS.get(cmd, "5000"));        final int cardMin = Integer.parseInt(ParserOptions.CARD_MIN.get(cmd, "200"));        final int cardMax = Integer.parseInt(ParserOptions.CARD_MAX.get(cmd, "1000"));        final int cardStep = Integer.parseInt(ParserOptions.CARD_STEP.get(cmd, "200"));        final int cardStart = (((cardMin - 1) / cardStep) * cardStep) + cardStep;        final int spMin = Integer.parseInt(ParserOptions.SP_MIN.get(cmd, "4"));        final int spMax = Integer.parseInt(ParserOptions.SP_MAX.get(cmd, "32"));        final int spStep = Integer.parseInt(ParserOptions.SP_STEP.get(cmd, "4"));        final int pMin = Integer.parseInt(ParserOptions.P_MIN.get(cmd, "4"));        final int pMax = Integer.parseInt(ParserOptions.P_MAX.get(cmd, "32"));        final int pStep = Integer.parseInt(ParserOptions.P_STEP.get(cmd, "4"));        final double errorPercentile = Double.parseDouble(ParserOptions.ERR_PERCENTILE.get(cmd, "50"));        final double timePercentile = Double.parseDouble(ParserOptions.TIME_PERCENTILE.get(cmd, "50"));        final double sizePercentile = Double.parseDouble(ParserOptions.SIZE_PERCENTILE.get(cmd, "50"));        final boolean formatErrPercent = Boolean.parseBoolean(ParserOptions.ERR_FORMAT_PERCENT.get(cmd, "true"));        final int errMultiplier = formatErrPercent ? 100 : 1;        final Function<Double, String> errorFormatter = (v -> ERR_FORMAT.format(v * errMultiplier));        final Function<Double, String> timeFormatter = (v -> TIME_FORMAT.format(v / NANO_TO_MILLIS));        final Function<Double, String> sizeFormatter = (v -> SIZE_FORMAT.format(v));        final String[] chartKey = new String[] { "card: cardinality", "sp: sparse precision value", "p: normal precision value", "err: error as a percent of the expected cardinality; ", "time: total time to add all values to the hllp estimator and calculate a cardinality estimate", "size: size of the hllp set in bytes once all values have been added for the specified cardinality", "l=low, m=mid(based on percentile chosen), h=high, std=standard deviation" };        final String[] chartHeader = new String[] { "card", "sp", "p", "err l/m/h/std (% of actual)", "time l/m/h/std (ms)", "size l/m/h/std (b)" };        final int[] chartPadding = new int[] { 10, 10, 10, 40, 40, 30 };        if (spMin < pMin) {            throw new IllegalArgumentException("p must be <= sp");        }        if (spMax < pMax) {            throw new IllegalArgumentException("p must be <= sp");        }        println("Options Used");        println("------------");        println("num trials: " + numTrials);        println("card min: " + cardMin);        println("card max: " + cardMax);        println("card step: " + cardStep);        println("card start: " + cardStart);        println("sp min: " + spMin);        println("sp max: " + spMax);        println("sp step: " + spStep);        println("p min: " + pMin);        println("p max: " + pMax);        println("p step: " + pStep);        println("error percentile: " + errorPercentile);        println("time percentile: " + timePercentile);        println("size percentile: " + sizePercentile);        println("format err as %: " + formatErrPercent);        println("");        printHeading(chartKey, chartHeader, chartPadding, chartDelim);        for (int c = cardStart; c <= cardMax; c += cardStep) {            for (int sp = spMin; sp <= spMax; sp += spStep) {                for (int p = pMin; p <= pMax; p += pStep) {                    DescriptiveStatistics errorStats = new DescriptiveStatistics();                    DescriptiveStatistics timeStats = new DescriptiveStatistics();                    DescriptiveStatistics sizeStats = new DescriptiveStatistics();                    for (int i = 0; i < numTrials; i++) {                        List<Object> trialSet = buildTrialSet(c);                        Set unique = new HashSet();                        unique.addAll(trialSet);                        long distinctVals = unique.size();                        HyperLogLogPlus hllp = new HyperLogLogPlus(p, sp);                        long timeStart = System.nanoTime();                        hllp.addAll(trialSet);                        long dvEstimate = hllp.cardinality();                        long timeEnd = System.nanoTime();                        long timeElapsed = timeEnd - timeStart;                        double rawError = Math.abs(dvEstimate - distinctVals) / (double) distinctVals;                        errorStats.addValue(rawError);                        timeStats.addValue(timeElapsed);                        sizeStats.addValue(SerDeUtils.toBytes(hllp).length);                    }                    MeasureResultFormatter errorRF = new MeasureResultFormatter(errorStats, errorFormatter, errorPercentile);                    MeasureResultFormatter timeRF = new MeasureResultFormatter(timeStats, timeFormatter, timePercentile);                    MeasureResultFormatter sizeRF = new MeasureResultFormatter(sizeStats, sizeFormatter, sizePercentile);                    println(formatWithPadding(new String[] { "" + c, "" + sp, "" + p, errorRF.getFormattedResults(), timeRF.getFormattedResults(), sizeRF.getFormattedResults() }, chartPadding, chartDelim));                }            }        }    } catch (Exception e) {        e.printStackTrace();        System.exit(-1);    }}
private static void metron_f1085_0(String[] key, String[] header, int[] chartPadding, String chartDelim)
{    printHeadingKey(key);    printDescription();    printHeaderRow(header, chartPadding, chartDelim);    printChartSpacer(header.length, chartPadding, chartDelim, CHART_SPACER);}
private static void metron_f1086_0(String[] key)
{    println("Table Key");    println("---------");    for (String v : key) {        println(v);    }    println("");}
private static void metron_f1087_0()
{    println("Metrics Table");    println("-------------");}
private static void metron_f1088_0(String[] header, int[] padding, String delim)
{    String headerPadded = formatWithPadding(header, padding, delim);    println(headerPadded);}
private static void metron_f1089_0(int totlength, int[] padding, String delim, String spacerStr)
{    String[] spacer = new String[totlength];    Arrays.fill(spacer, spacerStr);    String spacerPadded = formatWithPadding(spacer, padding, delim, spacerStr);    println(spacerPadded);}
private static void metron_f1090_0(String val)
{    System.out.println(val);}
private static String metron_f1091_0(String[] columns, int[] padding, String delim)
{    return formatWithPadding(columns, padding, delim, " ");}
private static String metron_f1092_0(String[] columns, int[] padding, String delim, String paddingStr)
{    StringBuilder sb = new StringBuilder();    sb.append(delim);    for (int i = 0; i < columns.length; i++) {        sb.append(org.apache.commons.lang.StringUtils.rightPad(columns[i], padding[i], paddingStr));        sb.append(delim);    }    return sb.toString();}
public String metron_f1093_0()
{    return formatter.apply(stats.getMin());}
public String metron_f1094_0()
{    return formatter.apply(stats.getPercentile(percentile));}
public String metron_f1095_0()
{    return formatter.apply(stats.getMax());}
public MeasureResultFormatter metron_f1096_0(boolean showStd)
{    this.showStd = showStd;    return this;}
public String metron_f1097_0()
{    if (showStd) {        return Joiner.on(delim).join(getMin(), getPercentile(), getMax(), getStd());    } else {        return Joiner.on(delim).join(getMin(), getPercentile(), getMax());    }}
public String metron_f1098_0()
{    return formatter.apply(stats.getStandardDeviation());}
private static List<Object> metron_f1099_0(int cardinality)
{    List<Object> trialSet = new ArrayList(cardinality);    for (int i = 0; i < cardinality; i++) {        trialSet.add(Math.random());    }    return trialSet;}
public boolean metron_f1100_0(CommandLine cli)
{    return cli.hasOption(shortCode);}
public String metron_f1101_0(CommandLine cli)
{    return cli.getOptionValue(shortCode);}
public String metron_f1102_0(CommandLine cli, String defaultVal)
{    return has(cli) ? cli.getOptionValue(shortCode) : defaultVal;}
public static CommandLine metron_f1103_0(CommandLineParser parser, String[] args) throws ParseException
{    try {        CommandLine cli = parser.parse(getOptions(), args);        if (HELP.has(cli)) {            printHelp();            System.exit(0);        }        return cli;    } catch (ParseException e) {        System.err.println("Unable to parse args: " + Joiner.on(' ').join(args));        e.printStackTrace(System.err);        printHelp();        throw e;    }}
public static void metron_f1104_0()
{    HelpFormatter formatter = new HelpFormatter();    formatter.printHelp("HLLPMeasurement", getOptions());}
public static Options metron_f1105_0()
{    Options ret = new Options();    for (ParserOptions o : ParserOptions.values()) {        ret.addOption(o.option);    }    return ret;}
public int metron_f1106_0()
{    return sp;}
public int metron_f1107_0()
{    return p;}
public boolean metron_f1108_0(List<Object> objects)
{    boolean updated = false;    for (Object o : objects) {        updated |= add(o);    }    return updated;}
public boolean metron_f1109_0(Object o)
{    return hllp.offer(o);}
public long metron_f1110_0()
{    return hllp.cardinality();}
public HyperLogLogPlus metron_f1111_0(List<HyperLogLogPlus> estimators)
{    List<com.clearspring.analytics.stream.cardinality.HyperLogLogPlus> converted = Lists.transform(estimators, s -> s.hllp);    ICardinality merged = null;    try {        merged = hllp.merge(converted.toArray(new com.clearspring.analytics.stream.cardinality.HyperLogLogPlus[] {}));    } catch (CardinalityMergeException e) {        throw new IllegalArgumentException("Unable to merge estimators", e);    }    return new HyperLogLogPlus(p, sp, (com.clearspring.analytics.stream.cardinality.HyperLogLogPlus) merged);}
public boolean metron_f1112_0(Object o)
{    if (this == o)        return true;    if (o == null || getClass() != o.getClass())        return false;    HyperLogLogPlus that = (HyperLogLogPlus) o;    return hllp.equals(that.hllp);}
public int metron_f1113_0()
{    return hllp.hashCode();}
public Object metron_f1114_0(List<Object> args)
{    if (args.size() < 2) {        throw new IllegalArgumentException("Must pass an hllp estimator set and at least one value to add to the set");    } else {        HyperLogLogPlus hllp = ConversionUtils.convert(args.get(0), HyperLogLogPlus.class);        if (hllp == null) {            hllp = new HyperLogLogPlus();        }        Object secondArg = args.get(1);        if (secondArg instanceof List) {            hllp.addAll((List) secondArg);        } else {            hllp.add(secondArg);        }        return hllp;    }}
public Object metron_f1115_0(List<Object> args)
{    if (args.size() == 1) {        if (args.get(0) instanceof HyperLogLogPlus) {            HyperLogLogPlus hllpSet = (HyperLogLogPlus) args.get(0);            return hllpSet.cardinality();        } else {            return 0L;        }    } else {        return 0L;    }}
public Object metron_f1116_0(List<Object> args)
{    if (args.size() == 0) {        return new HyperLogLogPlus();    } else if (args.size() == 1) {        Integer p = ConversionUtils.convert(args.get(0), Integer.class);        if (p == null) {            throw new IllegalArgumentException(String.format("Unable to get p value from '%s'", args.get(0)));        }        return new HyperLogLogPlus(p);    } else {        Integer p = ConversionUtils.convert(args.get(0), Integer.class);        Integer sp = ConversionUtils.convert(args.get(1), Integer.class);        if (p == null) {            throw new IllegalArgumentException(String.format("Unable to get p value from '%s'", args.get(0)));        }        if (sp == null) {            throw new IllegalArgumentException(String.format("Unable to get sp value from '%s'", args.get(1)));        }        return new HyperLogLogPlus(p, sp);    }}
public Object metron_f1117_0(List<Object> args)
{    if (args.size() != 1) {        throw new IllegalArgumentException("Must pass single list of hllp sets to merge");    } else {        List<Object> estimators = new ArrayList();        if (args.get(0) instanceof List) {            estimators = (List) args.get(0);        } else {            estimators.add(args.get(0));        }        if (estimators.size() == 0) {            return null;        }        HyperLogLogPlus hllp = ConversionUtils.convert(estimators.get(0), HyperLogLogPlus.class);        if (estimators.size() > 1) {            hllp = hllp.merge(getEstimatorsFromIndex(estimators, 1));        }        return hllp;    }}
private List<HyperLogLogPlus> metron_f1118_0(List<Object> args, int index)
{    return ConversionUtils.convertList(args.subList(index, args.size()), HyperLogLogPlus.class);}
public static int metron_f1119_0(double value, int numBins, Function<Integer, Double> boundFunc)
{    double lastBound = Double.NEGATIVE_INFINITY;    for (int bin = 0; bin < numBins; ++bin) {        double bound = boundFunc.apply(bin);        if (lastBound > bound) {            throw new IllegalStateException("Your bins must be non-decreasing");        }        if (value <= bound) {            return bin;        }        lastBound = bound;    }    return numBins;}
public Object metron_f1120_0(List<Object> args)
{    Double value = convert(args.get(0), Double.class);    final List<Number> bins = args.size() > 1 ? convert(args.get(1), List.class) : null;    if (value == null || bins == null || bins.size() == 0) {        return -1;    }    return getBin(value, bins.size(), bin -> bins.get(bin).doubleValue());}
public Object metron_f1121_0(List<Object> args)
{    if (args.isEmpty()) {        throw new IllegalArgumentException("IT_ENTROPY expects exactly one argument.");    }    Object inputObj = args.get(0);    if (inputObj == null) {        return null;    }    if (!(inputObj instanceof Map)) {        throw new IllegalArgumentException("IT_ENTROPY expects exactly one argument and expects it to be a map of counts (e.g. Map<?, Integer>)");    }    Map<?, Integer> countMap = (Map<?, Integer>) inputObj;    return InformationTheoryUtil.INSTANCE.bitEntropy(countMap);}
public double metron_f1122_0(Map<?, Integer> counts, double logOfBase)
{    double ret = 0.0;    int n = 0;    if (counts == null || counts.isEmpty()) {        return ret;    }    for (Integer f : counts.values()) {        n += f;    }    for (Integer f : counts.values()) {        double p = f.doubleValue() / n;        ret -= p * Math.log(p) / logOfBase;    }    return ret;}
public double metron_f1123_0(Map<?, Integer> counts, int base)
{    return entropy(counts, Math.log(base));}
public double metron_f1124_0(Map<?, Integer> counts)
{    return entropy(counts, LOG2);}
public void metron_f1125_0(double value)
{    long n1 = n;    min = min == null ? value : Math.min(min, value);    max = max == null ? value : Math.max(max, value);    sum += value;    sumOfLogs += Math.log(value);    sumOfSquares += value * value;    digest.add(value);    n++;    double delta, delta_n, delta_n2, term1;        delta = value - M1;        delta_n = delta / n;    delta_n2 = delta_n * delta_n;    term1 = delta * delta_n * n1;        M1 += delta_n;        M4 += term1 * delta_n2 * (n * n - 3 * n + 3) + 6 * delta_n2 * M2 - 4 * delta_n * M3;    M3 += term1 * delta_n * (n - 2) - 3 * delta_n * M2;    M2 += term1;    checkFlowError(sumOfSquares, sum, sumOfSquares, M1, M2, M3, M4);}
private void metron_f1126_0(double sumOfSquares, double sum, double... vals)
{        for (double val : vals) {        if (Double.isInfinite(val)) {            throw new IllegalStateException("Double overflow!");        }    }        if (sumOfSquares == 0.0 && sum > 0) {        throw new IllegalStateException("Double overflow!");    }}
public long metron_f1127_0()
{    return n;}
public double metron_f1128_0()
{    return min == null ? Double.NaN : min;}
public double metron_f1129_0()
{    return max == null ? Double.NaN : max;}
public double metron_f1130_0()
{    return getSum() / getCount();}
public double metron_f1131_0()
{    return sum;}
public double metron_f1132_0()
{    return M2 / (n - 1.0);}
public double metron_f1133_0()
{    return FastMath.sqrt(getVariance());}
public double metron_f1134_0()
{    throw new UnsupportedOperationException("Unwilling to compute the geometric mean.");}
public double metron_f1135_0()
{    throw new UnsupportedOperationException("Unwilling to compute the geometric mean.");}
public double metron_f1136_0()
{    return FastMath.sqrt(sumOfSquares / n);}
public double metron_f1137_0()
{    return sumOfLogs;}
public double metron_f1138_0()
{    return sumOfSquares;}
public double metron_f1139_0()
{        if (n < 4) {        return Double.NaN;    }    double std = getStandardDeviation();    double t1 = (1.0 * n) * (n + 1) / ((n - 1) * (n - 2) * (n - 3));    double t3 = 3.0 * ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));    return t1 * (M4 / FastMath.pow(std, 4)) - t3;}
public double metron_f1140_0()
{        if (n < 3) {        return Double.NaN;    }    double t1 = (1.0 * n) / ((n - 1) * (n - 2));    double std = getStandardDeviation();    return t1 * M3 / FastMath.pow(std, 3);}
public double metron_f1141_0(double p)
{    return digest.quantile(p / 100.0);}
public StatisticsProvider metron_f1142_0(StatisticsProvider provider)
{    OnlineStatisticsProvider combined = new OnlineStatisticsProvider();    OnlineStatisticsProvider a = this;    OnlineStatisticsProvider b = (OnlineStatisticsProvider) provider;        combined.n = a.n + b.n;    combined.sum = a.sum + b.sum;    if (a.min != null && b.min != null) {        combined.min = Math.min(a.min, b.min);        combined.max = Math.max(a.max, b.max);    } else {        combined.min = a.min;        combined.max = a.max;    }    combined.sumOfSquares = a.sumOfSquares + b.sumOfSquares;    combined.sumOfLogs = a.sumOfLogs + b.sumOfLogs;        double delta = b.M1 - a.M1;    double delta2 = delta * delta;    double delta3 = delta * delta2;    double delta4 = delta2 * delta2;    combined.M1 = (a.n * a.M1 + b.n * b.M1) / combined.n;    combined.M2 = a.M2 + b.M2 + delta2 * a.n * b.n / combined.n;    combined.M3 = a.M3 + b.M3 + delta3 * a.n * b.n * (a.n - b.n) / (combined.n * combined.n);    combined.M3 += 3.0 * delta * (a.n * b.M2 - b.n * a.M2) / combined.n;    combined.M4 = a.M4 + b.M4 + delta4 * a.n * b.n * (a.n * a.n - a.n * b.n + b.n * b.n) / (combined.n * combined.n * combined.n);    combined.M4 += 6.0 * delta2 * (a.n * a.n * b.M2 + b.n * b.n * a.M2) / (combined.n * combined.n) + 4.0 * delta * (a.n * b.M3 - b.n * a.M3) / combined.n;        combined.digest.add(a.digest);    combined.digest.add(b.digest);    checkFlowError(combined.sumOfSquares, sum, combined.sumOfSquares, combined.M1, combined.M2, combined.M3, combined.M4);    return combined;}
public boolean metron_f1143_0(Object o)
{    if (this == o)        return true;    if (o == null || getClass() != o.getClass())        return false;    OnlineStatisticsProvider that = (OnlineStatisticsProvider) o;    if (n != that.n)        return false;    if (Double.compare(that.sum, sum) != 0)        return false;    if (Double.compare(that.sumOfSquares, sumOfSquares) != 0)        return false;    if (Double.compare(that.sumOfLogs, sumOfLogs) != 0)        return false;    if (Double.compare(that.M1, M1) != 0)        return false;    if (Double.compare(that.M2, M2) != 0)        return false;    if (Double.compare(that.M3, M3) != 0)        return false;    if (Double.compare(that.M4, M4) != 0)        return false;    if (digest != null ? !digest.equals(that.digest) : that.digest != null)        return false;    if (min != null ? !min.equals(that.min) : that.min != null)        return false;    return max != null ? max.equals(that.max) : that.max == null;}
public int metron_f1144_0()
{    int result;    long temp;    result = digest != null ? digest.hashCode() : 0;    result = 31 * result + (int) (n ^ (n >>> 32));    temp = Double.doubleToLongBits(sum);    result = 31 * result + (int) (temp ^ (temp >>> 32));    temp = Double.doubleToLongBits(sumOfSquares);    result = 31 * result + (int) (temp ^ (temp >>> 32));    temp = Double.doubleToLongBits(sumOfLogs);    result = 31 * result + (int) (temp ^ (temp >>> 32));    result = 31 * result + (min != null ? min.hashCode() : 0);    result = 31 * result + (max != null ? max.hashCode() : 0);    temp = Double.doubleToLongBits(M1);    result = 31 * result + (int) (temp ^ (temp >>> 32));    temp = Double.doubleToLongBits(M2);    result = 31 * result + (int) (temp ^ (temp >>> 32));    temp = Double.doubleToLongBits(M3);    result = 31 * result + (int) (temp ^ (temp >>> 32));    temp = Double.doubleToLongBits(M4);    result = 31 * result + (int) (temp ^ (temp >>> 32));    return result;}
public void metron_f1145_0(Kryo kryo, Output output)
{        ByteBuffer outBuffer = ByteBuffer.allocate(digest.byteSize());    digest.asBytes(outBuffer);    byte[] tdigestSerialized = outBuffer.array();    output.writeInt(tdigestSerialized.length);    output.writeBytes(tdigestSerialized);    output.writeLong(n);    output.writeDouble(sum);    output.writeDouble(sumOfSquares);    output.writeDouble(sumOfLogs);    output.writeDouble(getMin());    output.writeDouble(getMax());    output.writeDouble(M1);    output.writeDouble(M2);    output.writeDouble(M3);    output.writeDouble(M4);}
public void metron_f1146_0(Kryo kryo, Input input)
{    int digestSize = input.readInt();    byte[] digestBytes = input.readBytes(digestSize);    ByteBuffer digestBuff = ByteBuffer.wrap(digestBytes);    digest = AVLTreeDigest.fromBytes(digestBuff);    n = input.readLong();    sum = input.readDouble();    sumOfSquares = input.readDouble();    sumOfLogs = input.readDouble();    min = input.readDouble();    max = input.readDouble();    M1 = input.readDouble();    M2 = input.readDouble();    M3 = input.readDouble();    M4 = input.readDouble();}
public void metron_f1147_0(Double d)
{    if (!Double.isNaN(d)) {        tickMedianProvider.addValue(d);        double deviation = Math.abs(d - windowMedianProvider.getPercentile(50));        windowMedianProvider.addValue(d);        if (!Double.isNaN(deviation)) {            windowMADProvider.addValue(deviation);            tickMADProvider.addValue(deviation);        }    }}
public Object metron_f1148_0(List<Object> args, Context context) throws ParseException
{    State state = null;    @SuppressWarnings("unchecked")    List<State> states = (List<State>) args.get(0);    State currentState = null;    if (args.size() > 1) {        currentState = (State) args.get(1);    }    state = new State(Optional.ofNullable(states), Optional.ofNullable(currentState));    return state;}
public boolean metron_f1150_0()
{    return true;}
public Object metron_f1151_0(List<Object> args, Context context) throws ParseException
{    State state = (State) args.get(0);    Object o = args.get(1);    List<Double> data = new ArrayList<>();    if (o != null) {        if (o instanceof List) {            @SuppressWarnings("unchecked")            List<Object> oList = (List<Object>) o;            for (Object datum : oList) {                Number n = (Number) datum;                data.add(n.doubleValue());            }        } else {            Number n = (Number) o;            data.add(n.doubleValue());        }    }    if (state != null) {        for (Double d : data) {            state.add(d);        }    }    return state;}
public boolean metron_f1153_0()
{    return true;}
public Object metron_f1154_0(List<Object> args, Context context) throws ParseException
{    double scale = 0.6745;    State state = (State) args.get(0);    Number datum = (Number) args.get(1);    if (args.size() > 2) {        Number scaleNum = (Number) args.get(2);        if (scaleNum != null) {            scale = scaleNum.doubleValue();        }    }    if (datum == null || state == null) {        return Double.NaN;    }    double deviation = Math.abs(datum.doubleValue() - state.windowMedianProvider.getPercentile(50));    double medianAbsoluteDeviation = state.windowMADProvider.getPercentile(50);    double modifiedZScore = scale * deviation / medianAbsoluteDeviation;    return modifiedZScore;}
public boolean metron_f1156_0()
{    return true;}
 void metron_f1157_0(Iterable<? extends Object> vals)
{    if (vals == null) {        return;    }    for (Object o : vals) {        add(o);    }}
public Sampler metron_f1158_0(Iterable<Sampler> samplers, Optional<Sampler> baseSampler)
{    if (Iterables.isEmpty(samplers)) {        return null;    }    Sampler ret = baseSampler.orElse(Iterables.getFirst(samplers, null).cloneEmpty());    for (Sampler s : samplers) {        ret.addAll(s.get());    }    return ret;}
public Object metron_f1159_0(List<Object> args, Context context) throws ParseException
{    if (args.size() == 0) {        return new UniformSampler();    } else {        Optional<Integer> sizeArg = get(args, 0, "Size", Integer.class);        if (sizeArg.isPresent() && sizeArg.get() <= 0) {            throw new IllegalStateException("Size must be a positive integer");        } else {            return new UniformSampler(sizeArg.orElse(Sampler.DEFAULT_SIZE));        }    }}
public boolean metron_f1161_0()
{    return true;}
public static Optional<T> metron_f1162_0(List<Object> args, int offset, String argName, Class<T> expectedClazz)
{    Object obj = args.get(offset);    T ret = ConversionUtils.convert(obj, expectedClazz);    if (ret == null) {        if (obj != null) {            throw new IllegalStateException(argName + "argument(" + obj + " is expected to be an " + expectedClazz.getName() + ", but was " + obj);        }    }    return Optional.ofNullable(ret);}
public Object metron_f1163_0(List<Object> args, Context context) throws ParseException
{    if (args.size() == 0) {        return null;    }    Sampler s = null;    Object sObj = args.get(0);    if (sObj == null) {        return null;    } else if (sObj instanceof Sampler) {        s = (Sampler) sObj;    } else {        throw new IllegalStateException("Expected a sampler, but found " + sObj);    }    return s.get();}
public boolean metron_f1165_0()
{    return true;}
public Object metron_f1166_0(List<Object> args, Context context) throws ParseException
{    if (args.size() == 0) {        return null;    }    if (args.size() < 2) {        throw new IllegalStateException("Expected sampler and value to add");    }    Sampler s = null;    Object sObj = args.get(0);    if (sObj == null) {        s = new UniformSampler();    } else if (sObj instanceof Sampler) {        s = (Sampler) sObj;    } else {        throw new IllegalStateException("Expected a sampler, but found " + sObj);    }    Object valsObj = args.get(1);    if (valsObj == null) {        return s;    } else if (valsObj instanceof Iterable) {        Iterable<Object> vals = (Iterable<Object>) valsObj;        s.addAll(vals);    } else {        s.add(valsObj);    }    return s;}
public boolean metron_f1168_0()
{    return true;}
public Object metron_f1169_0(List<Object> args, Context context) throws ParseException
{    if (args.size() == 0) {        return null;    }    Object reservoirsObj = args.get(0);    if (reservoirsObj == null) {        return null;    }    if (!(reservoirsObj instanceof Iterable)) {        throw new IllegalStateException("Expected a collection of Samplers");    }    Iterable<Sampler> reservoirs = (Iterable<Sampler>) reservoirsObj;    Sampler baseSampler = null;    if (args.size() > 1) {        Object baseSamplerObj = args.get(1);        if (baseSamplerObj != null) {            if (!(baseSamplerObj instanceof Sampler)) {                throw new IllegalStateException("Expected baseSampler to be a Sampler");            } else {                baseSampler = (Sampler) baseSamplerObj;            }        }    }    return SamplerUtil.INSTANCE.merge(reservoirs, Optional.ofNullable(baseSampler));}
public boolean metron_f1171_0()
{    return true;}
public Iterable<Object> metron_f1172_0()
{    return reservoir;}
public void metron_f1173_0(Object o)
{    if (o == null) {        return;    }    if (reservoir.size() < size) {        reservoir.add(o);    } else {        int rIndex = rng.nextInt(seen + 1);        if (rIndex < size) {            reservoir.set(rIndex, o);        }    }    seen++;}
public Sampler metron_f1174_0()
{    return new UniformSampler(getSize());}
public int metron_f1175_0()
{    return size;}
public boolean metron_f1176_0(Object o)
{    if (this == o)        return true;    if (o == null || getClass() != o.getClass())        return false;    UniformSampler that = (UniformSampler) o;    if (getSize() != that.getSize())        return false;    return reservoir != null ? reservoir.equals(that.reservoir) : that.reservoir == null;}
public int metron_f1177_0()
{    int result = reservoir != null ? reservoir.hashCode() : 0;    result = 31 * result + getSize();    return result;}
private static StatisticsProvider metron_f1178_0(List<Object> args)
{    int windowSize = 0;    if (args.size() > 0 && args.get(0) instanceof Number) {        windowSize = convert(args.get(0), Integer.class);    }    if (windowSize > 0) {        return new WindowedStatisticsProvider(windowSize);    }    return new OnlineStatisticsProvider();}
public Object metron_f1179_0(List<Object> args)
{    if (args.size() > 0) {        Object firstArg = args.get(0);        if (firstArg instanceof List) {            StatisticsProvider ret = null;            for (Object sp : (List) firstArg) {                if (sp instanceof StatisticsProvider) {                    if (ret == null) {                        ret = (StatisticsProvider) sp;                    } else {                        ret = ret.merge((StatisticsProvider) sp);                    }                }            }            return ret;        } else {            return null;        }    }    return null;}
public Object metron_f1180_0(List<Object> args)
{    return statsInit(args);}
public Object metron_f1181_0(List<Object> args)
{        StatisticsProvider stats = convert(args.get(0), StatisticsProvider.class);    if (stats == null) {        stats = statsInit(Collections.emptyList());    }        for (int i = 1; i < args.size(); i++) {        Object n = args.get(i);        if (n != null) {            if (n instanceof Iterable) {                for (Object num : (Iterable<Object>) n) {                    if (num != null) {                        Double value = convert(num, Double.class);                        stats.addValue(value);                    }                }            } else {                Double value = convert(args.get(i), Double.class);                stats.addValue(value);            }        }    }    return stats;}
public Object metron_f1182_0(List<Object> args)
{    StatisticsProvider stats = convert(args.get(0), StatisticsProvider.class);    return (stats != null) ? stats.getMean() : Double.NaN;}
public Object metron_f1183_0(List<Object> args)
{    StatisticsProvider stats = convert(args.get(0), StatisticsProvider.class);    return (stats != null) ? stats.getGeometricMean() : Double.NaN;}
public Object metron_f1184_0(List<Object> args)
{    StatisticsProvider stats = convert(args.get(0), StatisticsProvider.class);    return (stats != null) ? stats.getSum() : Double.NaN;}
public Object metron_f1185_0(List<Object> args)
{    StatisticsProvider stats = convert(args.get(0), StatisticsProvider.class);    return (stats != null) ? stats.getMax() : Double.NaN;}
public Object metron_f1186_0(List<Object> args)
{    StatisticsProvider stats = convert(args.get(0), StatisticsProvider.class);    return (stats != null) ? stats.getMin() : Double.NaN;}
public Object metron_f1187_0(List<Object> args)
{    StatisticsProvider stats = convert(args.get(0), StatisticsProvider.class);    return (stats != null) ? convert(stats.getCount(), Double.class) : Double.NaN;}
public Object metron_f1188_0(List<Object> args)
{    StatisticsProvider stats = convert(args.get(0), StatisticsProvider.class);    return (stats != null) ? stats.getPopulationVariance() : Double.NaN;}
public Object metron_f1189_0(List<Object> args)
{    StatisticsProvider stats = convert(args.get(0), StatisticsProvider.class);    return (stats != null) ? stats.getVariance() : Double.NaN;}
public Object metron_f1190_0(List<Object> args)
{    StatisticsProvider stats = convert(args.get(0), StatisticsProvider.class);    return (stats != null) ? stats.getQuadraticMean() : Double.NaN;}
public Object metron_f1191_0(List<Object> args)
{    StatisticsProvider stats = convert(args.get(0), StatisticsProvider.class);    return (stats != null) ? stats.getStandardDeviation() : Double.NaN;}
public Object metron_f1192_0(List<Object> args)
{    StatisticsProvider stats = convert(args.get(0), StatisticsProvider.class);    return (stats != null) ? stats.getSumLogs() : Double.NaN;}
public Object metron_f1193_0(List<Object> args)
{    StatisticsProvider stats = convert(args.get(0), StatisticsProvider.class);    return (stats != null) ? stats.getSumSquares() : Double.NaN;}
public Object metron_f1194_0(List<Object> args)
{    StatisticsProvider stats = convert(args.get(0), StatisticsProvider.class);    return (stats != null) ? stats.getKurtosis() : Double.NaN;}
public Object metron_f1195_0(List<Object> args)
{    StatisticsProvider stats = convert(args.get(0), StatisticsProvider.class);    return (stats != null) ? stats.getSkewness() : Double.NaN;}
public Object metron_f1196_0(List<Object> args)
{    StatisticsProvider stats = convert(args.get(0), StatisticsProvider.class);    Double p = convert(args.get(1), Double.class);    Double result;    if (stats == null || p == null) {        result = Double.NaN;    } else {        result = stats.getPercentile(p);    }    return result;}
public static List<Number> metron_f1197_0(Object o)
{    if (o instanceof String) {        return BinSplits.valueOf((String) o).split;    } else if (o instanceof List) {        return ConversionUtils.convert(o, List.class);    }    throw new IllegalStateException("The split you tried to pass is not a valid split: " + o.toString());}
public Object metron_f1198_0(List<Object> args)
{    StatisticsProvider stats = convert(args.get(0), StatisticsProvider.class);    Double value = convert(args.get(1), Double.class);    final List<Number> bins = args.size() > 2 ? BinSplits.getSplit(args.get(2)) : BinSplits.QUARTILE.split;    if (stats == null || value == null || bins.size() == 0) {        return -1;    }    return BinFunctions.Bin.getBin(value, bins.size(), bin -> stats.getPercentile(bins.get(bin).doubleValue()));}
public void metron_f1199_0(double value)
{    descStats.addValue(value);}
public long metron_f1200_0()
{    return descStats.getN();}
public double metron_f1201_0()
{    return descStats.getMin();}
public double metron_f1202_0()
{    return descStats.getMax();}
public double metron_f1203_0()
{    return descStats.getMean();}
public double metron_f1204_0()
{    return descStats.getSum();}
public double metron_f1205_0()
{    return descStats.getVariance();}
public double metron_f1206_0()
{    return descStats.getStandardDeviation();}
public double metron_f1207_0()
{    return descStats.getGeometricMean();}
public double metron_f1208_0()
{    return descStats.getPopulationVariance();}
public double metron_f1209_0()
{    return descStats.getQuadraticMean();}
public double metron_f1210_0()
{    throw new UnsupportedOperationException("sum logs not available if 'windowSize' > 0");}
public double metron_f1211_0()
{    return descStats.getSumsq();}
public double metron_f1212_0()
{    return descStats.getKurtosis();}
public double metron_f1213_0()
{    return descStats.getSkewness();}
public double metron_f1214_0(double p)
{    return descStats.getPercentile(p);}
public StatisticsProvider metron_f1215_0(StatisticsProvider provider)
{    throw new UnsupportedOperationException("Windowed Statistics cannot be merged.");}
public boolean metron_f1216_0(Object o)
{    if (this == o)        return true;    if (o == null || getClass() != o.getClass())        return false;    WindowedStatisticsProvider that = (WindowedStatisticsProvider) o;    return descStats != null ? descStats.equals(that.descStats) : that.descStats == null;}
public int metron_f1217_0()
{    return descStats != null ? descStats.hashCode() : 0;}
public void metron_f1218_0()
{    Long estimate = (Long) StellarProcessorUtils.run(hllpDefaultConstructorRule, values);    Assert.assertThat("Incorrect cardinality returned", estimate, equalTo(2L));}
public void metron_f1219_0()
{    Long estimate = (Long) StellarProcessorUtils.run(hllpBasicRule, values);    Assert.assertThat("Incorrect cardinality returned", estimate, equalTo(2L));}
public void metron_f1220_0()
{    Long estimate = (Long) StellarProcessorUtils.run(hllpMultipleAddItems, values);    Assert.assertThat("Incorrect cardinality returned", estimate, equalTo(4L));}
public void metron_f1221_0()
{    Long estimate = (Long) StellarProcessorUtils.run(hllpMergeRule, values);    Assert.assertThat("Incorrect cardinality returned", estimate, equalTo(4L));}
public void metron_f1222_0()
{    Long estimate = (Long) StellarProcessorUtils.run(zeroCardinalityRule, values);    Assert.assertThat("Incorrect cardinality returned", estimate, equalTo(0L));}
public void metron_f1223_0()
{    HyperLogLogPlus hllp = (HyperLogLogPlus) new HyperLogLogPlusFunctions.HLLPInit().apply(ImmutableList.of());    Assert.assertThat(hllp.getSp(), equalTo(25));    Assert.assertThat(hllp.getP(), equalTo(14));    Assert.assertThat("instance types should match for constructor with default precision values", new HyperLogLogPlusFunctions.HLLPInit().apply(ImmutableList.of(5)), instanceOf(HyperLogLogPlus.class));    Assert.assertThat("instance types should match for constructor with sparse set disabled", new HyperLogLogPlusFunctions.HLLPInit().apply(ImmutableList.of(5)), instanceOf(HyperLogLogPlus.class));    Assert.assertThat("instance types should match for full constructor", new HyperLogLogPlusFunctions.HLLPInit().apply(ImmutableList.of(5, 6)), instanceOf(HyperLogLogPlus.class));}
public void metron_f1224_0()
{    thrown.expect(IllegalArgumentException.class);    thrown.expectMessage("Unable to get p value from 'turkey'");    new HyperLogLogPlusFunctions.HLLPInit().apply(ImmutableList.of("turkey"));}
public void metron_f1225_0()
{    HyperLogLogPlus actual = (HyperLogLogPlus) new HyperLogLogPlusFunctions.HLLPInit().apply(ImmutableList.of(5, 6));    actual = (HyperLogLogPlus) new HyperLogLogPlusFunctions.HLLPAdd().apply(ImmutableList.of(actual, "item-1"));    actual = (HyperLogLogPlus) new HyperLogLogPlusFunctions.HLLPAdd().apply(ImmutableList.of(actual, "item-2"));    HyperLogLogPlus expected = new HyperLogLogPlus(5, 6);    expected.add("item-1");    expected.add("item-2");    Assert.assertThat("hllp set should have cardinality based on added values", actual.cardinality(), equalTo(2L));    Assert.assertThat("estimators should be equal", actual, equalTo(expected));}
public void metron_f1226_0()
{    HyperLogLogPlus actual = (HyperLogLogPlus) new HyperLogLogPlusFunctions.HLLPAdd().apply(Arrays.asList(null, "item-1"));    Assert.assertThat(actual, notNullValue());}
public void metron_f1227_0()
{    thrown.expect(IllegalArgumentException.class);    thrown.expectMessage("Must pass an hllp estimator set and at least one value to add to the set");    new HyperLogLogPlusFunctions.HLLPAdd().apply(ImmutableList.of(new HyperLogLogPlusFunctions.HLLPInit().apply(ImmutableList.of(5, 6))));}
public void metron_f1228_0()
{    HyperLogLogPlus hllp = (HyperLogLogPlus) new HyperLogLogPlusFunctions.HLLPInit().apply(ImmutableList.of(5, 6));    hllp = (HyperLogLogPlus) new HyperLogLogPlusFunctions.HLLPAdd().apply(ImmutableList.of(hllp, "item-1"));    hllp = (HyperLogLogPlus) new HyperLogLogPlusFunctions.HLLPAdd().apply(ImmutableList.of(hllp, "item-2"));    hllp = (HyperLogLogPlus) new HyperLogLogPlusFunctions.HLLPAdd().apply(ImmutableList.of(hllp, "item-3"));    Assert.assertThat("cardinality not expected value", new HyperLogLogPlusFunctions.HLLPCardinality().apply(ImmutableList.of(hllp)), equalTo(3L));}
public void metron_f1229_0()
{    List nullArg = new ArrayList() {        {            add(null);        }    };    Assert.assertThat("Cardinality should be 0", new HyperLogLogPlusFunctions.HLLPCardinality().apply(nullArg), equalTo(0L));}
public void metron_f1230_0()
{    HyperLogLogPlus hllp1 = (HyperLogLogPlus) new HyperLogLogPlusFunctions.HLLPInit().apply(ImmutableList.of(5, 6));    hllp1 = (HyperLogLogPlus) new HyperLogLogPlusFunctions.HLLPAdd().apply(ImmutableList.of(hllp1, "item-1"));    hllp1 = (HyperLogLogPlus) new HyperLogLogPlusFunctions.HLLPAdd().apply(ImmutableList.of(hllp1, "item-2"));    HyperLogLogPlus hllp2 = (HyperLogLogPlus) new HyperLogLogPlusFunctions.HLLPInit().apply(ImmutableList.of(5, 6));    hllp2 = (HyperLogLogPlus) new HyperLogLogPlusFunctions.HLLPAdd().apply(ImmutableList.of(hllp2, "item-3"));    HyperLogLogPlus merged = (HyperLogLogPlus) new HyperLogLogPlusFunctions.HLLPMerge().apply(ImmutableList.of(ImmutableList.of(hllp1, hllp2)));    Long actual = (Long) new HyperLogLogPlusFunctions.HLLPCardinality().apply(ImmutableList.of(merged));    Assert.assertThat("cardinality should match merged set", actual, equalTo(3L));    HyperLogLogPlus hllp3 = (HyperLogLogPlus) new HyperLogLogPlusFunctions.HLLPInit().apply(ImmutableList.of(5, 6));    hllp3 = (HyperLogLogPlus) new HyperLogLogPlusFunctions.HLLPAdd().apply(ImmutableList.of(hllp3, "item-4"));    merged = (HyperLogLogPlus) new HyperLogLogPlusFunctions.HLLPMerge().apply(ImmutableList.of(ImmutableList.of(hllp1, hllp2, hllp3)));    actual = (Long) new HyperLogLogPlusFunctions.HLLPCardinality().apply(ImmutableList.of(merged));    Assert.assertThat("cardinality should match merged set", actual, equalTo(4L));}
public void metron_f1231_0()
{    HyperLogLogPlus hllp1 = (HyperLogLogPlus) new HyperLogLogPlusFunctions.HLLPInit().apply(ImmutableList.of(5, 6));    hllp1 = (HyperLogLogPlus) new HyperLogLogPlusFunctions.HLLPAdd().apply(ImmutableList.of(hllp1, "item-1"));    hllp1 = (HyperLogLogPlus) new HyperLogLogPlusFunctions.HLLPAdd().apply(ImmutableList.of(hllp1, "item-2"));    HyperLogLogPlus merged = (HyperLogLogPlus) new HyperLogLogPlusFunctions.HLLPMerge().apply(ImmutableList.of(hllp1));    Long actual = (Long) new HyperLogLogPlusFunctions.HLLPCardinality().apply(ImmutableList.of(merged));    Assert.assertThat("cardinality should match merged set", actual, equalTo(2L));}
public void metron_f1232_0()
{    thrown.expect(IllegalArgumentException.class);    thrown.expectMessage("Must pass single list of hllp sets to merge");    new HyperLogLogPlusFunctions.HLLPMerge().apply(ImmutableList.of());}
public void metron_f1233_0()
{    thrown.expect(IllegalArgumentException.class);    thrown.expectMessage("Must pass single list of hllp sets to merge");    HyperLogLogPlus hllp1 = (HyperLogLogPlus) new HyperLogLogPlusFunctions.HLLPInit().apply(ImmutableList.of());    HyperLogLogPlus hllp2 = (HyperLogLogPlus) new HyperLogLogPlusFunctions.HLLPInit().apply(ImmutableList.of());    new HyperLogLogPlusFunctions.HLLPMerge().apply(ImmutableList.of(hllp1, hllp2));}
public void metron_f1234_0()
{    List emptyList = ImmutableList.of();    Assert.assertThat("Should be empty list", new HyperLogLogPlusFunctions.HLLPMerge().apply(ImmutableList.of(emptyList)), equalTo(null));}
public static Object metron_f1235_0(String rule, Map<String, Object> variables)
{    Context context = Context.EMPTY_CONTEXT();    StellarProcessor processor = new StellarProcessor();    Assert.assertTrue(rule + " not valid.", processor.validate(rule, context));    return processor.parse(rule, new DefaultVariableResolver(x -> variables.get(x), x -> variables.containsKey(x)), StellarFunctions.FUNCTION_RESOLVER(), context);}
public void metron_f1236_0()
{    Assert.assertEquals(run("BIN(value, bounds)", ImmutableMap.of("value", 0, "bounds", ImmutableList.of(10, 20, 30))), 0);    Assert.assertEquals(run("BIN(value, [ 10, 20, 30 ])", ImmutableMap.of("value", 0)), 0);    Assert.assertEquals(run("BIN(value, [ 10, 20, 30 ])", ImmutableMap.of("value", 9)), 0);    Assert.assertEquals(run("BIN(value, [ 10, 20, 30 ])", ImmutableMap.of("value", 10)), 0);    Assert.assertEquals(run("BIN(value, [ 10, 20, 30 ])", ImmutableMap.of("value", 11)), 1);    Assert.assertEquals(run("BIN(value, [ 10, 20, 30 ])", ImmutableMap.of("value", 19)), 1);    Assert.assertEquals(run("BIN(value, [ 10, 20, 30 ])", ImmutableMap.of("value", 21)), 2);    Assert.assertEquals(run("BIN(value, [ 10, 20, 30 ])", ImmutableMap.of("value", 29)), 2);    Assert.assertEquals(run("BIN(value, [ 10, 20, 30 ])", ImmutableMap.of("value", 31)), 3);    Assert.assertEquals(run("BIN(value, [ 10, 20, 30 ])", ImmutableMap.of("value", 1000)), 3);}
public void metron_f1237_0() throws Exception
{        Assert.assertEquals(0.0, (Double) run("IT_ENTROPY({})", new HashMap<>()), 0.0);    /*    Now consider the string aaaaaaaaaabbbbbccccc or 10 a's followed by 5 b's and 5 c's.    The probabilities of each character is as follows:    p(a) = 1/2    p(b) = 1/4    p(c) = 1/4    so the shannon entropy should be      -p(a)*log_2(p(a)) - p(b)*log_2(p(b)) - p(c)*log_2(p(c)) =      -0.5*-1 - 0.25*-2 - 0.25*-2 = 1.5     */    Assert.assertEquals(1.5, (Double) run("IT_ENTROPY({ 'a' : 10, 'b' : 5, 'c' : 5} )", new HashMap<>()), 0.0);}
public static void metron_f1238_0(StatisticsProvider statsProvider, SummaryStatistics summaryStats, DescriptiveStatistics stats)
{        Assert.assertEquals(statsProvider.getCount(), stats.getN());        Assert.assertEquals(statsProvider.getSum(), stats.getSum(), 1e-3);        Assert.assertEquals(statsProvider.getSumSquares(), stats.getSumsq(), 1e-3);        Assert.assertEquals(statsProvider.getSumLogs(), summaryStats.getSumOfLogs(), 1e-3);        Assert.assertEquals(statsProvider.getMean(), stats.getMean(), 1e-3);        Assert.assertEquals(statsProvider.getQuadraticMean(), summaryStats.getQuadraticMean(), 1e-3);        Assert.assertEquals(statsProvider.getStandardDeviation(), stats.getStandardDeviation(), 1e-3);        Assert.assertEquals(statsProvider.getVariance(), stats.getVariance(), 1e-3);        Assert.assertEquals(statsProvider.getMin(), stats.getMin(), 1e-3);        Assert.assertEquals(statsProvider.getMax(), stats.getMax(), 1e-3);        Assert.assertEquals(stats.getKurtosis(), statsProvider.getKurtosis(), 1e-3);        Assert.assertEquals(stats.getSkewness(), statsProvider.getSkewness(), 1e-3);    for (double d = 10.0; d < 100.0; d += 10) {                Assert.assertEquals("Percentile mismatch for " + d + "th %ile", statsProvider.getPercentile(d), stats.getPercentile(d), 1e-2);    }}
private void metron_f1239_0(Iterable<Double> values)
{    DescriptiveStatistics stats = new DescriptiveStatistics();    SummaryStatistics summaryStats = new SummaryStatistics();    OnlineStatisticsProvider statsProvider = new OnlineStatisticsProvider();        List<OnlineStatisticsProvider> providers = new ArrayList<>();    for (int i = 0; i < 10; ++i) {        providers.add(new OnlineStatisticsProvider());    }    int i = 0;    for (double d : values) {        i++;        stats.addValue(d);        summaryStats.addValue(d);        providers.get(i % providers.size()).addValue(d);        statsProvider.addValue(d);    }    StatisticsProvider aggregatedProvider = providers.get(0);    for (int j = 1; j < providers.size(); ++j) {        aggregatedProvider = aggregatedProvider.merge(providers.get(j));    }    validateStatisticsProvider(statsProvider, summaryStats, stats);    validateStatisticsProvider(aggregatedProvider, summaryStats, stats);}
public void metron_f1240_0()
{    OnlineStatisticsProvider statsProvider = new OnlineStatisticsProvider();    statsProvider.addValue(Double.MAX_VALUE + 1);}
public void metron_f1241_0()
{    OnlineStatisticsProvider statsProvider = new OnlineStatisticsProvider();    double d = 3e-305;    for (int i = 0; i < 5; ++i, d /= 100000) {        statsProvider.addValue(d);    }}
public void metron_f1242_0()
{    List<Double> values = new ArrayList<>();    GaussianRandomGenerator gaussian = new GaussianRandomGenerator(new MersenneTwister(0L));    for (int i = 0; i < 1000000; ++i) {        double d = gaussian.nextNormalizedDouble();        values.add(d);    }    validateEquality(values);}
public void metron_f1243_0()
{    List<Double> values = new ArrayList<>();    GaussianRandomGenerator gaussian = new GaussianRandomGenerator(new MersenneTwister(0L));    for (int i = 0; i < 1000000; ++i) {        double d = gaussian.nextNormalizedDouble() + 10;        values.add(d);    }    validateEquality(values);}
public void metron_f1244_0()
{    List<Double> values = new ArrayList<>();    GaussianRandomGenerator gaussian = new GaussianRandomGenerator(new MersenneTwister(0L));    for (int i = 0; i < 1000000; ++i) {        double d = gaussian.nextNormalizedDouble() - 10;        values.add(d);    }    validateEquality(values);}
public void metron_f1245_0()
{    List<Double> values = new ArrayList<>();    GaussianRandomGenerator gaussian = new GaussianRandomGenerator(new MersenneTwister(0L));    for (int i = 0; i < 1000000; ++i) {        double d = (gaussian.nextNormalizedDouble() + 10000) / 1000;        values.add(d);    }    validateEquality(values);}
public void metron_f1246_0()
{    List<Double> values = new ArrayList<>();    GaussianRandomGenerator gaussian = new GaussianRandomGenerator(new MersenneTwister(0L));    for (int i = 0; i < 1000000; ++i) {        double d = -1 * gaussian.nextNormalizedDouble();        values.add(d);    }    validateEquality(values);}
public void metron_f1247_0()
{    List<Double> values = new ArrayList<>();    for (int i = 0; i < 100000; ++i) {        double d = Math.random();        values.add(d);    }    validateEquality(values);}
public static Object metron_f1248_0(String rule, Map<String, Object> variables)
{    Context context = Context.EMPTY_CONTEXT();    StellarProcessor processor = new StellarProcessor();    Assert.assertTrue(rule + " not valid.", processor.validate(rule, context));    return processor.parse(rule, new DefaultVariableResolver(x -> variables.get(x), x -> variables.containsKey(x)), StellarFunctions.FUNCTION_RESOLVER(), context);}
private void metron_f1249_0(MedianAbsoluteDeviationFunctions.State currentState, MedianAbsoluteDeviationFunctions.State clonedState, double value)
{    Double score = (Double) run("OUTLIER_MAD_SCORE(currentState, value)", ImmutableMap.of("currentState", currentState, "value", value));    Double clonedScore = (Double) run("OUTLIER_MAD_SCORE(currentState, value)", ImmutableMap.of("currentState", clonedState, "value", value));    Assert.assertEquals(score, clonedScore, 1e-6);}
public void metron_f1250_0()
{    MedianAbsoluteDeviationFunctions.State currentState = null;    List<MedianAbsoluteDeviationFunctions.State> states = new ArrayList<>();    currentState = (MedianAbsoluteDeviationFunctions.State) run("OUTLIER_MAD_STATE_MERGE(states, NULL)", ImmutableMap.of("states", states));    for (int i = 0; i < 100; ++i) {        double d = 1.2 * i;        run("OUTLIER_MAD_ADD(currentState, data)", ImmutableMap.of("currentState", currentState, "data", d));    }    byte[] stateBytes = SerDeUtils.toBytes(currentState);    MedianAbsoluteDeviationFunctions.State clonedState = SerDeUtils.fromBytes(stateBytes, MedianAbsoluteDeviationFunctions.State.class);    assertScoreEquals(currentState, clonedState, 0d);    assertScoreEquals(currentState, clonedState, 1d);    assertScoreEquals(currentState, clonedState, 10d);}
public void metron_f1251_0()
{    GaussianRandomGenerator gaussian = new GaussianRandomGenerator(new MersenneTwister(0L));    DescriptiveStatistics stats = new DescriptiveStatistics();    List<MedianAbsoluteDeviationFunctions.State> states = new ArrayList<>();    MedianAbsoluteDeviationFunctions.State currentState = null;        currentState = (MedianAbsoluteDeviationFunctions.State) run("OUTLIER_MAD_STATE_MERGE(states, NULL)", ImmutableMap.of("states", states));    for (int i = 0, j = 0; i < 10000; ++i, ++j) {        Double d = gaussian.nextNormalizedDouble();        stats.addValue(d);        run("OUTLIER_MAD_ADD(currentState, data)", ImmutableMap.of("currentState", currentState, "data", d));        if (j >= 1000) {            j = 0;            List<MedianAbsoluteDeviationFunctions.State> stateWindow = new ArrayList<>();            for (int stateIndex = Math.max(0, states.size() - 5); stateIndex < states.size(); ++stateIndex) {                stateWindow.add(states.get(stateIndex));            }            currentState = (MedianAbsoluteDeviationFunctions.State) run("OUTLIER_MAD_STATE_MERGE(states, currentState)", ImmutableMap.of("states", stateWindow, "currentState", currentState));        }    }    {        Double score = (Double) run("OUTLIER_MAD_SCORE(currentState, value)", ImmutableMap.of("currentState", currentState, "value", stats.getMin()));        Assert.assertTrue("Score: " + score + " is not an outlier despite being a minimum.", score > 3.5);    }    {        Double score = (Double) run("OUTLIER_MAD_SCORE(currentState, value)", ImmutableMap.of("currentState", currentState, "value", stats.getMax()));        Assert.assertTrue("Score: " + score + " is not an outlier despite being a maximum", score > 3.5);    }    {        Double score = (Double) run("OUTLIER_MAD_SCORE(currentState, value)", ImmutableMap.of("currentState", currentState, "value", stats.getMean() + 4 * stats.getStandardDeviation()));        Assert.assertTrue("Score: " + score + " is not an outlier despite being 4 std deviations away from the mean", score > 3.5);    }    {        Double score = (Double) run("OUTLIER_MAD_SCORE(currentState, value)", ImmutableMap.of("currentState", currentState, "value", stats.getMean() - 4 * stats.getStandardDeviation()));        Assert.assertTrue("Score: " + score + " is not an outlier despite being 4 std deviations away from the mean", score > 3.5);    }    {        Double score = (Double) run("OUTLIER_MAD_SCORE(currentState, value)", ImmutableMap.of("currentState", currentState, "value", stats.getMean()));        Assert.assertFalse("Score: " + score + " is an outlier despite being the mean", score > 3.5);    }}
public void metron_f1252_0()
{    TDistribution generator = new TDistribution(new MersenneTwister(0L), 100);    DescriptiveStatistics stats = new DescriptiveStatistics();    List<MedianAbsoluteDeviationFunctions.State> states = new ArrayList<>();    MedianAbsoluteDeviationFunctions.State currentState = null;        currentState = (MedianAbsoluteDeviationFunctions.State) run("OUTLIER_MAD_STATE_MERGE(states, NULL)", ImmutableMap.of("states", states));    for (int i = 0, j = 0; i < 10000; ++i, ++j) {        Double d = generator.sample();        stats.addValue(d);        run("OUTLIER_MAD_ADD(currentState, data)", ImmutableMap.of("currentState", currentState, "data", d));        if (j >= 1000) {            j = 0;            List<MedianAbsoluteDeviationFunctions.State> stateWindow = new ArrayList<>();            for (int stateIndex = Math.max(0, states.size() - 5); stateIndex < states.size(); ++stateIndex) {                stateWindow.add(states.get(stateIndex));            }            currentState = (MedianAbsoluteDeviationFunctions.State) run("OUTLIER_MAD_STATE_MERGE(states, currentState)", ImmutableMap.of("states", stateWindow, "currentState", currentState));        }    }    {        Double score = (Double) run("OUTLIER_MAD_SCORE(currentState, value)", ImmutableMap.of("currentState", currentState, "value", stats.getMin()));        Assert.assertTrue("Score: " + score + " is not an outlier despite being a minimum.", score > 3.5);    }    {        Double score = (Double) run("OUTLIER_MAD_SCORE(currentState, value)", ImmutableMap.of("currentState", currentState, "value", stats.getMax()));        Assert.assertTrue("Score: " + score + " is not an outlier despite being a maximum", score > 3.5);    }    {        Double score = (Double) run("OUTLIER_MAD_SCORE(currentState, value)", ImmutableMap.of("currentState", currentState, "value", stats.getMean() + 4 * stats.getStandardDeviation()));        Assert.assertTrue("Score: " + score + " is not an outlier despite being 4 std deviations away from the mean", score > 3.5);    }    {        Double score = (Double) run("OUTLIER_MAD_SCORE(currentState, value)", ImmutableMap.of("currentState", currentState, "value", stats.getMean() - 4 * stats.getStandardDeviation()));        Assert.assertTrue("Score: " + score + " is not an outlier despite being 4 std deviations away from the mean", score > 3.5);    }    {        Double score = (Double) run("OUTLIER_MAD_SCORE(currentState, value)", ImmutableMap.of("currentState", currentState, "value", stats.getMean()));        Assert.assertFalse("Score: " + score + " is an outlier despite being the mean", score > 3.5);    }}
public static void metron_f1253_0()
{    Random rng = new Random(0);    int sampleSize = 1000000;    int numSubSamples = 10;    int subSampleSize = sampleSize / numSubSamples;    int currSample = -1;    for (int i = 0, j = 0; i < sampleSize; ++i, j = (j + 1) % subSampleSize) {        double us = 10 * rng.nextDouble();        sample.add(us);        sampleString.add(us + "");        if (j == 0) {            Sampler s = new UniformSampler(subSampleSize / 10);            samplers.add(s);            currSample++;        }        samplers.get(currSample).add(us);    }}
public void metron_f1254_0() throws Exception
{    String stmt = "SAMPLE_INIT()";    Sampler s = (Sampler) StellarProcessorUtils.run(stmt, new HashMap<>());    Assert.assertEquals(Sampler.DEFAULT_SIZE, s.getSize());}
public void metron_f1255_0() throws Exception
{    String stmt = "SAMPLE_INIT(size)";    Sampler s = (Sampler) StellarProcessorUtils.run(stmt, ImmutableMap.of("size", 10));    Assert.assertEquals(10, s.getSize());}
public void metron_f1256_0()
{    String stmt = "SAMPLE_INIT(size)";    Sampler s = (Sampler) StellarProcessorUtils.run(stmt, ImmutableMap.of("size", -10));}
public void metron_f1257_0() throws Exception
{    String stmt = "SAMPLE_GET(SAMPLE_ADD(SAMPLE_INIT(size), values))";    Iterable<? extends Object> s = (Iterable<? extends Object>) StellarProcessorUtils.run(stmt, ImmutableMap.of("size", 10, "values", sample));    Assert.assertEquals(10, Iterables.size(s));    for (Object o : s) {        Assert.assertTrue(o instanceof Double);        Assert.assertTrue(sample.contains(o));    }}
public void metron_f1258_0() throws Exception
{    String stmt = "SAMPLE_ADD(SAMPLE_INIT(size), value)";    Sampler s = (Sampler) StellarProcessorUtils.run(stmt, ImmutableMap.of("size", 10, "value", "blah"));    Assert.assertEquals(10, s.getSize());    Assert.assertTrue(Iterables.getFirst(s.get(), null) instanceof String);}
public void metron_f1259_0() throws Exception
{    String stmt = "SAMPLE_ADD(SAMPLE_INIT(size), value)";    Sampler s = (Sampler) StellarProcessorUtils.run(stmt, ImmutableMap.of("size", 10, "value", sampleString));    Assert.assertEquals(10, s.getSize());    for (Object o : s.get()) {        Assert.assertTrue(o instanceof String);        Assert.assertTrue(sampleString.contains(o));    }}
public void metron_f1260_0() throws Exception
{    Double sampleMean = null;    Double mergedSampleMean = null;    {                String stmt = "STATS_MEAN(STATS_ADD(STATS_INIT(), SAMPLE_GET(SAMPLE_ADD(SAMPLE_INIT(size), values))))";        sampleMean = (Double) StellarProcessorUtils.run(stmt, ImmutableMap.of("size", sample.size() / 10, "values", sample));    }    {                String stmt = "STATS_MEAN(STATS_ADD(STATS_INIT(), SAMPLE_GET(SAMPLE_MERGE(samples))))";        mergedSampleMean = (Double) StellarProcessorUtils.run(stmt, ImmutableMap.of("samples", samplers));    }    Assert.assertEquals(sampleMean, mergedSampleMean, .1);    {                String stmt = "SAMPLE_MERGE(samples, SAMPLE_INIT(10))";        Sampler s = (Sampler) StellarProcessorUtils.run(stmt, ImmutableMap.of("samples", samplers));        Assert.assertEquals(10, s.getSize());    }}
public static void metron_f1261_0()
{    Random rng = new Random(0);    GaussianRandomGenerator gen = new GaussianRandomGenerator(new MersenneTwister(0));    for (int i = 0; i < SAMPLE_SIZE; ++i) {        double us = 10 * rng.nextDouble();        uniformSample.add(us);        uniformStats.addValue(us);        double gs = 10 * gen.nextNormalizedDouble();        gaussianSample.add(gs);        gaussianStats.addValue(gs);    }}
public void metron_f1262_0()
{    Sampler s = new UniformSampler(SAMPLE_SIZE / 10);    s.addAll(uniformSample);    validateDistribution(s, uniformStats);}
public void metron_f1263_0()
{    Sampler s = new UniformSampler(SAMPLE_SIZE / 10);    s.addAll(gaussianSample);    validateDistribution(s, gaussianStats);}
public void metron_f1264_0(Sampler sample, DescriptiveStatistics distribution)
{    DescriptiveStatistics s = new DescriptiveStatistics();    for (Object d : sample.get()) {        s.addValue((Double) d);    }    Assert.assertEquals(s.getMean(), distribution.getMean(), .1);    Assert.assertEquals(s.getStandardDeviation(), distribution.getStandardDeviation(), .1);}
public void metron_f1265_0()
{    Iterable<Sampler> subsamples = getSubsamples(uniformSample);    Sampler s = SamplerUtil.INSTANCE.merge(subsamples, Optional.empty());    validateDistribution(s, uniformStats);}
public void metron_f1266_0()
{    UniformSampler sampler = new UniformSampler(10);    Iterable<Sampler> subsamples = getSubsamples(uniformSample);    Sampler s = SamplerUtil.INSTANCE.merge(subsamples, Optional.of(sampler));    Assert.assertEquals(s.getSize(), 10);}
public void metron_f1267_0()
{    Iterable<Sampler> subsamples = getSubsamples(gaussianSample);    Sampler s = SamplerUtil.INSTANCE.merge(subsamples, Optional.empty());    validateDistribution(s, gaussianStats);}
public Iterable<Sampler> metron_f1268_0(List<Double> sample)
{    int numSamplers = 20;    int numSamplesPerSampler = SAMPLE_SIZE / numSamplers;    Sampler[] samplers = new Sampler[numSamplers];    int j = 0;    for (int i = 0; i < numSamplers; ++i) {        samplers[i] = new UniformSampler(numSamplesPerSampler / 10);        for (; j < (i + 1) * numSamplesPerSampler && j < sample.size(); ++j) {            samplers[i].add(sample.get(j));        }    }    List<Sampler> ret = new ArrayList<>();    for (int i = 0; i < samplers.length; ++i) {        ret.add(samplers[i]);    }    return ret;}
public static void metron_f1269_0(String... argv)
{    DescriptiveStatistics perfStats = new DescriptiveStatistics();    OnlineStatisticsProvider statsProvider = new OnlineStatisticsProvider();    List<Double> values = new ArrayList<>();    GaussianRandomGenerator gaussian = new GaussianRandomGenerator(new MersenneTwister(0L));    for (int i = 0; i < NUM_DATA_POINTS; ++i) {                double d = 1000 * gaussian.nextNormalizedDouble();        values.add(d);        statsProvider.addValue(d);    }    for (int perfRun = 0; perfRun < NUM_RUNS; ++perfRun) {        StellarStatisticsFunctions.StatsBin bin = new StellarStatisticsFunctions.StatsBin();        long start = System.currentTimeMillis();        Random r = new Random(0);        for (int i = 0; i < TRIALS_PER_RUN; ++i) {                        bin.apply(ImmutableList.of(statsProvider, values.get(r.nextInt(values.size())) - 3.5, PERCENTILES));        }        perfStats.addValue(System.currentTimeMillis() - start);    }    System.out.println("Min/25th/50th/75th/Max Milliseconds: " + perfStats.getMin() + " / " + perfStats.getPercentile(25) + " / " + perfStats.getPercentile(50) + " / " + perfStats.getPercentile(75) + " / " + perfStats.getMax());}
public static Collection<Object[]> metron_f1270_0()
{        return Arrays.asList(new Object[][] { { 0 }, { 100 } });}
private static void metron_f1271_0(Function<StatisticsProvider, Number> func, StatisticsProvider left, StatisticsProvider right)
{    tolerantAssertEquals(func, left, right, null);}
private static void metron_f1272_0(Function<StatisticsProvider, Number> func, StatisticsProvider left, StatisticsProvider right, Double epsilon)
{    try {        Number leftVal = func.apply(left);        Number rightVal = func.apply(left);        if (epsilon != null) {            Assert.assertEquals((double) leftVal, (double) rightVal, epsilon);        } else {            Assert.assertEquals(leftVal, rightVal);        }    } catch (UnsupportedOperationException uoe) {        }}
private static Object metron_f1273_0(String expr, Map<String, Object> variables)
{    StellarProcessor processor = new StellarProcessor();    Object ret = processor.parse(expr, new DefaultVariableResolver(x -> variables.get(x), x -> variables.containsKey(x)), StellarFunctions.FUNCTION_RESOLVER(), Context.EMPTY_CONTEXT());    byte[] raw = SerDeUtils.toBytes(ret);    Object actual = SerDeUtils.fromBytes(raw, Object.class);    if (ret instanceof StatisticsProvider) {        StatisticsProvider left = (StatisticsProvider) ret;        StatisticsProvider right = (StatisticsProvider) actual;                tolerantAssertEquals(prov -> prov.getCount(), left, right);                tolerantAssertEquals(prov -> prov.getSum(), left, right, 1e-3);                tolerantAssertEquals(prov -> prov.getSumSquares(), left, right, 1e-3);                tolerantAssertEquals(prov -> prov.getSumLogs(), left, right, 1e-3);                tolerantAssertEquals(prov -> prov.getMean(), left, right, 1e-3);                tolerantAssertEquals(prov -> prov.getQuadraticMean(), left, right, 1e-3);                tolerantAssertEquals(prov -> prov.getStandardDeviation(), left, right, 1e-3);                tolerantAssertEquals(prov -> prov.getVariance(), left, right, 1e-3);                tolerantAssertEquals(prov -> prov.getMin(), left, right, 1e-3);                tolerantAssertEquals(prov -> prov.getMax(), left, right, 1e-3);                tolerantAssertEquals(prov -> prov.getKurtosis(), left, right, 1e-3);                tolerantAssertEquals(prov -> prov.getSkewness(), left, right, 1e-3);        for (double d = 10.0; d < 100.0; d += 10) {            final double pctile = d;                        tolerantAssertEquals(prov -> prov.getPercentile(pctile), left, right, 1e-2);        }    }    return ret;}
public void metron_f1274_0()
{    variables = new HashMap<>();        values = Arrays.asList(10.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0);        stats = new DescriptiveStatistics(1000);    values.stream().forEach(val -> stats.addValue(val));        summaryStats = new SummaryStatistics();    values.stream().forEach(val -> summaryStats.addValue(val));}
private void metron_f1275_0(int windowSize)
{        Object result = run("STATS_INIT(" + windowSize + ")", variables);    assertNotNull(result);    variables.put("stats", result);        values.stream().forEach(val -> run(format("STATS_ADD (stats, %f)", val), variables));}
public void metron_f1276_0() throws Exception
{    run(format("STATS_ADD(STATS_INIT(), %f)", (Double.MAX_VALUE + 1)), new HashMap<>());}
public void metron_f1277_0() throws Exception
{    for (int i = 0; i < 20; ++i) {        testMergeProviders();    }}
public void metron_f1278_0() throws Exception
{    List<StatisticsProvider> providers = new ArrayList<>();    /*    Create 10 providers, each with a sample drawn from a gaussian distribution.    Update the reference stats from commons math to ensure we are     */    GaussianRandomGenerator gaussian = new GaussianRandomGenerator(new MersenneTwister(1L));    SummaryStatistics sStatistics = new SummaryStatistics();    DescriptiveStatistics dStatistics = new DescriptiveStatistics();    for (int i = 0; i < 10; ++i) {        List<Double> sample = new ArrayList<>();        for (int j = 0; j < 100; ++j) {            double s = gaussian.nextNormalizedDouble();            sample.add(s);            sStatistics.addValue(s);            dStatistics.addValue(s);        }        StatisticsProvider provider = (StatisticsProvider) run("STATS_ADD(STATS_INIT(), " + Joiner.on(",").join(sample) + ")", new HashMap<>());        providers.add(provider);    }    /*    Merge the providers and validate     */    Map<String, Object> providerVariables = new HashMap<>();    for (int i = 0; i < providers.size(); ++i) {        providerVariables.put("provider_" + i, providers.get(i));    }    StatisticsProvider mergedProvider = (StatisticsProvider) run("STATS_MERGE([" + Joiner.on(",").join(providerVariables.keySet()) + "])", providerVariables);    OnlineStatisticsProviderTest.validateStatisticsProvider(mergedProvider, sStatistics, dStatistics);}
public void metron_f1279_0() throws Exception
{    statsInit(windowSize);    Object result = run("STATS_COUNT(stats)", variables);    double countAtStart = (double) result;    run("STATS_ADD(stats, [10, 20, 30, 40, 50])", variables);    Object actual = run("STATS_COUNT(stats)", variables);    assertEquals(countAtStart + 5.0, (double) actual, 0.1);}
public void metron_f1280_0() throws Exception
{    statsInit(windowSize);    Object result = run("STATS_COUNT(stats)", variables);    double countAtStart = (double) result;    run("STATS_ADD(stats, 10, 20, 30, 40, 50)", variables);    Object actual = run("STATS_COUNT(stats)", variables);    assertEquals(countAtStart + 5.0, (double) actual, 0.1);}
public void metron_f1281_0() throws Exception
{    statsInit(windowSize);    Object result = run("STATS_COUNT(stats)", variables);    double countAtStart = (double) result;    run("STATS_ADD(stats, [10.0, 20.0, 30.0, 40.0, 50.0, null])", variables);    Object actual = run("STATS_COUNT(stats)", variables);    assertEquals(countAtStart + 5.0, (double) actual, 0.1);}
public void metron_f1282_0() throws Exception
{    statsInit(windowSize);    Object result = run("STATS_COUNT(stats)", variables);    double countAtStart = (double) result;    run("STATS_ADD(stats, 10.0, 20.0, 30.0, 40.0, 50.0)", variables);    Object actual = run("STATS_COUNT(stats)", variables);    assertEquals(countAtStart + 5.0, (double) actual, 0.1);}
public void metron_f1283_0() throws Exception
{    statsInit(windowSize);    Object actual = run("STATS_COUNT(stats)", variables);    assertEquals(stats.getN(), (double) actual, 0.1);}
public void metron_f1284_0() throws Exception
{    statsInit(windowSize);    Object actual = run("STATS_MEAN(stats)", variables);    assertEquals(stats.getMean(), (Double) actual, 0.1);}
public void metron_f1285_0() throws Exception
{    if (windowSize > 0) {        statsInit(windowSize);        Object actual = run("STATS_GEOMETRIC_MEAN(stats)", variables);        assertEquals(stats.getGeometricMean(), (Double) actual, 0.1);    }}
public void metron_f1286_0() throws Exception
{    statsInit(windowSize);    Object actual = run("STATS_MAX(stats)", variables);    assertEquals(stats.getMax(), (Double) actual, 0.1);}
public void metron_f1287_0() throws Exception
{    statsInit(windowSize);    Object actual = run("STATS_MIN(stats)", variables);    assertEquals(stats.getMin(), (Double) actual, 0.1);}
public void metron_f1288_0() throws Exception
{    statsInit(windowSize);    Object actual = run("STATS_SUM(stats)", variables);    assertEquals(stats.getSum(), (Double) actual, 0.1);}
public void metron_f1289_0() throws Exception
{    statsInit(windowSize);    Object actual = run("STATS_SD(stats)", variables);    assertEquals(stats.getStandardDeviation(), (Double) actual, 0.1);}
public void metron_f1290_0() throws Exception
{    statsInit(windowSize);    Object actual = run("STATS_VARIANCE(stats)", variables);    assertEquals(stats.getVariance(), (Double) actual, 0.1);}
public void metron_f1291_0() throws Exception
{    if (windowSize > 0) {        statsInit(windowSize);        Object actual = run("STATS_POPULATION_VARIANCE(stats)", variables);        assertEquals(stats.getPopulationVariance(), (Double) actual, 0.1);    }}
public void metron_f1292_0() throws Exception
{    if (windowSize > 0) {        statsInit(windowSize);        Object actual = run("STATS_QUADRATIC_MEAN(stats)", variables);        assertEquals(stats.getQuadraticMean(), (Double) actual, 0.1);    }}
public void metron_f1293_0() throws Exception
{    statsInit(0);    Object actual = run("STATS_SUM_LOGS(stats)", variables);    assertEquals(summaryStats.getSumOfLogs(), (Double) actual, 0.1);}
public void metron_f1294_0() throws Exception
{    statsInit(100);    run("STATS_SUM_LOGS(stats)", variables);}
public void metron_f1295_0() throws Exception
{    statsInit(windowSize);    Object actual = run("STATS_SUM_SQUARES(stats)", variables);    assertEquals(stats.getSumsq(), (Double) actual, 0.1);}
public void metron_f1296_0() throws Exception
{    statsInit(windowSize);    Object actual = run("STATS_KURTOSIS(stats)", variables);    assertEquals(stats.getKurtosis(), (Double) actual, 0.1);}
public void metron_f1297_0() throws Exception
{    statsInit(windowSize);    Object actual = run("STATS_SKEWNESS(stats)", variables);    assertEquals(stats.getSkewness(), (Double) actual, 0.1);}
public void metron_f1298_0() throws Exception
{    statsInit(windowSize);    statsBinRunner(StellarStatisticsFunctions.StatsBin.BinSplits.QUARTILE.split);    statsBinRunner(StellarStatisticsFunctions.StatsBin.BinSplits.QUARTILE.split, "'QUARTILE'");    statsBinRunner(StellarStatisticsFunctions.StatsBin.BinSplits.QUINTILE.split, "'QUINTILE'");    statsBinRunner(StellarStatisticsFunctions.StatsBin.BinSplits.DECILE.split, "'DECILE'");    statsBinRunner(ImmutableList.of(25.0, 50.0, 75.0), "[25.0, 50.0, 75.0]");}
public void metron_f1299_0() throws Exception
{    StatisticsProvider provider = (StatisticsProvider) run("STATS_INIT(" + windowSize + ")", variables);    provider.addValue(10);    variables.put("stats", provider);    Assert.assertEquals(0, run(format("STATS_BIN(stats, %f)", 9.0), variables));    Assert.assertEquals(0, run(format("STATS_BIN(stats, %f)", 10.0), variables));    Assert.assertEquals(3, run(format("STATS_BIN(stats, %f)", 11.0), variables));}
public void metron_f1300_0(List<Number> splits) throws Exception
{    statsBinRunner(splits, null);}
public void metron_f1301_0(List<Number> splits, String splitsName) throws Exception
{    int bin = 0;    StatisticsProvider provider = (StatisticsProvider) variables.get("stats");    for (Double d : stats.getSortedValues()) {        while (bin < splits.size() && d > provider.getPercentile(splits.get(bin).doubleValue())) {                        bin++;        }        Object actual = null;        if (splitsName != null) {            actual = run(format("STATS_BIN(stats, %f, %s)", d, splitsName), variables);        } else {            actual = run(format("STATS_BIN(stats, %f)", d), variables);        }        assertEquals(bin, actual);    }}
public void metron_f1302_0() throws Exception
{    statsInit(0);    final double percentile = 0.9;    Object actual = run(format("STATS_PERCENTILE(stats, %f)", percentile), variables);    assertEquals(stats.getPercentile(percentile), (Double) actual, 1);}
public void metron_f1303_0() throws Exception
{    statsInit(100);    final double percentile = 0.9;    Object actual = run(format("STATS_PERCENTILE(stats, %f)", percentile), variables);    assertEquals(stats.getPercentile(percentile), (Double) actual, 0.1);}
public void metron_f1304_0() throws Exception
{    Object actual = run("STATS_MEAN(null)", variables);    assertTrue(((Double) actual).isNaN());    actual = run("STATS_COUNT(null)", variables);    assertTrue(((Double) actual).isNaN());    actual = run("STATS_VARIANCE(null)", variables);    assertTrue(((Double) actual).isNaN());}
public static void metron_f1305_0(String[] args) throws Exception
{    CommandLine cli = LoadOptions.parse(new PosixParser(), args);    EnumMap<LoadOptions, Optional<Object>> evaluatedArgs = LoadOptions.createConfig(cli);    Map<String, Object> kafkaConfig = new HashMap<>();    kafkaConfig.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());    kafkaConfig.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());    kafkaConfig.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());    kafkaConfig.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());    if (LoadOptions.ZK.has(cli)) {        String zkQuorum = (String) evaluatedArgs.get(LoadOptions.ZK).get();        kafkaConfig.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, Joiner.on(",").join(KafkaUtils.INSTANCE.getBrokersFromZookeeper(zkQuorum)));    }    String groupId = evaluatedArgs.get(LoadOptions.CONSUMER_GROUP).get().toString();    System.out.println("Consumer Group: " + groupId);    kafkaConfig.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);    if (LoadOptions.KAFKA_CONFIG.has(cli)) {        kafkaConfig.putAll((Map<String, Object>) evaluatedArgs.get(LoadOptions.KAFKA_CONFIG).get());    }    kafkaProducer = ThreadLocal.withInitial(() -> new KafkaProducer<>(kafkaConfig));    int numThreads = (int) evaluatedArgs.get(LoadOptions.NUM_THREADS).get();    System.out.println("Thread pool size: " + numThreads);    pool = Executors.newFixedThreadPool(numThreads);    Optional<Object> eps = evaluatedArgs.get(LoadOptions.EPS);    Optional<Object> outputTopic = evaluatedArgs.get(LoadOptions.OUTPUT_TOPIC);    Optional<Object> monitorTopic = evaluatedArgs.get(LoadOptions.MONITOR_TOPIC);    long sendDelta = (long) evaluatedArgs.get(LoadOptions.SEND_DELTA).get();    long monitorDelta = (long) evaluatedArgs.get(LoadOptions.MONITOR_DELTA).get();    if ((eps.isPresent() && outputTopic.isPresent()) || monitorTopic.isPresent()) {        Timer timer = new Timer(false);        long startTimeMs = System.currentTimeMillis();        if (outputTopic.isPresent() && eps.isPresent()) {            List<String> templates = (List<String>) evaluatedArgs.get(LoadOptions.TEMPLATE).get();            if (templates.isEmpty()) {                System.out.println("Empty templates, so nothing to do.");                return;            }            Optional<Object> biases = evaluatedArgs.get(LoadOptions.BIASED_SAMPLE);            Sampler sampler = new UnbiasedSampler();            if (biases.isPresent()) {                sampler = new BiasedSampler((List<Map.Entry<Integer, Integer>>) biases.get(), templates.size());            }            MessageGenerator generator = new MessageGenerator(templates, sampler);            Long targetLoad = (Long) eps.get();            int periodsPerSecond = (int) (1000 / sendDelta);            long messagesPerPeriod = targetLoad / periodsPerSecond;            String outputTopicStr = (String) outputTopic.get();            System.out.println("Generating data to " + outputTopicStr + " at " + targetLoad + " events per second");            System.out.println("Sending " + messagesPerPeriod + " messages to " + outputTopicStr + " every " + sendDelta + "ms");            timer.scheduleAtFixedRate(new SendToKafka(outputTopicStr, messagesPerPeriod, numThreads, generator, pool, numSent, kafkaProducer), 0, sendDelta);        }        List<AbstractMonitor> monitors = new ArrayList<>();        if (outputTopic.isPresent() && monitorTopic.isPresent()) {            System.out.println("Monitoring " + monitorTopic.get() + " every " + monitorDelta + " ms");            monitors.add(new EPSGeneratedMonitor(outputTopic, numSent));            monitors.add(new EPSThroughputWrittenMonitor(monitorTopic, kafkaConfig));        } else if (outputTopic.isPresent() && !monitorTopic.isPresent()) {            System.out.println("Monitoring " + outputTopic.get() + " every " + monitorDelta + " ms");            monitors.add(new EPSGeneratedMonitor(outputTopic, numSent));            monitors.add(new EPSThroughputWrittenMonitor(outputTopic, kafkaConfig));        } else if (!outputTopic.isPresent() && monitorTopic.isPresent()) {            System.out.println("Monitoring " + monitorTopic.get() + " every " + monitorDelta + " ms");            monitors.add(new EPSThroughputWrittenMonitor(monitorTopic, kafkaConfig));        } else if (!outputTopic.isPresent() && !monitorTopic.isPresent()) {            System.out.println("You have not specified an output topic or a monitoring topic, so I have nothing to do here.");        }        int lookback = (int) evaluatedArgs.get(LoadOptions.SUMMARY_LOOKBACK).get();        if (lookback > 0) {            System.out.println("Summarizing over the last " + lookback + " monitoring periods (" + lookback * monitorDelta + "ms)");        } else {            System.out.println("Turning off summarization.");        }        final CSVWriter csvWriter = new CSVWriter((File) evaluatedArgs.get(LoadOptions.CSV).orElse(null));        Writer writer = new Writer(monitors, lookback, new ArrayList<Consumer<Writable>>() {            {                add(new ConsoleWriter());                add(csvWriter);            }        });        timer.scheduleAtFixedRate(new MonitorTask(writer), 0, monitorDelta);        Optional<Object> timeLimit = evaluatedArgs.get(LoadOptions.TIME_LIMIT);        if (timeLimit.isPresent()) {            System.out.println("Ending in " + timeLimit.get() + " ms.");            timer.schedule(new TimerTask() {                @Override                public void run() {                    timer.cancel();                    long durationS = (System.currentTimeMillis() - startTimeMs) / 1000;                    System.out.println("\nGenerated " + numSent.get() + " in " + durationS + " seconds.");                    csvWriter.close();                    System.exit(0);                }            }, (Long) timeLimit.get());        }    }}
public void metron_f1306_0()
{    timer.cancel();    long durationS = (System.currentTimeMillis() - startTimeMs) / 1000;    System.out.println("\nGenerated " + numSent.get() + " in " + durationS + " seconds.");    csvWriter.close();    System.exit(0);}
public Option metron_f1307_0()
{    return option;}
public boolean metron_f1308_0(CommandLine cli)
{    return cli.hasOption(shortCode);}
public String metron_f1309_0(CommandLine cli)
{    return cli.getOptionValue(shortCode);}
public OptionHandler<LoadOptions> metron_f1310_0()
{    return null;}
public static CommandLine metron_f1311_0(CommandLineParser parser, String[] args)
{    try {        CommandLine cli = parser.parse(getOptions(), args);        if (HELP.has(cli)) {            printHelp();            System.exit(0);        }        return cli;    } catch (ParseException e) {        System.err.println("Unable to parse args: " + Joiner.on(' ').join(args));        e.printStackTrace(System.err);        printHelp();        System.exit(-1);        return null;    }}
public static EnumMap<LoadOptions, Optional<Object>> metron_f1312_0(CommandLine cli)
{    EnumMap<LoadOptions, Optional<Object>> ret = new EnumMap<>(LoadOptions.class);    for (LoadOptions option : values()) {        ret.put(option, option.handler.getValue(option, cli));    }    return ret;}
public static void metron_f1313_0()
{    HelpFormatter formatter = new HelpFormatter();    formatter.printHelp("Generator", getOptions());}
public static Options metron_f1314_0()
{    Options ret = new Options();    for (LoadOptions o : LoadOptions.values()) {        ret.addOption(o.option);    }    return ret;}
public String metron_f1315_0()
{    return "h";}
public Option metron_f1316_0(@Nullable String s)
{    return new Option(s, "help", false, "Generate Help screen");}
public Option metron_f1317_0(@Nullable String s)
{    Option o = new Option(s, "zk_quorum", true, "zookeeper quorum");    o.setArgName("QUORUM");    o.setRequired(false);    return o;}
public Optional<Object> metron_f1318_0(LoadOptions option, CommandLine cli)
{    if (option.has(cli)) {        return Optional.ofNullable(option.get(cli));    } else {        return Optional.empty();    }}
public String metron_f1319_0()
{    return "z";}
public Option metron_f1320_0(@Nullable String s)
{    Option o = new Option(s, "consumer_group", true, "Consumer Group.  The default is " + LoadGenerator.CONSUMER_GROUP);    o.setArgName("GROUP_ID");    o.setRequired(false);    return o;}
public Optional<Object> metron_f1321_0(LoadOptions option, CommandLine cli)
{    if (option.has(cli)) {        return Optional.ofNullable(option.get(cli));    } else {        return Optional.of(LoadGenerator.CONSUMER_GROUP);    }}
public String metron_f1322_0()
{    return "cg";}
public Option metron_f1323_0(@Nullable String s)
{    Option o = new Option(s, "sample_bias", true, "The discrete distribution to bias the sampling. " + "This is a CSV of 2 columns.  The first column is the % of the templates " + "and the 2nd column is the probability (0-100) that it's chosen.  For instance:\n" + "  20,80\n" + "  80,20\n" + "implies that 20% of the templates will comprise 80% of the output and the remaining 80% of the templates will comprise 20% of the output.");    o.setArgName("BIAS_FILE");    o.setRequired(false);    return o;}
public Optional<Object> metron_f1324_0(LoadOptions option, CommandLine cli)
{    if (!option.has(cli)) {        return Optional.empty();    }    File discreteDistributionFile = new File(option.get(cli));    if (discreteDistributionFile.exists()) {        try (BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(discreteDistributionFile), StandardCharsets.UTF_8))) {            return Optional.ofNullable(BiasedSampler.readDistribution(br));        } catch (IOException e) {            throw new IllegalStateException("Unable to read distribution file: " + option.get(cli), e);        }    } else {        throw new IllegalStateException("Unable to read distribution file: " + option.get(cli) + " file doesn't exist.");    }}
public String metron_f1325_0()
{    return "bs";}
public Option metron_f1326_0(@Nullable String s)
{    Option o = new Option(s, "csv", true, "A CSV file to emit monitoring data to.  " + "The format is a CSV with the following schema: timestamp, (name, eps, historical_mean, historical_stddev)+");    o.setArgName("CSV_FILE");    o.setRequired(false);    return o;}
public Optional<Object> metron_f1327_0(LoadOptions option, CommandLine cli)
{    if (!option.has(cli)) {        return Optional.empty();    }    return Optional.of(new File(option.get(cli)));}
public String metron_f1328_0()
{    return "c";}
public Option metron_f1329_0(@Nullable String s)
{    Option o = new Option(s, "template", true, "The template file to use for generation.  This should be a file with a template per line with $METRON_TS and $METRON_GUID in the spots for timestamp and guid, if you so desire them.");    o.setArgName("TEMPLATE_FILE");    o.setRequired(false);    return o;}
public Optional<Object> metron_f1330_0(LoadOptions option, CommandLine cli)
{    if (!option.has(cli)) {        return Optional.empty();    }    File templateFile = new File(option.get(cli));    if (templateFile.exists()) {        List<String> templates = new ArrayList<>();        try (BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(templateFile), StandardCharsets.UTF_8))) {            for (String line = null; (line = br.readLine()) != null; ) {                templates.add(line);            }            return Optional.of(templates);        } catch (IOException e) {            throw new IllegalStateException("Unable to read template file: " + option.get(cli), e);        }    } else {        throw new IllegalStateException("Unable to read template file: " + option.get(cli) + " file doesn't exist.");    }}
public String metron_f1331_0()
{    return "t";}
public Option metron_f1332_0(@Nullable String s)
{    Option o = new Option(s, "lookback", true, "When summarizing, how many monitoring periods should we summarize over?  If 0, then no summary.  Default: 5");    o.setArgName("LOOKBACK");    o.setRequired(false);    return o;}
public Optional<Object> metron_f1333_0(LoadOptions option, CommandLine cli)
{    if (option.has(cli)) {        return Optional.of(ConversionUtils.convert(option.get(cli), Integer.class));    } else {        return Optional.of(5);    }}
public String metron_f1334_0()
{    return "l";}
public Option metron_f1335_0(@Nullable String s)
{    Option o = new Option(s, "eps", true, "The target events per second");    o.setArgName("EPS");    o.setRequired(false);    return o;}
public Optional<Object> metron_f1336_0(LoadOptions option, CommandLine cli)
{    if (option.has(cli)) {        return Optional.of(ConversionUtils.convert(option.get(cli), Long.class));    } else {        return Optional.empty();    }}
public String metron_f1337_0()
{    return "e";}
public Option metron_f1338_0(@Nullable String s)
{    Option o = new Option(s, "kafka_config", true, "The kafka config.  This is a file containing a JSON map with the kafka config.");    o.setArgName("CONFIG_FILE");    o.setRequired(false);    return o;}
public Optional<Object> metron_f1339_0(LoadOptions option, CommandLine cli)
{    if (!option.has(cli)) {        return Optional.empty();    }    File configFile = new File(option.get(cli));    if (configFile.exists()) {        try {            return Optional.ofNullable(JSONUtils.INSTANCE.load(configFile, JSONUtils.MAP_SUPPLIER));        } catch (FileNotFoundException e) {            throw new IllegalStateException("Unable to read file: " + option.get(cli), e);        } catch (IOException e) {            throw new IllegalStateException("Unable to read file: " + option.get(cli), e);        }    } else {        throw new IllegalStateException("Unable to read file: " + option.get(cli) + " file doesn't exist.");    }}
public String metron_f1340_0()
{    return "k";}
public Option metron_f1341_0(@Nullable String s)
{    Option o = new Option(s, "send_delta_ms", true, "The time (in ms) between sending a batch of messages. Default is " + LoadGenerator.SEND_PERIOD_MS);    o.setArgName("TIME_IN_MS");    o.setRequired(false);    return o;}
public Optional<Object> metron_f1342_0(LoadOptions option, CommandLine cli)
{    if (option.has(cli)) {        Object res = option.get(cli);        return Optional.ofNullable(ConversionUtils.convert(res, Long.class));    }    return Optional.of(LoadGenerator.SEND_PERIOD_MS);}
public String metron_f1343_0()
{    return "sd";}
public Option metron_f1344_0(@Nullable String s)
{    Option o = new Option(s, "monitor_delta_ms", true, "The time (in ms) between monitoring output. Default is " + LoadGenerator.MONITOR_PERIOD_MS);    o.setArgName("TIME_IN_MS");    o.setRequired(false);    return o;}
public Optional<Object> metron_f1345_0(LoadOptions option, CommandLine cli)
{    if (option.has(cli)) {        Object res = option.get(cli);        return Optional.ofNullable(ConversionUtils.convert(res, Long.class));    }    return Optional.of(LoadGenerator.MONITOR_PERIOD_MS);}
public String metron_f1346_0()
{    return "md";}
public Option metron_f1347_0(@Nullable String s)
{    Option o = new Option(s, "time_limit_ms", true, "The total amount of time to run this in milliseconds.  By default, it never stops.");    o.setArgName("MS");    o.setRequired(false);    return o;}
public Optional<Object> metron_f1348_0(LoadOptions option, CommandLine cli)
{    if (option.has(cli)) {        Object res = option.get(cli);        Long timeMs = ConversionUtils.convert(res, Long.class);        return Optional.ofNullable(timeMs);    }    return Optional.empty();}
public String metron_f1349_0()
{    return "tl";}
public Option metron_f1350_0(@Nullable String s)
{    Option o = new Option(s, "threads", true, "The number of threads to use when extracting data.  The default is the number of cores of your machine.");    o.setArgName("NUM_THREADS");    o.setRequired(false);    return o;}
public Optional<Object> metron_f1351_0(LoadOptions option, CommandLine cli)
{    int numThreads = Runtime.getRuntime().availableProcessors();    if (option.has(cli)) {        Object res = option.get(cli);        if (res instanceof String && res.toString().toUpperCase().endsWith("C")) {            numThreads *= ConversionUtils.convert(res.toString().trim().replace("C", ""), Integer.class);        } else {            numThreads = ConversionUtils.convert(res, Integer.class);        }    }    return Optional.of(numThreads);}
public String metron_f1352_0()
{    return "p";}
public Option metron_f1353_0(@Nullable String s)
{    Option o = new Option(s, "output_topic", true, "The kafka topic to write to");    o.setArgName("TOPIC");    o.setRequired(false);    return o;}
public Optional<Object> metron_f1354_0(LoadOptions option, CommandLine cli)
{    return Optional.ofNullable(option.get(cli));}
public String metron_f1355_0()
{    return "ot";}
public Option metron_f1356_0(@Nullable String s)
{    Option o = new Option(s, "monitor_topic", true, "The kafka topic to monitor.");    o.setArgName("TOPIC");    o.setRequired(false);    return o;}
public Optional<Object> metron_f1357_0(LoadOptions option, CommandLine cli)
{    return Optional.ofNullable(option.get(cli));}
public String metron_f1358_0()
{    return "mt";}
public String metron_f1359_0()
{    int sample = sampler.sample(rng.get(), patterns.size());    String pattern = patterns.get(sample);    long guidId = guidOffset.getAndIncrement();    String guid = guidPrefix + guidId;    String ts = "" + System.currentTimeMillis();    return pattern.replace("$METRON_TS", ts).replace("$METRON_GUID", guid);}
public Long metron_f1360_0()
{    long timeStarted = System.currentTimeMillis();    Long ret = null;    if (timestampPrevious > 0) {        double deltaTs = (timeStarted - timestampPrevious) / 1000.0;        if (Math.abs(deltaTs) > EPSILON) {            ret = monitor(deltaTs);        }    }    timestampPrevious = timeStarted;    return ret;}
protected Long metron_f1361_0(double deltaTs)
{    if (kafkaTopic.isPresent()) {        long totalProcessed = numSent.get();        long written = (totalProcessed - numSentPrevious);        long epsWritten = (long) (written / deltaTs);        numSentPrevious = totalProcessed;        return epsWritten;    }    return null;}
public String metron_f1362_0()
{    return "%d eps generated to " + kafkaTopic.get();}
public String metron_f1363_0()
{    return "generated";}
private Long metron_f1364_0(Map<Integer, Long> partitionOffsets, Map<Integer, Long> lastOffsetMap)
{    if (partitionOffsets == null) {        return null;    }    long sum = 0;    for (Map.Entry<Integer, Long> partitionOffset : partitionOffsets.entrySet()) {        sum += partitionOffset.getValue() - lastOffsetMap.get(partitionOffset.getKey());    }    return sum;}
protected Long metron_f1365_0(double deltaTs)
{    Optional<Long> epsWritten = Optional.empty();    if (kafkaTopic.isPresent()) {        if (lastOffsetMap != null) {            Map<Integer, Long> currentOffsets = KafkaUtil.INSTANCE.getKafkaOffsetMap(consumer, (String) kafkaTopic.get());            Long eventsWrittenSince = writtenSince(currentOffsets, lastOffsetMap);            if (eventsWrittenSince != null) {                epsWritten = Optional.of((long) (eventsWrittenSince / deltaTs));            }            lastOffsetMap = currentOffsets == null ? lastOffsetMap : currentOffsets;            if (epsWritten.isPresent()) {                return epsWritten.get();            }        } else {            lastOffsetMap = KafkaUtil.INSTANCE.getKafkaOffsetMap(consumer, (String) kafkaTopic.get());        }    }    return null;}
public String metron_f1366_0()
{    return "%d eps throughput measured for " + kafkaTopic.get();}
public String metron_f1367_0()
{    return "throughput measured";}
public void metron_f1368_0()
{    writer.writeAll();}
public String metron_f1369_0()
{    return name;}
public Long metron_f1370_0()
{    return eps;}
public String metron_f1371_0()
{    return format;}
public Optional<DescriptiveStatistics> metron_f1372_0()
{    return history;}
private String metron_f1373_0(DescriptiveStatistics stats)
{    return String.format("Mean: %d, Std Dev: %d", (int) stats.getMean(), (int) Math.sqrt(stats.getVariance()));}
public void metron_f1374_0(Writable writable)
{    List<String> parts = new ArrayList<>();    Date date = writable.getDate();    for (Results r : writable.getResults()) {        Long eps = r.getEps();        if (eps != null) {            String part = String.format(r.getFormat(), eps);            if (r.getHistory().isPresent()) {                part += " (" + getSummary(r.getHistory().get()) + ")";            }            parts.add(part);        }    }    if (date != null) {        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");        String header = dateFormat.format(date) + " - ";        String emptyHeader = StringUtils.repeat(" ", header.length());        for (int i = 0; i < parts.size(); ++i) {            String part = parts.get(i);            if (i == 0) {                System.out.println(header + (part == null ? "" : part));            } else {                System.out.println(emptyHeader + (part == null ? "" : part));            }        }    }}
public void metron_f1375_0(Writable writable)
{    if (pw.isPresent()) {        List<String> parts = new ArrayList<>();        parts.add("" + writable.getDate().getTime());        for (Results r : writable.getResults()) {            parts.add(r.getName());            parts.add(r.getEps() == null ? "" : (r.getEps() + ""));            if (r.getHistory().isPresent()) {                parts.add("" + (int) r.getHistory().get().getMean());                parts.add("" + (int) Math.sqrt(r.getHistory().get().getVariance()));            } else {                parts.add("");                parts.add("");            }        }        pw.get().println(Joiner.on(",").join(parts));        pw.get().flush();    }}
public void metron_f1376_0()
{    if (pw.isPresent()) {        pw.get().close();    }}
public Date metron_f1377_0()
{    return date;}
public List<Results> metron_f1378_0()
{    return results;}
public void metron_f1379_0()
{    int i = 0;    Date dateOf = new Date();    List<Results> results = new ArrayList<>();    for (AbstractMonitor m : monitors) {        Long eps = m.get();        if (eps != null && summaryLookback > 0) {            LinkedList<Double> summary = summaries.get(i);            addToLookback(eps.doubleValue(), summary);            results.add(new Results(m.format(), m.name(), eps, Optional.of(getStats(summary))));        } else {            results.add(new Results(m.format(), m.name(), eps, Optional.empty()));        }        i++;    }    Writable writable = new Writable(dateOf, results);    for (Consumer<Writable> writer : writers) {        writer.accept(writable);    }}
private void metron_f1380_0(Double d, LinkedList<Double> lookback)
{    if (lookback.size() >= summaryLookback) {        lookback.removeFirst();    }    lookback.addLast(d);}
public DescriptiveStatistics metron_f1381_0(List<Double> avg)
{    DescriptiveStatistics stats = new DescriptiveStatistics();    for (Double d : avg) {        if (d == null || Double.isNaN(d)) {            continue;        }        stats.addValue(d);    }    return stats;}
public void metron_f1382_0()
{    long numSentCurrent = numSent.get();    long numSentSince = numSentCurrent - numSentLast;    boolean sendMessages = numSentLast == 0 || numSentSince >= numMessagesSent;    if (sendMessages) {        Collection<Future<Long>> futures = Collections.synchronizedList(new ArrayList<>());        for (int batch = 0; batch < numBatches; ++batch) {            try {                futures.add(pool.submit(() -> {                    KafkaProducer<String, String> producer = kafkaProducer.get();                    Collection<Future<?>> b = Collections.synchronizedCollection(new ArrayList<>());                    for (int i = 0; i < batchSize; ++i) {                        b.add(sendToKafka(producer, kafkaTopic, messageSupplier.get()));                    }                    for (Future<?> f : b) {                        f.get();                    }                    return batchSize;                }));            } catch (Exception e) {                e.printStackTrace(System.err);            }        }        for (Future<Long> f : futures) {            try {                f.get();            } catch (Exception e) {                e.printStackTrace(System.err);            }        }        numSentLast = numSentCurrent;    }}
protected Future<?> metron_f1383_0(KafkaProducer<String, String> producer, String kafkaTopic, String message)
{    return producer.send(new ProducerRecord<>(kafkaTopic, message), (recordMetadata, e) -> {        if (e != null) {            e.printStackTrace(System.err);        }        numSent.incrementAndGet();    });}
public static List<Map.Entry<Integer, Integer>> metron_f1384_0(BufferedReader distrFile) throws IOException
{    return readDistribution(distrFile, false);}
public static List<Map.Entry<Integer, Integer>> metron_f1385_0(BufferedReader distrFile, boolean quiet) throws IOException
{    List<Map.Entry<Integer, Integer>> ret = new ArrayList<>();    if (!quiet) {        System.out.println("Using biased sampler with the following biases:");    }    int sumLeft = 0;    int sumRight = 0;    for (String line = null; (line = distrFile.readLine()) != null; ) {        if (line.startsWith("#")) {            continue;        }        Iterable<String> it = Splitter.on(",").split(line.trim());        if (Iterables.size(it) != 2) {            throw new IllegalArgumentException(line + " should be a comma separated pair of integers, but was not.");        }        int left = Integer.parseInt(Iterables.getFirst(it, null));        int right = Integer.parseInt(Iterables.getLast(it, null));        if (left <= 0 || left > 100) {            throw new IllegalArgumentException(line + ": " + (left < 0 ? left : right) + " must a positive integer in (0, 100]");        }        if (right <= 0 || right > 100) {            throw new IllegalArgumentException(line + ": " + right + " must a positive integer in (0, 100]");        }        if (!quiet) {            System.out.println("\t" + left + "% of templates will comprise roughly " + right + "% of sample output");        }        ret.add(new AbstractMap.SimpleEntry<>(left, right));        sumLeft += left;        sumRight += right;    }    if (sumLeft > 100 || sumRight > 100) {        throw new IllegalStateException("Neither columns must sum to beyond 100.  " + "The first column is the % of templates. " + "The second column is the % of the sample that % of template occupies.");    } else if (sumLeft < 100 && sumRight < 100) {        int left = 100 - sumLeft;        int right = 100 - sumRight;        if (!quiet) {            System.out.println("\t" + left + "% of templates will comprise roughly " + right + "% of sample output");        }        ret.add(new AbstractMap.SimpleEntry<>(left, right));    }    return ret;}
private static TreeMap<Double, Map.Entry<Integer, Integer>> metron_f1386_0(List<Map.Entry<Integer, Integer>> discreteDistribution, int max)
{    TreeMap<Double, Map.Entry<Integer, Integer>> ret = new TreeMap<>();    int from = 0;    double weight = 0.0d;    for (Map.Entry<Integer, Integer> kv : discreteDistribution) {        double pctVals = kv.getKey() / 100.0;        int to = from + (int) (max * pctVals);        double pctWeight = kv.getValue() / 100.0;        ret.put(weight, new AbstractMap.SimpleEntry<>(from, to));        weight += pctWeight;        from = to;    }    return ret;}
public int metron_f1387_0(Random rng, int limit)
{    double weight = rng.nextDouble();    Map.Entry<Integer, Integer> range = discreteDistribution.floorEntry(weight).getValue();    return rng.nextInt(range.getValue() - range.getKey()) + range.getKey();}
public int metron_f1388_0(Random rng, int limit)
{    return rng.nextInt(limit);}
public List<TopicPartition> metron_f1389_0(KafkaConsumer<String, String> consumer, String topic)
{    List<PartitionInfo> partitions = consumer.partitionsFor(topic);    List<TopicPartition> ret = new ArrayList<>(partitions.size());    for (PartitionInfo par : partitions) {        ret.add(new TopicPartition(topic, par.partition()));    }    return ret;}
public Map<Integer, Long> metron_f1390_0(KafkaConsumer<String, String> consumer, String topic)
{    Map<Integer, Long> ret = new HashMap<>();    if (!consumer.subscription().contains(topic)) {        consumer.subscribe(Collections.singletonList(topic));    }    consumer.poll(0);    List<TopicPartition> partitions = getTopicPartition(consumer, topic);    consumer.seekToEnd(partitions);    for (TopicPartition par : partitions) {        ret.put(par.partition(), consumer.position(par) - 1);    }    return ret;}
public void metron_f1391_0() throws Exception
{    CommandLine cli = LoadOptions.parse(new PosixParser(), new String[] { "-eps", "1000", "-ot", "foo" });    EnumMap<LoadOptions, Optional<Object>> results = LoadOptions.createConfig(cli);    Assert.assertEquals(1000L, results.get(LoadOptions.EPS).get());    Assert.assertEquals("foo", results.get(LoadOptions.OUTPUT_TOPIC).get());    Assert.assertEquals(LoadGenerator.CONSUMER_GROUP, results.get(LoadOptions.CONSUMER_GROUP).get());    Assert.assertEquals(Runtime.getRuntime().availableProcessors(), results.get(LoadOptions.NUM_THREADS).get());    Assert.assertFalse(results.get(LoadOptions.BIASED_SAMPLE).isPresent());    Assert.assertFalse(results.get(LoadOptions.CSV).isPresent());}
public void metron_f1392_0() throws Exception
{    CommandLine cli = LoadOptions.parse(new PosixParser(), new String[] { "-c", "/tmp/blah" });    EnumMap<LoadOptions, Optional<Object>> results = LoadOptions.createConfig(cli);    Assert.assertEquals(new File("/tmp/blah"), results.get(LoadOptions.CSV).get());}
public void metron_f1393_0() throws Exception
{    CommandLine cli = LoadOptions.parse(new PosixParser(), new String[] {});    EnumMap<LoadOptions, Optional<Object>> results = LoadOptions.createConfig(cli);    Assert.assertFalse(results.get(LoadOptions.CSV).isPresent());}
public void metron_f1394_0() throws Exception
{    CommandLine cli = LoadOptions.parse(new PosixParser(), new String[] { "-p", "2C" });    EnumMap<LoadOptions, Optional<Object>> results = LoadOptions.createConfig(cli);    Assert.assertEquals(2 * Runtime.getRuntime().availableProcessors(), results.get(LoadOptions.NUM_THREADS).get());}
public void metron_f1395_0() throws Exception
{    CommandLine cli = LoadOptions.parse(new PosixParser(), new String[] { "-p", "5" });    EnumMap<LoadOptions, Optional<Object>> results = LoadOptions.createConfig(cli);    Assert.assertEquals(5, results.get(LoadOptions.NUM_THREADS).get());}
public void metron_f1396_0() throws Exception
{    File templateFile = new File("target/template");    String template = "test template1";    try (BufferedWriter w = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(templateFile), StandardCharsets.UTF_8))) {        IOUtils.write(template, w);    }    templateFile.deleteOnExit();    CommandLine cli = LoadOptions.parse(new PosixParser(), new String[] { "-t", templateFile.getPath() });    EnumMap<LoadOptions, Optional<Object>> results = LoadOptions.createConfig(cli);    List<String> templates = (List<String>) results.get(LoadOptions.TEMPLATE).get();    Assert.assertEquals(1, templates.size());    Assert.assertEquals(template, templates.get(0));}
public void metron_f1397_0() throws Exception
{    LoadOptions.createConfig(LoadOptions.parse(new PosixParser(), new String[] { "-t", "target/template2" }));}
public void metron_f1398_0()
{    ExecutorService executor = ForkJoinPool.commonPool();    AtomicLong numSent = new AtomicLong(0);    long expectedSent = 100;    SendToKafka sender = new SendToKafka(null, expectedSent, 10, () -> "msg", executor, numSent, ThreadLocal.withInitial(() -> null)) {        @Override        protected Future<?> sendToKafka(KafkaProducer producer, String kafkaTopic, String message) {            Assert.assertEquals(message, "msg");            return ForkJoinPool.commonPool().submit(() -> {                numSent.incrementAndGet();            });        }    };    sender.run();    Assert.assertEquals(numSent.get(), expectedSent);}
protected Future<?> metron_f1399_0(KafkaProducer producer, String kafkaTopic, String message)
{    Assert.assertEquals(message, "msg");    return ForkJoinPool.commonPool().submit(() -> {        numSent.incrementAndGet();    });}
private void metron_f1400_0(Sampler sampler, Map<Integer, Double> expectedProbs)
{    Random rng = new Random(0);    Map<Integer, Double> empiricalProbs = new HashMap<>();    for (int i = 0; i < SIMULATION_SIZE; ++i) {        int sample = sampler.sample(rng, 10);        Double cnt = empiricalProbs.get(sample);        empiricalProbs.put(sample, ((cnt == null) ? 0 : cnt) + 1);    }    for (Map.Entry<Integer, Double> kv : empiricalProbs.entrySet()) {        double empiricalProb = kv.getValue() / SIMULATION_SIZE;        String msg = expectedProbs.get(kv.getKey()) + " != " + empiricalProb;        Assert.assertEquals(msg, expectedProbs.get(kv.getKey()), empiricalProb, 1e-2);    }}
public void metron_f1401_0()
{    Sampler sampler = new UnbiasedSampler();    testSampler(sampler, new HashMap<Integer, Double>() {        {            for (int i = 0; i < 10; ++i) {                put(i, 0.1);            }        }    });}
public void metron_f1402_0()
{    Sampler sampler = new BiasedSampler(new ArrayList<Map.Entry<Integer, Integer>>() {        {            add(new AbstractMap.SimpleEntry<>(30, 80));            add(new AbstractMap.SimpleEntry<>(70, 20));        }    }, 10);    testSampler(sampler, new HashMap<Integer, Double>() {        {            for (int i = 0; i < 3; ++i) {                put(i, 0.8 / 3);            }            for (int i = 3; i < 10; ++i) {                put(i, 0.2 / 7);            }        }    });}
public void metron_f1403_0() throws IOException
{    for (String config : ImmutableList.of(paretoConfig, paretoConfigImplicit)) {        List<Map.Entry<Integer, Integer>> endpoints = BiasedSampler.readDistribution(new BufferedReader(new StringReader(config)), true);        Assert.assertEquals(2, endpoints.size());        Assert.assertEquals(new AbstractMap.SimpleEntry<>(80, 20), endpoints.get(0));        Assert.assertEquals(new AbstractMap.SimpleEntry<>(20, 80), endpoints.get(1));    }}
public void metron_f1404_0() throws IOException
{    for (String config : ImmutableList.of(longerConfig, longerConfigImplicit)) {        List<Map.Entry<Integer, Integer>> endpoints = BiasedSampler.readDistribution(new BufferedReader(new StringReader(config)), true);        Assert.assertEquals(3, endpoints.size());        Assert.assertEquals(new AbstractMap.SimpleEntry<>(80, 20), endpoints.get(0));        Assert.assertEquals(new AbstractMap.SimpleEntry<>(10, 70), endpoints.get(1));        Assert.assertEquals(new AbstractMap.SimpleEntry<>(10, 10), endpoints.get(2));    }}
public void metron_f1405_0() throws IOException
{    BiasedSampler.readDistribution(new BufferedReader(new StringReader("blah foo")), true);}
public void metron_f1406_0() throws IOException
{    BiasedSampler.readDistribution(new BufferedReader(new StringReader("80,-20")), true);}
public void metron_f1407_0() throws IOException
{    BiasedSampler.readDistribution(new BufferedReader(new StringReader("200,20")), true);}
public Grok metron_f1408_0() throws GrokException
{    Grok grok = new Grok();    grok.addPatternFromReader(new InputStreamReader(getClass().getResourceAsStream("/patterns/common"), StandardCharsets.UTF_8));    return grok;}
public org.apache.hadoop.conf.Configuration metron_f1409_0() throws IOException
{    org.apache.hadoop.conf.Configuration configuration = new org.apache.hadoop.conf.Configuration();    if (environment.getProperty(MetronRestConstants.KERBEROS_ENABLED_SPRING_PROPERTY, Boolean.class, false)) {        UserGroupInformation.setConfiguration(configuration);        String keyTabLocation = environment.getProperty(MetronRestConstants.KERBEROS_KEYTAB_SPRING_PROPERTY);        String userPrincipal = environment.getProperty(MetronRestConstants.KERBEROS_PRINCIPLE_SPRING_PROPERTY);        UserGroupInformation.loginUserFromKeytab(userPrincipal, keyTabLocation);    }    return configuration;}
public UserSettingsClient metron_f1410_0()
{    UserSettingsClient userSettingsClient = new UserSettingsClient();    userSettingsClient.init(() -> {        try {            return globalConfigService.get();        } catch (RestException e) {            throw new IllegalStateException("Unable to retrieve the global config.", e);        }    }, new HTableProvider());    return userSettingsClient;}
public HBaseClient metron_f1411_0()
{    Map<String, Object> restConfig = null;    try {        restConfig = globalConfigService.get();    } catch (RestException e) {        throw new IllegalStateException("Unable to retrieve the global config.", e);    }    TableProvider provider = null;    try {        provider = TableProvider.create((String) restConfig.get(EnrichmentConfigurations.TABLE_PROVIDER), HTableProvider::new);    } catch (ClassNotFoundException | InstantiationException | InvocationTargetException | IllegalAccessException | NoSuchMethodException e) {        throw new IllegalStateException("Unable to create table provider", e);    }    return new HBaseClient(provider, HBaseConfiguration.create(), (String) restConfig.get(EnrichmentConfigurations.TABLE_NAME));}
public IndexDao metron_f1412_0()
{    try {        String hbaseProviderImpl = environment.getProperty(MetronRestConstants.INDEX_HBASE_TABLE_PROVIDER_IMPL, String.class, null);        String indexDaoImpl = environment.getProperty(MetronRestConstants.INDEX_DAO_IMPL, String.class, null);        int searchMaxResults = environment.getProperty(MetronRestConstants.SEARCH_MAX_RESULTS, Integer.class, 1000);        int searchMaxGroups = environment.getProperty(MetronRestConstants.SEARCH_MAX_GROUPS, Integer.class, 1000);        String metaDaoImpl = environment.getProperty(MetronRestConstants.META_DAO_IMPL, String.class, null);        String metaDaoSort = environment.getProperty(MetronRestConstants.META_DAO_SORT, String.class, null);        AccessConfig config = new AccessConfig();        config.setMaxSearchResults(searchMaxResults);        config.setMaxSearchGroups(searchMaxGroups);        config.setGlobalConfigSupplier(() -> {            try {                return globalConfigService.get();            } catch (RestException e) {                throw new IllegalStateException("Unable to retrieve the global config.", e);            }        });        config.setIndexSupplier(IndexingCacheUtil.getIndexLookupFunction(cache, environment.getProperty(INDEX_WRITER_NAME)));        config.setTableProvider(TableProvider.create(hbaseProviderImpl, () -> new HTableProvider()));        config.setKerberosEnabled(environment.getProperty(MetronRestConstants.KERBEROS_ENABLED_SPRING_PROPERTY, Boolean.class, false));        if (indexDaoImpl == null) {            throw new IllegalStateException("You must provide an index DAO implementation via the " + INDEX_DAO_IMPL + " config");        }        IndexDao indexDao = IndexDaoFactory.combine(IndexDaoFactory.create(indexDaoImpl, config));        if (indexDao == null) {            throw new IllegalStateException("IndexDao is unable to be created.");        }        if (metaDaoImpl == null) {                        return indexDao;        }                MetaAlertDao ret = (MetaAlertDao) IndexDaoFactory.create(metaDaoImpl, config).get(0);        ret.init(indexDao, Optional.ofNullable(metaDaoSort));        return ret;    } catch (RuntimeException re) {        throw re;    } catch (Exception e) {        throw new IllegalStateException("Unable to create index DAO: " + e.getMessage(), e);    }}
protected AbstractJpaVendorAdapter metron_f1413_0()
{    return new EclipseLinkJpaVendorAdapter();}
protected Map<String, Object> metron_f1414_0()
{    return Collections.singletonMap("eclipselink.weaving", "false");}
public ZkUtils metron_f1415_0()
{    return ZkUtils.apply(zkClient, false);}
public Map<String, Object> metron_f1416_0()
{    final Map<String, Object> props = new HashMap<>();    props.put("bootstrap.servers", environment.getProperty(MetronRestConstants.KAFKA_BROKER_URL_SPRING_PROPERTY));    props.put("group.id", "metron-rest");    props.put("enable.auto.commit", "false");    props.put("auto.commit.interval.ms", "1000");    props.put("session.timeout.ms", "30000");    props.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");    props.put("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");    if (environment.getProperty(MetronRestConstants.KERBEROS_ENABLED_SPRING_PROPERTY, Boolean.class, false)) {        props.put("security.protocol", KafkaUtils.INSTANCE.normalizeProtocol(environment.getProperty(MetronRestConstants.KAFKA_SECURITY_PROTOCOL_SPRING_PROPERTY)));    }    return props;}
public ConsumerFactory<String, String> metron_f1417_0()
{    return new DefaultKafkaConsumerFactory<>(consumerProperties());}
public Map<String, Object> metron_f1418_0()
{    Map<String, Object> producerConfig = new HashMap<>();    producerConfig.put("bootstrap.servers", environment.getProperty(MetronRestConstants.KAFKA_BROKER_URL_SPRING_PROPERTY));    producerConfig.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");    producerConfig.put("value.serializer", "org.apache.kafka.common.serialization.StringSerializer");    producerConfig.put("request.required.acks", 1);    if (environment.getProperty(MetronRestConstants.KERBEROS_ENABLED_SPRING_PROPERTY, Boolean.class, false)) {        producerConfig.put("security.protocol", KafkaUtils.INSTANCE.normalizeProtocol(environment.getProperty(MetronRestConstants.KAFKA_SECURITY_PROTOCOL_SPRING_PROPERTY)));    }    return producerConfig;}
public KafkaProducer metron_f1419_0()
{    return new KafkaProducer<>(producerProperties());}
public AdminUtils$ metron_f1420_0()
{    return AdminUtils$.MODULE$;}
public void metron_f1423_1(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException
{    HttpServletRequest httpRequest = (HttpServletRequest) request;        String authHeader = httpRequest.getHeader("Authorization");    if (authHeader == null || !authHeader.startsWith("Basic")) {        String serializedJWT = getJWTFromCookie(httpRequest);        if (serializedJWT != null) {            SignedJWT jwtToken;            try {                jwtToken = SignedJWT.parse(serializedJWT);                String userName = jwtToken.getJWTClaimsSet().getSubject();                                if (isValid(jwtToken, userName)) {                    Authentication authentication = getAuthentication(userName, httpRequest);                    SecurityContextHolder.getContext().setAuthentication(authentication);                }            } catch (ParseException e) {                            }        }    }    chain.doFilter(request, response);}
protected boolean metron_f1424_1(SignedJWT jwtToken, String userName) throws ParseException
{        if (userName == null || userName.isEmpty()) {                return false;    }    Date now = new Date();        Date expirationTime = jwtToken.getJWTClaimsSet().getExpirationTime();    if (expirationTime != null && now.after(expirationTime)) {                return false;    }        Date notBeforeTime = jwtToken.getJWTClaimsSet().getNotBeforeTime();    if (notBeforeTime != null && now.before(notBeforeTime)) {                return false;    }    return validateSignature(jwtToken);}
protected boolean metron_f1425_1(SignedJWT jwtToken)
{        String receivedSigAlg = jwtToken.getHeader().getAlgorithm().getName();    if (!receivedSigAlg.equals(JWSAlgorithm.RS256.getName())) {        return false;    }        if (JWSObject.State.SIGNED == jwtToken.getState()) {                if (jwtToken.getSignature() != null) {                        try {                JWSVerifier verifier = new RSASSAVerifier(SecurityUtils.parseRSAPublicKey(getKnoxKey()));                if (jwtToken.verify(verifier)) {                                        return true;                } else {                                    }            } catch (Exception e) {                            }        }    }    return false;}
protected String metron_f1426_1(HttpServletRequest req)
{    String serializedJWT = null;    Cookie[] cookies = req.getCookies();    if (cookies != null) {        for (Cookie cookie : cookies) {                        if (knoxCookie.equals(cookie.getName())) {                if (LOG.isDebugEnabled()) {                                    }                serializedJWT = cookie.getValue();                break;            }        }    } else {        if (LOG.isDebugEnabled()) {                    }    }    return serializedJWT;}
protected String metron_f1427_0() throws IOException
{    String knoxKey;    if ((this.knoxKeyString == null || this.knoxKeyString.isEmpty()) && this.knoxKeyFile != null) {        List<String> keyLines = Files.readAllLines(knoxKeyFile, StandardCharsets.UTF_8);        knoxKey = String.join("", keyLines);    } else {        knoxKey = this.knoxKeyString;    }    return knoxKey;}
protected Authentication metron_f1428_0(String userName, HttpServletRequest httpRequest)
{    String ldapName = LdapNameBuilder.newInstance().add(userSearchBase).add("uid", userName).build().toString();        List<GrantedAuthority> grantedAuths = ldapTemplate.search(query().where("objectclass").is("groupOfNames").and("member").is(ldapName), (AttributesMapper<String>) attrs -> (String) attrs.get("cn").get()).stream().map(group -> String.format("%s%s", SECURITY_ROLE_PREFIX, group.toUpperCase())).map(SimpleGrantedAuthority::new).collect(Collectors.toList());    final UserDetails principal = new User(userName, "", grantedAuths);    final UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(principal, "", grantedAuths);    WebAuthenticationDetails webDetails = new WebAuthenticationDetails(httpRequest);    authentication.setDetails(webDetails);    return authentication;}
public LdapTemplate metron_f1429_0()
{    LdapContextSource contextSource = new LdapContextSource();    contextSource.setUrl(environment.getProperty(LDAP_PROVIDER_URL_SPRING_PROPERTY));    contextSource.setUserDn(environment.getProperty(LDAP_PROVIDER_USERDN_SPRING_PROPERTY));    contextSource.setPassword(environment.getProperty(LDAP_PROVIDER_PASSWORD_SPRING_PROPERTY));    contextSource.afterPropertiesSet();    return new LdapTemplate(contextSource);}
public CommonsRequestLoggingFilter metron_f1430_0()
{    CommonsRequestLoggingFilter filter = new CommonsRequestLoggingFilter();    filter.setIncludeQueryString(true);    filter.setIncludePayload(true);    filter.setMaxPayloadLength(10000);    filter.setIncludeHeaders(true);    filter.setAfterMessagePrefix("request: ");    filter.setAfterMessageSuffix("");    return filter;}
public String metron_f1433_0()
{    return userRole;}
public void metron_f1434_0(String userRole)
{    this.userRole = userRole;}
public String metron_f1435_0()
{    return adminRole;}
public void metron_f1436_0(String adminRole)
{    this.adminRole = adminRole;}
public String metron_f1437_0()
{    return prefix;}
public void metron_f1438_0(String prefix)
{    this.prefix = prefix;}
public void metron_f1439_0(CorsRegistry registry)
{    registry.addMapping("/**");}
public JobManager metron_f1440_0()
{    return new InMemoryJobManager();}
public PcapJobSupplier metron_f1441_0()
{    return new PcapJobSupplier();}
public PcapToPdmlScriptWrapper metron_f1442_0()
{    return new PcapToPdmlScriptWrapper();}
public Statusable<Path> metron_f1443_0()
{    try {        PcapJob<Path> pcapJob = createPcapJob();        return pcapJob.submit(PcapFinalizerStrategies.REST, pcapRequest);    } catch (JobException e) {        throw new RuntimeJobException(e.getMessage(), e);    }}
public void metron_f1444_0(PcapRequest pcapRequest)
{    this.pcapRequest = pcapRequest;}
protected PcapJob metron_f1445_0()
{    return new PcapJob();}
public RestTemplate metron_f1446_0()
{    if (environment.getProperty(MetronRestConstants.KERBEROS_ENABLED_SPRING_PROPERTY, Boolean.class, false)) {        String keyTabLocation = environment.getProperty(MetronRestConstants.KERBEROS_KEYTAB_SPRING_PROPERTY);        String userPrincipal = environment.getProperty(MetronRestConstants.KERBEROS_PRINCIPLE_SPRING_PROPERTY);        return new KerberosRestTemplate(keyTabLocation, userPrincipal);    } else {        return new RestTemplate();    }}
public StormCLIWrapper metron_f1447_0()
{    if (Arrays.asList(environment.getActiveProfiles()).contains(DOCKER_PROFILE)) {        return new DockerStormCLIWrapper(environment);    } else {        return new StormCLIWrapper();    }}
public StormStatusService metron_f1448_0(@Autowired @Qualifier("StormStatusServiceImpl") StormStatusService wrappedService)
{    long maxCacheSize = environment.getProperty(MetronRestConstants.STORM_STATUS_CACHE_MAX_SIZE, Long.class, 10000L);    long maxCacheTimeoutSeconds = environment.getProperty(MetronRestConstants.STORM_STATUS_CACHE_TIMEOUT_SECONDS, Long.class, 5L);    return new CachedStormStatusServiceImpl(wrappedService, maxCacheSize, maxCacheTimeoutSeconds);}
public Docket metron_f1449_0()
{    List<String> activeProfiles = Arrays.asList(environment.getActiveProfiles());    Docket docket = new Docket(DocumentationType.SWAGGER_2);    if (activeProfiles.contains(KNOX_PROFILE)) {        String knoxRoot = environment.getProperty(MetronRestConstants.KNOX_ROOT_SPRING_PROPERTY, String.class, "");        docket = docket.pathProvider(new RelativePathProvider(servletContext) {            @Override            protected String applicationPath() {                return knoxRoot;            }            @Override            protected String getDocumentationPath() {                return knoxRoot;            }            @Override            public String getApplicationBasePath() {                return knoxRoot;            }            @Override            public String getOperationPath(String operationPath) {                return knoxRoot + super.getOperationPath(operationPath);            }        });    }    return docket.select().apis(RequestHandlerSelectors.withClassAnnotation(RestController.class)).paths(PathSelectors.any()).build();}
protected String metron_f1450_0()
{    return knoxRoot;}
protected String metron_f1451_0()
{    return knoxRoot;}
public String metron_f1452_0()
{    return knoxRoot;}
public String metron_f1453_0(String operationPath)
{    return knoxRoot + super.getOperationPath(operationPath);}
public String metron_f1454_0()
{    return "forward:/index.html";}
protected void metron_f1455_0(HttpSecurity http) throws Exception
{    http.authorizeRequests().antMatchers("/", "/home", "/login").permitAll().antMatchers("/app/**").permitAll().antMatchers("/vendor/**").permitAll().antMatchers("/fonts/**").permitAll().antMatchers("/assets/images/**").permitAll().antMatchers("/*.js").permitAll().antMatchers("/*.ttf").permitAll().antMatchers("/*.woff2").permitAll().anyRequest().authenticated().and().httpBasic().and().logout().logoutUrl("/api/v1/logout").logoutSuccessHandler(new HttpStatusReturningLogoutSuccessHandler()).invalidateHttpSession(true).deleteCookies("JSESSIONID", knoxCookie);    List<String> activeProfiles = Arrays.asList(environment.getActiveProfiles());    if (activeProfiles.contains(MetronRestConstants.CSRF_ENABLE_PROFILE)) {        http.csrf().csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse());    } else {        http.csrf().disable();    }    if (activeProfiles.contains(MetronRestConstants.KNOX_PROFILE)) {        http.addFilterAt(new KnoxSSOAuthenticationFilter(userSearchBase, knoxKeyFile, knoxKeyString, knoxCookie, ldapTemplate), UsernamePasswordAuthenticationFilter.class);    }}
public PasswordEncoder metron_f1457_0()
{    return NoOpPasswordEncoder.getInstance();}
public ConfigurationsCache metron_f1458_0(CuratorFramework client)
{    return new ZKConfigurationsCache(client, ZKConfigurationsCache.ConfiguredTypes.ENRICHMENT, ZKConfigurationsCache.ConfiguredTypes.PARSER, ZKConfigurationsCache.ConfiguredTypes.INDEXING);}
public CuratorFramework metron_f1459_0(Environment environment)
{    int sleepTime = Integer.parseInt(environment.getProperty(MetronRestConstants.CURATOR_SLEEP_TIME));    int maxRetries = Integer.parseInt(environment.getProperty(MetronRestConstants.CURATOR_MAX_RETRIES));    RetryPolicy retryPolicy = new ExponentialBackoffRetry(sleepTime, maxRetries);    CuratorFramework ret = CuratorFrameworkFactory.newClient(environment.getProperty(MetronRestConstants.ZK_URL_SPRING_PROPERTY), retryPolicy);    return ret;}
public ZkClient metron_f1460_0(Environment environment)
{    int sessionTimeout = Integer.parseInt(environment.getProperty(MetronRestConstants.ZK_CLIENT_SESSION_TIMEOUT));    int connectionTimeout = Integer.parseInt(environment.getProperty(MetronRestConstants.ZK_CLIENT_CONNECTION_TIMEOUT));    return new ZkClient(environment.getProperty(MetronRestConstants.ZK_URL_SPRING_PROPERTY), sessionTimeout, connectionTimeout, ZKStringSerializer$.MODULE$);}
 ResponseEntity<Void> metron_f1461_0(@ApiParam(name = "alerts", value = "The alerts to be escalated", required = true) @RequestBody final List<Map<String, Object>> alerts) throws RestException
{    alertsUIService.escalateAlerts(alerts);    return new ResponseEntity<>(HttpStatus.OK);}
 ResponseEntity<AlertsUIUserSettings> metron_f1462_0() throws RestException
{    Optional<AlertsUIUserSettings> alertUserSettings = alertsUIService.getAlertsUIUserSettings();    if (alertUserSettings.isPresent()) {        return new ResponseEntity<>(alertUserSettings.get(), HttpStatus.OK);    } else {        return new ResponseEntity<>(HttpStatus.NOT_FOUND);    }}
 ResponseEntity<Map<String, AlertsUIUserSettings>> metron_f1463_0() throws RestException
{    return new ResponseEntity<>(alertsUIService.findAllAlertsUIUserSettings(), HttpStatus.OK);}
 ResponseEntity<Void> metron_f1464_0(@ApiParam(name = "alertsUIUserSettings", value = "The user settings to be saved", required = true) @RequestBody AlertsUIUserSettings alertsUIUserSettings) throws RestException
{    ResponseEntity<Void> responseEntity;    if (alertsUIService.getAlertsUIUserSettings().isPresent()) {        responseEntity = new ResponseEntity<>(HttpStatus.OK);    } else {        responseEntity = new ResponseEntity<>(HttpStatus.CREATED);    }    alertsUIService.saveAlertsUIUserSettings(alertsUIUserSettings);    return responseEntity;}
 ResponseEntity<Void> metron_f1465_0(@ApiParam(name = "user", value = "The user whose settings will be deleted", required = true) @PathVariable String user) throws RestException
{    if (alertsUIService.deleteAlertsUIUserSettings(user)) {        return new ResponseEntity<>(HttpStatus.OK);    } else {        return new ResponseEntity<>(HttpStatus.NOT_FOUND);    }}
 ResponseEntity<Map<String, Object>> metron_f1466_0(@ApiParam(name = "globalConfig", value = "The Global Config JSON to be saved", required = true) @RequestBody Map<String, Object> globalConfig) throws RestException
{    if (globalConfigService.get() == null) {        return new ResponseEntity<>(globalConfigService.save(globalConfig), HttpStatus.CREATED);    } else {        return new ResponseEntity<>(globalConfigService.save(globalConfig), HttpStatus.OK);    }}
 ResponseEntity<Map<String, Object>> metron_f1467_0() throws RestException
{    Map<String, Object> globalConfig = globalConfigService.get();    if (globalConfig != null) {        return new ResponseEntity<>(globalConfig, HttpStatus.OK);    } else {        return new ResponseEntity<>(HttpStatus.NOT_FOUND);    }}
 ResponseEntity<Void> metron_f1468_0() throws RestException
{    if (globalConfigService.delete()) {        return new ResponseEntity<>(HttpStatus.OK);    } else {        return new ResponseEntity<>(HttpStatus.NOT_FOUND);    }}
 ResponseEntity<GrokValidation> metron_f1469_0(@ApiParam(name = "grokValidation", value = "Object containing Grok statement and sample message", required = true) @RequestBody GrokValidation grokValidation) throws RestException
{    return new ResponseEntity<>(grokService.validateGrokStatement(grokValidation), HttpStatus.OK);}
 ResponseEntity<Map<String, String>> metron_f1470_0() throws RestException
{    return new ResponseEntity<>(grokService.getCommonGrokPatterns(), HttpStatus.OK);}
 ResponseEntity<String> metron_f1471_0(@ApiParam(name = "path", value = "Path to classpath resource", required = true) @RequestParam String path) throws RestException
{    return new ResponseEntity<>(grokService.getStatementFromClasspath(path), HttpStatus.OK);}
 ResponseEntity<List<String>> metron_f1472_0(@ApiParam(name = "path", value = "Path to HDFS directory", required = true) @RequestParam String path) throws RestException
{    return new ResponseEntity<>(hdfsService.list(new Path(path)), HttpStatus.OK);}
 ResponseEntity<String> metron_f1473_0(@ApiParam(name = "path", value = "Path to HDFS file", required = true) @RequestParam String path) throws RestException
{    String contents = hdfsService.read(new Path(path));    if (contents != null) {        return new ResponseEntity<>(hdfsService.read(new Path(path)), HttpStatus.OK);    } else {        return new ResponseEntity<>(HttpStatus.NOT_FOUND);    }}
 ResponseEntity<Void> metron_f1474_0(@ApiParam(name = "path", value = "Path to HDFS file", required = true) @RequestParam String path, @ApiParam(name = "contents", value = "File contents", required = true) @RequestBody String contents, @ApiParam(name = "userMode", value = "requested user permissions") @RequestParam(required = false, defaultValue = "") String userMode, @ApiParam(name = "groupMode", value = "requested group permissions") @RequestParam(required = false, defaultValue = "") String groupMode, @ApiParam(name = "otherMode", value = "requested other permissions") @RequestParam(required = false, defaultValue = "") String otherMode) throws RestException
{    hdfsService.write(new Path(path), contents.getBytes(UTF_8), userMode, groupMode, otherMode);    return new ResponseEntity<>(HttpStatus.OK);}
 ResponseEntity<Boolean> metron_f1475_0(@ApiParam(name = "path", value = "Path to HDFS file", required = true) @RequestParam String path, @ApiParam(name = "recursive", value = "Delete files recursively") @RequestParam(required = false, defaultValue = "false") boolean recursive) throws RestException
{    if (hdfsService.delete(new Path(path), recursive)) {        return new ResponseEntity<>(HttpStatus.OK);    } else {        return new ResponseEntity<>(HttpStatus.NOT_FOUND);    }}
 ResponseEntity<KafkaTopic> metron_f1476_0(@ApiParam(name = "topic", value = "Kafka topic", required = true) @RequestBody final KafkaTopic topic) throws RestException
{    return new ResponseEntity<>(kafkaService.createTopic(topic), HttpStatus.CREATED);}
 ResponseEntity<KafkaTopic> metron_f1477_0(@ApiParam(name = "name", value = "Kafka topic name", required = true) @PathVariable final String name) throws RestException
{    KafkaTopic kafkaTopic = kafkaService.getTopic(name);    if (kafkaTopic != null) {        return new ResponseEntity<>(kafkaTopic, HttpStatus.OK);    } else {        return new ResponseEntity<>(HttpStatus.NOT_FOUND);    }}
 ResponseEntity<Set<String>> metron_f1478_0() throws Exception
{    return new ResponseEntity<>(kafkaService.listTopics(), HttpStatus.OK);}
 ResponseEntity<Void> metron_f1479_0(@ApiParam(name = "name", value = "Kafka topic name", required = true) @PathVariable final String name) throws RestException
{    if (kafkaService.deleteTopic(name)) {        return new ResponseEntity<>(HttpStatus.OK);    } else {        return new ResponseEntity<>(HttpStatus.NOT_FOUND);    }}
 ResponseEntity<String> metron_f1480_0(@ApiParam(name = "name", value = "Kafka topic name", required = true) @PathVariable final String name) throws RestException
{    String sampleMessage = kafkaService.getSampleMessage(name);    if (sampleMessage != null) {        return new ResponseEntity<>(sampleMessage, HttpStatus.OK);    } else {        return new ResponseEntity<>(HttpStatus.NOT_FOUND);    }}
 ResponseEntity<String> metron_f1481_0(@ApiParam(name = "name", value = "Kafka topic name", required = true) @PathVariable final String name, @ApiParam(name = "message", value = "Message", required = true) @RequestBody final String message) throws RestException
{    kafkaService.produceMessage(name, message);    return new ResponseEntity<>(HttpStatus.OK);}
 ResponseEntity<SearchResponse> metron_f1482_0(@ApiParam(name = "guid", value = "Alert GUID", required = true) @RequestBody final String guid) throws RestException
{    return new ResponseEntity<>(metaAlertService.getAllMetaAlertsForAlert(guid), HttpStatus.OK);}
 ResponseEntity<Document> metron_f1483_0(@ApiParam(name = "createRequest", value = "Meta alert create request which includes a list of alert " + "get requests and a list of custom groups used to annotate a meta alert", required = true) @RequestBody final MetaAlertCreateRequest createRequest) throws RestException
{    return new ResponseEntity<>(metaAlertService.create(createRequest), HttpStatus.OK);}
 ResponseEntity<Document> metron_f1484_0(@ApiParam(name = "metaAlertAddRemoveRequest", value = "Meta alert add request which includes a meta alert GUID and list of alert get requests", required = true) @RequestBody final MetaAlertAddRemoveRequest metaAlertAddRemoveRequest) throws RestException
{    return new ResponseEntity<>(metaAlertService.addAlertsToMetaAlert(metaAlertAddRemoveRequest), HttpStatus.OK);}
 ResponseEntity<Document> metron_f1485_0(@ApiParam(name = "metaAlertAddRemoveRequest", value = "Meta alert remove request which includes a meta alert GUID and list of alert get requests", required = true) @RequestBody final MetaAlertAddRemoveRequest metaAlertAddRemoveRequest) throws RestException
{    return new ResponseEntity<>(metaAlertService.removeAlertsFromMetaAlert(metaAlertAddRemoveRequest), HttpStatus.OK);}
 ResponseEntity<Document> metron_f1486_0(@ApiParam(name = "guid", value = "Meta alert GUID", required = true) @PathVariable final String guid, @ApiParam(name = "status", value = "Meta alert status with a value of either 'ACTIVE' or 'INACTIVE'", required = true) @PathVariable final String status) throws RestException
{    return new ResponseEntity<>(metaAlertService.updateMetaAlertStatus(guid, MetaAlertStatus.valueOf(status.toUpperCase())), HttpStatus.OK);}
 ResponseEntity<PcapStatus> metron_f1487_0(@ApiParam(name = "fixedPcapRequest", value = "A Fixed Pcap Request" + " which includes fixed filter fields like ip source address and protocol", required = true) @RequestBody FixedPcapRequest fixedPcapRequest) throws RestException
{    PcapStatus pcapStatus = pcapQueryService.submit(SecurityUtils.getCurrentUser(), fixedPcapRequest);    return new ResponseEntity<>(pcapStatus, HttpStatus.OK);}
 ResponseEntity<PcapStatus> metron_f1488_0(@ApiParam(name = "queryPcapRequest", value = "A Query Pcap Request" + " which includes Stellar query field", required = true) @RequestBody QueryPcapRequest queryPcapRequest) throws RestException
{    PcapStatus pcapStatus = pcapQueryService.submit(SecurityUtils.getCurrentUser(), queryPcapRequest);    return new ResponseEntity<>(pcapStatus, HttpStatus.OK);}
 ResponseEntity<PcapStatus> metron_f1489_0(@ApiParam(name = "jobId", value = "Job ID of submitted job", required = true) @PathVariable String jobId) throws RestException
{    PcapStatus jobStatus = pcapQueryService.getJobStatus(SecurityUtils.getCurrentUser(), jobId);    if (jobStatus != null) {        return new ResponseEntity<>(jobStatus, HttpStatus.OK);    } else {        return new ResponseEntity<>(HttpStatus.NOT_FOUND);    }}
 ResponseEntity<List<PcapStatus>> metron_f1490_0(@ApiParam(name = "state", value = "Job state", required = true) @RequestParam String state) throws RestException
{    List<PcapStatus> jobs = pcapQueryService.getJobStatus(SecurityUtils.getCurrentUser(), JobStatus.State.valueOf(state));    return new ResponseEntity<>(jobs, HttpStatus.OK);}
 ResponseEntity<Pdml> metron_f1491_0(@ApiParam(name = "jobId", value = "Job ID of submitted job", required = true) @PathVariable String jobId, @ApiParam(name = "page", value = "Page number", required = true) @RequestParam Integer page) throws RestException
{    Pdml pdml = pcapQueryService.getPdml(SecurityUtils.getCurrentUser(), jobId, page);    if (pdml != null) {        return new ResponseEntity<>(pdml, HttpStatus.OK);    } else {        return new ResponseEntity<>(HttpStatus.NOT_FOUND);    }}
 ResponseEntity<PcapStatus> metron_f1492_0(@ApiParam(name = "jobId", value = "Job ID of submitted job", required = true) @PathVariable String jobId) throws RestException
{    PcapStatus jobStatus = pcapQueryService.killJob(SecurityUtils.getCurrentUser(), jobId);    if (jobStatus != null) {        return new ResponseEntity<>(jobStatus, HttpStatus.OK);    } else {        return new ResponseEntity<>(HttpStatus.NOT_FOUND);    }}
 void metron_f1493_0(@ApiParam(name = "jobId", value = "Job ID of submitted job", required = true) @PathVariable String jobId, @ApiParam(name = "page", value = "Page number", required = true) @RequestParam Integer page, @RequestParam(defaultValue = "", required = false) String fileName, final HttpServletRequest request, final HttpServletResponse response) throws RestException
{    try (InputStream inputStream = pcapQueryService.getRawPcap(SecurityUtils.getCurrentUser(), jobId, page);        OutputStream output = response.getOutputStream()) {        response.reset();        if (inputStream == null) {            response.setStatus(HttpStatus.NOT_FOUND.value());        } else {            response.setContentType("application/octet-stream");            if (fileName.isEmpty()) {                fileName = String.format(PCAP_FILENAME_FORMAT, jobId, page);            }            response.setHeader("Content-Disposition", "attachment; filename=\"" + fileName + "\"");            int size = IOUtils.copy(inputStream, output);            response.setContentLength(size);            output.flush();        }    } catch (IOException e) {        throw new RestException(e);    }}
 ResponseEntity<Map<String, Object>> metron_f1494_0(@ApiParam(name = "jobId", value = "Job ID of submitted job", required = true) @PathVariable String jobId) throws RestException
{    Map<String, Object> configuration = pcapQueryService.getConfiguration(SecurityUtils.getCurrentUser(), jobId);    if (configuration != null) {        return new ResponseEntity<>(configuration, HttpStatus.OK);    } else {        return new ResponseEntity<>(HttpStatus.NOT_FOUND);    }}
 ResponseEntity<?> metron_f1495_1(HttpServletRequest request, Throwable ex)
{    HttpStatus status = getStatus(request);        return new ResponseEntity<>(new RestError(status.value(), ex.getMessage(), ExceptionUtils.getRootCauseMessage(ex)), status);}
private HttpStatus metron_f1496_0(HttpServletRequest request)
{    Integer statusCode = (Integer) request.getAttribute("javax.servlet.error.status_code");    if (statusCode == null) {        return HttpStatus.INTERNAL_SERVER_ERROR;    }    return HttpStatus.valueOf(statusCode);}
 ResponseEntity<SearchResponse> metron_f1497_0(@ApiParam(name = "searchRequest", value = "Search request", required = true) @RequestBody final SearchRequest searchRequest) throws RestException
{    return new ResponseEntity<>(searchService.search(searchRequest), HttpStatus.OK);}
 ResponseEntity<GroupResponse> metron_f1498_0(@ApiParam(name = "groupRequest", value = "Group request", required = true) @RequestBody final GroupRequest groupRequest) throws RestException
{    return new ResponseEntity<>(searchService.group(groupRequest), HttpStatus.OK);}
 ResponseEntity<Map<String, Object>> metron_f1499_0(@ApiParam(name = "getRequest", value = "Get Request", required = true) @RequestBody final GetRequest request) throws RestException
{    Optional<Map<String, Object>> latest = searchService.getLatest(request);    if (latest.isPresent()) {        return new ResponseEntity<>(latest.get(), HttpStatus.OK);    } else {        return new ResponseEntity<>(HttpStatus.NOT_FOUND);    }}
 ResponseEntity<Map<String, FieldType>> metron_f1500_0(@ApiParam(name = "sensorTypes", value = "Sensor Types", required = true) @RequestBody final List<String> sensorTypes) throws RestException
{    return new ResponseEntity<>(searchService.getColumnMetadata(sensorTypes), HttpStatus.OK);}
 ResponseEntity<SensorEnrichmentConfig> metron_f1501_0(@ApiParam(name = "name", value = "SensorEnrichmentConfig name", required = true) @PathVariable String name, @ApiParam(name = "sensorEnrichmentConfig", value = "SensorEnrichmentConfig", required = true) @RequestBody SensorEnrichmentConfig sensorEnrichmentConfig) throws RestException
{    if (sensorEnrichmentConfigService.findOne(name) == null) {        return new ResponseEntity<>(sensorEnrichmentConfigService.save(name, sensorEnrichmentConfig), HttpStatus.CREATED);    } else {        return new ResponseEntity<>(sensorEnrichmentConfigService.save(name, sensorEnrichmentConfig), HttpStatus.OK);    }}
 ResponseEntity<SensorEnrichmentConfig> metron_f1502_0(@ApiParam(name = "name", value = "SensorEnrichmentConfig name", required = true) @PathVariable String name) throws RestException
{    SensorEnrichmentConfig sensorEnrichmentConfig = sensorEnrichmentConfigService.findOne(name);    if (sensorEnrichmentConfig != null) {        return new ResponseEntity<>(sensorEnrichmentConfig, HttpStatus.OK);    }    return new ResponseEntity<>(HttpStatus.NOT_FOUND);}
 ResponseEntity<Map<String, SensorEnrichmentConfig>> metron_f1503_0() throws Exception
{    return new ResponseEntity<>(sensorEnrichmentConfigService.getAll(), HttpStatus.OK);}
 ResponseEntity<Void> metron_f1504_0(@ApiParam(name = "name", value = "SensorEnrichmentConfig name", required = true) @PathVariable String name) throws RestException
{    if (sensorEnrichmentConfigService.delete(name)) {        return new ResponseEntity<>(HttpStatus.OK);    } else {        return new ResponseEntity<>(HttpStatus.NOT_FOUND);    }}
 ResponseEntity<List<String>> metron_f1505_0() throws RestException
{    return new ResponseEntity<>(sensorEnrichmentConfigService.getAvailableEnrichments(), HttpStatus.OK);}
 ResponseEntity<List<String>> metron_f1506_0() throws RestException
{    return new ResponseEntity<>(sensorEnrichmentConfigService.getAvailableThreatTriageAggregators(), HttpStatus.OK);}
 ResponseEntity<Map<String, Object>> metron_f1507_0(@ApiParam(name = "name", value = "SensorIndexingConfig name", required = true) @PathVariable String name, @ApiParam(name = "sensorIndexingConfig", value = "SensorIndexingConfig", required = true) @RequestBody Map<String, Object> sensorIndexingConfig) throws RestException
{    if (sensorIndexingConfigService.findOne(name) == null) {        return new ResponseEntity<>(sensorIndexingConfigService.save(name, sensorIndexingConfig), HttpStatus.CREATED);    } else {        return new ResponseEntity<>(sensorIndexingConfigService.save(name, sensorIndexingConfig), HttpStatus.OK);    }}
 ResponseEntity<Map<String, Object>> metron_f1508_0(@ApiParam(name = "name", value = "SensorIndexingConfig name", required = true) @PathVariable String name) throws RestException
{    Map<String, Object> sensorIndexingConfig = sensorIndexingConfigService.findOne(name);    if (sensorIndexingConfig != null) {        return new ResponseEntity<>(sensorIndexingConfig, HttpStatus.OK);    }    return new ResponseEntity<>(HttpStatus.NOT_FOUND);}
 ResponseEntity<Map<String, Map<String, Object>>> metron_f1509_0() throws Exception
{    return new ResponseEntity<>(sensorIndexingConfigService.getAll(), HttpStatus.OK);}
 ResponseEntity<Iterable<String>> metron_f1510_0(@ApiParam(name = "writerName", value = "Writer name.  One of solr, elasticsearch or hdfs", required = true) @PathVariable String writerName) throws Exception
{    return new ResponseEntity<>(sensorIndexingConfigService.getAllIndices(writerName), HttpStatus.OK);}
 ResponseEntity<Void> metron_f1511_0(@ApiParam(name = "name", value = "SensorIndexingConfig name", required = true) @PathVariable String name) throws RestException
{    if (sensorIndexingConfigService.delete(name)) {        return new ResponseEntity<>(HttpStatus.OK);    } else {        return new ResponseEntity<>(HttpStatus.NOT_FOUND);    }}
 ResponseEntity<SensorParserConfig> metron_f1512_0(@ApiParam(name = "name", value = "SensorParserConfig name", required = true) @PathVariable String name, @ApiParam(name = "sensorParserConfig", value = "SensorParserConfig", required = true) @RequestBody SensorParserConfig sensorParserConfig) throws RestException
{    if (sensorParserConfigService.findOne(name) == null) {        return new ResponseEntity<>(sensorParserConfigService.save(name, sensorParserConfig), HttpStatus.CREATED);    } else {        return new ResponseEntity<>(sensorParserConfigService.save(name, sensorParserConfig), HttpStatus.OK);    }}
 ResponseEntity<SensorParserConfig> metron_f1513_0(@ApiParam(name = "name", value = "SensorParserConfig name", required = true) @PathVariable String name) throws RestException
{    SensorParserConfig sensorParserConfig = sensorParserConfigService.findOne(name);    if (sensorParserConfig != null) {        return new ResponseEntity<>(sensorParserConfig, HttpStatus.OK);    }    return new ResponseEntity<>(HttpStatus.NOT_FOUND);}
 ResponseEntity<Map<String, SensorParserConfig>> metron_f1514_0() throws RestException
{    return new ResponseEntity<>(sensorParserConfigService.getAll(), HttpStatus.OK);}
 ResponseEntity<Void> metron_f1515_0(@ApiParam(name = "name", value = "SensorParserConfig name", required = true) @PathVariable String name) throws RestException
{    if (sensorParserConfigService.delete(name)) {        return new ResponseEntity<>(HttpStatus.OK);    } else {        return new ResponseEntity<>(HttpStatus.NOT_FOUND);    }}
 ResponseEntity<Map<String, String>> metron_f1516_0() throws RestException
{    return new ResponseEntity<>(sensorParserConfigService.getAvailableParsers(), HttpStatus.OK);}
 ResponseEntity<Map<String, String>> metron_f1517_0() throws RestException
{    return new ResponseEntity<>(sensorParserConfigService.reloadAvailableParsers(), HttpStatus.OK);}
 ResponseEntity<JSONObject> metron_f1518_0(@ApiParam(name = "parseMessageRequest", value = "Object containing a sample message and SensorParserConfig", required = true) @RequestBody ParseMessageRequest parseMessageRequest) throws RestException
{    return new ResponseEntity<>(sensorParserConfigService.parseMessage(parseMessageRequest), HttpStatus.OK);}
 ResponseEntity<SensorParserGroup> metron_f1519_0(@ApiParam(name = "sensorParserGroup", value = "SensorParserGroup", required = true) @RequestBody SensorParserGroup sensorParserGroup) throws RestException
{    if (sensorParserGroupService.findOne(sensorParserGroup.getName()) == null) {        return new ResponseEntity<>(sensorParserGroupService.save(sensorParserGroup), HttpStatus.CREATED);    } else {        return new ResponseEntity<>(sensorParserGroupService.save(sensorParserGroup), HttpStatus.OK);    }}
 ResponseEntity<SensorParserGroup> metron_f1520_0(@ApiParam(name = "name", value = "SensorParserGroup name", required = true) @PathVariable String name) throws RestException
{    SensorParserGroup sensorParserGroup = sensorParserGroupService.findOne(name);    if (sensorParserGroup != null) {        return new ResponseEntity<>(sensorParserGroup, HttpStatus.OK);    }    return new ResponseEntity<>(HttpStatus.NOT_FOUND);}
 ResponseEntity<Map<String, SensorParserGroup>> metron_f1521_0() throws RestException
{    return new ResponseEntity<>(sensorParserGroupService.getAll(), HttpStatus.OK);}
 ResponseEntity<Void> metron_f1522_0(@ApiParam(name = "name", value = "SensorParserGroup name", required = true) @PathVariable String name) throws RestException
{    if (sensorParserGroupService.delete(name)) {        return new ResponseEntity<>(HttpStatus.OK);    } else {        return new ResponseEntity<>(HttpStatus.NOT_FOUND);    }}
 ResponseEntity<Map<String, Boolean>> metron_f1523_0(@ApiParam(name = "statements", value = "List of statements to validate", required = true) @RequestBody List<String> statements) throws RestException
{    return new ResponseEntity<>(stellarService.validateRules(statements), HttpStatus.OK);}
 ResponseEntity<Map<String, Object>> metron_f1524_0(@ApiParam(name = "transformationValidation", value = "Object containing SensorParserConfig and sample message", required = true) @RequestBody SensorParserContext sensorParserContext) throws RestException
{    return new ResponseEntity<>(stellarService.applyTransformations(sensorParserContext), HttpStatus.OK);}
 ResponseEntity<FieldTransformations[]> metron_f1525_0() throws RestException
{    return new ResponseEntity<>(stellarService.getTransformations(), HttpStatus.OK);}
 ResponseEntity<List<StellarFunctionDescription>> metron_f1526_0() throws RestException
{    return new ResponseEntity<>(stellarService.getStellarFunctions(), HttpStatus.OK);}
 ResponseEntity<List<StellarFunctionDescription>> metron_f1527_0() throws RestException
{    return new ResponseEntity<>(stellarService.getSimpleStellarFunctions(), HttpStatus.OK);}
 ResponseEntity<SupervisorSummary> metron_f1528_0() throws RestException
{    return new ResponseEntity<>(stormStatusService.getSupervisorSummary(), HttpStatus.OK);}
 ResponseEntity<List<TopologyStatus>> metron_f1529_0() throws RestException
{    return new ResponseEntity<>(stormStatusService.getAllTopologyStatus(), HttpStatus.OK);}
 ResponseEntity<TopologyStatus> metron_f1530_0(@ApiParam(name = "name", value = "Topology name", required = true) @PathVariable String name) throws RestException
{    TopologyStatus topologyStatus = stormStatusService.getTopologyStatus(name);    if (topologyStatus != null) {        return new ResponseEntity<>(topologyStatus, HttpStatus.OK);    } else {        return new ResponseEntity<>(HttpStatus.NOT_FOUND);    }}
 ResponseEntity<TopologyResponse> metron_f1531_0(@ApiParam(name = "name", value = "Parser name", required = true) @PathVariable String name) throws RestException
{    return new ResponseEntity<>(stormAdminService.startParserTopology(name), HttpStatus.OK);}
 ResponseEntity<TopologyResponse> metron_f1532_0(@ApiParam(name = "name", value = "Parser name", required = true) @PathVariable String name, @ApiParam(name = "stopNow", value = "Stop the topology immediately") @RequestParam(required = false, defaultValue = "false") boolean stopNow) throws RestException
{    return new ResponseEntity<>(stormAdminService.stopParserTopology(name, stopNow), HttpStatus.OK);}
 ResponseEntity<TopologyResponse> metron_f1533_0(@ApiParam(name = "name", value = "Parser name", required = true) @PathVariable String name) throws RestException
{    return new ResponseEntity<>(stormStatusService.activateTopology(name), HttpStatus.OK);}
 ResponseEntity<TopologyResponse> metron_f1534_0(@ApiParam(name = "name", value = "Parser name", required = true) @PathVariable String name) throws RestException
{    return new ResponseEntity<>(stormStatusService.deactivateTopology(name), HttpStatus.OK);}
 ResponseEntity<TopologyStatus> metron_f1535_0() throws RestException
{    TopologyStatus sensorParserStatus = stormStatusService.getTopologyStatus(MetronRestConstants.ENRICHMENT_TOPOLOGY_NAME);    if (sensorParserStatus != null) {        return new ResponseEntity<>(sensorParserStatus, HttpStatus.OK);    } else {        return new ResponseEntity<>(HttpStatus.NOT_FOUND);    }}
 ResponseEntity<TopologyResponse> metron_f1536_0() throws RestException
{    return new ResponseEntity<>(stormAdminService.startEnrichmentTopology(), HttpStatus.OK);}
 ResponseEntity<TopologyResponse> metron_f1537_0(@ApiParam(name = "stopNow", value = "Stop the topology immediately") @RequestParam(required = false, defaultValue = "false") boolean stopNow) throws RestException
{    return new ResponseEntity<>(stormAdminService.stopEnrichmentTopology(stopNow), HttpStatus.OK);}
 ResponseEntity<TopologyResponse> metron_f1538_0() throws RestException
{    return new ResponseEntity<>(stormStatusService.activateTopology(MetronRestConstants.ENRICHMENT_TOPOLOGY_NAME), HttpStatus.OK);}
 ResponseEntity<TopologyResponse> metron_f1539_0() throws RestException
{    return new ResponseEntity<>(stormStatusService.deactivateTopology(MetronRestConstants.ENRICHMENT_TOPOLOGY_NAME), HttpStatus.OK);}
 ResponseEntity<TopologyStatus> metron_f1540_0() throws RestException
{    TopologyStatus topologyStatus = stormStatusService.getTopologyStatus(MetronRestConstants.RANDOM_ACCESS_INDEXING_TOPOLOGY_NAME);    if (topologyStatus != null) {        return new ResponseEntity<>(topologyStatus, HttpStatus.OK);    } else {        return new ResponseEntity<>(HttpStatus.NOT_FOUND);    }}
 ResponseEntity<TopologyResponse> metron_f1541_0() throws RestException
{    return new ResponseEntity<>(stormAdminService.startIndexingTopology(MetronRestConstants.RANDOM_ACCESS_INDEXING_SCRIPT_PATH_SPRING_PROPERTY), HttpStatus.OK);}
 ResponseEntity<TopologyResponse> metron_f1542_0(@ApiParam(name = "stopNow", value = "Stop the topology immediately") @RequestParam(required = false, defaultValue = "false") boolean stopNow) throws RestException
{    return new ResponseEntity<>(stormAdminService.stopIndexingTopology(MetronRestConstants.RANDOM_ACCESS_INDEXING_TOPOLOGY_NAME, stopNow), HttpStatus.OK);}
 ResponseEntity<TopologyResponse> metron_f1543_0() throws RestException
{    return new ResponseEntity<>(stormStatusService.activateTopology(MetronRestConstants.RANDOM_ACCESS_INDEXING_TOPOLOGY_NAME), HttpStatus.OK);}
 ResponseEntity<TopologyResponse> metron_f1544_0() throws RestException
{    return new ResponseEntity<>(stormStatusService.deactivateTopology(MetronRestConstants.RANDOM_ACCESS_INDEXING_TOPOLOGY_NAME), HttpStatus.OK);}
 ResponseEntity<Map<String, String>> metron_f1545_0() throws RestException
{    return new ResponseEntity<>(stormAdminService.getStormClientStatus(), HttpStatus.OK);}
 ResponseEntity<TopologyStatus> metron_f1546_0() throws RestException
{    TopologyStatus topologyStatus = stormStatusService.getTopologyStatus(MetronRestConstants.BATCH_INDEXING_TOPOLOGY_NAME);    if (topologyStatus != null) {        return new ResponseEntity<>(topologyStatus, HttpStatus.OK);    } else {        return new ResponseEntity<>(HttpStatus.NOT_FOUND);    }}
 ResponseEntity<TopologyResponse> metron_f1547_0() throws RestException
{    return new ResponseEntity<>(stormAdminService.startIndexingTopology(MetronRestConstants.BATCH_INDEXING_SCRIPT_PATH_SPRING_PROPERTY), HttpStatus.OK);}
 ResponseEntity<TopologyResponse> metron_f1548_0(@ApiParam(name = "stopNow", value = "Stop the topology immediately") @RequestParam(required = false, defaultValue = "false") boolean stopNow) throws RestException
{    return new ResponseEntity<>(stormAdminService.stopIndexingTopology(MetronRestConstants.BATCH_INDEXING_TOPOLOGY_NAME, stopNow), HttpStatus.OK);}
 ResponseEntity<TopologyResponse> metron_f1549_0() throws RestException
{    return new ResponseEntity<>(stormStatusService.activateTopology(MetronRestConstants.BATCH_INDEXING_TOPOLOGY_NAME), HttpStatus.OK);}
 ResponseEntity<TopologyResponse> metron_f1550_0() throws RestException
{    return new ResponseEntity<>(stormStatusService.deactivateTopology(MetronRestConstants.BATCH_INDEXING_TOPOLOGY_NAME), HttpStatus.OK);}
 ResponseEntity<Document> metron_f1551_0(@ApiParam(name = "request", value = "Patch request", required = true) @RequestBody final PatchRequest request) throws RestException
{    try {        return new ResponseEntity<>(service.patch(request), HttpStatus.OK);    } catch (OriginalNotFoundException e) {        return new ResponseEntity<>(HttpStatus.NOT_FOUND);    }}
 ResponseEntity<Document> metron_f1552_0(@RequestBody @ApiParam(name = "request", value = "Comment add request", required = true) final CommentAddRemoveRequest request) throws RestException
{    return new ResponseEntity<>(service.addComment(request), HttpStatus.OK);}
 ResponseEntity<Document> metron_f1553_0(@RequestBody @ApiParam(name = "request", value = "Comment remove request", required = true) final CommentAddRemoveRequest request) throws RestException
{    return new ResponseEntity<>(service.removeComment(request), HttpStatus.OK);}
public String metron_f1554_0(Principal user)
{    return user.getName();}
public List<String> metron_f1555_0()
{    UserDetails userDetails = (UserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();    return userDetails.getAuthorities().stream().map(ga -> ga.getAuthority()).collect(Collectors.toList());}
protected ResponseEntity<Object> metron_f1556_1(HttpMessageNotReadableException ex, HttpHeaders headers, HttpStatus status, WebRequest request)
{        return super.handleHttpMessageNotReadable(ex, headers, status, request);}
public static void metron_f1557_0(String[] args)
{    ParserIndex.reload();    SpringApplication.run(MetronRestApplication.class, args);}
public String metron_f1558_0()
{    return this.fullMessage;}
public static String metron_f1559_0()
{    Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();    String user;    if (principal instanceof UserDetails) {        user = ((UserDetails) principal).getUsername();    } else {        user = principal.toString();    }    return user;}
public static RSAPublicKey metron_f1560_0(String pem) throws CertificateException, UnsupportedEncodingException
{    String PEM_HEADER = "-----BEGIN CERTIFICATE-----\n";    String PEM_FOOTER = "\n-----END CERTIFICATE-----";    String fullPem = (pem.startsWith(PEM_HEADER) && pem.endsWith(PEM_FOOTER)) ? pem : PEM_HEADER + pem + PEM_FOOTER;    PublicKey key = null;    try {        CertificateFactory fact = CertificateFactory.getInstance("X.509");        ByteArrayInputStream is = new ByteArrayInputStream(fullPem.getBytes(StandardCharsets.UTF_8));        X509Certificate cer = (X509Certificate) fact.generateCertificate(is);        key = cer.getPublicKey();    } catch (CertificateException ce) {        String message = null;        if (pem.startsWith(PEM_HEADER)) {            message = "CertificateException - be sure not to include PEM header " + "and footer in the PEM configuration element.";        } else {            message = "CertificateException - PEM may be corrupt";        }        throw new CertificateException(message, ce);    }    return (RSAPublicKey) key;}
public void metron_f1561_1(List<Map<String, Object>> alerts) throws RestException
{    String user = SecurityUtils.getCurrentUser();    String topic = environment.getProperty(KAFKA_TOPICS_ESCALATION_PROPERTY);    Long now = clock.currentTimeMillis();        try {        for (Map<String, Object> alert : alerts) {                        alert.put(METRON_ESCALATION_USER_FIELD, user);            alert.put(METRON_ESCALATION_TIMESTAMP_FIELD, now);                        String message = JSONUtils.INSTANCE.toJSON(alert, false);            kafkaService.produceMessage(topic, message);        }    } catch (JsonProcessingException e) {        throw new RestException(e);    }}
public Optional<AlertsUIUserSettings> metron_f1562_0() throws RestException
{    try {        Optional<String> alertUserSettings = userSettingsClient.findOne(SecurityUtils.getCurrentUser(), ALERT_USER_SETTING_TYPE);        if (alertUserSettings.isPresent()) {            return Optional.of(_mapper.get().readValue(alertUserSettings.get(), AlertsUIUserSettings.class));        } else {            return Optional.empty();        }    } catch (IOException e) {        throw new RestException(e);    }}
public Map<String, AlertsUIUserSettings> metron_f1563_0() throws RestException
{    Map<String, AlertsUIUserSettings> allAlertUserSettings = new HashMap<>();    try {        Map<String, Optional<String>> alertUserSettingsStrings = userSettingsClient.findAll(ALERT_USER_SETTING_TYPE);        for (Map.Entry<String, Optional<String>> entry : alertUserSettingsStrings.entrySet()) {            Optional<String> alertUserSettings = entry.getValue();            if (alertUserSettings.isPresent()) {                allAlertUserSettings.put(entry.getKey(), _mapper.get().readValue(alertUserSettings.get(), AlertsUIUserSettings.class));            }        }    } catch (IOException e) {        throw new RestException(e);    }    return allAlertUserSettings;}
public void metron_f1564_0(AlertsUIUserSettings alertsUIUserSettings) throws RestException
{    String user = SecurityUtils.getCurrentUser();    try {        userSettingsClient.save(user, ALERT_USER_SETTING_TYPE, _mapper.get().writeValueAsString(alertsUIUserSettings));    } catch (IOException e) {        throw new RestException(e);    }}
public boolean metron_f1565_0(String user)
{    boolean success = true;    try {        userSettingsClient.delete(user, ALERT_USER_SETTING_TYPE);    } catch (IOException e) {        success = false;    }    return success;}
public void metron_f1566_0(Clock clock)
{    this.clock = clock;}
public SupervisorSummary metron_f1567_1()
{    return (SupervisorSummary) statusCache.get(CacheKey.SUPERVISOR_SUMMARY, cacheKey -> {                return stormService.getSupervisorSummary();    });}
public TopologySummary metron_f1568_1()
{    return (TopologySummary) statusCache.get(CacheKey.TOPOLOGY_SUMMARY, cacheKey -> {                return stormService.getTopologySummary();    });}
public TopologyStatus metron_f1569_1(String name)
{    return (TopologyStatus) statusCache.get(CacheKey.TOPOLOGY_STATUS + name, cacheKey -> {                return stormService.getTopologyStatus(name);    });}
public List<TopologyStatus> metron_f1570_1()
{    return (List<TopologyStatus>) statusCache.get(CacheKey.ALL_TOPOLOGY_STATUS, cacheKey -> {                return stormService.getAllTopologyStatus();    });}
public TopologyResponse metron_f1571_0(String name)
{    return stormService.activateTopology(name);}
public TopologyResponse metron_f1572_0(String name)
{    return stormService.deactivateTopology(name);}
public void metron_f1573_0()
{    statusCache.invalidateAll();}
protected ProcessBuilder metron_f1574_0(final String... command)
{    final String[] dockerCommand = { "docker-compose", "-f", environment.getProperty("docker.compose.path"), "-p", "metron", "exec", "storm" };    final ProcessBuilder pb = new ProcessBuilder(ArrayUtils.addAll(dockerCommand, command));    final Map<String, String> pbEnvironment = pb.environment();    pbEnvironment.put("METRON_VERSION", environment.getProperty("metron.version"));    setDockerEnvironment(pbEnvironment);    return pb;}
private void metron_f1575_1(final Map<String, String> environmentVariables)
{    final ProcessBuilder pb = getDockerEnvironmentProcessBuilder();    try {        final Process process = pb.start();        final BufferedReader inputStream = new BufferedReader(new InputStreamReader(process.getInputStream(), StandardCharsets.UTF_8));        String line;        while ((line = inputStream.readLine()) != null) {            if (line.startsWith("export")) {                final String[] parts = line.replaceFirst("export ", "").split("=");                environmentVariables.put(parts[0], parts[1].replaceAll("\"", ""));            }        }        process.waitFor();    } catch (IOException | InterruptedException e) {            }}
private ProcessBuilder metron_f1576_0()
{    String[] command = { "docker-machine", "env", "metron-machine" };    return new ProcessBuilder(command);}
public void metron_f1577_0(ConfigurationsCache cache)
{    this.cache = cache;}
public Map<String, Object> metron_f1578_0(Map<String, Object> globalConfig) throws RestException
{    try {        ConfigurationsUtils.writeGlobalConfigToZookeeper(globalConfig, client);    } catch (Exception e) {        throw new RestException(e);    }    return globalConfig;}
public Map<String, Object> metron_f1579_0() throws RestException
{    Map<String, Object> globalConfig;    try {        EnrichmentConfigurations configs = cache.get(EnrichmentConfigurations.class);        globalConfig = configs.getGlobalConfig(false);    } catch (Exception e) {        throw new RestException(e.getMessage(), e);    }    return globalConfig;}
public boolean metron_f1580_0() throws RestException
{    try {        client.delete().forPath(ConfigurationType.GLOBAL.getZookeeperRoot());    } catch (KeeperException.NoNodeException e) {        return false;    } catch (Exception e) {        throw new RestException(e);    }    return true;}
public Map<String, String> metron_f1581_0()
{    return commonGrok.getPatterns();}
public GrokValidation metron_f1582_0(GrokValidation grokValidation) throws RestException
{    Map<String, Object> results;    try {        if (grokValidation.getPatternLabel() == null) {            throw new RestException("Pattern label is required");        }        if (Strings.isEmpty(grokValidation.getStatement())) {            throw new RestException("Grok statement is required");        }        Grok grok = new Grok();        grok.addPatternFromReader(new InputStreamReader(getClass().getResourceAsStream("/patterns/common"), StandardCharsets.UTF_8));        grok.addPatternFromReader(new StringReader(grokValidation.getStatement()));        String grokPattern = "%{" + grokValidation.getPatternLabel() + "}";        grok.compile(grokPattern);        Match gm = grok.match(grokValidation.getSampleData());        gm.captures();        results = gm.toMap();        results.remove(grokValidation.getPatternLabel());    } catch (Exception e) {        throw new RestException(e);    }    grokValidation.setResults(results);    return grokValidation;}
public Path metron_f1583_0(String statement, String name) throws RestException
{    if (statement != null) {        Path path = getTemporaryGrokRootPath();        hdfsService.mkdirs(path);        hdfsService.write(new Path(path, name), statement.getBytes(StandardCharsets.UTF_8), null, null, null);        return path;    } else {        throw new RestException("A grokStatement must be provided");    }}
public void metron_f1584_0() throws RestException
{    hdfsService.delete(getTemporaryGrokRootPath(), true);}
private Path metron_f1585_0()
{    String grokTempPath = environment.getProperty(GROK_TEMP_PATH_SPRING_PROPERTY);    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();    return new Path(grokTempPath, authentication.getName());}
public String metron_f1586_0(String path) throws RestException
{    try {        return IOUtils.toString(getClass().getResourceAsStream(path));    } catch (Exception e) {        throw new RestException("Could not find a statement at path " + path);    }}
public List<String> metron_f1587_0(Path path) throws RestException
{    try {        return Arrays.asList(FileSystem.get(configuration).listStatus(path)).stream().map(fileStatus -> fileStatus.getPath().getName()).collect(Collectors.toList());    } catch (IOException e) {        throw new RestException(e);    }}
public String metron_f1588_0(Path path) throws RestException
{    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();    try {        IOUtils.copyBytes(FileSystem.get(configuration).open(path), byteArrayOutputStream, configuration);    } catch (FileNotFoundException e) {        return null;    } catch (IOException e) {        throw new RestException(e);    }    return new String(byteArrayOutputStream.toByteArray(), UTF_8);}
public void metron_f1589_0(Path path, byte[] contents, String userMode, String groupMode, String otherMode) throws RestException
{    FSDataOutputStream fsDataOutputStream;    try {        FsPermission permission = null;        boolean setPermissions = false;        if (StringUtils.isNotEmpty(userMode) && StringUtils.isNotEmpty(groupMode) && StringUtils.isNotEmpty(otherMode)) {                        FsAction userAction = FsAction.getFsAction(userMode);            FsAction groupAction = FsAction.getFsAction(groupMode);            FsAction otherAction = FsAction.getFsAction(otherMode);            if (userAction == null || groupAction == null || otherAction == null) {                throw new RestException(String.format("Invalid permission set: user[%s] " + "group[%s] other[%s]", userAction, groupAction, otherAction));            }            permission = new FsPermission(userAction, groupAction, otherAction);            setPermissions = true;        }        fsDataOutputStream = FileSystem.get(configuration).create(path, true);        fsDataOutputStream.write(contents);        fsDataOutputStream.close();        if (setPermissions) {            FileSystem.get(configuration).setPermission(path, permission);        }    } catch (IOException e) {        throw new RestException(e);    }}
public boolean metron_f1590_0(Path path, boolean recursive) throws RestException
{    try {        return FileSystem.get(configuration).delete(path, recursive);    } catch (IOException e) {        throw new RestException(e);    }}
public boolean metron_f1591_0(Path path) throws RestException
{    try {        return FileSystem.get(configuration).mkdirs(path);    } catch (IOException e) {        throw new RestException(e);    }}
public KafkaTopic metron_f1592_0(final KafkaTopic topic) throws RestException
{    if (!listTopics().contains(topic.getName())) {        try {            adminUtils.createTopic(zkUtils, topic.getName(), topic.getNumPartitions(), topic.getReplicationFactor(), topic.getProperties(), RackAwareMode.Disabled$.MODULE$);            if (environment.getProperty(MetronRestConstants.KERBEROS_ENABLED_SPRING_PROPERTY, Boolean.class, false)) {                addACLToCurrentUser(topic.getName());            }        } catch (AdminOperationException e) {            throw new RestException(e);        }    }    return topic;}
public boolean metron_f1593_0(final String name)
{    final Set<String> topics = listTopics();    if (topics != null && topics.contains(name)) {        adminUtils.deleteTopic(zkUtils, name);        return true;    } else {        return false;    }}
public KafkaTopic metron_f1594_0(final String name)
{    KafkaTopic kafkaTopic = null;    if (listTopics().contains(name)) {        try (Consumer<String, String> consumer = kafkaConsumerFactory.createConsumer()) {            final List<PartitionInfo> partitionInfos = consumer.partitionsFor(name);            if (partitionInfos.size() > 0) {                final PartitionInfo partitionInfo = partitionInfos.get(0);                kafkaTopic = new KafkaTopic();                kafkaTopic.setName(name);                kafkaTopic.setNumPartitions(partitionInfos.size());                kafkaTopic.setReplicationFactor(partitionInfo.replicas().length);            }        }    }    return kafkaTopic;}
public Set<String> metron_f1595_0()
{    try (Consumer<String, String> consumer = kafkaConsumerFactory.createConsumer()) {        final Map<String, List<PartitionInfo>> topicsInfo = consumer.listTopics();        final Set<String> topics = topicsInfo == null ? new HashSet<>() : topicsInfo.keySet();        topics.remove(CONSUMER_OFFSETS_TOPIC);        return topics;    }}
public String metron_f1596_0(final String topic)
{    String message = null;    if (listTopics().contains(topic)) {        try (Consumer<String, String> kafkaConsumer = kafkaConsumerFactory.createConsumer()) {            kafkaConsumer.assign(kafkaConsumer.partitionsFor(topic).stream().map(partitionInfo -> new TopicPartition(topic, partitionInfo.partition())).collect(Collectors.toList()));            kafkaConsumer.assignment().stream().filter(p -> (kafkaConsumer.position(p) - 1) >= 0).forEach(p -> kafkaConsumer.seek(p, kafkaConsumer.position(p) - 1));            final ConsumerRecords<String, String> records = kafkaConsumer.poll(KAFKA_CONSUMER_TIMEOUT);            message = records.isEmpty() ? null : records.iterator().next().value();            kafkaConsumer.unsubscribe();        }    }    return message;}
public void metron_f1597_0(String topic, String message) throws RestException
{    kafkaProducer.send(new ProducerRecord<>(topic, message));}
public boolean metron_f1598_0(String name)
{    if (listTopics().contains(name)) {        String zkServers = environment.getProperty(MetronRestConstants.ZK_URL_SPRING_PROPERTY);        User principal = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();        String user = principal.getUsername();        List<String> cmd = new ArrayList<>();        cmd.add("--add");        cmd.add("--allow-principal");        cmd.add("User:" + user);        cmd.add("--topic");        cmd.add(name);        cmd.add("--authorizer-properties");        cmd.add("zookeeper.connect=" + String.join(",", zkServers));        AclCommand.main(cmd.toArray(new String[cmd.size()]));    } else {        return false;    }    return true;}
public Document metron_f1599_0(MetaAlertCreateRequest createRequest) throws RestException
{    try {        return dao.createMetaAlert(createRequest);    } catch (InvalidCreateException | IOException e) {        throw new RestException(e.getMessage(), e);    }}
public SearchResponse metron_f1600_0(String guid) throws RestException
{    try {        return dao.getAllMetaAlertsForAlert(guid);    } catch (IOException | InvalidSearchException ise) {        throw new RestException(ise.getMessage(), ise);    }}
public Document metron_f1601_0(MetaAlertAddRemoveRequest metaAlertAddRemoveRequest) throws RestException
{    try {        return dao.addAlertsToMetaAlert(metaAlertAddRemoveRequest.getMetaAlertGuid(), metaAlertAddRemoveRequest.getAlerts());    } catch (IOException | IllegalStateException e) {        throw new RestException(e.getMessage(), e);    }}
public Document metron_f1602_0(MetaAlertAddRemoveRequest metaAlertAddRemoveRequest) throws RestException
{    try {        return dao.removeAlertsFromMetaAlert(metaAlertAddRemoveRequest.getMetaAlertGuid(), metaAlertAddRemoveRequest.getAlerts());    } catch (IOException | IllegalStateException e) {        throw new RestException(e.getMessage(), e);    }}
public Document metron_f1603_0(String metaAlertGuid, MetaAlertStatus status) throws RestException
{    try {        return dao.updateMetaAlertStatus(metaAlertGuid, status);    } catch (IOException ioe) {        throw new RestException(ioe.getMessage(), ioe);    }}
public PcapStatus metron_f1604_0(String username, PcapRequest pcapRequest) throws RestException
{    List<PcapStatus> runningJobs = getJobStatus(username, JobStatus.State.RUNNING);    Integer userJobLimit = environment.getProperty(MetronRestConstants.USER_JOB_LIMIT_SPRING_PROPERTY, Integer.class, 1);    if (runningJobs != null && runningJobs.size() >= userJobLimit) {        String jobIds = runningJobs.stream().map(PcapStatus::getJobId).collect(Collectors.joining(", "));        String message = String.format("Cannot submit job because a job is already running.  " + "Please contact the administrator to cancel job(s) with id(s) %s", jobIds);        throw new RestException(message);    }    try {        setPcapOptions(username, pcapRequest);        pcapRequest.setFields();        pcapJobSupplier.setPcapRequest(pcapRequest);        JobStatus jobStatus = jobManager.submit(pcapJobSupplier, username);        return jobStatusToPcapStatus(jobStatus);    } catch (IOException | JobException e) {        throw new RestException(e);    }}
public PcapStatus metron_f1605_1(String username, String jobId) throws RestException
{    PcapStatus pcapStatus = null;    try {        Statusable<Path> statusable = jobManager.getJob(username, jobId);        if (statusable != null) {            pcapStatus = statusableToPcapStatus(statusable);        }    } catch (JobNotFoundException | InterruptedException e) {            } catch (JobException e) {        throw new RestException(e);    }    return pcapStatus;}
public List<PcapStatus> metron_f1606_0(String username, JobStatus.State state) throws RestException
{    List<PcapStatus> pcapStatuses = new ArrayList<>();    try {        List<Statusable<Path>> statusables = jobManager.getJobs(username);        if (statusables != null) {            pcapStatuses = statusables.stream().filter(statusable -> {                try {                    return statusable.getStatus().getState() == state;                } catch (JobException e) {                    return JobStatus.State.FAILED == state;                }            }).map(statusable -> {                try {                    return statusableToPcapStatus(statusable);                } catch (JobException | InterruptedException e) {                    PcapStatus pcapStatus = new PcapStatus();                    pcapStatus.setJobStatus(JobStatus.State.FAILED.toString());                    pcapStatus.setDescription(e.getMessage());                    return pcapStatus;                }            }).collect(Collectors.toList());        }    } catch (JobNotFoundException e) {        } catch (JobException e) {        throw new RestException(e);    }    return pcapStatuses;}
public PcapStatus metron_f1607_1(String username, String jobId) throws RestException
{    try {        jobManager.killJob(username, jobId);    } catch (JobNotFoundException e) {                return null;    } catch (JobException e) {        throw new RestException(e);    }    return getJobStatus(username, jobId);}
public Path metron_f1608_1(String username, String jobId, Integer page) throws RestException
{    Path path = null;    try {        Statusable<Path> statusable = jobManager.getJob(username, jobId);        if (statusable != null && statusable.isDone()) {            Pageable<Path> pageable = statusable.get();            if (pageable != null && page <= pageable.getSize() && page > 0) {                path = pageable.getPage(page - 1);            }        }    } catch (JobNotFoundException e) {            } catch (JobException | InterruptedException e) {        throw new RestException(e);    }    return path;}
public Pdml metron_f1609_0(String username, String jobId, Integer page) throws RestException
{    Pdml pdml = null;    Path path = getPath(username, jobId, page);    try {        FileSystem fileSystem = getFileSystem();        if (path != null && fileSystem.exists(path)) {            String scriptPath = environment.getProperty(MetronRestConstants.PCAP_PDML_SCRIPT_PATH_SPRING_PROPERTY);            InputStream processInputStream = pcapToPdmlScriptWrapper.execute(scriptPath, fileSystem, path);            pdml = new XmlMapper().readValue(processInputStream, Pdml.class);            processInputStream.close();        }    } catch (IOException e) {        throw new RestException(e);    }    return pdml;}
public InputStream metron_f1610_0(String username, String jobId, Integer page) throws RestException
{    InputStream inputStream = null;    Path path = getPath(username, jobId, page);    try {        FileSystem fileSystem = getFileSystem();        if (path != null && fileSystem.exists(path)) {            inputStream = fileSystem.open(path);        }    } catch (IOException e) {        throw new RestException(e);    }    return inputStream;}
public Map<String, Object> metron_f1611_1(String username, String jobId) throws RestException
{    Map<String, Object> configuration = new HashMap<>();    try {        Statusable<Path> statusable = jobManager.getJob(username, jobId);        if (statusable != null) {            Map<String, Object> jobConfiguration = statusable.getConfiguration();            configuration.put(PcapOptions.BASE_PATH.getKey(), PcapOptions.BASE_PATH.get(jobConfiguration, String.class));            configuration.put(PcapOptions.FINAL_OUTPUT_PATH.getKey(), PcapOptions.FINAL_OUTPUT_PATH.get(jobConfiguration, String.class));            configuration.put(PcapOptions.START_TIME_MS.getKey(), PcapOptions.START_TIME_MS.get(jobConfiguration, Long.class));            configuration.put(PcapOptions.END_TIME_MS.getKey(), PcapOptions.END_TIME_MS.get(jobConfiguration, Long.class));            configuration.put(PcapOptions.NUM_REDUCERS.getKey(), PcapOptions.NUM_REDUCERS.get(jobConfiguration, Integer.class));            boolean isFixedFilter = PcapOptions.FILTER_IMPL.get(jobConfiguration, PcapFilterConfigurator.class) instanceof FixedPcapFilter.Configurator;            if (isFixedFilter) {                configuration.put(FixedPcapOptions.IP_SRC_ADDR.getKey(), FixedPcapOptions.IP_SRC_ADDR.get(jobConfiguration, String.class));                configuration.put(FixedPcapOptions.IP_DST_ADDR.getKey(), FixedPcapOptions.IP_DST_ADDR.get(jobConfiguration, String.class));                configuration.put(FixedPcapOptions.IP_SRC_PORT.getKey(), FixedPcapOptions.IP_SRC_PORT.get(jobConfiguration, Integer.class));                configuration.put(FixedPcapOptions.IP_DST_PORT.getKey(), FixedPcapOptions.IP_DST_PORT.get(jobConfiguration, Integer.class));                configuration.put(FixedPcapOptions.PROTOCOL.getKey(), FixedPcapOptions.PROTOCOL.get(jobConfiguration, String.class));                configuration.put(FixedPcapOptions.PACKET_FILTER.getKey(), FixedPcapOptions.PACKET_FILTER.get(jobConfiguration, String.class));                configuration.put(FixedPcapOptions.INCLUDE_REVERSE.getKey(), FixedPcapOptions.INCLUDE_REVERSE.get(jobConfiguration, Boolean.class));            } else {                configuration.put(QueryPcapOptions.QUERY.getKey(), QueryPcapOptions.QUERY.get(jobConfiguration, String.class));            }        }    } catch (JobNotFoundException e) {            } catch (JobException e) {        throw new RestException(e);    }    return configuration;}
protected void metron_f1612_0(String username, PcapRequest pcapRequest) throws IOException
{    PcapOptions.JOB_NAME.put(pcapRequest, "jobName");    PcapOptions.USERNAME.put(pcapRequest, username);    Configuration hadoopConf = new Configuration(configuration);    if (environment.containsProperty(PCAP_YARN_QUEUE_SPRING_PROPERTY)) {        String queue = environment.getProperty(PCAP_YARN_QUEUE_SPRING_PROPERTY);        if (queue != null && !queue.isEmpty()) {            hadoopConf.set(MRJobConfig.QUEUE_NAME, environment.getProperty(PCAP_YARN_QUEUE_SPRING_PROPERTY));        }    }    PcapOptions.HADOOP_CONF.put(pcapRequest, hadoopConf);    PcapOptions.FILESYSTEM.put(pcapRequest, getFileSystem());    if (pcapRequest.getBasePath() == null) {        pcapRequest.setBasePath(environment.getProperty(MetronRestConstants.PCAP_BASE_PATH_SPRING_PROPERTY));    }    if (pcapRequest.getBaseInterimResultPath() == null) {        pcapRequest.setBaseInterimResultPath(environment.getProperty(MetronRestConstants.PCAP_BASE_INTERIM_RESULT_PATH_SPRING_PROPERTY));    }    if (pcapRequest.getFinalOutputPath() == null) {        pcapRequest.setFinalOutputPath(environment.getProperty(MetronRestConstants.PCAP_FINAL_OUTPUT_PATH_SPRING_PROPERTY));    }    PcapOptions.NUM_RECORDS_PER_FILE.put(pcapRequest, Integer.parseInt(environment.getProperty(MetronRestConstants.PCAP_PAGE_SIZE_SPRING_PROPERTY)));    PcapOptions.FINALIZER_THREADPOOL_SIZE.put(pcapRequest, environment.getProperty(MetronRestConstants.PCAP_FINALIZER_THREADPOOL_SIZE_SPRING_PROPERTY));}
protected FileSystem metron_f1613_0() throws IOException
{    return FileSystem.get(configuration);}
protected PcapStatus metron_f1614_0(Statusable<Path> statusable) throws JobException, InterruptedException
{    PcapStatus pcapStatus = jobStatusToPcapStatus(statusable.getStatus());    if (statusable.isDone()) {        Pageable<Path> pageable = statusable.get();        if (pageable != null) {            pcapStatus.setPageTotal(pageable.getSize());        }    }    return pcapStatus;}
protected PcapStatus metron_f1615_0(JobStatus jobStatus)
{    PcapStatus pcapStatus = new PcapStatus();    pcapStatus.setJobId(jobStatus.getJobId());    pcapStatus.setJobStatus(jobStatus.getState().toString());    pcapStatus.setDescription(jobStatus.getDescription());    pcapStatus.setPercentComplete(jobStatus.getPercentComplete());    return pcapStatus;}
public InputStream metron_f1616_0(String scriptPath, FileSystem fileSystem, Path pcapPath) throws IOException
{    ProcessBuilder processBuilder = getProcessBuilder(scriptPath, pcapPath.toUri().getPath());    Process process = processBuilder.start();    InputStream rawInputStream = getRawInputStream(fileSystem, pcapPath);    OutputStream processOutputStream = process.getOutputStream();    IOUtils.copy(rawInputStream, processOutputStream);    rawInputStream.close();    if (process.isAlive()) {                processOutputStream.close();        return process.getInputStream();    } else {        String errorMessage = IOUtils.toString(process.getErrorStream(), StandardCharsets.UTF_8);        throw new IOException(errorMessage);    }}
protected InputStream metron_f1617_0(FileSystem fileSystem, Path path) throws IOException
{    return fileSystem.open(path);}
protected ProcessBuilder metron_f1618_0(String... command)
{    return new ProcessBuilder(command);}
public SearchResponse metron_f1619_0(SearchRequest searchRequest) throws RestException
{    try {        if (searchRequest.getIndices() == null || searchRequest.getIndices().isEmpty()) {            List<String> indices = getDefaultIndices();                        indices.add(METAALERT_TYPE);            searchRequest.setIndices(indices);        }        if (searchRequest.getFacetFields() != null && searchRequest.getFacetFields().isEmpty()) {            searchRequest.setFacetFields(getDefaultFacetFields());        }        return dao.search(searchRequest);    } catch (InvalidSearchException ise) {        throw new RestException(ise.getMessage(), ise);    }}
public GroupResponse metron_f1620_0(GroupRequest groupRequest) throws RestException
{    try {        if (groupRequest.getIndices() == null || groupRequest.getIndices().isEmpty()) {            groupRequest.setIndices(getDefaultIndices());        }        return dao.group(groupRequest);    } catch (InvalidSearchException ise) {        throw new RestException(ise.getMessage(), ise);    }}
public Optional<Map<String, Object>> metron_f1621_0(GetRequest request) throws RestException
{    try {        return dao.getLatestResult(request);    } catch (IOException e) {        throw new RestException(e.getMessage(), e);    }}
public Map<String, FieldType> metron_f1622_1(List<String> indices) throws RestException
{    try {        if (indices == null || indices.isEmpty()) {            indices = getDefaultIndices();                        indices.add(METAALERT_TYPE);                    }        return dao.getColumnMetadata(indices);    } catch (IOException ioe) {        throw new RestException(ioe.getMessage(), ioe);    }}
private List<String> metron_f1623_0() throws RestException
{        List<String> indices = Lists.newArrayList((sensorIndexingConfigService.getAllIndices(environment.getProperty(INDEX_WRITER_NAME))));        indices.remove(ERROR_TYPE);    return indices;}
public List<String> metron_f1624_0() throws RestException
{    Optional<AlertsUIUserSettings> alertUserSettings = alertsUIService.getAlertsUIUserSettings();    if (!alertUserSettings.isPresent() || alertUserSettings.get().getFacetFields() == null) {        String facetFieldsProperty = environment.getProperty(SEARCH_FACET_FIELDS_SPRING_PROPERTY, String.class, "");        String sourceTypeField = ConfigurationsUtils.getFieldName(globalConfigService.get(), SENSOR_TYPE_FIELD_PROPERTY, Constants.SENSOR_TYPE.replace('.', ':'));        List<String> facetFields = new ArrayList<>();        facetFields.add(sourceTypeField);        if (facetFieldsProperty != null) {            facetFields.addAll(Arrays.asList(facetFieldsProperty.split(",")));        }        return facetFields;    } else {        return alertUserSettings.get().getFacetFields();    }}
public SensorEnrichmentConfig metron_f1625_0(String name, SensorEnrichmentConfig sensorEnrichmentConfig) throws RestException
{    try {        ConfigurationsUtils.writeSensorEnrichmentConfigToZookeeper(name, objectMapper.writeValueAsString(sensorEnrichmentConfig).getBytes(StandardCharsets.UTF_8), client);    } catch (Exception e) {        throw new RestException(e);    }    return sensorEnrichmentConfig;}
public SensorEnrichmentConfig metron_f1626_0(String name) throws RestException
{    EnrichmentConfigurations configs = cache.get(EnrichmentConfigurations.class);    return configs.getSensorEnrichmentConfig(name);}
public Map<String, SensorEnrichmentConfig> metron_f1627_0() throws RestException
{    Map<String, SensorEnrichmentConfig> sensorEnrichmentConfigs = new HashMap<>();    List<String> sensorNames = getAllTypes();    for (String name : sensorNames) {        SensorEnrichmentConfig config = findOne(name);        if (config != null) {            sensorEnrichmentConfigs.put(name, config);        }    }    return sensorEnrichmentConfigs;}
public List<String> metron_f1628_0() throws RestException
{    EnrichmentConfigurations configs = cache.get(EnrichmentConfigurations.class);    return configs.getTypes();}
public boolean metron_f1629_0(String name) throws RestException
{    try {        client.delete().forPath(ConfigurationType.ENRICHMENT.getZookeeperRoot() + "/" + name);    } catch (KeeperException.NoNodeException e) {        return false;    } catch (Exception e) {        throw new RestException(e);    }    return true;}
public List<String> metron_f1630_0() throws RestException
{    try {        List<String> enrichments = hBaseClient.readRecords();        enrichments.sort(Comparator.naturalOrder());        return enrichments;    } catch (IOException e) {        throw new RestException("Unable to retrieve enrichments", e);    }}
public List<String> metron_f1631_0()
{    return Arrays.asList(Aggregators.values()).stream().map(Enum::toString).collect(Collectors.toList());}
public Map<String, Object> metron_f1632_0(String name, Map<String, Object> sensorIndexingConfig) throws RestException
{    try {        ConfigurationsUtils.writeSensorIndexingConfigToZookeeper(name, objectMapper.writeValueAsString(sensorIndexingConfig).getBytes(StandardCharsets.UTF_8), client);    } catch (Exception e) {        throw new RestException(e);    }    return sensorIndexingConfig;}
public Map<String, Object> metron_f1633_0(String name) throws RestException
{    IndexingConfigurations configs = cache.get(IndexingConfigurations.class);    return configs.getSensorIndexingConfig(name, false);}
public Map<String, Map<String, Object>> metron_f1634_0() throws RestException
{    Map<String, Map<String, Object>> sensorIndexingConfigs = new HashMap<>();    List<String> sensorNames = getAllTypes();    for (String name : sensorNames) {        Map<String, Object> config = findOne(name);        if (config != null) {            sensorIndexingConfigs.put(name, config);        }    }    return sensorIndexingConfigs;}
public List<String> metron_f1635_0() throws RestException
{    IndexingConfigurations configs = cache.get(IndexingConfigurations.class);    return configs.getTypes();}
public Iterable<String> metron_f1636_0(String writerName) throws RestException
{    if (StringUtils.isEmpty(writerName)) {        return Collections.emptyList();    }    IndexingConfigurations indexingConfigs = cache.get(IndexingConfigurations.class);    ParserConfigurations parserConfigs = cache.get(ParserConfigurations.class);    Set<String> ret = new HashSet<>();    for (String sensorName : Iterables.concat(parserConfigs.getTypes(), indexingConfigs.getTypes())) {        if (indexingConfigs.isEnabled(sensorName, writerName)) {            String indexName = indexingConfigs.getIndex(sensorName, writerName);            ret.add(indexName == null ? sensorName : indexName);        }    }    return ret;}
public boolean metron_f1637_0(String name) throws RestException
{    try {        client.delete().forPath(ConfigurationType.INDEXING.getZookeeperRoot() + "/" + name);    } catch (KeeperException.NoNodeException e) {        return false;    } catch (Exception e) {        throw new RestException(e);    }    return true;}
public SensorParserConfig metron_f1638_0(String name, SensorParserConfig sensorParserConfig) throws RestException
{    try {        ConfigurationsUtils.writeSensorParserConfigToZookeeper(name, objectMapper.writeValueAsString(sensorParserConfig).getBytes(StandardCharsets.UTF_8), client);    } catch (Exception e) {        throw new RestException(e);    }    return sensorParserConfig;}
public SensorParserConfig metron_f1639_0(String name) throws RestException
{    ParserConfigurations configs = cache.get(ParserConfigurations.class);    return configs.getSensorParserConfig(name);}
public Map<String, SensorParserConfig> metron_f1640_0() throws RestException
{    Map<String, SensorParserConfig> sensorParserConfigs = new HashMap<>();    List<String> sensorNames = getAllTypes();    for (String name : sensorNames) {        SensorParserConfig config = findOne(name);        if (config != null) {            sensorParserConfigs.put(name, config);        }    }    return sensorParserConfigs;}
public boolean metron_f1641_0(String name) throws RestException
{    try {        client.delete().forPath(ConfigurationType.PARSER.getZookeeperRoot() + "/" + name);    } catch (KeeperException.NoNodeException e) {        return false;    } catch (Exception e) {        throw new RestException(e);    }    return true;}
public List<String> metron_f1642_0() throws RestException
{    ParserConfigurations configs = cache.get(ParserConfigurations.class);    return configs.getTypes();}
public Map<String, String> metron_f1643_0()
{    return ParserIndex.INSTANCE.getIndex();}
public Map<String, String> metron_f1644_0()
{    ParserIndex.INSTANCE.reload();    return getAvailableParsers();}
public JSONObject metron_f1645_0(ParseMessageRequest parseMessageRequest) throws RestException
{    SensorParserConfig sensorParserConfig = parseMessageRequest.getSensorParserConfig();    if (sensorParserConfig == null) {        throw new RestException("SensorParserConfig is missing from ParseMessageRequest");    } else if (sensorParserConfig.getParserClassName() == null) {        throw new RestException("SensorParserConfig must have a parserClassName");    } else {        MessageParser<JSONObject> parser;        try {            parser = (MessageParser<JSONObject>) Class.forName(sensorParserConfig.getParserClassName()).newInstance();        } catch (Exception e) {            throw new RestException(e.toString(), e.getCause());        }        Path temporaryGrokPath = null;        if (isGrokConfig(sensorParserConfig)) {            String name = parseMessageRequest.getSensorParserConfig().getSensorTopic();            temporaryGrokPath = grokService.saveTemporary(parseMessageRequest.getGrokStatement(), name);            sensorParserConfig.getParserConfig().put(MetronRestConstants.GROK_PATH_KEY, new Path(temporaryGrokPath, name).toString());        }        parser.configure(sensorParserConfig.getParserConfig());        parser.init();        Optional<MessageParserResult<JSONObject>> result = parser.parseOptionalResult(parseMessageRequest.getSampleData().getBytes(StandardCharsets.UTF_8));        if (!result.isPresent()) {            throw new RestException("Unknown error parsing sample data");        }        if (result.get().getMasterThrowable().isPresent()) {            throw new RestException("Error parsing sample data", result.get().getMasterThrowable().get());        }        if (result.get().getMessages().isEmpty()) {            throw new RestException("No results from parsing sample data");        }        if (isGrokConfig(sensorParserConfig) && temporaryGrokPath != null) {            grokService.deleteTemporary();        }        return result.get().getMessages().get(0);    }}
private boolean metron_f1646_0(SensorParserConfig sensorParserConfig)
{    return GROK_CLASS_NAME.equals(sensorParserConfig.getParserClassName());}
public SensorParserGroup metron_f1647_0(SensorParserGroup sensorParserGroup) throws RestException
{    ParserConfigurations parserConfigurations = cache.get(ParserConfigurations.class);    Map<String, SensorParserGroup> groups = new HashMap<>(parserConfigurations.getSensorParserGroups());    groups.remove(sensorParserGroup.getName());    if (sensorParserGroup.getSensors().size() == 0) {        throw new RestException("A parser group must contain sensors");    }    for (String sensor : sensorParserGroup.getSensors()) {                if (sensorParserConfigService.findOne(sensor) == null) {            throw new RestException(String.format("Could not find config for sensor %s", sensor));        }                for (SensorParserGroup group : groups.values()) {            Set<String> groupSensors = group.getSensors();            if (groupSensors.contains(sensor)) {                throw new RestException(String.format("Sensor %s is already in group %s", sensor, group.getName()));            }        }    }    groups.put(sensorParserGroup.getName(), sensorParserGroup);    saveGroups(parserConfigurations, new HashSet<>(groups.values()));    return sensorParserGroup;}
public SensorParserGroup metron_f1648_0(String name)
{    return getAll().get(name);}
public Map<String, SensorParserGroup> metron_f1649_0()
{    ParserConfigurations configs = cache.get(ParserConfigurations.class);    return configs.getSensorParserGroups();}
public boolean metron_f1650_0(String name) throws RestException
{    ParserConfigurations parserConfigurations = cache.get(ParserConfigurations.class);    Map<String, SensorParserGroup> groups = parserConfigurations.getSensorParserGroups();    boolean deleted = false;    if (groups.containsKey(name)) {        groups.remove(name);        saveGroups(parserConfigurations, new HashSet<>(groups.values()));        deleted = true;    }    return deleted;}
private void metron_f1651_0(ParserConfigurations parserConfigurations, Collection<SensorParserGroup> groups) throws RestException
{    Map<String, Object> globalConfig = parserConfigurations.getGlobalConfig(true);    globalConfig.put(ParserConfigurations.PARSER_GROUPS_CONF, groups);    globalConfigService.save(globalConfig);}
public Map<String, Boolean> metron_f1652_0(List<String> rules)
{    Map<String, Boolean> results = new HashMap<>();    StellarProcessor stellarProcessor = new StellarProcessor();    for (String rule : rules) {        try {            boolean result = stellarProcessor.validate(rule, Context.EMPTY_CONTEXT());            results.put(rule, result);        } catch (ParseException e) {            results.put(rule, false);        }    }    return results;}
public Map<String, Object> metron_f1653_0(SensorParserContext sensorParserContext)
{    JSONObject sampleJson = new JSONObject(sensorParserContext.getSampleData());    sensorParserContext.getSensorParserConfig().getFieldTransformations().forEach(fieldTransformer -> {        fieldTransformer.transformAndUpdate(sampleJson, Context.EMPTY_CONTEXT(), sensorParserContext.getSensorParserConfig().getParserConfig());    });    return sampleJson;}
public FieldTransformations[] metron_f1654_0()
{    return FieldTransformations.values();}
public List<StellarFunctionDescription> metron_f1655_0()
{    List<StellarFunctionDescription> stellarFunctionDescriptions = new ArrayList<>();    Iterable<StellarFunctionInfo> stellarFunctionsInfo = StellarFunctions.FUNCTION_RESOLVER().getFunctionInfo();    stellarFunctionsInfo.forEach(stellarFunctionInfo -> {        stellarFunctionDescriptions.add(new StellarFunctionDescription(stellarFunctionInfo.getName(), stellarFunctionInfo.getDescription(), stellarFunctionInfo.getParams(), stellarFunctionInfo.getReturns()));    });    return stellarFunctionDescriptions;}
public List<StellarFunctionDescription> metron_f1656_0()
{    List<StellarFunctionDescription> stellarFunctionDescriptions = getStellarFunctions();    return stellarFunctionDescriptions.stream().filter(stellarFunctionDescription -> stellarFunctionDescription.getParams().length == 1).sorted((o1, o2) -> o1.getName().compareTo(o2.getName())).collect(Collectors.toList());}
public TopologyResponse metron_f1657_0(String name) throws RestException
{    TopologyResponse topologyResponse = new TopologyResponse();    if (globalConfigService.get() == null) {        topologyResponse.setErrorMessage(TopologyStatusCode.GLOBAL_CONFIG_MISSING.toString());        return topologyResponse;    }    List<String> sensorTypes = Collections.singletonList(name);        SensorParserGroup sensorParserGroup = sensorParserGroupService.findOne(name);    if (sensorParserGroup != null) {        sensorTypes = new ArrayList<>(sensorParserGroup.getSensors());    }    for (String sensorType : sensorTypes) {        if (sensorParserConfigService.findOne(sensorType.trim()) == null) {            topologyResponse.setErrorMessage(TopologyStatusCode.SENSOR_PARSER_CONFIG_MISSING.toString());            return topologyResponse;        }    }        Collections.sort(sensorTypes);    return createResponse(stormCLIClientWrapper.startParserTopology(String.join(ParserTopologyCLI.TOPOLOGY_OPTION_SEPARATOR, sensorTypes)), TopologyStatusCode.STARTED, TopologyStatusCode.START_ERROR);}
public TopologyResponse metron_f1658_0(String name, boolean stopNow) throws RestException
{        TopologyStatus topologyStatus = stormStatusService.getTopologyStatus(name);    String jobName = topologyStatus != null ? topologyStatus.getName() : name;    return createResponse(stormCLIClientWrapper.stopParserTopology(jobName, stopNow), TopologyStatusCode.STOPPED, TopologyStatusCode.STOP_ERROR);}
public TopologyResponse metron_f1659_0() throws RestException
{    return createResponse(stormCLIClientWrapper.startEnrichmentTopology(), TopologyStatusCode.STARTED, TopologyStatusCode.START_ERROR);}
public TopologyResponse metron_f1660_0(boolean stopNow) throws RestException
{    return createResponse(stormCLIClientWrapper.stopEnrichmentTopology(stopNow), TopologyStatusCode.STOPPED, TopologyStatusCode.STOP_ERROR);}
public TopologyResponse metron_f1661_0(String scriptPath) throws RestException
{    return createResponse(stormCLIClientWrapper.startIndexingTopology(scriptPath), TopologyStatusCode.STARTED, TopologyStatusCode.START_ERROR);}
public TopologyResponse metron_f1662_0(String name, boolean stopNow) throws RestException
{    return createResponse(stormCLIClientWrapper.stopIndexingTopology(name, stopNow), TopologyStatusCode.STOPPED, TopologyStatusCode.STOP_ERROR);}
private TopologyResponse metron_f1663_0(int responseCode, TopologyStatusCode successMessage, TopologyStatusCode errorMessage)
{    TopologyResponse topologyResponse = new TopologyResponse();    if (responseCode == 0) {        topologyResponse.setSuccessMessage(successMessage.toString());    } else {        topologyResponse.setErrorMessage(errorMessage.toString());    }    return topologyResponse;}
public Map<String, String> metron_f1664_0() throws RestException
{    return stormCLIClientWrapper.getStormClientStatus();}
public void metron_f1665_0(final Environment environment)
{    this.environment = environment;}
public int metron_f1666_0(String name) throws RestException
{    kinit();    return runCommand(getParserStartCommand(name));}
public int metron_f1667_0(String name, boolean stopNow) throws RestException
{    kinit();    return runCommand(getStopCommand(name, stopNow));}
public int metron_f1668_0() throws RestException
{    kinit();    return runCommand(getEnrichmentStartCommand());}
public int metron_f1669_0(boolean stopNow) throws RestException
{    kinit();    return runCommand(getStopCommand(ENRICHMENT_TOPOLOGY_NAME, stopNow));}
public int metron_f1670_0(String scriptPath) throws RestException
{    kinit();    return runCommand(getIndexingStartCommand(scriptPath));}
public int metron_f1671_0(String name, boolean stopNow) throws RestException
{    kinit();    return runCommand(getStopCommand(name, stopNow));}
protected int metron_f1672_1(String[] command) throws RestException
{    ProcessBuilder pb = getProcessBuilder(command);    pb.inheritIO();        Process process;    try {        process = pb.start();        process.waitFor();    } catch (Exception e) {        throw new RestException(e);    }    int exitValue = process.exitValue();        return exitValue;}
protected String[] metron_f1673_0(String names)
{    List<String> command = new ArrayList<>();    command.add(environment.getProperty(MetronRestConstants.PARSER_SCRIPT_PATH_SPRING_PROPERTY));        command.add("-s");    command.add(names);        command.add("-z");    command.add(environment.getProperty(MetronRestConstants.ZK_URL_SPRING_PROPERTY));        command.add("-k");    command.add(environment.getProperty(MetronRestConstants.KAFKA_BROKER_URL_SPRING_PROPERTY));        command.add("-ksp");    command.add(KafkaUtils.INSTANCE.normalizeProtocol(environment.getProperty(MetronRestConstants.KAFKA_SECURITY_PROTOCOL_SPRING_PROPERTY)));        boolean kerberosEnabled = environment.getProperty(MetronRestConstants.KERBEROS_ENABLED_SPRING_PROPERTY, Boolean.class, false);    boolean topologyOptionsDefined = StringUtils.isNotBlank(environment.getProperty(MetronRestConstants.PARSER_TOPOLOGY_OPTIONS_SPRING_PROPERTY));    if (kerberosEnabled && topologyOptionsDefined) {        command.add("-e");        command.add(environment.getProperty(MetronRestConstants.PARSER_TOPOLOGY_OPTIONS_SPRING_PROPERTY));    }    return command.toArray(new String[0]);}
protected String[] metron_f1674_0()
{    String[] command = new String[1];    command[0] = environment.getProperty(MetronRestConstants.ENRICHMENT_SCRIPT_PATH_SPRING_PROPERTY);    return command;}
protected String[] metron_f1675_0(String scriptPath)
{    String[] command = new String[1];    command[0] = environment.getProperty(scriptPath);    return command;}
protected String[] metron_f1676_0(String name, boolean stopNow)
{    String[] command;    if (stopNow) {        command = new String[5];        command[3] = "-w";        command[4] = "0";    } else {        command = new String[3];    }    command[0] = "storm";    command[1] = "kill";    command[2] = name;    return command;}
protected ProcessBuilder metron_f1677_0(String... command)
{    return new ProcessBuilder(command);}
public Map<String, String> metron_f1678_0() throws RestException
{    Map<String, String> status = new HashMap<>();    status.put("parserScriptPath", environment.getProperty(MetronRestConstants.PARSER_SCRIPT_PATH_SPRING_PROPERTY));    status.put("enrichmentScriptPath", environment.getProperty(MetronRestConstants.ENRICHMENT_SCRIPT_PATH_SPRING_PROPERTY));    status.put("randomAccessIndexingScriptPath", environment.getProperty(MetronRestConstants.RANDOM_ACCESS_INDEXING_SCRIPT_PATH_SPRING_PROPERTY));    status.put("batchIndexingScriptPath", environment.getProperty(MetronRestConstants.BATCH_INDEXING_SCRIPT_PATH_SPRING_PROPERTY));    status.put("stormClientVersionInstalled", stormClientVersionInstalled());    return status;}
protected String metron_f1679_0() throws RestException
{    String stormClientVersionInstalled = "Storm client is not installed";    ProcessBuilder pb = getProcessBuilder("storm", "version");    pb.redirectErrorStream(true);    Process p;    try {        p = pb.start();    } catch (IOException e) {        throw new RestException(e);    }    BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream(), StandardCharsets.UTF_8));    List<String> lines = reader.lines().collect(toList());    lines.forEach(System.out::println);    if (lines.size() > 1) {        stormClientVersionInstalled = lines.get(1).replaceFirst("Storm ", "");    }    return stormClientVersionInstalled;}
protected void metron_f1680_0() throws RestException
{    if (environment.getProperty(MetronRestConstants.KERBEROS_ENABLED_SPRING_PROPERTY, Boolean.class, false)) {        String keyTabLocation = environment.getProperty(MetronRestConstants.KERBEROS_KEYTAB_SPRING_PROPERTY);        String userPrincipal = environment.getProperty(MetronRestConstants.KERBEROS_PRINCIPLE_SPRING_PROPERTY);        String[] kinitCommand = { "kinit", "-kt", keyTabLocation, userPrincipal };        runCommand(kinitCommand);    }}
public SupervisorSummary metron_f1681_0()
{    return restTemplate.getForObject(getStormUiProperty() + SUPERVISOR_SUMMARY_URL, SupervisorSummary.class);}
public TopologySummary metron_f1682_0()
{    return restTemplate.getForObject(getStormUiProperty() + TOPOLOGY_SUMMARY_URL, TopologySummary.class);}
public TopologyStatus metron_f1683_0(String name)
{    TopologyStatus topologyResponse = null;    String id = getTopologyId(name);    if (id != null) {        topologyResponse = restTemplate.getForObject(getStormUiProperty() + TOPOLOGY_URL + "/" + id, TopologyStatus.class);    }    return topologyResponse;}
public List<TopologyStatus> metron_f1684_0()
{    List<TopologyStatus> topologyStatus = new ArrayList<>();    for (TopologyStatus topology : getTopologySummary().getTopologies()) {        topologyStatus.add(restTemplate.getForObject(getStormUiProperty() + TOPOLOGY_URL + "/" + topology.getId(), TopologyStatus.class));    }    return topologyStatus;}
public TopologyResponse metron_f1685_0(String name)
{    TopologyResponse topologyResponse = new TopologyResponse();    String id = getTopologyId(name);    if (id != null) {        Map result = restTemplate.postForObject(getStormUiProperty() + TOPOLOGY_URL + "/" + id + "/activate", null, Map.class);        if ("success".equals(result.get("status"))) {            topologyResponse.setSuccessMessage(TopologyStatusCode.ACTIVE.toString());        } else {            topologyResponse.setErrorMessage((String) result.get("status"));        }    } else {        topologyResponse.setErrorMessage(TopologyStatusCode.TOPOLOGY_NOT_FOUND.toString());    }    return topologyResponse;}
public TopologyResponse metron_f1686_0(String name)
{    TopologyResponse topologyResponse = new TopologyResponse();    String id = getTopologyId(name);    if (id != null) {        Map result = restTemplate.postForObject(getStormUiProperty() + TOPOLOGY_URL + "/" + id + "/deactivate", null, Map.class);        if ("success".equals(result.get("status"))) {            topologyResponse.setSuccessMessage(TopologyStatusCode.INACTIVE.toString());        } else {            topologyResponse.setErrorMessage((String) result.get("status"));        }    } else {        topologyResponse.setErrorMessage(TopologyStatusCode.TOPOLOGY_NOT_FOUND.toString());    }    return topologyResponse;}
protected String metron_f1687_0()
{    String baseValue = environment.getProperty(STORM_UI_SPRING_PROPERTY);    if (!(baseValue.contains("://"))) {        return "http://" + baseValue;    }    return baseValue;}
protected String metron_f1688_0(String name)
{    String id = null;    for (TopologyStatus topology : getTopologySummary().getTopologies()) {        String topologyName = topology.getName();                if (topologyName.contains(ParserTopologyCLI.STORM_JOB_SEPARATOR)) {            Set<String> sensors = new HashSet<>(Arrays.asList(topologyName.split(ParserTopologyCLI.STORM_JOB_SEPARATOR)));            SensorParserGroup group = sensorParserGroupService.findOne(name);            if (group == null) {                break;            } else if (sensors.equals(group.getSensors())) {                id = topology.getId();                break;            }        }        if (topologyName.equals(name)) {            id = topology.getId();            break;        }    }    return id;}
public Document metron_f1689_0(PatchRequest request) throws RestException, OriginalNotFoundException
{    try {        return dao.patch(dao, request, Optional.of(System.currentTimeMillis()));    } catch (Exception e) {        throw new RestException(e.getMessage(), e);    }}
public Document metron_f1690_0(CommentAddRemoveRequest request) throws RestException
{    try {        return dao.addCommentToAlert(request);    } catch (Exception e) {        throw new RestException(e.getMessage(), e);    }}
public Document metron_f1691_0(CommentAddRemoveRequest request) throws RestException
{    try {        return dao.removeCommentFromAlert(request);    } catch (Exception e) {        throw new RestException(e.getMessage(), e);    }}
public synchronized void metron_f1692_0(Supplier<Map<String, Object>> globalConfigSupplier, TableProvider tableProvider)
{    if (this.userSettingsTable == null) {        Map<String, Object> globalConfig = globalConfigSupplier.get();        if (globalConfig == null) {            throw new IllegalStateException("Cannot find the global config.");        }        String table = (String) globalConfig.get(USER_SETTINGS_HBASE_TABLE);        String cf = (String) globalConfigSupplier.get().get(USER_SETTINGS_HBASE_CF);        if (table == null || cf == null) {            throw new IllegalStateException("You must configure " + USER_SETTINGS_HBASE_TABLE + " and " + USER_SETTINGS_HBASE_CF + " in the global config.");        }        try {            userSettingsTable = tableProvider.getTable(HBaseConfiguration.create(), table);            this.cf = cf.getBytes(StandardCharsets.UTF_8);        } catch (IOException e) {            throw new IllegalStateException("Unable to initialize HBaseDao: " + e.getMessage(), e);        }    }}
public Table metron_f1693_0()
{    if (userSettingsTable == null) {        init(globalConfigSupplier, tableProvider);    }    return userSettingsTable;}
public Map<String, String> metron_f1694_0(String user) throws IOException
{    Result result = getResult(user);    return getAllUserSettings(result);}
public Optional<String> metron_f1695_0(String user, String type) throws IOException
{    Result result = getResult(user);    return getUserSettings(result, type);}
public Map<String, Map<String, String>> metron_f1696_0() throws IOException
{    Scan scan = new Scan();    ResultScanner results = getTableInterface().getScanner(scan);    Map<String, Map<String, String>> allUserSettings = new HashMap<>();    for (Result result : results) {        allUserSettings.put(new String(result.getRow(), StandardCharsets.UTF_8), getAllUserSettings(result));    }    return allUserSettings;}
public Map<String, Optional<String>> metron_f1697_0(String type) throws IOException
{    Scan scan = new Scan();    ResultScanner results = getTableInterface().getScanner(scan);    Map<String, Optional<String>> allUserSettings = new HashMap<>();    for (Result result : results) {        allUserSettings.put(new String(result.getRow(), StandardCharsets.UTF_8), getUserSettings(result, type));    }    return allUserSettings;}
public void metron_f1698_0(String user, String type, String userSettings) throws IOException
{    byte[] rowKey = Bytes.toBytes(user);    Put put = new Put(rowKey);    put.addColumn(cf, Bytes.toBytes(type), Bytes.toBytes(userSettings));    getTableInterface().put(put);}
public void metron_f1699_0(String user) throws IOException
{    Delete delete = new Delete(Bytes.toBytes(user));    getTableInterface().delete(delete);}
public void metron_f1700_0(String user, String type) throws IOException
{    Delete delete = new Delete(Bytes.toBytes(user));    delete.addColumn(cf, Bytes.toBytes(type));    getTableInterface().delete(delete);}
private Result metron_f1701_0(String user) throws IOException
{    byte[] rowKey = Bytes.toBytes(user);    Get get = new Get(rowKey);    get.addFamily(cf);    return getTableInterface().get(get);}
private Optional<String> metron_f1702_0(Result result, String type) throws IOException
{    Optional<String> userSettings = Optional.empty();    if (result != null) {        byte[] value = result.getValue(cf, Bytes.toBytes(type));        if (value != null) {            userSettings = Optional.of(new String(value, StandardCharsets.UTF_8));        }    }    return userSettings;}
public Map<String, String> metron_f1703_0(Result result)
{    if (result == null) {        return new HashMap<>();    }    NavigableMap<byte[], byte[]> columns = result.getFamilyMap(cf);    if (columns == null || columns.size() == 0) {        return new HashMap<>();    }    Map<String, String> userSettingsMap = new HashMap<>();    for (Map.Entry<byte[], byte[]> column : columns.entrySet()) {        userSettingsMap.put(new String(column.getKey(), StandardCharsets.UTF_8), new String(column.getValue(), StandardCharsets.UTF_8));    }    return userSettingsMap;}
public synchronized Map<String, String> metron_f1704_0()
{    if (availableParsers == null) {        load();    }    return availableParsers;}
public synchronized Set<Class<? extends MessageParser>> metron_f1705_0()
{    if (index == null) {        load();    }    return index;}
public static void metron_f1706_0()
{    load();}
private static Collection<URL> metron_f1707_0(ClassLoader... classLoaders)
{    return ClasspathHelper.forManifest(ClasspathHelper.forClassLoader(classLoaders));}
public void metron_f1712_0() throws Exception
{    environment = mock(Environment.class);    hadoopConfig = new HadoopConfig(environment);    mockStatic(UserGroupInformation.class);}
public void metron_f1713_0() throws IOException
{    when(environment.getProperty(MetronRestConstants.KERBEROS_KEYTAB_SPRING_PROPERTY)).thenReturn("metron keytabLocation");    when(environment.getProperty(MetronRestConstants.KERBEROS_PRINCIPLE_SPRING_PROPERTY)).thenReturn("metron principal");    when(environment.getProperty(MetronRestConstants.KERBEROS_ENABLED_SPRING_PROPERTY, Boolean.class, false)).thenReturn(true);    Configuration configuration = hadoopConfig.configuration();    verifyStatic();    UserGroupInformation.setConfiguration(any(Configuration.class));    UserGroupInformation.loginUserFromKeytab("metron keytabLocation", "metron principal");}
public void metron_f1714_0() throws IOException
{    when(environment.getProperty(MetronRestConstants.KERBEROS_ENABLED_SPRING_PROPERTY, Boolean.class, false)).thenReturn(false);    Configuration configuration = hadoopConfig.configuration();    verifyStatic(never());    UserGroupInformation.setConfiguration(any(Configuration.class));    UserGroupInformation.loginUserFromKeytab(anyString(), anyString());    assertEquals("simple", configuration.get("hadoop.security.authentication"));}
public void metron_f1715_0() throws Exception
{    globalConfigService = mock(GlobalConfigService.class);    hBaseConfig = new HBaseConfig(globalConfigService);    mockStatic(HBaseConfiguration.class);}
public void metron_f1716_0() throws Exception
{    when(globalConfigService.get()).thenReturn(new HashMap<String, Object>() {        {            put(USER_SETTINGS_HBASE_TABLE, "global_config_user_settings_table");            put(USER_SETTINGS_HBASE_CF, "global_config_user_settings_cf");        }    });    HTableProvider htableProvider = mock(HTableProvider.class);    whenNew(HTableProvider.class).withNoArguments().thenReturn(htableProvider);    Configuration configuration = mock(Configuration.class);    when(HBaseConfiguration.create()).thenReturn(configuration);    hBaseConfig.userSettingsClient();    verify(htableProvider).getTable(configuration, "global_config_user_settings_table");    verifyZeroInteractions(htableProvider);}
public void metron_f1717_0() throws Exception
{    when(globalConfigService.get()).thenReturn(new HashMap<String, Object>() {        {            put(EnrichmentConfigurations.TABLE_PROVIDER, MockHBaseTableProvider.class.getName());            put(EnrichmentConfigurations.TABLE_NAME, "enrichment_list_hbase_table_name");        }    });    Assert.assertNotNull(hBaseConfig.hBaseClient());}
public void metron_f1718_0() throws Exception
{    environment = mock(Environment.class);    kafkaConfig = new KafkaConfig(environment);}
public void metron_f1719_0() throws Exception
{    when(environment.getProperty(MetronRestConstants.KAFKA_BROKER_URL_SPRING_PROPERTY)).thenReturn("broker urls");    when(environment.getProperty(MetronRestConstants.KERBEROS_ENABLED_SPRING_PROPERTY, Boolean.class, false)).thenReturn(false);    Map<String, Object> consumerProperties = kafkaConfig.consumerProperties();    assertEquals("broker urls", consumerProperties.get("bootstrap.servers"));    assertNull(consumerProperties.get("security.protocol"));    when(environment.getProperty(MetronRestConstants.KERBEROS_ENABLED_SPRING_PROPERTY, Boolean.class, false)).thenReturn(true);    when(environment.getProperty(MetronRestConstants.KAFKA_SECURITY_PROTOCOL_SPRING_PROPERTY)).thenReturn("kafka security protocol");    consumerProperties = kafkaConfig.consumerProperties();    assertEquals("kafka security protocol", consumerProperties.get("security.protocol"));}
public void metron_f1720_0() throws Exception
{    when(environment.getProperty(MetronRestConstants.KAFKA_BROKER_URL_SPRING_PROPERTY)).thenReturn("broker urls");    when(environment.getProperty(MetronRestConstants.KERBEROS_ENABLED_SPRING_PROPERTY, Boolean.class, false)).thenReturn(false);    Map<String, Object> producerProperties = kafkaConfig.producerProperties();    assertEquals("broker urls", producerProperties.get("bootstrap.servers"));    assertNull(producerProperties.get("security.protocol"));    when(environment.getProperty(MetronRestConstants.KERBEROS_ENABLED_SPRING_PROPERTY, Boolean.class, false)).thenReturn(true);    when(environment.getProperty(MetronRestConstants.KAFKA_SECURITY_PROTOCOL_SPRING_PROPERTY)).thenReturn("kafka security protocol");    producerProperties = kafkaConfig.consumerProperties();    assertEquals("kafka security protocol", producerProperties.get("security.protocol"));}
public void metron_f1721_0()
{    exception.expect(IllegalStateException.class);    exception.expectMessage("KnoxSSO requires LDAP. You must add 'ldap' to the active profiles.");    new KnoxSSOAuthenticationFilter("userSearchBase", mock(Path.class), "knoxKeyString", "knoxCookie", null);}
public void metron_f1722_0() throws Exception
{    KnoxSSOAuthenticationFilter knoxSSOAuthenticationFilter = spy(new KnoxSSOAuthenticationFilter("userSearchBase", mock(Path.class), "knoxKeyString", "knoxCookie", mock(LdapTemplate.class)));    HttpServletRequest request = mock(HttpServletRequest.class);    ServletResponse response = mock(ServletResponse.class);    FilterChain chain = mock(FilterChain.class);    SignedJWT signedJWT = mock(SignedJWT.class);    mockStatic(SignedJWT.class);    JWTClaimsSet jwtClaimsSet = new JWTClaimsSet.Builder().subject("userName").build();    Authentication authentication = mock(Authentication.class);    SecurityContext securityContext = mock(SecurityContext.class);    mockStatic(SecurityContextHolder.class);    when(request.getHeader("Authorization")).thenReturn(null);    doReturn("serializedJWT").when(knoxSSOAuthenticationFilter).getJWTFromCookie(request);    when(SignedJWT.parse("serializedJWT")).thenReturn(signedJWT);    when(signedJWT.getJWTClaimsSet()).thenReturn(jwtClaimsSet);    doReturn(true).when(knoxSSOAuthenticationFilter).isValid(signedJWT, "userName");    doReturn(authentication).when(knoxSSOAuthenticationFilter).getAuthentication("userName", request);    when(SecurityContextHolder.getContext()).thenReturn(securityContext);    knoxSSOAuthenticationFilter.doFilter(request, response, chain);    verify(securityContext).setAuthentication(authentication);    verify(chain).doFilter(request, response);    verifyNoMoreInteractions(chain, securityContext);}
public void metron_f1723_0() throws Exception
{    KnoxSSOAuthenticationFilter knoxSSOAuthenticationFilter = spy(new KnoxSSOAuthenticationFilter("userSearchBase", mock(Path.class), "knoxKeyString", "knoxCookie", mock(LdapTemplate.class)));    HttpServletRequest request = mock(HttpServletRequest.class);    ServletResponse response = mock(ServletResponse.class);    FilterChain chain = mock(FilterChain.class);    when(request.getHeader("Authorization")).thenReturn("Basic ");    knoxSSOAuthenticationFilter.doFilter(request, response, chain);    verify(knoxSSOAuthenticationFilter, times(0)).getJWTFromCookie(request);    verify(chain).doFilter(request, response);    verifyNoMoreInteractions(chain);}
public void metron_f1724_0() throws Exception
{    KnoxSSOAuthenticationFilter knoxSSOAuthenticationFilter = spy(new KnoxSSOAuthenticationFilter("userSearchBase", mock(Path.class), "knoxKeyString", "knoxCookie", mock(LdapTemplate.class)));    HttpServletRequest request = mock(HttpServletRequest.class);    ServletResponse response = mock(ServletResponse.class);    FilterChain chain = mock(FilterChain.class);    SignedJWT signedJWT = mock(SignedJWT.class);    mockStatic(SignedJWT.class);    when(request.getHeader("Authorization")).thenReturn(null);    doReturn("serializedJWT").when(knoxSSOAuthenticationFilter).getJWTFromCookie(request);    when(SignedJWT.parse("serializedJWT")).thenThrow(new ParseException("parse exception", 0));    knoxSSOAuthenticationFilter.doFilter(request, response, chain);    verify(knoxSSOAuthenticationFilter, times(0)).getAuthentication("userName", request);    verify(chain).doFilter(request, response);    verifyNoMoreInteractions(chain);}
public void metron_f1725_0() throws Exception
{    KnoxSSOAuthenticationFilter knoxSSOAuthenticationFilter = spy(new KnoxSSOAuthenticationFilter("userSearchBase", mock(Path.class), "knoxKeyString", "knoxCookie", mock(LdapTemplate.class)));    HttpServletRequest request = mock(HttpServletRequest.class);    ServletResponse response = mock(ServletResponse.class);    FilterChain chain = mock(FilterChain.class);    SignedJWT signedJWT = mock(SignedJWT.class);    mockStatic(SignedJWT.class);    JWTClaimsSet jwtClaimsSet = new JWTClaimsSet.Builder().subject("userName").build();    when(request.getHeader("Authorization")).thenReturn(null);    doReturn("serializedJWT").when(knoxSSOAuthenticationFilter).getJWTFromCookie(request);    when(SignedJWT.parse("serializedJWT")).thenReturn(signedJWT);    when(signedJWT.getJWTClaimsSet()).thenReturn(jwtClaimsSet);    doReturn(false).when(knoxSSOAuthenticationFilter).isValid(signedJWT, "userName");    knoxSSOAuthenticationFilter.doFilter(request, response, chain);    verify(knoxSSOAuthenticationFilter, times(0)).getAuthentication("userName", request);    verify(chain).doFilter(request, response);    verifyNoMoreInteractions(chain);}
public void metron_f1726_0() throws Exception
{    KnoxSSOAuthenticationFilter knoxSSOAuthenticationFilter = spy(new KnoxSSOAuthenticationFilter("userSearchBase", mock(Path.class), "knoxKeyString", "knoxCookie", mock(LdapTemplate.class)));    SignedJWT jwtToken = mock(SignedJWT.class);    {                assertFalse(knoxSSOAuthenticationFilter.isValid(jwtToken, null));    }    {                Date expiredDate = new Date(System.currentTimeMillis() - 10000);        JWTClaimsSet jwtClaimsSet = new JWTClaimsSet.Builder().expirationTime(expiredDate).build();        when(jwtToken.getJWTClaimsSet()).thenReturn(jwtClaimsSet);        assertFalse(knoxSSOAuthenticationFilter.isValid(jwtToken, "userName"));    }    {                Date notBeforeDate = new Date(System.currentTimeMillis() + 10000);        JWTClaimsSet jwtClaimsSet = new JWTClaimsSet.Builder().notBeforeTime(notBeforeDate).build();        when(jwtToken.getJWTClaimsSet()).thenReturn(jwtClaimsSet);        assertFalse(knoxSSOAuthenticationFilter.isValid(jwtToken, "userName"));    }    {                Date expiredDate = new Date(System.currentTimeMillis() + 10000);        Date notBeforeDate = new Date(System.currentTimeMillis() - 10000);        JWTClaimsSet jwtClaimsSet = new JWTClaimsSet.Builder().expirationTime(expiredDate).notBeforeTime(notBeforeDate).build();        when(jwtToken.getJWTClaimsSet()).thenReturn(jwtClaimsSet);        doReturn(true).when(knoxSSOAuthenticationFilter).validateSignature(jwtToken);        assertTrue(knoxSSOAuthenticationFilter.isValid(jwtToken, "userName"));    }}
public void metron_f1727_0() throws Exception
{    KnoxSSOAuthenticationFilter knoxSSOAuthenticationFilter = spy(new KnoxSSOAuthenticationFilter("userSearchBase", mock(Path.class), "knoxKeyString", "knoxCookie", mock(LdapTemplate.class)));    SignedJWT jwtToken = mock(SignedJWT.class);    {                JWSHeader jwsHeader = new JWSHeader(JWSAlgorithm.ES384);        when(jwtToken.getHeader()).thenReturn(jwsHeader);        assertFalse(knoxSSOAuthenticationFilter.validateSignature(jwtToken));    }    {                JWSHeader jwsHeader = new JWSHeader(JWSAlgorithm.RS256);        when(jwtToken.getHeader()).thenReturn(jwsHeader);        when(jwtToken.getState()).thenReturn(JWSObject.State.UNSIGNED);        assertFalse(knoxSSOAuthenticationFilter.validateSignature(jwtToken));    }    {                JWSHeader jwsHeader = new JWSHeader(JWSAlgorithm.RS256);        when(jwtToken.getHeader()).thenReturn(jwsHeader);        when(jwtToken.getState()).thenReturn(JWSObject.State.SIGNED);        assertFalse(knoxSSOAuthenticationFilter.validateSignature(jwtToken));    }    {        Base64URL signature = mock(Base64URL.class);        when(jwtToken.getSignature()).thenReturn(signature);        RSAPublicKey rsaPublicKey = mock(RSAPublicKey.class);        RSASSAVerifier rsaSSAVerifier = mock(RSASSAVerifier.class);        mockStatic(SecurityUtils.class);        when(SecurityUtils.parseRSAPublicKey("knoxKeyString")).thenReturn(rsaPublicKey);        whenNew(RSASSAVerifier.class).withArguments(rsaPublicKey).thenReturn(rsaSSAVerifier);        {                        when(jwtToken.verify(rsaSSAVerifier)).thenThrow(new JOSEException("verify exception"));            assertFalse(knoxSSOAuthenticationFilter.validateSignature(jwtToken));        }        {                        doReturn(false).when(jwtToken).verify(rsaSSAVerifier);            assertFalse(knoxSSOAuthenticationFilter.validateSignature(jwtToken));        }        {                        doReturn(true).when(jwtToken).verify(rsaSSAVerifier);            assertTrue(knoxSSOAuthenticationFilter.validateSignature(jwtToken));        }    }}
public void metron_f1728_0()
{    KnoxSSOAuthenticationFilter knoxSSOAuthenticationFilter = spy(new KnoxSSOAuthenticationFilter("userSearchBase", mock(Path.class), "knoxKeyString", "knoxCookie", mock(LdapTemplate.class)));    HttpServletRequest request = mock(HttpServletRequest.class);    {                assertNull(knoxSSOAuthenticationFilter.getJWTFromCookie(request));    }    {                Cookie cookie = new Cookie("someCookie", "someValue");        when(request.getCookies()).thenReturn(new Cookie[] { cookie });        assertNull(knoxSSOAuthenticationFilter.getJWTFromCookie(request));    }    {                Cookie cookie = new Cookie("knoxCookie", "token");        when(request.getCookies()).thenReturn(new Cookie[] { cookie });        assertEquals("token", knoxSSOAuthenticationFilter.getJWTFromCookie(request));    }}
public void metron_f1729_0() throws Exception
{    {        KnoxSSOAuthenticationFilter knoxSSOAuthenticationFilter = spy(new KnoxSSOAuthenticationFilter("userSearchBase", mock(Path.class), "knoxKeyString", "knoxCookie", mock(LdapTemplate.class)));        assertEquals("knoxKeyString", knoxSSOAuthenticationFilter.getKnoxKey());    }    {        FileUtils.writeStringToFile(new File("./target/knoxKeyFile"), "knoxKeyFileKeyString", StandardCharsets.UTF_8);        KnoxSSOAuthenticationFilter knoxSSOAuthenticationFilter = spy(new KnoxSSOAuthenticationFilter("userSearchBase", Paths.get("./target/knoxKeyFile"), null, "knoxCookie", mock(LdapTemplate.class)));        assertEquals("knoxKeyFileKeyString", knoxSSOAuthenticationFilter.getKnoxKey());    }}
public void metron_f1730_0() throws Exception
{    LdapTemplate ldapTemplate = mock(LdapTemplate.class);    KnoxSSOAuthenticationFilter knoxSSOAuthenticationFilter = spy(new KnoxSSOAuthenticationFilter("ou=people,dc=hadoop,dc=apache,dc=org", mock(Path.class), "knoxKeyString", "knoxCookie", ldapTemplate));    HttpServletRequest request = mock(HttpServletRequest.class);    when(ldapTemplate.search(any(LdapQuery.class), any(AttributesMapper.class))).thenReturn(Arrays.asList("USER", "ADMIN"));    Authentication authentication = knoxSSOAuthenticationFilter.getAuthentication("userName", request);    Object[] grantedAuthorities = authentication.getAuthorities().toArray();    assertEquals("ROLE_USER", grantedAuthorities[0].toString());    assertEquals("ROLE_ADMIN", grantedAuthorities[1].toString());    assertEquals("userName", authentication.getName());}
public void metron_f1731_0()
{    mapper = new MetronAuthoritiesMapper();    mapper.setUserRole("ACME_USER");    mapper.setAdminRole("ACME_ADMIN");    mapper.setPrefix("ROLE_");        List<GrantedAuthority> input = new ArrayList<>();    input.add(new SimpleGrantedAuthority("ROLE_" + "ACME_USER"));        Collection<? extends GrantedAuthority> actuals = mapper.mapAuthorities(input);    Assert.assertEquals(1, actuals.size());    Assert.assertEquals(SECURITY_ROLE_PREFIX + SECURITY_ROLE_USER, actuals.iterator().next().getAuthority());}
public void metron_f1732_0()
{    mapper = new MetronAuthoritiesMapper();    mapper.setUserRole("ACME_USER");    mapper.setAdminRole("ACME_ADMIN");    mapper.setPrefix("ROLE_");    List<GrantedAuthority> input = new ArrayList<>();    input.add(new SimpleGrantedAuthority("ROLE_" + "ACME_ADMIN"));        Collection<? extends GrantedAuthority> actuals = mapper.mapAuthorities(input);    Assert.assertEquals(1, actuals.size());    Assert.assertEquals(SECURITY_ROLE_PREFIX + SECURITY_ROLE_ADMIN, actuals.iterator().next().getAuthority());}
public void metron_f1733_0()
{    mapper = new MetronAuthoritiesMapper();    mapper.setUserRole("ACME_USER");    mapper.setAdminRole("ACME_ADMIN");    mapper.setPrefix("ROLE_");    List<GrantedAuthority> input = new ArrayList<>();    input.add(new SimpleGrantedAuthority("ROLE_" + "ANOTHER_ROLE"));    input.add(new SimpleGrantedAuthority("ROLE_" + "YET_ANOTHER_ROLE"));    Collection<? extends GrantedAuthority> actuals = mapper.mapAuthorities(input);    Assert.assertEquals(0, actuals.size());}
public void metron_f1734_0()
{        mapper = new MetronAuthoritiesMapper();    mapper.setUserRole("ACME_USER");    mapper.setAdminRole("ACME_ADMIN");    mapper.setPrefix("");    List<GrantedAuthority> input = new ArrayList<>();    input.add(new SimpleGrantedAuthority("ACME_ADMIN"));        Collection<? extends GrantedAuthority> actuals = mapper.mapAuthorities(input);    Assert.assertEquals(1, actuals.size());    Assert.assertEquals(SECURITY_ROLE_PREFIX + SECURITY_ROLE_ADMIN, actuals.iterator().next().getAuthority());}
public void metron_f1735_0() throws Exception
{    environment = mock(Environment.class);    restTemplateConfig = new RestTemplateConfig(environment);}
public void metron_f1736_0() throws Exception
{    when(environment.getProperty(MetronRestConstants.KERBEROS_KEYTAB_SPRING_PROPERTY)).thenReturn("metron keytabLocation");    when(environment.getProperty(MetronRestConstants.KERBEROS_PRINCIPLE_SPRING_PROPERTY)).thenReturn("metron principal");    whenNew(KerberosRestTemplate.class).withParameterTypes(String.class, String.class).withArguments("metron keytabLocation", "metron principal").thenReturn(null);    when(environment.getProperty(MetronRestConstants.KERBEROS_ENABLED_SPRING_PROPERTY, Boolean.class, false)).thenReturn(true);    restTemplateConfig.restTemplate();    verifyNew(KerberosRestTemplate.class).withArguments("metron keytabLocation", "metron principal");    whenNew(RestTemplate.class).withNoArguments().thenReturn(null);    when(environment.getProperty(MetronRestConstants.KERBEROS_ENABLED_SPRING_PROPERTY, Boolean.class, false)).thenReturn(false);    restTemplateConfig.restTemplate();    verifyNew(RestTemplate.class).withNoArguments();}
public Properties metron_f1737_0()
{    return new Properties();}
public ZKServerComponent metron_f1738_0(Properties zkProperties)
{    return new ZKServerComponent().withPostStartCallback((zkComponent) -> zkProperties.setProperty(ZKServerComponent.ZOOKEEPER_PROPERTY, zkComponent.getConnectionString()));}
public KafkaComponent metron_f1739_0(Properties zkProperties)
{    return new KafkaComponent().withTopologyProperties(zkProperties);}
public ConfigurationsCache metron_f1740_0(CuratorFramework client)
{    return new ZKConfigurationsCache(client, ZKConfigurationsCache.ConfiguredTypes.ENRICHMENT, ZKConfigurationsCache.ConfiguredTypes.PARSER, ZKConfigurationsCache.ConfiguredTypes.INDEXING);}
public ComponentRunner metron_f1741_0(ZKServerComponent zkServerComponent, KafkaComponent kafkaWithZKComponent)
{    ComponentRunner runner = new ComponentRunner.Builder().withComponent("zk", zkServerComponent).withCustomShutdownOrder(new String[] { "search", "zk" }).build();    try {        runner.start();        File globalConfigFile = new File("src/test/resources/zookeeper/global.json");        try (BufferedReader r = new BufferedReader(new InputStreamReader(new FileInputStream(globalConfigFile), StandardCharsets.UTF_8))) {            String globalConfig = IOUtils.toString(r);            ConfigurationsUtils.writeGlobalConfigToZookeeper(globalConfig.getBytes(StandardCharsets.UTF_8), zkServerComponent.getConnectionString());        } catch (Exception e) {            throw new IllegalStateException("Unable to upload global config", e);        }    } catch (UnableToStartException e) {        e.printStackTrace();    }    return runner;}
public CuratorFramework metron_f1742_0(ComponentRunner componentRunner)
{    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);    ZKServerComponent zkServerComponent = componentRunner.getComponent("zk", ZKServerComponent.class);    return CuratorFrameworkFactory.newClient(zkServerComponent.getConnectionString(), retryPolicy);}
public ZkClient metron_f1743_0(ComponentRunner componentRunner)
{    ZKServerComponent zkServerComponent = componentRunner.getComponent("zk", ZKServerComponent.class);    return new ZkClient(zkServerComponent.getConnectionString(), 10000, 10000, ZKStringSerializer$.MODULE$);}
public ZkUtils metron_f1744_0(ZkClient zkClient)
{    return ZkUtils.apply(zkClient, false);}
public Map<String, Object> metron_f1745_0(KafkaComponent kafkaWithZKComponent)
{    Map<String, Object> props = new HashMap<>();    props.put("bootstrap.servers", kafkaWithZKComponent.getBrokerList());    props.put("group.id", "metron-config");    props.put("enable.auto.commit", "false");    props.put("auto.commit.interval.ms", "1000");    props.put("session.timeout.ms", "30000");    props.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");    props.put("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");    return props;}
public ConsumerFactory<String, String> metron_f1746_0()
{    return new DefaultKafkaConsumerFactory<>(kafkaConsumer(kafkaWithZKComponent(zkProperties())));}
public Map<String, Object> metron_f1747_0(KafkaComponent kafkaWithZKComponent)
{    Map<String, Object> producerConfig = new HashMap<>();    producerConfig.put("bootstrap.servers", kafkaWithZKComponent.getBrokerList());    producerConfig.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");    producerConfig.put("value.serializer", "org.apache.kafka.common.serialization.StringSerializer");    producerConfig.put("request.required.acks", 1);    return producerConfig;}
public KafkaProducer metron_f1748_0(KafkaComponent kafkaWithZKComponent)
{    return new KafkaProducer<>(producerProperties(kafkaWithZKComponent));}
public StormCLIWrapper metron_f1749_0()
{    return new MockStormCLIClientWrapper();}
public RestTemplate metron_f1750_0(StormCLIWrapper stormCLIClientWrapper)
{    MockStormRestTemplate restTemplate = new MockStormRestTemplate();    restTemplate.setMockStormCLIClientWrapper((MockStormCLIClientWrapper) stormCLIClientWrapper);    return restTemplate;}
public AdminUtils$ metron_f1751_0()
{    return AdminUtils$.MODULE$;}
public UserSettingsClient metron_f1752_0() throws RestException, IOException
{    return new UserSettingsClient(new MockHBaseTableProvider().addToCache("user_settings", "cf"), Bytes.toBytes("cf"));}
public HBaseClient metron_f1753_0() throws RestException, IOException
{    final String cf = "t";    final String cq = "v";    Table table = MockHBaseTableProvider.addToCache("enrichment_list", cf);    List<String> enrichmentTypes = new ArrayList<String>() {        {            add("foo");            add("bar");            add("baz");        }    };    for (String type : enrichmentTypes) {        Put put = new Put(Bytes.toBytes(type));        put.addColumn(Bytes.toBytes(cf), Bytes.toBytes(cq), "{}".getBytes(StandardCharsets.UTF_8));        table.put(put);    }    return new HBaseClient(new MockHBaseTableProvider(), HBaseConfiguration.create(), "enrichment_list");}
public JobManager metron_f1754_0()
{    return new InMemoryJobManager();}
public MockPcapJob metron_f1755_0()
{    return new MockPcapJob();}
public PcapJobSupplier metron_f1756_0(MockPcapJob mockPcapJob)
{    MockPcapJobSupplier mockPcapJobSupplier = new MockPcapJobSupplier();    mockPcapJobSupplier.setMockPcapJob(mockPcapJob);    return mockPcapJobSupplier;}
public PcapToPdmlScriptWrapper metron_f1757_0()
{    return new MockPcapToPdmlScriptWrapper();}
public StormStatusService metron_f1758_0(@Autowired @Qualifier("StormStatusServiceImpl") StormStatusService wrappedService)
{    long maxCacheSize = 0L;    long maxCacheTimeoutSeconds = 0L;    return new CachedStormStatusServiceImpl(wrappedService, maxCacheSize, maxCacheTimeoutSeconds);}
public void metron_f1759_0() throws Exception
{    for (String user : alertsUIService.findAllAlertsUIUserSettings().keySet()) {        alertsUIService.deleteAlertsUIUserSettings(user);    }    this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).apply(springSecurity()).build();}
public void metron_f1760_0() throws Exception
{    this.mockMvc.perform(post(alertUrl + "/escalate").with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(alerts)).andExpect(status().isUnauthorized());    this.mockMvc.perform(get(alertUrl + "/settings")).andExpect(status().isUnauthorized());    this.mockMvc.perform(get(alertUrl + "/settings/all")).andExpect(status().isUnauthorized());    this.mockMvc.perform(post(alertUrl + "/settings").with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(user1AlertUserSettingsJson)).andExpect(status().isUnauthorized());    this.mockMvc.perform(get(alertUrl + "/settings/all").with(httpBasic(user1, password)).with(csrf())).andExpect(status().isForbidden());    this.mockMvc.perform(delete(alertUrl + "/settings/user1").with(httpBasic(user1, password)).with(csrf())).andExpect(status().isForbidden());}
public void metron_f1761_0() throws Exception
{    startKafka();    this.mockMvc.perform(post(alertUrl + "/escalate").with(httpBasic(user1, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(alerts)).andExpect(status().isOk());    stopKafka();}
public void metron_f1762_0() throws Exception
{    emptyProfileShouldReturnNotFound();    alertsProfilesShouldBeCreatedOrUpdated();    alertsProfilesShouldBeProperlyDeleted();}
private void metron_f1763_0() throws Exception
{        this.mockMvc.perform(get(alertUrl + "/settings").with(httpBasic(user1, password))).andExpect(status().isNotFound());        this.mockMvc.perform(get(alertUrl + "/settings").with(httpBasic(user2, password))).andExpect(status().isNotFound());        this.mockMvc.perform(get(alertUrl + "/settings/all").with(httpBasic(admin, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.*", hasSize(0)));}
private void metron_f1764_0() throws Exception
{        this.mockMvc.perform(post(alertUrl + "/settings").with(httpBasic(user1, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(user1AlertUserSettingsJson)).andExpect(status().isCreated());        this.mockMvc.perform(post(alertUrl + "/settings").with(httpBasic(user1, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(user1AlertUserSettingsJson)).andExpect(status().isOk());        this.mockMvc.perform(get(alertUrl + "/settings").with(httpBasic(user1, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(content().json(user1AlertUserSettingsJson));        this.mockMvc.perform(get(alertUrl + "/settings").with(httpBasic(user2, password))).andExpect(status().isNotFound());        this.mockMvc.perform(get(alertUrl + "/settings/all").with(httpBasic(admin, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(content().json("{\"" + user1 + "\": " + user1AlertUserSettingsJson + "}"));        this.mockMvc.perform(post(alertUrl + "/settings").with(httpBasic(user2, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(user2AlertUserSettingsJson)).andExpect(status().isCreated());        this.mockMvc.perform(get(alertUrl + "/settings").with(httpBasic(user1, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(content().json(user1AlertUserSettingsJson));        this.mockMvc.perform(get(alertUrl + "/settings").with(httpBasic(user2, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(content().json(user2AlertUserSettingsJson));        this.mockMvc.perform(get(alertUrl + "/settings/all").with(httpBasic(admin, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(content().json("{\"" + user1 + "\": " + user1AlertUserSettingsJson + ",\"" + user2 + "\": " + user2AlertUserSettingsJson + "}"));}
private void metron_f1765_0() throws Exception
{        this.mockMvc.perform(delete(alertUrl + "/settings/user1").with(httpBasic(admin, password))).andExpect(status().isOk());        this.mockMvc.perform(delete(alertUrl + "/settings/user1").with(httpBasic(admin, password))).andExpect(status().isNotFound());        this.mockMvc.perform(get(alertUrl + "/settings").with(httpBasic(user1, password))).andExpect(status().isNotFound());        this.mockMvc.perform(get(alertUrl + "/settings").with(httpBasic(user2, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(content().json(user2AlertUserSettingsJson));        this.mockMvc.perform(get(alertUrl + "/settings/all").with(httpBasic(admin, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(content().json("{\"" + user2 + "\": " + user2AlertUserSettingsJson + "}"));        this.mockMvc.perform(delete(alertUrl + "/settings/user2").with(httpBasic(admin, password))).andExpect(status().isOk());        this.mockMvc.perform(get(alertUrl + "/settings").with(httpBasic(user1, password))).andExpect(status().isNotFound());        this.mockMvc.perform(get(alertUrl + "/settings").with(httpBasic(user2, password))).andExpect(status().isNotFound());        this.mockMvc.perform(get(alertUrl + "/settings/all").with(httpBasic(admin, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.*", hasSize(0)));}
private void metron_f1766_0()
{    runner = new ComponentRunner.Builder().withComponent("kafka", kafkaWithZKComponent).withCustomShutdownOrder(new String[] { "kafka" }).build();    try {        runner.start();    } catch (UnableToStartException e) {        e.printStackTrace();    }}
private void metron_f1767_0()
{    runner.stop();}
public void metron_f1768_0(Map<String, String> indicesToDataMap) throws ParseException
{    Map<String, List<String>> backingStore = new HashMap<>();    for (Map.Entry<String, String> indices : indicesToDataMap.entrySet()) {        List<String> results = new ArrayList<>();        backingStore.put(indices.getKey(), results);        JSONArray docArray = (JSONArray) new JSONParser().parse(indices.getValue());        int i = 0;        for (Object o : docArray) {            JSONObject jsonObject = (JSONObject) o;                        if (!jsonObject.containsKey(Constants.GUID)) {                jsonObject.put(Constants.GUID, indices.getKey() + ":" + i++);            }            results.add(jsonObject.toJSONString());        }    }    InMemoryDao.load(backingStore);}
public void metron_f1769_0() throws Exception
{    this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).apply(springSecurity()).build();}
public void metron_f1770_0() throws Exception
{    this.mockMvc.perform(post(globalConfigUrl).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(globalJson)).andExpect(status().isUnauthorized());    this.mockMvc.perform(get(globalConfigUrl)).andExpect(status().isUnauthorized());    this.mockMvc.perform(delete(globalConfigUrl).with(csrf())).andExpect(status().isUnauthorized());}
public void metron_f1771_0() throws Exception
{    this.globalConfigService.delete();    assertEventually(() -> this.mockMvc.perform(get(globalConfigUrl).with(httpBasic(user, password))).andExpect(status().isNotFound()));    this.mockMvc.perform(post(globalConfigUrl).with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(globalJson)).andExpect(status().isCreated()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8")));    assertEventually(() -> this.mockMvc.perform(post(globalConfigUrl).with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(globalJson)).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))));    this.mockMvc.perform(get(globalConfigUrl).with(httpBasic(user, password))).andExpect(status().isOk());    this.mockMvc.perform(delete(globalConfigUrl).with(httpBasic(user, password)).with(csrf())).andExpect(status().isOk());    assertEventually(() -> this.mockMvc.perform(delete(globalConfigUrl).with(httpBasic(user, password)).with(csrf())).andExpect(status().isNotFound()));    this.globalConfigService.delete();}
public void metron_f1772_0() throws Exception
{    this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).apply(springSecurity()).build();}
public void metron_f1773_0() throws Exception
{    this.mockMvc.perform(post(grokUrl + "/validate").with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(grokValidationJson)).andExpect(status().isUnauthorized());    this.mockMvc.perform(get(grokUrl + "/list")).andExpect(status().isUnauthorized());}
public void metron_f1774_0() throws Exception
{    this.mockMvc.perform(post(grokUrl + "/validate").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(grokValidationJson)).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.results.action").value("TCP_MISS")).andExpect(jsonPath("$.results.bytes").value(337891)).andExpect(jsonPath("$.results.code").value(200)).andExpect(jsonPath("$.results.elapsed").value(415)).andExpect(jsonPath("$.results.ip_dst_addr").value("207.109.73.154")).andExpect(jsonPath("$.results.ip_src_addr").value("127.0.0.1")).andExpect(jsonPath("$.results.method").value("GET")).andExpect(jsonPath("$.results.timestamp").value("1467011157.401")).andExpect(jsonPath("$.results.url").value("http://www.aliexpress.com/af/shoes.html?"));    this.mockMvc.perform(post(grokUrl + "/validate").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(missingPatternLabelGrokValidationJson)).andExpect(status().isInternalServerError()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.responseCode").value(500)).andExpect(jsonPath("$.message").value("Pattern label is required"));    this.mockMvc.perform(post(grokUrl + "/validate").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(missingStatementGrokValidationJson)).andExpect(status().isInternalServerError()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.responseCode").value(500)).andExpect(jsonPath("$.message").value("Grok statement is required"));    this.mockMvc.perform(get(grokUrl + "/list").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$").isNotEmpty());    String statement = FileUtils.readFileToString(new File("../../metron-platform/metron-parsing/metron-parsers/src/main/resources/patterns/squid"));    this.mockMvc.perform(get(grokUrl + "/get/statement?path=/patterns/squid").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("text/plain;charset=UTF-8"))).andExpect(content().bytes(statement.getBytes(StandardCharsets.UTF_8)));    this.mockMvc.perform(get(grokUrl + "/get/statement?path=/bad/path").with(httpBasic(user, password))).andExpect(status().isInternalServerError()).andExpect(jsonPath("$.responseCode").value(500)).andExpect(jsonPath("$.message").value("Could not find a statement at path /bad/path"));}
public void metron_f1775_0() throws Exception
{    this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).apply(springSecurity()).build();}
public void metron_f1776_0() throws Exception
{    this.mockMvc.perform(post(hdfsUrl).with(csrf()).contentType(MediaType.parseMediaType("text/plain;charset=UTF-8")).content(fileContents)).andExpect(status().isUnauthorized());    this.mockMvc.perform(get(hdfsUrl)).andExpect(status().isUnauthorized());    this.mockMvc.perform(delete(hdfsUrl).with(csrf())).andExpect(status().isUnauthorized());}
public void metron_f1777_0() throws Exception
{    this.hdfsService.delete(new Path(path), false);    this.mockMvc.perform(get(hdfsUrl + "?path=" + path).with(httpBasic(user, password))).andExpect(status().isNotFound());    this.mockMvc.perform(post(hdfsUrl + "?path=" + path).with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("text/plain;charset=UTF-8")).content(fileContents)).andExpect(status().isOk());    this.mockMvc.perform(get(hdfsUrl + "?path=" + path).with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("text/plain;charset=UTF-8"))).andExpect(content().bytes(fileContents.getBytes(StandardCharsets.UTF_8)));    this.mockMvc.perform(delete(hdfsUrl + "?path=" + path).with(httpBasic(user, password)).with(csrf())).andExpect(status().isOk());    this.mockMvc.perform(delete(hdfsUrl + "?path=" + path).with(httpBasic(user, password)).with(csrf())).andExpect(status().isNotFound());}
private void metron_f1778_0(Evaluation evaluation) throws Exception
{    testAndRetry(KAFKA_RETRY, evaluation);}
private void metron_f1779_0(int numRetries, Evaluation evaluation) throws Exception
{    AssertionError lastError = null;    for (int i = 0; i < numRetries; ++i) {        try {            evaluation.tryTest();            return;        } catch (AssertionError error) {            if (error.getMessage().contains("but was:<404>")) {                lastError = error;                Thread.sleep(1000);                continue;            } else {                throw error;            }        }    }    if (lastError != null) {        throw lastError;    }}
public void metron_f1780_0() throws Exception
{    runner = new ComponentRunner.Builder().withComponent("kafka", kafkaWithZKComponent).withCustomShutdownOrder(new String[] { "kafka" }).build();    try {        runner.start();    } catch (UnableToStartException e) {        e.printStackTrace();    }    this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).apply(springSecurity()).build();}
public void metron_f1781_0() throws Exception
{    this.mockMvc.perform(post(kafkaUrl + "/topic").with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(broTopic)).andExpect(status().isUnauthorized());    this.mockMvc.perform(get(kafkaUrl + "/topic/bro")).andExpect(status().isUnauthorized());    this.mockMvc.perform(get(kafkaUrl + "/topic")).andExpect(status().isUnauthorized());    this.mockMvc.perform(get(kafkaUrl + "/topic/bro/sample")).andExpect(status().isUnauthorized());    this.mockMvc.perform(get(kafkaUrl + "/topic/bro/produce")).andExpect(status().isUnauthorized());    this.mockMvc.perform(delete(kafkaUrl + "/topic/bro").with(csrf())).andExpect(status().isUnauthorized());}
public void metron_f1782_0() throws Exception
{    this.kafkaService.deleteTopic("bro");    this.kafkaService.deleteTopic("someTopic");    Thread.sleep(1000);    testAndRetry(() -> this.mockMvc.perform(delete(kafkaUrl + "/topic/bro").with(httpBasic(user, password)).with(csrf())).andExpect(status().isNotFound()));    testAndRetry(() -> this.mockMvc.perform(post(kafkaUrl + "/topic").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(broTopic)).andExpect(status().isCreated()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.name").value("bro")).andExpect(jsonPath("$.numPartitions").value(1)).andExpect(jsonPath("$.replicationFactor").value(1)));    Thread.sleep(1000);    testAndRetry(() -> this.mockMvc.perform(get(kafkaUrl + "/topic/bro").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.name").value("bro")).andExpect(jsonPath("$.numPartitions").value(1)).andExpect(jsonPath("$.replicationFactor").value(1)));    this.mockMvc.perform(get(kafkaUrl + "/topic/someTopic").with(httpBasic(user, password))).andExpect(status().isNotFound());    testAndRetry(() -> this.mockMvc.perform(get(kafkaUrl + "/topic").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$", Matchers.hasItem("bro"))));    testAndRetry(() -> this.mockMvc.perform(post(kafkaUrl + "/topic/bro/produce").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(message1)).andExpect(status().isOk()));    testAndRetry(() -> this.mockMvc.perform(get(kafkaUrl + "/topic/bro/sample").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("text/plain;charset=UTF-8"))).andExpect(jsonPath("$.type").value("message1")));    testAndRetry(() -> this.mockMvc.perform(post(kafkaUrl + "/topic/bro/produce").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(message2)).andExpect(status().isOk()));    testAndRetry(() -> this.mockMvc.perform(get(kafkaUrl + "/topic/bro/sample").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("text/plain;charset=UTF-8"))).andExpect(jsonPath("$.type").value("message2")));    testAndRetry(() -> this.mockMvc.perform(post(kafkaUrl + "/topic/bro/produce").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(message3)).andExpect(status().isOk()));    testAndRetry(() -> this.mockMvc.perform(get(kafkaUrl + "/topic/bro/sample").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("text/plain;charset=UTF-8"))).andExpect(jsonPath("$.type").value("message3")));    this.mockMvc.perform(get(kafkaUrl + "/topic/someTopic/sample").with(httpBasic(user, password))).andExpect(status().isNotFound());    boolean deleted = false;    for (int i = 0; i < KAFKA_RETRY; ++i) {        try {            MvcResult result = this.mockMvc.perform(delete(kafkaUrl + "/topic/bro").with(httpBasic(user, password)).with(csrf())).andReturn();            if (result.getResponse().getStatus() == 200) {                deleted = true;                break;            }            Thread.sleep(1000);        } catch (NestedServletException nse) {            Throwable t = nse.getRootCause();            if (t instanceof TopicAlreadyMarkedForDeletionException) {                continue;            } else {                throw nse;            }        } catch (Throwable t) {            throw t;        }    }    if (!deleted) {        throw new IllegalStateException("Unable to delete kafka topic \"bro\"");    }}
public void metron_f1783_0()
{    runner.stop();}
public void metron_f1784_0() throws Exception
{    this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).apply(springSecurity()).build();    ImmutableMap<String, String> testData = ImmutableMap.of("bro_index_2017.01.01.01", SearchIntegrationTest.broData, "snort_index_2017.01.01.01", SearchIntegrationTest.snortData, metaAlertIndex, metaAlertData);    loadTestData(testData);}
public void metron_f1785_0()
{    InMemoryMetaAlertDao.clear();}
public void metron_f1786_0() throws Exception
{            String guid = "missing_1";    ResultActions result = this.mockMvc.perform(post(metaalertUrl + "/searchByAlert").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("text/plain;charset=UTF-8")).content(guid));    result.andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.total").value(0));        guid = "snort_1";    result = this.mockMvc.perform(post(metaalertUrl + "/searchByAlert").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("text/plain;charset=UTF-8")).content(guid));    result.andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.total").value(1)).andExpect(jsonPath("$.results[0].source.guid").value("meta_2")).andExpect(jsonPath("$.results[0].source.count").value(3.0));        guid = "bro_1";    result = this.mockMvc.perform(post(metaalertUrl + "/searchByAlert").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("text/plain;charset=UTF-8")).content(guid));    result.andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.total").value(2)).andExpect(jsonPath("$.results[0].source.guid").value("meta_2")).andExpect(jsonPath("$.results[0].source.count").value(3.0)).andExpect(jsonPath("$.results[1].source.guid").value("meta_1")).andExpect(jsonPath("$.results[1].source.count").value(1.0));}
public void metron_f1787_0() throws Exception
{    ResultActions result = this.mockMvc.perform(post(metaalertUrl + "/create").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(create));    result.andExpect(status().isOk()).andExpect(jsonPath("$.guid", notNullValue())).andExpect(jsonPath("$.timestamp", greaterThan(0L))).andExpect(jsonPath("$.sensorType").value(MetaAlertConstants.METAALERT_TYPE)).andExpect(jsonPath("$.document.timestamp", greaterThan(0L))).andExpect(jsonPath("$.document['source.type']").value(MetaAlertConstants.METAALERT_TYPE)).andExpect(jsonPath("$.document.status").value("active")).andExpect(jsonPath("$.document.groups[0]").value("group_one")).andExpect(jsonPath("$.document.groups[1]").value("group_two")).andExpect(jsonPath("$.document.metron_alert[0].guid").value("bro_1")).andExpect(jsonPath("$.document.metron_alert[1].guid").value("snort_2"));}
public void metron_f1788_0() throws Exception
{    MetaAlertAddRemoveRequest addRequest = new MetaAlertAddRemoveRequest();    addRequest.setMetaAlertGuid("meta_1");    addRequest.setAlerts(new ArrayList<GetRequest>() {        {            add(new GetRequest("bro_2", "bro", "bro_index_2017.01.01.01"));            add(new GetRequest("bro_3", "bro", "bro_index_2017.01.01.01"));        }    });    ResultActions result = this.mockMvc.perform(post(metaalertUrl + "/add/alert").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(JSONUtils.INSTANCE.toJSON(addRequest, false)));    result.andExpect(status().isOk()).andExpect(jsonPath("$.guid").value("meta_1")).andExpect(jsonPath("$.sensorType").value(MetaAlertConstants.METAALERT_TYPE)).andExpect(jsonPath("$.document.metron_alert[0].guid").value("bro_1")).andExpect(jsonPath("$.document.metron_alert[1].guid").value("bro_2")).andExpect(jsonPath("$.document.metron_alert[2].metaalerts").value("meta_1")).andExpect(jsonPath("$.document.metron_alert[2].guid").value("bro_3")).andExpect(jsonPath("$.document.metron_alert[2].metaalerts").value("meta_1"));    MetaAlertAddRemoveRequest addDuplicateRequest = new MetaAlertAddRemoveRequest();    addDuplicateRequest.setMetaAlertGuid("meta_1");    addDuplicateRequest.setAlerts(new ArrayList<GetRequest>() {        {            add(new GetRequest("bro_1", "bro"));        }    });    result = this.mockMvc.perform(post(metaalertUrl + "/add/alert").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(JSONUtils.INSTANCE.toJSON(addDuplicateRequest, false)));    result.andExpect(status().isOk()).andExpect(jsonPath("$.guid").value("meta_1")).andExpect(jsonPath("$.sensorType").value(MetaAlertConstants.METAALERT_TYPE)).andExpect(jsonPath("$.document.metron_alert[0].guid").value("bro_1")).andExpect(jsonPath("$.document.metron_alert[1].guid").value("bro_2")).andExpect(jsonPath("$.document.metron_alert[2].metaalerts").value("meta_1")).andExpect(jsonPath("$.document.metron_alert[2].guid").value("bro_3")).andExpect(jsonPath("$.document.metron_alert[2].metaalerts").value("meta_1"));    MetaAlertAddRemoveRequest removeRequest = new MetaAlertAddRemoveRequest();    removeRequest.setMetaAlertGuid("meta_1");    removeRequest.setAlerts(new ArrayList<GetRequest>() {        {            add(new GetRequest("bro_2", "bro"));            add(new GetRequest("bro_3", "bro"));        }    });    result = this.mockMvc.perform(post(metaalertUrl + "/remove/alert").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(JSONUtils.INSTANCE.toJSON(removeRequest, false)));    result.andExpect(status().isOk()).andExpect(jsonPath("$.guid").value("meta_1")).andExpect(jsonPath("$.sensorType").value(MetaAlertConstants.METAALERT_TYPE)).andExpect(jsonPath("$.document.metron_alert.*", hasSize(equalTo(1)))).andExpect(jsonPath("$.document.metron_alert[0].guid").value("bro_1"));    MetaAlertAddRemoveRequest removeMissingRequest = new MetaAlertAddRemoveRequest();    removeMissingRequest.setMetaAlertGuid("meta_1");    removeMissingRequest.setAlerts(new ArrayList<GetRequest>() {        {            add(new GetRequest("bro_2", "bro"));        }    });    result = this.mockMvc.perform(post(metaalertUrl + "/remove/alert").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(JSONUtils.INSTANCE.toJSON(removeMissingRequest, false)));    result.andExpect(status().isOk()).andExpect(jsonPath("$.guid").value("meta_1")).andExpect(jsonPath("$.sensorType").value(MetaAlertConstants.METAALERT_TYPE)).andExpect(jsonPath("$.document.metron_alert.*", hasSize(equalTo(1)))).andExpect(jsonPath("$.document.metron_alert[0].guid").value("bro_1"));    MetaAlertAddRemoveRequest emptyMetaAlertRequest = new MetaAlertAddRemoveRequest();    emptyMetaAlertRequest.setMetaAlertGuid("meta_1");    emptyMetaAlertRequest.setAlerts(new ArrayList<GetRequest>() {        {            add(new GetRequest("bro_1", "bro"));        }    });    result = this.mockMvc.perform(post(metaalertUrl + "/remove/alert").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(JSONUtils.INSTANCE.toJSON(emptyMetaAlertRequest, false)));    result.andExpect(status().isInternalServerError()).andExpect(jsonPath("$.message").value("Removing these alerts will result in an empty meta alert.  Empty meta alerts are not allowed.")).andExpect(jsonPath("$.fullMessage").value("IllegalStateException: Removing these alerts will result in an empty meta alert.  Empty meta alerts are not allowed."));}
public void metron_f1789_0() throws Exception
{    ResultActions result = this.mockMvc.perform(post(metaalertUrl + "/update/status/meta_2/inactive").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")));    result.andExpect(status().isOk()).andExpect(jsonPath("$.guid").value("meta_2")).andExpect(jsonPath("$.sensorType").value(MetaAlertConstants.METAALERT_TYPE)).andExpect(jsonPath("$.document.status").value("inactive"));    result = this.mockMvc.perform(post(metaalertUrl + "/update/status/meta_2/active").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")));    result.andExpect(status().isOk()).andExpect(jsonPath("$.guid").value("meta_2")).andExpect(jsonPath("$.sensorType").value(MetaAlertConstants.METAALERT_TYPE)).andExpect(jsonPath("$.document.status").value("active"));}
public void metron_f1790_0() throws Exception
{    this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).apply(springSecurity()).build();    InMemoryJobManager jobManager = (InMemoryJobManager) wac.getBean("jobManager");    jobManager.clear();}
public void metron_f1791_0() throws Exception
{    this.mockMvc.perform(post(pcapUrl + "/fixed").with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(fixedJson)).andExpect(status().isUnauthorized());    this.mockMvc.perform(post(pcapUrl + "/query").with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(queryJson)).andExpect(status().isUnauthorized());}
public void metron_f1792_0() throws Exception
{    MockPcapJob mockPcapJob = (MockPcapJob) wac.getBean("mockPcapJob");    mockPcapJob.setStatus(new JobStatus().withState(JobStatus.State.RUNNING));    this.mockMvc.perform(post(pcapUrl + "/fixed").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(fixedJson)).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.jobStatus").value("RUNNING"));    Assert.assertEquals("/base/path", mockPcapJob.getBasePath());    Assert.assertEquals("/base/interim/result/path", mockPcapJob.getBaseInterrimResultPath());    Assert.assertEquals("/final/output/path", mockPcapJob.getFinalOutputPath());    Assert.assertEquals(10000000, mockPcapJob.getStartTimeNs());    Assert.assertEquals(20000000, mockPcapJob.getEndTimeNs());    Assert.assertEquals(2, mockPcapJob.getNumReducers());    Assert.assertTrue(mockPcapJob.getFilterImpl() instanceof FixedPcapFilter.Configurator);    Map<String, String> actualFixedFields = mockPcapJob.getFixedFields();    Assert.assertEquals("192.168.1.2", actualFixedFields.get(Constants.Fields.SRC_ADDR.getName()));    Assert.assertEquals("2000", actualFixedFields.get(Constants.Fields.SRC_PORT.getName()));    Assert.assertEquals("192.168.1.1", actualFixedFields.get(Constants.Fields.DST_ADDR.getName()));    Assert.assertEquals("1000", actualFixedFields.get(Constants.Fields.DST_PORT.getName()));    Assert.assertEquals("true", actualFixedFields.get(Constants.Fields.INCLUDES_REVERSE_TRAFFIC.getName()));    Assert.assertEquals("TCP", actualFixedFields.get(Constants.Fields.PROTOCOL.getName()));    Assert.assertEquals("filter", actualFixedFields.get(PcapHelper.PacketFields.PACKET_FILTER.getName()));}
public void metron_f1793_0() throws Exception
{    MockPcapJob mockPcapJob = (MockPcapJob) wac.getBean("mockPcapJob");    mockPcapJob.setStatus(new JobStatus().withState(JobStatus.State.RUNNING));    long beforeJobTime = System.currentTimeMillis();    this.mockMvc.perform(post(pcapUrl + "/fixed").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(fixedWithDefaultsJson)).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.jobStatus").value("RUNNING"));    Assert.assertEquals("/apps/metron/pcap/input", mockPcapJob.getBasePath());    Assert.assertEquals("/apps/metron/pcap/interim", mockPcapJob.getBaseInterrimResultPath());    Assert.assertEquals("/apps/metron/pcap/output", mockPcapJob.getFinalOutputPath());    Assert.assertEquals(0, mockPcapJob.getStartTimeNs());    Assert.assertTrue(beforeJobTime < mockPcapJob.getEndTimeNs() / 1000000);    Assert.assertTrue(System.currentTimeMillis() > mockPcapJob.getEndTimeNs() / 1000000);    Assert.assertEquals(10, mockPcapJob.getNumReducers());    Assert.assertTrue(mockPcapJob.getFilterImpl() instanceof FixedPcapFilter.Configurator);    Map<String, String> actualFixedFields = mockPcapJob.getFixedFields();    Assert.assertEquals("192.168.1.2", actualFixedFields.get(Constants.Fields.SRC_ADDR.getName()));    Assert.assertEquals("2000", actualFixedFields.get(Constants.Fields.SRC_PORT.getName()));    Assert.assertEquals("192.168.1.1", actualFixedFields.get(Constants.Fields.DST_ADDR.getName()));    Assert.assertEquals("1000", actualFixedFields.get(Constants.Fields.DST_PORT.getName()));    Assert.assertEquals("true", actualFixedFields.get(Constants.Fields.INCLUDES_REVERSE_TRAFFIC.getName()));    Assert.assertEquals("TCP", actualFixedFields.get(Constants.Fields.PROTOCOL.getName()));    Assert.assertEquals("filter", actualFixedFields.get(PcapHelper.PacketFields.PACKET_FILTER.getName()));}
public void metron_f1794_0() throws Exception
{    MockPcapJob mockPcapJob = (MockPcapJob) wac.getBean("mockPcapJob");    mockPcapJob.setStatus(new JobStatus().withState(JobStatus.State.RUNNING));    this.mockMvc.perform(post(pcapUrl + "/query").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(queryJson)).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.jobStatus").value("RUNNING"));    Assert.assertEquals("/base/path", mockPcapJob.getBasePath());    Assert.assertEquals("/base/interim/result/path", mockPcapJob.getBaseInterrimResultPath());    Assert.assertEquals("/final/output/path", mockPcapJob.getFinalOutputPath());    Assert.assertEquals(10000000, mockPcapJob.getStartTimeNs());    Assert.assertEquals(20000000, mockPcapJob.getEndTimeNs());    Assert.assertEquals(2, mockPcapJob.getNumReducers());    Assert.assertTrue(mockPcapJob.getFilterImpl() instanceof QueryPcapFilter.Configurator);    Assert.assertEquals("query", mockPcapJob.getQuery());}
public void metron_f1795_0() throws Exception
{    MockPcapJob mockPcapJob = (MockPcapJob) wac.getBean("mockPcapJob");    mockPcapJob.setStatus(new JobStatus().withJobId("jobId").withState(JobStatus.State.RUNNING));    this.mockMvc.perform(post(pcapUrl + "/fixed").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(fixedJson)).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.jobId").value("jobId")).andExpect(jsonPath("$.jobStatus").value("RUNNING"));    this.mockMvc.perform(post(pcapUrl + "/fixed").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(fixedJson)).andExpect(status().isInternalServerError()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.message").value("Cannot submit job because a job is already running.  Please contact the administrator to cancel job(s) with id(s) jobId"));}
public void metron_f1796_0() throws Exception
{    MockPcapJob mockPcapJob = (MockPcapJob) wac.getBean("mockPcapJob");    mockPcapJob.setStatus(new JobStatus().withJobId("jobId").withState(JobStatus.State.RUNNING));    this.mockMvc.perform(post(pcapUrl + "/fixed").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(fixedJson)).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.jobId").value("jobId")).andExpect(jsonPath("$.jobStatus").value("RUNNING"));    mockPcapJob.setStatus(new JobStatus().withJobId("jobId").withState(JobStatus.State.SUCCEEDED));    Pageable<Path> pageable = new PcapPages(Arrays.asList(new Path("path1"), new Path("path1")));    mockPcapJob.setIsDone(true);    mockPcapJob.setPageable(pageable);    this.mockMvc.perform(get(pcapUrl + "/jobId").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.jobStatus").value("SUCCEEDED")).andExpect(jsonPath("$.pageTotal").value(2));    mockPcapJob.setStatus(new JobStatus().withJobId("jobId").withState(JobStatus.State.FINALIZING));    this.mockMvc.perform(get(pcapUrl + "/jobId").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.jobStatus").value("FINALIZING"));    mockPcapJob.setStatus(new JobStatus().withJobId("jobId").withState(JobStatus.State.FAILED));    this.mockMvc.perform(get(pcapUrl + "/jobId").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.jobStatus").value("FAILED"));    mockPcapJob.setStatus(new JobStatus().withJobId("jobId").withState(JobStatus.State.KILLED));    this.mockMvc.perform(get(pcapUrl + "/jobId").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.jobStatus").value("KILLED"));    this.mockMvc.perform(get(pcapUrl + "/someJobId").with(httpBasic(user, password))).andExpect(status().isNotFound());}
public void metron_f1797_0() throws Exception
{    MockPcapJob mockPcapJob = (MockPcapJob) wac.getBean("mockPcapJob");    mockPcapJob.setStatus(new JobStatus().withJobId("jobId").withState(JobStatus.State.RUNNING));    this.mockMvc.perform(post(pcapUrl + "/fixed").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(fixedJson)).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.jobId").value("jobId")).andExpect(jsonPath("$.jobStatus").value("RUNNING"));    this.mockMvc.perform(get(pcapUrl + "?state=RUNNING").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$[0].jobId").value("jobId")).andExpect(jsonPath("$[0].jobStatus").value("RUNNING"));    this.mockMvc.perform(get(pcapUrl + "?state=SUCCEEDED").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(content().json("[]"));}
public void metron_f1798_0() throws Exception
{    MockPcapJob mockPcapJob = (MockPcapJob) wac.getBean("mockPcapJob");    this.mockMvc.perform(get(pcapUrl + "/jobId123").with(httpBasic(user, password))).andExpect(status().isNotFound());    mockPcapJob.setStatus(new JobStatus().withJobId("jobId123").withState(JobStatus.State.RUNNING));    this.mockMvc.perform(post(pcapUrl + "/fixed").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(fixedJson)).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.jobId").value("jobId123")).andExpect(jsonPath("$.jobStatus").value("RUNNING"));    mockPcapJob.setStatus(new JobStatus().withJobId("jobId123").withState(JobStatus.State.KILLED));    this.mockMvc.perform(delete(pcapUrl + "/kill/{id}", "jobId123").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.jobId").value("jobId123")).andExpect(jsonPath("$.jobStatus").value("KILLED"));    mockPcapJob.setStatus(new JobStatus().withJobId("jobId").withState(JobStatus.State.KILLED));}
public void metron_f1799_0() throws Exception
{    MockPcapJob mockPcapJob = (MockPcapJob) wac.getBean("mockPcapJob");    this.mockMvc.perform(get(pcapUrl + "/jobId123").with(httpBasic(user, password))).andExpect(status().isNotFound());    this.mockMvc.perform(delete(pcapUrl + "/kill/{id}", "jobId123").with(httpBasic(user, password))).andExpect(status().isNotFound());}
public void metron_f1800_0() throws Exception
{    MockPcapJob mockPcapJob = (MockPcapJob) wac.getBean("mockPcapJob");    mockPcapJob.setStatus(new JobStatus().withJobId("jobId").withState(JobStatus.State.RUNNING));    this.mockMvc.perform(post(pcapUrl + "/fixed").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(fixedJson)).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.jobId").value("jobId")).andExpect(jsonPath("$.jobStatus").value("RUNNING"));    Pageable<Path> pageable = new PcapPages(Arrays.asList(new Path("./target")));    mockPcapJob.setIsDone(true);    mockPcapJob.setPageable(pageable);    this.mockMvc.perform(get(pcapUrl + "/jobId/pdml?page=1").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.version").value("0")).andExpect(jsonPath("$.creator").value("wireshark/2.6.1")).andExpect(jsonPath("$.time").value("Thu Jun 28 14:14:38 2018")).andExpect(jsonPath("$.captureFile").value("/tmp/pcap-data-201806272004-289365c53112438ca55ea047e13a12a5+0001.pcap")).andExpect(jsonPath("$.packets[0].protos[0].name").value("geninfo")).andExpect(jsonPath("$.packets[0].protos[0].fields[0].name").value("num")).andExpect(jsonPath("$.packets[0].protos[1].name").value("ip")).andExpect(jsonPath("$.packets[0].protos[1].fields[0].name").value("ip.addr"));    this.mockMvc.perform(get(pcapUrl + "/jobId/pdml?page=0").with(httpBasic(user, password))).andExpect(status().isNotFound());    this.mockMvc.perform(get(pcapUrl + "/jobId/pdml?page=2").with(httpBasic(user, password))).andExpect(status().isNotFound());}
public void metron_f1801_0() throws Exception
{    String pcapFileContents = "pcap file contents";    FileUtils.write(new File("./target/pcapFile"), pcapFileContents, "UTF8");    MockPcapJob mockPcapJob = (MockPcapJob) wac.getBean("mockPcapJob");    mockPcapJob.setStatus(new JobStatus().withJobId("jobId").withState(JobStatus.State.RUNNING));    this.mockMvc.perform(post(pcapUrl + "/fixed").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(fixedJson)).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.jobId").value("jobId")).andExpect(jsonPath("$.jobStatus").value("RUNNING"));    Pageable<Path> pageable = new PcapPages(Arrays.asList(new Path("./target/pcapFile")));    mockPcapJob.setIsDone(true);    mockPcapJob.setPageable(pageable);    this.mockMvc.perform(get(pcapUrl + "/jobId/raw?page=1").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(header().string("Content-Disposition", "attachment; filename=\"pcap_jobId_1.pcap\"")).andExpect(header().string("Content-Length", Integer.toString(pcapFileContents.length()))).andExpect(content().contentType(MediaType.parseMediaType("application/octet-stream"))).andExpect(content().bytes(pcapFileContents.getBytes(StandardCharsets.UTF_8)));    this.mockMvc.perform(get(pcapUrl + "/jobId/raw?page=1&fileName=pcapFile.pcap").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(header().string("Content-Disposition", "attachment; filename=\"pcapFile.pcap\"")).andExpect(header().string("Content-Length", Integer.toString(pcapFileContents.length()))).andExpect(content().contentType(MediaType.parseMediaType("application/octet-stream"))).andExpect(content().bytes(pcapFileContents.getBytes(StandardCharsets.UTF_8)));    this.mockMvc.perform(get(pcapUrl + "/jobId/raw?page=2").with(httpBasic(user, password))).andExpect(status().isNotFound());}
public void metron_f1802_0() throws Exception
{    MockPcapJob mockPcapJob = (MockPcapJob) wac.getBean("mockPcapJob");    mockPcapJob.setStatus(new JobStatus().withJobId("jobId").withState(JobStatus.State.RUNNING));    this.mockMvc.perform(post(pcapUrl + "/fixed").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(fixedJson)).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.jobId").value("jobId")).andExpect(jsonPath("$.jobStatus").value("RUNNING"));    this.mockMvc.perform(get(pcapUrl + "/jobId/config").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.basePath").value("/base/path")).andExpect(jsonPath("$.finalOutputPath").value("/final/output/path")).andExpect(jsonPath("$.startTimeMs").value(10)).andExpect(jsonPath("$.endTimeMs").value(20)).andExpect(jsonPath("$.numReducers").value(2)).andExpect(jsonPath("$.ipSrcAddr").value("192.168.1.2")).andExpect(jsonPath("$.ipDstAddr").value("192.168.1.1")).andExpect(jsonPath("$.ipSrcPort").value("2000")).andExpect(jsonPath("$.ipDstPort").value("1000")).andExpect(jsonPath("$.protocol").value("TCP")).andExpect(jsonPath("$.packetFilter").value("filter")).andExpect(jsonPath("$.includeReverse").value("true"));}
public void metron_f1803_0() throws Exception
{    MockPcapJob mockPcapJob = (MockPcapJob) wac.getBean("mockPcapJob");    mockPcapJob.setStatus(new JobStatus().withJobId("jobId").withState(JobStatus.State.RUNNING));    this.mockMvc.perform(post(pcapUrl + "/query").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(queryJson)).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.jobId").value("jobId")).andExpect(jsonPath("$.jobStatus").value("RUNNING"));    this.mockMvc.perform(get(pcapUrl + "/jobId/config").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.basePath").value("/base/path")).andExpect(jsonPath("$.finalOutputPath").value("/final/output/path")).andExpect(jsonPath("$.startTimeMs").value(10)).andExpect(jsonPath("$.endTimeMs").value(20)).andExpect(jsonPath("$.numReducers").value(2)).andExpect(jsonPath("$.query").value("query"));}
public void metron_f1804_0() throws Exception
{    restExceptionHandler = new RestExceptionHandler();    request = mock(HttpServletRequest.class);}
public void metron_f1805_0() throws Exception
{    when(request.getAttribute("javax.servlet.error.status_code")).thenReturn(401);    Throwable throwable = new RuntimeException("unauthorized");    ResponseEntity responseEntity = restExceptionHandler.handleControllerException(request, throwable);    assertEquals(HttpStatus.UNAUTHORIZED, responseEntity.getStatusCode());    RestError actualRestError = (RestError) responseEntity.getBody();    assertEquals("unauthorized", actualRestError.getMessage());    assertEquals("RuntimeException: unauthorized", actualRestError.getFullMessage());    assertEquals(401, actualRestError.getResponseCode());}
public void metron_f1806_0() throws Exception
{    when(request.getAttribute("javax.servlet.error.status_code")).thenReturn(null);    Throwable throwable = new RuntimeException("some error");    ResponseEntity responseEntity = restExceptionHandler.handleControllerException(request, throwable);    assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, responseEntity.getStatusCode());}
public void metron_f1807_0() throws Exception
{    when(request.getAttribute("javax.servlet.error.status_code")).thenReturn(500);    Throwable throwable = new RuntimeException("some error", new RuntimeException("some root cause"));    ResponseEntity responseEntity = restExceptionHandler.handleControllerException(request, throwable);    assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, responseEntity.getStatusCode());    RestError actualRestError = (RestError) responseEntity.getBody();    assertEquals("some error", actualRestError.getMessage());    assertEquals("RuntimeException: some root cause", actualRestError.getFullMessage());    assertEquals(500, actualRestError.getResponseCode());}
public void metron_f1808_0() throws Exception
{    this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).apply(springSecurity()).build();    ImmutableMap<String, String> testData = ImmutableMap.of("bro_index_2017.01.01.01", SearchIntegrationTest.broData, "snort_index_2017.01.01.01", SearchIntegrationTest.snortData);    loadTestData(testData);    loadColumnTypes();    loadFacetCounts();}
public void metron_f1809_0() throws Exception
{    InMemoryDao.clear();}
public void metron_f1810_0() throws Exception
{    this.mockMvc.perform(post(searchUrl + "/search").with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(SearchIntegrationTest.allQuery)).andExpect(status().isUnauthorized());}
public void metron_f1811_0() throws Exception
{    sensorIndexingConfigService.save("bro", new HashMap<String, Object>() {        {            put("index", "bro");        }    });    assertEventually(() -> this.mockMvc.perform(post(searchUrl + "/search").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(defaultQuery)).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.total").value(5)).andExpect(jsonPath("$.results[0].source.source:type").value("bro")).andExpect(jsonPath("$.results[0].source.timestamp").value(5)).andExpect(jsonPath("$.results[1].source.source:type").value("bro")).andExpect(jsonPath("$.results[1].source.timestamp").value(4)).andExpect(jsonPath("$.results[2].source.source:type").value("bro")).andExpect(jsonPath("$.results[2].source.timestamp").value(3)).andExpect(jsonPath("$.results[3].source.source:type").value("bro")).andExpect(jsonPath("$.results[3].source.timestamp").value(2)).andExpect(jsonPath("$.results[4].source.source:type").value("bro")).andExpect(jsonPath("$.results[4].source.timestamp").value(1)).andExpect(jsonPath("$.facetCounts.*", hasSize(2))).andExpect(jsonPath("$.facetCounts.source:type.*", hasSize(1))).andExpect(jsonPath("$.facetCounts.source:type['bro']").value(5)).andExpect(jsonPath("$.facetCounts.ip_src_addr.*", hasSize(2))).andExpect(jsonPath("$.facetCounts.ip_src_addr['192.168.1.1']").value(3)).andExpect(jsonPath("$.facetCounts.ip_src_addr['192.168.1.2']").value(1)));    sensorIndexingConfigService.delete("bro");}
public void metron_f1812_0() throws Exception
{    assertEventually(() -> this.mockMvc.perform(post("/api/v1/alerts/ui/settings").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(alertProfile)).andExpect(status().isOk()));    assertEventually(() -> this.mockMvc.perform(post(searchUrl + "/search").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(defaultQuery)).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.facetCounts.*", hasSize(1))).andExpect(jsonPath("$.facetCounts.ip_src_port.*", hasSize(2))).andExpect(jsonPath("$.facetCounts.ip_src_port['8010']").value(1)).andExpect(jsonPath("$.facetCounts.ip_src_port['8009']").value(2)));    alertsUIService.deleteAlertsUIUserSettings(user);}
public void metron_f1813_0() throws Exception
{        sensorIndexingConfigService.save("bro", new HashMap<String, Object>() {        {            put("index", "bro");        }    });    sensorIndexingConfigService.save("snort", new HashMap<String, Object>() {        {            put("index", "snort");        }    });        assertEventually(() -> this.mockMvc.perform(post(searchUrl + "/column/metadata").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content("[]")).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.*", hasSize(5))).andExpect(jsonPath("$.common_string_field").value("text")).andExpect(jsonPath("$.common_integer_field").value("integer")).andExpect(jsonPath("$.bro_field").value("boolean")).andExpect(jsonPath("$.snort_field").value("double")).andExpect(jsonPath("$.duplicate_field").value("other")));    sensorIndexingConfigService.delete("bro");    sensorIndexingConfigService.delete("snort");}
public void metron_f1814_0() throws Exception
{    this.mockMvc.perform(post(searchUrl + "/search").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(SearchIntegrationTest.allQuery)).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.total").value(10)).andExpect(jsonPath("$.results[0].source.source:type").value("snort")).andExpect(jsonPath("$.results[0].source.timestamp").value(10)).andExpect(jsonPath("$.results[1].source.source:type").value("snort")).andExpect(jsonPath("$.results[1].source.timestamp").value(9)).andExpect(jsonPath("$.results[2].source.source:type").value("snort")).andExpect(jsonPath("$.results[2].source.timestamp").value(8)).andExpect(jsonPath("$.results[3].source.source:type").value("snort")).andExpect(jsonPath("$.results[3].source.timestamp").value(7)).andExpect(jsonPath("$.results[4].source.source:type").value("snort")).andExpect(jsonPath("$.results[4].source.timestamp").value(6)).andExpect(jsonPath("$.results[5].source.source:type").value("bro")).andExpect(jsonPath("$.results[5].source.timestamp").value(5)).andExpect(jsonPath("$.results[6].source.source:type").value("bro")).andExpect(jsonPath("$.results[6].source.timestamp").value(4)).andExpect(jsonPath("$.results[7].source.source:type").value("bro")).andExpect(jsonPath("$.results[7].source.timestamp").value(3)).andExpect(jsonPath("$.results[8].source.source:type").value("bro")).andExpect(jsonPath("$.results[8].source.timestamp").value(2)).andExpect(jsonPath("$.results[9].source.source:type").value("bro")).andExpect(jsonPath("$.results[9].source.timestamp").value(1));    this.mockMvc.perform(post(searchUrl + "/search").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(SearchIntegrationTest.filterQuery)).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.total").value(3)).andExpect(jsonPath("$.results[0].source.source:type").value("snort")).andExpect(jsonPath("$.results[0].source.timestamp").value(9)).andExpect(jsonPath("$.results[1].source.source:type").value("snort")).andExpect(jsonPath("$.results[1].source.timestamp").value(7)).andExpect(jsonPath("$.results[2].source.source:type").value("bro")).andExpect(jsonPath("$.results[2].source.timestamp").value(1));    this.mockMvc.perform(post(searchUrl + "/search").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(SearchIntegrationTest.sortQuery)).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.total").value(10)).andExpect(jsonPath("$.results[0].source.ip_src_port").value(8001)).andExpect(jsonPath("$.results[1].source.ip_src_port").value(8002)).andExpect(jsonPath("$.results[2].source.ip_src_port").value(8003)).andExpect(jsonPath("$.results[3].source.ip_src_port").value(8004)).andExpect(jsonPath("$.results[4].source.ip_src_port").value(8005)).andExpect(jsonPath("$.results[5].source.ip_src_port").value(8006)).andExpect(jsonPath("$.results[6].source.ip_src_port").value(8007)).andExpect(jsonPath("$.results[7].source.ip_src_port").value(8008)).andExpect(jsonPath("$.results[8].source.ip_src_port").value(8009)).andExpect(jsonPath("$.results[9].source.ip_src_port").value(8010));    this.mockMvc.perform(post(searchUrl + "/search").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(SearchIntegrationTest.paginationQuery)).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.total").value(10)).andExpect(jsonPath("$.results[0].source.source:type").value("snort")).andExpect(jsonPath("$.results[0].source.timestamp").value(6)).andExpect(jsonPath("$.results[1].source.source:type").value("bro")).andExpect(jsonPath("$.results[1].source.timestamp").value(5)).andExpect(jsonPath("$.results[2].source.source:type").value("bro")).andExpect(jsonPath("$.results[2].source.timestamp").value(4));    this.mockMvc.perform(post(searchUrl + "/search").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(SearchIntegrationTest.indexQuery)).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.total").value(5)).andExpect(jsonPath("$.results[0].source.source:type").value("bro")).andExpect(jsonPath("$.results[0].source.timestamp").value(5)).andExpect(jsonPath("$.results[1].source.source:type").value("bro")).andExpect(jsonPath("$.results[1].source.timestamp").value(4)).andExpect(jsonPath("$.results[2].source.source:type").value("bro")).andExpect(jsonPath("$.results[2].source.timestamp").value(3)).andExpect(jsonPath("$.results[3].source.source:type").value("bro")).andExpect(jsonPath("$.results[3].source.timestamp").value(2)).andExpect(jsonPath("$.results[4].source.source:type").value("bro")).andExpect(jsonPath("$.results[4].source.timestamp").value(1));    this.mockMvc.perform(post(searchUrl + "/search").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(SearchIntegrationTest.exceededMaxResultsQuery)).andExpect(status().isInternalServerError()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.responseCode").value(500)).andExpect(jsonPath("$.message").value("Search result size must be less than 100"));    this.mockMvc.perform(post(searchUrl + "/group").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(SearchIntegrationTest.groupByQuery)).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.*", hasSize(2))).andExpect(jsonPath("$.groupedBy").value("is_alert")).andExpect(jsonPath("$.groupResults.*", hasSize(1))).andExpect(jsonPath("$.groupResults[0].*", hasSize(5))).andExpect(jsonPath("$.groupResults[0].key").value("is_alert_value")).andExpect(jsonPath("$.groupResults[0].total").value(10)).andExpect(jsonPath("$.groupResults[0].groupedBy").value("latitude")).andExpect(jsonPath("$.groupResults[0].groupResults.*", hasSize(1))).andExpect(jsonPath("$.groupResults[0].groupResults[0].*", hasSize(3))).andExpect(jsonPath("$.groupResults[0].groupResults[0].key").value("latitude_value")).andExpect(jsonPath("$.groupResults[0].groupResults[0].total").value(10)).andExpect(jsonPath("$.groupResults[0].groupResults[0].score").value(50));    this.mockMvc.perform(post(searchUrl + "/column/metadata").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content("[\"bro\",\"snort\"]")).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.*", hasSize(5))).andExpect(jsonPath("$.common_string_field").value("text")).andExpect(jsonPath("$.common_integer_field").value("integer")).andExpect(jsonPath("$.bro_field").value("boolean")).andExpect(jsonPath("$.snort_field").value("double")).andExpect(jsonPath("$.duplicate_field").value("other"));    this.mockMvc.perform(post(searchUrl + "/column/metadata").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content("[\"bro\"]")).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.*", hasSize(4))).andExpect(jsonPath("$.common_string_field").value("text")).andExpect(jsonPath("$.common_integer_field").value("integer")).andExpect(jsonPath("$.bro_field").value("boolean")).andExpect(jsonPath("$.duplicate_field").value("date"));    this.mockMvc.perform(post(searchUrl + "/column/metadata").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content("[\"snort\"]")).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.*", hasSize(4))).andExpect(jsonPath("$.common_string_field").value("text")).andExpect(jsonPath("$.common_integer_field").value("integer")).andExpect(jsonPath("$.snort_field").value("double")).andExpect(jsonPath("$.duplicate_field").value("long"));    this.mockMvc.perform(post(searchUrl + "/column/metadata").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content("[\"someindex\"]")).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.*", hasSize(0)));}
private void metron_f1815_0() throws ParseException
{    Map<String, Map<String, FieldType>> columnTypes = new HashMap<>();    Map<String, FieldType> broTypes = new HashMap<>();    broTypes.put("common_string_field", FieldType.TEXT);    broTypes.put("common_integer_field", FieldType.INTEGER);    broTypes.put("bro_field", FieldType.BOOLEAN);    broTypes.put("duplicate_field", FieldType.DATE);    Map<String, FieldType> snortTypes = new HashMap<>();    snortTypes.put("common_string_field", FieldType.TEXT);    snortTypes.put("common_integer_field", FieldType.INTEGER);    snortTypes.put("snort_field", FieldType.DOUBLE);    snortTypes.put("duplicate_field", FieldType.LONG);    columnTypes.put("bro", broTypes);    columnTypes.put("snort", snortTypes);    InMemoryDao.setColumnMetadata(columnTypes);}
private void metron_f1816_0()
{    Map<String, Map<String, Long>> facetCounts = new HashMap<>();    Map<String, Long> ipSrcAddrCounts = new HashMap<>();    ipSrcAddrCounts.put("192.168.1.1", 3L);    ipSrcAddrCounts.put("192.168.1.2", 1L);    Map<String, Long> ipSrcPortCounts = new HashMap<>();    ipSrcPortCounts.put("8010", 1L);    ipSrcPortCounts.put("8009", 2L);    Map<String, Long> sourceTypeCounts = new HashMap<>();    sourceTypeCounts.put("bro", 5L);    facetCounts.put("ip_src_addr", ipSrcAddrCounts);    facetCounts.put("ip_src_port", ipSrcPortCounts);    facetCounts.put("source:type", sourceTypeCounts);    InMemoryDao.setFacetCounts(facetCounts);}
public void metron_f1817_0() throws Exception
{    this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).apply(springSecurity()).build();}
public void metron_f1818_0() throws Exception
{    this.mockMvc.perform(post(sensorEnrichmentConfigUrl).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(broJson)).andExpect(status().isUnauthorized());    this.mockMvc.perform(get(sensorEnrichmentConfigUrl + "/broTest")).andExpect(status().isUnauthorized());    this.mockMvc.perform(get(sensorEnrichmentConfigUrl)).andExpect(status().isUnauthorized());    this.mockMvc.perform(delete(sensorEnrichmentConfigUrl + "/broTest").with(csrf())).andExpect(status().isUnauthorized());}
public void metron_f1819_0() throws Exception
{    sensorEnrichmentConfigService.delete("broTest");    this.mockMvc.perform(get(sensorEnrichmentConfigUrl).with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(content().bytes("{}".getBytes(StandardCharsets.UTF_8)));    this.mockMvc.perform(post(sensorEnrichmentConfigUrl + "/broTest").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(broJson)).andExpect(status().isCreated()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.enrichment.fieldMap.geo[0]").value("ip_dst_addr")).andExpect(jsonPath("$.enrichment.fieldMap.host[0]").value("ip_dst_addr")).andExpect(jsonPath("$.enrichment.fieldMap.hbaseEnrichment[0]").value("ip_src_addr")).andExpect(jsonPath("$.enrichment.fieldToTypeMap.ip_src_addr[0]").value("sample")).andExpect(jsonPath("$.enrichment.fieldMap.stellar.config.group1.foo").value("1 + 1")).andExpect(jsonPath("$.enrichment.fieldMap.stellar.config.group1.bar").value("foo")).andExpect(jsonPath("$.enrichment.fieldMap.stellar.config.group2.ALL_CAPS").value("TO_UPPER(source.type)")).andExpect(jsonPath("$.threatIntel.fieldMap.hbaseThreatIntel[0]").value("ip_src_addr")).andExpect(jsonPath("$.threatIntel.fieldMap.hbaseThreatIntel[1]").value("ip_dst_addr")).andExpect(jsonPath("$.threatIntel.fieldToTypeMap.ip_src_addr[0]").value("malicious_ip")).andExpect(jsonPath("$.threatIntel.fieldToTypeMap.ip_dst_addr[0]").value("malicious_ip")).andExpect(jsonPath("$.threatIntel.triageConfig.riskLevelRules[0].rule").value("ip_src_addr == '10.122.196.204' or ip_dst_addr == '10.122.196.204'")).andExpect(jsonPath("$.threatIntel.triageConfig.riskLevelRules[0].score").value(10)).andExpect(jsonPath("$.threatIntel.triageConfig.aggregator").value("MAX"));    assertEventually(() -> this.mockMvc.perform(post(sensorEnrichmentConfigUrl + "/broTest").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(broJson)).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.enrichment.fieldMap.geo[0]").value("ip_dst_addr")).andExpect(jsonPath("$.enrichment.fieldMap.host[0]").value("ip_dst_addr")).andExpect(jsonPath("$.enrichment.fieldMap.hbaseEnrichment[0]").value("ip_src_addr")).andExpect(jsonPath("$.enrichment.fieldToTypeMap.ip_src_addr[0]").value("sample")).andExpect(jsonPath("$.enrichment.fieldMap.stellar.config.group1.foo").value("1 + 1")).andExpect(jsonPath("$.enrichment.fieldMap.stellar.config.group1.bar").value("foo")).andExpect(jsonPath("$.enrichment.fieldMap.stellar.config.group2.ALL_CAPS").value("TO_UPPER(source.type)")).andExpect(jsonPath("$.threatIntel.fieldMap.hbaseThreatIntel[0]").value("ip_src_addr")).andExpect(jsonPath("$.threatIntel.fieldMap.hbaseThreatIntel[1]").value("ip_dst_addr")).andExpect(jsonPath("$.threatIntel.fieldToTypeMap.ip_src_addr[0]").value("malicious_ip")).andExpect(jsonPath("$.threatIntel.fieldToTypeMap.ip_dst_addr[0]").value("malicious_ip")).andExpect(jsonPath("$.threatIntel.triageConfig.riskLevelRules[0].rule").value("ip_src_addr == '10.122.196.204' or ip_dst_addr == '10.122.196.204'")).andExpect(jsonPath("$.threatIntel.triageConfig.riskLevelRules[0].score").value(10)).andExpect(jsonPath("$.threatIntel.triageConfig.aggregator").value("MAX")));    this.mockMvc.perform(get(sensorEnrichmentConfigUrl + "/broTest").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.enrichment.fieldMap.geo[0]").value("ip_dst_addr")).andExpect(jsonPath("$.enrichment.fieldMap.host[0]").value("ip_dst_addr")).andExpect(jsonPath("$.enrichment.fieldMap.hbaseEnrichment[0]").value("ip_src_addr")).andExpect(jsonPath("$.enrichment.fieldToTypeMap.ip_src_addr[0]").value("sample")).andExpect(jsonPath("$.enrichment.fieldMap.stellar.config.group1.foo").value("1 + 1")).andExpect(jsonPath("$.enrichment.fieldMap.stellar.config.group1.bar").value("foo")).andExpect(jsonPath("$.enrichment.fieldMap.stellar.config.group2.ALL_CAPS").value("TO_UPPER(source.type)")).andExpect(jsonPath("$.threatIntel.fieldMap.hbaseThreatIntel[0]").value("ip_src_addr")).andExpect(jsonPath("$.threatIntel.fieldMap.hbaseThreatIntel[1]").value("ip_dst_addr")).andExpect(jsonPath("$.threatIntel.fieldToTypeMap.ip_src_addr[0]").value("malicious_ip")).andExpect(jsonPath("$.threatIntel.fieldToTypeMap.ip_dst_addr[0]").value("malicious_ip")).andExpect(jsonPath("$.threatIntel.triageConfig.riskLevelRules[0].rule").value("ip_src_addr == '10.122.196.204' or ip_dst_addr == '10.122.196.204'")).andExpect(jsonPath("$.threatIntel.triageConfig.riskLevelRules[0].score").value(10)).andExpect(jsonPath("$.threatIntel.triageConfig.aggregator").value("MAX"));    this.mockMvc.perform(get(sensorEnrichmentConfigUrl).with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$[?(@.broTest.enrichment.fieldMap.geo[0] == 'ip_dst_addr' &&" + "@.broTest.enrichment.fieldMap.host[0] == 'ip_dst_addr' &&" + "@.broTest.enrichment.fieldMap.hbaseEnrichment[0] == 'ip_src_addr' &&" + "@.broTest.enrichment.fieldToTypeMap.ip_src_addr[0] == 'sample' &&" + "@.broTest.enrichment.fieldMap.stellar.config.group1.foo == '1 + 1' &&" + "@.broTest.enrichment.fieldMap.stellar.config.group1.bar == 'foo' &&" + "@.broTest.enrichment.fieldMap.stellar.config.group2.ALL_CAPS == 'TO_UPPER(source.type)' &&" + "@.broTest.threatIntel.fieldMap.hbaseThreatIntel[0] == 'ip_src_addr' &&" + "@.broTest.threatIntel.fieldMap.hbaseThreatIntel[1] == 'ip_dst_addr' &&" + "@.broTest.threatIntel.fieldToTypeMap.ip_src_addr[0] == 'malicious_ip' &&" + "@.broTest.threatIntel.fieldToTypeMap.ip_dst_addr[0] == 'malicious_ip' &&" + "@.broTest.threatIntel.triageConfig.riskLevelRules[0].rule == \"ip_src_addr == '10.122.196.204' or ip_dst_addr == '10.122.196.204'\" &&" + "@.broTest.threatIntel.triageConfig.riskLevelRules[0].score == 10 &&" + "@.broTest.threatIntel.triageConfig.aggregator == 'MAX'" + ")]").exists());    this.mockMvc.perform(delete(sensorEnrichmentConfigUrl + "/broTest").with(httpBasic(user, password)).with(csrf())).andExpect(status().isOk());    this.mockMvc.perform(get(sensorEnrichmentConfigUrl + "/broTest").with(httpBasic(user, password))).andExpect(status().isNotFound());    this.mockMvc.perform(delete(sensorEnrichmentConfigUrl + "/broTest").with(httpBasic(user, password)).with(csrf())).andExpect(status().isNotFound());    this.mockMvc.perform(get(sensorEnrichmentConfigUrl).with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$[?(@.sensorTopic == 'broTest')]").doesNotExist());    this.mockMvc.perform(get(sensorEnrichmentConfigUrl + "/list/available/enrichments").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.length()").value("3")).andExpect(jsonPath("$.*").value(IsCollectionContaining.hasItems("foo", "bar", "baz")));    this.mockMvc.perform(get(sensorEnrichmentConfigUrl + "/list/available/threat/triage/aggregators").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$[0]").value("MAX")).andExpect(jsonPath("$[1]").value("MIN")).andExpect(jsonPath("$[2]").value("SUM")).andExpect(jsonPath("$[3]").value("MEAN")).andExpect(jsonPath("$[4]").value("POSITIVE_MEAN"));    sensorEnrichmentConfigService.delete("broTest");}
public void metron_f1820_0() throws Exception
{    this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).apply(springSecurity()).build();}
public void metron_f1821_0() throws Exception
{    this.mockMvc.perform(post(sensorIndexingConfigUrl).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(broJson)).andExpect(status().isUnauthorized());    assertEventually(() -> this.mockMvc.perform(get(sensorIndexingConfigUrl + "/broTest")).andExpect(status().isUnauthorized()));    assertEventually(() -> this.mockMvc.perform(get(sensorIndexingConfigUrl)).andExpect(status().isUnauthorized()));    assertEventually(() -> this.mockMvc.perform(delete(sensorIndexingConfigUrl + "/broTest").with(csrf())).andExpect(status().isUnauthorized()));}
public void metron_f1822_0() throws Exception
{    sensorIndexingConfigService.delete("broTest");    this.mockMvc.perform(get(sensorIndexingConfigUrl).with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(content().bytes("{}".getBytes(StandardCharsets.UTF_8)));    this.mockMvc.perform(get(sensorIndexingConfigUrl + "/list/indices/elasticsearch").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(content().bytes("[]".getBytes(StandardCharsets.UTF_8)));    this.mockMvc.perform(get(sensorIndexingConfigUrl + "/list/indices/blah").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(content().bytes("[]".getBytes(StandardCharsets.UTF_8)));    this.mockMvc.perform(post(sensorIndexingConfigUrl + "/broTest").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(broJson)).andExpect(status().isCreated()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.index").value("broTest")).andExpect(jsonPath("$.batchSize").value(1));    assertEventually(() -> this.mockMvc.perform(get(sensorIndexingConfigUrl + "/list/indices/elasticsearch").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(content().bytes("[\"broTest\"]".getBytes(StandardCharsets.UTF_8))));    assertEventually(() -> this.mockMvc.perform(post(sensorIndexingConfigUrl + "/broTest").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(broJson)).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.index").value("broTest")).andExpect(jsonPath("$.batchSize").value(1)));    this.mockMvc.perform(get(sensorIndexingConfigUrl + "/broTest").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.index").value("broTest")).andExpect(jsonPath("$.batchSize").value(1));    this.mockMvc.perform(get(sensorIndexingConfigUrl).with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$[?(@.broTest.index == 'broTest' &&" + "@.broTest.batchSize == 1" + ")]").exists());    this.mockMvc.perform(delete(sensorIndexingConfigUrl + "/broTest").with(httpBasic(user, password)).with(csrf())).andExpect(status().isOk());    assertEventually(() -> this.mockMvc.perform(get(sensorIndexingConfigUrl + "/broTest").with(httpBasic(user, password))).andExpect(status().isNotFound()));    this.mockMvc.perform(delete(sensorIndexingConfigUrl + "/broTest").with(httpBasic(user, password)).with(csrf())).andExpect(status().isNotFound());    assertEventually(() -> this.mockMvc.perform(get(sensorIndexingConfigUrl).with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$[?(@.sensorTopic == 'broTest')]").doesNotExist()));    sensorIndexingConfigService.delete("broTest");}
public void metron_f1823_0() throws Exception
{    this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).apply(springSecurity()).build();}
public void metron_f1824_0() throws Exception
{    this.mockMvc.perform(post(sensorParserConfigUrl).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(squidJson)).andExpect(status().isUnauthorized());    this.mockMvc.perform(get(sensorParserConfigUrl + "/squidTest")).andExpect(status().isUnauthorized());    this.mockMvc.perform(get(sensorParserConfigUrl)).andExpect(status().isUnauthorized());    this.mockMvc.perform(delete(sensorParserConfigUrl + "/squidTest").with(csrf())).andExpect(status().isUnauthorized());}
public void metron_f1825_0() throws Exception
{    cleanFileSystem();    this.sensorParserConfigService.delete("broTest");    this.sensorParserConfigService.delete("squidTest");    Method[] method = SensorParserConfig.class.getMethods();    final AtomicInteger numFields = new AtomicInteger(0);    for (Method m : method) {        if (m.getName().startsWith("set")) {            numFields.set(numFields.get() + 1);        }    }    this.mockMvc.perform(post(sensorParserConfigUrl + "/squidTest").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(squidJson)).andExpect(status().isCreated()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.*", hasSize(numFields.get()))).andExpect(jsonPath("$.parserClassName").value("org.apache.metron.parsers.GrokParser")).andExpect(jsonPath("$.sensorTopic").value("squidTest")).andExpect(jsonPath("$.parserConfig.grokPath").value("target/patterns/squidTest")).andExpect(jsonPath("$.parserConfig.patternLabel").value("SQUIDTEST")).andExpect(jsonPath("$.parserConfig.timestampField").value("timestamp")).andExpect(jsonPath("$.fieldTransformations[0].transformation").value("STELLAR")).andExpect(jsonPath("$.fieldTransformations[0].output[0]").value("full_hostname")).andExpect(jsonPath("$.fieldTransformations[0].output[1]").value("domain_without_subdomains")).andExpect(jsonPath("$.fieldTransformations[0].config.full_hostname").value("URL_TO_HOST(url)")).andExpect(jsonPath("$.fieldTransformations[0].config.domain_without_subdomains").value("DOMAIN_REMOVE_SUBDOMAINS(full_hostname)"));    assertEventually(() -> this.mockMvc.perform(get(sensorParserConfigUrl + "/squidTest").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.*", hasSize(numFields.get()))).andExpect(jsonPath("$.parserClassName").value("org.apache.metron.parsers.GrokParser")).andExpect(jsonPath("$.sensorTopic").value("squidTest")).andExpect(jsonPath("$.parserConfig.grokPath").value("target/patterns/squidTest")).andExpect(jsonPath("$.parserConfig.patternLabel").value("SQUIDTEST")).andExpect(jsonPath("$.parserConfig.timestampField").value("timestamp")).andExpect(jsonPath("$.fieldTransformations[0].transformation").value("STELLAR")).andExpect(jsonPath("$.fieldTransformations[0].output[0]").value("full_hostname")).andExpect(jsonPath("$.fieldTransformations[0].output[1]").value("domain_without_subdomains")).andExpect(jsonPath("$.fieldTransformations[0].config.full_hostname").value("URL_TO_HOST(url)")).andExpect(jsonPath("$.fieldTransformations[0].config.domain_without_subdomains").value("DOMAIN_REMOVE_SUBDOMAINS(full_hostname)")));    this.mockMvc.perform(get(sensorParserConfigUrl).with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.squidTest.*", hasSize(numFields.get()))).andExpect(jsonPath("$.squidTest.parserClassName").value("org.apache.metron.parsers.GrokParser")).andExpect(jsonPath("$.squidTest.sensorTopic").value("squidTest")).andExpect(jsonPath("$.squidTest.parserConfig.grokPath").value("target/patterns/squidTest")).andExpect(jsonPath("$.squidTest.parserConfig.patternLabel").value("SQUIDTEST")).andExpect(jsonPath("$.squidTest.parserConfig.timestampField").value("timestamp")).andExpect(jsonPath("$.squidTest.fieldTransformations[0].transformation").value("STELLAR")).andExpect(jsonPath("$.squidTest.fieldTransformations[0].output[0]").value("full_hostname")).andExpect(jsonPath("$.squidTest.fieldTransformations[0].output[1]").value("domain_without_subdomains")).andExpect(jsonPath("$.squidTest.fieldTransformations[0].config.full_hostname").value("URL_TO_HOST(url)")).andExpect(jsonPath("$.squidTest.fieldTransformations[0].config.domain_without_subdomains").value("DOMAIN_REMOVE_SUBDOMAINS(full_hostname)"));    this.mockMvc.perform(post(sensorParserConfigUrl + "/broTest").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(broJson)).andExpect(status().isCreated()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.*", hasSize(numFields.get()))).andExpect(jsonPath("$.parserClassName").value("org.apache.metron.parsers.bro.BasicBroParser")).andExpect(jsonPath("$.sensorTopic").value("broTest")).andExpect(jsonPath("$.readMetadata").value("true")).andExpect(jsonPath("$.mergeMetadata").value("true")).andExpect(jsonPath("$.parserConfig").isEmpty());    assertEventually(() -> this.mockMvc.perform(post(sensorParserConfigUrl + "/broTest").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(broJson)).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.*", hasSize(numFields.get()))).andExpect(jsonPath("$.parserClassName").value("org.apache.metron.parsers.bro.BasicBroParser")).andExpect(jsonPath("$.sensorTopic").value("broTest")).andExpect(jsonPath("$.readMetadata").value("true")).andExpect(jsonPath("$.mergeMetadata").value("true")).andExpect(jsonPath("$.parserConfig").isEmpty()));    this.mockMvc.perform(get(sensorParserConfigUrl).with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.*", hasSize(2))).andExpect(jsonPath("$.squidTest.*", hasSize(numFields.get()))).andExpect(jsonPath("$.squidTest.parserClassName").value("org.apache.metron.parsers.GrokParser")).andExpect(jsonPath("$.squidTest.sensorTopic").value("squidTest")).andExpect(jsonPath("$.squidTest.parserConfig.grokPath").value("target/patterns/squidTest")).andExpect(jsonPath("$.squidTest.parserConfig.patternLabel").value("SQUIDTEST")).andExpect(jsonPath("$.squidTest.parserConfig.timestampField").value("timestamp")).andExpect(jsonPath("$.squidTest.fieldTransformations[0].transformation").value("STELLAR")).andExpect(jsonPath("$.squidTest.fieldTransformations[0].output[0]").value("full_hostname")).andExpect(jsonPath("$.squidTest.fieldTransformations[0].output[1]").value("domain_without_subdomains")).andExpect(jsonPath("$.squidTest.fieldTransformations[0].config.full_hostname").value("URL_TO_HOST(url)")).andExpect(jsonPath("$.squidTest.fieldTransformations[0].config.domain_without_subdomains").value("DOMAIN_REMOVE_SUBDOMAINS(full_hostname)")).andExpect(jsonPath("$.broTest.parserClassName").value("org.apache.metron.parsers.bro.BasicBroParser")).andExpect(jsonPath("$.broTest.*", hasSize(numFields.get()))).andExpect(jsonPath("$.broTest.sensorTopic").value("broTest")).andExpect(jsonPath("$.broTest.readMetadata").value("true")).andExpect(jsonPath("$.broTest.mergeMetadata").value("true")).andExpect(jsonPath("$.broTest.parserConfig").isEmpty());    this.mockMvc.perform(delete(sensorParserConfigUrl + "/squidTest").with(httpBasic(user, password)).with(csrf())).andExpect(status().isOk());    {                TestUtils.assertEventually(() -> Assert.assertNull(sensorParserConfigService.findOne("squidTest")));    }    this.mockMvc.perform(get(sensorParserConfigUrl + "/squidTest").with(httpBasic(user, password))).andExpect(status().isNotFound());    this.mockMvc.perform(delete(sensorParserConfigUrl + "/squidTest").with(httpBasic(user, password)).with(csrf())).andExpect(status().isNotFound());    this.mockMvc.perform(get(sensorParserConfigUrl).with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.squidTest").doesNotExist()).andExpect(jsonPath("$.broTest").exists());    this.mockMvc.perform(delete(sensorParserConfigUrl + "/broTest").with(httpBasic(user, password)).with(csrf())).andExpect(status().isOk());    this.mockMvc.perform(delete(sensorParserConfigUrl + "/broTest").with(httpBasic(user, password)).with(csrf())).andExpect(status().isNotFound());    this.mockMvc.perform(get(sensorParserConfigUrl).with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.squidTest").doesNotExist()).andExpect(jsonPath("$.broTest").doesNotExist());    this.mockMvc.perform(get(sensorParserConfigUrl + "/list/available").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.Bro").value("org.apache.metron.parsers.bro.BasicBroParser")).andExpect(jsonPath("$.Grok").value("org.apache.metron.parsers.GrokParser"));    this.mockMvc.perform(get(sensorParserConfigUrl + "/reload/available").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.Bro").value("org.apache.metron.parsers.bro.BasicBroParser")).andExpect(jsonPath("$.Grok").value("org.apache.metron.parsers.GrokParser"));    this.mockMvc.perform(post(sensorParserConfigUrl + "/parseMessage").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(parseRequest)).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.elapsed").value(415)).andExpect(jsonPath("$.code").value(200)).andExpect(jsonPath("$.ip_dst_addr").value("207.109.73.154")).andExpect(jsonPath("$.method").value("GET")).andExpect(jsonPath("$.bytes").value(337891)).andExpect(jsonPath("$.action").value("TCP_MISS")).andExpect(jsonPath("$.ip_src_addr").value("127.0.0.1")).andExpect(jsonPath("$.url").value("http://www.aliexpress.com/af/shoes.html?")).andExpect(jsonPath("$.timestamp").value(1467011157401L));    this.mockMvc.perform(post(sensorParserConfigUrl + "/parseMessage").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(missingConfigParseRequest)).andExpect(status().isInternalServerError()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.responseCode").value(500)).andExpect(jsonPath("$.message").value("SensorParserConfig is missing from ParseMessageRequest"));    this.mockMvc.perform(post(sensorParserConfigUrl + "/parseMessage").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(missingClassParseRequest)).andExpect(status().isInternalServerError()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.responseCode").value(500)).andExpect(jsonPath("$.message").value("SensorParserConfig must have a parserClassName"));    this.mockMvc.perform(post(sensorParserConfigUrl + "/parseMessage").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(badClassParseRequest)).andExpect(status().isInternalServerError()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.responseCode").value(500)).andExpect(jsonPath("$.message").value("java.lang.ClassNotFoundException: badClass"));    this.sensorParserConfigService.delete("broTest");    this.sensorParserConfigService.delete("squidTest");}
private void metron_f1826_0() throws IOException
{    File grokTempPath = new File(environment.getProperty(MetronRestConstants.GROK_TEMP_PATH_SPRING_PROPERTY));    if (grokTempPath.exists()) {        FileUtils.cleanDirectory(grokTempPath);        FileUtils.deleteDirectory(grokTempPath);    }}
public void metron_f1827_0() throws Exception
{    this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).apply(springSecurity()).build();    Method[] method = SensorParserGroup.class.getMethods();    numFields = new AtomicInteger(0);    for (Method m : method) {        if (m.getName().startsWith("set")) {            numFields.set(numFields.get() + 1);        }    }    this.globalConfigService.save(new HashMap<>());    this.sensorParserConfigService.save("bro", new SensorParserConfig());    this.sensorParserConfigService.save("snort", new SensorParserConfig());    this.sensorParserConfigService.save("squid", new SensorParserConfig());    this.sensorParserConfigService.save("yaf", new SensorParserConfig());    this.sensorParserConfigService.save("jsonMap", new SensorParserConfig());    TestUtils.assertEventually(() -> Assert.assertNotNull(sensorParserConfigService.findOne("bro")));    TestUtils.assertEventually(() -> Assert.assertNotNull(sensorParserConfigService.findOne("snort")));    TestUtils.assertEventually(() -> Assert.assertNotNull(sensorParserConfigService.findOne("squid")));    TestUtils.assertEventually(() -> Assert.assertNotNull(sensorParserConfigService.findOne("yaf")));    TestUtils.assertEventually(() -> Assert.assertNotNull(sensorParserConfigService.findOne("jsonMap")));}
public void metron_f1828_0() throws Exception
{    this.mockMvc.perform(post(sensorParserGroupUrl).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(group1BroSnort)).andExpect(status().isUnauthorized());    this.mockMvc.perform(get(sensorParserGroupUrl + "/group1")).andExpect(status().isUnauthorized());    this.mockMvc.perform(get(sensorParserGroupUrl)).andExpect(status().isUnauthorized());    this.mockMvc.perform(delete(sensorParserGroupUrl + "/group1").with(csrf())).andExpect(status().isUnauthorized());}
public void metron_f1829_0() throws Exception
{    this.mockMvc.perform(post(sensorParserGroupUrl).with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(group1BroSnort)).andExpect(status().isCreated()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.*", hasSize(numFields.get()))).andExpect(jsonPath("$.name").value("group1")).andExpect(jsonPath("$.description").value("group1 description")).andExpect(jsonPath("$.sensors[0]").value("bro")).andExpect(jsonPath("$.sensors[1]").value("snort"));    this.mockMvc.perform(post(sensorParserGroupUrl).with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(group2YafJsonMap)).andExpect(status().isCreated()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.*", hasSize(numFields.get()))).andExpect(jsonPath("$.name").value("group2")).andExpect(jsonPath("$.description").value("group2 description")).andExpect(jsonPath("$.sensors[0]").value("jsonMap")).andExpect(jsonPath("$.sensors[1]").value("yaf"));}
public void metron_f1830_0() throws Exception
{    SensorParserGroup group1 = JSONUtils.INSTANCE.load(group1BroSquid, SensorParserGroup.class);    this.sensorParserGroupService.save(group1);    TestUtils.assertEventually(() -> Assert.assertEquals(group1, this.sensorParserGroupService.findOne("group1")));    this.mockMvc.perform(post(sensorParserGroupUrl).with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(group1BroSquid)).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.*", hasSize(numFields.get()))).andExpect(jsonPath("$.name").value("group1")).andExpect(jsonPath("$.description").value("group1 description")).andExpect(jsonPath("$.sensors[0]").value("squid")).andExpect(jsonPath("$.sensors[1]").value("bro"));}
public void metron_f1831_0() throws Exception
{    SensorParserGroup group1 = JSONUtils.INSTANCE.load(group1BroSquid, SensorParserGroup.class);    this.sensorParserGroupService.save(group1);    TestUtils.assertEventually(() -> Assert.assertEquals(group1, this.sensorParserGroupService.findOne("group1")));    this.mockMvc.perform(get(sensorParserGroupUrl + "/group1").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.*", hasSize(numFields.get()))).andExpect(jsonPath("$.name").value("group1")).andExpect(jsonPath("$.description").value("group1 description")).andExpect(jsonPath("$.sensors[0]").value("squid")).andExpect(jsonPath("$.sensors[1]").value("bro"));    this.mockMvc.perform(get(sensorParserGroupUrl + "/missingGroup").with(httpBasic(user, password))).andExpect(status().isNotFound());}
public void metron_f1832_0() throws Exception
{    SensorParserGroup group1 = JSONUtils.INSTANCE.load(group1BroSquid, SensorParserGroup.class);    this.sensorParserGroupService.save(group1);    TestUtils.assertEventually(() -> Assert.assertEquals(group1, this.sensorParserGroupService.findOne("group1")));    SensorParserGroup group2 = JSONUtils.INSTANCE.load(group2YafJsonMap, SensorParserGroup.class);    this.sensorParserGroupService.save(group2);    TestUtils.assertEventually(() -> Assert.assertEquals(group2, this.sensorParserGroupService.findOne("group2")));    this.mockMvc.perform(get(sensorParserGroupUrl).with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.*", hasSize(2))).andExpect(jsonPath("$.group1.*", hasSize(numFields.get()))).andExpect(jsonPath("$.group1.name").value("group1")).andExpect(jsonPath("$.group1.description").value("group1 description")).andExpect(jsonPath("$.group1.sensors[0]").value("squid")).andExpect(jsonPath("$.group1.sensors[1]").value("bro")).andExpect(jsonPath("$.group2.*", hasSize(numFields.get()))).andExpect(jsonPath("$.group2.name").value("group2")).andExpect(jsonPath("$.group2.description").value("group2 description")).andExpect(jsonPath("$.group2.sensors[0]").value("jsonMap")).andExpect(jsonPath("$.group2.sensors[1]").value("yaf"));}
public void metron_f1833_0() throws Exception
{    SensorParserGroup group1 = JSONUtils.INSTANCE.load(group1BroSquid, SensorParserGroup.class);    this.sensorParserGroupService.save(group1);    TestUtils.assertEventually(() -> Assert.assertEquals(group1, this.sensorParserGroupService.findOne("group1")));    this.mockMvc.perform(post(sensorParserGroupUrl).with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(errorGroup)).andExpect(status().isInternalServerError()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.responseCode").value(500)).andExpect(jsonPath("$.message").value("Sensor bro is already in group group1")).andExpect(jsonPath("$.fullMessage").value("RestException: Sensor bro is already in group group1"));}
public void metron_f1834_0() throws Exception
{    SensorParserGroup group1 = JSONUtils.INSTANCE.load(group1BroSquid, SensorParserGroup.class);    this.sensorParserGroupService.save(group1);    TestUtils.assertEventually(() -> Assert.assertEquals(group1, this.sensorParserGroupService.findOne("group1")));    this.mockMvc.perform(delete(sensorParserGroupUrl + "/group1").with(httpBasic(user, password)).with(csrf())).andExpect(status().isOk());    this.mockMvc.perform(delete(sensorParserGroupUrl + "/missingGroup").with(httpBasic(user, password))).andExpect(status().isNotFound());    {                TestUtils.assertEventually(() -> Assert.assertNull(sensorParserGroupService.findOne("group1")));    }}
public void metron_f1835_0() throws Exception
{    this.globalConfigService.delete();    this.sensorParserConfigService.delete("bro");    this.sensorParserConfigService.delete("snort");    this.sensorParserConfigService.delete("squid");    this.sensorParserConfigService.delete("yaf");    this.sensorParserConfigService.delete("jsonMap");}
public void metron_f1836_0() throws Exception
{    this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).apply(springSecurity()).build();}
public void metron_f1837_0() throws Exception
{    this.mockMvc.perform(post(stellarUrl + "/validate/rules").with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(rulesJson)).andExpect(status().isUnauthorized());    this.mockMvc.perform(post(stellarUrl + "/apply/transformations").with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(sensorParseContext)).andExpect(status().isUnauthorized());    this.mockMvc.perform(get(stellarUrl + "/list")).andExpect(status().isUnauthorized());    this.mockMvc.perform(get(stellarUrl + "/list/functions")).andExpect(status().isUnauthorized());}
public void metron_f1838_0() throws Exception
{    this.mockMvc.perform(post(stellarUrl + "/validate/rules").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(rulesJson)).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.['" + valid + "']").value(Boolean.TRUE)).andExpect(jsonPath("$.['" + invalid + "']").value(Boolean.FALSE));    this.mockMvc.perform(post(stellarUrl + "/apply/transformations").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(sensorParseContext)).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.url").value("https://caseystella.com/blog")).andExpect(jsonPath("$.url_host").value("caseystella.com"));    this.mockMvc.perform(get(stellarUrl + "/list").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$", hasSize(greaterThan(0))));    this.mockMvc.perform(get(stellarUrl + "/list/functions").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$", hasSize(greaterThan(0))));    this.mockMvc.perform(get(stellarUrl + "/list/simple/functions").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$", hasSize(greaterThan(0))));}
public void metron_f1839_0() throws Exception
{    this.metronVersion = this.environment.getProperty("metron.version");    this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).apply(springSecurity()).build();}
public void metron_f1840_0() throws Exception
{    this.mockMvc.perform(get(stormUrl)).andExpect(status().isUnauthorized());    this.mockMvc.perform(get(stormUrl + "/supervisors")).andExpect(status().isUnauthorized());    this.mockMvc.perform(get(stormUrl + "/broTest")).andExpect(status().isUnauthorized());    this.mockMvc.perform(get(stormUrl + "/parser/start/broTest")).andExpect(status().isUnauthorized());    this.mockMvc.perform(get(stormUrl + "/parser/stop/broTest")).andExpect(status().isUnauthorized());    this.mockMvc.perform(get(stormUrl + "/parser/activate/broTest")).andExpect(status().isUnauthorized());    this.mockMvc.perform(get(stormUrl + "/parser/deactivate/broTest")).andExpect(status().isUnauthorized());    this.mockMvc.perform(get("/enrichment")).andExpect(status().isUnauthorized());    this.mockMvc.perform(get(stormUrl + "/enrichment/start")).andExpect(status().isUnauthorized());    this.mockMvc.perform(get(stormUrl + "/enrichment/stop")).andExpect(status().isUnauthorized());    this.mockMvc.perform(get(stormUrl + "/enrichment/activate")).andExpect(status().isUnauthorized());    this.mockMvc.perform(get(stormUrl + "/enrichment/deactivate")).andExpect(status().isUnauthorized());    this.mockMvc.perform(get("/indexing")).andExpect(status().isUnauthorized());    this.mockMvc.perform(get(stormUrl + "/indexing/start")).andExpect(status().isUnauthorized());    this.mockMvc.perform(get(stormUrl + "/indexing/stop")).andExpect(status().isUnauthorized());    this.mockMvc.perform(get(stormUrl + "/indexing/activate")).andExpect(status().isUnauthorized());    this.mockMvc.perform(get(stormUrl + "/indexing/deactivate")).andExpect(status().isUnauthorized());}
public void metron_f1841_0() throws Exception
{    this.mockMvc.perform(get(stormUrl).with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(jsonPath("$", hasSize(0)));    this.mockMvc.perform(get(stormUrl + "/broTest").with(httpBasic(user, password))).andExpect(status().isNotFound());    Map<String, Object> globalConfig = globalConfigService.get();    if (globalConfig == null) {        globalConfig = new HashMap<>();    }    globalConfigService.delete();    sensorParserConfigService.delete("broTest");    this.mockMvc.perform(get(stormUrl + "/parser/stop/broTest?stopNow=true").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(jsonPath("$.status").value("ERROR")).andExpect(jsonPath("$.message").value(TopologyStatusCode.STOP_ERROR.toString()));    this.mockMvc.perform(get(stormUrl + "/parser/activate/broTest").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(jsonPath("$.status").value("ERROR")).andExpect(jsonPath("$.message").value(TopologyStatusCode.TOPOLOGY_NOT_FOUND.name()));    this.mockMvc.perform(get(stormUrl + "/parser/deactivate/broTest").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(jsonPath("$.status").value("ERROR")).andExpect(jsonPath("$.message").value(TopologyStatusCode.TOPOLOGY_NOT_FOUND.name()));    this.mockMvc.perform(get(stormUrl + "/parser/start/broTest").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(jsonPath("$.status").value("ERROR")).andExpect(jsonPath("$.message").value(TopologyStatusCode.GLOBAL_CONFIG_MISSING.name()));    globalConfigService.save(globalConfig);    {        final Map<String, Object> expectedGlobalConfig = globalConfig;                TestUtils.assertEventually(() -> Assert.assertEquals(expectedGlobalConfig, globalConfigService.get()));    }    this.mockMvc.perform(get(stormUrl + "/parser/start/broTest").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(jsonPath("$.status").value("ERROR")).andExpect(jsonPath("$.message").value(TopologyStatusCode.SENSOR_PARSER_CONFIG_MISSING.name()));    SensorParserConfig sensorParserConfig = new SensorParserConfig();    sensorParserConfig.setParserClassName("org.apache.metron.parsers.bro.BasicBroParser");    sensorParserConfig.setSensorTopic("broTest");    sensorParserConfigService.save("broTest", sensorParserConfig);    {        final SensorParserConfig expectedSensorParserConfig = sensorParserConfig;                TestUtils.assertEventually(() -> Assert.assertEquals(expectedSensorParserConfig, sensorParserConfigService.findOne("broTest")));    }    this.mockMvc.perform(get(stormUrl + "/parser/start/broTest").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(jsonPath("$.status").value("SUCCESS")).andExpect(jsonPath("$.message").value(TopologyStatusCode.STARTED.name()));    this.mockMvc.perform(get(stormUrl + "/supervisors").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.supervisors[0]").exists()).andExpect(jsonPath("$.supervisors[0].id").exists()).andExpect(jsonPath("$.supervisors[0].host").exists()).andExpect(jsonPath("$.supervisors[0].uptime").exists()).andExpect(jsonPath("$.supervisors[0].slotsTotal").exists()).andExpect(jsonPath("$.supervisors[0].slotsUsed").exists());    this.mockMvc.perform(get(stormUrl + "/broTest").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.name").value("broTest")).andExpect(jsonPath("$.id", containsString("broTest"))).andExpect(jsonPath("$.status").value("ACTIVE")).andExpect(jsonPath("$.latency").exists()).andExpect(jsonPath("$.throughput").exists()).andExpect(jsonPath("$.emitted").exists()).andExpect(jsonPath("$.acked").exists());    this.mockMvc.perform(get(stormUrl).with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$[?(@.name == 'broTest' && @.status == 'ACTIVE')]").exists());    this.mockMvc.perform(get(stormUrl + "/parser/stop/broTest?stopNow=true").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(jsonPath("$.status").value("SUCCESS")).andExpect(jsonPath("$.message").value(TopologyStatusCode.STOPPED.name()));    this.mockMvc.perform(get(stormUrl + "/enrichment").with(httpBasic(user, password))).andExpect(status().isNotFound());    this.mockMvc.perform(get(stormUrl + "/enrichment/activate").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(jsonPath("$.status").value("ERROR")).andExpect(jsonPath("$.message").value(TopologyStatusCode.TOPOLOGY_NOT_FOUND.name()));    this.mockMvc.perform(get(stormUrl + "/enrichment/deactivate").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(jsonPath("$.status").value("ERROR")).andExpect(jsonPath("$.message").value(TopologyStatusCode.TOPOLOGY_NOT_FOUND.name()));    this.mockMvc.perform(get(stormUrl + "/enrichment/stop?stopNow=true").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(jsonPath("$.status").value("ERROR")).andExpect(jsonPath("$.message").value(TopologyStatusCode.STOP_ERROR.toString()));    this.mockMvc.perform(get(stormUrl + "/enrichment/start").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(jsonPath("$.status").value("SUCCESS")).andExpect(jsonPath("$.message").value(TopologyStatusCode.STARTED.toString()));    this.mockMvc.perform(get(stormUrl + "/enrichment/deactivate").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(jsonPath("$.status").value("SUCCESS")).andExpect(jsonPath("$.message").value(TopologyStatusCode.INACTIVE.name()));    this.mockMvc.perform(get(stormUrl + "/enrichment/deactivate").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(jsonPath("$.status").value("SUCCESS")).andExpect(jsonPath("$.message").value(TopologyStatusCode.INACTIVE.name()));    this.mockMvc.perform(get(stormUrl + "/enrichment/activate").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(jsonPath("$.status").value("SUCCESS")).andExpect(jsonPath("$.message").value(TopologyStatusCode.ACTIVE.name()));    this.mockMvc.perform(get(stormUrl + "/enrichment").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.name").value("enrichment")).andExpect(jsonPath("$.id", containsString("enrichment"))).andExpect(jsonPath("$.status").value("ACTIVE")).andExpect(jsonPath("$.latency").exists()).andExpect(jsonPath("$.throughput").exists()).andExpect(jsonPath("$.emitted").exists()).andExpect(jsonPath("$.acked").exists());    this.mockMvc.perform(get(stormUrl).with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$[?(@.name == 'enrichment' && @.status == 'ACTIVE')]").exists());    this.mockMvc.perform(get(stormUrl + "/enrichment/stop").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(jsonPath("$.status").value("SUCCESS")).andExpect(jsonPath("$.message").value(TopologyStatusCode.STOPPED.name()));    for (String type : ImmutableList.of("randomaccess", "batch")) {        this.mockMvc.perform(get(stormUrl + "/indexing/" + type).with(httpBasic(user, password))).andExpect(status().isNotFound());        this.mockMvc.perform(get(stormUrl + "/indexing/" + type + "/activate").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(jsonPath("$.status").value("ERROR")).andExpect(jsonPath("$.message").value(TopologyStatusCode.TOPOLOGY_NOT_FOUND.name()));        this.mockMvc.perform(get(stormUrl + "/indexing/" + type + "/deactivate").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(jsonPath("$.status").value("ERROR")).andExpect(jsonPath("$.message").value(TopologyStatusCode.TOPOLOGY_NOT_FOUND.name()));        this.mockMvc.perform(get(stormUrl + "/indexing/" + type + "/stop?stopNow=true").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(jsonPath("$.status").value("ERROR")).andExpect(jsonPath("$.message").value(TopologyStatusCode.STOP_ERROR.toString()));        this.mockMvc.perform(get(stormUrl + "/indexing/" + type + "/start").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(jsonPath("$.status").value("SUCCESS")).andExpect(jsonPath("$.message").value(TopologyStatusCode.STARTED.toString()));        ResultActions actions = this.mockMvc.perform(get(stormUrl + "/indexing/" + type + "/deactivate").with(httpBasic(user, password)));        actions.andExpect(status().isOk()).andExpect(jsonPath("$.status").value("SUCCESS")).andExpect(jsonPath("$.message").value(TopologyStatusCode.INACTIVE.name()));        this.mockMvc.perform(get(stormUrl + "/indexing/" + type + "/activate").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(jsonPath("$.status").value("SUCCESS")).andExpect(jsonPath("$.message").value(TopologyStatusCode.ACTIVE.name()));        String topologyName = type.equals("randomaccess") ? MetronRestConstants.RANDOM_ACCESS_INDEXING_TOPOLOGY_NAME : MetronRestConstants.BATCH_INDEXING_TOPOLOGY_NAME;        this.mockMvc.perform(get(stormUrl + "/indexing/" + type).with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.name").value(topologyName)).andExpect(jsonPath("$.id", containsString("indexing"))).andExpect(jsonPath("$.status").value("ACTIVE")).andExpect(jsonPath("$.latency").exists()).andExpect(jsonPath("$.throughput").exists()).andExpect(jsonPath("$.emitted").exists()).andExpect(jsonPath("$.acked").exists());        this.mockMvc.perform(get(stormUrl).with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$[?(@.name == '" + topologyName + "' && @.status == 'ACTIVE')]").exists());        this.mockMvc.perform(get(stormUrl + "/indexing/" + type + "/stop").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(jsonPath("$.status").value("SUCCESS")).andExpect(jsonPath("$.message").value(TopologyStatusCode.STOPPED.name()));    }    this.mockMvc.perform(get(stormUrl + "/client/status").with(httpBasic(user, password))).andExpect(status().isOk()).andExpect(jsonPath("$.stormClientVersionInstalled").value("1.0.1")).andExpect(jsonPath("$.parserScriptPath").value("/usr/metron/" + metronVersion + "/bin/start_parser_topology.sh")).andExpect(jsonPath("$.enrichmentScriptPath").value("/usr/metron/" + metronVersion + "/bin/start_enrichment_topology.sh")).andExpect(jsonPath("$.randomAccessIndexingScriptPath").value("/usr/metron/" + metronVersion + "/bin/start_elasticsearch_topology.sh")).andExpect(jsonPath("$.batchIndexingScriptPath").value("/usr/metron/" + metronVersion + "/bin/start_hdfs_topology.sh"));    globalConfigService.delete();    sensorParserConfigService.delete("broTest");}
public void metron_f1842_0() throws Exception
{    this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).apply(springSecurity()).build();    ImmutableMap<String, String> testData = ImmutableMap.of("bro_index_2017.01.01.01", SearchIntegrationTest.broData, "snort_index_2017.01.01.01", SearchIntegrationTest.snortData, metaAlertIndex, MetaAlertControllerIntegrationTest.metaAlertData);    loadTestData(testData);}
public void metron_f1843_0() throws Exception
{    String guid = "bro_2";        MockHttpServletRequestBuilder findOneRequest = post(searchUrl + "/findOne").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(findMessage0);        MockHttpServletRequestBuilder patchRequest = patch(updateUrl + "/patch").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(patch);        this.mockMvc.perform(findOneRequest).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.source:type").value("bro")).andExpect(jsonPath("$.guid").value(guid)).andExpect(jsonPath("$.project").doesNotExist()).andExpect(jsonPath("$.timestamp").value(2));        MockHTable table = (MockHTable) MockHBaseTableProvider.getFromCache(TABLE);    Assert.assertEquals(0, table.size());        this.mockMvc.perform(patchRequest).andExpect(status().isOk());        this.mockMvc.perform(findOneRequest).andExpect(status().isOk()).andExpect(content().contentType(MediaType.parseMediaType("application/json;charset=UTF-8"))).andExpect(jsonPath("$.source:type").value("bro")).andExpect(jsonPath("$.guid").value(guid)).andExpect(jsonPath("$.project").value("metron")).andExpect(jsonPath("$.timestamp").value(2));        Assert.assertEquals(1, table.size());    {                Get g = new Get(new HBaseDao.Key(guid, "bro").toBytes());        Result r = table.get(g);        NavigableMap<byte[], byte[]> columns = r.getFamilyMap(CF.getBytes(StandardCharsets.UTF_8));        Assert.assertEquals(1, columns.size());    }}
public void metron_f1844_0() throws Exception
{    CommentAddRemoveRequest commentAddRemoveRequest = new CommentAddRemoveRequest();    commentAddRemoveRequest.setGuid("bro_1");    commentAddRemoveRequest.setSensorType("bro");    commentAddRemoveRequest.setComment("test_comment");    commentAddRemoveRequest.setUsername("test_username");    commentAddRemoveRequest.setTimestamp(0L);    updateService.addComment(commentAddRemoveRequest);    ResultActions result = this.mockMvc.perform(post(updateUrl + "/add/comment").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(addComment));    result.andExpect(status().isOk());}
public void metron_f1845_0() throws Exception
{    CommentAddRemoveRequest commentAddRemoveRequest = new CommentAddRemoveRequest();    commentAddRemoveRequest.setGuid("bro_1");    commentAddRemoveRequest.setSensorType("bro");    commentAddRemoveRequest.setComment("test_comment");    commentAddRemoveRequest.setUsername("test_username");    commentAddRemoveRequest.setTimestamp(0L);    updateService.removeComment(commentAddRemoveRequest);    ResultActions result = this.mockMvc.perform(post(updateUrl + "/remove/comment").with(httpBasic(user, password)).with(csrf()).contentType(MediaType.parseMediaType("application/json;charset=UTF-8")).content(removeComment));    result.andExpect(status().isOk());}
public void metron_f1846_0() throws Exception
{    this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).apply(springSecurity()).build();}
public void metron_f1847_0() throws Exception
{    this.mockMvc.perform(get(userUrl)).andExpect(status().isUnauthorized());}
public void metron_f1848_0() throws Exception
{    this.mockMvc.perform(get(userUrl).with(httpBasic(user1, password))).andExpect(status().isOk()).andExpect(content().string(user1));}
public void metron_f1849_0(String brokerUrl)
{    this.brokerUrl = brokerUrl;}
public void metron_f1850_0(Integer num)
{    this.num = num;}
public void metron_f1851_0(String selectedSensorType)
{    this.selectedSensorType = selectedSensorType;}
public void metron_f1852_0(Integer delay)
{    this.delay = delay;}
public static void metron_f1853_0(String[] args) throws org.apache.commons.cli.ParseException, IOException, ParseException
{    CommandLineParser parser = new PosixParser();    CommandLine cli = parser.parse(getOptions(), args);    Integer num = Integer.parseInt(cli.getOptionValue("n", "-1"));    String selectedSensorType = cli.getOptionValue("s");    Integer delay = Integer.parseInt(cli.getOptionValue("d", "1000"));    String path = cli.getOptionValue("p");    if (selectedSensorType == null || path == null) {        HelpFormatter formatter = new HelpFormatter();        formatter.printHelp("sample_data_generator", getOptions());    } else {        SampleDataGenerator sampleDataGenerator = new SampleDataGenerator();        sampleDataGenerator.setNum(num);        sampleDataGenerator.setSelectedSensorType(selectedSensorType);        sampleDataGenerator.setDelay(delay);        sampleDataGenerator.generateSampleData(path);    }}
private static Options metron_f1854_0()
{    Options options = new Options();    options.addOption("b", "brokerUrl", true, "Kafka Broker Url");    options.addOption("n", "num", false, "Number of messages to emit");    options.addOption("s", "sensorType", true, "Emit messages to this topic");    options.addOption("d", "delay", false, "Number of milliseconds to wait between each message.  Defaults to 1 second");    options.addOption("p", "path", true, "Local path to data file");    return options;}
public void metron_f1855_0(String path) throws IOException, ParseException
{    loadData(path);    startClients();    try {        emitData(num, selectedSensorType, delay);    } finally {        stopClients();    }}
private void metron_f1856_0(String sampleDataPath) throws IOException, ParseException
{    sampleData.put(selectedSensorType, FileUtils.readLines(new File(sampleDataPath)));    indexes.put(selectedSensorType, 0);}
private void metron_f1857_0(int num, String selectedSensorType, int delay)
{    int count = 0;    boolean continueEmitting = false;    do {        for (String sensorType : sampleData.keySet()) {            if (selectedSensorType == null || selectedSensorType.equals(sensorType)) {                List<String> sensorData = sampleData.get(sensorType);                int index = indexes.get(sensorType);                String message = sensorData.get(index++);                emitSensorData(sensorType, message, delay);                if (num != -1 && ++count >= num) {                    continueEmitting = false;                    break;                }                continueEmitting = true;                if (index == sensorData.size()) {                    index = 0;                }                indexes.put(sensorType, index);            }        }    } while (continueEmitting);}
private void metron_f1858_1(String sensorType, String message, int delay)
{    try {        Thread.sleep(delay);    } catch (InterruptedException e) {        e.printStackTrace();    }        emitToKafka(sensorType, message);}
private void metron_f1859_0()
{    startKafka();}
private void metron_f1860_0()
{    Map<String, Object> producerConfig = new HashMap<>();    producerConfig.put("bootstrap.servers", brokerUrl);    producerConfig.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");    producerConfig.put("value.serializer", "org.apache.kafka.common.serialization.StringSerializer");    kafkaProducer = new KafkaProducer<>(producerConfig);}
private void metron_f1861_0()
{    stopKafka();}
private void metron_f1862_1()
{        kafkaProducer.close();}
private void metron_f1863_0(String topic, String message)
{    kafkaProducer.send(new ProducerRecord<String, String>(topic, message));}
public void metron_f1864_0()
{    mockStatic(SpringApplication.class);    String[] args = { "arg1", "arg2" };    MetronRestApplication.main(args);    verifyStatic(times(1));    SpringApplication.run(MetronRestApplication.class, args);}
public Statusable<Path> metron_f1865_0(Finalizer<Path> finalizer, Map<String, Object> configuration) throws JobException
{    when(statusable.getConfiguration()).thenReturn(new HashMap<>(configuration));    this.basePath = PcapOptions.BASE_PATH.get(configuration, String.class);    this.baseInterrimResultPath = PcapOptions.BASE_INTERIM_RESULT_PATH.get(configuration, String.class);    this.finalOutputPath = PcapOptions.FINAL_OUTPUT_PATH.get(configuration, String.class);    this.startTimeNs = PcapOptions.START_TIME_MS.get(configuration, Long.class) * 1000000;    this.endTimeNs = PcapOptions.END_TIME_MS.get(configuration, Long.class) * 1000000;    this.numReducers = PcapOptions.NUM_REDUCERS.get(configuration, Integer.class);    Object fields = PcapOptions.FIELDS.get(configuration, Object.class);    if (fields instanceof Map) {        this.fixedFields = (Map<String, String>) fields;    } else {        this.query = (String) fields;    }    this.filterImpl = PcapOptions.FILTER_IMPL.get(configuration, PcapFilterConfigurator.class);    this.recPerFile = PcapOptions.NUM_RECORDS_PER_FILE.get(configuration, Integer.class);    this.yarnQueue = PcapOptions.HADOOP_CONF.get(configuration, Configuration.class).get(MRJobConfig.QUEUE_NAME);    this.finalizerThreadpoolSize = PcapOptions.FINALIZER_THREADPOOL_SIZE.get(configuration, String.class);    return statusable;}
public JobStatus metron_f1866_0() throws JobException
{    return statusable.getStatus();}
public Pageable<Path> metron_f1867_0() throws JobException, InterruptedException
{    return statusable.get();}
public void metron_f1868_0(JobStatus jobStatus) throws JobException
{    when(statusable.getStatus()).thenReturn(jobStatus);}
public void metron_f1869_0(Pageable<Path> pageable) throws JobException, InterruptedException
{    when(statusable.get()).thenReturn(pageable);}
public void metron_f1870_0(boolean isDone)
{    when(statusable.isDone()).thenReturn(isDone);}
public String metron_f1871_0()
{    return basePath;}
public void metron_f1872_0(String basePath)
{    this.basePath = basePath;}
public String metron_f1873_0()
{    return baseInterrimResultPath;}
public void metron_f1874_0(String baseInterrimResultPath)
{    this.baseInterrimResultPath = baseInterrimResultPath;}
public String metron_f1875_0()
{    return finalOutputPath;}
public void metron_f1876_0(String finalOutputPath)
{    this.finalOutputPath = finalOutputPath;}
public long metron_f1877_0()
{    return startTimeNs;}
public long metron_f1878_0()
{    return endTimeNs;}
public int metron_f1879_0()
{    return numReducers;}
public Map<String, String> metron_f1880_0()
{    return fixedFields;}
public String metron_f1881_0()
{    return query;}
public PcapFilterConfigurator metron_f1882_0()
{    return filterImpl;}
public int metron_f1883_0()
{    return recPerFile;}
public String metron_f1884_0()
{    return yarnQueue;}
public String metron_f1885_0()
{    return finalizerThreadpoolSize;}
protected PcapJob metron_f1886_0()
{    return mockPcapJob;}
public void metron_f1887_0(MockPcapJob mockPcapJob)
{    this.mockPcapJob = mockPcapJob;}
public InputStream metron_f1888_0(String scriptPath, FileSystem fileSystem, Path pcapPath) throws IOException
{    return new ByteArrayInputStream(pdmlXml.getBytes(StandardCharsets.UTF_8));}
public Set<String> metron_f1889_0()
{    return parsersStatus.keySet();}
public TopologyStatusCode metron_f1890_0(String name)
{    TopologyStatusCode parserStatus = parsersStatus.get(name);    if (parserStatus == null) {        return TopologyStatusCode.TOPOLOGY_NOT_FOUND;    } else {        return parserStatus;    }}
public int metron_f1891_0(String name) throws RestException
{    TopologyStatusCode parserStatus = parsersStatus.get(name);    if (parserStatus == null || parserStatus == TopologyStatusCode.TOPOLOGY_NOT_FOUND) {        parsersStatus.put(name, TopologyStatusCode.ACTIVE);        return 0;    } else {        return 1;    }}
public int metron_f1892_0(String name, boolean stopNow) throws RestException
{    TopologyStatusCode parserStatus = parsersStatus.get(name);    if (parserStatus == TopologyStatusCode.ACTIVE) {        parsersStatus.put(name, TopologyStatusCode.TOPOLOGY_NOT_FOUND);        return 0;    } else {        return 1;    }}
public int metron_f1893_0(String name)
{    TopologyStatusCode parserStatus = parsersStatus.get(name);    if (parserStatus == TopologyStatusCode.INACTIVE || parserStatus == TopologyStatusCode.ACTIVE) {        parsersStatus.put(name, TopologyStatusCode.ACTIVE);        return 0;    } else {        return 1;    }}
public int metron_f1894_0(String name)
{    TopologyStatusCode parserStatus = parsersStatus.get(name);    if (parserStatus == TopologyStatusCode.INACTIVE || parserStatus == TopologyStatusCode.ACTIVE) {        parsersStatus.put(name, TopologyStatusCode.INACTIVE);        return 0;    } else {        return 1;    }}
public TopologyStatusCode metron_f1895_0()
{    return enrichmentStatus;}
public int metron_f1896_0() throws RestException
{    if (enrichmentStatus == TopologyStatusCode.TOPOLOGY_NOT_FOUND) {        enrichmentStatus = TopologyStatusCode.ACTIVE;        return 0;    } else {        return 1;    }}
public int metron_f1897_0(boolean stopNow) throws RestException
{    if (enrichmentStatus == TopologyStatusCode.ACTIVE) {        enrichmentStatus = TopologyStatusCode.TOPOLOGY_NOT_FOUND;        return 0;    } else {        return 1;    }}
public int metron_f1898_0()
{    if (enrichmentStatus == TopologyStatusCode.INACTIVE || enrichmentStatus == TopologyStatusCode.ACTIVE) {        enrichmentStatus = TopologyStatusCode.ACTIVE;        return 0;    } else {        return 1;    }}
public int metron_f1899_0()
{    if (enrichmentStatus == TopologyStatusCode.INACTIVE || enrichmentStatus == TopologyStatusCode.ACTIVE) {        enrichmentStatus = TopologyStatusCode.INACTIVE;        return 0;    } else {        return 1;    }}
public TopologyStatusCode metron_f1900_0(String name)
{    return name.equals(MetronRestConstants.BATCH_INDEXING_TOPOLOGY_NAME) ? batchIndexingStatus : randomAccessIndexingStatus;}
public int metron_f1901_0(String scriptPath) throws RestException
{    if (scriptPath.equals(MetronRestConstants.BATCH_INDEXING_SCRIPT_PATH_SPRING_PROPERTY)) {        if (batchIndexingStatus == TopologyStatusCode.TOPOLOGY_NOT_FOUND) {            batchIndexingStatus = TopologyStatusCode.ACTIVE;            return 0;        } else {            return 1;        }    } else {        if (randomAccessIndexingStatus == TopologyStatusCode.TOPOLOGY_NOT_FOUND) {            randomAccessIndexingStatus = TopologyStatusCode.ACTIVE;            return 0;        } else {            return 1;        }    }}
public int metron_f1902_0(String name, boolean stopNow) throws RestException
{    if (name.equals(MetronRestConstants.BATCH_INDEXING_TOPOLOGY_NAME)) {        if (batchIndexingStatus == TopologyStatusCode.ACTIVE) {            batchIndexingStatus = TopologyStatusCode.TOPOLOGY_NOT_FOUND;            return 0;        } else {            return 1;        }    } else {        if (randomAccessIndexingStatus == TopologyStatusCode.ACTIVE) {            randomAccessIndexingStatus = TopologyStatusCode.TOPOLOGY_NOT_FOUND;            return 0;        } else {            return 1;        }    }}
public int metron_f1903_0(String name)
{    if (name.equals(MetronRestConstants.BATCH_INDEXING_TOPOLOGY_NAME)) {        if (batchIndexingStatus == TopologyStatusCode.INACTIVE || batchIndexingStatus == TopologyStatusCode.ACTIVE) {            batchIndexingStatus = TopologyStatusCode.ACTIVE;            return 0;        } else {            return 1;        }    } else {        if (randomAccessIndexingStatus == TopologyStatusCode.INACTIVE || randomAccessIndexingStatus == TopologyStatusCode.ACTIVE) {            randomAccessIndexingStatus = TopologyStatusCode.ACTIVE;            return 0;        } else {            return 1;        }    }}
public int metron_f1904_0(String name)
{    if (name.equals(MetronRestConstants.BATCH_INDEXING_TOPOLOGY_NAME)) {        if (batchIndexingStatus == TopologyStatusCode.INACTIVE || batchIndexingStatus == TopologyStatusCode.ACTIVE) {            batchIndexingStatus = TopologyStatusCode.INACTIVE;            return 0;        } else {            return 1;        }    } else {        if (randomAccessIndexingStatus == TopologyStatusCode.INACTIVE || randomAccessIndexingStatus == TopologyStatusCode.ACTIVE) {            randomAccessIndexingStatus = TopologyStatusCode.INACTIVE;            return 0;        } else {            return 1;        }    }}
protected String metron_f1905_0() throws RestException
{    return "1.0.1";}
public void metron_f1906_0(MockStormCLIClientWrapper mockStormCLIClientWrapper)
{    this.mockStormCLIClientWrapper = mockStormCLIClientWrapper;}
public Object metron_f1907_0(String url, Class responseType, Object... urlVariables) throws RestClientException
{    Object response = null;    if (url.equals(getStormUiProperty() + MetronRestConstants.TOPOLOGY_SUMMARY_URL)) {        TopologySummary topologySummary = new TopologySummary();        List<TopologyStatus> topologyStatusList = new ArrayList<>();        for (String name : mockStormCLIClientWrapper.getParserTopologyNames()) {            topologyStatusList.add(getTopologyStatus(name));        }        TopologyStatusCode enrichmentStatus = mockStormCLIClientWrapper.getEnrichmentStatus();        if (enrichmentStatus != TopologyStatusCode.TOPOLOGY_NOT_FOUND) {            topologyStatusList.add(getTopologyStatus("enrichment"));        }        TopologyStatusCode batchIndexingStatus = mockStormCLIClientWrapper.getIndexingStatus(MetronRestConstants.BATCH_INDEXING_TOPOLOGY_NAME);        if (batchIndexingStatus != TopologyStatusCode.TOPOLOGY_NOT_FOUND) {            topologyStatusList.add(getTopologyStatus(MetronRestConstants.BATCH_INDEXING_TOPOLOGY_NAME));        }        TopologyStatusCode randomIndexingStatus = mockStormCLIClientWrapper.getIndexingStatus(MetronRestConstants.RANDOM_ACCESS_INDEXING_TOPOLOGY_NAME);        if (randomIndexingStatus != TopologyStatusCode.TOPOLOGY_NOT_FOUND) {            topologyStatusList.add(getTopologyStatus(MetronRestConstants.RANDOM_ACCESS_INDEXING_TOPOLOGY_NAME));        }        topologySummary.setTopologies(topologyStatusList.toArray(new TopologyStatus[topologyStatusList.size()]));        response = topologySummary;    } else if (url.startsWith(getStormUiProperty() + MetronRestConstants.TOPOLOGY_URL + "/")) {        String name = url.substring(url.lastIndexOf('/') + 1, url.length()).replaceFirst("-id", "");        response = getTopologyStatus(name);    } else if (url.startsWith("http://" + environment.getProperty(MetronRestConstants.STORM_UI_SPRING_PROPERTY) + MetronRestConstants.SUPERVISOR_SUMMARY_URL)) {        SupervisorSummary supervisorSummary = new SupervisorSummary();        List<SupervisorStatus> supervisorStatusList = new ArrayList<>();        SupervisorStatus status = new SupervisorStatus("sup1", "localhost", "1m 2s", 1, 1);        supervisorStatusList.add(status);        supervisorSummary.setSupervisors(supervisorStatusList.toArray(new SupervisorStatus[1]));        response = supervisorSummary;    }    return response;}
private TopologyStatus metron_f1908_0(String name)
{    TopologyStatus topologyStatus = new TopologyStatus();    topologyStatus.setName(name);    topologyStatus.setId(name + "-id");    if ("enrichment".equals(name)) {        topologyStatus.setStatus(mockStormCLIClientWrapper.getEnrichmentStatus());    } else if (name.contains("indexing")) {        topologyStatus.setStatus(mockStormCLIClientWrapper.getIndexingStatus(name));    } else {        topologyStatus.setStatus(mockStormCLIClientWrapper.getParserStatus(name));    }    return topologyStatus;}
public Object metron_f1909_0(String url, Object request, Class responseType, Object... uriVariables) throws RestClientException
{    Map<String, String> result = new HashMap<>();    String[] urlParts = url.split("/");    String name = urlParts[urlParts.length - 2].replaceFirst("-id", "");    String action = urlParts[urlParts.length - 1];    int returnCode = 0;    if (action.equals("activate")) {        if (name.equals("enrichment")) {            returnCode = mockStormCLIClientWrapper.activateEnrichmentTopology();        } else if (name.contains("indexing")) {            returnCode = mockStormCLIClientWrapper.activateIndexingTopology(name);        } else {            returnCode = mockStormCLIClientWrapper.activateParserTopology(name);        }    } else if (action.equals("deactivate")) {        if (name.equals("enrichment")) {            returnCode = mockStormCLIClientWrapper.deactivateEnrichmentTopology();        } else if (name.contains("indexing")) {            returnCode = mockStormCLIClientWrapper.deactivateIndexingTopology(name);        } else {            returnCode = mockStormCLIClientWrapper.deactivateParserTopology(name);        }    }    if (returnCode == 0) {        result.put("status", "success");    } else {        result.put("status", "error");    }    return result;}
protected String metron_f1910_0()
{    String baseValue = environment.getProperty(MetronRestConstants.STORM_UI_SPRING_PROPERTY);    if (!(baseValue.contains("://"))) {        return "http://" + baseValue;    }    return baseValue;}
public void metron_f1911_0() throws Exception
{    kafkaService = mock(KafkaService.class);    environment = mock(Environment.class);    userSettingsClient = mock(UserSettingsClient.class);    alertsUIService = new AlertsUIServiceImpl(kafkaService, environment, userSettingsClient);        clock = new FakeClock();    clock.elapseSeconds(1000);    alertsUIService.setClock(clock);        Authentication authentication = Mockito.mock(Authentication.class);    UserDetails userDetails = Mockito.mock(UserDetails.class);    when(authentication.getPrincipal()).thenReturn(userDetails);    when(userDetails.getUsername()).thenReturn(user1);    SecurityContextHolder.getContext().setAuthentication(authentication);}
public void metron_f1912_0() throws Exception
{    final String field = "field";    final String value1 = "value1";    final String value2 = "value2";        final String escalationTopic = "escalation";    when(environment.getProperty(MetronRestConstants.KAFKA_TOPICS_ESCALATION_PROPERTY)).thenReturn(escalationTopic);        final Map<String, Object> alert1 = mapOf(field, value1);    String escalationMessage1 = escalationMessage(field, value1, user1, clock.currentTimeMillis());    final Map<String, Object> alert2 = mapOf(field, value2);    String escalationMessage2 = escalationMessage(field, value2, user1, clock.currentTimeMillis());        alertsUIService.escalateAlerts(Arrays.asList(alert1, alert2));    verify(kafkaService).produceMessage(escalationTopic, escalationMessage1);    verify(kafkaService).produceMessage(escalationTopic, escalationMessage2);    verifyZeroInteractions(kafkaService);}
public void metron_f1913_0() throws Exception
{    when(userSettingsClient.findOne(user1, AlertsUIServiceImpl.ALERT_USER_SETTING_TYPE)).thenReturn(Optional.of(user1AlertUserSettings));    AlertsUIUserSettings expectedAlertsUIUserSettings = new AlertsUIUserSettings();    expectedAlertsUIUserSettings.setTableColumns(Collections.singletonList("user1_field"));    assertEquals(expectedAlertsUIUserSettings, alertsUIService.getAlertsUIUserSettings().get());    verify(userSettingsClient, times(1)).findOne(user1, AlertsUIServiceImpl.ALERT_USER_SETTING_TYPE);    verifyNoMoreInteractions(userSettingsClient);}
public void metron_f1914_0() throws Exception
{    AlertsUIUserSettings alertsProfile1 = new AlertsUIUserSettings();    alertsProfile1.setUser(user1);    AlertsUIUserSettings alertsProfile2 = new AlertsUIUserSettings();    alertsProfile2.setUser(user1);    when(userSettingsClient.findAll(AlertsUIServiceImpl.ALERT_USER_SETTING_TYPE)).thenReturn(new HashMap<String, Optional<String>>() {        {            put(user1, Optional.of(user1AlertUserSettings));            put(user2, Optional.of(user2AlertUserSettings));        }    });    AlertsUIUserSettings expectedAlertsUIUserSettings1 = new AlertsUIUserSettings();    expectedAlertsUIUserSettings1.setTableColumns(Collections.singletonList("user1_field"));    AlertsUIUserSettings expectedAlertsUIUserSettings2 = new AlertsUIUserSettings();    expectedAlertsUIUserSettings2.setTableColumns(Collections.singletonList("user2_field"));    Map<String, AlertsUIUserSettings> actualAlertsProfiles = alertsUIService.findAllAlertsUIUserSettings();    assertEquals(2, actualAlertsProfiles.size());    assertEquals(expectedAlertsUIUserSettings1, actualAlertsProfiles.get(user1));    assertEquals(expectedAlertsUIUserSettings2, actualAlertsProfiles.get(user2));    verify(userSettingsClient, times(1)).findAll(AlertsUIServiceImpl.ALERT_USER_SETTING_TYPE);    verifyNoMoreInteractions(userSettingsClient);}
public void metron_f1915_0() throws Exception
{    AlertsUIUserSettings alertsUIUserSettings = new AlertsUIUserSettings();    alertsUIUserSettings.setTableColumns(Collections.singletonList("user1_field"));    alertsUIService.saveAlertsUIUserSettings(alertsUIUserSettings);    String expectedAlertUserSettings = _mapper.get().writeValueAsString(alertsUIUserSettings);    verify(userSettingsClient, times(1)).save(user1, AlertsUIServiceImpl.ALERT_USER_SETTING_TYPE, expectedAlertUserSettings);    verifyNoMoreInteractions(userSettingsClient);}
public void metron_f1916_0() throws Exception
{    assertTrue(alertsUIService.deleteAlertsUIUserSettings(user1));    doThrow(new IOException()).when(userSettingsClient).delete(user1, AlertsUIServiceImpl.ALERT_USER_SETTING_TYPE);    assertFalse(alertsUIService.deleteAlertsUIUserSettings(user1));    verify(userSettingsClient, times(2)).delete(user1, AlertsUIServiceImpl.ALERT_USER_SETTING_TYPE);    verifyNoMoreInteractions(userSettingsClient);}
private String metron_f1917_0(String field, String value, String user, Long timestamp)
{    return String.format("{\"%s\":\"%s\",\"%s\":\"%s\",\"%s\":%d}", field, value, MetronRestConstants.METRON_ESCALATION_USER_FIELD, user, MetronRestConstants.METRON_ESCALATION_TIMESTAMP_FIELD, timestamp);}
private Map<String, Object> metron_f1918_0(String key, Object value)
{    Map<String, Object> map = new HashMap<>();    map.put(key, value);    return map;}
public void metron_f1919_0()
{    MockitoAnnotations.initMocks(this);    cachedStormStatusService = new CachedStormStatusServiceImpl(stormService, 150, 30);}
public void metron_f1920_0()
{    SupervisorStatus supervisorStatus1 = new SupervisorStatus();    SupervisorStatus supervisorStatus2 = new SupervisorStatus();    SupervisorSummary supervisorSummary = new SupervisorSummary(new SupervisorStatus[] { supervisorStatus1, supervisorStatus2 });    when(stormService.getSupervisorSummary()).thenReturn(supervisorSummary);        for (int i = 0; i < 100; i++) {        cachedStormStatusService.getSupervisorSummary();    }    SupervisorSummary summary = cachedStormStatusService.getSupervisorSummary();    assertThat("Number of supervisors did not match.", summary.getSupervisors().length, CoreMatchers.equalTo(2));    verify(stormService, times(1)).getSupervisorSummary();    cachedStormStatusService.reset();    summary = cachedStormStatusService.getSupervisorSummary();    assertThat("Number of supervisors did not match.", summary.getSupervisors().length, CoreMatchers.equalTo(2));    verify(stormService, times(2)).getSupervisorSummary();}
public void metron_f1921_0()
{    TopologyStatus topologyStatus1 = new TopologyStatus();    TopologyStatus topologyStatus2 = new TopologyStatus();    TopologySummary topologySummary = new TopologySummary(new TopologyStatus[] { topologyStatus1, topologyStatus2 });    when(stormService.getTopologySummary()).thenReturn(topologySummary);        for (int i = 0; i < 100; i++) {        cachedStormStatusService.getTopologySummary();    }    TopologySummary summary = cachedStormStatusService.getTopologySummary();    assertThat("Number of topologies did not match.", summary.getTopologies().length, CoreMatchers.equalTo(2));    verify(stormService, times(1)).getTopologySummary();    cachedStormStatusService.reset();    summary = cachedStormStatusService.getTopologySummary();    assertThat("Number of topologies did not match.", summary.getTopologies().length, CoreMatchers.equalTo(2));    verify(stormService, times(2)).getTopologySummary();}
public void metron_f1922_0()
{    String topologyName1 = "topology-1";    String topologyName2 = "topology-2";    TopologyStatus topologyStatus1 = new TopologyStatus();    topologyStatus1.setName(topologyName1);    TopologyStatus topologyStatus2 = new TopologyStatus();    topologyStatus2.setName(topologyName2);    when(stormService.getTopologyStatus(topologyName1)).thenReturn(topologyStatus1);    when(stormService.getTopologyStatus(topologyName2)).thenReturn(topologyStatus2);        for (int i = 0; i < 100; i++) {        cachedStormStatusService.getTopologyStatus(topologyName1);        cachedStormStatusService.getTopologyStatus(topologyName2);    }    TopologyStatus status1 = cachedStormStatusService.getTopologyStatus(topologyName1);    TopologyStatus status2 = cachedStormStatusService.getTopologyStatus(topologyName2);    assertThat("Name did not match for topology 1.", status1.getName(), CoreMatchers.equalTo(topologyName1));    assertThat("Name did not match for topology 2.", status2.getName(), CoreMatchers.equalTo(topologyName2));    verify(stormService, times(1)).getTopologyStatus(topologyName1);    verify(stormService, times(1)).getTopologyStatus(topologyName2);    cachedStormStatusService.reset();    cachedStormStatusService.getTopologyStatus(topologyName1);    cachedStormStatusService.getTopologyStatus(topologyName2);    verify(stormService, times(2)).getTopologyStatus(topologyName1);    verify(stormService, times(2)).getTopologyStatus(topologyName2);}
public void metron_f1923_0()
{    TopologyStatus topologyStatus1 = new TopologyStatus();    TopologyStatus topologyStatus2 = new TopologyStatus();    List<TopologyStatus> allTopologyStatus = ImmutableList.of(topologyStatus1, topologyStatus2);    when(stormService.getAllTopologyStatus()).thenReturn(allTopologyStatus);        for (int i = 0; i < 100; i++) {        cachedStormStatusService.getAllTopologyStatus();    }    List<TopologyStatus> allStatus = cachedStormStatusService.getAllTopologyStatus();    assertThat("Number of topologies returned by all topology status check did not match.", allStatus.size(), CoreMatchers.equalTo(2));    verify(stormService, times(1)).getAllTopologyStatus();    cachedStormStatusService.reset();    cachedStormStatusService.getAllTopologyStatus();    verify(stormService, times(2)).getAllTopologyStatus();}
public void metron_f1924_0()
{    TopologyResponse topologyResponse = new TopologyResponse();    when(stormService.activateTopology(anyString())).thenReturn(topologyResponse);    when(stormService.deactivateTopology(anyString())).thenReturn(topologyResponse);    for (int i = 0; i < 100; i++) {        cachedStormStatusService.activateTopology("foo");        cachedStormStatusService.deactivateTopology("foo");    }    verify(stormService, times(100)).activateTopology(anyString());    verify(stormService, times(100)).deactivateTopology(anyString());}
public void metron_f1925_0() throws Exception
{    processBuilder = mock(ProcessBuilder.class);    environment = mock(Environment.class);    dockerStormCLIWrapper = new DockerStormCLIWrapper(environment);}
public void metron_f1926_0() throws Exception
{    whenNew(ProcessBuilder.class).withParameterTypes(String[].class).withArguments(anyVararg()).thenReturn(processBuilder);    when(processBuilder.environment()).thenReturn(new HashMap<>());    when(processBuilder.command()).thenReturn(new ArrayList<>());    Process process = mock(Process.class);    InputStream inputStream = new ByteArrayInputStream("export DOCKER_HOST=\"tcp://192.168.99.100:2376\"".getBytes(StandardCharsets.UTF_8));    when(processBuilder.start()).thenReturn(process);    when(process.getInputStream()).thenReturn(inputStream);    when(environment.getProperty("docker.compose.path")).thenReturn("/test");    when(environment.getProperty("metron.version")).thenReturn("1");    ProcessBuilder actualBuilder = dockerStormCLIWrapper.getProcessBuilder("oo", "ooo");    assertEquals(new HashMap<String, String>() {        {            put("METRON_VERSION", "1");            put("DOCKER_HOST", "tcp://192.168.99.100:2376");        }    }, actualBuilder.environment());    assertEquals(new ArrayList<>(), actualBuilder.command());    verify(process).waitFor();}
public void metron_f1927_0() throws Exception
{    curatorFramework = mock(CuratorFramework.class);    cache = mock(ConfigurationsCache.class);    globalConfigService = new GlobalConfigServiceImpl(curatorFramework, cache);}
public void metron_f1928_0() throws Exception
{    DeleteBuilder builder = mock(DeleteBuilder.class);    when(curatorFramework.delete()).thenReturn(builder);    when(builder.forPath(ConfigurationType.GLOBAL.getZookeeperRoot())).thenThrow(KeeperException.NoNodeException.class);    assertFalse(globalConfigService.delete());}
public void metron_f1929_0() throws Exception
{    exception.expect(RestException.class);    DeleteBuilder builder = mock(DeleteBuilder.class);    when(curatorFramework.delete()).thenReturn(builder);    when(builder.forPath(ConfigurationType.GLOBAL.getZookeeperRoot())).thenThrow(Exception.class);    assertFalse(globalConfigService.delete());}
public void metron_f1930_0() throws Exception
{    DeleteBuilder builder = mock(DeleteBuilder.class);    when(curatorFramework.delete()).thenReturn(builder);    when(builder.forPath(ConfigurationType.GLOBAL.getZookeeperRoot())).thenReturn(null);    assertTrue(globalConfigService.delete());    verify(curatorFramework).delete();}
public void metron_f1931_0() throws Exception
{    final String config = "{\"k\":\"v\"}";    final Map<String, Object> configMap = new HashMap<String, Object>() {        {            put("k", "v");        }    };    EnrichmentConfigurations configs = new EnrichmentConfigurations() {        @Override        public Map<String, Object> getConfigurations() {            return ImmutableMap.of(ConfigurationType.GLOBAL.getTypeName(), configMap);        }    };    when(cache.get(eq(EnrichmentConfigurations.class))).thenReturn(configs);    assertEquals(configMap, globalConfigService.get());}
public Map<String, Object> metron_f1932_0()
{    return ImmutableMap.of(ConfigurationType.GLOBAL.getTypeName(), configMap);}
public void metron_f1933_0() throws Exception
{    exception.expect(RestException.class);    GetDataBuilder getDataBuilder = mock(GetDataBuilder.class);    when(getDataBuilder.forPath(ConfigurationType.GLOBAL.getZookeeperRoot())).thenThrow(Exception.class);    when(curatorFramework.getData()).thenReturn(getDataBuilder);    globalConfigService.get();}
public void metron_f1934_0() throws Exception
{    exception.expect(RestException.class);    SetDataBuilder setDataBuilder = mock(SetDataBuilder.class);    when(setDataBuilder.forPath(ConfigurationType.GLOBAL.getZookeeperRoot(), "{ }".getBytes(StandardCharsets.UTF_8))).thenThrow(Exception.class);    when(curatorFramework.setData()).thenReturn(setDataBuilder);    globalConfigService.save(new HashMap<>());}
public void metron_f1935_0() throws Exception
{    SetDataBuilder setDataBuilder = mock(SetDataBuilder.class);    when(setDataBuilder.forPath(ConfigurationType.GLOBAL.getZookeeperRoot(), "{ }".getBytes(StandardCharsets.UTF_8))).thenReturn(new Stat());    when(curatorFramework.setData()).thenReturn(setDataBuilder);    assertEquals(new HashMap<>(), globalConfigService.save(new HashMap<>()));    verify(setDataBuilder).forPath(eq(ConfigurationType.GLOBAL.getZookeeperRoot()), eq("{ }".getBytes(StandardCharsets.UTF_8)));}
public void metron_f1936_0() throws Exception
{    environment = mock(Environment.class);    grok = mock(Grok.class);    hdfsService = new HdfsServiceImpl(new Configuration());    grokService = new GrokServiceImpl(environment, grok, hdfsService);}
public void metron_f1937_0() throws Exception
{    grokService.getCommonGrokPatterns();    verify(grok).getPatterns();}
public void metron_f1938_0() throws Exception
{    final Map<String, String> actual = new HashMap<String, String>() {        {            put("k", "v");            put("k1", "v1");        }    };    when(grok.getPatterns()).thenReturn(actual);    Map<String, String> expected = new HashMap<String, String>() {        {            put("k", "v");            put("k1", "v1");        }    };    assertEquals(expected, grokService.getCommonGrokPatterns());}
public void metron_f1939_0() throws Exception
{    exception.expect(RestException.class);    exception.expectMessage("Pattern label is required");    GrokValidation grokValidation = new GrokValidation();    grokValidation.setResults(new HashMap<>());    grokValidation.setSampleData("asdf asdf");    grokValidation.setStatement("LABEL %{WORD:word1} %{WORD:word2}");    grokService.validateGrokStatement(grokValidation);}
public void metron_f1940_0() throws Exception
{    exception.expect(RestException.class);    exception.expectMessage("Grok statement is required");    GrokValidation grokValidation = new GrokValidation();    grokValidation.setResults(new HashMap<>());    grokValidation.setSampleData("asdf asdf");    grokValidation.setPatternLabel("LABEL");    grokValidation.setStatement("");    grokService.validateGrokStatement(grokValidation);}
public void metron_f1941_0() throws Exception
{    exception.expect(RestException.class);    exception.expectMessage("Grok statement is required");    GrokValidation grokValidation = new GrokValidation();    grokValidation.setResults(new HashMap<>());    grokValidation.setSampleData("asdf asdf");    grokValidation.setPatternLabel("LABEL");    grokValidation.setStatement(null);    grokService.validateGrokStatement(grokValidation);}
public void metron_f1942_0() throws Exception
{    final GrokValidation grokValidation = new GrokValidation();    grokValidation.setResults(new HashMap<>());    grokValidation.setSampleData("asdf asdf");    grokValidation.setStatement("LABEL %{WORD:word1} %{WORD:word2}");    grokValidation.setPatternLabel("LABEL");    GrokValidation expected = new GrokValidation();    expected.setResults(new HashMap<String, Object>() {        {            put("word1", "asdf");            put("word2", "asdf");        }    });    expected.setSampleData("asdf asdf");    expected.setStatement("LABEL %{WORD:word1} %{WORD:word2}");    expected.setPatternLabel("LABEL");    GrokValidation actual = grokService.validateGrokStatement(grokValidation);    assertEquals(expected, actual);    assertEquals(expected.hashCode(), actual.hashCode());}
public void metron_f1943_0() throws Exception
{    final GrokValidation grokValidation = new GrokValidation();    grokValidation.setResults(new HashMap<>());    grokValidation.setSampleData("");    grokValidation.setPatternLabel("LABEL");    grokValidation.setStatement("LABEL %{WORD:word1} %{WORD:word2}");    GrokValidation expected = new GrokValidation();    expected.setResults(new HashMap<>());    expected.setSampleData("");    expected.setPatternLabel("LABEL");    expected.setStatement("LABEL %{WORD:word1} %{WORD:word2}");    assertEquals(expected, grokService.validateGrokStatement(grokValidation));}
public void metron_f1944_0() throws Exception
{    final GrokValidation grokValidation = new GrokValidation();    grokValidation.setResults(new HashMap<>());    grokValidation.setSampleData(null);    grokValidation.setStatement("LABEL %{WORD:word1} %{WORD:word2}");    grokValidation.setPatternLabel("LABEL");    GrokValidation expected = new GrokValidation();    expected.setResults(new HashMap<>());    expected.setSampleData(null);    expected.setStatement("LABEL %{WORD:word1} %{WORD:word2}");    expected.setPatternLabel("LABEL");    assertEquals(expected, grokService.validateGrokStatement(grokValidation));}
public void metron_f1945_0() throws Exception
{    exception.expect(RestException.class);    GrokValidation grokValidation = new GrokValidation();    grokValidation.setResults(new HashMap<>());    grokValidation.setSampleData(null);    grokValidation.setStatement("LABEL %{WORD:word1} %{WORD:word2");    grokService.validateGrokStatement(grokValidation);}
public void metron_f1946_0() throws Exception
{    new File("./target/user1").delete();    String statement = "grok statement";    Authentication authentication = mock(Authentication.class);    when(authentication.getName()).thenReturn("user1");    SecurityContextHolder.getContext().setAuthentication(authentication);    when(environment.getProperty(GROK_TEMP_PATH_SPRING_PROPERTY)).thenReturn("./target");    grokService.saveTemporary(statement, "squid");    File testRoot = new File("./target/user1");    assertEquals(statement, FileUtils.readFileToString(new File(testRoot, "squid"), StandardCharsets.UTF_8));    testRoot.delete();}
public void metron_f1947_0() throws Exception
{    exception.expect(RestException.class);    exception.expectMessage("A grokStatement must be provided");    grokService.saveTemporary(null, "squid");}
public void metron_f1948_0() throws Exception
{    String expected = FileUtils.readFileToString(new File("../../metron-platform/metron-parsing/metron-parsers/src/main/resources/patterns/squid"));    assertEquals(expected, grokService.getStatementFromClasspath("/patterns/squid"));}
public void metron_f1949_0() throws Exception
{    exception.expect(RestException.class);    exception.expectMessage("Could not find a statement at path /bad/path");    grokService.getStatementFromClasspath("/bad/path");}
public void metron_f1950_0() throws IOException
{    configuration = new Configuration();    hdfsService = new HdfsServiceImpl(configuration);    mockStatic(FileSystem.class);}
public void metron_f1951_0() throws Exception
{    exception.expect(RestException.class);    FileSystem fileSystem = mock(FileSystem.class);    when(FileSystem.get(configuration)).thenReturn(fileSystem);    when(fileSystem.listStatus(new Path(testDir))).thenThrow(new IOException());    hdfsService.list(new Path(testDir));}
public void metron_f1952_0() throws Exception
{    exception.expect(RestException.class);    FileSystem fileSystem = mock(FileSystem.class);    when(FileSystem.get(configuration)).thenReturn(fileSystem);    when(fileSystem.open(new Path(testDir))).thenThrow(new IOException());    hdfsService.read(new Path(testDir));}
public void metron_f1953_0() throws Exception
{    exception.expect(RestException.class);    FileSystem fileSystem = mock(FileSystem.class);    when(FileSystem.get(configuration)).thenReturn(fileSystem);    when(fileSystem.create(new Path(testDir), true)).thenThrow(new IOException());    hdfsService.write(new Path(testDir), "contents".getBytes(UTF_8), null, null, null);}
public void metron_f1954_0() throws Exception
{    exception.expect(RestException.class);    FileSystem fileSystem = mock(FileSystem.class);    when(FileSystem.get(configuration)).thenReturn(fileSystem);    hdfsService.write(new Path(testDir, "test"), "oops".getBytes(UTF_8), "foo", "r-x", "r--");}
public void metron_f1955_0() throws Exception
{    exception.expect(RestException.class);    FileSystem fileSystem = mock(FileSystem.class);    when(FileSystem.get(configuration)).thenReturn(fileSystem);    when(fileSystem.delete(new Path(testDir), false)).thenThrow(new IOException());    hdfsService.delete(new Path(testDir), false);}
public void metron_f1956_0() throws IOException
{    configuration = new Configuration();    hdfsService = new HdfsServiceImpl(configuration);    File file = new File(testDir);    if (!file.exists()) {        file.mkdirs();    }    FileUtils.cleanDirectory(file);}
public void metron_f1957_0() throws IOException
{    File file = new File(testDir);    FileUtils.cleanDirectory(file);}
public void metron_f1958_0() throws Exception
{    FileUtils.writeStringToFile(new File(testDir, "file1.txt"), "value1");    FileUtils.writeStringToFile(new File(testDir, "file2.txt"), "value2");    List<String> paths = hdfsService.list(new Path(testDir));    Collections.sort(paths);    assertEquals(2, paths.size());    assertEquals("file1.txt", paths.get(0));    assertEquals("file2.txt", paths.get(1));}
public void metron_f1959_0() throws Exception
{    String contents = "contents";    FileUtils.writeStringToFile(new File(testDir, "readTest.txt"), contents);    assertEquals("contents", hdfsService.read(new Path(testDir, "readTest.txt")));}
public void metron_f1960_0() throws Exception
{    String contents = "contents";    hdfsService.write(new Path(testDir, "writeTest.txt"), contents.getBytes(UTF_8), null, null, null);    assertEquals("contents", FileUtils.readFileToString(new File(testDir, "writeTest.txt")));}
public void metron_f1961_0() throws Exception
{    String contents = "contents";    Path thePath = new Path(testDir, "writeTest2.txt");    hdfsService.write(thePath, contents.getBytes(UTF_8), "rw-", "r-x", "r--");    assertEquals("contents", FileUtils.readFileToString(new File(testDir, "writeTest2.txt")));    assertEquals(FileSystem.get(configuration).listStatus(thePath)[0].getPermission().toShort(), new FsPermission(FsAction.READ_WRITE, FsAction.READ_EXECUTE, FsAction.READ).toShort());}
public void metron_f1962_0() throws Exception
{    String contents = "contents";    FileUtils.writeStringToFile(new File(testDir, "deleteTest.txt"), contents);    List<String> paths = hdfsService.list(new Path(testDir));    assertEquals(1, paths.size());    assertEquals("deleteTest.txt", paths.get(0));    hdfsService.delete(new Path(testDir, "deleteTest.txt"), false);    paths = hdfsService.list(new Path(testDir));    assertEquals(0, paths.size());}
public void metron_f1963_0() throws Exception
{    zkUtils = mock(ZkUtils.class);    kafkaConsumerFactory = mock(ConsumerFactory.class);    kafkaConsumer = mock(KafkaConsumer.class);    kafkaProducer = mock(KafkaProducer.class);    adminUtils = mock(AdminUtils$.class);    when(kafkaConsumerFactory.createConsumer()).thenReturn(kafkaConsumer);    kafkaService = new KafkaServiceImpl(zkUtils, kafkaConsumerFactory, kafkaProducer, adminUtils);}
public void metron_f1964_0() throws Exception
{    final Map<String, List<PartitionInfo>> topics = null;    when(kafkaConsumer.listTopics()).thenReturn(topics);    final Set<String> listedTopics = kafkaService.listTopics();    assertEquals(Sets.newHashSet(), listedTopics);    verifyZeroInteractions(zkUtils);    verify(kafkaConsumer).listTopics();    verify(kafkaConsumer).close();    verifyNoMoreInteractions(kafkaConsumer, zkUtils, adminUtils);}
public void metron_f1965_0() throws Exception
{    final Map<String, List<PartitionInfo>> topics = new HashMap<>();    when(kafkaConsumer.listTopics()).thenReturn(topics);    final Set<String> listedTopics = kafkaService.listTopics();    assertEquals(Sets.newHashSet(), listedTopics);    verifyZeroInteractions(zkUtils);    verify(kafkaConsumer).listTopics();    verify(kafkaConsumer).close();    verifyNoMoreInteractions(kafkaConsumer, zkUtils);}
public void metron_f1966_0() throws Exception
{    final Map<String, List<PartitionInfo>> topics = new HashMap<>();    topics.put("topic1", Lists.newArrayList());    topics.put("topic2", Lists.newArrayList());    topics.put("topic3", Lists.newArrayList());    when(kafkaConsumer.listTopics()).thenReturn(topics);    final Set<String> listedTopics = kafkaService.listTopics();    assertEquals(Sets.newHashSet("topic1", "topic2", "topic3"), listedTopics);    verifyZeroInteractions(zkUtils);    verify(kafkaConsumer).listTopics();    verify(kafkaConsumer).close();    verifyNoMoreInteractions(kafkaConsumer, zkUtils);}
public void metron_f1967_0() throws Exception
{    final Map<String, List<PartitionInfo>> topics = new HashMap<>();    topics.put("topic1", Lists.newArrayList());    topics.put("topic2", Lists.newArrayList());    topics.put("topic3", Lists.newArrayList());    topics.put("__consumer_offsets", Lists.newArrayList());    when(kafkaConsumer.listTopics()).thenReturn(topics);    final Set<String> listedTopics = kafkaService.listTopics();    assertEquals(Sets.newHashSet("topic1", "topic2", "topic3"), listedTopics);    verifyZeroInteractions(zkUtils);    verify(kafkaConsumer).listTopics();    verify(kafkaConsumer).close();    verifyNoMoreInteractions(kafkaConsumer, zkUtils);}
public void metron_f1968_0() throws Exception
{    when(kafkaConsumer.listTopics()).thenReturn(Maps.newHashMap());    assertFalse(kafkaService.deleteTopic("non_existent_topic"));    verifyZeroInteractions(zkUtils);    verify(kafkaConsumer).listTopics();    verify(kafkaConsumer).close();    verifyNoMoreInteractions(kafkaConsumer, zkUtils);}
public void metron_f1969_0() throws Exception
{    final Map<String, List<PartitionInfo>> topics = new HashMap<>();    topics.put("non_existent_topic", Lists.newArrayList());    when(kafkaConsumer.listTopics()).thenReturn(topics);    assertTrue(kafkaService.deleteTopic("non_existent_topic"));    verify(kafkaConsumer).listTopics();    verify(kafkaConsumer).close();    verify(adminUtils).deleteTopic(zkUtils, "non_existent_topic");    verifyNoMoreInteractions(kafkaConsumer);}
public void metron_f1970_0() throws Exception
{    final Map<String, List<PartitionInfo>> topics = null;    when(kafkaConsumer.listTopics()).thenReturn(topics);    assertFalse(kafkaService.deleteTopic("non_existent_topic"));    verify(kafkaConsumer).listTopics();    verify(kafkaConsumer).close();    verifyNoMoreInteractions(kafkaConsumer);}
public void metron_f1971_0() throws Exception
{    final PartitionInfo partitionInfo = mock(PartitionInfo.class);    when(partitionInfo.replicas()).thenReturn(new Node[] { new Node(1, "host", 8080) });    final Map<String, List<PartitionInfo>> topics = new HashMap<>();    topics.put("t", Lists.newArrayList(partitionInfo));    topics.put("t1", Lists.newArrayList());    final KafkaTopic expected = new KafkaTopic();    expected.setName("t");    expected.setNumPartitions(1);    expected.setReplicationFactor(1);    when(kafkaConsumer.listTopics()).thenReturn(topics);    when(kafkaConsumer.partitionsFor("t")).thenReturn(Lists.newArrayList(partitionInfo));    KafkaTopic actual = kafkaService.getTopic("t");    assertEquals(expected, actual);    assertEquals(expected.hashCode(), actual.hashCode());}
public void metron_f1972_0() throws Exception
{    final Map<String, List<PartitionInfo>> topics = new HashMap<>();    topics.put("t1", Lists.newArrayList());    when(kafkaConsumer.listTopics()).thenReturn(topics);    when(kafkaConsumer.partitionsFor("t")).thenReturn(Lists.newArrayList());    assertEquals(null, kafkaService.getTopic("t"));    verify(kafkaConsumer).listTopics();    verify(kafkaConsumer, times(0)).partitionsFor("t");    verify(kafkaConsumer).close();    verifyZeroInteractions(zkUtils);    verifyNoMoreInteractions(kafkaConsumer);}
public void metron_f1973_0() throws Exception
{    exception.expect(RestException.class);    doThrow(AdminOperationException.class).when(adminUtils).createTopic(eq(zkUtils), eq("t"), eq(1), eq(2), eq(new Properties()), eq(RackAwareMode.Disabled$.MODULE$));    kafkaService.createTopic(VALID_KAFKA_TOPIC);}
public void metron_f1974_0() throws Exception
{    exception.expect(RestException.class);    final Map<String, List<PartitionInfo>> topics = new HashMap<>();    topics.put("1", new ArrayList<>());    when(kafkaConsumer.listTopics()).thenReturn(topics);    doThrow(AdminOperationException.class).when(adminUtils).createTopic(eq(zkUtils), eq("t"), eq(1), eq(2), eq(new Properties()), eq(RackAwareMode.Disabled$.MODULE$));    kafkaService.createTopic(VALID_KAFKA_TOPIC);}
public void metron_f1975_0() throws Exception
{    final String topicName = "t";    final Node host = new Node(1, "host", 8080);    final Node[] replicas = { host };    final List<PartitionInfo> partitionInfo = Lists.newArrayList(new PartitionInfo(topicName, 1, host, replicas, replicas));    final TopicPartition topicPartition = new TopicPartition(topicName, 1);    final List<TopicPartition> topicPartitions = Lists.newArrayList(topicPartition);    final Set<TopicPartition> topicPartitionsSet = Sets.newHashSet(topicPartitions);    final ConsumerRecords<String, String> records = new ConsumerRecords<>(new HashMap<TopicPartition, List<ConsumerRecord<String, String>>>() {        {            put(topicPartition, Lists.newArrayList(new ConsumerRecord<>(topicName, 1, 1, "k", "message")));        }    });    when(kafkaConsumer.listTopics()).thenReturn(new HashMap<String, List<PartitionInfo>>() {        {            put(topicName, Lists.newArrayList());        }    });    when(kafkaConsumer.partitionsFor(eq(topicName))).thenReturn(partitionInfo);    when(kafkaConsumer.assignment()).thenReturn(topicPartitionsSet);    when(kafkaConsumer.position(topicPartition)).thenReturn(1L);    when(kafkaConsumer.poll(100)).thenReturn(records);    assertEquals("message", kafkaService.getSampleMessage(topicName));    verify(kafkaConsumer).assign(eq(topicPartitions));    verify(kafkaConsumer).assignment();    verify(kafkaConsumer).poll(100);    verify(kafkaConsumer).unsubscribe();    verify(kafkaConsumer, times(2)).position(topicPartition);    verify(kafkaConsumer).seek(topicPartition, 0);    verifyZeroInteractions(zkUtils, adminUtils);}
public void metron_f1976_0() throws Exception
{    final String topicName = "t";    final String message = "{\"field\":\"value\"}";    kafkaService.produceMessage(topicName, message);    String expectedMessage = "{\"field\":\"value\"}";    verify(kafkaProducer).send(new ProducerRecord<>(topicName, expectedMessage));    verifyZeroInteractions(kafkaProducer);}
public void metron_f1977_0() throws Exception
{    when(kafkaConsumer.listTopics()).thenReturn(Maps.newHashMap());    assertFalse(kafkaService.addACLToCurrentUser("non_existent_topic"));}
public void metron_f1978_0() throws Exception
{    environment = mock(Environment.class);    configuration = new Configuration();    mockPcapJobSupplier = new MockPcapJobSupplier();    pcapToPdmlScriptWrapper = new PcapToPdmlScriptWrapper();    when(environment.getProperty(MetronRestConstants.PCAP_BASE_PATH_SPRING_PROPERTY)).thenReturn("/base/path");    when(environment.getProperty(MetronRestConstants.PCAP_BASE_INTERIM_RESULT_PATH_SPRING_PROPERTY)).thenReturn("/base/interim/result/path");    when(environment.getProperty(MetronRestConstants.PCAP_FINAL_OUTPUT_PATH_SPRING_PROPERTY)).thenReturn("/final/output/path");    when(environment.getProperty(MetronRestConstants.PCAP_PAGE_SIZE_SPRING_PROPERTY)).thenReturn("100");    when(environment.getProperty(MetronRestConstants.PCAP_FINALIZER_THREADPOOL_SIZE_SPRING_PROPERTY)).thenReturn("2C");    when(environment.getProperty(MetronRestConstants.PCAP_PDML_SCRIPT_PATH_SPRING_PROPERTY)).thenReturn("/path/to/pdml/script");    when(environment.getProperty(MetronRestConstants.USER_JOB_LIMIT_SPRING_PROPERTY, Integer.class, 1)).thenReturn(1);}
public void metron_f1979_0() throws Exception
{    when(environment.containsProperty(MetronRestConstants.PCAP_YARN_QUEUE_SPRING_PROPERTY)).thenReturn(true);    when(environment.getProperty(MetronRestConstants.PCAP_YARN_QUEUE_SPRING_PROPERTY)).thenReturn("pcap");    FixedPcapRequest fixedPcapRequest = new FixedPcapRequest();    fixedPcapRequest.setBasePath("basePath");    fixedPcapRequest.setBaseInterimResultPath("baseOutputPath");    fixedPcapRequest.setFinalOutputPath("finalOutputPath");    fixedPcapRequest.setStartTimeMs(1L);    fixedPcapRequest.setEndTimeMs(2L);    fixedPcapRequest.setNumReducers(2);    fixedPcapRequest.setIpSrcAddr("ip_src_addr");    fixedPcapRequest.setIpDstAddr("ip_dst_addr");    fixedPcapRequest.setIpSrcPort(1000);    fixedPcapRequest.setIpDstPort(2000);    fixedPcapRequest.setProtocol("tcp");    fixedPcapRequest.setPacketFilter("filter");    fixedPcapRequest.setIncludeReverse(true);    MockPcapJob mockPcapJob = new MockPcapJob();    mockPcapJobSupplier.setMockPcapJob(mockPcapJob);    JobManager jobManager = new InMemoryJobManager<>();    PcapServiceImpl pcapService = spy(new PcapServiceImpl(environment, configuration, mockPcapJobSupplier, jobManager, pcapToPdmlScriptWrapper));    FileSystem fileSystem = mock(FileSystem.class);    doReturn(fileSystem).when(pcapService).getFileSystem();    mockPcapJob.setStatus(new JobStatus().withJobId("jobId").withDescription("description").withPercentComplete(0L).withState(JobStatus.State.RUNNING));    Map<String, String> expectedFields = new HashMap<String, String>() {        {            put(Constants.Fields.SRC_ADDR.getName(), "ip_src_addr");            put(Constants.Fields.DST_ADDR.getName(), "ip_dst_addr");            put(Constants.Fields.SRC_PORT.getName(), "1000");            put(Constants.Fields.DST_PORT.getName(), "2000");            put(Constants.Fields.PROTOCOL.getName(), "tcp");            put(Constants.Fields.INCLUDES_REVERSE_TRAFFIC.getName(), "true");            put(PcapHelper.PacketFields.PACKET_FILTER.getName(), "filter");        }    };    PcapStatus expectedPcapStatus = new PcapStatus();    expectedPcapStatus.setJobId("jobId");    expectedPcapStatus.setJobStatus(JobStatus.State.RUNNING.name());    expectedPcapStatus.setDescription("description");    Assert.assertEquals(expectedPcapStatus, pcapService.submit("user", fixedPcapRequest));    Assert.assertEquals(expectedPcapStatus, pcapService.jobStatusToPcapStatus(jobManager.getJob("user", "jobId").getStatus()));    Assert.assertEquals("basePath", mockPcapJob.getBasePath());    Assert.assertEquals("baseOutputPath", mockPcapJob.getBaseInterrimResultPath());    Assert.assertEquals("finalOutputPath", mockPcapJob.getFinalOutputPath());    Assert.assertEquals(1000000, mockPcapJob.getStartTimeNs());    Assert.assertEquals(2000000, mockPcapJob.getEndTimeNs());    Assert.assertEquals(2, mockPcapJob.getNumReducers());    Assert.assertEquals(100, mockPcapJob.getRecPerFile());    Assert.assertEquals("pcap", mockPcapJob.getYarnQueue());    Assert.assertEquals("2C", mockPcapJob.getFinalizerThreadpoolSize());    Assert.assertTrue(mockPcapJob.getFilterImpl() instanceof FixedPcapFilter.Configurator);    Map<String, String> actualFixedFields = mockPcapJob.getFixedFields();    Assert.assertEquals("ip_src_addr", actualFixedFields.get(Constants.Fields.SRC_ADDR.getName()));    Assert.assertEquals("1000", actualFixedFields.get(Constants.Fields.SRC_PORT.getName()));    Assert.assertEquals("ip_dst_addr", actualFixedFields.get(Constants.Fields.DST_ADDR.getName()));    Assert.assertEquals("2000", actualFixedFields.get(Constants.Fields.DST_PORT.getName()));    Assert.assertEquals("true", actualFixedFields.get(Constants.Fields.INCLUDES_REVERSE_TRAFFIC.getName()));    Assert.assertEquals("tcp", actualFixedFields.get(Constants.Fields.PROTOCOL.getName()));    Assert.assertEquals("filter", actualFixedFields.get(PcapHelper.PacketFields.PACKET_FILTER.getName()));}
public void metron_f1980_0() throws Exception
{    long beforeJobTime = System.currentTimeMillis();    FixedPcapRequest fixedPcapRequest = new FixedPcapRequest();    MockPcapJob mockPcapJob = new MockPcapJob();    mockPcapJobSupplier.setMockPcapJob(mockPcapJob);    JobManager jobManager = new InMemoryJobManager<>();    PcapServiceImpl pcapService = spy(new PcapServiceImpl(environment, configuration, mockPcapJobSupplier, jobManager, pcapToPdmlScriptWrapper));    FileSystem fileSystem = mock(FileSystem.class);    doReturn(fileSystem).when(pcapService).getFileSystem();    mockPcapJob.setStatus(new JobStatus().withJobId("jobId").withDescription("description").withPercentComplete(0L).withState(JobStatus.State.RUNNING));    PcapStatus expectedPcapStatus = new PcapStatus();    expectedPcapStatus.setJobId("jobId");    expectedPcapStatus.setJobStatus(JobStatus.State.RUNNING.name());    expectedPcapStatus.setDescription("description");    Assert.assertEquals(expectedPcapStatus, pcapService.submit("user", fixedPcapRequest));    Assert.assertEquals("/base/path", mockPcapJob.getBasePath());    Assert.assertEquals("/base/interim/result/path", mockPcapJob.getBaseInterrimResultPath());    Assert.assertEquals("/final/output/path", mockPcapJob.getFinalOutputPath());    Assert.assertEquals(0, mockPcapJob.getStartTimeNs());    Assert.assertTrue(beforeJobTime <= mockPcapJob.getEndTimeNs() / 1000000);    Assert.assertTrue(System.currentTimeMillis() >= mockPcapJob.getEndTimeNs() / 1000000);    Assert.assertEquals(10, mockPcapJob.getNumReducers());    Assert.assertEquals(100, mockPcapJob.getRecPerFile());    Assert.assertTrue(mockPcapJob.getFilterImpl() instanceof FixedPcapFilter.Configurator);    Assert.assertEquals(new HashMap<>(), mockPcapJob.getFixedFields());}
public void metron_f1981_0() throws Exception
{    QueryPcapRequest queryPcapRequest = new QueryPcapRequest();    queryPcapRequest.setBasePath("basePath");    queryPcapRequest.setBaseInterimResultPath("baseOutputPath");    queryPcapRequest.setFinalOutputPath("finalOutputPath");    queryPcapRequest.setStartTimeMs(1L);    queryPcapRequest.setEndTimeMs(2L);    queryPcapRequest.setNumReducers(2);    queryPcapRequest.setQuery("query");    MockPcapJob mockPcapJob = new MockPcapJob();    mockPcapJobSupplier.setMockPcapJob(mockPcapJob);    JobManager jobManager = new InMemoryJobManager<>();    PcapServiceImpl pcapService = spy(new PcapServiceImpl(environment, configuration, mockPcapJobSupplier, jobManager, pcapToPdmlScriptWrapper));    FileSystem fileSystem = mock(FileSystem.class);    doReturn(fileSystem).when(pcapService).getFileSystem();    mockPcapJob.setStatus(new JobStatus().withJobId("jobId").withDescription("description").withPercentComplete(0L).withState(JobStatus.State.RUNNING));    String expectedFields = "query";    PcapStatus expectedPcapStatus = new PcapStatus();    expectedPcapStatus.setJobId("jobId");    expectedPcapStatus.setJobStatus(JobStatus.State.RUNNING.name());    expectedPcapStatus.setDescription("description");    Assert.assertEquals(expectedPcapStatus, pcapService.submit("user", queryPcapRequest));    Assert.assertEquals(expectedPcapStatus, pcapService.jobStatusToPcapStatus(jobManager.getJob("user", "jobId").getStatus()));    Assert.assertEquals("basePath", mockPcapJob.getBasePath());    Assert.assertEquals("baseOutputPath", mockPcapJob.getBaseInterrimResultPath());    Assert.assertEquals("finalOutputPath", mockPcapJob.getFinalOutputPath());    Assert.assertEquals(1000000, mockPcapJob.getStartTimeNs());    Assert.assertEquals(2000000, mockPcapJob.getEndTimeNs());    Assert.assertEquals(2, mockPcapJob.getNumReducers());    Assert.assertEquals(100, mockPcapJob.getRecPerFile());    Assert.assertTrue(mockPcapJob.getFilterImpl() instanceof QueryPcapFilter.Configurator);    Map<String, String> actualFixedFields = mockPcapJob.getFixedFields();    Assert.assertEquals("query", mockPcapJob.getQuery());}
public void metron_f1982_0() throws Exception
{    exception.expect(RestException.class);    exception.expectMessage("Cannot submit job because a job is already running.  Please contact the administrator to cancel job(s) with id(s) jobId");    PcapStatus runningStatus1 = new PcapStatus();    runningStatus1.setJobStatus("RUNNING");    runningStatus1.setJobId("jobId1");    PcapStatus runningStatus2 = new PcapStatus();    runningStatus2.setJobStatus("RUNNING");    runningStatus2.setJobId("jobId2");    PcapServiceImpl pcapService = spy(new PcapServiceImpl(environment, configuration, mockPcapJobSupplier, new InMemoryJobManager<>(), pcapToPdmlScriptWrapper));    doReturn(Arrays.asList(runningStatus1, runningStatus2)).when(pcapService).getJobStatus("user", JobStatus.State.RUNNING);    when(environment.getProperty(MetronRestConstants.USER_JOB_LIMIT_SPRING_PROPERTY, Integer.class, 1)).thenReturn(2);    pcapService.submit("user", new FixedPcapRequest());}
public void metron_f1983_0() throws Exception
{    exception.expect(RestException.class);    exception.expectMessage("some job exception");    FixedPcapRequest fixedPcapRequest = new FixedPcapRequest();    JobManager jobManager = mock(JobManager.class);    PcapJobSupplier pcapJobSupplier = new PcapJobSupplier();    PcapServiceImpl pcapService = spy(new PcapServiceImpl(environment, configuration, pcapJobSupplier, jobManager, pcapToPdmlScriptWrapper));    FileSystem fileSystem = mock(FileSystem.class);    doReturn(fileSystem).when(pcapService).getFileSystem();    when(jobManager.submit(pcapJobSupplier, "user")).thenThrow(new JobException("some job exception"));    pcapService.submit("user", fixedPcapRequest);}
public void metron_f1984_0() throws Exception
{    MockPcapJob mockPcapJob = mock(MockPcapJob.class);    JobManager jobManager = mock(JobManager.class);    JobStatus actualJobStatus = new JobStatus().withJobId("jobId").withState(JobStatus.State.SUCCEEDED).withDescription("description").withPercentComplete(100.0);    Pageable pageable = mock(Pageable.class);    when(pageable.getSize()).thenReturn(2);    when(mockPcapJob.getStatus()).thenReturn(actualJobStatus);    when(mockPcapJob.isDone()).thenReturn(true);    when(mockPcapJob.get()).thenReturn(pageable);    when(jobManager.getJob("user", "jobId")).thenReturn(mockPcapJob);    PcapServiceImpl pcapService = new PcapServiceImpl(environment, configuration, mockPcapJobSupplier, jobManager, pcapToPdmlScriptWrapper);    PcapStatus expectedPcapStatus = new PcapStatus();    expectedPcapStatus.setJobId("jobId");    expectedPcapStatus.setJobStatus(JobStatus.State.SUCCEEDED.name());    expectedPcapStatus.setDescription("description");    expectedPcapStatus.setPercentComplete(100.0);    expectedPcapStatus.setPageTotal(2);    Assert.assertEquals(expectedPcapStatus, pcapService.getJobStatus("user", "jobId"));}
public void metron_f1985_0() throws Exception
{    JobManager jobManager = new InMemoryJobManager();    PcapServiceImpl pcapService = new PcapServiceImpl(environment, configuration, new PcapJobSupplier(), jobManager, pcapToPdmlScriptWrapper);    Assert.assertNull(pcapService.getJobStatus("user", "jobId"));}
public void metron_f1986_0() throws Exception
{    exception.expect(RestException.class);    exception.expectMessage("some job exception");    JobManager jobManager = mock(JobManager.class);    when(jobManager.getJob("user", "jobId")).thenThrow(new JobException("some job exception"));    PcapServiceImpl pcapService = new PcapServiceImpl(environment, configuration, new PcapJobSupplier(), jobManager, pcapToPdmlScriptWrapper);    pcapService.getJobStatus("user", "jobId");}
public void metron_f1987_0() throws Exception
{    MockPcapJob mockPcapJob = mock(MockPcapJob.class);    JobManager jobManager = mock(JobManager.class);    Statusable<Path> runningJob = mock(Statusable.class);    JobStatus runningStatus = mock(JobStatus.class);    when(runningStatus.getJobId()).thenReturn("runningJob");    when(runningStatus.getState()).thenReturn(JobStatus.State.RUNNING);    when(runningJob.getStatus()).thenReturn(runningStatus);    Statusable<Path> failedJob = mock(Statusable.class);    when(failedJob.getStatus()).thenThrow(new JobException("job exception"));    Statusable<Path> succeededJob = mock(Statusable.class);    JobStatus succeededStatus = mock(JobStatus.class);    when(succeededStatus.getJobId()).thenReturn("succeededJob");    when(succeededStatus.getState()).thenReturn(JobStatus.State.SUCCEEDED);    when(succeededJob.isDone()).thenReturn(true);    when(succeededJob.getStatus()).thenReturn(succeededStatus);    Pageable<Path> succeededPageable = mock(Pageable.class);    when(succeededPageable.getSize()).thenReturn(5);    when(succeededJob.get()).thenReturn(succeededPageable);    when(jobManager.getJobs("user")).thenReturn(Arrays.asList(runningJob, failedJob, succeededJob));    PcapServiceImpl pcapService = new PcapServiceImpl(environment, configuration, mockPcapJobSupplier, jobManager, pcapToPdmlScriptWrapper);    PcapStatus expectedRunningPcapStatus = new PcapStatus();    expectedRunningPcapStatus.setJobId("runningJob");    expectedRunningPcapStatus.setJobStatus(JobStatus.State.RUNNING.name());    Assert.assertEquals(expectedRunningPcapStatus, pcapService.getJobStatus("user", JobStatus.State.RUNNING).get(0));    PcapStatus expectedFailedPcapStatus = new PcapStatus();    expectedFailedPcapStatus.setJobStatus(JobStatus.State.FAILED.name());    expectedFailedPcapStatus.setDescription("job exception");    Assert.assertEquals(expectedFailedPcapStatus, pcapService.getJobStatus("user", JobStatus.State.FAILED).get(0));    PcapStatus expectedSucceededPcapStatus = new PcapStatus();    expectedSucceededPcapStatus.setJobId("succeededJob");    expectedSucceededPcapStatus.setJobStatus(JobStatus.State.SUCCEEDED.name());    expectedSucceededPcapStatus.setPageTotal(5);    Assert.assertEquals(expectedSucceededPcapStatus, pcapService.getJobStatus("user", JobStatus.State.SUCCEEDED).get(0));}
public void metron_f1988_0() throws Exception
{    MockPcapJob mockPcapJob = mock(MockPcapJob.class);    JobManager jobManager = mock(JobManager.class);    JobStatus actualJobStatus = new JobStatus().withJobId("jobId").withState(JobStatus.State.KILLED).withDescription("description").withPercentComplete(100.0);    Pageable pageable = mock(Pageable.class);    when(pageable.getSize()).thenReturn(0);    when(mockPcapJob.getStatus()).thenReturn(actualJobStatus);    when(mockPcapJob.isDone()).thenReturn(true);    when(mockPcapJob.get()).thenReturn(pageable);    when(jobManager.getJob("user", "jobId")).thenReturn(mockPcapJob);    PcapServiceImpl pcapService = new PcapServiceImpl(environment, configuration, mockPcapJobSupplier, jobManager, pcapToPdmlScriptWrapper);    PcapStatus status = pcapService.killJob("user", "jobId");    verify(jobManager, times(1)).killJob("user", "jobId");    assertThat(status.getJobStatus(), CoreMatchers.equalTo(JobStatus.State.KILLED.toString()));}
public void metron_f1989_0() throws Exception
{    MockPcapJob mockPcapJob = mock(MockPcapJob.class);    JobManager jobManager = mock(JobManager.class);    doThrow(new JobNotFoundException("Not found test exception.")).when(jobManager).killJob("user", "jobId");    PcapServiceImpl pcapService = new PcapServiceImpl(environment, configuration, mockPcapJobSupplier, jobManager, pcapToPdmlScriptWrapper);    PcapStatus status = pcapService.killJob("user", "jobId");    verify(jobManager, times(1)).killJob("user", "jobId");    assertNull(status);}
public void metron_f1990_0() throws Exception
{    Path actualPath = new Path("/path");    MockPcapJob mockPcapJob = mock(MockPcapJob.class);    JobManager jobManager = mock(JobManager.class);    Pageable pageable = mock(Pageable.class);    PcapServiceImpl pcapService = new PcapServiceImpl(environment, configuration, new PcapJobSupplier(), jobManager, pcapToPdmlScriptWrapper);    when(pageable.getSize()).thenReturn(2);    when(mockPcapJob.isDone()).thenReturn(true);    when(mockPcapJob.get()).thenReturn(pageable);    when(pageable.getPage(0)).thenReturn(actualPath);    when(jobManager.getJob("user", "jobId")).thenReturn(mockPcapJob);    Assert.assertEquals("/path", pcapService.getPath("user", "jobId", 1).toUri().getPath());}
public void metron_f1991_0() throws Exception
{    MockPcapJob mockPcapJob = mock(MockPcapJob.class);    JobManager jobManager = mock(JobManager.class);    Pageable pageable = mock(Pageable.class);    PcapServiceImpl pcapService = new PcapServiceImpl(environment, configuration, new PcapJobSupplier(), jobManager, pcapToPdmlScriptWrapper);    when(pageable.getSize()).thenReturn(2);    when(mockPcapJob.isDone()).thenReturn(true);    when(mockPcapJob.get()).thenReturn(pageable);    when(jobManager.getJob("user", "jobId")).thenReturn(mockPcapJob);    Assert.assertNull(pcapService.getPath("user", "jobId", 0));    Assert.assertNull(pcapService.getPath("user", "jobId", 3));}
public void metron_f1992_0() throws Exception
{    Path path = new Path("./target");    PcapToPdmlScriptWrapper pcapToPdmlScriptWrapper = spy(new PcapToPdmlScriptWrapper());    PcapServiceImpl pcapService = spy(new PcapServiceImpl(environment, configuration, new PcapJobSupplier(), new InMemoryJobManager<>(), pcapToPdmlScriptWrapper));    FileSystem fileSystem = mock(FileSystem.class);    doReturn(fileSystem).when(pcapService).getFileSystem();    when(fileSystem.exists(path)).thenReturn(true);    doReturn(path).when(pcapService).getPath("user", "jobId", 1);    doReturn(new ByteArrayInputStream(pdmlXml.getBytes(StandardCharsets.UTF_8))).when(pcapToPdmlScriptWrapper).getRawInputStream(fileSystem, path);    ProcessBuilder pb = PowerMockito.mock(ProcessBuilder.class);    Process p = PowerMockito.mock(Process.class);    OutputStream outputStream = new ByteArrayOutputStream();    when(p.getOutputStream()).thenReturn(outputStream);    when(p.isAlive()).thenReturn(true);    when(p.getInputStream()).thenReturn(new ByteArrayInputStream(pdmlXml.getBytes(StandardCharsets.UTF_8)));    whenNew(ProcessBuilder.class).withParameterTypes(String[].class).withArguments(anyVararg()).thenReturn(pb);    PowerMockito.when(pb.start()).thenReturn(p);    assertEquals(JSONUtils.INSTANCE.load(expectedPdml, Pdml.class), pcapService.getPdml("user", "jobId", 1));}
public void metron_f1993_0() throws Exception
{    Path path = new Path("/some/path");    PcapServiceImpl pcapService = spy(new PcapServiceImpl(environment, configuration, new PcapJobSupplier(), new InMemoryJobManager<>(), pcapToPdmlScriptWrapper));    FileSystem fileSystem = mock(FileSystem.class);    doReturn(fileSystem).when(pcapService).getFileSystem();    when(fileSystem.exists(path)).thenReturn(false);    doReturn(path).when(pcapService).getPath("user", "jobId", 1);    assertNull(pcapService.getPdml("user", "jobId", 1));}
public void metron_f1994_0() throws Exception
{    exception.expect(RestException.class);    exception.expectMessage("some exception");    Path path = new Path("./target");    PcapToPdmlScriptWrapper pcapToPdmlScriptWrapper = spy(new PcapToPdmlScriptWrapper());    PcapServiceImpl pcapService = spy(new PcapServiceImpl(environment, configuration, new PcapJobSupplier(), new InMemoryJobManager<>(), pcapToPdmlScriptWrapper));    FileSystem fileSystem = mock(FileSystem.class);    doReturn(fileSystem).when(pcapService).getFileSystem();    when(fileSystem.exists(path)).thenReturn(true);    doReturn(path).when(pcapService).getPath("user", "jobId", 1);    ProcessBuilder pb = PowerMockito.mock(ProcessBuilder.class);    doReturn(pb).when(pcapToPdmlScriptWrapper).getProcessBuilder("/path/to/pdml/script", "target");    PowerMockito.when(pb.start()).thenThrow(new IOException("some exception"));    pcapService.getPdml("user", "jobId", 1);}
public void metron_f1995_0() throws Exception
{    FSDataInputStream inputStream = mock(FSDataInputStream.class);    Path path = new Path("./target");    PcapServiceImpl pcapService = spy(new PcapServiceImpl(environment, configuration, new PcapJobSupplier(), new InMemoryJobManager<>(), new PcapToPdmlScriptWrapper()));    FileSystem fileSystem = mock(FileSystem.class);    doReturn(fileSystem).when(pcapService).getFileSystem();    when(fileSystem.exists(path)).thenReturn(true);    doReturn(path).when(pcapService).getPath("user", "jobId", 1);    when(fileSystem.open(path)).thenReturn(inputStream);    Assert.assertEquals(inputStream, pcapService.getRawPcap("user", "jobId", 1));}
public void metron_f1996_0() throws Exception
{    Path path = new Path("/some/path");    PcapServiceImpl pcapService = spy(new PcapServiceImpl(environment, configuration, new PcapJobSupplier(), new InMemoryJobManager<>(), pcapToPdmlScriptWrapper));    FileSystem fileSystem = mock(FileSystem.class);    doReturn(fileSystem).when(pcapService).getFileSystem();    assertNull(pcapService.getRawPcap("user", "jobId", 1));}
public void metron_f1997_0() throws Exception
{    Path path = new Path("/some/path");    PcapServiceImpl pcapService = spy(new PcapServiceImpl(environment, configuration, new PcapJobSupplier(), new InMemoryJobManager<>(), pcapToPdmlScriptWrapper));    FileSystem fileSystem = mock(FileSystem.class);    doReturn(fileSystem).when(pcapService).getFileSystem();    when(fileSystem.exists(path)).thenReturn(false);    doReturn(path).when(pcapService).getPath("user", "jobId", 1);    assertNull(pcapService.getRawPcap("user", "jobId", 1));}
public void metron_f1998_0() throws Exception
{    exception.expect(RestException.class);    exception.expectMessage("some exception");    Path path = new Path("./target");    PcapServiceImpl pcapService = spy(new PcapServiceImpl(environment, configuration, new PcapJobSupplier(), new InMemoryJobManager<>(), pcapToPdmlScriptWrapper));    FileSystem fileSystem = mock(FileSystem.class);    doReturn(fileSystem).when(pcapService).getFileSystem();    when(fileSystem.exists(path)).thenReturn(true);    doReturn(path).when(pcapService).getPath("user", "jobId", 1);    when(fileSystem.open(path)).thenThrow(new IOException("some exception"));    pcapService.getRawPcap("user", "jobId", 1);}
public void metron_f1999_0() throws Exception
{    FixedPcapRequest fixedPcapRequest = new FixedPcapRequest();    fixedPcapRequest.setBasePath("basePath");    fixedPcapRequest.setBaseInterimResultPath("baseOutputPath");    fixedPcapRequest.setFinalOutputPath("finalOutputPath");    fixedPcapRequest.setStartTimeMs(1L);    fixedPcapRequest.setEndTimeMs(2L);    fixedPcapRequest.setNumReducers(2);    fixedPcapRequest.setIpSrcAddr("ip_src_addr");    fixedPcapRequest.setIpDstAddr("ip_dst_addr");    fixedPcapRequest.setIpSrcPort(1000);    fixedPcapRequest.setIpDstPort(2000);    fixedPcapRequest.setProtocol("tcp");    fixedPcapRequest.setPacketFilter("filter");    fixedPcapRequest.setIncludeReverse(true);    MockPcapJob mockPcapJob = new MockPcapJob();    mockPcapJobSupplier.setMockPcapJob(mockPcapJob);    JobManager jobManager = new InMemoryJobManager<>();    PcapServiceImpl pcapService = spy(new PcapServiceImpl(environment, configuration, mockPcapJobSupplier, jobManager, pcapToPdmlScriptWrapper));    FileSystem fileSystem = mock(FileSystem.class);    doReturn(fileSystem).when(pcapService).getFileSystem();    mockPcapJob.setStatus(new JobStatus().withJobId("jobId"));    pcapService.submit("user", fixedPcapRequest);    Map<String, Object> configuration = pcapService.getConfiguration("user", "jobId");    Assert.assertEquals("basePath", configuration.get(PcapOptions.BASE_PATH.getKey()));    Assert.assertEquals("finalOutputPath", configuration.get(PcapOptions.FINAL_OUTPUT_PATH.getKey()));    Assert.assertEquals(1L, configuration.get(PcapOptions.START_TIME_MS.getKey()));    Assert.assertEquals(2L, configuration.get(PcapOptions.END_TIME_MS.getKey()));    Assert.assertEquals(2, configuration.get(PcapOptions.NUM_REDUCERS.getKey()));    Assert.assertEquals("ip_src_addr", configuration.get(FixedPcapOptions.IP_SRC_ADDR.getKey()));    Assert.assertEquals("ip_dst_addr", configuration.get(FixedPcapOptions.IP_DST_ADDR.getKey()));    Assert.assertEquals(1000, configuration.get(FixedPcapOptions.IP_SRC_PORT.getKey()));    Assert.assertEquals(2000, configuration.get(FixedPcapOptions.IP_DST_PORT.getKey()));    Assert.assertEquals("tcp", configuration.get(FixedPcapOptions.PROTOCOL.getKey()));    Assert.assertEquals("filter", configuration.get(FixedPcapOptions.PACKET_FILTER.getKey()));    Assert.assertEquals(true, configuration.get(FixedPcapOptions.INCLUDE_REVERSE.getKey()));}
public void metron_f2000_0() throws Exception
{    QueryPcapRequest queryPcapRequest = new QueryPcapRequest();    queryPcapRequest.setBasePath("basePath");    queryPcapRequest.setBaseInterimResultPath("baseOutputPath");    queryPcapRequest.setFinalOutputPath("finalOutputPath");    queryPcapRequest.setStartTimeMs(1L);    queryPcapRequest.setEndTimeMs(2L);    queryPcapRequest.setNumReducers(2);    queryPcapRequest.setQuery("query");    MockPcapJob mockPcapJob = new MockPcapJob();    mockPcapJobSupplier.setMockPcapJob(mockPcapJob);    JobManager jobManager = new InMemoryJobManager<>();    PcapServiceImpl pcapService = spy(new PcapServiceImpl(environment, configuration, mockPcapJobSupplier, jobManager, pcapToPdmlScriptWrapper));    FileSystem fileSystem = mock(FileSystem.class);    doReturn(fileSystem).when(pcapService).getFileSystem();    mockPcapJob.setStatus(new JobStatus().withJobId("jobId"));    pcapService.submit("user", queryPcapRequest);    Map<String, Object> configuration = pcapService.getConfiguration("user", "jobId");    Assert.assertEquals("basePath", configuration.get(PcapOptions.BASE_PATH.getKey()));    Assert.assertEquals("finalOutputPath", configuration.get(PcapOptions.FINAL_OUTPUT_PATH.getKey()));    Assert.assertEquals(1L, configuration.get(PcapOptions.START_TIME_MS.getKey()));    Assert.assertEquals(2L, configuration.get(PcapOptions.END_TIME_MS.getKey()));    Assert.assertEquals(2, configuration.get(PcapOptions.NUM_REDUCERS.getKey()));    Assert.assertEquals("query", configuration.get(QueryPcapOptions.QUERY.getKey()));}
public void metron_f2001_0() throws Exception
{    MockPcapJob mockPcapJob = mock(MockPcapJob.class);    JobManager jobManager = mock(JobManager.class);    doThrow(new JobNotFoundException("Not found test exception.")).when(jobManager).getJob("user", "jobId");    PcapServiceImpl pcapService = new PcapServiceImpl(environment, configuration, mockPcapJobSupplier, jobManager, pcapToPdmlScriptWrapper);    Map<String, Object> configuration = pcapService.getConfiguration("user", "jobId");    Assert.assertEquals(new HashMap<>(), configuration);}
public void metron_f2002_0() throws Exception
{    exception.expect(RestException.class);    exception.expectMessage("some job exception");    JobManager jobManager = mock(JobManager.class);    when(jobManager.getJob("user", "jobId")).thenThrow(new JobException("some job exception"));    PcapServiceImpl pcapService = new PcapServiceImpl(environment, configuration, new PcapJobSupplier(), jobManager, pcapToPdmlScriptWrapper);    pcapService.getConfiguration("user", "jobId");}
public void metron_f2003_0() throws Exception
{    dao = mock(IndexDao.class);    environment = mock(Environment.class);    sensorIndexingConfigService = mock(SensorIndexingConfigService.class);    globalConfigService = mock(GlobalConfigService.class);    alertsUIService = mock(AlertsUIService.class);    searchService = new SearchServiceImpl(dao, environment, sensorIndexingConfigService, globalConfigService, alertsUIService);}
public void metron_f2004_0() throws Exception
{    when(environment.getProperty(INDEX_WRITER_NAME)).thenReturn("elasticsearch");    when(sensorIndexingConfigService.getAllIndices("elasticsearch")).thenReturn(Arrays.asList("bro", "snort", "error"));    SearchRequest searchRequest = new SearchRequest();    searchService.search(searchRequest);    SearchRequest expectedSearchRequest = new SearchRequest();    expectedSearchRequest.setIndices(Arrays.asList("bro", "snort", "metaalert"));    verify(dao).search(eq(expectedSearchRequest));    verifyNoMoreInteractions(dao);}
public void metron_f2005_0() throws Exception
{    when(environment.getProperty(SEARCH_FACET_FIELDS_SPRING_PROPERTY, String.class, "")).thenReturn("");    SearchRequest searchRequest = new SearchRequest();    searchRequest.setIndices(Arrays.asList("bro", "snort", "metaalert"));    searchService.search(searchRequest);    SearchRequest expectedSearchRequest = new SearchRequest();    expectedSearchRequest.setIndices(Arrays.asList("bro", "snort", "metaalert"));    verify(dao).search(eq(expectedSearchRequest));}
public void metron_f2006_0() throws Exception
{    when(environment.getProperty(SEARCH_FACET_FIELDS_SPRING_PROPERTY, String.class, "")).thenReturn("ip_src_addr,ip_dst_addr");    when(alertsUIService.getAlertsUIUserSettings()).thenReturn(Optional.empty());    SearchRequest searchRequest = new SearchRequest();    searchRequest.setIndices(Arrays.asList("bro", "snort", "metaalert"));    searchRequest.setFacetFields(new ArrayList<>());    searchService.search(searchRequest);    SearchRequest expectedSearchRequest = new SearchRequest();    expectedSearchRequest.setIndices(Arrays.asList("bro", "snort", "metaalert"));    expectedSearchRequest.setFacetFields(Arrays.asList("source:type", "ip_src_addr", "ip_dst_addr"));    verify(dao).search(eq(expectedSearchRequest));}
public void metron_f2007_0() throws Exception
{    AlertsUIUserSettings alertsUIUserSettings = new AlertsUIUserSettings();    alertsUIUserSettings.setFacetFields(Arrays.asList("ip_src_addr", "ip_dst_addr"));    when(alertsUIService.getAlertsUIUserSettings()).thenReturn(Optional.of(alertsUIUserSettings));    SearchRequest searchRequest = new SearchRequest();    searchRequest.setIndices(Arrays.asList("bro", "snort", "metaalert"));    searchRequest.setFacetFields(new ArrayList<>());    searchService.search(searchRequest);    SearchRequest expectedSearchRequest = new SearchRequest();    expectedSearchRequest.setIndices(Arrays.asList("bro", "snort", "metaalert"));    expectedSearchRequest.setFacetFields(Arrays.asList("ip_src_addr", "ip_dst_addr"));    verify(dao).search(eq(expectedSearchRequest));}
public void metron_f2008_0() throws Exception
{    SearchRequest searchRequest = new SearchRequest();    searchRequest.setIndices(Arrays.asList("bro"));    searchRequest.setFacetFields(Arrays.asList("ip_src_addr"));    searchService.search(searchRequest);    SearchRequest expectedSearchRequest = new SearchRequest();    expectedSearchRequest.setIndices(Arrays.asList("bro"));    expectedSearchRequest.setFacetFields(Arrays.asList("ip_src_addr"));    verify(dao).search(eq(expectedSearchRequest));    verifyNoMoreInteractions(dao);}
public void metron_f2009_0() throws Exception
{    exception.expect(RestException.class);    when(dao.search(any(SearchRequest.class))).thenThrow(InvalidSearchException.class);    SearchRequest searchRequest = new SearchRequest();    searchRequest.setIndices(Arrays.asList("bro"));    searchRequest.setFacetFields(Arrays.asList("ip_src_addr"));    searchService.search(searchRequest);}
public void metron_f2010_0() throws Exception
{    when(environment.getProperty(INDEX_WRITER_NAME)).thenReturn("elasticsearch");    when(sensorIndexingConfigService.getAllIndices("elasticsearch")).thenReturn(Arrays.asList("bro", "snort", "error"));    searchService.getColumnMetadata(new ArrayList<>());    verify(dao).getColumnMetadata(eq(Arrays.asList("bro", "snort", "metaalert")));    verifyNoMoreInteractions(dao);}
public void metron_f2011_0() throws RestException
{    when(environment.getProperty(SEARCH_FACET_FIELDS_SPRING_PROPERTY, String.class, "")).thenReturn("ip_src_addr");    Map<String, Object> globalConfig = new HashMap<>();    globalConfig.put(SENSOR_TYPE_FIELD_PROPERTY, "source.type");    when(globalConfigService.get()).thenReturn(globalConfig);    when(alertsUIService.getAlertsUIUserSettings()).thenReturn(Optional.empty());    List<String> defaultFields = searchService.getDefaultFacetFields();    List<String> expectedFields = new ArrayList<>();    expectedFields.add("source.type");    expectedFields.add("ip_src_addr");    assertEquals(expectedFields, defaultFields);}
public void metron_f2012_0() throws RestException
{    when(environment.getProperty(SEARCH_FACET_FIELDS_SPRING_PROPERTY, String.class, "")).thenReturn("ip_src_addr");    Map<String, Object> globalConfig = new HashMap<>();    when(globalConfigService.get()).thenReturn(globalConfig);    when(alertsUIService.getAlertsUIUserSettings()).thenReturn(Optional.empty());    List<String> defaultFields = searchService.getDefaultFacetFields();    List<String> expectedFields = new ArrayList<>();    expectedFields.add("source:type");    expectedFields.add("ip_src_addr");    assertEquals(expectedFields, defaultFields);}
public void metron_f2013_0() throws Exception
{    objectMapper = mock(ObjectMapper.class);    curatorFramework = mock(CuratorFramework.class);    cache = mock(ConfigurationsCache.class);    hBaseClient = mock(HBaseClient.class);    sensorEnrichmentConfigService = new SensorEnrichmentConfigServiceImpl(objectMapper, curatorFramework, cache, hBaseClient);}
public void metron_f2014_0() throws Exception
{    DeleteBuilder builder = mock(DeleteBuilder.class);    when(curatorFramework.delete()).thenReturn(builder);    when(builder.forPath(ConfigurationType.ENRICHMENT.getZookeeperRoot() + "/bro")).thenThrow(KeeperException.NoNodeException.class);    assertFalse(sensorEnrichmentConfigService.delete("bro"));}
public void metron_f2015_0() throws Exception
{    exception.expect(RestException.class);    DeleteBuilder builder = mock(DeleteBuilder.class);    when(curatorFramework.delete()).thenReturn(builder);    when(builder.forPath(ConfigurationType.ENRICHMENT.getZookeeperRoot() + "/bro")).thenThrow(Exception.class);    assertFalse(sensorEnrichmentConfigService.delete("bro"));}
public void metron_f2016_0() throws Exception
{    DeleteBuilder builder = mock(DeleteBuilder.class);    when(curatorFramework.delete()).thenReturn(builder);    when(builder.forPath(ConfigurationType.ENRICHMENT.getZookeeperRoot() + "/bro")).thenReturn(null);    assertTrue(sensorEnrichmentConfigService.delete("bro"));    verify(curatorFramework).delete();}
public void metron_f2017_0() throws Exception
{    final SensorEnrichmentConfig sensorEnrichmentConfig = getTestSensorEnrichmentConfig();    EnrichmentConfigurations configs = new EnrichmentConfigurations() {        @Override        public Map<String, Object> getConfigurations() {            return ImmutableMap.of(EnrichmentConfigurations.getKey("bro"), sensorEnrichmentConfig);        }    };    when(cache.get(eq(EnrichmentConfigurations.class))).thenReturn(configs);        assertEquals(getTestSensorEnrichmentConfig(), sensorEnrichmentConfigService.findOne("bro"));        assertNull(sensorEnrichmentConfigService.findOne("blah"));}
public Map<String, Object> metron_f2018_0()
{    return ImmutableMap.of(EnrichmentConfigurations.getKey("bro"), sensorEnrichmentConfig);}
public void metron_f2019_0() throws Exception
{    EnrichmentConfigurations configs = new EnrichmentConfigurations() {        @Override        public Map<String, Object> getConfigurations() {            return ImmutableMap.of(EnrichmentConfigurations.getKey("bro"), new HashMap<>(), EnrichmentConfigurations.getKey("squid"), new HashMap<>());        }    };    when(cache.get(eq(EnrichmentConfigurations.class))).thenReturn(configs);    assertEquals(new ArrayList() {        {            add("bro");            add("squid");        }    }, sensorEnrichmentConfigService.getAllTypes());}
public Map<String, Object> metron_f2020_0()
{    return ImmutableMap.of(EnrichmentConfigurations.getKey("bro"), new HashMap<>(), EnrichmentConfigurations.getKey("squid"), new HashMap<>());}
public void metron_f2021_0() throws Exception
{    final SensorEnrichmentConfig sensorEnrichmentConfig = getTestSensorEnrichmentConfig();    EnrichmentConfigurations configs = new EnrichmentConfigurations() {        @Override        public Map<String, Object> getConfigurations() {            return ImmutableMap.of(EnrichmentConfigurations.getKey("bro"), sensorEnrichmentConfig);        }    };    when(cache.get(eq(EnrichmentConfigurations.class))).thenReturn(configs);    assertEquals(new HashMap() {        {            put("bro", sensorEnrichmentConfig);        }    }, sensorEnrichmentConfigService.getAll());}
public Map<String, Object> metron_f2022_0()
{    return ImmutableMap.of(EnrichmentConfigurations.getKey("bro"), sensorEnrichmentConfig);}
public void metron_f2023_0() throws Exception
{    exception.expect(RestException.class);    SetDataBuilder setDataBuilder = mock(SetDataBuilder.class);    when(setDataBuilder.forPath(ConfigurationType.ENRICHMENT.getZookeeperRoot() + "/bro", broJson.getBytes(StandardCharsets.UTF_8))).thenThrow(Exception.class);    when(curatorFramework.setData()).thenReturn(setDataBuilder);    sensorEnrichmentConfigService.save("bro", new SensorEnrichmentConfig());}
public void metron_f2024_0() throws Exception
{    final SensorEnrichmentConfig sensorEnrichmentConfig = getTestSensorEnrichmentConfig();    when(objectMapper.writeValueAsString(sensorEnrichmentConfig)).thenReturn(broJson);    SetDataBuilder setDataBuilder = mock(SetDataBuilder.class);    when(setDataBuilder.forPath(ConfigurationType.ENRICHMENT.getZookeeperRoot() + "/bro", broJson.getBytes(StandardCharsets.UTF_8))).thenReturn(new Stat());    when(curatorFramework.setData()).thenReturn(setDataBuilder);    assertEquals(sensorEnrichmentConfig, sensorEnrichmentConfigService.save("bro", sensorEnrichmentConfig));    verify(setDataBuilder).forPath(eq(ConfigurationType.ENRICHMENT.getZookeeperRoot() + "/bro"), eq(broJson.getBytes(StandardCharsets.UTF_8)));}
public void metron_f2025_0() throws Exception
{    when(hBaseClient.readRecords()).thenReturn(new ArrayList<String>() {        {            add("geo");            add("whois");            add("host");            add("a-new-one");        }    });    assertEquals(new ArrayList<String>() {        {            add("a-new-one");            add("geo");            add("host");            add("whois");        }    }, sensorEnrichmentConfigService.getAvailableEnrichments());}
public void metron_f2026_0() throws Exception
{    assertEquals(new ArrayList<String>() {        {            add("MAX");            add("MIN");            add("SUM");            add("MEAN");            add("POSITIVE_MEAN");        }    }, sensorEnrichmentConfigService.getAvailableThreatTriageAggregators());}
private SensorEnrichmentConfig metron_f2027_0()
{    SensorEnrichmentConfig sensorEnrichmentConfig = new SensorEnrichmentConfig();    EnrichmentConfig enrichmentConfig = new EnrichmentConfig();    enrichmentConfig.setFieldMap(new HashMap() {        {            put("geo", Arrays.asList("ip_dst_addr"));        }    });    sensorEnrichmentConfig.setEnrichment(enrichmentConfig);    ThreatIntelConfig threatIntelConfig = new ThreatIntelConfig();    threatIntelConfig.setFieldMap(new HashMap() {        {            put("hbaseThreatIntel", Arrays.asList("ip_src_addr"));        }    });    threatIntelConfig.setFieldToTypeMap(new HashMap() {        {            put("ip_src_addr", Arrays.asList("malicious_ip"));        }    });    sensorEnrichmentConfig.setThreatIntel(threatIntelConfig);    return sensorEnrichmentConfig;}
public void metron_f2028_0() throws Exception
{    objectMapper = mock(ObjectMapper.class);    curatorFramework = mock(CuratorFramework.class);    cache = mock(ConfigurationsCache.class);    sensorIndexingConfigService = new SensorIndexingConfigServiceImpl(objectMapper, curatorFramework, cache);}
public void metron_f2029_0() throws Exception
{    DeleteBuilder builder = mock(DeleteBuilder.class);    when(curatorFramework.delete()).thenReturn(builder);    when(builder.forPath(ConfigurationType.INDEXING.getZookeeperRoot() + "/bro")).thenThrow(KeeperException.NoNodeException.class);    assertFalse(sensorIndexingConfigService.delete("bro"));}
public void metron_f2030_0() throws Exception
{    exception.expect(RestException.class);    DeleteBuilder builder = mock(DeleteBuilder.class);    when(curatorFramework.delete()).thenReturn(builder);    when(builder.forPath(ConfigurationType.INDEXING.getZookeeperRoot() + "/bro")).thenThrow(Exception.class);    assertFalse(sensorIndexingConfigService.delete("bro"));}
public void metron_f2031_0() throws Exception
{    DeleteBuilder builder = mock(DeleteBuilder.class);    when(curatorFramework.delete()).thenReturn(builder);    when(builder.forPath(ConfigurationType.INDEXING.getZookeeperRoot() + "/bro")).thenReturn(null);    assertTrue(sensorIndexingConfigService.delete("bro"));    verify(curatorFramework).delete();}
public void metron_f2032_0() throws Exception
{    final Map<String, Object> sensorIndexingConfig = getTestSensorIndexingConfig();    IndexingConfigurations configs = new IndexingConfigurations() {        @Override        public Map<String, Object> getConfigurations() {            return ImmutableMap.of(IndexingConfigurations.getKey("bro"), sensorIndexingConfig);        }    };    when(cache.get(eq(IndexingConfigurations.class))).thenReturn(configs);        assertEquals(getTestSensorIndexingConfig(), sensorIndexingConfigService.findOne("bro"));        assertNull(sensorIndexingConfigService.findOne("blah"));}
public Map<String, Object> metron_f2033_0()
{    return ImmutableMap.of(IndexingConfigurations.getKey("bro"), sensorIndexingConfig);}
public void metron_f2034_0() throws RestException
{    ParserConfigurations parserConfiguration = mock(ParserConfigurations.class);    when(parserConfiguration.getTypes()).thenReturn(ImmutableList.of("bro", "snort"));    IndexingConfigurations indexingConfiguration = mock(IndexingConfigurations.class);    when(indexingConfiguration.getTypes()).thenReturn(Collections.emptyList());    when(indexingConfiguration.getIndex(eq("bro"), eq("elasticsearch"))).thenReturn(null);    when(indexingConfiguration.getIndex(eq("snort"), eq("elasticsearch"))).thenReturn(null);    when(indexingConfiguration.isEnabled(eq("snort"), eq("elasticsearch"))).thenReturn(true);    when(indexingConfiguration.isEnabled(eq("bro"), eq("elasticsearch"))).thenReturn(true);    when(cache.get(eq(ParserConfigurations.class))).thenReturn(parserConfiguration);    when(cache.get(eq(IndexingConfigurations.class))).thenReturn(indexingConfiguration);    List<String> indices = new ArrayList<String>();    Iterables.addAll(indices, sensorIndexingConfigService.getAllIndices("elasticsearch"));    Assert.assertEquals(2, indices.size());    Assert.assertTrue(indices.contains("bro"));    Assert.assertTrue(indices.contains("snort"));}
public void metron_f2035_0() throws RestException
{    ParserConfigurations parserConfiguration = mock(ParserConfigurations.class);    when(parserConfiguration.getTypes()).thenReturn(Collections.emptyList());    IndexingConfigurations indexingConfiguration = mock(IndexingConfigurations.class);        when(indexingConfiguration.getTypes()).thenReturn(ImmutableList.of("bro", "snort", "yaf"));    when(indexingConfiguration.getIndex(eq("bro"), eq("elasticsearch"))).thenReturn("renamed_bro");    when(indexingConfiguration.getIndex(eq("snort"), eq("elasticsearch"))).thenReturn(null);    when(indexingConfiguration.isEnabled(eq("snort"), eq("elasticsearch"))).thenReturn(true);    when(indexingConfiguration.isEnabled(eq("bro"), eq("elasticsearch"))).thenReturn(true);    when(indexingConfiguration.isEnabled(eq("yaf"), eq("elasticsearch"))).thenReturn(false);    when(cache.get(eq(ParserConfigurations.class))).thenReturn(parserConfiguration);    when(cache.get(eq(IndexingConfigurations.class))).thenReturn(indexingConfiguration);    List<String> indices = new ArrayList<String>();    Iterables.addAll(indices, sensorIndexingConfigService.getAllIndices("elasticsearch"));    Assert.assertEquals(2, indices.size());    Assert.assertTrue(indices.contains("renamed_bro"));    Assert.assertTrue(indices.contains("snort"));}
public void metron_f2036_0() throws RestException
{    ParserConfigurations parserConfiguration = mock(ParserConfigurations.class);    when(parserConfiguration.getTypes()).thenReturn(ImmutableList.of("bro", "yaf"));    IndexingConfigurations indexingConfiguration = mock(IndexingConfigurations.class);    when(indexingConfiguration.getTypes()).thenReturn(ImmutableList.of("bro", "snort", "squid"));    when(indexingConfiguration.getIndex(eq("bro"), eq("elasticsearch"))).thenReturn("renamed_bro");    when(indexingConfiguration.getIndex(eq("snort"), eq("elasticsearch"))).thenReturn("snort");    when(indexingConfiguration.getIndex(eq("yaf"), eq("elasticsearch"))).thenReturn(null);    when(indexingConfiguration.isEnabled(eq("snort"), eq("elasticsearch"))).thenReturn(true);    when(indexingConfiguration.isEnabled(eq("bro"), eq("elasticsearch"))).thenReturn(true);    when(indexingConfiguration.isEnabled(eq("yaf"), eq("elasticsearch"))).thenReturn(true);    when(indexingConfiguration.isEnabled(eq("squid"), eq("elasticsearch"))).thenReturn(false);    when(cache.get(eq(ParserConfigurations.class))).thenReturn(parserConfiguration);    when(cache.get(eq(IndexingConfigurations.class))).thenReturn(indexingConfiguration);    List<String> indices = new ArrayList<String>();    Iterables.addAll(indices, sensorIndexingConfigService.getAllIndices("elasticsearch"));    Assert.assertEquals(3, indices.size());    Assert.assertTrue(indices.contains("renamed_bro"));    Assert.assertTrue(indices.contains("snort"));    Assert.assertTrue(indices.contains("yaf"));}
public void metron_f2037_0() throws RestException
{    ParserConfigurations parserConfiguration = mock(ParserConfigurations.class);    when(parserConfiguration.getTypes()).thenReturn(Collections.emptyList());    IndexingConfigurations indexingConfiguration = mock(IndexingConfigurations.class);    when(indexingConfiguration.getTypes()).thenReturn(Collections.emptyList());    when(cache.get(eq(ParserConfigurations.class))).thenReturn(parserConfiguration);    when(cache.get(eq(IndexingConfigurations.class))).thenReturn(indexingConfiguration);    List<String> indices = new ArrayList<String>();    Iterables.addAll(indices, sensorIndexingConfigService.getAllIndices("elasticsearch"));    Assert.assertEquals(0, indices.size());}
public void metron_f2038_0() throws Exception
{    IndexingConfigurations configs = new IndexingConfigurations() {        @Override        public Map<String, Object> getConfigurations() {            return ImmutableMap.of(IndexingConfigurations.getKey("bro"), new HashMap<>(), IndexingConfigurations.getKey("squid"), new HashMap<>());        }    };    when(cache.get(eq(IndexingConfigurations.class))).thenReturn(configs);    assertEquals(new ArrayList() {        {            add("bro");            add("squid");        }    }, sensorIndexingConfigService.getAllTypes());}
public Map<String, Object> metron_f2039_0()
{    return ImmutableMap.of(IndexingConfigurations.getKey("bro"), new HashMap<>(), IndexingConfigurations.getKey("squid"), new HashMap<>());}
public void metron_f2040_0() throws Exception
{    final Map<String, Object> sensorIndexingConfig = getTestSensorIndexingConfig();    IndexingConfigurations configs = new IndexingConfigurations() {        @Override        public Map<String, Object> getConfigurations() {            return ImmutableMap.of(IndexingConfigurations.getKey("bro"), sensorIndexingConfig);        }    };    when(cache.get(eq(IndexingConfigurations.class))).thenReturn(configs);    assertEquals(new HashMap() {        {            put("bro", sensorIndexingConfig);        }    }, sensorIndexingConfigService.getAll());}
public Map<String, Object> metron_f2041_0()
{    return ImmutableMap.of(IndexingConfigurations.getKey("bro"), sensorIndexingConfig);}
public void metron_f2042_0() throws Exception
{    exception.expect(RestException.class);    SetDataBuilder setDataBuilder = mock(SetDataBuilder.class);    when(setDataBuilder.forPath(ConfigurationType.INDEXING.getZookeeperRoot() + "/bro", broJson.getBytes(StandardCharsets.UTF_8))).thenThrow(Exception.class);    when(curatorFramework.setData()).thenReturn(setDataBuilder);    sensorIndexingConfigService.save("bro", new HashMap<>());}
public void metron_f2043_0() throws Exception
{    final Map<String, Object> sensorIndexingConfig = getTestSensorIndexingConfig();    when(objectMapper.writeValueAsString(sensorIndexingConfig)).thenReturn(broJson);    SetDataBuilder setDataBuilder = mock(SetDataBuilder.class);    when(setDataBuilder.forPath(ConfigurationType.INDEXING.getZookeeperRoot() + "/bro", broJson.getBytes(StandardCharsets.UTF_8))).thenReturn(new Stat());    when(curatorFramework.setData()).thenReturn(setDataBuilder);    assertEquals(sensorIndexingConfig, sensorIndexingConfigService.save("bro", sensorIndexingConfig));    verify(setDataBuilder).forPath(eq(ConfigurationType.INDEXING.getZookeeperRoot() + "/bro"), eq(broJson.getBytes(StandardCharsets.UTF_8)));}
private Map<String, Object> metron_f2044_0()
{    Map<String, Object> sensorIndexingConfig = new HashMap<>();    sensorIndexingConfig.put("hdfs", new HashMap() {        {            put("index", "bro");            put("batchSize", 5);            put("enabled", true);        }    });    return sensorIndexingConfig;}
public void metron_f2045_0() throws Exception
{    objectMapper = mock(ObjectMapper.class);    curatorFramework = mock(CuratorFramework.class);    Environment environment = mock(Environment.class);    Authentication authentication = mock(Authentication.class);    when(authentication.getName()).thenReturn(user);    SecurityContextHolder.getContext().setAuthentication(authentication);    when(environment.getProperty(GROK_TEMP_PATH_SPRING_PROPERTY)).thenReturn("./target");    grokService = new GrokServiceImpl(environment, mock(Grok.class), new HdfsServiceImpl(new Configuration()));    cache = mock(ConfigurationsCache.class);    sensorParserConfigService = new SensorParserConfigServiceImpl(objectMapper, curatorFramework, grokService, cache);}
public void metron_f2046_0() throws Exception
{    DeleteBuilder builder = mock(DeleteBuilder.class);    when(curatorFramework.delete()).thenReturn(builder);    when(builder.forPath(ConfigurationType.PARSER.getZookeeperRoot() + "/bro")).thenThrow(KeeperException.NoNodeException.class);    assertFalse(sensorParserConfigService.delete("bro"));}
public void metron_f2047_0() throws Exception
{    exception.expect(RestException.class);    DeleteBuilder builder = mock(DeleteBuilder.class);    when(curatorFramework.delete()).thenReturn(builder);    when(builder.forPath(ConfigurationType.PARSER.getZookeeperRoot() + "/bro")).thenThrow(Exception.class);    assertFalse(sensorParserConfigService.delete("bro"));}
public void metron_f2048_0() throws Exception
{    DeleteBuilder builder = mock(DeleteBuilder.class);    when(curatorFramework.delete()).thenReturn(builder);    when(builder.forPath(ConfigurationType.PARSER.getZookeeperRoot() + "/bro")).thenReturn(null);    assertTrue(sensorParserConfigService.delete("bro"));    verify(curatorFramework).delete();}
public void metron_f2049_0() throws Exception
{    final SensorParserConfig sensorParserConfig = getTestBroSensorParserConfig();    ParserConfigurations configs = new ParserConfigurations() {        @Override        public Map<String, Object> getConfigurations() {            return ImmutableMap.of(ParserConfigurations.getKey("bro"), sensorParserConfig);        }    };    when(cache.get(eq(ParserConfigurations.class))).thenReturn(configs);        assertEquals(getTestBroSensorParserConfig(), sensorParserConfigService.findOne("bro"));        assertNull(sensorParserConfigService.findOne("blah"));}
public Map<String, Object> metron_f2050_0()
{    return ImmutableMap.of(ParserConfigurations.getKey("bro"), sensorParserConfig);}
public void metron_f2051_0() throws Exception
{    ParserConfigurations configs = new ParserConfigurations() {        @Override        public Map<String, Object> getConfigurations() {            return ImmutableMap.of(ParserConfigurations.getKey("bro"), new HashMap<>(), ParserConfigurations.getKey("squid"), new HashMap<>());        }    };    when(cache.get(eq(ParserConfigurations.class))).thenReturn(configs);    assertEquals(new ArrayList() {        {            add("bro");            add("squid");        }    }, sensorParserConfigService.getAllTypes());}
public Map<String, Object> metron_f2052_0()
{    return ImmutableMap.of(ParserConfigurations.getKey("bro"), new HashMap<>(), ParserConfigurations.getKey("squid"), new HashMap<>());}
public void metron_f2053_0() throws Exception
{    final SensorParserConfig broSensorParserConfig = getTestBroSensorParserConfig();    final SensorParserConfig squidSensorParserConfig = getTestSquidSensorParserConfig();    ParserConfigurations configs = new ParserConfigurations() {        @Override        public Map<String, Object> getConfigurations() {            return ImmutableMap.of(ParserConfigurations.getKey("bro"), broSensorParserConfig, ParserConfigurations.getKey("squid"), squidSensorParserConfig);        }    };    when(cache.get(eq(ParserConfigurations.class))).thenReturn(configs);    assertEquals(new HashMap() {        {            put("bro", getTestBroSensorParserConfig());            put("squid", getTestSquidSensorParserConfig());        }    }, sensorParserConfigService.getAll());}
public Map<String, Object> metron_f2054_0()
{    return ImmutableMap.of(ParserConfigurations.getKey("bro"), broSensorParserConfig, ParserConfigurations.getKey("squid"), squidSensorParserConfig);}
public void metron_f2055_0() throws Exception
{    exception.expect(RestException.class);    SetDataBuilder setDataBuilder = mock(SetDataBuilder.class);    when(setDataBuilder.forPath(ConfigurationType.PARSER.getZookeeperRoot() + "/bro", broJson.getBytes(StandardCharsets.UTF_8))).thenThrow(Exception.class);    when(curatorFramework.setData()).thenReturn(setDataBuilder);    final SensorParserConfig sensorParserConfig = new SensorParserConfig();    sensorParserConfig.setSensorTopic("bro");    sensorParserConfigService.save("bro", sensorParserConfig);}
public void metron_f2056_0() throws Exception
{    final SensorParserConfig sensorParserConfig = getTestBroSensorParserConfig();    when(objectMapper.writeValueAsString(sensorParserConfig)).thenReturn(broJson);    SetDataBuilder setDataBuilder = mock(SetDataBuilder.class);    when(setDataBuilder.forPath(ConfigurationType.PARSER.getZookeeperRoot() + "/bro", broJson.getBytes(StandardCharsets.UTF_8))).thenReturn(new Stat());    when(curatorFramework.setData()).thenReturn(setDataBuilder);    assertEquals(getTestBroSensorParserConfig(), sensorParserConfigService.save("bro", sensorParserConfig));    verify(setDataBuilder).forPath(eq(ConfigurationType.PARSER.getZookeeperRoot() + "/bro"), eq(broJson.getBytes(StandardCharsets.UTF_8)));}
public void metron_f2057_0() throws Exception
{    Map<String, String> availableParsers = sensorParserConfigService.reloadAvailableParsers();    assertTrue(availableParsers.size() > 0);    assertEquals("org.apache.metron.parsers.GrokParser", availableParsers.get("Grok"));    assertEquals("org.apache.metron.parsers.bro.BasicBroParser", availableParsers.get("Bro"));}
public void metron_f2058_0() throws Exception
{    final SensorParserConfig sensorParserConfig = getTestSquidSensorParserConfig();    String grokStatement = "SQUID_DELIMITED %{NUMBER:timestamp}[^0-9]*%{INT:elapsed} %{IP:ip_src_addr} %{WORD:action}/%{NUMBER:code} %{NUMBER:bytes} %{WORD:method} %{NOTSPACE:url}[^0-9]*(%{IP:ip_dst_addr})?";    String sampleData = "1461576382.642    161 127.0.0.1 TCP_MISS/200 103701 GET http://www.cnn.com/ - DIRECT/199.27.79.73 text/html";    ParseMessageRequest parseMessageRequest = new ParseMessageRequest();    parseMessageRequest.setSensorParserConfig(sensorParserConfig);    parseMessageRequest.setGrokStatement(grokStatement);    parseMessageRequest.setSampleData(sampleData);    File grokRoot = new File("./target", user);    grokRoot.mkdir();    File patternFile = new File(grokRoot, "squid");    Writer writer = new OutputStreamWriter(new FileOutputStream(patternFile), StandardCharsets.UTF_8);    writer.write(grokStatement);    writer.close();    assertEquals(new HashMap() {        {            put("elapsed", 161);            put("code", 200);            put("ip_dst_addr", "199.27.79.73");            put("ip_src_addr", "127.0.0.1");            put("action", "TCP_MISS");            put("bytes", 103701);            put("method", "GET");            put("url", "http://www.cnn.com/");            put("timestamp", 1461576382642L);            put("original_string", "1461576382.642    161 127.0.0.1 TCP_MISS/200 103701 GET http://www.cnn.com/ - DIRECT/199.27.79.73 text/html");        }    }, sensorParserConfigService.parseMessage(parseMessageRequest));}
public void metron_f2059_0() throws Exception
{    exception.expect(RestException.class);    ParseMessageRequest parseMessageRequest = new ParseMessageRequest();    sensorParserConfigService.parseMessage(parseMessageRequest);}
public void metron_f2060_0() throws Exception
{    exception.expect(RestException.class);    final SensorParserConfig sensorParserConfig = new SensorParserConfig();    sensorParserConfig.setSensorTopic("squid");    ParseMessageRequest parseMessageRequest = new ParseMessageRequest();    parseMessageRequest.setSensorParserConfig(sensorParserConfig);    sensorParserConfigService.parseMessage(parseMessageRequest);}
public void metron_f2061_0() throws Exception
{    exception.expect(RestException.class);    final SensorParserConfig sensorParserConfig = new SensorParserConfig();    sensorParserConfig.setSensorTopic("squid");    sensorParserConfig.setParserClassName("bad.class.package.BadClassName");    ParseMessageRequest parseMessageRequest = new ParseMessageRequest();    parseMessageRequest.setSensorParserConfig(sensorParserConfig);    sensorParserConfigService.parseMessage(parseMessageRequest);}
private SensorParserConfig metron_f2062_0()
{    SensorParserConfig sensorParserConfig = new SensorParserConfig();    sensorParserConfig.setSensorTopic("bro");    sensorParserConfig.setParserClassName("org.apache.metron.parsers.bro.BasicBroParser");    return sensorParserConfig;}
private SensorParserConfig metron_f2063_0()
{    SensorParserConfig sensorParserConfig = new SensorParserConfig();    sensorParserConfig.setSensorTopic("squid");    sensorParserConfig.setParserClassName("org.apache.metron.parsers.GrokParser");    sensorParserConfig.setParserConfig(new HashMap() {        {            put("grokPath", "/patterns/squid");            put("patternLabel", "SQUID_DELIMITED");            put("timestampField", "timestamp");        }    });    return sensorParserConfig;}
public void metron_f2064_0() throws Exception
{    cache = mock(ConfigurationsCache.class);    globalConfigService = mock(GlobalConfigService.class);    sensorParserConfigService = mock(SensorParserConfigService.class);    sensorParserGroupService = new SensorParserGroupServiceImpl(cache, globalConfigService, sensorParserConfigService);}
public void metron_f2065_0() throws Exception
{    when(cache.get(ParserConfigurations.class)).thenReturn(new ParserConfigurations());    when(sensorParserConfigService.findOne("bro")).thenReturn(new SensorParserConfig());    SensorParserGroup sensorParserGroup = new SensorParserGroup();    sensorParserGroup.setName("group1");    sensorParserGroup.setDescription("description 1");    sensorParserGroup.setSensors(Collections.singleton("bro"));    Map<String, Object> expectedGlobalConfig = new HashMap<>();    Collection<SensorParserGroup> expectedGroup = Collections.singleton(sensorParserGroup);    expectedGlobalConfig.put(PARSER_GROUPS_CONF, expectedGroup);    assertEquals(sensorParserGroup, sensorParserGroupService.save(sensorParserGroup));    verify(globalConfigService, times(1)).save(expectedGlobalConfig);    verifyNoMoreInteractions(globalConfigService);}
public void metron_f2066_0() throws Exception
{    SensorParserGroup oldGroup = new SensorParserGroup();    oldGroup.setName("oldGroup");    oldGroup.setDescription("old description");    oldGroup.setSensors(Collections.singleton("oldSensor"));    ParserConfigurations parserConfigurations = mock(ParserConfigurations.class);    when(cache.get(ParserConfigurations.class)).thenReturn(new ParserConfigurations());    when(parserConfigurations.getSensorParserGroups()).thenReturn(new HashMap<String, SensorParserGroup>() {        {            put("newSensor", oldGroup);        }    });    when(sensorParserConfigService.findOne("newSensor")).thenReturn(new SensorParserConfig());    SensorParserGroup newGroup = new SensorParserGroup();    newGroup.setName("newGroup");    newGroup.setDescription("new description");    newGroup.setSensors(Collections.singleton("newSensor"));    Map<String, Object> expectedGlobalConfig = new HashMap<>();    Collection<SensorParserGroup> expectedGroup = Collections.singleton(newGroup);    expectedGlobalConfig.put(PARSER_GROUPS_CONF, expectedGroup);    assertEquals(newGroup, sensorParserGroupService.save(newGroup));    verify(globalConfigService, times(1)).save(expectedGlobalConfig);    verifyNoMoreInteractions(globalConfigService);}
public void metron_f2067_0() throws Exception
{    exception.expect(RestException.class);    exception.expectMessage("A parser group must contain sensors");    when(cache.get(ParserConfigurations.class)).thenReturn(new ParserConfigurations());    sensorParserGroupService.save(new SensorParserGroup());}
public void metron_f2068_0() throws Exception
{    exception.expect(RestException.class);    exception.expectMessage("Could not find config for sensor bro");    when(cache.get(ParserConfigurations.class)).thenReturn(new ParserConfigurations());    SensorParserGroup sensorParserGroup = new SensorParserGroup();    sensorParserGroup.setSensors(Collections.singleton("bro"));    sensorParserGroupService.save(sensorParserGroup);}
public void metron_f2069_0() throws Exception
{    exception.expect(RestException.class);    exception.expectMessage("Sensor bro is already in group existingGroup");    SensorParserGroup existingGroup = new SensorParserGroup();    existingGroup.setName("existingGroup");    existingGroup.setSensors(Collections.singleton("bro"));    ParserConfigurations parserConfigurations = mock(ParserConfigurations.class);    when(parserConfigurations.getSensorParserGroups()).thenReturn(new HashMap<String, SensorParserGroup>() {        {            put("existingGroup", existingGroup);        }    });    when(cache.get(ParserConfigurations.class)).thenReturn(parserConfigurations);    when(sensorParserConfigService.findOne("bro")).thenReturn(new SensorParserConfig());    SensorParserGroup newGroup = new SensorParserGroup();    newGroup.setName("newGroup");    newGroup.setSensors(Collections.singleton("bro"));    sensorParserGroupService.save(newGroup);}
public void metron_f2070_0() throws Exception
{    ParserConfigurations parserConfigurations = mock(ParserConfigurations.class);    SensorParserGroup group1 = new SensorParserGroup();    group1.setName("group1");    group1.setDescription("group1 description");    group1.setSensors(Collections.singleton("group1Sensor"));    SensorParserGroup group2 = new SensorParserGroup();    group2.setName("group2");    group2.setDescription("group2 description");    group2.setSensors(Collections.singleton("group2Sensor"));    when(parserConfigurations.getSensorParserGroups()).thenReturn(new HashMap<String, SensorParserGroup>() {        {            put("group1", group1);            put("group2", group2);        }    });    when(cache.get(ParserConfigurations.class)).thenReturn(parserConfigurations);    assertEquals(group2, sensorParserGroupService.findOne("group2"));}
public void metron_f2071_0() throws Exception
{    ParserConfigurations parserConfigurations = mock(ParserConfigurations.class);    SensorParserGroup group1 = new SensorParserGroup();    group1.setName("group1");    group1.setDescription("group1 description");    group1.setSensors(Collections.singleton("group1Sensor"));    when(parserConfigurations.getSensorParserGroups()).thenReturn(new HashMap<String, SensorParserGroup>() {        {            put("group1", group1);        }    });    when(cache.get(ParserConfigurations.class)).thenReturn(parserConfigurations);    Map<String, Object> expectedGlobalConfig = new HashMap<>();    expectedGlobalConfig.put(PARSER_GROUPS_CONF, new HashSet<>());    assertEquals(true, sensorParserGroupService.delete("group1"));    assertEquals(false, sensorParserGroupService.delete("group2"));    verify(globalConfigService, times(1)).save(expectedGlobalConfig);    verifyNoMoreInteractions(globalConfigService);}
public void metron_f2072_0() throws Exception
{    curatorFramework = mock(CuratorFramework.class);    stellarService = new StellarServiceImpl(curatorFramework);}
public void metron_f2073_0()
{    List<String> rules = Arrays.asList("TO_LOWER(test)", "BAD_FUNCTION(test)");    Map<String, Boolean> results = stellarService.validateRules(rules);    assertEquals(2, results.size());    assertEquals(true, results.get("TO_LOWER(test)"));    assertEquals(false, results.get("BAD_FUNCTION(test)"));}
public void metron_f2074_0()
{    SensorParserConfig sensorParserConfig = new SensorParserConfig();    FieldTransformer fieldTransformater = new FieldTransformer();    fieldTransformater.setOutput("url_host");    fieldTransformater.setTransformation("STELLAR");    fieldTransformater.setConfig(new LinkedHashMap<String, Object>() {        {            put("url_host", "TO_LOWER(URL_TO_HOST(url))");        }    });    sensorParserConfig.setFieldTransformations(ImmutableList.of(fieldTransformater));    SensorParserContext sensorParserContext = new SensorParserContext();    sensorParserContext.setSensorParserConfig(sensorParserConfig);    sensorParserContext.setSampleData(new HashMap<String, Object>() {        {            put("url", "https://caseystella.com/blog");        }    });    Map<String, Object> results = stellarService.applyTransformations(sensorParserContext);    assertEquals(2, results.size());    assertEquals("https://caseystella.com/blog", results.get("url"));    assertEquals("caseystella.com", results.get("url_host"));}
public void metron_f2075_0()
{    assertTrue(stellarService.getTransformations().length > 0);}
public void metron_f2076_0()
{    assertTrue(stellarService.getStellarFunctions().size() > 0);}
public void metron_f2077_0()
{    assertEquals(1, stellarService.getSimpleStellarFunctions().stream().filter(stellarFunctionDescription -> stellarFunctionDescription.getName().equals("TO_LOWER")).count());}
public void metron_f2078_0() throws Exception
{    stormCLIClientWrapper = mock(StormCLIWrapper.class);    globalConfigService = mock(GlobalConfigService.class);    sensorParserConfigService = mock(SensorParserConfigService.class);    sensorParserGroupService = mock(SensorParserGroupService.class);    stormStatusService = mock(StormStatusService.class);    stormAdminService = new StormAdminServiceImpl(stormCLIClientWrapper, globalConfigService, sensorParserConfigService, sensorParserGroupService, stormStatusService);}
public void metron_f2079_0() throws Exception
{    when(stormCLIClientWrapper.startParserTopology("bro")).thenReturn(0);    when(globalConfigService.get()).thenReturn(new HashMap<String, Object>());    when(sensorParserConfigService.findOne("bro")).thenReturn(new SensorParserConfig());    TopologyResponse expected = new TopologyResponse();    expected.setSuccessMessage(TopologyStatusCode.STARTED.toString());    TopologyResponse actual = stormAdminService.startParserTopology("bro");    assertEquals(expected, actual);    assertEquals(expected.hashCode(), actual.hashCode());}
public void metron_f2080_0() throws Exception
{    SensorParserGroup group = new SensorParserGroup();    group.setName("group");    group.setSensors(new HashSet<String>() {        {            add("bro");            add("snort");        }    });    when(sensorParserGroupService.findOne("group")).thenReturn(group);    when(stormCLIClientWrapper.startParserTopology("bro,snort")).thenReturn(0);    when(globalConfigService.get()).thenReturn(new HashMap<String, Object>());    when(sensorParserConfigService.findOne("bro")).thenReturn(new SensorParserConfig());    when(sensorParserConfigService.findOne("snort")).thenReturn(new SensorParserConfig());    TopologyResponse expected = new TopologyResponse();    expected.setSuccessMessage(TopologyStatusCode.STARTED.toString());    TopologyResponse actual = stormAdminService.startParserTopology("group");    assertEquals(expected, actual);    assertEquals(expected.hashCode(), actual.hashCode());}
public void metron_f2081_0() throws Exception
{    when(globalConfigService.get()).thenReturn(null);    TopologyResponse expected = new TopologyResponse();    expected.setErrorMessage(TopologyStatusCode.GLOBAL_CONFIG_MISSING.toString());    assertEquals(expected, stormAdminService.startParserTopology("bro"));}
public void metron_f2082_0() throws Exception
{    when(globalConfigService.get()).thenReturn(new HashMap<String, Object>());    when(sensorParserConfigService.findOne("bro")).thenReturn(null);    TopologyResponse expected = new TopologyResponse();    expected.setErrorMessage(TopologyStatusCode.SENSOR_PARSER_CONFIG_MISSING.toString());    assertEquals(expected, stormAdminService.startParserTopology("bro"));}
public void metron_f2083_0() throws Exception
{    TopologyStatus topologyStatus = new TopologyStatus();    topologyStatus.setName("bro");    when(stormCLIClientWrapper.stopParserTopology("bro", false)).thenReturn(1);    when(stormStatusService.getTopologyStatus("bro")).thenReturn(topologyStatus);    TopologyResponse expected = new TopologyResponse();    expected.setErrorMessage(TopologyStatusCode.STOP_ERROR.toString());    assertEquals(expected, stormAdminService.stopParserTopology("bro", false));}
public void metron_f2084_0() throws Exception
{    when(stormCLIClientWrapper.startEnrichmentTopology()).thenReturn(0);    TopologyResponse expected = new TopologyResponse();    expected.setSuccessMessage(TopologyStatusCode.STARTED.toString());    assertEquals(expected, stormAdminService.startEnrichmentTopology());}
public void metron_f2085_0() throws Exception
{    when(stormCLIClientWrapper.stopEnrichmentTopology(false)).thenReturn(0);    TopologyResponse expected = new TopologyResponse();    expected.setSuccessMessage(TopologyStatusCode.STOPPED.toString());    assertEquals(expected, stormAdminService.stopEnrichmentTopology(false));}
public void metron_f2086_0() throws Exception
{    when(stormCLIClientWrapper.startIndexingTopology("random_access_indexing_script_path")).thenReturn(0);    TopologyResponse expected = new TopologyResponse();    expected.setSuccessMessage(TopologyStatusCode.STARTED.toString());    assertEquals(expected, stormAdminService.startIndexingTopology("random_access_indexing_script_path"));}
public void metron_f2087_0() throws Exception
{    when(stormCLIClientWrapper.stopIndexingTopology("random_access_indexing", false)).thenReturn(0);    TopologyResponse expected = new TopologyResponse();    expected.setSuccessMessage(TopologyStatusCode.STOPPED.toString());    assertEquals(expected, stormAdminService.stopIndexingTopology("random_access_indexing", false));}
public void metron_f2088_0() throws Exception
{    final Map<String, String> status = new HashMap() {        {            put("status", "statusValue");        }    };    when(stormCLIClientWrapper.getStormClientStatus()).thenReturn(status);    assertEquals(new HashMap() {        {            put("status", "statusValue");        }    }, stormAdminService.getStormClientStatus());}
