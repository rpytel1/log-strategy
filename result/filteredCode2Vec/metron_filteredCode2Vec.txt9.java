public void metron_f9432_0() throws Exception
{    Map<String, Object> expected = new HashMap<String, Object>() {        {            put("a", "hello");            put("b", "world");        }    };    Map<String, Object> actual = JSONUtils.INSTANCE.load(configFile, Map.class);    Assert.assertThat("config not equal", actual, equalTo(expected));}
public void metron_f9433_0() throws Exception
{    TestConfig expected = new TestConfig().setA("hello").setB("world");    TestConfig actual = JSONUtils.INSTANCE.load(configFile, TestConfig.class);    Assert.assertThat("a not equal", actual.getA(), equalTo(expected.getA()));    Assert.assertThat("b not equal", actual.getB(), equalTo(expected.getB()));}
public String metron_f9434_0()
{    return a;}
public TestConfig metron_f9435_0(String a)
{    this.a = a;    return this;}
public String metron_f9436_0()
{    return b;}
public TestConfig metron_f9437_0(String b)
{    this.b = b;    return this;}
public void metron_f9438_0()
{    final int expected = 2;    byte[] raw = SerDeUtils.toBytes(expected);    int actual = SerDeUtils.fromBytes(raw, Integer.class);    assertEquals(expected, actual);}
public void metron_f9439_0()
{    final double expected = 2.0;    byte[] raw = SerDeUtils.toBytes(expected);    {        double actual = SerDeUtils.fromBytes(raw, Double.class);        assertEquals(expected, actual, 0.01);    }    {        double actual = (double) SerDeUtils.fromBytes(raw, Object.class);        assertEquals(expected, actual, 0.01);    }}
public void metron_f9440_0()
{    final short expected = 2;    byte[] raw = SerDeUtils.toBytes(expected);    {        short actual = SerDeUtils.fromBytes(raw, Short.class);        assertEquals(expected, actual);    }    {        short actual = (short) SerDeUtils.fromBytes(raw, Object.class);        assertEquals(expected, actual);    }}
public void metron_f9441_0()
{    final long expected = 2L;    byte[] raw = SerDeUtils.toBytes(expected);    {        long actual = SerDeUtils.fromBytes(raw, Long.class);        assertEquals(expected, actual);    }    {        long actual = (Long) SerDeUtils.fromBytes(raw, Object.class);        assertEquals(expected, actual);    }}
public void metron_f9442_0()
{    final Float expected = 2.2F;    byte[] raw = SerDeUtils.toBytes(expected);    {        float actual = SerDeUtils.fromBytes(raw, Float.class);        assertEquals(expected, actual, 0.01);    }    {        float actual = (float) SerDeUtils.fromBytes(raw, Object.class);        assertEquals(expected, actual, 0.01);    }}
public void metron_f9443_0()
{    final Map<String, Object> expected = new HashMap<>();    expected.put("foo", "bar");    expected.put("bar", 1.0);    ;    byte[] raw = SerDeUtils.toBytes(expected);    Object actual = SerDeUtils.fromBytes(raw, Object.class);    assertEquals(expected, actual);}
public void metron_f9444_0()
{    final List<String> expected = new ArrayList<String>();    expected.add("foo");    expected.add("bar");    byte[] raw = SerDeUtils.toBytes(expected);    Object actual = SerDeUtils.fromBytes(raw, Object.class);    assertEquals(expected, actual);}
public void metron_f9445_0()
{    final BloomFilter<Object> expected = new BloomFilter<>(new BloomFilter.DefaultSerializer<>(), 10000, 0.01);    expected.add("foo");    expected.add("bar");    byte[] raw = SerDeUtils.toBytes(expected);    BloomFilter<Object> actual = (BloomFilter) SerDeUtils.fromBytes(raw, Object.class);    Assert.assertTrue(actual.mightContain("foo"));    Assert.assertFalse(actual.mightContain("timothy"));    assertEquals(expected, actual);}
public List<String> metron_f9446_0()
{    return list;}
public void metron_f9447_0(List<String> list)
{    this.list = list;}
public String metron_f9448_0()
{    return string;}
public void metron_f9449_0(String string)
{    this.string = string;}
public Double metron_f9450_0()
{    return d;}
public void metron_f9451_0(Double d)
{    this.d = d;}
public Map<String, String> metron_f9452_0()
{    return map;}
public void metron_f9453_0(Map<String, String> map)
{    this.map = map;}
public boolean metron_f9454_0(Object o)
{    if (this == o)        return true;    if (o == null || getClass() != o.getClass())        return false;    ArbitraryPojo that = (ArbitraryPojo) o;    if (getList() != null ? !getList().equals(that.getList()) : that.getList() != null)        return false;    if (getString() != null ? !getString().equals(that.getString()) : that.getString() != null)        return false;    if (getD() != null ? !getD().equals(that.getD()) : that.getD() != null)        return false;    if (getMap() != null ? !getMap().equals(that.getMap()) : that.getMap() != null)        return false;    return immutableList != null ? immutableList.equals(that.immutableList) : that.immutableList == null;}
public int metron_f9455_0()
{    int result = getList() != null ? getList().hashCode() : 0;    result = 31 * result + (getString() != null ? getString().hashCode() : 0);    result = 31 * result + (getD() != null ? getD().hashCode() : 0);    result = 31 * result + (getMap() != null ? getMap().hashCode() : 0);    result = 31 * result + (immutableList != null ? immutableList.hashCode() : 0);    return result;}
public void metron_f9456_0()
{    final ArbitraryPojo expected = new ArbitraryPojo();    byte[] raw = SerDeUtils.toBytes(expected);    Object actual = SerDeUtils.fromBytes(raw, Object.class);    assertEquals(expected, actual);}
public static String metron_f9457_0(String name)
{    return findDir(new File("."), name);}
public static String metron_f9458_0(File startDir, String name)
{    Stack<File> s = new Stack<File>();    s.push(startDir);    while (!s.empty()) {        File parent = s.pop();        if (parent.getName().equalsIgnoreCase(name)) {            return parent.getAbsolutePath();        } else {            File[] children = parent.listFiles();            if (children != null) {                for (File child : children) {                    s.push(child);                }            }        }    }    return null;}
public static void metron_f9459_0(String type, Set<T> expectedPcapIds, Set<T> found)
{    boolean mismatch = false;    for (T f : found) {        if (!expectedPcapIds.contains(f)) {            mismatch = true;            System.out.println("Found " + type + " that I did not expect: " + f);        }    }    for (T expectedId : expectedPcapIds) {        if (!found.contains(expectedId)) {            mismatch = true;            System.out.println("Expected " + type + " that I did not index: " + expectedId);        }    }    Assert.assertFalse(mismatch);}
public static void metron_f9460_0()
{    verboseLogging("%d [%p|%c|%C{1}] %m%n", Level.ALL);}
public static void metron_f9461_0(String pattern, Level level)
{        ConsoleAppender console = new ConsoleAppender();        console.setLayout(new PatternLayout(pattern));    console.setThreshold(level);    console.activateOptions();        Logger.getRootLogger().addAppender(console);}
public static void metron_f9462_0(Class clazz, Level level)
{    Logger logger = Logger.getLogger(clazz);    logger.setLevel(level);}
public static Level metron_f9463_0(Class clazz)
{    Logger logger = Logger.getLogger(clazz);    return logger.getLevel();}
public static void metron_f9464_0(Class clazz, java.util.logging.Level level)
{    java.util.logging.Logger logger = java.util.logging.Logger.getLogger(clazz.getName());    logger.setLevel(level);}
public static java.util.logging.Level metron_f9465_0(Class clazz)
{    java.util.logging.Logger logger = java.util.logging.Logger.getLogger(clazz.getName());    return logger.getLevel();}
public static void metron_f9466_0(java.util.logging.Level level)
{    java.util.logging.Logger logger = java.util.logging.Logger.getLogger("");    logger.setLevel(level);}
public static java.util.logging.Level metron_f9467_0()
{    java.util.logging.Logger logger = java.util.logging.Logger.getLogger("");    return logger.getLevel();}
public static File metron_f9468_0(File dir) throws IOException
{    return createTempDir(dir, true);}
public static File metron_f9469_0(File dir, boolean cleanup) throws IOException
{    if (!dir.mkdirs() && !dir.exists()) {        throw new IOException(String.format("Failed to create directory structure '%s'", dir.toString()));    }    if (cleanup) {        addCleanupHook(dir.toPath());    }    return dir;}
public static File metron_f9470_0(String prefix) throws IOException
{    return createTempDir(prefix, true);}
public static File metron_f9471_0(String prefix, boolean cleanup) throws IOException
{    Path tmpDir = Files.createTempDirectory(prefix);    addCleanupHook(tmpDir);    return tmpDir.toFile();}
public static void metron_f9472_0(final Path dir)
{    Runtime.getRuntime().addShutdownHook(new Thread() {        @Override        public void run() {            try {                cleanDir(dir);            } catch (IOException e) {                System.out.println(format("Warning: Unable to clean folder '%s'", dir.toString()));            }        }    });}
public void metron_f9473_0()
{    try {        cleanDir(dir);    } catch (IOException e) {        System.out.println(format("Warning: Unable to clean folder '%s'", dir.toString()));    }}
public static void metron_f9474_0(Path dir) throws IOException
{    Files.walkFileTree(dir, new SimpleFileVisitor<Path>() {        @Override        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {            Files.delete(file);            return FileVisitResult.CONTINUE;        }        @Override        public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {            Files.delete(file);            return FileVisitResult.CONTINUE;        }        @Override        public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {            if (exc == null) {                return FileVisitResult.CONTINUE;            } else {                throw exc;            }        }    });    Files.delete(dir);}
public FileVisitResult metron_f9475_0(Path file, BasicFileAttributes attrs) throws IOException
{    Files.delete(file);    return FileVisitResult.CONTINUE;}
public FileVisitResult metron_f9476_0(Path file, IOException exc) throws IOException
{    Files.delete(file);    return FileVisitResult.CONTINUE;}
public FileVisitResult metron_f9477_0(Path dir, IOException exc) throws IOException
{    if (exc == null) {        return FileVisitResult.CONTINUE;    } else {        throw exc;    }}
public static File metron_f9478_0(File file, String contents) throws IOException
{    com.google.common.io.Files.createParentDirs(file);    com.google.common.io.Files.write(contents, file, StandardCharsets.UTF_8);    return file;}
public Object metron_f9479_0(List<Object> args, Context context) throws ParseException
{    throw new IllegalStateException(Joiner.on(" ").join(args));}
public boolean metron_f9481_0()
{    return true;}
public Object metron_f9482_0(List<Object> args, Context context) throws ParseException
{    return true;}
public boolean metron_f9484_0()
{    return true;}
public void metron_f9485_0()
{    ClassLoader classLoader = getClass().getClassLoader();    int numFound = 0;    for (Class<?> clazz : new ClasspathFunctionResolver().resolvables()) {        if (clazz.isAnnotationPresent(Stellar.class)) {            numFound++;            Stellar annotation = clazz.getAnnotation(Stellar.class);            Assert.assertFalse("Must specify a name for " + clazz.getName(), StringUtils.isEmpty(annotation.name()));            Assert.assertFalse("Must specify a description annotation for " + clazz.getName(), StringUtils.isEmpty(annotation.description()));            Assert.assertFalse("Must specify a returns annotation for " + clazz.getName(), StringUtils.isEmpty(annotation.returns()));        }    }    Assert.assertTrue(numFound > 0);}
public void metron_f9486_0()
{    Assert.assertEquals("'bar'", run("\"'bar'\"", new HashMap<>()));    Assert.assertEquals("'BAR'", run("TO_UPPER('\\'bar\\'')", new HashMap<>()));    Assert.assertEquals("\"bar\"", run("\"\\\"bar\\\"\"", new HashMap<>()));    Assert.assertEquals("\"bar\"", run("'\"bar\"'", new HashMap<>()));    Assert.assertEquals("\"BAR\"", run("TO_UPPER(\"\\\"bar\\\"\")", new HashMap<>()));    Assert.assertEquals("bar \\ foo", run("'bar \\\\ foo'", new HashMap<>()));    Assert.assertEquals("bar \\\\ foo", run("'bar \\\\\\\\ foo'", new HashMap<>()));    Assert.assertEquals("bar\nfoo", run("'bar\\nfoo'", new HashMap<>()));    Assert.assertEquals("bar\n\nfoo", run("'bar\\n\\nfoo'", new HashMap<>()));    Assert.assertEquals("bar\tfoo", run("'bar\\tfoo'", new HashMap<>()));    Assert.assertEquals("bar\t\tfoo", run("'bar\\t\\tfoo'", new HashMap<>()));    Assert.assertEquals("bar\rfoo", run("'bar\\rfoo'", new HashMap<>()));    Assert.assertEquals("'bar'", run("'\\'bar\\''", new HashMap<>()));}
public void metron_f9487_0()
{    {        String query = "bar:variable";        Assert.assertEquals("bar", run(query, ImmutableMap.of("bar:variable", "bar")));        Assert.assertEquals("grok", run(query, ImmutableMap.of("bar:variable", "grok")));    }    {        String query = "JOIN(['foo', bar:variable], '')";        Assert.assertEquals("foobar", run(query, ImmutableMap.of("bar:variable", "bar")));        Assert.assertEquals("foogrok", run(query, ImmutableMap.of("bar:variable", "grok")));    }    {        String query = "MAP_GET('bar', { 'foo' : 1, 'bar' : bar:variable})";        Assert.assertEquals("bar", run(query, ImmutableMap.of("bar:variable", "bar")));        Assert.assertEquals("grok", run(query, ImmutableMap.of("bar:variable", "grok")));    }}
public void metron_f9488_0()
{    String query = "someVar";    run(query, new HashMap<>());}
public void metron_f9489_0()
{    String query = "someVar";    validate(query);}
public void metron_f9490_0()
{    String query = "someVar";    Context context = Context.EMPTY_CONTEXT();    validate(query, context);    Assert.assertNull(context.getActivityType());    run(query, ImmutableMap.of("someVar", "someValue"), context);    Assert.assertNull(context.getActivityType());}
public void metron_f9491_0()
{    String query = "50 + (true == true ? 10 : 20)";    Assert.assertEquals(60, run(query, new HashMap<>()));}
public void metron_f9492_0()
{    String query = "50 + (true == false ? 10 : 20)";    Assert.assertEquals(70, run(query, new HashMap<>()));}
public void metron_f9493_0()
{    String query = "50 * (true == false ? 2 : 10) + 20";    Assert.assertEquals(520, run(query, new HashMap<>()));}
public void metron_f9494_0()
{    String query = "TO_INTEGER(true == true ? 10.0 : 20.0 )";    Assert.assertEquals(10, run(query, new HashMap<>()));}
public void metron_f9495_0()
{    StellarProcessor processor = new StellarProcessor();    {        Assert.assertEquals(new HashSet<>(), processor.variablesUsed("if 1 < 2 then 'one' else 'two'"));    }    {        Assert.assertEquals(ImmutableSet.of("one"), processor.variablesUsed("if 1 < 2 then one else 'two'"));    }    {        Assert.assertEquals(ImmutableSet.of("one", "two"), processor.variablesUsed("if 1 < 2 then one else two"));    }    {        Assert.assertEquals(ImmutableSet.of("bar"), processor.variablesUsed("MAP_GET('foo', { 'foo' : bar})"));    }}
public void metron_f9496_0()
{    {        String query = "{ ( RET_TRUE() && y < 50 ) : 'info', y >= 50 : 'warn'}";        Map<Boolean, String> ret = (Map) run(query, ImmutableMap.of("y", 50));        Assert.assertEquals(ret.size(), 2);        Assert.assertEquals("warn", ret.get(true));        Assert.assertEquals("info", ret.get(false));    }}
public void metron_f9497_0()
{    {        String query = "RET_TRUE(y < 10)";        Assert.assertTrue((boolean) run(query, ImmutableMap.of("y", 50)));    }}
public void metron_f9498_0()
{    {        String query = "STARTS_WITH(casey, 'case') or MAP_EXISTS()";        Assert.assertTrue((Boolean) run(query, ImmutableMap.of("casey", "casey")));    }    {        String query = "true or MAP_EXISTS()";        Assert.assertTrue((Boolean) run(query, new HashMap<>()));    }    {        String query = "MAP_EXISTS() or true";        Assert.assertTrue((Boolean) run(query, new HashMap<>()));    }}
public void metron_f9499_0()
{    {        String query = "if 1 < 2 then NULL else true";        Assert.assertNull(run(query, new HashMap<>()));    }    {        String query = "1 < 2 ? NULL : true";        Assert.assertNull(run(query, new HashMap<>()));    }    {        String query = "null == null ? true : false";        Assert.assertTrue((Boolean) run(query, new HashMap<>()));    }}
public void metron_f9500_0()
{            {        String query = "NaN == NaN";        Assert.assertFalse(runPredicate(query, new HashMap<>()));    }    {        String query = "5.0 == NaN";        Assert.assertFalse(runPredicate(query, new HashMap<>()));    }    {        String query = "NULL == NaN";        Assert.assertFalse(runPredicate(query, new HashMap<>()));    }    {        String query = "'metron' == NaN";        Assert.assertFalse(runPredicate(query, new HashMap<>()));    }        {        String query = "NaN != NaN";        Assert.assertTrue(runPredicate(query, new HashMap<>()));    }    {        String query = "5 != NaN";        Assert.assertTrue(runPredicate(query, new HashMap<>()));    }    {        String query = "'metron' != NaN";        Assert.assertTrue(runPredicate(query, new HashMap<>()));    }        {        String query = "NaN > 5";        Assert.assertFalse(runPredicate(query, new HashMap<>()));    }    {        String query = "NaN < 5";        Assert.assertFalse(runPredicate(query, new HashMap<>()));    }    {        String query = "NaN >= 5";        Assert.assertFalse(runPredicate(query, new HashMap<>()));    }    {        String query = "NaN <= 5";        Assert.assertFalse(runPredicate(query, new HashMap<>()));    }    {        String query = "NaN > NaN";        Assert.assertFalse(runPredicate(query, new HashMap<>()));    }    {        String query = "NaN < NaN";        Assert.assertFalse(runPredicate(query, new HashMap<>()));    }    {        String query = "NaN >= NaN";        Assert.assertFalse(runPredicate(query, new HashMap<>()));    }    {        String query = "NaN <= NaN";        Assert.assertFalse(runPredicate(query, new HashMap<>()));    }        {        String query = "(5 + NaN) != NaN";        Assert.assertTrue(runPredicate(query, new HashMap<>()));    }    {        String query = "5 + NaN";        Assert.assertTrue(run(query, new HashMap<>()).toString().equals("NaN"));    }    {        String query = "(5 - NaN) != NaN";        Assert.assertTrue(runPredicate(query, new HashMap<>()));    }    {        String query = "5 - NaN";        Assert.assertTrue(run(query, new HashMap<>()).toString().equals("NaN"));    }    {        String query = "(5 / NaN) != NaN";        Assert.assertTrue(runPredicate(query, new HashMap<>()));    }    {        String query = "5 / NaN";        Assert.assertTrue(run(query, new HashMap<>()).toString().equals("NaN"));    }    {        String query = "(5 * NaN) != NaN";        Assert.assertTrue(runPredicate(query, new HashMap<>()));    }    {        String query = "5 * NaN";        Assert.assertTrue(run(query, new HashMap<>()).toString().equals("NaN"));    }    {        String query = "(NaN + NaN) != NaN";        Assert.assertTrue(runPredicate(query, new HashMap<>()));    }    {        String query = "NaN + NaN";        Assert.assertTrue(run(query, new HashMap<>()).toString().equals("NaN"));    }    {        String query = "(NaN - NaN) != NaN";        Assert.assertTrue(runPredicate(query, new HashMap<>()));    }    {        String query = "NaN - NaN";        Assert.assertTrue(run(query, new HashMap<>()).toString().equals("NaN"));    }    {        String query = "(NaN * NaN) != NaN";        Assert.assertTrue(runPredicate(query, new HashMap<>()));    }    {        String query = "NaN * NaN";        Assert.assertTrue(run(query, new HashMap<>()).toString().equals("NaN"));    }    {        String query = "(NaN / NaN) != NaN";        Assert.assertTrue(runPredicate(query, new HashMap<>()));    }    {        String query = "NaN / NaN";        Assert.assertTrue(run(query, new HashMap<>()).toString().equals("NaN"));    }}
public void metron_f9501_0()
{    {        String query = "MAP_GET('bar', { 'foo' : 1, 'bar' : 'bar'})";        Assert.assertEquals("bar", run(query, new HashMap<>()));    }    {        String query = "MAP_GET('blah', {  'blah' : 1 < 2 })";        Assert.assertEquals(true, run(query, new HashMap<>()));    }    {        String query = "MAP_GET('blah', {  'blah' : not(STARTS_WITH(casey, 'case')) })";        Assert.assertEquals(false, run(query, ImmutableMap.of("casey", "casey")));    }    {        String query = "MAP_GET('blah', {  'blah' : one })";        Assert.assertEquals(1, run(query, ImmutableMap.of("one", 1)));    }    {        String query = "MAP_GET('blah', {  'blah' : null })";        Assert.assertNull(run(query, new HashMap<>()));    }    {        String query = "MAP_GET('BLAH', {  TO_UPPER('blah') : null })";        Assert.assertNull(run(query, new HashMap<>()));    }    {        String query = "MAP_GET('BLAH', {  TO_UPPER('blah') : 1 < 2 })";        Assert.assertEquals(true, run(query, new HashMap<>()));    }}
public void metron_f9502_0()
{    {        String query = "if STARTS_WITH(casey, 'case') then 'one' else 'two'";        Assert.assertEquals("one", run(query, ImmutableMap.of("casey", "casey")));    }    {        String query = "if 1 < 2 then 'one' else 'two'";        Assert.assertEquals("one", run(query, new HashMap<>()));    }    {        String query = "if 1 + 1 < 2 then 'one' else 'two'";        Assert.assertEquals("two", run(query, new HashMap<>()));    }    {        String query = "if 1 + 1 <= 2 AND 1 + 2 in [3] then 'one' else 'two'";        Assert.assertEquals("one", run(query, new HashMap<>()));    }    {        String query = "if 1 + 1 <= 2 AND (1 + 2 in [3]) then 'one' else 'two'";        Assert.assertEquals("one", run(query, new HashMap<>()));    }    {        String query = "if not(1 < 2) then 'one' else 'two'";        Assert.assertEquals("two", run(query, new HashMap<>()));    }    {        String query = "if 1 == 1.0000001 then 'one' else 'two'";        Assert.assertEquals("two", run(query, new HashMap<>()));    }    {        String query = "if one < two then 'one' else 'two'";        Assert.assertEquals("one", run(query, ImmutableMap.of("one", 1, "two", 2)));    }    {        String query = "if one == very_nearly_one then 'one' else 'two'";        Assert.assertEquals("two", run(query, ImmutableMap.of("one", 1, "very_nearly_one", 1.0000001)));    }    {        String query = "if one == very_nearly_one OR one == very_nearly_one then 'one' else 'two'";        Assert.assertEquals("two", run(query, ImmutableMap.of("one", 1, "very_nearly_one", 1.0000001)));    }    {        String query = "if one == very_nearly_one OR one != very_nearly_one then 'one' else 'two'";        Assert.assertEquals("one", run(query, ImmutableMap.of("one", 1, "very_nearly_one", 1.0000001)));    }    {        String query = "if one != very_nearly_one OR one == very_nearly_one then 'one' else 'two'";        Assert.assertEquals("one", run(query, ImmutableMap.of("one", 1, "very_nearly_one", 1.0000001)));    }    {        String query = "if 'foo' in ['foo'] OR one == very_nearly_one then 'one' else 'two'";        Assert.assertEquals("one", run(query, ImmutableMap.of("one", 1, "very_nearly_one", 1.0000001)));    }    {        String query = "if ('foo' in ['foo']) OR one == very_nearly_one then 'one' else 'two'";        Assert.assertEquals("one", run(query, ImmutableMap.of("one", 1, "very_nearly_one", 1.0000001)));    }    {        String query = "if not('foo' in ['foo']) OR one == very_nearly_one then 'one' else 'two'";        Assert.assertEquals("two", run(query, ImmutableMap.of("one", 1, "very_nearly_one", 1.0000001)));    }    {        String query = "if not('foo' in ['foo'] OR one == very_nearly_one) then 'one' else 'two'";        Assert.assertEquals("two", run(query, ImmutableMap.of("one", 1, "very_nearly_one", 1.0000001)));    }    {        String query = "1 < 2 ? 'one' : 'two'";        Assert.assertEquals("one", run(query, new HashMap<>()));    }    {        String query = "1 < 2 ? TO_UPPER('one') : 'two'";        Assert.assertEquals("ONE", run(query, new HashMap<>()));    }    {        String query = "1 < 2 ? one : 'two'";        Assert.assertEquals("one", run(query, ImmutableMap.of("one", "one")));    }    {        String query = "1 < 2 ? one*3 : 'two'";        Assert.assertTrue(Math.abs(3 - (int) run(query, ImmutableMap.of("one", 1))) < 1e-6);    }    {        String query = "1 < 2 AND 1 < 2 ? one*3 : 'two'";        Assert.assertTrue(Math.abs(3 - (int) run(query, ImmutableMap.of("one", 1))) < 1e-6);    }    {        String query = "1 < 2 AND 1 > 2 ? one*3 : 'two'";        Assert.assertEquals("two", run(query, ImmutableMap.of("one", 1)));    }    {        String query = "1 > 2 AND 1 < 2 ? one*3 : 'two'";        Assert.assertEquals("two", run(query, ImmutableMap.of("one", 1)));    }    {        String query = "1 < 2 AND 'foo' in ['', 'foo'] ? one*3 : 'two'";        Assert.assertEquals(3, run(query, ImmutableMap.of("one", 1)));    }    {        String query = "1 < 2 AND ('foo' in ['', 'foo']) ? one*3 : 'two'";        Assert.assertEquals(3, run(query, ImmutableMap.of("one", 1)));    }    {        String query = "'foo' in ['', 'foo'] ? one*3 : 'two'";        Assert.assertEquals(3, run(query, ImmutableMap.of("one", 1)));    }}
public void metron_f9503_0()
{    HashMap variables = new HashMap<>();    boolean thrown = false;    try {        Object o = run("in in ['','in']", variables);    } catch (ParseException pe) {        thrown = true;    }    Assert.assertTrue(thrown);    thrown = false;    try {        Assert.assertEquals(true, run("'in' in ['','in']", variables));    } catch (ParseException pe) {        thrown = true;    }    Assert.assertFalse(thrown);}
public void metron_f9504_0()
{    String query = "TO_UPPER(TRIM(foo))";    Assert.assertEquals("CASEY", run(query, ImmutableMap.of("foo", "casey ")));}
public void metron_f9505_0()
{    String query = "LENGTH(foo)";    Assert.assertEquals(5, run(query, ImmutableMap.of("foo", "abcde")));}
public void metron_f9506_0()
{    String query = "LENGTH(foo)";    Collection c = Arrays.asList(1, 2, 3, 4, 5);    Assert.assertEquals(5, run(query, ImmutableMap.of("foo", c)));}
public void metron_f9507_0()
{    String query = "LENGTH(foo)";    Assert.assertEquals(0, run(query, ImmutableMap.of("foo", "")));}
public void metron_f9508_0()
{    String query = "LENGTH(foo)";    Collection c = new ArrayList();    Assert.assertEquals(0, run(query, ImmutableMap.of("foo", c)));}
public void metron_f9509_0()
{    String query = "LENGTH(foo)";    run(query, ImmutableMap.of());}
public void metron_f9510_0()
{    String query = "JOIN( [ TO_UPPER(TRIM(foo)), 'bar' ], ',')";    Assert.assertEquals("CASEY,bar", run(query, ImmutableMap.of("foo", "casey ")));    query = "JOIN( SET_INIT( [ 1, 2, 'buckle', 'my', 'shoe', 3 ] ), ',')";    Assert.assertEquals("1,2,buckle,my,shoe,3", run(query, new HashMap<>()));}
public void metron_f9511_0()
{    String query = "JOIN( SPLIT(foo, ':'), ',')";    Assert.assertEquals("casey,bar", run(query, ImmutableMap.of("foo", "casey:bar")));}
public void metron_f9512_0()
{    String query = "MAP_GET(dc, dc2tz, 'UTC')";    Assert.assertEquals("UTC", run(query, ImmutableMap.of("dc", "nyc", "dc2tz", ImmutableMap.of("la", "PST"))));    Assert.assertEquals("EST", run(query, ImmutableMap.of("dc", "nyc", "dc2tz", ImmutableMap.of("nyc", "EST"))));}
public void metron_f9513_0()
{    Map vars = ImmutableMap.of("mymap", new HashMap<String, String>());    String query = "MAP_PUT('foo','bar',mymap)";    assertThat(run(query, vars), instanceOf(Map.class));    query = "MAP_GET('foo', mymap)";    assertThat(run(query, vars), equalTo("bar"));}
public void metron_f9514_0()
{    Map vars = new HashMap() {        {            put("mymap", null);        }    };    String query = "MAP_PUT('foo','bar', mymap)";    Map result = (Map) run(query, vars);    assertThat(result, instanceOf(Map.class));    assertThat(result.size(), equalTo(1));    assertThat(result.get("foo"), equalTo("bar"));}
public void metron_f9515_0() throws Exception
{    Map s = (Map) run("MAP_PUT( 'foo', 'bar', [ 'baz' ] )", new HashMap<>());}
public void metron_f9516_0()
{    Map m = (Map) StellarProcessorUtils.run("MAP_MERGE([{}, null])", new HashMap<>());    Assert.assertEquals(0, m.size());}
public void metron_f9517_0()
{    Map vars = new HashMap() {        {            put("map1", ImmutableMap.of("a", 1, "b", 2));            put("map2", ImmutableMap.of("c", 3, "d", 4));            put("map3", ImmutableMap.of("e", 5, "f", 6));        }    };    String query = "MAP_MERGE([map1, map2, map3])";    Map result = (Map) run(query, vars);    assertThat(result, instanceOf(Map.class));    assertThat(result.size(), equalTo(6));    assertThat(result.get("a"), equalTo(1));    assertThat(result.get("b"), equalTo(2));    assertThat(result.get("c"), equalTo(3));    assertThat(result.get("d"), equalTo(4));    assertThat(result.get("e"), equalTo(5));    assertThat(result.get("f"), equalTo(6));}
public void metron_f9518_0()
{    String query = "MAP_MERGE( [ { 'a' : '1', 'b' : '2', 'c' : '3' } ] )";    Map result = (Map) run(query, new HashMap<>());    assertThat(result, instanceOf(Map.class));    assertThat(result.size(), equalTo(3));    assertThat(result.get("a"), equalTo("1"));    assertThat(result.get("b"), equalTo("2"));    assertThat(result.get("c"), equalTo("3"));}
public void metron_f9519_0()
{    String query = "MAP_MERGE( [ { 'a' : '1', 'b' : '2' }, { 'c' : '3', 'd' : '4' }, { 'e' : '5', 'f' : '6' } ] )";    Map result = (Map) run(query, new HashMap<>());    assertThat(result, instanceOf(Map.class));    assertThat(result.size(), equalTo(6));    assertThat(result.get("a"), equalTo("1"));    assertThat(result.get("b"), equalTo("2"));    assertThat(result.get("c"), equalTo("3"));    assertThat(result.get("d"), equalTo("4"));    assertThat(result.get("e"), equalTo("5"));    assertThat(result.get("f"), equalTo("6"));}
public void metron_f9520_0()
{    String query = "MAP_MERGE( [ { 'a' : '1', 'b' : 2, 'c' : '3' }, { 'c' : '3b', 'd' : '4' }, { 'd' : '4b', 'e' : 5, 'f' : '6' } ] )";    Map result = (Map) run(query, new HashMap<>());    assertThat(result, instanceOf(Map.class));    assertThat(result.size(), equalTo(6));    assertThat(result.get("a"), equalTo("1"));    assertThat(result.get("b"), equalTo(2));    assertThat(result.get("c"), equalTo("3b"));    assertThat(result.get("d"), equalTo("4b"));    assertThat(result.get("e"), equalTo(5));    assertThat(result.get("f"), equalTo("6"));}
public void metron_f9521_0() throws Exception
{    Map s = (Map) run("MAP_MERGE( [ 'foo', 'bar' ] )", new HashMap<>());}
public void metron_f9522_0()
{    String query = "DOMAIN_TO_TLD(foo)";    Assert.assertEquals("co.uk", run(query, ImmutableMap.of("foo", "www.google.co.uk")));}
public void metron_f9523_0()
{    String query = "DOMAIN_REMOVE_TLD(foo)";    Assert.assertEquals("www.google", run(query, ImmutableMap.of("foo", "www.google.co.uk")));}
public void metron_f9524_0()
{    String query = "DOMAIN_REMOVE_SUBDOMAINS(foo)";    Assert.assertEquals("google.co.uk", run(query, ImmutableMap.of("foo", "www.google.co.uk")));    Assert.assertEquals("google.com", run(query, ImmutableMap.of("foo", "www.google.com")));}
public void metron_f9525_0()
{    String query = "URL_TO_HOST(foo)";    Assert.assertEquals("www.google.co.uk", run(query, ImmutableMap.of("foo", "http://www.google.co.uk/my/path")));}
public void metron_f9526_0()
{    String query = "URL_TO_PORT(foo)";    Assert.assertEquals(80, run(query, ImmutableMap.of("foo", "http://www.google.co.uk/my/path")));}
public void metron_f9527_0()
{    String query = "URL_TO_PROTOCOL(foo)";    Assert.assertEquals("http", run(query, ImmutableMap.of("foo", "http://www.google.co.uk/my/path")));}
public void metron_f9528_0()
{    String query = "URL_TO_PATH(foo)";    Assert.assertEquals("/my/path", run(query, ImmutableMap.of("foo", "http://www.google.co.uk/my/path")));}
public void metron_f9529_0()
{    String query = "PROTOCOL_TO_NAME(protocol)";    Assert.assertEquals("TCP", run(query, ImmutableMap.of("protocol", "6")));    Assert.assertEquals("TCP", run(query, ImmutableMap.of("protocol", 6)));    Assert.assertEquals(null, run(query, ImmutableMap.of("foo", 6)));    Assert.assertEquals("chicken", run(query, ImmutableMap.of("protocol", "chicken")));}
public void metron_f9530_0()
{    long expected = 1452013350000L;    {        String query = "TO_EPOCH_TIMESTAMP(foo, 'yyyy-MM-dd HH:mm:ss', 'UTC')";        Assert.assertEquals(expected, run(query, ImmutableMap.of("foo", "2016-01-05 17:02:30")));    }    {        String query = "TO_EPOCH_TIMESTAMP(foo, 'yyyy-MM-dd HH:mm:ss')";        Long ts = (Long) run(query, ImmutableMap.of("foo", "2016-01-05 17:02:30"));                Assert.assertTrue(Math.abs(ts - expected) < 8.64e+7);    }}
public void metron_f9531_0()
{    Assert.assertEquals("5", run("TO_STRING(foo)", ImmutableMap.of("foo", 5)));}
public void metron_f9532_0()
{    Assert.assertEquals("null", run("TO_STRING(\"null\")", ImmutableMap.of("foo", "null")));}
public void metron_f9533_0()
{    Assert.assertEquals(5, run("TO_INTEGER(foo)", ImmutableMap.of("foo", "5")));    Assert.assertEquals(5, run("TO_INTEGER(foo)", ImmutableMap.of("foo", 5)));}
public void metron_f9534_0()
{    Assert.assertEquals(5.1d, run("TO_DOUBLE(foo)", ImmutableMap.of("foo", 5.1d)));    Assert.assertEquals(5.1d, run("TO_DOUBLE(foo)", ImmutableMap.of("foo", "5.1")));}
public void metron_f9535_0()
{    Map<String, Object> variables = ImmutableMap.of("foo", "www.google.co.uk");    Assert.assertEquals("www", run("GET_FIRST(SPLIT(DOMAIN_REMOVE_TLD(foo), '.'))", variables));    Assert.assertEquals("www", run("GET(SPLIT(DOMAIN_REMOVE_TLD(foo), '.'), 0)", variables));    Assert.assertEquals("google", run("GET_LAST(SPLIT(DOMAIN_REMOVE_TLD(foo), '.'))", variables));    Assert.assertEquals("google", run("GET(SPLIT(DOMAIN_REMOVE_TLD(foo), '.'), 1)", variables));}
public void metron_f9536_0() throws Exception
{    final Map<String, String> variableMap = new HashMap<String, String>() {        {            put("foo", "casey");            put("empty", "");            put("spaced", "metron is great");        }    };    Assert.assertFalse(runPredicate("not('casey' == foo and true)", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("not(not('casey' == foo and true))", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("('casey' == foo) && ( false != true )", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("('casey' == foo) and (FALSE == TRUE)", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("'casey' == foo and FALSE", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("'casey' == foo and true", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("true", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("TRUE", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));}
public void metron_f9537_0() throws Exception
{    final Map<String, String> variableMap = new HashMap<String, String>() {        {            put("foo", "casey");            put("empty", "");        }    };    Assert.assertTrue(runPredicate("foo in [ 'casey', 'david' ]", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("foo in [ ]", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("foo in [ foo, 'david' ]", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("foo in [ 'casey', 'david' ] and 'casey' == foo", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("foo in [ 'casey', 'david' ] and foo == 'casey'", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("foo in [ 'casey' ]", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("foo not in [ 'casey', 'david' ]", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("foo not in [ 'casey', 'david' ] and 'casey' == foo", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("null in [ null, 'something' ]", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("null not in [ null, 'something' ]", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));}
public void metron_f9538_0() throws Exception
{    final Map<String, String> variableMap = new HashMap<String, String>() {        {            put("foo", "casey");            put("empty", "");        }    };    Assert.assertTrue(runPredicate("'casey' in { foo : 5 }", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("'casey' not in { foo : 5 }", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("foo in { foo : 5 }", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("foo not in { foo : 5 }", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("'foo' in { 'foo' : 5 }", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("'foo' not in { 'foo' : 5 }", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("foo in { 'casey' : 5 }", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("foo not in { 'casey' : 5 }", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("empty in { foo : 5 }", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("empty not in { foo : 5 }", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("'foo' in { }", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("null in { 'foo' : 5 }", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("null not in { 'foo' : 5 }", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));}
public void metron_f9539_0() throws Exception
{    final Map<String, String> variableMap = new HashMap<String, String>();    Assert.assertTrue(runPredicate("(false && true) || true", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("(false && false) || true", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("(true || true) && false", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));}
public void metron_f9540_0() throws Exception
{    final Map<String, String> variableMap = new HashMap<String, String>() {        {            put("foo", "casey");            put("empty", "");        }    };    Assert.assertTrue(runPredicate("'case' in foo", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("'case' not in foo", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("'case' in empty", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("'case' not in empty", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("'case' in [ foo ]", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("'case' not in [ foo ]", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("null in foo", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("null not in foo", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));}
public void metron_f9541_0() throws Exception
{    final Map<String, String> variableMap = new HashMap<>();    Assert.assertTrue(runPredicate("('grok' not in 'foobar') == true", new DefaultVariableResolver(variableMap::get, variableMap::containsKey)));    Assert.assertTrue(runPredicate("'grok' not in ('foobar' == true)", new DefaultVariableResolver(variableMap::get, variableMap::containsKey)));    Assert.assertFalse(runPredicate("'grok' in 'grokbar' == true", new DefaultVariableResolver(variableMap::get, variableMap::containsKey)));    Assert.assertTrue(runPredicate("false in 'grokbar' == true", new DefaultVariableResolver(variableMap::get, variableMap::containsKey)));    Assert.assertTrue(runPredicate("('foo' in 'foobar') == true", new DefaultVariableResolver(variableMap::get, variableMap::containsKey)));    Assert.assertFalse(runPredicate("'foo' in ('foobar' == true)", new DefaultVariableResolver(variableMap::get, variableMap::containsKey)));    Assert.assertTrue(runPredicate("'grok' not in 'grokbar' == true", new DefaultVariableResolver(variableMap::get, variableMap::containsKey)));    Assert.assertTrue(runPredicate("false in 'grokbar' == true", new DefaultVariableResolver(variableMap::get, variableMap::containsKey)));    Assert.assertTrue(runPredicate("'foo' in ['foo'] AND 'bar' in ['bar']", new DefaultVariableResolver(variableMap::get, variableMap::containsKey)));    Assert.assertTrue(runPredicate("('foo' in ['foo']) AND 'bar' in ['bar']", new DefaultVariableResolver(variableMap::get, variableMap::containsKey)));    Assert.assertTrue(runPredicate("'foo' in ['foo'] AND ('bar' in ['bar'])", new DefaultVariableResolver(variableMap::get, variableMap::containsKey)));    Assert.assertTrue(runPredicate("('foo' in ['foo']) AND ('bar' in ['bar'])", new DefaultVariableResolver(variableMap::get, variableMap::containsKey)));    Assert.assertTrue(runPredicate("('foo' in ['foo'] AND 'bar' in ['bar'])", new DefaultVariableResolver(variableMap::get, variableMap::containsKey)));}
public void metron_f9542_0() throws Exception
{    final Map<String, String> variableMap = new HashMap<String, String>() {        {            put("foo", "casey");            put("empty", "");            put("spaced", "metron is great");        }    };    Assert.assertTrue(runPredicate("exists(foo)", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("exists(bar)", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("exists(bar) or true", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));}
public void metron_f9543_0() throws Exception
{    final Map<String, Object> variableMap = new HashMap<String, Object>() {        {            put("foo", "casey");            put("bar", "bar.casey.grok");            put("ip", "192.168.0.1");            put("empty", "");            put("spaced", "metron is great");            put("myMap", ImmutableMap.of("casey", "apple"));        }    };    Assert.assertTrue(runPredicate("MAP_EXISTS(foo, myMap)", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));}
public void metron_f9544_0() throws Exception
{    final Map<String, String> variableMap = new HashMap<String, String>() {        {            put("foo", "casey");            put("ip", "192.168.0.1");            put("ip_src_addr", "192.168.0.1");            put("ip_dst_addr", "10.0.0.1");            put("other_ip", "10.168.0.1");            put("empty", "");            put("spaced", "metron is great");        }    };    Assert.assertTrue(runPredicate("IN_SUBNET(ip, '192.168.0.0/24')", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("IN_SUBNET(ip, '192.168.0.0/24', '11.0.0.0/24')", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("IN_SUBNET(ip, '192.168.0.0/24', '11.0.0.0/24') in [true]", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("true in IN_SUBNET(ip, '192.168.0.0/24', '11.0.0.0/24')", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("IN_SUBNET(ip_dst_addr, '192.168.0.0/24', '11.0.0.0/24')", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("IN_SUBNET(other_ip, '192.168.0.0/24')", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    boolean thrown = false;    try {        runPredicate("IN_SUBNET(blah, '192.168.0.0/24')", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v)));    } catch (ParseException pe) {        thrown = true;    }    Assert.assertTrue(thrown);    Assert.assertTrue(runPredicate("true and STARTS_WITH(foo, 'ca')", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("true and STARTS_WITH(TO_UPPER(foo), 'CA')", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("(true and STARTS_WITH(TO_UPPER(foo), 'CA')) || true", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("true and ENDS_WITH(foo, 'sey')", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("not(IN_SUBNET(ip_src_addr, '192.168.0.0/24') and IN_SUBNET(ip_dst_addr, '192.168.0.0/24'))", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("IN_SUBNET(ip_src_addr, '192.168.0.0/24')", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("not(IN_SUBNET(ip_src_addr, '192.168.0.0/24'))", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("IN_SUBNET(ip_dst_addr, '192.168.0.0/24')", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("not(IN_SUBNET(ip_dst_addr, '192.168.0.0/24'))", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));}
public void metron_f9545_0() throws Exception
{    Assert.assertEquals("foo", run("if true then 'foo' else (if false then 'bar' else 'grok')", new HashMap<>()));    Assert.assertEquals("foo", run("if true_var != null && true_var then 'foo' else (if false then 'bar' else 'grok')", ImmutableMap.of("true_var", true)));    Assert.assertEquals("foo", run("if true then 'foo' else THROW('expression')", new HashMap<>()));    Assert.assertEquals("foo", run("true ? 'foo' : THROW('expression')", new HashMap<>()));    Assert.assertEquals("foo", run("if false then THROW('exception') else 'foo'", new HashMap<>()));    Assert.assertEquals("foo", run("false ? THROW('exception') : 'foo'", new HashMap<>()));    Assert.assertEquals(true, run("RET_TRUE(if true then 'foo' else THROW('expression'))", new HashMap<>()));    Assert.assertEquals("foo", run("if true or (true or THROW('if exception')) then 'foo' else THROW('expression')", new HashMap<>()));    Assert.assertEquals("foo", run("if true or (false or THROW('if exception')) then 'foo' else THROW('expression')", new HashMap<>()));    Assert.assertEquals("foo", run("if NOT(true or (false or THROW('if exception'))) then THROW('expression') else 'foo'", new HashMap<>()));    Assert.assertEquals("foo", run("if NOT('metron' in [ 'metron', 'metronicus'] ) then THROW('expression') else 'foo'", new HashMap<>()));}
public void metron_f9546_0() throws Exception
{                            Assert.assertEquals("a", run("IF true THEN IF true THEN 'a' ELSE 'b' ELSE 'c'", new HashMap<>()));    Assert.assertEquals("b", run("IF true THEN IF false THEN 'a' ELSE 'b' ELSE 'c'", new HashMap<>()));    Assert.assertEquals("c", run("IF false THEN IF false THEN 'a' ELSE 'b' ELSE 'c'", new HashMap<>()));                                    Assert.assertEquals("a", run("IF true THEN IF true THEN IF true THEN 'a' ELSE 'b' ELSE 'c' ELSE 'd'", new HashMap<>()));    Assert.assertEquals("b", run("IF true THEN IF true THEN IF false THEN 'a' ELSE 'b' ELSE 'c' ELSE 'd'", new HashMap<>()));    Assert.assertEquals("c", run("IF true THEN IF false THEN IF true THEN 'a' ELSE 'b' ELSE 'c' ELSE 'd'", new HashMap<>()));    Assert.assertEquals("c", run("IF true THEN IF false THEN IF false THEN 'a' ELSE 'b' ELSE 'c' ELSE 'd'", new HashMap<>()));    Assert.assertEquals("d", run("IF false THEN IF true THEN IF true THEN 'a' ELSE 'b' ELSE 'c' ELSE 'd'", new HashMap<>()));    Assert.assertEquals("d", run("IF false THEN IF true THEN IF false THEN 'a' ELSE 'b' ELSE 'c' ELSE 'd'", new HashMap<>()));    Assert.assertEquals("d", run("IF false THEN IF false THEN IF true THEN 'a' ELSE 'b' ELSE 'c' ELSE 'd'", new HashMap<>()));    Assert.assertEquals("d", run("IF false THEN IF false THEN IF false THEN 'a' ELSE 'b' ELSE 'c' ELSE 'd'", new HashMap<>()));                                    Assert.assertEquals("a", run("IF true THEN IF true THEN 'a' ELSE IF true THEN 'b' ELSE 'c' ELSE 'd'", new HashMap<>()));    Assert.assertEquals("a", run("IF true THEN IF true THEN 'a' ELSE IF false THEN 'b' ELSE 'c' ELSE 'd'", new HashMap<>()));    Assert.assertEquals("b", run("IF true THEN IF false THEN 'a' ELSE IF true THEN 'b' ELSE 'c' ELSE 'd'", new HashMap<>()));    Assert.assertEquals("c", run("IF true THEN IF false THEN 'a' ELSE IF false THEN 'b' ELSE 'c' ELSE 'd'", new HashMap<>()));    Assert.assertEquals("d", run("IF false THEN IF true THEN 'a' ELSE IF true THEN 'b' ELSE 'c' ELSE 'd'", new HashMap<>()));    Assert.assertEquals("d", run("IF false THEN IF true THEN 'a' ELSE IF false THEN 'b' ELSE 'c' ELSE 'd'", new HashMap<>()));    Assert.assertEquals("d", run("IF false THEN IF false THEN 'a' ELSE IF true THEN 'b' ELSE 'c' ELSE 'd'", new HashMap<>()));    Assert.assertEquals("d", run("IF false THEN IF false THEN 'a' ELSE IF false THEN 'b' ELSE 'c' ELSE 'd'", new HashMap<>()));}
public void metron_f9547_0()
{                            Assert.assertEquals("less", run("IF TO_UPPER('foo') == 'FOO' THEN IF GET_FIRST(MAP(['test_true'], x -> TO_UPPER(x))) == 'TEST_TRUE' THEN match{ var1 < 10 => 'less', var1 >= 12 => 'more', default => 'default'} ELSE 'b' ELSE 'c'", Collections.singletonMap("var1", 1)));    Assert.assertEquals("default", run("IF TO_UPPER('foo') == 'FOO' THEN IF GET_FIRST(MAP(['test_true'], x -> TO_UPPER(x))) == 'TEST_TRUE' THEN match{ var1 < 10 => 'less', var1 >= 12 => 'more', default => 'default'} ELSE 'b' ELSE 'c'", Collections.singletonMap("var1", 11)));    Assert.assertEquals("more", run("IF TO_UPPER('foo') == 'FOO' THEN IF GET_FIRST(MAP(['test_true'], x -> TO_UPPER(x))) == 'TEST_TRUE' THEN match{ var1 < 10 => 'less', var1 >= 12 => 'more', default => 'default'} ELSE 'b' ELSE 'c'", Collections.singletonMap("var1", 100)));        Assert.assertEquals("c", run("IF TO_UPPER('bar') == 'FOO' THEN IF GET_FIRST(MAP(['test_true'], x -> TO_UPPER(x))) == 'TEST_TRUE' THEN match{ var1 < 10 => 'less', var1 >= 12 => 'more', default => 'default'} ELSE 'b' ELSE 'c'", Collections.singletonMap("var1", 1)));        Assert.assertEquals("b", run("IF TO_UPPER('foo') == 'FOO' THEN IF GET_FIRST(MAP(['test_false'], x -> TO_UPPER(x))) == 'TEST_TRUE' THEN match{ var1 < 10 => 'less', var1 >= 12 => 'more', default => 'default'} ELSE 'b' ELSE 'c'", Collections.singletonMap("var1", 1)));}
public void metron_f9548_0() throws Exception
{    Assert.assertTrue(runPredicate("'metron' in ['metron', 'metronicus', 'mortron'] or (true or THROW('exception'))", new DefaultVariableResolver(x -> null, x -> false)));    Assert.assertTrue(runPredicate("true or (true or THROW('exception'))", new DefaultVariableResolver(x -> null, x -> false)));    Assert.assertTrue(runPredicate("true or (false or THROW('exception'))", new DefaultVariableResolver(x -> null, x -> false)));    Assert.assertTrue(runPredicate("TO_UPPER('foo') == 'FOO' or (true or THROW('exception'))", new DefaultVariableResolver(x -> null, x -> false)));    Assert.assertFalse(runPredicate("false and (true or THROW('exception'))", new DefaultVariableResolver(x -> null, x -> false)));    Assert.assertTrue(runPredicate("true or false or false or true", new DefaultVariableResolver(x -> null, x -> false)));    Assert.assertFalse(runPredicate("false or (false and THROW('exception'))", new DefaultVariableResolver(x -> null, x -> false)));    Assert.assertTrue(runPredicate("'casey' == 'casey' or THROW('exception')", new DefaultVariableResolver(x -> null, x -> false)));    Assert.assertTrue(runPredicate("TO_UPPER('casey') == 'CASEY' or THROW('exception')", new DefaultVariableResolver(x -> null, x -> false)));    Assert.assertTrue(runPredicate("NOT(TO_UPPER('casey') != 'CASEY') or THROW('exception')", new DefaultVariableResolver(x -> null, x -> false)));    Assert.assertTrue(runPredicate("(TO_UPPER('casey') == 'CASEY') or THROW('exception')", new DefaultVariableResolver(x -> null, x -> false)));    Assert.assertFalse(runPredicate("NOT(NOT(TO_UPPER('casey') != 'CASEY') or THROW('exception'))", new DefaultVariableResolver(x -> null, x -> false)));    Assert.assertFalse(runPredicate("NOT(NOT(TO_UPPER('casey') != 'CASEY')) and THROW('exception')", new DefaultVariableResolver(x -> null, x -> false)));    Assert.assertTrue(runPredicate("RET_TRUE('foo') or THROW('exception')", new DefaultVariableResolver(x -> null, x -> false)));    boolean thrown = false;    try {        runPredicate("NOT(foo == null or THROW('exception')) and THROW('and exception')", new DefaultVariableResolver(x -> null, x -> false));    } catch (ParseException pe) {        thrown = true;    }    Assert.assertTrue(thrown);    thrown = false;    try {        runPredicate("(foo == null or THROW('exception') ) or THROW('and exception')", new DefaultVariableResolver(x -> null, x -> false));    } catch (ParseException pe) {        thrown = true;    }    Assert.assertTrue(thrown);    Assert.assertTrue(runPredicate("( RET_TRUE('foo', true, false) or ( foo == null or THROW('exception') ) or THROW('and exception')) or THROW('or exception')", new DefaultVariableResolver(x -> null, x -> false)));}
public void metron_f9549_0()
{    final Map<String, String> variableMap = new HashMap<String, String>() {        {            put("protocol", "http");        }    };    thrown.expect(IllegalArgumentException.class);    thrown.expectMessage("The rule 'TO_UPPER(protocol)' does not return a boolean value.");    runPredicate("TO_UPPER(protocol)", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v)));}
public void metron_f9550_0()
{    final Map<String, Object> varMap1 = new HashMap<String, Object>();    varMap1.put("field1", "val1");    final Map<String, Object> varMap2 = new HashMap<String, Object>();    varMap2.put("field2", "val2");    VariableResolver resolver = new MapVariableResolver(varMap1, varMap2);    Assert.assertTrue(runPredicate("MAP_GET('field1', _) == 'val1'", resolver));    Assert.assertTrue(runPredicate("MAP_GET('field2', _) == 'val2'", resolver));    Assert.assertTrue(runPredicate("LENGTH(_) == 2", resolver));    Map<String, Object> ret = (Map<String, Object>) run("_", resolver);    Assert.assertEquals(2, ret.size());    Assert.assertEquals("val1", ret.get("field1"));    Assert.assertEquals("val2", ret.get("field2"));}
public void metron_f9551_0()
{    checkFalsey("is_alert");}
private void metron_f9552_0(String falseyExpr)
{    VariableResolver resolver = new MapVariableResolver(new HashMap<>());    Assert.assertTrue(runPredicate(String.format(" %s || true", falseyExpr), resolver));    Assert.assertFalse(runPredicate(String.format("%s && EXCEPTION('blah')", falseyExpr), resolver));    Assert.assertTrue(runPredicate(String.format("NOT(%s)", falseyExpr), resolver));    Assert.assertFalse(runPredicate(String.format("if %s then true else false", falseyExpr), resolver));    Assert.assertFalse(runPredicate(String.format("if %s then true || %s else false", falseyExpr, falseyExpr), resolver));    Assert.assertFalse(runPredicate(String.format("if %s then true || %s else false && %s", falseyExpr, falseyExpr, falseyExpr), resolver));    Assert.assertFalse(runPredicate(String.format("if %s then true || %s else false && (%s || true)", falseyExpr, falseyExpr, falseyExpr), resolver));        Assert.assertNull(run(String.format("MAP_GET(%s, {false : 'blah'})", falseyExpr), resolver));}
public void metron_f9553_0()
{    checkFalsey("[]");    checkFalsey("{}");    checkFalsey("LIST_ADD([])");}
public void metron_f9554_0() throws Exception
{    assertEquals(1D, new ConversionFunctions.TO_DOUBLE().apply(Collections.singletonList(1)));    assertEquals(1F, new ConversionFunctions.TO_FLOAT().apply(Collections.singletonList(1.0D)));    assertEquals(1, new ConversionFunctions.TO_INTEGER().apply(Collections.singletonList(1.0D)));    assertEquals(1L, new ConversionFunctions.TO_LONG().apply(Collections.singletonList(1F)));}
public void metron_f9555_0() throws Exception
{    assertEquals(null, new ConversionFunctions.TO_DOUBLE().apply(Collections.singletonList(null)));    assertEquals(null, new ConversionFunctions.TO_FLOAT().apply(Collections.singletonList(null)));    assertEquals(null, new ConversionFunctions.TO_INTEGER().apply(Collections.singletonList(null)));    assertEquals(null, new ConversionFunctions.TO_LONG().apply(Collections.singletonList(null)));}
public void metron_f9556_0()
{    DataStructureFunctions.IsEmpty isEmpty = new DataStructureFunctions.IsEmpty();    {        boolean empty = (boolean) isEmpty.apply(ImmutableList.of("hello"));        Assert.assertThat("should be false", empty, CoreMatchers.equalTo(false));    }    {        boolean empty = (boolean) isEmpty.apply(ImmutableList.of(ImmutableList.of("hello", "world")));        Assert.assertThat("should be false", empty, CoreMatchers.equalTo(false));    }    {        boolean empty = (boolean) isEmpty.apply(ImmutableList.of(1));        Assert.assertThat("should be false", empty, CoreMatchers.equalTo(false));    }    {        boolean empty = (boolean) isEmpty.apply(ImmutableList.of(ImmutableMap.of("mykey", "myvalue")));        Assert.assertThat("should be false", empty, CoreMatchers.equalTo(false));    }}
public void metron_f9557_0()
{    DataStructureFunctions.IsEmpty isEmpty = new DataStructureFunctions.IsEmpty();    {        boolean empty = (boolean) isEmpty.apply(ImmutableList.of());        Assert.assertThat("should be true", empty, CoreMatchers.equalTo(true));    }    {        boolean empty = (boolean) isEmpty.apply(null);        Assert.assertThat("should be true", empty, CoreMatchers.equalTo(true));    }    {        boolean empty = (boolean) isEmpty.apply(ImmutableList.of(""));        Assert.assertThat("should be true", empty, CoreMatchers.equalTo(true));    }    {        boolean empty = (boolean) isEmpty.apply(ImmutableList.of(ImmutableMap.of()));        Assert.assertThat("should be true", empty, CoreMatchers.equalTo(true));    }}
public void metron_f9558_0()
{    for (String expr : ImmutableList.of("LIST_ADD(my_list, 1)", "LIST_ADD([], 1)", "LIST_ADD([], val)")) {        Object o = run(expr, ImmutableMap.of("my_list", new ArrayList<>(), "val", 1));        Assert.assertTrue(o instanceof List);        List<Number> result = (List<Number>) o;        Assert.assertEquals(1, result.size());        Assert.assertEquals(1, result.get(0));    }}
public void metron_f9559_0()
{    for (String expr : ImmutableList.of("LIST_ADD(my_list, 1)", "LIST_ADD(['foo'], 1)", "LIST_ADD(['foo'], val)")) {        ArrayList<Object> list = new ArrayList<>();        list.add("foo");        Object o = run(expr, ImmutableMap.of("my_list", list, "val", 1));        Assert.assertTrue(o instanceof List);        List<Object> result = (List<Object>) o;        Assert.assertEquals(2, result.size());        Assert.assertEquals("foo", result.get(0));        Assert.assertEquals(1, result.get(1));    }}
public void metron_f9560_0()
{    for (String expr : ImmutableList.of("LIST_ADD(my_list, 2)", "LIST_ADD([1], 2)", "LIST_ADD([1], val)")) {        ArrayList<Integer> list = new ArrayList<>();        list.add(1);        Object o = run(expr, ImmutableMap.of("my_list", list, "val", 2));        Assert.assertTrue(o instanceof List);        List<Number> result = (List<Number>) o;        Assert.assertEquals(2, result.size());        Assert.assertEquals(1, result.get(0));        Assert.assertEquals(2, result.get(1));    }}
private Object metron_f9561_0(String expr)
{    StellarProcessor processor = new StellarProcessor();    assertTrue(processor.validate(expr));    return processor.parse(expr, new DefaultVariableResolver(x -> variables.get(x), x -> variables.containsKey(x)), StellarFunctions.FUNCTION_RESOLVER(), Context.EMPTY_CONTEXT());}
public void metron_f9562_0()
{    variables.put("test_datetime", AUG2016);    calendar = Calendar.getInstance();}
public void metron_f9563_0()
{    Object result = run("DAY_OF_WEEK(test_datetime)");    assertEquals(Calendar.THURSDAY, result);}
public void metron_f9564_0()
{    Object result = run("DAY_OF_WEEK()");    assertEquals(calendar.get(Calendar.DAY_OF_WEEK), result);}
public void metron_f9565_0()
{    Object result = run("DAY_OF_WEEK(nada)");}
public void metron_f9566_0()
{    Object result = run("WEEK_OF_MONTH(test_datetime)");    assertEquals(4, result);}
public void metron_f9567_0()
{    Object result = run("WEEK_OF_MONTH()");    assertEquals(calendar.get(Calendar.WEEK_OF_MONTH), result);}
public void metron_f9568_0()
{    Object result = run("WEEK_OF_MONTH(nada)");}
public void metron_f9569_0()
{    Object result = run("MONTH(test_datetime)");    assertEquals(Calendar.AUGUST, result);}
public void metron_f9570_0()
{    Object result = run("MONTH()");    assertEquals(calendar.get(Calendar.MONTH), result);}
public void metron_f9571_0()
{    Object result = run("MONTH(nada)");}
public void metron_f9572_0()
{    Object result = run("YEAR(test_datetime)");    assertEquals(2016, result);}
public void metron_f9573_0()
{    Object result = run("YEAR()");    assertEquals(calendar.get(Calendar.YEAR), result);}
public void metron_f9574_0()
{    Object result = run("YEAR(nada)");}
public void metron_f9575_0()
{    Object result = run("DAY_OF_MONTH(test_datetime)");    assertEquals(25, result);}
public void metron_f9576_0()
{    Object result = run("DAY_OF_MONTH()");    assertEquals(calendar.get(Calendar.DAY_OF_MONTH), result);}
public void metron_f9577_0()
{    Object result = run("DAY_OF_MONTH(nada)");}
public void metron_f9578_0()
{    Object result = run("WEEK_OF_YEAR(test_datetime)");    calendar.setTimeInMillis(AUG2016);    assertEquals(calendar.get(Calendar.WEEK_OF_YEAR), result);}
public void metron_f9579_0()
{    Object result = run("WEEK_OF_YEAR()");    assertEquals(calendar.get(Calendar.WEEK_OF_YEAR), result);}
public void metron_f9580_0()
{    Object result = run("WEEK_OF_YEAR(nada)");}
public void metron_f9581_0()
{    Object result = run("DAY_OF_YEAR(test_datetime)");    assertEquals(238, result);}
public void metron_f9582_0()
{    Object result = run("DAY_OF_YEAR()");    assertEquals(calendar.get(Calendar.DAY_OF_YEAR), result);}
public void metron_f9583_0()
{    Object result = run("DAY_OF_YEAR(nada)");}
public void metron_f9584_0()
{    Object result = run("DATE_FORMAT('EEE MMM dd yyyy hh:mm:ss zzz', test_datetime, 'EST')");    assertEquals("Thu Aug 25 2016 08:27:10 EST", result);}
public void metron_f9585_0() throws Exception
{    Object result = run("DATE_FORMAT('EEE MMM dd yyyy hh:mm:ss zzzz')");    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("EEE MMM dd yyyy hh:mm:ss zzzz");    LocalDate.parse(result.toString(), formatter);}
public void metron_f9586_0()
{    Object result = run("DATE_FORMAT('EEE MMM dd yyyy hh:mm:ss zzz', 'GMT')");    assertTrue(result.toString().endsWith("GMT"));}
public void metron_f9587_0()
{    Object result = run("DATE_FORMAT('EEE MMM dd yyyy hh:mm:ss zzzz', test_datetime)");    boolean inDaylightSavings = ZoneId.of(TimeZone.getDefault().getID()).getRules().isDaylightSavings(Instant.ofEpochMilli(AUG2016));    assertTrue(result.toString().endsWith(TimeZone.getDefault().getDisplayName(inDaylightSavings, 1)));}
public void metron_f9588_0()
{    Object result = run("DATE_FORMAT('EEE MMM dd yyyy hh:mm:ss zzz', nada, 'EST')");}
public void metron_f9589_0()
{    Object result = run("DATE_FORMAT('INVALID DATE FORMAT', test_datetime, 'EST')");}
public void metron_f9590_0() throws Exception
{    Object ret = run("GET_SUPPORTED_ENCODINGS()", new HashMap());    Assert.assertTrue(ret instanceof List);    List<String> list = (List<String>) ret;    List<String> expected = new ArrayList<>(Arrays.asList("BASE32", "BASE32HEX", "BASE64", "BINARY", "HEX"));    Assert.assertTrue(ListUtils.isEqualList(expected, list));}
public void metron_f9591_0() throws Exception
{    Assert.assertTrue(runPredicate("IS_ENCODING(BASE32_FIXTURE,'BASE32')", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("IS_ENCODING(STRING_FIXTURE,'BASE32')", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("IS_ENCODING(BASE32HEX_FIXTURE,'BASE32HEX')", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("IS_ENCODING(STRING_FIXTURE,'BASE32HEX')", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("IS_ENCODING(BASE64_FIXTURE,'BASE64')", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("IS_ENCODING(STRING_FIXTURE_PLUS_NULL,'BASE64')", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("IS_ENCODING(BINARY_FIXTURE,'BINARY')", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("IS_ENCODING(STRING_FIXTURE,'BINARY')", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("IS_ENCODING(HEX_FIXTURE,'HEX')", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("IS_ENCODING(STRING_FIXTURE,'HEX')", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));}
public void metron_f9592_0() throws Exception
{    Assert.assertEquals(STRING_FIXTURE, run("DECODE(BASE32_FIXTURE,'BASE32')", variableMap));    Assert.assertEquals(STRING_FIXTURE, run("DECODE(BASE32HEX_FIXTURE,'BASE32HEX')", variableMap));    Assert.assertEquals(STRING_FIXTURE, run("DECODE(BASE64_FIXTURE,'BASE64')", variableMap));    Assert.assertEquals(STRING_FIXTURE, run("DECODE(BINARY_FIXTURE,'BINARY')", variableMap));    Assert.assertEquals(STRING_FIXTURE, run("DECODE(HEX_FIXTURE,'HEX')", variableMap));        Assert.assertNotEquals(STRING_FIXTURE, run("DECODE(STRING_FIXTURE,'BASE32')", variableMap));    Assert.assertNotEquals(STRING_FIXTURE, run("DECODE(STRING_FIXTURE,'BASE32HEX')", variableMap));    Assert.assertNotEquals(STRING_FIXTURE, run("DECODE(STRING_FIXTURE,'BASE64')", variableMap));            Assert.assertEquals(STRING_FIXTURE, run("DECODE(STRING_FIXTURE,'BINARY')", variableMap));    Assert.assertEquals(STRING_FIXTURE, run("DECODE(STRING_FIXTURE, 'HEX')", variableMap));}
public void metron_f9593_0() throws Exception
{    Assert.assertEquals(STRING_FIXTURE, run("DECODE(BASE32_FIXTURE,'BASE32',true)", variableMap));    Assert.assertEquals(STRING_FIXTURE, run("DECODE(BASE32HEX_FIXTURE,'BASE32HEX',true)", variableMap));    Assert.assertEquals(STRING_FIXTURE, run("DECODE(BASE64_FIXTURE,'BASE64',true)", variableMap));    Assert.assertEquals(STRING_FIXTURE, run("DECODE(BINARY_FIXTURE,'BINARY',true)", variableMap));    Assert.assertEquals(STRING_FIXTURE, run("DECODE(HEX_FIXTURE,'HEX',true)", variableMap));        Assert.assertEquals(STRING_FIXTURE, run("DECODE(STRING_FIXTURE,'BASE32',true)", variableMap));    Assert.assertEquals(STRING_FIXTURE, run("DECODE(STRING_FIXTURE,'BASE32HEX',true)", variableMap));        Assert.assertNotEquals(STRING_FIXTURE, run("DECODE(STRING_FIXTURE,'BASE64',true)", variableMap));        Assert.assertEquals(STRING_FIXTURE_PLUS_NULL, run("DECODE(STRING_FIXTURE_PLUS_NULL,'BASE64',true)", variableMap));    Assert.assertEquals(STRING_FIXTURE, run("DECODE(STRING_FIXTURE,'BINARY',true)", variableMap));    Assert.assertEquals(STRING_FIXTURE, run("DECODE(STRING_FIXTURE,'HEX',true)", variableMap));}
public void metron_f9594_0() throws Exception
{    Assert.assertEquals(BASE32_FIXTURE, run("ENCODE(STRING_FIXTURE,'BASE32')", variableMap));    Assert.assertEquals(BASE32HEX_FIXTURE, run("ENCODE(STRING_FIXTURE,'BASE32HEX')", variableMap));    Assert.assertEquals(BASE64_FIXTURE, run("ENCODE(STRING_FIXTURE,'BASE64')", variableMap));    Assert.assertEquals(BINARY_FIXTURE, run("ENCODE(STRING_FIXTURE,'BINARY')", variableMap));    Assert.assertEquals(HEX_FIXTURE, run("ENCODE(STRING_FIXTURE,'HEX')", variableMap));}
public void metron_f9595_0()
{    for (String expr : ImmutableList.of("ZIP_LONGEST()", "ZIP_LONGEST( null, null )", "ZIP_LONGEST( [], null )", "ZIP_LONGEST( [], [] )", "ZIP_LONGEST( null, [] )")) {        List<List<Object>> o = (List<List<Object>>) run(expr, new HashMap<>());        Assert.assertEquals(0, o.size());    }}
public void metron_f9596_0()
{    Map<String, Object> variables = ImmutableMap.of("list1", ImmutableList.of(1, 2, 3), "list2", ImmutableList.of(4, 5, 6, 7));    for (String expr : ImmutableList.of("ZIP_LONGEST(list1)", "ZIP_LONGEST( [1, 2, 3])")) {        List<List<Object>> o = (List<List<Object>>) run(expr, variables);        Assert.assertEquals(3, o.size());        for (int i = 0; i < 3; ++i) {            List l = o.get(i);            Assert.assertEquals(1, l.size());            Assert.assertEquals(i + 1, l.get(0));        }    }    for (String expr : ImmutableList.of("ZIP_LONGEST(list1, list2)", "ZIP_LONGEST( [1, 2, 3], [4, 5, 6, 7] )")) {        List<List<Object>> o = (List<List<Object>>) run(expr, variables);        Assert.assertEquals(4, o.size());        for (int i = 0; i < 3; ++i) {            List l = o.get(i);            Assert.assertEquals(2, l.size());            Assert.assertEquals(i + 1, l.get(0));            Assert.assertEquals(i + 4, l.get(1));        }        {            int i = 3;            List l = o.get(i);            Assert.assertEquals(2, l.size());            Assert.assertNull(l.get(0));            Assert.assertEquals(i + 4, l.get(1));        }    }    for (String expr : ImmutableList.of("REDUCE(ZIP_LONGEST(list2, list1), (s, x) -> s + GET_FIRST(x) * GET_LAST(x), 0)", "REDUCE(ZIP_LONGEST( [1, 2, 3], [4, 5, 6, 7] ), (s, x) -> s + GET_FIRST(x) * GET_LAST(x), 0)",     "REDUCE(ZIP_LONGEST(list1, list2), (s, x) -> s + GET_FIRST(x) * GET_LAST(x), 0)",     "REDUCE(ZIP_LONGEST(list1, list2), (s, x) -> s + (GET_FIRST(x) == null?0:GET_FIRST(x)) * (GET_LAST(x) == null?0:GET_LAST(x)), 0)")) {        int o = (int) run(expr, variables);        Assert.assertEquals(1 * 4 + 2 * 5 + 3 * 6, o, 1e-7);    }}
public void metron_f9597_0()
{    for (String expr : ImmutableList.of("ZIP()", "ZIP( null, null )", "ZIP( [], null )", "ZIP( [], [] )", "ZIP( null, [] )")) {        List<List<Object>> o = (List<List<Object>>) run(expr, new HashMap<>());        Assert.assertEquals(0, o.size());    }}
public void metron_f9598_0()
{    Map<String, Object> variables = ImmutableMap.of("list1", ImmutableList.of(1, 2, 3), "list2", ImmutableList.of(4, 5, 6));    for (String expr : ImmutableList.of("ZIP(list1)", "ZIP( [1, 2, 3])")) {        List<List<Object>> o = (List<List<Object>>) run(expr, variables);        Assert.assertEquals(3, o.size());        for (int i = 0; i < 3; ++i) {            List l = o.get(i);            Assert.assertEquals(1, l.size());            Assert.assertEquals(i + 1, l.get(0));        }    }    for (String expr : ImmutableList.of("ZIP(list1, list2)", "ZIP( [1, 2, 3], [4, 5, 6] )", "ZIP( [1, 2, 3], [4, 5, 6, 7] )")) {        List<List<Object>> o = (List<List<Object>>) run(expr, variables);        Assert.assertEquals(3, o.size());        for (int i = 0; i < 3; ++i) {            List l = o.get(i);            Assert.assertEquals(2, l.size());            Assert.assertEquals(i + 1, l.get(0));            Assert.assertEquals(i + 4, l.get(1));        }    }    for (String expr : ImmutableList.of("REDUCE(ZIP(list1, list2), (s, x) -> s + GET_FIRST(x) * GET_LAST(x), 0)", "REDUCE(ZIP( [1, 2, 3], [4, 5, 6] ), (s, x) -> s + GET_FIRST(x) * GET_LAST(x), 0)", "REDUCE(ZIP( [1, 2, 3], [4, 5, 6, 7] ), (s, x) -> s + GET_FIRST(x) * GET_LAST(x), 0)")) {        int o = (int) run(expr, variables);        Assert.assertEquals(1 * 4 + 2 * 5 + 3 * 6, o, 1e-7);    }}
public void metron_f9599_0()
{    for (String expr : ImmutableList.of("MAP(list, inner_list -> REDUCE(inner_list, (x, y) -> x + y, 0) )", "MAP(list, (inner_list) -> REDUCE(inner_list, (x, y) -> x + y, 0) )")) {        Object o = run(expr, ImmutableMap.of("list", ImmutableList.of(ImmutableList.of(1, 2, 3), ImmutableList.of(4, 5, 6))));        Assert.assertTrue(o instanceof List);        List<Number> result = (List<Number>) o;        Assert.assertEquals(2, result.size());        Assert.assertEquals(6, result.get(0));        Assert.assertEquals(15, result.get(1));    }}
public void metron_f9600_0()
{    for (String expr : ImmutableList.of("MAP([ 1, 2, null], x -> if x == null then 0 else 2*x )", "MAP([ 1, 2, null], x -> x == null ? 0 : 2*x )", "MAP([ 1, foo, baz], x -> x == null ? 0 : 2*x )")) {        Map<String, Object> variableMap = new HashMap<String, Object>() {            {                put("foo", 2);                put("bar", 3);                put("baz", null);            }        };        Object o = run(expr, variableMap);        Assert.assertTrue(o instanceof List);        List<String> result = (List<String>) o;        Assert.assertEquals(3, result.size());        Assert.assertEquals(2, result.get(0));        Assert.assertEquals(4, result.get(1));        Assert.assertEquals(0, result.get(2));    }}
public void metron_f9601_0()
{    for (String expr : ImmutableList.of("MAP([ 'foo', 'bar'], (x) -> TO_UPPER(x) )", "MAP([ foo, 'bar'], (x) -> TO_UPPER(x) )", "MAP([ foo, bar], (x) -> TO_UPPER(x) )", "MAP([ foo, bar], x -> TO_UPPER(x) )", "MAP([ foo, bar], x -> true?TO_UPPER(x):THROW('error') )", "MAP([ foo, bar], x -> false?THROW('error'):TO_UPPER(x) )")) {        Object o = run(expr, ImmutableMap.of("foo", "foo", "bar", "bar"));        Assert.assertTrue(o instanceof List);        List<String> result = (List<String>) o;        Assert.assertEquals(2, result.size());        Assert.assertEquals("FOO", result.get(0));        Assert.assertEquals("BAR", result.get(1));    }}
public void metron_f9602_0()
{    for (String expr : ImmutableList.of("MAP([ 'foo', 'bar'], (item) -> item == 'foo' )", "MAP([ foo, bar], (item) -> item == 'foo' )", "MAP([ foo, bar], (item) -> item == foo )", "MAP([ foo, bar], item -> item == foo )")) {        Object o = run(expr, ImmutableMap.of("foo", "foo", "bar", "bar"));        Assert.assertTrue(o instanceof List);        List<Boolean> result = (List<Boolean>) o;        Assert.assertEquals(2, result.size());        Assert.assertEquals(true, result.get(0));        Assert.assertEquals(false, result.get(1));    }}
public void metron_f9603_0()
{    for (String expr : ImmutableList.of("FILTER([ 'foo', 'bar'], (item) -> item == 'foo' )", "FILTER([ 'foo', bar], (item) -> item == 'foo' )", "FILTER([ foo, bar], (item) -> item == 'foo' )", "FILTER([ foo, bar], (item) -> (item == 'foo' && true) )", "FILTER([ foo, bar], (item) -> if item == 'foo' then true else false )", "FILTER([ foo, bar], item -> if item == 'foo' then true else false )")) {        Object o = run(expr, ImmutableMap.of("foo", "foo", "bar", "bar"));        Assert.assertTrue(o instanceof List);        List<String> result = (List<String>) o;        Assert.assertEquals(1, result.size());        Assert.assertEquals("foo", result.get(0));    }}
public void metron_f9604_0()
{    for (String expr : ImmutableList.of("FILTER([ 'foo'], item -> item == 'foo' or THROW('exception') )", "FILTER([ 'foo'], (item) -> item == 'foo' or THROW('exception') )")) {        Object o = run(expr, ImmutableMap.of("foo", "foo", "bar", "bar"));        Assert.assertTrue(o instanceof List);        List<String> result = (List<String>) o;        Assert.assertEquals(1, result.size());        Assert.assertEquals("foo", result.get(0));    }}
public void metron_f9605_0()
{    for (String expr : ImmutableList.of("FILTER([ 'foo', null], item -> item == null )", "FILTER([ 'foo', baz], (item) -> item == null )")) {        Map<String, Object> variableMap = new HashMap<String, Object>() {            {                put("foo", "foo");                put("bar", "bar");                put("baz", null);            }        };        Object o = run(expr, variableMap);        Assert.assertTrue(o instanceof List);        List<String> result = (List<String>) o;        Assert.assertEquals(1, result.size());        Assert.assertEquals(null, result.get(0));    }}
public void metron_f9606_0()
{    for (String expr : ImmutableList.of("FILTER([ 'foo', null], item -> item != null )", "FILTER([ 'foo', baz], (item) -> item != null )", "FILTER([ foo, baz], (item) -> item != null )")) {        Map<String, Object> variableMap = new HashMap<String, Object>() {            {                put("foo", "foo");                put("bar", "bar");                put("baz", null);            }        };        Object o = run(expr, variableMap);        Assert.assertTrue(o instanceof List);        List<String> result = (List<String>) o;        Assert.assertEquals(1, result.size());        Assert.assertEquals("foo", result.get(0));    }}
public void metron_f9607_0()
{    for (String expr : ImmutableList.of("FILTER([ foo, bar], () -> false  )", "FILTER([ 'foo', 'bar'], (item)-> false )", "FILTER([ 'foo', bar], (item ) -> false )", "FILTER([ foo, bar], (item) -> false )", "FILTER([ foo, bar], item -> false )")) {        Object o = run(expr, ImmutableMap.of("foo", "foo", "bar", "bar"));        Assert.assertTrue(o instanceof List);        List<String> result = (List<String>) o;        Assert.assertEquals(0, result.size());    }}
public void metron_f9608_0()
{    for (String expr : ImmutableList.of("FILTER([ 'foo', 'bar'], (item) -> true )", "FILTER([ 'foo', bar], (item) -> true )", "FILTER([ foo, bar], (item) -> true )", "FILTER([ foo, bar], item -> true )", "FILTER([ foo, bar], ()-> true )")) {        Object o = run(expr, ImmutableMap.of("foo", "foo", "bar", "bar"));        Assert.assertTrue(o instanceof List);        List<String> result = (List<String>) o;        Assert.assertEquals(2, result.size());        Assert.assertEquals("foo", result.get(0));        Assert.assertEquals("bar", result.get(1));    }}
public void metron_f9609_0()
{    for (String expr : ImmutableList.of("REDUCE([ 1, 2, 3, null], (x, y) -> if y != null then x + y else x , 0 )", "REDUCE([ foo, bar, 3, baz], (sum, y) -> if y != null then sum + y else sum, 0 )")) {        Map<String, Object> variableMap = new HashMap<String, Object>() {            {                put("foo", 1);                put("bar", 2);                put("baz", null);            }        };        Object o = run(expr, variableMap);        Assert.assertTrue(o instanceof Number);        Number result = (Number) o;        Assert.assertEquals(6, result.intValue());    }}
public void metron_f9610_0()
{    for (String expr : ImmutableList.of("REDUCE([ 1, 2, 3 ], (x, y) -> x + y , 0 )", "REDUCE([ foo, bar, 3 ], (x, y) -> x + y , 0 )")) {        Object o = run(expr, ImmutableMap.of("foo", 1, "bar", 2));        Assert.assertTrue(o instanceof Number);        Number result = (Number) o;        Assert.assertEquals(6, result.intValue());    }}
public void metron_f9611_0()
{    {        String expr = "REDUCE([ 1, 2, 3, 4 ], (x, y) -> x + y , 0 )";        Object o = run(expr, ImmutableMap.of());        Assert.assertTrue(o instanceof Number);        Number result = (Number) o;        Assert.assertEquals(10, result.intValue());    }    {        String expr = "REDUCE([ 1, 2 ], (x, y) -> x + y , 0 )";        Object o = run(expr, ImmutableMap.of());        Assert.assertTrue(o instanceof Number);        Number result = (Number) o;        Assert.assertEquals(3, result.intValue());    }    {        String expr = "REDUCE([ 1 ], (x, y) -> x + y , 0 )";        Object o = run(expr, ImmutableMap.of());        Assert.assertTrue(o instanceof Number);        Number result = (Number) o;        Assert.assertEquals(1, result.intValue());    }}
public void metron_f9612_0()
{    for (String expr : ImmutableList.of("REDUCE([ 'foo', 'bar', 'grok'], (x, y) -> LIST_ADD(x, y), [] )")) {        Object o = run(expr, ImmutableMap.of("foo", 1, "bar", 2, "x", 0, "y", 0));        Assert.assertTrue(o instanceof List);        List<String> result = (List<String>) o;        Assert.assertEquals(3, result.size());        Assert.assertEquals("foo", result.get(0));        Assert.assertEquals("bar", result.get(1));        Assert.assertEquals("grok", result.get(2));    }}
public void metron_f9613_0()
{    {        String expr = "REDUCE([ 1, 2, 3 ], (x, y) -> LIST_ADD(x, y))";        Assert.assertThat(run(expr, ImmutableMap.of()), CoreMatchers.equalTo(null));    }    {        String expr = "REDUCE([ 1, 2, 3 ])";        Assert.assertThat(run(expr, ImmutableMap.of()), CoreMatchers.equalTo(null));    }}
public void metron_f9614_0() throws Exception
{    listSupportedHashTypes.apply(null);}
public void metron_f9615_0() throws Exception
{    listSupportedHashTypes.apply(Collections.singletonList("bogus"));}
public void metron_f9616_0() throws Exception
{        final List<String> requiredAlgorithmsByJava = Arrays.asList("MD5", "SHA", "SHA-256");    final Collection<String> supportedHashes = listSupportedHashTypes.apply(Collections.emptyList());    requiredAlgorithmsByJava.forEach(a -> assertTrue(supportedHashes.contains(a)));}
public void metron_f9617_0() throws Exception
{    hash.apply(null);}
public void metron_f9618_0() throws Exception
{    hash.apply(Collections.emptyList());}
public void metron_f9619_0() throws Exception
{    hash.apply(Collections.singletonList("some value."));}
public void metron_f9620_0() throws Exception
{    hash.apply(Arrays.asList("1", "2", "3"));}
public void metron_f9621_0() throws Exception
{    hash.apply(Arrays.asList("1", "2", "3", "4"));}
public void metron_f9622_0() throws Exception
{    hash.apply(Arrays.asList("value to hash", "invalidAlgorithm"));}
public void metron_f9623_0() throws Exception
{    assertNull(hash.apply(Arrays.asList("value to hash", null)));}
public void metron_f9624_0() throws Exception
{    assertEquals(StringUtils.repeat('0', 32), hash.apply(Arrays.asList(null, "md5")));}
public void metron_f9625_0() throws Exception
{    final String algorithm = "'md5'";    final Map<String, Object> variables = new HashMap<>();    variables.put("toHash", null);    assertEquals(StringUtils.repeat('0', 32), run("HASH(toHash, " + algorithm + ")", variables));}
public void metron_f9626_0() throws Exception
{    final String valueToHash = "My value to hash";    final Set<String> algorithms = Security.getAlgorithms("MessageDigest");    algorithms.forEach(algorithm -> {        try {            final MessageDigest expected = MessageDigest.getInstance(algorithm);            expected.update(valueToHash.getBytes(StandardCharsets.UTF_8));            assertEquals(expectedHexString(expected), hash.apply(Arrays.asList(valueToHash, algorithm)));        } catch (NoSuchAlgorithmException e) {            throw new RuntimeException(e);        }    });}
public void metron_f9627_0() throws Exception
{    final String valueToHash = "My value to hash";    final Set<String> algorithms = Security.getAlgorithms("MessageDigest");    algorithms.forEach(algorithm -> {        try {            final Object actual = run("HASH('" + valueToHash + "', '" + algorithm + "')", Collections.emptyMap());            final MessageDigest expected = MessageDigest.getInstance(algorithm);            expected.update(valueToHash.getBytes(StandardCharsets.UTF_8));            assertEquals(expectedHexString(expected), actual);        } catch (NoSuchAlgorithmException e) {            throw new RuntimeException(e);        }    });}
public void metron_f9628_0() throws Exception
{    final String algorithm = "'md5'";    final String valueToHash = "'My value to hash'";    final Serializable input = (Serializable) Collections.singletonList(valueToHash);    final MessageDigest expected = MessageDigest.getInstance(algorithm.replace("'", ""));    expected.update(SerializationUtils.serialize(input));    final Map<String, Object> variables = new HashMap<>();    variables.put("toHash", input);    assertEquals(expectedHexString(expected), run("HASH(toHash, " + algorithm + ")", variables));}
public void metron_f9629_0() throws Exception
{    final String algorithm = "md5";    final String valueToHash = "'My value to hash'";    final Serializable input = (Serializable) Collections.singletonList(valueToHash);    final MessageDigest expected = MessageDigest.getInstance(algorithm);    expected.update(SerializationUtils.serialize(input));    final Map<String, Object> variables = new HashMap<>();    variables.put("toHash", input);    variables.put("hashType", algorithm);    assertEquals(expectedHexString(expected), run("HASH(toHash, hashType)", variables));}
public void metron_f9630_0() throws Exception
{    final String algorithm = "md5";    final String valueToHash = "'My value to hash'";    final MessageDigest expected = MessageDigest.getInstance(algorithm);    expected.update(valueToHash.replace("'", "").getBytes(StandardCharsets.UTF_8));    final Map<String, Object> variables = new HashMap<>();    variables.put("hashType", algorithm);    assertEquals(expectedHexString(expected), run("HASH(" + valueToHash + ", hashType)", variables));}
public void metron_f9631_0() throws Exception
{    final Map<String, Object> variables = new HashMap<>();    variables.put("toHash", new Object());    assertNull(run("HASH(toHash, 'md5')", variables));}
public void metron_f9632_0() throws Exception
{    final Map<String, Object> variables = new HashMap<>();    variables.put("toHash", TLSH_DATA);    variables.put("toHashBytes", TLSH_DATA.getBytes(StandardCharsets.UTF_8));        assertEquals(TLSH_EXPECTED, run("HASH(toHash, 'tlsh')", variables));    assertEquals(TLSH_EXPECTED, run("HASH(toHash, 'TLSH')", variables));    assertEquals(TLSH_EXPECTED, run("HASH(toHashBytes, 'tlsh')", variables));}
public void metron_f9633_0() throws Exception
{    final Map<String, Object> variables = new HashMap<>();    variables.put("toHash", TLSH_DATA);    Map<String, String> out = (Map<String, String>) run("HASH(toHash, 'tlsh', { 'hashes' : [ 8, 16, 32 ]} )", variables);    Assert.assertTrue(out.containsKey(TLSHHasher.TLSH_KEY));    for (int h : ImmutableList.of(8, 16, 32)) {        Assert.assertTrue(out.containsKey(TLSHHasher.TLSH_BIN_KEY + "_" + h));    }}
public void metron_f9634_0() throws Exception
{            Map<Map.Entry<byte[], Map<String, Object>>, String> hashes = new HashMap<>();    Random r = new Random(0);    for (int i = 0; i < 20; ++i) {        byte[] d = new byte[256];        r.nextBytes(d);        Map<String, Object> config = new HashMap<String, Object>() {            {                put(TLSHHasher.Config.BUCKET_SIZE.key, r.nextBoolean() ? 128 : 256);                put(TLSHHasher.Config.CHECKSUM.key, r.nextBoolean() ? 1 : 3);            }        };        String hash = (String) run("HASH(data, 'tlsh', config)", ImmutableMap.of("config", config, "data", d));        Assert.assertNotNull(hash);        hashes.put(new AbstractMap.SimpleEntry<>(d, config), hash);    }    ForkJoinPool forkJoinPool = new ForkJoinPool(5);    forkJoinPool.submit(() -> hashes.entrySet().parallelStream().forEach(kv -> {        Map<String, Object> config = kv.getKey().getValue();        byte[] data = kv.getKey().getKey();        String hash = (String) run("HASH(data, 'tlsh', config)", ImmutableMap.of("config", config, "data", data));        Assert.assertEquals(hash, kv.getValue());    }));}
public void metron_f9635_0() throws Exception
{    for (Map.Entry<String, String> kv : ImmutableMap.of("been", "ben", "document", "dokumant", "code", "cad").entrySet()) {        Map<String, Object> variables = ImmutableMap.of("toHash", TLSH_DATA, "toHashSimilar", TLSH_DATA.replace(kv.getKey(), kv.getValue()));        Map<String, Object> bin1 = (Map<String, Object>) run("HASH(toHashSimilar, 'tlsh', { 'hashes' : 4, 'bucketSize' : 128 })", variables);        Map<String, Object> bin2 = (Map<String, Object>) run("HASH(toHash, 'tlsh', { 'hashes' : [ 4 ], 'bucketSize' : 128 })", variables);        assertEquals(kv.getKey() + " != " + kv.getValue() + " because " + bin1.get("tlsh") + " != " + bin2.get("tlsh"), bin1.get("tlsh_bin"), bin2.get("tlsh_bin"));        assertNotEquals(bin1.get("tlsh"), bin2.get("tlsh"));        Map<String, Object> distVariables = ImmutableMap.of("hash1", bin1.get(TLSHHasher.TLSH_KEY), "hash2", bin2.get(TLSHHasher.TLSH_KEY));        {                        Integer diff = (Integer) run("TLSH_DIST( hash1, hash2)", distVariables);            Integer diffReflexive = (Integer) run("TLSH_DIST( hash2, hash1)", distVariables);            Assert.assertTrue("diff == " + diff, diff < 100);            Assert.assertEquals(diff, diffReflexive);        }        {                        Integer diff = (Integer) run("TLSH_DIST( hash1, hash1)", distVariables);            Assert.assertEquals((int) 0, (int) diff);        }    }}
public void metron_f9636_0() throws Exception
{    final Map<String, Object> variables = new HashMap<>();    variables.put("hash1", 1);    variables.put("hash2", TLSH_EXPECTED);    run("TLSH_DIST( hash1, hash1)", variables);}
public void metron_f9637_0() throws Exception
{    final Map<String, Object> variables = new HashMap<>();    String data = "Metron is the best";    variables.put("toHash", data);    assertNull(run("HASH(toHash, 'tlsh')", variables));}
public void metron_f9638_0() throws Exception
{    final Map<String, Object> variables = new HashMap<>();    String data = null;    variables.put("toHash", data);    assertNull(run("HASH(toHash, 'tlsh')", variables));}
private String metron_f9639_0(MessageDigest expected)
{    return new String(HEX.encode(expected.digest()), StandardCharsets.UTF_8);}
public void metron_f9640_0()
{    Assert.assertTrue(runPredicate("match{NOT(is_alert) => true, foo > 5 => false, foo > 10 => false, default => false}", new HashMap() {        {            put("foo", 100);        }    }));    Assert.assertFalse(runPredicate("match{is_alert => true, foo > 5 => false, foo > 10 => false, default => false}", new HashMap() {        {            put("foo", 100);        }    }));    Assert.assertFalse(runPredicate("match{foo > 5 => false, is_alert => true, foo > 10 => false, default => false}", new HashMap() {        {            put("foo", 100);        }    }));}
public void metron_f9641_0()
{    Assert.assertTrue(runPredicate("match{NOT([]) => true, foo > 5 => false, foo > 10 => false, default => false}", new HashMap() {        {            put("foo", 100);        }    }));    Assert.assertFalse(runPredicate("match{[] => true, foo > 5 => false, foo > 10 => false, default => false}", new HashMap() {        {            put("foo", 100);        }    }));}
public void metron_f9642_0()
{    Assert.assertTrue(runPredicate("match{foo > 0 => true, foo > 5 => false, foo > 10 => false, default => false}", new HashMap() {        {            put("foo", 100);        }    }));}
public void metron_f9643_0()
{    Assert.assertTrue(runPredicate("match{foo < 0 => false, foo < 500 => true, default => false}", new HashMap() {        {            put("foo", 100);        }    }));}
public void metron_f9644_0()
{    List<String> list = (List<String>) run("match{ foo > 100 => ['oops'], foo > 200 => ['oh no'], foo >= 500 => MAP(['ok', 'haha'], (a) -> TO_UPPER(a)), default => ['a']}", new HashMap() {        {            put("foo", 500);        }    });    Assert.assertTrue(list.size() == 1);    Assert.assertTrue(list.contains("oops"));}
public void metron_f9645_0()
{    Assert.assertEquals("ok", run("match{ foo > 100 => THROW('oops'), foo > 200 => THROW('oh no'), default => 'ok' }", new HashMap() {        {            put("foo", 50);        }    }));}
public void metron_f9646_0()
{    Assert.assertTrue(runPredicate("match { 1 >= 0 => ()-> true, default => ()->false }", new HashMap() {        {            put("foo", 0);        }    }));    Assert.assertTrue(runPredicate("match { foo == 0 => ()-> true, default => ()-> false }", new HashMap() {        {            put("foo", 0);        }    }));    Assert.assertFalse(runPredicate("match { foo == 0 => ()-> true, default => ()-> false }", new HashMap() {        {            put("foo", 1);        }    }));    Assert.assertTrue(runPredicate("match { foo == 0 => ()-> false, foo == 1 => ()-> true, default => ()-> false }", new HashMap() {        {            put("foo", 1);        }    }));    Assert.assertTrue(runPredicate("match { foo == 0 => ()-> bFalse, foo == 1 => ()-> bTrue, default => ()-> bFalse }", new HashMap() {        {            put("foo", 1);            put("bFalse", false);            put("bTrue", true);        }    }));    Assert.assertTrue(runPredicate("match { foo == 0 => ()-> bFalse, foo == 1 => ()-> bTrue, default => ()-> bFalse }", new HashMap() {        {            put("foo", 1);            put("bFalse", false);            put("bTrue", true);        }    }));}
public void metron_f9647_0()
{    String expr = "match{ var1 =>  MAP(['foo', 'bar'], (x) -> TO_UPPER(x)), default => null }";    Object o = run(expr, ImmutableMap.of("foo", "foo", "bar", "bar", "var1", true));    Assert.assertTrue(o instanceof List);    List<String> result = (List<String>) o;    Assert.assertEquals(2, result.size());    Assert.assertEquals("FOO", result.get(0));    Assert.assertEquals("BAR", result.get(1));}
public void metron_f9648_0()
{    Assert.assertEquals(Arrays.asList("OK", "HAHA"), run("match{ foo > 100 => THROW('oops'), foo > 200 => THROW('oh no'), foo >= 50 => MAP(['ok', 'haha'], (a) -> TO_UPPER(a)), default=> 'a' }", new HashMap() {        {            put("foo", 50);        }    }));}
public void metron_f9649_0()
{    List<String> ret = (List<String>) run("match{ foo < 100 => ['oops'], default => MAP(['ok', 'haha'], (a) -> TO_UPPER(a))}", new HashMap() {        {            put("foo", 500);        }    });    Assert.assertTrue(ret.size() == 2);    Assert.assertTrue(ret.contains("OK"));    Assert.assertTrue(ret.contains("HAHA"));}
public void metron_f9650_0()
{    run("match{ foo < 100 => ['oops'], foo < 200 => ['oh no'], foo >= 500 => MAP(['ok', 'haha'], (a) -> TO_UPPER(a)), default => ['a']}", new HashMap() {        {            put("foo", 500);        }    });}
public void metron_f9651_0()
{    final Map<String, String> variables = new HashMap<String, String>() {        {            put("numbers", "12345");            put("numberPattern", "\\d(\\d)(\\d).*");            put("letters", "abcde");            put("empty", "");        }    };    Assert.assertTrue(runPredicate("match{ REGEXP_MATCH(numbers,numberPattern)=> true, default => false}", new DefaultVariableResolver(variables::get, variables::containsKey)));    Assert.assertFalse(runPredicate("match{ REGEXP_MATCH(letters,numberPattern) => true, default =>false}", new DefaultVariableResolver(variables::get, variables::containsKey)));}
public void metron_f9652_0()
{    Assert.assertTrue(runPredicate("match { foo == 0 => bFalse, foo == 1 => bTrue, default => false }", new HashMap() {        {            put("foo", 1);            put("bFalse", false);            put("bTrue", true);        }    }));    Assert.assertEquals("warning", run("match{ threat.triage.level < 10 => 'info', threat.triage.level < 20 => 'warning', default => 'critical' }", new HashMap() {        {            put("threat.triage.level", 15);        }    }));}
public void metron_f9653_0()
{    Assert.assertEquals("WARNING", run("match{ threat.triage.level < 10 => 'info', threat.triage.level < 20 => TO_UPPER('warning'), default => 'critical' }", new HashMap() {        {            put("threat.triage.level", 15);        }    }));}
public void metron_f9654_0()
{    Assert.assertEquals("false", run("match{ threat.triage.level < 10 => 'info', threat.triage.level < 20 => TO_STRING(IS_ENCODING(other,'BASE32')), default => 'critical' }", new HashMap() {        {            put("threat.triage.level", 15);            put("other", "value");        }    }));    Assert.assertEquals(false, run("match{ threat.triage.level < 10 => 'info', threat.triage.level < 20 => IS_ENCODING(other,'BASE32'), default => 'critical' }", new HashMap() {        {            put("threat.triage.level", 15);            put("other", "value");        }    }));}
public void metron_f9655_0()
{    Assert.assertTrue(runPredicate("match { foo == 0  OR bar == 'yes' => ()-> true, default => ()-> false }", new HashMap() {        {            put("foo", 1);            put("bar", "yes");        }    }));    Assert.assertTrue(runPredicate("match { foo == 0  AND bar == 'yes' => ()-> true, default => ()-> false }", new HashMap() {        {            put("foo", 0);            put("bar", "yes");        }    }));}
public void metron_f9656_0()
{    Assert.assertEquals("a", run("match{ foo == 5 ? true : false => 'a', default => 'ok' }", new HashMap() {        {            put("foo", 5);        }    }));}
public void metron_f9657_0()
{    Assert.assertEquals(false, run("match{ threat.triage.level < 10 => 'info', threat.triage.level < 20 => IS_ENCODING(other,'BASE32')? true : false, default => 'critical' }", new HashMap() {        {            put("threat.triage.level", 15);            put("other", "value");        }    }));}
public void metron_f9658_0()
{    Assert.assertEquals("a", run("match{ IF foo == 5 THEN true ELSE false => 'a', default => 'ok' }", new HashMap() {        {            put("foo", 5);        }    }));}
public void metron_f9659_0()
{    Assert.assertEquals(2, run("match{ foo == true => IF bar THEN 1 ELSE 2, default => 0}", new HashMap() {        {            put("foo", true);            put("bar", false);        }    }));}
public void metron_f9660_0()
{    Assert.assertEquals("a", run("match{ foo => 'a', default => null}", new HashMap() {        {            put("foo", true);        }    }));}
public void metron_f9661_0()
{    Assert.assertEquals("a", run("match{ foo == 5 => 'a', default => 'ok' }", new HashMap() {        {            put("foo", 5);        }    }));}
public void metron_f9662_0()
{    Assert.assertEquals("a", run("match{ foo => 'a', default => 'b' }", new HashMap() {        {            put("foo", true);        }    }));}
public void metron_f9663_0()
{    Assert.assertEquals("a", run("match{ foo == true => 'a', default=> 'b' }", new HashMap() {        {            put("foo", true);        }    }));}
public void metron_f9664_0()
{    Assert.assertNull(run("match{ foo == null => null, foo == true => 'not that null', default => 'really not that null'}", new HashMap() {        {            put("foo", null);        }    }));}
public void metron_f9665_0()
{    run("match{ foo > 100 => 'greater than 100', foo > 200 => 'greater than 200' }", new HashMap() {        {            put("foo", 50);        }    });}
public void metron_f9666_0()
{        Assert.assertEquals(false, run("match{  x == 0 => match{ y == 10 => false, default => true}, default => true}", new HashMap() {        {            put("x", 0);            put("y", 10);        }    }));}
public void metron_f9667_0()
{    Object o = run("match{ foo > 100 => ['oops'],default => ['a']}", new HashMap() {        {            put("foo", 500);        }    });    List l = (List) o;    Assert.assertTrue(l.size() == 1);}
public static Object metron_f9668_0(String rule, Map<String, Object> variables)
{    Context context = Context.EMPTY_CONTEXT();    StellarProcessor processor = new StellarProcessor();    Assert.assertTrue(rule + " not valid.", processor.validate(rule, context));    return processor.parse(rule, new DefaultVariableResolver(v -> variables.get(v), v -> variables.containsKey(v)), StellarFunctions.FUNCTION_RESOLVER(), context);}
public void metron_f9669_0()
{    assertValues("ABS", new HashMap<Double, Double>(baseExpectations) {        {            put(0d, 0d);            put(10.5d, 10.5d);            put(-10.5d, 10.5d);        }    });}
public void metron_f9670_0()
{    assertValues("SQRT", new HashMap<Double, Double>(baseExpectations) {        {            put(0d, 0d);            put(25d, 5d);            put(-10.5d, Double.NaN);        }    });}
public void metron_f9671_0()
{    assertValues("CEILING", new HashMap<Double, Double>(baseExpectations) {        {            put(0d, 0d);            put(10.5d, 11d);            put(-10.5d, -10d);        }    });}
public void metron_f9672_0()
{    assertValues("FLOOR", new HashMap<Double, Double>(baseExpectations) {        {            put(0d, 0d);            put(10.5d, 10d);            put(-10.5d, -11d);        }    });}
public void metron_f9673_0()
{    assertValues("SIN", new HashMap<Double, Double>(baseExpectations) {        {            put(0d, 0d);            put(Math.PI / 6, 0.5);            put(Math.PI / 4, Math.sqrt(2) / 2.0);            put(Math.PI / 3, Math.sqrt(3) / 2.0);            put(Math.PI / 2, 1d);        }    });}
public void metron_f9674_0()
{    assertValues("COS", new HashMap<Double, Double>(baseExpectations) {        {            put(0d, 1d);            put(Math.PI / 6, Math.sqrt(3) / 2.0);            put(Math.PI / 4, Math.sqrt(2) / 2.0);            put(Math.PI / 3, 0.5d);            put(Math.PI / 2, 0d);        }    });}
public void metron_f9675_0()
{    assertValues("TAN", new HashMap<Double, Double>(baseExpectations) {        {            put(0d, 0d);            put(Math.PI / 6, Math.sqrt(3) / 3.0);            put(Math.PI / 4, 1d);            put(Math.PI / 3, Math.sqrt(3));            put(Math.PI / 2, Math.sin(Math.PI / 2) / Math.cos(Math.PI / 2));        }    });}
public void metron_f9676_0()
{    assertValues("EXP", new HashMap<Double, Double>(baseExpectations) {        {            put(0d, 1d);            put(0.5d, Math.sqrt(Math.E));            put(-0.5d, 1 / Math.sqrt(Math.E));            put(1d, Math.E);            put(2d, Math.E * Math.E);        }    });}
public void metron_f9677_0()
{    assertValues("ROUND", new HashMap<Double, Double>(baseExpectations) {        {            put(0d, 0d);            put(0.5d, 1d);            put(0.4d, 0d);            put(-0.5d, 0d);        }    });}
public void metron_f9678_0()
{    testLog("LN", Math.E);}
public void metron_f9679_0()
{    testLog("LOG2", 2);}
public void metron_f9680_0()
{    testLog("LOG10", 10);}
public void metron_f9681_0()
{    Assert.assertTrue(runPredicate("IS_NAN(NaN)", new HashMap<>()));    Assert.assertFalse(runPredicate("IS_NAN(1.0)", new HashMap<>()));    Assert.assertTrue(runPredicate("IS_NAN(0.0/0.0)", new HashMap<>()));}
public void metron_f9682_0()
{    runPredicate("IS_NAN('casey')", new HashMap<>());}
public void metron_f9683_0()
{    runPredicate("IS_NAN()", new HashMap<>());}
public void metron_f9684_0(String func, Map<Double, Double> expected)
{    for (Map.Entry<Double, Double> test : expected.entrySet()) {        for (String expr : ImmutableList.of(func + "(value)", func + "(" + test.getKey() + ")")) {            if (Double.isNaN(test.getValue())) {                Assert.assertTrue(expr + " != NaN, where value == " + test.getKey(), Double.isNaN(toDouble(run(expr, ImmutableMap.of("value", test.getKey())))));            } else {                Assert.assertEquals(expr + " != " + test.getValue() + " (where value == " + test.getKey() + ")", test.getValue(), toDouble(run(expr, ImmutableMap.of("value", test.getKey()))), EPSILON);            }        }    }}
public Double metron_f9685_0(Object n)
{    return ((Number) n).doubleValue();}
public void metron_f9686_0(String logExpr, double base)
{    Map<Double, Double> expectedValues = new HashMap<Double, Double>(baseExpectations) {        {            put(base, 1d);            put(0d, Double.NEGATIVE_INFINITY);        }    };    for (int i = 1; i <= 10; ++i) {        expectedValues.put(Math.pow(base, i), (double) i);    }    assertValues(logExpr, expectedValues);}
public void metron_f9687_0() throws Exception
{    context = new Context.Builder().build();}
public void metron_f9688_0() throws Exception
{    List<Object> inputList = new ArrayList<Object>() {        {            add(12L);            add(56.0);            add(56.3);        }    };    Object res = run("MAX(input_list)", ImmutableMap.of("input_list", inputList));    Assert.assertNotNull(res);    Assert.assertEquals(56.3, res);}
public void metron_f9689_0() throws Exception
{    List<Object> inputList = new ArrayList<Object>() {        {            add(12L);            add(56.0);            add(457L);        }    };    Object res = run("MIN(input_list)", ImmutableMap.of("input_list", inputList));    Assert.assertNotNull(res);    Assert.assertEquals(res, 12L);}
public void metron_f9690_0() throws Exception
{    List<Object> inputList = new ArrayList<Object>() {        {            add("value3");            add("value1");            add("23");            add("value2");        }    };    Object res = run("MAX(input_list)", ImmutableMap.of("input_list", inputList));    Assert.assertNotNull(res);    Assert.assertTrue(res.equals("value3"));}
public void metron_f9691_0() throws Exception
{    List<Object> inputList = new ArrayList<Object>() {        {            add(12);            add(56);        }    };    Object res = run("MAX(input_list)", ImmutableMap.of("input_list", inputList));    Assert.assertNotNull(res);    Assert.assertTrue(res.equals(56));}
public void metron_f9692_0() throws Exception
{    Object res = run("MAX([string1,string2])", ImmutableMap.of("string1", "abc", "string2", "def"));    Assert.assertNotNull(res);    Assert.assertTrue(res.equals("def"));}
public void metron_f9693_0() throws Exception
{    List<Object> inputList = new ArrayList<Object>() {        {            add(145);            add(null);        }    };    Object res = run("MIN(input_list)", ImmutableMap.of("input_list", inputList));    Assert.assertNotNull(res);    Assert.assertTrue(res.equals(145));}
public void metron_f9694_0() throws Exception
{    List<Object> inputList = new ArrayList<Object>() {        {            add(null);            add(null);        }    };    Object res = run("MAX(input_list)", ImmutableMap.of("input_list", inputList));    Assert.assertNull(res);}
public void metron_f9695_0() throws Exception
{    List<Object> inputList = new ArrayList<Object>() {        {            add(56);            add(12);            add(23);            add(null);        }    };    Object res = run("MIN(input_list)", ImmutableMap.of("input_list", inputList));    Assert.assertNotNull(res);    Assert.assertTrue(res.equals(12));}
public void metron_f9696_0() throws Exception
{    List<Object> inputList = new ArrayList<Object>() {        {            add(12L);            add(56L);            add(457L);        }    };    Object res = run("MAX(input_list)", ImmutableMap.of("input_list", inputList));    Assert.assertNotNull(res);    Assert.assertTrue(res.equals(457L));}
public void metron_f9697_0() throws Exception
{    List<Object> inputList = new ArrayList<Object>() {        {            add(12);            add("string");            add(457L);        }    };    Object res = null;    try {        res = run("MAX(input_list)", ImmutableMap.of("input_list", inputList));    } catch (ParseException e) {        Assert.assertTrue(e.getMessage().contains("Incomparable objects were submitted to MAX: class java.lang.String is incomparable to class java.lang.Long"));        Assert.assertNull(res);    }}
public void metron_f9698_0() throws Exception
{    Set<Object> inputSet = new HashSet<Object>() {        {            add(14L);            add(15.3d);            add(15);        }    };    Object res = run("MAX(input_set)", ImmutableMap.of("input_set", inputSet));    Assert.assertNotNull(res);    Assert.assertTrue(res.equals(15.3d));}
public void metron_f9699_0() throws Exception
{    class TestObject {        private String arg;        public TestObject(String arg) {            this.arg = arg;        }    }    List<Object> inputList = new ArrayList<Object>() {        {            add(new TestObject("one"));            add(new TestObject("two"));            add(new TestObject("three"));        }    };    Object res = null;    try {        res = run("MIN(input_list)", ImmutableMap.of("input_list", inputList));    } catch (ParseException e) {        Assert.assertTrue(e.getMessage().contains("Noncomparable object type org.apache.metron.stellar.dsl.functions.OrdinalFunctionsTest$1TestObject submitted to MIN"));        Assert.assertNull(res);    }}
public void metron_f9700_0() throws Exception
{    Ordinal provider = new Ordinal() {        @Override        public double getMin() {            return 10;        }        @Override        public double getMax() {            return 100;        }    };    Object res = run("MAX(input_list)", ImmutableMap.of("input_list", provider));    Assert.assertNotNull(res);    Assert.assertTrue(res.equals(100.0d));}
public double metron_f9701_0()
{    return 10;}
public double metron_f9702_0()
{    return 100;}
public void metron_f9703_0() throws Exception
{    Ordinal provider = new Ordinal() {        @Override        public double getMin() {            return 10;        }        @Override        public double getMax() {            return 100;        }    };    Object res = run("MIN(input_list)", ImmutableMap.of("input_list", provider));    Assert.assertNotNull(res);    Assert.assertTrue(res.equals(10.0d));}
public double metron_f9704_0()
{    return 10;}
public double metron_f9705_0()
{    return 100;}
public Object metron_f9706_0(String rule, Map<String, Object> variables) throws Exception
{    StellarProcessor processor = new StellarProcessor();    return processor.parse(rule, new DefaultVariableResolver(x -> variables.get(x), x -> variables.containsKey(x)), StellarFunctions.FUNCTION_RESOLVER(), context);}
public void metron_f9707_0() throws Exception
{    final Map<String, String> variableMap = new HashMap<String, String>() {        {            put("numbers", "12345");            put("numberPattern", "\\d(\\d)(\\d).*");            put("letters", "abcde");            put("letterPattern", "[a-zA-Z]+");            put("empty", "");        }    };    Assert.assertTrue(runPredicate("REGEXP_MATCH(numbers,numberPattern)", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("REGEXP_MATCH(letters,numberPattern)", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("REGEXP_MATCH(letters,[numberPattern,letterPattern])", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("REGEXP_MATCH(letters,[numberPattern])", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("REGEXP_MATCH(letters,[numberPattern,numberPattern])", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("REGEXP_MATCH(null,[numberPattern])", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("REGEXP_MATCH(letters,null)", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("REGEXP_MATCH(letters,[null])", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));}
public void metron_f9708_0() throws Exception
{    final Map<String, String> variableMap = new HashMap<String, String>() {        {            put("numbers", "12345");            put("numberPattern", "\\d(\\d)(\\d).*");            put("numberPatternNoCaptures", "\\d\\d\\d.*");            put("letters", "abcde");            put("empty", "");        }    };    Assert.assertTrue(runPredicate("REGEXP_GROUP_VAL(numbers,numberPattern,2) == '3'", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("REGEXP_GROUP_VAL(letters,numberPattern,2) == null", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("REGEXP_GROUP_VAL(empty,numberPattern,2) == null", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("REGEXP_GROUP_VAL(numbers,numberPatternNoCaptures,2) == null", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    boolean thrown = false;    try {        runPredicate("REGEXP_GROUP_VAL(2) == null", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v)));    } catch (ParseException | IllegalStateException ise) {        thrown = true;    }    if (!thrown) {        Assert.assertTrue("Did not fail on wrong number of parameters", false);    }}
public void metron_f9709_0() throws Exception
{    final Map<String, String> variableMap = new HashMap<String, String>() {        {            put("numbers", "12345");            put("numberPattern", "\\d(\\d)(\\d).*");            put("letters", "abcde");            put("empty", "");        }    };    Assert.assertTrue(runPredicate("REGEXP_REPLACE(empty, numberPattern, letters) == null", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("REGEXP_REPLACE(numbers, empty, empty) == numbers", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("REGEXP_REPLACE(numbers, empty, letters) == numbers", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("REGEXP_REPLACE(numbers, numberPattern, empty) == numbers", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("REGEXP_REPLACE(numbers, numberPattern, letters) == letters", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("REGEXP_REPLACE(letters, numberPattern, numbers) == letters", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));}
public Set<Class<? extends StellarFunction>> metron_f9710_0()
{    return classesToResolve;}
public TestResolver metron_f9711_0(Class<? extends StellarFunction> clazz)
{    this.classesToResolve.add(clazz);    return this;}
public Object metron_f9712_0(List<Object> args)
{    return null;}
public void metron_f9713_0() throws IOException
{    closeCallCount++;    if (throwException) {        Throwable cause = new Throwable("Some nasty nasty cause.");        throw new IOException("Bad things happened", cause);    }}
public Object metron_f9714_0(List<Object> args)
{    return null;}
public void metron_f9715_0() throws IOException
{    closeCallCount++;    if (throwException) {        throw new NullPointerException("A most annoying exception.");    }}
public void metron_f9716_0()
{    resolver = new TestResolver();    IAmAFunction.throwException = false;    IAmAnotherFunction.throwException = false;}
public void metron_f9717_0() throws IOException
{    resolver.withClass(IAmAFunction.class);    resolver.withClass(IAmAnotherFunction.class);    resolver.close();    assertThat(IAmAFunction.closeCallCount, equalTo(1));    assertThat(IAmAnotherFunction.closeCallCount, equalTo(1));}
public void metron_f9718_0() throws IOException
{    IAmAFunction.throwException = true;    IAmAnotherFunction.throwException = true;    resolver.withClass(IAmAFunction.class);    resolver.withClass(IAmAnotherFunction.class);    exception.expect(IOException.class);    resolver.close();}
public void metron_f9719_0() throws IOException
{    IAmAFunction.throwException = true;    IAmAnotherFunction.throwException = true;    resolver.withClass(IAmAFunction.class);    resolver.withClass(IAmAnotherFunction.class);    try {        resolver.close();        Assert.fail("Should have thrown an exception.");    } catch (IOException e) {        }    assertThat(IAmAFunction.closeCallCount, equalTo(1));    assertThat(IAmAnotherFunction.closeCallCount, equalTo(1));        resolver.close();    resolver.close();    resolver.close();    assertThat(IAmAFunction.closeCallCount, equalTo(1));    assertThat(IAmAnotherFunction.closeCallCount, equalTo(1));}
public static void metron_f9720_0()
{        Properties config = new Properties();        ClasspathFunctionResolver resolver = create(config);    expectedFunctions = Lists.newArrayList(resolver.getFunctions());}
public static ClasspathFunctionResolver metron_f9721_0(Properties config)
{    ClasspathFunctionResolver resolver = new ClasspathFunctionResolver();    Context context = new Context.Builder().with(Context.Capabilities.STELLAR_CONFIG, () -> config).build();    resolver.initialize(context);    return resolver;}
public void metron_f9722_0()
{        Properties config = new Properties();    config.put(STELLAR_SEARCH_INCLUDES_KEY.param(), "org.apache.metron.*");        ClasspathFunctionResolver resolver = create(config);    List<String> actual = Lists.newArrayList(resolver.getFunctions());        Assert.assertEquals(expectedFunctions, actual);}
public void metron_f9723_0()
{        Properties config = new Properties();    config.put(STELLAR_SEARCH_INCLUDES_KEY.param(), "org.apache.metron.common.*, org.apache.metron.management.*");        ClasspathFunctionResolver resolver = create(config);    List<String> actual = Lists.newArrayList(resolver.getFunctions());        Assert.assertTrue(actual.size() > 0);    Assert.assertTrue(actual.size() <= expectedFunctions.size());}
public void metron_f9724_0()
{        Properties config = new Properties();    config.put(STELLAR_SEARCH_EXCLUDES_KEY.param(), "org.apache.metron.*");        ClasspathFunctionResolver resolver = create(config);    List<String> actual = Lists.newArrayList(resolver.getFunctions());        Assert.assertEquals(0, actual.size());}
public void metron_f9725_0() throws FileSystemException, ClassNotFoundException
{    File jar = new File("src/test/classpath-resources");    Assert.assertTrue(jar.exists());    Properties config = new Properties();    config.put(STELLAR_VFS_PATHS.param(), jar.toURI() + "/.*.jar");    ClasspathFunctionResolver resolver = create(config);    HashSet<String> functions = new HashSet<>(Lists.newArrayList(resolver.getFunctions()));    Assert.assertTrue(functions.contains("NOW"));}
public void metron_f9726_0() throws Exception
{    StellarFunction goodFunc = mock(StellarFunction.class);    StellarFunction badFunc = mock(StellarFunction.class);    ClasspathFunctionResolver resolver = new ClasspathFunctionResolver() {        @Override        protected Iterable<Class<?>> getStellarClasses(ClassLoader cl) {            return ImmutableList.of(goodFunc.getClass(), badFunc.getClass());        }        @Override        protected boolean includeClass(Class<?> c, FilterBuilder filterBuilder) {            if (c != goodFunc.getClass()) {                throw new LinkageError("failed!");            }            return true;        }    };    Set<Class<? extends StellarFunction>> funcs = resolver.resolvables();    Assert.assertEquals(1, funcs.size());    Assert.assertEquals(goodFunc.getClass(), Iterables.getFirst(funcs, null));}
protected Iterable<Class<?>> metron_f9727_0(ClassLoader cl)
{    return ImmutableList.of(goodFunc.getClass(), badFunc.getClass());}
protected boolean metron_f9728_0(Class<?> c, FilterBuilder filterBuilder)
{    if (c != goodFunc.getClass()) {        throw new LinkageError("failed!");    }    return true;}
public void metron_f9729_0()
{    resolver = new SimpleFunctionResolver();}
public void metron_f9730_0()
{    resolver.withClass(IAmAFunction.class);    List<String> functions = Lists.newArrayList(resolver.getFunctions());    Assert.assertEquals(1, functions.size());    Assert.assertTrue(functions.contains("namespace_function"));}
public void metron_f9731_0()
{    resolver.withClass(IAmAFunction.class);    final String functionName = "namespace_function";    StellarFunction fn = resolver.apply(functionName);    Assert.assertTrue(fn instanceof IAmAFunction);}
public void metron_f9732_0()
{    resolver.withClass(MissingAnnotation.class);    List<String> functions = Lists.newArrayList(resolver.getFunctions());    Assert.assertEquals(0, functions.size());}
public void metron_f9733_0()
{    resolver.withClass(IAmAFunction.class);    resolver.withClass(IAmAFunction.class);    List<String> functions = Lists.newArrayList(resolver.getFunctions());    Assert.assertEquals(1, functions.size());}
public Object metron_f9734_0(List<Object> args)
{    return null;}
public Object metron_f9735_0(List<Object> args, Context context) throws ParseException
{    return null;}
public boolean metron_f9737_0()
{    return false;}
public void metron_f9738_0() throws Exception
{    context = new Context.Builder().with(Context.Capabilities.GLOBAL_CONFIG, HashMap::new).build();        basicAuthPasswordFile = tempDir.newFile("basicAuth.txt");    FileUtils.writeStringToFile(basicAuthPasswordFile, basicAuthPassword, StandardCharsets.UTF_8);    proxyBasicAuthPasswordFile = tempDir.newFile("proxyBasicAuth.txt");    FileUtils.writeStringToFile(proxyBasicAuthPasswordFile, proxyAuthPassword, StandardCharsets.UTF_8);        baseUri = String.format("http://localhost:%d", mockServerRule.getPort());    getUri = baseUri + "/get";    emptyGetUri = baseUri + "/get/empty";    postUri = baseUri + "/post";    emptyPostUri = baseUri + "/post/empty";    mockServerClient.when(request().withMethod("GET").withPath("/get")).respond(response().withBody("{\"get\":\"success\"}"));    mockServerClient.when(request().withMethod("GET").withPath("/get/empty")).respond(response().withStatusCode(404));    mockServerClient.when(request().withMethod("POST").withPath("/post").withBody("{\"key\":\"value\"}")).respond(response().withBody("{\"post\":\"success\"}"));    mockServerClient.when(request().withMethod("POST").withPath("/post/empty")).respond(response().withStatusCode(404));}
public void metron_f9739_0() throws Exception
{    Map<String, Object> actual = (Map<String, Object>) run(String.format("REST_GET('%s')", getUri), context);    assertEquals(1, actual.size());    assertEquals("success", actual.get("get"));}
public void metron_f9740_0() throws Exception
{    mockServerClient.when(request().withMethod("GET").withPath("/get/with/query/parameters").withQueryStringParameter("key", "value")).respond(response().withBody("{\"get.with.query.parameters\":\"success\"}"));    Map<String, Object> variables = ImmutableMap.of("queryParameters", ImmutableMap.of("key", "value"));    Map<String, Object> actual = (Map<String, Object>) run(String.format("REST_GET('%s', {}, queryParameters)", baseUri + "/get/with/query/parameters"), variables, context);    assertEquals(1, actual.size());    assertEquals("success", actual.get("get.with.query.parameters"));}
public void metron_f9741_0()
{    mockServerClient.when(request().withMethod("GET").withPath("/get")).respond(response().withBody("{\"proxyGet\":\"success\"}"));    context.addCapability(Context.Capabilities.GLOBAL_CONFIG, () -> new HashMap<String, Object>() {        {            put(PROXY_HOST, "localhost");            put(PROXY_PORT, proxyRule.getHttpPort());        }    });    Map<String, Object> actual = (Map<String, Object>) run(String.format("REST_GET('%s')", getUri), context);    assertEquals(1, actual.size());    assertEquals("success", actual.get("proxyGet"));}
public void metron_f9742_0()
{    mockServerClient.when(request().withMethod("GET").withPath("/get")).respond(response().withStatusCode(403));    assertNull(run(String.format("REST_GET('%s')", getUri), context));}
public void metron_f9743_0()
{    assertEquals("function config override", run(String.format("REST_GET('%s', %s)", emptyGetUri, emptyContentOverride), context));}
public void metron_f9744_0()
{    mockServerClient.when(request().withMethod("GET").withPath("/get")).respond(response().withStatusCode(500));    Object result = run(String.format("REST_GET('%s', %s)", getUri, errorValueOverride), context);    assertEquals("error message", result);}
public void metron_f9745_0()
{    String uri = String.format("http://localhost:%d/get", mockServerRule.getPort());    mockServerClient.when(request().withMethod("GET").withPath("/get")).respond(response().withDelay(TimeUnit.MILLISECONDS, 1000).withBody("{\"get\":\"success\"}"));    Map<String, Object> globalConfig = new HashMap<String, Object>() {        {            put(STELLAR_REST_SETTINGS, new HashMap<String, Object>() {                {                    put(TIMEOUT, 10);                }            });        }    };    context.addCapability(Context.Capabilities.GLOBAL_CONFIG, () -> globalConfig);    Map<String, Object> actual = (Map<String, Object>) run(String.format("REST_GET('%s')", uri), context);    assertNull(actual);}
public void metron_f9746_0()
{    String uri = String.format("http://localhost:%d/get", mockServerRule.getPort());    mockServerClient.when(request().withMethod("GET").withPath("/get")).respond(response().withDelay(TimeUnit.MILLISECONDS, 1000).withBody("{\"get\":\"success\"}"));    String expression = String.format("REST_GET('%s', %s)", uri, timeoutConfig);    Map<String, Object> actual = (Map<String, Object>) run(expression, context);    assertNull(actual);}
public void metron_f9747_0() throws IllegalArgumentException, IOException
{    thrown.expect(ParseException.class);    thrown.expectMessage("Unable to parse REST_GET('some invalid uri'): Unable to parse: REST_GET('some invalid uri') due to: Illegal character in path at index 4: some invalid uri");    run("REST_GET('some invalid uri')", context);}
public void metron_f9748_0()
{    thrown.expect(ParseException.class);    thrown.expectMessage("Unable to parse REST_GET(): Unable to parse: REST_GET() due to: Expected at least 1 argument(s), found 0");    run("REST_GET()", context);}
public void metron_f9749_0()
{    Map<String, Object> globalConfig = new HashMap<String, Object>() {        {            put(STELLAR_REST_SETTINGS, new HashMap<String, Object>() {                {                    put(RESPONSE_CODES_ALLOWED, Arrays.asList(200, 404));                    put(EMPTY_CONTENT_OVERRIDE, "global config override");                }            });        }    };    context.addCapability(Context.Capabilities.GLOBAL_CONFIG, () -> globalConfig);    assertEquals("global config override", run(String.format("REST_GET('%s')", emptyGetUri), context));}
public void metron_f9750_0()
{    Map<String, Object> globalConfig = new HashMap<String, Object>() {        {            put(STELLAR_REST_SETTINGS, new HashMap<String, Object>() {                {                    put(RESPONSE_CODES_ALLOWED, Arrays.asList(200, 404));                    put(EMPTY_CONTENT_OVERRIDE, "global config override");                }            });            put(STELLAR_REST_GET_SETTINGS, new HashMap<String, Object>() {                {                    put(EMPTY_CONTENT_OVERRIDE, "get config override");                }            });        }    };    context.addCapability(Context.Capabilities.GLOBAL_CONFIG, () -> globalConfig);    assertEquals("get config override", run(String.format("REST_GET('%s')", emptyGetUri), context));}
public void metron_f9751_0()
{    Map<String, Object> globalConfig = new HashMap<String, Object>() {        {            put(STELLAR_REST_SETTINGS, new HashMap<String, Object>() {                {                    put(RESPONSE_CODES_ALLOWED, Arrays.asList(200, 404));                    put(EMPTY_CONTENT_OVERRIDE, "global config override");                }            });            put(STELLAR_REST_GET_SETTINGS, new HashMap<String, Object>() {                {                    put(EMPTY_CONTENT_OVERRIDE, "get config override");                }            });        }    };    context.addCapability(Context.Capabilities.GLOBAL_CONFIG, () -> globalConfig);    assertEquals("function config override", run(String.format("REST_GET('%s', %s)", emptyGetUri, emptyContentOverride), context));}
public void metron_f9752_0() throws Exception
{    Map<String, Object> actual = (Map<String, Object>) run(String.format("REST_POST('%s', '{\"key\":\"value\"}')", postUri), context);    assertEquals(1, actual.size());    assertEquals("success", actual.get("post"));}
public void metron_f9753_0() throws Exception
{    mockServerClient.when(request().withMethod("POST").withPath("/post/with/query/parameters").withQueryStringParameter("key", "value")).respond(response().withBody("{\"post.with.query.parameters\":\"success\"}"));    Map<String, Object> variables = ImmutableMap.of("queryParameters", ImmutableMap.of("key", "value"));    Map<String, Object> actual = (Map<String, Object>) run(String.format("REST_POST('%s', {}, {}, queryParameters)", baseUri + "/post/with/query/parameters"), variables, context);    assertEquals(1, actual.size());    assertEquals("success", actual.get("post.with.query.parameters"));}
public void metron_f9754_0() throws Exception
{    Map<String, Object> variables = ImmutableMap.of("body", ImmutableMap.of("key", "value"));    Map<String, Object> actual = (Map<String, Object>) run(String.format("REST_POST('%s', body)", postUri), variables, context);    assertEquals(1, actual.size());    assertEquals("success", actual.get("post"));}
public void metron_f9755_0() throws IllegalArgumentException, IOException
{    thrown.expect(ParseException.class);    thrown.expectMessage("Unable to parse REST_POST('some invalid uri', {}): Unable to parse: REST_POST('some invalid uri', {}) due to: Illegal character in path at index 4: some invalid uri");    run("REST_POST('some invalid uri', {})", context);}
public void metron_f9756_0() throws IllegalArgumentException, IOException
{    thrown.expect(ParseException.class);    thrown.expectMessage(String.format("Unable to parse: REST_POST('%s', 'malformed json') due to: POST data 'malformed json' must be properly formatted JSON.  " + "Set the 'enforce.json' property to false to disable this check.", postUri));    run(String.format("REST_POST('%s', 'malformed json')", postUri), context);}
public void metron_f9757_0()
{    Map<String, Object> globalConfig = new HashMap<String, Object>() {        {            put(STELLAR_REST_SETTINGS, new HashMap<String, Object>() {                {                    put(RESPONSE_CODES_ALLOWED, Arrays.asList(200, 404));                    put(EMPTY_CONTENT_OVERRIDE, "global config override");                }            });        }    };    context.addCapability(Context.Capabilities.GLOBAL_CONFIG, () -> globalConfig);    assertEquals("global config override", run(String.format("REST_POST('%s', {})", emptyGetUri), context));}
public void metron_f9758_0()
{    Map<String, Object> globalConfig = new HashMap<String, Object>() {        {            put(STELLAR_REST_SETTINGS, new HashMap<String, Object>() {                {                    put(RESPONSE_CODES_ALLOWED, Arrays.asList(200, 404));                    put(EMPTY_CONTENT_OVERRIDE, "global config override");                }            });            put(STELLAR_REST_POST_SETTINGS, new HashMap<String, Object>() {                {                    put(EMPTY_CONTENT_OVERRIDE, "post config override");                }            });        }    };    context.addCapability(Context.Capabilities.GLOBAL_CONFIG, () -> globalConfig);    assertEquals("post config override", run(String.format("REST_POST('%s', {})", emptyGetUri), context));}
public void metron_f9759_0()
{    Map<String, Object> globalConfig = new HashMap<String, Object>() {        {            put(STELLAR_REST_SETTINGS, new HashMap<String, Object>() {                {                    put(RESPONSE_CODES_ALLOWED, Arrays.asList(200, 404));                    put(EMPTY_CONTENT_OVERRIDE, "global config override");                }            });            put(STELLAR_REST_POST_SETTINGS, new HashMap<String, Object>() {                {                    put(EMPTY_CONTENT_OVERRIDE, "post config override");                }            });        }    };    context.addCapability(Context.Capabilities.GLOBAL_CONFIG, () -> globalConfig);    assertEquals("function config override", run(String.format("REST_POST('%s', {}, %s)", emptyGetUri, emptyContentOverride), context));}
public void metron_f9760_0() throws Exception
{    context = new Context.Builder().with(Context.Capabilities.GLOBAL_CONFIG, HashMap::new).build();        basicAuthPasswordFile = tempDir.newFile("basicAuth.txt");    FileUtils.writeStringToFile(basicAuthPasswordFile, basicAuthPassword, StandardCharsets.UTF_8);    proxyBasicAuthPasswordFile = tempDir.newFile("proxyBasicAuth.txt");    FileUtils.writeStringToFile(proxyBasicAuthPasswordFile, proxyAuthPassword, StandardCharsets.UTF_8);}
public void metron_f9761_0()
{    {        RestConfig restConfig = new RestConfig();        Optional<HttpHost> actual = RestFunctions.getProxy(restConfig);        assertEquals(Optional.empty(), actual);    }    {        RestConfig restConfig = new RestConfig();        restConfig.put(PROXY_HOST, "localhost");        Optional<HttpHost> actual = RestFunctions.getProxy(restConfig);        assertEquals(Optional.empty(), actual);    }    {        RestConfig restConfig = new RestConfig();        restConfig.put(PROXY_PORT, 3128);        Optional<HttpHost> actual = RestFunctions.getProxy(restConfig);        assertEquals(Optional.empty(), actual);    }    {        RestConfig restConfig = new RestConfig();        restConfig.put(PROXY_HOST, "localhost");        restConfig.put(PROXY_PORT, 3128);        Optional<HttpHost> actual = RestFunctions.getProxy(restConfig);        assertEquals(new HttpHost("localhost", 3128), actual.get());    }}
public void metron_f9762_0() throws Exception
{    Map<String, Object> config = new HashMap<String, Object>() {        {            put(BASIC_AUTH_USER, "user");            put(PROXY_BASIC_AUTH_USER, "proxyUser");        }    };    Map<String, Object> priorityConfig = new HashMap<String, Object>() {        {            put(BASIC_AUTH_USER, "priorityUser");        }    };    RestConfig restConfig = RestFunctions.buildRestConfig(config, priorityConfig);    assertEquals(6, restConfig.size());    assertEquals(Collections.singletonList(200), restConfig.getResponseCodesAllowed());    assertEquals("priorityUser", restConfig.getBasicAuthUser());    assertEquals("proxyUser", restConfig.getProxyBasicAuthUser());    assertTrue(restConfig.enforceJson());    assertEquals(1000, restConfig.getTimeout().intValue());    assertFalse(restConfig.verifyContentLength());}
public void metron_f9763_0()
{    {        RequestConfig actual = RestFunctions.getRequestConfig(new RestConfig(), Optional.empty());        RequestConfig expected = RequestConfig.custom().build();        assertEquals(expected.getConnectTimeout(), actual.getConnectTimeout());        assertEquals(expected.getConnectionRequestTimeout(), actual.getConnectionRequestTimeout());        assertEquals(expected.getSocketTimeout(), actual.getSocketTimeout());        assertEquals(expected.getProxy(), actual.getProxy());    }    {        RestConfig restConfig = new RestConfig();        restConfig.put(CONNECT_TIMEOUT, 1);        restConfig.put(CONNECTION_REQUEST_TIMEOUT, 2);        restConfig.put(SOCKET_TIMEOUT, 3);        HttpHost proxy = new HttpHost("localhost", 3128);        Optional<HttpHost> proxyOptional = Optional.of(proxy);        RequestConfig actual = RestFunctions.getRequestConfig(restConfig, proxyOptional);        RequestConfig expected = RequestConfig.custom().setConnectTimeout(1).setConnectionRequestTimeout(2).setSocketTimeout(3).setProxy(proxy).build();        assertEquals(expected.getConnectTimeout(), actual.getConnectTimeout());        assertEquals(expected.getConnectionRequestTimeout(), actual.getConnectionRequestTimeout());        assertEquals(expected.getSocketTimeout(), actual.getSocketTimeout());        assertEquals(expected.getProxy(), actual.getProxy());    }}
public void metron_f9764_0() throws Exception
{    HttpHost target = new HttpHost("localhost", 8080);    HttpHost proxy = new HttpHost("localhost", 3128);    {        RestConfig restConfig = new RestConfig();        HttpClientContext actual = RestFunctions.getHttpClientContext(restConfig, target, Optional.empty());        assertNull(actual.getCredentialsProvider());    }    {        RestConfig restConfig = new RestConfig();        restConfig.put(BASIC_AUTH_USER, "user");        restConfig.put(BASIC_AUTH_PASSWORD_PATH, basicAuthPasswordFile.getAbsolutePath());        HttpClientContext actual = RestFunctions.getHttpClientContext(restConfig, target, Optional.empty());        HttpClientContext expected = HttpClientContext.create();        CredentialsProvider expectedCredentialsProvider = new BasicCredentialsProvider();        expectedCredentialsProvider.setCredentials(new AuthScope(target), new UsernamePasswordCredentials(restConfig.getBasicAuthUser(), basicAuthPassword));        expected.setCredentialsProvider(expectedCredentialsProvider);        assertEquals(expected.getCredentialsProvider().getCredentials(new AuthScope(target)), actual.getCredentialsProvider().getCredentials(new AuthScope(target)));        assertEquals(expected.getCredentialsProvider().getCredentials(new AuthScope(proxy)), actual.getCredentialsProvider().getCredentials(new AuthScope(proxy)));    }    {        RestConfig restConfig = new RestConfig();        restConfig.put(PROXY_BASIC_AUTH_USER, "proxyUser");        restConfig.put(PROXY_BASIC_AUTH_PASSWORD_PATH, proxyBasicAuthPasswordFile.getAbsolutePath());        HttpClientContext actual = RestFunctions.getHttpClientContext(restConfig, target, Optional.of(proxy));        HttpClientContext expected = HttpClientContext.create();        CredentialsProvider expectedCredentialsProvider = new BasicCredentialsProvider();        expectedCredentialsProvider.setCredentials(new AuthScope(proxy), new UsernamePasswordCredentials(restConfig.getProxyBasicAuthUser(), proxyAuthPassword));        expected.setCredentialsProvider(expectedCredentialsProvider);        assertEquals(expected.getCredentialsProvider().getCredentials(new AuthScope(target)), actual.getCredentialsProvider().getCredentials(new AuthScope(target)));        assertEquals(expected.getCredentialsProvider().getCredentials(new AuthScope(proxy)), actual.getCredentialsProvider().getCredentials(new AuthScope(proxy)));    }    {        RestConfig restConfig = new RestConfig();        restConfig.put(BASIC_AUTH_USER, "user");        restConfig.put(BASIC_AUTH_PASSWORD_PATH, basicAuthPasswordFile.getAbsolutePath());        restConfig.put(PROXY_BASIC_AUTH_USER, "proxyUser");        restConfig.put(PROXY_BASIC_AUTH_PASSWORD_PATH, proxyBasicAuthPasswordFile.getAbsolutePath());        HttpClientContext actual = RestFunctions.getHttpClientContext(restConfig, target, Optional.of(proxy));        HttpClientContext expected = HttpClientContext.create();        CredentialsProvider expectedCredentialsProvider = new BasicCredentialsProvider();        expectedCredentialsProvider.setCredentials(new AuthScope(target), new UsernamePasswordCredentials(restConfig.getBasicAuthUser(), basicAuthPassword));        expectedCredentialsProvider.setCredentials(new AuthScope(proxy), new UsernamePasswordCredentials(restConfig.getProxyBasicAuthUser(), proxyAuthPassword));        expected.setCredentialsProvider(expectedCredentialsProvider);        assertEquals(expected.getCredentialsProvider().getCredentials(new AuthScope(target)), actual.getCredentialsProvider().getCredentials(new AuthScope(target)));        assertEquals(expected.getCredentialsProvider().getCredentials(new AuthScope(proxy)), actual.getCredentialsProvider().getCredentials(new AuthScope(proxy)));    }}
public void metron_f9765_0() throws IllegalArgumentException, IOException
{    RestFunctions.RestGet restGet = new RestFunctions.RestGet();    CloseableHttpClient httpClient = mock(CloseableHttpClient.class);    ScheduledExecutorService executorService = mock(ScheduledExecutorService.class);    RestFunctions.setCloseableHttpClient(httpClient);    RestFunctions.setScheduledExecutorService(executorService);    when(httpClient.execute(any(HttpRequestBase.class), any(HttpClientContext.class))).thenThrow(new IOException("io exception"));    Object result = restGet.apply(Collections.singletonList("http://www.host.com:8080/some/uri"), context);    Assert.assertNull(result);}
public void metron_f9766_0()
{    RestConfig restConfig = new RestConfig();    restConfig.put(POOLING_MAX_TOTAL, 5);    restConfig.put(POOLING_DEFAULT_MAX_PER_RUOTE, 2);    PoolingHttpClientConnectionManager cm = RestFunctions.getConnectionManager(restConfig);    assertEquals(5, cm.getMaxTotal());    assertEquals(2, cm.getDefaultMaxPerRoute());}
public void metron_f9767_0() throws Exception
{    RestFunctions.RestGet restGet = new RestFunctions.RestGet();    CloseableHttpClient httpClient = mock(CloseableHttpClient.class);    ScheduledExecutorService executorService = mock(ScheduledExecutorService.class);    RestFunctions.setCloseableHttpClient(httpClient);    RestFunctions.setScheduledExecutorService(executorService);    restGet.close();    verify(httpClient, times(1)).close();    verify(executorService, times(1)).shutdown();    verifyNoMoreInteractions(httpClient);}
public void metron_f9768_0() throws Exception
{    RestFunctions.RestPost restPost = new RestFunctions.RestPost();    CloseableHttpClient httpClient = mock(CloseableHttpClient.class);    ScheduledExecutorService executorService = mock(ScheduledExecutorService.class);    RestFunctions.setCloseableHttpClient(httpClient);    RestFunctions.setScheduledExecutorService(executorService);    restPost.close();    verify(httpClient, times(1)).close();    verify(executorService, times(1)).shutdown();    verifyNoMoreInteractions(httpClient);}
public void metron_f9769_0() throws Exception
{    RestConfig restConfig = new RestConfig();    HttpGet httpGet = mock(HttpGet.class);    HttpEntity httpEntity = mock(HttpEntity.class);        when(httpEntity.getContent()).thenReturn(new ByteArrayInputStream("{\"get\":\"success\"}".getBytes(StandardCharsets.UTF_8)));    Optional<Object> actual = RestFunctions.parseResponse(restConfig, httpGet, httpEntity);    assertTrue(actual.isPresent());    assertEquals("success", ((Map<String, Object>) actual.get()).get("get"));}
public void metron_f9770_0() throws Exception
{    RestConfig restConfig = new RestConfig();    HttpGet httpGet = mock(HttpGet.class);        assertEquals(Optional.empty(), RestFunctions.parseResponse(restConfig, httpGet, null));}
public void metron_f9771_0() throws Exception
{    RestConfig restConfig = new RestConfig();    HttpGet httpGet = mock(HttpGet.class);    HttpEntity httpEntity = mock(HttpEntity.class);        when(httpEntity.getContent()).thenReturn(null);    assertEquals(Optional.empty(), RestFunctions.parseResponse(restConfig, httpGet, httpEntity));}
public void metron_f9772_0() throws Exception
{    RestConfig restConfig = new RestConfig();    HttpGet httpGet = mock(HttpGet.class);    HttpEntity httpEntity = mock(HttpEntity.class);        when(httpEntity.getContent()).thenReturn(new ByteArrayInputStream("".getBytes(StandardCharsets.UTF_8)));    assertEquals(Optional.empty(), RestFunctions.parseResponse(restConfig, httpGet, httpEntity));}
public void metron_f9773_0() throws Exception
{    thrown.expect(IOException.class);    thrown.expectMessage("Stellar REST request to uri returned incorrect or missing content length. Content length in the response was -1 but the actual body content length was 17.");    RestFunctions.RestGet restGet = new RestFunctions.RestGet();    RestConfig restConfig = new RestConfig();    HttpGet httpGet = mock(HttpGet.class);    HttpEntity httpEntity = mock(HttpEntity.class);    restConfig.put(VERIFY_CONTENT_LENGTH, true);    when(httpGet.getURI()).thenReturn(new URI("uri"));    when(httpEntity.getContent()).thenReturn(new ByteArrayInputStream("{\"get\":\"success\"}".getBytes(StandardCharsets.UTF_8)));    when(httpEntity.getContentLength()).thenReturn(-1L);    RestFunctions.parseResponse(restConfig, httpGet, httpEntity);}
public void metron_f9774_0() throws Exception
{    Map<Object, Integer> s = (Map<Object, Integer>) StellarProcessorUtils.run("MULTISET_INIT({ 'foo' : 'bar'})", new HashMap<>());}
public void metron_f9775_0() throws Exception
{    {        Map<Object, Integer> s = (Map<Object, Integer>) StellarProcessorUtils.run("MULTISET_INIT()", new HashMap<>());        Assert.assertEquals(0, s.size());    }        {        Map<Object, Integer> s = (Map<Object, Integer>) StellarProcessorUtils.run("MULTISET_INIT([1,2,3,2])", new HashMap<>());        Assert.assertEquals(3, s.size());        Assert.assertTrue(s.containsKey(1));        Assert.assertEquals(1, (int) s.get(1));        Assert.assertTrue(s.containsKey(2));        Assert.assertEquals(2, (int) s.get(2));        Assert.assertTrue(s.containsKey(3));        Assert.assertEquals(1, (int) s.get(3));    }        {        Map<Object, Integer> s = (Map<Object, Integer>) StellarProcessorUtils.run("MULTISET_INIT(['one','two','three','two'])", new HashMap<>());        Assert.assertEquals(3, s.size());        Assert.assertTrue(s.containsKey("one"));        Assert.assertEquals(1, (int) s.get("one"));        Assert.assertTrue(s.containsKey("two"));        Assert.assertEquals(2, (int) s.get("two"));        Assert.assertTrue(s.containsKey("three"));        Assert.assertEquals(1, (int) s.get("three"));    }}
public void metron_f9776_0() throws Exception
{    {        Map<Object, Integer> s = (Map<Object, Integer>) StellarProcessorUtils.run("MULTISET_ADD(MULTISET_INIT(), 1)", new HashMap<>());        Assert.assertEquals(1, s.size());        Assert.assertTrue(s.containsKey(1));        Assert.assertEquals(1, (int) s.get(1));    }    {        Map<Object, Integer> s = (Map<Object, Integer>) StellarProcessorUtils.run("MULTISET_ADD(null, 1)", new HashMap<>());        Assert.assertEquals(1, s.size());        Assert.assertTrue(s.containsKey(1));        Assert.assertEquals(1, (int) s.get(1));    }        {        Map<Object, Integer> s = (Map<Object, Integer>) StellarProcessorUtils.run("MULTISET_ADD(MULTISET_INIT([1,2,3,4,4]), 4)", new HashMap<>());        Assert.assertEquals(4, s.size());        Assert.assertTrue(s.containsKey(1));        Assert.assertEquals(1, (int) s.get(1));        Assert.assertTrue(s.containsKey(2));        Assert.assertEquals(1, (int) s.get(2));        Assert.assertTrue(s.containsKey(3));        Assert.assertEquals(1, (int) s.get(3));        Assert.assertTrue(s.containsKey(4));        Assert.assertEquals(3, (int) s.get(4));    }        {        Map<Object, Integer> s = (Map<Object, Integer>) StellarProcessorUtils.run("MULTISET_ADD(MULTISET_INIT(['one','two','three', 'four', 'four']), 'four')", new HashMap<>());        Assert.assertEquals(4, s.size());        Assert.assertTrue(s.containsKey("one"));        Assert.assertEquals(1, (int) s.get("one"));        Assert.assertTrue(s.containsKey("two"));        Assert.assertEquals(1, (int) s.get("two"));        Assert.assertTrue(s.containsKey("three"));        Assert.assertEquals(1, (int) s.get("three"));        Assert.assertTrue(s.containsKey("four"));        Assert.assertEquals(3, (int) s.get("four"));    }}
public void metron_f9777_0() throws Exception
{    {        Map<Object, Integer> s = (Map<Object, Integer>) StellarProcessorUtils.run("MULTISET_REMOVE(MULTISET_INIT([1]), 1)", new HashMap<>());        Assert.assertEquals(0, s.size());    }    {        Map<Object, Integer> s = (Map<Object, Integer>) StellarProcessorUtils.run("MULTISET_REMOVE(null, 1)", new HashMap<>());        Assert.assertEquals(0, s.size());    }        {        Map<Object, Integer> s = (Map<Object, Integer>) StellarProcessorUtils.run("MULTISET_REMOVE(MULTISET_INIT([1,2,3,2]), 2)", new HashMap<>());        Assert.assertEquals(3, s.size());        Assert.assertTrue(s.containsKey(1));        Assert.assertEquals(1, (int) s.get(1));        Assert.assertTrue(s.containsKey(2));        Assert.assertEquals(1, (int) s.get(2));        Assert.assertTrue(s.containsKey(3));        Assert.assertEquals(1, (int) s.get(3));    }        {        Map<Object, Integer> s = (Map<Object, Integer>) StellarProcessorUtils.run("MULTISET_REMOVE(MULTISET_INIT(['one','two','three', 'two']), 'two')", new HashMap<>());        Assert.assertEquals(3, s.size());        Assert.assertTrue(s.containsKey("one"));        Assert.assertEquals(1, (int) s.get("one"));        Assert.assertTrue(s.containsKey("two"));        Assert.assertEquals(1, (int) s.get("two"));        Assert.assertTrue(s.containsKey("three"));        Assert.assertEquals(1, (int) s.get("three"));    }}
public void metron_f9778_0() throws Exception
{    Map<Object, Integer> s = (Map<Object, Integer>) StellarProcessorUtils.run("MULTISET_MERGE({ 'bar' : 'foo' } )", new HashMap<>());}
public void metron_f9779_0() throws Exception
{    {        Map<Object, Integer> s = (Map<Object, Integer>) StellarProcessorUtils.run("MULTISET_MERGE([MULTISET_INIT(), MULTISET_INIT(null), null])", new HashMap<>());        Assert.assertEquals(0, s.size());    }        {        Map<Object, Integer> s = (Map<Object, Integer>) StellarProcessorUtils.run("MULTISET_MERGE([MULTISET_INIT([1,2]), MULTISET_INIT([2,3]), null, MULTISET_INIT()])", new HashMap<>());        Assert.assertEquals(3, s.size());        Assert.assertTrue(s.containsKey(1));        Assert.assertEquals(1, (int) s.get(1));        Assert.assertTrue(s.containsKey(2));        Assert.assertEquals(2, (int) s.get(2));        Assert.assertTrue(s.containsKey(3));        Assert.assertEquals(1, (int) s.get(3));    }        {        Map<Object, Integer> s = (Map<Object, Integer>) StellarProcessorUtils.run("MULTISET_MERGE([MULTISET_INIT(['one','two']), MULTISET_INIT(['two', 'three'])])", new HashMap<>());        Assert.assertEquals(3, s.size());        Assert.assertTrue(s.containsKey("one"));        Assert.assertEquals(1, (int) s.get("one"));        Assert.assertTrue(s.containsKey("two"));        Assert.assertEquals(2, (int) s.get("two"));        Assert.assertTrue(s.containsKey("three"));        Assert.assertEquals(1, (int) s.get("three"));    }}
public void metron_f9780_0() throws Exception
{    Set s = (Set) StellarProcessorUtils.run("SET_INIT({ 'foo' : 2})", new HashMap<>());}
public void metron_f9781_0() throws Exception
{    {        Set s = (Set) StellarProcessorUtils.run("SET_INIT()", new HashMap<>());        Assert.assertEquals(0, s.size());    }        {        Set s = (Set) StellarProcessorUtils.run("SET_INIT([1,2,3])", new HashMap<>());        Assert.assertEquals(3, s.size());        Assert.assertTrue(s.contains(1));        Assert.assertTrue(s.contains(2));        Assert.assertTrue(s.contains(3));    }        {        Set s = (Set) StellarProcessorUtils.run("SET_INIT(['one','two','three'])", new HashMap<>());        Assert.assertEquals(3, s.size());        Assert.assertTrue(s.contains("one"));        Assert.assertTrue(s.contains("two"));        Assert.assertTrue(s.contains("three"));    }}
public void metron_f9782_0() throws Exception
{    {        Set s = (Set) StellarProcessorUtils.run("MULTISET_TO_SET(MULTISET_ADD(MULTISET_INIT(), 1))", new HashMap<>());        Assert.assertEquals(1, s.size());        Assert.assertTrue(s.contains(1));    }    {        Set s = (Set) StellarProcessorUtils.run("MULTISET_TO_SET(MULTISET_ADD(null, 1))", new HashMap<>());        Assert.assertEquals(1, s.size());        Assert.assertTrue(s.contains(1));    }        {        Set s = (Set) StellarProcessorUtils.run("MULTISET_TO_SET(MULTISET_ADD(MULTISET_INIT([1,2,3]), 4))", new HashMap<>());        Assert.assertEquals(4, s.size());        Assert.assertTrue(s.contains(1));        Assert.assertTrue(s.contains(2));        Assert.assertTrue(s.contains(3));        Assert.assertTrue(s.contains(4));    }        {        Set s = (Set) StellarProcessorUtils.run("MULTISET_TO_SET(MULTISET_ADD(MULTISET_INIT(['one','two','three']), 'four'))", new HashMap<>());        Assert.assertEquals(4, s.size());        Assert.assertTrue(s.contains("one"));        Assert.assertTrue(s.contains("two"));        Assert.assertTrue(s.contains("three"));        Assert.assertTrue(s.contains("four"));    }}
public void metron_f9783_0() throws Exception
{    {        Set s = (Set) StellarProcessorUtils.run("SET_ADD(SET_INIT(), 1)", new HashMap<>());        Assert.assertEquals(1, s.size());        Assert.assertTrue(s.contains(1));    }    {        Set s = (Set) StellarProcessorUtils.run("SET_ADD(null, 1)", new HashMap<>());        Assert.assertEquals(1, s.size());        Assert.assertTrue(s.contains(1));    }        {        Set s = (Set) StellarProcessorUtils.run("SET_ADD(SET_INIT([1,2,3]), 4)", new HashMap<>());        Assert.assertEquals(4, s.size());        Assert.assertTrue(s.contains(1));        Assert.assertTrue(s.contains(2));        Assert.assertTrue(s.contains(3));        Assert.assertTrue(s.contains(4));    }        {        Set s = (Set) StellarProcessorUtils.run("SET_ADD(SET_INIT(['one','two','three']), 'four')", new HashMap<>());        Assert.assertEquals(4, s.size());        Assert.assertTrue(s.contains("one"));        Assert.assertTrue(s.contains("two"));        Assert.assertTrue(s.contains("three"));        Assert.assertTrue(s.contains("four"));    }}
public void metron_f9784_0() throws Exception
{    {        Set s = (Set) StellarProcessorUtils.run("SET_REMOVE(SET_INIT([1]), 1)", new HashMap<>());        Assert.assertEquals(0, s.size());    }    {        Set s = (Set) StellarProcessorUtils.run("SET_REMOVE(null, 1)", new HashMap<>());        Assert.assertEquals(0, s.size());    }        {        Set s = (Set) StellarProcessorUtils.run("SET_REMOVE(SET_INIT([1,2,3]), 2)", new HashMap<>());        Assert.assertEquals(2, s.size());        Assert.assertTrue(s.contains(1));        Assert.assertTrue(s.contains(3));    }        {        Set s = (Set) StellarProcessorUtils.run("SET_REMOVE(SET_INIT(['one','two','three']), 'three')", new HashMap<>());        Assert.assertEquals(2, s.size());        Assert.assertTrue(s.contains("one"));        Assert.assertTrue(s.contains("two"));    }}
public void metron_f9785_0() throws Exception
{    Set s = (Set) StellarProcessorUtils.run("SET_MERGE({ 'foo' : 'bar'} )", new HashMap<>());}
public void metron_f9786_0() throws Exception
{    {        Set s = (Set) StellarProcessorUtils.run("SET_MERGE([SET_INIT(), SET_INIT(null), null])", new HashMap<>());        Assert.assertEquals(0, s.size());    }        {        Set s = (Set) StellarProcessorUtils.run("SET_MERGE([SET_INIT([1,2]), SET_INIT([3]), null, SET_INIT()])", new HashMap<>());        Assert.assertEquals(3, s.size());        Assert.assertTrue(s.contains(1));        Assert.assertTrue(s.contains(2));        Assert.assertTrue(s.contains(3));    }        {        Set s = (Set) StellarProcessorUtils.run("SET_MERGE([SET_INIT(['one','two']), SET_INIT(['three'])])", new HashMap<>());        Assert.assertEquals(3, s.size());        Assert.assertTrue(s.contains("one"));        Assert.assertTrue(s.contains("two"));        Assert.assertTrue(s.contains("three"));    }}
public void metron_f9787_0()
{    Map<String, VariableResult> variables = ImmutableMap.of("foo", VariableResult.withExpression(2.0, "1 + 1"));    Context context = new Context.Builder().with(Context.Capabilities.SHELL_VARIABLES, () -> variables).build();    Object out = run("SHELL_LIST_VARS()", new HashMap<>(), context);    Assert.assertEquals(expectedListWithFoo, out);}
public void metron_f9788_0()
{    Context context = new Context.Builder().with(Context.Capabilities.SHELL_VARIABLES, () -> new HashMap<>()).build();    Object out = run("SHELL_LIST_VARS()", new HashMap<>(), context);    Assert.assertEquals(expectedEmptyList, out);}
public void metron_f9789_0()
{    Map<String, Object> variables = ImmutableMap.of("map_field", ImmutableMap.of("field1", "val1", "field2", "val2"));    Context context = Context.EMPTY_CONTEXT();    Object out = run("SHELL_MAP2TABLE(map_field)", variables, context);    Assert.assertEquals(expectedMap2Table, out);}
public void metron_f9790_0()
{    Map<String, Object> variables = new HashMap<String, Object>() {        {            put("map_field", null);        }    };    Context context = Context.EMPTY_CONTEXT();    Object out = run("SHELL_MAP2TABLE(map_field)", variables, context);    Assert.assertEquals(expectedMap2TableNullInput, out);}
public void metron_f9791_0()
{    Map<String, Object> variables = new HashMap<>();    Context context = Context.EMPTY_CONTEXT();    Object out = run("SHELL_MAP2TABLE()", variables, context);    Assert.assertNull(out);}
public void metron_f9792_0()
{    Object out = run("SHELL_VARS2MAP('var1', 'var2')", new HashMap<>(), context);    Assert.assertTrue(out instanceof Map);    Map<String, String> mapOut = (Map<String, String>) out;        Assert.assertEquals(1, mapOut.size());    Assert.assertEquals("TO_UPPER('casey')", mapOut.get("var1"));}
public void metron_f9793_0()
{    Object out = run("SHELL_VARS2MAP()", new HashMap<>(), context);    Map<String, String> mapOut = (Map<String, String>) out;    Assert.assertEquals(0, mapOut.size());}
public void metron_f9794_0()
{    Object out = run("SHELL_GET_EXPRESSION('var1')", new HashMap<>(), context);    Assert.assertTrue(out instanceof String);    String expression = (String) out;        Assert.assertEquals("TO_UPPER('casey')", expression);}
public void metron_f9795_0()
{    Object out = run("SHELL_GET_EXPRESSION()", new HashMap<>(), context);    Assert.assertNull(out);}
public void metron_f9796_0() throws Exception
{    System.getProperties().put("EDITOR", "/bin/cat");    Object out = run("TO_UPPER(SHELL_EDIT(foo))", ImmutableMap.of("foo", "foo"), context);    Assert.assertEquals("FOO", out);}
public void metron_f9797_0() throws Exception
{    final Map<String, String> variableMap = new HashMap<String, String>() {        {            put("foo", "casey");            put("ip", "192.168.0.1");            put("empty", "");            put("spaced", "metron is great");        }    };    Assert.assertTrue(runPredicate("true and TO_UPPER(foo) == 'CASEY'", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("foo in [ TO_LOWER('CASEY'), 'david' ]", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("TO_UPPER(foo) in [ TO_UPPER('casey'), 'david' ] and IN_SUBNET(ip, '192.168.0.0/24')", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("TO_LOWER(foo) in [ TO_UPPER('casey'), 'david' ]", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));}
public void metron_f9798_0() throws Exception
{    final Map<String, Object> variableMap = new HashMap<String, Object>() {        {            put("foo", "casey");            put("bar", "bar.casey.grok");            put("ip", "192.168.0.1");            put("empty", "");            put("spaced", "metron is great");            put("myList", ImmutableList.of("casey", "apple", "orange"));        }    };    Assert.assertTrue(runPredicate("foo in SPLIT(bar, '.')", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("foo in SPLIT(ip, '.')", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("foo in myList", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertFalse(runPredicate("foo not in myList", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));}
public void metron_f9799_0() throws Exception
{    final Map<String, Object> variableMap = new HashMap<String, Object>() {        {            put("foo", null);            put("bar", null);            put("notInt", "oh my");        }    };        Object left = run("FILL_LEFT('123','X', 10)", new HashedMap());    Assert.assertNotNull(left);    Assert.assertEquals(10, ((String) left).length());    Assert.assertEquals("XXXXXXX123", (String) left);        Object right = run("FILL_RIGHT('123','X', 10)", new HashedMap());    Assert.assertNotNull(right);    Assert.assertEquals(10, ((String) right).length());    Assert.assertEquals("123XXXXXXX", (String) right);        Object same = run("FILL_RIGHT('123','X', 3)", new HashedMap());    Assert.assertEquals(3, ((String) same).length());    Assert.assertEquals("123", (String) same);        Object tooBig = run("FILL_RIGHT('1234567890','X', 3)", new HashedMap());    Assert.assertEquals(10, ((String) tooBig).length());    Assert.assertEquals("1234567890", (String) tooBig);        boolean thrown = false;    try {        run("FILL_RIGHT('123',foo,bar)", variableMap);    } catch (ParseException pe) {        thrown = true;        Assert.assertTrue(pe.getMessage().contains("are both required"));    }    Assert.assertTrue(thrown);    thrown = false;        try {        run("FILL_RIGHT('123','X',bar)", variableMap);    } catch (ParseException pe) {        thrown = true;        Assert.assertTrue(pe.getMessage().contains("are both required"));    }    Assert.assertTrue(thrown);    thrown = false;        try {        run("FILL_RIGHT('123',foo, 7)", variableMap);    } catch (ParseException pe) {        thrown = true;        Assert.assertTrue(pe.getMessage().contains("are both required"));    }    Assert.assertTrue(thrown);    thrown = false;        try {        run("FILL_RIGHT('123','X', 'z' )", new HashedMap());    } catch (ParseException pe) {        thrown = true;        Assert.assertTrue(pe.getMessage().contains("not a valid Integer"));    }    Assert.assertTrue(thrown);    thrown = false;        try {        Object returnValue = run("FILL_RIGHT('123','', 10 )", new HashedMap());    } catch (ParseException pe) {        thrown = true;        Assert.assertTrue(pe.getMessage().contains("cannot be an empty"));    }    Assert.assertTrue(thrown);    thrown = false;        try {        run("FILL_RIGHT('123',foo)", variableMap);    } catch (ParseException pe) {        thrown = true;        Assert.assertTrue(pe.getMessage().contains("expects three"));    }    Assert.assertTrue(thrown);}
public void metron_f9800_0() throws Exception
{        Assert.assertEquals(0.0, (Double) run("STRING_ENTROPY('')", new HashMap<>()), 0.0);    Assert.assertEquals(0.0, (Double) run("STRING_ENTROPY(foo)", ImmutableMap.of("foo", "")), 0.0);    /*    Now consider the string aaaaaaaaaabbbbbccccc or 10 a's followed by 5 b's and 5 c's.    The probabilities of each character is as follows:    p(a) = 1/2    p(b) = 1/4    p(c) = 1/4    so the shannon entropy should be      -p(a)*log_2(p(a)) - p(b)*log_2(p(b)) - p(c)*log_2(p(c)) =      -0.5*-1 - 0.25*-2 - 0.25*-2 = 1.5     */    Assert.assertEquals(1.5, (Double) run("STRING_ENTROPY(foo)", ImmutableMap.of("foo", "aaaaaaaaaabbbbbccccc")), 0.0);}
public void metron_f9801_0() throws Exception
{    Map<String, Object> vars = ImmutableMap.of("cal", new Calendar.Builder().setDate(2017, 02, 02).build(), "x", 234, "y", 3);    Assert.assertEquals("no args", run("FORMAT('no args')", vars));    Assert.assertEquals("234.0", run("FORMAT('%.1f', TO_DOUBLE(234))", vars));    Assert.assertEquals("000234", run("FORMAT('%06d', 234)", vars));    Assert.assertEquals("03 2,2017", run("FORMAT('%1$tm %1$te,%1$tY', cal)", vars));    Assert.assertEquals("234 > 3", run("FORMAT('%d > %d', x, y)", vars));    boolean thrown = false;    try {        run("FORMAT('missing: %d', missing)", vars);    } catch (ParseException pe) {        thrown = true;    }    Assert.assertTrue(thrown);}
public void metron_f9802_0() throws Exception
{    run("FORMAT()", Collections.emptyMap());}
public void metron_f9803_0() throws Exception
{    run("FORMAT('missing arg: %d')", Collections.emptyMap());}
public void metron_f9804_0() throws Exception
{    Assert.assertEquals("abc", run("CHOMP('abc')", new HashedMap()));    Assert.assertEquals("abc", run("CHOMP(msg)", ImmutableMap.of("msg", "abc\r\n")));    Assert.assertEquals("", run("CHOMP(msg)", ImmutableMap.of("msg", "\n")));    Assert.assertEquals("", run("CHOMP('')", new HashedMap()));    Assert.assertEquals(null, run("CHOMP(null)", new HashedMap()));        boolean thrown = false;    try {        run("CHOMP()", Collections.emptyMap());    } catch (ParseException pe) {        thrown = true;        Assert.assertTrue(pe.getMessage().contains("missing argument"));    }    Assert.assertTrue(thrown);    thrown = false;        try {        run("CHOMP(msg)", new HashedMap());    } catch (ParseException pe) {        thrown = true;    }    thrown = false;        try {        run("CHOMP(123)", Collections.emptyMap());    } catch (ParseException pe) {        thrown = true;        Assert.assertTrue(pe.getMessage().contains("cannot be cast"));    }    Assert.assertTrue(thrown);}
public void metron_f9805_0() throws Exception
{    Assert.assertEquals("ab", run("CHOP('abc')", new HashedMap()));    Assert.assertEquals(null, run("CHOP(null)", new HashedMap()));    Assert.assertEquals("abc", run("CHOP(msg)", ImmutableMap.of("msg", "abc\r\n")));    Assert.assertEquals("", run("CHOP(msg)", ImmutableMap.of("msg", "")));    Assert.assertEquals("", run("CHOP(msg)", ImmutableMap.of("msg", "\n")));    Assert.assertEquals("", run("CHOP('')", new HashedMap()));        boolean thrown = false;    try {        run("CHOP()", Collections.emptyMap());    } catch (ParseException pe) {        thrown = true;        Assert.assertTrue(pe.getMessage().contains("missing argument"));    }    Assert.assertTrue(thrown);    thrown = false;        try {        run("CHOMP(msg)", new HashedMap());    } catch (ParseException pe) {        thrown = true;    }    thrown = false;        try {        run("CHOP(123)", Collections.emptyMap());    } catch (ParseException pe) {        thrown = true;        Assert.assertTrue(pe.getMessage().contains("cannot be cast"));    }    Assert.assertTrue(thrown);}
public void metron_f9806_0() throws Exception
{    Assert.assertEquals("xyzabc", run("PREPEND_IF_MISSING('abc', 'xyz')", new HashedMap()));    Assert.assertEquals("xyzXYZabc", run("PREPEND_IF_MISSING('XYZabc', 'xyz', 'mno')", new HashedMap()));    Assert.assertEquals("mnoXYZabc", run("PREPEND_IF_MISSING('mnoXYZabc', 'xyz', 'mno')", new HashedMap()));    Assert.assertEquals(null, run("PREPEND_IF_MISSING(null, null, null)", new HashedMap()));    Assert.assertEquals("xyz", run("PREPEND_IF_MISSING('', 'xyz', null)", new HashedMap()));        boolean thrown = false;    try {        run("PREPEND_IF_MISSING()", Collections.emptyMap());    } catch (ParseException pe) {        thrown = true;        Assert.assertTrue(pe.getMessage().contains("incorrect arguments"));    }    Assert.assertTrue(thrown);    thrown = false;        try {        run("PREPEND_IF_MISSING('abc')", Collections.emptyMap());    } catch (ParseException pe) {        thrown = true;        Assert.assertTrue(pe.getMessage().contains("incorrect arguments"));    }    Assert.assertTrue(thrown);    thrown = false;        try {        run("PREPEND_IF_MISSING('abc', 'def', 'ghi', 'jkl')", Collections.emptyMap());    } catch (ParseException pe) {        thrown = true;        Assert.assertTrue(pe.getMessage().contains("incorrect arguments"));    }    Assert.assertTrue(thrown);    thrown = false;        try {        run("PREPEND_IF_MISSING(123, 'abc')", Collections.emptyMap());    } catch (ParseException pe) {        thrown = true;        Assert.assertTrue(pe.getMessage().contains("cannot be cast"));    }    Assert.assertTrue(thrown);}
public void metron_f9807_0() throws Exception
{    Assert.assertEquals("apachemetron", run("APPEND_IF_MISSING('apache', 'metron')", new HashedMap()));    Assert.assertEquals("abcXYZxyz", run("APPEND_IF_MISSING('abcXYZ', 'xyz', 'mno')", new HashedMap()));    Assert.assertEquals(null, run("APPEND_IF_MISSING(null, null, null)", new HashedMap()));    Assert.assertEquals("xyz", run("APPEND_IF_MISSING('', 'xyz', null)", new HashedMap()));        boolean thrown = false;    try {        run("APPEND_IF_MISSING()", Collections.emptyMap());    } catch (ParseException pe) {        thrown = true;        Assert.assertTrue(pe.getMessage().contains("incorrect arguments"));    }    Assert.assertTrue(thrown);    thrown = false;        try {        run("APPEND_IF_MISSING('abc')", Collections.emptyMap());    } catch (ParseException pe) {        thrown = true;        Assert.assertTrue(pe.getMessage().contains("incorrect arguments"));    }    Assert.assertTrue(thrown);    thrown = false;        try {        run("APPEND_IF_MISSING('abc', 'def', 'ghi', 'jkl')", Collections.emptyMap());    } catch (ParseException pe) {        thrown = true;        Assert.assertTrue(pe.getMessage().contains("incorrect arguments"));    }    Assert.assertTrue(thrown);    thrown = false;        try {        run("APPEND_IF_MISSING(123, 'abc')", Collections.emptyMap());    } catch (ParseException pe) {        thrown = true;        Assert.assertTrue(pe.getMessage().contains("cannot be cast"));    }    Assert.assertTrue(thrown);}
public void metron_f9808_0() throws Exception
{    Map<String, Object> variables = ImmutableMap.of("s", "apache metron");    Assert.assertEquals("metron", run("SUBSTRING(s, 7)", variables));    Assert.assertEquals("me", run("SUBSTRING(s, 7, 9)", variables));    Assert.assertNull(run("SUBSTRING(null, 7, 9)", new HashMap<>()));    Assert.assertNull(run("SUBSTRING(null, null, 9)", new HashMap<>()));    Assert.assertNull(run("SUBSTRING(s, null, 9)", variables));    Assert.assertNull(run("SUBSTRING(null, null, null)", new HashMap<>()));    Assert.assertEquals("metron", run("SUBSTRING(s, 7, null)", variables));}
public void metron_f9809_0() throws Exception
{    Assert.assertEquals("metron", run("SUBSTRING()", new HashMap<>()));}
public void metron_f9810_0() throws Exception
{    Map<String, Object> variables = ImmutableMap.of("s", "apache metron");    Assert.assertEquals("metron", (String) run("SUBSTRING(s, '7')", variables));}
public void metron_f9811_0() throws Exception
{    Map<String, Object> variables = ImmutableMap.of("s", "apache metron");    Assert.assertEquals("metron", (String) run("SUBSTRING(s, 7, '9')", variables));}
public void metron_f9812_0() throws Exception
{    Map<String, Object> variables = ImmutableMap.of("s", 7);    Assert.assertEquals("metron", (String) run("SUBSTRING(s, 7, '9')", variables));}
public void metron_f9813_0() throws Exception
{    Assert.assertEquals(0, (int) run("COUNT_MATCHES(null, '*')", new HashedMap()));    Assert.assertEquals(2, (int) run("COUNT_MATCHES('apachemetron', 'e')", new HashedMap()));    Assert.assertEquals(2, (int) run("COUNT_MATCHES('anand', 'an')", new HashedMap()));    Assert.assertEquals(0, (int) run("COUNT_MATCHES('abcd', null)", new HashedMap()));        boolean thrown = false;    try {        run("COUNT_MATCHES()", Collections.emptyMap());    } catch (ParseException pe) {        thrown = true;        Assert.assertTrue(pe.getMessage().contains("incorrect arguments"));    }    Assert.assertTrue(thrown);    thrown = false;        try {        run("COUNT_MATCHES('abc')", Collections.emptyMap());    } catch (ParseException pe) {        thrown = true;        Assert.assertTrue(pe.getMessage().contains("incorrect arguments"));    }    Assert.assertTrue(thrown);    thrown = false;        try {        run("COUNT_MATCHES(123, 456)", Collections.emptyMap());    } catch (ParseException pe) {        thrown = true;        Assert.assertTrue(pe.getMessage().contains("cannot be cast"));    }    Assert.assertTrue(thrown);}
public void metron_f9814_0() throws Exception
{        Object ret1 = run("TO_JSON_OBJECT(msg)", ImmutableMap.of("msg", string1));    Assert.assertNotNull(ret1);    Assert.assertTrue(ret1 instanceof HashMap);    Object ret2 = run("TO_JSON_OBJECT(msg)", ImmutableMap.of("msg", string2));    Assert.assertNotNull(ret2);    Assert.assertTrue(ret2 instanceof HashMap);    Assert.assertEquals("def", run("MAP_GET( 'bar', returnval)", ImmutableMap.of("returnval", ret2)));        Object ret3 = run("TO_JSON_OBJECT(msg)", ImmutableMap.of("msg", string3));    Assert.assertNotNull(ret3);    Assert.assertTrue(ret3 instanceof ArrayList);    List<Object> result3 = (List<Object>) ret3;    Assert.assertEquals(2, result3.get(1));    Object ret4 = run("TO_JSON_OBJECT(msg)", ImmutableMap.of("msg", string4));    Assert.assertNotNull(ret4);    Assert.assertTrue(ret4 instanceof ArrayList);    List<Object> result4 = (List<Object>) ret4;    Assert.assertEquals("car", result4.get(2));        Object ret5 = run("TO_JSON_OBJECT(msg)", ImmutableMap.of("msg", string5));    Assert.assertNotNull(ret5);    Assert.assertTrue(ret5 instanceof ArrayList);    List<List<Object>> result5 = (List<List<Object>>) ret5;    HashMap<String, String> results5Map1 = (HashMap) result5.get(0);    Assert.assertEquals("def", results5Map1.get("bar1"));    HashMap<String, String> results5Map2 = (HashMap) result5.get(1);    Assert.assertEquals("ghi", results5Map2.get("foo2"));        boolean thrown = false;    try {        run("TO_JSON_OBJECT()", Collections.emptyMap());    } catch (ParseException pe) {        thrown = true;        Assert.assertTrue(pe.getMessage().contains("Unable to parse"));    }    Assert.assertTrue(thrown);    thrown = false;        try {        run("TO_JSON_OBJECT('123, 456')", new HashedMap<>());    } catch (ParseException pe) {        thrown = true;        Assert.assertTrue(pe.getMessage().contains("Valid JSON string not supplied"));    }    Assert.assertTrue(thrown);    thrown = false;        try {        run("TO_JSON_OBJECT('{\"foo\" : 2')", new HashedMap<>());    } catch (ParseException pe) {        thrown = true;        Assert.assertTrue(pe.getMessage().contains("Valid JSON string not supplied"));    }    Assert.assertTrue(thrown);    thrown = false;}
public void metron_f9815_0() throws Exception
{        Object ret1 = run("TO_JSON_MAP(msg)", ImmutableMap.of("msg", string1));    Assert.assertNotNull(ret1);    Assert.assertTrue(ret1 instanceof HashMap);    Object ret2 = run("TO_JSON_MAP(msg)", ImmutableMap.of("msg", string2));    Assert.assertNotNull(ret2);    Assert.assertTrue(ret2 instanceof HashMap);    Assert.assertEquals("def", run("MAP_GET( 'bar', returnval)", ImmutableMap.of("returnval", ret2)));        boolean thrown = false;    try {        Object o = run("TO_JSON_MAP(msg)", ImmutableMap.of("msg", string3));        System.out.println(string3 + " == " + o);    } catch (ParseException pe) {        thrown = true;    }    Assert.assertTrue(thrown);    thrown = false;    try {        run("TO_JSON_MAP(msg)", ImmutableMap.of("msg", string4));    } catch (ParseException pe) {        thrown = true;    }    Assert.assertTrue(thrown);        thrown = false;    try {        run("TO_JSON_MAP(msg)", ImmutableMap.of("msg", string5));    } catch (ParseException pe) {        thrown = true;    }    Assert.assertTrue(thrown);        try {        run("TO_JSON_MAP()", Collections.emptyMap());    } catch (ParseException pe) {        thrown = true;        Assert.assertTrue(pe.getMessage().contains("Unable to parse"));    }    Assert.assertTrue(thrown);    thrown = false;        try {        run("TO_JSON_MAP('123, 456')", new HashedMap<>());    } catch (ParseException pe) {        thrown = true;        Assert.assertTrue(pe.getMessage().contains("is not a valid JSON string"));    }    Assert.assertTrue(thrown);    thrown = false;        try {        run("TO_JSON_MAP('{\"foo\" : 2')", new HashedMap<>());    } catch (ParseException pe) {        thrown = true;        Assert.assertTrue(pe.getMessage().contains("is not a valid JSON string"));    }    Assert.assertTrue(thrown);    thrown = false;}
public void metron_f9816_0() throws Exception
{        Object ret3 = run("TO_JSON_LIST(msg)", ImmutableMap.of("msg", string3));    Assert.assertNotNull(ret3);    Assert.assertTrue(ret3 instanceof ArrayList);    List<Object> result3 = (List<Object>) ret3;    Assert.assertEquals(2, result3.get(1));    Object ret4 = run("TO_JSON_LIST(msg)", ImmutableMap.of("msg", string4));    Assert.assertNotNull(ret4);    Assert.assertTrue(ret4 instanceof ArrayList);    List<Object> result4 = (List<Object>) ret4;    Assert.assertEquals("car", result4.get(2));        Object ret5 = run("TO_JSON_LIST(msg)", ImmutableMap.of("msg", string5));    Assert.assertNotNull(ret5);    Assert.assertTrue(ret5 instanceof ArrayList);    List<List<Object>> result5 = (List<List<Object>>) ret5;    HashMap<String, String> results5Map1 = (HashMap) result5.get(0);    Assert.assertEquals("def", results5Map1.get("bar1"));    HashMap<String, String> results5Map2 = (HashMap) result5.get(1);    Assert.assertEquals("ghi", results5Map2.get("foo2"));        boolean thrown = false;    try {        run("TO_JSON_LIST(msg)", ImmutableMap.of("msg", string1));    } catch (ParseException pe) {        thrown = true;    }    Assert.assertTrue(thrown);    thrown = false;    try {        run("TO_JSON_LIST(msg)", ImmutableMap.of("msg", string2));    } catch (ParseException pe) {        thrown = true;    }    Assert.assertTrue(thrown);        thrown = false;    try {        run("TO_JSON_LIST()", Collections.emptyMap());    } catch (ParseException pe) {        thrown = true;        Assert.assertTrue(pe.getMessage().contains("Unable to parse"));    }    Assert.assertTrue(thrown);        thrown = false;    try {        run("TO_JSON_LIST('123, 456')", new HashedMap<>());    } catch (ParseException pe) {        thrown = true;        Assert.assertTrue(pe.getMessage().contains("is not a valid JSON string"));    }    Assert.assertTrue(thrown);        thrown = false;    try {        run("TO_JSON_LIST('{\"foo\" : 2')", new HashedMap<>());    } catch (ParseException pe) {        thrown = true;        Assert.assertTrue(pe.getMessage().contains("is not a valid JSON string"));    }    Assert.assertTrue(thrown);}
public void metron_f9817_0()
{    SystemFunctions.EnvGet envGet = new SystemFunctions.EnvGet();    String envVal = (String) envGet.apply(ImmutableList.of("ENV_GET_VAR"));    assertThat("Value should not exist", envVal, equalTo(null));}
public void metron_f9818_0()
{    Environment env = mock(Environment.class);    when(env.get("ENV_GET_VAR")).thenReturn("ENV_GET_VALUE");    SystemFunctions.EnvGet envGet = new SystemFunctions.EnvGet(env);    String envVal = (String) envGet.apply(ImmutableList.of("ENV_GET_VAR"));    assertThat("Value should match", envVal, equalTo("ENV_GET_VALUE"));}
public void metron_f9819_0()
{    SystemFunctions.EnvGet envGet = new SystemFunctions.EnvGet();    String envVal = (String) envGet.apply(ImmutableList.of(new ArrayList()));    assertThat("Value should be null", envVal, equalTo(null));}
public void metron_f9820_0()
{    System.getProperties().put("ENV_GET_VAR", "ENV_GET_VALUE");    SystemFunctions.PropertyGet propertyGet = new SystemFunctions.PropertyGet();    String propertyVal = (String) propertyGet.apply(ImmutableList.of("ENV_GET_VAR"));    assertThat("Value should match", propertyVal, equalTo("ENV_GET_VALUE"));}
public void metron_f9821_0()
{    SystemFunctions.PropertyGet propertyGet = new SystemFunctions.PropertyGet();    String propertyVal = (String) propertyGet.apply(ImmutableList.of("PROPERTY_MISSING"));    assertThat("Value should not exist", propertyVal, equalTo(null));}
public void metron_f9822_0()
{    SystemFunctions.PropertyGet propertyGet = new SystemFunctions.PropertyGet();    String propertyVal = (String) propertyGet.apply(ImmutableList.of(new ArrayList()));    assertThat("Value should be null", propertyVal, equalTo(null));}
public void metron_f9823_0()
{    Object ret = run("FUZZY_LANGS()", new HashMap<>());    Assert.assertNotNull(ret);    Assert.assertTrue(ret instanceof List);    List<String> tags = (List<String>) ret;    Assert.assertTrue(tags.size() > 0);    Assert.assertTrue(tags.contains("en"));    Assert.assertTrue(tags.contains("fr"));}
public void metron_f9824_0() throws Exception
{    Assert.assertTrue(runPredicate("0 == FUZZY_SCORE(metron,'z',english)", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));}
public void metron_f9825_0() throws Exception
{    runPredicate("0 == FUZZY_SCORE(metron,'z',klingon)", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v)));}
public void metron_f9826_0() throws Exception
{    Assert.assertTrue(runPredicate("0 == FUZZY_SCORE(empty,'z',english)", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));}
public void metron_f9827_0() throws Exception
{    Assert.assertTrue(runPredicate("0 == FUZZY_SCORE(empty,empty,english)", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));}
public void metron_f9828_0() throws Exception
{    runPredicate("0 == FUZZY_SCORE(empty,empty,empty)", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v)));}
public void metron_f9829_0() throws Exception
{    runPredicate("0 == FUZZY_SCORE()", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v)));}
public void metron_f9830_0() throws Exception
{    Assert.assertTrue(runPredicate("1 == FUZZY_SCORE(metron,'m',english)", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("16 == FUZZY_SCORE(metron,'metron',english)", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));    Assert.assertTrue(runPredicate("3 == FUZZY_SCORE(asf,'asf',english)", new DefaultVariableResolver(v -> variableMap.get(v), v -> variableMap.containsKey(v))));}
public void metron_f9831_1()
{    try {                this.autoCompleter = new DefaultStellarAutoCompleter();                Properties props = getProperty();        this.executor = createExecutor(props);    } catch (Exception e) {                throw new RuntimeException(e);    }}
public InterpreterResult metron_f9833_0(final String input, InterpreterContext context)
{    InterpreterResult result = new InterpreterResult(SUCCESS, TEXT, "");    try {                String[] expressions = input.split(System.lineSeparator());        for (String expression : expressions) {            result = execute(expression);        }    } catch (Throwable t) {                String message = getErrorMessage(Optional.of(t), input);        result = new InterpreterResult(ERROR, TEXT, message);    }        return result;}
private InterpreterResult metron_f9834_0(final String expression)
{    InterpreterResult result;        StellarResult stellarResult = executor.execute(expression);    if (stellarResult.isSuccess()) {                Object value = stellarResult.getValue().orElse("");        String text = value.toString();        result = new InterpreterResult(SUCCESS, TEXT, text);    } else if (stellarResult.isError()) {                Optional<Throwable> e = stellarResult.getException();        String message = getErrorMessage(e, expression);        result = new InterpreterResult(ERROR, TEXT, message);    } else {                throw new IllegalStateException("Unexpected error. result=" + stellarResult);    }    return result;}
public FormType metron_f9836_0()
{    return FormType.SIMPLE;}
public int metron_f9837_0(InterpreterContext context)
{        return 0;}
public List<InterpreterCompletion> metron_f9838_0(String buf, int cursor)
{        List<InterpreterCompletion> completes = new ArrayList<>();    for (String candidate : autoCompleter.autoComplete(buf)) {        completes.add(new InterpreterCompletion(candidate, candidate));    }    return completes;}
private String metron_f9839_0(Optional<Throwable> e, String input)
{    String message;    if (e.isPresent()) {                String error = ExceptionUtils.getRootCauseMessage(e.get());        String trace = ExceptionUtils.getStackTrace(e.get());        message = error + System.lineSeparator() + trace;    } else {                message = "Invalid expression: " + input;    }    return message;}
private StellarShellExecutor metron_f9840_0(Properties properties) throws Exception
{        String zookeeperURL = StellarInterpreterProperty.ZOOKEEPER_URL.get(properties, String.class);    StellarShellExecutor executor = new DefaultStellarShellExecutor(properties, Optional.ofNullable(zookeeperURL));        executor.addSpecialListener((magic) -> autoCompleter.addCandidateFunction(magic.getCommand()));    executor.addFunctionListener((fn) -> autoCompleter.addCandidateFunction(fn.getName()));    executor.addVariableListener((name, val) -> autoCompleter.addCandidateVariable(name));    executor.init();    return executor;}
public StellarShellExecutor metron_f9841_0()
{    return executor;}
public String metron_f9842_0()
{    return key;}
public T metron_f9843_0(Class<T> clazz)
{    return ConversionUtils.convert(defaultValue, clazz);}
public T metron_f9844_0(Map<Object, Object> properties, Class<T> clazz)
{    Object o = properties.getOrDefault(key, defaultValue);    return o == null ? null : ConversionUtils.convert(o, clazz);}
public String metron_f9845_0()
{    return key;}
public void metron_f9846_0() throws UnableToStartException
{    try {        upload();    } catch (Exception e) {        throw new UnableToStartException(e.getMessage(), e);    }}
private void metron_f9848_0() throws Exception
{    assert zookeeperURL != null;    try (CuratorFramework client = getClient(zookeeperURL)) {        if (client.getState() != CuratorFrameworkState.STARTED) {            client.start();        }        if (globals != null) {            writeGlobalConfigToZookeeper(globals, client);        }    }}
public ConfigUploadComponent metron_f9849_0(String zookeeperURL)
{    this.zookeeperURL = zookeeperURL;    return this;}
public ConfigUploadComponent metron_f9850_0(Map<String, Object> globals)
{    this.globals = globals;    return this;}
public void metron_f9851_0() throws Exception
{        Map<String, Object> globals = new HashMap<>();    ConfigUploadComponent configUploader = new ConfigUploadComponent().withGlobals(globals);        properties = new Properties();    zkServer = getZKServerComponent(properties);        zkServer.withPostStartCallback((zk) -> {        zookeeperURL = zk.getConnectionString();        configUploader.withZookeeperURL(zookeeperURL);    });        runner = new ComponentRunner.Builder().withComponent("zk", zkServer).withComponent("config", configUploader).build();    runner.start();    context = mock(InterpreterContext.class);}
public void metron_f9852_0() throws Exception
{    runner.stop();}
public void metron_f9853_0()
{        Properties props = new Properties();    props.put(ZOOKEEPER_URL.toString(), zookeeperURL);        interpreter = new StellarInterpreter(props);    interpreter.open();        Optional<Object> zk = interpreter.getExecutor().getContext().getCapability(Context.Capabilities.ZOOKEEPER_CLIENT, false);    assertTrue(zk.isPresent());}
public void metron_f9854_0()
{        final String expected = "zookeeper:2181";    Map<Object, Object> props = Collections.singletonMap("zookeeper.url", expected);        String actual = ZOOKEEPER_URL.get(props, String.class);    assertEquals(expected, actual);}
public void metron_f9855_0()
{        Map<Object, Object> props = Collections.singletonMap("foo", "bar");    String actual = ZOOKEEPER_URL.get(props, String.class);        String expected = ZOOKEEPER_URL.getDefault(String.class);    assertEquals(expected, actual);}
public void metron_f9856_0()
{    Properties props = new Properties();    interpreter = new StellarInterpreter(props);    interpreter.open();    context = mock(InterpreterContext.class);}
public void metron_f9857_0()
{    InterpreterResult result = interpreter.interpret("2 + 2", context);        assertEquals(InterpreterResult.Code.SUCCESS, result.code());    assertEquals(1, result.message().size());        InterpreterResultMessage message = result.message().get(0);    assertEquals("4", message.getData());    assertEquals(InterpreterResult.Type.TEXT, message.getType());}
public void metron_f9858_0()
{    final String expected = "[1, 2, 3, 4, 5]";    InterpreterResult result = interpreter.interpret("[1,2,3,4,5]", context);        assertEquals(InterpreterResult.Code.SUCCESS, result.code());    assertEquals(1, result.message().size());        InterpreterResultMessage message = result.message().get(0);    assertEquals(expected, message.getData());    assertEquals(InterpreterResult.Type.TEXT, message.getType());}
public void metron_f9859_0()
{    final String expected = "{foo=2, key=val}";    InterpreterResult result = interpreter.interpret("{ 'foo':2, 'key':'val' }", context);        assertEquals(InterpreterResult.Code.SUCCESS, result.code());    assertEquals(1, result.message().size());        InterpreterResultMessage message = result.message().get(0);    assertEquals(expected, message.getData());    assertEquals(InterpreterResult.Type.TEXT, message.getType());}
public void metron_f9860_0()
{    InterpreterResult result = interpreter.interpret("2 + ", context);        assertEquals(InterpreterResult.Code.ERROR, result.code());    assertEquals(1, result.message().size());        InterpreterResultMessage message = result.message().get(0);    assertTrue(message.getData().length() > 0);    assertEquals(InterpreterResult.Type.TEXT, message.getType());}
public void metron_f9861_0()
{        InterpreterResult result = interpreter.interpret("x", context);        assertEquals(InterpreterResult.Code.SUCCESS, result.code());    assertEquals(1, result.message().size());        InterpreterResultMessage message = result.message().get(0);    assertEquals(0, message.getData().length());    assertEquals(InterpreterResult.Type.TEXT, message.getType());}
public void metron_f9862_0()
{        final String buffer = "TO_";        int cursor = buffer.length();    List<InterpreterCompletion> completions = interpreter.completion(buffer, cursor);        assertTrue(completions.size() > 0);    for (InterpreterCompletion iCompletion : completions) {        String completion = iCompletion.getValue();                assertEquals("(", completion.substring(completion.length() - 1));                String function = completion.substring(0, completion.length() - 1);        Iterable<String> allFunctions = interpreter.getExecutor().getFunctionResolver().getFunctions();        String definedFunction = Iterables.find(allFunctions, (fn) -> StringUtils.equals(fn, function));        assertEquals(function, definedFunction);    }}
public void metron_f9863_0()
{        final String buffer = "NOTHING_AUTOCOMPLETES_THIS_";        int cursor = buffer.length();        List<InterpreterCompletion> completions = interpreter.completion(buffer, cursor);        assertEquals(0, completions.size());}
public void metron_f9864_0()
{        Properties props = new Properties();        interpreter = new StellarInterpreter(props);    interpreter.open();        Optional<Object> zk = interpreter.getExecutor().getContext().getCapability(Context.Capabilities.ZOOKEEPER_CLIENT, false);    assertFalse(zk.isPresent());}
public void metron_f9865_0()
{        String input = "x := 2 + 2" + System.lineSeparator() + "y := 4 + 4";    InterpreterResult result = interpreter.interpret(input, context);        Map<String, VariableResult> vars = interpreter.getExecutor().getState();    assertEquals(4, vars.get("x").getResult());    assertEquals(8, vars.get("y").getResult());        assertEquals(InterpreterResult.Code.SUCCESS, result.code());    assertEquals(1, result.message().size());        InterpreterResultMessage message = result.message().get(0);    assertEquals("8", message.getData());    assertEquals(InterpreterResult.Type.TEXT, message.getType());}
