public Component pdfbox_f0_0(JTable jTable, Object o, boolean b, boolean b2, int i, int i2)
{    JLabel colorBar = new JLabel();    colorBar.setOpaque(true);    colorBar.setBackground((Color) o);    return colorBar;}
private void pdfbox_f1_0()
{    panel = new JPanel();    panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));    panel.setPreferredSize(new Dimension(300, 500));    if (colorSpace == null) {        JLabel error = new JLabel(errmsg);        error.setAlignmentX(Component.CENTER_ALIGNMENT);        error.setFont(new Font(Font.MONOSPACED, Font.BOLD, 15));        panel.add(error);        return;    }    JLabel colorSpaceLabel = new JLabel(colorSpace.getName() + " colorspace");    colorSpaceLabel.setAlignmentX(Component.CENTER_ALIGNMENT);    colorSpaceLabel.setFont(new Font(Font.MONOSPACED, Font.BOLD, 30));    panel.add(colorSpaceLabel);    if (numberOfComponents > 0) {        JLabel colorCountLabel = new JLabel("Component Count: " + numberOfComponents);        colorCountLabel.setAlignmentX(Component.CENTER_ALIGNMENT);        colorCountLabel.setFont(new Font(Font.MONOSPACED, Font.BOLD, 20));        panel.add(colorCountLabel);    }    if (colorSpace instanceof PDICCBased) {        PDICCBased icc = (PDICCBased) colorSpace;        int colorSpaceType = icc.getColorSpaceType();        String cs;        switch(colorSpaceType) {            case ColorSpace.CS_LINEAR_RGB:                cs = "linear RGB";                break;            case ColorSpace.CS_CIEXYZ:                cs = "CIEXYZ";                break;            case ColorSpace.CS_GRAY:                cs = "linear gray";                break;            case ColorSpace.CS_sRGB:                cs = "sRGB";                break;            case ColorSpace.TYPE_RGB:                cs = "RGB";                break;            case ColorSpace.TYPE_GRAY:                cs = "gray";                break;            case ColorSpace.TYPE_CMYK:                cs = "CMYK";                break;            default:                cs = "type " + colorSpaceType;                break;        }        JLabel otherLabel = new JLabel("Colorspace type: " + cs);        otherLabel.setAlignmentX(Component.CENTER_ALIGNMENT);        otherLabel.setFont(new Font(Font.MONOSPACED, Font.BOLD, 20));        panel.add(otherLabel);    }}
public Component pdfbox_f2_0()
{    return panel;}
private DeviceNColorant[] pdfbox_f3_0() throws IOException
{    int componentCount = deviceN.getNumberOfComponents();    DeviceNColorant[] colorants = new DeviceNColorant[componentCount];    for (int i = 0; i < componentCount; i++) {        DeviceNColorant colorant = new DeviceNColorant();        colorant.setName(deviceN.getColorantNames().get(i));        float[] maximum = new float[componentCount];        Arrays.fill(maximum, 0);        float[] minimum = new float[componentCount];        Arrays.fill(minimum, 0);        maximum[i] = 1;        colorant.setMaximum(getColorObj(deviceN.toRGB(maximum)));        colorant.setMinimum(getColorObj(deviceN.toRGB(minimum)));        colorants[i] = colorant;    }    return colorants;}
private void pdfbox_f4_0(DeviceNColorant[] colorants)
{    panel = new JPanel();    panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));    panel.setPreferredSize(new Dimension(300, 500));    JLabel colorSpaceLabel = new JLabel("DeviceN colorspace");    colorSpaceLabel.setAlignmentX(Component.CENTER_ALIGNMENT);    colorSpaceLabel.setFont(new Font(Font.MONOSPACED, Font.BOLD, 30));    DeviceNTableModel tableModel = new DeviceNTableModel(colorants);    JTable table = new JTable(tableModel);    table.setDefaultRenderer(Color.class, new ColorBarCellRenderer());    table.setRowHeight(60);    JScrollPane scrollPane = new JScrollPane();    scrollPane.setViewportView(table);    panel.add(colorSpaceLabel);    panel.add(scrollPane);}
public Component pdfbox_f5_0()
{    return panel;}
private Color pdfbox_f6_0(float[] rgbValues)
{    return new Color(rgbValues[0], rgbValues[1], rgbValues[2]);}
private IndexedColorant[] pdfbox_f7_0()
{    IndexedColorant[] colorants = new IndexedColorant[colorCount];    for (int i = 0; i < colorCount; i++) {        IndexedColorant colorant = new IndexedColorant();        colorant.setIndex(i);        float[] rgbValues = indexed.toRGB(new float[] { i });        colorant.setRgbValues(rgbValues);        colorants[i] = colorant;    }    return colorants;}
private void pdfbox_f8_0(IndexedColorant[] colorants)
{    panel = new JPanel();    panel.setLayout(new GridBagLayout());    panel.setPreferredSize(new Dimension(300, 500));    JLabel colorSpaceLabel = new JLabel("Indexed colorspace");    colorSpaceLabel.setAlignmentX(Component.CENTER_ALIGNMENT);    colorSpaceLabel.setFont(new Font(Font.MONOSPACED, Font.BOLD, 30));    JPanel colorspaceLabelPanel = new JPanel();    colorspaceLabelPanel.setAlignmentX(Component.LEFT_ALIGNMENT);    colorspaceLabelPanel.add(colorSpaceLabel);    JLabel colorCountLabel = new JLabel(" Total Color Count: " + colorCount);    colorCountLabel.setAlignmentX(Component.LEFT_ALIGNMENT);    colorCountLabel.setFont(new Font(Font.MONOSPACED, Font.BOLD, 20));    IndexedTableModel tableModel = new IndexedTableModel(colorants);    JTable table = new JTable(tableModel);    table.setDefaultRenderer(Color.class, new ColorBarCellRenderer());    table.setRowHeight(40);    table.getColumnModel().getColumn(0).setMinWidth(30);    table.getColumnModel().getColumn(0).setMaxWidth(50);    table.getColumnModel().getColumn(1).setMinWidth(100);    table.getColumnModel().getColumn(1).setMaxWidth(100);    JScrollPane scrollPane = new JScrollPane();    scrollPane.setViewportView(table);    scrollPane.setAlignmentX(Component.LEFT_ALIGNMENT);    Box box = Box.createVerticalBox();    box.add(colorCountLabel);    box.add(scrollPane);    box.setAlignmentX(Component.LEFT_ALIGNMENT);    GridBagConstraints gbc = new GridBagConstraints();    gbc.gridx = 0;    gbc.gridy = 0;    gbc.weighty = 0.05;    gbc.fill = GridBagConstraints.HORIZONTAL;    gbc.anchor = GridBagConstraints.PAGE_START;    panel.add(colorspaceLabelPanel, gbc);    gbc.gridy = 2;    gbc.weighty = 0.9;    gbc.weightx = 1;    gbc.fill = GridBagConstraints.BOTH;    gbc.anchor = GridBagConstraints.BELOW_BASELINE;    panel.add(box, gbc);}
public Component pdfbox_f9_0()
{    return panel;}
private int pdfbox_f10_0(COSArray array)
{    int hival = ((COSNumber) array.getObject(2).getCOSObject()).intValue();    return Math.min(hival, 255);}
private void pdfbox_f11_0()
{    Font boldFont = new Font(Font.MONOSPACED, Font.BOLD, 20);    GridBagConstraints gbc = new GridBagConstraints();    gbc.insets = new Insets(2, 2, 2, 2);    JPanel inputPanel = new JPanel(new GridBagLayout());    slider = new JSlider(0, 100, 50);    slider.setMajorTickSpacing(50);    slider.setPaintTicks(true);    @SuppressWarnings({ "squid:S1149" })    Dictionary<Integer, JLabel> labelTable = new Hashtable<>();    JLabel lightest = new JLabel("lightest");    lightest.setFont(new Font(Font.MONOSPACED, Font.BOLD, 10));    JLabel darkest = new JLabel("darkest");    darkest.setFont(new Font(Font.MONOSPACED, Font.BOLD, 10));    JLabel midPoint = new JLabel("0.5");    midPoint.setFont(new Font(Font.MONOSPACED, Font.BOLD, 10));    labelTable.put(0, lightest);    labelTable.put(50, midPoint);    labelTable.put(100, darkest);    slider.setPaintLabels(true);    slider.setLabelTable(labelTable);    slider.addChangeListener(this);    gbc.gridx = 0;    gbc.gridy = 0;    gbc.gridwidth = 10;    gbc.weightx = 1;    gbc.fill = GridBagConstraints.HORIZONTAL;    inputPanel.add(slider, gbc);    JLabel tintLabel = new JLabel("Tint Value:");    tintLabel.setFont(boldFont);    gbc.gridx = 0;    gbc.gridy = 1;    gbc.weightx = 0.5;    gbc.gridwidth = 1;    gbc.fill = GridBagConstraints.HORIZONTAL;    inputPanel.add(tintLabel, gbc);    tintField = new JTextField();    tintField.addActionListener(this);    tintField.setPreferredSize(new Dimension(10, 30));    gbc.gridx = 1;    gbc.weightx = 0.5;    gbc.gridwidth = 1;    gbc.fill = GridBagConstraints.HORIZONTAL;    inputPanel.add(tintField, gbc);    JPanel contentPanel = new JPanel(new GridBagLayout());    GridBagConstraints gbc2 = new GridBagConstraints();    gbc2.gridx = 0;    gbc2.gridy = 0;    gbc2.gridwidth = 2;    gbc2.weightx = 0.3;    gbc2.weighty = 1;    gbc2.fill = GridBagConstraints.HORIZONTAL;    contentPanel.add(inputPanel, gbc2);    colorBar = new JLabel();    colorBar.setOpaque(true);    gbc2.gridx = 2;    gbc2.weightx = 0.7;    gbc2.gridwidth = 4;    gbc2.gridheight = 2;    gbc2.fill = GridBagConstraints.BOTH;    contentPanel.add(colorBar, gbc2);    setColorBarBorder();    JPanel mainpanel = new JPanel(new GridBagLayout());    JLabel colorantNameLabel = new JLabel("Colorant: " + separation.getColorantName());    colorantNameLabel.setFont(boldFont);    GridBagConstraints maingbc = new GridBagConstraints();    maingbc.gridx = 0;    maingbc.gridy = 0;    maingbc.weightx = 1;    maingbc.weighty = 0.03;    maingbc.anchor = GridBagConstraints.FIRST_LINE_START;    mainpanel.add(colorantNameLabel, maingbc);    maingbc.gridx = 0;    maingbc.gridy = 1;    maingbc.weighty = 0.97;    maingbc.gridwidth = 10;    maingbc.fill = GridBagConstraints.HORIZONTAL;    mainpanel.add(contentPanel, maingbc);    panel = new JPanel();    panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));    panel.setPreferredSize(new Dimension(300, 500));    JLabel colorSpaceLabel = new JLabel("Separation colorspace");    colorSpaceLabel.setAlignmentX(Component.CENTER_ALIGNMENT);    colorSpaceLabel.setFont(new Font(Font.MONOSPACED, Font.BOLD, 30));    panel.add(colorSpaceLabel);    panel.add(mainpanel);}
private void pdfbox_f12_0()
{    slider.setValue(getIntRepresentation(tintValue));    tintField.setText(Float.toString(tintValue));}
public JPanel pdfbox_f13_0()
{    return panel;}
public void pdfbox_f14_0(ChangeEvent changeEvent)
{    int value = slider.getValue();    tintValue = getFloatRepresentation(value);    tintField.setText(Float.toString(tintValue));    updateColorBar();}
public void pdfbox_f15_0(ActionEvent actionEvent)
{    String input = tintField.getText();    try {        tintValue = Float.parseFloat(input);        slider.setValue(getIntRepresentation(tintValue));        updateColorBar();    } catch (NumberFormatException e) {        tintField.setText(Float.toString(tintValue));    }}
private void pdfbox_f16_0()
{    try {        float[] rgbValues = separation.toRGB(new float[] { tintValue });        colorBar.setBackground(new Color(rgbValues[0], rgbValues[1], rgbValues[2]));    } catch (IOException e) {        throw new RuntimeException(e);    }}
private void pdfbox_f17_0()
{    try {        float[] rgbValues = separation.toRGB(new float[] { 1 });        Color darkest = new Color(rgbValues[0], rgbValues[1], rgbValues[2]);        colorBar.setBorder(new BevelBorder(BevelBorder.LOWERED, darkest, darkest));    } catch (IOException e) {        throw new RuntimeException(e);    }}
private float pdfbox_f18_0(int value)
{    return (float) value / 100;}
private int pdfbox_f19_0(float value)
{    return (int) (value * 100);}
public String pdfbox_f20_0()
{    return name;}
public void pdfbox_f21_0(String name)
{    this.name = name;}
public Color pdfbox_f22_0()
{    return maximum;}
public void pdfbox_f23_0(Color maximum)
{    this.maximum = maximum;}
public Color pdfbox_f24_0()
{    return minimum;}
public void pdfbox_f25_0(Color minimum)
{    this.minimum = minimum;}
public int pdfbox_f26_0()
{    return data.length;}
public int pdfbox_f27_0()
{    return COLUMNNAMES.length;}
public Object pdfbox_f28_0(int row, int column)
{    switch(column) {        case 0:            return data[row].getName();        case 1:            return data[row].getMaximum();        case 2:            return data[row].getMinimum();        default:            return null;    }}
public String pdfbox_f29_0(int column)
{    return COLUMNNAMES[column];}
public Class<?> pdfbox_f30_0(int columnIndex)
{    switch(columnIndex) {        case 0:            return String.class;        case 1:        case 2:            return Color.class;        default:            return null;    }}
public int pdfbox_f31_0()
{    return index;}
public void pdfbox_f32_0(int index)
{    this.index = index;}
public void pdfbox_f33_0(float[] rgbValues)
{    this.rgbValues = rgbValues;}
public Color pdfbox_f34_0()
{    return new Color(rgbValues[0], rgbValues[1], rgbValues[2]);}
public String pdfbox_f35_0()
{    StringBuilder builder = new StringBuilder();    for (float i : rgbValues) {        builder.append((int) (i * 255));        builder.append(", ");    }    builder.deleteCharAt(builder.lastIndexOf(","));    return builder.toString();}
public int pdfbox_f36_0()
{    return data.length;}
public int pdfbox_f37_0()
{    return COLUMNSNAMES.length;}
public Object pdfbox_f38_0(int row, int column)
{    switch(column) {        case 0:            return data[row].getIndex();        case 1:            return data[row].getRGBValuesString();        case 2:            return data[row].getColor();        default:            return null;    }}
public String pdfbox_f39_0(int column)
{    return COLUMNSNAMES[column];}
public Class<?> pdfbox_f40_0(int columnIndex)
{    switch(columnIndex) {        case 0:            return Integer.class;        case 1:            return String.class;        case 2:            return Color.class;        default:            return null;    }}
 String pdfbox_f41_0()
{    return "Annot flag";}
 String pdfbox_f42_0()
{    return "Flag value: " + annotDictionary.getInt(COSName.F);}
 Object[][] pdfbox_f43_0()
{    PDAnnotation annotation = new PDAnnotation(annotDictionary) {    };    return new Object[][] { new Object[] { 1, "Invisible", annotation.isInvisible() }, new Object[] { 2, "Hidden", annotation.isHidden() }, new Object[] { 3, "Print", annotation.isPrinted() }, new Object[] { 4, "NoZoom", annotation.isNoZoom() }, new Object[] { 5, "NoRotate", annotation.isNoRotate() }, new Object[] { 6, "NoView", annotation.isNoView() }, new Object[] { 7, "ReadOnly", annotation.isReadOnly() }, new Object[] { 8, "Locked", annotation.isLocked() }, new Object[] { 9, "ToggleNoView", annotation.isToggleNoView() }, new Object[] { 10, "LockedContents", annotation.isLocked() } };}
 String pdfbox_f44_0()
{    return "Encrypt flag";}
 String pdfbox_f45_0()
{    return "Flag value:" + encryptDictionary.getInt(COSName.P);}
 Object[][] pdfbox_f46_0()
{    AccessPermission ap = new AccessPermission(encryptDictionary.getInt(COSName.P));    return new Object[][] { new Object[] { 3, "can print", ap.canPrint() }, new Object[] { 4, "can modify", ap.canModify() }, new Object[] { 5, "can extract content", ap.canExtractContent() }, new Object[] { 6, "can modify annotations", ap.canModifyAnnotations() }, new Object[] { 9, "can fill in form fields", ap.canFillInForm() }, new Object[] { 10, "can extract for accessibility", ap.canExtractForAccessibility() }, new Object[] { 11, "can assemble document", ap.canAssembleDocument() }, new Object[] { 12, "can print degraded", ap.canPrintDegraded() } };}
 String pdfbox_f47_0()
{    COSName fieldType = dictionary.getCOSName(COSName.FT);    if (COSName.TX.equals(fieldType)) {        return "Text field flag";    } else if (COSName.BTN.equals(fieldType)) {        return "Button field flag";    } else if (COSName.CH.equals(fieldType)) {        return "Choice field flag";    }    return null;}
 String pdfbox_f48_0()
{    return "Flag value: " + dictionary.getInt(COSName.FF);}
 Object[][] pdfbox_f49_0()
{    int flagValue = dictionary.getInt(COSName.FF);    COSName fieldType = dictionary.getCOSName(COSName.FT);    if (COSName.TX.equals(fieldType)) {        return getTextFieldFlagBits(flagValue);    } else if (COSName.BTN.equals(fieldType)) {        return getButtonFieldFlagBits(flagValue);    } else if (COSName.CH.equals(fieldType)) {        return getChoiceFieldFlagBits(flagValue);    }    return null;}
private Object[][] pdfbox_f50_0(final int flagValue)
{    return new Object[][] { new Object[] { 1, "ReadOnly", isFlagBitSet(flagValue, 1) }, new Object[] { 2, "Required", isFlagBitSet(flagValue, 2) }, new Object[] { 3, "NoExport", isFlagBitSet(flagValue, 3) }, new Object[] { 13, "Multiline", isFlagBitSet(flagValue, 13) }, new Object[] { 14, "Password", isFlagBitSet(flagValue, 14) }, new Object[] { 21, "FileSelect", isFlagBitSet(flagValue, 21) }, new Object[] { 23, "DoNotSpellCheck", isFlagBitSet(flagValue, 23) }, new Object[] { 24, "DoNotScroll", isFlagBitSet(flagValue, 24) }, new Object[] { 25, "Comb", isFlagBitSet(flagValue, 25) }, new Object[] { 26, "RichText", isFlagBitSet(flagValue, 26) } };}
private Object[][] pdfbox_f51_0(final int flagValue)
{    return new Object[][] { new Object[] { 1, "ReadOnly", isFlagBitSet(flagValue, 1) }, new Object[] { 2, "Required", isFlagBitSet(flagValue, 2) }, new Object[] { 3, "NoExport", isFlagBitSet(flagValue, 3) }, new Object[] { 15, "NoToggleToOff", isFlagBitSet(flagValue, 15) }, new Object[] { 16, "Radio", isFlagBitSet(flagValue, 16) }, new Object[] { 17, "Pushbutton", isFlagBitSet(flagValue, 17) }, new Object[] { 26, "RadiosInUnison", isFlagBitSet(flagValue, 26) } };}
private Object[][] pdfbox_f52_0(final int flagValue)
{    return new Object[][] { new Object[] { 1, "ReadOnly", isFlagBitSet(flagValue, 1) }, new Object[] { 2, "Required", isFlagBitSet(flagValue, 2) }, new Object[] { 3, "NoExport", isFlagBitSet(flagValue, 3) }, new Object[] { 18, "Combo", isFlagBitSet(flagValue, 18) }, new Object[] { 19, "Edit", isFlagBitSet(flagValue, 19) }, new Object[] { 20, "Sort", isFlagBitSet(flagValue, 20) }, new Object[] { 22, "MultiSelect", isFlagBitSet(flagValue, 22) }, new Object[] { 23, "DoNotSpellCheck", isFlagBitSet(flagValue, 23) }, new Object[] { 27, "CommitOnSelChange", isFlagBitSet(flagValue, 27) } };}
private Boolean pdfbox_f53_0(int flagValue, int bitPosition)
{    int binaryFormat = 1 << (bitPosition - 1);    return (flagValue & binaryFormat) == binaryFormat;}
 String[] pdfbox_f54_0()
{    return new String[] { "Bit Position", "Name", "Set" };}
private void pdfbox_f55_0(final COSDictionary dictionary, final COSName flagType)
{    Flag flag;    if (COSName.FLAGS.equals(flagType)) {        flag = new FontFlag(dictionary);        view = new FlagBitsPaneView(flag.getFlagType(), flag.getFlagValue(), flag.getFlagBits(), flag.getColumnNames());    }    if (COSName.F.equals(flagType)) {        flag = new AnnotFlag(dictionary);        view = new FlagBitsPaneView(flag.getFlagType(), flag.getFlagValue(), flag.getFlagBits(), flag.getColumnNames());    }    if (COSName.FF.equals(flagType)) {        flag = new FieldFlag(dictionary);        view = new FlagBitsPaneView(flag.getFlagType(), flag.getFlagValue(), flag.getFlagBits(), flag.getColumnNames());    }    if (COSName.PANOSE.equals(flagType)) {        flag = new PanoseFlag(dictionary);        view = new FlagBitsPaneView(flag.getFlagType(), flag.getFlagValue(), flag.getFlagBits(), flag.getColumnNames());    }    if (COSName.P.equals(flagType)) {        flag = new EncryptFlag(dictionary);        view = new FlagBitsPaneView(flag.getFlagType(), flag.getFlagValue(), flag.getFlagBits(), flag.getColumnNames());    }    if (COSName.SIG_FLAGS.equals(flagType)) {        flag = new SigFlag(document, dictionary);        view = new FlagBitsPaneView(flag.getFlagType(), flag.getFlagValue(), flag.getFlagBits(), flag.getColumnNames());    }}
public JPanel pdfbox_f56_0()
{    return view.getPanel();}
private void pdfbox_f57_0()
{    panel.setLayout(new GridBagLayout());    panel.setPreferredSize(new Dimension(300, 500));    JLabel flagLabel = new JLabel(flagHeader);    flagLabel.setAlignmentX(Component.CENTER_ALIGNMENT);    flagLabel.setFont(new Font(Font.MONOSPACED, Font.BOLD, 30));    JPanel flagLabelPanel = new JPanel();    flagLabelPanel.setAlignmentX(Component.LEFT_ALIGNMENT);    flagLabelPanel.add(flagLabel);    JLabel flagValueLabel = new JLabel(flagValue);    flagValueLabel.setAlignmentX(Component.LEFT_ALIGNMENT);    flagValueLabel.setFont(new Font(Font.MONOSPACED, Font.BOLD, 20));    JTable table = new JTable(tableData, columnNames);    JScrollPane scrollPane = new JScrollPane(table);    table.setFillsViewportHeight(true);    scrollPane.setAlignmentX(Component.LEFT_ALIGNMENT);    Box box = Box.createVerticalBox();    box.add(flagValueLabel);    box.add(scrollPane);    box.setAlignmentX(Component.LEFT_ALIGNMENT);    GridBagConstraints gbc = new GridBagConstraints();    gbc.gridx = 0;    gbc.gridy = 0;    gbc.weighty = 0.05;    gbc.fill = GridBagConstraints.HORIZONTAL;    gbc.anchor = GridBagConstraints.PAGE_START;    panel.add(flagLabelPanel, gbc);    gbc.gridy = 2;    gbc.weighty = 0.9;    gbc.weightx = 1;    gbc.fill = GridBagConstraints.BOTH;    gbc.anchor = GridBagConstraints.BELOW_BASELINE;    panel.add(box, gbc);}
 JPanel pdfbox_f58_0()
{    return panel;}
 String pdfbox_f59_0()
{    return "Font flag";}
 String pdfbox_f60_0()
{    return "Flag value:" + fontDescriptor.getInt(COSName.FLAGS);}
 Object[][] pdfbox_f61_0()
{    PDFontDescriptor fontDesc = new PDFontDescriptor(fontDescriptor);    return new Object[][] { new Object[] { 1, "FixedPitch", fontDesc.isFixedPitch() }, new Object[] { 2, "Serif", fontDesc.isSerif() }, new Object[] { 3, "Symbolic", fontDesc.isSymbolic() }, new Object[] { 4, "Script", fontDesc.isScript() }, new Object[] { 6, "NonSymbolic", fontDesc.isNonSymbolic() }, new Object[] { 7, "Italic", fontDesc.isItalic() }, new Object[] { 17, "AllCap", fontDesc.isAllCap() }, new Object[] { 18, "SmallCap", fontDesc.isSmallCap() }, new Object[] { 19, "ForceBold", fontDesc.isForceBold() } };}
 String pdfbox_f62_0()
{    return "Panose classification";}
 String pdfbox_f63_0()
{    return "Panose byte :" + byteValue.toHexString();}
 Object[][] pdfbox_f64_0()
{    PDPanoseClassification pc = new PDPanose(bytes).getPanose();    return new Object[][] { { 2, "Family Kind", pc.getFamilyKind(), getFamilyKindValue(pc.getFamilyKind()) }, { 3, "Serif Style", pc.getSerifStyle(), getSerifStyleValue(pc.getSerifStyle()) }, { 4, "Weight", pc.getWeight(), getWeightValue(pc.getWeight()) }, { 5, "Proportion", pc.getProportion(), getProportionValue(pc.getProportion()) }, { 6, "Contrast", pc.getContrast(), getContrastValue(pc.getContrast()) }, { 7, "Stroke Variation", pc.getStrokeVariation(), getStrokeVariationValue(pc.getStrokeVariation()) }, { 8, "Arm Style", pc.getArmStyle(), getArmStyleValue(pc.getArmStyle()) }, { 9, "Letterform", pc.getLetterform(), getLetterformValue(pc.getLetterform()) }, { 10, "Midline", pc.getMidline(), getMidlineValue(pc.getMidline()) }, { 11, "X-height", pc.getXHeight(), getXHeightValue(pc.getXHeight()) } };}
 String[] pdfbox_f65_0()
{    return new String[] { "Byte Position", "Name", "Byte Value", "Value" };}
private String pdfbox_f66_0(int index)
{    return new String[] { "Any", "No Fit", "Latin Text", "Latin Hand Written", "Latin Decorative", "Latin Symbol" }[index];}
private String pdfbox_f67_0(int index)
{    return new String[] { "Any", "No Fit", "Cove", "Obtuse Cove", "Square Cove", "Obtuse Square Cove", "Square", "Thin", "Oval", "Exaggerated", "Triangle", "Normal Sans", "Obtuse Sans", "Perpendicular Sans", "Flared", "Rounded" }[index];}
private String pdfbox_f68_0(int index)
{    return new String[] { "Any", "No Fit", "Very Light", "Light", "Thin", "Book", "Medium", "Demi", "Bold", "Heavy", "Black", "Extra Black" }[index];}
private String pdfbox_f69_0(int index)
{    return new String[] { "Any", "No fit", "Old Style", "Modern", "Even Width", "Extended", "Condensed", "Very Extended", "Very Condensed", "Monospaced" }[index];}
private String pdfbox_f70_0(int index)
{    return new String[] { "Any", "No Fit", "None", "Very Low", "Low", "Medium Low", "Medium", "Medium High", "High", "Very High" }[index];}
private String pdfbox_f71_0(int index)
{    return new String[] { "Any", "No Fit", "No Variation", "Gradual/Diagonal", "Gradual/Transitional", "Gradual/Vertical", "Gradual/Horizontal", "Rapid/Vertical", "Rapid/Horizontal", "Instant/Vertical", "Instant/Horizontal" }[index];}
private String pdfbox_f72_0(int index)
{    return new String[] { "Any", "No Fit", "Straight Arms/Horizontal", "Straight Arms/Wedge", "Straight Arms/Vertical", "Straight Arms/Single Serif", "Straight Arms/Double Serif", "Non-Straight/Horizontal", "Non-Straight/Wedge", "Non-Straight/Vertical", "Non-Straight/Single Serif", "Non-Straight/Double Serif" }[index];}
private String pdfbox_f73_0(int index)
{    return new String[] { "Any", "No Fit", "Normal/Contact", "Normal/Weighted", "Normal/Boxed", "Normal/Flattened", "Normal/Rounded", "Normal/Off Center", "Normal/Square", "Oblique/Contact", "Oblique/Weighted", "Oblique/Boxed", "Oblique/Flattened", "Oblique/Rounded", "Oblique/Off Center", "Oblique/Square" }[index];}
private String pdfbox_f74_0(int index)
{    return new String[] { "Any", "No Fit", "Standard/Trimmed", "Standard/Pointed", "Standard/Serifed", "High/Trimmed", "High/Pointed", "High/Serifed", "Constant/Trimmed", "Constant/Pointed", "Constant/Serifed", "Low/Trimmed", "Low/Pointed", "Low/Serifed" }[index];}
private String pdfbox_f75_0(int index)
{    return new String[] { "Any", "No Fit", "Constant/Small", "Constant/Standard", "Constant/Large", "Ducking/Small", "Ducking/Standard", "Ducking/Large" }[index];}
public final byte[] pdfbox_f76_0(COSDictionary style)
{    if (style != null) {        COSString panose = (COSString) style.getDictionaryObject(COSName.PANOSE);        return panose.getBytes();    }    return null;}
 String pdfbox_f77_0()
{    return "Signature flag";}
 String pdfbox_f78_0()
{    return "Flag value: " + acroFormDictionary.getInt(COSName.SIG_FLAGS);}
 Object[][] pdfbox_f79_0()
{    PDAcroForm acroForm = new PDAcroForm(document, acroFormDictionary);    return new Object[][] { new Object[] { 1, "SignaturesExist", acroForm.isSignaturesExist() }, new Object[] { 2, "AppendOnly", acroForm.isAppendOnly() } };}
 double[] pdfbox_f80_0(Object[][] tableData, int glyphIndex)
{    double minY = 0;    double maxY = 0;    for (Object[] aTableData : tableData) {        GeneralPath path = (GeneralPath) aTableData[glyphIndex];        Rectangle2D bounds2D = path.getBounds2D();        if (bounds2D.isEmpty()) {            continue;        }        minY = Math.min(minY, bounds2D.getMinY());        maxY = Math.max(maxY, bounds2D.getMaxY());    }    return new double[] { minY, maxY };}
public JPanel pdfbox_f81_0()
{    if (fontPane != null) {        return fontPane.getPanel();    }    return null;}
private void pdfbox_f82_0(JPanel headerPanel, JTable table)
{    panel = new JPanel(new GridBagLayout());    panel.setPreferredSize(new Dimension(300, 500));    JScrollPane scrollPane = new JScrollPane(table);    table.setFillsViewportHeight(true);    scrollPane.setAlignmentX(Component.LEFT_ALIGNMENT);    GridBagConstraints gbc = new GridBagConstraints();    gbc.gridx = 0;    gbc.gridy = 0;    gbc.weighty = 0.05;    gbc.fill = GridBagConstraints.HORIZONTAL;    gbc.anchor = GridBagConstraints.PAGE_START;    panel.add(headerPanel, gbc);    gbc.gridy = 2;    gbc.weighty = 0.9;    gbc.weightx = 1;    gbc.fill = GridBagConstraints.BOTH;    gbc.anchor = GridBagConstraints.BELOW_BASELINE;    panel.add(scrollPane, gbc);}
private JTable pdfbox_f83_0(Object[][] tableData, String[] columnNames, double[] yBounds)
{    JTable table = new JTable(tableData, columnNames);    table.setRowHeight(40);    table.setDefaultRenderer(Object.class, new GlyphCellRenderer(yBounds));    return table;}
private JPanel pdfbox_f84_0(Map<String, String> attributes)
{    JPanel headerPanel = new JPanel(new GridBagLayout());    headerPanel.setBorder(BorderFactory.createEmptyBorder(10, 0, 5, 0));    if (attributes != null) {        Iterator<String> keys = attributes.keySet().iterator();        int row = 0;        while (keys.hasNext()) {            int fontSize = Integer.parseInt(PDFDebugger.configuration.getProperty("headerFontSize", Integer.toString(headerPanel.getFont().getSize())));            String key = keys.next();            JLabel encodingNameLabel = new JLabel(key + ": " + attributes.get(key));            encodingNameLabel.setFont(new Font(Font.DIALOG, Font.PLAIN, fontSize));            encodingNameLabel.setBorder(BorderFactory.createEmptyBorder(2, 0, 2, 0));            GridBagConstraints gbc = new GridBagConstraints();            gbc.gridx = 0;            gbc.gridy = row++;            gbc.weighty = 0.1;            gbc.anchor = GridBagConstraints.LINE_START;            headerPanel.add(encodingNameLabel, gbc);        }    }    return headerPanel;}
 JPanel pdfbox_f85_0()
{    return panel;}
public Component pdfbox_f86_0(JTable jTable, Object o, boolean b, boolean b1, int row, int col)
{    if (o instanceof GeneralPath) {        GeneralPath path = (GeneralPath) o;        Rectangle2D bounds2D = path.getBounds2D();        if (bounds2D.isEmpty()) {            JLabel label = new JLabel(SimpleFont.NO_GLYPH, SwingConstants.CENTER);            int fontSize = Integer.parseInt(PDFDebugger.configuration.getProperty("encodingFontSize", Integer.toString(label.getFont().getSize())));            label.setFont(new Font(Font.DIALOG, Font.PLAIN, fontSize));            label.setForeground(Color.GRAY);            return label;        }        Rectangle cellRect = jTable.getCellRect(row, col, false);        BufferedImage bim = renderGlyph(path, bounds2D, cellRect);        return new JLabel(new HighResolutionImageIcon(bim, (int) Math.ceil(bim.getWidth() / DEFAULT_TRANSFORM.getScaleX()), (int) Math.ceil(bim.getHeight() / DEFAULT_TRANSFORM.getScaleY())), SwingConstants.CENTER);    }    if (o instanceof BufferedImage) {        Rectangle cellRect = jTable.getCellRect(row, col, false);        BufferedImage glyphImage = (BufferedImage) o;        BufferedImage cellImage = new BufferedImage((int) (cellRect.getWidth() * DEFAULT_TRANSFORM.getScaleX()), (int) (cellRect.getHeight() * DEFAULT_TRANSFORM.getScaleY()), BufferedImage.TYPE_INT_RGB);        Graphics2D g = (Graphics2D) cellImage.getGraphics();        g.setBackground(Color.white);        g.clearRect(0, 0, cellImage.getWidth(), cellImage.getHeight());        double scale = 1 / (glyphImage.getHeight() / cellRect.getHeight());                g.translate((cellRect.getWidth() - glyphImage.getWidth() * scale) / 2 * DEFAULT_TRANSFORM.getScaleX(), 0);                g.scale(scale * DEFAULT_TRANSFORM.getScaleX(), scale * DEFAULT_TRANSFORM.getScaleY());        g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);        g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);        g.drawImage(glyphImage, 0, 0, null);        g.dispose();        return new JLabel(new HighResolutionImageIcon(cellImage, (int) Math.ceil(cellImage.getWidth() / DEFAULT_TRANSFORM.getScaleX()), (int) Math.ceil(cellImage.getHeight() / DEFAULT_TRANSFORM.getScaleY())));    }    if (o != null) {        JLabel label = new JLabel(o.toString(), SwingConstants.CENTER);        int fontSize = Integer.parseInt(PDFDebugger.configuration.getProperty("encodingFontSize", Integer.toString(label.getFont().getSize())));        label.setFont(new Font(Font.DIALOG, Font.PLAIN, fontSize));        if (SimpleFont.NO_GLYPH.equals(o) || ".notdef".equals(o)) {            label.setText(o.toString());            label.setForeground(Color.GRAY);        }        return label;    }    return new JLabel();}
private BufferedImage pdfbox_f87_0(GeneralPath path, Rectangle2D bounds2D, Rectangle cellRect)
{    BufferedImage bim = new BufferedImage((int) (cellRect.getWidth() * DEFAULT_TRANSFORM.getScaleX()), (int) (cellRect.getHeight() * DEFAULT_TRANSFORM.getScaleY()), BufferedImage.TYPE_INT_RGB);    Graphics2D g = (Graphics2D) bim.getGraphics();    g.setBackground(Color.white);    g.clearRect(0, 0, bim.getWidth(), bim.getHeight());    double scale = 1 / ((yBounds[1] - yBounds[0]) / cellRect.getHeight());        g.scale(1, -1);    g.translate(0, -bim.getHeight());        g.translate((cellRect.getWidth() - bounds2D.getWidth() * scale) / 2 * DEFAULT_TRANSFORM.getScaleX(), 0);        g.scale(scale * DEFAULT_TRANSFORM.getScaleX(), scale * DEFAULT_TRANSFORM.getScaleY());        g.translate(0, -yBounds[0]);    g.setColor(Color.black);    g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);    g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);    g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);    g.fill(path);    g.dispose();    return bim;}
private Object[][] pdfbox_f88_0(PDSimpleFont font) throws IOException
{    Object[][] glyphs = new Object[256][4];    for (int index = 0; index <= 255; index++) {        glyphs[index][0] = index;        if (font.getEncoding().contains(index) || font.toUnicode(index) != null) {            String glyphName = font.getEncoding().getName(index);            glyphs[index][1] = glyphName;            glyphs[index][2] = font.toUnicode(index);            if (font instanceof PDVectorFont) {                                glyphs[index][3] = ((PDVectorFont) font).getPath(index);            } else {                glyphs[index][3] = font.getPath(glyphName);            }            totalAvailableGlyph++;        } else {            glyphs[index][1] = NO_GLYPH;            glyphs[index][2] = NO_GLYPH;            glyphs[index][3] = font.getPath(".notdef");        }    }    return glyphs;}
private String pdfbox_f89_0(PDSimpleFont font)
{    return font.getEncoding().getClass().getSimpleName();}
public JPanel pdfbox_f90_0()
{    return view.getPanel();}
private Object[][] pdfbox_f91_0(PDCIDFont descendantFont, PDType0Font parentFont) throws IOException
{    int codes = 0;    for (int code = 0; code < 65535; ++code) {        if (descendantFont.hasGlyph(code)) {            ++codes;        }    }    Object[][] tab = new Object[codes][5];    int index = 0;    for (int code = 0; code < 65535; ++code) {        if (descendantFont.hasGlyph(code)) {            tab[index][0] = code;            tab[index][1] = descendantFont.codeToCID(code);            tab[index][2] = descendantFont.codeToGID(code);            tab[index][3] = parentFont.toUnicode(code);            GeneralPath path = descendantFont.getPath(code);            tab[index][4] = path;            if (!path.getBounds2D().isEmpty()) {                ++totalAvailableGlyph;            }            ++index;        }    }    return tab;}
private Object[][] pdfbox_f92_0(PDCIDFont font, PDFont parentFont) throws IOException
{    Object[][] cid2gid = null;    COSDictionary dict = font.getCOSObject();    COSBase map = dict.getDictionaryObject(COSName.CID_TO_GID_MAP);    if (map instanceof COSStream) {        COSStream stream = (COSStream) map;        InputStream is = stream.createInputStream();        byte[] mapAsBytes = IOUtils.toByteArray(is);        IOUtils.closeQuietly(is);        int numberOfInts = mapAsBytes.length / 2;        cid2gid = new Object[numberOfInts][4];        int offset = 0;        for (int index = 0; index < numberOfInts; index++) {            int gid = (mapAsBytes[offset] & 0xff) << 8 | mapAsBytes[offset + 1] & 0xff;            cid2gid[index][0] = index;            cid2gid[index][1] = gid;            if (gid != 0 && parentFont.toUnicode(index) != null) {                cid2gid[index][2] = parentFont.toUnicode(index);            }            GeneralPath path = font.getPath(index);            cid2gid[index][3] = path;            if (!path.getBounds2D().isEmpty()) {                ++totalAvailableGlyph;            }            offset += 2;        }    }    return cid2gid;}
public JPanel pdfbox_f93_0()
{    if (view != null) {        return view.getPanel();    }    JPanel panel = new JPanel();    panel.setPreferredSize(new Dimension(300, 500));    return panel;}
private void pdfbox_f94_0(PDType3Font font) throws IOException
{    double minX = 0;    double maxX = 0;    double minY = 0;    double maxY = 0;    for (int index = 0; index <= 255; ++index) {        PDType3CharProc charProc = font.getCharProc(index);        if (charProc == null) {            continue;        }        PDRectangle glyphBBox = charProc.getGlyphBBox();        if (glyphBBox == null) {            continue;        }        minX = Math.min(minX, glyphBBox.getLowerLeftX());        maxX = Math.max(maxX, glyphBBox.getUpperRightX());        minY = Math.min(minY, glyphBBox.getLowerLeftY());        maxY = Math.max(maxY, glyphBBox.getUpperRightY());    }    fontBBox = new PDRectangle((float) minX, (float) minY, (float) (maxX - minX), (float) (maxY - minY));    if (fontBBox.getWidth() <= 0 || fontBBox.getHeight() <= 0) {                BoundingBox boundingBox = font.getBoundingBox();        fontBBox = new PDRectangle(boundingBox.getLowerLeftX(), boundingBox.getLowerLeftY(), boundingBox.getWidth(), boundingBox.getHeight());    }}
private Object[][] pdfbox_f95_0(PDType3Font font) throws IOException
{    boolean isEmpty = fontBBox.toGeneralPath().getBounds2D().isEmpty();    Object[][] glyphs = new Object[256][4];            Map<String, BufferedImage> map = new HashMap<>();    for (int index = 0; index <= 255; index++) {        glyphs[index][0] = index;        if (font.getEncoding().contains(index) || font.toUnicode(index) != null) {            String name = font.getEncoding().getName(index);            glyphs[index][1] = name;            glyphs[index][2] = font.toUnicode(index);            if (isEmpty) {                glyphs[index][3] = NO_GLYPH;            } else if (map.containsKey(name)) {                glyphs[index][3] = map.get(name);            } else {                BufferedImage image = renderType3Glyph(font, index);                map.put(name, image);                glyphs[index][3] = image;            }            totalAvailableGlyph++;        } else {            glyphs[index][1] = NO_GLYPH;            glyphs[index][2] = NO_GLYPH;            glyphs[index][3] = NO_GLYPH;        }    }    return glyphs;}
private BufferedImage pdfbox_f96_0(PDType3Font font, int index) throws IOException
{    try (PDDocument doc = new PDDocument()) {        int scale = 1;        if (fontBBox.getWidth() < 72 || fontBBox.getHeight() < 72) {                        scale = (int) (72 / Math.min(fontBBox.getWidth(), fontBBox.getHeight()));        }        PDPage page = new PDPage(new PDRectangle(fontBBox.getWidth() * scale, fontBBox.getHeight() * scale));        page.setResources(resources);        try (PDPageContentStream cs = new PDPageContentStream(doc, page, AppendMode.APPEND, false)) {                                                                                    float scalingFactorX = font.getFontMatrix().getScalingFactorX();            float scalingFactorY = font.getFontMatrix().getScalingFactorY();            float translateX = scalingFactorX > 0 ? -fontBBox.getLowerLeftX() : fontBBox.getUpperRightX();            float translateY = scalingFactorY > 0 ? -fontBBox.getLowerLeftY() : fontBBox.getUpperRightY();            cs.transform(Matrix.getTranslateInstance(translateX * scale, translateY * scale));            cs.beginText();            cs.setFont(font, scale / Math.min(Math.abs(scalingFactorX), Math.abs(scalingFactorY)));                        cs.appendRawCommands(String.format("<%02X> Tj\n", index).getBytes(Charsets.ISO_8859_1));            cs.endText();        }        doc.addPage(page);                return new PDFRenderer(doc).renderImage(0);    }}
private String pdfbox_f97_0(PDSimpleFont font)
{    return font.getEncoding().getClass().getSimpleName();}
public JPanel pdfbox_f98_0()
{    return view.getPanel();}
protected void pdfbox_f99_0(Graphics g)
{    super.paintComponent(g);    Graphics2D g2d = (Graphics2D) g;    g2d.setRenderingHints(HexView.RENDERING_HINTS);    Rectangle bound = getVisibleRect();    int x = HexView.LINE_INSET;    int y = bound.y;    if (y == 0 || y % HexView.CHAR_HEIGHT != 0) {        y += HexView.CHAR_HEIGHT - y % HexView.CHAR_HEIGHT;    }    int firstLine = y / HexView.CHAR_HEIGHT;    for (int line = firstLine; line < firstLine + bound.getHeight() / HexView.CHAR_HEIGHT; line++) {        if (line > totalLine) {            break;        }        if (line == selectedLine) {            paintSelected(g, x, y);        } else {            g.drawString(String.format("%08X", (line - 1) * 16), x, y);        }        x = HexView.LINE_INSET;        y += HexView.CHAR_HEIGHT;    }}
private void pdfbox_f100_0(Graphics g, int x, int y)
{    g.setColor(HexView.SELECTED_COLOR);    g.setFont(HexView.BOLD_FONT);    g.drawString(String.format("%08X", selectedIndex), x, y);    g.setColor(Color.black);    g.setFont(HexView.FONT);}
 void pdfbox_f101_0(int index)
{    if (index != selectedIndex) {        selectedLine = HexModel.lineNumber(index);        selectedIndex = index;        repaint();    }}
protected void pdfbox_f102_0(Graphics g)
{    super.paintComponent(g);    Graphics2D g2d = (Graphics2D) g;    g2d.setRenderingHints(HexView.RENDERING_HINTS);    Rectangle bound = getVisibleRect();    int x = HexView.LINE_INSET;    int y = bound.y;    if (y == 0 || y % HexView.CHAR_HEIGHT != 0) {        y += HexView.CHAR_HEIGHT - y % HexView.CHAR_HEIGHT;    }    int firstLine = y / HexView.CHAR_HEIGHT;    for (int line = firstLine; line < firstLine + bound.getHeight() / HexView.CHAR_HEIGHT; line++) {        if (line > model.totalLine()) {            break;        }        if (line == selectedLine) {            paintInSelected(g, x, y);        } else {            char[] chars = model.getLineChars(line);            g.drawChars(chars, 0, chars.length, x, y);        }        x = HexView.LINE_INSET;        y += HexView.CHAR_HEIGHT;    }}
private void pdfbox_f103_0(Graphics g, int x, int y)
{    g.setFont(HexView.BOLD_FONT);    char[] content = model.getLineChars(selectedLine);    g.drawChars(content, 0, selectedIndexInLine - 0, x, y);    g.setColor(HexView.SELECTED_COLOR);    x += g.getFontMetrics().charsWidth(content, 0, selectedIndexInLine - 0);    g.drawChars(content, selectedIndexInLine, 1, x, y);    g.setColor(Color.black);    x += g.getFontMetrics().charWidth(content[selectedIndexInLine]);    g.drawChars(content, selectedIndexInLine + 1, (content.length - 1) - selectedIndexInLine, x, y);    g.setFont(HexView.FONT);}
public void pdfbox_f104_0(HexModelChangedEvent event)
{    repaint();}
 void pdfbox_f105_0(int index)
{    selectedLine = HexModel.lineNumber(index);    selectedIndexInLine = HexModel.elementIndexInLine(index);    repaint();}
public byte pdfbox_f106_0()
{    return newValue;}
public int pdfbox_f107_0()
{    return byteIndex;}
public void pdfbox_f108_0(ActionEvent actionEvent)
{    createJumpDialog().setVisible(true);}
private void pdfbox_f109_0()
{    setLayout(new GridBagLayout());    addressPane = new AddressPane(model.totalLine());    hexPane = new HexPane(model);    hexPane.addHexChangeListeners(model);    asciiPane = new ASCIIPane(model);    UpperPane upperPane = new UpperPane();    statusPane = new StatusPane();    model.addHexModelChangeListener(hexPane);    model.addHexModelChangeListener(asciiPane);    JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));    panel.setPreferredSize(new Dimension(HexView.TOTAL_WIDTH, HexView.CHAR_HEIGHT * (model.totalLine() + 1)));    panel.add(addressPane);    panel.add(hexPane);    panel.add(asciiPane);    JScrollPane scrollPane = getScrollPane();    scrollPane.setViewportView(panel);    GridBagConstraints gbc = new GridBagConstraints();    gbc.gridx = 0;    gbc.gridy = 0;    gbc.anchor = GridBagConstraints.FIRST_LINE_START;    gbc.fill = GridBagConstraints.BOTH;    gbc.weighty = 0.02;    add(upperPane, gbc);    gbc.anchor = GridBagConstraints.LINE_START;    gbc.gridy = 1;    gbc.weighty = 1;    gbc.weightx = 1;    gbc.fill = GridBagConstraints.BOTH;    add(scrollPane, gbc);    gbc.gridy = 2;    gbc.weightx = 0.1;    gbc.weighty = 0.0;    gbc.anchor = GridBagConstraints.LAST_LINE_START;    gbc.fill = GridBagConstraints.HORIZONTAL;    add(statusPane, gbc);    hexPane.addSelectionChangeListener(this);    KeyStroke jumpKeyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_G, InputEvent.CTRL_DOWN_MASK);    this.getInputMap(WHEN_IN_FOCUSED_WINDOW).put(jumpKeyStroke, "jump");    this.getActionMap().put("jump", jumpToIndex);}
private JScrollPane pdfbox_f110_0()
{    JScrollPane scrollPane = new JScrollPane();    scrollPane.setBorder(new LineBorder(Color.LIGHT_GRAY));    Action blankAction = new AbstractAction() {        @Override        public void actionPerformed(ActionEvent actionEvent) {        }    };    scrollPane.getActionMap().put("unitScrollDown", blankAction);    scrollPane.getActionMap().put("unitScrollLeft", blankAction);    scrollPane.getActionMap().put("unitScrollRight", blankAction);    scrollPane.getActionMap().put("unitScrollUp", blankAction);    JScrollBar verticalScrollBar = scrollPane.createVerticalScrollBar();    verticalScrollBar.setUnitIncrement(HexView.CHAR_HEIGHT);    verticalScrollBar.setBlockIncrement(HexView.CHAR_HEIGHT * 20);    verticalScrollBar.setValues(0, 1, 0, HexView.CHAR_HEIGHT * (model.totalLine() + 1));    scrollPane.setVerticalScrollBar(verticalScrollBar);    return scrollPane;}
public void pdfbox_f112_0(SelectEvent event)
{    int index = event.getHexIndex();    switch(event.getNavigation()) {        case SelectEvent.NEXT:            index += 1;            break;        case SelectEvent.PREVIOUS:            index -= 1;            break;        case SelectEvent.UP:            index -= 16;            break;        case SelectEvent.DOWN:            index += 16;            break;        default:            break;    }    if (index >= 0 && index <= model.size() - 1) {        hexPane.setSelected(index);        addressPane.setSelected(index);        asciiPane.setSelected(index);        statusPane.updateStatus(index);        selectedIndex = index;    }}
private JDialog pdfbox_f113_0()
{    final JDialog dialog = new JDialog(SwingUtilities.windowForComponent(this), "Jump to index");    dialog.setLocationRelativeTo(this);    final JLabel nowLabel = new JLabel("Present index: " + selectedIndex);    final JLabel label = new JLabel("Index to go:");    final JTextField field = new JFormattedTextField(NumberFormat.getIntegerInstance());    field.setPreferredSize(new Dimension(100, 20));    field.addActionListener(new AbstractAction() {        @Override        public void actionPerformed(ActionEvent actionEvent) {            int index = Integer.parseInt(field.getText(), 10);            if (index >= 0 && index <= model.size() - 1) {                selectionChanged(new SelectEvent(index, SelectEvent.IN));                dialog.dispose();            }        }    });    JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT));    panel.add(nowLabel);    JPanel inputPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));    inputPanel.add(label);    inputPanel.add(field);    JPanel contentPanel = new JPanel();    contentPanel.setLayout(new BoxLayout(contentPanel, BoxLayout.Y_AXIS));    contentPanel.add(panel);    contentPanel.add(inputPanel);    dialog.getContentPane().add(contentPanel);    dialog.pack();    return dialog;}
public void pdfbox_f114_0(ActionEvent actionEvent)
{    int index = Integer.parseInt(field.getText(), 10);    if (index >= 0 && index <= model.size() - 1) {        selectionChanged(new SelectEvent(index, SelectEvent.IN));        dialog.dispose();    }}
public byte pdfbox_f115_0(int index)
{    return data.get(index);}
public char[] pdfbox_f116_0(int lineNumber)
{    int start = (lineNumber - 1) * 16;    int length = data.size() - start < 16 ? data.size() - start : 16;    char[] chars = new char[length];    for (int i = 0; i < chars.length; i++) {        char c = Character.toChars(data.get(start) & 0XFF)[0];        if (!isAsciiPrintable(c)) {            c = '.';        }        chars[i] = c;        start++;    }    return chars;}
public byte[] pdfbox_f117_0(int lineNumber)
{    int index = (lineNumber - 1) * 16;    int length = Math.min(data.size() - index, 16);    byte[] bytes = new byte[length];    for (int i = 0; i < bytes.length; i++) {        bytes[i] = data.get(index);        index++;    }    return bytes;}
public int pdfbox_f118_0()
{    return data.size();}
public int pdfbox_f119_0()
{    return size() % 16 != 0 ? size() / 16 + 1 : size() / 16;}
public static int pdfbox_f120_0(int index)
{    int elementNo = index + 1;    return elementNo % 16 != 0 ? elementNo / 16 + 1 : elementNo / 16;}
public static int pdfbox_f121_0(int index)
{    return index % 16;}
private static boolean pdfbox_f122_0(char ch)
{    return ch >= 32 && ch < 127;}
public void pdfbox_f123_0(HexModelChangeListener listener)
{    modelChangeListeners.add(listener);}
public void pdfbox_f124_0(int index, byte value)
{    if (!data.get(index).equals(value)) {        data.set(index, value);        fireModelChanged(index);    }}
public void pdfbox_f125_0(HexChangedEvent event)
{    int index = event.getByteIndex();    if (index != -1 && getByte(index) != event.getNewValue()) {        data.set(index, event.getNewValue());    }    fireModelChanged(index);}
private void pdfbox_f126_0(int index)
{    modelChangeListeners.forEach(listener -> listener.hexModelChanged(new HexModelChangedEvent(index, HexModelChangedEvent.SINGLE_CHANGE)));}
 int pdfbox_f127_0()
{    return startIndex;}
 int pdfbox_f128_0()
{    return changeType;}
protected void pdfbox_f129_0(Graphics g)
{    super.paintComponent(g);    Graphics2D g2d = (Graphics2D) g;    g2d.setRenderingHints(HexView.RENDERING_HINTS);    Rectangle bound = getVisibleRect();    g.clearRect(bound.x, bound.y, bound.width, bound.height);    g.setColor(Color.WHITE);    g.fillRect(bound.x, bound.y, bound.width, bound.height);    int x = HexView.LINE_INSET;    int y = bound.y;    if (y == 0 || y % HexView.CHAR_HEIGHT != 0) {        y += HexView.CHAR_HEIGHT - y % HexView.CHAR_HEIGHT;    }    int firstLine = y / HexView.CHAR_HEIGHT;    g.setColor(Color.BLACK);    for (int i = firstLine; i <= firstLine + bound.height / HexView.CHAR_HEIGHT; i++) {        if (i > model.totalLine()) {            break;        }        byte[] bytes = model.getBytesForLine(i);        int index = (i - 1) * 16;        for (byte by : bytes) {            String str = String.format("%02X", by);            if (selectedIndex == index && state == SELECTED) {                g.drawString(getSelectedString(str).getIterator(), x, y);            } else if (selectedIndex == index && state == EDIT) {                paintInEdit(g, by, x, y);            } else {                g.drawString(str, x, y);            }            x += HexView.CHAR_WIDTH;            index++;        }        x = HexView.LINE_INSET;        y += HexView.CHAR_HEIGHT;    }}
private void pdfbox_f130_0(Graphics g, byte content, int x, int y)
{    g.setFont(HexView.BOLD_FONT);    g.setColor(Color.white);    char[] chars = getChars(content);    if (selectedChar == 0) {        g.setColor(HexView.SELECTED_COLOR);        g.drawChars(chars, 0, 1, x, y);        g.setColor(Color.black);        g.drawChars(chars, 1, 1, x + g.getFontMetrics().charWidth(chars[0]), y);    } else {        g.setColor(Color.black);        g.drawChars(chars, 0, 1, x, y);        g.setColor(HexView.SELECTED_COLOR);        g.drawChars(chars, 1, 1, x + g.getFontMetrics().charWidth(chars[0]), y);    }    setDefault(g);}
private AttributedString pdfbox_f131_0(String str)
{    AttributedString string = new AttributedString(str);    string.addAttribute(TextAttribute.FONT, HexView.BOLD_FONT);    string.addAttribute(TextAttribute.FOREGROUND, HexView.SELECTED_COLOR);    return string;}
private void pdfbox_f132_0(Graphics g)
{    g.setColor(Color.black);    g.setFont(this.getFont());}
private int pdfbox_f133_0(Point point)
{    if (point.x <= 20 || point.x >= (16 * HexView.CHAR_WIDTH) + 20) {        return -1;    }    int y = point.y;    int lineNumber = (y + (HexView.CHAR_HEIGHT - (y % HexView.CHAR_HEIGHT))) / HexView.CHAR_HEIGHT;    int x = point.x - 20;    int elementNumber = x / HexView.CHAR_WIDTH;    return (lineNumber - 1) * 16 + elementNumber;}
private Point pdfbox_f134_0(int index)
{    int x = HexView.LINE_INSET + HexModel.elementIndexInLine(index) * HexView.CHAR_WIDTH;    int y = HexModel.lineNumber(index) * HexView.CHAR_HEIGHT;    return new Point(x, y);}
private void pdfbox_f135_0(int index)
{    state = SELECTED;    selectedChar = 0;    Point point = getPointForIndex(index);        if (index % 16 == 0) {        scrollRectToVisible(new Rectangle(0, HexModel.lineNumber(index) * HexView.CHAR_HEIGHT, 1, 1));    } else if (!getVisibleRect().intersects(point.x, point.y, HexView.CHAR_WIDTH, HexView.CHAR_HEIGHT)) {        scrollRectToVisible(new Rectangle(point.x, point.y, HexView.CHAR_WIDTH, HexView.CHAR_HEIGHT));    }    selectedIndex = index;    repaint();    requestFocusInWindow();}
private void pdfbox_f136_0(SelectEvent event)
{    selectionChangeListeners.forEach(listener -> listener.selectionChanged(event));}
private void pdfbox_f137_0(byte value, int index)
{    hexChangeListeners.forEach(listener -> listener.hexChanged(new HexChangedEvent(value, index)));}
public void pdfbox_f138_0(SelectionChangeListener listener)
{    selectionChangeListeners.add(listener);}
public void pdfbox_f139_0(HexChangeListener listener)
{    hexChangeListeners.add(listener);}
public void pdfbox_f140_0(KeyEvent keyEvent)
{    if (selectedIndex != -1) {        char c = keyEvent.getKeyChar();        if (isHexChar(c)) {            byte previousByte = model.getByte(selectedIndex);            char[] chars = getChars(previousByte);            chars[selectedChar] = c;            byte editByte = getByte(chars);            if (selectedChar == 0) {                state = EDIT;                selectedChar = 1;                fireHexValueChanged(editByte, selectedIndex);            } else {                fireHexValueChanged(editByte, selectedIndex);                fireSelectionChanged(new SelectEvent(selectedIndex, SelectEvent.NEXT));            }        }    }}
public void pdfbox_f141_0(KeyEvent keyEvent)
{    if (state == SELECTED || state == EDIT) {        switch(keyEvent.getKeyCode()) {            case 37:                if (state == EDIT && selectedChar == 1) {                    selectedChar = 0;                    repaint();                } else {                    fireSelectionChanged(new SelectEvent(selectedIndex, SelectEvent.PREVIOUS));                }                break;            case 39:                fireSelectionChanged(new SelectEvent(selectedIndex, SelectEvent.NEXT));                break;            case 38:                fireSelectionChanged(new SelectEvent(selectedIndex, SelectEvent.UP));                break;            case 40:                fireSelectionChanged(new SelectEvent(selectedIndex, SelectEvent.DOWN));                break;            default:                break;        }    }}
public void pdfbox_f143_0(MouseEvent mouseEvent)
{    int index = getIndexForPoint(mouseEvent.getPoint());    if (index == -1) {        fireSelectionChanged(new SelectEvent(-1, SelectEvent.NONE));        return;    }    fireSelectionChanged(new SelectEvent(index, SelectEvent.IN));}
private static boolean pdfbox_f150_0(char c)
{    return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');}
private char[] pdfbox_f151_0(byte b)
{    return String.format("%02X", b & 0XFF).toCharArray();}
private byte pdfbox_f152_0(char[] chars)
{    return (byte) (Integer.parseInt(new String(chars), 16) & 0XFF);}
public void pdfbox_f153_0(int index)
{    if (index != selectedIndex) {        putInSelected(index);    }}
public void pdfbox_f154_0(HexModelChangedEvent event)
{    repaint();}
public void pdfbox_f155_0(byte[] bytes)
{    if (mainPane.getComponentCount() > 0) {        mainPane.removeAll();    }    HexModel model = new HexModel(bytes);    mainPane.add(new HexEditor(model));    mainPane.validate();}
public JComponent pdfbox_f156_0()
{    return mainPane;}
public int pdfbox_f157_0()
{    return hexIndex;}
public String pdfbox_f158_0()
{    return navigation;}
private void pdfbox_f159_0()
{    JLabel line = new JLabel("Line:");    JLabel column = new JLabel("Column:");    lineLabel = new JLabel("");    lineLabel.setPreferredSize(new Dimension(100, HEIGHT));    colLabel = new JLabel("");    colLabel.setPreferredSize(new Dimension(100, HEIGHT));    JLabel index = new JLabel("Index:");    indexLabel = new JLabel("");    add(line);    add(lineLabel);    add(column);    add(colLabel);    add(index);    add(indexLabel);}
 void pdfbox_f160_0(int index)
{    lineLabel.setText(String.valueOf(HexModel.lineNumber(index)));    colLabel.setText(String.valueOf(HexModel.elementIndexInLine(index) + 1));    indexLabel.setText(String.valueOf(index));}
protected void pdfbox_f161_0(Graphics g)
{    super.paintComponent(g);    Graphics2D g2d = (Graphics2D) g;    g2d.setRenderingHints(HexView.RENDERING_HINTS);    int x = HexView.LINE_INSET - 2;    int y = 16;    g.drawString("Offset", x, y);    x += HexView.ADDRESS_PANE_WIDTH + 2;    for (int i = 0; i <= 15; i++) {        g.drawString(String.format("%02X", i), x, y);        x += HexView.CHAR_WIDTH;    }    x += HexView.LINE_INSET * 2;    g.drawString("Text", x, y);}
protected void pdfbox_f162_0(Matrix textRenderingMatrix, PDFont font, int code, String unicode, Vector displacement) throws IOException
{        super.showGlyph(textRenderingMatrix, font, code, unicode, displacement);    if (showGlyphBounds) {        Shape bbox;                if (font instanceof PDType3Font) {                        return;        } else {            AffineTransform at = textRenderingMatrix.createAffineTransform();            at.concatenate(font.getFontMatrix().createAffineTransform());                        PDVectorFont vectorFont = (PDVectorFont) font;            GeneralPath path = vectorFont.getNormalizedPath(code);            if (path == null) {                return;            }                        if (!font.isEmbedded() && !font.isVertical() && !font.isStandard14() && font.hasExplicitWidth(code)) {                float fontWidth = font.getWidthFromFont(code);                if (                fontWidth > 0 && Math.abs(fontWidth - displacement.getX() * 1000) > 0.0001) {                    float pdfWidth = displacement.getX() * 1000;                    at.scale(pdfWidth / fontWidth, 1);                }            }            Shape glyph = at.createTransformedShape(path);            bbox = glyph.getBounds2D();        }                Graphics2D graphics = getGraphics();        Color color = graphics.getColor();        Stroke stroke = graphics.getStroke();        Shape clip = graphics.getClip();                graphics.setClip(graphics.getDeviceConfiguration().getBounds());        graphics.setColor(Color.cyan);        graphics.setStroke(new BasicStroke(.5f));        graphics.draw(bbox);                graphics.setStroke(stroke);        graphics.setColor(color);        graphics.setClip(clip);    }}
protected PageDrawer pdfbox_f163_0(PageDrawerParameters parameters) throws IOException
{    return new DebugPageDrawer(parameters, this.showGlyphBounds);}
public void pdfbox_f164_0(PDDocument document, PDPage page, int pageIndex, float scale) throws IOException
{        PDRectangle cropBox = page.getCropBox();    this.flip = new AffineTransform();    flip.translate(0, cropBox.getHeight());    flip.scale(1, -1);        transform(graphics, page, scale);        graphics.setStroke(new BasicStroke(0.5f));    setStartPage(pageIndex + 1);    setEndPage(pageIndex + 1);    Writer dummy = new OutputStreamWriter(new ByteArrayOutputStream());    writeText(document, dummy);    if (DebugTextOverlay.this.showTextStripperBeads) {                List<PDThreadBead> pageArticles = page.getThreadBeads();        for (PDThreadBead bead : pageArticles) {            if (bead == null) {                continue;            }            PDRectangle r = bead.getRectangle();            GeneralPath p = r.transform(Matrix.getTranslateInstance(-cropBox.getLowerLeftX(), cropBox.getLowerLeftY()));            Shape s = flip.createTransformedShape(p);            graphics.setColor(Color.green);            graphics.draw(s);        }    }}
private void pdfbox_f165_0(Graphics2D graphics, PDPage page, float scale)
{    graphics.scale(scale, scale);    int rotationAngle = page.getRotation();    PDRectangle cropBox = page.getCropBox();    if (rotationAngle != 0) {        float translateX = 0;        float translateY = 0;        switch(rotationAngle) {            case 90:                translateX = cropBox.getHeight();                break;            case 270:                translateY = cropBox.getWidth();                break;            case 180:                translateX = cropBox.getWidth();                translateY = cropBox.getHeight();                break;            default:                break;        }        graphics.translate(translateX, translateY);        graphics.rotate((float) Math.toRadians(rotationAngle));    }}
protected void pdfbox_f166_0(String string, List<TextPosition> textPositions) throws IOException
{    for (TextPosition text : textPositions) {        if (DebugTextOverlay.this.showTextStripper) {            AffineTransform at = (AffineTransform) flip.clone();            at.concatenate(text.getTextMatrix().createAffineTransform());                                                Rectangle2D.Float rect = new Rectangle2D.Float(0, 0, text.getWidthDirAdj() / text.getTextMatrix().getScalingFactorX(), text.getHeightDir() / text.getTextMatrix().getScalingFactorY());            graphics.setColor(Color.red);            graphics.draw(at.createTransformedShape(rect));        }        if (DebugTextOverlay.this.showFontBBox) {                                                PDFont font = text.getFont();            BoundingBox bbox = font.getBoundingBox();                                    float xadvance = font.getWidth(text.getCharacterCodes()[0]);            Rectangle2D rect = new Rectangle2D.Float(0, bbox.getLowerLeftY(), xadvance, bbox.getHeight());                                    AffineTransform at = (AffineTransform) flip.clone();            at.concatenate(text.getTextMatrix().createAffineTransform());            if (font instanceof PDType3Font) {                                at.concatenate(font.getFontMatrix().createAffineTransform());            } else {                                at.scale(1 / 1000f, 1 / 1000f);            }            graphics.setColor(Color.blue);            graphics.draw(at.createTransformedShape(rect));        }    }}
public void pdfbox_f167_0(Graphics2D graphics) throws IOException
{    DebugTextStripper stripper = new DebugTextStripper(graphics);    stripper.stripPage(this.document, this.document.getPage(pageIndex), this.pageIndex, this.scale);}
private void pdfbox_f168_1()
{    try {        collectFieldLocations();        collectLinkLocations();    } catch (IOException ex) {            }}
private void pdfbox_f169_0() throws IOException
{    for (PDAnnotation annotation : page.getAnnotations()) {        if (annotation instanceof PDAnnotationLink) {            collectLinkLocation((PDAnnotationLink) annotation);        }    }}
private void pdfbox_f170_0(PDAnnotationLink linkAnnotation) throws IOException
{    PDAction action = linkAnnotation.getAction();    if (action instanceof PDActionURI) {        PDActionURI uriAction = (PDActionURI) action;        rectMap.put(linkAnnotation.getRectangle(), "URI: " + uriAction.getURI());        return;    }    PDDestination destination;    if (action instanceof PDActionGoTo) {        PDActionGoTo goToAction = (PDActionGoTo) action;        destination = goToAction.getDestination();    } else {        destination = linkAnnotation.getDestination();    }    if (destination instanceof PDNamedDestination) {        destination = document.getDocumentCatalog().findNamedDestinationPage((PDNamedDestination) destination);    }    if (destination instanceof PDPageDestination) {        PDPageDestination pageDestination = (PDPageDestination) destination;        int pageNum = pageDestination.retrievePageNumber();        if (pageNum != -1) {            rectMap.put(linkAnnotation.getRectangle(), "Page destination: " + (pageNum + 1));        }    }}
private void pdfbox_f171_0() throws IOException
{    PDAcroForm acroForm = document.getDocumentCatalog().getAcroForm();    if (acroForm == null) {        return;    }    Set<COSDictionary> dictionarySet = new HashSet<>();    for (PDAnnotation annotation : page.getAnnotations()) {        dictionarySet.add(annotation.getCOSObject());    }    for (PDField field : acroForm.getFieldTree()) {        for (PDAnnotationWidget widget : field.getWidgets()) {                        if (dictionarySet.contains(widget.getCOSObject())) {                rectMap.put(widget.getRectangle(), "Field name: " + field.getFullyQualifiedName());            }        }    }}
private void pdfbox_f172_0()
{    panel = new JPanel();    panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));    String pageLabelText = pageIndex < 0 ? "Page number not found" : "Page " + (pageIndex + 1);        String lbl = PDFDebugger.getPageLabel(document, pageIndex);    if (lbl != null) {        pageLabelText += " - " + lbl;    }    JLabel pageLabel = new JLabel(pageLabelText);    pageLabel.setAlignmentX(Component.CENTER_ALIGNMENT);    pageLabel.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 20));    pageLabel.setBorder(BorderFactory.createEmptyBorder(5, 0, 10, 0));    panel.add(pageLabel);    label = new JLabel();    label.addMouseMotionListener(this);    label.addMouseListener(this);    label.setAlignmentX(Component.CENTER_ALIGNMENT);    panel.add(label);    panel.addAncestorListener(this);    zoomMenu = ZoomMenu.getInstance();    zoomMenu.changeZoomSelection(zoomMenu.getPageZoomScale());    startRendering();}
public Component pdfbox_f173_0()
{    return panel;}
public void pdfbox_f174_0(ActionEvent actionEvent)
{    String actionCommand = actionEvent.getActionCommand();    if (ZoomMenu.isZoomMenu(actionCommand) || RotationMenu.isRotationMenu(actionCommand) || ViewMenu.isRenderingOptions(actionCommand)) {        startRendering();    } else if (ViewMenu.isExtractText(actionEvent)) {        startExtracting();    }}
private void pdfbox_f175_1()
{    TextDialog textDialog = TextDialog.instance();    textDialog.setSize(800, 400);    textDialog.setVisible(true);    textDialog.setLocation(getPanel().getLocationOnScreen().x + getPanel().getWidth() / 2, getPanel().getLocationOnScreen().y + getPanel().getHeight() / 2);    try {        PDFTextStripper stripper = new PDFTextStripper();        stripper.setStartPage(pageIndex + 1);        stripper.setEndPage(pageIndex + 1);        textDialog.setText(stripper.getText(document));    } catch (IOException ex) {            }}
private void pdfbox_f176_0()
{            new RenderWorker(ZoomMenu.getZoomScale(), RotationMenu.getRotationDegrees(), ViewMenu.isShowTextStripper(), ViewMenu.isShowTextStripperBeads(), ViewMenu.isShowFontBBox(), ViewMenu.isShowGlyphBounds(), ViewMenu.isAllowSubsampling()).execute();    zoomMenu.setPageZoomScale(ZoomMenu.getZoomScale());}
public void pdfbox_f177_0(AncestorEvent ancestorEvent)
{    zoomMenu.addMenuListeners(this);    zoomMenu.setEnableMenu(true);    rotationMenu = RotationMenu.getInstance();    rotationMenu.addMenuListeners(this);    rotationMenu.setEnableMenu(true);    viewMenu = ViewMenu.getInstance(null);    JMenu menuInstance = viewMenu.getMenu();    int itemCount = menuInstance.getItemCount();    for (int i = 0; i < itemCount; i++) {        JMenuItem item = menuInstance.getItem(i);        if (item != null) {            item.setEnabled(true);            item.addActionListener(this);        }    }}
public void pdfbox_f178_0(AncestorEvent ancestorEvent)
{    boolean isFirstEntrySkipped = false;    zoomMenu.setEnableMenu(false);    rotationMenu.setEnableMenu(false);    JMenu menuInstance = viewMenu.getMenu();    int itemCount = menuInstance.getItemCount();    for (int i = 0; i < itemCount; i++) {        JMenuItem item = menuInstance.getItem(i);                if (item != null) {            if (!isFirstEntrySkipped) {                isFirstEntrySkipped = true;            } else {                item.setEnabled(false);                item.removeActionListener(this);            }        }    }}
public void pdfbox_f181_0(MouseEvent e)
{    float height = page.getCropBox().getHeight();    float width = page.getCropBox().getWidth();    float offsetX = page.getCropBox().getLowerLeftX();    float offsetY = page.getCropBox().getLowerLeftY();    float zoomScale = zoomMenu.getPageZoomScale();    float x = e.getX() / zoomScale * (float) defaultTransform.getScaleX();    float y = e.getY() / zoomScale * (float) defaultTransform.getScaleY();    int x1;    int y1;    switch((RotationMenu.getRotationDegrees() + page.getRotation()) % 360) {        case 90:            x1 = (int) (y + offsetX);            y1 = (int) (x + offsetY);            break;        case 180:            x1 = (int) (width - x + offsetX);            y1 = (int) (y - offsetY);            break;        case 270:            x1 = (int) (width - y + offsetX);            y1 = (int) (height - x + offsetY);            break;        case 0:        default:            x1 = (int) (x + offsetX);            y1 = (int) (height - y + offsetY);            break;    }    String text = "x: " + x1 + ", y: " + y1;        for (Entry<PDRectangle, String> entry : rectMap.entrySet()) {        if (entry.getKey().contains(x1, y1)) {            text += ", " + rectMap.get(entry.getKey());            break;        }    }    statuslabel.setText(text);}
public void pdfbox_f186_0(MouseEvent e)
{    statuslabel.setText(labelText);}
protected BufferedImage pdfbox_f187_0() throws IOException
{    label.setIcon(null);    labelText = "Rendering...";    label.setText(labelText);    statuslabel.setText(labelText);    PDFRenderer renderer = new DebugPDFRenderer(document, this.showGlyphBounds);    renderer.setSubsamplingAllowed(allowSubsampling);    long t0 = System.nanoTime();    BufferedImage image = renderer.renderImage(pageIndex, scale);    long t1 = System.nanoTime();    long ms = TimeUnit.MILLISECONDS.convert(t1 - t0, TimeUnit.NANOSECONDS);    labelText = "Rendered in " + ms + " ms";    statuslabel.setText(labelText);        DebugTextOverlay debugText = new DebugTextOverlay(document, pageIndex, scale, showTextStripper, showTextStripperBeads, showFontBBox);    Graphics2D g = image.createGraphics();    debugText.renderTo(g);    g.dispose();    return ImageUtil.getRotatedImage(image, rotation);}
protected void pdfbox_f188_0()
{    try {        BufferedImage image = get();                                                label.setSize((int) Math.ceil(image.getWidth() / defaultTransform.getScaleX()), (int) Math.ceil(image.getHeight() / defaultTransform.getScaleY()));        label.setIcon(new HighResolutionImageIcon(image, label.getWidth(), label.getHeight()));        label.setText(null);    } catch (InterruptedException | ExecutionException e) {        label.setText(e.getMessage());        throw new RuntimeException(e);    }}
public static void pdfbox_f189_0(String[] args) throws Exception
{    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());    if (System.getProperty("apple.laf.useScreenMenuBar") == null) {        System.setProperty("apple.laf.useScreenMenuBar", "true");    }        Thread.setDefaultUncaughtExceptionHandler((thread, throwable) -> new ErrorDialog(throwable).setVisible(true));        String filename = null;    @SuppressWarnings({ "squid:S2068" })    String password = "";    boolean viewPages = true;    for (int i = 0; i < args.length; i++) {        switch(args[i]) {            case PASSWORD:                i++;                if (i >= args.length) {                    usage();                }                password = args[i];                break;            case VIEW_STRUCTURE:                viewPages = false;                break;            default:                filename = args[i];                break;        }    }    final PDFDebugger viewer = new PDFDebugger(viewPages);                    LogDialog.init(viewer, viewer.statusBar.getLogLabel());    System.setProperty("org.apache.commons.logging.Log", "org.apache.pdfbox.debugger.ui.DebugLog");    TextDialog.init(viewer);        if (PDType1Font.COURIER.isStandard14()) {                PDDeviceCMYK.INSTANCE.toRGB(new float[] { 0, 0, 0, 0 });        PDDeviceRGB.INSTANCE.toRGB(new float[] { 0, 0, 0 });        IIORegistry.getDefaultInstance();        FilterFactory.INSTANCE.getFilter(COSName.FLATE_DECODE);    }    if (filename != null) {        File file = new File(filename);        if (file.exists()) {            viewer.readPDFFile(filename, password);        }    }    viewer.setVisible(true);}
public boolean pdfbox_f190_0()
{    return this.isPageMode;}
public void pdfbox_f191_0(boolean isPageMode)
{    this.isPageMode = isPageMode;}
public boolean pdfbox_f192_0()
{    return document != null;}
private static void pdfbox_f193_0()
{    String message = "Usage: java -jar pdfbox-app-x.y.z.jar PDFDebugger [options] <inputfile>\n" + "\nOptions:\n" + "  -password <password> : Password to decrypt the document\n" + "  -viewstructure       : activate structure mode on startup\n" + "  <inputfile>          : The PDF document to be loaded\n";    System.err.println(message);    System.exit(1);}
private void pdfbox_f194_0()
{    File file = new File("config.properties");    if (file.exists()) {        try {            try (InputStream is = new FileInputStream(file)) {                configuration.load(is);            }        } catch (IOException e) {            throw new RuntimeException(e);        }    }}
private void pdfbox_f195_0()
{    jSplitPane1 = new javax.swing.JSplitPane();    jScrollPane1 = new JScrollPane();    tree = new Tree();    jScrollPane2 = new JScrollPane();    jTextPane1 = new javax.swing.JTextPane();    tree.setCellRenderer(new PDFTreeCellRenderer());    tree.setModel(null);    setTitle("Apache PDFBox Debugger");    addWindowListener(new java.awt.event.WindowAdapter() {        @Override        public void windowOpened(WindowEvent windowEvent) {            tree.requestFocusInWindow();            super.windowOpened(windowEvent);        }        @Override        public void windowClosing(WindowEvent evt) {            exitForm(evt);        }    });    windowPrefs = new WindowPrefs(this.getClass());    jScrollPane1.setBorder(new BevelBorder(BevelBorder.RAISED));    jSplitPane1.setDividerLocation(windowPrefs.getDividerLocation());    tree.addTreeSelectionListener(this::jTree1ValueChanged);    jScrollPane1.setViewportView(tree);    jSplitPane1.setRightComponent(jScrollPane2);    jSplitPane1.setDividerSize(3);    jScrollPane2.setViewportView(jTextPane1);    jSplitPane1.setLeftComponent(jScrollPane1);    JScrollPane documentScroller = new JScrollPane();    documentScroller.setViewportView(documentPanel);    statusPane = new TreeStatusPane(tree);    statusPane.getPanel().setBorder(new BevelBorder(BevelBorder.RAISED));    statusPane.getPanel().setPreferredSize(new Dimension(300, 25));    getContentPane().add(statusPane.getPanel(), BorderLayout.PAGE_START);    getContentPane().add(jSplitPane1, BorderLayout.CENTER);    statusBar = new ReaderBottomPanel();    getContentPane().add(statusBar, BorderLayout.SOUTH);        JMenuBar menuBar = new JMenuBar();    menuBar.add(createFileMenu());    menuBar.add(createEditMenu());    ViewMenu viewMenu = ViewMenu.getInstance(this);    menuBar.add(viewMenu.getMenu());    setJMenuBar(menuBar);    setExtendedState(windowPrefs.getExtendedState());    setBounds(windowPrefs.getBounds());        setTransferHandler(new TransferHandler() {        @Override        public boolean canImport(TransferSupport transferSupport) {            return transferSupport.isDataFlavorSupported(DataFlavor.javaFileListFlavor);        }        @Override        @SuppressWarnings("unchecked")        public boolean importData(TransferSupport transferSupport) {            try {                Transferable transferable = transferSupport.getTransferable();                List<File> files = (List<File>) transferable.getTransferData(DataFlavor.javaFileListFlavor);                readPDFFile(files.get(0), "");                return true;            } catch (IOException e) {                new ErrorDialog(e).setVisible(true);                return true;            } catch (UnsupportedFlavorException e) {                throw new RuntimeException(e);            }        }    });    initGlobalEventHandlers();}
public void pdfbox_f196_0(WindowEvent windowEvent)
{    tree.requestFocusInWindow();    super.windowOpened(windowEvent);}
public void pdfbox_f197_0(WindowEvent evt)
{    exitForm(evt);}
public boolean pdfbox_f198_0(TransferSupport transferSupport)
{    return transferSupport.isDataFlavorSupported(DataFlavor.javaFileListFlavor);}
public boolean pdfbox_f199_0(TransferSupport transferSupport)
{    try {        Transferable transferable = transferSupport.getTransferable();        List<File> files = (List<File>) transferable.getTransferData(DataFlavor.javaFileListFlavor);        readPDFFile(files.get(0), "");        return true;    } catch (IOException e) {        new ErrorDialog(e).setVisible(true);        return true;    } catch (UnsupportedFlavorException e) {        throw new RuntimeException(e);    }}
protected void pdfbox_f200_0()
{        if (IS_MAC_OS) {        try {            Method osxOpenFiles = getClass().getDeclaredMethod("osxOpenFiles", String.class);            osxOpenFiles.setAccessible(true);            OSXAdapter.setFileHandler(this, osxOpenFiles);            Method osxQuit = getClass().getDeclaredMethod("osxQuit");            osxQuit.setAccessible(true);            OSXAdapter.setQuitHandler(this, osxQuit);        } catch (NoSuchMethodException e) {            throw new RuntimeException(e);        }    }}
private JMenu pdfbox_f201_0()
{    JMenuItem openMenuItem = new JMenuItem("Open...");    openMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, SHORCUT_KEY_MASK));    openMenuItem.addActionListener(this::openMenuItemActionPerformed);    JMenu fileMenu = new JMenu("File");    fileMenu.add(openMenuItem);    fileMenu.setMnemonic('F');    JMenuItem openUrlMenuItem = new JMenuItem("Open URL...");    openUrlMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_U, SHORCUT_KEY_MASK));    openUrlMenuItem.addActionListener(evt -> {        String urlString = JOptionPane.showInputDialog("Enter an URL");        if (urlString == null || urlString.isEmpty()) {            return;        }        try {            readPDFurl(urlString, "");        } catch (IOException e) {            throw new RuntimeException(e);        }    });    fileMenu.add(openUrlMenuItem);    reopenMenuItem = new JMenuItem("Reopen");    reopenMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_R, SHORCUT_KEY_MASK));    reopenMenuItem.addActionListener(evt -> {        try {            if (currentFilePath.startsWith("http")) {                readPDFurl(currentFilePath, "");            } else {                readPDFFile(currentFilePath, "");            }        } catch (IOException e) {            new ErrorDialog(e).setVisible(true);        }    });    reopenMenuItem.setEnabled(false);    fileMenu.add(reopenMenuItem);    try {        recentFiles = new RecentFiles(this.getClass(), 5);    } catch (Exception e) {        throw new RuntimeException(e);    }    recentFilesMenu = new JMenu("Open Recent");    recentFilesMenu.setEnabled(false);    addRecentFileItems();    fileMenu.add(recentFilesMenu);    printMenuItem = new JMenuItem("Print");    printMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P, SHORCUT_KEY_MASK));    printMenuItem.setEnabled(false);    printMenuItem.addActionListener(this::printMenuItemActionPerformed);    fileMenu.addSeparator();    fileMenu.add(printMenuItem);    JMenuItem exitMenuItem = new JMenuItem("Exit");    exitMenuItem.setAccelerator(KeyStroke.getKeyStroke("alt F4"));    exitMenuItem.addActionListener(this::exitMenuItemActionPerformed);    if (!IS_MAC_OS) {        fileMenu.addSeparator();        fileMenu.add(exitMenuItem);    }    return fileMenu;}
private JMenu pdfbox_f202_0()
{    JMenu editMenu = new JMenu("Edit");    editMenu.setMnemonic('E');    JMenuItem cutMenuItem = new JMenuItem("Cut");    cutMenuItem.setEnabled(false);    editMenu.add(cutMenuItem);    JMenuItem copyMenuItem = new JMenuItem("Copy");    copyMenuItem.setEnabled(false);    editMenu.add(copyMenuItem);    JMenuItem pasteMenuItem = new JMenuItem("Paste");    pasteMenuItem.setEnabled(false);    editMenu.add(pasteMenuItem);    JMenuItem deleteMenuItem = new JMenuItem("Delete");    deleteMenuItem.setEnabled(false);    editMenu.add(deleteMenuItem);    editMenu.addSeparator();    editMenu.add(createFindMenu());    return editMenu;}
private JMenu pdfbox_f203_0()
{    findMenu = new JMenu("Find");    findMenu.setEnabled(false);    findMenuItem = new JMenuItem("Find...");    findMenuItem.setActionCommand("find");    findMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F, SHORCUT_KEY_MASK));    findNextMenuItem = new JMenuItem("Find Next");    if (IS_MAC_OS) {        findNextMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_G, SHORCUT_KEY_MASK));    } else {        findNextMenuItem.setAccelerator(KeyStroke.getKeyStroke("F3"));    }    findPreviousMenuItem = new JMenuItem("Find Previous");    if (IS_MAC_OS) {        findPreviousMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_G, SHORCUT_KEY_MASK | InputEvent.SHIFT_DOWN_MASK));    } else {        findPreviousMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F3, InputEvent.SHIFT_DOWN_MASK));    }    findMenu.add(findMenuItem);    findMenu.add(findNextMenuItem);    findMenu.add(findPreviousMenuItem);    return findMenu;}
public JMenu pdfbox_f204_0()
{    return findMenu;}
public JMenuItem pdfbox_f205_0()
{    return findMenuItem;}
public JMenuItem pdfbox_f206_0()
{    return findNextMenuItem;}
public JMenuItem pdfbox_f207_0()
{    return findPreviousMenuItem;}
private void pdfbox_f208_0(String filename)
{    try {        readPDFFile(filename, "");    } catch (IOException e) {        throw new RuntimeException(e);    }}
private void pdfbox_f209_0()
{    exitMenuItemActionPerformed(null);}
private void pdfbox_f210_0(ActionEvent evt)
{    try {        if (IS_MAC_OS) {            FileDialog openDialog = new FileDialog(this, "Open");            openDialog.setFilenameFilter((dir, name) -> name.toLowerCase().endsWith(".pdf"));            openDialog.setVisible(true);            if (openDialog.getFile() != null) {                readPDFFile(new File(openDialog.getDirectory(), openDialog.getFile()), "");            }        } else {            String[] extensions = new String[] { "pdf", "PDF" };            FileFilter pdfFilter = new ExtensionFileFilter(extensions, "PDF Files (*.pdf)");            FileOpenSaveDialog openDialog = new FileOpenSaveDialog(this, pdfFilter);            File file = openDialog.openFile();            if (file != null) {                readPDFFile(file, "");            }        }    } catch (IOException e) {        throw new RuntimeException(e);    }}
private void pdfbox_f211_0(TreeSelectionEvent evt)
{    TreePath path = tree.getSelectionPath();    if (path != null) {        try {            Object selectedNode = path.getLastPathComponent();            statusBar.getStatusLabel().setText("");            if (isPage(selectedNode)) {                showPage(selectedNode);                return;            }            if (isSpecialColorSpace(selectedNode) || isOtherColorSpace(selectedNode)) {                showColorPane(selectedNode);                return;            }            if (path.getParentPath() != null && isFlagNode(selectedNode, path.getParentPath().getLastPathComponent())) {                Object parentNode = path.getParentPath().getLastPathComponent();                showFlagPane(parentNode, selectedNode);                return;            }            if (isStream(selectedNode)) {                showStream((COSStream) getUnderneathObject(selectedNode), path);                return;            }            if (isFont(selectedNode)) {                showFont(selectedNode, path);                return;            }            if (isString(selectedNode)) {                showString(selectedNode);                return;            }            if (jSplitPane1.getRightComponent() == null || !jSplitPane1.getRightComponent().equals(jScrollPane2)) {                replaceRightComponent(jScrollPane2);            }            jTextPane1.setText(convertToString(selectedNode));        } catch (Exception e) {            e.printStackTrace();            throw new RuntimeException(e);        }    }}
private boolean pdfbox_f212_0(Object selectedNode)
{    selectedNode = getUnderneathObject(selectedNode);    if (selectedNode instanceof COSArray && ((COSArray) selectedNode).size() > 0) {        COSBase arrayEntry = ((COSArray) selectedNode).get(0);        if (arrayEntry instanceof COSName) {            COSName name = (COSName) arrayEntry;            return SPECIALCOLORSPACES.contains(name);        }    }    return false;}
private boolean pdfbox_f213_0(Object selectedNode)
{    selectedNode = getUnderneathObject(selectedNode);    if (selectedNode instanceof COSArray && ((COSArray) selectedNode).size() > 0) {        COSBase arrayEntry = ((COSArray) selectedNode).get(0);        if (arrayEntry instanceof COSName) {            COSName name = (COSName) arrayEntry;            return OTHERCOLORSPACES.contains(name);        }    }    return false;}
private boolean pdfbox_f214_0(Object selectedNode)
{    selectedNode = getUnderneathObject(selectedNode);    if (selectedNode instanceof COSDictionary) {        COSDictionary dict = (COSDictionary) selectedNode;        COSBase typeItem = dict.getItem(COSName.TYPE);        if (COSName.PAGE.equals(typeItem)) {            return true;        }    } else if (selectedNode instanceof PageEntry) {        return true;    }    return false;}
private boolean pdfbox_f215_0(Object selectedNode, Object parentNode)
{    if (selectedNode instanceof MapEntry) {        Object key = ((MapEntry) selectedNode).getKey();        return (COSName.FLAGS.equals(key) && isFontDescriptor(parentNode)) || (COSName.F.equals(key) && isAnnot(parentNode)) || COSName.FF.equals(key) || COSName.PANOSE.equals(key) || COSName.SIG_FLAGS.equals(key) || (COSName.P.equals(key) && isEncrypt(parentNode));    }    return false;}
private boolean pdfbox_f216_0(Object obj)
{    if (obj instanceof MapEntry) {        MapEntry entry = (MapEntry) obj;        return COSName.ENCRYPT.equals(entry.getKey()) && entry.getValue() instanceof COSDictionary;    }    return false;}
private boolean pdfbox_f217_0(Object obj)
{    Object underneathObject = getUnderneathObject(obj);    return underneathObject instanceof COSDictionary && ((COSDictionary) underneathObject).containsKey(COSName.TYPE) && ((COSDictionary) underneathObject).getCOSName(COSName.TYPE).equals(COSName.FONT_DESC);}
private boolean pdfbox_f218_0(Object obj)
{    Object underneathObject = getUnderneathObject(obj);    return underneathObject instanceof COSDictionary && ((COSDictionary) underneathObject).containsKey(COSName.TYPE) && ((COSDictionary) underneathObject).getCOSName(COSName.TYPE).equals(COSName.ANNOT);}
private boolean pdfbox_f219_0(Object selectedNode)
{    return getUnderneathObject(selectedNode) instanceof COSStream;}
private boolean pdfbox_f220_0(Object selectedNode)
{    return getUnderneathObject(selectedNode) instanceof COSString;}
private boolean pdfbox_f221_0(Object selectedNode)
{    selectedNode = getUnderneathObject(selectedNode);    if (selectedNode instanceof COSDictionary) {        COSDictionary dic = (COSDictionary) selectedNode;        return dic.containsKey(COSName.TYPE) && dic.getCOSName(COSName.TYPE).equals(COSName.FONT) && !isCIDFont(dic);    }    return false;}
private boolean pdfbox_f222_0(COSDictionary dic)
{    return dic.containsKey(COSName.SUBTYPE) && (dic.getCOSName(COSName.SUBTYPE).equals(COSName.CID_FONT_TYPE0) || dic.getCOSName(COSName.SUBTYPE).equals(COSName.CID_FONT_TYPE2));}
private void pdfbox_f223_0(Object csNode)
{    csNode = getUnderneathObject(csNode);    if (csNode instanceof COSArray && ((COSArray) csNode).size() > 0) {        COSArray array = (COSArray) csNode;        COSBase arrayEntry = array.get(0);        if (arrayEntry instanceof COSName) {            COSName csName = (COSName) arrayEntry;            if (csName.equals(COSName.SEPARATION)) {                replaceRightComponent(new CSSeparation(array).getPanel());            } else if (csName.equals(COSName.DEVICEN)) {                replaceRightComponent(new CSDeviceN(array).getPanel());            } else if (csName.equals(COSName.INDEXED)) {                replaceRightComponent(new CSIndexed(array).getPanel());            } else if (OTHERCOLORSPACES.contains(csName)) {                replaceRightComponent(new CSArrayBased(array).getPanel());            }        }    }}
private void pdfbox_f224_0(Object selectedNode)
{    selectedNode = getUnderneathObject(selectedNode);    COSDictionary page;    if (selectedNode instanceof COSDictionary) {        page = (COSDictionary) selectedNode;    } else {        page = ((PageEntry) selectedNode).getDict();    }    COSBase typeItem = page.getItem(COSName.TYPE);    if (COSName.PAGE.equals(typeItem)) {        PagePane pagePane = new PagePane(document, page, statusBar.getStatusLabel());        replaceRightComponent(new JScrollPane(pagePane.getPanel()));    }}
private void pdfbox_f225_0(Object parentNode, Object selectedNode)
{    parentNode = getUnderneathObject(parentNode);    if (parentNode instanceof COSDictionary) {        selectedNode = ((MapEntry) selectedNode).getKey();        selectedNode = getUnderneathObject(selectedNode);        FlagBitsPane flagBitsPane = new FlagBitsPane(document, (COSDictionary) parentNode, (COSName) selectedNode);        replaceRightComponent(flagBitsPane.getPane());    }}
private void pdfbox_f226_0(COSStream stream, TreePath path) throws IOException
{    boolean isContentStream = false;    boolean isThumb = false;    COSName key = getNodeKey(path.getLastPathComponent());    COSName parentKey = getNodeKey(path.getParentPath().getLastPathComponent());    COSDictionary resourcesDic = null;    if (COSName.CONTENTS.equals(key)) {        Object pageObj = path.getParentPath().getLastPathComponent();        COSDictionary page = (COSDictionary) getUnderneathObject(pageObj);        resourcesDic = (COSDictionary) page.getDictionaryObject(COSName.RESOURCES);        isContentStream = true;    } else if (COSName.CONTENTS.equals(parentKey) || COSName.CHAR_PROCS.equals(parentKey)) {        Object pageObj = path.getParentPath().getParentPath().getLastPathComponent();        COSDictionary page = (COSDictionary) getUnderneathObject(pageObj);        resourcesDic = (COSDictionary) page.getDictionaryObject(COSName.RESOURCES);        isContentStream = true;    } else if (COSName.FORM.equals(stream.getCOSName(COSName.SUBTYPE)) || COSName.PATTERN.equals(stream.getCOSName(COSName.TYPE)) || stream.getInt(COSName.PATTERN_TYPE) == 1) {        if (stream.containsKey(COSName.RESOURCES)) {            resourcesDic = (COSDictionary) stream.getDictionaryObject(COSName.RESOURCES);        }        isContentStream = true;    } else if (COSName.THUMB.equals(key)) {        resourcesDic = null;        isThumb = true;    } else if (COSName.IMAGE.equals((stream).getCOSName(COSName.SUBTYPE))) {                Object resourcesObj = path.getParentPath().getParentPath().getLastPathComponent();        resourcesDic = (COSDictionary) getUnderneathObject(resourcesObj);    }    StreamPane streamPane = new StreamPane(stream, isContentStream, isThumb, resourcesDic);    replaceRightComponent(streamPane.getPanel());}
private void pdfbox_f227_0(Object selectedNode, TreePath path)
{    COSName fontName = getNodeKey(selectedNode);    COSDictionary resourceDic = (COSDictionary) getUnderneathObject(path.getParentPath().getParentPath().getLastPathComponent());    FontEncodingPaneController fontEncodingPaneController = new FontEncodingPaneController(fontName, resourceDic);    JPanel pane = fontEncodingPaneController.getPane();    if (pane == null) {                replaceRightComponent(jScrollPane2);        return;    }    replaceRightComponent(pane);}
private void pdfbox_f228_0(Component pane)
{    int div = jSplitPane1.getDividerLocation();    jSplitPane1.setRightComponent(pane);    jSplitPane1.setDividerLocation(div);}
private void pdfbox_f229_0(Object selectedNode)
{    COSString string = (COSString) getUnderneathObject(selectedNode);    replaceRightComponent(new StringPane(string).getPane());}
private COSName pdfbox_f230_0(Object selectedNode)
{    if (selectedNode instanceof MapEntry) {        return ((MapEntry) selectedNode).getKey();    }    return null;}
private Object pdfbox_f231_0(Object selectedNode)
{    if (selectedNode instanceof MapEntry) {        selectedNode = ((MapEntry) selectedNode).getValue();    } else if (selectedNode instanceof ArrayEntry) {        selectedNode = ((ArrayEntry) selectedNode).getValue();    } else if (selectedNode instanceof PageEntry) {        selectedNode = ((PageEntry) selectedNode).getDict();    }    if (selectedNode instanceof COSObject) {        selectedNode = ((COSObject) selectedNode).getObject();    }    return selectedNode;}
private String pdfbox_f232_0(Object selectedNode)
{    String data = null;    if (selectedNode instanceof COSBoolean) {        data = "" + ((COSBoolean) selectedNode).getValue();    } else if (selectedNode instanceof COSFloat) {        data = "" + ((COSFloat) selectedNode).floatValue();    } else if (selectedNode instanceof COSNull) {        data = "null";    } else if (selectedNode instanceof COSInteger) {        data = "" + ((COSInteger) selectedNode).intValue();    } else if (selectedNode instanceof COSName) {        data = "" + ((COSName) selectedNode).getName();    } else if (selectedNode instanceof COSString) {        String text = ((COSString) selectedNode).getString();                for (char c : text.toCharArray()) {            if (Character.isISOControl(c)) {                text = "<" + ((COSString) selectedNode).toHexString() + ">";                break;            }        }        data = "" + text;    } else if (selectedNode instanceof COSStream) {        try {            COSStream stream = (COSStream) selectedNode;            InputStream in = stream.createInputStream();            ByteArrayOutputStream baos = new ByteArrayOutputStream();            IOUtils.copy(in, baos);            data = baos.toString();        } catch (IOException e) {            throw new RuntimeException(e);        }    } else if (selectedNode instanceof MapEntry) {        data = convertToString(((MapEntry) selectedNode).getValue());    } else if (selectedNode instanceof ArrayEntry) {        data = convertToString(((ArrayEntry) selectedNode).getValue());    }    return data;}
private void pdfbox_f233_0(ActionEvent ignored)
{    if (document != null) {        try {            document.close();            if (!currentFilePath.startsWith("http")) {                recentFiles.addFile(currentFilePath);            }            recentFiles.close();        } catch (IOException e) {            throw new RuntimeException(e);        }    }    windowPrefs.setExtendedState(getExtendedState());    this.setExtendedState(Frame.NORMAL);    windowPrefs.setBounds(getBounds());    windowPrefs.setDividerLocation(jSplitPane1.getDividerLocation());    performApplicationExit();}
protected void pdfbox_f234_0()
{    System.exit(0);}
private void pdfbox_f235_0(ActionEvent evt)
{    if (document == null) {        return;    }    AccessPermission ap = document.getCurrentAccessPermission();    if (!ap.canPrint()) {        JOptionPane.showMessageDialog(this, "You do not have permission to print");        return;    }    try {        PrinterJob job = PrinterJob.getPrinterJob();        job.setPageable(new PDFPageable(document));        PrintRequestAttributeSet pras = new HashPrintRequestAttributeSet();        PDViewerPreferences vp = document.getDocumentCatalog().getViewerPreferences();        if (vp != null && vp.getDuplex() != null) {            String dp = vp.getDuplex();            if (PDViewerPreferences.DUPLEX.DuplexFlipLongEdge.toString().equals(dp)) {                pras.add(Sides.TWO_SIDED_LONG_EDGE);            } else if (PDViewerPreferences.DUPLEX.DuplexFlipShortEdge.toString().equals(dp)) {                pras.add(Sides.TWO_SIDED_SHORT_EDGE);            } else if (PDViewerPreferences.DUPLEX.Simplex.toString().equals(dp)) {                pras.add(Sides.ONE_SIDED);            }        }        if (job.printDialog(pras)) {            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));            try {                job.print(pras);            } finally {                setCursor(Cursor.getDefaultCursor());            }        }    } catch (PrinterException e) {        throw new RuntimeException(e);    }}
private void pdfbox_f236_0(WindowEvent evt)
{    exitMenuItemActionPerformed(null);}
private void pdfbox_f237_0(String filePath, String password) throws IOException
{    File file = new File(filePath);    readPDFFile(file, password);}
private void pdfbox_f238_0(final File file, String password) throws IOException
{    if (document != null) {        document.close();        if (!currentFilePath.startsWith("http")) {            recentFiles.addFile(currentFilePath);        }    }    currentFilePath = file.getPath();    recentFiles.removeFile(file.getPath());    LogDialog.instance().clear();    DocumentOpener documentOpener = new DocumentOpener(password) {        @Override        PDDocument open() throws IOException {            return PDDocument.load(file, password);        }    };    document = documentOpener.parse();    printMenuItem.setEnabled(true);    reopenMenuItem.setEnabled(true);    initTree();    if (IS_MAC_OS) {        setTitle(file.getName());        getRootPane().putClientProperty("Window.documentFile", file);    } else {        setTitle("PDF Debugger - " + file.getAbsolutePath());    }    addRecentFileItems();}
 PDDocument pdfbox_f239_0() throws IOException
{    return PDDocument.load(file, password);}
private void pdfbox_f240_0(final String urlString, String password) throws IOException
{    if (document != null) {        document.close();        if (!currentFilePath.startsWith("http")) {            recentFiles.addFile(currentFilePath);        }    }    currentFilePath = urlString;    LogDialog.instance().clear();    DocumentOpener documentOpener = new DocumentOpener(password) {        @Override        PDDocument open() throws IOException {            return PDDocument.load(new URL(urlString).openStream(), password);        }    };    document = documentOpener.parse();    printMenuItem.setEnabled(true);    reopenMenuItem.setEnabled(true);    initTree();    if (IS_MAC_OS) {        setTitle(urlString);    } else {        setTitle("PDF Debugger - " + urlString);    }    addRecentFileItems();}
 PDDocument pdfbox_f241_0() throws IOException
{    return PDDocument.load(new URL(urlString).openStream(), password);}
public void pdfbox_f242_0()
{    TreeStatus treeStatus = new TreeStatus(document.getDocument().getTrailer());    statusPane.updateTreeStatus(treeStatus);    if (isPageMode) {        File file = new File(currentFilePath);        DocumentEntry documentEntry = new DocumentEntry(document, file.getName());        ZoomMenu.getInstance().resetZoom();        RotationMenu.getInstance().setRotationSelection(RotationMenu.ROTATE_0_DEGREES);        tree.setModel(new PDFTreeModel(documentEntry));                tree.setSelectionPath(tree.getPathForRow(1));    } else {        tree.setModel(new PDFTreeModel(document));        tree.setSelectionPath(treeStatus.getPathForString("Root"));    }}
 final PDDocument pdfbox_f243_0() throws IOException
{    while (true) {        try {            return open();        } catch (InvalidPasswordException ipe) {                        JPanel panel = new JPanel();            JLabel label = new JLabel("Password:");            JPasswordField pass = new JPasswordField(10);            panel.add(label);            panel.add(pass);            String[] options = new String[] { "OK", "Cancel" };            int option = JOptionPane.showOptionDialog(null, panel, "Enter password", JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, "");            if (option == 0) {                password = new String(pass.getPassword());                continue;            }            throw ipe;        }    }}
private void pdfbox_f244_0()
{    Action recentMenuAction = new AbstractAction() {        @Override        public void actionPerformed(ActionEvent actionEvent) {            String filePath = (String) ((JComponent) actionEvent.getSource()).getClientProperty("path");            try {                readPDFFile(filePath, "");            } catch (Exception e) {                throw new RuntimeException(e);            }        }    };    if (!recentFiles.isEmpty()) {        recentFilesMenu.removeAll();        List<String> files = recentFiles.getFiles();        for (int i = files.size() - 1; i >= 0; i--) {            String path = files.get(i);            String name = new File(path).getName();            JMenuItem recentFileMenuItem = new JMenuItem(name);            recentFileMenuItem.putClientProperty("path", path);            recentFileMenuItem.addActionListener(recentMenuAction);            recentFilesMenu.add(recentFileMenuItem);        }        recentFilesMenu.setEnabled(true);    }}
public void pdfbox_f245_0(ActionEvent actionEvent)
{    String filePath = (String) ((JComponent) actionEvent.getSource()).getClientProperty("path");    try {        readPDFFile(filePath, "");    } catch (Exception e) {        throw new RuntimeException(e);    }}
public static String pdfbox_f246_0(PDDocument document, int pageIndex)
{    PDPageLabels pageLabels;    try {        pageLabels = document.getDocumentCatalog().getPageLabels();    } catch (IOException ex) {        return ex.getMessage();    }    if (pageLabels != null) {        String[] labels = pageLabels.getLabelsByPageIndices();        if (labels[pageIndex] != null) {            return labels[pageIndex];        }    }    return null;}
public static Style pdfbox_f247_0(String operator)
{    if (operatorStyleMap.containsKey(operator)) {        return operatorStyleMap.get(operator);    }    return null;}
public boolean pdfbox_f248_0()
{    return isImage;}
public boolean pdfbox_f249_0()
{    return isXmlMetadata;}
public List<String> pdfbox_f250_0()
{    return new ArrayList(filters.keySet());}
private String pdfbox_f251_0()
{    StringBuilder sb = new StringBuilder();    COSBase base = strm.getFilters();    if (base instanceof COSName) {        sb.append(((COSName) base).getName());    } else if (base instanceof COSArray) {        COSArray filterArray = (COSArray) base;        for (int i = 0; i < filterArray.size(); i++) {            if (i > 0) {                sb.append(", ");            }            sb.append(((COSName) filterArray.get(i)).getName());        }    }    return "Encoded (" + sb.toString() + ")";}
public InputStream pdfbox_f252_1(String key)
{    try {        if (DECODED.equals(key)) {            return strm.createInputStream();        } else if (getFilteredLabel().equals(key)) {            return strm.createRawInputStream();        } else {            return new PDStream(strm).createInputStream(filters.get(key));        }    } catch (IOException e) {            }    return null;}
public BufferedImage pdfbox_f253_1(PDResources resources)
{    try {        PDImageXObject imageXObject;        if (isThumb) {            imageXObject = PDImageXObject.createThumbnail(strm);        } else {            imageXObject = new PDImageXObject(new PDStream(strm), resources);        }        return imageXObject.getImage();    } catch (IOException e) {            }    return null;}
private Map<String, List<String>> pdfbox_f254_0(COSStream stream)
{    Map<String, List<String>> filterList = new LinkedHashMap<>();    if (isImage) {        filterList.put(IMAGE, null);    }    filterList.put(DECODED, null);    PDStream pdStream = new PDStream(stream);    if (pdStream.getFilters() != null) {        int filtersSize = pdStream.getFilters().size();        for (int i = filtersSize - 1; i >= 1; i--) {            filterList.put(getPartialStreamCommand(i), getStopFilterList(i));        }        filterList.put(getFilteredLabel(), null);    }    return filterList;}
private String pdfbox_f255_0(final int indexOfStopFilter)
{    List<COSName> availableFilters = new PDStream(strm).getFilters();    StringBuilder nameListBuilder = new StringBuilder();    for (int i = indexOfStopFilter; i < availableFilters.size(); i++) {        nameListBuilder.append(availableFilters.get(i).getName()).append(" & ");    }    nameListBuilder.delete(nameListBuilder.lastIndexOf("&"), nameListBuilder.length());    return "Keep " + nameListBuilder.toString() + "...";}
private List<String> pdfbox_f256_0(final int stopFilterIndex)
{    List<COSName> availableFilters = new PDStream(strm).getFilters();    final List<String> stopFilters = new ArrayList<>(1);    stopFilters.add(availableFilters.get(stopFilterIndex).getName());    return stopFilters;}
private boolean pdfbox_f257_0(COSDictionary dic, boolean isThumb)
{    if (isThumb) {        return true;    }    return dic.containsKey(COSName.SUBTYPE) && dic.getCOSName(COSName.SUBTYPE).equals(COSName.IMAGE);}
private boolean pdfbox_f258_0(COSDictionary dic)
{    return dic.containsKey(COSName.SUBTYPE) && dic.getCOSName(COSName.SUBTYPE).equals(COSName.getPDFName("XML"));}
private void pdfbox_f259_0()
{    JPanel panel = new JPanel();    panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));    zoomMenu = ZoomMenu.getInstance();    zoomMenu.changeZoomSelection(zoomMenu.getImageZoomScale());    label = new JLabel();    label.setBorder(new LineBorder(Color.BLACK));    label.setAlignmentX(Component.CENTER_ALIGNMENT);    addImage(zoomImage(image, zoomMenu.getImageZoomScale(), RotationMenu.getRotationDegrees()));    panel.add(Box.createVerticalGlue());    panel.add(label);    panel.add(Box.createVerticalGlue());    scrollPane = new JScrollPane();    scrollPane.setPreferredSize(new Dimension(300, 400));    scrollPane.addAncestorListener(this);    scrollPane.setViewportView(panel);}
 JComponent pdfbox_f260_0()
{    return scrollPane;}
private Image pdfbox_f261_0(BufferedImage origin, float scale, int rotation)
{    BufferedImage rotatedImage = ImageUtil.getRotatedImage(origin, rotation);    int resizedWidth = (int) (rotatedImage.getWidth() * scale);    int resizedHeight = (int) (rotatedImage.getHeight() * scale);    return rotatedImage.getScaledInstance(resizedWidth, resizedHeight, BufferedImage.SCALE_SMOOTH);}
public void pdfbox_f262_0(ActionEvent actionEvent)
{    String actionCommand = actionEvent.getActionCommand();    if (ZoomMenu.isZoomMenu(actionCommand) || RotationMenu.isRotationMenu(actionCommand)) {        addImage(zoomImage(image, ZoomMenu.getZoomScale(), RotationMenu.getRotationDegrees()));        zoomMenu.setImageZoomScale(ZoomMenu.getZoomScale());    }}
private void pdfbox_f263_0(Image img)
{        AffineTransform tx = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration().getDefaultTransform();    label.setSize((int) Math.ceil(img.getWidth(null) / tx.getScaleX()), (int) Math.ceil(img.getHeight(null) / tx.getScaleY()));    label.setIcon(new HighResolutionImageIcon(img, label.getWidth(), label.getHeight()));    label.revalidate();}
public void pdfbox_f264_0(AncestorEvent ancestorEvent)
{    zoomMenu.addMenuListeners(this);    zoomMenu.setEnableMenu(true);    rotationMenu = RotationMenu.getInstance();    rotationMenu.addMenuListeners(this);    rotationMenu.setRotationSelection(RotationMenu.ROTATE_0_DEGREES);    rotationMenu.setEnableMenu(true);}
public void pdfbox_f265_0(AncestorEvent ancestorEvent)
{    zoomMenu.setEnableMenu(false);    rotationMenu.setEnableMenu(false);}
public JComponent pdfbox_f267_0()
{    return panel;}
private JPanel pdfbox_f268_0(List<String> availableFilters, String i, ActionListener actionListener)
{    JComboBox<String> filters = new JComboBox<>(new Vector<>(availableFilters));    filters.setSelectedItem(i);    filters.addActionListener(actionListener);    JPanel headerPanel = new JPanel(new FlowLayout());    headerPanel.add(filters);    return headerPanel;}
public void pdfbox_f269_1(ActionEvent actionEvent)
{    if ("comboBoxChanged".equals(actionEvent.getActionCommand())) {        JComboBox comboBox = (JComboBox) actionEvent.getSource();        String currentFilter = (String) comboBox.getSelectedItem();        try {            if (currentFilter.equals(Stream.IMAGE)) {                requestImageShowing();                tabbedPane.removeAll();                tabbedPane.add("Image view", view.getStreamPanel());                return;            }            tabbedPane.removeAll();            tabbedPane.add("Text view", view.getStreamPanel());            tabbedPane.add("Hex view", hexView.getPane());            requestStreamText(currentFilter);        } catch (IOException e) {                    }    }}
private void pdfbox_f270_0() throws IOException
{    if (stream.isImage()) {        BufferedImage image;        synchronized (stream) {            image = stream.getImage(resources);        }        if (image == null) {            JOptionPane.showMessageDialog(panel, "image not available (filter missing?)");            return;        }        view.showStreamImage(image);    }}
private void pdfbox_f271_0(String command) throws IOException
{    new DocumentCreator(command).execute();    synchronized (stream) {        InputStream is = stream.getStream(command);        if (is == null) {            JOptionPane.showMessageDialog(panel, command + " text not available (filter missing?)");            return;        }        hexView.changeData(IOUtils.toByteArray(is));    }}
protected StyledDocument pdfbox_f272_0()
{        String encoding = "ISO-8859-1";    synchronized (stream) {        if (stream.isXmlMetadata()) {            encoding = "UTF-8";        }        InputStream inputStream = stream.getStream(filterKey);        if (isContentStream && Stream.DECODED.equals(filterKey)) {            StyledDocument document = getContentStreamDocument(inputStream);            if (document != null) {                return document;            }            return getDocument(stream.getStream(filterKey), encoding);        }        return getDocument(inputStream, encoding);    }}
protected void pdfbox_f273_1()
{    try {        view.showStreamText(get(), tTController);    } catch (InterruptedException | ExecutionException e) {            }}
private String pdfbox_f274_1(InputStream in, String encoding)
{    ByteArrayOutputStream baos = new ByteArrayOutputStream();    try {        IOUtils.copy(in, baos);        return baos.toString(encoding);    } catch (IOException e) {                return null;    }}
private StyledDocument pdfbox_f275_1(InputStream inputStream, String encoding)
{    StyledDocument docu = new DefaultStyledDocument();    if (inputStream != null) {        String data = getStringOfStream(inputStream, encoding);        try {            docu.insertString(0, data, null);        } catch (BadLocationException e) {                    }    }    return docu;}
private StyledDocument pdfbox_f276_0(InputStream inputStream)
{    StyledDocument docu = new DefaultStyledDocument();    PDFStreamParser parser;    try {        parser = new PDFStreamParser(IOUtils.toByteArray(inputStream));        parser.parse();    } catch (IOException e) {        return null;    }    parser.getTokens().forEach(obj -> writeToken(obj, docu));    return docu;}
private void pdfbox_f277_1(Object obj, StyledDocument docu)
{    try {        if (obj instanceof Operator) {            addOperators(obj, docu);        } else {            writeOperand(obj, docu);        }    } catch (BadLocationException e) {            }}
private void pdfbox_f278_0(Object obj, StyledDocument docu) throws BadLocationException
{    writeIndent(docu);    if (obj instanceof COSName) {        String str = "/" + ((COSName) obj).getName();        docu.insertString(docu.getLength(), str + " ", NAME_STYLE);    } else if (obj instanceof COSBoolean) {        String str = obj.toString();        docu.insertString(docu.getLength(), str + " ", null);    } else if (obj instanceof COSArray) {        docu.insertString(docu.getLength(), "[ ", null);        for (COSBase elem : (COSArray) obj) {            writeOperand(elem, docu);        }        docu.insertString(docu.getLength(), "] ", null);    } else if (obj instanceof COSString) {        docu.insertString(docu.getLength(), "(", null);        byte[] bytes = ((COSString) obj).getBytes();        for (byte b : bytes) {            int chr = b & 0xff;            if (chr < 0x20 || chr > 0x7e) {                                String str = String.format("\\%03o", chr);                docu.insertString(docu.getLength(), str, ESCAPE_STYLE);            } else if (chr == '(' || chr == ')' || chr == '\n' || chr == '\r' || chr == '\t' || chr == '\b' || chr == '\f' || chr == '\\') {                                String str = "\\" + (char) chr;                docu.insertString(docu.getLength(), str, ESCAPE_STYLE);            } else {                String str = Character.toString((char) chr);                docu.insertString(docu.getLength(), str, STRING_STYLE);            }        }        docu.insertString(docu.getLength(), ") ", null);    } else if (obj instanceof COSNumber) {        String str;        if (obj instanceof COSFloat) {            str = Float.toString(((COSFloat) obj).floatValue());        } else {            str = Integer.toString(((COSNumber) obj).intValue());        }        docu.insertString(docu.getLength(), str + " ", NUMBER_STYLE);    } else if (obj instanceof COSDictionary) {        docu.insertString(docu.getLength(), "<< ", null);        COSDictionary dict = (COSDictionary) obj;        for (Map.Entry<COSName, COSBase> entry : dict.entrySet()) {            writeOperand(entry.getKey(), docu);            writeOperand(entry.getValue(), docu);        }        docu.insertString(docu.getLength(), ">> ", null);    } else {        String str = obj.toString();        str = str.substring(str.indexOf('{') + 1, str.length() - 1);        docu.insertString(docu.getLength(), str + " ", null);    }}
private void pdfbox_f279_0(Object obj, StyledDocument docu) throws BadLocationException
{    Operator op = (Operator) obj;    if (op.getName().equals(OperatorName.END_TEXT) || op.getName().equals(OperatorName.RESTORE) || op.getName().equals(OperatorName.END_MARKED_CONTENT)) {        indent--;    }    writeIndent(docu);    if (op.getName().equals(OperatorName.BEGIN_INLINE_IMAGE)) {        docu.insertString(docu.getLength(), OperatorName.BEGIN_INLINE_IMAGE + "\n", OPERATOR_STYLE);        COSDictionary dic = op.getImageParameters();        for (COSName key : dic.keySet()) {            Object value = dic.getDictionaryObject(key);            docu.insertString(docu.getLength(), "/" + key.getName() + " ", null);            writeToken(value, docu);            docu.insertString(docu.getLength(), "\n", null);        }        String imageString = new String(op.getImageData(), Charsets.ISO_8859_1);        docu.insertString(docu.getLength(), OperatorName.BEGIN_INLINE_IMAGE_DATA + "\n", INLINE_IMAGE_STYLE);        docu.insertString(docu.getLength(), imageString, null);        docu.insertString(docu.getLength(), "\n", null);        docu.insertString(docu.getLength(), OperatorName.END_INLINE_IMAGE + "\n", OPERATOR_STYLE);    } else {        String operator = ((Operator) obj).getName();        docu.insertString(docu.getLength(), operator + "\n", OPERATOR_STYLE);                if (op.getName().equals(OperatorName.BEGIN_TEXT) || op.getName().equals(OperatorName.SAVE) || op.getName().equals(OperatorName.BEGIN_MARKED_CONTENT) || op.getName().equals(OperatorName.BEGIN_MARKED_CONTENT_SEQ)) {            indent++;        }    }    needIndent = true;}
 void pdfbox_f280_0(StyledDocument docu) throws BadLocationException
{    if (needIndent) {        for (int i = 0; i < indent; i++) {            docu.insertString(docu.getLength(), "  ", null);        }        needIndent = false;    }}
 void pdfbox_f281_0(StyledDocument document, ToolTipController toolTipController)
{    contentPanel.removeAll();    StreamTextView textView = new StreamTextView(document, toolTipController);    contentPanel.add(textView.getView(), BorderLayout.CENTER);    contentPanel.validate();}
 void pdfbox_f282_0(BufferedImage image)
{    contentPanel.removeAll();    contentPanel.add(new StreamImageView(image).getView(), BorderLayout.CENTER);    contentPanel.validate();}
public JPanel pdfbox_f283_0()
{    return contentPanel;}
private void pdfbox_f284_0(StyledDocument document)
{    mainPanel = new JPanel();    textPane = new JTextPane(document);    textPane.addMouseMotionListener(this);    textPane.setFont(new Font("monospaced", Font.PLAIN, 13));    searcher = new Searcher(textPane);    JScrollPane scrollPane = new JScrollPane(textPane);    BoxLayout boxLayout = new BoxLayout(mainPanel, BoxLayout.Y_AXIS);    mainPanel.setLayout(boxLayout);    mainPanel.add(searcher.getSearchPanel());    mainPanel.add(scrollPane);    searcher.getSearchPanel().setVisible(false);    mainPanel.addAncestorListener(this);}
 JComponent pdfbox_f285_0()
{    return mainPanel;}
public void pdfbox_f287_0(MouseEvent mouseEvent)
{    if (tTController != null) {        int offset = textPane.viewToModel(mouseEvent.getPoint());        textPane.setToolTipText(tTController.getToolTip(offset, textPane));    }}
public void pdfbox_f288_0(AncestorEvent ancestorEvent)
{    if (ancestorEvent.getAncestor().equals(mainPanel)) {        PDFDebugger debugger = (PDFDebugger) SwingUtilities.getRoot(mainPanel);        debugger.getFindMenu().setEnabled(true);        searcher.addMenuListeners(debugger);    }}
public void pdfbox_f289_0(AncestorEvent ancestorEvent)
{    if (ancestorEvent.getAncestor().equals(mainPanel)) {        PDFDebugger debugger = (PDFDebugger) SwingUtilities.getRoot(mainPanel);        debugger.getFindMenu().setEnabled(false);        searcher.removeMenuListeners(debugger);    }}
 static String pdfbox_f291_0(Color color)
{    return String.format("%02x", color.getRed()) + String.format("%02x", color.getGreen()) + String.format("%02x", color.getBlue());}
 float[] pdfbox_f292_0(String rowtext)
{    List<String> words = ToolTipController.getWords(rowtext);    words.remove(words.size() - 1);    float[] values = new float[words.size()];    int index = 0;    try {        for (String word : words) {            values[index++] = Float.parseFloat(word);        }    } catch (NumberFormatException e) {        return null;    }    return values;}
 String pdfbox_f293_0(String hexValue)
{    return "<html>\n" + "<body bgcolor=#ffffff>\n" + "<div style=\"width:50px;height:20px;border:1px; background-color:#" + hexValue + ";\"></div></body>\n" + "</html>";}
public void pdfbox_f294_0(String toolTip)
{    this.toolTipText = toolTip;}
public String pdfbox_f295_0()
{    return toolTipText;}
private void pdfbox_f296_1(String fontReferenceName, PDResources resources)
{    PDFont font = null;    for (COSName name : resources.getFontNames()) {        if (name.getName().equals(fontReferenceName)) {            try {                font = resources.getFont(name);            } catch (IOException e) {                            }        }    }    if (font != null) {        markup = "<html>" + font.getName() + "</html>";    }}
private String pdfbox_f297_0(String rowText)
{    return rowText.trim().split(" ")[0].substring(1);}
public String pdfbox_f298_0()
{    return markup;}
private void pdfbox_f299_0(String rowText)
{    float[] colorValues = extractColorValues(rowText);    if (colorValues != null) {        Color color = new Color(colorValues[0], colorValues[0], colorValues[0]);        setToolTipText(getMarkUp(colorHexValue(color)));    }}
private void pdfbox_f300_1(String rowText)
{    float[] colorValues = extractColorValues(rowText);    if (colorValues != null) {        try {            float[] rgbValues = getICCColorSpace().toRGB(colorValues);            setToolTipText(getMarkUp(colorHexValue(new Color(rgbValues[0], rgbValues[1], rgbValues[2]))));        } catch (IOException e) {                    }    }}
 ICC_ColorSpace pdfbox_f301_0() throws IOException
{        ICC_Profile iccProfile = getICCProfile();    if (iccProfile == null) {        throw new IOException("Default CMYK color profile could not be loaded");    }    return new ICC_ColorSpace(iccProfile);}
 ICC_Profile pdfbox_f302_0() throws IOException
{                    String name = "/org/apache/pdfbox/resources/icc/ISOcoated_v2_300_bas.icc";    URL url = PDDeviceCMYK.class.getResource(name);    if (url == null) {        throw new IOException("Error loading resource: " + name);    }    try (InputStream input = url.openStream()) {        return ICC_Profile.getInstance(input);    }}
private void pdfbox_f303_0(String rowText)
{    float[] rgbValues = extractColorValues(rowText);    if (rgbValues != null) {        Color color = new Color(rgbValues[0], rgbValues[1], rgbValues[2]);        setToolTipText(getMarkUp(colorHexValue(color)));    }}
private void pdfbox_f304_1(PDResources resources, String colorSpaceName, String rowText)
{    PDColorSpace colorSpace = null;    try {        colorSpace = resources.getColorSpace(COSName.getPDFName(colorSpaceName));    } catch (IOException e) {            }    if (colorSpace instanceof PDPattern) {        setToolTipText("<html>Pattern</html>");        return;    }    if (colorSpace != null) {        try {            float[] rgbValues = colorSpace.toRGB(extractColorValues(rowText));            if (rgbValues != null) {                Color color = new Color(rgbValues[0], rgbValues[1], rgbValues[2]);                setToolTipText(getMarkUp(colorHexValue(color)));            }        } catch (IOException e) {                    }    }}
 static List<String> pdfbox_f305_0(String str)
{    List<String> words = new ArrayList<>();    for (String string : str.trim().split(" ")) {        string = string.trim();        if (!string.isEmpty() && !string.equals("\n")) {            words.add(string);        }    }    return words;}
public String pdfbox_f306_0(int offset, JTextComponent textComponent)
{    this.textComponent = textComponent;    String word = getWord(offset);    String rowText = getRowText(offset);    if (word != null) {        ToolTip toolTip;        switch(word) {            case OperatorName.SET_FONT_AND_SIZE:                toolTip = new FontToolTip(resources, rowText);                return toolTip.getToolTipText();            case OperatorName.STROKING_COLOR_N:                {                    String colorSpaceName = findColorSpace(offset, OperatorName.STROKING_COLORSPACE);                    if (colorSpaceName != null) {                        toolTip = new SCNToolTip(resources, colorSpaceName, rowText);                        return toolTip.getToolTipText();                    }                    break;                }            case OperatorName.NON_STROKING_COLOR_N:                {                    String colorSpaceName = findColorSpace(offset, OperatorName.NON_STROKING_COLORSPACE);                    if (colorSpaceName != null) {                        toolTip = new SCNToolTip(resources, colorSpaceName, rowText);                        return toolTip.getToolTipText();                    }                    break;                }            case OperatorName.STROKING_COLOR_RGB:            case OperatorName.NON_STROKING_RGB:                toolTip = new RGToolTip(rowText);                return toolTip.getToolTipText();            case OperatorName.STROKING_COLOR_CMYK:            case OperatorName.NON_STROKING_CMYK:                toolTip = new KToolTip(rowText);                return toolTip.getToolTipText();            case OperatorName.STROKING_COLOR_GRAY:            case OperatorName.NON_STROKING_GRAY:                toolTip = new GToolTip(rowText);                return toolTip.getToolTipText();            default:                break;        }    }    return null;}
private String pdfbox_f307_1(int offset, String colorSpaceType)
{    try {        while (offset != -1) {            offset = Utilities.getPositionAbove(textComponent, offset, 0);            String previousRowText = getRowText(offset);            if (previousRowText == null) {                return null;            }            previousRowText = previousRowText.trim();            if (isColorSpace(colorSpaceType, previousRowText)) {                return previousRowText.split(" ")[0];            }        }    } catch (BadLocationException e) {            }    return null;}
private boolean pdfbox_f308_0(String colorSpaceType, String rowText)
{    List<String> words = getWords(rowText);    return words.size() == 2 && words.get(1).equals(colorSpaceType);}
private String pdfbox_f309_1(int offset)
{    try {        int start = Utilities.getWordStart(textComponent, offset);        int end = Utilities.getWordEnd(textComponent, offset);        return textComponent.getDocument().getText(start, end - start + 1).trim();    } catch (BadLocationException e) {            }    return null;}
private String pdfbox_f310_1(int offset)
{    try {        int rowStart = Utilities.getRowStart(textComponent, offset);        int rowEnd = Utilities.getRowEnd(textComponent, offset);        return textComponent.getDocument().getText(rowStart, rowEnd - rowStart + 1);    } catch (BadLocationException e) {            }    return null;}
private JTextPane pdfbox_f311_0(COSString cosString)
{    JTextPane textPane = new JTextPane();    textPane.setText(getTextString(cosString));    textPane.setEditable(false);    return textPane;}
private JComponent pdfbox_f312_0(COSString cosString)
{    HexView hexView = new HexView(cosString.getBytes());    return hexView.getPane();}
private String pdfbox_f313_0(COSString cosString)
{    String text = cosString.getString();    for (char c : text.toCharArray()) {        if (Character.isISOControl(c)) {            text = "<" + cosString.toHexString() + ">";            break;        }    }    return "" + text;}
public JTabbedPane pdfbox_f314_0()
{    return tabbedPane;}
public String pdfbox_f315_0(TreePath path)
{    return generatePathString(path);}
public TreePath pdfbox_f316_0(String statusString)
{    return generatePath(statusString);}
private String pdfbox_f317_0(TreePath path)
{    StringBuilder pathStringBuilder = new StringBuilder();    while (path.getParentPath() != null) {        Object object = path.getLastPathComponent();        pathStringBuilder.insert(0, "/" + getObjectName(object));        path = path.getParentPath();    }    pathStringBuilder.delete(0, 1);    return pathStringBuilder.toString();}
private TreePath pdfbox_f318_0(String pathString)
{    List<String> nodes = parsePathString(pathString);    if (nodes == null) {        return null;    }    Object obj = rootNode;    TreePath treePath = new TreePath(obj);    for (String node : nodes) {        obj = searchNode(obj, node);        if (obj == null) {            return null;        }        treePath = treePath.pathByAddingChild(obj);    }    return treePath;}
private String pdfbox_f319_0(Object treeNode)
{    if (treeNode instanceof MapEntry) {        MapEntry entry = (MapEntry) treeNode;        COSName key = entry.getKey();        return key.getName();    } else if (treeNode instanceof ArrayEntry) {        ArrayEntry entry = (ArrayEntry) treeNode;        return "[" + entry.getIndex() + "]";    } else if (treeNode instanceof PageEntry) {        PageEntry entry = (PageEntry) treeNode;        return entry.getPath();    }    throw new IllegalArgumentException("Unknown treeNode type: " + treeNode.getClass().getName());}
private List<String> pdfbox_f320_0(String path)
{    List<String> nodes = new ArrayList<>();    for (String node : path.split("/")) {        node = node.trim();        if (node.startsWith("[")) {            node = node.replace("]", "").replace("[", "");        }        node = node.trim();        if (node.isEmpty()) {            return null;        }        nodes.add(node);    }    return nodes;}
private Object pdfbox_f321_0(Object obj, String searchStr)
{    if (obj instanceof MapEntry) {        obj = ((MapEntry) obj).getValue();    } else if (obj instanceof ArrayEntry) {        obj = ((ArrayEntry) obj).getValue();    }    if (obj instanceof COSObject) {        obj = ((COSObject) obj).getObject();    }    if (obj instanceof COSDictionary) {        COSDictionary dic = (COSDictionary) obj;        if (dic.containsKey(searchStr)) {            MapEntry entry = new MapEntry();            entry.setKey(COSName.getPDFName(searchStr));            entry.setValue(dic.getDictionaryObject(searchStr));            entry.setValue(dic.getItem(searchStr));            return entry;        }    } else if (obj instanceof COSArray) {        int index = Integer.parseInt(searchStr);        COSArray array = (COSArray) obj;        if (index <= array.size() - 1) {            ArrayEntry entry = new ArrayEntry();            entry.setIndex(index);            entry.setValue(array.getObject(index));            entry.setItem(array.get(index));            return entry;        }    }    return null;}
public void pdfbox_f322_0(ActionEvent actionEvent)
{    TreePath path = statusObj.getPathForString(statusField.getText());    if (path != null) {        tree.setSelectionPath(path);        tree.scrollPathToVisible(path);        tree.requestFocusInWindow();    } else {        statusField.setBorder(errorBorder);    }}
private void pdfbox_f323_0()
{    panel = new JPanel(new BorderLayout());    statusField = new JTextField();    statusField.setEditable(false);    panel.add(statusField);    defaultBorder = new BevelBorder(BevelBorder.LOWERED);    errorBorder = new BevelBorder(BevelBorder.LOWERED, Color.RED, Color.RED);    statusField.setAction(textInputAction);    tree.addTreeSelectionListener(this);}
public JPanel pdfbox_f324_0()
{    return panel;}
public void pdfbox_f325_0(TreeStatus statusObj)
{    statusField.setEditable(true);    this.statusObj = statusObj;    updateText(null);}
private void pdfbox_f326_0(String statusString)
{    statusField.setText(statusString);    if (!statusField.getBorder().equals(defaultBorder)) {        statusField.setBorder(defaultBorder);    }}
public void pdfbox_f327_0(TreeSelectionEvent treeSelectionEvent)
{    TreePath path = treeSelectionEvent.getPath();    updateText(statusObj.getStringForPath(path));}
public COSBase pdfbox_f328_0()
{    return value;}
public COSBase pdfbox_f329_0()
{    return item;}
public void pdfbox_f330_0(COSBase val)
{    this.value = val;}
public void pdfbox_f331_0(COSBase val)
{    this.item = val;}
public int pdfbox_f332_0()
{    return index;}
public void pdfbox_f333_0(int i)
{    index = i;}
public void pdfbox_f334_0(Object o)
{    if (DEBUG) {        LogDialog.instance().log(name, "debug", o, null);    }}
public void pdfbox_f335_0(Object o, Throwable throwable)
{    if (DEBUG) {        LogDialog.instance().log(name, "debug", o, throwable);    }}
public void pdfbox_f336_0(Object o)
{    LogDialog.instance().log(name, "error", o, null);}
public void pdfbox_f337_0(Object o, Throwable throwable)
{    LogDialog.instance().log(name, "error", o, throwable);}
public void pdfbox_f338_0(Object o)
{    LogDialog.instance().log(name, "fatal", o, null);}
public void pdfbox_f339_0(Object o, Throwable throwable)
{    LogDialog.instance().log(name, "fatal", o, throwable);}
public void pdfbox_f340_0(Object o)
{    if (INFO) {        LogDialog.instance().log(name, "info", o, null);    }}
public void pdfbox_f341_0(Object o, Throwable throwable)
{    if (INFO) {        LogDialog.instance().log(name, "info", o, throwable);    }}
public boolean pdfbox_f342_0()
{    return DEBUG;}
public boolean pdfbox_f343_0()
{    return true;}
public boolean pdfbox_f344_0()
{    return true;}
public boolean pdfbox_f345_0()
{    return INFO;}
public boolean pdfbox_f346_0()
{    return TRACE;}
public boolean pdfbox_f347_0()
{    return true;}
public void pdfbox_f348_0(Object o)
{    if (TRACE) {        LogDialog.instance().log(name, "trace", o, null);    }}
public void pdfbox_f349_0(Object o, Throwable throwable)
{    if (TRACE) {        LogDialog.instance().log(name, "trace", o, throwable);    }}
public void pdfbox_f350_0(Object o)
{    LogDialog.instance().log(name, "warn", o, null);}
public void pdfbox_f351_0(Object o, Throwable throwable)
{    LogDialog.instance().log(name, "warn", o, throwable);}
public int pdfbox_f352_0()
{    return doc.getPages().getCount();}
public PageEntry pdfbox_f353_0(int index)
{    PDPage page = doc.getPages().get(index);    String pageLabel = PDFDebugger.getPageLabel(doc, index);    return new PageEntry(page.getCOSObject(), index + 1, pageLabel);}
public int pdfbox_f354_0(PageEntry page)
{    return page.getPageNum() - 1;}
public String pdfbox_f355_0()
{    return filename;}
 static void pdfbox_f356_0(Component c, Component parent)
{    Dimension d = c.getPreferredSize();    if (parent == null) {        Dimension s = Toolkit.getDefaultToolkit().getScreenSize();        c.setLocation(s.width / 2 - d.width / 2, s.height / 2 - d.height / 2);    } else {        Point p = parent.getLocationOnScreen();        int pw = parent.getWidth();        int ph = parent.getHeight();        c.setLocation(p.x + pw / 2 - d.width / 2, p.y + ph / 2 - d.height / 2);    }}
 final JComponent pdfbox_f357_0()
{    final JButton showDetails = new JButton("Show Details >>");    showDetails.addActionListener(e -> {        if (showingDetails) {            main.remove(details);            main.validate();            main.setPreferredSize(MESSAGE_SIZE);        } else {            if (details == null) {                details = createDetailedMessage();                StringBuilder buffer = new StringBuilder();                stacktrace.setText(generateStackTrace(error, buffer).toString());                stacktrace.setCaretPosition(0);                stacktrace.setBackground(main.getBackground());                stacktrace.setPreferredSize(STACKTRACE_SIZE);            }            main.add(details, BorderLayout.CENTER);            main.validate();            main.setPreferredSize(TOTAL_SIZE);        }        showingDetails = !showingDetails;        showDetails.setText(showingDetails ? "<< Hide Details" : "Show Details >>");        ErrorDialog.this.pack();    });    JPanel messagePanel = new JPanel();    final JCheckBox filter = new JCheckBox("Filter stack traces");    filter.setSelected(isFiltering);    filter.addActionListener(e -> {        isFiltering = filter.isSelected();        StringBuilder buffer = new StringBuilder();        stacktrace.setText(generateStackTrace(error, buffer).toString());        stacktrace.setCaretPosition(0);        stacktrace.repaint();    });    message.setBackground(messagePanel.getBackground());    JPanel buttonPanel = new JPanel();    buttonPanel.add(Box.createHorizontalStrut(BORDER_SIZE));    buttonPanel.add(showDetails);    buttonPanel.add(filter);    buttonPanel.add(Box.createHorizontalGlue());    messagePanel.setLayout(new BorderLayout());    messagePanel.setBorder(BorderFactory.createEmptyBorder(BORDER_SIZE, BORDER_SIZE, BORDER_SIZE, BORDER_SIZE));    messagePanel.add(message, BorderLayout.CENTER);    messagePanel.add(buttonPanel, BorderLayout.SOUTH);    messagePanel.setPreferredSize(MESSAGE_SIZE);    JPanel panel = new JPanel();    panel.setLayout(new BorderLayout());    panel.add(messagePanel, BorderLayout.NORTH);        ActionListener actionListener = actionEvent -> dispose();    KeyStroke stroke = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);    panel.registerKeyboardAction(actionListener, stroke, JComponent.WHEN_IN_FOCUSED_WINDOW);    return panel;}
 final JComponent pdfbox_f358_0(Throwable t)
{    String txt = t.getLocalizedMessage();    JEditorPane msg = new JEditorPane();    msg.setContentType("text/plain");    msg.setEditable(false);    msg.setText(txt);    return msg;}
 JScrollPane pdfbox_f359_0()
{    stacktrace = new JTextPane();    stacktrace.setEditable(false);    return new JScrollPane(stacktrace, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);}
 StringBuilder pdfbox_f360_0(Throwable t, StringBuilder buffer)
{    buffer.append(t.getClass().getName()).append(": ").append(t.getMessage()).append(NEWLINE);    buffer.append(toString(t.getStackTrace()));    Throwable cause = t.getCause();    if (cause != null && !cause.equals(t)) {        buffer.append("Caused by: ");        generateStackTrace(cause, buffer);    }    return buffer;}
 StringBuilder pdfbox_f361_0(StackTraceElement[] traces)
{    StringBuilder err = new StringBuilder();    for (StackTraceElement e : traces) {        if (!isFiltering || !isSuppressed(e.getClassName())) {            String str = e.toString();            err.append(INDENT).append(str).append(NEWLINE);        }    }    return err;}
private boolean pdfbox_f362_0(String className)
{    return FILTERS.stream().anyMatch(className::startsWith);}
public boolean pdfbox_f363_0(File pathname)
{    if (pathname.isDirectory()) {        return true;    }    boolean acceptable = false;    String name = pathname.getName().toUpperCase();    for (int i = 0; !acceptable && i < extensions.length; i++) {        if (name.endsWith(extensions[i].toUpperCase())) {            acceptable = true;        }    }    return acceptable;}
public String pdfbox_f364_0()
{    return desc;}
public void pdfbox_f365_0()
{    File selectedFile = getSelectedFile();    if (selectedFile.exists() && getDialogType() == JFileChooser.SAVE_DIALOG) {        int result = JOptionPane.showConfirmDialog(this, "Do you want to overwrite?", "File already exists", JOptionPane.YES_NO_OPTION);        if (result != JOptionPane.YES_OPTION) {            cancelSelection();            return;        }    }    super.approveSelection();}
public boolean pdfbox_f366_0(byte[] bytes, String extension) throws IOException
{    int result = fileChooser.showSaveDialog(mainUI);    if (result == JFileChooser.APPROVE_OPTION) {        String filename = fileChooser.getSelectedFile().getAbsolutePath();        if (extension != null && !filename.endsWith(extension)) {            filename += "." + extension;        }        try (FileOutputStream outputStream = new FileOutputStream(filename)) {            outputStream.write(bytes);        }        return true;    }    return false;}
public File pdfbox_f367_0() throws IOException
{    int result = fileChooser.showOpenDialog(mainUI);    if (result == JFileChooser.APPROVE_OPTION) {        return fileChooser.getSelectedFile();    }    return null;}
public void pdfbox_f368_0(Component c, Graphics g, int x, int y)
{    g.drawImage(image, x, y, getIconWidth(), getIconHeight(), null);}
public int pdfbox_f369_0()
{    return baseWidth;}
public int pdfbox_f370_0()
{    return baseHeight;}
public static BufferedImage pdfbox_f371_0(BufferedImage image, int rotation)
{    int width = image.getWidth();    int height = image.getHeight();    double x = 0;    double y = 0;    BufferedImage rotatedImage;    switch(rotation % 360) {        case 90:            x = height;            rotatedImage = new BufferedImage(height, width, BufferedImage.TYPE_INT_RGB);            break;        case 270:            y = width;            rotatedImage = new BufferedImage(height, width, BufferedImage.TYPE_INT_RGB);            break;        case 180:            x = width;            y = height;            rotatedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);            break;        default:            return image;    }    Graphics2D g = (Graphics2D) rotatedImage.getGraphics();    g.translate(x, y);    g.rotate(Math.toRadians(rotation));    g.drawImage(image, 0, 0, null);    g.dispose();    return rotatedImage;}
public static void pdfbox_f372_0(Frame owner, JLabel logLabel)
{    instance = new LogDialog(owner, logLabel);}
public static LogDialog pdfbox_f373_0()
{    return instance;}
public void pdfbox_f374_0(String name, String level, Object o, Throwable throwable)
{    StyledDocument doc = textPane.getStyledDocument();    String levelText;    SimpleAttributeSet levelStyle = new SimpleAttributeSet();    switch(level) {        case "fatal":            levelText = "Fatal";            StyleConstants.setForeground(levelStyle, Color.WHITE);            StyleConstants.setBackground(levelStyle, Color.BLACK);            fatalCount++;            break;        case "error":            levelText = "Error";            StyleConstants.setForeground(levelStyle, new Color(0xFF291F));            StyleConstants.setBackground(levelStyle, new Color(0xFFF0F0));            errorCount++;            break;        case "warn":            levelText = "Warning";            StyleConstants.setForeground(levelStyle, new Color(0x614201));            StyleConstants.setBackground(levelStyle, new Color(0xFFFCE5));            warnCount++;            break;        case "info":            levelText = "Info";            StyleConstants.setForeground(levelStyle, new Color(0x203261));            StyleConstants.setBackground(levelStyle, new Color(0xE2E8FF));            otherCount++;            break;        case "debug":            levelText = "Debug";            StyleConstants.setForeground(levelStyle, new Color(0x32612E));            StyleConstants.setBackground(levelStyle, new Color(0xF4FFEC));            otherCount++;            break;        case "trace":            levelText = "Trace";            StyleConstants.setForeground(levelStyle, new Color(0x64438D));            StyleConstants.setBackground(levelStyle, new Color(0xFEF3FF));            otherCount++;            break;        default:            throw new Error(level);    }    SimpleAttributeSet nameStyle = new SimpleAttributeSet();    StyleConstants.setForeground(nameStyle, new Color(0x6A6A6A));    String shortName = name.substring(name.lastIndexOf('.') + 1);    String message = o == null ? "(null)" : o.toString();    if (throwable != null) {        StringWriter sw = new StringWriter();        throwable.printStackTrace(new PrintWriter(sw));        message += "\n    " + sw.toString();        exceptionCount++;    }    try {        doc.insertString(doc.getLength(), " " + levelText + " ", levelStyle);        doc.insertString(doc.getLength(), " [" + shortName + "]", nameStyle);        doc.insertString(doc.getLength(), " " + message + "\n", null);    } catch (BadLocationException e) {        throw new Error(e);    }    textPane.setCaretPosition(doc.getLength());        updateStatusBar();}
private void pdfbox_f375_0()
{    List<String> infos = new ArrayList<>();    if (exceptionCount > 0) {        infos.add(exceptionCount + " exception" + (errorCount > 1 ? "s" : ""));    }    if (fatalCount > 0) {        infos.add(errorCount + " error" + (errorCount > 1 ? "s" : ""));    }    if (errorCount > 0) {        infos.add(errorCount + " error" + (errorCount > 1 ? "s" : ""));    }    if (warnCount > 0) {        infos.add(warnCount + " warning" + (warnCount > 1 ? "s" : ""));    }    if (otherCount > 0) {        infos.add(otherCount + " message" + (otherCount > 1 ? "s" : ""));    }    String info = "";    for (String str : infos) {        if (info.length() > 0) {            info += ", ";        }        info += str;    }    logLabel.setText(info);}
public void pdfbox_f376_0()
{    fatalCount = 0;    errorCount = 0;    warnCount = 0;    otherCount = 0;    exceptionCount = 0;    textPane.setText("");    logLabel.setText("");}
public final Container pdfbox_f377_0()
{    return super.getContentPane();}
public final void pdfbox_f378_0()
{    super.pack();}
public COSName pdfbox_f379_0()
{    return key;}
public void pdfbox_f380_0(COSName k)
{    key = k;}
public COSBase pdfbox_f381_0()
{    return value;}
public COSBase pdfbox_f382_0()
{    return item;}
public void pdfbox_f383_0(COSBase val)
{    this.value = val;}
public void pdfbox_f384_0(COSBase val)
{    this.item = val;}
public String pdfbox_f385_0()
{    if (key != null) {        return key.getName();    }    return "(null)";}
 final void pdfbox_f386_0(JMenu menu)
{    this.menu = menu;}
public JMenu pdfbox_f387_0()
{    return this.menu;}
public void pdfbox_f388_0(boolean isEnable)
{    menu.setEnabled(isEnable);}
public void pdfbox_f389_0(ActionListener listener)
{    for (Component comp : menu.getMenuComponents()) {        JMenuItem menuItem = (JMenuItem) comp;        removeActionListeners(menuItem);        menuItem.addActionListener(listener);    }}
private void pdfbox_f390_0(JMenuItem menuItem)
{    for (ActionListener listener : menuItem.getActionListeners()) {        menuItem.removeActionListener(listener);    }}
private static boolean pdfbox_f391_0()
{        String version = System.getProperty("java.specification.version");    final StringTokenizer st = new StringTokenizer(version, ".");    try {        int major = Integer.parseInt(st.nextToken());        int minor = 0;        if (st.hasMoreTokens()) {            minor = Integer.parseInt(st.nextToken());        }        return major > 1 || (major == 1 && minor >= 9);    } catch (NumberFormatException nfe) {                return true;    }}
public static void pdfbox_f392_0(final Object target, final Method quitHandler)
{    if (isMinJdk9()) {        try {            Desktop desktopObject = Desktop.getDesktop();            Class<?> filesHandlerClass = Class.forName("java.awt.desktop.QuitHandler");            final Method setQuitHandlerMethod = desktopObject.getClass().getMethod("setQuitHandler", filesHandlerClass);            Object osxAdapterProxy = Proxy.newProxyInstance(OSXAdapter.class.getClassLoader(), new Class[] { filesHandlerClass }, new InvocationHandler() {                @Override                public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {                    if ("handleQuitRequestWith".equals(method.getName())) {                                                quitHandler.invoke(target);                    }                    return null;                }            });            setQuitHandlerMethod.invoke(desktopObject, osxAdapterProxy);        } catch (Exception e) {            e.printStackTrace();        }        return;    }    setHandler(new OSXAdapter("handleQuit", target, quitHandler));}
public Object pdfbox_f393_0(Object proxy, Method method, Object[] args) throws Throwable
{    if ("handleQuitRequestWith".equals(method.getName())) {                quitHandler.invoke(target);    }    return null;}
public static void pdfbox_f394_0(Object target, Method aboutHandler)
{    boolean enableAboutMenu = (target != null && aboutHandler != null);    if (enableAboutMenu) {        setHandler(new OSXAdapter("handleAbout", target, aboutHandler));    }        try {        Method enableAboutMethod = macOSXApplication.getClass().getDeclaredMethod("setEnabledAboutMenu", boolean.class);        enableAboutMethod.invoke(macOSXApplication, Boolean.valueOf(enableAboutMenu));    } catch (Exception ex) {        System.err.println("OSXAdapter could not access the About Menu");        throw new RuntimeException(ex);    }}
public static void pdfbox_f395_0(Object target, Method prefsHandler)
{    boolean enablePrefsMenu = (target != null && prefsHandler != null);    if (enablePrefsMenu) {        setHandler(new OSXAdapter("handlePreferences", target, prefsHandler));    }        try {        Method enablePrefsMethod = macOSXApplication.getClass().getDeclaredMethod("setEnabledPreferencesMenu", boolean.class);        enablePrefsMethod.invoke(macOSXApplication, enablePrefsMenu);    } catch (Exception ex) {        System.err.println("OSXAdapter could not access the About Menu");        throw new RuntimeException(ex);    }}
public static void pdfbox_f396_0(Object target, Method fileHandler)
{    if (isMinJdk9()) {        try {            Desktop desktopObject = Desktop.getDesktop();            Class<?> filesHandlerClass = Class.forName("java.awt.desktop.OpenFilesHandler");            Method setOpenFileHandlerMethod = desktopObject.getClass().getMethod("setOpenFileHandler", filesHandlerClass);            Object osxAdapterProxy = Proxy.newProxyInstance(OSXAdapter.class.getClassLoader(), new Class[] { filesHandlerClass }, new OSXAdapter("openFiles", target, fileHandler) {                                                @Override                public boolean callTarget(Object openFilesEvent) {                    if (openFilesEvent != null) {                        try {                            Method getFilesMethod = openFilesEvent.getClass().getDeclaredMethod("getFiles", (Class[]) null);                            @SuppressWarnings("unchecked")                            List<File> files = (List<File>) getFilesMethod.invoke(openFilesEvent, (Object[]) null);                            this.targetMethod.invoke(this.targetObject, files.get(0).getAbsolutePath());                        } catch (Exception ex) {                            throw new RuntimeException(ex);                        }                    }                    return true;                }            });            setOpenFileHandlerMethod.invoke(desktopObject, osxAdapterProxy);        } catch (Exception e) {            e.printStackTrace();        }        return;    }    /* JDK <= 1.8, using Apple classes */    setHandler(new OSXAdapter("handleOpenFile", target, fileHandler) {                        @Override        public boolean callTarget(Object appleEvent) {            if (appleEvent != null) {                try {                    Method getFilenameMethod = appleEvent.getClass().getDeclaredMethod("getFilename", (Class[]) null);                    String filename = (String) getFilenameMethod.invoke(appleEvent, (Object[]) null);                    this.targetMethod.invoke(this.targetObject, filename);                } catch (Exception ex) {                    throw new RuntimeException(ex);                }            }            return true;        }    });}
public boolean pdfbox_f397_0(Object openFilesEvent)
{    if (openFilesEvent != null) {        try {            Method getFilesMethod = openFilesEvent.getClass().getDeclaredMethod("getFiles", (Class[]) null);            @SuppressWarnings("unchecked")            List<File> files = (List<File>) getFilesMethod.invoke(openFilesEvent, (Object[]) null);            this.targetMethod.invoke(this.targetObject, files.get(0).getAbsolutePath());        } catch (Exception ex) {            throw new RuntimeException(ex);        }    }    return true;}
public boolean pdfbox_f398_0(Object appleEvent)
{    if (appleEvent != null) {        try {            Method getFilenameMethod = appleEvent.getClass().getDeclaredMethod("getFilename", (Class[]) null);            String filename = (String) getFilenameMethod.invoke(appleEvent, (Object[]) null);            this.targetMethod.invoke(this.targetObject, filename);        } catch (Exception ex) {            throw new RuntimeException(ex);        }    }    return true;}
public static void pdfbox_f399_0(OSXAdapter adapter)
{    try {        Class<?> applicationClass = Class.forName("com.apple.eawt.Application");        if (macOSXApplication == null) {            macOSXApplication = applicationClass.getDeclaredConstructor((Class[]) null).newInstance((Object[]) null);        }        Class<?> applicationListenerClass = Class.forName("com.apple.eawt.ApplicationListener");        Method addListenerMethod = applicationClass.getDeclaredMethod("addApplicationListener", applicationListenerClass);                Object osxAdapterProxy = Proxy.newProxyInstance(OSXAdapter.class.getClassLoader(), new Class[] { applicationListenerClass }, adapter);        addListenerMethod.invoke(macOSXApplication, osxAdapterProxy);    } catch (ClassNotFoundException cnfe) {        System.err.println("This version of Mac OS X does not support the Apple EAWT.  ApplicationEvent handling has been disabled (" + cnfe + ")");    } catch (Exception ex) {                System.err.println("Mac OS X Adapter could not talk to EAWT:");        throw new RuntimeException(ex);    }}
public boolean pdfbox_f400_0(Object appleEvent) throws InvocationTargetException, IllegalAccessException
{    Object result = targetMethod.invoke(targetObject, (Object[]) null);    if (result == null) {        return true;    }    return Boolean.valueOf(result.toString());}
public Object pdfbox_f401_0(Object proxy, Method method, Object[] args) throws Throwable
{    if (isCorrectMethod(method, args)) {        boolean handled = callTarget(args[0]);        setApplicationEventHandled(args[0], handled);    }        return null;}
protected boolean pdfbox_f402_0(Method method, Object[] args)
{    return (targetMethod != null && proxySignature.equals(method.getName()) && args.length == 1);}
protected void pdfbox_f403_0(Object event, boolean handled)
{    if (event != null) {        try {            Method setHandledMethod = event.getClass().getDeclaredMethod("setHandled", boolean.class);                        setHandledMethod.invoke(event, Boolean.valueOf(handled));        } catch (Exception ex) {            System.err.println("OSXAdapter was unable to handle an ApplicationEvent: " + event);            throw new RuntimeException(ex);        }    }}
public COSDictionary pdfbox_f404_0()
{    return dict;}
public int pdfbox_f405_0()
{    return pageNum;}
public String pdfbox_f406_0()
{    return "Page: " + pageNum + (pageLabel == null ? "" : " - " + pageLabel);}
public String pdfbox_f407_0()
{    StringBuilder sb = new StringBuilder();    sb.append("Root/Pages");    COSDictionary node = dict;    while (node.containsKey(COSName.PARENT)) {        COSBase base = node.getDictionaryObject(COSName.PARENT);        if (!(base instanceof COSDictionary)) {            return "";        }        COSDictionary parent = (COSDictionary) base;        base = parent.getDictionaryObject(COSName.KIDS);        if (!(base instanceof COSArray)) {            return "";        }        COSArray kids = (COSArray) base;        int idx = kids.indexOfObject(node);        sb.append("/Kids/[").append(idx).append("]");        node = parent;    }    return sb.toString();}
private static URL pdfbox_f408_0(String name)
{    String fullName = "/org/apache/pdfbox/debugger/" + name + ".png";    return PDFTreeCellRenderer.class.getResource(fullName);}
public Component pdfbox_f409_0(JTree tree, Object nodeValue, boolean isSelected, boolean expanded, boolean leaf, int row, boolean componentHasFocus)
{    Component component = super.getTreeCellRendererComponent(tree, toTreeObject(nodeValue), isSelected, expanded, leaf, row, componentHasFocus);    setIcon(lookupIconWithOverlay(nodeValue));    return component;}
private Object pdfbox_f410_0(Object nodeValue)
{    Object result = nodeValue;    if (nodeValue instanceof MapEntry || nodeValue instanceof ArrayEntry) {        String key;        Object object;        Object value;        COSBase item;        if (nodeValue instanceof MapEntry) {            MapEntry entry = (MapEntry) nodeValue;            key = entry.getKey().getName();            object = toTreeObject(entry.getValue());            value = entry.getValue();            item = entry.getItem();        } else {            ArrayEntry entry = (ArrayEntry) nodeValue;            key = Integer.toString(entry.getIndex());            object = toTreeObject(entry.getValue());            value = entry.getValue();            item = entry.getItem();        }        String stringResult = key;        if (object instanceof String && ((String) object).length() > 0) {            stringResult += ":  " + object;            if (item instanceof COSObject) {                COSObject indirect = (COSObject) item;                stringResult += " [" + indirect.getObjectNumber() + " " + indirect.getGenerationNumber() + " R]";            }            stringResult += toTreePostfix(value);        }        result = stringResult;    } else if (nodeValue instanceof COSBoolean) {        result = Boolean.toString(((COSBoolean) nodeValue).getValue());    } else if (nodeValue instanceof COSFloat) {        result = Float.toString(((COSFloat) nodeValue).floatValue());    } else if (nodeValue instanceof COSInteger) {        result = Integer.toString(((COSInteger) nodeValue).intValue());    } else if (nodeValue instanceof COSString) {        String text = ((COSString) nodeValue).getString();                for (char c : text.toCharArray()) {            if (Character.isISOControl(c)) {                text = "<" + ((COSString) nodeValue).toHexString() + ">";                break;            }        }        result = text;    } else if (nodeValue instanceof COSName) {        result = ((COSName) nodeValue).getName();    } else if (nodeValue instanceof COSNull || nodeValue == null) {        result = "";    } else if (nodeValue instanceof COSDictionary) {        COSDictionary dict = (COSDictionary) nodeValue;        if (COSName.XREF.equals(dict.getCOSName(COSName.TYPE))) {            result = "";        } else {            result = "(" + dict.size() + ")";        }    } else if (nodeValue instanceof COSArray) {        COSArray array = (COSArray) nodeValue;        result = "(" + array.size() + ")";    } else if (nodeValue instanceof DocumentEntry) {        result = nodeValue.toString();    }    return result;}
private String pdfbox_f411_0(Object nodeValue)
{    if (nodeValue instanceof COSDictionary) {        StringBuilder sb = new StringBuilder();        COSDictionary dict = (COSDictionary) nodeValue;        if (COSName.ANNOT.equals(dict.getCOSName(COSName.TYPE)) && COSName.WIDGET.equals(dict.getCOSName(COSName.SUBTYPE)) || dict.containsKey(COSName.T) && dict.containsKey(COSName.KIDS)) {            String name = dict.getString(COSName.T);            if (name != null) {                sb.append("   Name: ");                sb.append(name);                sb.append(' ');            }        }        if (dict.containsKey(COSName.TYPE)) {            COSName type = dict.getCOSName(COSName.TYPE);            if (type != null) {                sb.append("   /T:").append(type.getName());            }        }        if (dict.containsKey(COSName.SUBTYPE)) {            COSName subtype = dict.getCOSName(COSName.SUBTYPE);            if (subtype != null) {                sb.append("  /S:").append(subtype.getName());            }        }        return sb.toString();    } else {        return "";    }}
private ImageIcon pdfbox_f412_0(Object nodeValue)
{    ImageIcon icon = lookupIcon(nodeValue);    boolean isIndirect = false;    boolean isStream = false;    if (nodeValue instanceof MapEntry) {        MapEntry entry = (MapEntry) nodeValue;        if (entry.getItem() instanceof COSObject) {            isIndirect = true;            isStream = entry.getValue() instanceof COSStream;        }    } else if (nodeValue instanceof ArrayEntry) {        ArrayEntry entry = (ArrayEntry) nodeValue;        if (entry.getItem() instanceof COSObject) {            isIndirect = true;            isStream = entry.getValue() instanceof COSStream;        }    }    if (isIndirect && !isStream) {        OverlayIcon overlay = new OverlayIcon(icon);        overlay.add(ICON_INDIRECT);        return overlay;    }    return icon;}
private ImageIcon pdfbox_f413_0(Object nodeValue)
{    if (nodeValue instanceof MapEntry) {        MapEntry entry = (MapEntry) nodeValue;        return lookupIcon(entry.getValue());    } else if (nodeValue instanceof ArrayEntry) {        ArrayEntry entry = (ArrayEntry) nodeValue;        return lookupIcon(entry.getValue());    } else if (nodeValue instanceof COSBoolean) {        return ICON_BOOLEAN;    } else if (nodeValue instanceof COSFloat) {        return ICON_REAL;    } else if (nodeValue instanceof COSInteger) {        return ICON_INTEGER;    } else if (nodeValue instanceof COSString) {        String text = ((COSString) nodeValue).getString();                for (char c : text.toCharArray()) {            if (Character.isISOControl(c)) {                return ICON_HEX;            }        }        return ICON_STRING;    } else if (nodeValue instanceof COSName) {        return ICON_NAME;    } else if (nodeValue instanceof COSNull || nodeValue == null) {        return ICON_NULL;    } else if (nodeValue instanceof COSStream) {        return ICON_STREAM_DICT;    } else if (nodeValue instanceof COSDictionary) {        return ICON_DICT;    } else if (nodeValue instanceof COSArray) {        return ICON_ARRAY;    } else if (nodeValue instanceof DocumentEntry) {        return ICON_PDF;    } else if (nodeValue instanceof PageEntry) {        return ICON_PAGE;    } else {        return null;    }}
 void pdfbox_f414_0(ImageIcon overlay)
{    overlays.add(overlay);}
public synchronized void pdfbox_f415_0(Component c, Graphics g, int x, int y)
{    base.paintIcon(c, g, x, y);    overlays.forEach(icon -> icon.paintIcon(c, g, x, y));}
public Object pdfbox_f417_0(Object parent, int index)
{    Object retval = null;    if (parent instanceof COSArray) {        ArrayEntry entry = new ArrayEntry();        entry.setIndex(index);        entry.setValue(((COSArray) parent).getObject(index));        entry.setItem(((COSArray) parent).get(index));        retval = entry;    } else if (parent instanceof COSDictionary) {        COSDictionary dict = (COSDictionary) parent;        List<COSName> keys = new ArrayList<>(dict.keySet());        Collections.sort(keys);        COSName key = keys.get(index);        COSBase value = dict.getDictionaryObject(key);        MapEntry entry = new MapEntry();        entry.setKey(key);        entry.setValue(value);        entry.setItem(dict.getItem(key));        retval = entry;    } else if (parent instanceof MapEntry) {        retval = getChild(((MapEntry) parent).getValue(), index);    } else if (parent instanceof ArrayEntry) {        retval = getChild(((ArrayEntry) parent).getValue(), index);    } else if (parent instanceof COSDocument) {        retval = ((COSDocument) parent).getObjects().get(index);    } else if (parent instanceof DocumentEntry) {        retval = ((DocumentEntry) parent).getPage(index);    } else if (parent instanceof PageEntry) {        retval = getChild(((PageEntry) parent).getDict(), index);    } else if (parent instanceof COSObject) {        retval = ((COSObject) parent).getObject();    } else {        throw new IllegalArgumentException("Unknown COS type " + parent.getClass().getName());    }    return retval;}
public int pdfbox_f418_0(Object parent)
{    int retval = 0;    if (parent instanceof COSArray) {        retval = ((COSArray) parent).size();    } else if (parent instanceof COSDictionary) {        retval = ((COSDictionary) parent).size();    } else if (parent instanceof MapEntry) {        retval = getChildCount(((MapEntry) parent).getValue());    } else if (parent instanceof ArrayEntry) {        retval = getChildCount(((ArrayEntry) parent).getValue());    } else if (parent instanceof COSDocument) {        retval = ((COSDocument) parent).getObjects().size();    } else if (parent instanceof DocumentEntry) {        retval = ((DocumentEntry) parent).getPageCount();    } else if (parent instanceof PageEntry) {        retval = getChildCount(((PageEntry) parent).getDict());    } else if (parent instanceof COSObject) {        retval = 1;    }    return retval;}
public int pdfbox_f419_0(Object parent, Object child)
{    int retval = -1;    if (parent != null && child != null) {        if (parent instanceof COSArray) {            COSArray array = (COSArray) parent;            if (child instanceof ArrayEntry) {                ArrayEntry arrayEntry = (ArrayEntry) child;                retval = arrayEntry.getIndex();            } else {                retval = array.indexOf((COSBase) child);            }        } else if (parent instanceof COSDictionary) {            MapEntry entry = (MapEntry) child;            COSDictionary dict = (COSDictionary) parent;            List<COSName> keys = new ArrayList<>(dict.keySet());            Collections.sort(keys);            for (int i = 0; retval == -1 && i < keys.size(); i++) {                if (keys.get(i).equals(entry.getKey())) {                    retval = i;                }            }        } else if (parent instanceof MapEntry) {            retval = getIndexOfChild(((MapEntry) parent).getValue(), child);        } else if (parent instanceof ArrayEntry) {            retval = getIndexOfChild(((ArrayEntry) parent).getValue(), child);        } else if (parent instanceof COSDocument) {            retval = ((COSDocument) parent).getObjects().indexOf(child);        } else if (parent instanceof DocumentEntry) {            retval = ((DocumentEntry) parent).indexOf((PageEntry) child);        } else if (parent instanceof PageEntry) {            retval = getIndexOfChild(((PageEntry) parent).getDict(), child);        } else if (parent instanceof COSObject) {            retval = 0;        } else {            throw new IllegalArgumentException("Unknown COS type " + parent.getClass().getName());        }    }    return retval;}
public Object pdfbox_f420_0()
{    return root;}
public boolean pdfbox_f421_0(Object node)
{    boolean isLeaf = !(node instanceof COSDictionary || node instanceof COSArray || node instanceof COSDocument || node instanceof DocumentEntry || node instanceof PageEntry || node instanceof COSObject || (node instanceof MapEntry && !isLeaf(((MapEntry) node).getValue())) || (node instanceof ArrayEntry && !isLeaf(((ArrayEntry) node).getValue())));    return isLeaf;}
public void pdfbox_f424_0(MouseEvent e)
{    Window viewer = LogDialog.instance().getOwner();        LogDialog.instance().setSize(800, 400);    LogDialog.instance().setVisible(true);    LogDialog.instance().setLocation(viewer.getLocationOnScreen().x + viewer.getWidth() / 2, viewer.getLocationOnScreen().y + viewer.getHeight() / 2);}
public JLabel pdfbox_f425_0()
{    return statusLabel;}
public JLabel pdfbox_f426_0()
{    return logLabel;}
public void pdfbox_f427_0()
{    filePaths.clear();}
public boolean pdfbox_f428_0()
{    return filePaths.isEmpty();}
public void pdfbox_f429_0(String path)
{    if (filePaths.size() >= maximum + 1 && path != null) {        filePaths.remove();    }    filePaths.add(path);}
public void pdfbox_f430_0(String path)
{    if (filePaths.contains(path)) {        filePaths.remove(path);    }}
public List<String> pdfbox_f431_0()
{    if (!isEmpty()) {        List<String> files = filePaths.stream().filter(path -> new File(path).exists()).collect(Collectors.toList());        if (files.size() > maximum) {            files.remove(0);        }        return files;    }    return null;}
public void pdfbox_f432_0() throws IOException
{    writeHistoryToPref(filePaths);}
private String[] pdfbox_f433_0(String fullPath)
{    int allowedStringLength = Preferences.MAX_VALUE_LENGTH;    List<String> pieces = new ArrayList<>();    int beginIndex = 0;    int remainingLength = fullPath.length();    int endIndex = 0;    while (remainingLength > 0) {        endIndex += remainingLength >= allowedStringLength ? allowedStringLength : remainingLength;        pieces.add(fullPath.substring(beginIndex, endIndex));        beginIndex = endIndex;        remainingLength = fullPath.length() - endIndex;    }    return pieces.toArray(new String[pieces.size()]);}
private void pdfbox_f434_0(Queue<String> filePaths)
{    if (filePaths.isEmpty()) {        return;    }    Preferences node = pref.node(KEY);    node.putInt(HISTORY_LENGTH, filePaths.size());    int fileCount = 1;    for (String path : filePaths) {        String[] pieces = breakString(path);        node.putInt(String.format(PIECES_LENGTH_KEY, fileCount), pieces.length);        for (int i = 0; i < pieces.length; i++) {            node.put(String.format(PATH_KEY, fileCount, i), pieces[i]);        }        fileCount++;    }}
private Queue<String> pdfbox_f435_0()
{    Preferences node = pref.node(KEY);    int historyLength = node.getInt(HISTORY_LENGTH, 0);    if (historyLength == 0) {        return null;    }    Queue<String> history = new ArrayDeque<>();    for (int i = 1; i <= historyLength; i++) {        int totalPieces = node.getInt(String.format(PIECES_LENGTH_KEY, i), 0);        StringBuilder stringBuilder = new StringBuilder();        for (int j = 0; j < totalPieces; j++) {            String piece = node.get(String.format(PATH_KEY, i, j), "");            stringBuilder.append(piece);        }        history.add(stringBuilder.toString());    }    return history;}
public static RotationMenu pdfbox_f436_0()
{    if (instance == null) {        instance = new RotationMenu();    }    return instance;}
public void pdfbox_f437_0(String selection)
{    if (ROTATE_0_DEGREES.equals(selection)) {        rotate0Item.setSelected(true);    } else if (ROTATE_90_DEGREES.equals(selection)) {        rotate90Item.setSelected(true);    } else if (ROTATE_180_DEGREES.equals(selection)) {        rotate180Item.setSelected(true);    } else if (ROTATE_270_DEGREES.equals(selection)) {        rotate270Item.setSelected(true);    } else {        throw new IllegalArgumentException();    }}
public static boolean pdfbox_f438_0(String actionCommand)
{    return ROTATE_0_DEGREES.equals(actionCommand) || ROTATE_90_DEGREES.equals(actionCommand) || ROTATE_180_DEGREES.equals(actionCommand) || ROTATE_270_DEGREES.equals(actionCommand);}
public static int pdfbox_f439_0()
{    if (instance.rotate90Item.isSelected()) {        return 90;    }    if (instance.rotate180Item.isSelected()) {        return 180;    }    if (instance.rotate270Item.isSelected()) {        return 270;    }    return 0;}
public static int pdfbox_f440_0(String actionCommand)
{    if (ROTATE_0_DEGREES.equals(actionCommand)) {        return 0;    } else if (ROTATE_90_DEGREES.equals(actionCommand)) {        return 90;    } else if (ROTATE_180_DEGREES.equals(actionCommand)) {        return 180;    } else if (ROTATE_270_DEGREES.equals(actionCommand)) {        return 270;    } else {        throw new IllegalArgumentException();    }}
private JMenu pdfbox_f441_0()
{    JMenu menu = new JMenu();    menu.setText("Rotation");    rotate0Item = new JRadioButtonMenuItem();    rotate90Item = new JRadioButtonMenuItem();    rotate180Item = new JRadioButtonMenuItem();    rotate270Item = new JRadioButtonMenuItem();    rotate0Item.setSelected(true);    ButtonGroup bg = new ButtonGroup();    bg.add(rotate0Item);    bg.add(rotate90Item);    bg.add(rotate180Item);    bg.add(rotate270Item);    rotate0Item.setText(ROTATE_0_DEGREES);    rotate90Item.setText(ROTATE_90_DEGREES);    rotate180Item.setText(ROTATE_180_DEGREES);    rotate270Item.setText(ROTATE_270_DEGREES);    menu.add(rotate0Item);    menu.add(rotate90Item);    menu.add(rotate180Item);    menu.add(rotate270Item);    return menu;}
public static void pdfbox_f442_0(Frame owner)
{    instance = new TextDialog(owner);}
public static TextDialog pdfbox_f443_0()
{    return instance;}
public void pdfbox_f444_0()
{    textPane.setText("");}
public void pdfbox_f445_0(String text)
{    textPane.setText(text);}
public final Container pdfbox_f446_0()
{    return super.getContentPane();}
public final void pdfbox_f447_0()
{    super.pack();}
public List<Highlighter.Highlight> pdfbox_f448_1(String searchKey, boolean isCaseSensitive)
{    List<Highlighter.Highlight> highlights = new ArrayList<>();    if (searchKey != null) {        highlighter.removeAllHighlights();        if ("".equals(searchKey)) {            return highlights;        }        String textContent;        try {            textContent = document.getText(0, document.getLength());        } catch (BadLocationException e) {                        return highlights;        }        if (!isCaseSensitive) {            textContent = textContent.toLowerCase();            searchKey = searchKey.toLowerCase();        }        int searchKeyLength = searchKey.length();        int startAt = 0;        int resultantOffset;        int indexOfHighLight = 0;        while ((resultantOffset = textContent.indexOf(searchKey, startAt)) != -1) {            try {                highlighter.addHighlight(resultantOffset, resultantOffset + searchKeyLength, painter);                highlights.add(highlighter.getHighlights()[indexOfHighLight++]);                startAt = resultantOffset + searchKeyLength;            } catch (BadLocationException e) {                            }        }    }    return highlights;}
public void pdfbox_f449_0(ActionEvent actionEvent)
{    if (totalMatch != 0 && currentMatch != 0) {        currentMatch = currentMatch - 1;        int offset = highlights.get(currentMatch).getStartOffset();        scrollToWord(offset);        updateHighLighter(currentMatch, currentMatch + 1);        updateNavigationButtons();    }}
public void pdfbox_f450_0(ActionEvent actionEvent)
{    if (totalMatch != 0 && currentMatch != totalMatch - 1) {        currentMatch = currentMatch + 1;        int offset = highlights.get(currentMatch).getStartOffset();        scrollToWord(offset);        updateHighLighter(currentMatch, currentMatch - 1);        updateNavigationButtons();    }}
public JPanel pdfbox_f451_0()
{    return searchPanel.getPanel();}
public void pdfbox_f452_0(DocumentEvent documentEvent)
{    search(documentEvent);}
public void pdfbox_f453_0(DocumentEvent documentEvent)
{    search(documentEvent);}
public void pdfbox_f454_0(DocumentEvent documentEvent)
{    search(documentEvent);}
private void pdfbox_f455_1(DocumentEvent documentEvent)
{    try {        String word = documentEvent.getDocument().getText(0, documentEvent.getDocument().getLength());        if (word.isEmpty()) {            nextAction.setEnabled(false);            previousAction.setEnabled(false);            searchPanel.reset();            textComponent.getHighlighter().removeAllHighlights();            return;        }        search(word);    } catch (BadLocationException e) {            }}
private void pdfbox_f456_0(String word)
{    highlights = searchEngine.search(word, searchPanel.isCaseSensitive());    if (!highlights.isEmpty()) {        totalMatch = highlights.size();        currentMatch = 0;        scrollToWord(highlights.get(0).getStartOffset());        updateHighLighter(currentMatch, currentMatch - 1);        updateNavigationButtons();    } else {        searchPanel.updateCounterLabel(0, 0);    }}
private void pdfbox_f457_0()
{    if (currentMatch == 0) {        previousAction.setEnabled(false);    } else if (currentMatch >= 1 && currentMatch <= (totalMatch - 1)) {        previousAction.setEnabled(true);    }    if (currentMatch == (totalMatch - 1)) {        nextAction.setEnabled(false);    } else if (currentMatch < (totalMatch - 1)) {        nextAction.setEnabled(true);    }    searchPanel.updateCounterLabel(currentMatch + 1, totalMatch);}
private void pdfbox_f458_1(int offset)
{    try {        textComponent.scrollRectToVisible(textComponent.modelToView(offset));    } catch (BadLocationException e) {            }}
private void pdfbox_f459_0(final int presentIndex, final int previousIndex)
{    if (previousIndex != -1) {        changeHighlighter(previousIndex, PAINTER);    }    changeHighlighter(presentIndex, SELECTION_PAINTER);}
private void pdfbox_f460_1(int index, Highlighter.HighlightPainter newPainter)
{    Highlighter highlighter = textComponent.getHighlighter();    Highlighter.Highlight highLight = highlights.get(index);    highlighter.removeHighlight(highLight);    try {        highlighter.addHighlight(highLight.getStartOffset(), highLight.getEndOffset(), newPainter);        highlights.set(index, highlighter.getHighlights()[highlighter.getHighlights().length - 1]);    } catch (BadLocationException e) {            }}
public void pdfbox_f461_0(ChangeEvent changeEvent)
{    if (changeEvent.getSource() instanceof JCheckBox) {        search(searchPanel.getSearchWord());    }}
public void pdfbox_f464_0(ComponentEvent componentEvent)
{    searchPanel.reFocus();}
public void pdfbox_f465_0(ComponentEvent componentEvent)
{    textComponent.getHighlighter().removeAllHighlights();}
public void pdfbox_f466_0(PDFDebugger frame)
{    searchPanel.addMenuListeners(frame);}
public void pdfbox_f467_0(PDFDebugger frame)
{    searchPanel.removeMenuListeners(frame);}
public void pdfbox_f468_0(ActionEvent actionEvent)
{    panel.setVisible(false);    closeAction.setEnabled(false);    panel.getParent().transferFocus();}
public void pdfbox_f469_0(ActionEvent actionEvent)
{    if (!panel.isVisible()) {        panel.setVisible(true);        panel.getParent().validate();        return;    }    reFocus();}
private void pdfbox_f470_0(DocumentListener documentListener, ChangeListener changeListener, ComponentListener compListener)
{    searchField = new JTextField();    searchField.getDocument().addDocumentListener(documentListener);    counterLabel = new JLabel();    counterLabel.setVisible(false);    JButton nextButton = new JButton();    nextButton.setAction(nextAction);    nextButton.setText("Next");    JButton previousButton = new JButton();    previousButton.setAction(previousAction);    previousButton.setText("Previous");    caseSensitive = new JCheckBox("Match case");    caseSensitive.setSelected(false);    caseSensitive.addChangeListener(changeListener);    caseSensitive.setToolTipText("Check for case sensitive search");    JButton crossButton = new JButton();    crossButton.setAction(closeAction);    crossButton.setText("Done");    closeAction.setEnabled(false);    panel = new JPanel();    panel.setBorder(BorderFactory.createMatteBorder(1, 0, 0, 0, Color.LIGHT_GRAY));    panel.setBackground(new Color(230, 230, 230));    panel.setLayout(new BoxLayout(panel, BoxLayout.X_AXIS));    panel.add(Box.createHorizontalGlue());    panel.add(searchField);    panel.add(counterLabel);    panel.add(previousButton);    panel.add(nextButton);    panel.add(caseSensitive);    panel.add(Box.createRigidArea(new Dimension(5, 0)));    panel.add(crossButton);    panel.addComponentListener(compListener);    searchField.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), closeAction);}
 boolean pdfbox_f471_0()
{    return caseSensitive.isSelected();}
 String pdfbox_f472_0()
{    return searchField.getText();}
 void pdfbox_f473_0()
{    counterLabel.setVisible(false);}
 void pdfbox_f474_0(int now, int total)
{    if (!counterLabel.isVisible()) {        counterLabel.setVisible(true);    }    if (total == 0) {        counterLabel.setText(" No match found ");        nextAction.setEnabled(false);        return;    }    counterLabel.setText(" " + now + " of " + total + " ");}
 JPanel pdfbox_f475_0()
{    return panel;}
public void pdfbox_f476_0()
{    searchField.requestFocus();    String searchKey = searchField.getText();    searchField.setText(searchKey);    searchField.setSelectionStart(0);    searchField.setSelectionEnd(searchField.getText().length());    closeAction.setEnabled(true);}
public void pdfbox_f477_0(PDFDebugger frame)
{    frame.getFindMenu().setEnabled(true);    frame.getFindMenuItem().addActionListener(findAction);    frame.getFindNextMenuItem().addActionListener(nextAction);    frame.getFindPreviousMenuItem().addActionListener(previousAction);}
public void pdfbox_f478_0(PDFDebugger frame)
{    frame.getFindMenu().setEnabled(false);    frame.getFindMenuItem().removeActionListener(findAction);    frame.getFindNextMenuItem().removeActionListener(nextAction);    frame.getFindPreviousMenuItem().removeActionListener(previousAction);}
public Point pdfbox_f479_0(MouseEvent event)
{    if (event != null) {        TreePath path = getClosestPathForLocation(event.getX(), event.getY());        if (path == null) {            return null;        }        setSelectionPath(path);        treePopupMenu.removeAll();        addPopupMenuItems(path);        return event.getPoint();    }    return null;}
private void pdfbox_f480_0(TreePath nodePath)
{    Object obj = nodePath.getLastPathComponent();    treePopupMenu.add(getTreePathMenuItem(nodePath));    if (obj instanceof MapEntry) {        obj = ((MapEntry) obj).getValue();    } else if (obj instanceof ArrayEntry) {        obj = ((ArrayEntry) obj).getValue();    }    if (!(obj instanceof COSStream)) {        return;    }    treePopupMenu.addSeparator();    COSStream stream = (COSStream) obj;    treePopupMenu.add(getStreamSaveMenu(stream, nodePath));    if (stream.getFilters() != null) {        if (stream.getFilters() instanceof COSArray && ((COSArray) stream.getFilters()).size() >= 2) {            getPartiallyDecodedStreamSaveMenu(stream).forEach(treePopupMenu::add);        }        treePopupMenu.add(getRawStreamSaveMenu(stream));    }    JMenuItem open = getFileOpenMenu(stream, nodePath);    if (open != null) {        treePopupMenu.addSeparator();        treePopupMenu.add(open);    }}
private JMenuItem pdfbox_f481_0(final TreePath path)
{    JMenuItem copyPathMenuItem = new JMenuItem("Copy Tree Path");    copyPathMenuItem.addActionListener(actionEvent -> {        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();        clipboard.setContents(new StringSelection(new TreeStatus(rootNode).getStringForPath(path)), null);    });    return copyPathMenuItem;}
private JMenuItem pdfbox_f482_0(final COSStream cosStream)
{    JMenuItem saveMenuItem = new JMenuItem("Save Raw Stream (" + getFilters(cosStream) + ") As...");    saveMenuItem.addActionListener(actionEvent -> {        try {            byte[] bytes = IOUtils.toByteArray(cosStream.createRawInputStream());            saveStream(bytes, null, null);        } catch (IOException e) {            e.printStackTrace();        }    });    return saveMenuItem;}
private String pdfbox_f483_0(COSStream cosStream)
{    StringBuilder sb = new StringBuilder();    COSBase filters = cosStream.getFilters();    if (filters instanceof COSName) {        sb.append(((COSName) filters).getName());    } else if (filters instanceof COSArray) {        COSArray filterArray = (COSArray) filters;        for (int i = 0; i < filterArray.size(); i++) {            if (i > 0) {                sb.append(", ");            }            sb.append(((COSName) filterArray.get(i)).getName());        }    }    return sb.toString();}
private JMenuItem pdfbox_f484_0(final COSStream cosStream, final TreePath nodePath)
{        final String extension = getFileExtensionForStream(cosStream, nodePath);    final FileFilter fileFilter;    final String format;    if (extension != null) {        switch(extension) {            case "pdb":                fileFilter = new FileNameExtensionFilter("Type 1 Font (*.pfb)", "pfb");                break;            case "ttf":                fileFilter = new FileNameExtensionFilter("TrueType Font (*.ttf)", "ttf");                break;            case "cff":                fileFilter = new FileNameExtensionFilter("Compact Font Format (*.cff)", "cff");                break;            case "otf":                fileFilter = new FileNameExtensionFilter("OpenType Font (*.otf)", "otf");                break;            default:                fileFilter = null;                break;        }        format = " " + extension.toUpperCase();    } else {        fileFilter = null;        format = "";    }    JMenuItem saveMenuItem = new JMenuItem("Save Stream As" + format + "...");    saveMenuItem.addActionListener(actionEvent -> {        try {            byte[] bytes = IOUtils.toByteArray(cosStream.createInputStream());            saveStream(bytes, fileFilter, extension);        } catch (IOException e) {            e.printStackTrace();        }    });    return saveMenuItem;}
private String pdfbox_f485_0(final COSStream cosStream, final TreePath nodePath)
{    String name = nodePath.getLastPathComponent().toString();    switch(name) {        case "FontFile":            return "pfb";        case "FontFile2":            return "ttf";        case "FontFile3":            return cosStream.getCOSName(COSName.SUBTYPE) == COSName.OPEN_TYPE ? "otf" : "cff";        default:            return null;    }}
private JMenuItem pdfbox_f486_0(final COSStream cosStream, final TreePath nodePath)
{        final String extension = getFileExtensionForStream(cosStream, nodePath);    if (extension == null) {        return null;    }    JMenuItem openMenuItem = new JMenuItem("Open with Default Application");    openMenuItem.addActionListener(actionEvent -> {        try {            File temp = File.createTempFile("pdfbox", "." + extension);            temp.deleteOnExit();            try (InputStream is = cosStream.createInputStream();                FileOutputStream os = new FileOutputStream(temp)) {                IOUtils.copy(is, os);            }            Desktop.getDesktop().open(temp);        } catch (IOException e) {            e.printStackTrace();        }    });    return openMenuItem;}
private List<JMenuItem> pdfbox_f487_0(final COSStream cosStream)
{    List<JMenuItem> menuItems = new ArrayList<>();    PDStream stream = new PDStream(cosStream);    List<COSName> filters = stream.getFilters();    for (int i = filters.size() - 1; i >= 1; i--) {        menuItems.add(getPartialStreamSavingMenuItem(i, stream));    }    return menuItems;}
private JMenuItem pdfbox_f488_0(final int indexOfStopFilter, final PDStream stream)
{    List<COSName> filters = stream.getFilters();    final List<String> stopFilters = new ArrayList<>(1);    stopFilters.add(filters.get(indexOfStopFilter).getName());    StringBuilder nameListBuilder = new StringBuilder();    for (int i = indexOfStopFilter; i < filters.size(); i++) {        nameListBuilder.append(filters.get(i).getName()).append(" & ");    }    nameListBuilder.delete(nameListBuilder.lastIndexOf("&"), nameListBuilder.length());    JMenuItem menuItem = new JMenuItem("Keep " + nameListBuilder.toString() + "...");    menuItem.addActionListener(actionEvent -> {        try {            InputStream data = stream.createInputStream(stopFilters);            saveStream(IOUtils.toByteArray(data), null, null);        } catch (IOException e) {            e.printStackTrace();        }    });    return menuItem;}
private void pdfbox_f489_0(byte[] bytes, FileFilter filter, String extension) throws IOException
{    FileOpenSaveDialog saveDialog = new FileOpenSaveDialog(getParent(), filter);    saveDialog.saveFile(bytes, extension);}
public static ViewMenu pdfbox_f490_0(PDFDebugger pdfDebugger)
{    if (instance == null) {        instance = new ViewMenu(pdfDebugger);    }    return instance;}
public static boolean pdfbox_f491_0(String actionCommand)
{    return SHOW_TEXT_STRIPPER.equals(actionCommand) || SHOW_TEXT_STRIPPER_BEADS.equals(actionCommand) || SHOW_FONT_BBOX.equals(actionCommand) || SHOW_GLYPH_BOUNDS.equals(actionCommand) || ALLOW_SUBSAMPLING.equals(actionCommand);}
public static boolean pdfbox_f492_0()
{    return instance.showTextStripper.isSelected();}
public static boolean pdfbox_f493_0()
{    return instance.showTextStripperBeads.isSelected();}
public static boolean pdfbox_f494_0()
{    return instance.showFontBBox.isSelected();}
public static boolean pdfbox_f495_0()
{    return instance.showGlyphBounds.isSelected();}
public static boolean pdfbox_f496_0(ActionEvent actionEvent)
{    return EXTRACT_TEXT.equals(actionEvent.getActionCommand());}
public static boolean pdfbox_f497_0()
{    return instance.allowSubsampling.isSelected();}
private JMenu pdfbox_f498_0()
{    JMenu viewMenu = new JMenu("View");    viewMenu.setMnemonic('V');    if (pdfDebugger.isPageMode()) {        viewModeItem = new JMenuItem("Show Internal Structure");    } else {        viewModeItem = new JMenuItem("Show Pages");    }    viewModeItem.addActionListener(actionEvent -> {        if (pdfDebugger.isPageMode()) {            viewModeItem.setText("Show Pages");            pdfDebugger.setPageMode(false);        } else {            viewModeItem.setText("Show Internal Structure");            pdfDebugger.setPageMode(true);        }        if (pdfDebugger.hasDocument()) {            pdfDebugger.initTree();        }    });    viewMenu.add(viewModeItem);    ZoomMenu zoomMenu = ZoomMenu.getInstance();    zoomMenu.setEnableMenu(false);    viewMenu.add(zoomMenu.getMenu());    RotationMenu rotationMenu = RotationMenu.getInstance();    rotationMenu.setEnableMenu(false);    viewMenu.add(rotationMenu.getMenu());    viewMenu.addSeparator();    showTextStripper = new JCheckBoxMenuItem(SHOW_TEXT_STRIPPER);    showTextStripper.setEnabled(false);    viewMenu.add(showTextStripper);    showTextStripperBeads = new JCheckBoxMenuItem(SHOW_TEXT_STRIPPER_BEADS);    showTextStripperBeads.setEnabled(false);    viewMenu.add(showTextStripperBeads);    showFontBBox = new JCheckBoxMenuItem(SHOW_FONT_BBOX);    showFontBBox.setEnabled(false);    viewMenu.add(showFontBBox);    showGlyphBounds = new JCheckBoxMenuItem(SHOW_GLYPH_BOUNDS);    showGlyphBounds.setEnabled(false);    viewMenu.add(showGlyphBounds);    viewMenu.addSeparator();    allowSubsampling = new JCheckBoxMenuItem(ALLOW_SUBSAMPLING);    allowSubsampling.setEnabled(false);    viewMenu.add(allowSubsampling);    viewMenu.addSeparator();    extractTextMenuItem = new JMenuItem(EXTRACT_TEXT);    extractTextMenuItem.setEnabled(false);    viewMenu.add(extractTextMenuItem);    return viewMenu;}
public void pdfbox_f499_0(Rectangle rect)
{    Preferences node = pref.node(KEY);    node.putInt("X", rect.x);    node.putInt("Y", rect.y);    node.putInt("W", rect.width);    node.putInt("H", rect.height);}
public Rectangle pdfbox_f500_0()
{    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();    Preferences node = pref.node(KEY);    int x = node.getInt("X", screenSize.width / 4);    int y = node.getInt("Y", screenSize.height / 4);    int w = node.getInt("W", screenSize.width / 2);    int h = node.getInt("H", screenSize.height / 2);    return new Rectangle(x, y, w, h);}
public void pdfbox_f501_0(int divider)
{    Preferences node = pref.node(KEY);    node.putInt("DIV", divider);}
public int pdfbox_f502_0()
{    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();    Preferences node = pref.node(KEY);    return node.getInt("DIV", screenSize.width / 8);}
public void pdfbox_f503_0(int extendedState)
{    Preferences node = pref.node(KEY);    node.putInt("EXTSTATE", extendedState);}
public int pdfbox_f504_0()
{    Preferences node = pref.node(KEY);    return node.getInt("EXTSTATE", Frame.NORMAL);}
public static ZoomMenu pdfbox_f505_0()
{    if (instance == null) {        instance = new ZoomMenu();    }    return instance;}
public void pdfbox_f506_0(float zoomValue)
{    String selection = (int) (zoomValue * 100) + "%";    for (Component comp : menu.getMenuComponents()) {        JRadioButtonMenuItem menuItem = (JRadioButtonMenuItem) comp;        if (menuItem.getText().equals(selection)) {            menuItem.setSelected(true);            return;        }    }    throw new IllegalArgumentException("no zoom menu item found for: " + selection);}
public static boolean pdfbox_f507_0(String actionCommand)
{    if (!actionCommand.matches("^\\d+%$")) {        return false;    }    int zoom = Integer.parseInt(actionCommand.substring(0, actionCommand.length() - 1));    return Arrays.binarySearch(ZOOMS, zoom) >= 0;}
public static float pdfbox_f508_0()
{    for (Component comp : instance.menu.getMenuComponents()) {        ZoomMenuItem menuItem = (ZoomMenuItem) comp;        if (menuItem.isSelected()) {            return menuItem.zoom / 100f;        }    }    throw new IllegalStateException("no zoom menu item is selected");}
public float pdfbox_f509_0()
{    return pageZoomScale;}
public void pdfbox_f510_0(float pageZoomValue)
{    pageZoomScale = pageZoomValue;}
public float pdfbox_f511_0()
{    return imageZoomScale;}
public void pdfbox_f512_0(float imageZoomValue)
{    imageZoomScale = imageZoomValue;}
public void pdfbox_f513_0()
{    setPageZoomScale(1);    setImageZoomScale(1);    changeZoomSelection(1);}
public void pdfbox_f514_0(FileSet set)
{    fileSets.add(set);}
public void pdfbox_f515_0()
{    log("PDFToTextTask executing");    for (FileSet fileSet : fileSets) {        DirectoryScanner dirScanner = fileSet.getDirectoryScanner(getProject());        dirScanner.scan();        String[] files = dirScanner.getIncludedFiles();        for (String file : files) {            File f = new File(dirScanner.getBasedir(), file);            log("processing: " + f.getAbsolutePath());            String pdfFile = f.getAbsolutePath();            if (pdfFile.toUpperCase().endsWith(".PDF")) {                String textFile = pdfFile.substring(0, pdfFile.length() - 3);                textFile = textFile + "txt";                try {                    ExtractText.main(new String[] { pdfFile, textFile });                } catch (Exception e) {                    log("Error processing " + pdfFile + e.getMessage());                }            }        }    }}
public static void pdfbox_f516_0(String[] args) throws IOException
{        try (PDDocument document = PDDocument.load(new File("target/SimpleForm.pdf"))) {        PDAcroForm acroForm = document.getDocumentCatalog().getAcroForm();                        PDField field = acroForm.getField("SampleField");        PDAnnotationWidget widget = field.getWidgets().get(0);                PDAppearanceCharacteristicsDictionary fieldAppearance = new PDAppearanceCharacteristicsDictionary(new COSDictionary());        PDColor green = new PDColor(new float[] { 0, 1, 0 }, PDDeviceRGB.INSTANCE);        fieldAppearance.setBorderColour(green);                        widget.setAppearanceCharacteristics(fieldAppearance);        document.save("target/AddBorderToField.pdf");    }}
public static void pdfbox_f517_0(String[] args) throws IOException
{    try (PDDocument document = new PDDocument()) {        PDPage page = new PDPage();        document.addPage(page);        PDAcroForm acroForm = new PDAcroForm(document);        document.getDocumentCatalog().setAcroForm(acroForm);                                float x = 50;        float y = page.getMediaBox().getHeight() - 50;        PDRectangle rect = new PDRectangle(x, y, 20, 20);        PDCheckBox checkbox = new PDCheckBox(acroForm);        checkbox.setPartialName("MyCheckBox");        PDAnnotationWidget widget = checkbox.getWidgets().get(0);        widget.setPage(page);        widget.setRectangle(rect);        widget.setPrinted(true);        PDAppearanceCharacteristicsDictionary appearanceCharacteristics = new PDAppearanceCharacteristicsDictionary(new COSDictionary());        appearanceCharacteristics.setBorderColour(new PDColor(new float[] { 1, 0, 0 }, PDDeviceRGB.INSTANCE));        appearanceCharacteristics.setBackground(new PDColor(new float[] { 1, 1, 0 }, PDDeviceRGB.INSTANCE));                appearanceCharacteristics.setNormalCaption("4");        widget.setAppearanceCharacteristics(appearanceCharacteristics);        PDBorderStyleDictionary borderStyleDictionary = new PDBorderStyleDictionary();        borderStyleDictionary.setWidth(1);        borderStyleDictionary.setStyle(PDBorderStyleDictionary.STYLE_SOLID);        widget.setBorderStyle(borderStyleDictionary);        PDAppearanceDictionary ap = new PDAppearanceDictionary();        widget.setAppearance(ap);        PDAppearanceEntry normalAppearance = ap.getNormalAppearance();        COSDictionary normalAppearanceDict = normalAppearance.getCOSObject();        normalAppearanceDict.setItem(COSName.Off, createAppearanceStream(document, widget, false));        normalAppearanceDict.setItem(COSName.YES, createAppearanceStream(document, widget, true));                        page.getAnnotations().add(checkbox.getWidgets().get(0));        acroForm.getFields().add(checkbox);        checkbox.check();        document.save("CheckBoxSample.pdf");    }}
private static PDAppearanceStream pdfbox_f518_0(final PDDocument document, PDAnnotationWidget widget, boolean on) throws IOException
{    PDRectangle rect = widget.getRectangle();    PDAppearanceCharacteristicsDictionary appearanceCharacteristics;    PDAppearanceStream yesAP = new PDAppearanceStream(document);    yesAP.setBBox(new PDRectangle(rect.getWidth(), rect.getHeight()));    yesAP.setResources(new PDResources());    try (PDAppearanceContentStream yesAPCS = new PDAppearanceContentStream(yesAP)) {        appearanceCharacteristics = widget.getAppearanceCharacteristics();        PDColor backgroundColor = appearanceCharacteristics.getBackground();        PDColor borderColor = appearanceCharacteristics.getBorderColour();        float lineWidth = getLineWidth(widget);        yesAPCS.setBorderLine(lineWidth, widget.getBorderStyle(), widget.getBorder());        yesAPCS.setNonStrokingColor(backgroundColor);        yesAPCS.addRect(0, 0, rect.getWidth(), rect.getHeight());        yesAPCS.fill();        yesAPCS.setStrokingColor(borderColor);        yesAPCS.addRect(lineWidth / 2, lineWidth / 2, rect.getWidth() - lineWidth, rect.getHeight() - lineWidth);        yesAPCS.stroke();        if (!on) {            return yesAP;        }        yesAPCS.addRect(lineWidth, lineWidth, rect.getWidth() - lineWidth * 2, rect.getHeight() - lineWidth * 2);        yesAPCS.clip();        String normalCaption = appearanceCharacteristics.getNormalCaption();        if (normalCaption == null) {                        normalCaption = "4";        }        if ("8".equals(normalCaption)) {                        yesAPCS.setStrokingColor(0f);            yesAPCS.moveTo(lineWidth * 2, rect.getHeight() - lineWidth * 2);            yesAPCS.lineTo(rect.getWidth() - lineWidth * 2, lineWidth * 2);            yesAPCS.moveTo(rect.getWidth() - lineWidth * 2, rect.getHeight() - lineWidth * 2);            yesAPCS.lineTo(lineWidth * 2, lineWidth * 2);            yesAPCS.stroke();        } else {                                                String name = PDType1Font.ZAPF_DINGBATS.codeToName(normalCaption.codePointAt(0));            String unicode = PDType1Font.ZAPF_DINGBATS.getGlyphList().toUnicode(name);            Rectangle2D bounds = PDType1Font.ZAPF_DINGBATS.getPath(name).getBounds2D();            float size = (float) Math.min(bounds.getWidth(), bounds.getHeight()) / 1000;                                    float fontSize = (rect.getWidth() - lineWidth * 2) / size * 0.6666f;            float xOffset = (float) (rect.getWidth() - (bounds.getWidth()) / 1000 * fontSize) / 2;            xOffset -= bounds.getX() / 1000 * fontSize;            float yOffset = (float) (rect.getHeight() - (bounds.getHeight()) / 1000 * fontSize) / 2;            yOffset -= bounds.getY() / 1000 * fontSize;            yesAPCS.setNonStrokingColor(0);            yesAPCS.beginText();            yesAPCS.setFont(PDType1Font.ZAPF_DINGBATS, fontSize);            yesAPCS.newLineAtOffset(xOffset, yOffset);            yesAPCS.showText(unicode);            yesAPCS.endText();        }    }    return yesAP;}
 static float pdfbox_f519_0(PDAnnotationWidget widget)
{    PDBorderStyleDictionary bs = widget.getBorderStyle();    if (bs != null) {        return bs.getWidth();    }    return 1;}
public static void pdfbox_f520_0(String[] args) throws IOException
{        try (PDDocument document = new PDDocument()) {        PDPage page1 = new PDPage(PDRectangle.A4);        document.addPage(page1);        PDPage page2 = new PDPage(PDRectangle.A4);        document.addPage(page2);                        PDFont font = PDType1Font.HELVETICA;        PDResources resources = new PDResources();        resources.put(COSName.getPDFName("Helv"), font);                PDAcroForm acroForm = new PDAcroForm(document);        document.getDocumentCatalog().setAcroForm(acroForm);                acroForm.setDefaultResources(resources);                        String defaultAppearanceString = "/Helv 0 Tf 0 g";        acroForm.setDefaultAppearance(defaultAppearanceString);                PDTextField textBox = new PDTextField(acroForm);        textBox.setPartialName("SampleField");                                                defaultAppearanceString = "/Helv 12 Tf 0 0 1 rg";        textBox.setDefaultAppearance(defaultAppearanceString);                acroForm.getFields().add(textBox);                PDAnnotationWidget widget1 = new PDAnnotationWidget();        PDRectangle rect = new PDRectangle(50, 750, 250, 50);        widget1.setRectangle(rect);        widget1.setPage(page1);        widget1.setParent(textBox);                PDAnnotationWidget widget2 = new PDAnnotationWidget();        PDRectangle rect2 = new PDRectangle(200, 650, 100, 50);        widget2.setRectangle(rect2);        widget2.setPage(page2);        widget2.setParent(textBox);                        PDAppearanceCharacteristicsDictionary fieldAppearance1 = new PDAppearanceCharacteristicsDictionary(new COSDictionary());        fieldAppearance1.setBorderColour(new PDColor(new float[] { 0, 1, 0 }, PDDeviceRGB.INSTANCE));        fieldAppearance1.setBackground(new PDColor(new float[] { 1, 1, 0 }, PDDeviceRGB.INSTANCE));        widget1.setAppearanceCharacteristics(fieldAppearance1);                        PDAppearanceCharacteristicsDictionary fieldAppearance2 = new PDAppearanceCharacteristicsDictionary(new COSDictionary());        fieldAppearance2.setBorderColour(new PDColor(new float[] { 1, 0, 0 }, PDDeviceRGB.INSTANCE));        fieldAppearance2.setBackground(new PDColor(new float[] { 0, 1, 0 }, PDDeviceRGB.INSTANCE));        widget2.setAppearanceCharacteristics(fieldAppearance2);        List<PDAnnotationWidget> widgets = new ArrayList<>();        widgets.add(widget1);        widgets.add(widget2);        textBox.setWidgets(widgets);                widget1.setPrinted(true);        widget2.setPrinted(true);                page1.getAnnotations().add(widget1);        page2.getAnnotations().add(widget2);                textBox.setValue("Sample field");        document.save("MultiWidgetsForm.pdf");    }}
public static void pdfbox_f521_0(String[] args) throws IOException
{    try (PDDocument document = new PDDocument()) {        PDPage page = new PDPage(PDRectangle.A4);        document.addPage(page);        PDAcroForm acroForm = new PDAcroForm(document);                                document.getDocumentCatalog().setAcroForm(acroForm);        List<String> options = Arrays.asList("a", "b", "c");        PDRadioButton radioButton = new PDRadioButton(acroForm);        radioButton.setPartialName("MyRadioButton");        radioButton.setExportValues(options);        PDAppearanceCharacteristicsDictionary appearanceCharacteristics = new PDAppearanceCharacteristicsDictionary(new COSDictionary());        appearanceCharacteristics.setBorderColour(new PDColor(new float[] { 1, 0, 0 }, PDDeviceRGB.INSTANCE));        appearanceCharacteristics.setBackground(new PDColor(new float[] { 0, 1, 0.3f }, PDDeviceRGB.INSTANCE));                        List<PDAnnotationWidget> widgets = new ArrayList<>();        for (int i = 0; i < options.size(); i++) {            PDAnnotationWidget widget = new PDAnnotationWidget();            widget.setRectangle(new PDRectangle(30, PDRectangle.A4.getHeight() - 40 - i * 35, 30, 30));            widget.setAppearanceCharacteristics(appearanceCharacteristics);            PDBorderStyleDictionary borderStyleDictionary = new PDBorderStyleDictionary();            borderStyleDictionary.setWidth(2);            borderStyleDictionary.setStyle(PDBorderStyleDictionary.STYLE_SOLID);            widget.setBorderStyle(borderStyleDictionary);            widget.setPage(page);            COSDictionary apNDict = new COSDictionary();            apNDict.setItem(COSName.Off, createAppearanceStream(document, widget, false));            apNDict.setItem(options.get(i), createAppearanceStream(document, widget, true));            PDAppearanceDictionary appearance = new PDAppearanceDictionary();            PDAppearanceEntry appearanceNEntry = new PDAppearanceEntry(apNDict);            appearance.setNormalAppearance(appearanceNEntry);            widget.setAppearance(appearance);                        widget.setAppearanceState("Off");            widgets.add(widget);            page.getAnnotations().add(widget);        }        radioButton.setWidgets(widgets);        acroForm.getFields().add(radioButton);                try (PDPageContentStream contents = new PDPageContentStream(document, page)) {            for (int i = 0; i < options.size(); i++) {                contents.beginText();                contents.setFont(PDType1Font.HELVETICA, 15);                contents.newLineAtOffset(70, PDRectangle.A4.getHeight() - 30 - i * 35);                contents.showText(options.get(i));                contents.endText();            }        }        radioButton.setValue("c");        document.save("RadioButtonsSample.pdf");    }}
private static PDAppearanceStream pdfbox_f522_0(final PDDocument document, PDAnnotationWidget widget, boolean on) throws IOException
{    PDRectangle rect = widget.getRectangle();    PDAppearanceStream onAP = new PDAppearanceStream(document);    onAP.setBBox(new PDRectangle(rect.getWidth(), rect.getHeight()));    try (PDAppearanceContentStream onAPCS = new PDAppearanceContentStream(onAP)) {        PDAppearanceCharacteristicsDictionary appearanceCharacteristics = widget.getAppearanceCharacteristics();        PDColor backgroundColor = appearanceCharacteristics.getBackground();        PDColor borderColor = appearanceCharacteristics.getBorderColour();        float lineWidth = getLineWidth(widget);        onAPCS.setBorderLine(lineWidth, widget.getBorderStyle(), widget.getBorder());        onAPCS.setNonStrokingColor(backgroundColor);        float radius = Math.min(rect.getWidth() / 2, rect.getHeight() / 2);        drawCircle(onAPCS, rect.getWidth() / 2, rect.getHeight() / 2, radius);        onAPCS.fill();        onAPCS.setStrokingColor(borderColor);        drawCircle(onAPCS, rect.getWidth() / 2, rect.getHeight() / 2, radius - lineWidth / 2);        onAPCS.stroke();        if (on) {            onAPCS.setNonStrokingColor(0f);            drawCircle(onAPCS, rect.getWidth() / 2, rect.getHeight() / 2, (radius - lineWidth) / 2);            onAPCS.fill();        }    }    return onAP;}
 static float pdfbox_f523_0(PDAnnotationWidget widget)
{    PDBorderStyleDictionary bs = widget.getBorderStyle();    if (bs != null) {        return bs.getWidth();    }    return 1;}
 static void pdfbox_f524_0(PDAppearanceContentStream cs, float x, float y, float r) throws IOException
{        float magic = r * 0.551784f;    cs.moveTo(x, y + r);    cs.curveTo(x + magic, y + r, x + r, y + magic, x + r, y);    cs.curveTo(x + r, y - magic, x + magic, y - r, x, y - r);    cs.curveTo(x - magic, y - r, x - r, y - magic, x - r, y);    cs.curveTo(x - r, y + magic, x - magic, y + r, x, y + r);    cs.closePath();}
public static void pdfbox_f525_0(String[] args) throws IOException
{        try (PDDocument document = new PDDocument()) {        PDPage page = new PDPage(PDRectangle.A4);        document.addPage(page);                        PDFont font = PDType1Font.HELVETICA;        PDResources resources = new PDResources();        resources.put(COSName.getPDFName("Helv"), font);                PDAcroForm acroForm = new PDAcroForm(document);        document.getDocumentCatalog().setAcroForm(acroForm);                acroForm.setDefaultResources(resources);                        String defaultAppearanceString = "/Helv 0 Tf 0 g";        acroForm.setDefaultAppearance(defaultAppearanceString);                PDTextField textBox = new PDTextField(acroForm);        textBox.setPartialName("SampleField");                                                defaultAppearanceString = "/Helv 12 Tf 0 0 1 rg";        textBox.setDefaultAppearance(defaultAppearanceString);                acroForm.getFields().add(textBox);                PDAnnotationWidget widget = textBox.getWidgets().get(0);        PDRectangle rect = new PDRectangle(50, 750, 200, 50);        widget.setRectangle(rect);        widget.setPage(page);                        PDAppearanceCharacteristicsDictionary fieldAppearance = new PDAppearanceCharacteristicsDictionary(new COSDictionary());        fieldAppearance.setBorderColour(new PDColor(new float[] { 0, 1, 0 }, PDDeviceRGB.INSTANCE));        fieldAppearance.setBackground(new PDColor(new float[] { 1, 1, 0 }, PDDeviceRGB.INSTANCE));        widget.setAppearanceCharacteristics(fieldAppearance);                widget.setPrinted(true);                page.getAnnotations().add(widget);                textBox.setValue("Sample field");        document.save("target/SimpleForm.pdf");    }}
public static void pdfbox_f526_0(String[] args) throws IOException
{        try (PDDocument doc = new PDDocument()) {        PDPage page = new PDPage();        doc.addPage(page);        PDAcroForm acroForm = new PDAcroForm(doc);        doc.getDocumentCatalog().setAcroForm(acroForm);                        PDFont formFont = PDType0Font.load(doc, CreateSimpleFormWithEmbeddedFont.class.getResourceAsStream("/org/apache/pdfbox/resources/ttf/LiberationSans-Regular.ttf"), false);                final PDResources resources = new PDResources();        acroForm.setDefaultResources(resources);        final String fontName = resources.add(formFont).getName();                        acroForm.setDefaultResources(resources);        String defaultAppearanceString = "/" + fontName + " 0 Tf 0 g";        PDTextField textBox = new PDTextField(acroForm);        textBox.setPartialName("SampleField");        textBox.setDefaultAppearance(defaultAppearanceString);        acroForm.getFields().add(textBox);                PDAnnotationWidget widget = textBox.getWidgets().get(0);        PDRectangle rect = new PDRectangle(50, 700, 200, 50);        widget.setRectangle(rect);        widget.setPage(page);        page.getAnnotations().add(widget);                        textBox.setValue("Sample field İ");        doc.save("target/SimpleFormWithEmbeddedFont.pdf");    }}
public static void pdfbox_f527_0(String[] args) throws IOException
{    try (PDDocument document = PDDocument.load(new File("target/SimpleForm.pdf"))) {        PDAcroForm acroForm = document.getDocumentCatalog().getAcroForm();                        PDField field = acroForm.getField("SampleField");        PDAnnotationWidget widget = field.getWidgets().get(0);                float widthOfField = widget.getRectangle().getWidth();                                                        String defaultAppearance = ((PDTextField) field).getDefaultAppearance();        String[] parts = defaultAppearance.split(" ");                COSName fontName = COSName.getPDFName(parts[0].substring(1));        float fontSize = Float.parseFloat(parts[1]);                                                PDFont font = null;        PDResources resources = widget.getNormalAppearanceStream().getResources();        if (resources != null) {            font = resources.getFont(fontName);        }        if (font == null) {            font = acroForm.getDefaultResources().getFont(fontName);        }        String willFit = "short string";        String willNotFit = "this is a very long string which will not fit the width of the widget";                float willFitWidth = font.getStringWidth(willFit) * fontSize / 1000;        float willNotFitWidth = font.getStringWidth(willNotFit) * fontSize / 1000;        assert willFitWidth < widthOfField;        assert willNotFitWidth > widthOfField;    }}
public static void pdfbox_f528_0(String[] args) throws IOException
{        try (PDDocument document = PDDocument.load(new File("target/SimpleForm.pdf"))) {        PDAcroForm acroForm = document.getDocumentCatalog().getAcroForm();                        PDField field = acroForm.getField("SampleField");        PDAnnotationWidget widget = field.getWidgets().get(0);                                PDAnnotationAdditionalActions annotationActions = new PDAnnotationAdditionalActions();                PDActionJavaScript jsEnterAction = new PDActionJavaScript();        jsEnterAction.setAction("app.alert(\"On 'enter' action\")");        annotationActions.setE(jsEnterAction);                PDActionJavaScript jsExitAction = new PDActionJavaScript();        jsExitAction.setAction("app.alert(\"On 'exit' action\")");        annotationActions.setX(jsExitAction);                PDActionJavaScript jsMouseDownAction = new PDActionJavaScript();        jsMouseDownAction.setAction("app.alert(\"On 'mouse down' action\")");        annotationActions.setD(jsMouseDownAction);                PDActionJavaScript jsMouseUpAction = new PDActionJavaScript();        jsMouseUpAction.setAction("app.alert(\"On 'mouse up' action\")");        annotationActions.setU(jsMouseUpAction);                PDActionJavaScript jsFocusAction = new PDActionJavaScript();        jsFocusAction.setAction("app.alert(\"On 'focus' action\")");        annotationActions.setFo(jsFocusAction);                PDActionJavaScript jsBlurredAction = new PDActionJavaScript();        jsBlurredAction.setAction("app.alert(\"On 'blurred' action\")");        annotationActions.setBl(jsBlurredAction);        widget.setActions(annotationActions);                PDFormFieldAdditionalActions fieldActions = new PDFormFieldAdditionalActions();                PDActionJavaScript jsKeystrokeAction = new PDActionJavaScript();        jsKeystrokeAction.setAction("app.alert(\"On 'keystroke' action\")");        fieldActions.setK(jsKeystrokeAction);                PDActionJavaScript jsFormattedAction = new PDActionJavaScript();        jsFormattedAction.setAction("app.alert(\"On 'formatted' action\")");        fieldActions.setF(jsFormattedAction);                PDActionJavaScript jsChangedAction = new PDActionJavaScript();        jsChangedAction.setAction("app.alert(\"On 'change' action\")");                        PDActionJavaScript jsRecalculateAction = new PDActionJavaScript();        jsRecalculateAction.setAction("app.alert(\"On 'recalculate' action\")");        fieldActions.setC(jsRecalculateAction);                                                        field.getActions().getCOSObject().addAll(fieldActions.getCOSObject());        document.save("target/FieldTriggers.pdf");    }}
public static void pdfbox_f529_0(String[] args) throws IOException
{    String formTemplate = "src/main/resources/org/apache/pdfbox/examples/interactive/form/FillFormField.pdf";    try (PDDocument pdfDocument = PDDocument.load(new File(formTemplate))) {                PDAcroForm acroForm = pdfDocument.getDocumentCatalog().getAcroForm();                if (acroForm != null) {                        PDTextField field = (PDTextField) acroForm.getField("sampleField");            field.setValue("Text Entry");                                    field = (PDTextField) acroForm.getField("fieldsContainer.nestedSampleField");            field.setValue("Text Entry");        }                pdfDocument.save("target/FillFormField.pdf");    }}
public void pdfbox_f530_0(PDDocument pdfDocument) throws IOException
{    PDDocumentCatalog docCatalog = pdfDocument.getDocumentCatalog();    PDAcroForm acroForm = docCatalog.getAcroForm();    List<PDField> fields = acroForm.getFields();    System.out.println(fields.size() + " top-level fields were found on the form");    for (PDField field : fields) {        processField(field, "|--", field.getPartialName());    }}
private void pdfbox_f531_0(PDField field, String sLevel, String sParent) throws IOException
{    String partialName = field.getPartialName();    if (field instanceof PDNonTerminalField) {        if (!sParent.equals(field.getPartialName())) {            if (partialName != null) {                sParent = sParent + "." + partialName;            }        }        System.out.println(sLevel + sParent);        for (PDField child : ((PDNonTerminalField) field).getChildren()) {            processField(child, "|  " + sLevel, sParent);        }    } else {        String fieldValue = field.getValueAsString();        StringBuilder outputString = new StringBuilder(sLevel);        outputString.append(sParent);        if (partialName != null) {            outputString.append(".").append(partialName);        }        outputString.append(" = ").append(fieldValue);        outputString.append(",  type=").append(field.getClass().getName());        System.out.println(outputString);    }}
public static void pdfbox_f532_0(String[] args) throws IOException
{    PDDocument pdf = null;    try {        if (args.length != 1) {            usage();        } else {            pdf = PDDocument.load(new File(args[0]));            PrintFields exporter = new PrintFields();            exporter.printFields(pdf);        }    } finally {        if (pdf != null) {            pdf.close();        }    }}
private static void pdfbox_f533_0()
{    System.err.println("usage: org.apache.pdfbox.examples.interactive.form.PrintFields <pdf-file>");}
public void pdfbox_f534_0(PDDocument pdfDocument, String name, String value) throws IOException
{    PDDocumentCatalog docCatalog = pdfDocument.getDocumentCatalog();    PDAcroForm acroForm = docCatalog.getAcroForm();    PDField field = acroForm.getField(name);    if (field != null) {        if (field instanceof PDCheckBox) {            field.setValue("Yes");        } else if (field instanceof PDComboBox) {            field.setValue(value);        } else if (field instanceof PDListBox) {            field.setValue(value);        } else if (field instanceof PDRadioButton) {            field.setValue(value);        } else if (field instanceof PDTextField) {            field.setValue(value);        }    } else {        System.err.println("No field found with name:" + name);    }}
public static void pdfbox_f535_0(String[] args) throws IOException
{    SetField setter = new SetField();    setter.setField(args);}
private void pdfbox_f536_0(String[] args) throws IOException
{    PDDocument pdf = null;    try {        if (args.length != 3) {            usage();        } else {            SetField example = new SetField();            pdf = PDDocument.load(new File(args[0]));            example.setField(pdf, args[1], args[2]);            pdf.save(args[0]);        }    } finally {        if (pdf != null) {            pdf.close();        }    }}
private static void pdfbox_f537_0()
{    System.err.println("usage: org.apache.pdfbox.examples.interactive.form.SetField <pdf-file> <field-name> <field-value>");}
public static void pdfbox_f538_0(String[] args) throws IOException
{        try (PDDocument document = PDDocument.load(new File("target/SimpleForm.pdf"))) {                                String javaScript = "var now = util.printd('yyyy-mm-dd', new Date());" + "var oField = this.getField('SampleField');" + "oField.value = now;";                PDActionJavaScript jsAction = new PDActionJavaScript();        jsAction.setAction(javaScript);                document.getDocumentCatalog().setOpenAction(jsAction);        document.save("target/UpdateFieldOnDocumentOpen.pdf");    }}
public static void pdfbox_f539_0(String[] args)
{    String usage = "java org.apache.pdfbox.lucene.IndexPDFFiles" + " [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\n\n" + "This indexes all PDF documents in DOCS_PATH, creating a Lucene index" + "in INDEX_PATH that can be searched with SearchFiles";    String indexPath = "index";    String docsPath = null;    boolean create = true;    for (int i = 0; i < args.length; i++) {        switch(args[i]) {            case "-index":                indexPath = args[i + 1];                i++;                break;            case "-docs":                docsPath = args[i + 1];                i++;                break;            case "-update":                create = false;                break;            default:                break;        }    }    if (docsPath == null) {        System.err.println("Usage: " + usage);        System.exit(1);    }    final File docDir = new File(docsPath);    if (!docDir.exists() || !docDir.canRead()) {        System.out.println("Document directory '" + docDir.getAbsolutePath() + "' does not exist or is not readable, please check the path");        System.exit(1);    }    Date start = new Date();    try {        System.out.println("Indexing to directory '" + indexPath + "'...");        try (Directory dir = FSDirectory.open(new File(indexPath).toPath())) {            Analyzer analyzer = new StandardAnalyzer();            IndexWriterConfig iwc = new IndexWriterConfig(analyzer);            if (create) {                                                iwc.setOpenMode(OpenMode.CREATE);            } else {                                iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);            }                        try (final IndexWriter writer = new IndexWriter(dir, iwc)) {                indexDocs(writer, docDir);                                                                                                }        }        Date end = new Date();        System.out.println(end.getTime() - start.getTime() + " total milliseconds");    } catch (IOException e) {        System.out.println(" caught a " + e.getClass() + "\n with message: " + e.getMessage());    }}
 static void pdfbox_f540_0(IndexWriter writer, File file) throws IOException
{        if (file.canRead()) {        if (file.isDirectory()) {            String[] files = file.list();                        if (files != null) {                for (String fileName : files) {                    indexDocs(writer, new File(file, fileName));                }            }        } else {            FileInputStream fis;            try {                fis = new FileInputStream(file);            } catch (FileNotFoundException fnfe) {                                return;            }            try {                String path = file.getName().toUpperCase();                Document doc;                if (path.toLowerCase().endsWith(".pdf")) {                    System.out.println("Indexing PDF document: " + file);                    doc = LucenePDFDocument.getDocument(file);                } else {                    System.out.println("Skipping " + file);                    return;                }                if (writer.getConfig().getOpenMode() == OpenMode.CREATE) {                                        System.out.println("adding " + file);                    writer.addDocument(doc);                } else {                                                                                System.out.println("updating " + file);                    writer.updateDocument(new Term("uid", LucenePDFDocument.createUID(file)), doc);                }            } finally {                fis.close();            }        }    }}
public void pdfbox_f541_0(PDFTextStripper aStripper)
{    stripper = aStripper;}
private static String pdfbox_f542_0(long time)
{    return DateTools.timeToString(time, DATE_TIME_RES);}
private void pdfbox_f543_0(Document document, String name, String value)
{    if (value != null) {        document.add(new StringField(name, value, Field.Store.YES));    }}
private void pdfbox_f544_0(Document document, String name, Reader value)
{    if (value != null) {        document.add(new TextField(name, value));    }}
private void pdfbox_f545_0(Document document, String name, String value)
{    if (value != null) {        document.add(new TextField(name, value, Field.Store.YES));    }}
private void pdfbox_f546_0(Document document, String name, Date value)
{    if (value != null) {        addTextField(document, name, DateTools.dateToString(value, DATE_TIME_RES));    }}
private void pdfbox_f547_0(Document document, String name, Calendar value)
{    if (value != null) {        addTextField(document, name, value.getTime());    }}
private static void pdfbox_f548_0(Document document, String name, String value)
{    if (value != null) {        document.add(new Field(name, value, TYPE_STORED_NOT_INDEXED));    }}
private void pdfbox_f549_0(Document document, String name, String value)
{    if (value != null) {        document.add(new Field(name, value, TextField.TYPE_NOT_STORED));    }}
public Document pdfbox_f550_0(InputStream is) throws IOException
{    Document document = new Document();    addContent(document, is, "<inputstream>");    return document;}
public Document pdfbox_f551_0(File file) throws IOException
{    Document document = new Document();            addUnindexedField(document, "path", file.getPath());    addUnindexedField(document, "url", file.getPath().replace(FILE_SEPARATOR, '/'));                addKeywordField(document, "modified", timeToString(file.lastModified()));    String uid = createUID(file);                addUnstoredKeywordField(document, "uid", uid);    try (FileInputStream input = new FileInputStream(file)) {        addContent(document, input, file.getPath());    }    return document;}
public Document pdfbox_f552_0(URL url) throws IOException
{    Document document = new Document();    URLConnection connection = url.openConnection();    connection.connect();            addUnindexedField(document, "url", url.toExternalForm());                addKeywordField(document, "modified", timeToString(connection.getLastModified()));    String uid = createUID(url, connection.getLastModified());                addUnstoredKeywordField(document, "uid", uid);    try (InputStream input = connection.getInputStream()) {        addContent(document, input, url.toExternalForm());    }        return document;}
public static Document pdfbox_f553_0(InputStream is) throws IOException
{    LucenePDFDocument converter = new LucenePDFDocument();    return converter.convertDocument(is);}
public static Document pdfbox_f554_0(File file) throws IOException
{    LucenePDFDocument converter = new LucenePDFDocument();    return converter.convertDocument(file);}
public static Document pdfbox_f555_0(URL url) throws IOException
{    LucenePDFDocument converter = new LucenePDFDocument();    return converter.convertDocument(url);}
private void pdfbox_f556_0(Document document, InputStream is, String documentLocation) throws IOException
{    try (PDDocument pdfDocument = PDDocument.load(is)) {                StringWriter writer = new StringWriter();        if (stripper == null) {            stripper = new PDFTextStripper();        }        stripper.writeText(pdfDocument, writer);                                        String contents = writer.getBuffer().toString();        StringReader reader = new StringReader(contents);                        addTextField(document, "contents", reader);        PDDocumentInformation info = pdfDocument.getDocumentInformation();        if (info != null) {            addTextField(document, "Author", info.getAuthor());            addTextField(document, "CreationDate", info.getCreationDate());            addTextField(document, "Creator", info.getCreator());            addTextField(document, "Keywords", info.getKeywords());            addTextField(document, "ModificationDate", info.getModificationDate());            addTextField(document, "Producer", info.getProducer());            addTextField(document, "Subject", info.getSubject());            addTextField(document, "Title", info.getTitle());            addTextField(document, "Trapped", info.getTrapped());        }        int summarySize = Math.min(contents.length(), 500);        String summary = contents.substring(0, summarySize);                        addUnindexedField(document, "summary", summary);    } catch (InvalidPasswordException e) {                throw new IOException("Error: The document(" + documentLocation + ") is encrypted and will not be indexed.", e);    }}
public static String pdfbox_f557_0(URL url, long time)
{    return url.toExternalForm().replace(FILE_SEPARATOR, '\u0000') + "\u0000" + timeToString(time);}
public static String pdfbox_f558_0(File file)
{    return file.getPath().replace(FILE_SEPARATOR, '\u0000') + "\u0000" + timeToString(file.lastModified());}
public static void pdfbox_f559_0(String[] args) throws IOException
{    if (args.length != 1) {        System.err.println("Usage: " + AddAnnotations.class.getName() + " <output-pdf>");        System.exit(1);    }    try (PDDocument document = new PDDocument()) {        PDPage page1 = new PDPage();        PDPage page2 = new PDPage();        PDPage page3 = new PDPage();        document.addPage(page1);        document.addPage(page2);        document.addPage(page3);        List<PDAnnotation> annotations = page1.getAnnotations();                        PDColor red = new PDColor(new float[] { 1, 0, 0 }, PDDeviceRGB.INSTANCE);        PDColor blue = new PDColor(new float[] { 0, 0, 1 }, PDDeviceRGB.INSTANCE);        PDColor green = new PDColor(new float[] { 0, 1, 0 }, PDDeviceRGB.INSTANCE);        PDColor black = new PDColor(new float[] { 0, 0, 0 }, PDDeviceRGB.INSTANCE);        PDBorderStyleDictionary borderThick = new PDBorderStyleDictionary();                borderThick.setWidth(INCH / 12);        PDBorderStyleDictionary borderThin = new PDBorderStyleDictionary();                borderThin.setWidth(INCH / 72);        PDBorderStyleDictionary borderULine = new PDBorderStyleDictionary();        borderULine.setStyle(PDBorderStyleDictionary.STYLE_UNDERLINE);                borderULine.setWidth(INCH / 72);        float pw = page1.getMediaBox().getUpperRightX();        float ph = page1.getMediaBox().getUpperRightY();                PDFont font = PDType1Font.HELVETICA_BOLD;        try (PDPageContentStream contents = new PDPageContentStream(document, page1)) {            contents.beginText();            contents.setFont(font, 18);            contents.newLineAtOffset(INCH, ph - INCH - 18);            contents.showText("PDFBox");            contents.newLineAtOffset(0, -(INCH / 2));            contents.showText("External URL");            contents.newLineAtOffset(0, -(INCH / 2));            contents.showText("Jump to page three");            contents.endText();        }                PDAnnotationHighlight txtHighlight = new PDAnnotationHighlight();        txtHighlight.setColor(new PDColor(new float[] { 0, 1, 1 }, PDDeviceRGB.INSTANCE));                txtHighlight.setConstantOpacity((float) 0.2);                float textWidth = font.getStringWidth("PDFBox") / 1000 * 18;        PDRectangle position = new PDRectangle();        position.setLowerLeftX(INCH);        position.setLowerLeftY(ph - INCH - 18);        position.setUpperRightX(INCH + textWidth);        position.setUpperRightY(ph - INCH);        txtHighlight.setRectangle(position);                                        float[] quads = new float[8];                quads[0] = position.getLowerLeftX();                quads[1] = position.getUpperRightY() - 2;                quads[2] = position.getUpperRightX();                quads[3] = quads[1];                quads[4] = quads[0];                quads[5] = position.getLowerLeftY() - 2;                quads[6] = quads[2];                quads[7] = quads[5];        txtHighlight.setQuadPoints(quads);        txtHighlight.setContents("Highlighted since it's important");        annotations.add(txtHighlight);                PDAnnotationLink txtLink = new PDAnnotationLink();        txtLink.setBorderStyle(borderULine);                textWidth = font.getStringWidth("External URL") / 1000 * 18;        position = new PDRectangle();        position.setLowerLeftX(INCH);                position.setLowerLeftY(ph - 1.5f * INCH - 20);        position.setUpperRightX(INCH + textWidth);        position.setUpperRightY(ph - 1.5f * INCH);        txtLink.setRectangle(position);                PDActionURI action = new PDActionURI();        action.setURI("http://pdfbox.apache.org");        txtLink.setAction(action);        annotations.add(txtLink);                PDAnnotationCircle aCircle = new PDAnnotationCircle();        aCircle.setContents("Circle Annotation");                aCircle.setInteriorColor(red);                aCircle.setColor(blue);        aCircle.setBorderStyle(borderThin);                        position = new PDRectangle();        position.setLowerLeftX(INCH);                position.setLowerLeftY(ph - 3 * INCH - INCH);                position.setUpperRightX(2 * INCH);                position.setUpperRightY(ph - 3 * INCH);        aCircle.setRectangle(position);        annotations.add(aCircle);                PDAnnotationSquare aSquare = new PDAnnotationSquare();        aSquare.setContents("Square Annotation");                aSquare.setColor(red);        aSquare.setBorderStyle(borderThick);                                position = new PDRectangle();                position.setLowerLeftX(pw - 2 * INCH);                position.setLowerLeftY(ph - 3.5f * INCH - INCH);                position.setUpperRightX(pw - INCH);                position.setUpperRightY(ph - 3.5f * INCH);        aSquare.setRectangle(position);        annotations.add(aSquare);                PDAnnotationLine aLine = new PDAnnotationLine();        aLine.setEndPointEndingStyle(PDAnnotationLine.LE_OPEN_ARROW);        aLine.setContents("Circle->Square");                aLine.setCaption(true);                        position = new PDRectangle();                position.setLowerLeftX(2 * INCH);                position.setLowerLeftY(ph - 3.5f * INCH - INCH);                position.setUpperRightX(pw - INCH - INCH);                position.setUpperRightY(ph - 3 * INCH);        aLine.setRectangle(position);                float[] linepos = new float[4];                linepos[0] = 2 * INCH;                linepos[1] = ph - 3.5f * INCH;                linepos[2] = pw - 2 * INCH;                linepos[3] = ph - 4 * INCH;        aLine.setLine(linepos);        aLine.setBorderStyle(borderThick);        aLine.setColor(black);        annotations.add(aLine);                PDAnnotationLink pageLink = new PDAnnotationLink();        pageLink.setBorderStyle(borderULine);                textWidth = font.getStringWidth("Jump to page three") / 1000 * 18;        position = new PDRectangle();        position.setLowerLeftX(INCH);                position.setLowerLeftY(ph - 2 * INCH - 20);        position.setUpperRightX(INCH + textWidth);        position.setUpperRightY(ph - 2 * INCH);        pageLink.setRectangle(position);                PDActionGoTo actionGoto = new PDActionGoTo();                PDPageDestination dest = new PDPageFitWidthDestination();                dest.setPage(page3);        actionGoto.setDestination(dest);        pageLink.setAction(actionGoto);        annotations.add(pageLink);        PDAnnotationFreeText freeTextAnnotation = new PDAnnotationFreeText();        PDColor yellow = new PDColor(new float[] { 1, 1, 0 }, PDDeviceRGB.INSTANCE);                freeTextAnnotation.setColor(yellow);        position = new PDRectangle();        position.setLowerLeftX(1 * INCH);        position.setLowerLeftY(ph - 5f * INCH - 3 * INCH);        position.setUpperRightX(pw - INCH);        position.setUpperRightY(ph - 5f * INCH);        freeTextAnnotation.setRectangle(position);        freeTextAnnotation.setTitlePopup("Sophia Lorem");        freeTextAnnotation.setSubject("Lorem ipsum");        freeTextAnnotation.setContents("Lorem ipsum dolor sit amet, consetetur sadipscing elitr," + " sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam " + "erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea " + "rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum " + "dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, " + "sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam " + "erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea " + "rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum " + "dolor sit amet.");                freeTextAnnotation.setDefaultAppearance("0 0 1 rg /Helv 20 Tf");                freeTextAnnotation.setQ(PDVariableText.QUADDING_RIGHT);        freeTextAnnotation.setIntent(PDAnnotationFreeText.IT_FREE_TEXT_CALLOUT);        freeTextAnnotation.setCallout(new float[] { 0, ph - 9 * INCH, 3 * INCH, ph - 9 * INCH, 4 * INCH, ph - 8 * INCH });        freeTextAnnotation.setLineEndingStyle(PDAnnotationLine.LE_OPEN_ARROW);        annotations.add(freeTextAnnotation);        PDAnnotationPolygon polygon = new PDAnnotationPolygon();        position = new PDRectangle();        position.setLowerLeftX(pw - INCH);        position.setLowerLeftY(ph - INCH);        position.setUpperRightX(pw - 2 * INCH);        position.setUpperRightY(ph - 2 * INCH);        polygon.setRectangle(position);        polygon.setColor(blue);        polygon.setInteriorColor(green);        float[] vertices = { pw - INCH, ph - 2 * INCH, pw - 1.5f * INCH, ph - INCH, pw - 2 * INCH, ph - 2 * INCH };        polygon.setVertices(vertices);        polygon.setBorderStyle(borderThick);        polygon.setContents("Polygon annotation");        annotations.add(polygon);                PDAcroForm acroForm = document.getDocumentCatalog().getAcroForm();        if (acroForm == null) {            acroForm = new PDAcroForm(document);            document.getDocumentCatalog().setAcroForm(acroForm);        }        PDResources dr = acroForm.getDefaultResources();        if (dr == null) {            dr = new PDResources();            acroForm.setDefaultResources(dr);        }        dr.put(COSName.getPDFName("Helv"), PDType1Font.HELVETICA);                                annotations.forEach(PDAnnotation::constructAppearances);        showPageNo(document, page1, "Page 1");        showPageNo(document, page2, "Page 2");        showPageNo(document, page3, "Page 3");                document.save(args[0]);    }}
private static void pdfbox_f560_0(PDDocument document, PDPage page, String pageText) throws IOException
{    int fontSize = 10;    try (PDPageContentStream contents = new PDPageContentStream(document, page, PDPageContentStream.AppendMode.PREPEND, true)) {        float pageWidth = page.getMediaBox().getWidth();        float pageHeight = page.getMediaBox().getHeight();        PDFont font = PDType1Font.HELVETICA;        contents.setFont(font, fontSize);        float textWidth = font.getStringWidth(pageText) / 1000 * fontSize;        contents.beginText();        contents.newLineAtOffset(pageWidth / 2 - textWidth / 2, pageHeight - INCH / 2);        contents.showText(pageText);        contents.endText();    }}
public void pdfbox_f561_0(String inputFile, String imagePath, String outputFile) throws IOException
{    try (PDDocument doc = PDDocument.load(new File(inputFile))) {                PDPage page = doc.getPage(0);                                PDImageXObject pdImage = PDImageXObject.createFromFile(imagePath, doc);        try (PDPageContentStream contentStream = new PDPageContentStream(doc, page, AppendMode.APPEND, true, true)) {                                                float scale = 1f;            contentStream.drawImage(pdImage, 20, 20, pdImage.getWidth() * scale, pdImage.getHeight() * scale);        }        doc.save(outputFile);    }}
public static void pdfbox_f562_0(String[] args) throws IOException
{    AddImageToPDF app = new AddImageToPDF();    if (args.length != 3) {        app.usage();    } else {        app.createPDFFromImage(args[0], args[1], args[2]);    }}
private void pdfbox_f563_0()
{    System.err.println("usage: " + this.getClass().getName() + " <input-pdf> <image> <output-pdf>");}
public static void pdfbox_f564_0(String[] args) throws IOException
{    if (args.length != 2) {        usage();    } else {        try (PDDocument document = PDDocument.load(new File(args[0]))) {            PDActionJavaScript javascript = new PDActionJavaScript("app.alert( {cMsg: 'PDFBox rocks!', nIcon: 3, nType: 0, cTitle: 'PDFBox Javascript example' } );");            document.getDocumentCatalog().setOpenAction(javascript);            if (document.isEncrypted()) {                throw new IOException("Encrypted documents are not supported for this example");            }            document.save(args[1]);        }    }}
private static void pdfbox_f565_0()
{    System.err.println("Usage: java " + AddJavascript.class.getName() + " <input-pdf> <output-pdf>");}
public void pdfbox_f566_0(String file, String message, String outfile) throws IOException
{    try (PDDocument doc = PDDocument.load(new File(file))) {        PDFont font = PDType1Font.HELVETICA_BOLD;        float fontSize = 36.0f;        for (PDPage page : doc.getPages()) {            PDRectangle pageSize = page.getMediaBox();            float stringWidth = font.getStringWidth(message) * fontSize / 1000f;                        int rotation = page.getRotation();            boolean rotate = rotation == 90 || rotation == 270;            float pageWidth = rotate ? pageSize.getHeight() : pageSize.getWidth();            float pageHeight = rotate ? pageSize.getWidth() : pageSize.getHeight();            float centerX = rotate ? pageHeight / 2f : (pageWidth - stringWidth) / 2f;            float centerY = rotate ? (pageWidth - stringWidth) / 2f : pageHeight / 2f;                        try (PDPageContentStream contentStream = new PDPageContentStream(doc, page, AppendMode.APPEND, true, true)) {                contentStream.beginText();                                contentStream.setFont(font, fontSize);                                contentStream.setNonStrokingColor(255, 0, 0);                if (rotate) {                                        contentStream.setTextMatrix(Matrix.getRotateInstance(Math.PI / 2, centerX, centerY));                } else {                    contentStream.setTextMatrix(Matrix.getTranslateInstance(centerX, centerY));                }                contentStream.showText(message);                contentStream.endText();            }        }        doc.save(outfile);    }}
public static void pdfbox_f567_0(String[] args) throws IOException
{    AddMessageToEachPage app = new AddMessageToEachPage();    if (args.length != 3) {        app.usage();    } else {        app.doIt(args[0], args[1], args[2]);    }}
private void pdfbox_f568_0()
{    System.err.println("usage: " + this.getClass().getName() + " <input-file> <Message> <output-file>");}
public static void pdfbox_f569_0(String[] args) throws IOException, TransformerException
{    if (args.length != 2) {        usage();    } else {        try (PDDocument document = PDDocument.load(new File(args[0]))) {            if (document.isEncrypted()) {                System.err.println("Error: Cannot add metadata to encrypted document.");                System.exit(1);            }            PDDocumentCatalog catalog = document.getDocumentCatalog();            PDDocumentInformation info = document.getDocumentInformation();            XMPMetadata metadata = XMPMetadata.createXMPMetadata();            AdobePDFSchema pdfSchema = metadata.createAndAddAdobePDFSchema();            pdfSchema.setKeywords(info.getKeywords());            pdfSchema.setProducer(info.getProducer());            XMPBasicSchema basicSchema = metadata.createAndAddXMPBasicSchema();            basicSchema.setModifyDate(info.getModificationDate());            basicSchema.setCreateDate(info.getCreationDate());            basicSchema.setCreatorTool(info.getCreator());            basicSchema.setMetadataDate(new GregorianCalendar());            DublinCoreSchema dcSchema = metadata.createAndAddDublinCoreSchema();            dcSchema.setTitle(info.getTitle());            dcSchema.addCreator("PDFBox");            dcSchema.setDescription(info.getSubject());            PDMetadata metadataStream = new PDMetadata(document);            catalog.setMetadata(metadataStream);            XmpSerializer serializer = new XmpSerializer();            ByteArrayOutputStream baos = new ByteArrayOutputStream();            serializer.serialize(metadata, baos, false);            metadataStream.importXMPMetadata(baos.toByteArray());            document.save(args[1]);        }    }}
private static void pdfbox_f570_0()
{    System.err.println("Usage: java " + AddMetadataFromDocInfo.class.getName() + " <input-pdf> <output-pdf>");}
public static void pdfbox_f571_0(String[] args) throws IOException, URISyntaxException
{    if (args.length != 1) {        System.err.println("usage: " + BengaliPdfGenerationHelloWorld.class.getName() + " <output-file> ");        System.exit(1);    }    String filename = args[0];    System.out.println("The generated pdf filename is: " + filename);    try (PDDocument doc = new PDDocument()) {        PDFont font = PDType0Font.load(doc, BengaliPdfGenerationHelloWorld.class.getResourceAsStream(LOHIT_BENGALI_TTF), true);        PDRectangle rectangle = getPageSize();        float workablePageWidth = rectangle.getWidth() - 2 * MARGIN;        float workablePageHeight = rectangle.getHeight() - 2 * MARGIN;        List<List<String>> pagedTexts = getReAlignedTextBasedOnPageHeight(getReAlignedTextBasedOnPageWidth(getBengaliTextFromFile(), font, workablePageWidth), font, workablePageHeight);        for (List<String> linesForPage : pagedTexts) {            PDPage page = new PDPage(getPageSize());            doc.addPage(page);            try (PDPageContentStream contents = new PDPageContentStream(doc, page)) {                contents.beginText();                contents.setFont(font, FONT_SIZE);                contents.newLineAtOffset(rectangle.getLowerLeftX() + MARGIN, rectangle.getUpperRightY() - MARGIN);                for (String line : linesForPage) {                    contents.showText(line);                    contents.newLineAtOffset(0, -(FONT_SIZE + LINE_GAP));                }                contents.endText();            }        }        doc.save(filename);    }}
private static List<List<String>> pdfbox_f572_0(List<String> originalLines, PDFont font, float workablePageHeight)
{    final float newLineHeight = font.getFontDescriptor().getFontBoundingBox().getHeight() / 1000 * FONT_SIZE + LINE_GAP;    List<List<String>> realignedTexts = new ArrayList<>();    float consumedHeight = 0;    List<String> linesInAPage = new ArrayList<>();    for (String line : originalLines) {        if (newLineHeight + consumedHeight < workablePageHeight) {            consumedHeight += newLineHeight;        } else {            consumedHeight = newLineHeight;            realignedTexts.add(linesInAPage);            linesInAPage = new ArrayList<>();        }        linesInAPage.add(line);    }    realignedTexts.add(linesInAPage);    return realignedTexts;}
private static List<String> pdfbox_f573_0(List<String> originalLines, PDFont font, float workablePageWidth) throws IOException
{    List<String> uniformlyWideTexts = new ArrayList<>();    float consumedWidth = 0;    StringBuilder sb = new StringBuilder();    for (String line : originalLines) {        float newTokenWidth = 0;        StringTokenizer st = new StringTokenizer(line, " ", true);        while (st.hasMoreElements()) {            String token = st.nextToken();            newTokenWidth = font.getStringWidth(token) / 1000 * FONT_SIZE;            if (newTokenWidth + consumedWidth < workablePageWidth) {                consumedWidth += newTokenWidth;            } else {                                uniformlyWideTexts.add(sb.toString());                consumedWidth = newTokenWidth;                sb = new StringBuilder();            }            sb.append(token);        }                uniformlyWideTexts.add(sb.toString());        consumedWidth = newTokenWidth;        sb = new StringBuilder();    }    return uniformlyWideTexts;}
private static PDRectangle pdfbox_f574_0()
{    return PDRectangle.A4;}
private static List<String> pdfbox_f575_0() throws IOException
{    List<String> lines = new ArrayList<>();    try (BufferedReader br = new BufferedReader(new InputStreamReader(BengaliPdfGenerationHelloWorld.class.getResourceAsStream(TEXT_SOURCE_FILE), Charsets.UTF_8))) {        while (true) {            String line = br.readLine();            if (line == null) {                break;            }            if (!line.startsWith("#")) {                lines.add(line);            }        }    }    return lines;}
public static void pdfbox_f576_0(String[] args) throws IOException
{    if (args.length != 1) {        System.err.println("usage: " + CreateBlankPDF.class.getName() + " <outputfile.pdf>");        System.exit(1);    }    String filename = args[0];    try (PDDocument doc = new PDDocument()) {                PDPage blankPage = new PDPage();        doc.addPage(blankPage);        doc.save(filename);    }}
public static void pdfbox_f577_0(String[] args) throws IOException
{    if (args.length != 2) {        usage();    } else {        try (PDDocument document = PDDocument.load(new File(args[0]))) {            if (document.isEncrypted()) {                System.err.println("Error: Cannot add bookmarks to encrypted document.");                System.exit(1);            }            PDDocumentOutline outline = new PDDocumentOutline();            document.getDocumentCatalog().setDocumentOutline(outline);            PDOutlineItem pagesOutline = new PDOutlineItem();            pagesOutline.setTitle("All Pages");            outline.addLast(pagesOutline);            int pageNum = 0;            for (PDPage page : document.getPages()) {                pageNum++;                PDPageDestination dest = new PDPageFitWidthDestination();                                                dest.setPage(page);                PDOutlineItem bookmark = new PDOutlineItem();                bookmark.setDestination(dest);                bookmark.setTitle("Page " + pageNum);                pagesOutline.addLast(bookmark);            }            pagesOutline.openNode();            outline.openNode();                        document.getDocumentCatalog().setPageMode(PageMode.USE_OUTLINES);            document.save(args[1]);        }    }}
private static void pdfbox_f578_0()
{    System.err.println("Usage: java " + CreateBookmarks.class.getName() + " <input-pdf> <output-pdf>");}
public void pdfbox_f579_0(String file) throws IOException
{    PDDocument document = null;    try {        document = new PDDocument();        PDPage page = new PDPage();        document.addPage(page);                        COSDictionary fdict = new COSDictionary();        fdict.setInt(COSName.FUNCTION_TYPE, 2);        COSArray domain = new COSArray();        domain.add(COSInteger.get(0));        domain.add(COSInteger.get(1));        COSArray c0 = new COSArray();        c0.add(COSFloat.get("1"));        c0.add(COSFloat.get("0"));        c0.add(COSFloat.get("0"));        COSArray c1 = new COSArray();        c1.add(COSFloat.get("0.5"));        c1.add(COSFloat.get("1"));        c1.add(COSFloat.get("0.5"));        fdict.setItem(COSName.DOMAIN, domain);        fdict.setItem(COSName.C0, c0);        fdict.setItem(COSName.C1, c1);        fdict.setInt(COSName.N, 1);        PDFunctionType2 func = new PDFunctionType2(fdict);                PDShadingType2 axialShading = new PDShadingType2(new COSDictionary());        axialShading.setColorSpace(PDDeviceRGB.INSTANCE);        axialShading.setShadingType(PDShading.SHADING_TYPE2);        COSArray coords1 = new COSArray();        coords1.add(COSInteger.get(100));        coords1.add(COSInteger.get(400));        coords1.add(COSInteger.get(400));        coords1.add(COSInteger.get(600));        axialShading.setCoords(coords1);        axialShading.setFunction(func);                PDShadingType3 radialShading = new PDShadingType3(new COSDictionary());        radialShading.setColorSpace(PDDeviceRGB.INSTANCE);        radialShading.setShadingType(PDShading.SHADING_TYPE3);        COSArray coords2 = new COSArray();        coords2.add(COSInteger.get(100));        coords2.add(COSInteger.get(400));                coords2.add(COSInteger.get(50));        coords2.add(COSInteger.get(400));        coords2.add(COSInteger.get(600));                coords2.add(COSInteger.get(150));        radialShading.setCoords(coords2);        radialShading.setFunction(func);                                PDShadingType4 gouraudShading = new PDShadingType4(document.getDocument().createCOSStream());        gouraudShading.setShadingType(PDShading.SHADING_TYPE4);                gouraudShading.setBitsPerFlag(8);        gouraudShading.setBitsPerCoordinate(16);        gouraudShading.setBitsPerComponent(8);        COSArray decodeArray = new COSArray();                                                decodeArray.add(COSInteger.ZERO);        decodeArray.add(COSInteger.get(0xFFFF));        decodeArray.add(COSInteger.ZERO);        decodeArray.add(COSInteger.get(0xFFFF));                decodeArray.add(COSInteger.ZERO);        decodeArray.add(COSInteger.ONE);        decodeArray.add(COSInteger.ZERO);        decodeArray.add(COSInteger.ONE);        decodeArray.add(COSInteger.ZERO);        decodeArray.add(COSInteger.ONE);        gouraudShading.setDecodeValues(decodeArray);        gouraudShading.setColorSpace(PDDeviceRGB.INSTANCE);                try (OutputStream os = ((COSStream) gouraudShading.getCOSObject()).createOutputStream();            MemoryCacheImageOutputStream mcos = new MemoryCacheImageOutputStream(os)) {                                    mcos.writeByte(0);                        mcos.writeShort(0);            mcos.writeShort(0);                        mcos.writeByte(0xFF);            mcos.writeByte(0);            mcos.writeByte(0);                        mcos.writeByte(0);                        mcos.writeShort(100);            mcos.writeShort(100);                        mcos.writeByte(0);            mcos.writeByte(0xFF);            mcos.writeByte(0);                        mcos.writeByte(0);                        mcos.writeShort(200);            mcos.writeShort(0);                        mcos.writeByte(0);            mcos.writeByte(0);            mcos.writeByte(0xFF);        }                try (PDPageContentStream contentStream = new PDPageContentStream(document, page, AppendMode.APPEND, false)) {            contentStream.shadingFill(axialShading);            contentStream.shadingFill(radialShading);            contentStream.shadingFill(gouraudShading);        }        document.save(file);        document.close();                document = PDDocument.load(new File(file));        BufferedImage bim = new PDFRenderer(document).renderImageWithDPI(0, 100);        ImageIO.write(bim, "png", new File(file + ".png"));        document.close();    } finally {        if (document != null) {            document.close();        }    }}
public static void pdfbox_f580_0(String[] args) throws IOException
{    if (args.length != 1) {        usage();    } else {        CreateGradientShadingPDF creator = new CreateGradientShadingPDF();        creator.create(args[0]);    }}
private static void pdfbox_f581_0()
{    System.err.println("usage: java " + CreateGradientShadingPDF.class.getName() + " <outputfile.pdf>");}
public void pdfbox_f582_0(String message, String outfile) throws IOException
{    try (PDDocument doc = new PDDocument()) {        PDFont font = PDType1Font.HELVETICA;        PDPage page = new PDPage(PDRectangle.A4);        page.setRotation(90);        doc.addPage(page);        PDRectangle pageSize = page.getMediaBox();        float pageWidth = pageSize.getWidth();        float fontSize = 12;        float stringWidth = font.getStringWidth(message) * fontSize / 1000f;        float startX = 100;        float startY = 100;        try (PDPageContentStream contentStream = new PDPageContentStream(doc, page, AppendMode.OVERWRITE, false)) {                                    contentStream.transform(new Matrix(0, 1, -1, 0, pageWidth, 0));            contentStream.setFont(font, fontSize);            contentStream.beginText();            contentStream.newLineAtOffset(startX, startY);            contentStream.showText(message);            contentStream.newLineAtOffset(0, 100);            contentStream.showText(message);            contentStream.newLineAtOffset(100, 100);            contentStream.showText(message);            contentStream.endText();            contentStream.moveTo(startX - 2, startY - 2);            contentStream.lineTo(startX - 2, startY + 200 + fontSize);            contentStream.stroke();            contentStream.moveTo(startX - 2, startY + 200 + fontSize);            contentStream.lineTo(startX + 100 + stringWidth + 2, startY + 200 + fontSize);            contentStream.stroke();            contentStream.moveTo(startX + 100 + stringWidth + 2, startY + 200 + fontSize);            contentStream.lineTo(startX + 100 + stringWidth + 2, startY - 2);            contentStream.stroke();            contentStream.moveTo(startX + 100 + stringWidth + 2, startY - 2);            contentStream.lineTo(startX - 2, startY - 2);            contentStream.stroke();        }        doc.save(outfile);    }}
public static void pdfbox_f583_0(String[] args) throws IOException
{    CreateLandscapePDF app = new CreateLandscapePDF();    if (args.length != 2) {        app.usage();    } else {        app.doIt(args[0], args[1]);    }}
private void pdfbox_f584_0()
{    System.err.println("usage: " + this.getClass().getName() + " <Message> <output-file>");}
public static void pdfbox_f585_0(String[] args) throws IOException
{    try (PDDocument doc = new PDDocument()) {        doc.addPage(new PDPage());        doc.addPage(new PDPage());        doc.addPage(new PDPage());        PDPageLabels pageLabels = new PDPageLabels(doc);        PDPageLabelRange pageLabelRange1 = new PDPageLabelRange();        pageLabelRange1.setPrefix("RO ");        pageLabelRange1.setStart(3);        pageLabelRange1.setStyle(PDPageLabelRange.STYLE_ROMAN_UPPER);        pageLabels.setLabelItem(0, pageLabelRange1);        PDPageLabelRange pageLabelRange2 = new PDPageLabelRange();        pageLabelRange2.setStart(1);        pageLabelRange2.setStyle(PDPageLabelRange.STYLE_DECIMAL);        pageLabels.setLabelItem(2, pageLabelRange2);        doc.getDocumentCatalog().setPageLabels(pageLabels);        doc.save("labels.pdf");    }}
public static void pdfbox_f586_0(String[] args) throws IOException
{    try (PDDocument doc = new PDDocument()) {        PDPage page = new PDPage();        doc.addPage(page);        page.setResources(new PDResources());                try (PDPageContentStream pcs = new PDPageContentStream(doc, page)) {                        PDColorSpace patternCS1 = new PDPattern(null, PDDeviceRGB.INSTANCE);                        PDTilingPattern tilingPattern1 = new PDTilingPattern();            tilingPattern1.setBBox(new PDRectangle(0, 0, 10, 10));            tilingPattern1.setPaintType(PDTilingPattern.PAINT_COLORED);            tilingPattern1.setTilingType(PDTilingPattern.TILING_CONSTANT_SPACING);            tilingPattern1.setXStep(10);            tilingPattern1.setYStep(10);            COSName patternName1 = page.getResources().add(tilingPattern1);            try (PDPatternContentStream cs1 = new PDPatternContentStream(tilingPattern1)) {                                cs1.setStrokingColor(Color.red);                cs1.moveTo(0, 0);                cs1.lineTo(10, 10);                cs1.moveTo(-1, 9);                cs1.lineTo(1, 11);                cs1.moveTo(9, -1);                cs1.lineTo(11, 1);                cs1.stroke();            }            PDColor patternColor1 = new PDColor(patternName1, patternCS1);            pcs.addRect(50, 500, 200, 200);            pcs.setNonStrokingColor(patternColor1);            pcs.fill();                        PDTilingPattern tilingPattern2 = new PDTilingPattern();            tilingPattern2.setBBox(new PDRectangle(0, 0, 10, 10));            tilingPattern2.setPaintType(PDTilingPattern.PAINT_UNCOLORED);            tilingPattern2.setTilingType(PDTilingPattern.TILING_NO_DISTORTION);            tilingPattern2.setXStep(10);            tilingPattern2.setYStep(10);            COSName patternName2 = page.getResources().add(tilingPattern2);            try (PDPatternContentStream cs2 = new PDPatternContentStream(tilingPattern2)) {                                cs2.moveTo(0, 5);                cs2.lineTo(10, 5);                cs2.moveTo(5, 0);                cs2.lineTo(5, 10);                cs2.stroke();            }                                    PDColorSpace patternCS2 = new PDPattern(null, PDDeviceRGB.INSTANCE);            PDColor patternColor2green = new PDColor(new float[] { 0, 1, 0 }, patternName2, patternCS2);            pcs.addRect(300, 500, 100, 100);            pcs.setNonStrokingColor(patternColor2green);            pcs.fill();                        PDColor patternColor2blue = new PDColor(new float[] { 0, 0, 1 }, patternName2, patternCS2);            pcs.addRect(455, 505, 100, 100);            pcs.setNonStrokingColor(patternColor2blue);            pcs.fill();        }        doc.save("patterns.pdf");    }}
public static void pdfbox_f587_0(String[] args) throws IOException, TransformerException
{    if (args.length != 3) {        System.err.println("usage: " + CreatePDFA.class.getName() + " <output-file> <Message> <ttf-file>");        System.exit(1);    }    String file = args[0];    String message = args[1];    String fontfile = args[2];    try (PDDocument doc = new PDDocument()) {        PDPage page = new PDPage();        doc.addPage(page);                PDFont font = PDType0Font.load(doc, new File(fontfile));                if (!font.isEmbedded()) {            throw new IllegalStateException("PDF/A compliance requires that all fonts used for" + " text rendering in rendering modes other than rendering mode 3 are embedded.");        }                try (PDPageContentStream contents = new PDPageContentStream(doc, page)) {            contents.beginText();            contents.setFont(font, 12);            contents.newLineAtOffset(100, 700);            contents.showText(message);            contents.endText();        }                XMPMetadata xmp = XMPMetadata.createXMPMetadata();        try {            DublinCoreSchema dc = xmp.createAndAddDublinCoreSchema();            dc.setTitle(file);            PDFAIdentificationSchema id = xmp.createAndAddPFAIdentificationSchema();            id.setPart(1);            id.setConformance("B");            XmpSerializer serializer = new XmpSerializer();            ByteArrayOutputStream baos = new ByteArrayOutputStream();            serializer.serialize(xmp, baos, true);            PDMetadata metadata = new PDMetadata(doc);            metadata.importXMPMetadata(baos.toByteArray());            doc.getDocumentCatalog().setMetadata(metadata);        } catch (BadFieldValueException e) {                        throw new IllegalArgumentException(e);        }                InputStream colorProfile = CreatePDFA.class.getResourceAsStream("/org/apache/pdfbox/resources/pdfa/sRGB.icc");        PDOutputIntent intent = new PDOutputIntent(doc, colorProfile);        intent.setInfo("sRGB IEC61966-2.1");        intent.setOutputCondition("sRGB IEC61966-2.1");        intent.setOutputConditionIdentifier("sRGB IEC61966-2.1");        intent.setRegistryName("http://www.color.org");        doc.getDocumentCatalog().addOutputIntent(intent);        doc.save(file);    }}
public void pdfbox_f588_0(String file) throws IOException
{    try (PDDocument doc = new PDDocument()) {        PDPage page = new PDPage();        doc.addPage(page);        PDFont font = PDType1Font.HELVETICA_BOLD;        try (PDPageContentStream contentStream = new PDPageContentStream(doc, page)) {            contentStream.beginText();            contentStream.setFont(font, 12);            contentStream.newLineAtOffset(100, 700);            contentStream.showText("Go to Document->File Attachments to View Embedded Files");            contentStream.endText();        }                PDEmbeddedFilesNameTreeNode efTree = new PDEmbeddedFilesNameTreeNode();                PDComplexFileSpecification fs = new PDComplexFileSpecification();                fs.setFile("Test.txt");        fs.setFileUnicode("Test.txt");                byte[] data = "This is the contents of the embedded file".getBytes("ISO-8859-1");        ByteArrayInputStream fakeFile = new ByteArrayInputStream(data);        PDEmbeddedFile ef = new PDEmbeddedFile(doc, fakeFile);                ef.setSubtype("text/plain");        ef.setSize(data.length);        ef.setCreationDate(new GregorianCalendar());                fs.setEmbeddedFile(ef);        fs.setEmbeddedFileUnicode(ef);                PDEmbeddedFilesNameTreeNode treeNode = new PDEmbeddedFilesNameTreeNode();        treeNode.setNames(Collections.singletonMap("My first attachment", fs));                List<PDEmbeddedFilesNameTreeNode> kids = new ArrayList<>();        kids.add(treeNode);        efTree.setKids(kids);                PDDocumentNameDictionary names = new PDDocumentNameDictionary(doc.getDocumentCatalog());        names.setEmbeddedFiles(efTree);        doc.getDocumentCatalog().setNames(names);                doc.getDocumentCatalog().setPageMode(PageMode.USE_ATTACHMENTS);        doc.save(file);    }}
public static void pdfbox_f589_0(String[] args) throws IOException
{    EmbeddedFiles app = new EmbeddedFiles();    if (args.length != 1) {        app.usage();    } else {        app.doIt(args[0]);    }}
private void pdfbox_f590_0()
{    System.err.println("usage: " + this.getClass().getName() + " <output-file>");}
public static void pdfbox_f591_0(String[] args) throws IOException
{    try (PDDocument document = new PDDocument()) {        PDPage page = new PDPage(PDRectangle.A4);        document.addPage(page);        String dir = "../pdfbox/src/main/resources/org/apache/pdfbox/resources/ttf/";        PDType0Font font = PDType0Font.load(document, new File(dir + "LiberationSans-Regular.ttf"));        try (PDPageContentStream stream = new PDPageContentStream(document, page)) {            stream.beginText();            stream.setFont(font, 12);            stream.setLeading(12 * 1.2f);            stream.newLineAtOffset(50, 600);            stream.showText("PDFBox's Unicode with Embedded TrueType Font");            stream.newLine();            stream.showText("Supports full Unicode text ☺");            stream.newLine();            stream.showText("English русский язык Tiếng Việt");            stream.newLine();                        stream.showText("Ligatures: \uFB01lm \uFB02ood");            stream.endText();        }        document.save("example.pdf");    }}
public static void pdfbox_f592_0(String[] args) throws IOException
{    try (PDDocument document = new PDDocument();        TrueTypeCollection ttc2 = new TrueTypeCollection(new File("c:/windows/fonts/batang.ttc"));        TrueTypeCollection ttc3 = new TrueTypeCollection(new File("c:/windows/fonts/mingliu.ttc"))) {        PDPage page = new PDPage(PDRectangle.A4);        document.addPage(page);                PDFont font1 = PDType1Font.HELVETICA;                PDType0Font font2 = PDType0Font.load(document, ttc2.getFontByName("Batang"), true);                PDType0Font font3 = PDType0Font.load(document, ttc3.getFontByName("MingLiU"), true);                PDType0Font font4 = PDType0Font.load(document, new File("c:/windows/fonts/mangal.ttf"));                PDType0Font font5 = PDType0Font.load(document, new File("c:/windows/fonts/ArialUni.ttf"));        try (PDPageContentStream cs = new PDPageContentStream(document, page)) {            cs.beginText();            List<PDFont> fonts = new ArrayList<>();            fonts.add(font1);            fonts.add(font2);            fonts.add(font3);            fonts.add(font4);            fonts.add(font5);            cs.newLineAtOffset(20, 700);            showTextMultiple(cs, "abc 한국 中国 भारत 日本 abc", fonts, 20);            cs.endText();        }        document.save("example.pdf");    }}
 static void pdfbox_f593_0(PDPageContentStream cs, String text, List<PDFont> fonts, float size) throws IOException
{    try {                fonts.get(0).encode(text);        cs.setFont(fonts.get(0), size);        cs.showText(text);        return;    } catch (IllegalArgumentException ex) {        }        int i = 0;    while (i < text.length()) {        boolean found = false;        for (PDFont font : fonts) {            try {                String s = text.substring(i, i + 1);                font.encode(s);                                int j = i + 1;                for (; j < text.length(); ++j) {                    String s2 = text.substring(j, j + 1);                    if (isWinAnsiEncoding(s2.codePointAt(0)) && font != fonts.get(0)) {                                                break;                    }                    try {                        font.encode(s2);                    } catch (IllegalArgumentException ex) {                                                break;                    }                }                s = text.substring(i, j);                cs.setFont(font, size);                cs.showText(s);                i = j;                found = true;                break;            } catch (IllegalArgumentException ex) {                        }        }        if (!found) {            throw new IllegalArgumentException("Could not show '" + text.substring(i, i + 1) + "' with the fonts provided");        }    }}
 static boolean pdfbox_f594_0(int unicode)
{    String name = GlyphList.getAdobeGlyphList().codePointToName(unicode);    if (".notdef".equals(name)) {        return false;    }    return WinAnsiEncoding.INSTANCE.contains(name);}
public static void pdfbox_f595_0(String[] args) throws IOException
{    PDDocument document = new PDDocument();    PDPage page = new PDPage();    document.addPage(page);                File ipafont = new File("ipag.ttf");                    PDType0Font hfont = PDType0Font.load(document, ipafont);        PDType0Font vfont = PDType0Font.loadVertical(document, ipafont);            TrueTypeFont ttf = new TTFParser().parse(ipafont);    PDType0Font vfont2 = PDType0Font.loadVertical(document, ttf, true);    ttf.disableGsubFeature("vrt2");    ttf.disableGsubFeature("vert");    try (PDPageContentStream contentStream = new PDPageContentStream(document, page)) {        contentStream.beginText();        contentStream.setFont(hfont, 20);        contentStream.setLeading(25);        contentStream.newLineAtOffset(20, 300);        contentStream.showText("Key:");        contentStream.newLine();        contentStream.showText("① Horizontal");        contentStream.newLine();        contentStream.showText("② Vertical with substitution");        contentStream.newLine();        contentStream.showText("③ Vertical without substitution");        contentStream.endText();        contentStream.beginText();        contentStream.setFont(hfont, 20);        contentStream.newLineAtOffset(20, 650);        contentStream.showText("①「あーだこーだ」");        contentStream.endText();        contentStream.beginText();        contentStream.setFont(vfont, 20);        contentStream.newLineAtOffset(50, 600);        contentStream.showText("②「あーだこーだ」");        contentStream.endText();        contentStream.beginText();        contentStream.setFont(vfont2, 20);        contentStream.newLineAtOffset(100, 600);        contentStream.showText("③「あーだこーだ」");        contentStream.endText();    }        document.save("vertical.pdf");}
public static void pdfbox_f596_0(String[] args) throws IOException
{    if (args.length != 1) {        usage();        System.exit(1);    } else {        PDDocument document = null;        try {            File pdfFile = new File(args[0]);            String filePath = pdfFile.getParent() + System.getProperty("file.separator");            document = PDDocument.load(pdfFile);            PDDocumentNameDictionary namesDictionary = new PDDocumentNameDictionary(document.getDocumentCatalog());            PDEmbeddedFilesNameTreeNode efTree = namesDictionary.getEmbeddedFiles();            if (efTree != null) {                Map<String, PDComplexFileSpecification> names = efTree.getNames();                if (names != null) {                    extractFiles(names, filePath);                } else {                    List<PDNameTreeNode<PDComplexFileSpecification>> kids = efTree.getKids();                    for (PDNameTreeNode<PDComplexFileSpecification> node : kids) {                        names = node.getNames();                        extractFiles(names, filePath);                    }                }            }                        for (PDPage page : document.getPages()) {                for (PDAnnotation annotation : page.getAnnotations()) {                    if (annotation instanceof PDAnnotationFileAttachment) {                        PDAnnotationFileAttachment annotationFileAttachment = (PDAnnotationFileAttachment) annotation;                        PDFileSpecification fileSpec = annotationFileAttachment.getFile();                        if (fileSpec instanceof PDComplexFileSpecification) {                            PDComplexFileSpecification complexFileSpec = (PDComplexFileSpecification) fileSpec;                            PDEmbeddedFile embeddedFile = getEmbeddedFile(complexFileSpec);                            extractFile(filePath, complexFileSpec.getFilename(), embeddedFile);                        }                    }                }            }        } finally {            if (document != null) {                document.close();            }        }    }}
private static void pdfbox_f597_0(Map<String, PDComplexFileSpecification> names, String filePath) throws IOException
{    for (Entry<String, PDComplexFileSpecification> entry : names.entrySet()) {        String filename = entry.getKey();        PDComplexFileSpecification fileSpec = entry.getValue();        PDEmbeddedFile embeddedFile = getEmbeddedFile(fileSpec);        extractFile(filePath, filename, embeddedFile);    }}
private static void pdfbox_f598_0(String filePath, String filename, PDEmbeddedFile embeddedFile) throws IOException
{    String embeddedFilename = filePath + filename;    File file = new File(filePath + filename);    System.out.println("Writing " + embeddedFilename);    try (FileOutputStream fos = new FileOutputStream(file)) {        fos.write(embeddedFile.toByteArray());    }}
private static PDEmbeddedFile pdfbox_f599_0(PDComplexFileSpecification fileSpec)
{        PDEmbeddedFile embeddedFile = null;    if (fileSpec != null) {        embeddedFile = fileSpec.getEmbeddedFileUnicode();        if (embeddedFile == null) {            embeddedFile = fileSpec.getEmbeddedFileDos();        }        if (embeddedFile == null) {            embeddedFile = fileSpec.getEmbeddedFileMac();        }        if (embeddedFile == null) {            embeddedFile = fileSpec.getEmbeddedFileUnix();        }        if (embeddedFile == null) {            embeddedFile = fileSpec.getEmbeddedFile();        }    }    return embeddedFile;}
private static void pdfbox_f600_0()
{    System.err.println("Usage: java " + ExtractEmbeddedFiles.class.getName() + " <input-pdf>");}
public static void pdfbox_f601_0(String[] args) throws IOException, XmpParsingException
{    if (args.length != 1) {        usage();        System.exit(1);    } else {        try (PDDocument document = PDDocument.load(new File(args[0]))) {            PDDocumentCatalog catalog = document.getDocumentCatalog();            PDMetadata meta = catalog.getMetadata();            if (meta != null) {                DomXmpParser xmpParser = new DomXmpParser();                try {                    XMPMetadata metadata = xmpParser.parse(meta.createInputStream());                    DublinCoreSchema dc = metadata.getDublinCoreSchema();                    if (dc != null) {                        display("Title:", dc.getTitle());                        display("Description:", dc.getDescription());                        listString("Creators: ", dc.getCreators());                        listCalendar("Dates:", dc.getDates());                        listString("Subjects:", dc.getSubjects());                    }                    AdobePDFSchema pdf = metadata.getAdobePDFSchema();                    if (pdf != null) {                        display("Keywords:", pdf.getKeywords());                        display("PDF Version:", pdf.getPDFVersion());                        display("PDF Producer:", pdf.getProducer());                    }                    XMPBasicSchema basic = metadata.getXMPBasicSchema();                    if (basic != null) {                        display("Create Date:", basic.getCreateDate());                        display("Modify Date:", basic.getModifyDate());                        display("Creator Tool:", basic.getCreatorTool());                    }                } catch (XmpParsingException e) {                    System.err.println("An error ouccred when parsing the meta data: " + e.getMessage());                }            } else {                                                PDDocumentInformation information = document.getDocumentInformation();                if (information != null) {                    showDocumentInformation(information);                }            }        }    }}
private static void pdfbox_f602_0(PDDocumentInformation information)
{    display("Title:", information.getTitle());    display("Subject:", information.getSubject());    display("Author:", information.getAuthor());    display("Creator:", information.getCreator());    display("Producer:", information.getProducer());}
private static void pdfbox_f603_0(String title, List<String> list)
{    if (list == null) {        return;    }    System.out.println(title);    for (String string : list) {        System.out.println("  " + string);    }}
private static void pdfbox_f604_0(String title, List<Calendar> list)
{    if (list == null) {        return;    }    System.out.println(title);    for (Calendar calendar : list) {        System.out.println("  " + format(calendar));    }}
private static String pdfbox_f605_0(Object o)
{    if (o instanceof Calendar) {        Calendar cal = (Calendar) o;        return DateFormat.getDateInstance().format(cal.getTime());    } else {        return o.toString();    }}
private static void pdfbox_f606_0(String title, Object value)
{    if (value != null) {        System.out.println(title + " " + format(value));    }}
private static void pdfbox_f607_0()
{    System.err.println("Usage: java " + ExtractMetadata.class.getName() + " <input-pdf>");}
public static void pdfbox_f608_0(String[] args) throws IOException
{    ExtractTTFFonts extractor = new ExtractTTFFonts();    extractor.extractFonts(args);}
private void pdfbox_f609_0(String[] args) throws IOException
{    if (args.length < 1 || args.length > 4) {        usage();    } else {        String pdfFile = null;        @SuppressWarnings({ "squid:S2068" })        String password = "";        String prefix = null;        boolean addKey = false;        for (int i = 0; i < args.length; i++) {            switch(args[i]) {                case PASSWORD:                    i++;                    if (i >= args.length) {                        usage();                    }                    password = args[i];                    break;                case PREFIX:                    i++;                    if (i >= args.length) {                        usage();                    }                    prefix = args[i];                    break;                case ADDKEY:                    addKey = true;                    break;                default:                    if (pdfFile == null) {                        pdfFile = args[i];                    }                    break;            }        }        if (pdfFile == null) {            usage();        } else {            if (prefix == null && pdfFile.length() > 4) {                prefix = pdfFile.substring(0, pdfFile.length() - 4);            }            try (PDDocument document = PDDocument.load(new File(pdfFile), password)) {                for (PDPage page : document.getPages()) {                    PDResources resources = page.getResources();                                        processResources(resources, prefix, addKey);                }            }        }    }}
private void pdfbox_f610_0(PDResources resources, String prefix, boolean addKey) throws IOException
{    if (resources == null) {        return;    }    for (COSName key : resources.getFontNames()) {        PDFont font = resources.getFont(key);                if (font instanceof PDTrueTypeFont) {            String name;            if (addKey) {                name = getUniqueFileName(prefix + "_" + key, "ttf");            } else {                name = getUniqueFileName(prefix, "ttf");            }            writeFont(font.getFontDescriptor(), name);        } else if (font instanceof PDType0Font) {            PDCIDFont descendantFont = ((PDType0Font) font).getDescendantFont();            if (descendantFont instanceof PDCIDFontType2) {                String name;                if (addKey) {                    name = getUniqueFileName(prefix + "_" + key, "ttf");                } else {                    name = getUniqueFileName(prefix, "ttf");                }                writeFont(descendantFont.getFontDescriptor(), name);            }        }    }    for (COSName name : resources.getXObjectNames()) {        PDXObject xobject = resources.getXObject(name);        if (xobject instanceof PDFormXObject) {            PDFormXObject xObjectForm = (PDFormXObject) xobject;            PDResources formResources = xObjectForm.getResources();            processResources(formResources, prefix, addKey);        }    }}
private void pdfbox_f611_0(PDFontDescriptor fd, String name) throws IOException
{    if (fd != null) {        PDStream ff2Stream = fd.getFontFile2();        if (ff2Stream != null) {            System.out.println("Writing font: " + name);            try (OutputStream os = new FileOutputStream(new File(name + ".ttf"));                InputStream is = ff2Stream.createInputStream()) {                IOUtils.copy(is, os);            }        }    }}
private String pdfbox_f612_0(String prefix, String suffix)
{    String uniqueName = null;    File f = null;    while (f == null || f.exists()) {        uniqueName = prefix + "-" + fontCounter;        f = new File(uniqueName + "." + suffix);        fontCounter++;    }    return uniqueName;}
private static void pdfbox_f613_0()
{    System.err.println("Usage: java " + ExtractTTFFonts.class.getName() + " [OPTIONS] <PDF file>\n" + "  -password  <password>        Password to decrypt document\n" + "  -prefix  <font-prefix>       Font prefix(default to pdf name)\n" + "  -addkey                      add the internal font key to the file name\n" + "  <PDF file>                   The PDF document to use\n");    System.exit(1);}
public static void pdfbox_f614_0(String[] args) throws IOException
{    if (args.length != 2) {        usage();    } else {        try (PDDocument document = PDDocument.load(new File(args[0]))) {            if (document.isEncrypted()) {                System.err.println("Error: Cannot add bookmark destination to encrypted documents.");                System.exit(1);            }            if (document.getNumberOfPages() < 2) {                throw new IOException("Error: The PDF must have at least 2 pages.");            }            PDDocumentOutline bookmarks = document.getDocumentCatalog().getDocumentOutline();            if (bookmarks == null) {                throw new IOException("Error: The PDF does not contain any bookmarks");            }            PDOutlineItem item = bookmarks.getFirstChild().getNextSibling();            PDDestination dest = item.getDestination();            PDActionGoTo action = new PDActionGoTo();            action.setDestination(dest);            document.getDocumentCatalog().setOpenAction(action);            document.save(args[1]);        }    }}
private static void pdfbox_f615_0()
{    System.err.println("Usage: java " + GoToSecondBookmarkOnOpen.class.getName() + "<input-pdf> <output-pdf>");}
public static void pdfbox_f616_0(String[] args) throws IOException
{    if (args.length != 2) {        System.err.println("usage: " + HelloWorld.class.getName() + " <output-file> <Message>");        System.exit(1);    }    String filename = args[0];    String message = args[1];    try (PDDocument doc = new PDDocument()) {        PDPage page = new PDPage();        doc.addPage(page);        PDFont font = PDType1Font.HELVETICA_BOLD;        try (PDPageContentStream contents = new PDPageContentStream(doc, page)) {            contents.beginText();            contents.setFont(font, 12);            contents.newLineAtOffset(100, 700);            contents.showText(message);            contents.endText();        }        doc.save(filename);    }}
public static void pdfbox_f617_0(String[] args) throws IOException
{    if (args.length != 3) {        System.err.println("usage: " + HelloWorldTTF.class.getName() + " <output-file> <Message> <ttf-file>");        System.exit(1);    }    String pdfPath = args[0];    String message = args[1];    String ttfPath = args[2];    try (PDDocument doc = new PDDocument()) {        PDPage page = new PDPage();        doc.addPage(page);        PDFont font = PDType0Font.load(doc, new File(ttfPath));        try (PDPageContentStream contents = new PDPageContentStream(doc, page)) {            contents.beginText();            contents.setFont(font, 12);            contents.newLineAtOffset(100, 700);            contents.showText(message);            contents.endText();        }        doc.save(pdfPath);        System.out.println(pdfPath + " created!");    }}
public static void pdfbox_f618_0(String[] args) throws IOException
{    if (args.length != 3) {        System.err.println("usage: " + HelloWorldType1.class.getName() + " <output-file> <Message> <pfb-file>");        System.exit(1);    }    String file = args[0];    String message = args[1];    String pfbPath = args[2];    try (PDDocument doc = new PDDocument()) {        PDPage page = new PDPage();        doc.addPage(page);        PDFont font = new PDType1Font(doc, new FileInputStream(pfbPath));        try (PDPageContentStream contents = new PDPageContentStream(doc, page)) {            contents.beginText();            contents.setFont(font, 12);            contents.newLineAtOffset(100, 700);            contents.showText(message);            contents.endText();        }        doc.save(file);        System.out.println(file + " created!");    }}
public static void pdfbox_f619_0(String[] args) throws IOException
{    if (args.length != 2) {        System.err.println("usage: " + ImageToPDF.class.getName() + " <image> <output-file>");        System.exit(1);    }    String imagePath = args[0];    String pdfPath = args[1];    if (!pdfPath.endsWith(".pdf")) {        System.err.println("Last argument must be the destination .pdf file");        System.exit(1);    }    try (PDDocument doc = new PDDocument()) {        PDPage page = new PDPage();        doc.addPage(page);                                PDImageXObject pdImage = PDImageXObject.createFromFile(imagePath, doc);                try (PDPageContentStream contents = new PDPageContentStream(doc, page)) {                        contents.drawImage(pdImage, 20, 20);                        }        doc.save(pdfPath);    }}
public static void pdfbox_f620_0(String[] args) throws IOException
{    if (args.length != 1) {        usage();    } else {        try (PDDocument document = PDDocument.load(new File(args[0]))) {            PrintBookmarks meta = new PrintBookmarks();            PDDocumentOutline outline = document.getDocumentCatalog().getDocumentOutline();            if (outline != null) {                meta.printBookmark(document, outline, "");            } else {                System.out.println("This document does not contain any bookmarks");            }        }    }}
private static void pdfbox_f621_0()
{    System.err.println("Usage: java " + PrintBookmarks.class.getName() + " <input-pdf>");}
public void pdfbox_f622_0(PDDocument document, PDOutlineNode bookmark, String indentation) throws IOException
{    PDOutlineItem current = bookmark.getFirstChild();    while (current != null) {        if (current.getDestination() instanceof PDPageDestination) {            PDPageDestination pd = (PDPageDestination) current.getDestination();            System.out.println(indentation + "Destination page: " + (pd.retrievePageNumber() + 1));        } else if (current.getDestination() instanceof PDNamedDestination) {            PDPageDestination pd = document.getDocumentCatalog().findNamedDestinationPage((PDNamedDestination) current.getDestination());            if (pd != null) {                System.out.println(indentation + "Destination page: " + (pd.retrievePageNumber() + 1));            }        } else if (current.getDestination() != null) {            System.out.println(indentation + "Destination class: " + current.getDestination().getClass().getSimpleName());        }        if (current.getAction() instanceof PDActionGoTo) {            PDActionGoTo gta = (PDActionGoTo) current.getAction();            if (gta.getDestination() instanceof PDPageDestination) {                PDPageDestination pd = (PDPageDestination) gta.getDestination();                System.out.println(indentation + "Destination page: " + (pd.retrievePageNumber() + 1));            } else if (gta.getDestination() instanceof PDNamedDestination) {                PDPageDestination pd = document.getDocumentCatalog().findNamedDestinationPage((PDNamedDestination) gta.getDestination());                if (pd != null) {                    System.out.println(indentation + "Destination page: " + (pd.retrievePageNumber() + 1));                }            } else {                System.out.println(indentation + "Destination class: " + gta.getDestination().getClass().getSimpleName());            }        } else if (current.getAction() != null) {            System.out.println(indentation + "Action class: " + current.getAction().getClass().getSimpleName());        }        System.out.println(indentation + current.getTitle());        printBookmark(document, current, indentation + "    ");        current = current.getNextSibling();    }}
public static void pdfbox_f623_0(String[] args) throws IOException
{    if (args.length != 1) {        usage();    } else {        try (PDDocument document = PDDocument.load(new File(args[0]))) {            PrintDocumentMetaData meta = new PrintDocumentMetaData();            meta.printMetadata(document);        }    }}
private static void pdfbox_f624_0()
{    System.err.println("Usage: java " + PrintDocumentMetaData.class.getName() + " <input-pdf>");}
public void pdfbox_f625_0(PDDocument document) throws IOException
{    PDDocumentInformation info = document.getDocumentInformation();    PDDocumentCatalog cat = document.getDocumentCatalog();    PDMetadata metadata = cat.getMetadata();    System.out.println("Page Count=" + document.getNumberOfPages());    System.out.println("Title=" + info.getTitle());    System.out.println("Author=" + info.getAuthor());    System.out.println("Subject=" + info.getSubject());    System.out.println("Keywords=" + info.getKeywords());    System.out.println("Creator=" + info.getCreator());    System.out.println("Producer=" + info.getProducer());    System.out.println("Creation Date=" + formatDate(info.getCreationDate()));    System.out.println("Modification Date=" + formatDate(info.getModificationDate()));    System.out.println("Trapped=" + info.getTrapped());    if (metadata != null) {        String string = new String(metadata.toByteArray(), "ISO-8859-1");        System.out.println("Metadata=" + string);    }}
private String pdfbox_f626_0(Calendar date)
{    String retval = null;    if (date != null) {        SimpleDateFormat formatter = new SimpleDateFormat();        retval = formatter.format(date.getTime());    }    return retval;}
public static void pdfbox_f627_0(String[] args) throws IOException
{    PDDocument doc = null;    try {        if (args.length != 1) {            usage();        } else {            doc = PDDocument.load(new File(args[0]));            int pageNum = 0;            for (PDPage page : doc.getPages()) {                pageNum++;                PDFTextStripperByArea stripper = new PDFTextStripperByArea();                List<PDAnnotation> annotations = page.getAnnotations();                                for (int j = 0; j < annotations.size(); j++) {                    PDAnnotation annot = annotations.get(j);                    if (getActionURI(annot) != null) {                        PDRectangle rect = annot.getRectangle();                                                float x = rect.getLowerLeftX();                        float y = rect.getUpperRightY();                        float width = rect.getWidth();                        float height = rect.getHeight();                        int rotation = page.getRotation();                        if (rotation == 0) {                            PDRectangle pageSize = page.getMediaBox();                                                        y = pageSize.getHeight() - y;                        } else {                                                                        }                        Rectangle2D.Float awtRect = new Rectangle2D.Float(x, y, width, height);                        stripper.addRegion("" + j, awtRect);                    }                }                stripper.extractRegions(page);                for (int j = 0; j < annotations.size(); j++) {                    PDAnnotation annot = annotations.get(j);                    PDActionURI uri = getActionURI(annot);                    if (uri != null) {                        String urlText = stripper.getTextForRegion("" + j);                        System.out.println("Page " + pageNum + ":'" + urlText.trim() + "'=" + uri.getURI());                    }                }            }        }    } finally {        if (doc != null) {            doc.close();        }    }}
private static PDActionURI pdfbox_f628_0(PDAnnotation annot)
{        try {        Method actionMethod = annot.getClass().getDeclaredMethod("getAction");        if (actionMethod.getReturnType().equals(PDAction.class)) {            PDAction action = (PDAction) actionMethod.invoke(annot);            if (action instanceof PDActionURI) {                return (PDActionURI) action;            }        }    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {    }    return null;}
private static void pdfbox_f629_0()
{    System.err.println("usage: " + PrintURLs.class.getName() + " <input-file>");}
public static void pdfbox_f630_0(String[] args) throws IOException
{    if (args.length != 2) {        usage();    } else {        try (PDDocument document = PDDocument.load(new File(args[0]))) {            if (document.isEncrypted()) {                throw new IOException("Encrypted documents are not supported for this example");            }            if (document.getNumberOfPages() <= 1) {                throw new IOException("Error: A PDF document must have at least one page, " + "cannot remove the last page!");            }            document.removePage(0);            document.save(args[1]);        }    }}
private static void pdfbox_f631_0()
{    System.err.println("Usage: java " + RemoveFirstPage.class.getName() + " <input-pdf> <output-pdf>");}
public static void pdfbox_f632_0(String[] args) throws IOException
{    PDDocument doc = null;    try {        if (args.length != 2) {            usage();        } else {            doc = PDDocument.load(new File(args[0]));            int pageNum = 0;            for (PDPage page : doc.getPages()) {                pageNum++;                List<PDAnnotation> annotations = page.getAnnotations();                for (PDAnnotation annotation : annotations) {                    PDAnnotation annot = annotation;                    if (annot instanceof PDAnnotationLink) {                        PDAnnotationLink link = (PDAnnotationLink) annot;                        PDAction action = link.getAction();                        if (action instanceof PDActionURI) {                            PDActionURI uri = (PDActionURI) action;                            String oldURI = uri.getURI();                            String newURI = "http://pdfbox.apache.org";                            System.out.println("Page " + pageNum + ": Replacing " + oldURI + " with " + newURI);                            uri.setURI(newURI);                        }                    }                }            }            doc.save(args[1]);        }    } finally {        if (doc != null) {            doc.close();        }    }}
private static void pdfbox_f633_0()
{    System.err.println("usage: " + ReplaceURLs.class.getName() + " <input-file> <output-file>");}
public static void pdfbox_f634_0(String[] args) throws IOException
{    if (args.length != 2) {        usage();    } else {        try (PDDocument document = PDDocument.load(new File(args[0]))) {            if (document.isEncrypted()) {                throw new IOException("Encrypted documents are not supported for this example");            }            for (PDPage page : document.getPages()) {                List<PDAnnotation> annotations = page.getAnnotations();                PDAnnotationRubberStamp rs = new PDAnnotationRubberStamp();                rs.setName(PDAnnotationRubberStamp.NAME_TOP_SECRET);                rs.setRectangle(new PDRectangle(100, 100));                rs.setContents("A top secret note");                annotations.add(rs);            }            document.save(args[1]);        }    }}
private static void pdfbox_f635_0()
{    System.err.println("Usage: java " + RubberStamp.class.getName() + " <input-pdf> <output-pdf>");}
public void pdfbox_f636_0(String[] args) throws IOException
{    if (args.length != 3) {        usage();    } else {        try (PDDocument document = PDDocument.load(new File(args[0]))) {            if (document.isEncrypted()) {                throw new IOException("Encrypted documents are not supported for this example");            }            for (int i = 0; i < document.getNumberOfPages(); i++) {                PDPage page = document.getPage(i);                List<PDAnnotation> annotations = page.getAnnotations();                PDAnnotationRubberStamp rubberStamp = new PDAnnotationRubberStamp();                rubberStamp.setName(PDAnnotationRubberStamp.NAME_TOP_SECRET);                rubberStamp.setRectangle(new PDRectangle(200, 100));                rubberStamp.setContents("A top secret note");                                                                PDImageXObject ximage = PDImageXObject.createFromFile(args[2], document);                                int lowerLeftX = 250;                int lowerLeftY = 550;                int formWidth = 150;                int formHeight = 25;                int imgWidth = 50;                int imgHeight = 25;                PDRectangle rect = new PDRectangle();                rect.setLowerLeftX(lowerLeftX);                rect.setLowerLeftY(lowerLeftY);                rect.setUpperRightX(lowerLeftX + formWidth);                rect.setUpperRightY(lowerLeftY + formHeight);                                PDFormXObject form = new PDFormXObject(document);                form.setResources(new PDResources());                form.setBBox(rect);                form.setFormType(1);                                try (OutputStream os = form.getStream().createOutputStream()) {                    drawXObject(ximage, form.getResources(), os, lowerLeftX, lowerLeftY, imgWidth, imgHeight);                }                PDAppearanceStream myDic = new PDAppearanceStream(form.getCOSObject());                PDAppearanceDictionary appearance = new PDAppearanceDictionary(new COSDictionary());                appearance.setNormalAppearance(myDic);                rubberStamp.setAppearance(appearance);                rubberStamp.setRectangle(rect);                                annotations.add(rubberStamp);            }            document.save(args[1]);        }    }}
private void pdfbox_f637_0(PDImageXObject xobject, PDResources resources, OutputStream os, float x, float y, float width, float height) throws IOException
{        COSName xObjectId = resources.add(xobject);    appendRawCommands(os, SAVE_GRAPHICS_STATE);    appendRawCommands(os, formatDecimal.format(width));    appendRawCommands(os, SPACE);    appendRawCommands(os, formatDecimal.format(0));    appendRawCommands(os, SPACE);    appendRawCommands(os, formatDecimal.format(0));    appendRawCommands(os, SPACE);    appendRawCommands(os, formatDecimal.format(height));    appendRawCommands(os, SPACE);    appendRawCommands(os, formatDecimal.format(x));    appendRawCommands(os, SPACE);    appendRawCommands(os, formatDecimal.format(y));    appendRawCommands(os, SPACE);    appendRawCommands(os, CONCATENATE_MATRIX);    appendRawCommands(os, SPACE);    appendRawCommands(os, "/");    appendRawCommands(os, xObjectId.getName());    appendRawCommands(os, SPACE);    appendRawCommands(os, XOBJECT_DO);    appendRawCommands(os, SPACE);    appendRawCommands(os, RESTORE_GRAPHICS_STATE);}
private void pdfbox_f638_0(OutputStream os, String commands) throws IOException
{    os.write(commands.getBytes("ISO-8859-1"));}
public static void pdfbox_f639_0(String[] args) throws IOException
{    RubberStampWithImage rubberStamp = new RubberStampWithImage();    rubberStamp.doIt(args);}
private void pdfbox_f640_0()
{    System.err.println("Usage: java " + getClass().getName() + " <input-pdf> <output-pdf> <image-filename>");}
public static void pdfbox_f641_0(String[] args) throws IOException
{    if (args.length != 1) {        System.err.println("usage: " + ShowColorBoxes.class.getName() + " <output-file>");        System.exit(1);    }    String filename = args[0];    try (PDDocument doc = new PDDocument()) {        PDPage page = new PDPage();        doc.addPage(page);                try (PDPageContentStream contents = new PDPageContentStream(doc, page)) {                        contents.setNonStrokingColor(Color.CYAN);            contents.addRect(0, 0, page.getMediaBox().getWidth(), page.getMediaBox().getHeight());            contents.fill();                        contents.setNonStrokingColor(Color.RED);            contents.addRect(10, 10, 100, 100);            contents.fill();        }        doc.save(filename);    }}
public static void pdfbox_f642_0(String[] args) throws IOException
{    doIt("Hello World, this is a test!", "justify-example.pdf");}
public static void pdfbox_f643_0(String message, String outfile) throws IOException
{        try (PDDocument doc = new PDDocument();        InputStream is = PDDocument.class.getResourceAsStream("/org/apache/pdfbox/resources/ttf/LiberationSans-Regular.ttf")) {                PDFont font = PDType0Font.load(doc, is, true);        PDPage page = new PDPage(PDRectangle.A4);        doc.addPage(page);                float stringWidth = font.getStringWidth(message) * FONT_SIZE;                float stringHeight = font.getFontDescriptor().getFontBoundingBox().getHeight() * FONT_SIZE;                PDRectangle pageSize = page.getMediaBox();        try (PDPageContentStream contentStream = new PDPageContentStream(doc, page, AppendMode.OVERWRITE, false)) {            contentStream.beginText();            contentStream.setFont(font, FONT_SIZE);                        contentStream.setTextMatrix(Matrix.getTranslateInstance(0, pageSize.getHeight() - stringHeight / 1000f));                        contentStream.showText(message);                        contentStream.setTextMatrix(Matrix.getTranslateInstance(0, pageSize.getHeight() - stringHeight / 1000f * 2));                                    float justifyWidth = pageSize.getWidth() * 1000f - stringWidth;            List<Object> text = new ArrayList<>();            String[] parts = message.split("\\s");            float spaceWidth = (justifyWidth / (parts.length - 1)) / FONT_SIZE;            for (int i = 0; i < parts.length; i++) {                if (i != 0) {                    text.add(" ");                                        text.add(-spaceWidth);                }                text.add(parts[i]);            }            contentStream.showTextWithPositioning(text.toArray());            contentStream.setTextMatrix(Matrix.getTranslateInstance(0, pageSize.getHeight() - stringHeight / 1000f * 3));                        text = new ArrayList<>();            justifyWidth = pageSize.getWidth() * 1000f - stringWidth;            float extraLetterWidth = (justifyWidth / (message.codePointCount(0, message.length()) - 1)) / FONT_SIZE;            for (int i = 0; i < message.length(); i += Character.charCount(message.codePointAt(i))) {                if (i != 0) {                    text.add(-extraLetterWidth);                }                text.add(String.valueOf(Character.toChars(message.codePointAt(i))));            }            contentStream.showTextWithPositioning(text.toArray());                                                                                    contentStream.setTextMatrix(Matrix.getTranslateInstance(0, pageSize.getHeight() - stringHeight / 1000f * 4));            font = PDTrueTypeFont.load(doc, PDDocument.class.getResourceAsStream("/org/apache/pdfbox/resources/ttf/LiberationSans-Regular.ttf"), WinAnsiEncoding.INSTANCE);            contentStream.setFont(font, FONT_SIZE);            contentStream.showText(message);            float wordSpacing = (pageSize.getWidth() * 1000f - stringWidth) / (parts.length - 1) / 1000;                        contentStream.setTextMatrix(Matrix.getTranslateInstance(0, pageSize.getHeight() - stringHeight / 1000f * 5));            font = PDTrueTypeFont.load(doc, PDDocument.class.getResourceAsStream("/org/apache/pdfbox/resources/ttf/LiberationSans-Regular.ttf"), WinAnsiEncoding.INSTANCE);            contentStream.setFont(font, FONT_SIZE);            contentStream.setWordSpacing(wordSpacing);            contentStream.showText(message);                        contentStream.setTextMatrix(Matrix.getTranslateInstance(0, pageSize.getHeight() - stringHeight / 1000f * 6));            font = PDType0Font.load(doc, PDDocument.class.getResourceAsStream("/org/apache/pdfbox/resources/ttf/LiberationSans-Regular.ttf"));            contentStream.setFont(font, FONT_SIZE);            contentStream.setWordSpacing(wordSpacing);            contentStream.showText(message);                        contentStream.endText();        }        doc.save(outfile);    }}
public static void pdfbox_f644_0(String[] args) throws IOException
{    if (args.length != 2) {        System.err.println("usage: " + SuperimposePage.class.getName() + " <source-pdf> <dest-pdf>");        System.exit(1);    }    String sourcePath = args[0];    String destPath = args[1];    try (PDDocument sourceDoc = PDDocument.load(new File(sourcePath))) {        int sourcePage = 1;                try (PDDocument doc = new PDDocument()) {            PDPage page = new PDPage();            doc.addPage(page);                        try (PDPageContentStream contents = new PDPageContentStream(doc, page)) {                contents.beginText();                contents.setFont(PDType1Font.HELVETICA_BOLD, 12);                contents.newLineAtOffset(2, PDRectangle.LETTER.getHeight() - 12);                contents.showText("Sample text");                contents.endText();                                LayerUtility layerUtility = new LayerUtility(doc);                PDFormXObject form = layerUtility.importPageAsForm(sourceDoc, sourcePage - 1);                                contents.drawForm(form);                                contents.saveGraphicsState();                Matrix matrix = Matrix.getScaleInstance(0.5f, 0.5f);                contents.transform(matrix);                contents.drawForm(form);                contents.restoreGraphicsState();                                contents.saveGraphicsState();                                matrix.rotate(1.8 * Math.PI);                contents.transform(matrix);                contents.drawForm(form);                contents.restoreGraphicsState();            }            doc.save(destPath);        }    }}
public void pdfbox_f645_0(String message, String outfile) throws IOException
{        try (PDDocument doc = new PDDocument()) {                PDFont font = PDType1Font.HELVETICA;        PDPage page = new PDPage(PDRectangle.A4);        doc.addPage(page);        float fontSize = 12.0f;        PDRectangle pageSize = page.getMediaBox();        float centeredXPosition = (pageSize.getWidth() - fontSize / 1000f) / 2f;        float stringWidth = font.getStringWidth(message);        float centeredYPosition = (pageSize.getHeight() - (stringWidth * fontSize) / 1000f) / 3f;        PDPageContentStream contentStream = new PDPageContentStream(doc, page, AppendMode.OVERWRITE, false);        contentStream.setFont(font, fontSize);        contentStream.beginText();                for (int i = 0; i < 8; i++) {            contentStream.setTextMatrix(Matrix.getRotateInstance(i * Math.PI * 0.25, centeredXPosition, pageSize.getHeight() - centeredYPosition));            contentStream.showText(message + " " + i);        }                for (int i = 0; i < 8; i++) {            contentStream.setTextMatrix(Matrix.getRotateInstance(-i * Math.PI * 0.25, centeredXPosition, centeredYPosition));            contentStream.showText(message + " " + i);        }        contentStream.endText();        contentStream.close();                page = new PDPage(PDRectangle.A4);        doc.addPage(page);        fontSize = 1.0f;        contentStream = new PDPageContentStream(doc, page, AppendMode.OVERWRITE, false);        contentStream.setFont(font, fontSize);        contentStream.beginText();                for (int i = 0; i < 10; i++) {            contentStream.setTextMatrix(new Matrix(12 + (i * 6), 0, 0, 12 + (i * 6), 100, 100 + i * 50));            contentStream.showText(message + " " + i);        }        contentStream.endText();        contentStream.close();                page = new PDPage(PDRectangle.A4);        doc.addPage(page);        fontSize = 1.0f;        contentStream = new PDPageContentStream(doc, page, AppendMode.OVERWRITE, false);        contentStream.setFont(font, fontSize);        contentStream.beginText();        int i = 0;                contentStream.setTextMatrix(new Matrix(12, 0, 0, 12, centeredXPosition, centeredYPosition * 1.5f));        contentStream.showText(message + " " + i++);        contentStream.setTextMatrix(new Matrix(0, 18, -18, 0, centeredXPosition, centeredYPosition * 1.5f));        contentStream.showText(message + " " + i++);        contentStream.setTextMatrix(new Matrix(-24, 0, 0, -24, centeredXPosition, centeredYPosition * 1.5f));        contentStream.showText(message + " " + i++);        contentStream.setTextMatrix(new Matrix(0, -30, 30, 0, centeredXPosition, centeredYPosition * 1.5f));        contentStream.showText(message + " " + i++);        contentStream.endText();        contentStream.close();        doc.save(outfile);    }}
public static void pdfbox_f646_0(String[] args) throws IOException
{    UsingTextMatrix app = new UsingTextMatrix();    if (args.length != 2) {        app.usage();    } else {        app.doIt(args[0], args[1]);    }}
private void pdfbox_f647_0()
{    System.err.println("usage: " + this.getClass().getName() + " <Message> <output-file>");}
public static void pdfbox_f648_0(String[] args) throws PrinterException, IOException
{    if (args.length != 1) {        System.err.println("usage: java " + Printing.class.getName() + " <input>");        System.exit(1);    }    String filename = args[0];    try (PDDocument document = PDDocument.load(new File(filename))) {                print(document);                    }}
private static void pdfbox_f649_0(PDDocument document) throws IOException, PrinterException
{    PrinterJob job = PrinterJob.getPrinterJob();    job.setPageable(new PDFPageable(document));    job.print();}
private static void pdfbox_f650_0(PDDocument document) throws IOException, PrinterException
{    PrinterJob job = PrinterJob.getPrinterJob();    job.setPageable(new PDFPageable(document));    PrintRequestAttributeSet attr = new HashPrintRequestAttributeSet();        attr.add(new PageRanges(1, 1));    job.print(attr);}
private static void pdfbox_f651_0(PDDocument document) throws IOException, PrinterException
{    PrinterJob job = PrinterJob.getPrinterJob();    job.setPageable(new PDFPageable(document));    if (job.printDialog()) {        job.print();    }}
private static void pdfbox_f652_0(PDDocument document) throws IOException, PrinterException
{    PrinterJob job = PrinterJob.getPrinterJob();    job.setPageable(new PDFPageable(document));    PrintRequestAttributeSet attr = new HashPrintRequestAttributeSet();        attr.add(new PageRanges(1, 1));    PDViewerPreferences vp = document.getDocumentCatalog().getViewerPreferences();    if (vp != null && vp.getDuplex() != null) {        String dp = vp.getDuplex();        if (PDViewerPreferences.DUPLEX.DuplexFlipLongEdge.toString().equals(dp)) {            attr.add(Sides.TWO_SIDED_LONG_EDGE);        } else if (PDViewerPreferences.DUPLEX.DuplexFlipShortEdge.toString().equals(dp)) {            attr.add(Sides.TWO_SIDED_SHORT_EDGE);        } else if (PDViewerPreferences.DUPLEX.Simplex.toString().equals(dp)) {            attr.add(Sides.ONE_SIDED);        }    }    if (job.printDialog(attr)) {        job.print(attr);    }}
private static void pdfbox_f653_0(PDDocument document) throws IOException, PrinterException
{    PrinterJob job = PrinterJob.getPrinterJob();    job.setPageable(new PDFPageable(document));        Paper paper = new Paper();        paper.setSize(306, 396);        paper.setImageableArea(0, 0, paper.getWidth(), paper.getHeight());        PageFormat pageFormat = new PageFormat();    pageFormat.setPaper(paper);        Book book = new Book();        book.append(new PDFPrintable(document), pageFormat, document.getNumberOfPages());    job.setPageable(book);    job.print();}
public static void pdfbox_f654_0(String[] args) throws IOException
{    File file = new File("src/main/resources/org/apache/pdfbox/examples/rendering/", "custom-render-demo.pdf");    try (PDDocument doc = PDDocument.load(file)) {        PDPage page = doc.getPage(0);        CustomGraphicsStreamEngine engine = new CustomGraphicsStreamEngine(page);        engine.run();    }}
public void pdfbox_f655_0() throws IOException
{    processPage(getPage());    for (PDAnnotation annotation : getPage().getAnnotations()) {        showAnnotation(annotation);    }}
public void pdfbox_f656_0(Point2D p0, Point2D p1, Point2D p2, Point2D p3) throws IOException
{    System.out.printf("appendRectangle %.2f %.2f, %.2f %.2f, %.2f %.2f, %.2f %.2f\n", p0.getX(), p0.getY(), p1.getX(), p1.getY(), p2.getX(), p2.getY(), p3.getX(), p3.getY());}
public void pdfbox_f657_0(PDImage pdImage) throws IOException
{    System.out.println("drawImage");}
public void pdfbox_f658_0(int windingRule) throws IOException
{    System.out.println("clip");}
public void pdfbox_f659_0(float x, float y) throws IOException
{    System.out.printf("moveTo %.2f %.2f\n", x, y);}
public void pdfbox_f660_0(float x, float y) throws IOException
{    System.out.printf("lineTo %.2f %.2f\n", x, y);}
public void pdfbox_f661_0(float x1, float y1, float x2, float y2, float x3, float y3) throws IOException
{    System.out.printf("curveTo %.2f %.2f, %.2f %.2f, %.2f %.2f\n", x1, y1, x2, y2, x3, y3);}
public Point2D pdfbox_f662_0() throws IOException
{        return new Point2D.Float(0, 0);}
public void pdfbox_f663_0() throws IOException
{    System.out.println("closePath");}
public void pdfbox_f664_0() throws IOException
{    System.out.println("endPath");}
public void pdfbox_f665_0() throws IOException
{    System.out.println("strokePath");}
public void pdfbox_f666_0(int windingRule) throws IOException
{    System.out.println("fillPath");}
public void pdfbox_f667_0(int windingRule) throws IOException
{    System.out.println("fillAndStrokePath");}
public void pdfbox_f668_0(COSName shadingName) throws IOException
{    System.out.println("shadingFill " + shadingName.toString());}
public void pdfbox_f669_0(byte[] string) throws IOException
{    System.out.print("showTextString \"");    super.showTextString(string);    System.out.println("\"");}
public void pdfbox_f670_0(COSArray array) throws IOException
{    System.out.print("showTextStrings \"");    super.showTextStrings(array);    System.out.println("\"");}
protected void pdfbox_f671_0(Matrix textRenderingMatrix, PDFont font, int code, String unicode, Vector displacement) throws IOException
{    System.out.print(unicode);    super.showGlyph(textRenderingMatrix, font, code, unicode, displacement);}
public static void pdfbox_f672_0(String[] args) throws IOException
{    File file = new File("src/main/resources/org/apache/pdfbox/examples/rendering/", "custom-render-demo.pdf");    try (PDDocument doc = PDDocument.load(file)) {        PDFRenderer renderer = new MyPDFRenderer(doc);        BufferedImage image = renderer.renderImage(0);        ImageIO.write(image, "PNG", new File("custom-render.png"));    }}
protected PageDrawer pdfbox_f673_0(PageDrawerParameters parameters) throws IOException
{    return new MyPageDrawer(parameters);}
protected Paint pdfbox_f674_0(PDColor color) throws IOException
{        if (getGraphicsState().getNonStrokingColor() == color) {                if (color.toRGB() == (Color.RED.getRGB() & 0x00FFFFFF)) {                        return Color.BLUE;        }    }    return super.getPaint(color);}
protected void pdfbox_f675_0(Matrix textRenderingMatrix, PDFont font, int code, String unicode, Vector displacement) throws IOException
{        super.showGlyph(textRenderingMatrix, font, code, unicode, displacement);        Shape bbox = new Rectangle2D.Float(0, 0, font.getWidth(code) / 1000, 1);    AffineTransform at = textRenderingMatrix.createAffineTransform();    bbox = at.createTransformedShape(bbox);        Graphics2D graphics = getGraphics();    Color color = graphics.getColor();    Stroke stroke = graphics.getStroke();    Shape clip = graphics.getClip();        graphics.setClip(graphics.getDeviceConfiguration().getBounds());    graphics.setColor(Color.RED);    graphics.setStroke(new BasicStroke(.5f));    graphics.draw(bbox);        graphics.setStroke(stroke);    graphics.setColor(color);    graphics.setClip(clip);}
public void pdfbox_f676_0(int windingRule) throws IOException
{        Shape bbox = getLinePath().getBounds2D();        super.fillPath(windingRule);        Graphics2D graphics = getGraphics();    Color color = graphics.getColor();    Stroke stroke = graphics.getStroke();    Shape clip = graphics.getClip();        graphics.setClip(graphics.getDeviceConfiguration().getBounds());    graphics.setColor(Color.GREEN);    graphics.setStroke(new BasicStroke(.5f));    graphics.draw(bbox);        graphics.setStroke(stroke);    graphics.setColor(color);    graphics.setClip(clip);}
public void pdfbox_f677_0(PDAnnotation annotation) throws IOException
{        saveGraphicsState();        getGraphicsState().setNonStrokeAlphaConstant(0.35);    super.showAnnotation(annotation);        restoreGraphicsState();}
public boolean pdfbox_f678_0()
{    return valid;}
public PKIXCertPathBuilderResult pdfbox_f679_0()
{    return result;}
public Throwable pdfbox_f680_0()
{    return exception;}
public static PKIXCertPathBuilderResult pdfbox_f681_1(X509Certificate cert, Set<X509Certificate> additionalCerts, boolean verifySelfSignedCert, Date signDate) throws CertificateVerificationException
{    try {                if (!verifySelfSignedCert && isSelfSigned(cert)) {            throw new CertificateVerificationException("The certificate is self-signed.");        }        Set<X509Certificate> certSet = CertificateVerifier.downloadExtraCertificates(cert);        int downloadSize = certSet.size();        certSet.addAll(additionalCerts);        if (downloadSize > 0) {                    }                        Set<X509Certificate> intermediateCerts = new HashSet<>();        Set<TrustAnchor> trustAnchors = new HashSet<>();        for (X509Certificate additionalCert : certSet) {            if (isSelfSigned(additionalCert)) {                trustAnchors.add(new TrustAnchor(additionalCert, null));            } else {                intermediateCerts.add(additionalCert);            }        }        if (trustAnchors.isEmpty()) {            throw new CertificateVerificationException("No root certificate in the chain");        }                PKIXCertPathBuilderResult verifiedCertChain = verifyCertificate(cert, trustAnchors, intermediateCerts, signDate);                checkRevocations(cert, certSet, signDate);        return verifiedCertChain;    } catch (CertPathBuilderException certPathEx) {        throw new CertificateVerificationException("Error building certification path: " + cert.getSubjectX500Principal(), certPathEx);    } catch (CertificateVerificationException cvex) {        throw cvex;    } catch (IOException | GeneralSecurityException | RevokedCertificateException | OCSPException ex) {        throw new CertificateVerificationException("Error verifying the certificate: " + cert.getSubjectX500Principal(), ex);    }}
private static void pdfbox_f682_1(X509Certificate cert, Set<X509Certificate> additionalCerts, Date signDate) throws IOException, CertificateVerificationException, OCSPException, RevokedCertificateException, GeneralSecurityException
{    if (isSelfSigned(cert)) {                return;    }    X509Certificate issuerCert = null;    for (X509Certificate additionalCert : additionalCerts) {        if (cert.getIssuerX500Principal().equals(additionalCert.getSubjectX500Principal())) {            issuerCert = additionalCert;            break;        }    }                String ocspURL = extractOCSPURL(cert);    if (ocspURL != null) {        OcspHelper ocspHelper = new OcspHelper(cert, signDate, issuerCert, additionalCerts, ocspURL);        try {            verifyOCSP(ocspHelper, additionalCerts);        } catch (IOException ex) {                                    CRLVerifier.verifyCertificateCRLs(cert, signDate, additionalCerts);        }    } else {                                CRLVerifier.verifyCertificateCRLs(cert, signDate, additionalCerts);    }        checkRevocations(issuerCert, additionalCerts, signDate);}
public static boolean pdfbox_f683_1(X509Certificate cert) throws GeneralSecurityException
{    try {                PublicKey key = cert.getPublicKey();        cert.verify(key, SecurityProvider.getProvider().getName());        return true;    } catch (SignatureException | InvalidKeyException | IOException ex) {                        return false;    }}
public static Set<X509Certificate> pdfbox_f684_1(X509Extension ext)
{                Set<X509Certificate> resultSet = new HashSet<>();    byte[] authorityExtensionValue = ext.getExtensionValue(Extension.authorityInfoAccess.getId());    if (authorityExtensionValue == null) {        return resultSet;    }    ASN1Primitive asn1Prim;    try {        asn1Prim = JcaX509ExtensionUtils.parseExtensionValue(authorityExtensionValue);    } catch (IOException ex) {                return resultSet;    }    if (!(asn1Prim instanceof ASN1Sequence)) {                return resultSet;    }    ASN1Sequence asn1Seq = (ASN1Sequence) asn1Prim;    Enumeration<?> objects = asn1Seq.getObjects();    while (objects.hasMoreElements()) {                ASN1Sequence obj = (ASN1Sequence) objects.nextElement();        ASN1Encodable oid = obj.getObjectAt(0);        if (!X509ObjectIdentifiers.id_ad_caIssuers.equals(oid)) {            continue;        }        ASN1TaggedObject location = (ASN1TaggedObject) obj.getObjectAt(1);        ASN1OctetString uri = (ASN1OctetString) location.getObject();        InputStream in = null;        try {            String urlString = new String(uri.getOctets());                        in = new URL(urlString).openStream();            CertificateFactory certFactory = CertificateFactory.getInstance("X.509");            Collection<? extends Certificate> altCerts = certFactory.generateCertificates(in);            altCerts.forEach(altCert -> resultSet.add((X509Certificate) altCert));                    } catch (IOException | CertificateException ex) {                    } finally {            IOUtils.closeQuietly(in);        }    }        return resultSet;}
private static PKIXCertPathBuilderResult pdfbox_f685_0(X509Certificate cert, Set<TrustAnchor> trustAnchors, Set<X509Certificate> intermediateCerts, Date signDate) throws GeneralSecurityException
{        X509CertSelector selector = new X509CertSelector();    selector.setCertificate(cert);        PKIXBuilderParameters pkixParams = new PKIXBuilderParameters(trustAnchors, selector);        pkixParams.setRevocationEnabled(false);                            pkixParams.setPolicyQualifiersRejected(false);                pkixParams.setDate(signDate);        CertStore intermediateCertStore = CertStore.getInstance("Collection", new CollectionCertStoreParameters(intermediateCerts));    pkixParams.addCertStore(intermediateCertStore);                        CertPathBuilder builder = CertPathBuilder.getInstance("PKIX");    return (PKIXCertPathBuilderResult) builder.build(pkixParams);}
private static String pdfbox_f686_1(X509Certificate cert) throws IOException
{    byte[] authorityExtensionValue = cert.getExtensionValue(Extension.authorityInfoAccess.getId());    if (authorityExtensionValue != null) {                        ASN1Sequence asn1Seq = (ASN1Sequence) JcaX509ExtensionUtils.parseExtensionValue(authorityExtensionValue);        Enumeration<?> objects = asn1Seq.getObjects();        while (objects.hasMoreElements()) {                        ASN1Sequence obj = (ASN1Sequence) objects.nextElement();            ASN1Encodable oid = obj.getObjectAt(0);                        ASN1TaggedObject location = (ASN1TaggedObject) obj.getObjectAt(1);            if (X509ObjectIdentifiers.id_ad_ocsp.equals(oid) && location.getTagNo() == GeneralName.uniformResourceIdentifier) {                ASN1OctetString url = (ASN1OctetString) location.getObject();                String ocspURL = new String(url.getOctets());                                return ocspURL;            }        }    }    return null;}
private static void pdfbox_f687_1(OcspHelper ocspHelper, Set<X509Certificate> additionalCerts) throws RevokedCertificateException, IOException, OCSPException, CertificateVerificationException
{    Date now = Calendar.getInstance().getTime();    OCSPResp ocspResponse;    ocspResponse = ocspHelper.getResponseOcsp();    if (ocspResponse.getStatus() != OCSPResp.SUCCESSFUL) {        throw new CertificateVerificationException("OCSP check not successful, status: " + ocspResponse.getStatus());    }        BasicOCSPResp basicResponse = (BasicOCSPResp) ocspResponse.getResponseObject();    X509Certificate ocspResponderCertificate = ocspHelper.getOcspResponderCertificate();    if (ocspResponderCertificate.getExtensionValue(OCSPObjectIdentifiers.id_pkix_ocsp_nocheck.getId()) != null) {                                                return;    }        Set<X509Certificate> additionalCerts2 = new HashSet<>(additionalCerts);    JcaX509CertificateConverter certificateConverter = new JcaX509CertificateConverter();    for (X509CertificateHolder certHolder : basicResponse.getCerts()) {        try {            X509Certificate cert = certificateConverter.getCertificate(certHolder);            if (!ocspResponderCertificate.equals(cert)) {                additionalCerts2.add(cert);            }        } catch (CertificateException ex) {                                }    }    CertificateVerifier.verifyCertificate(ocspResponderCertificate, additionalCerts2, true, now);    }
public static void pdfbox_f688_1(X509Certificate cert, Date signDate, Set<X509Certificate> additionalCerts) throws CertificateVerificationException, RevokedCertificateException
{    try {        Date now = Calendar.getInstance().getTime();        Exception firstException = null;        List<String> crlDistributionPointsURLs = getCrlDistributionPoints(cert);        for (String crlDistributionPointsURL : crlDistributionPointsURLs) {                        X509CRL crl;            try {                crl = downloadCRL(crlDistributionPointsURL);            } catch (IOException | GeneralSecurityException | CertificateVerificationException | NamingException ex) {                                                                if (firstException == null) {                    firstException = ex;                }                continue;            }            Set<X509Certificate> mergedCertSet = CertificateVerifier.downloadExtraCertificates(crl);            mergedCertSet.addAll(additionalCerts);                                                X509Certificate crlIssuerCert = null;            for (X509Certificate possibleCert : mergedCertSet) {                if (crl.getIssuerX500Principal().equals(possibleCert.getSubjectX500Principal())) {                    crlIssuerCert = possibleCert;                    break;                }            }            if (crlIssuerCert == null) {                throw new CertificateVerificationException("Certificate for " + crl.getIssuerX500Principal() + "not found in certificate chain, so the CRL at " + crlDistributionPointsURL + " could not be verified");            }            crl.verify(crlIssuerCert.getPublicKey(), SecurityProvider.getProvider().getName());            if (!crl.getIssuerX500Principal().equals(cert.getIssuerX500Principal())) {                                CertificateVerifier.verifyCertificate(crlIssuerCert, mergedCertSet, true, now);                            } else {                            }            checkRevocation(crl, cert, signDate, crlDistributionPointsURL);                        return;        }        if (firstException != null) {            throw firstException;        }    } catch (RevokedCertificateException | CertificateVerificationException ex) {        throw ex;    } catch (Exception ex) {        throw new CertificateVerificationException("Cannot verify CRL for certificate: " + cert.getSubjectX500Principal(), ex);    }}
public static void pdfbox_f689_1(X509CRL crl, X509Certificate cert, Date signDate, String crlDistributionPointsURL) throws RevokedCertificateException
{    X509CRLEntry revokedCRLEntry = crl.getRevokedCertificate(cert);    if (revokedCRLEntry != null && revokedCRLEntry.getRevocationDate().compareTo(signDate) <= 0) {        throw new RevokedCertificateException("The certificate was revoked by CRL " + crlDistributionPointsURL + " on " + revokedCRLEntry.getRevocationDate(), revokedCRLEntry.getRevocationDate());    } else if (revokedCRLEntry != null) {            } else {            }}
private static X509CRL pdfbox_f690_0(String crlURL) throws IOException, CertificateException, CRLException, CertificateVerificationException, NamingException
{    if (crlURL.startsWith("http://") || crlURL.startsWith("https://") || crlURL.startsWith("ftp://")) {        return downloadCRLFromWeb(crlURL);    } else if (crlURL.startsWith("ldap://")) {        return downloadCRLFromLDAP(crlURL);    } else {        throw new CertificateVerificationException("Can not download CRL from certificate " + "distribution point: " + crlURL);    }}
private static X509CRL pdfbox_f691_0(String ldapURL) throws CertificateException, NamingException, CRLException, CertificateVerificationException
{    @SuppressWarnings({ "squid:S1149" })    Hashtable<String, String> env = new Hashtable<>();    env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");    env.put(Context.PROVIDER_URL, ldapURL);            env.put("com.sun.jndi.ldap.connect.timeout", "1000");    DirContext ctx = new InitialDirContext(env);    Attributes avals = ctx.getAttributes("");    Attribute aval = avals.get("certificateRevocationList;binary");    byte[] val = (byte[]) aval.get();    if (val == null || val.length == 0) {        throw new CertificateVerificationException("Can not download CRL from: " + ldapURL);    } else {        InputStream inStream = new ByteArrayInputStream(val);        CertificateFactory cf = CertificateFactory.getInstance("X.509");        return (X509CRL) cf.generateCRL(inStream);    }}
public static X509CRL pdfbox_f692_0(String crlURL) throws IOException, CertificateException, CRLException
{    try (InputStream crlStream = new URL(crlURL).openStream()) {        return (X509CRL) CertificateFactory.getInstance("X.509").generateCRL(crlStream);    }}
public static List<String> pdfbox_f693_0(X509Certificate cert) throws IOException
{    byte[] crldpExt = cert.getExtensionValue(Extension.cRLDistributionPoints.getId());    if (crldpExt == null) {        return new ArrayList<>();    }    ASN1InputStream oAsnInStream = new ASN1InputStream(new ByteArrayInputStream(crldpExt));    ASN1Primitive derObjCrlDP = oAsnInStream.readObject();    ASN1OctetString dosCrlDP = (ASN1OctetString) derObjCrlDP;    byte[] crldpExtOctets = dosCrlDP.getOctets();    ASN1InputStream oAsnInStream2 = new ASN1InputStream(new ByteArrayInputStream(crldpExtOctets));    ASN1Primitive derObj2 = oAsnInStream2.readObject();    CRLDistPoint distPoint = CRLDistPoint.getInstance(derObj2);    List<String> crlUrls = new ArrayList<>();    for (DistributionPoint dp : distPoint.getDistributionPoints()) {        DistributionPointName dpn = dp.getDistributionPoint();                if (dpn != null && dpn.getType() == DistributionPointName.FULL_NAME) {                        for (GeneralName genName : GeneralNames.getInstance(dpn.getName()).getNames()) {                if (genName.getTagNo() == GeneralName.uniformResourceIdentifier) {                    String url = DERIA5String.getInstance(genName.getName()).getString();                    crlUrls.add(url);                }            }        }    }    return crlUrls;}
public OCSPResp pdfbox_f694_0() throws IOException, OCSPException, RevokedCertificateException
{    OCSPResp ocspResponse = performRequest();    verifyOcspResponse(ocspResponse);    return ocspResponse;}
public X509Certificate pdfbox_f695_0()
{    return ocspResponderCertificate;}
private void pdfbox_f696_1(OCSPResp ocspResponse) throws OCSPException, RevokedCertificateException, IOException
{    verifyRespStatus(ocspResponse);    BasicOCSPResp basicResponse = (BasicOCSPResp) ocspResponse.getResponseObject();    if (basicResponse != null) {        ResponderID responderID = basicResponse.getResponderId().toASN1Primitive();                                                                                X500Name name = responderID.getName();        if (name != null) {            findResponderCertificateByName(basicResponse, name);        } else {            byte[] keyHash = responderID.getKeyHash();            if (keyHash != null) {                findResponderCertificateByKeyHash(basicResponse, keyHash);            } else {                throw new OCSPException("OCSP: basic response must provide name or key hash");            }        }        if (ocspResponderCertificate == null) {            throw new OCSPException("OCSP: certificate for responder " + name + " not found");        }        try {            SigUtils.checkResponderCertificateUsage(ocspResponderCertificate);        } catch (CertificateParsingException ex) {                                }        checkOcspSignature(ocspResponderCertificate, basicResponse);        boolean nonceChecked = checkNonce(basicResponse);        SingleResp[] responses = basicResponse.getResponses();        if (responses.length != 1) {            throw new OCSPException("OCSP: Received " + responses.length + " responses instead of 1!");        }        SingleResp resp = responses[0];        Object status = resp.getCertStatus();        if (!nonceChecked) {                                    checkOcspResponseFresh(resp);        }        if (status instanceof RevokedStatus) {            RevokedStatus revokedStatus = (RevokedStatus) status;            if (revokedStatus.getRevocationTime().compareTo(signDate) <= 0) {                throw new RevokedCertificateException("OCSP: Certificate is revoked since " + revokedStatus.getRevocationTime(), revokedStatus.getRevocationTime());            }                    } else if (status != CertificateStatus.GOOD) {            throw new OCSPException("OCSP: Status of Cert is unknown");        }    }}
private byte[] pdfbox_f697_1(X509CertificateHolder certHolder) throws IOException
{                                    SubjectPublicKeyInfo info = certHolder.getSubjectPublicKeyInfo();    try {        return MessageDigest.getInstance("SHA-1").digest(info.getPublicKeyData().getBytes());    } catch (NoSuchAlgorithmException ex) {                        return new byte[0];    }}
private void pdfbox_f698_1(BasicOCSPResp basicResponse, byte[] keyHash) throws IOException
{    X509CertificateHolder[] certHolders = basicResponse.getCerts();    for (X509CertificateHolder certHolder : certHolders) {        byte[] digest = getKeyHashFromCertHolder(certHolder);        if (Arrays.equals(keyHash, digest)) {            try {                ocspResponderCertificate = certificateConverter.getCertificate(certHolder);                return;            } catch (CertificateException ex) {                                            }            break;        }    }        for (X509Certificate cert : additionalCerts) {        try {            byte[] digest = getKeyHashFromCertHolder(new X509CertificateHolder(cert.getEncoded()));            if (Arrays.equals(keyHash, digest)) {                ocspResponderCertificate = cert;                return;            }        } catch (CertificateException ex) {                                }    }}
private void pdfbox_f699_1(BasicOCSPResp basicResponse, X500Name name)
{    X509CertificateHolder[] certHolders = basicResponse.getCerts();    for (X509CertificateHolder certHolder : certHolders) {        if (name.equals(certHolder.getSubject())) {            try {                ocspResponderCertificate = certificateConverter.getCertificate(certHolder);                return;            } catch (CertificateException ex) {                                            }        }    }        for (X509Certificate cert : additionalCerts) {        X500Name certSubjectName = new X500Name(cert.getSubjectX500Principal().getName());        if (certSubjectName.equals(name)) {            ocspResponderCertificate = cert;            return;        }    }}
private void pdfbox_f700_1(SingleResp resp) throws OCSPException
{                        Date curDate = Calendar.getInstance().getTime();    Date thisUpdate = resp.getThisUpdate();    if (thisUpdate == null) {        throw new OCSPException("OCSP: thisUpdate field is missing in response (RFC 5019 2.2.4.)");    }    Date nextUpdate = resp.getNextUpdate();    if (nextUpdate == null) {        throw new OCSPException("OCSP: nextUpdate field is missing in response (RFC 5019 2.2.4.)");    }    if (curDate.compareTo(thisUpdate) < 0) {                throw new OCSPException("OCSP: current date < thisUpdate field (RFC 5019 2.2.4.)");    }    if (curDate.compareTo(nextUpdate) > 0) {                throw new OCSPException("OCSP: current date > nextUpdate field (RFC 5019 2.2.4.)");    }    }
private void pdfbox_f701_0(X509Certificate certificate, BasicOCSPResp basicResponse) throws OCSPException, IOException
{    try {        ContentVerifierProvider verifier = new JcaContentVerifierProviderBuilder().setProvider(SecurityProvider.getProvider()).build(certificate);        if (!basicResponse.isSignatureValid(verifier)) {            throw new OCSPException("OCSP-Signature is not valid!");        }    } catch (OperatorCreationException e) {        throw new OCSPException("Error checking Ocsp-Signature", e);    }}
private boolean pdfbox_f702_1(BasicOCSPResp basicResponse) throws OCSPException
{    Extension nonceExt = basicResponse.getExtension(OCSPObjectIdentifiers.id_pkix_ocsp_nonce);    if (nonceExt != null) {        DEROctetString responseNonceString = (DEROctetString) nonceExt.getExtnValue();        if (!responseNonceString.equals(encodedNonce)) {            throw new OCSPException("Different nonce found in response!");        } else {                        return true;        }    }        return false;}
private OCSPResp pdfbox_f703_0() throws IOException, OCSPException
{    OCSPReq request = generateOCSPRequest();    URL url = new URL(ocspUrl);    HttpURLConnection httpConnection = (HttpURLConnection) url.openConnection();    try {        httpConnection.setRequestProperty("Content-Type", "application/ocsp-request");        httpConnection.setRequestProperty("Accept", "application/ocsp-response");        httpConnection.setDoOutput(true);        try (OutputStream out = httpConnection.getOutputStream()) {            out.write(request.getEncoded());        }        if (httpConnection.getResponseCode() != 200) {            throw new IOException("OCSP: Could not access url, ResponseCode: " + httpConnection.getResponseCode());        }                try (InputStream in = (InputStream) httpConnection.getContent()) {            return new OCSPResp(in);        }    } finally {        httpConnection.disconnect();    }}
public void pdfbox_f704_1(OCSPResp resp) throws OCSPException
{    String statusInfo = "";    if (resp != null) {        int status = resp.getStatus();        switch(status) {            case OCSPResponseStatus.INTERNAL_ERROR:                statusInfo = "INTERNAL_ERROR";                                break;            case OCSPResponseStatus.MALFORMED_REQUEST:                                                statusInfo = "MALFORMED_REQUEST";                                break;            case OCSPResponseStatus.SIG_REQUIRED:                statusInfo = "SIG_REQUIRED";                                break;            case OCSPResponseStatus.TRY_LATER:                statusInfo = "TRY_LATER";                                break;            case OCSPResponseStatus.UNAUTHORIZED:                statusInfo = "UNAUTHORIZED";                                break;            case OCSPResponseStatus.SUCCESSFUL:                break;            default:                statusInfo = "UNKNOWN";                        }    }    if (resp == null || resp.getStatus() != OCSPResponseStatus.SUCCESSFUL) {        throw new OCSPException("OCSP response unsuccessful, status: " + statusInfo);    }}
private OCSPReq pdfbox_f705_0() throws OCSPException, IOException
{    Security.addProvider(SecurityProvider.getProvider());        CertificateID certId;    try {        certId = new CertificateID(new SHA1DigestCalculator(), new JcaX509CertificateHolder(issuerCertificate), certificateToCheck.getSerialNumber());    } catch (CertificateEncodingException e) {        throw new IOException("Error creating CertificateID with the Certificate encoding", e);    }                Extension responseExtension = new Extension(OCSPObjectIdentifiers.id_pkix_ocsp_response, false, new DLSequence(OCSPObjectIdentifiers.id_pkix_ocsp_basic).getEncoded());    Random rand = new Random();    byte[] nonce = new byte[16];    rand.nextBytes(nonce);    encodedNonce = new DEROctetString(new DEROctetString(nonce));    Extension nonceExtension = new Extension(OCSPObjectIdentifiers.id_pkix_ocsp_nonce, false, encodedNonce);    OCSPReqBuilder builder = new OCSPReqBuilder();    builder.setRequestExtensions(new Extensions(new Extension[] { responseExtension, nonceExtension }));    builder.addRequest(certId);    return builder.build();}
public AlgorithmIdentifier pdfbox_f706_0()
{    return new AlgorithmIdentifier(OIWObjectIdentifiers.idSHA1);}
public OutputStream pdfbox_f707_0()
{    return bOut;}
public byte[] pdfbox_f708_1()
{    byte[] bytes = bOut.toByteArray();    bOut.reset();    try {        MessageDigest md = MessageDigest.getInstance("SHA-1");        return md.digest(bytes);    } catch (NoSuchAlgorithmException ex) {                        return new byte[0];    }}
public Date pdfbox_f709_0()
{    return revocationTime;}
public Object pdfbox_f710_0()
{    return in;}
public void pdfbox_f711_0(OutputStream out) throws IOException, CMSException
{        IOUtils.copy(in, out);    in.close();}
public ASN1ObjectIdentifier pdfbox_f712_0()
{    return contentType;}
public void pdfbox_f713_0(File file) throws IOException
{    embedTimeStamp(file, file);}
public void pdfbox_f714_0(File inFile, File outFile) throws IOException
{    if (inFile == null || !inFile.exists()) {        throw new FileNotFoundException("Document for signing does not exist");    }        try (PDDocument doc = PDDocument.load(inFile)) {        document = doc;        processTimeStamping(outFile, inFile.getAbsolutePath());    }}
private void pdfbox_f715_0(File outFile, String fileName) throws IOException
{    int accessPermissions = SigUtils.getMDPPermission(document);    if (accessPermissions == 1) {        throw new IllegalStateException("No changes to the document are permitted due to DocMDP transform parameters dictionary");    }    try {        byte[] documentBytes;        try (FileInputStream fis = new FileInputStream(fileName)) {            documentBytes = IOUtils.toByteArray(fis);        }        processRelevantSignatures(documentBytes);        if (changedEncodedSignature != null) {            try (FileOutputStream output = new FileOutputStream(outFile)) {                embedNewSignatureIntoDocument(documentBytes, output);            }        }    } catch (IOException | NoSuchAlgorithmException | CMSException e) {        throw new IOException(e);    }}
private void pdfbox_f716_0(byte[] documentBytes) throws IOException, CMSException, NoSuchAlgorithmException
{    getRelevantSignature(document);    if (signature != null) {        byte[] sigBlock = signature.getContents(documentBytes);        CMSSignedData signedData = new CMSSignedData(sigBlock);        System.out.println("INFO: Byte Range: " + Arrays.toString(signature.getByteRange()));        if (tsaUrl != null && tsaUrl.length() > 0) {            ValidationTimeStamp validation = new ValidationTimeStamp(tsaUrl);            signedData = validation.addSignedTimeStamp(signedData);        }        byte[] newEncoded = Hex.getBytes(signedData.getEncoded());        int maxSize = signature.getByteRange()[2] - signature.getByteRange()[1];        System.out.println("INFO: New Signature has Size: " + newEncoded.length + " maxSize: " + maxSize);        if (newEncoded.length > maxSize - 2) {            throw new IOException("New Signature is too big for existing Signature-Placeholder. Max Place: " + maxSize);        } else {            changedEncodedSignature = newEncoded;        }    }}
private void pdfbox_f717_0(PDDocument document) throws IOException
{                SortedMap<Integer, PDSignature> sortedMap = new TreeMap<>();    for (PDSignature sig : document.getSignatureDictionaries()) {        int sigOffset = sig.getByteRange()[1];        sortedMap.put(sigOffset, sig);    }    if (sortedMap.size() > 0) {        PDSignature lastSignature = sortedMap.get(sortedMap.lastKey());        COSBase type = lastSignature.getCOSObject().getItem(COSName.TYPE);        if (type.equals(COSName.SIG)) {            signature = lastSignature;        }    }}
private void pdfbox_f718_0(byte[] docBytes, OutputStream output) throws IOException
{    int[] byteRange = signature.getByteRange();    output.write(docBytes, byteRange[0], byteRange[1] + 1);    output.write(changedEncodedSignature);    int addingLength = byteRange[2] - byteRange[1] - 2 - changedEncodedSignature.length;    byte[] zeroes = Hex.getBytes(new byte[(addingLength + 1) / 2]);    output.write(zeroes);    output.write(docBytes, byteRange[2] - 1, byteRange[3] + 1);}
public static void pdfbox_f719_0(String[] args) throws IOException
{    if (args.length != 3) {        usage();        System.exit(1);    }    String tsaUrl = null;    for (int i = 0; i < args.length; i++) {        if ("-tsa".equals(args[i])) {            i++;            if (i >= args.length) {                usage();                System.exit(1);            }            tsaUrl = args[i];        }    }    File inFile = new File(args[0]);    System.out.println("Input File: " + args[0]);    String name = inFile.getName();    String substring = name.substring(0, name.lastIndexOf('.'));    File outFile = new File(inFile.getParent(), substring + "_eTs.pdf");    System.out.println("Output File: " + outFile.getAbsolutePath());        CreateEmbeddedTimeStamp signing = new CreateEmbeddedTimeStamp(tsaUrl);    signing.embedTimeStamp(inFile, outFile);}
private static void pdfbox_f720_0()
{    System.err.println("usage: java " + CreateEmbeddedTimeStamp.class.getName() + " " + "<pdf_to_sign>\n" + "mandatory option:\n" + "  -tsa <url>    sign timestamp using the given TSA server\n");}
public static void pdfbox_f721_0(String[] args) throws IOException
{        try (PDDocument document = new PDDocument()) {        PDPage page = new PDPage(PDRectangle.A4);        document.addPage(page);                        PDFont font = PDType1Font.HELVETICA;        PDResources resources = new PDResources();        resources.put(COSName.getPDFName("Helv"), font);                PDAcroForm acroForm = new PDAcroForm(document);        document.getDocumentCatalog().setAcroForm(acroForm);                acroForm.setDefaultResources(resources);                        String defaultAppearanceString = "/Helv 0 Tf 0 g";        acroForm.setDefaultAppearance(defaultAppearanceString);                        PDSignatureField signatureField = new PDSignatureField(acroForm);        PDAnnotationWidget widget = signatureField.getWidgets().get(0);        PDRectangle rect = new PDRectangle(50, 650, 200, 50);        widget.setRectangle(rect);        widget.setPage(page);        page.getAnnotations().add(widget);        acroForm.getFields().add(signatureField);        document.save(args[0]);    }}
public void pdfbox_f722_0(File file) throws IOException
{    signDetached(file, file, null);}
public void pdfbox_f723_0(File inFile, File outFile) throws IOException
{    signDetached(inFile, outFile, null);}
public void pdfbox_f724_0(File inFile, File outFile, String tsaUrl) throws IOException
{    if (inFile == null || !inFile.exists()) {        throw new FileNotFoundException("Document for signing does not exist");    }    setTsaUrl(tsaUrl);        try (FileOutputStream fos = new FileOutputStream(outFile);        PDDocument doc = PDDocument.load(inFile)) {        signDetached(doc, fos);    }}
public void pdfbox_f725_0(PDDocument document, OutputStream output) throws IOException
{    int accessPermissions = SigUtils.getMDPPermission(document);    if (accessPermissions == 1) {        throw new IllegalStateException("No changes to the document are permitted due to DocMDP transform parameters dictionary");    }        PDSignature signature = new PDSignature();    signature.setFilter(PDSignature.FILTER_ADOBE_PPKLITE);    signature.setSubFilter(PDSignature.SUBFILTER_ADBE_PKCS7_DETACHED);    signature.setName("Example User");    signature.setLocation("Los Angeles, CA");    signature.setReason("Testing");            signature.setSignDate(Calendar.getInstance());        if (accessPermissions == 0) {        SigUtils.setMDPPermission(document, signature, 2);    }    if (isExternalSigning()) {        document.addSignature(signature);        ExternalSigningSupport externalSigning = document.saveIncrementalForExternalSigning(output);                byte[] cmsSignature = sign(externalSigning.getContent());                externalSigning.setSignature(cmsSignature);    } else {        SignatureOptions signatureOptions = new SignatureOptions();                signatureOptions.setPreferredSignatureSize(SignatureOptions.DEFAULT_SIGNATURE_SIZE * 2);                document.addSignature(signature, this, signatureOptions);                document.saveIncremental(output);    }}
public static void pdfbox_f726_0(String[] args) throws IOException, GeneralSecurityException
{    if (args.length < 3) {        usage();        System.exit(1);    }    String tsaUrl = null;    boolean externalSig = false;    for (int i = 0; i < args.length; i++) {        if (args[i].equals("-tsa")) {            i++;            if (i >= args.length) {                usage();                System.exit(1);            }            tsaUrl = args[i];        }        if (args[i].equals("-e")) {            externalSig = true;        }    }        KeyStore keystore = KeyStore.getInstance("PKCS12");        char[] password = args[1].toCharArray();    keystore.load(new FileInputStream(args[0]), password);            CreateSignature signing = new CreateSignature(keystore, password);    signing.setExternalSigning(externalSig);    File inFile = new File(args[2]);    String name = inFile.getName();    String substring = name.substring(0, name.lastIndexOf('.'));    File outFile = new File(inFile.getParent(), substring + "_signed.pdf");    signing.signDetached(inFile, outFile, tsaUrl);}
private static void pdfbox_f727_0()
{    System.err.println("usage: java " + CreateSignature.class.getName() + " " + "<pkcs12_keystore> <password> <pdf_to_sign>\n" + "" + "options:\n" + "  -tsa <url>    sign timestamp using the given TSA server\n" + "  -e            sign using external signature creation scenario");}
public final void pdfbox_f728_0(PrivateKey privateKey)
{    this.privateKey = privateKey;}
public final void pdfbox_f729_0(final Certificate[] certificateChain)
{    this.certificateChain = certificateChain;}
public Certificate[] pdfbox_f730_0()
{    return certificateChain;}
public void pdfbox_f731_0(String tsaUrl)
{    this.tsaUrl = tsaUrl;}
public byte[] pdfbox_f732_0(InputStream content) throws IOException
{        try {        CMSSignedDataGenerator gen = new CMSSignedDataGenerator();        X509Certificate cert = (X509Certificate) certificateChain[0];        ContentSigner sha1Signer = new JcaContentSignerBuilder("SHA256WithRSA").build(privateKey);        gen.addSignerInfoGenerator(new JcaSignerInfoGeneratorBuilder(new JcaDigestCalculatorProviderBuilder().build()).build(sha1Signer, cert));        gen.addCertificates(new JcaCertStore(Arrays.asList(certificateChain)));        CMSProcessableInputStream msg = new CMSProcessableInputStream(content);        CMSSignedData signedData = gen.generate(msg, false);        if (tsaUrl != null && tsaUrl.length() > 0) {            ValidationTimeStamp validation = new ValidationTimeStamp(tsaUrl);            signedData = validation.addSignedTimeStamp(signedData);        }        return signedData.getEncoded();    } catch (GeneralSecurityException | CMSException | OperatorCreationException e) {        throw new IOException(e);    }}
public void pdfbox_f733_0(boolean externalSigning)
{    this.externalSigning = externalSigning;}
public boolean pdfbox_f734_0()
{    return externalSigning;}
public void pdfbox_f735_0(File file) throws IOException
{    signDetached(file, file);}
public void pdfbox_f736_0(File inFile, File outFile) throws IOException
{    if (inFile == null || !inFile.exists()) {        throw new FileNotFoundException("Document for signing does not exist");    }        try (PDDocument doc = PDDocument.load(inFile);        FileOutputStream fos = new FileOutputStream(outFile)) {        signDetached(doc, fos);    }}
public void pdfbox_f737_0(PDDocument document, OutputStream output) throws IOException
{    int accessPermissions = SigUtils.getMDPPermission(document);    if (accessPermissions == 1) {        throw new IllegalStateException("No changes to the document are permitted due to DocMDP transform parameters dictionary");    }        PDSignature signature = new PDSignature();    signature.setType(COSName.DOC_TIME_STAMP);    signature.setFilter(PDSignature.FILTER_ADOBE_PPKLITE);    signature.setSubFilter(COSName.getPDFName("ETSI.RFC3161"));                        document.addSignature(signature, this);        document.saveIncremental(output);}
public byte[] pdfbox_f738_1(InputStream content) throws IOException
{    ValidationTimeStamp validation;    try {        validation = new ValidationTimeStamp(tsaUrl);        return validation.getTimeStampToken(content);    } catch (NoSuchAlgorithmException e) {            }    return new byte[] {};}
public static void pdfbox_f739_0(String[] args) throws IOException, GeneralSecurityException
{    if (args.length != 3) {        usage();        System.exit(1);    }    String tsaUrl = null;    if ("-tsa".equals(args[1])) {        tsaUrl = args[2];    } else {        usage();        System.exit(1);    }        CreateSignedTimeStamp signing = new CreateSignedTimeStamp(tsaUrl);    File inFile = new File(args[0]);    String name = inFile.getName();    String substring = name.substring(0, name.lastIndexOf('.'));    File outFile = new File(inFile.getParent(), substring + "_timestamped.pdf");    signing.signDetached(inFile, outFile);}
private static void pdfbox_f740_0()
{    System.err.println("usage: java " + CreateSignedTimeStamp.class.getName() + " " + "<pdf_to_sign>\n" + "mandatory options:\n" + "  -tsa <url>    sign timestamp using the given TSA server\n");}
public boolean pdfbox_f741_0()
{    return lateExternalSigning;}
public void pdfbox_f742_0(boolean lateExternalSigning)
{    this.lateExternalSigning = lateExternalSigning;}
public void pdfbox_f743_0(String filename, int x, int y, int zoomPercent, InputStream imageStream, int page) throws IOException
{    visibleSignDesigner = new PDVisibleSignDesigner(filename, imageStream, page);    visibleSignDesigner.xAxis(x).yAxis(y).zoom(zoomPercent).adjustForRotation();}
public void pdfbox_f744_0(int zoomPercent, InputStream imageStream) throws IOException
{    visibleSignDesigner = new PDVisibleSignDesigner(imageStream);    visibleSignDesigner.zoom(zoomPercent);}
public void pdfbox_f745_0(String name, String location, String reason, int preferredSize, int page, boolean visualSignEnabled)
{    visibleSignatureProperties.signerName(name).signerLocation(location).signatureReason(reason).preferredSize(preferredSize).page(page).visualSignEnabled(visualSignEnabled).setPdVisibleSignature(visibleSignDesigner);}
public void pdfbox_f746_0(String name, String location, String reason, boolean visualSignEnabled)
{    visibleSignatureProperties.signerName(name).signerLocation(location).signatureReason(reason).visualSignEnabled(visualSignEnabled).setPdVisibleSignature(visibleSignDesigner);}
public void pdfbox_f747_0(File inputFile, File signedFile, String tsaUrl) throws IOException
{    this.signPDF(inputFile, signedFile, tsaUrl, null);}
public void pdfbox_f748_0(File inputFile, File signedFile, String tsaUrl, String signatureFieldName) throws IOException
{    if (inputFile == null || !inputFile.exists()) {        throw new IOException("Document for signing does not exist");    }    setTsaUrl(tsaUrl);    try (FileOutputStream fos = new FileOutputStream(signedFile);        PDDocument doc = PDDocument.load(inputFile)) {        int accessPermissions = SigUtils.getMDPPermission(doc);        if (accessPermissions == 1) {            throw new IllegalStateException("No changes to the document are permitted due to DocMDP transform parameters dictionary");        }                                PDSignature signature;                signature = findExistingSignature(doc, signatureFieldName);        if (signature == null) {                        signature = new PDSignature();        }                if (doc.getVersion() >= 1.5f && accessPermissions == 0) {            SigUtils.setMDPPermission(doc, signature, 2);        }        PDAcroForm acroForm = doc.getDocumentCatalog().getAcroForm();        if (acroForm != null && acroForm.getNeedAppearances()) {                        if (acroForm.getFields().isEmpty()) {                                acroForm.getCOSObject().removeItem(COSName.NEED_APPEARANCES);                                                            } else {                System.out.println("/NeedAppearances is set, signature may be ignored by Adobe Reader");            }        }                signature.setFilter(PDSignature.FILTER_ADOBE_PPKLITE);                signature.setSubFilter(PDSignature.SUBFILTER_ADBE_PKCS7_DETACHED);        if (visibleSignatureProperties != null) {                        visibleSignatureProperties.buildSignature();            signature.setName(visibleSignatureProperties.getSignerName());            signature.setLocation(visibleSignatureProperties.getSignerLocation());            signature.setReason(visibleSignatureProperties.getSignatureReason());        }                signature.setSignDate(Calendar.getInstance());                SignatureInterface signatureInterface = isExternalSigning() ? null : this;                if (visibleSignatureProperties != null && visibleSignatureProperties.isVisualSignEnabled()) {            signatureOptions = new SignatureOptions();            signatureOptions.setVisualSignature(visibleSignatureProperties.getVisibleSignature());            signatureOptions.setPage(visibleSignatureProperties.getPage() - 1);            doc.addSignature(signature, signatureInterface, signatureOptions);        } else {            doc.addSignature(signature, signatureInterface);        }        if (isExternalSigning()) {            ExternalSigningSupport externalSigning = doc.saveIncrementalForExternalSigning(fos);                        byte[] cmsSignature = sign(externalSigning.getContent());                        if (isLateExternalSigning()) {                                externalSigning.setSignature(new byte[0]);                                int offset = signature.getByteRange()[1] + 1;                                try (RandomAccessFile raf = new RandomAccessFile(signedFile, "rw")) {                    raf.seek(offset);                    raf.write(Hex.getBytes(cmsSignature));                }            } else {                                externalSigning.setSignature(cmsSignature);            }        } else {                        doc.saveIncremental(fos);        }    }                        IOUtils.closeQuietly(signatureOptions);}
private PDSignature pdfbox_f749_0(PDDocument doc, String sigFieldName)
{    PDSignature signature = null;    PDSignatureField signatureField;    PDAcroForm acroForm = doc.getDocumentCatalog().getAcroForm();    if (acroForm != null) {        signatureField = (PDSignatureField) acroForm.getField(sigFieldName);        if (signatureField != null) {                        signature = signatureField.getSignature();            if (signature == null) {                signature = new PDSignature();                                                                signatureField.getCOSObject().setItem(COSName.V, signature);            } else {                throw new IllegalStateException("The signature field " + sigFieldName + " is already signed.");            }        }    }    return signature;}
public static void pdfbox_f750_0(String[] args) throws KeyStoreException, CertificateException, IOException, NoSuchAlgorithmException, UnrecoverableKeyException
{        if (args.length < 4) {        usage();        System.exit(1);    }    String tsaUrl = null;            boolean externalSig = false;    for (int i = 0; i < args.length; i++) {        if ("-tsa".equals(args[i])) {            i++;            if (i >= args.length) {                usage();                System.exit(1);            }            tsaUrl = args[i];        }        if ("-e".equals(args[i])) {            externalSig = true;        }    }    File ksFile = new File(args[0]);    KeyStore keystore = KeyStore.getInstance("PKCS12");    char[] pin = args[1].toCharArray();    keystore.load(new FileInputStream(ksFile), pin);    File documentFile = new File(args[2]);    CreateVisibleSignature signing = new CreateVisibleSignature(keystore, pin.clone());    File signedDocumentFile;    int page;    try (InputStream imageStream = new FileInputStream(args[3])) {        String name = documentFile.getName();        String substring = name.substring(0, name.lastIndexOf('.'));        signedDocumentFile = new File(documentFile.getParent(), substring + "_signed.pdf");                page = 1;        signing.setVisibleSignDesigner(args[2], 0, 0, -50, imageStream, page);    }    signing.setVisibleSignatureProperties("name", "location", "Security", 0, page, true);    signing.setExternalSigning(externalSig);    signing.signPDF(documentFile, signedDocumentFile, tsaUrl);}
private static void pdfbox_f751_0()
{    System.err.println("Usage: java " + CreateVisibleSignature.class.getName() + " <pkcs12-keystore-file> <pin> <input-pdf> <sign-image>\n" + "" + "options:\n" + "  -tsa <url>    sign timestamp using the given TSA server\n" + "  -e            sign using external signature creation scenario");}
public File pdfbox_f752_0()
{    return imageFile;}
public void pdfbox_f753_0(File imageFile)
{    this.imageFile = imageFile;}
public boolean pdfbox_f754_0()
{    return lateExternalSigning;}
public void pdfbox_f755_0(boolean lateExternalSigning)
{    this.lateExternalSigning = lateExternalSigning;}
public void pdfbox_f756_0(File inputFile, File signedFile, Rectangle2D humanRect, String tsaUrl) throws IOException
{    this.signPDF(inputFile, signedFile, humanRect, tsaUrl, null);}
public void pdfbox_f757_0(File inputFile, File signedFile, Rectangle2D humanRect, String tsaUrl, String signatureFieldName) throws IOException
{    if (inputFile == null || !inputFile.exists()) {        throw new IOException("Document for signing does not exist");    }    setTsaUrl(tsaUrl);    try (FileOutputStream fos = new FileOutputStream(signedFile);        PDDocument doc = PDDocument.load(inputFile)) {        int accessPermissions = SigUtils.getMDPPermission(doc);        if (accessPermissions == 1) {            throw new IllegalStateException("No changes to the document are permitted due to DocMDP transform parameters dictionary");        }                                PDSignature signature = null;        PDAcroForm acroForm = doc.getDocumentCatalog().getAcroForm();        PDRectangle rect = null;                if (acroForm != null) {            signature = findExistingSignature(acroForm, signatureFieldName);            if (signature != null) {                rect = acroForm.getField(signatureFieldName).getWidgets().get(0).getRectangle();            }        }        if (signature == null) {                        signature = new PDSignature();        }        if (rect == null) {            rect = createSignatureRectangle(doc, humanRect);        }                if (doc.getVersion() >= 1.5f && accessPermissions == 0) {            SigUtils.setMDPPermission(doc, signature, 2);        }        if (acroForm != null && acroForm.getNeedAppearances()) {                        if (acroForm.getFields().isEmpty()) {                                acroForm.getCOSObject().removeItem(COSName.NEED_APPEARANCES);                                                            } else {                System.out.println("/NeedAppearances is set, signature may be ignored by Adobe Reader");            }        }                signature.setFilter(PDSignature.FILTER_ADOBE_PPKLITE);                signature.setSubFilter(PDSignature.SUBFILTER_ADBE_PKCS7_DETACHED);        signature.setName("Name");        signature.setLocation("Location");        signature.setReason("Reason");                signature.setSignDate(Calendar.getInstance());                SignatureInterface signatureInterface = isExternalSigning() ? null : this;                signatureOptions = new SignatureOptions();        signatureOptions.setVisualSignature(createVisualSignatureTemplate(doc, 0, rect, signature));        signatureOptions.setPage(0);        doc.addSignature(signature, signatureInterface, signatureOptions);        if (isExternalSigning()) {            ExternalSigningSupport externalSigning = doc.saveIncrementalForExternalSigning(fos);                        byte[] cmsSignature = sign(externalSigning.getContent());                        if (isLateExternalSigning()) {                                externalSigning.setSignature(new byte[0]);                                int offset = signature.getByteRange()[1] + 1;                                try (RandomAccessFile raf = new RandomAccessFile(signedFile, "rw")) {                    raf.seek(offset);                    raf.write(Hex.getBytes(cmsSignature));                }            } else {                                externalSigning.setSignature(cmsSignature);            }        } else {                        doc.saveIncremental(fos);        }    }                        IOUtils.closeQuietly(signatureOptions);}
private PDRectangle pdfbox_f758_0(PDDocument doc, Rectangle2D humanRect)
{    float x = (float) humanRect.getX();    float y = (float) humanRect.getY();    float width = (float) humanRect.getWidth();    float height = (float) humanRect.getHeight();    PDPage page = doc.getPage(0);    PDRectangle pageRect = page.getCropBox();    PDRectangle rect = new PDRectangle();        switch(page.getRotation()) {        case 90:            rect.setLowerLeftY(x);            rect.setUpperRightY(x + width);            rect.setLowerLeftX(y);            rect.setUpperRightX(y + height);            break;        case 180:            rect.setUpperRightX(pageRect.getWidth() - x);            rect.setLowerLeftX(pageRect.getWidth() - x - width);            rect.setLowerLeftY(y);            rect.setUpperRightY(y + height);            break;        case 270:            rect.setLowerLeftY(pageRect.getHeight() - x - width);            rect.setUpperRightY(pageRect.getHeight() - x);            rect.setLowerLeftX(pageRect.getWidth() - y - height);            rect.setUpperRightX(pageRect.getWidth() - y);            break;        case 0:        default:            rect.setLowerLeftX(x);            rect.setUpperRightX(x + width);            rect.setLowerLeftY(pageRect.getHeight() - y - height);            rect.setUpperRightY(pageRect.getHeight() - y);            break;    }    return rect;}
private InputStream pdfbox_f759_0(PDDocument srcDoc, int pageNum, PDRectangle rect, PDSignature signature) throws IOException
{    try (PDDocument doc = new PDDocument()) {        PDPage page = new PDPage(srcDoc.getPage(pageNum).getMediaBox());        doc.addPage(page);        PDAcroForm acroForm = new PDAcroForm(doc);        doc.getDocumentCatalog().setAcroForm(acroForm);        PDSignatureField signatureField = new PDSignatureField(acroForm);        PDAnnotationWidget widget = signatureField.getWidgets().get(0);        List<PDField> acroFormFields = acroForm.getFields();        acroForm.setSignaturesExist(true);        acroForm.setAppendOnly(true);        acroForm.getCOSObject().setDirect(true);        acroFormFields.add(signatureField);        widget.setRectangle(rect);                PDStream stream = new PDStream(doc);        PDFormXObject form = new PDFormXObject(stream);        PDResources res = new PDResources();        form.setResources(res);        form.setFormType(1);        PDRectangle bbox = new PDRectangle(rect.getWidth(), rect.getHeight());        float height = bbox.getHeight();        Matrix initialScale = null;        switch(srcDoc.getPage(pageNum).getRotation()) {            case 90:                form.setMatrix(AffineTransform.getQuadrantRotateInstance(1));                initialScale = Matrix.getScaleInstance(bbox.getWidth() / bbox.getHeight(), bbox.getHeight() / bbox.getWidth());                height = bbox.getWidth();                break;            case 180:                form.setMatrix(AffineTransform.getQuadrantRotateInstance(2));                break;            case 270:                form.setMatrix(AffineTransform.getQuadrantRotateInstance(3));                initialScale = Matrix.getScaleInstance(bbox.getWidth() / bbox.getHeight(), bbox.getHeight() / bbox.getWidth());                height = bbox.getWidth();                break;            case 0:            default:                break;        }        form.setBBox(bbox);        PDFont font = PDType1Font.HELVETICA_BOLD;                PDAppearanceDictionary appearance = new PDAppearanceDictionary();        appearance.getCOSObject().setDirect(true);        PDAppearanceStream appearanceStream = new PDAppearanceStream(form.getCOSObject());        appearance.setNormalAppearance(appearanceStream);        widget.setAppearance(appearance);        try (PDPageContentStream cs = new PDPageContentStream(doc, appearanceStream)) {                        if (initialScale != null) {                cs.transform(initialScale);            }                        cs.setNonStrokingColor(Color.yellow);            cs.addRect(-5000, -5000, 10000, 10000);            cs.fill();                                    cs.saveGraphicsState();            cs.transform(Matrix.getScaleInstance(0.25f, 0.25f));            PDImageXObject img = PDImageXObject.createFromFileByExtension(imageFile, doc);            cs.drawImage(img, 0, 0);            cs.restoreGraphicsState();                        float fontSize = 10;            float leading = fontSize * 1.5f;            cs.beginText();            cs.setFont(font, fontSize);            cs.setNonStrokingColor(Color.black);            cs.newLineAtOffset(fontSize, height - leading);            cs.setLeading(leading);            X509Certificate cert = (X509Certificate) getCertificateChain()[0];                        X500Name x500Name = new X500Name(cert.getSubjectX500Principal().getName());            RDN cn = x500Name.getRDNs(BCStyle.CN)[0];            String name = IETFUtils.valueToString(cn.getFirst().getValue());                                    String date = signature.getSignDate().getTime().toString();            String reason = signature.getReason();            cs.showText("Signer: " + name);            cs.newLine();            cs.showText(date);            cs.newLine();            cs.showText("Reason: " + reason);            cs.endText();        }                ByteArrayOutputStream baos = new ByteArrayOutputStream();        doc.save(baos);        return new ByteArrayInputStream(baos.toByteArray());    }}
private PDSignature pdfbox_f760_0(PDAcroForm acroForm, String sigFieldName)
{    PDSignature signature = null;    PDSignatureField signatureField;    if (acroForm != null) {        signatureField = (PDSignatureField) acroForm.getField(sigFieldName);        if (signatureField != null) {                        signature = signatureField.getSignature();            if (signature == null) {                signature = new PDSignature();                                                                signatureField.getCOSObject().setItem(COSName.V, signature);            } else {                throw new IllegalStateException("The signature field " + sigFieldName + " is already signed.");            }        }    }    return signature;}
public static void pdfbox_f761_0(String[] args) throws KeyStoreException, CertificateException, IOException, NoSuchAlgorithmException, UnrecoverableKeyException
{        if (args.length < 4) {        usage();        System.exit(1);    }    String tsaUrl = null;            boolean externalSig = false;    for (int i = 0; i < args.length; i++) {        if ("-tsa".equals(args[i])) {            i++;            if (i >= args.length) {                usage();                System.exit(1);            }            tsaUrl = args[i];        }        if ("-e".equals(args[i])) {            externalSig = true;        }    }    File ksFile = new File(args[0]);    KeyStore keystore = KeyStore.getInstance("PKCS12");    char[] pin = args[1].toCharArray();    keystore.load(new FileInputStream(ksFile), pin);    File documentFile = new File(args[2]);    CreateVisibleSignature2 signing = new CreateVisibleSignature2(keystore, pin.clone());    signing.setImageFile(new File(args[3]));    File signedDocumentFile;    String name = documentFile.getName();    String substring = name.substring(0, name.lastIndexOf('.'));    signedDocumentFile = new File(documentFile.getParent(), substring + "_signed.pdf");    signing.setExternalSigning(externalSig);                        Rectangle2D humanRect = new Rectangle2D.Float(100, 200, 150, 50);    signing.signPDF(documentFile, signedDocumentFile, humanRect, tsaUrl, "Signature1");}
private static void pdfbox_f762_0()
{    System.err.println("Usage: java " + CreateVisibleSignature2.class.getName() + " <pkcs12-keystore-file> <pin> <input-pdf> <sign-image>\n" + "" + "options:\n" + "  -tsa <url>    sign timestamp using the given TSA server\n" + "  -e            sign using external signature creation scenario");}
public static void pdfbox_f763_0(String[] args) throws IOException, TSPException, CertificateVerificationException, GeneralSecurityException
{        Security.addProvider(SecurityProvider.getProvider());    ShowSignature show = new ShowSignature();    show.showSignature(args);}
private void pdfbox_f764_0(String[] args) throws IOException, GeneralSecurityException, TSPException, CertificateVerificationException
{    if (args.length != 2) {        usage();    } else {        String password = args[0];        File infile = new File(args[1]);                        RandomAccessBufferedFileInputStream raFile = new RandomAccessBufferedFileInputStream(infile);                                PDFParser parser = new PDFParser(raFile, password);        parser.setLenient(false);        parser.parse();        try (PDDocument document = parser.getPDDocument()) {            for (PDSignature sig : document.getSignatureDictionaries()) {                COSDictionary sigDict = sig.getCOSObject();                COSString contents = (COSString) sigDict.getDictionaryObject(COSName.CONTENTS);                                byte[] buf;                try (FileInputStream fis = new FileInputStream(infile)) {                                        buf = sig.getSignedContent(fis);                }                System.out.println("Signature found");                if (sig.getName() != null) {                    System.out.println("Name:     " + sig.getName());                }                if (sig.getSignDate() != null) {                    System.out.println("Modified: " + sdf.format(sig.getSignDate().getTime()));                }                String subFilter = sig.getSubFilter();                if (subFilter != null) {                    switch(subFilter) {                        case "adbe.pkcs7.detached":                        case "ETSI.CAdES.detached":                            verifyPKCS7(buf, contents, sig);                            break;                        case "adbe.pkcs7.sha1":                            {                                                                byte[] certData = contents.getBytes();                                CertificateFactory factory = CertificateFactory.getInstance("X.509");                                ByteArrayInputStream certStream = new ByteArrayInputStream(certData);                                Collection<? extends Certificate> certs = factory.generateCertificates(certStream);                                System.out.println("certs=" + certs);                                byte[] hash = MessageDigest.getInstance("SHA1").digest(buf);                                verifyPKCS7(hash, contents, sig);                                break;                            }                        case "adbe.x509.rsa_sha1":                            {                                                                COSString certString = (COSString) sigDict.getDictionaryObject(COSName.CERT);                                                                if (certString == null) {                                    System.err.println("The /Cert certificate string is missing in the signature dictionary");                                    return;                                }                                byte[] certData = certString.getBytes();                                CertificateFactory factory = CertificateFactory.getInstance("X.509");                                ByteArrayInputStream certStream = new ByteArrayInputStream(certData);                                Collection<? extends Certificate> certs = factory.generateCertificates(certStream);                                System.out.println("certs=" + certs);                                X509Certificate cert = (X509Certificate) certs.iterator().next();                                try {                                    if (sig.getSignDate() != null) {                                        cert.checkValidity(sig.getSignDate().getTime());                                        System.out.println("Certificate valid at signing time");                                    } else {                                        System.err.println("Certificate cannot be verified without signing time");                                    }                                } catch (CertificateExpiredException ex) {                                    System.err.println("Certificate expired at signing time");                                } catch (CertificateNotYetValidException ex) {                                    System.err.println("Certificate not yet valid at signing time");                                }                                if (CertificateVerifier.isSelfSigned(cert)) {                                    System.err.println("Certificate is self-signed, LOL!");                                } else {                                    System.out.println("Certificate is not self-signed");                                    if (sig.getSignDate() != null) {                                        @SuppressWarnings("unchecked")                                        Store<X509CertificateHolder> store = new JcaCertStore(certs);                                        verifyCertificateChain(store, cert, sig.getSignDate().getTime());                                    }                                }                                break;                            }                        case "ETSI.RFC3161":                                                        verifyETSIdotRFC3161(buf, contents);                                                        break;                        default:                            System.err.println("Unknown certificate type: " + subFilter);                            break;                    }                } else {                    throw new IOException("Missing subfilter for cert dictionary");                }                int[] byteRange = sig.getByteRange();                if (byteRange.length != 4) {                    System.err.println("Signature byteRange must have 4 items");                } else {                    long fileLen = infile.length();                    long rangeMax = byteRange[2] + (long) byteRange[3];                                        int contentLen = contents.getString().length() * 2 + 2;                    if (fileLen != rangeMax || byteRange[0] != 0 || byteRange[1] + contentLen != byteRange[2]) {                                                                                                System.out.println("Signature does not cover whole document");                    } else {                        System.out.println("Signature covers whole document");                    }                    checkContentValueWithFile(infile, byteRange, contents);                }            }            analyseDSS(document);        } catch (CMSException | OperatorCreationException ex) {            throw new IOException(ex);        }        System.out.println("Analyzed: " + args[1]);    }}
private void pdfbox_f765_0(File file, int[] byteRange, COSString contents) throws IOException
{        try (RandomAccessBufferedFileInputStream raf = new RandomAccessBufferedFileInputStream(file)) {        raf.seek(byteRange[1]);        int c = raf.read();        if (c != '<') {            System.err.println("'<' expected at offset " + byteRange[1] + ", but got " + (char) c);        }        byte[] contentFromFile = raf.readFully(byteRange[2] - byteRange[1] - 2);        byte[] contentAsHex = Hex.getString(contents.getBytes()).getBytes(Charsets.US_ASCII);        if (contentFromFile.length != contentAsHex.length) {            System.err.println("Raw content length from file is " + contentFromFile.length + ", but internal content string in hex has length " + contentAsHex.length);        }                for (int i = 0; i < contentFromFile.length; ++i) {            try {                if (Integer.parseInt(String.valueOf((char) contentFromFile[i]), 16) != Integer.parseInt(String.valueOf((char) contentAsHex[i]), 16)) {                    System.err.println("Possible manipulation at file offset " + (byteRange[1] + i + 1) + " in signature content");                    break;                }            } catch (NumberFormatException ex) {                System.err.println("Incorrect hex value");                System.err.println("Possible manipulation at file offset " + (byteRange[1] + i + 1) + " in signature content");                break;            }        }        c = raf.read();        if (c != '>') {            System.err.println("'>' expected at offset " + byteRange[2] + ", but got " + (char) c);        }    }}
private void pdfbox_f766_0(byte[] buf, COSString contents) throws CMSException, NoSuchAlgorithmException, IOException, TSPException, OperatorCreationException, CertificateVerificationException, CertificateException
{    TimeStampToken timeStampToken = new TimeStampToken(new CMSSignedData(contents.getBytes()));    System.out.println("Time stamp gen time: " + timeStampToken.getTimeStampInfo().getGenTime());    System.out.println("Time stamp tsa name: " + timeStampToken.getTimeStampInfo().getTsa().getName());    CertificateFactory factory = CertificateFactory.getInstance("X.509");    ByteArrayInputStream certStream = new ByteArrayInputStream(contents.getBytes());    Collection<? extends Certificate> certs = factory.generateCertificates(certStream);    System.out.println("certs=" + certs);    String hashAlgorithm = timeStampToken.getTimeStampInfo().getMessageImprintAlgOID().getId();        if (Arrays.equals(MessageDigest.getInstance(hashAlgorithm).digest(buf), timeStampToken.getTimeStampInfo().getMessageImprintDigest())) {        System.out.println("ETSI.RFC3161 timestamp signature verified");    } else {        System.err.println("ETSI.RFC3161 timestamp signature verification failed");    }    X509Certificate certFromTimeStamp = (X509Certificate) certs.iterator().next();    SigUtils.checkTimeStampCertificateUsage(certFromTimeStamp);    validateTimestampToken(timeStampToken);    verifyCertificateChain(timeStampToken.getCertificates(), certFromTimeStamp, timeStampToken.getTimeStampInfo().getGenTime());}
private void pdfbox_f767_0(byte[] byteArray, COSString contents, PDSignature sig) throws CMSException, OperatorCreationException, CertificateVerificationException, GeneralSecurityException, TSPException, IOException
{                CMSProcessable signedContent = new CMSProcessableByteArray(byteArray);    CMSSignedData signedData = new CMSSignedData(signedContent, contents.getBytes());    Store<X509CertificateHolder> certificatesStore = signedData.getCertificates();    if (certificatesStore.getMatches(null).isEmpty()) {        throw new IOException("No certificates in signature");    }    Collection<SignerInformation> signers = signedData.getSignerInfos().getSigners();    if (signers.isEmpty()) {        throw new IOException("No signers in signature");    }    SignerInformation signerInformation = signers.iterator().next();    @SuppressWarnings("unchecked")    Collection<X509CertificateHolder> matches = certificatesStore.getMatches((Selector<X509CertificateHolder>) signerInformation.getSID());    if (matches.isEmpty()) {        throw new IOException("Signer '" + signerInformation.getSID().getIssuer() + ", serial# " + signerInformation.getSID().getSerialNumber() + " does not match any certificates");    }    X509CertificateHolder certificateHolder = matches.iterator().next();    X509Certificate certFromSignedData = new JcaX509CertificateConverter().getCertificate(certificateHolder);    System.out.println("certFromSignedData: " + certFromSignedData);    SigUtils.checkCertificateUsage(certFromSignedData);        TimeStampToken timeStampToken = extractTimeStampTokenFromSignerInformation(signerInformation);    if (timeStampToken != null) {                                validateTimestampToken(timeStampToken);                @SuppressWarnings("unchecked")        Collection<X509CertificateHolder> tstMatches = timeStampToken.getCertificates().getMatches((Selector<X509CertificateHolder>) timeStampToken.getSID());        X509CertificateHolder tstCertHolder = tstMatches.iterator().next();        X509Certificate certFromTimeStamp = new JcaX509CertificateConverter().getCertificate(tstCertHolder);                HashSet<X509CertificateHolder> certificateHolderSet = new HashSet<>();        certificateHolderSet.addAll(certificatesStore.getMatches(null));        certificateHolderSet.addAll(timeStampToken.getCertificates().getMatches(null));        verifyCertificateChain(new CollectionStore<>(certificateHolderSet), certFromTimeStamp, timeStampToken.getTimeStampInfo().getGenTime());        SigUtils.checkTimeStampCertificateUsage(certFromTimeStamp);    }    try {        if (sig.getSignDate() != null) {            certFromSignedData.checkValidity(sig.getSignDate().getTime());            System.out.println("Certificate valid at signing time");        } else {            System.err.println("Certificate cannot be verified without signing time");        }    } catch (CertificateExpiredException ex) {        System.err.println("Certificate expired at signing time");    } catch (CertificateNotYetValidException ex) {        System.err.println("Certificate not yet valid at signing time");    }        if (signerInformation.getSignedAttributes() != null) {                Attribute signingTime = signerInformation.getSignedAttributes().get(CMSAttributes.signingTime);        if (signingTime != null) {            Time timeInstance = Time.getInstance(signingTime.getAttrValues().getObjectAt(0));            try {                certFromSignedData.checkValidity(timeInstance.getDate());                System.out.println("Certificate valid at signing time: " + timeInstance.getDate());            } catch (CertificateExpiredException ex) {                System.err.println("Certificate expired at signing time");            } catch (CertificateNotYetValidException ex) {                System.err.println("Certificate not yet valid at signing time");            }        }    }    if (signerInformation.verify(new JcaSimpleSignerInfoVerifierBuilder().setProvider(SecurityProvider.getProvider()).build(certFromSignedData))) {        System.out.println("Signature verified");    } else {        System.out.println("Signature verification failed");    }    if (CertificateVerifier.isSelfSigned(certFromSignedData)) {        System.err.println("Certificate is self-signed, LOL!");    } else {        System.out.println("Certificate is not self-signed");        if (sig.getSignDate() != null) {            verifyCertificateChain(certificatesStore, certFromSignedData, sig.getSignDate().getTime());        } else {            System.err.println("Certificate cannot be verified without signing time");        }    }}
private TimeStampToken pdfbox_f768_0(SignerInformation signerInformation) throws CMSException, IOException, TSPException
{    if (signerInformation.getUnsignedAttributes() == null) {        return null;    }    AttributeTable unsignedAttributes = signerInformation.getUnsignedAttributes();        Attribute attribute = unsignedAttributes.get(PKCSObjectIdentifiers.id_aa_signatureTimeStampToken);    if (attribute == null) {        return null;    }    ASN1Object obj = (ASN1Object) attribute.getAttrValues().getObjectAt(0);    CMSSignedData signedTSTData = new CMSSignedData(obj.getEncoded());    return new TimeStampToken(signedTSTData);}
private void pdfbox_f769_0(Store<X509CertificateHolder> certificatesStore, X509Certificate certFromSignedData, Date signDate) throws CertificateVerificationException, CertificateException
{                    Collection<X509CertificateHolder> certificateHolders = certificatesStore.getMatches(null);    Set<X509Certificate> additionalCerts = new HashSet<>();    JcaX509CertificateConverter certificateConverter = new JcaX509CertificateConverter();    for (X509CertificateHolder certHolder : certificateHolders) {        X509Certificate certificate = certificateConverter.getCertificate(certHolder);        if (!certificate.equals(certFromSignedData)) {            additionalCerts.add(certificate);        }    }    CertificateVerifier.verifyCertificate(certFromSignedData, additionalCerts, true, signDate);}
private void pdfbox_f770_0(TimeStampToken timeStampToken) throws TSPException, CertificateException, OperatorCreationException, IOException
{            @SuppressWarnings("unchecked")    Collection<X509CertificateHolder> tstMatches = timeStampToken.getCertificates().getMatches((Selector<X509CertificateHolder>) timeStampToken.getSID());    X509CertificateHolder holder = tstMatches.iterator().next();    X509Certificate tstCert = new JcaX509CertificateConverter().getCertificate(holder);    SignerInformationVerifier siv = new JcaSimpleSignerInfoVerifierBuilder().setProvider(SecurityProvider.getProvider()).build(tstCert);    timeStampToken.validate(siv);    System.out.println("TimeStampToken validated");}
private Set<X509Certificate> pdfbox_f771_0() throws GeneralSecurityException, IOException
{    Set<X509Certificate> rootCertificates = new HashSet<>();        String filename = System.getProperty("java.home") + "/lib/security/cacerts";    KeyStore keystore;    try (FileInputStream is = new FileInputStream(filename)) {        keystore = KeyStore.getInstance(KeyStore.getDefaultType());        keystore.load(is, null);    }    PKIXParameters params = new PKIXParameters(keystore);    for (TrustAnchor trustAnchor : params.getTrustAnchors()) {        rootCertificates.add(trustAnchor.getTrustedCert());    }        try {        keystore = KeyStore.getInstance("Windows-ROOT");        keystore.load(null, null);        params = new PKIXParameters(keystore);        for (TrustAnchor trustAnchor : params.getTrustAnchors()) {            rootCertificates.add(trustAnchor.getTrustedCert());        }    } catch (InvalidAlgorithmParameterException | KeyStoreException ex) {        }    return rootCertificates;}
private void pdfbox_f772_0(PDDocument document) throws IOException
{    PDDocumentCatalog catalog = document.getDocumentCatalog();    COSBase dssElement = catalog.getCOSObject().getDictionaryObject("DSS");    if (dssElement instanceof COSDictionary) {        COSDictionary dss = (COSDictionary) dssElement;        System.out.println("DSS Dictionary: " + dss);        COSBase certsElement = dss.getDictionaryObject("Certs");        if (certsElement instanceof COSArray) {            printStreamsFromArray((COSArray) certsElement, "Cert");        }        COSBase ocspsElement = dss.getDictionaryObject("OCSPs");        if (ocspsElement instanceof COSArray) {            printStreamsFromArray((COSArray) ocspsElement, "Ocsp");        }        COSBase crlElement = dss.getDictionaryObject("CRLs");        if (crlElement instanceof COSArray) {            printStreamsFromArray((COSArray) crlElement, "CRL");        }        }}
private void pdfbox_f773_0(COSArray elements, String description) throws IOException
{    for (COSBase baseElem : elements) {        COSObject streamObj = (COSObject) baseElem;        if (streamObj.getObject() instanceof COSStream) {            COSStream cosStream = (COSStream) streamObj.getObject();            try (InputStream is = cosStream.createInputStream()) {                byte[] streamBytes = IOUtils.toByteArray(is);                System.out.println(description + " (" + elements.indexOf(streamObj) + "): " + Hex.getString(streamBytes));            }        }    }}
private static void pdfbox_f774_0()
{    System.err.println("usage: java " + ShowSignature.class.getName() + " <password (usually empty)> <inputfile>");}
public static int pdfbox_f775_0(PDDocument doc)
{    COSBase base = doc.getDocumentCatalog().getCOSObject().getDictionaryObject(COSName.PERMS);    if (base instanceof COSDictionary) {        COSDictionary permsDict = (COSDictionary) base;        base = permsDict.getDictionaryObject(COSName.DOCMDP);        if (base instanceof COSDictionary) {            COSDictionary signatureDict = (COSDictionary) base;            base = signatureDict.getDictionaryObject("Reference");            if (base instanceof COSArray) {                COSArray refArray = (COSArray) base;                for (int i = 0; i < refArray.size(); ++i) {                    base = refArray.getObject(i);                    if (base instanceof COSDictionary) {                        COSDictionary sigRefDict = (COSDictionary) base;                        if (COSName.DOCMDP.equals(sigRefDict.getDictionaryObject("TransformMethod"))) {                            base = sigRefDict.getDictionaryObject("TransformParams");                            if (base instanceof COSDictionary) {                                COSDictionary transformDict = (COSDictionary) base;                                int accessPermissions = transformDict.getInt(COSName.P, 2);                                if (accessPermissions < 1 || accessPermissions > 3) {                                    accessPermissions = 2;                                }                                return accessPermissions;                            }                        }                    }                }            }        }    }    return 0;}
public static void pdfbox_f776_0(PDDocument doc, PDSignature signature, int accessPermissions)
{    COSDictionary sigDict = signature.getCOSObject();        COSDictionary transformParameters = new COSDictionary();    transformParameters.setItem(COSName.TYPE, COSName.getPDFName("TransformParams"));    transformParameters.setInt(COSName.P, accessPermissions);    transformParameters.setName(COSName.V, "1.2");    transformParameters.setNeedToBeUpdated(true);    COSDictionary referenceDict = new COSDictionary();    referenceDict.setItem(COSName.TYPE, COSName.getPDFName("SigRef"));    referenceDict.setItem("TransformMethod", COSName.DOCMDP);    referenceDict.setItem("DigestMethod", COSName.getPDFName("SHA1"));    referenceDict.setItem("TransformParams", transformParameters);    referenceDict.setNeedToBeUpdated(true);    COSArray referenceArray = new COSArray();    referenceArray.add(referenceDict);    sigDict.setItem("Reference", referenceArray);    referenceArray.setNeedToBeUpdated(true);        COSDictionary catalogDict = doc.getDocumentCatalog().getCOSObject();    COSDictionary permsDict = new COSDictionary();    catalogDict.setItem(COSName.PERMS, permsDict);    permsDict.setItem(COSName.DOCMDP, signature);    catalogDict.setNeedToBeUpdated(true);    permsDict.setNeedToBeUpdated(true);}
public static void pdfbox_f777_1(X509Certificate x509Certificate) throws CertificateParsingException
{                boolean[] keyUsage = x509Certificate.getKeyUsage();    if (keyUsage != null && !keyUsage[0] && !keyUsage[1]) {                            }    List<String> extendedKeyUsage = x509Certificate.getExtendedKeyUsage();    if (extendedKeyUsage != null && !extendedKeyUsage.contains(KeyPurposeId.id_kp_emailProtection.toString()) && !extendedKeyUsage.contains(KeyPurposeId.id_kp_codeSigning.toString()) && !extendedKeyUsage.contains(KeyPurposeId.anyExtendedKeyUsage.toString()) && !extendedKeyUsage.contains("1.2.840.113583.1.1.5") &&     !extendedKeyUsage.contains("1.3.6.1.4.1.311.10.3.12")) {            }}
public static void pdfbox_f778_1(X509Certificate x509Certificate) throws CertificateParsingException
{    List<String> extendedKeyUsage = x509Certificate.getExtendedKeyUsage();        if (extendedKeyUsage != null && !extendedKeyUsage.contains(KeyPurposeId.id_kp_timeStamping.toString())) {            }}
public static void pdfbox_f779_1(X509Certificate x509Certificate) throws CertificateParsingException
{    List<String> extendedKeyUsage = x509Certificate.getExtendedKeyUsage();        if (extendedKeyUsage != null && !extendedKeyUsage.contains(KeyPurposeId.id_kp_OCSPSigning.toString())) {            }}
public static PDSignature pdfbox_f780_0(PDDocument document) throws IOException
{    SortedMap<Integer, PDSignature> sortedMap = new TreeMap<>();    for (PDSignature signature : document.getSignatureDictionaries()) {        int sigOffset = signature.getByteRange()[1];        sortedMap.put(sigOffset, signature);    }    if (sortedMap.size() > 0) {        PDSignature lastSignature = sortedMap.get(sortedMap.lastKey());        COSBase type = lastSignature.getCOSObject().getItem(COSName.TYPE);        if (type.equals(COSName.SIG) || type.equals(COSName.DOC_TIME_STAMP)) {            return lastSignature;        }    }    return null;}
public byte[] pdfbox_f781_0(byte[] messageImprint) throws IOException
{    digest.reset();    byte[] hash = digest.digest(messageImprint);        SecureRandom random = new SecureRandom();    int nonce = random.nextInt();        TimeStampRequestGenerator tsaGenerator = new TimeStampRequestGenerator();    tsaGenerator.setCertReq(true);    ASN1ObjectIdentifier oid = getHashObjectIdentifier(digest.getAlgorithm());    TimeStampRequest request = tsaGenerator.generate(oid, hash, BigInteger.valueOf(nonce));        byte[] tsaResponse = getTSAResponse(request.getEncoded());    TimeStampResponse response;    try {        response = new TimeStampResponse(tsaResponse);        response.validate(request);    } catch (TSPException e) {        throw new IOException(e);    }    TimeStampToken token = response.getTimeStampToken();    if (token == null) {        throw new IOException("Response does not have a time stamp token");    }    return token.getEncoded();}
private byte[] pdfbox_f782_1(byte[] request) throws IOException
{            URLConnection connection = url.openConnection();    connection.setDoOutput(true);    connection.setDoInput(true);    connection.setRequestProperty("Content-Type", "application/timestamp-query");        if (username != null && password != null && !username.isEmpty() && !password.isEmpty()) {        connection.setRequestProperty(username, password);    }        OutputStream output = null;    try {        output = connection.getOutputStream();        output.write(request);    } finally {        IOUtils.closeQuietly(output);    }        InputStream input = null;    byte[] response;    try {        input = connection.getInputStream();        response = IOUtils.toByteArray(input);    } finally {        IOUtils.closeQuietly(input);    }        return response;}
private ASN1ObjectIdentifier pdfbox_f783_0(String algorithm)
{    switch(algorithm) {        case "MD2":            return new ASN1ObjectIdentifier(PKCSObjectIdentifiers.md2.getId());        case "MD5":            return new ASN1ObjectIdentifier(PKCSObjectIdentifiers.md5.getId());        case "SHA-1":            return new ASN1ObjectIdentifier(OIWObjectIdentifiers.idSHA1.getId());        case "SHA-224":            return new ASN1ObjectIdentifier(NISTObjectIdentifiers.id_sha224.getId());        case "SHA-256":            return new ASN1ObjectIdentifier(NISTObjectIdentifiers.id_sha256.getId());        case "SHA-384":            return new ASN1ObjectIdentifier(NISTObjectIdentifiers.id_sha384.getId());        case "SHA-512":            return new ASN1ObjectIdentifier(NISTObjectIdentifiers.id_sha512.getId());        default:            return new ASN1ObjectIdentifier(algorithm);    }}
public void pdfbox_f784_0(File inFile, File outFile) throws IOException
{    if (inFile == null || !inFile.exists()) {        throw new FileNotFoundException("Document for signing does not exist");    }    try (PDDocument doc = PDDocument.load(inFile);        FileOutputStream fos = new FileOutputStream(outFile)) {        document = doc;        doValidation(inFile.getAbsolutePath(), fos);    }}
private void pdfbox_f785_0(String filename, OutputStream output) throws IOException
{    certInformationHelper = new CertInformationCollector();    CertSignatureInformation certInfo = null;    try {        PDSignature signature = SigUtils.getLastRelevantSignature(document);        if (signature != null) {            certInfo = certInformationHelper.getLastCertInfo(signature, filename);            signDate = signature.getSignDate();        }    } catch (CertificateProccessingException e) {        throw new IOException("An Error occurred processing the Signature", e);    }    if (certInfo == null) {        throw new IOException("No Certificate information or signature found in the given document");    }    PDDocumentCatalog docCatalog = document.getDocumentCatalog();    COSDictionary catalog = docCatalog.getCOSObject();    catalog.setNeedToBeUpdated(true);    COSDictionary dss = getOrCreateDictionaryEntry(COSDictionary.class, catalog, "DSS");    addExtensions(docCatalog);    vriBase = getOrCreateDictionaryEntry(COSDictionary.class, dss, "VRI");    ocsps = getOrCreateDictionaryEntry(COSArray.class, dss, "OCSPs");    crls = getOrCreateDictionaryEntry(COSArray.class, dss, "CRLs");    certs = getOrCreateDictionaryEntry(COSArray.class, dss, "Certs");    addRevocationData(certInfo);    addAllCertsToCertArray();        document.saveIncremental(output);}
private static T pdfbox_f786_1(Class<T> clazz, COSDictionary parent, String name) throws IOException
{    T result;    COSBase element = parent.getDictionaryObject(name);    if (element != null && clazz.isInstance(element)) {        result = clazz.cast(element);        result.setNeedToBeUpdated(true);    } else if (element != null) {        throw new IOException("Element " + name + " from dictionary is not of type " + clazz.getCanonicalName());    } else {        try {            result = clazz.getDeclaredConstructor().newInstance();        } catch (ReflectiveOperationException | SecurityException e) {                        return null;        }        result.setDirect(false);        parent.setItem(COSName.getPDFName(name), result);    }    return result;}
private void pdfbox_f787_0(CertSignatureInformation certInfo) throws IOException
{    COSDictionary vri = new COSDictionary();    vriBase.setItem(certInfo.getSignatureHash(), vri);    updateVRI(certInfo, vri);    if (certInfo.getTsaCerts() != null) {                correspondingOCSPs = null;        correspondingCRLs = null;        addRevocationDataRecursive(certInfo.getTsaCerts());    }}
private void pdfbox_f788_1(CertSignatureInformation certInfo) throws IOException
{    if (certInfo.isSelfSigned()) {        return;    }        boolean isRevocationInfoFound = foundRevocationInformation.contains(certInfo.getCertificate().getSerialNumber());    if (!isRevocationInfoFound) {        if (certInfo.getOcspUrl() != null && certInfo.getIssuerCertificate() != null) {            isRevocationInfoFound = fetchOcspData(certInfo);        }        if (!isRevocationInfoFound && certInfo.getCrlUrl() != null) {            fetchCrlData(certInfo);            isRevocationInfoFound = true;        }        if (certInfo.getOcspUrl() == null && certInfo.getCrlUrl() == null) {                    } else if (!isRevocationInfoFound) {            throw new IOException("Could not fetch Revocation Info for Cert: " + certInfo.getCertificate().getSubjectX500Principal());        }    }    if (certInfo.getAlternativeCertChain() != null) {        addRevocationDataRecursive(certInfo.getAlternativeCertChain());    }    if (certInfo.getCertChain() != null && certInfo.getCertChain().getCertificate() != null) {        addRevocationDataRecursive(certInfo.getCertChain());    }}
private boolean pdfbox_f789_1(CertSignatureInformation certInfo) throws IOException
{    try {        addOcspData(certInfo);        return true;    } catch (OCSPException | CertificateProccessingException | IOException e) {                return false;    } catch (RevokedCertificateException e) {        throw new IOException(e);    }}
private void pdfbox_f790_1(CertSignatureInformation certInfo) throws IOException
{    try {        addCrlRevocationInfo(certInfo);    } catch (GeneralSecurityException | IOException | RevokedCertificateException | CertificateVerificationException e) {                throw new IOException(e);    }}
private void pdfbox_f791_0(CertSignatureInformation certInfo) throws IOException, OCSPException, CertificateProccessingException, RevokedCertificateException
{    OcspHelper ocspHelper = new OcspHelper(certInfo.getCertificate(), signDate.getTime(), certInfo.getIssuerCertificate(), new HashSet<>(certInformationHelper.getCertificateSet()), certInfo.getOcspUrl());    OCSPResp ocspResp = ocspHelper.getResponseOcsp();    BasicOCSPResp basicResponse = (BasicOCSPResp) ocspResp.getResponseObject();    X509Certificate ocspResponderCertificate = ocspHelper.getOcspResponderCertificate();    certInformationHelper.addAllCertsFromHolders(basicResponse.getCerts());    byte[] signatureHash;    try {        signatureHash = MessageDigest.getInstance("SHA-1").digest(basicResponse.getSignature());    } catch (NoSuchAlgorithmException ex) {        throw new CertificateProccessingException(ex);    }    String signatureHashHex = Hex.getString(signatureHash);    if (!vriBase.containsKey(signatureHashHex)) {        COSArray savedCorrespondingOCSPs = correspondingOCSPs;        COSArray savedCorrespondingCRLs = correspondingCRLs;        COSDictionary vri = new COSDictionary();        vriBase.setItem(signatureHashHex, vri);        CertSignatureInformation ocspCertInfo = certInformationHelper.getCertInfo(ocspResponderCertificate);        updateVRI(ocspCertInfo, vri);        correspondingOCSPs = savedCorrespondingOCSPs;        correspondingCRLs = savedCorrespondingCRLs;    }    byte[] ocspData = ocspResp.getEncoded();    COSStream ocspStream = writeDataToStream(ocspData);    ocsps.add(ocspStream);    if (correspondingOCSPs != null) {        correspondingOCSPs.add(ocspStream);    }    foundRevocationInformation.add(certInfo.getCertificate().getSerialNumber());}
private void pdfbox_f792_0(CertSignatureInformation certInfo) throws IOException, RevokedCertificateException, GeneralSecurityException, CertificateVerificationException
{    X509CRL crl = CRLVerifier.downloadCRLFromWeb(certInfo.getCrlUrl());    X509Certificate issuerCertificate = certInfo.getIssuerCertificate();        for (X509Certificate certificate : certInformationHelper.getCertificateSet()) {        if (certificate.getSubjectX500Principal().equals(crl.getIssuerX500Principal())) {            issuerCertificate = certificate;            break;        }    }    crl.verify(issuerCertificate.getPublicKey(), SecurityProvider.getProvider().getName());    CRLVerifier.checkRevocation(crl, certInfo.getCertificate(), signDate.getTime(), certInfo.getCrlUrl());    COSStream crlStream = writeDataToStream(crl.getEncoded());    crls.add(crlStream);    if (correspondingCRLs != null) {        correspondingCRLs.add(crlStream);        byte[] signatureHash;        try {            signatureHash = MessageDigest.getInstance("SHA-1").digest(crl.getSignature());        } catch (NoSuchAlgorithmException ex) {            throw new CertificateVerificationException(ex.getMessage(), ex);        }        String signatureHashHex = Hex.getString(signatureHash);        if (!vriBase.containsKey(signatureHashHex)) {            COSArray savedCorrespondingOCSPs = correspondingOCSPs;            COSArray savedCorrespondingCRLs = correspondingCRLs;            COSDictionary vri = new COSDictionary();            vriBase.setItem(signatureHashHex, vri);            CertSignatureInformation crlCertInfo;            try {                crlCertInfo = certInformationHelper.getCertInfo(issuerCertificate);            } catch (CertificateProccessingException ex) {                throw new CertificateVerificationException(ex.getMessage(), ex);            }            updateVRI(crlCertInfo, vri);            correspondingOCSPs = savedCorrespondingOCSPs;            correspondingCRLs = savedCorrespondingCRLs;        }    }    foundRevocationInformation.add(certInfo.getCertificate().getSerialNumber());}
private void pdfbox_f793_1(CertSignatureInformation certInfo, COSDictionary vri) throws IOException
{    if (certInfo.getCertificate().getExtensionValue(OCSPObjectIdentifiers.id_pkix_ocsp_nocheck.getId()) == null) {        correspondingOCSPs = new COSArray();        correspondingCRLs = new COSArray();        addRevocationDataRecursive(certInfo);        if (correspondingOCSPs.size() > 0) {            vri.setItem("OCSP", correspondingOCSPs);        }        if (correspondingCRLs.size() > 0) {            vri.setItem("CRL", correspondingCRLs);        }    }    COSArray correspondingCerts = new COSArray();    CertSignatureInformation ci = certInfo;    do {        X509Certificate cert = ci.getCertificate();        try {            COSStream certStream = writeDataToStream(cert.getEncoded());            correspondingCerts.add(certStream);                        certs.add(certStream);        } catch (CertificateEncodingException ex) {                                }        if (cert.getExtensionValue(OCSPObjectIdentifiers.id_pkix_ocsp_nocheck.getId()) != null) {            break;        }        ci = ci.getCertChain();    } while (ci != null);    vri.setItem(COSName.CERT, correspondingCerts);    vri.setDate(COSName.TU, Calendar.getInstance());}
private void pdfbox_f794_0() throws IOException
{    try {        for (X509Certificate cert : certInformationHelper.getCertificateSet()) {            COSStream stream = writeDataToStream(cert.getEncoded());            certs.add(stream);        }    } catch (CertificateEncodingException e) {        throw new IOException(e);    }}
private COSStream pdfbox_f795_0(byte[] data) throws IOException
{    COSStream stream = document.getDocument().createCOSStream();    try (OutputStream os = stream.createOutputStream(COSName.FLATE_DECODE)) {        os.write(data);    }    return stream;}
private void pdfbox_f796_0(PDDocumentCatalog catalog)
{    COSDictionary dssExtensions = new COSDictionary();    dssExtensions.setDirect(true);    catalog.getCOSObject().setItem("Extensions", dssExtensions);    COSDictionary adbeExtension = new COSDictionary();    adbeExtension.setDirect(true);    dssExtensions.setItem("ADBE", adbeExtension);    adbeExtension.setName("BaseVersion", "1.7");    adbeExtension.setInt("ExtensionLevel", 5);    catalog.setVersion("1.7");}
public static void pdfbox_f797_0(String[] args) throws IOException, GeneralSecurityException
{    if (args.length != 1) {        usage();        System.exit(1);    }        Security.addProvider(SecurityProvider.getProvider());        AddValidationInformation addOcspInformation = new AddValidationInformation();    File inFile = new File(args[0]);    String name = inFile.getName();    String substring = name.substring(0, name.lastIndexOf('.'));    File outFile = new File(inFile.getParent(), substring + "_ocsp.pdf");    addOcspInformation.validateSignature(inFile, outFile);}
private static void pdfbox_f798_0()
{    System.err.println("usage: java " + AddValidationInformation.class.getName() + " " + "<pdf_to_add_ocsp>\n");}
public CertSignatureInformation pdfbox_f799_0(PDSignature signature, String fileName) throws CertificateProccessingException, IOException
{    try (FileInputStream documentInput = new FileInputStream(fileName)) {        byte[] signatureContent = signature.getContents(documentInput);        return getCertInfo(signatureContent);    }}
private CertSignatureInformation pdfbox_f800_1(byte[] signatureContent) throws CertificateProccessingException, IOException
{    rootCertInfo = new CertSignatureInformation();    rootCertInfo.signatureHash = CertInformationHelper.getSha1Hash(signatureContent);    try {        CMSSignedData signedData = new CMSSignedData(signatureContent);        Store<X509CertificateHolder> certificatesStore = signedData.getCertificates();        SignerInformation signerInformation = processSignerStore(certificatesStore, signedData, rootCertInfo);        addTimestampCerts(signerInformation);    } catch (CMSException e) {                throw new CertificateProccessingException(e);    }    return rootCertInfo;}
private void pdfbox_f801_0(SignerInformation signerInformation) throws IOException, CertificateProccessingException
{    AttributeTable unsignedAttributes = signerInformation.getUnsignedAttributes();    if (unsignedAttributes == null) {        return;    }    Attribute tsAttribute = signerInformation.getUnsignedAttributes().get(PKCSObjectIdentifiers.id_aa_signatureTimeStampToken);    if (tsAttribute.getAttrValues() instanceof DERSet) {        DERSet tsSet = (DERSet) tsAttribute.getAttrValues();        tsSet.getEncoded("DER");        DERSequence tsSeq = (DERSequence) tsSet.getObjectAt(0);        try {            TimeStampToken tsToken = new TimeStampToken(new CMSSignedData(tsSeq.getEncoded("DER")));            rootCertInfo.tsaCerts = new CertSignatureInformation();            @SuppressWarnings("unchecked")            Store<X509CertificateHolder> certificatesStore = tsToken.getCertificates();            processSignerStore(certificatesStore, tsToken.toCMSSignedData(), rootCertInfo.tsaCerts);        } catch (TSPException | CMSException e) {            throw new IOException("Error parsing timestamp token", e);        }    }}
private SignerInformation pdfbox_f802_0(Store<X509CertificateHolder> certificatesStore, CMSSignedData signedData, CertSignatureInformation certInfo) throws IOException, CertificateProccessingException
{    Collection<SignerInformation> signers = signedData.getSignerInfos().getSigners();    SignerInformation signerInformation = signers.iterator().next();    @SuppressWarnings("unchecked")    Collection<X509CertificateHolder> matches = certificatesStore.getMatches((Selector<X509CertificateHolder>) signerInformation.getSID());    X509Certificate certificate = getCertFromHolder(matches.iterator().next());    certificateSet.add(certificate);    Collection<X509CertificateHolder> allCerts = certificatesStore.getMatches(null);    addAllCerts(allCerts);    traverseChain(certificate, certInfo, MAX_CERTIFICATE_CHAIN_DEPTH);    return signerInformation;}
private void pdfbox_f803_1(X509Certificate certificate, CertSignatureInformation certInfo, int maxDepth) throws IOException, CertificateProccessingException
{    certInfo.certificate = certificate;            byte[] authorityExtensionValue = certificate.getExtensionValue(Extension.authorityInfoAccess.getId());    if (authorityExtensionValue != null) {        CertInformationHelper.getAuthorityInfoExtensionValue(authorityExtensionValue, certInfo);    }    if (certInfo.issuerUrl != null) {        getAlternativeIssuerCertificate(certInfo, maxDepth);    }        byte[] crlExtensionValue = certificate.getExtensionValue(Extension.cRLDistributionPoints.getId());    if (crlExtensionValue != null) {        certInfo.crlUrl = CertInformationHelper.getCrlUrlFromExtensionValue(crlExtensionValue);    }    try {        certInfo.isSelfSigned = CertificateVerifier.isSelfSigned(certificate);    } catch (GeneralSecurityException ex) {        throw new CertificateProccessingException(ex);    }    if (maxDepth <= 0 || certInfo.isSelfSigned) {        return;    }    for (X509Certificate issuer : certificateSet) {        if (certificate.getIssuerX500Principal().equals(issuer.getSubjectX500Principal())) {            try {                certificate.verify(issuer.getPublicKey(), SecurityProvider.getProvider().getName());            } catch (CertificateException | NoSuchAlgorithmException | InvalidKeyException | SignatureException | NoSuchProviderException ex) {                throw new CertificateProccessingException(ex);            }                        certInfo.issuerCertificate = issuer;            certInfo.certChain = new CertSignatureInformation();            traverseChain(issuer, certInfo.certChain, maxDepth - 1);            break;        }    }    if (certInfo.issuerCertificate == null) {        throw new IOException("No Issuer Certificate found for Cert: " + certificate.getSubjectX500Principal());    }}
private void pdfbox_f804_1(CertSignatureInformation certInfo, int maxDepth) throws CertificateProccessingException
{        try {        URL certUrl = new URL(certInfo.issuerUrl);        CertificateFactory certFactory = CertificateFactory.getInstance("X.509");        try (InputStream in = certUrl.openStream()) {            X509Certificate altIssuerCert = (X509Certificate) certFactory.generateCertificate(in);            certificateSet.add(altIssuerCert);            certInfo.alternativeCertChain = new CertSignatureInformation();            traverseChain(altIssuerCert, certInfo.alternativeCertChain, maxDepth - 1);        }    } catch (IOException | CertificateException e) {            }}
private X509Certificate pdfbox_f805_1(X509CertificateHolder certificateHolder) throws CertificateProccessingException
{    try {        return certConverter.getCertificate(certificateHolder);    } catch (CertificateException e) {                throw new CertificateProccessingException(e);    }}
private void pdfbox_f806_1(Collection<X509CertificateHolder> certHolders)
{    for (X509CertificateHolder certificateHolder : certHolders) {        try {            X509Certificate certificate = getCertFromHolder(certificateHolder);            certificateSet.add(certificate);        } catch (CertificateProccessingException e) {                    }    }}
public void pdfbox_f807_0(X509CertificateHolder[] certHolders) throws CertificateProccessingException
{    addAllCerts(Arrays.asList(certHolders));}
 CertSignatureInformation pdfbox_f808_0(X509Certificate certificate) throws CertificateProccessingException
{    try {        CertSignatureInformation certSignatureInformation = new CertSignatureInformation();        traverseChain(certificate, certSignatureInformation, MAX_CERTIFICATE_CHAIN_DEPTH);        return certSignatureInformation;    } catch (IOException ex) {        throw new CertificateProccessingException(ex);    }}
public Set<X509Certificate> pdfbox_f809_0()
{    return certificateSet;}
public String pdfbox_f810_0()
{    return ocspUrl;}
public void pdfbox_f811_0(String ocspUrl)
{    this.ocspUrl = ocspUrl;}
public void pdfbox_f812_0(String issuerUrl)
{    this.issuerUrl = issuerUrl;}
public String pdfbox_f813_0()
{    return crlUrl;}
public X509Certificate pdfbox_f814_0()
{    return certificate;}
public boolean pdfbox_f815_0()
{    return isSelfSigned;}
public X509Certificate pdfbox_f816_0()
{    return issuerCertificate;}
public String pdfbox_f817_0()
{    return signatureHash;}
public CertSignatureInformation pdfbox_f818_0()
{    return certChain;}
public CertSignatureInformation pdfbox_f819_0()
{    return tsaCerts;}
public CertSignatureInformation pdfbox_f820_0()
{    return alternativeCertChain;}
protected static String pdfbox_f821_1(byte[] content)
{    try {        MessageDigest md = MessageDigest.getInstance("SHA-1");        return Hex.getString(md.digest(content));    } catch (NoSuchAlgorithmException e) {            }    return null;}
protected static void pdfbox_f822_0(byte[] extensionValue, CertSignatureInformation certInfo) throws IOException
{    ASN1Sequence asn1Seq = (ASN1Sequence) JcaX509ExtensionUtils.parseExtensionValue(extensionValue);    Enumeration<?> objects = asn1Seq.getObjects();    while (objects.hasMoreElements()) {                ASN1Sequence obj = (ASN1Sequence) objects.nextElement();        ASN1Encodable oid = obj.getObjectAt(0);                ASN1TaggedObject location = (ASN1TaggedObject) obj.getObjectAt(1);        if (X509ObjectIdentifiers.id_ad_ocsp.equals(oid) && location.getTagNo() == GeneralName.uniformResourceIdentifier) {            ASN1OctetString url = (ASN1OctetString) location.getObject();            certInfo.setOcspUrl(new String(url.getOctets()));        } else if (X509ObjectIdentifiers.id_ad_caIssuers.equals(oid)) {            ASN1OctetString uri = (ASN1OctetString) location.getObject();            certInfo.setIssuerUrl(new String(uri.getOctets()));        }    }}
protected static String pdfbox_f823_0(byte[] extensionValue) throws IOException
{    ASN1Sequence asn1Seq = (ASN1Sequence) JcaX509ExtensionUtils.parseExtensionValue(extensionValue);    Enumeration<?> objects = asn1Seq.getObjects();    while (objects.hasMoreElements()) {        DLSequence obj = (DLSequence) objects.nextElement();        ASN1TaggedObject taggedObject = (ASN1TaggedObject) obj.getObjectAt(0);        taggedObject = (ASN1TaggedObject) taggedObject.getObject();                taggedObject = (ASN1TaggedObject) taggedObject.getObject();        if (!(taggedObject.getObject() instanceof ASN1OctetString)) {                        continue;        }        ASN1OctetString uri = (ASN1OctetString) taggedObject.getObject();        String url = new String(uri.getOctets());                if (url.startsWith("http")) {            return url;        }    }    return null;}
public byte[] pdfbox_f824_0(InputStream content) throws IOException
{    return tsaClient.getTimeStampToken(IOUtils.toByteArray(content));}
public CMSSignedData pdfbox_f825_0(CMSSignedData signedData) throws IOException
{    SignerInformationStore signerStore = signedData.getSignerInfos();    List<SignerInformation> newSigners = new ArrayList<>();    for (SignerInformation signer : signerStore.getSigners()) {                newSigners.add(signTimeStamp(signer));    }        return CMSSignedData.replaceSigners(signedData, new SignerInformationStore(newSigners));}
private SignerInformation pdfbox_f826_0(SignerInformation signer) throws IOException
{    AttributeTable unsignedAttributes = signer.getUnsignedAttributes();    ASN1EncodableVector vector = new ASN1EncodableVector();    if (unsignedAttributes != null) {        vector = unsignedAttributes.toASN1EncodableVector();    }    byte[] token = tsaClient.getTimeStampToken(signer.getSignature());    ASN1ObjectIdentifier oid = PKCSObjectIdentifiers.id_aa_signatureTimeStampToken;    ASN1Encodable signatureTimeStamp = new Attribute(oid, new DERSet(ASN1Primitive.fromByteArray(token)));    vector.add(signatureTimeStamp);    Attributes signedAttributes = new Attributes(vector);        return SignerInformation.replaceUnsignedAttributes(signer, new AttributeTable(signedAttributes));}
public static void pdfbox_f827_0(String[] args) throws IOException
{    if (args.length != 3) {        usage();    } else {        File srcFile = new File(args[0]);        File dstFile = new File(args[1]);        String text = args[2];        try (PDDocument doc = PDDocument.load(srcFile)) {            for (PDPage page : doc.getPages()) {                PDFont font = PDType1Font.HELVETICA;                addWatermarkText(doc, page, font, text);            }            doc.save(dstFile);        }    }}
private static void pdfbox_f828_0(PDDocument doc, PDPage page, PDFont font, String text) throws IOException
{    try (PDPageContentStream cs = new PDPageContentStream(doc, page, PDPageContentStream.AppendMode.APPEND, true, true)) {                float fontHeight = 100;        float width = page.getMediaBox().getWidth();        float height = page.getMediaBox().getHeight();        float stringWidth = font.getStringWidth(text) / 1000 * fontHeight;        float diagonalLength = (float) Math.sqrt(width * width + height * height);        float angle = (float) Math.atan2(height, width);                float x = (diagonalLength - stringWidth) / 2;                float y = -fontHeight / 4;        cs.transform(Matrix.getRotateInstance(angle, 0, 0));        cs.setFont(font, fontHeight);                PDExtendedGraphicsState gs = new PDExtendedGraphicsState();        gs.setNonStrokingAlphaConstant(0.2f);        gs.setStrokingAlphaConstant(0.2f);        gs.setBlendMode(BlendMode.MULTIPLY);        gs.setLineWidth(3f);        cs.setGraphicsStateParameters(gs);                        cs.setNonStrokingColor(255, 0, 0);        cs.setStrokingColor(255, 0, 0);        cs.beginText();        cs.newLineAtOffset(x, y);        cs.showText(text);        cs.endText();    }}
private static void pdfbox_f829_0()
{    System.err.println("Usage: java " + AddWatermarkText.class.getName() + " <input-pdf> <output-pdf> <short text>");}
public static void pdfbox_f830_0(String[] args) throws IOException
{    if (args.length != 1) {        usage();    } else {        try (PDDocument document = PDDocument.load(new File(args[0]))) {            DrawPrintTextLocations stripper = new DrawPrintTextLocations(document, args[0]);            stripper.setSortByPosition(true);            for (int page = 0; page < document.getNumberOfPages(); ++page) {                stripper.stripPage(page);            }        }    }}
protected void pdfbox_f831_0(Matrix textRenderingMatrix, PDFont font, int code, String unicode, Vector displacement) throws IOException
{    super.showGlyph(textRenderingMatrix, font, code, unicode, displacement);                    Shape cyanShape = calculateGlyphBounds(textRenderingMatrix, font, code);    if (cyanShape != null) {        cyanShape = flipAT.createTransformedShape(cyanShape);        cyanShape = rotateAT.createTransformedShape(cyanShape);        cyanShape = transAT.createTransformedShape(cyanShape);        g2d.setColor(Color.CYAN);        g2d.draw(cyanShape);    }}
private Shape pdfbox_f832_0(Matrix textRenderingMatrix, PDFont font, int code) throws IOException
{    GeneralPath path = null;    AffineTransform at = textRenderingMatrix.createAffineTransform();    at.concatenate(font.getFontMatrix().createAffineTransform());    if (font instanceof PDType3Font) {                                PDType3Font t3Font = (PDType3Font) font;        PDType3CharProc charProc = t3Font.getCharProc(code);        if (charProc != null) {            BoundingBox fontBBox = t3Font.getBoundingBox();            PDRectangle glyphBBox = charProc.getGlyphBBox();            if (glyphBBox != null) {                                glyphBBox.setLowerLeftX(Math.max(fontBBox.getLowerLeftX(), glyphBBox.getLowerLeftX()));                glyphBBox.setLowerLeftY(Math.max(fontBBox.getLowerLeftY(), glyphBBox.getLowerLeftY()));                glyphBBox.setUpperRightX(Math.min(fontBBox.getUpperRightX(), glyphBBox.getUpperRightX()));                glyphBBox.setUpperRightY(Math.min(fontBBox.getUpperRightY(), glyphBBox.getUpperRightY()));                path = glyphBBox.toGeneralPath();            }        }    } else if (font instanceof PDVectorFont) {        PDVectorFont vectorFont = (PDVectorFont) font;        path = vectorFont.getPath(code);        if (font instanceof PDTrueTypeFont) {            PDTrueTypeFont ttFont = (PDTrueTypeFont) font;            int unitsPerEm = ttFont.getTrueTypeFont().getHeader().getUnitsPerEm();            at.scale(1000d / unitsPerEm, 1000d / unitsPerEm);        }        if (font instanceof PDType0Font) {            PDType0Font t0font = (PDType0Font) font;            if (t0font.getDescendantFont() instanceof PDCIDFontType2) {                int unitsPerEm = ((PDCIDFontType2) t0font.getDescendantFont()).getTrueTypeFont().getHeader().getUnitsPerEm();                at.scale(1000d / unitsPerEm, 1000d / unitsPerEm);            }        }    } else {                System.out.println("Unknown font class: " + font.getClass());    }    if (path == null) {        return null;    }    return at.createTransformedShape(path.getBounds2D());}
private void pdfbox_f833_0(int page) throws IOException
{    PDFRenderer pdfRenderer = new PDFRenderer(document);    image = pdfRenderer.renderImage(page, SCALE);    PDPage pdPage = document.getPage(page);    PDRectangle cropBox = pdPage.getCropBox();        flipAT = new AffineTransform();    flipAT.translate(0, pdPage.getBBox().getHeight());    flipAT.scale(1, -1);        rotateAT = new AffineTransform();    int rotation = pdPage.getRotation();    if (rotation != 0) {        PDRectangle mediaBox = pdPage.getMediaBox();        switch(rotation) {            case 90:                rotateAT.translate(mediaBox.getHeight(), 0);                break;            case 270:                rotateAT.translate(0, mediaBox.getWidth());                break;            case 180:                rotateAT.translate(mediaBox.getWidth(), mediaBox.getHeight());                break;            default:                break;        }        rotateAT.rotate(Math.toRadians(rotation));    }        transAT = AffineTransform.getTranslateInstance(-cropBox.getLowerLeftX(), cropBox.getLowerLeftY());    g2d = image.createGraphics();    g2d.setStroke(new BasicStroke(0.1f));    g2d.scale(SCALE, SCALE);    setStartPage(page + 1);    setEndPage(page + 1);    Writer dummy = new OutputStreamWriter(new ByteArrayOutputStream());    writeText(document, dummy);        g2d.setStroke(new BasicStroke(0.4f));    List<PDThreadBead> pageArticles = pdPage.getThreadBeads();    for (PDThreadBead bead : pageArticles) {        if (bead == null) {            continue;        }        PDRectangle r = bead.getRectangle();        Shape s = r.toGeneralPath().createTransformedShape(transAT);        s = flipAT.createTransformedShape(s);        s = rotateAT.createTransformedShape(s);        g2d.setColor(Color.green);        g2d.draw(s);    }    g2d.dispose();    String imageFilename = filename;    int pt = imageFilename.lastIndexOf('.');    imageFilename = imageFilename.substring(0, pt) + "-marked-" + (page + 1) + ".png";    ImageIO.write(image, "png", new File(imageFilename));}
protected void pdfbox_f834_0(String string, List<TextPosition> textPositions) throws IOException
{    for (TextPosition text : textPositions) {        System.out.println("String[" + text.getXDirAdj() + "," + text.getYDirAdj() + " fs=" + text.getFontSize() + " xscale=" + text.getXScale() + " height=" + text.getHeightDir() + " space=" + text.getWidthOfSpace() + " width=" + text.getWidthDirAdj() + "]" + text.getUnicode());                        AffineTransform at = text.getTextMatrix().createAffineTransform();                                Rectangle2D.Float rect = new Rectangle2D.Float(0, 0, text.getWidthDirAdj() / text.getTextMatrix().getScalingFactorX(), text.getHeightDir() / text.getTextMatrix().getScalingFactorY());        Shape s = at.createTransformedShape(rect);        s = flipAT.createTransformedShape(s);        s = rotateAT.createTransformedShape(s);        g2d.setColor(Color.red);        g2d.draw(s);                                PDFont font = text.getFont();        BoundingBox bbox = font.getBoundingBox();                        float xadvance = font.getWidth(text.getCharacterCodes()[0]);        rect = new Rectangle2D.Float(0, bbox.getLowerLeftY(), xadvance, bbox.getHeight());        if (font instanceof PDType3Font) {                        at.concatenate(font.getFontMatrix().createAffineTransform());        } else {                        at.scale(1 / 1000f, 1 / 1000f);        }        s = at.createTransformedShape(rect);        s = flipAT.createTransformedShape(s);        s = rotateAT.createTransformedShape(s);        g2d.setColor(Color.blue);        g2d.draw(s);    }}
private static void pdfbox_f835_0()
{    System.err.println("Usage: java " + DrawPrintTextLocations.class.getName() + " <input-pdf>");}
public static void pdfbox_f836_0(String[] args) throws IOException
{    if (args.length != 1) {        usage();    } else {        try (PDDocument document = PDDocument.load(new File(args[0]))) {            PDFTextStripperByArea stripper = new PDFTextStripperByArea();            stripper.setSortByPosition(true);            Rectangle rect = new Rectangle(10, 280, 275, 60);            stripper.addRegion("class1", rect);            PDPage firstPage = document.getPage(0);            stripper.extractRegions(firstPage);            System.out.println("Text in the area:" + rect);            System.out.println(stripper.getTextForRegion("class1"));        }    }}
private static void pdfbox_f837_0()
{    System.err.println("Usage: java " + ExtractTextByArea.class.getName() + " <input-pdf>");}
public static void pdfbox_f838_0(String[] args) throws IOException
{    if (args.length != 1) {        usage();    }    try (PDDocument document = PDDocument.load(new File(args[0]))) {        AccessPermission ap = document.getCurrentAccessPermission();        if (!ap.canExtractContent()) {            throw new IOException("You do not have permission to extract text");        }        PDFTextStripper stripper = new PDFTextStripper();                                stripper.setSortByPosition(true);        for (int p = 1; p <= document.getNumberOfPages(); ++p) {                        stripper.setStartPage(p);            stripper.setEndPage(p);                        String text = stripper.getText(document);                        String pageStr = String.format("page %d:", p);            System.out.println(pageStr);            for (int i = 0; i < pageStr.length(); ++i) {                System.out.print("-");            }            System.out.println();            System.out.println(text.trim());            System.out.println();                                        }    }}
private static void pdfbox_f839_0()
{    System.err.println("Usage: java " + ExtractTextSimple.class.getName() + " <input-pdf>");    System.exit(-1);}
public void pdfbox_f840_0(PDDocument pdDocument, String highlightWord, Writer xmlOutput) throws IOException
{    generateXMLHighlight(pdDocument, new String[] { highlightWord }, xmlOutput);}
public void pdfbox_f841_0(PDDocument pdDocument, String[] sWords, Writer xmlOutput) throws IOException
{    highlighterOutput = xmlOutput;    searchedWords = sWords;    highlighterOutput.write("<XML>\n<Body units=characters " + " version=2>\n<Highlight>\n");    textOS = new ByteArrayOutputStream();    textWriter = new OutputStreamWriter(textOS, ENCODING);    writeText(pdDocument, textWriter);    highlighterOutput.write("</Highlight>\n</Body>\n</XML>");    highlighterOutput.flush();}
protected void pdfbox_f842_0(PDPage pdPage) throws IOException
{    textWriter.flush();    String page = new String(textOS.toByteArray(), ENCODING);    textOS.reset();        if (page.indexOf('a') != -1) {        page = page.replaceAll("a[0-9]{1,3}", ".");    }    for (String searchedWord : searchedWords) {        Pattern pattern = Pattern.compile(searchedWord, Pattern.CASE_INSENSITIVE);        Matcher matcher = pattern.matcher(page);        while (matcher.find()) {            int begin = matcher.start();            int end = matcher.end();            highlighterOutput.write("    <loc " + "pg=" + (getCurrentPageNo() - 1) + " pos=" + begin + " len=" + (end - begin) + ">\n");        }    }}
public static void pdfbox_f843_0(String[] args) throws IOException
{    PDFHighlighter xmlExtractor = new PDFHighlighter();    if (args.length < 2) {        usage();    }    String[] highlightStrings = new String[args.length - 1];    System.arraycopy(args, 1, highlightStrings, 0, highlightStrings.length);    try (PDDocument doc = PDDocument.load(new File(args[0]))) {        xmlExtractor.generateXMLHighlight(doc, highlightStrings, new OutputStreamWriter(System.out));    }}
private static void pdfbox_f844_0()
{    System.err.println("usage: java " + PDFHighlighter.class.getName() + " <pdf file> word1 word2 word3 ...");    System.exit(1);}
public InputStream pdfbox_f845_1(final List<InputStream> sources) throws IOException
{    String title = "My title";    String creator = "Alexander Kriegisch";    String subject = "Subject with umlauts ÄÖÜ";    ByteArrayOutputStream mergedPDFOutputStream = null;    COSStream cosStream = null;    try {                        mergedPDFOutputStream = new ByteArrayOutputStream();        cosStream = new COSStream();        PDFMergerUtility pdfMerger = createPDFMergerUtility(sources, mergedPDFOutputStream);                PDDocumentInformation pdfDocumentInfo = createPDFDocumentInfo(title, creator, subject);        PDMetadata xmpMetadata = createXMPMetadata(cosStream, title, creator, subject);        pdfMerger.setDestinationDocumentInformation(pdfDocumentInfo);        pdfMerger.setDestinationMetadata(xmpMetadata);                pdfMerger.mergeDocuments(MemoryUsageSetting.setupMainMemoryOnly());                return new ByteArrayInputStream(mergedPDFOutputStream.toByteArray());    } catch (BadFieldValueException | TransformerException e) {        throw new IOException("PDF merge problem", e);    } finally {        sources.forEach(IOUtils::closeQuietly);        IOUtils.closeQuietly(cosStream);        IOUtils.closeQuietly(mergedPDFOutputStream);    }}
private PDFMergerUtility pdfbox_f846_1(List<InputStream> sources, ByteArrayOutputStream mergedPDFOutputStream)
{        PDFMergerUtility pdfMerger = new PDFMergerUtility();    pdfMerger.addSources(sources);    pdfMerger.setDestinationStream(mergedPDFOutputStream);    return pdfMerger;}
private PDDocumentInformation pdfbox_f847_1(String title, String creator, String subject)
{        PDDocumentInformation documentInformation = new PDDocumentInformation();    documentInformation.setTitle(title);    documentInformation.setCreator(creator);    documentInformation.setSubject(subject);    return documentInformation;}
private PDMetadata pdfbox_f848_1(COSStream cosStream, String title, String creator, String subject) throws BadFieldValueException, TransformerException, IOException
{        XMPMetadata xmpMetadata = XMPMetadata.createXMPMetadata();        PDFAIdentificationSchema pdfaSchema = xmpMetadata.createAndAddPFAIdentificationSchema();    pdfaSchema.setPart(1);    pdfaSchema.setConformance("B");        DublinCoreSchema dublinCoreSchema = xmpMetadata.createAndAddDublinCoreSchema();    dublinCoreSchema.setTitle(title);    dublinCoreSchema.addCreator(creator);    dublinCoreSchema.setDescription(subject);        XMPBasicSchema basicSchema = xmpMetadata.createAndAddXMPBasicSchema();    Calendar creationDate = Calendar.getInstance();    basicSchema.setCreateDate(creationDate);    basicSchema.setModifyDate(creationDate);    basicSchema.setMetadataDate(creationDate);    basicSchema.setCreatorTool(creator);        try (ByteArrayOutputStream xmpOutputStream = new ByteArrayOutputStream();        OutputStream cosXMPStream = cosStream.createOutputStream()) {        new XmpSerializer().serialize(xmpMetadata, xmpOutputStream, true);        cosXMPStream.write(xmpOutputStream.toByteArray());        return new PDMetadata(cosStream);    }}
public static void pdfbox_f849_0(String[] args) throws IOException
{    if (args.length != 1) {        usage();    } else {        try (PDDocument document = PDDocument.load(new File(args[0]))) {            PrintImageLocations printer = new PrintImageLocations();            int pageNum = 0;            for (PDPage page : document.getPages()) {                pageNum++;                System.out.println("Processing page: " + pageNum);                printer.processPage(page);            }        }    }}
protected void pdfbox_f850_0(Operator operator, List<COSBase> operands) throws IOException
{    String operation = operator.getName();    if (OperatorName.DRAW_OBJECT.equals(operation)) {        COSName objectName = (COSName) operands.get(0);        PDXObject xobject = getResources().getXObject(objectName);        if (xobject instanceof PDImageXObject) {            PDImageXObject image = (PDImageXObject) xobject;            int imageWidth = image.getWidth();            int imageHeight = image.getHeight();            System.out.println("*******************************************************************");            System.out.println("Found image [" + objectName.getName() + "]");            Matrix ctmNew = getGraphicsState().getCurrentTransformationMatrix();            float imageXScale = ctmNew.getScalingFactorX();            float imageYScale = ctmNew.getScalingFactorY();                        System.out.println("position in PDF = " + ctmNew.getTranslateX() + ", " + ctmNew.getTranslateY() + " in user space units");                        System.out.println("raw image size  = " + imageWidth + ", " + imageHeight + " in pixels");                        System.out.println("displayed size  = " + imageXScale + ", " + imageYScale + " in user space units");                        imageXScale /= 72;            imageYScale /= 72;            System.out.println("displayed size  = " + imageXScale + ", " + imageYScale + " in inches at 72 dpi rendering");                        imageXScale *= 25.4;            imageYScale *= 25.4;            System.out.println("displayed size  = " + imageXScale + ", " + imageYScale + " in millimeters at 72 dpi rendering");            System.out.println();        } else if (xobject instanceof PDFormXObject) {            PDFormXObject form = (PDFormXObject) xobject;            showForm(form);        }    } else {        super.processOperator(operator, operands);    }}
private static void pdfbox_f851_0()
{    System.err.println("Usage: java " + PrintImageLocations.class.getName() + " <input-pdf>");}
public static void pdfbox_f852_0(String[] args) throws IOException
{    if (args.length != 1) {        usage();    } else {        try (PDDocument document = PDDocument.load(new File(args[0]))) {            PDFTextStripper stripper = new PrintTextColors();            stripper.setSortByPosition(true);            stripper.setStartPage(0);            stripper.setEndPage(document.getNumberOfPages());            Writer dummy = new OutputStreamWriter(new ByteArrayOutputStream());            stripper.writeText(document, dummy);        }    }}
protected void pdfbox_f853_0(TextPosition text)
{    super.processTextPosition(text);    PDColor strokingColor = getGraphicsState().getStrokingColor();    PDColor nonStrokingColor = getGraphicsState().getNonStrokingColor();    String unicode = text.getUnicode();    RenderingMode renderingMode = getGraphicsState().getTextState().getRenderingMode();    System.out.println("Unicode:            " + unicode);    System.out.println("Rendering mode:     " + renderingMode);    System.out.println("Stroking color:     " + strokingColor);    System.out.println("Non-Stroking color: " + nonStrokingColor);    System.out.println("Non-Stroking color: " + nonStrokingColor);    System.out.println();}
private static void pdfbox_f854_0()
{    System.err.println("Usage: java " + PrintTextColors.class.getName() + " <input-pdf>");}
public static void pdfbox_f855_0(String[] args) throws IOException
{    if (args.length != 1) {        usage();    } else {        try (PDDocument document = PDDocument.load(new File(args[0]))) {            PDFTextStripper stripper = new PrintTextLocations();            stripper.setSortByPosition(true);            stripper.setStartPage(0);            stripper.setEndPage(document.getNumberOfPages());            Writer dummy = new OutputStreamWriter(new ByteArrayOutputStream());            stripper.writeText(document, dummy);        }    }}
protected void pdfbox_f856_0(String string, List<TextPosition> textPositions) throws IOException
{    for (TextPosition text : textPositions) {        System.out.println("String[" + text.getXDirAdj() + "," + text.getYDirAdj() + " fs=" + text.getFontSize() + " xscale=" + text.getXScale() + " height=" + text.getHeightDir() + " space=" + text.getWidthOfSpace() + " width=" + text.getWidthDirAdj() + "]" + text.getUnicode());    }}
private static void pdfbox_f857_0()
{    System.err.println("Usage: java " + PrintTextLocations.class.getName() + " <input-pdf>");}
public static void pdfbox_f858_0(String[] args) throws IOException
{    if (args.length != 2) {        usage();    } else {        try (PDDocument document = PDDocument.load(new File(args[0]))) {            if (document.isEncrypted()) {                System.err.println("Error: Encrypted documents are not supported for this example.");                System.exit(1);            }            for (PDPage page : document.getPages()) {                List<Object> newTokens = createTokensWithoutText(page);                PDStream newContents = new PDStream(document);                writeTokensToStream(newContents, newTokens);                page.setContents(newContents);                processResources(page.getResources());            }            document.save(args[1]);        }    }}
private static void pdfbox_f859_0(PDResources resources) throws IOException
{    for (COSName name : resources.getXObjectNames()) {        PDXObject xobject = resources.getXObject(name);        if (xobject instanceof PDFormXObject) {            PDFormXObject formXObject = (PDFormXObject) xobject;            writeTokensToStream(formXObject.getContentStream(), createTokensWithoutText(formXObject));            processResources(formXObject.getResources());        }    }    for (COSName name : resources.getPatternNames()) {        PDAbstractPattern pattern = resources.getPattern(name);        if (pattern instanceof PDTilingPattern) {            PDTilingPattern tilingPattern = (PDTilingPattern) pattern;            writeTokensToStream(tilingPattern.getContentStream(), createTokensWithoutText(tilingPattern));            processResources(tilingPattern.getResources());        }    }}
private static void pdfbox_f860_0(PDStream newContents, List<Object> newTokens) throws IOException
{    try (OutputStream out = newContents.createOutputStream(COSName.FLATE_DECODE)) {        ContentStreamWriter writer = new ContentStreamWriter(out);        writer.writeTokens(newTokens);    }}
private static List<Object> pdfbox_f861_0(PDContentStream contentStream) throws IOException
{    PDFStreamParser parser = new PDFStreamParser(contentStream.getContents());    Object token = parser.parseNextToken();    List<Object> newTokens = new ArrayList<>();    while (token != null) {        if (token instanceof Operator) {            Operator op = (Operator) token;            String opName = op.getName();            if (OperatorName.SHOW_TEXT_ADJUSTED.equals(opName) || OperatorName.SHOW_TEXT.equals(opName) || OperatorName.SHOW_TEXT_LINE.equals(opName)) {                                newTokens.remove(newTokens.size() - 1);                token = parser.parseNextToken();                continue;            } else if (OperatorName.SHOW_TEXT_LINE_AND_SPACE.equals(opName)) {                                newTokens.remove(newTokens.size() - 1);                newTokens.remove(newTokens.size() - 1);                newTokens.remove(newTokens.size() - 1);                token = parser.parseNextToken();                continue;            }        }        newTokens.add(token);        token = parser.parseNextToken();    }    return newTokens;}
private static void pdfbox_f862_0()
{    System.err.println("Usage: java " + RemoveAllText.class.getName() + " <input-pdf> <output-pdf>");}
protected void pdfbox_f863_0() throws Exception
{    super.setUp();    new File(outDir).mkdirs();}
public void pdfbox_f864_0() throws Exception
{    System.out.println("testCreatePDFA");    String pdfaFilename = outDir + "/PDFA.pdf";    String message = "The quick brown fox jumps over the lazy dog äöüÄÖÜß @°^²³ {[]}";    String dir = "../pdfbox/src/main/resources/org/apache/pdfbox/resources/ttf/";    String fontfile = dir + "LiberationSans-Regular.ttf";    CreatePDFA.main(new String[] { pdfaFilename, message, fontfile });    PreflightParser preflightParser = new PreflightParser(new File(pdfaFilename));    preflightParser.parse();    try (PreflightDocument preflightDocument = preflightParser.getPreflightDocument()) {        preflightDocument.validate();        ValidationResult result = preflightDocument.getResult();        for (ValidationError ve : result.getErrorsList()) {            System.err.println(ve.getErrorCode() + ": " + ve.getDetails());        }        assertTrue("PDF file created with CreatePDFA is not valid PDF/A-1b", result.isValid());    }        try (PDDocument document = PDDocument.load(new File(pdfaFilename))) {        PDDocumentCatalog catalog = document.getDocumentCatalog();        PDMetadata meta = catalog.getMetadata();        DomXmpParser xmpParser = new DomXmpParser();        XMPMetadata metadata = xmpParser.parse(meta.createInputStream());        DublinCoreSchema dc = metadata.getDublinCoreSchema();        assertEquals(pdfaFilename, dc.getTitle());    }}
public static Collection pdfbox_f865_0()
{    return Arrays.asList(false, true);}
public static void pdfbox_f866_0() throws Exception
{    new File("target/test-output").mkdirs();    KeyStore keystore = KeyStore.getInstance("PKCS12");    keystore.load(new FileInputStream(keystorePath), password.toCharArray());    certificate = keystore.getCertificateChain(keystore.aliases().nextElement())[0];}
public void pdfbox_f867_0() throws IOException, CMSException, OperatorCreationException, GeneralSecurityException
{        KeyStore keystore = KeyStore.getInstance("PKCS12");    keystore.load(new FileInputStream(keystorePath), password.toCharArray());        CreateSignature signing = new CreateSignature(keystore, password.toCharArray());    signing.setExternalSigning(externallySign);    final String fileName = getOutputFileName("signed{0}.pdf");    signing.signDetached(new File(inDir + "sign_me.pdf"), new File(outDir + fileName));    checkSignature(new File(inDir, "sign_me.pdf"), new File(outDir, fileName));}
public void pdfbox_f868_0() throws IOException, CMSException, OperatorCreationException, GeneralSecurityException
{    byte[] content;        try (InputStream input = new FileInputStream(inDir + "tsa_response.asn1")) {        content = IOUtils.toByteArray(input);    }        MockHttpServer mockServer = new MockHttpServer(15371);    mockServer.startServer();    String tsaUrl = "http://localhost:" + mockServer.getServerPort() + "/";    MockHttpServer.MockHttpServerResponse response = new MockHttpServer.MockHttpServerResponse();    response.setMockResponseContent(content);    response.setMockResponseContentType("application/timestamp-reply");    response.setMockResponseCode(200);    mockServer.setMockHttpServerResponses(response);        KeyStore keystore = KeyStore.getInstance("PKCS12");    keystore.load(new FileInputStream(keystorePath), password.toCharArray());        try {        String inPath = inDir + "sign_me_tsa.pdf";        String outPath = outDir + getOutputFileName("signed{0}_tsa.pdf");        CreateSignature signing = new CreateSignature(keystore, password.toCharArray());        signing.setExternalSigning(externallySign);        signing.signDetached(new File(inPath), new File(outPath), tsaUrl);    } catch (IOException e) {        Assert.assertTrue(e.getCause() instanceof TSPValidationException);    }}
public void pdfbox_f869_0() throws IOException, CMSException, OperatorCreationException, GeneralSecurityException
{        KeyStore keystore = KeyStore.getInstance("PKCS12");    keystore.load(new FileInputStream(keystorePath), password.toCharArray());        String inPath = inDir + "sign_me.pdf";    File destFile;    try (FileInputStream fis = new FileInputStream(jpegPath)) {        CreateVisibleSignature signing = new CreateVisibleSignature(keystore, password.toCharArray());        signing.setVisibleSignDesigner(inPath, 0, 0, -50, fis, 1);        signing.setVisibleSignatureProperties("name", "location", "Security", 0, 1, true);        signing.setExternalSigning(externallySign);        destFile = new File(outDir + getOutputFileName("signed{0}_visible.pdf"));        signing.signPDF(new File(inPath), destFile, null);    }    checkSignature(new File(inPath), destFile);}
public void pdfbox_f870_0() throws IOException, NoSuchAlgorithmException, KeyStoreException, CertificateException, UnrecoverableKeyException, CMSException, OperatorCreationException, GeneralSecurityException
{    String filename = outDir + "EmptySignatureForm.pdf";    String filenameSigned1 = outDir + "EmptySignatureForm-signed1.pdf";    String filenameSigned2 = outDir + "EmptySignatureForm-signed2.pdf";    if (!externallySign) {        return;    }        KeyStore keystore = KeyStore.getInstance("PKCS12");    keystore.load(new FileInputStream(keystorePath), password.toCharArray());        CreateEmptySignatureForm.main(new String[] { filename });        CreateSignature signing1 = new CreateSignature(keystore, password.toCharArray());    signing1.setExternalSigning(false);    signing1.signDetached(new File(filename), new File(filenameSigned1));    checkSignature(new File(filename), new File(filenameSigned1));    try (PDDocument doc1 = PDDocument.load(new File(filenameSigned1))) {        List<PDSignature> signatureDictionaries = doc1.getSignatureDictionaries();        Assert.assertEquals(1, signatureDictionaries.size());    }        try (FileInputStream fis = new FileInputStream(jpegPath)) {        CreateVisibleSignature signing2 = new CreateVisibleSignature(keystore, password.toCharArray());        signing2.setVisibleSignDesigner(filenameSigned1, 0, 0, -50, fis, 1);        signing2.setVisibleSignatureProperties("name", "location", "Security", 0, 1, true);        signing2.setExternalSigning(externallySign);        signing2.signPDF(new File(filenameSigned1), new File(filenameSigned2), null, "Signature1");    }    checkSignature(new File(filenameSigned1), new File(filenameSigned2));    try (PDDocument doc2 = PDDocument.load(new File(filenameSigned2))) {        List<PDSignature> signatureDictionaries = doc2.getSignatureDictionaries();        Assert.assertEquals(2, signatureDictionaries.size());    }}
private String pdfbox_f871_0(String filePattern)
{    return MessageFormat.format(filePattern, (externallySign ? "_ext" : ""));}
private void pdfbox_f872_0(File origFile, File signedFile) throws IOException, CMSException, OperatorCreationException, GeneralSecurityException
{    String origPageKey;    try (PDDocument document = PDDocument.load(origFile)) {                origPageKey = document.getDocumentCatalog().getCOSObject().getItem(COSName.PAGES).toString();    }    try (PDDocument document = PDDocument.load(signedFile)) {                Assert.assertEquals(origPageKey, document.getDocumentCatalog().getCOSObject().getItem(COSName.PAGES).toString());        List<PDSignature> signatureDictionaries = document.getSignatureDictionaries();        if (signatureDictionaries.isEmpty()) {            Assert.fail("no signature found");        }        for (PDSignature sig : document.getSignatureDictionaries()) {            COSString contents = (COSString) sig.getCOSObject().getDictionaryObject(COSName.CONTENTS);            byte[] buf = sig.getSignedContent(new FileInputStream(signedFile));                        try (FileInputStream fis = new FileInputStream(signedFile)) {                byte[] buf2 = sig.getSignedContent(IOUtils.toByteArray(fis));                Assert.assertArrayEquals(buf, buf2);            }                        try (FileInputStream fis = new FileInputStream(signedFile)) {                byte[] contents2 = sig.getContents(IOUtils.toByteArray(fis));                Assert.assertArrayEquals(contents.getBytes(), contents2);            }            byte[] contents3 = sig.getContents(new FileInputStream(signedFile));            Assert.assertArrayEquals(contents.getBytes(), contents3);                                                CMSSignedData signedData = new CMSSignedData(new CMSProcessableByteArray(buf), contents.getBytes());            Store<X509CertificateHolder> certificatesStore = signedData.getCertificates();            Collection<SignerInformation> signers = signedData.getSignerInfos().getSigners();            SignerInformation signerInformation = signers.iterator().next();            @SuppressWarnings("unchecked")            Collection matches = certificatesStore.getMatches((Selector<X509CertificateHolder>) signerInformation.getSID());            X509CertificateHolder certificateHolder = (X509CertificateHolder) matches.iterator().next();            X509Certificate certFromSignedData = new JcaX509CertificateConverter().getCertificate(certificateHolder);            Assert.assertEquals(certificate, certFromSignedData);                        if (!signerInformation.verify(new JcaSimpleSignerInfoVerifierBuilder().build(certFromSignedData))) {                Assert.fail("Signature verification failed");            }            break;        }    }}
private String pdfbox_f873_0(InputStream inputStream) throws NoSuchAlgorithmException, IOException
{    MessageDigest md = MessageDigest.getInstance("SHA-256");    return Hex.getString(md.digest(IOUtils.toByteArray(inputStream)));}
public void pdfbox_f874_0() throws IOException, NoSuchAlgorithmException
{    if (!externallySign) {        return;    }        PDDocument document = new PDDocument();    PDPage page = new PDPage();    document.addPage(page);    new PDPageContentStream(document, page).close();    ByteArrayOutputStream baos = new ByteArrayOutputStream();    document.save(baos);    document.close();    document = PDDocument.load(baos.toByteArray());        document.setDocumentId(12345L);    PDSignature signature = new PDSignature();    signature.setFilter(PDSignature.FILTER_ADOBE_PPKLITE);    signature.setSubFilter(PDSignature.SUBFILTER_ADBE_PKCS7_DETACHED);    document.addSignature(signature);    int[] reserveByteRange = signature.getByteRange();    String digestString = calculateDigestString(document.saveIncrementalForExternalSigning(new ByteArrayOutputStream()).getContent());    boolean caught = false;    try {        document.saveIncrementalForExternalSigning(new ByteArrayOutputStream());    } catch (IllegalStateException ex) {        caught = true;    }    Assert.assertTrue("IllegalStateException should have been thrown", caught);    signature.setByteRange(reserveByteRange);    Assert.assertEquals(digestString, calculateDigestString(document.saveIncrementalForExternalSigning(new ByteArrayOutputStream()).getContent()));}
public void pdfbox_f875_0() throws Exception
{    BufferedImage oldImage, expectedImage1, actualImage1, expectedImage2, actualImage2;        CreateSimpleForm.main(new String[0]);        KeyStore keystore = KeyStore.getInstance("PKCS12");    keystore.load(new FileInputStream(keystorePath), password.toCharArray());        CreateSignature signing = new CreateSignature(keystore, password.toCharArray());    signing.setExternalSigning(externallySign);    final String fileNameSigned = getOutputFileName("SimpleForm_signed{0}.pdf");    final String fileNameResaved1 = getOutputFileName("SimpleForm_signed{0}_incrementallyresaved1.pdf");    final String fileNameResaved2 = getOutputFileName("SimpleForm_signed{0}_incrementallyresaved2.pdf");    signing.signDetached(new File("target/SimpleForm.pdf"), new File(outDir + fileNameSigned));    checkSignature(new File("target/SimpleForm.pdf"), new File(outDir, fileNameSigned));    try (PDDocument doc = PDDocument.load(new File(outDir, fileNameSigned))) {        oldImage = new PDFRenderer(doc).renderImage(0);        FileOutputStream fileOutputStream = new FileOutputStream(new File(outDir, fileNameResaved1));        PDField field = doc.getDocumentCatalog().getAcroForm().getField("SampleField");        field.setValue("New Value 1");                Collection<COSName> fonts = (Collection<COSName>) field.getWidgets().get(0).getAppearance().getNormalAppearance().getAppearanceStream().getResources().getFontNames();        Assert.assertTrue(fonts.contains(COSName.HELV));        Assert.assertEquals(1, fonts.size());        expectedImage1 = new PDFRenderer(doc).renderImage(0);                Assert.assertEquals(oldImage.getWidth(), expectedImage1.getWidth());        Assert.assertEquals(oldImage.getHeight(), expectedImage1.getHeight());        Assert.assertEquals(oldImage.getType(), expectedImage1.getType());        DataBufferInt expectedData = (DataBufferInt) oldImage.getRaster().getDataBuffer();        DataBufferInt actualData = (DataBufferInt) expectedImage1.getRaster().getDataBuffer();        Assert.assertEquals(expectedData.getData().length, actualData.getData().length);        Assert.assertFalse(Arrays.equals(expectedData.getData(), actualData.getData()));                doc.getDocumentCatalog().getCOSObject().setNeedToBeUpdated(true);        doc.getDocumentCatalog().getAcroForm().getCOSObject().setNeedToBeUpdated(true);        field.getCOSObject().setNeedToBeUpdated(true);        field.getWidgets().get(0).getAppearance().getCOSObject().setNeedToBeUpdated(true);        ((COSDictionary) field.getWidgets().get(0).getAppearance().getNormalAppearance().getCOSObject()).setNeedToBeUpdated(true);        doc.saveIncremental(fileOutputStream);    }    checkSignature(new File("target/SimpleForm.pdf"), new File(outDir, fileNameResaved1));    try (PDDocument doc = PDDocument.load(new File(outDir, fileNameResaved1))) {        PDField field = doc.getDocumentCatalog().getAcroForm().getField("SampleField");        Assert.assertEquals("New Value 1", field.getValueAsString());        actualImage1 = new PDFRenderer(doc).renderImage(0);                Assert.assertEquals(expectedImage1.getWidth(), actualImage1.getWidth());        Assert.assertEquals(expectedImage1.getHeight(), actualImage1.getHeight());        Assert.assertEquals(expectedImage1.getType(), actualImage1.getType());        DataBufferInt expectedData = (DataBufferInt) expectedImage1.getRaster().getDataBuffer();        DataBufferInt actualData = (DataBufferInt) actualImage1.getRaster().getDataBuffer();        Assert.assertArrayEquals(expectedData.getData(), actualData.getData());    }}
public void pdfbox_f876_0() throws IOException
{    String documentFile = "src/test/resources/org/apache/pdfbox/examples/pdmodel/document.pdf";    String stampFile = "src/test/resources/org/apache/pdfbox/examples/pdmodel/stamp.jpg";    String outFile = "target/test-output/TestRubberStampWithImage.pdf";    new File("target/test-output").mkdirs();    String[] args = new String[] { documentFile, outFile, stampFile };    RubberStampWithImage rubberStamp = new RubberStampWithImage();    rubberStamp.doIt(args);}
public void pdfbox_f877_0(Map<String, String> headers)
{    mockResponseHeaders.clear();    mockResponseHeaders.putAll(headers);}
public void pdfbox_f878_0(String name, String value)
{    mockResponseHeaders.put(name, value);}
public Map<String, String> pdfbox_f879_0()
{    return mockResponseHeaders;}
public void pdfbox_f880_0(int responseCode)
{    this.mockResponseCode = responseCode;}
public int pdfbox_f881_0()
{    return mockResponseCode;}
public void pdfbox_f882_0(String content)
{    mockResponseContent = content.getBytes();}
public void pdfbox_f883_0(byte[] content)
{    mockResponseContent = content;}
public byte[] pdfbox_f884_0()
{    return mockResponseContent;}
public void pdfbox_f885_0(String type)
{    mockResponseContentType = type;}
public String pdfbox_f886_0()
{    return mockResponseContentType;}
public void pdfbox_f887_0(boolean echo)
{    mockResponseContentEchoRequest = echo;}
public boolean pdfbox_f888_0()
{    return mockResponseContentEchoRequest;}
public synchronized void pdfbox_f889_0()
{    if (serverStarted)        return;        start();    serverStarted = true;        waitForServerToStart();}
private synchronized void pdfbox_f890_0()
{    try {        wait(5000);    } catch (InterruptedException e) {        throw new RuntimeException(e);    }}
private synchronized void pdfbox_f891_0()
{    try {        wait(5000);    } catch (InterruptedException e) {        throw new RuntimeException(e);    }}
public void pdfbox_f892_0()
{    serverThread = Thread.currentThread();    executeLoop();}
private void pdfbox_f893_0()
{    serverStarted();    try {        while (true) {            Socket socket = serverSocket.accept();            HttpProcessor processor = new HttpProcessor(socket);            processor.run();        }    } catch (IOException e) {        if (e instanceof SocketException) {            if (!("Socket closed".equalsIgnoreCase(e.getMessage()) || "Socket is closed".equalsIgnoreCase(e.getMessage()))) {                e.printStackTrace();                throw new RuntimeException(e);            }        } else {            e.printStackTrace();            throw new RuntimeException(e);        }    } finally {                serverStopped();    }}
private synchronized void pdfbox_f894_0()
{        notifyAll();}
private synchronized void pdfbox_f895_0()
{        notifyAll();}
public synchronized void pdfbox_f896_0()
{    if (!serverStarted)        return;    try {        serverStarted = false;                serverThread.interrupt();                serverSocket.close();                waitForServerToStop();    } catch (IOException e) {        e.printStackTrace();    }}
public void pdfbox_f897_0()
{    try {        processRequest(socket);        processResponse(socket);    } catch (IOException e) {        if (e instanceof SocketException) {            if (!("socket closed".equalsIgnoreCase(e.getMessage()))) {                e.printStackTrace();                throw new RuntimeException(e);            }        } else {            e.printStackTrace();            throw new RuntimeException(e);        }    } finally {        try {            socket.shutdownOutput();            socket.close();        } catch (IOException e) {            e.printStackTrace();        }    }}
private void pdfbox_f898_0(Socket socket) throws IOException
{    requestContent.reset();    BufferedInputStream is = new BufferedInputStream(socket.getInputStream());    String requestMethodHeader = new String(readLine(is));    processRequestMethod(requestMethodHeader);    processRequestHeaders(is);    processRequestContent(is);}
private void pdfbox_f899_0(String requestMethodHeader)
{    String[] parts = requestMethodHeader.split(" ");    if (parts.length < 2) {        throw new RuntimeException("illegal http request");    }    requestMethod = parts[0];    requestUrl = parts[1];}
private void pdfbox_f900_0(InputStream is) throws IOException
{    requestHeaders.clear();    byte[] line;    while ((line = readLine(is)) != null) {        String lineStr = new String(line);                if ("".equals(lineStr.trim())) {            break;        }        addRequestHeader(lineStr);    }}
private void pdfbox_f901_0(InputStream is) throws NumberFormatException, IOException
{    if (!("PUT".equals(requestMethod) || "POST".equals(requestMethod))) {        return;    }    List<String> transferEncodingValues = requestHeaders.get("Transfer-Encoding");    String transferEncoding = (transferEncodingValues == null || transferEncodingValues.isEmpty()) ? null : transferEncodingValues.get(0);    if ("chunked".equals(transferEncoding)) {        processChunkedContent(is);    } else {        processRegularContent(is);    }    if (mockHttpServerResponses.get(responseCounter).getMockResponseContentEchoRequest()) {        mockHttpServerResponses.get(responseCounter).setMockResponseContent(requestContent.toByteArray());    }}
private void pdfbox_f902_0(InputStream is) throws IOException
{    List<String> contentLengthValues = requestHeaders.get("Content-Length");    String contentLength = (contentLengthValues == null || contentLengthValues.isEmpty()) ? null : contentLengthValues.get(0);    if (contentLength == null) {        return;    }    int contentLen = Integer.parseInt(contentLength);    byte[] bytes = new byte[contentLen];    is.read(bytes);    requestContent.write(bytes);}
private void pdfbox_f903_0(InputStream is) throws IOException
{    requestContent.write("".getBytes());    byte[] chunk;    byte[] line = null;    boolean lastChunk = false;        while (!lastChunk && (line = readLine(is)) != null) {        String lineStr = new String(line);                if ("0".equals(lineStr)) {            lastChunk = true;        }        if (!lastChunk) {                                    int chunkLen = Integer.parseInt(lineStr, 16);                        chunk = getChunk(is, chunkLen);                                                readLine(is);            requestContent.write(chunk);        }    }        if (lastChunk) {        readLine(is);    }}
private byte[] pdfbox_f904_0(InputStream is) throws IOException
{    int n;    ByteArrayOutputStream tmpOs = new ByteArrayOutputStream();    while ((n = is.read()) != -1) {        if (n == '\r') {            n = is.read();            if (n == '\n') {                return tmpOs.toByteArray();            } else {                tmpOs.write('\r');                if (n != -1) {                    tmpOs.write(n);                } else {                    return tmpOs.toByteArray();                }            }        } else if (n == '\n') {            return tmpOs.toByteArray();        } else {            tmpOs.write(n);        }    }    return tmpOs.toByteArray();}
private byte[] pdfbox_f905_0(InputStream is, int len) throws IOException
{    ByteArrayOutputStream chunk = new ByteArrayOutputStream();    int read;    int totalRead = 0;    byte[] bytes = new byte[512];        while (totalRead < len) {        read = is.read(bytes, 0, Math.min(bytes.length, len - totalRead));        chunk.write(bytes, 0, read);        totalRead += read;    }    return chunk.toByteArray();}
private void pdfbox_f906_0(String line)
{    String[] parts = line.split(": ");    List<String> values = requestHeaders.get(parts[0]);    if (values == null) {        values = new ArrayList<>();        requestHeaders.put(parts[0], values);    }    values.add(parts[1]);}
private void pdfbox_f907_0(Socket socket) throws IOException
{        if (!delayResponse())        return;    OutputStream sos = socket.getOutputStream();    BufferedOutputStream os = new BufferedOutputStream(sos);    String reason = "";    Status statusCode = Response.Status.fromStatusCode(mockHttpServerResponses.get(responseCounter).getMockResponseCode());    if (statusCode != null) {        reason = statusCode.toString();    }    os.write(("HTTP/1.1 " + mockHttpServerResponses.get(responseCounter).getMockResponseCode() + " " + reason).getBytes());    os.write(NEW_LINE);    processResponseHeaders(os);    processResponseContent(os);    os.flush();    responseCounter++;}
private boolean pdfbox_f908_0()
{        if (delayResponseTime > 0) {        try {            Thread.sleep(delayResponseTime);            return true;        } catch (InterruptedException e) {            return false;        }    }    return true;}
private void pdfbox_f909_0(OutputStream os) throws IOException
{    if (mockHttpServerResponses.get(responseCounter).getMockResponseContent() == null) {        return;    }    os.write(mockHttpServerResponses.get(responseCounter).getMockResponseContent());}
private void pdfbox_f910_0(OutputStream os) throws IOException
{    addServerResponseHeaders();    for (String header : mockHttpServerResponses.get(responseCounter).getMockResponseHeaders().keySet()) {        os.write((header + ": " + mockHttpServerResponses.get(responseCounter).getMockResponseHeaders().get(header)).getBytes());        os.write(NEW_LINE);    }    os.write(NEW_LINE);}
private void pdfbox_f911_0()
{    Map<String, String> mockResponseHeaders = mockHttpServerResponses.get(responseCounter).getMockResponseHeaders();    mockResponseHeaders.put("Content-Type", mockHttpServerResponses.get(responseCounter).getMockResponseContentType());    mockResponseHeaders.put("Content-Length", mockHttpServerResponses.get(responseCounter).getMockResponseContent().length + "");    mockResponseHeaders.put("Server", "Mock HTTP Server v1.0");    mockResponseHeaders.put("Connection", "closed");}
public void pdfbox_f912_0(int milliseconds)
{    readTimeOut = milliseconds;}
public void pdfbox_f913_0(int milliseconds)
{    delayResponseTime = milliseconds;}
public String pdfbox_f914_0()
{    return requestContent.toString();}
public byte[] pdfbox_f915_0()
{    return requestContent.toByteArray();}
public Map<String, List<String>> pdfbox_f916_0()
{    return requestHeaders;}
public String pdfbox_f917_0()
{    return requestMethod;}
public String pdfbox_f918_0()
{    return requestUrl;}
public void pdfbox_f919_0(MockHttpServerResponse... responses)
{    mockHttpServerResponses.clear();    mockHttpServerResponses.addAll(Arrays.asList(responses));}
public List<MockHttpServerResponse> pdfbox_f920_0()
{    return mockHttpServerResponses;}
public void pdfbox_f921_0(int serverPort)
{    this.serverPort = serverPort;}
public int pdfbox_f922_0()
{    return serverPort;}
public FontMetrics pdfbox_f923_0() throws IOException
{    return parseFontMetric(false);}
public FontMetrics pdfbox_f924_0(boolean reducedDataset) throws IOException
{    return parseFontMetric(reducedDataset);}
private FontMetrics pdfbox_f925_0(boolean reducedDataset) throws IOException
{    FontMetrics fontMetrics = new FontMetrics();    String startFontMetrics = readString();    if (!START_FONT_METRICS.equals(startFontMetrics)) {        throw new IOException("Error: The AFM file should start with " + START_FONT_METRICS + " and not '" + startFontMetrics + "'");    }    fontMetrics.setAFMVersion(readFloat());    String nextCommand;    boolean charMetricsRead = false;    while (!END_FONT_METRICS.equals(nextCommand = readString())) {        switch(nextCommand) {            case FONT_NAME:                fontMetrics.setFontName(readLine());                break;            case FULL_NAME:                fontMetrics.setFullName(readLine());                break;            case FAMILY_NAME:                fontMetrics.setFamilyName(readLine());                break;            case WEIGHT:                fontMetrics.setWeight(readLine());                break;            case FONT_BBOX:                BoundingBox bBox = new BoundingBox();                bBox.setLowerLeftX(readFloat());                bBox.setLowerLeftY(readFloat());                bBox.setUpperRightX(readFloat());                bBox.setUpperRightY(readFloat());                fontMetrics.setFontBBox(bBox);                break;            case VERSION:                fontMetrics.setFontVersion(readLine());                break;            case NOTICE:                fontMetrics.setNotice(readLine());                break;            case ENCODING_SCHEME:                fontMetrics.setEncodingScheme(readLine());                break;            case MAPPING_SCHEME:                fontMetrics.setMappingScheme(readInt());                break;            case ESC_CHAR:                fontMetrics.setEscChar(readInt());                break;            case CHARACTER_SET:                fontMetrics.setCharacterSet(readLine());                break;            case CHARACTERS:                fontMetrics.setCharacters(readInt());                break;            case IS_BASE_FONT:                fontMetrics.setIsBaseFont(readBoolean());                break;            case V_VECTOR:                float[] vector = new float[2];                vector[0] = readFloat();                vector[1] = readFloat();                fontMetrics.setVVector(vector);                break;            case IS_FIXED_V:                fontMetrics.setIsFixedV(readBoolean());                break;            case CAP_HEIGHT:                fontMetrics.setCapHeight(readFloat());                break;            case X_HEIGHT:                fontMetrics.setXHeight(readFloat());                break;            case ASCENDER:                fontMetrics.setAscender(readFloat());                break;            case DESCENDER:                fontMetrics.setDescender(readFloat());                break;            case STD_HW:                fontMetrics.setStandardHorizontalWidth(readFloat());                break;            case STD_VW:                fontMetrics.setStandardVerticalWidth(readFloat());                break;            case COMMENT:                fontMetrics.addComment(readLine());                break;            case UNDERLINE_POSITION:                fontMetrics.setUnderlinePosition(readFloat());                break;            case UNDERLINE_THICKNESS:                fontMetrics.setUnderlineThickness(readFloat());                break;            case ITALIC_ANGLE:                fontMetrics.setItalicAngle(readFloat());                break;            case CHAR_WIDTH:                float[] widths = new float[2];                widths[0] = readFloat();                widths[1] = readFloat();                fontMetrics.setCharWidth(widths);                break;            case IS_FIXED_PITCH:                fontMetrics.setFixedPitch(readBoolean());                break;            case START_CHAR_METRICS:                int countMetrics = readInt();                List<CharMetric> charMetrics = new ArrayList<>(countMetrics);                for (int i = 0; i < countMetrics; i++) {                    CharMetric charMetric = parseCharMetric();                    charMetrics.add(charMetric);                }                String endCharMetrics = readString();                if (!endCharMetrics.equals(END_CHAR_METRICS)) {                    throw new IOException("Error: Expected '" + END_CHAR_METRICS + "' actual '" + endCharMetrics + "'");                }                charMetricsRead = true;                fontMetrics.setCharMetrics(charMetrics);                break;            case START_COMPOSITES:                if (!reducedDataset) {                    int countComposites = readInt();                    for (int i = 0; i < countComposites; i++) {                        Composite part = parseComposite();                        fontMetrics.addComposite(part);                    }                    String endComposites = readString();                    if (!endComposites.equals(END_COMPOSITES)) {                        throw new IOException("Error: Expected '" + END_COMPOSITES + "' actual '" + endComposites + "'");                    }                }                break;            case START_KERN_DATA:                if (!reducedDataset) {                    parseKernData(fontMetrics);                }                break;            default:                if (reducedDataset && charMetricsRead) {                    break;                }                throw new IOException("Unknown AFM key '" + nextCommand + "'");        }    }    return fontMetrics;}
private void pdfbox_f926_0(FontMetrics fontMetrics) throws IOException
{    String nextCommand;    while (!(nextCommand = readString()).equals(END_KERN_DATA)) {        switch(nextCommand) {            case START_TRACK_KERN:                int countTrackKern = readInt();                for (int i = 0; i < countTrackKern; i++) {                    TrackKern kern = new TrackKern();                    kern.setDegree(readInt());                    kern.setMinPointSize(readFloat());                    kern.setMinKern(readFloat());                    kern.setMaxPointSize(readFloat());                    kern.setMaxKern(readFloat());                    fontMetrics.addTrackKern(kern);                }                String endTrackKern = readString();                if (!endTrackKern.equals(END_TRACK_KERN)) {                    throw new IOException("Error: Expected '" + END_TRACK_KERN + "' actual '" + endTrackKern + "'");                }                break;            case START_KERN_PAIRS:                int countKernPairs = readInt();                for (int i = 0; i < countKernPairs; i++) {                    KernPair pair = parseKernPair();                    fontMetrics.addKernPair(pair);                }                String endKernPairs = readString();                if (!endKernPairs.equals(END_KERN_PAIRS)) {                    throw new IOException("Error: Expected '" + END_KERN_PAIRS + "' actual '" + endKernPairs + "'");                }                break;            case START_KERN_PAIRS0:                int countKernPairs0 = readInt();                for (int i = 0; i < countKernPairs0; i++) {                    KernPair pair = parseKernPair();                    fontMetrics.addKernPair0(pair);                }                String endKernPairs0 = readString();                if (!endKernPairs0.equals(END_KERN_PAIRS)) {                    throw new IOException("Error: Expected '" + END_KERN_PAIRS + "' actual '" + endKernPairs0 + "'");                }                break;            case START_KERN_PAIRS1:                int countKernPairs1 = readInt();                for (int i = 0; i < countKernPairs1; i++) {                    KernPair pair = parseKernPair();                    fontMetrics.addKernPair1(pair);                }                String endKernPairs1 = readString();                if (!endKernPairs1.equals(END_KERN_PAIRS)) {                    throw new IOException("Error: Expected '" + END_KERN_PAIRS + "' actual '" + endKernPairs1 + "'");                }                break;            default:                throw new IOException("Unknown kerning data type '" + nextCommand + "'");        }    }}
private KernPair pdfbox_f927_0() throws IOException
{    KernPair kernPair = new KernPair();    String cmd = readString();    switch(cmd) {        case KERN_PAIR_KP:            kernPair.setFirstKernCharacter(readString());            kernPair.setSecondKernCharacter(readString());            kernPair.setX(readFloat());            kernPair.setY(readFloat());            break;        case KERN_PAIR_KPH:            kernPair.setFirstKernCharacter(hexToString(readString()));            kernPair.setSecondKernCharacter(hexToString(readString()));            kernPair.setX(readFloat());            kernPair.setY(readFloat());            break;        case KERN_PAIR_KPX:            kernPair.setFirstKernCharacter(readString());            kernPair.setSecondKernCharacter(readString());            kernPair.setX(readFloat());            kernPair.setY(0);            break;        case KERN_PAIR_KPY:            kernPair.setFirstKernCharacter(readString());            kernPair.setSecondKernCharacter(readString());            kernPair.setX(0);            kernPair.setY(readFloat());            break;        default:            throw new IOException("Error expected kern pair command actual='" + cmd + "'");    }    return kernPair;}
private String pdfbox_f928_0(String hexString) throws IOException
{    if (hexString.length() < 2) {        throw new IOException("Error: Expected hex string of length >= 2 not='" + hexString);    }    if (hexString.charAt(0) != '<' || hexString.charAt(hexString.length() - 1) != '>') {        throw new IOException("String should be enclosed by angle brackets '" + hexString + "'");    }    hexString = hexString.substring(1, hexString.length() - 1);    byte[] data = new byte[hexString.length() / 2];    for (int i = 0; i < hexString.length(); i += 2) {        String hex = Character.toString(hexString.charAt(i)) + hexString.charAt(i + 1);        try {            data[i / 2] = (byte) Integer.parseInt(hex, BITS_IN_HEX);        } catch (NumberFormatException e) {            throw new IOException("Error parsing AFM file:" + e);        }    }    return new String(data, Charsets.ISO_8859_1);}
private Composite pdfbox_f929_0() throws IOException
{    Composite composite = new Composite();    String partData = readLine();    StringTokenizer tokenizer = new StringTokenizer(partData, " ;");    String cc = tokenizer.nextToken();    if (!cc.equals(CC)) {        throw new IOException("Expected '" + CC + "' actual='" + cc + "'");    }    String name = tokenizer.nextToken();    composite.setName(name);    int partCount;    try {        partCount = Integer.parseInt(tokenizer.nextToken());    } catch (NumberFormatException e) {        throw new IOException("Error parsing AFM document:" + e);    }    for (int i = 0; i < partCount; i++) {        CompositePart part = new CompositePart();        String pcc = tokenizer.nextToken();        if (!pcc.equals(PCC)) {            throw new IOException("Expected '" + PCC + "' actual='" + pcc + "'");        }        String partName = tokenizer.nextToken();        try {            int x = Integer.parseInt(tokenizer.nextToken());            int y = Integer.parseInt(tokenizer.nextToken());            part.setName(partName);            part.setXDisplacement(x);            part.setYDisplacement(y);            composite.addPart(part);        } catch (NumberFormatException e) {            throw new IOException("Error parsing AFM document:" + e);        }    }    return composite;}
private CharMetric pdfbox_f930_0() throws IOException
{    CharMetric charMetric = new CharMetric();    String metrics = readLine();    StringTokenizer metricsTokenizer = new StringTokenizer(metrics);    try {        while (metricsTokenizer.hasMoreTokens()) {            String nextCommand = metricsTokenizer.nextToken();            switch(nextCommand) {                case CHARMETRICS_C:                    String charCodeC = metricsTokenizer.nextToken();                    charMetric.setCharacterCode(Integer.parseInt(charCodeC));                    verifySemicolon(metricsTokenizer);                    break;                case CHARMETRICS_CH:                                                            String charCodeCH = metricsTokenizer.nextToken();                    charMetric.setCharacterCode(Integer.parseInt(charCodeCH, BITS_IN_HEX));                    verifySemicolon(metricsTokenizer);                    break;                case CHARMETRICS_WX:                    charMetric.setWx(Float.parseFloat(metricsTokenizer.nextToken()));                    verifySemicolon(metricsTokenizer);                    break;                case CHARMETRICS_W0X:                    charMetric.setW0x(Float.parseFloat(metricsTokenizer.nextToken()));                    verifySemicolon(metricsTokenizer);                    break;                case CHARMETRICS_W1X:                    charMetric.setW1x(Float.parseFloat(metricsTokenizer.nextToken()));                    verifySemicolon(metricsTokenizer);                    break;                case CHARMETRICS_WY:                    charMetric.setWy(Float.parseFloat(metricsTokenizer.nextToken()));                    verifySemicolon(metricsTokenizer);                    break;                case CHARMETRICS_W0Y:                    charMetric.setW0y(Float.parseFloat(metricsTokenizer.nextToken()));                    verifySemicolon(metricsTokenizer);                    break;                case CHARMETRICS_W1Y:                    charMetric.setW1y(Float.parseFloat(metricsTokenizer.nextToken()));                    verifySemicolon(metricsTokenizer);                    break;                case CHARMETRICS_W:                    float[] w = new float[2];                    w[0] = Float.parseFloat(metricsTokenizer.nextToken());                    w[1] = Float.parseFloat(metricsTokenizer.nextToken());                    charMetric.setW(w);                    verifySemicolon(metricsTokenizer);                    break;                case CHARMETRICS_W0:                    float[] w0 = new float[2];                    w0[0] = Float.parseFloat(metricsTokenizer.nextToken());                    w0[1] = Float.parseFloat(metricsTokenizer.nextToken());                    charMetric.setW0(w0);                    verifySemicolon(metricsTokenizer);                    break;                case CHARMETRICS_W1:                    float[] w1 = new float[2];                    w1[0] = Float.parseFloat(metricsTokenizer.nextToken());                    w1[1] = Float.parseFloat(metricsTokenizer.nextToken());                    charMetric.setW1(w1);                    verifySemicolon(metricsTokenizer);                    break;                case CHARMETRICS_VV:                    float[] vv = new float[2];                    vv[0] = Float.parseFloat(metricsTokenizer.nextToken());                    vv[1] = Float.parseFloat(metricsTokenizer.nextToken());                    charMetric.setVv(vv);                    verifySemicolon(metricsTokenizer);                    break;                case CHARMETRICS_N:                    charMetric.setName(metricsTokenizer.nextToken());                    verifySemicolon(metricsTokenizer);                    break;                case CHARMETRICS_B:                    BoundingBox box = new BoundingBox();                    box.setLowerLeftX(Float.parseFloat(metricsTokenizer.nextToken()));                    box.setLowerLeftY(Float.parseFloat(metricsTokenizer.nextToken()));                    box.setUpperRightX(Float.parseFloat(metricsTokenizer.nextToken()));                    box.setUpperRightY(Float.parseFloat(metricsTokenizer.nextToken()));                    charMetric.setBoundingBox(box);                    verifySemicolon(metricsTokenizer);                    break;                case CHARMETRICS_L:                    Ligature lig = new Ligature();                    lig.setSuccessor(metricsTokenizer.nextToken());                    lig.setLigature(metricsTokenizer.nextToken());                    charMetric.addLigature(lig);                    verifySemicolon(metricsTokenizer);                    break;                default:                    throw new IOException("Unknown CharMetrics command '" + nextCommand + "'");            }        }    } catch (NumberFormatException e) {        throw new IOException("Error: Corrupt AFM document:" + e);    }    return charMetric;}
private void pdfbox_f931_0(StringTokenizer tokenizer) throws IOException
{    if (tokenizer.hasMoreTokens()) {        String semicolon = tokenizer.nextToken();        if (!";".equals(semicolon)) {            throw new IOException("Error: Expected semicolon in stream actual='" + semicolon + "'");        }    } else {        throw new IOException("CharMetrics is missing a semicolon after a command");    }}
private boolean pdfbox_f932_0() throws IOException
{    String theBoolean = readString();    return Boolean.valueOf(theBoolean);}
private int pdfbox_f933_0() throws IOException
{    String theInt = readString();    try {        return Integer.parseInt(theInt);    } catch (NumberFormatException e) {        throw new IOException("Error parsing AFM document:" + e);    }}
private float pdfbox_f934_0() throws IOException
{    String theFloat = readString();    return Float.parseFloat(theFloat);}
private String pdfbox_f935_0() throws IOException
{        StringBuilder buf = new StringBuilder(60);    int nextByte = input.read();    while (isWhitespace(nextByte)) {        nextByte = input.read();        }    buf.append((char) nextByte);        nextByte = input.read();    while (nextByte != -1 && !isEOL(nextByte)) {        buf.append((char) nextByte);        nextByte = input.read();    }    return buf.toString();}
private String pdfbox_f936_0() throws IOException
{        StringBuilder buf = new StringBuilder(24);    int nextByte = input.read();    while (isWhitespace(nextByte)) {        nextByte = input.read();        }    buf.append((char) nextByte);        nextByte = input.read();    while (nextByte != -1 && !isWhitespace(nextByte)) {        buf.append((char) nextByte);        nextByte = input.read();    }    return buf.toString();}
private boolean pdfbox_f937_0(int character)
{    return character == 0x0D || character == 0x0A;}
private boolean pdfbox_f938_0(int character)
{    return character == ' ' || character == '\t' || character == 0x0D || character == 0x0A;}
public BoundingBox pdfbox_f939_0()
{    return boundingBox;}
public void pdfbox_f940_0(BoundingBox bBox)
{    boundingBox = bBox;}
public int pdfbox_f941_0()
{    return characterCode;}
public void pdfbox_f942_0(int cCode)
{    characterCode = cCode;}
public void pdfbox_f943_0(Ligature ligature)
{    ligatures.add(ligature);}
public List<Ligature> pdfbox_f944_0()
{    return ligatures;}
public void pdfbox_f945_0(List<Ligature> lig)
{    this.ligatures = lig;}
public String pdfbox_f946_0()
{    return name;}
public void pdfbox_f947_0(String n)
{    this.name = n;}
public float[] pdfbox_f948_0()
{    return this.vv;}
public void pdfbox_f949_0(float[] vvValue)
{    this.vv = vvValue;}
public float[] pdfbox_f950_0()
{    return this.w;}
public void pdfbox_f951_0(float[] wValue)
{    this.w = wValue;}
public float[] pdfbox_f952_0()
{    return this.w0;}
public void pdfbox_f953_0(float[] w0Value)
{    w0 = w0Value;}
public float pdfbox_f954_0()
{    return w0x;}
public void pdfbox_f955_0(float w0xValue)
{    w0x = w0xValue;}
public float pdfbox_f956_0()
{    return w0y;}
public void pdfbox_f957_0(float w0yValue)
{    w0y = w0yValue;}
public float[] pdfbox_f958_0()
{    return this.w1;}
public void pdfbox_f959_0(float[] w1Value)
{    w1 = w1Value;}
public float pdfbox_f960_0()
{    return w1x;}
public void pdfbox_f961_0(float w1xValue)
{    w1x = w1xValue;}
public float pdfbox_f962_0()
{    return w1y;}
public void pdfbox_f963_0(float w1yValue)
{    w1y = w1yValue;}
public float pdfbox_f964_0()
{    return wx;}
public void pdfbox_f965_0(float wxValue)
{    wx = wxValue;}
public float pdfbox_f966_0()
{    return wy;}
public void pdfbox_f967_0(float wyValue)
{    this.wy = wyValue;}
public String pdfbox_f968_0()
{    return name;}
public void pdfbox_f969_0(String nameValue)
{    this.name = nameValue;}
public void pdfbox_f970_0(CompositePart part)
{    parts.add(part);}
public List<CompositePart> pdfbox_f971_0()
{    return parts;}
public void pdfbox_f972_0(List<CompositePart> partsList)
{    this.parts = partsList;}
public java.lang.String pdfbox_f973_0()
{    return name;}
public void pdfbox_f974_0(String nameValue)
{    name = nameValue;}
public int pdfbox_f975_0()
{    return xDisplacement;}
public void pdfbox_f976_0(int xDisp)
{    xDisplacement = xDisp;}
public int pdfbox_f977_0()
{    return yDisplacement;}
public void pdfbox_f978_0(int yDisp)
{    yDisplacement = yDisp;}
public float pdfbox_f979_0(String name)
{    float result = 0;    CharMetric metric = charMetricsMap.get(name);    if (metric != null) {        result = metric.getWx();    }    return result;}
public float pdfbox_f980_0(String name)
{    float result = 0;    CharMetric metric = charMetricsMap.get(name);    if (metric != null) {        result = metric.getWy();        if (Float.compare(result, 0) == 0) {            result = metric.getBoundingBox().getHeight();        }    }    return result;}
public float pdfbox_f981_0()
{    float average = 0;    float totalWidths = 0;    float characterCount = 0;    for (CharMetric metric : charMetrics) {        if (metric.getWx() > 0) {            totalWidths += metric.getWx();            characterCount += 1;        }    }    if (totalWidths > 0) {        average = totalWidths / characterCount;    }    return average;}
public void pdfbox_f982_0(String comment)
{    comments.add(comment);}
public List<String> pdfbox_f983_0()
{    return Collections.unmodifiableList(comments);}
public float pdfbox_f984_0()
{    return afmVersion;}
public int pdfbox_f985_0()
{    return metricSets;}
public void pdfbox_f986_0(float afmVersionValue)
{    afmVersion = afmVersionValue;}
public void pdfbox_f987_0(int metricSetsValue)
{    if (metricSetsValue < 0 || metricSetsValue > 2) {        throw new IllegalArgumentException("The metricSets attribute must be in the " + "set {0,1,2} and not '" + metricSetsValue + "'");    }    metricSets = metricSetsValue;}
public String pdfbox_f988_0()
{    return fontName;}
public void pdfbox_f989_0(String name)
{    fontName = name;}
public String pdfbox_f990_0()
{    return fullName;}
public void pdfbox_f991_0(String fullNameValue)
{    fullName = fullNameValue;}
public String pdfbox_f992_0()
{    return familyName;}
public void pdfbox_f993_0(String familyNameValue)
{    familyName = familyNameValue;}
public String pdfbox_f994_0()
{    return weight;}
public void pdfbox_f995_0(String weightValue)
{    weight = weightValue;}
public BoundingBox pdfbox_f996_0()
{    return fontBBox;}
public void pdfbox_f997_0(BoundingBox bBox)
{    this.fontBBox = bBox;}
public String pdfbox_f998_0()
{    return notice;}
public void pdfbox_f999_0(String noticeValue)
{    notice = noticeValue;}
public String pdfbox_f1000_0()
{    return encodingScheme;}
public void pdfbox_f1001_0(String encodingSchemeValue)
{    encodingScheme = encodingSchemeValue;}
public int pdfbox_f1002_0()
{    return mappingScheme;}
public void pdfbox_f1003_0(int mappingSchemeValue)
{    mappingScheme = mappingSchemeValue;}
public int pdfbox_f1004_0()
{    return escChar;}
public void pdfbox_f1005_0(int escCharValue)
{    escChar = escCharValue;}
public String pdfbox_f1006_0()
{    return characterSet;}
public void pdfbox_f1007_0(String characterSetValue)
{    characterSet = characterSetValue;}
public int pdfbox_f1008_0()
{    return characters;}
public void pdfbox_f1009_0(int charactersValue)
{    characters = charactersValue;}
public boolean pdfbox_f1010_0()
{    return isBaseFont;}
public void pdfbox_f1011_0(boolean isBaseFontValue)
{    isBaseFont = isBaseFontValue;}
public float[] pdfbox_f1012_0()
{    return this.vVector;}
public void pdfbox_f1013_0(float[] vVectorValue)
{    vVector = vVectorValue;}
public boolean pdfbox_f1014_0()
{    return isFixedV;}
public void pdfbox_f1015_0(boolean isFixedVValue)
{    isFixedV = isFixedVValue;}
public float pdfbox_f1016_0()
{    return capHeight;}
public void pdfbox_f1017_0(float capHeightValue)
{    capHeight = capHeightValue;}
public float pdfbox_f1018_0()
{    return xHeight;}
public void pdfbox_f1019_0(float xHeightValue)
{    xHeight = xHeightValue;}
public float pdfbox_f1020_0()
{    return ascender;}
public void pdfbox_f1021_0(float ascenderValue)
{    ascender = ascenderValue;}
public float pdfbox_f1022_0()
{    return descender;}
