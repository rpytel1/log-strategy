public static void main(String[] args) throws Exception
{    if (args.length < MINARGS) {        System.out.println("Please provide " + MINARGS + " or more arguments:");        System.out.println("serverhost serverport filename [arg1 arg2 ...]");        System.out.println("e.g. ");        System.out.println("localhost 9000 extras/remote.bsh apple blake 7");        return;    }    String host = args[0];    String portString = args[1];    String file = args[2];        int port = Integer.parseInt(portString) + 1;    System.out.println("Connecting to BSH server on " + host + ":" + portString);    try (Socket sock = new Socket(host, port);        InputStream is = sock.getInputStream();        OutputStream os = sock.getOutputStream()) {        SockRead sockRead = new SockRead(is);        sockRead.start();                sendLine("bsh.prompt=\"\";", os);        sendLine("String [] args={", os);        for (int i = MINARGS; i < args.length; i++) {            sendLine("\"" + args[i] + "\",\n", os);        }        sendLine("};", os);        int b;        try (InputStreamReader fis = new FileReader(file)) {            while ((b = fis.read()) != -1) {                os.write(b);            }        }                sendLine("bsh.prompt=\"bsh % \";", os);        os.flush();                sock.shutdownOutput();                sockRead.join();    }}
0
private static void sendLine(String line, OutputStream outPipe) throws IOException
{        outPipe.write(line.getBytes());    outPipe.flush();}
0
public void run()
{    System.out.println("Reading responses from server ...");    int x = 0;    try {        while ((x = is.read()) > -1) {            char c = (char) x;            System.out.print(c);        }    } catch (IOException e) {                e.printStackTrace();    } finally {        System.out.println("... disconnected from server.");    }}
0
protected String getInitFileProperty()
{    return INIT_FILE;}
0
public String getScript()
{    return getPropertyAsString(SCRIPT);}
0
public String getFilename()
{    return getPropertyAsString(FILENAME);}
0
public String getParameters()
{    return getPropertyAsString(PARAMETERS);}
0
public boolean isResetInterpreter()
{    return getPropertyAsBoolean(RESET_INTERPRETER);}
0
public AssertionResult getResult(SampleResult response)
{    AssertionResult result = new AssertionResult(getName());    final BeanShellInterpreter bshInterpreter = getBeanShellInterpreter();    if (bshInterpreter == null) {        result.setFailure(true);        result.setError(true);        result.setFailureMessage("BeanShell Interpreter not found");        return result;    }    try {                        bshInterpreter.set("SampleResult", response);                bshInterpreter.set("Response", response);                bshInterpreter.set("ResponseData", response.getResponseData());                bshInterpreter.set("ResponseCode", response.getResponseCode());                bshInterpreter.set("ResponseMessage", response.getResponseMessage());                bshInterpreter.set("ResponseHeaders", response.getResponseHeaders());                bshInterpreter.set("RequestHeaders", response.getRequestHeaders());                bshInterpreter.set("SampleLabel", response.getSampleLabel());                bshInterpreter.set("SamplerData", response.getSamplerData());                bshInterpreter.set("Successful", response.isSuccessful());                                bshInterpreter.set("FailureMessage", "");                bshInterpreter.set("Failure", false);        processFileOrScript(bshInterpreter);                result.setFailureMessage(bshInterpreter.get("FailureMessage").toString());        result.setFailure(Boolean.parseBoolean(        bshInterpreter.get("Failure").toString()));        result.setError(false);    } catch (NoClassDefFoundError ex) {                        result.setError(true);        result.setFailureMessage("BeanShell Jar missing? " + ex.toString());                response.setStopThread(true);    } catch (    Exception ex) {        result.setError(true);        result.setFailureMessage(ex.toString());            }    return result;}
1
public AssertionResult getResult(SampleResult response)
{    AssertionResult result = new AssertionResult(getName());    BSFManager mgr = null;    try {        mgr = getManager();        mgr.declareBean("SampleResult", response, SampleResult.class);        mgr.declareBean("AssertionResult", result, AssertionResult.class);        processFileOrScript(mgr);        result.setError(false);    } catch (BSFException e) {                result.setFailure(true);        result.setError(true);        result.setFailureMessage(e.toString());    } finally {        if (mgr != null) {            mgr.terminate();        }    }    return result;}
1
public Object clone()
{    return super.clone();}
0
public AssertionResult getResult(SampleResult response)
{    responses.add(response);    if (responses.size() > 1) {        CompareAssertionResult result = new CompareAssertionResult(getName());        compareContent(result);        compareTime(result);        return result;    } else {        return new AssertionResult(getName());    }}
0
private void compareTime(CompareAssertionResult result)
{    if (compareTime < 0) {        return;    }    long prevTime = -1;    SampleResult prevResult = null;    for (SampleResult currentResult : responses) {        long currentTime = currentResult.getTime();        if (prevTime != -1) {            boolean failure = Math.abs(prevTime - currentTime) > compareTime;            if (failure) {                markTimeFailure(result, prevResult, prevTime, currentResult, currentTime);                return;            }        }        prevResult = currentResult;        prevTime = currentTime;    }}
0
private void markTimeFailure(CompareAssertionResult result, SampleResult prevResult, long prevTime, SampleResult currentResult, long currentTime)
{    result.setFailure(true);    StringBuilder sb = new StringBuilder();    appendResultDetails(sb, prevResult);        sb.append(JMeterUtils.getResString("comparison_response_time")).append(prevTime);    result.addToBaseResult(sb.toString());    sb.setLength(0);    appendResultDetails(sb, currentResult);        sb.append(JMeterUtils.getResString("comparison_response_time")).append(currentTime);    result.addToSecondaryResult(sb.toString());    result.setFailureMessage(    JMeterUtils.getResString("comparison_differ_time") + compareTime +     JMeterUtils.getResString("comparison_unit"));}
0
private void compareContent(CompareAssertionResult result)
{    if (!compareContent) {        return;    }    String prevContent = null;    SampleResult prevResult = null;    for (SampleResult currentResult : responses) {        String currentContent = currentResult.getResponseDataAsString();        currentContent = filterString(currentContent);        if (prevContent != null) {            boolean failure = !prevContent.equals(currentContent);            if (failure) {                markContentFailure(result, prevContent, prevResult, currentResult, currentContent);                return;            }        }        prevResult = currentResult;        prevContent = currentContent;    }}
0
private void markContentFailure(CompareAssertionResult result, String prevContent, SampleResult prevResult, SampleResult currentResult, String currentContent)
{    result.setFailure(true);    StringBuilder sb = new StringBuilder();    appendResultDetails(sb, prevResult);    sb.append(prevContent);    result.addToBaseResult(sb.toString());    sb.setLength(0);    appendResultDetails(sb, currentResult);    sb.append(currentContent);    result.addToSecondaryResult(sb.toString());        result.setFailureMessage(JMeterUtils.getResString("comparison_differ_content"));}
0
private void appendResultDetails(StringBuilder buf, SampleResult result)
{    final String samplerData = result.getSamplerData();    if (samplerData != null) {        buf.append(samplerData.trim());    }        buf.append("\n");    final String requestHeaders = result.getRequestHeaders();    if (requestHeaders != null) {        buf.append(requestHeaders);    }        buf.append("\n\n");}
0
private String filterString(final String content)
{    if (stringsToSkip == null || stringsToSkip.isEmpty()) {        return content;    }    String result = content;    for (SubstitutionElement regex : stringsToSkip) {        emptySub.setSubstitution(regex.getSubstitute());        result = Util.substitute(JMeterUtils.getMatcher(), JMeterUtils.getPatternCache().getPattern(regex.getRegex()), emptySub, result, Util.SUBSTITUTE_ALL);    }    return result;}
0
public void iterationStart(LoopIterationEvent iterEvent)
{    responses = new LinkedList<>();}
0
public boolean isCompareContent()
{    return compareContent;}
0
public void setCompareContent(boolean compareContent)
{    this.compareContent = compareContent;}
0
public long getCompareTime()
{    return compareTime;}
0
public void setCompareTime(long compareTime)
{    this.compareTime = compareTime;}
0
public Collection<SubstitutionElement> getStringsToSkip()
{    return stringsToSkip;}
0
public void setStringsToSkip(Collection<SubstitutionElement> stringsToSkip)
{    this.stringsToSkip = stringsToSkip;}
0
public AssertionResult getResult(SampleResult response)
{    AssertionResult result = new AssertionResult(getName());    result.setFailure(false);    long duration = getAllowedDuration();    if (duration > 0) {        long responseTime = response.getTime();                if (responseTime > duration) {            result.setFailure(true);            Object[] arguments = { Long.valueOf(responseTime), Long.valueOf(duration) };            String message = MessageFormat.format(            JMeterUtils.getResString("duration_assertion_failure"), arguments);            result.setFailureMessage(message);        }    }    return result;}
0
private long getAllowedDuration()
{    return getPropertyAsLong(DURATION_KEY);}
0
public void setAllowedDuration(long duration)
{    setProperty(DURATION_KEY, duration);}
0
public String getLabelResource()
{        return "assertion_title";}
0
public TestElement createTestElement()
{    ResponseAssertion el = new ResponseAssertion();    modifyTestElement(el);    return el;}
0
public void modifyTestElement(TestElement el)
{    GuiUtils.stopTableEditing(stringTable);    configureTestElement(el);    if (el instanceof ResponseAssertion) {        ResponseAssertion ra = (ResponseAssertion) el;        ra.setCustomFailureMessage(alternativeFailureMessage.getText());        saveScopeSettings(ra);        ra.clearTestStrings();        String[] testStrings = tableModel.getData().getColumn(COL_RESOURCE_NAME);        for (String testString : testStrings) {            ra.addTestString(testString);        }        if (responseStringButton.isSelected()) {            ra.setTestFieldResponseData();        } else if (responseAsDocumentButton.isSelected()) {            ra.setTestFieldResponseDataAsDocument();        } else if (responseCodeButton.isSelected()) {            ra.setTestFieldResponseCode();        } else if (responseMessageButton.isSelected()) {            ra.setTestFieldResponseMessage();        } else if (requestHeadersButton.isSelected()) {            ra.setTestFieldRequestHeaders();        } else if (requestDataButton.isSelected()) {            ra.setTestFieldRequestData();        } else if (responseHeadersButton.isSelected()) {            ra.setTestFieldResponseHeaders();        } else {                        ra.setTestFieldURL();        }        ra.setAssumeSuccess(assumeSuccess.isSelected());        if (containsBox.isSelected()) {            ra.setToContainsType();        } else if (equalsBox.isSelected()) {            ra.setToEqualsType();        } else if (substringBox.isSelected()) {            ra.setToSubstringType();        } else {            ra.setToMatchType();        }        if (notBox.isSelected()) {            ra.setToNotType();        } else {            ra.unsetNotType();        }        if (orBox.isSelected()) {            ra.setToOrType();        } else {            ra.unsetOrType();        }    }}
0
public void clearGui()
{    super.clearGui();    GuiUtils.stopTableEditing(stringTable);    tableModel.clearData();    responseStringButton.setSelected(true);    urlButton.setSelected(false);    responseCodeButton.setSelected(false);    responseMessageButton.setSelected(false);    requestHeadersButton.setSelected(false);    requestDataButton.setSelected(false);    responseHeadersButton.setSelected(false);    assumeSuccess.setSelected(false);    substringBox.setSelected(true);    notBox.setSelected(false);    orBox.setSelected(false);        alternativeFailureMessage.setText("");}
0
public void configure(TestElement el)
{    super.configure(el);    ResponseAssertion model = (ResponseAssertion) el;    showScopeSettings(model, true);    if (model.getCustomFailureMessage() != null) {        alternativeFailureMessage.setText(model.getCustomFailureMessage());    }    if (model.isContainsType()) {        containsBox.setSelected(true);    } else if (model.isEqualsType()) {        equalsBox.setSelected(true);    } else if (model.isSubstringType()) {        substringBox.setSelected(true);    } else {        matchesBox.setSelected(true);    }    notBox.setSelected(model.isNotType());    orBox.setSelected(model.isOrType());    if (model.isTestFieldResponseData()) {        responseStringButton.setSelected(true);    } else if (model.isTestFieldResponseDataAsDocument()) {        responseAsDocumentButton.setSelected(true);    } else if (model.isTestFieldResponseCode()) {        responseCodeButton.setSelected(true);    } else if (model.isTestFieldResponseMessage()) {        responseMessageButton.setSelected(true);    } else if (model.isTestFieldRequestHeaders()) {        requestHeadersButton.setSelected(true);    } else if (model.isTestFieldRequestData()) {        requestDataButton.setSelected(true);    } else if (model.isTestFieldResponseHeaders()) {        responseHeadersButton.setSelected(true);    } else     {        urlButton.setSelected(true);    }    assumeSuccess.setSelected(model.getAssumeSuccess());    tableModel.clearData();    for (JMeterProperty jMeterProperty : model.getTestStrings()) {        tableModel.addRow(new Object[] { jMeterProperty.getStringValue() });    }    boolean testStringsPresent = model.getTestStrings().size() != 0;    deletePattern.setEnabled(testStringsPresent);    tableModel.fireTableDataChanged();}
0
 void init()
{        setLayout(new BorderLayout());    Box box = Box.createVerticalBox();    setBorder(makeBorder());    box.add(makeTitlePanel());    box.add(createScopePanel(true));    box.add(createFieldPanel());    box.add(createTypePanel());    add(box, BorderLayout.NORTH);    add(createStringPanel(), BorderLayout.CENTER);    add(createCustomAssertionMessagePanel(), BorderLayout.SOUTH);}
0
private JPanel createFieldPanel()
{        responseStringButton = new JRadioButton(JMeterUtils.getResString("assertion_text_resp"));        responseAsDocumentButton = new JRadioButton(JMeterUtils.getResString("assertion_text_document"));        urlButton = new JRadioButton(JMeterUtils.getResString("assertion_url_samp"));        responseCodeButton = new JRadioButton(JMeterUtils.getResString("assertion_code_resp"));        responseMessageButton = new JRadioButton(JMeterUtils.getResString("assertion_message_resp"));        responseHeadersButton = new JRadioButton(JMeterUtils.getResString("assertion_headers"));        requestHeadersButton = new JRadioButton(JMeterUtils.getResString("assertion_req_headers"));        requestDataButton = new JRadioButton(JMeterUtils.getResString("assertion_req_data"));    ButtonGroup group = new ButtonGroup();    group.add(responseStringButton);    group.add(responseAsDocumentButton);    group.add(urlButton);    group.add(responseCodeButton);    group.add(responseMessageButton);    group.add(requestHeadersButton);    group.add(responseHeadersButton);    group.add(requestDataButton);    responseStringButton.setSelected(true);        assumeSuccess = new JCheckBox(JMeterUtils.getResString("assertion_assume_success"));    GridBagLayout gridBagLayout = new GridBagLayout();    GridBagConstraints gbc = new GridBagConstraints();    initConstraints(gbc);    JPanel panel = new JPanel(gridBagLayout);        panel.setBorder(BorderFactory.createTitledBorder(JMeterUtils.getResString("assertion_resp_field")));    addField(panel, responseStringButton, gbc);    addField(panel, responseCodeButton, gbc);    addField(panel, responseMessageButton, gbc);    addField(panel, responseHeadersButton, gbc);    resetContraints(gbc);    addField(panel, requestHeadersButton, gbc);    addField(panel, urlButton, gbc);    addField(panel, responseAsDocumentButton, gbc);    addField(panel, assumeSuccess, gbc);    resetContraints(gbc);    addField(panel, requestDataButton, gbc);    return panel;}
0
private void addField(JPanel panel, JToggleButton button, GridBagConstraints gbc)
{    panel.add(button, gbc.clone());    gbc.gridx++;    gbc.fill = GridBagConstraints.HORIZONTAL;}
0
private void resetContraints(GridBagConstraints gbc)
{    gbc.gridx = 0;    gbc.gridy++;    gbc.fill = GridBagConstraints.NONE;}
0
private void initConstraints(GridBagConstraints gbc)
{    gbc.anchor = GridBagConstraints.NORTHWEST;    gbc.fill = GridBagConstraints.NONE;    gbc.gridheight = 1;    gbc.gridwidth = 1;    gbc.gridx = 0;    gbc.gridy = 0;    gbc.weightx = 1;    gbc.weighty = 1;}
0
private JPanel createTypePanel()
{    JPanel panel = new JPanel();        panel.setBorder(BorderFactory.createTitledBorder(JMeterUtils.getResString("assertion_pattern_match_rules")));    ButtonGroup group = new ButtonGroup();        containsBox = new JRadioButton(JMeterUtils.getResString("assertion_contains"));    group.add(containsBox);    containsBox.setSelected(true);    panel.add(containsBox);        matchesBox = new JRadioButton(JMeterUtils.getResString("assertion_matches"));    group.add(matchesBox);    panel.add(matchesBox);        equalsBox = new JRadioButton(JMeterUtils.getResString("assertion_equals"));    group.add(equalsBox);    panel.add(equalsBox);        substringBox = new JRadioButton(JMeterUtils.getResString("assertion_substring"));    group.add(substringBox);    panel.add(substringBox);        notBox = new JCheckBox(JMeterUtils.getResString("assertion_not"));    panel.add(notBox);        orBox = new JCheckBox(JMeterUtils.getResString("assertion_or"));    panel.add(orBox);    return panel;}
0
private JPanel createStringPanel()
{    tableModel = new PowerTableModel(new String[] { COL_RESOURCE_NAME }, new Class[] { String.class });    stringTable = new JTable(tableModel);    stringTable.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());    stringTable.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);    JMeterUtils.applyHiDPI(stringTable);    TextAreaCellRenderer renderer = new TextAreaCellRenderer();    stringTable.setRowHeight(renderer.getPreferredHeight());    stringTable.setDefaultRenderer(String.class, renderer);    stringTable.setDefaultEditor(String.class, new TextAreaTableCellEditor());    stringTable.setPreferredScrollableViewportSize(new Dimension(100, 70));    JPanel panel = new JPanel();    panel.setLayout(new BorderLayout());        panel.setBorder(BorderFactory.createTitledBorder(JMeterUtils.getResString("assertion_patterns_to_test")));    panel.add(new JScrollPane(stringTable), BorderLayout.CENTER);    panel.add(createButtonPanel(), BorderLayout.SOUTH);    return panel;}
0
private JPanel createCustomAssertionMessagePanel()
{    JPanel panel = new JPanel();        panel.setBorder(BorderFactory.createTitledBorder(JMeterUtils.getResString("assertion_custom_message")));    alternativeFailureMessage = JSyntaxTextArea.getInstance(3, 80);    panel.add(JTextScrollPane.getInstance(alternativeFailureMessage));    return panel;}
0
private JPanel createButtonPanel()
{        JButton addPattern = new JButton(JMeterUtils.getResString("add"));    addPattern.addActionListener(new AddPatternListener());        JButton addFromClipboardPattern = new JButton(JMeterUtils.getResString("add_from_clipboard"));    addFromClipboardPattern.addActionListener(new AddFromClipboardListener());        deletePattern = new JButton(JMeterUtils.getResString("delete"));    deletePattern.addActionListener(new ClearPatternsListener());    deletePattern.setEnabled(false);    JPanel buttonPanel = new JPanel();    buttonPanel.add(addPattern);    buttonPanel.add(addFromClipboardPattern);    buttonPanel.add(deletePattern);    return buttonPanel;}
0
public void actionPerformed(ActionEvent e)
{    GuiUtils.cancelEditing(stringTable);    int[] rowsSelected = stringTable.getSelectedRows();    stringTable.clearSelection();    if (rowsSelected.length > 0) {        for (int i = rowsSelected.length - 1; i >= 0; i--) {            tableModel.removeRow(rowsSelected[i]);        }        tableModel.fireTableDataChanged();    } else {        if (tableModel.getRowCount() > 0) {            tableModel.removeRow(0);            tableModel.fireTableDataChanged();        }    }    if (stringTable.getModel().getRowCount() == 0) {        deletePattern.setEnabled(false);    }}
0
public void actionPerformed(ActionEvent e)
{    GuiUtils.stopTableEditing(stringTable);    tableModel.addNewRow();    checkButtonsStatus();    tableModel.fireTableDataChanged();}
0
public void actionPerformed(ActionEvent e)
{    deletePattern.setEnabled(true);    GuiUtils.stopTableEditing(stringTable);    int rowCount = stringTable.getRowCount();    try {        String clipboardContent = GuiUtils.getPastedText();        if (clipboardContent == null) {            return;        }        String[] clipboardLines = clipboardContent.split("\n");        for (String clipboardLine : clipboardLines) {            tableModel.addRow(new Object[] { clipboardLine.trim() });        }        if (stringTable.getRowCount() > rowCount) {            checkButtonsStatus();                        int rowToSelect = tableModel.getRowCount() - 1;            stringTable.setRowSelectionInterval(rowCount, rowToSelect);            stringTable.scrollRectToVisible(stringTable.getCellRect(rowCount, 0, true));        }    } catch (IOException ioe) {        JOptionPane.showMessageDialog(GuiPackage.getInstance().getMainFrame(), "Could not add data from clipboard:\n" + ioe.getLocalizedMessage(), "Error", JOptionPane.ERROR_MESSAGE);    } catch (UnsupportedFlavorException ufe) {        JOptionPane.showMessageDialog(GuiPackage.getInstance().getMainFrame(), "Could not add retrieve " + DataFlavor.stringFlavor.getHumanPresentableName() + " from clipboard" + ufe.getLocalizedMessage(), "Error", JOptionPane.ERROR_MESSAGE);    }    tableModel.fireTableDataChanged();}
0
protected void checkButtonsStatus()
{        if (tableModel.getRowCount() == 0) {        deletePattern.setEnabled(false);    } else {        deletePattern.setEnabled(true);    }}
0
public void configure(TestElement element)
{    scriptField.setInitialText(element.getPropertyAsString(BeanShellAssertion.SCRIPT));    scriptField.setCaretPosition(0);    filename.setFilename(element.getPropertyAsString(BeanShellAssertion.FILENAME));    parameters.setText(element.getPropertyAsString(BeanShellAssertion.PARAMETERS));    resetInterpreter.setSelected(element.getPropertyAsBoolean(BeanShellAssertion.RESET_INTERPRETER));    super.configure(element);}
0
public TestElement createTestElement()
{    BeanShellAssertion sampler = new BeanShellAssertion();    modifyTestElement(sampler);    return sampler;}
0
public void modifyTestElement(TestElement te)
{    te.clear();    super.configureTestElement(te);    te.setProperty(BeanShellAssertion.SCRIPT, scriptField.getText());    te.setProperty(BeanShellAssertion.FILENAME, filename.getFilename());    te.setProperty(BeanShellAssertion.PARAMETERS, parameters.getText());    te.setProperty(new BooleanProperty(BeanShellAssertion.RESET_INTERPRETER, resetInterpreter.isSelected()));}
0
public String getLabelResource()
{        return "bsh_assertion_title";}
0
private JPanel createFilenamePanel()
{    JPanel filenamePanel = new JPanel(new BorderLayout());    filenamePanel.add(filename, BorderLayout.CENTER);    return filenamePanel;}
0
private JPanel createResetPanel()
{        resetInterpreter = new JCheckBox(JMeterUtils.getResString("bsh_script_reset_interpreter"));    resetInterpreter.setName(BeanShellAssertion.PARAMETERS);    JPanel resetInterpreterPanel = new JPanel(new BorderLayout());    resetInterpreterPanel.add(resetInterpreter, BorderLayout.WEST);    return resetInterpreterPanel;}
0
private JPanel createParameterPanel()
{        JLabel label = new JLabel(JMeterUtils.getResString("bsh_script_parameters"));    parameters = new JTextField(10);    parameters.setName(BeanShellAssertion.PARAMETERS);    label.setLabelFor(parameters);    JPanel parameterPanel = new JPanel(new BorderLayout(5, 0));    parameterPanel.add(label, BorderLayout.WEST);    parameterPanel.add(parameters, BorderLayout.CENTER);    return parameterPanel;}
0
private void init()
{        setLayout(new BorderLayout(0, 5));    setBorder(makeBorder());    Box box = Box.createVerticalBox();    box.add(makeTitlePanel());    box.add(createResetPanel());    box.add(createParameterPanel());    box.add(createFilenamePanel());    add(box, BorderLayout.NORTH);    JPanel panel = createScriptPanel();    add(panel, BorderLayout.CENTER);        add(Box.createVerticalStrut(panel.getPreferredSize().height), BorderLayout.WEST);}
0
private JPanel createScriptPanel()
{    scriptField = JSyntaxTextArea.getInstance(20, 20);        JLabel label = new JLabel(JMeterUtils.getResString("bsh_assertion_script"));    label.setLabelFor(scriptField);    JPanel panel = new JPanel(new BorderLayout());    panel.add(label, BorderLayout.NORTH);    panel.add(JTextScrollPane.getInstance(scriptField), BorderLayout.CENTER);        JTextArea explain = new JTextArea(JMeterUtils.getResString("bsh_assertion_script_variables"));    explain.setLineWrap(true);    explain.setEditable(false);    explain.setBackground(this.getBackground());    panel.add(explain, BorderLayout.SOUTH);    return panel;}
0
public void clearGui()
{    super.clearGui();        filename.setFilename("");        parameters.setText("");        scriptField.setInitialText("");    resetInterpreter.setSelected(false);}
0
public String getLabelResource()
{        return "duration_assertion_title";}
0
public String getDurationAttributesTitle()
{        return JMeterUtils.getResString("duration_assertion_duration_test");}
0
public TestElement createTestElement()
{    DurationAssertion el = new DurationAssertion();    modifyTestElement(el);    return el;}
0
public void modifyTestElement(TestElement el)
{    configureTestElement(el);    if (el instanceof DurationAssertion) {        DurationAssertion assertion = (DurationAssertion) el;        assertion.setProperty(DurationAssertion.DURATION_KEY, duration.getText());        saveScopeSettings(assertion);    }}
0
public void clearGui()
{    super.clearGui();        duration.setText("");}
0
public void configure(TestElement el)
{    super.configure(el);    if (el instanceof DurationAssertion) {        DurationAssertion da = (DurationAssertion) el;        duration.setText(da.getPropertyAsString(DurationAssertion.DURATION_KEY));        showScopeSettings(da);    }}
0
private void init()
{        setLayout(new BorderLayout(0, 10));    setBorder(makeBorder());    add(makeTitlePanel(), BorderLayout.NORTH);    JPanel mainPanel = new VerticalPanel();    mainPanel.add(createScopePanel());        VerticalPanel durationPanel = new VerticalPanel();    durationPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), getDurationAttributesTitle()));    JPanel labelPanel = new JPanel(new BorderLayout(5, 0));    JLabel durationLabel =     new JLabel(JMeterUtils.getResString("duration_assertion_label"));    labelPanel.add(durationLabel, BorderLayout.WEST);    duration = new JTextField();    labelPanel.add(duration, BorderLayout.CENTER);    durationLabel.setLabelFor(duration);    durationPanel.add(labelPanel);    mainPanel.add(durationPanel);    add(mainPanel, BorderLayout.CENTER);}
0
public String getLabelResource()
{        return "html_assertion_title";}
0
public TestElement createTestElement()
{    HTMLAssertion el = new HTMLAssertion();    modifyTestElement(el);    return el;}
0
public void modifyTestElement(TestElement inElement)
{        configureTestElement(inElement);    String errorThresholdString = errorThresholdField.getText();    long errorThreshold = 0;    try {        errorThreshold = Long.parseLong(errorThresholdString);    } catch (NumberFormatException e) {        errorThreshold = 0;    }    ((HTMLAssertion) inElement).setErrorThreshold(errorThreshold);    String warningThresholdString = warningThresholdField.getText();    long warningThreshold = 0;    try {        warningThreshold = Long.parseLong(warningThresholdString);    } catch (NumberFormatException e) {        warningThreshold = 0;    }    ((HTMLAssertion) inElement).setWarningThreshold(warningThreshold);    String docTypeString = docTypeBox.getSelectedItem().toString();    ((HTMLAssertion) inElement).setDoctype(docTypeString);    boolean trackErrorsOnly = errorsOnly.isSelected();    ((HTMLAssertion) inElement).setErrorsOnly(trackErrorsOnly);    if (htmlRadioButton.isSelected()) {        ((HTMLAssertion) inElement).setHTML();    } else if (xhtmlRadioButton.isSelected()) {        ((HTMLAssertion) inElement).setXHTML();    } else {        ((HTMLAssertion) inElement).setXML();    }    ((HTMLAssertion) inElement).setFilename(filePanel.getFilename());}
1
public void clearGui()
{    super.clearGui();    docTypeBox.setSelectedIndex(0);    htmlRadioButton.setSelected(true);    xhtmlRadioButton.setSelected(false);    xmlRadioButton.setSelected(false);        errorThresholdField.setText("0");        warningThresholdField.setText("0");        filePanel.setFilename("");    errorsOnly.setSelected(false);}
0
public void configure(TestElement inElement)
{    super.configure(inElement);    HTMLAssertion lAssertion = (HTMLAssertion) inElement;    errorThresholdField.setText(String.valueOf(lAssertion.getErrorThreshold()));    warningThresholdField.setText(String.valueOf(lAssertion.getWarningThreshold()));    errorsOnly.setSelected(lAssertion.isErrorsOnly());    docTypeBox.setSelectedItem(lAssertion.getDoctype());    if (lAssertion.isHTML()) {        htmlRadioButton.setSelected(true);    } else if (lAssertion.isXHTML()) {        xhtmlRadioButton.setSelected(true);    } else {        xmlRadioButton.setSelected(true);    }    if (lAssertion.isErrorsOnly()) {        warningThresholdField.setEnabled(false);        warningThresholdField.setEditable(false);    } else {        warningThresholdField.setEnabled(true);        warningThresholdField.setEditable(true);    }    filePanel.setFilename(lAssertion.getFilename());}
0
private void init()
{        setLayout(new BorderLayout(0, 10));    setBorder(makeBorder());    add(makeTitlePanel(), BorderLayout.NORTH);    JPanel mainPanel = new JPanel(new BorderLayout());        VerticalPanel assertionPanel = new VerticalPanel();    assertionPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Tidy Settings"));        HorizontalPanel docTypePanel = new HorizontalPanel();    docTypeBox = new JComboBox<>(new String[] { "omit", "auto", "strict", "loose" });    docTypePanel.add(new JLabel("Doctype:"));    docTypePanel.add(docTypeBox);    assertionPanel.add(docTypePanel);        VerticalPanel formatPanel = new VerticalPanel();    formatPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Format"));        htmlRadioButton = new JRadioButton("HTML", true);        xhtmlRadioButton = new JRadioButton("XHTML", false);        xmlRadioButton = new JRadioButton("XML", false);    ButtonGroup buttonGroup = new ButtonGroup();    buttonGroup.add(htmlRadioButton);    buttonGroup.add(xhtmlRadioButton);    buttonGroup.add(xmlRadioButton);    formatPanel.add(htmlRadioButton);    formatPanel.add(xhtmlRadioButton);    formatPanel.add(xmlRadioButton);    assertionPanel.add(formatPanel);        errorsOnly = new JCheckBox("Errors only", false);    errorsOnly.addActionListener(this);    assertionPanel.add(errorsOnly);        HorizontalPanel thresholdPanel = new HorizontalPanel();    thresholdPanel.add(new JLabel("Error threshold:"));        errorThresholdField = new JTextField("0", 5);    errorThresholdField.setName(ERROR_THRESHOLD_FIELD);    errorThresholdField.addKeyListener(this);    thresholdPanel.add(errorThresholdField);    thresholdPanel.add(new JLabel("Warning threshold:"));        warningThresholdField = new JTextField("0", 5);    warningThresholdField.setName(WARNING_THRESHOLD_FIELD);    warningThresholdField.addKeyListener(this);    thresholdPanel.add(warningThresholdField);    assertionPanel.add(thresholdPanel);            filePanel = new FilePanel(JMeterUtils.getResString("html_assertion_file"), ".txt");    assertionPanel.add(filePanel);    mainPanel.add(assertionPanel, BorderLayout.NORTH);    add(mainPanel, BorderLayout.CENTER);}
0
public void actionPerformed(ActionEvent e)
{    if (errorsOnly.isSelected()) {        warningThresholdField.setEnabled(false);        warningThresholdField.setEditable(false);    } else {        warningThresholdField.setEnabled(true);        warningThresholdField.setEditable(true);    }}
0
public void keyPressed(KeyEvent e)
{}
0
public void keyReleased(KeyEvent e)
{    String fieldName = e.getComponent().getName();    if (fieldName.equals(WARNING_THRESHOLD_FIELD)) {        validateInteger(warningThresholdField);    }    if (fieldName.equals(ERROR_THRESHOLD_FIELD)) {        validateInteger(errorThresholdField);    }}
0
private void validateInteger(JTextField field)
{    try {        Integer.parseInt(field.getText());    } catch (NumberFormatException nfe) {        int length = field.getText().length();        if (length > 0) {            JOptionPane.showMessageDialog(this, "Only digits allowed", "Invalid data", JOptionPane.WARNING_MESSAGE);                        field.setText(field.getText().substring(0, length - 1));        }    }}
0
public void keyTyped(KeyEvent e)
{}
0
 void init()
{    setLayout(new BorderLayout());    setBorder(makeBorder());    add(makeTitlePanel(), BorderLayout.NORTH);    VerticalPanel panel = new VerticalPanel();    panel.setBorder(BorderFactory.createEmptyBorder(5, 0, 5, 0));    initFields();    jsonValidation.addChangeListener(this);    expectNull.addChangeListener(this);    panel.add(jsonPath);    panel.add(jsonValidation);    panel.add(isRegex);    panel.add(jsonValue);    panel.add(expectNull);    panel.add(invert);    add(panel, BorderLayout.CENTER);}
0
protected void initFields()
{    jsonPath = new JLabeledTextField(JMeterUtils.getResString(JSON_ASSERTION_PATH));    jsonValue = new JLabeledTextArea(JMeterUtils.getResString(JSON_ASSERTION_EXPECTED_VALUE));    jsonValidation = new JCheckBox(JMeterUtils.getResString(JSON_ASSERTION_VALIDATION));    expectNull = new JCheckBox(JMeterUtils.getResString(JSON_ASSERTION_NULL));    invert = new JCheckBox(JMeterUtils.getResString(JSON_ASSERTION_INVERT));    isRegex = new JCheckBox(JMeterUtils.getResString(JSON_ASSERTION_REGEX));}
0
public void clearGui()
{    super.clearGui();    jsonPath.setText("");    jsonValue.setText("");    jsonValidation.setSelected(false);    expectNull.setSelected(false);    invert.setSelected(false);    isRegex.setSelected(true);}
0
public TestElement createTestElement()
{    JSONPathAssertion jpAssertion = new JSONPathAssertion();    modifyTestElement(jpAssertion);    return jpAssertion;}
0
public String getLabelResource()
{    return JSON_ASSERTION_TITLE;}
0
public void modifyTestElement(TestElement element)
{    super.configureTestElement(element);    if (element instanceof JSONPathAssertion) {        JSONPathAssertion jpAssertion = (JSONPathAssertion) element;        jpAssertion.setJsonPath(jsonPath.getText());        jpAssertion.setExpectedValue(jsonValue.getText());        jpAssertion.setJsonValidationBool(jsonValidation.isSelected());        jpAssertion.setExpectNull(expectNull.isSelected());        jpAssertion.setInvert(invert.isSelected());        jpAssertion.setIsRegex(isRegex.isSelected());    }}
0
public void configure(TestElement element)
{    super.configure(element);    if (element instanceof JSONPathAssertion) {        JSONPathAssertion jpAssertion = (JSONPathAssertion) element;        jsonPath.setText(jpAssertion.getJsonPath());        jsonValue.setText(jpAssertion.getExpectedValue());        jsonValidation.setSelected(jpAssertion.isJsonValidationBool());        expectNull.setSelected(jpAssertion.isExpectNull());        invert.setSelected(jpAssertion.isInvert());        isRegex.setSelected(jpAssertion.isUseRegex());    }}
0
public void stateChanged(ChangeEvent e)
{    jsonValue.setEnabled(jsonValidation.isSelected() && !expectNull.isSelected());    isRegex.setEnabled(jsonValidation.isSelected() && !expectNull.isSelected());}
0
private void init()
{        setLayout(new BorderLayout(0, 10));    setBorder(makeBorder());    add(makeTitlePanel(), BorderLayout.NORTH);    JPanel mainPanel = new JPanel(new BorderLayout());        HorizontalPanel md5HexPanel = new HorizontalPanel();    md5HexPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("md5hex_assertion_md5hex_test")));        md5HexPanel.add(new JLabel(JMeterUtils.getResString("md5hex_assertion_label")));    md5HexInput = new JTextField(25);    md5HexPanel.add(md5HexInput);    mainPanel.add(md5HexPanel, BorderLayout.NORTH);    add(mainPanel, BorderLayout.CENTER);}
0
public void configure(TestElement el)
{    super.configure(el);    MD5HexAssertion assertion = (MD5HexAssertion) el;    this.md5HexInput.setText(String.valueOf(assertion.getAllowedMD5Hex()));}
0
public String getLabelResource()
{        return "md5hex_assertion_title";}
0
public TestElement createTestElement()
{    MD5HexAssertion el = new MD5HexAssertion();    modifyTestElement(el);    return el;}
0
public void modifyTestElement(TestElement element)
{    configureTestElement(element);    String md5HexString = this.md5HexInput.getText();        if (md5HexString == null || md5HexString.length() == 0) {        md5HexString = "";    }    ((MD5HexAssertion) element).setAllowedMD5Hex(md5HexString);}
0
public void clearGui()
{    super.clearGui();        md5HexInput.setText("");}
0
public String getLabelResource()
{        return "size_assertion_title";}
0
public TestElement createTestElement()
{    SizeAssertion el = new SizeAssertion();    modifyTestElement(el);    return el;}
0
public void modifyTestElement(TestElement el)
{    configureTestElement(el);    SizeAssertion assertion = (SizeAssertion) el;    if (responseHeadersButton.isSelected()) {        assertion.setTestFieldResponseHeaders();    } else if (responseBodyButton.isSelected()) {        assertion.setTestFieldResponseBody();    } else if (responseCodeButton.isSelected()) {        assertion.setTestFieldResponseCode();    } else if (responseMessageButton.isSelected()) {        assertion.setTestFieldResponseMessage();    } else {        assertion.setTestFieldNetworkSize();    }    assertion.setAllowedSize(size.getText());    assertion.setCompOper(getState());    saveScopeSettings(assertion);}
0
public void clearGui()
{    super.clearGui();        responseNetworkButton.setSelected(true);    responseHeadersButton.setSelected(false);    responseBodyButton.setSelected(false);    responseCodeButton.setSelected(false);    responseMessageButton.setSelected(false);        size.setText("");    equalButton.setSelected(true);    notequalButton.setSelected(false);    greaterthanButton.setSelected(false);    lessthanButton.setSelected(false);    greaterthanequalButton.setSelected(false);    lessthanequalButton.setSelected(false);    execState = SizeAssertion.EQUAL;}
0
public void configure(TestElement el)
{    super.configure(el);    SizeAssertion assertion = (SizeAssertion) el;    size.setText(assertion.getAllowedSize());    setState(assertion.getCompOper());    showScopeSettings(assertion, true);    if (assertion.isTestFieldResponseHeaders()) {        responseHeadersButton.setSelected(true);    } else if (assertion.isTestFieldResponseBody()) {        responseBodyButton.setSelected(true);    } else if (assertion.isTestFieldResponseCode()) {        responseCodeButton.setSelected(true);    } else if (assertion.isTestFieldResponseMessage()) {        responseMessageButton.setSelected(true);    } else {        responseNetworkButton.setSelected(true);    }}
0
public void setState(int state)
{    if (state == SizeAssertion.EQUAL) {        equalButton.setSelected(true);        execState = state;    } else if (state == SizeAssertion.NOTEQUAL) {        notequalButton.setSelected(true);        execState = state;    } else if (state == SizeAssertion.GREATERTHAN) {        greaterthanButton.setSelected(true);        execState = state;    } else if (state == SizeAssertion.LESSTHAN) {        lessthanButton.setSelected(true);        execState = state;    } else if (state == SizeAssertion.GREATERTHANEQUAL) {        greaterthanequalButton.setSelected(true);        execState = state;    } else if (state == SizeAssertion.LESSTHANEQUAL) {        lessthanequalButton.setSelected(true);        execState = state;    }}
0
public int getState()
{    return execState;}
0
private void init()
{        setLayout(new VerticalLayout(5, VerticalLayout.BOTH, VerticalLayout.TOP));    setBorder(makeBorder());    add(makeTitlePanel());    add(createScopePanel(true));    add(createFieldPanel());        JPanel sizePanel = new JPanel();    sizePanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("size_assertion_size_test")));        sizePanel.add(new JLabel(JMeterUtils.getResString("size_assertion_label")));    size = new JTextField(12);    sizePanel.add(size);    sizePanel.add(createComparatorButtonPanel());    add(sizePanel);}
0
private JPanel createFieldPanel()
{    JPanel panel = new JPanel();        panel.setBorder(BorderFactory.createTitledBorder(JMeterUtils.getResString("assertion_resp_size_field")));        responseNetworkButton = new JRadioButton(JMeterUtils.getResString("assertion_network_size"));        responseHeadersButton = new JRadioButton(JMeterUtils.getResString("assertion_headers"));        responseBodyButton = new JRadioButton(JMeterUtils.getResString("assertion_body_resp"));        responseCodeButton = new JRadioButton(JMeterUtils.getResString("assertion_code_resp"));        responseMessageButton = new JRadioButton(JMeterUtils.getResString("assertion_message_resp"));    ButtonGroup group = new ButtonGroup();    group.add(responseNetworkButton);    group.add(responseHeadersButton);    group.add(responseBodyButton);    group.add(responseCodeButton);    group.add(responseMessageButton);    panel.add(responseNetworkButton);    panel.add(responseHeadersButton);    panel.add(responseBodyButton);    panel.add(responseCodeButton);    panel.add(responseMessageButton);    responseNetworkButton.setSelected(true);    return panel;}
0
private Box createComparatorButtonPanel()
{    ButtonGroup group = new ButtonGroup();        equalButton = createComparatorButton("=", SizeAssertion.EQUAL, group);        notequalButton = createComparatorButton("!=", SizeAssertion.NOTEQUAL, group);        greaterthanButton = createComparatorButton(">", SizeAssertion.GREATERTHAN, group);        lessthanButton = createComparatorButton("<", SizeAssertion.LESSTHAN, group);        greaterthanequalButton = createComparatorButton(">=", SizeAssertion.GREATERTHANEQUAL, group);        lessthanequalButton = createComparatorButton("<=", SizeAssertion.LESSTHANEQUAL, group);    equalButton.setSelected(true);    execState = Integer.parseInt(equalButton.getActionCommand());        Box checkPanel = Box.createVerticalBox();        JLabel compareLabel = new JLabel(JMeterUtils.getResString("size_assertion_comparator_label"));    checkPanel.add(compareLabel);    checkPanel.add(equalButton);    checkPanel.add(notequalButton);    checkPanel.add(greaterthanButton);    checkPanel.add(lessthanButton);    checkPanel.add(greaterthanequalButton);    checkPanel.add(lessthanequalButton);    return checkPanel;}
0
private JRadioButton createComparatorButton(String name, int value, ButtonGroup group)
{    JRadioButton button = new JRadioButton(name);    button.setActionCommand(String.valueOf(value));    button.addActionListener(this);    group.add(button);    return button;}
0
public void actionPerformed(ActionEvent e)
{    int comparator = Integer.parseInt(e.getActionCommand());    execState = comparator;}
0
public String getLabelResource()
{    return "smime_assertion_title";}
0
public void clearGui()
{    super.clearGui();    issuerDnField.setText("");    messagePositionTf.setText("");    notSigned.setSelected(false);    signerCertFile.setText("");    signerCheckByFile.setSelected(false);    signerCheckConstraints.setSelected(false);    signerDnField.setText("");    signerEmailField.setText("");    signerNoCheck.setSelected(false);    signerSerialNumberField.setText("");}
0
private void init()
{        setLayout(new BorderLayout());    setBorder(makeBorder());    Box box = Box.createVerticalBox();    box.add(makeTitlePanel());    box.add(createSignaturePanel());    box.add(createSignerPanel());    box.add(createMessagePositionPanel());    add(box, BorderLayout.NORTH);}
0
private JPanel createSignaturePanel()
{    JPanel panel = new JPanel();    panel.setBorder(BorderFactory.createTitledBorder(JMeterUtils.getResString(    "smime_assertion_signature")));    notSigned.addChangeListener(evt -> verifySignature.setEnabled(!notSigned.isSelected()));    panel.add(verifySignature);    panel.add(notSigned);    return panel;}
0
private JPanel createSignerPanel()
{    JPanel panel = new JPanel();    panel.setBorder(BorderFactory.createTitledBorder(JMeterUtils.getResString(    "smime_assertion_signer")));    panel.setLayout(new VerticalLayout(5, VerticalLayout.LEFT));    ButtonGroup buttonGroup = new ButtonGroup();    buttonGroup.add(signerNoCheck);    buttonGroup.add(signerCheckConstraints);    buttonGroup.add(signerCheckByFile);    panel.add(signerNoCheck);    panel.add(signerCheckConstraints);    signerCheckConstraints.addChangeListener(evt -> {        boolean signerCC = signerCheckConstraints.isSelected();        signerDnField.setEnabled(signerCC);        signerSerialNumberField.setEnabled(signerCC);        signerEmailField.setEnabled(signerCC);        issuerDnField.setEnabled(signerCC);    });    Box box = Box.createHorizontalBox();        box.add(new JLabel(JMeterUtils.getResString("smime_assertion_signer_dn")));    box.add(Box.createHorizontalStrut(5));    box.add(signerDnField);    panel.add(box);    box = Box.createHorizontalBox();        box.add(new JLabel(JMeterUtils.getResString("smime_assertion_signer_email")));    box.add(Box.createHorizontalStrut(5));    box.add(signerEmailField);    panel.add(box);    box = Box.createHorizontalBox();        box.add(new JLabel(JMeterUtils.getResString("smime_assertion_issuer_dn")));    box.add(Box.createHorizontalStrut(5));    box.add(issuerDnField);    panel.add(box);    box = Box.createHorizontalBox();        box.add(new JLabel(JMeterUtils.getResString("smime_assertion_signer_serial")));    box.add(Box.createHorizontalStrut(5));    box.add(signerSerialNumberField);    panel.add(box);    signerCheckByFile.addChangeListener(evt -> signerCertFile.setEnabled(signerCheckByFile.isSelected()));    box = Box.createHorizontalBox();    box.add(signerCheckByFile);    box.add(Box.createHorizontalStrut(5));    box.add(signerCertFile);    panel.add(box);    return panel;}
0
private JPanel createMessagePositionPanel()
{    JPanel panel = new JPanel();    panel.setBorder(BorderFactory.createTitledBorder(JMeterUtils.getResString(    "smime_assertion_message_position")));    panel.add(messagePositionTf);    return panel;}
0
public void configure(TestElement el)
{    super.configure(el);    SMIMEAssertionTestElement smimeAssertion = (SMIMEAssertionTestElement) el;    verifySignature.setSelected(smimeAssertion.isVerifySignature());    notSigned.setSelected(smimeAssertion.isNotSigned());    if (smimeAssertion.isSignerNoCheck()) {        signerNoCheck.setSelected(true);    }    if (smimeAssertion.isSignerCheckConstraints()) {        signerCheckConstraints.setSelected(true);    }    if (smimeAssertion.isSignerCheckByFile()) {        signerCheckByFile.setSelected(true);    }    issuerDnField.setText(smimeAssertion.getIssuerDn());    signerDnField.setText(smimeAssertion.getSignerDn());    signerSerialNumberField.setText(smimeAssertion.getSignerSerial());    signerEmailField.setText(smimeAssertion.getSignerEmail());    signerCertFile.setText(smimeAssertion.getSignerCertFile());    messagePositionTf.setText(smimeAssertion.getSpecificMessagePosition());}
0
public void modifyTestElement(TestElement el)
{    configureTestElement(el);    SMIMEAssertionTestElement smimeAssertion = (SMIMEAssertionTestElement) el;    smimeAssertion.setVerifySignature(verifySignature.isSelected());    smimeAssertion.setNotSigned(notSigned.isSelected());    smimeAssertion.setIssuerDn(issuerDnField.getText());    smimeAssertion.setSignerDn(signerDnField.getText());    smimeAssertion.setSignerSerial(signerSerialNumberField.getText());    smimeAssertion.setSignerEmail(signerEmailField.getText());    smimeAssertion.setSignerCertFile(signerCertFile.getText());    smimeAssertion.setSignerNoCheck(signerNoCheck.isSelected());    smimeAssertion.setSignerCheckConstraints(signerCheckConstraints.isSelected());    smimeAssertion.setSignerCheckByFile(signerCheckByFile.isSelected());    smimeAssertion.setSpecificMessagePosition(messagePositionTf.getText());}
0
public TestElement createTestElement()
{    SMIMEAssertionTestElement smimeAssertion = new SMIMEAssertionTestElement();    modifyTestElement(smimeAssertion);    return smimeAssertion;}
0
public String getLabelResource()
{        return "xml_assertion_title";}
0
public TestElement createTestElement()
{    XMLAssertion el = new XMLAssertion();    modifyTestElement(el);    return el;}
0
public void modifyTestElement(TestElement el)
{    configureTestElement(el);}
0
private void init()
{        setLayout(new VerticalLayout(5, VerticalLayout.BOTH, VerticalLayout.TOP));    setBorder(makeBorder());    add(makeTitlePanel());}
0
private void init()
{                quiet = new JCheckBox(JMeterUtils.getResString("xpath_tidy_quiet"), true);        reportErrors = new JCheckBox(JMeterUtils.getResString("xpath_tidy_report_errors"), true);        showWarnings = new JCheckBox(JMeterUtils.getResString("xpath_tidy_show_warnings"), true);        namespace = new JCheckBox(JMeterUtils.getResString("xml_namespace_button"));        whitespace = new JCheckBox(JMeterUtils.getResString("xml_whitespace_button"));        validate = new JCheckBox(JMeterUtils.getResString("xml_validate_button"));        tolerant = new JCheckBox(JMeterUtils.getResString("xml_tolerant_button"));    tolerant.addActionListener(e -> tolerant());        downloadDTDs = new JCheckBox(JMeterUtils.getResString("xml_download_dtds"));    Box tidyOptions = Box.createHorizontalBox();    tidyOptions.setBorder(BorderFactory.createEtchedBorder());    tidyOptions.add(tolerant);    tidyOptions.add(quiet);    tidyOptions.add(reportErrors);    tidyOptions.add(showWarnings);    Box untidyOptions = Box.createHorizontalBox();    untidyOptions.setBorder(BorderFactory.createEtchedBorder());    untidyOptions.add(namespace);    untidyOptions.add(validate);    untidyOptions.add(whitespace);    untidyOptions.add(downloadDTDs);    Box options = Box.createVerticalBox();    options.add(tidyOptions);    options.add(untidyOptions);    add(options);    setDefaultValues();}
0
public void setDefaultValues()
{    whitespace.setSelected(false);    validate.setSelected(false);    tolerant.setSelected(false);    namespace.setSelected(false);    quiet.setSelected(true);    reportErrors.setSelected(false);    showWarnings.setSelected(false);    downloadDTDs.setSelected(false);    tolerant();}
0
private void tolerant()
{    final boolean isTolerant = tolerant.isSelected();        validate.setEnabled(!isTolerant);    whitespace.setEnabled(!isTolerant);    namespace.setEnabled(!isTolerant);    downloadDTDs.setEnabled(!isTolerant);        quiet.setEnabled(isTolerant);    reportErrors.setEnabled(isTolerant);    showWarnings.setEnabled(isTolerant);}
0
public void modifyTestElement(XPathAssertion assertion)
{    assertion.setValidating(validate.isSelected());    assertion.setWhitespace(whitespace.isSelected());    assertion.setTolerant(tolerant.isSelected());    assertion.setNamespace(namespace.isSelected());    assertion.setShowWarnings(showWarnings.isSelected());    assertion.setReportErrors(reportErrors.isSelected());    assertion.setQuiet(quiet.isSelected());    assertion.setDownloadDTDs(downloadDTDs.isSelected());}
0
public void modifyTestElement(XPathExtractor extractor)
{    extractor.setValidating(validate.isSelected());    extractor.setWhitespace(whitespace.isSelected());    extractor.setTolerant(tolerant.isSelected());    extractor.setNameSpace(namespace.isSelected());    extractor.setShowWarnings(showWarnings.isSelected());    extractor.setReportErrors(reportErrors.isSelected());    extractor.setQuiet(quiet.isSelected());    extractor.setDownloadDTDs(downloadDTDs.isSelected());}
0
public void configure(XPathAssertion assertion)
{    whitespace.setSelected(assertion.isWhitespace());    validate.setSelected(assertion.isValidating());    tolerant.setSelected(assertion.isTolerant());    namespace.setSelected(assertion.isNamespace());    quiet.setSelected(assertion.isQuiet());    showWarnings.setSelected(assertion.showWarnings());    reportErrors.setSelected(assertion.reportErrors());    downloadDTDs.setSelected(assertion.isDownloadDTDs());    tolerant();}
0
public void configure(XPathExtractor extractor)
{    whitespace.setSelected(extractor.isWhitespace());    validate.setSelected(extractor.isValidating());    tolerant.setSelected(extractor.isTolerant());    namespace.setSelected(extractor.useNameSpace());    quiet.setSelected(extractor.isQuiet());    showWarnings.setSelected(extractor.showWarnings());    reportErrors.setSelected(extractor.reportErrors());    downloadDTDs.setSelected(extractor.isDownloadDTDs());    tolerant();}
0
public String getLabelResource()
{        return "xmlschema_assertion_title";}
0
public TestElement createTestElement()
{        XMLSchemaAssertion el = new XMLSchemaAssertion();    modifyTestElement(el);    return el;}
1
public void modifyTestElement(TestElement inElement)
{        configureTestElement(inElement);    ((XMLSchemaAssertion) inElement).setXsdFileName(xmlSchema.getText());}
1
public void clearGui()
{    super.clearGui();        xmlSchema.setText("");}
0
public void configure(TestElement el)
{    super.configure(el);    XMLSchemaAssertion assertion = (XMLSchemaAssertion) el;    xmlSchema.setText(assertion.getXsdFileName());}
0
private void init()
{        setLayout(new BorderLayout(0, 10));    setBorder(makeBorder());    add(makeTitlePanel(), BorderLayout.NORTH);    JPanel mainPanel = new JPanel(new BorderLayout());        VerticalPanel assertionPanel = new VerticalPanel();    assertionPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "XML Schema"));        HorizontalPanel xmlSchemaPanel = new HorizontalPanel();        xmlSchemaPanel.add(new JLabel(JMeterUtils.getResString("xmlschema_assertion_label")));    xmlSchema = new JTextField(26);    xmlSchemaPanel.add(xmlSchema);    assertionPanel.add(xmlSchemaPanel);    mainPanel.add(assertionPanel, BorderLayout.NORTH);    add(mainPanel, BorderLayout.CENTER);}
0
public String getLabelResource()
{        return "xpath2_assertion_title";}
0
public TestElement createTestElement()
{    XPath2Assertion el = new XPath2Assertion();    modifyTestElement(el);    return el;}
0
public String getXPathAttributesTitle()
{        return JMeterUtils.getResString("xpath2_assertion_test");}
0
public void configure(TestElement el)
{    super.configure(el);    XPath2Assertion assertion = (XPath2Assertion) el;    showScopeSettings(assertion, true);    xpath.setXPath(assertion.getXPathString());    xpath.setNegated(assertion.isNegated());    xpath.setNamespaces(assertion.getNamespaces());}
0
private void init()
{        setLayout(new BorderLayout());    setBorder(makeBorder());    Box topBox = Box.createVerticalBox();    topBox.add(makeTitlePanel());    topBox.add(createScopePanel(true));    add(topBox, BorderLayout.NORTH);        JPanel sizePanel = new JPanel(new BorderLayout());    sizePanel.setBorder(BorderFactory.createEmptyBorder(0, 10, 10, 10));    sizePanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), getXPathAttributesTitle()));    xpath = new XPath2Panel();    sizePanel.add(xpath);    add(sizePanel, BorderLayout.CENTER);}
0
public void modifyTestElement(TestElement el)
{    super.configureTestElement(el);    if (el instanceof XPath2Assertion) {        XPath2Assertion assertion = (XPath2Assertion) el;        saveScopeSettings(assertion);        assertion.setNegated(xpath.isNegated());        assertion.setXPathString(xpath.getXPath());        assertion.setNamespaces(xpath.getNamespaces());    }}
0
public void clearGui()
{    super.clearGui();        xpath.setXPath("/");    xpath.setNegated(false);    xpath.setNamespaces("");}
0
public String getNamespaces()
{    return this.namespacesTA.getText();}
0
public void setNamespaces(String namespaces)
{    this.namespacesTA.setText(namespaces);}
0
private void init()
{            setLayout(new BorderLayout());    Box topBox = Box.createVerticalBox();    Box box = Box.createHorizontalBox();    box.add(getNegatedCheckBox());    box.add(Box.createHorizontalGlue());    box.add(getCheckXPathButton());    box.add(Box.createHorizontalGlue());    box.add(Box.createHorizontalGlue());    box.add(Box.createHorizontalGlue());    topBox.add(box);    topBox.add(makeParameterPanel());    add(topBox, BorderLayout.NORTH);    add(JTextScrollPane.getInstance(getXPathField()), BorderLayout.CENTER);    setDefaultValues();}
0
private JPanel makeParameterPanel()
{    JPanel panel = new JPanel(new GridBagLayout());    GridBagConstraints gbc = new GridBagConstraints();    initConstraints(gbc);    panel.add(new JLabel(JMeterUtils.getResString("xpath_extractor_user_namespaces")), gbc.clone());    gbc.gridx++;    gbc.weightx = 1;    gbc.fill = GridBagConstraints.HORIZONTAL;    namespacesTA = JSyntaxTextArea.getInstance(5, 80);    panel.add(JTextScrollPane.getInstance(namespacesTA, true), gbc.clone());    resetContraints(gbc);    return panel;}
0
private void resetContraints(GridBagConstraints gbc)
{    gbc.gridx = 0;    gbc.gridy++;    gbc.weightx = 0;    gbc.gridwidth = 1;    gbc.fill = GridBagConstraints.NONE;}
0
private void initConstraints(GridBagConstraints gbc)
{    gbc.anchor = GridBagConstraints.NORTHWEST;    gbc.fill = GridBagConstraints.NONE;    gbc.gridheight = 1;    gbc.gridwidth = 1;    gbc.gridx = 0;    gbc.gridy = 0;    gbc.weightx = 0;    gbc.weighty = 0;}
0
public void setDefaultValues()
{        setXPath("/");    setNegated(false);}
0
public String getXPath()
{    return this.xpath.getText();}
0
public void setXPath(String xpath)
{    this.xpath.setInitialText(xpath);}
0
public boolean isNegated()
{    return this.negated.isSelected();}
0
public void setNegated(boolean negated)
{    this.negated.setSelected(negated);}
0
public JCheckBox getNegatedCheckBox()
{    if (negated == null) {                negated = new JCheckBox(JMeterUtils.getResString("xpath2_assertion_negate"), false);    }    return negated;}
0
public JButton getCheckXPathButton()
{    if (checkXPath == null) {                checkXPath = new JButton(JMeterUtils.getResString("xpath2_assertion_button"));        checkXPath.addActionListener(e -> validXPath(xpath.getText(), true, this.getNamespaces()));    }    return checkXPath;}
0
public JSyntaxTextArea getXPathField()
{    if (xpath == null) {        xpath = JSyntaxTextArea.getInstance(20, 80);                xpath.setLanguage("xpath");    }    return xpath;}
0
public boolean isShowNegated()
{    return this.getNegatedCheckBox().isVisible();}
0
public void setShowNegated(boolean showNegate)
{    getNegatedCheckBox().setVisible(showNegate);}
0
public static boolean validXPath(String xpathString, boolean showDialog, String namespaces)
{    String ret = null;    boolean success = true;    Document testDoc = null;    try {        testDoc = XPathUtil.makeDocumentBuilder(false, false, false, false).newDocument();                Element el = testDoc.createElement("root");        testDoc.appendChild(el);        XPathUtil.validateXPath2(testDoc, xpathString, namespaces);    } catch (IllegalArgumentException | ParserConfigurationException | TransformerException e) {                success = false;        ret = e.getLocalizedMessage();    }    if (showDialog) {        JOptionPane.showMessageDialog(null,         success ? JMeterUtils.getResString("xpath_assertion_valid") : ret,         success ?         JMeterUtils.getResString("xpath_assertion_valid") :         JMeterUtils.getResString("xpath_assertion_failed"),         success ?         JOptionPane.INFORMATION_MESSAGE : JOptionPane.ERROR_MESSAGE);    }    return success;}
1
public String getLabelResource()
{        return "xpath_assertion_title";}
0
public TestElement createTestElement()
{    XPathAssertion el = new XPathAssertion();    modifyTestElement(el);    return el;}
0
public String getXPathAttributesTitle()
{        return JMeterUtils.getResString("xpath_assertion_test");}
0
public void configure(TestElement el)
{    super.configure(el);    XPathAssertion assertion = (XPathAssertion) el;    showScopeSettings(assertion, true);    xpath.setXPath(assertion.getXPathString());    xpath.setNegated(assertion.isNegated());    xml.configure(assertion);}
0
private void init()
{        setLayout(new BorderLayout());    setBorder(makeBorder());    Box topBox = Box.createVerticalBox();    topBox.add(makeTitlePanel());    topBox.add(createScopePanel(true));    xml = new XMLConfPanel();    xml.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), JMeterUtils.getResString(    "xpath_assertion_option")));    topBox.add(xml);    add(topBox, BorderLayout.NORTH);        JPanel sizePanel = new JPanel(new BorderLayout());    sizePanel.setBorder(BorderFactory.createEmptyBorder(0, 10, 10, 10));    sizePanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), getXPathAttributesTitle()));    xpath = new XPathPanel();    sizePanel.add(xpath);    add(sizePanel, BorderLayout.CENTER);}
0
public void modifyTestElement(TestElement el)
{    super.configureTestElement(el);    if (el instanceof XPathAssertion) {        XPathAssertion assertion = (XPathAssertion) el;        saveScopeSettings(assertion);        assertion.setNegated(xpath.isNegated());        assertion.setXPathString(xpath.getXPath());        xml.modifyTestElement(assertion);    }}
0
public void clearGui()
{    super.clearGui();        xpath.setXPath("/");    xpath.setNegated(false);    xml.setDefaultValues();}
0
private void init()
{        setLayout(new BorderLayout());    Box hbox = Box.createHorizontalBox();    hbox.add(Box.createHorizontalGlue());    hbox.add(getNegatedCheckBox());    hbox.add(Box.createHorizontalGlue());    hbox.add(getCheckXPathButton());    hbox.add(Box.createHorizontalGlue());    add(JTextScrollPane.getInstance(getXPathField()), BorderLayout.CENTER);    add(hbox, BorderLayout.NORTH);    setDefaultValues();}
0
public void setDefaultValues()
{        setXPath("/");    setNegated(false);}
0
public String getXPath()
{    return this.xpath.getText();}
0
public void setXPath(String xpath)
{    this.xpath.setInitialText(xpath);}
0
public boolean isNegated()
{    return this.negated.isSelected();}
0
public void setNegated(boolean negated)
{    this.negated.setSelected(negated);}
0
public JCheckBox getNegatedCheckBox()
{    if (negated == null) {                negated = new JCheckBox(JMeterUtils.getResString("xpath_assertion_negate"), false);    }    return negated;}
0
public JButton getCheckXPathButton()
{    if (checkXPath == null) {                checkXPath = new JButton(JMeterUtils.getResString("xpath_assertion_button"));        checkXPath.addActionListener(e -> validXPath(xpath.getText(), true));    }    return checkXPath;}
0
public JSyntaxTextArea getXPathField()
{    if (xpath == null) {        xpath = JSyntaxTextArea.getInstance(20, 80);                xpath.setLanguage("xpath");    }    return xpath;}
0
public boolean isShowNegated()
{    return this.getNegatedCheckBox().isVisible();}
0
public void setShowNegated(boolean showNegate)
{    getNegatedCheckBox().setVisible(showNegate);}
0
public static boolean validXPath(String xpathString, boolean showDialog)
{    String ret = null;    boolean success = true;    Document testDoc = null;    try {        testDoc = XPathUtil.makeDocumentBuilder(false, false, false, false).newDocument();                Element el = testDoc.createElement("root");        testDoc.appendChild(el);        XPathUtil.validateXPath(testDoc, xpathString);    } catch (IllegalArgumentException | ParserConfigurationException | TransformerException e) {                success = false;        ret = e.getLocalizedMessage();    }    if (showDialog) {        JOptionPane.showMessageDialog(null,         success ? JMeterUtils.getResString("xpath_assertion_valid") : ret,         success ?         JMeterUtils.getResString("xpath_assertion_valid") :         JMeterUtils.getResString("xpath_assertion_failed"),         success ?         JOptionPane.INFORMATION_MESSAGE : JOptionPane.ERROR_MESSAGE);    }    return success;}
1
public AssertionResult getResult(SampleResult inResponse)
{        if (inResponse.getResponseData().length == 0) {        return new AssertionResult(getName()).setResultForNull();    }    return runTidy(inResponse);}
1
private AssertionResult runTidy(SampleResult inResponse)
{    AssertionResult result = new AssertionResult(getName());    result.setFailure(false);        Tidy tidy = getTidy();    if (tidy == null) {        result.setFailure(true);        result.setFailureMessage("Unable to instantiate tidy parser");                return result;    }    /*         * Run tidy.         */    try {                StringWriter errbuf = new StringWriter();        tidy.setErrout(new PrintWriter(errbuf));        ByteArrayOutputStream os = new ByteArrayOutputStream();                Node node = tidy.parse(new ByteArrayInputStream(inResponse.getResponseData()), os);                        writeOutput(errbuf.toString());                final boolean errorsAboveThreshold = tidy.getParseErrors() > getErrorThreshold();        final boolean warningsAboveThreshold = tidy.getParseWarnings() > getWarningThreshold();        if (errorsAboveThreshold || (!isErrorsOnly() && warningsAboveThreshold)) {                        result.setFailure(true);            result.setFailureMessage(MessageFormat.format("Tidy Parser errors:   " + tidy.getParseErrors() + " (allowed " + getErrorThreshold() + ") " + "Tidy Parser warnings: " + tidy.getParseWarnings() + " (allowed " + getWarningThreshold() + ")", new Object[0]));                } else if (tidy.getParseErrors() > 0 || tidy.getParseWarnings() > 0) {                                    result.setFailure(false);        } else {                                    result.setFailure(false);        }    } catch (Exception e) {                        result.setFailure(true);        result.setFailureMessage(e.getMessage());    }    return result;}
1
private Tidy getTidy()
{    try {        Tidy tidy;        if (log.isDebugEnabled()) {                    }        tidy = new Tidy();        tidy.setInputEncoding(StandardCharsets.UTF_8.name());        tidy.setOutputEncoding(StandardCharsets.UTF_8.name());        tidy.setQuiet(false);        tidy.setShowWarnings(true);        tidy.setOnlyErrors(isErrorsOnly());        tidy.setDocType(getDoctype());        if (isXHTML()) {            tidy.setXHTML(true);        } else if (isXML()) {            tidy.setXmlTags(true);        }        tidy.setErrfile(getFilename());        if (log.isDebugEnabled()) {                    }        return tidy;    } catch (Exception e) {                return null;    }}
1
private void writeOutput(String inOutput)
{    String filename = getFilename();        if (StringUtils.isNotBlank(filename)) {        try (FileWriter writer = new FileWriter(filename, false)) {                        writer.write(inOutput);                    } catch (IOException ex) {                    }    }}
1
public String getDoctype()
{    return getPropertyAsString(DOCTYPE_KEY);}
0
public boolean isErrorsOnly()
{    return getPropertyAsBoolean(ERRORS_ONLY_KEY);}
0
public long getErrorThreshold()
{    return getPropertyAsLong(ERROR_THRESHOLD_KEY);}
0
public long getWarningThreshold()
{    return getPropertyAsLong(WARNING_THRESHOLD_KEY);}
0
public void setDoctype(String inDoctype)
{    if (StringUtils.isAllBlank(inDoctype)) {        setProperty(new StringProperty(DOCTYPE_KEY, DEFAULT_DOCTYPE));    } else {        setProperty(new StringProperty(DOCTYPE_KEY, inDoctype));    }}
0
public void setErrorsOnly(boolean inErrorsOnly)
{    setProperty(new BooleanProperty(ERRORS_ONLY_KEY, inErrorsOnly));}
0
private long capToZero(long value)
{    if (value == Long.MAX_VALUE) {        return 0;    }    return value;}
0
public void setErrorThreshold(long inErrorThreshold)
{    if (inErrorThreshold < 0L) {                throw new IllegalArgumentException(JMeterUtils.getResString("argument_must_not_be_negative"));    }    setProperty(new LongProperty(ERROR_THRESHOLD_KEY, capToZero(inErrorThreshold)));}
0
public void setWarningThreshold(long inWarningThreshold)
{    if (inWarningThreshold < 0L) {                throw new IllegalArgumentException(JMeterUtils.getResString("argument_must_not_be_negative"));    }    setProperty(new LongProperty(WARNING_THRESHOLD_KEY, capToZero(inWarningThreshold)));}
0
public void setHTML()
{    setProperty(new LongProperty(FORMAT_KEY, 0));}
0
public boolean isHTML()
{    return getPropertyAsLong(FORMAT_KEY) == 0;}
0
public void setXHTML()
{    setProperty(new LongProperty(FORMAT_KEY, 1));}
0
public boolean isXHTML()
{    return getPropertyAsLong(FORMAT_KEY) == 1;}
0
public void setXML()
{    setProperty(new LongProperty(FORMAT_KEY, 2));}
0
public boolean isXML()
{    return getPropertyAsLong(FORMAT_KEY) == 2;}
0
public String getFilename()
{    return getPropertyAsString(FILENAME_KEY);}
0
public void setFilename(String inName)
{    setProperty(FILENAME_KEY, inName);}
0
protected final void initFields()
{        super.jsonPath = new JLabeledTextField(JMeterUtils.getResString(JMES_ASSERTION_PATH));    super.jsonValue = new JLabeledTextArea(JMeterUtils.getResString(JMES_ASSERTION_EXPECTED_VALUE));    super.jsonValidation = new JCheckBox(JMeterUtils.getResString(JMES_ASSERTION_VALIDATION));    super.expectNull = new JCheckBox(JMeterUtils.getResString(JMES_ASSERTION_NULL));    super.invert = new JCheckBox(JMeterUtils.getResString(JMES_ASSERTION_INVERT));    super.isRegex = new JCheckBox(JMeterUtils.getResString(JMES_ASSERTION_REGEX));}
0
public TestElement createTestElement()
{    JMESPathAssertion jmesAssertion = new JMESPathAssertion();    modifyTestElement(jmesAssertion);    return jmesAssertion;}
0
public String getLabelResource()
{    return JMES_ASSERTION_TITLE;}
0
public void modifyTestElement(TestElement element)
{    super.configureTestElement(element);    if (element instanceof JMESPathAssertion) {        JMESPathAssertion jmesAssertion = (JMESPathAssertion) element;        jmesAssertion.setJmesPath(jsonPath.getText());        jmesAssertion.setExpectedValue(jsonValue.getText());        jmesAssertion.setJsonValidationBool(jsonValidation.isSelected());        jmesAssertion.setExpectNull(expectNull.isSelected());        jmesAssertion.setInvert(invert.isSelected());        jmesAssertion.setIsRegex(isRegex.isSelected());    }}
0
public void configure(TestElement element)
{    super.configure(element);    if (element instanceof JMESPathAssertion) {        JMESPathAssertion jmesAssertion = (JMESPathAssertion) element;        jsonPath.setText(jmesAssertion.getJmesPath());        jsonValue.setText(jmesAssertion.getExpectedValue());        jsonValidation.setSelected(jmesAssertion.isJsonValidationBool());        expectNull.setSelected(jmesAssertion.isExpectNull());        invert.setSelected(jmesAssertion.isInvert());        isRegex.setSelected(jmesAssertion.isUseRegex());    }}
0
private void doAssert(AssertionResult assertionResult, String responseDataAsJsonString, boolean invert) throws Exception
{        JsonNode input = OBJECT_MAPPER.readValue(responseDataAsJsonString, JsonNode.class);                Expression<JsonNode> expression = JMESPathCache.getInstance().get(getJmesPath());        JsonNode currentValue = expression.search(input);        boolean success = checkResult(OBJECT_MAPPER, currentValue, assertionResult, invert);    if (!invert) {        if (!success) {            failAssertion(invert, assertionResult);        }    } else {        if (success) {            failAssertion(invert, assertionResult);        }    }}
1
private String buildFailureMessage(boolean invert)
{    StringBuilder message = new StringBuilder();    if (!isJsonValidationBool()) {        message.append("JMESPATH ").append(getJmesPath()).append(" expected");        if (invert) {            message.append(" not");        }        message.append(" to exist");    } else {        message.append("Value expected");        if (isExpectNull()) {            if (invert) {                message.append(" not");            }            message.append(" to be null");        } else {            if (isUseRegex()) {                if (invert) {                    message.append(" not");                }                message.append(" to match ");                message.append(getExpectedValue());            } else {                if (invert) {                    message.append(" not");                }                message.append(" to be equal to ");                message.append(getExpectedValue());            }        }    }    return message.toString();}
0
private boolean checkResult(ObjectMapper mapper, JsonNode jsonNode, AssertionResult result, boolean invert) throws JsonProcessingException
{    if (!isJsonValidationBool()) {        return !(jsonNode instanceof NullNode);    }    if (isExpectNull()) {        return jsonNode instanceof NullNode;    } else {        return isEquals(mapper, jsonNode);    }}
0
private AssertionResult failAssertion(boolean invert, AssertionResult assertionResult)
{    assertionResult.setFailure(true);    assertionResult.setFailureMessage(buildFailureMessage(invert));    return assertionResult;}
0
public AssertionResult getResult(SampleResult samplerResult)
{    AssertionResult result = new AssertionResult(getName());    String responseData = samplerResult.getResponseDataAsString();    if (responseData.isEmpty()) {        return result.setResultForNull();    }    result.setFailure(false);    result.setFailureMessage("");    try {        doAssert(result, responseData, isInvert());    } catch (Exception e) {        if (!isInvert()) {            result.setError(true);            result.setFailureMessage(e.getMessage());        }    }    return result;}
0
public static String objectToString(ObjectMapper mapper, JsonNode element) throws JsonProcessingException
{    if (element.isTextual()) {        return element.asText();    } else {        return mapper.writeValueAsString(element);    }}
0
private boolean isEquals(ObjectMapper mapper, JsonNode jsonNode) throws JsonProcessingException
{    String str = objectToString(mapper, jsonNode);    if (isUseRegex()) {        Pattern pattern = JMeterUtils.getPatternCache().getPattern(getExpectedValue());        return JMeterUtils.getMatcher().matches(str, pattern);    } else {        return str.equals(getExpectedValue());    }}
0
public void testStarted()
{    testStarted("");}
0
public void testStarted(String host)
{}
0
public void testEnded()
{    testEnded("");}
0
public void testEnded(String host)
{    JMESPathCache.getInstance().cleanUp();}
0
public String getJmesPath()
{    return getPropertyAsString(JMESPATH);}
0
public void setJmesPath(String jmesPath)
{    setProperty(JMESPATH, jmesPath);}
0
public String getExpectedValue()
{    return getPropertyAsString(EXPECTEDVALUE);}
0
public void setExpectedValue(String expectedValue)
{    setProperty(EXPECTEDVALUE, expectedValue);}
0
public void setJsonValidationBool(boolean jsonValidation)
{    setProperty(JSONVALIDATION, jsonValidation);}
0
public void setExpectNull(boolean val)
{    setProperty(EXPECT_NULL, val);}
0
public boolean isExpectNull()
{    return getPropertyAsBoolean(EXPECT_NULL);}
0
public boolean isJsonValidationBool()
{    return getPropertyAsBoolean(JSONVALIDATION);}
0
public void setInvert(boolean invert)
{    setProperty(INVERT, invert);}
0
public boolean isInvert()
{    return getPropertyAsBoolean(INVERT);}
0
public void setIsRegex(boolean flag)
{    setProperty(ISREGEX, flag);}
0
public boolean isUseRegex()
{    return getPropertyAsBoolean(ISREGEX, true);}
0
private static DecimalFormat createDecimalFormat()
{    DecimalFormat decimalFormatter = new DecimalFormat("#.#");        decimalFormatter.setMaximumFractionDigits(340);    decimalFormatter.setMinimumFractionDigits(1);    return decimalFormatter;}
0
public String getJsonPath()
{    return getPropertyAsString(JSONPATH);}
0
public void setJsonPath(String jsonPath)
{    setProperty(JSONPATH, jsonPath);}
0
public String getExpectedValue()
{    return getPropertyAsString(EXPECTEDVALUE);}
0
public void setExpectedValue(String expectedValue)
{    setProperty(EXPECTEDVALUE, expectedValue);}
0
public void setJsonValidationBool(boolean jsonValidation)
{    setProperty(JSONVALIDATION, jsonValidation);}
0
public void setExpectNull(boolean val)
{    setProperty(EXPECT_NULL, val);}
0
public boolean isExpectNull()
{    return getPropertyAsBoolean(EXPECT_NULL);}
0
public boolean isJsonValidationBool()
{    return getPropertyAsBoolean(JSONVALIDATION);}
0
public void setInvert(boolean invert)
{    setProperty(INVERT, invert);}
0
public boolean isInvert()
{    return getPropertyAsBoolean(INVERT);}
0
public void setIsRegex(boolean flag)
{    setProperty(ISREGEX, flag);}
0
public boolean isUseRegex()
{    return getPropertyAsBoolean(ISREGEX, true);}
0
private void doAssert(String jsonString)
{    Object value = JsonPath.read(jsonString, getJsonPath());    if (!isJsonValidationBool()) {        return;    }    if (value instanceof JSONArray) {        if (arrayMatched((JSONArray) value)) {            return;        }    } else {        if (isExpectNull() && value == null) {            return;        } else if (isEquals(value)) {            return;        }    }    if (isExpectNull()) {        throw new IllegalStateException(String.format("Value expected to be null, but found '%s'", value));    } else {        String msg;        if (isUseRegex()) {            msg = "Value expected to match regexp '%s', but it did not match: '%s'";        } else {            msg = "Value expected to be '%s', but found '%s'";        }        throw new IllegalStateException(String.format(msg, getExpectedValue(), objectToString(value)));    }}
0
private boolean arrayMatched(JSONArray value)
{    if (value.isEmpty() && "[]".equals(getExpectedValue())) {        return true;    }    for (Object subj : value.toArray()) {        if ((subj == null && isExpectNull()) || isEquals(subj)) {            return true;        }    }    return isEquals(value);}
0
private boolean isEquals(Object subj)
{    String str = objectToString(subj);    if (isUseRegex()) {        Pattern pattern = JMeterUtils.getPatternCache().getPattern(getExpectedValue());        return JMeterUtils.getMatcher().matches(str, pattern);    } else {        return str.equals(getExpectedValue());    }}
0
public AssertionResult getResult(SampleResult samplerResult)
{    AssertionResult result = new AssertionResult(getName());    String responseData = samplerResult.getResponseDataAsString();    if (responseData.isEmpty()) {        return result.setResultForNull();    }    result.setFailure(false);    result.setFailureMessage("");    if (!isInvert()) {        try {            doAssert(responseData);        } catch (Exception e) {                        result.setFailure(true);            result.setFailureMessage(e.getMessage());        }    } else {        try {            doAssert(responseData);            result.setFailure(true);            if (isJsonValidationBool()) {                if (isExpectNull()) {                    result.setFailureMessage("Failed that JSONPath " + getJsonPath() + " not matches null");                } else {                    result.setFailureMessage("Failed that JSONPath " + getJsonPath() + " not matches " + getExpectedValue());                }            } else {                result.setFailureMessage("Failed that JSONPath not exists: " + getJsonPath());            }        } catch (Exception e) {                    }    }    return result;}
1
public static String objectToString(Object subj)
{    String str;    if (subj == null) {        str = "null";    } else if (subj instanceof Map) {                str = new JSONObject((Map<String, ?>) subj).toJSONString();    } else if (subj instanceof Double || subj instanceof Float) {        str = decimalFormatter.get().format(subj);    } else {        str = subj.toString();    }    return str;}
0
public void threadStarted()
{}
0
public void threadFinished()
{    decimalFormatter.remove();}
0
public AssertionResult getResult(SampleResult response)
{    AssertionResult result = new AssertionResult(getName());    try {        ScriptEngine scriptEngine = getScriptEngine();        Bindings bindings = scriptEngine.createBindings();        bindings.put("SampleResult", response);        bindings.put("AssertionResult", result);        processFileOrScript(scriptEngine, bindings);        result.setError(false);    } catch (IOException | ScriptException e) {                result.setError(true);        result.setFailureMessage(e.toString());    }    return result;}
1
public Object clone()
{    return super.clone();}
0
public void warning(SAXParseException exception) throws SAXException
{    }
1
public void error(SAXParseException exception) throws SAXException
{    }
1
public void fatalError(SAXParseException exception) throws SAXException
{    }
1
public AssertionResult getResult(SampleResult response)
{    AssertionResult result = new AssertionResult(getName());    result.setFailure(false);    byte[] resultData = response.getResponseData();    if (resultData.length == 0) {        result.setError(false);        result.setFailure(true);        result.setFailureMessage("Response was null");        return result;    }        if (getAllowedMD5Hex().isEmpty()) {        result.setError(false);        result.setFailure(true);        result.setFailureMessage("MD5Hex to test against is empty");        return result;    }    String md5Result = md5Hex(resultData);    if (!md5Result.equalsIgnoreCase(getAllowedMD5Hex())) {        result.setFailure(true);        Object[] arguments = { md5Result, getAllowedMD5Hex() };        String message = MessageFormat.format(        JMeterUtils.getResString("md5hex_assertion_failure"), arguments);        result.setFailureMessage(message);    }    return result;}
0
public void setAllowedMD5Hex(String hex)
{    setProperty(new StringProperty(MD5HexAssertion.MD5HEX_KEY, hex));}
0
public String getAllowedMD5Hex()
{    return getPropertyAsString(MD5HexAssertion.MD5HEX_KEY);}
0
private static String md5Hex(byte[] bytes)
{    byte[] md5Result = {};    try {        md5Result = MessageDigest.getInstance("MD5").digest(bytes);    } catch (NoSuchAlgorithmException e) {            }    return JOrphanUtils.baToHexString(md5Result);}
1
public void clear()
{    super.clear();    setProperty(new CollectionProperty(TEST_STRINGS, new ArrayList<String>()));}
0
private void setTestField(String testField)
{    setProperty(TEST_FIELD, testField);}
0
public void setTestFieldURL()
{    setTestField(SAMPLE_URL);}
0
public void setTestFieldResponseCode()
{    setTestField(RESPONSE_CODE);}
0
public void setTestFieldResponseData()
{    setTestField(RESPONSE_DATA);}
0
public void setTestFieldResponseDataAsDocument()
{    setTestField(RESPONSE_DATA_AS_DOCUMENT);}
0
public void setTestFieldResponseMessage()
{    setTestField(RESPONSE_MESSAGE);}
0
public void setTestFieldResponseHeaders()
{    setTestField(RESPONSE_HEADERS);}
0
public void setTestFieldRequestHeaders()
{    setTestField(REQUEST_HEADERS);}
0
public void setTestFieldRequestData()
{    setTestField(REQUEST_DATA);}
0
public void setCustomFailureMessage(String customFailureMessage)
{    setProperty(CUSTOM_MESSAGE, customFailureMessage);}
0
public String getCustomFailureMessage()
{    return getPropertyAsString(CUSTOM_MESSAGE);}
0
public boolean isTestFieldURL()
{    return SAMPLE_URL.equals(getTestField());}
0
public boolean isTestFieldResponseCode()
{    return RESPONSE_CODE.equals(getTestField());}
0
public boolean isTestFieldResponseData()
{    return RESPONSE_DATA.equals(getTestField());}
0
public boolean isTestFieldResponseDataAsDocument()
{    return RESPONSE_DATA_AS_DOCUMENT.equals(getTestField());}
0
public boolean isTestFieldResponseMessage()
{    return RESPONSE_MESSAGE.equals(getTestField());}
0
public boolean isTestFieldResponseHeaders()
{    return RESPONSE_HEADERS.equals(getTestField());}
0
public boolean isTestFieldRequestHeaders()
{    return REQUEST_HEADERS.equals(getTestField());}
0
public boolean isTestFieldRequestData()
{    return REQUEST_DATA.equals(getTestField());}
0
private void setTestType(int testType)
{    setProperty(new IntegerProperty(TEST_TYPE, testType));}
0
private void setTestTypeMasked(int testType)
{    int value = getTestType() & ~TYPE_MASK | testType;    setProperty(new IntegerProperty(TEST_TYPE, value));}
0
public void addTestString(String testString)
{    getTestStrings().addProperty(new StringProperty(String.valueOf(testString.hashCode()), testString));}
0
public void clearTestStrings()
{    getTestStrings().clear();}
0
public AssertionResult getResult(SampleResult response)
{    return evaluateResponse(response);}
0
public String getTestField()
{    return getPropertyAsString(TEST_FIELD);}
0
public int getTestType()
{    JMeterProperty type = getProperty(TEST_TYPE);    if (type instanceof NullProperty) {        return CONTAINS;    }    return type.getIntValue();}
0
public CollectionProperty getTestStrings()
{    return (CollectionProperty) getProperty(TEST_STRINGS);}
0
public boolean isEqualsType()
{    return (getTestType() & EQUALS) != 0;}
0
public boolean isSubstringType()
{    return (getTestType() & SUBSTRING) != 0;}
0
public boolean isContainsType()
{    return (getTestType() & CONTAINS) != 0;}
0
public boolean isMatchType()
{    return (getTestType() & MATCH) != 0;}
0
public boolean isNotType()
{    return (getTestType() & NOT) != 0;}
0
public boolean isOrType()
{    return (getTestType() & OR) != 0;}
0
public void setToContainsType()
{    setTestTypeMasked(CONTAINS);}
0
public void setToMatchType()
{    setTestTypeMasked(MATCH);}
0
public void setToEqualsType()
{    setTestTypeMasked(EQUALS);}
0
public void setToSubstringType()
{    setTestTypeMasked(SUBSTRING);}
0
public void setToNotType()
{    setTestType(getTestType() | NOT);}
0
public void unsetNotType()
{    setTestType(getTestType() & ~NOT);}
0
public void setToOrType()
{    setTestType(getTestType() | OR);}
0
public void unsetOrType()
{    setTestType(getTestType() & ~OR);}
0
public boolean getAssumeSuccess()
{    return getPropertyAsBoolean(ASSUME_SUCCESS, false);}
0
public void setAssumeSuccess(boolean b)
{    setProperty(ASSUME_SUCCESS, b);}
0
private AssertionResult evaluateResponse(SampleResult response)
{    AssertionResult result = new AssertionResult(getName());    if (getAssumeSuccess()) {                response.setSuccessful(true);    }    String toCheck = getStringToCheck(response);    result.setFailure(false);    result.setError(false);    int testType = getTestType();    boolean notTest = (NOT & testType) > 0;    boolean orTest = (OR & testType) > 0;        boolean contains = isContainsType();    boolean equals = isEqualsType();    boolean substring = isSubstringType();    boolean matches = isMatchType();        if (StringUtils.isEmpty(toCheck)) {        if (notTest) {                        return result;        }        if (log.isDebugEnabled()) {                    }        return result.setResultForNull();    }    try {                Perl5Matcher localMatcher = JMeterUtils.getMatcher();        boolean hasTrue = false;        List<String> allCheckMessage = new ArrayList<>();        for (JMeterProperty jMeterProperty : getTestStrings()) {            String stringPattern = jMeterProperty.getStringValue();            Pattern pattern = null;            if (contains || matches) {                pattern = JMeterUtils.getPatternCache().getPattern(stringPattern, Perl5Compiler.READ_ONLY_MASK);            }            boolean found;            if (contains) {                found = localMatcher.contains(toCheck, pattern);            } else if (equals) {                found = toCheck.equals(stringPattern);            } else if (substring) {                found = toCheck.contains(stringPattern);            } else {                found = localMatcher.matches(toCheck, pattern);            }            boolean pass = notTest ? !found : found;            if (orTest) {                if (!pass) {                                        allCheckMessage.add(getFailText(stringPattern, toCheck));                } else {                    hasTrue = true;                    break;                }            } else {                if (!pass) {                                        result.setFailure(true);                    String customMsg = getCustomFailureMessage();                    if (StringUtils.isEmpty(customMsg)) {                        result.setFailureMessage(getFailText(stringPattern, toCheck));                    } else {                        result.setFailureMessage(customMsg);                    }                    break;                }                            }        }        if (orTest && !hasTrue) {            result.setFailure(true);            String customMsg = getCustomFailureMessage();            if (StringUtils.isEmpty(customMsg)) {                result.setFailureMessage(allCheckMessage.stream().collect(Collectors.joining("\t", "", "\t")));            } else {                result.setFailureMessage(customMsg);            }        }    } catch (MalformedCachePatternException e) {        result.setError(true);        result.setFailure(false);        result.setFailureMessage("Bad test configuration " + e);    }    return result;}
1
private String getStringToCheck(SampleResult response)
{        String toCheck;        if (isScopeVariable()) {        toCheck = getThreadContext().getVariables().get(getVariableName());    } else if (isTestFieldResponseData()) {                toCheck = response.getResponseDataAsString();    } else if (isTestFieldResponseDataAsDocument()) {        toCheck = Document.getTextFromDocument(response.getResponseData());    } else if (isTestFieldResponseCode()) {        toCheck = response.getResponseCode();    } else if (isTestFieldResponseMessage()) {        toCheck = response.getResponseMessage();    } else if (isTestFieldRequestHeaders()) {        toCheck = response.getRequestHeaders();    } else if (isTestFieldRequestData()) {        toCheck = response.getSamplerData();    } else if (isTestFieldResponseHeaders()) {        toCheck = response.getResponseHeaders();    } else {                toCheck = "";        final URL url = response.getURL();        if (url != null) {            toCheck = url.toString();        }    }    return toCheck;}
0
private String getFailText(String stringPattern, String toCheck)
{    StringBuilder sb = new StringBuilder(200);    sb.append("Test failed: ");    if (isScopeVariable()) {        sb.append("variable(").append(getVariableName()).append(')');    } else if (isTestFieldResponseData()) {        sb.append("text");    } else if (isTestFieldResponseCode()) {        sb.append("code");    } else if (isTestFieldResponseMessage()) {        sb.append("message");    } else if (isTestFieldRequestHeaders()) {        sb.append("request headers");    } else if (isTestFieldRequestData()) {        sb.append("request data");    } else if (isTestFieldResponseHeaders()) {        sb.append("headers");    } else if (isTestFieldResponseDataAsDocument()) {        sb.append("document");    } else     {        sb.append("URL");    }    switch(getTestType()) {        case CONTAINS:        case SUBSTRING:            sb.append(" expected to contain ");            break;        case NOT | CONTAINS:        case NOT | SUBSTRING:            sb.append(" expected not to contain ");            break;        case MATCH:            sb.append(" expected to match ");            break;        case NOT | MATCH:            sb.append(" expected not to match ");            break;        case EQUALS:            sb.append(" expected to equal ");            break;        case NOT | EQUALS:            sb.append(" expected not to equal ");            break;        default:                        sb.append(" expected something using ");    }    sb.append("/");    if (isEqualsType()) {        sb.append(equalsComparisonText(toCheck, stringPattern));    } else {        sb.append(stringPattern);    }    sb.append("/");    return sb.toString();}
0
private static String trunc(final boolean right, final String str)
{    if (str.length() <= EQUALS_SECTION_DIFF_LEN) {        return str;    } else if (right) {        return str.substring(0, EQUALS_SECTION_DIFF_LEN) + EQUALS_DIFF_TRUNC;    } else {        return EQUALS_DIFF_TRUNC + str.substring(str.length() - EQUALS_SECTION_DIFF_LEN);    }}
0
private static StringBuilder equalsComparisonText(final String received, final String comparison)
{    final int recLength = received.length();    final int compLength = comparison.length();    final int minLength = Math.min(recLength, compLength);    final StringBuilder text = new StringBuilder(Math.max(recLength, compLength) * 2);    int firstDiff;    for (firstDiff = 0; firstDiff < minLength; firstDiff++) {        if (received.charAt(firstDiff) != comparison.charAt(firstDiff)) {            break;        }    }    final String startingEqSeq;    if (firstDiff == 0) {        startingEqSeq = "";    } else {        startingEqSeq = trunc(false, received.substring(0, firstDiff));    }    int lastRecDiff = recLength - 1;    int lastCompDiff = compLength - 1;    while ((lastRecDiff > firstDiff) && (lastCompDiff > firstDiff) && received.charAt(lastRecDiff) == comparison.charAt(lastCompDiff)) {        lastRecDiff--;        lastCompDiff--;    }    String compDeltaSeq;    String endingEqSeq = trunc(true, received.substring(lastRecDiff + 1, recLength));    String recDeltaSeq;    if (endingEqSeq.length() == 0) {        recDeltaSeq = trunc(true, received.substring(firstDiff, recLength));        compDeltaSeq = trunc(true, comparison.substring(firstDiff, compLength));    } else {        recDeltaSeq = trunc(true, received.substring(firstDiff, lastRecDiff + 1));        compDeltaSeq = trunc(true, comparison.substring(firstDiff, lastCompDiff + 1));    }    final StringBuilder pad = new StringBuilder(Math.abs(recDeltaSeq.length() - compDeltaSeq.length()));    for (int i = 0; i < pad.capacity(); i++) {        pad.append(' ');    }    if (recDeltaSeq.length() > compDeltaSeq.length()) {        compDeltaSeq += pad.toString();    } else {        recDeltaSeq += pad.toString();    }    text.append("\n\n");    text.append(RECEIVED_STR);    text.append(startingEqSeq);    text.append(DIFF_DELTA_START);    text.append(recDeltaSeq);    text.append(DIFF_DELTA_END);    text.append(endingEqSeq);    text.append("\n\n");    text.append(COMPARISON_STR);    text.append(startingEqSeq);    text.append(DIFF_DELTA_START);    text.append(compDeltaSeq);    text.append(DIFF_DELTA_END);    text.append(endingEqSeq);    text.append("\n\n");    return text;}
0
public AssertionResult getResult(SampleResult response)
{    AssertionResult result = new AssertionResult(getName());    result.setFailure(false);    long resultSize;    if (isScopeVariable()) {        String variableName = getVariableName();        String value = getThreadContext().getVariables().get(variableName);        try {            resultSize = Long.parseLong(value);        } catch (NumberFormatException e) {            result.setFailure(true);            result.setFailureMessage("Error parsing variable name: " + variableName + " value: " + value);            return result;        }    } else if (isTestFieldResponseHeaders()) {        resultSize = response.getHeadersSize();    } else if (isTestFieldResponseBody()) {        resultSize = response.getBodySizeAsLong();    } else if (isTestFieldResponseCode()) {        resultSize = response.getResponseCode().length();    } else if (isTestFieldResponseMessage()) {        resultSize = response.getResponseMessage().length();    } else {        resultSize = response.getBytesAsLong();    }        final String msg = compareSize(resultSize);    if (msg.length() > 0) {        result.setFailure(true);        Object[] arguments = { Long.valueOf(resultSize), msg, Long.valueOf(getAllowedSize()) };        String message = MessageFormat.format(JMeterUtils.getResString("size_assertion_failure"),         arguments);        result.setFailureMessage(message);    }    return result;}
0
public String getAllowedSize()
{    return getPropertyAsString(SIZE_KEY);}
0
public void setCompOper(int operator)
{    setProperty(new IntegerProperty(OPERATOR_KEY, operator));}
0
public int getCompOper()
{    return getPropertyAsInt(OPERATOR_KEY);}
0
public void setAllowedSize(String size)
{    setProperty(SIZE_KEY, size);}
0
public void setAllowedSize(long size)
{    setProperty(SIZE_KEY, Long.toString(size));}
0
private String compareSize(long resultSize)
{    String comparatorErrorMessage;    long allowedSize = Long.parseLong(getAllowedSize());    boolean result;    int comp = getCompOper();    switch(comp) {        case EQUAL:            result = resultSize == allowedSize;                        comparatorErrorMessage = JMeterUtils.getResString("size_assertion_comparator_error_equal");            break;        case NOTEQUAL:            result = resultSize != allowedSize;                        comparatorErrorMessage = JMeterUtils.getResString("size_assertion_comparator_error_notequal");            break;        case GREATERTHAN:            result = resultSize > allowedSize;                        comparatorErrorMessage = JMeterUtils.getResString("size_assertion_comparator_error_greater");            break;        case LESSTHAN:            result = resultSize < allowedSize;                        comparatorErrorMessage = JMeterUtils.getResString("size_assertion_comparator_error_less");            break;        case GREATERTHANEQUAL:            result = resultSize >= allowedSize;                        comparatorErrorMessage = JMeterUtils.getResString("size_assertion_comparator_error_greaterequal");            break;        case LESSTHANEQUAL:            result = resultSize <= allowedSize;                        comparatorErrorMessage = JMeterUtils.getResString("size_assertion_comparator_error_lessequal");            break;        default:            result = false;            comparatorErrorMessage = "ERROR - invalid condition";            break;    }    return result ? "" : comparatorErrorMessage;}
0
private void setTestField(String testField)
{    setProperty(TEST_FIELD, testField);}
0
public void setTestFieldNetworkSize()
{    setTestField(RESPONSE_NETWORK_SIZE);}
0
public void setTestFieldResponseHeaders()
{    setTestField(RESPONSE_HEADERS);}
0
public void setTestFieldResponseBody()
{    setTestField(RESPONSE_BODY);}
0
public void setTestFieldResponseCode()
{    setTestField(RESPONSE_CODE);}
0
public void setTestFieldResponseMessage()
{    setTestField(RESPONSE_MESSAGE);}
0
public String getTestField()
{    return getPropertyAsString(TEST_FIELD);}
0
public boolean isTestFieldNetworkSize()
{    return RESPONSE_NETWORK_SIZE.equals(getTestField());}
0
public boolean isTestFieldResponseHeaders()
{    return RESPONSE_HEADERS.equals(getTestField());}
0
public boolean isTestFieldResponseBody()
{    return RESPONSE_BODY.equals(getTestField());}
0
public boolean isTestFieldResponseCode()
{    return RESPONSE_CODE.equals(getTestField());}
0
public boolean isTestFieldResponseMessage()
{    return RESPONSE_MESSAGE.equals(getTestField());}
0
public static AssertionResult getResult(SMIMEAssertionTestElement testElement, SampleResult response, String name)
{    checkForBouncycastle();    AssertionResult res = new AssertionResult(name);    try {        MimeMessage msg;        final int msgPos = testElement.getSpecificMessagePositionAsInt();        if (msgPos < 0) {                        SampleResult[] subResults = response.getSubResults();            final int pos = subResults.length + msgPos;                        msg = getMessageFromResponse(response, pos);        } else {                        msg = getMessageFromResponse(response, msgPos);        }        SMIMESignedParser signedParser = null;        if (log.isDebugEnabled()) {                    }        if (msg.isMimeType("multipart/signed")) {                        MimeMultipart multipart = (MimeMultipart) msg.getContent();            signedParser = new SMIMESignedParser(new BcDigestCalculatorProvider(), multipart);        } else if (        msg.isMimeType("application/pkcs7-mime") || msg.isMimeType("application/x-pkcs7-mime")) {                        signedParser = new SMIMESignedParser(new BcDigestCalculatorProvider(), msg);        }        if (null != signedParser) {                        if (testElement.isNotSigned()) {                res.setFailure(true);                res.setFailureMessage("Mime message is signed");            } else if (testElement.isVerifySignature() || !testElement.isSignerNoCheck()) {                res = verifySignature(testElement, signedParser, name);            }        } else {                        if (!testElement.isNotSigned()) {                res.setFailure(true);                res.setFailureMessage("Mime message is not signed");            }        }    } catch (MessagingException e) {        String msg = "Cannot parse mime msg: " + e.getMessage();                res.setFailure(true);        res.setFailureMessage(msg);    } catch (CMSException e) {        res.setFailure(true);        res.setFailureMessage("Error reading the signature: " + e.getMessage());    } catch (SMIMEException e) {        res.setFailure(true);        res.setFailureMessage("Cannot extract signed body part from signature: " + e.getMessage());    } catch (IOException e) {                        res.setError(true);        res.setFailureMessage(e.getMessage());    }    return res;}
1
private static AssertionResult verifySignature(SMIMEAssertionTestElement testElement, SMIMESignedParser s, String name) throws CMSException
{    AssertionResult res = new AssertionResult(name);    try {        Store certs = s.getCertificates();        SignerInformationStore signers = s.getSignerInfos();        Iterator<?> signerIt = signers.getSigners().iterator();        if (signerIt.hasNext()) {            SignerInformation signer = (SignerInformation) signerIt.next();            Iterator<?> certIt = certs.getMatches(signer.getSID()).iterator();            if (certIt.hasNext()) {                                X509CertificateHolder cert = (X509CertificateHolder) certIt.next();                if (testElement.isVerifySignature()) {                    SignerInformationVerifier verifier = null;                    try {                        verifier = new JcaSimpleSignerInfoVerifierBuilder().setProvider("BC").build(cert);                    } catch (OperatorCreationException e) {                                            }                    if (verifier == null || !signer.verify(verifier)) {                        res.setFailure(true);                        res.setFailureMessage("Signature is invalid");                    }                }                if (testElement.isSignerCheckConstraints()) {                    StringBuilder failureMessage = new StringBuilder();                    String serial = testElement.getSignerSerial();                    if (!JOrphanUtils.isBlank(serial)) {                        BigInteger serialNbr = readSerialNumber(serial);                        if (!serialNbr.equals(cert.getSerialNumber())) {                            res.setFailure(true);                            failureMessage.append("Serial number ").append(serialNbr).append(" does not match serial from signer certificate: ").append(cert.getSerialNumber()).append("\n");                        }                    }                    String email = testElement.getSignerEmail();                    if (!JOrphanUtils.isBlank(email)) {                        List<String> emailFromCert = getEmailFromCert(cert);                        if (!emailFromCert.contains(email)) {                            res.setFailure(true);                            failureMessage.append("Email address \"").append(email).append("\" not present in signer certificate\n");                        }                    }                    String subject = testElement.getSignerDn();                    if (subject.length() > 0) {                        final X500Name certPrincipal = cert.getSubject();                                                X500Name principal = new X500Name(subject);                                                if (!principal.equals(certPrincipal)) {                            res.setFailure(true);                            failureMessage.append("Distinguished name of signer certificate does not match \"").append(subject).append("\"\n");                        }                    }                    String issuer = testElement.getIssuerDn();                    if (issuer.length() > 0) {                        final X500Name issuerX500Name = cert.getIssuer();                                                X500Name principal = new X500Name(issuer);                                                if (!principal.equals(issuerX500Name)) {                            res.setFailure(true);                            failureMessage.append("Issuer distinguished name of signer certificate does not match \"").append(subject).append("\"\n");                        }                    }                    if (failureMessage.length() > 0) {                        res.setFailureMessage(failureMessage.toString());                    }                }                if (testElement.isSignerCheckByFile()) {                    CertificateFactory cf = CertificateFactory.getInstance("X.509");                    try (InputStream fis = new FileInputStream(testElement.getSignerCertFile());                        InputStream bis = new BufferedInputStream(fis)) {                        X509CertificateHolder certFromFile = new JcaX509CertificateHolder((X509Certificate) cf.generateCertificate(bis));                        if (!certFromFile.equals(cert)) {                            res.setFailure(true);                            res.setFailureMessage("Signer certificate does not match certificate " + testElement.getSignerCertFile());                        }                    } catch (IOException e) {                        if (log.isDebugEnabled()) {                                                    }                        res.setFailure(true);                        res.setFailureMessage("Could not read certificate file " + testElement.getSignerCertFile());                    }                }            } else {                res.setFailure(true);                res.setFailureMessage("No signer certificate found in signature");            }        }                if (signerIt.hasNext()) {                    }    } catch (GeneralSecurityException e) {                res.setError(true);        res.setFailureMessage(e.getMessage());    }    return res;}
1
private static MimeMessage getMessageFromResponse(SampleResult response, int messageNumber) throws MessagingException
{    SampleResult[] subResults = response.getSubResults();    if (messageNumber >= subResults.length || messageNumber < 0) {        throw new MessagingException("Message number not present in results: " + messageNumber);    }    final SampleResult sampleResult = subResults[messageNumber];    if (log.isDebugEnabled()) {            }    byte[] data = sampleResult.getResponseData();    Session session = Session.getDefaultInstance(new Properties());    MimeMessage msg = new MimeMessage(session, new ByteArrayInputStream(data));    if (log.isDebugEnabled()) {            }    return msg;}
1
private static BigInteger readSerialNumber(String serialString)
{    if (serialString.startsWith("0x") || serialString.startsWith("0X")) {                return new BigInteger(serialString.substring(2), 16);    }    return new BigInteger(serialString);}
0
private static List<String> getEmailFromCert(X509CertificateHolder cert) throws CertificateException
{    List<String> res = new ArrayList<>();    X500Name subject = cert.getSubject();    for (RDN emails : subject.getRDNs(BCStyle.EmailAddress)) {        for (AttributeTypeAndValue emailAttr : emails.getTypesAndValues()) {            if (log.isDebugEnabled()) {                            }            res.add(IETFUtils.valueToString(emailAttr.getValue()));        }    }    Extension subjectAlternativeNames = cert.getExtension(Extension.subjectAlternativeName);    if (subjectAlternativeNames != null) {        for (GeneralName name : GeneralNames.getInstance(subjectAlternativeNames.getParsedValue()).getNames()) {            if (name.getTagNo() == GeneralName.rfc822Name) {                String email = IETFUtils.valueToString(name.getName());                                res.add(email);            }        }    }    return res;}
1
private static void checkForBouncycastle()
{    if (null == Security.getProvider("BC")) {                Security.addProvider(new BouncyCastleProvider());    }}
0
public AssertionResult getResult(SampleResult response)
{    try {        return SMIMEAssertion.getResult(this, response, getName());    } catch (NoClassDefFoundError e) {        AssertionResult assertionResult = new AssertionResult(getName());        assertionResult.setError(true);        assertionResult.setResultForFailure(JMeterUtils.getResString(        "bouncy_castle_unavailable_message"));        return assertionResult;    }}
0
public boolean isVerifySignature()
{    return getPropertyAsBoolean(VERIFY_SIGNATURE_KEY);}
0
public void setVerifySignature(boolean verifySignature)
{    setProperty(VERIFY_SIGNATURE_KEY, verifySignature);}
0
public String getIssuerDn()
{    return getPropertyAsString(ISSUER_DN_KEY);}
0
public void setIssuerDn(String issuerDn)
{    setProperty(ISSUER_DN_KEY, issuerDn);}
0
public boolean isSignerCheckByFile()
{    return getPropertyAsBoolean(SIGNER_CHECK_BY_FILE_KEY);}
0
public void setSignerCheckByFile(boolean signerCheckByFile)
{    setProperty(SIGNER_CHECK_BY_FILE_KEY, signerCheckByFile);}
0
public boolean isSignerCheckConstraints()
{    return getPropertyAsBoolean(SINGER_CHECK_CONSTRAINTS_KEY);}
0
public void setSignerCheckConstraints(boolean signerCheckConstraints)
{    setProperty(SINGER_CHECK_CONSTRAINTS_KEY, signerCheckConstraints);}
0
public boolean isSignerNoCheck()
{    return getPropertyAsBoolean(SIGNER_NO_CHECK_KEY);}
0
public void setSignerNoCheck(boolean signerNoCheck)
{    setProperty(SIGNER_NO_CHECK_KEY, signerNoCheck);}
0
public String getSignerCertFile()
{    return getPropertyAsString(SIGNER_CERT_FILE_KEY);}
0
public void setSignerCertFile(String signerCertFile)
{    setProperty(SIGNER_CERT_FILE_KEY, signerCertFile);}
0
public String getSignerDn()
{    return getPropertyAsString(SIGNER_DN_KEY);}
0
public void setSignerDn(String signerDn)
{    setProperty(SIGNER_DN_KEY, signerDn);}
0
public String getSignerSerial()
{    return getPropertyAsString(SIGNER_SERIAL_KEY);}
0
public void setSignerSerial(String signerSerial)
{    setProperty(SIGNER_SERIAL_KEY, signerSerial);}
0
public String getSignerEmail()
{    return getPropertyAsString(SIGNER_EMAIL_KEY);}
0
public void setSignerEmail(String signerEmail)
{    setProperty(SIGNER_EMAIL_KEY, signerEmail);}
0
public boolean isNotSigned()
{    return getPropertyAsBoolean(NOT_SIGNED_KEY);}
0
public void setNotSigned(boolean notSigned)
{    setProperty(NOT_SIGNED_KEY, notSigned);}
0
public String getSpecificMessagePosition()
{    return getPropertyAsString(MESSAGE_POSITION);}
0
public int getSpecificMessagePositionAsInt()
{    return getPropertyAsInt(MESSAGE_POSITION, 0);}
0
public void setSpecificMessagePosition(String position)
{    setProperty(MESSAGE_POSITION, position);}
0
public String getRegex()
{    return getProperty(REGEX).getStringValue();}
0
public void setRegex(String regex)
{    setProperty(REGEX, regex);}
0
public String getSubstitute()
{    return getProperty(SUBSTITUTE).getStringValue();}
0
public void setSubstitute(String sub)
{    setProperty(SUBSTITUTE, sub);}
0
protected XMLReader initialValue()
{    try {        return XMLReaderFactory.createXMLReader();    } catch (SAXException e) {                return null;    }}
1
public AssertionResult getResult(SampleResult response)
{        AssertionResult result = new AssertionResult(getName());    String resultData = response.getResponseDataAsString();    if (resultData.length() == 0) {        return result.setResultForNull();    }    result.setFailure(false);    XMLReader builder = XML_READER.get();    if (builder != null) {        try {            builder.setErrorHandler(new LogErrorHandler());            builder.parse(new InputSource(new StringReader(resultData)));        } catch (SAXException | IOException e) {            result.setError(true);            result.setFailure(true);            result.setFailureMessage(e.getMessage());        }    } else {        result.setError(true);        result.setFailureMessage("Cannot initialize XMLReader in element:" + getName() + ", check jmeter.log file");    }    return result;}
0
public void threadStarted()
{}
0
public void threadFinished()
{    XML_READER.remove();}
0
public AssertionResult getResult(SampleResult response)
{    AssertionResult result = new AssertionResult(getName());        String resultData = response.getResponseDataAsString();    if (resultData.length() == 0) {        return result.setResultForNull();    }    String xsdFileName = getXsdFileName();        if (xsdFileName == null || xsdFileName.length() == 0) {        result.setResultForFailure(FILE_NAME_IS_REQUIRED);    } else {        setSchemaResult(result, resultData, xsdFileName);    }    return result;}
1
public void setXsdFileName(String xmlSchemaFileName) throws IllegalArgumentException
{    setProperty(XSD_FILENAME_KEY, xmlSchemaFileName);}
0
public String getXsdFileName()
{    return getPropertyAsString(XSD_FILENAME_KEY);}
0
private void setSchemaResult(AssertionResult result, String xmlStr, String xsdFileName)
{    try {        DocumentBuilderFactory parserFactory = DocumentBuilderFactory.newInstance();        parserFactory.setValidating(true);        parserFactory.setNamespaceAware(true);        parserFactory.setAttribute(JAXP_SCHEMA_LANGUAGE, W3C_XML_SCHEMA);        parserFactory.setAttribute(JAXP_SCHEMA_SOURCE, xsdFileName);                DocumentBuilder parser = parserFactory.newDocumentBuilder();        parser.setErrorHandler(new SAXErrorHandler(result));        parser.parse(new InputSource(new StringReader(xmlStr)));        } catch (SAXParseException e) {                if (!result.isError() && !result.isFailure()) {            result.setError(true);            result.setFailureMessage(errorDetails(e));        }    } catch (SAXException e) {        if (log.isWarnEnabled()) {                    }        result.setResultForFailure(e.getMessage());    } catch (IOException e) {                result.setResultForFailure(e.getMessage());    } catch (ParserConfigurationException e) {                result.setResultForFailure(e.getMessage());    }}
1
private static String errorDetails(SAXParseException spe)
{    StringBuilder str = new StringBuilder(80);    int i;    i = spe.getLineNumber();    if (i != -1) {        str.append("line=");        str.append(i);        str.append(" col=");        str.append(spe.getColumnNumber());        str.append(" ");    }    str.append(spe.getLocalizedMessage());    return str.toString();}
0
public void error(SAXParseException exception) throws SAXParseException
{    String msg = "error: " + errorDetails(exception);        result.setFailureMessage(msg);    result.setError(true);    throw exception;}
1
public void fatalError(SAXParseException exception) throws SAXParseException
{    String msg = "fatal: " + errorDetails(exception);        result.setFailureMessage(msg);    result.setError(true);    throw exception;}
1
public void warning(SAXParseException exception) throws SAXParseException
{    String msg = "warning: " + errorDetails(exception);        result.setFailureMessage(msg);}
1
public AssertionResult getResult(SampleResult response)
{        AssertionResult result = new AssertionResult(getName());    result.setFailure(false);    result.setFailureMessage("");    String responseData = null;    if (isScopeVariable()) {        String inputString = getThreadContext().getVariables().get(getVariableName());        if (!StringUtils.isEmpty(inputString)) {            responseData = inputString;        }    } else {        responseData = response.getResponseDataAsString();    }    if (responseData == null) {        return result.setResultForNull();    }    try {        XPathUtil.computeAssertionResultUsingSaxon(result, responseData, getXPathString(), getNamespaces(), isNegated());    } catch (CompletionException | SaxonApiException e) {                result.setError(true);                result.setFailureMessage("Exception occurred computing assertion with XPath:" + getXPathString() + ", error:" + e.getMessage());        return result;    }    return result;}
0
public String getXPathString()
{    return getPropertyAsString(XPATH_KEY, DEFAULT_XPATH);}
0
public void setXPathString(String xpath)
{    setProperty(new StringProperty(XPATH_KEY, xpath));}
0
public void setNegated(boolean negate)
{    setProperty(new BooleanProperty(NEGATE_KEY, negate));}
0
public boolean isNegated()
{    return getPropertyAsBoolean(NEGATE_KEY, false);}
0
public void setNamespaces(String namespaces)
{    setProperty(NAMESPACES, namespaces);}
0
public String getNamespaces()
{    return getPropertyAsString(NAMESPACES);}
0
public AssertionResult getResult(SampleResult response)
{        AssertionResult result = new AssertionResult(getName());    result.setFailure(false);    result.setFailureMessage("");    byte[] responseData = null;    Document doc = null;    try {        if (isScopeVariable()) {            String inputString = getThreadContext().getVariables().get(getVariableName());            if (!StringUtils.isEmpty(inputString)) {                responseData = inputString.getBytes(StandardCharsets.UTF_8);            }        } else {            responseData = response.getResponseData();        }        if (responseData == null || responseData.length == 0) {            return result.setResultForNull();        }        if (log.isDebugEnabled()) {                    }        boolean isXML = JOrphanUtils.isXML(responseData);        doc = XPathUtil.makeDocument(new ByteArrayInputStream(responseData), isValidating(), isWhitespace(), isNamespace(), isTolerant(), isQuiet(), showWarnings(), reportErrors(), isXML, isDownloadDTDs());    } catch (SAXException e) {                result.setError(true);        result.setFailureMessage("SAXException: " + e.getMessage());        return result;    } catch (IOException e) {                result.setError(true);        result.setFailureMessage("IOException: " + e.getMessage());        return result;    } catch (ParserConfigurationException e) {                result.setError(true);        result.setFailureMessage("ParserConfigurationException: " + e.getMessage());        return result;    } catch (TidyException e) {        result.setError(true);        result.setFailureMessage(e.getMessage());        return result;    }    if (doc == null || doc.getDocumentElement() == null) {        result.setError(true);        result.setFailureMessage("Document is null, probably not parsable");        return result;    }    XPathUtil.computeAssertionResult(result, doc, getXPathString(), isNegated());    return result;}
1
public String getXPathString()
{    return getPropertyAsString(XPATH_KEY, DEFAULT_XPATH);}
0
public void setXPathString(String xpath)
{    setProperty(new StringProperty(XPATH_KEY, xpath));}
0
public void setWhitespace(boolean whitespace)
{    setProperty(new BooleanProperty(WHITESPACE_KEY, whitespace));}
0
public void setValidating(boolean validate)
{    setProperty(new BooleanProperty(VALIDATE_KEY, validate));}
0
public void setNamespace(boolean namespace)
{    setProperty(new BooleanProperty(NAMESPACE_KEY, namespace));}
0
public void setTolerant(boolean tolerant)
{    setProperty(new BooleanProperty(TOLERANT_KEY, tolerant));}
0
public void setNegated(boolean negate)
{    setProperty(new BooleanProperty(NEGATE_KEY, negate));}
0
public boolean isWhitespace()
{    return getPropertyAsBoolean(WHITESPACE_KEY, false);}
0
public boolean isValidating()
{    return getPropertyAsBoolean(VALIDATE_KEY, false);}
0
public boolean isNamespace()
{    return getPropertyAsBoolean(NAMESPACE_KEY, false);}
0
public boolean isTolerant()
{    return getPropertyAsBoolean(TOLERANT_KEY, false);}
0
public boolean isNegated()
{    return getPropertyAsBoolean(NEGATE_KEY, false);}
0
public void setReportErrors(boolean val)
{    setProperty(REPORT_ERRORS_KEY, val, false);}
0
public boolean reportErrors()
{    return getPropertyAsBoolean(REPORT_ERRORS_KEY, false);}
0
public void setShowWarnings(boolean val)
{    setProperty(SHOW_WARNINGS_KEY, val, false);}
0
public boolean showWarnings()
{    return getPropertyAsBoolean(SHOW_WARNINGS_KEY, false);}
0
public void setQuiet(boolean val)
{    setProperty(QUIET_KEY, val, true);}
0
public boolean isQuiet()
{    return getPropertyAsBoolean(QUIET_KEY, true);}
0
public void setDownloadDTDs(boolean val)
{    setProperty(DOWNLOAD_DTDS, val, false);}
0
public boolean isDownloadDTDs()
{    return getPropertyAsBoolean(DOWNLOAD_DTDS, false);}
0
private Object readResolve()
{    recycle = true;    return this;}
0
public void iterationStart(LoopIterationEvent iterEvent)
{    FileServer server = FileServer.getFileServer();    final JMeterContext context = getThreadContext();    String delim = getDelimiter();    if ("\\t".equals(delim)) {                        delim = "\t";    } else if (delim.isEmpty()) {                delim = ",";    }    if (vars == null) {        String fileName = getFilename().trim();        String mode = getShareMode();        int modeInt = CSVDataSetBeanInfo.getShareModeAsInt(mode);        switch(modeInt) {            case CSVDataSetBeanInfo.SHARE_ALL:                alias = fileName;                break;            case CSVDataSetBeanInfo.SHARE_GROUP:                alias = fileName + "@" + System.identityHashCode(context.getThreadGroup());                break;            case CSVDataSetBeanInfo.SHARE_THREAD:                alias = fileName + "@" + System.identityHashCode(context.getThread());                break;            default:                                alias = fileName + "@" + mode;                break;        }        final String names = getVariableNames();        if (StringUtils.isEmpty(names)) {            String header = server.reserveFile(fileName, getFileEncoding(), alias, true);            try {                vars = CSVSaveService.csvSplitString(header, delim.charAt(0));                firstLineIsNames = true;            } catch (IOException e) {                throw new IllegalArgumentException("Could not split CSV header line from file:" + fileName, e);            }        } else {            server.reserveFile(fileName, getFileEncoding(), alias, ignoreFirstLine);                        vars = JOrphanUtils.split(names, ",");        }        trimVarNames(vars);    }        JMeterVariables threadVars = context.getVariables();    String[] lineValues = {};    try {        if (getQuotedData()) {            lineValues = server.getParsedLine(alias, recycle, firstLineIsNames || ignoreFirstLine, delim.charAt(0));        } else {            String line = server.readLine(alias, recycle, firstLineIsNames || ignoreFirstLine);            lineValues = JOrphanUtils.split(line, delim, false);        }        for (int a = 0; a < vars.length && a < lineValues.length; a++) {            threadVars.put(vars[a], lineValues[a]);        }    } catch (IOException e) {                    }    if (lineValues.length == 0) {                if (getStopThread()) {            throw new JMeterStopThreadException("End of file:" + getFilename() + " detected for CSV DataSet:" + getName() + " configured with stopThread:" + getStopThread() + ", recycle:" + getRecycle());        }        for (String var : vars) {            threadVars.put(var, EOFVALUE);        }    }}
1
private void trimVarNames(String[] varsNames)
{    for (int i = 0; i < varsNames.length; i++) {        varsNames[i] = varsNames[i].trim();    }}
0
public String getFilename()
{    return filename;}
0
public void setFilename(String filename)
{    this.filename = filename;}
0
public String getFileEncoding()
{    return fileEncoding;}
0
public void setFileEncoding(String fileEncoding)
{    this.fileEncoding = fileEncoding;}
0
public String getVariableNames()
{    return variableNames;}
0
public void setVariableNames(String variableNames)
{    this.variableNames = variableNames;}
0
public String getDelimiter()
{    return delimiter;}
0
public void setDelimiter(String delimiter)
{    this.delimiter = delimiter;}
0
public boolean getQuotedData()
{    return quoted;}
0
public void setQuotedData(boolean quoted)
{    this.quoted = quoted;}
0
public boolean getRecycle()
{    return recycle;}
0
public void setRecycle(boolean recycle)
{    this.recycle = recycle;}
0
public boolean getStopThread()
{    return stopThread;}
0
public void setStopThread(boolean value)
{    this.stopThread = value;}
0
public String getShareMode()
{    return shareMode;}
0
public void setShareMode(String value)
{    this.shareMode = value;}
0
public boolean isIgnoreFirstLine()
{    return ignoreFirstLine;}
0
public void setIgnoreFirstLine(boolean ignoreFirstLine)
{    this.ignoreFirstLine = ignoreFirstLine;}
0
public static int getShareModeAsInt(String mode)
{    if (mode == null || mode.length() == 0) {                return SHARE_ALL;    }    for (int i = 0; i < SHARE_TAGS.length; i++) {        if (SHARE_TAGS[i].equals(mode)) {            return i;        }    }    return -1;}
0
public static String[] getShareTags()
{    String[] copy = new String[SHARE_TAGS.length];    System.arraycopy(SHARE_TAGS, 0, copy, 0, SHARE_TAGS.length);    return copy;}
0
private String[] getListFileEncoding()
{        return JOrphanUtils.split(JMeterUtils.getPropDefault("csvdataset.file.encoding_list", ""), "|");}
0
public void testEnded()
{    testEnded(null);}
0
public void testEnded(String host)
{        SSLManager.getInstance().destroyKeystore();}
1
public void testStarted()
{    testStarted(null);}
0
public void testStarted(String host)
{    String reuseSSLContext = JMeterUtils.getProperty("https.use.cached.ssl.context");    if (StringUtils.isEmpty(reuseSSLContext) || "true".equals(reuseSSLContext)) {            }    int startIndexAsInt = JMeterUtils.getPropDefault(KEY_STORE_START_INDEX, 0);    int endIndexAsInt = JMeterUtils.getPropDefault(KEY_STORE_END_INDEX, -1);    if (!StringUtils.isEmpty(this.startIndex)) {        try {            startIndexAsInt = Integer.parseInt(this.startIndex);        } catch (NumberFormatException e) {                    }    }    if (!StringUtils.isEmpty(this.endIndex)) {        try {            endIndexAsInt = Integer.parseInt(this.endIndex);        } catch (NumberFormatException e) {                    }    }    if (endIndexAsInt != -1 && startIndexAsInt > endIndexAsInt) {        throw new JMeterStopTestException("Keystore Config error : Alias start index must be lower than Alias end index");    }        SSLManager.getInstance().configureKeystore(Boolean.parseBoolean(preload), startIndexAsInt, endIndexAsInt, clientCertAliasVarName);}
1
public String getEndIndex()
{    return endIndex;}
0
public void setEndIndex(String endIndex)
{    this.endIndex = endIndex;}
0
public String getStartIndex()
{    return startIndex;}
0
public void setStartIndex(String startIndex)
{    this.startIndex = startIndex;}
0
public String getPreload()
{    return preload;}
0
public void setPreload(String preload)
{    this.preload = preload;}
0
public String getClientCertAliasVarName()
{    return clientCertAliasVarName;}
0
public void setClientCertAliasVarName(String clientCertAliasVarName)
{    this.clientCertAliasVarName = clientCertAliasVarName;}
0
private ThreadLocal<Random> initThreadLocal()
{    return ThreadLocal.withInitial(() -> {        init();        return createRandom();    });}
0
private Object readResolve()
{    perThreadRandom = initThreadLocal();    return this;}
0
private void init()
{    final String minAsString = getMinimumValue();    minimum = NumberUtils.toLong(minAsString);    final String maxAsString = getMaximumValue();    long maximum = NumberUtils.toLong(maxAsString);        long rangeL = maximum - minimum + 1;    if (minimum > maximum) {                        range = 0;        return;    }    if (rangeL > Integer.MAX_VALUE || rangeL <= 0) {                        rangeL = Integer.MAX_VALUE;    }    range = (int) rangeL;}
1
public void iterationStart(LoopIterationEvent iterEvent)
{    Random randGen;    if (getPerThread()) {        randGen = perThreadRandom.get();    } else {        synchronized (this) {            if (globalRandom == null) {                init();                globalRandom = createRandom();            }            randGen = globalRandom;        }    }    if (range <= 0) {        return;    }    long nextRand = minimum + randGen.nextInt(range);        JMeterVariables variables = JMeterContextService.getContext().getVariables();    variables.put(getVariableName(), formatNumber(nextRand));}
0
private String formatNumber(long value)
{    String format = getOutputFormat();    if (format != null && format.length() > 0) {        try {            DecimalFormat myFormatter = new DecimalFormat(format);            return myFormatter.format(value);        } catch (IllegalArgumentException ignored) {                    }    }    return Long.toString(value);}
1
public synchronized String getMinimumValue()
{    return minimumValue;}
0
public synchronized void setMinimumValue(String minValue)
{    this.minimumValue = minValue;}
0
public synchronized String getMaximumValue()
{    return maximumValue;}
0
public synchronized void setMaximumValue(String maxvalue)
{    this.maximumValue = maxvalue;}
0
public synchronized String getVariableName()
{    return variableName;}
0
public synchronized void setVariableName(String variableName)
{    this.variableName = variableName;}
0
public synchronized String getRandomSeed()
{    return randomSeed;}
0
private Random createRandom()
{    if (randomSeed.length() > 0) {        Long seed = getRandomSeedAsLong();        if (seed != null) {            return new Random(seed.longValue());        }    }    return new Random();}
0
private synchronized Long getRandomSeedAsLong()
{    Long seed = null;    try {        seed = Long.parseLong(randomSeed);    } catch (NumberFormatException e) {        if (log.isWarnEnabled()) {                    }    }    return seed;}
1
public synchronized void setRandomSeed(String randomSeed)
{    this.randomSeed = randomSeed;}
0
public synchronized boolean getPerThread()
{    return perThread;}
0
public synchronized void setPerThread(boolean perThread)
{    this.perThread = perThread;}
0
public synchronized String getOutputFormat()
{    return outputFormat;}
0
public synchronized void setOutputFormat(String outputFormat)
{    this.outputFormat = outputFormat;}
0
public void threadStarted()
{}
0
public void threadFinished()
{    perThreadRandom.remove();}
0
public void setLockName(String name)
{    setProperty(new StringProperty(LOCK_NAME, name));}
0
private ReentrantLock getOrCreateLock()
{    String lockName = getLockName();    ReentrantLock lock = LOCK_MAP.get(lockName);    ReentrantLock prev;    if (lock != null) {        return lock;    }    lock = new ReentrantLock();    prev = LOCK_MAP.putIfAbsent(lockName, lock);    return prev == null ? lock : prev;}
0
public String getLockName()
{    return getPropertyAsString(LOCK_NAME);}
0
public Sampler next()
{    if (StringUtils.isEmpty(getLockName())) {        if (log.isWarnEnabled()) {                    }        return super.next();    }    if (isFirst()) {                long startTime = System.currentTimeMillis();        if (this.currentLock == null) {            this.currentLock = getOrCreateLock();        }        this.currentLock.lock();        long endTime = System.currentTimeMillis();        if (log.isDebugEnabled()) {                    }    }    return super.next();}
1
protected void reInitialize()
{    if (this.currentLock != null) {        if (currentLock.isHeldByCurrentThread()) {            this.currentLock.unlock();        }        this.currentLock = null;    }    super.reInitialize();}
0
public void threadStarted()
{    this.currentLock = null;}
0
public void threadFinished()
{    if (this.currentLock != null && this.currentLock.isHeldByCurrentThread()) {        if (log.isWarnEnabled()) {                    }        this.currentLock.unlock();    }    this.currentLock = null;}
1
public void testStarted()
{}
0
public void testStarted(String host)
{}
0
public void testEnded()
{    LOCK_MAP.clear();}
0
public void testEnded(String host)
{    testEnded();}
0
public void setStartIndex(String startIndex)
{    setProperty(START_INDEX, startIndex, INDEX_DEFAULT_VALUE);}
0
private int getStartIndex()
{        return getPropertyAsInt(START_INDEX, 0);}
0
public String getStartIndexAsString()
{    return getPropertyAsString(START_INDEX, INDEX_DEFAULT_VALUE);}
0
public void setEndIndex(String endIndex)
{    setProperty(END_INDEX, endIndex, INDEX_DEFAULT_VALUE);}
0
private int getEndIndex()
{        return getPropertyAsInt(END_INDEX, Integer.MAX_VALUE);}
0
public String getEndIndexAsString()
{    return getPropertyAsString(END_INDEX, INDEX_DEFAULT_VALUE);}
0
public void setInputVal(String inputValue)
{    setProperty(new StringProperty(INPUTVAL, inputValue));}
0
private String getInputVal()
{    getProperty(INPUTVAL).recoverRunningVersion(null);    return getInputValString();}
0
public String getInputValString()
{    return getPropertyAsString(INPUTVAL);}
0
public void setReturnVal(String inputValue)
{    setProperty(new StringProperty(RETURNVAL, inputValue));}
0
private String getReturnVal()
{    getProperty(RETURNVAL).recoverRunningVersion(null);    return getReturnValString();}
0
public String getReturnValString()
{    return getPropertyAsString(RETURNVAL);}
0
private String getSeparator()
{        return getUseSeparator() ? DEFAULT_SEPARATOR : "";}
0
public void setUseSeparator(boolean b)
{    setProperty(new BooleanProperty(USE_SEPARATOR, b));}
0
public boolean getUseSeparator()
{    return getPropertyAsBoolean(USE_SEPARATOR, true);}
0
public boolean isDone()
{    if (loopCount >= getEndIndex()) {        return true;    }    JMeterContext context = getThreadContext();    StringBuilder builder = new StringBuilder(getInputVal().length() + getSeparator().length() + 3);    String inputVariable = builder.append(getInputVal()).append(getSeparator()).append(Integer.toString(loopCount + 1)).toString();    final JMeterVariables variables = context.getVariables();    final Object currentVariable = variables.getObject(inputVariable);    if (currentVariable != null) {        variables.putObject(getReturnVal(), currentVariable);        if (log.isDebugEnabled()) {                    }        return false;    }    return super.isDone();}
1
private boolean endOfArguments()
{    JMeterContext context = getThreadContext();    String inputVariable = getInputVal() + getSeparator() + (loopCount + 1);    if (context.getVariables().getObject(inputVariable) != null) {        if (log.isDebugEnabled()) {                    }        return false;    }    if (log.isDebugEnabled()) {            }    return true;}
1
public Sampler next()
{    updateIterationIndex(getName(), loopCount);    try {        if (breakLoop || emptyList()) {            resetBreakLoop();            reInitialize();            resetLoopCount();            return null;        }        return super.next();    } finally {        updateIterationIndex(getName(), loopCount);    }}
0
private boolean emptyList()
{    JMeterContext context = getThreadContext();    StringBuilder builder = new StringBuilder(getInputVal().length() + getSeparator().length() + 3);    String inputVariable = builder.append(getInputVal()).append(getSeparator()).append(Integer.toString(loopCount + 1)).toString();    if (context.getVariables().getObject(inputVariable) != null) {        return false;    }    if (log.isDebugEnabled()) {            }    return true;}
1
protected Sampler nextIsNull() throws NextIsNullException
{    reInitialize();        if (breakLoop ||     endOfArguments() ||     loopCount >= getEndIndex()) {        resetBreakLoop();        resetLoopCount();        return null;    }    return next();}
0
protected void incrementLoopCount()
{    loopCount++;}
0
protected void resetLoopCount()
{    loopCount = getStartIndex();}
0
protected int getIterCount()
{    return loopCount + 1;}
0
protected void reInitialize()
{    setFirst(true);    resetCurrent();    incrementLoopCount();    recoverRunningVersion();}
0
public void triggerEndOfLoop()
{    super.triggerEndOfLoop();    resetLoopCount();}
0
public void initialize()
{    super.initialize();    loopCount = getStartIndex();}
0
public void startNextLoop()
{    reInitialize();}
0
private void resetBreakLoop()
{    if (breakLoop) {        breakLoop = false;    }}
0
public void breakLoop()
{    breakLoop = true;    setFirst(true);    resetCurrent();    resetLoopCount();    recoverRunningVersion();}
0
public void iterationStart(LoopIterationEvent iterEvent)
{    reInitialize();    resetLoopCount();}
0
public void configure(TestElement element)
{    super.configure(element);    if (element instanceof CriticalSectionController) {        CriticalSectionController controller = (CriticalSectionController) element;        tfLockName.setText(controller.getLockName());    }}
0
public TestElement createTestElement()
{    CriticalSectionController controller = new CriticalSectionController();    modifyTestElement(controller);    return controller;}
0
public void modifyTestElement(TestElement controller)
{    configureTestElement(controller);    if (controller instanceof CriticalSectionController) {        CriticalSectionController csController = (CriticalSectionController) controller;        csController.setLockName(tfLockName.getText());    }}
0
public void clearGui()
{    super.clearGui();        tfLockName.setText("global_lock");}
0
public String getLabelResource()
{        return "critical_section_controller_title";}
0
private void init()
{        if (displayName) {        setLayout(new BorderLayout(0, 5));        setBorder(makeBorder());        add(makeTitlePanel(), BorderLayout.NORTH);        JPanel mainPanel = new JPanel(new BorderLayout());        mainPanel.add(createCriticalSectionPanel(), BorderLayout.NORTH);        add(mainPanel, BorderLayout.CENTER);    } else {                setLayout(new BorderLayout());        add(createCriticalSectionPanel(), BorderLayout.NORTH);    }}
0
private JPanel createCriticalSectionPanel()
{    JPanel conditionPanel = new JPanel(new BorderLayout(5, 0));        JLabel conditionLabel = new JLabel(    JMeterUtils.getResString("critical_section_controller_label"));    conditionPanel.add(conditionLabel, BorderLayout.WEST);            tfLockName = new JTextField("");    conditionLabel.setLabelFor(tfLockName);    conditionPanel.add(tfLockName, BorderLayout.CENTER);    conditionPanel.add(Box.createHorizontalStrut(conditionLabel.getPreferredSize().width + tfLockName.getPreferredSize().width), BorderLayout.NORTH);    return conditionPanel;}
0
public void configure(TestElement element)
{    super.configure(element);    inputVal.setText(((ForeachController) element).getInputValString());    startIndex.setText(((ForeachController) element).getStartIndexAsString());    endIndex.setText(((ForeachController) element).getEndIndexAsString());    returnVal.setText(((ForeachController) element).getReturnValString());    useSeparator.setSelected(((ForeachController) element).getUseSeparator());}
0
public TestElement createTestElement()
{    ForeachController lc = new ForeachController();    modifyTestElement(lc);    return lc;}
0
public void modifyTestElement(TestElement lc)
{    configureTestElement(lc);    if (lc instanceof ForeachController) {        ForeachController fec = (ForeachController) lc;        fec.setInputVal(inputVal.getText());        fec.setStartIndex(startIndex.getText());        fec.setEndIndex(endIndex.getText());        fec.setReturnVal(returnVal.getText());        fec.setUseSeparator(useSeparator.isSelected());    }}
0
public void clearGui()
{    super.clearGui();        inputVal.setText("");        startIndex.setText("");        endIndex.setText("");        returnVal.setText("");    useSeparator.setSelected(true);}
0
public String getLabelResource()
{        return "foreach_controller_title";}
0
private void init()
{        if (displayName) {        setLayout(new BorderLayout(0, 5));        setBorder(makeBorder());        add(makeTitlePanel(), BorderLayout.NORTH);        JPanel mainPanel = new JPanel(new BorderLayout());        mainPanel.add(createLoopCountPanel(), BorderLayout.NORTH);        add(mainPanel, BorderLayout.CENTER);    } else {                setLayout(new BorderLayout());        add(createLoopCountPanel(), BorderLayout.NORTH);    }}
0
private JPanel createLoopCountPanel()
{    VerticalPanel loopPanel = new VerticalPanel();            JLabel inputValLabel = new JLabel(JMeterUtils.getResString("foreach_input"));        JLabel startIndexLabel = new JLabel(JMeterUtils.getResString("foreach_start_index"));        JLabel endIndexLabel = new JLabel(JMeterUtils.getResString("foreach_end_index"));        JLabel returnValLabel = new JLabel(JMeterUtils.getResString("foreach_output"));        JPanel inputValSubPanel = new JPanel(new BorderLayout(5, 0));        inputVal = new JTextField("", 5);    inputVal.setName(INPUT_VAL_NAME);    inputValLabel.setLabelFor(inputVal);    inputValSubPanel.add(inputValLabel, BorderLayout.WEST);    inputValSubPanel.add(inputVal, BorderLayout.CENTER);        JPanel startIndexSubPanel = new JPanel(new BorderLayout(5, 0));        startIndex = new JTextField("", 5);    startIndex.setName(START_INDEX_NAME);    startIndexLabel.setLabelFor(startIndex);    startIndexSubPanel.add(startIndexLabel, BorderLayout.WEST);    startIndexSubPanel.add(startIndex, BorderLayout.CENTER);        JPanel endIndexSubPanel = new JPanel(new BorderLayout(5, 0));        endIndex = new JTextField("", 5);    endIndex.setName(END_INDEX_NAME);    endIndexLabel.setLabelFor(endIndex);    endIndexSubPanel.add(endIndexLabel, BorderLayout.WEST);    endIndexSubPanel.add(endIndex, BorderLayout.CENTER);        JPanel returnValSubPanel = new JPanel(new BorderLayout(5, 0));        returnVal = new JTextField("", 5);    returnVal.setName(RETURN_VAL_NAME);    returnValLabel.setLabelFor(returnVal);    returnValSubPanel.add(returnValLabel, BorderLayout.WEST);    returnValSubPanel.add(returnVal, BorderLayout.CENTER);            useSeparator = new JCheckBox(JMeterUtils.getResString("foreach_use_separator"), true);    loopPanel.add(inputValSubPanel);    loopPanel.add(startIndexSubPanel);    loopPanel.add(endIndexSubPanel);    loopPanel.add(returnValSubPanel);    loopPanel.add(useSeparator);    return loopPanel;}
0
public String getLabelResource()
{        return "include_controller";}
0
public void configure(TestElement el)
{    super.configure(el);    IncludeController controller = (IncludeController) el;    this.includePanel.setFilename(controller.getIncludePath());}
0
public TestElement createTestElement()
{    IncludeController mc = new IncludeController();    configureTestElement(mc);    return mc;}
0
public void modifyTestElement(TestElement element)
{    configureTestElement(element);    IncludeController controller = (IncludeController) element;    controller.setIncludePath(this.includePanel.getFilename());}
0
public void clearGui()
{    super.clearGui();    includePanel.clearGui();}
0
public JPopupMenu createPopupMenu()
{    JPopupMenu menu = new JPopupMenu();    MenuFactory.addEditMenu(menu, true);    MenuFactory.addFileMenu(menu);    return menu;}
0
private void init()
{        setLayout(new VerticalLayout(5, VerticalLayout.BOTH, VerticalLayout.TOP));    setBorder(makeBorder());    add(makeTitlePanel());    add(includePanel);}
0
public void configure(TestElement el)
{    super.configure(el);    InterleaveControl controller = (InterleaveControl) el;    if (controller.getStyle() == InterleaveControl.IGNORE_SUB_CONTROLLERS) {        style.setSelected(true);    } else {        style.setSelected(false);    }    accrossThreads.setSelected(controller.getInterleaveAccrossThreads());}
0
public TestElement createTestElement()
{    InterleaveControl ic = new InterleaveControl();    modifyTestElement(ic);    return ic;}
0
public void modifyTestElement(TestElement ic)
{    configureTestElement(ic);    InterleaveControl controller = (InterleaveControl) ic;    if (style.isSelected()) {        controller.setStyle(InterleaveControl.IGNORE_SUB_CONTROLLERS);    } else {        controller.setStyle(InterleaveControl.USE_SUB_CONTROLLERS);    }    controller.setInterleaveAccrossThreads(accrossThreads.isSelected());}
0
public void clearGui()
{    super.clearGui();    style.setSelected(false);    accrossThreads.setSelected(false);}
0
public String getLabelResource()
{        return "interleave_control_title";}
0
private void init()
{        setLayout(new VerticalLayout(5, VerticalLayout.BOTH, VerticalLayout.TOP));    setBorder(makeBorder());    add(makeTitlePanel());        style = new JCheckBox(JMeterUtils.getResString("ignore_subcontrollers"));    add(CheckBoxPanel.wrap(style));        accrossThreads = new JCheckBox(JMeterUtils.getResString("interleave_accross_threads"));    add(CheckBoxPanel.wrap(accrossThreads));}
0
private boolean isSelectedPathAllowed(DefaultMutableTreeNode lastSelected)
{    JMeterTreeNode tn = null;    if (lastSelected != null && lastSelected.getUserObject() instanceof JMeterTreeNode) {        tn = (JMeterTreeNode) lastSelected.getUserObject();    }    return tn != null && isTestElementAllowed(tn.getTestElement());}
0
public void setSelectionPath(TreePath path)
{    DefaultMutableTreeNode lastSelected = (DefaultMutableTreeNode) path.getLastPathComponent();    if (isSelectedPathAllowed(lastSelected)) {        super.setSelectionPath(path);    }}
0
public void setSelectionPaths(TreePath[] pPaths)
{    DefaultMutableTreeNode lastSelected = (DefaultMutableTreeNode) pPaths[pPaths.length - 1].getLastPathComponent();    if (isSelectedPathAllowed(lastSelected)) {        super.setSelectionPaths(pPaths);    }}
0
public void addSelectionPath(TreePath path)
{    DefaultMutableTreeNode lastSelected = (DefaultMutableTreeNode) path.getLastPathComponent();    if (isSelectedPathAllowed(lastSelected)) {        super.addSelectionPath(path);    }}
0
public void addSelectionPaths(TreePath[] paths)
{    DefaultMutableTreeNode lastSelected = (DefaultMutableTreeNode) paths[paths.length - 1].getLastPathComponent();    if (isSelectedPathAllowed(lastSelected)) {        super.addSelectionPaths(paths);    }}
0
public String getLabelResource()
{        return "module_controller_title";}
0
public void configure(TestElement el)
{    super.configure(el);    hasAtLeastOneController = false;    ModuleController controller = (ModuleController) el;    this.selected = controller.getSelectedNode();    if (selected == null && controller.getNodePath() != null) {        warningLabel.setText(        JMeterUtils.getResString("module_controller_warning") + renderPath(controller.getNodePath()));        warningLabel.setVisible(true);        expandButton.setEnabled(false);    } else {        warningLabel.setVisible(false);        expandButton.setEnabled(true);    }    reinitialize();}
0
private String renderPath(Collection<?> path)
{    Iterator<?> iter = path.iterator();    StringBuilder buf = new StringBuilder();    boolean first = true;    while (iter.hasNext()) {        if (first) {            first = false;            iter.next();            continue;        }        buf.append(iter.next());        if (iter.hasNext()) {                        buf.append(SEPARATOR);        }    }    return buf.toString();}
0
public TestElement createTestElement()
{    ModuleController mc = new ModuleController();    configureTestElement(mc);    if (selected != null) {        mc.setSelectedNode(selected);    }    return mc;}
0
public void modifyTestElement(TestElement element)
{    configureTestElement(element);    JMeterTreeNode tn = null;    DefaultMutableTreeNode lastSelected = (DefaultMutableTreeNode) this.moduleToRunTreeNodes.getLastSelectedPathComponent();    if (lastSelected != null && lastSelected.getUserObject() instanceof JMeterTreeNode) {        tn = (JMeterTreeNode) lastSelected.getUserObject();    }    if (tn != null) {        selected = tn;                if (isTestElementAllowed(selected.getTestElement())) {            ((ModuleController) element).setSelectedNode(selected);        }    }}
0
private static boolean isTestElementAllowed(TestElement testElement)
{    return testElement != null && !(testElement instanceof AbstractThreadGroup) && !(testElement instanceof TestPlan);}
0
public void clearGui()
{    super.clearGui();    selected = null;    hasAtLeastOneController = false;    if (moduleToRunTreeModel != null) {        ((DefaultMutableTreeNode) moduleToRunTreeModel.getRoot()).removeAllChildren();    }    if (moduleToRunTreeNodes != null) {        moduleToRunTreeNodes.clearSelection();    }}
0
public JPopupMenu createPopupMenu()
{    JPopupMenu menu = new JPopupMenu();    MenuFactory.addEditMenu(menu, true);    MenuFactory.addFileMenu(menu);    return menu;}
0
private void init()
{        setLayout(new VerticalLayout(5, VerticalLayout.BOTH, VerticalLayout.TOP));    setBorder(makeBorder());    add(makeTitlePanel());    JPanel modulesPanel = new JPanel();        expandButton = new JButton(JMeterUtils.getResString("find_target_element"));    expandButton.addActionListener(this);    modulesPanel.add(expandButton);    modulesPanel.setLayout(new BoxLayout(modulesPanel, BoxLayout.Y_AXIS));    modulesPanel.add(Box.createRigidArea(new Dimension(0, 5)));        JLabel nodesLabel = new JLabel(JMeterUtils.getResString("module_controller_module_to_run"));    modulesPanel.add(nodesLabel);    modulesPanel.add(warningLabel);    add(modulesPanel);    JPanel treePanel = new JPanel();    treePanel.setLayout(new FlowLayout(FlowLayout.LEFT));    treePanel.add(moduleToRunTreeNodes);    add(treePanel);}
0
private TreeNode[] findPathInTreeModel(int level, TreeNode[] testPlanPath, DefaultMutableTreeNode parent)
{    if (level >= testPlanPath.length) {        return EMPTY_TREE_NODES;    }    int childCount = parent.getChildCount();    JMeterTreeNode searchedTreeNode = (JMeterTreeNode) testPlanPath[level];    for (int i = 0; i < childCount; i++) {        DefaultMutableTreeNode child = (DefaultMutableTreeNode) parent.getChildAt(i);        JMeterTreeNode childUserObj = (JMeterTreeNode) child.getUserObject();        if (childUserObj.equals(searchedTreeNode)) {            if (level == (testPlanPath.length - 1)) {                return child.getPath();            } else {                return findPathInTreeModel(level + 1, testPlanPath, child);            }        }    }    return EMPTY_TREE_NODES;}
0
private void focusSelectedOnTree(JMeterTreeNode selected)
{    TreeNode[] path = selected.getPath();    TreeNode[] filteredPath = new TreeNode[path.length - 1];        System.arraycopy(path, 1, filteredPath, 0, path.length - 1);    DefaultMutableTreeNode root = (DefaultMutableTreeNode) moduleToRunTreeNodes.getModel().getRoot();            TreeNode[] dmtnPath = this.findPathInTreeModel(1, filteredPath, root);    if (dmtnPath.length > 0) {        TreePath treePath = new TreePath(dmtnPath);        moduleToRunTreeNodes.setSelectionPath(treePath);        moduleToRunTreeNodes.scrollPathToVisible(treePath);    }}
0
private void reinitialize()
{    ((DefaultMutableTreeNode) moduleToRunTreeModel.getRoot()).removeAllChildren();    GuiPackage gp = GuiPackage.getInstance();    JMeterTreeNode root;    if (gp != null) {        root = (JMeterTreeNode) GuiPackage.getInstance().getTreeModel().getRoot();        buildTreeNodeModel(root, 0, null);        moduleToRunTreeModel.nodeStructureChanged((TreeNode) moduleToRunTreeModel.getRoot());    }    if (selected != null) {                this.focusSelectedOnTree(selected);    }    if (!hasAtLeastOneController) {        warningLabel.setText(JMeterUtils.getResString("module_controller_warning_no_controller"));        warningLabel.setVisible(true);    }}
0
private void buildTreeNodeModel(JMeterTreeNode node, int level, DefaultMutableTreeNode parent)
{    if (node != null) {        for (int i = 0; i < node.getChildCount(); i++) {            JMeterTreeNode cur = (JMeterTreeNode) node.getChildAt(i);            TestElement te = cur.getTestElement();            if (te instanceof TestFragmentController || te instanceof AbstractThreadGroup || (te instanceof Controller && !(te instanceof ModuleController) && level > 0)) {                DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(cur);                parent.add(newNode);                buildTreeNodeModel(cur, level + 1, newNode);                final boolean isController = te instanceof Controller && !(te instanceof ModuleController || te instanceof AbstractThreadGroup);                hasAtLeastOneController = hasAtLeastOneController || isController;            } else if (te instanceof TestPlan) {                ((DefaultMutableTreeNode) moduleToRunTreeModel.getRoot()).setUserObject(cur);                buildTreeNodeModel(cur, level, (DefaultMutableTreeNode) moduleToRunTreeModel.getRoot());            }        }    }}
0
public void actionPerformed(ActionEvent e)
{    if (e.getSource() == expandButton) {        DefaultMutableTreeNode currentSelectedNodeInMC = (DefaultMutableTreeNode) this.moduleToRunTreeNodes.getLastSelectedPathComponent();        JMeterTreeNode nodeToExpandInTestPlanTree = null;        if (currentSelectedNodeInMC != null && currentSelectedNodeInMC.getUserObject() instanceof JMeterTreeNode) {            nodeToExpandInTestPlanTree = (JMeterTreeNode) currentSelectedNodeInMC.getUserObject();        }        if (nodeToExpandInTestPlanTree != null) {            TreePath treePath = new TreePath(nodeToExpandInTestPlanTree.getPath());                        GuiPackage.getInstance().getTreeListener().getJTree().setSelectionPath(treePath);                        GuiPackage.getInstance().getTreeListener().getJTree().scrollPathToVisible(treePath);        }    }}
0
protected void expandToSelectNode(JMeterTreeNode selected)
{    GuiPackage guiInstance = GuiPackage.getInstance();    JTree jTree = guiInstance.getMainFrame().getTree();    jTree.expandPath(new TreePath(selected.getPath()));    selected.setMarkedBySearch(true);}
0
public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus)
{    JMeterTreeNode node = (JMeterTreeNode) ((DefaultMutableTreeNode) value).getUserObject();    if (node != null) {        super.getTreeCellRendererComponent(tree, node.getName(), selected, expanded, leaf, row, hasFocus);                boolean enabled = node.isEnabled();        ImageIcon icon = node.getIcon(enabled);        if (icon != null) {            if (enabled) {                setIcon(icon);            } else {                setDisabledIcon(icon);            }        } else if (!enabled) {                                    icon = node.getIcon();            if (icon != null) {                setIcon(icon);            }        }    }    return this;}
0
public TestElement createTestElement()
{    OnceOnlyController oc = new OnceOnlyController();    modifyTestElement(oc);    return oc;}
0
public void modifyTestElement(TestElement oc)
{    configureTestElement(oc);}
0
public String getLabelResource()
{        return "once_only_controller_title";}
0
private void init()
{        setLayout(new VerticalLayout(5, VerticalLayout.BOTH, VerticalLayout.TOP));    setBorder(makeBorder());    add(makeTitlePanel());}
0
public TestElement createTestElement()
{    RandomController ic = new RandomController();    modifyTestElement(ic);    return ic;}
0
public void modifyTestElement(TestElement ic)
{    configureTestElement(ic);    if (style.isSelected()) {        ((RandomController) ic).setStyle(InterleaveControl.IGNORE_SUB_CONTROLLERS);    } else {        ((RandomController) ic).setStyle(InterleaveControl.USE_SUB_CONTROLLERS);    }}
0
public void clearGui()
{    super.clearGui();    style.setSelected(false);}
0
public void configure(TestElement el)
{    super.configure(el);    if (((RandomController) el).getStyle() == InterleaveControl.IGNORE_SUB_CONTROLLERS) {        style.setSelected(true);    } else {        style.setSelected(false);    }}
0
public String getLabelResource()
{        return "random_control_title";}
0
private void init()
{        setLayout(new VerticalLayout(5, VerticalLayout.BOTH, VerticalLayout.TOP));    setBorder(makeBorder());    add(makeTitlePanel());        style = new JCheckBox(JMeterUtils.getResString("ignore_subcontrollers"));    add(CheckBoxPanel.wrap(style));}
0
public String getLabelResource()
{        return "random_order_control_title";}
0
public TestElement createTestElement()
{    RandomOrderController ic = new RandomOrderController();    modifyTestElement(ic);    return ic;}
0
public void modifyTestElement(TestElement ic)
{    configureTestElement(ic);}
0
public TestElement createTestElement()
{    SwitchController ic = new SwitchController();    modifyTestElement(ic);    return ic;}
0
public void modifyTestElement(TestElement ic)
{    configureTestElement(ic);    ((SwitchController) ic).setSelection(switchValue.getText());}
0
public void clearGui()
{    super.clearGui();        switchValue.setText("");}
0
public void configure(TestElement el)
{    super.configure(el);    switchValue.setText(((SwitchController) el).getSelection());}
0
public String getLabelResource()
{        return "switch_controller_title";}
0
private void init()
{        setLayout(new BorderLayout(0, 5));    setBorder(makeBorder());    add(makeTitlePanel(), BorderLayout.NORTH);    JPanel mainPanel = new JPanel(new BorderLayout());    mainPanel.add(createSwitchPanel(), BorderLayout.NORTH);    add(mainPanel, BorderLayout.CENTER);}
0
private JPanel createSwitchPanel()
{    JPanel switchPanel = new JPanel(new BorderLayout(5, 0));    JLabel selectionLabel = new JLabel(JMeterUtils.getResString(SWITCH_LABEL));        switchValue = new JTextField("");    selectionLabel.setLabelFor(switchValue);    switchPanel.add(selectionLabel, BorderLayout.WEST);    switchPanel.add(switchValue, BorderLayout.CENTER);    return switchPanel;}
0
public TestElement createTestElement()
{    ThroughputController tc = new ThroughputController();    modifyTestElement(tc);    return tc;}
0
public void modifyTestElement(TestElement tc)
{    configureTestElement(tc);    ((ThroughputController) tc).setStyle(style);    ((ThroughputController) tc).setPerThread(isPerThread);    if (style == ThroughputController.BYNUMBER) {        try {            ((ThroughputController) tc).setMaxThroughput(Integer.parseInt(throughput.getText().trim()));        } catch (NumberFormatException e) {                                    ((ThroughputController) tc).setMaxThroughput(throughput.getText().trim().split("\\.")[0]);        }    } else {        try {            ((ThroughputController) tc).setPercentThroughput(Float.parseFloat(throughput.getText().trim()));        } catch (NumberFormatException e) {            ((ThroughputController) tc).setPercentThroughput(throughput.getText());        }    }}
0
public void clearGui()
{    super.clearGui();    styleBox.setSelectedIndex(1);        throughput.setText("1");    perthread.setSelected(false);}
0
public void configure(TestElement el)
{    super.configure(el);    if (((ThroughputController) el).getStyle() == ThroughputController.BYNUMBER) {        styleBox.getModel().setSelectedItem(BYNUMBER_LABEL);        throughput.setText(((ThroughputController) el).getMaxThroughput());    } else {        styleBox.setSelectedItem(BYPERCENT_LABEL);        throughput.setText(((ThroughputController) el).getPercentThroughput());    }    perthread.setSelected(((ThroughputController) el).isPerThread());}
0
public String getLabelResource()
{        return "throughput_control_title";}
0
private void init()
{        setLayout(new VerticalLayout(5, VerticalLayout.BOTH, VerticalLayout.TOP));    setBorder(makeBorder());    add(makeTitlePanel());    DefaultComboBoxModel<String> styleModel = new DefaultComboBoxModel<>();    styleModel.addElement(BYNUMBER_LABEL);    styleModel.addElement(BYPERCENT_LABEL);    styleBox = new JComboBox<>(styleModel);    styleBox.addActionListener(evt -> {        if (((String) styleBox.getSelectedItem()).equals(BYNUMBER_LABEL)) {            style = ThroughputController.BYNUMBER;        } else {            style = ThroughputController.BYPERCENT;        }    });    add(styleBox);        JPanel tpPanel = new JPanel();    JLabel tpLabel = new JLabel(THROUGHPUT_LABEL);    tpPanel.add(tpLabel);        throughput = new JTextField(15);    tpPanel.add(throughput);        throughput.setText("1");    tpPanel.add(throughput);    add(tpPanel);        perthread = new JCheckBox(PERTHREAD_LABEL, isPerThread);    perthread.addItemListener(evt -> {        if (evt.getStateChange() == ItemEvent.SELECTED) {            isPerThread = true;        } else {            isPerThread = false;        }    });    add(CheckBoxPanel.wrap(perthread));}
0
public JMeterTreeNode getTreeNode()
{    return tn;}
0
public String toString()
{    return label;}
0
public String getLabel()
{    return label;}
0
public Object clone()
{            this.resolveReplacementSubTree(null);    IncludeController clone = (IncludeController) super.clone();    clone.setIncludePath(this.getIncludePath());    if (this.subtree != null) {        if (this.subtree.size() == 1) {            for (Object o : this.subtree.keySet()) {                this.sub = (TestElement) o;            }        }        clone.subtree = (HashTree) this.subtree.clone();        clone.sub = this.sub == null ? null : (TestElement) this.sub.clone();    }    return clone;}
0
public void setIncludePath(String jmxfile)
{    this.setProperty(INCLUDE_PATH, jmxfile);}
0
public String getIncludePath()
{    return this.getPropertyAsString(INCLUDE_PATH);}
0
public HashTree getReplacementSubTree()
{    return subtree;}
0
public TestElement getReplacementElement()
{    return sub;}
0
public void resolveReplacementSubTree(JMeterTreeNode context)
{    this.subtree = this.loadIncludedElements();}
0
protected HashTree loadIncludedElements()
{        final String includePath = getIncludePath();    HashTree tree = null;    if (includePath != null && includePath.length() > 0) {        String fileName = PREFIX + includePath;        try {            File file = new File(fileName.trim());            final String absolutePath = file.getAbsolutePath();                        if (!file.exists() && !file.isAbsolute()) {                                file = new File(FileServer.getFileServer().getBaseDir(), includePath);                if (log.isInfoEnabled()) {                                    }                if (!file.canRead() || !file.isFile()) {                                        throw new IOException("loadIncludedElements -failed for: " + absolutePath + " and " + file.getAbsolutePath());                }            }            tree = SaveService.loadTree(file);                        tree = getProperBranch(tree);            removeDisabledItems(tree);            return tree;        } catch (        NoClassDefFoundError ex) {            String msg = "Including file \"" + fileName + "\" failed for Include Controller \"" + this.getName() + "\", missing jar file";                        JMeterUtils.reportErrorToUser(msg + " - see log for details");        } catch (FileNotFoundException ex) {            String msg = "File \"" + fileName + "\" not found for Include Controller \"" + this.getName() + "\"";            JMeterUtils.reportErrorToUser(msg + " - see log for details");                    } catch (Exception ex) {            String msg = "Including file \"" + fileName + "\" failed for Include Controller \"" + this.getName() + "\", unexpected error";            JMeterUtils.reportErrorToUser(msg + " - see log for details");                    }    }    return tree;}
1
private HashTree getProperBranch(HashTree tree)
{    for (Object o : new LinkedList<>(tree.list())) {        TestElement item = (TestElement) o;                if (item instanceof TestPlan) {            return getProperBranch(tree.getTree(item));        }        if (item instanceof TestFragmentController) {            return tree.getTree(item);        }    }        return new HashTree();}
1
private void removeDisabledItems(HashTree tree)
{    for (Object o : new LinkedList<>(tree.list())) {        TestElement item = (TestElement) o;        if (!item.isEnabled()) {            tree.remove(item);        } else {                        removeDisabledItems(tree.getTree(item));        }    }}
0
public void reInitialize()
{    setFirst(true);    currentReturnedAtLeastOne = false;    searchStart = null;    stillSame = true;    skipNext = false;    incrementIterCount();    recoverRunningVersion();}
0
public void setStyle(int style)
{    setProperty(new IntegerProperty(STYLE, style));}
0
public int getStyle()
{    return getPropertyAsInt(STYLE);}
0
public void setInterleaveAccrossThreads(boolean accrossThreads)
{    setProperty(new BooleanProperty(ACCROSS_THREADS, accrossThreads));}
0
public boolean getInterleaveAccrossThreads()
{    return getPropertyAsBoolean(ACCROSS_THREADS, false);}
0
public Sampler next()
{    if (isSkipNext()) {        reInitialize();        return null;    }    return super.next();}
0
protected Sampler nextIsAController(Controller controller) throws NextIsNullException
{    Sampler sampler = controller.next();    if (sampler == null) {        currentReturnedNull(controller);        return next();    }    currentReturnedAtLeastOne = true;    if (getStyle() == IGNORE_SUB_CONTROLLERS) {        incrementCurrent();        skipNext = true;    } else {        searchStart = null;    }    return sampler;}
0
protected Sampler nextIsASampler(Sampler element) throws NextIsNullException
{    skipNext = true;    incrementCurrent();    return element;}
0
protected Sampler nextIsNull()
{    resetCurrent();    return next();}
0
protected void setCurrentElement(TestElement currentElement) throws NextIsNullException
{        if (searchStart == null) {        searchStart = currentElement;    } else if (searchStart == currentElement && !stillSame) {                        reInitialize();        throw new NextIsNullException();    }}
0
protected void currentReturnedNull(Controller c)
{    if (c.isDone()) {        removeCurrentElement();    } else if (getStyle() == USE_SUB_CONTROLLERS) {        incrementCurrent();    }}
0
protected boolean isSkipNext()
{    return skipNext;}
0
protected void setSkipNext(boolean skipNext)
{    this.skipNext = skipNext;}
0
protected void incrementCurrent()
{    if (currentReturnedAtLeastOne) {        skipNext = true;    }    stillSame = false;    super.incrementCurrent();}
0
public void initialize()
{    super.initialize();        if (getInterleaveAccrossThreads()) {        this.current = getThreadContext().getThreadNum() % getSubControllers().size();    }}
0
public Object clone()
{    ModuleController clone = (ModuleController) super.clone();    if (selectedNode == null) {        this.restoreSelected();    }        clone.selectedNode = selectedNode;    return clone;}
0
public void setSelectedNode(JMeterTreeNode tn)
{    selectedNode = tn;    setNodePath();}
0
public JMeterTreeNode getSelectedNode()
{    if (selectedNode == null) {        restoreSelected();    }    return selectedNode;}
0
private void setNodePath()
{    List<String> nodePath = new ArrayList<>();    if (selectedNode != null) {        TreeNode[] path = selectedNode.getPath();        for (TreeNode node : path) {            nodePath.add(((JMeterTreeNode) node).getName());        }    }    setProperty(new CollectionProperty(NODE_PATH, nodePath));}
0
public List<?> getNodePath()
{    JMeterProperty prop = getProperty(NODE_PATH);    if (!(prop instanceof NullProperty)) {        return (List<?>) prop.getObjectValue();    }    return null;}
0
private void restoreSelected()
{    GuiPackage gp = GuiPackage.getInstance();    if (gp != null) {        JMeterTreeNode root = (JMeterTreeNode) gp.getTreeModel().getRoot();        resolveReplacementSubTree(root);    }}
0
public void resolveReplacementSubTree(JMeterTreeNode context)
{    if (selectedNode == null) {        List<?> nodePathList = getNodePath();        if (nodePathList != null && !nodePathList.isEmpty()) {            traverse(context, nodePathList, 1);        }        if (hasReplacementOccured() && selectedNode == null) {            throw new JMeterStopTestException("ModuleController:" + getName() + " has no selected Controller (did you rename some element in the path to target controller?), test was shutdown as a consequence");        }    }}
0
private boolean hasReplacementOccured()
{    return GuiPackage.getInstance() == null || isRunningVersion();}
0
private void traverse(JMeterTreeNode node, List<?> nodePath, int level)
{    if (node != null && nodePath.size() > level) {        for (int i = 0; i < node.getChildCount(); i++) {            JMeterTreeNode cur = (JMeterTreeNode) node.getChildAt(i);                        if (!(cur.getTestElement() instanceof ModuleController)) {                if (cur.getName().equals(nodePath.get(level).toString())) {                    if (nodePath.size() == (level + 1)) {                        selectedNode = cur;                    }                    traverse(cur, nodePath, level + 1);                }            }        }    }}
0
public HashTree getReplacementSubTree()
{    HashTree tree = new ListedHashTree();    if (selectedNode != null) {                JMeterTreeNode nodeToReplace = selectedNode;                if (!nodeToReplace.isEnabled()) {            nodeToReplace = cloneTreeNode(selectedNode);            nodeToReplace.setEnabled(true);        }        HashTree subtree = tree.add(nodeToReplace);        createSubTree(subtree, nodeToReplace);    }    return tree;}
0
private void createSubTree(HashTree tree, JMeterTreeNode node)
{    Enumeration<?> e = node.children();    while (e.hasMoreElements()) {        JMeterTreeNode subNode = (JMeterTreeNode) e.nextElement();        tree.add(subNode);        createSubTree(tree.getTree(subNode), subNode);    }}
0
private static JMeterTreeNode cloneTreeNode(JMeterTreeNode node)
{    JMeterTreeNode treeNode = (JMeterTreeNode) node.clone();    treeNode.setUserObject(((TestElement) node.getUserObject()).clone());    cloneChildren(treeNode, node);    return treeNode;}
0
private static void cloneChildren(JMeterTreeNode to, JMeterTreeNode from)
{    Enumeration<?> enumr = from.children();    while (enumr.hasMoreElements()) {        JMeterTreeNode child = (JMeterTreeNode) enumr.nextElement();        JMeterTreeNode childClone = (JMeterTreeNode) child.clone();        childClone.setUserObject(((TestElement) child.getUserObject()).clone());        to.add(childClone);        cloneChildren((JMeterTreeNode) to.getLastChild(), child);    }}
0
public void iterationStart(LoopIterationEvent event)
{    int numIteration = 1;        if (!(event.getSource() instanceof LoopController)) {        numIteration = 0;    }    if (event.getIteration() == numIteration) {        reInitialize();    }}
0
protected Sampler nextIsNull() throws NextIsNullException
{    return null;}
0
protected void resetCurrent()
{    if (getSubControllers().isEmpty()) {        current = 0;    } else {        current = ThreadLocalRandom.current().nextInt(this.getSubControllers().size());    }}
0
protected void incrementCurrent()
{    super.incrementCurrent();    current = ThreadLocalRandom.current().nextInt(this.getSubControllers().size());}
0
public void initialize()
{    super.initialize();    this.reorder();}
0
protected void reInitialize()
{    super.reInitialize();    this.reorder();}
0
private void reorder()
{    Collections.shuffle(subControllersAndSamplers);}
0
public Sampler next()
{    if (isFirst()) {                current = getSelectionAsInt();    }    return super.next();}
0
protected void incrementCurrent()
{    current = Integer.MAX_VALUE;}
0
public void setSelection(String inputValue)
{    setProperty(new StringProperty(SWITCH_VALUE, inputValue));}
0
private int getSelectionAsInt()
{    getProperty(SWITCH_VALUE).recoverRunningVersion(null);    String sel = getSelection();    if (StringUtils.isEmpty(sel)) {        return 0;    } else {        try {            if (StringUtils.isNumeric(sel)) {                int ret = Integer.parseInt(sel);                if (ret < 0 || ret >= getSubControllers().size()) {                                        ret = 0;                }                return ret;            }        } catch (NumberFormatException e) {                }        return scanControllerNames(sel);    }}
0
private int scanControllerNames(String sel)
{    int i = 0;    int defaultPos = Integer.MAX_VALUE;    for (TestElement el : getSubControllers()) {        String name = el.getName();        if (name.equals(sel)) {            return i;        }        if (name.equalsIgnoreCase("default")) {                        defaultPos = i;        }        i++;    }    return defaultPos;}
0
public String getSelection()
{    return getPropertyAsString(SWITCH_VALUE).trim();}
0
 int incr()
{    return ++integer;}
0
 int intValue()
{    return integer;}
0
public void setStyle(int style)
{    setProperty(new IntegerProperty(STYLE, style));}
0
public int getStyle()
{    return getPropertyAsInt(STYLE);}
0
public void setPerThread(boolean perThread)
{    setProperty(new BooleanProperty(PERTHREAD, perThread));}
0
public boolean isPerThread()
{    return getPropertyAsBoolean(PERTHREAD);}
0
public void setMaxThroughput(int maxThroughput)
{    setProperty(new IntegerProperty(MAXTHROUGHPUT, maxThroughput));}
0
public void setMaxThroughput(String maxThroughput)
{    setProperty(new StringProperty(MAXTHROUGHPUT, maxThroughput));}
0
public String getMaxThroughput()
{    return getPropertyAsString(MAXTHROUGHPUT);}
0
protected int getMaxThroughputAsInt()
{    JMeterProperty prop = getProperty(MAXTHROUGHPUT);    int retVal = 1;    if (prop instanceof IntegerProperty) {        retVal = prop.getIntValue();    } else {        String valueString = prop.getStringValue();        try {            retVal = Integer.parseInt(valueString);        } catch (NumberFormatException e) {                    }    }    return retVal;}
1
public void setPercentThroughput(float percentThroughput)
{    setProperty(new FloatProperty(PERCENTTHROUGHPUT, percentThroughput));}
0
public void setPercentThroughput(String percentThroughput)
{    setProperty(new StringProperty(PERCENTTHROUGHPUT, percentThroughput));}
0
public String getPercentThroughput()
{    return getPropertyAsString(PERCENTTHROUGHPUT);}
0
protected float getPercentThroughputAsFloat()
{    JMeterProperty prop = getProperty(PERCENTTHROUGHPUT);    float retVal = 100;    if (prop instanceof FloatProperty) {        retVal = prop.getFloatValue();    } else {        String valueString = prop.getStringValue();        try {            retVal = Float.parseFloat(valueString);        } catch (NumberFormatException e) {                    }    }    return retVal;}
1
private int getExecutions()
{    if (!isPerThread()) {        synchronized (counterLock) {            return globalNumExecutions.intValue();        }    }    return numExecutions;}
0
public Sampler next()
{    if (runThisTime) {        return super.next();    }    return null;}
0
private boolean decide(int executions, int iterations)
{    if (getStyle() == BYNUMBER) {        return executions < getMaxThroughputAsInt();    }    return (100.0 * executions + 50.0) / (iterations + 1) < getPercentThroughputAsFloat();}
0
public boolean isDone()
{    return subControllersAndSamplers.isEmpty() || ((getStyle() == BYNUMBER && ((getExecutions() >= getMaxThroughputAsInt() && current >= getSubControllers().size()) || (getMaxThroughputAsInt() == 0))) || (getStyle() == BYPERCENT && Float.compare(getPercentThroughputAsFloat(), 0.0f) == 0));}
0
public Object clone()
{    ThroughputController clone = (ThroughputController) super.clone();    clone.numExecutions = numExecutions;    clone.iteration = iteration;    clone.runThisTime = false;        clone.globalIteration = globalIteration;    clone.globalNumExecutions = globalNumExecutions;    clone.counterLock = counterLock;    return clone;}
0
public void iterationStart(LoopIterationEvent iterEvent)
{    if (!isPerThread()) {        synchronized (counterLock) {            globalIteration.incr();            runThisTime = decide(globalNumExecutions.intValue(), globalIteration.intValue());            if (runThisTime) {                globalNumExecutions.incr();            }        }    } else {        iteration++;        runThisTime = decide(numExecutions, iteration);        if (runThisTime) {            numExecutions++;        }    }}
0
public void testStarted()
{    synchronized (counterLock) {        globalNumExecutions = new MutableInteger(0);        globalIteration = new MutableInteger(-1);    }}
0
public void testStarted(String host)
{    testStarted();}
0
public void testEnded()
{}
0
public void testEnded(String host)
{}
0
protected Object readResolve()
{    super.readResolve();    counterLock = new Object();    return this;}
0
protected String getInitFileProperty()
{    return INIT_FILE;}
0
public void process()
{    JMeterContext jmctx = JMeterContextService.getContext();    SampleResult prev = jmctx.getPreviousResult();    if (prev == null) {                return;    }    final BeanShellInterpreter bshInterpreter = getBeanShellInterpreter();    if (bshInterpreter == null) {                return;    }    try {                        bshInterpreter.set("data", prev.getResponseData());        processFileOrScript(bshInterpreter);    } catch (JMeterException e) {        if (log.isWarnEnabled()) {                    }    }}
1
public Object clone()
{    return super.clone();}
0
public void process()
{    JMeterContext context = getThreadContext();    SampleResult previousResult = context.getPreviousResult();    if (previousResult == null) {        return;    }    if (log.isDebugEnabled()) {            }    if (StringUtils.isAnyEmpty(getLeftBoundary(), getRightBoundary(), getRefName())) {        throw new IllegalArgumentException("One of the mandatory properties is missing in Boundary Extractor:" + getName());    }    JMeterVariables vars = context.getVariables();    String refName = getRefName();    final String defaultValue = getDefaultValue();    if (StringUtils.isNotBlank(defaultValue) || isEmptyDefaultValue()) {        vars.put(refName, defaultValue);    }    int matchNumber = getMatchNumber();    int prevCount = 0;    int matchCount = 0;    try {        prevCount = removePrevCount(vars, refName);        List<String> matches = extractMatches(previousResult, vars, matchNumber);        matchCount = saveMatches(vars, refName, matchNumber, matches);    } catch (RuntimeException e) {                if (log.isWarnEnabled()) {                                }    } finally {                for (int i = matchCount + 1; i <= prevCount; i++) {            vars.remove(refName + UNDERSCORE + i);        }    }}
1
private int removePrevCount(JMeterVariables vars, String refName)
{    int prevCount = 0;    String prevString = vars.get(refName + REF_MATCH_NR);    if (prevString != null) {                vars.remove(refName + REF_MATCH_NR);        try {            prevCount = Integer.parseInt(prevString);        } catch (NumberFormatException nfe) {            if (log.isWarnEnabled()) {                            }        }    }    return prevCount;}
1
private List<String> extractMatches(SampleResult previousResult, JMeterVariables vars, int matchNumber)
{    if (isScopeVariable()) {        String inputString = vars.get(getVariableName());        if (inputString == null && log.isWarnEnabled()) {                    }        return extract(getLeftBoundary(), getRightBoundary(), matchNumber, inputString);    } else {        Stream<String> inputs = getSampleList(previousResult).stream().map(this::getInputString);        return extract(getLeftBoundary(), getRightBoundary(), matchNumber, inputs);    }}
1
private int saveMatches(JMeterVariables vars, String refName, int matchNumber, List<String> matches)
{    int matchCount = 0;    if (matchNumber == 0) {        saveRandomMatch(vars, refName, matches);    } else if (matchNumber > 0) {        saveOneMatch(vars, refName, matches);    } else {        matchCount = matches.size();        saveAllMatches(vars, refName, matches);    }    return matchCount;}
0
private void saveRandomMatch(JMeterVariables vars, String refName, List<String> matches)
{    String match = matches.get(JMeterUtils.getRandomInt(matches.size()));    if (match != null) {        vars.put(refName, match);    }}
0
private void saveOneMatch(JMeterVariables vars, String refName, List<String> matches)
{    if (matches.size() == 1) {                String match = matches.get(0);        if (match != null) {            vars.put(refName, match);        }    }}
0
private void saveAllMatches(JMeterVariables vars, String refName, List<String> matches)
{    vars.put(refName + REF_MATCH_NR, Integer.toString(matches.size()));    for (int i = 0; i < matches.size(); i++) {        String match = matches.get(i);        if (match != null) {            int varNum = i + 1;            vars.put(refName + UNDERSCORE + varNum, match);        }    }}
0
private String getInputString(SampleResult result)
{    String inputString =     useUrl() ?     result.getUrlAsString() : useHeaders() ? result.getResponseHeaders() : useRequestHeaders() ? result.getRequestHeaders() :     useCode() ?     result.getResponseCode() :     useMessage() ?     result.getResponseMessage() : useUnescapedBody() ? StringEscapeUtils.unescapeHtml4(result.getResponseDataAsString()) : useBodyAsDocument() ? Document.getTextFromDocument(result.getResponseData()) :     result.getResponseDataAsString();        return inputString;}
1
private List<String> extract(String leftBoundary, String rightBoundary, int matchNumber, Stream<String> previousResults)
{    boolean allItems = matchNumber <= 0;    return previousResults.flatMap(input -> extractAll(leftBoundary, rightBoundary, input).stream()).skip(allItems ? 0L : matchNumber - 1).limit(allItems ? Long.MAX_VALUE : 1L).collect(Collectors.toList());}
0
private List<String> extract(String leftBoundary, String rightBoundary, int matchNumber, String inputString)
{    if (StringUtils.isBlank(inputString)) {        return Collections.emptyList();    }    Objects.requireNonNull(leftBoundary);    Objects.requireNonNull(rightBoundary);    List<String> matches = new ArrayList<>();    int leftBoundaryLen = leftBoundary.length();    boolean collectAll = matchNumber <= 0;    int found = 0;    for (int startIndex = 0; (startIndex = inputString.indexOf(leftBoundary, startIndex)) != -1; startIndex += leftBoundaryLen) {        int endIndex = inputString.indexOf(rightBoundary, startIndex + leftBoundaryLen);        if (endIndex >= 0) {            found++;            if (collectAll) {                matches.add(inputString.substring(startIndex + leftBoundaryLen, endIndex));            } else if (found == matchNumber) {                return Collections.singletonList(inputString.substring(startIndex + leftBoundaryLen, endIndex));            }        } else {            break;        }    }    return matches;}
0
public List<String> extractAll(String leftBoundary, String rightBoundary, String textToParse)
{    return extract(leftBoundary, rightBoundary, -1, textToParse);}
0
public void setRefName(String refName)
{    setProperty(REFNAME, refName);}
0
public String getRefName()
{    return getPropertyAsString(REFNAME);}
0
public void setMatchNumber(int matchNumber)
{    setProperty(new IntegerProperty(MATCH_NUMBER, matchNumber));}
0
public void setMatchNumber(String matchNumber)
{    setProperty(MATCH_NUMBER, matchNumber);}
0
public int getMatchNumber()
{    return getPropertyAsInt(MATCH_NUMBER);}
0
public String getMatchNumberAsString()
{    return getPropertyAsString(MATCH_NUMBER);}
0
public void setLeftBoundary(String leftBoundary)
{    setProperty(L_BOUNDARY, leftBoundary);}
0
public String getLeftBoundary()
{    return getPropertyAsString(L_BOUNDARY);}
0
public void setRightBoundary(String rightBoundary)
{    setProperty(R_BOUNDARY, rightBoundary);}
0
public String getRightBoundary()
{    return getPropertyAsString(R_BOUNDARY);}
0
public void setDefaultValue(String defaultValue)
{    setProperty(DEFAULT, defaultValue);}
0
public void setDefaultEmptyValue(boolean defaultEmptyValue)
{    setProperty(DEFAULT_EMPTY_VALUE, defaultEmptyValue);}
0
public String getDefaultValue()
{    return getPropertyAsString(DEFAULT);}
0
public boolean isEmptyDefaultValue()
{    return getPropertyAsBoolean(DEFAULT_EMPTY_VALUE);}
0
public boolean useHeaders()
{    return USE_HDRS.equalsIgnoreCase(getPropertyAsString(MATCH_AGAINST));}
0
public boolean useRequestHeaders()
{    return USE_REQUEST_HDRS.equalsIgnoreCase(getPropertyAsString(MATCH_AGAINST));}
0
public boolean useBody()
{    String prop = getPropertyAsString(MATCH_AGAINST);    return prop.length() == 0 || USE_BODY.equalsIgnoreCase(prop);}
0
public boolean useUnescapedBody()
{    String prop = getPropertyAsString(MATCH_AGAINST);    return USE_BODY_UNESCAPED.equalsIgnoreCase(prop);}
0
public boolean useBodyAsDocument()
{    String prop = getPropertyAsString(MATCH_AGAINST);    return USE_BODY_AS_DOCUMENT.equalsIgnoreCase(prop);}
0
public boolean useUrl()
{    String prop = getPropertyAsString(MATCH_AGAINST);    return USE_URL.equalsIgnoreCase(prop);}
0
public boolean useCode()
{    String prop = getPropertyAsString(MATCH_AGAINST);    return USE_CODE.equalsIgnoreCase(prop);}
0
public boolean useMessage()
{    String prop = getPropertyAsString(MATCH_AGAINST);    return USE_MESSAGE.equalsIgnoreCase(prop);}
0
public void setUseField(String actionCommand)
{    setProperty(MATCH_AGAINST, actionCommand);}
0
public void process()
{    BSFManager mgr = null;    try {        mgr = getManager();        processFileOrScript(mgr);    } catch (BSFException e) {        if (log.isWarnEnabled()) {                    }    } finally {        if (mgr != null) {            mgr.terminate();        }    }}
1
public Object clone()
{    return super.clone();}
0
public void process()
{    StringBuilder sb = new StringBuilder(100);        StringBuilder rd = new StringBuilder(20);    SampleResult sr = new SampleResult();    sr.setSampleLabel(getName());    sr.sampleStart();    JMeterContext threadContext = getThreadContext();    if (isDisplaySamplerProperties()) {        rd.append("SamplerProperties\n");        sb.append("SamplerProperties:\n");        formatPropertyIterator(sb, threadContext.getCurrentSampler().propertyIterator());        sb.append("\n");    }    if (isDisplayJMeterVariables()) {        rd.append("JMeterVariables\n");        sb.append("JMeterVariables:\n");        formatSet(sb, threadContext.getVariables().entrySet());        sb.append("\n");    }    if (isDisplayJMeterProperties()) {        rd.append("JMeterProperties\n");        sb.append("JMeterProperties:\n");        formatSet(sb, JMeterUtils.getJMeterProperties().entrySet());        sb.append("\n");    }    if (isDisplaySystemProperties()) {        rd.append("SystemProperties\n");        sb.append("SystemProperties:\n");        formatSet(sb, System.getProperties().entrySet());        sb.append("\n");    }    sr.setResponseData(sb.toString(), null);    sr.setDataType(SampleResult.TEXT);    sr.setSamplerData(rd.toString());    sr.setResponseOK();    sr.sampleEnd();    threadContext.getPreviousResult().addSubResult(sr);}
0
private void formatPropertyIterator(StringBuilder sb, PropertyIterator iter)
{    Map<String, String> map = new HashMap<>();    while (iter.hasNext()) {        JMeterProperty item = iter.next();        map.put(item.getName(), item.getStringValue());    }    formatSet(sb, map.entrySet());}
0
private void formatSet(StringBuilder sb, @SuppressWarnings("rawtypes") Set s)
{    @SuppressWarnings("unchecked")    List<Map.Entry<Object, Object>> al = new ArrayList<>(s);    al.sort((Map.Entry<Object, Object> o1, Map.Entry<Object, Object> o2) -> {        String m1 = (String) o1.getKey();        String m2 = (String) o2.getKey();        return m1.compareTo(m2);    });    al.forEach(me -> sb.append(me.getKey()).append("=").append(me.getValue()).append("\n"));}
0
public boolean isDisplayJMeterVariables()
{    return displayJMeterVariables;}
0
public void setDisplayJMeterVariables(boolean displayJMeterVariables)
{    this.displayJMeterVariables = displayJMeterVariables;}
0
public boolean isDisplayJMeterProperties()
{    return displayJMeterProperties;}
0
public void setDisplayJMeterProperties(boolean displayJMeterProperties)
{    this.displayJMeterProperties = displayJMeterProperties;}
0
public boolean isDisplaySamplerProperties()
{    return displaySamplerProperties;}
0
public void setDisplaySamplerProperties(boolean displaySamplerProperties)
{    this.displaySamplerProperties = displaySamplerProperties;}
0
public boolean isDisplaySystemProperties()
{    return displaySystemProperties;}
0
public void setDisplaySystemProperties(boolean displaySystemProperties)
{    this.displaySystemProperties = displaySystemProperties;}
0
public String getLabelResource()
{        return "boundaryextractor_title";}
0
public void configure(TestElement el)
{    super.configure(el);    if (el instanceof BoundaryExtractor) {        BoundaryExtractor boundary = (BoundaryExtractor) el;        showScopeSettings(boundary, true);        useHeaders.setSelected(boundary.useHeaders());        useRequestHeaders.setSelected(boundary.useRequestHeaders());        useBody.setSelected(boundary.useBody());        useUnescapedBody.setSelected(boundary.useUnescapedBody());        useBodyAsDocument.setSelected(boundary.useBodyAsDocument());        useURL.setSelected(boundary.useUrl());        useCode.setSelected(boundary.useCode());        useMessage.setSelected(boundary.useMessage());        leftBoundaryField.setText(boundary.getLeftBoundary());        rightBoundaryField.setText(boundary.getRightBoundary());        defaultField.setText(boundary.getDefaultValue());        emptyDefaultValue.setSelected(boundary.isEmptyDefaultValue());        matchNumberField.setText(boundary.getMatchNumberAsString());        refNameField.setText(boundary.getRefName());    }}
0
public TestElement createTestElement()
{    AbstractScopedTestElement extractor = new BoundaryExtractor();    modifyTestElement(extractor);    return extractor;}
0
public void modifyTestElement(TestElement extractor)
{    super.configureTestElement(extractor);    if (extractor instanceof BoundaryExtractor) {        BoundaryExtractor boundary = (BoundaryExtractor) extractor;        saveScopeSettings(boundary);        boundary.setUseField(group.getSelection().getActionCommand());        boundary.setRefName(refNameField.getText());        boundary.setLeftBoundary(leftBoundaryField.getText());        boundary.setRightBoundary(rightBoundaryField.getText());        boundary.setDefaultValue(defaultField.getText());        boundary.setDefaultEmptyValue(emptyDefaultValue.isSelected());        boundary.setMatchNumber(matchNumberField.getText());    }}
0
public void clearGui()
{    super.clearGui();    useBody.setSelected(true);        leftBoundaryField.setText("");        rightBoundaryField.setText("");        defaultField.setText("");        refNameField.setText("");    emptyDefaultValue.setSelected(false);        matchNumberField.setText("");}
0
private void init()
{        setLayout(new BorderLayout());    setBorder(makeBorder());    Box box = Box.createVerticalBox();    box.add(makeTitlePanel());    box.add(createScopePanel(true));    box.add(makeSourcePanel());    add(box, BorderLayout.NORTH);    add(makeParameterPanel(), BorderLayout.CENTER);}
0
private JPanel makeSourcePanel()
{    JPanel panel = new JPanel();        panel.setBorder(BorderFactory.createTitledBorder(JMeterUtils.getResString("regex_source")));        useBody = new JRadioButton(JMeterUtils.getResString("regex_src_body"));        useUnescapedBody = new JRadioButton(JMeterUtils.getResString("regex_src_body_unescaped"));        useBodyAsDocument = new JRadioButton(JMeterUtils.getResString("regex_src_body_as_document"));        useHeaders = new JRadioButton(JMeterUtils.getResString("regex_src_hdrs"));        useRequestHeaders = new JRadioButton(JMeterUtils.getResString("regex_src_hdrs_req"));        useURL = new JRadioButton(JMeterUtils.getResString("regex_src_url"));        useCode = new JRadioButton(JMeterUtils.getResString("assertion_code_resp"));        useMessage = new JRadioButton(JMeterUtils.getResString("assertion_message_resp"));    group = new ButtonGroup();    group.add(useBody);    group.add(useUnescapedBody);    group.add(useBodyAsDocument);    group.add(useHeaders);    group.add(useRequestHeaders);    group.add(useURL);    group.add(useCode);    group.add(useMessage);    panel.add(useBody);    panel.add(useUnescapedBody);    panel.add(useBodyAsDocument);    panel.add(useHeaders);    panel.add(useRequestHeaders);    panel.add(useURL);    panel.add(useCode);    panel.add(useMessage);    useBody.setSelected(true);        useBody.setActionCommand(RegexExtractor.USE_BODY);    useUnescapedBody.setActionCommand(RegexExtractor.USE_BODY_UNESCAPED);    useBodyAsDocument.setActionCommand(RegexExtractor.USE_BODY_AS_DOCUMENT);    useHeaders.setActionCommand(RegexExtractor.USE_HDRS);    useRequestHeaders.setActionCommand(RegexExtractor.USE_REQUEST_HDRS);    useURL.setActionCommand(RegexExtractor.USE_URL);    useCode.setActionCommand(RegexExtractor.USE_CODE);    useMessage.setActionCommand(RegexExtractor.USE_MESSAGE);    return panel;}
0
private JPanel makeParameterPanel()
{        leftBoundaryField = new JLabeledTextField(JMeterUtils.getResString("boundaryextractor_leftboundary_field"));        rightBoundaryField = new JLabeledTextField(JMeterUtils.getResString("boundaryextractor_rightboundary_field"));        refNameField = new JLabeledTextField(JMeterUtils.getResString("ref_name_field"));        matchNumberField = new JLabeledTextField(JMeterUtils.getResString("match_num_field"));    JPanel panel = new JPanel(new GridBagLayout());    GridBagConstraints gbc = new GridBagConstraints();    initConstraints(gbc);    addField(panel, refNameField, gbc);    resetContraints(gbc);    addField(panel, leftBoundaryField, gbc);    resetContraints(gbc);    addField(panel, rightBoundaryField, gbc);    resetContraints(gbc);    addField(panel, matchNumberField, gbc);    resetContraints(gbc);    gbc.weighty = 1;        defaultField = new JLabeledTextField(JMeterUtils.getResString("default_value_field"));    List<JComponent> item = defaultField.getComponentList();    panel.add(item.get(0), gbc.clone());    JPanel p = new JPanel(new BorderLayout());    p.add(item.get(1), BorderLayout.WEST);    emptyDefaultValue = new JCheckBox(JMeterUtils.getResString("boundaryextractor_empty_default_value"));    emptyDefaultValue.addItemListener(evt -> {        if (emptyDefaultValue.isSelected()) {            defaultField.setText("");        }        defaultField.setEnabled(!emptyDefaultValue.isSelected());    });    p.add(emptyDefaultValue, BorderLayout.CENTER);    gbc.gridx++;    gbc.weightx = 1;    gbc.fill = GridBagConstraints.HORIZONTAL;    panel.add(p, gbc.clone());    return panel;}
0
private void addField(JPanel panel, JLabeledTextField field, GridBagConstraints gbc)
{    List<JComponent> item = field.getComponentList();    panel.add(item.get(0), gbc.clone());    gbc.gridx++;    gbc.weightx = 1;    gbc.fill = GridBagConstraints.HORIZONTAL;    panel.add(item.get(1), gbc.clone());}
0
private void resetContraints(GridBagConstraints gbc)
{    gbc.gridx = 0;    gbc.gridy++;    gbc.weightx = 0;    gbc.fill = GridBagConstraints.NONE;}
0
private void initConstraints(GridBagConstraints gbc)
{    gbc.anchor = GridBagConstraints.NORTHWEST;    gbc.fill = GridBagConstraints.NONE;    gbc.gridheight = 1;    gbc.gridwidth = 1;    gbc.gridx = 0;    gbc.gridy = 0;    gbc.weightx = 0;    gbc.weighty = 0;}
0
public String getLabelResource()
{        return "html_extractor_title";}
0
public void configure(TestElement el)
{    super.configure(el);    if (el instanceof HtmlExtractor) {        HtmlExtractor htmlExtractor = (HtmlExtractor) el;        showScopeSettings(htmlExtractor, true);        expressionField.setText(htmlExtractor.getExpression());        attributeField.setText(htmlExtractor.getAttribute());        defaultField.setText(htmlExtractor.getDefaultValue());        emptyDefaultValue.setSelected(htmlExtractor.isEmptyDefaultValue());        matchNumberField.setText(htmlExtractor.getMatchNumberAsString());        refNameField.setText(htmlExtractor.getRefName());        extractorImplName.setSelectedItem(htmlExtractor.getExtractor());    }}
0
public TestElement createTestElement()
{    AbstractScopedTestElement extractor = new HtmlExtractor();    modifyTestElement(extractor);    return extractor;}
0
public void modifyTestElement(TestElement extractor)
{    super.configureTestElement(extractor);    if (extractor instanceof HtmlExtractor) {        HtmlExtractor htmlExtractor = (HtmlExtractor) extractor;        saveScopeSettings(htmlExtractor);        htmlExtractor.setRefName(refNameField.getText());        htmlExtractor.setExpression(expressionField.getText());        htmlExtractor.setAttribute(attributeField.getText());        htmlExtractor.setDefaultValue(defaultField.getText());        htmlExtractor.setDefaultEmptyValue(emptyDefaultValue.isSelected());        htmlExtractor.setMatchNumber(matchNumberField.getText());        if (extractorImplName.getSelectedIndex() < HtmlExtractor.getImplementations().length) {            htmlExtractor.setExtractor(HtmlExtractor.getImplementations()[extractorImplName.getSelectedIndex()]);        } else {            htmlExtractor.setExtractor(USE_DEFAULT_EXTRACTOR_IMPL);        }    }}
0
public void clearGui()
{    super.clearGui();    extractorImplName.setSelectedItem(HtmlExtractor.DEFAULT_EXTRACTOR);        expressionField.setText("");        attributeField.setText("");        defaultField.setText("");        refNameField.setText("");    emptyDefaultValue.setSelected(false);        matchNumberField.setText("");}
0
private void init()
{        setLayout(new BorderLayout());    setBorder(makeBorder());    Box box = Box.createVerticalBox();    box.add(makeTitlePanel());    box.add(createScopePanel(true));    box.add(makeExtractorPanel());    add(box, BorderLayout.NORTH);    add(makeParameterPanel(), BorderLayout.CENTER);}
0
private Component makeExtractorPanel()
{    JPanel panel = new HorizontalPanel();        panel.setBorder(BorderFactory.createTitledBorder(JMeterUtils.getResString("html_extractor_type")));    DefaultComboBoxModel<String> m = new DefaultComboBoxModel<>();    for (String s : HtmlExtractor.getImplementations()) {        m.addElement(s);    }    m.addElement(USE_DEFAULT_EXTRACTOR_IMPL);    extractorImplName = new JComboBox<>(m);    extractorImplName.setSelectedItem(HtmlExtractor.DEFAULT_EXTRACTOR);        JLabel label2 = new JLabel(JMeterUtils.getResString("html_extractor_type"));    label2.setLabelFor(extractorImplName);    panel.add(label2);    panel.add(extractorImplName);    return panel;}
0
private JPanel makeParameterPanel()
{        expressionField = new JLabeledTextField(JMeterUtils.getResString("expression_field"));        attributeField = new JLabeledTextField(JMeterUtils.getResString("attribute_field"));        refNameField = new JLabeledTextField(JMeterUtils.getResString("ref_name_field"));        matchNumberField = new JLabeledTextField(JMeterUtils.getResString("match_num_field"));    JPanel panel = new JPanel(new GridBagLayout());    GridBagConstraints gbc = new GridBagConstraints();    initConstraints(gbc);    addField(panel, refNameField, gbc);    resetContraints(gbc);    addField(panel, expressionField, gbc);    resetContraints(gbc);    addField(panel, attributeField, gbc);    resetContraints(gbc);    addField(panel, matchNumberField, gbc);    resetContraints(gbc);    gbc.weighty = 1;        defaultField = new JLabeledTextField(JMeterUtils.getResString("default_value_field"));    List<JComponent> item = defaultField.getComponentList();    panel.add(item.get(0), gbc.clone());    JPanel p = new JPanel(new BorderLayout());    p.add(item.get(1), BorderLayout.WEST);    emptyDefaultValue = new JCheckBox(JMeterUtils.getResString("cssjquery_empty_default_value"));    emptyDefaultValue.addItemListener(evt -> {        if (emptyDefaultValue.isSelected()) {            defaultField.setText("");        }        defaultField.setEnabled(!emptyDefaultValue.isSelected());    });    p.add(emptyDefaultValue, BorderLayout.CENTER);    gbc.gridx++;    gbc.weightx = 1;    gbc.fill = GridBagConstraints.HORIZONTAL;    panel.add(p, gbc.clone());    return panel;}
0
private void addField(JPanel panel, JLabeledTextField field, GridBagConstraints gbc)
{    List<JComponent> item = field.getComponentList();    panel.add(item.get(0), gbc.clone());    gbc.gridx++;    gbc.weightx = 1;    gbc.fill = GridBagConstraints.HORIZONTAL;    panel.add(item.get(1), gbc.clone());}
0
private void resetContraints(GridBagConstraints gbc)
{    gbc.gridx = 0;    gbc.gridy++;    gbc.weightx = 0;    gbc.fill = GridBagConstraints.NONE;}
0
private void initConstraints(GridBagConstraints gbc)
{    gbc.anchor = GridBagConstraints.NORTHWEST;    gbc.fill = GridBagConstraints.NONE;    gbc.gridheight = 1;    gbc.gridwidth = 1;    gbc.gridx = 0;    gbc.gridy = 0;    gbc.weightx = 0;    gbc.weighty = 0;}
0
public String getLabelResource()
{        return "regex_extractor_title";}
0
public void configure(TestElement el)
{    super.configure(el);    if (el instanceof RegexExtractor) {        RegexExtractor re = (RegexExtractor) el;        showScopeSettings(re, true);        useHeaders.setSelected(re.useHeaders());        useRequestHeaders.setSelected(re.useRequestHeaders());        useBody.setSelected(re.useBody());        useUnescapedBody.setSelected(re.useUnescapedBody());        useBodyAsDocument.setSelected(re.useBodyAsDocument());        useURL.setSelected(re.useUrl());        useCode.setSelected(re.useCode());        useMessage.setSelected(re.useMessage());        regexField.setText(re.getRegex());        templateField.setText(re.getTemplate());        defaultField.setText(re.getDefaultValue());        emptyDefaultValue.setSelected(re.isEmptyDefaultValue());        matchNumberField.setText(re.getMatchNumberAsString());        refNameField.setText(re.getRefName());    }}
0
public TestElement createTestElement()
{    AbstractScopedTestElement extractor = new RegexExtractor();    modifyTestElement(extractor);    return extractor;}
0
public void modifyTestElement(TestElement extractor)
{    super.configureTestElement(extractor);    if (extractor instanceof RegexExtractor) {        RegexExtractor regex = (RegexExtractor) extractor;        saveScopeSettings(regex);        regex.setUseField(group.getSelection().getActionCommand());        regex.setRefName(refNameField.getText());        regex.setRegex(regexField.getText());        regex.setTemplate(templateField.getText());        regex.setDefaultValue(defaultField.getText());        regex.setDefaultEmptyValue(emptyDefaultValue.isSelected());        regex.setMatchNumber(matchNumberField.getText());    }}
0
public void clearGui()
{    super.clearGui();    useBody.setSelected(true);        regexField.setText("");        templateField.setText("");        defaultField.setText("");    emptyDefaultValue.setSelected(false);        refNameField.setText("");        matchNumberField.setText("");}
0
private void init()
{        setLayout(new BorderLayout());    setBorder(makeBorder());    Box box = Box.createVerticalBox();    box.add(makeTitlePanel());    box.add(createScopePanel(true));    box.add(makeSourcePanel());    add(box, BorderLayout.NORTH);    add(makeParameterPanel(), BorderLayout.CENTER);}
0
private JPanel makeSourcePanel()
{    JPanel panel = new JPanel();        panel.setBorder(BorderFactory.createTitledBorder(JMeterUtils.getResString("regex_source")));        useBody = new JRadioButton(JMeterUtils.getResString("regex_src_body"));        useUnescapedBody = new JRadioButton(JMeterUtils.getResString("regex_src_body_unescaped"));        useBodyAsDocument = new JRadioButton(JMeterUtils.getResString("regex_src_body_as_document"));        useHeaders = new JRadioButton(JMeterUtils.getResString("regex_src_hdrs"));        useRequestHeaders = new JRadioButton(JMeterUtils.getResString("regex_src_hdrs_req"));        useURL = new JRadioButton(JMeterUtils.getResString("regex_src_url"));        useCode = new JRadioButton(JMeterUtils.getResString("assertion_code_resp"));        useMessage = new JRadioButton(JMeterUtils.getResString("assertion_message_resp"));    group = new ButtonGroup();    group.add(useBody);    group.add(useUnescapedBody);    group.add(useBodyAsDocument);    group.add(useHeaders);    group.add(useRequestHeaders);    group.add(useURL);    group.add(useCode);    group.add(useMessage);    panel.add(useBody);    panel.add(useUnescapedBody);    panel.add(useBodyAsDocument);    panel.add(useHeaders);    panel.add(useRequestHeaders);    panel.add(useURL);    panel.add(useCode);    panel.add(useMessage);    useBody.setSelected(true);        useBody.setActionCommand(RegexExtractor.USE_BODY);    useUnescapedBody.setActionCommand(RegexExtractor.USE_BODY_UNESCAPED);    useBodyAsDocument.setActionCommand(RegexExtractor.USE_BODY_AS_DOCUMENT);    useHeaders.setActionCommand(RegexExtractor.USE_HDRS);    useRequestHeaders.setActionCommand(RegexExtractor.USE_REQUEST_HDRS);    useURL.setActionCommand(RegexExtractor.USE_URL);    useCode.setActionCommand(RegexExtractor.USE_CODE);    useMessage.setActionCommand(RegexExtractor.USE_MESSAGE);    return panel;}
0
private JPanel makeParameterPanel()
{        regexField = new JLabeledTextField(JMeterUtils.getResString("regex_field"));        templateField = new JLabeledTextField(JMeterUtils.getResString("template_field"));        refNameField = new JLabeledTextField(JMeterUtils.getResString("ref_name_field"));        matchNumberField = new JLabeledTextField(JMeterUtils.getResString("match_num_field"));    JPanel panel = new JPanel(new GridBagLayout());    GridBagConstraints gbc = new GridBagConstraints();    initConstraints(gbc);    addField(panel, refNameField, gbc);    resetContraints(gbc);    addField(panel, regexField, gbc);    resetContraints(gbc);    addField(panel, templateField, gbc);    resetContraints(gbc);    addField(panel, matchNumberField, gbc);    resetContraints(gbc);    gbc.weighty = 1;        defaultField = new JLabeledTextField(JMeterUtils.getResString("default_value_field"));    List<JComponent> item = defaultField.getComponentList();    panel.add(item.get(0), gbc.clone());    JPanel p = new JPanel(new BorderLayout());    p.add(item.get(1), BorderLayout.WEST);        emptyDefaultValue = new JCheckBox(JMeterUtils.getResString("assertion_regex_empty_default_value"));    emptyDefaultValue.addItemListener(evt -> {        if (emptyDefaultValue.isSelected()) {                        defaultField.setText("");        }        defaultField.setEnabled(!emptyDefaultValue.isSelected());    });    p.add(emptyDefaultValue, BorderLayout.CENTER);    gbc.gridx++;    gbc.weightx = 1;    gbc.fill = GridBagConstraints.HORIZONTAL;    panel.add(p, gbc.clone());    return panel;}
0
private void addField(JPanel panel, JLabeledTextField field, GridBagConstraints gbc)
{    List<JComponent> item = field.getComponentList();    panel.add(item.get(0), gbc.clone());    gbc.gridx++;    gbc.weightx = 1;    gbc.fill = GridBagConstraints.HORIZONTAL;    panel.add(item.get(1), gbc.clone());}
0
private void resetContraints(GridBagConstraints gbc)
{    gbc.gridx = 0;    gbc.gridy++;    gbc.weightx = 0;    gbc.fill = GridBagConstraints.NONE;}
0
private void initConstraints(GridBagConstraints gbc)
{    gbc.anchor = GridBagConstraints.NORTHWEST;    gbc.fill = GridBagConstraints.NONE;    gbc.gridheight = 1;    gbc.gridwidth = 1;    gbc.gridx = 0;    gbc.gridy = 0;    gbc.weightx = 0;    gbc.weighty = 0;}
0
public String getLabelResource()
{        return "xpath2_extractor_title";}
0
public void configure(TestElement el)
{    super.configure(el);    XPath2Extractor xpe = (XPath2Extractor) el;    showScopeSettings(xpe, true);    xpathQueryField.setText(xpe.getXPathQuery());    defaultField.setText(xpe.getDefaultValue());    refNameField.setText(xpe.getRefName());    matchNumberField.setText(xpe.getMatchNumberAsString());    namespacesTA.setText(xpe.getNamespaces());    getFragment.setSelected(xpe.getFragment());}
0
public TestElement createTestElement()
{    XPath2Extractor extractor = new XPath2Extractor();    modifyTestElement(extractor);    return extractor;}
0
public void modifyTestElement(TestElement extractor)
{    super.configureTestElement(extractor);    if (extractor instanceof XPath2Extractor) {        XPath2Extractor xpath = (XPath2Extractor) extractor;        saveScopeSettings(xpath);        xpath.setDefaultValue(defaultField.getText());        xpath.setRefName(refNameField.getText());        xpath.setMatchNumber(matchNumberField.getText());        xpath.setXPathQuery(xpathQueryField.getText());        xpath.setFragment(getFragment.isSelected());        xpath.setNamespaces(namespacesTA.getText());    }}
0
public void clearGui()
{    super.clearGui();        xpathQueryField.setText("");        defaultField.setText("");        refNameField.setText("");        matchNumberField.setText(XPath2Extractor.DEFAULT_VALUE_AS_STRING);    namespacesTA.setText("");}
0
private void init()
{        setLayout(new BorderLayout());    setBorder(makeBorder());    Box box = Box.createVerticalBox();    box.add(makeTitlePanel());    box.add(createScopePanel(true, true, true));    box.add(makeParameterPanel());    add(box, BorderLayout.NORTH);}
0
private JPanel makeParameterPanel()
{    JPanel panel = new JPanel(new GridBagLayout());    GridBagConstraints gbc = new GridBagConstraints();    initConstraints(gbc);    addField(panel, refNameField, gbc);    resetContraints(gbc);    addField(panel, xpathQueryField, gbc);    resetContraints(gbc);    addField(panel, matchNumberField, gbc);    resetContraints(gbc);    addField(panel, defaultField, gbc);    resetContraints(gbc);    panel.add(new JLabel(JMeterUtils.getResString("xpath_extractor_user_namespaces")), gbc.clone());    gbc.gridx++;    gbc.weightx = 1;    gbc.fill = GridBagConstraints.HORIZONTAL;    namespacesTA = JSyntaxTextArea.getInstance(5, 80);    panel.add(JTextScrollPane.getInstance(namespacesTA, true), gbc.clone());    resetContraints(gbc);    gbc.gridwidth = 2;        getFragment = new JCheckBox(JMeterUtils.getResString("xpath_extractor_fragment"));    panel.add(getFragment, gbc.clone());    return panel;}
0
private void addField(JPanel panel, JLabeledTextField field, GridBagConstraints gbc)
{    List<JComponent> item = field.getComponentList();    panel.add(item.get(0), gbc.clone());    gbc.gridx++;    gbc.weightx = 1;    gbc.fill = GridBagConstraints.HORIZONTAL;    panel.add(item.get(1), gbc.clone());}
0
private void resetContraints(GridBagConstraints gbc)
{    gbc.gridx = 0;    gbc.gridy++;    gbc.weightx = 0;    gbc.gridwidth = 1;    gbc.fill = GridBagConstraints.NONE;}
0
private void initConstraints(GridBagConstraints gbc)
{    gbc.anchor = GridBagConstraints.NORTHWEST;    gbc.fill = GridBagConstraints.NONE;    gbc.gridheight = 1;    gbc.gridwidth = 1;    gbc.gridx = 0;    gbc.gridy = 0;    gbc.weightx = 0;    gbc.weighty = 0;}
0
public String getLabelResource()
{        return "xpath_extractor_title";}
0
public void configure(TestElement el)
{    super.configure(el);    XPathExtractor xpe = (XPathExtractor) el;    showScopeSettings(xpe, true);    xpathQueryField.setText(xpe.getXPathQuery());    defaultField.setText(xpe.getDefaultValue());    refNameField.setText(xpe.getRefName());    matchNumberField.setText(xpe.getMatchNumberAsString());    getFragment.setSelected(xpe.getFragment());    xml.configure(xpe);}
0
public TestElement createTestElement()
{    XPathExtractor extractor = new XPathExtractor();    modifyTestElement(extractor);    return extractor;}
0
public void modifyTestElement(TestElement extractor)
{    super.configureTestElement(extractor);    if (extractor instanceof XPathExtractor) {        XPathExtractor xpath = (XPathExtractor) extractor;        saveScopeSettings(xpath);        xpath.setDefaultValue(defaultField.getText());        xpath.setRefName(refNameField.getText());        xpath.setMatchNumber(matchNumberField.getText());        xpath.setXPathQuery(xpathQueryField.getText());        xpath.setFragment(getFragment.isSelected());        xml.modifyTestElement(xpath);    }}
0
public void clearGui()
{    super.clearGui();        xpathQueryField.setText("");        defaultField.setText("");        refNameField.setText("");        matchNumberField.setText(XPathExtractor.DEFAULT_VALUE_AS_STRING);    xml.setDefaultValues();}
0
private void init()
{        setLayout(new BorderLayout());    setBorder(makeBorder());    Box box = Box.createVerticalBox();    box.add(makeTitlePanel());    box.add(createScopePanel(true, true, true));    xml.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), JMeterUtils.getResString(    "xpath_assertion_option")));    box.add(xml);    box.add(getFragment);    box.add(makeParameterPanel());    add(box, BorderLayout.NORTH);}
0
private JPanel makeParameterPanel()
{    JPanel panel = new JPanel(new GridBagLayout());    GridBagConstraints gbc = new GridBagConstraints();    initConstraints(gbc);    addField(panel, refNameField, gbc);    resetContraints(gbc);    addField(panel, xpathQueryField, gbc);    resetContraints(gbc);    addField(panel, matchNumberField, gbc);    resetContraints(gbc);    gbc.weighty = 1;    addField(panel, defaultField, gbc);    return panel;}
0
private void addField(JPanel panel, JLabeledTextField field, GridBagConstraints gbc)
{    List<JComponent> item = field.getComponentList();    panel.add(item.get(0), gbc.clone());    gbc.gridx++;    gbc.weightx = 1;    gbc.fill = GridBagConstraints.HORIZONTAL;    panel.add(item.get(1), gbc.clone());}
0
private void resetContraints(GridBagConstraints gbc)
{    gbc.gridx = 0;    gbc.gridy++;    gbc.weightx = 0;    gbc.fill = GridBagConstraints.NONE;}
0
private void initConstraints(GridBagConstraints gbc)
{    gbc.anchor = GridBagConstraints.NORTHWEST;    gbc.fill = GridBagConstraints.NONE;    gbc.gridheight = 1;    gbc.gridwidth = 1;    gbc.gridx = 0;    gbc.gridy = 0;    gbc.weightx = 0;    gbc.weighty = 0;}
0
public static String[] getImplementations()
{    return new String[] { EXTRACTOR_JSOUP, EXTRACTOR_JODD };}
0
public void process()
{    JMeterContext context = getThreadContext();    SampleResult previousResult = context.getPreviousResult();    if (previousResult == null) {        return;    }    if (log.isDebugEnabled()) {            }        JMeterVariables vars = context.getVariables();    String refName = getRefName();    String expression = getExpression();    String attribute = getAttribute();    int matchNumber = getMatchNumber();    final String defaultValue = getDefaultValue();    if (defaultValue.length() > 0 || isEmptyDefaultValue()) {                vars.put(refName, defaultValue);    }    try {        List<String> matches = extractMatchingStrings(vars, expression, attribute, matchNumber, previousResult);        int prevCount = 0;        String prevString = vars.get(refName + REF_MATCH_NR);        if (prevString != null) {                        vars.remove(refName + REF_MATCH_NR);            try {                prevCount = Integer.parseInt(prevString);            } catch (NumberFormatException nfe) {                if (log.isWarnEnabled()) {                                    }            }        }                int matchCount = 0;        String match;        if (matchNumber >= 0) {                        match = getCorrectMatch(matches, matchNumber);            if (match != null) {                vars.put(refName, match);            }        } else         {            matchCount = matches.size();                        vars.put(refName + REF_MATCH_NR, Integer.toString(matchCount));            for (int i = 1; i <= matchCount; i++) {                match = getCorrectMatch(matches, i);                if (match != null) {                    final String refNameN = refName + UNDERSCORE + i;                    vars.put(refNameN, match);                }            }        }                for (int i = matchCount + 1; i <= prevCount; i++) {            final String refNameN = refName + UNDERSCORE + i;            vars.remove(refNameN);        }    } catch (RuntimeException e) {        if (log.isWarnEnabled()) {                    }    }}
1
private String getCorrectMatch(List<String> matches, int entry)
{    int matchSize = matches.size();    if (matchSize <= 0 || entry > matchSize) {        return null;    }    if (entry == 0) {                return matches.get(JMeterUtils.getRandomInt(matchSize));    }    return matches.get(entry - 1);}
0
private List<String> extractMatchingStrings(JMeterVariables vars, String expression, String attribute, int matchNumber, SampleResult previousResult)
{    int found = 0;    List<String> result = new ArrayList<>();    if (isScopeVariable()) {        String inputString = vars.get(getVariableName());        if (!StringUtils.isEmpty(inputString)) {            getExtractorImpl().extract(expression, attribute, matchNumber, inputString, result, found, "-1");        } else {            if (inputString == null && log.isWarnEnabled()) {                            }            return Collections.emptyList();        }    } else {        List<SampleResult> sampleList = getSampleList(previousResult);        int i = 0;        for (SampleResult sr : sampleList) {            String inputString = sr.getResponseDataAsString();            found = getExtractorImpl().extract(expression, attribute, matchNumber, inputString, result, found, i > 0 ? null : Integer.toString(i));            i++;            if (matchNumber > 0 && found == matchNumber) {                                break;            }        }    }    return result;}
1
public static Extractor getExtractorImpl(String impl)
{    boolean useDefaultExtractor = DEFAULT_EXTRACTOR.equals(impl);    if (useDefaultExtractor || EXTRACTOR_JSOUP.equals(impl)) {        return new JSoupExtractor();    } else if (EXTRACTOR_JODD.equals(impl)) {        return new JoddExtractor();    } else {        throw new IllegalArgumentException("Extractor implementation:" + impl + " is unknown");    }}
0
private Extractor getExtractorImpl()
{    if (extractor == null) {        extractor = getExtractorImpl(getExtractor());    }    return extractor;}
0
public void setExtractor(String attribute)
{    setProperty(EXTRACTOR_IMPL, attribute);}
0
public String getExtractor()
{    return getPropertyAsString(EXTRACTOR_IMPL);}
0
public void setAttribute(String attribute)
{    setProperty(ATTRIBUTE, attribute);}
0
public String getAttribute()
{        return getPropertyAsString(ATTRIBUTE, "");}
0
public void setExpression(String regex)
{    setProperty(EXPRESSION, regex);}
0
public String getExpression()
{    return getPropertyAsString(EXPRESSION);}
0
public void setRefName(String refName)
{    setProperty(REFNAME, refName);}
0
public String getRefName()
{    return getPropertyAsString(REFNAME);}
0
public void setMatchNumber(int matchNumber)
{    setProperty(new IntegerProperty(MATCH_NUMBER, matchNumber));}
0
public void setMatchNumber(String matchNumber)
{    setProperty(MATCH_NUMBER, matchNumber);}
0
public int getMatchNumber()
{    return getPropertyAsInt(MATCH_NUMBER);}
0
public String getMatchNumberAsString()
{    return getPropertyAsString(MATCH_NUMBER);}
0
public void setDefaultValue(String defaultValue)
{    setProperty(DEFAULT, defaultValue);}
0
public void setDefaultEmptyValue(boolean defaultEmptyValue)
{    setProperty(DEFAULT_EMPTY_VALUE, defaultEmptyValue);}
0
public String getDefaultValue()
{    return getPropertyAsString(DEFAULT);}
0
public boolean isEmptyDefaultValue()
{    return getPropertyAsBoolean(DEFAULT_EMPTY_VALUE);}
0
public int extract(String expression, String attribute, int matchNumber, String inputString, List<String> result, int found, String cacheKey)
{    NodeSelector nodeSelector;    if (cacheKey != null) {        nodeSelector = (NodeSelector) JMeterContextService.getContext().getSamplerContext().get(CACHE_KEY_PREFIX + cacheKey);        if (nodeSelector == null) {            LagartoDOMBuilder domBuilder = new LagartoDOMBuilder();            jodd.lagarto.dom.Document doc = domBuilder.parse(inputString);            nodeSelector = new NodeSelector(doc);            JMeterContextService.getContext().getSamplerContext().put(CACHE_KEY_PREFIX + cacheKey, nodeSelector);        }    } else {        LagartoDOMBuilder domBuilder = new LagartoDOMBuilder();        jodd.lagarto.dom.Document doc = domBuilder.parse(inputString);        nodeSelector = new NodeSelector(doc);    }    List<List<CssSelector>> cssSelectors = CSS_SELECTOR_CACHE.get(expression);    List<Node> elements = nodeSelector.select(cssSelectors);    for (Node element : elements) {        if (matchNumber <= 0 || found != matchNumber) {            result.add(extractValue(attribute, element));            found++;        } else {            break;        }    }    return found;}
0
private String extractValue(String attribute, Node element)
{    if (!JOrphanUtils.isBlank(attribute)) {        return element.getAttribute(attribute);    } else {        return element.getTextContent().trim();    }}
0
public String getLabelResource()
{        return "jmes_extractor_title";}
0
public void configure(TestElement element)
{    super.configure(element);    JMESPathExtractor config = (JMESPathExtractor) element;    showScopeSettings(config, true);    refNameField.setText(config.getRefName());    jmesPathExpressionField.setText(config.getJmesPathExpression());    matchNumberField.setText(config.getMatchNumber());    defaultValueField.setText(config.getDefaultValue());}
0
public TestElement createTestElement()
{    JMESPathExtractor config = new JMESPathExtractor();    modifyTestElement(config);    return config;}
0
public void modifyTestElement(TestElement c)
{    super.configureTestElement(c);    if (c instanceof JMESPathExtractor) {        JMESPathExtractor config = (JMESPathExtractor) c;        saveScopeSettings(config);        config.setRefName(refNameField.getText());        config.setJmesPathExpression(jmesPathExpressionField.getText());        config.setDefaultValue(defaultValueField.getText());        config.setMatchNumber(matchNumberField.getText());    }}
0
public void clearGui()
{    super.clearGui();        refNameField.setText("");        jmesPathExpressionField.setText("");        matchNumberField.setText("");        defaultValueField.setText("");}
0
private void init()
{            setLayout(new BorderLayout());    setBorder(makeBorder());    Box box = Box.createVerticalBox();    box.add(makeTitlePanel());    box.add(createScopePanel(true));    add(box, BorderLayout.NORTH);    add(makeParameterPanel(), BorderLayout.CENTER);}
0
private JPanel makeParameterPanel()
{        refNameField = new JLabeledTextField(JMeterUtils.getResString("jsonpp_variable_names"));        jmesPathExpressionField = new JLabeledTextField(JMeterUtils.getResString("jmes_path_expressions"));        matchNumberField = new JLabeledTextField(JMeterUtils.getResString("jsonpp_match_numbers"));        defaultValueField = new JLabeledTextField(JMeterUtils.getResString("jsonpp_default_values"));    JPanel panel = new JPanel(new GridBagLayout());    GridBagConstraints gbc = new GridBagConstraints();    initConstraints(gbc);    addField(panel, refNameField, gbc);    nextLine(gbc);    addField(panel, jmesPathExpressionField, gbc);    nextLine(gbc);    addField(panel, matchNumberField, gbc);    nextLine(gbc);    nextLine(gbc);    gbc.weighty = 1;    addField(panel, defaultValueField, gbc);    return panel;}
0
private void addField(JPanel panel, JLabeledTextField field, GridBagConstraints gbc)
{    List<JComponent> item = field.getComponentList();    panel.add(item.get(0), gbc.clone());    gbc.gridx++;    gbc.weightx = 1;    gbc.fill = GridBagConstraints.HORIZONTAL;    panel.add(item.get(1), gbc.clone());}
0
private void nextLine(GridBagConstraints gbc)
{    gbc.gridx = 0;    gbc.gridy++;    gbc.weightx = 0;    gbc.fill = GridBagConstraints.NONE;}
0
private void initConstraints(GridBagConstraints gbc)
{    gbc.anchor = GridBagConstraints.NORTHWEST;    gbc.fill = GridBagConstraints.NONE;    gbc.gridheight = 1;    gbc.gridwidth = 1;    gbc.gridx = 0;    gbc.gridy = 0;    gbc.weightx = 0;    gbc.weighty = 0;}
0
public Expression<JsonNode> load(String jmesPathExpression) throws Exception
{    return runtime.compile(jmesPathExpression);}
0
public static JMESPathCache getInstance()
{    return JMESPathCacheHolder.INSTANCE;}
0
public Expression<JsonNode> get(String key)
{    return JMES_PATH_CACHE.get(key);}
0
public void cleanUp()
{    JMES_PATH_CACHE.cleanUp();}
0
public Expression<JsonNode> load(String jmesPathExpression) throws Exception
{    return runtime.compile(jmesPathExpression);}
0
public void process()
{    JMeterContext context = getThreadContext();    JMeterVariables vars = context.getVariables();    String jsonResponse = getData(vars, context);    String refName = getRefName();    String defaultValue = getDefaultValue();    int matchNumber = Integer.parseInt(getMatchNumber());    final String jsonPathExpression = getJmesPathExpression().trim();    clearOldRefVars(vars, refName);    if (StringUtils.isEmpty(jsonResponse)) {        if (log.isDebugEnabled()) {                    }        vars.put(refName, defaultValue);    } else {        try {            JsonNode result = null;            JsonNode actualObj = OBJECT_MAPPER.readValue(jsonResponse, JsonNode.class);            result = JMESPathCache.getInstance().get(jsonPathExpression).search(actualObj);            if (result.isNull()) {                vars.put(refName, defaultValue);                                vars.put(refName + REF_MATCH_NR, "0");                if (matchNumber < 0) {                                    }            } else {                List<String> resultList = splitJson(result);                                if (resultList.size() > 1) {                    if (matchNumber < 0) {                                                int index = 1;                        for (String extractedString : resultList) {                                                        vars.put(refName + "_" + index, extractedString);                            index++;                        }                    } else if (matchNumber == 0) {                                                int matchSize = resultList.size();                        int matchNr = JMeterUtils.getRandomInt(matchSize);                        placeObjectIntoVars(vars, refName, resultList, matchNr);                    } else {                                                if (matchNumber > resultList.size()) {                            if (log.isDebugEnabled()) {                                                            }                            vars.put(refName, defaultValue);                        } else {                            placeObjectIntoVars(vars, refName, resultList, matchNumber - 1);                        }                    }                } else {                                        String suffix = (matchNumber < 0) ? "_1" : "";                    placeObjectIntoVars(vars, refName + suffix, resultList, 0);                }                vars.put(refName + REF_MATCH_NR, Integer.toString(resultList.size()));            }        } catch (Exception e) {                        if (log.isDebugEnabled()) {                            } else {                            }            vars.put(refName, defaultValue);        }    }}
1
private String getData(JMeterVariables vars, JMeterContext context)
{    String jsonResponse = null;    if (isScopeVariable()) {        jsonResponse = vars.get(getVariableName());        if (log.isDebugEnabled()) {                    }    } else {        SampleResult previousResult = context.getPreviousResult();        if (previousResult != null) {            jsonResponse = previousResult.getResponseDataAsString();        }        if (log.isDebugEnabled()) {                    }    }    return jsonResponse;}
1
public List<String> splitJson(JsonNode jsonNode) throws IOException
{    List<String> splittedJsonElements = new ArrayList<>();    if (jsonNode.isArray()) {        for (JsonNode element : (ArrayNode) jsonNode) {            splittedJsonElements.add(writeJsonNode(OBJECT_MAPPER, element));        }    } else {        splittedJsonElements.add(writeJsonNode(OBJECT_MAPPER, jsonNode));    }    return splittedJsonElements;}
0
private static String writeJsonNode(ObjectMapper mapper, JsonNode element) throws JsonProcessingException
{    if (element.isTextual()) {        return element.asText();    } else {        return mapper.writeValueAsString(element);    }}
0
 void clearOldRefVars(JMeterVariables vars, String refName)
{    vars.remove(refName + REF_MATCH_NR);    for (int i = 1; vars.get(refName + "_" + i) != null; i++) {        vars.remove(refName + "_" + i);    }}
0
private void placeObjectIntoVars(JMeterVariables vars, String refName, List<String> extractedValues, int matchNr)
{    vars.put(refName, extractedValues.get(matchNr));}
0
public String getJmesPathExpression()
{    return getPropertyAsString(JMES_PATH_EXPRESSION);}
0
public void setJmesPathExpression(String jsonPath)
{    setProperty(JMES_PATH_EXPRESSION, jsonPath);}
0
public String getRefName()
{    return getPropertyAsString(REFERENCE_NAME);}
0
public void setRefName(String refName)
{    setProperty(REFERENCE_NAME, refName);}
0
public String getDefaultValue()
{    return getPropertyAsString(DEFAULT_VALUE);}
0
public void setDefaultValue(String defaultValue)
{        setProperty(DEFAULT_VALUE, defaultValue, "");}
0
public void setMatchNumber(String matchNumber)
{    setProperty(MATCH_NUMBER, matchNumber);}
0
public String getMatchNumber()
{    return getPropertyAsString(MATCH_NUMBER);}
0
public void testStarted()
{    testStarted("");}
0
public void testStarted(String host)
{}
0
public void testEnded()
{    testEnded("");}
0
public void testEnded(String host)
{    JMESPathCache.getInstance().cleanUp();}
0
public String getLabelResource()
{        return "json_post_processor_title";}
0
public void configure(TestElement element)
{    super.configure(element);    JSONPostProcessor config = (JSONPostProcessor) element;    showScopeSettings(config, true);    refNamesField.setText(config.getRefNames());    jsonPathExpressionsField.setText(config.getJsonPathExpressions());    matchNumbersField.setText(config.getMatchNumbers());    defaultValuesField.setText(config.getDefaultValues());    computeConcatenationField.setSelected(config.getComputeConcatenation());}
0
public TestElement createTestElement()
{    JSONPostProcessor config = new JSONPostProcessor();    modifyTestElement(config);    return config;}
0
public void modifyTestElement(TestElement c)
{    super.configureTestElement(c);    if (c instanceof JSONPostProcessor) {        JSONPostProcessor config = (JSONPostProcessor) c;        saveScopeSettings(config);        config.setRefNames(refNamesField.getText());        config.setJsonPathExpressions(jsonPathExpressionsField.getText());        config.setDefaultValues(defaultValuesField.getText());        config.setMatchNumbers(matchNumbersField.getText());        config.setComputeConcatenation(computeConcatenationField.isSelected());    }}
0
public void clearGui()
{    super.clearGui();        refNamesField.setText("");        jsonPathExpressionsField.setText("");        matchNumbersField.setText("");        defaultValuesField.setText("");    computeConcatenationField.setSelected(JSONPostProcessor.COMPUTE_CONCATENATION_DEFAULT_VALUE);}
0
private void init()
{        setLayout(new BorderLayout());    setBorder(makeBorder());    Box box = Box.createVerticalBox();    box.add(makeTitlePanel());    box.add(createScopePanel(true));    add(box, BorderLayout.NORTH);    add(makeParameterPanel(), BorderLayout.CENTER);}
0
private JPanel makeParameterPanel()
{        refNamesField = new JLabeledTextField(JMeterUtils.getResString("jsonpp_variable_names"));        jsonPathExpressionsField = new JLabeledTextField(JMeterUtils.getResString("jsonpp_json_path_expressions"));        matchNumbersField = new JLabeledTextField(JMeterUtils.getResString("jsonpp_match_numbers"));        defaultValuesField = new JLabeledTextField(JMeterUtils.getResString("jsonpp_default_values"));        computeConcatenationField = new JCheckBox();    JPanel panel = new JPanel(new GridBagLayout());    GridBagConstraints gbc = new GridBagConstraints();    initConstraints(gbc);    addField(panel, refNamesField, gbc);    nextLine(gbc);    addField(panel, jsonPathExpressionsField, gbc);    nextLine(gbc);    addField(panel, matchNumbersField, gbc);    nextLine(gbc);    addField(panel, new JLabel(JMeterUtils.getResString("jsonpp_compute_concat")), computeConcatenationField, gbc);    nextLine(gbc);    gbc.weighty = 1;    addField(panel, defaultValuesField, gbc);    return panel;}
0
private void addField(JPanel panel, JLabeledTextField field, GridBagConstraints gbc)
{    List<JComponent> item = field.getComponentList();    panel.add(item.get(0), gbc.clone());    gbc.gridx++;    gbc.weightx = 1;    gbc.fill = GridBagConstraints.HORIZONTAL;    panel.add(item.get(1), gbc.clone());}
0
private void addField(JPanel panel, JLabel label, JCheckBox checkBox, GridBagConstraints gbc)
{    panel.add(label, gbc.clone());    gbc.gridx++;    gbc.weightx = 1;    gbc.fill = GridBagConstraints.HORIZONTAL;    panel.add(checkBox, gbc.clone());}
0
private void nextLine(GridBagConstraints gbc)
{    gbc.gridx = 0;    gbc.gridy++;    gbc.weightx = 0;    gbc.fill = GridBagConstraints.NONE;}
0
private void initConstraints(GridBagConstraints gbc)
{    gbc.anchor = GridBagConstraints.NORTHWEST;    gbc.fill = GridBagConstraints.NONE;    gbc.gridheight = 1;    gbc.gridwidth = 1;    gbc.gridx = 0;    gbc.gridy = 0;    gbc.weightx = 0;    gbc.weighty = 0;}
0
private JsonPath getJsonPath(String jsonPathExpression)
{    JsonPath jsonPath = expressionToJsonPath.get(jsonPathExpression);    if (jsonPath == null) {        jsonPath = JsonPath.compile(jsonPathExpression);        expressionToJsonPath.put(jsonPathExpression, jsonPath);    }    return jsonPath;}
0
public void reset()
{    expressionToJsonPath.clear();}
0
public List<Object> extractWithJsonPath(String jsonString, String jsonPath) throws ParseException
{    JsonPath jsonPathParser = getJsonPath(jsonPath);    List<Object> extractedObjects;    try {        extractedObjects = jsonPathParser.read(jsonString, DEFAULT_CONFIGURATION);    } catch (PathNotFoundException e) {        if (log.isDebugEnabled()) {                    }        return Collections.emptyList();    }    List<Object> results = new ArrayList<>(extractedObjects.size());    for (Object obj : extractedObjects) {        results.add(stringifyJSONObject(obj));    }    return results;}
1
private String stringifyJSONObject(Object obj)
{    if (obj instanceof Map) {        return new JSONObject((Map<String, ?>) obj).toJSONString();    }    if (obj instanceof JSONArray) {        return ((JSONArray) obj).toJSONString();    }        return obj == null ? "" : obj.toString();}
0
private void clearOldRefVars(JMeterVariables vars, String refName)
{    vars.remove(refName + REF_MATCH_NR);    for (int i = 1; vars.get(refName + "_" + i) != null; i++) {        vars.remove(refName + "_" + i);    }}
0
private void placeObjectIntoVars(JMeterVariables vars, String currentRefName, List<Object> extractedValues, int matchNr)
{    vars.put(currentRefName, stringify(extractedValues.get(matchNr)));}
0
private String stringify(Object obj)
{        return obj == null ? "" : obj.toString();}
0
public String getJsonPathExpressions()
{    return getPropertyAsString(JSON_PATH_EXPRESSIONS);}
0
public void setJsonPathExpressions(String jsonPath)
{    setProperty(JSON_PATH_EXPRESSIONS, jsonPath);}
0
public String getRefNames()
{    return getPropertyAsString(REFERENCE_NAMES);}
0
public void setRefNames(String refName)
{    setProperty(REFERENCE_NAMES, refName);}
0
public String getDefaultValues()
{    return getPropertyAsString(DEFAULT_VALUES);}
0
public void setDefaultValues(String defaultValue)
{        setProperty(DEFAULT_VALUES, defaultValue, "");}
0
public boolean getComputeConcatenation()
{    return getPropertyAsBoolean(COMPUTE_CONCATENATION, COMPUTE_CONCATENATION_DEFAULT_VALUE);}
0
public void setComputeConcatenation(boolean computeConcatenation)
{    setProperty(COMPUTE_CONCATENATION, computeConcatenation, COMPUTE_CONCATENATION_DEFAULT_VALUE);}
0
public void threadStarted()
{}
0
public void threadFinished()
{    localMatcher.remove();}
0
public void setMatchNumbers(String matchNumber)
{    setProperty(MATCH_NUMBERS, matchNumber);}
0
public String getMatchNumbers()
{    return getPropertyAsString(MATCH_NUMBERS);}
0
public int[] getMatchNumbersAsInt(int arraySize)
{    String matchNumbersAsString = getMatchNumbers();    int[] result = new int[arraySize];    if (JOrphanUtils.isBlank(matchNumbersAsString)) {        Arrays.fill(result, 0);    } else {        String[] matchNumbersAsStringArray = matchNumbersAsString.split(SEPARATOR);        for (int i = 0; i < matchNumbersAsStringArray.length; i++) {            result[i] = Integer.parseInt(matchNumbersAsStringArray[i].trim());        }    }    return result;}
0
public void clearData()
{        this.jsonDataField.setText("");            this.resultField.setText("");}
0
public void init()
{        jsonWithExtractorPanel = createExtractorPanel();}
0
public void actionPerformed(ActionEvent e)
{    String command = e.getActionCommand();    if ((sampleResult != null) && (TESTER_COMMAND.equals(command))) {        String response = jsonDataField.getText();        executeTester(response);    }}
0
protected void executeTester(String textToParse)
{    if (textToParse != null && textToParse.length() > 0 && this.expressionField.getText().length() > 0) {        this.resultField.setText(process(textToParse));                this.resultField.setCaretPosition(0);    }}
0
protected String getExpression()
{    return expressionField.getText();}
0
public void renderResult(SampleResult sampleResult)
{    String response = ViewResultsFullVisualizer.getResponseAsString(sampleResult);        jsonDataField.setText(response == null ? "" : RenderAsJSON.prettyJSON(response, TAB_SEPARATOR));    jsonDataField.setCaretPosition(0);}
0
public void setupTabPane()
{        if (rightSide.indexOfTab(getTabLabel()) < 0) {                        rightSide.addTab(getTabLabel(), jsonWithExtractorPanel);    }    clearData();}
0
private JPanel createExtractorPanel()
{    jsonDataField = JSyntaxTextArea.getInstance(50, 80, true);    jsonDataField.setCodeFoldingEnabled(true);    jsonDataField.setEditable(false);    jsonDataField.setBracketMatchingEnabled(false);    jsonDataField.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JSON);    jsonDataField.setLanguage(SyntaxConstants.SYNTAX_STYLE_JSON);    jsonDataField.setLineWrap(true);    jsonDataField.setWrapStyleWord(true);    JScrollPane jsonDataPane = JTextScrollPane.getInstance(jsonDataField, true);    jsonDataPane.setPreferredSize(new Dimension(100, 200));    JPanel panel = new JPanel(new BorderLayout(0, 5));    JSplitPane mainSplit = new JSplitPane(JSplitPane.VERTICAL_SPLIT, jsonDataPane, createTechnologyExtractorTasksPanel());    mainSplit.setDividerLocation(0.6d);    mainSplit.setOneTouchExpandable(true);    panel.add(mainSplit, BorderLayout.CENTER);    return panel;}
0
private JPanel createTechnologyExtractorTasksPanel()
{    JPanel jsonPathActionPanel = new JPanel();    jsonPathActionPanel.setLayout(new BoxLayout(jsonPathActionPanel, BoxLayout.X_AXIS));    Border margin = new EmptyBorder(5, 5, 0, 5);    jsonPathActionPanel.setBorder(margin);        expressionField = new JLabeledTextField(getExpressionLabel());    jsonPathActionPanel.add(expressionField, BorderLayout.WEST);        JButton testerButton = new JButton(getTestButtonLabel());    testerButton.setActionCommand(TESTER_COMMAND);    testerButton.addActionListener(this);    jsonPathActionPanel.add(testerButton, BorderLayout.EAST);    resultField = new JTextArea();    resultField.setEditable(false);    resultField.setLineWrap(true);    resultField.setWrapStyleWord(true);    resultField.setMinimumSize(new Dimension(100, 150));    JPanel jsonPathTasksPanel = new JPanel(new BorderLayout(0, 5));    jsonPathTasksPanel.add(jsonPathActionPanel, BorderLayout.NORTH);    jsonPathTasksPanel.add(GuiUtils.makeScrollPane(resultField), BorderLayout.CENTER);    return jsonPathTasksPanel;}
0
public synchronized void setRightSide(JTabbedPane side)
{    rightSide = side;}
0
public synchronized void setSamplerResult(Object userObject)
{    if (userObject instanceof SampleResult) {        sampleResult = (SampleResult) userObject;    }}
0
public void setLastSelectedTab(int index)
{}
0
public void renderImage(SampleResult sampleResult)
{    clearData();        jsonDataField.setText(JMeterUtils.getResString("render_no_text"));}
0
public void setBackgroundColor(Color backGround)
{}
0
protected JTabbedPane getRightSide()
{    return rightSide;}
0
protected JPanel getJsonWithExtractorPanel()
{    return jsonWithExtractorPanel;}
0
protected JSyntaxTextArea getJsonDataField()
{    return jsonDataField;}
0
protected JLabeledTextField getExpressionField()
{    return expressionField;}
0
protected JTextArea getResultField()
{    return resultField;}
0
protected String getTabLabel()
{    return JMeterUtils.getResString("jmespath_tester_title");}
0
protected String getTestButtonLabel()
{    return JMeterUtils.getResString("jmespath_tester_button_test");}
0
protected String getExpressionLabel()
{    return JMeterUtils.getResString("jmespath_tester_field");}
0
protected String process(String textToParse)
{    String expression = getExpression();    try {        JsonNode actualObj = OBJECT_MAPPER.readValue(textToParse, JsonNode.class);        JsonNode result = JMESPathCache.getInstance().get(expression).search(actualObj);        if (result.isNull()) {                        return NO_MATCH;        } else {            StringBuilder builder = new StringBuilder();            int i = 0;            if (result.isArray()) {                for (JsonNode element : (ArrayNode) result) {                    builder.append("Result[").append(i++).append("]=").append(writeJsonNode(OBJECT_MAPPER, element)).append("\n");                }            } else {                builder.append("Result[").append(i++).append("]=").append(writeJsonNode(OBJECT_MAPPER, result)).append("\n");            }            return builder.toString();        }    } catch (Exception e) {                                return "Exception: " + e.getMessage();    }}
1
private static String writeJsonNode(ObjectMapper mapper, JsonNode element) throws JsonProcessingException
{    if (element.isTextual()) {        return element.asText();    } else {        return mapper.writeValueAsString(element);    }}
0
public String toString()
{        return JMeterUtils.getResString("jmespath_renderer");}
0
protected String getTabLabel()
{    return JMeterUtils.getResString("jsonpath_tester_title");}
0
protected String getTestButtonLabel()
{    return JMeterUtils.getResString("jsonpath_tester_button_test");}
0
protected String getExpressionLabel()
{    return JMeterUtils.getResString("jsonpath_tester_field");}
0
protected String process(String textToParse)
{    String expression = getExpression();    try {        List<Object> matchStrings = extractWithTechnology(textToParse, expression);        if (matchStrings.isEmpty()) {                        return NO_MATCH;        } else {            StringBuilder builder = new StringBuilder();            int i = 0;            for (Object obj : matchStrings) {                String objAsString =                 obj != null ? obj.toString() : "";                                builder.append("Result[").append(i++).append("]=").append(objAsString).append("\n");            }            return builder.toString();        }    } catch (Exception e) {                                return "Exception: " + e.getMessage();    }}
1
private List<Object> extractWithTechnology(String textToParse, String expression) throws Exception
{    JSONManager jsonManager = new JSONManager();    return jsonManager.extractWithJsonPath(textToParse, expression);}
0
public String toString()
{        return JMeterUtils.getResString("jsonpath_renderer");}
0
public int extract(String expression, String attribute, int matchNumber, String inputString, List<String> result, int found, String cacheKey)
{    Document document;    if (cacheKey != null) {        document = (Document) JMeterContextService.getContext().getSamplerContext().get(CACHE_KEY_PREFIX + cacheKey);        if (document == null) {            document = Jsoup.parse(inputString);            JMeterContextService.getContext().getSamplerContext().put(CACHE_KEY_PREFIX + cacheKey, document);        }    } else {        document = Jsoup.parse(inputString);    }    Elements elements = document.select(expression);    for (Element element : elements) {        if (matchNumber <= 0 || found != matchNumber) {            result.add(extractValue(attribute, element));            found++;        } else {            break;        }    }    return found;}
0
private String extractValue(String attribute, Element element)
{    if (!JOrphanUtils.isBlank(attribute)) {        return element.attr(attribute);    } else {        return element.text().trim();    }}
0
public void process()
{    try {        ScriptEngine scriptEngine = getScriptEngine();        processFileOrScript(scriptEngine, null);    } catch (ScriptException | IOException e) {            }}
1
public Object clone()
{    return super.clone();}
0
public void process()
{    initTemplate();    JMeterContext context = getThreadContext();    SampleResult previousResult = context.getPreviousResult();    if (previousResult == null) {        return;    }            JMeterVariables vars = context.getVariables();    String refName = getRefName();    int matchNumber = getMatchNumber();    final String defaultValue = getDefaultValue();    if (defaultValue.length() > 0 || isEmptyDefaultValue()) {                vars.put(refName, defaultValue);    }    Perl5Matcher matcher = JMeterUtils.getMatcher();    String regex = getRegex();    Pattern pattern = null;    try {        pattern = JMeterUtils.getPatternCache().getPattern(regex, Perl5Compiler.READ_ONLY_MASK);        List<MatchResult> matches = processMatches(pattern, regex, previousResult, matchNumber, vars);        int prevCount = 0;        String prevString = vars.get(refName + REF_MATCH_NR);        if (prevString != null) {                        vars.remove(refName + REF_MATCH_NR);            try {                prevCount = Integer.parseInt(prevString);            } catch (NumberFormatException nfe) {                            }        }                int matchCount = 0;        try {            MatchResult match;            if (matchNumber >= 0) {                                match = getCorrectMatch(matches, matchNumber);                if (match != null) {                    vars.put(refName, generateResult(match));                    saveGroups(vars, refName, match);                } else {                                        removeGroups(vars, refName);                }            } else             {                                removeGroups(vars, refName);                matchCount = matches.size();                                vars.put(refName + REF_MATCH_NR, Integer.toString(matchCount));                for (int i = 1; i <= matchCount; i++) {                    match = getCorrectMatch(matches, i);                    if (match != null) {                        final String refName_n = refName + UNDERSCORE + i;                        vars.put(refName_n, generateResult(match));                        saveGroups(vars, refName_n, match);                    }                }            }                        for (int i = matchCount + 1; i <= prevCount; i++) {                final String refName_n = refName + UNDERSCORE + i;                vars.remove(refName_n);                removeGroups(vars, refName_n);            }        } catch (RuntimeException e) {                    }    } catch (MalformedCachePatternException e) {            } finally {        JMeterUtils.clearMatcherMemory(matcher, pattern);    }}
1
private String getInputString(SampleResult result)
{    String inputString =     useUrl() ?     result.getUrlAsString() : useHeaders() ? result.getResponseHeaders() : useRequestHeaders() ? result.getRequestHeaders() :     useCode() ?     result.getResponseCode() :     useMessage() ?     result.getResponseMessage() : useUnescapedBody() ? StringEscapeUtils.unescapeHtml4(result.getResponseDataAsString()) : useBodyAsDocument() ? Document.getTextFromDocument(result.getResponseData()) :     result.getResponseDataAsString();        return inputString;}
1
private List<MatchResult> processMatches(Pattern pattern, String regex, SampleResult result, int matchNumber, JMeterVariables vars)
{        Perl5Matcher matcher = JMeterUtils.getMatcher();    List<MatchResult> matches = new ArrayList<>();    int found = 0;    if (isScopeVariable()) {        String inputString = vars.get(getVariableName());        if (inputString == null) {            if (log.isWarnEnabled()) {                            }            return Collections.emptyList();        }        matchStrings(matchNumber, matcher, pattern, matches, found, inputString);    } else {        List<SampleResult> sampleList = getSampleList(result);        for (SampleResult sr : sampleList) {            String inputString = getInputString(sr);            found = matchStrings(matchNumber, matcher, pattern, matches, found, inputString);            if (matchNumber > 0 && found == matchNumber) {                                break;            }        }    }    return matches;}
1
private int matchStrings(int matchNumber, Perl5Matcher matcher, Pattern pattern, List<MatchResult> matches, int found, String inputString)
{    PatternMatcherInput input = new PatternMatcherInput(inputString);    while (matchNumber <= 0 || found != matchNumber) {        if (matcher.contains(input, pattern)) {                        matches.add(matcher.getMatch());            found++;        } else {            break;        }    }    return found;}
1
private void saveGroups(JMeterVariables vars, String basename, MatchResult match)
{    StringBuilder buf = new StringBuilder();    buf.append(basename);        buf.append("_g");    int pfxlen = buf.length();    String prevString = vars.get(buf.toString());    int previous = 0;    if (prevString != null) {        try {            previous = Integer.parseInt(prevString);        } catch (NumberFormatException nfe) {                    }    }        final int groups = match.groups();    for (int x = 0; x < groups; x++) {        buf.append(x);        vars.put(buf.toString(), match.group(x));        buf.setLength(pfxlen);    }    vars.put(buf.toString(), Integer.toString(groups - 1));    for (int i = groups; i <= previous; i++) {        buf.append(i);                vars.remove(buf.toString());        buf.setLength(pfxlen);    }}
1
private void removeGroups(JMeterVariables vars, String basename)
{    StringBuilder buf = new StringBuilder();    buf.append(basename);        buf.append("_g");    int pfxlen = buf.length();        int groups;    try {        groups = Integer.parseInt(vars.get(buf.toString()));    } catch (NumberFormatException e) {        groups = 0;    }        vars.remove(buf.toString());    for (int i = 0; i <= groups; i++) {        buf.append(i);                vars.remove(buf.toString());        buf.setLength(pfxlen);    }}
0
private String generateResult(MatchResult match)
{    StringBuilder result = new StringBuilder();    for (Object obj : template) {        if (log.isDebugEnabled()) {                    }        if (obj instanceof Integer) {            result.append(match.group(((Integer) obj).intValue()));        } else {            result.append(obj);        }    }        return result.toString();}
1
private void initTemplate()
{    if (template != null) {        return;    }        List<Object> combined = new ArrayList<>();    String rawTemplate = getTemplate();    PatternMatcher matcher = JMeterUtils.getMatcher();    Pattern templatePattern =     JMeterUtils.getPatternCache().getPattern(    "\\$(\\d+)\\$", Perl5Compiler.READ_ONLY_MASK & Perl5Compiler.SINGLELINE_MASK);    if (log.isDebugEnabled()) {            }    int beginOffset = 0;    MatchResult currentResult;    PatternMatcherInput pinput = new PatternMatcherInput(rawTemplate);    while (matcher.contains(pinput, templatePattern)) {        currentResult = matcher.getMatch();        final int beginMatch = currentResult.beginOffset(0);        if (beginMatch > beginOffset) {                        combined.add(rawTemplate.substring(beginOffset, beginMatch));        }                combined.add(Integer.valueOf(currentResult.group(1)));        beginOffset = currentResult.endOffset(0);    }    if (beginOffset < rawTemplate.length()) {                combined.add(rawTemplate.substring(beginOffset, rawTemplate.length()));    }    if (log.isDebugEnabled()) {                int i = 0;        for (Object o : combined) {                    }    }    template = combined;}
1
private MatchResult getCorrectMatch(List<MatchResult> matches, int entry)
{    int matchSize = matches.size();    if (matchSize <= 0 || entry > matchSize) {        return null;    }    if (    entry == 0) {        return matches.get(JMeterUtils.getRandomInt(matchSize));    }    return matches.get(entry - 1);}
0
public void setRegex(String regex)
{    setProperty(REGEX_PROP, regex);}
0
public String getRegex()
{    return getPropertyAsString(REGEX_PROP);}
0
public void setRefName(String refName)
{    setProperty(REFNAME_PROP, refName);}
0
public String getRefName()
{    return getPropertyAsString(REFNAME_PROP);}
0
public void setMatchNumber(int matchNumber)
{    setProperty(new IntegerProperty(MATCH_NUMBER_PROP, matchNumber));}
0
public void setMatchNumber(String matchNumber)
{    setProperty(MATCH_NUMBER_PROP, matchNumber);}
0
public int getMatchNumber()
{    return getPropertyAsInt(MATCH_NUMBER_PROP);}
0
public String getMatchNumberAsString()
{    return getPropertyAsString(MATCH_NUMBER_PROP);}
0
public void setDefaultValue(String defaultValue)
{    setProperty(DEFAULT_PROP, defaultValue);}
0
public void setDefaultEmptyValue(boolean defaultEmptyValue)
{    setProperty(DEFAULT_EMPTY_VALUE_PROP, defaultEmptyValue, DEFAULT_VALUE_FOR_DEFAULT_EMPTY_VALUE);}
0
public String getDefaultValue()
{    return getPropertyAsString(DEFAULT_PROP);}
0
public boolean isEmptyDefaultValue()
{    return getPropertyAsBoolean(DEFAULT_EMPTY_VALUE_PROP, DEFAULT_VALUE_FOR_DEFAULT_EMPTY_VALUE);}
0
public void setTemplate(String template)
{    setProperty(TEMPLATE_PROP, template);}
0
public String getTemplate()
{    return getPropertyAsString(TEMPLATE_PROP);}
0
public boolean useHeaders()
{    return USE_HDRS.equalsIgnoreCase(getPropertyAsString(MATCH_AGAINST));}
0
public boolean useRequestHeaders()
{    return USE_REQUEST_HDRS.equalsIgnoreCase(getPropertyAsString(MATCH_AGAINST));}
0
public boolean useBody()
{    String prop = getPropertyAsString(MATCH_AGAINST);        return prop.length() == 0 || USE_BODY.equalsIgnoreCase(prop);}
0
public boolean useUnescapedBody()
{    String prop = getPropertyAsString(MATCH_AGAINST);        return USE_BODY_UNESCAPED.equalsIgnoreCase(prop);}
0
public boolean useBodyAsDocument()
{    String prop = getPropertyAsString(MATCH_AGAINST);        return USE_BODY_AS_DOCUMENT.equalsIgnoreCase(prop);}
0
public boolean useUrl()
{    String prop = getPropertyAsString(MATCH_AGAINST);    return USE_URL.equalsIgnoreCase(prop);}
0
public boolean useCode()
{    String prop = getPropertyAsString(MATCH_AGAINST);    return USE_CODE.equalsIgnoreCase(prop);}
0
public boolean useMessage()
{    String prop = getPropertyAsString(MATCH_AGAINST);    return USE_MESSAGE.equalsIgnoreCase(prop);}
0
public void setUseField(String actionCommand)
{    setProperty(MATCH_AGAINST, actionCommand);}
0
private String concat(String s1, String s2)
{        return s1 + "_" + s2;}
0
private String concat(String s1, int i)
{        return s1 + "_" + i;}
0
public void process()
{    JMeterContext context = getThreadContext();    final SampleResult previousResult = context.getPreviousResult();    if (previousResult == null) {        return;    }    JMeterVariables vars = context.getVariables();    String refName = getRefName();    vars.put(refName, getDefaultValue());    final String matchNR = concat(refName, REF_MATCH_NR);        int prevCount = 0;    try {        prevCount = Integer.parseInt(vars.get(matchNR));    } catch (NumberFormatException e) {        }        vars.put(matchNR, "0");        vars.remove(concat(refName, "1"));    int matchNumber = getMatchNumber();    List<String> matches = new ArrayList<>();    try {        if (isScopeVariable()) {            String inputString = vars.get(getVariableName());            if (inputString != null) {                if (inputString.length() > 0) {                    getValuesForXPath(getXPathQuery(), matches, matchNumber, inputString);                }            } else {                if (log.isWarnEnabled()) {                                    }            }        } else {            List<SampleResult> samples = getSampleList(previousResult);            int size = samples.size();            for (int i = 0; i < size; i++) {                getValuesForXPath(getXPathQuery(), matches, matchNumber, previousResult.getResponseDataAsString());            }        }        final int matchCount = matches.size();        vars.put(matchNR, String.valueOf(matchCount));        if (matchCount > 0) {            String value = matches.get(0);            if (value != null) {                vars.put(refName, value);            }            for (int i = 0; i < matchCount; i++) {                value = matches.get(i);                if (value != null) {                    vars.put(concat(refName, i + 1), matches.get(i));                }            }        }                vars.remove(concat(refName, matchCount + 1));                for (int i = matchCount + 2; i <= prevCount; i++) {            vars.remove(concat(refName, i));        }    } catch (Exception e) {                if (log.isWarnEnabled()) {                    }        addAssertionFailure(previousResult, e, false);    }}
1
private void addAssertionFailure(final SampleResult previousResult, final Throwable thrown, final boolean setFailed)
{        AssertionResult ass = new AssertionResult(getName());    ass.setFailure(true);    ass.setFailureMessage(thrown.getLocalizedMessage() + "\nSee log file for further details.");    previousResult.addAssertionResult(ass);    if (setFailed) {        previousResult.setSuccessful(false);    }}
0
public void setXPathQuery(String val)
{    setProperty(XPATH_QUERY, val);}
0
public String getXPathQuery()
{    return getPropertyAsString(XPATH_QUERY);}
0
public void setRefName(String refName)
{    setProperty(REFNAME, refName);}
0
public String getRefName()
{    return getPropertyAsString(REFNAME);}
0
public void setDefaultValue(String val)
{    setProperty(DEFAULT, val);}
0
public String getDefaultValue()
{    return getPropertyAsString(DEFAULT);}
0
public boolean getFragment()
{    return getPropertyAsBoolean(FRAGMENT, false);}
0
public void setFragment(boolean selected)
{    setProperty(FRAGMENT, selected, false);}
0
private void getValuesForXPath(String query, List<String> matchStrings, int matchNumber, String responseData) throws SaxonApiException, FactoryConfigurationError
{    XPathUtil.putValuesForXPathInListUsingSaxon(responseData, query, matchStrings, getFragment(), matchNumber, getNamespaces());}
0
public void setMatchNumber(int matchNumber)
{    setProperty(new IntegerProperty(MATCH_NUMBER, matchNumber));}
0
public void setMatchNumber(String matchNumber)
{    setProperty(MATCH_NUMBER, matchNumber);}
0
public int getMatchNumber()
{    return getPropertyAsInt(MATCH_NUMBER, DEFAULT_VALUE);}
0
public String getMatchNumberAsString()
{    return getPropertyAsString(MATCH_NUMBER, DEFAULT_VALUE_AS_STRING);}
0
public void setNamespaces(String namespaces)
{    setProperty(NAMESPACES, namespaces);}
0
public String getNamespaces()
{    return getPropertyAsString(NAMESPACES);}
0
private String concat(String s1, String s2)
{        return s1 + "_" + s2;}
0
private String concat(String s1, int i)
{        return s1 + "_" + i;}
0
public void process()
{    JMeterContext context = getThreadContext();    final SampleResult previousResult = context.getPreviousResult();    if (previousResult == null) {        return;    }    JMeterVariables vars = context.getVariables();    String refName = getRefName();    vars.put(refName, getDefaultValue());    final String matchNR = concat(refName, REF_MATCH_NR);        int prevCount = 0;    try {        prevCount = Integer.parseInt(vars.get(matchNR));    } catch (NumberFormatException e) {        }        vars.put(matchNR, "0");        vars.remove(concat(refName, "1"));    int matchNumber = getMatchNumber();    List<String> matches = new ArrayList<>();    try {        if (isScopeVariable()) {            String inputString = vars.get(getVariableName());            if (inputString != null) {                if (inputString.length() > 0) {                    Document d = parseResponse(inputString);                    getValuesForXPath(d, getXPathQuery(), matches, matchNumber);                }            } else {                if (log.isWarnEnabled()) {                                    }            }        } else {            List<SampleResult> samples = getSampleList(previousResult);            for (SampleResult res : samples) {                Document d = parseResponse(res.getResponseDataAsString());                getValuesForXPath(d, getXPathQuery(), matches, matchNumber);            }        }        final int matchCount = matches.size();        vars.put(matchNR, String.valueOf(matchCount));        if (matchCount > 0) {            String value = matches.get(0);            if (value != null) {                vars.put(refName, value);            }            for (int i = 0; i < matchCount; i++) {                value = matches.get(i);                if (value != null) {                    vars.put(concat(refName, i + 1), matches.get(i));                }            }        }                vars.remove(concat(refName, matchCount + 1));                for (int i = matchCount + 2; i <= prevCount; i++) {            vars.remove(concat(refName, i));        }    } catch (IOException e) {                        AssertionResult ass = new AssertionResult(getName());        ass.setError(true);        ass.setFailureMessage("IOException: " + e.getLocalizedMessage());        previousResult.addAssertionResult(ass);        previousResult.setSuccessful(false);    } catch (ParserConfigurationException e) {                final String errrorMessage = "ParserConfigurationException while processing (" + getXPathQuery() + ")";                throw new JMeterError(errrorMessage, e);    } catch (SAXException e) {                if (log.isWarnEnabled()) {                    }                addAssertionFailure(previousResult, e, false);    } catch (TransformerException e) {                if (log.isWarnEnabled()) {                    }        addAssertionFailure(previousResult, e, false);    } catch (TidyException e) {                        addAssertionFailure(previousResult, e, true);    }}
1
private void addAssertionFailure(final SampleResult previousResult, final Throwable thrown, final boolean setFailed)
{        AssertionResult ass = new AssertionResult(getName());    ass.setFailure(true);    ass.setFailureMessage(thrown.getLocalizedMessage() + "\nSee log file for further details.");    previousResult.addAssertionResult(ass);    if (setFailed) {        previousResult.setSuccessful(false);    }}
0
public void setXPathQuery(String val)
{    setProperty(XPATH_QUERY, val);}
0
public String getXPathQuery()
{    return getPropertyAsString(XPATH_QUERY);}
0
public void setRefName(String refName)
{    setProperty(REFNAME, refName);}
0
public String getRefName()
{    return getPropertyAsString(REFNAME);}
0
public void setDefaultValue(String val)
{    setProperty(DEFAULT, val);}
0
public String getDefaultValue()
{    return getPropertyAsString(DEFAULT);}
0
public void setTolerant(boolean val)
{    setProperty(new BooleanProperty(TOLERANT, val));}
0
public boolean isTolerant()
{    return getPropertyAsBoolean(TOLERANT);}
0
public void setNameSpace(boolean val)
{    setProperty(new BooleanProperty(NAMESPACE, val));}
0
public boolean useNameSpace()
{    return getPropertyAsBoolean(NAMESPACE);}
0
public void setReportErrors(boolean val)
{    setProperty(REPORT_ERRORS, val, false);}
0
public boolean reportErrors()
{    return getPropertyAsBoolean(REPORT_ERRORS, false);}
0
public void setShowWarnings(boolean val)
{    setProperty(SHOW_WARNINGS, val, false);}
0
public boolean showWarnings()
{    return getPropertyAsBoolean(SHOW_WARNINGS, false);}
0
public void setQuiet(boolean val)
{    setProperty(QUIET, val, true);}
0
public boolean isQuiet()
{    return getPropertyAsBoolean(QUIET, true);}
0
public boolean getFragment()
{    return getPropertyAsBoolean(FRAGMENT, false);}
0
public void setFragment(boolean selected)
{    setProperty(FRAGMENT, selected, false);}
0
private Document parseResponse(String unicodeData) throws IOException, ParserConfigurationException, SAXException, TidyException
{                        byte[] utf8data = unicodeData.getBytes(StandardCharsets.UTF_8);    ByteArrayInputStream in = new ByteArrayInputStream(utf8data);    boolean isXML = JOrphanUtils.isXML(utf8data);        return XPathUtil.makeDocument(in, false, false, useNameSpace(), isTolerant(), isQuiet(), showWarnings(), reportErrors(), isXML, isDownloadDTDs());}
0
private void getValuesForXPath(Document d, String query, List<String> matchStrings, int matchNumber) throws TransformerException
{    XPathUtil.putValuesForXPathInList(d, query, matchStrings, getFragment(), matchNumber);}
0
public void setWhitespace(boolean selected)
{    setProperty(WHITESPACE, selected, false);}
0
public boolean isWhitespace()
{    return getPropertyAsBoolean(WHITESPACE, false);}
0
public void setValidating(boolean selected)
{    setProperty(VALIDATE, selected);}
0
public boolean isValidating()
{    return getPropertyAsBoolean(VALIDATE, false);}
0
public void setDownloadDTDs(boolean selected)
{    setProperty(DOWNLOAD_DTDS, selected, false);}
0
public boolean isDownloadDTDs()
{    return getPropertyAsBoolean(DOWNLOAD_DTDS, false);}
0
public void setMatchNumber(int matchNumber)
{    setProperty(new IntegerProperty(MATCH_NUMBER, matchNumber));}
0
public void setMatchNumber(String matchNumber)
{    setProperty(MATCH_NUMBER, matchNumber);}
0
public int getMatchNumber()
{    return getPropertyAsInt(MATCH_NUMBER, DEFAULT_VALUE);}
0
public String getMatchNumberAsString()
{    return getPropertyAsString(MATCH_NUMBER, DEFAULT_VALUE_AS_STRING);}
0
public void addNode(Object object, HashTree subTree)
{    JMeterTreeNode treeNode = (JMeterTreeNode) object;    Object userObject = treeNode.getUserObject();    if (userObject instanceof TransactionController || (userObject instanceof Sampler && !(userObject instanceof TestAction) && !(userObject instanceof DebugSampler))) {        Matcher matcher = TRANSACTIONS_REGEX.matcher(((TestElement) userObject).getName());        if (!matcher.matches()) {            listOfTransactions.add(((TestElement) userObject).getName());        }    }}
0
public void subtractNode()
{}
0
public void processPath()
{}
0
public Set<String> getListOfTransactions()
{    return listOfTransactions;}
0
public void doAction(ActionEvent e)
{    HashTree wholeTree = GuiPackage.getInstance().getTreeModel().getTestPlan();    SamplerAndTransactionNameVisitor visitor = new SamplerAndTransactionNameVisitor();    wholeTree.traverse(visitor);    Set<String> sampleNames = visitor.getListOfTransactions();    if (sampleNames.isEmpty()) {                showResult(e, "No transaction exported using regexp '" + TRANSACTIONS_REGEX_PATTERN + "', modify property 'report_transactions_pattern' to fix this problem");    } else {        StringBuilder builder = new StringBuilder();        for (String sampleName : sampleNames) {            builder.append(sampleName).append('|');        }        builder.setLength(builder.length() - 1);        String result = builder.toString();                showResult(e, "jmeter.reportgenerator.exporter.html.series_filter=^(" + result + ")(-success|-failure)?$");    }}
1
private final void showResult(ActionEvent event, String result)
{    EscapeDialog messageDialog = new EscapeDialog(getParentFrame(event), JMeterUtils.getResString("export_transactions_title"),     false);    Container contentPane = messageDialog.getContentPane();    contentPane.setLayout(new BorderLayout());    contentPane.add(new JLabel(JMeterUtils.getResString("export_transactions_exported_property"), SwingConstants.CENTER),     BorderLayout.NORTH);    JSyntaxTextArea syntaxTextArea = JSyntaxTextArea.getInstance(10, 80, true);    syntaxTextArea.setText(result);    syntaxTextArea.setCaretPosition(0);    contentPane.add(JTextScrollPane.getInstance(syntaxTextArea), BorderLayout.CENTER);    messageDialog.pack();    ComponentUtil.centerComponentInComponent(GuiPackage.getInstance().getMainFrame(), messageDialog);    SwingUtilities.invokeLater(() -> messageDialog.setVisible(true));}
0
public Set<String> getActionNames()
{    return commands;}
0
public JMenuItem[] getMenuItemsAtLocation(MENU_LOCATION location)
{    if (location == MENU_LOCATION.TOOLS) {        JMenuItem menuItemIC = new JMenuItem(JMeterUtils.getResString("export_transactions_menu"), KeyEvent.VK_UNDEFINED);        menuItemIC.setName(ExportTransactionAndSamplerNames.EXPORT_NAMES);        menuItemIC.setActionCommand(ExportTransactionAndSamplerNames.EXPORT_NAMES);        menuItemIC.setAccelerator(null);        menuItemIC.addActionListener(ActionRouter.getInstance());        return new JMenuItem[] { menuItemIC };    }    return new JMenuItem[0];}
0
public JMenu[] getTopLevelMenus()
{    return new JMenu[0];}
0
public boolean localeChanged(MenuElement menu)
{    return false;}
0
public void localeChanged()
{}
0
protected String getInitFileProperty()
{    return INIT_FILE;}
0
public void process()
{    final BeanShellInterpreter bshInterpreter = getBeanShellInterpreter();    if (bshInterpreter == null) {                return;    }    JMeterContext jmctx = JMeterContextService.getContext();    Sampler sam = jmctx.getCurrentSampler();    try {                        bshInterpreter.set("sampler", sam);        processFileOrScript(bshInterpreter);    } catch (JMeterException e) {        if (log.isWarnEnabled()) {                    }    }}
1
public Object clone()
{    return super.clone();}
0
public void process()
{    BSFManager mgr = null;    try {        mgr = getManager();        if (mgr == null) {            return;        }        processFileOrScript(mgr);    } catch (BSFException e) {        if (log.isWarnEnabled()) {                    }    } finally {        if (mgr != null) {            mgr.terminate();        }    }}
1
public Object clone()
{    return super.clone();}
0
private void init()
{        perTheadNumber = ThreadLocal.withInitial(() -> Long.valueOf(getStart()));    perTheadLastIterationNumber = ThreadLocal.withInitial(() -> Long.valueOf(1));}
0
private Object readResolve()
{    init();    return this;}
0
public void iterationStart(LoopIterationEvent event)
{        JMeterVariables variables = JMeterContextService.getContext().getVariables();    long start = getStart();    long end = getEnd();    long increment = getIncrement();    if (!isPerUser()) {        synchronized (this) {            if (globalCounter == Long.MIN_VALUE || globalCounter > end) {                globalCounter = start;            }            variables.put(getVarName(), formatNumber(globalCounter));            globalCounter += increment;        }    } else {        long current = perTheadNumber.get().longValue();        if (isResetOnThreadGroupIteration()) {            int iteration = variables.getIteration();            Long lastIterationNumber = perTheadLastIterationNumber.get();            if (iteration != lastIterationNumber.longValue()) {                                current = getStart();            }            perTheadLastIterationNumber.set(Long.valueOf(iteration));        }        variables.put(getVarName(), formatNumber(current));        current += increment;        if (current > end) {            current = start;        }        perTheadNumber.set(Long.valueOf(current));    }}
0
private String formatNumber(long value)
{    String format = getFormat();    if (format != null && format.length() > 0) {        try {            DecimalFormat myFormatter = new DecimalFormat(format);            return myFormatter.format(value);        } catch (IllegalArgumentException ignored) {                    }    }    return Long.toString(value);}
1
public void setStart(long start)
{    setProperty(new LongProperty(START, start));}
0
public void setStart(String start)
{    setProperty(START, start);}
0
public long getStart()
{    return getPropertyAsLong(START);}
0
public String getStartAsString()
{    return getPropertyAsString(START);}
0
public void setEnd(long end)
{    setProperty(new LongProperty(END, end));}
0
public void setEnd(String end)
{    setProperty(END, end);}
0
public void setResetOnThreadGroupIteration(boolean value)
{    setProperty(RESET_ON_THREAD_GROUP_ITERATION, value, RESET_ON_THREAD_GROUP_ITERATION_DEFAULT);}
0
public boolean isResetOnThreadGroupIteration()
{    return getPropertyAsBoolean(RESET_ON_THREAD_GROUP_ITERATION, RESET_ON_THREAD_GROUP_ITERATION_DEFAULT);}
0
public long getEnd()
{    long propertyAsLong = getPropertyAsLong(END);    if (propertyAsLong == 0 && "".equals(getProperty(END).getStringValue())) {        propertyAsLong = Long.MAX_VALUE;    }    return propertyAsLong;}
0
public String getEndAsString()
{    return getPropertyAsString(END);}
0
public void setIncrement(long inc)
{    setProperty(new LongProperty(INCREMENT, inc));}
0
public void setIncrement(String incr)
{    setProperty(INCREMENT, incr);}
0
public long getIncrement()
{    return getPropertyAsLong(INCREMENT);}
0
public String getIncrementAsString()
{    return getPropertyAsString(INCREMENT);}
0
public void setIsPerUser(boolean isPer)
{    setProperty(new BooleanProperty(PER_USER, isPer));}
0
public boolean isPerUser()
{    return getPropertyAsBoolean(PER_USER);}
0
public void setVarName(String name)
{    setProperty(VAR_NAME, name);}
0
public String getVarName()
{    return getPropertyAsString(VAR_NAME);}
0
public void setFormat(String format)
{    setProperty(FORMAT, format);}
0
public String getFormat()
{    return getPropertyAsString(FORMAT);}
0
public void threadStarted()
{}
0
public void threadFinished()
{    perTheadLastIterationNumber.remove();    perTheadNumber.remove();}
0
public String getLabelResource()
{        return "counter_config_title";}
0
public TestElement createTestElement()
{    CounterConfig config = new CounterConfig();    modifyTestElement(config);    return config;}
0
public void modifyTestElement(TestElement c)
{    if (c instanceof CounterConfig) {        CounterConfig config = (CounterConfig) c;        config.setStart(startField.getText());        config.setEnd(endField.getText());        config.setIncrement(incrField.getText());        config.setVarName(varNameField.getText());        config.setFormat(formatField.getText());        config.setIsPerUser(perUserField.isSelected());        config.setResetOnThreadGroupIteration(resetCounterOnEachThreadGroupIteration.isEnabled() && resetCounterOnEachThreadGroupIteration.isSelected());    }    super.configureTestElement(c);}
0
public void clearGui()
{    super.clearGui();        startField.setText("");        incrField.setText("");        endField.setText("");        varNameField.setText("");        formatField.setText("");    perUserField.setSelected(false);    resetCounterOnEachThreadGroupIteration.setEnabled(false);}
0
public void configure(TestElement element)
{    super.configure(element);    CounterConfig config = (CounterConfig) element;    startField.setText(config.getStartAsString());    endField.setText(config.getEndAsString());    incrField.setText(config.getIncrementAsString());    formatField.setText(config.getFormat());    varNameField.setText(config.getVarName());    perUserField.setSelected(config.isPerUser());    if (config.isPerUser()) {        resetCounterOnEachThreadGroupIteration.setEnabled(true);        resetCounterOnEachThreadGroupIteration.setSelected(config.isResetOnThreadGroupIteration());    } else {        resetCounterOnEachThreadGroupIteration.setEnabled(false);    }}
0
private void init()
{        setBorder(makeBorder());    setLayout(new VerticalLayout(5, VerticalLayout.BOTH));        startField = new JLabeledTextField(JMeterUtils.getResString("start_value"));        incrField = new JLabeledTextField(JMeterUtils.getResString("increment"));        endField = new JLabeledTextField(JMeterUtils.getResString("max_value"));        varNameField = new JLabeledTextField(JMeterUtils.getResString("var_name"));        formatField = new JLabeledTextField(JMeterUtils.getResString("format"));        perUserField = new JCheckBox(JMeterUtils.getResString("counter_per_user"));        resetCounterOnEachThreadGroupIteration = new JCheckBox(JMeterUtils.getResString("counter_reset_per_tg_iteration"));    add(makeTitlePanel());    add(startField);    add(incrField);    add(endField);    add(formatField);    add(varNameField);    add(CheckBoxPanel.wrap(perUserField));    add(CheckBoxPanel.wrap(resetCounterOnEachThreadGroupIteration));    perUserField.addActionListener(this);}
0
public void actionPerformed(ActionEvent e)
{    if (e.getSource() == perUserField) {        resetCounterOnEachThreadGroupIteration.setEnabled(perUserField.isSelected());    }}
0
public static void error(Exception e, JComponent thrower)
{    JOptionPane.showMessageDialog(thrower, e, "Error", JOptionPane.ERROR_MESSAGE);}
0
public String getLabelResource()
{        return "sample_timeout_title";}
0
public TestElement createTestElement()
{    SampleTimeout timer = new SampleTimeout();    modifyTestElement(timer);    return timer;}
0
public void modifyTestElement(TestElement timer)
{    super.configureTestElement(timer);    ((SampleTimeout) timer).setTimeout(timeoutField.getText());}
0
public void configure(TestElement el)
{    super.configure(el);    timeoutField.setText(((SampleTimeout) el).getTimeout());}
0
private void init()
{        setLayout(new VerticalLayout(5, VerticalLayout.BOTH, VerticalLayout.TOP));    setBorder(makeBorder());    add(makeTitlePanel());    Box timeoutPanel = Box.createHorizontalBox();        JLabel timeoutLabel = new JLabel(JMeterUtils.getResString("sample_timeout_timeout"));    timeoutPanel.add(timeoutLabel);    timeoutField = new JTextField(6);    timeoutField.setText(DEFAULT_TIMEOUT);    timeoutPanel.add(timeoutField);    add(timeoutPanel);}
0
public void clearGui()
{    timeoutField.setText(DEFAULT_TIMEOUT);    super.clearGui();}
0
public String getLabelResource()
{        return "user_parameters_title";}
0
public void configure(TestElement el)
{    initTableModel();    paramTable.setModel(tableModel);    UserParameters params = (UserParameters) el;    CollectionProperty names = params.getNames();    CollectionProperty threadValues = params.getThreadLists();    tableModel.setColumnData(0, (List<?>) names.getObjectValue());    PropertyIterator iter = threadValues.iterator();    if (iter.hasNext()) {        tableModel.setColumnData(1, (List<?>) iter.next().getObjectValue());    }    int count = 2;    while (iter.hasNext()) {        String colName = getUserColName(count);        tableModel.addNewColumn(colName, String.class);        tableModel.setColumnData(count, (List<?>) iter.next().getObjectValue());        count++;    }    setColumnWidths();    perIterationCheck.setSelected(params.isPerIteration());    super.configure(el);}
0
public TestElement createTestElement()
{    UserParameters params = new UserParameters();    modifyTestElement(params);    return params;}
0
public void modifyTestElement(TestElement params)
{    GuiUtils.stopTableEditing(paramTable);    UserParameters userParams = (UserParameters) params;    userParams.setNames(new CollectionProperty(UserParameters.NAMES, tableModel.getColumnData(NAME_COL_RESOURCE)));    CollectionProperty threadLists = new CollectionProperty(UserParameters.THREAD_VALUES, new ArrayList<>());        for (int col = 1; col < tableModel.getColumnCount(); col++) {        threadLists.addItem(tableModel.getColumnData(getUserColName(col)));        if (log.isDebugEnabled()) {                                }    }    if (log.isDebugEnabled()) {            }    userParams.setThreadLists(threadLists);    userParams.setPerIteration(perIterationCheck.isSelected());    super.configureTestElement(params);}
1
public void clearGui()
{    super.clearGui();    initTableModel();    paramTable.setModel(tableModel);    HeaderAsPropertyRenderer defaultRenderer = new HeaderAsPropertyRenderer() {        private static final long serialVersionUID = 240L;        @Override        protected String getText(Object value, int row, int column) {            if (column >= 1) {                                String val = value.toString();                if (val.startsWith(USER_COL_RESOURCE + UNDERSCORE)) {                    return JMeterUtils.getResString(USER_COL_RESOURCE) + val.substring(val.indexOf(UNDERSCORE));                }            }            return super.getText(value, row, column);        }    };    paramTable.getTableHeader().setDefaultRenderer(defaultRenderer);    perIterationCheck.setSelected(false);}
0
protected String getText(Object value, int row, int column)
{    if (column >= 1) {                String val = value.toString();        if (val.startsWith(USER_COL_RESOURCE + UNDERSCORE)) {            return JMeterUtils.getResString(USER_COL_RESOURCE) + val.substring(val.indexOf(UNDERSCORE));        }    }    return super.getText(value, row, column);}
0
private String getUserColName(int user)
{    return USER_COL_RESOURCE + UNDERSCORE + user;}
0
private void init()
{        setBorder(makeBorder());    setLayout(new BorderLayout());    JPanel vertPanel = new VerticalPanel();    vertPanel.add(makeTitlePanel());        perIterationCheck = new JCheckBox(JMeterUtils.getResString("update_per_iter"), true);    Box perIterationPanel = Box.createHorizontalBox();    perIterationPanel.add(perIterationCheck);    perIterationPanel.add(Box.createHorizontalGlue());    vertPanel.add(perIterationPanel);    add(vertPanel, BorderLayout.NORTH);    add(makeParameterPanel(), BorderLayout.CENTER);}
0
private JPanel makeParameterPanel()
{        JLabel tableLabel = new JLabel(JMeterUtils.getResString("user_parameters_table"));    initTableModel();    paramTable = new JTable(tableModel);    paramTable.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);    paramTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);    JMeterUtils.applyHiDPI(paramTable);    paramPanel = new JPanel(new BorderLayout());    paramPanel.add(tableLabel, BorderLayout.NORTH);    JScrollPane scroll = new JScrollPane(paramTable);    scroll.setPreferredSize(scroll.getMinimumSize());    paramPanel.add(scroll, BorderLayout.CENTER);    paramPanel.add(makeButtonPanel(), BorderLayout.SOUTH);    return paramPanel;}
0
protected void initTableModel()
{    tableModel = new PowerTableModel(new String[] {     NAME_COL_RESOURCE, getUserColName(numUserColumns) }, new Class[] { String.class, String.class });}
0
private JPanel makeButtonPanel()
{    JPanel buttonPanel = new JPanel();    buttonPanel.setLayout(new GridLayout(2, 2));        addParameterButton = new JButton(JMeterUtils.getResString("add_parameter"));        addUserButton = new JButton(JMeterUtils.getResString("add_user"));        deleteRowButton = new JButton(JMeterUtils.getResString("delete_parameter"));        deleteColumnButton = new JButton(JMeterUtils.getResString("delete_user"));        moveRowUpButton = new JButton(JMeterUtils.getResString("up"));        moveRowDownButton = new JButton(JMeterUtils.getResString("down"));    buttonPanel.add(addParameterButton);    buttonPanel.add(deleteRowButton);    buttonPanel.add(moveRowUpButton);    buttonPanel.add(addUserButton);    buttonPanel.add(deleteColumnButton);    buttonPanel.add(moveRowDownButton);    addParameterButton.addActionListener(new AddParamAction());    addUserButton.addActionListener(new AddUserAction());    deleteRowButton.addActionListener(new DeleteRowAction());    deleteColumnButton.addActionListener(new DeleteColumnAction());    moveRowUpButton.addActionListener(new MoveRowUpAction());    moveRowDownButton.addActionListener(new MoveRowDownAction());    return buttonPanel;}
0
private void setColumnWidths()
{    int margin = 10;    int minwidth = 150;    JTableHeader tableHeader = paramTable.getTableHeader();    FontMetrics headerFontMetrics = tableHeader.getFontMetrics(tableHeader.getFont());    for (int i = 0; i < tableModel.getColumnCount(); i++) {        int headerWidth = headerFontMetrics.stringWidth(paramTable.getColumnName(i));        int maxWidth = getMaximalRequiredColumnWidth(i, headerWidth);        paramTable.getColumnModel().getColumn(i).setPreferredWidth(Math.max(maxWidth + margin, minwidth));    }}
0
private int getMaximalRequiredColumnWidth(int columnIndex, int headerWidth)
{    int maxWidth = headerWidth;    TableColumn column = paramTable.getColumnModel().getColumn(columnIndex);    TableCellRenderer cellRenderer = column.getCellRenderer();    if (cellRenderer == null) {        cellRenderer = new DefaultTableCellRenderer();    }    for (int row = 0; row < paramTable.getModel().getRowCount(); row++) {        Component rendererComponent = cellRenderer.getTableCellRendererComponent(paramTable, paramTable.getModel().getValueAt(row, columnIndex), false, false, row, columnIndex);        double valueWidth = rendererComponent.getPreferredSize().getWidth();        maxWidth = (int) Math.max(maxWidth, valueWidth);    }    return maxWidth;}
0
public void actionPerformed(ActionEvent e)
{    GuiUtils.stopTableEditing(paramTable);    tableModel.addNewRow();    tableModel.fireTableDataChanged();        deleteRowButton.setEnabled(true);        int rowToSelect = tableModel.getRowCount() - 1;    paramTable.setRowSelectionInterval(rowToSelect, rowToSelect);}
0
public void actionPerformed(ActionEvent e)
{    GuiUtils.stopTableEditing(paramTable);    tableModel.addNewColumn(getUserColName(tableModel.getColumnCount()), String.class);    tableModel.fireTableDataChanged();    setColumnWidths();        deleteColumnButton.setEnabled(true);        int colToSelect = tableModel.getColumnCount() - 1;    paramTable.setColumnSelectionInterval(colToSelect, colToSelect);}
0
public void actionPerformed(ActionEvent e)
{    GuiUtils.cancelEditing(paramTable);    int[] rowsSelected = paramTable.getSelectedRows();    if (rowsSelected.length > 0) {        for (int i = rowsSelected.length - 1; i >= 0; i--) {            tableModel.removeRow(rowsSelected[i]);        }        tableModel.fireTableDataChanged();                if (tableModel.getRowCount() == 0) {            deleteRowButton.setEnabled(false);        }    } else {        if (tableModel.getRowCount() > 0) {            tableModel.removeRow(0);            tableModel.fireTableDataChanged();        }    }}
0
public void actionPerformed(ActionEvent e)
{    GuiUtils.cancelEditing(paramTable);    int colSelected = paramTable.getSelectedColumn();    if (colSelected == 0 || colSelected == 1) {        JOptionPane.showMessageDialog(null,         JMeterUtils.getResString("column_delete_disallowed"), "Error", JOptionPane.ERROR_MESSAGE);        return;    }    if (colSelected >= 0) {        tableModel.removeColumn(colSelected);        tableModel.fireTableDataChanged();                if (tableModel.getColumnCount() == 0) {            deleteColumnButton.setEnabled(false);        } else                 {            if (colSelected >= tableModel.getColumnCount()) {                colSelected = colSelected - 1;            }            paramTable.setColumnSelectionInterval(colSelected, colSelected);        }        setColumnWidths();    }}
0
public void actionPerformed(ActionEvent e)
{    int[] rowsSelected = paramTable.getSelectedRows();    GuiUtils.stopTableEditing(paramTable);    if (rowsSelected.length > 0 && rowsSelected[0] > 0) {        for (int rowSelected : rowsSelected) {            tableModel.moveRow(rowSelected, rowSelected + 1, rowSelected - 1);        }        for (int rowSelected : rowsSelected) {            paramTable.addRowSelectionInterval(rowSelected - 1, rowSelected - 1);        }    }}
0
public void actionPerformed(ActionEvent e)
{    int[] rowsSelected = paramTable.getSelectedRows();    GuiUtils.stopTableEditing(paramTable);    if (rowsSelected.length > 0 && rowsSelected[rowsSelected.length - 1] < paramTable.getRowCount() - 1) {        for (int i = rowsSelected.length - 1; i >= 0; i--) {            int rowSelected = rowsSelected[i];            tableModel.moveRow(rowSelected, rowSelected + 1, rowSelected + 1);        }        for (int rowSelected : rowsSelected) {            paramTable.addRowSelectionInterval(rowSelected + 1, rowSelected + 1);        }    }}
0
public void process()
{    try {        ScriptEngine scriptEngine = getScriptEngine();        processFileOrScript(scriptEngine, null);    } catch (ScriptException | IOException e) {            }}
1
public Object clone()
{    return super.clone();}
0
private static ScheduledExecutorService getExecutorService()
{    return TPOOLHolder.EXEC_SERVICE;}
0
public void setTimeout(String timeout)
{    setProperty(TIMEOUT, timeout);}
0
public String getTimeout()
{    return getPropertyAsString(TIMEOUT);}
0
public void sampleStarting(Sampler sampler)
{    if (log.isDebugEnabled()) {            }    createTask(sampler);}
1
public void sampleEnded(final Sampler sampler)
{    if (log.isDebugEnabled()) {            }    cancelTask();}
1
private void createTask(final Sampler samp)
{        long timeout = getPropertyAsLong(TIMEOUT);    if (timeout <= 0) {        return;    }    if (!(samp instanceof Interruptible)) {                return;    }    final Interruptible sampler = (Interruptible) samp;    Callable<Object> call = () -> {        long start = System.nanoTime();        boolean interrupted = sampler.interrupt();        String elapsed = Double.toString((double) (System.nanoTime() - start) / 1000000000) + " secs";        if (interrupted) {            if (log.isWarnEnabled()) {                            }        } else {            if (log.isDebugEnabled()) {                            }        }        return null;    };        future = execService.schedule(call, timeout, TimeUnit.MILLISECONDS);    if (log.isDebugEnabled()) {            }}
1
public void threadStarted()
{    if (log.isDebugEnabled()) {            }}
1
public void threadFinished()
{    if (log.isDebugEnabled()) {            }        cancelTask();}
1
public String toString()
{        return JMeterUtils.getResString("sample_timeout_memo");}
0
private String whoAmI(String id, TestElement o)
{    return id + " @" + System.identityHashCode(o) + " '" + o.getName() + "' " + (log.isDebugEnabled() ? Thread.currentThread().getName() : "");}
0
private String getInfo(TestElement o)
{    return whoAmI(o.getClass().getSimpleName(), o);}
0
private void cancelTask()
{    if (future != null) {        if (!future.isDone()) {            boolean cancelled = future.cancel(false);            if (log.isDebugEnabled()) {                            }        }        future = null;    }}
1
private Object readResolve()
{        lock = new Object();    return this;}
0
public CollectionProperty getNames()
{    return (CollectionProperty) getProperty(NAMES);}
0
public CollectionProperty getThreadLists()
{    return (CollectionProperty) getProperty(THREAD_VALUES);}
0
public void setNames(Collection<?> list)
{    setProperty(new CollectionProperty(NAMES, list));}
0
public void setNames(CollectionProperty list)
{    setProperty(list);}
0
public void setThreadLists(Collection<?> threadLists)
{    setProperty(new CollectionProperty(THREAD_VALUES, threadLists));}
0
public void setThreadLists(CollectionProperty threadLists)
{    setProperty(threadLists);}
0
private CollectionProperty getValues()
{    CollectionProperty threadValues = (CollectionProperty) getProperty(THREAD_VALUES);    if (threadValues.size() > 0) {        return (CollectionProperty) threadValues.get(getThreadContext().getThreadNum() % threadValues.size());    }    return new CollectionProperty("noname", new LinkedList<>());}
0
public boolean isPerIteration()
{    return getPropertyAsBoolean(PER_ITERATION);}
0
public void setPerIteration(boolean perIter)
{    setProperty(new BooleanProperty(PER_ITERATION, perIter));}
0
public void process()
{    if (log.isDebugEnabled()) {                    }    if (!isPerIteration()) {        setValues();    }}
1
private void setValues()
{    synchronized (lock) {        if (log.isDebugEnabled()) {                                }        PropertyIterator namesIter = getNames().iterator();        PropertyIterator valueIter = getValues().iterator();        JMeterVariables jmvars = getThreadContext().getVariables();        while (namesIter.hasNext() && valueIter.hasNext()) {            String name = namesIter.next().getStringValue();            String value = valueIter.next().getStringValue();            if (log.isDebugEnabled()) {                                            }            jmvars.put(name, value);        }    }}
1
public void iterationStart(LoopIterationEvent event)
{    if (log.isDebugEnabled()) {                    }    if (isPerIteration()) {        setValues();    }}
1
public Object clone()
{    UserParameters up = (UserParameters) super.clone();        up.lock = lock;    return up;}
0
public void addChangeListener(ChangeListener list)
{    changeListener = list;}
0
public Object clone()
{    MailerModel m = (MailerModel) super.clone();    m.changeListener = changeListener;    return m;}
0
public void notifyChangeListeners()
{    if (changeListener != null) {        changeListener.stateChanged(new ChangeEvent(this));    }}
0
public List<String> getAddressList()
{    String addressees = getToAddress();    List<String> addressList = new ArrayList<>();    if (addressees != null) {                StringTokenizer next = new StringTokenizer(addressees, ",");        while (next.hasMoreTokens()) {            String theToken = next.nextToken().trim();            if (theToken.indexOf('@') > 0) {                                addressList.add(theToken);            } else {                            }        }    }    return addressList;}
1
public void add(SampleResult sample)
{    add(sample, false);}
0
public synchronized void add(SampleResult sample, boolean sendMails)
{        if (!sample.isSuccessful()) {        failureCount++;        successCount = 0;    } else {        successCount++;    }    if (sendMails && (failureCount > getFailureLimit()) && !siteDown && !failureMsgSent) {                List<String> addressList = getAddressList();        if (!addressList.isEmpty()) {            try {                sendMail(getFromAddress(), addressList, getFailureSubject(), "URL Failed: " + sample.getSampleLabel(), getSmtpHost(), getSmtpPort(), getLogin(), getPassword(), getMailAuthType(), false);            } catch (Exception e) {                            }            siteDown = true;            failureMsgSent = true;            successCount = 0;            successMsgSent = false;        }    }    if (sendMails && siteDown && (sample.getTime() != -1) && !successMsgSent && successCount > getSuccessLimit()) {        List<String> addressList = getAddressList();        try {            sendMail(getFromAddress(), addressList, getSuccessSubject(), "URL Restarted: " + sample.getSampleLabel(), getSmtpHost(), getSmtpPort(), getLogin(), getPassword(), getMailAuthType(), false);        } catch (Exception e) {                    }        siteDown = false;        successMsgSent = true;        failureCount = 0;        failureMsgSent = false;    }    if (successMsgSent && failureMsgSent) {        clear();    }    notifyChangeListeners();}
1
public synchronized void clear()
{    failureCount = 0;    successCount = 0;    siteDown = false;    successMsgSent = false;    failureMsgSent = false;    notifyChangeListeners();}
0
public String toString()
{    return "E-Mail Notification";}
0
public void sendMail(String from, List<String> vEmails, String subject, String attText, String smtpHost) throws MessagingException
{    sendMail(from, vEmails, subject, attText, smtpHost, DEFAULT_SMTP_PORT, null, null, null, false);}
0
public void sendMail(String from, List<String> vEmails, String subject, String attText, String smtpHost, String smtpPort, final String user, final String password, MailAuthType mailAuthType, boolean debug) throws MessagingException
{    InternetAddress[] address = new InternetAddress[vEmails.size()];    for (int k = 0; k < vEmails.size(); k++) {        address[k] = new InternetAddress(vEmails.get(k));    }        Properties props = new Properties();    props.put(MAIL_SMTP_HOST, smtpHost);        props.put(MAIL_SMTP_PORT, smtpPort);    Authenticator authenticator = null;    if (mailAuthType != MailAuthType.NONE) {        props.put(MAIL_SMTP_AUTH, "true");        switch(mailAuthType) {            case SSL:                props.put(MAIL_SMTP_SOCKETFACTORY_CLASS, "javax.net.ssl.SSLSocketFactory");                break;            case TLS:                props.put(MAIL_SMTP_STARTTLS, "true");                break;            default:                break;        }    }    if (!StringUtils.isEmpty(user)) {        authenticator = new javax.mail.Authenticator() {            @Override            protected PasswordAuthentication getPasswordAuthentication() {                return new PasswordAuthentication(user, password);            }        };    }    Session session = Session.getInstance(props, authenticator);    session.setDebug(debug);        Message msg = new MimeMessage(session);    msg.setFrom(new InternetAddress(from));    msg.setRecipients(Message.RecipientType.TO, address);    msg.setSubject(subject);    msg.setText(attText);    Transport.send(msg);}
0
protected PasswordAuthentication getPasswordAuthentication()
{    return new PasswordAuthentication(user, password);}
0
public synchronized void sendTestMail() throws MessagingException
{    String to = getToAddress();    String from = getFromAddress();    String subject = "Testing mail-addresses";    String smtpHost = getSmtpHost();    String attText = "JMeter-Testmail" + "\n" + "To:  " + to + "\n" + "From: " + from + "\n" + "Via:  " + smtpHost + "\n" + "Fail Subject:  " + getFailureSubject() + "\n" + "Success Subject:  " + getSuccessSubject();        sendMail(from, getAddressList(), subject, attText, smtpHost, getSmtpPort(), getLogin(), getPassword(), getMailAuthType(), true);    }
1
public void setToAddress(String str)
{    setProperty(TO_KEY, str);}
0
public void setFromAddress(String str)
{    setProperty(FROM_KEY, str);}
0
public void setSmtpHost(String str)
{    setProperty(HOST_KEY, str);}
0
public void setSmtpPort(String value)
{    if (StringUtils.isEmpty(value)) {        value = DEFAULT_SMTP_PORT;    }    setProperty(PORT_KEY, value, DEFAULT_SMTP_PORT);}
0
public void setLogin(String login)
{    setProperty(LOGIN, login, DEFAULT_LOGIN_VALUE);}
0
public void setPassword(String password)
{    setProperty(PASSWORD, password, DEFAULT_PASSWORD_VALUE);}
0
public void setMailAuthType(String value)
{    setProperty(MAIL_AUTH_TYPE, value, DEFAULT_MAIL_AUTH_TYPE_VALUE);}
0
public void setFailureSubject(String str)
{    setProperty(FAILURE_SUBJECT, str);}
0
public void setSuccessSubject(String str)
{    setProperty(SUCCESS_SUBJECT, str);}
0
public void setSuccessLimit(String limit)
{    setProperty(SUCCESS_LIMIT_KEY, limit);}
0
public void setFailureLimit(String limit)
{    setProperty(FAILURE_LIMIT_KEY, limit);}
0
public String getToAddress()
{    return getPropertyAsString(TO_KEY);}
0
public String getFromAddress()
{    return getPropertyAsString(FROM_KEY);}
0
public String getSmtpHost()
{    return getPropertyAsString(HOST_KEY);}
0
public String getSmtpPort()
{    return getPropertyAsString(PORT_KEY, DEFAULT_SMTP_PORT);}
0
public String getFailureSubject()
{    return getPropertyAsString(FAILURE_SUBJECT);}
0
public String getSuccessSubject()
{    return getPropertyAsString(SUCCESS_SUBJECT);}
0
public long getSuccessLimit()
{    return getPropertyAsLong(SUCCESS_LIMIT_KEY);}
0
public long getSuccessCount()
{    return successCount;}
0
public long getFailureLimit()
{    return getPropertyAsLong(FAILURE_LIMIT_KEY);}
0
public long getFailureCount()
{    return this.failureCount;}
0
public String getLogin()
{    return getPropertyAsString(LOGIN, DEFAULT_LOGIN_VALUE);}
0
public String getPassword()
{    return getPropertyAsString(PASSWORD, DEFAULT_PASSWORD_VALUE);}
0
public MailAuthType getMailAuthType()
{    String authType = getPropertyAsString(MAIL_AUTH_TYPE, DEFAULT_MAIL_AUTH_TYPE_VALUE);    return MailAuthType.valueOf(authType);}
0
public void clear()
{    super.clear();    setProperty(new TestElementProperty(MAILER_MODEL, new MailerModel()));}
0
public void sampleOccurred(SampleEvent e)
{        super.sampleOccurred(e);        getMailerModel().add(e.getResult(), true);}
0
public MailerModel getMailerModel()
{    return (MailerModel) getProperty(MAILER_MODEL).getObjectValue();}
0
public SampleResult sample(Entry e)
{    SampleResult res = new SampleResult();    res.setSampleLabel(getName());    res.sampleStart();    StringBuilder sb = new StringBuilder(100);        StringBuilder rd = new StringBuilder(20);    if (isDisplayJMeterVariables()) {        rd.append("JMeterVariables\n");        sb.append("JMeterVariables:\n");        formatSet(sb, JMeterContextService.getContext().getVariables().entrySet());        sb.append("\n");    }    if (isDisplayJMeterProperties()) {        rd.append("JMeterProperties\n");        sb.append("JMeterProperties:\n");        formatSet(sb, JMeterUtils.getJMeterProperties().entrySet());        sb.append("\n");    }    if (isDisplaySystemProperties()) {        rd.append("SystemProperties\n");        sb.append("SystemProperties:\n");        formatSet(sb, System.getProperties().entrySet());        sb.append("\n");    }    res.setResponseData(sb.toString(), null);    res.setDataType(SampleResult.TEXT);    res.setSamplerData(rd.toString());    res.setResponseOK();    res.sampleEnd();    return res;}
0
private void formatSet(StringBuilder sb, @SuppressWarnings("rawtypes") Set s)
{    @SuppressWarnings("unchecked")    List<Map.Entry<Object, Object>> al = new ArrayList<>(s);    al.sort((Map.Entry<Object, Object> o1, Map.Entry<Object, Object> o2) -> {        String m1 = (String) o1.getKey();        String m2 = (String) o2.getKey();        return m1.compareTo(m2);    });    al.forEach(me -> sb.append(me.getKey()).append("=").append(me.getValue()).append("\n"));}
0
public boolean isDisplayJMeterVariables()
{    return displayJMeterVariables;}
0
public void setDisplayJMeterVariables(boolean displayJMeterVariables)
{    this.displayJMeterVariables = displayJMeterVariables;}
0
public boolean isDisplayJMeterProperties()
{    return displayJMeterProperties;}
0
public void setDisplayJMeterProperties(boolean displayJMeterProperties)
{    this.displayJMeterProperties = displayJMeterProperties;}
0
public boolean isDisplaySystemProperties()
{    return displaySystemProperties;}
0
public void setDisplaySystemProperties(boolean displaySystemProperties)
{    this.displaySystemProperties = displaySystemProperties;}
0
public boolean applies(ConfigTestElement configElement)
{    String guiClass = configElement.getProperty(TestElement.GUI_CLASS).getStringValue();    return APPLIABLE_CONFIG_CLASSES.contains(guiClass);}
0
public String getLabelResource()
{        return "test_action_title";}
0
public void configure(TestElement element)
{    super.configure(element);    TestAction ta = (TestAction) element;    target = ta.getTarget();    if (target == TestAction.THREAD) {        targetBox.setSelectedItem(THREAD_TARGET_LABEL);    } else {        targetBox.setSelectedItem(TEST_TARGET_LABEL);    }    action = ta.getAction();    switch(action) {        case TestAction.PAUSE:            pauseButton.setSelected(true);            break;        case TestAction.STOP_NOW:            stopNowButton.setSelected(true);            break;        case TestAction.STOP:            stopButton.setSelected(true);            break;        case TestAction.RESTART_NEXT_LOOP:            restartNextThreadLoopButton.setSelected(true);            break;        case TestAction.START_NEXT_ITERATION_CURRENT_LOOP:            startNextIterationOfCurrentLoopButton.setSelected(true);            break;        case TestAction.BREAK_CURRENT_LOOP:            breakLoopButton.setSelected(true);            break;        default:            break;    }    durationField.setText(ta.getDurationAsString());}
0
public TestElement createTestElement()
{    TestAction ta = new TestAction();    modifyTestElement(ta);    return ta;}
0
public void modifyTestElement(TestElement element)
{    super.configureTestElement(element);    TestAction ta = (TestAction) element;    ta.setAction(action);    ta.setTarget(target);    ta.setDuration(durationField.getText());}
0
public void clearGui()
{    super.clearGui();    targetBox.setSelectedIndex(0);        durationField.setText("0");    pauseButton.setSelected(true);    action = TestAction.PAUSE;    target = TestAction.THREAD;}
0
private void init()
{        setLayout(new VerticalLayout(5, VerticalLayout.BOTH, VerticalLayout.TOP));    setBorder(makeBorder());    add(makeTitlePanel());    ButtonGroup actionButtons = new ButtonGroup();    pauseButton = new JRadioButton(PAUSE_ACTION_LABEL, true);    pauseButton.addChangeListener(evt -> {        if (pauseButton.isSelected()) {            action = TestAction.PAUSE;            durationField.setEnabled(true);            targetBox.setEnabled(false);        }    });    stopButton = new JRadioButton(STOP_ACTION_LABEL, false);    stopButton.addChangeListener(evt -> {        if (stopButton.isSelected()) {            action = TestAction.STOP;            durationField.setEnabled(false);            targetBox.setEnabled(true);        }    });    stopNowButton = new JRadioButton(STOP_NOW_ACTION_LABEL, false);    stopNowButton.addChangeListener(evt -> {        if (stopNowButton.isSelected()) {            action = TestAction.STOP_NOW;            durationField.setEnabled(false);            targetBox.setEnabled(true);        }    });    restartNextThreadLoopButton = new JRadioButton(RESTART_NEXT_THREAD_LOOP_LABEL, false);    restartNextThreadLoopButton.addChangeListener(evt -> {        if (restartNextThreadLoopButton.isSelected()) {            action = TestAction.RESTART_NEXT_LOOP;            durationField.setEnabled(false);            targetBox.setSelectedIndex(TestAction.THREAD);            targetBox.setEnabled(false);        }    });    startNextIterationOfCurrentLoopButton = new JRadioButton(START_NEXT_ITERATION_CURRENT_LOOP_ACTION, false);    startNextIterationOfCurrentLoopButton.addChangeListener(evt -> {        if (startNextIterationOfCurrentLoopButton.isSelected()) {            action = TestAction.START_NEXT_ITERATION_CURRENT_LOOP;            durationField.setEnabled(false);            targetBox.setSelectedIndex(TestAction.THREAD);            targetBox.setEnabled(false);        }    });    breakLoopButton = new JRadioButton(BREAK_CURRENT_LOOP_ACTION, false);    breakLoopButton.addChangeListener(evt -> {        if (breakLoopButton.isSelected()) {            action = TestAction.BREAK_CURRENT_LOOP;            durationField.setEnabled(false);            targetBox.setSelectedIndex(TestAction.THREAD);            targetBox.setEnabled(false);        }    });        durationField = new JLabeledTextField(DURATION_LABEL, 15);        durationField.setText("");    actionButtons.add(pauseButton);    actionButtons.add(stopButton);    actionButtons.add(stopNowButton);    actionButtons.add(restartNextThreadLoopButton);    actionButtons.add(startNextIterationOfCurrentLoopButton);    actionButtons.add(breakLoopButton);        JPanel actionOnThreadPanel = new JPanel(new GridLayout(3, 2));        actionOnThreadPanel.setBorder(BorderFactory.createTitledBorder(ACTION_ON_THREAD_LABEL));    actionOnThreadPanel.add(pauseButton);    actionOnThreadPanel.add(durationField);    actionOnThreadPanel.add(restartNextThreadLoopButton);    actionOnThreadPanel.add(startNextIterationOfCurrentLoopButton);    actionOnThreadPanel.add(breakLoopButton);        JPanel actionOnTestOrThreadPanel = new JPanel(new GridLayout(2, 2));        actionOnTestOrThreadPanel.setBorder(BorderFactory.createTitledBorder(ACTION_ON_THREAD_TEST_LABEL));    actionOnTestOrThreadPanel.add(stopButton);    actionOnTestOrThreadPanel.add(stopNowButton);    actionOnTestOrThreadPanel.add(new JLabel(TARGET_LABEL));    DefaultComboBoxModel<String> targetModel = new DefaultComboBoxModel<>();    targetModel.addElement(THREAD_TARGET_LABEL);    targetModel.addElement(TEST_TARGET_LABEL);    targetBox = new JComboBox<>(targetModel);    targetBox.addActionListener(evt -> {        if (((String) targetBox.getSelectedItem()).equals(THREAD_TARGET_LABEL)) {            target = TestAction.THREAD;        } else {            target = TestAction.TEST;        }    });    actionOnTestOrThreadPanel.add(targetBox);    add(actionOnThreadPanel);    add(actionOnTestOrThreadPanel);}
0
public SampleResult sample(Entry e)
{    JMeterContext context = JMeterContextService.getContext();    int target = getTarget();    int action = getAction();    if (action == PAUSE) {        pause(getDurationAsString());    } else if (action == STOP || action == STOP_NOW) {        if (target == THREAD) {            if (log.isInfoEnabled()) {                            }            context.getThread().stop();        } else if (target == TEST) {            if (action == STOP_NOW) {                if (log.isInfoEnabled()) {                                    }                context.getThread().stop();                if (log.isInfoEnabled()) {                                    }                context.getEngine().stopTest();            } else {                if (log.isInfoEnabled()) {                                    }                context.getThread().stop();                if (log.isInfoEnabled()) {                                    }                context.getEngine().askThreadsToStop();            }        }    } else if (action == RESTART_NEXT_LOOP) {                context.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD);    } else if (action == START_NEXT_ITERATION_CURRENT_LOOP) {                context.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP);    } else if (action == BREAK_CURRENT_LOOP) {                context.setTestLogicalAction(TestLogicalAction.BREAK_CURRENT_LOOP);    }        return null;}
1
private void pause(String timeInMillis)
{    long millis;    try {        if (!StringUtils.isEmpty(timeInMillis)) {            millis = Long.parseLong(timeInMillis);        } else {                        millis = 0L;        }    } catch (NumberFormatException e) {                millis = 0L;    }    try {        pauseThread = Thread.currentThread();        if (millis > 0) {            long adjustDelay = TIMER_SERVICE.adjustDelay(millis);            if (log.isDebugEnabled()) {                            }            TimeUnit.MILLISECONDS.sleep(adjustDelay);        } else if (millis < 0) {            throw new IllegalArgumentException("Configured sleep is negative:" + millis);        }        } catch (InterruptedException e) {                Thread.currentThread().interrupt();    } finally {        pauseThread = null;    }}
1
public void setTarget(int target)
{    setProperty(new IntegerProperty(TARGET, target));}
0
public int getTarget()
{    return getPropertyAsInt(TARGET);}
0
public void setAction(int action)
{    setProperty(new IntegerProperty(ACTION, action));}
0
public int getAction()
{    return getPropertyAsInt(ACTION);}
0
public void setDuration(String duration)
{    setProperty(new StringProperty(DURATION, duration));}
0
public String getDurationAsString()
{    return getPropertyAsString(DURATION);}
0
public boolean applies(ConfigTestElement configElement)
{    String guiClass = configElement.getProperty(TestElement.GUI_CLASS).getStringValue();    return APPLIABLE_CONFIG_CLASSES.contains(guiClass);}
0
public boolean interrupt()
{        Thread thrd = pauseThread;    if (thrd != null) {        thrd.interrupt();        return true;    }    return false;}
0
public JMeterTreeNode[] createThinkTime(GuiPackage guiPackage, JMeterTreeNode parentNode) throws IllegalUserActionException
{    TestAction testAction = (TestAction) guiPackage.createTestElement(TestActionGui.class.getName());    testAction.setAction(TestAction.PAUSE);    testAction.setDuration("0");    JMeterTreeNode thinkTimeNode = new JMeterTreeNode(testAction, guiPackage.getTreeModel());    thinkTimeNode.setName("Think Time");    RandomTimer randomTimer = (RandomTimer) guiPackage.createTestElement(DEFAULT_TIMER_IMPLEMENTATION);    randomTimer.setDelay(DEFAULT_PAUSE);    randomTimer.setRange(DEFAULT_RANGE);    randomTimer.setName("Pause");    JMeterTreeNode urtNode = new JMeterTreeNode(randomTimer, guiPackage.getTreeModel());    return new JMeterTreeNode[] { thinkTimeNode, urtNode };}
0
protected String getInitFileProperty()
{    return INIT_FILE;}
0
public long delay()
{    String ret = "0";    final BeanShellInterpreter bshInterpreter = getBeanShellInterpreter();    if (bshInterpreter == null) {                return 0;    }    try {        Object o = processFileOrScript(bshInterpreter);        if (o != null) {            ret = o.toString();        }    } catch (JMeterException e) {        if (log.isWarnEnabled()) {                    }    }    try {        return Long.decode(ret).longValue();    } catch (NumberFormatException e) {                return 0;    }}
1
public Object clone()
{    return super.clone();}
0
public long delay()
{    long delay = 0;    BSFManager mgr = null;    try {        mgr = getManager();        Object o = evalFileOrScript(mgr);        if (o == null) {                        return 0;        }        delay = Long.parseLong(o.toString());    } catch (NumberFormatException | BSFException e) {        if (log.isWarnEnabled()) {                    }    } finally {        if (mgr != null) {            mgr.terminate();        }    }    return delay;}
1
public Object clone()
{    return super.clone();}
0
public String toString()
{    return propertyName;}
0
public void setThroughput(double throughput)
{    this.throughput = throughput;}
0
public double getThroughput()
{    return throughput;}
0
public int getCalcMode()
{    return mode.ordinal();}
0
public void setCalcMode(int mode)
{    this.mode = Mode.values()[mode];}
0
public long delay()
{    long currentTime = System.currentTimeMillis();    /*         * If previous time is zero, then target will be in the past.         * This is what we want, so first sample is run without a delay.        */    long currentTarget = previousTime + calculateDelay();    if (currentTime > currentTarget) {                        previousTime = currentTime;        return 0;    }        previousTime = currentTarget;    return currentTarget - currentTime;}
0
protected long calculateCurrentTarget(long currentTime)
{    return currentTime + calculateDelay();}
0
private long calculateDelay()
{    long delay;        double msPerRequest = MILLISEC_PER_MIN / getThroughput();    switch(mode) {        case         AllActiveThreads:            delay = Math.round(JMeterContextService.getNumberOfThreads() * msPerRequest);            break;        case         AllActiveThreadsInCurrentThreadGroup:            delay = Math.round(JMeterContextService.getContext().getThreadGroup().getNumberOfThreads() * msPerRequest);            break;        case         AllActiveThreads_Shared:            delay = calculateSharedDelay(allThreadsInfo, Math.round(msPerRequest));            break;        case         AllActiveThreadsInCurrentThreadGroup_Shared:            final org.apache.jmeter.threads.AbstractThreadGroup group = JMeterContextService.getContext().getThreadGroup();            ThroughputInfo groupInfo = threadGroupsInfoMap.get(group);            if (groupInfo == null) {                groupInfo = new ThroughputInfo();                ThroughputInfo previous = threadGroupsInfoMap.putIfAbsent(group, groupInfo);                if (previous != null) {                                                            groupInfo = previous;                }            }            delay = calculateSharedDelay(groupInfo, Math.round(msPerRequest));            break;        case ThisThreadOnly:        default:                                    delay = Math.round(msPerRequest);            break;    }    return delay;}
0
private long calculateSharedDelay(ThroughputInfo info, long milliSecPerRequest)
{    final long now = System.currentTimeMillis();    final long calculatedDelay;        synchronized (info.MUTEX) {        final long nextRequestTime = info.lastScheduledTime + milliSecPerRequest;        info.lastScheduledTime = Math.max(now, nextRequestTime);        calculatedDelay = info.lastScheduledTime - now;    }    return Math.max(calculatedDelay, 0);}
0
private void reset()
{    synchronized (allThreadsInfo.MUTEX) {        allThreadsInfo.lastScheduledTime = 0;    }    threadGroupsInfoMap.clear();        previousTime = 0;}
0
public String toString()
{        return JMeterUtils.getResString("constant_throughput_timer_memo");}
0
public void testStarted()
{        reset();}
1
public void setProperty(JMeterProperty property)
{    if (property instanceof StringProperty) {        final String pn = property.getName();        if (pn.equals("calcMode")) {            final Object objectValue = property.getObjectValue();            try {                final BeanInfo beanInfo = Introspector.getBeanInfo(this.getClass());                final ResourceBundle rb = (ResourceBundle) beanInfo.getBeanDescriptor().getValue(GenericTestBeanCustomizer.RESOURCE_BUNDLE);                for (Enum<Mode> e : Mode.values()) {                    final String propName = e.toString();                    if (objectValue.equals(rb.getObject(propName))) {                        final int tmpMode = e.ordinal();                                                super.setProperty(pn, tmpMode);                        return;                    }                }                            } catch (IntrospectionException e) {                            }        }    }    super.setProperty(property);}
1
public void testEnded()
{}
0
public void testStarted(String host)
{    testStarted();}
0
public void testEnded(String host)
{}
0
 Mode getMode()
{    return mode;}
0
 void setMode(Mode newMode)
{    mode = newMode;}
0
public void setDelay(String delay)
{    setProperty(DELAY, delay);}
0
public void setRange(double range)
{}
0
public String getDelay()
{    return getPropertyAsString(DELAY);}
0
public double getRange()
{    return 0;}
0
public long delay()
{    return delay;}
0
public String toString()
{        return JMeterUtils.getResString("constant_timer_memo");}
0
public void iterationStart(LoopIterationEvent event)
{    delay = getPropertyAsLong(DELAY);}
0
public long delay()
{    return (long) Math.abs((getRandom().nextGaussian() * getRange()) + super.delay());}
0
public String toString()
{        return JMeterUtils.getResString("gaussian_timer_memo");}
0
public static void error(Exception e, JComponent thrower)
{    JOptionPane.showMessageDialog(thrower, e, "Error", JOptionPane.ERROR_MESSAGE);}
0
public TestElement createTestElement()
{    RandomTimer timer = createRandomTimer();    modifyTestElement(timer);    return timer;}
0
public void modifyTestElement(TestElement timer)
{    super.configureTestElement(timer);    ((RandomTimer) timer).setDelay(delayField.getText());    ((RandomTimer) timer).setRange(rangeField.getText());}
0
public void configure(TestElement el)
{    super.configure(el);    delayField.setText(el.getPropertyAsString(ConstantTimer.DELAY));    rangeField.setText(el.getPropertyAsString(RandomTimer.RANGE));}
0
private void init()
{        setLayout(new VerticalLayout(5, VerticalLayout.BOTH));    setBorder(makeBorder());    add(makeTitlePanel());    JPanel threadDelayPropsPanel = new JPanel();    threadDelayPropsPanel.setLayout(new VerticalLayout(5, VerticalLayout.LEFT));    threadDelayPropsPanel.setBorder(BorderFactory.createTitledBorder(    JMeterUtils.getResString("thread_delay_properties")));        Box delayDevPanel = Box.createHorizontalBox();        delayDevPanel.add(new JLabel(getTimerRangeLabelKey()));    delayDevPanel.add(Box.createHorizontalStrut(5));    rangeField = new JTextField(20);    rangeField.setText(getDefaultRange());    rangeField.setName(RANGE_FIELD);    delayDevPanel.add(rangeField);    threadDelayPropsPanel.add(delayDevPanel);        Box avgDelayPanel = Box.createHorizontalBox();        avgDelayPanel.add(new JLabel(getTimerDelayLabelKey()));    avgDelayPanel.add(Box.createHorizontalStrut(5));    delayField = new JTextField(20);    delayField.setText(getDefaultDelay());    delayField.setName(DELAY_FIELD);    avgDelayPanel.add(delayField);    threadDelayPropsPanel.add(avgDelayPanel);    threadDelayPropsPanel.setMaximumSize(new Dimension(threadDelayPropsPanel.getMaximumSize().width, threadDelayPropsPanel.getPreferredSize().height));    add(threadDelayPropsPanel);}
0
public void clearGui()
{    rangeField.setText(getDefaultRange());    delayField.setText(getDefaultDelay());    super.clearGui();}
0
public static void error(Exception e, JComponent thrower)
{    JOptionPane.showMessageDialog(thrower, e, "Error", JOptionPane.ERROR_MESSAGE);}
0
public String getLabelResource()
{        return "constant_timer_title";}
0
public TestElement createTestElement()
{    ConstantTimer timer = new ConstantTimer();    modifyTestElement(timer);    return timer;}
0
public void modifyTestElement(TestElement timer)
{    super.configureTestElement(timer);    ((ConstantTimer) timer).setDelay(delayField.getText());}
0
public void configure(TestElement el)
{    super.configure(el);    delayField.setText(((ConstantTimer) el).getDelay());}
0
private void init()
{        setLayout(new VerticalLayout(5, VerticalLayout.BOTH, VerticalLayout.TOP));    setBorder(makeBorder());    add(makeTitlePanel());    Box delayPanel = Box.createHorizontalBox();        JLabel delayLabel = new JLabel(JMeterUtils.getResString("constant_timer_delay"));    delayPanel.add(delayLabel);    delayField = new JTextField(6);    delayField.setText(DEFAULT_DELAY);    delayField.setName(DELAY_FIELD);    delayPanel.add(delayField);    add(delayPanel);}
0
public void clearGui()
{    delayField.setText(DEFAULT_DELAY);    super.clearGui();}
0
public String getLabelResource()
{        return "gaussian_timer_title";}
0
protected RandomTimer createRandomTimer()
{    return new GaussianRandomTimer();}
0
protected String getTimerDelayLabelKey()
{        return JMeterUtils.getResString("gaussian_timer_delay");}
0
protected String getTimerRangeLabelKey()
{        return JMeterUtils.getResString("gaussian_timer_range");}
0
protected String getDefaultDelay()
{    return DEFAULT_DELAY;}
0
protected String getDefaultRange()
{    return DEFAULT_RANGE;}
0
public String getLabelResource()
{        return "poisson_timer_title";}
0
protected RandomTimer createRandomTimer()
{    return new PoissonRandomTimer();}
0
protected String getTimerDelayLabelKey()
{        return JMeterUtils.getResString("poisson_timer_delay");}
0
protected String getTimerRangeLabelKey()
{        return JMeterUtils.getResString("poisson_timer_range");}
0
protected String getDefaultDelay()
{    return DEFAULT_DELAY;}
0
protected String getDefaultRange()
{    return DEFAULT_RANGE;}
0
public String getLabelResource()
{        return "uniform_timer_title";}
0
protected RandomTimer createRandomTimer()
{    return new UniformRandomTimer();}
0
protected String getTimerDelayLabelKey()
{        return JMeterUtils.getResString("uniform_timer_delay");}
0
protected String getTimerRangeLabelKey()
{        return JMeterUtils.getResString("uniform_timer_range");}
0
protected String getDefaultDelay()
{    return DEFAULT_DELAY;}
0
protected String getDefaultRange()
{    return DEFAULT_RANGE;}
0
public long delay()
{    long delay = 0;    try {        ScriptEngine scriptEngine = getScriptEngine();        Object o = processFileOrScript(scriptEngine, null);        if (o == null) {                        return 0;        }        delay = Long.parseLong(o.toString());    } catch (NumberFormatException | IOException | ScriptException e) {            }    return delay;}
1
public Object clone()
{    return super.clone();}
0
private void ensureCapacity()
{    int size = (int) Math.round((throughputProvider.getThroughput() * durationProvider.getDuration() + 1) * 3);    if (events != null && events.capacity() >= size) {        return;    }    events = DoubleBuffer.allocate(size);}
0
public void generateNext()
{    double throughput = this.throughputProvider.getThroughput();    lastThroughput = throughput;    if (batchSize > 1) {        throughput /= batchSize;    }    long duration = this.durationProvider.getDuration();    ensureCapacity();    int samples = (int) Math.ceil(throughput * duration);    double time;    int i = 0;    long t = System.currentTimeMillis();    int loops = 0;    double currentAllowedThroughputSurplus = samples < exactLimit ? 0.0d : this.allowedThroughputSurplus / 100;    do {        time = 0;        events.clear();        if (throughput < 1e-5) {                        break;        }        if (duration < 5) {                        break;        }        i = 0;        while (time < duration) {            double u = rnd.nextDouble();                        double delay = -Math.log(1 - u) / throughput;            time += delay;            events.put(time + lastEvent);            i++;        }        loops++;    } while (System.currentTimeMillis() - t < 5000 && (    i < samples + 1 || (i - 1 - samples) * 1.0f / samples > currentAllowedThroughputSurplus));    t = System.currentTimeMillis() - t;    if (t > 1000) {            }    if (logFirstSamples) {        if (log.isDebugEnabled()) {                    }        if (log.isInfoEnabled()) {            StringBuilder sb = new StringBuilder();            sb.append("Generated ").append(events.position()).append(" timings (");            if (this.durationProvider instanceof AbstractTestElement) {                sb.append(((AbstractTestElement) this.durationProvider).getName());            }            sb.append(" ").append(samples).append(" required, rate ").append(throughput).append(", duration ").append(duration).append(", exact lim ").append(exactLimit).append(", i").append(i).append(") in ").append(t).append(" ms, restart was issued ").append(loops).append(" times. ");            sb.append("First 15 events will be fired at: ");            double prev = 0;            for (i = 0; i < events.position() && i < 15; i++) {                if (i > 0) {                    sb.append(", ");                }                double ev = events.get(i);                sb.append(ev);                sb.append(" (+").append(ev - prev).append(")");                prev = ev;            }                    }    }    events.flip();    if (batchSize > 1) {                        DoubleBuffer tmpBuffer = DoubleBuffer.allocate(batchSize * events.remaining());        while (events.hasRemaining()) {            double curTime = events.get();            for (int j = 0; j < batchSize; j++) {                tmpBuffer.put(curTime + j * batchThreadDelay);            }        }        tmpBuffer.flip();        events = tmpBuffer;    }}
1
public double next()
{    if (!events.hasRemaining() || !valuesAreEqualWithPrecision(throughputProvider.getThroughput(), lastThroughput)) {        generateNext();    }    lastEvent = events.get();    return lastEvent;}
0
private boolean valuesAreEqualWithPrecision(double throughput, double lastThroughput)
{    return Math.abs(throughput - lastThroughput) < PRECISION;}
0
public Object clone()
{    final PreciseThroughputTimer newTimer = (PreciseThroughputTimer) super.clone();        newTimer.testStarted = testStarted;    return newTimer;}
0
public void testStarted()
{    testStarted(null);}
0
public void testStarted(String host)
{    groupEvents.clear();    testStarted = System.currentTimeMillis();}
0
public void testEnded()
{}
0
public void testEnded(String s)
{}
0
public long delay()
{    double nextEvent;    EventProducer events = getEventProducer();    synchronized (events) {        nextEvent = events.next();    }    long delay = (long) (nextEvent * TimeUnit.SECONDS.toMillis(1) + testStarted - System.currentTimeMillis());    if (log.isDebugEnabled()) {            }    delay = Math.max(0, delay);    long endTime = getThreadContext().getThread().getEndTime();    if (endTime > 0 && System.currentTimeMillis() + delay > endTime) {        throw new JMeterStopThreadException("The thread is scheduled to stop in " + (System.currentTimeMillis() - endTime) + " ms" + " and the throughput timer generates a delay of " + delay + "." + " JMeter (as of 4.0) does not support interrupting of sleeping threads, thus terminating the thread manually.");    }    return delay;}
1
private EventProducer getEventProducer()
{    AbstractThreadGroup tg = getThreadContext().getThreadGroup();    Long seed = randomSeed == null || randomSeed == 0 ? null : randomSeed;    return groupEvents.computeIfAbsent(tg, x -> new ConstantPoissonProcessGenerator(() -> PreciseThroughputTimer.this.getThroughput() / throughputPeriod, batchSize, batchThreadDelay, this, exactLimit, allowedThroughputSurplus, seed, true));}
0
public double getThroughput()
{    return throughput;}
0
public void setThroughput(double throughput)
{    this.throughput = throughput;}
0
public int getThroughputPeriod()
{    return throughputPeriod;}
0
public void setThroughputPeriod(int throughputPeriod)
{    this.throughputPeriod = throughputPeriod;}
0
public long getDuration()
{    return duration;}
0
public void setDuration(long duration)
{    this.duration = duration;}
0
public int getExactLimit()
{    return exactLimit;}
0
public void setExactLimit(int exactLimit)
{    this.exactLimit = exactLimit;}
0
public double getAllowedThroughputSurplus()
{    return allowedThroughputSurplus;}
0
public void setAllowedThroughputSurplus(double allowedThroughputSurplus)
{    this.allowedThroughputSurplus = allowedThroughputSurplus;}
0
public Long getRandomSeed()
{    return randomSeed;}
0
public void setRandomSeed(Long randomSeed)
{    this.randomSeed = randomSeed;}
0
public int getBatchSize()
{    return batchSize;}
0
public void setBatchSize(int batchSize)
{    this.batchSize = batchSize;}
0
public int getBatchThreadDelay()
{    return batchThreadDelay;}
0
public void setBatchThreadDelay(int batchThreadDelay)
{    this.batchThreadDelay = batchThreadDelay;}
0
public long delay()
{    return Math.abs(randomPoisson((int) Math.round(getRange())) + super.delay());}
0
public String toString()
{        return JMeterUtils.getResString("poisson_timer_memo");}
0
private static int randomPoisson(int lambda)
{    if (lambda <= 30) {        return poissonRandomNumberLowEq30(lambda);    } else {        return poissonRandomNumberSup30(lambda);    }}
0
private static int poissonRandomNumberLowEq30(int lambda)
{    double L = Math.exp(-lambda);    int k = 0;    double p = 1;    do {        k = k + 1;        double u = ThreadLocalRandom.current().nextDouble();        p = p * u;    } while (p > L);    return k - 1;}
0
private static int poissonRandomNumberSup30(int lambda)
{    double c = 0.767 - 3.36 / lambda;    double beta = Math.PI / Math.sqrt(3.0 * lambda);    double alpha = beta * lambda;    double k = Math.log(c) - lambda - Math.log(beta);    while (true) {        double u = Math.random();        double x = (alpha - Math.log((1.0 - u) / u)) / beta;        int n = (int) Math.floor(x + 0.5);        if (n < 0) {            continue;        }        double v = ThreadLocalRandom.current().nextDouble();        double y = alpha - beta * x;        double lhs = y + Math.log(v / Math.pow(1.0 + Math.exp(y), 2));        double rhs = k + n * Math.log(lambda) - logFactorial(n);        if (lhs <= rhs) {            return n;        }    }}
0
private static double logFactorial(int n)
{    if (n < 0) {        throw new IllegalArgumentException();    } else if (n > 254) {        double x = n + 1d;        return (x - 0.5) * Math.log(x) - x + 0.5 * Math.log(2 * Math.PI) + 1.0 / (12.0 * x);    } else {        return LOG_FACTORIAL[n];    }}
0
public void setRange(double range)
{    setProperty(new DoubleProperty(RANGE, range));}
0
public void setRange(String range)
{    setProperty(new StringProperty(RANGE, range));}
0
public double getRange()
{    return this.getPropertyAsDouble(RANGE);}
0
protected Random getRandom()
{    return ThreadLocalRandom.current();}
0
public synchronized void setup(int parties)
{    if (this.barrier == null) {        this.barrier = new CyclicBarrier(parties);    }}
0
public int await() throws InterruptedException, BrokenBarrierException
{    return barrier.await();}
0
public int await(long timeout, TimeUnit timeUnit) throws InterruptedException, BrokenBarrierException, TimeoutException
{    return barrier.await(timeout, timeUnit);}
0
public void reset()
{    barrier.reset();}
0
protected Object clone()
{    BarrierWrapper barrierWrapper = null;    try {        barrierWrapper = (BarrierWrapper) super.clone();        barrierWrapper.barrier = this.barrier;    } catch (CloneNotSupportedException e) {        }    return barrierWrapper;}
0
private Object readResolve()
{    createBarrier();    return this;}
0
public int getGroupSize()
{    return groupSize;}
0
public void setGroupSize(int numThreads)
{    this.groupSize = numThreads;}
0
public long delay()
{    if (getGroupSize() >= 0) {        int arrival = 0;        try {            if (timeoutInMs == 0) {                arrival = this.barrier.await(TimerService.getInstance().adjustDelay(Long.MAX_VALUE), TimeUnit.MILLISECONDS);            } else if (timeoutInMs > 0) {                arrival = this.barrier.await(TimerService.getInstance().adjustDelay(timeoutInMs), TimeUnit.MILLISECONDS);            } else {                throw new IllegalArgumentException("Negative value for timeout:" + timeoutInMs + " in Synchronizing Timer " + getName());            }        } catch (InterruptedException e) {            Thread.currentThread().interrupt();            return 0;        } catch (BrokenBarrierException e) {            return 0;        } catch (TimeoutException e) {            if (log.isWarnEnabled()) {                            }            return 0;        } finally {            if (arrival == 0) {                barrier.reset();            }        }    }    return 0;}
1
public Object clone()
{    SyncTimer newTimer = (SyncTimer) super.clone();    newTimer.barrier = barrier;    return newTimer;}
0
public void testEnded()
{    this.testEnded(null);}
0
public void testEnded(String host)
{    createBarrier();}
0
public void testStarted()
{    testStarted(null);}
0
public void testStarted(String host)
{    createBarrier();}
0
private void createBarrier()
{    if (getGroupSize() == 0) {                this.barrier = new BarrierWrapper();    } else {        this.barrier = new BarrierWrapper(getGroupSize());    }}
0
public void threadStarted()
{    if (getGroupSize() == 0) {        int numThreadsInGroup = JMeterContextService.getContext().getThreadGroup().getNumThreads();                this.barrier.setup(numThreadsInGroup);    }}
0
public void threadFinished()
{}
0
public long getTimeoutInMs()
{    return timeoutInMs;}
0
public void setTimeoutInMs(long timeoutInMs)
{    this.timeoutInMs = timeoutInMs;}
0
public long delay()
{    return (long) Math.abs((getRandom().nextDouble() * getRange()) + super.delay());}
0
public String toString()
{        return JMeterUtils.getResString("uniform_timer_memo");}
0
protected Object addNodeToTree(Object node)
{    Object clonedNode = super.addNodeToTree(node);    if (VALIDATION_TPC_FORCE_100_PERCENT && clonedNode instanceof ThroughputController) {        ThroughputController tc = (ThroughputController) clonedNode;        if (tc.getStyle() == ThroughputController.BYPERCENT) {            tc.setPercentThroughput(100);        }    }    return clonedNode;}
0
public String getLabelResource()
{        return "assertion_visualizer_title";}
0
public void add(SampleResult sample)
{    final StringBuilder sb = new StringBuilder(100);    sb.append(sample.getSampleLabel());    sb.append(getAssertionResult(sample));        sb.append("\n");    JMeterUtils.runSafe(false, () -> {        synchronized (textArea) {            textArea.append(sb.toString());            textArea.setCaretPosition(textArea.getText().length());        }    });}
0
public void clearData()
{        textArea.setText("");}
0
private String getAssertionResult(SampleResult res)
{    if (res != null) {        StringBuilder display = new StringBuilder();        AssertionResult[] assertionResults = res.getAssertionResults();        for (AssertionResult item : assertionResults) {            if (item.isFailure() || item.isError()) {                                display.append("\n\t");                                display.append(item.getName() != null ? item.getName() + " : " : "");                display.append(item.getFailureMessage());            }        }        return display.toString();    }    return "";}
0
private void init()
{        this.setLayout(new BorderLayout());        Border margin = new EmptyBorder(10, 10, 5, 10);    this.setBorder(margin);        this.add(makeTitlePanel(), BorderLayout.NORTH);        JLabel textAreaLabel =     new JLabel(JMeterUtils.getResString("assertion_textarea_label"));    textAreaLabel.setLabelFor(textArea);    Box mainPanel = Box.createVerticalBox();    mainPanel.add(textAreaLabel);        textArea = new JTextArea();    textArea.setEditable(false);    textArea.setLineWrap(false);    JScrollPane areaScrollPane = new JScrollPane(textArea);    areaScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);    areaScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);    areaScrollPane.setPreferredSize(new Dimension(mainPanel.getWidth(), mainPanel.getHeight()));    mainPanel.add(areaScrollPane);    this.add(mainPanel, BorderLayout.CENTER);}
0
public void setData(double[][] data)
{    this.data = data;}
0
public void setTitle(String title)
{    this.title = title;}
0
public void setMaxLength(int maxLength)
{    this.maxLength = maxLength;}
0
public void setXAxisTitle(String title)
{    this.xAxisTitle = title;}
0
public void setYAxisTitle(String title)
{    this.yAxisTitle = title;}
0
public void setXAxisLabels(String[] labels)
{    this.xAxisLabels = labels;}
0
public void setYAxisLabels(String label)
{    this.yAxisLabel = label;}
0
public void setLegendLabels(String[] labels)
{    this.legendLabels = labels;}
0
public void setWidth(int w)
{    this.width = w;}
0
public void setHeight(int h)
{    this.height = h;}
0
public int getMaxYAxisScale()
{    return maxYAxisScale;}
0
public void setMaxYAxisScale(int maxYAxisScale)
{    this.maxYAxisScale = maxYAxisScale;}
0
public Color[] getColor()
{    return color;}
0
public void setColor(Color[] color)
{    this.color = color;}
0
public Color getForeColor()
{    return foreColor;}
0
public void setForeColor(Color foreColor)
{    this.foreColor = foreColor;}
0
public Font getTitleFont()
{    return titleFont;}
0
public void setTitleFont(Font titleFont)
{    this.titleFont = titleFont;}
0
public Font getLegendFont()
{    return legendFont;}
0
public void setLegendFont(Font legendFont)
{    this.legendFont = legendFont;}
0
public Font getValueFont()
{    return valueFont;}
0
public void setValueFont(Font valueFont)
{    this.valueFont = valueFont;}
0
public int getLegendPlacement()
{    return legendPlacement;}
0
public void setLegendPlacement(int legendPlacement)
{    this.legendPlacement = legendPlacement;}
0
public boolean isOutlinesBarFlag()
{    return outlinesBarFlag;}
0
public void setOutlinesBarFlag(boolean outlinesBarFlag)
{    this.outlinesBarFlag = outlinesBarFlag;}
0
public boolean isValueOrientation()
{    return valueOrientation;}
0
public void setValueOrientation(boolean valueOrientation)
{    this.valueOrientation = valueOrientation;}
0
public boolean isShowGrouping()
{    return showGrouping;}
0
public void setShowGrouping(boolean showGrouping)
{    this.showGrouping = showGrouping;}
0
public void paintComponent(Graphics graphics)
{    if (data != null && this.title != null && this.xAxisLabels != null && this.yAxisLabel != null && this.yAxisTitle != null) {        drawSample(this.title, this.maxLength, this.xAxisLabels, this.yAxisTitle, this.legendLabels, this.data, this.width, this.height, this.color, this.legendFont, graphics);    }}
0
private double findMax(double[][] _data)
{    double max = _data[0][0];    for (double[] dArray : _data) {        for (double d : dArray) {            if (d > max) {                max = d;            }        }    }    return max;}
0
private String squeeze(String input, int _maxLength)
{    if (input.length() > _maxLength) {        return input.substring(0, _maxLength - ELLIPSIS_LEN) + ELLIPSIS;    }    return input;}
0
private void drawSample(String _title, int _maxLength, String[] _xAxisLabels, String _yAxisTitle, String[] _legendLabels, double[][] _data, int _width, int _height, Color[] _color, Font legendFont, Graphics g)
{        double max = maxYAxisScale > 0 ? maxYAxisScale : findMax(_data);    try {        if (_maxLength < 3) {            _maxLength = 3;        }                if (_title.length() == 0) {                        _title = JMeterUtils.getResString("aggregate_graph_title");        }                for (int i = 0; i < _xAxisLabels.length; i++) {            String label = _xAxisLabels[i];            _xAxisLabels[i] = squeeze(label, _maxLength);        }        this.setPreferredSize(new Dimension(_width, _height));                DataSeries dataSeries = new DataSeries(_xAxisLabels, null, _yAxisTitle, _title);        ClusteredBarChartProperties clusteredBarChartProperties = new ClusteredBarChartProperties();        clusteredBarChartProperties.setShowOutlinesFlag(outlinesBarFlag);        ValueLabelRenderer valueLabelRenderer = new ValueLabelRenderer(false, false, showGrouping, 0);        valueLabelRenderer.setValueLabelPosition(ValueLabelPosition.AT_TOP);        valueLabelRenderer.setValueChartFont(new ChartFont(valueFont, foreColor));        valueLabelRenderer.useVerticalLabels(valueOrientation);        clusteredBarChartProperties.addPostRenderEventListener(valueLabelRenderer);        Paint[] paints = new Paint[_color.length];        System.arraycopy(_color, 0, paints, 0, paints.length);        AxisChartDataSet axisChartDataSet = new AxisChartDataSet(_data, _legendLabels, paints, ChartType.BAR_CLUSTERED, clusteredBarChartProperties);        dataSeries.addIAxisPlotDataSet(axisChartDataSet);        ChartProperties chartProperties = new ChartProperties();        LabelAxisProperties xaxis = new LabelAxisProperties();        DataAxisProperties yaxis = new DataAxisProperties();        yaxis.setUseCommas(showGrouping);        if (legendFont != null) {            yaxis.setAxisTitleChartFont(new ChartFont(legendFont, new Color(20)));            yaxis.setScaleChartFont(new ChartFont(legendFont, new Color(20)));            xaxis.setAxisTitleChartFont(new ChartFont(legendFont, new Color(20)));            xaxis.setScaleChartFont(new ChartFont(legendFont, new Color(20)));        }        if (titleFont != null) {            chartProperties.setTitleFont(new ChartFont(titleFont, new Color(0)));        }                try {            BigDecimal round = BigDecimal.valueOf(max / 1000d);            round = round.setScale(0, BigDecimal.ROUND_UP);            double topValue = round.doubleValue() * 1000;            yaxis.setUserDefinedScale(0, 500);            yaxis.setNumItems((int) (topValue / 500) + 1);            yaxis.setShowGridLines(1);        } catch (PropertyException e) {                    }        AxisProperties axisProperties = new AxisProperties(xaxis, yaxis);        axisProperties.setXAxisLabelsAreVertical(true);        LegendProperties legendProperties = new LegendProperties();        legendProperties.setBorderStroke(null);        legendProperties.setPlacement(legendPlacement);        legendProperties.setIconBorderPaint(Color.WHITE);        if (legendPlacement == LegendAreaProperties.RIGHT || legendPlacement == LegendAreaProperties.LEFT) {            legendProperties.setNumColumns(1);        }        if (legendFont != null) {                        legendProperties.setFont(legendFont);        }        AxisChart axisChart = new AxisChart(dataSeries, chartProperties, axisProperties, legendProperties, _width, _height);        axisChart.setGraphics2D((Graphics2D) g);        axisChart.render();    } catch (ChartDataException | PropertyException e) {            }}
1
public void setupTest(BackendListenerContext context) throws Exception
{    if (log.isDebugEnabled()) {            }    metricsPerSampler.clear();    userMetrics.clear();}
1
public void teardownTest(BackendListenerContext context) throws Exception
{    if (log.isDebugEnabled()) {            }    metricsPerSampler.clear();    userMetrics.clear();}
1
public Arguments getDefaultParameters()
{    return null;}
0
protected org.apache.log.Logger getLogger()
{    return oldLogger;}
0
protected Logger getNewLogger()
{    return log;}
0
public SampleResult createSampleResult(BackendListenerContext context, SampleResult result)
{    return result;}
0
protected final SamplerMetric getSamplerMetric(String sampleLabel)
{    SamplerMetric samplerMetric = metricsPerSampler.get(sampleLabel);    if (samplerMetric == null) {        samplerMetric = new SamplerMetric();        SamplerMetric oldValue = metricsPerSampler.putIfAbsent(sampleLabel, samplerMetric);        if (oldValue != null) {            samplerMetric = oldValue;        }    }    return samplerMetric;}
0
protected Map<String, SamplerMetric> getMetricsPerSampler()
{    return metricsPerSampler;}
0
protected UserMetric getUserMetrics()
{    return userMetrics;}
0
public Object clone()
{    BackendListener clone = (BackendListener) super.clone();    clone.clientClass = this.clientClass;    return clone;}
0
private Class<?> initClass()
{    String name = getClassname().trim();    try {        return Class.forName(name, false, Thread.currentThread().getContextClassLoader());    } catch (Exception e) {            }    return null;}
1
private String whoAmI()
{    return Thread.currentThread().getName() + "@" + Integer.toHexString(hashCode()) + "-" + getName();}
0
public void sampleOccurred(SampleEvent event)
{    Arguments args = getArguments();    BackendListenerContext context = new BackendListenerContext(args);    SampleResult sr = listenerClientData.client.createSampleResult(context, event.getResult());    if (sr == null) {        if (log.isDebugEnabled()) {                    }        return;    }    try {        if (!listenerClientData.queue.offer(sr)) {                        listenerClientData.queueWaits.add(1L);            long t1 = System.nanoTime();            listenerClientData.queue.put(sr);            long t2 = System.nanoTime();            listenerClientData.queueWaitTime.add(t2 - t1);        }    } catch (Exception err) {            }}
1
public void run()
{    final boolean isDebugEnabled = log.isDebugEnabled();    List<SampleResult> sampleResults = new ArrayList<>(listenerClientData.queue.size());    try {        try {            boolean endOfLoop = false;            while (!endOfLoop) {                if (isDebugEnabled) {                                    }                SampleResult sampleResult = listenerClientData.queue.take();                if (isDebugEnabled) {                                    }                                while (!(endOfLoop = sampleResult == FINAL_SAMPLE_RESULT) && sampleResult != null) {                    sampleResults.add(sampleResult);                    if (isDebugEnabled) {                                            }                                        sampleResult = listenerClientData.queue.poll();                    if (isDebugEnabled) {                                            }                }                if (isDebugEnabled) {                                    }                sendToListener(backendListenerClient, context, sampleResults);                if (!endOfLoop) {                    LockSupport.parkNanos(100);                }            }        } catch (InterruptedException e) {            Thread.currentThread().interrupt();        }                sendToListener(backendListenerClient, context, sampleResults);            } finally {        listenerClientData.latch.countDown();    }}
1
 static void sendToListener(final BackendListenerClient backendListenerClient, final BackendListenerContext context, final List<SampleResult> sampleResults)
{    if (!sampleResults.isEmpty()) {        backendListenerClient.handleSampleResults(sampleResults, context);        sampleResults.clear();    }}
0
 static BackendListenerClient createBackendListenerClientImpl(Class<?> clientClass)
{    if (clientClass == null) {                return new ErrorBackendListenerClient();    }    try {        return (BackendListenerClient) clientClass.getDeclaredConstructor().newInstance();    } catch (Exception e) {                return new ErrorBackendListenerClient();    }}
1
public void testStarted()
{        testStarted("local");}
0
public void testStarted(String host)
{    if (log.isDebugEnabled()) {            }    int queueSize;    final String size = getQueueSize();    try {        queueSize = Integer.parseInt(size);    } catch (NumberFormatException nfe) {                queueSize = Integer.parseInt(DEFAULT_QUEUE_SIZE);    }    synchronized (LOCK) {        myName = getName();        listenerClientData = queuesByTestElementName.get(myName);        if (listenerClientData == null) {                                                clientClass = initClass();            BackendListenerClient backendListenerClient = createBackendListenerClientImpl(clientClass);            BackendListenerContext context = new BackendListenerContext((Arguments) getArguments().clone());            listenerClientData = new ListenerClientData();            listenerClientData.queue = new ArrayBlockingQueue<>(queueSize);            listenerClientData.queueWaits = new LongAdder();            listenerClientData.queueWaitTime = new LongAdder();            listenerClientData.latch = new CountDownLatch(1);            listenerClientData.client = backendListenerClient;            if (log.isInfoEnabled()) {                            }            Worker worker = new Worker(backendListenerClient, (Arguments) getArguments().clone(), listenerClientData);            worker.setDaemon(true);            worker.start();            if (log.isInfoEnabled()) {                            }            try {                backendListenerClient.setupTest(context);            } catch (Exception e) {                throw new java.lang.IllegalStateException("Failed calling setupTest", e);            }            queuesByTestElementName.put(myName, listenerClientData);        }        listenerClientData.instanceCount++;    }}
1
public void testEnded()
{        testEnded("local");}
0
public void handleSampleResults(List<SampleResult> sampleResults, BackendListenerContext context)
{        Thread.yield();}
1
public void sampleStarted(SampleEvent e)
{}
0
public void sampleStopped(SampleEvent e)
{}
0
public void setArguments(Arguments args)
{        args.removeArgument(GraphiteBackendListenerClient.USE_REGEXP_FOR_SAMPLERS_LIST, GraphiteBackendListenerClient.USE_REGEXP_FOR_SAMPLERS_LIST_DEFAULT);    setProperty(new TestElementProperty(ARGUMENTS, args));}
0
public Arguments getArguments()
{    return (Arguments) getProperty(ARGUMENTS).getObjectValue();}
0
public void setClassname(String classname)
{    setProperty(CLASSNAME, classname);}
0
public String getClassname()
{    return getPropertyAsString(CLASSNAME);}
0
public void setQueueSize(String queueSize)
{    setProperty(QUEUE_SIZE, queueSize, DEFAULT_QUEUE_SIZE);}
0
public String getQueueSize()
{    return getPropertyAsString(QUEUE_SIZE, DEFAULT_QUEUE_SIZE);}
0
public boolean containsParameter(String name)
{    return params.containsKey(name);}
0
public Iterator<String> getParameterNamesIterator()
{    return params.keySet().iterator();}
0
public String getParameter(String name)
{    return getParameter(name, null);}
0
public String getParameter(String name, String defaultValue)
{    if (params == null || !params.containsKey(name)) {        return defaultValue;    }    return params.get(name);}
0
public int getIntParameter(String name)
{    if (params == null || !params.containsKey(name)) {        throw new IllegalArgumentException("No value for parameter named '" + name + "'.");    }    return Integer.parseInt(params.get(name));}
0
public int getIntParameter(String name, int defaultValue)
{    if (params == null || !params.containsKey(name)) {        return defaultValue;    }    final String valueString = params.get(name);    try {        return Integer.parseInt(valueString);    } catch (NumberFormatException e) {                return defaultValue;    }}
1
public long getLongParameter(String name)
{    if (params == null || !params.containsKey(name)) {        throw new IllegalArgumentException("No value for parameter named '" + name + "'.");    }    return Long.parseLong(params.get(name));}
0
public long getLongParameter(String name, long defaultValue)
{    if (params == null || !params.containsKey(name)) {        return defaultValue;    }    final String valueString = params.get(name);    try {        return Long.decode(valueString).longValue();    } catch (NumberFormatException e) {                return defaultValue;    }}
1
public boolean getBooleanParameter(String name, boolean defaultValue)
{    if (params == null || !params.containsKey(name)) {        return defaultValue;    }    return Boolean.parseBoolean(params.get(name));}
0
public String getLabelResource()
{        return "backend_listener";}
0
private void init()
{        setLayout(new BorderLayout(0, 5));    setBorder(makeBorder());    add(makeTitlePanel(), BorderLayout.NORTH);    JPanel classnameRequestPanel = new JPanel(new BorderLayout(0, 5));    classnameRequestPanel.add(createClassnamePanel(), BorderLayout.NORTH);    classnameRequestPanel.add(createParameterPanel(), BorderLayout.CENTER);    add(classnameRequestPanel, BorderLayout.CENTER);    className = ((String) classnameCombo.getSelectedItem()).trim();}
0
private JPanel createClassnamePanel()
{    List<String> possibleClasses = new ArrayList<>();    try {                        possibleClasses = ClassFinder.findClassesThatExtend(JMeterUtils.getSearchPaths(), new Class[] { BackendListenerClient.class });                        possibleClasses.remove(BackendListener.class.getName() + "$ErrorBackendListenerClient");    } catch (Exception e) {            }        JLabel label = new JLabel(JMeterUtils.getResString("backend_listener_classname"));    classnameCombo = new JComboBox<>(possibleClasses.toArray(ArrayUtils.EMPTY_STRING_ARRAY));    classnameCombo.addActionListener(this);    classnameCombo.setEditable(false);    label.setLabelFor(classnameCombo);    HorizontalPanel classNamePanel = new HorizontalPanel();    classNamePanel.add(label);    classNamePanel.add(classnameCombo);    queueSize = new JTextField(BackendListener.DEFAULT_QUEUE_SIZE, 5);        queueSize.setName("Queue Size");        JLabel queueSizeLabel = new JLabel(JMeterUtils.getResString("backend_listener_queue_size"));    queueSizeLabel.setLabelFor(queueSize);    HorizontalPanel queueSizePanel = new HorizontalPanel();    queueSizePanel.add(queueSizeLabel, BorderLayout.WEST);    queueSizePanel.add(queueSize);    JPanel panel = new JPanel(new BorderLayout(0, 5));    panel.add(classNamePanel, BorderLayout.NORTH);    panel.add(queueSizePanel, BorderLayout.CENTER);    return panel;}
1
public void actionPerformed(ActionEvent event)
{    if (event.getSource() == classnameCombo) {        String newClassName = ((String) classnameCombo.getSelectedItem()).trim();        try {            BackendListenerClient client = createBackendListenerClient(newClassName);            BackendListenerClient oldClient = createBackendListenerClient(className);            Arguments currArgs = new Arguments();            argsPanel.modifyTestElement(currArgs);            Map<String, String> currArgsMap = currArgs.getArgumentsAsMap();            Map<String, String> userArgMap = new HashMap<>();            userArgMap.putAll(currArgsMap);            Arguments defaultArgs = extractDefaultArguments(client, userArgMap, oldClient.getDefaultParameters());            Arguments newArgs = copyDefaultArguments(currArgsMap, defaultArgs);            userArgMap.forEach(newArgs::addArgument);            className = newClassName;            argsPanel.configure(newArgs);        } catch (Exception e) {                    }    }}
1
private Arguments copyDefaultArguments(Map<String, String> currArgsMap, Arguments defaultArgs)
{    Arguments newArgs = new Arguments();    if (defaultArgs != null) {        for (JMeterProperty jMeterProperty : defaultArgs.getArguments()) {            Argument arg = (Argument) jMeterProperty.getObjectValue();            String name = arg.getName();            String value = arg.getValue();                        if (currArgsMap.containsKey(name)) {                String newVal = currArgsMap.get(name);                if (StringUtils.isNotBlank(newVal)) {                    value = newVal;                }            }            newArgs.addArgument(name, value);        }    }    return newArgs;}
0
private Arguments extractDefaultArguments(BackendListenerClient client, Map<String, String> userArgMap, Arguments currentUserArguments)
{    Arguments defaultArgs = null;    try {        defaultArgs = client.getDefaultParameters();        if (currentUserArguments != null) {            userArgMap.keySet().removeAll(currentUserArguments.getArgumentsAsMap().keySet());        }    } catch (AbstractMethodError e) {            }    return defaultArgs;}
1
private BackendListenerClient createBackendListenerClient(String newClassName) throws ReflectiveOperationException
{    return (BackendListenerClient) Class.forName(newClassName, true, Thread.currentThread().getContextClassLoader()).getDeclaredConstructor().newInstance();}
0
private JPanel createParameterPanel()
{        argsPanel = new ArgumentsPanel(JMeterUtils.getResString("backend_listener_paramtable"));    return argsPanel;}
0
public void configure(TestElement config)
{    super.configure(config);    argsPanel.configure((Arguments) config.getProperty(BackendListener.ARGUMENTS).getObjectValue());    className = config.getPropertyAsString(BackendListener.CLASSNAME);    if (checkContainsClassName(classnameCombo.getModel(), className)) {        classnameCombo.setSelectedItem(className);    } else {            }    queueSize.setText(((BackendListener) config).getQueueSize());}
1
private static boolean checkContainsClassName(ComboBoxModel<?> model, String className)
{    int size = model.getSize();    Set<String> set = new HashSet<>(size);    for (int i = 0; i < size; i++) {        set.add((String) model.getElementAt(i));    }    return set.contains(className);}
0
public TestElement createTestElement()
{    BackendListener config = new BackendListener();    modifyTestElement(config);    return config;}
0
public void modifyTestElement(TestElement config)
{    configureTestElement(config);    BackendListener backendListener = (BackendListener) config;    backendListener.setArguments((Arguments) argsPanel.createTestElement());    backendListener.setClassname(String.valueOf(classnameCombo.getSelectedItem()));    backendListener.setQueueSize(queueSize.getText());}
0
public void clearGui()
{    super.clearGui();    argsPanel.clearGui();    classnameCombo.setSelectedIndex(0);    queueSize.setText(BackendListener.DEFAULT_QUEUE_SIZE);}
0
public String getResponseCode()
{    if (responseCode.isEmpty()) {        return "0";    } else {        return responseCode.trim();    }}
0
public String getResponseMessage()
{    if (responseMessage.isEmpty()) {        return "None";    } else {        return responseMessage.trim();    }}
0
public boolean equals(Object other)
{    if (!(other instanceof ErrorMetric)) {        return false;    }    ErrorMetric otherError = (ErrorMetric) other;    return getResponseCode().equalsIgnoreCase(otherError.getResponseCode()) && getResponseMessage().equalsIgnoreCase(otherError.getResponseMessage());}
0
public int hashCode()
{    return getResponseCode().toLowerCase().hashCode() + getResponseMessage().toLowerCase().hashCode();}
0
protected GenericKeyedObjectPool<SocketConnectionInfos, SocketOutputStream> createSocketOutputStreamPool()
{    GenericKeyedObjectPoolConfig<SocketOutputStream> config = new GenericKeyedObjectPoolConfig<>();    config.setTestOnBorrow(true);    config.setTestWhileIdle(true);    config.setMaxTotalPerKey(-1);    config.setMaxTotal(-1);    config.setMaxIdlePerKey(-1);    config.setMinEvictableIdleTimeMillis(TimeUnit.MINUTES.toMillis(3));    config.setTimeBetweenEvictionRunsMillis(TimeUnit.MINUTES.toMillis(3));    return new GenericKeyedObjectPool<>(new SocketOutputStreamPoolFactory(SOCKET_CONNECT_TIMEOUT_MS, SOCKET_TIMEOUT), config);}
0
 static String sanitizeString(String s)
{        return StringUtils.replaceChars(s, "\\ .", "--_");}
0
public void run()
{    sendMetrics();}
0
protected void sendMetrics()
{        long timestampInSeconds = TimeUnit.SECONDS.convert(System.currentTimeMillis(), TimeUnit.MILLISECONDS);    synchronized (LOCK) {        for (Map.Entry<String, SamplerMetric> entry : getMetricsPerSampler().entrySet()) {            final String key = entry.getKey();            final SamplerMetric metric = entry.getValue();            if (key.equals(CUMULATED_METRICS)) {                addMetrics(timestampInSeconds, ALL_CONTEXT_NAME, metric);            } else {                addMetrics(timestampInSeconds, AbstractGraphiteMetricsSender.sanitizeString(key), metric);            }                        metric.resetForTimeInterval();        }    }    UserMetric userMetric = getUserMetrics();    graphiteMetricsManager.addMetric(timestampInSeconds, TEST_CONTEXT_NAME, METRIC_MIN_ACTIVE_THREADS, Integer.toString(userMetric.getMinActiveThreads()));    graphiteMetricsManager.addMetric(timestampInSeconds, TEST_CONTEXT_NAME, METRIC_MAX_ACTIVE_THREADS, Integer.toString(userMetric.getMaxActiveThreads()));    graphiteMetricsManager.addMetric(timestampInSeconds, TEST_CONTEXT_NAME, METRIC_MEAN_ACTIVE_THREADS, Integer.toString(userMetric.getMeanActiveThreads()));    graphiteMetricsManager.addMetric(timestampInSeconds, TEST_CONTEXT_NAME, METRIC_STARTED_THREADS, Integer.toString(userMetric.getStartedThreads()));    graphiteMetricsManager.addMetric(timestampInSeconds, TEST_CONTEXT_NAME, METRIC_FINISHED_THREADS, Integer.toString(userMetric.getFinishedThreads()));    graphiteMetricsManager.writeAndSendMetrics();}
0
private void addMetrics(long timestampInSeconds, String contextName, SamplerMetric metric)
{        if (metric.getTotal() <= 0) {        return;    }    graphiteMetricsManager.addMetric(timestampInSeconds, contextName, METRIC_OK_COUNT, Integer.toString(metric.getSuccesses()));    graphiteMetricsManager.addMetric(timestampInSeconds, contextName, METRIC_KO_COUNT, Integer.toString(metric.getFailures()));    graphiteMetricsManager.addMetric(timestampInSeconds, contextName, METRIC_ALL_COUNT, Integer.toString(metric.getTotal()));    graphiteMetricsManager.addMetric(timestampInSeconds, contextName, METRIC_ALL_HITS_COUNT, Integer.toString(metric.getHits()));    graphiteMetricsManager.addMetric(timestampInSeconds, contextName, METRIC_ALL_SENT_BYTES, Long.toString(metric.getSentBytes()));    graphiteMetricsManager.addMetric(timestampInSeconds, contextName, METRIC_ALL_RECEIVED_BYTES, Long.toString(metric.getReceivedBytes()));    if (metric.getSuccesses() > 0) {        graphiteMetricsManager.addMetric(timestampInSeconds, contextName, METRIC_OK_MIN_RESPONSE_TIME, Double.toString(metric.getOkMinTime()));        graphiteMetricsManager.addMetric(timestampInSeconds, contextName, METRIC_OK_MAX_RESPONSE_TIME, Double.toString(metric.getOkMaxTime()));        graphiteMetricsManager.addMetric(timestampInSeconds, contextName, METRIC_OK_AVG_RESPONSE_TIME, Double.toString(metric.getOkMean()));        for (Map.Entry<String, Float> entry : okPercentiles.entrySet()) {            graphiteMetricsManager.addMetric(timestampInSeconds, contextName, entry.getKey(), Double.toString(metric.getOkPercentile(entry.getValue().floatValue())));        }    }    if (metric.getFailures() > 0) {        graphiteMetricsManager.addMetric(timestampInSeconds, contextName, METRIC_KO_MIN_RESPONSE_TIME, Double.toString(metric.getKoMinTime()));        graphiteMetricsManager.addMetric(timestampInSeconds, contextName, METRIC_KO_MAX_RESPONSE_TIME, Double.toString(metric.getKoMaxTime()));        graphiteMetricsManager.addMetric(timestampInSeconds, contextName, METRIC_KO_AVG_RESPONSE_TIME, Double.toString(metric.getKoMean()));        for (Map.Entry<String, Float> entry : koPercentiles.entrySet()) {            graphiteMetricsManager.addMetric(timestampInSeconds, contextName, entry.getKey(), Double.toString(metric.getKoPercentile(entry.getValue().floatValue())));        }    }    graphiteMetricsManager.addMetric(timestampInSeconds, contextName, METRIC_ALL_MIN_RESPONSE_TIME, Double.toString(metric.getAllMinTime()));    graphiteMetricsManager.addMetric(timestampInSeconds, contextName, METRIC_ALL_MAX_RESPONSE_TIME, Double.toString(metric.getAllMaxTime()));    graphiteMetricsManager.addMetric(timestampInSeconds, contextName, METRIC_ALL_AVG_RESPONSE_TIME, Double.toString(metric.getAllMean()));    for (Map.Entry<String, Float> entry : allPercentiles.entrySet()) {        graphiteMetricsManager.addMetric(timestampInSeconds, contextName, entry.getKey(), Double.toString(metric.getAllPercentile(entry.getValue().floatValue())));    }}
0
public String getSamplersList()
{    return samplersList;}
0
public void setSamplersList(String samplersList)
{    this.samplersList = samplersList;}
0
public void handleSampleResults(List<SampleResult> sampleResults, BackendListenerContext context)
{    boolean samplersToFilterMatch;    synchronized (LOCK) {        UserMetric userMetrics = getUserMetrics();        for (SampleResult sampleResult : sampleResults) {            userMetrics.add(sampleResult);            if (!summaryOnly) {                if (useRegexpForSamplersList) {                    Matcher matcher = pattern.matcher(sampleResult.getSampleLabel());                    samplersToFilterMatch = matcher.matches();                } else {                    samplersToFilterMatch = samplersToFilter.contains(sampleResult.getSampleLabel());                }                if (samplersToFilterMatch) {                    SamplerMetric samplerMetric = getSamplerMetric(sampleResult.getSampleLabel());                    samplerMetric.add(sampleResult);                }            }            getSamplerMetric(CUMULATED_METRICS).add(sampleResult);        }    }}
0
public void setupTest(BackendListenerContext context) throws Exception
{    String graphiteMetricsSenderClass = context.getParameter(GRAPHITE_METRICS_SENDER);    String graphiteHost = context.getParameter(GRAPHITE_HOST);    int graphitePort = context.getIntParameter(GRAPHITE_PORT, DEFAULT_PLAINTEXT_PROTOCOL_PORT);    summaryOnly = context.getBooleanParameter(SUMMARY_ONLY, true);    samplersList = context.getParameter(SAMPLERS_LIST, "");    useRegexpForSamplersList = context.getBooleanParameter(USE_REGEXP_FOR_SAMPLERS_LIST, false);    String rootMetricsPrefix = context.getParameter(ROOT_METRICS_PREFIX, DEFAULT_METRICS_PREFIX);    String[] percentilesStringArray = context.getParameter(PERCENTILES, DEFAULT_METRICS_PREFIX).split(SEPARATOR);    okPercentiles = new HashMap<>(percentilesStringArray.length);    koPercentiles = new HashMap<>(percentilesStringArray.length);    allPercentiles = new HashMap<>(percentilesStringArray.length);    Arrays.stream(percentilesStringArray).map(String::trim).filter(StringUtils::isNotEmpty).forEach(this::initPercentileMaps);    Class<?> clazz = Class.forName(graphiteMetricsSenderClass);    this.graphiteMetricsManager = (GraphiteMetricsSender) clazz.getDeclaredConstructor().newInstance();    graphiteMetricsManager.setup(graphiteHost, graphitePort, rootMetricsPrefix);    if (useRegexpForSamplersList) {        pattern = Pattern.compile(samplersList);    } else {        String[] samplers = samplersList.split(SEPARATOR);        samplersToFilter = new HashSet<>();        Collections.addAll(samplersToFilter, samplers);    }    scheduler = Executors.newScheduledThreadPool(MAX_POOL_SIZE);        this.timerHandle = scheduler.scheduleAtFixedRate(this, SEND_INTERVAL, SEND_INTERVAL, TimeUnit.SECONDS);}
0
private void initPercentileMaps(String percentilesString)
{    DecimalFormat decimalFormat = new DecimalFormat("0.##");    try {        Float percentileValue = Float.valueOf(percentilesString.trim());        String sanitizedFormattedPercentile = AbstractGraphiteMetricsSender.sanitizeString(decimalFormat.format(percentileValue));        okPercentiles.put(METRIC_OK_PERCENTILE_PREFIX + sanitizedFormattedPercentile, percentileValue);        koPercentiles.put(METRIC_KO_PERCENTILE_PREFIX + sanitizedFormattedPercentile, percentileValue);        allPercentiles.put(METRIC_ALL_PERCENTILE_PREFIX + sanitizedFormattedPercentile, percentileValue);    } catch (Exception e) {            }}
1
public void teardownTest(BackendListenerContext context) throws Exception
{    boolean cancelState = timerHandle.cancel(false);        scheduler.shutdown();    try {        scheduler.awaitTermination(30, TimeUnit.SECONDS);    } catch (InterruptedException e) {                Thread.currentThread().interrupt();    }        sendMetrics();    if (samplersToFilter != null) {        samplersToFilter.clear();    }    graphiteMetricsManager.destroy();    super.teardownTest(context);}
1
public Arguments getDefaultParameters()
{    Arguments arguments = new Arguments();    arguments.addArgument(GRAPHITE_METRICS_SENDER, TextGraphiteMetricsSender.class.getName());    arguments.addArgument(GRAPHITE_HOST, "");    arguments.addArgument(GRAPHITE_PORT, Integer.toString(DEFAULT_PLAINTEXT_PROTOCOL_PORT));    arguments.addArgument(ROOT_METRICS_PREFIX, DEFAULT_METRICS_PREFIX);    arguments.addArgument(SUMMARY_ONLY, "true");    arguments.addArgument(SAMPLERS_LIST, "");    arguments.addArgument(USE_REGEXP_FOR_SAMPLERS_LIST, USE_REGEXP_FOR_SAMPLERS_LIST_DEFAULT);    arguments.addArgument(PERCENTILES, DEFAULT_PERCENTILES);    return arguments;}
0
public void setup(String graphiteHost, int graphitePort, String prefix)
{    this.prefix = prefix;    this.socketConnectionInfos = new SocketConnectionInfos(graphiteHost, graphitePort);    this.socketOutputStreamPool = createSocketOutputStreamPool();    }
1
public void setup(SocketConnectionInfos socketConnectionInfos, GenericKeyedObjectPool<SocketConnectionInfos, SocketOutputStream> socketOutputStreamPool, String prefix)
{    this.socketConnectionInfos = socketConnectionInfos;    this.socketOutputStreamPool = socketOutputStreamPool;    this.prefix = prefix;}
0
public void addMetric(long timestamp, String contextName, String metricName, String metricValue)
{    String name = new StringBuilder(50).append(prefix).append(contextName).append(".").append(metricName).toString();    synchronized (lock) {        metrics.add(new MetricTuple(name, timestamp, metricValue));    }}
0
public void writeAndSendMetrics()
{    final List<MetricTuple> currentMetrics;    synchronized (lock) {        if (metrics.isEmpty()) {            return;        }                currentMetrics = metrics;        metrics = new LinkedList<>();    }    writeMetrics(currentMetrics);}
0
private void writeMetrics(List<MetricTuple> currentMetrics)
{    SocketOutputStream out = null;    try {        String payload = convertMetricsToPickleFormat(currentMetrics);        int length = payload.length();        byte[] header = ByteBuffer.allocate(4).putInt(length).array();        out = socketOutputStreamPool.borrowObject(socketConnectionInfos);        out.write(header);                Writer pickleWriter = new OutputStreamWriter(out, CHARSET_NAME);        pickleWriter.write(payload);        pickleWriter.flush();        socketOutputStreamPool.returnObject(socketConnectionInfos, out);    } catch (Exception e) {                if (out != null) {            try {                socketOutputStreamPool.invalidateObject(socketConnectionInfos, out);            } catch (Exception e1) {                            }        }            }    if (log.isDebugEnabled()) {            }}
1
public void destroy()
{    socketOutputStreamPool.close();}
0
private static String convertMetricsToPickleFormat(List<MetricTuple> metrics)
{    StringBuilder pickled = new StringBuilder(metrics.size() * 75);    pickled.append(MARK).append(LIST);    for (MetricTuple tuple : metrics) {                pickled.append(MARK).append(        STRING).append(QUOTE).append(tuple.name).append(QUOTE).append(LF).append(MARK).append(LONG).append(tuple.timestamp).append(LONG).append(LF).append(STRING).append(QUOTE).append(tuple.value).append(QUOTE).append(LF).append(        TUPLE).append(        TUPLE).append(APPEND);    }        pickled.append(STOP);    return pickled.toString();}
0
public String getHost()
{    return host;}
0
public void setHost(String host)
{    this.host = host;}
0
public int getPort()
{    return port;}
0
public void setPort(int port)
{    this.port = port;}
0
public Socket getSocket()
{    return socket;}
0
public String toString()
{    return "SocketOutputStream{" + "socket=" + socket + '}';}
0
public PooledObject<SocketOutputStream> makeObject(SocketConnectionInfos connectionInfos) throws Exception
{    return wrap(create(connectionInfos));}
0
public void destroyObject(SocketConnectionInfos socketConnectionInfos, PooledObject<SocketOutputStream> socketOutputStream) throws Exception
{    super.destroyObject(socketConnectionInfos, socketOutputStream);    SocketOutputStream outputStream = socketOutputStream.getObject();    JOrphanUtils.closeQuietly(outputStream);    JOrphanUtils.closeQuietly(outputStream.getSocket());}
0
public boolean validateObject(SocketConnectionInfos hostAndPort, PooledObject<SocketOutputStream> socketOutputStream)
{    Socket socket = socketOutputStream.getObject().getSocket();    return socket.isConnected() && socket.isBound() && !socket.isClosed() && !socket.isInputShutdown() && !socket.isOutputShutdown();}
0
public SocketOutputStream create(SocketConnectionInfos connectionInfos) throws Exception
{        Socket socket = new Socket();    socket.setKeepAlive(true);    socket.setSoTimeout(socketTimeoutInMillis);    socket.connect(new InetSocketAddress(connectionInfos.getHost(), connectionInfos.getPort()), socketConnectTimeoutInMillis);    return new SocketOutputStream(socket);}
0
public PooledObject<SocketOutputStream> wrap(SocketOutputStream outputStream)
{    return new DefaultPooledObject<>(outputStream);}
0
public void setup(String graphiteHost, int graphitePort, String prefix)
{    this.socketConnectionInfos = new SocketConnectionInfos(graphiteHost, graphitePort);    this.socketOutputStreamPool = createSocketOutputStreamPool();    this.prefix = prefix;    }
1
public void setup(SocketConnectionInfos socketConnectionInfos, GenericKeyedObjectPool<SocketConnectionInfos, SocketOutputStream> socketOutputStreamPool, String prefix)
{    this.socketConnectionInfos = socketConnectionInfos;    this.socketOutputStreamPool = socketOutputStreamPool;    this.prefix = prefix;}
0
public void addMetric(long timestamp, String contextName, String metricName, String metricValue)
{    String name = new StringBuilder(50).append(prefix).append(contextName).append(".").append(metricName).toString();    synchronized (lock) {        metrics.add(new MetricTuple(name, timestamp, metricValue));    }}
0
public void writeAndSendMetrics()
{    final List<MetricTuple> currentMetrics;    synchronized (lock) {        if (metrics.isEmpty()) {            return;        }                currentMetrics = metrics;        metrics = new ArrayList<>(currentMetrics.size());    }    writeMetrics(currentMetrics);}
0
private void writeMetrics(List<MetricTuple> currentMetrics)
{    SocketOutputStream out = null;    try {        out = socketOutputStreamPool.borrowObject(socketConnectionInfos);                PrintWriter pw = new PrintWriter(new OutputStreamWriter(out, CHARSET_NAME), false);        for (MetricTuple metric : currentMetrics) {            pw.printf("%s %s %d%n", metric.name, metric.value, Long.valueOf(metric.timestamp));        }        pw.flush();        if (log.isDebugEnabled()) {                    }        if (pw.checkError()) {            socketOutputStreamPool.invalidateObject(socketConnectionInfos, out);                    } else {            socketOutputStreamPool.returnObject(socketConnectionInfos, out);        }    } catch (Exception e) {                if (out != null) {            try {                socketOutputStreamPool.invalidateObject(socketConnectionInfos, out);            } catch (Exception e1) {                            }        }            }}
1
public void destroy()
{    socketOutputStreamPool.close();}
0
 static final String tagToStringValue(String s)
{    return s.trim().replaceAll(" ", "\\\\ ").replaceAll(",", "\\\\,").replaceAll("=", "\\\\=");}
0
 static final String fieldToStringValue(String s)
{    return s.trim().replaceAll("\"", "\\\\\"");}
0
public void setup(String influxdbUrl, String influxDBToken) throws Exception
{        IOReactorConfig ioReactorConfig = IOReactorConfig.custom().setIoThreadCount(1).setConnectTimeout(JMeterUtils.getPropDefault("backend_influxdb.connection_timeout", 1000)).setSoTimeout(JMeterUtils.getPropDefault("backend_influxdb.socket_timeout", 3000)).build();        ConnectingIOReactor ioReactor = new DefaultConnectingIOReactor(ioReactorConfig);        PoolingNHttpClientConnectionManager connManager = new PoolingNHttpClientConnectionManager(ioReactor);    httpClient = HttpAsyncClientBuilder.create().setConnectionManager(connManager).setMaxConnPerRoute(2).setMaxConnTotal(2).setUserAgent("ApacheJMeter" + JMeterUtils.getJMeterVersion()).disableCookieManagement().disableConnectionState().build();    url = new URL(influxdbUrl);    token = influxDBToken;    httpRequest = createRequest(url, token);    httpClient.start();}
0
private HttpPost createRequest(URL url, String token) throws URISyntaxException
{    RequestConfig defaultRequestConfig = RequestConfig.custom().setConnectTimeout(JMeterUtils.getPropDefault("backend_influxdb.connection_timeout", 1000)).setSocketTimeout(JMeterUtils.getPropDefault("backend_influxdb.socket_timeout", 3000)).setConnectionRequestTimeout(JMeterUtils.getPropDefault("backend_influxdb.connection_request_timeout", 100)).build();    HttpPost currentHttpRequest = new HttpPost(url.toURI());    currentHttpRequest.setConfig(defaultRequestConfig);    if (StringUtils.isNotBlank(token)) {        currentHttpRequest.setHeader(AUTHORIZATION_HEADER_NAME, AUTHORIZATION_HEADER_VALUE + token);    }        return currentHttpRequest;}
1
public void addMetric(String mesurement, String tag, String field)
{    synchronized (lock) {        metrics.add(new MetricTuple(mesurement, tag, field, System.currentTimeMillis()));    }}
0
public void writeAndSendMetrics()
{    List<MetricTuple> copyMetrics;    synchronized (lock) {        if (metrics.isEmpty()) {            return;        }        copyMetrics = metrics;        metrics = new ArrayList<>(copyMetrics.size());    }    if (!copyMetrics.isEmpty()) {        try {            if (httpRequest == null) {                httpRequest = createRequest(url, token);            }            StringBuilder sb = new StringBuilder(copyMetrics.size() * 35);            for (MetricTuple metric : copyMetrics) {                                sb.append(metric.measurement).append(metric.tag).append(                " ").append(metric.field).append(" ").append(metric.timestamp + "000000").append(                "\n");            }            StringEntity entity = new StringEntity(sb.toString(), StandardCharsets.UTF_8);            httpRequest.setEntity(entity);            lastRequest = httpClient.execute(httpRequest, new FutureCallback<HttpResponse>() {                @Override                public void completed(final HttpResponse response) {                    int code = response.getStatusLine().getStatusCode();                    /*                         * HTTP response summary 2xx: If your write request received                         * HTTP 204 No Content, it was a success! 4xx: InfluxDB                         * could not understand the request. 5xx: The system is                         * overloaded or significantly impaired.                         */                    if (MetricUtils.isSuccessCode(code)) {                        if (log.isDebugEnabled()) {                                                    }                    } else {                                            }                }                @Override                public void failed(final Exception ex) {                                    }                @Override                public void cancelled() {                                    }            });        } catch (URISyntaxException ex) {                    } finally {                        copyMetrics.clear();        }    }}
1
public void completed(final HttpResponse response)
{    int code = response.getStatusLine().getStatusCode();    /*                         * HTTP response summary 2xx: If your write request received                         * HTTP 204 No Content, it was a success! 4xx: InfluxDB                         * could not understand the request. 5xx: The system is                         * overloaded or significantly impaired.                         */    if (MetricUtils.isSuccessCode(code)) {        if (log.isDebugEnabled()) {                    }    } else {            }}
1
public void failed(final Exception ex)
{    }
1
public void cancelled()
{    }
1
private static String getBody(final HttpResponse response)
{    String body = "";    try {        if (response != null && response.getEntity() != null) {            body = EntityUtils.toString(response.getEntity());        }    } catch (Exception e) {            }    return body;}
0
public void destroy()
{            try {        lastRequest.get(5, TimeUnit.SECONDS);    } catch (InterruptedException | ExecutionException | TimeoutException e) {            }    if (httpRequest != null) {        httpRequest.abort();    }    IOUtils.closeQuietly(httpClient);}
1
public void run()
{    sendMetrics();}
0
protected void sendMetrics()
{    synchronized (LOCK) {        for (Map.Entry<String, SamplerMetric> entry : getMetricsInfluxdbPerSampler().entrySet()) {            SamplerMetric metric = entry.getValue();            if (entry.getKey().equals(CUMULATED_METRICS)) {                addCumulatedMetrics(metric);            } else {                addMetrics(AbstractInfluxdbMetricsSender.tagToStringValue(entry.getKey()), metric);            }                        metric.resetForTimeInterval();        }    }    UserMetric userMetrics = getUserMetrics();        StringBuilder tag = new StringBuilder(80);    tag.append(TAG_APPLICATION).append(application);    tag.append(TAG_TRANSACTION).append("internal");    tag.append(userTag);    StringBuilder field = new StringBuilder(80);    field.append(METRIC_MIN_ACTIVE_THREADS).append(userMetrics.getMinActiveThreads()).append(',');    field.append(METRIC_MAX_ACTIVE_THREADS).append(userMetrics.getMaxActiveThreads()).append(',');    field.append(METRIC_MEAN_ACTIVE_THREADS).append(userMetrics.getMeanActiveThreads()).append(',');    field.append(METRIC_STARTED_THREADS).append(userMetrics.getStartedThreads()).append(',');    field.append(METRIC_ENDED_THREADS).append(userMetrics.getFinishedThreads());    influxdbMetricsManager.addMetric(measurement, tag.toString(), field.toString());    influxdbMetricsManager.writeAndSendMetrics();}
0
private void addMetrics(String transaction, SamplerMetric metric)
{        addMetric(transaction, metric.getTotal(), metric.getSentBytes(), metric.getReceivedBytes(), TAG_ALL, metric.getAllMean(), metric.getAllMinTime(), metric.getAllMaxTime(), allPercentiles.values(), metric::getAllPercentile);        addMetric(transaction, metric.getSuccesses(), null, null, TAG_OK, metric.getOkMean(), metric.getOkMinTime(), metric.getOkMaxTime(), okPercentiles.values(), metric::getOkPercentile);        addMetric(transaction, metric.getFailures(), null, null, TAG_KO, metric.getKoMean(), metric.getKoMinTime(), metric.getKoMaxTime(), koPercentiles.values(), metric::getKoPercentile);    metric.getErrors().forEach((error, count) -> addErrorMetric(transaction, error.getResponseCode(), error.getResponseMessage(), count));}
0
private void addErrorMetric(String transaction, String responseCode, String responseMessage, long count)
{    if (count > 0) {        StringBuilder tag = new StringBuilder(70);        tag.append(TAG_APPLICATION).append(application);        tag.append(TAG_TRANSACTION).append(transaction);        tag.append(TAG_RESPONSE_CODE).append(AbstractInfluxdbMetricsSender.tagToStringValue(responseCode));        tag.append(TAG_RESPONSE_MESSAGE).append(AbstractInfluxdbMetricsSender.tagToStringValue(responseMessage));        tag.append(userTag);        StringBuilder field = new StringBuilder(30);        field.append(METRIC_COUNT).append(count);        influxdbMetricsManager.addMetric(measurement, tag.toString(), field.toString());    }}
0
private void addMetric(String transaction, int count, Long sentBytes, Long receivedBytes, String statut, double mean, double minTime, double maxTime, Collection<Float> pcts, PercentileProvider percentileProvider)
{    if (count > 0) {        StringBuilder tag = new StringBuilder(95);        tag.append(TAG_APPLICATION).append(application);        tag.append(TAG_STATUS).append(statut);        tag.append(TAG_TRANSACTION).append(transaction);        tag.append(userTag);        StringBuilder field = new StringBuilder(80);        field.append(METRIC_COUNT).append(count);        if (!Double.isNaN(mean)) {            field.append(',').append(METRIC_AVG).append(mean);        }        if (!Double.isNaN(minTime)) {            field.append(',').append(METRIC_MIN).append(minTime);        }        if (!Double.isNaN(maxTime)) {            field.append(',').append(METRIC_MAX).append(maxTime);        }        if (sentBytes != null) {            field.append(',').append(METRIC_SENT_BYTES).append(sentBytes);        }        if (receivedBytes != null) {            field.append(',').append(METRIC_RECEIVED_BYTES).append(receivedBytes);        }        for (Float pct : pcts) {            field.append(',').append(METRIC_PCT_PREFIX).append(pct).append('=').append(percentileProvider.getPercentileValue(pct));        }        influxdbMetricsManager.addMetric(measurement, tag.toString(), field.toString());    }}
0
private void addCumulatedMetrics(SamplerMetric metric)
{    int total = metric.getTotal();    if (total > 0) {        StringBuilder tag = new StringBuilder(70);        StringBuilder field = new StringBuilder(100);        Collection<Float> pcts = allPercentiles.values();        tag.append(TAG_APPLICATION).append(application);        tag.append(TAG_TRANSACTION).append(CUMULATED_METRICS);        tag.append(TAG_STATUS).append(CUMULATED_METRICS);        tag.append(userTag);        field.append(METRIC_COUNT).append(total);        field.append(',').append(METRIC_COUNT_ERROR).append(metric.getFailures());        if (!Double.isNaN(metric.getOkMean())) {            field.append(',').append(METRIC_AVG).append(Double.toString(metric.getOkMean()));        }        if (!Double.isNaN(metric.getOkMinTime())) {            field.append(',').append(METRIC_MIN).append(Double.toString(metric.getOkMinTime()));        }        if (!Double.isNaN(metric.getOkMaxTime())) {            field.append(',').append(METRIC_MAX).append(Double.toString(metric.getOkMaxTime()));        }        field.append(',').append(METRIC_HIT).append(metric.getHits());        field.append(',').append(METRIC_SENT_BYTES).append(metric.getSentBytes());        field.append(',').append(METRIC_RECEIVED_BYTES).append(metric.getReceivedBytes());        for (Float pct : pcts) {            field.append(',').append(METRIC_PCT_PREFIX).append(pct).append('=').append(Double.toString(metric.getAllPercentile(pct)));        }        influxdbMetricsManager.addMetric(measurement, tag.toString(), field.toString());    }}
0
public String getSamplersRegex()
{    return samplersRegex;}
0
public void setSamplersList(String samplersList)
{    this.samplersRegex = samplersList;}
0
public void handleSampleResults(List<SampleResult> sampleResults, BackendListenerContext context)
{    synchronized (LOCK) {        UserMetric userMetrics = getUserMetrics();        for (SampleResult sampleResult : sampleResults) {            userMetrics.add(sampleResult);            Matcher matcher = samplersToFilter.matcher(sampleResult.getSampleLabel());            if (!summaryOnly && (matcher.find())) {                SamplerMetric samplerMetric = getSamplerMetricInfluxdb(sampleResult.getSampleLabel());                samplerMetric.add(sampleResult);            }            SamplerMetric cumulatedMetrics = getSamplerMetricInfluxdb(CUMULATED_METRICS);            cumulatedMetrics.add(sampleResult);        }    }}
0
public void setupTest(BackendListenerContext context) throws Exception
{    String influxdbMetricsSender = context.getParameter("influxdbMetricsSender");    String influxdbUrl = context.getParameter("influxdbUrl");    String influxdbToken = context.getParameter("influxdbToken");    summaryOnly = context.getBooleanParameter("summaryOnly", false);    samplersRegex = context.getParameter("samplersRegex", "");    application = AbstractInfluxdbMetricsSender.tagToStringValue(context.getParameter("application", ""));    measurement = AbstractInfluxdbMetricsSender.tagToStringValue(context.getParameter("measurement", DEFAULT_MEASUREMENT));    testTitle = context.getParameter("testTitle", "Test");    testTags = AbstractInfluxdbMetricsSender.tagToStringValue(context.getParameter("eventTags", ""));    String percentilesAsString = context.getParameter("percentiles", "");    String[] percentilesStringArray = percentilesAsString.split(SEPARATOR);    okPercentiles = new HashMap<>(percentilesStringArray.length);    koPercentiles = new HashMap<>(percentilesStringArray.length);    allPercentiles = new HashMap<>(percentilesStringArray.length);    DecimalFormat format = new DecimalFormat("0.##");    for (int i = 0; i < percentilesStringArray.length; i++) {        if (!StringUtils.isEmpty(percentilesStringArray[i].trim())) {            try {                Float percentileValue = Float.valueOf(percentilesStringArray[i].trim());                okPercentiles.put(AbstractInfluxdbMetricsSender.tagToStringValue(format.format(percentileValue)), percentileValue);                koPercentiles.put(AbstractInfluxdbMetricsSender.tagToStringValue(format.format(percentileValue)), percentileValue);                allPercentiles.put(AbstractInfluxdbMetricsSender.tagToStringValue(format.format(percentileValue)), percentileValue);            } catch (Exception e) {                            }        }    }        StringBuilder userTagBuilder = new StringBuilder();    context.getParameterNamesIterator().forEachRemaining(name -> {        if (StringUtils.isNotBlank(name) && !DEFAULT_ARGS.containsKey(name.trim()) && name.startsWith("TAG_") && StringUtils.isNotBlank(context.getParameter(name))) {            final String tagName = name.trim().substring(4);            final String tagValue = context.getParameter(name).trim();            userTagBuilder.append(',').append(AbstractInfluxdbMetricsSender.tagToStringValue(tagName)).append('=').append(AbstractInfluxdbMetricsSender.tagToStringValue(tagValue));                    }    });    userTag = userTagBuilder.toString();    Class<?> clazz = Class.forName(influxdbMetricsSender);    this.influxdbMetricsManager = (InfluxdbMetricsSender) clazz.getDeclaredConstructor().newInstance();    influxdbMetricsManager.setup(influxdbUrl, influxdbToken);    samplersToFilter = Pattern.compile(samplersRegex);    addAnnotation(true);    scheduler = Executors.newScheduledThreadPool(MAX_POOL_SIZE);        this.timerHandle = scheduler.scheduleAtFixedRate(this, 0, SEND_INTERVAL, TimeUnit.SECONDS);}
1
protected SamplerMetric getSamplerMetricInfluxdb(String sampleLabel)
{    SamplerMetric samplerMetric = metricsPerSampler.get(sampleLabel);    if (samplerMetric == null) {        samplerMetric = new SamplerMetric();        SamplerMetric oldValue = metricsPerSampler.putIfAbsent(sampleLabel, samplerMetric);        if (oldValue != null) {            samplerMetric = oldValue;        }    }    return samplerMetric;}
0
private Map<String, SamplerMetric> getMetricsInfluxdbPerSampler()
{    return metricsPerSampler;}
0
public void teardownTest(BackendListenerContext context) throws Exception
{    boolean cancelState = timerHandle.cancel(false);        scheduler.shutdown();    try {        scheduler.awaitTermination(30, TimeUnit.SECONDS);    } catch (InterruptedException e) {                Thread.currentThread().interrupt();    }    addAnnotation(false);            sendMetrics();    influxdbMetricsManager.destroy();    super.teardownTest(context);}
1
private void addAnnotation(boolean startOrEnd)
{    influxdbMetricsManager.addMetric(EVENTS_FOR_ANNOTATION, TAG_APPLICATION + application + ",title=ApacheJMeter" + userTag + (StringUtils.isNotEmpty(testTags) ? TAGS + testTags : ""), TEXT + AbstractInfluxdbMetricsSender.fieldToStringValue(testTitle + (startOrEnd ? " started" : " ended")) + "\"");}
0
public Arguments getDefaultParameters()
{    Arguments arguments = new Arguments();    DEFAULT_ARGS.forEach(arguments::addArgument);    return arguments;}
0
public void setup(String influxdbUrl, String influxDBToken) throws Exception
{    try {                String[] urlComponents = influxdbUrl.split(":");        if (urlComponents.length == 2) {            hostAddress = InetAddress.getByName(urlComponents[0]);            udpPort = Integer.parseInt(urlComponents[1]);        } else {            throw new IllegalArgumentException("Influxdb url '" + influxdbUrl + "' is wrong. The format shoule be <host/ip>:<port>");        }    } catch (Exception e) {        throw new IllegalArgumentException("Influxdb url '" + influxdbUrl + "' is wrong. The format shoule be <host/ip>:<port>", e);    }}
1
public void addMetric(String mesurement, String tag, String field)
{    synchronized (lock) {        metrics.add(new MetricTuple(mesurement, tag, field, System.currentTimeMillis()));    }}
0
public void writeAndSendMetrics()
{    List<MetricTuple> tempMetrics;    synchronized (lock) {        if (metrics.isEmpty()) {            return;        }        tempMetrics = metrics;        metrics = new ArrayList<>(tempMetrics.size());    }    final List<MetricTuple> copyMetrics = tempMetrics;    if (!copyMetrics.isEmpty()) {        StringBuilder sb = new StringBuilder(copyMetrics.size() * 35);        for (MetricTuple metric : copyMetrics) {                                                sb.append(metric.measurement).append(metric.tag).append(" ").append(metric.field).append(" ").append(metric.timestamp + "000000").append(            "\n");        }        try (DatagramSocket ds = new DatagramSocket()) {            byte[] buf = sb.toString().getBytes();            DatagramPacket dp = new DatagramPacket(buf, buf.length, this.hostAddress, this.udpPort);            ds.send(dp);        } catch (SocketException e) {                        return;        } catch (IOException e) {                    } finally {                        copyMetrics.clear();        }    }}
1
public void destroy()
{}
0
public static void setDefaultWindowMode(WindowMode windowMode)
{    globalWindowMode = windowMode;}
0
private List<DescriptiveStatistics> initWindowedStats()
{    return Arrays.asList(okResponsesStats, koResponsesStats, allResponsesStats);}
0
public synchronized void add(SampleResult result)
{    if (result.isSuccessful()) {        successes += result.getSampleCount() - result.getErrorCount();    } else {        failures += result.getErrorCount();        ErrorMetric error = new ErrorMetric(result);        errors.put(error, errors.getOrDefault(error, 0) + result.getErrorCount());    }    long time = result.getTime();    allResponsesStats.addValue(time);    pctResponseStats.addValue(time);    if (result.isSuccessful()) {                        okResponsesStats.addValue(time);    } else {        koResponsesStats.addValue(time);    }    addHits(result);    addNetworkData(result);}
0
private void addNetworkData(SampleResult result)
{    if (!TransactionController.isFromTransactionController(result)) {        sentBytes += result.getSentBytes();        receivedBytes += result.getBytesAsLong();    }}
0
private void addHits(SampleResult res)
{    SampleResult[] subResults = res.getSubResults();    if (!TransactionController.isFromTransactionController(res)) {        hits += 1;    }    for (SampleResult subResult : subResults) {        addHits(subResult);    }}
0
public synchronized void resetForTimeInterval()
{    switch(globalWindowMode) {        case FIXED:                        break;        case TIMED:            for (DescriptiveStatistics stat : windowedStats) {                stat.clear();            }            break;        default:    }    errors.clear();    successes = 0;    failures = 0;    hits = 0;    sentBytes = 0;    receivedBytes = 0;}
0
public int getTotal()
{    return successes + failures;}
0
public int getSuccesses()
{    return successes;}
0
public int getFailures()
{    return failures;}
0
public double getOkMaxTime()
{    return okResponsesStats.getMax();}
0
public double getOkMinTime()
{    return okResponsesStats.getMin();}
0
public double getOkMean()
{    return okResponsesStats.getMean();}
0
public double getOkPercentile(double percentile)
{    return okResponsesStats.getPercentile(percentile);}
0
public double getKoMaxTime()
{    return koResponsesStats.getMax();}
0
public double getKoMinTime()
{    return koResponsesStats.getMin();}
0
public double getKoMean()
{    return koResponsesStats.getMean();}
0
public double getKoPercentile(double percentile)
{    return koResponsesStats.getPercentile(percentile);}
0
public double getAllMaxTime()
{    return allResponsesStats.getMax();}
0
public double getAllMinTime()
{    return allResponsesStats.getMin();}
0
public double getAllMean()
{    return allResponsesStats.getMean();}
0
public double getAllPercentile(double percentile)
{    return pctResponseStats.getPercentile(percentile);}
0
public int getHits()
{    return hits;}
0
public Map<ErrorMetric, Integer> getErrors()
{    return errors;}
0
public long getSentBytes()
{    return sentBytes;}
0
public long getReceivedBytes()
{    return receivedBytes;}
0
public synchronized void add(SampleResult result)
{    usersStats.addValue(JMeterContextService.getThreadCounts().activeThreads);}
0
public synchronized void resetForTimeInterval()
{}
0
public int getMaxActiveThreads()
{    return (int) usersStats.getMax();}
0
public int getMeanActiveThreads()
{    return (int) usersStats.getMean();}
0
public int getMinActiveThreads()
{    return (int) usersStats.getMin();}
0
public int getFinishedThreads()
{    return JMeterContextService.getThreadCounts().finishedThreads;}
0
public int getStartedThreads()
{    return JMeterContextService.getThreadCounts().startedThreads;}
0
public void clear()
{    this.usersStats.clear();}
0
public static WindowMode get()
{    String name = JMeterUtils.getPropDefault("backend_metrics_window_mode", FIXED.name());    return WindowMode.valueOf(name.toUpperCase());}
0
public String getLabel()
{    return label;}
0
public void setLabel(String label)
{    this.label = label;}
0
public JCheckBox getChkBox()
{    return chkBox;}
0
public void setChkBox(JCheckBox chkBox)
{    this.chkBox = chkBox;}
0
public Color getBackColor()
{    return backColor;}
0
public void setBackColor(Color backColor)
{    this.backColor = backColor;}
0
protected String getInitFileProperty()
{    return INIT_FILE;}
0
public void sampleOccurred(SampleEvent se)
{    final BeanShellInterpreter bshInterpreter = getBeanShellInterpreter();    if (bshInterpreter == null) {                return;    }    SampleResult samp = se.getResult();    try {                bshInterpreter.set("sampleEvent", se);                bshInterpreter.set("sampleResult", samp);        processFileOrScript(bshInterpreter);    } catch (JMeterException e) {        if (log.isWarnEnabled()) {                    }    }}
1
public void sampleStarted(SampleEvent e)
{}
0
public void sampleStopped(SampleEvent e)
{}
0
public void add(SampleResult sample)
{}
0
public boolean isStats()
{        return false;}
0
public Object clone()
{    return super.clone();}
0
public void sampleOccurred(SampleEvent event)
{    BSFManager mgr = null;    try {        mgr = getManager();        if (mgr == null) {                        return;        }        mgr.declareBean("sampleEvent", event, SampleEvent.class);        SampleResult result = event.getResult();        mgr.declareBean("sampleResult", result, SampleResult.class);        processFileOrScript(mgr);    } catch (BSFException e) {        if (log.isWarnEnabled()) {                    }    } finally {        if (mgr != null) {            mgr.terminate();        }    }}
1
public void sampleStarted(SampleEvent e)
{}
0
public void sampleStopped(SampleEvent e)
{}
0
public void add(SampleResult sample)
{}
0
public boolean isStats()
{    return false;}
0
public Object clone()
{    return super.clone();}
0
public void add(final SampleResult sample)
{    JMeterUtils.runSafe(false, () -> {        DefaultMutableTreeNode currNode = new DefaultMutableTreeNode(sample);        treeModel.insertNodeInto(currNode, root, root.getChildCount());        if (root.getChildCount() == 1) {            resultsTree.expandPath(new TreePath(root));        }    });}
0
public String getLabelResource()
{        return "comparison_visualizer_title";}
0
private void init()
{        setLayout(new BorderLayout());    setBorder(makeBorder());    add(makeTitlePanel(), BorderLayout.NORTH);    JSplitPane split = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);    split.add(getTreePanel());    split.add(getSideBySidePanel());    add(split, BorderLayout.CENTER);}
0
private JComponent getSideBySidePanel()
{    JPanel main = new JPanel(new GridLayout(1, 2));    JScrollPane base = new JScrollPane(getBaseTextPane());    base.setPreferredSize(base.getMinimumSize());    JScrollPane secondary = new JScrollPane(getSecondaryTextPane());    secondary.setPreferredSize(secondary.getMinimumSize());    main.add(base);    main.add(secondary);    main.setPreferredSize(main.getMinimumSize());    return main;}
0
private JTextPane getBaseTextPane()
{    base = new JTextPane();    base.setEditable(false);    base.setBackground(getBackground());    return base;}
0
private JTextPane getSecondaryTextPane()
{    secondary = new JTextPane();    secondary.setEditable(false);    return secondary;}
0
private JComponent getTreePanel()
{        root = new DefaultMutableTreeNode("Root");    treeModel = new DefaultTreeModel(root);    resultsTree = new JTree(treeModel);    resultsTree.setCellRenderer(new TreeNodeRenderer());    resultsTree.setCellRenderer(new TreeNodeRenderer());    resultsTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);    resultsTree.addTreeSelectionListener(new Selector());    resultsTree.setRootVisible(false);    resultsTree.setShowsRootHandles(true);    JScrollPane treePane = new JScrollPane(resultsTree);    treePane.setPreferredSize(new Dimension(150, 50));    JPanel panel = new JPanel(new GridLayout(1, 1));    panel.add(treePane);    return panel;}
0
public void valueChanged(TreeSelectionEvent e)
{    try {        DefaultMutableTreeNode node = (DefaultMutableTreeNode) resultsTree.getLastSelectedPathComponent();        SampleResult sr = (SampleResult) node.getUserObject();        AssertionResult[] results = sr.getAssertionResults();        CompareAssertionResult result = null;        for (AssertionResult r : results) {            if (r instanceof CompareAssertionResult) {                result = (CompareAssertionResult) r;                break;            }        }        if (result == null) {            result = new CompareAssertionResult(getName());        }        base.setText(result.getBaseResult());        secondary.setText(result.getSecondaryResult());    } catch (Exception err) {                base.setText(JMeterUtils.getResString("comparison_invalid_node") + err);                secondary.setText(JMeterUtils.getResString("comparison_invalid_node") + err);    }    base.setCaretPosition(0);    secondary.setCaretPosition(0);}
0
public void clearData()
{    while (root.getChildCount() > 0) {                        treeModel.removeNodeFromParent((DefaultMutableTreeNode) root.getChildAt(0));                base.setText("");                secondary.setText("");    }}
0
public Dimension getPreferredScrollableViewportSize()
{    return this.getPreferredSize();}
0
public int getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction)
{    return 5;}
0
public int getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction)
{    return (int) (visibleRect.width * .9);}
0
public boolean getScrollableTracksViewportWidth()
{    return false;}
0
public boolean getScrollableTracksViewportHeight()
{    return true;}
0
public void clearData()
{    graphMax = 1;    throughputMax = 1;}
0
public void enableData(boolean value)
{    this.wantData = value;}
0
public void enableAverage(boolean value)
{    this.wantAverage = value;}
0
public void enableMedian(boolean value)
{    this.wantMedian = value;}
0
public void enableDeviation(boolean value)
{    this.wantDeviation = value;}
0
public void enableThroughput(boolean value)
{    this.wantThroughput = value;}
0
public void updateGui(final Sample oneSample)
{    long h = model.getPercentPoint((float) 0.90).longValue();    boolean repaint = false;    if ((oneSample.getCount() % 20 == 0 || oneSample.getCount() < 20) && h > (graphMax * 1.2) || graphMax > (h * 1.2)) {        if (h >= 1) {            graphMax = h;        } else {            graphMax = 1;        }        repaint = true;    }    if (model.getMaxThroughput() > throughputMax) {        throughputMax = model.getMaxThroughput() * 1.3;        repaint = true;    }    if (repaint) {        repaint();        return;    }    final long xPos = model.getCount();    SwingUtilities.invokeLater(new Runnable() {        @Override        public void run() {            Graphics g = getGraphics();            if (g != null) {                drawSample(xPos, oneSample, g);            }        }    });}
0
public void run()
{    Graphics g = getGraphics();    if (g != null) {        drawSample(xPos, oneSample, g);    }}
0
public void paintComponent(Graphics g)
{    super.paintComponent(g);    List<Sample> samples = model.getSamples();    synchronized (samples) {        Iterator<Sample> e = samples.iterator();        for (int i = 0; e.hasNext(); i++) {            Sample s = e.next();            drawSample(i, s, g);        }    }}
0
private void drawSample(long x, Sample oneSample, Graphics g)
{    int height = getHeight();            int adjustedWidth = (int) (x % WIDTH);    if (wantData) {        int data = (int) (oneSample.getData() * height / graphMax);        if (oneSample.isSuccess()) {            g.setColor(Color.black);        } else {            g.setColor(Color.YELLOW);        }        g.drawLine(adjustedWidth, height - data, adjustedWidth, height - data - 1);        if (log.isDebugEnabled()) {                    }    }    if (wantAverage) {        int average = (int) (oneSample.getAverage() * height / graphMax);        g.setColor(Color.blue);        g.drawLine(adjustedWidth, height - average, adjustedWidth, height - average - 1);    }    if (wantMedian) {        int median = (int) (oneSample.getMedian() * height / graphMax);        g.setColor(JMeterColor.PURPLE);        g.drawLine(adjustedWidth, height - median, adjustedWidth, height - median - 1);    }    if (wantDeviation) {        int deviation = (int) (oneSample.getDeviation() * height / graphMax);        g.setColor(Color.red);        g.drawLine(adjustedWidth, height - deviation, adjustedWidth, height - deviation - 1);    }    if (wantThroughput) {        int throughput = (int) (oneSample.getThroughput() * height / throughputMax);        g.setColor(JMeterColor.DARK_GREEN);        g.drawLine(adjustedWidth, height - throughput, adjustedWidth, height - throughput - 1);    }}
1
public long getGraphMax()
{    return graphMax;}
0
public Image getImage()
{    Image result = graph.createImage(graph.getWidth(), graph.getHeight());    graph.paintComponent(result.getGraphics());    return result;}
0
public void updateGui(Sample s)
{    JMeterUtils.runSafe(false, () -> updateGuiInAWTThread(s));}
0
private void collectSamplesFromQueue()
{        Sample s = null;    synchronized (graph) {        while (!newSamples.isEmpty()) {            s = model.addSample(newSamples.pop());        }    }    updateGuiInAWTThread(s);}
0
private void updateGuiInAWTThread(Sample s)
{    if (s == null) {        return;    }    graph.updateGui(s);    noSamplesField.setText(Long.toString(s.getCount()));    dataField.setText(Long.toString(s.getData()));    averageField.setText(Long.toString(s.getAverage()));    deviationField.setText(Long.toString(s.getDeviation()));        throughputField.setText(nf.format(60 * s.getThroughput()) + "/" + minute);    medianField.setText(Long.toString(s.getMedian()));    updateYAxis();}
0
public void add(final SampleResult res)
{    newSamples.add(res);}
0
public String getLabelResource()
{        return "graph_results_title";}
0
public void itemStateChanged(ItemEvent e)
{    if (e.getItem() == data) {        this.graph.enableData(e.getStateChange() == ItemEvent.SELECTED);    } else if (e.getItem() == average) {        this.graph.enableAverage(e.getStateChange() == ItemEvent.SELECTED);    } else if (e.getItem() == deviation) {        this.graph.enableDeviation(e.getStateChange() == ItemEvent.SELECTED);    } else if (e.getItem() == throughput) {        this.graph.enableThroughput(e.getStateChange() == ItemEvent.SELECTED);    } else if (e.getItem() == median) {        this.graph.enableMedian(e.getStateChange() == ItemEvent.SELECTED);    }    this.graph.repaint();}
0
public void clearData()
{    synchronized (graph) {        graph.clearData();        model.clear();        newSamples.clear();    }    dataField.setText(ZERO);    averageField.setText(ZERO);    deviationField.setText(ZERO);        throughputField.setText("0/" + minute);    medianField.setText(ZERO);    noSamplesField.setText(ZERO);    updateYAxis();    repaint();}
0
public String toString()
{    return "Show the samples analysis as dot plots";}
0
private void updateYAxis()
{    maxYField.setText(Long.toString(graph.getGraphMax()));    minYField.setText(ZERO);}
0
private void init()
{        this.setLayout(new BorderLayout());        Border margin = new EmptyBorder(10, 10, 5, 10);    this.setBorder(margin);        JPanel graphPanel = new JPanel(new BorderLayout());    graphPanel.add(createYAxis(), BorderLayout.WEST);    graphPanel.add(createChoosePanel(), BorderLayout.NORTH);    graphPanel.add(createGraphPanel(), BorderLayout.CENTER);    graphPanel.add(createGraphInfoPanel(), BorderLayout.SOUTH);        this.add(makeTitlePanel(), BorderLayout.NORTH);    this.add(graphPanel, BorderLayout.CENTER);    new Timer(REFRESH_PERIOD, e -> collectSamplesFromQueue()).start();}
0
private JPanel createYAxis()
{    JPanel graphYAxisPanel = new JPanel();    graphYAxisPanel.setLayout(new BorderLayout());    maxYField = createYAxisField(5);    minYField = createYAxisField(3);        graphYAxisPanel.add(createYAxisPanel("graph_results_ms", maxYField), BorderLayout.NORTH);        graphYAxisPanel.add(createYAxisPanel("graph_results_ms", minYField), BorderLayout.SOUTH);    return graphYAxisPanel;}
0
private JTextField createYAxisField(int length)
{    JTextField field = new JTextField(length);    field.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 0));    field.setEditable(false);    field.setForeground(Color.black);    field.setBackground(getBackground());    field.setHorizontalAlignment(SwingConstants.RIGHT);    return field;}
0
private JPanel createYAxisPanel(String labelResourceName, JTextField field)
{    JPanel panel = new JPanel(new FlowLayout());    JLabel label = new JLabel(JMeterUtils.getResString(labelResourceName));    panel.add(field);    panel.add(label);    return panel;}
0
private JPanel createChoosePanel()
{    JPanel chooseGraphsPanel = new JPanel();    chooseGraphsPanel.setLayout(new FlowLayout());        JLabel selectGraphsLabel = new JLabel(JMeterUtils.getResString("graph_choose_graphs"));        data = createChooseCheckBox("graph_results_data", Color.black);        average = createChooseCheckBox("graph_results_average", Color.blue);        deviation = createChooseCheckBox("graph_results_deviation", Color.red);        throughput = createChooseCheckBox("graph_results_throughput", JMeterColor.DARK_GREEN);        median = createChooseCheckBox("graph_results_median", JMeterColor.PURPLE);    chooseGraphsPanel.add(selectGraphsLabel);    chooseGraphsPanel.add(data);    chooseGraphsPanel.add(average);    chooseGraphsPanel.add(median);    chooseGraphsPanel.add(deviation);    chooseGraphsPanel.add(throughput);    return chooseGraphsPanel;}
0
private JCheckBox createChooseCheckBox(String labelResourceName, Color color)
{    JCheckBox checkBox = new JCheckBox(JMeterUtils.getResString(labelResourceName));    checkBox.setSelected(true);    checkBox.addItemListener(this);    checkBox.setForeground(color);    return checkBox;}
0
private Component createGraphPanel()
{    JScrollPane graphScrollPanel = makeScrollPane(graph, ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);    graphScrollPanel.setViewportBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));    graphScrollPanel.setPreferredSize(graphScrollPanel.getMinimumSize());    return graphScrollPanel;}
0
private Box createGraphInfoPanel()
{    Box graphInfoPanel = Box.createHorizontalBox();    noSamplesField = createInfoField(Color.black, 6);    dataField = createInfoField(Color.black, 5);    averageField = createInfoField(Color.blue, 5);    deviationField = createInfoField(Color.red, 5);    throughputField = createInfoField(JMeterColor.DARK_GREEN, 15);    medianField = createInfoField(JMeterColor.PURPLE, 5);    graphInfoPanel.add(createInfoColumn(    createInfoLabel("graph_results_no_samples", noSamplesField), noSamplesField, createInfoLabel("graph_results_deviation", deviationField),     deviationField));    graphInfoPanel.add(Box.createHorizontalGlue());    graphInfoPanel.add(createInfoColumn(    createInfoLabel("graph_results_latest_sample", dataField),     dataField, createInfoLabel("graph_results_throughput", throughputField),     throughputField));    graphInfoPanel.add(Box.createHorizontalGlue());    graphInfoPanel.add(createInfoColumn(    createInfoLabel("graph_results_average", averageField),     averageField, createInfoLabel("graph_results_median", medianField),     medianField));    graphInfoPanel.add(Box.createHorizontalGlue());    return graphInfoPanel;}
0
private JTextField createInfoField(Color color, int length)
{    JTextField field = new JTextField(length);    field.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));    field.setEditable(false);    field.setForeground(color);    field.setBackground(getBackground());            field.setMaximumSize(new Dimension(field.getMaximumSize().width, field.getPreferredSize().height));    return field;}
0
private JLabel createInfoLabel(String labelResourceName, JTextField field)
{    JLabel label = new JLabel(JMeterUtils.getResString(labelResourceName));    label.setForeground(field.getForeground());    label.setLabelFor(field);    return label;}
0
private Box createInfoColumn(JLabel label1, JTextField field1, JLabel label2, JTextField field2)
{                Box row = Box.createHorizontalBox();    Box col = Box.createVerticalBox();    col.add(label1 != null ? label1 : Box.createVerticalGlue());    col.add(label2 != null ? label2 : Box.createVerticalGlue());    row.add(col);    row.add(Box.createHorizontalStrut(5));    col = Box.createVerticalBox();    col.add(field1 != null ? field1 : Box.createVerticalGlue());    col.add(field2 != null ? field2 : Box.createVerticalGlue());    row.add(col);    row.add(Box.createHorizontalStrut(5));    return row;}
0
public void sampleOccurred(SampleEvent event)
{    try {        ScriptEngine scriptEngine = getScriptEngine();        Bindings bindings = scriptEngine.createBindings();        bindings.put("sampleEvent", event);        bindings.put("sampleResult", event.getResult());        processFileOrScript(scriptEngine, bindings);    } catch (ScriptException | IOException e) {            }}
1
public void sampleStarted(SampleEvent e)
{}
0
public void sampleStopped(SampleEvent e)
{}
0
public void add(SampleResult sample)
{}
0
public boolean isStats()
{    return false;}
0
public Object clone()
{    return super.clone();}
0
public void setData(double[][] data)
{    this.data = data;}
0
public void setTitle(String title)
{    this.title = title;}
0
public void setXAxisTitle(String title)
{    this.xAxisTitle = title;}
0
public void setYAxisTitle(String title)
{    this.yAxisTitle = title;}
0
public void setXAxisLabels(String[] labels)
{    this.xAxisLabels = labels;}
0
public void setYAxisLabels(String[] label)
{    this.yAxisLabel = label;}
0
public void setWidth(int w)
{    this.width = w;}
0
public void setHeight(int h)
{    this.height = h;}
0
public void paintComponent(Graphics g)
{        this.paint_counter = -1;    if (data != null && this.title != null && this.xAxisLabels != null && this.xAxisTitle != null && this.yAxisLabel != null && this.yAxisTitle != null) {        drawSample(this.title, this.xAxisLabels, this.xAxisTitle, this.yAxisTitle, this.data, this.width, this.height, g);    }}
0
private void drawSample(String _title, String[] _xAxisLabels, String _xAxisTitle, String _yAxisTitle, double[][] _data, int _width, int _height, Graphics g)
{    try {        if (_width == 0) {            _width = 450;        }        if (_height == 0) {            _height = 250;        }        this.setPreferredSize(new Dimension(_width, _height));        DataSeries dataSeries = new DataSeries(_xAxisLabels, _xAxisTitle, _yAxisTitle, _title);        String[] legendLabels = yAxisLabel;        Paint[] paints = this.createPaint(_data.length);        Shape[] shapes = createShapes(_data.length);        Stroke[] lstrokes = createStrokes(_data.length);        LineChartProperties lineChartProperties = new LineChartProperties(lstrokes, shapes);        AxisChartDataSet axisChartDataSet = new AxisChartDataSet(_data, legendLabels, paints, ChartType.LINE, lineChartProperties);        dataSeries.addIAxisPlotDataSet(axisChartDataSet);        ChartProperties chartProperties = new ChartProperties();        AxisProperties axisProperties = new AxisProperties();                axisProperties.getYAxisProperties().setShowGridLines(1);        axisProperties.setXAxisLabelsAreVertical(true);                DataAxisProperties daxp = (DataAxisProperties) axisProperties.getYAxisProperties();        daxp.setRoundToNearest(1);        LegendProperties legendProperties = new LegendProperties();        AxisChart axisChart = new AxisChart(dataSeries, chartProperties, axisProperties, legendProperties, _width, _height);        axisChart.setGraphics2D((Graphics2D) g);        axisChart.render();    } catch (Exception e) {            }}
1
public Shape[] createShapes(int count)
{    Shape[] shapes = new Shape[count];    for (int idx = 0; idx < count; idx++) {        shapes[idx] = nextShape();    }    return shapes;}
0
public Shape nextShape()
{    this.shape_counter++;    if (shape_counter >= (SHAPE_ARRAY.length - 1)) {        shape_counter = 0;    }    return SHAPE_ARRAY[shape_counter];}
0
public Stroke[] createStrokes(int count)
{    Stroke[] str = new Stroke[count];    for (int idx = 0; idx < count; idx++) {        str[idx] = nextStroke();    }    return str;}
0
public Stroke nextStroke()
{    return new BasicStroke(1.0f);}
0
public Paint[] createPaint(int count)
{    Paint[] pts = new Paint[count];    for (int idx = 0; idx < count; idx++) {        pts[idx] = nextPaint();    }    return pts;}
0
public Paint nextPaint()
{    this.paint_counter++;    if (this.paint_counter == (PAINT_ARRAY.length - 1)) {        this.paint_counter = 0;    }    return PAINT_ARRAY[this.paint_counter];}
0
public JPanel getControlPanel()
{    return this;}
0
public synchronized void clearData()
{    if (getModel() != null) {        MailerModel model = ((MailerResultCollector) getModel()).getMailerModel();        model.clear();        updateVisualizer(model);    }}
0
public void add(final SampleResult res)
{    if (getModel() != null) {        JMeterUtils.runSafe(false, new Runnable() {            @Override            public void run() {                MailerModel model = ((MailerResultCollector) getModel()).getMailerModel();                                                model.add(res);                updateVisualizer(model);            }        });    }}
0
public void run()
{    MailerModel model = ((MailerResultCollector) getModel()).getMailerModel();            model.add(res);    updateVisualizer(model);}
0
public String toString()
{        return JMeterUtils.getResString("mailer_string");}
0
private void initGui()
{    this.setLayout(new BorderLayout());        JPanel mainPanel = new VerticalPanel();    Border margin = new EmptyBorder(5, 10, 5, 10);    this.setBorder(margin);    mainPanel.add(makeTitlePanel());    JPanel attributePane = new VerticalPanel();    attributePane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("mailer_title_settings")));        attributePane.add(createMailingSettings());    attributePane.add(createSmtpSettings());        JPanel testerPanel = new JPanel(new BorderLayout());        testerButton = new JButton(JMeterUtils.getResString("mailer_test_mail"));    testerButton.addActionListener(this);    testerButton.setEnabled(true);    testerPanel.add(testerButton, BorderLayout.EAST);    attributePane.add(testerPanel);    mainPanel.add(attributePane);    mainPanel.add(Box.createRigidArea(new Dimension(0, 5)));        JPanel mailerPanel = new JPanel(new BorderLayout());        mailerPanel.add(new JLabel(JMeterUtils.getResString("mailer_failures")), BorderLayout.WEST);    failureField = new JTextField(6);    failureField.setEditable(false);    mailerPanel.add(failureField, BorderLayout.CENTER);    mainPanel.add(mailerPanel);    this.add(mainPanel, BorderLayout.CENTER);}
0
private JPanel createMailingSettings()
{    JPanel settingsPane = new JPanel(new BorderLayout());    settingsPane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("mailer_title_message")));    JPanel headerPane = new JPanel(new BorderLayout());    headerPane.setBorder(BorderFactory.createEmptyBorder(2, 0, 2, 0));    JPanel fromPane = new JPanel(new BorderLayout());        fromPane.add(new JLabel(JMeterUtils.getResString("mailer_from")), BorderLayout.WEST);    fromField = new JTextField(25);    fromField.setEditable(true);    fromPane.add(fromField, BorderLayout.CENTER);    fromPane.add(Box.createRigidArea(new Dimension(5, 0)), BorderLayout.EAST);    headerPane.add(fromPane, BorderLayout.WEST);    JPanel addressPane = new JPanel(new BorderLayout());        addressPane.add(new JLabel(JMeterUtils.getResString("mailer_addressees")), BorderLayout.WEST);    addressField = new JTextField(10);    addressField.setEditable(true);    addressPane.add(addressField, BorderLayout.CENTER);    headerPane.add(addressPane, BorderLayout.CENTER);    JPanel successPane = new JPanel(new BorderLayout());    successPane.setBorder(BorderFactory.createEmptyBorder(2, 0, 2, 0));    JPanel succesSubjectPane = new JPanel(new BorderLayout());        succesSubjectPane.add(new JLabel(JMeterUtils.getResString("mailer_success_subject")), BorderLayout.WEST);    successSubjectField = new JTextField(10);    successSubjectField.setEditable(true);    succesSubjectPane.add(successSubjectField, BorderLayout.CENTER);    succesSubjectPane.add(Box.createRigidArea(new Dimension(5, 0)), BorderLayout.EAST);    successPane.add(succesSubjectPane, BorderLayout.CENTER);    JPanel successLimitPane = new JPanel(new BorderLayout());        successLimitPane.add(new JLabel(JMeterUtils.getResString("mailer_success_limit")), BorderLayout.WEST);        successLimitField = new JTextField("2", 5);    successLimitField.setEditable(true);    successLimitPane.add(successLimitField, BorderLayout.CENTER);    successPane.add(successLimitPane, BorderLayout.EAST);    JPanel failurePane = new JPanel(new BorderLayout());    failurePane.setBorder(BorderFactory.createEmptyBorder(2, 0, 2, 0));    JPanel failureSubjectPane = new JPanel(new BorderLayout());        failureSubjectPane.add(new JLabel(JMeterUtils.getResString("mailer_failure_subject")), BorderLayout.WEST);    failureSubjectField = new JTextField(10);    failureSubjectField.setEditable(true);    failureSubjectPane.add(failureSubjectField, BorderLayout.CENTER);    failureSubjectPane.add(Box.createRigidArea(new Dimension(5, 0)), BorderLayout.EAST);    failurePane.add(failureSubjectPane, BorderLayout.CENTER);    JPanel failureLimitPane = new JPanel(new BorderLayout());        failureLimitPane.add(new JLabel(JMeterUtils.getResString("mailer_failure_limit")), BorderLayout.WEST);        failureLimitField = new JTextField("2", 5);    failureLimitField.setEditable(true);    failureLimitPane.add(failureLimitField, BorderLayout.CENTER);    failurePane.add(failureLimitPane, BorderLayout.EAST);    settingsPane.add(headerPane, BorderLayout.NORTH);    settingsPane.add(successPane, BorderLayout.CENTER);    settingsPane.add(failurePane, BorderLayout.SOUTH);    return settingsPane;}
0
private JPanel createSmtpSettings()
{    JPanel settingsPane = new JPanel(new BorderLayout());    settingsPane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("mailer_title_smtpserver")));    JPanel hostPane = new JPanel(new BorderLayout());    hostPane.setBorder(BorderFactory.createEmptyBorder(2, 0, 2, 0));    JPanel smtpHostPane = new JPanel(new BorderLayout());        smtpHostPane.add(new JLabel(JMeterUtils.getResString("mailer_host")), BorderLayout.WEST);    smtpHostField = new JTextField(10);    smtpHostField.setEditable(true);    smtpHostPane.add(smtpHostField, BorderLayout.CENTER);    smtpHostPane.add(Box.createRigidArea(new Dimension(5, 0)), BorderLayout.EAST);    hostPane.add(smtpHostPane, BorderLayout.CENTER);    JPanel smtpPortPane = new JPanel(new BorderLayout());        smtpPortPane.add(new JLabel(JMeterUtils.getResString("mailer_port")), BorderLayout.WEST);    smtpPortField = new JTextField(10);    smtpPortField.setEditable(true);    smtpPortPane.add(smtpPortField, BorderLayout.CENTER);    hostPane.add(smtpPortPane, BorderLayout.EAST);    JPanel authPane = new JPanel(new BorderLayout());    hostPane.setBorder(BorderFactory.createEmptyBorder(2, 0, 2, 0));    JPanel smtpLoginPane = new JPanel(new BorderLayout());        smtpLoginPane.add(new JLabel(JMeterUtils.getResString("mailer_login")), BorderLayout.WEST);    smtpLoginField = new JTextField(10);    smtpLoginField.setEditable(true);    smtpLoginPane.add(smtpLoginField, BorderLayout.CENTER);    smtpLoginPane.add(Box.createRigidArea(new Dimension(5, 0)), BorderLayout.EAST);    authPane.add(smtpLoginPane, BorderLayout.CENTER);    JPanel smtpPasswordPane = new JPanel(new BorderLayout());        smtpPasswordPane.add(new JLabel(JMeterUtils.getResString("mailer_password")), BorderLayout.WEST);    smtpPasswordField = new JPasswordField(10);    smtpPasswordField.setEditable(true);    smtpPasswordPane.add(smtpPasswordField, BorderLayout.CENTER);    smtpPasswordPane.add(Box.createRigidArea(new Dimension(5, 0)), BorderLayout.EAST);    authPane.add(smtpPasswordPane, BorderLayout.EAST);    JPanel authTypePane = new JPanel(new BorderLayout());        authTypePane.add(new JLabel(JMeterUtils.getResString("mailer_connection_security")), BorderLayout.WEST);    authTypeCombo = new JComboBox<>(new String[] { MailerModel.MailAuthType.NONE.toString(), MailerModel.MailAuthType.SSL.toString(), MailerModel.MailAuthType.TLS.toString() });        authTypeCombo.setFont(new Font("SansSerif", Font.PLAIN, 10));    authTypePane.add(authTypeCombo, BorderLayout.CENTER);    JPanel credPane = new JPanel(new BorderLayout());    credPane.add(authPane, BorderLayout.CENTER);    credPane.add(authTypePane, BorderLayout.EAST);    settingsPane.add(hostPane, BorderLayout.NORTH);    settingsPane.add(credPane, BorderLayout.CENTER);    return settingsPane;}
0
public String getLabelResource()
{        return "mailer_visualizer_title";}
0
public String getAttributesTitle()
{        return JMeterUtils.getResString("mailer_attributes_panel");}
0
public void actionPerformed(ActionEvent e)
{    if (e.getSource() == testerButton) {        ResultCollector testElement = getModel();        modifyTestElement(testElement);        try {            MailerModel model = ((MailerResultCollector) testElement).getMailerModel();            model.sendTestMail();                        displayMessage(JMeterUtils.getResString("mail_sent"), false);        } catch (AddressException ex) {                        displayMessage(            JMeterUtils.getResString("invalid_mail_address") + "\n" + ex.getMessage(),             true);        } catch (MessagingException ex) {                        displayMessage(            JMeterUtils.getResString("invalid_mail") + "\n" + ex.getMessage(),             true);        }    }}
1
public void configure(TestElement el)
{    super.configure(el);    updateVisualizer(((MailerResultCollector) el).getMailerModel());}
0
public TestElement createTestElement()
{    ResultCollector model = getModel();    if (model == null) {        model = new MailerResultCollector();        setModel(model);    }    modifyTestElement(model);    return model;}
0
public void modifyTestElement(TestElement c)
{    super.modifyTestElement(c);    MailerModel mailerModel = ((MailerResultCollector) c).getMailerModel();    mailerModel.setFailureLimit(failureLimitField.getText());    mailerModel.setFailureSubject(failureSubjectField.getText());    mailerModel.setFromAddress(fromField.getText());    mailerModel.setSmtpHost(smtpHostField.getText());    mailerModel.setSmtpPort(smtpPortField.getText());    mailerModel.setLogin(smtpLoginField.getText());    mailerModel.setPassword(smtpPasswordField.getText());    mailerModel.setMailAuthType(authTypeCombo.getSelectedItem().toString());    mailerModel.setSuccessLimit(successLimitField.getText());    mailerModel.setSuccessSubject(successSubjectField.getText());    mailerModel.setToAddress(addressField.getText());}
0
private void updateVisualizer(MailerModel model)
{    addressField.setText(model.getToAddress());    fromField.setText(model.getFromAddress());    smtpHostField.setText(model.getSmtpHost());    smtpPortField.setText(model.getSmtpPort());    smtpLoginField.setText(model.getLogin());    smtpPasswordField.setText(model.getPassword());    authTypeCombo.setSelectedItem(model.getMailAuthType().toString());    successSubjectField.setText(model.getSuccessSubject());    failureSubjectField.setText(model.getFailureSubject());    failureLimitField.setText(String.valueOf(model.getFailureLimit()));    failureField.setText(String.valueOf(model.getFailureCount()));    successLimitField.setText(String.valueOf(model.getSuccessLimit()));    repaint();}
0
private void displayMessage(String message, boolean isError)
{    int type = isError ? JOptionPane.ERROR_MESSAGE : JOptionPane.INFORMATION_MESSAGE;    JOptionPane.showMessageDialog(null, message, isError ?     JMeterUtils.getResString("mailer_msg_title_error") : JMeterUtils.getResString("mailer_msg_title_information"),     type);}
0
public void stateChanged(ChangeEvent e)
{    if (e.getSource() instanceof MailerModel) {        MailerModel testModel = (MailerModel) e.getSource();        updateVisualizer(testModel);    } else {        super.stateChanged(e);    }}
0
public String getLabelResource()
{        return "property_visualiser_title";}
0
public Collection<String> getMenuCategories()
{    return Arrays.asList(MenuFactory.NON_TEST_ELEMENTS);}
0
public void actionPerformed(ActionEvent action)
{    String command = action.getActionCommand();    if (SYSTEM.equals(command)) {        setUpData();        return;    } else if (JMETER.equals(command)) {        setUpData();        return;    }}
0
public TestElement createTestElement()
{    TestElement el = new ConfigTestElement();    modifyTestElement(el);    return el;}
0
public void configure(TestElement element)
{    super.configure(element);    setUpData();}
0
private void setUpData()
{    tableModel.clearData();    Properties p = null;    if (systemButton.isSelected()) {        p = System.getProperties();    }    if (jmeterButton.isSelected()) {        p = JMeterUtils.getJMeterProperties();    }    if (p == null) {        return;    }    Set<Map.Entry<Object, Object>> s = p.entrySet();    List<Map.Entry<Object, Object>> al = new ArrayList<>(s);    Collections.sort(al, new Comparator<Map.Entry<Object, Object>>() {        @Override        public int compare(Map.Entry<Object, Object> o1, Map.Entry<Object, Object> o2) {            String m1 = (String) o1.getKey();            String m2 = (String) o2.getKey();            return m1.compareTo(m2);        }    });    for (Map.Entry<Object, Object> row : al) {        tableModel.addRow(row);    }}
0
public int compare(Map.Entry<Object, Object> o1, Map.Entry<Object, Object> o2)
{    String m1 = (String) o1.getKey();    String m2 = (String) o2.getKey();    return m1.compareTo(m2);}
0
public void modifyTestElement(TestElement element)
{    configureTestElement(element);}
0
private Component makeMainPanel()
{    initializeTableModel();    table = new JTable(tableModel);    table.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());    table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);    JMeterUtils.applyHiDPI(table);    return makeScrollPane(table);}
0
private Component makeLabelPanel()
{    JPanel labelPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));    ButtonGroup bg = new ButtonGroup();    bg.add(systemButton);    bg.add(jmeterButton);    jmeterButton.setSelected(true);    systemButton.setActionCommand(SYSTEM);    jmeterButton.setActionCommand(JMETER);    systemButton.addActionListener(this);    jmeterButton.addActionListener(this);    labelPanel.add(systemButton);    labelPanel.add(jmeterButton);    labelPanel.add(tableLabel);    return labelPanel;}
0
private void init()
{        setLayout(new BorderLayout(0, 5));    setBorder(makeBorder());    add(makeTitlePanel(), BorderLayout.NORTH);    JPanel p = new JPanel();    p.setLayout(new BorderLayout());    p.add(makeLabelPanel(), BorderLayout.NORTH);    p.add(makeMainPanel(), BorderLayout.CENTER);        p.add(Box.createVerticalStrut(70), BorderLayout.WEST);    add(p, BorderLayout.CENTER);    table.revalidate();}
0
private void initializeTableModel()
{    tableModel = new ObjectTableModel(new String[] { COLUMN_NAMES_0, COLUMN_NAMES_1 }, new Functor[] {     new Functor(Map.Entry.class, "getKey"),     new Functor(Map.Entry.class, "getValue") }, new Functor[] {     null,     new Functor(Map.Entry.class, "setValue", new Class[] { Object.class }) }, new Class[] { String.class, String.class });}
0
public void actionPerformed(ActionEvent e)
{    String command = e.getActionCommand();    if ((sampleResult != null) && (BOUNDARY_EXTRACTOR_TESTER_COMMAND.equals(command))) {        String response = ViewResultsFullVisualizer.getResponseAsString(sampleResult);        executeAndShowBoundaryExtractorTester(response);    }}
0
private void executeAndShowBoundaryExtractorTester(String textToParse)
{    if (textToParse != null && textToParse.length() > 0 && this.boundaryExtractorFieldLeft.getText().length() > 0 && this.boundaryExtractorFieldRight.getText().length() > 0) {        this.boundaryExtractorResultField.setText(process(textToParse));                this.boundaryExtractorResultField.setCaretPosition(0);    }}
0
private String process(String textToParse)
{    BoundaryExtractor extractor = new BoundaryExtractor();    List<String> matches = extractor.extractAll(boundaryExtractorFieldLeft.getText(), boundaryExtractorFieldRight.getText(), textToParse);    int nbFound = matches.size();        StringBuilder sb = new StringBuilder();    sb.append("Match count: ").append(nbFound).append("\n");    for (int j = 0; j < nbFound; j++) {        String match = matches.get(j);        sb.append("Match[").append(j + 1).append("]=").append(match).append("\n");    }    return sb.toString();}
0
public void clearData()
{        this.boundaryExtractorDataField.setText("");        this.boundaryExtractorFieldLeft.setText("");        this.boundaryExtractorFieldRight.setText("");        this.boundaryExtractorResultField.setText("");}
0
public void init()
{        boundaryExtractorPane = createBoundaryExtractorPanel();}
0
private JPanel createBoundaryExtractorPanel()
{    boundaryExtractorDataField = new JTextArea();    boundaryExtractorDataField.setEditable(false);    boundaryExtractorDataField.setLineWrap(true);    boundaryExtractorDataField.setWrapStyleWord(true);    JScrollPane boundaryExtractorDataPane = GuiUtils.makeScrollPane(boundaryExtractorDataField);    boundaryExtractorDataPane.setPreferredSize(new Dimension(0, 200));    JPanel pane = new JPanel(new BorderLayout(0, 5));    JSplitPane mainSplit = new JSplitPane(JSplitPane.VERTICAL_SPLIT, boundaryExtractorDataPane, createBoundaryExtractorTasksPanel());    mainSplit.setDividerLocation(0.6d);    mainSplit.setOneTouchExpandable(true);    pane.add(mainSplit, BorderLayout.CENTER);    return pane;}
0
private JPanel createBoundaryExtractorTasksPanel()
{    JPanel boundaryExtractorActionPanel = new JPanel();    boundaryExtractorActionPanel.setLayout(new BoxLayout(boundaryExtractorActionPanel, BoxLayout.X_AXIS));    Border margin = new EmptyBorder(5, 5, 0, 5);    boundaryExtractorActionPanel.setBorder(margin);        boundaryExtractorFieldLeft = new JLabeledTextField(JMeterUtils.getResString("boundaryextractor_leftboundary_field"));    boundaryExtractorActionPanel.add(boundaryExtractorFieldLeft, BorderLayout.WEST);        boundaryExtractorFieldRight = new JLabeledTextField(JMeterUtils.getResString("boundaryextractor_rightboundary_field"));    boundaryExtractorActionPanel.add(boundaryExtractorFieldRight, BorderLayout.WEST);        JButton boundaryExtractorTester = new JButton(JMeterUtils.getResString("boundaryextractor_tester_button_test"));    boundaryExtractorTester.setActionCommand(BOUNDARY_EXTRACTOR_TESTER_COMMAND);    boundaryExtractorTester.addActionListener(this);    boundaryExtractorActionPanel.add(boundaryExtractorTester, BorderLayout.EAST);    boundaryExtractorResultField = new JTextArea();    boundaryExtractorResultField.setEditable(false);    boundaryExtractorResultField.setLineWrap(true);    boundaryExtractorResultField.setWrapStyleWord(true);    JPanel boundaryExtractorTasksPanel = new JPanel(new BorderLayout(0, 5));    boundaryExtractorTasksPanel.add(boundaryExtractorActionPanel, BorderLayout.NORTH);    boundaryExtractorTasksPanel.add(GuiUtils.makeScrollPane(boundaryExtractorResultField), BorderLayout.CENTER);    return boundaryExtractorTasksPanel;}
0
public void setupTabPane()
{        if (rightSide.indexOfTab(JMeterUtils.getResString("boundaryextractor_tester_title")) < 0) {                        rightSide.addTab(JMeterUtils.getResString("boundaryextractor_tester_title"), boundaryExtractorPane);    }    clearData();}
0
public void setLastSelectedTab(int index)
{}
0
public synchronized void setRightSide(JTabbedPane side)
{    rightSide = side;}
0
public synchronized void setSamplerResult(Object userObject)
{    if (userObject instanceof SampleResult) {        sampleResult = (SampleResult) userObject;    }}
0
public void renderResult(SampleResult sampleResult)
{    clearData();    String response = ViewResultsFullVisualizer.getResponseAsString(sampleResult);    boundaryExtractorDataField.setText(response);    boundaryExtractorDataField.setCaretPosition(0);}
0
public String toString()
{        return JMeterUtils.getResString("boundaryextractor_tester_title");}
0
public void renderImage(SampleResult sampleResult)
{    clearData();        boundaryExtractorDataField.setText(JMeterUtils.getResString("boundaryextractor_render_no_text"));}
0
public void setBackgroundColor(Color backGround)
{}
0
public void clearData()
{        this.cssJqueryDataField.setText("");        this.cssJqueryResultField.setText("");}
0
public void init()
{        cssJqueryPane = createCssJqueryPanel();}
0
public void actionPerformed(ActionEvent e)
{    String command = e.getActionCommand();    if ((sampleResult != null) && (CSSJQUEY_TESTER_COMMAND.equals(command))) {        String response = ViewResultsFullVisualizer.getResponseAsString(sampleResult);        executeAndShowCssJqueryTester(response);    }}
0
private void executeAndShowCssJqueryTester(String textToParse)
{    if (textToParse != null && textToParse.length() > 0 && this.cssJqueryField.getText().length() > 0) {        this.cssJqueryResultField.setText(process(textToParse));                this.cssJqueryResultField.setCaretPosition(0);    }}
0
private String process(String textToParse)
{    try {        List<String> result = new ArrayList<>();        Extractor extractor = HtmlExtractor.getExtractorImpl(cssJqueryLabeledChoice.getText());        final int nbFound = extractor.extract(cssJqueryField.getText(), attributeField.getText(), -1, textToParse, result, 0, null);                StringBuilder sb = new StringBuilder();        sb.append("Match count: ").append(nbFound).append("\n");        for (int j = 0; j < nbFound; j++) {            String mr = result.get(j);            sb.append("Match[").append(j + 1).append("]=").append(mr).append("\n");        }        return sb.toString();    } catch (Exception ex) {        StringBuilder sb = new StringBuilder();        String message = MessageFormat.format(        JMeterUtils.getResString("cssjquery_tester_error"), new Object[] { cssJqueryField.getText(), ex.getMessage() });        sb.append(message);        return sb.toString();    }}
0
public void renderResult(SampleResult sampleResult)
{    clearData();    String response = ViewResultsFullVisualizer.getResponseAsString(sampleResult);    cssJqueryDataField.setText(response);    cssJqueryDataField.setCaretPosition(0);}
0
public void setupTabPane()
{        if (rightSide.indexOfTab(JMeterUtils.getResString("cssjquery_tester_title")) < 0) {                        rightSide.addTab(JMeterUtils.getResString("cssjquery_tester_title"), cssJqueryPane);    }    clearData();}
0
private JPanel createCssJqueryPanel()
{    cssJqueryDataField = JSyntaxTextArea.getInstance(50, 80, true);    cssJqueryDataField.setCodeFoldingEnabled(true);    cssJqueryDataField.setEditable(false);    cssJqueryDataField.setBracketMatchingEnabled(false);    cssJqueryDataField.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_HTML);    cssJqueryDataField.setLanguage(SyntaxConstants.SYNTAX_STYLE_HTML);    cssJqueryDataField.setLineWrap(true);    cssJqueryDataField.setWrapStyleWord(true);    JScrollPane cssJqueryDataPane = JTextScrollPane.getInstance(cssJqueryDataField, true);    cssJqueryDataPane.setPreferredSize(new Dimension(0, 200));    JPanel pane = new JPanel(new BorderLayout(0, 5));    JSplitPane mainSplit = new JSplitPane(JSplitPane.VERTICAL_SPLIT, cssJqueryDataPane, createCssJqueryTasksPanel());    mainSplit.setDividerLocation(0.6d);    mainSplit.setOneTouchExpandable(true);    pane.add(mainSplit, BorderLayout.CENTER);    return pane;}
0
private static String[] getImplementations()
{    return new String[] { HtmlExtractor.EXTRACTOR_JSOUP, HtmlExtractor.EXTRACTOR_JODD, HtmlExtractor.DEFAULT_EXTRACTOR };}
0
private JPanel createCssJqueryTasksPanel()
{    GridBagLayout g = new GridBagLayout();    GridBagConstraints c = new GridBagConstraints();    JPanel cssJqueryActionPanel = new JPanel();    cssJqueryActionPanel.setLayout(g);    Border margin = new EmptyBorder(5, 5, 0, 5);    cssJqueryActionPanel.setBorder(margin);        cssJqueryField = new JLabeledTextField(JMeterUtils.getResString("cssjquery_tester_field"));    c.fill = GridBagConstraints.HORIZONTAL;    c.gridx = 0;    c.gridy = 0;    cssJqueryActionPanel.add(cssJqueryField, c);    cssJqueryLabeledChoice = new JLabeledChoice(    JMeterUtils.getResString("cssjquery_impl"), getImplementations());    c.fill = GridBagConstraints.HORIZONTAL;    c.gridx = 1;    c.gridy = 0;    cssJqueryActionPanel.add(cssJqueryLabeledChoice, c);        attributeField = new JLabeledTextField(JMeterUtils.getResString("cssjquery_attribute"));    c.fill = GridBagConstraints.HORIZONTAL;    c.gridx = 0;    c.gridy = 1;    cssJqueryActionPanel.add(attributeField, c);        JButton cssJqueryTester = new JButton(JMeterUtils.getResString("cssjquery_tester_button_test"));    cssJqueryTester.setActionCommand(CSSJQUEY_TESTER_COMMAND);    cssJqueryTester.addActionListener(this);    c.fill = GridBagConstraints.HORIZONTAL;    c.gridx = 1;    c.gridy = 1;    cssJqueryActionPanel.add(cssJqueryTester, c);    cssJqueryResultField = new JTextArea();    cssJqueryResultField.setEditable(false);    cssJqueryResultField.setLineWrap(true);    cssJqueryResultField.setWrapStyleWord(true);    JPanel cssJqueryTasksPanel = new JPanel(new BorderLayout(0, 5));    cssJqueryTasksPanel.add(cssJqueryActionPanel, BorderLayout.NORTH);    cssJqueryTasksPanel.add(GuiUtils.makeScrollPane(cssJqueryResultField), BorderLayout.CENTER);    return cssJqueryTasksPanel;}
0
public synchronized void setRightSide(JTabbedPane side)
{    rightSide = side;}
0
public synchronized void setSamplerResult(Object userObject)
{    if (userObject instanceof SampleResult) {        sampleResult = (SampleResult) userObject;    }}
0
public void setLastSelectedTab(int index)
{}
0
public String toString()
{        return JMeterUtils.getResString("cssjquery_tester_title");}
0
public void renderImage(SampleResult sampleResult)
{    clearData();        cssJqueryDataField.setText(JMeterUtils.getResString("cssjquery_render_no_text"));}
0
public void setBackgroundColor(Color backGround)
{}
0
public void renderResult(SampleResult sampleResult)
{    try {        showDocumentResponse(sampleResult);    } catch (Exception e) {        results.setText(e.toString());                    }}
1
private void showDocumentResponse(SampleResult sampleResult)
{    String response = Document.getTextFromDocument(sampleResult.getResponseData());        results.setContentType("text/plain");    setTextOptimized(response);    results.setCaretPosition(0);    resultsScrollPane.setViewportView(results);}
0
public String toString()
{        return JMeterUtils.getResString("view_results_render_document");}
0
public void renderResult(SampleResult sampleResult)
{            String response = ViewResultsFullVisualizer.getResponseAsString(sampleResult);    showRenderedResponse(response, sampleResult);}
0
protected void showRenderedResponse(String response, SampleResult res)
{    showRenderedResponse(response, res, false);}
0
protected void showRenderedResponse(String response, SampleResult res, boolean embedded)
{    if (response == null) {        results.setText("");        return;    }        int htmlIndex = response.indexOf("<HTML");        if (htmlIndex < 0) {                htmlIndex = response.indexOf("<html");    }        if (htmlIndex < 0) {        htmlIndex = 0;    }    String html = response.substring(htmlIndex);    /*         * To disable downloading and rendering of images and frames, enable the         * editor-kit. The Stream property can then be         */        results.setEditorKitForContentType(TEXT_HTML, embedded ? defaultHtmlEditor : customisedEditor);    results.setContentType(TEXT_HTML);    if (embedded) {                        results.getDocument().putProperty(Document.StreamDescriptionProperty, res.getURL());    }    /*         * Get round problems parsing <META http-equiv='content-type'         * content='text/html; charset=utf-8'> See         * <a href="http://bz.apache.org/bugzilla/show_bug.cgi?id=23315">Bug 23315</a>         *         * Is this due to a bug in Java?         */        results.getDocument().putProperty("IgnoreCharsetDirective", Boolean.TRUE);    try {                results.setText(html);    } catch (RuntimeException rte) {        results.setText("Failed to parse HTML: " + rte.getMessage());    }    results.setCaretPosition(0);    try {        resultsScrollPane.setViewportView(results);    } catch (NumberFormatException e) {                                results.setText("Failed to render HTML: " + e.getMessage() + ", use Text renderer");    }}
1
public ViewFactory getViewFactory()
{    return defaultFactory;}
0
public View create(Element elem)
{    Object o = elem.getAttributes().getAttribute(StyleConstants.NameAttribute);    if (o instanceof HTML.Tag) {        HTML.Tag kind = (HTML.Tag) o;        if (kind == HTML.Tag.FRAME) {            return new ComponentView(elem);        } else if (kind == HTML.Tag.IMG) {            return new ComponentView(elem);        }    }    return super.create(elem);}
0
public String toString()
{        return JMeterUtils.getResString("view_results_render_html");}
0
public void renderResult(SampleResult sampleResult)
{    String response = ViewResultsFullVisualizer.getResponseAsString(sampleResult);    showHTMLFormattedResponse(response);}
0
private void showHTMLFormattedResponse(String response)
{        results.setContentType("text/plain");        setTextOptimized(response == null ? "" : Jsoup.parse(response).html());    results.setCaretPosition(0);    resultsScrollPane.setViewportView(results);        resultsScrollPane.setPreferredSize(resultsScrollPane.getMinimumSize());    results.revalidate();}
0
public String toString()
{        return JMeterUtils.getResString("view_results_render_html_formatted");}
0
protected void showRenderedResponse(String response, SampleResult res)
{        showRenderedResponse(response, res, true);}
0
public String toString()
{        return JMeterUtils.getResString("view_results_render_html_embedded");}
0
public void renderResult(SampleResult sampleResult)
{    String response = ViewResultsFullVisualizer.getResponseAsString(sampleResult);    showRenderJSONResponse(response);}
0
private void showRenderJSONResponse(String response)
{        results.setContentType("text/plain");    setTextOptimized(response == null ? "" : prettyJSON(response));    results.setCaretPosition(0);    resultsScrollPane.setViewportView(results);}
0
public static String prettyJSON(String json)
{    return prettyJSON(json, TAB_SEPARATOR);}
0
public static String prettyJSON(String json, String tabSeparator)
{    try {        Object o = new JSONParser(JSONParser.DEFAULT_PERMISSIVE_MODE).parse(json);        if (o instanceof JSONObject) {            return ((JSONObject) o).toJSONString(new PrettyJSONStyle(tabSeparator));        } else if (o instanceof JSONArray) {            return ((JSONArray) o).toJSONString(new PrettyJSONStyle(tabSeparator));        }    } catch (ParseException e) {        return json;    }    return json;}
0
public String toString()
{        return JMeterUtils.getResString("view_results_render_json");}
0
private void indent(Appendable out) throws IOException
{    out.append('\n');    out.append(StringUtils.repeat(indentString, level));}
0
public void objectStart(Appendable out) throws IOException
{    super.objectStart(out);    level++;}
0
public void objectStop(Appendable out) throws IOException
{    level--;    indent(out);    super.objectStop(out);}
0
public void objectNext(Appendable out) throws IOException
{    super.objectNext(out);    indent(out);}
0
public void objectEndOfKey(Appendable out) throws IOException
{    super.objectEndOfKey(out);    out.append(' ');}
0
public void objectFirstStart(Appendable out) throws IOException
{    indent(out);    super.objectFirstStart(out);}
0
public void arrayfirstObject(Appendable out) throws IOException
{    indent(out);    super.arrayfirstObject(out);}
0
public void arrayNextElm(Appendable out) throws IOException
{    super.arrayNextElm(out);    indent(out);}
0
public void arrayStart(Appendable out) throws IOException
{    super.arrayStart(out);    level++;}
0
public void arrayStop(Appendable out) throws IOException
{    level--;    indent(out);    super.arrayStop(out);}
0
public void clearData()
{            this.regexpDataField.setText("");        this.regexpResultField.setText("");}
0
public void init()
{        regexpPane = createRegexpPanel();}
0
public void actionPerformed(ActionEvent e)
{    String command = e.getActionCommand();    if ((sampleResult != null) && (REGEXP_TESTER_COMMAND.equals(command))) {        String response = ViewResultsFullVisualizer.getResponseAsString(sampleResult);        executeAndShowRegexpTester(response);    }}
0
private void executeAndShowRegexpTester(String textToParse)
{    if (textToParse != null && textToParse.length() > 0 && this.regexpField.getText().length() > 0) {        this.regexpResultField.setText(process(textToParse));                this.regexpResultField.setCaretPosition(0);    }}
0
private String process(String textToParse)
{    Perl5Matcher matcher = new Perl5Matcher();    PatternMatcherInput input = new PatternMatcherInput(textToParse);    PatternCacheLRU pcLRU = new PatternCacheLRU();    Pattern pattern;    try {        pattern = pcLRU.getPattern(regexpField.getText(), Perl5Compiler.READ_ONLY_MASK);    } catch (MalformedCachePatternException e) {        return e.toString();    }    List<MatchResult> matches = new LinkedList<>();    while (matcher.contains(input, pattern)) {        matches.add(matcher.getMatch());    }        StringBuilder sb = new StringBuilder();    final int size = matches.size();    sb.append("Match count: ").append(size).append("\n");    for (int j = 0; j < size; j++) {        MatchResult mr = matches.get(j);        final int groups = mr.groups();        for (int i = 0; i < groups; i++) {            sb.append("Match[").append(j + 1).append("][").append(i).append("]=").append(mr.group(i)).append("\n");        }    }    return sb.toString();}
0
public void renderResult(SampleResult sampleResult)
{    clearData();    String response = ViewResultsFullVisualizer.getResponseAsString(sampleResult);    regexpDataField.setText(response);    regexpDataField.setCaretPosition(0);}
0
public void setupTabPane()
{        if (rightSide.indexOfTab(JMeterUtils.getResString("regexp_tester_title")) < 0) {                        rightSide.addTab(JMeterUtils.getResString("regexp_tester_title"), regexpPane);    }    clearData();}
0
private JPanel createRegexpPanel()
{    regexpDataField = new JTextArea();    regexpDataField.setEditable(false);    regexpDataField.setLineWrap(true);    regexpDataField.setWrapStyleWord(true);    JScrollPane regexpDataPane = GuiUtils.makeScrollPane(regexpDataField);    regexpDataPane.setPreferredSize(new Dimension(0, 200));    JPanel pane = new JPanel(new BorderLayout(0, 5));    JSplitPane mainSplit = new JSplitPane(JSplitPane.VERTICAL_SPLIT, regexpDataPane, createRegexpTasksPanel());    mainSplit.setDividerLocation(0.6d);    mainSplit.setOneTouchExpandable(true);    pane.add(mainSplit, BorderLayout.CENTER);    return pane;}
0
private JPanel createRegexpTasksPanel()
{    JPanel regexpActionPanel = new JPanel();    regexpActionPanel.setLayout(new BoxLayout(regexpActionPanel, BoxLayout.X_AXIS));    Border margin = new EmptyBorder(5, 5, 0, 5);    regexpActionPanel.setBorder(margin);        regexpField = new JLabeledTextField(JMeterUtils.getResString("regexp_tester_field"));    regexpActionPanel.add(regexpField, BorderLayout.WEST);        JButton regexpTester = new JButton(JMeterUtils.getResString("regexp_tester_button_test"));    regexpTester.setActionCommand(REGEXP_TESTER_COMMAND);    regexpTester.addActionListener(this);    regexpActionPanel.add(regexpTester, BorderLayout.EAST);    regexpResultField = new JTextArea();    regexpResultField.setEditable(false);    regexpResultField.setLineWrap(true);    regexpResultField.setWrapStyleWord(true);    JPanel regexpTasksPanel = new JPanel(new BorderLayout(0, 5));    regexpTasksPanel.add(regexpActionPanel, BorderLayout.NORTH);    regexpTasksPanel.add(GuiUtils.makeScrollPane(regexpResultField), BorderLayout.CENTER);    return regexpTasksPanel;}
0
public synchronized void setRightSide(JTabbedPane side)
{    rightSide = side;}
0
public synchronized void setSamplerResult(Object userObject)
{    if (userObject instanceof SampleResult) {        sampleResult = (SampleResult) userObject;    }}
0
public void setLastSelectedTab(int index)
{}
0
public String toString()
{        return JMeterUtils.getResString("regexp_tester_title");}
0
public void renderImage(SampleResult sampleResult)
{    clearData();        regexpDataField.setText(JMeterUtils.getResString("regexp_render_no_text"));}
0
public void setBackgroundColor(Color backGround)
{}
0
public void renderResult(SampleResult sampleResult)
{    String response = ViewResultsFullVisualizer.getResponseAsString(sampleResult);    showTextResponse(response);}
0
private void showTextResponse(String response)
{        results.setContentType("text/plain");        setTextOptimized(response == null ? "" : response);    results.setCaretPosition(0);    resultsScrollPane.setViewportView(results);        resultsScrollPane.setPreferredSize(resultsScrollPane.getMinimumSize());    results.revalidate();}
0
public String toString()
{        return JMeterUtils.getResString("view_results_render_text");}
0
public void renderResult(SampleResult sampleResult)
{    showRenderXMLResponse(sampleResult);}
0
private void showRenderXMLResponse(SampleResult res)
{        results.setContentType("text/xml");    results.setCaretPosition(0);    byte[] source = res.getResponseData();    final ByteArrayInputStream baIS = new ByteArrayInputStream(source);    for (int i = 0; i < source.length - XML_PFX.length; i++) {        if (JOrphanUtils.startsWith(source, XML_PFX, i)) {                        baIS.skip(i);            break;        }    }    StringWriter sw = new StringWriter();    Tidy tidy = XPathUtil.makeTidyParser(true, true, true, sw);    org.w3c.dom.Document document = tidy.parseDOM(baIS, null);    document.normalize();    if (tidy.getParseErrors() > 0) {        showErrorMessageDialog(sw.toString(), "Tidy: " + tidy.getParseErrors() + " errors, " + tidy.getParseWarnings() + " warnings", JOptionPane.WARNING_MESSAGE);    }    JPanel domTreePanel = new DOMTreePanel(document);    new ExpandPopupMenu().add(domTreePanel);    resultsScrollPane.setViewportView(domTreePanel);}
0
public void clearData()
{    super.clearData();        resultsScrollPane.setViewportView(null);}
0
 void setTree(JTree tree)
{    this.tree = tree;}
0
public void actionPerformed(ActionEvent e)
{    if (e.getSource() == expand) {        expandAll(tree.getSelectionPath());    }    if (e.getSource() == collapse) {        collapseAll(tree.getSelectionPath());    }}
0
private void collapseAll(TreePath parent)
{    applyToChildren(parent, this::collapseAll);    tree.collapsePath(parent);}
0
private void expandAll(TreePath parent)
{    applyToChildren(parent, this::expandAll);    tree.expandPath(parent);}
0
private void applyToChildren(TreePath parent, Consumer<TreePath> method)
{    TreeNode node = (TreeNode) parent.getLastPathComponent();    Enumeration<?> e = node.children();    while (e.hasMoreElements()) {        TreeNode n = (TreeNode) e.nextElement();        TreePath path = parent.pathByAddingChild(n);        method.accept(path);    }}
0
private Node getFirstElement(Node parent)
{    NodeList childNodes = parent.getChildNodes();        Node toReturn = parent;    for (int i = 0; i < childNodes.getLength(); i++) {        Node childNode = childNodes.item(i);        toReturn = childNode;        if (childNode.getNodeType() == Node.ELEMENT_NODE) {            break;        }    }    return toReturn;}
0
public Component getTreeCellRendererComponent(JTree tree, Object value, boolean sel, boolean expanded, boolean leaf, int row, boolean phasFocus)
{    super.getTreeCellRendererComponent(tree, value, sel, expanded, leaf, row, phasFocus);    DefaultMutableTreeNode valueTreeNode = (DefaultMutableTreeNode) value;        setToolTipText(getHTML(valueTreeNode.toString(), "<br>", 100));    return this;}
0
private String getHTML(String str, String separator, int maxChar)
{        StringBuilder strBuf = new StringBuilder("<html><body bgcolor=\"yellow\"><b>");    char[] chars = str.toCharArray();    for (int i = 0; i < chars.length; i++) {        if (i % maxChar == 0 && i != 0) {            strBuf.append(separator);        }        strBuf.append(encode(chars[i]));    }        strBuf.append("</b></body></html>");    return strBuf.toString();}
0
private String encode(char c)
{    String toReturn = String.valueOf(c);    switch(c) {        case         '<':                        toReturn = "&lt;";            break;        case         '>':                        toReturn = "&gt;";            break;        case         '\'':                        toReturn = "&apos;";            break;        case         '\"':                        toReturn = "&quot;";            break;        default:                        break;    }    return toReturn;}
0
public void mouseClicked(MouseEvent e)
{    if (SwingUtilities.isRightMouseButton(e)) {        int x = e.getX();        int y = e.getY();        JTree tree = (JTree) e.getSource();        int rowIndex = tree.getClosestRowForLocation(x, y);        if (rowIndex > -1) {            tree.setSelectionRow(rowIndex);            popupMenu.show(tree, x, y);        }    }}
0
public void mousePressed(MouseEvent e)
{}
0
public void mouseReleased(MouseEvent e)
{}
0
public void mouseEntered(MouseEvent e)
{}
0
public void mouseExited(MouseEvent e)
{}
0
private static void showErrorMessageDialog(String message, String title, int messageType)
{    JOptionPane.showMessageDialog(null, message, title, messageType);}
0
public String toString()
{        return JMeterUtils.getResString("view_results_render_xml");}
0
public void clearData()
{            this.xmlDataField.setText("");        this.xpathResultField.setText("");}
0
public void init()
{        xmlWithXPathPane = createXpathExtractorPanel();}
0
public void actionPerformed(ActionEvent e)
{    String command = e.getActionCommand();    if ((sampleResult != null) && (XPATH_TESTER_COMMAND.equals(command))) {        String response = xmlDataField.getText();        XPathExtractor extractor = new XPathExtractor();        xmlConfPanel.modifyTestElement(extractor);        extractor.setFragment(getFragment.isSelected());        executeAndShowXPathTester(response, extractor);    }}
0
private void executeAndShowXPathTester(String textToParse, XPathExtractor extractor)
{    if (textToParse != null && textToParse.length() > 0 && this.xpathExpressionField.getText().length() > 0) {        this.xpathResultField.setText(process(textToParse, extractor));                this.xpathResultField.setCaretPosition(0);    }}
0
private String process(String textToParse, XPathExtractor extractor)
{    try {        Document doc = parseResponse(textToParse, extractor);        List<String> matchStrings = new ArrayList<>();        XPathUtil.putValuesForXPathInList(doc, xpathExpressionField.getText(), matchStrings, extractor.getFragment());        StringBuilder builder = new StringBuilder();        int nbFound = matchStrings.size();        builder.append("Match count: ").append(nbFound).append("\n");        for (int i = 0; i < nbFound; i++) {            builder.append("Match[").append(i + 1).append("]=").append(matchStrings.get(i)).append("\n");        }        return builder.toString();    } catch (Exception e) {        return "Exception:" + ExceptionUtils.getStackTrace(e);    }}
0
private Document parseResponse(String unicodeData, XPathExtractor extractor) throws IOException, ParserConfigurationException, SAXException, TidyException
{                        byte[] utf8data = unicodeData.getBytes(StandardCharsets.UTF_8);    ByteArrayInputStream in = new ByteArrayInputStream(utf8data);    boolean isXML = JOrphanUtils.isXML(utf8data);        return XPathUtil.makeDocument(in, false, false, extractor.useNameSpace(), extractor.isTolerant(), extractor.isQuiet(), extractor.showWarnings(), extractor.reportErrors(), isXML, extractor.isDownloadDTDs());}
0
public void renderResult(SampleResult sampleResult)
{    String response = ViewResultsFullVisualizer.getResponseAsString(sampleResult);    try {        xmlDataField.setText(response == null ? "" : response);        xmlDataField.setCaretPosition(0);    } catch (Exception e) {                xmlDataField.setText("Exception converting to XML:" + response + ", message:" + e.getMessage());        xmlDataField.setCaretPosition(0);    }}
1
public String toString()
{        return JMeterUtils.getResString("xpath_tester");}
0
public void setupTabPane()
{        if (rightSide.indexOfTab(JMeterUtils.getResString("xpath_tester_title")) < 0) {                        rightSide.addTab(JMeterUtils.getResString("xpath_tester_title"), xmlWithXPathPane);    }    clearData();}
0
private JPanel createXpathExtractorPanel()
{    xmlDataField = JSyntaxTextArea.getInstance(50, 80, true);    xmlDataField.setCodeFoldingEnabled(true);    xmlDataField.setEditable(false);    xmlDataField.setBracketMatchingEnabled(false);    xmlDataField.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_XML);    xmlDataField.setLanguage(SyntaxConstants.SYNTAX_STYLE_XML);    xmlDataField.setLineWrap(true);    xmlDataField.setWrapStyleWord(true);    JScrollPane xmlDataPane = JTextScrollPane.getInstance(xmlDataField, true);    xmlDataPane.setPreferredSize(new Dimension(0, 200));    JPanel pane = new JPanel(new BorderLayout(0, 5));    JSplitPane mainSplit = new JSplitPane(JSplitPane.VERTICAL_SPLIT, xmlDataPane, createXpathExtractorTasksPanel());    mainSplit.setDividerLocation(0.6d);    mainSplit.setOneTouchExpandable(true);    pane.add(mainSplit, BorderLayout.CENTER);    return pane;}
0
private JPanel createXpathExtractorTasksPanel()
{    Box xpathActionPanel = Box.createVerticalBox();    Box selectorAndButton = Box.createHorizontalBox();    Border margin = new EmptyBorder(5, 5, 0, 5);    xpathActionPanel.setBorder(margin);        xpathExpressionField = new JLabeledTextField(JMeterUtils.getResString("xpath_tester_field"));        JButton xpathTester = new JButton(JMeterUtils.getResString("xpath_tester_button_test"));    xpathTester.setActionCommand(XPATH_TESTER_COMMAND);    xpathTester.addActionListener(this);    selectorAndButton.add(xpathExpressionField);    selectorAndButton.add(xpathTester);    xpathActionPanel.add(selectorAndButton);    xpathActionPanel.add(xmlConfPanel);    xpathActionPanel.add(getFragment);    xpathResultField = new JTextArea();    xpathResultField.setEditable(false);    xpathResultField.setLineWrap(true);    xpathResultField.setWrapStyleWord(true);    JPanel xpathTasksPanel = new JPanel(new BorderLayout(0, 5));    xpathTasksPanel.add(xpathActionPanel, BorderLayout.NORTH);    xpathTasksPanel.add(GuiUtils.makeScrollPane(xpathResultField), BorderLayout.CENTER);    return xpathTasksPanel;}
0
public synchronized void setRightSide(JTabbedPane side)
{    rightSide = side;}
0
public synchronized void setSamplerResult(Object userObject)
{    if (userObject instanceof SampleResult) {        sampleResult = (SampleResult) userObject;    }}
0
public void setLastSelectedTab(int index)
{}
0
public void renderImage(SampleResult sampleResult)
{    clearData();        xmlDataField.setText(JMeterUtils.getResString("xpath_tester_no_text"));}
0
public void setBackgroundColor(Color backGround)
{}
0
public void clearData()
{            this.xmlDataField.setText("");        this.xpathResultField.setText("");}
0
public void init()
{        xmlWithXPathPane = createXpathExtractorPanel();}
0
public void actionPerformed(ActionEvent e)
{    String command = e.getActionCommand();    if ((sampleResult != null) && (XPATH_TESTER_COMMAND.equals(command))) {        String response = xmlDataField.getText();        XPath2Extractor extractor = new XPath2Extractor();        extractor.setFragment(getFragment.isSelected());        executeAndShowXPathTester(response, extractor);    } else if ((sampleResult != null) && (XPATH_NAMESPACES_COMMAND.equals(command))) {        String response = xmlDataField.getText();        this.xpathResultField.setText(getDocumentNamespaces(response));    }}
0
private void executeAndShowXPathTester(String textToParse, XPath2Extractor extractor)
{    if (textToParse != null && textToParse.length() > 0 && this.xpathExpressionField.getText().length() > 0) {        this.xpathResultField.setText(process(textToParse, extractor));                this.xpathResultField.setCaretPosition(0);    }}
0
private String process(String textToParse, XPath2Extractor extractor)
{    try {        List<String> matchStrings = new ArrayList<>();        XPathUtil.putValuesForXPathInListUsingSaxon(textToParse, xpathExpressionField.getText(), matchStrings, extractor.getFragment(), -1, namespacesTA.getText());        StringBuilder builder = new StringBuilder();        int nbFound = matchStrings.size();        builder.append("Match count: ").append(nbFound).append("\n");        for (int i = 0; i < nbFound; i++) {            builder.append("Match[").append(i + 1).append("]=").append(matchStrings.get(i)).append("\n");        }        return builder.toString();    } catch (Exception e) {        return "Exception:" + ExceptionUtils.getStackTrace(e);    }}
0
private String getDocumentNamespaces(String textToParse)
{    StringBuilder result = new StringBuilder();    try {        List<String[]> namespaces = XPathUtil.getNamespaces(textToParse);        for (int i = 0; i < namespaces.size(); i++) {            result.append(namespaces.get(i)[0]).append(            '=').append(namespaces.get(i)[1]).append(            '\n');        }        return result.toString();    } catch (Exception e) {        return "Exception:" + ExceptionUtils.getStackTrace(e);    }}
0
public void renderResult(SampleResult sampleResult)
{    String response = ViewResultsFullVisualizer.getResponseAsString(sampleResult);    try {        xmlDataField.setText(response == null ? "" : response);        xmlDataField.setCaretPosition(0);    } catch (Exception e) {                xmlDataField.setText("Exception converting to XML:" + response + ", message:" + e.getMessage());        xmlDataField.setCaretPosition(0);    }}
1
public String toString()
{        return JMeterUtils.getResString("xpath2_tester");}
0
public void setupTabPane()
{        if (rightSide.indexOfTab(JMeterUtils.getResString("xpath_tester_title")) < 0) {                        rightSide.addTab(JMeterUtils.getResString("xpath_tester_title"), xmlWithXPathPane);    }    clearData();}
0
private JPanel createXpathExtractorPanel()
{    xmlDataField = JSyntaxTextArea.getInstance(50, 80, true);    xmlDataField.setCodeFoldingEnabled(true);    xmlDataField.setEditable(false);    xmlDataField.setBracketMatchingEnabled(false);    xmlDataField.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_XML);    xmlDataField.setLanguage(SyntaxConstants.SYNTAX_STYLE_XML);    xmlDataField.setLineWrap(true);    xmlDataField.setWrapStyleWord(true);    JScrollPane xmlDataPane = JTextScrollPane.getInstance(xmlDataField, true);    xmlDataPane.setMinimumSize(new Dimension(0, 100));    xmlDataPane.setPreferredSize(new Dimension(0, 200));    JPanel highPane = new JPanel(new GridLayout(1, 1));    highPane.add(xmlDataPane);    JPanel pane = new JPanel(new GridLayout(1, 1));    JSplitPane mainSplit = new JSplitPane(JSplitPane.VERTICAL_SPLIT, highPane, createXpathExtractorTasksPanel());    mainSplit.setDividerLocation(0.5d);    mainSplit.setOneTouchExpandable(true);    pane.add(mainSplit);    return pane;}
0
private JPanel createXpathExtractorTasksPanel()
{    xpathExpressionField = new JTextField(20);    xpathExpressionField.setMinimumSize(new Dimension(50, 20));        JLabel label = new JLabel(JMeterUtils.getResString("xpath_tester_field"));        JButton xpathTester = new JButton(JMeterUtils.getResString("xpath_tester_button_test"));    xpathTester.setActionCommand(XPATH_TESTER_COMMAND);    xpathTester.addActionListener(this);        JButton xpathTesterNamespaces = new JButton(JMeterUtils.getResString("xpath_namespaces"));    xpathTesterNamespaces.setActionCommand(XPATH_NAMESPACES_COMMAND);    xpathTesterNamespaces.addActionListener(this);    JPanel panel = new JPanel(new GridBagLayout());    GridBagConstraints gbc = new GridBagConstraints();    initConstraints(gbc);    panel.add(label, gbc.clone());    gbc.gridx++;    gbc.gridwidth = 2;    panel.add(xpathExpressionField, gbc.clone());    gbc.gridx += 2;    gbc.gridwidth = 2;    panel.add(xpathTester, gbc.clone());    gbc.gridx += 2;    gbc.gridwidth = 2;    panel.add(xpathTesterNamespaces, gbc.clone());    gbc.weighty = 1;    gbc.gridx = 0;    gbc.gridy++;    gbc.gridwidth = 2;    panel.add(new JLabel(JMeterUtils.getResString("xpath_extractor_user_namespaces")), gbc.clone());    gbc.gridx++;    gbc.gridwidth = 6;    namespacesTA = JSyntaxTextArea.getInstance(5, 40);    panel.add(JTextScrollPane.getInstance(namespacesTA, true), gbc.clone());    gbc.gridx = 0;    gbc.gridy++;    gbc.gridwidth = 8;    panel.add(getFragment, gbc.clone());    gbc.gridx = 0;    gbc.gridy++;    gbc.gridwidth = 8;    xpathResultField = JSyntaxTextArea.getInstance(10, 70, true);    xpathResultField.setEditable(false);    xpathResultField.setLineWrap(true);    xpathResultField.setWrapStyleWord(true);    gbc.fill = GridBagConstraints.HORIZONTAL;    panel.add(JTextScrollPane.getInstance(xpathResultField, true), gbc.clone());    return panel;}
0
private void initConstraints(GridBagConstraints gbc)
{    gbc.fill = GridBagConstraints.HORIZONTAL;    gbc.gridheight = 1;    gbc.gridwidth = 1;    gbc.gridx = 0;    gbc.gridy = 0;    gbc.weightx = 1;    gbc.weighty = 1;}
0
public synchronized void setRightSide(JTabbedPane side)
{    rightSide = side;}
0
public synchronized void setSamplerResult(Object userObject)
{    if (userObject instanceof SampleResult) {        sampleResult = (SampleResult) userObject;    }}
0
public void setLastSelectedTab(int index)
{}
0
public void renderImage(SampleResult sampleResult)
{    clearData();        xmlDataField.setText(JMeterUtils.getResString("xpath_tester_no_text"));}
0
public void setBackgroundColor(Color backGround)
{}
0
public void renderResult(SampleResult sampleResult)
{    String response = ViewResultsFullVisualizer.getResponseAsString(sampleResult);    showRenderedResponse(response, sampleResult);}
0
protected void showRenderedResponse(String response, SampleResult res)
{    if (response == null) {        results.setText("");        return;    }        int htmlIndex = response.indexOf("<HTML");        if (htmlIndex < 0) {                htmlIndex = response.indexOf("<html");    }        if (htmlIndex < 0) {        htmlIndex = 0;    }    final String html = response.substring(htmlIndex);    if (browserPanel == null) {        browserPanel = initComponents(html);    }    browserPanel.setVisible(true);    resultsScrollPane.setViewportView(browserPanel);    Platform.runLater(() -> engine.loadContent(html));}
0
private JPanel initComponents(String htmlContent)
{        jfxPanel = new JFXPanel();    createScene(htmlContent);    progressBar.setPreferredSize(new Dimension(150, 18));    progressBar.setStringPainted(true);    JPanel statusBar = new JPanel(new BorderLayout(5, 0));    statusBar.setBorder(BorderFactory.createEmptyBorder(3, 5, 3, 5));    statusBar.add(lblStatus, BorderLayout.CENTER);    statusBar.add(progressBar, BorderLayout.WEST);    JPanel panel = new JPanel(new BorderLayout());    panel.setPreferredSize(new Dimension(1024, 600));    panel.add(statusBar, BorderLayout.NORTH);    panel.add(jfxPanel, BorderLayout.CENTER);    return panel;}
0
private void createScene(final String htmlContent)
{    Platform.setImplicitExit(false);    Platform.runLater(() -> {        WebView view = new WebView();        engine = view.getEngine();        engine.setOnStatusChanged(event -> SwingUtilities.invokeLater(() -> lblStatus.setText(event.getData())));        engine.getLoadWorker().workDoneProperty().addListener((ChangeListener<Number>) (observableValue, oldValue, newValue) -> SwingUtilities.invokeLater(() -> progressBar.setValue(newValue.intValue())));        engine.getLoadWorker().exceptionProperty().addListener((ObservableValue<? extends Throwable> o, Throwable old, final Throwable value) -> {            if (engine.getLoadWorker().getState() == State.FAILED) {                SwingUtilities.invokeLater(() -> JOptionPane.showMessageDialog(resultsScrollPane, (value != null) ? engine.getLocation() + "\n" + value.getMessage() : engine.getLocation() + "\nUnexpected error.", "Loading error...", JOptionPane.ERROR_MESSAGE));            }        });        jfxPanel.setScene(new Scene(view));    });}
0
public String toString()
{        return JMeterUtils.getResString("view_results_render_browser");}
0
public void clearData()
{    super.clearData();    if (browserPanel == null) {        browserPanel = initComponents("");    }    Platform.runLater(() -> engine.loadContent(""));}
0
public void clearData()
{    for (RequestView requestView : listRequestView) {        requestView.clearData();    }}
0
public void setSamplerResult(SampleResult samplerResult)
{    for (RequestView requestView : listRequestView) {        requestView.setSamplerResult(samplerResult);    }}
0
public JPanel getPanel()
{    return panel;}
0
public void init()
{    paneRaw = new JPanel(new BorderLayout(0, 5));    sampleDataField = JSyntaxTextArea.getInstance(20, 80, true);    sampleDataField.setEditable(false);    sampleDataField.setLineWrap(true);    sampleDataField.setWrapStyleWord(true);    JPanel requestAndSearchPanel = new JPanel(new BorderLayout());    requestAndSearchPanel.add(new JSyntaxSearchToolBar(sampleDataField).getToolBar(), BorderLayout.NORTH);    requestAndSearchPanel.add(JTextScrollPane.getInstance(sampleDataField), BorderLayout.CENTER);    headerData = JSyntaxTextArea.getInstance(20, 80, true);    headerData.setEditable(false);    headerData.setLineWrap(true);    headerData.setWrapStyleWord(true);    JPanel headerAndSearchPanel = new JPanel(new BorderLayout());    headerAndSearchPanel.add(new JSyntaxSearchToolBar(headerData).getToolBar(), BorderLayout.NORTH);    headerAndSearchPanel.add(JTextScrollPane.getInstance(headerData), BorderLayout.CENTER);    JTabbedPane tabbedPane = new JTabbedPane(JTabbedPane.TOP);    tabbedPane.addTab(JMeterUtils.getResString("view_results_request_body"), new JScrollPane(requestAndSearchPanel));    tabbedPane.addTab(JMeterUtils.getResString("view_results_request_headers"), new JScrollPane(headerAndSearchPanel));    paneRaw.add(GuiUtils.makeScrollPane(tabbedPane));}
0
public void clearData()
{        sampleDataField.setInitialText("");        headerData.setInitialText("");}
0
public void setSamplerResult(Object objectResult)
{    if (objectResult instanceof SampleResult) {        SampleResult sampleResult = (SampleResult) objectResult;                String rh = sampleResult.getRequestHeaders();        if (rh != null && !rh.isEmpty()) {            headerData.setInitialText(rh);            sampleDataField.setCaretPosition(0);        }        String data = sampleResult.getSamplerData();        if (data != null && !data.isEmpty()) {            sampleDataField.setText(data);            sampleDataField.setCaretPosition(0);        } else {                        sampleDataField.setText(JMeterUtils.getResString(            "view_results_table_request_raw_nodata"));        }    }}
0
public JPanel getPanel()
{    return paneRaw;}
0
public String getLabel()
{    return JMeterUtils.getResString(KEY_LABEL);}
0
public void setData(double[][] data)
{    this.data = data;}
0
public void setTitle(String title)
{    this.title = title;}
0
public void setXAxisTitle(String title)
{    this.xAxisTitle = title;}
0
public void setYAxisTitle(String title)
{    this.yAxisTitle = title;}
0
public void setXAxisLabels(String[] labels)
{    this.xAxisLabels = labels;}
0
public void setYAxisLabels(String label)
{    this.yAxisLabel = label;}
0
public void setLegendLabels(String[] labels)
{    this.legendLabels = labels;}
0
public void setWidth(int w)
{    this.width = w;}
0
public void setHeight(int h)
{    this.height = h;}
0
public void setIncrYAxisScale(int incrYAxisScale)
{    this.incrYAxisScale = incrYAxisScale;}
0
public int getMaxYAxisScale()
{    return maxYAxisScale;}
0
public void setMaxYAxisScale(int maxYAxisScale)
{    this.maxYAxisScale = maxYAxisScale;}
0
public Color[] getColor()
{    return color;}
0
public void setColor(Color[] color)
{    this.color = color;}
0
public Font getTitleFont()
{    return titleFont;}
0
public void setTitleFont(Font titleFont)
{    this.titleFont = titleFont;}
0
public Font getLegendFont()
{    return legendFont;}
0
public void setLegendFont(Font legendFont)
{    this.legendFont = legendFont;}
0
public int getLegendPlacement()
{    return legendPlacement;}
0
public void setLegendPlacement(int legendPlacement)
{    this.legendPlacement = legendPlacement;}
0
public Shape getPointShape()
{    return pointShape;}
0
public void setPointShape(Shape pointShape)
{    this.pointShape = pointShape;}
0
public float getStrokeWidth()
{    return strokeWidth;}
0
public void setStrokeWidth(float strokeWidth)
{    this.strokeWidth = strokeWidth;}
0
public boolean isShowGrouping()
{    return showGrouping;}
0
public void setShowGrouping(boolean showGrouping)
{    this.showGrouping = showGrouping;}
0
private void drawSample(String _title, String[] _xAxisLabels, String _yAxisTitle, String[] _legendLabels, double[][] _data, int _width, int _height, int _incrScaleYAxis, Color[] _color, Font legendFont, Graphics g)
{        double max = maxYAxisScale > 0 ? maxYAxisScale : getTopValue(findMax(_data), BigDecimal.ROUND_UP);    try {                if (_title.length() == 0) {                        _title = JMeterUtils.getResString("graph_resp_time_title");        }        this.setPreferredSize(new Dimension(_width, _height));                DataSeries dataSeries = new DataSeries(_xAxisLabels, null, _yAxisTitle, _title);                Stroke[] strokes = new Stroke[_legendLabels.length];        for (int i = 0; i < _legendLabels.length; i++) {            strokes[i] = new BasicStroke(strokeWidth, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND, 5f);        }        Shape[] shapes = new Shape[_legendLabels.length];        for (int i = 0; i < _legendLabels.length; i++) {            shapes[i] = pointShape;        }        LineChartProperties lineChartProperties = new LineChartProperties(strokes, shapes);                Paint[] paints = new Paint[_color.length];        System.arraycopy(_color, 0, paints, 0, _color.length);                AxisChartDataSet axisChartDataSet = new AxisChartDataSet(_data, _legendLabels, paints, ChartType.LINE, lineChartProperties);        dataSeries.addIAxisPlotDataSet(axisChartDataSet);        ChartProperties chartProperties = new ChartProperties();        LabelAxisProperties xaxis = new LabelAxisProperties();        DataAxisProperties yaxis = new DataAxisProperties();        yaxis.setUseCommas(showGrouping);        if (legendFont != null) {            yaxis.setAxisTitleChartFont(new ChartFont(legendFont, new Color(20)));            yaxis.setScaleChartFont(new ChartFont(legendFont, new Color(20)));            xaxis.setAxisTitleChartFont(new ChartFont(legendFont, new Color(20)));            xaxis.setScaleChartFont(new ChartFont(legendFont, new Color(20)));        }        if (titleFont != null) {            chartProperties.setTitleFont(new ChartFont(titleFont, new Color(0)));        }                try {                        double numInterval = _height / 50d;            double incrYAxis = max / numInterval;            double incrTopValue = _incrScaleYAxis;            if (_incrScaleYAxis == 0) {                incrTopValue = getTopValue(incrYAxis, BigDecimal.ROUND_HALF_UP);            }            if (incrTopValue < 1) {                                incrTopValue = 1.0d;            }            yaxis.setUserDefinedScale(0, incrTopValue);            yaxis.setNumItems((int) (max / incrTopValue) + 1);            yaxis.setShowGridLines(1);        } catch (PropertyException e) {                    }        AxisProperties axisProperties = new AxisProperties(xaxis, yaxis);        axisProperties.setXAxisLabelsAreVertical(true);        LegendProperties legendProperties = new LegendProperties();        legendProperties.setBorderStroke(null);        legendProperties.setPlacement(legendPlacement);        legendProperties.setIconBorderPaint(Color.WHITE);        legendProperties.setIconBorderStroke(new BasicStroke(0f, BasicStroke.CAP_SQUARE, BasicStroke.CAP_SQUARE));                legendProperties.setNumColumns(LegendAreaProperties.COLUMNS_FIT_TO_IMAGE);        if (legendPlacement == LegendAreaProperties.RIGHT || legendPlacement == LegendAreaProperties.LEFT) {            legendProperties.setNumColumns(1);        }        if (legendFont != null) {            legendProperties.setFont(legendFont);        }        AxisChart axisChart = new AxisChart(dataSeries, chartProperties, axisProperties, legendProperties, _width, _height);        axisChart.setGraphics2D((Graphics2D) g);        axisChart.render();    } catch (ChartDataException | PropertyException e) {            }}
1
private int getTopValue(double value, int roundMode)
{    String maxStr = String.valueOf(Math.round(value));    StringBuilder divValueStr = new StringBuilder(maxStr.length() + 1);    divValueStr.append("1");    for (int i = 1; i < maxStr.length(); i++) {                divValueStr.append("0");    }    int divValueInt = Integer.parseInt(divValueStr.toString());    BigDecimal round = BigDecimal.valueOf(value / divValueInt);    round = round.setScale(0, roundMode);    int topValue = round.intValue() * divValueInt;    return topValue;}
0
public void paintComponent(Graphics graphics)
{    if (data != null && this.title != null && this.xAxisLabels != null && this.yAxisLabel != null && this.yAxisTitle != null) {        drawSample(this.title, this.xAxisLabels, this.yAxisTitle, this.legendLabels, this.data, this.width, this.height, this.incrYAxisScale, this.color, this.legendFont, graphics);    }}
0
private double findMax(double[][] datas)
{    double max = 0;    for (double[] data : datas) {        for (final double value : data) {            if ((!Double.isNaN(value)) && (value > max)) {                max = value;            }        }    }    return max;}
0
public long getStartTime()
{    return startTime;}
0
public void setStartTime(long startTime)
{    this.startTime = startTime;}
0
public long getTime()
{    return time;}
0
public void setTime(long time)
{    this.time = time;}
0
public String getSamplerLabel()
{    return samplerLabel;}
0
public void setSamplerLabel(String samplerLabel)
{    this.samplerLabel = samplerLabel;}
0
public String getLabel()
{    return label;}
0
public void setLabel(String label)
{    this.label = label;}
0
public Color getLineColor()
{    return lineColor;}
0
public void setLineColor(Color lineColor)
{    this.lineColor = lineColor;}
0
private String[] keys(Map<String, ?> map)
{    return map.keySet().toArray(ArrayUtils.EMPTY_STRING_ARRAY);}
0
public void add(final SampleResult sampleResult)
{    final String sampleLabel = sampleResult.getSampleLabel();        synchronized (lockInterval) {        internalList.add(new RespTimeGraphDataBean(sampleResult.getStartTime(), sampleResult.getTime(), sampleLabel));    }    Matcher matcher = null;        if (samplerSelection.isSelected() && pattern != null) {        matcher = pattern.matcher(sampleLabel);    }    if ((matcher == null) || (matcher.find())) {        final long startTimeMS = sampleResult.getStartTime();        final long startTimeInterval = startTimeMS / intervalValue;        JMeterUtils.runSafe(false, new Runnable() {            @Override            public void run() {                synchronized (lock) {                                        if (startTimeInterval < minStartTime) {                        minStartTime = startTimeInterval;                    } else if (startTimeInterval > maxStartTime) {                        maxStartTime = startTimeInterval;                    }                                        if (!seriesNames.containsKey(sampleLabel)) {                        seriesNames.put(sampleLabel, new RespTimeGraphLineBean(sampleLabel, listColors.get(colorIdx++)));                                                if (colorIdx >= listColors.size()) {                            colorIdx = 0;                        }                    }                                        Map<Long, StatCalculatorLong> subList = pList.get(sampleLabel);                    final Long startTimeIntervalLong = Long.valueOf(startTimeInterval);                    if (subList != null) {                        long respTime = sampleResult.getTime();                        StatCalculatorLong value = subList.get(startTimeIntervalLong);                        if (value == null) {                            value = new StatCalculatorLong();                            subList.put(startTimeIntervalLong, value);                        }                        value.addValue(respTime, 1);                    } else {                                                Map<Long, StatCalculatorLong> newSubList = new LinkedHashMap<>(5);                        StatCalculatorLong helper = new StatCalculatorLong();                        helper.addValue(Long.valueOf(sampleResult.getTime()), 1);                        newSubList.put(startTimeIntervalLong, helper);                        pList.put(sampleLabel, newSubList);                    }                }            }        });    }}
0
public void run()
{    synchronized (lock) {                if (startTimeInterval < minStartTime) {            minStartTime = startTimeInterval;        } else if (startTimeInterval > maxStartTime) {            maxStartTime = startTimeInterval;        }                if (!seriesNames.containsKey(sampleLabel)) {            seriesNames.put(sampleLabel, new RespTimeGraphLineBean(sampleLabel, listColors.get(colorIdx++)));                        if (colorIdx >= listColors.size()) {                colorIdx = 0;            }        }                Map<Long, StatCalculatorLong> subList = pList.get(sampleLabel);        final Long startTimeIntervalLong = Long.valueOf(startTimeInterval);        if (subList != null) {            long respTime = sampleResult.getTime();            StatCalculatorLong value = subList.get(startTimeIntervalLong);            if (value == null) {                value = new StatCalculatorLong();                subList.put(startTimeIntervalLong, value);            }            value.addValue(respTime, 1);        } else {                        Map<Long, StatCalculatorLong> newSubList = new LinkedHashMap<>(5);            StatCalculatorLong helper = new StatCalculatorLong();            helper.addValue(Long.valueOf(sampleResult.getTime()), 1);            newSubList.put(startTimeIntervalLong, helper);            pList.put(sampleLabel, newSubList);        }    }}
0
public void makeGraph()
{    Dimension size = graphPanel.getSize();        int width = (int) size.getWidth();    int height = (int) size.getHeight();    if (!dynamicGraphSize.isSelected()) {        String wstr = graphWidth.getText();        String hstr = graphHeight.getText();        if (wstr.length() != 0) {            width = Integer.parseInt(wstr);        }        if (hstr.length() != 0) {            height = Integer.parseInt(hstr);        }    }    String yAxisStr = maxValueYAxisLabel.getText();    int maxYAxisScale = yAxisStr.length() == 0 ? 0 : Integer.parseInt(yAxisStr);    graphPanel.setData(this.getData());    graphPanel.setTitle(graphTitle.getText());    graphPanel.setMaxYAxisScale(maxYAxisScale);    graphPanel.setYAxisLabels(Y_AXIS_LABEL);    graphPanel.setYAxisTitle(Y_AXIS_TITLE);    graphPanel.setXAxisLabels(getXAxisLabels());    graphPanel.setLegendLabels(getLegendLabels());    graphPanel.setColor(getLinesColors());    graphPanel.setShowGrouping(numberShowGrouping.isSelected());    graphPanel.setLegendPlacement(StatGraphProperties.getPlacementNameMap().get(legendPlacementList.getSelectedItem()).intValue());    graphPanel.setPointShape(StatGraphProperties.getPointShapeMap().get(pointShapeLine.getSelectedItem()));    graphPanel.setStrokeWidth(Float.parseFloat((String) strokeWidthList.getSelectedItem()));    graphPanel.setTitleFont(new Font(StatGraphProperties.getFontNameMap().get(titleFontNameList.getSelectedItem()), StatGraphProperties.getFontStyleMap().get(titleFontStyleList.getSelectedItem()).intValue(), Integer.parseInt((String) titleFontSizeList.getSelectedItem())));    graphPanel.setLegendFont(new Font(StatGraphProperties.getFontNameMap().get(fontNameList.getSelectedItem()), StatGraphProperties.getFontStyleMap().get(fontStyleList.getSelectedItem()).intValue(), Integer.parseInt((String) fontSizeList.getSelectedItem())));    graphPanel.setHeight(height);    graphPanel.setWidth(width);    graphPanel.setIncrYAxisScale(getIncrScaleYAxis());        graphPanel.repaint();}
0
public double[][] getData()
{    int size = pList.size();        int max = (int) durationTest;    double[][] data = new double[size][max];    double nanLast = 0;    double nanBegin = 0;    List<Double> nanList = new ArrayList<>();    int s = 0;    for (Map<Long, StatCalculatorLong> subList : pList.values()) {        int idx = 0;        while (idx < durationTest) {            long keyShift = minStartTime + idx;            StatCalculatorLong value = subList.get(Long.valueOf(keyShift));            if (value != null) {                nanLast = value.getMean();                data[s][idx] = nanLast;                                int nlsize = nanList.size();                if (nlsize > 0) {                    double valPrev = nanBegin;                    for (int cnt = 0; cnt < nlsize; cnt++) {                        int pos = idx - (nlsize - cnt);                        if (pos < 0) {                            pos = 0;                        }                        valPrev = valPrev + ((nanLast - nanBegin) / (nlsize + 2));                        data[s][pos] = valPrev;                    }                    nanList.clear();                }            } else {                nanList.add(Double.valueOf(Double.NaN));                nanBegin = nanLast;                data[s][idx] = Double.NaN;            }            idx++;        }        s++;    }    return data;}
0
public String getLabelResource()
{        return "graph_resp_time_title";}
0
public void clearData()
{    synchronized (lock) {        internalList.clear();        seriesNames.clear();        pList.clear();        minStartTime = Long.MAX_VALUE;        maxStartTime = Long.MIN_VALUE;        durationTest = 0;        colorIdx = 0;    }    tabbedGraph.setSelectedIndex(0);}
0
private void init()
{        this.setLayout(new BorderLayout());        JPanel mainPanel = new JPanel();    Border margin = new EmptyBorder(10, 10, 5, 10);    Border margin2 = new EmptyBorder(10, 10, 5, 10);    mainPanel.setBorder(margin);    mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));    mainPanel.add(makeTitlePanel());    JPanel settingsPane = new VerticalPanel();    settingsPane.setBorder(margin2);    graphPanel = new RespTimeGraphChart();    graphPanel.setPreferredSize(new Dimension(DEFAULT_WIDTH, DEFAULT_HEIGTH));    settingsPane.add(createGraphActionsPane());    settingsPane.add(createGraphSettingsPane());    settingsPane.add(createGraphTitlePane());    settingsPane.add(createLinePane());    settingsPane.add(createGraphDimensionPane());    JPanel axisPane = new JPanel(new BorderLayout());    axisPane.add(createGraphXAxisPane(), BorderLayout.WEST);    axisPane.add(createGraphYAxisPane(), BorderLayout.CENTER);    settingsPane.add(axisPane);    settingsPane.add(createLegendPane());        tabbedGraph.addTab(JMeterUtils.getResString("aggregate_graph_tab_settings"), settingsPane);        tabbedGraph.addTab(JMeterUtils.getResString("aggregate_graph_tab_graph"), graphPanel);        ChangeListener changeListener = new ChangeListener() {        @Override        public void stateChanged(ChangeEvent changeEvent) {            JTabbedPane srcTab = (JTabbedPane) changeEvent.getSource();            int index = srcTab.getSelectedIndex();            if (srcTab.getTitleAt(index).equals(JMeterUtils.getResString("aggregate_graph_tab_graph"))) {                                actionMakeGraph();            }        }    };    tabbedGraph.addChangeListener(changeListener);    this.add(mainPanel, BorderLayout.NORTH);    this.add(tabbedGraph, BorderLayout.CENTER);}
0
public void stateChanged(ChangeEvent changeEvent)
{    JTabbedPane srcTab = (JTabbedPane) changeEvent.getSource();    int index = srcTab.getSelectedIndex();    if (srcTab.getTitleAt(index).equals(JMeterUtils.getResString("aggregate_graph_tab_graph"))) {                actionMakeGraph();    }}
0
public void actionPerformed(ActionEvent event)
{    boolean forceReloadData = false;    final Object eventSource = event.getSource();    if (eventSource == displayButton) {        actionMakeGraph();    } else if (eventSource == saveGraph) {        saveGraphToFile = true;        try {            ActionRouter.getInstance().getAction(ActionNames.SAVE_GRAPHICS, SaveGraphics.class.getName()).doAction(new ActionEvent(this, event.getID(), ActionNames.SAVE_GRAPHICS));        } catch (Exception e) {                    }    } else if (eventSource == syncWithName) {        graphTitle.setText(namePanel.getName());    } else if (eventSource == dynamicGraphSize) {        enableDynamicGraph(dynamicGraphSize.isSelected());    } else if (eventSource == samplerSelection) {        enableSamplerSelection(samplerSelection.isSelected());        if (!samplerSelection.isSelected()) {                        forceReloadData = true;        }    }        if (eventSource == applyFilterBtn || eventSource == intervalButton || forceReloadData) {        if (eventSource == intervalButton) {            intervalValue = Integer.parseInt(intervalField.getText());        }        if (eventSource == applyFilterBtn && samplerSelection.isSelected() && samplerMatchLabel.getText() != null && samplerMatchLabel.getText().length() > 0) {            pattern = createPattern(samplerMatchLabel.getText());        } else if (forceReloadData) {            pattern = null;        }        if (getFile() != null && getFile().length() > 0) {                        clearData();            FilePanel filePanel = (FilePanel) getFilePanel();            filePanel.actionPerformed(event);        } else {                        synchronized (lockInterval) {                if (internalList.size() >= 2) {                    List<RespTimeGraphDataBean> tempList = new ArrayList<>();                    tempList.addAll(internalList);                    this.clearData();                    for (RespTimeGraphDataBean data : tempList) {                        SampleResult sr = new SampleResult(data.getStartTime(), data.getTime());                        sr.setSampleLabel(data.getSamplerLabel());                        this.add(sr);                    }                }            }        }    }}
1
private void actionMakeGraph()
{    String msgErr = null;        durationTest = maxStartTime - minStartTime;    if (seriesNames.size() <= 0) {                msgErr = JMeterUtils.getResString("aggregate_graph_no_values_to_graph");    } else if (durationTest < 1) {                msgErr = JMeterUtils.getResString("graph_resp_time_not_enough_data");    }    if (msgErr == null) {        makeGraph();        tabbedGraph.setSelectedIndex(1);    } else {        tabbedGraph.setSelectedIndex(0);        JOptionPane.showMessageDialog(null, msgErr, msgErr, JOptionPane.WARNING_MESSAGE);    }}
0
public JComponent getPrintableComponent()
{    if (saveGraphToFile) {        saveGraphToFile = false;                if (getData().length > 0 && getData()[0].length > 0) {            makeGraph();        }        graphPanel.setBounds(graphPanel.getLocation().x, graphPanel.getLocation().y, graphPanel.width, graphPanel.height);        return graphPanel;    }    return this;}
0
public void configure(TestElement te)
{    super.configure(te);    intervalField.setText(te.getPropertyAsString(INTERVAL, String.valueOf(DEFAULT_INTERVAL)));    samplerSelection.setSelected(te.getPropertyAsBoolean(SERIES_SELECTION, DEFAULT_SERIES_SELECTION));        samplerMatchLabel.setText(te.getPropertyAsString(SERIES_SELECTION_MATCH_LABEL, ""));    caseChkBox.setSelected(te.getPropertyAsBoolean(SERIES_SELECTION_CASE_SENSITIVE, DEFAULT_CASE_SENSITIVE));    regexpChkBox.setSelected(te.getPropertyAsBoolean(SERIES_SELECTION_REGEXP, DEFAULT_REGEXP));        graphTitle.setText(te.getPropertyAsString(GRAPH_TITLE, ""));    titleFontNameList.setSelectedIndex(te.getPropertyAsInt(GRAPH_TITLE_FONT_NAME, DEFAULT_TITLE_FONT_NAME));    titleFontSizeList.setSelectedIndex(te.getPropertyAsInt(GRAPH_TITLE_FONT_SIZE, DEFAULT_TITLE_FONT_SIZE));    titleFontStyleList.setSelectedIndex(te.getPropertyAsInt(GRAPH_TITLE_FONT_STYLE, DEFAULT_TITLE_FONT_STYLE));    strokeWidthList.setSelectedIndex(te.getPropertyAsInt(LINE_STROKE_WIDTH, DEFAULT_STROKE_WIDTH_LIST));    pointShapeLine.setSelectedIndex(te.getPropertyAsInt(LINE_SHAPE_POINT, DEFAULT_LINE_SHAPE_POINT));    dynamicGraphSize.setSelected(te.getPropertyAsBoolean(GRAPH_SIZE_DYNAMIC, DEFAULT_DYNAMIC_GRAPH_SIZE));        graphWidth.setText(te.getPropertyAsString(GRAPH_SIZE_WIDTH, ""));        graphHeight.setText(te.getPropertyAsString(GRAPH_SIZE_HEIGHT, ""));    xAxisTimeFormat.setText(te.getPropertyAsString(XAXIS_TIME_FORMAT, DEFAULT_XAXIS_TIME_FORMAT));        maxValueYAxisLabel.setText(te.getPropertyAsString(YAXIS_SCALE_MAX_VALUE, ""));        incrScaleYAxis.setText(te.getPropertyAsString(YAXIS_INCREMENT_SCALE, ""));    numberShowGrouping.setSelected(te.getPropertyAsBoolean(YAXIS_NUMBER_GROUPING, DEFAULT_NUMBER_SHOW_GROUPING));    legendPlacementList.setSelectedIndex(te.getPropertyAsInt(LEGEND_PLACEMENT, DEFAULT_LEGEND_PLACEMENT));    fontNameList.setSelectedIndex(te.getPropertyAsInt(LEGEND_FONT, DEFAULT_LEGEND_FONT));    fontSizeList.setSelectedIndex(te.getPropertyAsInt(LEGEND_SIZE, DEFAULT_LEGEND_SIZE));    fontStyleList.setSelectedIndex(te.getPropertyAsInt(LEGEND_STYLE, DEFAULT_LEGEND_STYLE));    enableSamplerSelection(samplerSelection.isSelected());    enableDynamicGraph(dynamicGraphSize.isSelected());}
0
public void modifyTestElement(TestElement te)
{    super.modifyTestElement(te);    te.setProperty(INTERVAL, intervalField.getText(), String.valueOf(DEFAULT_INTERVAL));    te.setProperty(SERIES_SELECTION, samplerSelection.isSelected(), DEFAULT_SERIES_SELECTION);        te.setProperty(SERIES_SELECTION_MATCH_LABEL, samplerMatchLabel.getText(), "");    te.setProperty(SERIES_SELECTION_CASE_SENSITIVE, caseChkBox.isSelected(), DEFAULT_CASE_SENSITIVE);    te.setProperty(SERIES_SELECTION_REGEXP, regexpChkBox.isSelected(), DEFAULT_REGEXP);        te.setProperty(GRAPH_TITLE, graphTitle.getText(), "");    te.setProperty(GRAPH_TITLE_FONT_NAME, titleFontNameList.getSelectedIndex(), DEFAULT_TITLE_FONT_NAME);    te.setProperty(GRAPH_TITLE_FONT_SIZE, titleFontSizeList.getSelectedIndex(), DEFAULT_TITLE_FONT_SIZE);    te.setProperty(GRAPH_TITLE_FONT_STYLE, titleFontStyleList.getSelectedIndex(), DEFAULT_TITLE_FONT_STYLE);    te.setProperty(LINE_STROKE_WIDTH, strokeWidthList.getSelectedIndex(), DEFAULT_STROKE_WIDTH_LIST);    te.setProperty(LINE_SHAPE_POINT, pointShapeLine.getSelectedIndex(), DEFAULT_LINE_SHAPE_POINT);    te.setProperty(GRAPH_SIZE_DYNAMIC, dynamicGraphSize.isSelected(), DEFAULT_DYNAMIC_GRAPH_SIZE);        te.setProperty(GRAPH_SIZE_WIDTH, graphWidth.getText(), "");        te.setProperty(GRAPH_SIZE_HEIGHT, graphHeight.getText(), "");    te.setProperty(XAXIS_TIME_FORMAT, xAxisTimeFormat.getText(), DEFAULT_XAXIS_TIME_FORMAT);        te.setProperty(YAXIS_SCALE_MAX_VALUE, maxValueYAxisLabel.getText(), "");        te.setProperty(YAXIS_INCREMENT_SCALE, incrScaleYAxis.getText(), "");    te.setProperty(YAXIS_NUMBER_GROUPING, numberShowGrouping.isSelected(), DEFAULT_NUMBER_SHOW_GROUPING);    te.setProperty(LEGEND_PLACEMENT, legendPlacementList.getSelectedIndex(), DEFAULT_LEGEND_PLACEMENT);    te.setProperty(LEGEND_FONT, fontNameList.getSelectedIndex(), DEFAULT_LEGEND_FONT);    te.setProperty(LEGEND_SIZE, fontSizeList.getSelectedIndex(), DEFAULT_LEGEND_SIZE);    te.setProperty(LEGEND_STYLE, fontStyleList.getSelectedIndex(), DEFAULT_LEGEND_STYLE);        enableSamplerSelection(samplerSelection.isSelected());    enableDynamicGraph(dynamicGraphSize.isSelected());}
0
public void clearGui()
{    super.clearGui();    intervalField.setText(String.valueOf(DEFAULT_INTERVAL));    samplerSelection.setSelected(DEFAULT_SERIES_SELECTION);        samplerMatchLabel.setText("");    caseChkBox.setSelected(DEFAULT_CASE_SENSITIVE);    regexpChkBox.setSelected(DEFAULT_REGEXP);        graphTitle.setText("");    titleFontNameList.setSelectedIndex(DEFAULT_TITLE_FONT_NAME);    titleFontSizeList.setSelectedIndex(DEFAULT_TITLE_FONT_SIZE);    titleFontStyleList.setSelectedIndex(DEFAULT_TITLE_FONT_STYLE);    strokeWidthList.setSelectedIndex(DEFAULT_STROKE_WIDTH_LIST);    pointShapeLine.setSelectedIndex(DEFAULT_LINE_SHAPE_POINT);    dynamicGraphSize.setSelected(DEFAULT_DYNAMIC_GRAPH_SIZE);        graphWidth.setText("");        graphHeight.setText("");    xAxisTimeFormat.setText(DEFAULT_XAXIS_TIME_FORMAT);        maxValueYAxisLabel.setText("");        incrScaleYAxis.setText("");    numberShowGrouping.setSelected(DEFAULT_NUMBER_SHOW_GROUPING);    legendPlacementList.setSelectedIndex(DEFAULT_LEGEND_PLACEMENT);    fontNameList.setSelectedIndex(DEFAULT_LEGEND_FONT);    fontSizeList.setSelectedIndex(DEFAULT_LEGEND_SIZE);    fontStyleList.setSelectedIndex(DEFAULT_LEGEND_STYLE);}
0
private JPanel createGraphActionsPane()
{    JPanel buttonPanel = new JPanel(new BorderLayout());    JPanel displayPane = new JPanel();    displayPane.add(displayButton);    displayButton.addActionListener(this);    buttonPanel.add(displayPane, BorderLayout.WEST);    JPanel savePane = new JPanel();    savePane.add(saveGraph);    saveGraph.addActionListener(this);    syncWithName.addActionListener(this);    buttonPanel.add(savePane, BorderLayout.EAST);    return buttonPanel;}
0
public String[] getXAxisLabels()
{        SimpleDateFormat formatter = new SimpleDateFormat(xAxisTimeFormat.getText());        String[] xAxisLabels = new String[(int) durationTest];    for (int j = 0; j < durationTest; j++) {        xAxisLabels[j] = formatter.format(new Date((minStartTime + j) * intervalValue));    }    return xAxisLabels;}
0
private String[] getLegendLabels()
{    String[] legends = new String[seriesNames.size()];    int i = 0;    for (Map.Entry<String, RespTimeGraphLineBean> entry : seriesNames.entrySet()) {        RespTimeGraphLineBean val = entry.getValue();        legends[i] = val.getLabel();        i++;    }    return legends;}
0
private Color[] getLinesColors()
{    Color[] linesColors = new Color[seriesNames.size()];    int i = 0;    for (Map.Entry<String, RespTimeGraphLineBean> entry : seriesNames.entrySet()) {        RespTimeGraphLineBean val = entry.getValue();        linesColors[i] = val.getLineColor();        i++;    }    return linesColors;}
0
private int getIncrScaleYAxis()
{    int incrYAxisScale = 0;    String iyas = incrScaleYAxis.getText();    if (iyas.length() != 0) {        incrYAxisScale = Integer.parseInt(iyas);    }    return incrYAxisScale;}
0
private JPanel createGraphSettingsPane()
{    JPanel settingsPane = new JPanel(new BorderLayout());    settingsPane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("graph_resp_time_settings_pane")));    JPanel intervalPane = new JPanel();    intervalPane.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));    intervalField.setText(String.valueOf(DEFAULT_INTERVAL));    intervalPane.add(intervalField);        intervalButton.setFont(FONT_SMALL);    intervalButton.addActionListener(this);    intervalPane.add(intervalButton);    settingsPane.add(intervalPane, BorderLayout.NORTH);    settingsPane.add(createGraphSelectionSubPane(), BorderLayout.SOUTH);    return settingsPane;}
0
private JPanel createGraphSelectionSubPane()
{        JPanel searchPanel = new JPanel();    searchPanel.setLayout(new BoxLayout(searchPanel, BoxLayout.X_AXIS));    searchPanel.setBorder(BorderFactory.createEmptyBorder(3, 0, 3, 0));    searchPanel.add(samplerSelection);    samplerMatchLabel.setEnabled(false);    applyFilterBtn.setEnabled(false);    caseChkBox.setEnabled(false);    regexpChkBox.setEnabled(false);    samplerSelection.addActionListener(this);    searchPanel.add(samplerMatchLabel);    searchPanel.add(Box.createRigidArea(new Dimension(5, 0)));        applyFilterBtn.setFont(FONT_SMALL);    applyFilterBtn.addActionListener(this);    searchPanel.add(applyFilterBtn);        caseChkBox.setFont(FONT_SMALL);    searchPanel.add(caseChkBox);    regexpChkBox.setFont(FONT_SMALL);    searchPanel.add(regexpChkBox);    return searchPanel;}
0
private JPanel createGraphTitlePane()
{    JPanel titleNamePane = new JPanel(new BorderLayout());    syncWithName.setFont(FONT_SMALL);    titleNamePane.add(graphTitle, BorderLayout.CENTER);    titleNamePane.add(syncWithName, BorderLayout.EAST);    JPanel titleStylePane = new JPanel();    titleStylePane.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 5));    titleStylePane.add(    GuiUtils.createLabelCombo(    JMeterUtils.getResString("aggregate_graph_font"), titleFontNameList));    titleFontNameList.setSelectedIndex(DEFAULT_TITLE_FONT_NAME);    titleStylePane.add(    GuiUtils.createLabelCombo(    JMeterUtils.getResString("aggregate_graph_size"), titleFontSizeList));    titleFontSizeList.setSelectedItem(StatGraphProperties.getFontSize()[DEFAULT_TITLE_FONT_SIZE]);    titleStylePane.add(    GuiUtils.createLabelCombo(    JMeterUtils.getResString("aggregate_graph_style"), titleFontStyleList));    titleFontStyleList.setSelectedIndex(DEFAULT_TITLE_FONT_STYLE);    JPanel titlePane = new JPanel(new BorderLayout());    titlePane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("aggregate_graph_title_group")));    titlePane.add(titleNamePane, BorderLayout.NORTH);    titlePane.add(titleStylePane, BorderLayout.SOUTH);    return titlePane;}
0
private JPanel createLinePane()
{    JPanel lineStylePane = new JPanel();    lineStylePane.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));    lineStylePane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("graph_resp_time_settings_line")));    lineStylePane.add(    GuiUtils.createLabelCombo(    JMeterUtils.getResString("graph_resp_time_stroke_width"), strokeWidthList));    strokeWidthList.setSelectedItem(StatGraphProperties.getStrokeWidth()[DEFAULT_STROKE_WIDTH_LIST]);    lineStylePane.add(    GuiUtils.createLabelCombo(    JMeterUtils.getResString("graph_resp_time_shape_label"), pointShapeLine));    pointShapeLine.setSelectedIndex(DEFAULT_LINE_SHAPE_POINT);    return lineStylePane;}
0
private JPanel createGraphDimensionPane()
{    JPanel dimensionPane = new JPanel();    dimensionPane.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));    dimensionPane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("aggregate_graph_dimension")));    dimensionPane.add(dynamicGraphSize);    dynamicGraphSize.setSelected(DEFAULT_DYNAMIC_GRAPH_SIZE);    graphWidth.setEnabled(false);    graphHeight.setEnabled(false);    dynamicGraphSize.addActionListener(this);    dimensionPane.add(Box.createRigidArea(new Dimension(10, 0)));    dimensionPane.add(graphWidth);    dimensionPane.add(Box.createRigidArea(new Dimension(5, 0)));    dimensionPane.add(graphHeight);    return dimensionPane;}
0
private JPanel createGraphXAxisPane()
{    JPanel xAxisPane = new JPanel();    xAxisPane.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));    xAxisPane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("aggregate_graph_xaxis_group")));        xAxisTimeFormat.setText(DEFAULT_XAXIS_TIME_FORMAT);    xAxisPane.add(xAxisTimeFormat);    return xAxisPane;}
0
private JPanel createGraphYAxisPane()
{    JPanel yAxisPane = new JPanel();    yAxisPane.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));    yAxisPane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("aggregate_graph_yaxis_group")));    yAxisPane.add(maxValueYAxisLabel);    yAxisPane.add(incrScaleYAxis);    yAxisPane.add(numberShowGrouping);    return yAxisPane;}
0
private JPanel createLegendPane()
{    JPanel legendPanel = new JPanel();    legendPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));    legendPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("aggregate_graph_legend")));    legendPanel.add(    GuiUtils.createLabelCombo(    JMeterUtils.getResString("aggregate_graph_legend_placement"), legendPlacementList));    legendPlacementList.setSelectedIndex(DEFAULT_LEGEND_PLACEMENT);    legendPanel.add(    GuiUtils.createLabelCombo(    JMeterUtils.getResString("aggregate_graph_font"), fontNameList));    fontNameList.setSelectedIndex(DEFAULT_LEGEND_FONT);    legendPanel.add(    GuiUtils.createLabelCombo(    JMeterUtils.getResString("aggregate_graph_size"), fontSizeList));    fontSizeList.setSelectedItem(StatGraphProperties.getFontSize()[DEFAULT_LEGEND_SIZE]);    legendPanel.add(    GuiUtils.createLabelCombo(    JMeterUtils.getResString("aggregate_graph_style"), fontStyleList));    fontStyleList.setSelectedIndex(DEFAULT_LEGEND_STYLE);    return legendPanel;}
0
private Pattern createPattern(String textToFind)
{    String textToFindQ = Pattern.quote(textToFind);    if (regexpChkBox.isSelected()) {        textToFindQ = textToFind;    }    Pattern pattern = null;    try {        if (caseChkBox.isSelected()) {            pattern = Pattern.compile(textToFindQ);        } else {            pattern = Pattern.compile(textToFindQ, Pattern.CASE_INSENSITIVE);        }    } catch (PatternSyntaxException pse) {        return null;    }    return pattern;}
0
private void enableDynamicGraph(boolean enable)
{        if (enable) {        graphWidth.setEnabled(false);        graphHeight.setEnabled(false);    } else {        graphWidth.setEnabled(true);        graphHeight.setEnabled(true);    }}
0
private void enableSamplerSelection(boolean enable)
{    if (enable) {        samplerMatchLabel.setEnabled(true);        applyFilterBtn.setEnabled(true);        caseChkBox.setEnabled(true);        regexpChkBox.setEnabled(true);    } else {        samplerMatchLabel.setEnabled(false);        applyFilterBtn.setEnabled(false);        caseChkBox.setEnabled(false);        regexpChkBox.setEnabled(false);    }}
0
public void clearData()
{        results.setText("");        headerData.setInitialText("");        requestPanel.clearData();        stats.setText("");    resultModel.clearData();    resHeadersModel.clearData();    resFieldsModel.clearData();}
0
public void init()
{    rightSide.addTab(JMeterUtils.getResString("view_results_tab_sampler"),     createResponseMetadataPanel());        requestPanel = new RequestPanel();    resultsPane = createResponseDataPanel();}
0
public void setupTabPane()
{        this.clearData();    StyledDocument statsDoc = stats.getStyledDocument();    try {        if (userObject instanceof SampleResult) {            sampleResult = (SampleResult) userObject;                        setupTabPaneForSampleResult();            requestPanel.setSamplerResult(sampleResult);            final String samplerClass = sampleResult.getClass().getName();            String typeResult = samplerClass.substring(1 + samplerClass.lastIndexOf('.'));            StringBuilder statsBuff = new StringBuilder(200);            statsBuff.append(JMeterUtils.getResString(            "view_results_thread_name")).append(sampleResult.getThreadName()).append(NL);            String startTime = dateFormat.format(new Date(sampleResult.getStartTime()));            statsBuff.append(JMeterUtils.getResString(            "view_results_sample_start")).append(startTime).append(NL);            statsBuff.append(JMeterUtils.getResString(            "view_results_load_time")).append(sampleResult.getTime()).append(NL);            statsBuff.append(JMeterUtils.getResString(            "view_results_connect_time")).append(sampleResult.getConnectTime()).append(NL);            statsBuff.append(JMeterUtils.getResString(            "view_results_latency")).append(sampleResult.getLatency()).append(NL);            statsBuff.append(JMeterUtils.getResString(            "view_results_size_in_bytes")).append(sampleResult.getBytesAsLong()).append(NL);            statsBuff.append(JMeterUtils.getResString(            "view_results_sent_bytes")).append(sampleResult.getSentBytes()).append(NL);            statsBuff.append(JMeterUtils.getResString(            "view_results_size_headers_in_bytes")).append(sampleResult.getHeadersSize()).append(NL);            statsBuff.append(JMeterUtils.getResString(            "view_results_size_body_in_bytes")).append(sampleResult.getBodySizeAsLong()).append(NL);            statsBuff.append(JMeterUtils.getResString(            "view_results_sample_count")).append(sampleResult.getSampleCount()).append(NL);            statsBuff.append(JMeterUtils.getResString(            "view_results_error_count")).append(sampleResult.getErrorCount()).append(NL);            statsBuff.append(JMeterUtils.getResString(            "view_results_datatype")).append(sampleResult.getDataType()).append(NL);            statsDoc.insertString(statsDoc.getLength(), statsBuff.toString(), null);                        statsBuff.setLength(0);            String responseCode = sampleResult.getResponseCode();            int responseLevel = 0;            if (responseCode != null) {                try {                    responseLevel = Integer.parseInt(responseCode) / 100;                } catch (NumberFormatException numberFormatException) {                                }            }            Style style = null;            switch(responseLevel) {                case 3:                    style = statsDoc.getStyle(STYLE_REDIRECT);                    break;                case 4:                    style = statsDoc.getStyle(STYLE_CLIENT_ERROR);                    break;                case 5:                    style = statsDoc.getStyle(STYLE_SERVER_ERROR);                    break;                default:                                        break;            }                        statsBuff.append(JMeterUtils.getResString("view_results_response_code")).append(responseCode).append(NL);            statsDoc.insertString(statsDoc.getLength(), statsBuff.toString(), style);                        statsBuff.setLength(0);                        String responseMsgStr = sampleResult.getResponseMessage();            statsBuff.append(JMeterUtils.getResString(            "view_results_response_message")).append(responseMsgStr).append(NL);            statsBuff.append(NL);            statsBuff.append(NL);            statsBuff.append(            typeResult + " " + JMeterUtils.getResString("view_results_fields")).append(            NL);                        statsBuff.append("ContentType: ").append(sampleResult.getContentType()).append(NL);                        statsBuff.append("DataEncoding: ").append(sampleResult.getDataEncodingNoDefault()).append(NL);            statsDoc.insertString(statsDoc.getLength(), statsBuff.toString(), null);                        statsBuff = null;                        resultModel.addRow(new RowResult(            JMeterUtils.getParsedLabel("view_results_thread_name"), sampleResult.getThreadName()));            resultModel.addRow(new RowResult(            JMeterUtils.getParsedLabel("view_results_sample_start"), startTime));            resultModel.addRow(new RowResult(            JMeterUtils.getParsedLabel("view_results_load_time"), sampleResult.getTime()));            resultModel.addRow(new RowResult(            JMeterUtils.getParsedLabel("view_results_connect_time"), sampleResult.getConnectTime()));            resultModel.addRow(new RowResult(            JMeterUtils.getParsedLabel("view_results_latency"), sampleResult.getLatency()));            resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel(            "view_results_size_in_bytes"), sampleResult.getBytesAsLong()));            resultModel.addRow(new RowResult(            JMeterUtils.getParsedLabel("view_results_sent_bytes"), sampleResult.getSentBytes()));            resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel(            "view_results_size_headers_in_bytes"), sampleResult.getHeadersSize()));            resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel(            "view_results_size_body_in_bytes"), sampleResult.getBodySizeAsLong()));            resultModel.addRow(new RowResult(            JMeterUtils.getParsedLabel("view_results_sample_count"), sampleResult.getSampleCount()));            resultModel.addRow(new RowResult(            JMeterUtils.getParsedLabel("view_results_error_count"), sampleResult.getErrorCount()));            resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel(            "view_results_response_code"), responseCode));            resultModel.addRow(new RowResult(JMeterUtils.getParsedLabel(            "view_results_response_message"), responseMsgStr));                        LinkedHashMap<String, String> lhm = JMeterUtils.parseHeaders(sampleResult.getResponseHeaders());            Set<Entry<String, String>> keySet = lhm.entrySet();            for (Entry<String, String> entry : keySet) {                resHeadersModel.addRow(new RowResult(entry.getKey(), entry.getValue()));            }            headerData.setInitialText(sampleResult.getResponseHeaders());                                    resFieldsModel.addRow(new RowResult("Type Result ", typeResult));                                    resFieldsModel.addRow(new RowResult("ContentType", sampleResult.getContentType()));                        resFieldsModel.addRow(new RowResult("DataEncoding", sampleResult.getDataEncodingNoDefault()));                        if (activateSearchExtension) {                searchTextExtension.resetTextToFind();            }        } else if (userObject instanceof AssertionResult) {            assertionResult = (AssertionResult) userObject;                        setupTabPaneForAssertionResult();            StringBuilder statsBuff = new StringBuilder(100);            statsBuff.append(JMeterUtils.getResString(            "view_results_assertion_error")).append(assertionResult.isError()).append(NL);            statsBuff.append(JMeterUtils.getResString(            "view_results_assertion_failure")).append(assertionResult.isFailure()).append(NL);            statsBuff.append(JMeterUtils.getResString(            "view_results_assertion_failure_message")).append(assertionResult.getFailureMessage()).append(NL);            statsDoc.insertString(statsDoc.getLength(), statsBuff.toString(), null);        }        stats.setCaretPosition(1);    } catch (BadLocationException exc) {        stats.setText(exc.getLocalizedMessage());    }}
0
private void setupTabPaneForSampleResult()
{        if (tabbedResult.getTabCount() < 2) {                tabbedResult.insertTab(JMeterUtils.getResString("view_results_table_result_tab_parsed"), null, paneParsed, null, 1);                tabbedResult.setSelectedIndex(lastResultTabIndex);    }            rightSide.setTitleAt(0, JMeterUtils.getResString("view_results_tab_sampler"));        if (rightSide.indexOfTab(JMeterUtils.getResString("view_results_tab_request")) < 0) {                        rightSide.addTab(JMeterUtils.getResString("view_results_tab_request"), requestPanel.getPanel());    }    if (rightSide.indexOfTab(JMeterUtils.getResString("view_results_tab_response")) < 0) {                        rightSide.addTab(JMeterUtils.getResString("view_results_tab_response"), resultsPane);    }        if (lastSelectedTab < rightSide.getTabCount()) {        rightSide.setSelectedIndex(lastSelectedTab);    }}
0
private void setupTabPaneForAssertionResult()
{        if (tabbedResult.getTabCount() >= 2) {        lastResultTabIndex = tabbedResult.getSelectedIndex();                int parsedTabIndex = tabbedResult.indexOfTab(JMeterUtils.getResString("view_results_table_result_tab_parsed"));        if (parsedTabIndex >= 0) {            tabbedResult.removeTabAt(parsedTabIndex);        }    }            rightSide.setTitleAt(0, JMeterUtils.getResString("view_results_tab_assertion"));            int requestTabIndex = rightSide.indexOfTab(JMeterUtils.getResString("view_results_tab_request"));    if (requestTabIndex >= 0) {        rightSide.removeTabAt(requestTabIndex);    }        int responseTabIndex = rightSide.indexOfTab(JMeterUtils.getResString("view_results_tab_response"));    if (responseTabIndex >= 0) {        rightSide.removeTabAt(responseTabIndex);    }}
0
private Component createResponseMetadataPanel()
{    stats = new JTextPane();    stats.setEditable(false);    stats.setBackground(backGround);        StyledDocument doc = (StyledDocument) stats.getDocument();    Style style = doc.addStyle(STYLE_REDIRECT, null);    StyleConstants.setForeground(style, REDIRECT_COLOR);    style = doc.addStyle(STYLE_CLIENT_ERROR, null);    StyleConstants.setForeground(style, CLIENT_ERROR_COLOR);    style = doc.addStyle(STYLE_SERVER_ERROR, null);    StyleConstants.setForeground(style, SERVER_ERROR_COLOR);    paneRaw = GuiUtils.makeScrollPane(stats);    paneRaw.setBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));        tableResult = new JTable(resultModel);    JMeterUtils.applyHiDPI(tableResult);        tableResult.setToolTipText(JMeterUtils.getResString("textbox_tooltip_cell"));    tableResult.addMouseListener(new TextBoxDoubleClick(tableResult));    setFirstColumnPreferredSize(tableResult);    RendererUtils.applyRenderers(tableResult, RENDERERS_RESULT);        tableResHeaders = new JTable(resHeadersModel);    JMeterUtils.applyHiDPI(tableResHeaders);        tableResHeaders.setToolTipText(JMeterUtils.getResString("textbox_tooltip_cell"));    tableResHeaders.addMouseListener(new TextBoxDoubleClick(tableResHeaders));    setFirstColumnPreferredSize(tableResHeaders);    tableResHeaders.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());    RendererUtils.applyRenderers(tableResHeaders, RENDERERS_HEADERS);        tableResFields = new JTable(resFieldsModel);    JMeterUtils.applyHiDPI(tableResFields);        tableResFields.setToolTipText(JMeterUtils.getResString("textbox_tooltip_cell"));    tableResFields.addMouseListener(new TextBoxDoubleClick(tableResFields));    setFirstColumnPreferredSize(tableResFields);    tableResFields.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());    RendererUtils.applyRenderers(tableResFields, RENDERERS_FIELDS);        tabbedResult = new JTabbedPane(SwingConstants.BOTTOM);        JSplitPane topSplit = new JSplitPane(JSplitPane.VERTICAL_SPLIT, GuiUtils.makeScrollPane(tableResHeaders), GuiUtils.makeScrollPane(tableResFields));    topSplit.setOneTouchExpandable(true);        topSplit.setResizeWeight(0.80);        topSplit.setBorder(null);    paneParsed = new JSplitPane(JSplitPane.VERTICAL_SPLIT, GuiUtils.makeScrollPane(tableResult), topSplit);    paneParsed.setOneTouchExpandable(true);        paneParsed.setResizeWeight(0.40);        paneParsed.setBorder(null);            tabbedResult.addTab(JMeterUtils.getResString("view_results_table_result_tab_raw"), paneRaw);        tabbedResult.addTab(JMeterUtils.getResString("view_results_table_result_tab_parsed"), paneParsed);        JPanel panel = new JPanel(new BorderLayout());    panel.add(tabbedResult);    return panel;}
0
private JPanel createResponseDataPanel()
{    results = new JEditorPane();    results.setEditable(false);    headerData = JSyntaxTextArea.getInstance(20, 80, true);    headerData.setEditable(false);    headerData.setLineWrap(true);    headerData.setWrapStyleWord(true);    JPanel headersAndSearchPanel = new JPanel(new BorderLayout());    headersAndSearchPanel.add(new JSyntaxSearchToolBar(headerData).getToolBar(), BorderLayout.NORTH);    headersAndSearchPanel.add(JTextScrollPane.getInstance(headerData), BorderLayout.CENTER);    resultsScrollPane = GuiUtils.makeScrollPane(results);    imageLabel = new JLabel();    JPanel resultAndSearchPanel = new JPanel(new BorderLayout());    resultAndSearchPanel.add(resultsScrollPane, BorderLayout.CENTER);    if (activateSearchExtension) {                searchTextExtension = new SearchTextExtension(new JEditorPaneSearchProvider(results));        resultAndSearchPanel.add(searchTextExtension.getSearchToolBar(), BorderLayout.NORTH);    }    JTabbedPane tabbedPane = new JTabbedPane(JTabbedPane.TOP);    tabbedPane.addTab(JMeterUtils.getResString("view_results_response_body"), new JScrollPane(resultAndSearchPanel));    tabbedPane.addTab(JMeterUtils.getResString("view_results_response_headers"), new JScrollPane(headersAndSearchPanel));    JPanel gPanel = new JPanel(new GridLayout(1, 1));    gPanel.add(tabbedPane);    return gPanel;}
0
private void showImage(Icon image)
{    imageLabel.setIcon(image);    resultsScrollPane.setViewportView(imageLabel);}
0
public synchronized void setSamplerResult(Object sample)
{    userObject = sample;}
0
public synchronized void setRightSide(JTabbedPane side)
{    rightSide = side;}
0
public void setLastSelectedTab(int index)
{    lastSelectedTab = index;}
0
public void renderImage(SampleResult sampleResult)
{    byte[] responseBytes = sampleResult.getResponseData();    if (responseBytes != null) {                showImage(new ImageIcon(responseBytes));    }}
0
public void setBackgroundColor(Color backGround)
{    this.backGround = backGround;}
0
private void setFirstColumnPreferredSize(JTable table)
{    TableColumn column = table.getColumnModel().getColumn(0);    column.setMaxWidth(300);    column.setPreferredWidth(180);}
0
public synchronized String getKey()
{    return key;}
0
public synchronized void setKey(String key)
{    this.key = key;}
0
public synchronized Object getValue()
{    return value;}
0
public synchronized void setValue(Object value)
{    this.value = value;}
0
protected void setTextOptimized(String data)
{    Document document = results.getDocument();    Document blank = new DefaultStyledDocument();    results.setDocument(blank);    try {        document.insertString(0, data == null ? "" : data, null);    } catch (BadLocationException ex) {            }    results.setDocument(document);}
1
public void reset()
{    nodeHasMatched = false;    childrenNodesHaveMatched = false;}
0
public void updateState()
{    if (treeModel != null) {        treeModel.nodeChanged(this);    }}
0
public boolean isNodeHasMatched()
{    return nodeHasMatched;}
0
public void setNodeHasMatched(boolean nodeHasMatched)
{    this.nodeHasMatched = nodeHasMatched;}
0
public boolean isChildrenNodesHaveMatched()
{    return childrenNodesHaveMatched;}
0
public void setChildrenNodesHaveMatched(boolean childrenNodesHaveMatched)
{    this.childrenNodesHaveMatched = childrenNodesHaveMatched;}
0
private void executeAndShowTextFind()
{    String textToFind = textToFindField.getText();    if (this.searchProvider != null) {                if (lastTextTofind != null && !lastTextTofind.equals(textToFind)) {            searchProvider.resetTextToFind();            textToFindField.setBackground(Color.WHITE);            textToFindField.setForeground(Color.BLACK);        }        try {            Pattern pattern = createPattern(textToFindField.getText());            boolean found = searchProvider.executeAndShowTextFind(pattern);            if (found) {                                findButton.setText(JMeterUtils.getResString("search_text_button_find"));                lastTextTofind = textToFind;                textToFindField.setBackground(Color.WHITE);                textToFindField.setForeground(Color.BLACK);            } else {                                findButton.setText(JMeterUtils.getResString("search_text_button_find"));                textToFindField.setBackground(Colors.LIGHT_RED);                textToFindField.setForeground(Color.WHITE);            }        } catch (PatternSyntaxException pse) {            JOptionPane.showMessageDialog(null,             pse.toString(),             JMeterUtils.getResString("error_title"), JOptionPane.WARNING_MESSAGE);        }    }}
0
public JToolBar getSearchToolBar()
{    return toolBar;}
0
private JToolBar createSearchToolBar()
{            textToFindField = new JTextField(30);    this.toolBar = new JToolBar();    toolBar.setFloatable(false);    toolBar.setFont(FONT_SMALL);    toolBar.add(textToFindField);        textToFindField.getDocument().addDocumentListener(this);        findButton = new JButton(JMeterUtils.getResString(    "search_text_button_find"));    findButton.setFont(FONT_SMALL);    findButton.setActionCommand(SEARCH_TEXT_COMMAND);    findButton.addActionListener(this);    toolBar.add(findButton);        caseChkBox = new JCheckBox(JMeterUtils.getResString("search_text_chkbox_case"),     false);    caseChkBox.setFont(FONT_SMALL);    toolBar.add(caseChkBox);    regexpChkBox = new JCheckBox(JMeterUtils.getResString("search_text_chkbox_regexp"),     false);    regexpChkBox.setFont(FONT_SMALL);    toolBar.add(regexpChkBox);        InputMap im = textToFindField.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);    im.put(KeyStrokes.ENTER, SEARCH_TEXT_COMMAND);    ActionMap am = textToFindField.getActionMap();    am.put(SEARCH_TEXT_COMMAND, new EnterAction());    return toolBar;}
0
public void actionPerformed(ActionEvent e)
{    String command = e.getActionCommand();        if (SEARCH_TEXT_COMMAND.equals(command)) {        executeAndShowTextFind();    }}
0
public void actionPerformed(ActionEvent ev)
{    executeAndShowTextFind();}
0
public void changedUpdate(DocumentEvent e)
{}
0
public void insertUpdate(DocumentEvent e)
{    resetTextToFind();}
0
public void removeUpdate(DocumentEvent e)
{    resetTextToFind();}
0
public void resetTextToFind()
{    if (this.searchProvider != null) {        searchProvider.resetTextToFind();    }    lastTextTofind = null;        findButton.setText(JMeterUtils.getResString("search_text_button_find"));}
0
private Pattern createPattern(String textToFind)
{        String textToFindQ = regexpChkBox.isSelected() ? textToFind : Pattern.quote(textToFind);    return caseChkBox.isSelected() ? Pattern.compile(textToFindQ) : Pattern.compile(textToFindQ, Pattern.CASE_INSENSITIVE);}
0
public void resetTextToFind()
{        lastPosition = LAST_POSITION_DEFAULT;    selection.removeAllHighlights();    results.setCaretPosition(0);}
0
public boolean executeAndShowTextFind(Pattern pattern)
{    boolean found = false;    if (results != null && results.getText().length() > 0 && pattern != null) {                Matcher matcher = null;        try {            Document contentDoc = results.getDocument();            String body = contentDoc.getText(lastPosition, contentDoc.getLength() - lastPosition);            matcher = pattern.matcher(body);            if ((matcher != null) && (matcher.find())) {                selection.removeAllHighlights();                selection.addHighlight(lastPosition + matcher.start(), lastPosition + matcher.end(), painter);                results.setCaretPosition(lastPosition + matcher.end());                                lastPosition = lastPosition + matcher.end();                found = true;            } else {                                lastPosition = LAST_POSITION_DEFAULT;                results.setCaretPosition(0);            }        } catch (BadLocationException ble) {                                }    }    return found;}
1
public void actionPerformed(ActionEvent ev)
{    boolean found = doSearch();    if (found) {        searchTF.setBackground(Color.WHITE);        searchTF.setForeground(Color.BLACK);    } else {        searchTF.setBackground(Colors.LIGHT_RED);        searchTF.setForeground(Color.WHITE);    }}
0
private void init()
{        setLayout(new BorderLayout(10, 10));        searchTF = new JTextField(20);    InputMap im = searchTF.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);    im.put(KeyStrokes.ENTER, SEARCH_TEXT_COMMAND);    ActionMap am = searchTF.getActionMap();    am.put(SEARCH_TEXT_COMMAND, new EnterAction());        isRegexpCB = new JCheckBox(JMeterUtils.getResString("search_text_chkbox_regexp"), false);        isCaseSensitiveCB = new JCheckBox(JMeterUtils.getResString("search_text_chkbox_case"), false);    isRegexpCB.setFont(FONT_SMALL);    isCaseSensitiveCB.setFont(FONT_SMALL);        searchButton = new JButton(JMeterUtils.getResString("search"));    searchButton.addActionListener(this);        resetButton = new JButton(JMeterUtils.getResString("reset"));    resetButton.addActionListener(this);    JPanel searchPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));    searchPanel.add(new JLabel(JMeterUtils.getResString("search_text_field")));    searchPanel.add(searchTF);    searchPanel.add(isCaseSensitiveCB);    searchPanel.add(isRegexpCB);    searchPanel.add(searchButton);    searchPanel.add(resetButton);    add(searchPanel);}
0
public void actionPerformed(ActionEvent e)
{    if (e.getSource() == searchButton) {        doSearch();    } else if (e.getSource() == resetButton) {        doResetSearch((SearchableTreeNode) defaultMutableTreeNode);    }}
0
private void doResetSearch(SearchableTreeNode searchableTreeNode)
{    searchableTreeNode.reset();    searchableTreeNode.updateState();    for (int i = 0; i < searchableTreeNode.getChildCount(); i++) {        doResetSearch((SearchableTreeNode) searchableTreeNode.getChildAt(i));    }}
0
private boolean doSearch()
{    String wordToSearch = searchTF.getText();    if (StringUtils.isEmpty(wordToSearch)) {        return false;    }    Searcher searcher = isRegexpCB.isSelected() ? new RegexpSearcher(isCaseSensitiveCB.isSelected(), searchTF.getText()) : new RawTextSearcher(isCaseSensitiveCB.isSelected(), searchTF.getText());    return searchInNode(searcher, (SearchableTreeNode) defaultMutableTreeNode);}
0
private boolean searchInNode(Searcher searcher, SearchableTreeNode node)
{    node.reset();    Object userObject = node.getUserObject();    try {        Searchable searchable;        if (userObject instanceof Searchable) {            searchable = (Searchable) userObject;        } else {            return false;        }        if (searcher.search(searchable.getSearchableTokens())) {            node.setNodeHasMatched(true);        }        boolean foundInChildren = false;        for (int i = 0; i < node.getChildCount(); i++) {            searchInNode(searcher, (SearchableTreeNode) node.getChildAt(i));            foundInChildren = searchInNode(searcher, (SearchableTreeNode) node.getChildAt(i)) ||             foundInChildren;        }        if (!node.isNodeHasMatched()) {            node.setChildrenNodesHaveMatched(foundInChildren);        }        node.updateState();        return node.isNodeHasMatched() || node.isChildrenNodesHaveMatched();    } catch (Exception e) {                return false;    }}
1
public String getLabelResource()
{        return "simple_data_writer_title";}
0
private void init()
{        setLayout(new BorderLayout());    setBorder(makeBorder());    add(makeTitlePanel(), BorderLayout.NORTH);}
0
public void clearData()
{}
0
public void add(SampleResult sample)
{}
0
public static Map<String, String> getFontNameMap()
{    Map<String, String> fontNameMap = new LinkedHashMap<>(2);        fontNameMap.put(JMeterUtils.getResString("font.sansserif"), "SansSerif");        fontNameMap.put(JMeterUtils.getResString("font.serif"), "Serif");    return fontNameMap;}
0
public static final String[] getFontSize()
{    String[] fontSize = new String[FONT_SIZE.length];    System.arraycopy(FONT_SIZE, 0, fontSize, 0, FONT_SIZE.length);    return fontSize;}
0
public static final String[] getStrokeWidth()
{    String[] strokeWidth = new String[STROKE_WIDTH.length];    System.arraycopy(STROKE_WIDTH, 0, strokeWidth, 0, STROKE_WIDTH.length);    return strokeWidth;}
0
public static Map<String, Integer> getFontStyleMap()
{    Map<String, Integer> fontStyleMap = new LinkedHashMap<>(3);        fontStyleMap.put(JMeterUtils.getResString("fontstyle.normal"), Font.PLAIN);        fontStyleMap.put(JMeterUtils.getResString("fontstyle.bold"), Font.BOLD);        fontStyleMap.put(JMeterUtils.getResString("fontstyle.italic"), Font.ITALIC);    return fontStyleMap;}
0
public static Map<String, Integer> getPlacementNameMap()
{    Map<String, Integer> placementNameMap = new LinkedHashMap<>(4);        placementNameMap.put(JMeterUtils.getResString("aggregate_graph_legend.placement.bottom"), LegendAreaProperties.BOTTOM);        placementNameMap.put(JMeterUtils.getResString("aggregate_graph_legend.placement.right"), LegendAreaProperties.RIGHT);        placementNameMap.put(JMeterUtils.getResString("aggregate_graph_legend.placement.left"), LegendAreaProperties.LEFT);        placementNameMap.put(JMeterUtils.getResString("aggregate_graph_legend.placement.top"), LegendAreaProperties.TOP);    return placementNameMap;}
0
public static Map<String, Shape> getPointShapeMap()
{        Map<String, Shape> pointShapeMap = new LinkedHashMap<>(5);        pointShapeMap.put(JMeterUtils.getResString("graph_pointshape_circle"), PointChartProperties.SHAPE_CIRCLE);        pointShapeMap.put(JMeterUtils.getResString("graph_pointshape_diamond"), PointChartProperties.SHAPE_DIAMOND);        pointShapeMap.put(JMeterUtils.getResString("graph_pointshape_square"), PointChartProperties.SHAPE_SQUARE);        pointShapeMap.put(JMeterUtils.getResString("graph_pointshape_triangle"), PointChartProperties.SHAPE_TRIANGLE);        pointShapeMap.put(JMeterUtils.getResString("graph_pointshape_none"), null);    return pointShapeMap;}
0
 static final Object[][] getColumnsMsgParameters()
{    return new Object[][] { null, null, null, null, new Object[] { PCT1_LABEL }, new Object[] { PCT2_LABEL }, new Object[] { PCT3_LABEL }, null, null, null, null, null, null };}
0
 static final Object[][] getGraphColumnsMsgParameters()
{    return new Object[][] { null, null, new Object[] { PCT1_LABEL }, new Object[] { PCT2_LABEL }, new Object[] { PCT3_LABEL }, null, null };}
0
private String[] keys(Map<String, ?> map)
{    return map.keySet().toArray(ArrayUtils.EMPTY_STRING_ARRAY);}
0
public static final String[] getColumns()
{    String[] columns = new String[COLUMNS.length];    System.arraycopy(COLUMNS, 0, columns, 0, COLUMNS.length);    return columns;}
0
 static ObjectTableModel createObjectTableModel()
{    return new ObjectTableModel(getLabels(COLUMNS, getColumnsMsgParameters()), SamplingStatCalculator.class, new Functor[] {     new Functor("getLabel"),     new Functor("getCount"),     new Functor("getMeanAsNumber"),     new Functor("getMedian"), new     Functor(    "getPercentPoint", new Object[] { PCT1_VALUE }), new     Functor(    "getPercentPoint", new Object[] { PCT2_VALUE }), new     Functor(    "getPercentPoint", new Object[] { PCT3_VALUE }),     new Functor("getMin"),     new Functor("getMax"),     new Functor("getErrorPercentage"),     new Functor("getRate"),     new Functor("getKBPerSecond"),     new Functor("getSentKBPerSecond") }, new Functor[] { null, null, null, null, null, null, null, null, null, null, null, null, null }, new Class[] { String.class, Long.class, Long.class, Long.class, Long.class, Long.class, Long.class, Long.class, Long.class, Double.class, Double.class, Double.class, Double.class });}
0
 static final Format[] getFormatters()
{    return new Format[] {     null,     null,     null,     null,     null,     null,     null,     null,     null,     new DecimalFormat("#0.000%"),     new DecimalFormat("#.00000"),     new DecimalFormat("#0.00"),     new DecimalFormat("#0.00") };}
0
 static final TableCellRenderer[] getRenderers()
{    return new TableCellRenderer[] {     null,     null,     null,     null,     null,     null,     null,     null,     null,     new NumberRenderer("#0.00%"),     new RateRenderer("#.0"),     new NumberRenderer("#0.00"),     new NumberRenderer("#0.00") };}
0
 static String[] getLabels(String[] keys, Object[][] columnMsgParams)
{    String[] labels = new String[keys.length];    for (int i = 0; i < labels.length; i++) {        labels[i] = MessageFormat.format(JMeterUtils.getResString(keys[i]), columnMsgParams[i]);    }    return labels;}
0
public static List<List<Object>> getAllTableData(ObjectTableModel model, Format[] formats)
{    List<List<Object>> data = new ArrayList<>();    if (model.getRowCount() > 0) {        for (int rw = 0; rw < model.getRowCount(); rw++) {            int cols = model.getColumnCount();            List<Object> column = new ArrayList<>();            data.add(column);            for (int idx = 0; idx < cols; idx++) {                Object val = model.getValueAt(rw, idx);                if (formats[idx] != null) {                    column.add(formats[idx].format(val));                } else {                    column.add(val);                }            }        }    }    return data;}
0
public static boolean testFunctors()
{    StatGraphVisualizer instance = new StatGraphVisualizer();    return instance.model.checkFunctors(null, instance.getClass());}
0
public String getLabelResource()
{        return "aggregate_graph_title";}
0
public void add(final SampleResult res)
{    final String sampleLabel = res.getSampleLabel();        Matcher matcher = null;    if (columnSelection.isSelected() && pattern != null) {        matcher = pattern.matcher(sampleLabel);    }    if ((matcher == null) || (matcher.find())) {        SamplingStatCalculator row = tableRows.computeIfAbsent(sampleLabel, label -> {            SamplingStatCalculator newRow = new SamplingStatCalculator(label);            newRows.addLast(newRow);            return newRow;        });        synchronized (row) {            row.addSample(res);        }        synchronized (lock) {            tableRows.get(TOTAL_ROW_LABEL).addSample(res);        }    }}
0
public void clearData()
{    synchronized (lock) {        model.clearData();        tableRows.clear();        newRows.clear();        tableRows.put(TOTAL_ROW_LABEL, new SamplingStatCalculator(TOTAL_ROW_LABEL));        model.addRow(tableRows.get(TOTAL_ROW_LABEL));    }}
0
private void init()
{        this.setLayout(new BorderLayout());        JPanel mainPanel = new JPanel();    Border margin = new EmptyBorder(10, 10, 5, 10);    Border margin2 = new EmptyBorder(10, 10, 5, 10);    mainPanel.setBorder(margin);    mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));    mainPanel.add(makeTitlePanel());    myJTable = new JTable(model);    myJTable.setRowSorter(new ObjectTableSorter(model).fixLastRow());    JMeterUtils.applyHiDPI(myJTable);        HeaderAsPropertyRendererWrapper.setupDefaultRenderer(myJTable);    myJTable.setPreferredScrollableViewportSize(new Dimension(500, 70));    RendererUtils.applyRenderers(myJTable, getRenderers());    myScrollPane = new JScrollPane(myJTable);    settingsPane = new VerticalPanel();    settingsPane.setBorder(margin2);    graphPanel = new AxisGraph();    graphPanel.setPreferredSize(new Dimension(defaultWidth, defaultHeight));    settingsPane.add(createGraphActionsPane());    settingsPane.add(createGraphColumnPane());    settingsPane.add(createGraphTitlePane());    settingsPane.add(createGraphDimensionPane());    JPanel axisPane = new JPanel(new BorderLayout());    axisPane.add(createGraphXAxisPane(), BorderLayout.WEST);    axisPane.add(createGraphYAxisPane(), BorderLayout.CENTER);    settingsPane.add(axisPane);    settingsPane.add(createLegendPane());        tabbedGraph.addTab(JMeterUtils.getResString("aggregate_graph_tab_settings"), settingsPane);        tabbedGraph.addTab(JMeterUtils.getResString("aggregate_graph_tab_graph"), graphPanel);        tabbedGraph.addChangeListener(changeEvent -> {        JTabbedPane srcTab = (JTabbedPane) changeEvent.getSource();        int index = srcTab.getSelectedIndex();        if (srcTab.getTitleAt(index).equals(JMeterUtils.getResString("aggregate_graph_tab_graph"))) {                        actionMakeGraph();        }    });    spane = new JSplitPane(JSplitPane.VERTICAL_SPLIT);    spane.setOneTouchExpandable(true);    spane.setLeftComponent(myScrollPane);    spane.setRightComponent(tabbedGraph);    spane.setResizeWeight(.2);        spane.setBorder(null);    spane.setContinuousLayout(true);    this.add(mainPanel, BorderLayout.NORTH);    this.add(spane, BorderLayout.CENTER);    new Timer(REFRESH_PERIOD, e -> {        if (newRows.isEmpty()) {            return;        }        synchronized (lock) {            while (!newRows.isEmpty()) {                model.insertRow(newRows.pop(), model.getRowCount() - 1);            }        }        model.fireTableDataChanged();    }).start();}
0
public void makeGraph()
{    nbColToGraph = getNbColumns();    Dimension size = graphPanel.getSize();    String lstr = maxLengthXAxisLabel.getText();        int width = (int) size.getWidth();    int height = (int) size.getHeight();    if (!dynamicGraphSize.isSelected()) {        String wstr = graphWidth.getText();        String hstr = graphHeight.getText();        if (wstr.length() != 0) {            width = Integer.parseInt(wstr);        }        if (hstr.length() != 0) {            height = Integer.parseInt(hstr);        }    }    if (lstr.length() == 0) {                lstr = "20";    }    int maxLength = Integer.parseInt(lstr);    String yAxisStr = maxValueYAxisLabel.getText();    int maxYAxisScale = yAxisStr.length() == 0 ? 0 : Integer.parseInt(yAxisStr);    graphPanel.setData(this.getData());    graphPanel.setTitle(graphTitle.getText());    graphPanel.setMaxLength(maxLength);    graphPanel.setMaxYAxisScale(maxYAxisScale);    graphPanel.setXAxisLabels(getAxisLabels());    graphPanel.setXAxisTitle(JMeterUtils.getResString((String) columnsList.getSelectedItem()));    graphPanel.setYAxisLabels(this.yAxisLabel);    graphPanel.setYAxisTitle(this.yAxisTitle);    graphPanel.setLegendLabels(getLegendLabels());    graphPanel.setColor(getBackColors());    graphPanel.setForeColor(colorForeGraph);    graphPanel.setOutlinesBarFlag(drawOutlinesBar.isSelected());    graphPanel.setShowGrouping(numberShowGrouping.isSelected());    graphPanel.setValueOrientation(valueLabelsVertical.isSelected());    graphPanel.setLegendPlacement(StatGraphProperties.getPlacementNameMap().get(legendPlacementList.getSelectedItem()).intValue());    graphPanel.setTitleFont(new Font(StatGraphProperties.getFontNameMap().get(titleFontNameList.getSelectedItem()), StatGraphProperties.getFontStyleMap().get(titleFontStyleList.getSelectedItem()).intValue(), Integer.parseInt((String) titleFontSizeList.getSelectedItem())));    graphPanel.setLegendFont(new Font(StatGraphProperties.getFontNameMap().get(fontNameList.getSelectedItem()), StatGraphProperties.getFontStyleMap().get(fontStyleList.getSelectedItem()).intValue(), Integer.parseInt((String) fontSizeList.getSelectedItem())));    graphPanel.setValueFont(new Font(StatGraphProperties.getFontNameMap().get(valueFontNameList.getSelectedItem()), StatGraphProperties.getFontStyleMap().get(valueFontStyleList.getSelectedItem()).intValue(), Integer.parseInt((String) valueFontSizeList.getSelectedItem())));    graphPanel.setHeight(height);    graphPanel.setWidth(width);    spane.repaint();}
0
public double[][] getData()
{    if (model.getRowCount() > 1) {        int count = model.getRowCount() - 1;        int size = nbColToGraph;        double[][] data = new double[size][count];        int s = 0;        int cpt = 0;        for (BarGraph bar : eltList) {            if (bar.getChkBox().isSelected()) {                int col = model.findColumn(columnsList.getItemAt(cpt));                for (int idx = 0; idx < count; idx++) {                    data[s][idx] = ((Number) model.getValueAt(idx, col)).doubleValue();                }                s++;            }            cpt++;        }        return data;    }        return null;}
0
public String[] getAxisLabels()
{    if (model.getRowCount() > 1) {        int count = model.getRowCount() - 1;        String[] labels = new String[count];        for (int idx = 0; idx < count; idx++) {            labels[idx] = (String) model.getValueAt(idx, 0);        }        return labels;    }        return null;}
0
private String[] getLegendLabels()
{    String[] legends = new String[nbColToGraph];    int i = 0;    for (BarGraph bar : eltList) {        if (bar.getChkBox().isSelected()) {            legends[i] = bar.getLabel();            i++;        }    }    return legends;}
0
private Color[] getBackColors()
{    Color[] backColors = new Color[nbColToGraph];    int i = 0;    for (BarGraph bar : eltList) {        if (bar.getChkBox().isSelected()) {            backColors[i] = bar.getBackColor();            i++;        }    }    return backColors;}
0
private int getNbColumns()
{    int i = 0;    for (BarGraph bar : eltList) {        if (bar.getChkBox().isSelected()) {            i++;        }    }    return i;}
0
public void actionPerformed(ActionEvent event)
{    boolean forceReloadData = false;    final Object eventSource = event.getSource();    if (eventSource == displayButton) {        actionMakeGraph();    } else if (eventSource == saveGraph) {        saveGraphToFile = true;        try {            ActionRouter.getInstance().getAction(ActionNames.SAVE_GRAPHICS, SaveGraphics.class.getName()).doAction(new ActionEvent(this, event.getID(), ActionNames.SAVE_GRAPHICS));        } catch (Exception e) {                    }    } else if (eventSource == saveTable) {                JFileChooser chooser = FileDialoger.promptToSaveFile("statistics.csv");        if (chooser == null) {            return;        }        try (FileOutputStream fo = new FileOutputStream(chooser.getSelectedFile());            OutputStreamWriter writer = new OutputStreamWriter(fo, Charset.forName("UTF-8"))) {            CSVSaveService.saveCSVStats(getAllTableData(model, getFormatters()), writer, saveHeaders.isSelected() ? getLabels(COLUMNS, getColumnsMsgParameters()) : null);        } catch (IOException e) {                        JMeterUtils.reportErrorToUser(e.getMessage(), "Error saving data");        }    } else if (eventSource == chooseForeColor) {        Color color = JColorChooser.showDialog(null,         JMeterUtils.getResString("aggregate_graph_choose_color"), colorBarGraph);        if (color != null) {            colorForeGraph = color;        }    } else if (eventSource == syncWithName) {        graphTitle.setText(namePanel.getName());    } else if (eventSource == dynamicGraphSize) {                if (dynamicGraphSize.isSelected()) {            graphWidth.setEnabled(false);            graphHeight.setEnabled(false);        } else {            graphWidth.setEnabled(true);            graphHeight.setEnabled(true);        }    } else if (eventSource == columnSelection) {        if (columnSelection.isSelected()) {            columnMatchLabel.setEnabled(true);            applyFilterBtn.setEnabled(true);            caseChkBox.setEnabled(true);            regexpChkBox.setEnabled(true);        } else {            columnMatchLabel.setEnabled(false);            applyFilterBtn.setEnabled(false);            caseChkBox.setEnabled(false);            regexpChkBox.setEnabled(false);                        forceReloadData = true;        }    }        if (eventSource == applyFilterBtn || forceReloadData) {        if (columnSelection.isSelected() && columnMatchLabel.getText() != null && columnMatchLabel.getText().length() > 0) {            pattern = createPattern(columnMatchLabel.getText());        } else if (forceReloadData) {            pattern = null;        }        if (getFile() != null && getFile().length() > 0) {            clearData();            FilePanel filePanel = (FilePanel) getFilePanel();            filePanel.actionPerformed(event);        }    } else if (eventSource instanceof JButton) {                JButton btn = (JButton) eventSource;        if (btn.getName() != null) {            try {                BarGraph bar = eltList.get(Integer.parseInt(btn.getName()));                Color color = JColorChooser.showDialog(null, bar.getLabel(), bar.getBackColor());                if (color != null) {                    bar.setBackColor(color);                    btn.setBackground(bar.getBackColor());                }            } catch (NumberFormatException nfe) {                        }        }    }}
1
private void actionMakeGraph()
{    if (model.getRowCount() > 1) {        makeGraph();        tabbedGraph.setSelectedIndex(1);    } else {        JOptionPane.showMessageDialog(null, JMeterUtils.getResString(        "aggregate_graph_no_values_to_graph"),         JMeterUtils.getResString("aggregate_graph_no_values_to_graph"), JOptionPane.WARNING_MESSAGE);    }}
0
public JComponent getPrintableComponent()
{    if (saveGraphToFile) {        saveGraphToFile = false;                if (model.getRowCount() > 1) {            makeGraph();        }        graphPanel.setBounds(graphPanel.getLocation().x, graphPanel.getLocation().y, graphPanel.width, graphPanel.height);        return graphPanel;    }    return this;}
0
private JPanel createGraphActionsPane()
{    JPanel buttonPanel = new JPanel(new BorderLayout());    JPanel displayPane = new JPanel();    displayPane.add(displayButton);    displayButton.addActionListener(this);    buttonPanel.add(displayPane, BorderLayout.WEST);    JPanel savePane = new JPanel();    savePane.add(saveGraph);    savePane.add(saveTable);    savePane.add(saveHeaders);    saveGraph.addActionListener(this);    saveTable.addActionListener(this);    syncWithName.addActionListener(this);    buttonPanel.add(savePane, BorderLayout.EAST);    return buttonPanel;}
0
private JPanel createGraphColumnPane()
{    JPanel colPanel = new JPanel();    colPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 0));        JLabel label = new JLabel(JMeterUtils.getResString("aggregate_graph_columns_to_display"));    colPanel.add(label);    for (BarGraph bar : eltList) {        colPanel.add(bar.getChkBox());        colPanel.add(createColorBarButton(bar, eltList.indexOf(bar)));    }    colPanel.add(Box.createRigidArea(new Dimension(5, 0)));    chooseForeColor.setFont(FONT_SMALL);    colPanel.add(chooseForeColor);    chooseForeColor.addActionListener(this);    JPanel optionsPanel = new JPanel();    optionsPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));    optionsPanel.add(createGraphFontValuePane());    optionsPanel.add(drawOutlinesBar);    optionsPanel.add(numberShowGrouping);    optionsPanel.add(valueLabelsVertical);    JPanel barPane = new JPanel(new BorderLayout());    barPane.add(colPanel, BorderLayout.NORTH);    barPane.add(Box.createRigidArea(new Dimension(0, 3)), BorderLayout.CENTER);    barPane.add(optionsPanel, BorderLayout.SOUTH);    JPanel columnPane = new JPanel(new BorderLayout());    columnPane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("aggregate_graph_column_settings")));    columnPane.add(barPane, BorderLayout.NORTH);    columnPane.add(Box.createRigidArea(new Dimension(0, 3)), BorderLayout.CENTER);    columnPane.add(createGraphSelectionSubPane(), BorderLayout.SOUTH);    return columnPane;}
0
private JButton createColorBarButton(BarGraph barGraph, int index)
{        JButton colorBtn = new JButton();    colorBtn.setName(String.valueOf(index));    colorBtn.setFont(FONT_SMALL);    colorBtn.addActionListener(this);    colorBtn.setBackground(barGraph.getBackColor());    return colorBtn;}
0
private JPanel createGraphSelectionSubPane()
{        JPanel searchPanel = new JPanel();    searchPanel.setLayout(new BoxLayout(searchPanel, BoxLayout.X_AXIS));    searchPanel.setBorder(BorderFactory.createEmptyBorder(3, 0, 3, 0));    searchPanel.add(columnSelection);    columnMatchLabel.setEnabled(false);    applyFilterBtn.setEnabled(false);    caseChkBox.setEnabled(false);    regexpChkBox.setEnabled(false);    columnSelection.addActionListener(this);    searchPanel.add(columnMatchLabel);    searchPanel.add(Box.createRigidArea(new Dimension(5, 0)));        applyFilterBtn.setFont(FONT_SMALL);    applyFilterBtn.addActionListener(this);    searchPanel.add(applyFilterBtn);        caseChkBox.setFont(FONT_SMALL);    searchPanel.add(caseChkBox);    regexpChkBox.setFont(FONT_SMALL);    searchPanel.add(regexpChkBox);    return searchPanel;}
0
private JPanel createGraphTitlePane()
{    JPanel titleNamePane = new JPanel(new BorderLayout());    syncWithName.setFont(new Font("SansSerif", Font.PLAIN, 10));    titleNamePane.add(graphTitle, BorderLayout.CENTER);    titleNamePane.add(syncWithName, BorderLayout.EAST);    JPanel titleStylePane = new JPanel();    titleStylePane.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 5));    titleStylePane.add(    GuiUtils.createLabelCombo(    JMeterUtils.getResString("aggregate_graph_font"), titleFontNameList));        titleFontNameList.setSelectedIndex(0);    titleStylePane.add(    GuiUtils.createLabelCombo(    JMeterUtils.getResString("aggregate_graph_size"), titleFontSizeList));        titleFontSizeList.setSelectedItem(StatGraphProperties.getFontSize()[6]);    titleStylePane.add(    GuiUtils.createLabelCombo(    JMeterUtils.getResString("aggregate_graph_style"), titleFontStyleList));        titleFontStyleList.setSelectedItem(JMeterUtils.getResString("fontstyle.bold"));    JPanel titlePane = new JPanel(new BorderLayout());    titlePane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("aggregate_graph_title_group")));    titlePane.add(titleNamePane, BorderLayout.NORTH);    titlePane.add(titleStylePane, BorderLayout.SOUTH);    return titlePane;}
0
private JPanel createGraphFontValuePane()
{    JPanel fontValueStylePane = new JPanel();    fontValueStylePane.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));    fontValueStylePane.add(    GuiUtils.createLabelCombo(    JMeterUtils.getResString("aggregate_graph_value_font"), valueFontNameList));        valueFontNameList.setSelectedIndex(0);    fontValueStylePane.add(    GuiUtils.createLabelCombo(    JMeterUtils.getResString("aggregate_graph_size"), valueFontSizeList));        valueFontSizeList.setSelectedItem(StatGraphProperties.getFontSize()[2]);    fontValueStylePane.add(    GuiUtils.createLabelCombo(    JMeterUtils.getResString("aggregate_graph_style"), valueFontStyleList));        valueFontStyleList.setSelectedItem(JMeterUtils.getResString("fontstyle.normal"));    return fontValueStylePane;}
0
private JPanel createGraphDimensionPane()
{    JPanel dimensionPane = new JPanel();    dimensionPane.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));    dimensionPane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("aggregate_graph_dimension")));    dimensionPane.add(dynamicGraphSize);        dynamicGraphSize.setSelected(true);    graphWidth.setEnabled(false);    graphHeight.setEnabled(false);    dynamicGraphSize.addActionListener(this);    dimensionPane.add(Box.createRigidArea(new Dimension(10, 0)));    dimensionPane.add(graphWidth);    dimensionPane.add(Box.createRigidArea(new Dimension(5, 0)));    dimensionPane.add(graphHeight);    return dimensionPane;}
0
private JPanel createGraphXAxisPane()
{    JPanel xAxisPane = new JPanel();    xAxisPane.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));    xAxisPane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("aggregate_graph_xaxis_group")));    xAxisPane.add(maxLengthXAxisLabel);    return xAxisPane;}
0
private JPanel createGraphYAxisPane()
{    JPanel yAxisPane = new JPanel();    yAxisPane.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));    yAxisPane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("aggregate_graph_yaxis_group")));    yAxisPane.add(maxValueYAxisLabel);    return yAxisPane;}
0
private JPanel createLegendPane()
{    JPanel legendPanel = new JPanel();    legendPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));    legendPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("aggregate_graph_legend")));    legendPanel.add(    GuiUtils.createLabelCombo(    JMeterUtils.getResString("aggregate_graph_legend_placement"), legendPlacementList));        legendPlacementList.setSelectedItem(JMeterUtils.getResString("aggregate_graph_legend.placement.bottom"));    legendPanel.add(    GuiUtils.createLabelCombo(    JMeterUtils.getResString("aggregate_graph_font"), fontNameList));        fontNameList.setSelectedIndex(0);    legendPanel.add(    GuiUtils.createLabelCombo(    JMeterUtils.getResString("aggregate_graph_size"), fontSizeList));        fontSizeList.setSelectedItem(StatGraphProperties.getFontSize()[2]);    legendPanel.add(    GuiUtils.createLabelCombo(    JMeterUtils.getResString("aggregate_graph_style"), fontStyleList));        fontStyleList.setSelectedItem(JMeterUtils.getResString("fontstyle.normal"));    return legendPanel;}
0
private Pattern createPattern(String textToFind)
{    String textToFindQ = Pattern.quote(textToFind);    if (regexpChkBox.isSelected()) {        textToFindQ = textToFind;    }    Pattern result = null;    try {        if (caseChkBox.isSelected()) {            result = Pattern.compile(textToFindQ);        } else {            result = Pattern.compile(textToFindQ, Pattern.CASE_INSENSITIVE);        }    } catch (PatternSyntaxException pse) {        return null;    }    return result;}
0
public static boolean testFunctors()
{    StatVisualizer instance = new StatVisualizer();    return instance.model.checkFunctors(null, instance.getClass());}
0
public String getLabelResource()
{        return "aggregate_report";}
0
public void add(final SampleResult res)
{    SamplingStatCalculator row = tableRows.computeIfAbsent(res.getSampleLabel(useGroupName.isSelected()), label -> {        SamplingStatCalculator newRow = new SamplingStatCalculator(label);        newRows.add(newRow);        return newRow;    });    synchronized (row) {        /*             * Synch is needed because multiple threads can update the counts.             */        row.addSample(res);    }    SamplingStatCalculator tot = tableRows.get(TOTAL_ROW_LABEL);    synchronized (lock) {        tot.addSample(res);    }    dataChanged = true;}
0
public void clearData()
{    synchronized (lock) {        model.clearData();        tableRows.clear();        newRows.clear();        tableRows.put(TOTAL_ROW_LABEL, new SamplingStatCalculator(TOTAL_ROW_LABEL));        model.addRow(tableRows.get(TOTAL_ROW_LABEL));    }}
0
private void init()
{        this.setLayout(new BorderLayout());        JPanel mainPanel = new JPanel();    Border margin = new EmptyBorder(10, 10, 5, 10);    mainPanel.setBorder(margin);    mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));    mainPanel.add(makeTitlePanel());    JTable myJTable = new JTable(model);    myJTable.setRowSorter(new ObjectTableSorter(model).fixLastRow());    JMeterUtils.applyHiDPI(myJTable);    HeaderAsPropertyRendererWrapper.setupDefaultRenderer(myJTable, StatGraphVisualizer.getColumnsMsgParameters());    myJTable.setPreferredScrollableViewportSize(new Dimension(500, 70));    RendererUtils.applyRenderers(myJTable, StatGraphVisualizer.getRenderers());    JScrollPane myScrollPane = new JScrollPane(myJTable);    this.add(mainPanel, BorderLayout.NORTH);    this.add(myScrollPane, BorderLayout.CENTER);    saveTable.addActionListener(this);    JPanel opts = new JPanel();    opts.add(useGroupName, BorderLayout.WEST);    opts.add(saveTable, BorderLayout.CENTER);    opts.add(saveHeaders, BorderLayout.EAST);    this.add(opts, BorderLayout.SOUTH);    new Timer(REFRESH_PERIOD, e -> {        if (!dataChanged) {            return;        }        dataChanged = false;        synchronized (lock) {            while (!newRows.isEmpty()) {                model.insertRow(newRows.pop(), model.getRowCount() - 1);            }        }        model.fireTableDataChanged();    }).start();}
0
public void modifyTestElement(TestElement c)
{    super.modifyTestElement(c);    c.setProperty(USE_GROUP_NAME, useGroupName.isSelected(), false);    c.setProperty(SAVE_HEADERS, saveHeaders.isSelected(), true);}
0
public void configure(TestElement el)
{    super.configure(el);    useGroupName.setSelected(el.getPropertyAsBoolean(USE_GROUP_NAME, false));    saveHeaders.setSelected(el.getPropertyAsBoolean(SAVE_HEADERS, true));}
0
public void actionPerformed(ActionEvent ev)
{    if (ev.getSource() == saveTable) {                JFileChooser chooser = FileDialoger.promptToSaveFile("aggregate.csv");        if (chooser == null) {            return;        }        try (FileOutputStream fo = new FileOutputStream(chooser.getSelectedFile());            OutputStreamWriter writer = new OutputStreamWriter(fo, StandardCharsets.UTF_8)) {            CSVSaveService.saveCSVStats(StatGraphVisualizer.getAllTableData(model, StatGraphVisualizer.getFormatters()), writer, saveHeaders.isSelected() ? StatGraphVisualizer.getLabels(StatGraphVisualizer.getColumns(), StatGraphVisualizer.getColumnsMsgParameters()) : null);        } catch (IOException e) {            JMeterUtils.reportErrorToUser(e.getMessage(), "Error saving data");        }    }}
0
public static boolean testFunctors()
{    SummaryReport instance = new SummaryReport();    return instance.model.checkFunctors(null, instance.getClass());}
0
public String getLabelResource()
{        return "summary_report";}
0
public void add(final SampleResult res)
{    Calculator row = tableRows.computeIfAbsent(res.getSampleLabel(useGroupName.isSelected()), label -> {        Calculator newRow = new Calculator(label);        newRows.add(newRow);        return newRow;    });    /*         * Synch is needed because multiple threads can update the counts.         */    synchronized (row) {        row.addSample(res);    }    Calculator tot = tableRows.get(TOTAL_ROW_LABEL);    synchronized (lock) {        tot.addSample(res);    }    dataChanged = true;}
0
public void clearData()
{        synchronized (lock) {        model.clearData();        newRows.clear();        tableRows.clear();        tableRows.put(TOTAL_ROW_LABEL, new Calculator(TOTAL_ROW_LABEL));        model.addRow(tableRows.get(TOTAL_ROW_LABEL));    }    dataChanged = true;}
0
private void init()
{        this.setLayout(new BorderLayout());        JPanel mainPanel = new JPanel();    Border margin = new EmptyBorder(10, 10, 5, 10);    mainPanel.setBorder(margin);    mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));    mainPanel.add(makeTitlePanel());    myJTable = new JTable(model);    myJTable.setRowSorter(new ObjectTableSorter(model).fixLastRow());    JMeterUtils.applyHiDPI(myJTable);    HeaderAsPropertyRendererWrapper.setupDefaultRenderer(myJTable);    myJTable.setPreferredScrollableViewportSize(new Dimension(500, 70));    RendererUtils.applyRenderers(myJTable, RENDERERS);    myScrollPane = new JScrollPane(myJTable);    this.add(mainPanel, BorderLayout.NORTH);    this.add(myScrollPane, BorderLayout.CENTER);    saveTable.addActionListener(this);    JPanel opts = new JPanel();    opts.add(useGroupName, BorderLayout.WEST);    opts.add(saveTable, BorderLayout.CENTER);    opts.add(saveHeaders, BorderLayout.EAST);    this.add(opts, BorderLayout.SOUTH);}
0
public void modifyTestElement(TestElement c)
{    super.modifyTestElement(c);    c.setProperty(USE_GROUP_NAME, useGroupName.isSelected(), false);    c.setProperty(SAVE_HEADERS, saveHeaders.isSelected(), true);}
0
public void configure(TestElement el)
{    super.configure(el);    useGroupName.setSelected(el.getPropertyAsBoolean(USE_GROUP_NAME, false));    saveHeaders.setSelected(el.getPropertyAsBoolean(SAVE_HEADERS, true));}
0
public void actionPerformed(ActionEvent ev)
{    if (ev.getSource() == saveTable) {                JFileChooser chooser = FileDialoger.promptToSaveFile("summary.csv");        if (chooser == null) {            return;        }        try (FileOutputStream fo = new FileOutputStream(chooser.getSelectedFile());            OutputStreamWriter writer = new OutputStreamWriter(fo, Charset.forName("UTF-8"))) {            CSVSaveService.saveCSVStats(StatGraphVisualizer.getAllTableData(model, FORMATS), writer, saveHeaders.isSelected() ? StatGraphVisualizer.getLabels(COLUMNS, COLUMNS_PARAMS) : null);        } catch (IOException e) {            JMeterUtils.reportErrorToUser(e.getMessage(), "Error saving data");        }    }}
0
public static boolean testFunctors()
{    TableVisualizer instance = new TableVisualizer();    return instance.model.checkFunctors(null, instance.getClass());}
0
public String getLabelResource()
{        return "view_results_in_table";}
0
protected synchronized void updateTextFields(SampleResult res)
{    noSamplesField.setText(Long.toString(calc.getCount()));    if (res.getSampleCount() > 0) {        dataField.setText(Long.toString(res.getTime() / res.getSampleCount()));    } else {        dataField.setText("0");    }    averageField.setText(Long.toString((long) calc.getMean()));    deviationField.setText(Long.toString((long) calc.getStandardDeviation()));}
0
public void add(final SampleResult res)
{    if (childSamples.isSelected()) {        SampleResult[] subResults = res.getSubResults();        if (subResults.length > 0) {            for (SampleResult sr : subResults) {                add(sr);            }            return;        }    }    newRows.add(res);}
0
public synchronized void clearData()
{    synchronized (calc) {        model.clearData();        calc.clear();        newRows.clear();                noSamplesField.setText("0");                dataField.setText("0");                averageField.setText("0");                deviationField.setText("0");    }    repaint();}
0
public String toString()
{    return "Show the samples in a table";}
0
private void init()
{        this.setLayout(new BorderLayout());        JPanel mainPanel = new JPanel();    Border margin = new EmptyBorder(10, 10, 5, 10);    mainPanel.setBorder(margin);    mainPanel.setLayout(new VerticalLayout(5, VerticalLayout.BOTH));        mainPanel.add(makeTitlePanel());        table = new JTable(model);    table.setRowSorter(new ObjectTableSorter(model).setValueComparator(5, Comparator.nullsFirst((ImageIcon o1, ImageIcon o2) -> {        if (o1 == o2) {            return 0;        }        if (o1 == imageSuccess) {            return -1;        }        if (o1 == imageFailure) {            return 1;        }        throw new IllegalArgumentException("Only success and failure images can be compared");    })));    JMeterUtils.applyHiDPI(table);    HeaderAsPropertyRendererWrapper.setupDefaultRenderer(table);    RendererUtils.applyRenderers(table, RENDERERS);    tableScrollPanel = new JScrollPane(table);    tableScrollPanel.setViewportBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2));        autoscroll = new JCheckBox(JMeterUtils.getResString("view_results_autoscroll"));        childSamples = new JCheckBox(JMeterUtils.getResString("view_results_childsamples"));        JPanel dataPanel = new JPanel();        JLabel dataLabel = new JLabel(JMeterUtils.getResString("graph_results_latest_sample"));    dataLabel.setForeground(Color.black);    dataField = new JTextField(5);    dataField.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));    dataField.setEditable(false);    dataField.setForeground(Color.black);    dataField.setBackground(getBackground());    dataPanel.add(dataLabel);    dataPanel.add(dataField);    JPanel averagePanel = new JPanel();        JLabel averageLabel = new JLabel(JMeterUtils.getResString("graph_results_average"));    averageLabel.setForeground(Color.blue);    averageField = new JTextField(5);    averageField.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));    averageField.setEditable(false);    averageField.setForeground(Color.blue);    averageField.setBackground(getBackground());    averagePanel.add(averageLabel);    averagePanel.add(averageField);    JPanel deviationPanel = new JPanel();        JLabel deviationLabel = new JLabel(JMeterUtils.getResString("graph_results_deviation"));    deviationLabel.setForeground(Color.red);    deviationField = new JTextField(5);    deviationField.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));    deviationField.setEditable(false);    deviationField.setForeground(Color.red);    deviationField.setBackground(getBackground());    deviationPanel.add(deviationLabel);    deviationPanel.add(deviationField);    JPanel noSamplesPanel = new JPanel();        JLabel noSamplesLabel = new JLabel(JMeterUtils.getResString("graph_results_no_samples"));    noSamplesField = new JTextField(8);    noSamplesField.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));    noSamplesField.setEditable(false);    noSamplesField.setForeground(Color.black);    noSamplesField.setBackground(getBackground());    noSamplesPanel.add(noSamplesLabel);    noSamplesPanel.add(noSamplesField);    JPanel tableInfoPanel = new JPanel();    tableInfoPanel.setLayout(new FlowLayout());    tableInfoPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));    tableInfoPanel.add(noSamplesPanel);    tableInfoPanel.add(dataPanel);    tableInfoPanel.add(averagePanel);    tableInfoPanel.add(deviationPanel);    JPanel tableControlsPanel = new JPanel(new BorderLayout());    tableControlsPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));    JPanel jp = new HorizontalPanel();    jp.add(autoscroll);    jp.add(childSamples);    tableControlsPanel.add(jp, BorderLayout.WEST);    tableControlsPanel.add(tableInfoPanel, BorderLayout.CENTER);        JPanel tablePanel = new JPanel();    tablePanel.setLayout(new BorderLayout());    tablePanel.add(tableScrollPanel, BorderLayout.CENTER);    tablePanel.add(tableControlsPanel, BorderLayout.SOUTH);        this.add(mainPanel, BorderLayout.NORTH);    this.add(tablePanel, BorderLayout.CENTER);    new Timer(REFRESH_PERIOD, e -> collectNewSamples()).start();}
0
private void collectNewSamples()
{    synchronized (calc) {        SampleResult res = null;        while (!newRows.isEmpty()) {            res = newRows.pop();            calc.addSample(res);            int count = calc.getCount();            TableSample newS = new TableSample(count, res.getSampleCount(), res.getStartTime(), res.getThreadName(), res.getSampleLabel(), res.getTime(), res.isSuccessful(), res.getBytesAsLong(), res.getSentBytes(), res.getLatency(), res.getConnectTime());            model.addRow(newS);        }        if (res == null) {            return;        }        updateTextFields(res);        if (autoscroll.isSelected()) {            table.scrollRectToVisible(table.getCellRect(table.getRowCount() - 1, 0, true));        }    }}
0
public Object invoke(Object pInvokee)
{    Boolean success = (Boolean) super.invoke(pInvokee);    if (success != null) {        if (success.booleanValue()) {            return imageSuccess;        } else {            return imageFailure;        }    } else {        return null;    }}
0
public Component getTreeCellRendererComponent(JTree tree, Object value, boolean sel, boolean expanded, boolean leaf, int row, boolean focus)
{    super.getTreeCellRendererComponent(tree, value, sel, expanded, leaf, row, focus);    Object obj = ((DefaultMutableTreeNode) value).getUserObject();    if (obj instanceof SampleResult) {        if (!((SampleResult) obj).isSuccessful()) {            this.setForeground(Color.red);            this.setIcon(imageFailure);        } else {            this.setIcon(imageSuccess);        }    }    return this;}
0
public static List<Color> getColors()
{    Properties defaultProps = JMeterUtils.loadProperties(DEFAULT_COLORS_PROPERTY_FILE);    if (defaultProps == null) {        JOptionPane.showMessageDialog(null,         JMeterUtils.getResString("toolbar_icon_set_not_found"),         JMeterUtils.getResString("toolbar_icon_set_not_found"), JOptionPane.WARNING_MESSAGE);        return null;    }    Properties p;    String userProp = JMeterUtils.getProperty(USER_DEFINED_COLORS_PROPERTY_FILE);    if (userProp != null) {        p = JMeterUtils.loadProperties(userProp, defaultProps);    } else {        p = defaultProps;    }    String order = JMeterUtils.getPropDefault(COLORS_ORDER, p.getProperty(ORDER_PROP_NAME));    if (order == null) {                JOptionPane.showMessageDialog(null,         JMeterUtils.getResString("toolbar_icon_set_not_found"),         JMeterUtils.getResString("toolbar_icon_set_not_found"), JOptionPane.WARNING_MESSAGE);        return null;    }    String[] oList = order.split(ENTRY_SEP);    List<Color> listColors = new ArrayList<>();    for (String key : oList) {        String trimmed = key.trim();        String property = p.getProperty(trimmed);        try {            String[] lcol = property.split(ENTRY_SEP);            Color itb = new Color(Integer.parseInt(lcol[0]), Integer.parseInt(lcol[1]), Integer.parseInt(lcol[2]));            listColors.add(itb);        } catch (java.lang.Exception e) {                                }    }    return listColors;}
1
public void add(final SampleResult sample)
{    synchronized (buffer) {        buffer.add(sample);        dataChanged = true;    }}
0
private void updateGui()
{    TreePath selectedPath = null;    Object oldSelectedElement;    Set<Object> oldExpandedElements;    Set<TreePath> newExpandedPaths = new HashSet<>();    synchronized (buffer) {        if (!dataChanged) {            return;        }        final Enumeration<TreePath> expandedElements = jTree.getExpandedDescendants(new TreePath(root));        oldExpandedElements = extractExpandedObjects(expandedElements);        oldSelectedElement = getSelectedObject();        root.removeAllChildren();        for (Object sampler : buffer) {            SampleResult res = (SampleResult) sampler;                        DefaultMutableTreeNode currNode = new SearchableTreeNode(res, treeModel);            treeModel.insertNodeInto(currNode, root, root.getChildCount());            List<TreeNode> path = new ArrayList<>(Arrays.asList(root, currNode));            selectedPath = checkExpandedOrSelected(path, res, oldSelectedElement, oldExpandedElements, newExpandedPaths, selectedPath);            TreePath potentialSelection = addSubResults(currNode, res, path, oldSelectedElement, oldExpandedElements, newExpandedPaths);            if (potentialSelection != null) {                selectedPath = potentialSelection;            }                        AssertionResult[] assertionResults = res.getAssertionResults();            int assertionIndex = currNode.getChildCount();            for (AssertionResult assertionResult : assertionResults) {                if (assertionResult.isFailure() || assertionResult.isError()) {                    DefaultMutableTreeNode assertionNode = new SearchableTreeNode(assertionResult, treeModel);                    treeModel.insertNodeInto(assertionNode, currNode, assertionIndex++);                    selectedPath = checkExpandedOrSelected(path, assertionResult, oldSelectedElement, oldExpandedElements, newExpandedPaths, selectedPath, assertionNode);                }            }        }        treeModel.nodeStructureChanged(root);        dataChanged = false;    }    if (root.getChildCount() == 1) {        jTree.expandPath(new TreePath(root));    }    newExpandedPaths.stream().forEach(jTree::expandPath);    if (selectedPath != null) {        jTree.setSelectionPath(selectedPath);    }    if (autoScrollCB.isSelected() && root.getChildCount() > 1) {        jTree.scrollPathToVisible(new TreePath(new Object[] { root, treeModel.getChild(root, root.getChildCount() - 1) }));    }}
0
private Object getSelectedObject()
{    Object oldSelectedElement;    DefaultMutableTreeNode oldSelectedNode = (DefaultMutableTreeNode) jTree.getLastSelectedPathComponent();    oldSelectedElement = oldSelectedNode == null ? null : oldSelectedNode.getUserObject();    return oldSelectedElement;}
0
private TreePath checkExpandedOrSelected(List<TreeNode> path, Object item, Object oldSelectedObject, Set<Object> oldExpandedObjects, Set<TreePath> newExpandedPaths, TreePath defaultPath)
{    TreePath result = defaultPath;    if (oldSelectedObject == item) {        result = toTreePath(path);    }    if (oldExpandedObjects.contains(item)) {        newExpandedPaths.add(toTreePath(path));    }    return result;}
0
private TreePath checkExpandedOrSelected(List<TreeNode> path, Object item, Object oldSelectedObject, Set<Object> oldExpandedObjects, Set<TreePath> newExpandedPaths, TreePath defaultPath, DefaultMutableTreeNode extensionNode)
{    TreePath result = defaultPath;    if (oldSelectedObject == item) {        result = toTreePath(path, extensionNode);    }    if (oldExpandedObjects.contains(item)) {        newExpandedPaths.add(toTreePath(path, extensionNode));    }    return result;}
0
private Set<Object> extractExpandedObjects(final Enumeration<TreePath> expandedElements)
{    if (expandedElements != null) {        @SuppressWarnings("unchecked")        final List<TreePath> list = EnumerationUtils.toList(expandedElements);                Set<Object> result = list.stream().map(TreePath::getLastPathComponent).map(c -> (DefaultMutableTreeNode) c).map(DefaultMutableTreeNode::getUserObject).collect(Collectors.toSet());                return result;    }    return Collections.emptySet();}
1
private TreePath addSubResults(DefaultMutableTreeNode currNode, SampleResult res, List<TreeNode> path, Object selectedObject, Set<Object> oldExpandedObjects, Set<TreePath> newExpandedPaths)
{    SampleResult[] subResults = res.getSubResults();    int leafIndex = 0;    TreePath result = null;    for (SampleResult child : subResults) {                DefaultMutableTreeNode leafNode = new SearchableTreeNode(child, treeModel);        treeModel.insertNodeInto(leafNode, currNode, leafIndex++);        List<TreeNode> newPath = new ArrayList<>(path);        newPath.add(leafNode);        result = checkExpandedOrSelected(newPath, child, selectedObject, oldExpandedObjects, newExpandedPaths, result);        addSubResults(leafNode, child, newPath, selectedObject, oldExpandedObjects, newExpandedPaths);                AssertionResult[] assertionResults = child.getAssertionResults();        int assertionIndex = leafNode.getChildCount();        for (AssertionResult item : assertionResults) {            if (item.isFailure() || item.isError()) {                DefaultMutableTreeNode assertionNode = new SearchableTreeNode(item, treeModel);                treeModel.insertNodeInto(assertionNode, leafNode, assertionIndex++);                result = checkExpandedOrSelected(path, item, selectedObject, oldExpandedObjects, newExpandedPaths, result, assertionNode);            }        }    }    return result;}
1
private TreePath toTreePath(List<TreeNode> newPath)
{    return new TreePath(newPath.toArray(new TreeNode[newPath.size()]));}
0
private TreePath toTreePath(List<TreeNode> path, DefaultMutableTreeNode extensionNode)
{    TreeNode[] result = path.toArray(new TreeNode[path.size() + 1]);    result[result.length - 1] = extensionNode;    return new TreePath(result);}
0
public void clearData()
{    synchronized (buffer) {        buffer.clear();        dataChanged = true;    }    resultsRender.clearData();    resultsObject = null;}
0
public String getLabelResource()
{        return "view_results_tree_title";}
0
private void init()
{            setLayout(new BorderLayout(0, 5));    setBorder(makeBorder());    leftSide = createLeftPanel();        rightSide = new JTabbedPane();        mainSplit = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, leftSide, rightSide);    mainSplit.setOneTouchExpandable(true);    JSplitPane searchAndMainSP = new JSplitPane(JSplitPane.VERTICAL_SPLIT, new SearchTreePanel(root), mainSplit);    searchAndMainSP.setOneTouchExpandable(true);    JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT, makeTitlePanel(), searchAndMainSP);    splitPane.setOneTouchExpandable(true);    add(splitPane);        resultsRender.setRightSide(rightSide);    resultsRender.init();}
1
public void valueChanged(TreeSelectionEvent e)
{    valueChanged(e, false);}
0
private void valueChanged(TreeSelectionEvent e, boolean forceRendering)
{    lastSelectionEvent = e;    DefaultMutableTreeNode node;    synchronized (this) {        node = (DefaultMutableTreeNode) jTree.getLastSelectedPathComponent();    }    if (node != null && (forceRendering || node.getUserObject() != resultsObject)) {        resultsObject = node.getUserObject();                if (rightSide.getTabCount() > selectedTab) {            resultsRender.setLastSelectedTab(rightSide.getSelectedIndex());        }        Object userObject = node.getUserObject();        resultsRender.setSamplerResult(userObject);                resultsRender.setupTabPane();                if (userObject instanceof SampleResult) {            SampleResult sampleResult = (SampleResult) userObject;            if (isTextDataType(sampleResult)) {                resultsRender.renderResult(sampleResult);            } else {                byte[] responseBytes = sampleResult.getResponseData();                if (responseBytes != null) {                    resultsRender.renderImage(sampleResult);                }            }        }    }}
0
protected static boolean isTextDataType(SampleResult sampleResult)
{    return (SampleResult.TEXT).equals(sampleResult.getDataType()) || StringUtils.isEmpty(sampleResult.getDataType());}
0
private synchronized Component createLeftPanel()
{    SampleResult rootSampleResult = new SampleResult();    rootSampleResult.setSampleLabel("Root");    rootSampleResult.setSuccessful(true);    root = new SearchableTreeNode(rootSampleResult, null);    treeModel = new DefaultTreeModel(root);    jTree = new JTree(treeModel);    jTree.setCellRenderer(new ResultsNodeRenderer());    jTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);    jTree.addTreeSelectionListener(this);    jTree.setRootVisible(false);    jTree.setShowsRootHandles(true);    JScrollPane treePane = new JScrollPane(jTree);    treePane.setPreferredSize(new Dimension(200, 300));    VerticalPanel leftPane = new VerticalPanel();    leftPane.add(treePane, BorderLayout.CENTER);    leftPane.add(createComboRender(), BorderLayout.NORTH);        autoScrollCB = new JCheckBox(JMeterUtils.getResString("view_results_autoscroll"));    autoScrollCB.setSelected(false);    autoScrollCB.addItemListener(this);    leftPane.add(autoScrollCB, BorderLayout.SOUTH);    return leftPane;}
0
private Component createComboRender()
{    ComboBoxModel<ResultRenderer> nodesModel = new DefaultComboBoxModel<>();        selectRenderPanel = new JComboBox<>(nodesModel);    selectRenderPanel.setActionCommand(COMBO_CHANGE_COMMAND);    selectRenderPanel.addActionListener(this);        List<String> classesToAdd = Collections.<String>emptyList();    try {        classesToAdd = JMeterUtils.findClassesThatExtend(ResultRenderer.class);    } catch (IOException e1) {        }        String textRenderer = JMeterUtils.getResString("view_results_render_text");    Object textObject = null;    Map<String, ResultRenderer> map = new HashMap<>(classesToAdd.size());    for (String clazz : classesToAdd) {        try {                        final ResultRenderer renderer = (ResultRenderer) Class.forName(clazz).getDeclaredConstructor().newInstance();            if (textRenderer.equals(renderer.toString())) {                textObject = renderer;            }            renderer.setBackgroundColor(getBackground());            map.put(renderer.getClass().getName(), renderer);        } catch (NoClassDefFoundError e) {                        if (e.getMessage() != null && e.getMessage().contains("javafx")) {                            } else {                            }        } catch (Exception e) {                    }    }    if (VIEWERS_ORDER.length() > 0) {        Arrays.stream(VIEWERS_ORDER.split(",")).map(key -> key.startsWith(".") ?         "org.apache.jmeter.visualizers" + key : key).forEach(key -> {            ResultRenderer renderer = map.remove(key);            if (renderer != null) {                selectRenderPanel.addItem(renderer);            } else {                            }        });    }        map.values().forEach(renderer -> selectRenderPanel.addItem(renderer));        nodesModel.setSelectedItem(textObject);    return selectRenderPanel;}
1
public void actionPerformed(ActionEvent event)
{    String command = event.getActionCommand();    if (COMBO_CHANGE_COMMAND.equals(command)) {        JComboBox<?> jcb = (JComboBox<?>) event.getSource();        if (jcb != null) {            resultsRender = (ResultRenderer) jcb.getSelectedItem();            if (rightSide != null) {                                selectedTab = rightSide.getSelectedIndex();                                mainSplit.remove(rightSide);                                rightSide = new JTabbedPane();                mainSplit.add(rightSide);                resultsRender.setRightSide(rightSide);                resultsRender.setLastSelectedTab(selectedTab);                                resultsRender.init();                                this.valueChanged(lastSelectionEvent, true);            }        }    }}
1
public static String getResponseAsString(SampleResult res)
{    String response = null;    if (isTextDataType(res)) {                                                                        int len = res.getResponseDataAsString().length();        if (MAX_DISPLAY_SIZE > 0 && len > MAX_DISPLAY_SIZE) {            StringBuilder builder = new StringBuilder(MAX_DISPLAY_SIZE + 100);                        builder.append(JMeterUtils.getResString("view_results_response_too_large_message")).append(len).append(" > Max: ").append(MAX_DISPLAY_SIZE).append(", ").append(            JMeterUtils.getResString("view_results_response_partial_message")).append("\n").append(res.getResponseDataAsString(), 0, MAX_DISPLAY_SIZE).append("\n...");            response = builder.toString();        } else {            response = res.getResponseDataAsString();        }    }    return response;}
0
public Component getTreeCellRendererComponent(JTree tree, Object value, boolean sel, boolean expanded, boolean leaf, int row, boolean focus)
{    super.getTreeCellRendererComponent(tree, value, sel, expanded, leaf, row, focus);    boolean failure = true;    Object userObject = ((DefaultMutableTreeNode) value).getUserObject();    if (userObject instanceof SampleResult) {        failure = !(((SampleResult) userObject).isSuccessful());    } else if (userObject instanceof AssertionResult) {        AssertionResult assertion = (AssertionResult) userObject;        failure = assertion.isError() || assertion.isFailure();    }        if (failure) {        this.setForeground(Color.red);        this.setIcon(imageFailure);    } else {        this.setIcon(imageSuccess);    }        SearchableTreeNode node = (SearchableTreeNode) value;    if (node.isNodeHasMatched()) {        setBorder(RED_BORDER);    } else if (node.isChildrenNodesHaveMatched()) {        setBorder(BLUE_BORDER);    } else {        setBorder(null);    }    return this;}
0
public void itemStateChanged(ItemEvent e)
{}
0
private void initRoot(Node xmlRoot) throws SAXException
{    NodeList childNodes = xmlRoot.getChildNodes();    for (int i = 0; i < childNodes.getLength(); i++) {        Node childNode = childNodes.item(i);        initNode(childNode, this);    }}
0
private void initNode(Node node, XMLDefaultMutableTreeNode mTreeNode) throws SAXException
{    switch(node.getNodeType()) {        case Node.ELEMENT_NODE:            initElementNode(node, mTreeNode);            break;        case Node.TEXT_NODE:            initTextNode((Text) node, mTreeNode);            break;        case Node.CDATA_SECTION_NODE:            initCDATASectionNode((CDATASection) node, mTreeNode);            break;        case Node.COMMENT_NODE:            initCommentNode((Comment) node, mTreeNode);            break;        default:                        break;    }}
0
private void initElementNode(Node node, DefaultMutableTreeNode mTreeNode) throws SAXException
{    String nodeName = node.getNodeName();    NodeList childNodes = node.getChildNodes();    XMLDefaultMutableTreeNode childTreeNode = new XMLDefaultMutableTreeNode(nodeName, node);    mTreeNode.add(childTreeNode);    initAttributeNode(node, childTreeNode);    for (int i = 0; i < childNodes.getLength(); i++) {        Node childNode = childNodes.item(i);        initNode(childNode, childTreeNode);    }}
0
private void initAttributeNode(Node node, DefaultMutableTreeNode mTreeNode) throws SAXException
{    NamedNodeMap nm = node.getAttributes();    for (int i = 0; i < nm.getLength(); i++) {        Attr nmNode = (Attr) nm.item(i);                String value = nmNode.getName() + " = \"" + nmNode.getValue() + "\"";        XMLDefaultMutableTreeNode attributeNode = new XMLDefaultMutableTreeNode(value, nmNode);        mTreeNode.add(attributeNode);    }}
0
private void initCommentNode(Comment node, DefaultMutableTreeNode mTreeNode) throws SAXException
{    String data = node.getData();    if (data != null && data.length() > 0) {                String value = "<!--" + node.getData() + "-->";        XMLDefaultMutableTreeNode commentNode = new XMLDefaultMutableTreeNode(value, node);        mTreeNode.add(commentNode);    }}
0
private void initCDATASectionNode(CDATASection node, DefaultMutableTreeNode mTreeNode) throws SAXException
{    String data = node.getData();    if (data != null && data.length() > 0) {                String value = "<!-[CDATA" + node.getData() + "]]>";        XMLDefaultMutableTreeNode commentNode = new XMLDefaultMutableTreeNode(value, node);        mTreeNode.add(commentNode);    }}
0
private void initTextNode(Text node, DefaultMutableTreeNode mTreeNode) throws SAXException
{    String text = node.getNodeValue().trim();    if (text != null && text.length() > 0) {        XMLDefaultMutableTreeNode textNode = new XMLDefaultMutableTreeNode(text, node);        mTreeNode.add(textNode);    }}
0
public Node getXMLNode()
{    return xmlNode;}
0
public void setUp()
{    JMeterContext jmctx = JMeterContextService.getContext();    assertion = new DurationAssertion();    assertion.setThreadContext(jmctx);    JMeterVariables vars = new JMeterVariables();    jmctx.setVariables(vars);    sampleResult = new SampleResult();    sampleResult.setResponseData(data, null);}
0
public void testDurationLower() throws Exception
{    sampleResult.setStampAndTime(0, 1000);    assertion.setAllowedDuration(1100L);    result = assertion.getResult(sampleResult);    Assert.assertFalse(result.isError());    Assert.assertFalse(result.isFailure());    Assert.assertNull(result.getFailureMessage());}
0
public void testDurationEquals() throws Exception
{    sampleResult.setStampAndTime(0, 1000);    assertion.setAllowedDuration(1000L);    result = assertion.getResult(sampleResult);    Assert.assertFalse(result.isError());    Assert.assertFalse(result.isFailure());    Assert.assertNull(result.getFailureMessage());}
0
public void testDurationHigher() throws Exception
{    sampleResult.setStampAndTime(0, 1200);    assertion.setAllowedDuration(1100);    result = assertion.getResult(sampleResult);    Assert.assertFalse(result.isError());    Assert.assertTrue(result.isFailure());    Assert.assertNotNull(result.getFailureMessage());}
0
public void testDurationZero() throws Exception
{    sampleResult.setStampAndTime(0, 0);    assertion.setAllowedDuration(1100);    result = assertion.getResult(sampleResult);    Assert.assertFalse(result.isFailure());    Assert.assertFalse(result.isError());    Assert.assertNull(result.getFailureMessage());}
0
public void testInit()
{    JSONPathAssertionGui instance = new JSONPathAssertionGui();    instance.init();    instance.stateChanged(null);}
0
public void testClearGui()
{    JSONPathAssertionGui instance = new JSONPathAssertionGui();    instance.clearGui();}
0
public void testCreateTestElement()
{    JSONPathAssertionGui instance = new JSONPathAssertionGui();    instance.createTestElement();}
0
public void testGetLabelResource()
{    JSONPathAssertionGui instance = new JSONPathAssertionGui();    instance.getLabelResource();}
0
public void testGetStaticLabel()
{    JSONPathAssertionGui instance = new JSONPathAssertionGui();    instance.getStaticLabel();}
0
public void testModifyTestElement()
{    TestElement element = new JSONPathAssertion();    JSONPathAssertionGui instance = new JSONPathAssertionGui();    instance.modifyTestElement(element);}
0
public void testConfigure()
{    TestElement element = new JSONPathAssertion();    JSONPathAssertionGui instance = new JSONPathAssertionGui();    instance.configure(element);}
0
public void testInit()
{    JMESPathAssertionGui instance = new JMESPathAssertionGui();    instance.stateChanged(null);}
0
public void testClearGui()
{    JMESPathAssertionGui instance = new JMESPathAssertionGui();    instance.clearGui();}
0
public void testCreateTestElement()
{    JMESPathAssertionGui instance = new JMESPathAssertionGui();    instance.createTestElement();}
0
public void testGetLabelResource()
{    JMESPathAssertionGui instance = new JMESPathAssertionGui();    instance.getLabelResource();}
0
public void testGetStaticLabel()
{    JMESPathAssertionGui instance = new JMESPathAssertionGui();    instance.getStaticLabel();}
0
public void testModifyTestElement()
{    TestElement element = new JMESPathAssertion();    JMESPathAssertionGui instance = new JMESPathAssertionGui();    instance.modifyTestElement(element);}
0
public void testConfigure()
{    TestElement element = new JMESPathAssertion();    JMESPathAssertionGui instance = new JMESPathAssertionGui();    instance.configure(element);}
0
public static Collection<Object[]> data()
{    return Arrays.asList(new Object[][] { { InvertType.USE_INVERT, "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "[6:6]", ValidationType.USE_VALIDATION, ComparisonType.USE_NO_REXEG, ResultNullity.EXPECT_NOT_NULL, "[]", ResultType.FAILURE, "Value expected not to be equal to []" }, { InvertType.USE_NO_INVERT, "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "[6:6]", ValidationType.USE_VALIDATION, ComparisonType.USE_NO_REXEG, ResultNullity.EXPECT_NOT_NULL, "[]", ResultType.SUCCESS, "" }, { InvertType.USE_NO_INVERT, "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "[6:6]", ValidationType.USE_VALIDATION, ComparisonType.USE_NO_REXEG, ResultNullity.EXPECT_NOT_NULL, "[1]", ResultType.FAILURE, "Value expected to be equal to [1]" }, { InvertType.USE_NO_INVERT, "{\"one\": \"1\",\"two\": \"2\"}", "[one,two]", ValidationType.USE_VALIDATION, ComparisonType.USE_NO_REXEG, ResultNullity.EXPECT_NOT_NULL, "[\"1\",\"2\"]", ResultType.SUCCESS, "" }, { InvertType.USE_NO_INVERT, "{\"a\": \"foo\", \"b\": \"bar\", \"c\": \"baz\"}", "a", ValidationType.USE_VALIDATION, ComparisonType.USE_NO_REXEG, ResultNullity.EXPECT_NOT_NULL, "foo", ResultType.SUCCESS, "" }, { InvertType.USE_NO_INVERT, "{\"a\": \"123\"}", "a", ValidationType.USE_VALIDATION, ComparisonType.USE_REGEX, ResultNullity.EXPECT_NOT_NULL, "123|456", ResultType.SUCCESS, "" }, { InvertType.USE_NO_INVERT, "{\"a\": \"123\"}", "a", ValidationType.USE_VALIDATION, ComparisonType.USE_REGEX, ResultNullity.EXPECT_NOT_NULL, "789|012", ResultType.FAILURE, "Value expected to match 789|012" }, { InvertType.USE_INVERT, "{\"a\": \"123\"}", "a", ValidationType.USE_VALIDATION, ComparisonType.USE_REGEX, ResultNullity.EXPECT_NOT_NULL, "123|012", ResultType.FAILURE, "Value expected not to match 123|012" }, { InvertType.USE_NO_INVERT, JSON_ARRAY, "max_by(people, &age).name", ValidationType.USE_VALIDATION, ComparisonType.USE_NO_REXEG, ResultNullity.EXPECT_NOT_NULL, "a", ResultType.SUCCESS, "" }, { InvertType.USE_NO_INVERT, "{\"one\": \"\"}", "two", ValidationType.USE_VALIDATION, ComparisonType.USE_NO_REXEG, ResultNullity.EXPECT_NULL, null, ResultType.SUCCESS, "" }, { InvertType.USE_NO_INVERT, "{\"one\": \"\"}", "one", ValidationType.USE_VALIDATION, ComparisonType.USE_NO_REXEG, ResultNullity.EXPECT_NOT_NULL, "", ResultType.SUCCESS, "" }, { InvertType.USE_NO_INVERT, "{\"one\": \"\"}", "one", ValidationType.USE_VALIDATION, ComparisonType.USE_NO_REXEG, ResultNullity.EXPECT_NULL, "1", ResultType.FAILURE, "Value expected to be null" }, { InvertType.USE_INVERT, "{\"one\": \"1\"}", "one", ValidationType.USE_VALIDATION, ComparisonType.USE_NO_REXEG, ResultNullity.EXPECT_NOT_NULL, "2", ResultType.SUCCESS, "" }, { InvertType.USE_INVERT, "{\"one\": \"\"}", "one", ValidationType.USE_VALIDATION, ComparisonType.USE_NO_REXEG, ResultNullity.EXPECT_NULL, "", ResultType.SUCCESS, "" }, { InvertType.USE_INVERT, "{\"one\": \"\"}", "two", ValidationType.USE_VALIDATION, ComparisonType.USE_NO_REXEG, ResultNullity.EXPECT_NULL, "", ResultType.FAILURE, "Value expected not to be null" }, { InvertType.USE_NO_INVERT, "{\"one\": \"1\"}", "one", ValidationType.USE_VALIDATION, ComparisonType.USE_NO_REXEG, ResultNullity.EXPECT_NOT_NULL, "2", ResultType.FAILURE, "Value expected to be equal to 2" }, { InvertType.USE_INVERT, "{\"one\": \"1\"}", "one", ValidationType.USE_VALIDATION, ComparisonType.USE_NO_REXEG, ResultNullity.EXPECT_NOT_NULL, "1", ResultType.FAILURE, "Value expected not to be equal to 1" }, { InvertType.USE_INVERT, "{'one': '1'}", "one", ValidationType.USE_VALIDATION, ComparisonType.USE_NO_REXEG, ResultNullity.EXPECT_NOT_NULL, "2", ResultType.SUCCESS, "" }, { InvertType.USE_NO_INVERT, "{'one': '1'}", "one", ValidationType.USE_VALIDATION, ComparisonType.USE_NO_REXEG, ResultNullity.EXPECT_NOT_NULL, "2", ResultType.ERROR, "Unexpected character (''' (code 39)): was expecting double-quote to start field name\n at" + " [Source: (String)\"{'one': '1'}\"; line: 1, column: 3]" }, { InvertType.USE_NO_INVERT, "{\"one\": \"\"}", "one", ValidationType.USE_VALIDATION, ComparisonType.USE_NO_REXEG, ResultNullity.EXPECT_NOT_NULL, "1", ResultType.FAILURE, "Value expected to be equal to 1" }, { InvertType.USE_NO_INVERT, "{\"\":\"\"}", "foo", ValidationType.USE_VALIDATION, ComparisonType.USE_NO_REXEG, ResultNullity.EXPECT_NULL, null, ResultType.SUCCESS, "" }, { InvertType.USE_NO_INVERT, "{\"one\": \"\"}", "one", ValidationType.USE_NO_VALIDATION, ComparisonType.USE_NO_REXEG, ResultNullity.EXPECT_NOT_NULL, "", ResultType.SUCCESS, "" }, { InvertType.USE_NO_INVERT, "{\"one\": \"\"}", "two", ValidationType.USE_NO_VALIDATION, ComparisonType.USE_NO_REXEG, ResultNullity.EXPECT_NOT_NULL, "", ResultType.FAILURE, "JMESPATH two expected to exist" }, { InvertType.USE_INVERT, "{\"one\": \"\"}", "one", ValidationType.USE_NO_VALIDATION, ComparisonType.USE_NO_REXEG, ResultNullity.EXPECT_NOT_NULL, "", ResultType.FAILURE, "JMESPATH one expected not to exist" }, { InvertType.USE_INVERT, "{\"one\": \"\"}", "two", ValidationType.USE_NO_VALIDATION, ComparisonType.USE_NO_REXEG, ResultNullity.EXPECT_NOT_NULL, "", ResultType.SUCCESS, "" }, { InvertType.USE_NO_INVERT, "", "two", ValidationType.USE_NO_VALIDATION, ComparisonType.USE_NO_REXEG, ResultNullity.EXPECT_NOT_NULL, "", ResultType.FAILURE, AssertionResult.RESPONSE_WAS_NULL }, { InvertType.USE_NO_INVERT, "{\n" + "  \"reservations\": [\n" + "    {\n" + "      \"instances\": [\n" + "        {\"state\": \"running\"},\n" + "        {\"state\": \"stopped\"}\n" + "      ]\n" + "    },\n" + "    {\n" + "      \"instances\": [\n" + "        {\"state\": \"terminated\"},\n" + "        {\"state\": \"running\"}\n" + "      ]\n" + "    }\n" + "  ]\n" + "}", "reservations[*].instances[*].state", ValidationType.USE_VALIDATION, ComparisonType.USE_NO_REXEG, ResultNullity.EXPECT_NOT_NULL, "[[\"running\",\"stopped\"],[\"terminated\",\"running\"]]", ResultType.SUCCESS, "" } });}
0
public void test()
{    SampleResult samplerResult = new SampleResult();    samplerResult.setResponseData(responseData, null);    JMESPathAssertion instance = new JMESPathAssertion();    instance.setJmesPath(jmesPath);    instance.setJsonValidationBool(isValidation == ValidationType.USE_VALIDATION);    instance.setInvert(isInverted == InvertType.USE_INVERT);    instance.setIsRegex(isRegex == ComparisonType.USE_REGEX);    instance.setExpectNull(isExpectedNull == ResultNullity.EXPECT_NULL);    instance.setExpectedValue(expectedValue);    AssertionResult expResult = new AssertionResult("");    AssertionResult result = instance.getResult(samplerResult);    assertEquals(expResult.getName(), result.getName());    if (result.isError() && !result.isFailure()) {        assertEquals(resultType, ResultType.ERROR);    } else if (result.isFailure() && !result.isError()) {        assertEquals(resultType, ResultType.FAILURE);    } else if (!result.isError() && !result.isFailure()) {        assertEquals(resultType, ResultType.SUCCESS);    } else {        fail("Got unexpected state where AssertionResult is in error and in failure");    }    assertEquals(failureMessage, result.getFailureMessage());}
0
public void setUp() throws MalformedURLException
{    JMeterContext jmctx = JMeterContextService.getContext();    assertion = new ResponseAssertion();    assertion.setThreadContext(jmctx);    sample = new SampleResult();    JMeterVariables vars = new JMeterVariables();    jmctx.setVariables(vars);    jmctx.setPreviousResult(sample);    sample.setResponseData("response Data\nline 2\n\nEOF", null);    sample.setURL(new URL("http://localhost/Sampler/Data/"));    sample.setResponseCode("401");    sample.setResponseHeaders("X-Header: abcd");    sample.setRequestHeaders("X-reqHeader: cdef");}
0
public void testResponseAssertionNoText() throws Exception
{    assertion.clearTestStrings();    assertion.unsetNotType();    assertion.setToSubstringType();    assertion.setTestFieldResponseData();        result = assertion.getResult(sample);    assertPassed();}
0
public void testResponseAssertionEquals() throws Exception
{    assertion.unsetNotType();    assertion.setToEqualsType();    assertion.setTestFieldURL();    assertion.addTestString("Sampler Label");    assertion.addTestString("Sampler labelx");    result = assertion.getResult(sample);    assertFailed();    assertion.setToNotType();    assertion.clearTestStrings();    assertion.addTestString("Sampler LabeL");    assertion.addTestString("Sampler Labelx");    result = assertion.getResult(sample);    assertPassed();}
0
public void testCustomFailureMessage() throws Exception
{    assertion.unsetNotType();    assertion.setToEqualsType();    assertion.setTestFieldURL();    assertion.addTestString("Sampler Label");    assertion.addTestString("Sampler labelx");    assertion.setCustomFailureMessage("Custom failure message");    result = assertion.getResult(sample);    assertFailed();    assertEquals("Custom failure message", result.getFailureMessage());    assertion.setToOrType();    result = assertion.getResult(sample);    assertFailed();    assertEquals("Custom failure message", result.getFailureMessage());}
0
public void testMalformedCachePatternException() throws Exception
{    assertion.unsetNotType();    assertion.setToMatchType();    assertion.setTestFieldResponseHeaders();    assertion.addTestString("[]");    result = assertion.getResult(sample);    assertNotNull(result.getFailureMessage());    assertFalse("Should not be: Response was null", "Response was null".equals(result.getFailureMessage()));    assertTrue("Not expecting error: " + result.getFailureMessage(), result.isError());    assertion.setCustomFailureMessage("Custom failure message");    result = assertion.getResult(sample);    assertTrue("Did not get expected error: " + result.getFailureMessage(), result.isError());    assertFalse("Failure message must not be custom failure message for error", "Custom failure message".equals(result.getFailureMessage()));}
0
public void testResponseAssertionResponseHeaders() throws Exception
{    assertion.unsetNotType();    assertion.setToEqualsType();    assertion.setTestFieldResponseHeaders();    assertion.addTestString("X-Header: abcd");    assertion.addTestString("X-Header: abcdx");    result = assertion.getResult(sample);    assertFailed();    assertion.clearTestStrings();    assertion.addTestString("X-Header: abcd");    result = assertion.getResult(sample);    assertPassed();}
0
public void testResponseAssertionRequestHeaders() throws Exception
{    assertion.unsetNotType();    assertion.setToEqualsType();    assertion.setTestFieldRequestHeaders();    assertion.addTestString("X-reqHeader: cdef");    assertion.addTestString("X-reqHeader: cdefx");    result = assertion.getResult(sample);    assertFailed();    assertion.clearTestStrings();    assertion.addTestString("X-reqHeader: cdef");    result = assertion.getResult(sample);    assertPassed();}
0
public void testResponseAssertionContains() throws Exception
{    assertion.unsetNotType();    assertion.setToContainsType();    assertion.setTestFieldURL();    assertion.addTestString("Sampler");    assertion.addTestString("Label");    assertion.addTestString(" x");    result = assertion.getResult(sample);    assertFailed();    assertion.setToNotType();    result = assertion.getResult(sample);    assertFailed();    assertion.clearTestStrings();    assertion.addTestString("r l");    result = assertion.getResult(sample);    assertPassed();    assertion.unsetNotType();    assertion.setTestFieldResponseData();    assertion.clearTestStrings();    assertion.addTestString("line 2");    result = assertion.getResult(sample);    assertPassed();    assertion.clearTestStrings();    assertion.addTestString("line 2");    assertion.addTestString("NOTINSAMPLEDATA");    result = assertion.getResult(sample);    assertFailed();    assertion.clearTestStrings();    assertion.setToOrType();    assertion.addTestString("line 2");    assertion.addTestString("NOTINSAMPLEDATA");    result = assertion.getResult(sample);    assertPassed();    assertion.unsetOrType();    assertion.clearTestStrings();    assertion.setToOrType();    assertion.addTestString("NOTINSAMPLEDATA");    assertion.addTestString("line 2");    result = assertion.getResult(sample);    assertPassed();    assertion.unsetOrType();    assertion.clearTestStrings();    assertion.setToOrType();    assertion.addTestString("NOTINSAMPLEDATA");    assertion.addTestString("NOTINSAMPLEDATA2");    result = assertion.getResult(sample);    assertFailed();    assertion.unsetOrType();    assertion.clearTestStrings();    assertion.setToOrType();    assertion.setToNotType();    assertion.addTestString("line 2");    assertion.addTestString("NOTINSAMPLEDATA2");    result = assertion.getResult(sample);    assertPassed();    assertion.unsetOrType();    assertion.unsetNotType();    assertion.clearTestStrings();    assertion.setToNotType();    assertion.addTestString("NOTINSAMPLEDATA");    result = assertion.getResult(sample);    assertPassed();    assertion.unsetNotType();    assertion.clearTestStrings();    assertion.addTestString("(?s)line \\d+.*EOF");    result = assertion.getResult(sample);    assertPassed();    assertion.setTestFieldResponseCode();    assertion.clearTestStrings();    assertion.addTestString("401");    result = assertion.getResult(sample);    assertPassed();}
0
public void testResponseAssertionContainsDollar() throws Exception
{    sample.setResponseData("value=\"${ID}\" Group$ctl00$drpEmails", null);    assertion.unsetNotType();    assertion.setToContainsType();    assertion.setTestFieldResponseData();    assertion.addTestString("value=\"\\${ID}\" Group\\$ctl00\\$drpEmails");    result = assertion.getResult(sample);    assertPassed();}
0
public void testResponseAssertionSubstring() throws Exception
{    assertion.unsetNotType();    assertion.setToSubstringType();    assertion.setTestFieldURL();    assertion.addTestString("Sampler");    assertion.addTestString("Label");    assertion.addTestString("+(");    result = assertion.getResult(sample);    assertFailed();    assertion.setToNotType();    result = assertion.getResult(sample);    assertFailed();    assertion.clearTestStrings();    assertion.addTestString("r l");    result = assertion.getResult(sample);    assertPassed();    assertion.unsetNotType();    assertion.setTestFieldResponseData();    assertion.clearTestStrings();    assertion.addTestString("line 2");    result = assertion.getResult(sample);    assertPassed();    assertion.clearTestStrings();    assertion.addTestString("line 2\n\nEOF");    result = assertion.getResult(sample);    assertPassed();    assertion.setTestFieldResponseCode();    assertion.clearTestStrings();    assertion.addTestString("401");    result = assertion.getResult(sample);    assertPassed();}
0
private void assertPassed() throws Exception
{    assertNull(result.getFailureMessage(), result.getFailureMessage());    assertFalse("Not expecting error: " + result.getFailureMessage(), result.isError());    assertFalse("Not expecting error", result.isError());    assertFalse("Not expecting failure", result.isFailure());}
0
private void assertFailed() throws Exception
{    assertNotNull(result.getFailureMessage());    assertFalse("Should not be: Response was null", "Response was null".equals(result.getFailureMessage()));    assertFalse("Not expecting error: " + result.getFailureMessage(), result.isError());    assertTrue("Expecting failure", result.isFailure());}
0
public void testThreadSafety() throws Exception
{    Thread[] threads = new Thread[100];    CountDownLatch latch = new CountDownLatch(threads.length);    for (int i = 0; i < threads.length; i++) {        threads[i] = new TestThread(latch);    }    failed = new AtomicInteger(0);    for (Thread thread : threads) {        thread.start();    }    latch.await();    assertEquals(failed.get(), 0);}
0
public void run()
{    try {        ResponseAssertion assertion = new ResponseAssertion();        assertion.setTestFieldResponseData();        assertion.setToContainsType();        assertion.addTestString(TEST_PATTERN);        SampleResult response = new SampleResult();        response.setResponseData(TEST_STRING, null);        for (int i = 0; i < 100; i++) {            AssertionResult result;            result = assertion.getResult(response);            if (result.isFailure() || result.isError()) {                failed.incrementAndGet();            }        }    } finally {        latch.countDown();    }}
0
public void setUp()
{    JMeterContext jmctx = JMeterContextService.getContext();    assertion = new SizeAssertion();    assertion.setThreadContext(jmctx);    assertion.setTestFieldResponseBody();    JMeterVariables vars = new JMeterVariables();    jmctx.setVariables(vars);    sample0 = new SampleResult();    sample1 = new SampleResult();    sample1.setResponseData(data1, null);}
0
public void testSizeAssertionEquals() throws Exception
{    assertion.setCompOper(SizeAssertion.EQUAL);    assertion.setAllowedSize(0);    result = assertion.getResult(sample1);    assertFailed();    result = assertion.getResult(sample0);    assertPassed();    assertion.setAllowedSize(data1Len);    result = assertion.getResult(sample1);    assertPassed();    result = assertion.getResult(sample0);    assertFailed();}
0
public void testSizeAssertionNotEquals() throws Exception
{    assertion.setCompOper(SizeAssertion.NOTEQUAL);    assertion.setAllowedSize(0);    result = assertion.getResult(sample1);    assertPassed();    result = assertion.getResult(sample0);    assertFailed();    assertion.setAllowedSize(data1Len);    result = assertion.getResult(sample1);    assertFailed();    result = assertion.getResult(sample0);    assertPassed();}
0
public void testSizeAssertionGreaterThan() throws Exception
{    assertion.setCompOper(SizeAssertion.GREATERTHAN);    assertion.setAllowedSize(0);    result = assertion.getResult(sample1);    assertPassed();    result = assertion.getResult(sample0);    assertFailed();    assertion.setAllowedSize(data1Len);    result = assertion.getResult(sample1);    assertFailed();    result = assertion.getResult(sample0);    assertFailed();}
0
public void testSizeAssertionGreaterThanEqual() throws Exception
{    assertion.setCompOper(SizeAssertion.GREATERTHANEQUAL);    assertion.setAllowedSize(0);    result = assertion.getResult(sample1);    assertPassed();    result = assertion.getResult(sample0);    assertPassed();    assertion.setAllowedSize(data1Len);    result = assertion.getResult(sample1);    assertPassed();    result = assertion.getResult(sample0);    assertFailed();}
0
public void testSizeAssertionLessThan() throws Exception
{    assertion.setCompOper(SizeAssertion.LESSTHAN);    assertion.setAllowedSize(0);    result = assertion.getResult(sample1);    assertFailed();    result = assertion.getResult(sample0);    assertFailed();    assertion.setAllowedSize(data1Len + 1);    result = assertion.getResult(sample1);    assertPassed();    result = assertion.getResult(sample0);    assertPassed();}
0
public void testSizeAssertionLessThanEqual() throws Exception
{    assertion.setCompOper(SizeAssertion.LESSTHANEQUAL);    assertion.setAllowedSize(0);    result = assertion.getResult(sample1);    assertFailed();    result = assertion.getResult(sample0);    assertPassed();    assertion.setAllowedSize(data1Len + 1);    result = assertion.getResult(sample1);    assertPassed();    result = assertion.getResult(sample0);    assertPassed();}
0
private void assertPassed() throws Exception
{    assertNull("Failure message should be null", result.getFailureMessage());    assertFalse(result.isError());    assertFalse(result.isFailure());}
0
private void assertFailed() throws Exception
{    assertNotNull("Failure message should not be null", result.getFailureMessage());    assertFalse("Should not be: Response was null", "Response was null".equals(result.getFailureMessage()));    assertFalse(result.isError());    assertTrue(result.isFailure());}
0
public void setUp() throws MessagingException, IOException
{    Session mailSession = Session.getDefaultInstance(new Properties());    msg = new MimeMessage(mailSession, this.getClass().getResourceAsStream("signed_email.eml"));    parent = new SampleResult();    parent.sampleStart();    parent.addSubResult(createChildSample());}
0
public void testSignature()
{    SMIMEAssertionTestElement testElement = new SMIMEAssertionTestElement();    testElement.setVerifySignature(true);    AssertionResult result = SMIMEAssertion.getResult(testElement, parent, "Test");    assertFalse("Result should not be an error", result.isError());    assertFalse("Result should not fail: " + result.getFailureMessage(), result.isFailure());}
0
public void testSignerEmail()
{    SMIMEAssertionTestElement testElement = new SMIMEAssertionTestElement();    testElement.setSignerCheckConstraints(true);    testElement.setSignerEmail("bob@b.example.com");    AssertionResult result = SMIMEAssertion.getResult(testElement, parent, "Test");    assertFalse("Result should not be an error", result.isError());    assertFalse("Result should not fail: " + result.getFailureMessage(), result.isFailure());}
0
public void testSignerSerial()
{    SMIMEAssertionTestElement testElement = new SMIMEAssertionTestElement();    testElement.setSignerCheckConstraints(true);    testElement.setSignerSerial("0xc8c46f8fbf9ebea4");    AssertionResult result = SMIMEAssertion.getResult(testElement, parent, "Test");    assertFalse("Result should not be an error", result.isError());    assertFalse("Result should not fail: " + result.getFailureMessage(), result.isFailure());}
0
public void testSignerSignerDN()
{    SMIMEAssertionTestElement testElement = new SMIMEAssertionTestElement();    testElement.setSignerCheckConstraints(true);    String signerDn = "C=AU, L=Wherever, O=Example Ltd, E=alice@a.example.com, CN=alice example";    testElement.setSignerDn(signerDn);    AssertionResult result = SMIMEAssertion.getResult(testElement, parent, "Test");    assertFalse("Result should not be an error", result.isError());    assertFalse("Result should not fail: " + result.getFailureMessage(), result.isFailure());}
0
public void testSignerIssuerDN()
{    SMIMEAssertionTestElement testElement = new SMIMEAssertionTestElement();    testElement.setSignerCheckConstraints(true);    String issuerDn = "C=AU, L=Wherever, O=Example Ltd, E=alice@a.example.com, CN=alice example";    testElement.setIssuerDn(issuerDn);    AssertionResult result = SMIMEAssertion.getResult(testElement, parent, "Test");    assertFalse("Result should not be an error", result.isError());    assertFalse("Result should not fail: " + result.getFailureMessage(), result.isFailure());}
0
public void testSignerCert() throws Exception
{    SMIMEAssertionTestElement testElement = new SMIMEAssertionTestElement();    testElement.setSignerCheckConstraints(true);    testElement.setSignerCheckByFile(true);    testElement.setSignerCertFile(new File(getClass().getResource("email.pem").toURI()).getAbsolutePath());    AssertionResult result = SMIMEAssertion.getResult(testElement, parent, "Test");    assertFalse("Result should not be an error", result.isError());    assertFalse("Result should not fail: " + result.getFailureMessage(), result.isFailure());}
0
private SampleResult createChildSample() throws MessagingException, IOException
{    SampleResult child = new SampleResult();    child.setSampleLabel("Message " + msg.getMessageNumber());    child.setContentType(msg.getContentType());    child.setEncodingAndType(msg.getContentType());    ByteArrayOutputStream outbuf = new ByteArrayOutputStream();    msg.writeTo(outbuf);    child.setResponseData(outbuf.toByteArray());    child.setDataType(SampleResult.TEXT);    child.setResponseOK();    return child;}
0
public void testGetJsonPath()
{    JSONPathAssertion instance = new JSONPathAssertion();    String expResult = "";    String result = instance.getJsonPath();    assertEquals(expResult, result);}
0
public void testSetJsonPath()
{    String jsonPath = "";    JSONPathAssertion instance = new JSONPathAssertion();    instance.setJsonPath(jsonPath);}
0
public void testGetExpectedValue()
{    JSONPathAssertion instance = new JSONPathAssertion();    String expResult = "";    String result = instance.getExpectedValue();    assertEquals(expResult, result);}
0
public void testSetExpectedValue()
{    String expectedValue = "";    JSONPathAssertion instance = new JSONPathAssertion();    instance.setExpectedValue(expectedValue);}
0
public void testSetJsonValidationBool()
{    JSONPathAssertion instance = new JSONPathAssertion();    instance.setJsonValidationBool(false);}
0
public void testIsJsonValidationBool()
{    JSONPathAssertion instance = new JSONPathAssertion();    boolean result = instance.isJsonValidationBool();    assertFalse(result);}
0
public void testGetResult_positive()
{    SampleResult samplerResult = new SampleResult();    samplerResult.setResponseData("{\"myval\": 123}".getBytes());    JSONPathAssertion instance = new JSONPathAssertion();    instance.setJsonPath("$.myval");    instance.setJsonValidationBool(true);    instance.setExpectedValue("123");    AssertionResult expResult = new AssertionResult("");    AssertionResult result = instance.getResult(samplerResult);    assertEquals(expResult.getName(), result.getName());    assertFalse(result.isFailure());}
0
public void testGetResult_positive_regexp()
{    SampleResult samplerResult = new SampleResult();    samplerResult.setResponseData("{\"myval\": 123}".getBytes());    JSONPathAssertion instance = new JSONPathAssertion();    instance.setJsonPath("$.myval");    instance.setJsonValidationBool(true);    instance.setExpectedValue("(123|456)");    AssertionResult expResult = new AssertionResult("");    AssertionResult result = instance.getResult(samplerResult);    assertEquals(expResult.getName(), result.getName());    assertFalse(result.isFailure());    samplerResult.setResponseData("{\"myval\": 456}".getBytes());    AssertionResult result2 = instance.getResult(samplerResult);    assertFalse(result2.isFailure());}
0
public void testGetResult_positive_invert()
{    SampleResult samplerResult = new SampleResult();    samplerResult.setResponseData("{\"myval\": 123}".getBytes());    JSONPathAssertion instance = new JSONPathAssertion();    instance.setJsonPath("$.myval");    instance.setJsonValidationBool(true);    instance.setExpectedValue("123");    instance.setInvert(true);    AssertionResult expResult = new AssertionResult("");    AssertionResult result = instance.getResult(samplerResult);    assertTrue(result.isFailure());    assertEquals(expResult.getName(), result.getName());}
0
public void testGetResult_not_regexp()
{    SampleResult samplerResult = new SampleResult();    samplerResult.setResponseData("{\"myval\": \"some complicated value\"}".getBytes());    JSONPathAssertion instance = new JSONPathAssertion();    instance.setJsonPath("$.myval");    instance.setJsonValidationBool(true);    instance.setExpectedValue("some.+");    AssertionResult result = instance.getResult(samplerResult);    assertFalse(result.isFailure());    instance.setIsRegex(false);    AssertionResult result2 = instance.getResult(samplerResult);    assertTrue(result2.isFailure());}
0
public void testGetResult_negative()
{    SampleResult samplerResult = new SampleResult();    samplerResult.setResponseData("{\"myval\": 123}".getBytes());    JSONPathAssertion instance = new JSONPathAssertion();    instance.setJsonPath("$.myval");    instance.setJsonValidationBool(true);    instance.setExpectedValue("1234");    AssertionResult expResult = new AssertionResult("");    AssertionResult result = instance.getResult(samplerResult);    assertEquals(expResult.getName(), result.getName());    assertTrue(result.isFailure());}
0
public void testGetResult_negative_invert()
{    SampleResult samplerResult = new SampleResult();    samplerResult.setResponseData("{\"myval\": 123}".getBytes());    JSONPathAssertion instance = new JSONPathAssertion();    instance.setJsonPath("$.myval");    instance.setJsonValidationBool(true);    instance.setExpectedValue("1234");    instance.setInvert(true);    AssertionResult expResult = new AssertionResult("");    AssertionResult result = instance.getResult(samplerResult);    assertFalse(result.isFailure());    assertEquals(expResult.getName(), result.getName());}
0
public void testGetResult_null()
{    SampleResult samplerResult = new SampleResult();    samplerResult.setResponseData("{\"myval\": null}".getBytes());    JSONPathAssertion instance = new JSONPathAssertion();    instance.setJsonPath("$.myval");    instance.setExpectNull(true);    instance.setJsonValidationBool(true);    AssertionResult expResult = new AssertionResult("");    AssertionResult result = instance.getResult(samplerResult);    assertEquals(expResult.getName(), result.getName());    assertFalse(result.isFailure());}
0
public void testGetResult_null_not_found()
{    SampleResult samplerResult = new SampleResult();    samplerResult.setResponseData("{\"myval\": 123}".getBytes());    JSONPathAssertion instance = new JSONPathAssertion();    instance.setJsonPath("$.myval");    instance.setExpectNull(true);    instance.setJsonValidationBool(true);    AssertionResult expResult = new AssertionResult("");    AssertionResult result = instance.getResult(samplerResult);    assertEquals(expResult.getName(), result.getName());    assertTrue(result.isFailure());}
0
public void testGetResult_null_novalidate()
{    SampleResult samplerResult = new SampleResult();    samplerResult.setResponseData("{\"myval\": null}".getBytes());    JSONPathAssertion instance = new JSONPathAssertion();    instance.setJsonPath("$.myval");    instance.setJsonValidationBool(false);    AssertionResult expResult = new AssertionResult("");    AssertionResult result = instance.getResult(samplerResult);    assertEquals(expResult.getName(), result.getName());    assertFalse(result.isFailure());}
0
public void testGetResult_no_such_path()
{    SampleResult samplerResult = new SampleResult();    samplerResult.setResponseData("{\"myval\": null}".getBytes());    JSONPathAssertion instance = new JSONPathAssertion();    instance.setJsonPath("$.notexist");    instance.setJsonValidationBool(false);    AssertionResult expResult = new AssertionResult("");    AssertionResult result = instance.getResult(samplerResult);    assertEquals(expResult.getName(), result.getName());    assertTrue(result.isFailure());}
0
public void testGetResult_list_val()
{    SampleResult samplerResult = new SampleResult();    samplerResult.setResponseData("{\"myval\": [{\"test\":1},{\"test\":2},{\"test\":3}]}".getBytes());    JSONPathAssertion instance = new JSONPathAssertion();    instance.setJsonPath("$.myval[*].test");    instance.setJsonValidationBool(true);    instance.setExpectedValue("2");    AssertionResult expResult = new AssertionResult("");    AssertionResult result = instance.getResult(samplerResult);    assertEquals(expResult.getName(), result.getName());    assertFalse(result.isFailure());}
0
public void testGetResult_list_negative()
{    SampleResult samplerResult = new SampleResult();    samplerResult.setResponseData("{\"myval\": [{\"test\":1},{\"test\":2},{\"test\":3}]}".getBytes());    JSONPathAssertion instance = new JSONPathAssertion();    instance.setJsonPath("$.myval[*].test");    instance.setJsonValidationBool(true);    instance.setExpectedValue("5");    AssertionResult expResult = new AssertionResult("");    AssertionResult result = instance.getResult(samplerResult);    assertEquals(expResult.getName(), result.getName());    assertTrue(result.isFailure());}
0
public void testGetResult_list_empty_novalidate()
{    SampleResult samplerResult = new SampleResult();    samplerResult.setResponseData("{\"myval\": []}".getBytes());    JSONPathAssertion instance = new JSONPathAssertion();    instance.setJsonPath("$.myval[*]");    instance.setJsonValidationBool(false);    AssertionResult expResult = new AssertionResult("");    AssertionResult result = instance.getResult(samplerResult);    assertEquals(expResult.getName(), result.getName());    assertFalse(result.isFailure());}
0
public void testGetResult_list_empty_validate()
{    SampleResult samplerResult = new SampleResult();    samplerResult.setResponseData("{\"myval\": []}".getBytes());    JSONPathAssertion instance = new JSONPathAssertion();    instance.setJsonPath("$.myval");    instance.setJsonValidationBool(true);    instance.setExpectedValue("[]");    AssertionResult expResult = new AssertionResult("");    AssertionResult result = instance.getResult(samplerResult);    assertEquals(expResult.getName(), result.getName());    assertFalse(result.isFailure());}
0
public void testGetResult_dict()
{    SampleResult samplerResult = new SampleResult();    samplerResult.setResponseData("{\"myval\": {\"key\": \"val\"}}".getBytes());    JSONPathAssertion instance = new JSONPathAssertion();    instance.setJsonPath("$.myval");    instance.setJsonValidationBool(true);    instance.setExpectedValue("{\"key\":\"val\"}");    AssertionResult expResult = new AssertionResult("");    AssertionResult result = instance.getResult(samplerResult);    assertEquals(expResult.getName(), result.getName());    assertFalse(result.isFailure());}
0
public void testGetResult_inverted_null()
{    SampleResult samplerResult = new SampleResult();    samplerResult.setResponseData("{\"myval\": [{\"key\": null}]}".getBytes());    JSONPathAssertion instance = new JSONPathAssertion();    instance.setJsonPath("$.myval[*].key");    instance.setJsonValidationBool(true);    instance.setExpectNull(true);    instance.setInvert(true);    AssertionResult expResult = new AssertionResult("");    AssertionResult result = instance.getResult(samplerResult);    assertEquals(expResult.getName(), result.getName());    assertTrue(result.isFailure());}
0
public void testGetResult_match_msg_problem()
{    SampleResult samplerResult = new SampleResult();    String str = "{\"execution\":[{\"scenario\":{\"requests\":[{\"headers\":{\"headerkey\":\"header value\"}}]}}]}";    samplerResult.setResponseData(str.getBytes());    JSONPathAssertion instance = new JSONPathAssertion();    instance.setJsonPath("$.execution[0].scenario.requests[0].headers");    instance.setJsonValidationBool(true);    instance.setExpectNull(false);    instance.setExpectedValue("{headerkey=header value}");    instance.setInvert(false);    AssertionResult expResult = new AssertionResult("");    AssertionResult result = instance.getResult(samplerResult);    assertEquals(expResult.getName(), result.getName());    assertTrue(result.isFailure());    assertEquals("Value expected to match regexp '{headerkey=header value}', but it did not match: '{\"headerkey\":\"header value\"}'", result.getFailureMessage());}
0
public void testGetResult_match_msg_problem2()
{    SampleResult samplerResult = new SampleResult();    String str = "{\n" + " \"code\":200,\n" + " \"contact\":{\n" + "   \"id\":28071,\n" + "   \"description\":\"test description\",\n" + "   \"info\":{\n" + "       \"ngn_number\":[\n" + "           \"2003\",\n" + "           \"2004\"\n" + "       ]\n" + "   }\n" + " }\n" + "}";    samplerResult.setResponseData(str.getBytes());    JSONPathAssertion instance = new JSONPathAssertion();    instance.setJsonPath("$.contact.info.ngn_number");    instance.setJsonValidationBool(true);    instance.setExpectNull(false);    instance.setExpectedValue("[\"2003\",\"2004\"]");    instance.setInvert(false);    instance.setIsRegex(false);    AssertionResult expResult = new AssertionResult("");    AssertionResult result = instance.getResult(samplerResult);    assertEquals(expResult.getName(), result.getName());    assertFalse(result.isFailure());}
0
public void testGetResultFloat()
{    Locale prevLocale = Locale.getDefault();    try {                Locale.setDefault(Locale.US);        SampleResult samplerResult = new SampleResult();        samplerResult.setResponseData("{\"myval\": [{\"test\":0.0000123456789}]}".getBytes());        JSONPathAssertion instance = new JSONPathAssertion();        instance.setJsonPath("$.myval[*].test");        instance.setJsonValidationBool(true);        instance.setIsRegex(false);        instance.setExpectedValue("0.0000123456789");        AssertionResult expResult = new AssertionResult("");        AssertionResult result = instance.getResult(samplerResult);        assertEquals(expResult.getName(), result.getName());        assertFalse(result.isFailure());    } finally {        Locale.setDefault(prevLocale);    }}
0
public void setUp()
{    JMeterContext jmctx = JMeterContextService.getContext();    assertion = new XMLAssertion();    assertion.setThreadContext(jmctx);    JMeterVariables vars = new JMeterVariables();    jmctx.setVariables(vars);    sampleResult = new SampleResult();}
0
public void testValidXML() throws Exception
{    sampleResult.setResponseData(validXml, null);    result = assertion.getResult(sampleResult);    Assert.assertFalse(result.isFailure());    Assert.assertFalse(result.isError());    Assert.assertNull(result.getFailureMessage());}
0
public void testInvalidXML() throws Exception
{    sampleResult.setResponseData(invalidXml, null);    result = assertion.getResult(sampleResult);    Assert.assertTrue(result.isFailure());    Assert.assertTrue(result.isError());    Assert.assertNotNull(result.getFailureMessage());}
0
public void testNoXML() throws Exception
{    sampleResult.setResponseData(noXml, null);    result = assertion.getResult(sampleResult);    Assert.assertTrue(result.isFailure());    Assert.assertTrue(result.isError());    Assert.assertNotNull(result.getFailureMessage());    Assert.assertTrue(result.getFailureMessage().contains("Content is not allowed in prolog"));}
0
public void setUp() throws Exception
{    jmctx = JMeterContextService.getContext();    assertion = new XMLSchemaAssertion();        assertion.setThreadContext(jmctx);        result = new SampleResult();    JMeterVariables vars = new JMeterVariables();    jmctx.setVariables(vars);    jmctx.setPreviousResult(result);}
0
private ByteArrayOutputStream readBA(String name) throws IOException
{    BufferedInputStream bis = new BufferedInputStream(new FileInputStream(findTestFile(name)));    ByteArrayOutputStream baos = new ByteArrayOutputStream(1000);    int len = 0;    byte[] data = new byte[512];    while ((len = bis.read(data)) >= 0) {        baos.write(data, 0, len);    }    bis.close();    return baos;}
0
private byte[] readFile(String name) throws IOException
{    return readBA(name).toByteArray();}
0
public void setUp() throws Exception
{    jmctx = JMeterContextService.getContext();    assertion = new XPath2Assertion();        assertion.setThreadContext(jmctx);    response = new SampleResult();    response.setResponseData(xmlDoc, "UTF-8");    vars = new JMeterVariables();    jmctx.setVariables(vars);    jmctx.setPreviousResult(response);}
0
public void testXPath2AssertionPath1() throws FactoryConfigurationError
{    String namespaces = "age=http://www.w3.org/2003/01/geo/wgs84_pos#";    String xPathQuery = "//Employees/Employee[1]/age:ag";    assertion.setNamespaces(namespaces);    assertion.setXPathString(xPathQuery);    response.setResponseData(xmlDoc, "UTF-8");    AssertionResult res = assertion.getResult(response);    assertFalse("When xpath2 conforms to xml, the result of assertion should be true ", res.isFailure());    assertFalse("When the format of xpath2 is right, assertion will run correctly ", res.isError());}
0
public void testXPath2AssertionPath1Negated() throws FactoryConfigurationError
{    String namespaces = "age=http://www.w3.org/2003/01/geo/wgs84_pos#";    String xPathQuery = "//Employees/Employee[1]/age:ag";    assertion.setNamespaces(namespaces);    assertion.setXPathString(xPathQuery);    assertion.setNegated(true);    response.setResponseData(xmlDoc, "UTF-8");    AssertionResult res = assertion.getResult(response);    assertTrue("When xpath2 conforms to xml, the result of assertion should be false ", res.isFailure());    assertFalse("When the format of xpath2 is right, assertion will run correctly ", res.isError());}
0
public void testXPath2AssertionPath2() throws FactoryConfigurationError
{    String namespaces = "age=http://www.w3.org/2003/01/geo/wgs84#";    String xPathQuery = "//Employees/Employee[1]/age:ag";    assertion.setNamespaces(namespaces);    assertion.setXPathString(xPathQuery);    response.setResponseData(xmlDoc, "UTF-8");    AssertionResult res = assertion.getResult(response);    assertTrue("When xpath2 doesn't conform to xml, the result of assertion should be false ", res.isFailure());    assertFalse("When the format of xpath2 is right, assertion will run correctly ", res.isError());}
0
public void testXPath2AssertionPath2Negated() throws FactoryConfigurationError
{    String namespaces = "age=http://www.w3.org/2003/01/geo/wgs84#";    String xPathQuery = "//Employees/Employee[1]/age:ag";    assertion.setNamespaces(namespaces);    assertion.setXPathString(xPathQuery);    assertion.setNegated(true);    response.setResponseData(xmlDoc, "UTF-8");    AssertionResult res = assertion.getResult(response);    assertFalse("When xpath2 doesn't conform to xml, the result of assertion should be true ", res.isFailure());    assertFalse("When the format of xpath2 is right, assertion will run correctly ", res.isError());}
0
public void testXPath2AssertionBool1() throws FactoryConfigurationError
{    String namespaces = "age=http://www.w3.org/2003/01/geo/wgs84_pos#";    String xPathQuery = "count(//Employee)=4";    assertion.setNamespaces(namespaces);    assertion.setXPathString(xPathQuery);    response.setResponseData(xmlDoc, "UTF-8");    AssertionResult res = assertion.getResult(response);    assertFalse("When xpath2 conforms to xml, the result of assertion should be true ", res.isFailure());    assertFalse("When the format of xpath2 is right, assertion will run correctly ", res.isError());}
0
public void testXPath2AssertionBool1Negated() throws FactoryConfigurationError
{    String namespaces = "age=http://www.w3.org/2003/01/geo/wgs84_pos#";    String xPathQuery = "count(//Employee)=4";    assertion.setNamespaces(namespaces);    assertion.setXPathString(xPathQuery);    assertion.setNegated(true);    response.setResponseData(xmlDoc, "UTF-8");    AssertionResult res = assertion.getResult(response);    assertTrue("When xpath2 conforms to xml, the result of assertion should be false ", res.isFailure());    assertFalse("When the format of xpath2 is right, assertion will run correctly ", res.isError());}
0
public void testXPath2AssertionBool2() throws FactoryConfigurationError
{    String namespaces = "age=http://www.w3.org/2003/01/geo/wgs84_pos#";        String xPathQuery = "count(//Employee)=3";    assertion.setNamespaces(namespaces);    assertion.setXPathString(xPathQuery);    response.setResponseData(xmlDoc, "UTF-8");    AssertionResult res = assertion.getResult(response);    assertTrue("When xpath2 doesn't conforms to xml, the result of assertion should be false ", res.isFailure());    assertFalse("When the format of xpath2 is right, assertion will run correctly ", res.isError());}
0
public void testXPath2AssertionBool2Negated() throws FactoryConfigurationError
{    String namespaces = "age=http://www.w3.org/2003/01/geo/wgs84_pos#";        String xPathQuery = "count(//Employee)=3";    assertion.setNamespaces(namespaces);    assertion.setXPathString(xPathQuery);    assertion.setNegated(true);    response.setResponseData(xmlDoc, "UTF-8");    AssertionResult res = assertion.getResult(response);    assertFalse("When xpath2 doesn't conforms to xml, the result of assertion should be true ", res.isFailure());    assertFalse("When the format of xpath2 is right, assertion will run correctly ", res.isError());}
0
public void testScope()
{        assertion.setThreadContext(jmctx);    SampleResult result = new SampleResult();    String data = "<html><head><title>testtitle</title></head></html>";    assertion.setScopeVariable("testScope");    vars.put("testScope", data);    jmctx.setVariables(vars);    jmctx.setPreviousResult(result);    assertion.setXPathString("/html/head/title");    AssertionResult res = assertion.getResult(result);    assertFalse("When xpath conforms to xml, the result of assertion " + "should be true ", res.isFailure());    assertFalse(res.isError());}
0
public void testScopeFailure()
{        assertion.setThreadContext(jmctx);    SampleResult result = new SampleResult();    String data = "<html><head><title>testtitle</title></head></html>";    assertion.setScopeVariable("testScope");    vars.put("testScope", data);    jmctx.setVariables(vars);    jmctx.setPreviousResult(result);    assertion.setXPathString("/html/head/tit");    AssertionResult res = assertion.getResult(result);    assertTrue("When xpath doesn't conforms to xml, the result " + "of assertion should be false ", res.isFailure());    assertFalse(res.isError());}
0
public void testResponseDataIsEmpty()
{        assertion.setThreadContext(jmctx);    SampleResult result = new SampleResult();    assertion.setScopeVariable("testScope");    vars.put("testScope", null);    jmctx.setVariables(vars);    jmctx.setPreviousResult(result);    assertion.setXPathString("/html/head/tit");    AssertionResult res = assertion.getResult(result);    assertTrue("When xpath doesn't conforms to xml, the result " + "of assertion should be false ", res.isFailure());    assertFalse(res.isError());    assertEquals("When the response data is empty, the result of assertion should be false", "Response was null", res.getFailureMessage());}
0
public void testBadXpathFormat() throws FactoryConfigurationError
{    String namespaces = "age=http://www.w3.org/2003/01/geo/wgs84_pos#";    String xPathQuery = "///Employees/Employee[1]/age:ag";    assertion.setNamespaces(namespaces);    assertion.setXPathString(xPathQuery);    response.setResponseData(xmlDoc, "UTF-8");    AssertionResult res = assertion.getResult(response);    assertTrue("When format of xpath is wrong, the test should failed", res.isError());    assertTrue(res.getFailureMessage().contains("Exception occurred computing assertion with XPath"));}
0
public void testXPath2AssertionPathWithoutNamespace() throws FactoryConfigurationError
{    String data = "<html><head><title>testtitle</title></head></html>";    vars = new JMeterVariables();    jmctx.setVariables(vars);    jmctx.setPreviousResult(response);    String xPathQuery = "/html/head";    assertion.setXPathString(xPathQuery);    response.setResponseData(data, "UTF-8");    AssertionResult res = assertion.getResult(response);    assertFalse("When xpath2 conforms to xml, the result of assertion should be true ", res.isFailure());    assertFalse("When the format of xpath2 is right, assertion will run correctly ", res.isError());}
0
public void testValidateXPath2() throws ParserConfigurationException
{    Document testDoc = XPathUtil.makeDocumentBuilder(false, false, false, false).newDocument();        Element el = testDoc.createElement("root");    testDoc.appendChild(el);    String namespaces = "a=http://www.w3.org/2003/01/geo/wgs84_pos# b=http://www.w3.org/2003/01/geo/wgs85_pos#";    String xPathQuery = "//Employees/b:Employee[1]/a:ag";    assertTrue("When the user give namspaces, the result of validation should be true", XPath2Panel.validXPath(xPathQuery, false, namespaces));    namespaces = "a=http://www.w3.org/2003/01/geo/wgs84_pos#";    assertFalse("When the user doesn't give namspaces, the result of validation should be false", XPath2Panel.validXPath(xPathQuery, false, namespaces));}
0
public void setUp() throws Exception
{    jmctx = JMeterContextService.getContext();    assertion = new XPathAssertion();        assertion.setThreadContext(jmctx);    result = new SampleResult();    result.setResponseData(readFile("testfiles/XPathAssertionTest.xml"));    vars = new JMeterVariables();    jmctx.setVariables(vars);    jmctx.setPreviousResult(result);}
0
private void setAlternateResponseData()
{    String data = "<company-xmlext-query-ret>" + "<row>" + "<value field=\"RetCode\">LIS_OK</value>" + "<value field=\"RetCodeExtension\"></value>" + "<value field=\"alias\"></value>" + "<value field=\"positioncount\"></value>" + "<value field=\"invalidpincount\">0</value>" + "<value field=\"pinposition1\">1</value>" + "<value field=\"pinpositionvalue1\"></value>" + "<value field=\"pinposition2\">5</value>" + "<value field=\"pinpositionvalue2\"></value>" + "<value field=\"pinposition3\">6</value>" + "<value field=\"pinpositionvalue3\"></value>" + "</row>" + "</company-xmlext-query-ret>";    result.setResponseData(data, null);}
0
private ByteArrayOutputStream readBA(String name) throws IOException
{    BufferedInputStream bis = new BufferedInputStream(new FileInputStream(findTestFile(name)));    ByteArrayOutputStream baos = new ByteArrayOutputStream(1000);    int len = 0;    byte[] data = new byte[512];    while ((len = bis.read(data)) >= 0) {        baos.write(data, 0, len);    }    bis.close();    return baos;}
0
private byte[] readFile(String name) throws IOException
{    return readBA(name).toByteArray();}
0
public void testNoTolerance() throws Exception
{    String data = "<html><head><title>testtitle</title></head>" + "<body>" + "<p><i><b>invalid tag nesting</i></b><hr>" + "</body></html>";    result.setResponseData(data, null);    vars = new JMeterVariables();    jmctx.setVariables(vars);    jmctx.setPreviousResult(result);    assertion.setXPathString("/html/head/title");    assertion.setValidating(false);    assertion.setTolerant(false);    AssertionResult res = assertion.getResult(result);        assertTrue(res.isError());    assertFalse(res.isFailure());}
1
public void testAssertion() throws Exception
{    setAlternateResponseData();    assertion.setXPathString("//row/value[@field = 'alias']");    AssertionResult res = assertion.getResult(jmctx.getPreviousResult());            assertFalse(res.isError());    assertFalse(res.isFailure());}
1
public void testNegateAssertion() throws Exception
{    setAlternateResponseData();    assertion.setXPathString("//row/value[@field = 'noalias']");    assertion.setNegated(true);    AssertionResult res = assertion.getResult(jmctx.getPreviousResult());            assertFalse(res.isError());    assertFalse(res.isFailure());}
1
public void testValidationFailure() throws Exception
{    setAlternateResponseData();    assertion.setXPathString("//row/value[@field = 'alias']");    assertion.setNegated(false);    assertion.setValidating(true);    AssertionResult res = assertion.getResult(jmctx.getPreviousResult());        assertTrue(res.isError());    assertFalse(res.isFailure());}
1
public void testValidationSuccess() throws Exception
{    String data = "<?xml version=\"1.0\"?>" + "<!DOCTYPE BOOK [" + "<!ELEMENT p (#PCDATA)>" + "<!ELEMENT BOOK         (OPENER,SUBTITLE?,INTRODUCTION?,(SECTION | PART)+)>" + "<!ELEMENT OPENER       (TITLE_TEXT)*>" + "<!ELEMENT TITLE_TEXT   (#PCDATA)>" + "<!ELEMENT SUBTITLE     (#PCDATA)>" + "<!ELEMENT INTRODUCTION (HEADER, p+)+>" + "<!ELEMENT PART         (HEADER, CHAPTER+)>" + "<!ELEMENT SECTION      (HEADER, p+)>" + "<!ELEMENT HEADER       (#PCDATA)>" + "<!ELEMENT CHAPTER      (CHAPTER_NUMBER, CHAPTER_TEXT)>" + "<!ELEMENT CHAPTER_NUMBER (#PCDATA)>" + "<!ELEMENT CHAPTER_TEXT (p)+>" + "]>" + "<BOOK>" + "<OPENER>" + "<TITLE_TEXT>All About Me</TITLE_TEXT>" + "</OPENER>" + "<PART>" + "<HEADER>Welcome To My Book</HEADER>" + "<CHAPTER>" + "<CHAPTER_NUMBER>CHAPTER 1</CHAPTER_NUMBER>" + "<CHAPTER_TEXT>" + "<p>Glad you want to hear about me.</p>" + "<p>There's so much to say!</p>" + "<p>Where should we start?</p>" + "<p>How about more about me?</p>" + "</CHAPTER_TEXT>" + "</CHAPTER>" + "</PART>" + "</BOOK>";    result.setResponseData(data, null);    vars = new JMeterVariables();    jmctx.setVariables(vars);    jmctx.setPreviousResult(result);    assertion.setXPathString("/");    assertion.setValidating(true);    AssertionResult res = assertion.getResult(result);    assertFalse(res.isError());    assertFalse(res.isFailure());}
0
public void testValidationFailureWithDTD() throws Exception
{    String data = "<?xml version=\"1.0\"?>" + "<!DOCTYPE BOOK [" + "<!ELEMENT p (#PCDATA)>" + "<!ELEMENT BOOK         (OPENER,SUBTITLE?,INTRODUCTION?,(SECTION | PART)+)>" + "<!ELEMENT OPENER       (TITLE_TEXT)*>" + "<!ELEMENT TITLE_TEXT   (#PCDATA)>" + "<!ELEMENT SUBTITLE     (#PCDATA)>" + "<!ELEMENT INTRODUCTION (HEADER, p+)+>" + "<!ELEMENT PART         (HEADER, CHAPTER+)>" + "<!ELEMENT SECTION      (HEADER, p+)>" + "<!ELEMENT HEADER       (#PCDATA)>" + "<!ELEMENT CHAPTER      (CHAPTER_NUMBER, CHAPTER_TEXT)>" + "<!ELEMENT CHAPTER_NUMBER (#PCDATA)>" + "<!ELEMENT CHAPTER_TEXT (p)+>" + "]>" + "<BOOK>" + "<OPENER>" + "<TITLE_TEXT>All About Me</TITLE_TEXT>" + "</OPENER>" + "<PART>" + "<HEADER>Welcome To My Book</HEADER>" + "<CHAPTER>" + "<CHAPTER_NUMBER>CHAPTER 1</CHAPTER_NUMBER>" + "<CHAPTER_TEXT>" + "<p>Glad you want to hear about me.</p>" + "<p>There's so much to say!</p>" + "<p>Where should we start?</p>" + "<p>How about more about me?</p>" + "</CHAPTER_TEXT>" + "</CHAPTER>" + "<illegal>not defined in dtd</illegal>" + "</PART>" + "</BOOK>";    result.setResponseData(data, null);    vars = new JMeterVariables();    jmctx.setVariables(vars);    jmctx.setPreviousResult(result);    assertion.setXPathString("/");    assertion.setValidating(true);    AssertionResult res = assertion.getResult(result);        assertTrue(res.isError());    assertFalse(res.isFailure());}
1
public void testTolerance() throws Exception
{    String data = "<html><head><title>testtitle</title></head>" + "<body>" + "<p><i><b>invalid tag nesting</i></b><hr>" + "</body></html>";    result.setResponseData(data, null);    vars = new JMeterVariables();    jmctx.setVariables(vars);    jmctx.setPreviousResult(result);    assertion.setXPathString("/html/head/title");    assertion.setValidating(true);    assertion.setTolerant(true);    AssertionResult res = assertion.getResult(result);        assertFalse(res.isFailure());    assertFalse(res.isError());}
1
public void testScope()
{    String data = "<html><head><title>testtitle</title></head><body>" + "<p><i><b>invalid tag nesting</i></b><hr></body></html>";    assertion.setScopeVariable("testScope");    vars = new JMeterVariables();    vars.put("testScope", data);    jmctx.setVariables(vars);    jmctx.setPreviousResult(result);    assertion.setXPathString("/html/head/title");    assertion.setValidating(true);    assertion.setTolerant(true);    AssertionResult res = assertion.getResult(result);        assertFalse("When xpath conforms to xml, the result of assertion " + "should be true ", res.isFailure());    assertFalse(res.isError());}
1
public void testScopeFailure()
{    String data = "<html><head><title>testtitle</title></head><body>" + "<p><i><b>invalid tag nesting</i></b><hr></body></html>";    assertion.setScopeVariable("testScope");    vars = new JMeterVariables();    vars.put("testScope", data);    jmctx.setVariables(vars);    jmctx.setPreviousResult(result);    assertion.setXPathString("/html/head/tit");    assertion.setValidating(true);    assertion.setTolerant(true);    AssertionResult res = assertion.getResult(result);        assertTrue("When xpath doesn't conforms to xml, the result " + "of assertion should be false ", res.isFailure());    assertFalse(res.isError());}
1
public void testWithoutSuitableNamespaces()
{    setAlternateResponseData();    assertion.setNamespace(true);    assertion.setXPathString("//b:row/value[@field = 'alias']");    AssertionResult res = assertion.getResult(jmctx.getPreviousResult());            assertTrue("When the user activates namespaces, a TransformerException should be thrown", res.getFailureMessage().contains("TransformerException"));}
1
public void testArgumentCreation() throws Exception
{    ArgumentsPanel gui = new ArgumentsPanel();    gui.tableModel.addRow(new Argument());    gui.tableModel.setValueAt("howdy", 0, 0);    gui.tableModel.addRow(new Argument());    gui.tableModel.setValueAt("doody", 0, 1);    assertEquals("=", ((Argument) ((Arguments) gui.createTestElement()).getArguments().get(0).getObjectValue()).getMetaData());}
0
public void setUp()
{    JMeterContext jmcx = JMeterContextService.getContext();    jmcx.setVariables(new JMeterVariables());    threadVars = jmcx.getVariables();    threadVars.put("b", "value");}
0
public void tearDown() throws IOException
{        FileServer.getFileServer().closeFiles();}
0
public void testopen() throws Exception
{    CSVDataSet csv = new CSVDataSet();    csv.setFilename("No.such.filename");    csv.setVariableNames("a,b,c");    csv.setDelimiter(",");    try {        csv.iterationStart(null);        fail("Bad filename in CSVDataSet -> IllegalArgumentException: File No.such.filename must exist and be readable");    } catch (IllegalArgumentException ignored) {        assertEquals("Bad filename in CSVDataSet -> exception", "File No.such.filename must exist and be readable", ignored.getMessage());    }    csv = new CSVDataSet();    csv.setFilename(findTestPath("testfiles/testempty.csv"));    csv.setVariableNames("a,b,c");    csv.setDelimiter(",");    csv.iterationStart(null);    assertEquals("", threadVars.get("a"));    assertEquals("b1", threadVars.get("b"));    assertEquals("c1", threadVars.get("c"));    csv.iterationStart(null);    assertEquals("a2", threadVars.get("a"));    assertEquals("", threadVars.get("b"));    assertEquals("c2", threadVars.get("c"));    csv.iterationStart(null);    assertEquals("a3", threadVars.get("a"));    assertEquals("b3", threadVars.get("b"));    assertEquals("", threadVars.get("c"));    csv.iterationStart(null);    assertEquals("a4", threadVars.get("a"));    assertEquals("b4", threadVars.get("b"));    assertEquals("c4", threadVars.get("c"));        csv.iterationStart(null);    assertEquals("", threadVars.get("a"));    assertEquals("b1", threadVars.get("b"));    assertEquals("c1", threadVars.get("c"));}
0
public void testutf8() throws Exception
{    CSVDataSet csv = new CSVDataSet();    csv.setFilename(findTestPath("testfiles/testutf8.csv"));    csv.setVariableNames("a,b,c,d");    csv.setDelimiter(",");    csv.setQuotedData(true);    csv.setFileEncoding("UTF-8");    csv.iterationStart(null);    assertEquals("a1", threadVars.get("a"));    assertEquals("b1", threadVars.get("b"));    assertEquals("\u00e71", threadVars.get("c"));    assertEquals("d1", threadVars.get("d"));    csv.iterationStart(null);    assertEquals("a2", threadVars.get("a"));    assertEquals("b2", threadVars.get("b"));    assertEquals("\u00e72", threadVars.get("c"));    assertEquals("d2", threadVars.get("d"));    csv.iterationStart(null);    assertEquals("a3", threadVars.get("a"));    assertEquals("b3", threadVars.get("b"));    assertEquals("\u00e73", threadVars.get("c"));    assertEquals("d3", threadVars.get("d"));    csv.iterationStart(null);    assertEquals("a4", threadVars.get("a"));    assertEquals("b4", threadVars.get("b"));    assertEquals("\u00e74", threadVars.get("c"));    assertEquals("d4", threadVars.get("d"));}
0
public void testHeaderOpen()
{    CSVDataSet csv = new CSVDataSet();    csv.setFilename(findTestPath("testfiles/testheader.csv"));    csv.setDelimiter("|");    assertNull(csv.getVariableNames());    csv.iterationStart(null);    assertNull(threadVars.get("a"));    assertEquals("a1", threadVars.get("A"));    assertEquals("b1", threadVars.get("B"));    assertEquals("c1", threadVars.get("C"));    assertEquals("d1", threadVars.get("D|1"));    csv.iterationStart(null);    assertNull(threadVars.get("a"));    assertEquals("a2", threadVars.get("A"));    assertEquals("b2", threadVars.get("B"));    assertEquals("c2", threadVars.get("C"));    assertEquals("d2", threadVars.get("D|1"));}
0
public void testHeaderOpenAndRecycle()
{    CSVDataSet csv = new CSVDataSet();    csv.setFilename(findTestPath("testfiles/testheader.csv"));    csv.setDelimiter("|");    csv.setRecycle(true);        assertNull(csv.getVariableNames());            csv.iterationStart(null);        csv.iterationStart(null);        csv.iterationStart(null);        csv.iterationStart(null);        csv.iterationStart(null);    assertEquals("a1", threadVars.get("A"));    assertEquals("b1", threadVars.get("B"));    assertEquals("c1", threadVars.get("C"));    assertEquals("d1", threadVars.get("D|1"));}
0
public void testHeaderQuotes()
{    CSVDataSet csv = new CSVDataSet();    csv.setFilename(findTestPath("testfiles/testquoted.csv"));    csv.setDelimiter("|");    csv.setQuotedData(true);    csv.setRecycle(false);    csv.setStopThread(true);    assertNull(csv.getVariableNames());    csv.iterationStart(null);    assertNull(threadVars.get("a"));    assertEquals("a1", threadVars.get("A"));    assertEquals("b1", threadVars.get("B"));    assertEquals("c1", threadVars.get("C"));    assertEquals("d1", threadVars.get("D|1"));    csv.iterationStart(null);    assertNull(threadVars.get("a"));    assertEquals("a2", threadVars.get("A"));    assertEquals("b2", threadVars.get("B"));    assertEquals("c2", threadVars.get("C"));    assertEquals("d2", threadVars.get("D|1"));    csv.iterationStart(null);    assertNull(threadVars.get("a"));    assertEquals("a3", threadVars.get("A"));    assertEquals("b3", threadVars.get("B"));    assertEquals("c3", threadVars.get("C"));    assertEquals("d3", threadVars.get("D|1"));    try {        csv.iterationStart(null);        fail("Expected JMeterStopThreadException");    } catch (JMeterStopThreadException expected) {    }}
0
private CSVDataSet initCSV()
{    CSVDataSet csv = new CSVDataSet();    csv.setFilename(findTestPath("testfiles/unit/TestCVSDataSet.csv"));    csv.setVariableNames("a,b,c");    csv.setDelimiter(",");    return csv;}
0
public void testShareMode()
{        new CSVDataSetBeanInfo();    CSVDataSet csv0 = initCSV();    CSVDataSet csv1 = initCSV();    assertNull(csv1.getShareMode());    csv1.setShareMode("abc");    assertEquals("abc", csv1.getShareMode());    csv1.iterationStart(null);    assertEquals("a1", threadVars.get("a"));    csv1.iterationStart(null);    assertEquals("a2", threadVars.get("a"));    CSVDataSet csv2 = initCSV();    csv2.setShareMode("abc");    assertEquals("abc", csv2.getShareMode());    csv2.iterationStart(null);    assertEquals("a3", threadVars.get("a"));    csv0.iterationStart(null);    assertEquals("a1", threadVars.get("a"));    csv1.iterationStart(null);    assertEquals("a4", threadVars.get("a"));}
0
public void setUp()
{    JMeterContext jmcx = JMeterContextService.getContext();    jmcx.setVariables(new JMeterVariables());    threadVars = jmcx.getVariables();    config.setRandomSeed("abcd");    config.setVariableName(RANDOM_VAR_NAME);}
0
public void testRandom() throws Exception
{    config.setMinimumValue(MIN_VALUE);    config.setMaximumValue(MAX_VALUE);    for (int i = 0; i < 100; i++) {        config.iterationStart(null);        String value = threadVars.get(RANDOM_VAR_NAME);        Assert.assertNotNull(threadVars.get(RANDOM_VAR_NAME));        int numericValue = Integer.parseInt(value);        Assert.assertTrue("value:" + numericValue + " is not in range [" + MIN_VALUE + "," + MAX_VALUE + "]", numericValue >= 0 && numericValue <= 10);    }}
0
public void testRandomWithFormat() throws Exception
{        Locale prevLocale = Locale.getDefault();    try {        Locale.setDefault(Locale.US);        config.setMinimumValue(MAX_VALUE);        config.setMaximumValue(MAX_VALUE);        config.setOutputFormat("000.00");        config.iterationStart(null);        String value = threadVars.get(RANDOM_VAR_NAME);        Assert.assertNotNull(threadVars.get(RANDOM_VAR_NAME));        Assert.assertEquals("010.00", value);    } finally {        Locale.setDefault(prevLocale);    }}
0
public void testInvalidRange() throws Exception
{    config.setMinimumValue(MAX_VALUE);    config.setMaximumValue(MIN_VALUE);    config.iterationStart(null);    Assert.assertNull(threadVars.get(RANDOM_VAR_NAME));}
0
public void testStackOverflow() throws Exception
{    LoopController controller = new LoopController();    controller.setLoops(1);    controller.setContinueForever(false);    IfController ifCont = new IfController("true==false");    ifCont.setUseExpression(false);    ifCont.setEvaluateAll(false);    WhileController whileController = new WhileController();    whileController.setCondition("${__javaScript(\"true\" != \"false\")}");    whileController.addTestElement(new TestSampler("Sample1"));    controller.addTestElement(ifCont);    ifCont.addTestElement(whileController);    Sampler sampler = null;    int counter = 0;    controller.initialize();    controller.setRunningVersion(true);    ifCont.setRunningVersion(true);    whileController.setRunningVersion(true);    try {        while ((sampler = controller.next()) != null) {            sampler.sample(null);            counter++;        }        assertEquals(0, counter);    } catch (StackOverflowError e) {        fail("Stackoverflow occurred in testStackOverflow");    }}
0
public void testBug53768() throws Exception
{    LoopController controller = new LoopController();    controller.setLoops(1);    controller.setContinueForever(false);    Arguments arguments = new Arguments();    arguments.addArgument("VAR1", "0", "=");    DebugSampler debugSampler1 = new DebugSampler();    debugSampler1.setName("VAR1 = ${VAR1}");    IfController ifCont = new IfController("true==false");    ifCont.setUseExpression(false);    ifCont.setEvaluateAll(false);    IfController ifCont2 = new IfController("true==true");    ifCont2.setUseExpression(false);    ifCont2.setEvaluateAll(false);    CounterConfig counterConfig = new CounterConfig();    counterConfig.setStart(1);    counterConfig.setIncrement(1);    counterConfig.setVarName("VAR1");    DebugSampler debugSampler2 = new DebugSampler();    debugSampler2.setName("VAR1 = ${VAR1}");    controller.addTestElement(arguments);    controller.addTestElement(debugSampler1);    controller.addTestElement(ifCont);    ifCont.addTestElement(ifCont2);    ifCont2.addTestElement(counterConfig);    controller.addTestElement(debugSampler2);    controller.initialize();    controller.setRunningVersion(true);    ifCont.setRunningVersion(true);    ifCont2.setRunningVersion(true);    counterConfig.setRunningVersion(true);    arguments.setRunningVersion(true);    debugSampler1.setRunningVersion(true);    debugSampler2.setRunningVersion(true);    ifCont2.addIterationListener(counterConfig);    JMeterVariables vars = new JMeterVariables();    JMeterContext jmctx = JMeterContextService.getContext();    jmctx.setVariables(vars);    vars.put("VAR1", "0");    try {        Sampler sampler = controller.next();        sampler.sample(null);        assertEquals("0", vars.get("VAR1"));        sampler = controller.next();        sampler.sample(null);        assertEquals("0", vars.get("VAR1"));    } catch (StackOverflowError e) {        fail("Stackoverflow occurred in testStackOverflow");    }}
0
public void testProcessing() throws Exception
{    GenericController controller = new GenericController();    controller.addTestElement(new IfController("false==false"));    controller.addTestElement(new IfController(" \"a\".equals(\"a\")"));    controller.addTestElement(new IfController("2<100"));}
0
public void testProcessingTrue() throws Exception
{    LoopController controller = new LoopController();    controller.setLoops(2);    controller.addTestElement(new TestSampler("Sample1"));    IfController ifCont = new IfController("true==true");    ifCont.setEvaluateAll(true);    ifCont.addTestElement(new TestSampler("Sample2"));    TestSampler sample3 = new TestSampler("Sample3");    ifCont.addTestElement(sample3);    controller.addTestElement(ifCont);    String[] order = new String[] { "Sample1", "Sample2", "Sample3", "Sample1", "Sample2", "Sample3" };    int counter = 0;    controller.initialize();    controller.setRunningVersion(true);    ifCont.setRunningVersion(true);    Sampler sampler = null;    while ((sampler = controller.next()) != null) {        sampler.sample(null);        assertEquals(order[counter], sampler.getName());        counter++;    }    assertEquals(counter, 6);}
0
public void testProcessingTrueWithExpression() throws Exception
{    LoopController controller = new LoopController();    controller.setLoops(2);    controller.addTestElement(new TestSampler("Sample1"));    IfController ifCont = new IfController("true");    ifCont.setUseExpression(true);    ifCont.setEvaluateAll(false);    ifCont.addTestElement(new TestSampler("Sample2"));    TestSampler sample3 = new TestSampler("Sample3");    ifCont.addTestElement(sample3);    controller.addTestElement(ifCont);    String[] order = new String[] { "Sample1", "Sample2", "Sample3", "Sample1", "Sample2", "Sample3" };    int counter = 0;    controller.initialize();    controller.setRunningVersion(true);    ifCont.setRunningVersion(true);    Sampler sampler = null;    while ((sampler = controller.next()) != null) {        sampler.sample(null);        assertEquals(order[counter], sampler.getName());        counter++;    }    assertEquals(counter, 6);}
0
public void testEvaluateAllChildrenWithoutSubController() throws Exception
{    LoopController controller = new LoopController();    controller.setLoops(2);    controller.addTestElement(new TestSampler("Sample1"));    IfController ifCont = new IfController("true==true");    ifCont.setEvaluateAll(true);    controller.addTestElement(ifCont);    ifCont.addTestElement(new TestSampler("Sample2"));    TestSampler sample3 = new TestSampler("Sample3");    ifCont.addTestElement(sample3);    TestSampler sample4 = new TestSampler("Sample4");    ifCont.addTestElement(sample4);    String[] order = new String[] { "Sample1", "Sample2", "Sample3", "Sample1", "Sample2", "Sample3" };    int counter = 0;    controller.initialize();    controller.setRunningVersion(true);    ifCont.setRunningVersion(true);    Sampler sampler = null;    while ((sampler = controller.next()) != null) {        sampler.sample(null);        if (sampler.getName().equals("Sample3")) {            ifCont.setCondition("true==false");        }        assertEquals(order[counter], sampler.getName());        counter++;    }    assertEquals(counter, 6);}
0
public void testEvaluateAllChildrenWithSubController() throws Exception
{    LoopController controller = new LoopController();    controller.setLoops(2);    controller.addTestElement(new TestSampler("Sample1"));    IfController ifCont = new IfController("true==true");    ifCont.setEvaluateAll(true);    controller.addTestElement(ifCont);    ifCont.addTestElement(new TestSampler("Sample2"));    GenericController genericCont = new GenericController();    TestSampler sample3 = new TestSampler("Sample3");    genericCont.addTestElement(sample3);    TestSampler sample4 = new TestSampler("Sample4");    genericCont.addTestElement(sample4);    ifCont.addTestElement(genericCont);    String[] order = new String[] { "Sample1", "Sample2", "Sample3", "Sample1", "Sample2", "Sample3" };    int counter = 0;    controller.initialize();    controller.setRunningVersion(true);    ifCont.setRunningVersion(true);    genericCont.setRunningVersion(true);    Sampler sampler = null;    while ((sampler = controller.next()) != null) {        sampler.sample(null);        if (sampler.getName().equals("Sample3")) {            ifCont.setCondition("true==false");        }        assertEquals(order[counter], sampler.getName());        counter++;    }    assertEquals(counter, 6);}
0
public void shouldIgnoreEmptyLastLine()
{    GenericController controller = new GenericController();    IfController ifCont = new IfController("true\n");    ifCont.setUseExpression(true);    ifCont.setEvaluateAll(false);    ifCont.addTestElement(new TestSampler("sample1"));    controller.addTestElement(ifCont);    controller.initialize();    controller.setRunningVersion(true);    ifCont.setRunningVersion(true);    Sampler sampler = controller.next();    assertFalse(sampler == null);}
0
public void testProcessing() throws Exception
{    JMeterContext jmctx = JMeterContextService.getContext();    JMeterVariables variables = new JMeterVariables();    jmctx.setVariables(variables);    GenericController controller = new GenericController();    GenericController sub_1 = new GenericController();    sub_1.addTestElement(new TestSampler("one"));    sub_1.addTestElement(new TestSampler("two"));    controller.addTestElement(sub_1);    controller.addTestElement(new TestSampler("three"));    LoopController sub_2 = new LoopController();    String lcName = "LC";    sub_2.setName(lcName);    sub_2.setLoops(3);    GenericController sub_3 = new GenericController();    sub_2.addTestElement(new TestSampler("four"));    sub_3.addTestElement(new TestSampler("five"));    sub_3.addTestElement(new TestSampler("six"));    sub_2.addTestElement(sub_3);    sub_2.addTestElement(new TestSampler("seven"));    controller.addTestElement(sub_2);    String[] order = new String[] { "one", "two", "three", "four", "five", "six", "seven", "four", "five", "six", "seven", "four", "five", "six", "seven" };    int counter = 15;    controller.setRunningVersion(true);    sub_1.setRunningVersion(true);    sub_2.setRunningVersion(true);    sub_3.setRunningVersion(true);    controller.initialize();    int loopControl = 0;    for (int i = 0; i < 2; i++) {        loopControl = 0;        assertEquals(15, counter);        counter = 0;        TestElement sampler = null;        while ((sampler = controller.next()) != null) {            assertEquals(order[counter++], sampler.getName());            if ("four".equals(sampler.getName())) {                Integer value = (Integer) variables.getObject(JMeterUtils.formatJMeterExportedVariableName(lcName + LoopController.INDEX_VAR_NAME_SUFFIX));                assertNotNull(value);                assertEquals(Integer.valueOf(loopControl++), value);            }        }    }}
0
public void testLoopZeroTimes() throws Exception
{    JMeterContext jmctx = JMeterContextService.getContext();    JMeterVariables variables = new JMeterVariables();    jmctx.setVariables(variables);    LoopController loop = new LoopController();    String lcName = "LC";    loop.setName(lcName);    loop.setLoops(0);    loop.addTestElement(new TestSampler("never run"));    loop.initialize();    assertNull(loop.next());    Integer value = (Integer) variables.getObject(JMeterUtils.formatJMeterExportedVariableName(lcName + LoopController.INDEX_VAR_NAME_SUFFIX));    assertNotNull(value);    assertEquals(Integer.valueOf(0), value);}
0
public void testInfiniteLoop() throws Exception
{    JMeterContext jmctx = JMeterContextService.getContext();    LoopController loop = new LoopController();    String lcName = "LC";    loop.setName(lcName);    loop.setLoops(LoopController.INFINITE_LOOP_COUNT);    loop.addTestElement(new TestSampler("never run"));    JMeterVariables variables = new JMeterVariables();    jmctx.setVariables(variables);    loop.setRunningVersion(true);    loop.initialize();    for (int i = 0; i < 42; i++) {        assertNotNull(loop.next());        Integer value = (Integer) variables.getObject(JMeterUtils.formatJMeterExportedVariableName(lcName + LoopController.INDEX_VAR_NAME_SUFFIX));        assertNotNull(value);        assertEquals(Integer.valueOf(i), value);    }}
0
public void testBug54467() throws Exception
{    JMeterContext jmctx = JMeterContextService.getContext();    String lcName = "LC";    LoopController loop = new LoopController();    loop.setName(lcName);    Map<String, String> variables = new HashMap<>();    ReplaceStringWithFunctions transformer = new ReplaceStringWithFunctions(new CompoundVariable(), variables);    jmctx.setVariables(new JMeterVariables());    StringProperty prop = new StringProperty(LoopController.LOOPS, "${__Random(1,12,)}");    JMeterProperty newProp = transformer.transformValue(prop);    newProp.setRunningVersion(true);    loop.setProperty(newProp);    loop.addTestElement(new TestSampler("random run"));    loop.setRunningVersion(true);    loop.initialize();    int loops = loop.getLoops();    for (int i = 0; i < loops; i++) {        Sampler s = loop.next();        assertNotNull(s);        Integer value = (Integer) jmctx.getVariables().getObject(JMeterUtils.formatJMeterExportedVariableName(lcName + LoopController.INDEX_VAR_NAME_SUFFIX));        assertNotNull(value);        assertEquals(Integer.valueOf(i), value);    }    assertNull(loop.next());}
0
public void testProcessing() throws Exception
{    GenericController controller = new GenericController();    GenericController sub_1 = new OnceOnlyController();    sub_1.addTestElement(new TestSampler("one"));    sub_1.addTestElement(new TestSampler("two"));    controller.addTestElement(sub_1);    controller.addTestElement(new TestSampler("three"));    LoopController sub_2 = new LoopController();    sub_2.setLoops(3);    GenericController sub_3 = new GenericController();    sub_2.addTestElement(new TestSampler("four"));    sub_3.addTestElement(new TestSampler("five"));    sub_3.addTestElement(new TestSampler("six"));    sub_2.addTestElement(sub_3);    sub_2.addTestElement(new TestSampler("seven"));    controller.addTestElement(sub_2);    String[] interleaveOrder = new String[] { "one", "two" };    String[] order = new String[] { "", "", "three", "four", "five", "six", "seven", "four", "five", "six", "seven", "four", "five", "six", "seven" };    int counter = 15;    controller.setRunningVersion(true);    sub_1.setRunningVersion(true);    sub_2.setRunningVersion(true);    sub_3.setRunningVersion(true);    controller.initialize();    for (int i = 0; i < 4; i++) {        assertEquals(15, counter);        counter = 0;        if (i > 0) {            counter = 2;        }        TestElement sampler = null;        while ((sampler = controller.next()) != null) {            if (i == 0 && counter < 2) {                assertEquals(interleaveOrder[counter], sampler.getName());            } else {                assertEquals(order[counter], sampler.getName());            }            counter++;        }    }}
0
public void testProcessing2() throws Exception
{    GenericController controller = new GenericController();    GenericController sub_1 = new OnceOnlyController();    sub_1.addTestElement(new TestSampler("one"));    sub_1.addTestElement(new TestSampler("two"));    controller.addTestElement(sub_1);    controller.addTestElement(new TestSampler("three"));    LoopController sub_2 = new LoopController();    sub_2.setLoops(3);    OnceOnlyController sub_3 = new OnceOnlyController();    sub_2.addTestElement(new TestSampler("four"));    sub_3.addTestElement(new TestSampler("five"));    sub_3.addTestElement(new TestSampler("six"));    sub_2.addTestElement(sub_3);    sub_2.addIterationListener(sub_3);    sub_2.addTestElement(new TestSampler("seven"));    controller.addTestElement(sub_2);    String[] interleaveOrder = new String[] { "one", "two" };    String[] order = new String[] { "", "", "three", "four", "five", "six", "seven", "four", "seven", "four", "seven" };    int counter = 11;    controller.setRunningVersion(true);    sub_1.setRunningVersion(true);    sub_2.setRunningVersion(true);    sub_3.setRunningVersion(true);    controller.initialize();    for (int i = 0; i < 4; i++) {        assertEquals(11, counter);        counter = 0;        if (i > 0) {            counter = 2;        }        TestElement sampler = null;        while ((sampler = controller.next()) != null) {            if (i == 0 && counter < 2) {                assertEquals(interleaveOrder[counter], sampler.getName());            } else {                assertEquals(order[counter], sampler.getName());            }            counter++;        }    }}
0
public void testInOuterLoop() throws Exception
{        LoopController controller = new LoopController();    final int outerLoopCount = 4;    controller.setLoops(outerLoopCount);        OnceOnlyController sub_1 = new OnceOnlyController();    sub_1.addTestElement(new TestSampler("one"));    sub_1.addTestElement(new TestSampler("two"));    controller.addTestElement(sub_1);    controller.addIterationListener(sub_1);        controller.addTestElement(new TestSampler("three"));        LoopController sub_2 = new LoopController();    final int innerLoopCount = 3;    sub_2.setLoops(innerLoopCount);    GenericController sub_3 = new GenericController();    sub_2.addTestElement(new TestSampler("four"));    sub_3.addTestElement(new TestSampler("five"));    sub_3.addTestElement(new TestSampler("six"));    sub_2.addTestElement(sub_3);        sub_2.addTestElement(new TestSampler("seven"));    controller.addTestElement(sub_2);        String[] onlyOnceOrder = new String[] { "one", "two" };    String[] order = new String[] { "three", "four", "five", "six", "seven", "four", "five", "six", "seven", "four", "five", "six", "seven" };        int expectedNoSamples = 2 + (1 + (3 + 1) * innerLoopCount) * outerLoopCount;    String[] expectedSamples = new String[expectedNoSamples];        System.arraycopy(onlyOnceOrder, 0, expectedSamples, 0, onlyOnceOrder.length);        final int onceOnlySamples = onlyOnceOrder.length;    for (int i = 0; i < order.length * outerLoopCount; i++) {        expectedSamples[onceOnlySamples + i] = order[i % order.length];    }        controller.setRunningVersion(true);    sub_1.setRunningVersion(true);    sub_2.setRunningVersion(true);    sub_3.setRunningVersion(true);    controller.initialize();    int counter = 0;    TestElement sampler = null;    while ((sampler = controller.next()) != null) {        assertEquals(expectedSamples[counter], sampler.getPropertyAsString(TestElement.NAME));        counter++;    }    assertEquals(expectedNoSamples, counter);}
0
public void testInsideInnerLoop() throws Exception
{            LoopController controller = new LoopController();    final int outerLoopCount = 4;    controller.setLoops(outerLoopCount);        OnceOnlyController sub_1 = new OnceOnlyController();    sub_1.addTestElement(new TestSampler("one"));    sub_1.addTestElement(new TestSampler("two"));    controller.addTestElement(sub_1);    controller.addIterationListener(sub_1);        controller.addTestElement(new TestSampler("three"));        LoopController sub_2 = new LoopController();    final int innerLoopCount = 3;    sub_2.setLoops(innerLoopCount);        sub_2.addTestElement(new TestSampler("four"));        OnceOnlyController sub_3 = new OnceOnlyController();    sub_3.addTestElement(new TestSampler("five"));    sub_3.addTestElement(new TestSampler("six"));    sub_2.addTestElement(sub_3);    sub_2.addIterationListener(sub_3);        sub_2.addTestElement(new TestSampler("seven"));    controller.addTestElement(sub_2);        String[] onlyOnceOrder = new String[] { "one", "two" };    String[] order = new String[] { "three", "four", "five", "six", "seven", "four", "seven", "four", "seven" };        int expectedNoSamples = 2 + (1 + 2 + (1 + 1) * innerLoopCount) * outerLoopCount;    String[] expectedSamples = new String[expectedNoSamples];        System.arraycopy(onlyOnceOrder, 0, expectedSamples, 0, onlyOnceOrder.length);        final int onceOnlySamples = onlyOnceOrder.length;    for (int i = 0; i < order.length * outerLoopCount; i++) {        expectedSamples[onceOnlySamples + i] = order[i % order.length];    }        controller.setRunningVersion(true);    sub_1.setRunningVersion(true);    sub_2.setRunningVersion(true);    sub_3.setRunningVersion(true);    controller.initialize();    int counter = 0;    TestElement sampler = null;    while ((sampler = controller.next()) != null) {        assertEquals(expectedSamples[counter], sampler.getPropertyAsString(TestElement.NAME));        counter++;    }    assertEquals(expectedNoSamples, counter);}
0
public void testRandomNoElements()
{    RandomController roc = new RandomController();    roc.initialize();    assertNull(roc.next());}
0
public void testRandomOneElement()
{    RandomController roc = new RandomController();    roc.addTestElement(new TestSampler("zero"));    TestElement sampler = null;    List<String> usedSamplers = new ArrayList<>();    roc.initialize();    while ((sampler = roc.next()) != null) {        String samplerName = sampler.getName();        if (usedSamplers.contains(samplerName)) {            assertTrue("Duplicate sampler returned from next()", false);        }        usedSamplers.add(samplerName);    }    assertEquals(1, usedSamplers.size());}
0
public void testIssue57958() throws Exception
{    JMeterContextService.getContext().setVariables(new JMeterVariables());    TestSampleListener listener = new TestSampleListener();    TransactionController transactionController = new TransactionController();    transactionController.setGenerateParentSample(true);    ResponseAssertion assertion = new ResponseAssertion();    assertion.setTestFieldResponseCode();    assertion.setToEqualsType();    assertion.addTestString("201");    DebugSampler debugSampler = new DebugSampler();    debugSampler.addTestElement(assertion);    LoopController loop = new LoopController();    loop.setLoops(1);    loop.setContinueForever(false);    ListedHashTree hashTree = new ListedHashTree();    hashTree.add(loop);    hashTree.add(loop, transactionController);    hashTree.add(transactionController, debugSampler);    hashTree.add(transactionController, listener);    hashTree.add(debugSampler, assertion);    TestCompiler compiler = new TestCompiler(hashTree);    hashTree.traverse(compiler);    ThreadGroup threadGroup = new ThreadGroup();    threadGroup.setNumThreads(1);    ListenerNotifier notifier = new ListenerNotifier();    JMeterThread thread = new JMeterThread(hashTree, threadGroup, notifier);    thread.setThreadGroup(threadGroup);    thread.setOnErrorStopThread(true);    thread.run();    assertEquals("Must one transaction samples with parent debug sample", 1, listener.events.size());    assertEquals("Number of samples in transaction : 1, number of failing samples : 1", listener.events.get(0).getResult().getResponseMessage());}
0
public void sampleOccurred(SampleEvent e)
{    events.add(e);}
0
public void sampleStarted(SampleEvent e)
{    events.add(e);}
0
public void sampleStopped(SampleEvent e)
{    events.add(e);}
0
public void setUp()
{    jmctx = JMeterContextService.getContext();    jmctx.setVariables(new JMeterVariables());    jmvars = jmctx.getVariables();}
0
private void setLastSampleStatus(boolean status)
{    jmvars.put(JMeterThread.LAST_SAMPLE_OK, Boolean.toString(status));}
0
private void setRunning(TestElement el)
{    PropertyIterator pi = el.propertyIterator();    while (pi.hasNext()) {        pi.next().setRunningVersion(true);    }}
0
private String nextName(GenericController c)
{    Sampler s = c.next();    if (s == null) {        return null;    }    return s.getName();}
0
public void testBlankPrevOK() throws Exception
{    runtestPrevOK("");}
0
public void testLastPrevOK() throws Exception
{    runtestPrevOK("LAST");}
0
public void testOtherPrevOK() throws Exception
{    runtestPrevOK(OTHER);}
0
private void runtestPrevOK(String type) throws Exception
{    GenericController controller = new GenericController();    WhileController while_cont = new WhileController();    setLastSampleStatus(true);    while_cont.setCondition(type);    while_cont.addTestElement(new TestSampler("one"));    while_cont.addTestElement(new TestSampler("two"));    while_cont.addTestElement(new TestSampler("three"));    controller.addTestElement(while_cont);    controller.addTestElement(new TestSampler("four"));    controller.initialize();    assertEquals("one", nextName(controller));    assertEquals("two", nextName(controller));    assertEquals("three", nextName(controller));    assertEquals("one", nextName(controller));    assertEquals("two", nextName(controller));    assertEquals("three", nextName(controller));    assertEquals("one", nextName(controller));    setLastSampleStatus(false);    if (type.equals(OTHER)) {        while_cont.setCondition("false");    }    assertEquals("two", nextName(controller));    assertEquals("three", nextName(controller));    setLastSampleStatus(true);    if (type.equals(OTHER)) {        while_cont.setCondition(OTHER);    }    assertEquals("one", nextName(controller));    assertEquals("two", nextName(controller));    assertEquals("three", nextName(controller));    setLastSampleStatus(false);    if (type.equals(OTHER)) {        while_cont.setCondition("false");    }    assertEquals("four", nextName(controller));    assertNull(nextName(controller));    setLastSampleStatus(true);    if (type.equals(OTHER)) {        while_cont.setCondition(OTHER);    }    assertEquals("one", nextName(controller));}
0
public void testBlankPrevFailed() throws Exception
{    GenericController controller = new GenericController();    controller.setRunningVersion(true);    WhileController while_cont = new WhileController();    setLastSampleStatus(false);    while_cont.setCondition("");    while_cont.addTestElement(new TestSampler("one"));    while_cont.addTestElement(new TestSampler("two"));    controller.addTestElement(while_cont);    controller.addTestElement(new TestSampler("three"));    controller.initialize();    assertEquals("one", nextName(controller));    assertEquals("two", nextName(controller));    assertEquals("three", nextName(controller));    assertNull(nextName(controller));        assertEquals("one", nextName(controller));    assertEquals("two", nextName(controller));    assertEquals("three", nextName(controller));    assertNull(nextName(controller));}
0
public void testVariable1() throws Exception
{    GenericController controller = new GenericController();    WhileController while_cont = new WhileController();    setLastSampleStatus(false);    while_cont.setCondition("${VAR}");    jmvars.put("VAR", "");    ValueReplacer vr = new ValueReplacer();    vr.replaceValues(while_cont);    setRunning(while_cont);    controller.addTestElement(new TestSampler("before"));    controller.addTestElement(while_cont);    while_cont.addTestElement(new TestSampler("one"));    while_cont.addTestElement(new TestSampler("two"));    GenericController simple = new GenericController();    while_cont.addTestElement(simple);    simple.addTestElement(new TestSampler("three"));    simple.addTestElement(new TestSampler("four"));    controller.addTestElement(new TestSampler("after"));    controller.initialize();    for (int i = 1; i <= 3; i++) {        assertEquals("Loop: " + i, "before", nextName(controller));        assertEquals("Loop: " + i, "one", nextName(controller));        assertEquals("Loop: " + i, "two", nextName(controller));        assertEquals("Loop: " + i, "three", nextName(controller));        assertEquals("Loop: " + i, "four", nextName(controller));        assertEquals("Loop: " + i, "after", nextName(controller));        assertNull("Loop: " + i, nextName(controller));    }        jmvars.put("VAR", "LAST");    for (int i = 1; i <= 3; i++) {        assertEquals("Loop: " + i, "before", nextName(controller));        assertEquals("Loop: " + i, "after", nextName(controller));        assertNull("Loop: " + i, nextName(controller));    }    jmvars.put("VAR", "");    for (int i = 1; i <= 3; i++) {        assertEquals("Loop: " + i, "before", nextName(controller));        if (i == 1) {            assertEquals("Loop: " + i, "one", nextName(controller));            assertEquals("Loop: " + i, "two", nextName(controller));            assertEquals("Loop: " + i, "three", nextName(controller));                        jmvars.put("VAR", "LAST");            assertEquals("Loop: " + i, "four", nextName(controller));        }        assertEquals("Loop: " + i, "after", nextName(controller));        assertNull("Loop: " + i, nextName(controller));    }}
0
public void testVariable2() throws Exception
{    GenericController controller = new GenericController();    WhileController while_cont = new WhileController();    setLastSampleStatus(false);    while_cont.setCondition("${VAR}");    jmvars.put("VAR", "");    ValueReplacer vr = new ValueReplacer();    vr.replaceValues(while_cont);    setRunning(while_cont);    controller.addTestElement(new TestSampler("before"));    controller.addTestElement(while_cont);    GenericController simple = new GenericController();    while_cont.addTestElement(simple);    simple.addTestElement(new TestSampler("one"));    simple.addTestElement(new TestSampler("two"));    while_cont.addTestElement(new TestSampler("three"));    while_cont.addTestElement(new TestSampler("four"));    controller.addTestElement(new TestSampler("after"));    controller.initialize();    for (int i = 1; i <= 3; i++) {        assertEquals("Loop: " + i, "before", nextName(controller));        assertEquals("Loop: " + i, "one", nextName(controller));        assertEquals("Loop: " + i, "two", nextName(controller));        assertEquals("Loop: " + i, "three", nextName(controller));        assertEquals("Loop: " + i, "four", nextName(controller));        assertEquals("Loop: " + i, "after", nextName(controller));        assertNull("Loop: " + i, nextName(controller));    }        jmvars.put("VAR", "LAST");    for (int i = 1; i <= 3; i++) {        assertEquals("Loop: " + i, "before", nextName(controller));        assertEquals("Loop: " + i, "after", nextName(controller));        assertNull("Loop: " + i, nextName(controller));    }    jmvars.put("VAR", "");    for (int i = 1; i <= 3; i++) {        assertEquals("Loop: " + i, "before", nextName(controller));        if (i == 1) {            assertEquals("Loop: " + i, "one", nextName(controller));            assertEquals("Loop: " + i, "two", nextName(controller));                        jmvars.put("VAR", "LAST");                        assertEquals("Loop: " + i, "three", nextName(controller));            assertEquals("Loop: " + i, "four", nextName(controller));        }        assertEquals("Loop: " + i, "after", nextName(controller));        assertNull("Loop: " + i, nextName(controller));    }}
0
public void testLASTPrevFailed() throws Exception
{    runTestPrevFailed("LAST");}
0
public void testfalsePrevFailed() throws Exception
{    runTestPrevFailed("False");}
0
private void runTestPrevFailed(String s) throws Exception
{    GenericController controller = new GenericController();    WhileController while_cont = new WhileController();    setLastSampleStatus(false);    while_cont.setCondition(s);    while_cont.addTestElement(new TestSampler("one"));    while_cont.addTestElement(new TestSampler("two"));    controller.addTestElement(while_cont);    controller.addTestElement(new TestSampler("three"));    controller.initialize();    assertEquals("three", nextName(controller));    assertNull(nextName(controller));    assertEquals("three", nextName(controller));    assertNull(nextName(controller));}
0
public void testLastFailedBlank() throws Exception
{    runTestLastFailed("");}
0
public void testLastFailedLast() throws Exception
{    runTestLastFailed("LAST");}
0
private void runTestLastFailed(String s) throws Exception
{    GenericController controller = new GenericController();    controller.addTestElement(new TestSampler("1"));    WhileController while_cont = new WhileController();    controller.addTestElement(while_cont);    while_cont.setCondition(s);    GenericController sub = new GenericController();    while_cont.addTestElement(sub);    sub.addTestElement(new TestSampler("2"));    sub.addTestElement(new TestSampler("3"));    controller.addTestElement(new TestSampler("4"));    setLastSampleStatus(true);    controller.initialize();    assertEquals("1", nextName(controller));    assertEquals("2", nextName(controller));    setLastSampleStatus(false);    assertEquals("3", nextName(controller));    assertEquals("4", nextName(controller));    assertNull(nextName(controller));}
0
public void testAlwaysFailOK() throws Exception
{        runTestAlwaysFail(true);}
0
public void testAlwaysFailBAD() throws Exception
{    runTestAlwaysFail(false);}
0
private void runTestAlwaysFail(boolean other)
{    LoopController controller = new LoopController();    controller.setContinueForever(true);    controller.setLoops(-1);    WhileController while_cont = new WhileController();    setLastSampleStatus(false);    while_cont.setCondition("false");    while_cont.addTestElement(new TestSampler("one"));    while_cont.addTestElement(new TestSampler("two"));    controller.addTestElement(while_cont);    if (other) {        controller.addTestElement(new TestSampler("three"));    }    controller.initialize();    try {        if (other) {            assertEquals("three", nextName(controller));        } else {            assertNull(nextName(controller));        }    } catch (StackOverflowError e) {        fail(e.toString());    }}
0
private static JMESPathExtractor setupProcessor(JMeterVariables vars, SampleResult sampleResult, String data, boolean isSourceVars, String matchNumbers)
{    JMeterContext jmctx = JMeterContextService.getContext();    jmctx.setVariables(vars);    jmctx.setPreviousResult(sampleResult);    JMESPathExtractor processor = new JMESPathExtractor();    processor.setThreadContext(jmctx);    processor.setRefName(REFERENCE_NAME);    processor.setMatchNumber(matchNumbers);    processor.setDefaultValue(DEFAULT_VALUE);    if (isSourceVars) {        vars.put("contentvar", data);        processor.setScopeVariable("contentvar");    } else {        sampleResult.setResponseData(data, null);        processor.setScopeAll();    }    return processor;}
0
public static Collection<String[]> data()
{    return Arrays.asList(new String[][] { { "[\"one\"]", "[*]", "one", "1" }, { "{\"a\": {\"b\": {\"c\": {\"d\": \"value\"}}}}", "a.b.c.d", "value", "1" }, { "{\r\n" + "  \"people\": [\r\n" + "    {\"first\": \"James\", \"last\": \"d\"},\r\n" + "    {\"first\": \"Jacob\", \"last\": \"e\"},\r\n" + "    {\"first\": \"Jayden\", \"last\": \"f\"},\r\n" + "    {\"missing\": \"different\"}\r\n" + "  ],\r\n" + "  \"foo\": {\"bar\": \"baz\"}\r\n" + "}", "people[2]", "{\"first\":\"Jayden\",\"last\":\"f\"}", "1" } });}
0
public void testFromVars()
{    test(true);}
0
public void testFromSampleResult()
{    test(false);}
0
public void test(boolean fromVars)
{    JMeterVariables vars = new JMeterVariables();    SampleResult sampleResult = new SampleResult();    JMESPathExtractor processor = setupProcessor(vars, sampleResult, data, fromVars, "-1");    processor.setJmesPathExpression(jmesPath);    processor.process();    assertThat(vars.get(REFERENCE_NAME), CoreMatchers.is(CoreMatchers.nullValue()));    assertThat(vars.get(REFERENCE_NAME + "_1"), CoreMatchers.is(expectedResult));    assertThat(vars.get(REFERENCE_NAME_MATCH_NUMBER), CoreMatchers.is(expectedMatchNumber));    processor.clearOldRefVars(vars, REFERENCE_NAME);    assertThat(vars.get(REFERENCE_NAME + "_1"), CoreMatchers.is(CoreMatchers.nullValue()));    assertThat(vars.get(REFERENCE_NAME_MATCH_NUMBER), CoreMatchers.is(CoreMatchers.nullValue()));}
0
public static Collection<Object[]> data()
{    return Arrays.asList(new Object[][] { { "[\"one\", \"two\"]", "[*]", new String[] { "one", "two" }, "2" }, { "[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]", "[0:3]", new String[] { "a", "b", "c" }, "3" }, { "{\r\n" + "  \"people\": [\r\n" + "    {\"first\": \"James\", \"last\": \"d\"},\r\n" + "    {\"first\": \"Jacob\", \"last\": \"e\"},\r\n" + "    {\"first\": \"Jayden\", \"last\": \"f\"},\r\n" + "    {\"missing\": \"different\"}\r\n" + "  ],\r\n" + "  \"foo\": {\"bar\": \"baz\"}\r\n" + "}", "people[:2].first", new String[] { "James", "Jacob" }, "2" } });}
0
public void testFromVars()
{    test(true);}
0
public void testFromSampleResult()
{    test(false);}
0
public void test(boolean fromVars)
{    SampleResult sampleResult = new SampleResult();    JMeterVariables vars = new JMeterVariables();    JMESPathExtractor processor = setupProcessor(vars, sampleResult, data, fromVars, "-1");        processor.setJmesPathExpression(jmesPath);    processor.process();    assertThat(vars.get(REFERENCE_NAME), CoreMatchers.is(CoreMatchers.nullValue()));    for (int i = 0; i < expectedResults.length; i++) {        assertThat(vars.get(REFERENCE_NAME + "_" + (i + 1)), CoreMatchers.is(expectedResults[i]));    }    assertThat(vars.get(REFERENCE_NAME_MATCH_NUMBER), CoreMatchers.is(expectedMatchNumber));}
0
public static Collection<String[]> data()
{    return Arrays.asList(new String[][] { { TEST_DATA, "people[:3].first", "1", "James", "3" }, { TEST_DATA, "people[:3].first", "2", "Jacob", "3" }, { TEST_DATA, "people[:3].first", "3", "Jayden", "3" }, { TEST_DATA, "people[:3].age", "3", "30", "3" }, { TEST_DATA, "people[:3].first", "4", DEFAULT_VALUE, "3" } });}
0
public void testFromVars()
{    test(true);}
0
public void testFromSampleResult()
{    test(false);}
0
public void test(boolean fromVars)
{    SampleResult sampleResult = new SampleResult();    JMeterVariables vars = new JMeterVariables();    JMESPathExtractor processor = setupProcessor(vars, sampleResult, data, fromVars, "1");    processor.setMatchNumber(matchNumber);    processor.setJmesPathExpression(jmesPath);    processor.process();    assertThat(vars.get(REFERENCE_NAME), CoreMatchers.is(expectedResult));    assertThat(vars.get(REFERENCE_NAME_MATCH_NUMBER), CoreMatchers.is(expectedMatchNumber));}
0
public static Collection<Boolean> data()
{    return Arrays.asList(new Boolean[] { Boolean.TRUE, Boolean.FALSE });}
0
public void testRandomElementOneMatch()
{    SampleResult sampleResult = new SampleResult();    JMeterVariables vars = new JMeterVariables();    JMESPathExtractor processor = setupProcessor(vars, sampleResult, "{\"a\": {\"b\": {\"c\": {\"d\": \"value\"}}}}", fromVariables, "0");    processor.setJmesPathExpression("a.b.c.d");    processor.process();    assertThat(vars.get(REFERENCE_NAME), CoreMatchers.is("value"));    assertThat(vars.get(REFERENCE_NAME + "_1"), CoreMatchers.is(CoreMatchers.nullValue()));    assertThat(vars.get(REFERENCE_NAME_MATCH_NUMBER), CoreMatchers.is("1"));}
0
public void testRandomElementMultipleMatches()
{    SampleResult sampleResult = new SampleResult();    JMeterVariables vars = new JMeterVariables();    JMESPathExtractor processor = setupProcessor(vars, sampleResult, "[\"one\", \"two\"]", fromVariables, "0");    processor.setJmesPathExpression("[*]");    processor.process();    assertThat(vars.get(REFERENCE_NAME), CoreMatchers.is(CoreMatchers.anyOf(CoreMatchers.is("one"), CoreMatchers.is("two"))));    assertThat(vars.get(REFERENCE_NAME + "_1"), CoreMatchers.is(CoreMatchers.nullValue()));    assertThat(vars.get(REFERENCE_NAME + "_2"), CoreMatchers.is(CoreMatchers.nullValue()));    assertThat(vars.get(REFERENCE_NAME_MATCH_NUMBER), CoreMatchers.is("2"));}
0
public void testEmptySourceData()
{    SampleResult sampleResult = new SampleResult();    JMeterVariables vars = new JMeterVariables();    JMESPathExtractor processor = setupProcessor(vars, sampleResult, "", fromVariables, "-1");    processor.setJmesPathExpression("[*]");    processor.process();    assertThat(vars.get(REFERENCE_NAME), CoreMatchers.is(DEFAULT_VALUE));    assertThat(vars.get(REFERENCE_NAME_MATCH_NUMBER), CoreMatchers.is(CoreMatchers.nullValue()));}
0
public void testErrorInJMESPath()
{    SampleResult sampleResult = new SampleResult();    JMeterVariables vars = new JMeterVariables();    JMESPathExtractor processor = setupProcessor(vars, sampleResult, "{\"a\": {\"b\": {\"c\": {\"d\": \"value\"}}}}", fromVariables, "-1");    processor.setJmesPathExpression("$.k");    processor.process();    assertThat(vars.get(REFERENCE_NAME), CoreMatchers.is(DEFAULT_VALUE));    assertThat(vars.get(REFERENCE_NAME + "_1"), CoreMatchers.nullValue());    assertThat(vars.get(REFERENCE_NAME_MATCH_NUMBER), CoreMatchers.nullValue());}
0
public void testNoMatch()
{    SampleResult sampleResult = new SampleResult();    JMeterVariables vars = new JMeterVariables();    JMESPathExtractor processor = setupProcessor(vars, sampleResult, "{\"a\": {\"b\": {\"c\": {\"d\": \"value\"}}}}", fromVariables, "-1");    processor.setJmesPathExpression("a.b.c.f");    processor.process();    assertThat(vars.get(REFERENCE_NAME), CoreMatchers.is(DEFAULT_VALUE));    assertThat(vars.get(REFERENCE_NAME + "_1"), CoreMatchers.nullValue());    assertThat(vars.get(REFERENCE_NAME_MATCH_NUMBER), CoreMatchers.is("0"));}
0
public void setUpJodd()
{    extractor.setExtractor(HtmlExtractor.EXTRACTOR_JODD);    jmctx = JMeterContextService.getContext();}
0
public void setUp()
{    jmctx = JMeterContextService.getContext();    extractor = new HtmlExtractor();        extractor.setThreadContext(jmctx);        extractor.setRefName("regVal");    result = new SampleResult();    String data = "<p>An <a href='http://example.com/'><b>example1</b></a> link.</p>" + "<p>A second <a class='myclass' href='http://example2.com/'><b>example2</b></a> link.</p>" + "<p class='single'>Single</p>";    result.setResponseData(data, null);    result.setResponseCode("200");    vars = new JMeterVariables();    jmctx.setVariables(vars);    jmctx.setPreviousResult(result);}
0
public void testProcessAllElementsSingleMatch()
{    vars.put("content", "<p><a href='http://jmeter.apache.org/'>Link1</a>" + "<a class='mylink' href='http://jmeter.apache.org/'>Link2</a></p>");    extractor.setMatchNumber(-1);    extractor.setRefName("varname");    extractor.setExpression("a.mylink");    extractor.setAttribute("href");    extractor.setScopeVariable("content");    extractor.setThreadContext(jmctx);    extractor.process();    assertThat(vars.get("varname"), CoreMatchers.is(CoreMatchers.nullValue()));    assertThat(vars.get("varname_1"), CoreMatchers.is("http://jmeter.apache.org/"));    assertThat(vars.get("varname_matchNr"), CoreMatchers.is("1"));}
0
public void testProcessAllElementsMultipleMatches()
{    vars.put("content", "<p><a href='http://www.apache.org/'>Link1</a>" + "<a class='mylink' href='http://jmeter.apache.org/'>Link2</a></p>");    extractor.setMatchNumber(-1);    extractor.setRefName("varname");    extractor.setExpression("a");    extractor.setAttribute("href");    extractor.setScopeVariable("content");    extractor.setThreadContext(jmctx);    extractor.process();    assertThat(vars.get("varname"), CoreMatchers.is(CoreMatchers.nullValue()));    assertThat(vars.get("varname_1"), CoreMatchers.is("http://www.apache.org/"));    assertThat(vars.get("varname_2"), CoreMatchers.is("http://jmeter.apache.org/"));    assertThat(vars.get("varname_matchNr"), CoreMatchers.is("2"));}
0
public void testEmptyDefaultVariable() throws Exception
{    extractor.setExpression("p.missing");    extractor.setMatchNumber(1);    extractor.setDefaultEmptyValue(true);    extractor.process();    assertEquals("", vars.get("regVal"));}
0
public void testNotEmptyDefaultVariable() throws Exception
{    extractor.setExpression("p.missing");    extractor.setMatchNumber(1);    extractor.setDefaultEmptyValue(false);    extractor.process();    assertNull(vars.get("regVal"));}
0
public void testNotEmptyDefaultValue() throws Exception
{    extractor.setExpression("p.missing");    extractor.setMatchNumber(1);    extractor.setDefaultEmptyValue(false);    extractor.setDefaultValue("nv_value");    extractor.process();    assertEquals("nv_value", vars.get("regVal"));}
0
public void testVariableExtraction0() throws Exception
{    extractor.setExpression("p.single");    extractor.setMatchNumber(0);    extractor.process();    assertEquals("Single", vars.get("regVal"));}
0
public void testVariableExtraction2() throws Exception
{    extractor.setExpression("a");    extractor.setMatchNumber(2);    extractor.process();    assertEquals("example2", vars.get("regVal"));}
0
public void testVariableExtractionWithAttribute2() throws Exception
{    extractor.setExpression("a");    extractor.setAttribute("href");    extractor.setMatchNumber(2);    extractor.process();    assertEquals("http://example2.com/", vars.get("regVal"));}
0
public void testMultipleVariableExtraction() throws Exception
{    extractor.setExpression("a");    extractor.setAttribute("href");    extractor.setMatchNumber(-1);    extractor.process();    assertThat(vars.get("regVal_matchNr"), CoreMatchers.is("2"));    assertEquals("http://example.com/", vars.get("regVal_1"));    assertEquals("http://example2.com/", vars.get("regVal_2"));}
0
public void testMultipleVariableExtractionWithAttribute() throws Exception
{    extractor.setExpression("b");    extractor.setMatchNumber(-1);    extractor.process();    assertThat(vars.get("regVal_matchNr"), CoreMatchers.is("2"));    assertEquals("example1", vars.get("regVal_1"));    assertEquals("example2", vars.get("regVal_2"));}
0
public void testMultipleVariableExtractionNoMatch() throws Exception
{    extractor.setExpression("c");    extractor.setMatchNumber(-1);    extractor.process();    assertThat(vars.get("regVal_matchNr"), CoreMatchers.is("0"));    assertNull(vars.get("regVal"));    assertNull(vars.get("regVal_1"));}
0
public void testPreviousVarsAreCleanedUp() throws Exception
{    testMultipleVariableExtractionWithAttribute();    testMultipleVariableExtractionNoMatch();    assertNull(vars.get("regVal_2"));}
0
public void testUnknownExtractor() throws Exception
{    extractor.setExtractor("UNKNOWN");    extractor.setExpression("c");    extractor.setMatchNumber(-1);    extractor.process();    assertNull(vars.get("regVal_matchNr"));}
0
public void testNoPrevious() throws Exception
{    jmctx.setPreviousResult(null);    extractor.setExpression("b");    extractor.setMatchNumber(-1);    extractor.process();    assertNull(vars.get("regVal_matchNr"));}
0
public void testProcessAllElementsOneMatch()
{    JMeterContext context = JMeterContextService.getContext();    JSONPostProcessor processor = setupProcessor(context, "-1", true);    JMeterVariables vars = new JMeterVariables();    processor.setDefaultValues("NONE");    processor.setJsonPathExpressions("$[*]");    processor.setRefNames("varname");    processor.setScopeVariable("contentvar");    context.setVariables(vars);    vars.put("contentvar", "[\"one\"]");    processor.process();    assertThat(vars.get("varname"), CoreMatchers.is(CoreMatchers.nullValue()));    assertThat(vars.get("varname_1"), CoreMatchers.is("one"));    assertThat(vars.get("varname_matchNr"), CoreMatchers.is("1"));}
0
public void testProcessAllElementsMultipleMatches()
{    JMeterContext context = JMeterContextService.getContext();    JSONPostProcessor processor = setupProcessor(context, "-1", true);    JMeterVariables vars = new JMeterVariables();    processor.setDefaultValues("NONE");    processor.setJsonPathExpressions("$[*]");    processor.setRefNames("varname");    processor.setScopeVariable("contentvar");    context.setVariables(vars);    vars.put("contentvar", "[\"one\", \"two\"]");    processor.process();    assertThat(vars.get("varname_1"), CoreMatchers.is("one"));    assertThat(vars.get("varname_2"), CoreMatchers.is("two"));    assertThat(vars.get("varname_matchNr"), CoreMatchers.is("2"));}
0
public void testProcessRandomElementMultipleMatches()
{    JMeterContext context = JMeterContextService.getContext();    JSONPostProcessor processor = setupProcessor(context, "0", true);    JMeterVariables vars = new JMeterVariables();    processor.setDefaultValues("NONE");    processor.setJsonPathExpressions("$[*]");    processor.setRefNames("varname");    processor.setScopeVariable("contentvar");    context.setVariables(vars);    vars.put("contentvar", "[\"one\", \"two\"]");    processor.process();    assertThat(vars.get("varname"), CoreMatchers.is(CoreMatchers.anyOf(CoreMatchers.is("one"), CoreMatchers.is("two"))));    assertThat(vars.get("varname_1"), CoreMatchers.is(CoreMatchers.nullValue()));    assertThat(vars.get("varname_2"), CoreMatchers.is(CoreMatchers.nullValue()));    assertThat(vars.get("varname_matchNr"), CoreMatchers.is(CoreMatchers.nullValue()));}
0
public void testPR235CaseEmptyResponse()
{    JMeterContext context = JMeterContextService.getContext();    JSONPostProcessor processor = setupProcessor(context, "-1", true);    JMeterVariables vars = new JMeterVariables();    processor.setDefaultValues("NONE");    processor.setJsonPathExpressions("$[*]");    processor.setRefNames("varname");    processor.setScopeVariable("contentvar");    context.setVariables(vars);    vars.put("contentvar", "[\"one\", \"two\"]");    processor.process();    assertThat(vars.get("varname_1"), CoreMatchers.is("one"));    assertThat(vars.get("varname_2"), CoreMatchers.is("two"));    assertThat(vars.get("varname_matchNr"), CoreMatchers.is("2"));    vars.put("contentvar", "");    processor.process();    assertThat(vars.get("varname_matchNr"), CoreMatchers.is(CoreMatchers.nullValue()));    assertThat(vars.get("varname_1"), CoreMatchers.is(CoreMatchers.nullValue()));    assertThat(vars.get("varname_2"), CoreMatchers.is(CoreMatchers.nullValue()));}
0
public void testCaseEmptyVarBug62860()
{    JMeterContext context = JMeterContextService.getContext();    JSONPostProcessor processor = setupProcessor(context, "0", false);    JMeterVariables vars = new JMeterVariables();    processor.setDefaultValues("NONE");    processor.setJsonPathExpressions("$[*]");    processor.setRefNames("varname");    processor.setScopeVariable("contentvar");    context.setVariables(vars);    vars.remove("contentvar");    processor.process();    assertThat(vars.get("varname"), CoreMatchers.is("NONE"));    assertThat(vars.get("varname_matchNr"), CoreMatchers.is(CoreMatchers.nullValue()));    vars.put("contentvar", "");    processor.process();    assertThat(vars.get("varname"), CoreMatchers.is("NONE"));    assertThat(vars.get("varname_matchNr"), CoreMatchers.is(CoreMatchers.nullValue()));}
0
public void testPR235CaseMatchOneWithZero()
{    JMeterContext context = JMeterContextService.getContext();    JSONPostProcessor processor = setupProcessor(context, "-1", true);    JMeterVariables vars = new JMeterVariables();    processor.setDefaultValues("NONE");    processor.setJsonPathExpressions("$[*]");    processor.setRefNames("varname");    processor.setScopeVariable("contentvar");    context.setVariables(vars);    vars.put("contentvar", "[\"one\", \"two\"]");    processor.process();    assertThat(vars.get("varname_1"), CoreMatchers.is("one"));    assertThat(vars.get("varname_2"), CoreMatchers.is("two"));    assertThat(vars.get("varname_matchNr"), CoreMatchers.is("2"));    vars.put("contentvar", "[\"A\", \"B\"]");    processor.setMatchNumbers("0");    processor.process();    assertThat(vars.get("varname"), CoreMatchers.is(CoreMatchers.anyOf(CoreMatchers.is("A"), CoreMatchers.is("B"))));    assertThat(vars.get("varname_matchNr"), CoreMatchers.is(CoreMatchers.nullValue()));    assertThat(vars.get("varname_1"), CoreMatchers.is(CoreMatchers.nullValue()));    assertThat(vars.get("varname_2"), CoreMatchers.is(CoreMatchers.nullValue()));}
0
public void testBug59609() throws ParseException
{    JMeterContext context = JMeterContextService.getContext();    JSONPostProcessor processor = setupProcessor(context, "0", false);    String innerValue = "{\"a\":\"one\",\"b\":\"two\"}";    String data = "{\"context\":" + innerValue + "}";    SampleResult result = new SampleResult();    result.setResponseData(data.getBytes(StandardCharsets.UTF_8));    JMeterVariables vars = new JMeterVariables();    context.setVariables(vars);    context.setPreviousResult(result);    processor.setJsonPathExpressions("$.context");    processor.process();    JSONParser parser = new JSONParser(0);    Object expectedValue = parser.parse(innerValue);    assertThat(parser.parse(vars.get(VAR_NAME)), CoreMatchers.is(expectedValue));    assertThat(vars.get(VAR_NAME + "_matchNr"), CoreMatchers.is(CoreMatchers.nullValue()));    assertThat(vars.get(VAR_NAME + "_1"), CoreMatchers.is(CoreMatchers.nullValue()));}
0
public void testExtractSimpleArrayElements()
{    JMeterContext context = JMeterContextService.getContext();    JSONPostProcessor processor = setupProcessor(context, "-1");    String data = "[1,2,3]";    SampleResult result = new SampleResult();    result.setResponseData(data.getBytes(StandardCharsets.UTF_8));    JMeterVariables vars = new JMeterVariables();    context.setVariables(vars);    context.setPreviousResult(result);    processor.setJsonPathExpressions("$[*]");    processor.process();    Assert.assertEquals("1,2,3", vars.get(VAR_NAME + "_ALL"));    for (int i = 1; i <= 3; i++) {        String v = Integer.toString(i);        Assert.assertEquals(v, vars.get(VAR_NAME + "_" + v));    }    Assert.assertEquals("3", vars.get(VAR_NAME + "_matchNr"));}
0
public void testExtractComplexElements()
{    JMeterContext context = JMeterContextService.getContext();    JSONPostProcessor processor = setupProcessor(context, "-1");    String data = "[{\"a\":[1,{\"d\":2},3]},[\"b\",{\"h\":23}],3]";    SampleResult result = new SampleResult();    result.setResponseData(data.getBytes(StandardCharsets.UTF_8));    JMeterVariables vars = new JMeterVariables();    context.setVariables(vars);    context.setPreviousResult(result);    processor.setJsonPathExpressions("$[*]");    processor.process();    String jsonWithoutOuterParens = data.substring(1, data.length() - 1);    Assert.assertEquals(jsonWithoutOuterParens, vars.get(VAR_NAME + "_ALL"));    Assert.assertEquals("{\"a\":[1,{\"d\":2},3]}", vars.get(VAR_NAME + "_1"));    Assert.assertEquals("[\"b\",{\"h\":23}]", vars.get(VAR_NAME + "_2"));    Assert.assertEquals("3", vars.get(VAR_NAME + "_3"));    Assert.assertEquals("3", vars.get(VAR_NAME + "_matchNr"));}
0
private JSONPostProcessor setupProcessor(JMeterContext context, String matchNumbers)
{    return setupProcessor(context, matchNumbers, true);}
0
private JSONPostProcessor setupProcessor(JMeterContext context, String matchNumbers, boolean computeConcatenation)
{    JSONPostProcessor processor = new JSONPostProcessor();    processor.setThreadContext(context);    processor.setRefNames(VAR_NAME);    processor.setMatchNumbers(matchNumbers);    processor.setComputeConcatenation(computeConcatenation);    return processor;}
0
public void setUp()
{    jmctx = JMeterContextService.getContext();    extractor = new RegexExtractor();        extractor.setThreadContext(jmctx);    extractor.setRefName("regVal");    result = new SampleResult();    String data = "<company-xmlext-query-ret><row><value field=\"RetCode\">LIS_OK</value>\n" + "<value field=\"RetCodeExtension\"></value><value field=\"alias\"></value>\n" + "<value field=\"positioncount\"></value><value field=\"invalidpincount\">0</value>\n" + "<value field=\"pinposition1\">1</value><value field=\"pinpositionvalue1\"></value>\n" + "<value field=\"pinposition2\">5</value><value field=\"pinpositionvalue2\"></value>\n" + "<value field=\"pinposition3\">6</value><value field=\"pinpositionvalue3\"></value>\n" + "</row></company-xmlext-query-ret>";    result.setResponseData(data, null);    result.setResponseHeaders("Header1: Value1\nHeader2: Value2");    result.setResponseCode("abcd");    result.setResponseMessage("The quick brown fox");    vars = new JMeterVariables();    jmctx.setVariables(vars);    jmctx.setPreviousResult(result);}
0
public void testProcessAllElementsSingleMatch()
{    vars.put("content", "one");    extractor.setMatchNumber(-1);    extractor.setRefName("varname");    extractor.setRegex("(\\w+)");    extractor.setScopeVariable("content");    extractor.setThreadContext(jmctx);    extractor.setTemplate("$1$");    extractor.process();    assertThat(vars.get("varname"), CoreMatchers.is(CoreMatchers.nullValue()));    assertThat(vars.get("varname_1"), CoreMatchers.is("one"));    assertThat(vars.get("varname_matchNr"), CoreMatchers.is("1"));}
0
public void testProcessAllElementsMultipleMatches()
{    vars.put("content", "one, two");    extractor.setMatchNumber(-1);    extractor.setRefName("varname");    extractor.setRegex("(\\w+)");    extractor.setScopeVariable("content");    extractor.setThreadContext(jmctx);    extractor.setTemplate("$1$");    extractor.process();    assertThat(vars.get("varname"), CoreMatchers.is(CoreMatchers.nullValue()));    assertThat(vars.get("varname_1"), CoreMatchers.is("one"));    assertThat(vars.get("varname_2"), CoreMatchers.is("two"));    assertThat(vars.get("varname_matchNr"), CoreMatchers.is("2"));}
0
public void testEmptyDefaultVariable()
{    extractor.setRegex("<value name=\"positioncount\">(.+?)</value>");    extractor.setTemplate("$1$");    extractor.setMatchNumber(1);    extractor.setDefaultEmptyValue(true);    extractor.process();    assertEquals("", vars.get("regVal"));}
0
public void testNotEmptyDefaultVariable()
{    extractor.setRegex("<value name=\"positioncount\">(.+?)</value>");    extractor.setTemplate("$1$");    extractor.setMatchNumber(1);    extractor.setDefaultEmptyValue(false);    extractor.process();    assertNull(vars.get("regVal"));}
0
public void testVariableExtraction0()
{    extractor.setRegex("<(value) field=\"");    extractor.setTemplate("$1$");    extractor.setMatchNumber(0);    extractor.process();    assertEquals("value", vars.get("regVal"));}
0
public void testVariableExtraction()
{    extractor.setRegex("<value field=\"(pinposition\\d+)\">(\\d+)</value>");    extractor.setTemplate("$2$");    extractor.setMatchNumber(2);    extractor.process();    assertEquals("5", vars.get("regVal"));    assertEquals("pinposition2", vars.get("regVal_g1"));    assertEquals("5", vars.get("regVal_g2"));    assertEquals("<value field=\"pinposition2\">5</value>", vars.get("regVal_g0"));    assertNull(vars.get("regVal_g3"));    assertEquals("2", vars.get("regVal_g"));}
0
private static void templateSetup(RegexExtractor rex, String tmp)
{    rex.setRegex("<company-(\\w+?)-(\\w+?)-(\\w+?)>");    rex.setMatchNumber(1);    rex.setTemplate(tmp);    rex.process();}
0
public void testTemplate1()
{    templateSetup(extractor, "");    assertEquals("<company-xmlext-query-ret>", vars.get("regVal_g0"));    assertEquals("xmlext", vars.get("regVal_g1"));    assertEquals("query", vars.get("regVal_g2"));    assertEquals("ret", vars.get("regVal_g3"));    assertEquals("", vars.get("regVal"));    assertEquals("3", vars.get("regVal_g"));}
0
public void testTemplate2()
{    templateSetup(extractor, "ABC");    assertEquals("ABC", vars.get("regVal"));}
0
public void testTemplate3()
{    templateSetup(extractor, "$2$");    assertEquals("query", vars.get("regVal"));}
0
public void testTemplate4()
{    templateSetup(extractor, "PRE$2$");    assertEquals("PREquery", vars.get("regVal"));}
0
public void testTemplate5()
{    templateSetup(extractor, "$2$POST");    assertEquals("queryPOST", vars.get("regVal"));}
0
public void testTemplate6()
{    templateSetup(extractor, "$2$$1$");    assertEquals("queryxmlext", vars.get("regVal"));}
0
public void testTemplate7()
{    templateSetup(extractor, "$2$MID$1$");    assertEquals("queryMIDxmlext", vars.get("regVal"));}
0
public void testVariableExtraction2()
{    extractor.setRegex("<value field=\"(pinposition\\d+)\">(\\d+)</value>");    extractor.setTemplate("$1$");    extractor.setMatchNumber(3);    extractor.process();    assertEquals("pinposition3", vars.get("regVal"));}
0
public void testVariableExtraction6()
{    extractor.setRegex("<value field=\"(pinposition\\d+)\">(\\d+)</value>");    extractor.setTemplate("$2$");    extractor.setMatchNumber(4);    extractor.setDefaultValue("default");    extractor.process();    assertEquals("default", vars.get("regVal"));}
0
public void testVariableExtraction3()
{    extractor.setRegex("<value field=\"(pinposition\\d+)\">(\\d+)</value>");    extractor.setTemplate("_$1$");    extractor.setMatchNumber(2);    extractor.process();    assertEquals("_pinposition2", vars.get("regVal"));}
0
public void testVariableExtraction5()
{    extractor.setRegex("<value field=\"(pinposition\\d+)\">(\\d+)</value>");    extractor.setTemplate("$1$");        extractor.setMatchNumber(1);    extractor.process();    assertNotNull(vars.get("regVal"));    assertEquals("2", vars.get("regVal_g"));    assertNotNull(vars.get("regVal_g0"));    assertNotNull(vars.get("regVal_g1"));    assertNotNull(vars.get("regVal_g2"));    extractor.setMatchNumber(-1);    extractor.process();        assertNotNull(vars.get("regVal"));    assertNull(vars.get("regVal_g"));    assertNull(vars.get("regVal_g1"));    assertNull(vars.get("regVal_g2"));    assertEquals("3", vars.get("regVal_matchNr"));    assertEquals("pinposition1", vars.get("regVal_1"));    assertEquals("pinposition2", vars.get("regVal_2"));    assertEquals("pinposition3", vars.get("regVal_3"));    assertEquals("2", vars.get("regVal_1_g"));    assertEquals("pinposition1", vars.get("regVal_1_g1"));    assertEquals("1", vars.get("regVal_1_g2"));    assertEquals("6", vars.get("regVal_3_g2"));    assertEquals("<value field=\"pinposition1\">1</value>", vars.get("regVal_1_g0"));    assertNull(vars.get("regVal_4"));            extractor.setRegex("(\\w+)count");    extractor.process();    assertEquals("2", vars.get("regVal_matchNr"));    assertEquals("position", vars.get("regVal_1"));    assertEquals("1", vars.get("regVal_1_g"));    assertEquals("position", vars.get("regVal_1_g1"));    assertNull("Unused variables should be null", vars.get("regVal_1_g2"));    assertEquals("invalidpin", vars.get("regVal_2"));    assertEquals("1", vars.get("regVal_2_g"));    assertEquals("invalidpin", vars.get("regVal_2_g1"));    assertNull("Unused variables should be null", vars.get("regVal_2_g2"));    assertEquals("1", vars.get("regVal_1_g"));    assertNull("Unused variables should be null", vars.get("regVal_3"));    assertNull("Unused variables should be null", vars.get("regVal_3_g"));    assertNull("Unused variables should be null", vars.get("regVal_3_g0"));    assertNull("Unused variables should be null", vars.get("regVal_3_g1"));    assertNull("Unused variables should be null", vars.get("regVal_3_g2"));        extractor.setRegex("xxxx(.)(.)");    extractor.process();    assertEquals("0", vars.get("regVal_matchNr"));    assertNull("Unused variables should be null", vars.get("regVal_1"));    assertNull("Unused variables should be null", vars.get("regVal_1_g0"));    assertNull("Unused variables should be null", vars.get("regVal_1_g1"));    assertNull("Unused variables should be null", vars.get("regVal_1_g2"));}
0
public void testVariableExtraction7()
{    extractor.setRegex("Header1: (\\S+)");    extractor.setTemplate("$1$");    extractor.setMatchNumber(1);    assertTrue("useBody should be true", extractor.useBody());    assertFalse("useHdrs should be false", extractor.useHeaders());    assertFalse("useURL should be false", extractor.useUrl());    extractor.setUseField(RegexExtractor.USE_BODY);    assertTrue("useBody should be true", extractor.useBody());    assertFalse("useHdrs should be false", extractor.useHeaders());    assertFalse("useURL should be false", extractor.useUrl());    extractor.setUseField(RegexExtractor.USE_HDRS);    assertTrue("useHdrs should be true", extractor.useHeaders());    assertFalse("useBody should be false", extractor.useBody());    assertFalse("useURL should be false", extractor.useUrl());    extractor.process();    assertEquals("Value1", vars.get("regVal"));    extractor.setUseField(RegexExtractor.USE_URL);    assertFalse("useHdrs should be false", extractor.useHeaders());    assertFalse("useBody should be false", extractor.useBody());    assertTrue("useURL should be true", extractor.useUrl());}
0
public void testVariableExtraction8() throws Exception
{    extractor.setRegex("http://jakarta\\.apache\\.org/(\\w+)");    extractor.setTemplate("$1$");    extractor.setMatchNumber(1);    extractor.setUseField(RegexExtractor.USE_URL);    assertFalse("useHdrs should be false", extractor.useHeaders());    assertFalse("useBody should be false", extractor.useBody());    assertTrue("useURL should be true", extractor.useUrl());    extractor.process();    assertNull(vars.get("regVal"));    result.setURL(new URL("http://jakarta.apache.org/index.html?abcd"));    extractor.process();    assertEquals("index", vars.get("regVal"));}
0
public void testVariableExtraction9()
{    extractor.setRegex("(\\w+)");    extractor.setTemplate("$1$");    extractor.setMatchNumber(1);    extractor.setUseField(RegexExtractor.USE_CODE);    assertFalse("useHdrs should be false", extractor.useHeaders());    assertFalse("useBody should be false", extractor.useBody());    assertFalse("useURL should be false", extractor.useUrl());    assertFalse("useMessage should be false", extractor.useMessage());    assertTrue("useCode should be true", extractor.useCode());    extractor.process();    assertEquals("abcd", vars.get("regVal"));    extractor.setUseField(RegexExtractor.USE_MESSAGE);    assertFalse("useHdrs should be false", extractor.useHeaders());    assertFalse("useBody should be false", extractor.useBody());    assertFalse("useURL should be false", extractor.useUrl());    assertTrue("useMessage should be true", extractor.useMessage());    assertFalse("useCode should be false", extractor.useCode());    extractor.setMatchNumber(3);    extractor.process();    assertEquals("brown", vars.get("regVal"));}
0
public void testNoDefault()
{    extractor.setRegex("<value field=\"(pinposition\\d+)\">(\\d+)</value>");    extractor.setTemplate("$2$");    extractor.setMatchNumber(4);    vars.put("regVal", "initial");    assertEquals("initial", vars.get("regVal"));    extractor.process();    assertEquals("initial", vars.get("regVal"));}
0
public void testDefault()
{    extractor.setRegex("<value field=\"(pinposition\\d+)\">(\\d+)</value>");    extractor.setTemplate("$2$");    extractor.setMatchNumber(999);    extractor.setDefaultValue("default");    vars.put("regVal", "initial");    assertEquals("initial", vars.get("regVal"));    extractor.process();    assertEquals("default", vars.get("regVal"));    assertNull(vars.get("regVal_g0"));    assertNull(vars.get("regVal_g1"));}
0
public void testStaleVariables()
{    extractor.setRegex("<value field=\"(pinposition\\d+)\">(\\d+)</value>");    extractor.setTemplate("$2$");    extractor.setMatchNumber(1);    extractor.setDefaultValue("default");    extractor.process();    assertEquals("1", vars.get("regVal"));    assertEquals("1", vars.get("regVal_g2"));    assertEquals("2", vars.get("regVal_g"));    assertNotNull(vars.get("regVal_g0"));    assertNotNull(vars.get("regVal_g1"));        extractor.setMatchNumber(10);    extractor.process();    assertEquals("default", vars.get("regVal"));    assertNull(vars.get("regVal_g0"));    assertNull(vars.get("regVal_g1"));    assertNull(vars.get("regVal_g"));}
0
public void testScope1()
{    result.setResponseData("<title>ONE</title>", "ISO-8859-1");    extractor.setScopeParent();    extractor.setTemplate("$1$");    extractor.setMatchNumber(1);    extractor.setRegex("<title>([^<]+)<");    extractor.setDefaultValue("NOTFOUND");    extractor.process();    assertEquals("ONE", vars.get("regVal"));    extractor.setScopeAll();    extractor.process();    assertEquals("ONE", vars.get("regVal"));    extractor.setScopeChildren();    extractor.process();    assertEquals("NOTFOUND", vars.get("regVal"));}
0
public void testScope2()
{    result.sampleStart();    result.setResponseData("<title>PARENT</title>", "ISO-8859-1");    result.sampleEnd();    SampleResult child1 = new SampleResult();    child1.sampleStart();    child1.setResponseData("<title>ONE</title>", "ISO-8859-1");    child1.sampleEnd();    result.addSubResult(child1);    SampleResult child2 = new SampleResult();    child2.sampleStart();    child2.setResponseData("<title>TWO</title>", "ISO-8859-1");    child2.sampleEnd();    result.addSubResult(child2);    SampleResult child3 = new SampleResult();    child3.sampleStart();    child3.setResponseData("<title>THREE</title>", "ISO-8859-1");    child3.sampleEnd();    result.addSubResult(child3);    extractor.setScopeParent();    extractor.setTemplate("$1$");    extractor.setMatchNumber(1);    extractor.setRegex("<title>([^<]+)<");    extractor.setDefaultValue("NOTFOUND");    extractor.process();    assertEquals("PARENT", vars.get("regVal"));    extractor.setScopeAll();    extractor.setMatchNumber(3);    extractor.process();    assertEquals("TWO", vars.get("regVal"));    extractor.setScopeChildren();    extractor.process();    assertEquals("THREE", vars.get("regVal"));    extractor.setRegex(">(...)<");    extractor.setScopeAll();    extractor.setMatchNumber(2);    extractor.process();    assertEquals("TWO", vars.get("regVal"));        extractor.setRegex("<title>([^<]+)<");    extractor.setMatchNumber(-1);    extractor.setScopeParent();    extractor.process();    assertEquals("1", vars.get("regVal_matchNr"));    extractor.setScopeAll();    extractor.process();    assertEquals("4", vars.get("regVal_matchNr"));    extractor.setScopeChildren();    extractor.process();    assertEquals("3", vars.get("regVal_matchNr"));        extractor.setMatchNumber(0);    extractor.setScopeParent();    extractor.process();    assertEquals("PARENT", vars.get("regVal"));    extractor.setRegex("(<title>)");    extractor.setScopeAll();    extractor.process();    assertEquals("<title>", vars.get("regVal"));    extractor.setScopeChildren();    extractor.process();    assertEquals("<title>", vars.get("regVal"));    extractor.setRegex("<title>(...)<");    extractor.setScopeAll();    extractor.process();    final String found = vars.get("regVal");    assertTrue(found.equals("ONE") || found.equals("TWO"));}
0
public void setUp() throws UnsupportedEncodingException
{    jmctx = JMeterContextService.getContext();    extractor = new XPath2Extractor();        extractor.setThreadContext(jmctx);        extractor.setRefName(VAL_NAME);    extractor.setDefaultValue("Default");    result = new SampleResult();    data = "<book><preface title='Intro'>zero</preface><page>one</page><page>two</page><empty></empty><a><b></b></a></book>";    result.setResponseData(data.getBytes("UTF-8"));    vars = new JMeterVariables();    jmctx.setVariables(vars);    jmctx.setPreviousResult(result);}
0
public void testAttributeExtraction() throws Exception
{    extractor.setXPathQuery("/book/preface/@title");    extractor.process();    assertEquals("Intro", vars.get(VAL_NAME));    assertEquals("1", vars.get(VAL_NAME_NR));    assertEquals("Intro", vars.get(VAL_NAME + "_1"));    assertNull(vars.get(VAL_NAME + "_2"));    extractor.setXPathQuery("/book/preface[@title]");    extractor.process();    assertEquals("zero", vars.get(VAL_NAME));    assertEquals("1", vars.get(VAL_NAME_NR));    assertEquals("zero", vars.get(VAL_NAME + "_1"));    assertNull(vars.get(VAL_NAME + "_2"));    extractor.setXPathQuery("/book/preface[@title='Intro']");    extractor.process();    assertEquals("zero", vars.get(VAL_NAME));    assertEquals("1", vars.get(VAL_NAME_NR));    assertEquals("zero", vars.get(VAL_NAME + "_1"));    assertNull(vars.get(VAL_NAME + "_2"));    extractor.setXPathQuery("/book/preface[@title='xyz']");    extractor.process();    assertEquals("Default", vars.get(VAL_NAME));    assertEquals("0", vars.get(VAL_NAME_NR));    assertNull(vars.get(VAL_NAME + "_1"));}
0
public void testVariableExtraction() throws Exception
{    extractor.setXPathQuery("/book/preface");    extractor.process();    assertEquals("zero", vars.get(VAL_NAME));    assertEquals("1", vars.get(VAL_NAME_NR));    assertEquals("zero", vars.get(VAL_NAME + "_1"));    assertNull(vars.get(VAL_NAME + "_2"));        extractor.setXPathQuery("/book/page");    extractor.setMatchNumber(1);    extractor.process();    assertEquals("one", vars.get(VAL_NAME));    assertEquals("1", vars.get(VAL_NAME_NR));    assertEquals("one", vars.get(VAL_NAME + "_1"));    assertNull(vars.get(VAL_NAME + "_2"));    assertNull(vars.get(VAL_NAME + "_3"));        extractor.setXPathQuery("/book/page");    extractor.setMatchNumber("1");    extractor.process();    assertEquals("one", vars.get(VAL_NAME));    assertEquals("1", vars.get(VAL_NAME_NR));    assertEquals("one", vars.get(VAL_NAME + "_1"));    assertNull(vars.get(VAL_NAME + "_2"));    assertNull(vars.get(VAL_NAME + "_3"));        extractor.setXPathQuery("/book/page");    extractor.setMatchNumber(2);    extractor.process();    assertEquals("two", vars.get(VAL_NAME));    assertEquals("1", vars.get(VAL_NAME_NR));    assertEquals("two", vars.get(VAL_NAME + "_1"));    assertNull(vars.get(VAL_NAME + "_2"));    assertNull(vars.get(VAL_NAME + "_3"));        extractor.setMatchNumber(-1);    extractor.setXPathQuery("/book/page");    extractor.process();    assertEquals("2", vars.get(VAL_NAME_NR));    assertEquals("one", vars.get(VAL_NAME + "_1"));    assertEquals("one", vars.get(VAL_NAME));    assertEquals("two", vars.get(VAL_NAME + "_2"));    assertNull(vars.get(VAL_NAME + "_3"));        extractor.setMatchNumber(-1);    extractor.setXPathQuery("/book/page[2]");    extractor.process();    assertEquals("two", vars.get(VAL_NAME));    assertEquals("1", vars.get(VAL_NAME_NR));    assertEquals("two", vars.get(VAL_NAME + "_1"));    assertNull(vars.get(VAL_NAME + "_2"));    assertNull(vars.get(VAL_NAME + "_3"));    extractor.setXPathQuery("/book/index");    extractor.process();    assertEquals("Default", vars.get(VAL_NAME));    assertEquals("0", vars.get(VAL_NAME_NR));    assertNull(vars.get(VAL_NAME + "_1"));    extractor.setMatchNumber(-1);        extractor.setXPathQuery("/book/page[2]");    extractor.setFragment(true);    extractor.process();    assertEquals("<page>two</page>", vars.get(VAL_NAME));        extractor.setXPathQuery("/book/page[2]/text()");    extractor.process();    assertEquals("two", vars.get(VAL_NAME));}
0
public void testScope()
{    extractor.setXPathQuery("/book/preface");    extractor.process();    assertEquals("zero", vars.get(VAL_NAME));    assertEquals("1", vars.get(VAL_NAME_NR));    assertEquals("zero", vars.get(VAL_NAME + "_1"));    assertNull(vars.get(VAL_NAME + "_2"));        extractor.setScopeChildren();    extractor.process();    assertEquals("Default", vars.get(VAL_NAME));    assertEquals("0", vars.get(VAL_NAME_NR));    assertNull(vars.get(VAL_NAME + "_1"));        extractor.setScopeAll();    extractor.process();    assertEquals("zero", vars.get(VAL_NAME));    assertEquals("1", vars.get(VAL_NAME_NR));    assertEquals("zero", vars.get(VAL_NAME + "_1"));    assertNull(vars.get(VAL_NAME + "_2"));            result.sampleStart();    result.sampleEnd();    SampleResult subResult = new SampleResult();    subResult.sampleStart();    subResult.setResponseData(result.getResponseData());    subResult.sampleEnd();    result.addSubResult(subResult);        extractor.setScopeAll();    extractor.process();    assertEquals("zero", vars.get(VAL_NAME));    assertEquals("2", vars.get(VAL_NAME_NR));    assertEquals("zero", vars.get(VAL_NAME + "_1"));    assertEquals("zero", vars.get(VAL_NAME + "_2"));    assertNull(vars.get(VAL_NAME + "_3"));        extractor.setScopeChildren();    extractor.process();    assertEquals("zero", vars.get(VAL_NAME));    assertEquals("1", vars.get(VAL_NAME_NR));    assertEquals("zero", vars.get(VAL_NAME + "_1"));    assertNull(vars.get(VAL_NAME + "_2"));        extractor.setScopeVariable("result");    result = new SampleResult();    vars.put("result", data);    extractor.process();    assertEquals("zero", vars.get(VAL_NAME));    assertEquals("1", vars.get(VAL_NAME_NR));    assertEquals("zero", vars.get(VAL_NAME + "_1"));    assertNull(vars.get(VAL_NAME + "_2"));        extractor.setScopeVariable("result");    result = new SampleResult();    vars.remove("result");    extractor.process();    assertEquals("Default", vars.get(VAL_NAME));    assertEquals("0", vars.get(VAL_NAME_NR));}
0
public void testWithNamespace() throws Exception
{    result.setResponseData("<age:ag xmlns:age=\"http://www.w3.org/wgs84_pos#\"><head><title>test</title></head></age:ag>", null);    String namespaces = "age=http://www.w3.org/wgs84_pos#";    String xPathQuery = "/age:ag/head/title";    extractor.setXPathQuery(xPathQuery);    extractor.setNamespaces(namespaces);    extractor.process();    assertEquals("test", vars.get(VAL_NAME));    assertEquals("1", vars.get(VAL_NAME_NR));    assertEquals("test", vars.get(VAL_NAME + "_1"));    assertNull(vars.get(VAL_NAME + "_2"));}
0
public void testWithNamespaces() throws Exception
{    result.setResponseData("<age:ag xmlns:age=\"http://www.w3.org/wgs84_pos#\">" + "<hd:head xmlns:hd=\"http://www.w3.org/wgs85_pos#\"><title>test</title></hd:head></age:ag>", null);    String namespaces = "age=http://www.w3.org/wgs84_pos#" + "\n" + "hd=http://www.w3.org/wgs85_pos#";    String xPathQuery = "/age:ag/hd:head/title";    extractor.setXPathQuery(xPathQuery);    extractor.setNamespaces(namespaces);    extractor.process();    assertEquals("test", vars.get(VAL_NAME));    assertEquals("1", vars.get(VAL_NAME_NR));    assertEquals("test", vars.get(VAL_NAME + "_1"));    assertNull(vars.get(VAL_NAME + "_2"));}
0
public void testWithoutNamespace() throws Exception
{    result.setResponseData("<age:ag xmlns:age=\"http://www.w3.org/wgs84_pos#\"><head><title>test</title></head></age:ag>", null);    String xPathQuery = "/age:ag/head/title";    extractor.setXPathQuery(xPathQuery);    extractor.process();    assertEquals("Default", vars.get(VAL_NAME));    assertEquals("0", vars.get(VAL_NAME_NR));}
0
public void testPreviousResultIsEmpty() throws Exception
{    JMeterContext jmc = JMeterContextService.getContext();    extractor = new XPath2Extractor();        extractor.setThreadContext(jmctx);        extractor.setRefName(VAL_NAME);    extractor.setDefaultValue("Default");    jmc.setPreviousResult(null);    extractor.setXPathQuery("/book/preface");    extractor.process();    assertEquals(null, vars.get(VAL_NAME));}
0
public void setUp() throws UnsupportedEncodingException
{    jmctx = JMeterContextService.getContext();    extractor = new XPathExtractor();        extractor.setThreadContext(jmctx);    extractor.setRefName(VAL_NAME);    extractor.setDefaultValue("Default");    result = new SampleResult();    data = "<book><preface title='Intro'>zero</preface><page>one</page><page>two</page><empty></empty><a><b></b></a></book>";    result.setResponseData(data.getBytes("UTF-8"));    vars = new JMeterVariables();    jmctx.setVariables(vars);    jmctx.setPreviousResult(result);}
0
public void testAttributeExtraction() throws Exception
{    extractor.setXPathQuery("/book/preface/@title");    extractor.process();    assertEquals("Intro", vars.get(VAL_NAME));    assertEquals("1", vars.get(VAL_NAME_NR));    assertEquals("Intro", vars.get(VAL_NAME + "_1"));    assertNull(vars.get(VAL_NAME + "_2"));    extractor.setXPathQuery("/book/preface[@title]");    extractor.process();    assertEquals("zero", vars.get(VAL_NAME));    assertEquals("1", vars.get(VAL_NAME_NR));    assertEquals("zero", vars.get(VAL_NAME + "_1"));    assertNull(vars.get(VAL_NAME + "_2"));    extractor.setXPathQuery("/book/preface[@title='Intro']");    extractor.process();    assertEquals("zero", vars.get(VAL_NAME));    assertEquals("1", vars.get(VAL_NAME_NR));    assertEquals("zero", vars.get(VAL_NAME + "_1"));    assertNull(vars.get(VAL_NAME + "_2"));    extractor.setXPathQuery("/book/preface[@title='xyz']");    extractor.process();    assertEquals("Default", vars.get(VAL_NAME));    assertEquals("0", vars.get(VAL_NAME_NR));    assertNull(vars.get(VAL_NAME + "_1"));}
0
public void testVariableExtraction() throws Exception
{    extractor.setXPathQuery("/book/preface");    extractor.process();    assertEquals("zero", vars.get(VAL_NAME));    assertEquals("1", vars.get(VAL_NAME_NR));    assertEquals("zero", vars.get(VAL_NAME + "_1"));    assertNull(vars.get(VAL_NAME + "_2"));    extractor.setXPathQuery("/book/page");    extractor.process();    assertEquals("one", vars.get(VAL_NAME));    assertEquals("2", vars.get(VAL_NAME_NR));    assertEquals("one", vars.get(VAL_NAME + "_1"));    assertEquals("two", vars.get(VAL_NAME + "_2"));    assertNull(vars.get(VAL_NAME + "_3"));        extractor.setXPathQuery("/book/page");    extractor.setMatchNumber(1);    extractor.process();    assertEquals("one", vars.get(VAL_NAME));    assertEquals("1", vars.get(VAL_NAME_NR));    assertEquals("one", vars.get(VAL_NAME + "_1"));    assertNull(vars.get(VAL_NAME + "_2"));    assertNull(vars.get(VAL_NAME + "_3"));        extractor.setXPathQuery("/book/page");    extractor.setMatchNumber(0);    extractor.process();    assertEquals("1", vars.get(VAL_NAME_NR));    Assert.assertTrue(StringUtils.isNoneEmpty(vars.get(VAL_NAME)));    Assert.assertTrue(StringUtils.isNoneEmpty(vars.get(VAL_NAME + "_1")));    assertNull(vars.get(VAL_NAME + "_2"));    assertNull(vars.get(VAL_NAME + "_3"));        extractor.setMatchNumber(-1);    extractor.setXPathQuery("/book/page[2]");    extractor.process();    assertEquals("two", vars.get(VAL_NAME));    assertEquals("1", vars.get(VAL_NAME_NR));    assertEquals("two", vars.get(VAL_NAME + "_1"));    assertNull(vars.get(VAL_NAME + "_2"));    assertNull(vars.get(VAL_NAME + "_3"));    extractor.setXPathQuery("/book/index");    extractor.process();    assertEquals("Default", vars.get(VAL_NAME));    assertEquals("0", vars.get(VAL_NAME_NR));    assertNull(vars.get(VAL_NAME + "_1"));        extractor.setXPathQuery("/book/a");    extractor.process();    assertEquals("Default", vars.get(VAL_NAME));    assertEquals("1", vars.get(VAL_NAME_NR));    assertNull(vars.get(VAL_NAME + "_1"));        extractor.setXPathQuery("/book/empty");    extractor.process();    assertEquals("Default", vars.get(VAL_NAME));    assertEquals("1", vars.get(VAL_NAME_NR));    assertNull(vars.get(VAL_NAME + "_1"));        extractor.setXPathQuery("//a");    extractor.process();    assertEquals("Default", vars.get(VAL_NAME));        extractor.setXPathQuery("//a");    extractor.process();    extractor.setMatchNumber(-1);    assertEquals("Default", vars.get(VAL_NAME));        extractor.setXPathQuery("//a");    extractor.process();    extractor.setMatchNumber(2);    assertEquals("Default", vars.get(VAL_NAME));        extractor.setXPathQuery("//a");    extractor.process();    extractor.setMatchNumber(0);    assertEquals("Default", vars.get(VAL_NAME));    extractor.setMatchNumber(-1);        extractor.setXPathQuery("/book/page[2]");    extractor.setFragment(true);    extractor.process();    assertEquals("<page>two</page>", vars.get(VAL_NAME));        extractor.setXPathQuery("/book/page[2]/text()");    extractor.process();    assertEquals("two", vars.get(VAL_NAME));        extractor.setXPathQuery("//a");    extractor.process();    assertEquals("<a><b/></a>", vars.get(VAL_NAME));}
0
public void testScope()
{    extractor.setXPathQuery("/book/preface");    extractor.process();    assertEquals("zero", vars.get(VAL_NAME));    assertEquals("1", vars.get(VAL_NAME_NR));    assertEquals("zero", vars.get(VAL_NAME + "_1"));    assertNull(vars.get(VAL_NAME + "_2"));        extractor.setScopeChildren();    extractor.process();    assertEquals("Default", vars.get(VAL_NAME));    assertEquals("0", vars.get(VAL_NAME_NR));    assertNull(vars.get(VAL_NAME + "_1"));        extractor.setScopeAll();    extractor.process();    assertEquals("zero", vars.get(VAL_NAME));    assertEquals("1", vars.get(VAL_NAME_NR));    assertEquals("zero", vars.get(VAL_NAME + "_1"));    assertNull(vars.get(VAL_NAME + "_2"));            result.sampleStart();    result.sampleEnd();    SampleResult subResult = new SampleResult();    subResult.sampleStart();    subResult.setResponseData(result.getResponseData());    subResult.sampleEnd();    result.addSubResult(subResult);        extractor.setScopeAll();    extractor.process();    assertEquals("zero", vars.get(VAL_NAME));    assertEquals("2", vars.get(VAL_NAME_NR));    assertEquals("zero", vars.get(VAL_NAME + "_1"));    assertEquals("zero", vars.get(VAL_NAME + "_2"));    assertNull(vars.get(VAL_NAME + "_3"));        extractor.setScopeChildren();    extractor.process();    assertEquals("zero", vars.get(VAL_NAME));    assertEquals("1", vars.get(VAL_NAME_NR));    assertEquals("zero", vars.get(VAL_NAME + "_1"));    assertNull(vars.get(VAL_NAME + "_2"));        extractor.setScopeVariable("result");    result = new SampleResult();    vars.put("result", data);    extractor.process();    assertEquals("zero", vars.get(VAL_NAME));    assertEquals("1", vars.get(VAL_NAME_NR));    assertEquals("zero", vars.get(VAL_NAME + "_1"));    assertNull(vars.get(VAL_NAME + "_2"));        extractor.setScopeVariable("result");    result = new SampleResult();    vars.remove("result");    extractor.process();    assertEquals("Default", vars.get(VAL_NAME));    assertEquals("0", vars.get(VAL_NAME_NR));}
0
public void testInvalidXpath() throws Exception
{    Locale prevLocale = Locale.getDefault();    try {                Locale.setDefault(Locale.US);        extractor.setXPathQuery("<");        extractor.process();        assertEquals(1, result.getAssertionResults().length);        AssertionResult firstResult = result.getAssertionResults()[0];        assertEquals(extractor.getName(), firstResult.getName());        assertThat(firstResult.getFailureMessage(), containsString("A location path was expected, but the following token was encountered"));        assertEquals("Default", vars.get(VAL_NAME));        assertEquals("0", vars.get(VAL_NAME_NR));    } finally {        Locale.setDefault(prevLocale);    }}
0
public void testNonXmlDocument() throws Exception
{    result.setResponseData("Error:exception occurred", null);    extractor.setXPathQuery("//test");    extractor.process();    assertEquals(1, result.getAssertionResults().length);    assertEquals(extractor.getName(), result.getAssertionResults()[0].getName());    org.junit.Assert.assertTrue(result.getAssertionResults()[0].getFailureMessage().contains("Content is not allowed in prolog"));    assertEquals("Default", vars.get(VAL_NAME));    assertEquals("0", vars.get(VAL_NAME_NR));}
0
public void testInvalidDocument() throws Exception
{    result.setResponseData("<z>", null);    extractor.setXPathQuery("//test");    extractor.process();    assertEquals(1, result.getAssertionResults().length);    assertEquals(extractor.getName(), result.getAssertionResults()[0].getName());    org.junit.Assert.assertThat(result.getAssertionResults()[0].getFailureMessage(), containsString("XML document structures must start and end within the same entity"));    assertEquals("Default", vars.get(VAL_NAME));    assertEquals("0", vars.get(VAL_NAME_NR));}
0
public void setup()
{    templateMap = readTemplateFromFile();    assertEquals(3, templateMap.size());}
0
private Map<String, Template> readTemplateFromFile()
{    File xmlTemplate = new File(this.getClass().getResource("validTemplates.xml").getFile());    try {        return TemplateManager.getInstance().parseTemplateFile(xmlTemplate);    } catch (IOException | SAXException | ParserConfigurationException e) {        throw new RuntimeException(e);    }}
0
public void testValidTemplateFile()
{    Template testTemplate = templateMap.get("testTemplateWithParameters");    assertTrue(testTemplate.isTestPlan());    assertEquals("testTemplateWithParameters", testTemplate.getName());    assertEquals("/bin/templates/testTemplate.jmx.fmkr", testTemplate.getFileName());    assertEquals("Template with parameters", testTemplate.getDescription());    Map<String, String> testTemplateParameters = testTemplate.getParameters();    assertEquals("n 1", testTemplateParameters.get("testKey1"));    assertEquals("n 2", testTemplateParameters.get("testKey2"));    assertEquals("n 3", testTemplateParameters.get("testKey3"));    testTemplate = templateMap.get("testTemplateNotTestPlan");    assertFalse(testTemplate.isTestPlan());    assertEquals("testTemplateNotTestPlan", testTemplate.getName());    assertEquals("/bin/templates/testTemplateNotTestPlan.jmx", testTemplate.getFileName());    assertEquals("testTemplateNotTestPlan desc", testTemplate.getDescription());    assertNull(testTemplate.getParameters());    testTemplate = templateMap.get("testTemplate");    assertTrue(testTemplate.isTestPlan());    assertEquals("testTemplate", testTemplate.getName());    assertEquals("/bin/templates/testTemplate.jmx", testTemplate.getFileName());    assertEquals("testTemplate desc", testTemplate.getDescription());    assertNull(testTemplate.getParameters());}
0
public void testNonExistantXmlFileThrowsFileNotFoundException() throws Exception
{    File xmlTemplateFile = new File("missing.xml");    TemplateManager.getInstance().parseTemplateFile(xmlTemplateFile);}
0
public void testInvalidTemplateXml() throws IOException, SAXException, ParserConfigurationException
{    try {        String xmlTemplatePath = this.getClass().getResource("invalidTemplates.xml").getFile();        File templateFile = new File(xmlTemplatePath);        TemplateManager.getInstance().parseTemplateFile(templateFile);    } catch (SAXParseException ex) {        assertTrue("Exception did not contains expected message, got:" + ex.getMessage(), ex.getMessage().contains("Element type \"key\" must be declared."));    }}
0
public void equalsHashCode()
{    EqualsVerifier.forClass(Template.class).usingGetClass().suppress(Warning.NONFINAL_FIELDS).suppress(Warning.TRANSIENT_FIELDS).verify();}
0
public void testDifferentTemplatesAreNotEqual()
{    Template testTemplate1 = templateMap.get("testTemplateWithParameters");    Template testTemplate2 = templateMap.get("testTemplateNotTestPlan");    Template testTemplate3 = templateMap.get("testTemplate");    assertNotEquals(testTemplate1, testTemplate2);    assertNotEquals(testTemplate1, testTemplate3);    assertNotEquals(testTemplate2, testTemplate1);    assertNotEquals(testTemplate2, testTemplate3);    assertNotEquals(testTemplate3, testTemplate1);    assertNotEquals(testTemplate3, testTemplate2);}
0
public void testSameTemplatesAreEqual()
{    Template template = templateMap.get("testTemplateWithParameters");    assertEquals(template, template);    assertEquals(template.hashCode(), template.hashCode());}
0
public void testSameButParamsTemplatesAreNotEqual()
{    Template template1 = readTemplateFromFile().get("testTemplateWithParameters");    Template template2 = readTemplateFromFile().get("testTemplateWithParameters");    template2.setParameters(Collections.singletonMap("key", "value"));    assertNotEquals(template1, template2);}
0
public void setUp()
{    save = new Save();}
0
public void testTreeConversion() throws Exception
{    HashTree tree = new ListedHashTree();    JMeterTreeNode root = new JMeterTreeNode(new Arguments(), null);    tree.add(root, root);    tree.getTree(root).add(root, root);    save.convertSubTree(tree);    assertEquals(tree.getArray()[0].getClass().getName(), root.getTestElement().getClass().getName());    tree = tree.getTree(tree.getArray()[0]);    assertEquals(tree.getArray()[0].getClass().getName(), root.getTestElement().getClass().getName());    assertEquals(tree.getTree(tree.getArray()[0]).getArray()[0].getClass().getName(), root.getTestElement().getClass().getName());}
0
public void setUp()
{    JMeterContext jmctx = JMeterContextService.getContext();    resultSaver = new ResultSaver();    resultSaver.setThreadContext(jmctx);    jmctx.setVariables(vars);    sampleResult = new SampleResult();    sampleResult.setResponseData(data, null);}
0
public void testSuccess()
{    sampleResult.setSuccessful(true);    resultSaver.setProperty(ResultSaver.NUMBER_PAD_LENGTH, "5");    resultSaver.testStarted();    resultSaver.sampleOccurred(new SampleEvent(sampleResult, "JUnit-TG"));    String fileName = sampleResult.getResultFileName();    Assert.assertNotNull(fileName);    Assert.assertEquals("00001.unknown", fileName);    File file = new File(FileServer.getDefaultBase(), fileName);    Assert.assertTrue(file.exists());    Assert.assertTrue(file.delete());}
0
public void testSuccessWithVariable()
{    sampleResult.setSuccessful(true);    resultSaver.setProperty(ResultSaver.NUMBER_PAD_LENGTH, "5");    resultSaver.setProperty(ResultSaver.VARIABLE_NAME, "myVar");    resultSaver.testStarted();    resultSaver.sampleOccurred(new SampleEvent(sampleResult, "JUnit-TG"));    String fileName = sampleResult.getResultFileName();    Assert.assertNotNull(fileName);    Assert.assertEquals("00001.unknown", fileName);    File file = new File(FileServer.getDefaultBase(), fileName);    Assert.assertTrue(file.exists());    Assert.assertTrue(file.delete());    Assert.assertEquals("00001.unknown", vars.get("myVar"));}
0
public void testSuccessSaveErrorsOnly()
{    sampleResult.setSuccessful(true);    resultSaver.setProperty(ResultSaver.NUMBER_PAD_LENGTH, "5");    resultSaver.setProperty(ResultSaver.VARIABLE_NAME, "myVar");    resultSaver.setProperty(ResultSaver.ERRORS_ONLY, "true");    resultSaver.testStarted();    resultSaver.sampleOccurred(new SampleEvent(sampleResult, "JUnit-TG"));    String fileName = sampleResult.getResultFileName();    Assert.assertEquals("", fileName);    Assert.assertNull(vars.get("myVar"));}
0
public void testFailureSaveErrorsOnly()
{    sampleResult.setSuccessful(true);    resultSaver.setProperty(ResultSaver.NUMBER_PAD_LENGTH, "5");    resultSaver.setProperty(ResultSaver.VARIABLE_NAME, "myVar");    resultSaver.setProperty(ResultSaver.ERRORS_ONLY, "true");    resultSaver.testStarted();    sampleResult.setSuccessful(false);    resultSaver.sampleOccurred(new SampleEvent(sampleResult, "JUnit-TG"));    String fileName = sampleResult.getResultFileName();    Assert.assertNotNull(fileName);    Assert.assertEquals("00001.unknown", fileName);    File file = new File(FileServer.getDefaultBase(), fileName);    Assert.assertTrue(file.exists());    Assert.assertTrue(file.delete());    Assert.assertEquals("00001.unknown", vars.get("myVar"));}
0
public void testMakeFileName()
{    resultSaver.setProperty(ResultSaver.FILENAME, "test");    resultSaver.testStarted();    Assert.assertEquals("test", resultSaver.makeFileName(null, true, true));    resultSaver.testStarted();    Assert.assertEquals("test", resultSaver.makeFileName("text/plain", true, true));    resultSaver.testStarted();    Assert.assertEquals("test", resultSaver.makeFileName("text/plain;charset=utf8", true, true));    Assert.assertEquals("test1.plain", resultSaver.makeFileName("text/plain", false, false));    resultSaver.testStarted();    Assert.assertEquals("test.plain", resultSaver.makeFileName("text/plain", true, false));    resultSaver.testStarted();    Assert.assertEquals("test1", resultSaver.makeFileName("text/plain", false, true));    Assert.assertEquals("test2", resultSaver.makeFileName("text/plain", false, true));    resultSaver.testStarted();    Assert.assertEquals("test.plain", resultSaver.makeFileName("text/plain;charset=UTF-8", true, false));    resultSaver.testStarted();    Assert.assertEquals("test.unknown", resultSaver.makeFileName(null, true, false));}
0
public void testTimer1() throws Exception
{    ConstantThroughputTimer timer = new ConstantThroughputTimer();        assertEquals(0, timer.getCalcMode());        timer.setThroughput(60.0);    long start = System.currentTimeMillis();        long delay = timer.delay();    assertEquals(0, delay);                        Thread.sleep(500);    long elapsed = System.currentTimeMillis() - start;        long expected = 1000 - elapsed;    if (expected < 0) {        expected = 0;    }    assertEquals("Expected delay of approx 500", expected, timer.delay(), 50);}
0
public void testTimer2() throws Exception
{    ConstantThroughputTimer timer = new ConstantThroughputTimer();        assertEquals(0, timer.getCalcMode());        timer.setThroughput(60.0);        assertEquals(1000, timer.calculateCurrentTarget(0));        timer.setThroughput(60000.0);        assertEquals(1, timer.calculateCurrentTarget(0));}
0
public void testTimer3() throws Exception
{    ConstantThroughputTimer timer = new ConstantThroughputTimer();        timer.setMode(ConstantThroughputTimer.Mode.AllActiveThreads);        assertEquals(1, timer.getCalcMode());    for (int i = 1; i <= 10; i++) {        TestJMeterContextService.incrNumberOfThreads();    }    assertEquals(10, JMeterContextService.getNumberOfThreads());        timer.setThroughput(600.0);        assertEquals(1000, timer.calculateCurrentTarget(0));        timer.setThroughput(600000.0);        assertEquals(1, timer.calculateCurrentTarget(0));    for (int i = 1; i <= 990; i++) {        TestJMeterContextService.incrNumberOfThreads();    }    assertEquals(1000, JMeterContextService.getNumberOfThreads());        timer.setThroughput(60000000.0);        assertEquals(1, timer.calculateCurrentTarget(0));}
0
public void testTimerBSH() throws Exception
{    Assume.assumeTrue("BeanShell jar should be on the classpath, otherwise the test makes no sense", BeanShellInterpreter.isInterpreterPresent());    BeanShellTimer timer = new BeanShellTimer();    timer.setScript("\"60\"");    assertEquals(60, timer.delay());    timer.setScript("60");    assertEquals(60, timer.delay());    timer.setScript("5*3*4");    assertEquals(60, timer.delay());}
0
public void testTimerJSR223Timer() throws Exception
{    JSR223Timer timer = new JSR223Timer();    timer.setScriptLanguage(ScriptingTestElement.DEFAULT_SCRIPT_LANGUAGE);    timer.setCacheKey(UUID.randomUUID().toString());    timer.setScript("\"60\"");    assertEquals(60, timer.delay());    timer.setScript("60");    assertEquals(60, timer.delay());    timer.setScript("5*3*4");    assertEquals(60, timer.delay());}
0
public void testUniformRandomTimer() throws Exception
{    UniformRandomTimer timer = new UniformRandomTimer();    timer.setDelay("1000");    timer.setRange(100d);    timer.iterationStart(null);    long delay = timer.delay();    Assert.assertTrue("delay:" + delay + " is not in expected range", delay >= 1000 && delay <= 1100);}
0
public void testConstantTimer() throws Exception
{    ConstantTimer timer = new ConstantTimer();    timer.setDelay("1000");    timer.iterationStart(null);    assertEquals(1000, timer.delay());}
0
public void testPoissonRandomTimerRangeHigherThan30() throws Exception
{    PoissonRandomTimer timer = new PoissonRandomTimer();    timer.setDelay("300");    timer.setRange(100d);    timer.iterationStart(null);    long delay = timer.delay();    Assert.assertTrue("delay:" + delay + " is not in expected range", delay >= 356 && delay <= 457);}
0
public void testPoissonRandomTimerRangeLowerThan30() throws Exception
{    PoissonRandomTimer timer = new PoissonRandomTimer();    timer.setDelay("300");    timer.setRange(30d);    timer.iterationStart(null);    long delay = timer.delay();    Assert.assertTrue("delay:" + delay + " is not in expected range", delay >= 305 && delay <= 362);}
0
public void testTimer1() throws Exception
{    ConstantPoissonProcessGenerator gen = getConstantPoissonProcessGenerator(2, 5, 42L);    gen.generateNext();    assertEquals(0.6501751901910952, gen.next(), 0.01);    assertEquals(1.2249545461599474, gen.next(), 0.01);    assertEquals(1.409559315928937, gen.next(), 0.01);    assertEquals(1.5717866281130652, gen.next(), 0.01);    assertEquals(2.1194190047658874, gen.next(), 0.01);    assertEquals(3.2878637366551384, gen.next(), 0.01);    assertEquals(3.517916456559849, gen.next(), 0.01);    assertEquals(3.679224444929692, gen.next(), 0.01);    assertEquals(3.9907119513763165, gen.next(), 0.01);    assertEquals(4.754414649148714, gen.next(), 0.01);        assertEquals(6.013095167372755, gen.next(), 0.01);}
0
public void testExactNumberOfSamples() throws Exception
{    java.util.Random rnd = new java.util.Random();    long seed = rnd.nextLong();            rnd.setSeed(seed);    int testDuration = 5;    for (int i = 0; i < 1000; i++) {        ConstantPoissonProcessGenerator gen = getConstantPoissonProcessGenerator(2, testDuration, rnd.nextLong());        gen.generateNext();        for (int j = 0; j < 10; j++) {            double next = gen.next();            assertTrue("Delay #" + j + " (0-based) exceeds " + testDuration + " seconds", next < 5.0);        }    }}
1
protected ConstantPoissonProcessGenerator getConstantPoissonProcessGenerator(final double throughput, final int duration, long seed)
{    return new ConstantPoissonProcessGenerator(new ThroughputProvider() {        @Override        public double getThroughput() {                        return throughput;        }    }, 1, 0, new DurationProvider() {        @Override        public long getDuration() {                        return duration;        }    }, 10000, 0.1,     seed, false);}
0
public double getThroughput()
{        return throughput;}
0
public long getDuration()
{        return duration;}
0
public void testTimerWithScheduledEndpoint()
{    long schedulerDuration = 200L;    setupScheduledThread(schedulerDuration);    SyncTimer timer = new SyncTimer();    timer.setGroupSize(2);    timer.testStarted();    long duration = timeDelay(timer);    Assert.assertTrue("Calculating delay takes less then " + schedulerDuration * 2 + " ms (took: " + duration + " ms)", duration < schedulerDuration * 2);}
0
public void testTimerWithLongerScheduledEndpointThanTimeoutForTimer()
{    long schedulerDuration = 2000L;    long timerTimeout = 200L;    setupScheduledThread(schedulerDuration);    SyncTimer timer = new SyncTimer();    timer.setGroupSize(2);    timer.testStarted();    timer.setTimeoutInMs(timerTimeout);    long duration = timeDelay(timer);    Assert.assertTrue("Calculating delay takes less then " + timerTimeout * 2 + " ms (took: " + duration + " ms)", duration < timerTimeout * 2);}
0
public void testTimerWithShorterScheduledEndpointThanTimeoutForTimer()
{    long schedulerDuration = 200L;    long timerTimeout = 2000L;    setupScheduledThread(schedulerDuration);    SyncTimer timer = new SyncTimer();    timer.setGroupSize(2);    timer.testStarted();    timer.setTimeoutInMs(timerTimeout);    long duration = timeDelay(timer);    Assert.assertTrue("Calculating delay takes less then " + schedulerDuration * 2 + " ms (took: " + duration + " ms)", duration < schedulerDuration * 2);}
0
public void testTimerWithInvalidTimeout()
{    long schedulerDuration = 200L;    long timerTimeout = -1L;    setupScheduledThread(schedulerDuration);    SyncTimer timer = new SyncTimer();    timer.setGroupSize(2);    timer.testStarted();    timer.setTimeoutInMs(timerTimeout);    timer.delay();}
0
private long timeDelay(SyncTimer timer)
{    long start = System.currentTimeMillis();    timer.delay();    long duration = System.currentTimeMillis() - start;    return duration;}
0
private void setupScheduledThread(long schedulerDuration)
{    ListedHashTree hashTree = new ListedHashTree();    hashTree.add(new LoopController());    JMeterThread thread = new JMeterThread(hashTree, null, null);    JMeterContextService.getContext().setThread(thread);    thread.setEndTime(System.currentTimeMillis() + schedulerDuration);}
0
public void testBigInitialDelayAndDontWait()
{    long now = System.currentTimeMillis();    long adjustedDelay = sut.adjustDelay(Long.MAX_VALUE, now + 1000L, false);    Assert.assertThat("TimerService should return -1 as delay would lead to a time after end time", Long.valueOf(adjustedDelay), CoreMatchers.is(Long.valueOf(-1)));}
0
public void testBigInitialDelayAndWait()
{    long now = System.currentTimeMillis();    long adjustedDelay = sut.adjustDelay(Long.MAX_VALUE, now + 1000L);    Assert.assertThat("TimerService should return -1 as delay would lead to a time after end time", Long.valueOf(adjustedDelay), isAlmost(1000L, 200L));}
0
private BaseMatcher<Long> isAlmost(long value, long precision)
{    return new BaseMatcher<Long>() {        @Override        public boolean matches(Object item) {            if (item instanceof Long) {                Long other = (Long) item;                return Math.abs(other.longValue() - value) < precision;            }            return false;        }        @Override        public void describeTo(Description description) {            description.appendText("the number is within a precision of " + precision + " near " + value);        }    };}
0
public boolean matches(Object item)
{    if (item instanceof Long) {        Long other = (Long) item;        return Math.abs(other.longValue() - value) < precision;    }    return false;}
0
public void describeTo(Description description)
{    description.appendText("the number is within a precision of " + precision + " near " + value);}
0
public void testSmallInitialDelay()
{    long now = System.currentTimeMillis();    Assert.assertThat("TimerService should not change the delay as the end time is far away", Long.valueOf(sut.adjustDelay(1000L, now + 20000L)), CoreMatchers.is(Long.valueOf(1000L)));}
0
public void testNegativeEndTime()
{    Assert.assertThat("TimerService should not change the delay as the indicated end time is far away", Long.valueOf(sut.adjustDelay(1000L, -1)), CoreMatchers.is(Long.valueOf(1000L)));}
0
private MappingBuilder influxRequest(CountDownLatch latch)
{    return WireMock.post(API_URL).willReturn(WireMock.aResponse().withStatus(HttpURLConnection.HTTP_NO_CONTENT)).withPostServeAction("countdown", Parameters.one("latch", latch));}
0
 static Collection<Arguments> emptyTokens()
{    return Arrays.asList(arguments((String) null), arguments(""), arguments(" "));}
0
public void emptyTokenIsNotSentAsAuthorizedHeader(String token, WireMockServer server) throws Exception
{    CountDownLatch latch = new CountDownLatch(1);    server.stubFor(influxRequest(latch));    setupSenderAndSendMetric(server.url(API_URL), token);    latch.await(2, TimeUnit.SECONDS);    assertAuthHeader(server, WireMock.absent());}
0
public void checkTokenPresentInHeader(WireMockServer server) throws Exception
{    CountDownLatch latch = new CountDownLatch(1);    server.stubFor(influxRequest(latch));    setupSenderAndSendMetric(server.url(API_URL), "my-token");    latch.await(2, TimeUnit.SECONDS);    assertAuthHeader(server, WireMock.equalTo("Token my-token"));}
0
private void setupSenderAndSendMetric(String influxdbUrl, String influxDBToken) throws Exception
{    HttpMetricsSender metricsSender = new HttpMetricsSender();    metricsSender.setup(influxdbUrl, influxDBToken);    metricsSender.addMetric("measurement", "location=west", "size=10");    metricsSender.writeAndSendMetrics();}
0
private void assertAuthHeader(WireMockServer server, StringValuePattern authHeader)
{    server.verify(1, RequestPatternBuilder.newRequestPattern(RequestMethod.POST, WireMock.urlEqualTo(API_URL)).withRequestBody(WireMock.matching("measurementlocation=west size=10 \\d{19}\\s*")).withHeader("Authorization", authHeader));}
0
public void initMode() throws Exception
{        SamplerMetric.setDefaultWindowMode(WindowMode.FIXED);}
0
public void checkResetOkAndAllStats() throws Exception
{    SamplerMetric metric = new SamplerMetric();    metric.add(createSampleResult(true));    assertEquals("Before reset  ok.max", DEFAULT_ELAPSED_TIME, metric.getOkMaxTime(), 0.001);    assertEquals("Before reset all.max", DEFAULT_ELAPSED_TIME, metric.getAllMaxTime(), 0.001);    assertEquals("Before reset failure", 1, metric.getHits(), 0.0);    assertEquals("Before reset sent bytes", 1000, metric.getSentBytes(), 0.0);    assertEquals("Before reset received bytes", 2000, metric.getReceivedBytes(), 0.0);            metric.resetForTimeInterval();    assertEquals("After reset in FIXED mode ok.max", DEFAULT_ELAPSED_TIME, metric.getOkMaxTime(), 0.001);    assertEquals("After reset in FIXED mode all.max", DEFAULT_ELAPSED_TIME, metric.getAllMaxTime(), 0.0);    assertEquals("After reset failure", 0, metric.getHits(), 0.0);    assertEquals("After reset sent bytes", 0, metric.getSentBytes(), 0.0);    assertEquals("After reset received bytes", 0, metric.getReceivedBytes(), 0.0);}
0
public void checkResetKoAndAllStats() throws Exception
{    SamplerMetric metric = new SamplerMetric();    metric.add(createSampleResult(false));    assertEquals("Before reset  ko.max", DEFAULT_ELAPSED_TIME, metric.getKoMaxTime(), 0.001);    assertEquals("Before reset all.max", DEFAULT_ELAPSED_TIME, metric.getAllMaxTime(), 0.001);    assertEquals("Before reset failure", 1, metric.getFailures(), 0.0);    assertEquals("Before reset sent bytes", 1000, metric.getSentBytes(), 0.0);    assertEquals("Before reset received bytes", 2000, metric.getReceivedBytes(), 0.0);            metric.resetForTimeInterval();    assertEquals("After reset in FIXED mode  ko.max", DEFAULT_ELAPSED_TIME, metric.getKoMaxTime(), 0.0);    assertEquals("After reset in FIXED mode all.max", DEFAULT_ELAPSED_TIME, metric.getAllMaxTime(), 0.0);    assertEquals("After reset failure", 0, metric.getFailures(), 0.001);    assertEquals("After reset sent bytes", 0, metric.getSentBytes(), 0.0);    assertEquals("After reset received bytes", 0, metric.getReceivedBytes(), 0.0);}
0
public void checkErrorsDetailStat()
{    SamplerMetric metric = new SamplerMetric();    metric.add(createSampleResult("400", "bad request"));    metric.add(createSampleResult("400", "Bad Request "));    metric.add(createSampleResult("500", "Internal Server Error"));    ErrorMetric error = new ErrorMetric(createSampleResult("400", "Bad request"));    assertEquals("Count for '400 - bad request' error ", 2, metric.getErrors().get(error), 0.0);    error = new ErrorMetric(createSampleResult("500", "Internal Server Error"));    assertEquals("Count for '500 - Internal Server Error' error ", 1, metric.getErrors().get(error), 0.0);}
0
private SampleResult createSampleResult(boolean success)
{    SampleResult result = new SampleResult();    result.setSuccessful(success);    result.setSampleCount(1);    result.setErrorCount(success ? 0 : 1);    result.sampleStart();    result.setEndTime(result.getStartTime() + DEFAULT_ELAPSED_TIME);    result.setSentBytes(1000);    result.setBytes(2000L);    return result;}
0
private SampleResult createSampleResult(String errorCode, String errorMessage)
{    SampleResult result = createSampleResult(false);    result.setResponseCode(errorCode);    result.setResponseMessage(errorMessage);    return result;}
0
public void initMode() throws Exception
{        SamplerMetric.setDefaultWindowMode(WindowMode.TIMED);}
0
public void checkResetOkAndAllStats() throws Exception
{    SamplerMetric metric = new SamplerMetric();    metric.add(createSampleResult(true));    assertEquals("Before reset  ok.max", DEFAULT_ELAPSED_TIME, metric.getOkMaxTime(), 0.001);    assertEquals("Before reset all.max", DEFAULT_ELAPSED_TIME, metric.getAllMaxTime(), 0.001);    assertEquals("Before reset failure", 1, metric.getHits(), 0.0);    assertEquals("Before reset sent bytes", 1000, metric.getSentBytes(), 0.0);    assertEquals("Before reset received bytes", 2000, metric.getReceivedBytes(), 0.0);    metric.resetForTimeInterval();    assertEquals("After reset in TIMED mode ok.max", Double.NaN, metric.getOkMaxTime(), 0.0);    assertEquals("After reset in TIMED mode all.max", Double.NaN, metric.getAllMaxTime(), 0.0);    assertEquals("After reset failure", 0, metric.getHits(), 0.0);    assertEquals("After reset sent bytes", 0, metric.getSentBytes(), 0.0);    assertEquals("After reset received bytes", 0, metric.getReceivedBytes(), 0.0);}
0
public void checkResetKoAndAllStats() throws Exception
{    SamplerMetric metric = new SamplerMetric();    metric.add(createSampleResult(false));    assertEquals("Before reset  ko.max", DEFAULT_ELAPSED_TIME, metric.getKoMaxTime(), 0.001);    assertEquals("Before reset all.max", DEFAULT_ELAPSED_TIME, metric.getAllMaxTime(), 0.001);    assertEquals("Before reset failure", 1, metric.getFailures(), 0.0);    assertEquals("Before reset sent bytes", 1000, metric.getSentBytes(), 0.0);    assertEquals("Before reset received bytes", 2000, metric.getReceivedBytes(), 0.0);    metric.resetForTimeInterval();    assertEquals("After reset in TIMED mode  ko.max", Double.NaN, metric.getKoMaxTime(), 0.0);    assertEquals("After reset in TIMED mode all.max", Double.NaN, metric.getAllMaxTime(), 0.0);    assertEquals("After reset failure", 0, metric.getFailures(), 0.001);    assertEquals("After reset sent bytes", 0, metric.getSentBytes(), 0.0);    assertEquals("After reset received bytes", 0, metric.getReceivedBytes(), 0.0);}
0
private SampleResult createSampleResult(boolean success)
{    SampleResult result = new SampleResult();    result.setSuccessful(success);    result.setSampleCount(1);    result.setErrorCount(success ? 0 : 1);    result.sampleStart();    result.setSentBytes(1000);    result.setBytes(2000L);    result.setEndTime(result.getStartTime() + DEFAULT_ELAPSED_TIME);    return result;}
0
private String prettyJSON(String prettify) throws Exception
{    return (String) prettyJSON.invoke(null, prettify);}
0
public void setUp() throws Exception
{    prettyJSON = RenderAsJSON.class.getDeclaredMethod("prettyJSON", String.class);    prettyJSON.setAccessible(true);}
0
public void testRenderResultWithLongStringBug54826() throws Exception
{    StringBuilder json = new StringBuilder();    json.append("\"customData\": \"");    for (int i = 0; i < 100; i++) {        json.append("somenotsorandomtext");    }    json.append("\"");    assertEquals("{\n" + TAB + json.toString() + "\n}", prettyJSON("{" + json.toString() + "}"));}
0
public void testRenderResultSimpleObject() throws Exception
{    assertEquals("{\n}", prettyJSON("{}"));}
0
public void testRenderResultComplexArray() throws Exception
{    assertEquals("[\n" + TAB + "1,\n" + TAB + "{\n" + TAB + TAB + "\"A\": \"B\"\n" + TAB + "}\n]", prettyJSON("[1,{\"A\":\"B\"}]"));}
0
public void testRenderResultSimpleArray() throws Exception
{    assertEquals("[\n]", prettyJSON("[]"));}
0
public void testRenderArrayInObject() throws Exception
{    assertEquals("{\n" + TAB + "\"foo\": [\n" + TAB + "]\n}", prettyJSON("{\"foo\":[]}"));}
0
public void testRenderResultSimpleNumber() throws Exception
{    assertEquals("42", prettyJSON("42"));}
0
public void testRenderResultSimpleString() throws Exception
{    assertEquals("Hello World", prettyJSON("Hello World"));}
0
public void testRenderResultSimpleStructure() throws Exception
{    assertEquals("{\n" + TAB + "\"Hello\": \"World\",\n" + TAB + "\"more\": [\n" + TAB + TAB + "\"Something\",\n" + TAB + TAB + "\"else\"\n" + TAB + "]\n}", prettyJSON("{\"Hello\": \"World\", \"more\": [\"Something\", \"else\", ]}"));}
0
public static Collection<Object[]> data()
{    return Arrays.asList(new Object[][] { { 0L, 0L, 0 }, { 1L, 0L, 1 }, { 0L, 1L, -1 }, { Long.MAX_VALUE, Long.MIN_VALUE, 1 }, { Long.MIN_VALUE, Long.MAX_VALUE, -1 }, { 1000L, -1000L, 1 }, { -1000L, 1000L, -1 }, { Long.MIN_VALUE, Long.MIN_VALUE, 0 }, { Long.MAX_VALUE, Long.MAX_VALUE, 0 } });}
0
public void testCompareTo()
{    assertThat(sample(thisCount).compareTo(sample(otherCount)), CoreMatchers.is(compareResult));}
0
private Sample sample(long count)
{    return new Sample("dummy", 0L, 0L, 0L, 0L, 0L, 0.0, 0L, true, count, 0L);}
0
public void setUp()
{    ssc = new SamplingStatCalculator("JUnit");}
0
public void testGetCurrentSample()
{        Assert.assertNotNull(ssc.getCurrentSample());}
0
public void testGetAvgPageBytes()
{    SampleResult res = new SampleResult();    Assert.assertEquals(0, ssc.getAvgPageBytes(), 0);    res.setResponseData("abcdef", "UTF-8");    ssc.addSample(res);    res.setResponseData("abcde", "UTF-8");    ssc.addSample(res);    res.setResponseData("abcd", "UTF-8");    ssc.addSample(res);    Assert.assertEquals(5, ssc.getAvgPageBytes(), 0);}
0
public String getName()
{    return name;}
0
public boolean isFailure()
{    return failure;}
0
public boolean isError()
{    return error;}
0
public String getFailureMessage()
{    return failureMessage;}
0
public void setError(boolean e)
{    error = e;}
0
public void setFailure(boolean f)
{    failure = f;}
0
public void setFailureMessage(String message)
{    failureMessage = message;}
0
public AssertionResult setResultForFailure(String message)
{    error = false;    failure = true;    failureMessage = message;    return this;}
0
public AssertionResult setResultForNull()
{    error = false;    failure = true;    failureMessage = RESPONSE_WAS_NULL;    return this;}
0
public String toString()
{    return getName() != null ? getName() : super.toString();}
0
public List<String> getSearchableTokens() throws Exception
{    List<String> datasToSearch = new ArrayList<>(2);    datasToSearch.add(getName());    datasToSearch.add(getFailureMessage());    return datasToSearch;}
0
public void addToBaseResult(String resultData)
{    comparedResults.addToBaseResult(resultData);}
0
public void addToSecondaryResult(String resultData)
{    comparedResults.addToSecondaryResult(resultData);}
0
public String getBaseResult()
{    return comparedResults.baseResult;}
0
public String getSecondaryResult()
{    return comparedResults.secondaryResult;}
0
public void addToBaseResult(String r)
{    if (baseResult == null) {        baseResult = r;    } else {                baseResult = baseResult + "\n\n" + r;    }}
0
public void addToSecondaryResult(String r)
{    if (secondaryResult == null) {        secondaryResult = r;    } else {                secondaryResult = secondaryResult + "\n\n" + r;    }}
0
public Collection<String> getMenuCategories()
{    return Arrays.asList(MenuFactory.ASSERTIONS);}
0
public void setName(String newName)
{    setProperty(new StringProperty(ARG_NAME, newName));}
0
public String getName()
{    return getPropertyAsString(ARG_NAME);}
0
public void setValue(String newValue)
{    setProperty(new StringProperty(VALUE, newValue));}
0
public String getValue()
{    return getPropertyAsString(VALUE);}
0
public void setDescription(String description)
{    setProperty(DESCRIPTION, description, DFLT_DESCRIPTION);}
0
public String getDescription()
{    return getPropertyAsString(DESCRIPTION, DFLT_DESCRIPTION);}
0
public void setMetaData(String newMetaData)
{    setProperty(new StringProperty(METADATA, newMetaData));}
0
public String getMetaData()
{    return getPropertyAsString(METADATA);}
0
public String toString()
{    final String desc = getDescription();    if (DFLT_DESCRIPTION.equals(desc)) {        return getName() + getMetaData() + getValue();    } else {        return getName() + getMetaData() + getValue() + " //" + getDescription();    }}
0
public boolean isSkippable(String parameterName)
{    if (JOrphanUtils.isBlank(parameterName)) {                return true;    }        if (parameterName.trim().startsWith("${") && parameterName.endsWith("}")) {                return true;    }    return false;}
0
public CollectionProperty getArguments()
{    return (CollectionProperty) getProperty(ARGUMENTS);}
0
public void clear()
{    super.clear();    setProperty(new CollectionProperty(ARGUMENTS, new ArrayList<Argument>()));}
0
public void setArguments(List<Argument> arguments)
{    setProperty(new CollectionProperty(ARGUMENTS, arguments));}
0
public Map<String, String> getArgumentsAsMap()
{    PropertyIterator iter = getArguments().iterator();    Map<String, String> argMap = new LinkedHashMap<>();    while (iter.hasNext()) {        Argument arg = (Argument) iter.next().getObjectValue();                if (!argMap.containsKey(arg.getName())) {            argMap.put(arg.getName(), arg.getValue());        }    }    return argMap;}
0
public void addArgument(String name, String value)
{    addArgument(new Argument(name, value, null));}
0
public void addArgument(Argument arg)
{    TestElementProperty newArg = new TestElementProperty(arg.getName(), arg);    if (isRunningVersion()) {        this.setTemporary(newArg);    }    getArguments().addItem(newArg);}
0
public void addArgument(String name, String value, String metadata)
{    addArgument(new Argument(name, value, metadata));}
0
public void addArgument(String name, String value, String metadata, String description)
{    addArgument(new Argument(name, value, metadata, description));}
0
public PropertyIterator iterator()
{    return getArguments().iterator();}
0
public String toString()
{    StringBuilder str = new StringBuilder();    PropertyIterator iter = getArguments().iterator();    while (iter.hasNext()) {        Argument arg = (Argument) iter.next().getObjectValue();        final String metaData = arg.getMetaData();        str.append(arg.getName());        if (metaData == null) {                        str.append("=");        } else {            str.append(metaData);        }        str.append(arg.getValue());        final String desc = arg.getDescription();        if (desc != null) {            str.append("(");            str.append(desc);            str.append(")");        }        if (iter.hasNext()) {                        str.append("&");        }    }    return str.toString();}
0
public void removeArgument(int row)
{    if (row < getArguments().size()) {        getArguments().remove(row);    }}
0
public void removeArgument(Argument arg)
{    PropertyIterator iter = getArguments().iterator();    while (iter.hasNext()) {        Argument item = (Argument) iter.next().getObjectValue();        if (arg.equals(item)) {            iter.remove();        }    }}
0
public void removeArgument(String argName)
{    PropertyIterator iter = getArguments().iterator();    while (iter.hasNext()) {        Argument arg = (Argument) iter.next().getObjectValue();        if (arg.getName().equals(argName)) {            iter.remove();        }    }}
0
public void removeArgument(String argName, String argValue)
{    PropertyIterator iter = getArguments().iterator();    while (iter.hasNext()) {        Argument arg = (Argument) iter.next().getObjectValue();        if (arg.getName().equals(argName) && argValue.equals(arg.getValue())) {            iter.remove();        }    }}
0
public void removeAllArguments()
{    getArguments().clear();}
0
public void addEmptyArgument()
{    addArgument(new Argument("", "", null));}
0
public int getArgumentCount()
{    return getArguments().size();}
0
public Argument getArgument(int row)
{    Argument argument = null;    if (row < getArguments().size()) {        argument = (Argument) getArguments().get(row).getObjectValue();    }    return argument;}
0
public void addTestElement(TestElement parm1)
{    if (parm1 instanceof ConfigTestElement) {        mergeIn(parm1);    }}
0
public void addConfigElement(ConfigElement config)
{    mergeIn((TestElement) config);}
0
public boolean expectsModification()
{    return false;}
0
public JPopupMenu createPopupMenu()
{    return MenuFactory.getDefaultConfigElementMenu();}
0
public Collection<String> getMenuCategories()
{    return Arrays.asList(MenuFactory.CONFIG_ELEMENTS);}
0
public Collection<String> getMenuCategories()
{    if (standalone) {        return super.getMenuCategories();    }    return null;}
0
public String getLabelResource()
{        return "user_defined_variables";}
0
public TestElement createTestElement()
{    Arguments args = new Arguments();    modifyTestElement(args);    return args;}
0
public void modifyTestElement(TestElement args)
{    GuiUtils.stopTableEditing(table);    if (args instanceof Arguments) {        Arguments arguments = (Arguments) args;        arguments.clear();                @SuppressWarnings("unchecked")        Iterator<Argument> modelData = (Iterator<Argument>) tableModel.iterator();        while (modelData.hasNext()) {            Argument arg = modelData.next();            if (StringUtils.isEmpty(arg.getName()) && StringUtils.isEmpty(arg.getValue())) {                continue;            }                        arg.setMetaData("=");            arguments.addArgument(arg);        }    }    super.configureTestElement(args);}
0
public void configure(TestElement el)
{    super.configure(el);    if (el instanceof Arguments) {        tableModel.clearData();        for (JMeterProperty jMeterProperty : (Arguments) el) {            Argument arg = (Argument) jMeterProperty.getObjectValue();            tableModel.addRow(arg);        }    }    checkButtonsStatus();}
0
protected JTable getTable()
{    return table;}
0
protected JLabel getTableLabel()
{    return tableLabel;}
0
protected JButton getDeleteButton()
{    return delete;}
0
protected JButton getAddButton()
{    return add;}
0
protected void checkButtonsStatus()
{    if (!disableButtons) {                if (tableModel.getRowCount() == 0) {            delete.setEnabled(false);            showDetail.setEnabled(false);        } else {            delete.setEnabled(true);            showDetail.setEnabled(true);        }        if (enableUpDown) {            if (tableModel.getRowCount() > 1) {                up.setEnabled(true);                down.setEnabled(true);            } else {                up.setEnabled(false);                down.setEnabled(false);            }        }    }}
0
public void clearGui()
{    super.clearGui();    clear();}
0
public void clear()
{    GuiUtils.stopTableEditing(table);    tableModel.clearData();}
0
public void actionPerformed(ActionEvent e)
{    if (!disableButtons) {        String action = e.getActionCommand();        if (action.equals(DELETE)) {            deleteArgument();        } else if (action.equals(ADD)) {            addArgument();        } else if (action.equals(ADD_FROM_CLIPBOARD)) {            addFromClipboard();        } else if (action.equals(UP)) {            moveUp();        } else if (action.equals(DOWN)) {            moveDown();        } else if (action.equals(DETAIL)) {            showDetail();        }    }}
0
private void moveDown()
{            int[] rowsSelected = table.getSelectedRows();    GuiUtils.stopTableEditing(table);    if (rowsSelected.length > 0 && rowsSelected[rowsSelected.length - 1] < table.getRowCount() - 1) {        table.clearSelection();        for (int i = rowsSelected.length - 1; i >= 0; i--) {            int rowSelected = rowsSelected[i];            tableModel.moveRow(rowSelected, rowSelected + 1, rowSelected + 1);        }        for (int rowSelected : rowsSelected) {            table.addRowSelectionInterval(rowSelected + 1, rowSelected + 1);        }        scrollToRowIfNotVisible(rowsSelected[0] + 1);    }}
0
private void scrollToRowIfNotVisible(int rowIndex)
{    if (table.getParent() instanceof JViewport) {        Rectangle visibleRect = table.getVisibleRect();        final int cellIndex = 0;        Rectangle cellRect = table.getCellRect(rowIndex, cellIndex, false);        if (visibleRect.y > cellRect.y) {            table.scrollRectToVisible(cellRect);        } else {            Rectangle rect2 = table.getCellRect(rowIndex + getNumberOfVisibleRows(table), cellIndex, true);            int width = rect2.y - cellRect.y;            table.scrollRectToVisible(new Rectangle(cellRect.x, cellRect.y, cellRect.width, cellRect.height + width));        }    }}
0
private static int getNumberOfVisibleRows(JTable table)
{    Rectangle vr = table.getVisibleRect();    int first = table.rowAtPoint(vr.getLocation());    vr.translate(0, vr.height);    return table.rowAtPoint(vr.getLocation()) - first;}
0
private void moveUp()
{            int[] rowsSelected = table.getSelectedRows();    GuiUtils.stopTableEditing(table);    if (rowsSelected.length > 0 && rowsSelected[0] > 0) {        table.clearSelection();        for (int rowSelected : rowsSelected) {            tableModel.moveRow(rowSelected, rowSelected + 1, rowSelected - 1);        }        for (int rowSelected : rowsSelected) {            table.addRowSelectionInterval(rowSelected - 1, rowSelected - 1);        }        scrollToRowIfNotVisible(rowsSelected[0] - 1);    }}
0
private void showDetail()
{            int[] rowsSelected = table.getSelectedRows();    GuiUtils.stopTableEditing(table);    if (rowsSelected.length == 1) {        table.clearSelection();        RowDetailDialog detailDialog = new RowDetailDialog(tableModel, rowsSelected[0]);        detailDialog.setVisible(true);    }}
0
protected void deleteArgument()
{    GuiUtils.cancelEditing(table);    int[] rowsSelected = table.getSelectedRows();    int anchorSelection = table.getSelectionModel().getAnchorSelectionIndex();    table.clearSelection();    if (rowsSelected.length > 0) {        for (int i = rowsSelected.length - 1; i >= 0; i--) {            tableModel.removeRow(rowsSelected[i]);        }                if (tableModel.getRowCount() > 0) {            if (anchorSelection >= tableModel.getRowCount()) {                anchorSelection = tableModel.getRowCount() - 1;            }            table.setRowSelectionInterval(anchorSelection, anchorSelection);        }        checkButtonsStatus();    }}
0
protected void addArgument()
{            GuiUtils.stopTableEditing(table);    tableModel.addRow(makeNewArgument());    checkButtonsStatus();        int rowToSelect = tableModel.getRowCount() - 1;    table.setRowSelectionInterval(rowToSelect, rowToSelect);    table.scrollRectToVisible(table.getCellRect(rowToSelect, 0, true));}
0
protected void addFromClipboard(String lineDelimiter, String argDelimiter)
{    GuiUtils.stopTableEditing(table);    int rowCount = table.getRowCount();    try {        String clipboardContent = GuiUtils.getPastedText();        if (clipboardContent == null) {            return;        }        String[] clipboardLines = clipboardContent.split(lineDelimiter);        for (String clipboardLine : clipboardLines) {            String[] clipboardCols = clipboardLine.split(argDelimiter);            if (clipboardCols.length > 0) {                Argument argument = createArgumentFromClipboard(clipboardCols);                tableModel.addRow(argument);            }        }        if (table.getRowCount() > rowCount) {            checkButtonsStatus();                        int rowToSelect = tableModel.getRowCount() - 1;            table.setRowSelectionInterval(rowCount, rowToSelect);            table.scrollRectToVisible(table.getCellRect(rowCount, 0, true));        }    } catch (IOException ioe) {        JOptionPane.showMessageDialog(this, "Could not add read arguments from clipboard:\n" + ioe.getLocalizedMessage(), "Error", JOptionPane.ERROR_MESSAGE);    } catch (UnsupportedFlavorException ufe) {        JOptionPane.showMessageDialog(this, "Could not add retrieve " + DataFlavor.stringFlavor.getHumanPresentableName() + " from clipboard" + ufe.getLocalizedMessage(), "Error", JOptionPane.ERROR_MESSAGE);    }}
0
protected void addFromClipboard()
{    addFromClipboard(CLIPBOARD_LINE_DELIMITERS, CLIPBOARD_ARG_DELIMITERS);}
0
protected Argument createArgumentFromClipboard(String[] clipboardCols)
{    Argument argument = makeNewArgument();    argument.setName(clipboardCols[0]);    if (clipboardCols.length > 1) {        argument.setValue(clipboardCols[1]);        if (clipboardCols.length > 2) {            argument.setDescription(clipboardCols[2]);        }    }    return argument;}
0
protected Argument makeNewArgument()
{        return new Argument("", "");}
0
protected void stopTableEditing()
{    GuiUtils.stopTableEditing(table);}
0
protected void initializeTableModel()
{    if (tableModel == null) {        if (standalone) {            tableModel = new ObjectTableModel(new String[] { COLUMN_RESOURCE_NAMES_0, COLUMN_RESOURCE_NAMES_1, COLUMN_RESOURCE_NAMES_2 }, Argument.class, new Functor[] {             new Functor("getName"),             new Functor("getValue"),             new Functor("getDescription") }, new Functor[] {             new Functor("setName"),             new Functor("setValue"),             new Functor("setDescription") }, new Class[] { String.class, String.class, String.class });        } else {            tableModel = new ObjectTableModel(new String[] { COLUMN_RESOURCE_NAMES_0, COLUMN_RESOURCE_NAMES_1 }, Argument.class, new Functor[] {             new Functor("getName"),             new Functor("getValue") }, new Functor[] {             new Functor("setName"),             new Functor("setValue") }, new Class[] { String.class, String.class });        }    }}
0
public static boolean testFunctors()
{    ArgumentsPanel instance = new ArgumentsPanel();    instance.initializeTableModel();    return instance.tableModel.checkFunctors(null, instance.getClass());}
0
protected void sizeColumns(JTable _table)
{}
0
private Component makeMainPanel()
{    initializeTableModel();    table = new JTable(tableModel);    table.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());    table.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);    if (this.background != null) {        table.setBackground(this.background);    }    JMeterUtils.applyHiDPI(table);    return makeScrollPane(table);}
0
protected Component makeLabelPanel()
{    JPanel labelPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));    labelPanel.add(tableLabel);    if (this.background != null) {        labelPanel.setBackground(this.background);    }    return labelPanel;}
0
private JPanel makeButtonPanel()
{        showDetail = new JButton(JMeterUtils.getResString("detail"));    showDetail.setActionCommand(DETAIL);    showDetail.setEnabled(true);        add = new JButton(JMeterUtils.getResString("add"));    add.setActionCommand(ADD);    add.setEnabled(true);            JButton addFromClipboard = new JButton(JMeterUtils.getResString("add_from_clipboard"));    addFromClipboard.setActionCommand(ADD_FROM_CLIPBOARD);    addFromClipboard.setEnabled(true);        delete = new JButton(JMeterUtils.getResString("delete"));    delete.setActionCommand(DELETE);    if (enableUpDown) {                up = new JButton(JMeterUtils.getResString("up"));        up.setActionCommand(UP);                down = new JButton(JMeterUtils.getResString("down"));        down.setActionCommand(DOWN);    }    checkButtonsStatus();    JPanel buttonPanel = new JPanel();    buttonPanel.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 10));    if (this.background != null) {        buttonPanel.setBackground(this.background);    }    showDetail.addActionListener(this);    add.addActionListener(this);    addFromClipboard.addActionListener(this);    delete.addActionListener(this);    buttonPanel.add(showDetail);    buttonPanel.add(add);    buttonPanel.add(addFromClipboard);    buttonPanel.add(delete);    if (enableUpDown) {        up.addActionListener(this);        down.addActionListener(this);        buttonPanel.add(up);        buttonPanel.add(down);    }    return buttonPanel;}
0
private void init()
{        JPanel p = this;    if (standalone) {        setLayout(new BorderLayout(0, 5));        setBorder(makeBorder());        add(makeTitlePanel(), BorderLayout.NORTH);        p = new JPanel();    }    p.setLayout(new BorderLayout());    p.add(makeLabelPanel(), BorderLayout.NORTH);    p.add(makeMainPanel(), BorderLayout.CENTER);        p.add(Box.createVerticalStrut(70), BorderLayout.WEST);    if (!disableButtons) {        p.add(makeButtonPanel(), BorderLayout.SOUTH);    }    if (standalone) {        add(p, BorderLayout.CENTER);    }    table.revalidate();    sizeColumns(table);}
0
public String getLabelResource()
{        return "login_config_element";}
0
public void configure(TestElement element)
{    super.configure(element);    username.setText(element.getPropertyAsString(ConfigTestElement.USERNAME));    password.setText(element.getPropertyAsString(ConfigTestElement.PASSWORD));}
0
public TestElement createTestElement()
{    ConfigTestElement element = new ConfigTestElement();    modifyTestElement(element);    return element;}
0
public void modifyTestElement(TestElement element)
{    configureTestElement(element);    element.setProperty(new StringProperty(ConfigTestElement.USERNAME, username.getText()));    String passwordString = new String(password.getPassword());    element.setProperty(new StringProperty(ConfigTestElement.PASSWORD, passwordString));}
0
public void clearGui()
{    super.clearGui();        username.setText("");        password.setText("");}
0
private void init()
{        setLayout(new BorderLayout(0, 5));    if (displayName) {        setBorder(makeBorder());        add(makeTitlePanel(), BorderLayout.NORTH);    }    VerticalPanel mainPanel = new VerticalPanel();    mainPanel.add(createUsernamePanel());    mainPanel.add(createPasswordPanel());    add(mainPanel, BorderLayout.CENTER);}
0
private JPanel createUsernamePanel()
{    JPanel panel = new JPanel(new BorderLayout(5, 0));        JLabel label = new JLabel(JMeterUtils.getResString("username"));    label.setLabelFor(username);    panel.add(label, BorderLayout.WEST);    panel.add(username, BorderLayout.CENTER);    return panel;}
0
private JPanel createPasswordPanel()
{    JPanel panel = new JPanel(new BorderLayout(5, 0));        JLabel label = new JLabel(JMeterUtils.getResString("password"));    label.setLabelFor(password);    panel.add(label, BorderLayout.WEST);    panel.add(password, BorderLayout.CENTER);    return panel;}
0
private void init()
{        setLayout(new BorderLayout(0, 10));    setBorder(makeBorder());    add(obsoleteMessage, BorderLayout.WEST);}
0
public String getLabelResource()
{        return "obsolete_test_element";}
0
public TestElement createTestElement()
{    return new ConfigTestElement();}
0
public void modifyTestElement(TestElement element)
{}
0
public JPopupMenu createPopupMenu()
{    return null;}
0
public Collection<String> getMenuCategories()
{    return null;}
0
protected JRootPane createRootPane()
{    JRootPane rootPane = new JRootPane();        Action escapeAction = new AbstractAction("ESCAPE") {        private static final long serialVersionUID = -8699034338969407625L;        @Override        public void actionPerformed(ActionEvent actionEvent) {            setVisible(false);        }    };        Action enterAction = new AbstractAction("ENTER") {        private static final long serialVersionUID = -1529005452976176873L;        @Override        public void actionPerformed(ActionEvent actionEvent) {            doUpdate(actionEvent);            setVisible(false);        }    };    ActionMap actionMap = rootPane.getActionMap();    actionMap.put(escapeAction.getValue(Action.NAME), escapeAction);    actionMap.put(enterAction.getValue(Action.NAME), enterAction);    InputMap inputMap = rootPane.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);    inputMap.put(KeyStrokes.ESC, escapeAction.getValue(Action.NAME));    inputMap.put(KeyStrokes.ENTER, enterAction.getValue(Action.NAME));    return rootPane;}
0
public void actionPerformed(ActionEvent actionEvent)
{    setVisible(false);}
0
public void actionPerformed(ActionEvent actionEvent)
{    doUpdate(actionEvent);    setVisible(false);}
0
private void init()
{        this.getContentPane().setLayout(new BorderLayout(10, 10));        nameLabel = new JLabel(JMeterUtils.getResString("name"));        nameTF = new JTextField(JMeterUtils.getResString("name"), 20);    nameTF.getDocument().addDocumentListener(this);    JPanel namePane = new JPanel(new BorderLayout());    namePane.add(nameLabel, BorderLayout.WEST);    namePane.add(nameTF, BorderLayout.CENTER);        valueLabel = new JLabel(JMeterUtils.getResString("value"));    valueTA = JSyntaxTextArea.getInstance(30, 80);    valueTA.getDocument().addDocumentListener(this);    setValues(selectedRow);    JPanel valuePane = new JPanel(new BorderLayout());    valuePane.add(valueLabel, BorderLayout.NORTH);    JTextScrollPane jTextScrollPane = JTextScrollPane.getInstance(valueTA);    valuePane.add(jTextScrollPane, BorderLayout.CENTER);    JPanel detailPanel = new JPanel(new BorderLayout());    detailPanel.add(namePane, BorderLayout.NORTH);    detailPanel.add(valuePane, BorderLayout.CENTER);    JPanel mainPanel = new JPanel();    mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));    mainPanel.setBorder(BorderFactory.createEmptyBorder(7, 3, 3, 3));    mainPanel.add(detailPanel, BorderLayout.CENTER);    JPanel buttonsPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));        JButton updateButton = new JButton(JMeterUtils.getResString("update"));    updateButton.setActionCommand(UPDATE);    updateButton.addActionListener(this);        closeButton = new JButton(JMeterUtils.getResString("close"));    closeButton.setActionCommand(CLOSE);    closeButton.addActionListener(this);        nextButton = new JButton(JMeterUtils.getResString("next"));    nextButton.setActionCommand(NEXT);    nextButton.addActionListener(this);    nextButton.setEnabled(selectedRow < tableModel.getRowCount() - 1);        previousButton = new JButton(JMeterUtils.getResString("previous"));    previousButton.setActionCommand(PREVIOUS);    previousButton.addActionListener(this);    previousButton.setEnabled(selectedRow > 0);    buttonsPanel.add(updateButton);    buttonsPanel.add(previousButton);    buttonsPanel.add(nextButton);    buttonsPanel.add(closeButton);    mainPanel.add(buttonsPanel, BorderLayout.SOUTH);    this.getContentPane().add(mainPanel);    nameTF.requestFocusInWindow();    this.pack();    ComponentUtil.centerComponentInWindow(this);}
0
public void actionPerformed(ActionEvent e)
{    String action = e.getActionCommand();    if (action.equals(CLOSE)) {        this.setVisible(false);    } else if (action.equals(NEXT)) {        selectedRow++;        previousButton.setEnabled(true);        nextButton.setEnabled(selectedRow < tableModel.getRowCount() - 1);        setValues(selectedRow);    } else if (action.equals(PREVIOUS)) {        selectedRow--;        nextButton.setEnabled(true);        previousButton.setEnabled(selectedRow > 0);        setValues(selectedRow);    } else if (action.equals(UPDATE)) {        doUpdate(e);    }}
0
private void setValues(int selectedRow)
{    nameTF.setText((String) tableModel.getValueAt(selectedRow, 0));    valueTA.setInitialText((String) tableModel.getValueAt(selectedRow, 1));    valueTA.setCaretPosition(0);    textChanged = false;}
0
protected void doUpdate(ActionEvent actionEvent)
{    tableModel.setValueAt(nameTF.getText(), selectedRow, 0);    tableModel.setValueAt(valueTA.getText(), selectedRow, 1);            closeButton.setText(JMeterUtils.getResString("close"));    textChanged = false;}
0
private void changeLabelButton()
{    if (!textChanged) {                closeButton.setText(JMeterUtils.getResString("cancel"));        textChanged = true;    }}
0
public void insertUpdate(DocumentEvent e)
{    changeLabelButton();}
0
public void removeUpdate(DocumentEvent e)
{    changeLabelButton();}
0
public void changedUpdate(DocumentEvent e)
{    changeLabelButton();}
0
public String getLabelResource()
{        return "simple_config_element";}
0
public void configure(TestElement el)
{    super.configure(el);    tableModel.clearData();    PropertyIterator iter = el.propertyIterator();    while (iter.hasNext()) {        JMeterProperty prop = iter.next();        tableModel.addRow(new Object[] { prop.getName(), prop.getStringValue() });    }    checkDeleteStatus();}
0
public TestElement createTestElement()
{    TestElement el = new ConfigTestElement();    modifyTestElement(el);    return el;}
0
public void modifyTestElement(TestElement el)
{    GuiUtils.stopTableEditing(table);    Data model = tableModel.getData();    model.reset();    while (model.next()) {        el.setProperty(new StringProperty((String) model.getColumnValue(COLUMN_NAMES_0), (String) model.getColumnValue(COLUMN_NAMES_1)));    }    super.configureTestElement(el);}
0
private void init()
{        setLayout(new BorderLayout(0, 10));    if (displayName) {        setBorder(makeBorder());        add(makeTitlePanel(), BorderLayout.NORTH);    }    add(createTablePanel(), BorderLayout.CENTER);        add(Box.createVerticalStrut(70), BorderLayout.WEST);    add(createButtonPanel(), BorderLayout.SOUTH);}
0
public void actionPerformed(ActionEvent e)
{    String action = e.getActionCommand();    if (action.equals(DELETE)) {        deleteArgument();    } else if (action.equals(ADD)) {        addArgument();    }}
0
private Component createTablePanel()
{    tableModel = new PowerTableModel(new String[] { COLUMN_NAMES_0, COLUMN_NAMES_1 }, new Class[] { String.class, String.class });    table = new JTable(tableModel);    JMeterUtils.applyHiDPI(table);    table.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());    table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);    return makeScrollPane(table);}
0
private JPanel createButtonPanel()
{    /**     * A button for adding new parameters to the table.     */        JButton add = new JButton(JMeterUtils.getResString("add"));    add.setActionCommand(ADD);    add.addActionListener(this);    add.setEnabled(true);        delete = new JButton(JMeterUtils.getResString("delete"));    delete.setActionCommand(DELETE);    delete.addActionListener(this);    checkDeleteStatus();    JPanel buttonPanel = new JPanel();    buttonPanel.add(add);    buttonPanel.add(delete);    return buttonPanel;}
0
protected void checkDeleteStatus()
{        if (tableModel.getRowCount() == 0) {        delete.setEnabled(false);    } else {        delete.setEnabled(true);    }}
0
protected void addArgument()
{            GuiUtils.stopTableEditing(table);    tableModel.addNewRow();    tableModel.fireTableDataChanged();        delete.setEnabled(true);        int rowToSelect = tableModel.getRowCount() - 1;    table.setRowSelectionInterval(rowToSelect, rowToSelect);}
0
protected void stopTableEditing()
{    GuiUtils.stopTableEditing(table);}
0
protected void deleteArgument()
{            GuiUtils.cancelEditing(table);    int rowSelected = table.getSelectedRow();    if (rowSelected >= 0) {        tableModel.removeRow(rowSelected);        tableModel.fireTableDataChanged();                if (tableModel.getRowCount() == 0) {            delete.setEnabled(false);        } else {                                    int rowToSelect = rowSelected;            if (rowSelected >= tableModel.getRowCount()) {                rowToSelect = rowSelected - 1;            }            table.setRowSelectionInterval(rowToSelect, rowToSelect);        }    }}
0
public void setUsername(String username)
{    setProperty(new StringProperty(ConfigTestElement.USERNAME, username));}
0
public void setPassword(String password)
{    setProperty(new StringProperty(ConfigTestElement.PASSWORD, password));}
0
public String getUsername()
{    return getPropertyAsString(ConfigTestElement.USERNAME);}
0
public String getPassword()
{    return getPropertyAsString(ConfigTestElement.PASSWORD);}
0
public String toString()
{        return getUsername() + "=" + getPassword();}
0
public void initialize()
{    resetCurrent();    resetIterCount();        done = false;        first = true;    initializeSubControllers();}
0
protected void initializeSubControllers()
{    for (TestElement te : subControllersAndSamplers) {        if (te instanceof GenericController) {            ((Controller) te).initialize();        }    }}
0
protected void reInitialize()
{    resetCurrent();    incrementIterCount();    setFirst(true);    recoverRunningVersion();}
0
public Sampler next()
{    fireIterEvents();        if (isDone()) {        return null;    }    Sampler returnValue = null;    try {        TestElement currentElement = getCurrentElement();        setCurrentElement(currentElement);        if (currentElement == null) {            returnValue = nextIsNull();        } else {            if (currentElement instanceof Sampler) {                returnValue = nextIsASampler((Sampler) currentElement);            } else {                                returnValue = nextIsAController((Controller) currentElement);            }        }    } catch (NextIsNullException e) {        }    return returnValue;}
1
public boolean isDone()
{    return done;}
0
protected void setDone(boolean done)
{    this.done = done;}
0
protected boolean isFirst()
{    return first;}
0
public void setFirst(boolean b)
{    first = b;}
0
protected Sampler nextIsAController(Controller controller) throws NextIsNullException
{        Sampler sampler = controller.next();    if (sampler == null) {        currentReturnedNull(controller);        sampler = next();    }    return sampler;}
0
protected Sampler nextIsASampler(Sampler element) throws NextIsNullException
{        incrementCurrent();    return element;}
0
protected Sampler nextIsNull() throws NextIsNullException
{        reInitialize();    return null;}
0
public void triggerEndOfLoop()
{    reInitialize();}
0
protected void currentReturnedNull(Controller c)
{    if (c.isDone()) {        removeCurrentElement();    } else {        incrementCurrent();    }}
0
protected List<TestElement> getSubControllers()
{    return subControllersAndSamplers;}
0
private void addElement(TestElement child)
{    subControllersAndSamplers.add(child);}
0
protected void setCurrentElement(TestElement currentElement) throws NextIsNullException
{}
0
protected TestElement getCurrentElement() throws NextIsNullException
{    if (current < subControllersAndSamplers.size()) {        return subControllersAndSamplers.get(current);    }    if (subControllersAndSamplers.isEmpty()) {        setDone(true);        throw new NextIsNullException();    }    return null;}
0
protected void removeCurrentElement()
{    subControllersAndSamplers.remove(current);}
0
protected void incrementCurrent()
{    current++;}
0
protected void resetCurrent()
{    current = 0;}
0
public void addTestElement(TestElement child)
{    if (child instanceof Controller || child instanceof Sampler) {        addElement(child);    }}
0
public final boolean addTestElementOnce(TestElement child)
{    if (children.putIfAbsent(child, DUMMY) == null) {        addTestElement(child);        return true;    }    return false;}
0
public void addIterationListener(LoopIterationListener lis)
{    /*         * A little hack - add each listener to the start of the list - this         * ensures that the thread running the show is the first listener and         * can modify certain values before other listeners are called.         */    iterationListeners.addFirst(lis);}
0
public void removeIterationListener(LoopIterationListener iterationListener)
{    for (Iterator<LoopIterationListener> iterator = iterationListeners.iterator(); iterator.hasNext(); ) {        LoopIterationListener listener = iterator.next();        if (listener == iterationListener) {            iterator.remove();                        break;        }    }}
0
protected void fireIterEvents()
{    if (isFirst()) {        fireIterationStart();                first = false;    }}
0
protected void fireIterationStart()
{    LoopIterationEvent event = new LoopIterationEvent(this, getIterCount());    for (LoopIterationListener item : iterationListeners) {        item.iterationStart(event);    }}
0
protected int getIterCount()
{    return iterCount;}
0
protected void incrementIterCount()
{    iterCount++;}
0
protected void resetIterCount()
{    iterCount = 0;}
0
protected Object readResolve()
{    iterationListeners = new LinkedList<>();    children = new ConcurrentHashMap<>();    subControllersAndSamplers = new ArrayList<>();    return this;}
0
public JPopupMenu createPopupMenu()
{    return MenuFactory.getDefaultControllerMenu();}
0
public Collection<String> getMenuCategories()
{    return Arrays.asList(MenuFactory.CONTROLLERS);}
0
public void configure(TestElement element)
{    super.configure(element);    if (element instanceof IfController) {        IfController ifController = (IfController) element;        theCondition.setText(ifController.getCondition());        evaluateAll.setSelected(ifController.isEvaluateAll());        useExpression.setSelected(ifController.isUseExpression());    }}
0
public TestElement createTestElement()
{    IfController controller = new IfController();    modifyTestElement(controller);    return controller;}
0
public void modifyTestElement(TestElement controller)
{    configureTestElement(controller);    if (controller instanceof IfController) {        IfController ifController = (IfController) controller;        ifController.setCondition(theCondition.getText());        ifController.setEvaluateAll(evaluateAll.isSelected());        ifController.setUseExpression(useExpression.isSelected());    }}
0
public void clearGui()
{    super.clearGui();    useExpression.setSelected(true);        theCondition.setText("");    evaluateAll.setSelected(false);}
0
public String getLabelResource()
{        return "if_controller_title";}
0
private void init()
{        if (displayName) {        setLayout(new BorderLayout(0, 5));        setBorder(makeBorder());        add(makeTitlePanel(), BorderLayout.NORTH);        JPanel mainPanel = new JPanel(new BorderLayout());        mainPanel.add(createConditionPanel(), BorderLayout.NORTH);        add(mainPanel, BorderLayout.CENTER);    } else {                setLayout(new BorderLayout());        add(createConditionPanel(), BorderLayout.NORTH);    }}
0
private JPanel createConditionPanel()
{    JPanel conditionPanel = new JPanel(new BorderLayout(5, 0));            conditionLabel = new JLabel(JMeterUtils.getResString("if_controller_label"));    conditionPanel.add(conditionLabel, BorderLayout.WEST);    ImageIcon image = JMeterUtils.getImage("warning.png");        warningLabel = new JLabel(JMeterUtils.getResString("if_controller_warning"), image, SwingConstants.CENTER);    warningLabel.setForeground(Color.RED);    Font font = warningLabel.getFont();    warningLabel.setFont(new Font(font.getFontName(), Font.BOLD, (int) (font.getSize() * 1.1)));            theCondition = JSyntaxTextArea.getInstance(5, 50);    conditionLabel.setLabelFor(theCondition);    conditionPanel.add(JTextScrollPane.getInstance(theCondition), BorderLayout.CENTER);    conditionPanel.add(warningLabel, BorderLayout.NORTH);    JPanel optionPanel = new JPanel();            useExpression = new JCheckBox(JMeterUtils.getResString("if_controller_expression"));    useExpression.addChangeListener(this);    optionPanel.add(useExpression);            evaluateAll = new JCheckBox(JMeterUtils.getResString("if_controller_evaluate_all"));    optionPanel.add(evaluateAll);    conditionPanel.add(optionPanel, BorderLayout.SOUTH);    return conditionPanel;}
0
public void stateChanged(ChangeEvent e)
{    if (e.getSource() == useExpression) {        if (useExpression.isSelected()) {            warningLabel.setForeground(Color.BLACK);            conditionLabel.setText(JMeterUtils.getResString("if_controller_expression_label"));        } else {            warningLabel.setForeground(Color.RED);            conditionLabel.setText(JMeterUtils.getResString("if_controller_label"));        }    }}
0
public TestElement createTestElement()
{    GenericController lc = new GenericController();    configureTestElement(lc);    return lc;}
0
public void modifyTestElement(TestElement el)
{    configureTestElement(el);}
0
public String getLabelResource()
{        return "logic_controller_title";}
0
private void init()
{        setLayout(new BorderLayout());    setBorder(makeBorder());    add(makeTitlePanel(), BorderLayout.NORTH);}
0
public void configure(TestElement element)
{    super.configure(element);    if (element instanceof LoopController) {        setState(((LoopController) element).getLoopString());    } else {        setState(1);    }}
0
public TestElement createTestElement()
{    LoopController lc = new LoopController();    modifyTestElement(lc);    return lc;}
0
public void modifyTestElement(TestElement lc)
{    configureTestElement(lc);    if (lc instanceof LoopController) {        if (loops.getText().length() > 0) {            ((LoopController) lc).setLoops(loops.getText());        } else {            ((LoopController) lc).setLoops(LoopController.INFINITE_LOOP_COUNT);        }    }}
0
public void clearGui()
{    super.clearGui();        loops.setText("1");    infinite.setSelected(false);}
0
public void actionPerformed(ActionEvent event)
{    if (infinite.isSelected()) {                loops.setText("");        loops.setEnabled(false);    } else {        loops.setEnabled(true);        FocusRequester.requestFocus(loops);    }}
0
public String getLabelResource()
{        return "loop_controller_title";}
0
private void init()
{        if (displayName) {        setLayout(new BorderLayout(0, 5));        setBorder(makeBorder());        add(makeTitlePanel(), BorderLayout.NORTH);        JPanel mainPanel = new JPanel(new BorderLayout());        mainPanel.add(createLoopCountPanel(), BorderLayout.NORTH);        add(mainPanel, BorderLayout.CENTER);    } else {                setLayout(new BorderLayout());        add(createLoopCountPanel(), BorderLayout.NORTH);    }}
0
private JPanel createLoopCountPanel()
{    JPanel loopPanel = new JPanel(new BorderLayout(5, 0));            JLabel loopsLabel = new JLabel(JMeterUtils.getResString("iterator_num"));    loopPanel.add(loopsLabel, BorderLayout.WEST);    JPanel loopSubPanel = new JPanel(new BorderLayout(5, 0));            loops = new JTextField("1", 5);    loops.setName(LOOPS);    loopsLabel.setLabelFor(loops);    loopSubPanel.add(loops, BorderLayout.CENTER);            infinite = new JCheckBox(JMeterUtils.getResString("infinite"));    infinite.setActionCommand(INFINITE);    infinite.addActionListener(this);    loopSubPanel.add(infinite, BorderLayout.WEST);    loopPanel.add(loopSubPanel, BorderLayout.CENTER);    loopPanel.add(Box.createHorizontalStrut(loopsLabel.getPreferredSize().width + loops.getPreferredSize().width + infinite.getPreferredSize().width), BorderLayout.NORTH);    return loopPanel;}
0
private void setState(String loopCount)
{    if (loopCount.startsWith("-")) {                setState(LoopController.INFINITE_LOOP_COUNT);    } else {        loops.setText(loopCount);        infinite.setSelected(false);        loops.setEnabled(true);    }}
0
private void setState(int loopCount)
{    if (loopCount <= LoopController.INFINITE_LOOP_COUNT) {        infinite.setSelected(true);        loops.setEnabled(false);                loops.setText("");    } else {        infinite.setSelected(false);        loops.setEnabled(true);        loops.setText(Integer.toString(loopCount));    }}
0
public void configure(TestElement element)
{    super.configure(element);    if (element instanceof RunTime) {        setState(((RunTime) element).getRuntimeString());    } else {        setState(1);    }}
0
public TestElement createTestElement()
{    RunTime lc = new RunTime();    modifyTestElement(lc);    return lc;}
0
public void modifyTestElement(TestElement lc)
{    configureTestElement(lc);    if (lc instanceof RunTime) {        if (seconds.getText().length() > 0) {            ((RunTime) lc).setRuntime(seconds.getText());        } else {            ((RunTime) lc).setRuntime(0);        }    }}
0
public void clearGui()
{    super.clearGui();        seconds.setText("1");}
0
public void actionPerformed(ActionEvent event)
{    seconds.setEnabled(true);}
0
public String getLabelResource()
{        return "runtime_controller_title";}
0
private void init()
{        if (displayName) {        setLayout(new BorderLayout(0, 5));        setBorder(makeBorder());        add(makeTitlePanel(), BorderLayout.NORTH);        JPanel mainPanel = new JPanel(new BorderLayout());        mainPanel.add(createLoopCountPanel(), BorderLayout.NORTH);        add(mainPanel, BorderLayout.CENTER);    } else {                setLayout(new BorderLayout());        add(createLoopCountPanel(), BorderLayout.NORTH);    }}
0
private JPanel createLoopCountPanel()
{    JPanel loopPanel = new JPanel(new BorderLayout(5, 0));            JLabel secondsLabel = new JLabel(JMeterUtils.getResString("runtime_seconds"));    loopPanel.add(secondsLabel, BorderLayout.WEST);    JPanel loopSubPanel = new JPanel(new BorderLayout(5, 0));            seconds = new JTextField("1", 5);    secondsLabel.setLabelFor(seconds);    loopSubPanel.add(seconds, BorderLayout.CENTER);    loopPanel.add(loopSubPanel, BorderLayout.CENTER);    loopPanel.add(Box.createHorizontalStrut(secondsLabel.getPreferredSize().width + seconds.getPreferredSize().width), BorderLayout.NORTH);    return loopPanel;}
0
private void setState(String secsCount)
{    seconds.setText(secsCount);    seconds.setEnabled(true);}
0
private void setState(long secsCount)
{    seconds.setEnabled(true);    seconds.setText(Long.toString(secsCount));}
0
public TestElement createTestElement()
{    TestFragmentController controller = new TestFragmentController();    setEnabled(false);    modifyTestElement(controller);    return controller;}
0
public void modifyTestElement(TestElement controller)
{    configureTestElement(controller);}
0
public String getLabelResource()
{        return "test_fragment_title";}
0
private void init()
{        setLayout(new BorderLayout(0, 5));    setBorder(makeBorder());    add(makeTitlePanel(), BorderLayout.NORTH);}
0
public Collection<String> getMenuCategories()
{    return Arrays.asList(MenuFactory.FRAGMENTS);}
0
public JPopupMenu createPopupMenu()
{    JPopupMenu pop = new JPopupMenu();        JMenu addMenu = new JMenu(JMeterUtils.getResString("add"));    addMenu.add(MenuFactory.makeMenu(MenuFactory.CONTROLLERS, ActionNames.ADD));    addMenu.add(MenuFactory.makeMenu(MenuFactory.CONFIG_ELEMENTS, ActionNames.ADD));    addMenu.add(MenuFactory.makeMenu(MenuFactory.TIMERS, ActionNames.ADD));    addMenu.add(MenuFactory.makeMenu(MenuFactory.PRE_PROCESSORS, ActionNames.ADD));    addMenu.add(MenuFactory.makeMenu(MenuFactory.SAMPLERS, ActionNames.ADD));    addMenu.add(MenuFactory.makeMenu(MenuFactory.POST_PROCESSORS, ActionNames.ADD));    addMenu.add(MenuFactory.makeMenu(MenuFactory.ASSERTIONS, ActionNames.ADD));    addMenu.add(MenuFactory.makeMenu(MenuFactory.LISTENERS, ActionNames.ADD));    pop.add(addMenu);    pop.add(    MenuFactory.makeMenuItemRes(    "add_think_times", ActionNames.ADD_THINK_TIME_BETWEEN_EACH_STEP));    pop.add(    MenuFactory.makeMenuItemRes(    "apply_naming", ActionNames.APPLY_NAMING_CONVENTION));    MenuFactory.addEditMenu(pop, true);    MenuFactory.addFileMenu(pop);    return pop;}
0
public JPopupMenu createPopupMenu()
{    JPopupMenu pop = new JPopupMenu();        JMenu addMenu = new JMenu(JMeterUtils.getResString("add"));    addMenu.add(MenuFactory.makeMenu(MenuFactory.THREADS, ActionNames.ADD));    addMenu.addSeparator();    addMenu.add(MenuFactory.makeMenu(MenuFactory.CONFIG_ELEMENTS, ActionNames.ADD));    addMenu.add(MenuFactory.makeMenu(MenuFactory.LISTENERS, ActionNames.ADD));    addMenu.addSeparator();    addMenu.add(MenuFactory.makeMenu(MenuFactory.TIMERS, ActionNames.ADD));    addMenu.addSeparator();    addMenu.add(MenuFactory.makeMenu(MenuFactory.PRE_PROCESSORS, ActionNames.ADD));    addMenu.add(MenuFactory.makeMenu(MenuFactory.POST_PROCESSORS, ActionNames.ADD));    addMenu.add(MenuFactory.makeMenu(MenuFactory.ASSERTIONS, ActionNames.ADD));    addMenu.addSeparator();    addMenu.add(MenuFactory.makeMenu(MenuFactory.FRAGMENTS, ActionNames.ADD));    addMenu.add(MenuFactory.makeMenu(MenuFactory.NON_TEST_ELEMENTS, ActionNames.ADD));    pop.add(addMenu);    MenuFactory.addPasteResetMenu(pop);    MenuFactory.addFileMenu(pop, false);    return pop;}
0
public TestElement createTestElement()
{    TestPlan tp = new TestPlan();    modifyTestElement(tp);    return tp;}
0
public void modifyTestElement(TestElement plan)
{    super.configureTestElement(plan);    if (plan instanceof TestPlan) {        TestPlan tp = (TestPlan) plan;        tp.setFunctionalMode(functionalMode.isSelected());        tp.setTearDownOnShutdown(tearDownOnShutdown.isSelected());        tp.setSerialized(serializedMode.isSelected());        tp.setUserDefinedVariables((Arguments) argsPanel.createTestElement());        tp.setTestPlanClasspathArray(browseJar.getFiles());    }}
0
public String getLabelResource()
{        return "test_plan";}
0
public Collection<String> getMenuCategories()
{    return null;}
0
public void configure(TestElement el)
{    super.configure(el);    if (el instanceof TestPlan) {        TestPlan tp = (TestPlan) el;        functionalMode.setSelected(tp.isFunctionalMode());        serializedMode.setSelected(tp.isSerialized());        tearDownOnShutdown.setSelected(tp.isTearDownOnShutdown());        final JMeterProperty udv = tp.getUserDefinedVariablesAsProperty();        if (udv != null) {            argsPanel.configure((Arguments) udv.getObjectValue());        }        browseJar.setFiles(tp.getTestPlanClasspathArray());    }}
0
private void init()
{        setLayout(new BorderLayout(10, 10));    setBorder(makeBorder());    add(makeTitlePanel(), BorderLayout.NORTH);    add(argsPanel, BorderLayout.CENTER);    VerticalPanel southPanel = new VerticalPanel();    southPanel.add(serializedMode);    southPanel.add(tearDownOnShutdown);    southPanel.add(functionalMode);        JTextArea explain = new JTextArea(JMeterUtils.getResString("functional_mode_explanation"));    explain.setEditable(false);    explain.setBackground(this.getBackground());    southPanel.add(explain);    southPanel.add(browseJar);    add(southPanel, BorderLayout.SOUTH);}
0
public void clearGui()
{    super.clearGui();    functionalMode.setSelected(false);    serializedMode.setSelected(false);    tearDownOnShutdown.setSelected(true);    argsPanel.clear();    browseJar.clearFiles();}
0
public TestElement createTestElement()
{    TransactionController lc = new TransactionController();        lc.setIncludeTimers(false);    configureTestElement(lc);    return lc;}
0
public void configure(TestElement el)
{    super.configure(el);    generateParentSample.setSelected(((TransactionController) el).isGenerateParentSample());    includeTimers.setSelected(((TransactionController) el).isIncludeTimers());}
0
public void modifyTestElement(TestElement el)
{    configureTestElement(el);    ((TransactionController) el).setGenerateParentSample(generateParentSample.isSelected());    TransactionController tc = (TransactionController) el;    tc.setGenerateParentSample(generateParentSample.isSelected());    tc.setIncludeTimers(includeTimers.isSelected());}
0
public String getLabelResource()
{        return "transaction_controller_title";}
0
private void init()
{        setLayout(new VerticalLayout(5, VerticalLayout.BOTH, VerticalLayout.TOP));    setBorder(makeBorder());    add(makeTitlePanel());        generateParentSample = new JCheckBox(JMeterUtils.getResString("transaction_controller_parent"));    add(CheckBoxPanel.wrap(generateParentSample));        includeTimers = new JCheckBox(JMeterUtils.getResString("transaction_controller_include_timers"), true);    add(CheckBoxPanel.wrap(includeTimers));}
0
public void configure(TestElement element)
{    super.configure(element);    if (element instanceof WhileController) {        theCondition.setText(((WhileController) element).getCondition());    }}
0
public TestElement createTestElement()
{    WhileController controller = new WhileController();    modifyTestElement(controller);    return controller;}
0
public void modifyTestElement(TestElement controller)
{    configureTestElement(controller);    if (controller instanceof WhileController) {        if (theCondition.getText().length() > 0) {            ((WhileController) controller).setCondition(theCondition.getText());        } else {                        ((WhileController) controller).setCondition("");        }    }}
0
public void clearGui()
{    super.clearGui();        theCondition.setText("");}
0
public String getLabelResource()
{        return "while_controller_title";}
0
private void init()
{        setLayout(new BorderLayout(0, 5));    setBorder(makeBorder());    add(makeTitlePanel(), BorderLayout.NORTH);    JPanel mainPanel = new JPanel(new BorderLayout());    mainPanel.add(createConditionPanel(), BorderLayout.NORTH);    add(mainPanel, BorderLayout.CENTER);}
0
private JPanel createConditionPanel()
{    JPanel conditionPanel = new JPanel(new BorderLayout(5, 0));        JLabel conditionLabel = new JLabel(JMeterUtils.getResString(CONDITION_LABEL));    conditionPanel.add(conditionLabel, BorderLayout.WEST);                theCondition = JSyntaxTextArea.getInstance(5, 50);    theCondition.setName(CONDITION);    conditionLabel.setLabelFor(theCondition);    conditionPanel.add(JTextScrollPane.getInstance(theCondition), BorderLayout.CENTER);    conditionPanel.add(Box.createHorizontalGlue(), BorderLayout.NORTH);    return conditionPanel;}
0
public Collection<String> getMenuCategories()
{    return null;}
0
public TestElement createTestElement()
{    WorkBench wb = new WorkBench();    modifyTestElement(wb);    return wb;}
0
public void modifyTestElement(TestElement wb)
{    super.configureTestElement(wb);    ((WorkBench) wb).setSaveWorkBench(saveWorkBench.isSelected());}
0
public void configure(TestElement el)
{    super.configure(el);    if (el instanceof WorkBench) {        WorkBench tp = (WorkBench) el;        saveWorkBench.setSelected(tp.getSaveWorkBench());    }}
0
public void clearGui()
{    super.clearGui();    saveWorkBench.setSelected(true);}
0
public JPopupMenu createPopupMenu()
{    JPopupMenu menu = new JPopupMenu();    JMenu addMenu = MenuFactory.makeMenus(new String[] { MenuFactory.NON_TEST_ELEMENTS, MenuFactory.CONTROLLERS, MenuFactory.CONFIG_ELEMENTS, MenuFactory.TIMERS, MenuFactory.PRE_PROCESSORS, MenuFactory.SAMPLERS, MenuFactory.POST_PROCESSORS, MenuFactory.ASSERTIONS, MenuFactory.LISTENERS },     JMeterUtils.getResString("add"), ActionNames.ADD);    menu.add(addMenu);    MenuFactory.addPasteResetMenu(menu);    MenuFactory.addFileMenu(menu);    return menu;}
0
public String getLabelResource()
{        return "workbench_title";}
0
private void init()
{        setLayout(new BorderLayout(0, 5));    setBorder(makeBorder());    add(makeTitlePanel(), BorderLayout.NORTH);    VerticalPanel workBenchPropsPanel = new VerticalPanel(5, 0);    saveWorkBench = new JCheckBox(JMeterUtils.getResString("save_workbench"));    saveWorkBench.setSelected(true);    workBenchPropsPanel.add(saveWorkBench);    add(workBenchPropsPanel, BorderLayout.CENTER);}
0
public boolean evaluate(String testElementName, String condition)
{    boolean result = false;        Context cx = Context.enter();    try {        Scriptable scope = cx.initStandardObjects(null);        Object cxResultObject = cx.evaluateString(scope, condition, /**         * conditionString **         */        "<cmd>", 1, null);        result = computeResultFromString(condition, Context.toString(cxResultObject));    } catch (Exception e) {            } finally {        Context.exit();    }    return result;}
1
public boolean evaluate(String testElementName, String condition)
{    try {        ScriptContext newContext = new SimpleScriptContext();        newContext.setBindings(NASHORN_ENGINE.get().createBindings(), ScriptContext.ENGINE_SCOPE);        Object o = NASHORN_ENGINE.get().eval(condition, newContext);        return computeResultFromString(condition, o.toString());    } catch (Exception ex) {            }    return false;}
1
private static ScriptEngineManager getInstance()
{    return LazyHolder.INSTANCE;}
0
public void setCondition(String condition)
{    setProperty(new StringProperty(CONDITION, condition));}
0
public String getCondition()
{    return getPropertyAsString(CONDITION).trim();}
0
private boolean evaluateCondition(String cond)
{        return JAVASCRIPT_EVALUATOR.evaluate(getName(), cond);}
1
private static boolean computeResultFromString(String condition, String resultStr) throws Exception
{    boolean result;    switch(resultStr) {        case "false":            result = false;            break;        case "true":            result = true;            break;        default:            throw new Exception(" BAD CONDITION :: " + condition + " :: expected true or false");    }        return result;}
1
private static boolean evaluateExpression(String cond)
{        return cond.equalsIgnoreCase("true");}
0
public boolean isDone()
{        return false;}
0
public Sampler next()
{                    boolean result = true;    if (isEvaluateAll() || isFirst()) {        result = isUseExpression() ? evaluateExpression(getCondition()) : evaluateCondition(getCondition());    }    if (result) {        return super.next();    }        try {        initializeSubControllers();        return nextIsNull();    } catch (NextIsNullException e1) {        return null;    }}
0
public void triggerEndOfLoop()
{    super.initializeSubControllers();    super.triggerEndOfLoop();}
0
public boolean isEvaluateAll()
{    return getPropertyAsBoolean(EVALUATE_ALL, false);}
0
public void setEvaluateAll(boolean b)
{    setProperty(EVALUATE_ALL, b);}
0
public boolean isUseExpression()
{    return getPropertyAsBoolean(USE_EXPRESSION, false);}
0
public void setUseExpression(boolean selected)
{    setProperty(USE_EXPRESSION, selected, false);}
0
public void threadStarted()
{}
0
public void threadFinished()
{    NASHORN_ENGINE.remove();}
0
 void updateIterationIndex(String elementName, int iterCount)
{    JMeterVariables variables = JMeterContextService.getContext().getVariables();    if (variables != null) {        variables.putObject(JMeterUtils.formatJMeterExportedVariableName(elementName + GenericController.INDEX_VAR_NAME_SUFFIX), iterCount);    }}
0
public void setLoops(int loops)
{    setProperty(new IntegerProperty(LOOPS, loops));}
0
public void setLoops(String loopValue)
{    setProperty(new StringProperty(LOOPS, loopValue));}
0
public int getLoops()
{        if (    nbLoops == null ||     nbLoops.intValue() == 0 ||     nbLoops.intValue() ==     INFINITE_LOOP_COUNT) {        try {            JMeterProperty prop = getProperty(LOOPS);            nbLoops = Integer.valueOf(prop.getStringValue());        } catch (NumberFormatException e) {            nbLoops = Integer.valueOf(0);        }    }    return nbLoops.intValue();}
0
public String getLoopString()
{    return getPropertyAsString(LOOPS);}
0
public void setContinueForever(boolean forever)
{    setContinueForeverPrivate(forever);}
0
private void setContinueForeverPrivate(boolean forever)
{    setProperty(new BooleanProperty(CONTINUE_FOREVER, forever));}
0
private boolean getContinueForever()
{    return getPropertyAsBoolean(CONTINUE_FOREVER);}
0
public Sampler next()
{    updateIterationIndex(getName(), loopCount);    try {        if (endOfLoop()) {            if (!getContinueForever()) {                setDone(true);            }            resetBreakLoop();            return null;        }        return super.next();    } finally {        updateIterationIndex(getName(), loopCount);    }}
0
private boolean endOfLoop()
{    final int loops = getLoops();    return breakLoop || (loops > INFINITE_LOOP_COUNT) && (loopCount >= loops);}
0
protected void setDone(boolean done)
{    resetBreakLoop();    nbLoops = null;    super.setDone(done);}
0
protected Sampler nextIsNull() throws NextIsNullException
{    reInitialize();    if (endOfLoop()) {        if (!getContinueForever()) {            setDone(true);        } else {            resetLoopCount();        }        return null;    }    return next();}
0
public void triggerEndOfLoop()
{    super.triggerEndOfLoop();    resetLoopCount();}
0
protected void incrementLoopCount()
{    loopCount++;}
0
protected void resetLoopCount()
{    loopCount = 0;    nbLoops = null;}
0
protected int getIterCount()
{    return loopCount + 1;}
0
protected void reInitialize()
{    setFirst(true);    resetCurrent();    incrementLoopCount();    recoverRunningVersion();}
0
public void startNextLoop()
{    reInitialize();}
0
private void resetBreakLoop()
{    if (breakLoop) {        breakLoop = false;    }}
0
public void breakLoop()
{    breakLoop = true;    setFirst(true);    resetCurrent();    resetLoopCount();    recoverRunningVersion();}
0
public void iterationStart(LoopIterationEvent iterEvent)
{    if (LOGGER.isDebugEnabled()) {            }    reInitialize();    resetLoopCount();}
1
public void setRuntime(long seconds)
{    setProperty(new LongProperty(SECONDS, seconds));}
0
public void setRuntime(String seconds)
{    setProperty(new StringProperty(SECONDS, seconds));}
0
public long getRuntime()
{    try {        return Long.parseLong(getPropertyAsString(SECONDS));    } catch (NumberFormatException e) {        return 0L;    }}
0
public String getRuntimeString()
{    return getPropertyAsString(SECONDS);}
0
public boolean isDone()
{    if (getRuntime() > 0 && !getSubControllers().isEmpty()) {        return super.isDone();    }        return true;}
0
private boolean endOfLoop()
{    return ((System.nanoTime() - startTime) / 1000000000L) >= getRuntime();}
0
public Sampler next()
{    if (startTime == 0) {        startTime = System.nanoTime();    }    if (endOfLoop()) {                reInitialize();        resetLoopCount();        return null;    }    return super.next();}
0
protected Sampler nextIsNull() throws NextIsNullException
{    reInitialize();    if (endOfLoop()) {        resetLoopCount();        return null;    }    return next();}
0
protected void incrementLoopCount()
{    loopCount++;}
0
protected void resetLoopCount()
{    loopCount = 0;    startTime = 0;}
0
protected int getIterCount()
{    return loopCount + 1;}
0
protected void reInitialize()
{    setFirst(true);    resetCurrent();    incrementLoopCount();    recoverRunningVersion();}
0
public void triggerEndOfLoop()
{    super.triggerEndOfLoop();    resetLoopCount();}
0
protected Object readResolve()
{    super.readResolve();    lnf = new ListenerNotifier();    return this;}
0
public void setGenerateParentSample(boolean generateParent)
{    setProperty(new BooleanProperty(GENERATE_PARENT_SAMPLE, generateParent));}
0
public boolean isGenerateParentSample()
{    return getPropertyAsBoolean(GENERATE_PARENT_SAMPLE);}
0
public Sampler next()
{    if (isGenerateParentSample()) {        return nextWithTransactionSampler();    }    return nextWithoutTransactionSampler();}
0
private Sampler nextWithTransactionSampler()
{        if (transactionSampler != null && transactionSampler.isTransactionDone()) {        if (log.isDebugEnabled()) {                    }                transactionSampler = null;        return null;    }        if (    isFirst()) {        if (log.isDebugEnabled()) {                    }        transactionSampler = new TransactionSampler(this, getName());    }        Sampler subSampler = super.next();    transactionSampler.setSubSampler(subSampler);        if (subSampler == null) {        transactionSampler.setTransactionDone();    }    return transactionSampler;}
1
protected Sampler nextIsAController(Controller controller) throws NextIsNullException
{    if (!isGenerateParentSample()) {        return super.nextIsAController(controller);    }    Sampler returnValue;    Sampler sampler = controller.next();    if (sampler == null) {        currentReturnedNull(controller);                                returnValue = super.next();    } else {        returnValue = sampler;    }    return returnValue;}
0
private Sampler nextWithoutTransactionSampler()
{    if (    isFirst()) {        calls = 0;        noFailingSamples = 0;        res = new SampleResult();        res.setSampleLabel(getName());                res.setSuccessful(true);        res.sampleStart();                prevEndTime = res.getStartTime();        pauseTime = 0;    }    boolean isLast = current == super.subControllersAndSamplers.size();    Sampler returnValue = super.next();    if (    returnValue == null && isLast) {        if (res != null) {                        if (!isIncludeTimers()) {                long processingTimeOfLastChild = res.currentTimeInMillis() - prevEndTime;                pauseTime += processingTimeOfLastChild;            }            res.setIdleTime(pauseTime + res.getIdleTime());            res.sampleEnd();            res.setResponseMessage(TransactionController.NUMBER_OF_SAMPLES_IN_TRANSACTION_PREFIX + calls + ", number of failing samples : " + noFailingSamples);            if (res.isSuccessful()) {                res.setResponseCodeOK();            }            notifyListeners();        }    } else {                calls++;    }    return returnValue;}
0
public static boolean isFromTransactionController(SampleResult res)
{    return res.getResponseMessage() != null && res.getResponseMessage().startsWith(TransactionController.NUMBER_OF_SAMPLES_IN_TRANSACTION_PREFIX);}
0
public void triggerEndOfLoop()
{    if (!isGenerateParentSample()) {        if (res != null) {            res.setIdleTime(pauseTime + res.getIdleTime());            res.sampleEnd();            res.setSuccessful(TRUE.equals(JMeterContextService.getContext().getVariables().get(JMeterThread.LAST_SAMPLE_OK)));            res.setResponseMessage(TransactionController.NUMBER_OF_SAMPLES_IN_TRANSACTION_PREFIX + calls + ", number of failing samples : " + noFailingSamples);            notifyListeners();        }    } else {        Sampler subSampler = transactionSampler.getSubSampler();                if (subSampler instanceof TransactionSampler) {            TransactionSampler tc = (TransactionSampler) subSampler;            transactionSampler.addSubSamplerResult(tc.getTransactionResult());        }        transactionSampler.setTransactionDone();                transactionSampler = null;    }    super.triggerEndOfLoop();}
0
protected void notifyListeners()
{        JMeterContext threadContext = getThreadContext();    JMeterVariables threadVars = threadContext.getVariables();    SamplePackage pack = (SamplePackage) threadVars.getObject(JMeterThread.PACKAGE_OBJECT);    if (pack == null) {                                    } else {        SampleEvent event = new SampleEvent(res, threadContext.getThreadGroup().getName(), threadVars, true);                        res = null;        lnf.notifyListeners(event, pack.getSampleListeners());    }}
1
public void sampleOccurred(SampleEvent se)
{    if (!isGenerateParentSample()) {                if (res != null && !se.isTransactionSampleEvent()) {            SampleResult sampleResult = se.getResult();            res.setThreadName(sampleResult.getThreadName());            res.setBytes(res.getBytesAsLong() + sampleResult.getBytesAsLong());            res.setSentBytes(res.getSentBytes() + sampleResult.getSentBytes());            if (!isIncludeTimers()) {                                pauseTime += sampleResult.getEndTime() - sampleResult.getTime() - prevEndTime;                prevEndTime = sampleResult.getEndTime();            }            if (!sampleResult.isSuccessful()) {                res.setSuccessful(false);                noFailingSamples++;            }            res.setAllThreads(sampleResult.getAllThreads());            res.setGroupThreads(sampleResult.getGroupThreads());            res.setLatency(res.getLatency() + sampleResult.getLatency());            res.setConnectTime(res.getConnectTime() + sampleResult.getConnectTime());        }    }}
0
public void sampleStarted(SampleEvent e)
{}
0
public void sampleStopped(SampleEvent e)
{}
0
public void setIncludeTimers(boolean includeTimers)
{    setProperty(INCLUDE_TIMERS, includeTimers, DEFAULT_VALUE_FOR_INCLUDE_TIMERS);}
0
public boolean isIncludeTimers()
{    return getPropertyAsBoolean(INCLUDE_TIMERS, DEFAULT_VALUE_FOR_INCLUDE_TIMERS);}
0
public SampleResult sample(Entry e)
{    throw new RuntimeException("Cannot sample TransactionSampler directly");}
0
public Sampler getSubSampler()
{    return subSampler;}
0
public SampleResult getTransactionResult()
{    return transactionSampleResult;}
0
public TransactionController getTransactionController()
{    return transactionController;}
0
public boolean isTransactionDone()
{    return transactionDone;}
0
public void addSubSamplerResult(SampleResult res)
{        calls++;        if (noFailingSamples == 0) {        transactionSampleResult.setResponseCode(res.getResponseCode());    }        if (!res.isSuccessful()) {        transactionSampleResult.setSuccessful(false);        noFailingSamples++;    }        transactionSampleResult.addSubResult(res, false);        totalTime += res.getTime();}
0
protected void setTransactionDone()
{    this.transactionDone = true;            transactionSampleResult.setResponseMessage(TransactionController.NUMBER_OF_SAMPLES_IN_TRANSACTION_PREFIX + calls + ", number of failing samples : " + noFailingSamples);    if (transactionSampleResult.isSuccessful()) {        transactionSampleResult.setResponseCodeOK();    }        if (!transactionController.isIncludeTimers()) {        long end = transactionSampleResult.currentTimeInMillis();        transactionSampleResult.setIdleTime(end - transactionSampleResult.getStartTime() - totalTime);        transactionSampleResult.setEndTime(end);    }}
0
protected void setSubSampler(Sampler subSampler)
{    this.subSampler = subSampler;}
0
public boolean applies(ConfigTestElement configElement)
{    String guiClass = configElement.getProperty(TestElement.GUI_CLASS).getStringValue();    return APPLIABLE_CONFIG_CLASSES.contains(guiClass);}
0
private boolean endOfLoop(boolean loopEnd)
{    if (breakLoop) {        return true;    }    String cnd = getCondition().trim();        boolean res;        if ((loopEnd && cnd.isEmpty()) || "LAST".equalsIgnoreCase(cnd)) {                JMeterVariables threadVars = JMeterContextService.getContext().getVariables();                res = "false".equalsIgnoreCase(threadVars.get(JMeterThread.LAST_SAMPLE_OK));    } else {                        res = "false".equalsIgnoreCase(cnd);    }        return res;}
1
protected Sampler nextIsNull() throws NextIsNullException
{    reInitialize();    if (endOfLoop(true)) {        resetBreakLoop();        resetLoopCount();        return null;    }    return next();}
0
public void triggerEndOfLoop()
{    super.triggerEndOfLoop();    endOfLoop(true);    resetLoopCount();}
0
public Sampler next()
{    updateIterationIndex(getName(), getIterCount());    try {        if (isFirst() && endOfLoop(false)) {            resetBreakLoop();            resetLoopCount();            return null;        }        return super.next();    } finally {        updateIterationIndex(getName(), getIterCount());    }}
0
protected void resetLoopCount()
{    resetIterCount();}
0
public void setCondition(String string)
{        setProperty(new StringProperty(CONDITION, string));}
1
public String getCondition()
{    JMeterProperty prop = getProperty(CONDITION);    prop.recoverRunningVersion(this);    return prop.getStringValue();}
0
public void startNextLoop()
{    reInitialize();}
0
private void resetBreakLoop()
{    if (breakLoop) {        breakLoop = false;    }}
0
public void breakLoop()
{    breakLoop = true;    setFirst(true);    resetCurrent();    resetLoopCount();    recoverRunningVersion();}
0
public void iterationStart(LoopIterationEvent iterEvent)
{    reInitialize();    resetLoopCount();}
0
private static RemoteJMeterEngine getEngine(String hostAndPort) throws RemoteException, NotBoundException
{        final String name = RemoteJMeterEngineImpl.JMETER_ENGINE_RMI_NAME;    String host = hostAndPort;    int port = RmiUtils.DEFAULT_RMI_PORT;    int indexOfSeparator = hostAndPort.indexOf(':');    if (indexOfSeparator >= 0) {        host = hostAndPort.substring(0, indexOfSeparator);        String portAsString = hostAndPort.substring(indexOfSeparator + 1);        port = Integer.parseInt(portAsString);    }    Registry registry = LocateRegistry.getRegistry(host, port, RmiUtils.createClientSocketFactory());    Remote remobj = registry.lookup(name);    if (remobj instanceof RemoteJMeterEngine) {        final RemoteJMeterEngine rje = (RemoteJMeterEngine) remobj;        if (remobj instanceof RemoteObject) {            RemoteObject robj = (RemoteObject) remobj;                        System.out.println("Using remote object: " + robj.getRef().remoteToString());        }        return rje;    }    throw new RemoteException("Could not find " + name);}
0
public void configure(HashTree testTree)
{    TreeCloner cloner = new TreeCloner(false);    testTree.traverse(cloner);    test = cloner.getClonedTree();}
0
public void stopTest(boolean now)
{        try {        remote.rstopTest(now);    } catch (Exception ex) {                    }}
1
public void reset()
{    try {        try {            remote.rreset();        } catch (java.rmi.ConnectException e) {                        remote = getEngine(hostAndPort);            remote.rreset();        }    } catch (Exception ex) {                    }}
1
public void runTest() throws JMeterEngineException
{            JMeterContextService.clearTotalThreads();    HashTree testTree = test;    synchronized (testTree) {        PreCompiler compiler = new PreCompiler(true);                testTree.traverse(compiler);        JMeterContextService.initClientSideVariables(compiler.getClientSideVariables());        testTree.traverse(new TurnElementsOn());        testTree.traverse(new ConvertListeners());    }    String methodName = "unknown";    try {        JMeterContextService.startTest();        /*             * Add fix for Deadlocks, see:             *             * See https://bz.apache.org/bugzilla/show_bug.cgi?id=48350            */        File baseDirRelative = FileServer.getFileServer().getBaseDirRelative();        String scriptName = FileServer.getFileServer().getScriptName();        synchronized (LOCK) {                        methodName = "rconfigure()";            remote.rconfigure(testTree, hostAndPort, baseDirRelative, scriptName);        }                        if (savep == null) {            savep = new Properties();        }                try {                        methodName = "rsetProperties()";            remote.rsetProperties(toHashMapOfString(savep));        } catch (RemoteException e) {                    }        methodName = "rrunTest()";        remote.rrunTest();            } catch (IllegalStateException ex) {                        tidyRMI(log);                throw ex;    } catch (Exception ex) {                        tidyRMI(log);                throw new JMeterEngineException("Error in " + methodName + " method " + ex, ex);    }}
1
private static final HashMap<String, String> toHashMapOfString(Properties properties)
{    return new HashMap<>(properties.entrySet().stream().collect(Collectors.toMap(e -> e.getKey().toString(), e -> e.getValue().toString())));}
0
public static void tidyRMI(Logger logger)
{    String reaperRE = JMeterUtils.getPropDefault("rmi.thread.name", "^RMI Reaper$");    for (Thread t : Thread.getAllStackTraces().keySet()) {        String name = t.getName();        if (name.matches(reaperRE)) {                        t.interrupt();        }    }}
1
public void exit()
{        try {        remote.rexit();    } catch (RemoteException e) {            }}
1
public void setProperties(Properties p)
{    savep = p;}
0
public boolean isActive()
{    return true;}
0
public String getHost()
{    return hostAndPort;}
0
public void addNode(Object node, HashTree subTree)
{    for (Object item : subTree.list()) {        if (item instanceof AbstractThreadGroup && log.isDebugEnabled()) {                    }        if (item instanceof Remoteable) {            if (item instanceof RemoteThreadsListenerTestElement) {                                try {                    RemoteThreadsListenerWrapper wrapper = new RemoteThreadsListenerWrapper(new RemoteThreadsListenerImpl());                    subTree.replaceKey(item, wrapper);                } catch (RemoteException e) {                                    }                continue;            }            if (item instanceof ThreadListener) {                                                continue;            }            try {                RemoteSampleListener rtl = new RemoteSampleListenerImpl(item);                if (item instanceof TestStateListener && item instanceof SampleListener) {                                        RemoteListenerWrapper wrap = new RemoteListenerWrapper(rtl);                    subTree.replaceKey(item, wrap);                } else if (item instanceof TestStateListener) {                    RemoteTestListenerWrapper wrap = new RemoteTestListenerWrapper(rtl);                    subTree.replaceKey(item, wrap);                } else if (item instanceof SampleListener) {                    RemoteSampleListenerWrapper wrap = new RemoteSampleListenerWrapper(rtl);                    subTree.replaceKey(item, wrap);                } else {                    if (log.isWarnEnabled()) {                                            }                }            } catch (RemoteException e) {                                            }        }    }}
1
public void subtractNode()
{}
0
public void processPath()
{}
0
public void init(List<String> addresses, HashTree tree)
{        List<String> addrs = new LinkedList<>(addresses);    for (int tryNo = 0; tryNo < retriesNumber; tryNo++) {        if (tryNo > 0) {            println("Following remote engines will retry configuring: " + addrs + ", pausing before retry for " + retriesDelay + "ms");            try {                Thread.sleep(retriesDelay);            } catch (InterruptedException e) {                                throw new IllegalStateException("Interrupted while initializing remote engines:" + addrs, e);            }        }        int idx = 0;        while (idx < addrs.size()) {            String address = addrs.get(idx);            println("Configuring remote engine: " + address);            JMeterEngine engine = getClientEngine(address.trim(), tree);            if (engine != null) {                engines.put(address, engine);                addrs.remove(address);            } else {                println("Failed to configure " + address);                idx++;            }        }        if (addrs.isEmpty()) {            break;        }    }    if (!addrs.isEmpty()) {        String msg = "Following remote engines could not be configured:" + addrs;        if (!continueOnFail || engines.isEmpty()) {            stop();                        throw new RuntimeException(msg);        } else {            println(msg);            println("Continuing without failed engines...");        }    }}
0
public void start(List<String> addresses)
{    println("Starting remote engines");    long now = System.currentTimeMillis();    println("Starting the test @ " + new Date(now) + " (" + now + ")");    for (String address : addresses) {        try {            if (engines.containsKey(address)) {                engines.get(address).runTest();            } else {                            }        } catch (IllegalStateException | JMeterEngineException e) {                                    JMeterUtils.reportErrorToUser(e.getMessage(), JMeterUtils.getResString("remote_error_starting"));        }    }    println("Remote engines have been started");}
1
public void start()
{    List<String> addresses = new LinkedList<>();    addresses.addAll(engines.keySet());    start(addresses);}
0
public void stop(List<String> addresses)
{    println("Stopping remote engines");    for (String address : addresses) {        try {            if (engines.containsKey(address)) {                engines.get(address).stopTest(true);            } else {                            }        } catch (RuntimeException e) {            errln("Failed to stop test on " + address, e);        }    }    println("Remote engines have been stopped");}
1
public void stop()
{    List<String> addresses = new LinkedList<>();    addresses.addAll(engines.keySet());    stop(addresses);}
0
public void shutdown(List<String> addresses)
{    println("Shutting down remote engines");    for (String address : addresses) {        try {            if (engines.containsKey(address)) {                engines.get(address).stopTest(false);            } else {                            }        } catch (RuntimeException e) {            errln("Failed to shutdown test on " + address, e);        }    }    println("Remote engines have been shut down");}
1
public void exit(List<String> addresses)
{    println("Exiting remote engines");    for (String address : addresses) {        try {            if (engines.containsKey(address)) {                engines.get(address).exit();            } else {                            }        } catch (RuntimeException e) {            errln("Failed to exit on " + address, e);        }    }    println("Remote engines have been exited");}
1
private JMeterEngine getClientEngine(String address, HashTree testTree)
{    JMeterEngine engine;    try {        engine = createEngine(address);        engine.configure(testTree);        if (!remoteProps.isEmpty()) {            engine.setProperties(remoteProps);        }        return engine;    } catch (Exception ex) {                JMeterUtils.reportErrorToUser(ex.getMessage(),         JMeterUtils.getResString("remote_error_init") + ": " + address);        return null;    }}
1
protected JMeterEngine createEngine(String address) throws RemoteException, NotBoundException
{    return new ClientJMeterEngine(address);}
0
private void println(String s)
{        stdout.println(s);}
1
private void errln(String s, Exception e)
{        stderr.println(s + ": ");        e.printStackTrace(stderr);}
1
public void setStdout(PrintStream stdout)
{    this.stdout = stdout;}
0
public void setStdErr(PrintStream stdErr)
{    this.stderr = stdErr;}
0
public void write(int b) throws IOException
{}
0
public Collection<? extends JMeterEngine> getEngines()
{    return engines.values();}
0
public int getIteration()
{    return iteration;}
0
public TestElement getSource()
{    return source;}
0
 void stopTest()
{    stopTest(true);}
0
public void addNode(Object node, HashTree subTree)
{    if (isClientSide) {        if (node instanceof ResultCollector || node instanceof Backend) {            try {                replacer.replaceValues((TestElement) node);            } catch (InvalidVariableException e) {                            }        }        if (node instanceof TestPlan) {            this.clientSideVariables = createVars((TestPlan) node);        }        if (node instanceof Arguments) {                        Map<String, String> args = createArgumentsMap((Arguments) node);            clientSideVariables.putAll(args);        }    } else {        if (node instanceof TestElement) {            try {                replacer.replaceValues((TestElement) node);            } catch (InvalidVariableException e) {                            }        }        if (node instanceof TestPlan) {            JMeterVariables vars = createVars((TestPlan) node);            JMeterContextService.getContext().setVariables(vars);        }        if (node instanceof Arguments) {            Map<String, String> args = createArgumentsMap((Arguments) node);            JMeterContextService.getContext().getVariables().putAll(args);        }    }}
1
private Map<String, String> createArgumentsMap(Arguments arguments)
{    arguments.setRunningVersion(true);    Map<String, String> args = arguments.getArgumentsAsMap();    replacer.addVariables(args);    return args;}
0
private JMeterVariables createVars(TestPlan testPlan)
{        testPlan.prepareForPreCompile();    Map<String, String> args = testPlan.getUserDefinedVariables();    replacer.setUserDefinedVariables(args);    JMeterVariables vars = new JMeterVariables();    vars.putAll(args);    return vars;}
0
public void subtractNode()
{}
0
public void processPath()
{}
0
public JMeterVariables getClientSideVariables()
{    return clientSideVariables;}
0
public static void startServer(int rmiRegistryPort) throws RemoteException
{    RemoteJMeterEngineImpl engine = new RemoteJMeterEngineImpl(RmiUtils.DEFAULT_LOCAL_PORT, rmiRegistryPort);    engine.init();}
0
public void rconfigure(HashTree testTree, String hostAndPort, File jmxBase, String scriptName) throws RemoteException
{        try {        if (log.isInfoEnabled()) {                    }    } catch (ServerNotActiveException e) {        }    synchronized (LOCK) {                if (backingEngine != null && backingEngine.isActive()) {                        throw new IllegalStateException("Engine is busy - please try later");        }        ownerThread = Thread.currentThread();        JMeterUtils.setProperty(JMeterUtils.THREAD_GROUP_DISTRIBUTED_PREFIX_PROPERTY_NAME, hostAndPort);        backingEngine = new StandardJMeterEngine(hostAndPort);                backingEngine.configure(testTree);    }    FileServer.getFileServer().setScriptName(scriptName);    FileServer.getFileServer().setBase(jmxBase);}
1
public void rrunTest() throws RemoteException, JMeterEngineException
{        checkOwner("runTest");    backingEngine.runTest();}
1
public void rreset() throws RemoteException
{        if (backingEngine != null) {                checkOwner("reset");        backingEngine.reset();    } else {            }}
1
public void rstopTest(boolean now) throws RemoteException
{    if (now) {            } else {            }    backingEngine.stopTest(now);    }
1
public void rexit() throws RemoteException
{            Thread et = new Thread(() -> {                backingEngine.exit();    });    et.setDaemon(false);        Registry reg = LocateRegistry.getRegistry(RmiUtils.getRmiHost().getHostName(), this.rmiRegistryPort, RmiUtils.createClientSocketFactory());    try {        reg.unbind(JMETER_ENGINE_RMI_NAME);    } catch (NotBoundException e) {            }            JMeterUtils.helpGC();    et.start();}
1
public void rsetProperties(HashMap<String, String> map) throws RemoteException
{        checkOwner("setProperties");    if (remotelySetProperties != null) {        Properties jmeterProperties = JMeterUtils.getJMeterProperties();                for (Object key : remotelySetProperties.keySet()) {            jmeterProperties.remove(key);        }    }    Properties props = new Properties();    props.putAll(map);    backingEngine.setProperties(props);    this.remotelySetProperties = props;}
1
private void checkOwner(String methodName)
{    if (ownerThread != null && ownerThread != Thread.currentThread()) {        String msg = "The engine is not owned by this thread - cannot call " + methodName;                throw new IllegalStateException(msg);    }}
1
private static void initSingletonEngine(StandardJMeterEngine standardJMeterEngine)
{    StandardJMeterEngine.engine = standardJMeterEngine;}
0
public static void stopEngineNow()
{    if (engine != null) {                engine.stopTest(true);    }}
0
public static void stopEngine()
{    if (engine != null) {                engine.stopTest(false);    }}
0
public static synchronized void register(TestStateListener tl)
{    testList.add(tl);}
0
public static boolean stopThread(String threadName)
{    return stopThread(threadName, false);}
0
public static boolean stopThreadNow(String threadName)
{    return stopThread(threadName, true);}
0
private static boolean stopThread(String threadName, boolean now)
{    if (engine == null) {                return false;    }    boolean wasStopped = false;        for (AbstractThreadGroup threadGroup : engine.groups) {        wasStopped = wasStopped || threadGroup.stopThread(threadName, now);    }    return wasStopped;}
0
public void configure(HashTree testTree)
{        SearchByClass<TestPlan> testPlan = new SearchByClass<>(TestPlan.class);    testTree.traverse(testPlan);    Object[] plan = testPlan.getSearchResults().toArray();    if (plan.length == 0) {        throw new IllegalStateException("Could not find the TestPlan class!");    }    TestPlan tp = (TestPlan) plan[0];    serialized = tp.isSerialized();    tearDownOnShutdown = tp.isTearDownOnShutdown();    active = true;    test = testTree;}
0
public void runTest() throws JMeterEngineException
{    if (host != null) {        long now = System.currentTimeMillis();                System.out.println("Starting the test on host " + host + " @ " + new Date(now) + " (" + now + ")");    }    try {        Thread runningThread = new Thread(this, "StandardJMeterEngine");        runningThread.start();    } catch (Exception err) {        stopTest();        throw new JMeterEngineException(err);    }}
0
private void removeThreadGroups(List<?> elements)
{    Iterator<?> iter = elements.iterator();    while (iter.hasNext()) {                Object item = iter.next();        if (item instanceof AbstractThreadGroup || !(item instanceof TestElement)) {            iter.remove();        }    }}
0
private void notifyTestListenersOfStart(SearchByClass<TestStateListener> testListeners)
{    for (TestStateListener tl : testListeners.getSearchResults()) {        if (tl instanceof TestBean) {            TestBeanHelper.prepare((TestElement) tl);        }        if (host == null) {            tl.testStarted();        } else {            tl.testStarted(host);        }    }}
0
private void notifyTestListenersOfEnd(SearchByClass<TestStateListener> testListeners)
{        for (TestStateListener tl : testListeners.getSearchResults()) {        try {            if (host == null) {                tl.testEnded();            } else {                tl.testEnded(host);            }        } catch (Exception e) {                    }    }    if (host != null) {                long now = System.currentTimeMillis();        System.out.println(        "Finished the test on host " + host + " @ " + new Date(now) + " (" + now + ")" + (EXIT_AFTER_TEST ? " - exit requested." : ""));        if (EXIT_AFTER_TEST) {            exit();        }    }    active = false;}
1
public void reset()
{    if (running) {        stopTest();    }}
0
public synchronized void stopTest()
{    stopTest(true);}
0
public synchronized void stopTest(boolean now)
{    Thread stopThread = new Thread(new StopTest(now));    stopThread.start();}
0
private void stopAllThreadGroups()
{        for (AbstractThreadGroup threadGroup : groups) {        threadGroup.stop();    }}
0
private void tellThreadGroupsToStop()
{        for (AbstractThreadGroup threadGroup : groups) {        threadGroup.tellThreadsToStop();    }}
0
private boolean verifyThreadsStopped()
{    boolean stoppedAll = true;        for (AbstractThreadGroup threadGroup : groups) {        stoppedAll = stoppedAll && threadGroup.verifyThreadsStopped();    }    return stoppedAll;}
0
private int countStillActiveThreads()
{    int reminingThreads = 0;    for (AbstractThreadGroup threadGroup : groups) {        reminingThreads += threadGroup.numberOfActiveThreads();    }    return reminingThreads;}
0
private void resetSingletonEngine()
{        StandardJMeterEngine.engine = null;}
0
public void run()
{    running = false;    resetSingletonEngine();    if (now) {        tellThreadGroupsToStop();        pause(10L * countStillActiveThreads());        boolean stopped = verifyThreadsStopped();        if (!stopped) {                        if (JMeter.isNonGUI()) {                                                if (SYSTEM_EXIT_ON_STOP_FAIL) {                                                                                System.out.println("Fatal error, could not stop test, exiting");                                        System.exit(1);                } else {                                        System.out.println("Fatal error, could not stop test");                }            } else {                JMeterUtils.reportErrorToUser(                JMeterUtils.getResString("stopping_test_failed"),                 JMeterUtils.getResString("stopping_test_title"));            }        }        } else {        stopAllThreadGroups();    }}
1
public void run()
{        running = true;    /*         * Ensure that the sample variables are correctly initialised for each run.         */    SampleEvent.initSampleVariables();    JMeterContextService.startTest();    try {        PreCompiler compiler = new PreCompiler();        test.traverse(compiler);    } catch (RuntimeException e) {                JMeterUtils.reportErrorToUser("Error occurred compiling the tree: - see log file", e);                return;    }    /**     * Notification of test listeners needs to happen after function     * replacement, but before setting RunningVersion to true.     */        SearchByClass<TestStateListener> testListeners = new SearchByClass<>(TestStateListener.class);    test.traverse(testListeners);            testListeners.getSearchResults().addAll(testList);        testList.clear();    test.traverse(new TurnElementsOn());    notifyTestListenersOfStart(testListeners);    List<?> testLevelElements = new LinkedList<>(test.list(test.getArray()[0]));    removeThreadGroups(testLevelElements);    SearchByClass<SetupThreadGroup> setupSearcher = new SearchByClass<>(SetupThreadGroup.class);    SearchByClass<AbstractThreadGroup> searcher = new SearchByClass<>(AbstractThreadGroup.class);    SearchByClass<PostThreadGroup> postSearcher = new SearchByClass<>(PostThreadGroup.class);    test.traverse(setupSearcher);    test.traverse(searcher);    test.traverse(postSearcher);    TestCompiler.initialize();                Iterator<SetupThreadGroup> setupIter = setupSearcher.getSearchResults().iterator();    Iterator<AbstractThreadGroup> iter = searcher.getSearchResults().iterator();    Iterator<PostThreadGroup> postIter = postSearcher.getSearchResults().iterator();    ListenerNotifier notifier = new ListenerNotifier();    int groupCount = 0;    JMeterContextService.clearTotalThreads();    if (setupIter.hasNext()) {                while (running && setupIter.hasNext()) {                        AbstractThreadGroup group = setupIter.next();            groupCount++;            String groupName = group.getName();                        startThreadGroup(group, groupCount, setupSearcher, testLevelElements, notifier);            if (serialized && setupIter.hasNext()) {                                group.waitThreadsStopped();            }        }                        waitThreadsStopped();                groupCount = 0;        JMeterContextService.clearTotalThreads();    }        groups.clear();    /*         * Here's where the test really starts. Run a Full GC now: it's no harm         * at all (just delays test start by a tiny amount) and hitting one too         * early in the test can impair results for short tests.         */    JMeterUtils.helpGC();    JMeterContextService.getContext().setSamplingStarted(true);        boolean mainGroups = running;    while (running && iter.hasNext()) {                AbstractThreadGroup group = iter.next();                if (group instanceof SetupThreadGroup || group instanceof PostThreadGroup) {            continue;        }        groupCount++;        String groupName = group.getName();                startThreadGroup(group, groupCount, searcher, testLevelElements, notifier);        if (serialized && iter.hasNext()) {                        group.waitThreadsStopped();        }    }        if (groupCount == 0) {                    } else {        if (running) {                    } else {                    }    }        waitThreadsStopped();        groups.clear();    if (postIter.hasNext()) {        groupCount = 0;        JMeterContextService.clearTotalThreads();                if (mainGroups && !running) {                                    running = tearDownOnShutdown;        }        while (running && postIter.hasNext()) {                        AbstractThreadGroup group = postIter.next();            groupCount++;            String groupName = group.getName();                        startThreadGroup(group, groupCount, postSearcher, testLevelElements, notifier);            if (serialized && postIter.hasNext()) {                                group.waitThreadsStopped();            }        }                waitThreadsStopped();    }    notifyTestListenersOfEnd(testListeners);    JMeterContextService.endTest();    if (JMeter.isNonGUI() && SYSTEM_EXIT_FORCED) {                        System.exit(0);    }}
1
private void startThreadGroup(AbstractThreadGroup group, int groupCount, SearchByClass<?> searcher, List<?> testLevelElements, ListenerNotifier notifier)
{    try {        int numThreads = group.getNumThreads();        JMeterContextService.addTotalThreads(numThreads);        boolean onErrorStopTest = group.getOnErrorStopTest();        boolean onErrorStopTestNow = group.getOnErrorStopTestNow();        boolean onErrorStopThread = group.getOnErrorStopThread();        boolean onErrorStartNextLoop = group.getOnErrorStartNextLoop();        String groupName = group.getName();                if (onErrorStopTest) {                    } else if (onErrorStopTestNow) {                    } else if (onErrorStopThread) {                    } else if (onErrorStartNextLoop) {                    } else {                    }        ListedHashTree threadGroupTree = (ListedHashTree) searcher.getSubTree(group);        threadGroupTree.add(group, testLevelElements);        groups.add(group);        group.start(groupCount, notifier, threadGroupTree, this);    } catch (JMeterStopTestException ex) {                JMeterUtils.reportErrorToUser("Error occurred starting thread group :" + group.getName() + ", error message:" + ex.getMessage() + ", \r\nsee log file for more details", ex);                return;    }}
1
private void waitThreadsStopped()
{        for (AbstractThreadGroup threadGroup : groups) {        threadGroup.waitThreadsStopped();    }}
0
public void askThreadsToStop()
{    if (engine != null) {                engine.stopTest(false);    }}
0
public void exit()
{        ClientJMeterEngine.tidyRMI(log);    if (REMOTE_SYSTEM_EXIT) {                                Thread t = new Thread() {            @Override            public void run() {                                pause(1000);                                                System.out.println("Bye from " + host);                                System.exit(0);            }        };        t.start();    }}
1
public void run()
{        pause(1000);            System.out.println("Bye from " + host);        System.exit(0);}
1
private void pause(long ms)
{    try {        TimeUnit.MILLISECONDS.sleep(ms);    } catch (InterruptedException e) {        Thread.currentThread().interrupt();    }}
0
public void setProperties(Properties p)
{        JMeterUtils.getJMeterProperties().putAll(p);}
1
public boolean isActive()
{    return active;}
0
public final void addNode(Object node, HashTree subTree)
{    Object newNode = addNodeToTree(node);    addLast(newNode);}
0
protected Object addNodeToTree(Object node)
{    if (    (node instanceof TestElement) &&     (!(honourNoThreadClone && (node instanceof NoThreadClone)))) {        Object newNode = ((TestElement) node).clone();        newTree.add(objects, newNode);        return newNode;    } else {        newTree.add(objects, node);        return node;    }}
0
private void addLast(Object node)
{    objects.addLast(node);}
0
public void subtractNode()
{    objects.removeLast();}
0
public ListedHashTree getClonedTree()
{    return newTree;}
0
public void processPath()
{}
0
protected Object addNodeToTree(Object node)
{    if (node instanceof Timer) {                        return node;    } else {        return super.addNodeToTree(node);    }}
1
public void addNode(Object node, HashTree subTree)
{    if (node instanceof TestElement && !(node instanceof TestPlan)) {        ((TestElement) node).setRunningVersion(true);    }}
0
public void subtractNode()
{}
0
public void processPath()
{}
0
public void setMasterFunction(CompoundVariable variable)
{    masterFunction = variable;}
0
protected CompoundVariable getMasterFunction()
{    return masterFunction;}
0
public Map<String, String> getVariables()
{    return variables;}
0
public void setVariables(Map<String, String> map)
{    variables = map;}
0
public String execute()
{    if (isDynamic || permanentResults == null) {        JMeterContext context = JMeterContextService.getContext();        SampleResult previousResult = context.getPreviousResult();        Sampler currentSampler = context.getCurrentSampler();        return execute(previousResult, currentSampler);    }        return permanentResults;}
0
public String getRawParameters()
{    return rawParameters;}
0
public String execute(SampleResult previousResult, Sampler currentSampler)
{    if (compiledComponents == null || compiledComponents.isEmpty()) {                return "";    }    StringBuilder results = new StringBuilder();    for (Object item : compiledComponents) {        if (item instanceof Function) {            try {                results.append(((Function) item).execute(previousResult, currentSampler));            } catch (InvalidVariableException e) {                                            }        } else if (item instanceof SimpleVariable) {            results.append(((SimpleVariable) item).toString());        } else {            results.append(item);        }    }    if (!isDynamic) {        permanentResults = results.toString();    }    return results.toString();}
1
public CompoundVariable getFunction()
{    CompoundVariable func = new CompoundVariable();    func.compiledComponents = (LinkedList<Object>) compiledComponents.clone();    func.rawParameters = rawParameters;    func.hasFunction = hasFunction;    func.isDynamic = isDynamic;    return func;}
0
public List<String> getArgumentDesc()
{    return new LinkedList<>();}
0
public void clear()
{        hasFunction = false;    compiledComponents.clear();}
0
public void setParameters(String parameters) throws InvalidVariableException
{    this.rawParameters = parameters;    if (parameters == null || parameters.length() == 0) {        return;    }    compiledComponents = functionParser.compileString(parameters);    if (compiledComponents.size() > 1 || !(compiledComponents.get(0) instanceof String)) {        hasFunction = true;    }        permanentResults = null;    isDynamic = false;    for (Object item : compiledComponents) {        if (item instanceof Function || item instanceof SimpleVariable) {            isDynamic = true;            break;        }    }}
0
 static Object getNamedFunction(String functionName) throws InvalidVariableException
{    if (functions.containsKey(functionName)) {        try {            return functions.get(functionName).getDeclaredConstructor().newInstance();        } catch (Exception e) {                                    throw new InvalidVariableException(e);        }    }    return new SimpleVariable(functionName);}
1
public static Class<? extends Function> getFunctionClass(String className)
{    return functions.get(className);}
0
public static String[] getFunctionNames()
{    return functions.keySet().toArray(new String[functions.size()]);}
0
public boolean hasFunction()
{    return hasFunction;}
0
public String getReferenceKey()
{        return "";}
0
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{}
0
 LinkedList<Object> compileString(String value) throws InvalidVariableException
{    StringReader reader = new StringReader(value);    LinkedList<Object> result = new LinkedList<>();    StringBuilder buffer = new StringBuilder();        char previous = ' ';    char[] current = new char[1];    try {        while (reader.read(current) == 1) {            if (current[0] == '\\') {                                previous = current[0];                if (reader.read(current) == 0) {                    break;                }                                if (current[0] != '$' && current[0] != ',' && current[0] != '\\') {                                        buffer.append(previous);                }                previous = ' ';                buffer.append(current[0]);            } else if (current[0] == '{' && previous == '$') {                                buffer.deleteCharAt(buffer.length() - 1);                if (buffer.length() > 0) {                                        result.add(buffer.toString());                    buffer.setLength(0);                }                result.add(makeFunction(reader));                previous = ' ';            } else {                buffer.append(current[0]);                previous = current[0];            }        }        if (buffer.length() > 0) {            result.add(buffer.toString());        }    } catch (IOException e) {                result.clear();        result.add(value);    }    if (result.isEmpty()) {        result.add("");    }    return result;}
1
 Object makeFunction(StringReader reader) throws InvalidVariableException
{    char[] current = new char[1];        char previous = ' ';    StringBuilder buffer = new StringBuilder();    Object function;    try {        while (reader.read(current) == 1) {            if (current[0] == '\\') {                if (reader.read(current) == 0) {                    break;                }                previous = ' ';                buffer.append(current[0]);            } else if (current[0] == '(' && previous != ' ') {                String funcName = buffer.toString();                function = CompoundVariable.getNamedFunction(funcName);                if (function instanceof Function) {                    ((Function) function).setParameters(parseParams(reader));                    if (reader.read(current) == 0 || current[0] != '}') {                                                reader.reset();                        char[] cb = new char[100];                        int nbRead = reader.read(cb);                        throw new InvalidVariableException("Expected } after " + funcName + " function call in " + new String(cb, 0, nbRead));                    }                    if (function instanceof TestStateListener) {                        StandardJMeterEngine.register((TestStateListener) function);                    }                    return function;                } else {                                        buffer.append(current[0]);                }            } else if (current[0] == '}') {                                function = CompoundVariable.getNamedFunction(buffer.toString());                if (function instanceof Function) {                                        ((Function) function).setParameters(new LinkedList<CompoundVariable>());                }                buffer.setLength(0);                return function;            } else {                buffer.append(current[0]);                previous = current[0];            }        }    } catch (IOException e) {                return null;    }        return buffer.toString();}
1
 LinkedList<CompoundVariable> parseParams(StringReader reader) throws InvalidVariableException
{    LinkedList<CompoundVariable> result = new LinkedList<>();    StringBuilder buffer = new StringBuilder();    char[] current = new char[1];    char previous = ' ';    int functionRecursion = 0;    int parenRecursion = 0;    try {        while (reader.read(current) == 1) {            if (current[0] == '\\') {                                                buffer.append(current[0]);                if (reader.read(current) == 0) {                                        break;                }                previous = ' ';                                buffer.append(current[0]);            } else if (current[0] == ',' && functionRecursion == 0) {                CompoundVariable param = new CompoundVariable();                param.setParameters(buffer.toString());                buffer.setLength(0);                result.add(param);            } else if (current[0] == ')' && functionRecursion == 0 && parenRecursion == 0) {                                if (buffer.length() == 0 && result.isEmpty()) {                    return result;                }                                CompoundVariable param = new CompoundVariable();                param.setParameters(buffer.toString());                buffer.setLength(0);                result.add(param);                return result;            } else if (current[0] == '{' && previous == '$') {                buffer.append(current[0]);                previous = current[0];                functionRecursion++;            } else if (current[0] == '}' && functionRecursion > 0) {                buffer.append(current[0]);                previous = current[0];                functionRecursion--;            } else if (current[0] == ')' && functionRecursion == 0 && parenRecursion > 0) {                buffer.append(current[0]);                previous = current[0];                parenRecursion--;            } else if (current[0] == '(' && functionRecursion == 0) {                buffer.append(current[0]);                previous = current[0];                parenRecursion++;            } else {                buffer.append(current[0]);                previous = current[0];            }        }    } catch (IOException e) {                    }            CompoundVariable var = new CompoundVariable();    var.setParameters(buffer.toString());    result.add(var);    return result;}
1
public JMeterProperty transformValue(JMeterProperty prop) throws InvalidVariableException
{    PatternMatcher pm = JMeterUtils.getMatcher();    PatternCompiler compiler = new Perl5Compiler();    String input = prop.getStringValue();    if (input == null) {        return prop;    }    for (Entry<String, String> entry : getVariables().entrySet()) {        String key = entry.getKey();        String value = entry.getValue();        if (regexMatch) {            try {                Pattern pattern = compiler.compile(constructPattern(value));                input = Util.substitute(pm, pattern, new StringSubstitution(FUNCTION_REF_PREFIX + key + FUNCTION_REF_SUFFIX), input, Util.SUBSTITUTE_ALL);            } catch (MalformedPatternException e) {                            }        } else {            input = StringUtilities.substitute(input, value, FUNCTION_REF_PREFIX + key + FUNCTION_REF_SUFFIX);        }    }    return new StringProperty(prop.getName(), input);}
1
private String constructPattern(String value)
{    if (value.startsWith("(") && value.endsWith(")")) {        return value;    }    return "\\b(" + value + ")\\b";}
0
public JMeterProperty transformValue(JMeterProperty prop) throws InvalidVariableException
{    JMeterProperty newValue = prop;    getMasterFunction().clear();    getMasterFunction().setParameters(prop.getStringValue());    if (getMasterFunction().hasFunction()) {        newValue = new FunctionProperty(prop.getName(), getMasterFunction().getFunction());    }    return newValue;}
0
public String getName()
{    return name;}
0
public void setName(String name)
{    this.name = name;}
0
public String toString()
{    String ret = null;    JMeterVariables vars = getVariables();    if (vars != null) {        ret = vars.get(name);    }    if (ret == null) {        return "${" + name + "}";    }    return ret;}
0
private JMeterVariables getVariables()
{    JMeterContext context = JMeterContextService.getContext();    return context.getVariables();}
0
public JMeterProperty transformValue(JMeterProperty prop) throws InvalidVariableException
{    String input = prop.getStringValue();    for (Map.Entry<String, String> entry : getVariables().entrySet()) {        String key = entry.getKey();        String value = entry.getValue();        input = StringUtilities.substitute(input, "${" + key + "}", value);    }    return new StringProperty(prop.getName(), input);}
0
 boolean containsKey(String k)
{    return variables.containsKey(k);}
0
public void setUserDefinedVariables(Map<String, String> variables)
{    this.variables = variables;}
0
public void replaceValues(TestElement el) throws InvalidVariableException
{    Collection<JMeterProperty> newProps = replaceValues(el.propertyIterator(), new ReplaceStringWithFunctions(masterFunction, variables));    setProperties(el, newProps);}
0
private void setProperties(TestElement el, Collection<JMeterProperty> newProps)
{    el.clear();    for (JMeterProperty jmp : newProps) {        el.setProperty(jmp);    }}
0
public void reverseReplace(TestElement el) throws InvalidVariableException
{    Collection<JMeterProperty> newProps = replaceValues(el.propertyIterator(), new ReplaceFunctionsWithStrings(masterFunction, variables));    setProperties(el, newProps);}
0
public void reverseReplace(TestElement el, boolean regexMatch) throws InvalidVariableException
{    Collection<JMeterProperty> newProps = replaceValues(el.propertyIterator(), new ReplaceFunctionsWithStrings(masterFunction, variables, regexMatch));    setProperties(el, newProps);}
0
public void undoReverseReplace(TestElement el) throws InvalidVariableException
{    Collection<JMeterProperty> newProps = replaceValues(el.propertyIterator(), new UndoVariableReplacement(masterFunction, variables));    setProperties(el, newProps);}
0
public void addVariable(String name, String value)
{    variables.put(name, value);}
0
public void addVariables(Map<String, String> vars)
{    variables.putAll(vars);}
0
private Collection<JMeterProperty> replaceValues(PropertyIterator iter, ValueTransformer transform) throws InvalidVariableException
{    List<JMeterProperty> props = new LinkedList<>();    while (iter.hasNext()) {        JMeterProperty val = iter.next();        if (log.isDebugEnabled()) {                    }        if (val instanceof StringProperty) {                        if (!val.getName().equals(TestElement.GUI_CLASS) && !val.getName().equals(TestElement.TEST_CLASS)) {                val = transform.transformValue(val);                            }        } else if (val instanceof NumberProperty) {            val = transform.transformValue(val);                    } else if (val instanceof MultiProperty) {            MultiProperty multiVal = (MultiProperty) val;            Collection<JMeterProperty> newValues = replaceValues(multiVal.iterator(), transform);            multiVal.clear();            for (JMeterProperty jmp : newValues) {                multiVal.addProperty(jmp);            }                    } else {                    }        props.add(val);    }    return props;}
1
public String execute() throws InvalidVariableException
{    JMeterContext context = JMeterContextService.getContext();    SampleResult previousResult = context.getPreviousResult();    Sampler currentSampler = context.getCurrentSampler();    return execute(previousResult, currentSampler);}
0
protected JMeterVariables getVariables()
{    return JMeterContextService.getContext().getVariables();}
0
protected void checkParameterCount(Collection<CompoundVariable> parameters, int min, int max) throws InvalidVariableException
{    int num = parameters.size();    if ((num > max) || (num < min)) {        throw new InvalidVariableException(getReferenceKey() + " called with wrong number of parameters. Actual: " + num + (min == max ? ". Expected: " + min + "." : ". Expected: >= " + min + " and <= " + max));    }}
0
protected void checkParameterCount(Collection<CompoundVariable> parameters, int count) throws InvalidVariableException
{    int num = parameters.size();    if (num != count) {        throw new InvalidVariableException(getReferenceKey() + " called with wrong number of parameters. Actual: " + num + ". Expected: " + count + ".");    }}
0
protected void checkMinParameterCount(Collection<CompoundVariable> parameters, int minimum) throws InvalidVariableException
{    int num = parameters.size();    if (num < minimum) {        throw new InvalidVariableException(getReferenceKey() + " called with wrong number of parameters. Actual: " + num + ". Expected at least: " + minimum + ".");    }}
0
protected final void addVariableValue(String value, CompoundVariable[] values, int index)
{    if (values.length > index) {        String variableName = values[index].execute().trim();        if (StringUtils.isNotEmpty(variableName)) {            JMeterVariables vars = getVariables();            if (vars != null) {                vars.put(variableName, value);            }        }    }}
0
protected JRootPane createRootPane()
{    JRootPane rootPane = new JRootPane();    javax.swing.Action escapeAction = new AbstractAction("ESCAPE") {        private static final long serialVersionUID = -4036804004190858925L;        @Override        public void actionPerformed(ActionEvent actionEvent) {            setVisible(false);        }    };    rootPane.getActionMap().put(escapeAction.getValue(Action.NAME), escapeAction);    InputMap inputMap = rootPane.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);    inputMap.put(KeyStrokes.ESC, escapeAction.getValue(Action.NAME));    return rootPane;}
0
public void actionPerformed(ActionEvent actionEvent)
{    setVisible(false);}
0
private void init()
{            parameterPanel = new ArgumentsPanel(true, JMeterUtils.getResString("function_params"));    initializeFunctionList();    this.getContentPane().setLayout(new BorderLayout(10, 10));    JPanel comboPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));    comboPanel.add(functionList);        JButton helpButton = new JButton(JMeterUtils.getResString("help"));    helpButton.addActionListener(new HelpListener());    comboPanel.add(helpButton);    this.getContentPane().add(comboPanel, BorderLayout.NORTH);    this.getContentPane().add(parameterPanel, BorderLayout.CENTER);    JPanel resultsPanel = new VerticalPanel();    JPanel generatePanel = new JPanel(new FlowLayout(FlowLayout.CENTER));    JPanel displayPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));    JPanel variablesPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));        cutPasteFunction = new JLabeledTextField(JMeterUtils.getResString("cut_paste_function"), 35, null, false);    generatePanel.add(cutPasteFunction);        JButton generateButton = new JButton(JMeterUtils.getResString("generate"));    generateButton.setActionCommand(GENERATE);    generateButton.addActionListener(this);    generatePanel.add(generateButton);        JButton resetVarsButton = new JButton(JMeterUtils.getResString("function_helper_reset_vars"));    resetVarsButton.setActionCommand(RESET_VARS);    resetVarsButton.addActionListener(this);    generatePanel.add(resetVarsButton);    resultTextArea = JSyntaxTextArea.getInstance(5, 60);    resultTextArea.setToolTipText(JMeterUtils.getResString("function_helper_dialog_result_warn"));    displayPanel.add(new JLabel(JMeterUtils.getResString("result_function")));    displayPanel.add(JTextScrollPane.getInstance(resultTextArea));    variablesTextArea = JSyntaxTextArea.getInstance(10, 60);    variablesPanel.add(new JLabel(JMeterUtils.getResString("function_helper_dialog_variables")));    variablesPanel.add(JTextScrollPane.getInstance(variablesTextArea));    resultsPanel.add(generatePanel);    resultsPanel.add(displayPanel);    resultsPanel.add(variablesPanel);    this.getContentPane().add(resultsPanel, BorderLayout.SOUTH);    this.pack();    ComponentUtil.centerComponentInWindow(this);}
0
private void initializeFunctionList()
{    String[] functionNames = CompoundVariable.getFunctionNames();    Arrays.sort(functionNames, String::compareToIgnoreCase);        functionList = new JLabeledChoice(JMeterUtils.getResString("choose_function"), functionNames);    functionList.addChangeListener(this);}
0
public void stateChanged(ChangeEvent event)
{    try {        initParameterPanel();        getContentPane().remove(parameterPanel);        this.pack();        getContentPane().add(parameterPanel, BorderLayout.CENTER);        this.pack();        this.validate();        resultTextArea.setText("");        this.repaint();    } catch (InstantiationException | IllegalAccessException ex) {            }}
1
protected void initParameterPanel() throws InstantiationException, IllegalAccessException
{    Arguments args = new Arguments();    Function function = CompoundVariable.getFunctionClass(functionList.getText()).newInstance();    List<String> argumentDesc = function.getArgumentDesc();    for (String help : argumentDesc) {                args.addArgument(help, "");    }    parameterPanel.configure(args);    parameterPanel.revalidate();}
0
public void actionPerformed(ActionEvent e)
{    String actionCommand = e.getActionCommand();    if (GENERATE.equals(actionCommand)) {        String functionName = functionList.getText();        Arguments args = (Arguments) parameterPanel.createTestElement();        String functionCall = buildFunctionCallString(functionName, args);        cutPasteFunction.setText(functionCall);        GuiUtils.copyTextToClipboard(cutPasteFunction.getText());        CompoundVariable function = new CompoundVariable(functionCall);        JMeterContext threadContext = JMeterContextService.getContext();        threadContext.setVariables(jMeterVariables);        threadContext.setThreadNum(1);        threadContext.getVariables().put(JMeterThread.LAST_SAMPLE_OK, "true");        ThreadGroup threadGroup = new ThreadGroup();        threadGroup.setName("FunctionHelper-Dialog-ThreadGroup");        threadContext.setThreadGroup(threadGroup);        try {            resultTextArea.setText(function.execute().trim());        } catch (Exception ex) {                        resultTextArea.setText(ex.getMessage() + ", \nstacktrace:\n " + ExceptionUtils.getStackTrace(ex));            resultTextArea.setCaretPosition(0);        }        variablesTextArea.setText(variablesToString(jMeterVariables));    } else {        jMeterVariables = new JMeterVariables();        variablesTextArea.setText(variablesToString(jMeterVariables));    }}
1
private String variablesToString(JMeterVariables jMeterVariables)
{    StringBuilder sb = new StringBuilder();    jMeterVariables.entrySet().forEach(e -> sb.append(e.getKey()).append("=").append(e.getValue()).append("\r\n"));    return sb.toString();}
0
private String buildFunctionCallString(String functionName, Arguments args)
{    StringBuilder functionCall = new StringBuilder("${");    functionCall.append(functionName);    if (args.getArguments().size() > 0) {        functionCall.append("(");        PropertyIterator iter = args.iterator();        boolean first = true;        while (iter.hasNext()) {            Argument arg = (Argument) iter.next().getObjectValue();            if (!first) {                functionCall.append(",");            }            functionCall.append(escapeCommata(arg.getValue()));            first = false;        }        functionCall.append(")");    }    functionCall.append("}");    return functionCall.toString();}
0
private String escapeCommata(String arg)
{    int level = 0;    StringBuilder result = new StringBuilder(arg.length());    try (Reader r = new StringReader(arg)) {        int c;        char lastChar = ANY_NORMAL_CHAR;        while ((c = r.read()) != -1) {            char nextChar = (char) c;            if (lastChar == '\\') {                lastChar = ANY_NORMAL_CHAR;            } else if (lastChar == '$' && nextChar == '{') {                level++;                lastChar = ANY_NORMAL_CHAR;            } else if (nextChar == '}') {                level--;                lastChar = ANY_NORMAL_CHAR;            } else if (nextChar == ',' && level == 0) {                result.append('\\');                lastChar = ANY_NORMAL_CHAR;            } else {                lastChar = nextChar;            }            result.append(nextChar);        }    } catch (IOException e) {                return arg;    }    return result.toString();}
1
public void actionPerformed(ActionEvent e)
{    String[] source = new String[] { Help.HELP_FUNCTIONS, functionList.getText() };    ActionRouter.getInstance().doActionNow(new ActionEvent(source, e.getID(), ActionNames.HELP));}
0
public void localeChanged(LocaleChangeEvent event)
{        setTitle(JMeterUtils.getResString("function_helper_title"));        this.getContentPane().removeAll();    init();}
0
public void setVisible(boolean visible)
{    super.setVisible(visible);    if (visible) {        try {            initParameterPanel();        } catch (InstantiationException | IllegalAccessException ex) {                    }    }}
1
public void setName(String name)
{    namePanel.setName(name);}
0
public void setComment(String comment)
{    commentPanel.setText(comment);}
0
public boolean isEnabled()
{    return enabled;}
0
public void setEnabled(boolean enabled)
{        this.enabled = enabled;}
1
public String getName()
{    if (getNamePanel() != null) {        return getNamePanel().getName();    }        return "";}
0
public String getComment()
{    if (getCommentPanel() != null) {        return getCommentPanel().getText();    }        return "";}
0
protected NamePanel getNamePanel()
{    return namePanel;}
0
private CommentPanel getCommentPanel()
{    return commentPanel;}
0
protected Component createTitleLabel()
{    JLabel titleLabel = new JLabel(getStaticLabel());    Font curFont = titleLabel.getFont();    titleLabel.setFont(curFont.deriveFont((float) curFont.getSize() + 4));    return titleLabel;}
0
public void configure(TestElement element)
{    setName(element.getName());    enabled = element.isEnabled();    getCommentPanel().setText(element.getComment());}
0
public void clearGui()
{    initGui();    enabled = true;}
0
private void initGui()
{    setName(getStaticLabel());    commentPanel.clearGui();}
0
protected void configureTestElement(TestElement mc)
{    mc.setName(getName());    mc.setProperty(new StringProperty(TestElement.GUI_CLASS, this.getClass().getName()));    mc.setProperty(new StringProperty(TestElement.TEST_CLASS, mc.getClass().getName()));            mc.setEnabled(enabled);    mc.setComment(getComment());}
1
protected Container makeTitlePanel()
{    VerticalPanel titlePanel = new VerticalPanel();    titlePanel.add(createTitleLabel());    VerticalPanel contentPanel = new VerticalPanel();    contentPanel.setBorder(BorderFactory.createEtchedBorder());    contentPanel.add(getNamePanel());    contentPanel.add(getCommentPanel());    titlePanel.add(contentPanel);    return titlePanel;}
0
protected Border makeBorder()
{    return BorderFactory.createEmptyBorder(10, 10, 5, 10);}
0
protected JScrollPane makeScrollPane(Component comp)
{    JScrollPane pane = new JScrollPane(comp);    pane.setPreferredSize(pane.getMinimumSize());    return pane;}
0
protected JScrollPane makeScrollPane(Component comp, int verticalPolicy, int horizontalPolicy)
{    JScrollPane pane = new JScrollPane(comp, verticalPolicy, horizontalPolicy);    pane.setPreferredSize(pane.getMinimumSize());    return pane;}
0
public String getStaticLabel()
{    return JMeterUtils.getResString(getLabelResource());}
0
public String getDocAnchor()
{        String label = JMeterUtils.getResString(getLabelResource(), new Locale("", ""));    return label.replace(' ', '_');}
0
public JComponent getPrintableComponent()
{    return this;}
0
public void clearGui()
{    super.clearGui();    if (scopePanel != null) {        scopePanel.clearGui();    }}
0
public JPopupMenu createPopupMenu()
{    return MenuFactory.getDefaultAssertionMenu();}
0
protected JPanel createScopePanel()
{    return createScopePanel(false);}
0
protected JPanel createScopePanel(boolean enableVariable)
{    return createScopePanel(enableVariable, true, true);}
0
protected JPanel createScopePanel(boolean enableVariable, boolean enableParentAndSubsamples, boolean enableSubsamplesOnly)
{    scopePanel = new ScopePanel(enableVariable, enableParentAndSubsamples, enableSubsamplesOnly);    return scopePanel;}
0
protected void saveScopeSettings(AbstractScopedTestElement testElement)
{    if (scopePanel.isScopeParent()) {        testElement.setScopeParent();    } else if (scopePanel.isScopeChildren()) {        testElement.setScopeChildren();    } else if (scopePanel.isScopeAll()) {        testElement.setScopeAll();    } else if (scopePanel.isScopeVariable()) {        testElement.setScopeVariable(scopePanel.getVariable());    } else {        throw new IllegalArgumentException("Unexpected scope panel state");    }}
0
protected void showScopeSettings(AbstractScopedTestElement testElement)
{    showScopeSettings(testElement, false);}
0
protected void showScopeSettings(AbstractScopedTestElement testElement, boolean enableVariableButton)
{    String scope = testElement.fetchScope();    if (testElement.isScopeParent(scope)) {        scopePanel.setScopeParent(enableVariableButton);    } else if (testElement.isScopeChildren(scope)) {        scopePanel.setScopeChildren(enableVariableButton);    } else if (testElement.isScopeAll(scope)) {        scopePanel.setScopeAll(enableVariableButton);    } else if (testElement.isScopeVariable(scope)) {        scopePanel.setScopeVariable(testElement.getVariableName());    } else {        throw new IllegalArgumentException("Invalid scope: " + scope);    }}
0
public void doAction(ActionEvent e)
{    if (e.getActionCommand().equals(ActionNames.ABOUT)) {        this.about();    }}
0
public Set<String> getActionNames()
{    return AboutCommand.commandSet;}
0
private void about()
{    JFrame mainFrame = GuiPackage.getInstance().getMainFrame();    JDialog dialog = initDialog(mainFrame);        Point p = mainFrame.getLocationOnScreen();    Dimension d1 = mainFrame.getSize();    Dimension d2 = dialog.getSize();    dialog.setLocation(p.x + (d1.width - d2.width) / 2, p.y + (d1.height - d2.height) / 2);    dialog.setVisible(true);}
0
private JDialog initDialog(JFrame mainFrame)
{    if (about != null) {        return about;    }    about = new EscapeDialog(mainFrame, "About Apache JMeter", false);    about.addMouseListener(new MouseAdapter() {        @Override        public void mouseClicked(MouseEvent e) {            about.setVisible(false);        }    });    JLabel jmeterLogo = new JLabel(JMeterUtils.getImage("jmeter.png"));    JLabel copyright = new JLabel(JMeterUtils.getJMeterCopyright(), SwingConstants.CENTER);    JLabel rights = new JLabel("All Rights Reserved.", SwingConstants.CENTER);    JLabel version = new JLabel("Apache JMeter Version " + JMeterUtils.getJMeterVersion(), SwingConstants.CENTER);    JLabel releaseNotes = new JLabel("<html><a href=\"https://jmeter.apache.org/changes.html\">Release notes</a></html>", SwingConstants.CENTER);    releaseNotes.addMouseListener(new MouseAdapter() {        @Override        public void mouseClicked(MouseEvent e) {            if (e.getClickCount() > 0) {                ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(), e.getID(), ActionNames.LINK_RELEASE_NOTES));            }        }    });    JPanel infos = new JPanel();    infos.setOpaque(false);    infos.setLayout(new GridLayout(0, 1));    infos.setBorder(new EmptyBorder(5, 5, 5, 5));    infos.add(copyright);    infos.add(rights);    infos.add(version);    infos.add(releaseNotes);    Container panel = about.getContentPane();    panel.setLayout(new BorderLayout());    panel.setBackground(Color.white);    panel.add(jmeterLogo, BorderLayout.NORTH);    panel.add(infos, BorderLayout.SOUTH);    about.pack();    return about;}
0
public void mouseClicked(MouseEvent e)
{    about.setVisible(false);}
0
public void mouseClicked(MouseEvent e)
{    if (e.getClickCount() > 0) {        ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(), e.getID(), ActionNames.LINK_RELEASE_NOTES));    }}
0
public void doAction(ActionEvent e) throws IllegalUserActionException
{}
0
protected void popupShouldSave(ActionEvent e)
{        if (GuiPackage.getInstance().getTestPlanFile() == null) {        if (JOptionPane.showConfirmDialog(GuiPackage.getInstance().getMainFrame(),         JMeterUtils.getResString("should_save"),         JMeterUtils.getResString("warning"), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {            ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(), e.getID(), ActionNames.SAVE));        }    } else if (GuiPackage.getInstance().shouldSaveBeforeRun()) {        ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(), e.getID(), ActionNames.SAVE));    }}
1
protected boolean popupCheckExistingFileListener(HashTree tree)
{    SearchByClass<ResultCollector> resultListeners = new SearchByClass<>(ResultCollector.class);    tree.traverse(resultListeners);    for (ResultCollector rc : resultListeners.getSearchResults()) {        File f = new File(rc.getFilename());        if (f.exists()) {            switch(actionOnFile) {                case APPEND:                    break;                case DELETE:                    if (f.delete()) {                        break;                    } else {                                                return false;                    }                case ASK:                default:                    String[] option = new String[] { JMeterUtils.getResString("concat_result"), JMeterUtils.getResString("dont_start"), JMeterUtils.getResString("replace_file") };                    String question = MessageFormat.format(                    JMeterUtils.getResString("ask_existing_file"), rc.getFilename());                                        int response = JOptionPane.showOptionDialog(GuiPackage.getInstance().getMainFrame(), question, JMeterUtils.getResString("warning"), JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null, option, option[0]);                    switch(response) {                        case JOptionPane.CANCEL_OPTION:                                                        if (f.delete()) {                                break;                            } else {                                                                return false;                            }                        case JOptionPane.YES_OPTION:                                                        break;                        case JOptionPane.NO_OPTION:                        default:                                                        return false;                    }                    break;            }        }    }    return true;}
1
protected final JFrame getParentFrame(ActionEvent event)
{    JFrame parent = null;    Object source = event.getSource();    if (source instanceof JMenuItem) {        JMenuItem item = (JMenuItem) source;        Component comp = item.getParent();        if (comp instanceof JPopupMenu) {            JPopupMenu popup = (JPopupMenu) comp;            comp = popup.getInvoker();            Window window = SwingUtilities.windowForComponent((Component) comp);            if (window instanceof JFrame) {                parent = (JFrame) window;            }        }    } else {        parent = GuiPackage.getInstance().getMainFrame();    }    return parent;}
0
public final void doAction(ActionEvent e) throws IllegalUserActionException
{    if (JMeterUtils.isTestRunning()) {        JOptionPane.showMessageDialog(GuiPackage.getInstance().getMainFrame(),         JMeterUtils.getResString("action_check_message"),         JMeterUtils.getResString("action_check_title"), JOptionPane.WARNING_MESSAGE);        return;    }    doActionAfterCheck(e);}
0
public void actionPerformed(final ActionEvent e)
{    SwingUtilities.invokeLater(() -> performAction(e));}
0
private void performAction(final ActionEvent e)
{    String actionCommand = e.getActionCommand();    if (!NO_TRANSACTION_ACTIONS.contains(actionCommand)) {        GuiPackage.getInstance().beginUndoTransaction();    }    try {        try {            GuiPackage.getInstance().updateCurrentGui();        } catch (Exception err) {                        JMeterUtils.reportErrorToUser("Problem updating GUI - see log file for details");        }        for (Command c : commands.get(actionCommand)) {            try {                preActionPerformed(c.getClass(), e);                c.doAction(e);                postActionPerformed(c.getClass(), e);            } catch (IllegalUserActionException err) {                String msg = err.getMessage();                if (msg == null) {                    msg = err.toString();                }                Throwable t = err.getCause();                if (t != null) {                    String cause = t.getMessage();                    if (cause == null) {                        cause = t.toString();                    }                    msg = msg + "\n" + cause;                }                JMeterUtils.reportErrorToUser(msg);            } catch (Exception err) {                            }        }    } catch (NullPointerException er) {                JMeterUtils.reportErrorToUser("Sorry, this feature (" + actionCommand + ") not yet implemented");    } finally {        if (!NO_TRANSACTION_ACTIONS.contains(actionCommand)) {            GuiPackage.getInstance().endUndoTransaction();        }    }}
1
public void doActionNow(ActionEvent e)
{    performAction(e);}
0
public Set<Command> getAction(String actionName)
{    Set<Command> set = new HashSet<>();    for (Command c : commands.get(actionName)) {        try {            set.add(c);        } catch (Exception err) {                    }    }    return set;}
1
public Command getAction(String actionName, Class<?> actionClass)
{    for (Command com : commands.get(actionName)) {        if (com.getClass().equals(actionClass)) {            return com;        }    }    return null;}
0
public Command getAction(String actionName, String className)
{    for (Command com : commands.get(actionName)) {        if (com.getClass().getName().equals(className)) {            return com;        }    }    return null;}
0
public void addPreActionListener(Class<?> action, ActionListener listener)
{    addActionListener(action, listener, preActionListeners);}
0
public void removePreActionListener(Class<?> action, ActionListener listener)
{    removeActionListener(action, listener, preActionListeners);}
0
private void removeActionListener(Class<?> action, ActionListener listener, Map<String, Set<ActionListener>> actionListeners)
{    if (action != null) {        Set<ActionListener> set = actionListeners.get(action.getName());        if (set != null) {            set.remove(listener);            actionListeners.put(action.getName(), set);        }    }}
0
public void addPostActionListener(Class<?> action, ActionListener listener)
{    addActionListener(action, listener, postActionListeners);}
0
private void addActionListener(Class<?> action, ActionListener listener, Map<String, Set<ActionListener>> actionListeners)
{    if (action != null) {        Set<ActionListener> set = actionListeners.get(action.getName());        if (set == null) {            set = new HashSet<>();        }        set.add(listener);        actionListeners.put(action.getName(), set);    }}
0
public void removePostActionListener(Class<?> action, ActionListener listener)
{    removeActionListener(action, listener, postActionListeners);}
0
protected void preActionPerformed(Class<? extends Command> action, ActionEvent e)
{    actionPerformed(action, e, preActionListeners);}
0
protected void postActionPerformed(Class<? extends Command> action, ActionEvent e)
{    actionPerformed(action, e, postActionListeners);}
0
private void actionPerformed(Class<? extends Command> action, ActionEvent e, Map<String, Set<ActionListener>> actionListeners)
{    if (action != null) {        Set<ActionListener> listenerSet = actionListeners.get(action.getName());        if (listenerSet != null && !listenerSet.isEmpty()) {            ActionListener[] listeners = listenerSet.toArray(new ActionListener[listenerSet.size()]);            for (ActionListener listener : listeners) {                listener.actionPerformed(e);            }        }    }}
0
private static List<String> findClassesThatExtend(String className, String excluding, String[] searchPath) throws IOException, ClassNotFoundException
{    return ClassFinder.findClassesThatExtend(    searchPath, new Class[] { Class.forName(className) },     false,     null,     excluding,     false);}
0
private static Optional<String[]> getCodeSourceSearchPath()
{    CodeSource codeSource = ActionRouter.class.getProtectionDomain().getCodeSource();    if (codeSource != null) {        try {            URL ownLocation = codeSource.getLocation();            File ownPath = new File(ownLocation.toURI());            if (ownPath.exists()) {                return Optional.of(new String[] { ownPath.getAbsolutePath() });            }        } catch (URISyntaxException ex) {                    }    }    return Optional.empty();}
1
public void populateCommandMap()
{    if (!commands.isEmpty()) {                return;    }    try {        List<String> listClasses = findClassesThatExtend(        "org.apache.jmeter.gui.action.Command",         "org.apache.jmeter.report.gui", JMeterUtils.getSearchPaths());        if (listClasses.isEmpty()) {                        Optional<String[]> codeSourceSearchPath = getCodeSourceSearchPath();            if (codeSourceSearchPath.isPresent()) {                                listClasses = findClassesThatExtend(                "org.apache.jmeter.gui.action.Command",                 "org.apache.jmeter.report.gui", codeSourceSearchPath.get());            }        }        if (listClasses.isEmpty()) {                        throw new JMeterError("No action handlers found - check JMeterHome and libraries");        }        for (String strClassName : listClasses) {            Class<?> commandClass = Class.forName(strClassName);            Command command = (Command) commandClass.getDeclaredConstructor().newInstance();            for (String commandName : command.getActionNames()) {                Set<Command> commandObjects = commands.computeIfAbsent(commandName, k -> new HashSet<>());                commandObjects.add(command);            }        }    } catch (HeadlessException e) {        if (log.isWarnEnabled()) {                    }    } catch (Exception e) {            }}
1
public static ActionRouter getInstance()
{    return INSTANCE;}
0
public void doAction(ActionEvent e)
{    String name = ((Component) e.getSource()).getName();    GuiPackage guiPackage = GuiPackage.getInstance();    try {        guiPackage.updateCurrentNode();        TestElement controller = guiPackage.createTestElement(name);        addParentToTree(controller);    } catch (Exception err) {            }}
1
public Set<String> getActionNames()
{    return commands;}
0
protected void addParentToTree(TestElement newParent)
{    GuiPackage guiPackage = GuiPackage.getInstance();    JMeterTreeNode newNode = new JMeterTreeNode(newParent, guiPackage.getTreeModel());    JMeterTreeNode currentNode = guiPackage.getTreeListener().getCurrentNode();    JMeterTreeNode parentNode = (JMeterTreeNode) currentNode.getParent();    int index = parentNode.getIndex(currentNode);    guiPackage.getTreeModel().insertNodeInto(newNode, parentNode, index);    JMeterTreeNode[] nodes = guiPackage.getTreeListener().getSelectedNodes();    for (JMeterTreeNode node : nodes) {        moveNode(guiPackage, node, newNode);    }}
0
private void moveNode(GuiPackage guiPackage, JMeterTreeNode node, JMeterTreeNode newParentNode)
{    guiPackage.getTreeModel().removeNodeFromParent(node);    guiPackage.getTreeModel().insertNodeInto(node, newParentNode, newParentNode.getChildCount());}
0
public void doAction(ActionEvent e)
{    GuiPackage guiPackage = GuiPackage.getInstance();    JMeterTreeNode currentNode = guiPackage.getTreeListener().getCurrentNode();    if (!(currentNode.getUserObject() instanceof Controller || currentNode.getUserObject() instanceof ThreadGroup)) {        Toolkit.getDefaultToolkit().beep();        return;    }    try {        addThinkTimeToChildren(guiPackage, currentNode);    } catch (Exception err) {        Toolkit.getDefaultToolkit().beep();                JMeterUtils.reportErrorToUser("Failed to add think times", err);    }}
1
private void addThinkTimeToChildren(GuiPackage guiPackage, JMeterTreeNode parentNode) throws IllegalUserActionException
{    guiPackage.updateCurrentNode();    boolean insertThinkTime;    try {        int index = 0;        while (true) {            if (index == parentNode.getChildCount()) {                break;            }            JMeterTreeNode childNode = (JMeterTreeNode) parentNode.getChildAt(index);            Object userObject = childNode.getUserObject();            insertThinkTime = childNode.isEnabled() && (userObject instanceof Sampler || userObject instanceof Controller);            if (insertThinkTime) {                JMeterTreeNode[] nodes = createThinkTime(guiPackage, parentNode);                if (nodes.length != 2) {                    throw new IllegalArgumentException("Invalid Think Time, expected 2 nodes, got:" + nodes.length);                }                index++;                addNodesToTreeHierachically(guiPackage, parentNode, nodes, index);            }            index++;        }    } catch (Exception ex) {        throw new IllegalUserActionException("Cannot add think times", ex);    }}
0
private void addNodesToTreeHierachically(GuiPackage guiPackage, JMeterTreeNode parentNode, JMeterTreeNode[] childNodes, int index)
{    guiPackage.getTreeModel().insertNodeInto(childNodes[0], parentNode, index);    guiPackage.getTreeModel().insertNodeInto(childNodes[1], childNodes[0], 0);}
0
private JMeterTreeNode[] createThinkTime(GuiPackage guiPackage, JMeterTreeNode parentNode) throws ReflectiveOperationException, IllegalUserActionException
{    Class<?> clazz = Class.forName(DEFAULT_IMPLEMENTATION);    ThinkTimeCreator thinkTimeCreator = (ThinkTimeCreator) clazz.getDeclaredConstructor().newInstance();    return thinkTimeCreator.createThinkTime(guiPackage, parentNode);}
0
public Set<String> getActionNames()
{    return commands;}
0
public Set<String> getActionNames()
{    return commandSet;}
0
public void doAction(ActionEvent e)
{    GuiPackage guiPackage = GuiPackage.getInstance();    try {        guiPackage.updateCurrentNode();        TestElement testElement = guiPackage.createTestElement(((JComponent) e.getSource()).getName());        JMeterTreeNode parentNode = guiPackage.getCurrentNode();        JMeterTreeNode node = guiPackage.getTreeModel().addComponent(testElement, parentNode);        guiPackage.getNamingPolicy().nameOnCreation(node);        guiPackage.getMainFrame().getTree().setSelectionPath(new TreePath(node.getPath()));    } catch (Exception err) {                        String msg = err.getMessage();        if (msg == null) {            msg = err.toString();        }        JMeterUtils.reportErrorToUser(msg);    }}
1
public void doAction(ActionEvent e)
{    GuiPackage guiPackage = GuiPackage.getInstance();    JMeterTreeNode[] currentNodes = guiPackage.getTreeListener().getSelectedNodes();    List<JMeterTreeNode> filteredNodes = new ArrayList<>();    for (JMeterTreeNode jMeterTreeNode : currentNodes) {        if (jMeterTreeNode.getUserObject() instanceof Controller) {            filteredNodes.add(jMeterTreeNode);        } else {                    }    }    try {        for (JMeterTreeNode currentNode : filteredNodes) {            applyNamingPolicyToCurrentNode(guiPackage, currentNode);        }        GuiPackage.getInstance().getMainFrame().repaint();    } catch (Exception err) {        Toolkit.getDefaultToolkit().beep();                JMeterUtils.reportErrorToUser("Failed to apply naming policy", err);    }}
1
private void applyNamingPolicyToCurrentNode(GuiPackage guiPackage, JMeterTreeNode currentNode)
{    TreeNodeNamingPolicy namingPolicy = guiPackage.getNamingPolicy();    guiPackage.updateCurrentNode();    Enumeration<?> enumeration = currentNode.children();    int index = 0;    namingPolicy.resetState(currentNode);    while (enumeration.hasMoreElements()) {        JMeterTreeNode childNode = (JMeterTreeNode) enumeration.nextElement();        namingPolicy.rename(currentNode, childNode, index);        index++;    }}
0
public Set<String> getActionNames()
{    return commands;}
0
public void doActionAfterCheck(ActionEvent e)
{    String locale = ((Component) e.getSource()).getName();    Locale loc;    int sep = locale.indexOf('_');    if (sep > 0) {        loc = new Locale(locale.substring(0, sep), locale.substring(sep + 1));    } else {        loc = new Locale(locale, "");    }        try {        JMeterUtils.setLocale(loc);    } catch (JMeterError err) {        JMeterUtils.reportErrorToUser(err.toString());    }}
1
public Set<String> getActionNames()
{    return commands;}
0
public void doAction(ActionEvent e)
{    String name = ((Component) e.getSource()).getName();    GuiPackage guiPackage = GuiPackage.getInstance();    JMeterTreeNode currentNode = guiPackage.getTreeListener().getCurrentNode();    if (!(currentNode.getUserObject() instanceof Controller)) {        Toolkit.getDefaultToolkit().beep();        return;    }    try {        guiPackage.updateCurrentNode();        TestElement controller = guiPackage.createTestElement(name);        changeParent(controller, guiPackage, currentNode);    } catch (Exception err) {        Toolkit.getDefaultToolkit().beep();            }}
1
public Set<String> getActionNames()
{    return commands;}
0
private void changeParent(TestElement newParent, GuiPackage guiPackage, JMeterTreeNode currentNode)
{        Controller currentController = (Controller) currentNode.getUserObject();    JMeterGUIComponent currentGui = guiPackage.getCurrentGui();    String defaultName = JMeterUtils.getResString(currentGui.getLabelResource());    if (StringUtils.isNotBlank(currentController.getName()) && !currentController.getName().equals(defaultName)) {        newParent.setName(currentController.getName());    }    JMeterTreeModel treeModel = guiPackage.getTreeModel();    JMeterTreeNode newNode = new JMeterTreeNode(newParent, treeModel);    JMeterTreeNode parentNode = (JMeterTreeNode) currentNode.getParent();    int index = parentNode.getIndex(currentNode);    treeModel.insertNodeInto(newNode, parentNode, index);    treeModel.removeNodeFromParent(currentNode);    int childCount = currentNode.getChildCount();    for (int i = 0; i < childCount; i++) {                JMeterTreeNode node = (JMeterTreeNode) currentNode.getChildAt(0);        treeModel.removeNodeFromParent(node);        treeModel.insertNodeInto(node, newNode, newNode.getChildCount());    }        TreeNode[] nodes = treeModel.getPathToRoot(newNode);    JTree tree = guiPackage.getTreeListener().getJTree();    tree.setSelectionPath(new TreePath(nodes));}
0
public void actionPerformed(ActionEvent e)
{    if (e.getActionCommand().equals(ActionNames.EXIT) || e.getActionCommand().equals(ActionNames.UNDO) || e.getActionCommand().equals(ActionNames.REDO)) {        doAction(e);    }}
0
public void doAction(ActionEvent e)
{    String action = e.getActionCommand();    if (action.equals(ActionNames.SUB_TREE_SAVED)) {        previousGuiItems.clear();        HashTree subTree = (HashTree) e.getSource();        subTree.traverse(this);    } else if (action.equals(ActionNames.SUB_TREE_LOADED)) {        ListedHashTree addTree = (ListedHashTree) e.getSource();        addTree.traverse(this);    } else if (action.equals(ActionNames.ADD_ALL)) {        previousGuiItems.clear();        GuiPackage.getInstance().getTreeModel().getTestPlan().traverse(this);    } else if (action.equals(ActionNames.CHECK_REMOVE) || action.equals(ActionNames.CHECK_CUT)) {        GuiPackage guiPackage = GuiPackage.getInstance();        JMeterTreeNode[] nodes = guiPackage.getTreeListener().getSelectedNodes();        removeMode = true;        try {            for (int i = nodes.length - 1; i >= 0; i--) {                guiPackage.getTreeModel().getCurrentSubTree(nodes[i]).traverse(this);            }        } finally {            removeMode = false;        }    }        if (action.equals(ActionNames.SUB_TREE_MERGED)) {        dirty = true;    } else if (action.equals(ActionNames.UNDO) || action.equals(ActionNames.REDO)) {        dirty = GuiPackage.getInstance().isDirty();                        previousGuiItems.clear();        GuiPackage.getInstance().getTreeModel().getTestPlan().traverse(this);    } else {        dirty = false;        checkMode = true;        try {            HashTree wholeTree = GuiPackage.getInstance().getTreeModel().getTestPlan();            wholeTree.traverse(this);        } finally {            checkMode = false;        }    }    GuiPackage.getInstance().setDirty(dirty);}
1
public void addNode(Object node, HashTree subTree)
{    if (log.isDebugEnabled()) {            }    JMeterTreeNode treeNode = (JMeterTreeNode) node;    if (checkMode) {                if (!dirty) {            if (previousGuiItems.containsKey(treeNode)) {                if (!previousGuiItems.get(treeNode).equals(treeNode.getTestElement())) {                    dirty = true;                }            } else {                dirty = true;            }        }    } else if (removeMode) {        previousGuiItems.remove(treeNode);    } else {        previousGuiItems.put(treeNode, (TestElement) treeNode.getTestElement().clone());    }}
1
public void subtractNode()
{}
0
public void processPath()
{}
0
public Set<String> getActionNames()
{    return commands;}
0
public Set<String> getActionNames()
{    return commands;}
0
public void doAction(ActionEvent e)
{    GuiPackage guiPackage = GuiPackage.getInstance();    final String actionCommand = e.getActionCommand();    if (actionCommand.equals(ActionNames.CLEAR)) {        JMeterGUIComponent guiComp = guiPackage.getCurrentGui();        if (guiComp instanceof Clearable) {            ((Clearable) guiComp).clearData();        }    } else {        guiPackage.getMainFrame().clearData();        for (JMeterTreeNode node : guiPackage.getTreeModel().getNodesOfType(Clearable.class)) {            JMeterGUIComponent guiComp = guiPackage.getGui(node.getTestElement());            if (guiComp instanceof Clearable) {                Clearable item = (Clearable) guiComp;                try {                    item.clearData();                } catch (Exception ex) {                                    }            }        }    }}
1
public Set<String> getActionNames()
{    return commands;}
0
public void doActionAfterCheck(ActionEvent e)
{    performAction(e);}
0
 static boolean performAction(ActionEvent e)
{    ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(), e.getID(), ActionNames.CHECK_DIRTY));    GuiPackage guiPackage = GuiPackage.getInstance();    if (guiPackage.isDirty()) {        int response;        if ((response = JOptionPane.showConfirmDialog(GuiPackage.getInstance().getMainFrame(),         JMeterUtils.getResString("cancel_new_to_save"),         JMeterUtils.getResString("save?"), JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE)) == JOptionPane.YES_OPTION) {            ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(), e.getID(), ActionNames.SAVE));                        if (guiPackage.isDirty()) {                return false;            }        }        if (response == JOptionPane.CLOSED_OPTION || response == JOptionPane.CANCEL_OPTION) {                        return false;        }    }    ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(), e.getID(), ActionNames.STOP_THREAD));    closeProject(e);    return true;}
0
 static void closeProject(ActionEvent e)
{    GuiPackage guiPackage = GuiPackage.getInstance();    guiPackage.clearTestPlan();    JTree tree = guiPackage.getTreeListener().getJTree();    tree.setSelectionRow(0);    FocusRequester.requestFocus(tree);    FileServer.getFileServer().setScriptName(null);    ActionRouter.getInstance().actionPerformed(new ActionEvent(e.getSource(), e.getID(), ActionNames.ADD_ALL));}
0
public Set<String> getActionNames()
{    return commands;}
0
public void doAction(ActionEvent e)
{    boolean collapse = ActionNames.COLLAPSE_ALL.equals(e.getActionCommand());    GuiPackage guiInstance = GuiPackage.getInstance();    JTree jTree = guiInstance.getMainFrame().getTree();    if (collapse) {        for (int i = jTree.getRowCount() - 1; i >= 0; i--) {            jTree.collapseRow(i);        }        return;    }    for (int i = 0; i < jTree.getRowCount(); i++) {        jTree.expandRow(i);    }}
0
public Set<String> getActionNames()
{    return commands;}
0
public void doAction(ActionEvent e)
{    JMeterTreeListener treeListener = GuiPackage.getInstance().getTreeListener();    JTree jTree = GuiPackage.getInstance().getMainFrame().getTree();    JMeterTreeNode[] selectedNodes = treeListener.getSelectedNodes();    for (JMeterTreeNode currentNode : selectedNodes) {        if (!currentNode.isLeaf()) {            TreeNode[] nodes = GuiPackage.getInstance().getTreeModel().getPathToRoot(currentNode);            TreePath path = new TreePath(nodes);            boolean collapse = ActionNames.COLLAPSE.equals(e.getActionCommand());            expandCollapseNode(jTree, path, collapse);        }    }}
0
private void expandCollapseNode(JTree jTree, TreePath parent, boolean collapse)
{    TreeNode node = (TreeNode) parent.getLastPathComponent();    if (node.isLeaf()) {        return;    }    Enumeration<?> children = node.children();    while (children.hasMoreElements()) {        TreeNode child = (TreeNode) children.nextElement();        TreePath path = parent.pathByAddingChild(child);        expandCollapseNode(jTree, path, collapse);    }    if (collapse) {        jTree.collapsePath(parent);    } else {        jTree.expandPath(parent);    }}
0
public void addNode(Object object, HashTree subTree)
{    JMeterTreeNode treeNode = (JMeterTreeNode) object;    Object userObject = treeNode.getUserObject();    treeNode.setMarkedBySearch(false);    if (treeNode.isEnabled() && (userObject instanceof JSR223TestElement)) {        JSR223TestElement element = (JSR223TestElement) userObject;        TestBeanHelper.prepare(element);        try {                        if (!element.compile()) {                elementsWithCompilationErrors++;                treeNode.setMarkedBySearch(true);            } else {                            }        } catch (Exception e) {            treeNode.setMarkedBySearch(true);                    }    }}
1
public void subtractNode()
{}
0
public void processPath()
{}
0
public int getElementsWithCompilationErrors()
{    return elementsWithCompilationErrors;}
0
public void doAction(ActionEvent e)
{    HashTree wholeTree = GuiPackage.getInstance().getTreeModel().getTestPlan();    JSR223TestElementCompilerVisitor visitor = new JSR223TestElementCompilerVisitor();    wholeTree.traverse(visitor);    GuiPackage.getInstance().getMainFrame().repaint();    if (visitor.getElementsWithCompilationErrors() > 0) {        JMeterUtils.reportErrorToUser(MESSAGE_FORMAT.format(new Object[] { Integer.valueOf(visitor.getElementsWithCompilationErrors()) }));    }}
0
public Set<String> getActionNames()
{    return commands;}
0
public JMenuItem[] getMenuItemsAtLocation(MENU_LOCATION location)
{    if (location == MENU_LOCATION.TOOLS) {        JMenuItem menuItemIC = new JMenuItem(JMeterUtils.getResString("compile_menu"), KeyEvent.VK_UNDEFINED);        menuItemIC.setName(ActionNames.COMPILE_JSR223);        menuItemIC.setActionCommand(ActionNames.COMPILE_JSR223);        menuItemIC.setAccelerator(null);        menuItemIC.addActionListener(ActionRouter.getInstance());        return new JMenuItem[] { menuItemIC };    }    return new JMenuItem[0];}
0
public JMenu[] getTopLevelMenus()
{    return new JMenu[0];}
0
public boolean localeChanged(MenuElement menu)
{    return false;}
0
public void localeChanged()
{}
0
public Set<String> getActionNames()
{    return commands;}
0
public void doAction(ActionEvent e)
{    JMeterTreeListener treeListener = GuiPackage.getInstance().getTreeListener();    JMeterTreeNode[] nodes = treeListener.getSelectedNodes();    nodes = keepOnlyAncestors(nodes);    nodes = cloneTreeNodes(nodes);    setCopiedNodes(nodes);}
0
public static JMeterTreeNode[] getCopiedNodes()
{    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();    if (clipboard.isDataFlavorAvailable(JMeterTreeNodeTransferable.JMETER_TREE_NODE_ARRAY_DATA_FLAVOR)) {        try {            return (JMeterTreeNode[]) clipboard.getData(JMeterTreeNodeTransferable.JMETER_TREE_NODE_ARRAY_DATA_FLAVOR);        } catch (Exception ex) {                        JOptionPane.showMessageDialog(GuiPackage.getInstance().getMainFrame(),             JMeterUtils.getResString("clipboard_node_read_error") + ":\n" + ex.getLocalizedMessage(), JMeterUtils.getResString("error_title"),             JOptionPane.ERROR_MESSAGE);        }    }    return null;}
1
public static JMeterTreeNode cloneTreeNode(JMeterTreeNode node)
{    JMeterTreeNode treeNode = (JMeterTreeNode) node.clone();    treeNode.setUserObject(((TestElement) node.getUserObject()).clone());    cloneChildren(treeNode, node);    return treeNode;}
0
 static JMeterTreeNode[] keepOnlyAncestors(JMeterTreeNode[] currentNodes)
{    List<JMeterTreeNode> nodes = new ArrayList<>();    for (int i = 0; i < currentNodes.length; i++) {        boolean exclude = false;        for (int j = 0; j < currentNodes.length; j++) {            if (i != j && currentNodes[i].isNodeAncestor(currentNodes[j])) {                exclude = true;                break;            }        }        if (!exclude) {            nodes.add(currentNodes[i]);        }    }    return nodes.toArray(new JMeterTreeNode[nodes.size()]);}
0
public static void setCopiedNodes(JMeterTreeNode[] nodes)
{    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();    try {        JMeterTreeNodeTransferable transferable = new JMeterTreeNodeTransferable();        transferable.setTransferData(nodes);        clipboard.setContents(transferable, null);    } catch (Exception ex) {                JOptionPane.showMessageDialog(GuiPackage.getInstance().getMainFrame(),         JMeterUtils.getResString("clipboard_node_read_error") + ":\n" + ex.getLocalizedMessage(), JMeterUtils.getResString("error_title"),         JOptionPane.ERROR_MESSAGE);    }}
1
public static JMeterTreeNode[] cloneTreeNodes(JMeterTreeNode[] nodes)
{    JMeterTreeNode[] treeNodes = new JMeterTreeNode[nodes.length];    for (int i = 0; i < nodes.length; i++) {        treeNodes[i] = cloneTreeNode(nodes[i]);    }    return treeNodes;}
0
private static void cloneChildren(JMeterTreeNode to, JMeterTreeNode from)
{    Enumeration<?> enumFrom = from.children();    while (enumFrom.hasMoreElements()) {        JMeterTreeNode child = (JMeterTreeNode) enumFrom.nextElement();        JMeterTreeNode childClone = (JMeterTreeNode) child.clone();        childClone.setUserObject(((TestElement) child.getUserObject()).clone());        to.add(childClone);        cloneChildren((JMeterTreeNode) to.getLastChild(), child);    }}
0
public Set<String> getActionNames()
{    return commands;}
0
public void doAction(ActionEvent event)
{    FunctionHelper helper = new FunctionHelper(getParentFrame(event));    helper.setVisible(true);}
0
public Set<String> getActionNames()
{    return commands;}
0
public void doAction(ActionEvent e)
{    GuiPackage guiPack = GuiPackage.getInstance();    ActionRouter.getInstance().actionPerformed(new ActionEvent(e.getSource(), e.getID(), ActionNames.CHECK_CUT));    JMeterTreeNode[] currentNodes = guiPack.getTreeListener().getSelectedNodes();    currentNodes = Copy.keepOnlyAncestors(currentNodes);    Copy.setCopiedNodes(currentNodes);    for (JMeterTreeNode currentNode : currentNodes) {        guiPack.getTreeModel().removeNodeFromParent(currentNode);    }    guiPack.getMainFrame().repaint();}
0
public Set<String> getActionNames()
{    return commands;}
0
public void doAction(ActionEvent e)
{    GuiPackage instance = GuiPackage.getInstance();    JMeterTreeListener treeListener = instance.getTreeListener();    JMeterTreeNode[] copiedNodes = Copy.cloneTreeNodes(treeListener.getSelectedNodes());    JMeterTreeNode currentNode = treeListener.getCurrentNode();    JMeterTreeNode parentNode = (JMeterTreeNode) currentNode.getParent();    JMeterTreeModel treeModel = instance.getTreeModel();    for (int nodeIndex = copiedNodes.length - 1; nodeIndex >= 0; nodeIndex--) {        JMeterTreeNode copiedNode = copiedNodes[nodeIndex];        int index = parentNode.getIndex(currentNode) + 1;        treeModel.insertNodeInto(copiedNode, parentNode, index);    }    instance.getMainFrame().repaint();}
0
public void doAction(ActionEvent e)
{    GuiPackage guiPackage = GuiPackage.getInstance();    JMeterGUIComponent currentGui = guiPackage.getCurrentGui();    guiPackage.getMainFrame().setMainPanel((javax.swing.JComponent) currentGui);    guiPackage.getMainFrame().setEditMenu(guiPackage.getTreeListener().getCurrentNode().createPopupMenu());    guiPackage.getMainFrame().setFileLoadEnabled(true);    guiPackage.getMainFrame().setFileSaveEnabled(true);}
0
public Set<String> getActionNames()
{    return commands;}
0
public void doAction(ActionEvent e)
{    JMeterTreeNode[] nodes = GuiPackage.getInstance().getTreeListener().getSelectedNodes();    if (e.getActionCommand().equals(ActionNames.ENABLE)) {                enableComponents(nodes, true);    } else if (e.getActionCommand().equals(ActionNames.DISABLE)) {                enableComponents(nodes, false);    } else if (e.getActionCommand().equals(ActionNames.TOGGLE)) {                toggleComponents(nodes);    }}
1
private void enableComponents(JMeterTreeNode[] nodes, boolean enable)
{    GuiPackage pack = GuiPackage.getInstance();    for (JMeterTreeNode node : nodes) {        node.setEnabled(enable);        pack.getGui(node.getTestElement()).setEnabled(enable);    }}
0
private void toggleComponents(JMeterTreeNode[] nodes)
{    GuiPackage pack = GuiPackage.getInstance();    for (JMeterTreeNode node : nodes) {        boolean enable = !node.isEnabled();        node.setEnabled(enable);        pack.getGui(node.getTestElement()).setEnabled(enable);    }}
0
public Set<String> getActionNames()
{    return commands;}
0
public Set<String> getActionNames()
{    return commands;}
0
public void doActionAfterCheck(ActionEvent e)
{    ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(), e.getID(), ActionNames.CHECK_DIRTY));    GuiPackage guiPackage = GuiPackage.getInstance();    if (guiPackage.isDirty()) {        int chosenOption = JOptionPane.showConfirmDialog(guiPackage.getMainFrame(), JMeterUtils.getResString(        "cancel_exit_to_save"),         JMeterUtils.getResString("save?"), JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);        if (chosenOption == JOptionPane.NO_OPTION) {            System.exit(0);        } else if (chosenOption == JOptionPane.YES_OPTION) {            ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(), e.getID(), ActionNames.SAVE));            if (!guiPackage.isDirty()) {                System.exit(0);            }        }    } else {        System.exit(0);    }}
0
public void doAction(ActionEvent e)
{    if (USE_LOCAL_HELP) {        JDialog dialog = initHelpWindow();                dialog.setVisible(true);        /*             * This means that a new page will be shown before rendering is complete,             * however the correct location will be displayed.             * Attempts to use a "page" PropertyChangeListener to detect when the page             * has been loaded failed to work any better.             */        StringBuilder url = new StringBuilder();        if (e.getSource() instanceof String[]) {            String[] source = (String[]) e.getSource();            url.append(source[0]).append('#').append(source[1]);        } else {            url.append(HELP_COMPONENTS).append('#').append(GuiPackage.getInstance().getTreeListener().getCurrentNode().getDocAnchor());        }        try {                        helpDoc.setPage(url.toString());        } catch (IOException ioe) {                        helpDoc.setText("<html><head><title>Problem loading help page</title>" + "<style><!--" + ".note { background-color: #ffeeee; border: 1px solid brown; }" + "div { padding: 10; margin: 10; }" + "--></style></head>" + "<body><div class='note'>" + "<h1>Problem loading help page</h1>" + "<div>Can't load url: &quot;<em>" + url.toString() + "</em>&quot;</div>" + "<div>See log for more info</div>" + "</body>");        }    } else {        if (e.getSource() instanceof String[]) {            ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(), e.getID(), ActionNames.LINK_FUNC_REF));        } else {            String[] source = new String[] { ActionNames.LINK_COMP_REF, GuiPackage.getInstance().getTreeListener().getCurrentNode().getDocAnchor() };            ActionRouter.getInstance().doActionNow(new ActionEvent(source, e.getID(), ActionNames.LINK_COMP_REF));        }    }}
1
private static JDialog initHelpWindow()
{    if (helpWindow == null) {        helpWindow = new         EscapeDialog(        new Frame(),         JMeterUtils.getResString("help"), false);        helpWindow.getContentPane().setLayout(new GridLayout(1, 1));        helpWindow.getContentPane().removeAll();        helpWindow.getContentPane().add(scroller);        ComponentUtil.centerComponentInWindow(helpWindow, 60);    }    return helpWindow;}
0
public Set<String> getActionNames()
{    return commands;}
0
public List<String> run()
{    List<String> errorMessageList = new ArrayList<>();    errorMessageList.addAll(checkArguments());    if (!errorMessageList.isEmpty()) {        return errorMessageList;    }    ByteArrayOutputStream commandExecutionOutput = new ByteArrayOutputStream();    int resultCode = -1;    List<String> generationCommand = createGenerationCommand();    try {        SystemCommand sc = new SystemCommand(new File(JMeterUtils.getJMeterBinDir()), COMMAND_TIMEOUT, 100, null, null, commandExecutionOutput, null);                resultCode = sc.run(generationCommand);        if (resultCode != 0) {            errorMessageList.add(commandExecutionOutput.toString());                        return errorMessageList;        }    } catch (InterruptedException | IOException e) {        errorMessageList.add(commandExecutionOutput.toString());        if (LOGGER.isErrorEnabled()) {                    }    }        return errorMessageList;}
1
private List<String> createGenerationCommand()
{    String jmeterBinDir = JMeterUtils.getJMeterBinDir();    List<String> arguments = new ArrayList<>();    String java = System.getProperty("java.home") + "/bin/java";    arguments.add(java);    arguments.add("-jar");    arguments.add(jmeterBinDir + "/ApacheJMeter.jar");    arguments.add("-p");    arguments.add(jmeterBinDir + "/jmeter.properties");    arguments.add("-q");    arguments.add(userPropertiesFilePath);    arguments.add("-g");    arguments.add(csvFilePath);    arguments.add("-j");    arguments.add(jmeterBinDir + "/jmeter_html_report.log");    arguments.add("-o");    arguments.add(outputDirectoryPath);    return arguments;}
0
private List<String> checkArguments()
{    List<String> errors = new ArrayList<>();    String csvError = checkFile(new File(csvFilePath));    if (csvError != null) {        errors.add(JMeterUtils.getResString("generate_report_ui.csv_file") + csvError);    }    String userPropertiesError = checkFile(new File(userPropertiesFilePath));    if (userPropertiesError != null) {        errors.add(JMeterUtils.getResString("generate_report_ui.user_properties_file") + userPropertiesError);    }    String outputError = checkDirectory(new File(outputDirectoryPath));    if (outputError != null) {        errors.add(JMeterUtils.getResString("generate_report_ui.output_directory") + outputError);    }    return errors;}
0
private String checkFile(File fileToCheck)
{    if (fileToCheck.exists() && fileToCheck.canRead() && fileToCheck.isFile()) {        return null;    } else {        return MessageFormat.format(JMeterUtils.getResString(NO_FILE), fileToCheck);    }}
0
private String checkDirectory(File directoryToCheck)
{    if (directoryToCheck.exists()) {        String[] files = directoryToCheck.list();        if (files != null && files.length > 0) {            return MessageFormat.format(JMeterUtils.getResString(NOT_EMPTY_DIRECTORY), directoryToCheck);        } else {            return null;        }    } else {        File parentDirectory = directoryToCheck.getParentFile();        if (parentDirectory != null && parentDirectory.exists() && parentDirectory.canWrite()) {            if (directoryToCheck.mkdir()) {                return null;            } else {                return MessageFormat.format(JMeterUtils.getResString(CANNOT_CREATE_DIRECTORY), directoryToCheck);            }        } else {            return MessageFormat.format(JMeterUtils.getResString(CANNOT_CREATE_DIRECTORY), directoryToCheck);        }    }}
0
public void rename(JMeterTreeNode parentNode, JMeterTreeNode childNode, int iterationIndex)
{    if (childNode.getUserObject() instanceof TransactionController || childNode.getUserObject() instanceof Sampler) {        childNode.setName(parentNode.getName() + TRANSACTION_CHILDREN_SEPARATOR + formatter.format(index));        index++;    }}
0
public void resetState(JMeterTreeNode rootNode)
{    int numberOfChildren = rootNode.getChildCount();    this.index = 0;    int numberOfDigits = String.valueOf(numberOfChildren).length();    StringBuilder formatSB = new StringBuilder(numberOfDigits);    for (int i = 0; i < numberOfDigits; i++) {        formatSB.append("0");    }    this.formatter = new DecimalFormat(formatSB.toString());}
0
public void nameOnCreation(JMeterTreeNode node)
{    if (node.getName().isEmpty()) {        node.setName(((TestElement) node.getUserObject()).getClass().getSimpleName());    }    node.setName(PREFIX + node.getName() + SUFFIX);}
0
public static boolean matches(KeyEvent e, KeyStroke k)
{        final int modifiersEx = e.getModifiersEx() | e.getModifiers();    return e.getKeyCode() == k.getKeyCode() && modifiersEx == k.getModifiers();}
0
public Set<String> getActionNames()
{    return commands;}
0
public void doActionAfterCheck(final ActionEvent e)
{        final JFileChooser chooser = FileDialoger.promptToOpenFile(new String[] { ".jmx" });    if (chooser == null) {        return;    }    final File selectedFile = chooser.getSelectedFile();    if (selectedFile != null) {        final boolean merging = e.getActionCommand().equals(ActionNames.MERGE);                if (!merging) {                        if (!Close.performAction(e)) {                return;            }        }        loadProjectFile(e, selectedFile, merging);    }}
0
 static void loadProjectFile(final ActionEvent e, final File f, final boolean merging)
{    loadProjectFile(e, f, merging, true);}
0
 static void loadProjectFile(final ActionEvent e, final File f, final boolean merging, final boolean setDetails)
{    ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(), e.getID(), ActionNames.STOP_THREAD));    final GuiPackage guiPackage = GuiPackage.getInstance();    if (f != null) {        try {            if (merging) {                            } else {                                                if (setDetails) {                    FileServer.getFileServer().setBaseForScript(f);                }            }            final HashTree tree = SaveService.loadTree(f);            final boolean isTestPlan = insertLoadedTree(e.getID(), tree, merging);                        if (!merging && isTestPlan && setDetails) {                                                guiPackage.setTestPlanFile(f.getAbsolutePath());            }        } catch (NoClassDefFoundError ex) {                        reportError("Missing jar file. {}", ex, true);        } catch (ConversionException ex) {            if (log.isWarnEnabled()) {                            }            JMeterUtils.reportErrorToUser(SaveService.CEtoString(ex));        } catch (IOException ex) {            reportError("Error reading file. {}", ex, false);        } catch (StreamException ex) {            Throwable exceptionToDisplay = ex;            if ("".equals(ex.getMessage()) && ex.getCause() != null) {                exceptionToDisplay = ex.getCause();            }            reportError("Error in XML format. {}", exceptionToDisplay, false);        } catch (Exception ex) {            reportError("Unexpected error. {}", ex, true);        }        FileDialoger.setLastJFCDirectory(f.getParentFile().getAbsolutePath());        guiPackage.updateCurrentGui();        guiPackage.getMainFrame().repaint();    }}
1
public static boolean insertLoadedTree(final int id, final HashTree tree, final boolean merging) throws IllegalUserActionException
{    if (tree == null) {        throw new IllegalUserActionException("Empty TestPlan or error reading test plan - see log file");    }    final boolean isTestPlan = tree.getArray()[0] instanceof TestPlan;        final GuiPackage guiInstance = GuiPackage.getInstance();    if (isTestPlan && !merging) {                        guiInstance.clearTestPlan((TestElement) tree.getArray()[0]);    }    if (merging) {                final TestElement te = (TestElement) tree.getArray()[0];        if (!(te instanceof TestPlan)) {                        final boolean ok = MenuFactory.canAddTo(guiInstance.getCurrentNode(), te);            if (!ok) {                String name = te.getName();                String className = te.getClass().getName();                className = className.substring(className.lastIndexOf('.') + 1);                throw new IllegalUserActionException("Can't merge " + name + " (" + className + ") here");            }        }    }    final HashTree newTree = guiInstance.addSubTree(tree);    guiInstance.updateCurrentGui();    guiInstance.getMainFrame().getTree().setSelectionPath(new TreePath(((JMeterTreeNode) newTree.getArray()[0]).getPath()));    final HashTree subTree = guiInstance.getCurrentSubTree();            ActionEvent actionEvent = new ActionEvent(subTree.get(subTree.getArray()[subTree.size() - 1]), id, merging ? ActionNames.SUB_TREE_MERGED : ActionNames.SUB_TREE_LOADED);    ActionRouter.getInstance().actionPerformed(actionEvent);    final JTree jTree = guiInstance.getMainFrame().getTree();    if (EXPAND_TREE && !merging) {                for (int i = 0; i < jTree.getRowCount(); i++) {            jTree.expandRow(i);        }    } else {        jTree.expandRow(0);    }    jTree.setSelectionPath(jTree.getPathForRow(1));    FocusRequester.requestFocus(jTree);    return isTestPlan;}
0
public static boolean insertLoadedTree(final int id, final HashTree tree) throws IllegalUserActionException
{    return insertLoadedTree(id, tree, false);}
0
private static void reportError(final String messageFormat, final Throwable ex, final boolean stackTrace)
{    if (log.isWarnEnabled()) {        if (stackTrace) {                    } else {                    }    }    String msg = ex.getMessage();    if (msg == null) {        msg = "Unexpected error - see log for details";    }    JMeterUtils.reportErrorToUser(msg);}
1
public static void loadProject(ActionEvent e, File file)
{    if (!Close.performAction(e)) {        return;    }    Load.loadProjectFile(e, file, false);}
0
public Set<String> getActionNames()
{    return commands;}
0
public void doActionAfterCheck(ActionEvent e)
{        if (!Close.performAction(e)) {        return;    }        loadProjectFile(e, getRecentFile(e), false);}
0
private File getRecentFile(ActionEvent e)
{    JMenuItem menuItem = (JMenuItem) e.getSource();        return new File(getRecentFile(Integer.parseInt(menuItem.getName())));}
0
public static List<JComponent> getRecentFileMenuItems()
{    LinkedList<JComponent> menuItems = new LinkedList<>();        for (int i = 0; i < NUMBER_OF_MENU_ITEMS; i++) {                JMenuItem recentFile = new JMenuItem();                recentFile.setName(Integer.toString(i));        recentFile.addActionListener(ActionRouter.getInstance());        recentFile.setActionCommand(ActionNames.OPEN_RECENT);                int shortKey = getShortcutKey(i);        if (shortKey >= 0) {            recentFile.setMnemonic(shortKey);        }                menuItems.add(recentFile);    }        updateMenuItems(menuItems);    return menuItems;}
0
public static void updateRecentFileMenuItems(List<JComponent> menuItems, String loadedFileName)
{        LinkedList<String> newRecentFiles = new LinkedList<>();        boolean alreadyExists = false;    for (int i = 0; i < NUMBER_OF_MENU_ITEMS; i++) {        String recentFilePath = getRecentFile(i);        if (!loadedFileName.equals(recentFilePath)) {            newRecentFiles.add(recentFilePath);        } else {            alreadyExists = true;        }    }        newRecentFiles.add(0, loadedFileName);        if (!alreadyExists) {        newRecentFiles.removeLast();    }        for (int i = 0; i < NUMBER_OF_MENU_ITEMS; i++) {        String fileName = newRecentFiles.get(i);        if (fileName != null) {            setRecentFile(i, fileName);        }    }        updateMenuItems(menuItems);}
0
private static void updateMenuItems(List<JComponent> menuItems)
{        for (int i = 0; i < NUMBER_OF_MENU_ITEMS; i++) {                JMenuItem recentFile = (JMenuItem) menuItems.get(i);                String recentFilePath = getRecentFile(i);        if (recentFilePath != null) {            File file = new File(recentFilePath);            String sb =             String.valueOf(i + 1) + " " + getMenuItemDisplayName(file);                        recentFile.setText(sb);            recentFile.setToolTipText(recentFilePath);            recentFile.setEnabled(true);            recentFile.setVisible(true);        } else {            recentFile.setEnabled(false);            recentFile.setVisible(false);        }    }}
0
private static String getMenuItemDisplayName(File file)
{        final int maxLength = 40;    String menuText = file.getName();    if (menuText.length() > maxLength) {                menuText = "..." + menuText.substring(menuText.length() - maxLength, menuText.length());    }    return menuText;}
0
private static int getShortcutKey(int index)
{    int shortKey = -1;    switch(index + 1) {        case 1:            shortKey = KeyEvent.VK_1;            break;        case 2:            shortKey = KeyEvent.VK_2;            break;        case 3:            shortKey = KeyEvent.VK_3;            break;        case 4:            shortKey = KeyEvent.VK_4;            break;        case 5:            shortKey = KeyEvent.VK_5;            break;        case 6:            shortKey = KeyEvent.VK_6;            break;        case 7:            shortKey = KeyEvent.VK_7;            break;        case 8:            shortKey = KeyEvent.VK_8;            break;        case 9:            shortKey = KeyEvent.VK_9;            break;        default:            break;    }    return shortKey;}
0
public static String getRecentFile(int index)
{    return prefs.get(USER_PREFS_KEY + index, null);}
0
private static void setRecentFile(int index, String fileName)
{    prefs.put(USER_PREFS_KEY + index, fileName);}
0
public static boolean hasVisibleMenuItem(List<JComponent> fileLoadRecentFiles)
{    return fileLoadRecentFiles.stream().anyMatch(JComponent::isVisible);}
0
public Set<String> getActionNames()
{    return commands;}
0
public void doAction(ActionEvent e)
{    if (ActionNames.LOGGER_PANEL_ENABLE_DISABLE.equals(e.getActionCommand())) {        GuiPackage guiInstance = GuiPackage.getInstance();        JSplitPane splitPane = (JSplitPane) guiInstance.getLoggerPanel().getParent();        if (!guiInstance.getLoggerPanel().isVisible()) {            splitPane.setDividerSize(UIManager.getInt("SplitPane.dividerSize"));            guiInstance.getLoggerPanel().setVisible(true);            splitPane.setDividerLocation(0.8);            guiInstance.getMenuItemLoggerPanel().getModel().setSelected(true);        } else {            guiInstance.getLoggerPanel().setVisible(false);            splitPane.setDividerSize(0);            guiInstance.getMenuItemLoggerPanel().getModel().setSelected(false);        }    }}
0
public void doAction(ActionEvent ev)
{    String levelString = ev.getActionCommand().substring(ActionNames.LOG_LEVEL_PREFIX.length());        Configurator.setRootLevel(org.apache.logging.log4j.Level.toLevel(levelString));}
1
public Set<String> getActionNames()
{    return commands;}
0
public static String getJMeterLaf()
{    String laf = PREFS.get(USER_PREFS_KEY, null);    if (laf != null) {        return checkLafName(laf);    }    String osName =     System.getProperty("os.name").toLowerCase(Locale.ENGLISH);        laf = JMeterUtils.getProperty(JMETER_LAF + "." + osName.replace(' ', '_'));    if (laf != null) {        return checkLafName(laf);    }        String[] osFamily = osName.split("\\s");    laf = JMeterUtils.getProperty(JMETER_LAF + "." + osFamily[0]);    if (laf != null) {        return checkLafName(laf);    }    laf = JMeterUtils.getPropDefault(JMETER_LAF, JMeterMenuBar.DARCULA_LAF_CLASS);    if (laf != null) {        return checkLafName(laf);    }    return UIManager.getCrossPlatformLookAndFeelClassName();}
0
private static String checkLafName(String laf)
{    if (JMeterMenuBar.SYSTEM_LAF.equalsIgnoreCase(laf)) {        return UIManager.getSystemLookAndFeelClassName();    }    if (JMeterMenuBar.CROSS_PLATFORM_LAF.equalsIgnoreCase(laf)) {        return UIManager.getCrossPlatformLookAndFeelClassName();    }    return laf;}
0
public void doAction(ActionEvent ev)
{    try {        String className = ev.getActionCommand().substring(ActionNames.LAF_PREFIX.length()).replace('/', '.');        UIManager.setLookAndFeel(className);        JMeterUtils.refreshUI();        PREFS.put(USER_PREFS_KEY, className);        int chosenOption = JOptionPane.showConfirmDialog(GuiPackage.getInstance().getMainFrame(), JMeterUtils.getResString(        "laf_quit_after_change"),         JMeterUtils.getResString("exit"), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);        if (chosenOption == JOptionPane.YES_OPTION) {            ActionRouter.getInstance().doActionNow(new ActionEvent(ev.getSource(), ev.getID(), ActionNames.RESTART));        }    } catch (UnsupportedLookAndFeelException | InstantiationException | ClassNotFoundException | IllegalAccessException e) {        JMeterUtils.reportErrorToUser("Look and Feel unavailable:" + e.toString());    }}
0
public Set<String> getActionNames()
{    return commands;}
0
public void doAction(ActionEvent e)
{    JMeterTreeListener treeListener = GuiPackage.getInstance().getTreeListener();    if (treeListener.getSelectedNodes().length != 1) {                return;    }    JMeterTreeNode currentNode = treeListener.getCurrentNode();    JMeterTreeNode parentNode = getParentNode(currentNode);    if (parentNode != null) {        String action = e.getActionCommand();        int index = parentNode.getIndex(currentNode);        if (ActionNames.MOVE_UP.equals(action)) {            if (index > 0) {                                int newIndx = index - 1;                moveAndSelectNode(currentNode, parentNode, newIndx);            }        } else if (ActionNames.MOVE_DOWN.equals(action)) {            if (index < parentNode.getChildCount() - 1) {                                int newIndx = index + 1;                moveAndSelectNode(currentNode, parentNode, newIndx);            }        } else if (ActionNames.MOVE_LEFT.equals(action)) {            JMeterTreeNode parentParentNode = getParentNode(parentNode);                        if (parentParentNode != null && canAddTo(parentParentNode, currentNode)) {                moveAndSelectNode(currentNode, parentParentNode, parentParentNode.getIndex(parentNode));            }        } else if (ActionNames.MOVE_RIGHT.equals(action)) {            JMeterTreeNode after = (JMeterTreeNode) parentNode.getChildAfter(currentNode);            if (after != null && canAddTo(after, currentNode)) {                                moveAndSelectNode(currentNode, after, 0);            }        }    }    GuiPackage.getInstance().getMainFrame().repaint();}
0
private JMeterTreeNode getParentNode(JMeterTreeNode currentNode)
{    JMeterTreeNode parentNode = (JMeterTreeNode) currentNode.getParent();    TestElement te = currentNode.getTestElement();    if (te instanceof TestPlan) {                parentNode = null;    }    return parentNode;}
0
private static boolean canAddTo(JMeterTreeNode parentNode, JMeterTreeNode node)
{    boolean ok = MenuFactory.canAddTo(parentNode, new JMeterTreeNode[] { node });    if (!ok) {        Toolkit.getDefaultToolkit().beep();    }    return ok;}
0
private static void moveAndSelectNode(JMeterTreeNode currentNode, JMeterTreeNode parentNode, int newIndx)
{    GuiPackage guiInstance = GuiPackage.getInstance();    guiInstance.getTreeModel().removeNodeFromParent(currentNode);    guiInstance.getTreeModel().insertNodeInto(currentNode, parentNode, newIndx);        TreeNode[] nodes = guiInstance.getTreeModel().getPathToRoot(currentNode);    JTree jTree = guiInstance.getMainFrame().getTree();    jTree.setSelectionPath(new TreePath(nodes));}
0
public Set<String> getActionNames()
{    return commands;}
0
private static final Map<String, String> initLinkMap()
{    Map<String, String> map = new HashMap<>(5);    map.put(ActionNames.LINK_BUG_TRACKER, "https://jmeter.apache.org/issues.html");    map.put(ActionNames.LINK_COMP_REF, "https://jmeter.apache.org/usermanual/component_reference.html");    map.put(ActionNames.LINK_FUNC_REF, "https://jmeter.apache.org/usermanual/functions.html");    map.put(ActionNames.LINK_NIGHTLY_BUILD, "https://jmeter.apache.org/nightly.html");    map.put(ActionNames.LINK_RELEASE_NOTES, "https://jmeter.apache.org/changes.html");    return map;}
0
public void doAction(ActionEvent e)
{    String url = LINK_MAP.get(e.getActionCommand());    if (url == null) {                return;    }    try {        if (e.getSource() instanceof String[]) {            url += "#" + ((String[]) e.getSource())[1];        }        java.awt.Desktop.getDesktop().browse(java.net.URI.create(url));    } catch (IOException err) {            } catch (UnsupportedOperationException err) {                showBrowserWarning(url);    } catch (SecurityException err) {            } catch (Exception err) {            }}
1
public Set<String> getActionNames()
{    return commands;}
0
private void showBrowserWarning(String url)
{    String problemSolver;    if (url.startsWith(LINK_MAP.get(ActionNames.LINK_COMP_REF)) || url.startsWith(LINK_MAP.get(ActionNames.LINK_FUNC_REF))) {        problemSolver = "\n\nTry to set the system property help.local to true.";    } else {        problemSolver = "";    }    JOptionPane.showMessageDialog(null, String.format("Problem opening a browser to show the content of the URL%n%s%s", url, problemSolver), "Problem opening browser", JOptionPane.WARNING_MESSAGE);}
0
public Set<String> getActionNames()
{    return commands;}
0
public void doAction(ActionEvent e)
{    JMeterTreeNode[] draggedNodes = Copy.getCopiedNodes();    if (draggedNodes == null) {        Toolkit.getDefaultToolkit().beep();        return;    }    JMeterTreeListener treeListener = GuiPackage.getInstance().getTreeListener();    JMeterTreeNode currentNode = treeListener.getCurrentNode();    if (MenuFactory.canAddTo(currentNode, draggedNodes)) {        Arrays.stream(draggedNodes).filter(Objects::nonNull).forEach(draggedNode -> addNode(currentNode, draggedNode));    } else {        Toolkit.getDefaultToolkit().beep();    }    GuiPackage.getInstance().getMainFrame().repaint();}
0
private void addNode(JMeterTreeNode parent, JMeterTreeNode node)
{    try {                JMeterTreeNode newNode = GuiPackage.getInstance().getTreeModel().addComponent(node.getTestElement(), parent);                for (int i = 0; i < node.getChildCount(); i++) {            addNode(newNode, (JMeterTreeNode) node.getChildAt(i));        }    } catch (IllegalUserActionException iuae) {                        JMeterUtils.reportErrorToUser(iuae.getMessage());    }}
1
public boolean search(List<String> textTokens)
{    return textTokens.stream().filter(token -> !StringUtils.isEmpty(token)).map(token -> caseSensitive ? token : token.toLowerCase()).anyMatch(token -> token.contains(textToSearch));}
0
public boolean search(List<String> textTokens)
{    return textTokens.stream().filter(token -> !StringUtils.isEmpty(token)).map(token -> caseSensitive ? pattern.matcher(token) : pattern.matcher(token.toLowerCase())).anyMatch(Matcher::find);}
0
public void doAction(ActionEvent e)
{    String name = ((Component) e.getSource()).getName();    if (name != null) {        name = name.trim();    }    String action = e.getActionCommand();    if (action.equals(ActionNames.REMOTE_STOP)) {        GuiPackage.getInstance().getMainFrame().showStoppingMessage(name);        distributedRunner.stop(Arrays.asList(name));    } else if (action.equals(ActionNames.REMOTE_SHUT)) {        GuiPackage.getInstance().getMainFrame().showStoppingMessage(name);        distributedRunner.shutdown(Arrays.asList(name));    } else if (action.equals(ActionNames.REMOTE_START)) {        popupShouldSave(e);        HashTree testTree = getTestTree();        if (popupCheckExistingFileListener(testTree)) {            distributedRunner.init(Arrays.asList(name), testTree);            distributedRunner.start(Arrays.asList(name));        }    } else if (action.equals(ActionNames.REMOTE_START_ALL)) {        popupShouldSave(e);        HashTree testTree = getTestTree();        if (popupCheckExistingFileListener(testTree)) {            distributedRunner.init(getRemoteHosts(), testTree);            distributedRunner.start();        }    } else if (action.equals(ActionNames.REMOTE_STOP_ALL)) {        distributedRunner.stop(getRemoteHosts());    } else if (action.equals(ActionNames.REMOTE_SHUT_ALL)) {        distributedRunner.shutdown(getRemoteHosts());    } else if (action.equals(ActionNames.REMOTE_EXIT)) {        distributedRunner.exit(Arrays.asList(name));    } else if (action.equals(ActionNames.REMOTE_EXIT_ALL)) {        distributedRunner.exit(getRemoteHosts());    }}
0
private List<String> getRemoteHosts()
{    String remoteHostsString = JMeterUtils.getPropDefault(REMOTE_HOSTS, LOCAL_HOST);    StringTokenizer st = new StringTokenizer(remoteHostsString, REMOTE_HOSTS_SEPARATOR);    List<String> list = new LinkedList<>();    while (st.hasMoreElements()) {        list.add((String) st.nextElement());    }    return list;}
0
public Set<String> getActionNames()
{    return commands;}
0
private HashTree getTestTree()
{    GuiPackage gui = GuiPackage.getInstance();    HashTree testTree = gui.getTreeModel().getTestPlan();    HashTree tree = JMeter.convertSubTree(testTree, true);    tree.add(tree.getArray()[0], gui.getMainFrame());        tree.add(tree.getArray()[0], new RemoteThreadsListenerTestElement());    return tree;}
0
public Set<String> getActionNames()
{    return commands;}
0
public void doAction(ActionEvent e)
{    int isConfirm = SKIP_CONFIRM ? JOptionPane.YES_OPTION : JOptionPane.showConfirmDialog(GuiPackage.getInstance().getMainFrame(),     JMeterUtils.getResString("remove_confirm_msg"),     JMeterUtils.getResString("remove_confirm_title"), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);    if (isConfirm == JOptionPane.YES_OPTION) {                ActionRouter.getInstance().actionPerformed(new ActionEvent(e.getSource(), e.getID(), ActionNames.CHECK_REMOVE));        GuiPackage guiPackage = GuiPackage.getInstance();        JMeterTreeNode[] nodes = guiPackage.getTreeListener().getSelectedNodes();                TreePath newTreePath = guiPackage.getTreeListener().removedSelectedNode();        for (int i = nodes.length - 1; i >= 0; i--) {            removeNode(nodes[i]);        }        guiPackage.getTreeListener().getJTree().setSelectionPath(newTreePath);        guiPackage.updateCurrentGui();    }}
0
private static void removeNode(JMeterTreeNode node)
{    TestElement testElement = node.getTestElement();    if (testElement.canRemove()) {        GuiPackage.getInstance().getTreeModel().removeNodeFromParent(node);        GuiPackage.getInstance().removeNode(testElement);        testElement.removed();    } else {        String message = testElement.getClass().getName() + " is busy";        JOptionPane.showMessageDialog(null, message, "Cannot remove item", JOptionPane.ERROR_MESSAGE);    }}
0
public void doAction(ActionEvent e)
{    GuiPackage guiPackage = GuiPackage.getInstance();    try {        guiPackage.beginUndoTransaction();        guiPackage.getTreeModel().getNodesOfType(Searchable.class).stream().filter(node -> node.getUserObject() instanceof Searchable).map(JMeterTreeNode::getPathToThreadGroup).flatMap(Collection::stream).forEach(matchingNode -> {            matchingNode.setMarkedBySearch(false);            matchingNode.setChildrenNodesHaveMatched(false);        });    } finally {        guiPackage.endUndoTransaction();    }    GuiPackage.getInstance().getMainFrame().repaint();}
0
public Set<String> getActionNames()
{    return commands;}
0
public void doActionAfterCheck(ActionEvent e)
{    try {        GuiPackage guiPackage = GuiPackage.getInstance();        ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(), e.getID(), ActionNames.CHECK_DIRTY));        if (guiPackage.isDirty()) {            int chosenOption = JOptionPane.showConfirmDialog(guiPackage.getMainFrame(), JMeterUtils.getResString(            "cancel_exit_to_save"),             JMeterUtils.getResString("save?"), JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);            if (chosenOption == JOptionPane.NO_OPTION) {                restartApplication(null);            } else if (chosenOption == JOptionPane.YES_OPTION) {                ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(), e.getID(), ActionNames.SAVE));                if (!guiPackage.isDirty()) {                    restartApplication(null);                }            }        } else {            restartApplication(null);        }    } catch (Exception ex) {                JOptionPane.showMessageDialog(GuiPackage.getInstance().getMainFrame(),         JMeterUtils.getResString("restart_error") + ":\n" + ex.getLocalizedMessage(), JMeterUtils.getResString("error_title"),         JOptionPane.ERROR_MESSAGE);    }}
1
public static void restartApplication(Runnable runBeforeRestart)
{    String javaCommand = System.getProperty(SUN_JAVA_COMMAND);    if (StringUtils.isEmpty(javaCommand)) {        JOptionPane.showMessageDialog(GuiPackage.getInstance().getMainFrame(),         JMeterUtils.getResString("restart_error") + ":\n This command is only supported on Open JDK or Oracle JDK", JMeterUtils.getResString("error_title"),         JOptionPane.ERROR_MESSAGE);        return;    }        String java = System.getProperty("java.home") + "/bin/java";        List<String> vmArguments = ManagementFactory.getRuntimeMXBean().getInputArguments();    StringBuilder vmArgsOneLine = new StringBuilder();    for (String arg : vmArguments) {                if (!arg.contains("-agentlib")) {            vmArgsOneLine.append(arg);            vmArgsOneLine.append(" ");        }    }        final StringBuilder cmd = new StringBuilder(java + " " + vmArgsOneLine);        String[] mainCommand = javaCommand.split(" ");        if (mainCommand[0].endsWith(".jar")) {                cmd.append("-jar " + new File(mainCommand[0]).getPath());    } else {                cmd.append("-cp \"" + System.getProperty("java.class.path") + "\" " + mainCommand[0]);    }        for (int i = 1; i < mainCommand.length; i++) {        cmd.append(" ");        cmd.append(mainCommand[i]);    }            Runtime.getRuntime().addShutdownHook(new Thread() {        @Override        public void run() {            try {                Runtime.getRuntime().exec(cmd.toString());            } catch (IOException e) {                            }        }    });        if (runBeforeRestart != null) {        runBeforeRestart.run();    }            System.exit(0);}
1
public void run()
{    try {        Runtime.getRuntime().exec(cmd.toString());    } catch (IOException e) {            }}
1
public Set<String> getActionNames()
{    return commands;}
0
public JMenuItem[] getMenuItemsAtLocation(MENU_LOCATION location)
{    if (location == MENU_LOCATION.FILE) {        JMenuItem menuItemIC = new JMenuItem(JMeterUtils.getResString(ActionNames.RESTART), KeyEvent.VK_UNDEFINED);        menuItemIC.setName(ActionNames.RESTART);        menuItemIC.setActionCommand(ActionNames.RESTART);        menuItemIC.setAccelerator(null);        menuItemIC.addActionListener(ActionRouter.getInstance());        return new JMenuItem[] { menuItemIC };    }    return new JMenuItem[0];}
0
public JMenu[] getTopLevelMenus()
{    return new JMenu[0];}
0
public boolean localeChanged(MenuElement menu)
{    return false;}
0
public void localeChanged()
{}
0
public Set<String> getActionNames()
{    return commands;}
0
public void doActionAfterCheck(ActionEvent e)
{        String projectFile = GuiPackage.getInstance().getTestPlanFile();        if (projectFile == null) {        return;    }        ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(), e.getID(), ActionNames.CHECK_DIRTY));    GuiPackage guiPackage = GuiPackage.getInstance();    if (guiPackage.isDirty()) {                int response = JOptionPane.showConfirmDialog(GuiPackage.getInstance().getMainFrame(),         JMeterUtils.getResString("cancel_revert_project"),         JMeterUtils.getResString("revert_project?"), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);        if (response == JOptionPane.YES_OPTION) {                        Close.closeProject(e);                        Load.loadProjectFile(e, new File(projectFile), false);        }    }}
0
public Set<String> getActionNames()
{    return commands;}
0
public void doAction(ActionEvent e) throws IllegalUserActionException
{    HashTree subTree;        boolean fullSave = false;    if (!commands.contains(e.getActionCommand())) {        throw new IllegalUserActionException("Invalid user command:" + e.getActionCommand());    }    if (e.getActionCommand().equals(ActionNames.SAVE_AS)) {        JMeterTreeNode[] nodes = GuiPackage.getInstance().getTreeListener().getSelectedNodes();        if (nodes.length > 1) {            JMeterUtils.reportErrorToUser(            JMeterUtils.getResString("save_as_error"),             JMeterUtils.getResString("save_as"));            return;        }        subTree = GuiPackage.getInstance().getCurrentSubTree();    } else if (e.getActionCommand().equals(ActionNames.SAVE_AS_TEST_FRAGMENT)) {        JMeterTreeNode[] nodes = GuiPackage.getInstance().getTreeListener().getSelectedNodes();        if (checkAcceptableForTestFragment(nodes)) {                        subTree = createTestFragmentNode(nodes);        } else {            JMeterUtils.reportErrorToUser(            JMeterUtils.getResString("save_as_test_fragment_error"),             JMeterUtils.getResString("save_as_test_fragment"));            return;        }    } else {        fullSave = true;        subTree = GuiPackage.getInstance().getTreeModel().getTestPlan();    }    String updateFile = GuiPackage.getInstance().getTestPlanFile();    if (    !ActionNames.SAVE.equals(e.getActionCommand()) ||     updateFile == null) {        boolean isNewFile = updateFile == null;        updateFile = computeFileName();        if (updateFile == null) {            return;        }        if (e.getActionCommand().equals(ActionNames.SAVE_ALL_AS) || isNewFile) {            GuiPackage.getInstance().setTestPlanFile(updateFile);        }    }    ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(), e.getID(), ActionNames.CHECK_DIRTY));    backupAndSave(e, subTree, fullSave, updateFile);    GuiPackage.getInstance().updateCurrentGui();}
0
private HashTree createTestFragmentNode(JMeterTreeNode[] nodes)
{    TestElement element = GuiPackage.getInstance().createTestElement(TestFragmentControllerGui.class.getName());    HashTree hashTree = new ListedHashTree();    HashTree tfTree = hashTree.add(new JMeterTreeNode(element, null));    for (JMeterTreeNode node : nodes) {                TreeCloner cloner = new TreeCloner(false);        GuiPackage.getInstance().getTreeModel().getCurrentSubTree(node).traverse(cloner);                tfTree.add(cloner.getClonedTree());    }    return hashTree;}
0
private String computeFileName()
{    JFileChooser chooser = FileDialoger.promptToSaveFile(GuiPackage.getInstance().getTreeListener().getCurrentNode().getName() + JMX_FILE_EXTENSION);    if (chooser == null) {        return null;    }    String updateFile = chooser.getSelectedFile().getAbsolutePath();        if (FilenameUtils.getExtension(updateFile).isEmpty()) {        updateFile = updateFile + JMX_FILE_EXTENSION;    }        File f = new File(updateFile);    if (f.exists()) {        int response = JOptionPane.showConfirmDialog(GuiPackage.getInstance().getMainFrame(),         JMeterUtils.getResString("save_overwrite_existing_file"),         JMeterUtils.getResString("save?"), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);        if (response == JOptionPane.CLOSED_OPTION || response == JOptionPane.NO_OPTION) {                        return null;        }    }    return updateFile;}
0
 void backupAndSave(ActionEvent e, HashTree subTree, boolean fullSave, String newFile) throws IllegalUserActionException
{        List<File> expiredBackupFiles = EMPTY_FILE_LIST;    if (GuiPackage.getInstance().isDirty()) {        File fileToBackup = new File(newFile);                try {            expiredBackupFiles = createBackupFile(fileToBackup);        } catch (Exception ex) {                                }    }    try {        convertSubTree(subTree);    } catch (Exception err) {        if (log.isWarnEnabled()) {                    }    }    try (FileOutputStream ostream = new FileOutputStream(newFile)) {        SaveService.saveTree(subTree, ostream);        if (fullSave) {                        FileServer.getFileServer().setScriptName(new File(newFile).getName());                        subTree = GuiPackage.getInstance().getTreeModel().getTestPlan();            ActionRouter.getInstance().doActionNow(new ActionEvent(subTree, e.getID(), ActionNames.SUB_TREE_SAVED));        }                        expiredBackupFiles.forEach(FileUtils::deleteQuietly);    } catch (RuntimeException ex) {        throw ex;    } catch (Exception ex) {                throw new IllegalUserActionException("Couldn't save test plan to file: " + newFile, ex);    }}
1
private List<File> createBackupFile(File fileToBackup)
{    if (!BACKUP_ENABLED || !fileToBackup.exists()) {        return EMPTY_FILE_LIST;    }        char versionSeparator = '-';    String baseName = fileToBackup.getName();        baseName = baseName.endsWith(JMX_FILE_EXTENSION) ? baseName.substring(0, baseName.length() - JMX_FILE_EXTENSION.length()) : baseName;        File backupDir = new File(BACKUP_DIRECTORY);    backupDir.mkdirs();    if (!backupDir.isDirectory()) {                return EMPTY_FILE_LIST;    }                String backupPatternRegex = Pattern.quote(baseName + versionSeparator) +     "([\\d]{6})" + Pattern.quote(JMX_FILE_EXTENSION);    Pattern backupPattern = Pattern.compile(backupPatternRegex);        List<File> backupFiles = new ArrayList<>(FileUtils.listFiles(backupDir, new PrivatePatternFileFilter(backupPattern), null));        backupFiles.sort(LastModifiedFileComparator.LASTMODIFIED_COMPARATOR);        int lastVersionNumber = getHighestVersionNumber(backupPattern, backupFiles);            String backupName = baseName + versionSeparator + BACKUP_VERSION_FORMATER.format(lastVersionNumber + 1L) + JMX_FILE_EXTENSION;    File backupFile = new File(backupDir, backupName);        try {        FileUtils.copyFile(fileToBackup, backupFile);    } catch (IOException e) {                        return EMPTY_FILE_LIST;    }        backupFiles.add(backupFile);    return backupFilesToDelete(backupFiles);}
1
private int getHighestVersionNumber(Pattern backupPattern, List<File> backupFiles)
{    return backupFiles.stream().map(backupFile -> backupPattern.matcher(backupFile.getName())).filter(matcher -> matcher.find() && matcher.groupCount() > 0).mapToInt(matcher -> Integer.parseInt(matcher.group(1))).max().orElse(0);}
0
private List<File> backupFilesToDelete(List<File> backupFiles)
{    List<File> filesToDelete = new ArrayList<>();    if (BACKUP_MAX_HOURS > 0) {        filesToDelete.addAll(expiredBackupFiles(backupFiles));    }        if (BACKUP_MAX_COUNT > 0 && backupFiles.size() > BACKUP_MAX_COUNT) {                filesToDelete.addAll(backupFiles.subList(0, backupFiles.size() - BACKUP_MAX_COUNT));    }    return     filesToDelete.stream().distinct().collect(Collectors.toList());}
0
private List<File> expiredBackupFiles(List<File> backupFiles)
{    if (BACKUP_MAX_HOURS > 0) {        final long expiryMillis = System.currentTimeMillis() - (1L * BACKUP_MAX_HOURS * MS_PER_HOUR);        return backupFiles.stream().filter(file -> file.lastModified() < expiryMillis).collect(Collectors.toList());    } else {        return EMPTY_FILE_LIST;    }}
0
private static boolean checkAcceptableForTestFragment(JMeterTreeNode[] nodes)
{    return Arrays.stream(nodes).map(DefaultMutableTreeNode::getUserObject).noneMatch(o -> o instanceof ThreadGroup || o instanceof TestPlan);}
0
 void convertSubTree(HashTree tree)
{    for (Object o : new LinkedList<>(tree.list())) {        JMeterTreeNode item = (JMeterTreeNode) o;        convertSubTree(tree.getTree(item));                TestElement testElement = item.getTestElement();        tree.replaceKey(item, testElement);    }}
0
public boolean accept(File dir, String fileName)
{    return pattern.matcher(fileName).matches();}
0
public boolean accept(File file)
{    return accept(file.getParentFile(), file.getName());}
0
public Set<String> getActionNames()
{    return commands;}
0
public void doAction(ActionEvent e)
{    if (ActionNames.SAVE_BEFORE_RUN.equals(e.getActionCommand())) {                GuiPackage guiInstance = GuiPackage.getInstance();        boolean togglePreferenceValue = !guiInstance.shouldSaveBeforeRunByPreference();        guiInstance.setSaveBeforeRunByPreference(togglePreferenceValue);                guiInstance.getMenuItemSaveBeforeRunPanel().getModel().setSelected(togglePreferenceValue);    }}
0
public Set<String> getActionNames()
{    return commands;}
0
public void doAction(ActionEvent e) throws IllegalUserActionException
{    if (!commands.contains(e.getActionCommand())) {        throw new IllegalUserActionException("Invalid user command:" + e.getActionCommand());    }    if (e.getActionCommand().equals(ActionNames.SAVE_GRAPHICS)) {        JMeterGUIComponent component = GuiPackage.getInstance().getCurrentGui();                if (component instanceof Printable) {            JComponent comp = ((Printable) component).getPrintableComponent();            saveImage(comp);        }    }    if (e.getActionCommand().equals(ActionNames.SAVE_GRAPHICS_ALL)) {        JMeterGUIComponent component = GuiPackage.getInstance().getCurrentGui();        JComponent comp = ((JComponent) component).getRootPane();        saveImage(comp);    }}
0
private void saveImage(JComponent comp)
{    String filename;    JFileChooser chooser = FileDialoger.promptToSaveFile(GuiPackage.getInstance().getTreeListener().getCurrentNode().getName(), extensions);    if (chooser == null) {        return;    }            filename = chooser.getSelectedFile().getAbsolutePath();    if (filename != null) {        File f = new File(filename);        if (f.exists()) {            int response = JOptionPane.showConfirmDialog(GuiPackage.getInstance().getMainFrame(),             JMeterUtils.getResString("save_overwrite_existing_file"),             JMeterUtils.getResString("save?"), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);            if (response == JOptionPane.CLOSED_OPTION || response == JOptionPane.NO_OPTION) {                                return;            }        }        SaveGraphicsService save = new SaveGraphicsService();        String ext = filename.substring(filename.length() - 4);        String name = filename.substring(0, filename.length() - 4);        if (ext.equals(SaveGraphicsService.PNG_EXTENSION)) {            save.saveJComponent(name, SaveGraphicsService.PNG, comp);        } else if (ext.equals(SaveGraphicsService.TIFF_EXTENSION)) {            save.saveJComponent(name, SaveGraphicsService.TIFF, comp);        } else {            save.saveJComponent(filename, SaveGraphicsService.PNG, comp);        }    }}
0
public void generate(HashTree testPlan, File testPlanFile, OutputStream outputStream) throws Exception
{    TransformerFactory factory = TransformerFactory.newInstance("net.sf.saxon.BasicTransformerFactory", Thread.currentThread().getContextClassLoader());    Source xslt;    if (!StringUtils.isEmpty(DEFAULT_XSL_FILE)) {                xslt = new StreamSource(new File(DEFAULT_XSL_FILE));    } else {        xslt = new StreamSource(SchematicView.class.getResourceAsStream("/org/apache/jmeter/gui/action/schematic.xsl"));    }    Transformer transformer = factory.newTransformer(xslt);    Source text = new StreamSource(testPlanFile);    transformer.transform(text, new StreamResult(outputStream));}
1
public void doAction(ActionEvent e)
{    try {        String updateFile = GuiPackage.getInstance().getTestPlanFile();        if (updateFile != null) {            ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(), e.getID(), ActionNames.CHECK_DIRTY));            JFileChooser jFileChooser = new JFileChooser();            jFileChooser.setDialogTitle(JMeterUtils.getResString("schematic_view_outputfile"));            jFileChooser.setCurrentDirectory(new File(updateFile).getParentFile());            jFileChooser.setSelectedFile(new File(updateFile + ".html"));            int retVal = jFileChooser.showSaveDialog(GuiPackage.getInstance().getMainFrame());            if (retVal == JFileChooser.APPROVE_OPTION) {                File outputFile = jFileChooser.getSelectedFile();                if (outputFile.exists()) {                    int response = JOptionPane.showConfirmDialog(GuiPackage.getInstance().getMainFrame(),                     JMeterUtils.getResString("save_overwrite_existing_file"),                     JMeterUtils.getResString("save?"), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);                    if (response == JOptionPane.CLOSED_OPTION || response == JOptionPane.NO_OPTION) {                                                return;                    }                }                try (FileOutputStream fileOutputStream = new FileOutputStream(outputFile);                    BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(fileOutputStream)) {                    new XslSchematicViewGenerator().generate(GuiPackage.getInstance().getCurrentSubTree(), new File(updateFile), bufferedOutputStream);                }                JMeterUtils.reportInfoToUser(GENERATION_SUCCESS_MSG.format(new Object[] { outputFile.getAbsolutePath() }), JMeterUtils.getResString("schematic_view_info"));            }        } else {            JMeterUtils.reportInfoToUser(JMeterUtils.getResString("schematic_view_no_plan"), JMeterUtils.getResString("schematic_view_info"));        }    } catch (Exception ex) {        JMeterUtils.reportErrorToUser(JMeterUtils.getResString("schematic_view_errors"), ex);    }}
0
public Set<String> getActionNames()
{    return commands;}
0
public JMenuItem[] getMenuItemsAtLocation(MENU_LOCATION location)
{    if (location == MENU_LOCATION.TOOLS) {        JMenuItem menuItem = new JMenuItem(JMeterUtils.getResString("schematic_view_menu"), KeyEvent.VK_UNDEFINED);        menuItem.setName(ActionNames.SCHEMATIC_VIEW);        menuItem.setActionCommand(ActionNames.SCHEMATIC_VIEW);        menuItem.setAccelerator(null);        menuItem.addActionListener(ActionRouter.getInstance());        return new JMenuItem[] { menuItem };    }    return new JMenuItem[0];}
0
public JMenu[] getTopLevelMenus()
{    return new JMenu[0];}
0
public boolean localeChanged(MenuElement menu)
{    return false;}
0
public void localeChanged()
{}
0
private SearchTreeDialog createSearchDialog(ActionEvent event)
{    JFrame parent = getParentFrame(event);    return new SearchTreeDialog(parent);}
0
public void doAction(ActionEvent e)
{        if (dialog == null) {        dialog = createSearchDialog(e);    }    dialog.setVisible(true);}
0
public Set<String> getActionNames()
{    return commands;}
0
protected JRootPane createRootPane()
{    JRootPane rootPane = new JRootPane();        Action escapeAction = new AbstractAction("ESCAPE") {        private static final long serialVersionUID = -6543764044868772971L;        @Override        public void actionPerformed(ActionEvent actionEvent) {            setVisible(false);        }    };        Action enterAction = new AbstractAction("ENTER") {        private static final long serialVersionUID = -3661361497864527363L;        @Override        public void actionPerformed(ActionEvent actionEvent) {            doSearch(actionEvent);        }    };    ActionMap actionMap = rootPane.getActionMap();    actionMap.put(escapeAction.getValue(Action.NAME), escapeAction);    actionMap.put(enterAction.getValue(Action.NAME), enterAction);    InputMap inputMap = rootPane.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);    inputMap.put(KeyStrokes.ESC, escapeAction.getValue(Action.NAME));    inputMap.put(KeyStrokes.ENTER, enterAction.getValue(Action.NAME));    return rootPane;}
0
public void actionPerformed(ActionEvent actionEvent)
{    setVisible(false);}
0
public void actionPerformed(ActionEvent actionEvent)
{    doSearch(actionEvent);}
0
private void init()
{        this.getContentPane().setLayout(new BorderLayout(10, 10));        searchTF = new JLabeledTextField(JMeterUtils.getResString("search_text_field"), 20);    searchTF.setAlignmentY(TOP_ALIGNMENT);    if (lastSearchConditions != null) {        searchTF.setText(lastSearchConditions.getLeft());        isCaseSensitiveCB.setSelected(lastSearchConditions.getMiddle());        isRegexpCB.setSelected(lastSearchConditions.getRight());    }        replaceTF = new JLabeledTextField(JMeterUtils.getResString("search_text_replace"), 20);    replaceTF.setAlignmentX(TOP_ALIGNMENT);    statusLabel = new JLabel(" ");    statusLabel.setPreferredSize(new Dimension(100, 20));    statusLabel.setMinimumSize(new Dimension(100, 20));        isRegexpCB = new JCheckBox(JMeterUtils.getResString("search_text_chkbox_regexp"), false);        isCaseSensitiveCB = new JCheckBox(JMeterUtils.getResString("search_text_chkbox_case"), true);    isRegexpCB.setFont(FONT_SMALL);    isCaseSensitiveCB.setFont(FONT_SMALL);    JPanel searchCriterionPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));        searchCriterionPanel.setBorder(BorderFactory.createTitledBorder(JMeterUtils.getResString("search_matching")));    searchCriterionPanel.add(isCaseSensitiveCB);    searchCriterionPanel.add(isRegexpCB);    JPanel searchPanel = new JPanel();    searchPanel.setLayout(new GridLayout(4, 1));    searchPanel.setBorder(BorderFactory.createEmptyBorder(7, 3, 3, 3));    searchPanel.add(searchTF);    searchPanel.add(replaceTF);    searchPanel.add(statusLabel);    searchPanel.add(searchCriterionPanel);    JPanel buttonsPanel = new JPanel(new GridLayout(9, 1));        searchButton = createButton("search_search_all");    searchButton.addActionListener(this);        nextButton = createButton("search_next");    nextButton.addActionListener(this);        previousButton = createButton("search_previous");    previousButton.addActionListener(this);        searchAndExpandButton = createButton("search_search_all_expand");    searchAndExpandButton.addActionListener(this);        replaceButton = createButton("search_replace");    replaceButton.addActionListener(this);        replaceAllButton = createButton("search_replace_all");    replaceAllButton.addActionListener(this);        replaceAndFindButton = createButton("search_replace_and_find");    replaceAndFindButton.addActionListener(this);        cancelButton = createButton("cancel");    cancelButton.addActionListener(this);    buttonsPanel.add(nextButton);    buttonsPanel.add(previousButton);    buttonsPanel.add(searchButton);    buttonsPanel.add(searchAndExpandButton);    buttonsPanel.add(Box.createVerticalStrut(30));    buttonsPanel.add(replaceButton);    buttonsPanel.add(replaceAllButton);    buttonsPanel.add(replaceAndFindButton);    buttonsPanel.add(cancelButton);    JPanel searchAndReplacePanel = new JPanel();    searchAndReplacePanel.setLayout(new BorderLayout());    searchAndReplacePanel.add(searchPanel, BorderLayout.CENTER);    searchAndReplacePanel.add(buttonsPanel, BorderLayout.EAST);    this.getContentPane().add(searchAndReplacePanel);    searchTF.requestFocusInWindow();    this.pack();    ComponentUtil.centerComponentInWindow(this);}
0
private JButton createButton(String messageKey)
{    return new JButton(JMeterUtils.getResString(messageKey));}
0
public void actionPerformed(ActionEvent e)
{    Object source = e.getSource();    statusLabel.setText("");    if (source == cancelButton) {        searchTF.requestFocusInWindow();        this.setVisible(false);    } else if (source == searchButton || source == searchAndExpandButton) {        doSearch(e);    } else if (source == nextButton || source == previousButton) {        doNavigateToSearchResult(source == nextButton);    } else if (source == replaceAllButton) {        doReplaceAll(e);    } else if (!lastSearchResult.isEmpty() && source == replaceButton) {        doReplace();    } else if (source == replaceAndFindButton) {        if (!lastSearchResult.isEmpty()) {            doReplace();        }        doNavigateToSearchResult(true);    }}
0
private void doReplace()
{    GuiPackage.getInstance().updateCurrentNode();    int nbReplacements = 0;    if (currentSearchIndex >= 0) {        JMeterTreeNode currentNode = lastSearchResult.get(currentSearchIndex);        if (currentNode != null) {            String wordToSearch = searchTF.getText();            String wordToReplace = replaceTF.getText();            String regex = isRegexpCB.isSelected() ? wordToSearch : Pattern.quote(wordToSearch);            boolean caseSensitiveReplacement = isCaseSensitiveCB.isSelected();            Pair<Integer, JMeterTreeNode> pair = doReplacementInCurrentNode(currentNode, regex, wordToReplace, caseSensitiveReplacement);            if (pair != null) {                nbReplacements = pair.getLeft();                GuiPackage.getInstance().updateCurrentGui();                GuiPackage.getInstance().getMainFrame().repaint();            }        }    }    statusLabel.setText(MessageFormat.format("Replaced {0} occurrences", nbReplacements));}
0
private JMeterTreeNode doNavigateToSearchResult(boolean isNext)
{    boolean doSearchAgain = lastSearchConditions == null || !Triple.of(searchTF.getText(), isCaseSensitiveCB.isSelected(), isRegexpCB.isSelected()).equals(lastSearchConditions);    if (doSearchAgain) {        String wordToSearch = searchTF.getText();        if (StringUtils.isEmpty(wordToSearch)) {            this.lastSearchConditions = null;            return null;        } else {            this.lastSearchConditions = Triple.of(wordToSearch, isCaseSensitiveCB.isSelected(), isRegexpCB.isSelected());        }        Searcher searcher = createSearcher(wordToSearch);        searchInTree(GuiPackage.getInstance(), searcher, wordToSearch);    }    if (!lastSearchResult.isEmpty()) {        if (isNext) {            currentSearchIndex = ++currentSearchIndex % lastSearchResult.size();        } else {            currentSearchIndex = currentSearchIndex > 0 ? --currentSearchIndex : lastSearchResult.size() - 1;        }        JMeterTreeNode selectedNode = lastSearchResult.get(currentSearchIndex);        TreePath selection = new TreePath(selectedNode.getPath());        GuiPackage.getInstance().getMainFrame().getTree().setSelectionPath(selection);        GuiPackage.getInstance().getMainFrame().getTree().scrollPathToVisible(selection);        return selectedNode;    }    return null;}
0
private void doSearch(ActionEvent e)
{    boolean expand = e.getSource() == searchAndExpandButton;    String wordToSearch = searchTF.getText();    if (StringUtils.isEmpty(wordToSearch)) {        this.lastSearchConditions = null;        return;    } else {        this.lastSearchConditions = Triple.of(wordToSearch, isCaseSensitiveCB.isSelected(), isRegexpCB.isSelected());    }        ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(), e.getID(), ActionNames.SEARCH_RESET));        Searcher searcher = createSearcher(wordToSearch);    GuiPackage guiPackage = GuiPackage.getInstance();    guiPackage.beginUndoTransaction();    int numberOfMatches = 0;    try {        Pair<Integer, Set<JMeterTreeNode>> result = searchInTree(guiPackage, searcher, wordToSearch);        numberOfMatches = result.getLeft();        markConcernedNodes(expand, result.getRight());    } finally {        guiPackage.endUndoTransaction();    }    GuiPackage.getInstance().getMainFrame().repaint();    searchTF.requestFocusInWindow();    statusLabel.setText(MessageFormat.format(JMeterUtils.getResString("search_tree_matches"), numberOfMatches));}
0
private Searcher createSearcher(String wordToSearch)
{    if (isRegexpCB.isSelected()) {        return new RegexpSearcher(isCaseSensitiveCB.isSelected(), wordToSearch);    } else {        return new RawTextSearcher(isCaseSensitiveCB.isSelected(), wordToSearch);    }}
0
private Pair<Integer, Set<JMeterTreeNode>> searchInTree(GuiPackage guiPackage, Searcher searcher, String wordToSearch)
{    int numberOfMatches = 0;    JMeterTreeModel jMeterTreeModel = guiPackage.getTreeModel();    Set<JMeterTreeNode> nodes = new LinkedHashSet<>();    for (JMeterTreeNode jMeterTreeNode : jMeterTreeModel.getNodesOfType(Searchable.class)) {        try {            Searchable searchable = (Searchable) jMeterTreeNode.getUserObject();            List<String> searchableTokens = searchable.getSearchableTokens();            boolean result = searcher.search(searchableTokens);            if (result) {                numberOfMatches++;                nodes.add(jMeterTreeNode);            }        } catch (Exception ex) {                    }    }    this.currentSearchIndex = -1;    this.lastSearchResult.clear();    this.lastSearchResult.addAll(nodes);    return Pair.of(numberOfMatches, nodes);}
1
private void markConcernedNodes(boolean expand, Set<JMeterTreeNode> nodes)
{    GuiPackage guiInstance = GuiPackage.getInstance();    JTree jTree = guiInstance.getMainFrame().getTree();    for (JMeterTreeNode jMeterTreeNode : nodes) {        jMeterTreeNode.setMarkedBySearch(true);        if (expand) {            if (jMeterTreeNode.isLeaf()) {                jTree.expandPath(new TreePath(((JMeterTreeNode) jMeterTreeNode.getParent()).getPath()));            } else {                jTree.expandPath(new TreePath(jMeterTreeNode.getPath()));            }        }    }}
0
private void doReplaceAll(ActionEvent e)
{    boolean expand = e.getSource() == searchAndExpandButton;    String wordToSearch = searchTF.getText();    String wordToReplace = replaceTF.getText();    if (StringUtils.isEmpty(wordToReplace)) {        return;    }        GuiPackage.getInstance().updateCurrentNode();        ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(), e.getID(), ActionNames.SEARCH_RESET));    Searcher searcher = createSearcher(wordToSearch);    String regex = isRegexpCB.isSelected() ? wordToSearch : Pattern.quote(wordToSearch);    GuiPackage guiPackage = GuiPackage.getInstance();    boolean caseSensitiveReplacement = isCaseSensitiveCB.isSelected();    int totalReplaced = 0;    Pair<Integer, Set<JMeterTreeNode>> result = searchInTree(guiPackage, searcher, wordToSearch);    Set<JMeterTreeNode> matchingNodes = result.getRight();    Set<JMeterTreeNode> replacedNodes = new HashSet<>();    for (JMeterTreeNode jMeterTreeNode : matchingNodes) {        Pair<Integer, JMeterTreeNode> pair = doReplacementInCurrentNode(jMeterTreeNode, regex, wordToReplace, caseSensitiveReplacement);        if (pair != null) {            totalReplaced += pair.getLeft();            replacedNodes.add(pair.getRight());        }    }    statusLabel.setText(MessageFormat.format("Replaced {0} occurrences", totalReplaced));    markConcernedNodes(expand, replacedNodes);        if (totalReplaced > 0) {        GuiPackage.getInstance().refreshCurrentGui();    }    GuiPackage.getInstance().getMainFrame().repaint();    searchTF.requestFocusInWindow();}
0
private Pair<Integer, JMeterTreeNode> doReplacementInCurrentNode(JMeterTreeNode jMeterTreeNode, String regex, String replaceBy, boolean caseSensitiveReplacement)
{    try {        if (jMeterTreeNode.getUserObject() instanceof Replaceable) {            Replaceable replaceable = (Replaceable) jMeterTreeNode.getUserObject();            int numberOfReplacements = replaceable.replace(regex, replaceBy, caseSensitiveReplacement);            if (numberOfReplacements > 0) {                if (logger.isInfoEnabled()) {                                    }                return Pair.of(numberOfReplacements, jMeterTreeNode);            }        }    } catch (Exception ex) {            }    return null;}
1
public void setVisible(boolean b)
{    super.setVisible(b);    searchTF.requestFocusInWindow();}
0
protected JRootPane createRootPane()
{    JRootPane rootPane = new JRootPane();        Action escapeAction = new     AbstractAction(    "ESCAPE") {        /**         */        private static final long serialVersionUID = -6543764044868772971L;        @Override        public void actionPerformed(ActionEvent actionEvent) {            setVisible(false);        }    };        Action enterAction = new     AbstractAction(    "ENTER") {        private static final long serialVersionUID = -3661361497864527363L;        @Override        public void actionPerformed(final ActionEvent actionEvent) {            checkDirtyAndLoad(actionEvent);        }    };    ActionMap actionMap = rootPane.getActionMap();    actionMap.put(escapeAction.getValue(Action.NAME), escapeAction);    actionMap.put(enterAction.getValue(Action.NAME), enterAction);    InputMap inputMap = rootPane.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);    inputMap.put(KeyStrokes.ESC, escapeAction.getValue(Action.NAME));    inputMap.put(KeyStrokes.ENTER, enterAction.getValue(Action.NAME));    return rootPane;}
0
public void actionPerformed(ActionEvent actionEvent)
{    setVisible(false);}
0
public void actionPerformed(final ActionEvent actionEvent)
{    checkDirtyAndLoad(actionEvent);}
0
private void checkDirtyAndLoad(final ActionEvent actionEvent) throws HeadlessException
{    final String selectedTemplate = templateList.getText();    final Template template = TemplateManager.getInstance().getTemplateByName(selectedTemplate);    if (template == null) {        return;    }        templateList.setValues(TemplateManager.getInstance().getTemplateNames());    final boolean isTestPlan = template.isTestPlan();        if (isTestPlan && !checkDirty(actionEvent)) {        return;    }    ActionRouter.getInstance().doActionNow(new ActionEvent(actionEvent.getSource(), actionEvent.getID(), ActionNames.STOP_THREAD));    final File parent = template.getParent();    File fileToCopy = parent != null ? new File(parent, template.getFileName()) : new File(JMeterUtils.getJMeterHome(), template.getFileName());    replaceTemplateParametersAndLoad(actionEvent, template, isTestPlan, fileToCopy);}
0
 void replaceTemplateParametersAndLoad(final ActionEvent actionEvent, final Template template, final boolean isTestPlan, File templateFile)
{    File temporaryGeneratedFile = null;    try {                if (template.getParameters() != null && !template.getParameters().isEmpty()) {            File jmxFile = new File(templateFile.getAbsolutePath());            Map<String, String> userParameters = getUserParameters();            Configuration templateCfg = TemplateUtil.getTemplateConfig();            try {                temporaryGeneratedFile = File.createTempFile(template.getName(), ".output");                templateFile = temporaryGeneratedFile;                TemplateUtil.processTemplate(jmxFile, temporaryGeneratedFile, templateCfg, userParameters);            } catch (IOException | TemplateException ex) {                                return;            }        }        Load.loadProjectFile(actionEvent, templateFile, !isTestPlan, false);        this.dispose();    } finally {        if (temporaryGeneratedFile != null && !temporaryGeneratedFile.delete()) {                    }    }}
1
private boolean checkDirty(final ActionEvent actionEvent)
{    ActionRouter.getInstance().doActionNow(new ActionEvent(actionEvent.getSource(), actionEvent.getID(), ActionNames.CHECK_DIRTY));    GuiPackage guiPackage = GuiPackage.getInstance();    if (guiPackage.isDirty()) {                int response = JOptionPane.showConfirmDialog(GuiPackage.getInstance().getMainFrame(),         JMeterUtils.getResString("cancel_new_from_template"),         JMeterUtils.getResString("template_load?"), JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);        if (response == JOptionPane.YES_OPTION) {            ActionRouter.getInstance().doActionNow(new ActionEvent(actionEvent.getSource(), actionEvent.getID(), ActionNames.SAVE));            return true;        }        if (response == JOptionPane.CLOSED_OPTION || response == JOptionPane.CANCEL_OPTION) {                        return false;        }    }    return true;}
0
private Map<String, String> getUserParameters()
{    Map<String, String> userParameters = new LinkedHashMap<>();    for (Entry<String, JLabeledTextField> entry : parametersTextFields.entrySet()) {        userParameters.put(entry.getKey(), entry.getValue().getText());    }    return userParameters;}
0
private void init()
{        templateList.setValues(TemplateManager.getInstance().getTemplateNames());    templateList.addChangeListener(this);    reloadTemplateButton.addActionListener(this);    reloadTemplateButton.setFont(FONT_SMALL);        helpDoc.setContentType("text/html");    helpDoc.setEditable(false);    helpDoc.addHyperlinkListener(this);    applyTemplateButton.addActionListener(this);    cancelButton.addActionListener(this);    previous.addActionListener(this);    validateButton.addActionListener(this);            this.addWindowListener(new WindowAdapter() {        @Override        public void windowClosing(WindowEvent evt) {            resetJDialog(false);            dispose();        }    });    this.setContentPane(templateSelectionPanel());    this.pack();    this.setMinimumSize(new Dimension(MINIMAL_BOX_WIDTH, MINIMAL_BOX_HEIGHT));        ComponentUtil.centerComponentInWindow(this, 50);    populateTemplatePage();}
0
public void windowClosing(WindowEvent evt)
{    resetJDialog(false);    dispose();}
0
private JPanel templateSelectionPanel()
{    JPanel panel = new JPanel(new BorderLayout());    JScrollPane scroller = new JScrollPane();    scroller.setViewportView(helpDoc);    JPanel templateBar = new JPanel(new BorderLayout());    templateBar.add(templateList, BorderLayout.CENTER);    JPanel reloadBtnBar = new JPanel();    reloadBtnBar.add(reloadTemplateButton);    templateBar.add(reloadBtnBar, BorderLayout.EAST);        actionBtnBar.add(applyTemplateButton);    actionBtnBar.add(cancelButton);    panel.add(templateBar, BorderLayout.NORTH);    panel.add(scroller, BorderLayout.CENTER);    panel.add(actionBtnBar, BorderLayout.SOUTH);    return panel;}
0
public void actionPerformed(ActionEvent e)
{    final Object source = e.getSource();    if (source == cancelButton) {        resetJDialog(false);        this.dispose();    } else if (source == applyTemplateButton) {        String selectedTemplate = templateList.getText();        Template template = TemplateManager.getInstance().getTemplateByName(selectedTemplate);        if (hasParameters(template)) {            this.setContentPane(configureParametersPanel(template.getParameters()));            this.revalidate();        } else {            checkDirtyAndLoad(e);        }    } else if (source == reloadTemplateButton) {        resetJDialog(true);    } else if (source == previous) {        resetJDialog(false);    } else if (source == validateButton) {        checkDirtyAndLoad(e);        resetJDialog(false);    }}
0
private boolean hasParameters(Template template)
{    return !(template.getParameters() == null || template.getParameters().isEmpty());}
0
public void stateChanged(ChangeEvent event)
{    populateTemplatePage();}
0
private void resetJDialog(boolean reloadTemplates)
{    if (reloadTemplates) {        TemplateManager.getInstance().reset();    }        templateList.setValues(TemplateManager.getInstance().getTemplateNames());    this.setContentPane(templateSelectionPanel());    this.revalidate();}
0
private void populateTemplatePage()
{    String selectedTemplate = templateList.getText();    Template template = TemplateManager.getInstance().getTemplateByName(selectedTemplate);    helpDoc.setText(template.getDescription());    applyTemplateButton.setText(template.isTestPlan() ? JMeterUtils.getResString("template_create_from") : JMeterUtils.getResString("template_merge_from"));    validateButton.setText(template.isTestPlan() ? JMeterUtils.getResString("template_create_from") : JMeterUtils.getResString("template_merge_from"));}
0
private JPanel configureParametersPanel(Map<String, String> parameters)
{    JPanel panel = new JPanel(new BorderLayout());    JPanel northPanel = new JPanel(new FlowLayout());    JLabel label = new JLabel(JMeterUtils.getResString("template_fill_parameters"));    label.setPreferredSize(new Dimension(150, 35));    northPanel.add(label);    panel.add(northPanel, BorderLayout.NORTH);    parametersTextFields.clear();    GridBagConstraints gbc = new GridBagConstraints();    initConstraints(gbc);    int parameterCount = 0;    JPanel gridbagpanel = new JPanel(new GridBagLayout());    for (Entry<String, String> entry : parameters.entrySet()) {        String key = entry.getKey();        String value = entry.getValue();        JLabeledTextField paramLabel = new JLabeledTextField(key + " : ");        paramLabel.setText(value);        parametersTextFields.put(key, paramLabel);        gbc.gridy = parameterCount++;        List<JComponent> listedParamLabel = paramLabel.getComponentList();        gridbagpanel.add(listedParamLabel.get(0), gbc.clone());        gbc.gridx = 1;        gridbagpanel.add(listedParamLabel.get(1), gbc.clone());        gbc.gridx = 0;    }    JPanel actionBtnBarParameterPanel = new JPanel(new FlowLayout());    actionBtnBarParameterPanel.add(validateButton);    actionBtnBarParameterPanel.add(cancelButton);    actionBtnBarParameterPanel.add(previous);    JScrollPane scroller = new JScrollPane(gridbagpanel);    panel.add(scroller, BorderLayout.CENTER);    panel.add(actionBtnBarParameterPanel, BorderLayout.SOUTH);    return panel;}
0
private void initConstraints(GridBagConstraints gbc)
{    gbc.anchor = GridBagConstraints.WEST;    gbc.insets = new Insets(0, 0, 5, 0);    gbc.fill = GridBagConstraints.NONE;    gbc.gridheight = 1;    gbc.gridwidth = 1;    gbc.gridx = 0;    gbc.gridy = 0;    gbc.weightx = 0;    gbc.weighty = 0;}
0
public void hyperlinkUpdate(HyperlinkEvent e)
{    if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED && java.awt.Desktop.isDesktopSupported()) {        try {            java.awt.Desktop.getDesktop().browse(e.getURL().toURI());        } catch (Exception ex) {                    }    }}
1
public void doAction(ActionEvent e)
{    if (e.getActionCommand().equals(ActionNames.SSL_MANAGER)) {        this.sslManager();    }}
0
public Set<String> getActionNames()
{    return SSLManagerCommand.commandSet;}
0
private void sslManager()
{    SSLManager.reset();        JFileChooser keyStoreChooser = new JFileChooser(System.getProperty("user.dir"));    keyStoreChooser.setDialogTitle(JMeterUtils.getResString("sslmanager.title"));    keyStoreChooser.addChoosableFileFilter(new AcceptPKCS12OrJKSFileFilter());    keyStoreChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);    int retVal = keyStoreChooser.showOpenDialog(GuiPackage.getInstance().getMainFrame());    if (JFileChooser.APPROVE_OPTION == retVal) {        File selectedFile = keyStoreChooser.getSelectedFile();        try {            System.setProperty(SSLManager.JAVAX_NET_SSL_KEY_STORE, selectedFile.getCanonicalPath());        } catch (IOException e) {                }    }    SSLManager.getInstance();}
0
public String getDescription()
{        return JMeterUtils.getResString("keystore_desc");}
0
public boolean accept(File testFile)
{    String lowerCaseName = testFile.getName().toLowerCase();    return testFile.isDirectory() ||     lowerCaseName.endsWith(".p12") || lowerCaseName.endsWith(".jks") || lowerCaseName.endsWith(".pfx");}
0
public Set<String> getActionNames()
{    return commands;}
0
public void doAction(ActionEvent e)
{    if (e.getActionCommand().equals(ActionNames.ACTION_START)) {        popupShouldSave(e);        startEngine(null, RunMode.AS_IS);    } else if (e.getActionCommand().equals(ActionNames.ACTION_START_NO_TIMERS)) {        popupShouldSave(e);        startEngine(null, RunMode.IGNORING_TIMERS);    } else if (e.getActionCommand().equals(ActionNames.ACTION_STOP)) {        if (engine != null) {                        GuiPackage.getInstance().getMainFrame().showStoppingMessage("");            engine.stopTest();        }    } else if (e.getActionCommand().equals(ActionNames.ACTION_SHUTDOWN)) {        if (engine != null) {                        GuiPackage.getInstance().getMainFrame().showStoppingMessage("");            engine.askThreadsToStop();        }    } else if (e.getActionCommand().equals(ActionNames.RUN_TG) || e.getActionCommand().equals(ActionNames.RUN_TG_NO_TIMERS) || e.getActionCommand().equals(ActionNames.VALIDATE_TG)) {        popupShouldSave(e);        boolean noTimers = e.getActionCommand().equals(ActionNames.RUN_TG_NO_TIMERS);        boolean isValidation = e.getActionCommand().equals(ActionNames.VALIDATE_TG);        RunMode runMode = null;        if (isValidation) {            runMode = RunMode.VALIDATION;        } else if (noTimers) {            runMode = RunMode.IGNORING_TIMERS;        } else {            runMode = RunMode.AS_IS;        }        JMeterTreeListener treeListener = GuiPackage.getInstance().getTreeListener();        JMeterTreeNode[] nodes = treeListener.getSelectedNodes();        nodes = Copy.keepOnlyAncestors(nodes);        AbstractThreadGroup[] tg = keepOnlyThreadGroups(nodes);        if (nodes.length > 0) {            startEngine(tg, runMode);        } else {                    }    }}
1
private AbstractThreadGroup[] keepOnlyThreadGroups(JMeterTreeNode[] currentNodes)
{    List<AbstractThreadGroup> nodes = new ArrayList<>();    for (JMeterTreeNode jMeterTreeNode : currentNodes) {        if (jMeterTreeNode.getTestElement() instanceof AbstractThreadGroup) {            nodes.add((AbstractThreadGroup) jMeterTreeNode.getTestElement());        }    }    return nodes.toArray(new AbstractThreadGroup[nodes.size()]);}
0
private void startEngine(AbstractThreadGroup[] threadGroupsToRun, RunMode runMode)
{    GuiPackage gui = GuiPackage.getInstance();    HashTree testTree = gui.getTreeModel().getTestPlan();                HashTree treeToUse = JMeter.convertSubTree(testTree, false);    if (threadGroupsToRun != null && threadGroupsToRun.length > 0) {        keepOnlySelectedThreadGroupsInHashTree(treeToUse, threadGroupsToRun);    }    treeToUse.add(treeToUse.getArray()[0], gui.getMainFrame());    if (log.isDebugEnabled()) {            }    ListedHashTree clonedTree = cloneTree(treeToUse, runMode);    if (popupCheckExistingFileListener(clonedTree)) {        engine = new StandardJMeterEngine();        engine.configure(clonedTree);        try {            engine.runTest();        } catch (JMeterEngineException e) {            JOptionPane.showMessageDialog(gui.getMainFrame(), e.getMessage(), JMeterUtils.getResString("error_occurred"),             JOptionPane.ERROR_MESSAGE);        }        if (log.isDebugEnabled()) {                    }    }}
1
private static TreeCloner createTreeClonerForValidation(boolean honorThreadClone)
{    Class<?> clazz;    try {        clazz = Class.forName(CLONER_FOR_VALIDATION_CLASS_NAME, true, Thread.currentThread().getContextClassLoader());        return (TreeCloner) clazz.getConstructor(boolean.class).newInstance(honorThreadClone);    } catch (InstantiationException | IllegalAccessException | ClassNotFoundException | NoSuchMethodException | InvocationTargetException ex) {                return new TreeClonerForValidation(honorThreadClone);    }}
1
private void keepOnlySelectedThreadGroupsInHashTree(HashTree testTree, AbstractThreadGroup[] threadGroupsToKeep)
{    LinkedList<Object> copyList = new LinkedList<>(testTree.list());    for (Object o : copyList) {        TestElement item = (TestElement) o;        if (o instanceof AbstractThreadGroup) {            if (!isInThreadGroups(item, threadGroupsToKeep)) {                                try {                    item.setEnabled(false);                    testTree.remove(item);                } finally {                    item.setEnabled(true);                }            } else {                keepOnlySelectedThreadGroupsInHashTree(testTree.getTree(item), threadGroupsToKeep);            }        } else {            keepOnlySelectedThreadGroupsInHashTree(testTree.getTree(item), threadGroupsToKeep);        }    }}
0
private boolean isInThreadGroups(TestElement item, AbstractThreadGroup[] threadGroups)
{    for (AbstractThreadGroup abstractThreadGroup : threadGroups) {        if (item == abstractThreadGroup) {            return true;        }    }    return false;}
0
private ListedHashTree cloneTree(HashTree testTree, RunMode runMode)
{    TreeCloner cloner = null;    switch(runMode) {        case VALIDATION:            cloner = createTreeClonerForValidation(false);            break;        case IGNORING_TIMERS:            cloner = new TreeClonerNoTimer(false);            break;        case AS_IS:        default:            cloner = new TreeCloner(false);            break;    }    testTree.traverse(cloner);    return cloner.getClonedTree();}
0
public Set<String> getActionNames()
{    return commands;}
0
public void actionPerformed(ActionEvent e)
{}
0
public void doAction(ActionEvent e)
{    GuiPackage instance = GuiPackage.getInstance();    List<Stoppable> stopables = instance.getStoppables();    for (Stoppable element : stopables) {        instance.unregister(element);        element.stopServer();    }}
0
public String getName()
{    return name;}
0
public void setName(String name)
{    this.name = name;}
0
public String getFileName()
{    return fileName;}
0
public void setFileName(String relativeFileName)
{    fileName = relativeFileName;}
0
public String getDescription()
{    return description;}
0
public void setDescription(String description)
{    this.description = description;}
0
public boolean isTestPlan()
{    return isTestPlan;}
0
public void setTestPlan(boolean isTestPlan)
{    this.isTestPlan = isTestPlan;}
0
public File getParent()
{    return parent;}
0
public void setParent(File parent)
{    this.parent = parent;}
0
public Map<String, String> getParameters()
{    return parameters;}
0
public void setParameters(Map<String, String> parameters)
{    this.parameters = parameters;}
0
public boolean equals(Object o)
{    if (this == o) {        return true;    }    if (o == null || getClass() != o.getClass()) {        return false;    }    Template other = (Template) o;    return isTestPlan == other.isTestPlan && Objects.equals(name, other.name) && Objects.equals(fileName, other.fileName) && Objects.equals(description, other.description) && Objects.equals(parent, other.parent) && Objects.equals(parameters, other.parameters);}
0
public int hashCode()
{    return Objects.hash(isTestPlan, name, fileName, description, parent, parameters);}
0
public String toString()
{    return "Template [isTestPlan=" + isTestPlan + ", name=" + name + ", fileName=" + fileName + ", description=" + description + ", parameters=" + parameters + "]";}
0
public static TemplateManager getInstance()
{    return SINGLETON;}
0
public void addTemplate(Template template)
{    allTemplates.put(template.getName(), template);}
0
public TemplateManager reset()
{    allTemplates.clear();    allTemplates.putAll(readTemplates());    return this;}
0
public String[] getTemplateNames()
{    return allTemplates.keySet().toArray(new String[allTemplates.size()]);}
0
private Map<String, Template> readTemplates()
{    final Map<String, Template> temps = new TreeMap<>();    final String[] templateFiles = TEMPLATE_FILES.split(",");    for (String templateFile : templateFiles) {        if (!StringUtils.isEmpty(templateFile)) {            final File file = new File(JMeterUtils.getJMeterHome(), templateFile);            try {                if (file.exists() && file.canRead()) {                    if (log.isInfoEnabled()) {                                            }                    Map<String, Template> templates = parseTemplateFile(file);                    final File parent = file.getParentFile();                    for (Template t : templates.values()) {                        if (!t.getFileName().startsWith("/")) {                            t.setParent(parent);                        }                    }                    temps.putAll(templates);                } else {                    if (log.isWarnEnabled()) {                                            }                }            } catch (Exception ex) {                if (log.isWarnEnabled()) {                                    }            }        }    }    return temps;}
1
public void error(SAXParseException ex) throws SAXException
{    throw ex;}
0
public void fatalError(SAXParseException ex) throws SAXException
{    throw ex;}
0
public void warning(SAXParseException ex) throws SAXException
{    }
1
public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException
{    if (systemId.endsWith("templates.dtd")) {        return new InputSource(TemplateManager.class.getResourceAsStream("/org/apache/jmeter/gui/action/template/templates.dtd"));    } else {        return null;    }}
0
public Map<String, Template> parseTemplateFile(File file) throws IOException, SAXException, ParserConfigurationException
{    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();    dbf.setValidating(true);    dbf.setNamespaceAware(true);    dbf.setFeature("http://xml.org/sax/features/external-general-entities", false);    dbf.setFeature("http://xml.org/sax/features/external-parameter-entities", false);    DocumentBuilder bd = dbf.newDocumentBuilder();    bd.setEntityResolver(new DefaultEntityResolver());    LoggingErrorHandler errorHandler = new LoggingErrorHandler(log, file);    bd.setErrorHandler(errorHandler);    Document document = bd.parse(file.getAbsolutePath());    document.getDocumentElement().normalize();    Map<String, Template> templates = new TreeMap<>();    NodeList templateNodes = document.getElementsByTagName("template");    for (int i = 0; i < templateNodes.getLength(); i++) {        Node node = templateNodes.item(i);        parseTemplateNode(templates, node);    }    return templates;}
0
 void parseTemplateNode(Map<String, Template> templates, Node templateNode)
{    if (templateNode.getNodeType() == Node.ELEMENT_NODE) {        Template template = new Template();        Element element = (Element) templateNode;        template.setTestPlan("true".equals(element.getAttribute("isTestPlan")));        template.setName(textOfFirstTag(element, "name"));        template.setDescription(textOfFirstTag(element, "description"));        template.setFileName(textOfFirstTag(element, "fileName"));        NodeList nl = element.getElementsByTagName("parameters");        if (nl.getLength() > 0) {            NodeList parameterNodes = ((Element) nl.item(0)).getElementsByTagName("parameter");            Map<String, String> parameters = parseParameterNodes(parameterNodes);            template.setParameters(parameters);        }        templates.put(template.getName(), template);    }}
0
private String textOfFirstTag(Element element, String tagName)
{    return element.getElementsByTagName(tagName).item(0).getTextContent();}
0
private Map<String, String> parseParameterNodes(NodeList parameterNodes)
{    Map<String, String> parametersMap = new HashMap<>();    for (int i = 0; i < parameterNodes.getLength(); i++) {        Element element = (Element) parameterNodes.item(i);        parametersMap.put(element.getAttribute("key"), element.getAttribute("defaultValue"));    }    return parametersMap;}
0
public Template getTemplateByName(String selectedTemplate)
{    return allTemplates.get(selectedTemplate);}
0
public void doActionAfterCheck(ActionEvent e)
{    IODH.dialog.setVisible(true);}
0
public Set<String> getActionNames()
{    return commands;}
0
public void doAction(ActionEvent e) throws IllegalUserActionException
{    GuiPackage guiPackage = GuiPackage.getInstance();    final String command = e.getActionCommand();    if (command.equals(ActionNames.UNDO)) {        guiPackage.undo();    } else if (command.equals(ActionNames.REDO)) {        guiPackage.redo();    } else {        throw new IllegalArgumentException("Wrong action called: " + command);    }}
0
public Set<String> getActionNames()
{    return commands;}
0
public static HashTree convertAndCloneSubTree(HashTree tree)
{    Save executor = new Save();    executor.convertSubTree(tree);        TreeCloner cloner = new TreeCloner(false);    tree.traverse(cloner);    return cloner.getClonedTree();}
0
protected Object addNodeToTree(Object node)
{    if ((VALIDATION_IGNORE_TIMERS && node instanceof Timer) || (VALIDATION_IGNORE_BACKENDS && node instanceof Backend)) {                return node;    } else {        Object clonedNode = super.addNodeToTree(node);        if (clonedNode instanceof org.apache.jmeter.threads.ThreadGroup) {            ThreadGroup tg = (ThreadGroup) clonedNode;            tg.setNumThreads(VALIDATION_NUMBER_OF_THREADS);            tg.setScheduler(false);            tg.setProperty(ThreadGroup.DELAY, 0);            if (((AbstractThreadGroup) clonedNode).getSamplerController() instanceof LoopController) {                ((LoopController) ((AbstractThreadGroup) clonedNode).getSamplerController()).setLoops(VALIDATION_ITERATIONS);            }        }        return clonedNode;    }}
0
public void doAction(ActionEvent e) throws IllegalUserActionException
{    JMeterTreeNode node = GuiPackage.getInstance().getTreeListener().getCurrentNode();    TestElement te = (TestElement) node.getUserObject();    if (ActionNames.WHAT_CLASS.equals(e.getActionCommand())) {        String guiClassName = te.getPropertyAsString(TestElement.GUI_CLASS);        System.out.println(te.getClass().getName());        System.out.println(guiClassName);        if (log.isInfoEnabled()) {                    }    } else if (ActionNames.DEBUG_ON.equals(e.getActionCommand())) {        final String loggerName = te.getClass().getName();        Configurator.setAllLevels(loggerName, Level.DEBUG);            } else if (ActionNames.DEBUG_OFF.equals(e.getActionCommand())) {        final String loggerName = te.getClass().getName();        Configurator.setAllLevels(loggerName, Level.INFO);            } else if (ActionNames.HEAP_DUMP.equals(e.getActionCommand())) {        try {            String s = HeapDumper.dumpHeap();            JOptionPane.showMessageDialog(null, "Created " + s, "HeapDump", JOptionPane.INFORMATION_MESSAGE);        } catch (Exception ex) {                        JOptionPane.showMessageDialog(null, ex.toString(), "HeapDump", JOptionPane.ERROR_MESSAGE);        }    } else if (ActionNames.THREAD_DUMP.equals(e.getActionCommand())) {        try {            String s = ThreadDumper.threadDump();            JOptionPane.showMessageDialog(null, "Created " + s, "ThreadDump", JOptionPane.INFORMATION_MESSAGE);        } catch (Exception ex) {                        JOptionPane.showMessageDialog(null, ex.toString(), "ThreadDump", JOptionPane.ERROR_MESSAGE);        }    }}
1
public Set<String> getActionNames()
{    return commandSet;}
0
public void doAction(ActionEvent e)
{    final String actionCommand = e.getActionCommand();    if (actionCommand.equals(ActionNames.ZOOM_IN)) {        JMeterUtils.applyScaleOnFonts(ZOOM_SCALE);    } else if (actionCommand.equals(ActionNames.ZOOM_OUT)) {        JMeterUtils.applyScaleOnFonts(1 / ZOOM_SCALE);    }}
0
public Set<String> getActionNames()
{    return commands;}
0
private void init()
{        setLayout(new BorderLayout(5, 0));    commentField = new JTextArea();        JLabel commentLabel = new JLabel(JMeterUtils.getResString("testplan_comments"));    commentLabel.setLabelFor(commentField);    JPanel commentPanel = new JPanel();    commentPanel.setLayout(new BorderLayout(0, 5));    commentPanel.add(commentLabel, BorderLayout.WEST);    commentPanel.add(commentField, BorderLayout.CENTER);    add(commentPanel);}
0
public void setText(String comment)
{    this.commentField.setText(comment);}
0
public String getText()
{    return this.commentField.getText();}
0
public void clearGui()
{        commentField.setText("");}
0
public void undo() throws CannotUndoException
{    super.undo();    loader.accept(previous);}
0
public void redo() throws CannotRedoException
{    super.redo();    loader.accept(item);}
0
public static ImageIcon getIcon(Class<?> elementClass)
{    return getIcon(elementClass, true);}
0
public static ImageIcon getIcon(Class<?> elementClass, boolean enabled)
{    String key = elementClass.getName();    ImageIcon icon = enabled ? ICON_MAP.get(key) : DISABLED_ICON_MAP.get(key);    if (icon != null) {        return icon;    }    if (elementClass.getSuperclass() != null) {        return getIcon(elementClass.getSuperclass(), enabled);    }    return null;}
0
public static JComponent getGUI(Class<?> elementClass)
{        String key = elementClass.getName();    JComponent gui = (JComponent) GUI_MAP.get(key);    if (gui != null) {        return gui;    }    if (elementClass.getSuperclass() != null) {        return getGUI(elementClass.getSuperclass());    }    return null;}
0
public static void registerIcon(String key, ImageIcon icon)
{    ICON_MAP.put(key, icon);}
0
public static void registerDisabledIcon(String key, ImageIcon icon)
{    DISABLED_ICON_MAP.put(key, icon);}
0
public static void registerGUI(String key, Class<?> guiClass, Class<?> testClass) throws InstantiationException, IllegalAccessException
{        JMeterGUIComponent gui;    if (guiClass == TestBeanGUI.class) {        gui = new TestBeanGUI(testClass);    } else {        gui = (JMeterGUIComponent) guiClass.newInstance();    }    GUI_MAP.put(key, gui);}
0
public static GuiPackage getInstance()
{    return guiPack;}
0
public void registerAsListener()
{    if (UndoHistory.isEnabled()) {        this.undoHistory.registerHistoryListener(this);    }    JMeterUtils.addLocaleChangeListener(this);}
0
public static void initInstance(JMeterTreeListener listener, JMeterTreeModel treeModel)
{    GuiPackage guiPack = new GuiPackage(treeModel, listener);    guiPack.undoHistory.add(treeModel, "Created");    GuiPackage.guiPack = guiPack;}
0
public JMeterGUIComponent getGui(TestElement node)
{    String testClassName = node.getPropertyAsString(TestElement.TEST_CLASS);    String guiClassName = node.getPropertyAsString(TestElement.GUI_CLASS);    try {        Class<?> testClass;        if (testClassName.isEmpty()) {            testClass = node.getClass();        } else {            testClass = Class.forName(testClassName);        }        Class<?> guiClass = null;        if (!guiClassName.isEmpty()) {            guiClass = Class.forName(guiClassName);        }        return getGui(node, guiClass, testClass);    } catch (ClassNotFoundException e) {                return null;    }}
1
public JMeterGUIComponent getGui(TestElement node, Class<?> guiClass, Class<?> testClass)
{    try {        JMeterGUIComponent comp = nodesToGui.get(node);        if (comp == null) {            comp = getGuiFromCache(guiClass, testClass);            nodesToGui.put(node, comp);        }                return comp;    } catch (Exception e) {                return null;    }}
1
public void removeNode(TestElement node)
{    nodesToGui.remove(node);}
0
public JMeterGUIComponent getCurrentGui()
{    try {        updateCurrentNode();        TestElement curNode = treeListener.getCurrentNode().getTestElement();        JMeterGUIComponent comp = getGui(curNode);        if (comp == null) {                        return null;        }        comp.clearGui();                comp.configure(curNode);        currentNodeUpdated = false;        return comp;    } catch (Exception e) {                return null;    }}
1
public JMeterTreeNode getNodeOf(TestElement userObject)
{    return treeModel.getNodeOf(userObject);}
0
public TestElement createTestElement(Class<?> guiClass, Class<?> testClass)
{    try {        JMeterGUIComponent comp = getGuiFromCache(guiClass, testClass);        comp.clearGui();        TestElement node = comp.createTestElement();        nodesToGui.put(node, comp);        return node;    } catch (Exception e) {                return null;    }}
1
public TestElement createTestElement(String objClass)
{    JMeterGUIComponent comp;    Class<?> c;    try {        c = Class.forName(objClass);        if (TestBean.class.isAssignableFrom(c)) {            comp = getGuiFromCache(TestBeanGUI.class, c);        } else {            comp = getGuiFromCache(c, null);        }        comp.clearGui();        TestElement node = comp.createTestElement();        nodesToGui.put(node, comp);        return node;    } catch (NoClassDefFoundError e) {                String msg = "Cannot find class: " + e.getMessage();        JOptionPane.showMessageDialog(null, msg, "Missing jar? See log file.", JOptionPane.ERROR_MESSAGE);                throw new RuntimeException(e.toString(), e);    } catch (ReflectiveOperationException e) {                        throw new RuntimeException(e.toString(), e);    }}
1
private JMeterGUIComponent getGuiFromCache(Class<?> guiClass, Class<?> testClass) throws ReflectiveOperationException
{    JMeterGUIComponent comp;    if (guiClass == TestBeanGUI.class) {        comp = testBeanGUIs.get(testClass);        if (comp == null) {            comp = new TestBeanGUI(testClass);            testBeanGUIs.put(testClass, comp);        }    } else {        comp = guis.get(guiClass);        if (comp == null) {            comp = (JMeterGUIComponent) guiClass.getDeclaredConstructor().newInstance();            if (!(comp instanceof UnsharedComponent)) {                guis.put(guiClass, comp);            }        }    }    return comp;}
0
public void updateCurrentGui()
{    updateCurrentNode();    refreshCurrentGui();}
0
public void refreshCurrentGui()
{    currentNode = treeListener.getCurrentNode();    TestElement element = currentNode.getTestElement();    JMeterGUIComponent comp = getGui(element);    if (comp == null) {                return;    }    comp.configure(element);    currentNodeUpdated = false;}
1
public void updateCurrentNode()
{    try {        if (currentNode != null && !currentNodeUpdated) {                        JMeterGUIComponent comp = getGui(currentNode.getTestElement());            if (comp == null) {                                return;            }            TestElement el = currentNode.getTestElement();            int before = 0;            int after = 0;            final boolean historyEnabled = UndoHistory.isEnabled();            if (historyEnabled) {                before = getTestElementCheckSum(el);            }            comp.modifyTestElement(el);            if (historyEnabled) {                after = getTestElementCheckSum(el);            }            if (!historyEnabled || (before != after)) {                                currentNode.nameChanged();            }        }                currentNodeUpdated = true;        currentNode = treeListener.getCurrentNode();    } catch (Exception e) {            }}
1
public JMeterTreeNode getCurrentNode()
{    return treeListener.getCurrentNode();}
0
public TestElement getCurrentElement()
{    return getCurrentNode().getTestElement();}
0
public void setDirty(boolean dirty)
{    this.dirty = dirty;}
0
public boolean isDirty()
{    return dirty;}
0
public HashTree addSubTree(HashTree subTree) throws IllegalUserActionException
{    HashTree hashTree = treeModel.addSubTree(subTree, treeListener.getCurrentNode());    undoHistory.clear();    undoHistory.add(this.treeModel, "Loaded tree");    return hashTree;}
0
public HashTree getCurrentSubTree()
{    return treeModel.getCurrentSubTree(treeListener.getCurrentNode());}
0
public JMeterTreeModel getTreeModel()
{    return treeModel;}
0
public ValueReplacer getReplacer()
{    return new ValueReplacer((TestPlan) ((JMeterTreeNode) getTreeModel().getTestPlan().getArray()[0]).getTestElement());}
0
public void setMainFrame(MainFrame newMainFrame)
{    mainFrame = newMainFrame;}
0
public MainFrame getMainFrame()
{    return mainFrame;}
0
public JMeterTreeListener getTreeListener()
{    return treeListener;}
0
public void setMainToolbar(JToolBar newToolbar)
{    toolbar = newToolbar;}
0
public JToolBar getMainToolbar()
{    return toolbar;}
0
public void displayPopUp(MouseEvent e, JPopupMenu popup)
{    displayPopUp((Component) e.getSource(), e, popup);}
0
public void displayPopUp(Component invoker, MouseEvent e, JPopupMenu popup)
{    if (popup != null) {                popup.pack();        popup.show(invoker, e.getX(), e.getY());        popup.setVisible(true);        popup.requestFocusInWindow();    }}
1
public void localeChanged(LocaleChangeEvent event)
{            updateCurrentNode();            guis = new HashMap<>();    nodesToGui = new HashMap<>();    testBeanGUIs = new HashMap<>();            Introspector.flushCaches();                        MainFrame mf = getMainFrame();    if (mf == null) {                    } else {        mf.setMainPanel((javax.swing.JComponent) getCurrentGui());        mf.setEditMenu(getTreeListener().getCurrentNode().createPopupMenu());    }}
1
public void setTestPlanFile(String f)
{    testPlanFile = f;    getMainFrame().setExtendedFrameTitle(testPlanFile);        getMainFrame().setFileRevertEnabled(f != null);    getMainFrame().setProjectFileLoaded(f);    try {        FileServer.getFileServer().setBasedir(testPlanFile);    } catch (IllegalStateException e1) {            }    testPlanListeners.stream().forEach(TestPlanListener::testPlanLoaded);}
1
public String getTestPlanFile()
{    return testPlanFile;}
0
public void clearTestPlan()
{    testPlanListeners.stream().forEach(TestPlanListener::beforeTestPlanCleared);    getTreeModel().clearTestPlan();    nodesToGui.clear();    setTestPlanFile(null);    testPlanListeners.stream().forEach(TestPlanListener::afterTestPlanCleared);    undoHistory.clear();    undoHistory.add(this.treeModel, "Initial Tree");}
0
public void clearTestPlan(TestElement element)
{    getTreeModel().clearTestPlan(element);    removeNode(element);    undoHistory.clear();    undoHistory.add(this.treeModel, "Initial Tree");}
0
public static void showErrorMessage(final String message, final String title)
{    showMessage(message, title, JOptionPane.ERROR_MESSAGE);}
0
public static void showInfoMessage(final String message, final String title)
{    showMessage(message, title, JOptionPane.INFORMATION_MESSAGE);}
0
public static void showWarningMessage(final String message, final String title)
{    showMessage(message, title, JOptionPane.WARNING_MESSAGE);}
0
public static void showMessage(final String message, final String title, final int type)
{    if (guiPack == null) {        return;    }    SwingUtilities.invokeLater(() -> JOptionPane.showMessageDialog(null, message, title, type));}
0
public void unregister(Stoppable stoppableToUnregister)
{    stoppables.removeIf(stoppable -> stoppable == stoppableToUnregister);}
0
public void register(Stoppable stoppable)
{    stoppables.add(stoppable);}
0
public List<Stoppable> getStoppables()
{    List<Stoppable> list = new ArrayList<>();    list.addAll(stoppables);    return list;}
0
public void setMenuItemLoggerPanel(JCheckBoxMenuItem menuItemLoggerPanel)
{    this.menuItemLoggerPanel = menuItemLoggerPanel;}
0
public JCheckBoxMenuItem getMenuItemLoggerPanel()
{    return menuItemLoggerPanel;}
0
public void setMenuItemSaveBeforeRunPanel(JCheckBoxMenuItem menuItemSaveBeforeRunPanel)
{    this.menuItemSaveBeforeRunPanel = menuItemSaveBeforeRunPanel;}
0
public JCheckBoxMenuItem getMenuItemSaveBeforeRunPanel()
{    return menuItemSaveBeforeRunPanel;}
0
public void setLoggerPanel(LoggerPanel loggerPanel)
{    this.loggerPanel = loggerPanel;}
0
public LoggerPanel getLoggerPanel()
{    return loggerPanel;}
0
public void undo()
{    undoHistory.undo();}
0
public void redo()
{    undoHistory.redo();}
0
public boolean canRedo()
{    return undoHistory.canRedo();}
0
public boolean canUndo()
{    return undoHistory.canUndo();}
0
private int getTestElementCheckSum(TestElement el)
{    int ret = el.getClass().hashCode();    PropertyIterator it = el.propertyIterator();    while (it.hasNext()) {        JMeterProperty obj = it.next();        if (obj instanceof TestElementProperty) {            ret ^= getTestElementCheckSum(((TestElementProperty) obj).getElement());        } else {            ret ^= obj.getName().hashCode();            String stringValue = obj.getStringValue();            if (stringValue != null) {                ret ^= stringValue.hashCode();            } else {                if (log.isDebugEnabled()) {                                    }            }        }    }    return ret;}
1
public void notifyChangeInHistory(UndoHistory history)
{    ((JMeterToolBar) toolbar).updateUndoRedoIcons(history.canUndo(), history.canRedo());}
0
public TreeNodeNamingPolicy getNamingPolicy()
{    if (namingPolicy == null) {        final String namingPolicyImplementation =         JMeterUtils.getPropDefault(        "naming_policy.impl", DefaultTreeNodeNamingPolicy.class.getName());        try {            Class<?> implementationClass = Class.forName(namingPolicyImplementation);            this.namingPolicy = (TreeNodeNamingPolicy) implementationClass.getDeclaredConstructor().newInstance();        } catch (Exception ex) {                        this.namingPolicy = new DefaultTreeNodeNamingPolicy();        }    }    return namingPolicy;}
1
public GuiLogEventBus getLogEventBus()
{    return logEventBus;}
0
public void beginUndoTransaction()
{    undoHistory.beginUndoTransaction();}
0
public void endUndoTransaction()
{    undoHistory.endUndoTransaction();}
0
public boolean shouldSaveBeforeRunByPreference()
{    return Boolean.TRUE.toString().equalsIgnoreCase(PREFS.get(SBR_PREFS_KEY, null));}
0
public void setSaveBeforeRunByPreference(boolean saveBeforeRun)
{        PREFS.put(SBR_PREFS_KEY, Boolean.toString(saveBeforeRun));}
0
public boolean shouldSaveBeforeRun()
{    String sbr = PREFS.get(SBR_PREFS_KEY, null);    if (sbr == null) {                return JMeterUtils.getPropDefault(SAVE_BEFORE_RUN_PROPERTY, SAVE_BEFORE_RUN_PROPERTY_DEFAULT_VALUE);    } else {        return shouldSaveBeforeRunByPreference();    }}
0
public void addTestPlanListener(TestPlanListener listener)
{    testPlanListeners.add(listener);}
0
public void removeTestPlanListener(TestPlanListener listener)
{    testPlanListeners.remove(listener);}
0
public void doAction(ActionEvent e) throws IllegalUserActionException
{    htmlReportPanel = new HtmlReportUI();    htmlReportPanel.showInputDialog(getParentFrame(e));}
0
public Set<String> getActionNames()
{    return commands;}
0
public JMenuItem[] getMenuItemsAtLocation(MENU_LOCATION location)
{    if (location != MENU_LOCATION.TOOLS) {        return new JMenuItem[0];    }    JMenuItem menuItem = new JMenuItem(JMeterUtils.getResString("generate_report_ui.html_report_menu"), KeyEvent.VK_UNDEFINED);    menuItem.setName(ActionNames.HTML_REPORT);    menuItem.setActionCommand(ActionNames.HTML_REPORT);    menuItem.setAccelerator(null);    menuItem.addActionListener(ActionRouter.getInstance());    return new JMenuItem[] { menuItem };}
0
public JMenu[] getTopLevelMenus()
{    return new JMenu[0];}
0
public boolean localeChanged(MenuElement menu)
{    return false;}
0
public void localeChanged()
{}
0
public HtmlReportUI getHtmlReportPanel()
{    return htmlReportPanel;}
0
public void showInputDialog(JFrame parent)
{    setupInputDialog(parent);    launchInputDialog();}
0
private void launchInputDialog()
{    messageDialog.pack();    ComponentUtil.centerComponentInWindow(messageDialog);    messageDialog.setVisible(true);}
0
public void setupInputDialog(JFrame parent)
{    messageDialog = new EscapeDialog(parent, JMeterUtils.getResString("generate_report_ui.html_report_menu"), false);    setupContentPane();}
0
private void setupContentPane()
{    Container contentPane = messageDialog.getContentPane();    contentPane.setLayout(new BorderLayout());    contentPane.add(setupFileChooserPanel(), BorderLayout.NORTH);    reportArea = JSyntaxTextArea.getInstance(10, 60, true);    reportArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_NONE);    reportArea.setEditable(false);    contentPane.add(reportArea, BorderLayout.CENTER);    contentPane.add(setupButtonPanel(), BorderLayout.SOUTH);}
0
private JPanel setupFileChooserPanel()
{    JPanel fileChooserPanel = new JPanel(new GridLayout(3, 3));    fileChooserPanel.add(new JLabel(JMeterUtils.getResString("generate_report_ui.csv_file")));    csvFilePathTextField = new JTextField();    fileChooserPanel.add(csvFilePathTextField);    this.csvFileButton = new JButton(JMeterUtils.getResString(BROWSE));    csvFileButton.setActionCommand(BROWSE_CSV);    csvFileButton.addActionListener(this);    fileChooserPanel.add(csvFileButton);    fileChooserPanel.add(new JLabel(JMeterUtils.getResString("generate_report_ui.user_properties_file")));    userPropertiesFilePathTextField = new JTextField();    fileChooserPanel.add(userPropertiesFilePathTextField);    this.userPropertiesFileButton = new JButton(JMeterUtils.getResString(BROWSE));    userPropertiesFileButton.setActionCommand(BROWSE_USER_PROPERTIES);    userPropertiesFileButton.addActionListener(this);    fileChooserPanel.add(userPropertiesFileButton);    fileChooserPanel.add(new JLabel(JMeterUtils.getResString("generate_report_ui.output_directory")));    outputDirectoryPathTextField = new JTextField();    fileChooserPanel.add(outputDirectoryPathTextField);    this.outputDirectoryButton = new JButton(JMeterUtils.getResString(BROWSE));    outputDirectoryButton.setActionCommand(BROWSE_OUTPUT);    outputDirectoryButton.addActionListener(this);    fileChooserPanel.add(outputDirectoryButton);    return fileChooserPanel;}
0
private JPanel setupButtonPanel()
{    JPanel buttonPanel = new JPanel(new GridLayout(1, 1));    reportLaunchButton = new JButton(GENERATE_REPORT_LABEL);    reportLaunchButton.setActionCommand(CREATE_REQUEST);    reportLaunchButton.addActionListener(this);    buttonPanel.add(reportLaunchButton);    return buttonPanel;}
0
protected List<String> doInBackground() throws Exception
{    HtmlReportGenerator htmlReportAction = new HtmlReportGenerator(csvFilePathTextField.getText(), userPropertiesFilePathTextField.getText(), outputDirectoryPathTextField.getText());    SwingUtilities.invokeAndWait(() -> {        reportLaunchButton.setEnabled(false);        reportLaunchButton.setIcon(runningIcon);        reportLaunchButton.setText(GENERATING_REPORT_LABEL);    });    return htmlReportAction.run();}
0
protected void done()
{    try {        reportLaunchButton.setEnabled(true);        reportLaunchButton.setText(GENERATE_REPORT_LABEL);        reportToUser(get());    } catch (InterruptedException | ExecutionException exception) {        if (LOGGER.isErrorEnabled()) {                    }        reportToUser(Arrays.asList(exception.getMessage()));    }}
1
private void addTextToReport(String errorMessage)
{    reportArea.setText(reportArea.getText() + errorMessage + "\n");}
0
public void actionPerformed(ActionEvent e)
{    switch(e.getActionCommand()) {        case CREATE_REQUEST:            try {                reportArea.setText(GENERATING_REPORT_LABEL + "\n");                reportLaunchButton.setIcon(runningIcon);                new ReportGenerationWorker(reportLaunchButton).execute();            } catch (Exception exception) {                if (LOGGER.isErrorEnabled()) {                                    }            }            if (LOGGER.isDebugEnabled()) {                            }            break;        case BROWSE_USER_PROPERTIES:            userPropertiesFilePathTextField.setText(showFileChooser(userPropertiesFileButton.getParent(), userPropertiesFilePathTextField, false, new String[] { ".properties" }));            break;        case BROWSE_CSV:            csvFilePathTextField.setText(showFileChooser(csvFileButton.getParent(), csvFilePathTextField, false, new String[] { ".jtl", ".csv" }));            break;        case BROWSE_OUTPUT:            outputDirectoryPathTextField.setText(showFileChooser(outputDirectoryButton.getParent(), outputDirectoryPathTextField, true, null));            break;        default:            break;    }}
1
 void reportToUser(List<String> runErrors)
{    if (runErrors.isEmpty()) {        addTextToReport(JMeterUtils.getResString(HtmlReportGenerator.HTML_REPORT_SUCCESS));        reportLaunchButton.setIcon(completedIcon);    } else {        addTextToReport(String.join("\n", runErrors));        reportLaunchButton.setIcon(inErrorIcon);    }}
0
private String showFileChooser(Component component, JTextField locationTextField, boolean onlyDirectory, String[] extensions)
{    JFileChooser jfc = new JFileChooser();    if (onlyDirectory) {        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);    } else {        jfc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);    }    if (extensions != null && extensions.length > 0) {        JMeterFileFilter currentFilter = new JMeterFileFilter(extensions);        jfc.addChoosableFileFilter(currentFilter);        jfc.setAcceptAllFileFilterUsed(true);        jfc.setFileFilter(currentFilter);    }    if (lastJFCDirectory != null) {        jfc.setCurrentDirectory(new File(lastJFCDirectory));    } else {                String start = System.getProperty("user.dir", "");        if (!start.isEmpty()) {            jfc.setCurrentDirectory(new File(start));        }    }    int retVal = jfc.showOpenDialog(component);    if (retVal == JFileChooser.APPROVE_OPTION) {        lastJFCDirectory = jfc.getCurrentDirectory().getAbsolutePath();        return jfc.getSelectedFile().getPath();    } else {        return locationTextField.getText();    }}
0
public boolean accept(File f)
{    return (allowDirs && f.isDirectory()) || accept(f.getName().toLowerCase());}
0
public boolean accept(String filename)
{    return Arrays.stream(exts).anyMatch(filename::endsWith);}
0
public String getDescription()
{    return "JMeter " + Arrays.asList(exts).toString();}
0
 boolean canBeAdded()
{    return true;}
0
private JTextArea init()
{        this.setLayout(new BorderLayout());    final JScrollPane areaScrollPane;    final JTextArea jTextArea;    if (JMeterUtils.getPropDefault("loggerpanel.usejsyntaxtext", true)) {                JSyntaxTextArea jSyntaxTextArea = JSyntaxTextArea.getInstance(15, 80, true);        jSyntaxTextArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_NONE);        jSyntaxTextArea.setCodeFoldingEnabled(false);        jSyntaxTextArea.setAntiAliasingEnabled(false);        jSyntaxTextArea.setEditable(false);        jSyntaxTextArea.setLineWrap(false);        jSyntaxTextArea.setLanguage("text");                jSyntaxTextArea.setMargin(new Insets(2, 2, 2, 2));        areaScrollPane = JTextScrollPane.getInstance(jSyntaxTextArea);        jTextArea = jSyntaxTextArea;    } else {                jTextArea = new JTextArea(15, 80);        areaScrollPane = new JScrollPane(jTextArea);    }    areaScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);    areaScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);    this.add(areaScrollPane, BorderLayout.CENTER);    initWorker();    return jTextArea;}
0
public void processLogEvent(final LogEventObject logEventObject)
{    if (!LOGGER_PANEL_RECEIVE_WHEN_CLOSED && !GuiPackage.getInstance().getMenuItemLoggerPanel().getModel().isSelected()) {        return;    }    String logMessage = logEventObject.toString();    synchronized (events) {        events.add(logMessage);    }    logChanged = true;}
0
private void initWorker()
{    Timer timer = new Timer(LOGGER_PANEL_REFRESH_PERIOD, e -> updateLogEntries());    timer.start();}
0
private void updateLogEntries()
{    if (!logChanged) {        return;    }    logChanged = false;    StringBuilder builder = new StringBuilder();    synchronized (events) {        for (Object line : events) {            builder.append((String) line);        }    }    String logText = builder.toString();    synchronized (textArea) {        if (LOGGER_PANEL_MAX_LINES > 0) {            textArea.setText(logText);        } else {            textArea.append(logText);        }        textArea.setCaretPosition(textArea.getText().length());    }}
0
public void clear()
{    synchronized (events) {        events.clear();    }    logChanged = true;}
0
public void append(LogEvent logEvent)
{                        GuiPackage instance = GuiPackage.getInstance();    if (instance != null) {        final String serializedString = getStringLayout().toSerializable(logEvent);        if (serializedString != null && !serializedString.isEmpty()) {            LogEventObject logEventObject = new LogEventObject(logEvent, serializedString);            instance.getLogEventBus().postEvent(logEventObject);        }    }}
0
public static GuiLogEventAppender createAppender(@PluginAttribute("name") String name, @PluginAttribute("ignoreExceptions") boolean ignoreExceptions, @PluginElement("Layout") Layout<? extends Serializable> layout, @PluginElement("Filters") Filter filter)
{    if (name == null) {                return null;    }    if (layout == null) {        layout = PatternLayout.createDefaultLayout();    }    return new GuiLogEventAppender(name, filter, layout, ignoreExceptions);}
1
public StringLayout getStringLayout()
{    return (StringLayout) getLayout();}
0
public void registerEventListener(GuiLogEventListener listener)
{    listeners.add(listener);}
0
public void unregisterEventListener(GuiLogEventListener listener)
{    listeners.remove(listener);}
0
public void postEvent(LogEventObject logEventObject)
{    for (GuiLogEventListener listener : listeners) {        listener.processLogEvent(logEventObject);    }}
0
public boolean isMoreSpecificThanError()
{    if (level != null) {        return level.isMoreSpecificThan(Level.ERROR);    }    return false;}
0
public boolean isMoreSpecificThanWarn()
{    if (level != null) {        return level.isMoreSpecificThan(Level.WARN);    }    return false;}
0
public boolean isMoreSpecificThanInfo()
{    if (level != null) {        return level.isMoreSpecificThan(Level.INFO);    }    return false;}
0
public String toString()
{    if (seralizedString != null) {        return seralizedString;    }    return super.toString();}
0
private void refreshErrors(ActionEvent evt)
{    if (errorOrFatal.get() > 0) {        warnIndicator.setForeground(Color.RED);        warnIndicator.setText(Integer.toString(errorOrFatal.get()));    }}
0
protected void computeTestDuration(ActionEvent evt)
{    long startTime = JMeterContextService.getTestStartTime();    if (startTime > 0) {                long elapsedSec = (System.currentTimeMillis() - startTime + 500) / 1000;        testTimeDuration.setText(JOrphanUtils.formatDuration(elapsedSec));    }}
0
public void setFileLoadEnabled(boolean enabled)
{    menuBar.setFileLoadEnabled(enabled);}
0
public void setFileSaveEnabled(boolean enabled)
{    menuBar.setFileSaveEnabled(enabled);}
0
public void setFileRevertEnabled(boolean enabled)
{    menuBar.setFileRevertEnabled(enabled);}
0
public void setProjectFileLoaded(String file)
{    menuBar.setProjectFileLoaded(file);}
0
public void setEditMenu(JPopupMenu menu)
{    menuBar.setEditMenu(menu);}
0
public void setEditEnabled(boolean enabled)
{    menuBar.setEditEnabled(enabled);}
0
public void setEditAddMenu(JMenu menu)
{    menuBar.setEditAddMenu(menu);}
0
public void setEditAddEnabled(boolean enabled)
{    menuBar.setEditAddEnabled(enabled);}
0
public void closeMenu()
{    if (!menuBar.isSelected()) {        return;    }    MenuElement[] menuElement = menuBar.getSubElements();    if (menuElement != null) {        for (MenuElement element : menuElement) {            JMenu menu = (JMenu) element;            if (menu.isSelected()) {                menu.setPopupMenuVisible(false);                menu.setSelected(false);                break;            }        }    }}
0
public void showStoppingMessage(String host)
{    if (stoppingMessage != null) {        stoppingMessage.dispose();    }        stoppingMessage = new EscapeDialog(this, JMeterUtils.getResString("stopping_test_title"), true);        String label = JMeterUtils.getResString("stopping_test");    if (!StringUtils.isEmpty(host)) {        label = label + JMeterUtils.getResString("stopping_test_host") + ": " + host;    }        JLabel stopLabel = new JLabel(label);    stopLabel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));    stoppingMessage.getContentPane().add(stopLabel);    stoppingMessage.pack();    ComponentUtil.centerComponentInComponent(this, stoppingMessage);    SwingUtilities.invokeLater(() -> {        if (stoppingMessage != null) {            stoppingMessage.setVisible(true);        }    });}
0
public void updateCounts()
{    SwingUtilities.invokeLater(() -> activeAndTotalThreads.setText(String.format("%d/%d", JMeterContextService.getNumberOfThreads(), JMeterContextService.getTotalThreads())));}
0
public void setMainPanel(JComponent comp)
{    mainPanel.setViewportView(comp);}
0
public JTree getTree()
{    return tree;}
0
public void testStarted()
{    testStarted(LOCAL);    menuBar.setEnabled(true);}
0
public void testStarted(String host)
{    hosts.add(host);    computeTestDurationTimer.start();    runningIndicator.setIcon(runningIcon);        activeAndTotalThreads.setText("0/0");    menuBar.setRunning(true, host);    if (LOCAL.equals(host)) {        toolbar.setLocalTestStarted(true);    } else {        toolbar.setRemoteTestStarted(true);    }}
0
public void testEnded()
{    testEnded(LOCAL);    menuBar.setEnabled(false);}
0
public void testEnded(String host)
{    hosts.remove(host);    if (hosts.isEmpty()) {        runningIndicator.setIcon(stoppedIcon);        JMeterContextService.endTest();        computeTestDurationTimer.stop();    }    menuBar.setRunning(false, host);    if (LOCAL.equals(host)) {        toolbar.setLocalTestStarted(false);    } else {        toolbar.setRemoteTestStarted(false);    }    if (stoppingMessage != null) {        stoppingMessage.dispose();        stoppingMessage = null;    }}
0
private void init()
{        menuBar = new JMeterMenuBar();    setJMenuBar(menuBar);    JPanel all = new JPanel(new BorderLayout());    all.add(createToolBar(), BorderLayout.NORTH);    JSplitPane treeAndMain = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);    treePanel = createTreePanel();    treeAndMain.setLeftComponent(treePanel);    JSplitPane topAndDown = new JSplitPane(JSplitPane.VERTICAL_SPLIT);    topAndDown.setOneTouchExpandable(true);    topAndDown.setDividerLocation(0.8);    topAndDown.setResizeWeight(.8);    topAndDown.setContinuousLayout(true);        topAndDown.setBorder(null);    if (!DISPLAY_LOGGER_PANEL) {        topAndDown.setDividerSize(0);    }    mainPanel = createMainPanel();    logPanel = createLoggerPanel();    errorsAndFatalsCounterLogTarget = new ErrorsAndFatalsCounterLogTarget();    GuiPackage.getInstance().getLogEventBus().registerEventListener(logPanel);    GuiPackage.getInstance().getLogEventBus().registerEventListener(errorsAndFatalsCounterLogTarget);    topAndDown.setTopComponent(mainPanel);    topAndDown.setBottomComponent(logPanel);    treeAndMain.setRightComponent(topAndDown);    treeAndMain.setResizeWeight(.2);    treeAndMain.setContinuousLayout(true);    all.add(treeAndMain, BorderLayout.CENTER);    getContentPane().add(all);    tree.setSelectionRow(1);    addWindowListener(new WindowHappenings());        GuiPackage.getInstance().registerAsListener();    setTitle(DEFAULT_TITLE);        setIconImage(JMeterUtils.getImage("icon-apache.png").getImage());        setWindowTitle();    refreshErrorsTimer.start();}
0
public void initTopLevelDndHandler()
{    new DropTarget(this, this);}
0
public void setExtendedFrameTitle(String fname)
{        if (fname == null) {        setTitle(DEFAULT_TITLE);        return;    }            String temp = fname.replace('\\', '/');        String simpleName = temp.substring(temp.lastIndexOf('/') + 1);        setTitle(simpleName + " (" + fname + ") - " + DEFAULT_TITLE);}
0
private Component createToolBar()
{    Box toolPanel = new Box(BoxLayout.X_AXIS);        this.toolbar = JMeterToolBar.createToolbar(true);    GuiPackage guiInstance = GuiPackage.getInstance();    guiInstance.setMainToolbar(toolbar);    toolPanel.add(toolbar);    toolPanel.add(Box.createRigidArea(new Dimension(5, 15)));    toolPanel.add(Box.createGlue());    toolPanel.add(testTimeDuration);    toolPanel.add(Box.createRigidArea(new Dimension(5, 15)));    toolPanel.add(warnIndicator);    warnIndicator.setText("0");    toolPanel.add(Box.createRigidArea(new Dimension(5, 15)));    toolPanel.add(activeAndTotalThreads);    toolPanel.add(Box.createRigidArea(new Dimension(5, 15)));    toolPanel.add(runningIndicator);    return toolPanel;}
0
private JScrollPane createTreePanel()
{    JScrollPane treeP = new JScrollPane(tree);    treeP.setMinimumSize(new Dimension(100, 0));    return treeP;}
0
private JScrollPane createMainPanel()
{    return new JScrollPane();}
0
private LoggerPanel createLoggerPanel()
{    LoggerPanel loggerPanel = new LoggerPanel();    loggerPanel.setMinimumSize(new Dimension(0, 100));    loggerPanel.setPreferredSize(new Dimension(0, 150));    GuiPackage guiInstance = GuiPackage.getInstance();    guiInstance.setLoggerPanel(loggerPanel);    guiInstance.getMenuItemLoggerPanel().getModel().setSelected(DISPLAY_LOGGER_PANEL);    loggerPanel.setVisible(DISPLAY_LOGGER_PANEL);    return loggerPanel;}
0
private JTree makeTree(TreeModel treeModel, JMeterTreeListener treeListener)
{    JTree treevar = new JTree(treeModel) {        private static final long serialVersionUID = 240L;        @Override        public String getToolTipText(MouseEvent event) {            TreePath path = this.getPathForLocation(event.getX(), event.getY());            if (path != null) {                Object treeNode = path.getLastPathComponent();                if (treeNode instanceof DefaultMutableTreeNode) {                    Object testElement = ((DefaultMutableTreeNode) treeNode).getUserObject();                    if (testElement instanceof TestElement) {                        String comment = ((TestElement) testElement).getComment();                        if (comment != null && comment.length() > 0) {                            return comment;                        }                    }                }            }            return null;        }    };    treevar.setToolTipText("");    treevar.setCellRenderer(getCellRenderer());    treevar.setRootVisible(false);    treevar.setShowsRootHandles(true);    treeListener.setJTree(treevar);    treevar.addTreeSelectionListener(treeListener);    treevar.addMouseListener(treeListener);    treevar.addKeyListener(treeListener);        treevar.setDragEnabled(true);    treevar.setDropMode(DropMode.ON_OR_INSERT);    treevar.setTransferHandler(new JMeterTreeTransferHandler());    addQuickComponentHotkeys(treevar);    return treevar;}
0
public String getToolTipText(MouseEvent event)
{    TreePath path = this.getPathForLocation(event.getX(), event.getY());    if (path != null) {        Object treeNode = path.getLastPathComponent();        if (treeNode instanceof DefaultMutableTreeNode) {            Object testElement = ((DefaultMutableTreeNode) treeNode).getUserObject();            if (testElement instanceof TestElement) {                String comment = ((TestElement) testElement).getComment();                if (comment != null && comment.length() > 0) {                    return comment;                }            }        }    }    return null;}
0
private void addQuickComponentHotkeys(JTree treevar)
{    Action quickComponent = new QuickComponent("Quick Component");    InputMap inputMap = treevar.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);    KeyStroke[] keyStrokes = new KeyStroke[] { KeyStrokes.CTRL_0, KeyStrokes.CTRL_1, KeyStrokes.CTRL_2, KeyStrokes.CTRL_3, KeyStrokes.CTRL_4, KeyStrokes.CTRL_5, KeyStrokes.CTRL_6, KeyStrokes.CTRL_7, KeyStrokes.CTRL_8, KeyStrokes.CTRL_9 };    for (int n = 0; n < keyStrokes.length; n++) {        treevar.getActionMap().put(ActionNames.QUICK_COMPONENT + String.valueOf(n), quickComponent);        inputMap.put(keyStrokes[n], ActionNames.QUICK_COMPONENT + String.valueOf(n));    }}
0
private TreeCellRenderer getCellRenderer()
{    return new JMeterCellRenderer();}
0
public void actionPerformed(ActionEvent actionEvent)
{    String propname = "gui.quick_" + getCurrentKey(actionEvent);    String comp = JMeterUtils.getProperty(propname);        if (comp == null) {                return;    }    GuiPackage guiPackage = GuiPackage.getInstance();    try {        guiPackage.updateCurrentNode();        TestElement testElement = guiPackage.createTestElement(SaveService.aliasToClass(comp));        JMeterTreeNode parentNode = guiPackage.getCurrentNode();        while (!MenuFactory.canAddTo(parentNode, testElement)) {            parentNode = (JMeterTreeNode) parentNode.getParent();        }        if (parentNode.getParent() == null) {                    } else {            JMeterTreeNode node = guiPackage.getTreeModel().addComponent(testElement, parentNode);            guiPackage.getMainFrame().getTree().setSelectionPath(new TreePath(node.getPath()));        }    } catch (Exception err) {                    }}
1
private String getCurrentKey(ActionEvent actionEvent)
{    String actionCommand = actionEvent.getActionCommand();    if (actionCommand != null) {        return actionCommand;    }    AWTEvent currentEvent = EventQueue.getCurrentEvent();    if (currentEvent instanceof KeyEvent) {        KeyEvent keyEvent = (KeyEvent) currentEvent;        return KeyEvent.getKeyText(keyEvent.getKeyCode());    }        return "NONE";}
1
public void windowClosing(WindowEvent event)
{    ActionRouter.getInstance().actionPerformed(new ActionEvent(this, event.getID(), ActionNames.EXIT));}
0
public void dragEnter(DropTargetDragEvent dtde)
{}
0
public void dragExit(DropTargetEvent dte)
{}
0
public void dragOver(DropTargetDragEvent dtde)
{}
0
public void drop(DropTargetDropEvent dtde)
{    Transferable tr = dtde.getTransferable();    boolean anyFlavourIsJavaFileList = Arrays.stream(tr.getTransferDataFlavors()).anyMatch(DataFlavor::isFlavorJavaFileListType);    if (anyFlavourIsJavaFileList) {        dtde.acceptDrop(DnDConstants.ACTION_COPY_OR_MOVE);        try {            openJmxFilesFromDragAndDrop(tr);        } catch (UnsupportedFlavorException | IOException e) {                    } finally {            dtde.dropComplete(true);        }    }}
1
public boolean openJmxFilesFromDragAndDrop(Transferable tr) throws UnsupportedFlavorException, IOException
{    @SuppressWarnings("unchecked")    List<File> files = (List<File>) tr.getTransferData(DataFlavor.javaFileListFlavor);    if (files.isEmpty()) {        return false;    }    File file = files.get(0);    if (!file.getName().endsWith(".jmx")) {        if (log.isWarnEnabled()) {                    }        return false;    }    ActionEvent fakeEvent = new ActionEvent(this, ActionEvent.ACTION_PERFORMED, ActionNames.OPEN);    LoadDraggedFile.loadProject(fakeEvent, file);    return true;}
1
public void dropActionChanged(DropTargetDragEvent dtde)
{}
0
public void processLogEvent(LogEventObject logEventObject)
{    if (logEventObject.isMoreSpecificThanError()) {        errorOrFatal.incrementAndGet();    }}
0
public void clearData()
{    errorOrFatal.set(0);    SwingUtilities.invokeLater(() -> {        warnIndicator.setForeground(null);        warnIndicator.setText(Integer.toString(errorOrFatal.get()));    });}
0
public void clearData()
{    logPanel.clear();    errorsAndFatalsCounterLogTarget.clearData();}
0
public void actionPerformed(ActionEvent event)
{    if (event.getSource() == warnIndicator) {        ActionRouter.getInstance().doActionNow(new ActionEvent(event.getSource(), event.getID(), ActionNames.LOGGER_PANEL_ENABLE_DISABLE));    }}
0
private void setWindowTitle()
{    Class<?> xtoolkit = Toolkit.getDefaultToolkit().getClass();    if (xtoolkit.getName().equals("sun.awt.X11.XToolkit")) {                try {                        final Field awtAppClassName = xtoolkit.getDeclaredField("awtAppClassName");            awtAppClassName.setAccessible(true);            awtAppClassName.set(null, DEFAULT_APP_NAME);        } catch (NoSuchFieldException | IllegalAccessException nsfe) {            if (log.isWarnEnabled()) {                                            }        }    }}
1
public void updateUndoRedoIcons(boolean canUndo, boolean canRedo)
{    toolbar.updateUndoRedoIcons(canUndo, canRedo);}
0
private void init()
{        setLayout(new BorderLayout(5, 0));            JLabel nameLabel = new JLabel(JMeterUtils.getResString("name"));    nameLabel.setName("name");    nameLabel.setLabelFor(nameField);    add(nameLabel, BorderLayout.WEST);    add(nameField, BorderLayout.CENTER);}
0
public void clearGui()
{    setName(getStaticLabel());}
0
public String getName()
{    /*         * Null check is needed because some implementations of JPanel end up calling         * getName(). This is a bug, which has been reported as:         * http://bugs.java.com/bugdatabase/view_bug.do?bug_id=JDK-8175888         *         * See also         * https://www.securecoding.cert.org/confluence/display/java/MET05-J.+Ensure+that+constructors+do+not+call+overridable+methods         * https://dev.eclipse.org/sonar/coding_rules#rule_key=squid%3AS1699         */    if (nameField != null) {                return nameField.getText();    }        return "";}
0
public void setName(String name)
{    _setName(name);}
0
private void _setName(String name)
{    super.setName(name);    nameField.setText(name);}
0
public void configure(TestElement testElement)
{    setName(testElement.getName());}
0
public JPopupMenu createPopupMenu()
{    return null;}
0
public String getStaticLabel()
{    return JMeterUtils.getResString(getLabelResource());}
0
public String getLabelResource()
{    return LABEL_RESOURCE;}
0
public Collection<String> getMenuCategories()
{    return null;}
0
public TestElement createTestElement()
{    WorkBench wb = new WorkBench();    modifyTestElement(wb);    return wb;}
0
public void modifyTestElement(TestElement wb)
{    wb.setName(getName());    wb.setProperty(new StringProperty(TestElement.GUI_CLASS, this.getClass().getName()));    wb.setProperty(new StringProperty(TestElement.TEST_CLASS, WorkBench.class.getName()));}
0
public String getDocAnchor()
{    return null;}
0
private JPanel createOnErrorPanel()
{    JPanel panel = new JPanel(new GridLayout(4, 2));        panel.setBorder(BorderFactory.createTitledBorder(JMeterUtils.getResString("sampler_on_error_action")));    ButtonGroup group = new ButtonGroup();        continueBox = addRadioButton("sampler_on_error_continue", group, panel);        breakLoopBox = addRadioButton("sampler_on_error_break_loop", group, panel);        startNextThreadLoopBox = addRadioButton("sampler_on_error_start_next_loop", group, panel);        startNextIterationOfCurrentLoopBox = addRadioButton("sampler_on_error_start_next_iteration_current_loop", group, panel);        stopTestBox = addRadioButton("sampler_on_error_stop_test", group, panel);        stopTestNowBox = addRadioButton("sampler_on_error_stop_test_now", group, panel);        stopThrdBox = addRadioButton("sampler_on_error_stop_thread", group, panel);    continueBox.setSelected(true);    return panel;}
0
private JRadioButton addRadioButton(String labelKey, ButtonGroup group, JPanel panel)
{    JRadioButton radioButton = new JRadioButton(JMeterUtils.getResString(labelKey));    group.add(radioButton);    panel.add(radioButton);    return radioButton;}
0
private void init()
{        setLayout(new BorderLayout(5, 0));    add(createOnErrorPanel());}
0
public void configure(int errorAction)
{    stopTestNowBox.setSelected(errorAction == OnErrorTestElement.ON_ERROR_STOPTEST_NOW);    startNextThreadLoopBox.setSelected(errorAction == OnErrorTestElement.ON_ERROR_START_NEXT_THREAD_LOOP);    startNextIterationOfCurrentLoopBox.setSelected(errorAction == OnErrorTestElement.ON_ERROR_START_NEXT_ITERATION_OF_CURRENT_LOOP);    stopTestBox.setSelected(errorAction == OnErrorTestElement.ON_ERROR_STOPTEST);    stopThrdBox.setSelected(errorAction == OnErrorTestElement.ON_ERROR_STOPTHREAD);    continueBox.setSelected(errorAction == OnErrorTestElement.ON_ERROR_CONTINUE);    breakLoopBox.setSelected(errorAction == OnErrorTestElement.ON_ERROR_BREAK_CURRENT_LOOP);}
0
public int getOnErrorSetting()
{    if (stopTestNowBox.isSelected()) {        return OnErrorTestElement.ON_ERROR_STOPTEST_NOW;    }    if (stopTestBox.isSelected()) {        return OnErrorTestElement.ON_ERROR_STOPTEST;    }    if (stopThrdBox.isSelected()) {        return OnErrorTestElement.ON_ERROR_STOPTHREAD;    }    if (startNextThreadLoopBox.isSelected()) {        return OnErrorTestElement.ON_ERROR_START_NEXT_THREAD_LOOP;    }    if (startNextIterationOfCurrentLoopBox.isSelected()) {        return OnErrorTestElement.ON_ERROR_START_NEXT_ITERATION_OF_CURRENT_LOOP;    }    if (breakLoopBox.isSelected()) {        return OnErrorTestElement.ON_ERROR_BREAK_CURRENT_LOOP;    }        return OnErrorTestElement.ON_ERROR_CONTINUE;}
0
private void initDialog()
{    this.getContentPane().setLayout(new BorderLayout());    final int configCount = (SampleSaveConfiguration.SAVE_CONFIG_NAMES.size() / 3) + 1;        JPanel checkPanel = new JPanel(new GridLayout(configCount, 3));    for (final String name : SampleSaveConfiguration.SAVE_CONFIG_NAMES) {        try {            JCheckBox check = new JCheckBox(JMeterUtils.getResString(RESOURCE_PREFIX + name), getSaveState(SampleSaveConfiguration.getterName(name)));            check.addActionListener(this);                        final String actionCommand = SampleSaveConfiguration.setterName(name);            check.setActionCommand(actionCommand);            if (!functors.containsKey(actionCommand)) {                functors.put(actionCommand, new Functor(actionCommand));            }            checkPanel.add(check, BorderLayout.NORTH);        } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {                    }    }    getContentPane().add(checkPanel, BorderLayout.NORTH);        JButton exit = new JButton(JMeterUtils.getResString("done"));    this.getContentPane().add(exit, BorderLayout.SOUTH);    exit.addActionListener(e -> dispose());}
1
protected JRootPane createRootPane()
{    JRootPane rootPane = new JRootPane();    Action escapeAction = new AbstractAction("ESCAPE") {        private static final long serialVersionUID = 2208129319916921772L;        @Override        public void actionPerformed(ActionEvent e) {            setVisible(false);        }    };    InputMap inputMap = rootPane.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);    inputMap.put(KeyStrokes.ESC, escapeAction.getValue(Action.NAME));    rootPane.getActionMap().put(escapeAction.getValue(Action.NAME), escapeAction);    return rootPane;}
0
public void actionPerformed(ActionEvent e)
{    setVisible(false);}
0
public void actionPerformed(ActionEvent e)
{    String action = e.getActionCommand();    Functor f = functors.get(action);    f.invoke(saveConfig, new Object[] { Boolean.valueOf(((JCheckBox) e.getSource()).isSelected()) });}
0
private boolean getSaveState(String methodName) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException
{    Method method = SampleSaveConfiguration.class.getMethod(methodName);    return ((Boolean) method.invoke(saveConfig)).booleanValue();}
0
public SampleSaveConfiguration getSaveConfig()
{    return saveConfig;}
0
public void setSaveConfig(SampleSaveConfiguration saveConfig)
{    this.saveConfig = saveConfig;}
0
public void clear()
{    domain.setText("");    port.setText("");    connectTimeOut.setText("");    responseTimeOut.setText("");}
0
public String getServer()
{    return domain.getText();}
0
public void setServer(String value)
{    domain.setText(value);}
0
public String getPort()
{    return port.getText();}
0
public void setPort(String value)
{    port.setText(value);}
0
public String getConnectTimeout()
{    return connectTimeOut.getText();}
0
public void setConnectTimeout(String value)
{    connectTimeOut.setText(value);}
0
public String getResponseTimeout()
{    return responseTimeOut.getText();}
0
public void setResponseTimeout(String value)
{    responseTimeOut.setText(value);}
0
private void init()
{        setLayout(new BorderLayout(5, 0));        JPanel webServerPanel = new HorizontalPanel();    webServerPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("target_server")));    final JPanel domainPanel = getDomainPanel();    final JPanel portPanel = getPortPanel();    webServerPanel.add(domainPanel, BorderLayout.CENTER);    webServerPanel.add(portPanel, BorderLayout.EAST);    JPanel timeOut = new HorizontalPanel();    timeOut.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("web_server_timeout_title")));    final JPanel connPanel = getConnectTimeOutPanel();    final JPanel reqPanel = getResponseTimeOutPanel();    timeOut.add(connPanel);    timeOut.add(reqPanel);    JPanel webServerTimeoutPanel = new VerticalPanel();    webServerTimeoutPanel.add(webServerPanel, BorderLayout.CENTER);    webServerTimeoutPanel.add(timeOut, BorderLayout.EAST);    JPanel bigPanel = new VerticalPanel();    bigPanel.add(webServerTimeoutPanel);    add(bigPanel);}
0
private JPanel getDomainPanel()
{    domain = new JTextField(20);        JLabel label = new JLabel(JMeterUtils.getResString("web_server_domain"));    label.setLabelFor(domain);    JPanel panel = new JPanel(new BorderLayout(5, 0));    panel.add(label, BorderLayout.WEST);    panel.add(domain, BorderLayout.CENTER);    return panel;}
0
private JPanel getPortPanel()
{    port = new JTextField(4);        JLabel label = new JLabel(JMeterUtils.getResString("web_server_port"));    label.setLabelFor(port);    JPanel panel = new JPanel(new BorderLayout(5, 0));    panel.add(label, BorderLayout.WEST);    panel.add(port, BorderLayout.CENTER);    return panel;}
0
private JPanel getConnectTimeOutPanel()
{    connectTimeOut = new JTextField(4);        JLabel label = new JLabel(JMeterUtils.getResString("web_server_timeout_connect"));    label.setLabelFor(connectTimeOut);    JPanel panel = new JPanel(new BorderLayout(5, 0));    panel.add(label, BorderLayout.WEST);    panel.add(connectTimeOut, BorderLayout.CENTER);    return panel;}
0
private JPanel getResponseTimeOutPanel()
{    responseTimeOut = new JTextField(4);        JLabel label = new JLabel(JMeterUtils.getResString("web_server_timeout_response"));    label.setLabelFor(responseTimeOut);    JPanel panel = new JPanel(new BorderLayout(5, 0));    panel.add(label, BorderLayout.WEST);    panel.add(responseTimeOut, BorderLayout.CENTER);    return panel;}
0
public boolean isEmpty()
{    return edits.isEmpty();}
0
public int size()
{    return edits.size();}
0
public Component getTreeCellRendererComponent(JTree tree, Object value, boolean sel, boolean expanded, boolean leaf, int row, boolean p_hasFocus)
{    JMeterTreeNode node = (JMeterTreeNode) value;    super.getTreeCellRendererComponent(tree, JOrphanUtils.isBlank(node.getName()) ? BLANK : node.getName(), sel, expanded, leaf, row, p_hasFocus);    boolean enabled = node.isEnabled();    ImageIcon ic = node.getIcon(enabled);    if (ic != null) {        if (enabled) {            setIcon(ic);        } else {            setDisabledIcon(ic);        }    } else {        if (        !enabled) {                                    ic = node.getIcon();            if (ic != null) {                setDisabledIcon(ic);            }        }    }    this.setEnabled(enabled);    if (node.isMarkedBySearch()) {        setBorder(RED_BORDER);    } else if (node.isChildrenMarkedBySearch()) {        setBorder(BLUE_BORDER);    } else {        setBorder(null);    }    return this;}
0
public void setModel(JMeterTreeModel m)
{    model = m;}
0
public void setActionHandler(ActionListener ah)
{    actionHandler = ah;}
0
public void setJTree(JTree tree)
{    this.tree = tree;}
0
public JTree getJTree()
{    return tree;}
0
public JMeterTreeNode getCurrentNode()
{    if (currentPath != null) {        if (currentPath.getLastPathComponent() != null) {            return (JMeterTreeNode) currentPath.getLastPathComponent();        }        return (JMeterTreeNode) currentPath.getParentPath().getLastPathComponent();    }    return (JMeterTreeNode) model.getRoot();}
0
public JMeterTreeNode[] getSelectedNodes()
{    TreePath[] paths = tree.getSelectionPaths();    if (paths == null) {        return new JMeterTreeNode[] { getCurrentNode() };    }    JMeterTreeNode[] nodes = new JMeterTreeNode[paths.length];    for (int i = 0; i < paths.length; i++) {        nodes[i] = (JMeterTreeNode) paths[i].getLastPathComponent();    }    return nodes;}
0
public TreePath removedSelectedNode()
{    currentPath = currentPath.getParentPath();    return currentPath;}
0
public void valueChanged(TreeSelectionEvent e)
{        currentPath = e.getNewLeadSelectionPath();                    tree.requestFocusInWindow();        actionHandler.actionPerformed(new ActionEvent(this, 3333, ActionNames.EDIT));}
1
public void mouseClicked(MouseEvent ev)
{}
0
public void mouseReleased(MouseEvent e)
{    GuiPackage.getInstance().getMainFrame().repaint();}
0
public void mouseEntered(MouseEvent e)
{}
0
public void mousePressed(MouseEvent e)
{        MainFrame mainFrame = GuiPackage.getInstance().getMainFrame();        mainFrame.closeMenu();    int selRow = tree.getRowForLocation(e.getX(), e.getY());    if (tree.getPathForLocation(e.getX(), e.getY()) != null) {                currentPath = tree.getPathForLocation(e.getX(), e.getY());    }    if (selRow != -1 && isRightClick(e)) {        if (tree.getSelectionCount() < 2) {            tree.setSelectionPath(currentPath);        }                displayPopUp(e);    }}
1
public void mouseExited(MouseEvent ev)
{}
0
public void keyPressed(KeyEvent e)
{    String actionName = null;    if (KeyStrokes.matches(e, KeyStrokes.COPY)) {        actionName = ActionNames.COPY;    } else if (KeyStrokes.matches(e, KeyStrokes.PASTE)) {        actionName = ActionNames.PASTE;    } else if (KeyStrokes.matches(e, KeyStrokes.CUT)) {        actionName = ActionNames.CUT;    } else if (KeyStrokes.matches(e, KeyStrokes.DUPLICATE)) {        actionName = ActionNames.DUPLICATE;    } else if (KeyStrokes.matches(e, KeyStrokes.ALT_UP_ARROW)) {        actionName = ActionNames.MOVE_UP;    } else if (KeyStrokes.matches(e, KeyStrokes.ALT_DOWN_ARROW)) {        actionName = ActionNames.MOVE_DOWN;    } else if (KeyStrokes.matches(e, KeyStrokes.ALT_LEFT_ARROW)) {        actionName = ActionNames.MOVE_LEFT;    } else if (KeyStrokes.matches(e, KeyStrokes.ALT_RIGHT_ARROW)) {        actionName = ActionNames.MOVE_RIGHT;    } else if (KeyStrokes.matches(e, KeyStrokes.SHIFT_LEFT_ARROW) || KeyStrokes.matches(e, KeyStrokes.COLLAPSE_ALL_SUBTRACT)) {        actionName = ActionNames.COLLAPSE;    } else if (KeyStrokes.matches(e, KeyStrokes.SHIFT_RIGHT_ARROW) || KeyStrokes.matches(e, KeyStrokes.EXPAND_ALL_SUBTRACT)) {        actionName = ActionNames.EXPAND;    }    if (actionName != null) {        final ActionRouter actionRouter = ActionRouter.getInstance();        actionRouter.doActionNow(new ActionEvent(e.getSource(), e.getID(), actionName));        e.consume();    }}
0
public void keyReleased(KeyEvent e)
{}
0
public void keyTyped(KeyEvent e)
{}
0
private boolean isRightClick(MouseEvent e)
{    return e.isPopupTrigger() || (InputEvent.BUTTON2_MASK & e.getModifiers()) > 0 || (InputEvent.BUTTON3_MASK == e.getModifiers());}
0
private void displayPopUp(MouseEvent e)
{    JPopupMenu pop = getCurrentNode().createPopupMenu();    GuiPackage.getInstance().displayPopUp(e, pop);}
0
public List<JMeterTreeNode> getNodesOfType(Class<?> type)
{    List<JMeterTreeNode> nodeList = new LinkedList<>();    traverseAndFind(type, (JMeterTreeNode) this.getRoot(), nodeList);    return nodeList;}
0
public JMeterTreeNode getNodeOf(TestElement userObject)
{    return traverseAndFind(userObject, (JMeterTreeNode) getRoot());}
0
public HashTree addSubTree(HashTree subTree, JMeterTreeNode current) throws IllegalUserActionException
{    for (Object o : subTree.list()) {        TestElement item = (TestElement) o;        if (item instanceof TestPlan) {            TestPlan tp = (TestPlan) item;            current = (JMeterTreeNode) ((JMeterTreeNode) getRoot()).getChildAt(0);            final TestPlan userObject = (TestPlan) current.getUserObject();            userObject.addTestElement(item);            userObject.setName(item.getName());            userObject.setFunctionalMode(tp.isFunctionalMode());            userObject.setSerialized(tp.isSerialized());            addSubTree(subTree.getTree(item), current);        } else if (item instanceof WorkBench) {                        HashTree workbenchTree = subTree.getTree(item);            if (!workbenchTree.isEmpty()) {                moveWorkBenchToTestPlan(current, workbenchTree);            }        } else {            addSubTree(subTree.getTree(item), addComponent(item, current));        }    }    return getCurrentSubTree(current);}
0
public JMeterTreeNode addComponent(TestElement component, JMeterTreeNode node) throws IllegalUserActionException
{    if (node.getUserObject() instanceof AbstractConfigGui) {        throw new IllegalUserActionException("This node cannot hold sub-elements");    }    GuiPackage guiPackage = GuiPackage.getInstance();    if (guiPackage != null) {                guiPackage.updateCurrentNode();        JMeterGUIComponent guicomp = guiPackage.getGui(component);        guicomp.clearGui();        guicomp.configure(component);        guicomp.modifyTestElement(component);                guiPackage.getCurrentGui();        }    JMeterTreeNode newNode = new JMeterTreeNode(component, this);        try {        newNode.setEnabled(component.isEnabled());    } catch (Exception e) {                newNode.setEnabled(true);    }    this.insertNodeInto(newNode, node, node.getChildCount());    return newNode;}
0
public void removeNodeFromParent(JMeterTreeNode node)
{    if (!(node.getUserObject() instanceof TestPlan)) {        super.removeNodeFromParent(node);    }}
0
private void traverseAndFind(Class<?> type, JMeterTreeNode node, List<JMeterTreeNode> nodeList)
{    if (type.isInstance(node.getUserObject())) {        nodeList.add(node);    }    Enumeration<?> enumNode = node.children();    while (enumNode.hasMoreElements()) {        JMeterTreeNode child = (JMeterTreeNode) enumNode.nextElement();        traverseAndFind(type, child, nodeList);    }}
0
private JMeterTreeNode traverseAndFind(TestElement userObject, JMeterTreeNode node)
{    if (userObject == node.getUserObject()) {        return node;    }    Enumeration<?> enumNode = node.children();    while (enumNode.hasMoreElements()) {        JMeterTreeNode child = (JMeterTreeNode) enumNode.nextElement();        JMeterTreeNode result = traverseAndFind(userObject, child);        if (result != null) {            return result;        }    }    return null;}
0
public HashTree getCurrentSubTree(JMeterTreeNode node)
{    ListedHashTree hashTree = new ListedHashTree(node);    Enumeration<?> enumNode = node.children();    while (enumNode.hasMoreElements()) {        JMeterTreeNode child = (JMeterTreeNode) enumNode.nextElement();        hashTree.add(node, getCurrentSubTree(child));    }    return hashTree;}
0
public HashTree getTestPlan()
{    return getCurrentSubTree((JMeterTreeNode) ((JMeterTreeNode) this.getRoot()).getChildAt(0));}
0
public void clearTestPlan()
{    TestElement tp = new TestPlanGui().createTestElement();    clearTestPlan(tp);}
0
public void clearTestPlan(TestElement testPlan)
{        int children = getChildCount(getRoot());    while (children > 0) {        JMeterTreeNode child = (JMeterTreeNode) getChild(getRoot(), 0);        super.removeNodeFromParent(child);        children = getChildCount(getRoot());    }            initTree(testPlan);}
0
private void initTree(TestElement tp)
{        insertNodeInto(new JMeterTreeNode(tp, this), (JMeterTreeNode) getRoot(), 0);                nodeStructureChanged((JMeterTreeNode) getRoot());}
0
private void moveWorkBenchToTestPlan(JMeterTreeNode current, HashTree workbenchTree) throws IllegalUserActionException
{    Object[] workbenchTreeArray = workbenchTree.getArray();    if (GuiPackage.getInstance() != null) {        for (Object node : workbenchTreeArray) {            if (isNonTestElement(node)) {                HashTree subtree = workbenchTree.getTree(node);                workbenchTree.remove(node);                HashTree tree = new HashTree();                tree.add(node);                tree.add(node, subtree);                ((TestElement) node).setProperty(TestElement.ENABLED, false);                addSubTree(tree, current);            }        }    }    if (!workbenchTree.isEmpty()) {        HashTree testFragmentTree = new HashTree();        TestFragmentController testFragmentController = new TestFragmentController();        testFragmentController.setProperty(TestElement.NAME, "WorkBench Test Fragment");        testFragmentController.setProperty(TestElement.GUI_CLASS, TestFragmentControllerGui.class.getName());        testFragmentController.setProperty(TestElement.ENABLED, false);        testFragmentTree.add(testFragmentController);        testFragmentTree.add(testFragmentController, workbenchTree);        addSubTree(testFragmentTree, current);    }}
0
private boolean isNonTestElement(Object node)
{    JMeterTreeNode treeNode = new JMeterTreeNode((TestElement) node, null);    Collection<String> categories = treeNode.getMenuCategories();    if (categories != null) {        for (String category : categories) {            if (MenuFactory.NON_TEST_ELEMENTS.equals(category)) {                return true;            }        }    }    return false;}
0
public boolean isEnabled()
{    return getTestElement().isEnabled();}
0
public void setEnabled(boolean enabled)
{    getTestElement().setEnabled(enabled);    treeModel.ifPresent(tm -> tm.nodeChanged(this));}
0
public List<JMeterTreeNode> getPathToThreadGroup()
{    if (!treeModel.isPresent()) {        return new ArrayList<>();    }    return Arrays.stream(treeModel.get().getPathToRoot(this)).map(node -> (JMeterTreeNode) node).filter(node -> node.getLevel() >= TEST_PLAN_LEVEL).collect(Collectors.toList());}
0
public void setChildrenNodesHaveMatched(boolean tagged)
{    if (childrenMarkedBySearch == tagged) {        return;    }    this.childrenMarkedBySearch = tagged;    treeModel.ifPresent(tm -> tm.nodeChanged(this));}
0
public void setMarkedBySearch(boolean tagged)
{    if (this.markedBySearch == tagged) {        return;    }    this.markedBySearch = tagged;    List<JMeterTreeNode> nodesToParent = getPathToThreadGroup();    for (JMeterTreeNode jMeterTreeNode : nodesToParent) {                if (jMeterTreeNode != this) {            jMeterTreeNode.setChildrenNodesHaveMatched(true);        }    }    treeModel.ifPresent(tm -> tm.nodeChanged(this));}
0
public boolean isMarkedBySearch()
{    return this.markedBySearch;}
0
public boolean isChildrenMarkedBySearch()
{    return this.childrenMarkedBySearch;}
0
public ImageIcon getIcon()
{    return getIcon(true);}
0
public ImageIcon getIcon(boolean enabled)
{    TestElement testElement = getTestElement();    try {        if (testElement instanceof TestBean) {            Class<?> testClass = testElement.getClass();            try {                Image img = Introspector.getBeanInfo(testClass).getIcon(BeanInfo.ICON_COLOR_16x16);                                if (img == null) {                    Object clazz = Introspector.getBeanInfo(testClass).getBeanDescriptor().getValue(TestElement.GUI_CLASS);                    if (clazz == null) {                                                return null;                    }                    return GUIFactory.getIcon(Class.forName((String) clazz), enabled);                }                return new ImageIcon(img);            } catch (IntrospectionException e1) {                                throw new org.apache.jorphan.util.JMeterError(e1);            }        }        return GUIFactory.getIcon(Class.forName(testElement.getPropertyAsString(TestElement.GUI_CLASS)), enabled);    } catch (ClassNotFoundException e) {                return null;    }}
1
public Collection<String> getMenuCategories()
{    try {        return GuiPackage.getInstance().getGui(getTestElement()).getMenuCategories();    } catch (Exception e) {                return null;    }}
1
public JPopupMenu createPopupMenu()
{    try {        return GuiPackage.getInstance().getGui(getTestElement()).createPopupMenu();    } catch (Exception e) {                return null;    }}
1
public TestElement getTestElement()
{    return (TestElement) getUserObject();}
0
public String getStaticLabel()
{    return GuiPackage.getInstance().getGui((TestElement) getUserObject()).getStaticLabel();}
0
public String getDocAnchor()
{    return GuiPackage.getInstance().getGui((TestElement) getUserObject()).getDocAnchor();}
0
public void setName(String name)
{    ((TestElement) getUserObject()).setName(name);}
0
public String getName()
{    return ((TestElement) getUserObject()).getName();}
0
public void nameChanged()
{    treeModel.ifPresent(tm -> tm.nodeChanged(this));}
0
public int getSourceActions(JComponent c)
{    return MOVE;}
0
protected Transferable createTransferable(JComponent c)
{    this.nodesForRemoval = null;    JTree tree = (JTree) c;    TreePath[] paths = tree.getSelectionPaths();    if (paths != null) {                sortTreePathByRow(paths, tree);                boolean[] toRemove = new boolean[paths.length];        int size = paths.length;        for (int i = 0; i < paths.length; i++) {            for (int j = 0; j < paths.length; j++) {                if (i != j && ((JMeterTreeNode) paths[i].getLastPathComponent()).isNodeAncestor((JMeterTreeNode) paths[j].getLastPathComponent())) {                    toRemove[i] = true;                    size--;                    break;                }            }        }                JMeterTreeNode[] nodes = new JMeterTreeNode[size];        size = 0;        for (int i = 0; i < paths.length; i++) {            if (!toRemove[i]) {                JMeterTreeNode node = (JMeterTreeNode) paths[i].getLastPathComponent();                nodes[size++] = node;            }        }        return new NodesTransferable(nodes);    }    return null;}
0
private static void sortTreePathByRow(TreePath[] paths, final JTree tree)
{    Comparator<TreePath> cp = new Comparator<TreePath>() {        @Override        public int compare(TreePath o1, TreePath o2) {            int row1 = tree.getRowForPath(o1);            int row2 = tree.getRowForPath(o2);            return row1 < row2 ? -1 : (row1 == row2 ? 0 : 1);        }    };    Arrays.sort(paths, cp);}
0
public int compare(TreePath o1, TreePath o2)
{    int row1 = tree.getRowForPath(o1);    int row2 = tree.getRowForPath(o2);    return row1 < row2 ? -1 : (row1 == row2 ? 0 : 1);}
0
protected void exportDone(JComponent source, Transferable data, int action)
{    if (this.nodesForRemoval != null && ((action & MOVE) == MOVE)) {        GuiPackage guiInstance = GuiPackage.getInstance();        for (JMeterTreeNode jMeterTreeNode : nodesForRemoval) {            guiInstance.getTreeModel().removeNodeFromParent(jMeterTreeNode);        }        nodesForRemoval = null;    }}
0
public boolean canImport(TransferHandler.TransferSupport support)
{    if (!support.isDrop()) {        return false;    }        DataFlavor[] flavors = support.getDataFlavors();    for (DataFlavor flavor : flavors) {                if (flavor.isFlavorJavaFileListType()) {            return true;        }    }        if (!support.isDataFlavorSupported(nodeFlavor)) {        return false;    }        int action = support.getDropAction();    if (action != MOVE) {        return false;    }    support.setShowDropLocation(true);        JTree.DropLocation dl = (JTree.DropLocation) support.getDropLocation();    TreePath dest = dl.getPath();    JMeterTreeNode target = (JMeterTreeNode) dest.getLastPathComponent();        if (target.isRoot()) {        return false;    }    JMeterTreeNode[] nodes = getDraggedNodes(support.getTransferable());    if (nodes == null || nodes.length == 0) {        return false;    }    for (JMeterTreeNode node : nodes) {        if (target == node) {            return false;        }                if (node.getChildCount() > 0 && target.isNodeAncestor(node)) {            return false;        }    }        return MenuFactory.canAddTo(target, nodes);}
0
public boolean importData(TransferHandler.TransferSupport support)
{    if (!canImport(support)) {        return false;    }        GuiPackage guiInstance = GuiPackage.getInstance();    DataFlavor[] flavors = support.getDataFlavors();    Transferable t = support.getTransferable();    for (DataFlavor flavor : flavors) {                if (flavor.isFlavorJavaFileListType()) {            try {                return guiInstance.getMainFrame().openJmxFilesFromDragAndDrop(t);            } catch (Exception e) {                            }            return false;        }    }        JMeterTreeNode[] nodes = getDraggedNodes(t);    if (nodes == null || nodes.length == 0) {        return false;    }        JTree.DropLocation dl = (JTree.DropLocation) support.getDropLocation();    TreePath dest = dl.getPath();    JMeterTreeNode target = (JMeterTreeNode) dest.getLastPathComponent();    nodesForRemoval = new ArrayList<>();    int index = dl.getChildIndex();    TreePath[] pathsToSelect = new TreePath[nodes.length];    int pathPosition = 0;    JMeterTreeModel treeModel = guiInstance.getTreeModel();    for (JMeterTreeNode node : nodes) {        if (index == -1) {                        index = target.getChildCount();        }                                        JMeterTreeNode copy = (JMeterTreeNode) node.clone();                Enumeration<?> enumFrom = node.children();        List<JMeterTreeNode> tmp = new ArrayList<>();        while (enumFrom.hasMoreElements()) {            JMeterTreeNode child = (JMeterTreeNode) enumFrom.nextElement();            tmp.add(child);        }        for (JMeterTreeNode jMeterTreeNode : tmp) {            copy.add(jMeterTreeNode);        }        treeModel.insertNodeInto(copy, target, index++);        nodesForRemoval.add(node);        pathsToSelect[pathPosition++] = new TreePath(treeModel.getPathToRoot(copy));    }    TreePath treePath = new TreePath(target.getPath());        JTree tree = (JTree) support.getComponent();    tree.expandPath(treePath);    tree.setSelectionPaths(pathsToSelect);    return true;}
1
private JMeterTreeNode[] getDraggedNodes(Transferable t)
{    JMeterTreeNode[] nodes = null;    try {        nodes = (JMeterTreeNode[]) t.getTransferData(nodeFlavor);    } catch (Exception e) {            }    return nodes;}
1
public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException
{    if (!isDataFlavorSupported(flavor)) {        throw new UnsupportedFlavorException(flavor);    }    return nodes;}
0
public DataFlavor[] getTransferDataFlavors()
{    return jMeterTreeNodeDataFlavors;}
0
public boolean isDataFlavorSupported(DataFlavor flavor)
{    return nodeFlavor.equals(flavor);}
0
public static TreeState from(GuiPackage guiPackage)
{    if (guiPackage == null) {        return NOTHING;    }    MainFrame mainframe = guiPackage.getMainFrame();    if (mainframe != null) {        final JTree tree = mainframe.getTree();        int savedSelected = tree.getMinSelectionRow();        ArrayList<Integer> savedExpanded = new ArrayList<>();        for (int rowN = 0; rowN < tree.getRowCount(); rowN++) {            if (tree.isExpanded(rowN)) {                savedExpanded.add(rowN);            }        }        return new TreeStateImpl(savedSelected, savedExpanded);    }    return NOTHING;}
0
public void restore(GuiPackage guiInstance)
{    MainFrame mainframe = guiInstance.getMainFrame();    if (mainframe == null) {                return;    }    final JTree tree = mainframe.getTree();    if (!savedExpanded.isEmpty()) {        savedExpanded.forEach(tree::expandRow);    } else {        tree.expandRow(0);    }    tree.setSelectionRow(savedSelected);}
0
public void clear()
{    if (working) {        return;    }        manager.discardAllEdits();    if (isTransaction()) {        if (log.isWarnEnabled()) {                    }        transactions.clear();    }    lastKnownState = null;    notifyListeners();}
1
public void add(JMeterTreeModel treeModel, String comment)
{    if (!isEnabled()) {                return;    }        if (working) {                return;    }    JMeterTreeNode root = (JMeterTreeNode) treeModel.getRoot();    if (root.getChildCount() < 1) {                return;    }    String name = root.getName();        working = true;        HashTree tree = treeModel.getCurrentSubTree((JMeterTreeNode) treeModel.getRoot());        tree = (HashTree) tree.getTree(tree.getArray()[0]).clone();        HashTree copy = UndoCommand.convertAndCloneSubTree(tree);    GuiPackage guiPackage = GuiPackage.getInstance();        boolean dirty = guiPackage != null ? guiPackage.isDirty() : false;    addEdit(new UndoHistoryItem(copy, comment, TreeState.from(guiPackage), dirty));    working = false;}
1
public void undo()
{    if (!canUndo()) {                return;    }    manager.undo();}
1
public void redo()
{    if (!canRedo()) {                return;    }    manager.redo();}
1
private void reload(UndoHistoryItem z)
{    final GuiPackage guiInstance = GuiPackage.getInstance();    JMeterTreeModel acceptorModel = guiInstance.getTreeModel();    try {                loadHistoricalTree(acceptorModel, guiInstance, z.getTree());    } finally {                z.getTreeState().restore(guiInstance);        guiInstance.setDirty(z.isDirty());    }    setLastKnownState(z);        guiInstance.updateCurrentGui();    guiInstance.getMainFrame().repaint();    notifyListeners();}
0
private void loadHistoricalTree(JMeterTreeModel acceptorModel, GuiPackage guiInstance, HashTree newModel)
{    acceptorModel.removeTreeModelListener(this);    working = true;    try {        guiInstance.getTreeModel().clearTestPlan();        guiInstance.addSubTree(newModel);    } catch (Exception ex) {            } finally {        acceptorModel.addTreeModelListener(this);        working = false;    }}
1
public boolean canRedo()
{    return manager.canRedo();}
0
public boolean canUndo()
{    return manager.canUndo();}
0
public void treeNodesChanged(TreeModelEvent tme)
{    String name = ((JMeterTreeNode) tme.getTreePath().getLastPathComponent()).getName();        final JMeterTreeModel sender = (JMeterTreeModel) tme.getSource();    add(sender, "Node changed " + name);}
1
public void treeNodesInserted(TreeModelEvent tme)
{    String name = ((JMeterTreeNode) tme.getTreePath().getLastPathComponent()).getName();        final JMeterTreeModel sender = (JMeterTreeModel) tme.getSource();    add(sender, "Add " + name);}
1
public void treeNodesRemoved(TreeModelEvent tme)
{    String name = ((JMeterTreeNode) tme.getTreePath().getLastPathComponent()).getName();        add((JMeterTreeModel) tme.getSource(), "Remove " + name);}
1
public void treeStructureChanged(TreeModelEvent tme)
{        add((JMeterTreeModel) tme.getSource(), "Complex Change");}
1
public static boolean isEnabled()
{    return HISTORY_SIZE > 0;}
0
public void registerHistoryListener(HistoryListener listener)
{    listeners.add(listener);}
0
private void notifyListeners()
{    for (HistoryListener listener : listeners) {        listener.notifyChangeInHistory(this);    }}
0
private void addEdit(UndoHistoryItem item)
{    if (lastKnownState != null) {        GlobalUndoableEdit edit = new GlobalUndoableEdit(item, lastKnownState, this::reload);        addEdit(edit);    } else {            }    lastKnownState = item;}
1
private void addEdit(UndoableEdit edit)
{    if (isTransaction()) {        transactions.peek().addEdit(edit);        } else {        manager.addEdit(edit);        notifyListeners();    }}
0
 void endUndoTransaction()
{    if (!isEnabled()) {        return;    }    if (!isTransaction()) {                return;    }    SimpleCompoundEdit edit = transactions.pop();    edit.end();    if (!edit.isEmpty()) {        addEdit(edit);    }}
1
 void beginUndoTransaction()
{    if (isEnabled()) {        transactions.add(new SimpleCompoundEdit());    }}
0
 boolean isTransaction()
{    return !transactions.isEmpty();}
0
private void setLastKnownState(UndoHistoryItem previous)
{    this.lastKnownState = previous;}
0
public boolean isDirty()
{    return dirty;}
0
public TreeState getTreeState()
{    return treeState;}
0
public HashTree getTree()
{                TreeCloner cloner = new TreeCloner(false);    tree.traverse(cloner);    return cloner.getClonedTree();}
0
public String getComment()
{    return comment;}
0
public static Box wrap(JCheckBox cb)
{    Box b = Box.createHorizontalBox();    b.add(cb);    return b;}
0
protected JRootPane createRootPane()
{    JRootPane rootPane = new JRootPane();    Action escapeAction = new AbstractAction("ESCAPE") {        /**         */        private static final long serialVersionUID = 2208129319916921772L;        @Override        public void actionPerformed(ActionEvent e) {            setVisible(false);        }    };    InputMap inputMap = rootPane.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);    inputMap.put(KeyStrokes.ESC, escapeAction.getValue(Action.NAME));    rootPane.getActionMap().put(escapeAction.getValue(Action.NAME), escapeAction);    return rootPane;}
0
public void actionPerformed(ActionEvent e)
{    setVisible(false);}
0
public static JFileChooser promptToOpenFile()
{    return promptToOpenFile((String) null);}
0
public static JFileChooser promptToOpenFile(String existingFileName)
{    return promptToOpenFile(new String[0], existingFileName);}
0
public static JFileChooser promptToOpenFile(String existingFileName, boolean onlyDirectories)
{    return promptToOpenFile(new String[0], existingFileName, onlyDirectories);}
0
public static JFileChooser promptToOpenFile(String[] exts)
{    return promptToOpenFile(exts, null);}
0
public static JFileChooser promptToOpenFile(String[] exts, String existingFileName)
{    return promptToOpenFile(exts, existingFileName, false);}
0
public static JFileChooser promptToOpenFile(String[] exts, String existingFileName, boolean onlyDirectories)
{    return promptToOpenFile(GuiPackage.getInstance().getMainFrame(), exts, existingFileName, onlyDirectories);}
0
public static JFileChooser promptToOpenFile(Component parentComponent, String[] exts, String existingFileName, boolean onlyDirectories)
{    if (onlyDirectories) {        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);    } else {        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);    }    if (!StringUtils.isEmpty(existingFileName)) {        File existingFileStart = new File(existingFileName);        if (existingFileStart.exists() && existingFileStart.canRead()) {            jfc.setCurrentDirectory(new File(existingFileName));        }    } else if (lastJFCDirectory == null) {                String start = System.getProperty("user.dir", "");        if (start.length() > 0) {            jfc.setCurrentDirectory(new File(start));        }    }    clearFileFilters();    if (exts != null && exts.length > 0) {        JMeterFileFilter currentFilter = new JMeterFileFilter(exts);        jfc.addChoosableFileFilter(currentFilter);        jfc.setAcceptAllFileFilterUsed(true);        jfc.setFileFilter(currentFilter);    }    if (lastJFCDirectory == null) {                lastJFCDirectory = System.getProperty("user.dir", "");    }    jfc.setCurrentDirectory(new File(lastJFCDirectory));    int retVal = jfc.showOpenDialog(parentComponent);    lastJFCDirectory = jfc.getCurrentDirectory().getAbsolutePath();    if (retVal == JFileChooser.APPROVE_OPTION) {        return jfc;    }    return null;}
0
private static void clearFileFilters()
{    FileFilter[] filters = jfc.getChoosableFileFilters();    for (FileFilter filter : filters) {        jfc.removeChoosableFileFilter(filter);    }}
0
public static JFileChooser promptToSaveFile(String filename)
{    return promptToSaveFile(filename, null);}
0
public static JFileChooser promptToSaveFile(String filename, String[] extensions)
{    if (lastJFCDirectory == null) {                String start = System.getProperty("user.dir", "");        if (start.length() > 0) {            jfc = new JFileChooser(new File(start));        }        lastJFCDirectory = jfc.getCurrentDirectory().getAbsolutePath();    }        String ext = ".jmx";    if (filename != null) {        jfc.setDialogTitle(filename);        jfc.setSelectedFile(filename.lastIndexOf(File.separator) > 0 ? new File(filename) : new File(lastJFCDirectory, filename));        int i = -1;        if ((i = filename.lastIndexOf('.')) > -1) {                        ext = filename.substring(i);        }    }    clearFileFilters();    if (extensions != null) {        jfc.addChoosableFileFilter(new JMeterFileFilter(extensions));    } else {        jfc.addChoosableFileFilter(new JMeterFileFilter(new String[] { ext }));    }    int retVal = jfc.showSaveDialog(GuiPackage.getInstance().getMainFrame());    jfc.setDialogTitle(null);    lastJFCDirectory = jfc.getCurrentDirectory().getAbsolutePath();    if (retVal == JFileChooser.APPROVE_OPTION) {        return jfc;    }    return null;}
0
public static String getLastJFCDirectory()
{    return lastJFCDirectory;}
0
public static void setLastJFCDirectory(String lastJFCDirectory)
{    FileDialoger.lastJFCDirectory = lastJFCDirectory;}
0
public void addChangeListener(ChangeListener l)
{    listeners.add(l);}
0
private void init()
{        this.setLayout(new BorderLayout(0, 5));    setBorder(BorderFactory.createEmptyBorder(5, 0, 5, 5));    JLabel jtitle = new JLabel(title);    HorizontalPanel buttons = new HorizontalPanel();    buttons.add(jtitle);    buttons.add(browse);    buttons.add(delete);    buttons.add(clear);    add(buttons, BorderLayout.NORTH);    this.initializeTableModel();    files = new JTable(tableModel);    JMeterUtils.applyHiDPI(files);    files.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);    files.revalidate();    JScrollPane scrollpane = new JScrollPane(files);    scrollpane.setPreferredSize(new Dimension(100, 80));    add(scrollpane, BorderLayout.CENTER);        browse.setActionCommand(ACTION_BROWSE);    browse.addActionListener(this);    clear.addActionListener(this);    delete.addActionListener(this);}
0
public void enableFile(boolean enable)
{    browse.setEnabled(enable);    files.setEnabled(false);}
0
public void addFilename(String f)
{    tableModel.addRow(f);}
0
public void clearFiles()
{    tableModel.clearData();}
0
public void setFiles(String[] files)
{    this.clearFiles();    for (String file : files) {        addFilename(file);    }}
0
public String[] getFiles()
{    GuiUtils.stopTableEditing(files);    String[] filesArray = new String[tableModel.getRowCount()];    for (int idx = 0; idx < filesArray.length; idx++) {        filesArray[idx] = (String) tableModel.getValueAt(idx, 0);    }    return filesArray;}
0
protected void deleteFile()
{            int rowSelected = files.getSelectedRow();    if (rowSelected >= 0) {        tableModel.removeRow(rowSelected);        tableModel.fireTableDataChanged();    }}
0
private void fireFileChanged()
{    for (ChangeListener cl : listeners) {        cl.stateChanged(new ChangeEvent(this));    }}
0
protected void initializeTableModel()
{    tableModel = new ObjectTableModel(new String[] { JMeterUtils.getResString(LABEL_LIBRARY) },     new Functor[0],     new Functor[0], new Class[] { String.class });}
0
public void actionPerformed(ActionEvent e)
{    if (e.getSource() == clear) {        this.clearFiles();    } else if (e.getActionCommand().equals(ACTION_BROWSE)) {        JFileChooser chooser = new JFileChooser();                String start = System.getProperty("user.dir", "");        chooser.setCurrentDirectory(new File(start));        chooser.setFileFilter(new JMeterFileFilter(new String[] { filetype }));        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);        chooser.setMultiSelectionEnabled(true);        chooser.showOpenDialog(GuiPackage.getInstance().getMainFrame());        File[] cfiles = chooser.getSelectedFiles();        if (cfiles != null) {            for (File cfile : cfiles) {                this.addFilename(cfile.getPath());            }            fireFileChanged();        }    } else if (e.getSource() == delete) {        this.deleteFile();    } else {        fireFileChanged();    }}
0
private void init()
{        setBorder(BorderFactory.createTitledBorder(title));}
0
public final void addChangeListener(ChangeListener l)
{    listeners.add(l);}
0
private void init()
{        add(label);    add(filename);    filename.addActionListener(this);    browse.setFont(FONT_SMALL);    add(browse);    browse.setActionCommand(ACTION_BROWSE);    browse.addActionListener(this);}
0
public void clearGui()
{        filename.setText("");}
0
public void enableFile(boolean enable)
{    browse.setEnabled(enable);    filename.setEnabled(enable);}
0
public String getFilename()
{    return filename.getText();}
0
public void setFilename(String f)
{    filename.setText(f);}
0
private void fireFileChanged()
{    for (ChangeListener cl : listeners) {        cl.stateChanged(new ChangeEvent(this));    }}
0
public void actionPerformed(ActionEvent e)
{    if (e.getActionCommand().equals(ACTION_BROWSE)) {        JFileChooser chooser;        if (filetypes == null || filetypes.length == 0) {            chooser = FileDialoger.promptToOpenFile(filename.getText(), onlyDirectories);        } else {            chooser = FileDialoger.promptToOpenFile(filetypes, filename.getText(), onlyDirectories);        }        if (chooser != null && chooser.getSelectedFile() != null) {            filename.setText(chooser.getSelectedFile().getPath());            fireFileChanged();        }    } else {        fireFileChanged();    }}
0
public static void requestFocus(final Component comp)
{    SwingUtilities.invokeLater(comp::requestFocusInWindow);}
0
public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
{    if (table != null) {        JTableHeader header = table.getTableHeader();        if (header != null) {            setForeground(header.getForeground());            setBackground(header.getBackground());            setFont(header.getFont());        }        setText(getText(value, row, column));        setBorder(UIManager.getBorder("TableHeader.cellBorder"));        setHorizontalAlignment(SwingConstants.CENTER);    }    return this;}
0
protected String getText(Object value, int row, int column)
{    return getText(value, row, column, null);}
0
 static String getText(Object value, int row, int column, Object[][] columnsMsgParameters)
{    if (value == null) {        return "";    }    String label = value.toString();    return JMeterUtils.getResString(label, label);}
0
public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
{    if (delegate instanceof DefaultTableCellRenderer) {        DefaultTableCellRenderer tr = (DefaultTableCellRenderer) delegate;        if (table != null) {            JTableHeader header = table.getTableHeader();            if (header != null) {                tr.setForeground(header.getForeground());                tr.setBackground(header.getBackground());                tr.setFont(header.getFont());            }        }        tr.setBorder(UIManager.getBorder("TableHeader.cellBorder"));        tr.setHorizontalAlignment(SwingConstants.CENTER);    }    return delegate.getTableCellRendererComponent(table, HeaderAsPropertyRenderer.getText(value, row, column, null), isSelected, hasFocus, row, column);}
0
public static void setupDefaultRenderer(JTable table)
{    TableCellRenderer defaultRenderer = table.getTableHeader().getDefaultRenderer();    HeaderAsPropertyRendererWrapper newRenderer = new HeaderAsPropertyRendererWrapper(defaultRenderer);    table.getTableHeader().setDefaultRenderer(newRenderer);}
0
public static void setupDefaultRenderer(JTable table, Object[][] columnsMsgParameters)
{    setupDefaultRenderer(table);}
0
public Component add(Component c)
{        if (hgap > 0 && subPanel.getComponentCount() > 0) {        subPanel.add(Box.createHorizontalStrut(hgap));    }    if (c instanceof JComponent) {        ((JComponent) c).setAlignmentY(verticalAlign);    }    return subPanel.add(c);}
0
public String getActionNameResolve()
{    final String aName;    try {        aName = (String) (ActionNames.class.getField(this.actionName).get(null));    } catch (Exception e) {                                return this.actionName;    }    return aName;}
1
public String getI18nKey()
{    return i18nKey;}
0
public String getActionName()
{    return actionName;}
0
public String getIconPath()
{    return iconPath;}
0
public String getIconPathPressed()
{    return iconPathPressed;}
0
public void setDate(Date date)
{    setText(dateFormat.format(date));}
0
public Date getDate()
{    try {        return dateFormat.parse(getText());    } catch (ParseException e) {        return new Date();    }}
0
private static int posToField(int pos)
{    if (pos >= FIELD_POSITIONS.length) {                        pos = FIELD_POSITIONS.length - 1;    }    return FIELD_POSITIONS[pos];}
0
private Calendar parseDate(String datetime)
{    Calendar c = Calendar.getInstance();    try {        Date dat = dateFormat.parse(datetime);        c.setTime(dat);    } catch (ParseException e) {        }    return c;}
0
private void update(int addend, boolean shifted)
{    Calendar c = parseDate(getText());    int pos = getCaretPosition();    int field = posToField(pos);    if (shifted) {        c.roll(field, true);    } else {        c.add(field, addend);    }    String newDate = dateFormat.format(c.getTime());    setText(newDate);    if (pos > newDate.length()) {        pos = newDate.length();    }    final int newPosition = pos;    SwingUtilities.invokeLater(() -> setCaretPosition(newPosition));}
0
public void keyPressed(KeyEvent e)
{    if (e.getKeyCode() == KeyEvent.VK_UP) {        update(1, e.isShiftDown());    } else if (e.getKeyCode() == KeyEvent.VK_DOWN) {        update(-1, e.isShiftDown());    }}
0
public void focusGained(FocusEvent e)
{}
0
public void focusLost(FocusEvent e)
{    if (getText() == null || getText().isEmpty()) {        return;    }    try {        dateFormat.parse(getText());    } catch (ParseException e1) {        requestFocusInWindow();    }}
0
private void init(String[] resources, String selected)
{    this.add(mLabel);    initButtonGroup(resources, selected);}
0
private void initButtonGroup(String[] resources, String selected)
{    for (String resource : resources) {        JRadioButton btn = new JRadioButton(JMeterUtils.getResString(resource));        btn.setActionCommand(resource);        btn.addActionListener(this);                this.bGroup.add(btn);                this.add(btn);        if (selected != null && selected.equals(resource)) {            btn.setSelected(true);        }    }}
0
public void resetButtons(String[] resources, String selected)
{    Enumeration<AbstractButton> buttons = bGroup.getElements();    List<AbstractButton> buttonsToRemove = new ArrayList<>(this.bGroup.getButtonCount());    while (buttons.hasMoreElements()) {        AbstractButton abstractButton = buttons.nextElement();        buttonsToRemove.add(abstractButton);    }    for (AbstractButton abstractButton : buttonsToRemove) {        abstractButton.removeActionListener(this);        bGroup.remove(abstractButton);    }    for (AbstractButton abstractButton : buttonsToRemove) {        this.remove(abstractButton);    }    initButtonGroup(resources, selected);}
0
public String getText()
{    return this.bGroup.getSelection().getActionCommand();}
0
public void setText(String resourceName)
{    Enumeration<AbstractButton> en = this.bGroup.getElements();    while (en.hasMoreElements()) {        ButtonModel model = en.nextElement().getModel();        if (model.getActionCommand().equals(resourceName)) {            this.bGroup.setSelected(model, true);        } else {            this.bGroup.setSelected(model, false);        }    }}
0
public final void setLabel(String labelResource)
{    this.mLabel.setText(JMeterUtils.getResString(labelResource));}
0
public void addChangeListener(ChangeListener pChangeListener)
{    this.mChangeListeners.add(pChangeListener);}
0
private void notifyChangeListeners()
{    ChangeEvent ce = new ChangeEvent(this);    for (ChangeListener mChangeListener : mChangeListeners) {        mChangeListener.stateChanged(ce);    }}
0
public List<JComponent> getComponentList()
{    List<JComponent> comps = new LinkedList<>();    comps.add(mLabel);    Enumeration<AbstractButton> en = this.bGroup.getElements();    while (en.hasMoreElements()) {        comps.add(en.nextElement());    }    return comps;}
0
public void actionPerformed(ActionEvent e)
{    this.notifyChangeListeners();}
0
public void setFileSaveEnabled(boolean enabled)
{    if (fileSaveAs != null) {        fileSaveAs.setEnabled(enabled);    }}
0
public void setFileLoadEnabled(boolean enabled)
{    if (fileLoad != null) {        fileLoad.setEnabled(enabled);    }    if (fileMerge != null) {        fileMerge.setEnabled(enabled);    }}
0
public void setFileRevertEnabled(boolean enabled)
{    if (fileRevert != null) {        fileRevert.setEnabled(enabled);    }}
0
public void setProjectFileLoaded(String file)
{    if (fileLoadRecentFiles != null && file != null) {        LoadRecentProject.updateRecentFileMenuItems(fileLoadRecentFiles, file);        recentFilesOpen.setEnabled(true);    }}
0
public void setEditEnabled(boolean enabled)
{    if (editMenu != null) {        editMenu.setEnabled(enabled);    }}
0
public void setEditAddMenu(JMenu menu)
{        if (editAdd != null) {        editMenu.remove(editAdd);    }        editAdd = menu;    editMenu.insert(editAdd, 0);}
0
public void setEditMenu(JPopupMenu menu)
{    if (menu != null) {        editMenu.removeAll();        for (Component comp : menu.getComponents()) {            editMenu.add(comp);        }        editMenu.setEnabled(true);    } else {        editMenu.setEnabled(false);    }}
0
public void setEditAddEnabled(boolean enabled)
{        if (editAdd != null) {        editAdd.setEnabled(enabled);    }                setEditEnabled(enabled);}
0
public void createMenuBar()
{    this.menuCreators = findMenuCreators();    makeFileMenu();    makeEditMenu();    makeRunMenu();    makeSearchMenu();    makeOptionsMenu();    makeToolsMenu();    makeHelpMenu();    this.add(fileMenu);    this.add(editMenu);    this.add(searchMenu);    this.add(runMenu);    this.add(optionsMenu);    this.add(toolsMenu);    menuCreators.stream().map(MenuCreator::getTopLevelMenus).flatMap(Arrays::stream).forEachOrdered(this::add);    this.add(helpMenu);}
0
private List<MenuCreator> findMenuCreators()
{    List<MenuCreator> creators = new ArrayList<>();    try {        List<String> listClasses = ClassFinder.findClassesThatExtend(JMeterUtils.getSearchPaths(), new Class[] { MenuCreator.class });        for (String strClassName : listClasses) {            try {                                Class<?> commandClass = Class.forName(strClassName);                if (!Modifier.isAbstract(commandClass.getModifiers())) {                                        MenuCreator creator = (MenuCreator) commandClass.getDeclaredConstructor().newInstance();                    creators.add(creator);                }            } catch (Exception e) {                            }        }    } catch (IOException e) {            }    return creators;}
1
private void makeHelpMenu()
{        helpMenu = makeMenuRes("help", 'H');        JMenuItem contextHelp = makeMenuItemRes("help", 'H', ActionNames.HELP, KeyStrokes.HELP);        JMenuItem whatClass = makeMenuItemRes("help_node", 'W', ActionNames.WHAT_CLASS, KeyStrokes.WHAT_CLASS);        JMenuItem setDebug = makeMenuItemRes("debug_on", ActionNames.DEBUG_ON, KeyStrokes.DEBUG_ON);        JMenuItem resetDebug = makeMenuItemRes("debug_off", ActionNames.DEBUG_OFF, KeyStrokes.DEBUG_OFF);        JMenu usefulLinks = makeMenuRes("useful_links");    usefulLinks.add(makeMenuItemRes("link_release_notes", ActionNames.LINK_RELEASE_NOTES));    usefulLinks.add(makeMenuItemRes("link_bug_tracker", ActionNames.LINK_BUG_TRACKER));    usefulLinks.add(makeMenuItemRes("link_comp_ref", ActionNames.LINK_COMP_REF));    usefulLinks.add(makeMenuItemRes("link_func_ref", ActionNames.LINK_FUNC_REF));    usefulLinks.add(makeMenuItemRes("link_nightly_build", ActionNames.LINK_NIGHTLY_BUILD));    JMenuItem helpAbout = makeMenuItemRes("about", 'A', ActionNames.ABOUT);    helpMenu.add(contextHelp);    helpMenu.addSeparator();    helpMenu.add(whatClass);    helpMenu.add(setDebug);    helpMenu.add(resetDebug);    addPluginsMenuItems(helpMenu, menuCreators, MENU_LOCATION.HELP);    helpMenu.addSeparator();    helpMenu.add(usefulLinks);    helpMenu.addSeparator();    helpMenu.add(helpAbout);}
0
private void makeToolsMenu()
{        toolsMenu = makeMenuRes("tools", 'T');        JMenuItem heapDump = makeMenuItemRes("heap_dump", ActionNames.HEAP_DUMP);        JMenuItem threadDump = makeMenuItemRes("thread_dump", ActionNames.THREAD_DUMP);    toolsMenu.add(heapDump);    toolsMenu.add(threadDump);    toolsMenu.addSeparator();    toolsMenu.add(makeMenuItemRes("function_dialog_menu_item", 'F', ActionNames.FUNCTIONS, KeyStrokes.FUNCTIONS));    addPluginsMenuItems(toolsMenu, menuCreators, MENU_LOCATION.TOOLS);}
0
private void makeOptionsMenu()
{        optionsMenu = makeMenuRes("option", 'O');    optionsMenu.add(createLaFMenu());        JCheckBoxMenuItem menuLoggerPanel = makeCheckBoxMenuItemRes("menu_logger_panel", ActionNames.LOGGER_PANEL_ENABLE_DISABLE);    GuiPackage guiInstance = GuiPackage.getInstance();    if (guiInstance != null) {                guiInstance.setMenuItemLoggerPanel(menuLoggerPanel);    }    optionsMenu.add(menuLoggerPanel);        JMenu menuLoggerLevel = makeMenuRes("menu_logger_level");    JMenuItem menuItem;    String levelString;    for (Level level : Level.values()) {        levelString = level.toString();        menuItem = new JMenuItem(levelString);        menuItem.addActionListener(ActionRouter.getInstance());        menuItem.setActionCommand(ActionNames.LOG_LEVEL_PREFIX + levelString);                menuItem.setToolTipText(levelString);        menuLoggerLevel.add(menuItem);    }    optionsMenu.add(menuLoggerLevel);    if (SSLManager.isSSLSupported()) {        optionsMenu.add(makeMenuItemRes("sslmanager", 'S', ActionNames.SSL_MANAGER, KeyStrokes.SSL_MANAGER));    }    optionsMenu.add(makeLanguageMenu());    optionsMenu.add(makeMenuItemRes("menu_collapse_all", 'A', ActionNames.COLLAPSE_ALL, KeyStrokes.COLLAPSE_ALL));    optionsMenu.add(makeMenuItemRes("menu_expand_all", 'X', ActionNames.EXPAND_ALL, KeyStrokes.EXPAND_ALL));    optionsMenu.add(makeMenuItemRes("menu_zoom_in", 'I', ActionNames.ZOOM_IN));    optionsMenu.add(makeMenuItemRes("menu_zoom_out", 'U', ActionNames.ZOOM_OUT));        JCheckBoxMenuItem saveBeforeRun = makeCheckBoxMenuItemRes("menu_save_before_run", ActionNames.SAVE_BEFORE_RUN);    if (guiInstance != null) {        saveBeforeRun.setSelected(guiInstance.shouldSaveBeforeRunByPreference());        guiInstance.setMenuItemSaveBeforeRunPanel(saveBeforeRun);    }    optionsMenu.add(saveBeforeRun);    addPluginsMenuItems(optionsMenu, menuCreators, MENU_LOCATION.OPTIONS);}
0
private JMenu createLaFMenu()
{    JMenu lafMenu = makeMenuRes("appearance", 'L');    for (LookAndFeelInfo laf : getAllLAFs()) {        JMenuItem menuItem = new JMenuItem(laf.getName());        menuItem.addActionListener(ActionRouter.getInstance());        menuItem.setActionCommand(ActionNames.LAF_PREFIX + laf.getClassName());                menuItem.setToolTipText(laf.getClassName());        lafMenu.add(menuItem);    }    return lafMenu;}
0
 void addLang(String locale)
{    String localeString = JMeterUtils.getLocaleString(locale);    JMenuItem language = new JMenuItem(localeString);    language.addActionListener(actionRouter);    language.setActionCommand(ActionNames.CHANGE_LANGUAGE);        language.setName(locale);    languageMenu.add(language);}
0
private static JMenu makeLanguageMenu()
{        final JMenu languageMenu = makeMenuRes("choose_language", 'C');    LangMenuHelper langMenu = new LangMenuHelper(languageMenu);    for (String lang : getLanguages()) {        langMenu.addLang(lang);    }    return languageMenu;}
0
private void makeRunMenu()
{        runMenu = makeMenuRes("run", 'R');        runStart = makeMenuItemRes("start", 'S', ActionNames.ACTION_START, KeyStrokes.ACTION_START);        runStartNoTimers = makeMenuItemRes("start_no_timers", 'N', ActionNames.ACTION_START_NO_TIMERS);        runStop = makeMenuItemRes("stop", 'T', ActionNames.ACTION_STOP, KeyStrokes.ACTION_STOP);    runStop.setEnabled(false);        runShut = makeMenuItemRes("shutdown", 'Y', ActionNames.ACTION_SHUTDOWN, KeyStrokes.ACTION_SHUTDOWN);    runShut.setEnabled(false);    JMenuItem runClear = makeMenuItemRes("clear", 'C', ActionNames.CLEAR, KeyStrokes.CLEAR);    JMenuItem runClearAll = makeMenuItemRes("clear_all", 'a', ActionNames.CLEAR_ALL, KeyStrokes.CLEAR_ALL);    runMenu.add(runStart);    runMenu.add(runStartNoTimers);    runMenu.add(runStop);    runMenu.add(runShut);    runMenu.addSeparator();    if (remoteStart != null) {        runMenu.add(remoteStart);    }    JMenuItem remoteStartAll = makeMenuItemRes("remote_start_all", ActionNames.REMOTE_START_ALL, KeyStrokes.REMOTE_START_ALL);    runMenu.add(remoteStartAll);    if (remoteStop != null) {        runMenu.add(remoteStop);    }    JMenuItem remoteStopAll = makeMenuItemRes("remote_stop_all", 'X', ActionNames.REMOTE_STOP_ALL, KeyStrokes.REMOTE_STOP_ALL);    runMenu.add(remoteStopAll);    if (remoteShut != null) {        runMenu.add(remoteShut);    }    JMenuItem remoteShutAll = makeMenuItemRes("remote_shut_all", 'X', ActionNames.REMOTE_SHUT_ALL, KeyStrokes.REMOTE_SHUT_ALL);    runMenu.add(remoteShutAll);    if (remoteExit != null) {        runMenu.add(remoteExit);    }    JMenuItem remoteExitAll = makeMenuItemRes("remote_exit_all", ActionNames.REMOTE_EXIT_ALL);    runMenu.add(remoteExitAll);    runMenu.addSeparator();    runMenu.add(runClear);    runMenu.add(runClearAll);    addPluginsMenuItems(runMenu, menuCreators, MENU_LOCATION.RUN);}
0
private void makeEditMenu()
{        editMenu = makeMenuRes("edit", 'E');            editMenu.setEnabled(false);    addPluginsMenuItems(editMenu, menuCreators, MENU_LOCATION.EDIT);}
0
private void makeFileMenu()
{        fileMenu = makeMenuRes("file", 'F');        JMenuItem fileSave = makeMenuItemRes("save", 'S', ActionNames.SAVE, KeyStrokes.SAVE);        fileSaveAs = makeMenuItemRes("save_all_as", 'A', ActionNames.SAVE_ALL_AS, KeyStrokes.SAVE_ALL_AS);    fileSaveAs.setEnabled(true);    JMenuItem fileSaveSelectionAs = makeMenuItemRes("save_as", 'L', ActionNames.SAVE_AS);    fileSaveSelectionAs.setEnabled(true);    JMenuItem fileSelectionAsTestFragment = makeMenuItemRes("save_as_test_fragment", 'F', ActionNames.SAVE_AS_TEST_FRAGMENT);    fileSelectionAsTestFragment.setEnabled(true);        fileRevert = makeMenuItemRes("revert_project", 'R', ActionNames.REVERT_PROJECT);    fileRevert.setEnabled(false);        fileLoad = makeMenuItemRes("menu_open", 'O', ActionNames.OPEN, KeyStrokes.OPEN);            fileLoad.setEnabled(false);        recentFilesOpen = makeMenuRes("menu_recent", 'E');    recentFilesOpen.setEnabled(false);    JMenuItem templates = makeMenuItemRes("template_menu", 'T', ActionNames.TEMPLATES);    templates.setEnabled(true);    JMenuItem fileNew = makeMenuItemRes("new", 'N', ActionNames.CLOSE, KeyStrokes.CLOSE);    JMenuItem fileExit = makeMenuItemRes("exit", 'X', ActionNames.EXIT, KeyStrokes.EXIT);        fileMerge = makeMenuItemRes("menu_merge", 'M', ActionNames.MERGE);    fileMerge.setEnabled(false);    fileMenu.add(fileNew);    fileMenu.add(templates);    fileMenu.add(fileLoad);    fileMenu.add(recentFilesOpen);    fileMenu.add(fileMerge);    fileMenu.addSeparator();    fileMenu.add(fileSave);    fileMenu.add(fileSaveAs);    fileMenu.add(fileSaveSelectionAs);    fileMenu.add(fileSelectionAsTestFragment);    fileMenu.add(fileRevert);            fileLoadRecentFiles = LoadRecentProject.getRecentFileMenuItems();    fileLoadRecentFiles.forEach(jc -> recentFilesOpen.add(jc));    recentFilesOpen.setEnabled(LoadRecentProject.hasVisibleMenuItem(fileLoadRecentFiles));    addPluginsMenuItems(fileMenu, menuCreators, MENU_LOCATION.FILE);    fileMenu.add(fileExit);}
0
private void makeSearchMenu()
{        searchMenu = makeMenuRes("menu_search", 'S');        JMenuItem search = makeMenuItemRes("menu_search", 'F', ActionNames.SEARCH_TREE, KeyStrokes.SEARCH_TREE);    searchMenu.add(search);    search.setEnabled(true);        JMenuItem searchReset = makeMenuItemRes("menu_search_reset", 'R', ActionNames.SEARCH_RESET);    searchMenu.add(searchReset);    searchReset.setEnabled(true);    addPluginsMenuItems(searchMenu, menuCreators, MENU_LOCATION.SEARCH);}
0
private void addPluginsMenuItems(JMenu menu, List<MenuCreator> menuCreators, MENU_LOCATION location)
{    for (MenuCreator menuCreator : menuCreators) {        JMenuItem[] menuItems = menuCreator.getMenuItemsAtLocation(location);        if (menuItems.length != 0) {            menu.addSeparator();        }        Arrays.stream(menuItems).forEachOrdered(menu::add);    }}
0
public void setRunning(boolean running, String host)
{        if (org.apache.jmeter.gui.MainFrame.LOCAL.equals(host)) {        return;    }    Iterator<JMenuItem> iter = remoteEngineStart.iterator();    Iterator<JMenuItem> iter2 = remoteEngineStop.iterator();    Iterator<JMenuItem> iter3 = remoteEngineExit.iterator();    Iterator<JMenuItem> iter4 = remoteEngineShut.iterator();    while (iter.hasNext() && iter2.hasNext() && iter3.hasNext() && iter4.hasNext()) {        JMenuItem start = iter.next();        JMenuItem stop = iter2.next();        JMenuItem exit = iter3.next();        JMenuItem shut = iter4.next();        if (start.getText().equals(host)) {            if (log.isDebugEnabled()) {                            }            start.setEnabled(!running);        }        if (stop.getText().equals(host)) {            if (log.isDebugEnabled()) {                            }            stop.setEnabled(running);        }        if (exit.getText().equals(host)) {            if (log.isDebugEnabled()) {                            }            exit.setEnabled(true);        }        if (shut.getText().equals(host)) {            if (log.isDebugEnabled()) {                            }            shut.setEnabled(running);        }    }}
1
public void setEnabled(boolean enable)
{    runStart.setEnabled(!enable);    runStartNoTimers.setEnabled(!enable);    runStop.setEnabled(enable);    runShut.setEnabled(enable);}
0
private void getRemoteItems()
{    if (remoteHosts.length > 0) {                remoteStart = makeMenuRes("remote_start");                remoteStop = makeMenuRes("remote_stop");                remoteShut = makeMenuRes("remote_shut");                remoteExit = makeMenuRes("remote_exit");        for (int i = 0; i < remoteHosts.length; i++) {            remoteHosts[i] = remoteHosts[i].trim();            JMenuItem item = makeMenuItemNoRes(remoteHosts[i], ActionNames.REMOTE_START);            remoteEngineStart.add(item);            remoteStart.add(item);            item = makeMenuItemNoRes(remoteHosts[i], ActionNames.REMOTE_STOP);            item.setEnabled(false);            remoteEngineStop.add(item);            remoteStop.add(item);            item = makeMenuItemNoRes(remoteHosts[i], ActionNames.REMOTE_SHUT);            item.setEnabled(false);            remoteEngineShut.add(item);            remoteShut.add(item);            item = makeMenuItemNoRes(remoteHosts[i], ActionNames.REMOTE_EXIT);            item.setEnabled(false);            remoteEngineExit.add(item);            remoteExit.add(item);        }    }}
0
public void localeChanged(LocaleChangeEvent event)
{    updateMenuElement(fileMenu);    updateMenuElement(editMenu);    updateMenuElement(searchMenu);    updateMenuElement(runMenu);    updateMenuElement(optionsMenu);    updateMenuElement(toolsMenu);    updateMenuElement(helpMenu);    for (MenuCreator creator : menuCreators) {        creator.localeChanged();    }}
0
public static LookAndFeelInfo[] getAllLAFs()
{    UIManager.LookAndFeelInfo[] lafs = UIManager.getInstalledLookAndFeels();    int i = lafs.length;    UIManager.LookAndFeelInfo[] lafsAll = new UIManager.LookAndFeelInfo[i + 2];    System.arraycopy(lafs, 0, lafsAll, 0, i);    lafsAll[i++] = new UIManager.LookAndFeelInfo(CROSS_PLATFORM_LAF, UIManager.getCrossPlatformLookAndFeelClassName());    lafsAll[i] = new UIManager.LookAndFeelInfo(SYSTEM_LAF, UIManager.getSystemLookAndFeelClassName());    return lafsAll;}
0
private void updateMenuElement(MenuElement menu)
{    Component component = menu.getComponent();    final String compName = component.getName();    if (compName != null) {        for (MenuCreator menuCreator : menuCreators) {            if (menuCreator.localeChanged(menu)) {                return;            }        }        if (component instanceof JMenu) {            final JMenu jMenu = (JMenu) component;            if (isResource(jMenu.getActionCommand())) {                jMenu.setText(JMeterUtils.getResString(compName));            }        } else {            final JMenuItem jMenuItem = (JMenuItem) component;            if (isResource(jMenuItem.getActionCommand())) {                jMenuItem.setText(JMeterUtils.getResString(compName));            } else if (ActionNames.CHANGE_LANGUAGE.equals(jMenuItem.getActionCommand())) {                jMenuItem.setText(JMeterUtils.getLocaleString(compName));            }        }    }    for (MenuElement subElement : menu.getSubElements()) {        updateMenuElement(subElement);    }}
0
private static boolean isResource(String actionCommand)
{    if (ActionNames.CHANGE_LANGUAGE.equals(actionCommand)) {                return false;    }    if (ActionNames.ADD.equals(actionCommand)) {                return false;    }    if (ActionNames.REMOTE_START.equals(actionCommand)) {                return false;    }    if (ActionNames.REMOTE_STOP.equals(actionCommand)) {                return false;    }    if (ActionNames.REMOTE_SHUT.equals(actionCommand)) {                return false;    }    if (ActionNames.REMOTE_EXIT.equals(actionCommand)) {                return false;    }    if (ActionNames.OPEN_RECENT.equals(actionCommand)) {                return false;    }    if (actionCommand != null && actionCommand.startsWith(ActionNames.LAF_PREFIX)) {        return false;    }    return true;}
0
private static JMenu makeMenuRes(String resource)
{    JMenu menu = new JMenu(JMeterUtils.getResString(resource));    menu.setName(resource);    return menu;}
0
private static JMenu makeMenuRes(String resource, int mnemonic)
{    JMenu menu = makeMenuRes(resource);    menu.setMnemonic(mnemonic);    return menu;}
0
private static JMenuItem makeMenuItemNoRes(String label, String actionCommand)
{    JMenuItem menuItem = new JMenuItem(label);    menuItem.setName(label);    menuItem.setActionCommand(actionCommand);    menuItem.addActionListener(ActionRouter.getInstance());    return menuItem;}
0
private static JMenuItem makeMenuItemRes(String resource, String actionCommand)
{    return makeMenuItemRes(resource, KeyEvent.VK_UNDEFINED, actionCommand, null);}
0
private static JMenuItem makeMenuItemRes(String resource, String actionCommand, KeyStroke keyStroke)
{    return makeMenuItemRes(resource, KeyEvent.VK_UNDEFINED, actionCommand, keyStroke);}
0
private static JMenuItem makeMenuItemRes(String resource, int mnemonic, String actionCommand)
{    return makeMenuItemRes(resource, mnemonic, actionCommand, null);}
0
private static JMenuItem makeMenuItemRes(String resource, int mnemonic, String actionCommand, KeyStroke keyStroke)
{    JMenuItem menuItem = new JMenuItem(JMeterUtils.getResString(resource), mnemonic);    menuItem.setName(resource);    menuItem.setActionCommand(actionCommand);    menuItem.setAccelerator(keyStroke);    menuItem.addActionListener(ActionRouter.getInstance());    return menuItem;}
0
private static JCheckBoxMenuItem makeCheckBoxMenuItemRes(String resource, String actionCommand)
{    return makeCheckBoxMenuItemRes(resource, actionCommand, null);}
0
private static JCheckBoxMenuItem makeCheckBoxMenuItemRes(String resource, String actionCommand, KeyStroke keyStroke)
{    JCheckBoxMenuItem cbkMenuItem = new JCheckBoxMenuItem(JMeterUtils.getResString(resource));    cbkMenuItem.setName(resource);    cbkMenuItem.setActionCommand(actionCommand);    cbkMenuItem.setAccelerator(keyStroke);    cbkMenuItem.addActionListener(ActionRouter.getInstance());    return cbkMenuItem;}
0
public static JMeterToolBar createToolbar(boolean visible)
{    JMeterToolBar toolBar = new JMeterToolBar();    toolBar.setFloatable(false);    toolBar.setVisible(visible);    setupToolbarContent(toolBar);    JMeterUtils.addLocaleChangeListener(toolBar);        return toolBar;}
0
private static void setupToolbarContent(JMeterToolBar toolBar)
{    List<IconToolbarBean> icons = getIconMappings();    if (icons != null) {        for (IconToolbarBean iconToolbarBean : icons) {            if (iconToolbarBean == null) {                toolBar.addSeparator();            } else {                try {                    if (ActionNames.UNDO.equalsIgnoreCase(iconToolbarBean.getActionName()) || ActionNames.REDO.equalsIgnoreCase(iconToolbarBean.getActionName())) {                        if (UndoHistory.isEnabled()) {                            toolBar.add(makeButtonItemRes(iconToolbarBean));                        }                    } else {                        toolBar.add(makeButtonItemRes(iconToolbarBean));                    }                } catch (Exception e) {                    if (log.isWarnEnabled()) {                                            }                }            }        }        toolBar.initButtonsState();    }}
1
private static JButton makeButtonItemRes(IconToolbarBean iconBean) throws Exception
{    final URL imageURL = JMeterUtils.class.getClassLoader().getResource(iconBean.getIconPath());    if (imageURL == null) {        throw new Exception("No icon for: " + iconBean.getActionName());    }    JButton button = new JButton(new ImageIcon(imageURL));    button.setToolTipText(JMeterUtils.getResString(iconBean.getI18nKey()));    final URL imageURLPressed = JMeterUtils.class.getClassLoader().getResource(iconBean.getIconPathPressed());    button.setPressedIcon(new ImageIcon(imageURLPressed));    button.addActionListener(ActionRouter.getInstance());    button.setActionCommand(iconBean.getActionNameResolve());    return button;}
0
private static List<IconToolbarBean> getIconMappings()
{        Properties defaultProps = JMeterUtils.loadProperties(DEFAULT_TOOLBAR_PROPERTY_FILE);    if (defaultProps == null) {        JOptionPane.showMessageDialog(null,         JMeterUtils.getResString("toolbar_icon_set_not_found"),         JMeterUtils.getResString("toolbar_icon_set_not_found"), JOptionPane.WARNING_MESSAGE);        return null;    }    Properties p;    String userProp = JMeterUtils.getProperty(USER_DEFINED_TOOLBAR_PROPERTY_FILE);    if (userProp != null) {        p = JMeterUtils.loadProperties(userProp, defaultProps);    } else {        p = defaultProps;    }    String order = JMeterUtils.getPropDefault(TOOLBAR_LIST, p.getProperty(TOOLBAR_PROP_NAME));    if (order == null) {                JOptionPane.showMessageDialog(null,         JMeterUtils.getResString("toolbar_icon_set_not_found"),         JMeterUtils.getResString("toolbar_icon_set_not_found"), JOptionPane.WARNING_MESSAGE);        return null;    }    String[] oList = order.split(TOOLBAR_ENTRY_SEP);    String iconSize = JMeterUtils.getPropDefault(TOOLBAR_ICON_SIZE, DEFAULT_TOOLBAR_ICON_SIZE);    List<IconToolbarBean> listIcons = new ArrayList<>();    for (String key : oList) {                        String trimmed = key.trim();        if (trimmed.equals("|")) {                        listIcons.add(null);        } else {            String property = p.getProperty(trimmed);            if (property == null) {                            } else {                try {                    IconToolbarBean itb = new IconToolbarBean(property, iconSize);                    listIcons.add(itb);                } catch (IllegalArgumentException e) {                                }            }        }    }    return listIcons;}
1
public void localeChanged(LocaleChangeEvent event)
{    Map<String, Boolean> currentButtonStates = getCurrentButtonsStates();    this.removeAll();    setupToolbarContent(this);    updateButtons(currentButtonStates);}
0
private Map<String, Boolean> getCurrentButtonsStates()
{    Component[] components = getComponents();    Map<String, Boolean> buttonStates = new HashMap<>(components.length);    for (Component component : components) {        if (component instanceof JButton) {            JButton button = (JButton) component;            buttonStates.put(button.getActionCommand(), Boolean.valueOf(button.isEnabled()));        }    }    return buttonStates;}
0
public void initButtonsState()
{    Map<String, Boolean> buttonStates = new HashMap<>();    buttonStates.put(ActionNames.ACTION_START, Boolean.TRUE);    buttonStates.put(ActionNames.ACTION_START_NO_TIMERS, Boolean.TRUE);    buttonStates.put(ActionNames.ACTION_STOP, Boolean.FALSE);    buttonStates.put(ActionNames.ACTION_SHUTDOWN, Boolean.FALSE);    buttonStates.put(ActionNames.UNDO, Boolean.FALSE);    buttonStates.put(ActionNames.REDO, Boolean.FALSE);    buttonStates.put(ActionNames.REMOTE_START_ALL, Boolean.TRUE);    buttonStates.put(ActionNames.REMOTE_STOP_ALL, Boolean.FALSE);    buttonStates.put(ActionNames.REMOTE_SHUT_ALL, Boolean.FALSE);    updateButtons(buttonStates);}
0
public void setLocalTestStarted(boolean started)
{    Map<String, Boolean> buttonStates = new HashMap<>(3);    buttonStates.put(ActionNames.ACTION_START, Boolean.valueOf(!started));    buttonStates.put(ActionNames.ACTION_START_NO_TIMERS, Boolean.valueOf(!started));    buttonStates.put(ActionNames.ACTION_STOP, Boolean.valueOf(started));    buttonStates.put(ActionNames.ACTION_SHUTDOWN, Boolean.valueOf(started));    updateButtons(buttonStates);}
0
public void setRemoteTestStarted(boolean started)
{    Map<String, Boolean> buttonStates = new HashMap<>(3);    buttonStates.put(ActionNames.REMOTE_START_ALL, Boolean.valueOf(!started));    buttonStates.put(ActionNames.REMOTE_STOP_ALL, Boolean.valueOf(started));    buttonStates.put(ActionNames.REMOTE_SHUT_ALL, Boolean.valueOf(started));    updateButtons(buttonStates);}
0
public void updateUndoRedoIcons(boolean canUndo, boolean canRedo)
{    Map<String, Boolean> buttonStates = new HashMap<>(2);    buttonStates.put(ActionNames.UNDO, Boolean.valueOf(canUndo));    buttonStates.put(ActionNames.REDO, Boolean.valueOf(canRedo));    updateButtons(buttonStates);}
0
private void updateButtons(Map<String, Boolean> buttonStates)
{    for (Component component : getComponents()) {        if (component instanceof JButton) {            JButton button = (JButton) component;            Boolean enabled = buttonStates.get(button.getActionCommand());            if (enabled != null) {                button.setEnabled(enabled.booleanValue());            }        }    }}
0
private void init()
{    this.searchField = new JTextField(30);    searchField.setFont(FONT_SMALL);    final JButton findButton = new JButton(JMeterUtils.getResString("search_text_button_find"));    findButton.setFont(FONT_SMALL);    findButton.setActionCommand(FIND_ACTION);    findButton.addActionListener(this);    regexCB = new JCheckBox(JMeterUtils.getResString("search_text_chkbox_regexp"));    regexCB.setFont(FONT_SMALL);    matchCaseCB = new JCheckBox(JMeterUtils.getResString("search_text_chkbox_case"));    matchCaseCB.setFont(FONT_SMALL);    this.toolBar = new JToolBar();    toolBar.setFloatable(false);    toolBar.setFont(FONT_SMALL);    toolBar.add(searchField);    toolBar.add(findButton);    toolBar.add(matchCaseCB);    toolBar.add(regexCB);    searchField.addActionListener(e -> findButton.doClick(0));}
0
public JToolBar getToolBar()
{    return toolBar;}
0
public void actionPerformed(ActionEvent evt)
{    String text = searchField.getText();    toggleSearchField(searchField, true);    if (!text.isEmpty()) {        SearchContext context = createSearchContext(text, true, matchCaseCB.isSelected(), regexCB.isSelected());        boolean found = SearchEngine.find(dataField, context).wasFound();        toggleSearchField(searchField, found);        if (!found) {            dataField.setCaretPosition(0);        }    }}
0
protected void toggleSearchField(JTextField textToFindField, boolean matchFound)
{    if (!matchFound) {        textToFindField.setBackground(LIGHT_RED);        textToFindField.setForeground(Color.WHITE);    } else {        textToFindField.setBackground(Color.WHITE);        textToFindField.setForeground(Color.BLACK);    }}
0
private SearchContext createSearchContext(String text, boolean forward, boolean matchCase, boolean isRegex)
{    SearchContext context = new SearchContext();    context.setSearchFor(text);    context.setMatchCase(matchCase);    context.setRegularExpression(isRegex);    context.setSearchForward(forward);    context.setMarkAll(false);    context.setSearchSelectionOnly(false);    context.setWholeWord(false);    return context;}
0
public static JSyntaxTextArea getInstance(int rows, int cols, boolean disableUndo)
{    try {        JSyntaxTextArea jSyntaxTextArea = new JSyntaxTextArea(rows, cols, disableUndo);        applyTheme(jSyntaxTextArea);        return jSyntaxTextArea;    } catch (HeadlessException e) {                if ("true".equals(System.getProperty("java.awt.headless"))) {                        return new JSyntaxTextArea(disableUndo) {                private static final long serialVersionUID = 1L;                @Override                protected void init() {                    try {                        super.init();                    } catch (HeadlessException | NullPointerException e) {                                        }                }                                @Override                public void setCodeFoldingEnabled(boolean b) {                }                @Override                public void setCaretPosition(int b) {                }                @Override                public void discardAllEdits() {                }                @Override                public void setText(String t) {                }                @Override                public boolean isCodeFoldingEnabled() {                    return true;                }            };        } else {            throw e;        }    }}
0
protected void init()
{    try {        super.init();    } catch (HeadlessException | NullPointerException e) {        }}
0
public void setCodeFoldingEnabled(boolean b)
{}
0
public void setCaretPosition(int b)
{}
0
public void discardAllEdits()
{}
0
public void setText(String t)
{}
0
public boolean isCodeFoldingEnabled()
{    return true;}
0
private static void applyTheme(JSyntaxTextArea jSyntaxTextArea)
{    String laf = LookAndFeelCommand.getJMeterLaf();    if (JMeterMenuBar.DARCULA_LAF_CLASS.equals(laf)) {        DARCULA_THEME.apply(jSyntaxTextArea);    }}
0
public static JSyntaxTextArea getInstance(int rows, int cols)
{    return getInstance(rows, cols, false);}
0
public void setLanguage(String language)
{    if (language == null) {                        super.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_NONE);    } else {        final String style = languageProperties.getProperty(language);        if (style == null) {            super.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_NONE);        } else {            super.setSyntaxEditingStyle(style);        }    }}
0
protected RUndoManager createUndoManager()
{    RUndoManager undoManager = super.createUndoManager();    if (disableUndo) {        undoManager.setLimit(0);    } else {        undoManager.setLimit(MAX_UNDOS);    }    return undoManager;}
0
public void setInitialText(String string)
{    setText(string);    discardAllEdits();}
0
private static final Theme initTheme()
{    try {        return Theme.load(JSyntaxTextArea.class.getClassLoader().getResourceAsStream("org/apache/jmeter/gui/util/theme/darcula_theme.xml"));    } catch (IOException e) {                return null;    }}
1
public static JTextScrollPane getInstance(JSyntaxTextArea scriptField, boolean foldIndicatorEnabled)
{    try {        return new JTextScrollPane(scriptField, foldIndicatorEnabled);    } catch (NullPointerException npe) {                if ("true".equals(System.getProperty("java.awt.headless"))) {                        return new JTextScrollPane();        } else {            throw npe;        }    }}
0
public static JTextScrollPane getInstance(JSyntaxTextArea scriptField)
{    try {        return new JTextScrollPane(scriptField);    } catch (NullPointerException npe) {                if ("true".equals(System.getProperty("java.awt.headless"))) {                        return new JTextScrollPane();        } else {            throw npe;        }    }}
0
private static Set<String> classesToSkip()
{    return Arrays.stream(JMeterUtils.getPropDefault("not_in_menu", "").split(",")).map(String::trim).collect(Collectors.toSet());}
0
private static void initializeMenus(Map<String, List<MenuInfo>> menus, Set<String> elementsToSkip)
{    try {        List<String> guiClasses = ClassFinder.findClassesThatExtend(JMeterUtils.getSearchPaths(), new Class[] { JMeterGUIComponent.class, TestBean.class }).stream().filter(name -> !name.endsWith("JMeterTreeNode")).filter(name -> !name.endsWith("TestBeanGUI")).filter(name -> !elementsToSkip.contains(name)).distinct().map(String::trim).collect(Collectors.toList());        for (String className : guiClasses) {            JMeterGUIComponent item = getGUIComponent(className, elementsToSkip);            if (item == null) {                continue;            }            Collection<String> categories = item.getMenuCategories();            if (categories == null) {                                continue;            }            for (Map.Entry<String, List<MenuInfo>> entry : menus.entrySet()) {                if (categories.contains(entry.getKey())) {                    entry.getValue().add(new MenuInfo(item, className));                }            }        }    } catch (IOException e) {            }}
1
private static JMeterGUIComponent getGUIComponent(String name, Set<String> elementsToSkip)
{    JMeterGUIComponent item = null;        boolean hideBean = false;    try {        Class<?> c = Class.forName(name);        if (TestBean.class.isAssignableFrom(c)) {            TestBeanGUI testBeanGUI = new TestBeanGUI(c);            hideBean = testBeanGUI.isHidden() || (testBeanGUI.isExpert() && !JMeterUtils.isExpertMode());            item = testBeanGUI;        } else {            item = (JMeterGUIComponent) c.getDeclaredConstructor().newInstance();        }    } catch (NoClassDefFoundError e) {            } catch (HeadlessException e) {            } catch (RuntimeException e) {        throw e;    } catch (Exception e) {            }    if (hideBean || (item != null && elementsToSkip.contains(item.getStaticLabel()))) {                item = null;    }    return item;}
1
private static void sortMenus(Collection<List<MenuInfo>> menus)
{    for (List<MenuInfo> menu : menus) {        menu.sort(Comparator.comparing(MenuInfo::getLabel));        menu.sort(Comparator.comparingInt(MenuInfo::getSortOrder));    }}
0
private static void separateItemsWithExplicitOrder(Collection<List<MenuInfo>> menus)
{    for (List<MenuInfo> menu : menus) {        Optional<MenuInfo> firstDefaultSortItem = menu.stream().filter(info -> info.getSortOrder() == MenuInfo.SORT_ORDER_DEFAULT).findFirst();        int index = menu.indexOf(firstDefaultSortItem.orElseThrow(IllegalStateException::new));        if (index > 0) {            menu.add(index, new MenuSeparatorInfo());        }    }}
0
public static void addEditMenu(JPopupMenu menu, boolean removable)
{    addSeparator(menu);    if (removable) {                menu.add(makeMenuItemRes("cut", ActionNames.CUT, KeyStrokes.CUT));    }        menu.add(makeMenuItemRes("copy", ActionNames.COPY, KeyStrokes.COPY));        menu.add(makeMenuItemRes("paste", ActionNames.PASTE, KeyStrokes.PASTE));        menu.add(makeMenuItemRes("duplicate", ActionNames.DUPLICATE, KeyStrokes.DUPLICATE));    if (removable) {                menu.add(makeMenuItemRes("remove", ActionNames.REMOVE, KeyStrokes.REMOVE));    }}
0
public static void addPasteResetMenu(JPopupMenu menu)
{    addSeparator(menu);        menu.add(makeMenuItemRes("paste", ActionNames.PASTE, KeyStrokes.PASTE));}
0
public static void addFileMenu(JPopupMenu pop)
{    addFileMenu(pop, true);}
0
public static void addFileMenu(JPopupMenu menu, boolean addSaveTestFragmentMenu)
{        if (UndoHistory.isEnabled()) {        addUndoItems(menu);    }    addSeparator(menu);        menu.add(makeMenuItemRes("open", ActionNames.OPEN));        menu.add(makeMenuItemRes("menu_merge", ActionNames.MERGE));        menu.add(makeMenuItemRes("save_as", ActionNames.SAVE_AS));    if (addSaveTestFragmentMenu) {        menu.add(makeMenuItemRes(        "save_as_test_fragment", ActionNames.SAVE_AS_TEST_FRAGMENT));    }    addSeparator(menu);    JMenuItem savePicture = makeMenuItemRes(    "save_as_image", ActionNames.SAVE_GRAPHICS, KeyStrokes.SAVE_GRAPHICS);    menu.add(savePicture);    if (!(GuiPackage.getInstance().getCurrentGui() instanceof Printable)) {        savePicture.setEnabled(false);    }    JMenuItem savePictureAll = makeMenuItemRes(    "save_as_image_all", ActionNames.SAVE_GRAPHICS_ALL, KeyStrokes.SAVE_GRAPHICS_ALL);    menu.add(savePictureAll);    addSeparator(menu);        JMenuItem disabled = makeMenuItemRes("disable", ActionNames.DISABLE);        JMenuItem enabled = makeMenuItemRes("enable", ActionNames.ENABLE);    boolean isEnabled = GuiPackage.getInstance().getTreeListener().getCurrentNode().isEnabled();    disabled.setEnabled(isEnabled);    enabled.setEnabled(!isEnabled);    menu.add(enabled);    menu.add(disabled);        JMenuItem toggle = makeMenuItemRes("toggle", ActionNames.TOGGLE, KeyStrokes.TOGGLE);    menu.add(toggle);    addSeparator(menu);        menu.add(makeMenuItemRes("help", ActionNames.HELP));}
0
private static void addUndoItems(JPopupMenu menu)
{    addSeparator(menu);        JMenuItem undo = makeMenuItemRes("undo", ActionNames.UNDO);    undo.setEnabled(GuiPackage.getInstance().canUndo());    menu.add(undo);        JMenuItem redo = makeMenuItemRes("redo", ActionNames.REDO);            redo.setEnabled(GuiPackage.getInstance().canRedo());    menu.add(redo);}
0
public static JMenu makeMenus(String[] categories, String label, String actionCommand)
{    JMenu addMenu = new JMenu(label);    Arrays.stream(categories).map(category -> makeMenu(category, actionCommand)).forEach(addMenu::add);    GuiUtils.makeScrollableMenu(addMenu);    return addMenu;}
0
public static JPopupMenu getDefaultControllerMenu()
{    JPopupMenu pop = new JPopupMenu();    String addAction = ActionNames.ADD;        JMenu addMenu = new JMenu(JMeterUtils.getResString("add"));    addMenu.add(MenuFactory.makeMenu(MenuFactory.SAMPLERS, addAction));    addMenu.addSeparator();    addMenu.add(MenuFactory.makeMenu(MenuFactory.CONTROLLERS, addAction));    addMenu.addSeparator();    pop.add(addDefaultAddMenuToMenu(addMenu, addAction));    pop.add(    MenuFactory.makeMenuItemRes(    "add_think_times", ActionNames.ADD_THINK_TIME_BETWEEN_EACH_STEP));    pop.add(    MenuFactory.makeMenuItemRes(    "apply_naming", ActionNames.APPLY_NAMING_CONVENTION));    pop.add(makeMenus(new String[] { CONTROLLERS },     JMeterUtils.getResString("change_parent"), ActionNames.CHANGE_PARENT));    pop.add(makeMenus(new String[] { CONTROLLERS },     JMeterUtils.getResString("insert_parent"), ActionNames.ADD_PARENT));    MenuFactory.addEditMenu(pop, true);    MenuFactory.addFileMenu(pop);    return pop;}
0
private static JMenu createDefaultAddMenu()
{    String addAction = ActionNames.ADD;        JMenu addMenu = new JMenu(JMeterUtils.getResString("add"));    addDefaultAddMenuToMenu(addMenu, addAction);    return addMenu;}
0
private static JMenu addDefaultAddMenuToMenu(JMenu addMenu, String addAction)
{    addMenu.add(MenuFactory.makeMenu(MenuFactory.ASSERTIONS, addAction));    addMenu.addSeparator();    addMenu.add(MenuFactory.makeMenu(MenuFactory.TIMERS, addAction));    addMenu.addSeparator();    addMenu.add(MenuFactory.makeMenu(MenuFactory.PRE_PROCESSORS, addAction));    addMenu.add(MenuFactory.makeMenu(MenuFactory.POST_PROCESSORS, addAction));    addMenu.addSeparator();    addMenu.add(MenuFactory.makeMenu(MenuFactory.CONFIG_ELEMENTS, addAction));    addMenu.add(MenuFactory.makeMenu(MenuFactory.LISTENERS, addAction));    return addMenu;}
0
public static JPopupMenu getDefaultSamplerMenu()
{    JPopupMenu pop = new JPopupMenu();    pop.add(createDefaultAddMenu());    pop.add(makeMenus(new String[] { CONTROLLERS },     JMeterUtils.getResString("insert_parent"), ActionNames.ADD_PARENT));    MenuFactory.addEditMenu(pop, true);    MenuFactory.addFileMenu(pop);    return pop;}
0
public static JPopupMenu getDefaultConfigElementMenu()
{    return createDefaultPopupMenu();}
0
public static JPopupMenu getDefaultVisualizerMenu()
{    JPopupMenu pop = new JPopupMenu();    pop.add(MenuFactory.makeMenuItemRes("clear",     ActionNames.CLEAR));    MenuFactory.addEditMenu(pop, true);    MenuFactory.addFileMenu(pop);    return pop;}
0
public static JPopupMenu getDefaultTimerMenu()
{    return createDefaultPopupMenu();}
0
public static JPopupMenu getDefaultAssertionMenu()
{    return createDefaultPopupMenu();}
0
public static JPopupMenu getDefaultExtractorMenu()
{    return createDefaultPopupMenu();}
0
public static JPopupMenu getDefaultMenu()
{        return createDefaultPopupMenu();}
0
private static JPopupMenu createDefaultPopupMenu()
{    JPopupMenu pop = new JPopupMenu();    MenuFactory.addEditMenu(pop, true);    MenuFactory.addFileMenu(pop);    return pop;}
0
public static JMenu makeMenu(String category, String actionCommand)
{    return makeMenu(menuMap.get(category), actionCommand, JMeterUtils.getResString(category));}
0
private static JMenu makeMenu(Collection<MenuInfo> menuInfo, String actionCommand, String menuName)
{    JMenu menu = new JMenu(menuName);    menuInfo.stream().map(info -> makeMenuItem(info, actionCommand)).forEach(menu::add);    GuiUtils.makeScrollableMenu(menu);    return menu;}
0
public static void setEnabled(JMenu menu)
{    if (menu.getSubElements().length == 0) {        menu.setEnabled(false);    }}
0
public static JMenuItem makeMenuItem(String label, String name, String actionCommand)
{    JMenuItem newMenuChoice = new JMenuItem(label);    newMenuChoice.setName(name);    newMenuChoice.addActionListener(ActionRouter.getInstance());    if (actionCommand != null) {        newMenuChoice.setActionCommand(actionCommand);    }    return newMenuChoice;}
0
public static JMenuItem makeMenuItemRes(String resource, String actionCommand)
{    JMenuItem newMenuChoice = new JMenuItem(JMeterUtils.getResString(resource));    newMenuChoice.setName(resource);    newMenuChoice.addActionListener(ActionRouter.getInstance());    if (actionCommand != null) {        newMenuChoice.setActionCommand(actionCommand);    }    return newMenuChoice;}
0
private static Component makeMenuItem(MenuInfo info, String actionCommand)
{    if (info instanceof MenuSeparatorInfo) {        return new JPopupMenu.Separator();    }    JMenuItem newMenuChoice = new JMenuItem(info.getLabel());    newMenuChoice.setName(info.getClassName());    newMenuChoice.setEnabled(info.getEnabled(actionCommand));    newMenuChoice.addActionListener(ActionRouter.getInstance());    if (actionCommand != null) {        newMenuChoice.setActionCommand(actionCommand);    }    return newMenuChoice;}
0
private static JMenuItem makeMenuItemRes(String resource, String actionCommand, KeyStroke accel)
{    JMenuItem item = makeMenuItemRes(resource, actionCommand);    item.setAccelerator(accel);    return item;}
0
private static void addSeparator(JPopupMenu menu)
{    MenuElement[] elements = menu.getSubElements();    if ((elements.length > 0) && !(elements[elements.length - 1] instanceof JPopupMenu.Separator)) {        menu.addSeparator();    }}
0
public static boolean canAddTo(JMeterTreeNode parentNode, TestElement element)
{    JMeterTreeNode node = new JMeterTreeNode(element, null);    return canAddTo(parentNode, new JMeterTreeNode[] { node });}
0
public static boolean canAddTo(JMeterTreeNode parentNode, JMeterTreeNode[] nodes)
{    if (parentNode == null || foundClass(nodes, new Class[] { TestPlan.class })) {        return false;    }    TestElement parent = parentNode.getTestElement();        if (foundClass(nodes, new Class[] { TestFragmentController.class })) {        return parent instanceof TestPlan;    }        if (foundMenuCategories(nodes, NON_TEST_ELEMENTS) && !(parent instanceof TestPlan || parent instanceof TestFragmentController)) {        return false;    }    if (parent instanceof TestPlan) {        List<Class<?>> samplerAndController = Arrays.asList(Sampler.class, Controller.class);        List<Class<?>> exceptions = Arrays.asList(AbstractThreadGroup.class, NonTestElement.class);        return !foundClass(nodes, samplerAndController, exceptions);    }        if (foundClass(nodes, new Class[] { AbstractThreadGroup.class })) {        return false;    }        if (parent instanceof Controller) {        return true;    }        if (parent instanceof Sampler) {        return !foundClass(nodes, new Class[] { Sampler.class, Controller.class });    }        return false;}
0
private static boolean foundClass(JMeterTreeNode[] nodes, Class<?>[] classes)
{    for (JMeterTreeNode node : nodes) {        for (Class<?> aClass : classes) {            if (aClass.isInstance(node.getUserObject())) {                return true;            }        }    }    return false;}
0
private static boolean foundMenuCategories(JMeterTreeNode[] nodes, String category)
{    return Arrays.stream(nodes).flatMap(node -> node.getMenuCategories().stream()).anyMatch(category::equals);}
0
private static boolean foundClass(JMeterTreeNode[] nodes, List<Class<?>> classes, List<Class<?>> exceptions)
{    return Arrays.stream(nodes).map(DefaultMutableTreeNode::getUserObject).filter(userObj -> exceptions.stream().noneMatch(c -> c.isInstance(userObj))).anyMatch(userObj -> classes.stream().anyMatch(c -> c.isInstance(userObj)));}
0
private int getSortOrderFromName(String classFullName)
{    try {        GUIMenuSortOrder menuSortOrder = Class.forName(classFullName).getDeclaredAnnotation(GUIMenuSortOrder.class);        if (menuSortOrder != null) {            return menuSortOrder.value();        }    } catch (ClassNotFoundException ignored) {        }    return SORT_ORDER_DEFAULT;}
0
public String getLabel()
{    if (guiComp != null) {        return guiComp.getStaticLabel();    }    return label;}
0
public String getClassName()
{    return className;}
0
public int getSortOrder()
{    return sortOrder;}
0
public boolean getEnabled(String actionCommand)
{    if (ActionNames.ADD.equals(actionCommand)) {        return guiComp.canBeAdded();    } else {        return true;    }}
0
public static NumberFieldErrorListener getNumberFieldErrorListener()
{    return listener;}
0
public void focusLost(FocusEvent e)
{    Component source = (Component) e.getSource();    String text = "";    if (source instanceof JTextComponent) {        text = ((JTextComponent) source).getText();    } else if (source instanceof TextComponent) {        text = ((TextComponent) source).getText();    }    try {        Integer.parseInt(text);    } catch (NumberFormatException nfe) {        JOptionPane.showMessageDialog(source,         JMeterUtils.getResString("you_must_enter_a_valid_number"),         JMeterUtils.getResString("invalid_data"), JOptionPane.WARNING_MESSAGE);        FocusRequester.requestFocus(source);    }}
0
public void setRowValues(int row, Object[] values)
{    if (values.length != model.getHeaderCount()) {        throw new IllegalArgumentException("Incorrect number of data items");    }    model.setCurrentPos(row);    for (int i = 0; i < values.length; i++) {        model.addColumnValue(model.getHeaders()[i], values[i]);    }}
0
public Data getData()
{    return model;}
0
public void addNewColumn(String colName, Class<?> colClass)
{    model.addHeader(colName);    Class<?>[] newClasses = new Class[columnClasses.length + 1];    System.arraycopy(columnClasses, 0, newClasses, 0, columnClasses.length);    newClasses[newClasses.length - 1] = colClass;    columnClasses = newClasses;    Object defaultValue = createDefaultValue(columnClasses.length - 1);    model.setColumnData(colName, defaultValue);    this.fireTableStructureChanged();}
0
public void removeRow(int row)
{        if (model.size() > row) {                model.removeRow(row);    }}
1
public void removeColumn(int col)
{    model.removeColumn(col);    this.fireTableStructureChanged();}
0
public void setColumnData(int col, List<?> data)
{    model.setColumnData(col, data);}
0
public List<?> getColumnData(String colName)
{    return model.getColumnAsObjectArray(colName);}
0
public void clearData()
{    String[] headers = model.getHeaders();    model = new Data();    model.setHeaders(headers);    this.fireTableDataChanged();}
0
public void addRow(Object[] data)
{    if (data.length != model.getHeaderCount()) {        throw new IllegalArgumentException("Incorrect number of data items");    }    model.setCurrentPos(model.size());    for (int i = 0; i < data.length; i++) {        model.addColumnValue(model.getHeaders()[i], data[i]);    }}
0
public void moveRow(int start, int end, int to)
{    ArrayList<Object[]> rows = new ArrayList<>();    for (int i = 0; i < getRowCount(); i++) {        rows.add(getRowData(i));    }    List<Object[]> subList = new ArrayList<>(rows.subList(start, end));    for (int x = end - 1; x >= start; x--) {        rows.remove(x);    }    rows.addAll(to, subList);    for (int i = 0; i < rows.size(); i++) {        setRowValues(i, rows.get(i));    }    super.fireTableChanged(new TableModelEvent(this));}
0
public void addNewRow()
{    addRow(createDefaultRow());}
0
private Object[] createDefaultRow()
{    Object[] rowData = new Object[getColumnCount()];    for (int i = 0; i < rowData.length; i++) {        rowData[i] = createDefaultValue(i);    }    return rowData;}
0
public Object[] getRowData(int row)
{    Object[] rowData = new Object[getColumnCount()];    Arrays.setAll(rowData, i -> model.getColumnValue(i, row));    return rowData;}
0
private Object createDefaultValue(int i)
{        Class<?> colClass = getColumnClass(i);    try {        return colClass.getDeclaredConstructor().newInstance();    } catch (Exception e) {        for (Object initArg : DEFAULT_ARGS) {            try {                Constructor<?> constr = colClass.getConstructor(initArg.getClass());                return constr.newInstance(initArg);            } catch (ReflectiveOperationException ignored) {                        }        }    }    return "";}
0
public int getRowCount()
{    if (model == null) {        return 0;    }    return model.size();}
0
public int getColumnCount()
{    return model.getHeaders().length;}
0
public String getColumnName(int column)
{    return model.getHeaders()[column];}
0
public boolean isCellEditable(int row, int column)
{        return true;}
0
public Class<?> getColumnClass(int column)
{    return columnClasses[column];}
0
public Object getValueAt(int row, int column)
{    return model.getColumnValue(column, row);}
0
public void setValueAt(Object value, int row, int column)
{    if (row < model.size()) {        model.setCurrentPos(row);        model.addColumnValue(model.getHeaders()[column], value);    }}
0
public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
{    if (value != null) {        rend = createRenderer((String) value);    } else {                rend = createRenderer("");    }    if (hasFocus || isSelected) {        rend.setBackground(Color.blue);        rend.setForeground(Color.white);    }    if (table.getRowHeight(row) < getPreferredHeight()) {        table.setRowHeight(row, getPreferredHeight());    }    return JTextScrollPane.getInstance(rend);}
0
private JSyntaxTextArea createRenderer(String value)
{    JSyntaxTextArea textArea = JSyntaxTextArea.getInstance(2, 50);        textArea.setLanguage("text");    textArea.setInitialText(value);    return textArea;}
0
public int getPreferredHeight()
{        if ("true".equals(System.getProperty("java.awt.headless"))) {                return 10;    } else {        return rend.getPreferredSize().height + 5;    }}
0
public void setValue(Object value)
{    editorComponent.setText((value != null) ? value.toString() : "");}
0
public Object getCellEditorValue()
{    return editorComponent.getText();}
0
public Component getComponent()
{    return editorComponent;}
0
public void setClickCountToStart(int count)
{    clickCountToStart = count;}
0
public int getClickCountToStart()
{    return clickCountToStart;}
0
public Object getCellEditorValue()
{    return delegate.getCellEditorValue();}
0
public boolean isCellEditable(EventObject anEvent)
{    return delegate.isCellEditable(anEvent);}
0
public boolean shouldSelectCell(EventObject anEvent)
{    return delegate.shouldSelectCell(anEvent);}
0
public boolean stopCellEditing()
{    return delegate.stopCellEditing();}
0
public void cancelCellEditing()
{    delegate.cancelCellEditing();}
0
public Component getTreeCellEditorComponent(JTree tree, Object value, boolean isSelected, boolean expanded, boolean leaf, int row)
{    String stringValue = tree.convertValueToText(value, isSelected, expanded, leaf, row, false);    delegate.setValue(stringValue);    return new JScrollPane(editorComponent);}
0
public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column)
{    delegate.setValue(value);    return new JScrollPane(editorComponent);}
0
public Object getCellEditorValue()
{    return value;}
0
public void setValue(Object value)
{    this.value = value;}
0
public boolean isCellEditable(EventObject anEvent)
{    if (anEvent instanceof MouseEvent) {        return ((MouseEvent) anEvent).getClickCount() >= clickCountToStart;    }    return true;}
0
public boolean shouldSelectCell(EventObject anEvent)
{    return true;}
0
public boolean startCellEditing(EventObject anEvent)
{    return true;}
0
public boolean stopCellEditing()
{    fireEditingStopped();    return true;}
0
public void cancelCellEditing()
{    fireEditingCanceled();}
0
public void actionPerformed(ActionEvent e)
{    TextAreaTableCellEditor.this.stopCellEditing();}
0
public void itemStateChanged(ItemEvent e)
{    TextAreaTableCellEditor.this.stopCellEditing();}
0
public void focusLost(FocusEvent ev)
{    TextAreaTableCellEditor.this.stopCellEditing();}
0
public void focusGained(FocusEvent ev)
{}
0
private void init(String text)
{    createDialogBox();    setTextBox(text);    dialog.setVisible(true);}
0
private void createDialogBox()
{    JFrame mainFrame = GuiPackage.getInstance().getMainFrame();    String title =     editable ?     JMeterUtils.getResString("textbox_title_edit") :     JMeterUtils.getResString("textbox_title_view");        dialog = new JDialog(mainFrame, title, true);        JPanel content = (JPanel) dialog.getContentPane();    content.registerKeyboardAction(this, KeyStrokes.ESC, JComponent.WHEN_IN_FOCUSED_WINDOW);    textBox = new JEditorPane();    textBox.setEditable(editable);    JScrollPane textBoxScrollPane = GuiUtils.makeScrollPane(textBox);    JPanel btnBar = new JPanel();    btnBar.setLayout(new FlowLayout(FlowLayout.RIGHT));    if (editable) {                JButton cancelBtn = new JButton(JMeterUtils.getResString("textbox_cancel"));        cancelBtn.setActionCommand(CANCEL_COMMAND);        cancelBtn.addActionListener(this);                JButton saveBtn = new JButton(JMeterUtils.getResString("textbox_save_close"));        saveBtn.setActionCommand(SAVE_CLOSE_COMMAND);        saveBtn.addActionListener(this);        btnBar.add(cancelBtn);        btnBar.add(saveBtn);    } else {                JButton closeBtn = new JButton(JMeterUtils.getResString("textbox_close"));        closeBtn.setActionCommand(CLOSE_COMMAND);        closeBtn.addActionListener(this);        btnBar.add(closeBtn);    }        Container panel = dialog.getContentPane();    dialog.setMinimumSize(new Dimension(400, 250));    panel.add(textBoxScrollPane, BorderLayout.CENTER);    panel.add(btnBar, BorderLayout.SOUTH);        Point p = mainFrame.getLocationOnScreen();    Dimension d1 = mainFrame.getSize();    Dimension d2 = dialog.getSize();    dialog.setLocation(p.x + (d1.width - d2.width) / 2, p.y + (d1.height - d2.height) / 2);    dialog.pack();}
0
private void closeDialog()
{    dialog.setVisible(false);}
0
public void actionPerformed(ActionEvent e)
{    String command = e.getActionCommand();    if (CANCEL_COMMAND.equals(command)) {        closeDialog();        setTextBox(originalText);    } else {                closeDialog();    }}
0
public void setTextBox(String text)
{        originalText = text;    textBox.setText(text);}
0
public String getTextBox()
{    return textBox.getText();}
0
public void mouseClicked(MouseEvent e)
{    if (e.getClickCount() == 2) {                TableModel tm = table.getModel();        Object value = tm.getValueAt(table.getSelectedRow(), table.getSelectedColumn());                new TextBoxDialoger(value.toString(), false);    }}
0
public void mousePressed(MouseEvent e)
{    if (e.getClickCount() == 2) {                TableModel tm = table.getModel();        Object value = tm.getValueAt(table.getSelectedRow(), table.getSelectedColumn());        if (value instanceof String) {            if (table.getCellEditor() != null) {                                table.getCellEditor().cancelCellEditing();            }            TextBoxDialoger tbd = new TextBoxDialoger(value.toString(), true);            tm.setValueAt(tbd.getTextBox(), table.getSelectedRow(), table.getSelectedColumn());        }        }}
0
public void stateChanged(ChangeEvent e)
{    TristateCheckBox.this.setFocusable(getModel().isEnabled());}
0
public void mousePressed(MouseEvent e)
{    TristateCheckBox.this.iterateState();}
0
public void actionPerformed(ActionEvent e)
{    TristateCheckBox.this.iterateState();}
0
public void setTristateFromProperty(TestElement element, String propName)
{    JMeterProperty jmp = element.getProperty(propName);    if (jmp instanceof NullProperty) {        this.setIndeterminate();    } else {        this.setSelected(jmp.getBooleanValue());    }}
0
public void setPropertyFromTristate(TestElement element, String propName)
{    if (isIndeterminate()) {        element.removeProperty(propName);    } else {        element.setProperty(propName, isSelected());    }}
0
public void setIndeterminate()
{    getTristateModel().setIndeterminate();}
0
public boolean isIndeterminate()
{    return getTristateModel().isIndeterminate();}
0
public TristateState getState()
{    return getTristateModel().getState();}
0
public void setModel(ButtonModel newModel)
{    super.setModel(newModel);        if (model instanceof TristateButtonModel) {        model.addChangeListener(enableListener);    }}
0
public synchronized void addMouseListener(MouseListener l)
{}
0
private void iterateState()
{        if (!getModel().isEnabled()) {        return;    }    grabFocus();        getTristateModel().iterateState();        int modifiers = 0;    AWTEvent currentEvent = EventQueue.getCurrentEvent();    if (currentEvent instanceof InputEvent) {        modifiers = ((InputEvent) currentEvent).getModifiers();    } else if (currentEvent instanceof ActionEvent) {        modifiers = ((ActionEvent) currentEvent).getModifiers();    }    fireActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, getText(), System.currentTimeMillis(), modifiers));}
0
public TristateButtonModel getTristateModel()
{    return (TristateButtonModel) super.getModel();}
0
public void setIndeterminate()
{    setState(TristateState.INDETERMINATE);}
0
public boolean isIndeterminate()
{    return state == TristateState.INDETERMINATE;}
0
public void setEnabled(boolean enabled)
{    super.setEnabled(enabled);        displayState();}
0
public void setSelected(boolean selected)
{    setState(selected ? TristateState.SELECTED : TristateState.DESELECTED);}
0
public void setArmed(boolean b)
{}
0
public void setPressed(boolean b)
{}
0
 void iterateState()
{    setState(state.next());}
0
private void setState(TristateState state)
{        this.state = state;    displayState();    if (state == TristateState.INDETERMINATE && isEnabled()) {                        fireStateChanged();                int indeterminate = 3;        fireItemStateChanged(new ItemEvent(this, ItemEvent.ITEM_STATE_CHANGED, this, indeterminate));    }}
0
private void displayState()
{    super.setSelected(state != TristateState.DESELECTED);    if (original) {        super.setArmed(state == TristateState.INDETERMINATE);    } else {        if (state == TristateState.INDETERMINATE) {                        tristateCheckBox.setIcon(icon);                        tristateCheckBox.setSelectedIcon(icon);                        tristateCheckBox.setDisabledSelectedIcon(icon);        } else {                        if (tristateCheckBox != null) {                tristateCheckBox.setIcon(null);                tristateCheckBox.setSelectedIcon(null);                                tristateCheckBox.setDisabledSelectedIcon(null);            }        }    }    super.setPressed(state == TristateState.INDETERMINATE);}
0
public TristateState getState()
{    return state;}
0
public void paintIcon(Component c, Graphics g, int x, int y)
{    JCheckBox cb = (JCheckBox) c;    ButtonModel model = cb.getModel();        if (model.isEnabled()) {        if (model.isPressed() && model.isArmed()) {            g.setColor(MetalLookAndFeel.getControlShadow());            g.fillRect(x, y, iconWidth - 1, iconHeight - 1);            drawPressed3DBorder(g, x, y, iconWidth, iconHeight);        } else {            drawFlush3DBorder(g, x, y, iconWidth, iconHeight);        }        g.setColor(MetalLookAndFeel.getControlInfo());    } else {        g.setColor(MetalLookAndFeel.getControlShadow());        g.drawRect(x, y, iconWidth - 1, iconHeight - 1);    }    drawLine(g, x, y);}
0
private void drawLine(Graphics g, int x, int y)
{    final int left = x + 2;    final int right = x + (iconWidth - 4);    int height = y + iconHeight / 2;    g.drawLine(left, height, right, height);    g.drawLine(left, height - 1, right, height - 1);}
0
private void drawFlush3DBorder(Graphics g, int x, int y, int w, int h)
{    g.translate(x, y);    g.setColor(MetalLookAndFeel.getControlDarkShadow());    g.drawRect(0, 0, w - 2, h - 2);    g.setColor(MetalLookAndFeel.getControlHighlight());    g.drawRect(1, 1, w - 2, h - 2);    g.setColor(MetalLookAndFeel.getControl());    g.drawLine(0, h - 1, 1, h - 2);    g.drawLine(w - 1, 0, w - 2, 1);    g.translate(-x, -y);}
0
private void drawPressed3DBorder(Graphics g, int x, int y, int w, int h)
{    g.translate(x, y);    drawFlush3DBorder(g, 0, 0, w, h);    g.setColor(MetalLookAndFeel.getControlShadow());    g.drawLine(1, 1, 1, h - 2);    g.drawLine(1, 1, w - 2, 1);    g.translate(-x, -y);}
0
public int getIconWidth()
{    return iconWidth;}
0
public int getIconHeight()
{    return iconHeight;}
0
public TristateState next()
{    return INDETERMINATE;}
0
public TristateState next()
{    return DESELECTED;}
0
public TristateState next()
{    return SELECTED;}
0
public Component add(Component c)
{        if (vgap > 0 && subPanel.getComponentCount() > 0) {        subPanel.add(Box.createVerticalStrut(vgap));    }    if (c instanceof JComponent) {        ((JComponent) c).setAlignmentX(horizontalAlign);    }    return subPanel.add(c);}
0
private void startGui(String testFile)
{        System.out.println("================================================================================");        System.out.println("Don't use GUI mode for load testing !, only for Test creation and Test debugging.");        System.out.println("For load testing, use CLI Mode (was NON GUI):");        System.out.println("   jmeter -n -t [jmx file] -l [results file] -e -o [Path to web report folder]");        System.out.println("& increase Java Heap to meet your test requirements:");        System.out.println("   Modify current env variable HEAP=\"-Xms1g -Xmx1g -XX:MaxMetaspaceSize=256m\" in the jmeter batch file");        System.out.println("Check : https://jmeter.apache.org/usermanual/best-practices.html");        System.out.println("================================================================================");    SplashScreen splash = new SplashScreen();    splash.showScreen();    String jMeterLaf = LookAndFeelCommand.getJMeterLaf();    try {                UIManager.setLookAndFeel(jMeterLaf);    } catch (Exception ex) {            }    splash.setProgress(10);    JMeterUtils.applyHiDPIOnFonts();    PluginManager.install(this, true);    JMeterTreeModel treeModel = new JMeterTreeModel();    splash.setProgress(30);    JMeterTreeListener treeLis = new JMeterTreeListener(treeModel);    final ActionRouter instance = ActionRouter.getInstance();    instance.populateCommandMap();    splash.setProgress(60);    treeLis.setActionHandler(instance);    GuiPackage.initInstance(treeLis, treeModel);    splash.setProgress(80);    MainFrame main = new MainFrame(treeModel, treeLis);    splash.setProgress(100);    ComponentUtil.centerComponentInWindow(main, 80);    main.setLocationRelativeTo(splash);    main.setVisible(true);    main.toFront();    instance.actionPerformed(new ActionEvent(main, 1, ActionNames.ADD_ALL));    if (testFile != null) {        try {            File f = new File(testFile);                        FileServer.getFileServer().setBaseForScript(f);            HashTree tree = SaveService.loadTree(f);            GuiPackage.getInstance().setTestPlanFile(f.getAbsolutePath());            Load.insertLoadedTree(1, tree);        } catch (ConversionException e) {                        JMeterUtils.reportErrorToUser(SaveService.CEtoString(e));        } catch (Exception e) {                        JMeterUtils.reportErrorToUser(e.toString());        }    } else {        JTree jTree = GuiPackage.getInstance().getMainFrame().getTree();        TreePath path = jTree.getPathForRow(0);        jTree.setSelectionPath(path);        FocusRequester.requestFocus(jTree);    }    splash.setProgress(100);    splash.close();}
1
public void start(String[] args)
{    CLArgsParser parser = new CLArgsParser(args, options);    String error = parser.getErrorString();    if (error == null) {                boolean gui = parser.getArgumentById(NONGUI_OPT) == null;        boolean nonGuiOnly = parser.getArgumentById(REMOTE_OPT) != null || parser.getArgumentById(REMOTE_OPT_PARAM) != null || parser.getArgumentById(REMOTE_STOP) != null;        if (gui && nonGuiOnly) {            error = "-r and -R and -X are only valid in non-GUI mode";        }    }    if (null != error) {                System.err.println("Error: " + error);                System.out.println("Usage");                System.out.println(CLUtil.describeOptions(options).toString());                        System.out.println("Error: " + error);        return;    }    try {                initializeProperties(parser);        Thread.setDefaultUncaughtExceptionHandler((Thread t, Throwable e) -> {            if (!(e instanceof ThreadDeath)) {                                                System.err.println("Uncaught Exception " + e + ". See log file for details.");            }        });        if (log.isInfoEnabled()) {                                                                                                                                                                                                                                                                                                                                }        setProxy(parser);        updateClassLoader();        if (log.isDebugEnabled()) {                        String jcp = System.getProperty("java.class.path");            String[] bits = jcp.split(File.pathSeparator);                        for (String bit : bits) {                            }        }                long now = System.currentTimeMillis();                JMeterUtils.setProperty("START.MS", Long.toString(now));                Date today = new Date(now);                JMeterUtils.setProperty("START.YMD", new SimpleDateFormat("yyyyMMdd").format(today));                JMeterUtils.setProperty("START.HMS", new SimpleDateFormat("HHmmss").format(today));        if (parser.getArgumentById(VERSION_OPT) != null) {            displayAsciiArt();        } else if (parser.getArgumentById(HELP_OPT) != null) {            displayAsciiArt();                        System.out.println(JMeterUtils.getResourceFileAsText("org/apache/jmeter/help.txt"));        } else if (parser.getArgumentById(OPTIONS_OPT) != null) {            displayAsciiArt();                        System.out.println(CLUtil.describeOptions(options).toString());        } else if (parser.getArgumentById(SERVER_OPT) != null) {                        try {                                RemoteJMeterEngineImpl.startServer(RmiUtils.getRmiRegistryPort());                startOptionalServers();            } catch (Exception ex) {                                System.err.println("Server failed to start: " + ex);                                throw ex;            }        } else {            String testFile = null;            CLOption testFileOpt = parser.getArgumentById(TESTFILE_OPT);            if (testFileOpt != null) {                testFile = testFileOpt.getArgument();                if (USE_LAST_JMX.equals(testFile)) {                                        testFile = LoadRecentProject.getRecentFile(0);                }            }            CLOption testReportOpt = parser.getArgumentById(REPORT_GENERATING_OPT);            if (testReportOpt != null) {                                String reportFile = testReportOpt.getArgument();                extractAndSetReportOutputFolder(parser, deleteResultFile);                ReportGenerator generator = new ReportGenerator(reportFile, null);                generator.generate();            } else if (parser.getArgumentById(NONGUI_OPT) == null) {                                startGui(testFile);                startOptionalServers();            } else {                                extractAndSetReportOutputFolder(parser, deleteResultFile);                CLOption rem = parser.getArgumentById(REMOTE_OPT_PARAM);                if (rem == null) {                    rem = parser.getArgumentById(REMOTE_OPT);                }                CLOption jtl = parser.getArgumentById(LOGFILE_OPT);                String jtlFile = null;                if (jtl != null) {                                        jtlFile = processLAST(jtl.getArgument(), ".jtl");                }                CLOption reportAtEndOpt = parser.getArgumentById(REPORT_AT_END_OPT);                if (reportAtEndOpt != null && jtlFile == null) {                    throw new IllegalUserActionException("Option -" + ((char) REPORT_AT_END_OPT) + " requires -" + ((char) LOGFILE_OPT) + " option");                }                startNonGui(testFile, jtlFile, rem, reportAtEndOpt != null);                startOptionalServers();            }        }    } catch (IllegalUserActionException e) {                        System.out.println("Incorrect Usage:" + e.getMessage());                System.out.println(CLUtil.describeOptions(options).toString());    } catch (Throwable e) {                                System.out.println("An error occurred: " + e.getMessage());                System.exit(1);    }}
1
private void extractAndSetReportOutputFolder(CLArgsParser parser, boolean deleteReportFolder)
{    CLOption reportOutputFolderOpt = parser.getArgumentById(REPORT_OUTPUT_FOLDER_OPT);    if (reportOutputFolderOpt != null) {        String reportOutputFolder = parser.getArgumentById(REPORT_OUTPUT_FOLDER_OPT).getArgument();        File reportOutputFolderAsFile = new File(reportOutputFolder);        JOrphanUtils.canSafelyWriteToFolder(reportOutputFolderAsFile, deleteReportFolder);        final String reportOutputFolderAbsPath = reportOutputFolderAsFile.getAbsolutePath();                JMeterUtils.setProperty(JMETER_REPORT_OUTPUT_DIR_PROPERTY, reportOutputFolderAbsPath);    }}
1
private void displayAsciiArt()
{    try (InputStream inputStream = JMeter.class.getResourceAsStream("jmeter_as_ascii_art.txt")) {        if (inputStream != null) {            String text = IOUtils.toString(inputStream, StandardCharsets.UTF_8);                        System.out.println(text);        }    } catch (Exception e1) {                        System.out.println(JMeterUtils.getJMeterCopyright());                System.out.println("Version " + JMeterUtils.getJMeterVersion());    }}
0
private void updateClassLoader() throws MalformedURLException
{        updatePath("search_paths", ";", true);        updatePath("user.classpath", File.pathSeparator, true);        updatePath("plugin_dependency_paths", ";", false);}
0
private void updatePath(String property, String sep, boolean cp) throws MalformedURLException
{        String userpath = JMeterUtils.getPropDefault(property, "");    if (userpath.length() <= 0) {        return;    }            StringTokenizer tok = new StringTokenizer(userpath, sep);    while (tok.hasMoreTokens()) {        String path = tok.nextToken();        File f = new File(path);        if (!f.canRead() && !f.isDirectory()) {                    } else {            if (cp) {                                NewDriver.addPath(path);            } else {                                NewDriver.addURL(path);            }        }    }}
1
private void startOptionalServers()
{        int bshport = JMeterUtils.getPropDefault("beanshell.server.port", 0);        String bshfile = JMeterUtils.getPropDefault("beanshell.server.file", "");    if (bshport > 0) {                Runnable t = new BeanShellServer(bshport, bshfile);                t.run();    }    runInitScripts();        int mirrorPort = JMeterUtils.getPropDefault("mirror.server.port", 0);    if (mirrorPort > 0) {                try {            Object instance = ClassTools.construct(            "org.apache.jmeter.protocol.http.control.HttpMirrorControl", mirrorPort);            ClassTools.invoke(instance, "startHttpMirror");        } catch (JMeterException e) {                    }    }}
1
 void runInitScripts()
{            String bshinit = JMeterUtils.getProperty("beanshell.init.file");    if (bshinit != null) {                try {            BeanShellInterpreter bsi = new BeanShellInterpreter();            bsi.source(bshinit);        } catch (ClassNotFoundException | JMeterException e) {            if (log.isWarnEnabled()) {                            }        }    }            String jsr223Init = JMeterUtils.getProperty(JSR223_INIT_FILE);    if (jsr223Init != null) {                File file = new File(jsr223Init);        if (file.exists() && file.canRead()) {            String extension = StringUtils.defaultIfBlank(FilenameUtils.getExtension(jsr223Init), "Groovy");            try (FileReader reader = new FileReader(file)) {                ScriptEngineManager scriptEngineManager = new ScriptEngineManager();                ScriptEngine engine = scriptEngineManager.getEngineByExtension(extension);                if (engine == null) {                                        extension = "Groovy";                    engine = scriptEngineManager.getEngineByName(extension);                }                Bindings bindings = engine.createBindings();                final Logger logger = LoggerFactory.getLogger(JSR223_INIT_FILE);                                bindings.put("log", logger);                Properties props = JMeterUtils.getJMeterProperties();                                bindings.put("props", props);                                                bindings.put("OUT", System.out);                engine.eval(reader, bindings);            } catch (IOException | ScriptException ex) {                            }        } else {                    }    }}
1
private Map<String, List<String>> getEnginesAndExtensions(ScriptEngineManager scriptEngineManager)
{    return scriptEngineManager.getEngineFactories().stream().collect(Collectors.toMap(f -> f.getLanguageName() + " (" + f.getLanguageVersion() + ")", ScriptEngineFactory::getExtensions));}
0
private void setProxy(CLArgsParser parser) throws IllegalUserActionException
{    if (parser.getArgumentById(PROXY_USERNAME) != null) {        Properties jmeterProps = JMeterUtils.getJMeterProperties();        if (parser.getArgumentById(PROXY_PASSWORD) != null) {            String u = parser.getArgumentById(PROXY_USERNAME).getArgument();            String p = parser.getArgumentById(PROXY_PASSWORD).getArgument();            Authenticator.setDefault(new ProxyAuthenticator(u, p));                                    jmeterProps.setProperty(HTTP_PROXY_USER, u);                        jmeterProps.setProperty(HTTP_PROXY_PASS, p);        } else {            String u = parser.getArgumentById(PROXY_USERNAME).getArgument();            Authenticator.setDefault(new ProxyAuthenticator(u, ""));                        jmeterProps.setProperty(HTTP_PROXY_USER, u);        }    }    if (parser.getArgumentById(PROXY_HOST) != null && parser.getArgumentById(PROXY_PORT) != null) {        String h = parser.getArgumentById(PROXY_HOST).getArgument();        String p = parser.getArgumentById(PROXY_PORT).getArgument();                System.setProperty("http.proxyHost", h);                System.setProperty("https.proxyHost", h);                System.setProperty("http.proxyPort", p);                System.setProperty("https.proxyPort", p);        String proxyScheme = null;        if (parser.getArgumentById(PROXY_SCHEME) != null) {            proxyScheme = parser.getArgumentById(PROXY_SCHEME).getArgument();            if (!StringUtils.isBlank(proxyScheme)) {                                System.setProperty("http.proxyScheme", proxyScheme);            }        }        if (log.isInfoEnabled()) {                    }    } else if (parser.getArgumentById(PROXY_HOST) != null || parser.getArgumentById(PROXY_PORT) != null) {                throw new IllegalUserActionException(JMeterUtils.getResString("proxy_cl_error"));    }    if (parser.getArgumentById(NONPROXY_HOSTS) != null) {        String n = parser.getArgumentById(NONPROXY_HOSTS).getArgument();                System.setProperty("http.nonProxyHosts", n);                System.setProperty("https.nonProxyHosts", n);            }}
1
private void initializeProperties(CLArgsParser parser)
{    if (parser.getArgumentById(PROPFILE_OPT) != null) {        JMeterUtils.loadJMeterProperties(parser.getArgumentById(PROPFILE_OPT).getArgument());    } else {        JMeterUtils.loadJMeterProperties(NewDriver.getJMeterDir() + File.separator + "bin" +         File.separator +         "jmeter.properties");    }    JMeterUtils.initLocale();        if (parser.getArgumentById(JMETER_HOME_OPT) == null) {        JMeterUtils.setJMeterHome(NewDriver.getJMeterDir());    } else {        JMeterUtils.setJMeterHome(parser.getArgumentById(JMETER_HOME_OPT).getArgument());    }    Properties jmeterProps = JMeterUtils.getJMeterProperties();    remoteProps = new Properties();            String userProp = JMeterUtils.getPropDefault("user.properties", "");    if (userProp.length() > 0) {                File file = JMeterUtils.findFile(userProp);        if (file.canRead()) {            try (FileInputStream fis = new FileInputStream(file)) {                                Properties tmp = new Properties();                tmp.load(fis);                jmeterProps.putAll(tmp);            } catch (IOException e) {                            }        }    }            String sysProp = JMeterUtils.getPropDefault("system.properties", "");    if (sysProp.length() > 0) {        File file = JMeterUtils.findFile(sysProp);        if (file.canRead()) {            try (FileInputStream fis = new FileInputStream(file)) {                                System.getProperties().load(fis);            } catch (IOException e) {                            }        }    }            List<CLOption> clOptions = parser.getArguments();    for (CLOption option : clOptions) {        String name = option.getArgument(0);        String value = option.getArgument(1);        switch(option.getDescriptor().getId()) {                        case CLOption.TEXT_ARGUMENT:                throw new IllegalArgumentException("Unknown arg: " + option.getArgument());            case             PROPFILE2_OPT:                                try (FileInputStream fis = new FileInputStream(new File(name))) {                    Properties tmp = new Properties();                    tmp.load(fis);                    jmeterProps.putAll(tmp);                } catch (FileNotFoundException e) {                                                        } catch (IOException e) {                                                        }                break;            case SYSTEM_PROPFILE:                                try (FileInputStream fis = new FileInputStream(new File(name))) {                    System.getProperties().load(fis);                } catch (IOException e) {                                        if (log.isWarnEnabled()) {                                            }                }                break;            case SYSTEM_PROPERTY:                if (value.length() > 0) {                                                            System.getProperties().setProperty(name, value);                } else {                                                            System.getProperties().remove(name);                }                break;            case JMETER_PROPERTY:                if (value.length() > 0) {                                                            jmeterProps.setProperty(name, value);                } else {                                                            jmeterProps.remove(name);                }                break;            case JMETER_GLOBAL_PROP:                if (value.length() > 0) {                                                            remoteProps.setProperty(name, value);                } else {                    File propFile = new File(name);                    if (propFile.canRead()) {                                                try (FileInputStream fis = new FileInputStream(propFile)) {                            remoteProps.load(fis);                        } catch (FileNotFoundException e) {                                                        if (log.isWarnEnabled()) {                                                            }                        } catch (IOException e) {                                                        if (log.isWarnEnabled()) {                                                            }                        }                    }                }                break;            case LOGLEVEL:                if (value.length() > 0) {                                                            final Level logLevel = Level.getLevel(value);                    if (logLevel != null) {                        String loggerName = name;                        if (name.startsWith("jmeter") || name.startsWith("jorphan")) {                            loggerName = PACKAGE_PREFIX + name;                        }                        Configurator.setAllLevels(loggerName, logLevel);                    } else {                                            }                } else {                                                            final Level logLevel = Level.getLevel(name);                    if (logLevel != null) {                        Configurator.setRootLevel(logLevel);                    } else {                                            }                }                break;            case REMOTE_STOP:                remoteStop = true;                break;            case FORCE_DELETE_RESULT_FILE:                deleteResultFile = true;                break;            default:                                break;        }    }    String sampleVariables = (String) jmeterProps.get(SampleEvent.SAMPLE_VARIABLES);    if (sampleVariables != null) {        remoteProps.put(SampleEvent.SAMPLE_VARIABLES, sampleVariables);    }    jmeterProps.put("jmeter.version", JMeterUtils.getJMeterVersion());}
1
private String processLAST(final String jmlogfile, final String suffix)
{    if (USE_LAST_JMX.equals(jmlogfile) || USE_LAST_JMX.concat(suffix).equals(jmlogfile)) {                String last = LoadRecentProject.getRecentFile(0);        if (last.toUpperCase(Locale.ENGLISH).endsWith(JMX_SUFFIX)) {            return last.substring(0, last.length() - JMX_SUFFIX.length()).concat(suffix);        }    }    return jmlogfile;}
0
private void startNonGui(String testFile, String logFile, CLOption remoteStart, boolean generateReportDashboard) throws IllegalUserActionException, ConfigurationException
{                System.setProperty(JMETER_NON_GUI, "true");        JMeter driver = new JMeter();    driver.remoteProps = this.remoteProps;    driver.remoteStop = this.remoteStop;    driver.deleteResultFile = this.deleteResultFile;    PluginManager.install(this, false);    String remoteHostsString = null;    if (remoteStart != null) {        remoteHostsString = remoteStart.getArgument();        if (remoteHostsString == null) {            remoteHostsString = JMeterUtils.getPropDefault(            "remote_hosts",             "127.0.0.1");        }    }    if (testFile == null) {        throw new IllegalUserActionException("Non-GUI runs require a test plan");    }    driver.runNonGui(testFile, logFile, remoteStart != null, remoteHostsString, generateReportDashboard);}
0
 void runNonGui(String testFile, String logFile, boolean remoteStart, String remoteHostsString, boolean generateReportDashboard) throws ConfigurationException
{    try {        File f = new File(testFile);        if (!f.exists() || !f.isFile()) {            throw new ConfigurationException("The file " + f.getAbsolutePath() + " doesn't exist or can't be opened");        }        FileServer.getFileServer().setBaseForScript(f);        HashTree tree = SaveService.loadTree(f);                @SuppressWarnings("deprecation")        JMeterTreeModel         treeModel = new JMeterTreeModel(new Object());        JMeterTreeNode root = (JMeterTreeNode) treeModel.getRoot();        treeModel.addSubTree(tree, root);                SearchByClass<ReplaceableController> replaceableControllers = new SearchByClass<>(ReplaceableController.class);        tree.traverse(replaceableControllers);        Collection<ReplaceableController> replaceableControllersRes = replaceableControllers.getSearchResults();        for (ReplaceableController replaceableController : replaceableControllersRes) {            replaceableController.resolveReplacementSubTree(root);        }                        HashTree clonedTree = convertSubTree(tree, true);        Summariser summariser = null;                String summariserName = JMeterUtils.getPropDefault("summariser.name", "");        if (summariserName.length() > 0) {                        println("Creating summariser <" + summariserName + ">");            summariser = new Summariser(summariserName);        }        ResultCollector resultCollector = null;        if (logFile != null) {            resultCollector = new ResultCollector(summariser);            resultCollector.setFilename(logFile);            clonedTree.add(clonedTree.getArray()[0], resultCollector);        } else {                        if (summariser != null) {                clonedTree.add(clonedTree.getArray()[0], summariser);            }        }        if (deleteResultFile) {            SearchByClass<ResultCollector> resultListeners = new SearchByClass<>(ResultCollector.class);            clonedTree.traverse(resultListeners);            Iterator<ResultCollector> irc = resultListeners.getSearchResults().iterator();            while (irc.hasNext()) {                ResultCollector rc = irc.next();                File resultFile = new File(rc.getFilename());                if (resultFile.exists() && !resultFile.delete()) {                    throw new IllegalStateException("Could not delete results file " + resultFile.getAbsolutePath() + "(canRead:" + resultFile.canRead() + ", canWrite:" + resultFile.canWrite() + ")");                }            }        }        ReportGenerator reportGenerator = null;        if (logFile != null && generateReportDashboard) {            reportGenerator = new ReportGenerator(logFile, resultCollector);        }                                clonedTree.add(clonedTree.getArray()[0], new RemoteThreadsListenerTestElement());        List<JMeterEngine> engines = new LinkedList<>();        clonedTree.add(clonedTree.getArray()[0], new ListenToTest(remoteStart && remoteStop ? engines : null, reportGenerator));        println("Created the tree successfully using " + testFile);        if (!remoteStart) {            JMeterEngine engine = new StandardJMeterEngine();            engine.configure(clonedTree);            long now = System.currentTimeMillis();            println("Starting the test @ " + new Date(now) + " (" + now + ")");            engine.runTest();            engines.add(engine);        } else {                        java.util.StringTokenizer st = new java.util.StringTokenizer(remoteHostsString, ",");            List<String> hosts = new LinkedList<>();            while (st.hasMoreElements()) {                hosts.add((String) st.nextElement());            }            DistributedRunner distributedRunner = new DistributedRunner(this.remoteProps);                        distributedRunner.setStdout(System.out);                        distributedRunner.setStdErr(System.err);            distributedRunner.init(hosts, clonedTree);            engines.addAll(distributedRunner.getEngines());            distributedRunner.start();        }        startUdpDdaemon(engines);    } catch (ConfigurationException e) {        throw e;    } catch (Exception e) {                System.out.println("Error in NonGUIDriver " + e.toString());                throw new ConfigurationException("Error in NonGUIDriver " + e.getMessage(), e);    }}
1
public static void convertSubTree(HashTree tree)
{    convertSubTree(tree, false);}
0
public static HashTree convertSubTree(HashTree tree, boolean cloneAtEnd)
{    pConvertSubTree(tree);    if (cloneAtEnd) {        TreeCloner cloner = new TreeCloner(false);        tree.traverse(cloner);        return cloner.getClonedTree();    }    return tree;}
0
private static void pConvertSubTree(HashTree tree)
{    LinkedList<Object> copyList = new LinkedList<>(tree.list());    for (Object o : copyList) {        if (o instanceof TestElement) {            TestElement item = (TestElement) o;            if (item.isEnabled()) {                if (item instanceof ReplaceableController) {                    ReplaceableController rc = ensureReplaceableControllerIsLoaded(item);                    HashTree subTree = tree.getTree(item);                    if (subTree != null) {                        HashTree replacementTree = rc.getReplacementSubTree();                        if (replacementTree != null) {                            pConvertSubTree(replacementTree);                            tree.replaceKey(item, rc);                            tree.set(rc, replacementTree);                        }                    }                } else {                                        pConvertSubTree(tree.getTree(item));                }            } else {                                tree.remove(item);            }        } else {                        JMeterTreeNode item = (JMeterTreeNode) o;            if (item.isEnabled()) {                                if (item.getUserObject() instanceof ReplaceableController) {                    TestElement controllerAsItem = item.getTestElement();                    ReplaceableController rc = ensureReplaceableControllerIsLoaded(controllerAsItem);                    HashTree subTree = tree.getTree(item);                    if (subTree != null) {                        HashTree replacementTree = rc.getReplacementSubTree();                        if (replacementTree != null) {                            pConvertSubTree(replacementTree);                            tree.replaceKey(item, rc);                            tree.set(rc, replacementTree);                        }                    }                } else {                                        pConvertSubTree(tree.getTree(item));                    TestElement testElement = item.getTestElement();                    tree.replaceKey(item, testElement);                }            } else {                                tree.remove(item);            }        }    }}
0
private static ReplaceableController ensureReplaceableControllerIsLoaded(TestElement item)
{    ReplaceableController rc;        if ("org.apache.jmeter.control.ModuleController".equals(item.getClass().getName())) {                rc = (ReplaceableController) item;    } else {                rc = (ReplaceableController) item.clone();    }    return rc;}
0
public void testEnded(String host)
{    final long now = System.currentTimeMillis();        if (startedEngines.decrementAndGet() <= 0) {        Thread stopSoon = new Thread(this);                        stopSoon.setDaemon(false);        stopSoon.start();    }}
1
public void testEnded()
{    long now = System.currentTimeMillis();    println("Tidying up ...    @ " + new Date(now) + " (" + now + ")");    try {        generateReport();    } catch (Exception e) {                System.err.println("Error generating the report: " + e);            }    checkForRemainingThreads();    println("... end of run");}
1
public void testStarted(String host)
{    final long now = System.currentTimeMillis();    }
1
public void testStarted()
{    if (log.isInfoEnabled()) {        final long now = System.currentTimeMillis();                    }}
1
public void run()
{    long now = System.currentTimeMillis();    println("Tidying up remote @ " + new Date(now) + " (" + now + ")");    if (engines != null) {                println("Exiting remote servers");        for (JMeterEngine e : engines) {            e.exit();        }    }    try {                TimeUnit.SECONDS.sleep(5);    } catch (InterruptedException ignored) {        Thread.currentThread().interrupt();    }    ClientJMeterEngine.tidyRMI(log);    try {        generateReport();    } catch (Exception e) {                System.err.println("Error generating the report: " + e);            }    checkForRemainingThreads();    println("... end of run");}
1
private void generateReport()
{    if (reportGenerator != null) {        try {                        reportGenerator.generate();                    } catch (GenerationException ex) {                    }    }}
1
private void checkForRemainingThreads()
{            final int pauseToCheckForRemainingThreads =     JMeterUtils.getPropDefault("jmeter.exit.check.pause", 2000);    if (pauseToCheckForRemainingThreads > 0) {        Thread daemon = new Thread() {            @Override            public void run() {                try {                                        TimeUnit.MILLISECONDS.sleep(pauseToCheckForRemainingThreads);                } catch (InterruptedException ignored) {                    Thread.currentThread().interrupt();                }                                                                System.out.println("The JVM should have exited but did not.");                                System.out.println("The following non-daemon threads are still running (DestroyJavaVM is OK):");                JOrphanUtils.displayThreads(false);            }        };        daemon.setDaemon(true);        daemon.start();    } else if (pauseToCheckForRemainingThreads <= 0) {            }}
1
public void run()
{    try {                TimeUnit.MILLISECONDS.sleep(pauseToCheckForRemainingThreads);    } catch (InterruptedException ignored) {        Thread.currentThread().interrupt();    }                System.out.println("The JVM should have exited but did not.");        System.out.println("The following non-daemon threads are still running (DestroyJavaVM is OK):");    JOrphanUtils.displayThreads(false);}
0
private static void println(String str)
{        System.out.println(str);}
0
public String[][] getIconMappings()
{        final String defaultIconProp = "org/apache/jmeter/images/icon.properties";    final String iconSize = JMeterUtils.getPropDefault(TREE_ICON_SIZE, DEFAULT_TREE_ICON_SIZE);        String iconProp = JMeterUtils.getPropDefault("jmeter.icons", defaultIconProp);    Properties p = JMeterUtils.loadProperties(iconProp);    if (p == null && !iconProp.equals(defaultIconProp)) {                iconProp = defaultIconProp;        p = JMeterUtils.loadProperties(iconProp);    }    if (p == null) {                return DEFAULT_ICONS;    }        String[][] iconlist = new String[p.size()][3];    Enumeration<?> pe = p.keys();    int i = 0;    while (pe.hasMoreElements()) {        String key = (String) pe.nextElement();                String[] icons = JOrphanUtils.split(p.getProperty(key), " ");        iconlist[i][0] = key;        iconlist[i][1] = icons[0].replace(KEY_SIZE, iconSize);        if (icons.length > 1) {            iconlist[i][2] = icons[1].replace(KEY_SIZE, iconSize);        }        i++;    }    return iconlist;}
1
public String[][] getResourceBundles()
{    return new String[0][];}
0
public static boolean isNonGUI()
{        return "true".equals(System.getProperty(JMeter.JMETER_NON_GUI));}
0
private static void startUdpDdaemon(final List<JMeterEngine> engines)
{        int port = JMeterUtils.getPropDefault("jmeterengine.nongui.port", UDP_PORT_DEFAULT);        int maxPort = JMeterUtils.getPropDefault("jmeterengine.nongui.maxport", 4455);    if (port > 1000) {        final DatagramSocket socket = getSocket(port, maxPort);        if (socket != null) {            Thread waiter = new Thread("UDP Listener") {                @Override                public void run() {                    waitForSignals(engines, socket);                }            };            waiter.setDaemon(true);            waiter.start();        } else {                        System.out.println("Failed to create UDP port");        }    }}
0
public void run()
{    waitForSignals(engines, socket);}
0
private static void waitForSignals(final List<JMeterEngine> engines, DatagramSocket socket)
{    byte[] buf = new byte[80];        System.out.println("Waiting for possible Shutdown/StopTestNow/HeapDump/ThreadDump message on port " + socket.getLocalPort());    DatagramPacket request = new DatagramPacket(buf, buf.length);    try {        while (true) {            socket.receive(request);            InetAddress address = request.getAddress();                        if (address.isLoopbackAddress()) {                String command = new String(request.getData(), request.getOffset(), request.getLength(), StandardCharsets.US_ASCII);                                System.out.println("Command: " + command + " received from " + address);                                switch(command) {                    case "StopTestNow":                        for (JMeterEngine engine : engines) {                            engine.stopTest(true);                        }                        break;                    case "Shutdown":                        for (JMeterEngine engine : engines) {                            engine.stopTest(false);                        }                        break;                    case "HeapDump":                        HeapDumper.dumpHeap();                        break;                    case "ThreadDump":                        ThreadDumper.threadDump();                        break;                    default:                                                System.out.println("Command: " + command + " not recognised ");                }            }        }    } catch (Exception e) {                System.out.println(e);    } finally {        socket.close();    }}
1
private static DatagramSocket getSocket(int udpPort, int udpPortMax)
{    DatagramSocket socket = null;    int i = udpPort;    while (i <= udpPortMax) {        try {            socket = new DatagramSocket(i);            break;        } catch (SocketException e) {                        i++;        }    }    return socket;}
0
public static void install(JMeterPlugin plugin, boolean useGui)
{    if (useGui) {        instance.installPlugin(plugin);    }}
0
private void installPlugin(JMeterPlugin plugin)
{    String[][] icons = plugin.getIconMappings();    ClassLoader classloader = plugin.getClass().getClassLoader();    for (String[] icon : icons) {        URL resource = classloader.getResource(icon[1].trim());        if (resource == null) {                    } else {            GUIFactory.registerIcon(icon[0], new ImageIcon(resource));            if (icon.length > 2 && icon[2] != null) {                URL resource2 = classloader.getResource(icon[2].trim());                if (resource2 == null) {                                    } else {                    GUIFactory.registerDisabledIcon(icon[0], new ImageIcon(resource2));                }            }        }    }}
1
public Collection<String> getMenuCategories()
{    return Arrays.asList(MenuFactory.POST_PROCESSORS);}
0
public JPopupMenu createPopupMenu()
{    return MenuFactory.getDefaultExtractorMenu();}
0
public Collection<String> getMenuCategories()
{    return Arrays.asList(MenuFactory.PRE_PROCESSORS);}
0
protected PasswordAuthentication getPasswordAuthentication()
{    switch(getRequestorType()) {        case PROXY:            return new PasswordAuthentication(userName, password);        case SERVER:            break;        default:            break;    }    return null;}
0
public static TProperty convert(String value, Class<TProperty> clazz) throws ConfigurationException
{    try {        return Converters.convert(clazz, value);    } catch (ConvertException ex) {        throw new ConfigurationException(String.format(NOT_SUPPORTED_CONVERSION_FMT, value, clazz.getName()));    }}
0
public Map<String, SubConfiguration> getGraphExtraConfigurations()
{    return graphExtraConfigurations;}
0
public final boolean filtersOnlySampleSeries()
{    return filtersOnlySampleSeries;}
0
public final void filtersOnlySampleSeries(boolean filtersOnlySampleSeries)
{    this.filtersOnlySampleSeries = filtersOnlySampleSeries;}
0
public final String getSeriesFilter()
{    return seriesFilter;}
0
public final void setSeriesFilter(String seriesFilter)
{    this.seriesFilter = seriesFilter;}
0
public final boolean showControllerSeriesOnly()
{    return showControllerSeriesOnly;}
0
public final void showControllerSeriesOnly(boolean showControllerSeriesOnly)
{    this.showControllerSeriesOnly = showControllerSeriesOnly;}
0
public final boolean excludesControllers()
{    return excludeControllers;}
0
public final void setExcludeControllers(boolean excludeControllers)
{    this.excludeControllers = excludeControllers;}
0
public final String getTitle()
{    return title;}
0
public final void setTitle(String title)
{    this.title = title;}
0
public final String getClassName()
{    return className;}
0
public final void setClassName(String className)
{    this.className = className;}
0
public ExporterConfiguration createSubConfiguration()
{    return new ExporterConfiguration();}
0
public void initialize(String exportId, ExporterConfiguration exportConfiguration) throws ConfigurationException
{            String className = getRequiredProperty(props, getExporterPropertyKey(exportId, SUBCONF_KEY_CLASSNAME), "", String.class);        exportConfiguration.setClassName(className);            boolean filtersOnlySampleSeries = getRequiredProperty(props, getExporterPropertyKey(exportId, EXPORTER_KEY_FILTERS_ONLY_SAMPLE_SERIES), EXPORTER_KEY_FILTERS_ONLY_SAMPLE_SERIES_DEFAULT, Boolean.class).booleanValue();    exportConfiguration.filtersOnlySampleSeries(filtersOnlySampleSeries);        String seriesFilter = getRequiredProperty(props, getExporterPropertyKey(exportId, EXPORTER_KEY_SERIES_FILTER), EXPORTER_KEY_SERIES_FILTER_DEFAULT, String.class);    exportConfiguration.setSeriesFilter(seriesFilter);            boolean showControllerSeriesOnly = getRequiredProperty(props, getExporterPropertyKey(exportId, EXPORTER_KEY_SHOW_CONTROLLERS_ONLY), EXPORTER_KEY_SHOW_CONTROLLERS_ONLY_DEFAULT, Boolean.class).booleanValue();    exportConfiguration.showControllerSeriesOnly(showControllerSeriesOnly);        Map<String, SubConfiguration> graphExtraConfigurations = exportConfiguration.getGraphExtraConfigurations();    loadSubConfiguration(graphExtraConfigurations, props, getSubConfigurationPropertyKey(REPORT_GENERATOR_EXPORTER_KEY_PREFIX, exportId, EXPORTER_KEY_GRAPH_EXTRA_OPTIONS), true, new SubConfigurationFactory<SubConfiguration>() {        @Override        public SubConfiguration createSubConfiguration() {            return new SubConfiguration();        }        @Override        public void initialize(String subConfId, SubConfiguration subConfiguration) {                }    });}
1
public SubConfiguration createSubConfiguration()
{    return new SubConfiguration();}
0
public void initialize(String subConfId, SubConfiguration subConfiguration)
{}
0
public GraphConfiguration createSubConfiguration()
{    return new GraphConfiguration();}
0
public void initialize(String graphId, GraphConfiguration graphConfiguration) throws ConfigurationException
{                boolean excludeControllers = getRequiredProperty(props, getGraphPropertyKey(graphId, GRAPH_KEY_EXCLUDE_CONTROLLERS), GRAPH_KEY_EXCLUDE_CONTROLLERS_DEFAULT, Boolean.class).booleanValue();    graphConfiguration.setExcludeControllers(excludeControllers);        String title = getRequiredProperty(props, getGraphPropertyKey(graphId, GRAPH_KEY_TITLE), GRAPH_KEY_TITLE_DEFAULT, String.class);    graphConfiguration.setTitle(title);        String className = getRequiredProperty(props, getGraphPropertyKey(graphId, SUBCONF_KEY_CLASSNAME), "", String.class);        graphConfiguration.setClassName(className);}
1
public final String getSampleFilter()
{    return sampleFilter;}
0
public final void setSampleFilter(String sampleFilter)
{    this.sampleFilter = sampleFilter;}
0
public final File getTempDirectory()
{    return tempDirectory;}
0
public final void setTempDirectory(File tempDirectory)
{    this.tempDirectory = tempDirectory;}
0
public final long getApdexSatisfiedThreshold()
{    return apdexSatisfiedThreshold;}
0
public final void setApdexSatisfiedThreshold(long apdexSatisfiedThreshold)
{    this.apdexSatisfiedThreshold = apdexSatisfiedThreshold;}
0
public final long getApdexToleratedThreshold()
{    return apdexToleratedThreshold;}
0
public final void setApdexToleratedThreshold(long apdexToleratedThreshold)
{    this.apdexToleratedThreshold = apdexToleratedThreshold;}
0
public Map<String, Long[]> getApdexPerTransaction()
{    return apdexPerTransaction;}
0
public void setApdexPerTransaction(Map<String, Long[]> apdexPerTransaction)
{    this.apdexPerTransaction = apdexPerTransaction;}
0
public final Map<String, ExporterConfiguration> getExportConfigurations()
{    return exportConfigurations;}
0
public final Map<String, GraphConfiguration> getGraphConfigurations()
{    return graphConfigurations;}
0
public static String getSubConfigurationPropertyPrefix(String keyPrefix, String subConfId)
{    return keyPrefix + KEY_DELIMITER + subConfId;}
0
public static String getSubConfigurationPropertyKey(String keyPrefix, String subConfId, String propertyName)
{    return getSubConfigurationPropertyPrefix(keyPrefix, subConfId) + KEY_DELIMITER + propertyName;}
0
public static String getExporterPropertyKey(String exporterId, String propertyName)
{    return getSubConfigurationPropertyPrefix(REPORT_GENERATOR_EXPORTER_KEY_PREFIX, exporterId) + KEY_DELIMITER + propertyName;}
0
public static String getGraphPropertyKey(String graphId, String propertyName)
{    return getSubConfigurationPropertyPrefix(REPORT_GENERATOR_GRAPH_KEY_PREFIX, graphId) + KEY_DELIMITER + propertyName;}
0
private static TProperty getProperty(Props props, String key, TProperty defaultValue, Class<TProperty> clazz) throws ConfigurationException
{    String value = props.getValue(key);    if (value == null) {                return defaultValue;    }    return ConfigurationUtils.convert(value, clazz);}
1
private static TProperty getOptionalProperty(Props props, String key, Class<TProperty> clazz) throws ConfigurationException
{    TProperty property = getProperty(props, key, null, clazz);    if (property != null) {            }    return property;}
1
private static TProperty getRequiredProperty(Props props, String key, TProperty defaultValue, Class<TProperty> clazz) throws ConfigurationException
{    TProperty property = getProperty(props, key, defaultValue, clazz);        return property;}
1
private static void loadSubConfiguration(Map<String, TSubConf> subConfigurations, Props props, String propertyPrefix, boolean noPropertyKey, SubConfigurationFactory<TSubConf> factory) throws ConfigurationException
{    for (Map.Entry<String, Object> entry : props.innerMap(propertyPrefix).entrySet()) {        String key = entry.getKey();        int index = key.indexOf(KEY_DELIMITER);        if (index > 0) {            String name = key.substring(0, index);            TSubConf subConfiguration = subConfigurations.get(name);            if (subConfiguration == null) {                subConfiguration = factory.createSubConfiguration();                subConfigurations.put(name, subConfiguration);            }        } else {                    }    }        for (Map.Entry<String, TSubConf> entry : subConfigurations.entrySet()) {        String subConfId = entry.getKey();        final TSubConf subConfiguration = entry.getValue();                factory.initialize(subConfId, subConfiguration);                Map<String, Object> extraKeys = props.innerMap(noPropertyKey ? getSubConfigurationPropertyPrefix(propertyPrefix, subConfId) : getSubConfigurationPropertyKey(propertyPrefix, subConfId, SUBCONF_KEY_PROPERTY));        Map<String, String> extraProperties = subConfiguration.getProperties();        for (Map.Entry<String, Object> entryProperty : extraKeys.entrySet()) {            extraProperties.put(entryProperty.getKey(), (String) entryProperty.getValue());        }    }}
1
public static ReportGeneratorConfiguration loadFromProperties(Properties properties) throws ConfigurationException
{        ReportGeneratorConfiguration configuration = new ReportGeneratorConfiguration();        final Props props = new Props();        props.load(properties);        final File tempDirectory = getRequiredProperty(props, REPORT_GENERATOR_KEY_TEMP_DIR, REPORT_GENERATOR_KEY_TEMP_DIR_DEFAULT, File.class);    configuration.setTempDirectory(tempDirectory);        final long apdexSatisfiedThreshold = getRequiredProperty(props, REPORT_GENERATOR_KEY_APDEX_SATISFIED_THRESHOLD, REPORT_GENERATOR_KEY_APDEX_SATISFIED_THRESHOLD_DEFAULT, long.class).longValue();    configuration.setApdexSatisfiedThreshold(apdexSatisfiedThreshold);        final long apdexToleratedThreshold = getRequiredProperty(props, REPORT_GENERATOR_KEY_APDEX_TOLERATED_THRESHOLD, REPORT_GENERATOR_KEY_APDEX_TOLERATED_THRESHOLD_DEFAULT, long.class).longValue();    configuration.setApdexToleratedThreshold(apdexToleratedThreshold);        final String apdexPerTransaction = getOptionalProperty(props, REPORT_GENERATOR_KEY_APDEX_PER_TRANSACTION, String.class);    configuration.setApdexPerTransaction(getApdexPerTransactionParts(apdexPerTransaction));    final boolean ignoreTCFromTop5ErrorsBySampler = getRequiredProperty(props, REPORT_GENERATOR_KEY_EXCLUDE_TC_FROM_TOP5_ERRORS_BY_SAMPLER, Boolean.TRUE, Boolean.class).booleanValue();    configuration.setIgnoreTCFromTop5ErrorsBySampler(ignoreTCFromTop5ErrorsBySampler);        final String sampleFilter = getOptionalProperty(props, REPORT_GENERATOR_KEY_SAMPLE_FILTER, String.class);    configuration.setSampleFilter(sampleFilter);    final String reportTitle = getOptionalProperty(props, REPORT_GENERATOR_KEY_REPORT_TITLE, String.class);    configuration.setReportTitle(reportTitle);    Date reportStartDate = null;    Date reportEndDate = null;    final String startDateValue = getOptionalProperty(props, REPORT_GENERATOR_KEY_START_DATE, String.class);    final String endDateValue = getOptionalProperty(props, REPORT_GENERATOR_KEY_END_DATE, String.class);    String rangeDateFormat = getOptionalProperty(props, REPORT_GENERATOR_KEY_RANGE_DATE_FORMAT, String.class);    if (StringUtils.isEmpty(rangeDateFormat)) {        rangeDateFormat = RANGE_DATE_FORMAT_DEFAULT;    }    SimpleDateFormat dateFormat = new SimpleDateFormat(rangeDateFormat, Locale.ENGLISH);    try {        if (!StringUtils.isEmpty(startDateValue)) {            reportStartDate = dateFormat.parse(startDateValue);            configuration.setStartDate(reportStartDate);        }    } catch (ParseException e) {            }    try {        if (!StringUtils.isEmpty(endDateValue)) {            reportEndDate = dateFormat.parse(endDateValue);            configuration.setEndDate(reportEndDate);        }    } catch (ParseException e) {            }            final Map<String, GraphConfiguration> graphConfigurations = configuration.getGraphConfigurations();    loadSubConfiguration(graphConfigurations, props, REPORT_GENERATOR_GRAPH_KEY_PREFIX, false, new GraphConfigurationFactory(props));    if (graphConfigurations.isEmpty()) {            }        final Map<String, ExporterConfiguration> exportConfigurations = configuration.getExportConfigurations();    loadSubConfiguration(exportConfigurations, props, REPORT_GENERATOR_EXPORTER_KEY_PREFIX, false, new ExporterConfigurationFactory(props));    if (exportConfigurations.isEmpty()) {            }        return configuration;}
1
public static Map<String, Long[]> getApdexPerTransactionParts(String apdexPerTransaction)
{    Map<String, Long[]> specificApdexes = new HashMap<>();    if (StringUtils.isEmpty(apdexPerTransaction) || apdexPerTransaction.trim().length() == 0) {            } else {                String[] parts = apdexPerTransaction.split("[;]");        for (String chunk : parts) {            int colonSeparator = chunk.lastIndexOf(':');            int pipeSeparator = chunk.lastIndexOf('|');            if (colonSeparator == -1 || pipeSeparator == -1 || pipeSeparator <= colonSeparator) {                                continue;            }            String key = chunk.substring(0, colonSeparator).trim();            Long satisfied = Long.valueOf(chunk.substring(colonSeparator + 1, pipeSeparator).trim());            Long tolerated = Long.valueOf(chunk.substring(pipeSeparator + 1).trim());            specificApdexes.put(key, new Long[] { satisfied, tolerated });        }    }    return specificApdexes;}
1
public String getReportTitle()
{    return reportTitle;}
0
public void setReportTitle(String reportTitle)
{    this.reportTitle = reportTitle;}
0
public Pattern getFilteredSamplesPattern()
{    if (StringUtils.isEmpty(sampleFilter)) {        return null;    }    if (filteredSamplesPattern == null) {        filteredSamplesPattern = Pattern.compile(sampleFilter);    }    return filteredSamplesPattern;}
0
public Date getStartDate()
{    return startDate;}
0
public void setStartDate(Date startDate)
{    this.startDate = startDate;}
0
public Date getEndDate()
{    return endDate;}
0
public void setEndDate(Date endDate)
{    this.endDate = endDate;}
0
public boolean isIgnoreTCFromTop5ErrorsBySampler()
{    return ignoreTCFromTop5ErrorsBySampler;}
0
public void setIgnoreTCFromTop5ErrorsBySampler(boolean ignoreTCFromTop5ErrorsBySampler)
{    this.ignoreTCFromTop5ErrorsBySampler = ignoreTCFromTop5ErrorsBySampler;}
0
public final Map<String, String> getProperties()
{    return properties;}
0
public final TProperty getProperty(String key, TProperty defaultValue, Class<TProperty> clazz) throws ConfigurationException
{    String value = properties.get(key);    TProperty result;    if (value == null) {        result = defaultValue;    } else {        result = ConfigurationUtils.convert(value, clazz);    }    return result;}
0
public void setWriter(Writer newWriter)
{        Validate.notNull(newWriter, "writer must not be null.");    if (this.writer != null) {                JOrphanUtils.closeQuietly(this.writer);    }    this.writer = new PrintWriter(new BufferedWriter(newWriter, BUF_SIZE), false);}
0
public void setOutputStream(OutputStream out)
{        Validate.notNull(out, "out must not be null.");    try {        setWriter(new OutputStreamWriter(out, CHARSET));    } catch (UnsupportedEncodingException e) {            }}
1
public void setOutputFile(File output)
{    FileOutputStream fos = null;    try {                fos = new FileOutputStream(output);    } catch (Exception e) {        throw new SampleException(e.getMessage(), e);    }    setOutputStream(fos);}
0
public void close()
{    JOrphanUtils.closeQuietly(writer);    this.writer = null;}
0
 void flush()
{    writer.flush();}
0
public boolean matches(Sample sample)
{    return sample.isController();}
0
public Character convert(String value) throws ConvertException
{    try {        return Character.valueOf(value.charAt(0));    } catch (NumberFormatException ex) {        throw new ConvertException(value, Character.class.getName(), ex);    }}
0
public Double convert(String value) throws ConvertException
{    try {        return Double.valueOf(value);    } catch (NumberFormatException ex) {        throw new ConvertException(value, Double.class.getName(), ex);    }}
0
public Float convert(String value) throws ConvertException
{    try {        return Float.valueOf(value);    } catch (NumberFormatException ex) {        throw new ConvertException(value, Float.class.getName(), ex);    }}
0
public Integer convert(String value) throws ConvertException
{    try {        return Integer.valueOf(value.trim());    } catch (NumberFormatException ex) {        throw new ConvertException(value, Integer.class.getName(), ex);    }}
0
public Long convert(String value) throws ConvertException
{    try {        return Long.valueOf(value.trim());    } catch (NumberFormatException ex) {        throw new ConvertException(value, Long.class.getName(), ex);    }}
0
public File convert(String value) throws ConvertException
{    return new File(value);}
0
public static StringConverter<T> getConverter(Class<T> clazz)
{    return (StringConverter<T>) CONVERTER_MAP.get(clazz);}
0
public static T convert(Class<T> clazz, String value) throws ConvertException
{    T result;    if (clazz.isAssignableFrom(String.class)) {                @SuppressWarnings("unchecked")        T temp = (T) value;        result = temp;    } else {        StringConverter<T> converter = Converters.getConverter(clazz);        if (converter == null) {            throw new ConvertException(value, clazz.getName());        }        result = converter.convert(value);    }    return result;}
0
public char getSeparator()
{    return separator;}
0
private Pair<Boolean, SampleMetadata> readMetadata(char separator, boolean useSaveSampleCfg)
{    try {        SampleMetadata result;                String line = reader.readLine();        this.row++;        if (line == null) {            throw new IllegalArgumentException("File is empty");        }        boolean hasHeaders = false;                if (useSaveSampleCfg && CSVSaveService.getSampleSaveConfiguration(line, file.getAbsolutePath()) == null) {                        if (log.isWarnEnabled()) {                            }            System.out.println("File '" + file.getAbsolutePath() + "' does not contain the field names header, " + "ensure the jmeter.save.saveservice.* properties are the same " + "as when the CSV file was created or the file may be read incorrectly " + "when generating report");            result = new SampleMetadata(SampleSaveConfiguration.staticConfig());        } else {                        result = new SampleMetaDataParser(separator).parse(line);            hasHeaders = true;        }        return Pair.of(hasHeaders, result);    } catch (Exception e) {        throw new SampleException("Could not read metadata !", e);    }}
1
public SampleMetadata getMetadata()
{    return metadata;}
0
private Sample nextSample()
{    String[] data;    try {        data = CSVSaveService.csvReadFile(reader, separator);        Sample sample = null;        if (data.length > 0) {            assertCorrectColumns(data);            sample = new Sample(row++, metadata, data);        }        return sample;    } catch (IOException e) {        throw new SampleException("Could not read sample <" + row + ">", e);    }}
0
private void assertCorrectColumns(String[] data)
{    if (data.length != columnCount + numberOfSampleVariablesInCsv) {        if (log.isWarnEnabled()) {                    }        throw new SampleException("Mismatch between expected number of columns:" + columnCount + " and columns in CSV file:" + data.length + ", check your jmeter.save.saveservice.* configuration or check if line " + (row + 2) + " in '" + file + "' is complete");    }}
1
public Sample readSample()
{    Sample out = lastSampleRead;    lastSampleRead = nextSample();    return out;}
0
public Sample peek()
{    return lastSampleRead;}
0
public boolean hasNext()
{    return lastSampleRead != null;}
0
public void close()
{    JOrphanUtils.closeQuietly(isr);    JOrphanUtils.closeQuietly(fis);    JOrphanUtils.closeQuietly(reader);}
0
public void setSeparator(char separator)
{    this.separator = separator;}
0
private void reset()
{    sampleCount = 0;}
0
public void setWriter(Writer writer)
{    super.setWriter(writer);    reset();}
0
public void writeHeader()
{    Validate.validState(writer != null, "No writer set! Call setWriter() first!");    StringBuilder row = new StringBuilder();    for (int i = 0; i < columnCount; i++) {        row.append(metadata.getColumnName(i));        if (i < columnCount - 1) {            row.append(separator);        }    }    writer.println(row.toString());}
0
public long write(Sample sample)
{    Validate.validState(writer != null, "No writer set! Call setWriter() first!");    StringBuilder row = new StringBuilder();    char[] specials = new char[] { separator, CSVSaveService.QUOTING_CHAR, CharUtils.CR, CharUtils.LF };    for (int i = 0; i < columnCount; i++) {        String data = sample.getData(i);        row.append(CSVSaveService.quoteDelimiters(data, specials)).append(separator);    }    row.setLength(row.length() - 1);    writer.println(row.toString());    sampleCount++;    return sampleCount;}
0
public static String toJsonArray(final String... array)
{    return '[' + StringUtils.join(array, ", ") + ']';}
0
public static String toJsonObject(Map<String, String> map)
{    String result = "{";    if (map != null) {        String[] array = new String[map.size()];        int index = 0;        for (Map.Entry<String, String> entry : map.entrySet()) {            array[index] = '"' + entry.getKey() + "\": " + entry.getValue();            index++;        }        result += StringUtils.join(array, ", ");    }    return result + "}";}
0
public long getSampleRow()
{    return row;}
0
public String getData(int index)
{    return data[index];}
0
public String getData(String name)
{    return data[metadata.ensureIndexOf(name)];}
0
public T getData(Class<T> clazz, int index, String fieldName)
{    try {        return Converters.convert(clazz, data[index]);    } catch (ConvertException ex) {        throw new SampleException(ERROR_ON_SAMPLE + (row + 1) + " converting field:" + fieldName + " at column:" + index + " to:" + clazz.getName() + ", fieldValue:'" + data[index] + "'", ex);    }}
0
public T getData(Class<T> clazz, String name)
{    return getData(clazz, metadata.ensureIndexOf(name), name);}
0
public String toString()
{    return StringUtils.join(data, metadata.getSeparator());}
0
public long getTimestamp()
{    return getData(long.class, CSVSaveService.TIME_STAMP).longValue();}
0
public long getElapsedTime()
{    return getData(long.class, CSVSaveService.CSV_ELAPSED).longValue();}
0
public long getStartTime()
{    return storesStartTimeStamp ? getTimestamp() : getTimestamp() - getElapsedTime();}
0
public long getEndTime()
{    return storesStartTimeStamp ? getTimestamp() + getElapsedTime() : getTimestamp();}
0
public String getResponseCode()
{    return getData(CSVSaveService.RESPONSE_CODE);}
0
public String getFailureMessage()
{    return getData(CSVSaveService.FAILURE_MESSAGE);}
0
public String getName()
{    return getData(CSVSaveService.LABEL);}
0
public String getResponseMessage()
{    return getData(CSVSaveService.RESPONSE_MESSAGE);}
0
public long getLatency()
{    return getData(long.class, CSVSaveService.CSV_LATENCY).longValue();}
0
public long getConnectTime()
{    if (metadata.indexOf(CSVSaveService.CSV_CONNECT_TIME) >= 0) {        return getData(long.class, CSVSaveService.CSV_CONNECT_TIME).longValue();    } else {        return 0L;    }}
0
public boolean getSuccess()
{    return getData(boolean.class, CSVSaveService.SUCCESSFUL).booleanValue();}
0
public long getReceivedBytes()
{    return getData(long.class, CSVSaveService.CSV_BYTES).longValue();}
0
public long getSentBytes()
{    if (metadata.indexOf(CSVSaveService.CSV_SENT_BYTES) >= 0) {        return getData(long.class, CSVSaveService.CSV_SENT_BYTES).longValue();    } else {        return 0L;    }}
0
public int getGroupThreads()
{    return getData(int.class, CSVSaveService.CSV_THREAD_COUNT1).intValue();}
0
public int getAllThreads()
{    return getData(int.class, CSVSaveService.CSV_THREAD_COUNT2).intValue();}
0
public String getThreadName()
{    return getData(CSVSaveService.THREAD_NAME);}
0
public boolean isController()
{    String message = getResponseMessage();    return message != null && message.startsWith(CONTROLLER_PATTERN);}
0
public boolean isEmptyController()
{    String message = getResponseMessage();    return message != null && message.startsWith(EMPTY_CONTROLLER_PATTERN);}
0
public final SampleMetadata getMetadata()
{    return metadata;}
0
public SampleBuilder add(String e)
{    if (k < data.length) {        data[k++] = e;    }    return this;}
0
public SampleBuilder add(long e)
{    add(Long.toString(e));    return this;}
0
public SampleBuilder add(double e)
{    add(floatFormatter.format(e));    return this;}
0
public Sample build()
{    while (k < data.length) {        data[k++] = "";    }    String[] sampleData = new String[data.length];    System.arraycopy(data, 0, sampleData, 0, data.length);    Sample out = new Sample(row++, metadata, sampleData);    k = 0;    return out;}
0
private void initialize(char separator, List<String> columns)
{    this.separator = separator;    this.columns = columns;    int size = columns.size();    for (int i = 0; i < size; i++) {        index.put(this.columns.get(i).trim(), Integer.valueOf(i));    }}
0
public char getSeparator()
{    return separator;}
0
public int getColumnCount()
{    return columns.size();}
0
public String getColumnName(int i)
{    return columns.get(i);}
0
public String getColumnName(Integer i)
{    return columns.get(i.intValue());}
0
public int indexOf(String col)
{    Integer out = index.get(col);    return out == null ? -1 : out.intValue();}
0
public int ensureIndexOf(String col)
{    int index = indexOf(col);    if (index < 0) {        throw new SampleException(String.format(METADATA_EXCEPTION_MSG_FMT, col, toString()));    }    return index;}
0
public String toString()
{    return StringUtils.join(columns, separator);}
0
public SampleMetadata parse(String headRow)
{    String[] cols = headRow.split(Pattern.quote(Character.toString(separator)));    return new SampleMetadata(separator, cols);}
0
public static String time(long t)
{    long h = t / 3600000;    t %= 3600000;    long m = t / 60000;    t %= 60000;    long s = t / 1000;    t %= 1000;    long ms = t;    if (h > 0) {        return h + "h " + m + "m " + s + "s " + ms + " ms";    }    if (m > 0) {        return m + "m " + s + "s " + ms + " ms";    }    if (s > 0) {        return s + "s " + ms + " ms";    }    if (ms > 0) {        return ms + "ms";    }    return "0 ms";}
0
public static String formatTimeStamp(long timeStamp)
{    return formatTimeStamp(timeStamp, JMeterUtils.getProperty(TIMESTAMP_FORMAT_PROPERTY));}
0
public static String formatTimeStamp(long timeStamp, String format)
{    SimpleDateFormat dateFormat = format != null ? new SimpleDateFormat(format) : new SimpleDateFormat();    return dateFormat.format(new Date(timeStamp));}
0
protected static T findValue(Class<T> clazz, String data, ResultData root)
{    T value = null;    ResultData result = findData(data, root);    if (result instanceof ValueResultData) {        ValueResultData valueResult = (ValueResultData) result;        Object object = valueResult.getValue();        if (object != null && clazz.isAssignableFrom(object.getClass())) {            value = clazz.cast(object);        }    }    return value;}
0
protected static ResultData findData(String data, ResultData root)
{    String[] pathItems = StringUtils.split(data, '.');    if (pathItems == null || !(root instanceof MapResultData)) {        return null;    }    ResultData result = null;    int count = pathItems.length;    int index = 0;    MapResultData map = (MapResultData) root;    while (index < count && result == null) {        ResultData current = map.getResult(pathItems[index]);        if (index == count - 1) {            result = current;        } else {            if (current instanceof MapResultData) {                map = (MapResultData) current;                index++;            }        }    }    return result;}
0
public String getName()
{    return name;}
0
public void setName(String name)
{    this.name = name;}
0
protected TProperty getPropertyFromConfig(SubConfiguration cfg, String property, TProperty defaultValue, Class<TProperty> clazz) throws ExportException
{    try {        return cfg.getProperty(property, defaultValue, clazz);    } catch (ConfigurationException ex) {        throw new ExportException(String.format(INVALID_PROPERTY_CONFIG_FMT, property, getName()), ex);    }}
0
private void addToContext(String key, Object value, DataContext context)
{    if (value instanceof String) {        value = '"' + (String) value + '"';    }    context.put(key, value);}
0
public final void setExtraOptions(SubConfiguration extraOptions)
{    this.extraOptions = extraOptions;}
0
public ResultData customizeResult(ResultData result)
{    MapResultData customizedResult = new MapResultData();    customizedResult.setResult(DATA_CTX_RESULT, result);    if (extraOptions == null) {        return customizedResult;    }    MapResultData extraResult = new MapResultData();    extraOptions.getProperties().forEach((key, value) -> extraResult.setResult(key, new ValueResultData(value)));    customizedResult.setResult(DATA_CTX_EXTRA_OPTIONS, extraResult);    return customizedResult;}
0
public final void setExcludesControllers(boolean excludesControllers)
{    this.excludesControllers = excludesControllers;}
0
public final void setGraphId(String graphId)
{    this.graphId = graphId;}
0
public boolean checkResult(DataContext dataContext, ResultData result)
{    boolean supportsControllerDiscrimination = findValue(Boolean.class, AbstractGraphConsumer.RESULT_SUPPORTS_CONTROLLERS_DISCRIMINATION, result).booleanValue();    if (supportsControllerDiscrimination && showControllerSeriesOnly && excludesControllers) {                                        return false;    }    if (filterPattern == null) {        return true;    }        ResultData seriesResult = findData(AbstractGraphConsumer.RESULT_SERIES, result);    if (!(seriesResult instanceof ListResultData)) {        return true;    }        ListResultData seriesList = (ListResultData) seriesResult;    int count = seriesList.getSize();    int index = 0;    boolean matches = false;    while (index < count && !matches) {        ResultData currentResult = seriesList.get(index);        if (currentResult instanceof MapResultData) {            MapResultData seriesData = (MapResultData) currentResult;            String name = findValue(String.class, AbstractGraphConsumer.RESULT_SERIES_NAME, seriesData);                        boolean isController = findValue(Boolean.class, AbstractGraphConsumer.RESULT_SERIES_IS_CONTROLLER, seriesData).booleanValue();            matches = filterPattern.matcher(name).matches();            if (matches) {                                                matches = !filtersOnlySampleSeries || !supportsControllerDiscrimination || isController || !showControllerSeriesOnly;                if (log.isDebugEnabled()) {                                    }            } else {                                                matches = filtersOnlySampleSeries && !supportsControllerDiscrimination;                if (log.isDebugEnabled()) {                                    }            }        }        index++;    }    if (!matches) {                return false;    }    return true;}
1
private boolean htmlReportFileFilter(File file)
{    String fileName = file.getName();    boolean isIndexHtmlFile = file.isFile() && fileName.equals("index.html");    boolean isContentOrAdmin = fileName.equals("content") || fileName.startsWith("sbadmin2-");    return isIndexHtmlFile || (file.isDirectory() && isContentOrAdmin);}
0
public void export(SampleContext context, File file, ReportGeneratorConfiguration configuration) throws ExportException
{    Validate.notNull(context, MUST_NOT_BE_NULL, "context");    Validate.notNull(file, MUST_NOT_BE_NULL, "file");    Validate.notNull(configuration, MUST_NOT_BE_NULL, "configuration");            DataContext dataContext = new DataContext();        final ExporterConfiguration exportCfg = configuration.getExportConfigurations().get(getName());        File templateDirectory = getPropertyFromConfig(exportCfg, TEMPLATE_DIR, new File(JMeterUtils.getJMeterBinDir(), TEMPLATE_DIR_NAME_DEFAULT), File.class);    if (!templateDirectory.isDirectory()) {        String message = String.format(INVALID_TEMPLATE_DIRECTORY_FMT, templateDirectory.getAbsolutePath());                throw new ExportException(message);    }        File outputDir = getPropertyFromConfig(exportCfg, OUTPUT_DIR, new File(JMeterUtils.getJMeterBinDir(), OUTPUT_DIR_NAME_DEFAULT), File.class);    String globallyDefinedOutputDir = JMeterUtils.getProperty(JMeter.JMETER_REPORT_OUTPUT_DIR_PROPERTY);    if (!StringUtils.isEmpty(globallyDefinedOutputDir)) {        outputDir = new File(globallyDefinedOutputDir);    }    JOrphanUtils.canSafelyWriteToFolder(outputDir, this::htmlReportFileFilter);    if (log.isInfoEnabled()) {            }        final boolean filtersOnlySampleSeries = exportCfg.filtersOnlySampleSeries();    addToContext(DATA_CTX_FILTERS_ONLY_SAMPLE_SERIES, Boolean.valueOf(filtersOnlySampleSeries), dataContext);        final String seriesFilter = exportCfg.getSeriesFilter();    Pattern filterPattern = null;    if (StringUtils.isNotBlank(seriesFilter)) {        try {            filterPattern = Pattern.compile(seriesFilter);        } catch (PatternSyntaxException ex) {                    }    }    addToContext(DATA_CTX_SERIES_FILTER, seriesFilter, dataContext);        final boolean showControllerSeriesOnly = exportCfg.showControllerSeriesOnly();    addToContext(DATA_CTX_SHOW_CONTROLLERS_ONLY, Boolean.valueOf(showControllerSeriesOnly), dataContext);    JsonizerVisitor jsonizer = new JsonizerVisitor();    Map<String, Object> storedData = context.getData();        addResultToContext(ReportGenerator.BEGIN_DATE_CONSUMER_NAME, storedData, dataContext, jsonizer);        addResultToContext(ReportGenerator.END_DATE_CONSUMER_NAME, storedData, dataContext, jsonizer);        addResultToContext(ReportGenerator.APDEX_SUMMARY_CONSUMER_NAME, storedData, dataContext, jsonizer);        addResultToContext(ReportGenerator.ERRORS_SUMMARY_CONSUMER_NAME, storedData, dataContext, jsonizer);        addResultToContext(ReportGenerator.REQUESTS_SUMMARY_CONSUMER_NAME, storedData, dataContext, jsonizer);        addResultToContext(ReportGenerator.STATISTICS_SUMMARY_CONSUMER_NAME, storedData, dataContext, jsonizer);        addResultToContext(ReportGenerator.TOP5_ERRORS_BY_SAMPLER_CONSUMER_NAME, storedData, dataContext, jsonizer);            ExtraOptionsResultCustomizer customizer = new ExtraOptionsResultCustomizer();    EmptyGraphChecker checker = new EmptyGraphChecker(filtersOnlySampleSeries, showControllerSeriesOnly, filterPattern);    Map<String, GraphConfiguration> mapConfiguration = new HashMap<>();    DataContext customGraphs = new DataContext();    for (Map.Entry<String, GraphConfiguration> graphEntry : configuration.getGraphConfigurations().entrySet()) {        final String graphId = graphEntry.getKey();        final GraphConfiguration graphConfiguration = graphEntry.getValue();                customizer.setExtraOptions(exportCfg.getGraphExtraConfigurations().get(graphId));        checker.setExcludesControllers(graphConfiguration.excludesControllers());        checker.setGraphId(graphId);        mapConfiguration.put(graphId, graphConfiguration);        if (graphId.startsWith(CUSTOM_GRAPH_PREFIX)) {            addResultToContext(graphId, storedData, customGraphs, jsonizer, customizer, checker);        } else {                        addResultToContext(graphId, storedData, dataContext, jsonizer, customizer, checker);        }    }    dataContext.put("graphConfigurations", mapConfiguration);    dataContext.put("customsGraphsData", customGraphs);        long oldTimestamp = formatTimestamp(ReportGenerator.BEGIN_DATE_CONSUMER_NAME, dataContext);        formatTimestamp(ReportGenerator.END_DATE_CONSUMER_NAME, dataContext);        TimeZone timezone = TimeZone.getDefault();    addToContext(DATA_CTX_TIMEZONE_OFFSET, Integer.valueOf(timezone.getOffset(oldTimestamp)), dataContext);        if (StringUtils.isNotEmpty(configuration.getReportTitle())) {        dataContext.put(DATA_CTX_REPORT_TITLE, StringEscapeUtils.escapeHtml4(configuration.getReportTitle()));    }        addToContext(DATA_CTX_TESTFILE, file.getName(), dataContext);        addToContext(DATA_CTX_OVERALL_FILTER, configuration.getSampleFilter(), dataContext);        Configuration templateCfg = new Configuration(Configuration.getVersion());    try {        templateCfg.setDirectoryForTemplateLoading(templateDirectory);        templateCfg.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);        if (log.isInfoEnabled()) {                    }        FileUtils.forceMkdir(outputDir);        TemplateVisitor visitor = new TemplateVisitor(templateDirectory.toPath(), outputDir.toPath(), templateCfg, dataContext);        Files.walkFileTree(templateDirectory.toPath(), visitor);    } catch (IOException ex) {        throw new ExportException("Unable to process template files.", ex);    }    }
1
private void addResultToContext(String resultKey, Map<String, Object> storage, DataContext dataContext, ResultDataVisitor<TVisit> visitor)
{    addResultToContext(resultKey, storage, dataContext, visitor, null, null);}
0
private void addResultToContext(String resultKey, Map<String, Object> storage, DataContext dataContext, ResultDataVisitor<TVisit> visitor, ResultCustomizer customizer, ResultChecker checker)
{    Object data = storage.get(resultKey);    if (data instanceof ResultData) {        ResultData result = (ResultData) data;        if (checker != null) {            checker.checkResult(dataContext, result);        }        if (customizer != null) {            result = customizer.customizeResult(result);        }        dataContext.put(resultKey, result.accept(visitor));    }}
0
private long formatTimestamp(String key, DataContext context)
{        double result = Double.parseDouble((String) context.get(key));    long timestamp = (long) result;        context.put(key, '"' + TimeHelper.formatTimeStamp(timestamp) + '"');    return timestamp;}
0
public void export(SampleContext context, File file, ReportGeneratorConfiguration reportGeneratorConfiguration) throws ExportException
{    Object data = context.getData().get(ReportGenerator.STATISTICS_SUMMARY_CONSUMER_NAME);    if (data instanceof MapResultData) {                MapResultData result = (MapResultData) data;        Map<String, SamplingStatistic> statistics = new HashMap<>();        MapResultData overallData = (MapResultData) result.getResult("overall");                createStatistic(statistics, overallData);        ListResultData itemsData = (ListResultData) result.getResult("items");                itemsData.forEach(r -> createStatistic(statistics, (MapResultData) r));                File outputDir = checkAndGetOutputFolder(reportGeneratorConfiguration);        File outputFile = new File(outputDir, OUTPUT_FILENAME);                ObjectWriter objectWriter = new ObjectMapper().writerWithDefaultPrettyPrinter();        try (FileWriter fileWriter = new FileWriter(outputFile)) {            objectWriter.writeValue(fileWriter, statistics);        } catch (IOException e) {            throw new ExportException("Error generating JSON statistics file to " + outputFile + " for " + statistics, e);        }    }}
1
private File checkAndGetOutputFolder(ReportGeneratorConfiguration reportGeneratorConfiguration) throws ExportException
{    final ExporterConfiguration exportCfg = reportGeneratorConfiguration.getExportConfigurations().get(getName());        File outputDir = getPropertyFromConfig(exportCfg, HtmlTemplateExporter.OUTPUT_DIR, new File(JMeterUtils.getJMeterBinDir(), HtmlTemplateExporter.OUTPUT_DIR_NAME_DEFAULT), File.class);    String globallyDefinedOutputDir = JMeterUtils.getProperty(JMeter.JMETER_REPORT_OUTPUT_DIR_PROPERTY);    if (!StringUtils.isEmpty(globallyDefinedOutputDir)) {        outputDir = new File(globallyDefinedOutputDir);    }    JOrphanUtils.canSafelyWriteToFolder(outputDir, JSON_FILE_FILTER);    try {        FileUtils.forceMkdir(outputDir);    } catch (IOException ex) {        throw new ExportException("Error creating output folder " + outputDir.getAbsolutePath(), ex);    }    return outputDir;}
0
private void createStatistic(Map<String, SamplingStatistic> statistics, MapResultData resultData)
{        SamplingStatistic statistic = new SamplingStatistic();    ListResultData listResultData = (ListResultData) resultData.getResult("data");    statistic.setTransaction((String) ((ValueResultData) listResultData.get(0)).getValue());    statistic.setSampleCount((Long) ((ValueResultData) listResultData.get(1)).getValue());    statistic.setErrorCount((Long) ((ValueResultData) listResultData.get(2)).getValue());    statistic.setErrorPct(((Double) ((ValueResultData) listResultData.get(3)).getValue()).floatValue());    statistic.setMeanResTime((Double) ((ValueResultData) listResultData.get(4)).getValue());    statistic.setMinResTime((Long) ((ValueResultData) listResultData.get(5)).getValue());    statistic.setMaxResTime((Long) ((ValueResultData) listResultData.get(6)).getValue());    statistic.setPct1ResTime((Double) ((ValueResultData) listResultData.get(7)).getValue());    statistic.setPct2ResTime((Double) ((ValueResultData) listResultData.get(8)).getValue());    statistic.setPct3ResTime((Double) ((ValueResultData) listResultData.get(9)).getValue());    statistic.setThroughput((Double) ((ValueResultData) listResultData.get(10)).getValue());    statistic.setReceivedKBytesPerSec((Double) ((ValueResultData) listResultData.get(11)).getValue());    statistic.setSentKBytesPerSec((Double) ((ValueResultData) listResultData.get(12)).getValue());    statistics.put(statistic.getTransaction(), statistic);}
1
public String visitListResult(ListResultData listResult)
{    String result = "";    if (listResult != null) {        int count = listResult.getSize();        String[] items = new String[count];        for (int i = 0; i < count; i++) {            items[i] = listResult.get(i).accept(this);        }        result = JsonUtil.toJsonArray(items);    }    return result;}
0
public String visitMapResult(MapResultData mapResult)
{    String result = "";    if (mapResult != null) {        HashMap<String, String> map = new HashMap<>();        for (Map.Entry<String, ResultData> entry : mapResult.entrySet()) {            map.put(entry.getKey(), entry.getValue().accept(this));        }        result = JsonUtil.toJsonObject(map);    }    return result;}
0
public String visitValueResult(ValueResultData valueResult)
{    String result = "";    if (valueResult != null) {        Object value = valueResult.getValue();        result = String.valueOf(value);        if (value instanceof String) {            result = '"' + StringEscapeUtils.escapeEcmaScript(result.replace('\"', '\'')) + '"';        }    }    return result;}
0
private static Properties loadProps(File file)
{    final Properties props = new Properties();    try (FileInputStream inStream = new FileInputStream(file)) {        props.load(inStream);    } catch (IOException e) {                        System.err.println("Problem loading properties. " + e);    }    return props;}
1
private static String getSetterName(String propertyKey)
{    Matcher matcher = POTENTIAL_CAMEL_CASE_PATTERN.matcher(propertyKey);        StringBuffer buffer = new StringBuffer();    while (matcher.find()) {        matcher.appendReplacement(buffer, matcher.group(1).toUpperCase());    }    matcher.appendTail(buffer);    return buffer.toString();}
0
public void generate() throws GenerationException
{    if (resultCollector != null) {                resultCollector.flushFile();    }        File tmpDir = configuration.getTempDirectory();    boolean tmpDirCreated = createTempDir(tmpDir);        SampleContext sampleContext = new SampleContext();    sampleContext.setWorkingDirectory(tmpDir);    SampleSource source = new CsvFileSampleSource(testFile, CSV_DEFAULT_SEPARATOR);    source.setSampleContext(sampleContext);    NormalizerSampleConsumer normalizer = new NormalizerSampleConsumer();    normalizer.setName(NORMALIZER_CONSUMER_NAME);    FilterConsumer dateRangeConsumer = createFilterByDateRange();    dateRangeConsumer.addSampleConsumer(createBeginDateConsumer());    dateRangeConsumer.addSampleConsumer(createEndDateConsumer());    FilterConsumer nameFilter = createNameFilter();    FilterConsumer excludeControllerFilter = createExcludeControllerFilter();    nameFilter.addSampleConsumer(excludeControllerFilter);    dateRangeConsumer.addSampleConsumer(nameFilter);    normalizer.addSampleConsumer(dateRangeConsumer);    source.addSampleConsumer(normalizer);        Map<String, GraphConfiguration> graphConfigurations = configuration.getGraphConfigurations();        for (Map.Entry<String, GraphConfiguration> entryGraphCfg : graphConfigurations.entrySet()) {        addGraphConsumer(nameFilter, excludeControllerFilter, entryGraphCfg);    }            try {                source.run();    } catch (SampleException ex) {        throw new GenerationException("Error while processing samples: " + ex.getMessage(), ex);    }                String key;    ExporterConfiguration value;    for (Map.Entry<String, ExporterConfiguration> entry : configuration.getExportConfigurations().entrySet()) {        key = entry.getKey();        value = entry.getValue();        if (log.isInfoEnabled()) {                    }        exportData(sampleContext, key, value);    }        removeTempDir(tmpDir, tmpDirCreated);    }
1
private FilterConsumer createFilterByDateRange()
{    FilterConsumer dateRangeFilter = new FilterConsumer();    dateRangeFilter.setName(DATE_RANGE_FILTER_CONSUMER_NAME);    dateRangeFilter.setSamplePredicate(sample -> {        long sampleStartTime = sample.getStartTime();        if (configuration.getStartDate() != null) {            if (sampleStartTime >= configuration.getStartDate().getTime()) {                if (configuration.getEndDate() != null) {                    return sampleStartTime <= configuration.getEndDate().getTime();                } else {                    return true;                }            }            return false;        } else {            if (configuration.getEndDate() != null) {                return sampleStartTime <= configuration.getEndDate().getTime();            } else {                return true;            }        }    });    return dateRangeFilter;}
0
private void removeTempDir(File tmpDir, boolean tmpDirCreated)
{    if (tmpDirCreated) {        try {            FileUtils.deleteDirectory(tmpDir);        } catch (IOException ex) {                    }    }}
1
private boolean createTempDir(File tmpDir) throws GenerationException
{    boolean tmpDirCreated = false;    if (!tmpDir.exists()) {        tmpDirCreated = tmpDir.mkdir();        if (!tmpDirCreated) {            String message = String.format("Cannot create temporary directory \"%s\", check property \"%s\"", tmpDir.getAbsolutePath(), ReportGeneratorConfiguration.REPORT_GENERATOR_KEY_TEMP_DIR);                        throw new GenerationException(message);        }    }    return tmpDirCreated;}
1
private void addGraphConsumer(FilterConsumer nameFilter, FilterConsumer excludeControllerFilter, Map.Entry<String, GraphConfiguration> entryGraphCfg) throws GenerationException
{    String graphName = entryGraphCfg.getKey();    GraphConfiguration graphConfiguration = entryGraphCfg.getValue();        String className = graphConfiguration.getClassName();    try {        Class<?> clazz = Class.forName(className);        Object obj = clazz.getDeclaredConstructor().newInstance();        AbstractGraphConsumer graph = (AbstractGraphConsumer) obj;        graph.setName(graphName);                graph.setTitle(graphConfiguration.getTitle());                Method[] methods = clazz.getMethods();        for (Map.Entry<String, String> entryProperty : graphConfiguration.getProperties().entrySet()) {            String propertyName = entryProperty.getKey();            String propertyValue = entryProperty.getValue();            String setterName = getSetterName(propertyName);            setProperty(className, obj, methods, propertyName, propertyValue, setterName);        }        graph.initialize();                AbstractSampleConsumer entryPoint = graphConfiguration.excludesControllers() ? excludeControllerFilter : nameFilter;        entryPoint.addSampleConsumer(graph);    } catch (ClassCastException | IllegalArgumentException | ReflectiveOperationException | SecurityException ex) {        String error = String.format(INVALID_CLASS_FMT, className);        throw new GenerationException(error, ex);    }}
0
private void exportData(SampleContext sampleContext, String exporterName, ExporterConfiguration exporterConfiguration) throws GenerationException
{        String className = exporterConfiguration.getClassName();    try {        Class<?> clazz = Class.forName(className);        Object obj = clazz.getDeclaredConstructor().newInstance();        DataExporter exporter = (DataExporter) obj;        exporter.setName(exporterName);                exporter.export(sampleContext, testFile, configuration);    } catch (ReflectiveOperationException | ClassCastException ex) {        String error = String.format(INVALID_CLASS_FMT, className);        throw new GenerationException(error, ex);    } catch (ExportException ex) {        String error = String.format(INVALID_EXPORT_FMT, exporterName);        throw new GenerationException(error, ex);    }}
0
private ErrorsSummaryConsumer createErrorsSummaryConsumer()
{    ErrorsSummaryConsumer errorsSummaryConsumer = new ErrorsSummaryConsumer();    errorsSummaryConsumer.setName(ERRORS_SUMMARY_CONSUMER_NAME);    return errorsSummaryConsumer;}
0
private FilterConsumer createExcludeControllerFilter()
{    FilterConsumer excludeControllerFilter = new FilterConsumer();    excludeControllerFilter.setName(START_INTERVAL_CONTROLLER_FILTER_CONSUMER_NAME);    excludeControllerFilter.setSamplePredicate(new ControllerSamplePredicate());    excludeControllerFilter.setReverseFilter(true);    excludeControllerFilter.addSampleConsumer(createErrorsSummaryConsumer());    return excludeControllerFilter;}
0
private SampleConsumer createTop5ErrorsConsumer(ReportGeneratorConfiguration configuration)
{    Top5ErrorsBySamplerConsumer top5ErrorsBySamplerConsumer = new Top5ErrorsBySamplerConsumer();    top5ErrorsBySamplerConsumer.setName(TOP5_ERRORS_BY_SAMPLER_CONSUMER_NAME);    top5ErrorsBySamplerConsumer.setHasOverallResult(true);    top5ErrorsBySamplerConsumer.setIgnoreTransactionController(configuration.isIgnoreTCFromTop5ErrorsBySampler());    return top5ErrorsBySamplerConsumer;}
0
private StatisticsSummaryConsumer createStatisticsSummaryConsumer()
{    StatisticsSummaryConsumer statisticsSummaryConsumer = new StatisticsSummaryConsumer();    statisticsSummaryConsumer.setName(STATISTICS_SUMMARY_CONSUMER_NAME);    statisticsSummaryConsumer.setHasOverallResult(true);    return statisticsSummaryConsumer;}
0
private RequestsSummaryConsumer createRequestsSummaryConsumer()
{    RequestsSummaryConsumer requestsSummaryConsumer = new RequestsSummaryConsumer();    requestsSummaryConsumer.setName(REQUESTS_SUMMARY_CONSUMER_NAME);    return requestsSummaryConsumer;}
0
private ApdexSummaryConsumer createApdexSummaryConsumer()
{    ApdexSummaryConsumer apdexSummaryConsumer = new ApdexSummaryConsumer();    apdexSummaryConsumer.setName(APDEX_SUMMARY_CONSUMER_NAME);    apdexSummaryConsumer.setHasOverallResult(true);    apdexSummaryConsumer.setThresholdSelector(sampleName -> {        ApdexThresholdsInfo info = new ApdexThresholdsInfo();                info.setSatisfiedThreshold(configuration.getApdexSatisfiedThreshold());        info.setToleratedThreshold(configuration.getApdexToleratedThreshold());                for (Map.Entry<String, Long[]> entry : configuration.getApdexPerTransaction().entrySet()) {            org.apache.oro.text.regex.Pattern regex = JMeterUtils.getPatternCache().getPattern(entry.getKey());            PatternMatcher matcher = JMeterUtils.getMatcher();            if (sampleName != null && matcher.matches(sampleName, regex)) {                Long satisfied = entry.getValue()[0];                Long tolerated = entry.getValue()[1];                if (log.isDebugEnabled()) {                                    }                info.setSatisfiedThreshold(satisfied);                info.setToleratedThreshold(tolerated);                break;            }        }        return info;    });    return apdexSummaryConsumer;}
1
private FilterConsumer createNameFilter()
{    FilterConsumer nameFilter = new FilterConsumer();    nameFilter.setName(NAME_FILTER_CONSUMER_NAME);    nameFilter.setSamplePredicate(sample -> {                Pattern filteredSamplesPattern = configuration.getFilteredSamplesPattern();                return filteredSamplesPattern == null || filteredSamplesPattern.matcher(sample.getName()).matches();    });    nameFilter.addSampleConsumer(createApdexSummaryConsumer());    nameFilter.addSampleConsumer(createRequestsSummaryConsumer());    nameFilter.addSampleConsumer(createStatisticsSummaryConsumer());    nameFilter.addSampleConsumer(createTop5ErrorsConsumer(configuration));    return nameFilter;}
0
private AggregateConsumer createEndDateConsumer()
{    AggregateConsumer endDateConsumer = new AggregateConsumer(new MaxAggregator(), sample -> Double.valueOf(sample.getEndTime()));    endDateConsumer.setName(END_DATE_CONSUMER_NAME);    return endDateConsumer;}
0
private AggregateConsumer createBeginDateConsumer()
{    AggregateConsumer beginDateConsumer = new AggregateConsumer(new MinAggregator(), sample -> Double.valueOf(sample.getStartTime()));    beginDateConsumer.setName(BEGIN_DATE_CONSUMER_NAME);    return beginDateConsumer;}
0
private void setProperty(String className, Object obj, Method[] methods, String propertyName, String propertyValue, String setterName) throws IllegalAccessException, GenerationException
{    try {        int i = 0;        while (i < methods.length) {            Method method = methods[i];            if (method.getName().equals(setterName)) {                Class<?>[] parameterTypes = method.getParameterTypes();                if (parameterTypes.length == 1) {                    Class<?> parameterType = parameterTypes[0];                    if (parameterType.isAssignableFrom(String.class)) {                        method.invoke(obj, propertyValue);                    } else {                        StringConverter<?> converter = Converters.getConverter(parameterType);                        if (converter == null) {                            throw new GenerationException(String.format(NOT_SUPPORTED_CONVERSION_FMT, parameterType.getName()));                        }                        method.invoke(obj, converter.convert(propertyValue));                    }                    return;                }            }            i++;        }            } catch (InvocationTargetException | ConvertException ex) {        String message = String.format("Cannot assign \"%s\" to property \"%s\" (mapped as \"%s\"), skip it", propertyValue, propertyName, setterName);                throw new GenerationException(message, ex);    }}
1
public String getTransaction()
{    return transaction;}
0
public void setTransaction(String transaction)
{    this.transaction = transaction;}
0
public long getSampleCount()
{    return sampleCount;}
0
public void setSampleCount(long sampleCount)
{    this.sampleCount = sampleCount;}
0
public long getErrorCount()
{    return errorCount;}
0
public void setErrorCount(long errorCount)
{    this.errorCount = errorCount;}
0
public float getErrorPct()
{    return errorPct;}
0
public void setErrorPct(float errorPct)
{    this.errorPct = errorPct;}
0
public double getMeanResTime()
{    return meanResTime;}
0
public void setMeanResTime(double meanResTime)
{    this.meanResTime = meanResTime;}
0
public double getMinResTime()
{    return minResTime;}
0
public void setMinResTime(double minResTime)
{    this.minResTime = minResTime;}
0
public double getMaxResTime()
{    return maxResTime;}
0
public void setMaxResTime(double maxResTime)
{    this.maxResTime = maxResTime;}
0
public double getPct1ResTime()
{    return pct1ResTime;}
0
public void setPct1ResTime(double pct1ResTime)
{    this.pct1ResTime = pct1ResTime;}
0
public double getPct2ResTime()
{    return pct2ResTime;}
0
public void setPct2ResTime(double pct2ResTime)
{    this.pct2ResTime = pct2ResTime;}
0
public double getPct3ResTime()
{    return pct3ResTime;}
0
public void setPct3ResTime(double pct3ResTime)
{    this.pct3ResTime = pct3ResTime;}
0
public double getThroughput()
{    return throughput;}
0
public void setThroughput(double throughput)
{    this.throughput = throughput;}
0
public double getReceivedKBytesPerSec()
{    return receivedKBytesPerSec;}
0
public void setReceivedKBytesPerSec(double receivedKBytesPerSec)
{    this.receivedKBytesPerSec = receivedKBytesPerSec;}
0
public double getSentKBytesPerSec()
{    return sentKBytesPerSec;}
0
public void setSentKBytesPerSec(double sentKBytesPerSec)
{    this.sentKBytesPerSec = sentKBytesPerSec;}
0
public FileVisitResult preVisitDirectory(Path file, BasicFileAttributes attrs) throws IOException
{        Path newDir = target.resolve(source.relativize(file));    try {        Files.copy(file, newDir);    } catch (FileAlreadyExistsException ex) {            }    return FileVisitResult.CONTINUE;}
1
public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException
{        String extension = FilenameUtils.getExtension(file.toString());    if (TEMPLATED_FILE_EXT.equalsIgnoreCase(extension)) {                String templatePath = source.relativize(file).toString();        Template template = configuration.getTemplate(templatePath);        Path newPath = target.resolve(FilenameUtils.removeExtension(templatePath));        try (FileOutputStream stream = new FileOutputStream(newPath.toString());            Writer writer = new OutputStreamWriter(stream, StandardCharsets.UTF_8);            BufferedWriter bufferedWriter = new BufferedWriter(writer)) {            template.process(data, bufferedWriter);        } catch (TemplateException ex) {            throw new IOException(ex);        }    } else {                Path newFile = target.resolve(source.relativize(file));        Files.copy(file, newFile, StandardCopyOption.REPLACE_EXISTING);    }    return FileVisitResult.CONTINUE;}
0
public final Aggregator createValueAggregator()
{    return createAggregator();}
0
public final Aggregator createKeyAggregator()
{    return createAggregator();}
0
public final Aggregator createAggregatedKeyValueAggregator()
{    return createAggregator();}
0
protected final Object getDataFromContext(String key)
{    return getSampleContext().getData().get(key);}
0
protected final void setDataToContext(String key, Object value)
{    getSampleContext().getData().put(key, value);}
0
public String getName()
{    if (name == null) {        return getClass().getSimpleName() + "-" + hashCode();    } else {        return name;    }}
0
public void setName(String name)
{    this.name = name;}
0
public final File getWorkingDirectory()
{    return workingDir;}
0
private void setWorkingDirectory(File baseDirectory)
{    this.workingDir = new File(baseDirectory, getName());}
0
public void setSampleContext(SampleContext sampleContext)
{    super.setSampleContext(sampleContext);    initConsumers(sampleContext);    setWorkingDirectory(sampleContext.getWorkingDirectory());}
0
public void setSampleConsumers(List<SampleConsumer> consumers)
{    Validate.notNull(consumers, "consumers must not be null");    this.sampleConsumers = consumers;}
0
public void addSampleConsumer(SampleConsumer consumer)
{    if (consumer == null) {        return;    }    this.sampleConsumers.add(consumer);}
0
public void setSampleConsumer(SampleConsumer consumer)
{    addSampleConsumer(consumer);}
0
public void removeSampleConsumer(SampleConsumer consumer)
{    if (consumer == null) {        return;    }    this.sampleConsumers.remove(consumer);}
0
public void setConsumedMetadata(SampleMetadata sampleMetadata, int channel)
{    consumedMetadata.put(Integer.valueOf(channel), sampleMetadata);}
0
public SampleMetadata getConsumedMetadata(int channel)
{    return consumedMetadata.get(Integer.valueOf(channel));}
0
public int getConsumedChannelCount()
{    return consumedMetadata.size();}
0
private void initConsumers(SampleContext context)
{    for (SampleConsumer consumer : this.sampleConsumers) {        try {            consumer.setSampleContext(context);        } catch (Exception e) {            throw new SampleException("Consumer failed with message :" + e.getMessage(), e);        }    }}
0
public void setChannelAttribute(int channel, String key, Object value)
{    super.setChannelAttribute(channel, key, value);        for (SampleConsumer consumer : sampleConsumers) {        consumer.setChannelAttribute(channel, key, value);    }}
0
public void setProducedMetadata(SampleMetadata metadata, int channel)
{    for (SampleConsumer consumer : this.sampleConsumers) {        try {            consumer.setConsumedMetadata(metadata, channel);        } catch (Exception e) {            throw new SampleException("Consumer failed with message :" + e.getMessage(), e);        }    }}
0
protected SampleConsumer getConsumer(int i)
{    if (i < sampleConsumers.size()) {        return sampleConsumers.get(i);    } else {        return null;    }}
0
public void startProducing()
{    producedSampleCount = 0;    for (SampleConsumer consumer : this.sampleConsumers) {        try {            consumer.startConsuming();        } catch (Exception e) {            throw new SampleException("Consumer failed with message :" + e.getMessage(), e);        }    }}
0
public void produce(Sample s, int channel)
{    for (SampleConsumer consumer : this.sampleConsumers) {        try {            consumer.consume(s, channel);            producedSampleCount++;        } catch (Exception e) {            throw new SampleException("Consumer failed with message :" + e.getMessage(), e);        }    }}
0
public void stopProducing()
{    for (SampleConsumer consumer : this.sampleConsumers) {        try {            consumer.stopConsuming();        } catch (Exception e) {            throw new SampleException("Consumer failed with message :" + e.getMessage(), e);        }    }    if (LOG.isInfoEnabled()) {            }}
1
public SampleContext getSampleContext()
{    return sampleContext;}
0
public void setSampleContext(SampleContext sampleContext)
{    this.sampleContext = sampleContext;}
0
private ChannelContext getChannelContext(int channel)
{    while (channelContexts.size() <= channel) {        channelContexts.add(new ChannelContext());    }    return channelContexts.get(channel);}
0
public void setChannelAttribute(int channel, String key, Object value)
{    getChannelContext(channel).put(key, value);}
0
public Object getChannelAttribute(int channel, String key)
{    return getChannelContext(channel).get(key);}
0
public SampleContext getSampleContext()
{    return sampleContext;}
0
public void setSampleContext(SampleContext sampleContext)
{    this.sampleContext = sampleContext;}
0
public final boolean isController()
{    return isController;}
0
public final TData getData()
{    return data;}
0
public final void setData(TData data)
{    this.data = data;}
0
public final boolean hasOverallResult()
{    return hasOverallResult;}
0
public final void setHasOverallResult(boolean hasOverallResult)
{    this.hasOverallResult = hasOverallResult;}
0
public final boolean suppportsControllersDiscrimination()
{    return supportsControllersDiscrimination;}
0
protected final SummaryInfo getOverallInfo()
{    return overallInfo;}
0
protected final Map<String, SummaryInfo> getSummaryInfos()
{    return infos;}
0
private MapResultData createResultFromKey(String key)
{    SummaryInfo info = (key == null) ? overallInfo : infos.get(key);    MapResultData result = null;    TData data = info.getData();    if (data != null) {        result = new MapResultData();        result.setResult(RESULT_VALUE_IS_CONTROLLER, new ValueResultData(Boolean.valueOf(info.isController())));        result.setResult(RESULT_VALUE_DATA, createDataResult(key, data));    }    return result;}
0
public void startConsuming()
{        int channelCount = getConsumedChannelCount();    for (int i = 0; i < channelCount; i++) {        super.setProducedMetadata(getConsumedMetadata(i), i);    }    super.startProducing();}
0
public void consume(Sample sample, int channel)
{    String key = getKeyFromSample(sample);        SummaryInfo info = infos.get(key);    if (info == null) {        info = new SummaryInfo(supportsControllersDiscrimination && sample.isController());        infos.put(key, info);    }    updateData(info, sample);    super.produce(sample, channel);}
0
public void stopConsuming()
{    MapResultData result = new MapResultData();        result.setResult(RESULT_VALUE_SUPPORTS_CONTROLLERS_DISCRIMINATION, new ValueResultData(Boolean.valueOf(supportsControllersDiscrimination)));        result.setResult(RESULT_VALUE_TITLES, createResultTitles());        if (hasOverallResult) {        MapResultData overallResult = createResultFromKey(null);        if (overallResult != null) {            result.setResult(RESULT_VALUE_OVERALL, overallResult);        }    }        ListResultData itemsResult = new ListResultData();    for (String key : infos.keySet()) {                MapResultData keyResult = createResultFromKey(key);        if (keyResult != null) {            itemsResult.addResult(keyResult);        }    }    result.setResult(RESULT_VALUE_ITEMS, itemsResult);        setDataToContext(getName(), result);    super.stopProducing();        infos.clear();    overallInfo.setData(null);}
0
public final Aggregator getAggregator()
{    return aggregator;}
0
public final SampleSelector<Double> getSelector()
{    return selector;}
0
public void startConsuming()
{        int channelCount = getConsumedChannelCount();    for (int i = 0; i < channelCount; i++) {        super.setProducedMetadata(getConsumedMetadata(i), i);    }    super.startProducing();}
0
public void consume(Sample sample, int channel)
{    aggregator.addValue(selector.select(sample).doubleValue());    super.produce(sample, channel);}
0
public void stopConsuming()
{    setDataToContext(getName(), new ValueResultData(Double.valueOf(aggregator.getResult())));    super.stopProducing();}
0
public final ThresholdSelector getThresholdSelector()
{    return thresholdSelector;}
0
public final void setThresholdSelector(ThresholdSelector thresholdSelector)
{    this.thresholdSelector = thresholdSelector;}
0
protected ListResultData createDataResult(String key, ApdexSummaryData data)
{    Double apdex = Double.valueOf(getApdex(data));    ApdexThresholdsInfo thresholdsInfo = data.getApdexThresholdInfo();    Long satisfiedThreshold = Long.valueOf(thresholdsInfo.getSatisfiedThreshold());    Long toleratedThreshold = Long.valueOf(thresholdsInfo.getToleratedThreshold());    String keyOrDefault = ObjectUtils.defaultIfNull(key, JMeterUtils.getResString("reportgenerator_summary_total"));    ListResultData result = new ListResultData();    result.addResult(new ValueResultData(apdex));    result.addResult(new ValueResultData(satisfiedThreshold));    result.addResult(new ValueResultData(toleratedThreshold));    result.addResult(new ValueResultData(keyOrDefault));    return result;}
0
protected String getKeyFromSample(Sample sample)
{    return sample.getName();}
0
protected void updateData(SummaryInfo info, Sample sample)
{    if (sample.isEmptyController()) {        return;    }        SummaryInfo overallInfo = getOverallInfo();    ApdexSummaryData overallData = overallInfo.getData();    if (overallData == null) {        overallData = new ApdexSummaryData(getThresholdSelector().select(null));        overallInfo.setData(overallData);    }        ApdexSummaryData data = info.getData();    if (data == null) {        data = new ApdexSummaryData(getThresholdSelector().select(sample.getName()));        info.setData(data);    }        data.incTotalCount();        overallData.incTotalCount();        if (sample.getSuccess()) {        long elapsedTime = sample.getElapsedTime();                ApdexThresholdsInfo thresholdsInfo = data.getApdexThresholdInfo();        if (elapsedTime <= thresholdsInfo.getSatisfiedThreshold()) {            data.incSatisfiedCount();        } else if (elapsedTime <= thresholdsInfo.getToleratedThreshold()) {            data.incToleratedCount();        }                ApdexThresholdsInfo overallThresholdsInfo = overallData.getApdexThresholdInfo();        if (elapsedTime <= overallThresholdsInfo.getSatisfiedThreshold()) {            overallData.incSatisfiedCount();        } else if (elapsedTime <= overallThresholdsInfo.getToleratedThreshold()) {            overallData.incToleratedCount();        }    }}
0
private double getApdex(ApdexSummaryData data)
{    return (data.getSatisfiedCount() + (double) data.getToleratedCount() / 2) / data.getTotalCount();}
0
protected ListResultData createResultTitles()
{    ListResultData titles = new ListResultData();    titles.addResult(new ValueResultData(JMeterUtils.getResString("reportgenerator_summary_apdex_apdex")));    titles.addResult(new ValueResultData(JMeterUtils.getResString("reportgenerator_summary_apdex_satisfied")));    titles.addResult(new ValueResultData(JMeterUtils.getResString("reportgenerator_summary_apdex_tolerated")));    titles.addResult(new ValueResultData(JMeterUtils.getResString("reportgenerator_summary_apdex_samplers")));    return titles;}
0
public final ApdexThresholdsInfo getApdexThresholdInfo()
{    return apdexThresholdInfo;}
0
public final long getSatisfiedCount()
{    return satisfiedCount;}
0
public final void setSatisfiedCount(long satisfiedCount)
{    this.satisfiedCount = satisfiedCount;}
0
public final long getToleratedCount()
{    return toleratedCount;}
0
public final void setToleratedCount(long toleratedCount)
{    this.toleratedCount = toleratedCount;}
0
public final long getTotalCount()
{    return totalCount;}
0
public final void setTotalCount(long totalCount)
{    this.totalCount = totalCount;}
0
public void incSatisfiedCount()
{    satisfiedCount++;}
0
public void incToleratedCount()
{    toleratedCount++;}
0
public void incTotalCount()
{    totalCount++;}
0
public final long getSatisfiedThreshold()
{    return satisfiedThreshold;}
0
public final void setSatisfiedThreshold(long satisfiedThreshold)
{    this.satisfiedThreshold = satisfiedThreshold;}
0
public final long getToleratedThreshold()
{    return toleratedThreshold;}
0
public final void setToleratedThreshold(long toleratedThreshold)
{    this.toleratedThreshold = toleratedThreshold;}
0
private static String getFileRootName(String fName)
{    int idx = fName.lastIndexOf('.');    if (idx < 0) {        return fName;    }    return fName.substring(0, idx);}
0
private static String getFileExtension(String fName)
{    int idx = fName.lastIndexOf('.');    if (idx < 0) {        return "";    }    if (idx < fName.length() - 1) {        return fName.substring(idx + 1);    }    return "";}
0
private long now()
{    return System.currentTimeMillis();}
0
private String time(long t)
{    return TimeHelper.time(t);}
0
private void produce()
{    SampleContext context = getSampleContext();    Validate.validState(context != null, "Set a sample context before producing samples.");    for (int i = 0; i < csvReaders.length; i++) {        long sampleCount = 0;        long start = now();        CsvSampleReader csvReader = csvReaders[i];        producer.setSampleContext(context);        producer.setProducedMetadata(csvReader.getMetadata(), i);        producer.setChannelAttribute(i, SOURCE_FILE_ATTRIBUTE, inputFiles[i]);        producer.startProducing();        try {            Sample s = null;            while ((s = csvReader.readSample()) != null) {                producer.produce(s, i);                sampleCount++;            }        } finally {            producer.stopProducing();            csvReader.close();        }        if (LOG.isInfoEnabled()) {                    }    }}
1
public void setSampleConsumers(List<SampleConsumer> consumers)
{    producer.setSampleConsumers(consumers);}
0
public void addSampleConsumer(SampleConsumer consumer)
{    producer.addSampleConsumer(consumer);}
0
public void removeSampleConsumer(SampleConsumer consumer)
{    producer.removeSampleConsumer(consumer);}
0
public void run()
{    produce();}
0
public void setSampleConsumers(List<SampleConsumer> consumers)
{    Validate.notNull(consumers, "consumers must not be null");    this.sampleConsumers = consumers;}
0
public void addSampleConsumer(SampleConsumer consumer)
{    if (consumer == null) {        return;    }    this.sampleConsumers.add(consumer);}
0
public void removeSampleConsumer(SampleConsumer consumer)
{    if (consumer == null) {        return;    }    this.sampleConsumers.remove(consumer);}
0
public void setSampleContext(SampleContext context)
{    for (SampleConsumer consumer : this.sampleConsumers) {        try {            consumer.setSampleContext(context);        } catch (Exception e) {            throw new SampleException("Consumer failed with message :" + e.getMessage(), e);        }    }}
0
public void setProducedMetadata(SampleMetadata metadata, int channel)
{    for (SampleConsumer consumer : this.sampleConsumers) {        try {            consumer.setConsumedMetadata(metadata, channel);        } catch (Exception e) {            throw new SampleException("Consumer failed with message :" + e.getMessage(), e);        }    }}
0
public void setChannelAttribute(int channel, String key, Object value)
{    super.setChannelAttribute(channel, key, value);        for (SampleConsumer consumer : this.sampleConsumers) {        try {            consumer.setChannelAttribute(channel, key, value);        } catch (Exception e) {            throw new SampleException("Consumer failed with message :" + e.getMessage(), e);        }    }}
0
public void startProducing()
{    for (SampleConsumer consumer : this.sampleConsumers) {        try {            consumer.startConsuming();        } catch (Exception e) {            throw new SampleException("Consumer failed with message :" + e.getMessage(), e);        }    }}
0
public void produce(Sample s, int channel)
{    for (SampleConsumer consumer : this.sampleConsumers) {        try {            consumer.consume(s, channel);        } catch (Exception e) {            throw new SampleException("Consumer failed with message :" + e.getMessage(), e);        }    }}
0
public void stopProducing()
{    for (SampleConsumer consumer : this.sampleConsumers) {        try {            consumer.stopConsuming();        } catch (Exception e) {            throw new SampleException("Consumer failed with message :" + e.getMessage(), e);        }    }}
0
protected ListResultData createDataResult(String key, Long data)
{    ListResultData result = new ListResultData();    result.addResult(new ValueResultData(key != null ? key : JMeterUtils.getResString("reportgenerator_summary_total")));    result.addResult(new ValueResultData(data));    result.addResult(new ValueResultData(Double.valueOf((double) data.longValue() * 100 / errorCount)));    result.addResult(new ValueResultData(Double.valueOf((double) data.longValue() * 100 / getOverallInfo().getData().doubleValue())));    return result;}
0
protected String getKeyFromSample(Sample sample)
{    return getErrorKey(sample);}
0
 static String getErrorKey(Sample sample)
{    String responseCode = sample.getResponseCode();    String responseMessage = sample.getResponseMessage();    String key = responseCode + (!StringUtils.isEmpty(responseMessage) ? "/" + StringEscapeUtils.escapeJson(StringEscapeUtils.escapeHtml4(responseMessage)) : "");    if (MetricUtils.isSuccessCode(responseCode) || (StringUtils.isEmpty(responseCode) && !StringUtils.isEmpty(sample.getFailureMessage()))) {        key = MetricUtils.ASSERTION_FAILED;        if (ASSERTION_RESULTS_FAILURE_MESSAGE) {            String msg = sample.getFailureMessage();            if (!StringUtils.isEmpty(msg)) {                key = StringEscapeUtils.escapeJson(StringEscapeUtils.escapeHtml4(msg));            }        }    }    return key;}
0
protected void updateData(SummaryInfo info, Sample sample)
{        SummaryInfo overallInfo = getOverallInfo();    Long overallData = overallInfo.getData();    if (overallData == null) {        overallData = ZERO;    }    overallInfo.setData(Long.valueOf(overallData.longValue() + 1));        if (!sample.getSuccess()) {        errorCount++;        Long data = info.getData();        if (data == null) {            data = ZERO;        }        info.setData(Long.valueOf(data.longValue() + 1));    }}
0
public void stopConsuming()
{    super.stopConsuming();        errorCount = 0L;}
0
protected ListResultData createResultTitles()
{    ListResultData titles = new ListResultData();    titles.addResult(new ValueResultData(JMeterUtils.getResString("reportgenerator_summary_errors_type")));    titles.addResult(new ValueResultData(JMeterUtils.getResString("reportgenerator_summary_errors_count")));    titles.addResult(new ValueResultData(JMeterUtils.getResString("reportgenerator_summary_errors_rate_error")));    titles.addResult(new ValueResultData(JMeterUtils.getResString("reportgenerator_summary_errors_rate_all")));    return titles;}
0
public void setChunkSize(long chunkSize)
{    if (chunkSize < 50000) {        chunkSize = 50000;    }    this.chunkSize = chunkSize;}
0
public final void setSampleComparator(SampleComparator sampleComparator)
{    this.sampleComparator = sampleComparator;}
0
public void setParallelize(boolean parallelize)
{    this.parallelize = parallelize;}
0
public boolean isParallelize()
{    return parallelize;}
0
public void sort(CsvFile inputFile, File outputFile, boolean writeHeader)
{    if (!inputFile.isFile()) {        throw new SampleException(inputFile.getAbsolutePath() + " does not exist or is not a file. Please provide an existing samples file");    }    if (outputFile.isDirectory()) {        throw new SampleException(outputFile.getAbsolutePath() + " is a directory. Please provide a valid output sample file path (not a directory)");    }    try (CsvSampleReader csvReader = new CsvSampleReader(inputFile, inputFile.getSeparator(), false)) {        sort(csvReader, outputFile, writeHeader);    }}
0
public void sort(SampleMetadata sampleMetadata, File inputFile, File outputFile, boolean writeHeader)
{    Validate.notNull(sampleMetadata, MUST_NOT_BE_NULL, "sampleMetadata");    if (!inputFile.isFile()) {        throw new SampleException(inputFile.getAbsolutePath() + " does not exist or is not a file. Please provide an existing samples file");    }    if (outputFile.isDirectory()) {        throw new SampleException(outputFile.getAbsolutePath() + " is a directory. Please provide a valid output sample file path (not a directory)");    }    try (CsvSampleReader csvReader = new CsvSampleReader(inputFile, sampleMetadata)) {        sort(csvReader, outputFile, writeHeader);    }}
0
private void sort(CsvSampleReader csvReader, File output, boolean writeHeader)
{    Validate.notNull(output, MUST_NOT_BE_NULL, "output");    SampleMetadata readSampleMetadata = csvReader.getMetadata();    SampleWriterConsumer writerConsumer = new SampleWriterConsumer();    writerConsumer.setOutputFile(output);    writerConsumer.setWriteHeader(writeHeader);    addSampleConsumer(writerConsumer);    try {        super.setConsumedMetadata(readSampleMetadata, 0);        startConsuming();        Sample s = null;        while ((s = csvReader.readSample()) != null) {            consume(s, 0);        }        stopConsuming();    } finally {        removeSampleConsumer(writerConsumer);    }}
0
public void startConsuming()
{    Validate.validState(sampleComparator != null, "sampleComparator is not set, call setSampleComparator() first.");    File workDir = getWorkingDirectory();    workDir.mkdir();    this.pool.prestartAllCoreThreads();    inputSampleCount.set(0);    chunkedSampleCount.set(0);    chunks = new LinkedList<>();    samples = new LinkedList<>();    sampleMetadata = getConsumedMetadata(0);    sampleComparator.initialize(sampleMetadata);}
0
public void consume(Sample s, int channel)
{    samples.add(s);    inputSampleCount.incrementAndGet();    if (samples.size() >= chunkSize) {        chunks.add(sortAndDump(samples, sampleMetadata));        samples.clear();    }}
0
public void stopConsuming()
{    if (!samples.isEmpty()) {        chunks.add(sortAndDump(samples, sampleMetadata));    }    if (LOG.isDebugEnabled()) {                if (inputSampleCount.get() != chunkedSampleCount.get()) {                    } else {                    }    }    super.setProducedMetadata(sampleMetadata, 0);    super.startProducing();    sortFilesParallel(chunks, sampleMetadata, this);    super.stopProducing();    if (this.pool != null) {        this.pool.shutdown();    }    getWorkingDirectory().delete();}
1
private File sortAndDump(final List<Sample> samples, final SampleMetadata sampleMetadata)
{    long start = 0;    if (LOG.isDebugEnabled()) {                start = System.currentTimeMillis();    }    final List<Sample> sortedSamples = sortSamplesParallel(samples);    if (sortedSamples.size() != samples.size()) {        throw new SampleException("sort failed ! " + sortedSamples.size() + " != " + samples.size());    }    if (LOG.isDebugEnabled()) {            }    File out = getChunkFile();    if (LOG.isDebugEnabled()) {                start = System.currentTimeMillis();    }    try (CsvSampleWriter csvWriter = new CsvSampleWriter(out, sampleMetadata)) {        for (Sample sample : sortedSamples) {            csvWriter.write(sample);            chunkedSampleCount.incrementAndGet();        }    }    if (LOG.isDebugEnabled()) {            }    return out;}
1
private List<Sample> sortSamplesParallel(final List<Sample> samples)
{    int sz = samples.size();    if (sz <= 1) {        return samples;    }    int middle = sz / 2;    final List<Sample> left = samples.subList(0, middle);    final List<Sample> right = samples.subList(middle, sz);    List<Sample> newLeft;    List<Sample> newRight;    Job<List<Sample>> jobLeft = createSortJob(left);    Job<List<Sample>> jobRight = createSortJob(right);    if (parallelize) {        workQueue.add(jobLeft);        workQueue.add(jobRight);        try {            newLeft = jobLeft.getResult();            newRight = jobRight.getResult();        } catch (InterruptedException ie) {                        throw new SampleException("Unexpected interruption !", ie);        }    } else {        newLeft = jobLeft.exec();        newRight = jobRight.exec();    }    return merge(newLeft, newRight);}
0
private Job<List<Sample>> createSortJob(final List<Sample> samples)
{    return new Job<List<Sample>>() {        @Override        protected List<Sample> exec() {            return sort(samples);        }    };}
0
protected List<Sample> exec()
{    return sort(samples);}
0
public List<Sample> sort(List<Sample> samples)
{    int sz = samples.size();    if (sz <= 1) {        return samples;    }    int middle = sz / 2;    List<Sample> left = samples.subList(0, middle);    List<Sample> right = samples.subList(middle, sz);    left = sort(left);    right = sort(right);    return merge(left, right);}
0
private List<Sample> merge(List<Sample> left, List<Sample> right)
{    ArrayList<Sample> out = new ArrayList<>();    ListIterator<Sample> l = left.listIterator();    ListIterator<Sample> r = right.listIterator();    while (l.hasNext() || r.hasNext()) {        if (l.hasNext() && r.hasNext()) {            Sample firstLeft = l.next();            Sample firstRight = r.next();            if (!revertedSort && sampleComparator.compare(firstLeft, firstRight) < 0 || revertedSort && sampleComparator.compare(firstLeft, firstRight) >= 0) {                out.add(firstLeft);                r.previous();            } else {                out.add(firstRight);                l.previous();            }        } else if (l.hasNext()) {            out.add(l.next());        } else if (r.hasNext()) {            out.add(r.next());        }    }    return out;}
0
public void mergeFiles(List<File> chunks, SampleMetadata metadata, SampleProducer producer)
{    sortFilesParallel(chunks, metadata, producer);}
0
private void sortFilesParallel(List<File> chunks, final SampleMetadata metadata, SampleProducer out)
{    int sz = chunks.size();    if (sz > 1) {        int middle = sz / 2;        final List<File> left = chunks.subList(0, middle);        final List<File> right = chunks.subList(middle, sz);        File leftFile;        File rightFile;        Job<File> leftJob = createMergeJob(left, metadata);        Job<File> rightJob = createMergeJob(right, metadata);        if (parallelize) {            workQueue.add(leftJob);            workQueue.add(rightJob);            try {                leftFile = leftJob.getResult();                rightFile = rightJob.getResult();            } catch (InterruptedException ie) {                                throw new SampleException("Unexpected interruption !", ie);            }        } else {            leftFile = leftJob.exec();            rightFile = rightJob.exec();        }        mergeFiles(metadata, leftFile, rightFile, out);    } else {        File f = chunks.get(0);        try (CsvSampleReader reader = new CsvSampleReader(f, metadata)) {            Sample sample;            while ((sample = reader.readSample()) != null) {                out.produce(sample, 0);            }        }    }}
0
private Job<File> createMergeJob(final List<File> chunks, final SampleMetadata metadata)
{    return new Job<File>() {        @Override        protected File exec() {            return mergeSortFiles(chunks, metadata);        }    };}
0
protected File exec()
{    return mergeSortFiles(chunks, metadata);}
0
private File mergeSortFiles(List<File> chunks, SampleMetadata metadata)
{    int sz = chunks.size();    if (sz == 1) {        return chunks.get(0);    }    int middle = sz / 2;    List<File> left = chunks.subList(0, middle);    List<File> right = chunks.subList(middle, sz);    File leftFile = mergeSortFiles(left, metadata);    File rightFile = mergeSortFiles(right, metadata);    return mergeFiles(leftFile, rightFile, metadata);}
0
private File mergeFiles(File left, File right, SampleMetadata metadata)
{    File out = getChunkFile();    mergeFiles(metadata, left, right, out, false);    return out;}
0
private void mergeFiles(SampleMetadata metadata, File left, File right, File out, boolean writeHeader)
{    if (out == null) {        out = getChunkFile();    }    try (CsvSampleWriter csvWriter = new CsvSampleWriter(out, metadata);        CsvSampleReader l = new CsvSampleReader(left, metadata);        CsvSampleReader r = new CsvSampleReader(right, metadata)) {        if (writeHeader) {            csvWriter.writeHeader();        }        while (l.hasNext() || r.hasNext()) {            if (l.hasNext() && r.hasNext()) {                Sample firstLeft = l.peek();                Sample firstRight = r.peek();                if (leftBeforeRight(firstLeft, firstRight)) {                    csvWriter.write(firstLeft);                    l.readSample();                } else {                    csvWriter.write(firstRight);                    r.readSample();                }            } else if (l.hasNext()) {                csvWriter.write(l.readSample());            } else if (r.hasNext()) {                csvWriter.write(r.readSample());            }        }    }}
0
private void mergeFiles(SampleMetadata metadata, File left, File right, SampleProducer out)
{    try (CsvSampleReader l = new CsvSampleReader(left, metadata);        CsvSampleReader r = new CsvSampleReader(right, metadata)) {        while (l.hasNext() || r.hasNext()) {            if (l.hasNext() && r.hasNext()) {                Sample firstLeft = l.peek();                Sample firstRight = r.peek();                if (leftBeforeRight(firstLeft, firstRight)) {                    out.produce(firstLeft, 0);                    l.readSample();                } else {                    out.produce(firstRight, 0);                    r.readSample();                }            } else if (l.hasNext()) {                out.produce(l.readSample(), 0);            } else if (r.hasNext()) {                out.produce(r.readSample(), 0);            }        }    }}
0
private boolean leftBeforeRight(Sample leftSample, Sample rightSample)
{    return !revertedSort && sampleComparator.compare(leftSample, rightSample) < 0 || revertedSort && sampleComparator.compare(leftSample, rightSample) >= 0;}
0
private File getChunkFile()
{    DecimalFormat df = new DecimalFormat("00000");    File out = new File(getWorkingDirectory(), "chunk-" + df.format(sequence.incrementAndGet()) + ".csv");    out.deleteOnExit();    return out;}
0
public final boolean isRevertedSort()
{    return revertedSort;}
0
public final void setRevertedSort(boolean revertedSort)
{    this.revertedSort = revertedSort;}
0
public final void initialize(SampleMetadata metadata)
{    index = metadata.ensureIndexOf(fieldName);}
0
public long compare(Sample s1, Sample s2)
{    return s1.getData(long.class, index, fieldName).compareTo(s2.getData(long.class, index, fieldName));}
0
public final boolean isReverseFilter()
{    return reverseFilter;}
0
public final void setReverseFilter(boolean reverseFilter)
{    this.reverseFilter = reverseFilter;}
0
public final SamplePredicate getSamplePredicate()
{    return samplePredicate;}
0
public final void setSamplePredicate(SamplePredicate samplePredicate)
{    this.samplePredicate = samplePredicate;}
0
public void startConsuming()
{        int channelCount = getConsumedChannelCount();    for (int i = 0; i < channelCount; i++) {        super.setProducedMetadata(getConsumedMetadata(i), i);    }    super.startProducing();}
0
public void consume(Sample sample, int channel)
{        if ((!reverseFilter && samplePredicate != null && samplePredicate.matches(sample)) || (reverseFilter && (samplePredicate == null || !samplePredicate.matches(sample)))) {        super.produce(sample, channel);    }}
0
public void stopConsuming()
{    super.stopProducing();}
0
protected final HashMap<String, GroupInfo> getGroupInfos()
{    return groupInfos;}
0
protected final boolean getInvertsKeysAndValues()
{    return invertKeysAndValues;}
0
protected final void setRevertKeysAndValues(boolean invertKeysAndValues)
{    this.invertKeysAndValues = invertKeysAndValues;}
0
public final boolean rendersPercentiles()
{    return renderPercentiles;}
0
public final void setRenderPercentiles(boolean renderPercentiles)
{    this.renderPercentiles = renderPercentiles;}
0
protected final GraphKeysSelector getKeysSelector()
{    return keysSelector;}
0
public final String getOverallSeriesFormat()
{    return overallSeriesFormat;}
0
public final void setOverallSeriesFormat(String overallSeriesFormat)
{    this.overallSeriesFormat = overallSeriesFormat;}
0
public final String getAggregatedKeysSeriesFormat()
{    return aggregatedKeysSeriesFormat;}
0
public final void setAggregatedKeysSeriesFormat(String aggregatedKeysSeriesFormat)
{    this.aggregatedKeysSeriesFormat = aggregatedKeysSeriesFormat;}
0
public final String getTitle()
{    return title;}
0
public final void setTitle(String title)
{    this.title = title;}
0
private void setMinResult(MapResultData result, String name, Double value)
{    ValueResultData valueResult = (ValueResultData) result.getResult(name);    valueResult.setValue(Double.valueOf(Math.min(((Double) valueResult.getValue()).doubleValue(), value.doubleValue())));}
0
private void setMaxResult(MapResultData result, String name, Double value)
{    ValueResultData valueResult = (ValueResultData) result.getResult(name);    valueResult.setValue(Double.valueOf(Math.max(((Double) valueResult.getValue()).doubleValue(), value.doubleValue())));}
0
private void addKeyData(MapResultData result, String group, String series, SeriesData seriesData, boolean aggregated)
{        if (aggregated) {        series = String.format(aggregatedKeysSeriesFormat, series);    }        ListResultData seriesList = (ListResultData) result.getResult(RESULT_SERIES);        MapResultData seriesResult = null;    int index = 0;    int size = seriesList.getSize();    while (seriesResult == null && index < size) {        MapResultData currSeries = (MapResultData) seriesList.get(index);        String name = String.valueOf(((ValueResultData) currSeries.getResult(RESULT_SERIES_NAME)).getValue());        if (Objects.equals(name, series)) {            seriesResult = currSeries;        }        index++;    }        if (seriesResult == null) {        seriesResult = createSerieResult(series, seriesData);        seriesList.addResult(seriesResult);    }    ListResultData dataResult = (ListResultData) seriesResult.getResult(RESULT_SERIES_DATA);        Map<Double, Aggregator> aggInfo;    if (aggregated) {        aggInfo = new HashMap<>();        aggInfo.put(Double.valueOf(seriesData.getKeysAggregator().getResult()), seriesData.getValuesAggregator());    } else {        aggInfo = seriesData.getAggregatorInfo();    }    if (!renderPercentiles) {        for (Map.Entry<Double, Aggregator> entry : aggInfo.entrySet()) {                        Double key = entry.getKey();            Double value = Double.valueOf(entry.getValue().getResult());            if (invertKeysAndValues) {                key = Double.valueOf(entry.getValue().getResult());                value = entry.getKey();            }                        ListResultData coordResult = new ListResultData();            coordResult.addResult(new ValueResultData(key));            coordResult.addResult(new ValueResultData(value));            dataResult.addResult(coordResult);            setMinResult(result, RESULT_MIN_X, key);            setMaxResult(result, RESULT_MAX_X, key);            setMinResult(result, RESULT_MIN_Y, value);            setMaxResult(result, RESULT_MAX_Y, value);        }    } else {        long count = seriesData.getCount();        int rank = 0;        double percent = 0;        TreeMap<Double, Aggregator> sortedInfo = new TreeMap<>(aggInfo);        if (!invertKeysAndValues) {            for (Map.Entry<Double, Aggregator> entry : sortedInfo.entrySet()) {                Double value = entry.getKey();                percent += (double) 100 * entry.getValue().getCount() / count;                double percentile = (double) rank / 10;                while (percentile < percent) {                    ListResultData coordResult = new ListResultData();                    coordResult.addResult(new ValueResultData(Double.valueOf(percentile)));                    coordResult.addResult(new ValueResultData(value));                    dataResult.addResult(coordResult);                    percentile = (double) ++rank / 10;                }                setMinResult(result, RESULT_MIN_Y, value);                setMaxResult(result, RESULT_MAX_Y, value);            }            setMinResult(result, RESULT_MIN_X, Double.valueOf(0d));            setMaxResult(result, RESULT_MAX_X, Double.valueOf(100d));        } else {            for (Map.Entry<Double, Aggregator> entry : sortedInfo.entrySet()) {                Double value = entry.getKey();                percent += (double) 100 * entry.getValue().getCount() / count;                double percentile = (double) rank / 10;                while (percentile < percent) {                    ListResultData coordResult = new ListResultData();                    coordResult.addResult(new ValueResultData(value));                    coordResult.addResult(new ValueResultData(Double.valueOf(percentile)));                    dataResult.addResult(coordResult);                    percentile = (double) ++rank / 10;                }                setMinResult(result, RESULT_MIN_X, value);                setMaxResult(result, RESULT_MAX_X, value);            }            setMinResult(result, RESULT_MIN_Y, Double.valueOf(0d));            setMaxResult(result, RESULT_MAX_Y, Double.valueOf(100d));        }    }}
0
protected MapResultData createSerieResult(String series, SeriesData seriesData)
{    MapResultData seriesResult = new MapResultData();    seriesResult.setResult(RESULT_SERIES_NAME, new ValueResultData(series));    seriesResult.setResult(RESULT_SERIES_IS_CONTROLLER, new ValueResultData(Boolean.valueOf(seriesData.isControllersSeries())));    seriesResult.setResult(RESULT_SERIES_IS_OVERALL, new ValueResultData(Boolean.valueOf(seriesData.isOverallSeries())));    seriesResult.setResult(RESULT_SERIES_DATA, new ListResultData());    return seriesResult;}
0
private void aggregateValue(AggregatorFactory factory, SeriesData data, Double key, double value)
{    Map<Double, Aggregator> aggInfo = data.getAggregatorInfo();        Aggregator aggregator = aggInfo.get(key);    if (aggregator == null) {        aggregator = factory.createValueAggregator();        aggInfo.put(key, aggregator);    }        aggregator.addValue(value);        data.incrementCount();        Aggregator keysAgg = data.getKeysAggregator();    if (keysAgg != null) {        keysAgg.addValue(key.doubleValue());    }        Aggregator valuesAgg = data.getValuesAggregator();    if (valuesAgg != null) {        valuesAgg.addValue(value);    }}
0
private MapResultData createResult()
{    MapResultData result = new MapResultData();    result.setResult(RESULT_MIN_X, new ValueResultData(Double.valueOf(Double.MAX_VALUE)));    result.setResult(RESULT_MAX_X, new ValueResultData(Double.valueOf(Double.MIN_VALUE)));    result.setResult(RESULT_MIN_Y, new ValueResultData(Double.valueOf(Double.MAX_VALUE)));    result.setResult(RESULT_MAX_Y, new ValueResultData(Double.valueOf(Double.MIN_VALUE)));    result.setResult(RESULT_TITLE, new ValueResultData(getTitle()));    result.setResult(RESULT_SERIES, new ListResultData());    boolean supportsControllersDiscrimination = groupInfos.values().stream().map(GroupInfo::getSeriesSelector).allMatch(GraphSeriesSelector::allowsControllersDiscrimination);    result.setResult(RESULT_SUPPORTS_CONTROLLERS_DISCRIMINATION, new ValueResultData(Boolean.valueOf(supportsControllersDiscrimination)));    initializeExtraResults(result);    return result;}
0
public void startConsuming()
{        int channelCount = getConsumedChannelCount();    for (int i = 0; i < channelCount; i++) {        super.setProducedMetadata(getConsumedMetadata(i), i);    }    super.startProducing();}
0
public void consume(Sample sample, int channel)
{        Double key = keysSelector.select(sample);        for (Map.Entry<String, GroupInfo> entryGroup : groupInfos.entrySet()) {        GroupInfo groupInfo = entryGroup.getValue();        GroupData groupData = groupInfo.getGroupData();        AggregatorFactory factory = groupInfo.getAggregatorFactory();        boolean overallSeries = groupInfo.enablesOverallSeries();        boolean aggregatedKeysSeries = groupInfo.enablesAggregatedKeysSeries();        for (String seriesName : groupInfo.getSeriesSelector().select(sample)) {            Map<String, SeriesData> seriesInfo = groupData.getSeriesInfo();            SeriesData seriesData = seriesInfo.get(seriesName);            if (seriesData == null) {                boolean isControllersSeries = groupInfo.getSeriesSelector().allowsControllersDiscrimination() && sample.isController();                seriesData = new SeriesData(factory, aggregatedKeysSeries, isControllersSeries, false);                seriesInfo.put(seriesName, seriesData);            }                        Double value = groupInfo.getValueSelector().select(seriesName, sample);            if (value != null) {                aggregateValue(factory, seriesData, key, value);                if (overallSeries) {                    SeriesData overallData = groupData.getOverallSeries();                    aggregateValue(factory, overallData, key, value);                }            }        }    }    super.produce(sample, channel);}
0
public void stopConsuming()
{    super.stopProducing();    MapResultData result = createResult();        for (Map.Entry<String, GroupInfo> groupEntry : groupInfos.entrySet()) {        String groupName = groupEntry.getKey();        GroupInfo groupInfo = groupEntry.getValue();        GroupData groupData = groupInfo.getGroupData();        boolean overallSeries = groupInfo.enablesOverallSeries();        boolean aggregatedKeysSeries = groupInfo.enablesAggregatedKeysSeries();        for (Map.Entry<String, SeriesData> seriesEntry : groupData.getSeriesInfo().entrySet()) {            String seriesName = seriesEntry.getKey();            SeriesData seriesData = seriesEntry.getValue();            addKeyData(result, groupName, seriesName, seriesData, false);            if (aggregatedKeysSeries) {                addKeyData(result, groupName, seriesName, seriesData, true);            }        }                if (overallSeries) {            SeriesData overallData = groupData.getOverallSeries();            String overallSeriesName = String.format(overallSeriesFormat, groupName);            addKeyData(result, groupName, overallSeriesName, overallData, false);            if (aggregatedKeysSeries) {                addKeyData(result, groupName, overallSeriesName, overallData, true);            }        }    }        setDataToContext(getName(), result);    for (GroupInfo groupInfo : groupInfos.values()) {        groupInfo.getGroupData().clear();    }}
0
public void initialize()
{    keysSelector = createKeysSelector();    groupInfos = new HashMap<>(createGroupInfos());}
0
protected boolean isIgnoreTransactionController()
{    return ignoreTransactionController;}
0
public long getGranularity()
{    return granularity;}
0
public void setGranularity(long granularity)
{    this.granularity = granularity;}
0
protected final GraphKeysSelector createKeysSelector()
{    TimeStampKeysSelector keysSelector = createTimeStampKeysSelector();    keysSelector.setGranularity(granularity);    return keysSelector;}
0
protected void initializeExtraResults(MapResultData parentResult)
{    parentResult.setResult(RESULT_CTX_GRANULARITY, new ValueResultData(Long.valueOf(granularity)));}
0
public void initialize()
{    super.initialize();    ((TimeStampKeysSelector) getKeysSelector()).setGranularity(granularity);}
0
public final boolean allowsControllersDiscrimination()
{    return allowsControllerDiscrimination;}
0
public long getGranularity()
{    return granularity;}
0
public final void setGranularity(long granularity)
{    this.granularity = granularity;}
0
public void startConsuming()
{    embeddedConsumer.startConsuming();}
0
public void initialize()
{    super.initialize();    embeddedConsumer = new TimeCountConsumer(this);    setGranularity(1000L);}
0
private void startConsumingBase()
{    super.startConsuming();}
0
public void setConsumedMetadata(SampleMetadata sampleMetadata, int channel)
{    embeddedConsumer.setConsumedMetadata(sampleMetadata, channel);}
0
private void setConsumedMetadataBase(SampleMetadata sampleMetadata, int channel)
{    super.setConsumedMetadata(sampleMetadata, channel);}
0
public void consume(Sample sample, int channel)
{    embeddedConsumer.consume(sample, channel);}
0
private void consumeBase(Sample sample, int channel)
{    super.consume(sample, channel);}
0
public void stopConsuming()
{    embeddedConsumer.stopConsuming();}
0
public void stopConsumingBase()
{    super.stopConsuming();}
0
protected void initializeExtraResults(MapResultData parentResult)
{    parentResult.setResult(RESULT_CTX_GRANULARITY, new ValueResultData(Long.valueOf(granularity)));}
0
public File getFile()
{    return file;}
0
public CsvSampleWriter getWriter()
{    return writer;}
0
private Long getTimeInterval(Sample sample)
{    long time = sample.getEndTime();    return Long.valueOf(time - (time % parent.getGranularity()));}
0
private void initProducedMetadata()
{    builders.clear();    int channelCount = getConsumedChannelCount();    for (int i = 0; i < channelCount; i++) {                SampleMetadata consumedMetadata = getConsumedMetadata(i);                int colCount = consumedMetadata.getColumnCount();        String[] names = new String[colCount + 1];        for (int j = 0; j < colCount; j++) {            names[j] = consumedMetadata.getColumnName(j);        }                names[colCount] = TIME_INTERVAL_LABEL;                SampleMetadata producedMetadata = new SampleMetadata(consumedMetadata.getSeparator(), names);                builders.add(new SampleBuilder(producedMetadata));        parent.setConsumedMetadataBase(producedMetadata, i);    }}
0
private Sample createIndexedSample(Sample sample, int channel, double count)
{    SampleBuilder builder = builders.get(channel);    SampleMetadata metadata = builder.getMetadata();    int colCount = metadata.getColumnCount();    for (int i = 0; i < colCount - 1; i++) {        builder.add(sample.getData(i));    }    builder.add(String.valueOf(count));    return builder.build();}
0
public void startConsuming()
{        File workDir = parent.getWorkingDirectory();    createdWorkDir = false;    if (!workDir.exists()) {        createdWorkDir = workDir.mkdir();        if (!createdWorkDir) {            String message = String.format("Cannot create working directory \"%s\"", workDir);                        throw new SampleException(message);        }    }        int channelsCount = getConsumedChannelCount();    for (int i = 0; i < channelsCount; i++) {        try {            File tmpFile = File.createTempFile(parent.getName(), "-" + i, workDir);            tmpFile.deleteOnExit();            fileInfos.add(new FileInfo(tmpFile, getConsumedMetadata(i)));        } catch (IOException ex) {            String message = String.format("Cannot create temporary file for channel #%d", Integer.valueOf(i));                        throw new SampleException(message, ex);        }    }        initProducedMetadata();}
1
public void consume(Sample sample, int channel)
{        Long time = getTimeInterval(sample);    Long count = counts.get(time);    if (count != null) {        counts.put(time, Long.valueOf(count.longValue() + 1));    } else {        counts.put(time, ONE);    }    fileInfos.get(channel).getWriter().write(sample);}
0
public void stopConsuming()
{        parent.startConsumingBase();        int channelsCount = getConsumedChannelCount();    for (int i = 0; i < channelsCount; i++) {        FileInfo fileInfo = fileInfos.get(i);                CsvSampleWriter writer = fileInfo.getWriter();        writer.close();                File file = fileInfo.getFile();        try (CsvSampleReader reader = new CsvSampleReader(file, getConsumedMetadata(i))) {            while (reader.hasNext()) {                Sample sample = reader.readSample();                                Long requestsPerGranularity = counts.get(getTimeInterval(sample));                Long requestsPerSecond = requestsPerGranularity * 1000 / parent.getGranularity();                parent.consumeBase(createIndexedSample(sample, i, requestsPerSecond), i);            }        } finally {            if (!file.delete()) {                            }        }    }    if (createdWorkDir) {        File workingDir = parent.getWorkingDirectory();        try {            FileUtils.deleteDirectory(workingDir);        } catch (IOException e) {                    }    }        parent.stopConsumingBase();}
1
public Iterable<String> select(Sample sample)
{    return Arrays.asList(sample.getResponseCode());}
0
public Double select(String series, Sample sample)
{    if (isIgnoreTransactionController()) {        if (!sample.isController()) {            return Double.valueOf(sample.getConnectTime());        }    } else {        if (!sample.isEmptyController()) {            return Double.valueOf(sample.getConnectTime());        }    }    return null;}
0
public Double select(String series, Sample sample)
{    if (isIgnoreTransactionController()) {        if (!sample.isController()) {            return ONE;        }    } else {        if (!sample.isEmptyController()) {            return ONE;        }    }    return ZERO;}
0
public Double select(String series, Sample sample)
{    if (isIgnoreTransactionController()) {        if (!sample.isController()) {            return Double.valueOf(sample.getElapsedTime());        }    } else {        if (!sample.isEmptyController()) {            return Double.valueOf(sample.getElapsedTime());        }    }    return null;}
0
public final HashMap<String, SeriesData> getSeriesInfo()
{    return seriesData;}
0
public final SeriesData getOverallSeries()
{    return overallSeries;}
0
public void clear()
{    seriesData.clear();    if (overallSeries != null) {        overallSeries.clear();    }}
0
public final boolean enablesAggregatedKeysSeries()
{    return enableAggregatedKeysSeries;}
0
public final boolean enablesOverallSeries()
{    return enableOverallSeries;}
0
public final GraphSeriesSelector getSeriesSelector()
{    return seriesSelector;}
0
public final GraphValueSelector getValueSelector()
{    return valueSelector;}
0
public final AggregatorFactory getAggregatorFactory()
{    return aggregatorFactory;}
0
public final GroupData getGroupData()
{    return groupData;}
0
protected TimeStampKeysSelector createTimeStampKeysSelector()
{    TimeStampKeysSelector keysSelector = new TimeStampKeysSelector();    keysSelector.setSelectBeginTime(false);    return keysSelector;}
0
protected Map<String, GroupInfo> createGroupInfos()
{    HashMap<String, GroupInfo> groupInfos = new HashMap<>(1);    groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(new MeanAggregatorFactory(), new AbstractSeriesSelector() {        @Override        public Iterable<String> select(Sample sample) {            if (!sample.isEmptyController()) {                String threadName = sample.getThreadName();                int index = threadName.lastIndexOf(' ');                if (index >= 0) {                    threadName = threadName.substring(0, index);                }                return Collections.singletonList(threadName);            } else {                return Collections.emptyList();            }        }    }, (series, sample) -> {        if (!sample.isEmptyController()) {            return Double.valueOf(sample.getGroupThreads());        } else {            return null;        }    }, false, false));    return groupInfos;}
0
public Iterable<String> select(Sample sample)
{    if (!sample.isEmptyController()) {        String threadName = sample.getThreadName();        int index = threadName.lastIndexOf(' ');        if (index >= 0) {            threadName = threadName.substring(0, index);        }        return Collections.singletonList(threadName);    } else {        return Collections.emptyList();    }}
0
protected TimeStampKeysSelector createTimeStampKeysSelector()
{    TimeStampKeysSelector keysSelector = new TimeStampKeysSelector();    keysSelector.setSelectBeginTime(false);    return keysSelector;}
0
protected Map<String, GroupInfo> createGroupInfos()
{    HashMap<String, GroupInfo> groupInfos = new HashMap<>(2);    groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(new TimeRateAggregatorFactory(), new AbstractSeriesSelector() {        private final Iterable<String> values = Arrays.asList(RECEIVED_BYTES_SERIES_LABEL, SENT_BYTES_SERIES_LABEL);        @Override        public Iterable<String> select(Sample sample) {            return values;        }    }, new GraphValueSelector() {        @Override        public Double select(String series, Sample sample) {                        if (!sample.isController()) {                return Double.valueOf(RECEIVED_BYTES_SERIES_LABEL.equals(series) ? sample.getReceivedBytes() : sample.getSentBytes());            } else {                return null;            }        }    }, false, false));    return groupInfos;}
0
public Iterable<String> select(Sample sample)
{    return values;}
0
public Double select(String series, Sample sample)
{        if (!sample.isController()) {        return Double.valueOf(RECEIVED_BYTES_SERIES_LABEL.equals(series) ? sample.getReceivedBytes() : sample.getSentBytes());    } else {        return null;    }}
0
public void setGranularity(long granularity)
{    super.setGranularity(granularity);}
0
public void initialize()
{    super.initialize();        ((TimeRateAggregatorFactory) getGroupInfos().get(AbstractGraphConsumer.DEFAULT_GROUP).getAggregatorFactory()).setGranularity(getGranularity());}
0
protected TimeStampKeysSelector createTimeStampKeysSelector()
{    TimeStampKeysSelector keysSelector = new TimeStampKeysSelector();    keysSelector.setSelectBeginTime(false);    return keysSelector;}
0
protected Map<String, GroupInfo> createGroupInfos()
{    HashMap<String, GroupInfo> groupInfos = new HashMap<>(1);    groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(new TimeRateAggregatorFactory(), new CodeSeriesSelector(),     new CountValueSelector(true), false, false));    return groupInfos;}
0
public void initialize()
{    super.initialize();        ((TimeRateAggregatorFactory) getGroupInfos().get(AbstractGraphConsumer.DEFAULT_GROUP).getAggregatorFactory()).setGranularity(getGranularity());}
0
public void setGranularity(long granularity)
{    super.setGranularity(granularity);}
0
protected TimeStampKeysSelector createTimeStampKeysSelector()
{    TimeStampKeysSelector keysSelector = new TimeStampKeysSelector();    keysSelector.setSelectBeginTime(false);    return keysSelector;}
0
protected Map<String, GroupInfo> createGroupInfos()
{    if (!CONNECT_TIME_SAVED) {        return Collections.emptyMap();    }    HashMap<String, GroupInfo> groupInfos = new HashMap<>();    groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(new MeanAggregatorFactory(), new NameSeriesSelector(),     new ConnectTimeValueSelector(false), false, false));    return groupInfos;}
0
public boolean getIsNativeSampleVariableName()
{    return isNativeSampleVariableName;}
0
public String getYAxis()
{    return yAxis;}
0
public String getXAxis()
{    return xAxis;}
0
public void setYAxis(String axis)
{    yAxis = axis;}
0
public void setXAxis(String axis)
{    xAxis = axis;}
0
public void setContentMessage(String message)
{    contentMessage = message;}
0
public String getContentMessage()
{    return contentMessage;}
0
public String getSampleVariableName()
{    return sampleVariableName;}
0
public void setSampleVariableName(String sampleVarName)
{    sampleVariableName = sampleVarName;    isNativeSampleVariableName = NATIVE_VARIABLES.contains(sampleVarName);}
0
protected void initializeExtraResults(MapResultData parentResult)
{    parentResult.setResult(RESULT_CTX_GRANULARITY, new ValueResultData(Long.valueOf(getGranularity())));    parentResult.setResult(RESULT_Y_AXIS, new ValueResultData(getYAxis()));    parentResult.setResult(RESULT_X_AXIS, new ValueResultData(getXAxis()));    parentResult.setResult(RESULT_SAMPLE_VARIABLE_NAME, new ValueResultData(getSampleVariableName()));    parentResult.setResult(RESULT_CONTENT_MESSAGE, new ValueResultData(getContentMessage()));}
0
protected TimeStampKeysSelector createTimeStampKeysSelector()
{    TimeStampKeysSelector keysSelector = new TimeStampKeysSelector();    keysSelector.setSelectBeginTime(false);    return keysSelector;}
0
protected Map<String, GroupInfo> createGroupInfos()
{    HashMap<String, GroupInfo> groupInfos = new HashMap<>();    groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(new MeanAggregatorFactory(), new AbstractSeriesSelector() {        private final Iterable<String> values = Arrays.asList(sampleVariableName);        @Override        public Iterable<String> select(Sample sample) {            return values;        }    },     new GraphValueSelector() {        @Override        public Double select(String series, Sample sample) {            String value;            if (isNativeSampleVariableName) {                value = sample.getData(sampleVariableName);            } else {                value = sample.getData(CSVSaveService.VARIABLE_NAME_QUOTE_CHAR + sampleVariableName + CSVSaveService.VARIABLE_NAME_QUOTE_CHAR);            }            if (StringUtils.isEmpty(value) || "null".equals(value)) {                return null;            } else {                try {                    return Converters.convert(Double.class, value);                } catch (ConvertException e) {                    throw new IllegalArgumentException("Double converter failed : {}", e);                }            }        }    }, false, false));    return groupInfos;}
0
public Iterable<String> select(Sample sample)
{    return values;}
0
public Double select(String series, Sample sample)
{    String value;    if (isNativeSampleVariableName) {        value = sample.getData(sampleVariableName);    } else {        value = sample.getData(CSVSaveService.VARIABLE_NAME_QUOTE_CHAR + sampleVariableName + CSVSaveService.VARIABLE_NAME_QUOTE_CHAR);    }    if (StringUtils.isEmpty(value) || "null".equals(value)) {        return null;    } else {        try {            return Converters.convert(Double.class, value);        } catch (ConvertException e) {            throw new IllegalArgumentException("Double converter failed : {}", e);        }    }}
0
protected TimeStampKeysSelector createTimeStampKeysSelector()
{    TimeStampKeysSelector keysSelector = new TimeStampKeysSelector();    keysSelector.setSelectBeginTime(true);    return keysSelector;}
0
protected Map<String, GroupInfo> createGroupInfos()
{    HashMap<String, GroupInfo> groupInfos = new HashMap<>(1);    groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(new TimeRateAggregatorFactory(), new StaticSeriesSelector(),     new CountValueSelector(true), false, false));    return groupInfos;}
0
public void setGranularity(long granularity)
{    super.setGranularity(granularity);}
0
public void initialize()
{    super.initialize();        ((TimeRateAggregatorFactory) getGroupInfos().get(AbstractGraphConsumer.DEFAULT_GROUP).getAggregatorFactory()).setGranularity(getGranularity());        ((StaticSeriesSelector) getGroupInfos().get(AbstractGraphConsumer.DEFAULT_GROUP).getSeriesSelector()).setSeriesName(getName());}
0
public void setName(String name)
{    super.setName(name);}
0
protected TimeStampKeysSelector createTimeStampKeysSelector()
{    TimeStampKeysSelector keysSelector = new TimeStampKeysSelector();    keysSelector.setSelectBeginTime(false);    return keysSelector;}
0
protected Map<String, GroupInfo> createGroupInfos()
{    HashMap<String, GroupInfo> groupInfos = new HashMap<>();    groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(new MeanAggregatorFactory(), new NameSeriesSelector(),     new LatencyValueSelector(false), false, false));    return groupInfos;}
0
protected GraphKeysSelector createKeysSelector()
{    return new GraphKeysSelector() {        @Override        public Double select(Sample sample) {            return sample.getData(Double.class, AbstractVersusRequestsGraphConsumer.TIME_INTERVAL_LABEL);        }    };}
0
public Double select(Sample sample)
{    return sample.getData(Double.class, AbstractVersusRequestsGraphConsumer.TIME_INTERVAL_LABEL);}
0
protected Map<String, GroupInfo> createGroupInfos()
{    HashMap<String, GroupInfo> groupInfos = new HashMap<>(1);    groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(new MedianAggregatorFactory(), new StatusSeriesSelector(),     new LatencyValueSelector(true), false, false));    return groupInfos;}
0
protected TimeStampKeysSelector createTimeStampKeysSelector()
{    TimeStampKeysSelector keysSelector = new TimeStampKeysSelector();    keysSelector.setSelectBeginTime(false);    return keysSelector;}
0
protected Map<String, GroupInfo> createGroupInfos()
{    HashMap<String, GroupInfo> groupInfos = new HashMap<>(1);    groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(new MeanAggregatorFactory(), new NameSeriesSelector(),     new ElapsedTimeValueSelector(false), false, false));    return groupInfos;}
0
public final long getGranularity()
{    return granularity;}
0
public final void setGranularity(long granularity)
{    this.granularity = granularity;}
0
protected final GraphKeysSelector createKeysSelector()
{    return new GraphKeysSelector() {        @Override        public Double select(Sample sample) {            long elapsed = sample.getElapsedTime();            return Double.valueOf((double) elapsed - elapsed % granularity);        }    };}
0
public Double select(Sample sample)
{    long elapsed = sample.getElapsedTime();    return Double.valueOf((double) elapsed - elapsed % granularity);}
0
protected Map<String, GroupInfo> createGroupInfos()
{    HashMap<String, GroupInfo> groupInfos = new HashMap<>(1);    groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(new SumAggregatorFactory(), new NameSeriesSelector(),     new CountValueSelector(false), false, false));    return groupInfos;}
0
protected void initializeExtraResults(MapResultData parentResult)
{    parentResult.setResult(AbstractOverTimeGraphConsumer.RESULT_CTX_GRANULARITY, new ValueResultData(Long.valueOf(granularity)));}
0
protected TimeStampKeysSelector createTimeStampKeysSelector()
{    TimeStampKeysSelector keysSelector = new TimeStampKeysSelector();    keysSelector.setSelectBeginTime(false);    return keysSelector;}
0
protected Map<String, GroupInfo> createGroupInfos()
{    HashMap<String, GroupInfo> groupInfos = new HashMap<>(1);    groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(new MeanAggregatorFactory(), new NameSeriesSelector(),     new ElapsedTimeValueSelector(false), false, false));    return groupInfos;}
0
public void initialize()
{    super.initialize();    setRenderPercentiles(true);}
0
protected final GraphKeysSelector createKeysSelector()
{    return new GraphKeysSelector() {        @Override        public Double select(Sample sample) {            return Double.valueOf(sample.getElapsedTime());        }    };}
0
public Double select(Sample sample)
{    return Double.valueOf(sample.getElapsedTime());}
0
protected Map<String, GroupInfo> createGroupInfos()
{    HashMap<String, GroupInfo> groupInfos = new HashMap<>(1);    groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(new SumAggregatorFactory(), new NameSeriesSelector(),     new CountValueSelector(false), false, false));    return groupInfos;}
0
protected void initializeExtraResults(MapResultData parentResult)
{}
0
protected TimeStampKeysSelector createTimeStampKeysSelector()
{    TimeStampKeysSelector keysSelector = new TimeStampKeysSelector();    keysSelector.setSelectBeginTime(false);    return keysSelector;}
0
protected Map<String, GroupInfo> createGroupInfos()
{    HashMap<String, GroupInfo> groupInfos = new HashMap<>(8);    groupInfos.put("aggregate_report_min", createMinGroupInfo());    groupInfos.put("aggregate_report_max", createMaxGroupInfo());    groupInfos.put("aggregate_rpt_pct1", createPercentileGroupInfo("aggregate_rpt_pct1", 90));    groupInfos.put("aggregate_rpt_pct2", createPercentileGroupInfo("aggregate_rpt_pct2", 95));    groupInfos.put("aggregate_rpt_pct3", createPercentileGroupInfo("aggregate_rpt_pct3", 99));    return groupInfos;}
0
private String formatPercentile(int percentile)
{    return String.format(PERCENTILE_FORMAT, Integer.valueOf(percentile));}
0
private GroupInfo createMinGroupInfo()
{    StaticSeriesSelector seriesSelector = new StaticSeriesSelector();    seriesSelector.setSeriesName("Min");    return createGroupInfo(new MinAggregatorFactory(), seriesSelector);}
0
private GroupInfo createMaxGroupInfo()
{    StaticSeriesSelector seriesSelector = new StaticSeriesSelector();    seriesSelector.setSeriesName("Max");    return createGroupInfo(new MaxAggregatorFactory(), seriesSelector);}
0
private GroupInfo createPercentileGroupInfo(String propKey, int defaultValue)
{    String seriesName = formatPercentile(defaultValue);    int property = JMeterUtils.getPropDefault(propKey, defaultValue);    PercentileAggregatorFactory factory = new PercentileAggregatorFactory();    factory.setPercentileIndex(property);    StaticSeriesSelector seriesSelector = new StaticSeriesSelector();    seriesSelector.setSeriesName(seriesName);    return createGroupInfo(factory, seriesSelector);}
0
private GroupInfo createGroupInfo(AggregatorFactory aggregationFactory, StaticSeriesSelector seriesSelector)
{    return new GroupInfo(aggregationFactory, seriesSelector, new SuccessfulElapsedTimeValueSelector(), false, false);}
0
public void initialize()
{    super.initialize();    setRevertKeysAndValues(true);}
0
protected final GraphKeysSelector createKeysSelector()
{    return new IndexedNameSelector();}
0
private GroupInfo createGroupInfo(String propertyKey, int defaultValue)
{    int property = JMeterUtils.getPropDefault(propertyKey, defaultValue);    PercentileAggregatorFactory factory = new PercentileAggregatorFactory();    factory.setPercentileIndex(property);    StaticSeriesSelector seriesSelector = new StaticSeriesSelector();    seriesSelector.setSeriesName(String.format(RESPONSE_TIME_PER_SAMPLE_SERIES_FORMAT, Integer.valueOf(property)));    return new GroupInfo(factory, seriesSelector,     new ElapsedTimeValueSelector(false), false, false);}
0
protected Map<String, GroupInfo> createGroupInfos()
{    HashMap<String, GroupInfo> groupInfos = new HashMap<>(2);    groupInfos.put("aggregate_rpt_pct1", createGroupInfo("aggregate_rpt_pct1", 90));    groupInfos.put("aggregate_rpt_pct2", createGroupInfo("aggregate_rpt_pct2", 95));    groupInfos.put("aggregate_rpt_pct3", createGroupInfo("aggregate_rpt_pct3", 99));    return groupInfos;}
0
protected void initializeExtraResults(MapResultData parentResult)
{    ListResultData samples = new ListResultData();    IndexedNameSelector indexedNameSelector = (IndexedNameSelector) getKeysSelector();    int size = indexedNameSelector.getNames().size();    for (int i = 0; i < size; i++) {        samples.addResult(new ValueResultData(indexedNameSelector.getNames().get(i)));    }    parentResult.setResult("sampleNames", samples);}
0
protected GraphKeysSelector createKeysSelector()
{    return new GraphKeysSelector() {        @Override        public Double select(Sample sample) {            return sample.getData(Double.class, AbstractVersusRequestsGraphConsumer.TIME_INTERVAL_LABEL);        }    };}
0
public Double select(Sample sample)
{    return sample.getData(Double.class, AbstractVersusRequestsGraphConsumer.TIME_INTERVAL_LABEL);}
0
protected Map<String, GroupInfo> createGroupInfos()
{    HashMap<String, GroupInfo> groupInfos = new HashMap<>(1);    groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(new MedianAggregatorFactory(), new StatusSeriesSelector(),     new ElapsedTimeValueSelector(true), false, false));    return groupInfos;}
0
public Iterable<String> select(Sample sample)
{    if (!sample.getSuccess()) {        return Arrays.asList(FAILED_LABEL);    } else {        long elapsedTime = sample.getElapsedTime();        if (elapsedTime <= getSatisfiedThreshold()) {            return satisfiedLabels;        } else if (elapsedTime <= getToleratedThreshold()) {            return toleratedLabels;        } else {            return untoleratedLabels;        }    }}
0
protected final GraphKeysSelector createKeysSelector()
{    return new GraphKeysSelector() {        @Override        public Double select(Sample sample) {            if (sample.getSuccess()) {                long elapsedTime = sample.getElapsedTime();                if (elapsedTime <= satisfiedThreshold) {                    return Double.valueOf(0);                } else if (elapsedTime <= toleratedThreshold) {                    return Double.valueOf(1);                } else {                    return Double.valueOf(2);                }            } else {                return Double.valueOf(3);            }        }    };}
0
public Double select(Sample sample)
{    if (sample.getSuccess()) {        long elapsedTime = sample.getElapsedTime();        if (elapsedTime <= satisfiedThreshold) {            return Double.valueOf(0);        } else if (elapsedTime <= toleratedThreshold) {            return Double.valueOf(1);        } else {            return Double.valueOf(2);        }    } else {        return Double.valueOf(3);    }}
0
protected Map<String, GroupInfo> createGroupInfos()
{    Map<String, GroupInfo> groupInfos = new HashMap<>(1);    SyntheticSeriesSelector syntheticSeriesSelector = new SyntheticSeriesSelector();    groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(new SumAggregatorFactory(), syntheticSeriesSelector,     new CountValueSelector(true), false, false));    return groupInfos;}
0
protected void initializeExtraResults(MapResultData parentResult)
{    ListResultData listResultData = new ListResultData();    String[] seriesLabels = new String[] { SATISFIED_LABEL.format(new Object[] { Long.valueOf(getSatisfiedThreshold()) }), TOLERATED_LABEL.format(new Object[] { Long.valueOf(getSatisfiedThreshold()), Long.valueOf(getToleratedThreshold()) }), UNTOLERATED_LABEL.format(new Object[] { Long.valueOf(getToleratedThreshold()) }), FAILED_LABEL };    String[] colors = new String[] { SATISFIED_COLOR, TOLERATED_COLOR, UNTOLERATED_COLOR, FAILED_COLOR };    for (int i = 0; i < seriesLabels.length; i++) {        ListResultData array = new ListResultData();        array.addResult(new ValueResultData(Integer.valueOf(i)));        array.addResult(new ValueResultData(seriesLabels[i]));        listResultData.addResult(array);    }    parentResult.setResult("ticks", listResultData);    initializeSeries(parentResult, seriesLabels, colors);}
0
private void initializeSeries(MapResultData parentResult, String[] series, String[] colors)
{    ListResultData listResultData = (ListResultData) parentResult.getResult("series");    for (int i = 0; i < series.length; i++) {        listResultData.addResult(create(series[i], colors[i]));    }}
0
private MapResultData create(String serie, String color)
{    GroupInfo groupInfo = getGroupInfos().get(AbstractGraphConsumer.DEFAULT_GROUP);    SeriesData seriesData = new SeriesData(groupInfo.getAggregatorFactory(), groupInfo.enablesAggregatedKeysSeries(), false, groupInfo.enablesOverallSeries());    MapResultData seriesResult = createSerieResult(serie, seriesData);    seriesResult.setResult(SERIE_COLOR_PROPERTY, new ValueResultData(color));    return seriesResult;}
0
public long getSatisfiedThreshold()
{    return satisfiedThreshold;}
0
public void setSatisfiedThreshold(long satisfiedThreshold)
{    this.satisfiedThreshold = satisfiedThreshold;    formatLabels();}
0
public long getToleratedThreshold()
{    return toleratedThreshold;}
0
public void setToleratedThreshold(long toleratedThreshold)
{    this.toleratedThreshold = toleratedThreshold;    formatLabels();}
0
private void formatLabels()
{    this.satisfiedLabels = Collections.singletonList(SATISFIED_LABEL.format(new Object[] { Long.valueOf(this.satisfiedThreshold) }));    this.toleratedLabels = Collections.singletonList(TOLERATED_LABEL.format(new Object[] { Long.valueOf(this.satisfiedThreshold), Long.valueOf(this.toleratedThreshold) }));    this.untoleratedLabels = Collections.singletonList(UNTOLERATED_LABEL.format(new Object[] { Long.valueOf(this.toleratedThreshold) }));}
0
protected final GraphKeysSelector createKeysSelector()
{    return new GraphKeysSelector() {        @Override        public Double select(Sample sample) {            return Double.valueOf(sample.getAllThreads());        }    };}
0
public Double select(Sample sample)
{    return Double.valueOf(sample.getAllThreads());}
0
protected Map<String, GroupInfo> createGroupInfos()
{    HashMap<String, GroupInfo> groupInfos = new HashMap<>(1);    groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(new MeanAggregatorFactory(), new NameSeriesSelector(),     new ElapsedTimeValueSelector(false), false, true));    return groupInfos;}
0
protected void initializeExtraResults(MapResultData parentResult)
{}
0
protected TimeStampKeysSelector createTimeStampKeysSelector()
{    TimeStampKeysSelector keysSelector = new TimeStampKeysSelector();    keysSelector.setSelectBeginTime(false);    return keysSelector;}
0
protected Map<String, GroupInfo> createGroupInfos()
{    Map<String, GroupInfo> groupInfos = new HashMap<>(1);    groupInfos.put(AbstractGraphConsumer.DEFAULT_GROUP, new GroupInfo(new TimeRateAggregatorFactory(), new AbstractSeriesSelector(true) {        @Override        public Iterable<String> select(Sample sample) {            return Arrays.asList(sample.getSuccess() ? TRANSACTION_SUCCESS_LABEL : TRANSACTION_FAILURE_LABEL);        }    },     new CountValueSelector(false), false, false));    return groupInfos;}
0
public Iterable<String> select(Sample sample)
{    return Arrays.asList(sample.getSuccess() ? TRANSACTION_SUCCESS_LABEL : TRANSACTION_FAILURE_LABEL);}
0
public void setGranularity(long granularity)
{    super.setGranularity(granularity);}
0
protected void initializeExtraResults(MapResultData parentResult)
{    super.initializeExtraResults(parentResult);    String[] seriesLabels = new String[] { TRANSACTION_SUCCESS_LABEL, TRANSACTION_FAILURE_LABEL };    initializeSeries(parentResult, seriesLabels);}
0
public void initialize()
{    super.initialize();        ((TimeRateAggregatorFactory) getGroupInfos().get(AbstractGraphConsumer.DEFAULT_GROUP).getAggregatorFactory()).setGranularity(getGranularity());}
0
private void initializeSeries(MapResultData parentResult, String[] series)
{    ListResultData listResultData = (ListResultData) parentResult.getResult("series");    for (int i = 0; i < series.length; i++) {        listResultData.addResult(create(series[i]));    }}
0
private MapResultData create(String serie)
{    GroupInfo groupInfo = getGroupInfos().get(AbstractGraphConsumer.DEFAULT_GROUP);    SeriesData seriesData = new SeriesData(groupInfo.getAggregatorFactory(), groupInfo.enablesAggregatedKeysSeries(), false, groupInfo.enablesOverallSeries());    return createSerieResult(serie, seriesData);}
0
protected TimeStampKeysSelector createTimeStampKeysSelector()
{    TimeStampKeysSelector keysSelector = new TimeStampKeysSelector();    keysSelector.setSelectBeginTime(false);    return keysSelector;}
0
protected Map<String, GroupInfo> createGroupInfos()
{    GroupInfo value = new GroupInfo(new TimeRateAggregatorFactory(), new AbstractSeriesSelector(true) {        @Override        public Iterable<String> select(Sample sample) {            String success = sample.getSuccess() ? SUCCESS_SERIES_SUFFIX : FAILURE_SERIES_SUFFIX;            String label = sample.getName() + "-" + success;            return Arrays.asList(label);        }    },     new CountValueSelector(false), false, false);    return Collections.singletonMap(AbstractGraphConsumer.DEFAULT_GROUP, value);}
0
public Iterable<String> select(Sample sample)
{    String success = sample.getSuccess() ? SUCCESS_SERIES_SUFFIX : FAILURE_SERIES_SUFFIX;    String label = sample.getName() + "-" + success;    return Arrays.asList(label);}
0
public void initialize()
{    super.initialize();        ((TimeRateAggregatorFactory) getGroupInfos().get(AbstractGraphConsumer.DEFAULT_GROUP).getAggregatorFactory()).setGranularity(getGranularity());}
0
public final List<String> getNames()
{    return names;}
0
public Double select(Sample sample)
{    String name = sample.getName();    int index = names.indexOf(name);    if (index < 0) {        names.addLast(name);        index = names.size() - 1;    }    return Double.valueOf(index);}
0
public Double select(String series, Sample sample)
{    if (isIgnoreTransactionController()) {        if (!sample.isController()) {            return Double.valueOf(sample.getLatency());        }    } else {        if (!sample.isEmptyController()) {            return Double.valueOf(sample.getLatency());        }    }    return null;}
0
public Iterable<String> select(Sample sample)
{    return Arrays.asList(sample.getName());}
0
public final Map<Double, Aggregator> getAggregatorInfo()
{    return aggregators;}
0
public final Aggregator getKeysAggregator()
{    return keysAggregator;}
0
public final Aggregator getValuesAggregator()
{    return valuesAggregator;}
0
public final boolean isControllersSeries()
{    return isControllersSeries;}
0
public final boolean isOverallSeries()
{    return isOverallSeries;}
0
public final long getCount()
{    return count;}
0
public void incrementCount()
{    count++;}
0
public void clear()
{    aggregators.clear();    count = 0L;    if (keysAggregator != null) {        keysAggregator.reset();    }    if (valuesAggregator != null) {        valuesAggregator.reset();    }}
0
public final String getSeriesName()
{    return seriesName;}
0
public final void setSeriesName(String seriesName)
{    this.seriesName = seriesName;}
0
public Iterable<String> select(Sample sample)
{    return Arrays.asList(seriesName);}
0
public final String getFailureLabel()
{    return failureLabel;}
0
public final void setFailureLabel(String failureLabel)
{    this.failureLabel = failureLabel;}
0
public final String getSuccessLabel()
{    return successLabel;}
0
public final void setSuccessLabel(String successLabel)
{    this.successLabel = successLabel;}
0
public Iterable<String> select(Sample sample)
{    String label = sample.getSuccess() ? successLabel : failureLabel;    return Arrays.asList(new String[] { label });}
0
public Double select(String series, Sample sample)
{    if (!sample.isController() && sample.getSuccess()) {        return Double.valueOf(sample.getElapsedTime());    } else {        return null;    }}
0
public long getGranularity()
{    return granularity;}
0
public void setGranularity(long granularity)
{    this.granularity = granularity;}
0
public final boolean selectsBeginTime()
{    return selectBeginTime;}
0
public final void setSelectBeginTime(boolean selectBeginTime)
{    this.selectBeginTime = selectBeginTime;}
0
public Double select(Sample sample)
{    long time = selectBeginTime ? sample.getStartTime() : sample.getEndTime();    return Double.valueOf((double) time - time % granularity);}
0
public final void run()
{    resultReady = false;    result = exec();    synchronized (lock) {        resultReady = true;        lock.notifyAll();    }}
0
public T getResult() throws InterruptedException
{    synchronized (lock) {        while (!resultReady) {            lock.wait();        }    }    return result;}
0
public T accept(ResultDataVisitor<T> visitor)
{    return visitor.visitListResult(this);}
0
public boolean addResult(ResultData result)
{    return items.add(result);}
0
public ResultData removeResult(int index)
{    return items.remove(index);}
0
public ResultData get(int index)
{    return items.get(index);}
0
public int getSize()
{    return items.size();}
0
public Iterator<ResultData> iterator()
{    return items.iterator();}
0
public String toString()
{    return "ListResultData [items=" + items + "]";}
0
public T accept(ResultDataVisitor<T> visitor)
{    return visitor.visitMapResult(this);}
0
public Set<Entry<String, ResultData>> entrySet()
{    return map.entrySet();}
0
public ResultData getResult(String name)
{    return map.get(name);}
0
public ResultData setResult(String name, ResultData result)
{    return map.put(name, result);}
0
public ResultData removeResult(String name)
{    return map.remove(name);}
0
public String toString()
{    return "MapResultData [map=" + map + "]";}
0
public long getCount()
{    return count;}
0
public double getResult()
{    return value;}
0
public void addValue(double value)
{    this.value = Math.max(this.value, value);    count++;}
0
public void reset()
{    count = 0L;    value = Double.MIN_VALUE;}
0
protected Aggregator createAggregator()
{    return new MaxAggregator();}
0
public long getCount()
{    return mean.getN();}
0
public double getResult()
{    return mean.getResult();}
0
public void addValue(double value)
{    mean.increment(value);}
0
public void reset()
{    mean.clear();}
0
protected Aggregator createAggregator()
{    return new MeanAggregator();}
0
protected Aggregator createAggregator()
{    return new PercentileAggregator(50);}
0
public long getCount()
{    return count;}
0
public double getResult()
{    return value;}
0
public void addValue(double value)
{    this.value = Math.min(this.value, value);    count++;}
0
public void reset()
{    count = 0L;    value = Double.MAX_VALUE;}
0
protected Aggregator createAggregator()
{    return new MinAggregator();}
0
public void startConsuming()
{    sampleMetadata = getConsumedMetadata(0);    timestamp = sampleMetadata.ensureIndexOf(CSVSaveService.TIME_STAMP);    super.setProducedMetadata(sampleMetadata, 0);    startProducing();}
0
private SimpleDateFormat createFormatter()
{    if (SampleSaveConfiguration.NONE.equalsIgnoreCase(TIMESTAMP_FORMAT)) {        throw new SampleException("'none' format for 'jmeter.save.saveservice.timestamp_format' property is not accepted for report generation");    }        isMillisFormat = SampleSaveConfiguration.MILLISECONDS.equalsIgnoreCase(TIMESTAMP_FORMAT);    SimpleDateFormat formatter = null;        if (!isMillisFormat) {        formatter = new SimpleDateFormat(TIMESTAMP_FORMAT);    }    return formatter;}
1
public void consume(Sample s, int channel)
{    Date date = null;    try {        String tStr = s.getData(timestamp);        if (isMillisFormat) {            date = new Date(Long.parseLong(tStr));        } else {            date = dateFormat.parse(tStr);        }    } catch (Exception e) {        throw new SampleException(String.format(PARSE_TIMESTAMP_EXCEPTION_MESSAGE, s.getData(timestamp), TIMESTAMP_FORMAT, s.toString()), e);    }    long time = date.getTime();    int cc = sampleMetadata.getColumnCount();    String[] data = new String[cc];    for (int i = 0; i < cc; i++) {        if (i == timestamp) {            data[i] = Long.toString(time);        } else {            data[i] = s.getData(i);        }    }    Sample rewritten = new Sample(s.getSampleRow(), sampleMetadata, data);    super.produce(rewritten, 0);}
0
public void stopConsuming()
{    super.stopProducing();}
0
public long getCount()
{    return statistics.getN();}
0
public double getResult()
{    return statistics.getPercentile(percentileIndex);}
0
public void addValue(double value)
{    statistics.addValue(value);}
0
public void reset()
{    statistics.clear();}
0
public final double getPercentileIndex()
{    return percentileIndex;}
0
public void setPercentileIndex(double percentileIndex)
{    this.percentileIndex = percentileIndex;}
0
protected Aggregator createAggregator()
{    Aggregator newAggregator = null;    if (lastAggregator != null) {        newAggregator = new PercentileAggregator((PercentileAggregator) lastAggregator);    } else {        newAggregator = new PercentileAggregator(percentileIndex);    }    lastAggregator = newAggregator;    return newAggregator;}
0
public void startConsuming()
{    count = 0L;    errorCount = 0L;        int channelCount = getConsumedChannelCount();    for (int i = 0; i < channelCount; i++) {        super.setProducedMetadata(getConsumedMetadata(i), i);    }    super.startProducing();}
0
public void consume(Sample sample, int channel)
{    if (!sample.isController()) {        count++;        if (!sample.getSuccess()) {            errorCount++;        }    }    super.produce(sample, channel);}
0
public void stopConsuming()
{    MapResultData result = new MapResultData();    result.setResult("KoPercent", new ValueResultData(Double.valueOf((double) errorCount * 100 / count)));    result.setResult("OkPercent", new ValueResultData(Double.valueOf((double) (count - errorCount) * 100 / count)));    setDataToContext(getName(), result);    super.stopProducing();}
0
public final File getWorkingDirectory()
{    return workingDirectory;}
0
public final void setWorkingDirectory(File workingDirectory)
{    this.workingDirectory = workingDirectory;}
0
public final Map<String, Object> getData()
{    return data;}
0
public void setOutputFile(String outputFile)
{    setOutputFile(new File(outputFile));}
0
public void setOutputFile(File outputFile)
{    Validate.notNull(outputFile, "outputFile must not be null");    this.outputFile = outputFile;}
0
public File getOutputFile()
{    return outputFile;}
0
public File getOutputFile(int channel)
{    String ext = null;    String fName = getOutputFile().getName();    int idx = fName.lastIndexOf('.');    if (idx >= 0 && idx < fName.length() - 1) {        String backedName = fName;        fName = fName.substring(0, idx);        ext = backedName.substring(idx + 1);    } else {        ext = "";    }    if (channel > 0) {        fName += "-" + channel + "." + ext;    } else {        fName += "." + ext;    }    return new File(getOutputFile().getParentFile(), fName);}
0
public void setWriteHeader(boolean writeHeader)
{    this.shouldWriteHeader = writeHeader;}
0
public void startConsuming()
{    if (outputFile == null) {        File wd = getWorkingDirectory();        wd.mkdir();        if (LOG.isInfoEnabled()) {                    }        outputFile = new File(wd, "samples.csv");    }    outputFile.getParentFile().mkdirs();    channelsCount = getConsumedChannelCount();    csvWriters = new CsvSampleWriter[channelsCount];    for (int i = 0; i < channelsCount; i++) {        csvWriters[i] = new CsvSampleWriter(getOutputFile(i), getConsumedMetadata(i));        if (shouldWriteHeader) {            csvWriters[i].writeHeader();        }    }}
1
public void consume(Sample s, int channel)
{    csvWriters[channel].write(s);}
0
public void stopConsuming()
{    for (int i = 0; i < channelsCount; i++) {        csvWriters[i].close();    }    getWorkingDirectory().delete();}
0
private void aggregateSample(Sample sample, StatisticsSummaryData data, boolean isOverall)
{    if (isOverall && sample.isController()) {        return;    }    data.incTotal();    data.incBytes(sample.getReceivedBytes());    data.incSentBytes(sample.getSentBytes());    if (!sample.getSuccess()) {        data.incErrors();    }    long elapsedTime = sample.getElapsedTime();    data.getPercentile1().addValue(elapsedTime);    data.getPercentile2().addValue(elapsedTime);    data.getPercentile3().addValue(elapsedTime);    data.getMean().addValue(elapsedTime);    data.setMin(elapsedTime);    data.setMax(elapsedTime);    data.setFirstTime(sample.getStartTime());    data.setEndTime(sample.getEndTime());}
0
protected void updateData(SummaryInfo info, Sample sample)
{    SummaryInfo overallInfo = getOverallInfo();    StatisticsSummaryData overallData = overallInfo.getData();    if (overallData == null) {        overallData = new StatisticsSummaryData(PERCENTILE_INDEX1, PERCENTILE_INDEX2, PERCENTILE_INDEX3);        overallInfo.setData(overallData);    }    StatisticsSummaryData data = info.getData();    if (data == null) {        data = new StatisticsSummaryData(PERCENTILE_INDEX1, PERCENTILE_INDEX2, PERCENTILE_INDEX3);        info.setData(data);    }    if (!sample.isEmptyController()) {        aggregateSample(sample, data, false);        aggregateSample(sample, overallData, true);    }}
0
protected ListResultData createDataResult(String key, StatisticsSummaryData data)
{    ListResultData result = new ListResultData();    result.addResult(new ValueResultData(key != null ? key : JMeterUtils.getResString("reportgenerator_summary_total")));    long total = data.getTotal();    long errors = data.getErrors();    result.addResult(new ValueResultData(Long.valueOf(total)));    result.addResult(new ValueResultData(Long.valueOf(errors)));    result.addResult(new ValueResultData(Double.valueOf((double) errors * 100 / total)));    result.addResult(new ValueResultData(Double.valueOf(data.getMean().getResult())));    result.addResult(new ValueResultData(Long.valueOf(data.getMin())));    result.addResult(new ValueResultData(Long.valueOf(data.getMax())));    result.addResult(new ValueResultData(Double.valueOf(data.getPercentile1().getResult())));    result.addResult(new ValueResultData(Double.valueOf(data.getPercentile2().getResult())));    result.addResult(new ValueResultData(Double.valueOf(data.getPercentile3().getResult())));    result.addResult(new ValueResultData(Double.valueOf(data.getThroughput())));    result.addResult(new ValueResultData(Double.valueOf(data.getKBytesPerSecond())));    result.addResult(new ValueResultData(Double.valueOf(data.getSentKBytesPerSecond())));    return result;}
0
protected String getKeyFromSample(Sample sample)
{    return sample.getName();}
0
protected ListResultData createResultTitles()
{    ListResultData titles = new ListResultData();    titles.addResult(new ValueResultData(JMeterUtils.getResString("reportgenerator_summary_statistics_label")));    titles.addResult(new ValueResultData(JMeterUtils.getResString("reportgenerator_summary_statistics_count")));    titles.addResult(new ValueResultData(JMeterUtils.getResString("reportgenerator_summary_statistics_error_count")));    titles.addResult(new ValueResultData(JMeterUtils.getResString("reportgenerator_summary_statistics_error_percent")));    titles.addResult(new ValueResultData(JMeterUtils.getResString("reportgenerator_summary_statistics_mean")));    titles.addResult(new ValueResultData(JMeterUtils.getResString("reportgenerator_summary_statistics_min")));    titles.addResult(new ValueResultData(JMeterUtils.getResString("reportgenerator_summary_statistics_max")));    titles.addResult(new ValueResultData(String.format(JMeterUtils.getResString("reportgenerator_summary_statistics_percentile_fmt"), Integer.valueOf(PERCENTILE_INDEX1))));    titles.addResult(new ValueResultData(String.format(JMeterUtils.getResString("reportgenerator_summary_statistics_percentile_fmt"), Integer.valueOf(PERCENTILE_INDEX2))));    titles.addResult(new ValueResultData(String.format(JMeterUtils.getResString("reportgenerator_summary_statistics_percentile_fmt"), Integer.valueOf(PERCENTILE_INDEX3))));    titles.addResult(new ValueResultData(JMeterUtils.getResString("reportgenerator_summary_statistics_throughput")));    titles.addResult(new ValueResultData(JMeterUtils.getResString("reportgenerator_summary_statistics_kbytes")));    titles.addResult(new ValueResultData(JMeterUtils.getResString("reportgenerator_summary_statistics_sent_kbytes")));    return titles;}
0
public long getElapsedTime()
{    return endTime - firstTime;}
0
public final long getFirstTime()
{    return firstTime;}
0
public final void setFirstTime(long firstTime)
{    this.firstTime = Math.min(this.firstTime, firstTime);}
0
public final long getEndTime()
{    return endTime;}
0
public final void setEndTime(long endTime)
{    this.endTime = Math.max(this.endTime, endTime);}
0
public final long getBytes()
{    return bytes;}
0
public final void setBytes(long bytes)
{    this.bytes = bytes;}
0
public final long getErrors()
{    return errors;}
0
public final void setErrors(long errors)
{    this.errors = errors;}
0
public final long getTotal()
{    return total;}
0
public final void setTotal(long total)
{    this.total = total;}
0
public final long getMin()
{    return min;}
0
public final void setMin(long min)
{    this.min = Math.min(this.min, min);}
0
public final long getMax()
{    return max;}
0
public final void setMax(long max)
{    this.max = Math.max(this.max, max);}
0
public final PercentileAggregator getPercentile1()
{    return percentile1;}
0
public final PercentileAggregator getPercentile2()
{    return percentile2;}
0
public final PercentileAggregator getPercentile3()
{    return percentile3;}
0
public double getBytesPerSecond()
{    return bytes / ((double) getElapsedTime() / 1000);}
0
public double getKBytesPerSecond()
{    return getBytesPerSecond() / 1024;}
0
public double getThroughput()
{    return (total / (double) getElapsedTime()) * 1000.0;}
0
public void incTotal()
{    total++;}
0
public void incBytes(long value)
{    bytes += value;}
0
public void incSentBytes(long value)
{    sentBytes += value;}
0
public void incErrors()
{    errors++;}
0
public MeanAggregator getMean()
{    return mean;}
0
public long getSentBytes()
{    return sentBytes;}
0
public double getSentBytesPerSecond()
{    return sentBytes / ((double) getElapsedTime() / 1000);}
0
public double getSentKBytesPerSecond()
{    return getSentBytesPerSecond() / 1024;}
0
public long getCount()
{    return count;}
0
public double getResult()
{    return sum;}
0
public void addValue(double value)
{    count++;    sum += value;}
0
public void reset()
{    count = 0;    sum = 0;}
0
protected Aggregator createAggregator()
{    return new SumAggregator();}
0
public final String getTagLabel()
{    return tagLabel;}
0
public final void setTagLabel(String tagLabel)
{        this.tagLabel = tagLabel;}
0
public final SampleIndexer<TIndex> getSampleIndexer()
{    return sampleIndexer;}
0
public final void setSampleIndexer(SampleIndexer<TIndex> sampleIndexer)
{    this.sampleIndexer = sampleIndexer;}
0
private void initProducedMetadata()
{    builders.clear();    int channelCount = getConsumedChannelCount();    for (int i = 0; i < channelCount; i++) {                SampleMetadata consumedMetadata = getConsumedMetadata(i);                int colCount = consumedMetadata.getColumnCount();        String[] names = new String[colCount + 1];        for (int j = 0; j < colCount; j++) {            names[j] = consumedMetadata.getColumnName(j);        }                names[colCount] = tagLabel;                SampleMetadata producedMetadata = new SampleMetadata(consumedMetadata.getSeparator(), names);                builders.add(new SampleBuilder(producedMetadata));        super.setProducedMetadata(producedMetadata, i);    }}
0
private Sample createIndexedSample(Sample sample, int channel, TIndex index)
{    SampleBuilder builder = builders.get(channel);    SampleMetadata metadata = builder.getMetadata();    int colCount = metadata.getColumnCount();    for (int i = 0; i < colCount - 1; i++) {        builder.add(sample.getData(i));    }    builder.add(String.valueOf(index));    return builder.build();}
0
public void startConsuming()
{    if (sampleIndexer != null) {        sampleIndexer.reset();    }    initProducedMetadata();    super.startProducing();}
0
public void consume(Sample sample, int channel)
{    if (sample != null && sampleIndexer != null) {        TIndex index = sampleIndexer.calculateIndex(sample);        Sample indexedSample = createIndexedSample(sample, channel, index);        super.produce(indexedSample, channel);    }}
0
public void stopConsuming()
{    super.stopProducing();}
0
public final long getGranularity()
{    return granularity;}
0
public final void setGranularity(long granularity)
{    this.granularity = granularity;}
0
public long getCount()
{    return count;}
0
public double getResult()
{    return value * 1000 / granularity;}
0
public void addValue(final double value)
{    this.count++;    this.value += value;}
0
public void reset()
{    count = 0;    value = 0;}
0
public final long getGranularity()
{    return granularity;}
0
public final void setGranularity(long granularity)
{    this.granularity = granularity;}
0
protected Aggregator createAggregator()
{    TimeRateAggregator aggregator = new TimeRateAggregator();    aggregator.setGranularity(granularity);    return aggregator;}
0
private void aggregateSample(Sample sample, Top5ErrorsSummaryData data, boolean isOverall)
{    if (sample.isController()) {        if (isOverall || ignoreTCFromTop5ErrorsBySampler) {            return;        }    }    if (!sample.getSuccess()) {        data.registerError(ErrorsSummaryConsumer.getErrorKey(sample));        data.incErrors();    }    data.incTotal();}
0
protected void updateData(SummaryInfo info, Sample sample)
{    SummaryInfo overallInfo = getOverallInfo();    if (overallInfo.getData() == null) {        overallInfo.setData(new Top5ErrorsSummaryData());    }    if (info.getData() == null) {        info.setData(new Top5ErrorsSummaryData());    }    if (!sample.isEmptyController()) {        aggregateSample(sample, info.getData(), false);        aggregateSample(sample, overallInfo.getData(), true);    }}
0
protected ListResultData createDataResult(String key, Top5ErrorsSummaryData data)
{    ListResultData result = new ListResultData();    long errors = data.getErrors();    if (errors > 0 || key == null) {        result.addResult(new ValueResultData(key != null ? key : JMeterUtils.getResString("reportgenerator_top5_total")));        long total = data.getTotal();        result.addResult(new ValueResultData(Long.valueOf(total)));        result.addResult(new ValueResultData(Long.valueOf(errors)));        Object[][] top5 = data.getTop5ErrorsMetrics();        int numberOfValues = 0;        for (int i = 0; i < top5.length; i++) {            result.addResult(new ValueResultData(top5[i][0]));            result.addResult(new ValueResultData(top5[i][1]));            numberOfValues++;        }        for (int i = numberOfValues; i < MAX_NUMBER_OF_ERRORS_IN_TOP; i++) {            result.addResult(new ValueResultData(""));            result.addResult(new ValueResultData(""));        }    }    return result;}
0
protected String getKeyFromSample(Sample sample)
{    return sample.getName();}
0
protected ListResultData createResultTitles()
{    ListResultData titles = new ListResultData();    titles.addResult(new ValueResultData(JMeterUtils.getResString("reportgenerator_top5_label")));    titles.addResult(new ValueResultData(JMeterUtils.getResString("reportgenerator_top5_sample_count")));    titles.addResult(new ValueResultData(JMeterUtils.getResString("reportgenerator_top5_error_count")));    for (int i = 0; i < MAX_NUMBER_OF_ERRORS_IN_TOP; i++) {        titles.addResult(new ValueResultData(JMeterUtils.getResString("reportgenerator_top5_error_label")));        titles.addResult(new ValueResultData(JMeterUtils.getResString("reportgenerator_top5_error_count")));    }    return titles;}
0
public void setIgnoreTransactionController(boolean ignoreTCFromTop5ErrorsBySampler)
{    this.ignoreTCFromTop5ErrorsBySampler = ignoreTCFromTop5ErrorsBySampler;}
0
public void registerError(String errorMessage)
{    Long value = countPerError.get(errorMessage);    if (value == null) {        countPerError.put(errorMessage, ONE);    } else {        countPerError.put(errorMessage, Long.valueOf(value.longValue() + 1));    }}
0
public void incErrors()
{    errors++;}
0
public void incTotal()
{    total++;}
0
public long getTotal()
{    return total;}
0
public long getErrors()
{    return errors;}
0
public Object[][] getTop5ErrorsMetrics()
{    int maxSize = Top5ErrorsBySamplerConsumer.MAX_NUMBER_OF_ERRORS_IN_TOP;    return countPerError.entrySet().stream().sorted(Map.Entry.<String, Long>comparingByValue().reversed()).limit(maxSize).map(e -> new Object[] { e.getKey(), e.getValue() }).toArray(e -> new Object[maxSize][2]);}
0
public final Object getValue()
{    return value;}
0
public final void setValue(Object value)
{    this.value = value;}
0
public T accept(ResultDataVisitor<T> visitor)
{    return visitor.visitValueResult(this);}
0
public String toString()
{    return "ValueResultData [value=" + value + "]";}
0
public static boolean isSuccessCode(String codeAsString)
{    if (StringUtils.isNumeric(codeAsString)) {        try {            int code = Integer.parseInt(codeAsString);            return isSuccessCode(code);        } catch (NumberFormatException ex) {            return false;        }    }    return false;}
0
public static boolean isSuccessCode(int code)
{    return code >= 200 && code <= 399;}
0
protected final Visualizer getVisualizer()
{    if (listener == null) {                return null;    }    return listener.get();}
0
public void setListener(Visualizer vis)
{    listener = new WeakReference<>(vis);}
0
public Object clone()
{    AbstractListenerElement clone = (AbstractListenerElement) super.clone();    clone.listener = this.listener;    return clone;}
0
public String getLabelResource()
{        return "resultaction_title";}
0
public void configure(TestElement el)
{    super.configure(el);    errorPanel.configure(((OnErrorTestElement) el).getErrorAction());}
0
public TestElement createTestElement()
{    ResultAction resultAction = new ResultAction();    modifyTestElement(resultAction);    return resultAction;}
0
public void modifyTestElement(TestElement te)
{    super.configureTestElement(te);    ((OnErrorTestElement) te).setErrorAction(errorPanel.getOnErrorSetting());}
0
public void clearGui()
{    super.clearGui();    errorPanel.configure(OnErrorTestElement.ON_ERROR_CONTINUE);}
0
private void init()
{        setLayout(new BorderLayout());    setBorder(makeBorder());    Box box = Box.createVerticalBox();    box.add(makeTitlePanel());    errorPanel = new OnErrorPanel();    box.add(errorPanel);    add(box, BorderLayout.NORTH);}
0
public String getLabelResource()
{        return "resultsaver_title";}
0
public void configure(TestElement el)
{    super.configure(el);    ResultSaver resultSaver = (ResultSaver) el;    filename.setText(resultSaver.getFilename());    errorsOnly.setSelected(resultSaver.getErrorsOnly());    successOnly.setSelected(resultSaver.getSuccessOnly());    ignoreTC.setSelected(resultSaver.getIgnoreTC());    skipAutoNumber.setSelected(resultSaver.getSkipAutoNumber());    skipSuffix.setSelected(resultSaver.getSkipSuffix());    variableName.setText(resultSaver.getVariableName());    addTimestamp.setSelected(resultSaver.getAddTimeStamp());    numberPadLength.setText(resultSaver.getNumberPadLen() == 0 ? "" : Integer.toString(resultSaver.getNumberPadLen()));}
0
public TestElement createTestElement()
{    ResultSaver resultSaver = new ResultSaver();    modifyTestElement(resultSaver);    return resultSaver;}
0
public void modifyTestElement(TestElement te)
{    super.configureTestElement(te);    ResultSaver resultSaver = (ResultSaver) te;    resultSaver.setFilename(filename.getText());    resultSaver.setErrorsOnly(errorsOnly.isSelected());    resultSaver.setSuccessOnly(successOnly.isSelected());    resultSaver.setSkipSuffix(skipSuffix.isSelected());    resultSaver.setSkipAutoNumber(skipAutoNumber.isSelected());    resultSaver.setIgnoreTC(ignoreTC.isSelected());    resultSaver.setAddTimestamp(addTimestamp.isSelected());    resultSaver.setVariableName(variableName.getText());    resultSaver.setNumberPadLength(numberPadLength.getText());}
0
public void clearGui()
{    super.clearGui();    skipAutoNumber.setSelected(false);    skipSuffix.setSelected(false);        filename.setText("");    errorsOnly.setSelected(false);    successOnly.setSelected(false);    ignoreTC.setSelected(true);    addTimestamp.setSelected(false);        variableName.setText("");        numberPadLength.setText("");}
0
private void init()
{        setLayout(new BorderLayout());    setBorder(makeBorder());    Box box = Box.createVerticalBox();    box.add(makeTitlePanel());    box.add(createSaveConditionsPanel());    box.add(createSaveFormatPanel());    add(box, BorderLayout.NORTH);}
0
private Component createSaveFormatPanel()
{    filename = new JLabeledTextField(JMeterUtils.getResString("resultsaver_prefix"));    filename.setName(ResultSaver.FILENAME);        numberPadLength = new JLabeledTextField(JMeterUtils.getResString("resultsaver_numberpadlen"));    numberPadLength.setName(ResultSaver.NUMBER_PAD_LENGTH);        skipAutoNumber = new JCheckBox(JMeterUtils.getResString("resultsaver_skipautonumber"));        skipSuffix = new JCheckBox(JMeterUtils.getResString("resultsaver_skipsuffix"));        addTimestamp = new JCheckBox(JMeterUtils.getResString("resultsaver_addtimestamp"));    variableName = new JLabeledTextField(JMeterUtils.getResString("resultsaver_variable"));    variableName.setName(ResultSaver.VARIABLE_NAME);    JPanel panel = new JPanel(new GridBagLayout());        panel.setBorder(BorderFactory.createTitledBorder(JMeterUtils.getResString("resultsaver_save_format")));    GridBagConstraints gbc = new GridBagConstraints();    initConstraints(gbc);    addField(panel, variableName, gbc);    resetContraints(gbc);    addField(panel, filename, gbc);    resetContraints(gbc);    addField(panel, skipAutoNumber, gbc);    resetContraints(gbc);    addField(panel, skipSuffix, gbc);    resetContraints(gbc);    addField(panel, addTimestamp, gbc);    resetContraints(gbc);    addField(panel, numberPadLength, gbc);    resetContraints(gbc);    return panel;}
0
private Component createSaveConditionsPanel()
{        successOnly = new JCheckBox(JMeterUtils.getResString("resultsaver_success"));        errorsOnly = new JCheckBox(JMeterUtils.getResString("resultsaver_errors"));        ignoreTC = new JCheckBox(JMeterUtils.getResString("resultsaver_ignore_tc"));    JPanel panel = new JPanel(new GridBagLayout());        panel.setBorder(BorderFactory.createTitledBorder(JMeterUtils.getResString("resultsaver_save_conditions")));    GridBagConstraints gbc = new GridBagConstraints();    initConstraints(gbc);    addField(panel, successOnly, gbc);    resetContraints(gbc);    addField(panel, errorsOnly, gbc);    resetContraints(gbc);    addField(panel, ignoreTC, gbc);    resetContraints(gbc);    return panel;}
0
public void clearData()
{}
0
private void addField(JPanel panel, JCheckBox field, GridBagConstraints gbc)
{    gbc.weightx = 2;    gbc.fill = GridBagConstraints.HORIZONTAL;    panel.add(field, gbc.clone());}
0
private void addField(JPanel panel, JLabeledTextField field, GridBagConstraints gbc)
{    List<JComponent> item = field.getComponentList();    panel.add(item.get(0), gbc.clone());    gbc.gridx++;    gbc.weightx = 1;    gbc.fill = GridBagConstraints.HORIZONTAL;    panel.add(item.get(1), gbc.clone());}
0
private void resetContraints(GridBagConstraints gbc)
{    gbc.gridx = 0;    gbc.gridy++;    gbc.weightx = 0;    gbc.fill = GridBagConstraints.NONE;}
0
private void initConstraints(GridBagConstraints gbc)
{    gbc.anchor = GridBagConstraints.NORTHWEST;    gbc.fill = GridBagConstraints.NONE;    gbc.gridheight = 1;    gbc.gridwidth = 1;    gbc.gridx = 0;    gbc.gridy = 0;    gbc.weightx = 0;    gbc.weighty = 0;}
0
public String getLabelResource()
{        return "summariser_title";}
0
public void configure(TestElement el)
{    super.configure(el);}
0
public TestElement createTestElement()
{    Summariser summariser = new Summariser();    modifyTestElement(summariser);    return summariser;}
0
public void modifyTestElement(TestElement summariser)
{    super.configureTestElement(summariser);}
0
private void init()
{        setLayout(new BorderLayout());    setBorder(makeBorder());    add(makeTitlePanel(), BorderLayout.NORTH);}
0
public void sampleOccurred(SampleEvent e)
{    SampleResult s = e.getResult();    if (log.isDebugEnabled()) {            }    if (!s.isSuccessful()) {        if (isStopTestNow()) {            s.setStopTestNow(true);        } else if (isStopTest()) {            s.setStopTest(true);        } else if (isStopThread()) {            s.setStopThread(true);        } else if (isStartNextThreadLoop()) {            s.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD);        } else if (isStartNextIterationOfCurrentLoop()) {            s.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_CURRENT_LOOP);        } else if (isBreakCurrentLoop()) {            s.setTestLogicalAction(TestLogicalAction.BREAK_CURRENT_LOOP);        }    }}
1
public void sampleStarted(SampleEvent e)
{}
0
public void sampleStopped(SampleEvent e)
{}
0
public void run()
{        synchronized (LOCK) {        finalizeFileOutput();    }    }
1
public Object clone()
{    ResultCollector clone = (ResultCollector) super.clone();    clone.setSaveConfig((SampleSaveConfiguration) clone.getSaveConfig().clone());        clone.summariser = this.summariser;    return clone;}
0
private void setFilenameProperty(String f)
{    setProperty(FILENAME, f);}
0
public String getFilename()
{    return getPropertyAsString(FILENAME);}
0
public boolean isErrorLogging()
{    return getPropertyAsBoolean(ERROR_LOGGING);}
0
public final void setErrorLogging(boolean errorLogging)
{    setProperty(new BooleanProperty(ERROR_LOGGING, errorLogging));}
0
public final void setSuccessOnlyLogging(boolean value)
{    if (value) {        setProperty(new BooleanProperty(SUCCESS_ONLY_LOGGING, true));    } else {        removeProperty(SUCCESS_ONLY_LOGGING);    }}
0
public boolean isSuccessOnlyLogging()
{    return getPropertyAsBoolean(SUCCESS_ONLY_LOGGING, false);}
0
public boolean isSampleWanted(boolean success)
{    boolean errorOnly = isErrorLogging();    boolean successOnly = isSuccessOnlyLogging();    return isSampleWanted(success, errorOnly, successOnly);}
0
public static boolean isSampleWanted(boolean success, boolean errorOnly, boolean successOnly)
{    return (!errorOnly && !successOnly) || (success && successOnly) || (!success && errorOnly);}
0
public void setFilename(String f)
{    if (inTest) {        return;    }    setFilenameProperty(f);}
0
public void testEnded(String host)
{    synchronized (LOCK) {        instanceCount--;        if (instanceCount <= 0) {                        if (shutdownHook != null) {                Runtime.getRuntime().removeShutdownHook(shutdownHook);            } else {                            }            finalizeFileOutput();            out = null;            inTest = false;        }    }    if (summariser != null) {        summariser.testEnded(host);    }}
1
public void testStarted(String host)
{    synchronized (LOCK) {        if (instanceCount == 0) {                        shutdownHook = new Thread(new ShutdownHook());            Runtime.getRuntime().addShutdownHook(shutdownHook);        }        instanceCount++;        try {            if (out == null) {                try {                                        out = getFileWriter(getFilename(), getSaveConfig());                } catch (FileNotFoundException e) {                    out = null;                }            }            if (getVisualizer() != null) {                this.isStats = getVisualizer().isStats();            }        } catch (Exception e) {                    }    }    inTest = true;    if (summariser != null) {        summariser.testStarted(host);    }}
1
public void testEnded()
{    testEnded(TEST_IS_LOCAL);}
0
public void testStarted()
{    testStarted(TEST_IS_LOCAL);}
0
public void loadExistingFile()
{    final Visualizer visualizer = getVisualizer();    if (visualizer == null) {                return;    }    boolean parsedOK = false;    String filename = getFilename();    File file = new File(filename);    if (file.exists()) {        try (FileReader fr = new FileReader(file);            BufferedReader dataReader = new BufferedReader(fr, 300)) {                        String line = dataReader.readLine();            dataReader.close();            if (line == null) {                            } else {                if (!line.startsWith("<?xml ")) {                                        CSVSaveService.processSamples(filename, visualizer, this);                    parsedOK = true;                } else {                                        try (FileInputStream fis = new FileInputStream(file);                        BufferedInputStream bufferedInputStream = new BufferedInputStream(fis)) {                                                SaveService.loadTestResults(bufferedInputStream, new ResultCollectorHelper(this, visualizer));                        parsedOK = true;                    } catch (Exception e) {                        if (log.isWarnEnabled()) {                                                    }                    }                }            }        } catch (IOException | JMeterError | RuntimeException e) {                    } finally {            if (!parsedOK) {                GuiPackage.showErrorMessage("Error loading results file - see log file", "Result file loader");            }        }    } else {        GuiPackage.showErrorMessage("Error loading results file - could not open file", "Result file loader");    }}
1
private static void writeFileStart(PrintWriter writer, SampleSaveConfiguration saveConfig)
{    if (saveConfig.saveAsXml()) {        writer.print(XML_HEADER);                        writer.print("\n");        String pi = saveConfig.getXmlPi();        if (pi.length() > 0) {            writer.println(pi);        }                        writer.print(TESTRESULTS_START_V1_1_PREVER);        writer.print(SaveService.getVERSION());        writer.print(TESTRESULTS_START_V1_1_POSTVER);                        writer.print("\n");    } else if (saveConfig.saveFieldNames()) {        writer.println(CSVSaveService.printableFieldNamesToString(saveConfig));    }}
0
private static void writeFileEnd(PrintWriter pw, SampleSaveConfiguration saveConfig)
{    if (saveConfig.saveAsXml()) {                pw.print("\n");        pw.print(TESTRESULTS_END);                pw.print("\n");    }}
0
private static PrintWriter getFileWriter(final String pFilename, SampleSaveConfiguration saveConfig) throws IOException
{    if (pFilename == null || pFilename.length() == 0) {        return null;    }    if (log.isDebugEnabled()) {            }    String filename = FileServer.resolveBaseRelativeName(pFilename);        filename = new File(filename).getCanonicalPath();    FileEntry fe = files.get(filename);    PrintWriter writer = null;    boolean trimmed = true;    if (fe == null) {        if (saveConfig.saveAsXml()) {            trimmed = trimLastLine(filename);        } else {            trimmed = new File(filename).exists();        }                        File pdir = new File(filename).getParentFile();        if (pdir != null) {                        if (pdir.mkdirs()) {                if (log.isInfoEnabled()) {                                    }            }                        if (!pdir.exists()) {                            }        }        writer = new PrintWriter(new OutputStreamWriter(new BufferedOutputStream(new FileOutputStream(filename, trimmed)), SaveService.getFileEncoding(StandardCharsets.UTF_8.name())), SAVING_AUTOFLUSH);        if (log.isDebugEnabled()) {                    }        files.put(filename, new FileEntry(writer, saveConfig));    } else {        writer = fe.pw;    }    if (!trimmed) {                writeFileStart(writer, saveConfig);    }    return writer;}
1
private static boolean trimLastLine(String filename)
{    try (RandomAccessFile raf = new RandomAccessFile(filename, "rw")) {                long len = raf.length();        if (len < MIN_XML_FILE_LEN) {            return false;        }        raf.seek(len - TESTRESULTS_END.length() - 10);        String line;        long pos = raf.getFilePointer();        int end = 0;        while (        (line = raf.readLine()) != null) {            end = line.indexOf(TESTRESULTS_END);            if (            end >= 0) {                break;            }            pos = raf.getFilePointer();        }        if (line == null) {                        return false;        }                raf.setLength(pos + end);    } catch (FileNotFoundException e) {        return false;    } catch (IOException e) {        if (log.isWarnEnabled()) {                    }        return false;    }    return true;}
1
public void sampleStarted(SampleEvent e)
{}
0
public void sampleStopped(SampleEvent e)
{}
0
public void sampleOccurred(SampleEvent event)
{    SampleResult result = event.getResult();    if (isSampleWanted(result.isSuccessful())) {        sendToVisualizer(result);        if (out != null && !isResultMarked(result) && !this.isStats) {            SampleSaveConfiguration config = getSaveConfig();            result.setSaveConfig(config);            try {                if (config.saveAsXml()) {                    SaveService.saveSampleResult(event, out);                } else {                                        CSVSaveService.saveSampleResult(event, out);                }            } catch (Exception err) {                                            }        }    }    if (summariser != null) {        summariser.sampleOccurred(event);    }}
1
protected final void sendToVisualizer(SampleResult r)
{    if (getVisualizer() != null) {        getVisualizer().add(r);    }}
0
private boolean isResultMarked(SampleResult res)
{    String filename = getFilename();    return res.markFile(filename);}
0
public void flushFile()
{    if (out != null) {                out.flush();    }}
1
private static void finalizeFileOutput()
{    for (Map.Entry<String, ResultCollector.FileEntry> me : files.entrySet()) {        String key = me.getKey();        ResultCollector.FileEntry value = me.getValue();        try {                        writeFileEnd(value.pw, value.config);            value.pw.close();            if (value.pw.checkError()) {                            }        } catch (Exception ex) {                    }    }    files.clear();}
1
public SampleSaveConfiguration getSaveConfig()
{    try {        return (SampleSaveConfiguration) getProperty(SAVE_CONFIG).getObjectValue();    } catch (ClassCastException e) {        setSaveConfig(new SampleSaveConfiguration());        return getSaveConfig();    }}
0
public void setSaveConfig(SampleSaveConfiguration saveConfig)
{    getProperty(SAVE_CONFIG).setObjectValue(saveConfig);}
0
public void clearData()
{}
0
public void add(SampleResult sample)
{    if (ResultCollector.isSampleWanted(sample.isSuccessful(), errorsOnly, successOnly)) {        visualizer.add(sample);    }}
0
private long nextNumber()
{    synchronized (LOCK) {        return ++sequenceNumber;    }}
0
public void testStarted()
{        testStarted("");}
0
public void testStarted(String host)
{    synchronized (LOCK) {        sequenceNumber = 0;        if (getAddTimeStamp()) {            DateFormat format = new SimpleDateFormat(TIMESTAMP_FORMAT);            timeStamp = format.format(new Date());        } else {            timeStamp = "";        }        numberPadLength = getNumberPadLen();    }}
0
public void testEnded()
{        testEnded("");}
0
public void testEnded(String host)
{}
0
public void sampleOccurred(SampleEvent e)
{    processSample(e.getResult(), new Counter());}
0
private void processSample(SampleResult s, Counter c)
{    saveSample(s, c.num++);    SampleResult[] sampleResults = s.getSubResults();    for (SampleResult sampleResult : sampleResults) {        processSample(sampleResult, c);    }}
0
private void saveSample(SampleResult s, int num)
{    if (ignoreSampler(s)) {        if (log.isDebugEnabled()) {                    }        return;    }    String fileName = makeFileName(s.getContentType(), getSkipAutoNumber(), getSkipSuffix());    if (log.isDebugEnabled()) {            }        s.setResultFileName(fileName);    String variable = getVariableName();    if (variable.length() > 0) {        if (num > 0) {            variable = variable + num;        }        JMeterContextService.getContext().getVariables().put(variable, fileName);    }    File out = new File(fileName);    createFoldersIfNeeded(out.getParentFile());    try (FileOutputStream fos = new FileOutputStream(out);        BufferedOutputStream bos = new BufferedOutputStream(fos)) {                JOrphanUtils.write(s.getResponseData(), bos);    } catch (FileNotFoundException e) {            } catch (IOException e) {            }}
1
private boolean ignoreSampler(SampleResult s)
{    if (getIgnoreTC() && TransactionController.isFromTransactionController(s)) {        return true;    }        return (s.isSuccessful() && getErrorsOnly()) || (!s.isSuccessful() && getSuccessOnly());}
0
private void createFoldersIfNeeded(File parentFile)
{    if (parentFile == null) {        return;    }    if (!parentFile.exists()) {                if (!parentFile.mkdirs()) {            throw new JMeterStopTestNowException("Cannot create path hierarchy for folder " + parentFile.getAbsolutePath());        }    } else {            }}
1
 String makeFileName(String contentType, boolean skipAutoNumber, boolean skipSuffix)
{    StringBuilder sb = new StringBuilder(FileServer.resolveBaseRelativeName(getFilename()));        sb.append(timeStamp);    if (!skipAutoNumber) {        String number = Long.toString(nextNumber());        for (int i = number.length(); i < numberPadLength; i++) {            sb.append('0');        }        sb.append(number);    }    if (!skipSuffix) {        sb.append('.');        if (contentType != null) {                        int i = contentType.indexOf('/');            if (i != -1) {                                int j = contentType.indexOf(';');                if (j != -1) {                    sb.append(contentType.substring(i + 1, j));                } else {                    sb.append(contentType.substring(i + 1));                }            } else {                sb.append("unknown");            }        } else {            sb.append("unknown");        }    }    return sb.toString();}
0
public void sampleStarted(SampleEvent e)
{}
0
public void sampleStopped(SampleEvent e)
{}
0
public String getFilename()
{    return getPropertyAsString(FILENAME);}
0
public String getVariableName()
{        return getPropertyAsString(VARIABLE_NAME, "");}
0
public boolean getErrorsOnly()
{    return getPropertyAsBoolean(ERRORS_ONLY);}
0
public boolean getSkipAutoNumber()
{    return getPropertyAsBoolean(SKIP_AUTO_NUMBER);}
0
public boolean getSkipSuffix()
{    return getPropertyAsBoolean(SKIP_SUFFIX);}
0
public boolean getSuccessOnly()
{    return getPropertyAsBoolean(SUCCESS_ONLY);}
0
public boolean getAddTimeStamp()
{    return getPropertyAsBoolean(ADD_TIMESTAMP);}
0
public int getNumberPadLen()
{    return getPropertyAsInt(NUMBER_PAD_LENGTH, 0);}
0
public boolean getIgnoreTC()
{    return getPropertyAsBoolean(IGNORE_TC, true);}
0
public void setIgnoreTC(boolean value)
{    setProperty(IGNORE_TC, value, true);}
0
public void setFilename(String value)
{    setProperty(FILENAME, value);}
0
public int hashCode()
{    return super.hashCode();}
0
public boolean equals(Object obj)
{    return super.equals(obj);}
0
public void setAddTimestamp(boolean selected)
{    setProperty(ADD_TIMESTAMP, selected, false);}
0
public void setVariableName(String value)
{        setProperty(VARIABLE_NAME, value, "");}
0
public void setNumberPadLength(String text)
{        setProperty(ResultSaver.NUMBER_PAD_LENGTH, text, "");}
0
public void setErrorsOnly(boolean selected)
{    setProperty(ResultSaver.ERRORS_ONLY, selected);}
0
public void setSuccessOnly(boolean selected)
{    setProperty(ResultSaver.SUCCESS_ONLY, selected);}
0
public void setSkipSuffix(boolean selected)
{    setProperty(ResultSaver.SKIP_SUFFIX, selected);}
0
public void setSkipAutoNumber(boolean selected)
{    setProperty(ResultSaver.SKIP_AUTO_NUMBER, selected);}
0
private void moveDelta()
{    total.addSample(delta);    delta.clear();}
0
public void sampleOccurred(SampleEvent e)
{    SampleResult s = e.getResult();    if (IGNORE_TC_GENERATED_SAMPLERESULT && TransactionController.isFromTransactionController(s)) {        return;    }        long now = System.currentTimeMillis() / 1000;    SummariserRunningSample myDelta = null;    SummariserRunningSample myTotal = null;    boolean reportNow = false;    synchronized (myTotals) {        if (s != null) {            myTotals.delta.addSample(s);        }        if ((now > myTotals.last + INTERVAL_WINDOW) && (now % INTERVAL <= INTERVAL_WINDOW)) {            reportNow = true;                        myDelta = new SummariserRunningSample(myTotals.delta);            myTotals.moveDelta();            myTotal = new SummariserRunningSample(myTotals.total);                        myTotals.last = now;        }    }    if (reportNow) {        formatAndWriteToLog(myName, myDelta, "+");                if (myTotal != null && myDelta != null && myTotal.getNumSamples() != myDelta.getNumSamples()) {                        formatAndWriteToLog(myName, myTotal, "=");        }    }}
0
private static StringBuilder longToSb(StringBuilder sb, long l, int len)
{    sb.setLength(0);    sb.append(l);    return JOrphanUtils.rightAlign(sb, len);}
0
private static StringBuilder doubleToSb(DecimalFormat dfDouble, StringBuilder sb, double d, int len, int frac)
{    sb.setLength(0);    dfDouble.setMinimumFractionDigits(frac);    dfDouble.setMaximumFractionDigits(frac);    sb.append(dfDouble.format(d));    return JOrphanUtils.rightAlign(sb, len);}
0
public void sampleStarted(SampleEvent e)
{}
0
public void sampleStopped(SampleEvent e)
{}
0
public void testStarted()
{    testStarted("local");}
0
public void testEnded()
{    testEnded("local");}
0
public void testStarted(String host)
{    synchronized (LOCK) {        myName = getName();        myTotals = ACCUMULATORS.get(myName);        if (myTotals == null) {            myTotals = new Totals();            ACCUMULATORS.put(myName, myTotals);        }        instanceCount++;    }}
0
public void testEnded(String host)
{    Set<Entry<String, Totals>> totals = null;    synchronized (LOCK) {        instanceCount--;        if (instanceCount <= 0) {            totals = ACCUMULATORS.entrySet();        }    }    if (totals == null) {                return;    }    for (Map.Entry<String, Totals> entry : totals) {        String name = entry.getKey();        Totals total = entry.getValue();                total.delta.setEndTime();                if (total.delta.getNumSamples() > 0 && total.total.getNumSamples() > 0) {            formatAndWriteToLog(name, total.delta, "+");        }                total.moveDelta();        formatAndWriteToLog(name, total.total, "=");    }}
0
private void formatAndWriteToLog(String name, SummariserRunningSample summariserRunningSample, String type)
{    if (TOOUT || (TOLOG && log.isInfoEnabled())) {        String formattedMessage = format(name, summariserRunningSample, type);        if (TOLOG) {                    }        if (TOOUT) {                        System.out.println(formattedMessage);        }    }}
1
private static String format(String name, SummariserRunningSample summariserRunningSample, String type)
{        DecimalFormat dfDouble = new DecimalFormat("#0.0");        StringBuilder tmp = new StringBuilder(20);        StringBuilder sb = new StringBuilder(140);    sb.append(name);    sb.append(' ');    sb.append(type);    sb.append(' ');    sb.append(longToSb(tmp, summariserRunningSample.getNumSamples(), 6));    sb.append(" in ");    long elapsed = summariserRunningSample.getElapsed();        long elapsedSec = (elapsed + 500) / 1000;    sb.append(JOrphanUtils.formatDuration(elapsedSec));    sb.append(" = ");    if (elapsed > 0) {        sb.append(doubleToSb(dfDouble, tmp, summariserRunningSample.getRate(), 6, 1));    } else {                sb.append("******");    }    sb.append("/s Avg: ");    sb.append(longToSb(tmp, summariserRunningSample.getAverage(), 5));    sb.append(" Min: ");    sb.append(longToSb(tmp, summariserRunningSample.getMin(), 5));    sb.append(" Max: ");    sb.append(longToSb(tmp, summariserRunningSample.getMax(), 5));    sb.append(" Err: ");    sb.append(longToSb(tmp, summariserRunningSample.getErrorCount(), 5));    sb.append(" (");    sb.append(summariserRunningSample.getErrorPercentageString());    sb.append(')');    if ("+".equals(type)) {        ThreadCounts tc = JMeterContextService.getThreadCounts();        sb.append(" Active: ");        sb.append(tc.activeThreads);        sb.append(" Started: ");        sb.append(tc.startedThreads);        sb.append(" Finished: ");        sb.append(tc.finishedThreads);    }    return sb.toString();}
0
private void init()
{        counter = 0L;    runningSum = 0L;    max = Long.MIN_VALUE;    min = Long.MAX_VALUE;    errorCount = 0L;    startTime = System.currentTimeMillis();    endTime = startTime;}
0
public void clear()
{    init();}
0
public void addSample(SummariserRunningSample rs)
{    counter += rs.counter;    errorCount += rs.errorCount;    runningSum += rs.runningSum;    if (max < rs.max) {        max = rs.max;    }    if (min > rs.min) {        min = rs.min;    }        endTime = System.currentTimeMillis();}
0
public void addSample(SampleResult res)
{    counter += res.getSampleCount();    errorCount += res.getErrorCount();    long aTimeInMillis = res.getTime();    runningSum += aTimeInMillis;    if (aTimeInMillis > max) {        max = aTimeInMillis;    }    if (aTimeInMillis < min) {        min = aTimeInMillis;    }        endTime = System.currentTimeMillis();}
0
public long getNumSamples()
{    return counter;}
0
public long getElapsed()
{    if (counter == 0) {                return 0;    }    return endTime - startTime;}
0
public double getRate()
{    if (counter == 0) {                return 0.0;    }    long howLongRunning = endTime - startTime;    if (howLongRunning == 0) {        return Double.MAX_VALUE;    }    return (double) counter / howLongRunning * 1000.0;}
0
public long getAverage()
{    if (counter == 0) {        return 0;    }    return runningSum / counter;}
0
public long getErrorCount()
{    return errorCount;}
0
public String getErrorPercentageString()
{    return errorFormatter.format(getErrorPercentage());}
0
public double getErrorPercentage()
{    if (counter == 0) {        return 0.0;    }    double rval = (double) errorCount / (double) counter;    return rval;}
0
public long getMax()
{    return max;}
0
public long getMin()
{    return min;}
0
public void setEndTime()
{    endTime = System.currentTimeMillis();}
0
public static AliasKeyManager[] wrap(KeyManager[] kms, String alias)
{    AliasKeyManager validManager = Stream.of(kms).filter(m -> m instanceof X509KeyManager).map(m -> (X509KeyManager) m).filter(m -> m.getPrivateKey(alias) != null).map(m -> new AliasKeyManager(m, alias)).findFirst().orElseThrow(() -> new IllegalArgumentException("No key found for alias '" + alias + "'"));    return new AliasKeyManager[] { validManager };}
0
public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket)
{    return alias;}
0
public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket)
{    return alias;}
0
public X509Certificate[] getCertificateChain(String alias)
{    return this.km.getCertificateChain(alias);}
0
public String[] getClientAliases(String keyType, Principal[] issuers)
{    return this.km.getClientAliases(keyType, issuers);}
0
public PrivateKey getPrivateKey(String alias)
{    return this.km.getPrivateKey(alias);}
0
public String[] getServerAliases(String keyType, Principal[] issuers)
{    return this.km.getServerAliases(keyType, issuers);}
0
public ServerSocket createServerSocket(int port) throws IOException
{    return ServerSocketFactory.getDefault().createServerSocket(port, 0, localAddress);}
0
public boolean equals(Object obj)
{    if (this == obj) {        return true;    }    if (obj == null) {        return false;    }    if (getClass() != obj.getClass()) {        return false;    }    RMIServerSocketFactoryImpl other = (RMIServerSocketFactoryImpl) obj;    if (localAddress == null) {        if (other.localAddress != null) {            return false;        }    } else if (!localAddress.equals(other.localAddress)) {        return false;    }    return true;}
0
public int hashCode()
{    return (localAddress == null) ? 0 : localAddress.hashCode();}
0
public String toString()
{    return "RMIServerSocketFactoryImpl(host=" + localAddress + ")";}
0
public static RMIClientSocketFactory createClientSocketFactory()
{    if (SSL_DISABLED) {                return null;    }    if (StringUtils.isBlank(KEYSTORE_FILE)) {        Validate.validState(SSL_DISABLED, "No keystore for RMI over SSL specified. Set 'server.rmi.ssl.disable' to true, if this is intentional," + "if not run create-rmi-keystore.bat/create-rmi-keystore.sh to create a keystore and distribute it on client and servers" + "used for distributed testing.");        return null;    }    final SSLRMIClientSocketFactory factory = new SSLRMIClientSocketFactory();    factory.setAlias(KEYSTORE_ALIAS);    factory.setKeystore(KEYSTORE_FILE, KEYSTORE_TYPE, KEYSTORE_PASSWORD);    factory.setTruststore(TRUSTSTORE_FILE, TRUSTSTORE_TYPE, TRUSTSTORE_PASSWORD);    return factory;}
1
public static RMIServerSocketFactory createServerSocketFactory() throws RemoteException
{    if (SSL_DISABLED) {                return null;    }    if (StringUtils.isBlank(KEYSTORE_FILE)) {        Validate.validState(SSL_DISABLED, "No keystore for RMI over SSL specified. Set 'server.rmi.ssl.disable' to true, if this is intentional.");        return new RMIServerSocketFactoryImpl(getRmiHost());    }    SSLRMIServerSocketFactory factory = new SSLRMIServerSocketFactory(getRmiHost());    factory.setAlias(KEYSTORE_ALIAS);    factory.setNeedClientAuth(true);    factory.setKeystore(KEYSTORE_FILE, KEYSTORE_TYPE, KEYSTORE_PASSWORD);    factory.setTruststore(TRUSTSTORE_FILE, TRUSTSTORE_TYPE, TRUSTSTORE_PASSWORD);    return factory;}
1
public static InetAddress getRmiHost() throws RemoteException
{    InetAddress localHost = null;            String host = System.getProperties().getProperty("java.rmi.server.hostname");    try {        if (host == null) {                        localHost = InetAddress.getLocalHost();        } else {                        localHost = InetAddress.getByName(host);        }    } catch (UnknownHostException e) {        throw new RemoteException("Cannot start. Unable to get local host IP address.", e);    }    if (log.isInfoEnabled()) {            }        if (host == null && localHost.isLoopbackAddress()) {        String hostName = localHost.getHostName();        throw new RemoteException("Cannot start. " + hostName + " is a loopback address.");    }    return localHost;}
1
public static int getRmiRegistryPort()
{    return DEFAULT_RMI_REGISTRY_PORT == 0 ? RmiUtils.DEFAULT_RMI_PORT : DEFAULT_RMI_REGISTRY_PORT;}
0
public void setAlias(String alias)
{    this.alias = alias;}
0
public void setKeystore(String location, String type, String password)
{    this.keyStoreLocation = location;    this.keyStoreType = type;    this.keyStorePassword = password;}
0
public void setTruststore(String location, String type, String password)
{    this.trustStoreLocation = location;    this.trustStoreType = type;    this.trustStorePassword = password;}
0
public Socket createSocket(String host, int port) throws IOException
{    char[] passphrase = null;    if (keyStorePassword != null) {        passphrase = keyStorePassword.toCharArray();    }    KeyStore keyStore = null;    if (keyStoreLocation != null) {        keyStore = loadStore(keyStoreLocation, passphrase, keyStoreType);    }    KeyStore trustStore;    if (trustStoreLocation != null) {        trustStore = loadStore(trustStoreLocation, trustStorePassword.toCharArray(), trustStoreType);    } else {        trustStore = keyStore;    }    if (alias == null) {        throw new IOException("SSL certificate alias cannot be null; MUST be set for SSLServerSocketFactory!");    }    KeyManagerFactory kmf;    SSLContext ctx;    try {        kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());        kmf.init(keyStore, passphrase);        ctx = SSLContext.getInstance("TLS");        TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());        tmf.init(trustStore);        ctx.init(AliasKeyManager.wrap(kmf.getKeyManagers(), alias), tmf.getTrustManagers(), null);    } catch (GeneralSecurityException e) {        throw new IOException(e);    }    SSLSocketFactory factory = ctx.getSocketFactory();    if (factory == null) {        throw new IOException("Unable to obtain SSLSocketFactory for provided KeyStore");    }    return factory.createSocket(host, port);}
0
private KeyStore loadStore(String location, char[] passphrase, String type) throws IOException
{    try {        KeyStore store = KeyStore.getInstance(type);        store.load(new FileInputStream(location), passphrase);        return store;    } catch (NoSuchAlgorithmException | CertificateException | KeyStoreException e) {        throw new IOException("Can't load " + location + " as type " + type, e);    }}
0
public String toString()
{    return "SSLRMIClientSocketFactory(keyStoreLocation=" + this.keyStoreLocation + ", type=" + this.keyStoreType + ", trustStoreLocation=" + this.trustStoreLocation + ", type=" + this.trustStoreType + ", alias=" + this.alias + ')';}
0
public void setNeedClientAuth(boolean clientAuth)
{    this.clientAuth = clientAuth;}
0
public void setKeystore(String location, String type, String password)
{    this.keyStoreLocation = location;    this.keyStoreType = type;    this.keyStorePassword = password;}
0
public void setTruststore(String location, String type, String password)
{    this.trustStoreLocation = location;    this.trustStoreType = type;    this.trustStorePassword = password;}
0
public void setAlias(String alias)
{    this.alias = alias;}
0
public ServerSocket createServerSocket(int port) throws IOException
{    char[] passphrase = null;    if (keyStorePassword != null) {        passphrase = keyStorePassword.toCharArray();    }    KeyStore keyStore = null;    if (keyStoreLocation != null) {        keyStore = loadStore(keyStoreLocation, passphrase, keyStoreType);    }    KeyStore trustStore;    if (trustStoreLocation != null) {        trustStore = loadStore(trustStoreLocation, trustStorePassword.toCharArray(), trustStoreType);    } else {        trustStore = keyStore;    }    if (alias == null) {        throw new IOException("SSL certificate alias cannot be null; MUST be set for SSLServerSocketFactory!");    }    SSLContext ctx;    try {        KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());        kmf.init(keyStore, passphrase);        TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());        tmf.init(trustStore);        ctx = SSLContext.getInstance("TLS");        ctx.init(AliasKeyManager.wrap(kmf.getKeyManagers(), alias), tmf.getTrustManagers(), null);    } catch (GeneralSecurityException e) {        throw new IOException(e);    }    SSLServerSocketFactory factory = ctx.getServerSocketFactory();    if (factory == null) {        throw new IOException("Unable to obtain SSLServerSocketFactory for provided KeyStore");    }    SSLServerSocket socket;    try {        socket = (SSLServerSocket) factory.createServerSocket(port, 0, localAddress);    } catch (BindException e) {        throw new IOException("Could not bind to " + localAddress + " using port " + port, e);    }    socket.setNeedClientAuth(clientAuth);        return socket;}
1
private KeyStore loadStore(String location, char[] passphrase, String type) throws IOException
{    try (FileInputStream fileInputStream = new FileInputStream(location)) {        KeyStore store = KeyStore.getInstance(type);        store.load(fileInputStream, passphrase);        return store;    } catch (NoSuchAlgorithmException | CertificateException | KeyStoreException e) {        throw new IOException(e);    }}
0
public String toString()
{    return "SSLRMIServerSocketFactory(host=" + localAddress + ", keyStoreLocation=" + this.keyStoreLocation + ", type=" + this.keyStoreType + ", trustStoreLocation=" + this.trustStoreLocation + ", type=" + this.trustStoreType + ", alias=" + this.alias + ')';}
0
public boolean applies(ConfigTestElement configElement)
{    return true;}
0
public boolean isClientConfigured()
{    return isClientConfigured;}
0
public void testEnded()
{}
0
protected Object readResolve() throws ObjectStreamException
{    int capacity = getCapacity();            queue = new ArrayBlockingQueue<>(capacity);    Worker worker = new Worker(queue, listener);    worker.setDaemon(true);    worker.start();    return this;}
1
private int getCapacity()
{    return isClientConfigured() ? clientConfiguredCapacity : SERVER_CONFIGURED_CAPACITY;}
0
public void run()
{    try {        boolean eof = false;        while (!eof) {            List<SampleEvent> l = new ArrayList<>();            SampleEvent e = queue.take();                        while (!(eof = e == FINAL_EVENT) && e != null) {                l.add(e);                                e = queue.poll();            }            int size = l.size();            if (size > 0) {                try {                    listener.processBatch(l);                } catch (RemoteException err) {                    if (err.getCause() instanceof java.net.ConnectException) {                        throw new JMeterError("Could not return sample", err);                    }                                    }            }        }    } catch (InterruptedException e) {        Thread.currentThread().interrupt();    }    }
1
protected RemoteSampleListener getListener()
{    return listener;}
0
protected List<SampleEvent> getSampleStore()
{    return sampleStore;}
0
public void testEnded(String host)
{        try {        if (!sampleStore.isEmpty()) {            listener.processBatch(sampleStore);            sampleStore.clear();        }        listener.testEnded(host);    } catch (RemoteException err) {            }}
1
public void sampleOccurred(SampleEvent e)
{    List<SampleEvent> clonedStore = null;    synchronized (sampleStore) {        sampleStore.add(e);        final int sampleCount = sampleStore.size();        boolean sendNow = false;        if (numSamplesThreshold != -1) {            if (sampleCount >= numSamplesThreshold) {                sendNow = true;            }        }        long now = 0;        if (timeThresholdMs != -1) {            now = System.currentTimeMillis();                        if (batchSendTime == -1) {                this.batchSendTime = now + timeThresholdMs;            }            if (batchSendTime < now && sampleCount > 0) {                sendNow = true;            }        }        if (sendNow) {                        @SuppressWarnings("unchecked")            final ArrayList<SampleEvent> clone = (ArrayList<SampleEvent>) ((ArrayList<SampleEvent>) sampleStore).clone();            clonedStore = clone;            sampleStore.clear();            if (timeThresholdMs != -1) {                this.batchSendTime = now + timeThresholdMs;            }        }    }    if (clonedStore != null) {        try {                        listener.processBatch(clonedStore);            clonedStore.clear();        } catch (RemoteException err) {                    }    }}
1
private Object readResolve() throws ObjectStreamException
{    if (isClientConfigured()) {        numSamplesThreshold = clientConfiguredNumSamplesThreshold;        timeThresholdMs = clientConfiguredTimeThresholdMs;    } else {        numSamplesThreshold = NUM_SAMPLES_THRESHOLD;        timeThresholdMs = TIME_THRESHOLD_MS;    }        return this;}
1
public void testEnded(String host)
{        if (decoratedSender != null) {        decoratedSender.testEnded(host);    }}
1
public void sampleOccurred(SampleEvent event)
{        SampleResult result = event.getResult();    if (stripAlsoOnError || result.isSuccessful()) {        stripContent(result, 3);    }    if (decoratedSender == null) {        try {            listener.sampleOccurred(event);        } catch (RemoteException e) {                    }    } else {        decoratedSender.sampleOccurred(event);    }}
1
private void stripContent(SampleResult result, int level)
{    if (level < 0) {        return;    }        stripResponse(result);        for (SampleResult subResult : result.getSubResults()) {        stripContent(subResult, level - 1);    }}
0
private void stripResponse(SampleResult result)
{    result.setBytes(result.getBytesAsLong());    result.setResponseData(EMPTY_BA);}
0
protected Object readResolve() throws ObjectStreamException
{    if (isClientConfigured()) {        stripAlsoOnError = clientConfiguredStripAlsoOnError;    } else {        stripAlsoOnError = SERVER_CONFIGURED_STRIP_ALSO_ON_ERROR;    }        return this;}
1
public void testEnded(String host)
{        singleExecutor.submit(() -> {        try {                        oos.close();        } catch (IOException e) {                    }    });        singleExecutor.shutdown();    try {        if (!singleExecutor.awaitTermination(3, TimeUnit.SECONDS)) {                    }    } catch (InterruptedException e) {                Thread.currentThread().interrupt();    }    try (InputStream fis = new FileInputStream(temporaryFile);        ObjectInputStream ois = new ObjectInputStream(fis)) {        Object obj;        while ((obj = ois.readObject()) != null) {            if (obj instanceof SampleEvent) {                try {                    listener.sampleOccurred((SampleEvent) obj);                } catch (RemoteException err) {                    if (err.getCause() instanceof java.net.ConnectException) {                        throw new JMeterError("Could not return sample", err);                    }                                    }            } else {                            }        }    } catch (EOFException err) {        } catch (IOException | ClassNotFoundException err) {            } finally {        try {            listener.testEnded(host);        } catch (RemoteException e) {                    }        if (!temporaryFile.delete()) {            if (log.isWarnEnabled()) {                            }        }    }}
1
public void sampleOccurred(final SampleEvent e)
{            singleExecutor.submit(() -> {        try {            oos.writeObject(e);        } catch (IOException err) {                    }    });}
1
private Object readResolve() throws ObjectStreamException
{            singleExecutor = Executors.newSingleThreadExecutor();    try {        temporaryFile = File.createTempFile("SerialisedSampleSender", ".ser");        temporaryFile.deleteOnExit();        singleExecutor.submit(() -> {            OutputStream anOutputStream;            try {                anOutputStream = new FileOutputStream(temporaryFile);                oos = new ObjectOutputStream(anOutputStream);            } catch (IOException e) {                            }        });    } catch (IOException e) {            }    return this;}
1
public void addAssertion(Assertion assertion)
{    assertions.add(assertion);}
0
public List<Assertion> getAssertions()
{    return assertions;}
0
public void setSamplerClass(Class<?> samplerClass)
{    this.sampler = samplerClass;}
0
public Class<?> getSamplerClass()
{    return this.sampler;}
0
public ConfigElement getConfigElement(Class<?> configClass)
{    return configSet.get(configClass);}
0
public void addConfigElement(ConfigElement config)
{    addConfigElement(config, config.getClass());}
0
public void addConfigElement(ConfigElement config, Class<?> asClass)
{    if (config != null) {        ConfigElement current = configSet.get(asClass);        if (current == null) {            configSet.put(asClass, cloneIfNecessary(config));        } else {            current.addConfigElement(config);        }    }}
0
private ConfigElement cloneIfNecessary(ConfigElement config)
{    if (config.expectsModification()) {        return config;    }    return (ConfigElement) config.clone();}
0
public JPopupMenu createPopupMenu()
{    return MenuFactory.getDefaultSamplerMenu();}
0
public Collection<String> getMenuCategories()
{    return Arrays.asList(MenuFactory.SAMPLERS);}
0
public void testEnded(String host)
{        try {        for (SampleEvent se : sampleStore) {            listener.sampleOccurred(se);        }        listener.testEnded(host);        sampleStore.clear();    } catch (Error | RuntimeException ex) {                        throw ex;    } catch (Exception ex) {            }}
1
public void sampleOccurred(SampleEvent e)
{    sampleStore.add(e);}
0
protected Object readResolve() throws ObjectStreamException
{            return this;}
1
public void testStarted()
{        try {        listener.testStarted();    } catch (Error | RuntimeException ex) {                        throw ex;    } catch (Exception ex) {            }}
1
public void testEnded()
{    sender.testEnded();}
0
public void testStarted(String host)
{        try {        listener.testStarted(host);    } catch (Error | RuntimeException ex) {                        throw ex;    } catch (Exception ex) {            }}
1
public void testEnded(String host)
{    sender.testEnded(host);}
0
public void sampleOccurred(SampleEvent e)
{    sender.sampleOccurred(e);}
0
public void sampleStarted(SampleEvent e)
{        try {        listener.sampleStarted(e);    } catch (RemoteException err) {            }}
1
public void sampleStopped(SampleEvent e)
{        try {        listener.sampleStopped(e);    } catch (RemoteException err) {            }}
1
private static int addOffset(int port, int offset)
{    if (port == 0) {        return 0;    }    return port + offset;}
0
public void testStarted()
{    if (testListener != null) {        testListener.testStarted();    }}
0
public void testStarted(String host)
{    if (testListener != null) {        testListener.testStarted(host);    }}
0
public void testEnded()
{    if (testListener != null) {        testListener.testEnded();    }}
0
public void testEnded(String host)
{    if (testListener != null) {        testListener.testEnded(host);    }}
0
public void processBatch(List<SampleEvent> samples)
{    if (samples != null && sampleListener != null) {        for (SampleEvent e : samples) {            sampleListener.sampleOccurred(e);        }    }}
0
public void sampleOccurred(SampleEvent e)
{    if (sampleListener != null) {        sampleListener.sampleOccurred(e);    }}
0
public void sampleStarted(SampleEvent e)
{    if (sampleListener != null) {        sampleListener.sampleStarted(e);    }}
0
public void sampleStopped(SampleEvent e)
{    if (sampleListener != null) {        sampleListener.sampleStopped(e);    }}
0
public void sampleOccurred(SampleEvent e)
{    try {        listener.sampleOccurred(e);    } catch (RemoteException err) {                    }}
1
public void sampleStarted(SampleEvent e)
{    try {        listener.sampleStarted(e);    } catch (RemoteException err) {                    }}
1
public void sampleStopped(SampleEvent e)
{    try {        listener.sampleStopped(e);    } catch (RemoteException err) {                    }}
1
public void testStarted()
{    try {        listener.testStarted();    } catch (Exception ex) {                    }}
1
public void testEnded()
{    try {        listener.testEnded();    } catch (Exception ex) {                    }}
1
public void testStarted(String host)
{    try {        listener.testStarted(host);    } catch (Exception ex) {                    }}
1
public void testEnded(String host)
{    try {        listener.testEnded(host);    } catch (Exception ex) {                    }}
1
public static void initSampleVariables()
{    String vars = JMeterUtils.getProperty(SAMPLE_VARIABLES);    variableNames = vars != null ? vars.split(",") : new String[0];    if (log.isInfoEnabled()) {            }}
1
private void saveVars(JMeterVariables vars)
{    for (int i = 0; i < variableNames.length; i++) {        values[i] = vars.get(variableNames[i]);    }}
0
public static int getVarCount()
{    return variableNames.length;}
0
public static String getVarName(int i)
{    return variableNames[i];}
0
public String getVarValue(int i)
{    try {        return values[i];    } catch (ArrayIndexOutOfBoundsException e) {        throw new JMeterError("Check the sample_variable settings!", e);    }}
0
public SampleResult getResult()
{    return result;}
0
public String getThreadGroup()
{    return threadGroup;}
0
public String getHostname()
{    return hostname;}
0
public boolean isTransactionSampleEvent()
{    return isTransactionSampleEvent;}
0
private long initOffset()
{    if (useNanoTime) {        return nanoThreadSleep > 0 ? NanoOffset.getNanoOffset() : System.currentTimeMillis() - sampleNsClockInMs();    } else {        return Long.MIN_VALUE;    }}
0
public void setSaveConfig(SampleSaveConfiguration propertiesToSave)
{    this.saveConfig = propertiesToSave;}
0
public SampleSaveConfiguration getSaveConfig()
{    return saveConfig;}
0
public boolean isStampedAtStart()
{    return START_TIMESTAMP;}
0
public static SampleResult createTestSample(long start, long end)
{    SampleResult res = new SampleResult();    res.setStartTime(start);    res.setEndTime(end);    return res;}
0
public static SampleResult createTestSample(long elapsed)
{    long now = System.currentTimeMillis();    return createTestSample(now, now + elapsed);}
0
private static long sampleNsClockInMs()
{    return System.nanoTime() / 1000000;}
0
public long currentTimeInMillis()
{    if (useNanoTime) {        if (nanoTimeOffset == Long.MIN_VALUE) {            throw new IllegalStateException("Invalid call; nanoTimeOffset has not been set");        }        return sampleNsClockInMs() + nanoTimeOffset;    }    return System.currentTimeMillis();}
0
private void stampAndTime(long stamp, long elapsed)
{    if (START_TIMESTAMP) {        startTime = stamp;        endTime = stamp + elapsed;    } else {        startTime = stamp - elapsed;        endTime = stamp;    }    timeStamp = stamp;    elapsedTime = elapsed;}
0
public void setStampAndTime(long stamp, long elapsed)
{    if (startTime != 0 || endTime != 0) {        throw new IllegalStateException("Calling setStampAndTime() after start/end times have been set");    }    stampAndTime(stamp, elapsed);}
0
public boolean markFile(String filename)
{    return !files.add(filename != null ? filename : NULL_FILENAME);}
0
public String getResponseCode()
{    return responseCode;}
0
public void setResponseCodeOK()
{    responseCode = OK_CODE;}
0
public void setResponseCode(String code)
{    responseCode = code;}
0
public boolean isResponseCodeOK()
{    return responseCode.equals(OK_CODE);}
0
public String getResponseMessage()
{    return responseMessage;}
0
public void setResponseMessage(String msg)
{    responseMessage = msg;}
0
public void setResponseMessageOK()
{    responseMessage = OK_MSG;}
0
public void setResponseOK()
{    setResponseCodeOK();    setResponseMessageOK();    setSuccessful(true);}
0
public String getThreadName()
{    return threadName;}
0
public void setThreadName(String threadName)
{    this.threadName = threadName;}
0
public long getTimeStamp()
{    return timeStamp;}
0
public String getSampleLabel()
{    return label;}
0
public String getSampleLabel(boolean includeGroup)
{    if (includeGroup) {        return threadName.substring(0, threadName.lastIndexOf(' ')) + ":" + label;    }    return label;}
0
public void setSampleLabel(String label)
{    this.label = label;}
0
public void addAssertionResult(AssertionResult assertResult)
{    if (assertionResults == null) {        assertionResults = new ArrayList<>();    }    assertionResults.add(assertResult);}
0
public AssertionResult[] getAssertionResults()
{    if (assertionResults == null) {        return EMPTY_AR;    }    return assertionResults.toArray(new AssertionResult[assertionResults.size()]);}
0
public void addSubResult(SampleResult subResult)
{    addSubResult(subResult, isRenameSampleLabel());}
0
public static boolean isRenameSampleLabel()
{    return !(TestPlan.getFunctionalMode() || DISABLE_SUBRESULTS_RENAMING);}
0
public void addSubResult(SampleResult subResult, boolean renameSubResults)
{    if (subResult == null) {                return;    }    String tn = getThreadName();    if (tn.length() == 0) {        tn = Thread.currentThread().getName();        this.setThreadName(tn);    }    subResult.setThreadName(tn);            setEndTime(Math.max(getEndTime(), subResult.getEndTime() + nanoTimeOffset - subResult.nanoTimeOffset));        setBytes(getBytesAsLong() + subResult.getBytesAsLong());    setSentBytes(getSentBytes() + subResult.getSentBytes());    setHeadersSize(getHeadersSize() + subResult.getHeadersSize());    setBodySize(getBodySizeAsLong() + subResult.getBodySizeAsLong());    addRawSubResult(subResult, renameSubResults);}
0
public void addRawSubResult(SampleResult subResult)
{    storeSubResult(subResult, isRenameSampleLabel());}
0
private void addRawSubResult(SampleResult subResult, boolean renameSubResults)
{    storeSubResult(subResult, renameSubResults);}
0
public void storeSubResult(SampleResult subResult)
{    storeSubResult(subResult, isRenameSampleLabel());}
0
private void storeSubResult(SampleResult subResult, boolean renameSubResults)
{    if (subResults == null) {        subResults = new ArrayList<>();    }    if (renameSubResults) {        subResult.setSampleLabel(getSampleLabel() + "-" + subResultIndex++);    }    subResults.add(subResult);    subResult.setParent(this);}
0
public SampleResult[] getSubResults()
{    if (subResults == null) {        return EMPTY_SR;    }    return subResults.toArray(new SampleResult[subResults.size()]);}
0
public void setResponseData(byte[] response)
{    responseDataAsString = null;    responseData = response == null ? EMPTY_BA : response;}
0
public void setResponseData(String response)
{    responseDataAsString = null;    try {        responseData = response.getBytes(getDataEncodingWithDefault());    } catch (UnsupportedEncodingException e) {                        responseData = response.getBytes(Charset.defaultCharset());    }}
1
public void setResponseData(final String response, final String encoding)
{    responseDataAsString = null;    String encodeUsing = encoding != null ? encoding : DEFAULT_CHARSET;    try {        responseData = response.getBytes(encodeUsing);        setDataEncoding(encodeUsing);    } catch (UnsupportedEncodingException e) {                        responseData = response.getBytes(Charset.defaultCharset());        setDataEncoding(DEFAULT_CHARSET);    }}
1
public byte[] getResponseData()
{    return responseData;}
0
public String getResponseDataAsString()
{    try {        if (responseDataAsString == null) {            responseDataAsString = new String(responseData, getDataEncodingWithDefault());        }        return responseDataAsString;    } catch (UnsupportedEncodingException e) {                        return new String(responseData, Charset.defaultCharset());    }}
1
public void setSamplerData(String s)
{    samplerData = s;}
0
public String getSamplerData()
{    return samplerData;}
0
public long getTime()
{    return elapsedTime;}
0
public boolean isSuccessful()
{    return success;}
0
public void setDataType(String dataType)
{    this.dataType = dataType;}
0
public String getDataType()
{    return dataType;}
0
public void setEncodingAndType(String ct)
{    if (ct != null) {                                                final String charsetPrefix = "charset=";        int cset = ct.toLowerCase(java.util.Locale.ENGLISH).indexOf(charsetPrefix);        if (cset >= 0) {            String charSet = ct.substring(cset + charsetPrefix.length());                        int semiColon = charSet.indexOf(';');            if (semiColon >= 0) {                charSet = charSet.substring(0, semiColon);            }                        if (charSet.startsWith("\"") || charSet.startsWith("\'")) {                                                setDataEncoding(charSet.substring(1, charSet.length() - 1));            } else {                setDataEncoding(charSet);            }        }        if (isBinaryType(ct)) {            setDataType(BINARY);        } else {            setDataType(TEXT);        }    }}
0
public static boolean isBinaryType(String ct)
{    for (String entry : NON_BINARY_TYPES) {        if (ct.startsWith(entry)) {            return false;        }    }    for (String binaryType : BINARY_TYPES) {        if (ct.startsWith(binaryType)) {            return true;        }    }    return false;}
0
public void setSuccessful(boolean success)
{    this.success = success;}
0
public String toString()
{    return getSampleLabel();}
0
public String getDataEncodingWithDefault()
{    return getDataEncodingWithDefault(DEFAULT_ENCODING);}
0
protected String getDataEncodingWithDefault(String defaultEncoding)
{    if (dataEncoding != null && dataEncoding.length() > 0) {        return dataEncoding;    }    return defaultEncoding;}
0
public String getDataEncodingNoDefault()
{    return dataEncoding;}
0
public void setDataEncoding(String dataEncoding)
{    this.dataEncoding = dataEncoding;}
0
public boolean isStopTest()
{    return stopTest;}
0
public boolean isStopTestNow()
{    return stopTestNow;}
0
public boolean isStopThread()
{    return stopThread;}
0
public void setStopTest(boolean b)
{    stopTest = b;}
0
public void setStopTestNow(boolean b)
{    stopTestNow = b;}
0
public void setStopThread(boolean b)
{    stopThread = b;}
0
public String getRequestHeaders()
{    return requestHeaders;}
0
public String getResponseHeaders()
{    return responseHeaders;}
0
public void setRequestHeaders(String string)
{    requestHeaders = string;}
0
public void setResponseHeaders(String string)
{    responseHeaders = string;}
0
public String getContentType()
{    return contentType;}
0
public String getMediaType()
{    return JOrphanUtils.trim(contentType, " ;").toLowerCase(java.util.Locale.ENGLISH);}
0
public void setContentType(String string)
{    contentType = string;}
0
public long getIdleTime()
{    return idleTime;}
0
public long getEndTime()
{    return endTime;}
0
public long getStartTime()
{    return startTime;}
0
protected final void setStartTime(long start)
{    startTime = start;    if (START_TIMESTAMP) {        timeStamp = startTime;    }}
0
public void setEndTime(long end)
{    endTime = end;    if (!START_TIMESTAMP) {        timeStamp = endTime;    }    if (startTime == 0) {            } else {        elapsedTime = endTime - startTime - idleTime;    }}
1
public void setIdleTime(long idle)
{    idleTime = idle;}
0
private void setTimes(long start, long end)
{    setStartTime(start);    setEndTime(end);}
0
public void sampleStart()
{    if (startTime == 0) {        setStartTime(currentTimeInMillis());    } else {            }}
1
public void sampleEnd()
{    if (endTime == 0) {        setEndTime(currentTimeInMillis());    } else {            }}
1
public void samplePause()
{    if (pauseTime != 0) {            }    pauseTime = currentTimeInMillis();}
1
public void sampleResume()
{    if (pauseTime == 0) {            }    idleTime += currentTimeInMillis() - pauseTime;    pauseTime = 0;}
1
public void setMonitor(boolean monitor)
{}
0
public boolean isMonitor()
{    return false;}
0
public void setSampleCount(int count)
{    sampleCount = count;}
0
public int getSampleCount()
{    return sampleCount;}
0
public int getErrorCount()
{    return success ? 0 : 1;}
0
public void setErrorCount(int i)
{}
0
public void setBytes(long length)
{    bytes = length;}
0
public void setBytes(int length)
{    setBytes((long) length);}
0
public void setSentBytes(long sentBytesCount)
{    sentBytes = sentBytesCount;}
0
public long getSentBytes()
{    return sentBytes;}
0
public int getBytes()
{    return (int) getBytesAsLong();}
0
public long getBytesAsLong()
{    long tmpSum = this.getHeadersSize() + this.getBodySizeAsLong();    return tmpSum == 0 ? bytes : tmpSum;}
0
public long getLatency()
{    return latency;}
0
public void latencyEnd()
{    latency = currentTimeInMillis() - startTime - idleTime;}
0
public void setLatency(long latency)
{    this.latency = latency;}
0
public long getConnectTime()
{    return connectTime;}
0
public void connectEnd()
{    connectTime = currentTimeInMillis() - startTime - idleTime;}
0
public void setConnectTime(long time)
{    this.connectTime = time;}
0
public void setTimeStamp(long timeStamp)
{    this.timeStamp = timeStamp;}
0
public void setURL(URL location)
{    this.location = location;}
0
public URL getURL()
{    return location;}
0
public String getUrlAsString()
{    return location == null ? "" : location.toExternalForm();}
0
public SampleResult getParent()
{    return parent;}
0
public void setParent(SampleResult parent)
{    this.parent = parent;}
0
public String getResultFileName()
{    return resultFileName;}
0
public void setResultFileName(String resultFileName)
{    this.resultFileName = resultFileName;}
0
public int getGroupThreads()
{    return groupThreads;}
0
public void setGroupThreads(int n)
{    this.groupThreads = n;}
0
public int getAllThreads()
{    return allThreads;}
0
public void setAllThreads(int n)
{    this.allThreads = n;}
0
public void removeAssertionResults()
{    this.assertionResults = null;}
0
public void removeSubResults()
{    this.subResults = null;}
0
public void setHeadersSize(int size)
{    this.headersSize = size;}
0
public int getHeadersSize()
{    return headersSize;}
0
public int getBodySize()
{    return (int) getBodySizeAsLong();}
0
public long getBodySizeAsLong()
{    return bodySize == 0 ? responseData.length : bodySize;}
0
public void setBodySize(long bodySize)
{    this.bodySize = bodySize;}
0
public void setBodySize(int bodySize)
{    this.bodySize = bodySize;}
0
 static long getNanoOffset()
{    return nanoOffset;}
0
public void run()
{            getOffset(30L);    while (true) {                getOffset(NANOTHREAD_SLEEP);    }}
0
private static void getOffset(long wait)
{    try {        TimeUnit.MILLISECONDS.sleep(wait);        long clock = System.currentTimeMillis();        long nano = SampleResult.sampleNsClockInMs();        nanoOffset = clock - nano;    } catch (InterruptedException ignore) {                Thread.currentThread().interrupt();    }}
0
public boolean isStartNextThreadLoop()
{    return testLogicalAction == TestLogicalAction.START_NEXT_ITERATION_OF_THREAD;}
0
public void setStartNextThreadLoop(boolean startNextThreadLoop)
{    if (startNextThreadLoop) {        testLogicalAction = TestLogicalAction.START_NEXT_ITERATION_OF_THREAD;    } else {        testLogicalAction = TestLogicalAction.CONTINUE;    }}
0
public void cleanAfterSample()
{    this.responseDataAsString = null;}
0
public Object clone()
{    try {        return super.clone();    } catch (CloneNotSupportedException e) {        throw new IllegalStateException("This should not happen");    }}
0
public List<String> getSearchableTokens() throws Exception
{    List<String> datasToSearch = new ArrayList<>(4);    datasToSearch.add(getSampleLabel());    datasToSearch.add(getResponseDataAsString());    datasToSearch.add(getRequestHeaders());    datasToSearch.add(getResponseHeaders());    return datasToSearch;}
0
public boolean isIgnore()
{    return ignore;}
0
public void setIgnore()
{    this.ignore = true;}
0
public String getFirstAssertionFailureMessage()
{    String message = null;    AssertionResult[] results = getAssertionResults();    if (results != null) {                for (AssertionResult result : results) {            message = result.getFailureMessage();            if (message != null) {                break;            }        }    }    return message;}
0
public TestLogicalAction getTestLogicalAction()
{    return testLogicalAction;}
0
public void setTestLogicalAction(TestLogicalAction testLogicalAction)
{    this.testLogicalAction = testLogicalAction;}
0
public int getVarCount()
{        return varCount;}
0
public void setVarCount(int varCount)
{        this.varCount = varCount;}
0
public static SampleSaveConfiguration staticConfig()
{    return STATIC_SAVE_CONFIGURATION;}
0
public static final String getterName(String configName)
{    return CONFIG_GETTER_PREFIX + configName;}
0
public static final String setterName(String configName)
{    return CONFIG_SETTER_PREFIX + configName;}
0
private static String validateFormat(String temporaryTimestampFormat)
{    try {        new SimpleDateFormat(temporaryTimestampFormat);        if (log.isDebugEnabled()) {                    }        return temporaryTimestampFormat;    } catch (IllegalArgumentException ex) {                return null;    }}
1
private Object readResolve()
{    setupDateFormat(DATE_FORMAT);    return this;}
0
private void setupDateFormat(String pDateFormat)
{    this.dateFormat = pDateFormat;    if (dateFormat != null) {        this.timestampFormatter = FastDateFormat.getInstance(dateFormat);    } else {        this.timestampFormatter = null;    }}
0
public Object clone()
{    try {        SampleSaveConfiguration clone = (SampleSaveConfiguration) super.clone();        if (this.dateFormat != null) {            clone.timestampFormatter = (FastDateFormat) this.threadSafeLenientFormatter().clone();        }        return clone;    } catch (CloneNotSupportedException e) {        throw new RuntimeException("Should not happen", e);    }}
0
public boolean equals(Object obj)
{    if (this == obj) {        return true;    }    if ((obj == null) || (obj.getClass() != this.getClass())) {        return false;    }        SampleSaveConfiguration s = (SampleSaveConfiguration) obj;    boolean primitiveValues = s.time == time && s.latency == latency && s.connectTime == connectTime && s.timestamp == timestamp && s.success == success && s.label == label && s.code == code && s.message == message && s.threadName == threadName && s.dataType == dataType && s.encoding == encoding && s.assertions == assertions && s.subresults == subresults && s.responseData == responseData && s.samplerData == samplerData && s.xml == xml && s.fieldNames == fieldNames && s.responseHeaders == responseHeaders && s.requestHeaders == requestHeaders && s.assertionsResultsToSave == assertionsResultsToSave && s.saveAssertionResultsFailureMessage == saveAssertionResultsFailureMessage && s.printMilliseconds == printMilliseconds && s.responseDataOnError == responseDataOnError && s.url == url && s.bytes == bytes && s.sentBytes == sentBytes && s.fileName == fileName && s.hostname == hostname && s.sampleCount == sampleCount && s.idleTime == idleTime && s.threadCounts == threadCounts;    boolean stringValues = false;    if (primitiveValues) {        stringValues = Objects.equals(delimiter, s.delimiter);    }    boolean complexValues = false;    if (primitiveValues && stringValues) {        complexValues = Objects.equals(dateFormat, s.dateFormat);    }    return primitiveValues && stringValues && complexValues;}
0
public int hashCode()
{    int hash = 7;    hash = 31 * hash + (time ? 1 : 0);    hash = 31 * hash + (latency ? 1 : 0);    hash = 31 * hash + (connectTime ? 1 : 0);    hash = 31 * hash + (timestamp ? 1 : 0);    hash = 31 * hash + (success ? 1 : 0);    hash = 31 * hash + (label ? 1 : 0);    hash = 31 * hash + (code ? 1 : 0);    hash = 31 * hash + (message ? 1 : 0);    hash = 31 * hash + (threadName ? 1 : 0);    hash = 31 * hash + (dataType ? 1 : 0);    hash = 31 * hash + (encoding ? 1 : 0);    hash = 31 * hash + (assertions ? 1 : 0);    hash = 31 * hash + (subresults ? 1 : 0);    hash = 31 * hash + (responseData ? 1 : 0);    hash = 31 * hash + (samplerData ? 1 : 0);    hash = 31 * hash + (xml ? 1 : 0);    hash = 31 * hash + (fieldNames ? 1 : 0);    hash = 31 * hash + (responseHeaders ? 1 : 0);    hash = 31 * hash + (requestHeaders ? 1 : 0);    hash = 31 * hash + assertionsResultsToSave;    hash = 31 * hash + (saveAssertionResultsFailureMessage ? 1 : 0);    hash = 31 * hash + (printMilliseconds ? 1 : 0);    hash = 31 * hash + (responseDataOnError ? 1 : 0);    hash = 31 * hash + (url ? 1 : 0);    hash = 31 * hash + (bytes ? 1 : 0);    hash = 31 * hash + (sentBytes ? 1 : 0);    hash = 31 * hash + (fileName ? 1 : 0);    hash = 31 * hash + (hostname ? 1 : 0);    hash = 31 * hash + (threadCounts ? 1 : 0);    hash = 31 * hash + (delimiter != null ? delimiter.hashCode() : 0);    hash = 31 * hash + (dateFormat != null ? dateFormat.hashCode() : 0);    hash = 31 * hash + (sampleCount ? 1 : 0);    hash = 31 * hash + (idleTime ? 1 : 0);    return hash;}
0
public boolean saveResponseHeaders()
{    return responseHeaders;}
0
public void setResponseHeaders(boolean r)
{    responseHeaders = r;}
0
public boolean saveRequestHeaders()
{    return requestHeaders;}
0
public void setRequestHeaders(boolean r)
{    requestHeaders = r;}
0
public boolean saveAssertions()
{    return assertions;}
0
public void setAssertions(boolean assertions)
{    this.assertions = assertions;}
0
public boolean saveCode()
{    return code;}
0
public void setCode(boolean code)
{    this.code = code;}
0
public boolean saveDataType()
{    return dataType;}
0
public void setDataType(boolean dataType)
{    this.dataType = dataType;}
0
public boolean saveEncoding()
{    return encoding;}
0
public void setEncoding(boolean encoding)
{    this.encoding = encoding;}
0
public boolean saveLabel()
{    return label;}
0
public void setLabel(boolean label)
{    this.label = label;}
0
public boolean saveLatency()
{    return latency;}
0
public void setLatency(boolean latency)
{    this.latency = latency;}
0
public boolean saveConnectTime()
{    return connectTime;}
0
public void setConnectTime(boolean connectTime)
{    this.connectTime = connectTime;}
0
public boolean saveMessage()
{    return message;}
0
public void setMessage(boolean message)
{    this.message = message;}
0
public boolean saveResponseData(SampleResult res)
{    return responseData || TestPlan.getFunctionalMode() || (responseDataOnError && !res.isSuccessful());}
0
public boolean saveResponseData()
{    return responseData;}
0
public void setResponseData(boolean responseData)
{    this.responseData = responseData;}
0
public boolean saveSamplerData(SampleResult res)
{    return     samplerData || TestPlan.getFunctionalMode() || (responseDataOnError && !res.isSuccessful());}
0
public boolean saveSamplerData()
{    return samplerData;}
0
public void setSamplerData(boolean samplerData)
{    this.samplerData = samplerData;}
0
public boolean saveSubresults()
{    return subresults;}
0
public void setSubresults(boolean subresults)
{    this.subresults = subresults;}
0
public boolean saveSuccess()
{    return success;}
0
public void setSuccess(boolean success)
{    this.success = success;}
0
public boolean saveThreadName()
{    return threadName;}
0
public void setThreadName(boolean threadName)
{    this.threadName = threadName;}
0
public boolean saveTime()
{    return time;}
0
public void setTime(boolean time)
{    this.time = time;}
0
public boolean saveTimestamp()
{    return timestamp;}
0
public void setTimestamp(boolean timestamp)
{    this.timestamp = timestamp;}
0
public boolean saveAsXml()
{    return xml;}
0
public void setAsXml(boolean xml)
{    this.xml = xml;}
0
public boolean saveFieldNames()
{    return fieldNames;}
0
public void setFieldNames(boolean printFieldNames)
{    this.fieldNames = printFieldNames;}
0
public boolean saveUrl()
{    return url;}
0
public void setUrl(boolean save)
{    this.url = save;}
0
public boolean saveBytes()
{    return bytes;}
0
public void setBytes(boolean save)
{    this.bytes = save;}
0
public boolean saveSentBytes()
{    return sentBytes;}
0
public void setSentBytes(boolean save)
{    this.sentBytes = save;}
0
public boolean saveFileName()
{    return fileName;}
0
public void setFileName(boolean save)
{    this.fileName = save;}
0
public boolean saveAssertionResultsFailureMessage()
{    return saveAssertionResultsFailureMessage;}
0
public void setAssertionResultsFailureMessage(boolean b)
{    saveAssertionResultsFailureMessage = b;}
0
public boolean saveThreadCounts()
{    return threadCounts;}
0
public void setThreadCounts(boolean save)
{    this.threadCounts = save;}
0
public boolean saveSampleCount()
{    return sampleCount;}
0
public void setSampleCount(boolean save)
{    this.sampleCount = save;}
0
public void setDateFormat(String fmt)
{        printMilliseconds = fmt == null;    setupDateFormat(fmt);}
0
public boolean printMilliseconds()
{    return printMilliseconds;}
0
public DateFormat strictDateFormatter()
{    if (dateFormat != null) {        return new SimpleDateFormat(dateFormat);    } else {        return null;    }}
0
public FastDateFormat threadSafeLenientFormatter()
{        if (timestampFormatter == null) {        timestampFormatter = dateFormat != null ? FastDateFormat.getInstance(dateFormat) : null;    }    return timestampFormatter;}
0
public int assertionsResultsToSave()
{    return assertionsResultsToSave;}
0
public String getDelimiter()
{    return delimiter;}
0
public String getXmlPi()
{        return JMeterUtils.getJMeterProperties().getProperty(XML_PI, "");}
0
public void setDelimiter(String delim)
{    delimiter = delim;}
0
public void setDefaultDelimiter()
{    delimiter = DELIMITER;}
0
public void setDefaultTimeStampFormat()
{    printMilliseconds = PRINT_MILLISECONDS;    setupDateFormat(DATE_FORMAT);}
0
public boolean saveHostname()
{    return hostname;}
0
public void setHostname(boolean save)
{    hostname = save;}
0
public boolean saveIdleTime()
{    return idleTime;}
0
public void setIdleTime(boolean save)
{    idleTime = save;}
0
 static SampleSender getInstance(RemoteSampleListener listener)
{            final String type = JMeterUtils.getPropDefault("mode", MODE_STRIPPED_BATCH);    SampleSender s;    if (type.equalsIgnoreCase(MODE_BATCH)) {        s = new BatchSampleSender(listener);    } else if (type.equalsIgnoreCase(MODE_STRIPPED_BATCH)) {        s = new DataStrippingSampleSender(new BatchSampleSender(listener));    } else if (type.equalsIgnoreCase(MODE_STATISTICAL)) {        s = new StatisticalSampleSender(listener);    } else if (type.equalsIgnoreCase(MODE_STANDARD)) {        s = new StandardSampleSender(listener);    } else if (type.equalsIgnoreCase(MODE_STRIPPED)) {        s = new DataStrippingSampleSender(listener);    } else if (type.equalsIgnoreCase(MODE_ASYNCH)) {        s = new AsynchSampleSender(listener);    } else if (type.equalsIgnoreCase(MODE_STRIPPED_ASYNCH)) {        s = new DataStrippingSampleSender(new AsynchSampleSender(listener));    } else if (type.equalsIgnoreCase(MODE_DISKSTORE)) {        s = new DiskStoreSampleSender(listener);    } else if (type.equalsIgnoreCase(MODE_STRIPPED_DISKSTORE)) {        s = new DataStrippingSampleSender(new DiskStoreSampleSender(listener));    } else {                try {            Class<?> clazz = Class.forName(type);            Constructor<?> cons = clazz.getConstructor(RemoteSampleListener.class);            s = (SampleSender) cons.newInstance(listener);        } catch (Exception e) {                                    throw new IllegalArgumentException("Unable to create a sample sender from mode or class:'" + type + "', search for mode property in jmeter.properties for correct configuration options, " + "message:" + e.getMessage(), e);        }    }    return s;}
1
public void testEnded(String host)
{        try {        listener.testEnded(host);    } catch (RemoteException ex) {            }}
1
public void sampleOccurred(SampleEvent e)
{    try {        listener.sampleOccurred(e);    } catch (RemoteException err) {        if (err.getCause() instanceof java.net.ConnectException) {            throw new JMeterError("Could not return sample", err);        }            }}
1
private Object readResolve() throws ObjectStreamException
{        return this;}
1
public void add(SampleResult res)
{        setSampleCount(getSampleCount() + res.getSampleCount());    setBytes(getBytesAsLong() + res.getBytesAsLong());    setSentBytes(getSentBytes() + res.getSentBytes());        if (!res.isSuccessful()) {        errorCount++;        this.setSuccessful(false);    }        if (getStartTime() == 0) {                this.setStartTime(res.getStartTime());    } else {        this.setStartTime(Math.min(getStartTime(), res.getStartTime()));    }    this.setEndTime(Math.max(getEndTime(), res.getEndTime()));    setLatency(getLatency() + res.getLatency());    setConnectTime(getConnectTime() + res.getConnectTime());    elapsed += res.getTime();}
0
public long getTime()
{    return elapsed;}
0
public long getTimeStamp()
{    return getEndTime();}
0
public int getErrorCount()
{        return errorCount;}
0
public void setErrorCount(int e)
{        errorCount = e;}
0
public static String getKey(SampleEvent event, boolean keyOnThreadName)
{    StringBuilder sb = new StringBuilder(80);    sb.append(event.getResult().getSampleLabel());    if (keyOnThreadName) {        sb.append('-').append(event.getResult().getThreadName());    } else {        sb.append('-').append(event.getThreadGroup());    }    return sb.toString();}
0
public void testEnded(String host)
{        try {        if (!sampleStore.isEmpty()) {            sendBatch();        }        listener.testEnded(host);    } catch (RemoteException err) {            }}
1
public void sampleOccurred(SampleEvent e)
{    synchronized (sampleStore) {                String key = StatisticalSampleResult.getKey(e, keyOnThreadName);        StatisticalSampleResult statResult = sampleTable.get(key);        if (statResult == null) {            statResult = new StatisticalSampleResult(e.getResult());                        sampleTable.put(key, statResult);                        sampleStore.add(new SampleEvent(statResult, e.getThreadGroup()));        }        statResult.add(e.getResult());        sampleCount++;        boolean sendNow = false;        if (numSamplesThreshold != -1) {            if (sampleCount >= numSamplesThreshold) {                sendNow = true;            }        }        long now = 0;        if (timeThresholdMs != -1) {            now = System.currentTimeMillis();                        if (batchSendTime == -1) {                this.batchSendTime = now + timeThresholdMs;            }            if (batchSendTime < now) {                sendNow = true;            }        }        if (sendNow) {            try {                                sendBatch();                if (timeThresholdMs != -1) {                    this.batchSendTime = now + timeThresholdMs;                }            } catch (RemoteException err) {                            }        }    }}
1
private void sendBatch() throws RemoteException
{    if (!sampleStore.isEmpty()) {        listener.processBatch(sampleStore);        sampleStore.clear();        sampleTable.clear();        sampleCount = 0;    }}
0
private Object readResolve() throws ObjectStreamException
{    if (isClientConfigured()) {        numSamplesThreshold = clientConfiguredNumSamplesThreshold;        timeThresholdMs = clientConfiguredTimeThresholdMs;        keyOnThreadName = clientConfiguredKeyOnThreadName;    } else {        numSamplesThreshold = NUM_SAMPLES_THRESHOLD;        timeThresholdMs = TIME_THRESHOLD_MS;        keyOnThreadName = KEY_ON_THREADNAME;    }    if (log.isInfoEnabled()) {            }    return this;}
1
public static String getVersion()
{        return "$Revision$";}
0
public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0)
{        return BooleanProperty.class.equals(arg0);}
0
public void marshal(Object obj, HierarchicalStreamWriter writer, MarshallingContext arg2)
{    BooleanProperty prop = (BooleanProperty) obj;    writer.addAttribute(ConversionHelp.ATT_NAME, ConversionHelp.encode(prop.getName()));    writer.setValue(prop.getStringValue());}
0
public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context)
{    final String name = ConversionHelp.getPropertyName(reader, context);    if (name == null) {        return null;    }    BooleanProperty prop = new BooleanProperty(name, Boolean.valueOf(reader.getValue()).booleanValue());    return prop;}
0
public static void setInVersion(String v)
{    inVersion = v;}
0
public static void setOutVersion(String v)
{    outVersion = v;}
0
public static String encode(String p)
{    if (p == null) {                return "";    }        if (!"1.0".equals(outVersion)) {                return p;    }    try {        return URLEncoder.encode(p, CHAR_SET);    } catch (UnsupportedEncodingException e) {                return p;    }}
1
public static String decode(String p)
{    if (!"1.0".equals(inVersion)) {                return p;    }        if (p == null) {        return null;    }    try {        return URLDecoder.decode(p, CHAR_SET);    } catch (UnsupportedEncodingException e) {                return p;    }}
1
public static String cdata(byte[] chars, String encoding) throws UnsupportedEncodingException
{    return "<![CDATA[" + new String(chars, encoding) + "]]>";}
0
private static void mapentry(String prop, String att)
{    propertyToAttribute.put(prop, att);}
0
private static void saveClass(TestElement el, HierarchicalStreamWriter writer, String prop)
{    String clazz = el.getPropertyAsString(prop);    if (clazz.length() > 0) {        writer.addAttribute(propertyToAttribute.get(prop), SaveService.classToAlias(clazz));    }}
0
private static void restoreClass(TestElement el, HierarchicalStreamReader reader, String prop)
{    String att = propertyToAttribute.get(prop);    String alias = reader.getAttribute(att);    if (alias != null) {        alias = SaveService.aliasToClass(alias);        if (TestElement.GUI_CLASS.equals(prop)) {                        alias = NameUpdater.getCurrentName(alias);        }        el.setProperty(prop, alias);    }}
0
private static void saveItem(TestElement el, HierarchicalStreamWriter writer, String prop, boolean encode)
{    String item = el.getPropertyAsString(prop);    if (item.length() > 0) {        if (encode) {            item = ConversionHelp.encode(item);        }        writer.addAttribute(propertyToAttribute.get(prop), item);    }}
0
private static void restoreItem(TestElement el, HierarchicalStreamReader reader, String prop, boolean decode)
{    String att = propertyToAttribute.get(prop);    String value = reader.getAttribute(att);    if (value != null) {        if (decode) {            value = ConversionHelp.decode(value);        }        el.setProperty(prop, value);    }}
0
public static boolean isSpecialProperty(String name)
{    return propertyToAttribute.containsKey(name);}
0
public static String getPropertyName(HierarchicalStreamReader reader, UnmarshallingContext context)
{    String name = ConversionHelp.decode(reader.getAttribute(ATT_NAME));    return getUpgradePropertyName(name, context);}
0
public static String getPropertyValue(HierarchicalStreamReader reader, UnmarshallingContext context, String name)
{    String value = ConversionHelp.decode(reader.getValue());    return getUpgradePropertyValue(name, value, context);}
0
public static String getUpgradePropertyName(String name, UnmarshallingContext context)
{    String testClass = (String) context.get(SaveService.TEST_CLASS_NAME);    final String newName = NameUpdater.getCurrentName(name, testClass);        if (name.length() != 0 && newName.length() == 0) {        return null;    }    return newName;}
0
public static String getUpgradePropertyValue(String name, String value, UnmarshallingContext context)
{    String testClass = (String) context.get(SaveService.TEST_CLASS_NAME);    return NameUpdater.getCurrentName(value, name, testClass);}
0
public static void saveSpecialProperties(TestElement testElement, HierarchicalStreamWriter writer)
{    saveClass(testElement, writer, TestElement.GUI_CLASS);    saveClass(testElement, writer, TestElement.TEST_CLASS);    saveItem(testElement, writer, TestElement.NAME, true);    saveItem(testElement, writer, TestElement.ENABLED, false);}
0
public static void restoreSpecialProperties(TestElement testElement, HierarchicalStreamReader reader)
{    restoreClass(testElement, reader, TestElement.GUI_CLASS);    restoreClass(testElement, reader, TestElement.TEST_CLASS);    restoreItem(testElement, reader, TestElement.NAME, true);    restoreItem(testElement, reader, TestElement.ENABLED, false);}
0
public static String getVersion()
{        return "$Revision$";}
0
public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0)
{        return HashTree.class.isAssignableFrom(arg0);}
0
public void marshal(Object arg0, HierarchicalStreamWriter writer, MarshallingContext context)
{    HashTree tree = (HashTree) arg0;    for (Object item : tree.list()) {        writeItem(item, context, writer);        writeItem(tree.getTree(item), context, writer);    }}
0
public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context)
{    boolean isKey = true;    Object current = null;    HashTree tree = (HashTree) createCollection(context.getRequiredType());    while (reader.hasMoreChildren()) {        reader.moveDown();        Object item = readItem(reader, context, tree);        if (isKey) {            tree.add(item);            current = item;            isKey = false;        } else {            tree.set(current, (HashTree) item);            isKey = true;        }        reader.moveUp();    }    return tree;}
0
public static String getVersion()
{        return "$Revision$";}
0
public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0)
{        return IntegerProperty.class.equals(arg0);}
0
public void marshal(Object obj, HierarchicalStreamWriter writer, MarshallingContext arg2)
{    IntegerProperty prop = (IntegerProperty) obj;    writer.addAttribute(ConversionHelp.ATT_NAME, ConversionHelp.encode(prop.getName()));    writer.setValue(prop.getStringValue());}
0
public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context)
{    final String name = ConversionHelp.getPropertyName(reader, context);    if (name == null) {        return null;    }    IntegerProperty prop = new IntegerProperty(name, Integer.parseInt(reader.getValue()));    return prop;}
0
public static String getVersion()
{        return "$Revision$";}
0
public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0)
{        return LongProperty.class.equals(arg0);}
0
public void marshal(Object obj, HierarchicalStreamWriter writer, MarshallingContext arg2)
{    LongProperty prop = (LongProperty) obj;    writer.addAttribute(ConversionHelp.ATT_NAME, ConversionHelp.encode(prop.getName()));    writer.setValue(prop.getStringValue());}
0
public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context)
{    final String name = ConversionHelp.getPropertyName(reader, context);    if (name == null) {        return null;    }    LongProperty prop = new LongProperty(name, Long.parseLong(reader.getValue()));    return prop;}
0
public static String getVersion()
{        return "$Revision$";}
0
public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0)
{        return CollectionProperty.class.equals(arg0) || MapProperty.class.equals(arg0);}
0
public void marshal(Object arg0, HierarchicalStreamWriter writer, MarshallingContext context)
{    MultiProperty prop = (MultiProperty) arg0;    writer.addAttribute(ConversionHelp.ATT_NAME, ConversionHelp.encode(prop.getName()));    for (JMeterProperty jMeterProperty : prop) {        writeItem(jMeterProperty, context, writer);    }}
0
public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context)
{    MultiProperty prop = (MultiProperty) createCollection(context.getRequiredType());    prop.setName(ConversionHelp.decode(reader.getAttribute(ConversionHelp.ATT_NAME)));    while (reader.hasMoreChildren()) {        reader.moveDown();        JMeterProperty subProp = (JMeterProperty) readItem(reader, context, prop);        if (subProp != null) {                        prop.addProperty(subProp);        }        reader.moveUp();    }    return prop;}
0
public static String getVersion()
{        return "$Revision$";}
0
public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0)
{        return SampleEvent.class.equals(arg0);}
0
public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context)
{    SampleEvent evt = (SampleEvent) source;    Object res = evt.getResult();    context.convertAnother(res);}
0
public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context)
{    SampleEvent evt = new SampleEvent();    return evt;}
0
public static String getVersion()
{        return "$Revision$";}
0
public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0)
{        return SampleResult.class.equals(arg0);}
0
public void marshal(Object obj, HierarchicalStreamWriter writer, MarshallingContext context)
{    SampleResult res = (SampleResult) obj;    SampleSaveConfiguration save = res.getSaveConfig();    setAttributes(writer, context, res, save);    saveAssertions(writer, context, res, save);    saveSubResults(writer, context, res, save);    saveResponseHeaders(writer, context, res, save);    saveRequestHeaders(writer, context, res, save);    saveResponseData(writer, context, res, save);    saveSamplerData(writer, context, res, save);}
0
protected void saveSamplerData(HierarchicalStreamWriter writer, MarshallingContext context, SampleResult res, SampleSaveConfiguration save)
{    if (save.saveSamplerData(res)) {        writeString(writer, TAG_SAMPLER_DATA, res.getSamplerData());    }    if (save.saveUrl()) {        final URL url = res.getURL();        if (url != null) {            writeItem(url, context, writer);        }    }}
0
protected void saveResponseData(HierarchicalStreamWriter writer, MarshallingContext context, SampleResult res, SampleSaveConfiguration save)
{    if (save.saveResponseData(res)) {        writer.startNode(TAG_RESPONSE_DATA);        writer.addAttribute(ATT_CLASS, JAVA_LANG_STRING);        try {            if (SampleResult.TEXT.equals(res.getDataType())) {                writer.setValue(new String(res.getResponseData(), res.getDataEncodingWithDefault()));            } else {                writer.setValue("Non-TEXT response data, cannot record: (" + res.getDataType() + ")");            }                } catch (UnsupportedEncodingException e) {            writer.setValue("Unsupported encoding in response data, cannot record: " + e);        }        writer.endNode();    }    if (save.saveFileName()) {        writer.startNode(TAG_RESPONSE_FILE);        writer.addAttribute(ATT_CLASS, JAVA_LANG_STRING);        writer.setValue(res.getResultFileName());        writer.endNode();    }}
0
protected void saveRequestHeaders(HierarchicalStreamWriter writer, MarshallingContext context, SampleResult res, SampleSaveConfiguration save)
{    if (save.saveRequestHeaders()) {        writeString(writer, TAG_REQUEST_HEADER, res.getRequestHeaders());    }}
0
protected void saveResponseHeaders(HierarchicalStreamWriter writer, MarshallingContext context, SampleResult res, SampleSaveConfiguration save)
{    if (save.saveResponseHeaders()) {        writeString(writer, TAG_RESPONSE_HEADER, res.getResponseHeaders());    }}
0
protected void saveSubResults(HierarchicalStreamWriter writer, MarshallingContext context, SampleResult res, SampleSaveConfiguration save)
{    if (save.saveSubresults()) {        SampleResult[] subResults = res.getSubResults();        for (SampleResult subResult : subResults) {            subResult.setSaveConfig(save);            writeItem(subResult, context, writer);        }    }}
0
protected void saveAssertions(HierarchicalStreamWriter writer, MarshallingContext context, SampleResult res, SampleSaveConfiguration save)
{    if (save.saveAssertions()) {        AssertionResult[] assertionResults = res.getAssertionResults();        for (AssertionResult assertionResult : assertionResults) {            writeItem(assertionResult, context, writer);        }    }}
0
protected void setAttributes(HierarchicalStreamWriter writer, MarshallingContext context, SampleResult res, SampleSaveConfiguration save)
{    if (save.saveTime()) {        writer.addAttribute(ATT_TIME, Long.toString(res.getTime()));    }    if (save.saveIdleTime()) {        writer.addAttribute(ATT_IDLETIME, Long.toString(res.getIdleTime()));    }    if (save.saveLatency()) {        writer.addAttribute(ATT_LATENCY, Long.toString(res.getLatency()));    }    if (save.saveConnectTime()) {        writer.addAttribute(ATT_CONNECT_TIME, Long.toString(res.getConnectTime()));    }    if (save.saveTimestamp()) {        writer.addAttribute(ATT_TIME_STAMP, Long.toString(res.getTimeStamp()));    }    if (save.saveSuccess()) {        writer.addAttribute(ATT_SUCCESS, Boolean.toString(res.isSuccessful()));    }    if (save.saveLabel()) {        writer.addAttribute(ATT_LABEL, ConversionHelp.encode(res.getSampleLabel()));    }    if (save.saveCode()) {        writer.addAttribute(ATT_RESPONSE_CODE, ConversionHelp.encode(res.getResponseCode()));    }    if (save.saveMessage()) {        writer.addAttribute(ATT_RESPONSE_MESSAGE, ConversionHelp.encode(res.getResponseMessage()));    }    if (save.saveThreadName()) {        writer.addAttribute(ATT_THREADNAME, ConversionHelp.encode(res.getThreadName()));    }    if (save.saveDataType()) {        writer.addAttribute(ATT_DATA_TYPE, ConversionHelp.encode(res.getDataType()));    }    if (save.saveEncoding()) {        writer.addAttribute(ATT_DATA_ENCODING, ConversionHelp.encode(res.getDataEncodingNoDefault()));    }    if (save.saveBytes()) {        writer.addAttribute(ATT_BYTES, String.valueOf(res.getBytesAsLong()));    }    if (save.saveSentBytes()) {        writer.addAttribute(ATT_SENT_BYTES, String.valueOf(res.getSentBytes()));    }    if (save.saveSampleCount()) {        writer.addAttribute(ATT_SAMPLE_COUNT, String.valueOf(res.getSampleCount()));        writer.addAttribute(ATT_ERROR_COUNT, String.valueOf(res.getErrorCount()));    }    if (save.saveThreadCounts()) {        writer.addAttribute(ATT_GRP_THRDS, String.valueOf(res.getGroupThreads()));        writer.addAttribute(ATT_ALL_THRDS, String.valueOf(res.getAllThreads()));    }    SampleEvent event = (SampleEvent) context.get(SaveService.SAMPLE_EVENT_OBJECT);    if (event != null) {        if (save.saveHostname()) {            writer.addAttribute(ATT_HOSTNAME, event.getHostname());        }        for (int i = 0; i < SampleEvent.getVarCount(); i++) {            writer.addAttribute(SampleEvent.getVarName(i), ConversionHelp.encode(event.getVarValue(i)));        }    }}
0
protected void writeString(HierarchicalStreamWriter writer, String tag, String value)
{    if (value != null) {        writer.startNode(tag);        writer.addAttribute(ATT_CLASS, JAVA_LANG_STRING);        writer.setValue(value);        writer.endNode();    }}
0
public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context)
{    SampleResult res = (SampleResult) createCollection(context.getRequiredType());    retrieveAttributes(reader, context, res);    while (reader.hasMoreChildren()) {        reader.moveDown();        Object subItem = readItem(reader, context, res);        retrieveItem(reader, context, res, subItem);        reader.moveUp();    }        String resultFileName = res.getResultFileName();    if (resultFileName.length() > 0 && res.getResponseData().length == 0) {        readFile(resultFileName, res);    }    return res;}
0
protected boolean retrieveItem(HierarchicalStreamReader reader, UnmarshallingContext context, SampleResult res, Object subItem)
{    String nodeName = reader.getNodeName();    if (subItem instanceof AssertionResult) {        res.addAssertionResult((AssertionResult) subItem);    } else if (subItem instanceof SampleResult) {        res.storeSubResult((SampleResult) subItem);    } else if (nodeName.equals(TAG_RESPONSE_HEADER)) {        res.setResponseHeaders((String) subItem);    } else if (nodeName.equals(TAG_REQUEST_HEADER)) {        res.setRequestHeaders((String) subItem);    } else if (nodeName.equals(TAG_RESPONSE_DATA)) {        final String responseData = (String) subItem;        if (responseData.length() > 0) {            final String dataEncoding = res.getDataEncodingWithDefault();            try {                res.setResponseData(responseData.getBytes(dataEncoding));            } catch (UnsupportedEncodingException e) {                res.setResponseData("Can't support the char set: " + dataEncoding, null);                res.setDataType(SampleResult.TEXT);            }        }    } else if (nodeName.equals(TAG_SAMPLER_DATA)) {        res.setSamplerData((String) subItem);    } else if (nodeName.equals(TAG_RESPONSE_FILE)) {        res.setResultFileName((String) subItem);        } else {        return false;    }    return true;}
0
protected void retrieveAttributes(HierarchicalStreamReader reader, UnmarshallingContext context, SampleResult res)
{    res.setSampleLabel(ConversionHelp.decode(reader.getAttribute(ATT_LABEL)));    res.setDataEncoding(ConversionHelp.decode(reader.getAttribute(ATT_DATA_ENCODING)));    res.setDataType(ConversionHelp.decode(reader.getAttribute(ATT_DATA_TYPE)));    String oldrc = reader.getAttribute(ATT_RESPONSE_CODE_OLD);    if (oldrc != null) {        res.setResponseCode(ConversionHelp.decode(oldrc));    } else {        res.setResponseCode(ConversionHelp.decode(reader.getAttribute(ATT_RESPONSE_CODE)));    }    res.setResponseMessage(ConversionHelp.decode(reader.getAttribute(ATT_RESPONSE_MESSAGE)));    res.setSuccessful(Converter.getBoolean(reader.getAttribute(ATT_SUCCESS), true));    res.setThreadName(ConversionHelp.decode(reader.getAttribute(ATT_THREADNAME)));    res.setStampAndTime(Converter.getLong(reader.getAttribute(ATT_TIME_STAMP)), Converter.getLong(reader.getAttribute(ATT_TIME)));    res.setIdleTime(Converter.getLong(reader.getAttribute(ATT_IDLETIME)));    res.setLatency(Converter.getLong(reader.getAttribute(ATT_LATENCY)));    res.setConnectTime(Converter.getLong(reader.getAttribute(ATT_CONNECT_TIME)));    res.setBytes(Converter.getLong(reader.getAttribute(ATT_BYTES)));    res.setSentBytes(Converter.getLong(reader.getAttribute(ATT_SENT_BYTES)));        res.setSampleCount(Converter.getInt(reader.getAttribute(ATT_SAMPLE_COUNT), 1));        res.setErrorCount(Converter.getInt(reader.getAttribute(ATT_ERROR_COUNT), 0));    res.setGroupThreads(Converter.getInt(reader.getAttribute(ATT_GRP_THRDS)));    res.setAllThreads(Converter.getInt(reader.getAttribute(ATT_ALL_THRDS)));}
0
protected void readFile(String resultFileName, SampleResult res)
{    File in = new File(resultFileName);    try (FileInputStream fis = new FileInputStream(in);        BufferedInputStream bis = new BufferedInputStream(fis)) {        ByteArrayOutputStream outstream = new ByteArrayOutputStream(4096);        byte[] buffer = new byte[4096];        int len;        while ((len = bis.read(buffer)) > 0) {            outstream.write(buffer, 0, len);        }        outstream.close();        res.setResponseData(outstream.toByteArray());    } catch (IOException e) {            }}
1
public boolean shouldSerializeMember(@SuppressWarnings("rawtypes") Class definedIn, String fieldName)
{    if (SampleSaveConfiguration.class != definedIn) {        return true;    }        switch(fieldName) {        case NODE_BYTES:        case NODE_SENT_BYTES:        case NODE_URL:        case NODE_FILENAME:        case NODE_HOSTNAME:        case NODE_THREAD_COUNT:        case NODE_SAMPLE_COUNT:        case NODE_IDLE_TIME:        case NODE_CONNECT_TIME:                case NODE_DELIMITER:        case NODE_PRINTMS:            return false;        default:            return true;    }}
0
public static String getVersion()
{        return "$Revision$";}
0
public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0)
{    return SampleSaveConfiguration.class.equals(arg0);}
0
public void marshal(Object obj, HierarchicalStreamWriter writer, MarshallingContext context)
{        super.marshal(obj, writer, context);    SampleSaveConfiguration prop = (SampleSaveConfiguration) obj;            createNode(writer, prop.saveBytes(), NODE_BYTES);    createNode(writer, prop.saveSentBytes(), NODE_SENT_BYTES);    createNode(writer, prop.saveUrl(), NODE_URL);    createNode(writer, prop.saveFileName(), NODE_FILENAME);    createNode(writer, prop.saveHostname(), NODE_HOSTNAME);    createNode(writer, prop.saveThreadCounts(), NODE_THREAD_COUNT);    createNode(writer, prop.saveSampleCount(), NODE_SAMPLE_COUNT);    createNode(writer, prop.saveIdleTime(), NODE_IDLE_TIME);    createNode(writer, prop.saveConnectTime(), NODE_CONNECT_TIME);}
0
private void createNode(HierarchicalStreamWriter writer, boolean save, String node)
{    if (!save) {        return;    }    writer.startNode(node);    writer.setValue(TRUE);    writer.endNode();}
0
public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context)
{    final Class<SampleSaveConfiguration> thisClass = SampleSaveConfiguration.class;    final Class<?> requiredType = context.getRequiredType();    if (requiredType != thisClass) {        throw new IllegalArgumentException("Unexpected class: " + requiredType.getName());    }        SampleSaveConfiguration result = new SampleSaveConfiguration(false);        while (reader.hasMoreChildren()) {        reader.moveDown();        String nn = reader.getNodeName();        if (!"formatter".equals(nn)) {                        String fieldName = mapper.realMember(thisClass, nn);            java.lang.reflect.Field field = reflectionProvider.getField(thisClass, fieldName);            Class<?> type = field.getType();            Object value = unmarshallField(context, result, type, field);            reflectionProvider.writeField(result, nn, value, thisClass);        }        reader.moveUp();    }    return result;}
0
public static String getVersion()
{        return "$Revision$";}
0
public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0)
{        return StringProperty.class.equals(arg0);}
0
public void marshal(Object obj, HierarchicalStreamWriter writer, MarshallingContext arg2)
{    StringProperty prop = (StringProperty) obj;    writer.addAttribute(ConversionHelp.ATT_NAME, ConversionHelp.encode(prop.getName()));    writer.setValue(ConversionHelp.encode(prop.getStringValue()));}
0
public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context)
{    final String name = ConversionHelp.getPropertyName(reader, context);    if (name == null) {        return null;    }    final String value = ConversionHelp.getPropertyValue(reader, context, name);    StringProperty prop = new StringProperty(name, value);    return prop;}
0
public static String getVersion()
{        return "$Revision$";}
0
public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0)
{        return TestElement.class.isAssignableFrom(arg0);}
0
public void marshal(Object arg0, HierarchicalStreamWriter writer, MarshallingContext context)
{    TestElement el = (TestElement) arg0;    ConversionHelp.saveSpecialProperties(el, writer);    PropertyIterator iter = el.propertyIterator();    while (iter.hasNext()) {        JMeterProperty jmp = iter.next();                if (!ConversionHelp.isSpecialProperty(jmp.getName())) {                        if (!(TestElement.COMMENTS.equals(jmp.getName()) && jmp.getStringValue().length() == 0 && !el.getClass().equals(TestPlan.class))) {                writeItem(jmp, context, writer);            }        }    }}
0
public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context)
{    String classAttribute = reader.getAttribute(ConversionHelp.ATT_CLASS);    Class<?> type;    if (classAttribute == null) {        type = mapper().realClass(reader.getNodeName());    } else {        type = mapper().realClass(classAttribute);    }        String inputName = type.getName();    String guiClassName = SaveService.aliasToClass(reader.getAttribute(ConversionHelp.ATT_TE_GUICLASS));    String targetName = NameUpdater.getCurrentTestName(inputName, guiClassName);    if (!targetName.equals(inputName)) {                type = mapper().realClass(targetName);    }        context.put(SaveService.TEST_CLASS_NAME, targetName);    try {        TestElement el = (TestElement) type.getDeclaredConstructor().newInstance();                ConversionHelp.restoreSpecialProperties(el, reader);                el.setProperty(TestElement.TEST_CLASS, targetName);        while (reader.hasMoreChildren()) {            reader.moveDown();            JMeterProperty prop = (JMeterProperty) readItem(reader, context, el);            if (prop != null) {                                el.setProperty(prop);            }            reader.moveUp();        }        return el;    } catch (IllegalArgumentException | ReflectiveOperationException | SecurityException e) {                return null;    }}
1
public static String getVersion()
{        return "$Revision$";}
0
public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0)
{        return TestElementProperty.class.equals(arg0);}
0
public void marshal(Object arg0, HierarchicalStreamWriter writer, MarshallingContext context)
{    TestElementProperty prop = (TestElementProperty) arg0;    writer.addAttribute(ConversionHelp.ATT_NAME, ConversionHelp.encode(prop.getName()));    Class<?> clazz = prop.getObjectValue().getClass();    writer.addAttribute(ConversionHelp.ATT_ELEMENT_TYPE, mapper().serializedClass(clazz));    TestElement te = (TestElement) prop.getObjectValue();    ConversionHelp.saveSpecialProperties(te, writer);    for (JMeterProperty jmp : prop) {                if (!ConversionHelp.isSpecialProperty(jmp.getName())) {                        if (!(TestElement.COMMENTS.equals(jmp.getName()) && jmp.getStringValue().isEmpty())) {                writeItem(jmp, context, writer);            }        }    }}
0
public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context)
{    try {        TestElementProperty prop = (TestElementProperty) createCollection(context.getRequiredType());        prop.setName(ConversionHelp.decode(reader.getAttribute(ConversionHelp.ATT_NAME)));        String element = reader.getAttribute(ConversionHelp.ATT_ELEMENT_TYPE);        boolean isHeader = HEADER_CLASSNAME.equals(element);                prop.setObjectValue(mapper().realClass(element).getDeclaredConstructor().newInstance());        TestElement te = (TestElement) prop.getObjectValue();                ConversionHelp.restoreSpecialProperties(te, reader);        while (reader.hasMoreChildren()) {            reader.moveDown();            JMeterProperty subProp = (JMeterProperty) readItem(reader, context, prop);            if (subProp != null) {                                if (isHeader) {                    String name = subProp.getName();                    if (TestElement.NAME.equals(name)) {                                                subProp.setName("Header.name");                                                            }                }                prop.addProperty(subProp);            }            reader.moveUp();        }        return prop;    } catch (IllegalArgumentException | ReflectiveOperationException | SecurityException e) {                        return new TestElementProperty("ERROR", new ConfigTestElement());    }}
1
public static String getVersion()
{        return "$Revision$";}
0
public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0)
{        return TestResultWrapper.class.equals(arg0);}
0
public void marshal(Object arg0, HierarchicalStreamWriter arg1, MarshallingContext arg2)
{}
0
public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context)
{    TestResultWrapper results = new TestResultWrapper();    Collection<SampleResult> samples = new ArrayList<>();        String ver = reader.getAttribute("version");    if (ver == null || ver.length() == 0) {                ver = "1.0";    }    results.setVersion(ver);        ConversionHelp.setInVersion(ver);    final ResultCollectorHelper resultCollectorHelper = (ResultCollectorHelper) context.get(SaveService.RESULTCOLLECTOR_HELPER_OBJECT);    while (reader.hasMoreChildren()) {        reader.moveDown();        SampleResult sample = (SampleResult) readItem(reader, context, results);        if (resultCollectorHelper != null) {            resultCollectorHelper.add(sample);        } else {            samples.add(sample);        }        reader.moveUp();    }    results.setSampleResults(samples);    return results;}
0
public static void processSamples(String filename, Visualizer visualizer, ResultCollector resultCollector) throws IOException
{    final boolean errorsOnly = resultCollector.isErrorLogging();    final boolean successOnly = resultCollector.isSuccessOnlyLogging();    try (InputStream inStream = new FileInputStream(filename);        Reader inReader = new InputStreamReader(inStream, SaveService.getFileEncoding(StandardCharsets.UTF_8.name()));        BufferedReader dataReader = new BufferedReader(inReader)) {                dataReader.mark(400);                String line = dataReader.readLine();        if (line == null) {            throw new IOException(filename + ": unable to read header line");        }        long lineNumber = 1;        SampleSaveConfiguration saveConfig = CSVSaveService.getSampleSaveConfiguration(line, filename);        if (saveConfig == null) {                                    saveConfig = (SampleSaveConfiguration) resultCollector.getSaveConfig().clone();                        dataReader.reset();            lineNumber = 0;        }        String[] parts;        final char delim = saveConfig.getDelimiter().charAt(0);                while ((parts = csvReadFile(dataReader, delim)).length != 0) {            lineNumber++;            SampleEvent event = CSVSaveService.makeResultFromDelimitedString(parts, saveConfig, lineNumber);            if (event != null) {                final SampleResult result = event.getResult();                if (ResultCollector.isSampleWanted(result.isSuccessful(), errorsOnly, successOnly)) {                    visualizer.add(result);                }            }        }    }}
1
private static SampleEvent makeResultFromDelimitedString(final String[] parts, final SampleSaveConfiguration saveConfig, final long lineNumber)
{    SampleResult result = null;        String hostname = "";    long timeStamp = 0;    long elapsed = 0;    String text = null;        String field = null;    int i = 0;    try {        if (saveConfig.saveTimestamp()) {            field = TIME_STAMP;            text = parts[i++];            if (saveConfig.printMilliseconds()) {                try {                                        timeStamp = Long.parseLong(text);                } catch (NumberFormatException e) {                                                            boolean foundMatch = false;                    for (String fmt : DATE_FORMAT_STRINGS) {                        SimpleDateFormat dateFormat = new SimpleDateFormat(fmt);                        dateFormat.setLenient(false);                        try {                            Date stamp = dateFormat.parse(text);                            timeStamp = stamp.getTime();                                                        saveConfig.setDateFormat(fmt);                            foundMatch = true;                            break;                        } catch (ParseException pe) {                                                    }                    }                    if (!foundMatch) {                        throw new ParseException("No date-time format found matching " + text, -1);                    }                }            } else if (saveConfig.strictDateFormatter() != null) {                Date stamp = saveConfig.strictDateFormatter().parse(text);                timeStamp = stamp.getTime();            } else {                                final String msg = "Unknown timestamp format";                                throw new JMeterError(msg);            }        }        if (saveConfig.saveTime()) {            field = CSV_ELAPSED;            text = parts[i++];            elapsed = Long.parseLong(text);        }        if (saveConfig.saveSampleCount()) {            result = new StatisticalSampleResult(timeStamp, elapsed);        } else {            result = new SampleResult(timeStamp, elapsed);        }        if (saveConfig.saveLabel()) {            field = LABEL;            text = parts[i++];            result.setSampleLabel(text);        }        if (saveConfig.saveCode()) {            field = RESPONSE_CODE;            text = parts[i++];            result.setResponseCode(text);        }        if (saveConfig.saveMessage()) {            field = RESPONSE_MESSAGE;            text = parts[i++];            result.setResponseMessage(text);        }        if (saveConfig.saveThreadName()) {            field = THREAD_NAME;            text = parts[i++];            result.setThreadName(text);        }        if (saveConfig.saveDataType()) {            field = DATA_TYPE;            text = parts[i++];            result.setDataType(text);        }        if (saveConfig.saveSuccess()) {            field = SUCCESSFUL;            text = parts[i++];            result.setSuccessful(Boolean.valueOf(text).booleanValue());        }        if (saveConfig.saveAssertionResultsFailureMessage()) {            i++;                }        if (saveConfig.saveBytes()) {            field = CSV_BYTES;            text = parts[i++];            result.setBytes(Long.parseLong(text));        }        if (saveConfig.saveSentBytes()) {            field = CSV_SENT_BYTES;            text = parts[i++];            result.setSentBytes(Long.parseLong(text));        }        if (saveConfig.saveThreadCounts()) {            field = CSV_THREAD_COUNT1;            text = parts[i++];            result.setGroupThreads(Integer.parseInt(text));            field = CSV_THREAD_COUNT2;            text = parts[i++];            result.setAllThreads(Integer.parseInt(text));        }        if (saveConfig.saveUrl()) {            i++;                }        if (saveConfig.saveFileName()) {            field = CSV_FILENAME;            text = parts[i++];            result.setResultFileName(text);        }        if (saveConfig.saveLatency()) {            field = CSV_LATENCY;            text = parts[i++];            result.setLatency(Long.parseLong(text));        }        if (saveConfig.saveEncoding()) {            field = CSV_ENCODING;            text = parts[i++];            result.setEncodingAndType(text);        }        if (saveConfig.saveSampleCount()) {            field = CSV_SAMPLE_COUNT;            text = parts[i++];            result.setSampleCount(Integer.parseInt(text));            field = CSV_ERROR_COUNT;            text = parts[i++];            result.setErrorCount(Integer.parseInt(text));        }        if (saveConfig.saveHostname()) {            field = CSV_HOSTNAME;            hostname = parts[i++];        }        if (saveConfig.saveIdleTime()) {            field = CSV_IDLETIME;            text = parts[i++];            result.setIdleTime(Long.parseLong(text));        }        if (saveConfig.saveConnectTime()) {            field = CSV_CONNECT_TIME;            text = parts[i++];            result.setConnectTime(Long.parseLong(text));        }        if (i + saveConfig.getVarCount() < parts.length) {                    }    } catch (NumberFormatException | ParseException e) {        if (log.isWarnEnabled()) {                    }        throw new JMeterError(e);    } catch (ArrayIndexOutOfBoundsException e) {                throw new JMeterError(e);    }    return new SampleEvent(result, "", hostname);}
1
public static String printableFieldNamesToString()
{    return printableFieldNamesToString(_saveConfig);}
0
public static String printableFieldNamesToString(SampleSaveConfiguration saveConfig)
{    StringBuilder text = new StringBuilder();    String delim = saveConfig.getDelimiter();    appendFields(saveConfig.saveTimestamp(), text, delim, TIME_STAMP);    appendFields(saveConfig.saveTime(), text, delim, CSV_ELAPSED);    appendFields(saveConfig.saveLabel(), text, delim, LABEL);    appendFields(saveConfig.saveCode(), text, delim, RESPONSE_CODE);    appendFields(saveConfig.saveMessage(), text, delim, RESPONSE_MESSAGE);    appendFields(saveConfig.saveThreadName(), text, delim, THREAD_NAME);    appendFields(saveConfig.saveDataType(), text, delim, DATA_TYPE);    appendFields(saveConfig.saveSuccess(), text, delim, SUCCESSFUL);    appendFields(saveConfig.saveAssertionResultsFailureMessage(), text, delim, FAILURE_MESSAGE);    appendFields(saveConfig.saveBytes(), text, delim, CSV_BYTES);    appendFields(saveConfig.saveSentBytes(), text, delim, CSV_SENT_BYTES);    appendFields(saveConfig.saveThreadCounts(), text, delim, CSV_THREAD_COUNT1, CSV_THREAD_COUNT2);    appendFields(saveConfig.saveUrl(), text, delim, CSV_URL);    appendFields(saveConfig.saveFileName(), text, delim, CSV_FILENAME);    appendFields(saveConfig.saveLatency(), text, delim, CSV_LATENCY);    appendFields(saveConfig.saveEncoding(), text, delim, CSV_ENCODING);    appendFields(saveConfig.saveSampleCount(), text, delim, CSV_SAMPLE_COUNT, CSV_ERROR_COUNT);    appendFields(saveConfig.saveHostname(), text, delim, CSV_HOSTNAME);    appendFields(saveConfig.saveIdleTime(), text, delim, CSV_IDLETIME);    appendFields(saveConfig.saveConnectTime(), text, delim, CSV_CONNECT_TIME);    for (int i = 0; i < SampleEvent.getVarCount(); i++) {        text.append(VARIABLE_NAME_QUOTE_CHAR);        text.append(SampleEvent.getVarName(i));        text.append(VARIABLE_NAME_QUOTE_CHAR);        text.append(delim);    }    String resultString;    int size = text.length();    int delSize = delim.length();        if (size >= delSize) {        resultString = text.substring(0, size - delSize);    } else {        resultString = text.toString();    }    return resultString;}
0
private static void appendFields(final boolean condition, StringBuilder textBuffer, String delim, String... fieldNames)
{    if (condition) {        for (String name : fieldNames) {            textBuffer.append(name);            textBuffer.append(delim);        }    }}
0
private static String[] splitHeader(String headerLine, String delim)
{        String[] parts = headerLine.split("\\Q" + delim);    int previous = -1;        for (int i = 0; i < parts.length; i++) {        final String label = parts[i];                if (isVariableName(label)) {                        previous = Integer.MAX_VALUE;            continue;        }        int current = headerLabelMethods.indexOf(label);        if (current == -1) {                                    return null;        }        if (current <= previous) {                                    return null;        }        previous = current;    }    return parts;}
1
private static boolean isVariableName(final String label)
{    return label.length() > 2 && label.startsWith(VARIABLE_NAME_QUOTE_CHAR) && label.endsWith(VARIABLE_NAME_QUOTE_CHAR);}
0
public static void saveCSVStats(List<?> data, Writer writer) throws IOException
{    saveCSVStats(data, writer, null);}
0
public static void saveCSVStats(List<?> data, Writer writer, String[] headers) throws IOException
{    final char DELIM = ',';    final char[] SPECIALS = new char[] { DELIM, QUOTING_CHAR };    if (headers != null) {        for (int i = 0; i < headers.length; i++) {            if (i > 0) {                writer.write(DELIM);            }            writer.write(quoteDelimiters(headers[i], SPECIALS));        }        writer.write(LINE_SEP);    }    for (Object o : data) {        List<?> row = (List<?>) o;        for (int idy = 0; idy < row.size(); idy++) {            if (idy > 0) {                writer.write(DELIM);            }            Object item = row.get(idy);            writer.write(quoteDelimiters(String.valueOf(item), SPECIALS));        }        writer.write(LINE_SEP);    }}
0
public static void saveCSVStats(DefaultTableModel model, FileWriter writer) throws IOException
{    saveCSVStats(model, writer, true);}
0
public static void saveCSVStats(DefaultTableModel model, FileWriter writer, boolean saveHeaders) throws IOException
{    final char DELIM = ',';    final char[] SPECIALS = new char[] { DELIM, QUOTING_CHAR };    final int columns = model.getColumnCount();    final int rows = model.getRowCount();    if (saveHeaders) {        for (int i = 0; i < columns; i++) {            if (i > 0) {                writer.write(DELIM);            }            writer.write(quoteDelimiters(model.getColumnName(i), SPECIALS));        }        writer.write(LINE_SEP);    }    for (int row = 0; row < rows; row++) {        for (int column = 0; column < columns; column++) {            if (column > 0) {                writer.write(DELIM);            }            Object item = model.getValueAt(row, column);            writer.write(quoteDelimiters(String.valueOf(item), SPECIALS));        }        writer.write(LINE_SEP);    }}
0
public static String resultToDelimitedString(SampleEvent event)
{    return resultToDelimitedString(event, event.getResult().getSaveConfig().getDelimiter());}
0
private void addDelim()
{    if (addDelim) {        sb.append(specials[0]);    } else {        addDelim = true;    }}
0
public void append(String s)
{    addDelim();    sb.append(quoteDelimiters(s, specials));}
0
public void append(Object obj)
{    append(String.valueOf(obj));}
0
public void append(int i)
{    addDelim();    sb.append(i);}
0
public void append(long l)
{    addDelim();    sb.append(l);}
0
public void append(boolean b)
{    addDelim();    sb.append(b);}
0
public String toString()
{    return sb.toString();}
0
public static String resultToDelimitedString(SampleEvent event, final String delimiter)
{    return resultToDelimitedString(event, event.getResult(), event.getResult().getSaveConfig(), delimiter);}
0
public static String resultToDelimitedString(SampleEvent event, SampleResult sample, SampleSaveConfiguration saveConfig, final String delimiter)
{    StringQuoter text = new StringQuoter(delimiter.charAt(0));    if (saveConfig.saveTimestamp()) {        if (saveConfig.printMilliseconds()) {            text.append(sample.getTimeStamp());        } else if (saveConfig.threadSafeLenientFormatter() != null) {            String stamp = saveConfig.threadSafeLenientFormatter().format(new Date(sample.getTimeStamp()));            text.append(stamp);        }    }    if (saveConfig.saveTime()) {        text.append(sample.getTime());    }    if (saveConfig.saveLabel()) {        text.append(sample.getSampleLabel());    }    if (saveConfig.saveCode()) {        text.append(sample.getResponseCode());    }    if (saveConfig.saveMessage()) {        text.append(sample.getResponseMessage());    }    if (saveConfig.saveThreadName()) {        text.append(sample.getThreadName());    }    if (saveConfig.saveDataType()) {        text.append(sample.getDataType());    }    if (saveConfig.saveSuccess()) {        text.append(sample.isSuccessful());    }    if (saveConfig.saveAssertionResultsFailureMessage()) {        String message = sample.getFirstAssertionFailureMessage();        if (message != null) {            text.append(message);        } else {                        text.append("");                }    }    if (saveConfig.saveBytes()) {        text.append(sample.getBytesAsLong());    }    if (saveConfig.saveSentBytes()) {        text.append(sample.getSentBytes());    }    if (saveConfig.saveThreadCounts()) {        text.append(sample.getGroupThreads());        text.append(sample.getAllThreads());    }    if (saveConfig.saveUrl()) {        text.append(sample.getURL());    }    if (saveConfig.saveFileName()) {        text.append(sample.getResultFileName());    }    if (saveConfig.saveLatency()) {        text.append(sample.getLatency());    }    if (saveConfig.saveEncoding()) {        text.append(sample.getDataEncodingWithDefault());    }    if (saveConfig.saveSampleCount()) {                text.append(sample.getSampleCount());        text.append(sample.getErrorCount());    }    if (saveConfig.saveHostname()) {        text.append(event.getHostname());    }    if (saveConfig.saveIdleTime()) {        text.append(sample.getIdleTime());    }    if (saveConfig.saveConnectTime()) {        text.append(sample.getConnectTime());    }    for (int i = 0; i < SampleEvent.getVarCount(); i++) {        text.append(event.getVarValue(i));    }    return text.toString();}
0
public static String quoteDelimiters(String input, char[] specialChars)
{    if (StringUtils.containsNone(input, specialChars)) {        return input;    }    StringBuilder buffer = new StringBuilder(input.length() + 10);    final char quote = specialChars[1];    buffer.append(quote);    for (int i = 0; i < input.length(); i++) {        char c = input.charAt(i);        if (c == quote) {                        buffer.append(quote);        }        buffer.append(c);    }    buffer.append(quote);    return buffer.toString();}
0
public static String[] csvReadFile(BufferedReader infile, char delim) throws IOException
{    int ch;    ParserState state = ParserState.INITIAL;    List<String> list = new ArrayList<>();    CharArrayWriter baos = new CharArrayWriter(200);    boolean push = false;    while (-1 != (ch = infile.read())) {        push = false;        switch(state) {            case INITIAL:                if (ch == QUOTING_CHAR) {                    state = ParserState.QUOTED;                } else if (isDelimOrEOL(delim, ch)) {                    push = true;                } else {                    baos.write(ch);                    state = ParserState.PLAIN;                }                break;            case PLAIN:                if (ch == QUOTING_CHAR) {                    baos.write(ch);                    throw new IOException("Cannot have quote-char in plain field:[" + baos.toString() + "]");                } else if (isDelimOrEOL(delim, ch)) {                    push = true;                    state = ParserState.INITIAL;                } else {                    baos.write(ch);                }                break;            case QUOTED:                if (ch == QUOTING_CHAR) {                    state = ParserState.EMBEDDEDQUOTE;                } else {                    baos.write(ch);                }                break;            case EMBEDDEDQUOTE:                if (ch == QUOTING_CHAR) {                                        baos.write(QUOTING_CHAR);                    state = ParserState.QUOTED;                } else if (isDelimOrEOL(delim, ch)) {                    push = true;                    state = ParserState.INITIAL;                } else {                    baos.write(QUOTING_CHAR);                    throw new IOException("Cannot have single quote-char in quoted field:[" + baos.toString() + "]");                }                break;            default:                throw new IllegalStateException("Unexpected state " + state);        }                if (push) {            if (ch == '\r') {                                infile.mark(1);                if (infile.read() != '\n') {                                        infile.reset();                                }            }            String s = baos.toString();            list.add(s);            baos.reset();        }        if ((ch == '\n' || ch == '\r') && state != ParserState.QUOTED) {            break;        }    }        if (ch == -1) {                if (state == ParserState.QUOTED) {            throw new IOException("Missing trailing quote-char in quoted field:[\"" + baos.toString() + "]");        }                if (        baos.size() > 0 ||         push ||         state == ParserState.EMBEDDEDQUOTE) {            list.add(baos.toString());        }    }    return list.toArray(new String[list.size()]);}
0
private static boolean isDelimOrEOL(char delim, int ch)
{    return ch == delim || ch == '\n' || ch == '\r';}
0
public static String[] csvSplitString(String line, char delim) throws IOException
{    return csvReadFile(new BufferedReader(new StringReader(line)), delim);}
0
public static void saveSampleResult(SampleEvent event, PrintWriter out)
{    SampleSaveConfiguration saveConfiguration = event.getResult().getSaveConfig();    String delimiter = saveConfiguration.getDelimiter();    String formattedResult = resultToDelimitedString(event, event.getResult(), saveConfiguration, delimiter);    out.println(formattedResult);    if (saveConfiguration.saveSubresults()) {        SampleResult result = event.getResult();        for (SampleResult subResult : result.getSubResults()) {            formattedResult = resultToDelimitedString(event, subResult, saveConfiguration, delimiter);            out.println(formattedResult);        }    }}
0
public Collection<SampleResult> getSampleResults()
{    return calculatedResults;}
0
public void setSampleResults(Collection<SampleResult> results)
{    this.calculatedResults = results;}
0
public long getTestStartTime()
{    return testStartTime;}
0
public void setTestStartTime(long testStartTime)
{    this.testStartTime = testStartTime;}
0
public String getVersion()
{    return version;}
0
public void setVersion(String version)
{    this.version = version;}
0
public void saveJComponent(String filename, int type, JComponent component)
{    Dimension size = component.getSize();    BufferedImage image = new BufferedImage(size.width, size.height, BufferedImage.TYPE_BYTE_INDEXED);    Graphics2D grp = image.createGraphics();    component.paint(grp);    if (type == PNG) {        filename += PNG_EXTENSION;        this.savePNGWithBatik(filename, image);    } else if (type == TIFF) {        filename = filename + TIFF_EXTENSION;        this.saveTIFFWithBatik(filename, image);    }}
0
public void savePNGWithBatik(String filename, BufferedImage image)
{    File outfile = new File(filename);    OutputStream fos = createFile(outfile);    if (fos == null) {        return;    }    PNGEncodeParam param = PNGEncodeParam.getDefaultEncodeParam(image);    PNGImageEncoder encoder = new PNGImageEncoder(fos, param);    try {        encoder.encode(image);    } catch (IOException e) {        JMeterUtils.reportErrorToUser("PNGImageEncoder reported: " + e.getMessage(), "Problem creating image file");    } finally {        JOrphanUtils.closeQuietly(fos);    }}
0
public void saveTIFFWithBatik(String filename, BufferedImage image)
{    File outfile = new File(filename);    OutputStream fos = createFile(outfile);    if (fos == null) {        return;    }    TIFFEncodeParam param = new TIFFEncodeParam();    TIFFImageEncoder encoder = new TIFFImageEncoder(fos, param);    try {        encoder.encode(image);    } catch (IOException e) {        JMeterUtils.reportErrorToUser("TIFFImageEncoder reported: " + e.getMessage(), "Problem creating image file");    } catch (Error e) {                JMeterUtils.reportErrorToUser("TIFFImageEncoder reported: " + e.getMessage(), "Problem creating image file");        if (e.getClass() != Error.class) {                        throw e;        }    } finally {        JOrphanUtils.closeQuietly(fos);    }}
0
private FileOutputStream createFile(File filename)
{    try {        return new FileOutputStream(filename);    } catch (FileNotFoundException e) {        JMeterUtils.reportErrorToUser("Could not create file: " + e.getMessage(), "Problem creating image file");        return null;    }}
0
protected MapperWrapper wrapMapper(MapperWrapper next)
{        return new MapperWrapper(next) {                @Override        public Class<?> realClass(String alias) {            String fullName = aliasToClass(alias);            if (fullName != null) {                fullName = NameUpdater.getCurrentName(fullName);            }            return super.realClass(fullName == null ? alias : fullName);        }                @Override        public String serializedClass(        @SuppressWarnings("rawtypes") Class type) {            if (type == null) {                                return super.serializedClass(null);            }            String alias = classToAlias(type.getName());            return alias == null ? super.serializedClass(type) : alias;        }    };}
0
public Class<?> realClass(String alias)
{    String fullName = aliasToClass(alias);    if (fullName != null) {        fullName = NameUpdater.getCurrentName(fullName);    }    return super.realClass(fullName == null ? alias : fullName);}
0
public String serializedClass(@SuppressWarnings("rawtypes") Class type)
{    if (type == null) {                return super.serializedClass(null);    }    String alias = classToAlias(type.getName());    return alias == null ? super.serializedClass(type) : alias;}
0
private static void makeAlias(String aliasList, String clazz)
{        String[] aliases = aliasList.split(",");    String alias = aliases[0];    for (String a : aliases) {        Object old = aliasToClass.setProperty(a, clazz);        if (old != null) {                    }    }    Object oldval = classToAlias.setProperty(clazz, alias);    if (oldval != null) {            }}
1
private static File getSaveServiceFile()
{        String saveServiceProps = JMeterUtils.getPropDefault(SAVESERVICE_PROPERTIES, SAVESERVICE_PROPERTIES_FILE);    if (saveServiceProps.length() > 0) {                return JMeterUtils.findFile(saveServiceProps);    }    throw new IllegalStateException("Could not find file configured in saveservice_properties property set to:" + saveServiceProps);}
0
public static Properties loadProperties() throws IOException
{    Properties nameMap = new Properties();    File saveServiceFile = getSaveServiceFile();    if (saveServiceFile.canRead()) {        try (FileInputStream fis = new FileInputStream(saveServiceFile)) {            nameMap.load(fis);        }    }    return nameMap;}
0
private static String getChecksumForPropertiesFile() throws NoSuchAlgorithmException, IOException
{    MessageDigest md = MessageDigest.getInstance("SHA-1");    File saveServiceFile = getSaveServiceFile();    try (BufferedReader reader = Files.newBufferedReader(saveServiceFile.toPath(), Charset.defaultCharset())) {        String line = null;        while ((line = reader.readLine()) != null) {            md.update(line.getBytes());        }    }    return JOrphanUtils.baToHexString(md.digest());}
0
private static void initProps()
{        try {        fileVersion = getChecksumForPropertiesFile();    } catch (IOException | NoSuchAlgorithmException e) {                throw new JMeterError("JMeter requires the checksum of saveservice properties file to continue", e);    }    try {        Properties nameMap = loadProperties();                for (Map.Entry<Object, Object> me : nameMap.entrySet()) {            String key = (String) me.getKey();            String val = (String) me.getValue();            if (!key.startsWith("_")) {                                makeAlias(key, val);            } else {                                if (key.equalsIgnoreCase("_version")) {                                        propertiesVersion = val;                                    } else if (key.equalsIgnoreCase("_file_version")) {                                                        } else if (key.equalsIgnoreCase("_file_encoding")) {                                        fileEncoding = val;                                    } else {                                        key = key.substring(1);                    registerConverter(key, val);                }            }        }    } catch (IOException e) {                throw new JMeterError("JMeter requires the saveservice properties file to continue");    }}
1
private static void registerConverter(String key, String val)
{    try {        final String trimmedValue = val.trim();                boolean useMapper = "collection".equals(trimmedValue) || "mapping".equals(trimmedValue);        registerConverter(key, JMXSAVER, useMapper);        registerConverter(key, JTLSAVER, useMapper);    } catch (IllegalAccessException | InstantiationException | ClassNotFoundException | IllegalArgumentException | SecurityException | InvocationTargetException | NoSuchMethodException e1) {            }}
1
private static void registerConverter(String key, XStream jmxsaver, boolean useMapper) throws InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException, ClassNotFoundException
{    if (useMapper) {        jmxsaver.registerConverter((Converter) Class.forName(key).getConstructor(Mapper.class).newInstance(jmxsaver.getMapper()));    } else {        jmxsaver.registerConverter((Converter) Class.forName(key).getDeclaredConstructor().newInstance());    }}
0
public static String aliasToClass(String s)
{    String r = aliasToClass.getProperty(s);    return r == null ? s : r;}
0
public static String classToAlias(String s)
{    String r = classToAlias.getProperty(s);    return r == null ? s : r;}
0
public static void saveTree(HashTree tree, OutputStream out) throws IOException
{        OutputStreamWriter outputStreamWriter = getOutputStreamWriter(out);    writeXmlHeader(outputStreamWriter);        ScriptWrapper wrapper = new ScriptWrapper();    wrapper.testPlan = tree;    JMXSAVER.toXML(wrapper, outputStreamWriter);        outputStreamWriter.write('\n');    outputStreamWriter.close();}
0
public static void saveElement(Object el, OutputStream out) throws IOException
{        OutputStreamWriter outputStreamWriter = getOutputStreamWriter(out);    writeXmlHeader(outputStreamWriter);        JMXSAVER.toXML(el, outputStreamWriter);    outputStreamWriter.close();}
0
public static Object loadElement(InputStream in) throws IOException
{        InputStreamReader inputStreamReader = getInputStreamReader(in);        Object element = JMXSAVER.fromXML(inputStreamReader);    inputStreamReader.close();    return element;}
0
public static synchronized void saveSampleResult(SampleEvent evt, Writer writer) throws IOException
{    DataHolder dh = JTLSAVER.newDataHolder();    dh.put(SAMPLE_EVENT_OBJECT, evt);        try {        JTLSAVER.marshal(evt.getResult(), new XppDriver().createWriter(writer), dh);    } catch (RuntimeException e) {        throw new IllegalArgumentException("Failed marshalling:" + (evt.getResult() != null ? showDebuggingInfo(evt.getResult()) : "null"), e);    }    writer.write('\n');}
0
private static String showDebuggingInfo(SampleResult result)
{    try {        return "class:" + result.getClass() + ",content:" + ToStringBuilder.reflectionToString(result);    } catch (Exception e) {        return "Exception occurred creating debug from event, message:" + e.getMessage();    }}
0
 static String getPropertyVersion()
{    return SaveService.propertiesVersion;}
0
 static String getFileVersion()
{    return SaveService.fileVersion;}
0
private static void checkVersions()
{    if (!PROPVERSION.equalsIgnoreCase(propertiesVersion)) {            }}
1
public static void loadTestResults(InputStream reader, ResultCollectorHelper resultCollectorHelper) throws IOException
{        InputStreamReader inputStreamReader = getInputStreamReader(reader);    DataHolder dh = JTLSAVER.newDataHolder();        dh.put(RESULTCOLLECTOR_HELPER_OBJECT, resultCollectorHelper);            JTLSAVER.unmarshal(new XppDriver().createReader(reader), null, dh);    inputStreamReader.close();}
0
public static HashTree loadTree(File file) throws IOException
{        try (InputStream inputStream = new FileInputStream(file);        BufferedInputStream bufferedInputStream = new BufferedInputStream(inputStream)) {        return readTree(bufferedInputStream, file);    }}
1
private static HashTree readTree(InputStream inputStream, File file) throws IOException
{    ScriptWrapper wrapper = null;    try {                InputStreamReader inputStreamReader = getInputStreamReader(inputStream);        wrapper = (ScriptWrapper) JMXSAVER.fromXML(inputStreamReader);        inputStreamReader.close();        if (wrapper == null) {                        return null;        }        return wrapper.testPlan;    } catch (CannotResolveClassException | ConversionException | NoClassDefFoundError e) {        if (file != null) {            throw new IllegalArgumentException("Problem loading XML from:'" + file.getAbsolutePath() + "'. \nCause:\n" + ExceptionUtils.getRootCauseMessage(e) + "\n\n Detail:" + e, e);        } else {            throw new IllegalArgumentException("Problem loading XML. \nCause:\n" + ExceptionUtils.getRootCauseMessage(e) + "\n\n Detail:" + e, e);        }    }}
1
private static InputStreamReader getInputStreamReader(InputStream inStream)
{        Charset charset = getFileEncodingCharset();    return new InputStreamReader(inStream, charset);}
0
private static OutputStreamWriter getOutputStreamWriter(OutputStream outStream)
{        Charset charset = getFileEncodingCharset();    return new OutputStreamWriter(outStream, charset);}
0
public static String getFileEncoding(String dflt)
{    if (fileEncoding != null && fileEncoding.length() > 0) {        return fileEncoding;    } else {        return dflt;    }}
0
private static Charset getFileEncodingCharset()
{        if (fileEncoding != null && fileEncoding.length() > 0) {        return Charset.forName(fileEncoding);    } else {                        return Charset.defaultCharset();    }}
1
private static void writeXmlHeader(OutputStreamWriter writer) throws IOException
{        Charset charset = getFileEncodingCharset();            String header = XML_HEADER.replaceAll("<ph>", charset.name());    writer.write(header);    writer.write('\n');}
0
public static String CEtoString(ConversionException ce)
{    return "XStream ConversionException at line: " + ce.get("line number") + "\n" + ce.get("message") + "\nPerhaps a missing jar? See log file.";}
0
public static String getPropertiesVersion()
{    return propertiesVersion;}
0
public static String getVERSION()
{    return VERSION;}
0
public static String getVersion()
{        return "$Revision$";}
0
public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0)
{        return arg0.equals(ScriptWrapper.class);}
0
public void marshal(Object arg0, HierarchicalStreamWriter writer, MarshallingContext context)
{    ScriptWrapper wrap = (ScriptWrapper) arg0;    String version = SaveService.getVERSION();        ConversionHelp.setOutVersion(version);    writer.addAttribute(ATT_VERSION, version);    writer.addAttribute(ATT_PROPERTIES, SaveService.getPropertiesVersion());    writer.addAttribute(ATT_JMETER, JMeterUtils.getJMeterVersion());    writer.startNode(classMapper.serializedClass(wrap.testPlan.getClass()));    context.convertAnother(wrap.testPlan);    writer.endNode();}
0
public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context)
{    ScriptWrapper wrap = new ScriptWrapper();    wrap.version = reader.getAttribute(ATT_VERSION);        ConversionHelp.setInVersion(wrap.version);        reader.moveDown();        try {        wrap.testPlan = (HashTree) context.convertAnother(wrap, getNextType(reader));    } catch (NoClassDefFoundError | Exception e) {        throw createConversionException(e);    }    return wrap;}
0
private ConversionException createConversionException(Throwable e)
{    final ConversionException conversionException = new ConversionException(e);    StackTraceElement[] ste = e.getStackTrace();    if (ste != null) {        for (StackTraceElement top : ste) {            String className = top.getClassName();            if (className.startsWith("org.apache.jmeter.")) {                conversionException.add("first-jmeter-class", top.toString());                break;            }        }    }    return conversionException;}
0
protected Class<?> getNextType(HierarchicalStreamReader reader)
{    String classAttribute = reader.getAttribute(ConversionHelp.ATT_CLASS);    Class<?> type;    if (classAttribute == null) {        type = classMapper.realClass(reader.getNodeName());    } else {        type = classMapper.realClass(classAttribute);    }    return type;}
0
public Collection<SampleResult> getSampleResults()
{    return sampleResults;}
0
public void setSampleResults(Collection<SampleResult> sampleResults)
{    this.sampleResults = sampleResults;}
0
public long getTestStartTime()
{    return testStartTime;}
0
public void setTestStartTime(long testStartTime)
{    this.testStartTime = testStartTime;}
0
public String getVersion()
{    return version;}
0
public void setVersion(String version)
{    this.version = version;}
0
public static FileServer getFileServer()
{    return server;}
0
public synchronized void resetBase()
{    checkForOpenFiles();    base = new File(DEFAULT_BASE);    }
1
public synchronized void setBasedir(String basedir)
{        checkForOpenFiles();    if (basedir != null) {        File newBase = new File(basedir);        if (!newBase.isDirectory()) {            newBase = newBase.getParentFile();        }        base = newBase;            }}
1
public synchronized void setBaseForScript(File scriptPath)
{    if (scriptPath == null) {        throw new IllegalArgumentException("scriptPath must not be null");    }    setScriptName(scriptPath.getName());        setBase(scriptPath.getAbsoluteFile().getParentFile());}
0
public synchronized void setBase(File jmxBase)
{    if (jmxBase == null) {        throw new IllegalArgumentException("jmxBase must not be null");    }    checkForOpenFiles();    base = jmxBase;    }
1
private void checkForOpenFiles() throws IllegalStateException
{    if (filesOpen()) {                throw new IllegalStateException("Files are still open, cannot change base directory");    }        files.clear();}
0
public synchronized String getBaseDir()
{    return base.getAbsolutePath();}
0
public static String getDefaultBase()
{    return DEFAULT_BASE;}
0
public synchronized File getBaseDirRelative()
{        File parent = new File(DEFAULT_BASE).getAbsoluteFile();    File f = base.getAbsoluteFile();    ArrayStack l = new ArrayStack();    while (f != null) {        if (f.equals(parent)) {            if (l.isEmpty()) {                break;            }            File rel = new File((String) l.pop());            while (!l.isEmpty()) {                rel = new File(rel, (String) l.pop());            }            return rel;        }        l.push(f.getName());        f = f.getParentFile();    }    return new File(".");}
0
public void reserveFile(String filename)
{    reserveFile(filename, null);}
0
public void reserveFile(String filename, String charsetName)
{    reserveFile(filename, charsetName, filename, false);}
0
public void reserveFile(String filename, String charsetName, String alias)
{    reserveFile(filename, charsetName, alias, false);}
0
public synchronized String reserveFile(String filename, String charsetName, String alias, boolean hasHeader)
{    if (filename == null || filename.isEmpty()) {        throw new IllegalArgumentException("Filename must not be null or empty");    }    if (alias == null) {        throw new IllegalArgumentException("Alias must not be null");    }    FileEntry fileEntry = files.get(alias);    if (fileEntry == null) {        fileEntry = new FileEntry(resolveFileFromPath(filename), null, charsetName);        if (filename.equals(alias)) {                    } else {                    }        files.put(alias, fileEntry);        if (hasHeader) {            try {                fileEntry.headerLine = readLine(alias, false);                if (fileEntry.headerLine == null) {                    fileEntry.exception = new EOFException("File is empty: " + fileEntry.file);                }            } catch (IOException | IllegalArgumentException e) {                fileEntry.exception = e;            }        }    }    if (hasHeader && fileEntry.headerLine == null) {        throw new IllegalArgumentException("Could not read file header line for file " + filename, fileEntry.exception);    }    return fileEntry.headerLine;}
1
private File resolveFileFromPath(String filename)
{    File f = new File(filename);    if (f.isAbsolute() || f.exists()) {        return f;    } else {        return new File(base, filename);    }}
0
public String readLine(String filename) throws IOException
{    return readLine(filename, true);}
0
public String readLine(String filename, boolean recycle) throws IOException
{    return readLine(filename, recycle, false);}
0
public synchronized String readLine(String filename, boolean recycle, boolean ignoreFirstLine) throws IOException
{    FileEntry fileEntry = files.get(filename);    if (fileEntry != null) {        if (fileEntry.inputOutputObject == null) {            fileEntry.inputOutputObject = createBufferedReader(fileEntry);        } else if (!(fileEntry.inputOutputObject instanceof Reader)) {            throw new IOException("File " + filename + " already in use");        }        BufferedReader reader = (BufferedReader) fileEntry.inputOutputObject;        String line = reader.readLine();        if (line == null && recycle) {            reader.close();            reader = createBufferedReader(fileEntry);            fileEntry.inputOutputObject = reader;            if (ignoreFirstLine) {                                                reader.readLine();            }            line = reader.readLine();        }                return line;    }    throw new IOException("File never reserved: " + filename);}
1
public synchronized String[] getParsedLine(String alias, boolean recycle, boolean ignoreFirstLine, char delim) throws IOException
{    BufferedReader reader = getReader(alias, recycle, ignoreFirstLine);    return CSVSaveService.csvReadFile(reader, delim);}
0
private BufferedReader getReader(String alias, boolean recycle, boolean ignoreFirstLine) throws IOException
{    FileEntry fileEntry = files.get(alias);    if (fileEntry != null) {        BufferedReader reader;        if (fileEntry.inputOutputObject == null) {            reader = createBufferedReader(fileEntry);            fileEntry.inputOutputObject = reader;            if (ignoreFirstLine) {                                                reader.readLine();            }        } else if (!(fileEntry.inputOutputObject instanceof Reader)) {            throw new IOException("File " + alias + " already in use");        } else {            reader = (BufferedReader) fileEntry.inputOutputObject;            if (recycle) {                                reader.mark(1);                int peek = reader.read();                if (peek == -1) {                                        reader.close();                    reader = createBufferedReader(fileEntry);                    fileEntry.inputOutputObject = reader;                    if (ignoreFirstLine) {                                                                        reader.readLine();                    }                } else {                                        reader.reset();                }            }        }        return reader;    } else {        throw new IOException("File never reserved: " + alias);    }}
0
private BufferedReader createBufferedReader(FileEntry fileEntry) throws IOException
{    if (!fileEntry.file.canRead() || !fileEntry.file.isFile()) {        throw new IllegalArgumentException("File " + fileEntry.file.getName() + " must exist and be readable");    }        BOMInputStream fis = new BOMInputStream(new FileInputStream(fileEntry.file));    InputStreamReader isr = null;        String charsetName = fileEntry.charSetEncoding;    if (!JOrphanUtils.isBlank(charsetName)) {        isr = new InputStreamReader(fis, charsetName);    } else if (fis.hasBOM()) {        isr = new InputStreamReader(fis, fis.getBOM().getCharsetName());    } else {        isr = new InputStreamReader(fis);    }    return new BufferedReader(isr);}
0
public synchronized void write(String filename, String value) throws IOException
{    FileEntry fileEntry = files.get(filename);    if (fileEntry != null) {        if (fileEntry.inputOutputObject == null) {            fileEntry.inputOutputObject = createBufferedWriter(fileEntry);        } else if (!(fileEntry.inputOutputObject instanceof Writer)) {            throw new IOException("File " + filename + " already in use");        }        BufferedWriter writer = (BufferedWriter) fileEntry.inputOutputObject;                writer.write(value);    } else {        throw new IOException("File never reserved: " + filename);    }}
1
private BufferedWriter createBufferedWriter(FileEntry fileEntry) throws IOException
{    FileOutputStream fos = new FileOutputStream(fileEntry.file);    OutputStreamWriter osw;        String charsetName = fileEntry.charSetEncoding;    if (!JOrphanUtils.isBlank(charsetName)) {        osw = new OutputStreamWriter(fos, charsetName);    } else {        osw = new OutputStreamWriter(fos);    }    return new BufferedWriter(osw);}
0
public synchronized void closeFiles() throws IOException
{    for (Map.Entry<String, FileEntry> me : files.entrySet()) {        closeFile(me.getKey(), me.getValue());    }    files.clear();}
0
public synchronized void closeFile(String name) throws IOException
{    FileEntry fileEntry = files.get(name);    closeFile(name, fileEntry);}
0
private void closeFile(String name, FileEntry fileEntry) throws IOException
{    if (fileEntry != null && fileEntry.inputOutputObject != null) {                fileEntry.inputOutputObject.close();        fileEntry.inputOutputObject = null;    }}
1
 boolean filesOpen()
{        return files.values().stream().anyMatch(fileEntry -> fileEntry.inputOutputObject != null);}
0
public File getRandomFile(String basedir, String[] extensions)
{    File input = null;    if (basedir != null) {        File src = new File(basedir);        File[] lfiles = src.listFiles(new JMeterFileFilter(extensions));        if (lfiles != null) {                        int count = lfiles.length;            input = lfiles[ThreadLocalRandom.current().nextInt(count)];        }    }    return input;}
0
public File getResolvedFile(String path)
{    reserveFile(path);    return files.get(path).file;}
0
public static String resolveBaseRelativeName(String relativeName)
{    if (relativeName.startsWith(BASE_PREFIX)) {        String newName = relativeName.substring(BASE_PREFIX.length());        return new File(getFileServer().getBaseDir(), newName).getAbsolutePath();    }    return relativeName;}
0
public String getScriptName()
{    return scriptName;}
0
public void setScriptName(String scriptName)
{    this.scriptName = scriptName;}
0
public void showScreen()
{    SwingUtilities.invokeLater(() -> {        setVisible(true);        setAlwaysOnTop(true);    });}
0
public void close()
{    SwingUtilities.invokeLater(() -> {        setVisible(false);        dispose();    });}
0
public void setProgress(final int progress)
{    SwingUtilities.invokeLater(() -> progressBar.setValue(progress));}
0
public void hyperlinkUpdate(HyperlinkEvent e)
{    if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {        String ref = e.getURL().getRef();        if (ref != null) {                        if (ref.length() > 0) {                scrollToReference(ref);            } else {                                scrollRectToVisible(new Rectangle(1, 1, 1, 1));            }        }    }}
1
protected PropertyDescriptor property(String name)
{    for (PropertyDescriptor propdesc : getPropertyDescriptors()) {        if (propdesc.getName().equals(name)) {            return propdesc;        }    }        return null;}
1
protected PropertyDescriptor property(String name, TypeEditor editor)
{    PropertyDescriptor property = property(name);    if (property != null) {        property.setValue(GenericTestBeanCustomizer.GUITYPE, editor);    }    return property;}
0
protected PropertyDescriptor property(final String name, final Class<? extends Enum<?>> enumClass)
{    PropertyDescriptor property = property(name);    if (property != null) {        property.setValue(GenericTestBeanCustomizer.GUITYPE, enumClass);                property.setValue(GenericTestBeanCustomizer.RESOURCE_BUNDLE, getBeanDescriptor().getValue(RESOURCE_BUNDLE));    }    return property;}
0
protected void setIcon(String resourceName)
{    icons[ICON_COLOR_16x16] = loadImage(resourceName);}
0
protected void createPropertyGroup(String group, String[] names)
{    String name;    for (int i = 0; i < names.length; i++) {                name = names[i];                PropertyDescriptor p = property(name);        p.setValue(GenericTestBeanCustomizer.GROUP, group);        p.setValue(GenericTestBeanCustomizer.ORDER, Integer.valueOf(i));    }    numCreatedGroups++;    getBeanDescriptor().setValue(GenericTestBeanCustomizer.ORDER(group), Integer.valueOf(numCreatedGroups));}
1
public BeanInfo[] getAdditionalBeanInfo()
{    return rootBeanInfo.getAdditionalBeanInfo();}
0
public BeanDescriptor getBeanDescriptor()
{    return beanDescriptor;}
0
public int getDefaultEventIndex()
{    return rootBeanInfo.getDefaultEventIndex();}
0
public int getDefaultPropertyIndex()
{    return rootBeanInfo.getDefaultPropertyIndex();}
0
public EventSetDescriptor[] getEventSetDescriptors()
{    return rootBeanInfo.getEventSetDescriptors();}
0
public Image getIcon(int iconKind)
{    return icons[iconKind];}
0
public MethodDescriptor[] getMethodDescriptors()
{    return rootBeanInfo.getMethodDescriptors();}
0
public PropertyDescriptor[] getPropertyDescriptors()
{    return rootBeanInfo.getPropertyDescriptors();}
0
public String getAsText()
{    Object value = getValue();    return value instanceof Boolean ? toString((Boolean) value) : null;}
0
private String toString(Boolean value)
{    return value.booleanValue() ? TRUE : FALSE;}
0
public void setAsText(String text)
{    this.setValue(text);}
0
public void setValue(Object value)
{    if (value instanceof String) {        super.setValue(Boolean.valueOf((String) value));    } else if (value == null || value instanceof Boolean) {                super.setValue(value);    } else {        throw new java.lang.IllegalArgumentException("Unexpected type: " + value.getClass().getName());    }}
0
public String[] getTags()
{    return TAGS;}
0
public boolean supportsCustomEditor()
{    return true;}
0
public Component getCustomEditor()
{    return combo;}
0
public Object getValue()
{    return getAsText();}
0
public String getAsText()
{    final Object value = combo.getSelectedItem();    if (UNDEFINED.equals(value)) {        return null;    }    final int item = combo.getSelectedIndex();        if (item >= minTagIndex && item <= maxTagIndex) {        return tags[item - minTagIndex];    }        return (String) value;}
0
public void setValue(Object value)
{    setAsText((String) value);}
0
public void setAsText(String value)
{    combo.setEditable(true);    if (value == null) {        combo.setSelectedItem(UNDEFINED);    } else {        combo.setSelectedItem(translate(value));    }    if (!startingEdit && combo.getSelectedIndex() >= 0) {        combo.setEditable(false);    }}
0
public void itemStateChanged(ItemEvent e)
{    if (e.getStateChange() == ItemEvent.SELECTED) {        if (EDIT.equals(e.getItem())) {            startingEdit = true;            startEditing();            startingEdit = false;        } else {            if (!startingEdit && combo.getSelectedIndex() >= 0) {                combo.setEditable(false);            }            firePropertyChange();        }    }}
0
private void startEditing()
{    JTextComponent textField = (JTextComponent) combo.getEditor().getEditorComponent();    combo.setEditable(true);    textField.requestFocusInWindow();    String text = translate(initialEditValue);    if (text == null) {                text = "";    }    combo.setSelectedItem(text);    int i = text.indexOf("${}");    if (i != -1) {        textField.setCaretPosition(i + 2);    } else {        textField.selectAll();    }}
0
public String[] getTags()
{    return tags.clone();}
0
public void setInitialEditValue(String object)
{    initialEditValue = object;}
0
public String toString()
{    return propValue;}
0
public boolean equals(Object other)
{    if (this == other) {        return true;    }    if (other instanceof UniqueObject) {        return propKey.equals(((UniqueObject) other).propKey);    }    return false;}
0
public int hashCode()
{    return propKey.hashCode();}
0
public void clearGui()
{    setAsText(initialEditValue);}
0
private String translate(String input)
{    if (validTranslations != null) {        final String entry = validTranslations.get(input);        return entry != null ? entry : input;    }    return input;}
0
public boolean supportsCustomEditor()
{    return true;}
0
public Component getCustomEditor()
{    return combo;}
0
public Object getValue()
{    return Integer.valueOf(combo.getSelectedIndex());}
0
public String getAsText()
{    Object value = combo.getSelectedItem();    return (String) value;}
0
public void setValue(Object value)
{    if (value instanceof Enum<?>) {        combo.setSelectedIndex(((Enum<?>) value).ordinal());    } else if (value instanceof Integer) {        combo.setSelectedIndex(((Integer) value).intValue());    } else {        combo.setSelectedItem(value);    }}
0
public void setAsText(String value)
{    combo.setSelectedItem(value);}
0
public void clearGui()
{    combo.setSelectedIndex(defaultIndex);}
0
public String getAsText()
{    return textField.getText();}
0
public void setAsText(String value)
{    initialValue = value;    textField.setText(value);}
0
public Object getValue()
{    return getAsText();}
0
public void setValue(Object value)
{    if (value instanceof String) {        setAsText((String) value);    } else if (value == null) {        setAsText(null);    } else {        throw new IllegalArgumentException("Expected String but got " + value.getClass() + ", value=" + value);    }}
0
public Component getCustomEditor()
{    return textField;}
0
public void firePropertyChange()
{    String newValue = getAsText();    if (equalOldValueOrBothNull(newValue)) {        return;    }    initialValue = newValue;    super.firePropertyChange();}
0
private boolean equalOldValueOrBothNull(String newValue)
{    return initialValue != null && initialValue.equals(newValue) || initialValue == null && newValue == null;}
0
public void actionPerformed(ActionEvent e)
{    firePropertyChange();}
0
public void focusGained(FocusEvent e)
{}
0
public void focusLost(FocusEvent e)
{    firePropertyChange();}
0
public void actionPerformed(ActionEvent e)
{    JFileChooser chooser = FileDialoger.promptToOpenFile();    if (chooser == null) {        return;    }    setValue(toUnix(chooser.getSelectedFile()));}
0
private String toUnix(final File selectedFile)
{    if (File.separatorChar == '\\') {        return FilenameUtils.separatorsToUnix(selectedFile.getPath());    }    return selectedFile.getPath();}
0
public void addPropertyChangeListener(PropertyChangeListener listener)
{    editor.addPropertyChangeListener(listener);}
0
public String getAsText()
{    return editor.getAsText();}
0
public Component getCustomEditor()
{    return panel;}
0
public String getJavaInitializationString()
{    return editor.getJavaInitializationString();}
0
public String[] getTags()
{    return editor.getTags();}
0
public Object getValue()
{    return editor.getValue();}
0
public boolean isPaintable()
{    return editor.isPaintable();}
0
public void paintValue(Graphics gfx, Rectangle box)
{    editor.paintValue(gfx, box);}
0
public void removePropertyChangeListener(PropertyChangeListener listener)
{    editor.removePropertyChangeListener(listener);}
0
public void setAsText(String text)
{    editor.setAsText(text);}
0
public void setValue(Object value)
{    editor.setValue(value);}
0
public boolean supportsCustomEditor()
{    return editor.supportsCustomEditor();}
0
public static String ORDER(String group)
{    return "group." + group + ".order";}
0
private static void validateAttributes(PropertyDescriptor pd, PropertyEditor pe)
{    final Object deflt = pd.getValue(DEFAULT);    if (deflt == null) {        if (notNull(pd)) {            if (log.isWarnEnabled()) {                            }        }        if (noSaveDefault(pd)) {            if (log.isWarnEnabled()) {                            }        }    } else {                final Class<?> defltClass = deflt.getClass();                final Class<?> propClass = ClassUtils.primitiveToWrapper(pd.getPropertyType());        if (!propClass.isAssignableFrom(defltClass)) {            if (log.isWarnEnabled()) {                            }        }    }    if (notOther(pd) && pd.getValue(TAGS) == null && pe.getTags() == null) {        if (log.isWarnEnabled()) {                    }    }    if (!notNull(pd)) {        Class<?> propertyType = pd.getPropertyType();        if (propertyType.isPrimitive()) {            if (log.isWarnEnabled()) {                            }        }    }    if (!pd.attributeNames().hasMoreElements()) {        if (log.isWarnEnabled()) {                    }    }}
1
private static String getDetails(PropertyDescriptor pd)
{    return pd.getReadMethod().getDeclaringClass().getName() + '#' + pd.getName() + '(' + pd.getPropertyType().getCanonicalName() + ')';}
0
private WrapperEditor createWrapperEditor(PropertyEditor typeEditor, PropertyDescriptor descriptor)
{    String[] editorTags = typeEditor.getTags();    String[] additionalTags = (String[]) descriptor.getValue(TAGS);    String[] tags;    if (editorTags == null) {        tags = additionalTags;    } else if (additionalTags == null) {        tags = editorTags;    } else {        tags = new String[editorTags.length + additionalTags.length];        int j = 0;        for (String editorTag : editorTags) {            tags[j++] = editorTag;        }        for (String additionalTag : additionalTags) {            tags[j++] = additionalTag;        }    }    boolean notNull = notNull(descriptor);    boolean notExpression = notExpression(descriptor);    boolean notOther = notOther(descriptor);    PropertyEditor guiEditor;    if (notNull && tags == null) {        guiEditor = new FieldStringEditor();    } else {        guiEditor = new ComboStringEditor(tags, notExpression && notOther, notNull, (ResourceBundle) descriptor.getValue(GenericTestBeanCustomizer.RESOURCE_BUNDLE));    }    return new WrapperEditor(typeEditor, guiEditor,     !notNull,     !notExpression,     !notOther, descriptor.getValue(DEFAULT));}
0
 static boolean notOther(PropertyDescriptor descriptor)
{    return Boolean.TRUE.equals(descriptor.getValue(NOT_OTHER));}
0
 static boolean notExpression(PropertyDescriptor descriptor)
{    return Boolean.TRUE.equals(descriptor.getValue(NOT_EXPRESSION));}
0
 static boolean notNull(PropertyDescriptor descriptor)
{    return Boolean.TRUE.equals(descriptor.getValue(NOT_UNDEFINED));}
0
 static boolean noSaveDefault(PropertyDescriptor descriptor)
{    return Boolean.TRUE.equals(descriptor.getValue(DEFAULT_NOT_SAVED));}
0
private void setEditorValue(int i, Object value) throws IllegalArgumentException
{    editors[i].setValue(value);}
0
public void setObject(Object map)
{    propertyMap = (Map<String, Object>) map;    if (propertyMap.isEmpty()) {                for (PropertyDescriptor descriptor : descriptors) {            Object value = descriptor.getValue(DEFAULT);            String name = descriptor.getName();            if (value != null) {                propertyMap.put(name, value);                            }            firePropertyChange(name, null, value);        }    }        for (int i = 0; i < editors.length; i++) {        if (editors[i] == null) {            continue;        }        try {            setEditorValue(i, propertyMap.get(descriptors[i].getName()));        } catch (IllegalArgumentException e) {                                                                                                                                                                        setEditorValue(i, descriptors[i].getValue(DEFAULT));        }    }}
1
private void init()
{        setLayout(new GridBagLayout());        GridBagConstraints cl = new GridBagConstraints();    cl.gridx = 0;    cl.anchor = GridBagConstraints.EAST;    cl.insets = new Insets(0, 1, 0, 1);        GridBagConstraints ce = new GridBagConstraints();    ce.fill = GridBagConstraints.BOTH;    ce.gridx = 1;    ce.weightx = 1.0;    ce.insets = new Insets(0, 1, 0, 1);        GridBagConstraints cp = new GridBagConstraints();    cp.fill = GridBagConstraints.BOTH;    cp.gridx = 1;    cp.gridy = GridBagConstraints.RELATIVE;    cp.gridwidth = 2;    cp.weightx = 1.0;    JPanel currentPanel = this;    String currentGroup = DEFAULT_GROUP;    int y = 0;    for (int i = 0; i < editors.length; i++) {        if (editors[i] == null) {            continue;        }        if (log.isDebugEnabled()) {                    }        String g = group(descriptors[i]);        if (!currentGroup.equals(g)) {            if (currentPanel != this) {                add(currentPanel, cp);            }            currentGroup = g;            currentPanel = new JPanel(new GridBagLayout());            currentPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), groupDisplayName(g)));            cp.weighty = 0.0;            y = 0;        }        Component customEditor = editors[i].getCustomEditor();        boolean multiLineEditor = false;        if (customEditor.getPreferredSize().height > 50 || customEditor instanceof JScrollPane || descriptors[i].getValue(MULTILINE) != null) {                                                            multiLineEditor = true;        }        JLabel label = createLabel(descriptors[i]);        label.setLabelFor(customEditor);        cl.gridy = y;        cl.gridwidth = multiLineEditor ? 2 : 1;        cl.anchor = multiLineEditor ? GridBagConstraints.CENTER : GridBagConstraints.EAST;        currentPanel.add(label, cl);        ce.gridx = multiLineEditor ? 0 : 1;        ce.gridy = multiLineEditor ? ++y : y;        ce.gridwidth = multiLineEditor ? 2 : 1;        ce.weighty = multiLineEditor ? 1.0 : 0.0;        cp.weighty += ce.weighty;        currentPanel.add(customEditor, ce);        y++;    }    if (currentPanel != this) {        add(currentPanel, cp);    }            cp.weighty = 0.0001;    add(Box.createHorizontalStrut(0), cp);}
1
private JLabel createLabel(PropertyDescriptor desc)
{    String text = desc.getDisplayName();    if (!"".equals(text)) {        text = propertyFieldLabelMessage.format(new Object[] { desc.getDisplayName() });    }        JLabel label = new JLabel(text);    label.setHorizontalAlignment(SwingConstants.TRAILING);    label.setToolTipText(propertyToolTipMessage.format(new Object[] { desc.getShortDescription() }));    return label;}
0
private static String group(PropertyDescriptor descriptor)
{    String group = (String) descriptor.getValue(GROUP);    if (group == null) {        group = DEFAULT_GROUP;    }    return group;}
0
private String groupDisplayName(String group)
{    ResourceBundle b = (ResourceBundle) beanInfo.getBeanDescriptor().getValue(RESOURCE_BUNDLE);    if (b == null) {        return group;    }    String key = group + ".displayName";    if (b.containsKey(key)) {        return b.getString(key);    } else {        return group;    }}
0
public int compare(PropertyDescriptor d1, PropertyDescriptor d2)
{    String g1 = group(d1);    String g2 = group(d2);    Integer go1 = groupOrder(g1);    Integer go2 = groupOrder(g2);    int result = go1.compareTo(go2);    if (result != 0) {        return result;    }    result = g1.compareTo(g2);    if (result != 0) {        return result;    }    Integer po1 = propertyOrder(d1);    Integer po2 = propertyOrder(d2);    result = po1.compareTo(po2);    if (result != 0) {        return result;    }    return d1.getName().compareTo(d2.getName());}
0
private Integer groupOrder(String group)
{    Integer order = (Integer) beanInfo.getBeanDescriptor().getValue(ORDER(group));    if (order == null) {        order = Integer.valueOf(0);    }    return order;}
0
private Integer propertyOrder(PropertyDescriptor d)
{    Integer order = (Integer) d.getValue(ORDER);    if (order == null) {        order = Integer.valueOf(0);    }    return order;}
0
 void saveGuiFields()
{    for (int i = 0; i < editors.length; i++) {                PropertyEditor propertyEditor = editors[i];        if (propertyEditor != null) {            Object value = propertyEditor.getValue();            String name = descriptors[i].getName();            if (value == null) {                propertyMap.remove(name);                            } else {                propertyMap.put(name, value);                            }        }    }}
1
 void clearGuiFields()
{    for (int i = 0; i < editors.length; i++) {                PropertyEditor propertyEditor = editors[i];        if (propertyEditor != null) {            try {                if (propertyEditor instanceof ClearGui) {                    ((ClearGui) propertyEditor).clearGui();                } else if (propertyEditor instanceof WrapperEditor) {                    WrapperEditor we = (WrapperEditor) propertyEditor;                    String[] tags = we.getTags();                    if (tags != null && tags.length > 0) {                        we.setAsText(tags[0]);                    } else {                        we.resetValue();                    }                } else {                    propertyEditor.setAsText("");                }            } catch (IllegalArgumentException ex) {                            }        }    }}
1
public void setAsText(String text)
{    this.setValue(text);}
0
public void setValue(Object value)
{    if (value instanceof String) {                super.setValue(Integer.decode((String) value));    } else if (value == null || value instanceof Integer) {                super.setValue(value);    } else {        throw new java.lang.IllegalArgumentException("Unexpected type: " + value.getClass().getName());    }}
0
public void setAsText(String text)
{    this.setValue(text);}
0
public void setValue(Object value)
{    if (value instanceof String) {                super.setValue(Long.decode((String) value));    } else if (value == null || value instanceof Long) {                super.setValue(value);    } else {        throw new java.lang.IllegalArgumentException("Unexpected type: " + value.getClass().getName());    }}
0
public String getAsText()
{    return new String(textField.getPassword());}
0
public void setAsText(String value)
{    initialValue = value;    textField.setText(value);}
0
public Object getValue()
{    return getAsText();}
0
public void setValue(Object value)
{    if (value instanceof String) {        setAsText((String) value);    } else {        throw new IllegalArgumentException();    }}
0
public Component getCustomEditor()
{    return textField;}
0
public boolean supportsCustomEditor()
{    return true;}
0
public void firePropertyChange()
{    String newValue = getAsText();    if (initialValue.equals(newValue)) {        return;    }    initialValue = newValue;    super.firePropertyChange();}
0
public void actionPerformed(ActionEvent e)
{    firePropertyChange();}
0
public void focusGained(FocusEvent e)
{}
0
public void focusLost(FocusEvent e)
{    firePropertyChange();}
0
public String getAsText()
{    return null;}
0
public Component getCustomEditor()
{    JComponent pane = makePanel();    pane.doLayout();    pane.validate();    return pane;}
0
private JComponent makePanel()
{    JPanel p = new JPanel(new BorderLayout());    JScrollPane scroller = new JScrollPane(table);    table.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);    scroller.setMinimumSize(new Dimension(100, 70));    scroller.setPreferredSize(scroller.getMinimumSize());    p.add(scroller, BorderLayout.CENTER);    JPanel south = new JPanel();    south.add(addButton);    south.add(clipButton);    removeButton.setEnabled(false);    south.add(removeButton);    clearButton.setEnabled(false);    south.add(clearButton);    upButton.setEnabled(false);    south.add(upButton);    downButton.setEnabled(false);    south.add(downButton);    p.add(south, BorderLayout.SOUTH);    return p;}
0
public Object getValue()
{    return model.getObjectList();}
0
public void setAsText(String text) throws IllegalArgumentException
{}
0
public void setValue(Object value)
{    if (value != null) {        model.setRows(convertCollection((Collection<?>) value));    } else {        model.clearData();    }    if (model.getRowCount() > 0) {        removeButton.setEnabled(true);        clearButton.setEnabled(true);    } else {        removeButton.setEnabled(false);        clearButton.setEnabled(false);    }    if (model.getRowCount() > 1) {        upButton.setEnabled(true);        downButton.setEnabled(true);    } else {        upButton.setEnabled(false);        downButton.setEnabled(false);    }    this.firePropertyChange();}
0
private Collection<Object> convertCollection(Collection<?> values)
{    List<Object> l = new LinkedList<>();    for (Object obj : values) {        if (obj instanceof TestElementProperty) {            l.add(((TestElementProperty) obj).getElement());        } else {            l.add(obj);        }    }    return l;}
0
public boolean supportsCustomEditor()
{    return true;}
0
public void setDescriptor(PropertyDescriptor descriptor)
{    this.descriptor = descriptor;    String value = (String) descriptor.getValue(CLASSNAME);    if (value == null) {        throw new RuntimeException("The Table Editor requires the CLASSNAME attribute be set - the name of the object to represent a row");    }    try {        clazz = Class.forName(value);        initializeModel();    } catch (ClassNotFoundException e) {        throw new RuntimeException("Could not find the CLASSNAME class " + value, e);    }}
0
 void initializeModel()
{    Object hdrs = descriptor.getValue(HEADERS);    if (!(hdrs instanceof String[])) {        throw new RuntimeException("attribute HEADERS must be a String array");    }    if (clazz == String.class) {        model = new ObjectTableModel((String[]) hdrs, new Functor[0], new Functor[0], new Class[] { String.class });    } else {        Object value = descriptor.getValue(OBJECT_PROPERTIES);        if (!(value instanceof String[])) {            throw new RuntimeException("attribute OBJECT_PROPERTIES must be a String array");        }        List<String> props = Arrays.stream((String[]) value).map(StringUtils::capitalize).collect(Collectors.toList());        Functor[] writers = createWriters(props);        Functor[] readers = createReaders(clazz, props);        Class<?>[] editors = getArgsForWriter(clazz, props);        model = new ObjectTableModel((String[]) hdrs, readers, writers, editors);    }    model.addTableModelListener(this);    table = new JTable(model);    JMeterUtils.applyHiDPI(table);    table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);    table.addFocusListener(this);}
0
private Functor[] createWriters(List<String> propNames)
{    return propNames.stream().map(    propName -> "set" + propName).map(Functor::new).toArray(Functor[]::new);}
0
private Functor[] createReaders(Class<?> c, List<String> propNames)
{    List<String> methodNames = Arrays.stream(c.getMethods()).map(Method::getName).collect(Collectors.toList());    return propNames.stream().map(name -> methodNames.contains("get" + name) ? "get" + name : "is" + name).map(Functor::new).toArray(Functor[]::new);}
0
private Class<?>[] getArgsForWriter(Class<?> c, List<String> propNames)
{    return propNames.stream().map(propName -> Arrays.stream(c.getMethods()).filter(    m -> m.getName().equals("set" + propName)).map(m -> m.getParameterTypes()[0]).findFirst().orElse(null)).toArray(Class<?>[]::new);}
0
public void tableChanged(TableModelEvent e)
{    this.firePropertyChange();}
0
public void focusGained(FocusEvent e)
{}
0
public void focusLost(FocusEvent e)
{    final int editingRow = table.getEditingRow();    final int editingColumn = table.getEditingColumn();    CellEditor ce = null;    if (editingRow != -1 && editingColumn != -1) {        ce = table.getCellEditor(editingRow, editingColumn);    }    Component editor = table.getEditorComponent();    if (ce != null && (editor == null || editor != e.getOppositeComponent())) {        ce.stopCellEditing();    } else if (editor != null) {        editor.addFocusListener(this);    }    this.firePropertyChange();}
0
public void actionPerformed(ActionEvent e)
{    try {        model.addRow(clazz.getDeclaredConstructor().newInstance());        removeButton.setEnabled(true);        clearButton.setEnabled(true);    } catch (Exception err) {            }}
1
public void actionPerformed(ActionEvent e)
{    try {        String clipboardContent = GuiUtils.getPastedText();        if (clipboardContent == null) {            return;        }                String[] clipboardLines = clipboardContent.split("\n");        for (String clipboardLine : clipboardLines) {                        String[] columns = clipboardLine.split("\t");            model.addRow(clazz.getDeclaredConstructor().newInstance());            for (int i = 0; i < columns.length; i++) {                model.setValueAt(columns[i], model.getRowCount() - 1, i);            }        }        if (model.getRowCount() > 1) {            upButton.setEnabled(true);            downButton.setEnabled(true);        } else {            upButton.setEnabled(false);            downButton.setEnabled(false);        }    } catch (Exception err) {            }}
1
public void actionPerformed(ActionEvent e)
{    int[] rows = table.getSelectedRows();    for (int i = 0; i < rows.length; i++) {        model.removeRow(rows[i] - i);    }    if (model.getRowCount() > 1) {        upButton.setEnabled(true);        downButton.setEnabled(true);    } else {        upButton.setEnabled(false);        downButton.setEnabled(false);    }}
0
public void actionPerformed(ActionEvent e)
{    model.clearData();    upButton.setEnabled(false);    downButton.setEnabled(false);}
0
public void actionPerformed(ActionEvent e)
{    GuiUtils.cancelEditing(table);    int[] rowsSelected = table.getSelectedRows();    if (rowsSelected.length > 0 && rowsSelected[0] > 0) {        table.clearSelection();        for (int rowSelected : rowsSelected) {            model.moveRow(rowSelected, rowSelected + 1, rowSelected - 1);        }        for (int rowSelected : rowsSelected) {            table.addRowSelectionInterval(rowSelected - 1, rowSelected - 1);        }    }}
0
public void actionPerformed(ActionEvent e)
{    GuiUtils.cancelEditing(table);    int[] rowsSelected = table.getSelectedRows();    if (rowsSelected.length > 0 && rowsSelected[rowsSelected.length - 1] < table.getRowCount() - 1) {        table.clearSelection();        for (int i = rowsSelected.length - 1; i >= 0; i--) {            int rowSelected = rowsSelected[i];            model.moveRow(rowSelected, rowSelected + 1, rowSelected + 1);        }        for (int rowSelected : rowsSelected) {            table.addRowSelectionInterval(rowSelected + 1, rowSelected + 1);        }    }}
0
public void clearGui()
{    this.model.clearData();}
0
private Customizer createCustomizer()
{    try {        return (Customizer) customizerClass.getDeclaredConstructor().newInstance();    } catch (ReflectiveOperationException e) {                throw new Error(e.toString());    }}
1
public String getStaticLabel()
{    if (beanInfo == null) {                return "null";    }    return beanInfo.getBeanDescriptor().getDisplayName();}
0
public TestElement createTestElement()
{    try {        TestElement element = (TestElement) testBeanClass.getDeclaredConstructor().newInstance();                if (initialized) {            setValues(element);        }                modifyTestElement(element);        return element;    } catch (ReflectiveOperationException e) {                        throw new Error(e);    }}
1
public void modifyTestElement(TestElement element)
{        if (customizer instanceof GenericTestBeanCustomizer) {        GenericTestBeanCustomizer gtbc = (GenericTestBeanCustomizer) customizer;        gtbc.saveGuiFields();    }    configureTestElement(element);        for (PropertyDescriptor desc : beanInfo.getPropertyDescriptors()) {        String name = desc.getName();        Object value = propertyMap.get(name);                if (value == null) {            if (GenericTestBeanCustomizer.notNull(desc)) {                                if (GenericTestBeanCustomizer.noSaveDefault(desc)) {                                        element.removeProperty(name);                } else {                    setPropertyInElement(element, name, desc.getValue(GenericTestBeanCustomizer.DEFAULT));                }            } else {                element.removeProperty(name);            }        } else {            if (GenericTestBeanCustomizer.noSaveDefault(desc) && value.equals(desc.getValue(GenericTestBeanCustomizer.DEFAULT))) {                                element.removeProperty(name);            } else {                setPropertyInElement(element, name, value);            }        }    }}
1
private void setPropertyInElement(TestElement element, String name, Object value)
{    JMeterProperty jprop = AbstractProperty.createProperty(value);    jprop.setName(name);    element.setProperty(jprop);}
0
public JPopupMenu createPopupMenu()
{    if (Timer.class.isAssignableFrom(testBeanClass)) {        return MenuFactory.getDefaultTimerMenu();    } else if (Sampler.class.isAssignableFrom(testBeanClass)) {        return MenuFactory.getDefaultSamplerMenu();    } else if (ConfigElement.class.isAssignableFrom(testBeanClass)) {        return MenuFactory.getDefaultConfigElementMenu();    } else if (Assertion.class.isAssignableFrom(testBeanClass)) {        return MenuFactory.getDefaultAssertionMenu();    } else if (PostProcessor.class.isAssignableFrom(testBeanClass) || PreProcessor.class.isAssignableFrom(testBeanClass)) {        return MenuFactory.getDefaultExtractorMenu();    } else if (Visualizer.class.isAssignableFrom(testBeanClass)) {        return MenuFactory.getDefaultVisualizerMenu();    } else if (Controller.class.isAssignableFrom(testBeanClass)) {        return MenuFactory.getDefaultControllerMenu();    } else {                return MenuFactory.getDefaultMenu();    }}
1
public void configure(TestElement element)
{    if (!initialized) {        init();    }    clearGui();    super.configure(element);    setValues(element);    initialized = true;}
0
private void setValues(TestElement element)
{        for (PropertyIterator jprops = element.propertyIterator(); jprops.hasNext(); ) {        JMeterProperty jprop = jprops.next();        propertyMap.put(jprop.getName(), jprop.getObjectValue());    }    if (customizer != null) {        customizer.setObject(propertyMap);    } else {        if (initialized) {            remove(customizerIndexInPanel);        }        Customizer c = customizers.get(element);        if (c == null) {            c = createCustomizer();            c.setObject(propertyMap);            customizers.put(element, c);        }        add((Component) c, BorderLayout.CENTER);    }}
0
public Collection<String> getMenuCategories()
{    BeanDescriptor bd = beanInfo.getBeanDescriptor();        if (bd.isExpert() && !JMeterUtils.isExpertMode()) {        return null;    }    List<String> menuCategories = setupGuiClassesList();    if (menuCategories.isEmpty()) {            } else if (menuCategories.size() > 1) {                            }    return menuCategories;}
1
public int setupGuiClasses()
{    return setupGuiClassesList().size();}
0
private List<String> setupGuiClassesList()
{    List<String> menuCategories = new ArrayList<>();        BeanDescriptor bd = beanInfo.getBeanDescriptor();    if (Assertion.class.isAssignableFrom(testBeanClass)) {        menuCategories.add(MenuFactory.ASSERTIONS);        bd.setValue(TestElement.GUI_CLASS, AbstractAssertionGui.class.getName());    }    if (ConfigElement.class.isAssignableFrom(testBeanClass)) {        menuCategories.add(MenuFactory.CONFIG_ELEMENTS);        bd.setValue(TestElement.GUI_CLASS, AbstractConfigGui.class.getName());    }    if (Controller.class.isAssignableFrom(testBeanClass)) {        menuCategories.add(MenuFactory.CONTROLLERS);        bd.setValue(TestElement.GUI_CLASS, AbstractControllerGui.class.getName());    }    if (Visualizer.class.isAssignableFrom(testBeanClass)) {        menuCategories.add(MenuFactory.LISTENERS);        bd.setValue(TestElement.GUI_CLASS, AbstractVisualizer.class.getName());    }    if (PostProcessor.class.isAssignableFrom(testBeanClass)) {        menuCategories.add(MenuFactory.POST_PROCESSORS);        bd.setValue(TestElement.GUI_CLASS, AbstractPostProcessorGui.class.getName());    }    if (PreProcessor.class.isAssignableFrom(testBeanClass)) {        menuCategories.add(MenuFactory.PRE_PROCESSORS);        bd.setValue(TestElement.GUI_CLASS, AbstractPreProcessorGui.class.getName());    }    if (Sampler.class.isAssignableFrom(testBeanClass)) {        menuCategories.add(MenuFactory.SAMPLERS);        bd.setValue(TestElement.GUI_CLASS, AbstractSamplerGui.class.getName());    }    if (Timer.class.isAssignableFrom(testBeanClass)) {        menuCategories.add(MenuFactory.TIMERS);        bd.setValue(TestElement.GUI_CLASS, AbstractTimerGui.class.getName());    }    return menuCategories;}
0
private void init()
{    setLayout(new BorderLayout(0, 5));    setBorder(makeBorder());    add(makeTitlePanel(), BorderLayout.NORTH);    customizerIndexInPanel = getComponentCount();    if (customizerClass == null) {        customizer = new GenericTestBeanCustomizer(beanInfo);    } else if (SharedCustomizer.class.isAssignableFrom(customizerClass)) {        customizer = createCustomizer();    }    if (customizer != null) {        add((Component) customizer, BorderLayout.CENTER);    }}
0
public String getLabelResource()
{        return null;}
0
public void clearGui()
{    super.clearGui();    if (customizer instanceof GenericTestBeanCustomizer) {        GenericTestBeanCustomizer gtbc = (GenericTestBeanCustomizer) customizer;        gtbc.clearGuiFields();    }    propertyMap.clear();}
0
public boolean isHidden()
{    return beanInfo.getBeanDescriptor().isHidden();}
0
public boolean isExpert()
{    return beanInfo.getBeanDescriptor().isExpert();}
0
public void localeChanged(LocaleChangeEvent event)
{    try {        beanInfo = Introspector.getBeanInfo(testBeanClass);        setupGuiClasses();    } catch (IntrospectionException e) {                JMeterUtils.reportErrorToUser("Can't get beanInfo for " + testBeanClass.getName());    }}
1
public String getDocAnchor()
{    ResourceBundle resourceBundle = ResourceBundle.getBundle(    testBeanClass.getName() + "Resources", new Locale("", ""));    String name = resourceBundle.getString("displayName");    return name.replace(' ', '_');}
0
public String toString()
{    return "TestBeanGUI:" + (testBeanClass == null ? "" : testBeanClass.getName());}
0
public void focusGained(FocusEvent e)
{}
0
public void focusLost(FocusEvent e)
{    firePropertyChange();}
0
private final void init()
{        textUI.discardAllEdits();    textUI.addFocusListener(this);}
0
public String getAsText()
{    return textUI.getText();}
0
public Component getCustomEditor()
{    return scroller;}
0
public void setAsText(String text) throws IllegalArgumentException
{    textUI.setInitialText(text);    textUI.setCaretPosition(0);}
0
public void setValue(Object value)
{    if (value != null) {        textUI.setInitialText(value.toString());        textUI.setCaretPosition(0);    } else {        textUI.setInitialText("");    }}
0
public Object getValue()
{    return textUI.getText();}
0
public boolean supportsCustomEditor()
{    return true;}
0
public void propertyChange(PropertyChangeEvent evt)
{    Object source = evt.getSource();    if (source instanceof ComboStringEditor) {        ComboStringEditor cse = (ComboStringEditor) source;        String lang = cse.getAsText().toLowerCase();        textUI.setLanguage(lang);    }}
0
 PropertyEditor getInstance(PropertyDescriptor descriptor)
{    return new FileEditor(descriptor);}
0
 PropertyEditor getInstance(PropertyDescriptor descriptor)
{    return new PasswordEditor();}
0
 PropertyEditor getInstance(PropertyDescriptor descriptor)
{    return new TableEditor();}
0
 PropertyEditor getInstance(PropertyDescriptor descriptor)
{    return new TextAreaEditor(descriptor);}
0
 PropertyEditor getInstance(PropertyDescriptor descriptor)
{    return new ComboStringEditor(descriptor);}
0
 final void resetValue()
{    setValue(defaultValue);    lastValidValue = getAsText();}
0
private void initialize()
{    resetValue();    if (guiEditor instanceof ComboStringEditor) {        String[] tags = guiEditor.getTags();                        String v;        if (!acceptsOther) {                        v = "${}";        } else if (isValidValue("")) {                                    v = "";        } else if (acceptsExpressions) {                        v = "${}";        } else if (tags != null && tags.length > 0) {            v = tags[0];        } else {            v = getAsText();        }        ((ComboStringEditor) guiEditor).setInitialEditValue(v);    }    guiEditor.addPropertyChangeListener(this);}
0
public boolean supportsCustomEditor()
{    return true;}
0
public Component getCustomEditor()
{    return guiEditor.getCustomEditor();}
0
public String[] getTags()
{    return guiEditor.getTags();}
0
private boolean isATag(String text)
{    String[] tags = getTags();    if (tags == null) {        return false;    }    for (String tag : tags) {        if (tag.equals(text)) {            return true;        }    }    return false;}
0
private boolean isValidValue(String text)
{    if (text == null) {        return acceptsNull;    }    if (acceptsExpressions && isExpression(text)) {        return true;    }        if (isATag(text)) {        return true;    }        if (!acceptsOther) {        return false;    }        try {        typeEditor.setAsText(text);    } catch (IllegalArgumentException e1) {                return false;    }        return true;}
0
private void shouldNeverHappen(String msg)
{        throw new Error(msg);}
0
private void shouldNeverHappen(Exception e)
{        throw new Error(e.toString());}
0
private boolean isExpression(String text)
{        return text.contains("${");}
0
private boolean isExpression(Object text)
{    return text instanceof String && isExpression((String) text);}
0
public Object getValue()
{    String text = (String) guiEditor.getValue();    Object value;    if (text == null) {        if (!acceptsNull) {            shouldNeverHappen("Text is null but null is not allowed");        }        value = null;    } else {        if (acceptsExpressions && isExpression(text)) {            value = text;        } else {                        if (!acceptsOther && !isATag(text)) {                shouldNeverHappen("Text is not a tag but other entries are not allowed");            }            try {                                try {                    typeEditor.setAsText(text);                } catch (NumberFormatException e) {                    if (text.length() == 0) {                                                text = "0";                        typeEditor.setAsText(text);                    } else {                        shouldNeverHappen(e);                    }                }            } catch (IllegalArgumentException e) {                shouldNeverHappen(e);            }            value = typeEditor.getValue();        }    }    if (log.isDebugEnabled()) {        if (value == null) {                    } else {                    }    }    return value;}
1
public final void setValue(Object value)
{        String text;    if (log.isDebugEnabled()) {        if (value == null) {                    } else {                    }    }    if (value == null) {        if (!acceptsNull) {            throw new IllegalArgumentException("Null is not allowed");        }        text = null;    } else if (acceptsExpressions && isExpression(value)) {        text = (String) value;    } else {                        typeEditor.setValue(value);        text = fixGetAsTextBug(typeEditor.getAsText());        if (!acceptsOther && !isATag(text)) {            throw new IllegalArgumentException("Value not allowed: '" + text + "' is not in " + Arrays.toString(getTags()));        }    }    guiEditor.setValue(text);}
1
private String fixGetAsTextBug(String asText)
{    if (asText == null) {        return null;    }    if (asText.equals("true")) {                        return "True";    }    if (asText.equals("false")) {                        return "False";    }    return asText;}
1
public String getAsText()
{    String text = fixGetAsTextBug(guiEditor.getAsText());    if (text == null) {        if (!acceptsNull) {            shouldNeverHappen("Text is null, but null is not allowed");        }    } else if (!acceptsExpressions || !isExpression(text)) {                try {                        typeEditor.setAsText(text);        } catch (IllegalArgumentException e) {            shouldNeverHappen(e);        }        text = fixGetAsTextBug(typeEditor.getAsText());                if (!acceptsOther && !isATag(text)) {            shouldNeverHappen("Text is not a tag, but other values are not allowed");        }    }        return text;}
1
public void setAsText(String text) throws IllegalArgumentException
{    if (log.isDebugEnabled()) {        if (text == null) {                    } else {                    }    }    String value;    if (text == null) {        if (!acceptsNull) {            throw new IllegalArgumentException("Null parameter not allowed");        }        value = null;    } else {        if (acceptsExpressions && isExpression(text)) {            value = text;        } else {                                                typeEditor.setAsText(text);            value = typeEditor.getAsText();            if (!acceptsOther && !isATag(text)) {                throw new IllegalArgumentException("Value not allowed: " + text);            }        }    }    guiEditor.setValue(value);}
1
public void propertyChange(PropertyChangeEvent event)
{    String text = fixGetAsTextBug(guiEditor.getAsText());    if (isValidValue(text)) {        lastValidValue = text;        firePropertyChange();    } else {        if (GuiPackage.getInstance() == null) {                    } else {            JOptionPane.showMessageDialog(guiEditor.getCustomEditor().getParent(),             JMeterUtils.getResString("property_editor.value_is_invalid_message"),             JMeterUtils.getResString("property_editor.value_is_invalid_title"), JOptionPane.WARNING_MESSAGE);        }                guiEditor.setAsText(lastValidValue);    }}
1
public void addChangeListener(PropertyChangeListener listener)
{    guiEditor.addPropertyChangeListener(listener);}
0
public BeanInfo[] getAdditionalBeanInfo()
{    return new BeanInfo[0];}
0
public BeanDescriptor getBeanDescriptor()
{    return null;}
0
public int getDefaultEventIndex()
{    return 0;}
0
public int getDefaultPropertyIndex()
{    return 0;}
0
public EventSetDescriptor[] getEventSetDescriptors()
{    return new EventSetDescriptor[0];}
0
public Image getIcon(int iconKind)
{    return null;}
0
public MethodDescriptor[] getMethodDescriptors()
{    return new MethodDescriptor[0];}
0
public PropertyDescriptor[] getPropertyDescriptors()
{    return new PropertyDescriptor[0];}
0
public static void prepare(TestElement el)
{    if (!(el instanceof TestBean)) {        return;    }    try {        BeanInfo beanInfo = Introspector.getBeanInfo(el.getClass());        PropertyDescriptor[] descs = beanInfo.getPropertyDescriptors();        if (log.isDebugEnabled()) {                    }        for (PropertyDescriptor desc : descs) {            if (isDescriptorIgnored(desc)) {                if (log.isDebugEnabled()) {                                    }                continue;            }                        JMeterProperty jprop = el.getProperty(desc.getName());            Class<?> type = desc.getPropertyType();            Object value = unwrapProperty(desc, jprop, type);            if (log.isDebugEnabled()) {                            }                        if (value != null || !type.isPrimitive())             {                Method writeMethod = desc.getWriteMethod();                if (writeMethod != null) {                    invokeOrBailOut(el, writeMethod, new Object[] { value });                }            }        }    } catch (IntrospectionException e) {            } catch (UnsatisfiedLinkError ule) {                        throw ule;    }}
1
private static Object unwrapProperty(PropertyDescriptor desc, JMeterProperty jprop, Class<?> type)
{    Object value;    if (jprop instanceof TestElementProperty) {        TestElement te = ((TestElementProperty) jprop).getElement();        if (te instanceof TestBean) {            prepare(te);        }        value = te;    } else if (jprop instanceof MultiProperty) {        value = unwrapCollection((MultiProperty) jprop, (String) desc.getValue(TableEditor.CLASSNAME));    } else     if (jprop instanceof NullProperty &&     !Boolean.TRUE.equals(desc.getValue(GenericTestBeanCustomizer.NOT_UNDEFINED))) {        value = null;    } else {        value = Converter.convert(jprop.getStringValue(), type);    }    return value;}
0
private static Object unwrapCollection(MultiProperty prop, String type)
{    if (prop instanceof CollectionProperty) {        Collection<Object> values = new LinkedList<>();        for (JMeterProperty jMeterProperty : prop) {            try {                values.add(unwrapProperty(null, jMeterProperty, Class.forName(type)));            } catch (Exception e) {                            }        }        return values;    }    return null;}
1
private static Object invokeOrBailOut(Object invokee, Method method, Object[] params)
{    try {        return method.invoke(invokee, params);    } catch (IllegalArgumentException | IllegalAccessException | InvocationTargetException e) {        throw new Error(createMessage(invokee, method, params), e);    }}
0
private static String createMessage(Object invokee, Method method, Object[] params)
{    StringBuilder sb = new StringBuilder();    sb.append("This should never happen. Tried to invoke:\n");    sb.append(invokee.getClass().getName());    sb.append("#");    sb.append(method.getName());    sb.append("(");    for (Object o : params) {        if (o != null) {            sb.append(o.getClass().getSimpleName());            sb.append(' ');        }        sb.append(o);        sb.append(' ');    }    sb.append(")");    return sb.toString();}
0
public static boolean isDescriptorIgnored(PropertyDescriptor descriptor)
{    return descriptor.isHidden() || (descriptor.isExpert() && !JMeterUtils.isExpertMode()) || descriptor.getReadMethod() == null || descriptor.getWriteMethod() == null;}
0
protected String getScopeName()
{    return SCOPE;}
0
protected String getScopeName()
{    return SCOPE;}
0
public String fetchScope()
{    return getPropertyAsString(getScopeName(), SCOPE_PARENT);}
0
public boolean isScopeParent(String scope)
{    return scope.equals(SCOPE_PARENT);}
0
public boolean isScopeChildren(String scope)
{    return scope.equals(SCOPE_CHILDREN);}
0
public boolean isScopeAll(String scope)
{    return scope.equals(SCOPE_ALL);}
0
public boolean isScopeVariable(String scope)
{    return scope.equals(SCOPE_VARIABLE);}
0
protected boolean isScopeVariable()
{    return isScopeVariable(fetchScope());}
0
public String getVariableName()
{    return getPropertyAsString(SCOPE_VARIABLE_NAME, "");}
0
public void setScopeParent()
{    removeProperty(getScopeName());}
0
public void setScopeChildren()
{    setProperty(getScopeName(), SCOPE_CHILDREN);}
0
public void setScopeAll()
{    setProperty(getScopeName(), SCOPE_ALL);}
0
public void setScopeVariable(String variableName)
{    setProperty(getScopeName(), SCOPE_VARIABLE);    setProperty(SCOPE_VARIABLE_NAME, variableName);}
0
protected List<SampleResult> getSampleList(SampleResult result)
{    List<SampleResult> sampleList = new ArrayList<>();    String scope = fetchScope();    if (isScopeParent(scope) || isScopeAll(scope)) {        sampleList.add(result);    }    if (isScopeChildren(scope) || isScopeAll(scope)) {        Collections.addAll(sampleList, result.getSubResults());    }    return sampleList;}
0
public Object clone()
{    try {        TestElement clonedElement = this.getClass().getDeclaredConstructor().newInstance();        PropertyIterator iter = propertyIterator();        while (iter.hasNext()) {            clonedElement.setProperty(iter.next().clone());        }        clonedElement.setRunningVersion(runningVersion);        return clonedElement;    } catch (IllegalArgumentException | ReflectiveOperationException | SecurityException e) {                throw new AssertionError(e);    }}
0
public void clear()
{    propMap.clear();}
0
public void clearTestElementChildren()
{}
0
public void removeProperty(String key)
{    propMap.remove(key);}
0
public boolean equals(Object o)
{    if (o instanceof AbstractTestElement) {        return ((AbstractTestElement) o).propMap.equals(propMap);    } else {        return false;    }}
0
public int hashCode()
{    return System.identityHashCode(this);}
0
public void addTestElement(TestElement el)
{    mergeIn(el);}
0
public void setName(String name)
{    setProperty(TestElement.NAME, name);}
0
public String getName()
{    return getPropertyAsString(TestElement.NAME);}
0
public void setComment(String comment)
{    setProperty(new StringProperty(TestElement.COMMENTS, comment));}
0
public String getComment()
{    return getProperty(TestElement.COMMENTS).getStringValue();}
0
public JMeterProperty getProperty(String key)
{    JMeterProperty prop = propMap.get(key);    if (prop == null) {        prop = new NullProperty(key);    }    return prop;}
0
private JMeterProperty getRawProperty(String key)
{    return propMap.get(key);}
0
public void traverse(TestElementTraverser traverser)
{    PropertyIterator iter = propertyIterator();    traverser.startTestElement(this);    while (iter.hasNext()) {        traverseProperty(traverser, iter.next());    }    traverser.endTestElement(this);}
0
protected void traverseProperty(TestElementTraverser traverser, JMeterProperty value)
{    traverser.startProperty(value);    if (value instanceof TestElementProperty) {        ((TestElement) value.getObjectValue()).traverse(traverser);    } else if (value instanceof CollectionProperty) {        traverseCollection((CollectionProperty) value, traverser);    } else if (value instanceof MapProperty) {        traverseMap((MapProperty) value, traverser);    }    traverser.endProperty(value);}
0
protected void traverseMap(MapProperty map, TestElementTraverser traverser)
{    PropertyIterator iter = map.valueIterator();    while (iter.hasNext()) {        traverseProperty(traverser, iter.next());    }}
0
protected void traverseCollection(CollectionProperty col, TestElementTraverser traverser)
{    for (JMeterProperty jMeterProperty : col) {        traverseProperty(traverser, jMeterProperty);    }}
0
public int getPropertyAsInt(String key)
{    return getProperty(key).getIntValue();}
0
public int getPropertyAsInt(String key, int defaultValue)
{    JMeterProperty jmp = getRawProperty(key);    return jmp == null || jmp instanceof NullProperty ? defaultValue : jmp.getIntValue();}
0
public boolean getPropertyAsBoolean(String key)
{    return getProperty(key).getBooleanValue();}
0
public boolean getPropertyAsBoolean(String key, boolean defaultVal)
{    JMeterProperty jmp = getRawProperty(key);    return jmp == null || jmp instanceof NullProperty ? defaultVal : jmp.getBooleanValue();}
0
public float getPropertyAsFloat(String key)
{    return getProperty(key).getFloatValue();}
0
public long getPropertyAsLong(String key)
{    return getProperty(key).getLongValue();}
0
public long getPropertyAsLong(String key, long defaultValue)
{    JMeterProperty jmp = getRawProperty(key);    return jmp == null || jmp instanceof NullProperty ? defaultValue : jmp.getLongValue();}
0
public double getPropertyAsDouble(String key)
{    return getProperty(key).getDoubleValue();}
0
public String getPropertyAsString(String key)
{    return getProperty(key).getStringValue();}
0
public String getPropertyAsString(String key, String defaultValue)
{    JMeterProperty jmp = getRawProperty(key);    return jmp == null || jmp instanceof NullProperty ? defaultValue : jmp.getStringValue();}
0
protected void addProperty(JMeterProperty property, boolean clone)
{    JMeterProperty propertyToPut = property;    if (clone) {        propertyToPut = property.clone();    }    if (isRunningVersion()) {        setTemporary(propertyToPut);    } else {        clearTemporary(property);    }    JMeterProperty prop = getProperty(property.getName());    if (prop instanceof NullProperty || (prop instanceof StringProperty && prop.getStringValue().isEmpty())) {        propMap.put(property.getName(), propertyToPut);    } else {        prop.mergeIn(propertyToPut);    }}
0
protected void addProperty(JMeterProperty property)
{    addProperty(property, false);}
0
protected void clearTemporary(JMeterProperty property)
{    if (temporaryProperties != null) {        temporaryProperties.remove(property);    }}
0
protected void logProperties()
{    if (log.isDebugEnabled()) {        PropertyIterator iter = propertyIterator();        while (iter.hasNext()) {            JMeterProperty prop = iter.next();                    }    }}
1
public void setProperty(JMeterProperty property)
{    if (isRunningVersion()) {        if (getProperty(property.getName()) instanceof NullProperty) {            addProperty(property);        } else {            getProperty(property.getName()).setObjectValue(property.getObjectValue());        }    } else {        propMap.put(property.getName(), property);    }}
0
public void setProperty(String name, String value)
{    setProperty(new StringProperty(name, value));}
0
public void setProperty(String name, String value, String dflt)
{    if (dflt.equals(value)) {        removeProperty(name);    } else {        setProperty(new StringProperty(name, value));    }}
0
public void setProperty(String name, boolean value)
{    setProperty(new BooleanProperty(name, value));}
0
public void setProperty(String name, boolean value, boolean dflt)
{    if (value == dflt) {        removeProperty(name);    } else {        setProperty(new BooleanProperty(name, value));    }}
0
public void setProperty(String name, int value)
{    setProperty(new IntegerProperty(name, value));}
0
public void setProperty(String name, int value, int dflt)
{    if (value == dflt) {        removeProperty(name);    } else {        setProperty(new IntegerProperty(name, value));    }}
0
public void setProperty(String name, long value)
{    setProperty(new LongProperty(name, value));}
0
public void setProperty(String name, long value, long dflt)
{    if (value == dflt) {        removeProperty(name);    } else {        setProperty(new LongProperty(name, value));    }}
0
public PropertyIterator propertyIterator()
{    return new PropertyIteratorImpl(propMap.values());}
0
protected void mergeIn(TestElement element)
{    PropertyIterator iter = element.propertyIterator();    while (iter.hasNext()) {        JMeterProperty prop = iter.next();        addProperty(prop, false);    }}
0
public boolean isRunningVersion()
{    return runningVersion;}
0
public void setRunningVersion(boolean runningVersion)
{    this.runningVersion = runningVersion;    PropertyIterator iter = propertyIterator();    while (iter.hasNext()) {        iter.next().setRunningVersion(runningVersion);    }}
0
public void recoverRunningVersion()
{    Iterator<Map.Entry<String, JMeterProperty>> iter = propMap.entrySet().iterator();    while (iter.hasNext()) {        Map.Entry<String, JMeterProperty> entry = iter.next();        JMeterProperty prop = entry.getValue();        if (isTemporary(prop)) {            iter.remove();            clearTemporary(prop);        } else {            prop.recoverRunningVersion(this);        }    }    emptyTemporary();}
0
protected void emptyTemporary()
{    if (temporaryProperties != null) {        temporaryProperties.clear();    }}
0
public boolean isTemporary(JMeterProperty property)
{    if (temporaryProperties == null) {        return false;    } else {        return temporaryProperties.contains(property);    }}
0
public void setTemporary(JMeterProperty property)
{    if (temporaryProperties == null) {        temporaryProperties = new LinkedHashSet<>();    }    temporaryProperties.add(property);    if (property instanceof MultiProperty) {        for (JMeterProperty jMeterProperty : (MultiProperty) property) {            setTemporary(jMeterProperty);        }    }}
0
public JMeterContext getThreadContext()
{    if (threadContext == null) {        /*             * Only samplers have the thread context set up by JMeterThread at             * present, so suppress the warning for now             */        threadContext = JMeterContextService.getContext();    }    return threadContext;}
0
public void setThreadContext(JMeterContext inthreadContext)
{    if (threadContext != null) {        if (inthreadContext != threadContext) {            throw new RuntimeException("Attempting to reset the thread context");        }    }    this.threadContext = inthreadContext;}
0
public String getThreadName()
{    return threadName;}
0
public void setThreadName(String inthreadName)
{    if (threadName != null) {        if (!threadName.equals(inthreadName)) {            throw new RuntimeException("Attempting to reset the thread name");        }    }    this.threadName = inthreadName;}
0
public boolean canRemove()
{    return true;}
0
public boolean isEnabled()
{    return getProperty(TestElement.ENABLED) instanceof NullProperty || getPropertyAsBoolean(TestElement.ENABLED);}
0
public void setEnabled(boolean enabled)
{    setProperty(new BooleanProperty(TestElement.ENABLED, enabled));}
0
public List<String> getSearchableTokens()
{    List<String> result = new ArrayList<>(25);    PropertyIterator iterator = propertyIterator();    while (iterator.hasNext()) {        JMeterProperty jMeterProperty = iterator.next();        result.add(jMeterProperty.getName());        result.add(jMeterProperty.getStringValue());    }    return result;}
0
protected final void addPropertiesValues(List<String> result, Set<String> propertyNames)
{    PropertyIterator iterator = propertyIterator();    while (iterator.hasNext()) {        JMeterProperty jMeterProperty = iterator.next();        if (propertyNames.contains(jMeterProperty.getName())) {            result.add(jMeterProperty.getStringValue());        }    }}
0
public BeanInfo[] getAdditionalBeanInfo()
{    return new BeanInfo[0];}
0
public BeanDescriptor getBeanDescriptor()
{    return null;}
0
public int getDefaultEventIndex()
{    return 0;}
0
public int getDefaultPropertyIndex()
{    return 0;}
0
public EventSetDescriptor[] getEventSetDescriptors()
{    return new EventSetDescriptor[0];}
0
public Image getIcon(int iconKind)
{    return null;}
0
public MethodDescriptor[] getMethodDescriptors()
{    return new MethodDescriptor[0];}
0
public PropertyDescriptor[] getPropertyDescriptors()
{    return new PropertyDescriptor[0];}
0
public void setErrorAction(int value)
{    setProperty(new IntegerProperty(ON_ERROR_ACTION, value));}
0
public int getErrorAction()
{    return getPropertyAsInt(ON_ERROR_ACTION);}
0
public boolean isContinue()
{    return getErrorAction() == ON_ERROR_CONTINUE;}
0
public boolean isStopThread()
{    return getErrorAction() == ON_ERROR_STOPTHREAD;}
0
public boolean isStopTest()
{    return getErrorAction() == ON_ERROR_STOPTEST;}
0
public boolean isStopTestNow()
{    return getErrorAction() == ON_ERROR_STOPTEST_NOW;}
0
public boolean isStartNextThreadLoop()
{    return getErrorAction() == ON_ERROR_START_NEXT_THREAD_LOOP;}
0
public boolean isStartNextIterationOfCurrentLoop()
{    return getErrorAction() == ON_ERROR_START_NEXT_ITERATION_OF_CURRENT_LOOP;}
0
public boolean isBreakCurrentLoop()
{    return getErrorAction() == ON_ERROR_BREAK_CURRENT_LOOP;}
0
protected boolean isEqualType(JMeterProperty prop)
{    return this.getClass().equals(prop.getClass());}
0
public boolean isRunningVersion()
{    return runningVersion;}
0
public String getName()
{    return name;}
0
public void setName(String name)
{    if (name == null) {        throw new IllegalArgumentException("Name cannot be null");    }    this.name = name;}
0
public void setRunningVersion(boolean runningVersion)
{    this.runningVersion = runningVersion;}
0
protected PropertyIterator getIterator(Collection<JMeterProperty> values)
{    return new PropertyIteratorImpl(values);}
0
public AbstractProperty clone()
{    try {        AbstractProperty prop = (AbstractProperty) super.clone();        prop.name = name;        prop.runningVersion = runningVersion;        return prop;    } catch (CloneNotSupportedException e) {                throw new AssertionError(e);    }}
0
public int getIntValue()
{    String val = getStringValue();    if (val == null || val.length() == 0) {        return 0;    }    try {        return Integer.parseInt(val);    } catch (NumberFormatException e) {        return 0;    }}
0
public long getLongValue()
{    String val = getStringValue();    if (val == null || val.length() == 0) {        return 0;    }    try {        return Long.parseLong(val);    } catch (NumberFormatException e) {        return 0;    }}
0
public double getDoubleValue()
{    String val = getStringValue();    if (val == null || val.length() == 0) {        return 0;    }    try {        return Double.parseDouble(val);    } catch (NumberFormatException e) {                return 0;    }}
1
public float getFloatValue()
{    String val = getStringValue();    if (val == null || val.length() == 0) {        return 0;    }    try {        return Float.parseFloat(val);    } catch (NumberFormatException e) {                return 0;    }}
1
public boolean getBooleanValue()
{    String val = getStringValue();    if (val == null || val.length() == 0) {        return false;    }    return Boolean.parseBoolean(val);}
0
public boolean equals(Object o)
{    if (!(o instanceof JMeterProperty)) {        return false;    }    if (this == o) {        return true;    }    JMeterProperty jpo = (JMeterProperty) o;    if (!name.equals(jpo.getName())) {        return false;    }    Object o1 = getObjectValue();    Object o2 = jpo.getObjectValue();    return o1 == null ? o2 == null : o1.equals(o2);}
0
public int hashCode()
{    int result = 17;        result = result * 37 + name.hashCode();    Object o = getObjectValue();    result = result * 37 + (o == null ? 0 : o.hashCode());    return result;}
0
public int compareTo(JMeterProperty arg0)
{                    String val = getStringValue();    String val2 = arg0.getStringValue();    if (val == null) {                if (val2 == null) {                        return 0;        } else {            return -1;        }    }    return val.compareTo(val2);}
1
protected Class<? extends JMeterProperty> getPropertyType()
{    return getClass();}
0
protected JMeterProperty getBlankProperty()
{    try {        JMeterProperty prop = getPropertyType().getDeclaredConstructor().newInstance();        if (prop instanceof NullProperty) {            return new StringProperty();        }        return prop;    } catch (Exception e) {        return new StringProperty();    }}
0
protected static JMeterProperty getBlankProperty(Object item)
{    if (item == null) {        return new NullProperty();    }    if (item instanceof String) {        return new StringProperty("", item.toString());    } else if (item instanceof Boolean) {        return new BooleanProperty("", ((Boolean) item).booleanValue());    } else if (item instanceof Float) {        return new FloatProperty("", ((Float) item).floatValue());    } else if (item instanceof Double) {        return new DoubleProperty("", ((Double) item).doubleValue());    } else if (item instanceof Integer) {        return new IntegerProperty("", ((Integer) item).intValue());    } else if (item instanceof Long) {        return new LongProperty("", ((Long) item).longValue());    } else {        return new StringProperty("", item.toString());    }}
0
protected Collection<JMeterProperty> normalizeList(Collection<?> coll)
{    try {                @SuppressWarnings("unchecked")        Collection<JMeterProperty> newColl = coll.getClass().getDeclaredConstructor().newInstance();        for (Object item : coll) {            newColl.add(convertObject(item));        }        return newColl;    } catch (Exception e) {                        return null;    }}
1
protected Map<String, JMeterProperty> normalizeMap(Map<?, ?> coll)
{    try {                @SuppressWarnings("unchecked")        Map<String, JMeterProperty> newColl = coll.getClass().getDeclaredConstructor().newInstance();        for (Map.Entry<?, ?> entry : coll.entrySet()) {            Object key = entry.getKey();            Object prop = entry.getValue();            String item = null;            if (key instanceof String) {                item = (String) key;            } else {                if (key != null) {                                        item = key.toString();                }            }            newColl.put(item, convertObject(prop));        }        return newColl;    } catch (Exception e) {                        return null;    }}
1
public static JMeterProperty createProperty(Object item)
{    JMeterProperty prop = makeProperty(item);    if (prop == null) {        prop = getBlankProperty(item);    }    return prop;}
0
protected static JMeterProperty makeProperty(Object item)
{    if (item instanceof JMeterProperty) {        return (JMeterProperty) item;    }    if (item instanceof TestElement) {        return new TestElementProperty(((TestElement) item).getName(), (TestElement) item);    }    if (item instanceof Collection<?>) {        return new CollectionProperty(Integer.toString(item.hashCode()), (Collection<?>) item);    }    if (item instanceof Map<?, ?>) {        return new MapProperty(Integer.toString(item.hashCode()), (Map<?, ?>) item);    }    return null;}
0
protected JMeterProperty convertObject(Object item)
{    JMeterProperty prop = makeProperty(item);    if (prop == null) {        prop = getBlankProperty();        prop.setName(Integer.toString(item.hashCode()));        prop.setObjectValue(item);    }    return prop;}
0
public String toString()
{        return getStringValue();}
0
public void mergeIn(JMeterProperty prop)
{}
0
public void setObjectValue(Object v)
{    if (v instanceof Boolean) {        value = ((Boolean) v).booleanValue();    } else {        value = Boolean.parseBoolean(v.toString());    }}
0
public String getStringValue()
{    return Boolean.toString(value);}
0
public Object getObjectValue()
{    return Boolean.valueOf(value);}
0
public BooleanProperty clone()
{    BooleanProperty prop = (BooleanProperty) super.clone();    prop.value = value;    return prop;}
0
public boolean getBooleanValue()
{    return value;}
0
public void setRunningVersion(boolean runningVersion)
{    savedValue = value;    super.setRunningVersion(runningVersion);}
0
public void recoverRunningVersion(TestElement owner)
{    value = savedValue;}
0
public boolean equals(Object o)
{    if (o instanceof CollectionProperty && value != null) {        return value.equals(((JMeterProperty) o).getObjectValue());    }    return false;}
0
public int hashCode()
{    return value == null ? 0 : value.hashCode();}
0
public void remove(String prop)
{    PropertyIterator iter = iterator();    while (iter.hasNext()) {        if (iter.next().getName().equals(prop)) {            iter.remove();        }    }}
0
public void set(int index, String prop)
{    if (value instanceof List<?>) {        ((List<JMeterProperty>) value).set(index, new StringProperty(prop, prop));    }}
0
public void set(int index, JMeterProperty prop)
{    if (value instanceof List<?>) {        ((List<JMeterProperty>) value).set(index, prop);    }}
0
public JMeterProperty get(int row)
{    if (value instanceof List<?>) {        return ((List<JMeterProperty>) value).get(row);    }    return null;}
0
public void remove(int index)
{    if (value instanceof List<?>) {        ((List<?>) value).remove(index);    }}
0
public void setObjectValue(Object v)
{    if (v instanceof Collection<?>) {        setCollection((Collection<?>) v);    }}
0
public PropertyIterator iterator()
{    return getIterator(value);}
0
public String getStringValue()
{    return value.toString();}
0
public Object getObjectValue()
{    return value;}
0
public int size()
{    return value.size();}
0
public boolean isEmpty()
{    return value.isEmpty();}
0
public CollectionProperty clone()
{    CollectionProperty prop = (CollectionProperty) super.clone();    prop.value = cloneCollection();    return prop;}
0
private Collection<JMeterProperty> cloneCollection()
{    try {                @SuppressWarnings("unchecked")        Collection<JMeterProperty> newCol = value.getClass().getDeclaredConstructor().newInstance();        for (JMeterProperty jMeterProperty : this) {            newCol.add(jMeterProperty.clone());        }        return newCol;    } catch (Exception e) {                return value;    }}
1
public void setCollection(Collection<?> coll)
{    value = normalizeList(coll);}
0
public void clear()
{    value.clear();}
0
public void addProperty(JMeterProperty prop)
{    value.add(prop);}
0
public void addItem(Object item)
{    addProperty(convertObject(item));}
0
protected Class<? extends JMeterProperty> getPropertyType()
{    if (value != null && !value.isEmpty()) {        return value.iterator().next().getClass();    }    return NullProperty.class;}
0
public void recoverRunningVersion(TestElement owner)
{    if (savedValue != null) {        value = savedValue;    }    recoverRunningVersionOfSubElements(owner);}
0
public void setRunningVersion(boolean running)
{    super.setRunningVersion(running);    if (running) {        savedValue = value;    } else {        savedValue = null;    }}
0
public void setValue(float value)
{    this.value = value;}
0
protected void setNumberValue(Number n)
{    value = n.doubleValue();}
0
protected void setNumberValue(String n) throws NumberFormatException
{    value = Double.parseDouble(n);}
0
public String getStringValue()
{    return Double.toString(value);}
0
public Object getObjectValue()
{    return Double.valueOf(value);}
0
public DoubleProperty clone()
{    DoubleProperty prop = (DoubleProperty) super.clone();    prop.value = value;    return prop;}
0
public boolean getBooleanValue()
{    return value > 0;}
0
public double getDoubleValue()
{    return value;}
0
public float getFloatValue()
{    return (float) value;}
0
public int getIntValue()
{    return (int) value;}
0
public long getLongValue()
{    return (long) value;}
0
public void setRunningVersion(boolean runningVersion)
{    savedValue = value;    super.setRunningVersion(runningVersion);}
0
public void recoverRunningVersion(TestElement owner)
{    value = savedValue;}
0
public void setRunningVersion(boolean runningVersion)
{    savedValue = value;    super.setRunningVersion(runningVersion);}
0
public void recoverRunningVersion(TestElement owner)
{    value = savedValue;}
0
public void setValue(float value)
{    this.value = value;}
0
protected void setNumberValue(Number n)
{    value = n.floatValue();}
0
protected void setNumberValue(String n) throws NumberFormatException
{    value = Float.parseFloat(n);}
0
public String getStringValue()
{    return Float.toString(value);}
0
public Object getObjectValue()
{    return Float.valueOf(value);}
0
public FloatProperty clone()
{    FloatProperty prop = (FloatProperty) super.clone();    prop.value = value;    return prop;}
0
public boolean getBooleanValue()
{    return value > 0;}
0
public double getDoubleValue()
{    return value;}
0
public float getFloatValue()
{    return value;}
0
public int getIntValue()
{    return (int) value;}
0
public long getLongValue()
{    return (long) value;}
0
public void setObjectValue(Object v)
{    if (v instanceof CompoundVariable && !isRunningVersion()) {        function = (CompoundVariable) v;    } else {        cacheValue = v.toString();    }}
0
public boolean equals(Object o)
{    if (o instanceof FunctionProperty) {        if (function != null) {            return function.equals(((JMeterProperty) o).getObjectValue());        }    }    return false;}
0
public int hashCode()
{    int hash = super.hashCode();    if (function != null) {        hash = hash * 37 + function.hashCode();    }    return hash;}
0
public String getStringValue()
{        JMeterContext ctx = JMeterContextService.getContext();        if (!isRunningVersion()) /*|| !ctx.isSamplingStarted()*/    {                return function.getRawParameters();    }    if (!ctx.isSamplingStarted()) {        return function.execute();    }        int iter = ctx.getVariables() != null ? ctx.getVariables().getIteration() : -1;    if (iter < testIteration) {        testIteration = -1;    }    if (iter > testIteration || cacheValue == null) {        testIteration = iter;        cacheValue = function.execute();    }    return cacheValue;}
1
public Object getObjectValue()
{    return function;}
0
public FunctionProperty clone()
{    FunctionProperty prop = (FunctionProperty) super.clone();    prop.cacheValue = cacheValue;    prop.testIteration = testIteration;    prop.function = function;    return prop;}
0
public void recoverRunningVersion(TestElement owner)
{    cacheValue = null;}
0
public void setRunningVersion(boolean runningVersion)
{    savedValue = value;    super.setRunningVersion(runningVersion);}
0
public void recoverRunningVersion(TestElement owner)
{    value = savedValue;}
0
public void setValue(int value)
{    this.value = value;}
0
protected void setNumberValue(Number n)
{    value = n.intValue();}
0
protected void setNumberValue(String n) throws NumberFormatException
{    value = Integer.parseInt(n);}
0
public String getStringValue()
{    return Integer.toString(value);}
0
public Object getObjectValue()
{    return Integer.valueOf(value);}
0
public IntegerProperty clone()
{    IntegerProperty prop = (IntegerProperty) super.clone();    prop.value = value;    return prop;}
0
public boolean getBooleanValue()
{    return getIntValue() > 0;}
0
public double getDoubleValue()
{    return value;}
0
public float getFloatValue()
{    return value;}
0
public int getIntValue()
{    return value;}
0
public long getLongValue()
{    return value;}
0
public void setRunningVersion(boolean runningVersion)
{    savedValue = value;    super.setRunningVersion(runningVersion);}
0
public void recoverRunningVersion(TestElement owner)
{    value = savedValue;}
0
public void setValue(int value)
{    this.value = value;}
0
protected void setNumberValue(Number n)
{    value = n.longValue();}
0
protected void setNumberValue(String n) throws NumberFormatException
{    value = Long.parseLong(n);}
0
public String getStringValue()
{    return Long.toString(value);}
0
public Object getObjectValue()
{    return Long.valueOf(value);}
0
public LongProperty clone()
{    LongProperty prop = (LongProperty) super.clone();    prop.value = value;    return prop;}
0
public boolean getBooleanValue()
{    return getLongValue() > 0;}
0
public double getDoubleValue()
{    return value;}
0
public float getFloatValue()
{    return value;}
0
public int getIntValue()
{    return (int) value;}
0
public long getLongValue()
{    return value;}
0
public boolean equals(Object o)
{    if (o instanceof MapProperty) {        if (value != null) {            return value.equals(((JMeterProperty) o).getObjectValue());        }    }    return false;}
0
public int hashCode()
{    int hash = super.hashCode();    if (value != null) {        hash = hash * 37 + value.hashCode();    }    return hash;}
0
public void setObjectValue(Object v)
{    if (v instanceof Map<?, ?>) {        setMap((Map<?, ?>) v);    }}
0
public void addProperty(JMeterProperty prop)
{    addProperty(prop.getName(), prop);}
0
public JMeterProperty get(String key)
{    return value.get(key);}
0
protected Class<? extends JMeterProperty> getPropertyType()
{    if (!value.isEmpty()) {        return valueIterator().next().getClass();    }    return NullProperty.class;}
0
public String getStringValue()
{    return value.toString();}
0
public Object getObjectValue()
{    return value;}
0
public MapProperty clone()
{    MapProperty prop = (MapProperty) super.clone();    prop.value = cloneMap();    return prop;}
0
private Map<String, JMeterProperty> cloneMap()
{    try {                @SuppressWarnings("unchecked")        Map<String, JMeterProperty> newCol = value.getClass().getDeclaredConstructor().newInstance();        PropertyIterator iter = valueIterator();        while (iter.hasNext()) {            JMeterProperty item = iter.next();            newCol.put(item.getName(), item.clone());        }        return newCol;    } catch (Exception e) {                return value;    }}
1
public PropertyIterator valueIterator()
{    return getIterator(value.values());}
0
public void addProperty(String name, JMeterProperty prop)
{    if (!value.containsKey(name)) {        value.put(name, prop);    }}
0
public void setMap(Map<?, ?> newMap)
{    value = normalizeMap(newMap);}
0
public void recoverRunningVersion(TestElement owner)
{    if (savedValue != null) {        value = savedValue;    }    recoverRunningVersionOfSubElements(owner);}
0
public void clear()
{    value.clear();}
0
public PropertyIterator iterator()
{    return valueIterator();}
0
public void setRunningVersion(boolean running)
{    super.setRunningVersion(running);    if (running) {        savedValue = value;    } else {        savedValue = null;    }}
0
public void setRunningVersion(boolean running)
{    super.setRunningVersion(running);    for (JMeterProperty jMeterProperty : this) {        jMeterProperty.setRunningVersion(running);    }}
0
protected void recoverRunningVersionOfSubElements(TestElement owner)
{    PropertyIterator iter = iterator();    while (iter.hasNext()) {        JMeterProperty prop = iter.next();        if (owner.isTemporary(prop)) {            iter.remove();        } else {            prop.recoverRunningVersion(owner);        }    }}
0
public void mergeIn(JMeterProperty prop)
{    if (prop.getObjectValue() == getObjectValue()) {        return;    }        if (prop instanceof MultiProperty) {        for (JMeterProperty item : (MultiProperty) prop) {            addProperty(item);        }    } else {        addProperty(prop);    }}
1
public String getStringValue()
{    if (tempValue != null) {        return tempValue.getStringValue();    }    return "";}
0
public void setObjectValue(Object v)
{}
0
public Object getObjectValue()
{    return null;}
0
public boolean isRunningVersion()
{    return false;}
0
public void mergeIn(JMeterProperty prop)
{    tempValue = prop;}
0
public NullProperty clone()
{    return this;}
0
public boolean getBooleanValue()
{    return false;}
0
public double getDoubleValue()
{    return 0;}
0
public float getFloatValue()
{    return 0;}
0
public int getIntValue()
{    return 0;}
0
public long getLongValue()
{    return 0;}
0
public void recoverRunningVersion(TestElement owner)
{    tempValue = null;}
0
public void setObjectValue(Object v)
{    if (v instanceof Number) {        setNumberValue((Number) v);    } else {        try {            setNumberValue(v.toString());        } catch (RuntimeException ignored) {        }    }}
0
public int compareTo(JMeterProperty arg0)
{    return Double.compare(getDoubleValue(), arg0.getDoubleValue());}
0
public void recoverRunningVersion(TestElement owner)
{    if (savedValue != null) {        value = savedValue;    }}
0
public void setRunningVersion(boolean runningVersion)
{    super.setRunningVersion(runningVersion);    if (runningVersion) {        savedValue = value;    } else {        savedValue = null;    }}
0
public ObjectProperty clone()
{    ObjectProperty p = (ObjectProperty) super.clone();    p.value = value;    return p;}
0
public String getStringValue()
{    return Objects.toString(value, null);}
0
public Object getObjectValue()
{    return value;}
0
public void setObjectValue(Object value)
{    this.value = value;}
0
public boolean hasNext()
{    return iter.hasNext();}
0
public JMeterProperty next()
{    return iter.next();}
0
public void remove()
{    iter.remove();}
0
public void setRunningVersion(boolean runningVersion)
{    super.setRunningVersion(runningVersion);    if (runningVersion) {        savedValue = value;    } else {        savedValue = null;    }}
0
public void setObjectValue(Object v)
{    value = v.toString();}
0
public String getStringValue()
{    return value;}
0
public Object getObjectValue()
{    return value;}
0
public StringProperty clone()
{    StringProperty prop = (StringProperty) super.clone();    prop.value = value;    return prop;}
0
public void setValue(String value)
{    this.value = value;}
0
public void recoverRunningVersion(TestElement owner)
{    if (savedValue != null) {        value = savedValue;    }}
0
public boolean equals(Object o)
{    if (o instanceof TestElementProperty) {        if (this == o) {            return true;        }        if (value != null) {            return value.equals(((JMeterProperty) o).getObjectValue());        }    }    return false;}
0
public int hashCode()
{    return value == null ? 0 : value.hashCode();}
0
public String getStringValue()
{    return value.toString();}
0
public void setObjectValue(Object v)
{    if (v instanceof TestElement) {        value = (TestElement) v;    }}
0
public Object getObjectValue()
{    return value;}
0
public TestElement getElement()
{    return value;}
0
public void setElement(TestElement el)
{    value = el;}
0
public TestElementProperty clone()
{    TestElementProperty prop = (TestElementProperty) super.clone();    prop.value = (TestElement) value.clone();    return prop;}
0
public void mergeIn(JMeterProperty prop)
{    if (isEqualType(prop)) {        value.addTestElement((TestElement) prop.getObjectValue());    }}
0
public void recoverRunningVersion(TestElement owner)
{    if (savedValue != null) {        value = savedValue;    }    value.recoverRunningVersion();}
0
public void setRunningVersion(boolean runningVersion)
{    super.setRunningVersion(runningVersion);    value.setRunningVersion(runningVersion);    if (runningVersion) {        savedValue = value;    } else {        savedValue = null;    }}
0
public void addProperty(JMeterProperty prop)
{    value.setProperty(prop);}
0
public void clear()
{    value.clear();}
0
public PropertyIterator iterator()
{    return value.propertyIterator();}
0
 void removed()
{}
0
protected Object readResolve()
{    threadGroups = new LinkedList<>();    return this;}
0
public void prepareForPreCompile()
{    getVariables().setRunningVersion(true);}
0
public boolean isFunctionalMode()
{    return getPropertyAsBoolean(FUNCTIONAL_MODE);}
0
public void setUserDefinedVariables(Arguments vars)
{    setProperty(new TestElementProperty(USER_DEFINED_VARIABLES, vars));}
0
public JMeterProperty getUserDefinedVariablesAsProperty()
{    return getProperty(USER_DEFINED_VARIABLES);}
0
public String getBasedir()
{    return getPropertyAsString(BASEDIR);}
0
public void setBasedir(String b)
{    setProperty(BASEDIR, b);}
0
public Arguments getArguments()
{    return getVariables();}
0
public Map<String, String> getUserDefinedVariables()
{    Arguments args = getVariables();    return args.getArgumentsAsMap();}
0
private Arguments getVariables()
{    Arguments args = (Arguments) getProperty(USER_DEFINED_VARIABLES).getObjectValue();    if (args == null) {        args = new Arguments();        setUserDefinedVariables(args);    }    return args;}
0
public void setFunctionalMode(boolean funcMode)
{    setProperty(new BooleanProperty(FUNCTIONAL_MODE, funcMode));    setGlobalFunctionalMode(funcMode);}
0
private static void setGlobalFunctionalMode(boolean funcMode)
{    functionalMode = funcMode;}
0
public static boolean getFunctionalMode()
{    return functionalMode;}
0
public void setSerialized(boolean serializeTGs)
{    setProperty(new BooleanProperty(SERIALIZE_THREADGROUPS, serializeTGs));}
0
public void setTearDownOnShutdown(boolean tearDown)
{    setProperty(TEARDOWN_ON_SHUTDOWN, tearDown, false);}
0
public boolean isTearDownOnShutdown()
{    return getPropertyAsBoolean(TEARDOWN_ON_SHUTDOWN, false);}
0
public void setTestPlanClasspath(String text)
{    setProperty(CLASSPATHS, text);}
0
public void setTestPlanClasspathArray(String[] text)
{    StringBuilder cat = new StringBuilder();    for (int idx = 0; idx < text.length; idx++) {        if (idx > 0) {            cat.append(CLASSPATH_SEPARATOR);        }        cat.append(text[idx]);    }    this.setTestPlanClasspath(cat.toString());}
0
public String[] getTestPlanClasspathArray()
{    return JOrphanUtils.split(this.getTestPlanClasspath(), CLASSPATH_SEPARATOR);}
0
public String getTestPlanClasspath()
{    return getPropertyAsString(CLASSPATHS);}
0
public boolean isSerialized()
{    return getPropertyAsBoolean(SERIALIZE_THREADGROUPS);}
0
public void addParameter(String name, String value)
{    getVariables().addArgument(name, value);}
0
public void addTestElement(TestElement tg)
{    super.addTestElement(tg);    if (tg instanceof AbstractThreadGroup && !isRunningVersion()) {        addThreadGroup((AbstractThreadGroup) tg);    }}
0
public void addThreadGroup(AbstractThreadGroup group)
{    threadGroups.add(group);}
0
public void testEnded()
{    try {        FileServer.getFileServer().closeFiles();    } catch (IOException e) {            }}
1
public void testEnded(String host)
{    testEnded();}
0
public void testStarted()
{    if (getBasedir() != null && getBasedir().length() > 0) {        try {            FileServer.getFileServer().setBasedir(FileServer.getFileServer().getBaseDir() + getBasedir());        } catch (IllegalStateException e) {                    }    }        String[] paths = this.getTestPlanClasspathArray();    for (String path : paths) {        try {            NewDriver.addURL(path);                    } catch (MalformedURLException e) {                                }    }}
1
public void testStarted(String host)
{    testStarted();}
0
public void addJMeterVariables(JMeterVariables jmVars)
{    varMap.put(Thread.currentThread().getName(), jmVars);}
0
public JMeterVariables getVariables()
{    return varMap.get(Thread.currentThread().getName());}
0
public boolean getSaveWorkBench()
{    return getPropertyAsBoolean(SAVE_WORKBENCH, SAVE_WORKBENCH_DEFAULT);}
0
public void setSaveWorkBench(boolean saveWorkBench)
{    setProperty(SAVE_WORKBENCH, saveWorkBench, SAVE_WORKBENCH_DEFAULT);}
0
public boolean isDone()
{    return getSamplerController().isDone();}
0
public Sampler next()
{    return getSamplerController().next();}
0
public Controller getSamplerController()
{    return (Controller) getProperty(MAIN_CONTROLLER).getObjectValue();}
0
public void setSamplerController(LoopController c)
{    c.setContinueForever(false);    setProperty(new TestElementProperty(MAIN_CONTROLLER, c));}
0
public void addTestElement(TestElement child)
{    getSamplerController().addTestElement(child);}
0
public final boolean addTestElementOnce(TestElement child)
{    if (children.putIfAbsent(child, DUMMY) == null) {        addTestElement(child);        return true;    }    return false;}
0
public void addIterationListener(LoopIterationListener lis)
{    getSamplerController().addIterationListener(lis);}
0
public void removeIterationListener(LoopIterationListener iterationListener)
{    getSamplerController().removeIterationListener(iterationListener);}
0
public void initialize()
{    Controller c = getSamplerController();    JMeterProperty property = c.getProperty(TestElement.NAME);        property.setObjectValue(getName());        property.setRunningVersion(property.isRunningVersion());    c.initialize();}
0
public void startNextLoop()
{    ((LoopController) getSamplerController()).startNextLoop();}
0
public void triggerEndOfLoop()
{}
0
public void setNumThreads(int numThreads)
{    setProperty(new IntegerProperty(NUM_THREADS, numThreads));}
0
 void incrNumberOfThreads()
{    numberOfThreads.incrementAndGet();}
0
 void decrNumberOfThreads()
{    numberOfThreads.decrementAndGet();}
0
public int getNumberOfThreads()
{    return numberOfThreads.get();}
0
public int getNumThreads()
{    return this.getPropertyAsInt(AbstractThreadGroup.NUM_THREADS);}
0
public boolean getOnErrorStartNextLoop()
{    return getPropertyAsString(AbstractThreadGroup.ON_SAMPLE_ERROR).equalsIgnoreCase(ON_SAMPLE_ERROR_START_NEXT_LOOP);}
0
public boolean getOnErrorStopThread()
{    return getPropertyAsString(AbstractThreadGroup.ON_SAMPLE_ERROR).equalsIgnoreCase(ON_SAMPLE_ERROR_STOPTHREAD);}
0
public boolean getOnErrorStopTest()
{    return getPropertyAsString(AbstractThreadGroup.ON_SAMPLE_ERROR).equalsIgnoreCase(ON_SAMPLE_ERROR_STOPTEST);}
0
public boolean getOnErrorStopTestNow()
{    return getPropertyAsString(AbstractThreadGroup.ON_SAMPLE_ERROR).equalsIgnoreCase(ON_SAMPLE_ERROR_STOPTEST_NOW);}
0
public void breakThreadLoop()
{    ((LoopController) getSamplerController()).breakLoop();}
0
public void setIsSameUserOnNextIteration(boolean isSameUserOnNextIteration)
{    setProperty(new BooleanProperty(IS_SAME_USER_ON_NEXT_ITERATION, isSameUserOnNextIteration));}
0
public boolean isSameUserOnNextIteration()
{    return getPropertyAsBoolean(ThreadGroup.IS_SAME_USER_ON_NEXT_ITERATION);}
0
public void addNode(Object node, HashTree subTree)
{    if (stopRecording) {        return;    }    if (node == nodeToFind) {        this.stopRecording = true;    }    stack.addLast((TestElement) node);}
0
public void subtractNode()
{    if (stopRecording) {        return;    }    if (log.isDebugEnabled()) {            }    stack.removeLast();}
1
public void processPath()
{}
0
public List<Controller> getControllersToRoot()
{    List<Controller> result = new ArrayList<>(stack.size());    LinkedList<TestElement> stackLocalCopy = new LinkedList<>(stack);    while (!stackLocalCopy.isEmpty()) {        TestElement te = stackLocalCopy.getLast();        if (te instanceof Controller) {            result.add((Controller) te);        }        stackLocalCopy.removeLast();    }    return result;}
0
public Collection<String> getMenuCategories()
{    return Arrays.asList(MenuFactory.THREADS);}
0
public JPopupMenu createPopupMenu()
{    JPopupMenu pop = new JPopupMenu();    pop.add(createAddMenu());    if (this.isEnabled() && !JMeterUtils.isTestRunning()) {        pop.addSeparator();        pop.add(createMenuItem("add_think_times", ActionNames.ADD_THINK_TIME_BETWEEN_EACH_STEP));        pop.add(createMenuItem("run_threadgroup", ActionNames.RUN_TG));        pop.add(createMenuItem("run_threadgroup_no_timers", ActionNames.RUN_TG_NO_TIMERS));        pop.add(createMenuItem("validate_threadgroup", ActionNames.VALIDATE_TG));    }    MenuFactory.addEditMenu(pop, true);    MenuFactory.addFileMenu(pop, false);    return pop;}
0
private JMenuItem createMenuItem(String name, String actionCommand)
{    JMenuItem addThinkTimesToChildren = new JMenuItem(JMeterUtils.getResString(name));    addThinkTimesToChildren.setName(name);    addThinkTimesToChildren.addActionListener(ActionRouter.getInstance());    addThinkTimesToChildren.setActionCommand(actionCommand);    return addThinkTimesToChildren;}
0
private JMenu createAddMenu()
{    String addAction = ActionNames.ADD;        JMenu addMenu = new JMenu(JMeterUtils.getResString("add"));    addMenu.add(MenuFactory.makeMenu(MenuFactory.SAMPLERS, addAction));    addMenu.addSeparator();    addMenu.add(MenuFactory.makeMenu(MenuFactory.CONTROLLERS, addAction));    addMenu.addSeparator();    addMenu.add(MenuFactory.makeMenu(MenuFactory.PRE_PROCESSORS, addAction));    addMenu.add(MenuFactory.makeMenu(MenuFactory.POST_PROCESSORS, addAction));    addMenu.add(MenuFactory.makeMenu(MenuFactory.ASSERTIONS, addAction));    addMenu.addSeparator();    addMenu.add(MenuFactory.makeMenu(MenuFactory.TIMERS, addAction));    addMenu.addSeparator();    addMenu.add(MenuFactory.makeMenu(MenuFactory.FRAGMENTS, addAction));    addMenu.addSeparator();    addMenu.add(MenuFactory.makeMenu(MenuFactory.CONFIG_ELEMENTS, addAction));    addMenu.add(MenuFactory.makeMenu(MenuFactory.LISTENERS, addAction));    return addMenu;}
0
public Dimension getPreferredSize()
{    return getMinimumSize();}
0
public void clearGui()
{    super.clearGui();    initGui();}
0
private void init()
{    setLayout(new BorderLayout(0, 5));    setBorder(makeBorder());    Box box = Box.createVerticalBox();    box.add(makeTitlePanel());    box.add(createOnErrorPanel());    add(box, BorderLayout.NORTH);}
0
private void initGui()
{    continueBox.setSelected(true);}
0
private JPanel createOnErrorPanel()
{    JPanel panel = new JPanel();    panel.setBorder(BorderFactory.createTitledBorder(    JMeterUtils.getResString("sampler_on_error_action")));    ButtonGroup group = new ButtonGroup();    continueBox = new JRadioButton(    JMeterUtils.getResString("sampler_on_error_continue"));    group.add(continueBox);    panel.add(continueBox);    startNextLoop = new JRadioButton(    JMeterUtils.getResString("sampler_on_error_start_next_loop"));    group.add(startNextLoop);    panel.add(startNextLoop);    stopThreadBox = new JRadioButton(    JMeterUtils.getResString("sampler_on_error_stop_thread"));    group.add(stopThreadBox);    panel.add(stopThreadBox);    stopTestBox = new JRadioButton(    JMeterUtils.getResString("sampler_on_error_stop_test"));    group.add(stopTestBox);    panel.add(stopTestBox);    stopTestNowBox = new JRadioButton(    JMeterUtils.getResString("sampler_on_error_stop_test_now"));    group.add(stopTestNowBox);    panel.add(stopTestNowBox);    return panel;}
0
private void setSampleErrorBoxes(AbstractThreadGroup te)
{    if (te.getOnErrorStopTest()) {        stopTestBox.setSelected(true);    } else if (te.getOnErrorStopTestNow()) {        stopTestNowBox.setSelected(true);    } else if (te.getOnErrorStopThread()) {        stopThreadBox.setSelected(true);    } else if (te.getOnErrorStartNextLoop()) {        startNextLoop.setSelected(true);    } else {        continueBox.setSelected(true);    }}
0
private String onSampleError()
{    if (stopTestBox.isSelected()) {        return AbstractThreadGroup.ON_SAMPLE_ERROR_STOPTEST;    }    if (stopTestNowBox.isSelected()) {        return AbstractThreadGroup.ON_SAMPLE_ERROR_STOPTEST_NOW;    }    if (stopThreadBox.isSelected()) {        return AbstractThreadGroup.ON_SAMPLE_ERROR_STOPTHREAD;    }    if (startNextLoop.isSelected()) {        return AbstractThreadGroup.ON_SAMPLE_ERROR_START_NEXT_LOOP;    }        return AbstractThreadGroup.ON_SAMPLE_ERROR_CONTINUE;}
0
public void configure(TestElement tg)
{    super.configure(tg);    setSampleErrorBoxes((AbstractThreadGroup) tg);}
0
protected void configureTestElement(TestElement tg)
{    super.configureTestElement(tg);    tg.setProperty(new StringProperty(AbstractThreadGroup.ON_SAMPLE_ERROR, onSampleError()));}
0
public String getLabelResource()
{        return "post_thread_group_title";}
0
public TestElement createTestElement()
{    PostThreadGroup tg = new PostThreadGroup();    modifyTestElement(tg);    return tg;}
0
public String getLabelResource()
{        return "setup_thread_group_title";}
0
public TestElement createTestElement()
{    SetupThreadGroup tg = new SetupThreadGroup();    modifyTestElement(tg);    return tg;}
0
public TestElement createTestElement()
{    ThreadGroup tg = new ThreadGroup();    modifyTestElement(tg);    return tg;}
0
public void modifyTestElement(TestElement tg)
{    super.configureTestElement(tg);    if (tg instanceof AbstractThreadGroup) {        ((AbstractThreadGroup) tg).setSamplerController((LoopController) loopPanel.createTestElement());    }    tg.setProperty(AbstractThreadGroup.NUM_THREADS, threadInput.getText());    tg.setProperty(ThreadGroup.RAMP_TIME, rampInput.getText());    if (showDelayedStart) {        tg.setProperty(ThreadGroup.DELAYED_START, delayedStart.isSelected(), false);    }    tg.setProperty(new BooleanProperty(ThreadGroup.SCHEDULER, scheduler.isSelected()));    tg.setProperty(ThreadGroup.DURATION, duration.getText());    tg.setProperty(ThreadGroup.DELAY, delay.getText());    tg.setProperty(AbstractThreadGroup.IS_SAME_USER_ON_NEXT_ITERATION, sameUserBox.isSelected());}
0
public void configure(TestElement tg)
{    super.configure(tg);    threadInput.setText(tg.getPropertyAsString(AbstractThreadGroup.NUM_THREADS));    rampInput.setText(tg.getPropertyAsString(ThreadGroup.RAMP_TIME));    loopPanel.configure((TestElement) tg.getProperty(AbstractThreadGroup.MAIN_CONTROLLER).getObjectValue());    if (showDelayedStart) {        delayedStart.setSelected(tg.getPropertyAsBoolean(ThreadGroup.DELAYED_START));    }    scheduler.setSelected(tg.getPropertyAsBoolean(ThreadGroup.SCHEDULER));    toggleSchedulerFields(scheduler.isSelected());    duration.setText(tg.getPropertyAsString(ThreadGroup.DURATION));    delay.setText(tg.getPropertyAsString(ThreadGroup.DELAY));    final boolean isSameUser = tg.getPropertyAsBoolean(AbstractThreadGroup.IS_SAME_USER_ON_NEXT_ITERATION, false);    if (isSameUser) {        sameUserBox.setSelected(true);    } else {        differentUserBox.setSelected(true);    }}
0
public void itemStateChanged(ItemEvent ie)
{    if (ie.getItem().equals(scheduler)) {        toggleSchedulerFields(scheduler.isSelected());    }}
0
private void toggleSchedulerFields(boolean enable)
{    duration.setEnabled(enable);    delay.setEnabled(enable);}
0
private JPanel createControllerPanel()
{    loopPanel = new LoopControlPanel(false);    LoopController looper = (LoopController) loopPanel.createTestElement();    looper.setLoops(1);    loopPanel.configure(looper);    return loopPanel;}
0
private JPanel createDurationPanel()
{    JPanel panel = new JPanel(new BorderLayout(5, 0));        JLabel label = new JLabel(JMeterUtils.getResString("duration"));    panel.add(label, BorderLayout.WEST);    duration = new JTextField();    panel.add(duration, BorderLayout.CENTER);    return panel;}
0
private JPanel createDelayPanel()
{    JPanel panel = new JPanel(new BorderLayout(5, 0));        JLabel label = new JLabel(JMeterUtils.getResString("delay"));    panel.add(label, BorderLayout.WEST);    delay = new JTextField();    panel.add(delay, BorderLayout.CENTER);    return panel;}
0
public String getLabelResource()
{        return "threadgroup";}
0
public void clearGui()
{    super.clearGui();    initGui();}
0
private void initGui()
{        threadInput.setText("1");        rampInput.setText("1");    loopPanel.clearGui();    if (showDelayedStart) {        delayedStart.setSelected(false);    }    scheduler.setSelected(false);        delay.setText("");        duration.setText("");    sameUserBox.setSelected(true);    differentUserBox.setSelected(false);}
0
private void init()
{            VerticalPanel threadPropsPanel = new VerticalPanel();    threadPropsPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("thread_properties")));        JPanel threadPanel = new JPanel(new BorderLayout(5, 0));        JLabel threadLabel = new JLabel(JMeterUtils.getResString("number_of_threads"));    threadPanel.add(threadLabel, BorderLayout.WEST);    threadInput = new JTextField(5);    threadInput.setName(THREAD_NAME);    threadLabel.setLabelFor(threadInput);    threadPanel.add(threadInput, BorderLayout.CENTER);    threadPropsPanel.add(threadPanel);        JPanel rampPanel = new JPanel(new BorderLayout(5, 0));        JLabel rampLabel = new JLabel(JMeterUtils.getResString("ramp_up"));    rampPanel.add(rampLabel, BorderLayout.WEST);    rampInput = new JTextField(5);    rampInput.setName(RAMP_NAME);    rampLabel.setLabelFor(rampInput);    rampPanel.add(rampInput, BorderLayout.CENTER);    threadPropsPanel.add(rampPanel);        threadPropsPanel.add(createControllerPanel());    threadPropsPanel.add(createUserOptionsPanel());    if (showDelayedStart) {                delayedStart = new JCheckBox(JMeterUtils.getResString("delayed_start"));        threadPropsPanel.add(delayedStart);    }        scheduler = new JCheckBox(JMeterUtils.getResString("scheduler"));    scheduler.addItemListener(this);    threadPropsPanel.add(scheduler);    VerticalPanel mainPanel = new VerticalPanel();    mainPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("scheduler_configuration")));    ImageIcon warningImg = JMeterUtils.getImage("warning.png");    JLabel warningLabel = new JLabel(JMeterUtils.getResString("thread_group_scheduler_warning"), warningImg,     SwingConstants.CENTER);    mainPanel.add(warningLabel);    mainPanel.add(createDurationPanel());    mainPanel.add(createDelayPanel());    toggleSchedulerFields(false);    VerticalPanel intgrationPanel = new VerticalPanel();    intgrationPanel.add(threadPropsPanel);    intgrationPanel.add(mainPanel);    add(intgrationPanel, BorderLayout.CENTER);}
0
private JPanel createUserOptionsPanel()
{    ButtonGroup group = new ButtonGroup();        sameUserBox = new JRadioButton(JMeterUtils.getResString("threadgroup_same_user"));    group.add(sameUserBox);    sameUserBox.setSelected(true);        differentUserBox = new JRadioButton(JMeterUtils.getResString("threadgroup_different_user"));    group.add(differentUserBox);    JPanel optionsPanel = new HorizontalPanel();    optionsPanel.add(sameUserBox);    optionsPanel.add(differentUserBox);    return optionsPanel;}
0
public void clear()
{    clear0();}
0
private void clear0()
{    variables = null;    previousResult = null;    currentSampler = null;    previousSampler = null;    samplingStarted = false;    threadNum = 0;    thread = null;    recording = false;    samplerContext.clear();}
0
public JMeterVariables getVariables()
{        return (variables != null) ? variables : JMeterContextService.getClientSideVariables();}
0
public Properties getProperties()
{    return JMeterUtils.getJMeterProperties();}
0
public void setVariables(JMeterVariables vars)
{    this.variables = vars;}
0
public SampleResult getPreviousResult()
{    return previousResult;}
0
public void setPreviousResult(SampleResult result)
{    this.previousResult = result;}
0
public Sampler getCurrentSampler()
{    return currentSampler;}
0
public void setCurrentSampler(Sampler sampler)
{    this.previousSampler = currentSampler;    this.currentSampler = sampler;}
0
public Sampler getPreviousSampler()
{    return previousSampler;}
0
public int getThreadNum()
{    return threadNum;}
0
public void setThreadNum(int threadNum)
{    this.threadNum = threadNum;}
0
public JMeterThread getThread()
{    return this.thread;}
0
public void setThread(JMeterThread thread)
{    this.thread = thread;}
0
public AbstractThreadGroup getThreadGroup()
{    return this.threadGroup;}
0
public void setThreadGroup(AbstractThreadGroup threadgrp)
{    this.threadGroup = threadgrp;}
0
public StandardJMeterEngine getEngine()
{    return engine;}
0
public void setEngine(StandardJMeterEngine engine)
{    this.engine = engine;}
0
public boolean isSamplingStarted()
{    return samplingStarted;}
0
public void setSamplingStarted(boolean b)
{    samplingStarted = b;}
0
public void setTestLogicalAction(TestLogicalAction actionOnExecution)
{    this.testLogicalAction = actionOnExecution;}
0
public TestLogicalAction getTestLogicalAction()
{    return testLogicalAction;}
0
public void setStartNextThreadLoop(boolean restartNextLoop)
{    if (restartNextLoop) {        this.testLogicalAction = TestLogicalAction.START_NEXT_ITERATION_OF_THREAD;    } else {        this.testLogicalAction = TestLogicalAction.CONTINUE;    }}
0
public boolean isStartNextThreadLoop()
{    return this.testLogicalAction == TestLogicalAction.START_NEXT_ITERATION_OF_THREAD;}
0
public void setRestartNextLoop(boolean restartNextLoop)
{    setStartNextThreadLoop(restartNextLoop);}
0
public boolean isRestartNextLoop()
{    return isStartNextThreadLoop();}
0
public void cleanAfterSample()
{    if (previousResult != null) {        previousResult.cleanAfterSample();    }    samplerContext.clear();}
0
public Map<String, Object> getSamplerContext()
{    return samplerContext;}
0
public void setRecording(boolean recording)
{    this.recording = recording;}
0
public boolean isRecording()
{    return recording;}
0
public static JMeterContext getContext()
{    return threadContext.get();}
0
 static void removeContext()
{        threadContext.remove();}
0
public static void replaceContext(JMeterContext context)
{    threadContext.remove();    threadContext.set(context);}
0
public static synchronized void startTest()
{    if (testStart == 0) {        numberOfActiveThreads = 0;        testStart = System.currentTimeMillis();                JMeterUtils.setProperty("TESTSTART.MS", Long.toString(testStart));    }}
0
 static synchronized void incrNumberOfThreads()
{    numberOfActiveThreads++;    numberOfThreadsStarted++;}
0
 static synchronized void decrNumberOfThreads()
{    numberOfActiveThreads--;    numberOfThreadsFinished++;}
0
public static synchronized int getNumberOfThreads()
{    return numberOfActiveThreads;}
0
public static synchronized ThreadCounts getThreadCounts()
{    return new ThreadCounts(numberOfActiveThreads, numberOfThreadsStarted, numberOfThreadsFinished);}
0
public static synchronized void endTest()
{    testStart = 0;    resetClientSideVariables();}
0
public static synchronized long getTestStartTime()
{    return testStart;}
0
public static synchronized int getTotalThreads()
{    return totalThreads;}
0
public static synchronized void addTotalThreads(int thisGroup)
{    totalThreads += thisGroup;}
0
public static synchronized void clearTotalThreads()
{    totalThreads = 0;    numberOfThreadsStarted = 0;    numberOfThreadsFinished = 0;}
0
public static JMeterVariables getClientSideVariables()
{    return variables;}
0
public static void initClientSideVariables(JMeterVariables clientSideVariables)
{    JMeterContextService.variables = new UnmodifiableJMeterVariables(clientSideVariables);}
0
public static void resetClientSideVariables()
{    JMeterContextService.variables = null;}
0
public void setInitialContext(JMeterContext context)
{    threadVars.putAll(context.getVariables());}
0
public void setScheduled(boolean sche)
{    this.scheduler = sche;}
0
public void setStartTime(long stime)
{    startTime = stime;}
0
public long getStartTime()
{    return startTime;}
0
public void setEndTime(long etime)
{    endTime = etime;}
0
public long getEndTime()
{    return endTime;}
0
private void stopSchedulerIfNeeded()
{    long now = System.currentTimeMillis();    if (now >= endTime) {        running = false;            }}
1
private void startScheduler()
{    long delay = startTime - System.currentTimeMillis();    delayBy(delay, "startScheduler");}
0
public void setThreadName(String threadName)
{    this.threadName = threadName;}
0
public void run()
{        JMeterContext threadContext = JMeterContextService.getContext();    LoopIterationListener iterationListener = null;    try {        iterationListener = initRun(threadContext);        while (running) {            Sampler sam = threadGroupLoopController.next();            while (running && sam != null) {                processSampler(sam, null, threadContext);                threadContext.cleanAfterSample();                boolean lastSampleInError = TRUE.equals(threadContext.getVariables().get(LAST_SAMPLE_OK));                                if (threadContext.getTestLogicalAction() != TestLogicalAction.CONTINUE || (onErrorStartNextLoop && !lastSampleInError)) {                    if (log.isDebugEnabled() && onErrorStartNextLoop && threadContext.getTestLogicalAction() != TestLogicalAction.CONTINUE) {                                            }                    if (onErrorStartNextLoop && !lastSampleInError) {                        triggerLoopLogicalActionOnParentControllers(sam, threadContext, JMeterThread::continueOnThreadLoop);                    } else {                        switch(threadContext.getTestLogicalAction()) {                            case BREAK_CURRENT_LOOP:                                triggerLoopLogicalActionOnParentControllers(sam, threadContext, JMeterThread::breakOnCurrentLoop);                                break;                            case START_NEXT_ITERATION_OF_THREAD:                                triggerLoopLogicalActionOnParentControllers(sam, threadContext, JMeterThread::continueOnThreadLoop);                                break;                            case START_NEXT_ITERATION_OF_CURRENT_LOOP:                                triggerLoopLogicalActionOnParentControllers(sam, threadContext, JMeterThread::continueOnCurrentLoop);                                break;                            default:                                break;                        }                    }                    threadContext.setTestLogicalAction(TestLogicalAction.CONTINUE);                    sam = null;                    threadContext.getVariables().put(LAST_SAMPLE_OK, TRUE);                } else {                    sam = threadGroupLoopController.next();                }            }                        if (threadGroupLoopController.isDone()) {                running = false;                            }        }    }     catch (JMeterStopTestException e) {                if (log.isInfoEnabled()) {                    }        shutdownTest();    } catch (JMeterStopTestNowException e) {                if (log.isInfoEnabled()) {                    }        stopTestNow();    } catch (JMeterStopThreadException e) {                if (log.isInfoEnabled()) {                    }    } catch (Exception | JMeterError e) {            } catch (ThreadDeath e) {                throw e;    } finally {                currentSamplerForInterruption = null;        try {                        interruptLock.lock();            threadContext.clear();                        threadFinished(iterationListener);                        monitor.threadFinished(this);                        JMeterContextService.removeContext();        } finally {                        interruptLock.unlock();        }    }}
1
private void triggerLoopLogicalActionOnParentControllers(Sampler sampler, JMeterContext threadContext, Consumer<FindTestElementsUpToRootTraverser> consumer)
{    TransactionSampler transactionSampler = null;    if (sampler instanceof TransactionSampler) {        transactionSampler = (TransactionSampler) sampler;    }    Sampler realSampler = findRealSampler(sampler);    if (realSampler == null) {        throw new IllegalStateException("Got null subSampler calling findRealSampler for:" + (sampler != null ? sampler.getName() : "null") + ", sampler:" + sampler);    }        FindTestElementsUpToRootTraverser pathToRootTraverser = new FindTestElementsUpToRootTraverser(realSampler);    testTree.traverse(pathToRootTraverser);    consumer.accept(pathToRootTraverser);        if (transactionSampler != null) {        SamplePackage transactionPack = compiler.configureTransactionSampler(transactionSampler);        doEndTransactionSampler(transactionSampler, null, transactionPack, threadContext);    }}
0
private static void continueOnCurrentLoop(FindTestElementsUpToRootTraverser pathToRootTraverser)
{    List<Controller> controllersToReinit = pathToRootTraverser.getControllersToRoot();    for (Controller parentController : controllersToReinit) {        if (parentController instanceof AbstractThreadGroup) {            AbstractThreadGroup tg = (AbstractThreadGroup) parentController;            tg.startNextLoop();        } else if (parentController instanceof IteratingController) {            ((IteratingController) parentController).startNextLoop();            break;        } else {            parentController.triggerEndOfLoop();        }    }}
0
private static void breakOnCurrentLoop(FindTestElementsUpToRootTraverser pathToRootTraverser)
{    List<Controller> controllersToReinit = pathToRootTraverser.getControllersToRoot();    for (Controller parentController : controllersToReinit) {        if (parentController instanceof AbstractThreadGroup) {            AbstractThreadGroup tg = (AbstractThreadGroup) parentController;            tg.breakThreadLoop();        } else if (parentController instanceof IteratingController) {            ((IteratingController) parentController).breakLoop();            break;        } else {            parentController.triggerEndOfLoop();        }    }}
0
private static void continueOnThreadLoop(FindTestElementsUpToRootTraverser pathToRootTraverser)
{    List<Controller> controllersToReinit = pathToRootTraverser.getControllersToRoot();    for (Controller parentController : controllersToReinit) {        if (parentController instanceof AbstractThreadGroup) {            AbstractThreadGroup tg = (AbstractThreadGroup) parentController;            tg.startNextLoop();        } else {            parentController.triggerEndOfLoop();        }    }}
0
private Sampler findRealSampler(Sampler sampler)
{    Sampler realSampler = sampler;    while (realSampler instanceof TransactionSampler) {        realSampler = ((TransactionSampler) realSampler).getSubSampler();    }    return realSampler;}
0
private SampleResult processSampler(Sampler current, Sampler parent, JMeterContext threadContext)
{    SampleResult transactionResult = null;        TransactionSampler transactionSampler = null;        SamplePackage transactionPack = null;    try {        if (current instanceof TransactionSampler) {            transactionSampler = (TransactionSampler) current;            transactionPack = compiler.configureTransactionSampler(transactionSampler);                        if (transactionSampler.isTransactionDone()) {                transactionResult = doEndTransactionSampler(transactionSampler, parent, transactionPack, threadContext);                                current = null;            } else {                Sampler prev = current;                                current = transactionSampler.getSubSampler();                if (current instanceof TransactionSampler) {                                        SampleResult res = processSampler(current, prev, threadContext);                    threadContext.setCurrentSampler(prev);                    current = null;                    if (res != null) {                        transactionSampler.addSubSamplerResult(res);                    }                }            }        }                if (current != null) {            executeSamplePackage(current, transactionSampler, transactionPack, threadContext);        }        if (scheduler) {                        stopSchedulerIfNeeded();        }    } catch (JMeterStopTestException e) {                if (log.isInfoEnabled()) {                    }        shutdownTest();    } catch (JMeterStopTestNowException e) {                if (log.isInfoEnabled()) {                    }        stopTestNow();    } catch (JMeterStopThreadException e) {                if (log.isInfoEnabled()) {                    }        stopThread();    } catch (Exception e) {        if (current != null) {                    } else {                    }    }    if (!running && transactionResult == null && transactionSampler != null && transactionPack != null) {        transactionResult = doEndTransactionSampler(transactionSampler, parent, transactionPack, threadContext);    }    return transactionResult;}
1
private void executeSamplePackage(Sampler current, TransactionSampler transactionSampler, SamplePackage transactionPack, JMeterContext threadContext)
{    threadContext.setCurrentSampler(current);        SamplePackage pack = compiler.configureSampler(current);    runPreProcessors(pack.getPreProcessors());        threadVars.putObject(PACKAGE_OBJECT, pack);    delay(pack.getTimers());    SampleResult result = null;    if (running) {        Sampler sampler = pack.getSampler();        result = doSampling(threadContext, sampler);    }        if (result != null && !result.isIgnore()) {        int nbActiveThreadsInThreadGroup = threadGroup.getNumberOfThreads();        int nbTotalActiveThreads = JMeterContextService.getNumberOfThreads();        result.setGroupThreads(nbActiveThreadsInThreadGroup);        result.setAllThreads(nbTotalActiveThreads);        result.setThreadName(threadName);        SampleResult[] subResults = result.getSubResults();        if (subResults != null) {            for (SampleResult subResult : subResults) {                subResult.setGroupThreads(nbActiveThreadsInThreadGroup);                subResult.setAllThreads(nbTotalActiveThreads);                subResult.setThreadName(threadName);            }        }        threadContext.setPreviousResult(result);        runPostProcessors(pack.getPostProcessors());        checkAssertions(pack.getAssertions(), result, threadContext);        if (!result.isIgnore()) {                        List<SampleListener> sampleListeners = getSampleListeners(pack, transactionPack, transactionSampler);            notifyListeners(sampleListeners, result);        }        compiler.done(pack);                if (transactionSampler != null && !result.isIgnore()) {            transactionSampler.addSubSamplerResult(result);        }                if (result.isStopThread() || (!result.isSuccessful() && onErrorStopThread)) {            stopThread();        }        if (result.isStopTest() || (!result.isSuccessful() && onErrorStopTest)) {            shutdownTest();        }        if (result.isStopTestNow() || (!result.isSuccessful() && onErrorStopTestNow)) {            stopTestNow();        }        threadContext.setTestLogicalAction(result.getTestLogicalAction());    } else {                compiler.done(pack);    }}
0
private SampleResult doSampling(JMeterContext threadContext, Sampler sampler)
{    sampler.setThreadContext(threadContext);    sampler.setThreadName(threadName);    TestBeanHelper.prepare(sampler);        currentSamplerForInterruption = sampler;    if (!sampleMonitors.isEmpty()) {        for (SampleMonitor sampleMonitor : sampleMonitors) {            if (sampleMonitor instanceof TestElement) {                TestBeanHelper.prepare((TestElement) sampleMonitor);            }            sampleMonitor.sampleStarting(sampler);        }    }    try {        return sampler.sample(null);    } finally {        if (!sampleMonitors.isEmpty()) {            for (SampleMonitor sampleMonitor : sampleMonitors) {                sampleMonitor.sampleEnded(sampler);            }        }        currentSamplerForInterruption = null;    }}
0
private SampleResult doEndTransactionSampler(TransactionSampler transactionSampler, Sampler parent, SamplePackage transactionPack, JMeterContext threadContext)
{        SampleResult transactionResult = transactionSampler.getTransactionResult();    transactionResult.setThreadName(threadName);    transactionResult.setGroupThreads(threadGroup.getNumberOfThreads());    transactionResult.setAllThreads(JMeterContextService.getNumberOfThreads());        checkAssertions(transactionPack.getAssertions(), transactionResult, threadContext);        if (!(parent instanceof TransactionSampler)) {        notifyListeners(transactionPack.getSampleListeners(), transactionResult);    }    compiler.done(transactionPack);    return transactionResult;}
0
private List<SampleListener> getSampleListeners(SamplePackage samplePack, SamplePackage transactionPack, TransactionSampler transactionSampler)
{    List<SampleListener> sampleListeners = samplePack.getSampleListeners();        if (transactionSampler != null) {        List<SampleListener> onlySubSamplerListeners = new ArrayList<>();        List<SampleListener> transListeners = transactionPack.getSampleListeners();        for (SampleListener listener : sampleListeners) {                        boolean found = false;            for (SampleListener trans : transListeners) {                                if (trans == listener) {                    found = true;                    break;                }            }            if (!found) {                onlySubSamplerListeners.add(listener);            }        }        sampleListeners = onlySubSamplerListeners;    }    return sampleListeners;}
0
private IterationListener initRun(JMeterContext threadContext)
{    threadVars.putObject(JMeterVariables.VAR_IS_SAME_USER_KEY, isSameUserOnNextIteration);    threadContext.setVariables(threadVars);    threadContext.setThreadNum(getThreadNum());    threadContext.getVariables().put(LAST_SAMPLE_OK, TRUE);    threadContext.setThread(this);    threadContext.setThreadGroup(threadGroup);    threadContext.setEngine(engine);    testTree.traverse(compiler);    if (scheduler) {                startScheduler();    }        rampUpDelay();    if (log.isInfoEnabled()) {            }    /*         * Setting SamplingStarted before the controllers are initialised allows         * them to access the running values of functions and variables (however         * it does not seem to help with the listeners)         */    threadContext.setSamplingStarted(true);    threadGroupLoopController.initialize();    IterationListener iterationListener = new IterationListener();    threadGroupLoopController.addIterationListener(iterationListener);    threadStarted();    return iterationListener;}
1
private void threadStarted()
{    JMeterContextService.incrNumberOfThreads();    threadGroup.incrNumberOfThreads();    GuiPackage gp = GuiPackage.getInstance();    if (gp != null) {                gp.getMainFrame().updateCounts();    }    ThreadListenerTraverser startup = new ThreadListenerTraverser(true);        testTree.traverse(startup);}
0
private void threadFinished(LoopIterationListener iterationListener)
{    ThreadListenerTraverser shut = new ThreadListenerTraverser(false);        testTree.traverse(shut);    JMeterContextService.decrNumberOfThreads();    threadGroup.decrNumberOfThreads();    GuiPackage gp = GuiPackage.getInstance();    if (gp != null) {                gp.getMainFrame().updateCounts();    }    if (iterationListener != null) {                threadGroupLoopController.removeIterationListener(iterationListener);    }}
0
public void addNode(Object node, HashTree subTree)
{    if (node instanceof ThreadListener) {        ThreadListener tl = (ThreadListener) node;        if (isStart) {            try {                tl.threadStarted();            } catch (Exception e) {                            }        } else {            try {                tl.threadFinished();            } catch (Exception e) {                            }        }    }}
1
public void subtractNode()
{}
0
public void processPath()
{}
0
public String getThreadName()
{    return threadName;}
0
public void stop()
{        running = false;    }
1
public boolean interrupt()
{    try {        interruptLock.lock();                Sampler samp = currentSamplerForInterruption;        if (samp instanceof Interruptible) {                        if (log.isWarnEnabled()) {                            }            try {                boolean found = ((Interruptible) samp).interrupt();                if (!found) {                                    }                return found;            } catch (Exception e) {                                if (log.isWarnEnabled()) {                                    }            }        } else if (samp != null) {            if (log.isWarnEnabled()) {                            }        }    } finally {        interruptLock.unlock();    }    return false;}
1
private void shutdownTest()
{    running = false;        if (engine != null) {        engine.askThreadsToStop();    }}
1
private void stopTestNow()
{    running = false;        if (engine != null) {        engine.stopTest();    }}
1
private void stopThread()
{    running = false;    }
1
private void checkAssertions(List<Assertion> assertions, SampleResult parent, JMeterContext threadContext)
{    for (Assertion assertion : assertions) {        TestBeanHelper.prepare((TestElement) assertion);        if (assertion instanceof AbstractScopedAssertion) {            AbstractScopedAssertion scopedAssertion = (AbstractScopedAssertion) assertion;            String scope = scopedAssertion.fetchScope();            if (scopedAssertion.isScopeParent(scope) || scopedAssertion.isScopeAll(scope) || scopedAssertion.isScopeVariable(scope)) {                processAssertion(parent, assertion);            }            if (scopedAssertion.isScopeChildren(scope) || scopedAssertion.isScopeAll(scope)) {                SampleResult[] children = parent.getSubResults();                boolean childError = false;                for (SampleResult childSampleResult : children) {                    processAssertion(childSampleResult, assertion);                    if (!childSampleResult.isSuccessful()) {                        childError = true;                    }                }                                if (childError && parent.isSuccessful()) {                    AssertionResult assertionResult = new AssertionResult(((AbstractTestElement) assertion).getName());                    assertionResult.setResultForFailure("One or more sub-samples failed");                    parent.addAssertionResult(assertionResult);                    parent.setSuccessful(false);                }            }        } else {            processAssertion(parent, assertion);        }    }    threadContext.getVariables().put(LAST_SAMPLE_OK, Boolean.toString(parent.isSuccessful()));}
0
private void processAssertion(SampleResult result, Assertion assertion)
{    AssertionResult assertionResult;    try {        assertionResult = assertion.getResult(result);    } catch (AssertionError e) {                assertionResult = new AssertionResult("Assertion failed! See log file (debug level, only).");        assertionResult.setFailure(true);        assertionResult.setFailureMessage(e.toString());    } catch (JMeterError e) {                assertionResult = new AssertionResult("Assertion failed! See log file.");        assertionResult.setError(true);        assertionResult.setFailureMessage(e.toString());    } catch (Exception e) {                assertionResult = new AssertionResult("Assertion failed! See log file.");        assertionResult.setError(true);        assertionResult.setFailureMessage(e.toString());    }    result.setSuccessful(result.isSuccessful() && !(assertionResult.isError() || assertionResult.isFailure()));    result.addAssertionResult(assertionResult);}
1
private void runPostProcessors(List<PostProcessor> extractors)
{    for (PostProcessor ex : extractors) {        TestBeanHelper.prepare((TestElement) ex);        ex.process();    }}
0
private void runPreProcessors(List<PreProcessor> preProcessors)
{    for (PreProcessor ex : preProcessors) {        if (log.isDebugEnabled()) {                    }        TestBeanHelper.prepare((TestElement) ex);        ex.process();    }}
1
private void delay(List<Timer> timers)
{    long totalDelay = 0;    for (Timer timer : timers) {        TestBeanHelper.prepare((TestElement) timer);        long delay = timer.delay();        if (APPLY_TIMER_FACTOR && timer.isModifiable()) {            if (log.isDebugEnabled()) {                            }            delay = Math.round(delay * TIMER_FACTOR);        }        totalDelay += delay;    }    if (totalDelay > 0) {        try {            if (scheduler) {                                                totalDelay = TIMER_SERVICE.adjustDelay(totalDelay, endTime, false);                if (totalDelay < 0) {                                        running = false;                    return;                }            }            TimeUnit.MILLISECONDS.sleep(totalDelay);        } catch (InterruptedException e) {                        Thread.currentThread().interrupt();        }    }}
1
 void notifyTestListeners()
{    threadVars.incIteration();    for (TestIterationListener listener : testIterationStartListeners) {        listener.testIterationStart(new LoopIterationEvent(threadGroupLoopController, threadVars.getIteration()));        if (listener instanceof TestElement) {            ((TestElement) listener).recoverRunningVersion();        }    }}
0
private void notifyListeners(List<SampleListener> listeners, SampleResult result)
{    SampleEvent event = new SampleEvent(result, threadGroup.getName(), threadVars);    notifier.notifyListeners(event, listeners);}
0
public void setInitialDelay(int delay)
{    initialDelay = delay;}
0
private void rampUpDelay()
{    delayBy(initialDelay, "RampUp");}
0
protected final void delayBy(long delay, String type)
{    if (delay > 0) {        long start = System.currentTimeMillis();        long end = start + delay;        long now;        long pause = RAMPUP_GRANULARITY;        while (running && (now = System.currentTimeMillis()) < end) {            long togo = end - now;            if (togo < pause) {                pause = togo;            }            try {                                TimeUnit.MILLISECONDS.sleep(pause);            } catch (InterruptedException e) {                if (running) {                                                        }                Thread.currentThread().interrupt();                break;            }        }    }}
1
public int getThreadNum()
{    return threadNum;}
0
public void setThreadNum(int threadNum)
{    this.threadNum = threadNum;}
0
public void iterationStart(LoopIterationEvent iterEvent)
{    notifyTestListeners();}
0
public void setEngine(StandardJMeterEngine engine)
{    this.engine = engine;}
0
public void setOnErrorStopTest(boolean b)
{    onErrorStopTest = b;}
0
public void setOnErrorStopTestNow(boolean b)
{    onErrorStopTestNow = b;}
0
public void setOnErrorStopThread(boolean b)
{    onErrorStopThread = b;}
0
public void setOnErrorStartNextLoop(boolean b)
{    onErrorStartNextLoop = b;}
0
public void setThreadGroup(AbstractThreadGroup group)
{    this.threadGroup = group;}
0
public ListedHashTree getTestTree()
{    return (ListedHashTree) testTree;}
0
public ListenerNotifier getNotifier()
{    return notifier;}
0
private void preloadVariables()
{    for (String property : PRE_LOAD) {        String value = JMeterUtils.getProperty(property);        if (value != null) {            variables.put(property, value);        }    }}
0
public String getThreadName()
{    return Thread.currentThread().getName();}
0
public int getIteration()
{    return iteration;}
0
public void incIteration()
{    iteration++;}
0
public Object remove(String key)
{    return variables.remove(key);}
0
public void put(String key, String value)
{    variables.put(key, value);}
0
public void putObject(String key, Object value)
{    variables.put(key, value);}
0
public void putAll(Map<String, ?> vars)
{    variables.putAll(vars);}
0
public void putAll(JMeterVariables vars)
{    putAll(vars.variables);}
0
public String get(String key)
{    Object o = variables.get(key);    if (o instanceof String) {        return (String) o;    } else if (o != null) {        return o.toString();    } else {        return null;    }}
0
public Object getObject(String key)
{    return variables.get(key);}
0
public Iterator<Entry<String, Object>> getIterator()
{    return Collections.unmodifiableMap(variables).entrySet().iterator();}
0
public Set<Entry<String, Object>> entrySet()
{    return Collections.unmodifiableMap(variables).entrySet();}
0
public boolean isSameUserOnNextIteration()
{    return Boolean.TRUE.equals(variables.get(VAR_IS_SAME_USER_KEY));}
0
public void notifyListeners(SampleEvent res, List<SampleListener> listeners)
{    for (SampleListener sampleListener : listeners) {        try {            TestBeanHelper.prepare((TestElement) sampleListener);            sampleListener.sampleOccurred(res);        } catch (RuntimeException e) {                                }    }}
1
private static int addOffset(int port, int offset)
{    if (port == 0) {        return 0;    }    return port + offset;}
0
public void threadStarted()
{    JMeterContextService.incrNumberOfThreads();    GuiPackage gp = GuiPackage.getInstance();    if (gp != null) {                gp.getMainFrame().updateCounts();    }    for (RemoteThreadsLifeCycleListener listener : listeners) {        listener.threadNumberIncreased(JMeterContextService.getNumberOfThreads());    }}
0
public void threadFinished()
{    JMeterContextService.decrNumberOfThreads();    GuiPackage gp = GuiPackage.getInstance();    if (gp != null) {                gp.getMainFrame().updateCounts();    }    for (RemoteThreadsLifeCycleListener listener : listeners) {        listener.threadNumberDecreased(JMeterContextService.getNumberOfThreads());    }}
0
public void threadStarted()
{}
0
public void threadFinished()
{}
0
public void threadStarted()
{    try {        listener.threadStarted();    } catch (RemoteException err) {                    }}
1
public void threadFinished()
{    try {        listener.threadFinished();    } catch (RemoteException err) {                    }}
1
public void setRunningVersion(boolean running)
{    setRunningVersion(configs, running);    setRunningVersion(sampleListeners, running);    setRunningVersion(assertions, running);    setRunningVersion(timers, running);    setRunningVersion(postProcessors, running);    setRunningVersion(preProcessors, running);    setRunningVersion(controllers, running);    sampler.setRunningVersion(running);}
0
private void setRunningVersion(List<?> list, boolean running)
{        @SuppressWarnings("unchecked")    List<TestElement> telist = (List<TestElement>) list;    for (TestElement te : telist) {        te.setRunningVersion(running);    }}
0
private void recoverRunningVersion(List<?> list)
{        @SuppressWarnings("unchecked")    List<TestElement> telist = (List<TestElement>) list;    for (TestElement te : telist) {        te.recoverRunningVersion();    }}
0
public void recoverRunningVersion()
{    recoverRunningVersion(configs);    recoverRunningVersion(sampleListeners);    recoverRunningVersion(assertions);    recoverRunningVersion(timers);    recoverRunningVersion(postProcessors);    recoverRunningVersion(preProcessors);    recoverRunningVersion(controllers);    sampler.recoverRunningVersion();}
0
public List<SampleListener> getSampleListeners()
{    return sampleListeners;}
0
public void addSampleListener(SampleListener listener)
{    sampleListeners.add(listener);}
0
public List<Timer> getTimers()
{    return timers;}
0
public void addPostProcessor(PostProcessor ex)
{    postProcessors.add(ex);}
0
public void addPreProcessor(PreProcessor pre)
{    preProcessors.add(pre);}
0
public void addTimer(Timer timer)
{    timers.add(timer);}
0
public void addAssertion(Assertion asser)
{    assertions.add(asser);}
0
public List<Assertion> getAssertions()
{    return assertions;}
0
public List<PostProcessor> getPostProcessors()
{    return postProcessors;}
0
public Sampler getSampler()
{    return sampler;}
0
public void setSampler(Sampler s)
{    sampler = s;}
0
public List<PreProcessor> getPreProcessors()
{    return preProcessors;}
0
public List<ConfigTestElement> getConfigs()
{    return configs;}
0
public static void initialize()
{        synchronized (PAIRING) {        PAIRING.clear();    }}
0
public SamplePackage configureSampler(Sampler sampler)
{    SamplePackage pack = samplerConfigMap.get(sampler);    pack.setSampler(sampler);    configureWithConfigElements(sampler, pack.getConfigs());    return pack;}
0
public SamplePackage configureTransactionSampler(TransactionSampler transactionSampler)
{    TransactionController controller = transactionSampler.getTransactionController();    SamplePackage pack = transactionControllerConfigMap.get(controller);    pack.setSampler(transactionSampler);    return pack;}
0
public void done(SamplePackage pack)
{    pack.recoverRunningVersion();}
0
public void addNode(Object node, HashTree subTree)
{    stack.addLast((TestElement) node);}
0
public void subtractNode()
{    if (log.isDebugEnabled()) {            }    TestElement child = stack.getLast();    trackIterationListeners(stack);    if (child instanceof Sampler) {        saveSamplerConfigs((Sampler) child);    } else if (child instanceof TransactionController) {        saveTransactionControllerConfigs((TransactionController) child);    }    stack.removeLast();    if (!stack.isEmpty()) {        TestElement parent = stack.getLast();        boolean duplicate = false;                if (parent instanceof Controller && (child instanceof Sampler || child instanceof Controller)) {            if (parent instanceof TestCompilerHelper) {                TestCompilerHelper te = (TestCompilerHelper) parent;                duplicate = !te.addTestElementOnce(child);            } else {                                ObjectPair pair = new ObjectPair(child, parent);                synchronized (PAIRING) {                                        if (!PAIRING.contains(pair)) {                        parent.addTestElement(child);                        PAIRING.add(pair);                    } else {                        duplicate = true;                    }                }            }        }        if (duplicate) {            if (log.isWarnEnabled()) {                            }        }    }}
1
private void trackIterationListeners(LinkedList<TestElement> pStack)
{    TestElement child = pStack.getLast();    if (child instanceof LoopIterationListener) {        ListIterator<TestElement> iter = pStack.listIterator(pStack.size());        while (iter.hasPrevious()) {            TestElement item = iter.previous();            if (item == child) {                continue;            }            if (item instanceof Controller) {                TestBeanHelper.prepare(child);                ((Controller) item).addIterationListener((LoopIterationListener) child);                break;            }        }    }}
0
public void processPath()
{}
0
private void saveSamplerConfigs(Sampler sam)
{    List<ConfigTestElement> configs = new LinkedList<>();    List<Controller> controllers = new LinkedList<>();    List<SampleListener> listeners = new LinkedList<>();    List<Timer> timers = new LinkedList<>();    List<Assertion> assertions = new LinkedList<>();    LinkedList<PostProcessor> posts = new LinkedList<>();    LinkedList<PreProcessor> pres = new LinkedList<>();    for (int i = stack.size(); i > 0; i--) {        addDirectParentControllers(controllers, stack.get(i - 1));        List<PreProcessor> tempPre = new LinkedList<>();        List<PostProcessor> tempPost = new LinkedList<>();        List<Assertion> tempAssertions = new LinkedList<>();        for (Object item : testTree.list(stack.subList(0, i))) {            if (item instanceof ConfigTestElement) {                configs.add((ConfigTestElement) item);            }            if (item instanceof SampleListener) {                listeners.add((SampleListener) item);            }            if (item instanceof Timer) {                timers.add((Timer) item);            }            if (item instanceof Assertion) {                tempAssertions.add((Assertion) item);            }            if (item instanceof PostProcessor) {                tempPost.add((PostProcessor) item);            }            if (item instanceof PreProcessor) {                tempPre.add((PreProcessor) item);            }        }        assertions.addAll(0, tempAssertions);        pres.addAll(0, tempPre);        posts.addAll(0, tempPost);    }    SamplePackage pack = new SamplePackage(configs, listeners, timers, assertions, posts, pres, controllers);    pack.setSampler(sam);    pack.setRunningVersion(true);    samplerConfigMap.put(sam, pack);}
0
private void saveTransactionControllerConfigs(TransactionController tc)
{    List<ConfigTestElement> configs = new LinkedList<>();    List<Controller> controllers = new LinkedList<>();    List<SampleListener> listeners = new LinkedList<>();    List<Timer> timers = new LinkedList<>();    List<Assertion> assertions = new LinkedList<>();    LinkedList<PostProcessor> posts = new LinkedList<>();    LinkedList<PreProcessor> pres = new LinkedList<>();    for (int i = stack.size(); i > 0; i--) {        addDirectParentControllers(controllers, stack.get(i - 1));        for (Object item : testTree.list(stack.subList(0, i))) {            if (item instanceof SampleListener) {                listeners.add((SampleListener) item);            }            if (item instanceof Assertion) {                assertions.add((Assertion) item);            }        }    }    SamplePackage pack = new SamplePackage(configs, listeners, timers, assertions, posts, pres, controllers);    pack.setSampler(new TransactionSampler(tc, tc.getName()));    pack.setRunningVersion(true);    transactionControllerConfigMap.put(tc, pack);}
0
private void addDirectParentControllers(List<Controller> controllers, TestElement maybeController)
{    if (maybeController instanceof Controller) {                controllers.add((Controller) maybeController);    }}
1
public int hashCode()
{    return child.hashCode() + parent.hashCode();}
0
public boolean equals(Object o)
{    if (o instanceof ObjectPair) {        return child == ((ObjectPair) o).child && parent == ((ObjectPair) o).parent;    }    return false;}
0
private void configureWithConfigElements(Sampler sam, List<ConfigTestElement> configs)
{    sam.clearTestElementChildren();    for (ConfigTestElement config : configs) {        if (!(config instanceof NoConfigMerge)) {            if (sam instanceof ConfigMergabilityIndicator) {                if (((ConfigMergabilityIndicator) sam).applies(config)) {                    sam.addTestElement(config);                }            } else {                                sam.addTestElement(config);            }        }    }}
0
public void setScheduler(boolean scheduler)
{    setProperty(new BooleanProperty(SCHEDULER, scheduler));}
0
public boolean getScheduler()
{    return getPropertyAsBoolean(SCHEDULER);}
0
public long getDuration()
{    return getPropertyAsLong(DURATION);}
0
public void setDuration(long duration)
{    setProperty(new LongProperty(DURATION, duration));}
0
public long getDelay()
{    return getPropertyAsLong(DELAY);}
0
public void setDelay(long delay)
{    setProperty(new LongProperty(DELAY, delay));}
0
public void setRampUp(int rampUp)
{    setProperty(new IntegerProperty(RAMP_TIME, rampUp));}
0
public int getRampUp()
{    return getPropertyAsInt(ThreadGroup.RAMP_TIME);}
0
private boolean isDelayedStartup()
{    return getPropertyAsBoolean(DELAYED_START);}
0
private void scheduleThread(JMeterThread thread, long now)
{    if (!getScheduler()) {                return;    }    if (getDelay() >= 0) {                thread.setStartTime(getDelay() * 1000 + now);    } else {        throw new JMeterStopTestException("Invalid delay " + getDelay() + " set in Thread Group:" + getName());    }        if (getDuration() > 0) {                thread.setEndTime(getDuration() * 1000 + (thread.getStartTime()));    } else {        throw new JMeterStopTestException("Invalid duration " + getDuration() + " set in Thread Group:" + getName());    }        thread.setScheduled(true);}
0
public void start(int groupNum, ListenerNotifier notifier, ListedHashTree threadGroupTree, StandardJMeterEngine engine)
{    this.running = true;    this.groupNumber = groupNum;    this.notifier = notifier;    this.threadGroupTree = threadGroupTree;    int numThreads = getNumThreads();    int rampUpPeriodInSeconds = getRampUp();    boolean isSameUserOnNextIteration = isSameUserOnNextIteration();        delayedStartup = isDelayedStartup();        if (delayedStartup) {        threadStarter = new Thread(new ThreadStarter(notifier, threadGroupTree, engine), getName() + "-ThreadStarter");        threadStarter.setDaemon(true);        threadStarter.start();        } else {        final JMeterContext context = JMeterContextService.getContext();        long lastThreadStartInMillis = 0;        int delayForNextThreadInMillis = 0;        final int perThreadDelayInMillis = Math.round((float) rampUpPeriodInSeconds * 1000 / numThreads);        for (int threadNum = 0; running && threadNum < numThreads; threadNum++) {            long nowInMillis = System.currentTimeMillis();            if (threadNum > 0) {                long timeElapsedToStartLastThread = nowInMillis - lastThreadStartInMillis;                delayForNextThreadInMillis += perThreadDelayInMillis - timeElapsedToStartLastThread;            }            if (log.isDebugEnabled()) {                            }            lastThreadStartInMillis = nowInMillis;            startNewThread(notifier, threadGroupTree, engine, threadNum, context, nowInMillis, Math.max(0, delayForNextThreadInMillis), isSameUserOnNextIteration);        }    }    }
1
private JMeterThread startNewThread(ListenerNotifier notifier, ListedHashTree threadGroupTree, StandardJMeterEngine engine, int threadNum, final JMeterContext context, long now, int delay, Boolean isSameUserOnNextIteration)
{    JMeterThread jmThread = makeThread(notifier, threadGroupTree, engine, threadNum, context, isSameUserOnNextIteration);        scheduleThread(jmThread, now);    jmThread.setInitialDelay(delay);    Thread newThread = new Thread(jmThread, jmThread.getThreadName());    registerStartedThread(jmThread, newThread);    newThread.start();    return jmThread;}
0
private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException
{    in.defaultReadObject();    addThreadLock = new Object();}
0
private void registerStartedThread(JMeterThread jMeterThread, Thread newThread)
{    allThreads.put(jMeterThread, newThread);}
0
private JMeterThread makeThread(ListenerNotifier notifier, ListedHashTree threadGroupTree, StandardJMeterEngine engine, int threadNumber, JMeterContext context, Boolean isSameUserOnNextIteration)
{        boolean onErrorStopTest = getOnErrorStopTest();    boolean onErrorStopTestNow = getOnErrorStopTestNow();    boolean onErrorStopThread = getOnErrorStopThread();    boolean onErrorStartNextLoop = getOnErrorStartNextLoop();    String groupName = getName();    final JMeterThread jmeterThread = new JMeterThread(cloneTree(threadGroupTree), this, notifier, isSameUserOnNextIteration);    jmeterThread.setThreadNum(threadNumber);    jmeterThread.setThreadGroup(this);    jmeterThread.setInitialContext(context);    String distributedPrefix = JMeterUtils.getPropDefault(JMeterUtils.THREAD_GROUP_DISTRIBUTED_PREFIX_PROPERTY_NAME, "");    final String threadName = distributedPrefix + (distributedPrefix.isEmpty() ? "" : "-") + groupName + " " + groupNumber + "-" + (threadNumber + 1);    jmeterThread.setThreadName(threadName);    jmeterThread.setEngine(engine);    jmeterThread.setOnErrorStopTest(onErrorStopTest);    jmeterThread.setOnErrorStopTestNow(onErrorStopTestNow);    jmeterThread.setOnErrorStopThread(onErrorStopThread);    jmeterThread.setOnErrorStartNextLoop(onErrorStartNextLoop);    return jmeterThread;}
0
public JMeterThread addNewThread(int delay, StandardJMeterEngine engine)
{    long now = System.currentTimeMillis();    JMeterContext context = JMeterContextService.getContext();    JMeterThread newJmThread;    int numThreads;    synchronized (addThreadLock) {        numThreads = getNumThreads();        setNumThreads(numThreads + 1);    }    newJmThread = startNewThread(notifier, threadGroupTree, engine, numThreads, context, now, delay, isSameUserOnNextIteration());    JMeterContextService.addTotalThreads(1);        return newJmThread;}
1
public boolean stopThread(String threadName, boolean now)
{    for (Entry<JMeterThread, Thread> threadEntry : allThreads.entrySet()) {        JMeterThread jMeterThread = threadEntry.getKey();        if (jMeterThread.getThreadName().equals(threadName)) {            stopThread(jMeterThread, threadEntry.getValue(), now);            return true;        }    }    return false;}
0
private void stopThread(JMeterThread jmeterThread, Thread jvmThread, boolean interrupt)
{    jmeterThread.stop();        jmeterThread.interrupt();    if (interrupt && jvmThread != null) {                        jvmThread.interrupt();    }}
0
public void threadFinished(JMeterThread thread)
{    if (log.isDebugEnabled()) {            }    allThreads.remove(thread);}
1
public void tellThreadsToStop(boolean now)
{    running = false;    if (delayedStartup) {        try {            threadStarter.interrupt();        } catch (Exception e) {                    }    }    allThreads.forEach((key, value) -> stopThread(key, value, now));}
1
public void tellThreadsToStop()
{    tellThreadsToStop(true);}
0
public void stop()
{    running = false;    if (delayedStartup) {        try {            threadStarter.interrupt();        } catch (Exception e) {                    }    }    allThreads.keySet().forEach(JMeterThread::stop);}
1
public int numberOfActiveThreads()
{    return allThreads.size();}
0
public boolean verifyThreadsStopped()
{    boolean stoppedAll = true;    if (delayedStartup) {        stoppedAll = verifyThreadStopped(threadStarter);    }    for (Thread t : allThreads.values()) {        stoppedAll = stoppedAll && verifyThreadStopped(t);    }    return stoppedAll;}
0
private boolean verifyThreadStopped(Thread thread)
{    boolean stopped = true;    if (thread != null && thread.isAlive()) {        try {            thread.join(WAIT_TO_DIE);        } catch (InterruptedException e) {            Thread.currentThread().interrupt();        }        if (thread.isAlive()) {            stopped = false;            if (log.isWarnEnabled()) {                            }        }    }    return stopped;}
1
public void waitThreadsStopped()
{    if (delayedStartup) {        waitThreadStopped(threadStarter);    }    /* @Bugzilla 60933         * Threads can be added on the fly during a test into allThreads         * we have to check if allThreads is really empty before stopping         */    while (!allThreads.isEmpty()) {        allThreads.values().forEach(this::waitThreadStopped);    }}
0
private void waitThreadStopped(Thread thread)
{    if (thread == null) {        return;    }    while (thread.isAlive()) {        try {            thread.join(WAIT_TO_DIE);        } catch (InterruptedException e) {            Thread.currentThread().interrupt();        }    }}
0
private ListedHashTree cloneTree(ListedHashTree tree)
{    TreeCloner cloner = new TreeCloner(true);    tree.traverse(cloner);    return cloner.getClonedTree();}
0
private void pause(long ms)
{    try {        TimeUnit.MILLISECONDS.sleep(ms);    } catch (InterruptedException e) {        Thread.currentThread().interrupt();    }}
0
private void delayBy(long delay)
{    if (delay > 0) {        long start = System.currentTimeMillis();        long end = start + delay;        long now;                long pause = RAMPUP_GRANULARITY;        while (running && (now = System.currentTimeMillis()) < end) {            long togo = end - now;            if (togo < pause) {                pause = togo;            }                        pause(pause);        }    }}
0
public void run()
{    try {                JMeterContextService.getContext().setVariables(this.context.getVariables());        long endtime = 0;        final boolean usingScheduler = getScheduler();        if (usingScheduler) {                        if (getDelay() > 0) {                                delayBy(getDelay() * 1000);            }                        endtime = getDuration();            if (endtime > 0) {                                endtime = endtime * 1000 + System.currentTimeMillis();            }        }        final int numThreads = getNumThreads();        final float rampUpOriginInMillis = (float) getRampUp() * 1000;        final long startTimeInMillis = System.currentTimeMillis();        final boolean isSameUserOnNextIteration = isSameUserOnNextIteration();        for (int threadNumber = 0; running && threadNumber < numThreads; threadNumber++) {            if (threadNumber > 0) {                long elapsedInMillis = System.currentTimeMillis() - startTimeInMillis;                final int perThreadDelayInMillis = Math.round((rampUpOriginInMillis - elapsedInMillis) / (float) (numThreads - threadNumber));                                pause(Math.max(0, perThreadDelayInMillis));            }            if (usingScheduler && System.currentTimeMillis() > endtime) {                                break;            }            JMeterThread jmThread = makeThread(notifier, threadGroupTree, engine, threadNumber, context, isSameUserOnNextIteration);                        jmThread.setInitialDelay(0);            if (usingScheduler) {                jmThread.setScheduled(true);                jmThread.setEndTime(endtime);            }            Thread newThread = new Thread(jmThread, jmThread.getThreadName());                        newThread.setDaemon(false);            registerStartedThread(jmThread, newThread);            newThread.start();        }    } catch (Exception ex) {            }}
1
public int hashCode()
{    final int prime = 31;    int result = 1;    result = prime * result + ((variables == null) ? 0 : variables.hashCode());    return result;}
0
public String getThreadName()
{    return variables.getThreadName();}
0
public int getIteration()
{    return variables.getIteration();}
0
public void incIteration()
{    throw new UnsupportedOperationException();}
0
public Object remove(String key)
{    throw new UnsupportedOperationException();}
0
public void put(String key, String value)
{    throw new UnsupportedOperationException();}
0
public void putObject(String key, Object value)
{    throw new UnsupportedOperationException();}
0
public void putAll(Map<String, ?> vars)
{    throw new UnsupportedOperationException();}
0
public void putAll(JMeterVariables vars)
{    throw new UnsupportedOperationException();}
0
public String get(String key)
{    return variables.get(key);}
0
public boolean equals(Object obj)
{    if (this == obj) {        return true;    }    if (obj == null) {        return false;    }    if (getClass() != obj.getClass()) {        return false;    }    UnmodifiableJMeterVariables other = (UnmodifiableJMeterVariables) obj;    if (variables == null) {        if (other.variables != null) {            return false;        }    } else if (!variables.equals(other.variables)) {        return false;    }    return true;}
0
public Object getObject(String key)
{    return variables.getObject(key);}
0
public Iterator<Entry<String, Object>> getIterator()
{    return variables.getIterator();}
0
public Set<Entry<String, Object>> entrySet()
{    return variables.entrySet();}
0
public String toString()
{    return variables.toString();}
0
public JPopupMenu createPopupMenu()
{    return MenuFactory.getDefaultTimerMenu();}
0
public Collection<String> getMenuCategories()
{    return Arrays.asList(MenuFactory.TIMERS);}
0
 boolean isModifiable()
{    return true;}
0
 boolean isModifiable()
{    return false;}
0
public static TimerService getInstance()
{    return TimerServiceHolder.INSTANCE;}
0
public long adjustDelay(final long initialDelay)
{    return adjustDelay(initialDelay, true);}
0
public long adjustDelay(final long initialDelay, boolean runTillEnd)
{    JMeterThread thread = JMeterContextService.getContext().getThread();    long endTime = thread != null ? thread.getEndTime() : 0;    return adjustDelay(initialDelay, endTime, runTillEnd);}
0
public long adjustDelay(final long initialDelay, long endTime)
{    return adjustDelay(initialDelay, endTime, true);}
0
public long adjustDelay(final long initialDelay, long endTime, boolean runTillEnd)
{    if (endTime > 0) {        long now = System.currentTimeMillis();        if (initialDelay > endTime - now) {            if (runTillEnd) {                                return endTime - now;            }            return -1;        }    }    return initialDelay;}
0
private void init() throws ClassNotFoundException
{    if (bshClass == null) {        throw new ClassNotFoundException(BSH_INTERPRETER);    }    try {        bshInstance = bshClass.getDeclaredConstructor().newInstance();    } catch (IllegalArgumentException | ReflectiveOperationException | SecurityException e) {                throw new ClassNotFoundException("Can't instantiate BeanShell", e);    }    if (logger != null) {                try {                        set("log", logger);        } catch (JMeterException e) {                    }    }    if (StringUtils.isNotBlank(initFile)) {        String fileToUse = initFile;                File in = new File(fileToUse);        if (!in.exists()) {                        fileToUse = JMeterUtils.getJMeterHome() + File.separator +             "bin" + File.separator + initFile;            in = new File(fileToUse);            if (!in.exists()) {                            }        }        if (!in.canRead()) {                    }        try {            source(fileToUse);        } catch (JMeterException e) {                    }    }}
1
public void reset() throws ClassNotFoundException
{    init();}
0
private Object bshInvoke(Method m, Object[] o, boolean shouldLog) throws JMeterException
{    Object r = null;    final String errorString = "Error invoking bsh method: ";    try {        r = m.invoke(bshInstance, o);    } catch (IllegalArgumentException | IllegalAccessException e) {                final String message = errorString + m.getName();                throw new JMeterError(message, e);    } catch (InvocationTargetException e) {                                String message = errorString + m.getName();        Throwable cause = e.getCause();        if (cause != null) {            message += "\t" + cause.getLocalizedMessage();        }        if (shouldLog) {                    }        throw new JMeterException(message, e);    }    return r;}
1
public Object eval(String s) throws JMeterException
{    return bshInvoke(bshEval, new Object[] { s }, true);}
0
public Object evalNoLog(String s) throws JMeterException
{    return bshInvoke(bshEval, new Object[] { s }, false);}
0
public Object set(String s, Object o) throws JMeterException
{    return bshInvoke(bshSet, new Object[] { s, o }, true);}
0
public Object set(String s, boolean b) throws JMeterException
{    return bshInvoke(bshSet, new Object[] { s, Boolean.valueOf(b) }, true);}
0
public Object source(String s) throws JMeterException
{    return bshInvoke(bshSource, new Object[] { s }, true);}
0
public Object get(String s) throws JMeterException
{    return bshInvoke(bshGet, new Object[] { s }, true);}
0
public static boolean isInterpreterPresent()
{    return bshClass != null;}
0
 static String getprop(String s)
{    return JMeterUtils.getPropDefault(s, s);}
0
 static void setprop(String s, String v)
{    JMeterUtils.getJMeterProperties().setProperty(s, v);}
0
public void run()
{    ClassLoader loader = Thread.currentThread().getContextClassLoader();    try {                Class<?> interpreter = loader.loadClass("bsh.Interpreter");        Object instance = interpreter.getDeclaredConstructor().newInstance();        Class<String> string = String.class;        Class<Object> object = Object.class;                Method eval = interpreter.getMethod("eval", string);                Method setObj = interpreter.getMethod("set", string, object);                Method setInt = interpreter.getMethod("set", string, int.class);                Method source = interpreter.getMethod("source", string);                setObj.invoke(instance, "t", this);                setInt.invoke(instance, "portnum", Integer.valueOf(serverport));        if (serverfile.length() > 0) {            try {                source.invoke(instance, serverfile);            } catch (InvocationTargetException ite) {                Throwable cause = ite.getCause();                if (log.isWarnEnabled()) {                                    }                if (cause instanceof Error) {                    throw (Error) cause;                }            }        }                eval.invoke(instance, "setAccessibility(true);");                eval.invoke(instance, "server(portnum);");    } catch (ClassNotFoundException e) {            } catch (Exception e) {            }}
1
protected BeanShellInterpreter getBeanShellInterpreter()
{    if (isResetInterpreter()) {        try {            bshInterpreter.reset();        } catch (ClassNotFoundException e) {                    }    }    JMeterContext jmctx = JMeterContextService.getContext();    JMeterVariables vars = jmctx.getVariables();    try {                bshInterpreter.set("ctx", jmctx);                bshInterpreter.set("Label", getName());                bshInterpreter.set("prev", jmctx.getPreviousResult());        bshInterpreter.set("props", JMeterUtils.getJMeterProperties());                bshInterpreter.set("vars", vars);    } catch (JMeterException e) {            }    return bshInterpreter;}
1
private void init()
{            parameters = "";    filename = "";    script = "";    try {        String initFileName = JMeterUtils.getProperty(getInitFileProperty());        hasInitFile = initFileName != null;        bshInterpreter = new BeanShellInterpreter(initFileName, log);    } catch (ClassNotFoundException e) {            }}
1
protected Object readResolve()
{    init();    return this;}
0
public Object clone()
{    BeanShellTestElement o = (BeanShellTestElement) super.clone();    o.init();    return o;}
0
protected Object processFileOrScript(BeanShellInterpreter bsh) throws JMeterException
{    String fileName = getFilename();    String params = getParameters();        bsh.set("FileName", fileName);            bsh.set("Parameters", params);            bsh.set(    "bsh.args",     JOrphanUtils.split(params, " "));    if (fileName.length() == 0) {        return bsh.eval(getScript());    }    return bsh.source(fileName);}
0
public String getScript()
{    return script;}
0
public void setScript(String s)
{    script = s;}
0
public void threadStarted()
{    if (bshInterpreter == null || !hasInitFile) {        return;    }    try {                bshInterpreter.evalNoLog("threadStarted()");    } catch (JMeterException e) {                    }}
1
public void threadFinished()
{    if (bshInterpreter == null || !hasInitFile) {        return;    }    try {                bshInterpreter.evalNoLog("threadFinished()");    } catch (JMeterException e) {                    }}
1
public void testEnded()
{    if (bshInterpreter == null || !hasInitFile) {        return;    }    try {                bshInterpreter.evalNoLog("testEnded()");    } catch (JMeterException e) {                    }}
1
public void testEnded(String host)
{    if (bshInterpreter == null || !hasInitFile) {        return;    }    try {        bshInterpreter.eval("testEnded(\"" + host + "\")");    } catch (JMeterException e) {                    }}
1
public void testStarted()
{    if (bshInterpreter == null || !hasInitFile) {        return;    }    try {                bshInterpreter.evalNoLog("testStarted()");    } catch (JMeterException e) {                    }}
1
public void testStarted(String host)
{    if (bshInterpreter == null || !hasInitFile) {        return;    }    try {        bshInterpreter.eval("testStarted(\"" + host + "\")");    } catch (JMeterException e) {                    }}
1
public String getParameters()
{    return parameters;}
0
public void setParameters(String s)
{    parameters = s;}
0
public String getFilename()
{    return filename;}
0
public void setFilename(String s)
{    filename = s;}
0
public boolean isResetInterpreter()
{    return resetInterpreter;}
0
public void setResetInterpreter(boolean b)
{    resetInterpreter = b;}
0
public Object call(Object object, String method, Object[] args) throws BSFException
{    Object retval = null;    Context cx;    try {        cx = Context.enter();                Object fun = global.get(method, global);                if (fun == Scriptable.NOT_FOUND) {            throw new EvaluatorException("function " + method + " not found.", "none", 0);        }        cx.setOptimizationLevel(-1);        cx.setGeneratingDebug(false);        cx.setGeneratingSource(false);        cx.setOptimizationLevel(0);        cx.setDebugger(null, null);        retval = ((Function) fun).call(cx, global, global, args);        if (retval instanceof Wrapper) {            retval = ((Wrapper) retval).unwrap();        }    } catch (Throwable t) {                handleError(t);    } finally {        Context.exit();    }    return retval;}
0
public void declareBean(BSFDeclaredBean bean) throws BSFException
{    if ((bean.bean instanceof Number) || (bean.bean == null) || (bean.bean instanceof String) || (bean.bean instanceof Boolean)) {        global.put(bean.name, global, bean.bean);    } else {                Scriptable wrapped = Context.toObject(bean.bean, global);        global.put(bean.name, global, wrapped);    }}
0
public Object eval(String source, int lineNo, int columnNo, Object oscript) throws BSFException
{    String scriptText = oscript.toString();    Object retval = null;    Context cx;    try {        cx = Context.enter();        cx.setOptimizationLevel(-1);        cx.setGeneratingDebug(false);        cx.setGeneratingSource(false);        cx.setOptimizationLevel(0);        cx.setDebugger(null, null);        retval = cx.evaluateString(global, scriptText, source, lineNo, null);        if (retval instanceof NativeJavaObject) {            retval = ((NativeJavaObject) retval).unwrap();        }    } catch (Throwable t) {                handleError(t);    } finally {        Context.exit();    }    return retval;}
0
private void handleError(Throwable t) throws BSFException
{    Throwable target = t;    if (t instanceof WrappedException) {        target = ((WrappedException) t).getWrappedException();    }    String message = null;    if (target instanceof JavaScriptException) {        message = target.getLocalizedMessage();                Object value = ((JavaScriptException) target).getValue();        if (value instanceof Throwable) {                                    target = (Throwable) value;        }    } else if (target instanceof EvaluatorException || target instanceof SecurityException) {        message = target.getLocalizedMessage();    } else if (target instanceof RuntimeException) {        message = "Internal Error: " + target.toString();    } else if (target instanceof StackOverflowError) {        message = "Stack Overflow";    }    if (message == null) {        message = target.toString();    }    if (target instanceof Error && !(target instanceof StackOverflowError)) {                throw (Error) target;    } else {        throw new BSFException(BSFException.REASON_OTHER_ERROR, "JavaScript Error: " + message, target);    }}
0
public void initialize(BSFManager mgr, String lang, @SuppressWarnings("rawtypes") Vector declaredBeans) throws BSFException
{    super.initialize(mgr, lang, declaredBeans);        try {        Context cx = Context.enter();        global = new ImporterTopLevel(cx);        Scriptable bsf = Context.toObject(new BSFFunctions(mgr, this), global);        global.put("bsf", global, bsf);                @SuppressWarnings("unchecked")        final Vector<BSFDeclaredBean> beans = declaredBeans;        for (BSFDeclaredBean declaredBean : beans) {            declareBean(declaredBean);        }    } catch (Throwable t) {                handleError(t);    } finally {        Context.exit();    }}
0
public void undeclareBean(BSFDeclaredBean bean) throws BSFException
{    global.delete(bean.name);}
0
protected BSFManager getManager() throws BSFException
{    BSFManager mgr = new BSFManager();    initManager(mgr);    return mgr;}
0
protected void initManager(BSFManager mgr) throws BSFException
{    final String label = getName();    final String fileName = getFilename();    final String scriptParameters = getParameters();        final Logger logger = LoggerFactory.getLogger(getClass());        mgr.declareBean("log", logger, Logger.class);        mgr.declareBean("Label", label, String.class);        mgr.declareBean("FileName", fileName, String.class);        mgr.declareBean("Parameters", scriptParameters, String.class);        String[] args = JOrphanUtils.split(scriptParameters, " ");        mgr.declareBean("args", args, args.getClass());        JMeterContext jmctx = JMeterContextService.getContext();    JMeterVariables vars = jmctx.getVariables();    Properties props = JMeterUtils.getJMeterProperties();        mgr.declareBean("ctx", jmctx, jmctx.getClass());        mgr.declareBean("vars", vars, vars.getClass());        mgr.declareBean("props", props, props.getClass());            mgr.declareBean("OUT", System.out, PrintStream.class);        Sampler sampler = jmctx.getCurrentSampler();    mgr.declareBean("sampler", sampler, Sampler.class);    SampleResult prev = jmctx.getPreviousResult();    mgr.declareBean("prev", prev, SampleResult.class);}
0
protected void processFileOrScript(BSFManager mgr) throws BSFException
{    BSFEngine bsfEngine = mgr.loadScriptingEngine(getScriptLanguage());    final String scriptFile = getFilename();    if (scriptFile.length() == 0) {        bsfEngine.exec("[script]", 0, 0, getScript());    } else {                try {            String script = FileUtils.readFileToString(new File(scriptFile), Charset.defaultCharset());            bsfEngine.exec(scriptFile, 0, 0, script);        } catch (IOException e) {            if (log.isWarnEnabled()) {                            }            throw new BSFException(BSFException.REASON_IO_ERROR, "Problem reading script file", e);        }    }}
1
protected Object evalFileOrScript(BSFManager mgr) throws BSFException
{    BSFEngine bsfEngine = mgr.loadScriptingEngine(getScriptLanguage());    final String scriptFile = getFilename();    if (scriptFile.length() == 0) {        return bsfEngine.eval("[script]", 0, 0, getScript());    } else {                try {            String script = FileUtils.readFileToString(new File(scriptFile), Charset.defaultCharset());            return bsfEngine.eval(scriptFile, 0, 0, script);        } catch (IOException e) {            if (log.isWarnEnabled()) {                            }            throw new BSFException(BSFException.REASON_IO_ERROR, "Problem reading script file", e);        }    }}
1
public String getScriptLanguage()
{    return scriptLanguage;}
0
public void setScriptLanguage(String s)
{    scriptLanguage = s;}
0
public void clear()
{    maximum = Long.MIN_VALUE;    minimum = Long.MAX_VALUE;    sum = 0;    sumOfSquares = 0;    mean = 0;    deviation = 0;    count = 0;    bytes = 0;    sentBytes = 0;    errors = 0;    startTime = 0;    elapsedTime = 0;}
0
private void addValue(long newValue, int sampleCount)
{    count += sampleCount;    double currentVal = newValue;    sum += currentVal;    if (sampleCount > 1) {        minimum = Math.min(newValue / sampleCount, minimum);        maximum = Math.max(newValue / sampleCount, maximum);                        sumOfSquares += (currentVal * currentVal) / sampleCount;    } else {                minimum = Math.min(newValue, minimum);        maximum = Math.max(newValue, maximum);        sumOfSquares += currentVal * currentVal;    }        mean = sum / count;    deviation = Math.sqrt((sumOfSquares / count) - (mean * mean));}
0
public void addSample(SampleResult res)
{    addBytes(res.getBytesAsLong());    addSentBytes(res.getSentBytes());    addValue(res.getTime(), res.getSampleCount());        errors += res.getErrorCount();    if (startTime == 0) {                startTime = res.getStartTime();    } else {        startTime = Math.min(startTime, res.getStartTime());    }    elapsedTime = Math.max(elapsedTime, res.getEndTime() - startTime);}
0
public void addBytes(long newValue)
{    bytes += newValue;}
0
private void addSentBytes(long value)
{    sentBytes += value;}
0
public long getTotalBytes()
{    return bytes;}
0
public double getMean()
{    return mean;}
0
public Number getMeanAsNumber()
{    return Long.valueOf((long) mean);}
0
public double getStandardDeviation()
{    return deviation;}
0
public long getMin()
{    return minimum;}
0
public long getMax()
{    return maximum;}
0
public int getCount()
{    return count;}
0
public String getLabel()
{    return label;}
0
public double getErrorPercentage()
{    double rval = 0.0;    if (count == 0) {        return rval;    }    rval = (double) errors / (double) count;    return rval;}
0
public double getRate()
{    return getRatePerSecond(count);}
0
public double getAvgPageBytes()
{    if (count > 0 && bytes > 0) {        return (double) bytes / count;    }    return 0.0;}
0
public double getBytesPerSecond()
{    return getRatePerSecond(bytes);}
0
public double getKBPerSecond()
{        return getBytesPerSecond() / 1024;}
0
public double getSentBytesPerSecond()
{    return getRatePerSecond(sentBytes);}
0
public double getSentKBPerSecond()
{        return getSentBytesPerSecond() / 1024;}
0
private double getRatePerSecond(long value)
{    if (elapsedTime > 0) {                return value / ((double) elapsedTime / 1000);    }    return 0.0;}
0
public static Color changeColorCyclicIncrement(Color col, int inc)
{    int red = col.getRed();    int green = col.getGreen();    int blue = col.getBlue();    int temp1 = Math.min(red, green);    int temp2 = Math.min(temp1, blue);        if (red == temp2) {        red += inc;        red %= 256;    } else if (green == temp2) {        green += inc;        green %= 256;    } else if (blue == temp2) {        blue += inc;        blue %= 256;    }    return new Color(red, green, blue);}
0
public void pause(int bytes)
{    long sleepMS = (bytes * MS_PER_SEC) / charactersPerSecond;        int sleepNS = Long.valueOf(sleepMS % NS_PER_MS).intValue();    try {        if (sleepMS > 0 || sleepNS > 0) {            Thread.sleep(sleepMS, sleepNS);        }    } catch (InterruptedException ignored) {                Thread.currentThread().interrupt();    }}
0
public void checkClientTrusted(X509Certificate[] certificates, String authType)
{    if (log.isDebugEnabled() && certificates != null) {        for (int i = 0; i < certificates.length; i++) {            X509Certificate cert = certificates[i];                    }    }}
1
public void checkServerTrusted(X509Certificate[] certificates, String authType) throws CertificateException
{    if (log.isDebugEnabled() && certificates != null) {        for (int i = 0; i < certificates.length; i++) {            X509Certificate cert = certificates[i];                    }    }}
1
public X509Certificate[] getAcceptedIssuers()
{    return this.defaultTrustManager.getAcceptedIssuers();}
0
public static String getTextFromDocument(byte[] document)
{        String errMissingTika = JMeterUtils.getResString("view_results_response_missing_tika");    String response = errMissingTika;    Parser parser = new AutoDetectParser();        ContentHandler handler = new BodyContentHandler(MAX_DOCUMENT_SIZE > 0 ? MAX_DOCUMENT_SIZE : -1);    Metadata metadata = new Metadata();    ParseContext context = new ParseContext();        InputStream stream = new ByteArrayInputStream(document);    try {        parser.parse(stream, handler, metadata, context);        response = handler.toString();    } catch (Exception e) {        response = e.toString();            } catch (NoClassDefFoundError e) {                if (!System.getProperty("java.class.path").contains("tika-app")) {                                } else {                    }    } finally {        try {                        stream.close();        } catch (IOException ioe) {                                }    }    if (response.length() == 0 && document.length > 0) {                        response = errMissingTika;    }    return response;}
1
private void configureSocket(Socket socket)
{    if (!(socket instanceof SSLSocket)) {        throw new IllegalArgumentException("Expected SSLSocket");    }    SSLSocket sock = (SSLSocket) socket;    if (!PROTOCOL_LIST.isEmpty()) {        try {            sock.setEnabledProtocols(protocols);        } catch (IllegalArgumentException e) {                        if (log.isWarnEnabled()) {                                            }        }    }    if (!CIPHER_LIST.isEmpty()) {        try {            sock.setEnabledCipherSuites(ciphers);        } catch (IllegalArgumentException e) {                        if (log.isWarnEnabled()) {                                            }        }    }}
1
private String join(String[] strings)
{    StringBuilder sb = new StringBuilder();    for (int i = 0; i < strings.length; i++) {        if (i > 0) {            sb.append(' ');        }        sb.append(strings[i]);    }    return sb.toString();}
0
private SSLSocketFactory getSSLSocketFactory() throws IOException
{    try {        SSLContext sslContext = ((JsseSSLManager) SSLManager.getInstance()).getContext();        return sslContext.getSocketFactory();    } catch (GeneralSecurityException ex) {        throw new IOException("Rethrown as IOE", ex);    }}
0
private Socket wrapSocket(Socket sock)
{    if (CPS > 0) {        return new SlowSSLSocket((SSLSocket) sock, CPS);    }    return sock;}
0
public Socket createSocket() throws IOException, UnknownHostException
{    SSLSocketFactory sslfac = getSSLSocketFactory();    Socket sock = sslfac.createSocket();    configureSocket(sock);    return wrapSocket(sock);}
0
public Socket createSocket(InetAddress host, int port) throws IOException
{    SSLSocketFactory sslfac = getSSLSocketFactory();    Socket sock = sslfac.createSocket(host, port);    configureSocket(sock);    return wrapSocket(sock);}
0
public Socket createSocket(InetAddress address, int port, InetAddress localAddress, int localPort) throws IOException
{    SSLSocketFactory sslfac = getSSLSocketFactory();    Socket sock = sslfac.createSocket(address, port, localAddress, localPort);    configureSocket(sock);    return wrapSocket(sock);}
0
public String[] getDefaultCipherSuites()
{    try {        SSLSocketFactory sslfac = getSSLSocketFactory();        return sslfac.getDefaultCipherSuites();    } catch (IOException ex) {        return new String[] {};    }}
0
public String[] getSupportedCipherSuites()
{    try {        SSLSocketFactory sslfac = getSSLSocketFactory();        return sslfac.getSupportedCipherSuites();    } catch (IOException ex) {        return new String[] {};    }}
0
public Socket createSocket(Socket s, String host, int port, boolean autoClose) throws IOException
{    SSLSocketFactory sslfac = getSSLSocketFactory();    Socket sock = sslfac.createSocket(s, host, port, autoClose);    configureSocket(sock);    return wrapSocket(sock);}
0
public Socket createSocket(String host, int port) throws IOException, UnknownHostException
{    SSLSocketFactory sslfac = getSSLSocketFactory();    Socket sock = sslfac.createSocket(host, port);    configureSocket(sock);    return wrapSocket(sock);}
0
public Socket createSocket(String host, int port, InetAddress inetAddress, int localPort) throws IOException, UnknownHostException
{    SSLSocketFactory sslfac = getSSLSocketFactory();    Socket sock = sslfac.createSocket(host, port, inetAddress, localPort);    configureSocket(sock);    return wrapSocket(sock);}
0
public DataFlavor[] getTransferDataFlavors()
{    return DATA_FLAVORS;}
0
public boolean isDataFlavorSupported(DataFlavor flavor)
{    return flavor.match(JMETER_TREE_NODE_ARRAY_DATA_FLAVOR);}
0
public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException
{    if (!isDataFlavorSupported(flavor)) {        throw new UnsupportedFlavorException(flavor);    }    if (data != null) {        ObjectInput ois = null;        try {            ois = new ObjectInputStream(new ByteArrayInputStream(data));            JMeterTreeNode[] nodes = (JMeterTreeNode[]) ois.readObject();            return nodes;        } catch (ClassNotFoundException cnfe) {            throw new IOException("Failed to read object stream.", cnfe);        } finally {            if (ois != null) {                try {                    ois.close();                } catch (Exception e) {                                }            }        }    }    return null;}
0
public void setTransferData(JMeterTreeNode[] nodes) throws IOException
{    ByteArrayOutputStream bos = new ByteArrayOutputStream();    ObjectOutputStream oos = null;    try {        oos = new ObjectOutputStream(bos);        oos.writeObject(nodes);        data = bos.toByteArray();    } finally {        if (oos != null) {            try {                oos.close();            } catch (Exception e) {                        }        }    }}
0
public static Perl5Matcher getMatcher()
{    return localMatcher.get();}
0
public static Properties getProperties(String file)
{    loadJMeterProperties(file);    initLocale();    return appProperties;}
0
public static void initLogging()
{}
0
public static void initLocale()
{        String loc = appProperties.getProperty("language");    if (loc != null) {                String[] parts = JOrphanUtils.split(loc, "_");        if (parts.length == 2) {            setLocale(new Locale(parts[0], parts[1]));        } else {                        setLocale(new Locale(loc, ""));        }    } else {        setLocale(Locale.getDefault());    }}
0
public static void loadJMeterProperties(String file)
{    Properties p = new Properties(System.getProperties());    InputStream is = null;    try {        File f = new File(file);        is = new FileInputStream(f);        p.load(is);    } catch (IOException e) {        try {            is = ClassLoader.getSystemResourceAsStream(            "org/apache/jmeter/jmeter.properties");            if (is == null) {                throw new RuntimeException("Could not read JMeter properties file:" + file);            }            p.load(is);        } catch (IOException ex) {            throw new RuntimeException("Could not read JMeter properties file:" + file);        }    } finally {        JOrphanUtils.closeQuietly(is);    }    appProperties = p;}
0
public static Properties loadProperties(String file)
{    return loadProperties(file, null);}
0
public static Properties loadProperties(String file, Properties defaultProps)
{    Properties p = new Properties(defaultProps);    InputStream is = null;    try {        File f = new File(file);        is = new FileInputStream(f);        p.load(is);    } catch (IOException e) {        try {            final URL resource = JMeterUtils.class.getClassLoader().getResource(file);            if (resource == null) {                                return defaultProps;            }            is = resource.openStream();            if (is == null) {                                return defaultProps;            }            p.load(is);        } catch (IOException ex) {                        return defaultProps;        }    } finally {        JOrphanUtils.closeQuietly(is);    }    return p;}
1
public static PatternCacheLRU getPatternCache()
{    return LazyPatternCacheHolder.INSTANCE;}
0
public static Pattern getPattern(String expression) throws MalformedCachePatternException
{    return getPattern(expression, Perl5Compiler.READ_ONLY_MASK);}
0
public static Pattern getPattern(String expression, int options) throws MalformedCachePatternException
{    return LazyPatternCacheHolder.INSTANCE.getPattern(expression, options);}
0
public void initializeProperties(String file)
{        System.out.println("Initializing Properties: " + file);    getProperties(file);}
0
public static List<String> findClassesThatExtend(Class<?> superClass) throws IOException
{    return ClassFinder.findClassesThatExtend(getSearchPaths(), new Class[] { superClass }, false);}
0
public static String[] getSearchPaths()
{        String p = JMeterUtils.getPropDefault("search_paths", null);    String[] result = new String[1];    if (p != null) {                String[] paths = p.split(";");        result = new String[paths.length + 1];        System.arraycopy(paths, 0, result, 1, paths.length);    }        result[0] = getJMeterHome() + "/lib/ext";    return result;}
0
public static int getRandomInt(int r)
{    return ThreadLocalRandom.current().nextInt(r);}
0
public static void setLocale(Locale loc)
{        /*         * See bug 29920. getBundle() defaults to the property file for the         * default Locale before it defaults to the base property file, so we         * need to change the default Locale to ensure the base property file is         * found.         */    Locale def = null;        boolean isDefault = false;    if (loc.getLanguage().equals(ENGLISH_LANGUAGE)) {        isDefault = true;        def = Locale.getDefault();                if (!def.getLanguage().equals(ENGLISH_LANGUAGE)) {            Locale.setDefault(Locale.ENGLISH);        } else {                        def = null;        }    }    if ("ignoreResources".equals(loc.toString())) {                        ignoreResources = true;        } else {        ignoreResources = false;                ResourceBundle resBund = ResourceBundle.getBundle("org.apache.jmeter.resources.messages", loc);        resources = resBund;        locale = loc;        final Locale resBundLocale = resBund.getLocale();        if (!isDefault && !resBundLocale.equals(loc)) {                        if (resBundLocale.getLanguage().equals(loc.getLanguage())) {                            } else {                            }        }    }    notifyLocaleChangeListeners();    /*         * Reset Locale if necessary so other locales are properly handled         */    if (def != null) {        Locale.setDefault(def);    }}
1
public static Locale getLocale()
{    return locale;}
0
public static void addLocaleChangeListener(LocaleChangeListener listener)
{    localeChangeListeners.add(listener);}
0
public static void removeLocaleChangeListener(LocaleChangeListener listener)
{    localeChangeListeners.remove(listener);}
0
private static void notifyLocaleChangeListeners()
{    LocaleChangeEvent event = new LocaleChangeEvent(JMeterUtils.class, locale);        @SuppressWarnings("unchecked")    Vector<LocaleChangeListener>     listeners = (Vector<LocaleChangeListener>) localeChangeListeners.clone();    for (LocaleChangeListener listener : listeners) {        listener.localeChanged(event);    }}
0
public static String getResString(String key)
{        return getResStringDefault(key, RES_KEY_PFX + key + "]");}
0
public static String getResString(String key, Locale forcedLocale)
{    return getResStringDefault(    key,     RES_KEY_PFX + key + "]", forcedLocale);}
0
public static String getResString(String key, String defaultValue)
{    return getResStringDefault(key, defaultValue);}
0
private static String getResStringDefault(String key, String defaultValue)
{    return getResStringDefault(key, defaultValue, null);}
0
private static String getResStringDefault(String key, String defaultValue, Locale forcedLocale)
{    if (key == null) {        return null;    }            String resKey = key.replace(' ', '_');    resKey = resKey.toLowerCase(java.util.Locale.ENGLISH);    String resString = null;    try {        ResourceBundle bundle = resources;        if (forcedLocale != null || bundle == null) {            bundle = getBundle(forcedLocale);        }        if (bundle.containsKey(resKey)) {            resString = bundle.getString(resKey);        } else {            if (defaultValue == null) {                            } else {                            }            resString = defaultValue;        }        if (ignoreResources) {                        return "[" + key + "]";        }    } catch (MissingResourceException mre) {                if (ignoreResources) {                        return "[?" + key + "?]";        }        if (defaultValue == null) {                    } else {                    }        resString = defaultValue;    }    return resString;}
1
private static ResourceBundle getBundle(Locale forcedLocale)
{    for (Locale locale : Arrays.asList(forcedLocale, getLocale())) {        if (locale != null) {                        ResourceBundle bundle = ResourceBundle.getBundle("org.apache.jmeter.resources.messages", locale);            if (bundle == null) {                            } else {                return bundle;            }        }    }    return new DummyResourceBundle();}
1
protected Object handleGetObject(String key)
{    return "[" + key + "]";}
0
public Enumeration<String> getKeys()
{    return Collections.emptyEnumeration();}
0
public static String getParsedLabel(String key)
{    String value = JMeterUtils.getResString(key);    if (value != null) {                return value.replaceFirst("(?m)\\s*?:\\s*$", "");    } else {        return null;    }}
0
public static String getLocaleString(String locale)
{        String resKey = locale.toLowerCase(java.util.Locale.ENGLISH);    if (resources.containsKey(resKey)) {        return resources.getString(resKey);    }    return locale;}
0
public static Properties getJMeterProperties()
{    return appProperties;}
0
public static ImageIcon getImage(String name)
{    try {        URL url = JMeterUtils.class.getClassLoader().getResource("org/apache/jmeter/images/" + name.trim());        if (url != null) {                        return new ImageIcon(url);        } else {                        return null;        }    } catch (NoClassDefFoundError | InternalError e) {                        return null;    }}
1
public static ImageIcon getImage(String name, String description)
{    ImageIcon icon = getImage(name);    if (icon != null) {        icon.setDescription(description);    }    return icon;}
0
public static String getResourceFileAsText(String name)
{    try {                String lineEnd = System.getProperty("line.separator");        InputStream is = JMeterUtils.class.getClassLoader().getResourceAsStream(name);        if (is != null) {            try (Reader in = new InputStreamReader(is);                BufferedReader fileReader = new BufferedReader(in)) {                return fileReader.lines().collect(Collectors.joining(lineEnd, "", lineEnd));            }        } else {                        return "";        }    } catch (IOException e) {                return "";    }}
0
public static int getPropDefault(String propName, int defaultVal)
{    try {        return Integer.parseInt(appProperties.getProperty(propName, Integer.toString(defaultVal)).trim());    } catch (Exception e) {            }    return defaultVal;}
1
public static boolean getPropDefault(String propName, boolean defaultVal)
{    try {        String strVal = appProperties.getProperty(propName, Boolean.toString(defaultVal)).trim();        if ("true".equalsIgnoreCase(strVal) || "t".equalsIgnoreCase(strVal)) {                        return true;        } else if ("false".equalsIgnoreCase(strVal) || "f".equalsIgnoreCase(strVal)) {                        return false;        } else {            return Integer.parseInt(strVal) == 1;        }    } catch (Exception e) {            }    return defaultVal;}
1
public static long getPropDefault(String propName, long defaultVal)
{    try {        return Long.parseLong(appProperties.getProperty(propName, Long.toString(defaultVal)).trim());    } catch (Exception e) {            }    return defaultVal;}
1
public static float getPropDefault(String propName, float defaultVal)
{    try {        return Float.parseFloat(appProperties.getProperty(propName, Float.toString(defaultVal)).trim());    } catch (Exception e) {            }    return defaultVal;}
1
public static String getPropDefault(String propName, String defaultVal)
{    try {        String value = appProperties.getProperty(propName, defaultVal);        if (value != null) {            return value.trim();        }    } catch (Exception e) {            }    return defaultVal;}
1
public static String getProperty(String propName)
{    try {        return appProperties.getProperty(propName);    } catch (Exception e) {            }    return null;}
1
public static Object setProperty(String propName, String propValue)
{    return appProperties.setProperty(propName, propValue);}
0
public static void reportErrorToUser(String errorMsg)
{        reportErrorToUser(errorMsg, JMeterUtils.getResString("error_title"), null);}
0
public static void reportErrorToUser(String errorMsg, String titleMsg)
{    reportErrorToUser(errorMsg, titleMsg, null);}
0
public static void reportErrorToUser(String errorMsg, Exception exception)
{    reportErrorToUser(errorMsg, JMeterUtils.getResString("error_title"), exception);}
0
public static void reportErrorToUser(String errorMsg, String titleMsg, Exception exception)
{    if (errorMsg == null) {        errorMsg = "Unknown error - see log file";            }    GuiPackage instance = GuiPackage.getInstance();    if (instance == null) {        if (exception != null) {                    } else {                    }                System.out.println(errorMsg);                return;    }    try {        JOptionPane.showMessageDialog(instance.getMainFrame(), formatMessage(errorMsg), titleMsg, JOptionPane.ERROR_MESSAGE);    } catch (HeadlessException e) {            }}
1
public static void reportInfoToUser(String msg, String titleMsg)
{    GuiPackage instance = GuiPackage.getInstance();    if (instance == null) {                        System.out.println(msg);                return;    }    try {        JOptionPane.showMessageDialog(instance.getMainFrame(), formatMessage(msg), titleMsg, JOptionPane.INFORMATION_MESSAGE);    } catch (HeadlessException e) {            }}
1
private static JScrollPane formatMessage(String errorMsg)
{    JTextArea ta = new JTextArea(10, 50);    ta.setText(errorMsg);    ta.setWrapStyleWord(true);    ta.setLineWrap(true);    ta.setCaretPosition(0);    ta.setEditable(false);    return new JScrollPane(ta);}
0
public static String unsplit(Object[] splittee, Object splitChar)
{    return JOrphanUtils.unsplit(splittee, splitChar);}
0
public static String unsplit(Object[] splittee, Object splitChar, String def)
{    StringBuilder retVal = new StringBuilder();    int count = -1;    while (++count < splittee.length) {        if (splittee[count] != null) {            retVal.append(splittee[count]);        } else {            retVal.append(def);        }        if (count + 1 < splittee.length) {            retVal.append(splitChar);        }    }    return retVal.toString();}
0
public static boolean isTestRunning()
{    return JMeterContextService.getTestStartTime() > 0;}
0
public static String getJMeterHome()
{    return jmDir;}
0
public static String getJMeterBinDir()
{    return jmBin;}
0
public static void setJMeterHome(String home)
{    jmDir = home;        jmBin = jmDir + File.separator + "bin";}
0
public static String getJMeterVersion()
{    return JMeterVersion.getVERSION();}
0
public static String getJMeterCopyright()
{    return JMeterVersion.getCopyRight();}
0
public static boolean isExpertMode()
{    return JMeterUtils.getPropDefault(EXPERT_MODE_PROPERTY, false);}
0
public static File findFile(String fileName)
{    File f = new File(fileName);    if (!f.exists()) {        f = new File(getJMeterBinDir(), fileName);    }    return f;}
0
public static synchronized String getLocalHostIP()
{    if (localHostIP == null) {        getLocalHostDetails();    }    return localHostIP;}
0
public static synchronized String getLocalHostName()
{    if (localHostName == null) {        getLocalHostDetails();    }    return localHostName;}
0
public static synchronized String getLocalHostFullName()
{    if (localHostFullName == null) {        getLocalHostDetails();    }    return localHostFullName;}
0
private static void getLocalHostDetails()
{    InetAddress localHost = null;    try {        localHost = InetAddress.getLocalHost();    } catch (UnknownHostException e1) {                        return;    }    localHostIP = localHost.getHostAddress();    localHostName = localHost.getHostName();    localHostFullName = localHost.getCanonicalHostName();}
1
public static LinkedHashMap<String, String> parseHeaders(String headers)
{    LinkedHashMap<String, String> linkedHeaders = new LinkedHashMap<>();        String[] list = headers.split("\n");    for (String header : list) {                int colon = header.indexOf(':');        if (colon <= 0) {                        linkedHeaders.put(header, "");        } else {            linkedHeaders.put(header.substring(0, colon).trim(), header.substring(colon + 1).trim());        }    }    return linkedHeaders;}
0
public static void runSafe(Runnable runnable)
{    runSafe(true, runnable);}
0
public static void runSafe(boolean synchronous, Runnable runnable)
{    if (SwingUtilities.isEventDispatchThread()) {                runnable.run();    } else {        if (synchronous) {            try {                SwingUtilities.invokeAndWait(runnable);            } catch (InterruptedException e) {                                Thread.currentThread().interrupt();            } catch (InvocationTargetException e) {                throw new Error(e);            }        } else {            SwingUtilities.invokeLater(runnable);        }    }}
1
public static void helpGC()
{        System.gc();    System.runFinalization();}
0
public static void clearMatcherMemory(Perl5Matcher matcher, Pattern pattern)
{    try {        if (pattern != null) {                        matcher.matches("", pattern);        }    } catch (Exception e) {        }}
0
public static boolean getHiDPIMode()
{        return JMeterUtils.getPropDefault("jmeter.hidpi.mode", false);}
0
public static double getHiDPIScaleFactor()
{        return Double.parseDouble(JMeterUtils.getPropDefault("jmeter.hidpi.scale.factor", "1.0"));}
0
public static void applyHiDPI(JTable table)
{    if (JMeterUtils.getHiDPIMode()) {        table.setRowHeight((int) Math.round(table.getRowHeight() * JMeterUtils.getHiDPIScaleFactor()));    }}
0
public static String getDelimiter(String delimiterValue)
{    if ("\\t".equals(delimiterValue)) {                delimiterValue = "\t";    }    if (delimiterValue.length() != 1) {        throw new JMeterError("Delimiter '" + delimiterValue + "' must be of length 1.");    }    return delimiterValue;}
0
public static void applyHiDPIOnFonts()
{    if (!getHiDPIMode()) {        return;    }    applyScaleOnFonts((float) getHiDPIScaleFactor());}
0
public static void applyScaleOnFonts(final float scale)
{        SwingUtilities.invokeLater(() -> {        UIDefaults defaults = UIManager.getLookAndFeelDefaults();                for (Object key : new ArrayList<>(defaults.keySet())) {            Object value = defaults.get(key);                        if (value instanceof Font) {                Font font = (Font) value;                final float newSize = font.getSize() * scale;                if (font instanceof FontUIResource) {                    defaults.put(key, new FontUIResource(font.getName(), font.getStyle(), Math.round(newSize)));                } else {                    defaults.put(key, font.deriveFont(newSize));                }            }        }        JMeterUtils.refreshUI();    });}
1
public static final void refreshUI()
{    for (Window w : Window.getWindows()) {        SwingUtilities.updateComponentTreeUI(w);        if (w.isDisplayable() && (w instanceof Frame ? !((Frame) w).isResizable() : w instanceof Dialog ? !((Dialog) w).isResizable() : true)) {            w.pack();        }    }}
0
public static void setupXStreamSecurityPolicy(XStream xstream)
{        xstream.addPermission(NoTypePermission.NONE);                xstream.addPermission(AnyTypePermission.ANY);}
0
public static String formatJMeterExportedVariableName(String elementName)
{    return JMETER_VARS_PREFIX + elementName;}
0
public static final XStream createXStream()
{    XStream xstream = new XStream();    JMeterUtils.setupXStreamSecurityPolicy(xstream);    return xstream;}
0
protected Object[][] getContents()
{    return CONSTANT_LANGUAGE_NAMES;}
0
public static final String[][] getLanguageNames()
{    return CONSTANT_LANGUAGE_NAMES.clone();}
0
public static ScriptEngineManager getInstance()
{    return LazyHolder.INSTANCE;}
0
protected ScriptEngine getScriptEngine() throws ScriptException
{    String lang = getScriptLanguageWithDefault();    ScriptEngine scriptEngine = getInstance().getEngineByName(lang);    if (scriptEngine == null) {        throw new ScriptException("Cannot find engine named: '" + lang + "', ensure you set language field in JSR223 Test Element: " + getName());    }    return scriptEngine;}
0
private String getScriptLanguageWithDefault()
{    String lang = getScriptLanguage();    if (StringUtils.isNotEmpty(lang)) {        return lang;    }    return DEFAULT_SCRIPT_LANGUAGE;}
0
protected void populateBindings(Bindings bindings)
{    final String label = getName();    final String fileName = getFilename();    final String scriptParameters = getParameters();        final Logger elementLogger = LoggerFactory.getLogger(getClass().getName() + "." + getName());        bindings.put("log", elementLogger);        bindings.put("Label", label);        bindings.put("FileName", fileName);        bindings.put("Parameters", scriptParameters);        String[] args = JOrphanUtils.split(scriptParameters, " ");        bindings.put("args", args);        JMeterContext jmctx = JMeterContextService.getContext();        bindings.put("ctx", jmctx);    JMeterVariables vars = jmctx.getVariables();        bindings.put("vars", vars);    Properties props = JMeterUtils.getJMeterProperties();        bindings.put("props", props);            bindings.put("OUT", System.out);        Sampler sampler = jmctx.getCurrentSampler();        bindings.put("sampler", sampler);    SampleResult prev = jmctx.getPreviousResult();        bindings.put("prev", prev);}
0
protected Object processFileOrScript(ScriptEngine scriptEngine, final Bindings pBindings) throws IOException, ScriptException
{    Bindings bindings = pBindings;    if (bindings == null) {        bindings = scriptEngine.createBindings();    }    populateBindings(bindings);    File scriptFile = new File(getFilename());            boolean supportsCompilable = scriptEngine instanceof Compilable &&     !("bsh.engine.BshScriptEngine".equals(scriptEngine.getClass().getName()));    try {        if (!StringUtils.isEmpty(getFilename())) {            if (scriptFile.exists() && scriptFile.canRead()) {                if (supportsCompilable) {                    String newCacheKey =                     getScriptLanguage() + "#" + scriptFile.getAbsolutePath() +                     "#" + scriptFile.lastModified();                    CompiledScript compiledScript = compiledScriptsCache.get(newCacheKey);                    if (compiledScript == null) {                        synchronized (compiledScriptsCache) {                            compiledScript = compiledScriptsCache.get(newCacheKey);                            if (compiledScript == null) {                                                                try (BufferedReader fileReader = new BufferedReader(new FileReader(scriptFile), (int) scriptFile.length())) {                                    compiledScript = ((Compilable) scriptEngine).compile(fileReader);                                    compiledScriptsCache.put(newCacheKey, compiledScript);                                }                            }                        }                    }                    return compiledScript.eval(bindings);                } else {                                        try (BufferedReader fileReader = new BufferedReader(new FileReader(scriptFile), (int) scriptFile.length())) {                        return scriptEngine.eval(fileReader, bindings);                    }                }            } else {                throw new ScriptException("Script file '" + scriptFile.getAbsolutePath() + "' does not exist or is unreadable for element:" + getName());            }        } else if (!StringUtils.isEmpty(getScript())) {            if (supportsCompilable && !ScriptingBeanInfoSupport.FALSE_AS_STRING.equals(cacheKey)) {                computeScriptMD5();                CompiledScript compiledScript = compiledScriptsCache.get(this.scriptMd5);                if (compiledScript == null) {                    synchronized (compiledScriptsCache) {                        compiledScript = compiledScriptsCache.get(this.scriptMd5);                        if (compiledScript == null) {                            compiledScript = ((Compilable) scriptEngine).compile(getScript());                            compiledScriptsCache.put(this.scriptMd5, compiledScript);                        }                    }                }                return compiledScript.eval(bindings);            } else {                return scriptEngine.eval(getScript(), bindings);            }        } else {            throw new ScriptException("Both script file and script text are empty for element:" + getName());        }    } catch (ScriptException ex) {        Throwable rootCause = ex.getCause();        if (isStopCondition(rootCause)) {            throw (RuntimeException) ex.getCause();        } else {            throw ex;        }    }}
0
public boolean compile() throws ScriptException, IOException
{    String lang = getScriptLanguageWithDefault();    ScriptEngine scriptEngine = getInstance().getEngineByName(lang);    boolean supportsCompilable = scriptEngine instanceof Compilable &&     !("bsh.engine.BshScriptEngine".equals(scriptEngine.getClass().getName()));    if (!supportsCompilable) {        return true;    }    if (!StringUtils.isEmpty(getScript())) {        try {            ((Compilable) scriptEngine).compile(getScript());            return true;        } catch (ScriptException e) {                                    return false;        }    } else {        File scriptFile = new File(getFilename());        try (BufferedReader fileReader = new BufferedReader(new FileReader(scriptFile), (int) scriptFile.length())) {            try {                ((Compilable) scriptEngine).compile(fileReader);                return true;            } catch (ScriptException e) {                                                return false;            }        }    }}
1
private void computeScriptMD5()
{        if (scriptMd5 == null) {        scriptMd5 = DigestUtils.md5Hex(getScript());    }}
0
public String getCacheKey()
{    return cacheKey;}
0
public void setCacheKey(String cacheKey)
{    this.cacheKey = cacheKey;}
0
public void testStarted()
{}
0
public void testStarted(String host)
{}
0
public void testEnded()
{    testEnded("");}
0
public void testEnded(String host)
{    compiledScriptsCache.clear();    this.scriptMd5 = null;}
0
public String getScriptLanguage()
{    return scriptLanguage;}
0
public void setScriptLanguage(String s)
{    scriptLanguage = s;}
0
public void setContext(HttpURLConnection conn)
{        if (!(conn instanceof HttpsURLConnection)) {        if (log.isWarnEnabled()) {                    }    }}
1
protected final void setProvider(Provider p)
{    super.setProvider(p);    if (null == this.pro) {        this.pro = p;    }}
0
public SSLContext getContext() throws GeneralSecurityException
{    if (SHARED_SESSION_CONTEXT) {        if (log.isDebugEnabled()) {                    }        return this.defaultContext;    }    SSLContext sslContext = this.threadlocal.get();    if (sslContext == null) {        if (log.isDebugEnabled()) {                    }        sslContext = createContext();        this.threadlocal.set(sslContext);    }    if (log.isDebugEnabled()) {            }    return sslContext;}
1
public void resetContext()
{    if (!SHARED_SESSION_CONTEXT) {                this.threadlocal.set(null);    }}
1
private SSLContext createContext() throws GeneralSecurityException
{    SSLContext context;    if (pro != null) {                context = SSLContext.getInstance(DEFAULT_SSL_PROTOCOL, pro);    } else {                context = SSLContext.getInstance(DEFAULT_SSL_PROTOCOL);    }    KeyManagerFactory managerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());    JmeterKeyStore keys = this.getKeyStore();    managerFactory.init(null, defaultpw == null ? new char[] {} : defaultpw.toCharArray());    KeyManager[] managers = managerFactory.getKeyManagers();    KeyManager[] newManagers = new KeyManager[managers.length];    if (log.isDebugEnabled()) {            }        for (int i = 0; i < managers.length; i++) {        if (managers[i] instanceof X509KeyManager) {            X509KeyManager manager = (X509KeyManager) managers[i];            newManagers[i] = new WrappedX509KeyManager(manager, keys);        } else {            newManagers[i] = managers[i];        }    }        TrustManagerFactory tmfactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());    tmfactory.init(this.getTrustStore());        TrustManager[] trustmanagers = tmfactory.getTrustManagers();    for (int i = 0; i < trustmanagers.length; i++) {        if (trustmanagers[i] instanceof X509TrustManager) {            trustmanagers[i] = new CustomX509TrustManager((X509TrustManager) trustmanagers[i]);        }    }    context.init(newManagers, trustmanagers, this.rand);    if (log.isDebugEnabled()) {        String[] dCiphers = context.getSocketFactory().getDefaultCipherSuites();        String[] sCiphers = context.getSocketFactory().getSupportedCipherSuites();        int len = (dCiphers.length > sCiphers.length) ? dCiphers.length : sCiphers.length;        for (int i = 0; i < len; i++) {            if (i < dCiphers.length) {                            }            if (i < sCiphers.length) {                            }        }    }    return context;}
1
public String[] getClientAliases(String keyType, Principal[] issuers)
{            return this.store.getClientAliases(keyType, issuers);}
1
public String[] getServerAliases(String keyType, Principal[] issuers)
{        return this.manager.getServerAliases(keyType, issuers);}
1
public X509Certificate[] getCertificateChain(String alias)
{        return this.store.getCertificateChain(alias);}
1
public PrivateKey getPrivateKey(String alias)
{    PrivateKey privateKey = this.store.getPrivateKey(alias);        return privateKey;}
1
public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket)
{    if (log.isDebugEnabled()) {            }    String alias = this.store.getAlias();    if (log.isDebugEnabled()) {            }    return alias;}
1
public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket)
{    return this.manager.chooseServerAlias(keyType, issuers, socket);}
0
public void load(InputStream is, String pword) throws NoSuchAlgorithmException, CertificateException, IOException, KeyStoreException, UnrecoverableKeyException
{    char[] pw = toCharArrayOrNull(pword);    store.load(is, pw);    List<String> aliasesList = new ArrayList<>();    this.privateKeyByAlias = new HashMap<>();    this.certsByAlias = new HashMap<>();    PrivateKey privateKey = null;    int index = 0;    Enumeration<String> aliases = store.aliases();    while (aliases.hasMoreElements()) {        String alias = aliases.nextElement();        if (store.isKeyEntry(alias)) {            if (isIndexInConfiguredRange(index)) {                privateKey = validateNotNull((PrivateKey) store.getKey(alias, pw), "No key found for alias: " + alias);                Certificate[] chain = validateNotNull(store.getCertificateChain(alias), "No certificate chain found for alias" + alias);                aliasesList.add(alias);                privateKeyByAlias.put(alias, privateKey);                certsByAlias.put(alias, toX509Certificates(chain));            }            index++;        }    }    if (is != null) {                validateNotNull(privateKey, "No key(s) found");        if (endIndex != -1 && index <= endIndex - startIndex && log.isWarnEnabled()) {                    }    }    /*         * Note: if is == null and no pkcs11 store is configured, the arrays will be empty         */    this.names = aliasesList.toArray(new String[aliasesList.size()]);}
1
private T validateNotNull(T object, String message) throws IOException
{    if (null == object) {        throw new IOException(message);    }    return object;}
0
private X509Certificate[] toX509Certificates(Certificate[] chain)
{    X509Certificate[] x509certs = new X509Certificate[chain.length];    for (int i = 0; i < x509certs.length; i++) {        x509certs[i] = (X509Certificate) chain[i];    }    return x509certs;}
0
private boolean isIndexInConfiguredRange(int index)
{    return index >= startIndex && (endIndex == -1 || index <= endIndex);}
0
private char[] toCharArrayOrNull(String pword)
{    if (pword == null) {                return null;    }    return pword.toCharArray();}
0
public X509Certificate[] getCertificateChain(String alias)
{    X509Certificate[] result = this.certsByAlias.get(alias);    if (result != null) {        return result;    }        throw new IllegalArgumentException("No certificate found for alias:'" + alias + "'");}
0
public String getAlias()
{    if (!StringUtils.isEmpty(clientCertAliasVarName)) {                String aliasName = JMeterContextService.getContext().getVariables().get(clientCertAliasVarName);        if (StringUtils.isEmpty(aliasName)) {                        throw new IllegalArgumentException("No var called '" + clientCertAliasVarName + "' found");        }        return aliasName;    }    int length = this.names.length;    if (length == 0) {                return null;    }    return this.names[getIndexAndIncrement(length)];}
1
public int getAliasCount()
{    return this.names.length;}
0
public String getAlias(int index)
{    int length = this.names.length;    if (length == 0 && index == 0) {                return null;    }    if (index >= length || index < 0) {        throw new ArrayIndexOutOfBoundsException(index);    }    return this.names[index];}
0
public PrivateKey getPrivateKey(String alias)
{    PrivateKey pk = this.privateKeyByAlias.get(alias);    if (pk != null) {        return pk;    }    throw new IllegalArgumentException("No PrivateKey found for alias:'" + alias + "'");}
0
public static JmeterKeyStore getInstance(String type, int startIndex, int endIndex, String clientCertAliasVarName) throws KeyStoreException
{    return new JmeterKeyStore(type, startIndex, endIndex, clientCertAliasVarName);}
0
public static JmeterKeyStore getInstance(String type) throws KeyStoreException
{    return getInstance(type, 0, -1, DEFAULT_ALIAS_VAR_NAME);}
0
private int getIndexAndIncrement(int length)
{    synchronized (this) {        int result = lastAliasIndex++;        if (lastAliasIndex >= length) {            lastAliasIndex = 0;        }        return result;    }}
0
public String[] getClientAliases(String keyType, Principal[] issuers)
{    int count = getAliasCount();    String[] aliases = new String[count];    for (int i = 0; i < aliases.length; i++) {        aliases[i] = this.names[i];    }    if (aliases.length > 0) {        return aliases;    } else {                return null;    }}
0
public Locale getLocale()
{    return locale;}
0
public static String getCurrentName(String className)
{    if (nameMap.containsKey(className)) {        String newName = nameMap.getProperty(className);                return newName;    }    return className;}
1
public static String getCurrentTestName(String testClassName, String guiClassName)
{    String key = testClassName + "|" + guiClassName;    if (nameMap.containsKey(key)) {        String newName = nameMap.getProperty(key);                return newName;    }    return getCurrentName(testClassName);}
1
public static String getCurrentName(String propertyName, String className)
{    String key = className + "/" + propertyName;    if (nameMap.containsKey(key)) {        String newName = nameMap.getProperty(key);                return newName;    }    return propertyName;}
1
public static String getCurrentName(String value, String propertyName, String className)
{    String key = className + "." + propertyName + "/" + value;    if (nameMap.containsKey(key)) {        String newValue = nameMap.getProperty(key);                return newValue;    }    return value;}
1
public static boolean isMapped(String key)
{    return nameMap.containsKey(key);}
0
public String getNamespaceForPrefix(String prefix, Node namespaceContext)
{    String namespace = NAMESPACE_MAP.get(prefix);    if (namespace == null) {        return super.getNamespaceForPrefix(prefix, namespaceContext);    } else {        return namespace;    }}
0
public String getNamespaceForPrefix(String prefix, Node namespaceContext)
{    String namespace = namespaceMap.get(prefix);    if (namespace == null) {        return super.getNamespaceForPrefix(prefix, namespaceContext);    } else {        return namespace;    }}
0
private void init()
{        setLayout(new BorderLayout(5, 0));        setBorder(BorderFactory.createTitledBorder(JMeterUtils.getResString("sample_scope")));    parentButton.setSelected(true);    JPanel buttonPanel = new HorizontalPanel();    ButtonGroup group = new ButtonGroup();    if (allButton != null) {        group.add(allButton);        buttonPanel.add(allButton);    }    group.add(parentButton);    buttonPanel.add(parentButton);    if (childButton != null) {        group.add(childButton);        buttonPanel.add(childButton);    }    if (variableButton != null) {        variableButton.addActionListener(this);        group.add(variableButton);        buttonPanel.add(variableButton);        buttonPanel.add(variableName);        variableName.addFocusListener(this);    }    add(buttonPanel);}
0
public void clearGui()
{    parentButton.setSelected(true);}
0
public int getSelection()
{    if (parentButton.isSelected()) {        return 0;    }    return 1;}
0
public void setScopeAll()
{    setScopeAll(false);}
0
public void setScopeAll(boolean enableVariableButton)
{    allButton.setSelected(true);    if (enableVariableButton) {                variableName.setText("");    }}
0
public void setScopeChildren()
{    setScopeChildren(false);}
0
public void setScopeChildren(boolean enableVariableButton)
{    childButton.setSelected(true);    if (enableVariableButton) {                variableName.setText("");    }}
0
public void setScopeParent()
{    setScopeParent(false);}
0
public void setScopeParent(boolean enableVariableButton)
{    parentButton.setSelected(true);    if (enableVariableButton) {                variableName.setText("");    }}
0
public void setScopeVariable(String value)
{    variableButton.setSelected(true);    variableName.setText(value);}
0
public boolean isScopeParent()
{    return parentButton.isSelected();}
0
public boolean isScopeChildren()
{    return childButton != null && childButton.isSelected();}
0
public boolean isScopeAll()
{    return allButton != null && allButton.isSelected();}
0
public boolean isScopeVariable()
{    return variableButton != null && variableButton.isSelected();}
0
public void actionPerformed(ActionEvent e)
{    variableName.setEnabled(variableButton.isSelected());}
0
public String getVariable()
{    return variableName.getText();}
0
public void focusGained(FocusEvent focusEvent)
{    variableButton.setSelected(focusEvent.getSource() == variableName);}
0
public void focusLost(FocusEvent focusEvent)
{}
0
public String getAsText()
{    if (checkbox.isSelected()) {        return TRUE_AS_STRING;    } else {        return FALSE_AS_STRING;    }}
0
public void setAsText(String value)
{    initialValue = getBooleanValueAsString(value);    checkbox.setSelected(Boolean.parseBoolean(initialValue));}
0
public Object getValue()
{    return getAsText();}
0
public void setValue(Object value)
{    if (value == null || value instanceof String) {        setAsText(getBooleanValueAsString((String) value));    } else {        throw new IllegalArgumentException();    }}
0
private static String getBooleanValueAsString(String value)
{    return value == null ? FALSE_AS_STRING :     Boolean.toString(!FALSE_AS_STRING.equals(value));}
0
public Component getCustomEditor()
{    return checkbox;}
0
public void firePropertyChange()
{    String newValue = getAsText();    if (initialValue != null && initialValue.equals(newValue)) {        return;    }    initialValue = newValue;    super.firePropertyChange();}
0
public void actionPerformed(ActionEvent e)
{    firePropertyChange();}
0
public boolean supportsCustomEditor()
{    return true;}
0
public void clearGui()
{    initialValue = TRUE_AS_STRING;    checkbox.setSelected(true);}
0
public String getScript()
{    return script;}
0
public void setScript(String s)
{    script = s;}
0
public String getParameters()
{    return parameters;}
0
public void setParameters(String s)
{    parameters = s;}
0
public String getFilename()
{    return filename;}
0
public void setFilename(String s)
{    filename = s;}
0
protected boolean isStopCondition(Throwable rootCause)
{    return rootCause instanceof JMeterStopTestNowException || rootCause instanceof JMeterStopTestException || rootCause instanceof JMeterStopThreadException;}
0
public int read() throws IOException
{    pauser.pause(1);    return in.read();}
0
public int read(byte[] b, int off, int len) throws IOException
{    pauser.pause(len);    return in.read(b, off, len);}
0
public void write(byte[] b, int off, int len) throws IOException
{    pauser.pause(len);    out.write(b, off, len);}
0
public void write(int b) throws IOException
{    pauser.pause(1);    out.write(b);}
0
public OutputStream getOutputStream() throws IOException
{    return new SlowOutputStream(super.getOutputStream(), charactersPerSecond);}
0
public InputStream getInputStream() throws IOException
{    return new SlowInputStream(super.getInputStream(), charactersPerSecond);}
0
public OutputStream getOutputStream() throws IOException
{    return new SlowOutputStream(sslSock.getOutputStream(), charactersPerSecond);}
0
public InputStream getInputStream() throws IOException
{    return new SlowInputStream(sslSock.getInputStream(), charactersPerSecond);}
0
public void addHandshakeCompletedListener(HandshakeCompletedListener arg0)
{    sslSock.addHandshakeCompletedListener(arg0);}
0
public boolean getEnableSessionCreation()
{    return sslSock.getEnableSessionCreation();}
0
public String[] getEnabledCipherSuites()
{    return sslSock.getEnabledCipherSuites();}
0
public String[] getEnabledProtocols()
{    return sslSock.getEnabledProtocols();}
0
public boolean getNeedClientAuth()
{    return sslSock.getNeedClientAuth();}
0
public SSLSession getSession()
{    return sslSock.getSession();}
0
public String[] getSupportedCipherSuites()
{    return sslSock.getSupportedCipherSuites();}
0
public String[] getSupportedProtocols()
{    return sslSock.getSupportedProtocols();}
0
public boolean getUseClientMode()
{    return sslSock.getUseClientMode();}
0
public boolean getWantClientAuth()
{    return sslSock.getWantClientAuth();}
0
public void removeHandshakeCompletedListener(HandshakeCompletedListener arg0)
{    sslSock.removeHandshakeCompletedListener(arg0);}
0
public void setEnableSessionCreation(boolean arg0)
{    sslSock.setEnableSessionCreation(arg0);}
0
public void setEnabledCipherSuites(String[] arg0)
{    sslSock.setEnabledCipherSuites(arg0);}
0
public void setEnabledProtocols(String[] arg0)
{    sslSock.setEnabledProtocols(arg0);}
0
public void setNeedClientAuth(boolean arg0)
{    sslSock.setNeedClientAuth(arg0);}
0
public void setUseClientMode(boolean arg0)
{    sslSock.setUseClientMode(arg0);}
0
public void setWantClientAuth(boolean arg0)
{    sslSock.setWantClientAuth(arg0);}
0
public void startHandshake() throws IOException
{    sslSock.startHandshake();}
0
public void bind(SocketAddress bindpoint) throws IOException
{    sslSock.bind(bindpoint);}
0
public synchronized void close() throws IOException
{    sslSock.close();}
0
public void connect(SocketAddress endpoint, int timeout) throws IOException
{    sslSock.connect(endpoint, timeout);}
0
public void connect(SocketAddress endpoint) throws IOException
{    sslSock.connect(endpoint);}
0
public SocketChannel getChannel()
{    return sslSock.getChannel();}
0
public InetAddress getInetAddress()
{    return sslSock.getInetAddress();}
0
public boolean getKeepAlive() throws SocketException
{    return sslSock.getKeepAlive();}
0
public InetAddress getLocalAddress()
{    return sslSock.getLocalAddress();}
0
public int getLocalPort()
{    return sslSock.getLocalPort();}
0
public SocketAddress getLocalSocketAddress()
{    return sslSock.getLocalSocketAddress();}
0
public boolean getOOBInline() throws SocketException
{    return sslSock.getOOBInline();}
0
public int getPort()
{    return sslSock.getPort();}
0
public synchronized int getReceiveBufferSize() throws SocketException
{    return sslSock.getReceiveBufferSize();}
0
public SocketAddress getRemoteSocketAddress()
{    return sslSock.getRemoteSocketAddress();}
0
public boolean getReuseAddress() throws SocketException
{    return sslSock.getReuseAddress();}
0
public synchronized int getSendBufferSize() throws SocketException
{    return sslSock.getSendBufferSize();}
0
public int getSoLinger() throws SocketException
{    return sslSock.getSoLinger();}
0
public synchronized int getSoTimeout() throws SocketException
{    return sslSock.getSoTimeout();}
0
public boolean getTcpNoDelay() throws SocketException
{    return sslSock.getTcpNoDelay();}
0
public int getTrafficClass() throws SocketException
{    return sslSock.getTrafficClass();}
0
public boolean isBound()
{    return sslSock.isBound();}
0
public boolean isClosed()
{    return sslSock.isClosed();}
0
public boolean isConnected()
{    return sslSock.isConnected();}
0
public boolean isInputShutdown()
{    return sslSock.isInputShutdown();}
0
public boolean isOutputShutdown()
{    return sslSock.isOutputShutdown();}
0
public void sendUrgentData(int data) throws IOException
{    sslSock.sendUrgentData(data);}
0
public void setKeepAlive(boolean on) throws SocketException
{    sslSock.setKeepAlive(on);}
0
public void setOOBInline(boolean on) throws SocketException
{    sslSock.setOOBInline(on);}
0
public synchronized void setReceiveBufferSize(int size) throws SocketException
{    sslSock.setReceiveBufferSize(size);}
0
public void setReuseAddress(boolean on) throws SocketException
{    sslSock.setReuseAddress(on);}
0
public synchronized void setSendBufferSize(int size) throws SocketException
{    sslSock.setSendBufferSize(size);}
0
public void setSoLinger(boolean on, int linger) throws SocketException
{    sslSock.setSoLinger(on, linger);}
0
public synchronized void setSoTimeout(int timeout) throws SocketException
{    sslSock.setSoTimeout(timeout);}
0
public void setTcpNoDelay(boolean on) throws SocketException
{    sslSock.setTcpNoDelay(on);}
0
public void setTrafficClass(int tc) throws SocketException
{    sslSock.setTrafficClass(tc);}
0
public void shutdownInput() throws IOException
{    sslSock.shutdownInput();}
0
public void shutdownOutput() throws IOException
{    sslSock.shutdownOutput();}
0
public String toString()
{    return sslSock.toString();}
0
public static synchronized void reset()
{    SSLManager.manager = null;}
0
protected void setProvider(Provider provider)
{    if (null != provider) {        Security.addProvider(provider);    }}
0
protected synchronized JmeterKeyStore getKeyStore()
{    if (null == this.keyStore) {                String fileName = System.getProperty(JAVAX_NET_SSL_KEY_STORE, "");        String fileType =         System.getProperty(        JAVAX_NET_SSL_KEY_STORE_TYPE,         fileName.toLowerCase(Locale.ENGLISH).endsWith(".p12") ? PKCS12 : "JKS");                try {            this.keyStore = JmeterKeyStore.getInstance(fileType, keystoreAliasStartIndex, keystoreAliasEndIndex, clientCertAliasVarName);                    } catch (Exception e) {            this.keyStore = null;            throw new IllegalArgumentException("Could not create keystore: " + e.getMessage(), e);        }        try {                        if ("NONE".equalsIgnoreCase(fileName)) {                this.keyStore.load(null, Validate.notNull(getPassword(), "Password should not be null"));                            } else {                File initStore = new File(fileName);                if (fileName.length() > 0 && initStore.exists()) {                    try (InputStream fis = new FileInputStream(initStore);                        InputStream fileInputStream = new BufferedInputStream(fis)) {                        this.keyStore.load(fileInputStream, getPassword());                        if (log.isInfoEnabled()) {                                                    }                    }                } else {                                                            this.defaultpw = "";                    this.keyStore.load(null, "");                }            }        } catch (Exception e) {                    }        if (log.isDebugEnabled()) {                    }    }    return this.keyStore;}
1
private String getPassword()
{    String password = this.defaultpw;    if (null == password) {        final GuiPackage guiInstance = GuiPackage.getInstance();        if (guiInstance != null) {            synchronized (this) {                                JPasswordField pwf = new JPasswordField(64);                pwf.setEchoChar('*');                int choice = JOptionPane.showConfirmDialog(guiInstance.getMainFrame(), pwf, JMeterUtils.getResString("ssl_pass_prompt"), JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);                if (choice == JOptionPane.OK_OPTION) {                    char[] pwchars = pwf.getPassword();                    this.defaultpw = new String(pwchars);                    Arrays.fill(pwchars, '*');                }                System.setProperty(KEY_STORE_PASSWORD, this.defaultpw);                password = this.defaultpw;            }        } else {                    }    }    return password;}
1
protected KeyStore getTrustStore()
{    if (!truststoreLoaded) {                truststoreLoaded = true;        String fileName = System.getProperty(SSL_TRUST_STORE);        if (fileName == null) {            return null;        }                try {            this.trustStore = KeyStore.getInstance("JKS");                    } catch (Exception e) {            this.trustStore = null;            throw new RuntimeException("Problem creating truststore: " + e.getMessage(), e);        }        try {            File initStore = new File(fileName);            if (initStore.exists()) {                try (InputStream fis = new FileInputStream(initStore);                    InputStream fileInputStream = new BufferedInputStream(fis)) {                    this.trustStore.load(fileInputStream, null);                                    }            } else {                                this.trustStore.load(null, null);            }        } catch (Exception e) {            throw new RuntimeException("Can't load TrustStore: " + e.getMessage(), e);        }    }    return this.trustStore;}
1
public static synchronized SSLManager getInstance()
{    if (null == SSLManager.manager) {        SSLManager.manager = new JsseSSLManager(null);    }    return SSLManager.manager;}
0
public static boolean isSSLSupported()
{    return SSLManager.IS_SSL_SUPPORTED;}
0
public synchronized void configureKeystore(boolean preload, int startIndex, int endIndex, String clientCertAliasVarName)
{    this.keystoreAliasStartIndex = startIndex;    this.keystoreAliasEndIndex = endIndex;    this.clientCertAliasVarName = clientCertAliasVarName;    if (preload) {        keyStore = getKeyStore();    }}
0
public synchronized void destroyKeystore()
{    keyStore = null;}
0
public static String substitute(final String input, final String pattern, final String sub)
{    StringBuilder ret = new StringBuilder(input.length());    int start = 0;    int index = -1;    final int length = pattern.length();    while ((index = input.indexOf(pattern, start)) >= start) {        ret.append(input.substring(start, index));        ret.append(sub);        start = index + length;    }    ret.append(input.substring(start));    return ret.toString();}
0
private static Configuration init()
{    Configuration templateConfiguration = new Configuration(Configuration.getVersion());    templateConfiguration.setDefaultEncoding(StandardCharsets.UTF_8.name());    templateConfiguration.setInterpolationSyntax(Configuration.SQUARE_BRACKET_INTERPOLATION_SYNTAX);    templateConfiguration.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);    return templateConfiguration;}
0
public static Configuration getTemplateConfig()
{    return templateConfiguration;}
0
public static void processTemplate(File template, File outputFile, Configuration templateConfig, Map<String, String> data) throws IOException, TemplateException
{    templateConfig.setDirectoryForTemplateLoading(template.getParentFile());    freemarker.template.Template temp = templateConfig.getTemplate(template.getName());    try (FileOutputStream stream = new FileOutputStream(outputFile);        Writer writer = new OutputStreamWriter(stream, StandardCharsets.UTF_8);        BufferedWriter bufferedWriter = new BufferedWriter(writer)) {        temp.process(data, bufferedWriter);    }}
0
public java.security.cert.X509Certificate[] getAcceptedIssuers()
{    return EMPTY_X509Certificate;}
0
public void checkClientTrusted(X509Certificate[] chain, String authType)
{}
0
public void checkServerTrusted(X509Certificate[] chain, String authType)
{}
0
public void checkClientTrusted(X509Certificate[] chain, String authType, Socket socket) throws CertificateException
{}
0
public void checkClientTrusted(X509Certificate[] chain, String authType, SSLEngine engine) throws CertificateException
{}
0
public void checkServerTrusted(X509Certificate[] chain, String authType, Socket socket) throws CertificateException
{}
0
public void checkServerTrusted(X509Certificate[] chain, String authType, SSLEngine engine) throws CertificateException
{}
0
public static synchronized SocketFactory getDefault()
{    return new TrustAllSSLSocketFactory();}
0
public Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException
{    return factory.createSocket(socket, host, port, autoClose);}
0
public Socket createSocket(InetAddress address, int port, InetAddress localAddress, int localPort) throws IOException
{    return factory.createSocket(address, port, localAddress, localPort);}
0
public Socket createSocket(InetAddress address, int port) throws IOException
{    return factory.createSocket(address, port);}
0
public Socket createSocket(String host, int port, InetAddress localHost, int localPort) throws IOException
{    return factory.createSocket(host, port, localHost, localPort);}
0
public Socket createSocket(String host, int port) throws IOException
{    return factory.createSocket(host, port);}
0
public Socket createSocket() throws IOException
{    return factory.createSocket();}
0
public String[] getDefaultCipherSuites()
{    return factory.getSupportedCipherSuites();}
0
public String[] getSupportedCipherSuites()
{    return factory.getSupportedCipherSuites();}
0
public XPathExecutable load(ImmutablePair<String, String> key) throws Exception
{    String xPathQuery = key.left;    String namespacesString = key.right;    Processor processor = XPathUtil.getProcessor();    XPathCompiler xPathCompiler = processor.newXPathCompiler();    List<String[]> namespacesList = XPathUtil.namespacesParse(namespacesString);        for (String[] namespaces : namespacesList) {        xPathCompiler.declareNamespace(namespaces[0], namespaces[1]);    }        return xPathCompiler.compile(xPathQuery);}
1
public static Processor getProcessor()
{    return PROCESSOR;}
0
private static synchronized DocumentBuilderFactory makeDocumentBuilderFactory(boolean validate, boolean whitespace, boolean namespace)
{    if (XPathUtil.documentBuilderFactory == null || documentBuilderFactory.isValidating() != validate || documentBuilderFactory.isNamespaceAware() != namespace || documentBuilderFactory.isIgnoringElementContentWhitespace() != whitespace) {                documentBuilderFactory = DocumentBuilderFactory.newInstance();        documentBuilderFactory.setValidating(validate);        documentBuilderFactory.setNamespaceAware(namespace);        documentBuilderFactory.setIgnoringElementContentWhitespace(whitespace);    }    return XPathUtil.documentBuilderFactory;}
0
public static DocumentBuilder makeDocumentBuilder(boolean validate, boolean whitespace, boolean namespace, boolean downloadDTDs) throws ParserConfigurationException
{    DocumentBuilder builder = makeDocumentBuilderFactory(validate, whitespace, namespace).newDocumentBuilder();    builder.setErrorHandler(new MyErrorHandler(validate, false));    if (!downloadDTDs) {        EntityResolver er = (publicId, systemId) -> new InputSource(new ByteArrayInputStream(new byte[0]));        builder.setEntityResolver(er);    }    return builder;}
0
public static Document makeDocument(InputStream stream, boolean validate, boolean whitespace, boolean namespace, boolean tolerant, boolean quiet, boolean showWarnings, boolean reportErrors, boolean isXml, boolean downloadDTDs) throws ParserConfigurationException, SAXException, IOException, TidyException
{    return makeDocument(stream, validate, whitespace, namespace, tolerant, quiet, showWarnings, reportErrors, isXml, downloadDTDs, null);}
0
public static Document makeDocument(InputStream stream, boolean validate, boolean whitespace, boolean namespace, boolean tolerant, boolean quiet, boolean showWarnings, boolean report_errors, boolean isXml, boolean downloadDTDs, OutputStream tidyOut) throws ParserConfigurationException, SAXException, IOException, TidyException
{    Document doc;    if (tolerant) {        doc = tidyDoc(stream, quiet, showWarnings, report_errors, isXml, tidyOut);    } else {        doc = makeDocumentBuilder(validate, whitespace, namespace, downloadDTDs).parse(stream);    }    return doc;}
0
private static Document tidyDoc(InputStream stream, boolean quiet, boolean showWarnings, boolean report_errors, boolean isXML, OutputStream out) throws TidyException
{    StringWriter sw = new StringWriter();    Tidy tidy = makeTidyParser(quiet, showWarnings, isXML, sw);    Document doc = tidy.parseDOM(stream, out);    doc.normalize();    if (tidy.getParseErrors() > 0) {        if (report_errors) {                        throw new TidyException(tidy.getParseErrors(), tidy.getParseWarnings());        }            }    return doc;}
1
public static Tidy makeTidyParser(boolean quiet, boolean showWarnings, boolean isXml, StringWriter stringWriter)
{    Tidy tidy = new Tidy();    tidy.setInputEncoding(StandardCharsets.UTF_8.name());    tidy.setOutputEncoding(StandardCharsets.UTF_8.name());    tidy.setQuiet(quiet);    tidy.setShowWarnings(showWarnings);    tidy.setMakeClean(true);    tidy.setXmlTags(isXml);    if (stringWriter != null) {        tidy.setErrout(new PrintWriter(stringWriter));    }    return tidy;}
0
public void warning(SAXParseException ex) throws SAXException
{    if (log.isInfoEnabled()) {            }    if (val && !tol) {        throw new SAXException(ex);    }}
1
public void error(SAXParseException ex) throws SAXException
{    if (log.isWarnEnabled()) {            }    if (val && !tol) {        throw new SAXException(ex);    }}
1
public void fatalError(SAXParseException ex) throws SAXException
{        if (val && !tol) {        throw new SAXException(ex);    }}
1
private static String getNodeContent(Node node)
{    StringWriter sw = new StringWriter();    try {        Transformer t = TransformerFactory.newInstance().newTransformer();        t.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");        t.transform(new DOMSource(node), new StreamResult(sw));    } catch (TransformerException e) {        sw.write(e.getMessageAndLocation());    }    return sw.toString();}
0
public static String getValueForNode(Node node)
{        final Node firstChild = node.getFirstChild();    if (firstChild != null) {        return firstChild.getNodeValue();    } else {        return node.getNodeValue();    }}
0
public static NodeList selectNodeList(Document document, String xPathExpression) throws TransformerException
{    XObject xObject = XPathAPI.eval(document, xPathExpression, getPrefixResolver(document));    return xObject.nodelist();}
0
public static void putValuesForXPathInList(Document document, String xPathQuery, List<String> matchStrings, boolean fragment) throws TransformerException
{    putValuesForXPathInList(document, xPathQuery, matchStrings, fragment, -1);}
0
public static void putValuesForXPathInList(Document document, String xPathQuery, List<String> matchStrings, boolean fragment, int matchNumber) throws TransformerException
{    String val = null;    XObject xObject = XPathAPI.eval(document, xPathQuery, getPrefixResolver(document));    final int objectType = xObject.getType();    if (objectType == XObject.CLASS_NODESET) {        NodeList matches = xObject.nodelist();        int length = matches.getLength();        int indexToMatch = matchNumber;        if (matchNumber == 0 && length > 0) {            indexToMatch = JMeterUtils.getRandomInt(length) + 1;        }        for (int i = 0; i < length; i++) {            Node match = matches.item(i);            if (indexToMatch >= 0 && indexToMatch != (i + 1)) {                continue;            }            if (match instanceof Element) {                if (fragment) {                    val = getNodeContent(match);                } else {                    val = getValueForNode(match);                }            } else {                val = match.getNodeValue();            }            matchStrings.add(val);        }    } else if (objectType == XObject.CLASS_NULL || objectType == XObject.CLASS_UNKNOWN || objectType == XObject.CLASS_UNRESOLVEDVARIABLE) {        if (log.isWarnEnabled()) {                    }    } else {        val = xObject.toString();        matchStrings.add(val);    }}
1
public static void putValuesForXPathInListUsingSaxon(String xmlFile, String xPathQuery, List<String> matchStrings, boolean fragment, int matchNumber, String namespaces) throws SaxonApiException, FactoryConfigurationError
{        final ImmutablePair<String, String> key = ImmutablePair.of(xPathQuery, namespaces);        XPathExecutable xPathExecutable;    if (StringUtils.isNotEmpty(xPathQuery)) {        xPathExecutable = XPATH_CACHE.get(key);    } else {                return;    }    try (StringReader reader = new StringReader(xmlFile)) {                                        net.sf.saxon.s9api.DocumentBuilder builder = PROCESSOR.newDocumentBuilder();        XdmNode xdmNode = builder.build(new SAXSource(new InputSource(reader)));        if (xPathExecutable != null) {            XPathSelector selector = null;            try {                selector = xPathExecutable.load();                selector.setContextItem(xdmNode);                XdmValue nodes = selector.evaluate();                int length = nodes.size();                int indexToMatch = matchNumber;                                if (matchNumber < 0) {                    for (XdmItem item : nodes) {                        if (fragment) {                            matchStrings.add(item.toString());                        } else {                            matchStrings.add(item.getStringValue());                        }                    }                } else {                    if (indexToMatch <= length) {                        if (matchNumber == 0 && length > 0) {                            indexToMatch = JMeterUtils.getRandomInt(length) + 1;                        }                        XdmItem item = nodes.itemAt(indexToMatch - 1);                        matchStrings.add(fragment ? item.toString() : item.getStringValue());                    } else {                        if (log.isWarnEnabled()) {                                                    }                    }                }            } finally {                if (selector != null) {                    try {                        selector.getUnderlyingXPathContext().setContextItem(null);                    } catch (Exception e) {                                                            }                }            }        }    }}
1
public static List<String[]> namespacesParse(String namespaces)
{    List<String[]> res = new ArrayList<>();    int length = namespaces.length();    int startWord = 0;    boolean afterEqual = false;    int positionLastKey = -1;    for (int i = 0; i < length; i++) {        char actualChar = namespaces.charAt(i);        if (actualChar == '=' && !afterEqual) {            String[] tmp = new String[2];            tmp[0] = namespaces.substring(startWord, i);            res.add(tmp);            afterEqual = true;            startWord = i + 1;            positionLastKey++;        } else if (actualChar == '\n' && afterEqual) {            afterEqual = false;            res.get(positionLastKey)[1] = namespaces.substring(startWord, i);            startWord = i + 1;        } else if (actualChar == '\n') {            startWord = i + 1;        } else if (i == length - 1 && afterEqual) {            res.get(positionLastKey)[1] = namespaces.substring(startWord, i + 1);        }    }    return res;}
0
public static List<String[]> getNamespaces(String xml) throws XMLStreamException, FactoryConfigurationError
{    List<String[]> res = new ArrayList<>();    XMLStreamReader reader;    if (StringUtils.isNotEmpty(xml)) {        reader = XMLInputFactory.newFactory().createXMLStreamReader(new StringReader(xml));        while (reader.hasNext()) {            int event = reader.next();            if (XMLStreamConstants.START_ELEMENT == event || XMLStreamConstants.NAMESPACE == event) {                addToList(reader, res);            }        }    }    return res;}
0
private static void addToList(XMLStreamReader reader, List<String[]> res)
{    boolean isInList = false;    int namespaceCount = reader.getNamespaceCount();    if (namespaceCount > 0) {        for (int nsIndex = 0; nsIndex < namespaceCount; nsIndex++) {            String nsPrefix = reader.getNamespacePrefix(nsIndex);            for (int i = 0; i < res.size(); i++) {                String prefix = res.get(i)[0];                if (prefix != null && prefix.equals(nsPrefix)) {                    isInList = true;                    break;                }            }            if (!isInList) {                String nsId = reader.getNamespaceURI(nsIndex);                res.add(new String[] { nsPrefix, nsId });            }            isInList = false;        }    }}
0
private static PrefixResolver getPrefixResolver(Document document)
{    return new PropertiesBasedPrefixResolver(document.getDocumentElement());}
0
public static void validateXPath(Document document, String xpathString) throws TransformerException
{    if (XPathAPI.eval(document, xpathString, getPrefixResolver(document)) == null) {                throw new IllegalArgumentException("xpath eval of '" + xpathString + "' was null");    }}
0
private static PrefixResolver getPrefixResolverForXPath2(Document document, String namespaces)
{    return new PropertiesBasedPrefixResolverForXpath2(document.getDocumentElement(), namespaces);}
0
public static void validateXPath2(Document document, String xpathString, String namespaces) throws TransformerException
{    if (XPathAPI.eval(document, xpathString, getPrefixResolverForXPath2(document, namespaces)) == null) {                throw new IllegalArgumentException("xpath eval of '" + xpathString + "' was null");    }}
0
public static void computeAssertionResult(AssertionResult result, Document doc, String xPathExpression, boolean isNegated)
{    try {        XObject xObject = XPathAPI.eval(doc, xPathExpression, getPrefixResolver(doc));        switch(xObject.getType()) {            case XObject.CLASS_NODESET:                NodeList nodeList = xObject.nodelist();                final int len = (nodeList != null) ? nodeList.getLength() : 0;                                                if (len == 0) {                                        result.setFailure(!isNegated);                    result.setFailureMessage("No Nodes Matched " + xPathExpression);                    return;                }                if (log.isDebugEnabled() && !isNegated) {                    for (int i = 0; i < len; i++) {                                            }                }                result.setFailure(isNegated);                if (isNegated) {                    result.setFailureMessage("Specified XPath was found... Turn off negate if this is not desired");                }                return;            case XObject.CLASS_BOOLEAN:                boolean resultOfEval = xObject.bool();                result.setFailure(isNegated ? resultOfEval : !resultOfEval);                result.setFailureMessage(isNegated ? "Nodes Matched for " + xPathExpression : "No Nodes Matched for " + xPathExpression);                return;            default:                result.setFailure(true);                result.setFailureMessage("Cannot understand: " + xPathExpression);                return;        }    } catch (TransformerException e) {        result.setError(true);        result.setFailureMessage("TransformerException: " + e.getMessage() + " for: " + xPathExpression);    }}
1
public static void computeAssertionResultUsingSaxon(AssertionResult result, String xmlFile, String xPathQuery, String namespaces, Boolean isNegated) throws SaxonApiException, FactoryConfigurationError
{        final ImmutablePair<String, String> key = ImmutablePair.of(xPathQuery, namespaces);        XPathExecutable xPathExecutable;    if (StringUtils.isNotEmpty(xPathQuery)) {        xPathExecutable = XPATH_CACHE.get(key);    } else {                return;    }    try (StringReader reader = new StringReader(xmlFile)) {                                                net.sf.saxon.s9api.DocumentBuilder builder = PROCESSOR.newDocumentBuilder();        XdmNode xdmNode = builder.build(new SAXSource(new InputSource(reader)));        if (xPathExecutable != null) {            XPathSelector selector = null;            try {                Document doc;                doc = XPathUtil.makeDocumentBuilder(false, false, false, false).newDocument();                XObject xObject = XPathAPI.eval(doc, xPathQuery, getPrefixResolverForXPath2(doc, namespaces));                selector = xPathExecutable.load();                selector.setContextItem(xdmNode);                XdmValue nodes = selector.evaluate();                boolean resultOfEval = true;                int length = nodes.size();                                if (length == 0) {                    resultOfEval = false;                } else if (xObject.getType() == XObject.CLASS_BOOLEAN) {                    resultOfEval = Boolean.valueOf(nodes.itemAt(0).getStringValue());                }                result.setFailure(isNegated ? resultOfEval : !resultOfEval);                result.setFailureMessage(isNegated ? "Nodes Matched for " + xPathQuery : "No Nodes Matched for " + xPathQuery);            } catch (ParserConfigurationException | TransformerException e) {                                result.setError(true);                result.setFailureMessage("Exception: " + e.getMessage() + " for:" + xPathQuery);            } finally {                if (selector != null) {                    try {                        selector.getUnderlyingXPathContext().setContextItem(null);                    } catch (Exception e) {                                                result.setError(true);                        result.setFailureMessage("Exception: " + e.getMessage() + " for:" + xPathQuery);                    }                }            }        }    }}
1
public static String formatXml(String xml)
{    try {        Transformer serializer = TransformerFactory.newInstance().newTransformer();        serializer.setOutputProperty(OutputKeys.INDENT, "yes");        serializer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");        Source xmlSource = new SAXSource(new InputSource(new StringReader(xml)));        StringWriter stringWriter = new StringWriter();        StreamResult res = new StreamResult(stringWriter);        serializer.transform(xmlSource, res);        return stringWriter.toString();    } catch (Exception e) {        return xml;    }}
0
public List<Sample> getSamples()
{    return storedValues;}
0
public Sample getSample(int index)
{    synchronized (storedValues) {        if (index < storedValues.size()) {            return storedValues.get(index);        }    }    return null;}
0
public synchronized void clear()
{    super.clear();    storedValues.clear();}
0
public Sample addSample(SampleResult res)
{    final Sample sample = super.addSample(res);    storedValues.add(sample);    return sample;}
0
public JPopupMenu createPopupMenu()
{    return MenuFactory.getDefaultVisualizerMenu();}
0
public Collection<String> getMenuCategories()
{    return Arrays.asList(MenuFactory.LISTENERS);}
0
public void actionPerformed(ActionEvent e)
{    if (errorLogging.isSelected()) {        successOnlyLogging.setSelected(false);    }}
0
public void actionPerformed(ActionEvent e)
{    if (successOnlyLogging.isSelected()) {        errorLogging.setSelected(false);    }}
0
public void actionPerformed(ActionEvent e)
{    SavePropertyDialog d = new SavePropertyDialog(GuiPackage.getInstance().getMainFrame(),     JMeterUtils.getResString("sample_result_save_configuration"), true, collector.getSaveConfig());    d.pack();    ComponentUtil.centerComponentInComponent(GuiPackage.getInstance().getMainFrame(), d);    d.setVisible(true);}
0
public boolean isStats()
{    return isStats;}
0
protected JCheckBox getErrorLoggingCheckbox()
{    return errorLogging;}
0
protected ResultCollector getModel()
{    return collector;}
0
protected Component getFilePanel()
{    return filePanel;}
0
public void setFile(String filename)
{            filePanel.setFilename(filename);}
0
public String getFile()
{        return filePanel.getFilename();}
0
public void stateChanged(ChangeEvent e)
{        collector = (ResultCollector) createTestElement();    collector.loadExistingFile();}
1
public TestElement createTestElement()
{    if (collector == null) {        collector = new ResultCollector();    }    modifyTestElement(collector);    return (TestElement) collector.clone();}
0
public void modifyTestElement(TestElement c)
{    configureTestElement((AbstractListenerElement) c);    if (c instanceof ResultCollector) {        ResultCollector rc = (ResultCollector) c;        rc.setErrorLogging(errorLogging.isSelected());        rc.setSuccessOnlyLogging(successOnlyLogging.isSelected());        rc.setFilename(getFile());        collector = rc;    }}
0
public void configure(TestElement el)
{    super.configure(el);    setFile(el.getPropertyAsString(ResultCollector.FILENAME));    ResultCollector rc = (ResultCollector) el;    errorLogging.setSelected(rc.isErrorLogging());    successOnlyLogging.setSelected(rc.isSuccessOnlyLogging());    if (collector == null) {        collector = new ResultCollector();    }    collector.setSaveConfig((SampleSaveConfiguration) rc.getSaveConfig().clone());}
0
protected void configureTestElement(AbstractListenerElement mc)
{                                    super.configureTestElement(mc);    mc.setListener(this);}
0
protected Container makeTitlePanel()
{    Container panel = super.makeTitlePanel();            panel.add(getFilePanel());    return panel;}
0
protected void setModel(ResultCollector collector)
{    this.collector = collector;}
0
public void clearGui()
{    super.clearGui();    filePanel.clearGui();}
0
private void init()
{        counter = 0L;    runningSum = 0L;    max = Long.MIN_VALUE;    min = Long.MAX_VALUE;    errorCount = 0L;    firstTime = Long.MAX_VALUE;    lastTime = 0L;}
0
public void clear()
{    init();}
0
public long getElapsed()
{    if (lastTime == 0) {                return 0;    }    return lastTime - firstTime;}
0
public double getRate()
{    if (counter == 0) {                return 0.0;    }    long howLongRunning = lastTime - firstTime;    if (howLongRunning == 0) {        return Double.MAX_VALUE;    }    return (double) counter / howLongRunning * 1000.0;}
0
public double getRatePerMin()
{    if (counter == 0) {                return 0.0;    }    long howLongRunning = lastTime - firstTime;    if (howLongRunning == 0) {        return Double.MAX_VALUE;    }    return (double) counter / howLongRunning * 60000.0;}
0
public String getRateString()
{    double rate = getRate();    if (Double.compare(rate, Double.MAX_VALUE) == 0) {        return "N/A";    }    String unit = "sec";    if (rate < 1.0) {        rate *= 60.0;        unit = "min";    }    if (rate < 1.0) {        rate *= 60.0;        unit = "hour";    }    return rateFormatter.format(rate) + "/" + unit;}
0
public String getLabel()
{    return label;}
0
public int getIndex()
{    return index;}
0
public void addSample(SampleResult res)
{    long aTimeInMillis = res.getTime();    counter += res.getSampleCount();    errorCount += res.getErrorCount();    long startTime = res.getStartTime();    long endTime = res.getEndTime();    if (firstTime > startTime) {                firstTime = startTime;    }        if (lastTime < endTime) {        lastTime = endTime;    }    runningSum += aTimeInMillis;    if (aTimeInMillis > max) {        max = aTimeInMillis;    }    if (aTimeInMillis < min) {        min = aTimeInMillis;    }}
0
public void addSample(RunningSample rs)
{    this.counter += rs.counter;    this.errorCount += rs.errorCount;    this.runningSum += rs.runningSum;    if (this.firstTime > rs.firstTime) {        this.firstTime = rs.firstTime;    }    if (this.lastTime < rs.lastTime) {        this.lastTime = rs.lastTime;    }    if (this.max < rs.max) {        this.max = rs.max;    }    if (this.min > rs.min) {        this.min = rs.min;    }}
0
public long getMin()
{    long rval = 0;    if (min != Long.MAX_VALUE) {        rval = min;    }    return rval;}
0
public long getMax()
{    long rval = 0;    if (max != Long.MIN_VALUE) {        rval = max;    }    return rval;}
0
public long getAverage()
{    if (counter == 0) {        return 0;    }    return runningSum / counter;}
0
public long getNumSamples()
{    return counter;}
0
public double getErrorPercentage()
{    double rval = 0.0;    if (counter == 0) {        return rval;    }    rval = (double) errorCount / (double) counter;    return rval;}
0
public String getErrorPercentageString()
{    double myErrorPercentage = this.getErrorPercentage();    return errorFormatter.format(myErrorPercentage);}
0
public String toString()
{    return "Samples: " + this.getNumSamples() + "  " + "Avg: " + this.getAverage() + "  " + "Min: " + this.getMin() + "  " + "Max: " + this.getMax() + "  " + "Error Rate: " + this.getErrorPercentageString() + "  " + "Sample Rate: " + this.getRateString();}
0
public long getErrorCount()
{    return errorCount;}
0
public int getBytes()
{    return bytes;}
0
public long getAverage()
{    return average;}
0
public long getCount()
{    return count;}
0
public long getData()
{    return data;}
0
public long getDeviation()
{    return deviation;}
0
public long getDistributionLine()
{    return distributionLine;}
0
public boolean isSuccess()
{    return success;}
0
public long getErrorCount()
{    return errorCount;}
0
public String getLabel()
{    return label;}
0
public String getThreadName()
{    return threadName;}
0
public long getMedian()
{    return median;}
0
public double getThroughput()
{    return throughput;}
0
public int compareTo(Sample otherSample)
{    return Long.compare(count, otherSample.count);}
0
public boolean equals(Object o)
{    return (o instanceof Sample) && (this.compareTo((Sample) o) == 0);}
0
public int hashCode()
{    return (int) (count ^ (count >>> 32));}
0
public long getEndTime()
{    return endTime;}
0
public long getStartTime()
{    return endTime - data;}
0
public String getStartTimeFormatted(Format format)
{    return format.format(new Date(getStartTime()));}
0
private void init()
{        firstTime = Long.MAX_VALUE;    calculator.clear();    maxThroughput = Double.MIN_VALUE;    currentSample = new Sample();}
0
public synchronized void clear()
{    init();}
0
public Sample getCurrentSample()
{    return currentSample;}
0
public long getElapsed()
{    if (getCurrentSample().getEndTime() == 0) {                return 0;    }    return getCurrentSample().getEndTime() - firstTime;}
0
public double getRate()
{    if (calculator.getCount() == 0) {                return 0.0;    }    return getCurrentSample().getThroughput();}
0
public double getBytesPerSecond()
{    return getRatePerSecond(calculator.getTotalBytes());}
0
public double getKBPerSecond()
{        return getBytesPerSecond() / 1024;}
0
public double getSentBytesPerSecond()
{    return getRatePerSecond(calculator.getTotalSentBytes());}
0
private double getRatePerSecond(long value)
{    double rate = 0;    if (this.getElapsed() > 0 && value > 0) {        rate = value / ((double) this.getElapsed() / 1000);    }    if (rate < 0) {        rate = 0;    }    return rate;}
0
public double getSentKBPerSecond()
{        return getSentBytesPerSecond() / 1024;}
0
public double getAvgPageBytes()
{    long count = calculator.getCount();    if (count == 0) {        return 0;    }    return calculator.getTotalBytes() / (double) count;}
0
public String getLabel()
{    return label;}
0
public Sample addSample(SampleResult res)
{    long rtime;    long cmean;    long cstdv;    long cmedian;    long cpercent;    long eCount;    long endTime;    double throughput;    boolean rbool;    synchronized (calculator) {        calculator.addValue(res.getTime(), res.getSampleCount());        calculator.addBytes(res.getBytesAsLong());        calculator.addSentBytes(res.getSentBytes());        setStartTime(res);        eCount = getCurrentSample().getErrorCount();        eCount += res.getErrorCount();        endTime = getEndTime(res);        long howLongRunning = endTime - firstTime;        throughput = ((double) calculator.getCount() / (double) howLongRunning) * 1000.0;        if (throughput > maxThroughput) {            maxThroughput = throughput;        }        rtime = res.getTime();        cmean = (long) calculator.getMean();        cstdv = (long) calculator.getStandardDeviation();        cmedian = calculator.getMedian().longValue();        cpercent = calculator.getPercentPoint(0.500).longValue();                rbool = res.isSuccessful();    }    long count = calculator.getCount();    Sample s = new Sample(null, rtime, cmean, cstdv, cmedian, cpercent, throughput, eCount, rbool, count, endTime);    currentSample = s;    return s;}
0
private long getEndTime(SampleResult res)
{    long endTime = res.getEndTime();    long lastTime = getCurrentSample().getEndTime();    if (lastTime < endTime) {        lastTime = endTime;    }    return lastTime;}
0
private void setStartTime(SampleResult res)
{    long startTime = res.getStartTime();    if (firstTime > startTime) {                firstTime = startTime;    }}
0
public double getErrorPercentage()
{    double rval = 0.0;    if (calculator.getCount() == 0) {        return rval;    }    rval = (double) getCurrentSample().getErrorCount() / (double) calculator.getCount();    return rval;}
0
public String toString()
{    return "Samples: " + this.getCount() + "  " + "Avg: " + this.getMean() + "  " + "Min: " + this.getMin() + "  " + "Max: " + this.getMax() + "  " + "Error Rate: " + this.getErrorPercentage() + "  " + "Sample Rate: " + this.getRate();}
0
public long getErrorCount()
{    return getCurrentSample().getErrorCount();}
0
public double getMaxThroughput()
{    return maxThroughput;}
0
public Map<Number, Number[]> getDistribution()
{    return calculator.getDistribution();}
0
public Number getPercentPoint(double percent)
{    return calculator.getPercentPoint(percent);}
0
public long getCount()
{    return calculator.getCount();}
0
public Number getMax()
{    return calculator.getMax();}
0
public double getMean()
{    return calculator.getMean();}
0
public Number getMeanAsNumber()
{    return Long.valueOf((long) calculator.getMean());}
0
public Number getMedian()
{    return calculator.getMedian();}
0
public Number getMin()
{    if (calculator.getMin().longValue() < 0) {        return Long.valueOf(0);    }    return calculator.getMin();}
0
public Number getPercentPoint(float percent)
{    return calculator.getPercentPoint(percent);}
0
public double getStandardDeviation()
{    return calculator.getStandardDeviation();}
0
public long getBytes()
{    return bytes;}
0
public String getSampleNumberString()
{    StringBuilder sb = new StringBuilder();    if (sampleCount > 1) {        sb.append(totalSamples - sampleCount + 1);        sb.append('-');    }    sb.append(totalSamples);    return sb.toString();}
0
public long getElapsed()
{    return elapsed;}
0
public boolean isSuccess()
{    return success;}
0
public long getStartTime()
{    return startTime;}
0
public String getStartTimeFormatted(Format format)
{    return format.format(new Date(getStartTime()));}
0
public String getThreadName()
{    return threadName;}
0
public String getLabel()
{    return label;}
0
public int compareTo(TableSample o)
{    TableSample oo = o;    return (totalSamples - oo.totalSamples) < 0 ? -1 : (totalSamples == oo.totalSamples ? 0 : 1);}
0
public boolean equals(Object o)
{    return (o instanceof TableSample) && (this.compareTo((TableSample) o) == 0);}
0
public int hashCode()
{    return (int) (totalSamples ^ (totalSamples >>> 32));}
0
public long getLatency()
{    return latency;}
0
public long getConnectTime()
{    return connect;}
0
public long getSentBytes()
{    return sentBytes;}
0
 static String getVERSION()
{    return "@VERSION@";}
0
public static String getCopyRight()
{    return "Copyright (c) 1998-@YEAR@ The Apache Software Foundation";}
0
public static void createJmeterEnv()
{    File propsFile;    try {        propsFile = File.createTempFile("jmeter", ".properties");        propsFile.deleteOnExit();        JMeterUtils.loadJMeterProperties(propsFile.getAbsolutePath());    } catch (IOException ex) {        ex.printStackTrace(System.err);    }    JMeterUtils.setLocale(new Locale("ignoreResources"));}
0
public void testSuccess() throws Exception
{    createJmeterEnv();    JMeterUtils.setProperty(DistributedRunner.RETRIES_NUMBER, "1");    JMeterUtils.setProperty(DistributedRunner.CONTINUE_ON_FAIL, "false");    DistributedRunnerEmul obj = new DistributedRunnerEmul();    obj.engines.add(new EmulatorEngine());    obj.engines.add(new EmulatorEngine());    List<String> hosts = Arrays.asList("test1", "test2");    obj.init(hosts, new HashTree());    obj.start();    obj.shutdown(hosts);    obj.stop(hosts);    obj.exit(hosts);}
0
public void testFailure1() throws Exception
{    createJmeterEnv();    JMeterUtils.setProperty(DistributedRunner.RETRIES_NUMBER, "2");    JMeterUtils.setProperty(DistributedRunner.RETRIES_DELAY, "1");    JMeterUtils.setProperty(DistributedRunner.CONTINUE_ON_FAIL, "true");    DistributedRunnerEmul obj = new DistributedRunnerEmul();    List<String> hosts = Arrays.asList("test1", "test2");    initRunner(obj, hosts);    obj.start();    obj.shutdown(hosts);    obj.stop(hosts);    obj.exit(hosts);}
0
private void initRunner(DistributedRunnerEmul runner, List<String> hosts)
{    PrintStream origSystemOut = System.out;    ByteArrayOutputStream catchingOut = new ByteArrayOutputStream();    System.setOut(new PrintStream(catchingOut));    try {        runner.init(hosts, new HashTree());        fail();    } catch (RuntimeException ignored) {    }    System.setOut(origSystemOut);}
0
public void testFailure2() throws Exception
{    createJmeterEnv();    JMeterUtils.setProperty(DistributedRunner.RETRIES_NUMBER, "1");    JMeterUtils.setProperty(DistributedRunner.RETRIES_DELAY, "1");    JMeterUtils.setProperty(DistributedRunner.CONTINUE_ON_FAIL, "false");    DistributedRunnerEmul obj = new DistributedRunnerEmul();    List<String> hosts = Arrays.asList("test1", "test2");    initRunner(obj, hosts);}
0
public void testFailure3() throws Exception
{    createJmeterEnv();    JMeterUtils.setProperty(DistributedRunner.RETRIES_NUMBER, "1");    JMeterUtils.setProperty(DistributedRunner.RETRIES_DELAY, "1");    JMeterUtils.setProperty(DistributedRunner.CONTINUE_ON_FAIL, "true");    DistributedRunnerEmul obj = new DistributedRunnerEmul();    List<String> hosts = Arrays.asList("test1", "test2");    initRunner(obj, hosts);    obj.start(hosts);    obj.shutdown(hosts);    obj.stop(hosts);    obj.exit(hosts);}
0
protected JMeterEngine createEngine(String address)
{    if (engines.isEmpty()) {        throw new IllegalArgumentException("Throwing on Engine creation to simulate failure");    }    EmulatorEngine engine = engines.remove(0);    engine.setHost(address);    return engine;}
0
public void configure(HashTree testPlan)
{    }
1
public void runTest() throws JMeterEngineException
{    }
1
public void stopTest(boolean now)
{    }
1
public void reset()
{    }
1
public void setProperties(Properties p)
{    }
1
public void exit()
{    }
1
public boolean isActive()
{        return false;}
1
public void setHost(String host)
{    this.host = host;}
0
public void testInterfaces() throws Exception
{    String interfaces = Collections.list(NetworkInterface.getNetworkInterfaces()).stream().map(this::ifaceWithAddresses).collect(Collectors.joining(", "));    perr("Interfaces: {" + interfaces + "}");    String externInterface = guessExternalIPv4Interface();    perr("Choose " + externInterface + " to talk to external services");    String localHost = getLocalHost().getHostAddress();    boolean localHostIsBound = Collections.list(NetworkInterface.getNetworkInterfaces()).stream().flatMap(iface -> iface.getInterfaceAddresses().stream()).filter(    iface -> iface.getAddress().getAddress().length == 4).map(this::toSubnetInfo).anyMatch(subnetInfo -> subnetInfo.isInRange(localHost));    Assert.assertTrue("localHost: " + localHost + " is bound to an interface", localHostIsBound);}
0
private String guessExternalIPv4Interface() throws SocketException
{    return Collections.list(NetworkInterface.getNetworkInterfaces()).stream().map(n -> Collections.list(n.getInetAddresses())).flatMap(ArrayList<InetAddress>::stream).filter(i -> !i.isLoopbackAddress()).filter(i -> i.getAddress().length == 4).map(InetAddress::getHostAddress).findFirst().orElse("NO DEVICE");}
0
private SubnetInfo toSubnetInfo(InterfaceAddress addr)
{    return new SubnetUtils(addr.getAddress().getHostAddress() + "/" + addr.getNetworkPrefixLength()).getInfo();}
0
private String ifaceWithAddresses(NetworkInterface iface)
{    return iface + " => [" + iface.getInterfaceAddresses().stream().map(InterfaceAddress::toString).collect(Collectors.joining(", ")) + "]";}
0
public void testLocalHost() throws Exception
{    InetAddress localHost = getLocalHost();    showAddress(localHost);    showAddress(InetAddress.getByName("localhost"));    for (InetAddress a : InetAddress.getAllByName(InetAddress.getLocalHost().getHostName())) {        perr("====================");        showAddress(a);    }}
0
private InetAddress getLocalHost() throws UnknownHostException
{    final String key = "java.rmi.server.hostname";        String host = System.getProperties().getProperty(key);    perr(key + "=" + host);    InetAddress localHost;    if (host == null) {        localHost = InetAddress.getLocalHost();    } else {        localHost = InetAddress.getByName(host);    }    return localHost;}
0
private static void showAddress(InetAddress localHost)
{    perr(localHost);    perr("isSiteLocalAddress:" + localHost.isSiteLocalAddress());    perr("isAnyLocalAddress:" + localHost.isAnyLocalAddress());    perr("isLinkLocalAddress:" + localHost.isLinkLocalAddress());    perr("isLoopbackAddress:" + localHost.isLoopbackAddress());    perr("isMulticastAddress:" + localHost.isMulticastAddress());}
0
private static void perr(Object s)
{    System.err.println(s);}
0
public void testCloning() throws Exception
{    ListedHashTree original = new ListedHashTree();    GenericController controller = new GenericController();    controller.setName("controller");    Arguments args = new Arguments();    args.setName("args");    TestPlan plan = new TestPlan();    plan.addParameter("server", "jakarta");    original.add(controller, args);    original.add(plan);    ResultCollector listener = new ResultCollector();    listener.setName("Collector");    original.add(controller, listener);    TreeCloner cloner = new TreeCloner();    original.traverse(cloner);    ListedHashTree newTree = cloner.getClonedTree();    assertTrue(original != newTree);    assertEquals(original.size(), newTree.size());    assertEquals(original.getTree(original.getArray()[0]).size(), newTree.getTree(newTree.getArray()[0]).size());    assertTrue(original.getArray()[0] != newTree.getArray()[0]);    assertEquals(((GenericController) original.getArray()[0]).getName(), ((GenericController) newTree.getArray()[0]).getName());    assertSame(original.getTree(original.getArray()[0]).getArray()[1], newTree.getTree(newTree.getArray()[0]).getArray()[1]);    TestPlan clonedTestPlan = (TestPlan) newTree.getArray()[1];    clonedTestPlan.setRunningVersion(true);    clonedTestPlan.recoverRunningVersion();    assertTrue(!plan.getUserDefinedVariablesAsProperty().isRunningVersion());    assertTrue(clonedTestPlan.getUserDefinedVariablesAsProperty().isRunningVersion());    Arguments vars = (Arguments) plan.getUserDefinedVariablesAsProperty().getObjectValue();    PropertyIterator iter = ((CollectionProperty) vars.getProperty(Arguments.ARGUMENTS)).iterator();    while (iter.hasNext()) {        JMeterProperty argProp = iter.next();        assertTrue(!argProp.isRunningVersion());        assertTrue(argProp.getObjectValue() instanceof Argument);        Argument arg = (Argument) argProp.getObjectValue();        arg.setValue("yahoo");        assertEquals("yahoo", arg.getValue());    }    vars = (Arguments) clonedTestPlan.getUserDefinedVariablesAsProperty().getObjectValue();    iter = vars.propertyIterator();    while (iter.hasNext()) {        assertTrue(iter.next().isRunningVersion());    }}
0
public void setUp()
{    variables = new TestPlan();    variables.addParameter("server", "jakarta.apache.org");    variables.addParameter("username", "jack");            variables.addParameter("password", "his_password");    variables.addParameter("normal_regex", "Hello .*");    variables.addParameter("bounded_regex", "(<.*>)");    JMeterVariables vars = new JMeterVariables();    vars.put("server", "jakarta.apache.org");    JMeterContextService.getContext().setVariables(vars);    JMeterContextService.getContext().setSamplingStarted(true);}
0
public void testReverseReplacement() throws Exception
{    ValueReplacer replacer = new ValueReplacer(variables);    assertTrue(variables.getUserDefinedVariables().containsKey("server"));    assertTrue(replacer.containsKey("server"));    TestElement element = new TestPlan();    element.setProperty(new StringProperty("domain", "jakarta.apache.org"));    List<Object> argsin = new ArrayList<>();    argsin.add("username is jack");    argsin.add("his_password");    element.setProperty(new CollectionProperty("args", argsin));    replacer.reverseReplace(element);    assertEquals("${server}", element.getPropertyAsString("domain"));    @SuppressWarnings("unchecked")    List<JMeterProperty> args = (List<JMeterProperty>) element.getProperty("args").getObjectValue();    assertEquals("username is ${username}", args.get(0).getStringValue());    assertEquals("${password}", args.get(1).getStringValue());}
0
public void testReverseReplacementXml() throws Exception
{    ValueReplacer replacer = new ValueReplacer(variables);    assertTrue(variables.getUserDefinedVariables().containsKey("bounded_regex"));    assertTrue(variables.getUserDefinedVariables().containsKey("normal_regex"));    assertTrue(replacer.containsKey("bounded_regex"));    assertTrue(replacer.containsKey("normal_regex"));    TestElement element = new TestPlan();    element.setProperty(new StringProperty("domain", "<this><is>xml</this></is>"));    List<Object> argsin = new ArrayList<>();    argsin.add("<this><is>xml</this></is>");    argsin.add("And I say: Hello World.");    element.setProperty(new CollectionProperty("args", argsin));    replacer.reverseReplace(element, true);    @SuppressWarnings("unchecked")    List<JMeterProperty> args = (List<JMeterProperty>) element.getProperty("args").getObjectValue();    assertEquals("${bounded_regex}", element.getPropertyAsString("domain"));    assertEquals("${bounded_regex}", args.get(0).getStringValue());}
0
public void testOverlappingMatches() throws Exception
{    TestPlan plan = new TestPlan();    plan.addParameter("longMatch", "servername");    plan.addParameter("shortMatch", ".*");    ValueReplacer replacer = new ValueReplacer(plan);    TestElement element = new TestPlan();    element.setProperty(new StringProperty("domain", "servername.domain"));    replacer.reverseReplace(element, true);    String replacedDomain = element.getPropertyAsString("domain");    assertEquals("${${shortMatch}", replacedDomain);}
0
public void testPartialWordMatchesWithoutParens() throws Exception
{    assertEquals("toto%40005", replaceWord("005", "toto%40005"));}
0
public void testPartialWordMatchesWithParens() throws Exception
{    assertEquals("toto%40${domainMatcher}", replaceWord("(005)", "toto%40005"));}
0
public void testCompleteWordMatchesWithoutParens() throws Exception
{    assertEquals("toto@${domainMatcher}", replaceWord("005", "toto@005"));}
0
public void testCompleteWordMatchesWithParens() throws Exception
{    assertEquals("toto@${domainMatcher}", replaceWord("(005)", "toto@005"));}
0
private String replaceWord(String matchRegex, String testData) throws Exception
{    TestPlan plan = new TestPlan();    plan.addParameter("domainMatcher", matchRegex);    ValueReplacer replacer = new ValueReplacer(plan);    TestElement element = new TestPlan();    element.setProperty(new StringProperty("mail", testData));    replacer.reverseReplace(element, true);    return element.getPropertyAsString("mail");}
0
public void testReplace() throws Exception
{    ValueReplacer replacer = new ValueReplacer();    replacer.setUserDefinedVariables(variables.getUserDefinedVariables());    TestElement element = new ConfigTestElement();    element.setProperty(new StringProperty("domain", "${server}"));    replacer.replaceValues(element);    element.setRunningVersion(true);    assertEquals("jakarta.apache.org", element.getPropertyAsString("domain"));}
0
public void testReplaceStringWithBackslash() throws Exception
{    ValueReplacer replacer = new ValueReplacer();    replacer.setUserDefinedVariables(variables.getUserDefinedVariables());    TestElement element = new ConfigTestElement();    String input = "\\${server} \\ \\\\ \\\\\\ \\, ";    element.setProperty(new StringProperty("domain", input));    replacer.replaceValues(element);    element.setRunningVersion(true);    assertEquals(input, element.getPropertyAsString("domain"));}
0
public void testReplaceFunctionWithBackslash() throws Exception
{    ValueReplacer replacer = new ValueReplacer();    replacer.setUserDefinedVariables(variables.getUserDefinedVariables());    TestElement element = new ConfigTestElement();    String input = "${server} \\ \\\\ \\\\\\ \\, ";    element.setProperty(new StringProperty("domain", input));    replacer.replaceValues(element);    element.setRunningVersion(true);    assertEquals("jakarta.apache.org \\ \\ \\\\ , ", element.getPropertyAsString("domain"));}
0
public void tearDown() throws Exception
{    JMeterContextService.getContext().setSamplingStarted(false);}
0
public static void beforeClass()
{    ConfigurationBuilder<BuiltConfiguration> builder = ConfigurationBuilderFactory.newConfigurationBuilder();    builder.setPackages("org.apache.jmeter.gui.logging");    AppenderComponentBuilder appenderBuilder = builder.newAppender("Stdout", "CONSOLE").addAttribute("target", ConsoleAppender.Target.SYSTEM_OUT);    appenderBuilder.add(builder.newLayout("PatternLayout").addAttribute("pattern", "%d %p %c{1.}: %m%n"));    builder.add(appenderBuilder);    appenderBuilder = builder.newAppender("gui-log-event", "GuiLogEvent");    appenderBuilder.add(builder.newLayout("PatternLayout").addAttribute("pattern", "%d %p %c{1.}: %m%n"));    builder.add(appenderBuilder);    RootLoggerComponentBuilder rootLoggerBuilder = builder.newRootLogger(Level.INFO);    rootLoggerBuilder.add(builder.newAppenderRef("Stdout")).add(builder.newAppenderRef("gui-log-event"));    builder.add(rootLoggerBuilder);    final LoggerContext loggerContext = Configurator.initialize(builder.build());    final Appender guiLogEventAppender = loggerContext.getRootLogger().getAppenders().get("gui-log-event");    guiLogEventAppender.stop();    guiLogEventAppender.setHandler(new ErrorHandler() {        public void error(String msg) {            log4j2LevelErrorMessages.add(msg);        }        public void error(String msg, Throwable t) {            log4j2LevelErrorMessages.add(msg + " " + t);        }        public void error(String msg, LogEvent event, Throwable t) {            log4j2LevelErrorMessages.add(msg + " " + t);        }    });    guiLogEventAppender.start();}
0
public void error(String msg)
{    log4j2LevelErrorMessages.add(msg);}
0
public void error(String msg, Throwable t)
{    log4j2LevelErrorMessages.add(msg + " " + t);}
0
public void error(String msg, LogEvent event, Throwable t)
{    log4j2LevelErrorMessages.add(msg + " " + t);}
0
public void setUp()
{    log4j2LevelErrorMessages.clear();}
0
public void testSimpleLogging() throws Exception
{    final Logger log = LoggerFactory.getLogger(TestGuiLogEventAppender.class);        assertTrue("Logging appender error: " + log4j2LevelErrorMessages, log4j2LevelErrorMessages.isEmpty());}
1
public void testSetLanguage()
{    try {                @SuppressWarnings("deprecation")        JSyntaxTextArea textArea = new JSyntaxTextArea(30, 50, false);        textArea.setLanguage(null);        assertEquals(SyntaxConstants.SYNTAX_STYLE_NONE, textArea.getSyntaxEditingStyle());    } catch (HeadlessException he) {        }}
0
public void testSyntaxNames() throws IllegalArgumentException, IllegalAccessException
{    HashSet<String> values = new HashSet<>();    for (Field field : SyntaxConstants.class.getFields()) {        int modifiers = field.getModifiers();        if (field.getType().equals(String.class) && Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers)) {            values.add((String) field.get(null));        }    }    final Properties languageProperties = JMeterUtils.loadProperties(    "org/apache/jmeter/gui/util/textarea.properties");    for (Object s : languageProperties.values()) {        if (!values.contains(s)) {            fail("Invalid property value: " + s);        }    }}
0
public static void main(String[] args) throws Exception
{    JFrame frame = new JFrame("TristateCheckBoxTest");    frame.setLayout(new GridLayout(0, 1, 15, 15));    UIManager.LookAndFeelInfo[] lfs = UIManager.getInstalledLookAndFeels();    for (UIManager.LookAndFeelInfo lf : lfs) {        System.out.println("Look&Feel " + lf.getName());        UIManager.setLookAndFeel(lf.getClassName());        frame.add(makePanel(lf.getName()));    }    frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);    frame.pack();    frame.setVisible(true);}
0
private static JPanel makePanel(String name)
{    final TristateCheckBox tristateBox = new TristateCheckBox("Tristate checkbox (icon)", false);    createTristate(tristateBox);    final TristateCheckBox tristateBoxorig = new TristateCheckBox("Tristate checkbox (original)", true);    createTristate(tristateBoxorig);    final JCheckBox normalBox = new JCheckBox("Normal checkbox");    normalBox.addActionListener(new ActionListener() {        @Override        public void actionPerformed(ActionEvent e) {            System.out.println(e);        }    });    final JCheckBox enabledBox = new JCheckBox("Enable", true);    enabledBox.addItemListener(new ItemListener() {        @Override        public void itemStateChanged(ItemEvent e) {            tristateBox.setEnabled(enabledBox.isSelected());            normalBox.setEnabled(enabledBox.isSelected());        }    });    JPanel panel = new JPanel(new GridLayout(0, 1, 5, 5));    panel.add(new JLabel(name));    panel.add(tristateBox);    panel.add(tristateBoxorig);    panel.add(normalBox);    panel.add(enabledBox);    return panel;}
0
public void actionPerformed(ActionEvent e)
{    System.out.println(e);}
0
public void itemStateChanged(ItemEvent e)
{    tristateBox.setEnabled(enabledBox.isSelected());    normalBox.setEnabled(enabledBox.isSelected());}
0
private static void createTristate(final TristateCheckBox tristateBox)
{        tristateBox.setIndeterminate();    tristateBox.addItemListener(new ItemListener() {        @Override        public void itemStateChanged(ItemEvent e) {            System.out.println(e);            switchOnAction(tristateBox);        }    });    tristateBox.addActionListener(new ActionListener() {        @Override        public void actionPerformed(ActionEvent e) {            System.out.println(e);            switchOnAction(tristateBox);        }    });}
0
public void itemStateChanged(ItemEvent e)
{    System.out.println(e);    switchOnAction(tristateBox);}
0
public void actionPerformed(ActionEvent e)
{    System.out.println(e);    switchOnAction(tristateBox);}
0
private static void switchOnAction(TristateCheckBox tristateBox)
{    switch(tristateBox.getState()) {        case SELECTED:            System.out.println("Selected");            break;        case DESELECTED:            System.out.println("Not Selected");            break;        case INDETERMINATE:            System.out.println("Tristate Selected");            break;        default:            System.err.println("Unexpected state: " + tristateBox.getState());            break;    }}
0
public void testFailureWhenJmxDoesntExist()
{    JMeter jmeter = new JMeter();    try {        jmeter.runNonGui("testPlan.jmx", null, false, null, false);        fail("Expected ConfigurationException to be thrown");    } catch (ConfigurationException e) {        assertTrue("When the plugin doesn't exist, the method 'runNonGui' should throw a ConfigurationException", e instanceof ConfigurationException);        assertTrue("When the file doesn't exist, this method 'runNonGui' should have a detailed message", e.getMessage().contains("doesn't exist or can't be opened"));    }}
0
public void testSuccessWhenJmxExists() throws IOException, ConfigurationException
{    File temp = File.createTempFile("testPlan", ".jmx");    String testPlan = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<jmeterTestPlan version=\"1.2\" properties=\"5.0\" jmeter=\"5.2-SNAPSHOT\">\n" + "  <hashTree>\n" + "    <TestPlan guiclass=\"TestPlanGui\" testclass=\"TestPlan\" testname=\"Test Plan\" enabled=\"true\">\n" + "      <stringProp name=\"TestPlan.comments\"></stringProp>\n" + "      <boolProp name=\"TestPlan.functional_mode\">false</boolProp>\n" + "      <boolProp name=\"TestPlan.tearDown_on_shutdown\">true</boolProp>\n" + "      <boolProp name=\"TestPlan.serialize_threadgroups\">false</boolProp>\n" + "      <elementProp name=\"TestPlan.user_defined_variables\" elementType=\"Arguments\" guiclass=\"ArgumentsPanel\" " + "testclass=\"Arguments\" testname=\"User Defined Variables\" enabled=\"true\">\n" + "        <collectionProp name=\"Arguments.arguments\"/>\n" + "      </elementProp>\n" + "      <stringProp name=\"TestPlan.user_define_classpath\"></stringProp></TestPlan>" + "    <hashTree/></hashTree></jmeterTestPlan>";    try (FileWriter fw = new FileWriter(temp);        BufferedWriter out = new BufferedWriter(fw)) {        out.write(testPlan);    }    try {        JMeter jmeter = new JMeter();        jmeter.runNonGui(temp.getAbsolutePath(), null, false, null, false);    } finally {        assertTrue("File " + temp.getAbsolutePath() + " should have been deleted", temp.delete());    }}
0
public void testFailureWithMissingPlugin() throws IOException, ConfigurationException
{    File temp = File.createTempFile("testPlan", ".jmx");    String testPlan = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<jmeterTestPlan version=\"1.2\" properties=\"5.0\" jmeter=\"5.2-SNAPSHOT.20190506\">\n" + "  <hashTree>\n" + "    <TestPlan guiclass=\"TestPlanGui\" testclass=\"TestPlan\" testname=\"Test Plan\" enabled=\"true\">\n" + "      <stringProp name=\"TestPlan.comments\"></stringProp>\n" + "      <boolProp name=\"TestPlan.functional_mode\">false</boolProp>\n" + "      <boolProp name=\"TestPlan.tearDown_on_shutdown\">true</boolProp>\n" + "      <boolProp name=\"TestPlan.serialize_threadgroups\">false</boolProp>\n" + "      <elementProp name=\"TestPlan.user_defined_variables\" elementType=\"Arguments\" " + "guiclass=\"ArgumentsPanel\" testclass=\"Arguments\" testname=\"User Defined Variables\" enabled=\"true\">\n" + "        <collectionProp name=\"Arguments.arguments\"/>\n" + "      </elementProp>\n" + "      <stringProp name=\"TestPlan.user_define_classpath\"></stringProp>\n" + "    </TestPlan>\n" + "    <hashTree>\n" + "      <hashTree>\n" + "        <kg.apc.jmeter.samplers.DummySampler guiclass=\"kg.apc.jmeter.samplers.DummySamplerGui\" " + "testclass=\"kg.apc.jmeter.samplers.DummySampler\" testname=\"jp@gc - Dummy Sampler\" enabled=\"true\">\n" + "          <boolProp name=\"WAITING\">true</boolProp>\n" + "          <boolProp name=\"SUCCESFULL\">true</boolProp>\n" + "          <stringProp name=\"RESPONSE_CODE\">200</stringProp>\n" + "          <stringProp name=\"RESPONSE_MESSAGE\">OK</stringProp>\n" + "          <stringProp name=\"REQUEST_DATA\">{&quot;email&quot;:&quot;user1&quot;, &quot;password&quot;:&quot;password1&quot;}；" + "</stringProp>\n" + "          <stringProp name=\"RESPONSE_DATA\">{&quot;successful&quot;: true, &quot;account_id&quot;:&quot;0123456789&quot;}</stringProp>\n" + "          <stringProp name=\"RESPONSE_TIME\">${__Random(50,500)}</stringProp>\n" + "          <stringProp name=\"LATENCY\">${__Random(1,50)}</stringProp>\n" + "          <stringProp name=\"CONNECT\">${__Random(1,5)}</stringProp>\n" + "        </kg.apc.jmeter.samplers.DummySampler></hashTree></hashTree>\n" + "  </hashTree></jmeterTestPlan><hashTree/></hashTree>\n" + "</jmeterTestPlan>";    try (FileWriter fw = new FileWriter(temp);        BufferedWriter out = new BufferedWriter(fw)) {        out.write(testPlan);    }    JMeter jmeter = new JMeter();    try {        jmeter.runNonGui(temp.getAbsolutePath(), null, false, null, false);        fail("Expected ConfigurationException to be thrown");    } catch (ConfigurationException e) {        assertTrue("When the plugin doesn't exist, the method 'runNonGui' should throw a ConfigurationException", e instanceof ConfigurationException);        assertTrue("When the plugin doesn't exist, the method 'runNonGui' should have a detailed message", e.getMessage().contains("Error in NonGUIDriver Problem loading XML from"));    } finally {        assertTrue("File " + temp.getAbsolutePath() + " should have been deleted", temp.delete());    }}
0
public String describe()
{    return "JMeter ExcludeCategoryFilter";}
0
public boolean shouldRun(Description description)
{        Category cat = description.getAnnotation(Category.class);    if (cat != null) {        Class<?>[] categories = cat.value();        for (Class<?> class1 : categories) {            if (excludedClass.isAssignableFrom(class1)) {                return false;            }        }    }    return true;}
0
private static void logprop(String prop)
{    System.out.println(prop + "=" + System.getProperty(prop));}
0
protected static File findTestFile(String file)
{    File f = new File(file);    if (filePrefix.length() > 0 && !f.isAbsolute()) {                f = new File(filePrefix, file);    }    return f;}
0
protected static String findTestPath(String file)
{    File f = new File(file);    if (filePrefix.length() > 0 && !f.isAbsolute()) {                return filePrefix + file;    }    return file;}
0
protected void checkInvalidParameterCounts(AbstractFunction func, int minimum) throws Exception
{    Collection<CompoundVariable> parms = new LinkedList<>();    for (int c = 0; c < minimum; c++) {        try {            func.setParameters(parms);            fail("Should have generated InvalidVariableException for " + parms.size() + " parameters");        } catch (InvalidVariableException ignored) {        }        parms.add(new CompoundVariable());    }    func.setParameters(parms);}
0
protected void checkInvalidParameterCounts(AbstractFunction func, int min, int max) throws Exception
{    Collection<CompoundVariable> parms = new LinkedList<>();    for (int count = 0; count < min; count++) {        try {            func.setParameters(parms);            fail("Should have generated InvalidVariableException for " + parms.size() + " parameters");        } catch (InvalidVariableException ignored) {        }        parms.add(new CompoundVariable());    }    for (int count = min; count <= max; count++) {        func.setParameters(parms);        parms.add(new CompoundVariable());    }    parms.add(new CompoundVariable());    try {        func.setParameters(parms);        fail("Should have generated InvalidVariableException for " + parms.size() + " parameters");    } catch (InvalidVariableException ignored) {    }}
0
public static void assertPrimitiveEquals(boolean expected, boolean actual)
{    org.junit.Assert.assertEquals(Boolean.valueOf(expected), Boolean.valueOf(actual));}
0
protected String getResourceFilePath(String resource)
{    return JMeterTestUtils.getResourceFilePath(getClass(), resource);}
0
private static void logprop(String prop)
{    System.out.println(prop + "=" + System.getProperty(prop));}
0
protected static File findTestFile(String file)
{    File f = new File(file);    if (filePrefix.length() > 0 && !f.isAbsolute()) {                f = new File(filePrefix, file);    }    return f;}
0
protected void checkInvalidParameterCounts(AbstractFunction func, int minimum) throws Exception
{    Collection<CompoundVariable> parms = new LinkedList<>();    for (int c = 0; c < minimum; c++) {        try {            func.setParameters(parms);            fail("Should have generated InvalidVariableException for " + parms.size() + " parameters");        } catch (InvalidVariableException ignored) {        }        parms.add(new CompoundVariable());    }    func.setParameters(parms);}
0
protected String getResourceFilePath(String resource)
{    return JMeterTestUtils.getResourceFilePath(getClass(), resource);}
0
public static String setupJMeterHome()
{    if (filePrefix == null) {        String prefix = ".";        for (int i = 0; i < 5 && !new File(prefix, "bin/jmeter.properties").canRead(); i++) {            prefix = "../" + prefix;        }                String home = new File(prefix).getAbsolutePath();        filePrefix = prefix + "/bin/";        System.out.println("Setting JMeterHome: " + home);        JMeterUtils.setJMeterHome(home);    }    return filePrefix;}
0
public static String getResourceFilePath(Class<?> klass, String resource)
{    return ResourceLocator.getResource(klass, resource);}
0
public SampleResult sample(Entry e)
{    if (wait > 0) {        try {            Thread.sleep(wait);        } catch (InterruptedException e1) {                }    }    samples++;    return null;}
0
public String toString()
{    return getName();}
0
public long getSamples()
{    return samples;}
0
public void setUp()
{    JMeterContext jmctx = JMeterContextService.getContext();    resultAction = new ResultAction();    resultAction.setThreadContext(jmctx);    JMeterVariables vars = new JMeterVariables();    jmctx.setVariables(vars);    sampleResult = new SampleResult();    sampleResult.setResponseData(data, null);}
0
public void testSuccess()
{    sampleResult.setSuccessful(true);    resultAction.setErrorAction(ResultAction.ON_ERROR_STOPTEST);    resultAction.sampleOccurred(new SampleEvent(sampleResult, "JUnit-TG"));    Assert.assertFalse(sampleResult.isStopTest());}
0
public void testOnFailureStopTest()
{    sampleResult.setSuccessful(false);    resultAction.setErrorAction(ResultAction.ON_ERROR_STOPTEST);    resultAction.sampleOccurred(new SampleEvent(sampleResult, "JUnit-TG"));    Assert.assertTrue(sampleResult.isStopTest());    Assert.assertFalse(sampleResult.isStopTestNow());    Assert.assertFalse(sampleResult.isStopThread());    Assert.assertFalse(sampleResult.isStartNextThreadLoop());}
0
public void testOnFailureStopTestNow()
{    sampleResult.setSuccessful(false);    resultAction.setErrorAction(ResultAction.ON_ERROR_STOPTEST_NOW);    resultAction.sampleOccurred(new SampleEvent(sampleResult, "JUnit-TG"));    Assert.assertFalse(sampleResult.isStopTest());    Assert.assertTrue(sampleResult.isStopTestNow());    Assert.assertFalse(sampleResult.isStopThread());    Assert.assertFalse(sampleResult.isStartNextThreadLoop());}
0
public void testOnFailureStopThread()
{    sampleResult.setSuccessful(false);    resultAction.setErrorAction(ResultAction.ON_ERROR_STOPTHREAD);    resultAction.sampleOccurred(new SampleEvent(sampleResult, "JUnit-TG"));    Assert.assertFalse(sampleResult.isStopTest());    Assert.assertFalse(sampleResult.isStopTestNow());    Assert.assertTrue(sampleResult.isStopThread());    Assert.assertFalse(sampleResult.isStartNextThreadLoop());}
0
public void testOnFailureStartNextThreadLoop()
{    sampleResult.setSuccessful(false);    resultAction.setErrorAction(ResultAction.ON_ERROR_START_NEXT_THREAD_LOOP);    resultAction.sampleOccurred(new SampleEvent(sampleResult, "JUnit-TG"));    Assert.assertFalse(sampleResult.isStopTest());    Assert.assertFalse(sampleResult.isStopTestNow());    Assert.assertFalse(sampleResult.isStopThread());    Assert.assertTrue(sampleResult.isStartNextThreadLoop());}
0
public void setUp() throws IOException
{    tempCsv = File.createTempFile("samplecsv", ".csv");    tempCsv.deleteOnExit();    try (CsvSampleWriter writer = new CsvSampleWriter(tempCsv, metadata)) {        writer.setSeparator(',');        for (long i = 0; i < NR_ROWS; i++) {            final Sample sample = new SampleBuilder(metadata).add(i).add("a" + i).build();            writer.write(sample);        }    }}
0
public void testConstructorWithInvalidFile() throws Exception
{    try (CsvSampleReader csv = new CsvSampleReader(new File("/not/available.csv"), metadata)) {        Assert.fail("File should not be readable and therefor illegal");    }}
0
public void testGetMetadata()
{    try (CsvSampleReader reader = new CsvSampleReader(tempCsv, metadata)) {        Assert.assertThat(reader.getMetadata().toString(), CoreMatchers.is(metadata.toString()));    }}
0
public void testReadSample()
{    try (CsvSampleReader reader = new CsvSampleReader(tempCsv, metadata)) {        for (long i = 0; i < NR_ROWS; i++) {            Sample expected = new SampleBuilder(metadata).add(i).add("a" + i).build();            Assert.assertThat(reader.readSample().toString(), CoreMatchers.is(expected.toString()));        }    }}
0
public void testPeek()
{    try (CsvSampleReader reader = new CsvSampleReader(tempCsv, metadata)) {        for (long i = 0; i < NR_ROWS; i++) {            Sample expected = new SampleBuilder(metadata).add(i).add("a" + i).build();            Assert.assertThat(reader.peek().toString(), CoreMatchers.is(expected.toString()));            reader.readSample();        }    }}
0
public void testHasNextAndReadSample()
{    try (CsvSampleReader reader = new CsvSampleReader(tempCsv, metadata)) {        for (long i = 0; i < NR_ROWS; i++) {            Assert.assertTrue(reader.hasNext());            final Sample sample = reader.readSample();            Assert.assertEquals(i, sample.getSampleRow());        }        Assert.assertFalse(reader.hasNext());    }}
0
public void testClose()
{    CsvSampleReader reader = new CsvSampleReader(tempCsv, metadata);    reader.close();    try {        reader.readSample();        fail("Stream should be closed.");    } catch (SampleException expected) {        }}
0
public void testToString()
{    assertEquals("a,b", new SampleMetadata(',', "a", "b").toString());}
0
public void setUp() throws Exception
{        JMeterTestUtils.setupJMeterHome();    JMeterUtils.loadJMeterProperties(JMeterUtils.getJMeterBinDir() + "/jmeter.properties");}
0
public void testCsvSampleWriterConstructorWithNull() throws Exception
{    CsvSampleWriter dummy = new CsvSampleWriter(null);        dummy.close();}
0
public void testCsvSampleWriterConstructorWithWriter() throws Exception
{    try (Writer writer = new StringWriter();        CsvSampleWriter csvWriter = new CsvSampleWriter(writer, metadata)) {        csvWriter.writeHeader();        csvWriter.flush();        assertEquals("a,b" + LINE_SEP, writer.toString());    }}
0
public void testWriteWithoutWriter() throws Exception
{    try (CsvSampleWriter csvWriter = new CsvSampleWriter(metadata)) {        Sample sample = new SampleBuilder(metadata).add("a1").add("b1").build();        try {            csvWriter.write(sample);            fail("ISE expected");        } catch (IllegalStateException e) {                }    }}
0
public void testWriteWithoutSample() throws Exception
{    try (Writer writer = new StringWriter();        CsvSampleWriter csvWriter = new CsvSampleWriter(writer, metadata)) {        try {            csvWriter.write(null);            fail("NPE expected");        } catch (NullPointerException e) {                }    }}
0
public void testWrite() throws Exception
{    try (Writer writer = new StringWriter();        CsvSampleWriter csvWriter = new CsvSampleWriter(writer, metadata)) {        Sample sample = new SampleBuilder(metadata).add("a1").add("b1").build();        csvWriter.write(sample);        csvWriter.flush();        assertEquals("a1,b1" + LINE_SEP, writer.toString());    }}
0
public void testgetApdexPerTransactionProperty() throws Exception
{    final Props props = new Props();    final String REPORT_GENERATOR_KEY_PREFIX = "jmeter.reportgenerator";    final char KEY_DELIMITER = '.';    final String REPORT_GENERATOR_KEY_APDEX_PER_TRANSACTION = REPORT_GENERATOR_KEY_PREFIX + KEY_DELIMITER + "apdex_per_transaction";    props.load(this.getClass().getResourceAsStream("reportgenerator_test.properties"));    final String apdexPerTransaction = getOptionalProperty(props, REPORT_GENERATOR_KEY_APDEX_PER_TRANSACTION);    assertEquals(apdexString, apdexPerTransaction);}
0
public void testgetApdexPerTransactionPropertySimple() throws Exception
{    final Props props = new Props();    props.load(this.getClass().getResourceAsStream("reportgenerator_test.properties"));    final String title = getOptionalProperty(props, "jmeter.reportgenerator.graph.responseTimePercentiles.title");    assertNotNull("title should not be null", title);}
0
public void testGetApdexPerTransactionParts()
{    Map<String, Long[]> apdex = ReportGeneratorConfiguration.getApdexPerTransactionParts(apdexString);    assertNotNull("map should not be null", apdex);    assertEquals(3, apdex.size());    Set<String> keys = apdex.keySet();    assertTrue(keys.contains("samples12"));    assertTrue(keys.contains("scenar01-12"));    assertTrue(keys.contains("sample(\\d+)"));    assertArrayEquals(new Long[] { 1000L, 2000L }, apdex.get("sample(\\d+)"));}
0
public void testGetApdexPerTransactionPartsOneCustomization()
{    Map<String, Long[]> apdex = ReportGeneratorConfiguration.getApdexPerTransactionParts("sample(\\d+):1000|2000");    assertNotNull("map should not be null", apdex);    assertEquals(1, apdex.size());    Set<String> keys = apdex.keySet();    assertTrue(keys.contains("sample(\\d+)"));    assertArrayEquals(new Long[] { 1000L, 2000L }, apdex.get("sample(\\d+)"));}
0
public void testGetApdexPerTransactionNoValue()
{    Map<String, Long[]> apdex = ReportGeneratorConfiguration.getApdexPerTransactionParts("");    assertNotNull("map should not be null", apdex);    assertEquals(0, apdex.size());    apdex = ReportGeneratorConfiguration.getApdexPerTransactionParts(" ");    assertNotNull("map should not be null", apdex);    assertEquals(0, apdex.size());}
0
public void testGetApdexPerTransactionWrongFormat()
{    Map<String, Long[]> apdex = ReportGeneratorConfiguration.getApdexPerTransactionParts("sample1|123:434");    assertNotNull("map should not be null", apdex);    assertEquals(0, apdex.size());}
0
public void testSampleNameMatching()
{    /* matching pairs :         * sample(\d+) sample2         * sample(\d+) sample12         * scenar01-12 scenar01-12         * samples12 samples12         * */    String[] sampleNames = { "sample2", "sample12", "scenar01-12", "samples12" };    Map<String, Long[]> apdex = ReportGeneratorConfiguration.getApdexPerTransactionParts(apdexString);    for (String sampleName : sampleNames) {        boolean hasMatched = false;        for (Map.Entry<String, Long[]> entry : apdex.entrySet()) {            org.apache.oro.text.regex.Pattern regex = JMeterUtils.getPatternCache().getPattern(entry.getKey());            PatternMatcher matcher = JMeterUtils.getMatcher();            if (matcher.matches(sampleName, regex)) {                hasMatched = true;            }        }        assertTrue(hasMatched);    }}
0
private static String getOptionalProperty(Props props, String key)
{    return getProperty(props, key, null);}
0
private static String getProperty(Props props, String key, String defaultValue)
{    String value = props.getValue(key);    if (value == null) {        return defaultValue;    }    return value;}
0
public void testGetErrorKey()
{    SampleMetadata metadata = new SampleMetadata(',', new String[] { CSVSaveService.SUCCESSFUL, CSVSaveService.RESPONSE_CODE, CSVSaveService.RESPONSE_MESSAGE, CSVSaveService.FAILURE_MESSAGE });    Sample sample = new Sample(0, metadata, new String[] { "false", "", "", "FailureMessage" });    Assert.assertEquals("FailureMessage", ErrorsSummaryConsumer.getErrorKey(sample));    sample = new Sample(0, metadata, new String[] { "false", "200", "", "FailureMessage" });    Assert.assertEquals("FailureMessage", ErrorsSummaryConsumer.getErrorKey(sample));    sample = new Sample(0, metadata, new String[] { "false", "200", "", "Test failed: text expected to contain /<title>Some html text</title>/" });    Assert.assertEquals("Test failed: text expected to contain \\/&lt;title&gt;Some html text&lt;\\/title&gt;\\/", ErrorsSummaryConsumer.getErrorKey(sample));    sample = new Sample(0, metadata, new String[] { "false", "200", "", "Test failed: text expected to contain /{\"glossary\": { \"title\": \"example glossary\"}}/" });    Assert.assertEquals("Test failed: text expected to contain \\/{&quot;glossary&quot;: { &quot;title&quot;: &quot;example glossary&quot;}}\\/", ErrorsSummaryConsumer.getErrorKey(sample));    sample = new Sample(0, metadata, new String[] { "true", "200", "", "" });    Assert.assertEquals(MetricUtils.ASSERTION_FAILED, ErrorsSummaryConsumer.getErrorKey(sample));    sample = new Sample(0, metadata, new String[] { "false", "500", "Server Error", "FailureMessage" });    Assert.assertEquals("500/Server Error", ErrorsSummaryConsumer.getErrorKey(sample));}
0
public void testErrorSampleCounter()
{    ErrorsSummaryConsumer consumer = new ErrorsSummaryConsumer();    Sample sample = createSample(false);    AbstractSummaryConsumer<Long>.SummaryInfo info = consumer.new SummaryInfo(false);    Assert.assertEquals(null, info.getData());    consumer.updateData(info, sample);    Assert.assertEquals(Long.valueOf(1), info.getData());    consumer.updateData(info, sample);    Assert.assertEquals(Long.valueOf(2), info.getData());}
0
private Sample createSample(boolean success)
{    SampleMetadata metadata = new SampleMetadata(',', CSVSaveService.SUCCESSFUL);    Sample sample = new Sample(0, metadata, String.valueOf(success));    return sample;}
0
public void init()
{    customGraphConsumer = new CustomGraphConsumer();    customGraphConsumer.setGranularity(60000);    customGraphConsumer.setTitle("graph title");    customGraphConsumer.setXAxis("X axis name");    customGraphConsumer.setYAxis("Y axis name");    customGraphConsumer.setContentMessage("content message");    customGraphConsumer.setSampleVariableName("ulp_lag_ratio");    map = customGraphConsumer.createGroupInfos();    resultData = new MapResultData();}
0
public void testGetters()
{    assertThat(customGraphConsumer.getTitle(), equalTo("graph title"));    assertThat(customGraphConsumer.getXAxis(), equalTo("X axis name"));    assertThat(customGraphConsumer.getYAxis(), equalTo("Y axis name"));    assertThat(customGraphConsumer.getContentMessage(), equalTo("content message"));    assertThat(customGraphConsumer.getSampleVariableName(), equalTo("ulp_lag_ratio"));    assertThat(customGraphConsumer.getIsNativeSampleVariableName(), equalTo(false));        customGraphConsumer.setSampleVariableName(CSVSaveService.CSV_BYTES);    assertThat(customGraphConsumer.getIsNativeSampleVariableName(), equalTo(true));}
0
public void testInitializeExtraResults()
{    customGraphConsumer.initializeExtraResults(resultData);    JsonizerVisitor jsonizer = new JsonizerVisitor();    for (Entry<String, ResultData> entrySet : resultData.entrySet()) {        Object testedValue = entrySet.getValue().accept(jsonizer);        String key = entrySet.getKey();        if (key.equals("granularity")) {            assertThat(testedValue, equalTo("60000"));        } else if (key.equals("X_Axis")) {            assertThat(testedValue, equalTo("\"X axis name\""));        } else if (key.equals("Y_Axis")) {            assertThat(testedValue, equalTo("\"Y axis name\""));        } else if (key.equals("sample_Metric_Name")) {            assertThat(testedValue, equalTo("\"ulp_lag_ratio\""));        } else if (key.equals("content_Message")) {            assertThat(testedValue, equalTo("\"content message\""));        }    }}
0
public void testCreateTimeStampKeysSelector()
{    keysSelector = new TimeStampKeysSelector();    keysSelector.setSelectBeginTime(false);    assertThat(customGraphConsumer.createTimeStampKeysSelector().getGranularity(), equalTo(keysSelector.getGranularity()));}
0
public void testCreateGroupInfos()
{        assertThat(map.containsKey("Generic group"), equalTo(true));    assertThat(map.containsKey("foo"), equalTo(false));    assertThat(map.get("Generic group").getAggregatorFactory().getClass(), equalTo(org.apache.jmeter.report.processor.MeanAggregatorFactory.class));    GroupData groupData = map.get("Generic group").getGroupData();    assertThat(groupData.getOverallSeries(), equalTo(null));    assertThat(groupData.getSeriesInfo(), equalTo(new HashMap<String, SeriesData>()));        customGraphConsumer.setSampleVariableName("bytes");    Sample sample = new Sample(0, sampleMetaData, data);    Double testedValue = map.get("Generic group").getValueSelector().select("bytes", sample);    assertThat(testedValue, equalTo((Double) 492.0));        customGraphConsumer.setSampleVariableName("mm-miss");    testedValue = map.get("Generic group").getValueSelector().select("mm-miss", sample);    assertThat(testedValue, equalTo(null));            String[] data2 = { "1527089951383", "0", "Read-compute", "200", "OK", "setupRegion 1-1", "true", "", "492", "0", "1", "1", "null", "0", "0", "0", "/stream1a/master.m3u8?e=0&h=56345c61b7b415e0260c19963a153092", "null", "5500000", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "null", "" };    sample = new Sample(0, sampleMetaData, data2);    testedValue = map.get("Generic group").getValueSelector().select("mm-miss", sample);    assertThat(testedValue, equalTo(null));}
0
public void testCreateGroupInfosExceptions()
{    Sample sample = new Sample(0, sampleMetaData, data);    customGraphConsumer.setSampleVariableName("label");        map.get("Generic group").getValueSelector().select("label", sample);}
0
public void testSelectMetric()
{    Sample sample = new Sample(0, sampleMetaData, data);    String testString = map.get("Generic group").getSeriesSelector().select(sample).toString();    assertThat(testString, equalTo("[ulp_lag_ratio]"));}
0
private SampleMetadata createTestMetaData()
{    String columnsString = "timeStamp,elapsed,label,responseCode,responseMessage,threadName,success,failureMessage,bytes,sentBytes," + "grpThreads,allThreads,URL,Latency,IdleTime,Connect,\"stream\",\"aws_region\",\"bitrate\",\"ulp_buffer_fill\",\"ulp_lag_time\"," + "\"ulp_play_time\",\"ulp_lag_ratio\",\"lag_ratio_wo_bf\",\"ulp_dwn_time\",\"ulp_hits\",\"ulp_avg_chunk_time\"," + "\"ulp_avg_manifest_time\",\"mm-hit\",\"mm-miss\",\"cm-hit\",\"cm-miss\",\"ts-hit\",\"ts-miss\"";    String[] columns = new String[34];    int lastComa = 0;    int columnIndex = 0;    for (int i = 0; i < columnsString.length(); i++) {        if (columnsString.charAt(i) == ',') {            columns[columnIndex] = columnsString.substring(lastComa, i);            lastComa = i + 1;            columnIndex++;        } else if (i + 1 == columnsString.length()) {            columns[columnIndex] = columnsString.substring(lastComa, i + 1);        }    }    return new SampleMetadata(',', columns);}
0
private static boolean isPureAscii(String v)
{    return ASCII_ENCODER.canEncode(v);}
0
private PropertyResourceBundle getRAS(String res) throws Exception
{    InputStream ras = this.getClass().getResourceAsStream(res);    if (ras == null) {        return null;    }    return new PropertyResourceBundle(ras);}
0
private void readRF(String res, List<String> l) throws Exception
{    InputStream ras = this.getClass().getResourceAsStream(res);    if (ras == null) {        if (MESSAGES.equals(resourcePrefix) || lang.length() == 0) {            throw new IOException("Cannot open resource file " + res);        } else {            return;        }    }    try (BufferedReader fileReader = new BufferedReader(new InputStreamReader(ras))) {        String s;        while ((s = fileReader.readLine()) != null) {            if (s.length() > 0 && !s.startsWith("#") && !s.startsWith("!")) {                int equ = s.indexOf('=');                String key = s.substring(0, equ);                if (resourcePrefix.equals(MESSAGES)) {                    /*                         * JMeterUtils.getResString() converts space to _ and lowercases                         * the key, so make sure all keys pass the test                         */                    if (key.contains(" ") || !key.toLowerCase(java.util.Locale.ENGLISH).equals(key)) {                        failures.add("Invalid key for JMeterUtils " + key);                    }                }                String val = s.substring(equ + 1);                                l.add(key);                /*                     * Now check for invalid message format: if string contains {0}                     * and ' there may be a problem, so do a format with dummy                     * parameters and check if there is a { in the output. A bit                     * crude, but should be enough for now.                     */                if (val.contains("{0}") && val.contains("'")) {                    String m = java.text.MessageFormat.format(val, DUMMY_PARAMS);                    if (m.contains("{")) {                        failures.add("Incorrect message format ? (input/output) for: " + key + ". Output contains {, it seems not all paratemeters were replaced." + "Format: " + val + ", message with dummy parameters: " + m);                    }                }                                                                        }        }    }}
0
private String getResName(String lang)
{    if (lang.length() == 0) {        return resourcePrefix + ".properties";    } else {        return resourcePrefix + "_" + lang + ".properties";    }}
0
private void check(String resname) throws Exception
{        check(resname, true);}
0
private void check(String resname, boolean checkUnexpected) throws Exception
{        ArrayList<String> alf = new ArrayList<>(500);    String res = getResName(resname);    readRF(res, alf);    Collections.sort(alf);        String last = "";    for (String curr : alf) {        if (curr.equals(last)) {            failures.add("Duplicate key=" + curr + " in " + res);        }        last = curr;    }    if (    resname.length() == 0) {        defaultPRB = getRAS(res);        if (defaultPRB == null) {            throw new IOException("Could not find required file: " + res);        }    } else if (checkUnexpected) {                PropertyResourceBundle prb = getRAS(res);        if (prb == null) {            return;        }        final ArrayList<String> list = Collections.list(prb.getKeys());        Collections.sort(list);        final boolean mainResourceFile = resname.startsWith("messages");        for (String key : list) {            try {                                String val = defaultPRB.getString(key);                if (mainResourceFile && val.equals(prb.getString(key))) {                    failures.add("Duplicate value? " + key + "=" + val + " in " + res);                }            } catch (MissingResourceException e) {                failures.add(resourcePrefix + "_" + resname + " has unexpected key: " + key);            }        }    }    if (failures.isEmpty()) {        return;    }    fail(String.join("\n", failures));}
0
public static String[] getResources(File srcFileDir)
{    if (!srcFileDir.exists() && "resources".equals(srcFileDir.getName())) {                return new String[0];    }    Set<String> set = new TreeSet<>();    findFile(srcFileDir, set, new FilenameFilter() {        @Override        public boolean accept(File dir, String name) {            return name.equals("messages.properties") || name.endsWith("Resources.properties") && !name.matches("Example\\d+Resources\\.properties") || new File(dir, name).isDirectory();        }    });    return set.toArray(new String[set.size()]);}
0
public boolean accept(File dir, String name)
{    return name.equals("messages.properties") || name.endsWith("Resources.properties") && !name.matches("Example\\d+Resources\\.properties") || new File(dir, name).isDirectory();}
0
 static void findFile(File file, Set<String> set, FilenameFilter filenameFilter)
{    File[] foundFiles = file.listFiles(filenameFilter);    assertNotNull("Not a directory: " + file, foundFiles);    for (File file2 : foundFiles) {        if (file2.isDirectory()) {            findFile(file2, set, filenameFilter);        } else {                        String absPath2 = file2.getAbsolutePath().replace('\\', '/');            int indexOfOrg = absPath2.indexOf("/org");            int lastIndex = absPath2.lastIndexOf('.');            set.add(absPath2.substring(indexOfOrg, lastIndex));        }    }}
0
public static Test suite()
{    TestSuite ts = new TestSuite("Resources PackageTest");    String[] languages = JMeterMenuBar.getLanguages();    for (String prefix : prefixList) {        TestSuite pfx = new TestSuite(prefix);                pfx.addTest(new PackageTest("testLang", "", prefix));        for (String language : languages) {            if (!"en".equals(language)) {                                pfx.addTest(new PackageTest("testLang", language, prefix));            }        }        ts.addTest(pfx);    }    ts.addTest(new PackageTest("checkI18n", "fr"));        return ts;}
0
public Description getDescription()
{    return Description.createTestDescription(getClass(), getName() + " " + lang + ": " + resourcePrefix);}
0
public void testLang() throws Exception
{    check(lang);}
0
public void checkI18n() throws Exception
{    Map<String, Map<String, String>> missingLabelsPerBundle = new HashMap<>();    for (String prefix : prefixList) {        Properties messages = new Properties();        messages.load(Thread.currentThread().getContextClassLoader().getResourceAsStream(prefix.substring(1) + ".properties"));        checkMessagesForLanguage(missingLabelsPerBundle, missingLabelsPerBundle, messages, prefix.substring(1), lang);    }    assertEquals(missingLabelsPerBundle.size() + " missing labels, labels missing:" + printLabels(missingLabelsPerBundle), 0, missingLabelsPerBundle.size());}
0
private void checkMessagesForLanguage(Map<String, Map<String, String>> missingLabelsPerBundle, Map<String, Map<String, String>> missingLabelsPerBundle2, Properties messages, String bundlePath, String language) throws IOException
{    Properties messagesFr = new Properties();    String languageBundle = bundlePath + "_" + language + ".properties";    InputStream inputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(languageBundle);    if (inputStream == null) {        Map<String, String> messagesAsProperties = new HashMap<>();        for (Map.Entry<Object, Object> entry : messages.entrySet()) {            messagesAsProperties.put((String) entry.getKey(), (String) entry.getValue());        }        missingLabelsPerBundle.put(languageBundle, messagesAsProperties);        return;    }    messagesFr.load(inputStream);    Map<String, String> missingLabels = new TreeMap<>();    for (Map.Entry<Object, Object> entry : messages.entrySet()) {        String key = (String) entry.getKey();                final String I18NString = "[\\d% ]+";        if (!messagesFr.containsKey(key)) {            String value = (String) entry.getValue();                        if (value.matches(I18NString)) {                                System.out.println("Ignoring missing " + key + "=" + value + " in " + languageBundle);            } else {                missingLabels.put(key, (String) entry.getValue());            }        } else {            String value = (String) entry.getValue();            if (value.matches(I18NString)) {                System.out.println("Unnecessary entry " + key + "=" + value + " in " + languageBundle);            }        }    }    if (!missingLabels.isEmpty()) {        missingLabelsPerBundle.put(languageBundle, missingLabels);    }}
0
private String printLabels(Map<String, Map<String, String>> missingLabelsPerBundle)
{    StringBuilder builder = new StringBuilder();    for (Map.Entry<String, Map<String, String>> entry : missingLabelsPerBundle.entrySet()) {        builder.append("Missing labels in bundle:").append(entry.getKey()).append("\r\n");        for (Map.Entry<String, String> entry2 : entry.getValue().entrySet()) {            builder.append(entry2.getKey()).append("=").append(entry2.getValue()).append("\r\n");        }        builder.append("======================================================\r\n");    }    return builder.toString();}
0
private PropertyResourceBundle getRAS(String res) throws Exception
{    InputStream ras = this.getClass().getResourceAsStream(res);    if (ras == null) {        return null;    }    return new PropertyResourceBundle(ras);}
0
public void checkResourceReferences() throws Exception
{    String resourceName = "/org/apache/jmeter/resources/messages.properties";    PropertyResourceBundle messagePRB = getRAS(resourceName);    assertNotNull("Resource bundle " + resourceName + " was not found", resourceName);    List<String> failures = new ArrayList<>();    PackageTest.findFile(srcFiledir, null, new FilenameFilter() {        @Override        public boolean accept(File dir, String name) {            final File file = new File(dir, name);                        final Pattern pat = Pattern.compile(".*getResString\\(\"([^\"]+)\"\\).*");            if (name.endsWith(".java")) {                BufferedReader fileReader = null;                try {                    fileReader = new BufferedReader(new FileReader(file));                    String s;                    while ((s = fileReader.readLine()) != null) {                        if (s.matches("\\s*//.*")) {                                                        continue;                        }                        Matcher m = pat.matcher(s);                        if (m.matches()) {                            final String key = m.group(1);                                                                                    String resKey = key.replace(' ', '_');                            resKey = resKey.toLowerCase(java.util.Locale.ENGLISH);                            if (!key.equals(resKey)) {                                System.out.println(file + ": non-standard message key: '" + key + "'");                            }                            try {                                messagePRB.getString(resKey);                            } catch (MissingResourceException e) {                                failures.add(file + ": missing message key: '" + key + "'");                            }                        }                    }                } catch (IOException e) {                    e.printStackTrace();                } finally {                    JOrphanUtils.closeQuietly(fileReader);                }            }            return file.isDirectory();        }    });    if (failures.isEmpty()) {        return;    }    fail(String.join("\n", failures));}
0
public boolean accept(File dir, String name)
{    final File file = new File(dir, name);        final Pattern pat = Pattern.compile(".*getResString\\(\"([^\"]+)\"\\).*");    if (name.endsWith(".java")) {        BufferedReader fileReader = null;        try {            fileReader = new BufferedReader(new FileReader(file));            String s;            while ((s = fileReader.readLine()) != null) {                if (s.matches("\\s*//.*")) {                                        continue;                }                Matcher m = pat.matcher(s);                if (m.matches()) {                    final String key = m.group(1);                                                            String resKey = key.replace(' ', '_');                    resKey = resKey.toLowerCase(java.util.Locale.ENGLISH);                    if (!key.equals(resKey)) {                        System.out.println(file + ": non-standard message key: '" + key + "'");                    }                    try {                        messagePRB.getString(resKey);                    } catch (MissingResourceException e) {                        failures.add(file + ": missing message key: '" + key + "'");                    }                }            }        } catch (IOException e) {            e.printStackTrace();        } finally {            JOrphanUtils.closeQuietly(fileReader);        }    }    return file.isDirectory();}
0
public SampleResult sample(Entry e)
{    return new SampleResult();}
0
public static Collection<Object[]> parameters()
{    return Arrays.asList(new Object[] { TRUE, "", TRUE }, new Object[] { TRUE, "", FALSE }, new Object[] { FALSE, "", TRUE }, new Object[] { FALSE, TEST_CONTENT, FALSE });}
0
public void testSampleOccurred() throws IOException
{    Path props = Files.createTempFile("mydummy", ".properties");    JMeterUtils.loadJMeterProperties(props.toString());    JMeterUtils.getJMeterProperties().setProperty("sample_sender_strip_also_on_error", stripOnError.toString());    SimpleSender nextSender = new SimpleSender();    DataStrippingSampleSender sut = new DataStrippingSampleSender(nextSender);    sut.readResolve();    SampleResult sample = result(successfulParent.booleanValue(), result(result(result())));    sut.sampleOccurred(event(sample));    assertResultsHaveContent(content, sample);    assertThat(sample, CoreMatchers.is(nextSender.getResult()));}
0
private void assertResultsHaveContent(String content, SampleResult sample)
{    assertThat(sample.getResponseDataAsString(), CoreMatchers.is(content));    for (SampleResult subResult : sample.getSubResults()) {        assertResultsHaveContent(content, subResult);    }}
0
private static SampleEvent event(SampleResult result)
{    return new SampleEvent(result, "tg-one");}
0
private static SampleResult result()
{    return result(true);}
0
private static SampleResult result(SampleResult... subResults)
{    return result(true, subResults);}
0
private static SampleResult result(boolean isSuccess, SampleResult... subResults)
{    SampleResult result = new SampleResult();    result.setSuccessful(isSuccess);    result.setResponseData(TEST_CONTENT, StandardCharsets.UTF_8.name());    for (SampleResult subResult : subResults) {        result.addSubResult(subResult);    }    return result;}
0
public SampleResult getResult()
{    return result;}
0
public void testEnded()
{}
0
public void testEnded(String host)
{}
0
public void sampleOccurred(SampleEvent e)
{    this.result = e.getResult();}
0
public void testElapsedTrue() throws Exception
{    SampleResult res = new SampleResult(true);        res.sampleStart();        Thread.sleep(110);    res.sampleEnd();    long time = res.getTime();    if (time < 100) {        fail("Sample time should be >=100, actual " + time);    }}
0
public void testElapsedFalse() throws Exception
{    SampleResult res = new SampleResult(false);        res.sampleStart();        Thread.sleep(110);    res.sampleEnd();    long time = res.getTime();    if (time < 100) {        fail("Sample time should be >=100, actual " + time);    }}
0
public void testPauseFalse() throws Exception
{    SampleResult res = new SampleResult(false);        res.sampleStart();        long totalSampleTime = sleep(100);    res.samplePause();        Thread.sleep(200);        res.sampleResume();    totalSampleTime += sleep(100);    res.sampleEnd();    long sampleTime = res.getTime();    assertEquals("Accumulated sample time", totalSampleTime, sampleTime, 50);}
0
public void testPauseTrue() throws Exception
{    SampleResult res = new SampleResult(true);        res.sampleStart();        long totalSampleTime = sleep(100);    res.samplePause();        Thread.sleep(200);        res.sampleResume();    totalSampleTime += sleep(100);    res.sampleEnd();    long sampleTime = res.getTime();    assertEquals("Accumulated sample time", totalSampleTime, sampleTime, 50);}
0
private void divertLog()
{        if (SampleResult.log instanceof LogRecordingDelegatingLogger) {        recordLogger = (LogRecordingDelegatingLogger) SampleResult.log;    } else {        recordLogger = new LogRecordingDelegatingLogger(SampleResult.log);        SampleResult.log = recordLogger;    }    recordLogger.clearLogRecords();}
0
public void testPause2True() throws Exception
{    divertLog();    SampleResult res = new SampleResult(true);    res.sampleStart();    res.samplePause();    assertEquals(0, recordLogger.getLogRecordCount());    res.samplePause();    assertNotEquals(0, recordLogger.getLogRecordCount());}
0
public void testPause2False() throws Exception
{    divertLog();    SampleResult res = new SampleResult(false);    res.sampleStart();    res.samplePause();    assertEquals(0, recordLogger.getLogRecordCount());    res.samplePause();    assertNotEquals(0, recordLogger.getLogRecordCount());}
0
public void testByteCount() throws Exception
{    SampleResult res = new SampleResult();    res.sampleStart();    res.setBytes(100L);    res.setSampleLabel("sample of size 100 bytes");    res.sampleEnd();    assertEquals(100, res.getBytesAsLong());    assertEquals("sample of size 100 bytes", res.getSampleLabel());}
0
public void testSubResultsTrue() throws Exception
{    testSubResults(true, 0);}
0
public void testSubResultsTrueThread() throws Exception
{    testSubResults(true, 500L, 0);}
0
public void testSubResultsFalse() throws Exception
{    testSubResults(false, 0);}
0
public void testSubResultsFalseThread() throws Exception
{    testSubResults(false, 500L, 0);}
0
public void testSubResultsTruePause() throws Exception
{    testSubResults(true, 100);}
0
public void testSubResultsTruePauseThread() throws Exception
{    testSubResults(true, 500L, 100);}
0
public void testSubResultsFalsePause() throws Exception
{    testSubResults(false, 100);}
0
public void testSubResultsFalsePauseThread() throws Exception
{    testSubResults(false, 500L, 100);}
0
public void xtestUntilFail() throws Exception
{    while (true) {        testSubResultsTruePause();        testSubResultsFalsePause();    }}
0
private void testSubResults(boolean nanoTime, long pause) throws Exception
{        testSubResults(nanoTime, 0L, pause);}
0
private void testSubResults(boolean nanoTime, long nanoThreadSleep, long pause) throws Exception
{                    SampleResult parent = new SampleResult(nanoTime, nanoThreadSleep);    JMeterTestCase.assertPrimitiveEquals(nanoTime, parent.useNanoTime);    assertEquals(nanoThreadSleep, parent.nanoThreadSleep);    long beginTest = parent.currentTimeInMillis();    parent.sampleStart();    Thread.sleep(100);    parent.setBytes(300L);    parent.setSampleLabel("Parent Sample");    parent.setSuccessful(true);    parent.sampleEnd();    long parentElapsed = parent.getTime();        SampleResult child1 = new SampleResult(nanoTime);    child1.sampleStart();    Thread.sleep(100);    child1.setBytes(100L);    child1.setSampleLabel("Child1 Sample");    child1.setSuccessful(true);    child1.sampleEnd();    long child1Elapsed = child1.getTime();    assertTrue(child1.isSuccessful());    assertEquals(100, child1.getBytesAsLong());    assertEquals("Child1 Sample", child1.getSampleLabel());    assertEquals(1, child1.getSampleCount());    assertEquals(0, child1.getSubResults().length);    long actualPause = 0;    if (pause > 0) {        long t1 = parent.currentTimeInMillis();        Thread.sleep(pause);        actualPause = parent.currentTimeInMillis() - t1;    }        SampleResult child2 = new SampleResult(nanoTime);    child2.sampleStart();    Thread.sleep(100);    child2.setBytes(200L);    child2.setSampleLabel("Child2 Sample");    child2.setSuccessful(true);    child2.sampleEnd();    long child2Elapsed = child2.getTime();    assertTrue(child2.isSuccessful());    assertEquals(200, child2.getBytesAsLong());    assertEquals("Child2 Sample", child2.getSampleLabel());    assertEquals(1, child2.getSampleCount());    assertEquals(0, child2.getSubResults().length);        parent.addSubResult(child1);    parent.addSubResult(child2);    assertTrue(parent.isSuccessful());    assertEquals(600, parent.getBytesAsLong());    assertEquals("Parent Sample", parent.getSampleLabel());    assertEquals(1, parent.getSampleCount());    assertEquals(2, parent.getSubResults().length);    long parentElapsedTotal = parent.getTime();    long overallTime = parent.currentTimeInMillis() - beginTest;    long sumSamplesTimes = parentElapsed + child1Elapsed + actualPause + child2Elapsed;    /*             * Parent elapsed total should be no smaller than the sum of the individual samples.             * It may be greater by the timer granularity.             */    long diff = parentElapsedTotal - sumSamplesTimes;        long maxDiff = nanoTime ? 10 : 16;    if (diff < 0 || diff > maxDiff) {        fail("ParentElapsed: " + parentElapsedTotal + " - " + " sum(samples): " + sumSamplesTimes + " => " + diff + " not in [0," + maxDiff + "]; nanotime=" + nanoTime);    }            diff = overallTime - parentElapsedTotal;    if (diff < 0 || diff > maxDiff) {        fail("TestElapsed: " + overallTime + " - " + " ParentElapsed: " + parentElapsedTotal + " => " + diff + " not in [0," + maxDiff + "]; nanotime=" + nanoTime);    }        Calculator calculator = new Calculator();    calculator.addSample(parent);    assertEquals(600, calculator.getTotalBytes());    assertEquals(1, calculator.getCount());        assertEquals(1d / (parentElapsedTotal / 1000d), calculator.getRate(), 0.0001d);        assertFalse(1d / (parentElapsed / 1000d) <= calculator.getRate());}
0
public void testEncodingAndType() throws Exception
{        SampleResult res = new SampleResult();    assertEquals(SampleResult.DEFAULT_ENCODING, res.getDataEncodingWithDefault());    assertEquals("DataType should be blank", "", res.getDataType());    assertNull(res.getDataEncodingNoDefault());        res.setEncodingAndType(null);    assertEquals(SampleResult.DEFAULT_ENCODING, res.getDataEncodingWithDefault());    assertEquals("DataType should be blank", "", res.getDataType());    assertNull(res.getDataEncodingNoDefault());        res.setEncodingAndType("text/html");    assertEquals(SampleResult.DEFAULT_ENCODING, res.getDataEncodingWithDefault());    assertEquals("text", res.getDataType());    assertNull(res.getDataEncodingNoDefault());        res.setEncodingAndType("text/html; charset=aBcd");    assertEquals("aBcd", res.getDataEncodingWithDefault());    assertEquals("aBcd", res.getDataEncodingNoDefault());    assertEquals("text", res.getDataType());        res.setEncodingAndType("text/html; charset=\"aBCd\"");    assertEquals("aBCd", res.getDataEncodingWithDefault());    assertEquals("aBCd", res.getDataEncodingNoDefault());    assertEquals("text", res.getDataType());}
0
private long sleep(long ms) throws InterruptedException
{    long start = System.currentTimeMillis();    Thread.sleep(ms);    return System.currentTimeMillis() - start;}
0
public void testCompareSampleLabels()
{    final boolean prevValue = TestPlan.getFunctionalMode();    TestPlan plan = new TestPlan();    plan.setFunctionalMode(true);    try {        SampleResult result = new SampleResult();        result.setStartTime(System.currentTimeMillis());        result.setSampleLabel("parent label");        SampleResult subResult = new SampleResult();        subResult.setStartTime(System.currentTimeMillis());        subResult.setSampleLabel("subResult label");        result.addSubResult(subResult);        assertEquals("subResult label", subResult.getSampleLabel());        plan.setFunctionalMode(false);        subResult.setSampleLabel("parent label");        result.addRawSubResult(subResult);        assertEquals("parent label-0", subResult.getSampleLabel());    } finally {        plan.setFunctionalMode(prevValue);    }}
0
public void testBug63433()
{    SampleResult firstResult = new SampleResult();    assertFalse("Expected false on first call of markFile", firstResult.markFile("result.csv"));    assertTrue("Expected true on second call of markFile", firstResult.markFile("result.csv"));    SampleResult secondResult = new SampleResult();    assertFalse("Expected false on first call of markFile with null", secondResult.markFile(null));    assertTrue("Expected true on second call of markFile with null", secondResult.markFile(null));}
0
public void testClone() throws Exception
{    SampleSaveConfiguration a = new SampleSaveConfiguration();    a.setUrl(false);    a.setAssertions(true);    a.setDefaultDelimiter();    a.setDefaultTimeStampFormat();    a.setDataType(true);    assertFalse(a.saveUrl());    assertNotNull(a.getDelimiter());    assertTrue(a.saveAssertions());    assertTrue(a.saveDataType());        SampleSaveConfiguration cloneA = (SampleSaveConfiguration) a.clone();    assertNotSame(a, cloneA);    assertEquals(a, cloneA);    assertTrue(a.equals(cloneA));    assertTrue(cloneA.equals(a));    assertEquals(a.hashCode(), cloneA.hashCode());        a.setUrl(true);    assertFalse(a.equals(cloneA));    assertFalse(cloneA.equals(a));    assertFalse(a.hashCode() == cloneA.hashCode());        a.setUrl(false);    assertEquals(a, cloneA);    assertTrue(a.equals(cloneA));    assertTrue(cloneA.equals(a));    assertEquals(a.hashCode(), cloneA.hashCode());}
0
public void testEqualsAndHashCode() throws Exception
{    SampleSaveConfiguration a = new SampleSaveConfiguration();    a.setUrl(false);    a.setAssertions(true);    a.setDefaultDelimiter();    a.setDefaultTimeStampFormat();    a.setDataType(true);    SampleSaveConfiguration b = new SampleSaveConfiguration();    b.setUrl(false);    b.setAssertions(true);    b.setDefaultDelimiter();    b.setDefaultTimeStampFormat();    b.setDataType(true);        assertEquals(a, b);    assertTrue(a.equals(b));    assertTrue(b.equals(a));    assertEquals(a.hashCode(), b.hashCode());    assertPrimitiveEquals(a.saveUrl(), b.saveUrl());    assertPrimitiveEquals(a.saveAssertions(), b.saveAssertions());    assertEquals(a.getDelimiter(), b.getDelimiter());    assertPrimitiveEquals(a.saveDataType(), b.saveDataType());    a.setAssertions(false);        assertFalse(a.equals(b));    assertFalse(b.equals(a));    assertFalse(a.hashCode() == b.hashCode());    assertFalse(a.saveAssertions() == b.saveAssertions());}
0
public void testFalse() throws Exception
{    SampleSaveConfiguration a = new SampleSaveConfiguration(false);    SampleSaveConfiguration b = new SampleSaveConfiguration(false);    assertEquals("Hash codes should be equal", a.hashCode(), b.hashCode());    assertTrue("Objects should be equal", a.equals(b));    assertTrue("Objects should be equal", b.equals(a));}
0
public void testTrue() throws Exception
{    SampleSaveConfiguration a = new SampleSaveConfiguration(true);    SampleSaveConfiguration b = new SampleSaveConfiguration(true);    assertEquals("Hash codes should be equal", a.hashCode(), b.hashCode());    assertTrue("Objects should be equal", a.equals(b));    assertTrue("Objects should be equal", b.equals(a));}
0
public void testFalseTrue() throws Exception
{    SampleSaveConfiguration a = new SampleSaveConfiguration(false);    SampleSaveConfiguration b = new SampleSaveConfiguration(true);    assertFalse("Hash codes should not be equal", a.hashCode() == b.hashCode());    assertFalse("Objects should not be equal", a.equals(b));    assertFalse("Objects should not be equal", b.equals(a));}
0
public void testFormatter() throws Exception
{    SampleSaveConfiguration a = new SampleSaveConfiguration(false);    SampleSaveConfiguration b = new SampleSaveConfiguration(false);    assertEquals("Hash codes should be equal", a.hashCode(), b.hashCode());    assertTrue("Objects should be equal", a.equals(b));    assertTrue("Objects should be equal", b.equals(a));    assertTrue(a.strictDateFormatter() == null);    assertTrue(b.strictDateFormatter() == null);    assertTrue(a.threadSafeLenientFormatter() == null);    assertTrue(b.threadSafeLenientFormatter() == null);    a.setDateFormat(null);    b.setDateFormat(null);    assertEquals("Hash codes should be equal", a.hashCode(), b.hashCode());    assertTrue("Objects should be equal", a.equals(b));    assertTrue("Objects should be equal", b.equals(a));    assertTrue(a.strictDateFormatter() == null);    assertTrue(b.strictDateFormatter() == null);    assertTrue(a.threadSafeLenientFormatter() == null);    assertTrue(b.threadSafeLenientFormatter() == null);    a.setDateFormat("dd/MM/yyyy");    b.setDateFormat("dd/MM/yyyy");    assertEquals("Hash codes should be equal", a.hashCode(), b.hashCode());    assertTrue("Objects should be equal", a.equals(b));    assertTrue("Objects should be equal", b.equals(a));    assertTrue("Objects should be equal", a.strictDateFormatter().equals(b.strictDateFormatter()));    assertTrue("Objects should be equal", a.threadSafeLenientFormatter().equals(b.threadSafeLenientFormatter()));}
0
public void testSaveConfigNames() throws Exception
{    List<String> getMethodNames = new ArrayList<>();    List<String> setMethodNames = new ArrayList<>();    Method[] methods = SampleSaveConfiguration.class.getMethods();    for (Method method : methods) {        String name = method.getName();        if (name.startsWith(SampleSaveConfiguration.CONFIG_GETTER_PREFIX) && method.getParameterTypes().length == 0) {            name = name.substring(SampleSaveConfiguration.CONFIG_GETTER_PREFIX.length());            getMethodNames.add(name);            assertTrue("SAVE_CONFIG_NAMES should contain save" + name, SampleSaveConfiguration.SAVE_CONFIG_NAMES.contains(name));        }        if (name.startsWith(SampleSaveConfiguration.CONFIG_SETTER_PREFIX) && method.getParameterTypes().length == 1 && boolean.class.equals(method.getParameterTypes()[0])) {            name = name.substring(SampleSaveConfiguration.CONFIG_SETTER_PREFIX.length());            setMethodNames.add(name);            assertTrue("SAVE_CONFIG_NAMES should contain set" + name, SampleSaveConfiguration.SAVE_CONFIG_NAMES.contains(name));        }    }    for (String name : SampleSaveConfiguration.SAVE_CONFIG_NAMES) {        assertTrue("SAVE_CONFIG_NAMES should NOT contain save" + name, getMethodNames.contains(name));        assertTrue("SAVE_CONFIG_NAMES should NOT contain set" + name, setMethodNames.contains(name));    }}
0
private void checkSplitString(String input, char delim, String[] expected) throws Exception
{    String[] out = CSVSaveService.csvSplitString(input, delim);    checkStrings(expected, out);}
0
private void checkStrings(String[] expected, String[] out)
{    assertEquals("Incorrect number of strings returned", expected.length, out.length);    for (int i = 0; i < out.length; i++) {        assertEquals("Incorrect entry returned", expected[i], out[i]);    }}
0
public void testSplitEmpty() throws Exception
{    checkSplitString("", ',', new String[] {});}
0
public void testSplitUnquoted() throws Exception
{    checkSplitString("a", ',', new String[] { "a" });    checkSplitString("a,bc,d,e", ',', new String[] { "a", "bc", "d", "e" });    checkSplitString(",bc,d,e", ',', new String[] { "", "bc", "d", "e" });    checkSplitString("a,,d,e", ',', new String[] { "a", "", "d", "e" });    checkSplitString("a,bc, ,e", ',', new String[] { "a", "bc", " ", "e" });    checkSplitString("a,bc,d, ", ',', new String[] { "a", "bc", "d", " " });    checkSplitString("a,bc,d,", ',', new String[] { "a", "bc", "d", "" });    checkSplitString("a,bc,,", ',', new String[] { "a", "bc", "", "" });    checkSplitString("a,,,", ',', new String[] { "a", "", "", "" });    checkSplitString("a,bc,d,\n", ',', new String[] { "a", "bc", "d", "" });            checkSplitString("a,b\u00e7,d,\u00e9", ',', new String[] { "a", "b\u00e7", "d", "\u00e9" });}
0
public void testSplitQuoted() throws Exception
{    checkSplitString("a,bc,d,e", ',', new String[] { "a", "bc", "d", "e" });    checkSplitString(",bc,d,e", ',', new String[] { "", "bc", "d", "e" });    checkSplitString("\"\",bc,d,e", ',', new String[] { "", "bc", "d", "e" });    checkSplitString("a,,d,e", ',', new String[] { "a", "", "d", "e" });    checkSplitString("a,\"\",d,e", ',', new String[] { "a", "", "d", "e" });    checkSplitString("a,bc, ,e", ',', new String[] { "a", "bc", " ", "e" });    checkSplitString("a,bc,\" \",e", ',', new String[] { "a", "bc", " ", "e" });    checkSplitString("a,bc,d, ", ',', new String[] { "a", "bc", "d", " " });    checkSplitString("a,bc,d,\" \"", ',', new String[] { "a", "bc", "d", " " });    checkSplitString("a,bc,d,", ',', new String[] { "a", "bc", "d", "" });    checkSplitString("a,bc,d,\"\"", ',', new String[] { "a", "bc", "d", "" });    checkSplitString("a,bc,d,\"\"\n", ',', new String[] { "a", "bc", "d", "" });            checkSplitString("\"a\",\"b\u00e7\",\"d\",\"\u00e9\"", ',', new String[] { "a", "b\u00e7", "d", "\u00e9" });}
0
public void testSplitBadQuote() throws Exception
{    try {        checkSplitString("a\"b", ',', new String[] {});        fail("Should have generated IOException");    } catch (IOException e) {    }}
0
public void testSplitMultiLine() throws Exception
{    String line = "a,,\"c\nd\",e\n,,f,g,\n\n";    String[] out;    BufferedReader br = new BufferedReader(new StringReader(line));    out = CSVSaveService.csvReadFile(br, ',');    checkStrings(new String[] { "a", "", "c\nd", "e" }, out);    out = CSVSaveService.csvReadFile(br, ',');    checkStrings(new String[] { "", "", "f", "g", "" }, out);    out = CSVSaveService.csvReadFile(br, ',');        checkStrings(new String[] { "" }, out);    assertEquals("Expected to be at EOF", -1, br.read());        out = CSVSaveService.csvReadFile(br, ',');    checkStrings(new String[] {}, out);    out = CSVSaveService.csvReadFile(br, ',');    checkStrings(new String[] {}, out);}
0
public void testBlankLine() throws Exception
{    BufferedReader br = new BufferedReader(new StringReader("\n"));    String[] out = CSVSaveService.csvReadFile(br, ',');    checkStrings(new String[] { "" }, out);    assertEquals("Expected to be at EOF", -1, br.read());}
0
public void testBlankLineQuoted() throws Exception
{    BufferedReader br = new BufferedReader(new StringReader("\"\"\n"));    String[] out = CSVSaveService.csvReadFile(br, ',');    checkStrings(new String[] { "" }, out);    assertEquals("Expected to be at EOF", -1, br.read());}
0
public void testEmptyFile() throws Exception
{    BufferedReader br = new BufferedReader(new StringReader(""));    String[] out = CSVSaveService.csvReadFile(br, ',');    checkStrings(new String[] {}, out);    assertEquals("Expected to be at EOF", -1, br.read());}
0
public void testShortFile() throws Exception
{    BufferedReader br = new BufferedReader(new StringReader("a"));    String[] out = CSVSaveService.csvReadFile(br, ',');    checkStrings(new String[] { "a" }, out);    assertEquals("Expected to be at EOF", -1, br.read());}
0
public void testHeader()
{    final String HDR = "timeStamp,elapsed,label,responseCode,responseMessage,threadName,dataType,success," + "failureMessage,bytes,sentBytes,grpThreads,allThreads,URL,Latency,IdleTime,Connect";    assertEquals("Header text has changed", HDR, CSVSaveService.printableFieldNamesToString());}
0
public void testSample() throws MalformedURLException
{    final String RESULT = "1,2,3,4,5,6,7,true,,8,9,10,11,https://jmeter.apache.org,12,13,14";    SampleResult result = new SampleResult();    result.setSaveConfig(new SampleSaveConfiguration());    result.setStampAndTime(1, 2);    result.setSampleLabel("3");    result.setResponseCode("4");    result.setResponseMessage("5");    result.setThreadName("6");    result.setDataType("7");    result.setSuccessful(true);    result.setBytes(8L);    result.setURL(new URL("https://jmeter.apache.org"));    result.setSentBytes(9);    result.setGroupThreads(10);    result.setAllThreads(11);    result.setLatency(12);    result.setIdleTime(13);    result.setConnectTime(14);    assertEquals("Result text has changed", RESULT, CSVSaveService.resultToDelimitedString(new SampleEvent(result, "")));}
0
public void testBooleanEditor()
{    PropertyEditor propertyEditor = PropertyEditorManager.findEditor(boolean.class);    testBooleanEditor(propertyEditor);}
0
public void testBooleanPropertyEditor()
{    PropertyEditor propertyEditor = new BooleanPropertyEditor();    testBooleanEditor(propertyEditor);}
0
private void testBooleanEditor(PropertyEditor propertyEditor)
{    assertNotNull("Expected to find property editor", propertyEditor);    String[] tags = propertyEditor.getTags();    assertEquals(2, tags.length);    assertEquals(TRUE, tags[0]);    assertEquals(FALSE, tags[1]);    propertyEditor.setValue(Boolean.FALSE);    assertEquals(FALSE, propertyEditor.getAsText());    propertyEditor.setAsText(FALSE);    assertEquals(FALSE, propertyEditor.getAsText());    propertyEditor.setAsText("false");    assertEquals(FALSE, propertyEditor.getAsText());    propertyEditor.setAsText("False");    assertEquals(FALSE, propertyEditor.getAsText());    propertyEditor.setAsText("FALSE");    assertEquals(FALSE, propertyEditor.getAsText());    propertyEditor.setValue(Boolean.TRUE);    assertEquals(TRUE, propertyEditor.getAsText());    propertyEditor.setAsText(TRUE);    assertEquals(TRUE, propertyEditor.getAsText());    propertyEditor.setAsText("true");    assertEquals(TRUE, propertyEditor.getAsText());    propertyEditor.setAsText("True");    assertEquals(TRUE, propertyEditor.getAsText());    propertyEditor.setAsText("TRUE");    assertEquals(TRUE, propertyEditor.getAsText());}
0
private void testSetGet(ComboStringEditor e, Object value) throws Exception
{    e.setValue(value);    assertEquals(value, e.getValue());}
0
private void testSetGetAsText(ComboStringEditor e, String text) throws Exception
{    e.setAsText(text);    assertEquals(text, e.getAsText());}
0
public void testSetGet() throws Exception
{        @SuppressWarnings("deprecation")    ComboStringEditor e = new ComboStringEditor();    testSetGet(e, "any string");    testSetGet(e, "");    testSetGet(e, null);    testSetGet(e, "${var}");}
0
public void testSetGetAsText() throws Exception
{        @SuppressWarnings("deprecation")    ComboStringEditor e = new ComboStringEditor();    testSetGetAsText(e, "any string");    testSetGetAsText(e, "");    testSetGetAsText(e, null);    testSetGetAsText(e, "${var}");        e.setAsText(e.UNDEFINED.toString());    assertNotNull(e.getAsText());}
0
private void testSetGet(ComboStringEditor e, Object value) throws Exception
{    e.setValue(value);    assertEquals(value, e.getValue());}
0
private void testSetGetAsText(ComboStringEditor e, String text) throws Exception
{    e.setAsText(text);    assertEquals(text, e.getAsText());}
0
public void testSetGet() throws Exception
{        @SuppressWarnings("deprecation")    ComboStringEditor e = new ComboStringEditor();    testSetGet(e, "any string");    testSetGet(e, "");    testSetGet(e, "${var}");}
0
public void testSetGetAsText() throws Exception
{        @SuppressWarnings("deprecation")    ComboStringEditor e = new ComboStringEditor();    testSetGetAsText(e, "any string");    testSetGetAsText(e, "");    testSetGetAsText(e, "${var}");}
0
public void testRecovery() throws Exception
{    ConfigTestElement config = new ConfigTestElement();    config.addProperty(new StringProperty("name", "config"));    config.setRunningVersion(true);    LoginConfig loginConfig = new LoginConfig();    loginConfig.setUsername("user1");    loginConfig.setPassword("pass1");    assertTrue(config.getProperty("login") instanceof NullProperty);        assertEquals(new NullProperty("login"), config.getProperty("login"));    config.addProperty(new TestElementProperty("login", loginConfig));    assertEquals(loginConfig.toString(), config.getPropertyAsString("login"));    config.recoverRunningVersion();    assertTrue(config.getProperty("login") instanceof NullProperty);    assertEquals(new NullProperty("login"), config.getProperty("login"));}
0
public void testArguments() throws Exception
{    Arguments args = new Arguments();    args.addArgument("arg1", "val1", "=");    TestElementProperty prop = new TestElementProperty("args", args);    ConfigTestElement te = new ConfigTestElement();    te.addProperty(prop);    te.setRunningVersion(true);    Arguments config = new Arguments();    config.addArgument("config1", "configValue", "=");    TestElementProperty configProp = new TestElementProperty("args", config);    ConfigTestElement te2 = new ConfigTestElement();    te2.addProperty(configProp);    te.addTestElement(te2);    assertEquals(2, args.getArgumentCount());    assertEquals("config1=configValue", args.getArgument(1).toString());    te.recoverRunningVersion();    te.addTestElement(te2);    assertEquals(2, args.getArgumentCount());    assertEquals("config1=configValue", args.getArgument(1).toString());}
0
public void setUp()
{    this.dummyProperty = new AbstractProperty() {        @Override        public void setObjectValue(Object value) {                }        @Override        public void recoverRunningVersion(TestElement owner) {                }        @Override        public String getStringValue() {                        return null;        }        @Override        public Object getObjectValue() {                        return null;        }    };}
0
public void setObjectValue(Object value)
{}
0
public void recoverRunningVersion(TestElement owner)
{}
0
public String getStringValue()
{        return null;}
0
public Object getObjectValue()
{        return null;}
0
public void testNormalizeListWithEmptyList()
{    Collection<JMeterProperty> emptyCollection = Collections.emptyList();    Collection<JMeterProperty> newCollection = dummyProperty.normalizeList(emptyCollection);    assertThat(newCollection, CoreMatchers.nullValue());}
0
public void testNormalizeListWithEmptyArrayList()
{    Collection<JMeterProperty> emptyCollection = new ArrayList<JMeterProperty>();    Collection<JMeterProperty> newCollection = dummyProperty.normalizeList(emptyCollection);    assertThat(newCollection, CoreMatchers.not(CoreMatchers.sameInstance(emptyCollection)));    assertThat(newCollection, CoreMatchers.equalTo(emptyCollection));}
0
public void testNormalizeListWithFilledArrayList()
{    List<JMeterProperty> filledCollection = new ArrayList<JMeterProperty>();    filledCollection.add(new StringProperty("key", "value"));    Collection<JMeterProperty> newCollection = dummyProperty.normalizeList(filledCollection);    assertThat(newCollection, CoreMatchers.not(CoreMatchers.sameInstance(filledCollection)));    assertThat(newCollection, CoreMatchers.equalTo(filledCollection));}
0
public void testNormalizeListWithEmptyMap()
{    Map<String, JMeterProperty> emptyCollection = Collections.emptyMap();    Map<String, JMeterProperty> newCollection = dummyProperty.normalizeMap(emptyCollection);    assertThat(newCollection, CoreMatchers.nullValue());}
0
public void testNormalizeMapWithEmptyHashMap()
{    Map<String, JMeterProperty> emptyCollection = new HashMap<>();    Map<String, JMeterProperty> newCollection = dummyProperty.normalizeMap(emptyCollection);    assertThat(newCollection, CoreMatchers.not(CoreMatchers.sameInstance(emptyCollection)));    assertThat(newCollection, CoreMatchers.equalTo(emptyCollection));}
0
public void testNormalizeMapWithFilledHashMap()
{    Map<String, JMeterProperty> filledCollection = new HashMap<>();    filledCollection.put("someKey", new StringProperty("key", "value"));    Map<String, JMeterProperty> newCollection = dummyProperty.normalizeMap(filledCollection);    assertThat(newCollection, CoreMatchers.not(CoreMatchers.sameInstance(filledCollection)));    assertThat(newCollection, CoreMatchers.equalTo(filledCollection));}
0
public void testBug62281MapProperty()
{    MapProperty props = new MapProperty();    props.addProperty("Foo", new BooleanProperty());}
0
public void testGetPropertyTypeOfEmptyMap()
{    MapProperty props = new MapProperty("foo", new HashMap<Object, Object>());    assertThat(props.getPropertyType(), CoreMatchers.equalTo(NullProperty.class));}
0
public void testGetPropertyTypeOfStringElements()
{    Map<String, Integer> numberMap = new HashMap<>();    numberMap.put("One", Integer.valueOf(1));    MapProperty props = new MapProperty("foo", numberMap);    assertThat(props.getPropertyType(), CoreMatchers.equalTo(IntegerProperty.class));}
0
public void testStringProperty() throws Exception
{    StringProperty prop = new StringProperty("name", "value");    prop.setRunningVersion(true);    prop.setObjectValue("new Value");    assertEquals("new Value", prop.getStringValue());    prop.recoverRunningVersion(null);    assertEquals("value", prop.getStringValue());    prop.setObjectValue("new Value");    prop.setObjectValue("2nd Value");    assertEquals("2nd Value", prop.getStringValue());    prop.recoverRunningVersion(null);    assertEquals("value", prop.getStringValue());}
0
public void testElementProperty() throws Exception
{    LoginConfig config = new LoginConfig();    config.setUsername("username");    config.setPassword("password");    TestElementProperty prop = new TestElementProperty("name", config);    prop.setRunningVersion(true);    config = new LoginConfig();    config.setUsername("user2");    config.setPassword("pass2");    prop.setObjectValue(config);    assertEquals("user2=pass2", prop.getStringValue());    prop.recoverRunningVersion(null);    assertEquals("username=password", prop.getStringValue());    config = new LoginConfig();    config.setUsername("user2");    config.setPassword("pass2");    prop.setObjectValue(config);    config = new LoginConfig();    config.setUsername("user3");    config.setPassword("pass3");    prop.setObjectValue(config);    assertEquals("user3=pass3", prop.getStringValue());    prop.recoverRunningVersion(null);    assertEquals("username=password", prop.getStringValue());}
0
private void checkEquals(JMeterProperty jp1, JMeterProperty jp2)
{    assertEquals(jp1, jp2);    assertEquals(jp2, jp1);    assertEquals(jp1, jp1);    assertEquals(jp2, jp2);    assertEquals(jp1.hashCode(), jp2.hashCode());}
0
private void checkNotEquals(JMeterProperty jp1, JMeterProperty jp2)
{    assertEquals(jp1, jp1);    assertEquals(jp2, jp2);    assertFalse(jp1.equals(jp2));    assertFalse(jp2.equals(jp1));}
0
public void testBooleanEquality() throws Exception
{    BooleanProperty jpn1 = new BooleanProperty();    BooleanProperty jpn2 = new BooleanProperty();    BooleanProperty jp1 = new BooleanProperty("name1", true);    BooleanProperty jp2 = new BooleanProperty("name1", true);    BooleanProperty jp3 = new BooleanProperty("name2", true);    BooleanProperty jp4 = new BooleanProperty("name2", false);    checkEquals(jpn1, jpn2);    checkNotEquals(jpn1, jp1);    checkNotEquals(jpn1, jp2);    checkEquals(jp1, jp2);    checkNotEquals(jp1, jp3);    checkNotEquals(jp2, jp3);    checkNotEquals(jp3, jp4);}
0
public void testDoubleEquality() throws Exception
{    DoubleProperty jpn1 = new DoubleProperty();    DoubleProperty jpn2 = new DoubleProperty();    DoubleProperty jp1 = new DoubleProperty("name1", 123.4);    DoubleProperty jp2 = new DoubleProperty("name1", 123.4);    DoubleProperty jp3 = new DoubleProperty("name2", -123.4);    DoubleProperty jp4 = new DoubleProperty("name2", 123.4);    DoubleProperty jp5 = new DoubleProperty("name2", Double.NEGATIVE_INFINITY);    DoubleProperty jp6 = new DoubleProperty("name2", Double.NEGATIVE_INFINITY);    DoubleProperty jp7 = new DoubleProperty("name2", Double.POSITIVE_INFINITY);    DoubleProperty jp8 = new DoubleProperty("name2", Double.POSITIVE_INFINITY);    DoubleProperty jp9 = new DoubleProperty("name2", Double.NaN);    DoubleProperty jp10 = new DoubleProperty("name2", Double.NaN);    DoubleProperty jp11 = new DoubleProperty("name1", Double.NaN);    DoubleProperty jp12 = new DoubleProperty("name1", Double.MIN_VALUE);    DoubleProperty jp13 = new DoubleProperty("name2", Double.MIN_VALUE);    DoubleProperty jp14 = new DoubleProperty("name2", Double.MIN_VALUE);    DoubleProperty jp15 = new DoubleProperty("name1", Double.MAX_VALUE);    DoubleProperty jp16 = new DoubleProperty("name2", Double.MAX_VALUE);    DoubleProperty jp17 = new DoubleProperty("name2", Double.MAX_VALUE);    checkEquals(jpn1, jpn2);    checkNotEquals(jpn1, jp1);    checkNotEquals(jpn1, jp2);    checkEquals(jp1, jp2);    checkNotEquals(jp1, jp3);    checkNotEquals(jp2, jp3);    checkNotEquals(jp3, jp4);    checkEquals(jp5, jp6);    checkNotEquals(jp3, jp6);    checkEquals(jp7, jp8);    checkNotEquals(jp4, jp7);    checkNotEquals(jp8, jp9);    checkEquals(jp9, jp10);    checkNotEquals(jp10, jp11);    checkNotEquals(jp5, jp10);    checkNotEquals(jp12, jp14);    checkEquals(jp13, jp14);    checkNotEquals(jp15, jp16);    checkEquals(jp16, jp17);}
0
public void testFloatEquality() throws Exception
{    FloatProperty jp1 = new FloatProperty("name1", 123.4f);    FloatProperty jp2 = new FloatProperty("name1", 123.4f);    FloatProperty jp3 = new FloatProperty("name2", -123.4f);    FloatProperty jp4 = new FloatProperty("name2", 123.4f);    FloatProperty jp5 = new FloatProperty("name2", Float.NEGATIVE_INFINITY);    FloatProperty jp6 = new FloatProperty("name2", Float.NEGATIVE_INFINITY);    FloatProperty jp7 = new FloatProperty("name2", Float.POSITIVE_INFINITY);    FloatProperty jp8 = new FloatProperty("name2", Float.POSITIVE_INFINITY);    FloatProperty jp9 = new FloatProperty("name2", Float.NaN);    FloatProperty jp10 = new FloatProperty("name2", Float.NaN);    FloatProperty jp11 = new FloatProperty("name1", Float.NaN);    FloatProperty jp12 = new FloatProperty("name1", Float.MIN_VALUE);    FloatProperty jp13 = new FloatProperty("name2", Float.MIN_VALUE);    FloatProperty jp14 = new FloatProperty("name2", Float.MIN_VALUE);    FloatProperty jp15 = new FloatProperty("name1", Float.MAX_VALUE);    FloatProperty jp16 = new FloatProperty("name2", Float.MAX_VALUE);    FloatProperty jp17 = new FloatProperty("name2", Float.MAX_VALUE);    checkEquals(jp1, jp2);    checkNotEquals(jp1, jp3);    checkNotEquals(jp2, jp3);    checkNotEquals(jp3, jp4);    checkEquals(jp5, jp6);    checkNotEquals(jp3, jp6);    checkEquals(jp7, jp8);    checkNotEquals(jp4, jp7);    checkNotEquals(jp8, jp9);    checkEquals(jp9, jp10);    checkNotEquals(jp10, jp11);    checkNotEquals(jp5, jp10);    checkNotEquals(jp12, jp14);    checkEquals(jp13, jp14);    checkNotEquals(jp15, jp16);    checkEquals(jp16, jp17);}
0
public void testIntegerEquality() throws Exception
{    IntegerProperty jp1 = new IntegerProperty("name1", 123);    IntegerProperty jp2 = new IntegerProperty("name1", 123);    IntegerProperty jp3 = new IntegerProperty("name2", -123);    IntegerProperty jp4 = new IntegerProperty("name2", 123);    IntegerProperty jp5 = new IntegerProperty("name2", Integer.MIN_VALUE);    IntegerProperty jp6 = new IntegerProperty("name2", Integer.MIN_VALUE);    IntegerProperty jp7 = new IntegerProperty("name2", Integer.MAX_VALUE);    IntegerProperty jp8 = new IntegerProperty("name2", Integer.MAX_VALUE);    IntegerProperty jp9 = new IntegerProperty("name1", Integer.MIN_VALUE);    IntegerProperty jp10 = new IntegerProperty("name1", Integer.MAX_VALUE);    checkEquals(jp1, jp2);    checkNotEquals(jp1, jp3);    checkNotEquals(jp2, jp3);    checkNotEquals(jp3, jp4);    checkEquals(jp5, jp6);    checkNotEquals(jp3, jp6);    checkEquals(jp7, jp8);    checkNotEquals(jp4, jp7);    checkNotEquals(jp9, jp5);    checkNotEquals(jp10, jp7);    checkNotEquals(jp9, jp10);    try {        new IntegerProperty(null);        fail("Should have generated an Illegal Argument Exception");    } catch (IllegalArgumentException e) {    }    try {        new IntegerProperty(null, 0);        fail("Should have generated an Illegal Argument Exception");    } catch (IllegalArgumentException e) {    }}
0
public void testLongEquality() throws Exception
{    LongProperty jp1 = new LongProperty("name1", 123);    LongProperty jp2 = new LongProperty("name1", 123);    LongProperty jp3 = new LongProperty("name2", -123);    LongProperty jp4 = new LongProperty("name2", 123);    LongProperty jp5 = new LongProperty("name2", Long.MIN_VALUE);    LongProperty jp6 = new LongProperty("name2", Long.MIN_VALUE);    LongProperty jp7 = new LongProperty("name2", Long.MAX_VALUE);    LongProperty jp8 = new LongProperty("name2", Long.MAX_VALUE);    LongProperty jp9 = new LongProperty("name1", Long.MIN_VALUE);    LongProperty jp10 = new LongProperty("name1", Long.MAX_VALUE);    checkEquals(jp1, jp2);    checkNotEquals(jp1, jp3);    checkNotEquals(jp2, jp3);    checkNotEquals(jp3, jp4);    checkEquals(jp5, jp6);    checkNotEquals(jp3, jp6);    checkEquals(jp7, jp8);    checkNotEquals(jp4, jp7);    checkNotEquals(jp9, jp5);    checkNotEquals(jp10, jp7);    checkNotEquals(jp9, jp10);    try {        new LongProperty(null, 0L);        fail("Should have generated an Illegal Argument Exception");    } catch (IllegalArgumentException e) {    }}
0
public void testMapEquality() throws Exception
{    try {        new MapProperty(null, null);        fail("Should have generated an Illegal Argument Exception");    } catch (IllegalArgumentException e) {    }}
0
public void testNullEquality() throws Exception
{    NullProperty jpn1 = new NullProperty();    NullProperty jpn2 = new NullProperty();    try {        new NullProperty(null);        fail("Should have generated an Illegal Argument Exception");    } catch (IllegalArgumentException e) {    }    NullProperty jp1 = new NullProperty("name1");    NullProperty jp2 = new NullProperty("name1");    NullProperty jp3 = new NullProperty("name2");    NullProperty jp4 = new NullProperty("name2");    checkEquals(jpn1, jpn2);    checkNotEquals(jpn1, jp1);    checkEquals(jp1, jp2);    checkNotEquals(jp1, jp3);    checkNotEquals(jp2, jp3);    checkEquals(jp3, jp4);}
0
public void testStringEquality() throws Exception
{    StringProperty jpn1 = new StringProperty();    StringProperty jpn2 = new StringProperty();    StringProperty jp1 = new StringProperty("name1", "value1");    StringProperty jp2 = new StringProperty("name1", "value1");    StringProperty jp3 = new StringProperty("name2", "value1");    StringProperty jp4 = new StringProperty("name2", "value2");    StringProperty jp5 = new StringProperty("name1", null);    StringProperty jp6 = new StringProperty("name1", null);    StringProperty jp7 = new StringProperty("name2", null);    checkEquals(jpn1, jpn2);    checkNotEquals(jpn1, jp1);    checkEquals(jp1, jp2);    checkNotEquals(jp1, jp3);    checkNotEquals(jp2, jp3);    checkNotEquals(jp3, jp4);    checkEquals(jp5, jp6);    checkNotEquals(jp3, jp5);    checkNotEquals(jp6, jp7);    try {        new StringProperty(null, "");        fail("Should have generated an Illegal Argument Exception");    } catch (IllegalArgumentException e) {    }    try {        new StringProperty(null, null);        fail("Should have generated an Illegal Argument Exception");    } catch (IllegalArgumentException e) {    }}
0
public void testAddingProperties() throws Exception
{    CollectionProperty coll = new CollectionProperty();    coll.addItem("joe");    coll.addProperty(new FunctionProperty());    assertEquals("joe", coll.get(0).getStringValue());    assertEquals("org.apache.jmeter.testelement.property.FunctionProperty", coll.get(1).getClass().getName());}
0
public void testDZeroCompareToDZero()
{    NumberProperty n1 = new DoubleProperty("n1", 0.0);    NumberProperty n2 = new DoubleProperty("n2", 0.0);    assertTrue(n1.compareTo(n2) == 0);}
0
public void testIZeroCompareToDZero()
{    NumberProperty n1 = new IntegerProperty("n1", 0);    NumberProperty n2 = new DoubleProperty("n2", 0.0);    assertTrue(n1.compareTo(n2) == 0);}
0
public void testCompareToPositive()
{    NumberProperty n1 = new DoubleProperty("n1", 1.0);    NumberProperty n2 = new DoubleProperty("n2", 0.0);    assertTrue(n1.compareTo(n2) > 0);}
0
public void testCompareToNegative()
{    NumberProperty n1 = new DoubleProperty("n1", -1.0);    NumberProperty n2 = new DoubleProperty("n2", 0.0);    assertTrue(n1.compareTo(n2) < 0);}
0
public void testCompareToMinMax()
{    NumberProperty n1 = new DoubleProperty("n1", Double.MIN_VALUE);    NumberProperty n2 = new DoubleProperty("n2", Double.MAX_VALUE);    assertTrue(n1.compareTo(n2) < 0);}
0
protected void after()
{    JMeterContextService.removeContext();}
0
public JMeterContext get()
{    if (instance == null) {        JMeterContext jMeterContext = new JMeterContext();        JMeterContextService.replaceContext(jMeterContext);        initContext(jMeterContext);        instance = jMeterContext;    }    return instance;}
0
protected void initContext(JMeterContext jMeterContext)
{}
0
public void testCounts()
{    assertEquals(0, JMeterContextService.getNumberOfThreads());    assertEquals(0, JMeterContextService.getTotalThreads());    incrNumberOfThreads();    assertEquals(1, JMeterContextService.getNumberOfThreads());    assertEquals(0, JMeterContextService.getTotalThreads());    decrNumberOfThreads();    assertEquals(0, JMeterContextService.getTotalThreads());    assertEquals(0, JMeterContextService.getNumberOfThreads());    JMeterContextService.addTotalThreads(27);    JMeterContextService.addTotalThreads(27);    assertEquals(54, JMeterContextService.getTotalThreads());    assertEquals(0, JMeterContextService.getNumberOfThreads());}
0
public static void incrNumberOfThreads()
{    JMeterContextService.incrNumberOfThreads();}
0
public static void decrNumberOfThreads()
{    JMeterContextService.decrNumberOfThreads();}
0
public boolean isCalled()
{    return called;}
0
public SampleResult sample(Entry e)
{    called = true;    return null;}
0
public int hashCode()
{    final int prime = 31;    int result = super.hashCode();    result = prime * result + (called ? 1231 : 1237);    return result;}
0
public boolean equals(Object obj)
{    if (this == obj) {        return true;    }    if (!super.equals(obj)) {        return false;    }    if (getClass() != obj.getClass()) {        return false;    }    DummySampler other = (DummySampler) obj;    return called == other.called;}
0
 void setDelay(long delay)
{    this.delay = delay;}
0
public long delay()
{    return delay;}
0
public void threadStarted()
{    if (throwError) {        throw new NoClassDefFoundError("Throw for Bug TestJMeterThread");    } else {        throw new RuntimeException("Throw for Bug TestJMeterThread");    }}
0
public void threadFinished()
{    if (throwError) {        throw new NoClassDefFoundError("Throw for Bug TestJMeterThread");    } else {        throw new RuntimeException("Throw for Bug TestJMeterThread");    }}
0
public void testBug61661OnError()
{    HashTree hashTree = new HashTree();    hashTree.add("Test", new ThrowingThreadListener(true));    JMeterThread.ThreadListenerTraverser traverser = new JMeterThread.ThreadListenerTraverser(true);    hashTree.traverse(traverser);}
0
public void testBug61661OnException()
{    HashTree hashTree = new HashTree();    hashTree.add("Test", new ThrowingThreadListener(false));    JMeterThread.ThreadListenerTraverser traverser = new JMeterThread.ThreadListenerTraverser(true);    hashTree.traverse(traverser);}
0
public void testBug63490EndTestWhenDelayIsTooLongForScheduler()
{    JMeterContextService.getContext().setVariables(new JMeterVariables());    HashTree testTree = new HashTree();    LoopController samplerController = createLoopController();    testTree.add(samplerController);    testTree.add(samplerController, createConstantTimer(3000));    DummySampler dummySampler = createSampler();    testTree.add(samplerController, dummySampler);    TestCompiler compiler = new TestCompiler(testTree);    testTree.traverse(compiler);    ThreadGroup threadGroup = new ThreadGroup();    threadGroup.setNumThreads(1);    long maxDuration = 2000L;    threadGroup.setDuration(maxDuration);    JMeterThread jMeterThread = new JMeterThread(testTree, threadGroup, null);    jMeterThread.setScheduled(true);    jMeterThread.setEndTime(System.currentTimeMillis() + maxDuration);    jMeterThread.setThreadGroup(threadGroup);    long startTime = new Date().getTime();    jMeterThread.run();    long duration = new Date().getTime() - startTime;    assertFalse("Sampler should not be called", dummySampler.isCalled());            assertTrue("Test plan should not run for longer than duration", duration <= maxDuration);}
0
private LoopController createLoopController()
{    LoopController result = new LoopController();    result.setLoops(LoopController.INFINITE_LOOP_COUNT);    result.setEnabled(true);    return result;}
0
private DummySampler createSampler()
{    DummySampler result = new DummySampler();    result.setName("Call me");    return result;}
0
private Timer createConstantTimer(long delay)
{    DummyTimer timer = new DummyTimer();    timer.setEnabled(true);    timer.setDelay(delay);    timer.setName("Long delay");    return timer;}
0
public void testConfigGathering() throws Exception
{    ListedHashTree testing = new ListedHashTree();    GenericController controller = new GenericController();    ConfigTestElement config1 = new ConfigTestElement();    config1.setName("config1");    config1.setProperty("test.property", "A test value");    TestSampler sampler = new TestSampler();    sampler.setName("sampler");    testing.add(controller, config1);    testing.add(controller, sampler);    TestCompiler.initialize();    TestCompiler compiler = new TestCompiler(testing);    testing.traverse(compiler);    sampler = (TestSampler) compiler.configureSampler(sampler).getSampler();    assertEquals("A test value", sampler.getPropertyAsString("test.property"));}
0
public SampleResult sample(org.apache.jmeter.samplers.Entry e)
{    return null;}
0
public Object clone()
{    return new TestSampler();}
0
public void setUp()
{    vars = new JMeterVariables();    vars.put(MY_KEY, "something to test for");    vars.putObject(MY_OBJECT_KEY, new Object());    unmodifiables = new UnmodifiableJMeterVariables(vars);}
0
public void testGetThreadName()
{    assertThat(unmodifiables.getThreadName(), CoreMatchers.is(vars.getThreadName()));}
0
public void testGetIteration()
{    assertThat(unmodifiables.getIteration(), CoreMatchers.is(vars.getIteration()));}
0
public void testIncIteration()
{    unmodifiables.incIteration();}
0
public void testRemove()
{    unmodifiables.remove("some.key");}
0
public void testPut()
{    unmodifiables.put("some.key", "anything");}
0
public void testPutObject()
{    unmodifiables.putObject("some.key", new Object());}
0
public void testPutAllMapOfStringQ()
{    unmodifiables.putAll(Collections.emptyMap());}
0
public void testPutAllJMeterVariables()
{    unmodifiables.putAll(vars);}
0
public void testGet()
{    assertThat(unmodifiables.get(MY_KEY), CoreMatchers.is(vars.get(MY_KEY)));}
0
public void testGetObject()
{    assertThat(unmodifiables.getObject(MY_OBJECT_KEY), CoreMatchers.is(vars.getObject(MY_OBJECT_KEY)));}
0
public void testGetIteratorIsUnmodifable()
{    Iterator<Entry<String, Object>> iterator = unmodifiables.getIterator();    assertThat(iterator.hasNext(), CoreMatchers.is(true));    iterator.next();    iterator.remove();}
0
public void testGetIterator()
{    assertThat(iteratorToMap(unmodifiables.getIterator()), CoreMatchers.is(iteratorToMap(vars.getIterator())));}
0
private Map<K, V> iteratorToMap(Iterator<Entry<K, V>> it)
{    Map<K, V> result = new HashMap<>();    while (it.hasNext()) {        Entry<K, V> entry = it.next();        result.put(entry.getKey(), entry.getValue());    }    return result;}
0
public void testEntrySet()
{    assertThat(unmodifiables.entrySet(), CoreMatchers.is(vars.entrySet()));}
0
public void testEqualsObjectSymmetry()
{    UnmodifiableJMeterVariables otherUnmodifiables = new UnmodifiableJMeterVariables(vars);    assertThat(unmodifiables, CoreMatchers.is(otherUnmodifiables));    assertThat(otherUnmodifiables, CoreMatchers.is(unmodifiables));}
0
public void testEqualsObjectReflexivity()
{    assertThat(unmodifiables, CoreMatchers.is(unmodifiables));}
0
public void testEqualsObjectWithJMeterVariables()
{    assertThat(unmodifiables.equals(vars), CoreMatchers.is(vars.equals(unmodifiables)));}
0
public void testHashCode()
{    UnmodifiableJMeterVariables otherUnmodifiables = new UnmodifiableJMeterVariables(vars);    assertThat(unmodifiables.hashCode(), CoreMatchers.is(otherUnmodifiables.hashCode()));}
0
public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) throws ParameterResolutionException
{    Class<?> parameterType = parameterContext.getParameter().getType();    return parameterType == JMeterContext.class || parameterType == JMeterVariables.class;}
0
public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) throws ParameterResolutionException
{    Class<?> parameterType = parameterContext.getParameter().getType();    JMeterContext jMeterContext = JMeterContextService.getContext();    if (parameterType == JMeterContext.class) {        return jMeterContext;    }    if (parameterType == JMeterVariables.class) {        return jMeterContext.getVariables();    }    throw new IllegalArgumentException(parameterContext.toString());}
0
public void afterEach(ExtensionContext context) throws Exception
{    JMeterContextService.getContext().clear();}
0
public void beforeEach(ExtensionContext context) throws Exception
{    JMeterContext jMeterContext = JMeterContextService.getContext();    jMeterContext.clear();    jMeterContext.setVariables(new JMeterVariables());}
0
public void testGetScriptEngineJS() throws Exception
{    element.setScriptLanguage("JavaScript");    assertThat(element.getScriptEngine().getFactory().getLanguageName(), CoreMatchers.containsString("Script"));}
0
public void testGetScriptEngineDefault() throws Exception
{    element.setScriptLanguage("");    assertThat(element.getScriptEngine().getFactory().getLanguageName(), CoreMatchers.is("Groovy"));}
0
public int getLevel()
{    return level;}
0
public Marker getMarker()
{    return marker;}
0
public String getFormat()
{    return format;}
0
public Object[] getArguments()
{    return arguments;}
0
public Throwable getThrowable()
{    return throwable;}
0
public Collection<LogRecord> getLogRecords()
{    return Collections.unmodifiableCollection(logRecords);}
0
public int getLogRecordCount()
{    return logRecords.size();}
0
public void clearLogRecords()
{    logRecords.clear();}
0
public void trace(String msg)
{    logRecords.add(new LogRecord(LogRecord.TRACE, msg));    delegate.trace(msg);}
0
public void trace(String format, Object arg)
{    logRecords.add(new LogRecord(LogRecord.TRACE, format, arg));    delegate.trace(format, arg);}
0
public void trace(String format, Object arg1, Object arg2)
{    logRecords.add(new LogRecord(LogRecord.TRACE, format, arg1, arg2));    delegate.trace(format, arg1, arg2);}
0
public void trace(String format, Object... argArray)
{    logRecords.add(new LogRecord(LogRecord.TRACE, format, argArray));    delegate.trace(format, argArray);}
0
public void trace(String msg, Throwable t)
{    logRecords.add(new LogRecord(LogRecord.TRACE, msg, t));    delegate.trace(msg, t);}
0
public void trace(Marker marker, String msg)
{    logRecords.add(new LogRecord(LogRecord.TRACE, marker, msg));    delegate.trace(marker, msg);}
0
public void trace(Marker marker, String format, Object arg)
{    logRecords.add(new LogRecord(LogRecord.TRACE, marker, format, arg));    delegate.trace(marker, format, arg);}
0
public void trace(Marker marker, String format, Object arg1, Object arg2)
{    logRecords.add(new LogRecord(LogRecord.TRACE, marker, format, arg1, arg2));    delegate.trace(marker, format, arg1, arg2);}
0
public void trace(Marker marker, String format, Object... argArray)
{    logRecords.add(new LogRecord(LogRecord.TRACE, marker, format, argArray));    delegate.trace(marker, format, argArray);}
0
public void trace(Marker marker, String msg, Throwable t)
{    logRecords.add(new LogRecord(LogRecord.TRACE, marker, msg, t));    delegate.trace(marker, msg, t);}
0
public void debug(String msg)
{    logRecords.add(new LogRecord(LogRecord.DEBUG, msg));    delegate.debug(msg);}
0
public void debug(String format, Object arg)
{    logRecords.add(new LogRecord(LogRecord.DEBUG, format, arg));    delegate.debug(format, arg);}
0
public void debug(String format, Object arg1, Object arg2)
{    logRecords.add(new LogRecord(LogRecord.DEBUG, format, arg1, arg2));    delegate.debug(format, arg1, arg2);}
0
public void debug(String format, Object... argArray)
{    logRecords.add(new LogRecord(LogRecord.DEBUG, format, argArray));    delegate.debug(format, argArray);}
0
public void debug(String msg, Throwable t)
{    logRecords.add(new LogRecord(LogRecord.DEBUG, msg, t));    delegate.debug(msg, t);}
0
public void debug(Marker marker, String msg)
{    logRecords.add(new LogRecord(LogRecord.DEBUG, marker, msg));    delegate.debug(marker, msg);}
0
public void debug(Marker marker, String format, Object arg)
{    logRecords.add(new LogRecord(LogRecord.DEBUG, marker, format, arg));    delegate.debug(marker, format, arg);}
0
public void debug(Marker marker, String format, Object arg1, Object arg2)
{    logRecords.add(new LogRecord(LogRecord.DEBUG, marker, format, arg1, arg2));    delegate.debug(marker, format, arg1, arg2);}
0
public void debug(Marker marker, String format, Object... argArray)
{    logRecords.add(new LogRecord(LogRecord.DEBUG, marker, format, argArray));    delegate.debug(marker, format, argArray);}
0
public void debug(Marker marker, String msg, Throwable t)
{    logRecords.add(new LogRecord(LogRecord.DEBUG, marker, msg, t));    delegate.debug(marker, msg, t);}
0
public void info(String msg)
{    logRecords.add(new LogRecord(LogRecord.INFO, msg));    delegate.info(msg);}
0
public void info(String format, Object arg)
{    logRecords.add(new LogRecord(LogRecord.INFO, format, arg));    delegate.info(format, arg);}
0
public void info(String format, Object arg1, Object arg2)
{    logRecords.add(new LogRecord(LogRecord.INFO, format, arg1, arg2));    delegate.info(format, arg1, arg2);}
0
public void info(String format, Object... argArray)
{    logRecords.add(new LogRecord(LogRecord.INFO, format, argArray));    delegate.info(format, argArray);}
0
public void info(String msg, Throwable t)
{    logRecords.add(new LogRecord(LogRecord.INFO, msg, t));    delegate.info(msg, t);}
0
public void info(Marker marker, String msg)
{    logRecords.add(new LogRecord(LogRecord.INFO, marker, msg));    delegate.info(marker, msg);}
0
public void info(Marker marker, String format, Object arg)
{    logRecords.add(new LogRecord(LogRecord.INFO, marker, format, arg));    delegate.info(marker, format, arg);}
0
public void info(Marker marker, String format, Object arg1, Object arg2)
{    logRecords.add(new LogRecord(LogRecord.INFO, marker, format, arg1, arg2));    delegate.info(marker, format, arg1, arg2);}
0
public void info(Marker marker, String format, Object... argArray)
{    logRecords.add(new LogRecord(LogRecord.INFO, marker, format, argArray));    delegate.info(marker, format, argArray);}
0
public void info(Marker marker, String msg, Throwable t)
{    logRecords.add(new LogRecord(LogRecord.INFO, marker, msg, t));    delegate.info(marker, msg, t);}
0
public void warn(String msg)
{    logRecords.add(new LogRecord(LogRecord.WARN, msg));    delegate.warn(msg);}
0
public void warn(String format, Object arg)
{    logRecords.add(new LogRecord(LogRecord.WARN, format, arg));    delegate.warn(format, arg);}
0
public void warn(String format, Object arg1, Object arg2)
{    logRecords.add(new LogRecord(LogRecord.WARN, format, arg1, arg2));    delegate.warn(format, arg1, arg2);}
0
public void warn(String format, Object... argArray)
{    logRecords.add(new LogRecord(LogRecord.WARN, format, argArray));    delegate.warn(format, argArray);}
0
public void warn(String msg, Throwable t)
{    logRecords.add(new LogRecord(LogRecord.WARN, msg, t));    delegate.warn(msg, t);}
0
public void warn(Marker marker, String msg)
{    logRecords.add(new LogRecord(LogRecord.WARN, marker, msg));    delegate.warn(marker, msg);}
0
public void warn(Marker marker, String format, Object arg)
{    logRecords.add(new LogRecord(LogRecord.WARN, marker, format, arg));    delegate.warn(marker, format, arg);}
0
public void warn(Marker marker, String format, Object arg1, Object arg2)
{    logRecords.add(new LogRecord(LogRecord.WARN, marker, format, arg1, arg2));    delegate.warn(marker, format, arg1, arg2);}
0
public void warn(Marker marker, String format, Object... argArray)
{    logRecords.add(new LogRecord(LogRecord.WARN, marker, format, argArray));    delegate.warn(marker, format, argArray);}
0
public void warn(Marker marker, String msg, Throwable t)
{    logRecords.add(new LogRecord(LogRecord.WARN, marker, msg, t));    delegate.warn(marker, msg, t);}
0
public void error(String msg)
{    logRecords.add(new LogRecord(LogRecord.ERROR, msg));    delegate.error(msg);}
0
public void error(String format, Object arg)
{    logRecords.add(new LogRecord(LogRecord.ERROR, format, arg));    delegate.error(format, arg);}
0
public void error(String format, Object arg1, Object arg2)
{    logRecords.add(new LogRecord(LogRecord.ERROR, format, arg1, arg2));    delegate.error(format, arg1, arg2);}
0
public void error(String format, Object... argArray)
{    logRecords.add(new LogRecord(LogRecord.ERROR, format, argArray));    delegate.error(format, argArray);}
0
public void error(String msg, Throwable t)
{    logRecords.add(new LogRecord(LogRecord.ERROR, msg, t));    delegate.error(msg, t);}
0
public void error(Marker marker, String msg)
{    logRecords.add(new LogRecord(LogRecord.ERROR, marker, msg));    delegate.error(marker, msg);}
0
public void error(Marker marker, String format, Object arg)
{    logRecords.add(new LogRecord(LogRecord.ERROR, marker, format, arg));    delegate.error(marker, format, arg);}
0
public void error(Marker marker, String format, Object arg1, Object arg2)
{    logRecords.add(new LogRecord(LogRecord.ERROR, marker, format, arg1, arg2));    delegate.error(marker, format, arg1, arg2);}
0
public void error(Marker marker, String format, Object... argArray)
{    logRecords.add(new LogRecord(LogRecord.ERROR, marker, format, argArray));    delegate.error(marker, format, argArray);}
0
public void error(Marker marker, String msg, Throwable t)
{    logRecords.add(new LogRecord(LogRecord.ERROR, marker, msg, t));    delegate.error(marker, msg, t);}
0
public String getName()
{    return delegate.getName();}
0
public boolean isDebugEnabled()
{    return delegate.isDebugEnabled();}
0
public boolean isDebugEnabled(Marker marker)
{    return delegate.isDebugEnabled(marker);}
0
public boolean isErrorEnabled()
{    return delegate.isErrorEnabled();}
0
public boolean isErrorEnabled(Marker marker)
{    return delegate.isErrorEnabled(marker);}
0
public boolean isInfoEnabled()
{    return delegate.isInfoEnabled();}
0
public boolean isInfoEnabled(Marker marker)
{    return delegate.isInfoEnabled(marker);}
0
public boolean isTraceEnabled()
{    return delegate.isTraceEnabled();}
0
public boolean isTraceEnabled(Marker marker)
{    return delegate.isTraceEnabled(marker);}
0
public boolean isWarnEnabled()
{    return delegate.isWarnEnabled();}
0
public boolean isWarnEnabled(Marker marker)
{    return delegate.isWarnEnabled(marker);}
0
public void testServer() throws Exception
{    BeanShellServer bshs = new BeanShellServer(9876, "");    assertNotNull(bshs);}
0
public void testServer() throws Exception
{    BeanShellServer bshs = new BeanShellServer(9876, "");    assertNotNull(bshs);}
0
public void testSub1() throws Exception
{    String input = "http://jakarta.apache.org/jmeter/index.html";    String pattern = "jakarta.apache.org";    String sub = "${server}";    assertEquals("http://${server}/jmeter/index.html", StringUtilities.substitute(input, pattern, sub));}
0
public void testSub2() throws Exception
{    String input = "arg1=param1;param1";    String pattern = "param1";    String sub = "${value}";    assertEquals("arg1=${value};${value}", StringUtilities.substitute(input, pattern, sub));}
0
public void testSub3() throws Exception
{    String input = "jakarta.apache.org";    String pattern = "jakarta.apache.org";    String sub = "${server}";    assertEquals("${server}", StringUtilities.substitute(input, pattern, sub));}
0
public void testSub4() throws Exception
{    String input = "//a///b////c";    String pattern = "//";    String sub = "/";    assertEquals("/a//b//c", StringUtilities.substitute(input, pattern, sub));}
0
public void testGetResourceFileAsText() throws Exception
{    String sep = System.getProperty("line.separator");    assertEquals("line one" + sep + "line two" + sep, JMeterUtils.getResourceFileAsText("resourcefile.txt"));}
0
public void testGetResourceFileAsTextWithMisingResource() throws Exception
{    assertEquals("", JMeterUtils.getResourceFileAsText("not_existant_resourcefile.txt"));}
0
public void testGesResStringDefaultWithNonExistantKey() throws Exception
{    assertEquals("[res_key=noValidKey]", JMeterUtils.getResString("noValidKey"));}
0
public void testBug63033() throws SaxonApiException
{    Processor p = new Processor(false);    XPathCompiler c = p.newXPathCompiler();    c.declareNamespace("age", "http://www.w3.org/2003/01/geo/wgs84_pos#");    String xPathQuery = "//Employees/Employee[1]/age:ag";    XPathExecutable e = c.compile(xPathQuery);    XPathSelector selector = e.load();    selector.setContextItem(p.newDocumentBuilder().build(new StreamSource(new StringReader(xmlDoc))));    XdmValue nodes = selector.evaluate();    XdmItem item = nodes.itemAt(0);    assertEquals("<age:ag xmlns:age=\"http://www.w3.org/2003/01/geo/wgs84_pos#\">29</age:ag>", item.toString());}
0
public void testputValuesForXPathInListUsingSaxon() throws SaxonApiException, FactoryConfigurationError
{    String xPathQuery = "//Employees/Employee/role";    ArrayList<String> matchStrings = new ArrayList<String>();    boolean fragment = false;    String namespaces = "age=http://www.w3.org/2003/01/geo/wgs84_pos#";    int matchNumber = 3;    XPathUtil.putValuesForXPathInListUsingSaxon(xmlDoc, xPathQuery, matchStrings, fragment, matchNumber, namespaces);    assertEquals("Manager", matchStrings.get(0));    matchNumber = 0;    xPathQuery = "//Employees/Employee[1]/age:ag";    fragment = true;    matchStrings.clear();    XPathUtil.putValuesForXPathInListUsingSaxon(xmlDoc, xPathQuery, matchStrings, fragment, matchNumber, namespaces);    assertEquals("<age:ag xmlns:age=\"http://www.w3.org/2003/01/geo/wgs84_pos#\">29</age:ag>", matchStrings.get(0));    assertEquals(1, matchStrings.size());    matchNumber = -1;    xPathQuery = "//Employees/Employee/age:ag";    matchStrings.clear();    XPathUtil.putValuesForXPathInListUsingSaxon(xmlDoc, xPathQuery, matchStrings, fragment, matchNumber, namespaces);    assertEquals("<age:ag xmlns:age=\"http://www.w3.org/2003/01/geo/wgs84_pos#\">29</age:ag>", matchStrings.get(0));    assertEquals(4, matchStrings.size());    fragment = false;    matchStrings.clear();    XPathUtil.putValuesForXPathInListUsingSaxon(xmlDoc, xPathQuery, matchStrings, fragment, matchNumber, namespaces);    assertEquals("29", matchStrings.get(0));    assertEquals(4, matchStrings.size());    matchStrings.clear();    xPathQuery = "regtsgwsdfstgsdf";    XPathUtil.putValuesForXPathInListUsingSaxon(xmlDoc, xPathQuery, matchStrings, fragment, matchNumber, namespaces);    assertEquals(new ArrayList<String>(), matchStrings);    assertEquals(0, matchStrings.size());    matchStrings.clear();    xPathQuery = "//Employees/Employee[1]/age:ag";    matchNumber = 555;    XPathUtil.putValuesForXPathInListUsingSaxon(xmlDoc, xPathQuery, matchStrings, fragment, matchNumber, namespaces);    assertEquals(new ArrayList<String>(), matchStrings);    assertEquals(0, matchStrings.size());}
0
public void testnamespacesParse()
{    String namespaces = "donald=duck";    List<String[]> test = XPathUtil.namespacesParse(namespaces);    assertEquals("donald", test.get(0)[0]);    assertEquals("duck", test.get(0)[1]);    namespaces = "donald=duck\nmickey=mouse";    test = XPathUtil.namespacesParse(namespaces);    assertEquals("donald", test.get(0)[0]);    assertEquals("duck", test.get(0)[1]);    assertEquals("mickey", test.get(1)[0]);    assertEquals("mouse", test.get(1)[1]);    namespaces = "donald=duck\n\n\nmickey=mouse";    test = XPathUtil.namespacesParse(namespaces);    assertEquals("mickey", test.get(1)[0]);    assertEquals("mouse", test.get(1)[1]);    namespaces = "geo=patate\n       \n   \n\nmickey=mouse\n\n      \n";    test = XPathUtil.namespacesParse(namespaces);    assertEquals("mickey", test.get(1)[0]);    assertEquals("mouse", test.get(1)[1]);}
0
public void testFormatXmlSimple()
{    assertThat(XPathUtil.formatXml("<one foo='bar'>Test</one>"), CoreMatchers.is("<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<one foo=\"bar\">Test</one>" + lineSeparator));}
0
public void testFormatXmlComplex()
{    assertThat(XPathUtil.formatXml("<one foo='bar'><two/><three><four p=\"1\"/></three>...</one>"), CoreMatchers.is(String.join(lineSeparator, "<?xml version=\"1.0\" encoding=\"UTF-8\"?><one foo=\"bar\">", "  <two/>", "  <three>", "    <four p=\"1\"/>", "  </three>...</one>", "")));}
0
public void testFormatXmlInvalid()
{    PrintStream origErr = System.err;            System.setErr(null);    assertThat("No well formed xml here", CoreMatchers.is(XPathUtil.formatXml("No well formed xml here")));    System.setErr(origErr);}
0
public void testMakeDocument() throws ParserConfigurationException, SAXException, IOException, TidyException
{    String responseData = "<book><page>one</page><page>two</page><empty></empty><a><b></b></a></book>";    Document testDoc = XPathUtil.makeDocument(new ByteArrayInputStream(responseData.getBytes(StandardCharsets.UTF_8)), false, false, false, false, false, false, false, false, false);    AssertionResult res = new AssertionResult("test");    String xpathquery = "/book";    XPathUtil.computeAssertionResult(res, testDoc, xpathquery, false);    assertFalse("Should not be an error", res.isError());    assertFalse("Should not be a failure", res.isFailure());    xpathquery = "/book/error";    XPathUtil.computeAssertionResult(res, testDoc, xpathquery, false);    assertFalse("Should not be an error", res.isError());    assertTrue("Should be a failure", res.isFailure());    xpathquery = "count(/book/page)=2";    XPathUtil.computeAssertionResult(res, testDoc, xpathquery, false);    assertFalse("Should not be an error", res.isError());    assertFalse("Should not be a failure", res.isFailure());    xpathquery = "count(/book/page)=1";    XPathUtil.computeAssertionResult(res, testDoc, xpathquery, false);    assertFalse("Should not be an error", res.isError());    assertTrue("Should be a failure", res.isFailure());    xpathquery = "///book";    XPathUtil.computeAssertionResult(res, testDoc, xpathquery, false);    assertTrue("Should be an error", res.isError());}
0
public void testMakeDocumentIsnegated() throws ParserConfigurationException, SAXException, IOException, TidyException
{    String responseData = "<book><preface>zero</preface><page>one</page><page>two</page><empty></empty><a><b></b></a></book>";    Document testDoc = XPathUtil.makeDocument(new ByteArrayInputStream(responseData.getBytes(StandardCharsets.UTF_8)), false, false, false, false, false, false, false, false, false);    AssertionResult res = new AssertionResult("test");    String xpathquery = "/book/error";    XPathUtil.computeAssertionResult(res, testDoc, xpathquery, true);    assertFalse("Should not be an error", res.isError());    assertFalse("Should not be a failure", res.isFailure());    xpathquery = "/book/preface";    XPathUtil.computeAssertionResult(res, testDoc, xpathquery, true);    assertFalse("Should not be an error", res.isError());    assertTrue("Should be a failure", res.isFailure());    XPathUtil.computeAssertionResult(res, testDoc, xpathquery, true);    assertFalse("Should not be an error", res.isError());    assertTrue("Should be a failure", res.isFailure());    xpathquery = "count(/book/page)=1";    XPathUtil.computeAssertionResult(res, testDoc, xpathquery, true);    assertFalse("Should not be an error", res.isError());    assertFalse("Should not be a failure", res.isFailure());}
0
public void testGetNamespaces() throws XMLStreamException, FactoryConfigurationError
{    String responseData = "<age:ag xmlns:age=\"http://www.w3.org/wgs84_pos#\">\n" + "<hd:head xmlns:hd=\"http://www.w3.org/wgs85_pos#\"><title>test</title></hd:head></age:ag>";    List<String[]> res = XPathUtil.getNamespaces(responseData);    assertEquals("age", res.get(0)[0]);    assertEquals("http://www.w3.org/wgs84_pos#", res.get(0)[1]);    assertEquals("hd", res.get(1)[0]);    assertEquals("http://www.w3.org/wgs85_pos#", res.get(1)[1]);}
0
public void testComputeAssertionResultUsingSaxon() throws SaxonApiException, FactoryConfigurationError
{        AssertionResult res = new AssertionResult("test");    String responseData = "<book><page>one</page><page>two</page><empty></empty><a><b></b></a></book>";    String xpathquery = "/book";    XPathUtil.computeAssertionResultUsingSaxon(res, responseData, xpathquery, "", false);    assertFalse("Should not be an error", res.isError());    assertFalse("Should not be a failure", res.isFailure());        xpathquery = "/b";    XPathUtil.computeAssertionResultUsingSaxon(res, responseData, xpathquery, "", false);    assertFalse("Should not be an error", res.isError());    assertTrue("Should be a failure", res.isFailure());        xpathquery = "count(//page)=2";    XPathUtil.computeAssertionResultUsingSaxon(res, responseData, xpathquery, "", false);    assertFalse("Should not be an error", res.isError());    assertFalse("Should not be a failure", res.isFailure());        xpathquery = "count(//page)=3";    XPathUtil.computeAssertionResultUsingSaxon(res, responseData, xpathquery, "", false);    assertFalse("Should not be an error", res.isError());    assertTrue("Should be a failure", res.isFailure());}
0
public void testPutValuesForXPathInList() throws ParserConfigurationException, SAXException, IOException, TidyException, TransformerException
{    String responseData = "<book><page>one</page><page>two</page><empty></empty><a><b></b></a></book>";    Document testDoc = XPathUtil.makeDocument(new ByteArrayInputStream(responseData.getBytes(StandardCharsets.UTF_8)), false, false, false, false, false, false, false, false, false);    String xpathquery = "/book/page";    List<String> matchs = new ArrayList<>();    XPathUtil.putValuesForXPathInList(testDoc, xpathquery, matchs, true);    assertEquals("<page>one</page>", matchs.get(0));    assertEquals("<page>two</page>", matchs.get(1));    matchs = new ArrayList<>();    XPathUtil.putValuesForXPathInList(testDoc, xpathquery, matchs, false);    assertEquals("one", matchs.get(0));    assertEquals("two", matchs.get(1));}
0
public String getName()
{    return name;}
0
public String getString(String s)
{    return s;}
0
public String getName()
{    return super.getName() + ".";}
0
public String getName()
{    return name;}
0
public String getString(String s)
{    return s;}
0
public void setUp()
{    Configurator.setAllLevels(Functor.class.getName(), Level.FATAL);}
0
public void testName() throws Exception
{    Functor f1 = new Functor("getName");    Functor f2 = new Functor("getName");    Functor f1a = new Functor("getName");    Test1 t1 = new Test1("t1");    Test2 t2 = new Test2("t2");    Test1a t1a = new Test1a("aa");    assertEquals("t1", f1.invoke(t1));    try {        f1.invoke(t2);        fail("Should have generated error");    } catch (JMeterError e) {    }    assertEquals("t2", f2.invoke(t2));    assertEquals("1a:aa.", f1a.invoke(t1a));    try {                f1a.invoke(t1);        fail("Should have generated error");    } catch (JMeterError e) {    }        assertEquals("1a:aa.", f1.invoke(t1a));}
0
public void testNameTypes() throws Exception
{    Functor f = new Functor("getString", new Class[] { String.class });        Functor f2 = new Functor("getString");    Test1 t1 = new Test1("t1");    assertEquals("x1", f.invoke(t1, new String[] { "x1" }));    try {        assertEquals("x1", f.invoke(t1));        fail("Should have generated an Exception");    } catch (JMeterError ok) {    }    assertEquals("x2", f2.invoke(t1, new String[] { "x2" }));    try {        assertEquals("x2", f2.invoke(t1));        fail("Should have generated an Exception");    } catch (JMeterError ok) {    }}
0
public void testObjectName() throws Exception
{    Test1 t1 = new Test1("t1");    Test2 t2 = new Test2("t2");    Functor f1 = new Functor(t1, "getName");    assertEquals("t1", f1.invoke(t1));        assertEquals("t1", f1.invoke(t2));}
0
public void testClass() throws Exception
{    Test1 t1 = new Test1("t1");    Test1 t1a = new Test1a("t1a");    Test2 t2 = new Test2("t2");    Functor f1 = new Functor(HasName.class, "getName");    assertEquals("t1", f1.invoke(t1));    assertEquals("1a:t1a.", f1.invoke(t1a));    assertEquals("t2", f1.invoke(t2));    try {        f1.invoke();        fail("Should have failed");    } catch (IllegalStateException ok) {    }    Functor f2 = new Functor(HasString.class, "getString");    assertEquals("xyz", f2.invoke(t2, new String[] { "xyz" }));    try {        f2.invoke(t1, new String[] { "xyz" });        fail("Should have failed");    } catch (JMeterError ok) {    }    Functor f3 = new Functor(t2, "getString");    assertEquals("xyz", f3.invoke(t2, new Object[] { "xyz" }));    Properties p = new Properties();    p.put("Name", "Value");    Functor fk = new Functor(Map.Entry.class, "getKey");    Functor fv = new Functor(Map.Entry.class, "getValue");    Object o = p.entrySet().iterator().next();    assertEquals("Name", fk.invoke(o));    assertEquals("Value", fv.invoke(o));}
0
public void testBadParameters() throws Exception
{    try {        new Functor(null);        fail("should have generated IllegalArgumentException;");    } catch (IllegalArgumentException ok) {    }    try {        new Functor(null, new Class[] {});        fail("should have generated IllegalArgumentException;");    } catch (IllegalArgumentException ok) {    }    try {        new Functor(null, new Object[] {});        fail("should have generated IllegalArgumentException;");    } catch (IllegalArgumentException ok) {    }    try {        new Functor(String.class, null);        fail("should have generated IllegalArgumentException;");    } catch (IllegalArgumentException ok) {    }    try {        new Functor(new Object(), null);        fail("should have generated IllegalArgumentException;");    } catch (IllegalArgumentException ok) {    }    try {        new Functor(new Object(), null, new Class[] {});        fail("should have generated IllegalArgumentException;");    } catch (IllegalArgumentException ok) {    }    try {        new Functor(new Object(), null, new Object[] {});        fail("should have generated IllegalArgumentException;");    } catch (IllegalArgumentException ok) {    }}
0
public void testIllegalState() throws Exception
{    Functor f = new Functor("method");    try {        f.invoke();        fail("should have generated IllegalStateException;");    } catch (IllegalStateException ok) {    }    try {        f.invoke(new Object[] {});        fail("should have generated IllegalStateException;");    } catch (IllegalStateException ok) {    }}
0
private static void logprop(String prop, boolean show)
{    String value = System.getProperty(prop);        if (show) {        System.out.println(prop + "=" + value);    }}
1
private static void logprop(String prop)
{    logprop(prop, false);}
0
public static void main(String[] args)
{    if (args.length < 1) {        System.out.println("You must specify a comma-delimited list of paths to search " + "for unit tests");        return;    }    String home = new File(System.getProperty("user.dir")).getParent();    System.out.println("Setting JMeterHome: " + home);    JMeterUtils.setJMeterHome(home);    initializeManager(args);        System.out.println("JMeterVersion=" + JMeterUtils.getJMeterVersion());    logprop("java.version", true);    logprop("java.vm.name");    logprop("java.vendor");    logprop("java.home", true);    logprop("file.encoding", true);        System.out.println("default encoding=" + Charset.defaultCharset());        logprop("user.home");    logprop("user.dir", true);    logprop("user.language");    logprop("user.region");    logprop("user.country");    logprop("user.variant");        System.out.println("Locale=" + Locale.getDefault());    logprop("os.name", true);    logprop("os.version", true);    logprop("os.arch");    logprop("java.class.version");    if (Boolean.getBoolean("jmeter.test.log.classpath")) {        String cp = System.getProperty("java.class.path");        String[] cpe = JOrphanUtils.split(cp, java.io.File.pathSeparator);        StringBuilder sb = new StringBuilder(3000);        sb.append("java.class.path=");        for (String path : cpe) {            sb.append("\n");            sb.append(path);            if (new File(path).exists()) {                sb.append(" - OK");            } else {                sb.append(" - ??");            }        }            }    try {        int maxKeyLen = Cipher.getMaxAllowedKeyLength("AES");        System.out.println("JCE max key length = " + maxKeyLen);    } catch (NoSuchAlgorithmException e) {            }    System.out.println("+++++++++++");    logprop("java.awt.headless", true);    logprop("java.awt.graphicsenv", true);    System.out.println("------------");    JUnitCore jUnitCore = new JUnitCore();            jUnitCore.addListener(new TextListener(System.out));            jUnitCore.addListener(new TimePrinter());    System.out.println("Searching junit tests in : " + args[0]);    try {        List<String> tests = findJMeterJUnitTests(args[0]);        List<Class<?>> classes = asClasses(tests);        Result parallelResults = jUnitCore.run(getParallelTests(classes));        Result serialResults = jUnitCore.run(getSerialTests(classes));        boolean allTestsSuccessful = parallelResults.wasSuccessful() && serialResults.wasSuccessful();        System.exit(allTestsSuccessful ? 0 : 1);    } catch (Exception e) {        e.printStackTrace();        System.exit(1);    }}
1
private static Request getParallelTests(List<Class<?>> classes)
{    Request parallelRequest = Request.classes(    ParallelComputer.methods(), classes.stream().filter(c -> !JMeterSerialTest.class.isAssignableFrom(c)).toArray(Class<?>[]::new));    return filterGUITests(parallelRequest);}
0
private static Request getSerialTests(List<Class<?>> classes)
{    Request serialRequest = Request.classes(Computer.serial(), classes.stream().filter(JMeterSerialTest.class::isAssignableFrom).toArray(Class<?>[]::new));    return filterGUITests(serialRequest);}
0
private static Request filterGUITests(Request request)
{    if (GraphicsEnvironment.isHeadless()) {        return request.filterWith(new ExcludeCategoryFilter(NeedGuiTests.class));    } else {        return request;    }}
0
private static List<Class<?>> asClasses(List<String> tests)
{    return tests.stream().map(AllTests::asClass).collect(Collectors.toList());}
0
private static Class<?> asClass(String test)
{    try {        return Class.forName(test, true, Thread.currentThread().getContextClassLoader());    } catch (ClassNotFoundException e) {        throw new RuntimeException(e);    }}
0
public void testStarted(Description description)
{    StopWatch sw = new StopWatch();    sw.start();    testTimers.put(description, sw);}
0
public void testFinished(Description desc)
{    StopWatch sw = testTimers.get(desc);    sw.stop();    logLines.add(desc.getClassName() + "." + desc.getMethodName() + "\t" + sw.getNanoTime());}
0
public void testRunFinished(Result result) throws Exception
{    Files.write(Paths.get("unit-test-perf.log"), logLines);}
0
private static void initializeManager(String[] args)
{    if (args.length >= 3) {        try {            System.out.println("Using initializeProperties() from " + args[2]);            UnitTestManager um = (UnitTestManager) Class.forName(args[2]).getDeclaredConstructor().newInstance();            System.out.println("Setting up initial properties using: " + args[1]);            um.initializeProperties(args[1]);        } catch (IllegalArgumentException | ReflectiveOperationException | SecurityException e) {            System.out.println("Couldn't create: " + args[2]);            e.printStackTrace();        }    }}
0
private static List<String> findJMeterJUnitTests(String searchPathString) throws IOException
{    final String[] searchPaths = JOrphanUtils.split(searchPathString, ",");    return ClassFinder.findClasses(searchPaths, new JunitTestFilter());}
0
public boolean accept(String className)
{    boolean isJunitTest = false;    try {        Class<?> clazz = Class.forName(className, false, contextClassLoader);        if (!clazz.isAnnotation() && !clazz.isEnum() && !clazz.isInterface() && !Modifier.isAbstract(clazz.getModifiers())) {            isJunitTest = TestCase.class.isAssignableFrom(clazz) ||             Specification.class.isAssignableFrom(clazz) || checkForJUnitAnnotations(clazz);        }    } catch (UnsupportedClassVersionError | ClassNotFoundException | NoClassDefFoundError e) {            }    return isJunitTest;}
1
private boolean checkForJUnitAnnotations(Class<?> clazz)
{    Class<?> classToCheck = clazz;    while (classToCheck != null) {        if (checkForTestAnnotationOnMethods(classToCheck)) {            return true;        }        classToCheck = classToCheck.getSuperclass();    }    return false;}
0
private boolean checkForTestAnnotationOnMethods(Class<?> clazz)
{    return Arrays.stream(clazz.getDeclaredMethods()).flatMap(method -> Arrays.stream(method.getAnnotations())).map(Annotation::annotationType).anyMatch(org.junit.Test.class::isAssignableFrom);}
0
public String toString()
{    return "JunitTestFilter []";}
0
public void test1() throws Exception
{    XMLBuffer xb = new XMLBuffer();    xb.openTag("start");    assertEquals("<start></start>\n", xb.toString());}
0
public void test2() throws Exception
{    XMLBuffer xb = new XMLBuffer();    xb.tag("start", "now");    assertEquals("<start>now</start>\n", xb.toString());}
0
public void test3() throws Exception
{    XMLBuffer xb = new XMLBuffer();    xb.openTag("abc");    xb.closeTag("abc");    assertEquals("<abc></abc>\n", xb.toString());}
0
public void test4() throws Exception
{    XMLBuffer xb = new XMLBuffer();    xb.openTag("abc");    try {        xb.closeTag("abcd");        fail("Should have caused IllegalArgumentException");    } catch (IllegalArgumentException e) {    }}
0
private String nextName(GenericController c)
{    Sampler s = c.next();    String n;    if (s == null) {        return null;    }    n = s.getName();    return n;}
0
public void test() throws Exception
{    runSimpleTests("", "zero");}
0
public void test0() throws Exception
{    runSimpleTests("0", "zero");}
0
public void test1() throws Exception
{    runSimpleTests("1", "one");    runSimpleTests(" 1 ", "one");        runSimpleTests("one", "one");        runSimpleTests("one ", "one");}
0
public void test2() throws Exception
{    runSimpleTests("2", "two");        runSimpleTests("two", "two");}
0
public void test3() throws Exception
{    runSimpleTests("3", "three");        runSimpleTests("three", "three");}
0
public void test4() throws Exception
{    runSimpleTests("4", "zero");}
0
public void testX() throws Exception
{        runSimpleTests("X", null);        runSimpleTest2("X", "one", "Default");}
0
private void runSimpleTests(String cond, String exp) throws Exception
{    runSimpleTest(cond, exp);    runSimpleTest2(cond, exp, "one");}
0
private void runSimpleTest(String cond, String exp) throws Exception
{    GenericController controller = new GenericController();    SwitchController switch_cont = new SwitchController();    switch_cont.setSelection(cond);    controller.addTestElement(new TestSampler("before"));    controller.addTestElement(switch_cont);    switch_cont.addTestElement(new TestSampler("zero"));    switch_cont.addTestElement(new TestSampler("one"));    switch_cont.addTestElement(new TestSampler("two"));    switch_cont.addTestElement(new TestSampler("three"));    controller.addTestElement(new TestSampler("after"));    controller.initialize();    for (int i = 1; i <= 3; i++) {        assertEquals("Loop " + i, "before", nextName(controller));        if (exp != null) {            assertEquals("Loop " + i, exp, nextName(controller));        }        assertEquals("Loop " + i, "after", nextName(controller));        assertNull(nextName(controller));    }}
0
private void runSimpleTest2(String cond, String exp, String sub1Name) throws Exception
{    GenericController controller = new GenericController();    GenericController sub_1 = new GenericController();    GenericController sub_2 = new GenericController();    SwitchController switch_cont = new SwitchController();    switch_cont.setSelection(cond);    switch_cont.addTestElement(new TestSampler("zero"));    switch_cont.addTestElement(sub_1);    sub_1.addTestElement(new TestSampler("one"));    sub_1.setName(sub1Name);    switch_cont.addTestElement(new TestSampler("two"));    switch_cont.addTestElement(sub_2);    sub_2.addTestElement(new TestSampler("three"));    sub_2.setName("three");    controller.addTestElement(new TestSampler("before"));    controller.addTestElement(switch_cont);    controller.addTestElement(new TestSampler("after"));    controller.initialize();    for (int i = 1; i <= 3; i++) {        assertEquals("Loop=" + i, "before", nextName(controller));        if (exp != null) {            assertEquals("Loop=" + i, exp, nextName(controller));        }        assertEquals("Loop=" + i, "after", nextName(controller));        assertNull("Loop=" + i, nextName(controller));    }}
0
public void testTest2() throws Exception
{    runTest2("", new String[] { "zero" });    runTest2("0", new String[] { "zero" });    runTest2("7", new String[] { "zero" });    runTest2("5", new String[] { "zero" });    runTest2("4", new String[] { "six" });    runTest2("4 ", new String[] { "six" });    runTest2("3", new String[] { "five" });    runTest2("1", new String[] { "one", "two" });    runTest2("2", new String[] { "three", "four" });}
0
private void runTest2(String cond, String[] exp) throws Exception
{    int loops = 3;    LoopController controller = new LoopController();    controller.setLoops(loops);    controller.setContinueForever(false);    GenericController sub_1 = new GenericController();    GenericController sub_2 = new GenericController();    SwitchController switch_cont = new SwitchController();    switch_cont.setSelection(cond);    switch_cont.addTestElement(new TestSampler("zero"));    switch_cont.addTestElement(sub_1);    sub_1.addTestElement(new TestSampler("one"));    sub_1.addTestElement(new TestSampler("two"));    switch_cont.addTestElement(sub_2);    sub_2.addTestElement(new TestSampler("three"));    sub_2.addTestElement(new TestSampler("four"));    switch_cont.addTestElement(new TestSampler("five"));    switch_cont.addTestElement(new TestSampler("six"));    controller.addTestElement(new TestSampler("before"));    controller.addTestElement(switch_cont);    controller.addTestElement(new TestSampler("after"));    controller.setRunningVersion(true);    sub_1.setRunningVersion(true);    sub_2.setRunningVersion(true);    switch_cont.setRunningVersion(true);    controller.initialize();    for (int i = 1; i <= 3; i++) {        assertEquals("Loop:" + i, "before", nextName(controller));        for (String anExp : exp) {            assertEquals("Loop:" + i, anExp, nextName(controller));        }        assertEquals("Loop:" + i, "after", nextName(controller));    }    assertNull("Loops:" + loops, nextName(controller));}
0
public void testFunction() throws Exception
{    JMeterContext jmctx = JMeterContextService.getContext();    Map<String, String> variables = new HashMap<>();    ReplaceStringWithFunctions transformer = new ReplaceStringWithFunctions(new CompoundVariable(), variables);    jmctx.setVariables(new JMeterVariables());    JMeterVariables jmvars = jmctx.getVariables();    jmvars.put("VAR", "100");    StringProperty prop = new StringProperty(SwitchController.SWITCH_VALUE, "${__counter(TRUE,VAR)}");    JMeterProperty newProp = transformer.transformValue(prop);    newProp.setRunningVersion(true);    GenericController controller = new GenericController();    SwitchController switch_cont = new SwitchController();    switch_cont.setProperty(newProp);    controller.addTestElement(new TestSampler("before"));    controller.addTestElement(switch_cont);    switch_cont.addTestElement(new TestSampler("0"));    switch_cont.addTestElement(new TestSampler("1"));    switch_cont.addTestElement(new TestSampler("2"));    switch_cont.addTestElement(new TestSampler("3"));    controller.addTestElement(new TestSampler("after"));    controller.initialize();    assertEquals("100", jmvars.get("VAR"));    for (int i = 1; i <= 3; i++) {        assertEquals("Loop " + i, "before", nextName(controller));        assertEquals("Loop " + i, "" + i, nextName(controller));        assertEquals("Loop " + i, "" + i, jmvars.get("VAR"));        assertEquals("Loop " + i, "after", nextName(controller));        assertNull(nextName(controller));    }    int i = 4;    assertEquals("Loop " + i, "before", nextName(controller));    assertEquals("Loop " + i, "0", nextName(controller));    assertEquals("Loop " + i, "" + i, jmvars.get("VAR"));    assertEquals("Loop " + i, "after", nextName(controller));    assertNull(nextName(controller));    assertEquals("4", jmvars.get("VAR"));}
0
public Description getDescription()
{    return Description.createTestDescription(getClass(), getName() + (funcItem != null ? " " + funcItem.getClass() : null));}
0
private static Test suiteFunctions() throws Exception
{    TestSuite suite = new TestSuite("Functions");    for (Object item : JMeterTest.getObjects(Function.class)) {        if (item.getClass().equals(CompoundVariable.class)) {            continue;        }        TestSuite ts = new TestSuite(item.getClass().getName());        ts.addTest(new ComponentReferenceFunctionTest("runFunction", (Function) item));        ts.addTest(new ComponentReferenceFunctionTest("runFunction2", (Function) item));        suite.addTest(ts);    }    return suite;}
0
private Element getBodyFromXMLDocument(InputStream stream) throws ParserConfigurationException, SAXException, IOException
{    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();    dbf.setIgnoringElementContentWhitespace(true);    dbf.setIgnoringComments(true);    DocumentBuilder db = dbf.newDocumentBuilder();    Document doc = db.parse(new InputSource(stream));    org.w3c.dom.Element root = doc.getDocumentElement();    org.w3c.dom.Element body = (org.w3c.dom.Element) root.getElementsByTagName("body").item(0);    return body;}
0
public void createFunctionSet() throws Exception
{    funcTitles = new HashMap<>(20);    String compref = "../xdocs/usermanual/functions.xml";    try (InputStream stream = new FileInputStream(findTestFile(compref))) {        Element body = getBodyFromXMLDocument(stream);        Element section = (Element) body.getElementsByTagName("section").item(0);        NodeList subSections = section.getElementsByTagName("subsection");        for (int i = 0; i < subSections.getLength(); i++) {            NodeList components = ((Element) subSections.item(i)).getElementsByTagName("component");            for (int j = 0; j < components.getLength(); j++) {                org.w3c.dom.Element comp = (org.w3c.dom.Element) components.item(j);                funcTitles.put(comp.getAttribute("name"), Boolean.FALSE);                String tag = comp.getAttribute("tag");                if (!StringUtils.isEmpty(tag)) {                    funcTitles.put(tag, Boolean.FALSE);                }            }        }    }}
0
public void checkFunctionSet() throws Exception
{    assertEquals("Should not have any names left over", 0, JMeterTest.scanprintMap(funcTitles, "Function"));}
0
public void runFunction() throws Exception
{    if (funcTitles.size() > 0) {        String title = funcItem.getReferenceKey();        boolean ct = funcTitles.containsKey(title);        if (ct) {                        funcTitles.put(title, Boolean.TRUE);        }                if (!title.contains("(ALPHA") && !title.contains("(EXPERIMENTAL")) {                        String s = "functions.xml needs '" + title + "' entry for " + funcItem.getClass().getName();            if (!ct) {                                            }            assertTrue(s, ct);        }    }}
1
public void runFunction2() throws Exception
{    for (Object o : funcItem.getArgumentDesc()) {        assertTrue("Description must be a String", o instanceof String);        assertFalse("Description must not start with [refkey", ((String) o).startsWith("[refkey"));    }}
0
public static Test suite() throws Exception
{    TestSuite suite = new TestSuite("ComponentReferenceFunctionTest");    suite.addTest(new ComponentReferenceFunctionTest("createFunctionSet"));    suite.addTest(suiteFunctions());    suite.addTest(new ComponentReferenceFunctionTest("checkFunctionSet"));    return suite;}
0
public boolean accept(File dir, String name)
{    return name.endsWith(".jmx");}
0
public Description getDescription()
{    return Description.createTestDescription(getClass(), getName() + " " + testFile + " " + parent);}
0
public static TestSuite suite()
{    TestSuite suite = new TestSuite("Load Test");    scanFiles(suite, testfiledir);    scanFiles(suite, demofiledir);    return suite;}
0
private static void scanFiles(TestSuite suite, File parent)
{    String dir = parent.getName();    File[] testFiles = parent.listFiles(jmxFilter);    if (testFiles == null) {        fail("*.jmx files for test should be present in folder " + parent);    }    for (File file : testFiles) {        suite.addTest(new TestLoad("checkTestFile", file, dir));    }}
0
public void checkTestFile() throws Exception
{    HashTree tree = null;    try {        tree = getTree(testFile);    } catch (Exception e) {        fail(parent + ": " + testFile.getName() + " caused " + e);    }    assertTree(tree);}
0
private void assertTree(HashTree tree) throws Exception
{    assertNotNull(parent + ": " + testFile.getName() + " caused null tree: ", tree);    final Object object = tree.getArray()[0];    final String name = testFile.getName();    if (!(object instanceof org.apache.jmeter.testelement.TestPlan) && !notTestPlan.contains(name)) {        fail(parent + ": " + name + " tree should be TestPlan, but is " + object.getClass().getName());    }}
0
private HashTree getTree(File f) throws Exception
{    HashTree tree = SaveService.loadTree(f);    return tree;}
0
public Description getDescription()
{    StringBuilder sb = new StringBuilder();    sb.append(getName());    if (guiItem instanceof TestBeanGUI) {        sb.append(" ").append(guiItem.toString());    } else if (guiItem != null) {        sb.append(" ").append(guiItem.getClass().getName());    } else if (serObj != null) {        sb.append(" ").append(serObj.getClass().getName());    }    return Description.createTestDescription(getClass(), sb.toString());}
0
public static Test suite() throws Exception
{    TestSuite suite = new TestSuite("JMeterTest");        JMeterUtils.setLocale(TEST_LOCALE);    Locale.setDefault(TEST_LOCALE);        suite.addTest(new JMeterTest("readAliases"));    suite.addTest(new JMeterTest("createTitleSet"));    suite.addTest(new JMeterTest("createTagSet"));    suite.addTest(suiteGUIComponents());    suite.addTest(suiteSerializableElements());    suite.addTest(suiteBeanComponents());    suite.addTest(new JMeterTest("checkGuiSet"));        suite.addTest(new JMeterTest("resetLocale"));    return suite;}
0
public void resetLocale()
{    JMeterUtils.setLocale(DEFAULT_LOCALE);    Locale.setDefault(DEFAULT_LOCALE);}
0
public void createTitleSet() throws Exception
{    guiTitles = new HashMap<>(90);    String compref = "../xdocs/usermanual/component_reference.xml";    try (InputStream stream = new FileInputStream(findTestFile(compref))) {        org.w3c.dom.Element body = getBodyFromXMLDocument(stream);        NodeList sections = body.getElementsByTagName("section");        for (int i = 0; i < sections.getLength(); i++) {            org.w3c.dom.Element section = (org.w3c.dom.Element) sections.item(i);            NodeList components = section.getElementsByTagName("component");            for (int j = 0; j < components.getLength(); j++) {                org.w3c.dom.Element comp = (org.w3c.dom.Element) components.item(j);                String nm = comp.getAttribute("name");                if (!nm.equals("SSL Manager")) {                                        guiTitles.put(nm.replace(' ', '_'), Boolean.FALSE);                }            }        }    }        guiTitles.put("Example Sampler", Boolean.FALSE);}
0
private Element getBodyFromXMLDocument(InputStream stream) throws ParserConfigurationException, SAXException, IOException
{    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();    dbf.setIgnoringElementContentWhitespace(true);    dbf.setIgnoringComments(true);    DocumentBuilder db = dbf.newDocumentBuilder();    Document doc = db.parse(new InputSource(stream));    org.w3c.dom.Element root = doc.getDocumentElement();    org.w3c.dom.Element body = (org.w3c.dom.Element) root.getElementsByTagName("body").item(0);    return body;}
0
public void createTagSet() throws Exception
{    guiTags = new HashMap<>(90);    String compref = "../xdocs/usermanual/component_reference.xml";    try (InputStream stream = new FileInputStream(findTestFile(compref))) {        org.w3c.dom.Element body = getBodyFromXMLDocument(stream);        NodeList sections = body.getElementsByTagName("section");        for (int i = 0; i < sections.getLength(); i++) {            org.w3c.dom.Element section = (org.w3c.dom.Element) sections.item(i);            NodeList components = section.getElementsByTagName("component");            for (int j = 0; j < components.getLength(); j++) {                org.w3c.dom.Element comp = (org.w3c.dom.Element) components.item(j);                String tag = comp.getAttribute("tag");                if (!StringUtils.isEmpty(tag)) {                    guiTags.put(tag, Boolean.FALSE);                }            }        }    }}
0
public static int scanprintMap(Map<String, Boolean> m, String t)
{    Set<String> s = m.keySet();    if (s.isEmpty()) {        return 0;    }    int unseen = 0;    for (String key : s) {        if (!m.get(key).equals(Boolean.TRUE)) {            if (            unseen == 0) {                System.out.println("\nNames remaining in " + t + " Map:");            }            unseen++;            System.out.println(key);        }    }    return unseen;}
0
public void checkGuiSet() throws Exception
{        guiTitles.remove("Example Sampler");        guiTitles.remove("Sample_Result_Save_Configuration");    assertEquals("Should not have any names left over, check name of components in EN (default) Locale, " + "which must match name attribute of component, check java.awt.HeadlessException errors before, we are running with '-Djava.awt.headless=" + System.getProperty("java.awt.headless") + "'", 0, scanprintMap(guiTitles, "GUI"));}
0
private static Test suiteGUIComponents() throws Exception
{    TestSuite suite = new TestSuite("GuiComponents");    for (Object o : getObjects(JMeterGUIComponent.class)) {        JMeterGUIComponent item = (JMeterGUIComponent) o;        if (item instanceof JMeterTreeNode) {            System.out.println("o.a.j.junit.JMeterTest INFO: JMeterGUIComponent: skipping all tests  " + item.getClass().getName());            continue;        }        if (item instanceof ObsoleteGui) {            continue;        }        TestSuite ts = new TestSuite(item.getClass().getName());        ts.addTest(new JMeterTest("GUIComponents1", item));        if (item instanceof TestBeanGUI) {            System.out.println("o.a.j.junit.JMeterTest INFO: JMeterGUIComponent: skipping some tests " + item.getClass().getName());        } else {            ts.addTest(new JMeterTest("GUIComponents2", item));            ts.addTest(new JMeterTest("runGUITitle", item));        }        suite.addTest(ts);    }    return suite;}
0
private static Test suiteBeanComponents() throws Exception
{    TestSuite suite = new TestSuite("BeanComponents");    for (Object o : getObjects(TestBean.class)) {        Class<?> c = o.getClass();        try {            JMeterGUIComponent item = new TestBeanGUI(c);            TestSuite ts = new TestSuite(item.getClass().getName());            ts.addTest(new JMeterTest("GUIComponents2", item));            ts.addTest(new JMeterTest("runGUITitle", item));            suite.addTest(ts);        } catch (IllegalArgumentException e) {            System.out.println("o.a.j.junit.JMeterTest Cannot create test for " + c.getName() + " " + e);            e.printStackTrace(System.out);        }    }    return suite;}
0
public void runGUITitle() throws Exception
{    if (guiTitles.size() > 0) {        String title = guiItem.getDocAnchor();        boolean ct = guiTitles.containsKey(title);        if (ct) {                        guiTitles.put(title, Boolean.TRUE);        }        String name = guiItem.getClass().getName();        if (                title != null && title.length() > 0 && !title.toUpperCase(Locale.ENGLISH).contains("(ALPHA") && !title.toUpperCase(Locale.ENGLISH).contains("(BETA") && !title.toUpperCase(Locale.ENGLISH).contains("(DEPRECATED") &&         !title.matches("Example\\d+") && !name.startsWith("org.apache.jmeter.examples.")) {                        String s = "component_reference.xml needs '" + title + "' anchor for " + name;            if (!ct) {                                            }            assertTrue(s, ct);        }    }}
1
public void GUIComponents1() throws Exception
{    String name = guiItem.getClass().getName();    assertEquals("Name should be same as static label for " + name, guiItem.getStaticLabel(), guiItem.getName());    if (name.startsWith("org.apache.jmeter.examples.")) {        return;    }    if (!name.endsWith("TestBeanGUI")) {        try {            String label = guiItem.getLabelResource();            assertNotNull("Label should not be null for " + name, label);            assertTrue("Label should not be empty for " + name, label.length() > 0);            assertFalse("'" + label + "' should be in resource file for " + name, JMeterUtils.getResString(label).startsWith(JMeterUtils.RES_KEY_PFX));        } catch (UnsupportedOperationException uoe) {                    }    }    checkElementAlias(guiItem);}
1
public void GUIComponents2() throws Exception
{    String name = guiItem.getClass().getName();        TestElement el = guiItem.createTestElement();    assertNotNull(name + ".createTestElement should be non-null ", el);    assertEquals("GUI-CLASS: Failed on " + name, name, el.getPropertyAsString(TestElement.GUI_CLASS));    assertEquals("NAME: Failed on " + name, guiItem.getName(), el.getName());    assertEquals("TEST-CLASS: Failed on " + name, el.getClass().getName(), el.getPropertyAsString(TestElement.TEST_CLASS));    TestElement el2 = guiItem.createTestElement();    el.setName("hey, new name!:");    el.setProperty("NOT", "Shouldn't be here");    if (!(guiItem instanceof UnsharedComponent)) {        assertEquals("SHARED: Failed on " + name, "", el2.getPropertyAsString("NOT"));    }        ByteArrayOutputStream bos = new ByteArrayOutputStream();    SaveService.saveElement(el, bos);    ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());    bos.close();    el = (TestElement) SaveService.loadElement(bis);    bis.close();    assertNotNull("Load element failed on: " + name, el);    guiItem.configure(el);    assertEquals("CONFIGURE-TEST: Failed on " + name, el.getName(), guiItem.getName());    guiItem.modifyTestElement(el2);    assertEquals("Modify Test: Failed on " + name, "hey, new name!:", el2.getName());}
1
private static Test suiteSerializableElements() throws Exception
{    TestSuite suite = new TestSuite("SerializableElements");    for (Object o : getObjects(Serializable.class)) {        Serializable serObj = (Serializable) o;        if (serObj.getClass().getName().endsWith("_Stub")) {            continue;        }        TestSuite ts = new TestSuite(serObj.getClass().getName());        ts.addTest(new JMeterTest("runSerialTest", serObj));        suite.addTest(ts);    }    return suite;}
0
public void runSerialTest() throws Exception
{    if (!(serObj instanceof Component)) {                try {            ByteArrayOutputStream bytes = new ByteArrayOutputStream();            ObjectOutputStream out = new ObjectOutputStream(bytes);            out.writeObject(serObj);            out.close();            ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(bytes.toByteArray()));            Object readObject = in.readObject();            in.close();            assertEquals("deserializing class: " + serObj.getClass().getName(), serObj.getClass(), readObject.getClass());        } catch (Exception e) {            fail("serialization of " + serObj.getClass().getName() + " failed: " + e);        }    }}
0
public void readAliases() throws Exception
{    nameMap = SaveService.loadProperties();    assertNotNull("SaveService nameMap (saveservice.properties) should not be null", nameMap);}
0
private void checkElementAlias(Object item)
{    String name = item.getClass().getName();    boolean contains = nameMap.values().contains(name);    if (!contains) {        fail("SaveService nameMap (saveservice.properties) should contain " + name);    }}
0
public static Collection<Object> getObjects(Class<?> extendsClass) throws Exception
{    String exName = extendsClass.getName();    Object myThis = "";    Iterator<String> classes = ClassFinder.findClassesThatExtend(JMeterUtils.getSearchPaths(), new Class[] { extendsClass }).iterator();    List<Object> objects = new LinkedList<>();    String n = "";    boolean caughtError = true;    Throwable caught = null;    try {        while (classes.hasNext()) {            n = classes.next();                        if (n.endsWith("RemoteJMeterEngineImpl")) {                                continue;            }            if (n.endsWith("RemoteSampleListenerImpl")) {                                continue;            }            caught = instantiateClass(exName, myThis, objects, n, caught);        }        caughtError = false;    } finally {        if (caughtError) {            System.out.println("Last class=" + n);            System.out.println("objects.size=" + objects.size());            System.out.println("Last error=" + caught);        }    }    if (objects.isEmpty()) {        System.out.println("No classes found that extend " + exName + ". Check the following:");        System.out.println("Search paths are:");        String[] ss = JMeterUtils.getSearchPaths();        for (String s : ss) {            System.out.println(s);        }        if (!classPathShown) {                        System.out.println("Class path is:");            String cp = System.getProperty("java.class.path");            String[] classPathElements = JOrphanUtils.split(cp, java.io.File.pathSeparator);            for (String classPathElement : classPathElements) {                System.out.println(classPathElement);            }            classPathShown = true;        }    }    return objects;}
0
private static Throwable instantiateClass(final String extendsClassName, final Object myThis, final List<Object> objects, final String className, final Throwable oldCaught) throws Exception
{    Throwable caught = oldCaught;    try {        Class<?> c = Class.forName(className);        try {                        objects.add(c.newInstance());        } catch (InstantiationException e) {            caught = e;            try {                                objects.add(c.getConstructor(new Class[] { Object.class }).newInstance(new Object[] { myThis }));            } catch (NoSuchMethodException f) {                                if (!Enum.class.isAssignableFrom(c)) {                                        System.out.println("o.a.j.junit.JMeterTest WARN: " + extendsClassName + ": NoSuchMethodException  " + className + ", missing empty Constructor or Constructor with Object parameter");                }            }        }    } catch (NoClassDefFoundError e) {                System.out.println("o.a.j.junit.JMeterTest WARN: " + extendsClassName + ": NoClassDefFoundError " + className + ":" + e.getMessage());        e.printStackTrace(System.out);    } catch (IllegalAccessException e) {        caught = e;        System.out.println("o.a.j.junit.JMeterTest WARN: " + extendsClassName + ": IllegalAccessException " + className + ":" + e.getMessage());        e.printStackTrace(System.out);        } catch (HeadlessException | ExceptionInInitializerError e) {                caught = e;        System.out.println("o.a.j.junit.JMeterTest Error creating " + className + " " + e.toString());    } catch (Exception e) {        caught = e;        if (e instanceof RemoteException) {                        System.out.println("o.a.j.junit.JMeterTest WARN: " + "Error creating " + className + " " + e.toString());        } else {            throw new Exception("Error creating " + className, e);        }    }    return caught;}
0
public void testUserProperties() throws Exception
{    Properties props = loadProps(new File(JMeterUtils.getJMeterBinDir(), "user.properties"));    assertTrue("user.properties should not contain any enabled properties", props.isEmpty());}
0
public void testDefaultProperties() throws Exception
{    Properties jmeter = loadProps(new File(JMeterUtils.getJMeterBinDir(), "jmeter.properties"));    Properties report = loadProps(new File(JMeterUtils.getJMeterBinDir(), "reportgenerator.properties"));    Enumeration<?> jmeterNames = jmeter.propertyNames();    while (jmeterNames.hasMoreElements()) {        final Object key = jmeterNames.nextElement();        assertFalse("reportgenerator should not contain the jmeter key " + key, report.containsKey(key));    }    Enumeration<?> reportNames = report.propertyNames();    while (reportNames.hasMoreElements()) {        final Object key = reportNames.nextElement();        assertFalse("jmeter should not contain the reportgenerator key " + key, jmeter.containsKey(key));    }}
0
private static Properties loadProps(File file) throws Exception
{    Properties props = new Properties();    try (FileInputStream inStream = new FileInputStream(file)) {        props.load(inStream);    }    return props;}
0
public void testPropfile1() throws Exception
{    assertEquals("Property Version mismatch, ensure you update SaveService#PROPVERSION field with _version property value from saveservice.properties", SaveService.PROPVERSION, SaveService.getPropertyVersion());}
0
public void testPropfile2() throws Exception
{    assertEquals("Property File Version mismatch, ensure you update SaveService#FILEVERSION field with sha1 of saveservice.properties without newline", SaveService.FILEVERSION, SaveService.getFileVersion());}
0
public void testLoadAndSave() throws Exception
{        boolean failed = false;    for (final String fileName : FILES) {        final File testFile = findTestFile("testfiles/" + fileName);        final File savedFile = findTestFile("testfiles/Saved" + fileName);        failed |= loadAndSave(testFile, fileName, true, savedFile);    }    for (final String fileName : FILES_LINES) {        final File testFile = findTestFile("testfiles/" + fileName);        final File savedFile = findTestFile("testfiles/Saved" + fileName);        failed |= loadAndSave(testFile, fileName, false, savedFile);    }    if (    failed) {        fail("One or more failures detected");    }}
0
private boolean loadAndSave(File testFile, String fileName, boolean checkSize, File savedFile) throws Exception
{    boolean failed = false;    final FileStats origStats = getFileStats(testFile);    final FileStats savedStats = getFileStats(savedFile);    ByteArrayOutputStream out = new ByteArrayOutputStream(1000000);    try {        HashTree tree = SaveService.loadTree(testFile);        SaveService.saveTree(tree, out);    } finally {                out.close();    }    final FileStats compareStats = savedStats == FileStats.NO_STATS ? origStats : savedStats;    final FileStats outputStats;    try (ByteArrayInputStream ins = new ByteArrayInputStream(out.toByteArray());        Reader insReader = new InputStreamReader(ins);        BufferedReader bufferedReader = new BufferedReader(insReader)) {        outputStats = computeFileStats(bufferedReader);    }        if (checkSize && !compareStats.isSameSize(outputStats) || !compareStats.hasSameLinesCount(outputStats)) {        failed = true;        System.out.println();        System.out.println("Loading file testfiles/" + fileName + " and " + "saving it back changes its size from " + compareStats.size + " to " + outputStats.size + ".");        if (!origStats.hasSameLinesCount(outputStats)) {            System.out.println("Number of lines changes from " + compareStats.lines + " to " + outputStats.lines);        }        if (saveOut) {            final File outFile = findTestFile("testfiles/" + fileName + ".out");            System.out.println("Write " + outFile);            try (FileOutputStream outf = new FileOutputStream(outFile)) {                outf.write(out.toByteArray());            }            System.out.println("Wrote " + outFile);        }    }        return failed;}
0
private FileStats getFileStats(File testFile) throws IOException, FileNotFoundException
{    if (testFile == null || !testFile.exists()) {        return FileStats.NO_STATS;    }    try (FileReader fileReader = new FileReader(testFile);        BufferedReader bufferedReader = new BufferedReader(fileReader)) {        return computeFileStats(bufferedReader);    }}
0
private FileStats computeFileStats(BufferedReader br) throws IOException
{    int length = 0;    int lines = 0;    String line;    while ((line = br.readLine()) != null) {        lines++;        if (!line.startsWith("<jmeterTestPlan")) {            length += line.length();        }    }    return new FileStats(length, lines);}
0
public void testLoad() throws Exception
{    for (String fileName : FILES_LOAD_ONLY) {        File file = findTestFile("testfiles/" + fileName);        try {            HashTree tree = SaveService.loadTree(file);            assertNotNull(tree);        } catch (IllegalArgumentException ex) {            ex.addSuppressed(new Throwable("fileName=" + file.getAbsolutePath()));            throw ex;        }    }}
0
public void testClasses()
{    List<String> missingClasses = SaveService.checkClasses();    if (missingClasses.size() > 0) {        fail("One or more classes not found:" + missingClasses);    }}
0
public boolean isSameSize(FileStats other)
{    if (other == null) {        return false;    }    return size == other.size;}
0
public boolean hasSameLinesCount(FileStats other)
{    if (other == null) {        return false;    }    return lines == other.lines;}
0
public Description getDescription()
{    return Description.createTestDescription(getClass(), getName() + " " + testLocale + " " + testBeanClass);}
0
public void setUp()
{    if (testLocale == null) {        return;    }    JMeterUtils.setLocale(testLocale);    Introspector.flushFromCaches(testBeanClass);    try {        beanInfo = Introspector.getBeanInfo(testBeanClass);        bundle = (ResourceBundle) beanInfo.getBeanDescriptor().getValue(GenericTestBeanCustomizer.RESOURCE_BUNDLE);    } catch (IntrospectionException e) {                        throw new Error(e.toString(), e);    }    if (bundle == null) {        throw new Error("This can't happen!");    }}
1
public void tearDown()
{    JMeterUtils.setLocale(Locale.getDefault());}
0
public void runTest() throws Throwable
{    if (testLocale == null) {        super.runTest();        return;    }    if (bundle == defaultBundle) {        checkAllNecessaryKeysPresent();    } else {        checkNoInventedKeys();    }}
0
public void checkNoInventedKeys()
{        for (Enumeration<String> keys = bundle.getKeys(); keys.hasMoreElements(); ) {        String key = keys.nextElement();        defaultBundle.getString(key);        }}
0
public void checkAllNecessaryKeysPresent()
{            String dn = defaultBundle.getString("displayName").toUpperCase(Locale.ENGLISH);        if (dn.contains("(ALPHA") || dn.contains("(EXPERIMENTAL")) {        return;    }        PropertyDescriptor[] descriptors = beanInfo.getPropertyDescriptors();    for (PropertyDescriptor descriptor : descriptors) {                if (descriptor.isHidden() || descriptor.getReadMethod() == null || descriptor.getWriteMethod() == null) {            continue;        }                if (TestElement.class.isAssignableFrom(descriptor.getPropertyType()) && descriptor.getPropertyEditorClass() == null) {            continue;        }                String name = descriptor.getName();        bundle.getString(name + ".displayName");        String group = (String) descriptor.getValue(GenericTestBeanCustomizer.GROUP);        if (group != null) {            bundle.getString(group + ".displayName");        }    }}
0
public static Test suite() throws Exception
{    TestSuite suite = new TestSuite("Bean Resource Test Suite");    List<String> testBeanClassNames = ClassFinder.findClassesThatExtend(JMeterUtils.getSearchPaths(), new Class[] { TestBean.class });    boolean errorDetected = false;    JMeterUtils.setLocale(defaultLocale);    String defaultLocaleId = defaultLocale.toString();    for (String className : testBeanClassNames) {        Class<?> testBeanClass = Class.forName(className);        ResourceBundle defaultBundle;        try {            defaultBundle = (ResourceBundle) Introspector.getBeanInfo(testBeanClass).getBeanDescriptor().getValue(GenericTestBeanCustomizer.RESOURCE_BUNDLE);        } catch (IntrospectionException e) {                                    throw new Error(e.toString(), e);        }        if (defaultBundle == null) {            if (className.startsWith("org.apache.jmeter.examples.")) {                                continue;            }            errorDetected = true;                        continue;        }        suite.addTest(new PackageTest(testBeanClass, defaultLocale, defaultBundle));        String[] languages = JMeterMenuBar.getLanguages();        for (String lang : languages) {            final String[] language = lang.split("_");            if (language.length == 1) {                Locale locale = new Locale(language[0]);                if (locale.toString().equals(defaultLocaleId)) {                    continue;                }                suite.addTest(new PackageTest(testBeanClass, locale, defaultBundle));            } else if (language.length == 2) {                Locale locale = new Locale(language[0], language[1]);                if (locale.toString().equals(defaultLocaleId)) {                    continue;                }                suite.addTest(new PackageTest(testBeanClass, locale, defaultBundle));            }        }    }    if (errorDetected) {        suite.addTest(new PackageTest("errorDetected"));    }    return suite;}
1
public void errorDetected()
{    fail("One or more errors detected - see log file");}
0
public Description getDescription()
{    return Description.createTestDescription(getClass(), getName() + " " + testItem.getClass());}
0
public static Test suite() throws Exception
{    TestSuite suite = new TestSuite("TestElements");    for (Object o : JMeterTest.getObjects(TestElement.class)) {        TestElement item = (TestElement) o;        suite.addTest(new TestElementTest("runTestElement", item));    }    return suite;}
0
public void runTestElement() throws Exception
{    checkElementCloning(testItem);    String name = testItem.getClass().getName();    assertTrue(name + " must implement Serializable", testItem instanceof Serializable);    if (name.startsWith("org.apache.jmeter.examples.")) {        return;    }    if (name.equals("org.apache.jmeter.control.TransactionSampler")) {                return;    }    checkElementAlias(testItem);}
0
private static void checkElementCloning(TestElement item)
{    TestElement clonedItem = (TestElement) item.clone();    cloneTesting(item, clonedItem);    PropertyIterator iter2 = item.propertyIterator();    while (iter2.hasNext()) {        JMeterProperty item2 = iter2.next();        assertEquals(item2.getStringValue(), clonedItem.getProperty(item2.getName()).getStringValue());        assertTrue(item2 != clonedItem.getProperty(item2.getName()));    }}
0
private static void cloneTesting(TestElement item, TestElement clonedItem)
{    assertTrue(item != clonedItem);    assertEquals("CLONE-SAME-CLASS: testing " + item.getClass().getName(), item.getClass().getName(), clonedItem.getClass().getName());}
0
private void checkElementAlias(Object item) throws IOException
{        Properties nameMap = SaveService.loadProperties();    assertNotNull("SaveService nameMap (saveservice.properties) should not be null", nameMap);    String name = item.getClass().getName();    boolean contains = nameMap.values().contains(name);    if (!contains) {        fail("SaveService nameMap (saveservice.properties) should contain " + name);    }}
0
private String getJMeterHome() throws Exception
{    JMeterTestUtils.setupJMeterHome();    String path = JMeterUtils.getJMeterHome() + "/lib";    return Paths.get(path).toRealPath().toString();}
0
public void setUp() throws Exception
{    libDirs = new String[] { getJMeterHome() };}
0
public void testFindClassesThatExtendStringArrayClassOfQArray() throws IOException
{    List<String> findClassesThatExtend = ClassFinder.findClassesThatExtend(libDirs, new Class<?>[] { Exception.class });    Assert.assertThat(findClassesThatExtend, CoreMatchers.hasItem(LoggingException.class.getName()));}
0
public void testFindClassesThatExtendStringArrayClassOfQArrayTrue() throws Exception
{    List<String> findClassesThatExtend = ClassFinder.findClassesThatExtend(libDirs, new Class<?>[] { Object.class }, true);    Assert.assertFalse(findClassesThatExtend.stream().filter(s -> s.contains("$")).collect(Collectors.toList()).isEmpty());}
0
public void testFindClassesThatExtendStringArrayClassOfQArrayFalse() throws Exception
{    List<String> findClassesThatExtend = ClassFinder.findClassesThatExtend(libDirs, new Class<?>[] { Exception.class }, false);    Assert.assertTrue(findClassesThatExtend.stream().filter(s -> s.contains("$")).collect(Collectors.toList()).isEmpty());    Assert.assertThat(findClassesThatExtend, CoreMatchers.hasItem(LoggingException.class.getName()));}
0
public void testFindClassesThatExtendStringArrayClassOfQArrayBooleanStringString() throws Exception
{    List<String> findClassesThatExtend = ClassFinder.findClassesThatExtend(libDirs, new Class<?>[] { Exception.class }, false, "org.apache.log", "core");    Assert.assertTrue(findClassesThatExtend.stream().filter(s -> s.contains("core")).collect(Collectors.toList()).isEmpty());    Assert.assertFalse(findClassesThatExtend.isEmpty());}
0
public void testFindClassesThatExtendStringArrayClassOfQArrayBooleanStringStringTrue() throws Exception
{    List<String> annotatedClasses = ClassFinder.findClassesThatExtend(libDirs, new Class<?>[] { java.beans.Transient.class }, false, null, null, true);    Assert.assertFalse(annotatedClasses.isEmpty());}
0
public void testFindAnnotatedClasses() throws Exception
{    @SuppressWarnings("unchecked")    List<String> annotatedClasses = ClassFinder.findAnnotatedClasses(libDirs, new Class[] { java.beans.Transient.class });    Assert.assertFalse(annotatedClasses.isEmpty());}
0
public void testFindAnnotatedInnerClasses() throws Exception
{    @SuppressWarnings("unchecked")    List<String> annotatedClasses = ClassFinder.findAnnotatedClasses(libDirs, new Class[] { java.lang.Deprecated.class }, true);    Assert.assertTrue(annotatedClasses.stream().anyMatch(s -> s.contains("$")));}
0
public void testFindClasses() throws IOException
{    Assert.assertFalse(ClassFinder.findClasses(libDirs, className -> true).isEmpty());}
0
public void testFindClassesNone() throws IOException
{    Assert.assertTrue(ClassFinder.findClasses(libDirs, className -> false).isEmpty());}
0
public void testSummaryReport() throws Exception
{    assertTrue("SummaryReport Functor", SummaryReport.testFunctors());}
0
public void testTableVisualizer() throws Exception
{    assertTrue("TableVisualizer Functor", TableVisualizer.testFunctors());}
0
public void testStatGraphVisualizer() throws Exception
{    assertTrue("StatGraphVisualizer Functor", StatGraphVisualizer.testFunctors());}
0
public void testStatVisualizer() throws Exception
{    assertTrue("StatVisualizer Functor", StatVisualizer.testFunctors());}
0
public void testArgumentsPanel() throws Exception
{    assertTrue("ArgumentsPanel Functor", ArgumentsPanel.testFunctors());}
0
public void testHTTPArgumentsPanel() throws Exception
{    assertTrue("HTTPArgumentsPanel Functor", HTTPArgumentsPanel.testFunctors());}
0
public void testLDAPArgumentsPanel() throws Exception
{    assertTrue("LDAPArgumentsPanel Functor", LDAPArgumentsPanel.testFunctors());}
0
public SampleResult sample(Entry e)
{    trace("sample()");    SampleResult res = new SampleResult();        boolean isOK = false;        String data = getData();    String response = null;    res.setSampleLabel(getTitle());    /*         * Perform the sampling         */        res.sampleStart();    try {                response = Thread.currentThread().getName();        /*             * Set up the sample result details             */        res.setSamplerData(data);        res.setResponseData(response, null);        res.setDataType(SampleResult.TEXT);        res.setResponseCodeOK();                res.setResponseMessage("OK");        isOK = true;    } catch (Exception ex) {                        res.setResponseCode("500");        res.setResponseMessage(ex.toString());    }        res.sampleEnd();    res.setSuccessful(isOK);    return res;}
1
private String getTitle()
{    return this.getName();}
0
public String getData()
{    return getPropertyAsString(DATA);}
0
private void trace(String s)
{    if (log.isDebugEnabled()) {            }}
1
public String getLabelResource()
{        return "example_title";}
0
public void configure(TestElement element)
{    data.setText(element.getPropertyAsString(ExampleSampler.DATA));    super.configure(element);}
0
public TestElement createTestElement()
{    ExampleSampler sampler = new ExampleSampler();    modifyTestElement(sampler);    return sampler;}
0
public void modifyTestElement(TestElement te)
{    te.clear();    configureTestElement(te);    te.setProperty(ExampleSampler.DATA, data.getText());}
0
private void init()
{            setLayout(new BorderLayout(0, 5));    setBorder(makeBorder());        add(makeTitlePanel(), BorderLayout.NORTH);        add(createDataPanel(), BorderLayout.CENTER);}
0
private Component createDataPanel()
{        JLabel label = new JLabel(JMeterUtils.getResString("example_data"));    data = new JTextArea();    data.setName(ExampleSampler.DATA);    label.setLabelFor(data);    JPanel dataPanel = new JPanel(new BorderLayout(5, 0));    dataPanel.add(label, BorderLayout.WEST);    dataPanel.add(data, BorderLayout.CENTER);    return dataPanel;}
0
public void clearGui()
{    super.clearGui();        data.setText("");}
0
public SampleResult sample(Entry e)
{    SampleResult res = new SampleResult();    res.setSampleLabel(getName());    res.setSamplerData(myStringProperty);    res.sampleStart();        res.setResponseData(myStringProperty.toUpperCase(Locale.ENGLISH), null);    res.setDataType(SampleResult.TEXT);    res.sampleEnd();    res.setSuccessful(true);    return res;}
0
public void setMyStringProperty(String s)
{    myStringProperty = s;}
0
public String getMyStringProperty()
{    return myStringProperty;}
0
public SampleResult sample(Entry e)
{    SampleResult res = new SampleResult();    res.setSampleLabel(getName());    res.setSamplerData(myStringProperty);    res.sampleStart();        res.setResponseData(myStringProperty.toLowerCase(Locale.ENGLISH), null);    res.setDataType(SampleResult.TEXT);    res.sampleEnd();    res.setSuccessful(true);    return res;}
0
public void setMyStringProperty(String s)
{    myStringProperty = s;}
0
public String getMyStringProperty()
{    return myStringProperty;}
0
public SampleResult sample(Entry ignored)
{    SampleResult res = new SampleResult();    res.setSampleLabel(getName());    res.sampleStart();    StringBuilder bld = new StringBuilder();    for (Field field : this.getClass().getDeclaredFields()) {        try {            String name = field.getName();            if (name.startsWith("my")) {                Object value = field.get(this);                bld.append(name).append('=');                bld.append(value);                bld.append(" (");                bld.append(field.getType().getCanonicalName());                bld.append(")\n");            }        } catch (IllegalAccessException e) {            bld.append(e.toString());        }    }    res.setResponseData(bld.toString(), null);    res.setDataType(SampleResult.TEXT);    res.sampleEnd();    res.setSuccessful(true);    return res;}
0
public boolean isMybool()
{    return mybool;}
0
public void setMybool(boolean mybool)
{    this.mybool = mybool;}
0
public Boolean getMyBoolean1()
{    return myBoolean1;}
0
public void setMyBoolean1(Boolean myBoolean1)
{    this.myBoolean1 = myBoolean1;}
0
public Boolean getMyBoolean2()
{    return myBoolean2;}
0
public void setMyBoolean2(Boolean myBoolean2)
{    this.myBoolean2 = myBoolean2;}
0
public int getMyInt()
{    return myInt;}
0
public void setMyInt(int myInt)
{    this.myInt = myInt;}
0
public Integer getMyInteger1()
{    return myInteger1;}
0
public void setMyInteger1(Integer myInteger1)
{    this.myInteger1 = myInteger1;}
0
public Integer getMyInteger2()
{    return myInteger2;}
0
public void setMyInteger2(Integer myInteger2)
{    this.myInteger2 = myInteger2;}
0
public long getMylong()
{    return mylong;}
0
public void setMylong(long mylong)
{    this.mylong = mylong;}
0
public Long getMyLong1()
{    return myLong1;}
0
public void setMyLong1(Long myLong1)
{    this.myLong1 = myLong1;}
0
public Long getMyLong2()
{    return myLong2;}
0
public void setMyLong2(Long myLong2)
{    this.myLong2 = myLong2;}
0
public String getMyString1()
{    return myString1;}
0
public void setMyString1(String myString1)
{    this.myString1 = myString1;}
0
public String getMyString2()
{    return myString2;}
0
public void setMyString2(String myString2)
{    this.myString2 = myString2;}
0
public File getMyFile1()
{    return myFile1;}
0
public void setMyFile1(File myFile)
{    this.myFile1 = myFile;}
0
public String getMyFile2()
{    return myFile2;}
0
public void setMyFile2(String myFile)
{    this.myFile2 = myFile;}
0
private PropertyDescriptor getprop(String name)
{    final PropertyDescriptor property = property(name);        property.setValue(NOT_UNDEFINED, Boolean.FALSE);    return property;}
0
private PropertyDescriptor getprop(String name, Object deflt)
{    PropertyDescriptor p = property(name);    p.setValue(DEFAULT, deflt);    p.setValue(NOT_UNDEFINED, Boolean.TRUE);    return p;}
0
public void setParameters(Collection<CompoundVariable> parameters, Integer min, Integer max) throws InvalidVariableException
{    checkParameterCount(parameters, min, max);    values = parameters.toArray();}
0
public String getReferenceKey()
{    return key;}
0
protected final Object[] getParameterValues()
{    return values;}
0
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, parametersCount);}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    /*         * boolean fullHostName = false; if (((CompoundFunction) values[0])         * .execute() .toLowerCase() .equals("true")) { fullHostName = true; }         */    String value = compute();    if (values.length >= 1) {                JMeterVariables vars = getVariables();        if (vars != null) {                        String varName = ((CompoundVariable) values[0]).execute().trim();            if (varName.length() > 0) {                vars.put(varName, value);            }        }    }    return value;}
0
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, 0, 1);    values = parameters.toArray();}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public synchronized String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    if (    bshInterpreter == null) {        throw new InvalidVariableException("BeanShell not found");    }    JMeterContext jmctx = JMeterContextService.getContext();    JMeterVariables vars = jmctx.getVariables();    String script = ((CompoundVariable) values[0]).execute();        String varName = "";    if (values.length > 1) {        varName = ((CompoundVariable) values[1]).execute().trim();    }        String resultStr = "";    try {                if (currentSampler != null) {                        bshInterpreter.set("Sampler", currentSampler);        }        if (previousResult != null) {                        bshInterpreter.set("SampleResult", previousResult);        }                        bshInterpreter.set("ctx", jmctx);                bshInterpreter.set("vars", vars);                bshInterpreter.set("props", JMeterUtils.getJMeterProperties());                bshInterpreter.set("threadName", Thread.currentThread().getName());                Object bshOut = bshInterpreter.eval(script);        if (bshOut != null) {            resultStr = bshOut.toString();        }        if (vars != null && varName.length() > 0) {                        vars.put(varName, resultStr);        }    } catch (    Exception ex) {            }        return resultStr;}
1
public void log_info(String s)
{    }
1
public synchronized void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, 1, 2);    values = parameters.toArray();    try {        bshInterpreter = new BeanShellInterpreter(JMeterUtils.getProperty(INIT_FILE), log);    } catch (ClassNotFoundException e) {        throw new InvalidVariableException("BeanShell not found", e);    }}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    String originalString = values[0].execute();        String mode = null;    if (values.length > 1) {        mode = values[1].execute();    }    if (StringUtils.isEmpty(mode)) {                mode = ChangeCaseMode.UPPER.getName();    }    String targetString = changeCase(originalString, mode);    addVariableValue(targetString, values, 2);    return targetString;}
0
protected String changeCase(String originalString, String mode)
{    String targetString = originalString;        ChangeCaseMode changeCaseMode = ChangeCaseMode.typeOf(mode.toUpperCase());    if (changeCaseMode != null) {        switch(changeCaseMode) {            case UPPER:                targetString = StringUtils.upperCase(originalString);                break;            case LOWER:                targetString = StringUtils.lowerCase(originalString);                break;            case CAPITALIZE:                targetString = StringUtils.capitalize(originalString);                break;            default:        }    } else {            }    return targetString;}
1
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, MIN_PARAMETER_COUNT, MAX_PARAMETER_COUNT);    values = parameters.toArray(new CompoundVariable[parameters.size()]);}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return DESC;}
0
public String getName()
{    return this.mode;}
0
public static ChangeCaseMode typeOf(String mode)
{    EnumSet<ChangeCaseMode> allOf = EnumSet.allOf(ChangeCaseMode.class);    for (ChangeCaseMode csm : allOf) {        if (csm.getName().equals(mode)) {            return csm;        }    }    return null;}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    StringBuilder sb = new StringBuilder(values.length);    for (Object val : values) {        String numberString = ((CompoundVariable) val).execute().trim();        try {            long value = Long.decode(numberString).longValue();            char ch = (char) value;            sb.append(ch);        } catch (NumberFormatException e) {                    }    }    return sb.toString();}
1
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkMinParameterCount(parameters, 1);    values = parameters.toArray();}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{        String myValue = "";    String fileName = ((org.apache.jmeter.engine.util.CompoundVariable) values[0]).execute();    String columnOrNext = ((org.apache.jmeter.engine.util.CompoundVariable) values[1]).execute();            if (columnOrNext.startsWith("*")) {                FileWrapper.open(fileName, columnOrNext);                return "";    }        if (columnOrNext.equals("next()") || columnOrNext.equals("next")) {                FileWrapper.endRow(fileName);                return "";    }    try {                int columnIndex = Integer.parseInt(columnOrNext);                myValue = FileWrapper.getColumn(fileName, columnIndex);    } catch (NumberFormatException e) {            } catch (IndexOutOfBoundsException e) {            }        return myValue;}
1
public List<String> getArgumentDesc()
{    return desc;}
0
public String getReferenceKey()
{    return KEY;}
0
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    if (log.isDebugEnabled()) {            }    values = parameters.toArray();    if (log.isDebugEnabled()) {        for (int i = 0; i < parameters.size(); i++) {                    }    }    checkParameterCount(parameters, 2);    /*         * Need to reset the containers for repeated runs; about the only way         * for functions to detect that a run is starting seems to be the         * setParameters() call.         */        FileWrapper.clearAll();}
1
public List<String> getArgumentDesc()
{    return desc;}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    String dateString = values[0].execute();    String sourceDateFormat = values[1].execute();    String targetDateFormat = values[2].execute();    try {        SimpleDateFormat targetDateFormatter = new SimpleDateFormat(targetDateFormat);        String newDate;        if (sourceDateFormat != null && sourceDateFormat.length() > 0) {            SimpleDateFormat sourceDateFormatter = new SimpleDateFormat(sourceDateFormat);            newDate = targetDateFormatter.format(sourceDateFormatter.parse(dateString));        } else {                        newDate = targetDateFormatter.format(new Date(Long.parseLong(dateString)));        }        addVariableValue(newDate, values, 3);        return newDate;    } catch (Exception e) {            }        return "";}
1
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, MIN_PARAMETER_COUNT, MAX_PARAMETER_COUNT);    values = parameters.toArray(new CompoundVariable[parameters.size()]);}
0
public String getReferenceKey()
{    return KEY;}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    String digestAlgorithm = values[0].execute();    String stringToEncode = values[1].execute();    String salt = null;    if (values.length > 2) {        salt = values[2].execute();    }    String encodedString = null;    try {        MessageDigest md = MessageDigest.getInstance(digestAlgorithm);        md.update(stringToEncode.getBytes(UTF_8));        if (StringUtils.isNotEmpty(salt)) {            md.update(salt.getBytes(UTF_8));        }        byte[] bytes = md.digest();        encodedString = uppercase(new String(Hex.encodeHex(bytes)), values, 3);        addVariableValue(encodedString, values, 4);    } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {            }    return encodedString;}
1
private String uppercase(String encodedString, CompoundVariable[] values, int index)
{    if (values.length > index) {        String shouldUpperCase = values[index].execute();        boolean shouldDoUpperCase = Boolean.TRUE.toString().equalsIgnoreCase(shouldUpperCase);        if (shouldDoUpperCase) {            return encodedString.toUpperCase();        }    }    return encodedString;}
0
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, MIN_PARAMETER_COUNT, MAX_PARAMETER_COUNT);    values = parameters.toArray(new CompoundVariable[parameters.size()]);}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    String rawString = ((CompoundVariable) values[0]).execute();    return StringEscapeUtils.escapeHtml4(rawString);}
0
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, 1);    values = parameters.toArray();}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    String valueToEscape = values[0].execute();        String varName = "";    if (values.length >= PARAM_NAME) {        varName = values[PARAM_NAME - 1].execute().trim();    }    String escapedValue = Perl5Compiler.quotemeta(valueToEscape);    if (varName.length() > 0) {        JMeterVariables vars = getVariables();        if (vars != null) {                        vars.put(varName, escapedValue);        }    }    if (log.isDebugEnabled()) {                    }    return escapedValue;}
1
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, MIN_PARAM_COUNT, MAX_PARAM_COUNT);    values = parameters.toArray(new CompoundVariable[parameters.size()]);}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    String rawString = ((CompoundVariable) values[0]).execute();    return StringEscapeUtils.escapeXml10(rawString);}
0
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, 1);    values = parameters.toArray();}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    String parameter = ((CompoundVariable) values[0]).execute();    CompoundVariable cv = new CompoundVariable(parameter);    return cv.execute();}
0
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, MIN_PARAMETER_COUNT, MAX_PARAMETER_COUNT);    values = parameters.toArray();}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    String variableName = ((CompoundVariable) values[0]).execute();    final JMeterVariables vars = getVariables();    if (vars == null) {                return "**ERROR - see log file**";    }    String variableValue = vars.get(variableName);    CompoundVariable cv = new CompoundVariable(variableValue);    return cv.execute();}
1
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, MIN_PARAMETER_COUNT, MAX_PARAMETER_COUNT);    values = parameters.toArray();}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
private void load() throws IOException, FileNotFoundException
{    try (BufferedReader myBread = Files.newBufferedReader(FileServer.getFileServer().getResolvedFile(fileName).toPath(), Charset.defaultCharset())) {        String line = myBread.readLine();        /*             * N.B. Stop reading the file if we get a blank line: This allows             * for trailing comments in the file             */        while (line != null && line.length() > 0) {            fileData.add(splitLine(line, delimiter));            line = myBread.readLine();        }    } catch (IOException e) {        fileData.clear();                throw e;    }}
1
public String getColumn(int row, int col) throws IndexOutOfBoundsException
{    String colData;    colData = fileData.get(row).get(col);        return colData;}
1
public int nextRow()
{    int row = nextRow;    nextRow++;    if (nextRow >= fileData.size()) {                nextRow = 0;    }        return row;}
1
private static List<String> splitLine(String theLine, String delim)
{    List<String> result = new ArrayList<>();    StringTokenizer tokener = new StringTokenizer(theLine, delim, true);    /*         * the beginning of the line is a "delimiter" so that ,a,b,c returns ""         * "a" "b" "c"         */    boolean lastWasDelim = true;    while (tokener.hasMoreTokens()) {        String token = tokener.nextToken();        if (token.equals(delim)) {            if (lastWasDelim) {                                result.add("");            }            lastWasDelim = true;        } else {            lastWasDelim = false;            result.add(token);        }    }    if (    lastWasDelim) {                result.add("");    }    return result;}
0
public String getFileName()
{    return fileName;}
0
 final String getDelimiter()
{    return delimiter;}
0
public int getSize()
{    return fileData.size();}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    String fileName = ((CompoundVariable) values[0]).execute();        String encoding = null;    if (values.length >= ENCODING) {        encoding = ((CompoundVariable) values[ENCODING - 1]).execute().trim();        if (encoding.length() <= 0) {                        encoding = null;        }    }        String myName = "";    if (values.length >= PARAM_NAME) {        myName = ((CompoundVariable) values[PARAM_NAME - 1]).execute().trim();    }    String myValue = ERR_IND;    try {        File file = new File(fileName);        if (file.exists() && file.canRead()) {            myValue = FileUtils.readFileToString(new File(fileName), encoding);        } else {                    }    } catch (IOException e) {            }    if (myName.length() > 0) {        JMeterVariables vars = getVariables();        if (vars != null) {                        vars.put(myName, myValue);        }    }    if (log.isDebugEnabled()) {                    }    return myValue;}
1
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, MIN_PARAM_COUNT, MAX_PARAM_COUNT);    values = parameters.toArray();}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
private static String checkDefault(String file)
{    if (file.length() == 0) {        if (fileContainers.size() == 1 && defaultFile.length() > 0) {                        file = defaultFile;        } else {                    }    }    return file;}
1
public static synchronized void open(String file, String alias)
{        file = checkDefault(file);    if (alias.length() == 0) {                return;    }    Map<String, FileWrapper> m = filePacks.get();    if (m.get(alias) == null) {        FileRowColContainer frcc;        try {            frcc = getFile(file, alias);                        m.put(alias, new FileWrapper(frcc));        } catch (IOException e) {                }    }}
1
private static FileRowColContainer getFile(String file, String alias) throws FileNotFoundException, IOException
{    FileRowColContainer frcc;    if ((frcc = fileContainers.get(alias)) == null) {        frcc = new FileRowColContainer(file);        fileContainers.put(alias, frcc);                if (defaultFile.length() == 0) {                        defaultFile = file;        }    }    return frcc;}
1
public static void endRow(String file)
{    file = checkDefault(file);    Map<String, FileWrapper> my = filePacks.get();    FileWrapper fw = my.get(file);    if (fw == null) {            } else {        fw.endRow();    }}
1
private void endRow()
{    if (currentRow == NO_LINE) {            }    currentRow = NO_LINE;}
1
public static String getColumn(String file, int col)
{    Map<String, FileWrapper> my = filePacks.get();    FileWrapper fw = my.get(file);    if (    fw == null) {        if (file.startsWith("*")) {                                } else {            file = checkDefault(file);                        open(file, file);            fw = my.get(file);        }                if (fw == null) {                        return "";        }    }    return fw.getColumn(col);}
1
private String getColumn(int col)
{    if (currentRow == NO_LINE) {        currentRow = container.nextRow();    }    return container.getColumn(currentRow, col);}
0
public static int getCurrentRow(String file)
{    Map<String, FileWrapper> my = filePacks.get();    FileWrapper fw = my.get(file);    if (    fw == null) {        return -1;    }    return fw.currentRow;}
0
public static void clearAll()
{        Map<String, FileWrapper> my = filePacks.get();    for (Iterator<Map.Entry<String, FileWrapper>> i = my.entrySet().iterator(); i.hasNext(); ) {        Map.Entry<String, FileWrapper> fw = i.next();                i.remove();    }    fileContainers.clear();        defaultFile = "";}
1
protected void populateBindings(Bindings bindings)
{}
0
public synchronized String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    Bindings bindings = scriptEngine.createBindings();    populateBindings(bindings);    String script = ((CompoundVariable) values[0]).execute();        String varName = "";    if (values.length > 1) {        varName = ((CompoundVariable) values[1]).execute().trim();    }        String resultStr = "";    try {                if (currentSampler != null) {                        bindings.put("sampler", currentSampler);        }        if (previousResult != null) {                        bindings.put("prev", previousResult);        }                bindings.put("log", log);                bindings.put("threadName", Thread.currentThread().getName());        JMeterContext jmctx = JMeterContextService.getContext();                bindings.put("ctx", jmctx);        JMeterVariables vars = jmctx.getVariables();                bindings.put("vars", vars);        Properties props = JMeterUtils.getJMeterProperties();                bindings.put("props", props);                        bindings.put("OUT", System.out);                Object out = scriptEngine.eval(script, bindings);        if (out != null) {            resultStr = out.toString();        }        if (varName.length() > 0 && vars != null) {                        vars.put(varName, resultStr);        }    } catch (    Exception ex) {            }        return resultStr;}
1
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, 1, 2);    values = parameters.toArray();        scriptEngine = JSR223TestElement.getInstance().getEngineByName(GROOVY_ENGINE_NAME);    String fileName = JMeterUtils.getProperty(INIT_FILE);    if (!StringUtils.isEmpty(fileName)) {        File file = new File(fileName);        if (!(file.exists() && file.canRead())) {                        File oldFile = file;            file = new File(JMeterUtils.getJMeterHome(), fileName);            if (!(file.exists() && file.canRead())) {                throw new InvalidVariableException("Cannot read file, neither from:" + oldFile.getAbsolutePath() + ", nor from:" + file.getAbsolutePath() + ", check property '" + INIT_FILE + "'");            }        }        try (Reader reader = Files.newBufferedReader(file.toPath(), Charset.defaultCharset())) {            Bindings bindings = scriptEngine.createBindings();            bindings.put("log", log);            scriptEngine.eval(reader, bindings);        } catch (Exception ex) {            throw new InvalidVariableException("Failed loading script:" + file.getAbsolutePath(), ex);        }    }}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return DESCRIPTION;}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    JMeterVariables vars = getVariables();    int sum = 0;        String varName = ((CompoundVariable) values[values.length - 1]).execute().trim();    for (int i = 0; i < values.length - 1; i++) {        sum += Integer.parseInt(((CompoundVariable) values[i]).execute());    }    try {                sum += Integer.parseInt(varName);                varName = null;    } catch (NumberFormatException ignored) {            }    String totalString = Integer.toString(sum);    if (vars != null && varName != null) {                vars.put(varName.trim(), totalString);    }    return totalString;}
0
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkMinParameterCount(parameters, 2);    values = parameters.toArray();}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    String propertyName = values[0].execute();    String propertyValue = JMeterUtils.getProperty(propertyName);    return Boolean.toString(propertyValue != null);}
0
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, MIN_PARAMETER_COUNT, MAX_PARAMETER_COUNT);    values = parameters.toArray(new CompoundVariable[parameters.size()]);}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    String variableName = values[0].execute();    JMeterVariables jMeterVariables = getVariables();    if (jMeterVariables != null) {        String variableValue = jMeterVariables.get(variableName);        return Boolean.toString(variableValue != null);    } else {        return Boolean.FALSE.toString();    }}
0
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, MIN_PARAMETER_COUNT, MAX_PARAMETER_COUNT);    values = parameters.toArray(new CompoundVariable[parameters.size()]);}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    JMeterVariables vars = getVariables();    boolean perThread = Boolean.parseBoolean(((CompoundVariable) variables[0]).execute());        String varName = "";    if (variables.length >= 2) {                varName = ((CompoundVariable) variables[1]).execute().trim();    }        String counterString = "";    if (perThread) {        counterString = String.valueOf(perThreadInt.get().addAndGet(1));    } else {        counterString = String.valueOf(globalCounter.addAndGet(1));    }        if (vars != null && varName.length() > 0) {        vars.put(varName, counterString);    }    return counterString;}
0
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, 1, 2);    variables = parameters.toArray();}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public void threadStarted()
{}
0
public void threadFinished()
{    perThreadInt.remove();}
0
private static ScriptEngineManager getInstance()
{    return LazyHolder.INSTANCE;}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    JMeterContext jmctx = JMeterContextService.getContext();    JMeterVariables vars = jmctx.getVariables();    String script = ((CompoundVariable) values[0]).execute();        String varName = values.length < 2 ? null : ((CompoundVariable) values[1]).execute().trim();    String resultStr = "";    if (useRhinoEngine) {        resultStr = executeWithRhino(previousResult, currentSampler, jmctx, vars, script, varName);    } else {        resultStr = executeWithNashorn(previousResult, currentSampler, jmctx, vars, script, varName);    }    return resultStr;}
0
private String executeWithNashorn(SampleResult previousResult, Sampler currentSampler, JMeterContext jmctx, JMeterVariables vars, String script, String varName) throws InvalidVariableException
{    String resultStr = null;    try {        ScriptContext newContext = new SimpleScriptContext();        ScriptEngine engine = getInstance().getEngineByName(JavaScript.NASHORN_ENGINE_NAME);        Bindings bindings = engine.createBindings();                        bindings.put("log", log);                bindings.put("ctx", jmctx);                bindings.put("vars", vars);                bindings.put("props", JMeterUtils.getJMeterProperties());                bindings.put("threadName", Thread.currentThread().getName());                bindings.put("sampler", currentSampler);                bindings.put("sampleResult", previousResult);        newContext.setBindings(bindings, ScriptContext.ENGINE_SCOPE);        Object result = engine.eval(script, newContext);        resultStr = result.toString();        if (varName != null && vars != null) {                        vars.put(varName, resultStr);        }    } catch (Exception e) {                throw new InvalidVariableException("Error processing Javascript: [" + script + "]", e);    }    return resultStr;}
1
private String executeWithRhino(SampleResult previousResult, Sampler currentSampler, JMeterContext jmctx, JMeterVariables vars, String script, String varName) throws InvalidVariableException
{    Context cx = Context.enter();    String resultStr = null;    try {        Scriptable scope = cx.initStandardObjects(null);                        scope.put("log", scope, log);                scope.put("ctx", scope, jmctx);                scope.put("vars", scope, vars);                scope.put("props", scope, JMeterUtils.getJMeterProperties());                        scope.put("threadName", scope, Thread.currentThread().getName());                scope.put("sampler", scope, currentSampler);                scope.put("sampleResult", scope, previousResult);                Object result = cx.evaluateString(scope, script, "<cmd>", 1, null);        resultStr = Context.toString(result);        if (varName != null && vars != null) {                        vars.put(varName, resultStr);        }    } catch (RhinoException e) {                throw new InvalidVariableException("Error processing Javascript: [" + script + "]", e);    } finally {        Context.exit();    }    return resultStr;}
1
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, 1, 2);    values = parameters.toArray();}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{        String str = "";    CompoundVariable var = (CompoundVariable) values[0];    String exp = var.execute();        String varName = "";    if (values.length > 1) {        varName = ((CompoundVariable) values[1]).execute().trim();    }    JMeterContext jmctx = JMeterContextService.getContext();    JMeterVariables vars = jmctx.getVariables();    try {        JexlContext jc = new MapContext();                jc.set("log", log);                jc.set("ctx", jmctx);                jc.set("vars", vars);                jc.set("props", JMeterUtils.getJMeterProperties());                        jc.set("threadName", Thread.currentThread().getName());                jc.set("sampler", currentSampler);                jc.set("sampleResult", previousResult);                jc.set("OUT", System.out);                Script e = getJexlEngine().createScript(exp);        Object o = e.execute(jc);        if (o != null) {            str = o.toString();        }        if (vars != null && varName.length() > 0) {                        vars.put(varName, str);        }    } catch (Exception e) {            }    return str;}
1
private static JexlEngine getJexlEngine()
{    JexlEngine engine = threadLocalJexl.get();    if (engine == null) {        engine = new JexlEngine();        engine.setCache(512);        engine.setLenient(false);        engine.setSilent(false);        threadLocalJexl.set(engine);    }    return engine;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public String getReferenceKey()
{    return KEY;}
0
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, 1, 2);    values = parameters.toArray();}
0
public void threadStarted()
{}
0
public void threadFinished()
{    JexlEngine engine = threadLocalJexl.get();    if (engine != null) {        engine.clearCache();        threadLocalJexl.remove();    }}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{        String str = "";    CompoundVariable var = (CompoundVariable) values[0];    String exp = var.execute();        String varName = "";    if (values.length > 1) {        varName = ((CompoundVariable) values[1]).execute().trim();    }    JMeterContext jmctx = JMeterContextService.getContext();    JMeterVariables vars = jmctx.getVariables();    try {        JexlContext jc = new MapContext();                jc.set("log", log);                jc.set("ctx", jmctx);                jc.set("vars", vars);                jc.set("props", JMeterUtils.getJMeterProperties());                        jc.set("threadName", Thread.currentThread().getName());                jc.set("sampler", currentSampler);                jc.set("sampleResult", previousResult);                jc.set("OUT", System.out);                JexlScript e = threadLocalJexl.get().createScript(exp);        Object o = e.execute(jc);        if (o != null) {            str = o.toString();        }        if (vars != null && varName.length() > 0) {                        vars.put(varName, str);        }    } catch (Exception e) {            }    return str;}
1
private static JexlEngine createJexlEngine()
{    return new JexlBuilder().cache(512).silent(true).strict(true).debug(false).create();}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public String getReferenceKey()
{    return KEY;}
0
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, 1, 2);    values = parameters.toArray();}
0
public void threadStarted()
{}
0
public void threadFinished()
{    JexlEngine engine = threadLocalJexl.get();    if (engine != null) {        engine.clearCache();        threadLocalJexl.remove();    }}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{        String stringToLog = ((CompoundVariable) values[0]).execute();    String priorityString;    if (values.length > 1) {                priorityString = ((CompoundVariable) values[1]).execute();        if (priorityString.length() == 0) {            priorityString = DEFAULT_PRIORITY;        }    } else {        priorityString = DEFAULT_PRIORITY;    }    Throwable t = null;    if (values.length > 2) {                String value = ((CompoundVariable) values[2]).execute();        if (value.length() > 0) {            t = new Throwable(value);        }    }    String comment = "";    if (values.length > 3) {                comment = ((CompoundVariable) values[3]).execute();    }    logDetails(log, stringToLog, priorityString, t, comment);    return stringToLog;}
0
private static void printDetails(java.io.PrintStream ps, String s, Throwable t, String c)
{    String tn = Thread.currentThread().getName();    StringBuilder sb = new StringBuilder(80);    sb.append("Log: ");    sb.append(tn);    if (c.length() > 0) {        sb.append(' ');        sb.append(c);    } else {        sb.append(DEFAULT_SEPARATOR);    }    sb.append(s);    if (t != null) {        sb.append(' ');        ps.print(sb.toString());                t.printStackTrace(ps);    } else {        ps.println(sb.toString());    }}
0
 static synchronized void logDetails(Logger logger, String stringToLog, String priorityString, Throwable throwable, String comment)
{    String prio = priorityString.trim().toUpperCase();    if ("OUT".equals(prio)) {                printDetails(System.out, stringToLog, throwable, comment);    } else if ("ERR".equals(prio)) {                printDetails(System.err, stringToLog, throwable, comment);    } else {                Level prioLevel;        try {            prioLevel = Level.valueOf(prio);        } catch (IllegalArgumentException ignored) {            prioLevel = Level.DEBUG;        }        final String threadName = Thread.currentThread().getName();        final String separator = (comment.isEmpty()) ? DEFAULT_SEPARATOR : comment;        switch(prioLevel) {            case ERROR:                                break;            case WARN:                                break;            case INFO:                                break;            case DEBUG:                                break;            case TRACE:                logger.trace("{} {} {}", threadName, separator, stringToLog, throwable);                break;            default:                throw new IllegalStateException("Invalid log level");        }    }}
1
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, MIN_PARAMETER_COUNT, MAX_PARAMETER_COUNT);    values = parameters.toArray();}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    String stringToLog = ((CompoundVariable) values[0]).execute();    String priorityString;    if (values.length > 1) {                priorityString = ((CompoundVariable) values[1]).execute();        if (priorityString.length() == 0) {            priorityString = DEFAULT_PRIORITY;        }    } else {        priorityString = DEFAULT_PRIORITY;    }    Throwable t = null;    if (values.length > 2) {                t = new Throwable(((CompoundVariable) values[2]).execute());    }    LogFunction.logDetails(log, stringToLog, priorityString, t, "");    return "";}
0
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, MIN_PARAMETER_COUNT, MAX_PARAMETER_COUNT);    values = parameters.toArray();}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    JMeterVariables vars = getVariables();    long sum = 0;    String varName = ((CompoundVariable) values[values.length - 1]).execute().trim();    for (int i = 0; i < values.length - 1; i++) {        sum += Long.parseLong(((CompoundVariable) values[i]).execute());    }    try {                sum += Long.parseLong(varName);                varName = null;    } catch (NumberFormatException ignored) {            }    String totalString = Long.toString(sum);    if (vars != null && varName != null && varName.length() > 0) {                vars.put(varName, totalString);    }    return totalString;}
0
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkMinParameterCount(parameters, 2);    values = parameters.toArray();}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
protected String compute()
{    return JMeterUtils.getLocalHostIP();}
0
public String getReferenceKey()
{    return KEY;}
0
protected String compute()
{    return JMeterUtils.getLocalHostName();}
0
public String getReferenceKey()
{    return KEY;}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    String propertyName = ((CompoundVariable) values[0]).execute();    String propertyDefault = propertyName;    if (values.length > 2) {                propertyDefault = ((CompoundVariable) values[2]).execute();    }    String propertyValue = JMeterUtils.getPropDefault(propertyName, propertyDefault);    if (values.length > 1) {        String variableName = ((CompoundVariable) values[1]).execute();        if (variableName.length() > 0) {                        final JMeterVariables variables = getVariables();            if (variables != null) {                variables.put(variableName, propertyValue);            }        }    }    return propertyValue;}
0
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, MIN_PARAMETER_COUNT, MAX_PARAMETER_COUNT);    values = parameters.toArray();}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    String propertyName = ((CompoundVariable) values[0]).execute();        String propertyDefault = "1";    if (values.length > 1) {                propertyDefault = ((CompoundVariable) values[1]).execute();    }    String propertyValue = JMeterUtils.getPropDefault(propertyName, propertyDefault);    return propertyValue;}
0
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, MIN_PARAMETER_COUNT, MAX_PARAMETER_COUNT);    values = parameters.toArray();}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    long min = Long.parseLong(minimum.execute().trim());    long max = Long.parseLong(maximum.execute().trim());    long rand = ThreadLocalRandom.current().nextLong(min, max + 1);    String randString = Long.toString(rand);    if (varName != null) {        JMeterVariables vars = getVariables();        final String varTrim = varName.execute().trim();        if (vars != null && varTrim.length() > 0) {                        vars.put(varTrim, randString);        }    }    return randString;}
0
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, 2, 3);    Object[] values = parameters.toArray();    minimum = (CompoundVariable) values[0];    maximum = (CompoundVariable) values[1];    if (values.length > 2) {        varName = (CompoundVariable) values[2];    } else {        varName = null;    }}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public String getFormat()
{    return format;}
0
public Locale getLocale()
{    return locale;}
0
public int hashCode()
{    return format.hashCode() + locale.hashCode();}
0
public boolean equals(Object other)
{    if (!(other instanceof LocaleFormatObject)) {        return false;    }    LocaleFormatObject otherError = (LocaleFormatObject) other;    return format.equals(otherError.getFormat()) && locale.getDisplayName().equals(otherError.getLocale().getDisplayName());}
0
public String toString()
{    return "LocaleFormatObject [format=" + format + ", locale=" + locale + "]";}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    DateTimeFormatter formatter;    if (values.length > 3) {        String localeAsString = values[3].execute().trim();        if (!localeAsString.trim().isEmpty()) {            locale = LocaleUtils.toLocale(localeAsString);        }    }    String format = values[0].execute().trim();    if (!StringUtils.isEmpty(format)) {        try {            LocaleFormatObject lfo = new LocaleFormatObject(format, locale);            formatter = dateRandomFormatterCache.get(lfo, key -> createFormatter((LocaleFormatObject) key));        } catch (IllegalArgumentException ex) {                        return "";        }    } else {        try {            LocaleFormatObject lfo = new LocaleFormatObject("yyyy-MM-dd", locale);            formatter = dateRandomFormatterCache.get(lfo, key -> createFormatter((LocaleFormatObject) key));        } catch (IllegalArgumentException ex) {                        return "";        }    }    String dateStart = values[1].execute().trim();    long localStartDate = 0;    if (!dateStart.isEmpty()) {        try {            localStartDate = LocalDate.parse(dateStart, formatter).toEpochDay();        } catch (DateTimeParseException | NumberFormatException ex) {                                }    } else {        try {            localStartDate = LocalDate.now(systemDefaultZoneID).toEpochDay();        } catch (DateTimeParseException | NumberFormatException ex) {                                }    }    long localEndDate = 0;    String dateEnd = values[2].execute().trim();    try {        localEndDate = LocalDate.parse(dateEnd, formatter).toEpochDay();    } catch (DateTimeParseException | NumberFormatException ex) {                    }        String dateString = "";    if (localEndDate < localStartDate) {                    } else {        long randomDay = ThreadLocalRandom.current().nextLong(localStartDate, localEndDate);        try {            dateString = LocalDate.ofEpochDay(randomDay).format(formatter);        } catch (DateTimeParseException | NumberFormatException ex) {                                }        addVariableValue(dateString, values, 4);    }    return dateString;}
1
private DateTimeFormatter createFormatter(LocaleFormatObject format)
{        return new DateTimeFormatterBuilder().appendPattern(format.getFormat()).parseDefaulting(ChronoField.DAY_OF_MONTH, 1).parseDefaulting(ChronoField.MONTH_OF_YEAR, 1).parseDefaulting(ChronoField.YEAR_OF_ERA, Year.now().getValue()).toFormatter(format.getLocale());}
1
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, MIN_PARAMETER_COUNT, MAX_PARAMETER_COUNT);    values = parameters.toArray(new CompoundVariable[parameters.size()]);        if (dateRandomFormatterCache == null) {        dateRandomFormatterCache = Caffeine.newBuilder().maximumSize(100).build();    }}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    String variablesNamesSplitBySeparatorValue = variablesNamesSplitBySeparator.execute().trim();    JMeterVariables vars = getVariables();    String outputValue = "";    String separator = "";    if (vars != null) {                List<String> results = new ArrayList<>();        String[] variables = variablesNamesSplitBySeparatorValue.split(SEPARATOR);        for (String currentVarName : variables) {            if (!StringUtils.isEmpty(currentVarName)) {                extractVariableValuesToList(currentVarName, vars, results);            }        }        if (!results.isEmpty()) {            int randomIndex = ThreadLocalRandom.current().nextInt(0, results.size());            outputValue = results.get(randomIndex);        } else {            if (log.isDebugEnabled()) {                            }        }        if (varName != null) {            final String varTrim = varName.execute().trim();            if (!varTrim.isEmpty()) {                vars.put(varTrim, outputValue);            }        }    }    return outputValue;}
1
private void extractVariableValuesToList(String variableName, JMeterVariables vars, List<String> results)
{    String matchNumberAsStr = vars.get(variableName + "_matchNr");    int matchNumber = 0;    if (!StringUtils.isEmpty(matchNumberAsStr)) {        matchNumber = Integer.parseInt(matchNumberAsStr);    }    if (matchNumber > 0) {        for (int i = 1; i <= matchNumber; i++) {            results.add(vars.get(variableName + "_" + i));        }    } else {        String value = vars.get(variableName);        if (!StringUtils.isEmpty(value)) {            results.add(value);        }    }}
0
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, 1, 2);    Object[] values = parameters.toArray();    variablesNamesSplitBySeparator = (CompoundVariable) values[0];    if (values.length > 1) {        varName = (CompoundVariable) values[1];    }}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    int length = Integer.parseInt(values[0].execute());        String charsToUse = null;    if (values.length >= CHARS) {        charsToUse = (values[CHARS - 1]).execute().trim();        if (charsToUse.length() <= 0) {                        charsToUse = null;        }    }        String myName = "";    if (values.length >= PARAM_NAME) {        myName = (values[PARAM_NAME - 1]).execute().trim();    }    String myValue = null;    if (StringUtils.isEmpty(charsToUse)) {        myValue = RandomStringUtils.random(length);    } else {        myValue = RandomStringUtils.random(length, charsToUse);    }    if (myName.length() > 0) {        JMeterVariables vars = getVariables();        if (vars != null) {                        vars.put(myName, myValue);        }    }    if (log.isDebugEnabled()) {                    }    return myValue;}
1
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, MIN_PARAM_COUNT, MAX_PARAM_COUNT);    values = parameters.toArray(new CompoundVariable[parameters.size()]);}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{        String valueIndex = "";        String defaultValue = "";        String between = "";        String name = "";        String inputVariable = "";    Pattern searchPattern;    Object[] tmplt;    try {        searchPattern = JMeterUtils.getPatternCache().getPattern(((CompoundVariable) values[0]).execute(), Perl5Compiler.READ_ONLY_MASK);        tmplt = generateTemplate(((CompoundVariable) values[1]).execute());        if (values.length > 2) {            valueIndex = ((CompoundVariable) values[2]).execute();        }        if (valueIndex.length() == 0) {                        valueIndex = "1";        }        if (values.length > 3) {            between = ((CompoundVariable) values[3]).execute();        }        if (values.length > 4) {            String dv = ((CompoundVariable) values[4]).execute();            if (dv.length() != 0) {                defaultValue = dv;            }        }        if (values.length > 5) {            name = ((CompoundVariable) values[5]).execute();        }        if (values.length > 6) {            inputVariable = ((CompoundVariable) values[6]).execute();        }    } catch (MalformedCachePatternException e) {                throw new InvalidVariableException("Malformed cache pattern:" + values[0], e);    }        JMeterVariables vars = getVariables();    if (vars == null) {                return defaultValue;    }    if (name.length() > 0) {        vars.put(name, defaultValue);    }    String textToMatch = null;    if (inputVariable.length() > 0) {        textToMatch = vars.get(inputVariable);    } else if (previousResult != null) {        textToMatch = previousResult.getResponseDataAsString();    }    if (textToMatch == null || textToMatch.length() == 0) {        return defaultValue;    }    List<MatchResult> collectAllMatches = new ArrayList<>();    try {        PatternMatcher matcher = JMeterUtils.getMatcher();        PatternMatcherInput input = new PatternMatcherInput(textToMatch);        while (matcher.contains(input, searchPattern)) {            MatchResult match = matcher.getMatch();            if (match != null) {                collectAllMatches.add(match);            }        }    } finally {        if (name.length() > 0) {                        vars.put(name + "_matchNr", Integer.toString(collectAllMatches.size()));        }    }    if (collectAllMatches.isEmpty()) {        return defaultValue;    }    if (valueIndex.equals(ALL)) {        StringBuilder value = new StringBuilder();        Iterator<MatchResult> it = collectAllMatches.iterator();        boolean first = true;        while (it.hasNext()) {            if (!first) {                value.append(between);            } else {                first = false;            }            value.append(generateResult(it.next(), name, tmplt, vars));        }        return value.toString();    } else if (valueIndex.equals(RAND)) {        MatchResult result = collectAllMatches.get(ThreadLocalRandom.current().nextInt(collectAllMatches.size()));        return generateResult(result, name, tmplt, vars);    } else {        try {            int index = Integer.parseInt(valueIndex) - 1;            if (index >= collectAllMatches.size()) {                return defaultValue;            }            MatchResult result = collectAllMatches.get(index);            return generateResult(result, name, tmplt, vars);        } catch (NumberFormatException e) {            float ratio = Float.parseFloat(valueIndex);            MatchResult result = collectAllMatches.get((int) (collectAllMatches.size() * ratio + .5) - 1);            return generateResult(result, name, tmplt, vars);        }    }}
1
private void saveGroups(MatchResult result, String namep, JMeterVariables vars)
{    for (int x = 0; x < result.groups(); x++) {                vars.put(namep + "_g" + x, result.group(x));    }}
0
public List<String> getArgumentDesc()
{    return desc;}
0
private String generateResult(MatchResult match, String namep, Object[] template, JMeterVariables vars)
{    saveGroups(match, namep, vars);    StringBuilder result = new StringBuilder();    for (Object t : template) {        if (t instanceof String) {            result.append(t);        } else {            result.append(match.group(((Integer) t).intValue()));        }    }    if (namep.length() > 0) {        vars.put(namep, result.toString());    }    return result.toString();}
0
public String getReferenceKey()
{    return KEY;}
0
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, MIN_PARAMETER_COUNT, MAX_PARAMETER_COUNT);    values = parameters.toArray();}
0
private Object[] generateTemplate(String rawTemplate)
{    List<String> pieces = new ArrayList<>();        List<Object> combined = new LinkedList<>();    PatternMatcher matcher = JMeterUtils.getMatcher();    Util.split(pieces, matcher, templatePattern, rawTemplate);    PatternMatcherInput input = new PatternMatcherInput(rawTemplate);    boolean startsWith = isFirstElementGroup(rawTemplate);    if (startsWith) {                pieces.remove(0);    }    Iterator<String> iter = pieces.iterator();    while (iter.hasNext()) {        boolean matchExists = matcher.contains(input, templatePattern);        if (startsWith) {            if (matchExists) {                combined.add(Integer.valueOf(matcher.getMatch().group(1)));            }            combined.add(iter.next());        } else {            combined.add(iter.next());            if (matchExists) {                combined.add(Integer.valueOf(matcher.getMatch().group(1)));            }        }    }    if (matcher.contains(input, templatePattern)) {        combined.add(Integer.valueOf(matcher.getMatch().group(1)));    }    return combined.toArray();}
0
private boolean isFirstElementGroup(String rawData)
{    Pattern pattern =     JMeterUtils.getPatternCache().getPattern(    "^\\$\\d+\\$", Perl5Compiler.READ_ONLY_MASK);    return JMeterUtils.getMatcher().contains(rawData, pattern);}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    String name = "";    if (currentSampler != null) {                name = currentSampler.getName();    }    if (values.length > 0) {        JMeterVariables vars = getVariables();        if (vars != null) {                        String varName = ((CompoundVariable) values[0]).execute().trim();            if (varName.length() > 0) {                vars.put(varName, name);            }        }    }    return name;}
0
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, 0, 1);    values = parameters.toArray();}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    String propertyName = ((CompoundVariable) values[0]).execute();    String propertyValue = ((CompoundVariable) values[1]).execute();        boolean returnValue = false;    if (values.length > 2) {                returnValue = ((CompoundVariable) values[2]).execute().equalsIgnoreCase("true");    }    if (returnValue) {                return (String) JMeterUtils.setProperty(propertyName, propertyValue);    } else {        JMeterUtils.setProperty(propertyName, propertyValue);        return "";    }}
0
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, MIN_PARAMETER_COUNT, MAX_PARAMETER_COUNT);    values = parameters.toArray();}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    JMeterVariables vars = getVariables();    String stringToSplit = ((CompoundVariable) values[0]).execute();    String varNamePrefix = ((CompoundVariable) values[1]).execute().trim();    String splitString = ",";    if (values.length > 2) {                String newSplitString = ((CompoundVariable) values[2]).execute();        splitString = newSplitString.length() > 0 ? newSplitString : splitString;    }            String[] parts = JOrphanUtils.split(stringToSplit, splitString, "?");    vars.put(varNamePrefix, stringToSplit);        vars.put(varNamePrefix + "_n", Integer.toString(parts.length));    for (int i = 1; i <= parts.length; i++) {        if (log.isDebugEnabled()) {                    }                vars.put(varNamePrefix + "_" + i, parts[i - 1]);    }    vars.remove(varNamePrefix + "_" + (parts.length + 1));    return stringToSplit;}
1
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, MIN_PARAMETER_COUNT, MAX_PARAMETER_COUNT);    values = parameters.toArray();}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
private synchronized void closeFile()
{    if (myBread == null) {        return;    }    if (log.isInfoEnabled()) {                    }    try {        myBread.close();    } catch (IOException e) {                    }    try {        myFileReader.close();    } catch (IOException e) {                    }}
1
private synchronized void openFile()
{    String tn = Thread.currentThread().getName();    fileName = ((CompoundVariable) values[0]).execute();    String start = "";    if (values.length >= PARAM_START) {        start = ((CompoundVariable) values[PARAM_START - 1]).execute();        try {                        myStart = Integer.parseInt(start);        } catch (NumberFormatException e) {                        myStart = COUNT_UNUSED;                    }    }        if (myCurrent == COUNT_UNUSED) {        myCurrent = myStart == COUNT_UNUSED ? 1 : myStart;    }    if (values.length >= PARAM_END) {        String tmp = ((CompoundVariable) values[PARAM_END - 1]).execute();        try {                        myEnd = Integer.parseInt(tmp);        } catch (NumberFormatException e) {                        myEnd = COUNT_UNUSED;                    }    }    if (values.length >= PARAM_START) {        if (log.isInfoEnabled()) {                                }        if (myEnd != COUNT_UNUSED) {            if (myCurrent > myEnd) {                if (log.isInfoEnabled()) {                                                        }                myBread = null;                return;            }        }        /*             * DecimalFormat adds the number to the end of the format if there             * are no formatting characters, so we need a way to prevent this             * from messing up the file name.             *             */        if (        myStart != COUNT_UNUSED)         {                        try {                DecimalFormat myFormatter = new DecimalFormat(fileName);                fileName = myFormatter.format(myCurrent);            } catch (NumberFormatException e) {                            }        }                myCurrent++;    }            try {        myFileReader = new FileReader(fileName);        myBread = new BufferedReader(myFileReader);    } catch (Exception e) {                        IOUtils.closeQuietly(myFileReader);        IOUtils.closeQuietly(myBread);        myBread = null;        myFileReader = null;    }}
1
public synchronized String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    String myValue = ERR_IND;        String myName = "StringFromFile_";    if (values.length >= PARAM_NAME) {        myName = ((CompoundVariable) values[PARAM_NAME - 1]).execute().trim();    }    /*         * To avoid re-opening the file repeatedly after an error, only try to         * open it in the first execute() call (It may be re=opened at EOF, but         * that will cause at most one failure.)         */    if (firstTime) {        openFile();        firstTime = false;    }    if (null != myBread) {                try {            String line = myBread.readLine();            if (line == null) {                                String tn = Thread.currentThread().getName();                                                closeFile();                openFile();                if (myBread != null) {                    line = myBread.readLine();                } else {                    line = ERR_IND;                    if (myEnd != COUNT_UNUSED) {                                                                                                throw new JMeterStopThreadException("End of sequence");                    }                }            }            myValue = line;        } catch (IOException e) {            String tn = Thread.currentThread().getName();                                }    } else {                if (myEnd != COUNT_UNUSED) {                        if (log.isInfoEnabled()) {                            }            throw new JMeterStopThreadException("End of sequence");        }    }    if (myName.length() > 0) {        JMeterVariables vars = getVariables();        if (vars != null) {                        vars.put(myName, myValue);        }    }    if (log.isDebugEnabled()) {                    }    return myValue;}
1
public synchronized void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{            checkParameterCount(parameters, MIN_PARAM_COUNT, MAX_PARAM_COUNT);    values = parameters.toArray();    StringBuilder sb = new StringBuilder(40);        sb.append("setParameters(");    for (int i = 0; i < values.length; i++) {        if (i > 0) {            sb.append(',');        }        sb.append(((CompoundVariable) values[i]).getRawParameters());    }        sb.append(')');                        firstTime = true;}
1
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public void testStarted()
{}
0
public void testStarted(String host)
{}
0
public void testEnded()
{        this.testEnded("");}
0
public void testEnded(String host)
{    closeFile();}
0
private boolean writeToFile() throws IOException
{    String fileName = ((CompoundVariable) values[0]).execute().trim();    String content = ((CompoundVariable) values[1]).execute();    boolean append = true;    if (values.length >= 3) {        String appendString = ((CompoundVariable) values[2]).execute().toLowerCase().trim();        if (!appendString.isEmpty()) {            append = Boolean.parseBoolean(appendString);        }    }    content = NEW_LINE_PATTERN.matcher(content).replaceAll(System.lineSeparator());    Charset charset = StandardCharsets.UTF_8;    if (values.length == 4) {        String charsetParamValue = ((CompoundVariable) values[3]).execute();        if (StringUtils.isNotEmpty(charsetParamValue)) {            charset = Charset.forName(charsetParamValue);        }    }    if (fileName.isEmpty()) {                return false;    }        Lock localLock = new ReentrantLock();    Lock lock = lockMap.putIfAbsent(fileName, localLock);    try {        if (lock == null) {            localLock.lock();        } else {            lock.lock();        }        File file = new File(fileName);        File fileParent = file.getParentFile();        if (fileParent == null || (fileParent.exists() && fileParent.isDirectory() && fileParent.canWrite())) {            FileUtils.writeStringToFile(file, content, charset, append);        } else {                        return false;        }    } finally {        if (lock == null) {            localLock.unlock();        } else {            lock.unlock();        }    }    return true;}
1
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    boolean executionResult;    try {        executionResult = this.writeToFile();    } catch (UnsupportedCharsetException ue) {                executionResult = false;            } catch (IllegalCharsetNameException ie) {                executionResult = false;            } catch (IOException e) {                executionResult = false;            }    return String.valueOf(executionResult);}
1
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, 2, 4);    values = parameters.toArray();}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    String scriptName = FileServer.getFileServer().getScriptName();    if (scriptName == null) {        scriptName = "Save Test plan before calling " + KEY + " function";    }    return scriptName;}
0
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, 0);}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    JMeterContext context;    if (currentSampler != null) {        context = currentSampler.getThreadContext();    } else {        context = JMeterContextService.getContext();    }    AbstractThreadGroup threadGroup = context.getThreadGroup();    if (threadGroup != null) {        return threadGroup.getName();    } else {                return "";    }}
0
public List<String> getArgumentDesc()
{    return DESC;}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    String threadName = Thread.currentThread().getName();    return threadName.substring(threadName.lastIndexOf('-') + 1);}
0
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, 0, 0);}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    String datetime;    if (format.length() == 0) {                datetime = Long.toString(System.currentTimeMillis());    } else {                String fmt = aliases.get(format);        if (fmt == null) {                        fmt = format;        }        if (DIVISOR_PATTERN.matcher(fmt).matches()) {                                    long div = Long.parseLong(fmt.substring(1));            datetime = Long.toString(System.currentTimeMillis() / div);        } else {                        SimpleDateFormat df = new SimpleDateFormat(fmt);            datetime = df.format(new Date());        }    }    if (variable.length() > 0) {        JMeterVariables vars = getVariables();        if (vars != null) {                        vars.put(variable, datetime);        }    }    return datetime;}
0
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, 0, 2);    Object[] values = parameters.toArray();    int count = values.length;    if (count > 0) {        format = ((CompoundVariable) values[0]).execute();    }    if (count > 1) {        variable = ((CompoundVariable) values[1]).execute().trim();    }}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public String getFormat()
{    return format;}
0
public Locale getLocale()
{    return locale;}
0
public int hashCode()
{    return format.hashCode() + locale.hashCode();}
0
public boolean equals(Object other)
{    if (!(other instanceof LocaleFormatObject)) {        return false;    }    LocaleFormatObject otherError = (LocaleFormatObject) other;    return format.equals(otherError.getFormat()) && locale.getDisplayName().equals(otherError.getLocale().getDisplayName());}
0
public String toString()
{    return "LocaleFormatObject [format=" + format + ", locale=" + locale + "]";}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    String amountToShift = amountToShiftCompound.execute().trim();    String dateToShift = dateToShiftCompound.execute().trim();    LocalDateTime localDateTimeToShift = LocalDateTime.now(systemDefaultZoneID);    DateTimeFormatter formatter = null;    if (!StringUtils.isEmpty(format)) {        try {            LocaleFormatObject lfo = new LocaleFormatObject(format, locale);            formatter = dateTimeFormatterCache.get(lfo, this::createFormatter);        } catch (IllegalArgumentException ex) {                        return "";        }    }    if (!dateToShift.isEmpty()) {        try {            if (formatter != null) {                localDateTimeToShift = LocalDateTime.parse(dateToShift, formatter);            } else {                localDateTimeToShift = LocalDateTime.ofInstant(Instant.ofEpochMilli(Long.parseLong(dateToShift)), ZoneId.systemDefault());            }        } catch (DateTimeParseException | NumberFormatException ex) {                    }    }        if (!StringUtils.isEmpty(amountToShift)) {        try {            Duration duration = Duration.parse(amountToShift);            localDateTimeToShift = localDateTimeToShift.plus(duration);        } catch (DateTimeParseException ex) {                    }    }    String dateString;    if (formatter != null) {        dateString = localDateTimeToShift.format(formatter);    } else {        ZoneOffset offset = ZoneOffset.systemDefault().getRules().getOffset(localDateTimeToShift);        dateString = String.valueOf(localDateTimeToShift.toInstant(offset).toEpochMilli());    }    if (!StringUtils.isEmpty(variableName)) {        JMeterVariables vars = getVariables();        if (vars != null) {                        vars.put(variableName, dateString);        }    }    return dateString;}
1
private DateTimeFormatter createFormatter(LocaleFormatObject format)
{        return new DateTimeFormatterBuilder().appendPattern(format.getFormat()).parseDefaulting(ChronoField.NANO_OF_SECOND, 0).parseDefaulting(ChronoField.MILLI_OF_SECOND, 0).parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0).parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0).parseDefaulting(ChronoField.HOUR_OF_DAY, 0).parseDefaulting(ChronoField.DAY_OF_MONTH, 1).parseDefaulting(ChronoField.MONTH_OF_YEAR, 1).parseDefaulting(ChronoField.YEAR_OF_ERA, Year.now().getValue()).toFormatter(format.getLocale());}
1
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, 4, 5);    Object[] values = parameters.toArray();    format = ((CompoundVariable) values[0]).execute().trim();    dateToShiftCompound = (CompoundVariable) values[1];    amountToShiftCompound = (CompoundVariable) values[2];    if (values.length == 4) {        variableName = ((CompoundVariable) values[3]).execute().trim();    } else {        String localeAsString = ((CompoundVariable) values[3]).execute().trim();        if (!localeAsString.trim().isEmpty()) {            locale = LocaleUtils.toLocale(localeAsString);        }        variableName = ((CompoundVariable) values[4]).execute().trim();    }        if (dateTimeFormatterCache == null) {        dateTimeFormatterCache = Caffeine.newBuilder().maximumSize(100).build();    }}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    String rawString = ((CompoundVariable) values[0]).execute();    return StringEscapeUtils.unescapeJava(rawString);}
0
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, 1);    values = parameters.toArray();}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    String escapedString = ((CompoundVariable) values[0]).execute();    return StringEscapeUtils.unescapeHtml4(escapedString);}
0
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, 1);    values = parameters.toArray();}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{        String decodeString = "";    try {        String rawString = ((CompoundVariable) values[0]).execute();        decodeString = URLDecoder.decode(rawString, CHARSET_ENCODING);    } catch (UnsupportedEncodingException uee) {        return null;    }    return decodeString;}
0
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, 1);    values = parameters.toArray();}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{        String decodeString = "";    try {        String encodedString = ((CompoundVariable) values[0]).execute();        decodeString = URLEncoder.encode(encodedString, CHARSET_ENCODING);    } catch (UnsupportedEncodingException uee) {        return null;    }    return decodeString;}
0
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, 1);    values = parameters.toArray();}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    return UUID.randomUUID().toString();}
0
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, 0, 0);}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{    String variableName = ((CompoundVariable) values[0]).execute();    String variableDefault = variableName;    if (values.length > 1) {        variableDefault = ((CompoundVariable) values[1]).execute();    }    String variableValue = getVariables().get(variableName);    return variableValue == null ? variableDefault : variableValue;}
0
public void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    checkParameterCount(parameters, MIN_PARAMETER_COUNT, MAX_PARAMETER_COUNT);    values = parameters.toArray();}
0
public String getReferenceKey()
{    return KEY;}
0
public List<String> getArgumentDesc()
{    return desc;}
0
public synchronized String execute(SampleResult previousResult, Sampler currentSampler) throws InvalidVariableException
{        String myValue = "";    String fileName = ((CompoundVariable) values[0]).execute();    String xpathString = ((CompoundVariable) values[1]).execute();        myValue = XPathWrapper.getXPathString(fileName, xpathString);        return myValue;}
1
public List<String> getArgumentDesc()
{    return desc;}
0
public String getReferenceKey()
{    return KEY;}
0
public synchronized void setParameters(Collection<CompoundVariable> parameters) throws InvalidVariableException
{    if (log.isDebugEnabled()) {            }    values = parameters.toArray();    if (log.isDebugEnabled()) {        for (int i = 0; i < parameters.size(); i++) {                    }    }    checkParameterCount(parameters, 2);    /*         * Need to reset the containers for repeated runs; about the only way         * for functions to detect that a run is starting seems to be the         * setParameters() call.         */        XPathWrapper.clearAll();}
1
 int getNextRow()
{        return nextRow;}
0
private NodeList load(String xpath) throws IOException, FileNotFoundException, ParserConfigurationException, SAXException, TransformerException
{    NodeList nl = null;    try (FileInputStream fis = new FileInputStream(fileName);        BufferedInputStream bis = new BufferedInputStream(fis)) {        DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();        nl = XPathUtil.selectNodeList(builder.parse(bis), xpath);        if (log.isDebugEnabled()) {                    }    } catch (TransformerException | SAXException | ParserConfigurationException | IOException e) {                throw e;    }    return nl;}
1
public String getXPathString(int num)
{    return XPathUtil.getValueForNode(nodeList.item(num));}
0
public int nextRow()
{    int row = nextRow;    nextRow++;    if (    nextRow >= size()) {        nextRow = 0;    }        return row;}
1
public int size()
{    return (nodeList == null) ? -1 : nodeList.getLength();}
0
public String getFileName()
{    return fileName;}
0
private static XPathFileContainer open(String file, String xpathString)
{    if (log.isInfoEnabled()) {            }    XPathFileContainer frcc = null;    try {        frcc = new XPathFileContainer(file, xpathString);    } catch (TransformerException | SAXException | ParserConfigurationException | IOException e) {            }    return frcc;}
1
public static String getXPathString(String file, String xpathString)
{    Map<String, XPathFileContainer> my = filePacks.get();    String key = file + xpathString;    XPathFileContainer xpfc = my.get(key);    if (    xpfc == null) {        synchronized (fileContainers) {            xpfc = fileContainers.get(key);            if (xpfc == null) {                                xpfc = open(file, xpathString);            }            if (xpfc != null) {                                fileContainers.put(key, xpfc);            }        }                if (xpfc == null) {                                    return "";        }                my.put(key, xpfc);    }    if (xpfc.size() == 0) {                        return "";    }    int currentRow = xpfc.nextRow();    if (log.isDebugEnabled()) {            }    return xpfc.getXPathString(currentRow);}
1
public static void clearAll()
{        filePacks.get().clear();    if (log.isInfoEnabled()) {            }    synchronized (fileContainers) {        fileContainers.clear();    }}
1
public static void prepareCsv(@TempDir Path dir) throws IOException
{    Path path = dir.resolve("test.csv");    Files.write(path, Arrays.asList("a1,b1,c1,d1", "a2,b2,c2,d2", "a3,b3,c3,d3", "a4,b4,c4,d4"));    csvFilePath = path.toString();}
0
private CSVRead createCsvRead(String fileName, String column) throws Exception
{    CSVRead cr = new CSVRead();    cr.setParameters(FunctionTestHelper.makeParams(fileName, column));    return cr;}
0
private void eq(CSVRead a, String expected) throws InvalidVariableException
{    assertEquals(expected, a.execute(null, null));}
0
 void concurrentRequestsToSameCsv() throws Exception
{    CSVRead a = createCsvRead(csvFilePath, "1");    CSVRead b = createCsvRead(csvFilePath, "next");    final Synchronizer sync = new Synchronizer();    synchronized (sync) {                Future<Void> thread2 = CompletableFuture.runAsync(() -> {            synchronized (sync) {                try {                    eq(a, "b3");                    eq(b, "");                    sync.pass();                    eq(a, "b1");                    eq(b, "");                    eq(a, "b2");                    sync.pass();                    eq(b, "");                    eq(a, "b4");                    sync.done();                } catch (Throwable e) {                    throw sync.failure(e, "thread2");                }            }        });        eq(a, "b1");        eq(b, "");        eq(a, "b2");        sync.pass();        eq(b, "");        eq(a, "b4");        eq(b, "");        sync.pass();        eq(a, "b3");        eq(b, "");        sync.pass();                thread2.get();    }}
0
public void testCSVParamsFail() throws Exception
{    assertThrows(InvalidVariableException.class, () -> createCsvRead(null, null));    assertThrows(InvalidVariableException.class, () -> createCsvRead("", null));}
0
public void testCSVNoFile() throws Exception
{    CSVRead cr1 = createCsvRead("does/not-exist.csv", "1");        eq(cr1, "");    CSVRead cr2 = createCsvRead("does/not-exist.csv", "next");        eq(cr2, "");    CSVRead cr3 = createCsvRead("does/not-exist.csv", "*ABC");        eq(cr3, "");    CSVRead cr4 = createCsvRead("*ABC", "1");        eq(cr4, "");}
1
public void testCSValias() throws Exception
{    CSVRead cr1 = createCsvRead(csvFilePath, "*A");    CSVRead cr2 = createCsvRead("*A", "1");    CSVRead cr3 = createCsvRead("*A", "next");    CSVRead cr4 = createCsvRead(csvFilePath, "*B");    CSVRead cr5 = createCsvRead("*B", "2");    CSVRead cr6 = createCsvRead("*B", "next");        eq(cr1, "");        eq(cr2, "b1");        eq(cr4, "");        eq(cr5, "c1");        eq(cr3, "");        eq(cr2, "b2");        eq(cr5, "c1");        eq(cr6, "");        eq(cr5, "c2");}
0
public void CSVBlankLine(@TempDir Path tmp) throws Exception
{    String fileName = Files.write(tmp.resolve("blank.csv"), Arrays.asList("a1,b1,c1,d1", "a2,b2,c2,d2,", "", "The previous line is blank, and should be treated as EOF")).toString();    CSVRead csv1 = createCsvRead(fileName, "1");    CSVRead csv2 = createCsvRead(fileName, "next");    for (int i = 1; i <= 2; i++) {        eq(csv1, "b1");        eq(csv2, "");        eq(csv1, "b2");        eq(csv2, "");    }}
0
public void CSVRun() throws Exception
{    CSVRead cr1 = createCsvRead(csvFilePath, "1");    CSVRead cr2 = createCsvRead(csvFilePath, "2");    CSVRead cr3 = createCsvRead(csvFilePath, "3");    CSVRead cr4 = createCsvRead(csvFilePath, "next");    CSVRead cr5 = createCsvRead("", "0");    CSVRead cr6 = createCsvRead("", "next");    eq(cr1, "b1");    eq(cr2, "c1");    eq(cr3, "d1");    eq(cr4, "");    eq(cr1, "b2");    eq(cr2, "c2");    eq(cr3, "d2");    eq(cr4, "");    eq(cr1, "b3");    eq(cr2, "c3");    eq(cr3, "d3");    eq(cr4, "");    eq(cr1, "b4");    eq(cr2, "c4");    eq(cr3, "d4");    eq(cr4, "");    eq(cr1, "b1");    eq(cr2, "c1");    eq(cr3, "d1");    eq(cr5, "a1");    eq(cr6, "");    eq(cr5, "a2");}
0
public void setUp()
{    jmctx = JMeterContextService.getContext();    jmctx.setVariables(new JMeterVariables());    vars = jmctx.getVariables();}
0
public void evalTest1() throws Exception
{    EvalFunction eval = new EvalFunction();    vars.put("query", "select ${column} from ${table}");    vars.put("column", "name");    vars.put("table", "customers");    Collection<CompoundVariable> parms;    String s;    parms = makeParams("${query}", null, null);    eval.setParameters(parms);    s = eval.execute(null, null);    assertEquals("select name from customers", s);}
0
public void evalTest2() throws Exception
{    EvalVarFunction evalVar = new EvalVarFunction();    vars.put("query", "select ${column} from ${table}");    vars.put("column", "name");    vars.put("table", "customers");    Collection<CompoundVariable> parms;    String s;    parms = makeParams("query", null, null);    evalVar.setParameters(parms);    s = evalVar.execute(null, null);    assertEquals("select name from customers", s);}
0
 static Collection<CompoundVariable> makeParams(Iterable<Object> params)
{    Deque<CompoundVariable> res = new ArrayDeque<>();    for (Object param : params) {        res.add(new CompoundVariable(param == null ? null : String.valueOf(param)));    }        while (!res.isEmpty() && res.peekLast().getRawParameters() == null) {        res.removeLast();    }    return res;}
0
 static Collection<CompoundVariable> makeParams(Object... params)
{    return makeParams(Arrays.asList(params));}
0
private static BeanShell BSHFParams(String p1, String p2, String p3) throws Exception
{    BeanShell bsh = new BeanShell();    bsh.setParameters(makeParams(p1, p2, p3));    return bsh;}
0
public static Test suite() throws Exception
{    TestSuite allsuites = new TestSuite("Function PackageTest");    if (!BeanShellInterpreter.isInterpreterPresent()) {        final String msg = "BeanShell jar not present, tests ignored";            } else {        TestSuite bsh = new TestSuite("BeanShell");        bsh.addTest(new PackageTest("BSH1"));        allsuites.addTest(bsh);    }        TestSuite xpath = new TestSuite("XPath");    xpath.addTest(new PackageTest("XPathtestColumns"));    xpath.addTest(new PackageTest("XPathtestDefault"));    xpath.addTest(new PackageTest("XPathtestNull"));    xpath.addTest(new PackageTest("XPathtestrowNum"));    xpath.addTest(new PackageTest("XPathEmpty"));    xpath.addTest(new PackageTest("XPathFile"));    xpath.addTest(new PackageTest("XPathFile1"));    xpath.addTest(new PackageTest("XPathFile2"));    xpath.addTest(new PackageTest("XPathNoFile"));    allsuites.addTest(xpath);    return allsuites;}
1
public void setUp()
{    jmctx = JMeterContextService.getContext();    jmctx.setVariables(new JMeterVariables());    vars = jmctx.getVariables();}
0
public void BSH1() throws Exception
{    String fn = "src/test/resources/org/apache/jmeter/functions/testfiles/BeanShellTest.bsh";    try {        BSHFParams(null, null, null);        fail("Expected InvalidVariableException");    } catch (InvalidVariableException e) {    }    try {        BSHFParams("", "", "");        fail("Expected InvalidVariableException");    } catch (InvalidVariableException e) {    }    BeanShell bsh;    try {        bsh = BSHFParams("", "", null);        assertEquals("", bsh.execute());    } catch (InvalidVariableException e) {        fail("BeanShell not present");    }    bsh = BSHFParams("1", null, null);    assertEquals("1", bsh.execute());    bsh = BSHFParams("1+1", "VAR", null);    assertEquals("2", bsh.execute());    assertEquals("2", vars.get("VAR"));        bsh = BSHFParams("return threadName", null, null);    assertEquals(Thread.currentThread().getName(), bsh.execute());    bsh = BSHFParams("return log.getClass().getName()", null, null);    assertEquals(log.getClass().getName(), bsh.execute());        bsh = BSHFParams("source (\"" + fn + "\")", null, null);    assertEquals("9876", bsh.execute());        bsh = BSHFParams("${SCR1}", null, null);    vars.put("SCR1", "var1=11");    assertEquals("11", bsh.execute());    vars.put("SCR1", "var2=22");    assertEquals("22", bsh.execute());    vars.put("SCR1", "x=var1");    assertEquals("11", bsh.execute());    vars.put("SCR1", "++x");    assertEquals("12", bsh.execute());    vars.put("VAR1", "test");    vars.put("SCR1", "vars.get(\"VAR1\")");    assertEquals("test", bsh.execute());        JMeterUtils.getJMeterProperties().setProperty(BeanShell.INIT_FILE, fn);    bsh = BSHFParams("${SCR2}", null, null);    vars.put("SCR2", "getprop(\"" + BeanShell.INIT_FILE + "\")");        assertEquals(fn, bsh.execute());    vars.put("SCR2", "getprop(\"avavaav\",\"default\")");    assertEquals("default", bsh.execute());    vars.put("SCR2", "++i");    assertEquals("1", bsh.execute());    vars.put("SCR2", "++i");    assertEquals("2", bsh.execute());}
0
 void pass()
{    done();    try {        wait(1000);    } catch (InterruptedException e) {        System.out.println(e);    }}
0
 void done()
{    notifyAll();}
0
public void XPathtestNull() throws Exception
{    try {        new XPathFileContainer("nosuch.xml", "/");        fail("Should not find the file");    } catch (FileNotFoundException e) {    }}
0
public void XPathtestrowNum() throws Exception
{    XPathFileContainer f = new XPathFileContainer(getResourceFilePath("xpathfilecontainer.xml"), "/project/target/@name");    assertNotNull(f);    int myRow = f.nextRow();    assertEquals(0, myRow);    assertEquals(1, f.getNextRow());    myRow = f.nextRow();    assertEquals(1, myRow);    assertEquals(2, f.getNextRow());    myRow = f.nextRow();    assertEquals(2, myRow);    assertEquals(3, f.getNextRow());}
0
public void XPathtestColumns() throws Exception
{    XPathFileContainer f = new XPathFileContainer(getResourceFilePath("xpathfilecontainer.xml"), "/project/target/@name");    assertNotNull(f);    assertTrue("Not empty", f.size() > 0);    int last = 0;    for (int i = 0; i < f.size(); i++) {        last = f.nextRow();            }    assertEquals(last + 1, f.size());}
1
public void XPathtestDefault() throws Exception
{    XPathFileContainer f = new XPathFileContainer(getResourceFilePath("xpathfilecontainer.xml"), "/project/@default");    assertNotNull(f);    assertTrue("Not empty", f.size() > 0);    assertEquals("install", f.getXPathString(0));}
0
public void XPathEmpty() throws Exception
{    XPath xp = setupXPath("", "");    String val = xp.execute();    assertEquals("", val);    val = xp.execute();    assertEquals("", val);    val = xp.execute();    assertEquals("", val);}
0
public void XPathNoFile() throws Exception
{    XPath xp = setupXPath("no-such-file", "");    String val = xp.execute();        assertEquals("", val);}
0
public void XPathFile() throws Exception
{    XPath xp = setupXPath("testfiles/XPathTest2.xml", "note/body");    assertEquals("Don't forget me this weekend!", xp.execute());    xp = setupXPath("testfiles/XPathTest2.xml", "//note2");    assertEquals("", xp.execute());    xp = setupXPath("testfiles/XPathTest2.xml", "//note/to");    assertEquals("Tove", xp.execute());}
0
public void XPathFile1() throws Exception
{    XPath xp = setupXPath("testfiles/XPathTest.xml", "//user/@username");    assertEquals("u1", xp.execute());    assertEquals("u2", xp.execute());    assertEquals("u3", xp.execute());    assertEquals("u4", xp.execute());    assertEquals("u5", xp.execute());    assertEquals("u1", xp.execute());}
0
public void XPathFile2() throws Exception
{    XPath xp1 = setupXPath("testfiles/XPathTest.xml", "//user/@username");    XPath xp1a = setupXPath("testfiles/XPathTest.xml", "//user/@username");    XPath xp2 = setupXPath("testfiles/XPathTest.xml", "//user/@password");    XPath xp2a = setupXPath("testfiles/XPathTest.xml", "//user/@password");    assertEquals("u1", xp1.execute());    assertEquals("p1", xp2.execute());    assertEquals("p2", xp2.execute());    assertEquals("u2", xp1a.execute());    assertEquals("u3", xp1.execute());    assertEquals("u4", xp1.execute());    assertEquals("p3", xp2a.execute());}
0
private XPath setupXPath(String file, String expr) throws Exception
{    XPath xp = new XPath();    xp.setParameters(makeParams(new Object[] { getResourceFilePath(file), expr }));    return xp;}
0
public void setup()
{    JMeterContextService.getContext().setVariables(new JMeterVariables());}
0
public void tearDown()
{    JMeterContextService.getContext().clear();}
0
public void randomTest1() throws Exception
{    Random r = new Random();    Collection<CompoundVariable> parms = makeParams("0", "10000000000", "VAR");    r.setParameters(parms);    String s = r.execute(null, null);    long l = Long.parseLong(s);    assertTrue(l >= 0 && l <= 10000000000L);    parms = makeParams("1", "1", "VAR");    r.setParameters(parms);    s = r.execute(null, null);    l = Long.parseLong(s);    assertEquals(1, l);    String varValue = JMeterContextService.getContext().getVariables().get("VAR");    assertEquals("1", varValue);}
0
public void randomStringTest1() throws Exception
{    RandomString r = new RandomString();    Collection<CompoundVariable> parms = makeParams("10", "abcdefghijklmnopqrstuvwxyz", "VAR");    r.setParameters(parms);    String s = r.execute(null, null);    Assert.assertNotNull(s);    assertEquals(10, s.length());    assertTrue("Random String contains unexpected character", stringOnlyContainsChars(s, "abcdefghijklmnopqrstuvwxyz"));    String varValue = JMeterContextService.getContext().getVariables().get("VAR");    assertEquals(s, varValue);    parms = makeParams("5", "", "VAR2");    r.setParameters(parms);    s = r.execute(null, null);    Assert.assertNotNull(s);    assertEquals(5, s.length());    varValue = JMeterContextService.getContext().getVariables().get("VAR2");    assertEquals(s, varValue);}
0
private boolean stringOnlyContainsChars(String value, String allowedChars)
{    Set<Character> allowedCharsAsSet = allowedChars.chars().mapToObj(i -> (char) i).collect(Collectors.toCollection(HashSet::new));    return value.chars().allMatch(c -> allowedCharsAsSet.contains((char) c));}
0
public void setUp()
{    jmctx = JMeterContextService.getContext();    jmctx.setVariables(new JMeterVariables());    vars = jmctx.getVariables();}
0
public void splitTest1() throws Exception
{    String src = "";    try {        splitParams("a,b,c", null, null);        fail("Expected InvalidVariableException (wrong number of parameters)");    } catch (InvalidVariableException e) {        }    src = "a,b,c";    SplitFunction split;    split = splitParams(src, "VAR1", null);    assertEquals(src, split.execute());    assertEquals(src, vars.get("VAR1"));    assertEquals("3", vars.get("VAR1_n"));    assertEquals("a", vars.get("VAR1_1"));    assertEquals("b", vars.get("VAR1_2"));    assertEquals("c", vars.get("VAR1_3"));    assertNull(vars.get("VAR1_4"));    split = splitParams(src, "VAR1", "");    assertEquals(src, split.execute());    assertEquals(src, vars.get("VAR1"));    assertEquals("3", vars.get("VAR1_n"));    assertEquals("a", vars.get("VAR1_1"));    assertEquals("b", vars.get("VAR1_2"));    assertEquals("c", vars.get("VAR1_3"));    assertNull(vars.get("VAR1_4"));    split = splitParams(src, "VAR2", ",");    assertEquals(src, split.execute());    assertEquals(src, vars.get("VAR2"));    assertEquals("3", vars.get("VAR2_n"));    assertEquals("a", vars.get("VAR2_1"));    assertEquals("b", vars.get("VAR2_2"));    assertEquals("c", vars.get("VAR2_3"));    assertNull(vars.get("VAR2_4"));    src = "a|b|c";    split = splitParams(src, "VAR3", "|");    assertEquals(src, split.execute());    assertEquals(src, vars.get("VAR3"));    assertEquals("3", vars.get("VAR3_n"));    assertEquals("a", vars.get("VAR3_1"));    assertEquals("b", vars.get("VAR3_2"));    assertEquals("c", vars.get("VAR3_3"));    assertNull(vars.get("VAR3_4"));    src = "a|b||";    split = splitParams(src, "VAR4", "|");    assertEquals(src, split.execute());    assertEquals(src, vars.get("VAR4"));    assertEquals("4", vars.get("VAR4_n"));    assertEquals("a", vars.get("VAR4_1"));    assertEquals("b", vars.get("VAR4_2"));    assertEquals("?", vars.get("VAR4_3"));    assertNull(vars.get("VAR4_5"));    src = "a,,c";    vars.put("VAR", src);    split = splitParams("${VAR}", "VAR", null);    assertEquals(src, split.execute());    assertEquals("3", vars.get("VAR_n"));    assertEquals("a", vars.get("VAR_1"));    assertEquals("?", vars.get("VAR_2"));    assertEquals("c", vars.get("VAR_3"));    assertNull(vars.get("VAR_4"));    src = "a,b";    vars.put("VAR", src);    split = splitParams("${VAR}", "VAR", null);    assertEquals(src, split.execute());    assertEquals("2", vars.get("VAR_n"));    assertEquals("a", vars.get("VAR_1"));    assertEquals("b", vars.get("VAR_2"));    assertNull(vars.get("VAR_3"));    src = "a,,c,";    vars.put("VAR", src);    split = splitParams("${VAR}", "VAR5", null);    assertEquals(src, split.execute());    assertEquals("4", vars.get("VAR5_n"));    assertEquals("a", vars.get("VAR5_1"));    assertEquals("?", vars.get("VAR5_2"));    assertEquals("c", vars.get("VAR5_3"));    assertEquals("?", vars.get("VAR5_4"));    assertNull(vars.get("VAR5_5"));}
0
private static SplitFunction splitParams(String p1, String p2, String p3) throws Exception
{    SplitFunction split = new SplitFunction();    Collection<CompoundVariable> parms = new LinkedList<>();    parms.add(new CompoundVariable(p1));    if (p2 != null) {        parms.add(new CompoundVariable(p2));    }    if (p3 != null) {        parms.add(new CompoundVariable(p3));    }    split.setParameters(parms);    return split;}
0
public static void init(@TempDir Path tempDir) throws IOException
{    dir = tempDir;    Files.write(dir.resolve("SFFTest1.txt"), Arrays.asList("uno", "dos", "tres", "cuatro", "cinco"));}
0
public void SFFTest1() throws Exception
{    Files.write(dir.resolve("SFFTest2.txt"), Arrays.asList("one", "two", "three", "four", "five"));    Files.write(dir.resolve("SFFTest3.txt"), Arrays.asList("eins", "zwei", "drei", "fier", "fuenf"));            StringFromFile sff1 = createSFF("'" + dir.toString().replaceAll("'", "''") + "/SFFTest'#'.'txt", "", "1", "3");    assertEquals("uno", sff1.execute());    assertEquals("dos", sff1.execute());    assertEquals("tres", sff1.execute());    assertEquals("cuatro", sff1.execute());    assertEquals("cinco", sff1.execute());    assertEquals("one", sff1.execute());    assertEquals("two", sff1.execute());    sff1.execute();    sff1.execute();    assertEquals("five", sff1.execute());    assertEquals("eins", sff1.execute());    sff1.execute();    sff1.execute();    sff1.execute();    assertEquals("fuenf", sff1.execute());    assertThrows(JMeterStopThreadException.class, sff1::execute);}
0
public void SFFTest2() throws Exception
{    StringFromFile sff = createSFF(dir.resolve("SFFTest1.txt"), "");    assertEquals("uno", sff.execute());    assertEquals("dos", sff.execute());    assertEquals("tres", sff.execute());    assertEquals("cuatro", sff.execute());    assertEquals("cinco", sff.execute());        assertEquals("uno", sff.execute());    assertEquals("dos", sff.execute());    assertEquals("tres", sff.execute());    assertEquals("cuatro", sff.execute());    assertEquals("cinco", sff.execute());}
0
public void SFFTest3() throws Exception
{    StringFromFile sff = createSFF(dir.resolve("SFFTest1.txt"), "", "", "");    assertEquals("uno", sff.execute());    assertEquals("dos", sff.execute());    assertEquals("tres", sff.execute());    assertEquals("cuatro", sff.execute());    assertEquals("cinco", sff.execute());        assertEquals("uno", sff.execute());    assertEquals("dos", sff.execute());    assertEquals("tres", sff.execute());    assertEquals("cuatro", sff.execute());    assertEquals("cinco", sff.execute());}
0
public void SFFTest4() throws Exception
{    StringFromFile sff = createSFF(dir.resolve("InvalidFileName.txt"), "", "", "");    assertEquals(StringFromFile.ERR_IND, sff.execute());    assertEquals(StringFromFile.ERR_IND, sff.execute());}
0
public void SFFTest5() throws Exception
{    StringFromFile sff = createSFF(dir.resolve("SFFTest1.txt"), "", "", "2");    assertEquals("uno", sff.execute());    assertEquals("dos", sff.execute());    assertEquals("tres", sff.execute());    assertEquals("cuatro", sff.execute());    assertEquals("cinco", sff.execute());    assertEquals("uno", sff.execute());    assertEquals("dos", sff.execute());    assertEquals("tres", sff.execute());    assertEquals("cuatro", sff.execute());    assertEquals("cinco", sff.execute());    assertThrows(JMeterStopThreadException.class, sff::execute);}
0
private StringFromFile createSFF(Object... params) throws Exception
{    StringFromFile sff = new StringFromFile();    sff.setParameters(FunctionTestHelper.makeParams(params));    return sff;}
0
public void setUp()
{    JMeterContext jmctx = JMeterContextService.getContext();    jmctx.setVariables(new JMeterVariables());    vars = jmctx.getVariables();}
0
public void sumTest() throws Exception
{    String maxIntVal = Integer.toString(Integer.MAX_VALUE);    String minIntVal = Integer.toString(Integer.MIN_VALUE);    IntSum intSum = new IntSum();    checkInvalidParameterCounts(intSum, 2);    checkSum(intSum, "3", new String[] { "1", "2" });    checkSumNoVar(intSum, "3", new String[] { "1", "2" });    checkSum(intSum, "1", new String[] { "-1", "1", "1", "1", "-2", "1" });    checkSumNoVar(intSum, "1", new String[] { "-1", "1", "1", "1", "-2", "1" });    checkSumNoVar(intSum, "-1", new String[] { "-1", "1", "1", "1", "-2", "-1" });    checkSum(intSum, maxIntVal, new String[] { maxIntVal, "0" });        checkSum(intSum, minIntVal, new String[] { maxIntVal, "1" });    LongSum longSum = new LongSum();    checkInvalidParameterCounts(longSum, 2);    checkSum(longSum, "3", new String[] { "1", "2" });    checkSum(longSum, "1", new String[] { "-1", "1", "1", "1", "-1", "0" });    checkSumNoVar(longSum, "3", new String[] { "1", "2" });    checkSumNoVar(longSum, "1", new String[] { "-1", "1", "1", "1", "-1", "0" });    checkSumNoVar(longSum, "0", new String[] { "-1", "1", "1", "1", "-1", "-1" });    String maxIntVal_1 = Long.toString(1 + (long) Integer.MAX_VALUE);    checkSum(longSum, maxIntVal, new String[] { maxIntVal, "0" });        checkSum(longSum, maxIntVal_1, new String[] { maxIntVal, "1" });    String maxLongVal = Long.toString(Long.MAX_VALUE);    String minLongVal = Long.toString(Long.MIN_VALUE);    checkSum(longSum, maxLongVal, new String[] { maxLongVal, "0" });        checkSum(longSum, minLongVal, new String[] { maxLongVal, "1" });}
0
private void checkSum(AbstractFunction func, String value, String[] addends) throws Exception
{    Collection<CompoundVariable> parms = Arrays.stream(addends).map(CompoundVariable::new).collect(Collectors.toCollection(LinkedList::new));    parms.add(new CompoundVariable("Result"));    func.setParameters(parms);    assertEquals(value, func.execute(null, null));    assertEquals(value, vars.getObject("Result"));}
0
private void checkSumNoVar(AbstractFunction func, String value, String[] addends) throws Exception
{    Collection<CompoundVariable> parms = Arrays.stream(addends).map(CompoundVariable::new).collect(Collectors.toCollection(LinkedList::new));    func.setParameters(parms);    assertEquals(value, func.execute(null, null));}
0
 void done()
{    rethrow();    notifyAll();}
0
 void pass()
{    done();    try {        wait(1000);        rethrow();    } catch (InterruptedException e) {        Thread.currentThread().interrupt();        throw new IllegalStateException("Did not receive 'continue' signal within 1sec");    }}
0
 RuntimeException failure(Throwable t, String message)
{    t.addSuppressed(new RuntimeException(message));    return failure(t);}
0
 RuntimeException failure(Throwable t)
{    failure = t;    rethrow();    return null;}
0
private void rethrow()
{    Throwable failure = this.failure;    if (failure == null) {        return;    }    if (failure instanceof RuntimeException) {        throw (RuntimeException) failure;    }    if (failure instanceof Error) {        throw (Error) failure;    }    throw new RuntimeException("wrap", failure) {        @Override        public synchronized Throwable fillInStackTrace() {            return this;        }    };}
0
public synchronized Throwable fillInStackTrace()
{    return this;}
0
public void setUp()
{    changeCase = new ChangeCase();    JMeterContext jmctx = JMeterContextService.getContext();    String data = "dummy data";    result = new SampleResult();    result.setResponseData(data, null);    JMeterVariables vars = new JMeterVariables();    jmctx.setVariables(vars);    jmctx.setPreviousResult(result);}
0
public void testParameterCountIsPropDefined() throws Exception
{    checkInvalidParameterCounts(changeCase, 1, 3);}
0
private String execute(String... params) throws InvalidVariableException
{    List<CompoundVariable> testParams = Arrays.stream(params).map(CompoundVariable::new).collect(Collectors.toList());    changeCase.setParameters(testParams);    return changeCase.execute(result, null);}
0
public void testChangeCase() throws Exception
{    String returnValue = execute("myUpperTest");    assertEquals("MYUPPERTEST", returnValue);}
0
public void testChangeCaseLower() throws Exception
{    String returnValue = execute("myUpperTest", "LOWER");    assertEquals("myuppertest", returnValue);}
0
public void testChangeCaseWrongMode() throws Exception
{    String returnValue = execute("myUpperTest", "Wrong");    assertEquals("myUpperTest", returnValue);}
0
public void testChangeCaseCapitalize() throws Exception
{    String returnValue = execute("ab-CD eF", "CAPITALIZE");    assertEquals("Ab-CD eF", returnValue);}
0
public void testChangeCaseError() throws Exception
{    changeCase.setParameters(new LinkedList<>());    changeCase.execute(result, null);}
0
public void testEmptyMode() throws Exception
{    String returnValue = execute("ab-CD eF", "");    assertEquals("AB-CD EF", returnValue);}
0
public void testChangeCaseWrongModeIgnore() throws Exception
{    String returnValue = execute("ab-CD eF", "Wrong");    assertEquals("ab-CD eF", returnValue);}
0
public void setUp()
{    dateConvert = new DateTimeConvertFunction();    result = new SampleResult();    jmctx = JMeterContextService.getContext();    String data = "dummy data";    result.setResponseData(data, null);    vars = new JMeterVariables();    jmctx.setVariables(vars);    jmctx.setPreviousResult(result);    params = new LinkedList<>();}
0
public void testParameterCount512() throws Exception
{    checkInvalidParameterCounts(dateConvert, 3, 4);}
0
public void testDateTimeConvert() throws Exception
{    params.add(new CompoundVariable("2017-01-02 21:00:21"));    params.add(new CompoundVariable("yyyy-MM-dd HH:mm:ss"));    params.add(new CompoundVariable("dd-MM-yyyy hh:mm"));    dateConvert.setParameters(params);    String returnValue = dateConvert.execute(result, null);    assertEquals("02-01-2017 09:00", returnValue);}
0
public void testDateTimeConvertEpochTime() throws Exception
{    TimeZone initialTZ = TimeZone.getDefault();    TimeZone.setDefault(TimeZone.getTimeZone("GMT"));    params.add(new CompoundVariable("1526574881000"));    params.add(new CompoundVariable(""));    params.add(new CompoundVariable("dd/MM/yyyy HH:mm"));    dateConvert.setParameters(params);    String returnValue = dateConvert.execute(result, null);    assertEquals("17/05/2018 16:34", returnValue);    TimeZone.setDefault(initialTZ);}
0
public void testDateConvert() throws Exception
{    params.add(new CompoundVariable("2017-01-02"));    params.add(new CompoundVariable("yyyy-MM-dd"));    params.add(new CompoundVariable("dd-MM-yyyy"));    dateConvert.setParameters(params);    String returnValue = dateConvert.execute(result, null);    assertEquals("02-01-2017", returnValue);}
0
public void testDateConvertWithVariable() throws Exception
{    params.add(new CompoundVariable("2017-01-02"));    params.add(new CompoundVariable("yyyy-MM-dd"));    params.add(new CompoundVariable("dd-MM-yyyy"));    params.add(new CompoundVariable("varName"));    dateConvert.setParameters(params);    dateConvert.execute(result, null);    assertEquals("02-01-2017", vars.get("varName"));}
0
public void testDateConvertError() throws Exception
{    params.add(new CompoundVariable("2017-01-02"));    params.add(new CompoundVariable("yyyy-MM-dd"));    dateConvert.setParameters(params);    dateConvert.execute(result, null);}
0
public void testDateConvertErrorFormat() throws Exception
{    params.add(new CompoundVariable("2017-01-02"));    params.add(new CompoundVariable("yyyy-MM-dd"));    params.add(new CompoundVariable("abcd"));    dateConvert.setParameters(params);    assertEquals(dateConvert.execute(result, null), "");}
0
public void testDateConvertDateError() throws Exception
{    params.add(new CompoundVariable("a2017-01-02"));    params.add(new CompoundVariable("yyyy-MM-dd"));    params.add(new CompoundVariable("dd-MM-yyyy HH:mm:ss"));    dateConvert.setParameters(params);    assertEquals(dateConvert.execute(result, null), "");}
0
public void setUp()
{    digest = new DigestEncodeFunction();    result = new SampleResult();    jmctx = JMeterContextService.getContext();    String data = "dummy data";    result.setResponseData(data, null);    vars = new JMeterVariables();    jmctx.setVariables(vars);    jmctx.setPreviousResult(result);    params = new LinkedList<>();}
0
public void testParameterCount512() throws Exception
{    checkInvalidParameterCounts(digest, 2, 5);}
0
public void testSha512WithSalt() throws Exception
{    params.add(new CompoundVariable("SHA-512"));    params.add(new CompoundVariable("nofile"));    params.add(new CompoundVariable("salt"));    digest.setParameters(params);    String returnValue = digest.execute(result, null);    assertEquals("abc8c7a1c814c74d5882e527d21fabfccf480716df9d17bae73e5e767992d8a2a47033459a9ea91aca3186f75bfbe559419109bc44c1e6dfd618101fdc0beb1b", returnValue);}
0
public void testSha512WithSaltAndSpace() throws Exception
{    params.add(new CompoundVariable("SHA-512"));    params.add(new CompoundVariable("nofile"));    params.add(new CompoundVariable("salt "));    digest.setParameters(params);    String returnValue = digest.execute(result, null);    assertEquals("961451eb5870ded3fa484ad49fd1481ae3c6decdcc560200e70624a1d62ad0d1793edf3c8eccd0786bffab0b3e4421f54c7fd11a9e7461580352346d039b8e16", returnValue);}
0
public void testSha512WithSaltAndSpaceInBoth() throws Exception
{    params.add(new CompoundVariable("SHA-512"));    params.add(new CompoundVariable("nofile "));    params.add(new CompoundVariable("salt "));    digest.setParameters(params);    String returnValue = digest.execute(result, null);    assertEquals("3968fd028934466fa095f6323c527148e87d7b74601d1db5f474748dd7c643b4f508e46beb29a405ec658a64c0f581461e99eca063414099af0b63dc890b5739", returnValue);}
0
public void testSha1() throws Exception
{    params.add(new CompoundVariable("SHA-1"));    params.add(new CompoundVariable("nofile"));    digest.setParameters(params);    String returnValue = digest.execute(result, null);    assertEquals("4ea2ced10057872be25371cfe638d3b096c58f2f", returnValue);}
0
public void testSha1Variable() throws Exception
{    params.add(new CompoundVariable("SHA-1"));    params.add(new CompoundVariable("nofile"));    params.add(new CompoundVariable(""));    params.add(new CompoundVariable("true"));    params.add(new CompoundVariable("newVar"));    digest.setParameters(params);    String returnValue = digest.execute(result, null);    assertEquals("4EA2CED10057872BE25371CFE638D3B096C58F2F", returnValue);}
0
public void testSha512Variable() throws Exception
{    params.add(new CompoundVariable("SHA-512"));    params.add(new CompoundVariable("nofile"));    params.add(new CompoundVariable(""));    params.add(new CompoundVariable("true"));    params.add(new CompoundVariable("newVar"));    digest.setParameters(params);    String returnValue = digest.execute(result, null);    assertEquals("58DA94D45A97B35B31D7F76D2EBAC184BC4BDA512B966CDBE43FDE1CAE1CFAF89617082CA89928FB5DC1C75D60B93ADB5631F518F970CA6DCC196E1AFC678B8C", returnValue);}
0
public void testSha512Error() throws Exception
{    params.add(new CompoundVariable("nofile"));    digest.setParameters(params);    digest.execute(result, null);}
0
public void testSha1Error() throws Exception
{    params.add(new CompoundVariable("SHA-1"));    digest.setParameters(params);    digest.execute(result, null);}
0
public void setUp()
{    function = new EscapeOroRegexpChars();    result = new SampleResult();    jmctx = JMeterContextService.getContext();    String data = "The quick brown fox";    result.setResponseData(data, null);    vars = new JMeterVariables();    jmctx.setVariables(vars);    jmctx.setPreviousResult(result);    params = new LinkedList<>();}
0
public void testParameterCount() throws Exception
{    checkInvalidParameterCounts(function, 1, 2);}
0
public void testNOEscape() throws Exception
{    params.add(new CompoundVariable("toto1titi"));    function.setParameters(params);    String ret = function.execute(result, null);    assertEquals("toto1titi", ret);}
0
public void testEscapeSpace() throws Exception
{    params.add(new CompoundVariable("toto1 titi"));    function.setParameters(params);    String ret = function.execute(result, null);    assertEquals("toto1\\ titi", ret);}
0
public void testEscape() throws Exception
{    params.add(new CompoundVariable("toto(.+?)titi"));    function.setParameters(params);    String ret = function.execute(result, null);    assertEquals("toto\\(\\.\\+\\?\\)titi", ret);}
0
public void testEscapeWithVars() throws Exception
{    params.add(new CompoundVariable("toto(.+?)titi"));    params.add(new CompoundVariable("exportedVar"));    function.setParameters(params);    String ret = function.execute(result, null);    assertEquals("toto\\(\\.\\+\\?\\)titi", ret);    assertEquals("toto\\(\\.\\+\\?\\)titi", vars.get("exportedVar"));}
0
public void testEscape2() throws Exception
{    params.add(new CompoundVariable("[^\"].+?"));    function.setParameters(params);    String ret = function.execute(result, null);    assertEquals("\\[\\^\\\"\\]\\.\\+\\?", ret);}
0
public void setUp()
{    defaultBase = FileServer.getDefaultBase();    FileServer.getFileServer().setBase(new File(JMeterUtils.getJMeterHome() + "/bin"));}
0
public void tearDown()
{    FileServer.getFileServer().setBase(new File(defaultBase));}
0
public void testNull() throws Exception
{    new FileRowColContainer(findTestPath("testfiles/xyzxyz"));}
0
public void testrowNum() throws Exception
{    FileRowColContainer f = new FileRowColContainer(findTestPath("testfiles/unit/TestFileRowColContainer.csv"));    assertNotNull(f);    assertEquals("Expected 4 lines", 4, f.getSize());    assertEquals(0, f.nextRow());    assertEquals(1, f.nextRow());    assertEquals(2, f.nextRow());    assertEquals(3, f.nextRow());    assertEquals(0, f.nextRow());}
0
public void testRowNumRelative() throws Exception
{    FileRowColContainer f = new FileRowColContainer("testfiles/unit/TestFileRowColContainer.csv");    assertNotNull(f);    assertEquals("Expected 4 lines", 4, f.getSize());    assertEquals(0, f.nextRow());    assertEquals(1, f.nextRow());    assertEquals(2, f.nextRow());    assertEquals(3, f.nextRow());    assertEquals(0, f.nextRow());}
0
public void testColumns() throws Exception
{    FileRowColContainer f = new FileRowColContainer(findTestPath("testfiles/unit/TestFileRowColContainer.csv"));    assertNotNull(f);    assertTrue("Not empty", f.getSize() > 0);    int myRow = f.nextRow();    assertEquals(0, myRow);    assertEquals("a1", f.getColumn(myRow, 0));    assertEquals("d1", f.getColumn(myRow, 3));    try {        f.getColumn(myRow, 4);        fail("Expected out of bounds");    } catch (IndexOutOfBoundsException e) {    }    myRow = f.nextRow();    assertEquals(1, myRow);    assertEquals("b2", f.getColumn(myRow, 1));    assertEquals("c2", f.getColumn(myRow, 2));}
0
public void testColumnsComma() throws Exception
{    FileRowColContainer f = new FileRowColContainer(findTestPath("testfiles/unit/TestFileRowColContainer.csv"), ",");    assertNotNull(f);    assertTrue("Not empty", f.getSize() > 0);    int myRow = f.nextRow();    assertEquals(0, myRow);    assertEquals("a1", f.getColumn(myRow, 0));    assertEquals("d1", f.getColumn(myRow, 3));    try {        f.getColumn(myRow, 4);        fail("Expected out of bounds");    } catch (IndexOutOfBoundsException e) {    }    myRow = f.nextRow();    assertEquals(1, myRow);    assertEquals("b2", f.getColumn(myRow, 1));    assertEquals("c2", f.getColumn(myRow, 2));}
0
public void testColumnsTab() throws Exception
{    FileRowColContainer f = new FileRowColContainer(findTestPath("testfiles/test.tsv"), "\t");    assertNotNull(f);    assertTrue("Not empty", f.getSize() > 0);    int myRow = f.nextRow();    assertEquals(0, myRow);    assertEquals("a1", f.getColumn(myRow, 0));    assertEquals("d1", f.getColumn(myRow, 3));    try {        f.getColumn(myRow, 4);        fail("Expected out of bounds");    } catch (IndexOutOfBoundsException e) {    }    myRow = f.nextRow();    assertEquals(1, myRow);    assertEquals("b2", f.getColumn(myRow, 1));    assertEquals("c2", f.getColumn(myRow, 2));}
0
public void testEmptyCols() throws Exception
{    FileRowColContainer f = new FileRowColContainer(findTestPath("testfiles/testempty.csv"));    assertNotNull(f);    assertEquals("Expected 4 lines", 4, f.getSize());    int myRow = f.nextRow();    assertEquals(0, myRow);    assertEquals("", f.getColumn(myRow, 0));    assertEquals("d1", f.getColumn(myRow, 3));    myRow = f.nextRow();    assertEquals(1, myRow);    assertEquals("", f.getColumn(myRow, 1));    assertEquals("c2", f.getColumn(myRow, 2));    myRow = f.nextRow();    assertEquals(2, myRow);    assertEquals("b3", f.getColumn(myRow, 1));    assertEquals("", f.getColumn(myRow, 2));    myRow = f.nextRow();    assertEquals(3, myRow);    assertEquals("b4", f.getColumn(myRow, 1));    assertEquals("c4", f.getColumn(myRow, 2));    assertEquals("", f.getColumn(myRow, 3));}
0
public void setUp()
{    function = new FileToString();    result = new SampleResult();    jmctx = JMeterContextService.getContext();    String data = "The quick brown fox";    result.setResponseData(data, null);    vars = new JMeterVariables();    jmctx.setVariables(vars);    jmctx.setPreviousResult(result);    params = new LinkedList<>();}
0
public void testParameterCount() throws Exception
{    checkInvalidParameterCounts(function, 1, 3);}
0
public void testReadError() throws Exception
{    params.add(new CompoundVariable("nofile"));    function.setParameters(params);    String returnValue = function.execute(result, null);    assertEquals("**ERR**", returnValue);}
0
public void testRead() throws Exception
{    File file = new File(JMeterUtils.getJMeterBinDir(), "jmeter.properties");    params.add(new CompoundVariable(file.getAbsolutePath()));    function.setParameters(params);    String returnValue = function.execute(result, null);    Assert.assertTrue(returnValue.indexOf("language=") > 0);}
0
public void testReadWithEncoding() throws Exception
{    File file = new File(JMeterUtils.getJMeterBinDir(), "jmeter.properties");    params.add(new CompoundVariable(file.getAbsolutePath()));    params.add(new CompoundVariable("UTF-8"));    function.setParameters(params);    String returnValue = function.execute(result, null);    Assert.assertTrue(returnValue.indexOf("language=") > 0);}
0
public void testReadWithEncodingAndVar() throws Exception
{    File file = new File(JMeterUtils.getJMeterBinDir(), "jmeter.properties");    params.add(new CompoundVariable(file.getAbsolutePath()));    params.add(new CompoundVariable("UTF-8"));    params.add(new CompoundVariable("MY_FILE_AS_TEXT"));    function.setParameters(params);    String returnValue = function.execute(result, null);    Assert.assertTrue(returnValue.indexOf("language=") > 0);    Assert.assertTrue(vars.get("MY_FILE_AS_TEXT").indexOf("language=") > 0);}
0
public void tearDown()
{    JMeterUtils.getJMeterProperties().remove("groovy.utilities");}
0
public void setUp()
{    function = new Groovy();    result = new SampleResult();    jmctx = JMeterContextService.getContext();    String data = "The quick brown fox";    result.setResponseData(data, null);    vars = new JMeterVariables();    jmctx.setVariables(vars);    jmctx.setPreviousResult(result);    params = new LinkedList<>();}
0
public void testParameterCount() throws Exception
{    checkInvalidParameterCounts(function, 1, 2);}
0
public void testSum() throws Exception
{    params.add(new CompoundVariable("1+2+3"));    function.setParameters(params);    String ret = function.execute(result, null);    assertEquals("6", ret);}
0
public void testSumVar() throws Exception
{    params.add(new CompoundVariable("1+2+3"));    params.add(new CompoundVariable("TOTAL"));    function.setParameters(params);    String ret = function.execute(result, null);    assertEquals("6", ret);    assertEquals("6", vars.get("TOTAL"));}
0
public void testReplace1() throws Exception
{    params.add(new CompoundVariable("prev.getResponseDataAsString().replaceAll('T','t')"));    function.setParameters(params);    String ret = function.execute(result, null);    assertEquals("the quick brown fox", ret);}
0
public void testReplace2() throws Exception
{    vars.put("URL", "/query.cgi?s1=1&amp;s2=2&amp;s3=3");    params.add(new CompoundVariable("vars.get('URL').replaceAll('&amp;','&')"));    params.add(new CompoundVariable("URL"));    function.setParameters(params);    String ret = function.execute(result, null);    assertEquals("/query.cgi?s1=1&s2=2&s3=3", ret);    assertEquals(ret, vars.getObject("URL"));}
0
public void testFileLoading() throws Exception
{    JMeterUtils.setProperty("groovy.utilities", "bin/utility.groovy");    params.add(new CompoundVariable("factorial(10)"));    function.setParameters(params);    String ret = function.execute(result, null);    assertEquals("3628800", ret);}
0
public void testInvalidFileLoading() throws Exception
{    JMeterUtils.setProperty("groovy.utilities", "bin/missing.groovy");    params.add(new CompoundVariable("factorial(10)"));    function.setParameters(params);    String ret = function.execute(result, null);    assertEquals("3628800", ret);}
0
public void setUp()
{    isPropDefined = new IsPropDefined();    result = new SampleResult();    jmctx = JMeterContextService.getContext();    String data = "dummy data";    result.setResponseData(data, null);    vars = new JMeterVariables();    jmctx.setVariables(vars);    jmctx.setPreviousResult(result);    params = new LinkedList<>();}
0
public void testParameterCountIsPropDefined() throws Exception
{    checkInvalidParameterCounts(isPropDefined, 1, 1);}
0
public void testIsPropDefined() throws Exception
{    params.add(new CompoundVariable("file.encoding"));    isPropDefined.setParameters(params);    String returnValue = isPropDefined.execute(result, null);    assertEquals("true", returnValue);}
0
public void testIsPropNotDefined() throws Exception
{    params.add(new CompoundVariable("emptyProperty"));    isPropDefined.setParameters(params);    String returnValue = isPropDefined.execute(result, null);    assertEquals("false", returnValue);}
0
public void testIsPropNotDefinedOnlyVarDefined() throws Exception
{    vars.put("emptyProperty", "emptyPropertyValue");    params.add(new CompoundVariable("emptyProperty"));    isPropDefined.setParameters(params);    String returnValue = isPropDefined.execute(result, null);    assertEquals("false", returnValue);}
0
public void testIsPropDefinedError() throws Exception
{    isPropDefined.setParameters(params);    isPropDefined.execute(result, null);}
0
public void setUp()
{    isVarDefined = new IsVarDefined();    result = new SampleResult();    jmctx = JMeterContextService.getContext();    String data = "dummy data";    result.setResponseData(data, null);    vars = new JMeterVariables();    jmctx.setVariables(vars);    jmctx.setPreviousResult(result);    params = new LinkedList<>();}
0
public void testParameterCountIsPropDefined() throws Exception
{    checkInvalidParameterCounts(isVarDefined, 1, 1);}
0
public void testIsVarNotDefinedOnlyPropDefined() throws Exception
{    params.add(new CompoundVariable("file.encoding"));    isVarDefined.setParameters(params);    String returnValue = isVarDefined.execute(result, null);    assertEquals("false", returnValue);}
0
public void testIsVarDefined() throws Exception
{    vars.put("varName", "");    params.add(new CompoundVariable("varName"));    isVarDefined.setParameters(params);    String returnValue = isVarDefined.execute(result, null);    assertEquals("true", returnValue);}
0
public void testIsVarNotDefined() throws Exception
{    params.add(new CompoundVariable("emptyProperty"));    isVarDefined.setParameters(params);    String returnValue = isVarDefined.execute(result, null);    assertEquals("false", returnValue);}
0
public void testIsVarDefinedError() throws Exception
{    isVarDefined.setParameters(params);    isVarDefined.execute(result, null);}
0
public void testNoVariablesDefined() throws Exception
{    jmctx.setVariables(null);    params.add(new CompoundVariable("emptyProperty"));    isVarDefined.setParameters(params);    String returnValue = isVarDefined.execute(result, null);    assertEquals("false", returnValue);}
0
public void tearDown()
{    JMeterUtils.getJMeterProperties().remove("javascript.use_rhino");}
0
public void setUp()
{    function = new JavaScript();    result = new SampleResult();    jmctx = JMeterContextService.getContext();    String data = "The quick brown fox";    result.setResponseData(data, null);    vars = new JMeterVariables();    jmctx.setVariables(vars);    jmctx.setPreviousResult(result);    params = new LinkedList<>();}
0
public void testParameterCount() throws Exception
{    checkInvalidParameterCounts(function, 1, 2);}
0
public void testSum() throws Exception
{    params.add(new CompoundVariable("1+2+3"));    function.setParameters(params);    String ret = function.execute(result, null);    assertEquals("6", ret);}
0
public void testSumVar() throws Exception
{    params.add(new CompoundVariable("1+2+3"));    params.add(new CompoundVariable("TOTAL"));    function.setParameters(params);    String ret = function.execute(result, null);    assertEquals("6", ret);    assertEquals("6", vars.get("TOTAL"));}
0
public void testReplace1() throws Exception
{    params.add(new CompoundVariable("sampleResult.getResponseDataAsString().replaceAll('T','t')"));    function.setParameters(params);    String ret = function.execute(result, null);    assertEquals("the quick brown fox", ret);}
0
public void testReplace2() throws Exception
{    vars.put("URL", "/query.cgi?s1=1&amp;s2=2&amp;s3=3");    params.add(new CompoundVariable("vars.get('URL').replaceAll('&amp;','&')"));    params.add(new CompoundVariable("URL"));    function.setParameters(params);    String ret = function.execute(result, null);    assertEquals("/query.cgi?s1=1&s2=2&s3=3", ret);    assertEquals(ret, vars.getObject("URL"));}
0
public void setUp()
{    JMeterUtils.getJMeterProperties().put("javascript.use_rhino", "true");    super.setUp();}
0
public void tearDown()
{    JMeterUtils.getJMeterProperties().remove("javascript.use_rhino");}
0
public void setUp()
{    function = new Jexl2Function();    result = new SampleResult();    jmctx = JMeterContextService.getContext();    String data = "The quick brown fox";    result.setResponseData(data, null);    vars = new JMeterVariables();    jmctx.setVariables(vars);    jmctx.setPreviousResult(result);    params = new LinkedList<>();}
0
public void testParameterCount() throws Exception
{    checkInvalidParameterCounts(function, 1, 2);}
0
public void testSum() throws Exception
{    params.add(new CompoundVariable("1+2+3"));    function.setParameters(params);    String ret = function.execute(result, null);    assertEquals("6", ret);}
0
public void testSumVar() throws Exception
{    params.add(new CompoundVariable("1+2+3"));    params.add(new CompoundVariable("TOTAL"));    function.setParameters(params);    String ret = function.execute(result, null);    assertEquals("6", ret);    assertEquals("6", vars.get("TOTAL"));}
0
public void testReplace1() throws Exception
{    params.add(new CompoundVariable("sampleResult.getResponseDataAsString().replaceAll('T','t')"));    function.setParameters(params);    String ret = function.execute(result, null);    assertEquals("the quick brown fox", ret);}
0
public void testReplace2() throws Exception
{    vars.put("URL", "/query.cgi?s1=1&amp;s2=2&amp;s3=3");    params.add(new CompoundVariable("vars.get('URL').replaceAll('&amp;','&')"));    params.add(new CompoundVariable("URL"));    function.setParameters(params);    String ret = function.execute(result, null);    assertEquals("/query.cgi?s1=1&s2=2&s3=3", ret);    assertEquals(ret, vars.getObject("URL"));}
0
public void testSumWithVar() throws Exception
{    params.add(new CompoundVariable("var a = 1+2+3"));    function.setParameters(params);    String ret = function.execute(result, null);    assertEquals("6", ret);}
0
public void setUp()
{    super.setUp();    function = new Jexl3Function();}
0
public void setUp()
{    result = new SampleResult();    jmctx = JMeterContextService.getContext();    String data = "The quick brown fox";    result.setResponseData(data, null);    vars = new JMeterVariables();    jmctx.setVariables(vars);    jmctx.setPreviousResult(result);    params = new LinkedList<>();}
0
public void testParameterCount() throws Exception
{    function = new MachineName();    checkInvalidParameterCounts(function, 0, 1);    function = new MachineIP();    checkInvalidParameterCounts(function, 0, 1);}
0
public void testMachineName() throws Exception
{    function = new MachineName();    function.setParameters(params);    String ret = function.execute(result, null);    assertEquals(JMeterUtils.getLocalHostName(), ret);}
0
public void testMachineNameWithVar() throws Exception
{    function = new MachineName();    params.add(new CompoundVariable("HOST_NAME"));    function.setParameters(params);    String ret = function.execute(result, null);    assertEquals(JMeterUtils.getLocalHostName(), ret);    assertEquals(JMeterUtils.getLocalHostName(), vars.get("HOST_NAME"));}
0
public void testMachineIP() throws Exception
{    function = new MachineIP();    function.setParameters(params);    String ret = function.execute(result, null);    assertEquals(JMeterUtils.getLocalHostIP(), ret);}
0
public void testMachineIPWithVar() throws Exception
{    function = new MachineIP();    params.add(new CompoundVariable("HOST_IP"));    function.setParameters(params);    String ret = function.execute(result, null);    assertEquals(JMeterUtils.getLocalHostIP(), ret);    assertEquals(JMeterUtils.getLocalHostIP(), vars.get("HOST_IP"));}
0
public void setUp()
{    result = new SampleResult();    jmctx = JMeterContextService.getContext();    String data = "The quick brown fox";    result.setResponseData(data, null);    function = new RandomFromMultipleVars();    vars = new JMeterVariables();    jmctx.setVariables(vars);    jmctx.setPreviousResult(result);    params = new LinkedList<>();}
0
public void testParameterCount() throws Exception
{    checkInvalidParameterCounts(function, 1, 2);}
0
public void testExtractionFromMultipleVars() throws Exception
{    String existingVarName1 = "var1";    String existingVarName2 = "var2";    vars.put(existingVarName1 + "_matchNr", "1");    vars.put(existingVarName1 + "_1", "var1_value");    vars.put(existingVarName2 + "_matchNr", "2");    vars.put(existingVarName2 + "_1", "var2_value1");    vars.put(existingVarName2 + "_2", "var2_value2");    params.add(new CompoundVariable("var1|var2"));    function.setParameters(params);    String returnValue = function.execute(result, null);    Assert.assertThat(returnValue, CoreMatchers.anyOf(CoreMatchers.is("var1_value"), CoreMatchers.is("var2_value1"), CoreMatchers.is("var2_value2")));    Assert.assertNull(vars.get("outputVar"));}
0
public void test1Extraction() throws Exception
{    String existingVarName = "var1";    vars.put(existingVarName + "_matchNr", "1");    vars.put(existingVarName + "_1", "value1");    params.add(new CompoundVariable("var1"));    function.setParameters(params);    String returnValue = function.execute(result, null);    assertEquals("value1", returnValue);    Assert.assertNull(vars.get("outputVar"));}
0
public void test1ExtractionWithOutputVar() throws Exception
{    String existingVarName = "var1";    vars.put(existingVarName + "_matchNr", "1");    vars.put(existingVarName + "_1", "value1");    params.add(new CompoundVariable("var1"));    params.add(new CompoundVariable("outputVar"));    function.setParameters(params);    String returnValue = function.execute(result, null);    assertEquals("value1", returnValue);    assertEquals("value1", vars.get("outputVar"));}
0
public void setUp()
{    variable = new RegexFunction();    result = new SampleResult();    jmctx = JMeterContextService.getContext();    String data = "<company-xmlext-query-ret><row>" + "<value field=\"RetCode\">" + "LIS_OK</value><value" + " field=\"RetCodeExtension\"></value>" + "<value field=\"alias\"></value><value" + " field=\"positioncount\"></value>" + "<value field=\"invalidpincount\">0</value><value" + " field=\"pinposition1\">1</value><value" + " field=\"pinpositionvalue1\"></value><value" + " field=\"pinposition2\">5</value><value" + " field=\"pinpositionvalue2\"></value><value" + " field=\"pinposition3\">6</value><value" + " field=\"pinpositionvalue3\"></value>" + "</row></company-xmlext-query-ret>";    result.setResponseData(data, null);    vars = new JMeterVariables();    String data2 = "The quick brown fox jumped over the lazy dog 123 times";    vars.put(INPUT_VARIABLE_NAME, data2);    jmctx.setVariables(vars);    jmctx.setPreviousResult(result);}
0
public void testVariableExtraction() throws Exception
{    params = new LinkedList<>();    params.add(new CompoundVariable("<value field=\"(pinposition\\d+)\">(\\d+)</value>"));    params.add(new CompoundVariable("$2$"));    params.add(new CompoundVariable("2"));    variable.setParameters(params);    String match = variable.execute(result, null);    assertEquals("5", match);}
0
public void testVariableExtraction1a() throws Exception
{    params = new LinkedList<>();    params.add(new CompoundVariable("<value field=\"(pinposition\\d+)\">(\\d+)</value>"));        params.add(new CompoundVariable("$2$"));        params.add(new CompoundVariable("2"));        params.add(new CompoundVariable("-"));    params.add(new CompoundVariable("default"));    params.add(new CompoundVariable("OUTVAR"));    variable.setParameters(params);    String match = variable.execute(result, null);    assertEquals("3", vars.getObject("OUTVAR_matchNr"));    assertEquals("5", match);    assertEquals("5", vars.getObject("OUTVAR"));    assertEquals("<value field=\"pinposition2\">5</value>", vars.getObject("OUTVAR_g0"));    assertEquals("pinposition2", vars.getObject("OUTVAR_g1"));    assertEquals("5", vars.getObject("OUTVAR_g2"));}
0
public void testVariableExtraction1b() throws Exception
{    params = new LinkedList<>();    params.add(new CompoundVariable("<value field=\"(pinposition\\d+)\">(\\d+)</value>"));        params.add(new CompoundVariable("$2$"));        params.add(new CompoundVariable("2"));        params.add(new CompoundVariable("-"));    params.add(new CompoundVariable("default"));    params.add(new CompoundVariable(""));    variable.setParameters(params);    String match = variable.execute(result, null);    assertEquals("5", match);    assertNull(vars.getObject("OUTVAR"));}
0
public void testVariableExtractionFromVariable() throws Exception
{    params = new LinkedList<>();    params.add(new CompoundVariable("(\\d+)\\s+(\\w+)"));        params.add(new CompoundVariable("$2$"));        params.add(new CompoundVariable("1"));        params.add(new CompoundVariable("-"));    params.add(new CompoundVariable("default"));    params.add(new CompoundVariable("OUTVAR"));    params.add(new CompoundVariable(INPUT_VARIABLE_NAME));    variable.setParameters(params);    String match = variable.execute(result, null);    assertEquals("1", vars.getObject("OUTVAR_matchNr"));    assertEquals("times", match);    assertEquals("times", vars.getObject("OUTVAR"));    assertEquals("123 times", vars.getObject("OUTVAR_g0"));    assertEquals("123", vars.getObject("OUTVAR_g1"));    assertEquals("times", vars.getObject("OUTVAR_g2"));}
0
public void testVariableExtractionFromVariable2() throws Exception
{    params = new LinkedList<>();    params.add(new CompoundVariable("(\\d+)\\s+(\\w+)"));        params.add(new CompoundVariable("$1$$2$"));        params.add(new CompoundVariable("1"));        params.add(new CompoundVariable("-"));    params.add(new CompoundVariable("default"));    params.add(new CompoundVariable("OUTVAR"));    params.add(new CompoundVariable(INPUT_VARIABLE_NAME));    variable.setParameters(params);    String match = variable.execute(result, null);    assertEquals("1", vars.getObject("OUTVAR_matchNr"));    assertEquals("123times", match);    assertEquals("123times", vars.getObject("OUTVAR"));    assertEquals("123 times", vars.getObject("OUTVAR_g0"));    assertEquals("123", vars.getObject("OUTVAR_g1"));    assertEquals("times", vars.getObject("OUTVAR_g2"));}
0
public void testVariableExtractionFromVariable3() throws Exception
{    params = new LinkedList<>();    params.add(new CompoundVariable("(\\d+)\\s+(\\w+)"));        params.add(new CompoundVariable("pre$2$post"));        params.add(new CompoundVariable("1"));        params.add(new CompoundVariable("-"));    params.add(new CompoundVariable("default"));    params.add(new CompoundVariable("OUTVAR"));    params.add(new CompoundVariable(INPUT_VARIABLE_NAME));    variable.setParameters(params);    String match = variable.execute(result, null);    assertEquals("1", vars.getObject("OUTVAR_matchNr"));    assertEquals("pretimespost", match);    assertEquals("pretimespost", vars.getObject("OUTVAR"));    assertEquals("123 times", vars.getObject("OUTVAR_g0"));    assertEquals("123", vars.getObject("OUTVAR_g1"));    assertEquals("times", vars.getObject("OUTVAR_g2"));}
0
public void testVariableExtractionFromVariable4() throws Exception
{    params = new LinkedList<>();    params.add(new CompoundVariable("(\\d+)\\s+(\\w+)"));        params.add(new CompoundVariable("pre$2$"));        params.add(new CompoundVariable("1"));        params.add(new CompoundVariable("-"));    params.add(new CompoundVariable("default"));    params.add(new CompoundVariable("OUTVAR"));    params.add(new CompoundVariable(INPUT_VARIABLE_NAME));    variable.setParameters(params);    String match = variable.execute(result, null);    assertEquals("1", vars.getObject("OUTVAR_matchNr"));    assertEquals("pretimes", match);    assertEquals("pretimes", vars.getObject("OUTVAR"));    assertEquals("123 times", vars.getObject("OUTVAR_g0"));    assertEquals("123", vars.getObject("OUTVAR_g1"));    assertEquals("times", vars.getObject("OUTVAR_g2"));}
0
public void testVariableExtractionFromVariable5() throws Exception
{    params = new LinkedList<>();    params.add(new CompoundVariable("(\\d+)\\s+(\\w+)"));        params.add(new CompoundVariable("$2$post"));        params.add(new CompoundVariable("1"));        params.add(new CompoundVariable("-"));    params.add(new CompoundVariable("default"));    params.add(new CompoundVariable("OUTVAR"));    params.add(new CompoundVariable(INPUT_VARIABLE_NAME));    variable.setParameters(params);    String match = variable.execute(result, null);    assertEquals("1", vars.getObject("OUTVAR_matchNr"));    assertEquals("timespost", match);    assertEquals("timespost", vars.getObject("OUTVAR"));    assertEquals("123 times", vars.getObject("OUTVAR_g0"));    assertEquals("123", vars.getObject("OUTVAR_g1"));    assertEquals("times", vars.getObject("OUTVAR_g2"));}
0
public void testVariableExtractionFromVariable6() throws Exception
{    params = new LinkedList<>();    params.add(new CompoundVariable("(\\d+)\\s+(\\w+)"));        params.add(new CompoundVariable("$2$$2$"));        params.add(new CompoundVariable("1"));        params.add(new CompoundVariable("-"));    params.add(new CompoundVariable("default"));    params.add(new CompoundVariable("OUTVAR"));    params.add(new CompoundVariable(INPUT_VARIABLE_NAME));    variable.setParameters(params);    String match = variable.execute(result, null);    assertEquals("1", vars.getObject("OUTVAR_matchNr"));    assertEquals("timestimes", match);    assertEquals("timestimes", vars.getObject("OUTVAR"));    assertEquals("123 times", vars.getObject("OUTVAR_g0"));    assertEquals("123", vars.getObject("OUTVAR_g1"));    assertEquals("times", vars.getObject("OUTVAR_g2"));}
0
public void testVariableExtractionFromVariable7() throws Exception
{    params = new LinkedList<>();    params.add(new CompoundVariable("(\\d+)\\s+(\\w+)"));        params.add(new CompoundVariable("pre$1$mid$2$post"));        params.add(new CompoundVariable("1"));        params.add(new CompoundVariable("-"));    params.add(new CompoundVariable("default"));    params.add(new CompoundVariable("OUTVAR"));    params.add(new CompoundVariable(INPUT_VARIABLE_NAME));    variable.setParameters(params);    String match = variable.execute(result, null);    assertEquals("1", vars.getObject("OUTVAR_matchNr"));    assertEquals("pre123midtimespost", match);    assertEquals("pre123midtimespost", vars.getObject("OUTVAR"));    assertEquals("123 times", vars.getObject("OUTVAR_g0"));    assertEquals("123", vars.getObject("OUTVAR_g1"));    assertEquals("times", vars.getObject("OUTVAR_g2"));}
0
public void testVariableExtractionFromVariable8() throws Exception
{    params = new LinkedList<>();    params.add(new CompoundVariable("(\\d+)\\s+(\\w+)"));        params.add(new CompoundVariable("pre$1$mid$2$"));        params.add(new CompoundVariable("1"));        params.add(new CompoundVariable("-"));    params.add(new CompoundVariable("default"));    params.add(new CompoundVariable("OUTVAR"));    params.add(new CompoundVariable(INPUT_VARIABLE_NAME));    variable.setParameters(params);    String match = variable.execute(result, null);    assertEquals("1", vars.getObject("OUTVAR_matchNr"));    assertEquals("pre123midtimes", match);    assertEquals("pre123midtimes", vars.getObject("OUTVAR"));    assertEquals("123 times", vars.getObject("OUTVAR_g0"));    assertEquals("123", vars.getObject("OUTVAR_g1"));    assertEquals("times", vars.getObject("OUTVAR_g2"));}
0
public void testVariableExtractionFromVariable9() throws Exception
{    params = new LinkedList<>();    params.add(new CompoundVariable("(\\d+)\\s+(\\w+)"));        params.add(new CompoundVariable("$1$mid$2$post"));        params.add(new CompoundVariable("1"));        params.add(new CompoundVariable("-"));    params.add(new CompoundVariable("default"));    params.add(new CompoundVariable("OUTVAR"));    params.add(new CompoundVariable(INPUT_VARIABLE_NAME));    variable.setParameters(params);    String match = variable.execute(result, null);    assertEquals("1", vars.getObject("OUTVAR_matchNr"));    assertEquals("123midtimespost", match);    assertEquals("123midtimespost", vars.getObject("OUTVAR"));    assertEquals("123 times", vars.getObject("OUTVAR_g0"));    assertEquals("123", vars.getObject("OUTVAR_g1"));    assertEquals("times", vars.getObject("OUTVAR_g2"));}
0
public void testVariableExtraction2() throws Exception
{    params = new LinkedList<>();    params.add(new CompoundVariable("<value field=\"(pinposition\\d+)\">(\\d+)</value>"));    params.add(new CompoundVariable("$1$"));    params.add(new CompoundVariable("3"));    variable.setParameters(params);    String match = variable.execute(result, null);    assertEquals("pinposition3", match);}
0
public void testVariableExtraction5() throws Exception
{    params = new LinkedList<>();    params.add(new CompoundVariable("<value field=\"(pinposition\\d+)\">(\\d+)</value>"));    params.add(new CompoundVariable("$1$"));    params.add(new CompoundVariable("ALL"));    params.add(new CompoundVariable("_"));    variable.setParameters(params);    String match = variable.execute(result, null);    assertEquals("pinposition1_pinposition2_pinposition3", match);}
0
public void testVariableExtraction6() throws Exception
{    params = new LinkedList<>();    params.add(new CompoundVariable("<value field=\"(pinposition\\d+)\">(\\d+)</value>"));    params.add(new CompoundVariable("$2$"));    params.add(new CompoundVariable("4"));    params.add(new CompoundVariable(""));    params.add(new CompoundVariable("default"));    variable.setParameters(params);    String match = variable.execute(result, null);    assertEquals("default", match);}
0
public void testComma() throws Exception
{    params = new LinkedList<>();    params.add(new CompoundVariable("<value,? field=\"(pinposition\\d+)\">(\\d+)</value>"));    params.add(new CompoundVariable("$1$"));    params.add(new CompoundVariable("3"));    variable.setParameters(params);    String match = variable.execute(result, null);    assertEquals("pinposition3", match);}
0
public void testVariableExtraction3() throws Exception
{    params = new LinkedList<>();    params.add(new CompoundVariable("<value field=\"(pinposition\\d+)\">(\\d+)</value>"));    params.add(new CompoundVariable("_$1$"));    params.add(new CompoundVariable("2"));    variable.setParameters(params);    String match = variable.execute(result, null);    assertEquals("_pinposition2", match);}
0
public void testExtractionIndexTooHigh() throws Exception
{    params = new LinkedList<>();    params.add(new CompoundVariable("<value field=\"(pinposition\\d+)\">(\\d+)</value>"));    params.add(new CompoundVariable("_$1$"));    params.add(new CompoundVariable("10"));    params.add(new CompoundVariable(""));    params.add(new CompoundVariable("No Value Found"));    variable.setParameters(params);    String match = variable.execute(result, null);    assertEquals("No Value Found", match);}
0
public void testRandomExtraction() throws Exception
{    params = new LinkedList<>();    params.add(new CompoundVariable("<company-xmlext-query-ret>(.+?)</company-xmlext-query-ret>"));    params.add(new CompoundVariable("$1$"));    params.add(new CompoundVariable("RAND"));    params.add(new CompoundVariable(""));    params.add(new CompoundVariable("No Value Found"));    variable.setParameters(params);    String match = variable.execute(result, null);    assertEquals("<row>" + "<value field=\"RetCode\">" + "LIS_OK</value><value" + " field=\"RetCodeExtension\"></value>" + "<value field=\"alias\"></value><value" + " field=\"positioncount\"></value>" + "<value field=\"invalidpincount\">0</value><value" + " field=\"pinposition1\">1</value><value" + " field=\"pinpositionvalue1\"></value><value" + " field=\"pinposition2\">5</value><value" + " field=\"pinpositionvalue2\"></value><value" + " field=\"pinposition3\">6</value><value" + " field=\"pinpositionvalue3\"></value>" + "</row>", match);}
0
public void testExtractionIndexNotNumeric() throws Exception
{    params = new LinkedList<>();    params.add(new CompoundVariable("<value field=\"(pinposition\\d+)\">(\\d+)</value>"));    params.add(new CompoundVariable("_$1$"));    params.add(new CompoundVariable("0.333a"));    params.add(new CompoundVariable(""));    params.add(new CompoundVariable("No Value Found"));    variable.setParameters(params);    String match = variable.execute(result, null);    assertEquals("No Value Found", match);}
0
public void testVariableExtraction4() throws Exception
{    params = new LinkedList<>();    params.add(new CompoundVariable("<value field=\"(pinposition\\d+)\">(\\d+)</value>"));    params.add(new CompoundVariable("$2$, "));    params.add(new CompoundVariable(".333"));    variable.setParameters(params);    String match = variable.execute(result, null);    assertEquals("1, ", match);}
0
public void testDefaultValue() throws Exception
{    params = new LinkedList<>();    params.add(new CompoundVariable("<value,, field=\"(pinposition\\d+)\">(\\d+)</value>"));    params.add(new CompoundVariable("$2$, "));    params.add(new CompoundVariable(".333"));    params.add(new CompoundVariable(""));    params.add(new CompoundVariable("No Value Found"));    variable.setParameters(params);    String match = variable.execute(result, null);    assertEquals("No Value Found", match);}
0
public void setUp()
{    jmctx = JMeterContextService.getContext();    vars = new JMeterVariables();    jmctx.setVariables(vars);    jmctx.setPreviousResult(result);    params = new LinkedList<>();    result = new SampleResult();    variable = new SamplerName();}
0
public void testSamplerName() throws Exception
{    variable.setParameters(params);    TestSampler sampler = new TestSampler("UnitTestSampler");    value = variable.execute(result, sampler);    assertEquals("UnitTestSampler", value);}
0
public void testSamplerNameWithVar() throws Exception
{    variable.setParameters(params);    TestSampler sampler = new TestSampler("UnitTestSampler");    variable.setParameters(FunctionTestHelper.makeParams("var1"));    value = variable.execute(result, sampler);    assertEquals("UnitTestSampler", value);    assertEquals("UnitTestSampler", vars.get("var1"));}
0
public void setUp()
{    function = new SetProperty();    result = new SampleResult();    jmctx = JMeterContextService.getContext();    String data = "The quick brown fox";    result.setResponseData(data, null);    vars = new JMeterVariables();    jmctx.setVariables(vars);    jmctx.setPreviousResult(result);    params = new LinkedList<>();}
0
public void testParameterCount() throws Exception
{    checkInvalidParameterCounts(function, 2, 3);}
0
public void testSetPropertyNoReturn() throws Exception
{    params.add(new CompoundVariable("prop1"));    params.add(new CompoundVariable("value1"));    function.setParameters(params);    String returnValue = function.execute(result, null);    assertEquals("value1", JMeterUtils.getProperty("prop1"));    assertEquals("", returnValue);}
0
public void testSetPropertyWithReturn() throws Exception
{    params.add(new CompoundVariable("prop1"));    params.add(new CompoundVariable("value1"));    params.add(new CompoundVariable("true"));    function.setParameters(params);    String returnValue = function.execute(result, null);    assertEquals("value1", JMeterUtils.getProperty("prop1"));    Assert.assertNull(returnValue);    params.clear();    params.add(new CompoundVariable("prop1"));    params.add(new CompoundVariable("value2"));    params.add(new CompoundVariable("true"));    function.setParameters(params);    returnValue = function.execute(result, null);    assertEquals("value2", JMeterUtils.getProperty("prop1"));    assertEquals("value1", returnValue);}
0
public void setUp()
{    result = new SampleResult();    jmctx = JMeterContextService.getContext();    String data = "The quick brown fox";    result.setResponseData(data, null);    vars = new JMeterVariables();    jmctx.setVariables(vars);    jmctx.setPreviousResult(result);    params = new LinkedList<>();    Thread.currentThread().setName("ThreadGroup-1");}
0
public void testUUIDParameterCount() throws Exception
{    AbstractFunction function = new Uuid();    checkInvalidParameterCounts(function, 0, 0);}
0
public void testThreadNumberParameterCount() throws Exception
{    AbstractFunction function = new ThreadNumber();    checkInvalidParameterCounts(function, 0, 0);}
0
public void testEscapeHtmlParameterCount() throws Exception
{    AbstractFunction function = new EscapeHtml();    checkInvalidParameterCounts(function, 1, 1);}
0
public void testUnEscapeHtmlParameterCount() throws Exception
{    AbstractFunction function = new UnEscapeHtml();    checkInvalidParameterCounts(function, 1, 1);}
0
public void testEscapeXmlParameterCount() throws Exception
{    AbstractFunction function = new EscapeXml();    checkInvalidParameterCounts(function, 1, 1);}
0
public void testUnEscapeParameterCount() throws Exception
{    AbstractFunction function = new UnEscape();    checkInvalidParameterCounts(function, 1, 1);}
0
public void testTestPlanParameterCount() throws Exception
{    AbstractFunction function = new TestPlanName();    checkInvalidParameterCounts(function, 0, 0);}
0
public void testThreadNumber() throws Exception
{    AbstractFunction function = new ThreadNumber();    function.setParameters(params);    String ret = function.execute(result, null);    assertEquals("1", ret);}
0
public void testUuid() throws Exception
{    AbstractFunction function = new Uuid();    function.setParameters(params);    String ret = function.execute(result, null);    UUID.fromString(ret);}
0
public void testEscapeHtml() throws Exception
{    AbstractFunction function = new EscapeHtml();    params.add(new CompoundVariable("\"bread\" & \"butter\""));    function.setParameters(params);    String ret = function.execute(result, null);    assertEquals("&quot;bread&quot; &amp; &quot;butter&quot;", ret);}
0
public void testUnEscapeHtml() throws Exception
{    AbstractFunction function = new UnEscapeHtml();    params.add(new CompoundVariable("&quot;bread&quot; &amp; &quot;butter&quot;"));    function.setParameters(params);    String ret = function.execute(result, null);    assertEquals("\"bread\" & \"butter\"", ret);}
0
public void testUnEscapeHtml2() throws Exception
{    AbstractFunction function = new UnEscapeHtml();    params.add(new CompoundVariable("&lt;Fran&ccedil;ais&gt;"));    function.setParameters(params);    String ret = function.execute(result, null);    assertEquals("<Français>", ret);}
0
public void testUnEscapeHtml3() throws Exception
{    AbstractFunction function = new UnEscapeHtml();    params.add(new CompoundVariable("&gt;&zzzz;x"));    function.setParameters(params);    String ret = function.execute(result, null);    assertEquals(">&zzzz;x", ret);}
0
public void testEscapeXml() throws Exception
{    AbstractFunction function = new EscapeXml();    params.add(new CompoundVariable("\"bread\" & <'butter'>"));    function.setParameters(params);    String ret = function.execute(result, null);    assertEquals("&quot;bread&quot; &amp; &lt;&apos;butter&apos;&gt;", ret);}
0
public void testTestPlanName() throws Exception
{    AbstractFunction function = new TestPlanName();    try {        FileServer.getFileServer().setScriptName("Test");        function.setParameters(params);        String ret = function.execute(result, null);        assertEquals("Test", ret);    } finally {        FileServer.getFileServer().setScriptName(null);    }}
0
public void testThreadGroupName() throws Exception
{    AbstractFunctionByKey function = new ThreadGroupName();    try {        TestSampler httpRequest = new TestSampler();        ThreadGroup threadGroup = new ThreadGroup();        threadGroup.setName("ThreadGroup-1");        JMeterContext context = JMeterContextService.getContext();        context.setCurrentSampler(httpRequest);        context.setThreadGroup(threadGroup);        String ret = function.execute(result, httpRequest);        assertEquals("ThreadGroup-1", ret);    } finally {        FileServer.getFileServer().setScriptName(null);    }}
0
public void testThreadGroupNameBug63241() throws Exception
{    AbstractFunctionByKey function = new ThreadGroupName();    try {        TestSampler httpRequest = new TestSampler();        JMeterContext context = JMeterContextService.getContext();                context.setThreadGroup(null);        context.setCurrentSampler(httpRequest);        String ret = function.execute(result, httpRequest);        assertEquals("", ret);    } finally {        FileServer.getFileServer().setScriptName(null);    }}
0
public void testThreadGroupNameParameterCount() throws Exception
{    AbstractFunctionByKey function = new ThreadGroupName();    checkInvalidParameterCounts(function, 0, 0);}
0
public void setUp()
{    function = new StringToFile();    result = new SampleResult();    JMeterContext jmctx = JMeterContextService.getContext();    JMeterVariables vars = new JMeterVariables();    jmctx.setVariables(vars);    jmctx.setPreviousResult(result);}
0
public void testParameterCount() throws Exception
{    checkInvalidParameterCounts(function, 2, 4);}
0
public void testWriteToFile() throws Exception
{    File file = tempFolder.newFile();    file.deleteOnExit();    function.setParameters(functionParams(file.getAbsolutePath(), STRING_TO_WRITE, "true", ENCODING));    String returnValue = function.execute(result, null);    Assert.assertTrue("This method 'Stringtofile' should have successfully run", Boolean.parseBoolean(returnValue));}
0
public void testWriteToFileWhenDirectoryDoesntExist() throws Exception
{    File dir = tempFolder.newFolder();    Files.delete(dir.toPath());    String pathname = Paths.get(dir.getAbsolutePath(), FILENAME).toString();    function.setParameters(functionParams(pathname, STRING_TO_WRITE, "true", ENCODING));    String returnValue = function.execute(result, null);    Assert.assertFalse("This method 'Stringtofile' should fail to run since directory does not exist", Boolean.parseBoolean(returnValue));}
0
public void testWriteToFileWhenDirectoryExist() throws Exception
{    File dir = tempFolder.newFolder();    dir.deleteOnExit();    String pathname = Paths.get(dir.getAbsolutePath(), FILENAME).toString();    function.setParameters(functionParams(pathname, STRING_TO_WRITE, "true", ENCODING));    String returnValue = function.execute(result, null);    Assert.assertTrue("This method 'Stringtofile' should have successfully run if parent directory already exists", Boolean.parseBoolean(returnValue));}
0
public void testWriteToFileOptParamWayToWriteIsNull() throws Exception
{    File file = tempFolder.newFile();    file.deleteOnExit();    function.setParameters(functionParams(file.getAbsolutePath(), STRING_TO_WRITE));    String returnValue = function.execute(result, null);    Assert.assertTrue("This method 'Stringtofile' should have successfully run with empty append", Boolean.parseBoolean(returnValue));}
0
public void testWriteToFileOptParamEncodingIsNull() throws Exception
{    File file = tempFolder.newFile();    file.deleteOnExit();    function.setParameters(functionParams(file.getAbsolutePath(), STRING_TO_WRITE, "true"));    String returnValue = function.execute(result, null);    Assert.assertTrue("This method 'Stringtofile' should have successfully run with no charset", Boolean.parseBoolean(returnValue));}
0
public void testWriteToFileEncodingNotSupported() throws Exception
{    File file = tempFolder.newFile();    file.deleteOnExit();    function.setParameters(functionParams(file.getAbsolutePath(), STRING_TO_WRITE, "true", "UTF-20"));    String returnValue = function.execute(result, null);    Assert.assertFalse("This method 'Stringtofile' should have failed to run with wrong charset", Boolean.parseBoolean(returnValue));}
0
public void testWriteToFileEncodingNotLegal() throws Exception
{    File file = tempFolder.newFile();    file.deleteOnExit();    function.setParameters(functionParams(file.getAbsolutePath(), STRING_TO_WRITE, "true", "UTFéé"));    String returnValue = function.execute(result, null);    Assert.assertFalse("This method 'Stringtofile' should have failed to run with illegal chars in charset", Boolean.parseBoolean(returnValue));}
0
public void testWriteToFileIOException() throws Exception
{    File file = tempFolder.newFile();    file.deleteOnExit();    Assert.assertTrue(file.getAbsolutePath() + " should be set read-only", file.setWritable(false));    function.setParameters(functionParams(file.getAbsolutePath(), STRING_TO_WRITE, "true", ENCODING));    String returnValue = function.execute(result, null);    Assert.assertFalse("This method 'Stringtofile' should have failed to run with non writable folder", Boolean.parseBoolean(returnValue));}
0
public void testWriteToFileRequiredFilePathIsNull() throws Exception
{    function.setParameters(functionParams(null, STRING_TO_WRITE, "true", ENCODING));    String returnValue = function.execute(result, null);    Assert.assertFalse("This method 'Stringtofile' should fail to run with null file", Boolean.parseBoolean(returnValue));}
0
public void testWriteToFileRequiredStringIsNull() throws Exception
{    File file = tempFolder.newFile();    file.deleteOnExit();    function.setParameters(functionParams(file.getAbsolutePath(), "", "true", ENCODING));    String returnValue = function.execute(result, null);    Assert.assertTrue("This method 'Stringtofile' should succeed with empty String to write", Boolean.parseBoolean(returnValue));}
0
public void testOverwrite() throws Exception
{    File file = tempFolder.newFile();    file.deleteOnExit();    function.setParameters(functionParams(file.getAbsolutePath(), STRING_TO_WRITE, "false", ENCODING));    String returnValue = function.execute(result, null);    Assert.assertTrue("This method 'Stringtofile' should have successfully run", Boolean.parseBoolean(returnValue));    String res = FileUtils.readFileToString(file, ENCODING).trim();    Assert.assertEquals("The string should be 'test'", "test", res);}
0
public void testAppend() throws Exception
{    File file = tempFolder.newFile();    file.deleteOnExit();    function.setParameters(functionParams(file.getAbsolutePath(), STRING_TO_WRITE, "true", ENCODING));    Assert.assertTrue("First call to 'Stringtofile' should succeed", Boolean.parseBoolean(function.execute(result, null)));    Assert.assertTrue("Second call to 'Stringtofile' should succeed", Boolean.parseBoolean(function.execute(result, null)));    String res = FileUtils.readFileToString(file, ENCODING).trim();    Assert.assertEquals("The string should be 'testtest'", "testtest", res);}
0
private Collection<CompoundVariable> functionParams(String... args)
{    return Stream.of(args).map(CompoundVariable::new).collect(Collectors.toList());}
0
public void testDescription()
{    Assert.assertEquals("Function 'stringtofile' should have successfully reading the configuration file 'messages.properties'", JMeterUtils.getResString("string_to_file_pathname"), function.getArgumentDesc().get(0));}
0
public void testLineBreak() throws Exception
{    File file = tempFolder.newFile();    file.deleteOnExit();    function.setParameters(functionParams(file.getAbsolutePath(), "test\\\\ntest", "true", ENCODING));    function.execute();    String res = FileUtils.readFileToString(file, ENCODING).trim();    Assert.assertEquals("When the user type '\n', ine break should be saved in file", "test" + System.lineSeparator() + "test", res);    Assert.assertTrue("When the user type '\\n',line break should be saved in file", res.contains(System.lineSeparator()));}
0
public void setUp()
{    jmctx = JMeterContextService.getContext();    vars = new JMeterVariables();    jmctx.setVariables(vars);    jmctx.setPreviousResult(result);    params = new LinkedList<>();    result = new SampleResult();    variable = new TimeFunction();}
0
public void testDefault() throws Exception
{    variable.setParameters(params);    long before = System.currentTimeMillis();    value = variable.execute(result, null);    long now = Long.parseLong(value);    long after = System.currentTimeMillis();    assertTrue(now >= before && now <= after);}
0
public void testDefault1() throws Exception
{    params.add(new CompoundVariable());    variable.setParameters(params);    long before = System.currentTimeMillis();    value = variable.execute(result, null);    long now = Long.parseLong(value);    long after = System.currentTimeMillis();    assertTrue(now >= before && now <= after);}
0
public void testDefault2() throws Exception
{    params.add(new CompoundVariable());    params.add(new CompoundVariable());    variable.setParameters(params);    long before = System.currentTimeMillis();    value = variable.execute(result, null);    long now = Long.parseLong(value);    long after = System.currentTimeMillis();    assertTrue(now >= before && now <= after);}
0
public void testDefaultNone() throws Exception
{    long before = System.currentTimeMillis();    value = variable.execute(result, null);    long now = Long.parseLong(value);    long after = System.currentTimeMillis();    assertTrue(now >= before && now <= after);}
0
public void testTooMany() throws Exception
{    params.add(new CompoundVariable("YMD"));    params.add(new CompoundVariable("NAME"));    params.add(new CompoundVariable("YMD"));    try {        variable.setParameters(params);        fail("Should have raised InvalidVariableException");    } catch (InvalidVariableException ignored) {    }}
0
public void testYMD() throws Exception
{    params.add(new CompoundVariable("YMD"));    params.add(new CompoundVariable("NAME"));    variable.setParameters(params);    value = variable.execute(result, null);    assertEquals(8, value.length());    assertEquals(value, vars.get("NAME"));}
0
public void testYMDnoV() throws Exception
{    params.add(new CompoundVariable("YMD"));    variable.setParameters(params);    value = variable.execute(result, null);    assertEquals(8, value.length());    assertNull(vars.get("NAME"));}
0
public void testHMS() throws Exception
{    params.add(new CompoundVariable("HMS"));    variable.setParameters(params);    value = variable.execute(result, null);    assertEquals(6, value.length());}
0
public void testYMDHMS() throws Exception
{    params.add(new CompoundVariable("YMDHMS"));    variable.setParameters(params);    value = variable.execute(result, null);    assertEquals(15, value.length());}
0
public void testUSER1() throws Exception
{    params.add(new CompoundVariable("USER1"));    variable.setParameters(params);    value = variable.execute(result, null);    assertEquals(0, value.length());}
0
public void testUSER2() throws Exception
{    params.add(new CompoundVariable("USER2"));    variable.setParameters(params);    value = variable.execute(result, null);    assertEquals(0, value.length());}
0
public void testFixed() throws Exception
{    params.add(new CompoundVariable("'Fixed text'"));    variable.setParameters(params);    value = variable.execute(result, null);    assertEquals("Fixed text", value);}
0
public void testMixed() throws Exception
{    params.add(new CompoundVariable("G"));    variable.setParameters(params);    Locale locale = Locale.getDefault();    Locale.setDefault(Locale.ENGLISH);    value = variable.execute(result, null);    Locale.setDefault(locale);    assertEquals("AD", value);}
0
public void testDivisor() throws Exception
{    params.add(new CompoundVariable("/1000"));    variable.setParameters(params);    long before = System.currentTimeMillis() / 1000;    value = variable.execute(result, null);    long now = Long.parseLong(value);    long after = System.currentTimeMillis() / 1000;    assertTrue(now >= before && now <= after);}
0
public void testDivisorNoMatch() throws Exception
{        params.add(new CompoundVariable("/1000 "));    variable.setParameters(params);    value = variable.execute(result, null);    assertEquals("/1000 ", value);}
0
public void setUp()
{    jmctx = JMeterContextService.getContext();    vars = new JMeterVariables();    jmctx.setVariables(vars);    result = new SampleResult();    jmctx.setPreviousResult(result);    function = new RandomDate();}
0
public void testParameterCount() throws Exception
{    checkInvalidParameterCounts(function, 3, 5);}
0
public void testDefault() throws Exception
{    String endDate = "2099-01-01";    String formatDate = "yyyy-dd-MM";    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(formatDate);    Collection<CompoundVariable> params = makeParams(formatDate, "", endDate, "", "");    function.setParameters(params);    value = function.execute(result, null);    LocalDate result = LocalDate.parse(value, formatter);    LocalDate now = LocalDate.now();    LocalDate max = LocalDate.parse(endDate, formatter);    assertTrue(now.isBefore(result) && result.isBefore(max));}
0
public void testDefault2() throws Exception
{    String endDate = "2099-01-01";    Collection<CompoundVariable> params = makeParams("yyyy-dd-MM", "", endDate, "", "");    function.setParameters(params);    value = function.execute(result, null);    assertEquals(10, value.length());}
0
public void testFormatDate() throws Exception
{    String endDate = "01 01 2099";    String formatDate = "dd MM yyyy";    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(formatDate);    Collection<CompoundVariable> params = makeParams(formatDate, "", endDate, "", "");    function.setParameters(params);    value = function.execute(result, null);    LocalDate result = LocalDate.parse(value, formatter);    LocalDate now = LocalDate.now();    LocalDate max = LocalDate.parse(endDate, formatter);    assertTrue(now.isBefore(result) && result.isBefore(max));}
0
public void testFormatDate2() throws Exception
{    String endDate = "01012099";    String formatDate = "ddMMyyyy";    Collection<CompoundVariable> params = makeParams(formatDate, "", endDate, "", "");    function.setParameters(params);    value = function.execute(result, null);    assertEquals(8, value.length());}
0
public void testFormatDate3() throws Exception
{    String startDate = "29 Aug 2111";    String endDate = "30 Aug 2111";    String formatDate = "dd MMM yyyy";    String localeAsString = "en_EN";    Collection<CompoundVariable> params = makeParams(formatDate, startDate, endDate, localeAsString, "");    function.setParameters(params);    value = function.execute(result, null);    assertThat(value, is(equalTo("29 Aug 2111")));}
0
public void testFrenchFormatDate() throws Exception
{    String startDate = "29 mars 2111";    String endDate = "30 mars 2111";    String formatDate = "dd MMM yyyy";    String localeAsString = "fr_FR";    Collection<CompoundVariable> params = makeParams(formatDate, startDate, endDate, localeAsString, "");    function.setParameters(params);    value = function.execute(result, null);    assertThat(value, is(equalTo("29 mars 2111")));}
0
public void testEmptyFormatDate() throws Exception
{    String startDate = "2111-03-29";    String endDate = "2111-03-30";    String formatDate = "";    String localeAsString = "en";    Collection<CompoundVariable> params = makeParams(formatDate, startDate, endDate, localeAsString, "");    function.setParameters(params);    value = function.execute(result, null);    assertThat(value, is(equalTo("2111-03-29")));}
0
public void testEndDateBeforeStartDate() throws Exception
{    String startDate = "2111-03-29";    String endDate = "2011-03-30";    String formatDate = "";    String localeAsString = "en";    Collection<CompoundVariable> params = makeParams(formatDate, startDate, endDate, localeAsString, "");    function.setParameters(params);    value = function.execute(result, null);    assertThat(value, is(equalTo("")));}
0
public void testEndDateBeforeStartDateNullVariable() throws Exception
{    String startDate = "2111-03-29";    String endDate = "2111-03-30";    String formatDate = "";    String localeAsString = "en";    Collection<CompoundVariable> params = makeParams(formatDate, startDate, endDate, localeAsString, null);    function.setParameters(params);    value = function.execute(result, null);    assertThat(value, is(equalTo("2111-03-29")));}
0
public void testEndDateBeforeStartDateWithVariable() throws Exception
{    String startDate = "2111-03-29";    String endDate = "2111-03-30";    String formatDate = "";    String localeAsString = "en";    Collection<CompoundVariable> params = makeParams(formatDate, startDate, endDate, localeAsString, "MY_VAR");    function.setParameters(params);    value = function.execute(result, null);    assertThat(value, is(equalTo("2111-03-29")));    assertThat(vars.get("MY_VAR"), is(equalTo("2111-03-29")));}
0
public void testInvalidFormat() throws Exception
{    String startDate = "2111-03-29";    String endDate = "2011-03-30";    String formatDate = "abcd";    String localeAsString = "en";    Collection<CompoundVariable> params = makeParams(formatDate, startDate, endDate, localeAsString, "");    function.setParameters(params);    value = function.execute(result, null);    assertThat(value, is(equalTo("")));}
0
public void testInvalidStartDateFormat() throws Exception
{    String startDate = "23-2111-03";    String endDate = "2011-03-30";    String formatDate = "abcd";    String localeAsString = "en";    Collection<CompoundVariable> params = makeParams(formatDate, startDate, endDate, localeAsString, "");    function.setParameters(params);    value = function.execute(result, null);    assertThat(value, is(equalTo("")));}
0
public void testInvalidEndDateFormat() throws Exception
{    String startDate = "2011-03-30";    String endDate = "23-2111-03";    String formatDate = "abcd";    String localeAsString = "en";    Collection<CompoundVariable> params = makeParams(formatDate, startDate, endDate, localeAsString, "");    function.setParameters(params);    value = function.execute(result, null);    assertThat(value, is(equalTo("")));}
0
public void setUp()
{    jmctx = JMeterContextService.getContext();    vars = new JMeterVariables();    jmctx.setVariables(vars);    jmctx.setPreviousResult(result);    result = new SampleResult();    function = new TimeShift();}
0
public void testDatePlusOneDay() throws Exception
{    Collection<CompoundVariable> params = makeParams("yyyy-dd-MM", "2017-01-01", "P1D", "");    function.setParameters(params);    value = function.execute(result, null);    assertThat(value, is(equalTo("2017-02-01")));}
0
public void testDatePlusOneDayInVariable() throws Exception
{    Collection<CompoundVariable> params = makeParams("yyyy-dd-MM", "2017-01-01", "P1d", "VAR");    function.setParameters(params);    function.execute(result, null);    assertThat(vars.get("VAR"), is(equalTo("2017-02-01")));}
0
public void testDatePlusComplexPeriod() throws Exception
{    Collection<CompoundVariable> params = makeParams("yyyy-dd-MM HH:m", "2017-01-01 12:00", "P+32dT-1H-5m", "VAR");    function.setParameters(params);    String value = function.execute(result, null);    assertThat(value, is(equalTo("2017-02-02 10:55")));}
0
public void testDefault() throws Exception
{    Collection<CompoundVariable> params = makeParams("", "", "", "");    function.setParameters(params);    value = function.execute(result, null);    long resultat = Long.parseLong(value);    LocalDateTime nowFromFunction = LocalDateTime.ofInstant(Instant.ofEpochMilli(resultat), TimeZone.getDefault().toZoneId());    assertThat(nowFromFunction, within(5, ChronoUnit.SECONDS, LocalDateTime.now()));}
0
public void testNowPlusOneDay() throws Exception
{    Collection<CompoundVariable> params = makeParams("yyyy-MM-dd", "", "P1d", "");    function.setParameters(params);    value = function.execute(result, null);    LocalDate tomorrow = LocalDate.now().plusDays(1);    LocalDate tomorrowFromFunction = LocalDate.parse(value);    assertThat(tomorrowFromFunction, sameDay(tomorrow));}
0
public void testNowWithComplexPeriod() throws Exception
{    Collection<CompoundVariable> params = makeParams("yyyy-MM-dd'T'HH:mm:ss", "", "P10DT-1H-5M5S", "");    function.setParameters(params);    value = function.execute(result, null);    LocalDateTime futureDate = LocalDateTime.now().plusDays(10).plusHours(-1).plusMinutes(-5).plusSeconds(5);    LocalDateTime futureDateFromFunction = LocalDateTime.parse(value);    assertThat(futureDateFromFunction, within(1, ChronoUnit.SECONDS, futureDate));}
0
public void testPotentialBugWithComplexPeriod() throws Exception
{    Collection<CompoundVariable> params = makeParams("yyyy-MM-dd'T'HH:mm:ss", "2017-12-21T12:00:00", "P10DT-1H-5M5S", "");    function.setParameters(params);    value = function.execute(result, null);    LocalDateTime futureDateFromFunction = LocalDateTime.parse(value);    DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern("yyyy-MM-dd' 'HH:mm:ss");    LocalDateTime baseDate = LocalDateTime.parse("2017-12-21 12:00:00", dateFormat);    LocalDateTime futureDate = baseDate.plusDays(10).plusHours(-1).plusMinutes(-5).plusSeconds(5);    assertThat(futureDateFromFunction, within(1, ChronoUnit.SECONDS, futureDate));}
0
public static void main(String[] args)
{    System.out.println(java.time.Duration.parse("P10DT-1H-5M5S").toMillis());}
0
public void testWrongAmountToAdd() throws Exception
{        Collection<CompoundVariable> params = makeParams("", "", "qefv1Psd", "");    function.setParameters(params);    value = function.execute(result, null);    long resultat = Long.parseLong(value);    LocalDateTime nowFromFunction = LocalDateTime.ofInstant(Instant.ofEpochMilli(resultat), TimeZone.getDefault().toZoneId());    assertThat(nowFromFunction, within(5, ChronoUnit.SECONDS, LocalDateTime.now()));}
0
public void testWrongFormatDate() throws Exception
{    Collection<CompoundVariable> params = makeParams("hjfdjyra:fd", "", "P1D", "");    function.setParameters(params);    value = function.execute(result, null);    assertThat(value, is(equalTo("")));}
0
public void testRandomPeriod() throws Exception
{    Random r = new Random();    int randomInt = r.ints(1, 60).limit(1).findFirst().getAsInt();    vars.put("random", String.valueOf(randomInt));    Collection<CompoundVariable> params = makeParams("yyyy-MM-dd'T'HH:mm:ss", "", "PT${random}M", "");    function.setParameters(params);    value = function.execute(result, null);    LocalDateTime randomFutureDate = LocalDateTime.parse(value);    LocalDateTime checkFutureDate = LocalDateTime.now().plusMinutes(randomInt);    assertThat(randomFutureDate, within(5, ChronoUnit.SECONDS, checkFutureDate));    randomInt = r.ints(1, 60).limit(1).findFirst().getAsInt();    vars.put("random", String.valueOf(randomInt));    value = function.execute(result, null);    randomFutureDate = LocalDateTime.parse(value);    checkFutureDate = LocalDateTime.now().plusMinutes(randomInt);    assertThat(randomFutureDate, within(5, ChronoUnit.SECONDS, checkFutureDate));}
0
public void testNowPlusOneDayWithLocale() throws Exception
{    Collection<CompoundVariable> params = makeParams("yyyy-MMMM-dd", "2017-juillet-01", "P1D", "fr_FR", "");    function.setParameters(params);    value = function.execute(result, null);    assertThat(value, is(equalTo("2017-juillet-02")));    params = makeParams("yyyy-MMMM-dd", "2017-July-01", "P1D", "en_EN", "");    function.setParameters(params);    value = function.execute(result, null);    assertThat(value, is(equalTo("2017-July-02")));    params = makeParams("yyyy-MMMM-dd", "2017-julio-01", "P1D", "es_ES", "");    function.setParameters(params);    value = function.execute(result, null);    assertThat(value, is(equalTo("2017-julio-02")));    params = makeParams("yyyy-MMMM-dd", "2017-Juli-01", "P1D", "de_DE", "");    function.setParameters(params);    value = function.execute(result, null);    assertThat(value, is(equalTo("2017-Juli-02")));}
0
public void setUp()
{    result = new SampleResult();    jmctx = JMeterContextService.getContext();    String data = "The quick brown fox";    result.setResponseData(data, null);    vars = new JMeterVariables();    jmctx.setVariables(vars);    jmctx.setPreviousResult(result);    params = new LinkedList<>();}
0
public void testParameterCount() throws Exception
{    AbstractFunction function = new UrlEncode();    checkInvalidParameterCounts(function, 1, 1);    function = new UrlDecode();    checkInvalidParameterCounts(function, 1, 1);}
0
public void testUrlEncode() throws Exception
{    AbstractFunction function = new UrlEncode();    params.add(new CompoundVariable("Veni, vidi, vici ?"));    function.setParameters(params);    String returnValue = function.execute(result, null);    assertEquals("Veni%2C+vidi%2C+vici+%3F", returnValue);}
0
public void testUrlDecode() throws Exception
{    AbstractFunction function = new UrlDecode();    params.add(new CompoundVariable("Veni%2C+vidi%2C+vici+%3F"));    function.setParameters(params);    String returnValue = function.execute(result, null);    assertEquals("Veni, vidi, vici ?", returnValue);}
0
public void setUp()
{    jmctx = JMeterContextService.getContext();    jmctx.setVariables(new JMeterVariables());    vars = jmctx.getVariables();}
0
public void variableTest1() throws Exception
{    Variable r = new Variable();    vars.put("A_1", "a1");    vars.put("A_2", "a2");    vars.put("one", "1");    vars.put("two", "2");    vars.put("V", "A");    Collection<CompoundVariable> parms;    String s;    parms = makeParams("V", null, null);    r.setParameters(parms);    s = r.execute(null, null);    assertEquals("A", s);    parms = makeParams("V", "DEFAULT", null);    r.setParameters(parms);    s = r.execute(null, null);    assertEquals("A", s);    parms = makeParams("EMPTY", "DEFAULT", null);    r.setParameters(parms);    s = r.execute(null, null);    assertEquals("DEFAULT", s);    parms = makeParams("X", null, null);    r.setParameters(parms);    s = r.execute(null, null);    assertEquals("X", s);    parms = makeParams("A${X}", null, null);    r.setParameters(parms);    s = r.execute(null, null);    assertEquals("A${X}", s);    parms = makeParams("A_1", null, null);    r.setParameters(parms);    s = r.execute(null, null);    assertEquals("a1", s);    parms = makeParams("A_2", null, null);    r.setParameters(parms);    s = r.execute(null, null);    assertEquals("a2", s);    parms = makeParams("A_${two}", null, null);    r.setParameters(parms);    s = r.execute(null, null);    assertEquals("a2", s);    parms = makeParams("${V}_${one}", null, null);    r.setParameters(parms);    s = r.execute(null, null);    assertEquals("a1", s);}
0
private static XPath createXPath(String file, String expr) throws Exception
{    Collection<CompoundVariable> parms = new ArrayList<>();    parms.add(new CompoundVariable(ResourceLocator.getResource(XPathConcurrencyTest.class, file)));    parms.add(new CompoundVariable(expr));    XPath xp = new XPath();    xp.setParameters(parms);    return xp;}
0
public void concurrentRequestsToSameXPath(ReferenceEquality referenceEquality) throws Exception
{        Assumptions.assumeTrue(TEST_INDEX.incrementAndGet() == 1, "Second execution of concurrentRequestsToSameXPath is known to fail");    XPath a = createXPath("testfiles/XPathTest.xml", "//user/@username");    XPath b;    if (referenceEquality == ReferenceEquality.SAME_OBJECTS) {        b = a;    } else {        b = createXPath("testfiles/XPathTest.xml", "//user/@username");    }    Synchronizer sync = new Synchronizer();    synchronized (sync) {        Future<Void> thread2 = CompletableFuture.runAsync(() -> {            synchronized (sync) {                try {                    assertEquals("u3", b.execute());                    assertEquals("u4", b.execute());                    sync.pass();                    assertEquals("u1", b.execute());                    sync.pass();                    assertEquals("u3", b.execute());                    sync.done();                } catch (Throwable e) {                    throw sync.failure(e, "thread2");                }            }        });        assertEquals("u1", a.execute());        assertEquals("u2", a.execute());        sync.pass();        assertEquals("u5", a.execute());        sync.pass();        assertEquals("u2", a.execute());        sync.pass();        thread2.get();    }}
0
public String getLabelResource()
{        return "test_plan";}
0
public String getStaticLabel()
{        return "Test Generator";}
0
public String getDocAnchor()
{    return super.getDocAnchor();}
0
public Collection<String> getMenuCategories()
{    return Arrays.asList(MenuFactory.NON_TEST_ELEMENTS);}
0
public void actionPerformed(ActionEvent action)
{    GuiPackage guiPackage = GuiPackage.getInstance();    JMeterTreeModel treeModel = guiPackage.getTreeModel();    JMeterTreeNode myTarget = findFirstNodeOfType(ThreadGroup.class, treeModel);    if (myTarget == null) {        JMeterUtils.reportErrorToUser("Cannot find Thread Group");        return;    }    addElements(MenuFactory.CONTROLLERS, "Controllers", guiPackage, treeModel, myTarget);    addElements(MenuFactory.SAMPLERS, "Samplers", guiPackage, treeModel, myTarget);    addElements(MenuFactory.TIMERS, "Timers", guiPackage, treeModel, myTarget);    addElements(MenuFactory.ASSERTIONS, "Assertions", guiPackage, treeModel, myTarget);    addElements(MenuFactory.PRE_PROCESSORS, "Pre Processors", guiPackage, treeModel, myTarget);    addElements(MenuFactory.POST_PROCESSORS, "Post Processors", guiPackage, treeModel, myTarget);    addElements(MenuFactory.CONFIG_ELEMENTS, "Config Elements", guiPackage, treeModel, myTarget);    addElements(MenuFactory.LISTENERS, "Listeners", guiPackage, treeModel, myTarget);}
0
private void addElements(String menuKey, String title, GuiPackage guiPackage, JMeterTreeModel treeModel, JMeterTreeNode myTarget)
{    myTarget = addSimpleController(treeModel, myTarget, title);    JPopupMenu jp = MenuFactory.makeMenu(menuKey, "").getPopupMenu();    for (Component comp : jp.getComponents()) {        JMenuItem item = (JMenuItem) comp;        try {            TestElement testElement = guiPackage.createTestElement(item.getName());            addToTree(treeModel, myTarget, testElement);        } catch (Exception e) {            addSimpleController(treeModel, myTarget, item.getName() + " " + e.getMessage());        }    }}
0
public TestElement createTestElement()
{    TestElement el = new ConfigTestElement();    modifyTestElement(el);    return el;}
0
public void modifyTestElement(TestElement element)
{    configureTestElement(element);}
0
private Component makeLabelPanel()
{    JPanel labelPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));    ButtonGroup bg = new ButtonGroup();    bg.add(generateButton);    generateButton.addActionListener(this);    labelPanel.add(generateButton);    return labelPanel;}
0
private void init()
{    setLayout(new BorderLayout(0, 5));    setBorder(makeBorder());    add(makeTitlePanel(), BorderLayout.NORTH);    JPanel p = new JPanel();    p.setLayout(new BorderLayout());    p.add(makeLabelPanel(), BorderLayout.NORTH);        p.add(Box.createVerticalStrut(70), BorderLayout.WEST);    add(p, BorderLayout.CENTER);}
0
private JMeterTreeNode addSimpleController(JMeterTreeModel model, JMeterTreeNode node, String name)
{    final TestElement sc = new GenericController();    sc.setProperty(TestElement.GUI_CLASS, LOGIC_CONTROLLER_GUI);        sc.setProperty(TestElement.NAME, name);    return addToTree(model, node, sc);}
0
public void run()
{    try {        newNode = model.addComponent(testElement, node);    } catch (IllegalUserActionException e) {        throw new Error(e);    }}
0
private JMeterTreeNode addToTree(final JMeterTreeModel model, final JMeterTreeNode node, final TestElement sc)
{    RunGUI runnable = new RunGUI(model, node, sc);    if (SwingUtilities.isEventDispatchThread()) {        runnable.run();    } else {        try {            SwingUtilities.invokeAndWait(runnable);        } catch (InterruptedException | InvocationTargetException e) {            throw new Error(e);        }    }    return runnable.newNode;}
0
private JMeterTreeNode findFirstNodeOfType(Class<?> type, JMeterTreeModel treeModel)
{    return treeModel.getNodesOfType(type).stream().filter(JMeterTreeNode::isEnabled).findFirst().orElse(null);}
0
public boolean isFinished(int lastOptionCode)
{    return false;}
0
public final String[] getUnparsedArgs()
{    return this.unparsedArgs;}
0
public final Vector<CLOption> getArguments()
{    return this.options;}
0
public final CLOption getArgumentById(final int id)
{    return this.optionIndex.get(Integer.valueOf(id));}
0
public final CLOption getArgumentByName(final String name)
{    return this.optionIndex.get(name);}
0
private CLOptionDescriptor getDescriptorFor(final int id)
{    for (CLOptionDescriptor optionDescriptor : this.optionDescriptors) {        if (optionDescriptor.getId() == id) {            return optionDescriptor;        }    }    return null;}
0
private CLOptionDescriptor getDescriptorFor(final String name)
{    for (CLOptionDescriptor optionDescriptor : this.optionDescriptors) {        if (optionDescriptor.getName().equals(name)) {            return optionDescriptor;        }    }    return null;}
0
public final String getErrorString()
{    return this.errorMessage;}
0
private int getStateFor(final CLOptionDescriptor descriptor)
{    final int flags = descriptor.getFlags();    if ((flags & CLOptionDescriptor.ARGUMENTS_REQUIRED_2) == CLOptionDescriptor.ARGUMENTS_REQUIRED_2) {        return STATE_REQUIRE_2ARGS;    } else if ((flags & CLOptionDescriptor.ARGUMENT_REQUIRED) == CLOptionDescriptor.ARGUMENT_REQUIRED) {        return STATE_REQUIRE_ARG;    } else if ((flags & CLOptionDescriptor.ARGUMENT_OPTIONAL) == CLOptionDescriptor.ARGUMENT_OPTIONAL) {        return STATE_OPTIONAL_ARG;    } else {        return STATE_NORMAL;    }}
0
private void checkIncompatibilities(final Vector<CLOption> arguments) throws ParseException
{    final int size = arguments.size();    for (int i = 0; i < size; i++) {        final CLOption option = arguments.elementAt(i);        final int id = option.getDescriptor().getId();        final CLOptionDescriptor descriptor = getDescriptorFor(id);                if (null == descriptor) {            continue;        }        final int[] incompatible = descriptor.getIncompatible();        checkIncompatible(arguments, incompatible, i);    }}
0
private void checkIncompatible(final Vector<CLOption> arguments, final int[] incompatible, final int original) throws ParseException
{    final int size = arguments.size();    for (int i = 0; i < size; i++) {        if (original == i) {            continue;        }        final CLOption option = arguments.elementAt(i);        final int id = option.getDescriptor().getId();        for (int anIncompatible : incompatible) {            if (id == anIncompatible) {                final CLOption originalOption = arguments.elementAt(original);                final int originalId = originalOption.getDescriptor().getId();                String message = null;                if (id == originalId) {                    message = "Duplicate options for " + describeDualOption(originalId) + " found.";                } else {                    message = "Incompatible options -" + describeDualOption(id) + " and " + describeDualOption(originalId) + " found.";                }                throw new ParseException(message, 0);            }        }    }}
0
private String describeDualOption(final int id)
{    final CLOptionDescriptor descriptor = getDescriptorFor(id);    if (null == descriptor) {        return "<parameter>";    } else {        final StringBuilder sb = new StringBuilder();        boolean hasCharOption = false;        if (Character.isLetter((char) id)) {            sb.append('-');            sb.append((char) id);            hasCharOption = true;        }        final String longOption = descriptor.getName();        if (null != longOption) {            if (hasCharOption) {                sb.append('/');            }            sb.append("--");            sb.append(longOption);        }        return sb.toString();    }}
0
private String[] subArray(final String[] array, final int index, final int charIndex)
{    final int remaining = array.length - index;    final String[] result = new String[remaining];    if (remaining > 1) {        System.arraycopy(array, index + 1, result, 1, remaining - 1);    }    result[0] = array[index].substring(charIndex - 1);    return result;}
0
private void parse() throws ParseException
{    if (0 == this.args.length) {        return;    }    this.stringLength = this.args[this.argIndex].length();    while (true) {        this.ch = peekAtChar();        if (this.argIndex >= this.args.length) {            break;        }        if (null != this.control && this.control.isFinished(this.lastOptionId)) {                        this.unparsedArgs = subArray(this.args, this.argIndex, this.stringIndex);            return;        }        if (STATE_OPTION_MODE == this.state) {                        if (0 == this.ch) {                                getChar();                this.state = STATE_NORMAL;            } else {                parseShortOption();            }        } else if (STATE_NORMAL == this.state) {            parseNormal();        } else if (STATE_NO_OPTIONS == this.state) {                        addOption(new CLOption(this.args[this.argIndex++]));        } else {            parseArguments();        }    }        if (this.option != null) {        if (STATE_OPTIONAL_ARG == this.state) {            this.options.addElement(this.option);        } else if (STATE_REQUIRE_ARG == this.state) {            final CLOptionDescriptor descriptor = getDescriptorFor(this.option.getDescriptor().getId());            final String message = "Missing argument to option " + getOptionDescription(descriptor);            throw new ParseException(message, 0);        } else if (STATE_REQUIRE_2ARGS == this.state) {            if (1 == this.option.getArgumentCount()) {                this.option.addArgument("");                this.options.addElement(this.option);            } else {                final CLOptionDescriptor descriptor = getDescriptorFor(this.option.getDescriptor().getId());                final String message = "Missing argument to option " + getOptionDescription(descriptor);                throw new ParseException(message, 0);            }        } else {            throw new ParseException("IllegalState " + this.state + ": " + this.option, 0);        }    }}
0
private String getOptionDescription(final CLOptionDescriptor descriptor)
{    if (this.isLong) {        return "--" + descriptor.getName();    } else {        return "-" + (char) descriptor.getId();    }}
0
private char peekAtChar()
{    if (INVALID == this.lastChar) {        this.lastChar = readChar();    }    return (char) this.lastChar;}
0
private char getChar()
{    if (INVALID != this.lastChar) {        final char result = (char) this.lastChar;        this.lastChar = INVALID;        return result;    } else {        return readChar();    }}
0
private char readChar()
{    if (this.stringIndex >= this.stringLength) {        this.argIndex++;        this.stringIndex = 0;        if (this.argIndex < this.args.length) {            this.stringLength = this.args[this.argIndex].length();        } else {            this.stringLength = 0;        }        return 0;    }    if (this.argIndex >= this.args.length) {        return 0;    }    return this.args[this.argIndex].charAt(this.stringIndex++);}
0
private Token nextToken(final char[] separators)
{    this.ch = getChar();    if (isSeparator(this.ch, separators)) {        this.tokesep = this.ch;        this.ch = getChar();        return new Token(TOKEN_SEPARATOR, null);    }    final StringBuilder sb = new StringBuilder();    do {        sb.append(this.ch);        this.ch = getChar();    } while (!isSeparator(this.ch, separators));    this.tokesep = this.ch;    return new Token(TOKEN_STRING, sb.toString());}
0
private boolean isSeparator(final char ch, final char[] separators)
{    for (char separator : separators) {        if (ch == separator) {            return true;        }    }    return false;}
0
private void addOption(final CLOption option)
{    this.options.addElement(option);    this.lastOptionId = option.getDescriptor().getId();    this.option = null;}
0
private void parseOption(final CLOptionDescriptor descriptor, final String optionString) throws ParseException
{    if (null == descriptor) {        throw new ParseException("Unknown option " + optionString, 0);    }    this.state = getStateFor(descriptor);    this.option = new CLOption(descriptor);    if (STATE_NORMAL == this.state) {        addOption(this.option);    }}
0
private void parseShortOption() throws ParseException
{    this.ch = getChar();    final CLOptionDescriptor descriptor = getDescriptorFor(this.ch);    this.isLong = false;    parseOption(descriptor, "-" + this.ch);    if (STATE_NORMAL == this.state) {        this.state = STATE_OPTION_MODE;    }}
0
private void parseArguments() throws ParseException
{    if (STATE_REQUIRE_ARG == this.state) {        if ('=' == this.ch || 0 == this.ch) {            getChar();        }        final Token token = nextToken(NULL_SEPARATORS);        this.option.addArgument(token.getValue());        addOption(this.option);        this.state = STATE_NORMAL;    } else if (STATE_OPTIONAL_ARG == this.state) {        if ('-' == this.ch || 0 == this.ch) {                        getChar();            addOption(this.option);            this.state = STATE_NORMAL;            return;        }        if (this.isLong && '=' != this.tokesep) {                        addOption(this.option);            this.state = STATE_NORMAL;            return;        }        if ('=' == this.ch) {            getChar();        }        final Token token = nextToken(NULL_SEPARATORS);        this.option.addArgument(token.getValue());        addOption(this.option);        this.state = STATE_NORMAL;    } else if (STATE_REQUIRE_2ARGS == this.state) {        if (0 == this.option.getArgumentCount()) {            /*                 * Fix bug: -D arg1=arg2 was causing parse error; however                 * --define arg1=arg2 is OK This seems to be because the parser                 * skips the terminator for the long options, but was not doing                 * so for the short options.                 */            if (!this.isLong) {                if (0 == peekAtChar()) {                    getChar();                }            }            final Token token = nextToken(ARG_SEPARATORS);            if (TOKEN_SEPARATOR == token.getType()) {                final CLOptionDescriptor descriptor = getDescriptorFor(this.option.getDescriptor().getId());                final String message = "Unable to parse first argument for option " + getOptionDescription(descriptor);                throw new ParseException(message, 0);            } else {                this.option.addArgument(token.getValue());            }                        if (0 == this.ch && '-' == peekAtChar()) {                                this.option.addArgument("");                this.options.addElement(this.option);                this.state = STATE_NORMAL;            }        } else         {            final StringBuilder sb = new StringBuilder();            this.ch = getChar();            while (!isSeparator(this.ch, NULL_SEPARATORS)) {                sb.append(this.ch);                this.ch = getChar();            }            final String argument = sb.toString();            this.option.addArgument(argument);            addOption(this.option);            this.option = null;            this.state = STATE_NORMAL;        }    }}
0
private void parseNormal() throws ParseException
{    if ('-' != this.ch) {                final String argument = nextToken(NULL_SEPARATORS).getValue();        addOption(new CLOption(argument));        this.state = STATE_NORMAL;    } else {                getChar();        if (0 == peekAtChar()) {            throw new ParseException("Malformed option -", 0);        } else {            this.ch = peekAtChar();                        if ('-' != this.ch) {                parseShortOption();            } else {                                getChar();                if (0 == peekAtChar()) {                    getChar();                    this.state = STATE_NO_OPTIONS;                } else {                                        final String optionName = nextToken(ARG_SEPARATORS).getValue();                    final CLOptionDescriptor descriptor = getDescriptorFor(optionName);                    this.isLong = true;                    parseOption(descriptor, "--" + optionName);                }            }        }    }}
0
private void buildOptionIndex()
{    final int size = this.options.size();    this.optionIndex = new Hashtable<>(size * 2);    for (final CLOption option : this.options) {        final CLOptionDescriptor optionDescriptor = getDescriptorFor(option.getDescriptor().getId());        this.optionIndex.put(Integer.valueOf(option.getDescriptor().getId()), option);        if (null != optionDescriptor && null != optionDescriptor.getName()) {            this.optionIndex.put(optionDescriptor.getName(), option);        }    }}
0
public final String getArgument()
{    return getArgument(0);}
0
public final String getArgument(final int index)
{    if (this.arguments == null || index < 0 || index >= this.arguments.length) {        return null;    } else {        return this.arguments[index];    }}
0
public final CLOptionDescriptor getDescriptor()
{    return this.descriptor;}
0
public final void addArgument(final String argument)
{    if (null == this.arguments) {        this.arguments = new String[] { argument };    } else {        final String[] arguments = new String[this.arguments.length + 1];        System.arraycopy(this.arguments, 0, arguments, 0, this.arguments.length);        arguments[this.arguments.length] = argument;        this.arguments = arguments;    }}
0
public final int getArgumentCount()
{    if (null == this.arguments) {        return 0;    } else {        return this.arguments.length;    }}
0
public final String toString()
{    final StringBuilder sb = new StringBuilder();    sb.append("[");    final char id = (char) this.descriptor.getId();    if (id == TEXT_ARGUMENT) {        sb.append("TEXT ");    } else {        sb.append("Option ");        sb.append(id);    }    if (null != this.arguments) {        sb.append(", ");        sb.append(Arrays.asList(this.arguments));    }    sb.append(" ]");    return sb.toString();}
0
 final String toShortString()
{    final StringBuilder sb = new StringBuilder();    final char id = (char) this.descriptor.getId();    if (id != TEXT_ARGUMENT) {        sb.append("-");        sb.append(id);    }    if (null != this.arguments) {        if (id != TEXT_ARGUMENT) {            sb.append("=");        }        sb.append(Arrays.asList(this.arguments));    }    return sb.toString();}
0
private void checkFlags(final int flags)
{    int modeCount = 0;    if ((ARGUMENT_REQUIRED & flags) == ARGUMENT_REQUIRED) {        modeCount++;    }    if ((ARGUMENT_OPTIONAL & flags) == ARGUMENT_OPTIONAL) {        modeCount++;    }    if ((ARGUMENT_DISALLOWED & flags) == ARGUMENT_DISALLOWED) {        modeCount++;    }    if ((ARGUMENTS_REQUIRED_2 & flags) == ARGUMENTS_REQUIRED_2) {        modeCount++;    }    if (0 == modeCount) {        final String message = "No mode specified for option " + this;        throw new IllegalStateException(message);    } else if (1 != modeCount) {        final String message = "Multiple modes specified for option " + this;        throw new IllegalStateException(message);    }}
0
protected final int[] getIncompatible()
{    return this.incompatible;}
0
public final String getDescription()
{    return this.description;}
0
public final int getFlags()
{    return this.flags;}
0
public final int getId()
{    return this.id;}
0
public final String getName()
{    return this.name;}
0
public final String toString()
{    return "[OptionDescriptor " + name + ", " + id + ", " + flags + ", " + description + "]";}
0
public static StringBuilder describeOptions(final CLOptionDescriptor[] options)
{    final String lSep = System.getProperty("line.separator");    final StringBuilder sb = new StringBuilder();    for (CLOptionDescriptor option : options) {        final char ch = (char) option.getId();        final String name = option.getName();        String description = option.getDescription();        int flags = option.getFlags();        boolean argumentOptional = (flags & CLOptionDescriptor.ARGUMENT_OPTIONAL) == CLOptionDescriptor.ARGUMENT_OPTIONAL;        boolean argumentRequired = (flags & CLOptionDescriptor.ARGUMENT_REQUIRED) == CLOptionDescriptor.ARGUMENT_REQUIRED;        boolean twoArgumentsRequired = (flags & CLOptionDescriptor.ARGUMENTS_REQUIRED_2) == CLOptionDescriptor.ARGUMENTS_REQUIRED_2;        boolean needComma = false;        if (twoArgumentsRequired) {            argumentRequired = true;        }        sb.append('\t');        if (Character.isLetter(ch)) {            sb.append("-");            sb.append(ch);            needComma = true;        }        if (null != name) {            if (needComma) {                sb.append(", ");            }            sb.append("--");            sb.append(name);        }        if (argumentOptional) {            sb.append(" [<argument>]");        }        if (argumentRequired) {            sb.append(" <argument>");        }        if (twoArgumentsRequired) {            sb.append("=<value>");        }        sb.append(lSep);        if (null != description) {            while (description.length() > MAX_DESCRIPTION_COLUMN_LENGTH) {                final String descriptionPart = description.substring(0, MAX_DESCRIPTION_COLUMN_LENGTH);                description = description.substring(MAX_DESCRIPTION_COLUMN_LENGTH);                sb.append("\t\t");                sb.append(descriptionPart);                sb.append(lSep);            }            sb.append("\t\t");            sb.append(description);            sb.append(lSep);        }    }    return sb;}
0
 final String getValue()
{    return this.value;}
0
 final int getType()
{    return this.type;}
0
public final String toString()
{    return this.type + ":" + this.value;}
0
public void replaceHeader(String oldHeader, String newHeader)
{    List<Object> tempList;    int index = header.indexOf(oldHeader);    header.set(index, newHeader);    tempList = data.remove(oldHeader);    data.put(newHeader, tempList);}
0
public void append(Data d)
{    boolean valid = true;    String[] headers = getHeaders();    String[] dHeaders = d.getHeaders();    if (headers.length != dHeaders.length) {        valid = false;    } else {        for (String dHeader : dHeaders) {            if (!header.contains(dHeader)) {                valid = false;                break;            }        }    }    if (valid) {        currentPos = size;        d.reset();        while (d.next()) {            for (String aHeader : headers) {                addColumnValue(aHeader, d.getColumnValue(aHeader));            }        }    }}
0
public int getCurrentPos()
{    return currentPos;}
0
public void removeRow()
{    List<Object> tempList;    Iterator<String> it = data.keySet().iterator();        if (currentPos > -1 && currentPos < size) {                while (it.hasNext()) {            tempList = data.get(it.next());            tempList.remove(currentPos);        }        if (currentPos > 0) {            currentPos--;        }        size--;    }}
1
public void removeRow(int index)
{        if (index < size) {        setCurrentPos(index);                removeRow();    }}
1
public void addRow()
{    String[] headers = getHeaders();    List<Object> tempList = new ArrayList<>();    for (int i = 0; i < headers.length; i++) {        if ((tempList = data.get(header.get(i))) == null) {            tempList = new ArrayList<>();            data.put(headers[i], tempList);        }        tempList.add("");    }    size = tempList.size();    setCurrentPos(size - 1);}
0
public void setCurrentPos(int r)
{    currentPos = r;}
0
public void sort(String column)
{    sortData(column, 0, size);}
0
private void swapRows(int row1, int row2)
{    for (Map.Entry<String, List<Object>> entry : data.entrySet()) {        List<Object> temp = entry.getValue();        Object o = temp.get(row1);        temp.set(row1, temp.get(row2));        temp.set(row2, o);    }}
0
private void sortData(String column, int start, int end)
{    int x = start;    int y = end - 1;    String basis = data.get(column).get((x + y) / 2).toString();    if (x == y) {        return;    }    while (x <= y) {        while (x < end && data.get(column).get(x).toString().compareTo(basis) < 0) {            x++;        }        while (y >= (start - 1) && data.get(column).get(y).toString().compareTo(basis) > 0) {            y--;        }        if (x <= y) {            swapRows(x, y);            x++;            y--;        }    }    if (x == y) {        x++;    }    y = end - x;    if (x > 0) {        sortData(column, start, x);    }    if (y > 0) {        sortData(column, x, end);    }}
0
public int size()
{    return size;}
0
public void addColumnValue(String column, Object value)
{    List<Object> tempList;    if ((tempList = data.get(column)) == null) {        tempList = new ArrayList<>();        data.put(column, tempList);    }    int s = tempList.size();    if (currentPos == -1) {        currentPos = size;    }    if (currentPos >= size) {        size = currentPos + 1;    }    while (currentPos > s) {        s++;        tempList.add(null);    }    if (currentPos == s) {        tempList.add(value);    } else {        tempList.set(currentPos, value);    }}
0
public int findValue(String column, Object value)
{    return data.get(column).indexOf(value);}
0
public void setColumnValue(String column, Object value)
{    List<Object> tempList;    if ((tempList = data.get(column)) == null) {        tempList = new ArrayList<>();        data.put(column, tempList);    }    if (currentPos == -1) {        currentPos = 0;    }    if (currentPos >= size) {        size++;        tempList.add(value);    } else if (currentPos >= tempList.size()) {        tempList.add(value);    } else {        tempList.set(currentPos, value);    }}
0
public boolean hasHeader(String column)
{    return data.containsKey(column);}
0
public boolean next()
{    return ++currentPos < size;}
0
public boolean previous()
{    return --currentPos >= 0;}
0
public void reset()
{    currentPos = -1;}
0
public Object getColumnValue(String column)
{    try {        if (currentPos < size) {            return data.get(column).get(currentPos);        } else {            return null;        }    } catch (Exception e) {        return null;    }}
0
public Object getColumnValue(int column)
{    String columnName = header.get(column);    return getColumnValue(columnName);}
0
public Object getColumnValue(int column, int row)
{    setCurrentPos(row);    return getColumnValue(column);}
0
public void removeColumn(int col)
{    String columnName = header.get(col);    data.remove(columnName);    header.remove(columnName);}
0
public void setHeaders(String[] h)
{    header = new ArrayList<>(h.length);    for (int x = 0; x < h.length; x++) {        header.add(h[x]);        data.put(h[x], new ArrayList<>());    }}
0
public String[] getHeaders()
{    String[] r = new String[header.size()];    if (r.length > 0) {        r = header.toArray(r);    }    return r;}
0
public int getHeaderCount()
{    return header.size();}
0
public List<Object> getColumnAsObjectArray(String columnName)
{    return data.get(columnName);}
0
public String[] getColumn(String columnName)
{    String[] returnValue;    List<?> temp = data.get(columnName);    if (temp != null) {        returnValue = new String[temp.size()];        int index = 0;        for (Object o : temp) {            if (o != null) {                if (o instanceof String) {                    returnValue[index++] = (String) o;                } else {                    returnValue[index++] = o.toString();                }            }        }    } else {        returnValue = new String[0];    }    return returnValue;}
0
public void setData(String[] contents, String delimiter)
{    setHeaders(JOrphanUtils.split(contents[0], delimiter));    int x = 1;    while (x < contents.length) {        setLine(JOrphanUtils.split(contents[x++], delimiter));    }}
0
public void setColumnData(String colName, Object value)
{    List<Object> list = this.getColumnAsObjectArray(colName);    while (list.size() < size()) {        list.add(value);    }}
0
public void setColumnData(int col, List<?> data)
{    reset();    Iterator<?> iter = data.iterator();    String columnName = header.get(col);    while (iter.hasNext()) {        next();        setColumnValue(columnName, iter.next());    }}
0
public void addHeader(String s)
{    header.add(s);    data.put(s, new ArrayList<>(Math.max(size(), 100)));}
0
public void setLine(String[] line)
{    List<Object> tempList;    String[] h = getHeaders();    for (int count = 0; count < h.length; count++) {        tempList = data.get(h[count]);        if (count < line.length && line[count].length() > 0) {            tempList.add(line[count]);        } else {            tempList.add("N/A");        }    }    size++;}
0
public void setLine(String[] line, String deflt)
{    List<Object> tempList;    String[] h = getHeaders();    for (int count = 0; count < h.length; count++) {        tempList = data.get(h[count]);        if (count < line.length && line[count].length() > 0) {            tempList.add(line[count]);        } else {            tempList.add(deflt);        }    }    size++;}
0
public String[] getDataAsText()
{    StringBuilder temp = new StringBuilder("");    String[] line = new String[size + 1];    String[] elements = getHeaders();    for (int count = 0; count < elements.length; count++) {        temp.append(elements[count]);        if (count + 1 < elements.length) {            temp.append("\t");        }    }    line[0] = temp.toString();    reset();    int index = 1;    temp = new StringBuilder();    while (next()) {        temp.setLength(0);        for (int count = 0; count < elements.length; count++) {            temp.append(getColumnValue(count));            if (count + 1 < elements.length) {                temp.append("\t");            }        }        line[index++] = temp.toString();    }    return line;}
0
public String toString()
{    String[] contents = getDataAsText();    StringBuilder sb = new StringBuilder();    boolean first = true;    for (String content : contents) {        if (!first) {            sb.append("\n");        } else {            first = false;        }        sb.append(content);    }    return sb.toString();}
0
public void putAll(Map<?, ? extends HashTree> map)
{    if (map instanceof HashTree) {        this.add((HashTree) map);    } else {        throw new UnsupportedOperationException("can only putAll other HashTree objects");    }}
0
public Set<Entry<Object, HashTree>> entrySet()
{    return data.entrySet();}
0
public boolean containsValue(Object value)
{    return data.containsValue(value);}
0
public HashTree put(Object key, HashTree value)
{    HashTree previous = data.get(key);    add(key, value);    return previous;}
0
public void clear()
{    data.clear();}
0
public Collection<HashTree> values()
{    return data.values();}
0
public void add(Object key, HashTree subTree)
{    add(key).add(subTree);}
0
public void add(HashTree newTree)
{    for (Object item : newTree.list()) {        add(item).add(newTree.getTree(item));    }}
0
public boolean containsKey(Object o)
{    return data.containsKey(o);}
0
public boolean isEmpty()
{    return data.isEmpty();}
0
public void set(Object key, Object value)
{    data.put(key, createNewTree(value));}
0
public void set(Object key, HashTree t)
{    data.put(key, t);}
0
public void set(Object key, Object[] values)
{    data.put(key, createNewTree(Arrays.asList(values)));}
0
public void set(Object key, Collection<?> values)
{    data.put(key, createNewTree(values));}
0
public void set(Object[] treePath, Object[] values)
{    if (treePath != null && values != null) {        set(Arrays.asList(treePath), Arrays.asList(values));    }}
0
public void set(Object[] treePath, Collection<?> values)
{    if (treePath != null) {        set(Arrays.asList(treePath), values);    }}
0
public void set(Collection<?> treePath, Object[] values)
{    HashTree tree = addTreePath(treePath);    tree.set(Arrays.asList(values));}
0
public void set(Collection<?> values)
{    clear();    this.add(values);}
0
public void set(Collection<?> treePath, Collection<?> values)
{    HashTree tree = addTreePath(treePath);    tree.set(values);}
0
public HashTree add(Object key)
{    if (!data.containsKey(key)) {        HashTree newTree = createNewTree();        data.put(key, newTree);        return newTree;    }    return getTree(key);}
0
public void add(Object[] keys)
{    for (Object key : keys) {        add(key);    }}
0
public void add(Collection<?> keys)
{    for (Object o : keys) {        add(o);    }}
0
public HashTree add(Object key, Object value)
{    return add(key).add(value);}
0
public void add(Object key, Object[] values)
{    add(key).add(values);}
0
public void add(Object key, Collection<?> values)
{    add(key).add(values);}
0
public void add(Object[] treePath, Object[] values)
{    if (treePath != null) {        add(Arrays.asList(treePath), Arrays.asList(values));    }}
0
public void add(Object[] treePath, Collection<?> values)
{    if (treePath != null) {        add(Arrays.asList(treePath), values);    }}
0
public HashTree add(Object[] treePath, Object value)
{    return add(Arrays.asList(treePath), value);}
0
public void add(Collection<?> treePath, Object[] values)
{    HashTree tree = addTreePath(treePath);    tree.add(Arrays.asList(values));}
0
public HashTree add(Collection<?> treePath, Object value)
{    HashTree tree = addTreePath(treePath);    return tree.add(value);}
0
public void add(Collection<?> treePath, Collection<?> values)
{    HashTree tree = addTreePath(treePath);    tree.add(values);}
0
protected HashTree addTreePath(Collection<?> treePath)
{    HashTree tree = this;    for (Object temp : treePath) {        tree = tree.add(temp);    }    return tree;}
0
public HashTree getTree(Object key)
{    return data.get(key);}
0
public HashTree get(Object key)
{    return getTree(key);}
0
public HashTree getTree(Object[] treePath)
{    if (treePath != null) {        return getTree(Arrays.asList(treePath));    }    return this;}
0
public Object clone()
{    HashTree newTree = new HashTree();    cloneTree(newTree);    return newTree;}
0
protected void cloneTree(HashTree newTree)
{    for (Object key : list()) {        newTree.set(key, (HashTree) getTree(key).clone());    }}
0
protected HashTree createNewTree()
{    return new HashTree();}
0
protected HashTree createNewTree(Object key)
{    return new HashTree(key);}
0
protected HashTree createNewTree(Collection<?> values)
{    return new HashTree(values);}
0
public HashTree getTree(Collection<?> treePath)
{    return getTreePath(treePath);}
0
public Collection<Object> list()
{    return data.keySet();}
0
public Collection<?> list(Object key)
{    HashTree temp = data.get(key);    if (temp != null) {        return temp.list();    }    return new HashSet<>();}
0
public HashTree remove(Object key)
{    return data.remove(key);}
0
public Collection<?> list(Object[] treePath)
{    if (treePath != null) {        return list(Arrays.asList(treePath));    }    return list();}
0
public Collection<?> list(Collection<?> treePath)
{    HashTree tree = getTreePath(treePath);    if (tree != null) {        return tree.list();    }    return new HashSet<>();}
0
public void replaceKey(Object currentKey, Object newKey)
{    HashTree tree = getTree(currentKey);    data.remove(currentKey);    data.put(newKey, tree);}
0
public Object[] getArray()
{    return data.keySet().toArray();}
0
public Object[] getArray(Object key)
{    HashTree t = getTree(key);    if (t != null) {        return t.getArray();    }    return null;}
0
public Object[] getArray(Object[] treePath)
{    if (treePath != null) {        return getArray(Arrays.asList(treePath));    }    return getArray();}
0
public Object[] getArray(Collection<?> treePath)
{    HashTree tree = getTreePath(treePath);    return (tree != null) ? tree.getArray() : null;}
0
protected HashTree getTreePath(Collection<?> treePath)
{    HashTree tree = this;    for (Object aTreePath : treePath) {        tree = tree.getTree(aTreePath);        if (tree == null) {            return null;        }    }    return tree;}
0
public int hashCode()
{    return data.hashCode() * 7;}
0
public boolean equals(Object o)
{    if (!(o instanceof HashTree)) {        return false;    }    HashTree oo = (HashTree) o;    if (oo.size() != this.size()) {        return false;    }    return data.equals(oo.data);}
0
public Set<Object> keySet()
{    return data.keySet();}
0
public HashTree search(Object key)
{    HashTree result = getTree(key);    if (result != null) {        return result;    }    TreeSearcher searcher = new TreeSearcher(key);    try {        traverse(searcher);    } catch (RuntimeException e) {        if (!e.getMessage().equals(FOUND)) {            throw e;        }        }    return searcher.getResult();}
0
private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException
{    ois.defaultReadObject();}
0
private void writeObject(ObjectOutputStream oos) throws IOException
{    oos.defaultWriteObject();}
0
public int size()
{    return data.size();}
0
public void traverse(HashTreeTraverser visitor)
{    for (Object item : list()) {        visitor.addNode(item, getTree(item));        getTree(item).traverseInto(visitor);    }}
0
private void traverseInto(HashTreeTraverser visitor)
{    if (list().isEmpty()) {        visitor.processPath();    } else {        for (Object item : list()) {            final HashTree treeItem = getTree(item);            visitor.addNode(item, treeItem);            treeItem.traverseInto(visitor);        }    }    visitor.subtractNode();}
0
public String toString()
{    ConvertToString converter = new ConvertToString();    try {        traverse(converter);    } catch (Exception e) {                converter.reportError(e);    }    return converter.toString();}
0
public HashTree getResult()
{    return result;}
0
public void addNode(Object node, HashTree subTree)
{    result = subTree.getTree(target);    if (result != null) {                throw new RuntimeException(FOUND);    }}
0
public void processPath()
{}
0
public void subtractNode()
{}
0
public void addNode(Object key, HashTree subTree)
{    depth++;    string.append("\n").append(getSpaces()).append(key);    string.append(" {");}
0
public void subtractNode()
{    string.append("\n" + getSpaces() + "}");    depth--;}
0
public void processPath()
{}
0
public String toString()
{    string.append("\n}");    return string.toString();}
0
 void reportError(Throwable t)
{    string.append("Error: ").append(t.toString());}
0
private String getSpaces()
{    if (spaces.length() < depth * 2) {        while (spaces.length() < depth * 2) {            spaces.append("  ");        }    } else if (spaces.length() > depth * 2) {        spaces.setLength(depth * 2);    }    return spaces.toString();}
0
public Object clone()
{    ListedHashTree newTree = new ListedHashTree();    cloneTree(newTree);    return newTree;}
0
public void set(Object key, Object value)
{    if (!data.containsKey(key)) {        order.add(key);    }    super.set(key, value);}
0
public void set(Object key, HashTree t)
{    if (!data.containsKey(key)) {        order.add(key);    }    super.set(key, t);}
0
public void set(Object key, Object[] values)
{    if (!data.containsKey(key)) {        order.add(key);    }    super.set(key, values);}
0
public void set(Object key, Collection<?> values)
{    if (!data.containsKey(key)) {        order.add(key);    }    super.set(key, values);}
0
public void replaceKey(Object currentKey, Object newKey)
{    HashTree tree = getTree(currentKey);    data.remove(currentKey);    data.put(newKey, tree);                    int entry = -1;    for (int i = 0; i < order.size(); i++) {        Object ent = order.get(i);        if (ent == currentKey) {            entry = i;            break;        }    }    if (entry == -1) {        throw new JMeterError("Impossible state, data key not present in order: " + currentKey.getClass());    }    order.set(entry, newKey);}
0
public HashTree createNewTree()
{    return new ListedHashTree();}
0
public HashTree createNewTree(Object key)
{    return new ListedHashTree(key);}
0
public HashTree createNewTree(Collection<?> values)
{    return new ListedHashTree(values);}
0
public HashTree add(Object key)
{    if (!data.containsKey(key)) {        HashTree newTree = createNewTree();        data.put(key, newTree);        order.add(key);        return newTree;    }    return getTree(key);}
0
public Collection<Object> list()
{    return order;}
0
public HashTree remove(Object key)
{    order.remove(key);    return data.remove(key);}
0
public Object[] getArray()
{    return order.toArray();}
0
public int hashCode()
{    int hc = 17;    hc = hc * 37 + (order == null ? 0 : order.hashCode());    hc = hc * 37 + super.hashCode();    return hc;}
0
public boolean equals(Object o)
{    if (!(o instanceof ListedHashTree)) {        return false;    }    ListedHashTree lht = (ListedHashTree) o;    return super.equals(lht) && order.equals(lht.order);}
0
private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException
{    ois.defaultReadObject();}
0
private void writeObject(ObjectOutputStream oos) throws IOException
{    oos.defaultWriteObject();}
0
public void clear()
{    super.clear();    order.clear();}
0
public Collection<T> getSearchResults()
{        return objectsOfClass;}
0
public HashTree getSubTree(Object root)
{    return subTrees.get(root);}
0
public void addNode(Object node, HashTree subTree)
{    if (searchClass.isAssignableFrom(node.getClass())) {        objectsOfClass.add((T) node);        ListedHashTree tree = new ListedHashTree(node);        tree.set(node, subTree);        subTrees.put(node, tree);    }}
0
public void subtractNode()
{}
0
public void processPath()
{}
0
private static void addElement(StringBuilder sb, String prefix, String value)
{    if (value != null) {        sb.append(", ");        sb.append(prefix);        sb.append(value);    }}
0
public static void genkeypair(final File keystore, String alias, final String password, int validity, String dname, String ext) throws IOException
{    final File workingDir = keystore.getParentFile();    final SystemCommand nativeCommand = new SystemCommand(workingDir, null);    final List<String> arguments = new ArrayList<>();    arguments.add(getKeyToolPath());        arguments.add("-genkeypair");        arguments.add("-alias");    arguments.add(alias);        arguments.add("-dname");    arguments.add(dname == null ? DEFAULT_DNAME : dname);        arguments.add("-keyalg");        arguments.add("RSA");        arguments.add("-keystore");    arguments.add(keystore.getName());        arguments.add("-storepass");    arguments.add(password);        arguments.add("-keypass");    arguments.add(password);        arguments.add("-validity");    arguments.add(Integer.toString(validity));    if (ext != null) {                arguments.add("-ext");        arguments.add(ext);    }    try {        int exitVal = nativeCommand.run(arguments);        if (exitVal != 0) {            throw new IOException("  >> " + nativeCommand.getOutResult().trim() + " <<" + "\nCommand failed, code: " + exitVal + "\n'" + formatCommand(arguments) + "'");        }    } catch (InterruptedException e) {                throw new IOException("Command was interrupted\n" + nativeCommand.getOutResult(), e);    }}
0
private static String formatCommand(List<String> arguments)
{    StringBuilder builder = new StringBuilder();        boolean redact = false;    for (String string : arguments) {        final boolean quote = string.contains(" ");        if (quote) {            builder.append("\"");        }        builder.append(redact ? "{redacted}" : string);        if (quote) {            builder.append("\"");        }        builder.append(" ");        redact = "-storepass".equals(string) || "-keypass".equals(string);    }    if (!arguments.isEmpty()) {                builder.setLength(builder.length() - 1);    }    return builder.toString();}
0
public static void generateProxyCA(File keystore, String password, int validity) throws IOException
{    File caCertCrt = new File(ROOT_CACERT_CRT);    File caCertUsr = new File(ROOT_CACERT_USR);    boolean fileExists = false;    if (!keystore.delete() && keystore.exists()) {                fileExists = true;    }    if (!caCertCrt.delete() && caCertCrt.exists()) {                fileExists = true;    }    if (!caCertUsr.delete() && caCertUsr.exists()) {                fileExists = true;    }    if (fileExists) {            }        KeyToolUtils.genkeypair(keystore, ROOTCA_ALIAS, password, validity, DNAME_ROOT_CA_KEY, "bc:c");    KeyToolUtils.genkeypair(keystore, INTERMEDIATE_CA_ALIAS, password, validity, DNAME_INTERMEDIATE_CA_KEY, "bc:c");        ByteArrayOutputStream certReqOut = new ByteArrayOutputStream();        KeyToolUtils.keytool("-certreq", keystore, password, INTERMEDIATE_CA_ALIAS, null, certReqOut);        InputStream certReqIn = new ByteArrayInputStream(certReqOut.toByteArray());    ByteArrayOutputStream genCertOut = new ByteArrayOutputStream();    KeyToolUtils.keytool("-gencert", keystore, password, ROOTCA_ALIAS, certReqIn, genCertOut, "-ext", "BC:0");        InputStream genCertIn = new ByteArrayInputStream(genCertOut.toByteArray());    KeyToolUtils.keytool("-importcert", keystore, password, INTERMEDIATE_CA_ALIAS, genCertIn, null);        KeyToolUtils.keytool("-exportcert", keystore, password, ROOTCA_ALIAS, null, null, "-rfc", "-file", ROOT_CACERT_CRT);        if (caCertCrt.exists() && caCertCrt.canRead()) {        FileUtils.copyFile(caCertCrt, caCertUsr);    } else {            }}
1
public static void generateHostCert(File keystore, String password, String host, int validity) throws IOException
{        generateSignedCert(keystore, password, validity,     host,     host);}
0
private static void generateSignedCert(File keystore, String password, int validity, String alias, String subject) throws IOException
{    String dname = "cn=" + guardSubjectName(subject) + ", o=JMeter Proxy (TEMPORARY TRUST ONLY)";    String ext = "san=" + chooseExtension(subject);    KeyToolUtils.genkeypair(keystore, alias, password, validity, dname, ext);            ByteArrayOutputStream certReqOut = new ByteArrayOutputStream();    KeyToolUtils.keytool("-certreq", keystore, password, alias, null, certReqOut, "-ext", ext);            InputStream certReqIn = new ByteArrayInputStream(certReqOut.toByteArray());    ByteArrayOutputStream certOut = new ByteArrayOutputStream();    KeyToolUtils.keytool("-gencert", keystore, password, INTERMEDIATE_CA_ALIAS, certReqIn, certOut, "-ext", "ku:c=dig,keyE", "-ext ", ext);        InputStream certIn = new ByteArrayInputStream(certOut.toByteArray());    KeyToolUtils.keytool("-importcert", keystore, password, alias, certIn, null, "-noprompt");}
0
private static String guardSubjectName(String subject)
{    if (NumberUtils.isDigits(subject.substring(0, 1))) {        return "ip" + subject;    }    return subject;}
0
private static String chooseExtension(String subject)
{    if (NumberUtils.isDigits(subject.substring(0, 1))) {        return "ip:" + subject;    }    return "dns:" + subject;}
0
public static String list(final File keystore, final String storePass) throws IOException
{    final File workingDir = keystore.getParentFile();    final SystemCommand nativeCommand = new SystemCommand(workingDir, null);    final List<String> arguments = new ArrayList<>();    arguments.add(getKeyToolPath());        arguments.add("-list");        arguments.add("-v");        arguments.add("-keystore");    arguments.add(keystore.getName());        arguments.add("-storepass");    arguments.add(storePass);    runNativeCommand(nativeCommand, arguments);    return nativeCommand.getOutResult();}
0
private static void runNativeCommand(SystemCommand nativeCommand, List<String> arguments) throws IOException
{    try {        int exitVal = nativeCommand.run(arguments);        if (exitVal != 0) {            throw new IOException("Command failed, code: " + exitVal + "\n" + nativeCommand.getOutResult());        }    } catch (InterruptedException e) {                throw new IOException("Command was interrupted\n" + nativeCommand.getOutResult(), e);    }}
0
public static String[] getCAaliases()
{    return new String[] { ROOTCA_ALIAS, INTERMEDIATE_CA_ALIAS };}
0
public static String getRootCAalias()
{    return ROOTCA_ALIAS;}
0
private static void keytool(String command, File keystore, String password, String alias, InputStream input, OutputStream output, String... parameters) throws IOException
{    final File workingDir = keystore.getParentFile();    final SystemCommand nativeCommand = new SystemCommand(workingDir, 0L, 0, null, input, output, null);    final List<String> arguments = new ArrayList<>();    arguments.add(getKeyToolPath());    arguments.add(command);        arguments.add("-keystore");    arguments.add(keystore.getName());        arguments.add("-storepass");    arguments.add(password);        arguments.add("-keypass");    arguments.add(password);        arguments.add("-alias");    arguments.add(alias);    Collections.addAll(arguments, parameters);    runNativeCommand(nativeCommand, arguments);}
0
public static boolean haveKeytool()
{    return KEYTOOL_PATH != null;}
0
private static String getKeyToolPath() throws IOException
{    if (KEYTOOL_PATH == null) {        throw new IOException("keytool application cannot be found");    }    return KEYTOOL_PATH;}
0
private static boolean checkKeytool(String keytoolPath)
{    final SystemCommand nativeCommand = new SystemCommand(null, null);    final List<String> arguments = new ArrayList<>();    arguments.add(keytoolPath);        arguments.add("-help");    try {        int status = nativeCommand.run(arguments);        if (log.isDebugEnabled()) {                                }                return status == 0 || status == 1;    } catch (IOException ioe) {                        return false;    } catch (InterruptedException e) {                        return false;    }}
1
public void run()
{    final boolean isSystemOutput = os.equals(System.out) || os.equals(System.err);    try {        IOUtils.copyLarge(is, os);        if (!isSystemOutput) {            os.close();        }        is.close();    } catch (IOException e) {            } finally {        IOUtils.closeQuietly(is);        if (!isSystemOutput) {            IOUtils.closeQuietly(os);        }    }}
1
private static InputStream checkIn(String stdin) throws FileNotFoundException
{    String in = JOrphanUtils.nullifyIfEmptyTrimmed(stdin);    if (in == null) {        return null;    } else {        return new FileInputStream(in);    }}
0
private static OutputStream checkOut(String path) throws IOException
{    String in = JOrphanUtils.nullifyIfEmptyTrimmed(path);    if (in == null) {        return null;    } else {        return new FileOutputStream(path);    }}
0
public int run(List<String> arguments) throws InterruptedException, IOException
{    return run(arguments, stdin, stdout, stderr);}
0
private int run(List<String> arguments, InputStream in, OutputStream out, OutputStream err) throws InterruptedException, IOException
{    Process proc = null;    final ProcessBuilder procBuild = new ProcessBuilder(arguments);    if (env != null) {        procBuild.environment().putAll(env);    }    this.executionEnvironment = Collections.unmodifiableMap(procBuild.environment());    procBuild.directory(directory);    if (err == null) {        procBuild.redirectErrorStream(true);    }    try {        proc = procBuild.start();        final OutputStream procOut = proc.getOutputStream();        final InputStream procErr = proc.getErrorStream();        final InputStream procIn = proc.getInputStream();        final StreamCopier swerr;        if (err != null) {            swerr = new StreamCopier(procErr, err);            swerr.start();        } else {            swerr = null;        }        final StreamCopier swout = new StreamCopier(procIn, out);        swout.start();        final StreamCopier swin;        if (in != null) {            swin = new StreamCopier(in, procOut);            swin.start();        } else {            swin = null;                        procOut.close();        }        int exitVal = waitForEndWithTimeout(proc, timeoutMillis);        swout.join();        if (swerr != null) {            swerr.join();        }        if (swin != null) {                        swin.interrupt();            swin.join();        }        procErr.close();        procIn.close();        procOut.close();        return exitVal;    } finally {        if (proc != null) {            try {                proc.destroy();            } catch (Exception ignored) {                        }        }    }}
0
public int run(List<String> arguments1, List<String> arguments2) throws InterruptedException, IOException
{        ByteArrayOutputStream out = new ByteArrayOutputStream();    int exitCode = run(arguments1, stdin, out, stderr);    if (exitCode == 0) {        exitCode = run(arguments2, new ByteArrayInputStream(out.toByteArray()), stdout, stderr);    }    return exitCode;}
0
private int waitForEndWithTimeout(Process proc, long timeoutInMillis) throws InterruptedException
{    if (timeoutInMillis <= 0L) {        return proc.waitFor();    } else {        long now = System.currentTimeMillis();        long finish = now + timeoutInMillis;        while (System.currentTimeMillis() < finish) {            try {                return proc.exitValue();            } catch (IllegalThreadStateException e) {                                Thread.sleep(pollInterval);            }        }        try {            return proc.exitValue();        } catch (IllegalThreadStateException e) {                        throw new InterruptedException("Process timeout out after " + timeoutInMillis + " milliseconds");        }    }}
0
public String getOutResult()
{    if (stdoutWasNull) {                return stdout.toString();    } else {        return "";    }}
0
public Map<String, String> getExecutionEnvironment()
{    return executionEnvironment;}
0
public Object getRootNode()
{    return this.rootNode;}
0
public Object getValueAt(Object node, int col)
{    return null;}
0
public boolean isCellEditable(Object node, int col)
{    return false;}
0
public void setValueAt(Object val, Object node, int column)
{}
0
public int getColumnCount()
{    return headers.size();}
0
public int getRowCount()
{    return objects.size();}
0
public boolean isCellEditable(int rowIndex, int columnIndex)
{    return true;}
0
public Class<?> getColumnClass(int arg0)
{    return classes.get(arg0);}
0
public Object getValueAt(int rowIndex, int columnIndex)
{    return null;}
0
public void setValueAt(Object aValue, int rowIndex, int columnIndex)
{}
0
public String getColumnName(int columnIndex)
{    return headers.get(columnIndex);}
0
public int getChildCount(Object parent)
{    return 0;}
0
public Object getChild(Object parent, int index)
{    return null;}
0
public boolean isLeaf(Object node)
{    if (node instanceof TreeNode) {        return ((TreeNode) node).isLeaf();    } else {        return false;    }}
0
public void addTableModelListener(TableModelListener l)
{    this.listener.add(TableModelListener.class, l);}
0
public void removeTableModelListener(TableModelListener l)
{    this.listener.remove(TableModelListener.class, l);}
0
public void nodeStructureChanged(TreeNode node)
{}
0
public void fireTreeNodesChanged(TreeNode source, Object[] path, int[] indexes, Object[] children)
{}
0
public void clearData()
{    int size = getRowCount();    objects.clear();    super.fireTableRowsDeleted(0, size);}
0
public static void centerComponentInWindow(Component component, int percentOfScreen)
{    if (percentOfScreen < 0) {        centerComponentInWindow(component, -percentOfScreen);        return;    }    if (percentOfScreen > 100) {        centerComponentInWindow(component, 100);        return;    }    double percent = percentOfScreen / 100.d;    Rectangle bounds = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration().getBounds();    component.setSize((int) (bounds.getWidth() * percent), (int) (bounds.getHeight() * percent));    centerComponentInWindow(component);}
0
public static void centerComponentInWindow(Component component)
{    Rectangle bounds = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration().getBounds();    component.setLocation((int) ((bounds.getWidth() - component.getWidth()) / 2), (int) ((bounds.getHeight() - component.getHeight()) / 2));    component.validate();    component.repaint();}
0
public static void centerComponentInComponent(Component parent, Component toBeCentered)
{    toBeCentered.setLocation(parent.getX() + (parent.getWidth() - toBeCentered.getWidth()) / 2, parent.getY() + (parent.getHeight() - toBeCentered.getHeight()) / 2);    toBeCentered.validate();    toBeCentered.repaint();}
0
public static JScrollPane makeScrollPane(Component comp)
{    JScrollPane pane = new JScrollPane(comp);    pane.setPreferredSize(pane.getMinimumSize());    return pane;}
0
public static void fixSize(TableColumn column, JTable table)
{    TableCellRenderer rndr;    rndr = column.getHeaderRenderer();    if (rndr == null) {        rndr = table.getTableHeader().getDefaultRenderer();    }    Component c = rndr.getTableCellRendererComponent(table, column.getHeaderValue(), false, false, -1, column.getModelIndex());    int width = c.getPreferredSize().width + 10;    column.setMaxWidth(width);    column.setPreferredWidth(width);    column.setResizable(false);}
0
public static JComponent createLabelCombo(String label, JComboBox<?> comboBox)
{    JPanel labelCombo = new JPanel();    labelCombo.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));    JLabel caption = new JLabel(label);    caption.setLabelFor(comboBox);    caption.setBorder(new EmptyBorder(0, 5, 0, 5));    labelCombo.add(caption);    labelCombo.add(comboBox);    return labelCombo;}
0
public static void stopTableEditing(JTable table)
{    if (table.isEditing()) {        TableCellEditor cellEditor = table.getCellEditor(table.getEditingRow(), table.getEditingColumn());        cellEditor.stopCellEditing();    }}
0
public static void cancelEditing(JTable table)
{        if (table != null && table.isEditing()) {        TableCellEditor cellEditor = table.getCellEditor(table.getEditingRow(), table.getEditingColumn());        cellEditor.cancelCellEditing();    }}
0
public static String getPastedText() throws UnsupportedFlavorException, IOException
{    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();    Transferable trans = clipboard.getContents(null);    DataFlavor[] flavourList = trans.getTransferDataFlavors();    Collection<DataFlavor> flavours = new ArrayList<>(flavourList.length);    if (Collections.addAll(flavours, flavourList) && flavours.contains(DataFlavor.stringFlavor)) {        return (String) trans.getTransferData(DataFlavor.stringFlavor);    } else {        return null;    }}
0
public static void makeScrollableMenu(JMenu menu)
{    if (menu.getItemCount() > 0 && !GraphicsEnvironment.isHeadless()) {        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();                int maxItems = (int) Math.round(screenSize.getHeight() * 0.8 / menu.getMenuComponent(0).getPreferredSize().getHeight());        MenuScroller.setScrollerFor(menu, maxItems, 200);    }}
0
public static final void copyTextToClipboard(String text)
{    Clipboard clpbrd = Toolkit.getDefaultToolkit().getSystemClipboard();    StringSelection stringSelection = new StringSelection(text);    clpbrd.setContents(stringSelection, null);}
0
public List<JComponent> getComponentList()
{    List<JComponent> comps = new LinkedList<>();    comps.add(mLabel);    comps.add(choiceList);    return comps;}
0
public void setEditable(boolean editable)
{    choiceList.setEditable(editable);}
0
public void addValue(String item)
{    choiceList.addItem(item);}
0
public void setValues(String[] items)
{    choiceList.removeAllItems();    for (String item : items) {        choiceList.addItem(item);    }}
0
private void init()
{                    choiceList.addItemListener(e -> {        if (e.getStateChange() == ItemEvent.SELECTED) {            notifyChangeListeners();        }    });        this.add(mLabel);    this.add(choiceList);    if (withButtons) {        add = new JButton("Add");        add.setMargin(new Insets(1, 1, 1, 1));        add.addActionListener(new AddListener());        this.add(add);        delete = new JButton("Del");        delete.setMargin(new Insets(1, 1, 1, 1));        delete.addActionListener(new DeleteListener());        this.add(delete);    }}
0
public void setChoiceListEnabled(boolean enabled)
{    choiceList.setEnabled(enabled);}
0
public void setLabel(String pLabel)
{    mLabel.setText(pLabel);}
0
public void setText(String pText)
{    choiceList.setSelectedItem(pText);}
0
public void setSelectedIndex(int index)
{    choiceList.setSelectedIndex(index);}
0
public String getText()
{    Object item = choiceList.getSelectedItem();    if (item == null) {        return "";    } else {        return (String) item;    }}
0
public int getSelectedIndex()
{    return choiceList.getSelectedIndex();}
0
public Object[] getSelectedItems()
{    return choiceList.getSelectedObjects();}
0
public String[] getItems()
{    String[] items = new String[choiceList.getItemCount()];    for (int i = 0; i < items.length; i++) {        items[i] = choiceList.getItemAt(i);    }    return items;}
0
public String getLabel()
{    return mLabel.getText();}
0
public void setToolTipText(String text)
{    choiceList.setToolTipText(text);}
0
public String getToolTipText()
{    if (choiceList == null) {                return null;    }    return choiceList.getToolTipText();}
0
public void addChangeListener(ChangeListener pChangeListener)
{    mChangeListeners.add(pChangeListener);}
0
public void removeChangeListener(ChangeListener pChangeListener)
{    mChangeListeners.remove(pChangeListener);}
0
private void notifyChangeListeners()
{    ChangeEvent ce = new ChangeEvent(this);    for (ChangeListener mChangeListener : mChangeListeners) {        mChangeListener.stateChanged(ce);    }}
0
public void actionPerformed(ActionEvent e)
{    String item = (String) choiceList.getSelectedItem();    int index = choiceList.getSelectedIndex();    if (!item.equals(choiceList.getItemAt(index))) {        choiceList.addItem(item);    }    choiceList.setSelectedItem(item);    notifyChangeListeners();}
0
public void actionPerformed(ActionEvent e)
{    if (choiceList.getItemCount() > 1) {        choiceList.removeItemAt(choiceList.getSelectedIndex());        notifyChangeListeners();    }}
0
protected JTextField createTextField(int size)
{    return new JPasswordField(size);}
0
public List<JComponent> getComponentList()
{    List<JComponent> comps = new LinkedList<>();    comps.add(mLabel);    comps.add(mTextArea);    return comps;}
0
public void setDocumentModel(Document docModel)
{    mTextArea.setDocument(docModel);}
0
private void init()
{        setLayout(new BorderLayout());    mTextArea.setRows(4);    mTextArea.setLineWrap(true);    mTextArea.setWrapStyleWord(true);                mTextArea.addFocusListener(this);        this.add(mLabel, BorderLayout.NORTH);    this.add(new JScrollPane(mTextArea), BorderLayout.CENTER);}
0
public void focusLost(FocusEvent pFocusEvent)
{        if (!oldValue.equals(mTextArea.getText())) {        notifyChangeListeners();    }}
0
public void focusGained(FocusEvent pFocusEvent)
{    oldValue = mTextArea.getText();}
0
public void setLabel(String pLabel)
{    mLabel.setText(pLabel);}
0
public void setText(String pText)
{    mTextArea.setText(pText);}
0
public String getText()
{    return mTextArea.getText();}
0
public String getLabel()
{    return mLabel.getText();}
0
public void setEnabled(boolean enable)
{    super.setEnabled(enable);    mTextArea.setEnabled(enable);}
0
public void setToolTipText(String text)
{    mTextArea.setToolTipText(text);}
0
public String getToolTipText()
{    return mTextArea.getToolTipText();}
0
public void addChangeListener(ChangeListener pChangeListener)
{    mChangeListeners.add(pChangeListener);}
0
public void removeChangeListener(ChangeListener pChangeListener)
{    mChangeListeners.remove(pChangeListener);}
0
private void notifyChangeListeners()
{    ChangeEvent ce = new ChangeEvent(this);    for (ChangeListener mChangeListener : mChangeListeners) {        mChangeListener.stateChanged(ce);    }}
0
public String[] getTextLines()
{    int numLines = mTextArea.getLineCount();    String[] lines = new String[numLines];    for (int i = 0; i < numLines; i++) {        try {            int start = mTextArea.getLineStartOffset(i);                        int end = mTextArea.getLineEndOffset(i);            if (i == numLines - 1) {                                                end++;            }            lines[i] = mTextArea.getText(start, end - start - 1);        } catch (BadLocationException e) {                        throw new IllegalStateException("Could not read line " + i, e);        }    }    return lines;}
0
public List<JComponent> getComponentList()
{    List<JComponent> comps = new LinkedList<>();    comps.add(mLabel);    comps.add(mTextField);    return comps;}
0
public void setEnabled(boolean enable)
{    super.setEnabled(enable);    mTextField.setEnabled(enable);}
0
protected JTextField createTextField(int size)
{    return new JTextField(size);}
0
private void init()
{        setLayout(new BorderLayout(5, 0));                mTextField.addFocusListener(this);        add(mLabel, BorderLayout.WEST);    add(mTextField, BorderLayout.CENTER);}
0
public void focusLost(FocusEvent pFocusEvent)
{        if (!oldValue.equals(mTextField.getText())) {        notifyChangeListeners();    }}
0
public void focusGained(FocusEvent pFocusEvent)
{    oldValue = mTextField.getText();}
0
public void setLabel(String pLabel)
{    mLabel.setText(pLabel);}
0
public void setText(String pText)
{    mTextField.setText(pText);}
0
public String getText()
{    return mTextField.getText();}
0
public String getLabel()
{    return mLabel.getText();}
0
public void setToolTipText(String text)
{    mLabel.setToolTipText(text);    mTextField.setToolTipText(text);}
0
public String getToolTipText()
{    if (mTextField == null) {                return null;    }    return mTextField.getToolTipText();}
0
public void addChangeListener(ChangeListener pChangeListener)
{    mChangeListeners.add(pChangeListener);}
0
public void removeChangeListener(ChangeListener pChangeListener)
{    mChangeListeners.remove(pChangeListener);}
0
protected void notifyChangeListeners()
{    ChangeEvent ce = new ChangeEvent(this);    for (ChangeListener mChangeListener : mChangeListeners) {        mChangeListener.stateChanged(ce);    }}
0
public boolean requestFocusInWindow()
{    return mTextField.requestFocusInWindow();}
0
public void layoutContainer(Container parent)
{    Insets insets = parent.getInsets();    synchronized (parent.getTreeLock()) {        int n = parent.getComponentCount();        Dimension pd = parent.getSize();        int y = 0;                for (int i = 0; i < n; i++) {            Component c = parent.getComponent(i);            Dimension d = c.getPreferredSize();            y += d.height + vgap;        }                y -= vgap;                if (anchor == TOP) {            y = insets.top;        } else if (anchor == CENTER) {            y = (pd.height - y) / 2;        } else {            y = pd.height - y - insets.bottom;        }                for (int i = 0; i < n; i++) {            Component c = parent.getComponent(i);            Dimension d = c.getPreferredSize();            int x = insets.left;            int wid = d.width;            if (alignment == CENTER) {                x = (pd.width - d.width) / 2;            } else if (alignment == RIGHT) {                x = pd.width - d.width - insets.right;            } else if (alignment == BOTH) {                wid = pd.width - insets.left - insets.right;            }            c.setBounds(x, y, wid, d.height);            y += d.height + vgap;        }    }}
0
public Dimension minimumLayoutSize(Container parent)
{    return layoutSize(parent, true);}
0
public Dimension preferredLayoutSize(Container parent)
{    return layoutSize(parent, false);}
0
public void addLayoutComponent(String name, Component comp)
{}
0
public void removeLayoutComponent(Component comp)
{}
0
public String toString()
{    return getClass().getName() + "[vgap=" + vgap + " align=" + alignment + " anchor=" + anchor + "]";}
0
private Dimension layoutSize(Container parent, boolean minimum)
{    Dimension dim = new Dimension(0, 0);    Dimension d;    synchronized (parent.getTreeLock()) {        int n = parent.getComponentCount();        for (int i = 0; i < n; i++) {            Component c = parent.getComponent(i);            if (c.isVisible()) {                d = minimum ? c.getMinimumSize() : c.getPreferredSize();                dim.width = Math.max(dim.width, d.width);                dim.height += d.height;                if (i > 0) {                    dim.height += vgap;                }            }        }    }    Insets insets = parent.getInsets();    dim.width += insets.left + insets.right;    dim.height += insets.top + insets.bottom + vgap + vgap;    return dim;}
0
public static MenuScroller setScrollerFor(JMenu menu)
{    return new MenuScroller(menu);}
0
public static MenuScroller setScrollerFor(JPopupMenu menu)
{    return new MenuScroller(menu);}
0
public static MenuScroller setScrollerFor(JMenu menu, int scrollCount)
{    return new MenuScroller(menu, scrollCount);}
0
public static MenuScroller setScrollerFor(JPopupMenu menu, int scrollCount)
{    return new MenuScroller(menu, scrollCount);}
0
public static MenuScroller setScrollerFor(JMenu menu, int scrollCount, int interval)
{    return new MenuScroller(menu, scrollCount, interval);}
0
public static MenuScroller setScrollerFor(JPopupMenu menu, int scrollCount, int interval)
{    return new MenuScroller(menu, scrollCount, interval);}
0
public static MenuScroller setScrollerFor(JMenu menu, int scrollCount, int interval, int topFixedCount, int bottomFixedCount)
{    return new MenuScroller(menu, scrollCount, interval, topFixedCount, bottomFixedCount);}
0
public static MenuScroller setScrollerFor(JPopupMenu menu, int scrollCount, int interval, int topFixedCount, int bottomFixedCount)
{    return new MenuScroller(menu, scrollCount, interval, topFixedCount, bottomFixedCount);}
0
public int getInterval()
{    return interval;}
0
public void setInterval(int interval)
{    if (interval <= 0) {        throw new IllegalArgumentException("interval must be greater than 0");    }    upItem.setInterval(interval);    downItem.setInterval(interval);    this.interval = interval;}
0
public int getscrollCount()
{    return scrollCount;}
0
public void setScrollCount(int scrollCount)
{    if (scrollCount <= 0) {        throw new IllegalArgumentException("scrollCount must be greater than 0");    }    this.scrollCount = scrollCount;    MenuSelectionManager.defaultManager().clearSelectedPath();}
0
public int getTopFixedCount()
{    return topFixedCount;}
0
public void setTopFixedCount(int topFixedCount)
{    if (firstIndex <= topFixedCount) {        firstIndex = topFixedCount;    } else {        firstIndex = firstIndex + topFixedCount - this.topFixedCount;    }    this.topFixedCount = topFixedCount;}
0
public int getBottomFixedCount()
{    return bottomFixedCount;}
0
public void setBottomFixedCount(int bottomFixedCount)
{    this.bottomFixedCount = bottomFixedCount;}
0
public void keepVisible(JMenuItem item)
{    if (item == null) {        keepVisibleIndex = -1;    } else {        int index = menu.getComponentIndex(item);        keepVisibleIndex = index;    }}
0
public void keepVisible(int index)
{    keepVisibleIndex = index;}
0
public void dispose()
{    if (menu != null) {        menu.removePopupMenuListener(menuListener);        menu.removeMouseWheelListener(mouseWheelListener);        menu = null;    }}
0
public void finalize() throws Throwable
{    dispose();    super.finalize();}
0
private void refreshMenu()
{    if (menuItems != null && menuItems.length > 0 && scrollCount <= menuItems.length) {        firstIndex = Math.max(topFixedCount, firstIndex);        firstIndex = Math.max(0, Math.min(menuItems.length - bottomFixedCount - scrollCount, firstIndex));        upItem.setEnabled(firstIndex > topFixedCount);        downItem.setEnabled(firstIndex + scrollCount < menuItems.length - bottomFixedCount);        menu.removeAll();        if (topFixedCount > 0) {            for (int i = 0; i < topFixedCount; i++) {                menu.add(menuItems[i]);            }            menu.addSeparator();        }        menu.add(upItem);        for (int i = firstIndex; i < Math.min(menuItems.length, scrollCount + firstIndex); i++) {            menu.add(menuItems[i]);        }        menu.add(downItem);        if (bottomFixedCount > 0) {            menu.addSeparator();            for (int i = Math.max(0, menuItems.length - bottomFixedCount); i < menuItems.length; i++) {                menu.add(menuItems[i]);            }        }        int preferredWidth = 0;        for (Component item : menuItems) {            preferredWidth = Math.max(preferredWidth, item.getPreferredSize().width);        }        menu.setPreferredSize(new Dimension(preferredWidth, menu.getPreferredSize().height));        JComponent parent = (JComponent) upItem.getParent();        parent.revalidate();        parent.repaint();    }}
0
public void mouseWheelMoved(MouseWheelEvent mwe)
{    firstIndex = Math.max(0, Math.min(menuItems.length - 1, firstIndex + mwe.getWheelRotation()));    refreshMenu();        mwe.consume();}
0
public void popupMenuWillBecomeVisible(PopupMenuEvent e)
{    setMenuItems();}
0
public void popupMenuWillBecomeInvisible(PopupMenuEvent e)
{    restoreMenuItems();}
0
public void popupMenuCanceled(PopupMenuEvent e)
{    restoreMenuItems();}
0
private void setMenuItems()
{    menuItems = menu.getComponents();    if (keepVisibleIndex >= topFixedCount && keepVisibleIndex <= menuItems.length - bottomFixedCount && (keepVisibleIndex > firstIndex + scrollCount || keepVisibleIndex < firstIndex)) {        firstIndex = Math.min(firstIndex, keepVisibleIndex);        firstIndex = Math.max(firstIndex, keepVisibleIndex - scrollCount + 1);    }    if (menuItems.length > topFixedCount + scrollCount + bottomFixedCount) {        refreshMenu();    }}
0
private void restoreMenuItems()
{    menu.removeAll();    for (Component component : menuItems) {        menu.add(component);    }}
0
public void actionPerformed(ActionEvent e)
{    firstIndex += increment;    refreshMenu();}
0
public void setInterval(int interval)
{    timer.setDelay(interval);}
0
public void stateChanged(ChangeEvent e)
{    if (isArmed() && !timer.isRunning()) {        timer.start();    }    if (!isArmed() && timer.isRunning()) {        timer.stop();    }}
0
public void paintIcon(Component c, Graphics g, int x, int y)
{    Dimension size = c.getSize();    Graphics g2 = g.create(size.width / 2 - 5, size.height / 2 - 5, 10, 10);    g2.setColor(Color.GRAY);    g2.drawPolygon(xPoints, yPoints, 3);    if (c.isEnabled()) {        g2.setColor(Color.BLACK);        g2.fillPolygon(xPoints, yPoints, 3);    }    g2.dispose();}
0
public int getIconWidth()
{    return 0;}
0
public int getIconHeight()
{    return 10;}
0
public void setValue(Object value)
{    if (value instanceof Long) {        long longValue = ((Long) value).longValue();        if (!(longValue == Long.MAX_VALUE || longValue == Long.MIN_VALUE)) {            setText(formatter.format(longValue));            return;        }    }    setText("#N/A");}
0
public void setValue(Object value)
{    setText((value == null) ? "" : formatter.format(value));}
0
private Object readResolve()
{    objects = new ArrayList<>();    headers = new ArrayList<>();    classes = new ArrayList<>();    readFunctors = new ArrayList<>();    writeFunctors = new ArrayList<>();    return this;}
0
public Iterator<?> iterator()
{    return objects.iterator();}
0
public void clearData()
{    objects.clear();    super.fireTableDataChanged();}
0
public void addRow(Object value)
{        if (objectClass != null) {        final Class<?> valueClass = value.getClass();        if (!objectClass.isAssignableFrom(valueClass)) {            throw new IllegalArgumentException("Trying to add class: " + valueClass.getName() + "; expecting class: " + objectClass.getName());        }    }    objects.add(value);    super.fireTableRowsInserted(objects.size() - 1, objects.size() - 1);}
1
public void insertRow(Object value, int index)
{    objects.add(index, value);    super.fireTableRowsInserted(index, index);}
0
public int getColumnCount()
{    return headers.size();}
0
public String getColumnName(int col)
{    return headers.get(col);}
0
public int getRowCount()
{    if (objects == null) {        return 0;    }    return objects.size();}
0
public Object getValueAt(int row, int col)
{        Object value = objects.get(row);    if (headers.size() == 1 && col >= readFunctors.size()) {        return value;    }    Functor getMethod = readFunctors.get(col);    if (getMethod != null && value != null) {        return getMethod.invoke(value);    }    return null;}
1
public boolean isCellEditable(int arg0, int arg1)
{    return cellEditable;}
0
public void moveRow(int start, int end, int to)
{    List<Object> subList = objects.subList(start, end);    List<Object> backup = new ArrayList<>(subList);    subList.clear();    objects.addAll(to, backup);    super.fireTableDataChanged();}
0
public void removeRow(int row)
{    objects.remove(row);    super.fireTableRowsDeleted(row, row);}
0
public void setValueAt(Object cellValue, int row, int col)
{    if (row < objects.size()) {        Object value = objects.get(row);        if (col < writeFunctors.size()) {            Functor setMethod = writeFunctors.get(col);            if (setMethod != null) {                setMethod.invoke(value, new Object[] { cellValue });                super.fireTableDataChanged();            }        } else if (headers.size() == 1) {            objects.set(row, cellValue);        }    }}
0
public Class<?> getColumnClass(int arg0)
{    return classes.get(arg0);}
0
public boolean checkFunctors(Object _value, Class<?> caller)
{    Object value;    if (_value == null && objectClass != null) {        try {            value = objectClass.getDeclaredConstructor().newInstance();        } catch (ReflectiveOperationException e) {                        return false;        }    } else {        value = _value;    }    boolean status = true;    for (int i = 0; i < getColumnCount(); i++) {        Functor setMethod = writeFunctors.get(i);        if (setMethod != null && !setMethod.checkMethod(value, getColumnClass(i))) {            status = false;                    }        Functor getMethod = readFunctors.get(i);        if (getMethod != null && !getMethod.checkMethod(value)) {            status = false;                    }    }    return status;}
1
public Object getObjectList()
{        return objects;}
0
public List<Object> getObjectListAsList()
{    return objects;}
0
public void setRows(Iterable<?> rows)
{        clearData();    for (Object val : rows) {        addRow(val);    }}
0
public int getIndex()
{    return index;}
0
public Object getValue()
{    return getModel().getObjectListAsList().get(getIndex());}
0
public Object getValueAt(int column)
{    return getModel().getValueAt(getIndex(), column);}
0
public int compare(Row o1, Row o2)
{    int lastIndex = model.getRowCount() - 1;    if (o1.getIndex() >= lastIndex || o2.getIndex() >= lastIndex) {        return o1.getIndex() - o2.getIndex();    }    return 0;}
0
public Comparator<Row> getPrimaryComparator()
{    return primaryComparator;}
0
public Comparator<?> getValueComparator(int column)
{    return valueComparators[column];}
0
public Comparator<Row> getFallbackComparator()
{    return fallbackComparator;}
0
public ObjectTableSorter setPrimaryComparator(Comparator<Row> primaryComparator)
{    invalidate();    this.primaryComparator = primaryComparator;    return this;}
0
public ObjectTableSorter fixLastRow()
{    return setPrimaryComparator(new PreserveLastRowComparator());}
0
public ObjectTableSorter setValueComparator(int column, Comparator<?> comparator)
{    invalidate();    valueComparators[column] = ObjectUtils.defaultIfNull(comparator, getDefaultComparator(column));    return this;}
0
protected Comparator<?> getDefaultComparator(int column)
{    Class<?> columnClass = model.getColumnClass(column);    if (columnClass == null) {        return null;    }    if (columnClass == String.class) {        return Comparator.nullsFirst(Collator.getInstance());    }    if (Comparable.class.isAssignableFrom(columnClass)) {        return Comparator.nullsFirst(Comparator.naturalOrder());    }    return null;}
0
public ObjectTableSorter setFallbackComparator(Comparator<Row> comparator)
{    invalidate();    fallbackComparator = ObjectUtils.defaultIfNull(comparator, Comparator.comparingInt(Row::getIndex));    return this;}
0
public ObjectTableModel getModel()
{    return model;}
0
public void toggleSortOrder(int column)
{    SortKey newSortKey;    if (isSortable(column)) {        SortOrder newOrder = sortkey == null || sortkey.getColumn() != column || sortkey.getSortOrder() != SortOrder.ASCENDING ? SortOrder.ASCENDING : SortOrder.DESCENDING;        newSortKey = new SortKey(column, newOrder);    } else {        newSortKey = null;    }    setSortKey(newSortKey);}
0
public int convertRowIndexToModel(int index)
{    if (!isSorted()) {        return index;    }    validate();    return viewToModel.get(index).getIndex();}
0
public int convertRowIndexToView(int index)
{    if (!isSorted()) {        return index;    }    validate();    return modelToView[index];}
0
public void setSortKeys(List<? extends SortKey> keys)
{    switch(keys.size()) {        case 0:            setSortKey(null);            break;        case 1:            setSortKey(keys.get(0));            break;        default:            throw new IllegalArgumentException("Only one column can be sorted");    }}
0
public void setSortKey(SortKey sortkey)
{    if (Objects.equals(this.sortkey, sortkey)) {        return;    }    invalidate();    if (sortkey != null) {        int column = sortkey.getColumn();        if (valueComparators[column] == null) {            throw new IllegalArgumentException(format("Can't sort column %s, it is mapped to type %s and this one have no natural order. So an explicit one must be specified", column, model.getColumnClass(column)));        }    }    this.sortkey = sortkey;    this.comparator = null;}
0
public List<? extends SortKey> getSortKeys()
{    return isSorted() ? Collections.singletonList(sortkey) : Collections.emptyList();}
0
public int getViewRowCount()
{    return getModelRowCount();}
0
public int getModelRowCount()
{    return model.getRowCount();}
0
public void modelStructureChanged()
{    setSortKey(null);}
0
public void allRowsChanged()
{    invalidate();}
0
public void rowsInserted(int firstRow, int endRow)
{    rowsChanged(firstRow, endRow, false, true);}
0
public void rowsDeleted(int firstRow, int endRow)
{    rowsChanged(firstRow, endRow, true, false);}
0
public void rowsUpdated(int firstRow, int endRow)
{    rowsChanged(firstRow, endRow, true, true);}
0
protected void rowsChanged(int firstRow, int endRow, boolean deleted, boolean inserted)
{    invalidate();}
0
public void rowsUpdated(int firstRow, int endRow, int column)
{    if (isSorted(column)) {        rowsUpdated(firstRow, endRow);    }}
0
protected boolean isSortable(int column)
{    return getValueComparator(column) != null;}
0
protected boolean isSorted(int column)
{    return isSorted() && sortkey.getColumn() == column && sortkey.getSortOrder() != SortOrder.UNSORTED;}
0
protected boolean isSorted()
{    return sortkey != null;}
0
protected void invalidate()
{    viewToModel.clear();    modelToView = new int[0];}
0
protected void validate()
{    if (isSorted() && viewToModel.isEmpty()) {        sort();    }}
0
protected Comparator<Row> getComparatorFromSortKey(SortKey sortkey)
{    Comparator comp = getValueComparator(sortkey.getColumn());    if (sortkey.getSortOrder() == SortOrder.DESCENDING) {        comp = comp.reversed();    }    Function<Row, Object> getValueAt = (Row row) -> row.getValueAt(sortkey.getColumn());    return Comparator.comparing(getValueAt, comp);}
0
protected void sort()
{    if (comparator == null) {        comparator = Stream.concat(Stream.concat(getPrimaryComparator() != null ? Stream.of(getPrimaryComparator()) : Stream.<Comparator<Row>>empty(), getSortKeys().stream().filter(sk -> sk != null && sk.getSortOrder() != SortOrder.UNSORTED).map(this::getComparatorFromSortKey)), Stream.of(getFallbackComparator())).reduce(comparator, (result, current) -> result != null ? result.thenComparing(current) : current);    }    viewToModel.clear();    int rowCount = model.getRowCount();    viewToModel.ensureCapacity(rowCount);    for (int i = 0; i < rowCount; i++) {        viewToModel.add(new Row(i));    }    Collections.sort(viewToModel, comparator);    updateModelToView();}
0
protected void updateModelToView()
{    modelToView = new int[viewToModel.size()];    for (int i = 0; i < viewToModel.size(); i++) {        modelToView[viewToModel.get(i).getIndex()] = i;    }}
0
public void setValue(Object value)
{    if (!(value instanceof Double)) {        setText("#N/A");        return;    }    double rate = ((Double) value).doubleValue();    if (Double.compare(rate, Double.MAX_VALUE) == 0) {        setText("#N/A");        return;    }    String unit = "sec";    if (rate < 1.0) {        rate *= 60.0;        unit = "min";    }    if (rate < 1.0) {        rate *= 60.0;        unit = "hour";    }    setText(formatter.format(rate) + "/" + unit);}
0
public static void applyRenderers(final JTable table, final TableCellRenderer[] renderers)
{    final TableColumnModel columnModel = table.getColumnModel();    for (int i = 0; i < renderers.length; i++) {        final TableCellRenderer rend = renderers[i];        if (rend != null) {            columnModel.getColumn(i).setCellRenderer(rend);        }    }}
0
public void setText(String body)
{    try {        Files.write(this.toPath(), body.getBytes(getCharset()));    } catch (IOException ioe) {            }}
1
public String getText()
{    try {        byte[] encoded = Files.readAllBytes(this.toPath());        return new String(encoded, getCharset());    } catch (IOException ioe) {                return "";    }}
1
private Charset getCharset()
{    return encoding != null ? Charset.forName(encoding) : Charset.defaultCharset();}
0
public String getEncoding()
{    return encoding;}
0
public void setEncoding(String string)
{    encoding = string;}
0
public int hashCode()
{    final int prime = 31;    int result = super.hashCode();    result = prime * result + ((encoding == null) ? 0 : encoding.hashCode());    return result;}
0
public boolean equals(Object obj)
{    if (this == obj) {        return true;    }    if (!super.equals(obj)) {        return false;    }    if (!(obj instanceof TextFile)) {        return false;    }    TextFile other = (TextFile) obj;    if (encoding == null) {        return other.encoding == null;    }    return encoding.equals(other.encoding);}
0
public static void initializeLogging(Properties properties)
{}
0
public static void setLoggingLevels(Properties appProperties)
{}
0
public static String removePrefix(String name)
{    if (name.startsWith(PACKAGE_PREFIX)) {                name = name.substring(PACKAGE_PREFIX.length());    }    return name;}
0
public static Logger getLoggerForClass()
{    String className = new Exception().getStackTrace()[1].getClassName();    return new Slf4jLogkitLogger(LoggerFactory.getLogger(className));}
0
public static Logger getLoggerFor(String category)
{    return new Slf4jLogkitLogger(LoggerFactory.getLogger(category));}
0
public static Logger getLoggerForShortName(String category)
{    return getLoggerFor(category);}
0
public static void setPriority(String priority, String category)
{}
0
public static void setPriorityFullName(String priority, String fullName)
{}
0
public static void setPriority(Priority priority, String category)
{}
0
public static void setPriority(String priority)
{}
0
public static void setPriority(Priority priority)
{}
0
public static void setTarget(LogTarget target, String category)
{}
0
public static void addLogTargetToRootLogger(LogTarget[] logTargets)
{}
0
public boolean isDebugEnabled()
{    return slf4jLogger.isDebugEnabled();}
0
public boolean isInfoEnabled()
{    return slf4jLogger.isInfoEnabled();}
0
public boolean isWarnEnabled()
{    return slf4jLogger.isWarnEnabled();}
0
public boolean isErrorEnabled()
{    return slf4jLogger.isErrorEnabled();}
0
public boolean isFatalErrorEnabled()
{    return slf4jLogger.isErrorEnabled();}
0
public boolean isPriorityEnabled(Priority priority)
{    if (priority == Priority.FATAL_ERROR) {        return slf4jLogger.isErrorEnabled();    } else if (priority == Priority.ERROR) {        return slf4jLogger.isErrorEnabled();    } else if (priority == Priority.WARN) {        return slf4jLogger.isWarnEnabled();    } else if (priority == Priority.INFO) {        return slf4jLogger.isInfoEnabled();    } else if (priority == Priority.DEBUG) {        return slf4jLogger.isDebugEnabled();    }    return false;}
0
public org.apache.log.Logger getChildLogger(String subCategory)
{    return new Slf4jLogkitLogger(LoggerFactory.getLogger(slf4jLogger.getName() + org.apache.log.Logger.CATEGORY_SEPARATOR + subCategory));}
0
public int compare(Number[] n1, Number[] n2)
{    if (n1[0].longValue() < n2[0].longValue()) {        return -1;    } else if (n1[0].longValue() == n2[0].longValue()) {        return 0;    } else {        return 1;    }}
0
public void clear()
{    valuesMap.clear();    sum = 0;    sumOfSquares = 0;    mean = 0;    deviation = 0;    count = 0;    bytes = 0;    sentBytes = 0;    max = MIN_VALUE;    min = MAX_VALUE;}
0
public void addBytes(long newValue)
{    bytes += newValue;}
0
public void addSentBytes(long newValue)
{    sentBytes += newValue;}
0
public void addAll(StatCalculator<T> calc)
{    for (Entry<T, MutableLong> ent : calc.valuesMap.entrySet()) {        addEachValue(ent.getKey(), ent.getValue().longValue());    }}
0
public T getMedian()
{    return getPercentPoint(0.5);}
0
public long getTotalBytes()
{    return bytes;}
0
public long getTotalSentBytes()
{    return sentBytes;}
0
public T getPercentPoint(float percent)
{    return getPercentPoint((double) percent);}
0
public T getPercentPoint(double percent)
{    if (count <= 0) {        return ZERO;    }    if (percent >= 1.0) {        return getMax();    }        long target = Math.round(count * percent);    try {        for (Entry<T, MutableLong> val : valuesMap.entrySet()) {            target -= val.getValue().longValue();            if (target <= 0) {                return val.getKey();            }        }    } catch (ConcurrentModificationException ignored) {        }        return ZERO;}
0
public Map<Number, Number[]> getDistribution()
{    Map<Number, Number[]> items = new HashMap<>();    for (Entry<T, MutableLong> entry : valuesMap.entrySet()) {        Number[] dis = new Number[2];        dis[0] = entry.getKey();        dis[1] = entry.getValue();        items.put(entry.getKey(), dis);    }    return items;}
0
public double getMean()
{    return mean;}
0
public double getStandardDeviation()
{    return deviation;}
0
public T getMin()
{    return min;}
0
public T getMax()
{    return max;}
0
public long getCount()
{    return count;}
0
public double getSum()
{    return sum;}
0
 void addEachValue(T val, long sampleCount)
{    count += sampleCount;    double currentVal = val.doubleValue();    sum += currentVal * sampleCount;        sumOfSquares += currentVal * currentVal * sampleCount;    updateValueCount(val, sampleCount);    calculateDerivedValues(val);}
0
public void addValue(T val, long sampleCount)
{    count += sampleCount;    double currentVal = val.doubleValue();    sum += currentVal;    T actualValue = val;    if (sampleCount > 1) {                        sumOfSquares += currentVal * currentVal / sampleCount;        actualValue = divide(val, sampleCount);    } else {                sumOfSquares += currentVal * currentVal;    }    updateValueCount(actualValue, sampleCount);    calculateDerivedValues(actualValue);}
0
private void calculateDerivedValues(T actualValue)
{    mean = sum / count;    deviation = Math.sqrt((sumOfSquares / count) - (mean * mean));    if (actualValue.compareTo(max) > 0) {        max = actualValue;    }    if (actualValue.compareTo(min) < 0) {        min = actualValue;    }}
0
public void addValue(T val)
{    addValue(val, 1L);}
0
private void updateValueCount(T actualValue, long sampleCount)
{    MutableLong count = valuesMap.get(actualValue);    if (count != null) {        count.add(sampleCount);    } else {                valuesMap.put(actualValue, new MutableLong(sampleCount));    }}
0
public void addValue(int val)
{    super.addValue(Integer.valueOf(val));}
0
public void addValue(int val, int sampleCount)
{    super.addValue(Integer.valueOf(val), sampleCount);}
0
protected Integer divide(Integer val, int n)
{    return Integer.valueOf(val.intValue() / n);}
0
protected Integer divide(Integer val, long n)
{    return Integer.valueOf((int) (val.intValue() / n));}
0
public void addValue(long val)
{    super.addValue(Long.valueOf(val));}
0
public void addValue(long val, int sampleCount)
{    super.addValue(Long.valueOf(val), sampleCount);}
0
protected Long divide(Long val, int n)
{    return Long.valueOf(val.longValue() / n);}
0
protected Long divide(Long val, long n)
{    return Long.valueOf(val.longValue() / n);}
0
public boolean accept(String className)
{    if (contains != null && !className.contains(contains)) {                return false;    }    if (notContains != null && className.contains(notContains)) {                return false;    }    if (!className.contains("$") || inner) {                return isChildOf(parents, className, contextClassLoader);    }    return false;}
0
private boolean isChildOf(Class<?>[] parentClasses, String strClassName, ClassLoader contextClassLoader)
{    try {        Class<?> targetClass = Class.forName(strClassName, false, contextClassLoader);        if (!targetClass.isInterface() && !Modifier.isAbstract(targetClass.getModifiers())) {            return Arrays.stream(parentClasses).anyMatch(parent -> parent.isAssignableFrom(targetClass));        }    } catch (UnsupportedClassVersionError | ClassNotFoundException | NoClassDefFoundError | VerifyError e) {            }    return false;}
1
public String toString()
{    return "ExtendsClassFilter [parents=" + (parents != null ? Arrays.toString(parents) : "null") + ", inner=" + inner + ", contains=" + contains + ", notContains=" + notContains + "]";}
0
public boolean accept(String className)
{    if (!className.contains("$") || inner) {                return hasAnnotationOnMethod(annotations, className, contextClassLoader);    }    return false;}
0
private boolean hasAnnotationOnMethod(Class<? extends Annotation>[] annotations, String classInQuestion, ClassLoader contextClassLoader)
{    try {        Class<?> c = Class.forName(classInQuestion, false, contextClassLoader);        return Arrays.stream(c.getMethods()).anyMatch(method -> Arrays.stream(annotations).anyMatch(method::isAnnotationPresent));    } catch (NoClassDefFoundError | ClassNotFoundException | UnsupportedClassVersionError | VerifyError ignored) {            }    return false;}
1
public String toString()
{    return "AnnoClassFilter [inner=" + inner + ", annotations=" + (annotations != null ? Arrays.toString(annotations) : "null") + "]";}
0
public static List<String> findClassesThatExtend(String[] paths, Class<?>[] superClasses) throws IOException
{    return findClassesThatExtend(paths, superClasses, false);}
0
private static Set<File> addJarsInPath(String[] paths)
{    Set<File> fullList = new HashSet<>();    for (final String path : paths) {        File dir = new File(path);        fullList.add(dir);        if (dir.exists() && dir.isDirectory()) {            File[] jars = dir.listFiles(f -> f.isFile() && f.getName().endsWith(DOT_JAR));            if (jars != null) {                Collections.addAll(fullList, jars);            }        }    }    return fullList;}
0
public static List<String> findClassesThatExtend(String[] strPathsOrJars, final Class<?>[] superClasses, final boolean innerClasses) throws IOException
{    return findClassesThatExtend(strPathsOrJars, superClasses, innerClasses, null, null);}
0
public static List<String> findClassesThatExtend(String[] strPathsOrJars, final Class<?>[] superClasses, final boolean innerClasses, String contains, String notContains) throws IOException
{    return findClassesThatExtend(strPathsOrJars, superClasses, innerClasses, contains, notContains, false);}
0
public static List<String> findAnnotatedClasses(String[] strPathsOrJars, final Class<? extends Annotation>[] annotations, final boolean innerClasses) throws IOException
{    return findClassesThatExtend(strPathsOrJars, annotations, innerClasses, null, null, true);}
0
public static List<String> findAnnotatedClasses(String[] strPathsOrJars, final Class<? extends Annotation>[] annotations) throws IOException
{    return findClassesThatExtend(strPathsOrJars, annotations, false, null, null, true);}
0
public static List<String> findClassesThatExtend(String[] searchPathsOrJars, final Class<?>[] classNames, final boolean innerClasses, String contains, String notContains, boolean annotations) throws IOException
{    if (log.isDebugEnabled()) {            }    ClassFilter filter;    if (annotations) {        @SuppressWarnings("unchecked")        final Class<? extends Annotation>[]         annoclassNames = (Class<? extends Annotation>[]) classNames;        filter = new AnnoClassFilter(annoclassNames, innerClasses);    } else {        filter = new ExtendsClassFilter(classNames, innerClasses, contains, notContains);    }    return findClasses(searchPathsOrJars, filter);}
1
public static List<String> findClasses(String[] searchPathsOrJars, ClassFilter filter) throws IOException
{    if (log.isDebugEnabled()) {            }        Collection<File> strPathsOrJars = addJarsInPath(searchPathsOrJars);            Set<String> listClasses = new TreeSet<>();        for (File path : strPathsOrJars) {        findClassesInOnePath(path, listClasses, filter);    }    if (log.isDebugEnabled()) {                for (String clazz : listClasses) {                    }    }    return new ArrayList<>(listClasses);}
1
private static String fixPathEntry(String path)
{    if (path == null) {        return null;    }    if (path.equals(".")) {                return System.getProperty("user.dir");    }    String resultPath = path;    if (path.length() > 3 && path.matches("[a-z]:\\\\.*")) {                resultPath = path.substring(0, 1).toUpperCase(Locale.ROOT) + path.substring(1);    }        resultPath = resultPath.trim().replace('\\', '/');        resultPath = JOrphanUtils.substitute(resultPath, "//", "/");    while (resultPath.endsWith("/")) {                resultPath = resultPath.substring(0, resultPath.length() - 1);    }    return resultPath;}
0
private static String fixClassName(String strClassName)
{        String fixedClassName = strClassName.replace('\\', '.');        fixedClassName = fixedClassName.replace('/', '.');        fixedClassName = fixedClassName.substring(0, fixedClassName.length() - DOT_CLASS_LEN);    return fixedClassName;}
0
private static void findClassesInOnePath(File file, Set<String> listClasses, ClassFilter filter) throws IOException
{    if (file.isDirectory()) {        findClassesInPathsDir(file.getAbsolutePath(), file, listClasses, filter);    } else if (file.exists()) {        try (ZipFile zipFile = new ZipFile(file)) {            Enumeration<? extends ZipEntry> entries = zipFile.entries();            while (entries.hasMoreElements()) {                String strEntry = entries.nextElement().toString();                if (strEntry.endsWith(DOT_CLASS)) {                    String fixedClassName = fixClassName(strEntry);                    applyFiltering(listClasses, filter, fixedClassName);                }            }        } catch (IOException e) {                    }    }}
1
private static void findClassesInPathsDir(String strPathElement, File dir, Set<String> listClasses, ClassFilter filter) throws IOException
{    File[] list = dir.listFiles();    if (list == null) {                return;    }    for (File file : list) {        if (file.isDirectory()) {                        findClassesInPathsDir(strPathElement, file, listClasses, filter);        } else if (file.getPath().endsWith(DOT_CLASS) && file.exists() && (file.length() != 0)) {            final String path = file.getPath();            String className = path.substring(strPathElement.length() + 1,             path.lastIndexOf('.')).replace(File.separator.charAt(0),             '.');            applyFiltering(listClasses, filter, className);        }    }}
1
private static void applyFiltering(Set<String> classesSet, ClassFilter filter, String className)
{    try {        if (filter.accept(className)) {            classesSet.add(className);        }    } catch (Throwable e) {                    }}
1
public static Object construct(String className) throws JMeterException
{    Object instance = null;    try {        instance = ClassUtils.getClass(className).getDeclaredConstructor().newInstance();    } catch (IllegalArgumentException | ReflectiveOperationException | SecurityException e) {        throw new JMeterException(e);    }    return instance;}
0
public static Object construct(String className, int parameter) throws JMeterException
{    Object instance = null;    try {        Class<?> clazz = ClassUtils.getClass(className);        Constructor<?> constructor = clazz.getConstructor(Integer.TYPE);        instance = constructor.newInstance(Integer.valueOf(parameter));    } catch (ClassNotFoundException | InvocationTargetException | IllegalArgumentException | NoSuchMethodException | SecurityException | IllegalAccessException | InstantiationException e) {        throw new JMeterException(e);    }    return instance;}
0
public static Object construct(String className, String parameter) throws JMeterException
{    Object instance = null;    try {        Class<?> clazz = Class.forName(className);        Constructor<?> constructor = clazz.getConstructor(String.class);        instance = constructor.newInstance(parameter);    } catch (ClassNotFoundException | InvocationTargetException | IllegalArgumentException | NoSuchMethodException | IllegalAccessException | InstantiationException e) {        throw new JMeterException(e);    }    return instance;}
0
public static void invoke(Object instance, String methodName) throws SecurityException, IllegalArgumentException, JMeterException
{    Method m;    try {        m = ClassUtils.getPublicMethod(instance.getClass(), methodName, new Class[] {});        m.invoke(instance, (Object[]) null);    } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {        throw new JMeterException(e);    }}
0
private Object doInvoke(Class<?> _class, Object _invokee, Object[] _args)
{    Class<?>[] argTypes = getTypes(_args);    try {        Method method = doCreateMethod(_class, argTypes);        if (method == null) {            final String message = "Can't find method " + _class.getName() + "#" + methodName + typesToString(argTypes);                        throw new JMeterError(message);        }        return method.invoke(_invokee, _args);    } catch (Exception e) {        final String message = "Trouble functing: " + _class.getName() + "." + methodName + "(...) : " + " invokee: " + _invokee + " " + e.getMessage();                throw new JMeterError(message, e);    }}
1
public Object invoke()
{    if (invokee == null) {        throw new IllegalStateException("Cannot call invoke() - invokee not known");    }        return doInvoke(clazz, invokee, getArgs());}
0
public Object invoke(Object p_invokee)
{    return invoke(p_invokee, getArgs());}
0
public Object invoke(Object[] p_args)
{    if (invokee == null) {        throw new IllegalStateException("Invokee was not provided in constructor");    }        return doInvoke(clazz, invokee, args != null ? args : p_args);}
0
public Object invoke(Object p_invokee, Object[] p_args)
{    return doInvoke(    clazz != null ? clazz : p_invokee.getClass(),     invokee != null ? invokee : p_invokee,     args != null ? args : p_args);}
0
private synchronized Method doCreateMethod(Class<?> p_class, Class<?>[] p_types)
{    if (log.isDebugEnabled()) {            }    if (methodToInvoke == null) {        try {            methodToInvoke = p_class.getMethod(methodName, p_types);        } catch (Exception e) {            for (int i = 0; i < p_types.length; i++) {                Class<?> primitive = getPrimitive(p_types[i]);                if (primitive != null) {                    methodToInvoke = doCreateMethod(p_class, getNewArray(i, primitive, p_types));                    if (methodToInvoke != null) {                        return methodToInvoke;                    }                }                Class<?>[] interfaces = p_types[i].getInterfaces();                for (Class<?> anInterface : interfaces) {                    methodToInvoke = doCreateMethod(p_class, getNewArray(i, anInterface, p_types));                    if (methodToInvoke != null) {                        return methodToInvoke;                    }                }                Class<?> parent = p_types[i].getSuperclass();                if (parent != null) {                    methodToInvoke = doCreateMethod(p_class, getNewArray(i, parent, p_types));                    if (methodToInvoke != null) {                        return methodToInvoke;                    }                }            }        }    }    return methodToInvoke;}
1
public boolean checkMethod(Object _invokee)
{    Method m = null;    try {        m = doCreateMethod(_invokee.getClass(), getTypes(args));    } catch (Exception e) {        }    return null != m;}
0
public boolean checkMethod(Object _invokee, Class<?> c)
{    Method m = null;    try {        m = doCreateMethod(_invokee.getClass(), new Class[] { c });    } catch (Exception e) {        }    return null != m;}
0
public String toString()
{    StringBuilder sb = new StringBuilder(100);    if (clazz != null) {        sb.append(clazz.getName());    }    if (invokee != null) {        sb.append("@");        sb.append(System.identityHashCode(invokee));    }    sb.append(".");    sb.append(methodName);    typesToString(sb, types);    return sb.toString();}
0
private void typesToString(StringBuilder sb, Class<?>[] _types)
{    sb.append("(");    if (_types != null) {        for (int i = 0; i < _types.length; i++) {            if (i > 0) {                sb.append(",");            }            sb.append(_types[i].getName());        }    }    sb.append(")");}
0
private String typesToString(Class<?>[] argTypes)
{    StringBuilder sb = new StringBuilder();    typesToString(sb, argTypes);    return sb.toString();}
0
private Class<?> getPrimitive(Class<?> t)
{    if (t == null) {        return null;    }    Class<?> c = null;    if (t.equals(Integer.class)) {        c = int.class;    } else if (t.equals(Long.class)) {        c = long.class;    } else if (t.equals(Double.class)) {        c = double.class;    } else if (t.equals(Float.class)) {        c = float.class;    } else if (t.equals(Byte.class)) {        c = byte.class;    } else if (t.equals(Boolean.class)) {        c = boolean.class;    } else if (t.equals(Short.class)) {        c = short.class;    } else if (t.equals(Character.class)) {        c = char.class;    }    return c;}
0
private Class<?>[] getNewArray(int i, Class<?> replacement, Class<?>[] orig)
{    Class<?>[] newArray = new Class[orig.length];    for (int j = 0; j < newArray.length; j++) {        if (j == i) {            newArray[j] = replacement;        } else {            newArray[j] = orig[j];        }    }    return newArray;}
0
private Class<?>[] getTypes(Object[] _args)
{    if (types == null) {        return _getTypes(_args);    }    return types;}
0
private static Class<?>[] _getTypes(Object[] _args)
{    Class<?>[] _types;    if (_args != null) {        _types = new Class[_args.length];        for (int i = 0; i < _args.length; i++) {            _types[i] = _args[i].getClass();        }    } else {        _types = new Class[0];    }    return _types;}
0
private Object[] getArgs()
{    if (args == null) {        args = new Object[0];    }    return args;}
0
public static Object convert(Object value, Class<?> toType)
{    Object convertedValue = value;    if (value == null || toType == null) {                convertedValue = "";    } else if (toType.isAssignableFrom(value.getClass())) {        convertedValue = value;    } else if (toType.equals(float.class) || toType.equals(Float.class)) {        convertedValue = Float.valueOf(getFloat(value));    } else if (toType.equals(double.class) || toType.equals(Double.class)) {        convertedValue = Double.valueOf(getDouble(value));    } else if (toType.equals(String.class)) {        convertedValue = getString(value);    } else if (toType.equals(int.class) || toType.equals(Integer.class)) {        convertedValue = Integer.valueOf(getInt(value));    } else if (toType.equals(char.class) || toType.equals(Character.class)) {        convertedValue = Character.valueOf(getChar(value));    } else if (toType.equals(long.class) || toType.equals(Long.class)) {        convertedValue = Long.valueOf(getLong(value));    } else if (toType.equals(boolean.class) || toType.equals(Boolean.class)) {        convertedValue = Boolean.valueOf(getBoolean(value));    } else if (toType.equals(java.util.Date.class)) {        convertedValue = getDate(value);    } else if (toType.equals(Calendar.class)) {        convertedValue = getCalendar(value);    } else if (toType.equals(File.class)) {        convertedValue = getFile(value);    } else if (toType.equals(Class.class)) {        try {            convertedValue = Class.forName(value.toString());        } catch (Exception ignored) {        }    }    return convertedValue;}
0
public static Calendar getCalendar(Object date, Calendar defaultValue)
{    Calendar cal = new GregorianCalendar();    if (date instanceof java.util.Date) {        cal.setTime((java.util.Date) date);        return cal;    } else if (date != null) {        Optional<Date> d = tryToParseDate(date);        if (!d.isPresent()) {            return defaultValue;        }        cal.setTime(d.get());    } else {        cal = defaultValue;    }    return cal;}
0
public static Calendar getCalendar(Object o)
{    return getCalendar(o, new GregorianCalendar());}
0
public static Date getDate(Object date)
{    return getDate(date, Calendar.getInstance().getTime());}
0
public static Date getDate(Object date, Date defaultValue)
{    if (date instanceof java.util.Date) {        return (Date) date;    } else if (date != null) {        return tryToParseDate(date).orElse(defaultValue);    } else {        return defaultValue;    }}
0
private static Optional<Date> tryToParseDate(Object date)
{    return Stream.of(DateFormat.SHORT, DateFormat.MEDIUM, DateFormat.LONG, DateFormat.FULL).map(DateFormat::getDateInstance).map(formatter -> tryToParseDate(formatter, date.toString())).filter(Optional::isPresent).map(Optional::get).findFirst();}
0
private static Optional<Date> tryToParseDate(DateFormat formatter, String dateString)
{    try {        return Optional.of(formatter.parse(dateString));    } catch (ParseException e) {        return Optional.empty();    }}
0
public static float getFloat(Object o, float defaultValue)
{    if (o == null) {        return defaultValue;    }    if (o instanceof Number) {        return ((Number) o).floatValue();    }    try {        return Float.parseFloat(o.toString());    } catch (NumberFormatException e) {        return defaultValue;    }}
0
public static float getFloat(Object o)
{    return getFloat(o, 0);}
0
public static double getDouble(Object o, double defaultValue)
{    try {        if (o == null) {            return defaultValue;        }        if (o instanceof Number) {            return ((Number) o).doubleValue();        }        return Double.parseDouble(o.toString());    } catch (NumberFormatException e) {        return defaultValue;    }}
0
public static double getDouble(Object o)
{    return getDouble(o, 0);}
0
public static boolean getBoolean(Object o)
{    return getBoolean(o, false);}
0
public static boolean getBoolean(Object o, boolean defaultValue)
{    if (o == null) {        return defaultValue;    } else if (o instanceof Boolean) {        return ((Boolean) o).booleanValue();    }    return Boolean.parseBoolean(o.toString());}
0
public static int getInt(Object o, int defaultValue)
{    try {        if (o == null) {            return defaultValue;        }        if (o instanceof Number) {            return ((Number) o).intValue();        }        return Integer.parseInt(o.toString());    } catch (NumberFormatException e) {        return defaultValue;    }}
0
public static char getChar(Object o)
{    return getChar(o, ' ');}
0
public static char getChar(Object o, char defaultValue)
{    try {        if (o == null) {            return defaultValue;        }        if (o instanceof Character) {            return ((Character) o).charValue();        } else if (o instanceof Byte) {            return (char) ((Byte) o).byteValue();        } else if (o instanceof Integer) {            return (char) ((Integer) o).intValue();        } else {            String s = o.toString();            if (s.length() > 0) {                return o.toString().charAt(0);            }            return defaultValue;        }    } catch (Exception e) {        return defaultValue;    }}
0
public static int getInt(Object o)
{    return getInt(o, 0);}
0
public static long getLong(Object o, long defaultValue)
{    try {        if (o == null) {            return defaultValue;        }        if (o instanceof Number) {            return ((Number) o).longValue();        }        return Long.parseLong(o.toString());    } catch (NumberFormatException e) {        return defaultValue;    }}
0
public static long getLong(Object o)
{    return getLong(o, 0);}
0
public static String formatDate(Date date, String pattern)
{    if (date == null) {        return "";    }    SimpleDateFormat format = new SimpleDateFormat(pattern);    return format.format(date);}
0
public static String formatDate(java.sql.Date date, String pattern)
{    if (date == null) {        return "";    }    SimpleDateFormat format = new SimpleDateFormat(pattern);    return format.format(date);}
0
public static String formatDate(String date, String pattern)
{    return formatDate(getCalendar(date, null), pattern);}
0
public static String formatDate(Calendar date, String pattern)
{    return formatCalendar(date, pattern);}
0
public static String formatCalendar(Calendar date, String pattern)
{    if (date == null) {        return "";    }    SimpleDateFormat format = new SimpleDateFormat(pattern);    return format.format(date.getTime());}
0
public static String getString(Object o, String defaultValue)
{    if (o == null) {        return defaultValue;    }    return o.toString();}
0
public static String insertLineBreaks(String v, String insertion)
{    if (v == null) {        return "";    }    StringBuilder replacement = new StringBuilder();    StringTokenizer tokens = new StringTokenizer(v, "\n", true);    while (tokens.hasMoreTokens()) {        String token = tokens.nextToken();        if (token.compareTo("\n") == 0) {            replacement.append(insertion);        } else {            replacement.append(token);        }    }    return replacement.toString();}
0
public static String getString(Object o)
{    return getString(o, "");}
0
public static File getFile(Object o)
{    if (o instanceof File) {        return (File) o;    }    if (o instanceof String) {        return new File((String) o);    }    throw new IllegalArgumentException("Expected String or file, actual " + o.getClass().getName());}
0
private static HeapDumper getInstance()
{    return DumperHolder.DUMPER;}
0
public static void init() throws Exception
{    Exception e = getInstance().exception;    if (e != null) {        throw e;    }}
0
public static void dumpHeap(String fileName, boolean live) throws Exception
{    getInstance().dumpHeap0(fileName, live);}
0
public static void dumpHeap(String fileName) throws Exception
{    dumpHeap(fileName, true);}
0
public static String dumpHeap() throws Exception
{    return dumpHeap(true);}
0
public static String dumpHeap(boolean live) throws Exception
{    return dumpHeap(new File("."), live);}
0
public static String dumpHeap(File basedir, boolean live) throws Exception
{    SimpleDateFormat timestampFormat = new SimpleDateFormat("yyyyMMdd_hhmmss_SSS");    String stamp = timestampFormat.format(new Date());    File temp = new File(basedir, "dump_" + stamp + ".hprof");    final String path = temp.getPath();    dumpHeap(path, live);    return path;}
0
private void dumpHeap0(String fileName, boolean live) throws Exception
{    try {        if (exception == null) {            server.invoke(hotspotDiagnosticBean, "dumpHeap", new Object[] { fileName, Boolean.valueOf(live) }, new String[] { "java.lang.String", "boolean" });        } else {            throw exception;        }    } catch (RuntimeMBeanException e) {        Throwable f = e.getCause();        if (f instanceof Exception) {            throw (Exception) f;        }        throw e;    } catch (MBeanException e) {        Throwable f = e.getCause();        if (f instanceof Exception) {            throw (Exception) f;        }        throw e;    }}
0
public static String[] split(String splittee, String splitChar, boolean truncate)
{        if (splittee == null || splitChar == null) {        return new String[0];    }    final String EMPTY_ELEMENT = "";    int spot;    final int splitLength = splitChar.length();    final String adjacentSplit = splitChar + splitChar;    final int adjacentSplitLength = adjacentSplit.length();    if (truncate) {        while ((spot = splittee.indexOf(adjacentSplit)) != -1) {            splittee = splittee.substring(0, spot + splitLength) + splittee.substring(spot + adjacentSplitLength, splittee.length());        }        if (splittee.startsWith(splitChar)) {            splittee = splittee.substring(splitLength);        }        if (splittee.endsWith(splitChar)) {                        splittee = splittee.substring(0, splittee.length() - splitLength);        }    }    List<String> returns = new ArrayList<>();        final int length = splittee.length();    int start = 0;    spot = 0;    while (start < length && (spot = splittee.indexOf(splitChar, start)) > -1) {        if (spot > 0) {            returns.add(splittee.substring(start, spot));        } else {            returns.add(EMPTY_ELEMENT);        }        start = spot + splitLength;    }    if (start < length) {        returns.add(splittee.substring(start));    } else if (spot == length - splitLength) {                returns.add(EMPTY_ELEMENT);    }    return returns.toArray(new String[returns.size()]);}
0
public static String[] split(String splittee, String splitChar)
{    return split(splittee, splitChar, true);}
0
public static String[] split(String splittee, String delims, String def)
{    StringTokenizer tokens = new StringTokenizer(splittee, delims, def != null);    boolean lastWasDelim = false;    List<String> strList = new ArrayList<>();    while (tokens.hasMoreTokens()) {        String tok = tokens.nextToken();        if (        tok.length() == 1 &&         delims.contains(tok)) {            if (lastWasDelim) {                                                strList.add(def);            }            lastWasDelim = true;        } else {            lastWasDelim = false;            strList.add(tok);        }    }    if (lastWasDelim) {        strList.add(def);    }    return strList.toArray(new String[strList.size()]);}
0
public static StringBuilder rightAlign(StringBuilder in, int len)
{    int pfx = len - in.length();    if (pfx <= 0) {        return in;    }    if (pfx > SPACES_LEN) {        pfx = SPACES_LEN;    }    in.insert(0, SPACES_CHARS, 0, pfx);    return in;}
0
public static StringBuilder leftAlign(StringBuilder in, int len)
{    int sfx = len - in.length();    if (sfx <= 0) {        return in;    }    if (sfx > SPACES_LEN) {        sfx = SPACES_LEN;    }    in.append(SPACES_CHARS, 0, sfx);    return in;}
0
public static String booleanToSTRING(boolean value)
{    return value ? "TRUE" : "FALSE";}
0
public static String replaceFirst(String source, String search, String replace)
{    int start = source.indexOf(search);    int len = search.length();    if (start == -1) {        return source;    }    if (start == 0) {        return replace + source.substring(len);    }    return source.substring(0, start) + replace + source.substring(start + len);}
0
public static String replaceAllChars(String source, char search, String replace)
{    int indexOf = source.indexOf(search);    if (indexOf == -1) {        return source;    }    int offset = 0;    char[] chars = source.toCharArray();    StringBuilder sb = new StringBuilder(source.length() + 20);    while (indexOf != -1) {        sb.append(chars, offset, indexOf - offset);        sb.append(replace);        offset = indexOf + 1;        indexOf = source.indexOf(search, offset);    }    sb.append(chars, offset, chars.length - offset);    return sb.toString();}
0
public static String substitute(final String input, final String pattern, final String sub)
{    StringBuilder ret = new StringBuilder(input.length());    int start = 0;    int index = -1;    final int length = pattern.length();    while ((index = input.indexOf(pattern, start)) >= start) {        ret.append(input.substring(start, index));        ret.append(sub);        start = index + length;    }    ret.append(input.substring(start));    return ret.toString();}
0
public static String trim(final String input, final String delims)
{    StringTokenizer tokens = new StringTokenizer(input, delims);    return tokens.hasMoreTokens() ? tokens.nextToken() : "";}
0
public static byte[] getByteArraySlice(byte[] array, int begin, int end)
{    byte[] slice = new byte[end - begin + 1];    System.arraycopy(array, begin, slice, 0, slice.length);    return slice;}
0
public static void closeQuietly(Closeable cl)
{    try {        if (cl != null) {            cl.close();        }    } catch (IOException ignored) {        }}
0
public static void closeQuietly(Socket sock)
{    try {        if (sock != null) {            sock.close();        }    } catch (IOException ignored) {        }}
0
public static void closeQuietly(ServerSocket sock)
{    try {        if (sock != null) {            sock.close();        }    } catch (IOException ignored) {        }}
0
public static boolean startsWith(byte[] target, byte[] search, int offset)
{    final int targetLength = target.length;    final int searchLength = search.length;    if (offset < 0 || searchLength > targetLength + offset) {        return false;    }    for (int i = 0; i < searchLength; i++) {        if (target[i + offset] != search[i]) {            return false;        }    }    return true;}
0
public static boolean isXML(byte[] target)
{    return startsWith(target, XML_PFX, 0);}
0
public static String baToHexString(byte[] ba)
{    StringBuilder sb = new StringBuilder(ba.length * 2);    for (byte b : ba) {        int j = b & 0xff;        if (j < 16) {                        sb.append('0');        }        sb.append(Integer.toHexString(j));    }    return sb.toString();}
0
public static String baToHexString(byte[] ba, char separator)
{    StringBuilder sb = new StringBuilder(ba.length * 2);    for (int i = 0; i < ba.length; i++) {        if (i > 0 && separator != 0) {            sb.append(separator);        }        int j = ba[i] & 0xff;        if (j < 16) {                        sb.append('0');        }        sb.append(Integer.toHexString(j));    }    return sb.toString();}
0
public static byte[] baToHexBytes(byte[] ba)
{    byte[] hb = new byte[ba.length * 2];    for (int i = 0; i < ba.length; i++) {        byte upper = (byte) ((ba[i] & 0xf0) >> 4);        byte lower = (byte) (ba[i] & 0x0f);        hb[2 * i] = toHexChar(upper);        hb[2 * i + 1] = toHexChar(lower);    }    return hb;}
0
private static byte toHexChar(byte in)
{    if (in < 10) {        return (byte) (in + '0');    }    return (byte) ((in - 10) + 'a');}
0
public static int read(InputStream is, byte[] buffer, int offset, int length) throws IOException
{    int remaining = length;    while (remaining > 0) {        int location = length - remaining;        int count = is.read(buffer, location, remaining);        if (-1 == count) {                        break;        }        remaining -= count;    }    return length - remaining;}
0
public static void displayThreads(boolean includeDaemons)
{    Map<Thread, StackTraceElement[]> m = Thread.getAllStackTraces();    String lineSeparator = System.getProperty("line.separator");    StringBuilder builder = new StringBuilder();    for (Map.Entry<Thread, StackTraceElement[]> e : m.entrySet()) {        boolean daemon = e.getKey().isDaemon();        if (includeDaemons || !daemon) {            builder.setLength(0);            StackTraceElement[] ste = e.getValue();            for (StackTraceElement stackTraceElement : ste) {                int lineNumber = stackTraceElement.getLineNumber();                builder.append(stackTraceElement.getClassName() + "#" + stackTraceElement.getMethodName() + (lineNumber >= 0 ? " at line:" + stackTraceElement.getLineNumber() : "") + lineSeparator);            }            System.out.println(e.getKey().toString() + (daemon ? " (daemon)" : "") + ", stackTrace:" + builder.toString());        }    }}
0
public static String nullifyIfEmptyTrimmed(final String input)
{    if (input == null) {        return null;    }    String trimmed = input.trim();    if (trimmed.length() == 0) {        return null;    }    return trimmed;}
0
public static boolean isBlank(final String value)
{    return StringUtils.isBlank(value);}
0
public static void write(byte[] data, OutputStream output) throws IOException
{    int bytes = data.length;    int offset = 0;    while (bytes > 0) {        int chunk = Math.min(bytes, DEFAULT_CHUNK_SIZE);        output.write(data, offset, chunk);        bytes -= chunk;        offset += chunk;    }}
0
public static String formatDuration(long elapsedSec)
{    return String.format("%02d:%02d:%02d", elapsedSec / 3600, (elapsedSec % 3600) / 60, elapsedSec % 60);}
0
public static void canSafelyWriteToFolder(File folder)
{    canSafelyWriteToFolder(folder, false, file -> true);}
0
public static void canSafelyWriteToFolder(File folder, FileFilter fileFilter)
{    canSafelyWriteToFolder(folder, false, fileFilter);}
0
public static void canSafelyWriteToFolder(File folder, boolean deleteFolderContent)
{    canSafelyWriteToFolder(folder, deleteFolderContent, file -> true);}
0
public static void canSafelyWriteToFolder(File folder, boolean deleteFolderIfExists, FileFilter exporterFileFilter)
{    if (folder.exists()) {        if (folder.isFile()) {            if (deleteFolderIfExists) {                if (!folder.delete()) {                    throw new IllegalArgumentException("Cannot write to '" + folder.getAbsolutePath() + "' as it is an existing file and delete failed");                }            } else {                throw new IllegalArgumentException("Cannot write to '" + folder.getAbsolutePath() + "' as it is an existing file");            }        } else {            File[] listedFiles = folder.listFiles(exporterFileFilter);            if (listedFiles != null && listedFiles.length > 0) {                if (deleteFolderIfExists) {                    try {                        FileUtils.deleteDirectory(folder);                    } catch (IOException ex) {                        throw new IllegalArgumentException("Cannot write to '" + folder.getAbsolutePath() + "' as folder is not empty and cleanup failed with error:" + ex.getMessage(), ex);                    }                    if (!folder.mkdir()) {                        throw new IllegalArgumentException("Cannot create folder " + folder.getAbsolutePath());                    }                } else {                    throw new IllegalArgumentException("Cannot write to '" + folder.getAbsolutePath() + "' as folder is not empty");                }            }        }    } else {                if (!folder.getAbsoluteFile().getParentFile().canWrite()) {            throw new IllegalArgumentException("Cannot write to '" + folder.getAbsolutePath() + "' as folder does not exist and parent folder is not writable");        }    }}
0
public static Object[] replaceAllWithRegex(String source, String regex, String replacement, boolean caseSensitive)
{    java.util.regex.Pattern pattern = caseSensitive ? java.util.regex.Pattern.compile(regex) : java.util.regex.Pattern.compile(regex, java.util.regex.Pattern.CASE_INSENSITIVE);    final String replacementQuoted = Matcher.quoteReplacement(replacement);    Matcher matcher = pattern.matcher(source);    int totalReplaced = 0;        StringBuffer result = new StringBuffer();    while (matcher.find()) {        matcher.appendReplacement(result, replacementQuoted);        totalReplaced++;    }    matcher.appendTail(result);    return new Object[] { result.toString(), totalReplaced };}
0
public static int replaceValue(String regex, String replaceBy, boolean caseSensitive, String value, Consumer<String> setter)
{    if (StringUtils.isBlank(value)) {        return 0;    }    Object[] result = replaceAllWithRegex(value, regex, replaceBy, caseSensitive);    int nbReplaced = ((Integer) result[1]).intValue();    if (nbReplaced <= 0) {        return 0;    }    setter.accept((String) result[0]);    return nbReplaced;}
0
public static String unsplit(Object[] splittee, Object splitChar)
{    StringBuilder retVal = new StringBuilder();    int count = -1;    while (++count < splittee.length) {        if (splittee[count] != null) {            retVal.append(splittee[count]);        }        if (count + 1 < splittee.length && splittee[count + 1] != null) {            retVal.append(splitChar);        }    }    return retVal.toString();}
0
public static String generateRandomAlphanumericPassword(int length)
{    char[][] pairs = { { 'a', 'z' }, { 'A', 'Z' }, { '0', '9' } };    RandomStringGenerator pwdGenerator = new RandomStringGenerator.Builder().usingRandom(max -> SECURE_RANDOM.nextInt(max)).withinRange(pairs).build();    return pwdGenerator.generate(length);}
0
public static String threadDump() throws Exception
{        return threadDump(new File("."));}
0
public static String threadDump(File basedir) throws Exception
{    SimpleDateFormat timestampFormat = new SimpleDateFormat("yyyyMMdd_hhmmss_SSS");    String stamp = timestampFormat.format(new Date());    File temp = new File(basedir, "thread_dump_" + stamp + ".log");    final String path = temp.getPath();    try (FileOutputStream fos = new FileOutputStream(temp);        OutputStreamWriter outputStreamWriter = new OutputStreamWriter(fos, StandardCharsets.UTF_8);        BufferedWriter bufferedWriter = new BufferedWriter(outputStreamWriter)) {        writeThreadDump(bufferedWriter);    }    return path;}
0
public static void writeThreadDump(Writer writer) throws IOException
{    ThreadMXBean threadMxBean = ManagementFactory.getThreadMXBean();    for (ThreadInfo ti : threadMxBean.dumpAllThreads(true, true)) {        writer.write(ti.toString());    }}
0
private void startTag(String t)
{    sb.append("<");    sb.append(t);    sb.append(">");}
0
private void endTag(String t)
{    sb.append("</");    sb.append(t);    sb.append(">");    sb.append("\n");}
0
private void emptyTag(String t)
{    sb.append("<");    sb.append(t);    sb.append("/>");    sb.append("\n");}
0
public XMLBuffer openTag(String tagName)
{    tags.push(tagName);    startTag(tagName);    return this;}
0
public XMLBuffer closeTag(String tagName)
{    String tag = (String) tags.pop();    if (!tag.equals(tagName)) {        throw new IllegalArgumentException("Trying to close tag: " + tagName + " ; should be " + tag);    }    endTag(tag);    return this;}
0
public XMLBuffer tag(String tagName, CharSequence content)
{    if (content.length() == 0) {        emptyTag(tagName);    } else {        startTag(tagName);        sb.append(content);        endTag(tagName);    }    return this;}
0
public String toString()
{    while (!tags.isEmpty()) {        endTag((String) tags.pop());    }    return sb.toString();}
0
public static final ContextMap getCurrentContext()
{    return getCurrentContext(true);}
0
public static final ContextMap getCurrentContext(final boolean autocreate)
{        ContextMap context = (ContextMap) c_localContext.get();    if (null == context && autocreate) {        context = new ContextMap();        c_localContext.set(context);    }    return context;}
0
public static final void bind(final ContextMap context)
{        c_localContext.set(context);}
0
public void makeReadOnly()
{    m_readOnly = true;}
0
public boolean isReadOnly()
{    return m_readOnly;}
0
public void clear()
{    checkReadable();    m_map.clear();}
0
public Object get(final String key, final Object defaultObject)
{    final Object object = get(key);    if (null != object) {        return object;    } else {        return defaultObject;    }}
0
public Object get(final String key)
{    if (key == null) {        return null;    }    final Object result = m_map.get(key);    if (null == result && null != m_parent) {        return m_parent.get(key);    }    return result;}
0
public void set(final String key, final Object value)
{    checkReadable();    if (value == null) {        m_map.remove(key);    } else {        m_map.put(key, value);    }}
0
public int getSize()
{    return m_map.size();}
0
private Object readResolve()
{    makeReadOnly();    return this;}
0
private void checkReadable()
{    if (isReadOnly()) {        throw new IllegalStateException("ContextMap is read only and can not be modified");    }}
0
public final Priority getPriority()
{    return m_priority;}
0
public final void setPriority(final Priority priority)
{    m_priority = priority;}
0
public final ContextMap getContextMap()
{    return m_contextMap;}
0
public final void setContextMap(final ContextMap contextMap)
{    m_contextMap = contextMap;}
0
public final String getCategory()
{    return m_category;}
0
public final String getMessage()
{    return m_message;}
0
public final Throwable getThrowable()
{    return m_throwable;}
0
public final long getTime()
{    return m_time;}
0
public final long getRelativeTime()
{    return m_time - START_TIME;}
0
public final void setCategory(final String category)
{    m_category = category;}
0
public final void setMessage(final String message)
{    m_message = message;}
0
public final void setThrowable(final Throwable throwable)
{    m_throwable = throwable;}
0
public final void setTime(final long time)
{    m_time = time;}
0
private Object readResolve() throws ObjectStreamException
{    if (null == m_category) {        m_category = "";    }    if (null == m_message) {        m_message = "";    }    String priorityName = "";    if (null != m_priority) {        priorityName = m_priority.getName();    }    m_priority = Priority.getPriorityForName(priorityName);    return this;}
0
public void setAdditivity(final boolean additivity)
{}
0
public void setPriority(final Priority priority)
{}
0
public void unsetPriority()
{}
0
public void unsetPriority(final boolean recursive)
{}
0
public void setLogTargets(final LogTarget[] logTargets)
{}
0
public void unsetLogTargets()
{}
0
public void unsetLogTargets(final boolean recursive)
{}
0
public Logger[] getChildren()
{        return EMPTY_SET;}
0
public static Priority getPriorityForName(final String priority)
{    if (Priority.DEBUG.getName().equals(priority)) {        return Priority.DEBUG;    } else if (Priority.INFO.getName().equals(priority)) {        return Priority.INFO;    } else if (Priority.WARN.getName().equals(priority)) {        return Priority.WARN;    } else if (Priority.ERROR.getName().equals(priority)) {        return Priority.ERROR;    } else if (Priority.FATAL_ERROR.getName().equals(priority)) {        return Priority.FATAL_ERROR;    } else if (Priority.NONE.getName().equals(priority)) {        return Priority.NONE;    } else {        return Priority.DEBUG;    }}
0
public String toString()
{    return "Priority[" + getName() + "/" + getValue() + "]";}
0
public int getValue()
{    return m_priority;}
0
public String getName()
{    return m_name;}
0
public boolean isGreater(final Priority other)
{    return m_priority > other.getValue();}
0
public boolean isLower(final Priority other)
{    return m_priority < other.getValue();}
0
public boolean isLowerOrEqual(final Priority other)
{    return m_priority <= other.getValue();}
0
private Object readResolve()
{    return getPriorityForName(m_name);}
0
public void testOptionalArgWithSpace()
{    final CLOptionDescriptor[] options = new CLOptionDescriptor[] { ALL, TAINT };    final String[] args = new String[] { "-T", "param", "-a" };    final CLArgsParser parser = new CLArgsParser(args, options);    assertNull(parser.getErrorString(), parser.getErrorString());    final List<CLOption> clOptions = parser.getArguments();    final int size = clOptions.size();    assertEquals("Option count", 3, size);    final CLOption option0 = clOptions.get(0);    assertEquals("Option Code: " + option0.getDescriptor().getId(), TAINT_OPT, option0.getDescriptor().getId());    assertEquals("Option Arg: " + option0.getArgument(0), null, option0.getArgument(0));    final CLOption option1 = clOptions.get(1);    assertEquals(option1.getDescriptor().getId(), CLOption.TEXT_ARGUMENT);    assertEquals(option1.getArgument(0), "param");    final CLOption option2 = clOptions.get(2);    assertEquals(option2.getDescriptor().getId(), ALL_OPT);    assertEquals(option2.getArgument(0), null);}
0
public void testOptionalArgLong()
{    final CLOptionDescriptor[] options = new CLOptionDescriptor[] { ALL, TAINT };        final String[] args = new String[] { "--taint", "param", "-a" };    final CLArgsParser parser = new CLArgsParser(args, options);    assertNull(parser.getErrorString(), parser.getErrorString());    final List<CLOption> clOptions = parser.getArguments();    final int size = clOptions.size();    assertEquals("Option count", 3, size);    final CLOption option0 = clOptions.get(0);    assertEquals("Option Code: " + option0.getDescriptor().getId(), TAINT_OPT, option0.getDescriptor().getId());    assertEquals("Option Arg: " + option0.getArgument(0), null, option0.getArgument(0));    final CLOption option1 = clOptions.get(1);    assertEquals(CLOption.TEXT_ARGUMENT, option1.getDescriptor().getId());    assertEquals("param", option1.getArgument(0));    final CLOption option2 = clOptions.get(2);    assertEquals(option2.getDescriptor().getId(), ALL_OPT);    assertEquals(option2.getArgument(0), null);}
0
public void testOptionalArgLongEquals()
{    final CLOptionDescriptor[] options = new CLOptionDescriptor[] { ALL, TAINT };        final String[] args = new String[] { "--taint=param", "-a" };    final CLArgsParser parser = new CLArgsParser(args, options);    assertNull(parser.getErrorString(), parser.getErrorString());    final List<CLOption> clOptions = parser.getArguments();    final int size = clOptions.size();    assertEquals("Option count", 2, size);    final CLOption option0 = clOptions.get(0);    assertEquals("Option Code: " + option0.getDescriptor().getId(), TAINT_OPT, option0.getDescriptor().getId());    assertEquals("Option Arg: " + option0.getArgument(0), "param", option0.getArgument(0));    final CLOption option2 = clOptions.get(1);    assertEquals(option2.getDescriptor().getId(), ALL_OPT);    assertEquals(option2.getArgument(0), null);}
0
public void testShortOptArgUnenteredBeforeOtherOpt()
{    final CLOptionDescriptor[] options = new CLOptionDescriptor[] { ALL, TAINT };    final String[] args = new String[] { "-T", "-a" };    final CLArgsParser parser = new CLArgsParser(args, options);    assertNull(parser.getErrorString(), parser.getErrorString());    final List<CLOption> clOptions = parser.getArguments();    final int size = clOptions.size();    assertEquals("Option count", 2, size);    final CLOption option0 = clOptions.get(0);    assertEquals("Option Code: " + option0.getDescriptor().getId(), TAINT_OPT, option0.getDescriptor().getId());    assertEquals("Option Arg: " + option0.getArgument(0), null, option0.getArgument(0));    final CLOption option1 = clOptions.get(1);    assertEquals(option1.getDescriptor().getId(), ALL_OPT);    assertEquals(option1.getArgument(0), null);}
0
public void testOptionalArgsWithArgShortBeforeOtherOpt()
{        final CLOptionDescriptor[] options = new CLOptionDescriptor[] { ALL, TAINT };    final String[] args = new String[] { "-T3", "-a" };    final CLArgsParser parser = new CLArgsParser(args, options);    assertNull(parser.getErrorString(), parser.getErrorString());    final List<CLOption> clOptions = parser.getArguments();    final int size = clOptions.size();    assertEquals(size, 2);    final CLOption option0 = clOptions.get(0);    assertEquals(option0.getDescriptor().getId(), TAINT_OPT);    assertEquals(option0.getArgument(0), "3");    final CLOption option1 = clOptions.get(1);    assertEquals(ALL_OPT, option1.getDescriptor().getId());    assertEquals(null, option1.getArgument(0));}
0
public void testOptionalArgsWithArgShortEqualsBeforeOtherOpt()
{        final CLOptionDescriptor[] options = new CLOptionDescriptor[] { ALL, TAINT };    final String[] args = new String[] { "-T=3", "-a" };    final CLArgsParser parser = new CLArgsParser(args, options);    assertNull(parser.getErrorString(), parser.getErrorString());    final List<CLOption> clOptions = parser.getArguments();    final int size = clOptions.size();    assertEquals(size, 2);    final CLOption option0 = clOptions.get(0);    assertEquals(option0.getDescriptor().getId(), TAINT_OPT);    assertEquals(option0.getArgument(0), "3");    final CLOption option1 = clOptions.get(1);    assertEquals(ALL_OPT, option1.getDescriptor().getId());    assertEquals(null, option1.getArgument(0));}
0
public void testOptionalArgsNoArgShortBeforeOtherOpt()
{        final CLOptionDescriptor[] options = new CLOptionDescriptor[] { ALL, TAINT };    final String[] args = new String[] { "-T", "-a" };    final CLArgsParser parser = new CLArgsParser(args, options);    assertNull(parser.getErrorString(), parser.getErrorString());    final List<CLOption> clOptions = parser.getArguments();    final int size = clOptions.size();    assertEquals(size, 2);    final CLOption option0 = clOptions.get(0);    assertEquals(TAINT_OPT, option0.getDescriptor().getId());    assertEquals(null, option0.getArgument(0));    final CLOption option1 = clOptions.get(1);    assertEquals(ALL_OPT, option1.getDescriptor().getId());    assertEquals(null, option1.getArgument(0));}
0
public void testFullParse()
{    final CLOptionDescriptor[] options = new CLOptionDescriptor[] { YOU, ALL, CLEAR1, CLEAR2, CLEAR3, CLEAR5 };    final CLArgsParser parser = new CLArgsParser(ARGLIST1, options);    assertNull(parser.getErrorString(), parser.getErrorString());    final List<CLOption> clOptions = parser.getArguments();    final int size = clOptions.size();    assertEquals(size, 8);    assertEquals(clOptions.get(0).getDescriptor().getId(), YOU_OPT);    assertEquals(clOptions.get(1).getDescriptor().getId(), 0);    assertEquals(clOptions.get(2).getDescriptor().getId(), ALL_OPT);    assertEquals(clOptions.get(3).getDescriptor().getId(), CLEAR1_OPT);    assertEquals(clOptions.get(4).getDescriptor().getId(), CLEAR2_OPT);    assertEquals(clOptions.get(5).getDescriptor().getId(), CLEAR3_OPT);    assertEquals(clOptions.get(6).getDescriptor().getId(), CLEAR5_OPT);    assertEquals(clOptions.get(7).getDescriptor().getId(), 0);}
0
public void testDuplicateOptions()
{        final CLOptionDescriptor[] options = new CLOptionDescriptor[] { DEFINE, ALL, CLEAR1 };    final CLArgsParser parser = new CLArgsParser(ARGLIST3, options);    assertNull(parser.getErrorString(), parser.getErrorString());    final List<CLOption> clOptions = parser.getArguments();    final int size = clOptions.size();    assertEquals(size, 5);    assertEquals(clOptions.get(0).getDescriptor().getId(), DEFINE_OPT);    assertEquals(clOptions.get(1).getDescriptor().getId(), 0);    assertEquals(clOptions.get(2).getDescriptor().getId(), ALL_OPT);    assertEquals(clOptions.get(3).getDescriptor().getId(), ALL_OPT);    assertEquals(clOptions.get(4).getDescriptor().getId(), 0);}
0
public void testIncompatableOptions()
{    final CLOptionDescriptor[] options = new CLOptionDescriptor[] { DEFINE, ALL, CLEAR1, BLEE };    final CLArgsParser parser = new CLArgsParser(ARGLIST4, options);    assertNotNull(parser.getErrorString());    final List<CLOption> clOptions = parser.getArguments();    final int size = clOptions.size();    assertEquals(size, 5);    assertEquals(clOptions.get(0).getDescriptor().getId(), DEFINE_OPT);    assertEquals(clOptions.get(1).getDescriptor().getId(), 0);    assertEquals(clOptions.get(2).getDescriptor().getId(), ALL_OPT);    assertEquals(clOptions.get(3).getDescriptor().getId(), BLEE_OPT);    assertEquals(clOptions.get(4).getDescriptor().getId(), 0);}
0
public void testSingleArg()
{    final CLOptionDescriptor[] options = new CLOptionDescriptor[] { FILE };    final CLArgsParser parser = new CLArgsParser(ARGLIST5, options);    assertNull(parser.getErrorString(), parser.getErrorString());    final List<CLOption> clOptions = parser.getArguments();    final int size = clOptions.size();    assertEquals(size, 1);    assertEquals(clOptions.get(0).getDescriptor().getId(), FILE_OPT);    assertEquals(clOptions.get(0).getArgument(), "myfile.txt");}
0
public void testSingleArg2()
{    final CLOptionDescriptor[] options = new CLOptionDescriptor[] { FILE };    final CLArgsParser parser = new     CLArgsParser(    new String[] { "-f-=,=-" },     options);    assertNull(parser.getErrorString(), parser.getErrorString());    final List<CLOption> clOptions = parser.getArguments();    final int size = clOptions.size();    assertEquals(1, size);    assertEquals(FILE_OPT, clOptions.get(0).getDescriptor().getId());    assertEquals("-=,=-", clOptions.get(0).getArgument());}
0
public void testSingleArg3()
{    final CLOptionDescriptor[] options = new CLOptionDescriptor[] { FILE };    final CLArgsParser parser = new     CLArgsParser(    new String[] { "--file=-=,-" },     options);    assertNull(parser.getErrorString(), parser.getErrorString());    final List<CLOption> clOptions = parser.getArguments();    final int size = clOptions.size();    assertEquals(1, size);    assertEquals(FILE_OPT, clOptions.get(0).getDescriptor().getId());    assertEquals("-=,-", clOptions.get(0).getArgument());}
0
public void testSingleArg4()
{    final CLOptionDescriptor[] options = new CLOptionDescriptor[] { FILE };    final CLArgsParser parser = new CLArgsParser(new String[] { "--file", "myfile.txt" }, options);    assertNull(parser.getErrorString(), parser.getErrorString());    final List<CLOption> clOptions = parser.getArguments();    final int size = clOptions.size();    assertEquals(1, size);    assertEquals(FILE_OPT, clOptions.get(0).getDescriptor().getId());    assertEquals("myfile.txt", clOptions.get(0).getArgument());}
0
public void testSingleArg5()
{    final CLOptionDescriptor[] options = new CLOptionDescriptor[] { FILE };    final CLArgsParser parser = new CLArgsParser(new String[] { "-f", "myfile.txt" }, options);    assertNull(parser.getErrorString(), parser.getErrorString());    final List<CLOption> clOptions = parser.getArguments();    final int size = clOptions.size();    assertEquals(1, size);    assertEquals(FILE_OPT, clOptions.get(0).getDescriptor().getId());    assertEquals("myfile.txt", clOptions.get(0).getArgument());}
0
public void testSingleArg6()
{    final CLOptionDescriptor[] options = new CLOptionDescriptor[] { FILE };    final CLArgsParser parser = new CLArgsParser(new String[] { "-f", "-=-" }, options);    assertNull(parser.getErrorString(), parser.getErrorString());    final List<CLOption> clOptions = parser.getArguments();    final int size = clOptions.size();    assertEquals(1, size);    assertEquals(FILE_OPT, clOptions.get(0).getDescriptor().getId());    assertEquals("-=-", clOptions.get(0).getArgument());}
0
public void testSingleArg7()
{    final CLOptionDescriptor[] options = new CLOptionDescriptor[] { FILE };    final CLArgsParser parser = new CLArgsParser(new String[] { "--file=-=-" }, options);    assertNull(parser.getErrorString(), parser.getErrorString());    final List<CLOption> clOptions = parser.getArguments();    final int size = clOptions.size();    assertEquals(1, size);    assertEquals(FILE_OPT, clOptions.get(0).getDescriptor().getId());    assertEquals("-=-", clOptions.get(0).getArgument());}
0
public void testSingleArg8()
{    final CLOptionDescriptor[] options = new CLOptionDescriptor[] { FILE };    final CLArgsParser parser = new CLArgsParser(new String[] { "--file", "-=-" }, options);    assertNull(parser.getErrorString(), parser.getErrorString());    final List<CLOption> clOptions = parser.getArguments();    final int size = clOptions.size();    assertEquals(1, size);    assertEquals(FILE_OPT, clOptions.get(0).getDescriptor().getId());    assertEquals("-=-", clOptions.get(0).getArgument());}
0
public void testCombinedArgs1()
{    final CLOptionDescriptor[] options = new CLOptionDescriptor[] { BLEE, TAINT };    final CLArgsParser parser = new CLArgsParser(new String[] { "-bT", "rest" }, options);    assertNull(parser.getErrorString(), parser.getErrorString());    final List<CLOption> clOptions = parser.getArguments();    final int size = clOptions.size();    assertEquals(3, size);    assertEquals(BLEE_OPT, clOptions.get(0).getDescriptor().getId());    assertEquals(TAINT_OPT, clOptions.get(1).getDescriptor().getId());    assertEquals(0, clOptions.get(2).getDescriptor().getId());    assertEquals("rest", clOptions.get(2).getArgument());}
0
public void testCombinedArgs2()
{    final CLOptionDescriptor[] options = new CLOptionDescriptor[] { BLEE, TAINT, FILE };    final CLArgsParser parser = new CLArgsParser(new String[] { "-bT", "-fa" }, options);    assertNull(parser.getErrorString(), parser.getErrorString());    final List<CLOption> clOptions = parser.getArguments();    final int size = clOptions.size();    assertEquals(3, size);    assertEquals(BLEE_OPT, clOptions.get(0).getDescriptor().getId());    assertEquals(TAINT_OPT, clOptions.get(1).getDescriptor().getId());    assertEquals(FILE_OPT, clOptions.get(2).getDescriptor().getId());    assertEquals("a", clOptions.get(2).getArgument());}
0
public void testCombinedArgs3()
{    final CLOptionDescriptor[] options = new CLOptionDescriptor[] { BLEE, TAINT, FILE };    final CLArgsParser parser = new     CLArgsParser(    new String[] { "-bT", "--", "-fa" },     options);    assertNull(parser.getErrorString(), parser.getErrorString());    final List<CLOption> clOptions = parser.getArguments();    final int size = clOptions.size();    assertEquals(3, size);    assertEquals(BLEE_OPT, clOptions.get(0).getDescriptor().getId());    assertEquals(TAINT_OPT, clOptions.get(1).getDescriptor().getId());    assertEquals(0, clOptions.get(2).getDescriptor().getId());    assertEquals("-fa", clOptions.get(2).getArgument());}
0
public void testCombinedArgs4()
{    final CLOptionDescriptor[] options = new CLOptionDescriptor[] { BLEE, TAINT, FILE };    final CLArgsParser parser = new     CLArgsParser(    new String[] { "-bT", "rest", "-fa" },     options);    assertNull(parser.getErrorString(), parser.getErrorString());    final List<CLOption> clOptions = parser.getArguments();    final int size = clOptions.size();    assertEquals(4, size);    assertEquals(BLEE_OPT, clOptions.get(0).getDescriptor().getId());    assertEquals(TAINT_OPT, clOptions.get(1).getDescriptor().getId());    assertEquals(0, clOptions.get(2).getDescriptor().getId());    assertEquals("rest", clOptions.get(2).getArgument());    assertEquals(FILE_OPT, clOptions.get(3).getDescriptor().getId());    assertEquals("a", clOptions.get(3).getArgument());}
0
public void test2ArgsParse()
{        final CLOptionDescriptor[] options = new CLOptionDescriptor[] { DEFINE, ALL, CLEAR1, CASE_CHECK };    final CLArgsParser parser = new CLArgsParser(ARGLIST2, options);    assertNull(parser.getErrorString(), parser.getErrorString());    final List<CLOption> clOptions = parser.getArguments();    final int size = clOptions.size();    assertEquals(size, 5);    assertEquals(clOptions.get(0).getDescriptor().getId(), DEFINE_OPT);    assertEquals(clOptions.get(1).getDescriptor().getId(), 0);    assertEquals(clOptions.get(2).getDescriptor().getId(), ALL_OPT);    assertEquals(clOptions.get(3).getDescriptor().getId(), 0);    assertEquals(clOptions.get(4).getDescriptor().getId(), CASE_CHECK_OPT);    final CLOption option = clOptions.get(0);    assertEquals("stupid", option.getArgument(0));    assertEquals("idiot", option.getArgument(1));}
0
public void test2ArgsParse2()
{    final CLOptionDescriptor[] options = new CLOptionDescriptor[] { DEFINE };    final CLArgsParser parser = new     CLArgsParser(    new String[] { "--define", "a-b,c=d-e,f" },     options);    assertNull(parser.getErrorString(), parser.getErrorString());    final List<CLOption> clOptions = parser.getArguments();    final int size = clOptions.size();    assertEquals(1, size);    assertEquals(DEFINE_OPT, clOptions.get(0).getDescriptor().getId());    final CLOption option = clOptions.get(0);    assertEquals("a-b,c", option.getArgument(0));    assertEquals("d-e,f", option.getArgument(1));}
0
public void test2ArgsParse3()
{    final CLOptionDescriptor[] options = new CLOptionDescriptor[] { DEFINE };    final CLArgsParser parser = new CLArgsParser(new String[] { "-D", "A-b,c", "G-e,f" }, options);    assertNull(parser.getErrorString(), parser.getErrorString());    final List<CLOption> clOptions = parser.getArguments();    final int size = clOptions.size();    assertEquals(1, size);    assertEquals(DEFINE_OPT, clOptions.get(0).getDescriptor().getId());    final CLOption option = clOptions.get(0);    assertEquals("A-b,c", option.getArgument(0));    assertEquals("G-e,f", option.getArgument(1));}
0
public void test2ArgsParse4()
{    final CLOptionDescriptor[] options = new CLOptionDescriptor[] { DEFINE_MANY };    final CLArgsParser parser = new CLArgsParser(new String[] { "-Dval1=-1", "-D", "val2=-2", "--define=val-3=-3", "--define", "val4-=-4" }, options);    assertNull(parser.getErrorString(), parser.getErrorString());    final List<CLOption> clOptions = parser.getArguments();    final int size = clOptions.size();    assertEquals(4, size);    for (CLOption clOption : clOptions) {        assertEquals(DEFINE_OPT, clOption.getDescriptor().getId());    }    CLOption option;    option = clOptions.get(0);    assertEquals("val1", option.getArgument(0));    assertEquals("-1", option.getArgument(1));    option = clOptions.get(1);    assertEquals("val2", option.getArgument(0));    assertEquals("-2", option.getArgument(1));    option = clOptions.get(2);    assertEquals("val-3", option.getArgument(0));    assertEquals("-3", option.getArgument(1));    option = clOptions.get(3);    assertEquals("val4-", option.getArgument(0));    assertEquals("-4", option.getArgument(1));}
0
public void testPartParse()
{    final CLOptionDescriptor[] options = new CLOptionDescriptor[] { YOU };    final ParserControl control = new AbstractParserControl() {        @Override        public boolean isFinished(int lastOptionCode) {            return lastOptionCode == YOU_OPT;        }    };    final CLArgsParser parser = new CLArgsParser(ARGLIST1, options, control);    assertNull(parser.getErrorString(), parser.getErrorString());    final List<CLOption> clOptions = parser.getArguments();    final int size = clOptions.size();    assertEquals(size, 1);    assertEquals(clOptions.get(0).getDescriptor().getId(), YOU_OPT);}
0
public boolean isFinished(int lastOptionCode)
{    return lastOptionCode == YOU_OPT;}
0
public void test2PartParse()
{    final CLOptionDescriptor[] options1 = new CLOptionDescriptor[] { YOU };    final CLOptionDescriptor[] options2 = new CLOptionDescriptor[] { ALL, CLEAR1, CLEAR2, CLEAR3, CLEAR5 };    final ParserControl control1 = new AbstractParserControl() {        @Override        public boolean isFinished(int lastOptionCode) {            return lastOptionCode == YOU_OPT;        }    };    final CLArgsParser parser1 = new CLArgsParser(ARGLIST1, options1, control1);    assertNull(parser1.getErrorString(), parser1.getErrorString());    final List<CLOption> clOptions1 = parser1.getArguments();    final int size1 = clOptions1.size();    assertEquals(size1, 1);    assertEquals(clOptions1.get(0).getDescriptor().getId(), YOU_OPT);    final CLArgsParser parser2 = new CLArgsParser(parser1.getUnparsedArgs(), options2);    assertNull(parser2.getErrorString(), parser2.getErrorString());    final List<CLOption> clOptions2 = parser2.getArguments();    final int size2 = clOptions2.size();    assertEquals(size2, 7);    assertEquals(clOptions2.get(0).getDescriptor().getId(), 0);    assertEquals(clOptions2.get(1).getDescriptor().getId(), ALL_OPT);    assertEquals(clOptions2.get(2).getDescriptor().getId(), CLEAR1_OPT);    assertEquals(clOptions2.get(3).getDescriptor().getId(), CLEAR2_OPT);    assertEquals(clOptions2.get(4).getDescriptor().getId(), CLEAR3_OPT);    assertEquals(clOptions2.get(5).getDescriptor().getId(), CLEAR5_OPT);    assertEquals(clOptions2.get(6).getDescriptor().getId(), 0);}
0
public boolean isFinished(int lastOptionCode)
{    return lastOptionCode == YOU_OPT;}
0
public void test2PartPartialParse()
{    final CLOptionDescriptor[] options1 = new CLOptionDescriptor[] { YOU, ALL, CLEAR1 };    final CLOptionDescriptor[] options2 = new CLOptionDescriptor[] {};    final ParserControl control1 = new AbstractParserControl() {        @Override        public boolean isFinished(final int lastOptionCode) {            return lastOptionCode == CLEAR1_OPT;        }    };    final CLArgsParser parser1 = new CLArgsParser(ARGLIST1, options1, control1);    assertNull(parser1.getErrorString(), parser1.getErrorString());    final List<CLOption> clOptions1 = parser1.getArguments();    final int size1 = clOptions1.size();    assertEquals(size1, 4);    assertEquals(clOptions1.get(0).getDescriptor().getId(), YOU_OPT);    assertEquals(clOptions1.get(1).getDescriptor().getId(), 0);    assertEquals(clOptions1.get(2).getDescriptor().getId(), ALL_OPT);    assertEquals(clOptions1.get(3).getDescriptor().getId(), CLEAR1_OPT);    assertEquals("ler", parser1.getUnparsedArgs()[0]);    final CLArgsParser parser2 = new CLArgsParser(parser1.getUnparsedArgs(), options2);    assertNull(parser2.getErrorString(), parser2.getErrorString());    final List<CLOption> clOptions2 = parser2.getArguments();    final int size2 = clOptions2.size();    assertEquals(size2, 2);    assertEquals(clOptions2.get(0).getDescriptor().getId(), 0);    assertEquals(clOptions2.get(1).getDescriptor().getId(), 0);}
0
public boolean isFinished(final int lastOptionCode)
{    return lastOptionCode == CLEAR1_OPT;}
0
public void testDuplicatesFail()
{    final CLOptionDescriptor[] options = new CLOptionDescriptor[] { YOU, ALL, CLEAR1, CLEAR2, CLEAR3, CLEAR5 };    final CLArgsParser parser = new CLArgsParser(ARGLIST1, options);    assertNull(parser.getErrorString(), parser.getErrorString());}
0
public void testIncomplete2Args()
{        final CLOptionDescriptor[] options = new CLOptionDescriptor[] { DEFINE };    final CLArgsParser parser = new CLArgsParser(new String[] { "-Dstupid=" }, options);    assertNull(parser.getErrorString(), parser.getErrorString());    final List<CLOption> clOptions = parser.getArguments();    final int size = clOptions.size();    assertEquals(size, 1);    final CLOption option = clOptions.get(0);    assertEquals(option.getDescriptor().getId(), DEFINE_OPT);    assertEquals(option.getArgument(0), "stupid");    assertEquals(option.getArgument(1), "");}
0
public void testIncomplete2ArgsMixed()
{        final CLOptionDescriptor[] options = new CLOptionDescriptor[] { DEFINE, CLEAR1 };    final String[] args = new String[] { "-Dstupid=", "-c" };    final CLArgsParser parser = new CLArgsParser(args, options);    assertNull(parser.getErrorString(), parser.getErrorString());    final List<CLOption> clOptions = parser.getArguments();    final int size = clOptions.size();    assertEquals(size, 2);    assertEquals(clOptions.get(1).getDescriptor().getId(), CLEAR1_OPT);    final CLOption option = clOptions.get(0);    assertEquals(option.getDescriptor().getId(), DEFINE_OPT);    assertEquals(option.getArgument(0), "stupid");    assertEquals(option.getArgument(1), "");}
0
public void testIncomplete2ArgsMixedNoEq()
{        final CLOptionDescriptor[] options = new CLOptionDescriptor[] { DEFINE, CLEAR1 };    final String[] args = new String[] { "-DStupid", "-c" };    final CLArgsParser parser = new CLArgsParser(args, options);    assertNull(parser.getErrorString(), parser.getErrorString());    final List<CLOption> clOptions = parser.getArguments();    final int size = clOptions.size();    assertEquals(size, 2);    assertEquals(clOptions.get(1).getDescriptor().getId(), CLEAR1_OPT);    final CLOption option = clOptions.get(0);    assertEquals(option.getDescriptor().getId(), DEFINE_OPT);    assertEquals(option.getArgument(0), "Stupid");    assertEquals(option.getArgument(1), "");}
0
public void testArgumentLookup()
{    final String[] args = { "-f", "testarg" };    final CLOptionDescriptor[] options = { FILE };    final CLArgsParser parser = new CLArgsParser(args, options);    assertNull(parser.getErrorString(), parser.getErrorString());    CLOption optionById = parser.getArgumentById(FILE_OPT);    assertNotNull(optionById);    assertEquals(FILE_OPT, optionById.getDescriptor().getId());    assertEquals("testarg", optionById.getArgument());    CLOption optionByName = parser.getArgumentByName(FILE.getName());    assertNotNull(optionByName);    assertEquals(FILE_OPT, optionByName.getDescriptor().getId());    assertEquals("testarg", optionByName.getArgument());}
0
public void testNullLongForm()
{    final CLOptionDescriptor test = new CLOptionDescriptor(null, CLOptionDescriptor.ARGUMENT_DISALLOWED, 'n', "test null long form");    final String[] args = { "-n", "testarg" };    final CLOptionDescriptor[] options = { test };    final CLArgsParser parser = new CLArgsParser(args, options);    assertNull(parser.getErrorString(), parser.getErrorString());    final CLOption optionByID = parser.getArgumentById('n');    assertNotNull(optionByID);    assertEquals('n', optionByID.getDescriptor().getId());    final CLOption optionByName = parser.getArgumentByName(FILE.getName());    assertNull("Looking for non-existent option by name", optionByName);}
0
public void testNullDescription()
{    final CLOptionDescriptor test = new CLOptionDescriptor("nulltest", CLOptionDescriptor.ARGUMENT_DISALLOWED, 'n', null);    final String[] args = { "-n", "testarg" };    final CLOptionDescriptor[] options = { test };    final CLArgsParser parser = new CLArgsParser(args, options);    assertNull(parser.getErrorString(), parser.getErrorString());    final CLOption optionByID = parser.getArgumentById('n');    assertNotNull(optionByID);    assertEquals('n', optionByID.getDescriptor().getId());    final StringBuilder sb = CLUtil.describeOptions(options);    final String lineSeparator = System.getProperty("line.separator");    assertEquals("Testing display of null description", "\t-n, --nulltest" + lineSeparator, sb.toString());}
0
public void testCombinations() throws Exception
{    check(new String[] {}, "");    check(new String[] { "--none", "-0" },     "-0 -0");    check(new String[] { "--one=a", "--one", "A", "-1b", "-1=c", "-1", "d" }, "-1=[a] -1=[A] -1=[b] -1=[c] -1=[d]");    check(new String[] { "-2n=v", "-2", "N=V" }, "-2=[n, v] -2=[N, V]");    check(new String[] { "--two=n=v", "--two", "N=V" }, "-2=[n, v] -2=[N, V]");        check(new String[] { "-?",     "A", "-?=B", "-?C", "-?" }, "-? [A] -?=[B] -?=[C] -?");    check(new String[] {     "--optional=A",     "--optional",     "B",     "--optional" }, "-?=[A] -? [B] -?");}
0
private void check(String[] args, String canon)
{    final CLArgsParser parser = new CLArgsParser(args, OPTIONS);    assertNull(parser.getErrorString(), parser.getErrorString());    final List<CLOption> clOptions = parser.getArguments();    final int size = clOptions.size();    StringBuilder sb = new StringBuilder();    for (int i = 0; i < size; i++) {        if (i > 0) {            sb.append(" ");        }        sb.append(clOptions.get(i).toShortString());    }    assertEquals("Canonical form (" + size + ")", canon, sb.toString());}
0
public void testAdd1() throws Exception
{    Collection<String> treePath = Arrays.asList(new String[] { "1", "2", "3", "4" });    HashTree tree = new HashTree();        tree.add(treePath, "value");        assertEquals(1, tree.list(treePath).size());    assertEquals("value", tree.getArray(treePath)[0]);}
1
public void testEqualsAndHashCode1() throws Exception
{    HashTree tree1 = new HashTree("abcd");    HashTree tree2 = new HashTree("abcd");    HashTree tree3 = new HashTree("abcde");    HashTree tree4 = new HashTree("abcde");    assertTrue(tree1.equals(tree1));    assertTrue(tree1.equals(tree2));    assertTrue(tree2.equals(tree1));    assertTrue(tree2.equals(tree2));    assertEquals(tree1.hashCode(), tree2.hashCode());    assertTrue(tree3.equals(tree3));    assertTrue(tree3.equals(tree4));    assertTrue(tree4.equals(tree3));    assertTrue(tree4.equals(tree4));    assertEquals(tree3.hashCode(), tree4.hashCode());    assertNotSame(tree1, tree2);    assertNotSame(tree1, tree3);    assertNotSame(tree1, tree4);    assertNotSame(tree2, tree3);    assertNotSame(tree2, tree4);    assertFalse(tree1.equals(tree3));    assertFalse(tree1.equals(tree4));    assertFalse(tree2.equals(tree3));    assertFalse(tree2.equals(tree4));    assertNotNull(tree1);    assertNotNull(tree2);    tree1.add("abcd", tree3);    assertFalse(tree1.equals(tree2));        assertFalse(tree2.equals(tree1));    if (tree1.hashCode() == tree2.hashCode()) {                System.out.println("WARN: unequal HashTrees should not have equal hashCodes");    }    tree2.add("abcd", tree4);    assertTrue(tree1.equals(tree2));    assertTrue(tree2.equals(tree1));    assertEquals(tree1.hashCode(), tree2.hashCode());}
0
public void testAddObjectAndTree() throws Exception
{    ListedHashTree tree = new ListedHashTree("key");    ListedHashTree newTree = new ListedHashTree("value");    tree.add("key", newTree);    assertEquals(tree.list().size(), 1);    assertEquals("key", tree.getArray()[0]);    assertEquals(1, tree.getTree("key").list().size());    assertEquals(0, tree.getTree("key").getTree("value").size());    assertEquals(tree.getTree("key").getArray()[0], "value");    assertNotNull(tree.getTree("key").get("value"));}
0
public void testEqualsAndHashCode2() throws Exception
{    ListedHashTree tree1 = new ListedHashTree("abcd");    ListedHashTree tree2 = new ListedHashTree("abcd");    ListedHashTree tree3 = new ListedHashTree("abcde");    ListedHashTree tree4 = new ListedHashTree("abcde");    assertTrue(tree1.equals(tree1));    assertTrue(tree1.equals(tree2));    assertTrue(tree2.equals(tree1));    assertTrue(tree2.equals(tree2));    assertEquals(tree1.hashCode(), tree2.hashCode());    assertTrue(tree3.equals(tree3));    assertTrue(tree3.equals(tree4));    assertTrue(tree4.equals(tree3));    assertTrue(tree4.equals(tree4));    assertEquals(tree3.hashCode(), tree4.hashCode());    assertNotSame(tree1, tree2);    assertNotSame(tree1, tree3);    assertFalse(tree1.equals(tree3));    assertFalse(tree3.equals(tree1));    assertFalse(tree1.equals(tree4));    assertFalse(tree4.equals(tree1));    assertFalse(tree2.equals(tree3));    assertFalse(tree3.equals(tree2));    assertFalse(tree2.equals(tree4));    assertFalse(tree4.equals(tree2));    tree1.add("abcd", tree3);    assertFalse(tree1.equals(tree2));    assertFalse(tree2.equals(tree1));    tree2.add("abcd", tree4);    assertTrue(tree1.equals(tree2));    assertTrue(tree2.equals(tree1));    assertEquals(tree1.hashCode(), tree2.hashCode());    tree1.add("a1");    tree1.add("a2");    tree2.add("a2");    tree2.add("a1");    assertFalse(tree1.equals(tree2));    assertFalse(tree2.equals(tree1));    if (tree1.hashCode() == tree2.hashCode()) {                System.out.println("WARN: unequal ListedHashTrees should not have equal hashcodes");    }    tree4.add("abcdef");    assertFalse(tree3.equals(tree4));    assertFalse(tree4.equals(tree3));}
0
public void testSearch() throws Exception
{    ListedHashTree tree = new ListedHashTree();    SearchByClass<Integer> searcher = new SearchByClass<>(Integer.class);    String one = "one";    String two = "two";    Integer o = Integer.valueOf(1);    tree.add(one, o);    tree.getTree(one).add(o, two);    tree.traverse(searcher);    assertEquals(1, searcher.getSearchResults().size());}
0
public static void setup(@TempDir Path keystoreDir) throws IOException
{    keystore = keystoreDir.resolve("dummy-keystore.jks").toFile();    password = JOrphanUtils.generateRandomAlphanumericPassword(32);    KeyToolUtils.generateProxyCA(keystore, password, validity);}
0
public void testCheckKeytool() throws Exception
{    SystemCommand sc = new SystemCommand(null, null);    List<String> arguments = new ArrayList<>();        arguments.add("xyzqwas");    Assertions.assertThrows(IOException.class, () -> {        int status = sc.run(arguments);        if (status == 0 || status == 1) {            fail("Missing executable should produce exit code of 0 or 1. Actual code is " + status);        }    });}
0
public void testIPBasedCert() throws Exception
{    KeyToolUtils.generateHostCert(keystore, password, "10.1.2.3", validity);}
0
public void testDNSNameBasedCert() throws Exception
{    KeyToolUtils.generateHostCert(keystore, password, "www.example.invalid", validity);}
0
public static Collection<Object[]> data()
{    return Arrays.asList(new Object[][] { { Long.valueOf(Long.MAX_VALUE), "#N/A" }, { Long.valueOf(Long.MIN_VALUE), "#N/A" }, { Long.valueOf(0), "0" }, { null, "#N/A" }, { "invalid", "#N/A" } });}
0
public void testRendering()
{    final AtomicBoolean afterInit = new AtomicBoolean(false);    MinMaxLongRenderer renderer = new MinMaxLongRenderer("#0") {        private static final long serialVersionUID = 2L;        @Override        public void setText(String text) {            if (afterInit.get()) {                Assert.assertThat(text, CoreMatchers.is(expected));            }        }    };    afterInit.set(true);    renderer.setValue(value);}
0
public void setText(String text)
{    if (afterInit.get()) {        Assert.assertThat(text, CoreMatchers.is(expected));    }}
0
public String getA()
{    return a;}
0
public String getB()
{    return b;}
0
public String getC()
{    return c;}
0
public void init()
{    String[] headers = { "a", "b", "c" };    Functor[] readFunctors = Arrays.stream(headers).map(name -> "get" + name.toUpperCase()).map(Functor::new).toArray(n -> new Functor[n]);    Functor[] writeFunctors = new Functor[headers.length];    Class<?>[] editorClasses = new Class<?>[headers.length];    Arrays.fill(editorClasses, String.class);    model = new ObjectTableModel(headers, readFunctors, writeFunctors, editorClasses);    events = new TableModelEventBacker();}
0
public void checkAddRow()
{    model.addTableModelListener(events);    assertModel();    model.addRow(new Dummy("1", "1", "1"));    assertModel("1");    events.assertEvents(events.assertEvent().source(model).type(TableModelEvent.INSERT).column(TableModelEvent.ALL_COLUMNS).firstRow(0).lastRow(0));    model.addRow(new Dummy("2", "1", "1"));    assertModel("1", "2");    events.assertEvents(events.assertEvent().source(model).type(TableModelEvent.INSERT).column(TableModelEvent.ALL_COLUMNS).firstRow(1).lastRow(1));}
0
public void checkClear()
{        for (int i = 0; i < 5; i++) {        model.addRow(new Dummy("" + i, "" + i % 2, "" + i % 3));    }    assertModelRanges(range(0, 5));        model.addTableModelListener(events);    model.clearData();        assertModelRanges();    events.assertEvents(events.assertEvent().source(model).type(TableModelEvent.UPDATE).column(TableModelEvent.ALL_COLUMNS).firstRow(0).lastRow(Integer.MAX_VALUE));}
0
public void checkInsertRow()
{    assertModel();    model.addRow(new Dummy("3", "1", "1"));    assertModel("3");    model.addTableModelListener(events);    model.insertRow(new Dummy("1", "1", "1"), 0);    assertModel("1", "3");    events.assertEvents(events.assertEvent().source(model).type(TableModelEvent.INSERT).column(TableModelEvent.ALL_COLUMNS).firstRow(0).lastRow(0));    model.insertRow(new Dummy("2", "1", "1"), 1);    assertModel("1", "2", "3");    events.assertEvents(events.assertEvent().source(model).type(TableModelEvent.INSERT).column(TableModelEvent.ALL_COLUMNS).firstRow(1).lastRow(1));}
0
public void checkMoveRow_from_5_11_to_0()
{        for (int i = 0; i < 20; i++) {        model.addRow(new Dummy("" + i, "" + i % 2, "" + i % 3));    }    assertModelRanges(range(0, 20));        model.addTableModelListener(events);    model.moveRow(5, 11, 0);        assertModelRanges(range(5, 11), range(0, 5), range(11, 20));    events.assertEvents(events.assertEvent().source(model).type(TableModelEvent.UPDATE).column(TableModelEvent.ALL_COLUMNS).firstRow(0).lastRow(Integer.MAX_VALUE));}
0
public void checkMoveRow_from_0_6_to_0()
{        for (int i = 0; i < 20; i++) {        model.addRow(new Dummy("" + i, "" + i % 2, "" + i % 3));    }    assertModelRanges(range(0, 20));        model.addTableModelListener(events);    model.moveRow(0, 6, 0);        assertModelRanges(range(0, 20));    events.assertEvents(events.assertEvent().source(model).type(TableModelEvent.UPDATE).column(TableModelEvent.ALL_COLUMNS).firstRow(0).lastRow(Integer.MAX_VALUE));}
0
public void checkMoveRow_from_0_6_to_10()
{        for (int i = 0; i < 20; i++) {        model.addRow(new Dummy("" + i, "" + i % 2, "" + i % 3));    }    assertModelRanges(range(0, 20));        model.addTableModelListener(events);    model.moveRow(0, 6, 10);        assertModelRanges(range(6, 16), range(0, 6), range(16, 20));    events.assertEvents(events.assertEvent().source(model).type(TableModelEvent.UPDATE).column(TableModelEvent.ALL_COLUMNS).firstRow(0).lastRow(Integer.MAX_VALUE));}
0
private void assertModelRanges(IntStream... ranges)
{    IntStream ints = IntStream.empty();    for (IntStream range : ranges) {        ints = IntStream.concat(ints, range);    }    assertModel(ints.mapToObj(i -> "" + i).toArray(n -> new String[n]));}
0
private void assertModel(String... as)
{    assertEquals("model row count", as.length, model.getRowCount());    for (int row = 0; row < as.length; row++) {        assertEquals(format("model[%d,0]", row), as[row], model.getValueAt(row, 0));    }}
0
public void createModelAndSorter()
{    String[] headers = { "key", "value", "object" };    Functor[] readFunctors = { new Functor("getKey"), new Functor("getValue"), new Functor("getValue") };    Functor[] writeFunctors = { null, null, null };    Class<?>[] editorClasses = { String.class, Integer.class, Object.class };    model = new ObjectTableModel(headers, readFunctors, writeFunctors, editorClasses);    sorter = new ObjectTableSorter(model);    List<Entry<String, Integer>> data = asList(b2(), a3(), d4(), c1());    data.forEach(model::addRow);}
0
public void noSorting()
{    List<SimpleImmutableEntry<String, Integer>> expected = asList(b2(), a3(), d4(), c1());    assertRowOrderAndIndexes(expected);}
0
public void sortKeyAscending()
{    sorter.setSortKey(new SortKey(0, SortOrder.ASCENDING));    List<SimpleImmutableEntry<String, Integer>> expected = asList(a3(), b2(), c1(), d4());    assertRowOrderAndIndexes(expected);}
0
public void sortKeyDescending()
{    sorter.setSortKey(new SortKey(0, SortOrder.DESCENDING));    List<SimpleImmutableEntry<String, Integer>> expected = asList(d4(), c1(), b2(), a3());    assertRowOrderAndIndexes(expected);}
0
public void sortValueAscending()
{    sorter.setSortKey(new SortKey(1, SortOrder.ASCENDING));    List<SimpleImmutableEntry<String, Integer>> expected = asList(c1(), b2(), a3(), d4());    assertRowOrderAndIndexes(expected);}
0
public void sortValueDescending()
{    sorter.setSortKey(new SortKey(1, SortOrder.DESCENDING));    List<SimpleImmutableEntry<String, Integer>> expected = asList(d4(), a3(), b2(), c1());    assertRowOrderAndIndexes(expected);}
0
public void fixLastRowWithAscendingKey()
{    sorter.fixLastRow().setSortKey(new SortKey(0, SortOrder.ASCENDING));    List<SimpleImmutableEntry<String, Integer>> expected = asList(a3(), b2(), d4(), c1());    assertRowOrderAndIndexes(expected);}
0
public void fixLastRowWithDescendingKey()
{    sorter.fixLastRow().setSortKey(new SortKey(0, SortOrder.DESCENDING));    List<SimpleImmutableEntry<String, Integer>> expected = asList(d4(), b2(), a3(), c1());    assertRowOrderAndIndexes(expected);}
0
public void fixLastRowWithAscendingValue()
{    sorter.fixLastRow().setSortKey(new SortKey(1, SortOrder.ASCENDING));    List<SimpleImmutableEntry<String, Integer>> expected = asList(b2(), a3(), d4(), c1());    assertRowOrderAndIndexes(expected);}
0
public void fixLastRowWithDescendingValue()
{    sorter.fixLastRow().setSortKey(new SortKey(1, SortOrder.DESCENDING));    List<SimpleImmutableEntry<String, Integer>> expected = asList(d4(), a3(), b2(), c1());    assertRowOrderAndIndexes(expected);}
0
public void customKeyOrder()
{    HashMap<String, Integer> customKeyOrder = Stream.of("a", "c", "b", "d").reduce(new HashMap<String, Integer>(), (map, key) -> {        map.put(key, map.size());        return map;    }, (a, b) -> a);    Comparator<String> customKeyComparator = (a, b) -> customKeyOrder.get(a).compareTo(customKeyOrder.get(b));    sorter.setValueComparator(0, customKeyComparator).setSortKey(new SortKey(0, SortOrder.ASCENDING));    List<SimpleImmutableEntry<String, Integer>> expected = asList(a3(), c1(), b2(), d4());    assertRowOrderAndIndexes(expected);}
0
private ObjectTableModel createTableModel(final String name, final Class<?> klass)
{    return new ObjectTableModel(new String[] { name }, new Functor[] { null }, new Functor[] { null }, new Class<?>[] { klass });}
0
public void getDefaultComparatorForNullClass()
{    ObjectTableSorter sorter = new ObjectTableSorter(createTableModel("null", null));    assertThat(sorter.getValueComparator(0), is(nullValue()));}
0
public void getDefaultComparatorForStringClass()
{    ObjectTableSorter sorter = new ObjectTableSorter(createTableModel("string", String.class));    assertThat(sorter.getValueComparator(0), is(CoreMatchers.notNullValue()));}
0
public void getDefaultComparatorForIntegerClass()
{    ObjectTableSorter sorter = new ObjectTableSorter(createTableModel("integer", Integer.class));    assertThat(sorter.getValueComparator(0), is(CoreMatchers.notNullValue()));}
0
public void getDefaultComparatorForObjectClass()
{    ObjectTableSorter sorter = new ObjectTableSorter(createTableModel("object", Object.class));    assertThat(sorter.getValueComparator(0), is(nullValue()));}
0
public void toggleSortOrder_none()
{    assertSame(emptyList(), sorter.getSortKeys());}
0
public void toggleSortOrder_0()
{    sorter.toggleSortOrder(0);    assertEquals(singletonList(new SortKey(0, SortOrder.ASCENDING)), sorter.getSortKeys());}
0
public void toggleSortOrder_0_1()
{    sorter.toggleSortOrder(0);    sorter.toggleSortOrder(1);    assertEquals(singletonList(new SortKey(1, SortOrder.ASCENDING)), sorter.getSortKeys());}
0
public void toggleSortOrder_0_0()
{    sorter.toggleSortOrder(0);    sorter.toggleSortOrder(0);    assertEquals(singletonList(new SortKey(0, SortOrder.DESCENDING)), sorter.getSortKeys());}
0
public void toggleSortOrder_0_0_0()
{    sorter.toggleSortOrder(0);    sorter.toggleSortOrder(0);    sorter.toggleSortOrder(0);    assertEquals(singletonList(new SortKey(0, SortOrder.ASCENDING)), sorter.getSortKeys());}
0
public void toggleSortOrder_2()
{    sorter.toggleSortOrder(2);    assertSame(emptyList(), sorter.getSortKeys());}
0
public void toggleSortOrder_0_2()
{    sorter.toggleSortOrder(0);    sorter.toggleSortOrder(2);    assertSame(emptyList(), sorter.getSortKeys());}
0
public void setSortKeys_none()
{    sorter.setSortKeys(new ArrayList<>());    assertSame(Collections.emptyList(), sorter.getSortKeys());}
0
public void setSortKeys_withSortedThenUnsorted()
{    sorter.setSortKeys(singletonList(new SortKey(0, SortOrder.ASCENDING)));    sorter.setSortKeys(new ArrayList<>());    assertSame(Collections.emptyList(), sorter.getSortKeys());}
0
public void setSortKeys_single()
{    List<SortKey> keys = singletonList(new SortKey(0, SortOrder.ASCENDING));    sorter.setSortKeys(keys);    assertThat(sorter.getSortKeys(), allOf(is(not(sameInstance(keys))), is(equalTo(keys))));}
0
public void setSortKeys_many()
{    expectedException.expect(IllegalArgumentException.class);    sorter.setSortKeys(asList(new SortKey(0, SortOrder.ASCENDING), new SortKey(1, SortOrder.ASCENDING)));}
0
public void setSortKeys_invalidColumn()
{    expectedException.expect(IllegalArgumentException.class);    sorter.setSortKeys(Collections.singletonList(new SortKey(2, SortOrder.ASCENDING)));}
0
protected List<Entry<String, Integer>> actual()
{    return IntStream.range(0, sorter.getViewRowCount()).map(sorter::convertRowIndexToModel).mapToObj(modelIndex -> (Entry<String, Integer>) sorter.getModel().getObjectListAsList().get(modelIndex)).collect(Collectors.toList());}
0
protected SimpleImmutableEntry<String, Integer> d4()
{    return new AbstractMap.SimpleImmutableEntry<>("d", 4);}
0
protected SimpleImmutableEntry<String, Integer> c1()
{    return new AbstractMap.SimpleImmutableEntry<>("c", 1);}
0
protected SimpleImmutableEntry<String, Integer> b2()
{    return new AbstractMap.SimpleImmutableEntry<>("b", 2);}
0
protected SimpleImmutableEntry<String, Integer> a3()
{    return new AbstractMap.SimpleImmutableEntry<>("a", 3);}
0
protected void assertRowOrderAndIndexes(List<SimpleImmutableEntry<String, Integer>> expected)
{    assertEquals(expected, actual());    assertRowIndexes();}
0
protected void assertRowIndexes()
{    IntStream.range(0, sorter.getViewRowCount()).forEach(viewIndex -> {        int modelIndex = sorter.convertRowIndexToModel(viewIndex);        errorCollector.checkThat(format("view(%d) model(%d)", viewIndex, modelIndex), sorter.convertRowIndexToView(modelIndex), CoreMatchers.equalTo(viewIndex));    });}
0
public EventAssertion add(ObjIntConsumer<TableModelEvent> assertion)
{    assertions.add(assertion);    return this;}
0
public EventAssertion addInt(String name, int expected, ToIntFunction<TableModelEvent> f)
{    return add((e, i) -> assertEquals(format("%s[%d]", name, i), expected, f.applyAsInt(e)));}
0
public EventAssertion source(Object expected)
{    return add((e, i) -> assertSame(format("source[%d]", i), expected, e.getSource()));}
0
public EventAssertion type(int expected)
{    return addInt("type", expected, TableModelEvent::getType);}
0
public EventAssertion column(int expected)
{    return addInt("column", expected, TableModelEvent::getColumn);}
0
public EventAssertion firstRow(int expected)
{    return addInt("firstRow", expected, TableModelEvent::getFirstRow);}
0
public EventAssertion lastRow(int expected)
{    return addInt("lastRow", expected, TableModelEvent::getLastRow);}
0
protected void assertEvent(TableModelEvent event, int index)
{    assertions.forEach(a -> a.accept(event, index));}
0
public void tableChanged(TableModelEvent e)
{    events.add(e);}
0
public Deque<TableModelEvent> getEvents()
{    return events;}
0
public EventAssertion assertEvent()
{    return new EventAssertion();}
0
public void assertEvents(EventAssertion... assertions)
{    try {        assertEquals("event count", assertions.length, events.size());        int i = 0;        for (TableModelEvent event : events) {            assertions[i].assertEvent(event, i++);        }    } finally {        events.clear();    }}
0
public void setUp()
{    calc = new StatCalculatorLong();}
0
public void testPercentagePoint() throws Exception
{    long[] values = new long[] { 10L, 9L, 5L, 6L, 1L, 3L, 8L, 2L, 7L, 4L };    for (long l : values) {        calc.addValue(l);    }    assertEquals(10, calc.getCount());    assertEquals(9, calc.getPercentPoint(0.8999999).intValue());}
0
public void testPercentagePointBug() throws Exception
{    long[] values = new long[] { 10L, 9L, 5L, 6L, 1L, 3L, 8L, 2L, 7L, 4L };    DescriptiveStatistics statistics = new DescriptiveStatistics();    for (long l : values) {        calc.addValue(l);        statistics.addValue(l);    }    assertEquals(9, calc.getPercentPoint(0.8999999).intValue());        assertEquals(Math.round(statistics.getPercentile(90)), calc.getPercentPoint(0.9).intValue());}
0
public void testCalculation()
{    assertEquals(Long.MIN_VALUE, calc.getMax().longValue());    assertEquals(Long.MAX_VALUE, calc.getMin().longValue());    calc.addValue(18);    calc.addValue(10);    calc.addValue(9);    calc.addValue(11);    calc.addValue(28);    calc.addValue(3);    calc.addValue(30);    calc.addValue(15);    calc.addValue(15);    calc.addValue(21);    assertEquals(16, (int) calc.getMean());    assertEquals(8.0622577F, (float) calc.getStandardDeviation(), 0F);    assertEquals(30, calc.getMax().intValue());    assertEquals(3, calc.getMin().intValue());    assertEquals(15, calc.getMedian().intValue());}
0
public void testMedianBug61071()
{    long[] values = new long[] { 10L, 20L, 30L, 40L, 50L, 60L, 80L, 90L };    DescriptiveStatistics statistics = new DescriptiveStatistics();    for (long l : values) {        calc.addValue(l);        statistics.addValue(l);    }    assertEquals((int) statistics.getPercentile(50), calc.getMedian().intValue());}
0
public void testLong()
{    calc.addValue(0L);    calc.addValue(2L);    calc.addValue(2L);    final Long long0 = Long.valueOf(0);    final Long long2 = Long.valueOf(2);    assertEquals(long2, calc.getMax());    assertEquals(long0, calc.getMin());    Map<Number, Number[]> map = calc.getDistribution();    assertTrue(map.containsKey(long0));    assertTrue(map.containsKey(long2));}
0
public void testInteger()
{    StatCalculatorInteger calci = new StatCalculatorInteger();    assertEquals(Integer.MIN_VALUE, calci.getMax().intValue());    assertEquals(Integer.MAX_VALUE, calci.getMin().intValue());    calci.addValue(0);    calci.addValue(2);    calci.addValue(2);    assertEquals(Integer.valueOf(2), calci.getMax());    assertEquals(Integer.valueOf(0), calci.getMin());    Map<Number, Number[]> map = calci.getDistribution();    assertTrue(map.containsKey(Integer.valueOf(0)));    assertTrue(map.containsKey(Integer.valueOf(2)));}
0
public void testBug52125_1()
{        calc.addValue(1L);    calc.addValue(2L);    calc.addValue(3L);    calc.addValue(2L);    calc.addValue(2L);    calc.addValue(2L);    assertEquals(6, calc.getCount());    assertEquals(12.0, calc.getSum(), 0.000000000001);    assertEquals(0.5773502691896255, calc.getStandardDeviation(), 0.000000000000001);}
0
public void testBug52125_2()
{        calc.addValue(1L);    calc.addValue(2L);    calc.addValue(3L);    calc.addEachValue(2L, 3);    assertEquals(6, calc.getCount());    assertEquals(12.0, calc.getSum(), 0.000000000001);    assertEquals(0.5773502691896255, calc.getStandardDeviation(), 0.000000000000001);}
0
public void testBug52125_2A()
{        calc.addValue(1L);    calc.addValue(2L);    calc.addValue(3L);    calc.addValue(6L, 3);    assertEquals(6, calc.getCount());    assertEquals(12.0, calc.getSum(), 0.00000001);    assertEquals(0.5773502691896255, calc.getStandardDeviation(), 0.000000000000001);}
0
public void testBug52125_3()
{        calc.addValue(1L);    calc.addValue(2L);    calc.addValue(3L);    StatCalculatorLong calc2 = new StatCalculatorLong();    calc2.addValue(2L);    calc2.addValue(2L);    calc2.addValue(2L);    calc.addAll(calc2);    assertEquals(6, calc.getCount());    assertEquals(12.0, calc.getSum(), 0.000000000001);    assertEquals(0.5773502691896255, calc.getStandardDeviation(), 0.000000000000001);}
0
public void testConstructString() throws JMeterException
{    String dummy = (String) ClassTools.construct("java.lang.String");    assertNotNull(dummy);    assertEquals("", dummy);}
0
public void testConstructStringInt() throws JMeterException
{    Integer dummy = (Integer) ClassTools.construct("java.lang.Integer", 23);    assertNotNull(dummy);    assertEquals(Integer.valueOf(23), dummy);}
0
public void testConstructStringString() throws JMeterException
{    String dummy = (String) ClassTools.construct("java.lang.String", "hello");    assertNotNull(dummy);    assertEquals("hello", dummy);}
0
public void testInvoke() throws SecurityException, IllegalArgumentException, JMeterException
{    Dummy dummy = new Dummy();    ClassTools.invoke(dummy, "callMe");    assertTrue(dummy.wasCalled());}
0
public boolean wasCalled()
{    return this.called;}
0
public void callMe()
{    this.called = true;}
0
public void testGetCalendarObjectCalendarWithTimeAndNullDefault()
{    Calendar cal = new GregorianCalendar();    Date time = cal.getTime();    assertEquals(cal, Converter.getCalendar(time, null));}
0
public void testGetCalendarObjectCalendarWithNullAndCalendarAsDefault()
{    Calendar cal = new GregorianCalendar();    assertEquals(cal, Converter.getCalendar(null, cal));}
0
public void testGetCalendarObjectCalendarWithValidStringAndNullDefault()
{    Calendar cal = new GregorianCalendar();    cal.set(Calendar.HOUR_OF_DAY, 0);    cal.set(Calendar.MINUTE, 0);    cal.set(Calendar.SECOND, 0);    cal.set(Calendar.MILLISECOND, 0);    Date time = cal.getTime();    for (int formatId : new int[] { DateFormat.SHORT, DateFormat.MEDIUM, DateFormat.LONG, DateFormat.FULL }) {        DateFormat formatter = DateFormat.getDateInstance(formatId);        assertEquals(cal, Converter.getCalendar(formatter.format(time), null));    }}
0
public void testGetCalendarObjectCalendarWithInvalidStringAndNullDefault()
{    assertNull(Converter.getCalendar("invalid date", null));}
0
public void testGetDateObjectDateWithTimeAndNullDefault()
{    Date time = new Date();    assertEquals(time, Converter.getDate(time, null));}
0
public void testGetDateObjectDateWithNullAndDateAsDefault()
{    Date date = new Date();    assertEquals(date, Converter.getDate(null, date));}
0
public void testGetDateObjectDateWithValidStringAndNullDefault()
{    Calendar cal = new GregorianCalendar();    cal.set(Calendar.HOUR_OF_DAY, 0);    cal.set(Calendar.MINUTE, 0);    cal.set(Calendar.SECOND, 0);    cal.set(Calendar.MILLISECOND, 0);    Date time = cal.getTime();    for (int formatId : new int[] { DateFormat.SHORT, DateFormat.MEDIUM, DateFormat.LONG, DateFormat.FULL }) {        DateFormat formatter = DateFormat.getDateInstance(formatId);        assertEquals(time, Converter.getDate(formatter.format(time), null));    }}
0
public void testGetDateObjectDateWithInvalidStringAndNullDefault()
{    assertNull(Converter.getDate("invalid date", null));}
0
public void testReplace1()
{    assertEquals("xyzdef", JOrphanUtils.replaceFirst("abcdef", "abc", "xyz"));}
0
public void testReplace2()
{    assertEquals("axyzdef", JOrphanUtils.replaceFirst("abcdef", "bc", "xyz"));}
0
public void testReplace3()
{    assertEquals("abcxyz", JOrphanUtils.replaceFirst("abcdef", "def", "xyz"));}
0
public void testReplace4()
{    assertEquals("abcdef", JOrphanUtils.replaceFirst("abcdef", "bce", "xyz"));}
0
public void testReplace5()
{    assertEquals("abcdef", JOrphanUtils.replaceFirst("abcdef", "alt=\"\" ", ""));}
0
public void testReplace6()
{    assertEquals("abcdef", JOrphanUtils.replaceFirst("abcdef", "alt=\"\" ", ""));}
0
public void testReplace7()
{    assertEquals("alt=\"\"", JOrphanUtils.replaceFirst("alt=\"\"", "alt=\"\" ", ""));}
0
public void testReplace8()
{    assertEquals("img src=xyz ", JOrphanUtils.replaceFirst("img src=xyz alt=\"\" ", "alt=\"\" ", ""));}
0
public void testSplitStringStringTrueWithTrailingSplitChars()
{            assertThat("Ignore trailing split chars", JOrphanUtils.split("a,bc,,", ",", true), CoreMatchers.equalTo(new String[] { "a", "bc" }));}
0
public void testSplitStringStringFalseWithTrailingSplitChars()
{        assertThat("Include the trailing split chars", JOrphanUtils.split("a,bc,,", ",", false), CoreMatchers.equalTo(new String[] { "a", "bc", "", "" }));}
0
public void testSplitStringStringTrueWithLeadingSplitChars()
{        assertThat("Ignore leading split chars", JOrphanUtils.split(",,a,bc", ",", true), CoreMatchers.equalTo(new String[] { "a", "bc" }));}
0
public void testSplitStringStringFalseWithLeadingSplitChars()
{        assertThat("Include leading split chars", JOrphanUtils.split(",,a,bc", ",", false), CoreMatchers.equalTo(new String[] { "", "", "a", "bc" }));}
0
public void testSplit3()
{        String in = "a,bc,,";        String[] out = JOrphanUtils.split(in, ",", true);    assertThat(out, CoreMatchers.equalTo(new String[] { "a", "bc" }));    out = JOrphanUtils.split(in, ",", false);    assertThat(out, CoreMatchers.equalTo(new String[] { "a", "bc", "", "" }));}
0
public void testSplitStringStringTrueWithLeadingComplexSplitCharacters()
{        assertThat(JOrphanUtils.split(" , ,a ,bc", " ,", true), CoreMatchers.equalTo(new String[] { "a", "bc" }));}
0
public void testSplitStringStringFalseWithLeadingComplexSplitCharacters()
{        assertThat(JOrphanUtils.split(" , ,a ,bc", " ,", false), CoreMatchers.equalTo(new String[] { "", "", "a", "bc" }));}
0
public void testSplitStringStringTrueTruncate() throws Exception
{    assertThat(JOrphanUtils.split("a;,b;,;,;,d;,e;,;,f", ";,", true), CoreMatchers.equalTo(new String[] { "a", "b", "d", "e", "f" }));}
0
public void testSplitStringStringFalseTruncate() throws Exception
{    assertThat(JOrphanUtils.split("a;,b;,;,;,d;,e;,;,f", ";,", false), CoreMatchers.equalTo(new String[] { "a", "b", "", "", "d", "e", "", "f" }));}
0
public void testSplitStringStringTrueDoubledSplitChar() throws Exception
{    assertThat(JOrphanUtils.split("a;;b;;;;;;d;;e;;;;f", ";;", true), CoreMatchers.equalTo(new String[] { "a", "b", "d", "e", "f" }));}
0
public void testSplitStringStringFalseDoubledSplitChar() throws Exception
{    assertThat(JOrphanUtils.split("a;;b;;;;;;d;;e;;;;f", ";;", false), CoreMatchers.equalTo(new String[] { "a", "b", "", "", "d", "e", "", "f" }));}
0
public void testEmpty()
{    String[] out = JOrphanUtils.split("", ",", false);    assertEquals(0, out.length);}
0
public void testSplitSSSSingleDelimiterWithDefaultValue()
{        assertThat(JOrphanUtils.split("a,bc,,", ",", "?"), CoreMatchers.equalTo(new String[] { "a", "bc", "?", "?" }));}
0
public void testSplitSSSSingleDelimiterWithEmptyValue()
{        assertThat(JOrphanUtils.split("a,bc,,", ",", ""), CoreMatchers.equalTo(new String[] { "a", "bc", "", "" }));}
0
public void testSplitSSSEmptyDelimiter()
{        String in = "a,bc,,";    assertThat(JOrphanUtils.split(in, "", "?"), CoreMatchers.equalTo(new String[] { in }));}
0
public void testSplitSSSMultipleDelimCharsWithDefaultValue()
{        assertThat(JOrphanUtils.split("a,b;c,,", ",;", "?"), CoreMatchers.equalTo(new String[] { "a", "b", "c", "?", "?" }));}
0
public void testSplitSSSMultipleDelimCharsWithEmptyValue()
{        assertThat(JOrphanUtils.split("a,b;c,,", ",;", ""), CoreMatchers.equalTo(new String[] { "a", "b", "c", "", "" }));}
0
public void testSplitSSSSameDelimiterAsDefaultValue()
{    assertThat(JOrphanUtils.split("a,bc,,", ",", ","), CoreMatchers.equalTo(new String[] { "a", "bc", ",", "," }));}
0
public void testSplitNullStringString()
{    JOrphanUtils.split(null, ",", "?");}
0
public void testSplitStringNullString()
{    JOrphanUtils.split("a,bc,,", null, "?");}
0
public void testSplitStringStringNullWithSingleDelimiter()
{    assertThat(JOrphanUtils.split("a,bc,,", ",", null), CoreMatchers.equalTo(new String[] { "a", "bc" }));}
0
public void testSplitStringStringNullWithMultipleDelimiter()
{    assertThat(JOrphanUtils.split("a,;bc,;,", ",;", null), CoreMatchers.equalTo(new String[] { "a", "bc" }));}
0
public void testSplitSSSWithEmptyInput()
{    String[] out = JOrphanUtils.split("", ",", "x");    assertEquals(0, out.length);}
0
public void testSplitSSSWithEmptyDelimiter()
{    final String in = "a,;bc,;,";    assertThat(JOrphanUtils.split(in, "", "x"), CoreMatchers.equalTo(new String[] { in }));}
0
public void testreplaceAllChars()
{    assertEquals("", JOrphanUtils.replaceAllChars("", ' ', "+"));    assertEquals("source", JOrphanUtils.replaceAllChars("source", ' ', "+"));    assertEquals("so+rce", JOrphanUtils.replaceAllChars("source", 'u', "+"));    assertEquals("+so+urc+", JOrphanUtils.replaceAllChars("esoeurce", 'e', "+"));    assertEquals("AZAZsoAZurcAZ", JOrphanUtils.replaceAllChars("eesoeurce", 'e', "AZ"));    assertEquals("A+B++C+", JOrphanUtils.replaceAllChars("A B  C ", ' ', "+"));    assertEquals("A%20B%20%20C%20", JOrphanUtils.replaceAllChars("A B  C ", ' ', "%20"));}
0
public void testTrim()
{    assertEquals("", JOrphanUtils.trim("", " ;"));    assertEquals("", JOrphanUtils.trim(" ", " ;"));    assertEquals("", JOrphanUtils.trim("; ", " ;"));    assertEquals("", JOrphanUtils.trim(";;", " ;"));    assertEquals("", JOrphanUtils.trim("  ", " ;"));    assertEquals("abc", JOrphanUtils.trim("abc ;", " ;"));}
0
public void testGetByteArraySlice() throws Exception
{    Assert.assertArrayEquals(new byte[] { 1, 2 }, JOrphanUtils.getByteArraySlice(new byte[] { 0, 1, 2, 3 }, 1, 2));}
0
public void testbaToHexString()
{    assertEquals("", JOrphanUtils.baToHexString(new byte[] {}));    assertEquals("00", JOrphanUtils.baToHexString(new byte[] { 0 }));    assertEquals("0f107f8081ff", JOrphanUtils.baToHexString(new byte[] { 15, 16, 127, -128, -127, -1 }));}
0
public void testBaToHexStringSeparator()
{    assertEquals("", JOrphanUtils.baToHexString(new byte[] {}, '-'));    assertEquals("00", JOrphanUtils.baToHexString(new byte[] { 0 }, '-'));    assertEquals("0f-10-7f-80-81-ff", JOrphanUtils.baToHexString(new byte[] { 15, 16, 127, -128, -127, -1 }, '-'));}
0
public void testbaToByte() throws Exception
{    assertEqualsArray(new byte[] {}, JOrphanUtils.baToHexBytes(new byte[] {}));    assertEqualsArray(new byte[] { '0', '0' }, JOrphanUtils.baToHexBytes(new byte[] { 0 }));    assertEqualsArray("0f107f8081ff".getBytes(StandardCharsets.UTF_8), JOrphanUtils.baToHexBytes(new byte[] { 15, 16, 127, -128, -127, -1 }));}
0
private void assertEqualsArray(byte[] expected, byte[] actual)
{    assertEquals("arrays must be same length", expected.length, actual.length);    for (int i = 0; i < expected.length; i++) {        assertEquals("values must be the same for index: " + i, expected[i], actual[i]);    }}
0
public void testNullifyIfEmptyTrimmed()
{    Assert.assertNull(JOrphanUtils.nullifyIfEmptyTrimmed(null));    Assert.assertNull(JOrphanUtils.nullifyIfEmptyTrimmed("\u0001"));    assertEquals("1234", JOrphanUtils.nullifyIfEmptyTrimmed("1234"));}
0
public void testIsBlank()
{    assertTrue(JOrphanUtils.isBlank(""));    assertTrue(JOrphanUtils.isBlank(null));    assertTrue(JOrphanUtils.isBlank("    "));    assertFalse(JOrphanUtils.isBlank(" zdazd dzd "));}
0
public void testRightAlign()
{    StringBuilder in = new StringBuilder("AZE");    assertEquals("   AZE", JOrphanUtils.rightAlign(in, 6).toString());    in = new StringBuilder("AZERTY");    assertEquals("AZERTY", JOrphanUtils.rightAlign(in, 6).toString());    in = new StringBuilder("baulpismuth");    assertEquals("baulpismuth", JOrphanUtils.rightAlign(in, 6).toString());    in = new StringBuilder("A");    assertEquals("       A", JOrphanUtils.rightAlign(in, 8).toString());    assertEquals("                                 foo", JOrphanUtils.rightAlign(new StringBuilder("foo"), 39).toString());}
0
public void testLeftAlign()
{    assertEquals("foo  ", JOrphanUtils.leftAlign(new StringBuilder("foo"), 5).toString());    assertEquals("foo", JOrphanUtils.leftAlign(new StringBuilder("foo"), 2).toString());    assertEquals("foo                                 ", JOrphanUtils.leftAlign(new StringBuilder("foo"), 39).toString());}
0
public void testBooleanToSTRING()
{    assertEquals("TRUE", JOrphanUtils.booleanToSTRING(true));    assertEquals("FALSE", JOrphanUtils.booleanToSTRING(false));}
0
public void testReplaceAllWithRegexWithSearchValueContainedInReplaceValue()
{        Assert.assertArrayEquals(new Object[] { "abcd", 1 }, JOrphanUtils.replaceAllWithRegex("abc", "abc", "abcd", true));}
0
public void testReplaceAllWithRegex()
{    Assert.assertArrayEquals(new Object[] { "toto", 0 }, JOrphanUtils.replaceAllWithRegex("toto", "ti", "ta", true));    Assert.assertArrayEquals(new Object[] { "toto", 0 }, JOrphanUtils.replaceAllWithRegex("toto", "TO", "TI", true));    Assert.assertArrayEquals(new Object[] { "TITI", 2 }, JOrphanUtils.replaceAllWithRegex("toto", "TO", "TI", false));    Assert.assertArrayEquals(new Object[] { "TITI", 2 }, JOrphanUtils.replaceAllWithRegex("toto", "to", "TI", true));    Assert.assertArrayEquals(new Object[] { "TITIti", 2 }, JOrphanUtils.replaceAllWithRegex("tototi", "to", "TI", true));    Assert.assertArrayEquals(new Object[] { "TOTIti", 1 }, JOrphanUtils.replaceAllWithRegex("TOtoti", "to", "TI", true));    Assert.assertArrayEquals(new Object[] { "TOTI", 1 }, JOrphanUtils.replaceAllWithRegex("TOtoti", "to.*", "TI", true));    Assert.assertArrayEquals(new Object[] { "TOTI", 1 }, JOrphanUtils.replaceAllWithRegex("TOtoti", "to.*ti", "TI", true));    Assert.assertArrayEquals(new Object[] { "TOTITITITIaTITITIti", 7 }, JOrphanUtils.replaceAllWithRegex("TO1232a123ti", "[0-9]", "TI", true));    Assert.assertArrayEquals(new Object[] { "TOTIaTIti", 2 }, JOrphanUtils.replaceAllWithRegex("TO1232a123ti", "[0-9]+", "TI", true));    Assert.assertArrayEquals(new Object[] { "TO${var}2a${var}ti", 2 }, JOrphanUtils.replaceAllWithRegex("TO1232a123ti", "123", "${var}", true));    Assert.assertArrayEquals(new Object[] { "TO${var}2a${var}ti${var2}", 2 }, JOrphanUtils.replaceAllWithRegex("TO1232a123ti${var2}", "123", "${var}", true));}
0
public void testReplaceValueWithNullValue()
{    Assert.assertThat(Integer.valueOf(JOrphanUtils.replaceValue(null, null, false, null, null)), CoreMatchers.is(Integer.valueOf(0)));}
0
public void testReplaceValueWithValidValueAndValidSetter()
{    Holder h = new Holder();    Assert.assertThat(Integer.valueOf(JOrphanUtils.replaceValue("\\d+", "${port}", true, "80", s -> h.value = s)), CoreMatchers.is(Integer.valueOf(1)));    Assert.assertThat(h.value, CoreMatchers.is("${port}"));}
0
public void testReplaceValueWithNullSetterThatGetsCalled()
{    JOrphanUtils.replaceValue("\\d+", "${port}", true, "80", null);}
0
public void testUnsplit()
{    assertEquals("", JOrphanUtils.unsplit(new Object[] { null, null }, 0));    assertEquals("11", JOrphanUtils.unsplit(new Object[] { null, 1 }, 1));    assertEquals("-26738698", JOrphanUtils.unsplit(new Object[] { -26_738_698 }, 1));}
0
public void testGenerateRandomAlphanumericPassword20()
{    assertThat(JOrphanUtils.generateRandomAlphanumericPassword(20), Matchers.matchesPattern("[A-Za-z0-9]{20}"));}
0
public void addURL(URL url)
{    super.addURL(url);}
0
public static void updateLoader(URL[] urls)
{    DynamicClassLoader loader = (DynamicClassLoader) Thread.currentThread().getContextClassLoader();    for (URL url : urls) {        loader.addURL(url);    }}
0
private static File[] listJars(File dir)
{    if (dir.isDirectory()) {        return dir.listFiles((f, name) -> {            if (name.endsWith(".jar")) {                                File jar = new File(f, name);                return jar.isFile() && jar.canRead();            }            return false;        });    }    return new File[0];}
0
public static void addURL(String path) throws MalformedURLException
{    File furl = new File(path);        loader.addURL(furl.toURI().toURL());    File[] jars = listJars(furl);    for (File jar : jars) {                loader.addURL(jar.toURI().toURL());    }}
0
public static void addURL(URL url)
{    loader.addURL(url);}
0
public static void addPath(String path) throws MalformedURLException
{    File file = new File(path);        if (file.isDirectory() && !path.endsWith("/")) {                        file = new File(path + "/");    }        loader.addURL(file.toURI().toURL());    StringBuilder sb = new StringBuilder(System.getProperty(JAVA_CLASS_PATH));    sb.append(CLASSPATH_SEPARATOR);    sb.append(path);    File[] jars = listJars(file);    for (File jar : jars) {                loader.addURL(jar.toURI().toURL());        sb.append(CLASSPATH_SEPARATOR);        sb.append(jar.getPath());    }        System.setProperty(JAVA_CLASS_PATH, sb.toString());}
0
public static String getJMeterDir()
{    return JMETER_INSTALLATION_DIRECTORY;}
0
public static void main(String[] args)
{    if (!EXCEPTIONS_IN_INIT.isEmpty()) {                System.err.println("Configuration error during init, see exceptions:" + exceptionsToString(EXCEPTIONS_IN_INIT));    } else {        Thread.currentThread().setContextClassLoader(loader);        setLoggingProperties(args);        try {                        if (System.getProperty(HEADLESS_MODE_PROPERTY) == null && shouldBeHeadless(args)) {                System.setProperty(HEADLESS_MODE_PROPERTY, "true");            }                        Class<?> initialClass = loader.loadClass("org.apache.jmeter.JMeter");            Object instance = initialClass.getDeclaredConstructor().newInstance();                        Method startup = initialClass.getMethod("start", new Class[] { new String[0].getClass() });            startup.invoke(instance, new Object[] { args });        } catch (Throwable e) {                                    e.printStackTrace();                        System.err.println("JMeter home directory was detected as: " + JMETER_INSTALLATION_DIRECTORY);        }    }}
0
private static String exceptionsToString(List<Exception> exceptionsInInit)
{    StringBuilder builder = new StringBuilder();    for (Exception exception : exceptionsInInit) {        StringWriter stringWriter = new StringWriter();        PrintWriter printWriter = new PrintWriter(stringWriter);                exception.printStackTrace(printWriter);        builder.append(stringWriter.toString()).append("\r\n");    }    return builder.toString();}
0
private static void setLoggingProperties(String[] args)
{        String jmLogFile = getCommandLineArgument(args, 'j', "jmeterlogfile");    if (jmLogFile != null && !jmLogFile.isEmpty()) {        jmLogFile = replaceDateFormatInFileName(jmLogFile);                System.setProperty(JMETER_LOGFILE_SYSTEM_PROPERTY, jmLogFile);    } else if (System.getProperty(JMETER_LOGFILE_SYSTEM_PROPERTY) == null) {                        System.setProperty(JMETER_LOGFILE_SYSTEM_PROPERTY, "jmeter.log");    }        String jmLogConf = getCommandLineArgument(args, 'i', "jmeterlogconf");    File logConfFile = null;    if (jmLogConf != null && !jmLogConf.isEmpty()) {        logConfFile = new File(jmLogConf);    } else if (System.getProperty("log4j.configurationFile") == null) {                        logConfFile = new File("log4j2.xml");        if (!logConfFile.isFile()) {                        logConfFile = new File(JMETER_INSTALLATION_DIRECTORY, "bin" + File.separator + "log4j2.xml");        }    }    if (logConfFile != null) {                System.setProperty("log4j.configurationFile", logConfFile.toURI().toString());    }}
0
private static boolean shouldBeHeadless(String[] args)
{    for (String arg : args) {        if ("-n".equals(arg) || "-s".equals(arg) || "-g".equals(arg)) {            return true;        }    }    return false;}
0
private static String getCommandLineArgument(String[] args, int id, String name)
{        final String shortArgName = "-" + ((char) id);        final String longArgName = "--" + name;    String value = null;    for (int i = 0; i < args.length; i++) {        if ((shortArgName.equals(args[i]) && i < args.length - 1) || longArgName.equals(args[i])) {            if (!args[i + 1].startsWith("-")) {                                value = args[i + 1];            }            break;        } else if (!shortArgName.equals(args[i]) && args[i].startsWith(shortArgName)) {            value = args[i].substring(shortArgName.length());            break;        }    }    return value;}
0
private static String replaceDateFormatInFileName(String fileName)
{    try {        StringBuilder builder = new StringBuilder();        final Date date = new Date();        int fromIndex = 0;                int begin = fileName.indexOf('\'', fromIndex);        int end;        String format;        SimpleDateFormat dateFormat;        while (begin != -1) {            builder.append(fileName.substring(fromIndex, begin));            fromIndex = begin + 1;                        end = fileName.indexOf('\'', fromIndex);            if (end == -1) {                                throw new IllegalArgumentException("Invalid pairs of single-quotes in the file name: " + fileName);            }            format = fileName.substring(begin + 1, end);            dateFormat = new SimpleDateFormat(format);            builder.append(dateFormat.format(date));            fromIndex = end + 1;                        begin = fileName.indexOf('\'', fromIndex);        }        if (fromIndex < fileName.length() - 1) {            builder.append(fileName.substring(fromIndex));        }        return builder.toString();    } catch (Exception ex) {                System.err.println("Error replacing date format in file name:" + fileName + ", error:" + ex.getMessage());    }    return fileName;}
0
public static void main(String[] args) throws IOException
{    int port = UDP_PORT_DEFAULT;    if (args.length > 1) {        port = Integer.parseInt(args[1]);    } else if (args.length == 0) {        throw new RuntimeException("Usage: command [port]");    }    String command = args[0];    System.out.println("Sending " + command + " request to port " + port);    try (DatagramSocket socket = new DatagramSocket()) {        byte[] buf = command.getBytes("ASCII");        InetAddress address = InetAddress.getByName("localhost");        DatagramPacket packet = new DatagramPacket(buf, buf.length, address, port);        socket.send(packet);    }}
0
public String getLabelResource()
{        return "ftp_sample_title";}
0
public void configure(TestElement element)
{        super.configure(element);        server.setText(element.getPropertyAsString(FTPSampler.SERVER));    port.setText(element.getPropertyAsString(FTPSampler.PORT));    remoteFile.setText(element.getPropertyAsString(FTPSampler.REMOTE_FILENAME));    localFile.setText(element.getPropertyAsString(FTPSampler.LOCAL_FILENAME));    inputData.setText(element.getPropertyAsString(FTPSampler.INPUT_DATA));    binaryMode.setSelected(element.getPropertyAsBoolean(FTPSampler.BINARY_MODE, false));    saveResponseData.setSelected(element.getPropertyAsBoolean(FTPSampler.SAVE_RESPONSE, false));    final boolean uploading = element.getPropertyAsBoolean(FTPSampler.UPLOAD_FILE, false);    if (uploading) {        putBox.setSelected(true);    } else {        getBox.setSelected(true);    }}
0
public TestElement createTestElement()
{    ConfigTestElement element = new ConfigTestElement();    modifyTestElement(element);    return element;}
0
public void modifyTestElement(TestElement element)
{    configureTestElement(element);        element.setProperty(FTPSampler.SERVER, server.getText());    element.setProperty(FTPSampler.PORT, port.getText());    element.setProperty(FTPSampler.REMOTE_FILENAME, remoteFile.getText());    element.setProperty(FTPSampler.LOCAL_FILENAME, localFile.getText());    element.setProperty(FTPSampler.INPUT_DATA, inputData.getText());    element.setProperty(FTPSampler.BINARY_MODE, binaryMode.isSelected());    element.setProperty(FTPSampler.SAVE_RESPONSE, saveResponseData.isSelected());    element.setProperty(FTPSampler.UPLOAD_FILE, putBox.isSelected());}
0
public void clearGui()
{    super.clearGui();        server.setText("");        port.setText("");        remoteFile.setText("");        localFile.setText("");        inputData.setText("");    binaryMode.setSelected(false);    saveResponseData.setSelected(false);    getBox.setSelected(true);    putBox.setSelected(false);}
0
private JPanel createServerPanel()
{        JLabel label = new JLabel(JMeterUtils.getResString("server"));    server = new JTextField(10);    label.setLabelFor(server);    JPanel serverPanel = new JPanel(new BorderLayout(5, 0));    serverPanel.add(label, BorderLayout.WEST);    serverPanel.add(server, BorderLayout.CENTER);    return serverPanel;}
0
private JPanel getPortPanel()
{    port = new JTextField(4);        JLabel label = new JLabel(JMeterUtils.getResString("web_server_port"));    label.setLabelFor(port);    JPanel panel = new JPanel(new BorderLayout(5, 0));    panel.add(label, BorderLayout.WEST);    panel.add(port, BorderLayout.CENTER);    return panel;}
0
private JPanel createLocalFilenamePanel()
{        JLabel label = new JLabel(JMeterUtils.getResString("ftp_local_file"));    localFile = new JTextField(10);    label.setLabelFor(localFile);    JPanel filenamePanel = new JPanel(new BorderLayout(5, 0));    filenamePanel.add(label, BorderLayout.WEST);    filenamePanel.add(localFile, BorderLayout.CENTER);    return filenamePanel;}
0
private JPanel createLocalFileContentsPanel()
{        JLabel label = new JLabel(JMeterUtils.getResString("ftp_local_file_contents"));    inputData = new JTextArea();    label.setLabelFor(inputData);    JPanel contentsPanel = new JPanel(new BorderLayout(5, 0));    contentsPanel.add(label, BorderLayout.WEST);    contentsPanel.add(inputData, BorderLayout.CENTER);    return contentsPanel;}
0
private JPanel createRemoteFilenamePanel()
{        JLabel label = new JLabel(JMeterUtils.getResString("ftp_remote_file"));    remoteFile = new JTextField(10);    label.setLabelFor(remoteFile);    JPanel filenamePanel = new JPanel(new BorderLayout(5, 0));    filenamePanel.add(label, BorderLayout.WEST);    filenamePanel.add(remoteFile, BorderLayout.CENTER);    return filenamePanel;}
0
private JPanel createOptionsPanel()
{    ButtonGroup group = new ButtonGroup();        getBox = new JRadioButton(JMeterUtils.getResString("ftp_get"));    group.add(getBox);    getBox.setSelected(true);        putBox = new JRadioButton(JMeterUtils.getResString("ftp_put"));    group.add(putBox);        binaryMode = new JCheckBox(JMeterUtils.getResString("ftp_binary_mode"));        saveResponseData = new JCheckBox(JMeterUtils.getResString("ftp_save_response_data"));    JPanel optionsPanel = new HorizontalPanel();    optionsPanel.add(getBox);    optionsPanel.add(putBox);    optionsPanel.add(binaryMode);    optionsPanel.add(saveResponseData);    return optionsPanel;}
0
private void init()
{        setLayout(new BorderLayout(0, 5));    if (displayName) {        setBorder(makeBorder());        add(makeTitlePanel(), BorderLayout.NORTH);    }        VerticalPanel mainPanel = new VerticalPanel();    JPanel serverPanel = new HorizontalPanel();    serverPanel.add(createServerPanel(), BorderLayout.CENTER);    serverPanel.add(getPortPanel(), BorderLayout.EAST);    mainPanel.add(serverPanel);    mainPanel.add(createRemoteFilenamePanel());    mainPanel.add(createLocalFilenamePanel());    mainPanel.add(createLocalFileContentsPanel());    mainPanel.add(createOptionsPanel());    add(mainPanel, BorderLayout.CENTER);}
0
public void configure(TestElement element)
{    super.configure(element);    loginPanel.configure(element);    ftpDefaultPanel.configure(element);}
0
public TestElement createTestElement()
{    FTPSampler sampler = new FTPSampler();    modifyTestElement(sampler);    return sampler;}
0
public void modifyTestElement(TestElement sampler)
{    sampler.clear();    ftpDefaultPanel.modifyTestElement(sampler);    loginPanel.modifyTestElement(sampler);    super.configureTestElement(sampler);}
0
public void clearGui()
{    super.clearGui();    ftpDefaultPanel.clearGui();    loginPanel.clearGui();}
0
public String getLabelResource()
{        return "ftp_testing_title";}
0
private void init()
{        setLayout(new BorderLayout(0, 5));    setBorder(makeBorder());    add(makeTitlePanel(), BorderLayout.NORTH);    VerticalPanel mainPanel = new VerticalPanel();    ftpDefaultPanel = new FtpConfigGui(false);    mainPanel.add(ftpDefaultPanel);    loginPanel = new LoginConfigGui(false);        loginPanel.setBorder(BorderFactory.createTitledBorder(JMeterUtils.getResString("login_config")));    mainPanel.add(loginPanel);    add(mainPanel, BorderLayout.CENTER);}
0
public String getUsername()
{    return getPropertyAsString(ConfigTestElement.USERNAME);}
0
public String getPassword()
{    return getPropertyAsString(ConfigTestElement.PASSWORD);}
0
public void setServer(String newServer)
{    this.setProperty(SERVER, newServer);}
0
public String getServer()
{    return getPropertyAsString(SERVER);}
0
public void setPort(String newPort)
{        this.setProperty(PORT, newPort, "");}
0
public String getPort()
{        return getPropertyAsString(PORT, "");}
0
public int getPortAsInt()
{    return getPropertyAsInt(PORT, 0);}
0
public String getRemoteFilename()
{    return getPropertyAsString(REMOTE_FILENAME);}
0
public String getLocalFilename()
{    return getPropertyAsString(LOCAL_FILENAME);}
0
private String getLocalFileContents()
{    return getPropertyAsString(INPUT_DATA);}
0
public boolean isBinaryMode()
{    return getPropertyAsBoolean(BINARY_MODE, false);}
0
public boolean isSaveResponse()
{    return getPropertyAsBoolean(SAVE_RESPONSE, false);}
0
public boolean isUpload()
{    return getPropertyAsBoolean(UPLOAD_FILE, false);}
0
public String getLabel()
{    StringBuilder sb = new StringBuilder();        sb.append("ftp://");    sb.append(getServer());    String port = getPort();    if (port.length() > 0) {        sb.append(':');        sb.append(port);    }        sb.append("/");    sb.append(getRemoteFilename());        sb.append(isBinaryMode() ? " (Binary) " : " (Ascii) ");        sb.append(isUpload() ? " <- " : " -> ");    sb.append(getLocalFilename());    return sb.toString();}
0
public SampleResult sample(Entry e)
{    SampleResult res = new SampleResult();        res.setSuccessful(false);    String remote = getRemoteFilename();    String local = getLocalFilename();    boolean binaryTransfer = isBinaryMode();    res.setSampleLabel(getName());    final String label = getLabel();    res.setSamplerData(label);    try {        res.setURL(new URL(label));    } catch (MalformedURLException e1) {            }    InputStream input = null;    FileInputStream fileIS = null;    res.sampleStart();    FTPClient ftp = new FTPClient();    try {        savedClient = ftp;        final int port = getPortAsInt();        if (port > 0) {            ftp.connect(getServer(), port);        } else {            ftp.connect(getServer());        }        res.latencyEnd();        int reply = ftp.getReplyCode();        if (FTPReply.isPositiveCompletion(reply)) {            if (ftp.login(getUsername(), getPassword())) {                if (binaryTransfer) {                    ftp.setFileType(FTP.BINARY_FILE_TYPE);                }                                ftp.enterLocalPassiveMode();                boolean ftpOK = false;                if (isUpload()) {                    String contents = getLocalFileContents();                    if (contents.length() > 0) {                                                byte[] bytes = contents.getBytes();                        input = new ByteArrayInputStream(bytes);                        res.setSentBytes((long) bytes.length);                    } else {                        File infile = new File(local);                        res.setSentBytes(infile.length());                                                fileIS = new FileInputStream(infile);                        input = new BufferedInputStream(fileIS);                    }                    ftpOK = ftp.storeFile(remote, input);                } else {                    final boolean saveResponse = isSaveResponse();                                        ByteArrayOutputStream baos = null;                    OutputStream target = null;                    OutputStream output = null;                    try {                        if (saveResponse) {                            baos = new ByteArrayOutputStream();                            target = baos;                        }                        if (local.length() > 0) {                                                        output = new FileOutputStream(local);                            if (target == null) {                                target = output;                            } else {                                target = new TeeOutputStream(output, baos);                            }                        }                        if (target == null) {                            target = new NullOutputStream();                        }                        input = ftp.retrieveFileStream(remote);                        if (input == null) {                                                        res.setResponseCode(Integer.toString(ftp.getReplyCode()));                            res.setResponseMessage(ftp.getReplyString());                        } else {                            long bytes = IOUtils.copy(input, target);                            ftpOK = bytes > 0;                            if (saveResponse) {                                saveResponse(res, binaryTransfer, baos);                            } else {                                res.setBytes(bytes);                            }                        }                    } finally {                        IOUtils.closeQuietly(target);                        IOUtils.closeQuietly(output);                    }                }                if (ftpOK) {                    res.setResponseCodeOK();                    res.setResponseMessageOK();                    res.setSuccessful(true);                } else {                    res.setResponseCode(Integer.toString(ftp.getReplyCode()));                    res.setResponseMessage(ftp.getReplyString());                }            } else {                res.setResponseCode(Integer.toString(ftp.getReplyCode()));                res.setResponseMessage(ftp.getReplyString());            }        } else {            res.setResponseCode("501");            String replyString = ftp.getReplyString();            if (StringUtils.isEmpty(replyString)) {                res.setResponseMessage("Could not connect");            } else {                res.setResponseMessage(replyString);            }        }    } catch (IOException ex) {        res.setResponseCode("000");        res.setResponseMessage(ex.toString());    } finally {        savedClient = null;        if (ftp.isConnected()) {            try {                ftp.logout();            } catch (IOException ignored) {                        }            try {                ftp.disconnect();            } catch (IOException ignored) {                        }        }        IOUtils.closeQuietly(input);        IOUtils.closeQuietly(fileIS);    }    res.sampleEnd();    return res;}
1
private void saveResponse(SampleResult res, boolean binaryTransfer, ByteArrayOutputStream baos)
{    res.setResponseData(baos.toByteArray());    if (!binaryTransfer) {        res.setDataType(SampleResult.TEXT);    }}
0
public boolean interrupt()
{    FTPClient client = savedClient;    if (client != null) {        savedClient = null;        try {            client.abort();        } catch (IOException ignored) {                }        try {            client.disconnect();        } catch (IOException ignored) {                }    }    return client != null;}
0
public boolean applies(ConfigTestElement configElement)
{    String guiClass = configElement.getProperty(TestElement.GUI_CLASS).getStringValue();    return APPLIABLE_CONFIG_CLASSES.contains(guiClass);}
0
public String getQop()
{    return qop;}
0
public void setQop(String qop)
{    this.qop = qop;}
0
public String getNonce()
{    return nonce;}
0
public void setNonce(String nonce)
{    this.nonce = nonce;}
0
public String getCharset()
{    return charset;}
0
public void setCharset(String charset)
{    this.charset = charset;}
0
public String getAlgorithm()
{    return algorithm;}
0
public void setAlgorithm(String algorithm)
{    this.algorithm = algorithm;}
0
public String getOpaque()
{    return opaque;}
0
public void setOpaque(String opaque)
{    this.opaque = opaque;}
0
public String getLabelResource()
{        return "url_config_title";}
0
public TestElement createTestElement()
{    ConfigTestElement config = new ConfigTestElement();    modifyTestElement(config);    return config;}
0
public void modifyTestElement(TestElement config)
{    ConfigTestElement cfg = (ConfigTestElement) config;    ConfigTestElement el = (ConfigTestElement) urlConfigGui.createTestElement();    cfg.clear();    cfg.addConfigElement(el);    super.configureTestElement(config);    if (retrieveEmbeddedResources.isSelected()) {        config.setProperty(new BooleanProperty(HTTPSamplerBase.IMAGE_PARSER, true));    } else {        config.removeProperty(HTTPSamplerBase.IMAGE_PARSER);    }    enableConcurrentDwn(retrieveEmbeddedResources.isSelected());    if (concurrentDwn.isSelected()) {        config.setProperty(new BooleanProperty(HTTPSamplerBase.CONCURRENT_DWN, true));    } else {                        config.removeProperty(HTTPSamplerBase.CONCURRENT_DWN);    }    if (!StringUtils.isEmpty(concurrentPool.getText())) {        config.setProperty(new StringProperty(HTTPSamplerBase.CONCURRENT_POOL, concurrentPool.getText()));    } else {        config.setProperty(new StringProperty(HTTPSamplerBase.CONCURRENT_POOL, String.valueOf(HTTPSamplerBase.CONCURRENT_POOL_SIZE)));    }    if (useMD5.isSelected()) {        config.setProperty(new BooleanProperty(HTTPSamplerBase.MD5, true));    } else {        config.removeProperty(HTTPSamplerBase.MD5);    }    if (!StringUtils.isEmpty(embeddedRE.getText())) {        config.setProperty(new StringProperty(HTTPSamplerBase.EMBEDDED_URL_RE, embeddedRE.getText()));    } else {        config.removeProperty(HTTPSamplerBase.EMBEDDED_URL_RE);    }    if (!StringUtils.isEmpty(sourceIpAddr.getText())) {        config.setProperty(new StringProperty(HTTPSamplerBase.IP_SOURCE, sourceIpAddr.getText()));        config.setProperty(new IntegerProperty(HTTPSamplerBase.IP_SOURCE_TYPE, sourceIpType.getSelectedIndex()));    } else {        config.removeProperty(HTTPSamplerBase.IP_SOURCE);        config.removeProperty(HTTPSamplerBase.IP_SOURCE_TYPE);    }    config.setProperty(HTTPSamplerBase.PROXYSCHEME, proxyScheme.getText(), "");    config.setProperty(HTTPSamplerBase.PROXYHOST, proxyHost.getText(), "");    config.setProperty(HTTPSamplerBase.PROXYPORT, proxyPort.getText(), "");    config.setProperty(HTTPSamplerBase.PROXYUSER, proxyUser.getText(), "");    config.setProperty(HTTPSamplerBase.PROXYPASS, String.valueOf(proxyPass.getPassword()), "");    config.setProperty(HTTPSamplerBase.IMPLEMENTATION, httpImplementation.getSelectedItem().toString(), "");    config.setProperty(HTTPSamplerBase.CONNECT_TIMEOUT, connectTimeOut.getText());    config.setProperty(HTTPSamplerBase.RESPONSE_TIMEOUT, responseTimeOut.getText());}
0
public void clearGui()
{    super.clearGui();    retrieveEmbeddedResources.setSelected(false);    concurrentDwn.setSelected(false);    concurrentPool.setText(String.valueOf(HTTPSamplerBase.CONCURRENT_POOL_SIZE));    enableConcurrentDwn(false);    useMD5.setSelected(false);    urlConfigGui.clear();        embeddedRE.setText("");        sourceIpAddr.setText("");        sourceIpType.setSelectedIndex(HTTPSamplerBase.SourceType.HOSTNAME.ordinal());        proxyScheme.setText("");        proxyHost.setText("");        proxyPort.setText("");        proxyUser.setText("");        proxyPass.setText("");        httpImplementation.setSelectedItem("");        connectTimeOut.setText("");        responseTimeOut.setText("");}
0
public void configure(TestElement el)
{    super.configure(el);    AbstractTestElement samplerBase = (AbstractTestElement) el;    urlConfigGui.configure(el);    retrieveEmbeddedResources.setSelected(samplerBase.getPropertyAsBoolean(HTTPSamplerBase.IMAGE_PARSER));    concurrentDwn.setSelected(samplerBase.getPropertyAsBoolean(HTTPSamplerBase.CONCURRENT_DWN));    concurrentPool.setText(samplerBase.getPropertyAsString(HTTPSamplerBase.CONCURRENT_POOL));    useMD5.setSelected(samplerBase.getPropertyAsBoolean(HTTPSamplerBase.MD5, false));        embeddedRE.setText(samplerBase.getPropertyAsString(HTTPSamplerBase.EMBEDDED_URL_RE, ""));        sourceIpAddr.setText(samplerBase.getPropertyAsString(HTTPSamplerBase.IP_SOURCE));    sourceIpType.setSelectedIndex(samplerBase.getPropertyAsInt(HTTPSamplerBase.IP_SOURCE_TYPE, HTTPSamplerBase.SOURCE_TYPE_DEFAULT));    proxyScheme.setText(samplerBase.getPropertyAsString(HTTPSamplerBase.PROXYSCHEME));    proxyHost.setText(samplerBase.getPropertyAsString(HTTPSamplerBase.PROXYHOST));    proxyPort.setText(samplerBase.getPropertyAsString(HTTPSamplerBase.PROXYPORT));    proxyUser.setText(samplerBase.getPropertyAsString(HTTPSamplerBase.PROXYUSER));    proxyPass.setText(samplerBase.getPropertyAsString(HTTPSamplerBase.PROXYPASS));    httpImplementation.setSelectedItem(samplerBase.getPropertyAsString(HTTPSamplerBase.IMPLEMENTATION));    connectTimeOut.setText(samplerBase.getPropertyAsString(HTTPSamplerBase.CONNECT_TIMEOUT));    responseTimeOut.setText(samplerBase.getPropertyAsString(HTTPSamplerBase.RESPONSE_TIMEOUT));}
0
private void init()
{        setLayout(new BorderLayout(0, 5));    setBorder(makeBorder());        urlConfigGui = new UrlConfigGui(false, true, false);        JPanel httpOptions = new HorizontalPanel();    httpOptions.add(getImplementationPanel());    httpOptions.add(getTimeOutPanel());        JPanel advancedPanel = new VerticalPanel();    advancedPanel.add(httpOptions);    advancedPanel.add(createEmbeddedRsrcPanel());    advancedPanel.add(createSourceAddrPanel());    advancedPanel.add(getProxyServerPanel());    advancedPanel.add(createOptionalTasksPanel());    JTabbedPane tabbedPane = new JTabbedPane();    tabbedPane.add(JMeterUtils.getResString("web_testing_basic"), urlConfigGui);    tabbedPane.add(JMeterUtils.getResString("web_testing_advanced"), advancedPanel);    JPanel emptyPanel = new JPanel();    emptyPanel.setMaximumSize(new Dimension());    add(makeTitlePanel(), BorderLayout.NORTH);    add(tabbedPane, BorderLayout.CENTER);    add(emptyPanel, BorderLayout.SOUTH);}
0
private JPanel getTimeOutPanel()
{    JPanel timeOut = new HorizontalPanel();    timeOut.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("web_server_timeout_title")));    final JPanel connPanel = getConnectTimeOutPanel();    final JPanel reqPanel = getResponseTimeOutPanel();    timeOut.add(connPanel);    timeOut.add(reqPanel);    return timeOut;}
0
private JPanel getConnectTimeOutPanel()
{    connectTimeOut = new JTextField(10);        JLabel label = new JLabel(JMeterUtils.getResString("web_server_timeout_connect"));    label.setLabelFor(connectTimeOut);    JPanel panel = new JPanel(new BorderLayout(5, 0));    panel.add(label, BorderLayout.WEST);    panel.add(connectTimeOut, BorderLayout.CENTER);    return panel;}
0
private JPanel getResponseTimeOutPanel()
{    responseTimeOut = new JTextField(10);        JLabel label = new JLabel(JMeterUtils.getResString("web_server_timeout_response"));    label.setLabelFor(responseTimeOut);    JPanel panel = new JPanel(new BorderLayout(5, 0));    panel.add(label, BorderLayout.WEST);    panel.add(responseTimeOut, BorderLayout.CENTER);    return panel;}
0
protected JPanel createEmbeddedRsrcPanel()
{            retrieveEmbeddedResources = new JCheckBox(JMeterUtils.getResString("web_testing_retrieve_images"));        retrieveEmbeddedResources.addItemListener(e -> {        if (e.getStateChange() == ItemEvent.SELECTED) {            enableConcurrentDwn(true);        } else {            enableConcurrentDwn(false);        }    });            concurrentDwn = new JCheckBox(JMeterUtils.getResString("web_testing_concurrent_download"));    concurrentDwn.addItemListener(e -> {        if (retrieveEmbeddedResources.isSelected() && e.getStateChange() == ItemEvent.SELECTED) {            concurrentPool.setEnabled(true);        } else {            concurrentPool.setEnabled(false);        }    });        concurrentPool = new JTextField(2);    concurrentPool.setMinimumSize(new Dimension(10, (int) concurrentPool.getPreferredSize().getHeight()));    concurrentPool.setMaximumSize(new Dimension(30, (int) concurrentPool.getPreferredSize().getHeight()));    final JPanel embeddedRsrcPanel = new HorizontalPanel();    embeddedRsrcPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), JMeterUtils.getResString(    "web_testing_retrieve_title")));    embeddedRsrcPanel.add(retrieveEmbeddedResources);    embeddedRsrcPanel.add(concurrentDwn);    embeddedRsrcPanel.add(concurrentPool);            embeddedRE = new JLabeledTextField(JMeterUtils.getResString("web_testing_embedded_url_pattern"), 20);    embeddedRsrcPanel.add(embeddedRE);    return embeddedRsrcPanel;}
0
protected JPanel createSourceAddrPanel()
{    final JPanel sourceAddrPanel = new HorizontalPanel();    sourceAddrPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), JMeterUtils.getResString(    "web_testing_source_ip")));        sourceIpType.setSelectedIndex(HTTPSamplerBase.SourceType.HOSTNAME.ordinal());    sourceAddrPanel.add(sourceIpType);    sourceIpAddr = new JTextField();    sourceAddrPanel.add(sourceIpAddr);    return sourceAddrPanel;}
0
protected JPanel createOptionalTasksPanel()
{        final JPanel checkBoxPanel = new VerticalPanel();    checkBoxPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), JMeterUtils.getResString(    "optional_tasks")));            useMD5 = new JCheckBox(JMeterUtils.getResString("response_save_as_md5"));    checkBoxPanel.add(useMD5);    return checkBoxPanel;}
0
public Dimension getPreferredSize()
{    return getMinimumSize();}
0
private void enableConcurrentDwn(final boolean enable)
{    if (enable) {        concurrentDwn.setEnabled(true);        embeddedRE.setEnabled(true);        if (concurrentDwn.isSelected()) {            concurrentPool.setEnabled(true);        }    } else {        concurrentDwn.setEnabled(false);        concurrentPool.setEnabled(false);        embeddedRE.setEnabled(false);    }}
0
protected final JPanel getImplementationPanel()
{    JPanel implPanel = new HorizontalPanel();    implPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("web_server_client")));        implPanel.add(new JLabel(JMeterUtils.getResString("http_implementation")));        httpImplementation.addItem("");    implPanel.add(httpImplementation);    return implPanel;}
0
protected final JPanel getProxyServerPanel()
{    JPanel proxyServer = new HorizontalPanel();    proxyServer.add(getProxySchemePanel(), BorderLayout.WEST);    proxyServer.add(getProxyHostPanel(), BorderLayout.CENTER);    proxyServer.add(getProxyPortPanel(), BorderLayout.EAST);    JPanel proxyLogin = new HorizontalPanel();    proxyLogin.add(getProxyUserPanel());    proxyLogin.add(getProxyPassPanel());    JPanel proxyServerPanel = new HorizontalPanel();    proxyServerPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("web_proxy_server_title")));    proxyServerPanel.add(proxyServer);    proxyServerPanel.add(proxyLogin);    return proxyServerPanel;}
0
private JPanel getProxySchemePanel()
{    proxyScheme = new JTextField(5);        JLabel label = new JLabel(JMeterUtils.getResString("web_proxy_scheme"));    label.setLabelFor(proxyScheme);    label.setFont(FONT_SMALL);    JPanel panel = new JPanel(new BorderLayout(5, 0));    panel.add(label, BorderLayout.WEST);    panel.add(proxyScheme, BorderLayout.CENTER);    return panel;}
0
private JPanel getProxyHostPanel()
{    proxyHost = new JTextField(10);        JLabel label = new JLabel(JMeterUtils.getResString("web_server_domain"));    label.setLabelFor(proxyHost);    label.setFont(FONT_SMALL);    JPanel panel = new JPanel(new BorderLayout(5, 0));    panel.add(label, BorderLayout.WEST);    panel.add(proxyHost, BorderLayout.CENTER);    return panel;}
0
private JPanel getProxyPortPanel()
{    proxyPort = new JTextField(10);        JLabel label = new JLabel(JMeterUtils.getResString("web_server_port"));    label.setLabelFor(proxyPort);    label.setFont(FONT_SMALL);    JPanel panel = new JPanel(new BorderLayout(5, 0));    panel.add(label, BorderLayout.WEST);    panel.add(proxyPort, BorderLayout.CENTER);    return panel;}
0
private JPanel getProxyUserPanel()
{    proxyUser = new JTextField(5);        JLabel label = new JLabel(JMeterUtils.getResString("username"));    label.setLabelFor(proxyUser);    label.setFont(FONT_SMALL);    JPanel panel = new JPanel(new BorderLayout(5, 0));    panel.add(label, BorderLayout.WEST);    panel.add(proxyUser, BorderLayout.CENTER);    return panel;}
0
private JPanel getProxyPassPanel()
{    proxyPass = new JPasswordField(5);        JLabel label = new JLabel(JMeterUtils.getResString("password"));    label.setLabelFor(proxyPass);    label.setFont(FONT_SMALL);    JPanel panel = new JPanel(new BorderLayout(5, 0));    panel.add(label, BorderLayout.WEST);    panel.add(proxyPass, BorderLayout.CENTER);    return panel;}
0
public void clear()
{        domain.setText("");    if (notConfigOnly) {        followRedirects.setSelected(true);        autoRedirects.setSelected(false);        method.setText(HTTPSamplerBase.DEFAULT_METHOD);        useKeepAlive.setSelected(true);        useMultipart.setSelected(false);        useBrowserCompatibleMultipartMode.setSelected(HTTPSamplerBase.BROWSER_COMPATIBLE_MULTIPART_MODE_DEFAULT);    }        path.setText("");        port.setText("");        protocol.setText("");        contentEncoding.setText("");    argsPanel.clear();    if (showFileUploadPane) {        filesPanel.clear();    }    if (showRawBodyPane) {                postBodyContent.setInitialText("");    }    postContentTabbedPane.setSelectedIndex(TAB_PARAMETERS, false);}
0
public TestElement createTestElement()
{    ConfigTestElement element = new ConfigTestElement();    element.setName(this.getName());    element.setProperty(TestElement.GUI_CLASS, this.getClass().getName());    element.setProperty(TestElement.TEST_CLASS, element.getClass().getName());    modifyTestElement(element);    return element;}
0
public void modifyTestElement(TestElement element)
{    boolean useRaw = !postBodyContent.getText().isEmpty();    Arguments args;    if (useRaw) {        args = new Arguments();        String text = postBodyContent.getText();        /*             * Textfield uses \n (LF) to delimit lines; we need to send CRLF.             * Rather than change the way that arguments are processed by the             * samplers for raw data, it is easier to fix the data.             * On retrieval, CRLF is converted back to LF for storage in the text field.             * See             */        HTTPArgument arg = new HTTPArgument("", text.replaceAll("\n", "\r\n"), false);        arg.setAlwaysEncoded(false);        args.addArgument(arg);    } else {        args = (Arguments) argsPanel.createTestElement();        HTTPArgument.convertArgumentsToHTTP(args);    }    if (showFileUploadPane) {        filesPanel.modifyTestElement(element);    }    element.setProperty(HTTPSamplerBase.POST_BODY_RAW, useRaw, HTTPSamplerBase.POST_BODY_RAW_DEFAULT);    element.setProperty(new TestElementProperty(HTTPSamplerBase.ARGUMENTS, args));    element.setProperty(HTTPSamplerBase.DOMAIN, domain.getText());    element.setProperty(HTTPSamplerBase.PORT, port.getText());    element.setProperty(HTTPSamplerBase.PROTOCOL, protocol.getText());    element.setProperty(HTTPSamplerBase.CONTENT_ENCODING, contentEncoding.getText());    element.setProperty(HTTPSamplerBase.PATH, path.getText());    if (notConfigOnly) {        element.setProperty(HTTPSamplerBase.METHOD, method.getText());        element.setProperty(new BooleanProperty(HTTPSamplerBase.FOLLOW_REDIRECTS, followRedirects.isSelected()));        element.setProperty(new BooleanProperty(HTTPSamplerBase.AUTO_REDIRECTS, autoRedirects.isSelected()));        element.setProperty(new BooleanProperty(HTTPSamplerBase.USE_KEEPALIVE, useKeepAlive.isSelected()));        element.setProperty(new BooleanProperty(HTTPSamplerBase.DO_MULTIPART_POST, useMultipart.isSelected()));        element.setProperty(HTTPSamplerBase.BROWSER_COMPATIBLE_MULTIPART, useBrowserCompatibleMultipartMode.isSelected(), HTTPSamplerBase.BROWSER_COMPATIBLE_MULTIPART_MODE_DEFAULT);    }}
0
private static String computePostBody(Arguments arguments)
{    return computePostBody(arguments, false);}
0
private static String computePostBody(Arguments arguments, boolean crlfToLF)
{    StringBuilder postBody = new StringBuilder();    for (JMeterProperty argument : arguments) {        HTTPArgument arg = (HTTPArgument) argument.getObjectValue();        String value = arg.getValue();        if (crlfToLF) {                        value = value.replaceAll("\r\n", "\n");        }        postBody.append(value);    }    return postBody.toString();}
0
public void configure(TestElement el)
{    setName(el.getName());    Arguments arguments = (Arguments) el.getProperty(HTTPSamplerBase.ARGUMENTS).getObjectValue();    boolean useRaw = el.getPropertyAsBoolean(HTTPSamplerBase.POST_BODY_RAW, HTTPSamplerBase.POST_BODY_RAW_DEFAULT);    if (useRaw) {                String postBody = computePostBody(arguments, true);        postBodyContent.setInitialText(postBody);        postBodyContent.setCaretPosition(0);        argsPanel.clear();        postContentTabbedPane.setSelectedIndex(tabRawBodyIndex, false);    } else {        postBodyContent.setInitialText("");        argsPanel.configure(arguments);        postContentTabbedPane.setSelectedIndex(TAB_PARAMETERS, false);    }    if (showFileUploadPane) {        filesPanel.configure(el);    }    domain.setText(el.getPropertyAsString(HTTPSamplerBase.DOMAIN));    String portString = el.getPropertyAsString(HTTPSamplerBase.PORT);        if (portString.equals(HTTPSamplerBase.UNSPECIFIED_PORT_AS_STRING)) {                port.setText("");    } else {        port.setText(portString);    }    protocol.setText(el.getPropertyAsString(HTTPSamplerBase.PROTOCOL));    contentEncoding.setText(el.getPropertyAsString(HTTPSamplerBase.CONTENT_ENCODING));    path.setText(el.getPropertyAsString(HTTPSamplerBase.PATH));    if (notConfigOnly) {        method.setText(el.getPropertyAsString(HTTPSamplerBase.METHOD));        followRedirects.setSelected(el.getPropertyAsBoolean(HTTPSamplerBase.FOLLOW_REDIRECTS));        autoRedirects.setSelected(el.getPropertyAsBoolean(HTTPSamplerBase.AUTO_REDIRECTS));        useKeepAlive.setSelected(el.getPropertyAsBoolean(HTTPSamplerBase.USE_KEEPALIVE));        useMultipart.setSelected(el.getPropertyAsBoolean(HTTPSamplerBase.DO_MULTIPART_POST));        useBrowserCompatibleMultipartMode.setSelected(el.getPropertyAsBoolean(HTTPSamplerBase.BROWSER_COMPATIBLE_MULTIPART, HTTPSamplerBase.BROWSER_COMPATIBLE_MULTIPART_MODE_DEFAULT));    }}
0
private void init()
{        this.setLayout(new BorderLayout());        JPanel webRequestPanel = new JPanel();    webRequestPanel.setLayout(new BorderLayout());    webRequestPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("web_request")));    webRequestPanel.add(getPathPanel(), BorderLayout.NORTH);    webRequestPanel.add(getParameterPanel(), BorderLayout.CENTER);    this.add(getWebServerPanel(), BorderLayout.NORTH);    this.add(webRequestPanel, BorderLayout.CENTER);}
0
protected final JPanel getWebServerPanel()
{            protocol = new JLabeledTextField(JMeterUtils.getResString("protocol"), 4);        port = new JLabeledTextField(JMeterUtils.getResString("web_server_port"), 7);        domain = new JLabeledTextField(JMeterUtils.getResString("web_server_domain"), 40);    JPanel webServerPanel = new HorizontalPanel();    webServerPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("web_server")));    webServerPanel.add(protocol);    webServerPanel.add(domain);    webServerPanel.add(port);    return webServerPanel;}
0
protected Component getPathPanel()
{        path = new JLabeledTextField(JMeterUtils.getResString("path"), 80);            contentEncoding = new JLabeledTextField(JMeterUtils.getResString("content_encoding"), 7);    if (notConfigOnly) {        method = new         JLabeledChoice(        JMeterUtils.getResString("method"), HTTPSamplerBase.getValidMethodsAsArray(), true, false);        method.addChangeListener(this);    }    if (notConfigOnly) {                followRedirects = new JCheckBox(JMeterUtils.getResString("follow_redirects"));        followRedirects.setFont(null);        followRedirects.setSelected(true);        followRedirects.addChangeListener(this);                autoRedirects = new JCheckBox(JMeterUtils.getResString("follow_redirects_auto"));        autoRedirects.setFont(null);        autoRedirects.addChangeListener(this);                autoRedirects.setSelected(false);                useKeepAlive = new JCheckBox(JMeterUtils.getResString("use_keepalive"));        useKeepAlive.setFont(null);        useKeepAlive.setSelected(true);                useMultipart = new JCheckBox(JMeterUtils.getResString("use_multipart_for_http_post"));        useMultipart.setFont(null);        useMultipart.setSelected(false);                useBrowserCompatibleMultipartMode = new JCheckBox(JMeterUtils.getResString("use_multipart_mode_browser"));        useBrowserCompatibleMultipartMode.setFont(null);        useBrowserCompatibleMultipartMode.setSelected(HTTPSamplerBase.BROWSER_COMPATIBLE_MULTIPART_MODE_DEFAULT);    }    JPanel pathPanel = new HorizontalPanel();    if (notConfigOnly) {        pathPanel.add(method);    }    pathPanel.add(path);    pathPanel.add(contentEncoding);    JPanel panel = new JPanel();    panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));    panel.add(pathPanel);    if (notConfigOnly) {        JPanel optionPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));                optionPanel.setFont(FONT_SMALL);        optionPanel.add(autoRedirects);        optionPanel.add(followRedirects);        optionPanel.add(useKeepAlive);        optionPanel.add(useMultipart);        optionPanel.add(useBrowserCompatibleMultipartMode);        optionPanel.setMinimumSize(optionPanel.getPreferredSize());        panel.add(optionPanel);    }    return panel;}
0
protected JTabbedPane getParameterPanel()
{    postContentTabbedPane = new ValidationTabbedPane();    argsPanel = new HTTPArgumentsPanel();        postContentTabbedPane.add(JMeterUtils.getResString("post_as_parameters"), argsPanel);    int indx = TAB_PARAMETERS;    if (showRawBodyPane) {        tabRawBodyIndex = ++indx;                postBodyContent = JSyntaxTextArea.getInstance(30, 50);                postContentTabbedPane.add(JMeterUtils.getResString("post_body"), JTextScrollPane.getInstance(postBodyContent));    }    if (showFileUploadPane) {        tabFileUploadIndex = ++indx;        filesPanel = new HTTPFileArgsPanel();        postContentTabbedPane.add(JMeterUtils.getResString("post_files_upload"), filesPanel);    }    return postContentTabbedPane;}
0
public void setSelectedIndex(int index)
{    setSelectedIndex(index, true);}
0
public void setSelectedIndex(int index, boolean check)
{    int oldSelectedIndex = this.getSelectedIndex();    if (!check || oldSelectedIndex == -1) {        super.setSelectedIndex(index);    } else if (index == tabFileUploadIndex) {                super.setSelectedIndex(index);    } else     if (index != oldSelectedIndex) {                if (index == tabRawBodyIndex) {            if (canSwitchToRawBodyPane()) {                convertParametersToRaw();                super.setSelectedIndex(index);            } else {                super.setSelectedIndex(TAB_PARAMETERS);            }        } else {                        if (canSwitchToParametersTab()) {                super.setSelectedIndex(index);            } else {                super.setSelectedIndex(tabRawBodyIndex);            }        }    }}
0
private boolean canSwitchToRawBodyPane()
{    Arguments arguments = (Arguments) argsPanel.createTestElement();    for (int i = 0; i < arguments.getArgumentCount(); i++) {        if (!StringUtils.isEmpty(arguments.getArgument(i).getName())) {            return false;        }    }    return true;}
0
private boolean canSwitchToParametersTab()
{    return postBodyContent.getText().isEmpty();}
0
public void stateChanged(ChangeEvent e)
{    Object source = e.getSource();    if (source == autoRedirects && autoRedirects.isSelected()) {        followRedirects.setSelected(false);    } else if (source == followRedirects && followRedirects.isSelected()) {        autoRedirects.setSelected(false);    }}
0
 void convertParametersToRaw()
{    if (postBodyContent.getText().isEmpty()) {        postBodyContent.setInitialText(computePostBody((Arguments) argsPanel.createTestElement()));        postBodyContent.setCaretPosition(0);    }}
0
public String getBoundary()
{    return boundary;}
0
public Arguments getArguments()
{    return args;}
0
public void addArgument(String name, String value)
{    Arguments myArgs = this.getArguments();    myArgs.addArgument(new HTTPArgument(name, value));}
0
public void addArgument(String name, String value, String metadata)
{    Arguments myArgs = this.getArguments();    myArgs.addArgument(new HTTPArgument(name, value, metadata));}
0
public HTTPFileArgs getHTTPFileArgs()
{    return files;}
0
private void addNonEncodedArgument(String name, String value, String contentType)
{    Arguments myArgs = getArguments();        HTTPArgument arg = new HTTPArgument(name, value, false);    if (!StringUtils.isEmpty(contentType)) {        int indexOfSemiColon = contentType.indexOf(';');        if (indexOfSemiColon > 0) {            arg.setContentType(contentType.substring(0, indexOfSemiColon));        } else {            arg.setContentType(contentType);        }    }        arg.setAlwaysEncoded(false);    myArgs.addArgument(arg);}
0
public void parseArguments(String queryString)
{        String[] parts = JOrphanUtils.split(queryString, "--" + getBoundary());    for (String part : parts) {                String contentDisposition = getHeaderValue("Content-disposition", part);                String contentType = getHeaderValue("Content-type", part);                if (contentDisposition != null && contentDisposition.contains("form-data")) {                                                final String namePrefix = "name=\"";            int index = contentDisposition.indexOf(namePrefix) + namePrefix.length();                        String name = contentDisposition.substring(index, contentDisposition.indexOf('\"', index));                                    final String filenamePrefix = "filename=\"";            if (contentDisposition.contains(filenamePrefix)) {                                index = contentDisposition.indexOf(filenamePrefix) + filenamePrefix.length();                                String path = contentDisposition.substring(index, contentDisposition.indexOf('\"', index));                if (path != null && path.length() > 0) {                                        files.addHTTPFileArg(path, name, contentType);                }            } else {                                                                int indexEmptyCrLfCrLfLinePos = part.indexOf(CRLFCRLF);                                int indexEmptyLfLfLinePos = part.indexOf(LFLF);                String value = null;                if (indexEmptyCrLfCrLfLinePos > -1) {                                        value = part.substring(indexEmptyCrLfCrLfLinePos + CRLFCRLF.length(), part.lastIndexOf(CRLF));                } else if (indexEmptyLfLfLinePos > -1) {                                        value = part.substring(indexEmptyLfLfLinePos + LFLF.length(), part.lastIndexOf(LF));                }                this.addNonEncodedArgument(name, value, contentType);            }        }    }}
0
private static String getHeaderValue(String headerName, String multiPart)
{        String regularExpression = headerName + "\\s*:\\s*(.*)$";    Perl5Matcher localMatcher = JMeterUtils.getMatcher();    Pattern pattern = JMeterUtils.getPattern(regularExpression, Perl5Compiler.READ_ONLY_MASK | Perl5Compiler.CASE_INSENSITIVE_MASK | Perl5Compiler.MULTILINE_MASK);    if (localMatcher.contains(multiPart, pattern)) {        return localMatcher.getMatch().group(1).trim();    } else {        return null;    }}
0
public String getPassword()
{    return null;}
0
public Principal getUserPrincipal()
{    return null;}
0
public void clear()
{    super.clear();    kerberosManager.clearSubjects();    setProperty(new CollectionProperty(AUTH_LIST, new ArrayList<>()));}
0
public void set(int index, String url, String user, String pass, String domain, String realm, Mechanism mechanism)
{    Authorization auth = new Authorization(url, user, pass, domain, realm, mechanism);    if (index >= 0) {        getAuthObjects().set(index, new TestElementProperty(auth.getName(), auth));    } else {        getAuthObjects().addItem(auth);    }}
0
public CollectionProperty getAuthObjects()
{    return (CollectionProperty) getProperty(AUTH_LIST);}
0
public int getColumnCount()
{    return COLUMN_COUNT;}
0
public String getColumnName(int column)
{    return COLUMN_RESOURCE_NAMES[column];}
0
public Class<?> getColumnClass(int column)
{    return COLUMN_RESOURCE_NAMES[column].getClass();}
0
public Authorization getAuthObjectAt(int row)
{    return (Authorization) getAuthObjects().get(row).getObjectValue();}
0
public boolean isEditable()
{    return true;}
0
public Authorization get(int i)
{    return (Authorization) getAuthObjects().get(i).getObjectValue();}
0
public String getAuthHeaderForURL(URL url)
{    Authorization auth = getAuthForURL(url);    if (auth == null) {        return null;    }    return auth.toBasicHeader();}
0
public Authorization getAuthForURL(URL url)
{    if (!isSupportedProtocol(url)) {        return null;    }                    URL url2 = null;    try {        if (url.getPort() == -1) {                        int port = url.getProtocol().equalsIgnoreCase(HTTPConstants.PROTOCOL_HTTP) ? HTTPConstants.DEFAULT_HTTP_PORT : HTTPConstants.DEFAULT_HTTPS_PORT;                        url2 = new URL(url.getProtocol(), url.getHost(), port, url.getPath());        } else if ((url.getPort() == HTTPConstants.DEFAULT_HTTP_PORT && url.getProtocol().equalsIgnoreCase(HTTPConstants.PROTOCOL_HTTP)) || (url.getPort() == HTTPConstants.DEFAULT_HTTPS_PORT && url.getProtocol().equalsIgnoreCase(HTTPConstants.PROTOCOL_HTTPS))) {            url2 = new URL(url.getProtocol(), url.getHost(), url.getPath());        }    } catch (MalformedURLException e) {                        }    String s1 = url.toString();    String s2 = null;    if (url2 != null) {        s2 = url2.toString();    }            for (JMeterProperty jMeterProperty : getAuthObjects()) {        Authorization auth = (Authorization) jMeterProperty.getObjectValue();        String uRL = auth.getURL();                if (s1.startsWith(uRL) || s2 != null && s2.startsWith(uRL)) {                        return auth;        }            }    return null;}
1
public boolean hasAuthForURL(URL url)
{    return getAuthForURL(url) != null;}
0
public Subject getSubjectForUrl(URL url)
{    Authorization authorization = getAuthForURL(url);    if (authorization != null && Mechanism.KERBEROS.equals(authorization.getMechanism())) {        return kerberosManager.getSubjectForUser(authorization.getUser(), authorization.getPass());    }    return null;}
0
public void addConfigElement(ConfigElement config)
{}
0
public void addAuth(Authorization newAuthorization)
{    boolean alreadyExists = false;        for (JMeterProperty jMeterProperty : getAuthObjects()) {        Authorization authorization = (Authorization) jMeterProperty.getObjectValue();        if (authorization == null) {            continue;        }        if (match(authorization, newAuthorization)) {            if (log.isDebugEnabled()) {                            }                        alreadyExists = true;            break;        }    }    if (!alreadyExists) {                getAuthObjects().addItem(newAuthorization);    }}
1
public void addAuth()
{    getAuthObjects().addItem(new Authorization());}
0
public boolean expectsModification()
{    return false;}
0
public void save(String authFile) throws IOException
{    File file = new File(authFile);    if (!file.isAbsolute()) {        file = new File(System.getProperty("user.dir"), authFile);    }    try (FileWriter fw = new FileWriter(file);        PrintWriter writer = new PrintWriter(fw)) {        writer.println("# JMeter generated Authorization file");        for (int i = 0; i < getAuthObjects().size(); i++) {            Authorization auth = (Authorization) getAuthObjects().get(i).getObjectValue();            writer.println(auth.toString());        }        writer.flush();    }}
0
public void addFile(String authFile) throws IOException
{    File file = new File(authFile);    if (!file.isAbsolute()) {        file = new File(System.getProperty("user.dir") + File.separator + authFile);    }    if (!file.canRead()) {        throw new IOException("The file you specified cannot be read.");    }    boolean ok = true;    try (BufferedReader reader = Files.newBufferedReader(file.toPath(), Charset.defaultCharset())) {        String line;        while ((line = reader.readLine()) != null) {            try {                if (line.startsWith("#") || JOrphanUtils.isBlank(line)) {                                        continue;                }                                String[] tokens = line.split("\t");                if (tokens.length >= 3) {                    String url = tokens[0];                    String user = tokens[1];                    String pass = tokens[2];                    String domain;                    String realm;                    if (tokens.length > 3) {                                                domain = tokens[3];                        realm = tokens[4];                    } else {                        domain = "";                        realm = "";                    }                    Mechanism mechanism;                    if (tokens.length > 5) {                                                mechanism = Mechanism.valueOf(tokens[5]);                    } else {                        mechanism = Mechanism.BASIC;                    }                    Authorization auth = new Authorization(url, user, pass, domain, realm, mechanism);                    getAuthObjects().addItem(auth);                }            } catch (NoSuchElementException e) {                                ok = false;            }        }    }    if (!ok) {        JMeterUtils.reportErrorToUser("One or more errors found when reading the Auth file - see the log file");    }}
1
public void remove(int index)
{    getAuthObjects().remove(index);}
0
public boolean getClearEachIteration()
{    return getPropertyAsBoolean(CLEAR, DEFAULT_CLEAR_VALUE);}
0
public void setClearEachIteration(boolean clear)
{    setProperty(CLEAR, clear, DEFAULT_CLEAR_VALUE);}
0
public int getAuthCount()
{    return getAuthObjects().size();}
0
 static boolean isSupportedProtocol(URL url)
{    String protocol = url.getProtocol().toLowerCase(java.util.Locale.ENGLISH);    return protocol.equals(HTTPConstants.PROTOCOL_HTTP) || protocol.equals(HTTPConstants.PROTOCOL_HTTPS);}
0
public void setupCredentials(Authorization auth, URL url, HttpClientContext localContext, CredentialsProvider credentialsProvider, String localhost)
{    String username = auth.getUser();    String realm = auth.getRealm();    String domain = auth.getDomain();    if (log.isDebugEnabled()) {            }    if (Mechanism.KERBEROS.equals(auth.getMechanism())) {        localContext.setAttribute(DynamicKerberosSchemeFactory.CONTEXT_ATTRIBUTE_STRIP_PORT, Boolean.valueOf(isStripPort(url)));        credentialsProvider.setCredentials(new AuthScope(null, -1, null), USE_JAAS_CREDENTIALS);    } else {        credentialsProvider.setCredentials(new AuthScope(url.getHost(), url.getPort(), realm.isEmpty() ? null : realm), new NTCredentials(username, auth.getPass(), localhost, domain));    }}
1
private boolean isStripPort(URL url)
{    if (STRIP_PORT) {        return true;    }    int port = url.getPort();    return port == HTTPConstants.DEFAULT_HTTP_PORT || port == HTTPConstants.DEFAULT_HTTPS_PORT;}
0
private boolean match(Authorization a, Authorization b)
{    return a.getURL().equals(b.getURL()) && a.getDomain().equals(b.getDomain()) && a.getRealm().equals(b.getRealm()) && a.getMechanism().equals(b.getMechanism());}
0
public void testStarted()
{    kerberosManager.clearSubjects();}
0
public void testEnded()
{}
0
public void testStarted(String host)
{    testStarted();}
0
public void testEnded(String host)
{}
0
public void testIterationStart(LoopIterationEvent event)
{    JMeterVariables jMeterVariables = JMeterContextService.getContext().getVariables();    if ((getControlledByThread() && !jMeterVariables.isSameUserOnNextIteration()) || (!getControlledByThread() && getClearEachIteration())) {        kerberosManager.clearSubjects();    }}
0
public boolean getControlledByThread()
{    return getPropertyAsBoolean(CONTROLLED_BY_THREADGROUP);}
0
public void setControlledByThread(boolean control)
{    setProperty(new BooleanProperty(CONTROLLED_BY_THREADGROUP, control));}
0
public boolean expectsModification()
{    return false;}
0
public void addConfigElement(ConfigElement config)
{}
0
public String getURL()
{    return getPropertyAsString(URL);}
0
public void setURL(String url)
{    setProperty(URL, url);}
0
public String getUser()
{    return getPropertyAsString(USERNAME);}
0
public void setUser(String user)
{    setProperty(USERNAME, user);}
0
public String getPass()
{    return getPropertyAsString(PASSWORD);}
0
public void setPass(String pass)
{    setProperty(PASSWORD, pass);}
0
public String getDomain()
{    return getPropertyAsString(DOMAIN);}
0
public void setDomain(String domain)
{    setProperty(DOMAIN, domain);}
0
public String getRealm()
{    return getPropertyAsString(REALM);}
0
public void setRealm(String realm)
{    setProperty(REALM, realm);}
0
public Mechanism getMechanism()
{    return Mechanism.valueOf(getPropertyAsString(MECHANISM, Mechanism.BASIC.name()));}
0
public void setMechanism(Mechanism mechanism)
{    setProperty(MECHANISM, mechanism.name(), Mechanism.BASIC.name());}
0
public String toString()
{    return getURL() + TAB + getUser() + TAB + getPass() + TAB + getDomain() + TAB + getRealm() + TAB + getMechanism();}
0
public String toBasicHeader()
{    return "Basic " + new String(Base64.getEncoder().encode((getUser() + ":" + getPass()).getBytes(Charset.defaultCharset())), Charset.defaultCharset());}
0
public boolean getControlledByThread()
{    return getPropertyAsBoolean(CONTROLLED_BY_THREAD);}
0
public void setControlledByThread(boolean control)
{    setProperty(new BooleanProperty(CONTROLLED_BY_THREAD, control));}
0
public String getLastModified()
{    return lastModified;}
0
public String getEtag()
{    return etag;}
0
public Date getExpires()
{    return expires;}
0
public String getVaryHeader()
{    return varyHeader;}
0
public String toString()
{    return "CacheEntry [lastModified=" + lastModified + ", etag=" + etag + ", expires=" + expires + ", varyHeader=" + varyHeader + "]";}
0
public void saveDetails(URLConnection conn, HTTPSampleResult res)
{    final String varyHeader = conn.getHeaderField(HTTPConstants.VARY);    if (isCacheable(res, varyHeader)) {        String lastModified = conn.getHeaderField(HTTPConstants.LAST_MODIFIED);        String expires = conn.getHeaderField(HTTPConstants.EXPIRES);        String etag = conn.getHeaderField(HTTPConstants.ETAG);        String url = conn.getURL().toString();        String cacheControl = conn.getHeaderField(HTTPConstants.CACHE_CONTROL);        String date = conn.getHeaderField(HTTPConstants.DATE);        setCache(lastModified, cacheControl, expires, etag, url, date, getVaryHeader(varyHeader, asHeaders(res.getRequestHeaders())));    }}
0
private Pair<String, String> getVaryHeader(String headerName, Header[] reqHeaders)
{    if (headerName == null) {        return null;    }    final Set<String> names = new HashSet<>(Arrays.asList(headerName.split(",\\s*")));    final Map<String, List<String>> values = new HashMap<>();    for (final String name : names) {        values.put(name, new ArrayList<String>());    }    for (Header header : reqHeaders) {        if (names.contains(header.getName())) {                        values.get(header.getName()).add(header.getValue());        }    }    return new ImmutablePair<>(headerName, values.toString());}
1
public void saveDetails(HttpResponse method, HTTPSampleResult res)
{    final String varyHeader = getHeader(method, HTTPConstants.VARY);    if (isCacheable(res, varyHeader)) {        String lastModified = getHeader(method, HTTPConstants.LAST_MODIFIED);        String expires = getHeader(method, HTTPConstants.EXPIRES);        String etag = getHeader(method, HTTPConstants.ETAG);        String cacheControl = getHeader(method, HTTPConstants.CACHE_CONTROL);        String date = getHeader(method, HTTPConstants.DATE);        setCache(lastModified, cacheControl, expires, etag, res.getUrlAsString(), date, getVaryHeader(varyHeader,         asHeaders(res.getRequestHeaders())));    }}
0
private void setCache(String lastModified, String cacheControl, String expires, String etag, String url, String date, Pair<String, String> varyHeader)
{            Date expiresDate = null;    if (useExpires) {                final String maxAge = "max-age=";        if (cacheControl != null && cacheControl.contains("no-store")) {                        return;        }        if (expires != null) {            expiresDate = extractExpiresDateFromExpires(expires);        }                if (cacheControl == null || !cacheControl.contains("no-cache")) {            expiresDate = extractExpiresDateFromCacheControl(lastModified, cacheControl, expires, etag, url, date, maxAge, expiresDate);                }    }    if (varyHeader != null) {        if (log.isDebugEnabled()) {                    }        getCache().put(url, new CacheEntry(lastModified, expiresDate, etag, varyHeader.getLeft()));        getCache().put(varyUrl(url, varyHeader.getLeft(), varyHeader.getRight()), new CacheEntry(lastModified, expiresDate, etag, null));    } else {        if (getCache().get(url) != null) {                        return;        }        CacheEntry cacheEntry = new CacheEntry(lastModified, expiresDate, etag, null);                getCache().put(url, cacheEntry);    }}
1
private Date extractExpiresDateFromExpires(String expires)
{    Date expiresDate;    try {        expiresDate = org.apache.http.client.utils.DateUtils.parseDate(expires);    } catch (IllegalArgumentException e) {                if (log.isDebugEnabled()) {                    }                expiresDate = CacheManager.EXPIRED_DATE;        }    return expiresDate;}
1
private Date extractExpiresDateFromCacheControl(String lastModified, String cacheControl, String expires, String etag, String url, String date, final String maxAge, Date defaultExpiresDate)
{        if (cacheControl != null && cacheControl.contains(maxAge)) {        long maxAgeInSecs = Long.parseLong(cacheControl.substring(cacheControl.indexOf(maxAge) + maxAge.length()).split("[, ]")[        0]);        return new Date(System.currentTimeMillis() + maxAgeInSecs * 1000);    } else if (expires == null) {                return calcExpiresDate(lastModified, cacheControl, expires, etag, url, date);    }    return defaultExpiresDate;}
0
private Date calcExpiresDate(String lastModified, String cacheControl, String expires, String etag, String url, String date)
{    if (!StringUtils.isEmpty(lastModified) && !StringUtils.isEmpty(date)) {        try {            Date responseDate = DateUtils.parseDate(date);            Date lastModifiedAsDate = DateUtils.parseDate(lastModified);                        return new Date(System.currentTimeMillis() + Math.round((responseDate.getTime() - lastModifiedAsDate.getTime()) * 0.1));        } catch (IllegalArgumentException e) {                        if (log.isWarnEnabled()) {                            }                        return new Date(System.currentTimeMillis() + ONE_YEAR_MS);        }    } else {                return new Date(System.currentTimeMillis() + ONE_YEAR_MS);    }}
1
private String getHeader(HttpResponse method, String name)
{    org.apache.http.Header hdr = method.getLastHeader(name);    return hdr != null ? hdr.getValue() : null;}
0
private boolean isCacheable(HTTPSampleResult res, String varyHeader)
{    if ("*".equals(varyHeader)) {        return false;    }    final String responseCode = res.getResponseCode();    return isCacheableMethod(res) && ((    "200".compareTo(responseCode) <= 0 &&     "299".compareTo(responseCode) >= 0) ||     "304".equals(responseCode));}
0
private boolean isCacheableMethod(HTTPSampleResult res)
{    final String resMethod = res.getHTTPMethod();    for (String method : CACHEABLE_METHODS) {        if (method.equalsIgnoreCase(resMethod)) {            return true;        }    }    return false;}
0
public void setHeaders(URL url, HttpRequestBase request)
{    CacheEntry entry = getEntry(url.toString(), request.getAllHeaders());    if (log.isDebugEnabled()) {            }    if (entry != null) {        final String lastModified = entry.getLastModified();        if (lastModified != null) {            request.setHeader(HTTPConstants.IF_MODIFIED_SINCE, lastModified);        }        final String etag = entry.getEtag();        if (etag != null) {            request.setHeader(HTTPConstants.IF_NONE_MATCH, etag);        }    }}
1
public void setHeaders(HttpURLConnection conn, org.apache.jmeter.protocol.http.control.Header[] headers, URL url)
{    CacheEntry entry = getEntry(url.toString(), headers != null ? asHeaders(headers) : new Header[0]);    if (log.isDebugEnabled()) {            }    if (entry != null) {        final String lastModified = entry.getLastModified();        if (lastModified != null) {            conn.addRequestProperty(HTTPConstants.IF_MODIFIED_SINCE, lastModified);        }        final String etag = entry.getEtag();        if (etag != null) {            conn.addRequestProperty(HTTPConstants.IF_NONE_MATCH, etag);        }    }}
1
public boolean inCache(URL url)
{    return entryStillValid(url, getEntry(url.toString(), null));}
0
public boolean inCache(URL url, Header[] allHeaders)
{    return entryStillValid(url, getEntry(url.toString(), allHeaders));}
0
public boolean inCache(URL url, org.apache.jmeter.protocol.http.control.Header[] allHeaders)
{    return entryStillValid(url, getEntry(url.toString(), asHeaders(allHeaders)));}
0
private Header[] asHeaders(org.apache.jmeter.protocol.http.control.Header[] allHeaders)
{    final List<Header> result = new ArrayList<>(allHeaders.length);    for (org.apache.jmeter.protocol.http.control.Header header : allHeaders) {        result.add(new HeaderAdapter(header));    }    return result.toArray(new Header[result.size()]);}
0
private Header[] asHeaders(String allHeaders)
{    List<Header> result = new ArrayList<>();    for (String line : allHeaders.split("\\n")) {        String[] splitted = line.split(": ", 2);        if (splitted.length == 2) {            result.add(new BasicHeader(splitted[0], splitted[1]));        }    }    return result.toArray(new Header[result.size()]);}
0
public HeaderElement[] getElements()
{    throw new UnsupportedOperationException();}
0
public String getName()
{    return delegate.getName();}
0
public String getValue()
{    return delegate.getValue();}
0
private boolean entryStillValid(URL url, CacheEntry entry)
{        if (entry != null && entry.getVaryHeader() == null) {        final Date expiresDate = entry.getExpires();        if (expiresDate != null) {            if (expiresDate.after(new Date())) {                                return true;            } else {                            }        } else {                    }    }    return false;}
1
private CacheEntry getEntry(String url, Header[] headers)
{    CacheEntry entry = getCache().get(url);        if (entry == null) {                return null;    }    if (entry.getVaryHeader() == null) {                return entry;    }    if (headers == null) {        if (log.isDebugEnabled()) {                    }        return null;    }    Pair<String, String> varyPair = getVaryHeader(entry.getVaryHeader(), headers);    if (varyPair != null) {        if (log.isDebugEnabled()) {                    }        return getEntry(varyUrl(url, entry.getVaryHeader(), varyPair.getRight()), null);    }    return null;}
1
private String varyUrl(String url, String headerName, String headerValue)
{    return "vary-" + headerName + "-" + headerValue + "-" + url;}
0
private Map<String, CacheEntry> getCache()
{    return localCache != null ? localCache : threadCache.get();}
0
public boolean getClearEachIteration()
{    return getPropertyAsBoolean(CLEAR);}
0
public void setClearEachIteration(boolean clear)
{    setProperty(new BooleanProperty(CLEAR, clear));}
0
public boolean getUseExpires()
{    return getPropertyAsBoolean(USE_EXPIRES);}
0
public void setUseExpires(boolean expires)
{    setProperty(new BooleanProperty(USE_EXPIRES, expires));}
0
public int getMaxSize()
{    return getPropertyAsInt(MAX_SIZE, DEFAULT_MAX_SIZE);}
0
public void setMaxSize(int size)
{    setProperty(MAX_SIZE, size, DEFAULT_MAX_SIZE);}
0
public void clear()
{    super.clear();    clearCache();}
0
private void clearCache()
{        threadCache = new InheritableThreadLocal<Map<String, CacheEntry>>() {        @Override        protected Map<String, CacheEntry> initialValue() {                                    @SuppressWarnings("unchecked")            Map<String, CacheEntry> map = new LRUMap(getMaxSize());            return Collections.synchronizedMap(map);        }    };}
1
protected Map<String, CacheEntry> initialValue()
{            @SuppressWarnings("unchecked")    Map<String, CacheEntry> map = new LRUMap(getMaxSize());    return Collections.synchronizedMap(map);}
0
public CacheManager createCacheManagerProxy()
{    return new CacheManager(getCache(), this.useExpires);}
0
public void testStarted()
{}
0
public void testEnded()
{}
0
public void testStarted(String host)
{}
0
public void testEnded(String host)
{}
0
public void testIterationStart(LoopIterationEvent event)
{    JMeterVariables jMeterVariables = JMeterContextService.getContext().getVariables();    if ((getControlledByThread() && !jMeterVariables.isSameUserOnNextIteration()) || (!getControlledByThread() && getClearEachIteration())) {        clearCache();    }        useExpires = getUseExpires();}
0
public void addConfigElement(ConfigElement config)
{}
0
public String getValue()
{    return getPropertyAsString(VALUE);}
0
public void setValue(String value)
{    this.setProperty(VALUE, value);}
0
public String getDomain()
{    return getPropertyAsString(DOMAIN);}
0
public void setDomain(String domain)
{    setProperty(DOMAIN, domain);}
0
public long getExpires()
{    return getPropertyAsLong(EXPIRES);}
0
public long getExpiresMillis()
{    return getPropertyAsLong(EXPIRES) * 1000;}
0
public void setExpires(long expires)
{    setProperty(new LongProperty(EXPIRES, expires));}
0
public boolean getSecure()
{    return getPropertyAsBoolean(SECURE);}
0
public void setSecure(boolean secure)
{    setProperty(new BooleanProperty(SECURE, secure));}
0
public String getPath()
{    return getPropertyAsString(PATH);}
0
public void setPath(String path)
{    setProperty(PATH, path);}
0
public void setPathSpecified(boolean b)
{    setProperty(PATH_SPECIFIED, b);}
0
public boolean isPathSpecified()
{    return getPropertyAsBoolean(PATH_SPECIFIED);}
0
public void setDomainSpecified(boolean b)
{    setProperty(DOMAIN_SPECIFIED, b);}
0
public boolean isDomainSpecified()
{    return getPropertyAsBoolean(DOMAIN_SPECIFIED);}
0
public String toString()
{    StringBuilder sb = new StringBuilder(80);    sb.append(getDomain());            sb.append(TAB).append("TRUE");    sb.append(TAB).append(getPath());    sb.append(TAB).append(JOrphanUtils.booleanToSTRING(getSecure()));    sb.append(TAB).append(getExpires());    sb.append(TAB).append(getName());    sb.append(TAB).append(getValue());    return sb.toString();}
0
public int getVersion()
{    return getPropertyAsInt(VERSION, DEFAULT_VERSION);}
0
public void setVersion(int version)
{    setProperty(VERSION, version, DEFAULT_VERSION);}
0
public Object clone()
{    CookieManager clone = (CookieManager) super.clone();    clone.initialCookies = initialCookies;    clone.cookieHandler = cookieHandler;    return clone;}
0
public String getPolicy()
{    return getPropertyAsString(POLICY, DEFAULT_POLICY);}
0
public void setCookiePolicy(String policy)
{    setProperty(POLICY, policy, DEFAULT_POLICY);}
0
public CollectionProperty getCookies()
{    return (CollectionProperty) getProperty(COOKIES);}
0
public int getCookieCount()
{        return getCookies().size();}
0
public boolean getClearEachIteration()
{    return getPropertyAsBoolean(CLEAR);}
0
public void setClearEachIteration(boolean clear)
{    setProperty(new BooleanProperty(CLEAR, clear));}
0
public boolean getControlledByThread()
{    return getPropertyAsBoolean(CONTROLLED_BY_THREADGROUP);}
0
public void setControlledByThread(boolean control)
{    setProperty(new BooleanProperty(CONTROLLED_BY_THREADGROUP, control));}
0
public String getImplementation()
{    return getPropertyAsString(IMPLEMENTATION, DEFAULT_IMPLEMENTATION);}
0
public void setImplementation(String implementation)
{    setProperty(IMPLEMENTATION, implementation, DEFAULT_IMPLEMENTATION);}
0
public void save(String authFile) throws IOException
{    File file = new File(authFile);    if (!file.isAbsolute()) {        file = new File(        System.getProperty("user.dir") + File.separator + authFile);    }    try (PrintWriter writer = new PrintWriter(new FileWriter(file))) {                        writer.println("# JMeter generated Cookie file");        long now = System.currentTimeMillis();        for (JMeterProperty jMeterProperty : getCookies()) {            Cookie cook = (Cookie) jMeterProperty.getObjectValue();            final long expiresMillis = cook.getExpiresMillis();            if (expiresMillis == 0 || expiresMillis > now) {                                writer.println(cookieToString(cook));            }        }        writer.flush();    }}
0
public void addFile(String cookieFile) throws IOException
{    File file = new File(cookieFile);    if (!file.isAbsolute()) {        file = new File(        System.getProperty("user.dir") + File.separator + cookieFile);    }    BufferedReader reader = null;    if (file.canRead()) {                reader = new BufferedReader(new FileReader(file));    } else {        throw new IOException("The file you specified cannot be read.");    }        String line;    try {        final CollectionProperty cookies = getCookies();        while ((line = reader.readLine()) != null) {            try {                if (line.startsWith("#") || JOrphanUtils.isBlank(line)) {                                        continue;                }                String[] st = JOrphanUtils.split(line, TAB, false);                final int _domain = 0;                                final int _path = 2;                final int _secure = 3;                final int _expires = 4;                final int _name = 5;                final int _value = 6;                final int _fields = 7;                if (st.length != _fields) {                    throw new IOException("Expected " + _fields + " fields, found " + st.length + " in " + line);                }                if (st[_path].length() == 0) {                                        st[_path] = "/";                }                boolean secure = Boolean.parseBoolean(st[_secure]);                long expires = Long.parseLong(st[_expires]);                if (expires == Long.MAX_VALUE) {                    expires = 0;                }                                Cookie cookie = new Cookie(st[_name], st[_value], st[_domain], st[_path], secure, expires);                cookies.addItem(cookie);            } catch (NumberFormatException e) {                throw new IOException("Error parsing cookie line\n\t'" + line + "'\n\t" + e);            }        }    } finally {        reader.close();    }}
0
private String cookieToString(Cookie c)
{    StringBuilder sb = new StringBuilder(80);    sb.append(c.getDomain());            sb.append(TAB).append("TRUE");    sb.append(TAB).append(c.getPath());    sb.append(TAB).append(JOrphanUtils.booleanToSTRING(c.getSecure()));    sb.append(TAB).append(c.getExpires());    sb.append(TAB).append(c.getName());    sb.append(TAB).append(c.getValue());    return sb.toString();}
0
public void recoverRunningVersion()
{}
0
public void setRunningVersion(boolean running)
{}
0
public void add(Cookie c)
{    String cv = c.getValue();    String cn = c.getName();        removeMatchingCookies(c);    if (DELETE_NULL_COOKIES && (null == cv || cv.length() == 0)) {        if (log.isDebugEnabled()) {                    }    } else {        if (log.isDebugEnabled()) {                    }        getCookies().addItem(c);        if (SAVE_COOKIES) {            JMeterContext context = getThreadContext();            if (context.isSamplingStarted()) {                context.getVariables().put(COOKIE_NAME_PREFIX + cn, cv);            }        }    }}
1
public void clear()
{    super.clear();        clearCookies();}
0
private void clearCookies()
{        setProperty(new CollectionProperty(COOKIES, new ArrayList<>()));}
1
public void remove(int index)
{        getCookies().remove(index);}
0
public Cookie get(int i)
{        return (Cookie) getCookies().get(i).getObjectValue();}
0
public String getCookieHeaderForURL(URL url)
{    return cookieHandler.getCookieHeaderForURL(getCookies(), url, ALLOW_VARIABLE_COOKIES);}
0
public void addCookieFromHeader(String cookieHeader, URL url)
{    cookieHandler.addCookieFromHeader(this, CHECK_COOKIES, cookieHeader, url);}
0
private boolean match(Cookie a, Cookie b)
{    return a.getName().equals(b.getName()) && a.getPath().equals(b.getPath()) && a.getDomain().equals(b.getDomain());}
0
 void removeMatchingCookies(Cookie newCookie)
{        PropertyIterator iter = getCookies().iterator();    while (iter.hasNext()) {        Cookie cookie = (Cookie) iter.next().getObjectValue();        if (cookie == null) {                        continue;        }        if (match(cookie, newCookie)) {            if (log.isDebugEnabled()) {                            }            iter.remove();        }    }}
1
public void testStarted()
{    initialCookies = getCookies();    try {        cookieHandler = (CookieHandler) ClassTools.construct(getImplementation(), getPolicy());    } catch (JMeterException e) {            }    if (log.isDebugEnabled()) {            }}
1
public void testEnded()
{}
0
public void testStarted(String host)
{    testStarted();}
0
public void testEnded(String host)
{}
0
public void testIterationStart(LoopIterationEvent event)
{    JMeterVariables jMeterVariables = JMeterContextService.getContext().getVariables();    if ((getControlledByThread() && !jMeterVariables.isSameUserOnNextIteration()) || (!getControlledByThread() && getClearEachIteration())) {                        setProperty(initialCookies.clone());    }}
1
 CookieHandler getCookieHandler()
{    return cookieHandler;}
0
protected byte[] generateGSSToken(final byte[] input, final Oid oid, final String authServer, final Credentials credentials) throws GSSException
{    final GSSManager manager = getManager();    final GSSName serverName = manager.createName("HTTP@" + authServer, GSSName.NT_HOSTBASED_SERVICE);    final GSSCredential gssCredential;    if (credentials instanceof KerberosCredentials) {        gssCredential = ((KerberosCredentials) credentials).getGSSCredential();    } else {        gssCredential = null;    }    final GSSContext gssContext = createDelegatingGSSContext(manager, oid, serverName, gssCredential);    try {        if (input != null) {            return gssContext.initSecContext(input, 0, input.length);        } else {            return gssContext.initSecContext(new byte[] {}, 0, 0);        }    } finally {        gssContext.dispose();    }}
0
 GSSContext createDelegatingGSSContext(final GSSManager manager, final Oid oid, final GSSName serverName, final GSSCredential gssCredential) throws GSSException
{    final GSSContext gssContext = manager.createContext(serverName.canonicalize(oid), oid, gssCredential, GSSContext.DEFAULT_LIFETIME);    gssContext.requestMutualAuth(true);    gssContext.requestCredDeleg(true);    return gssContext;}
0
protected byte[] generateGSSToken(final byte[] input, final Oid oid, final String authServer, final Credentials credentials) throws GSSException
{    final GSSManager manager = getManager();    final GSSName serverName = manager.createName("HTTP@" + authServer, GSSName.NT_HOSTBASED_SERVICE);    final GSSCredential gssCredential;    if (credentials instanceof KerberosCredentials) {        gssCredential = ((KerberosCredentials) credentials).getGSSCredential();    } else {        gssCredential = null;    }    final GSSContext gssContext = createDelegatingGSSContext(manager, oid, serverName, gssCredential);    try {        if (input != null) {            return gssContext.initSecContext(input, 0, input.length);        } else {            return gssContext.initSecContext(new byte[] {}, 0, 0);        }    } finally {        gssContext.dispose();    }}
0
 GSSContext createDelegatingGSSContext(final GSSManager manager, final Oid oid, final GSSName serverName, final GSSCredential gssCredential) throws GSSException
{    final GSSContext gssContext = manager.createContext(serverName.canonicalize(oid), oid, gssCredential, GSSContext.DEFAULT_LIFETIME);    gssContext.requestMutualAuth(true);    gssContext.requestCredDeleg(true);    return gssContext;}
0
public Object clone()
{    DNSCacheManager clone = (DNSCacheManager) super.clone();    clone.resolver = createResolver();    return clone;}
0
private Resolver createResolver()
{    CollectionProperty dnsServers = getServers();    try {        String[] serverNames = new String[dnsServers.size()];        int index = 0;        for (JMeterProperty jMeterProperty : dnsServers) {            serverNames[index] = jMeterProperty.getStringValue();            index++;        }        ExtendedResolver result = new ExtendedResolver(serverNames);        if (log.isDebugEnabled()) {                    }                result.setLoadBalance(true);        return result;    } catch (UnknownHostException uhe) {        this.initFailed = true;                return null;    }}
1
public InetAddress[] resolve(String host) throws UnknownHostException
{    InetAddress[] result = cache.get(host);        if (result != null || cache.containsKey(host)) {        if (log.isDebugEnabled()) {            logCache("hit", host, result);        }        return result;    } else if (isStaticHost(host)) {        InetAddress[] staticAddresses = fromStaticHost(host);        if (log.isDebugEnabled()) {            logCache("miss", host, staticAddresses);        }        cache.put(host, staticAddresses);        return staticAddresses;    } else {        InetAddress[] addresses = requestLookup(host);        if (log.isDebugEnabled()) {            logCache("miss", host, addresses);        }        cache.put(host, addresses);        return addresses;    }}
0
private void logCache(String hitOrMiss, String host, InetAddress[] addresses)
{    }
1
private boolean isStaticHost(String host)
{    JMeterProperty p = getProperty(HOSTS);    if (p instanceof NullProperty) {        removeProperty(HOSTS);        return false;    }    CollectionProperty property = (CollectionProperty) p;    PropertyIterator iterator = property.iterator();    while (iterator.hasNext()) {        TestElementProperty possibleEntry = (TestElementProperty) iterator.next();        if (log.isDebugEnabled()) {                    }        StaticHost entry = (StaticHost) possibleEntry.getObjectValue();        if (entry.getName().equalsIgnoreCase(host)) {            if (log.isDebugEnabled()) {                            }            return true;        }    }        return false;}
1
private InetAddress[] fromStaticHost(String host)
{    JMeterProperty p = getProperty(HOSTS);    if (p instanceof NullProperty) {        removeProperty(HOSTS);        return new InetAddress[0];    }    CollectionProperty property = (CollectionProperty) p;    for (JMeterProperty jMeterProperty : property) {        StaticHost entry = (StaticHost) ((TestElementProperty) jMeterProperty).getObjectValue();        if (!entry.getName().equals(host)) {                        continue;        }        List<InetAddress> addresses = new ArrayList<>();        for (String address : entry.getAddress().split("\\s*,\\s*")) {            try {                final InetAddress[] requestLookup = requestLookup(address);                if (requestLookup == null) {                    addAsLiteralAddress(addresses, address);                } else {                    addresses.addAll(Arrays.asList(requestLookup));                }            } catch (UnknownHostException e) {                addAsLiteralAddress(addresses, address);                            }        }        return addresses.toArray(new InetAddress[addresses.size()]);    }    return new InetAddress[0];}
1
private void addAsLiteralAddress(List<InetAddress> addresses, String address)
{    try {        addresses.add(InetAddress.getByName(address));    } catch (UnknownHostException e) {            }}
1
private InetAddress[] requestLookup(String host) throws UnknownHostException
{    InetAddress[] addresses = null;    if (isCustomResolver()) {        ExtendedResolver extendedResolver = getOrCreateResolver();        if (extendedResolver == null) {            throw new UnknownHostException("Could not resolve host:" + host + ", failed to initialize resolver or no resolver found");        } else if (extendedResolver.getResolvers().length > 0) {            addresses = customRequestLookup(host);        }    } else {        addresses = systemDefaultDnsResolver.resolve(host);        if (log.isDebugEnabled()) {            logCache("miss (resolved with system resolver)", host, addresses);        }    }    return addresses;}
0
private InetAddress[] customRequestLookup(String host) throws UnknownHostException
{    InetAddress[] addresses = null;    try {        Lookup lookup = new Lookup(host, Type.A);        lookup.setCache(lookupCache);        if (timeoutMs > 0) {            resolver.setTimeout(timeoutMs / 1000, timeoutMs % 1000);        }        lookup.setResolver(resolver);        Record[] records = lookup.run();        if (records == null || records.length == 0) {            throw new UnknownHostException("Failed to resolve host name: " + host);        }        addresses = new InetAddress[records.length];        for (int i = 0; i < records.length; i++) {            addresses[i] = ((ARecord) records[i]).getAddress();        }    } catch (TextParseException tpe) {                    }    return addresses;}
1
private ExtendedResolver getOrCreateResolver()
{    if (resolver == null && !initFailed) {        resolver = createResolver();    }    return (ExtendedResolver) resolver;}
0
public void testIterationStart(LoopIterationEvent event)
{    if (isClearEachIteration()) {        this.cache.clear();    }}
0
public void clear()
{    super.clear();        clearServers();    clearHosts();    this.cache.clear();    this.initFailed = false;    this.resolver = null;}
0
private void clearServers()
{        setProperty(new CollectionProperty(SERVERS, new ArrayList<String>()));}
1
public void addServer(String dnsServer)
{    getServers().addItem(dnsServer);}
0
public CollectionProperty getServers()
{    return (CollectionProperty) getProperty(SERVERS);}
0
private void clearHosts()
{        removeProperty(HOSTS);    cache.clear();}
1
public void addHost(String dnsHost, String addresses)
{    getHosts().addItem(new StaticHost(dnsHost, addresses));    cache.clear();}
0
public CollectionProperty getHosts()
{    if (getProperty(HOSTS) instanceof NullProperty) {        setProperty(new CollectionProperty(HOSTS, new ArrayList<StaticHost>()));    }    return (CollectionProperty) getProperty(HOSTS);}
0
public boolean isClearEachIteration()
{    return this.getPropertyAsBoolean(CLEAR_CACHE_EACH_ITER, DEFAULT_CLEAR_CACHE_EACH_ITER);}
0
public void setClearEachIteration(boolean clear)
{    setProperty(new BooleanProperty(CLEAR_CACHE_EACH_ITER, clear));}
0
public boolean isCustomResolver()
{    return this.getPropertyAsBoolean(IS_CUSTOM_RESOLVER, DEFAULT_IS_CUSTOM_RESOLVER);}
0
public void setCustomResolver(boolean isCustomResolver)
{    this.setProperty(IS_CUSTOM_RESOLVER, isCustomResolver);}
0
 void setTimeoutMs(int timeoutMs)
{    this.timeoutMs = timeoutMs;}
0
 int getTimeoutMs()
{    return timeoutMs;}
0
public AuthScheme create(final HttpContext context)
{    boolean stripPort = isEnabled(context.getAttribute(CONTEXT_ATTRIBUTE_STRIP_PORT), isStripPort());    if (isEnabled(context.getAttribute(CONTEXT_ATTRIBUTE_DELEGATE_CRED), DELEGATE_CRED)) {                return new DelegatingKerberosScheme(stripPort, isStripPort());    }        return new KerberosScheme(stripPort, isUseCanonicalHostname());}
1
private boolean isEnabled(Object contextAttribute, boolean defaultValue)
{    if (contextAttribute instanceof Boolean) {        return ((Boolean) contextAttribute).booleanValue();    }    return defaultValue;}
0
public AuthScheme create(final HttpContext context)
{    boolean stripPort = isEnabled(context.getAttribute(CONTEXT_ATTRIBUTE_STRIP_PORT), isStripPort());    if (isEnabled(context.getAttribute(CONTEXT_ATTRIBUTE_DELEGATE_CRED), DELEGATE_CRED)) {                return new DelegatingSPNegoScheme(stripPort, isStripPort());    }        return new SPNegoScheme(stripPort, isUseCanonicalHostname());}
1
private boolean isEnabled(Object contextAttribute, boolean defaultValue)
{    if (contextAttribute instanceof Boolean) {        return ((Boolean) contextAttribute).booleanValue();    }    return defaultValue;}
0
public TestElement createTestElement()
{    AjpSampler sampler = new AjpSampler();    modifyTestElement(sampler);    return sampler;}
0
public String getStaticLabel()
{        return JMeterUtils.getResString("ajp_sampler_title");}
0
public String getDocAnchor()
{        return super.getStaticLabel().replace(' ', '_');}
0
public TestElement createTestElement()
{    mirrorController = new HttpMirrorControl();        modifyTestElement(mirrorController);    return mirrorController;}
1
public void modifyTestElement(TestElement el)
{    configureTestElement(el);    if (el instanceof HttpMirrorControl) {        mirrorController = (HttpMirrorControl) el;        mirrorController.setPort(portField.getText());        mirrorController.setMaxPoolSize(maxPoolSizeField.getText());        mirrorController.setMaxQueueSize(maxQueueSizeField.getText());    }}
0
public String getLabelResource()
{        return "httpmirror_title";}
0
public Collection<String> getMenuCategories()
{    return Arrays.asList(MenuFactory.NON_TEST_ELEMENTS);}
0
public void configure(TestElement element)
{        super.configure(element);    mirrorController = (HttpMirrorControl) element;    portField.setText(mirrorController.getPortString());    maxPoolSizeField.setText(mirrorController.getMaxPoolSizeAsString());    maxQueueSizeField.setText(mirrorController.getMaxQueueSizeAsString());    repaint();}
1
public void actionPerformed(ActionEvent action)
{    String command = action.getActionCommand();    if (command.equals(ACTION_STOP)) {        mirrorController.stopHttpMirror();        stop.setEnabled(false);        start.setEnabled(true);    } else if (command.equals(ACTION_START)) {        modifyTestElement(mirrorController);        mirrorController.startHttpMirror();        start.setEnabled(false);        stop.setEnabled(true);    }}
0
private void init()
{        setLayout(new BorderLayout(0, 5));    setBorder(makeBorder());    add(makeTitlePanel(), BorderLayout.NORTH);    JPanel mainPanel = new JPanel(new BorderLayout());    Box myBox = Box.createVerticalBox();    myBox.add(createPortPanel());    mainPanel.add(myBox, BorderLayout.NORTH);    mainPanel.add(createControls(), BorderLayout.CENTER);    add(mainPanel, BorderLayout.CENTER);}
0
private JPanel createControls()
{        start = new JButton(JMeterUtils.getResString("start"));    start.addActionListener(this);    start.setActionCommand(ACTION_START);    start.setEnabled(true);        stop = new JButton(JMeterUtils.getResString("stop"));    stop.addActionListener(this);    stop.setActionCommand(ACTION_STOP);    stop.setEnabled(false);    JPanel panel = new JPanel();    panel.add(start);    panel.add(stop);    return panel;}
0
private JPanel createPortPanel()
{    portField = new JTextField(HttpMirrorControl.DEFAULT_PORT_S, 8);    portField.setName(HttpMirrorControl.PORT);        JLabel label = new JLabel(JMeterUtils.getResString("port"));    label.setLabelFor(portField);    maxPoolSizeField = new JTextField(Integer.toString(HttpMirrorControl.DEFAULT_MAX_POOL_SIZE), 8);    maxPoolSizeField.setName(HttpMirrorControl.MAX_POOL_SIZE);        JLabel mpsLabel = new JLabel(JMeterUtils.getResString("httpmirror_max_pool_size"));    mpsLabel.setLabelFor(maxPoolSizeField);    maxQueueSizeField = new JTextField(Integer.toString(HttpMirrorControl.DEFAULT_MAX_QUEUE_SIZE), 8);    maxQueueSizeField.setName(HttpMirrorControl.MAX_QUEUE_SIZE);        JLabel mqsLabel = new JLabel(JMeterUtils.getResString("httpmirror_max_queue_size"));    mqsLabel.setLabelFor(maxQueueSizeField);    HorizontalPanel panel = new HorizontalPanel();    panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("httpmirror_settings")));    panel.add(label);    panel.add(portField);    panel.add(mpsLabel);    panel.add(maxPoolSizeField);    panel.add(mqsLabel);    panel.add(maxQueueSizeField);    panel.add(Box.createHorizontalStrut(10));    return panel;}
0
public void clearGui()
{    super.clearGui();    portField.setText(HttpMirrorControl.DEFAULT_PORT_S);    maxPoolSizeField.setText(Integer.toString(HttpMirrorControl.DEFAULT_MAX_POOL_SIZE));}
0
public JPopupMenu createPopupMenu()
{    JPopupMenu pop = new JPopupMenu();    MenuFactory.addEditMenu(pop, true);    MenuFactory.addFileMenu(pop);    return pop;}
0
public void configure(TestElement element)
{    super.configure(element);    final HTTPSamplerBase samplerBase = (HTTPSamplerBase) element;    urlConfigGui.configure(element);    retrieveEmbeddedResources.setSelected(samplerBase.isImageParser());    concurrentDwn.setSelected(samplerBase.isConcurrentDwn());    concurrentPool.setText(samplerBase.getConcurrentPool());    useMD5.setSelected(samplerBase.useMD5());    embeddedRE.setText(samplerBase.getEmbeddedUrlRE());    if (!isAJP) {        sourceIpAddr.setText(samplerBase.getIpSource());        sourceIpType.setSelectedIndex(samplerBase.getIpSourceType());        proxyScheme.setText(samplerBase.getPropertyAsString(HTTPSamplerBase.PROXYSCHEME));        proxyHost.setText(samplerBase.getPropertyAsString(HTTPSamplerBase.PROXYHOST));        proxyPort.setText(samplerBase.getPropertyAsString(HTTPSamplerBase.PROXYPORT));        proxyUser.setText(samplerBase.getPropertyAsString(HTTPSamplerBase.PROXYUSER));        proxyPass.setText(samplerBase.getPropertyAsString(HTTPSamplerBase.PROXYPASS));        httpImplementation.setSelectedItem(samplerBase.getPropertyAsString(HTTPSamplerBase.IMPLEMENTATION));        connectTimeOut.setText(samplerBase.getPropertyAsString(HTTPSamplerBase.CONNECT_TIMEOUT));        responseTimeOut.setText(samplerBase.getPropertyAsString(HTTPSamplerBase.RESPONSE_TIMEOUT));    }}
0
public TestElement createTestElement()
{    HTTPSamplerBase sampler = new HTTPSamplerProxy();    modifyTestElement(sampler);    return sampler;}
0
public void modifyTestElement(TestElement sampler)
{    sampler.clear();    urlConfigGui.modifyTestElement(sampler);    final HTTPSamplerBase samplerBase = (HTTPSamplerBase) sampler;    samplerBase.setImageParser(retrieveEmbeddedResources.isSelected());    enableConcurrentDwn(retrieveEmbeddedResources.isSelected());    samplerBase.setConcurrentDwn(concurrentDwn.isSelected());    samplerBase.setConcurrentPool(concurrentPool.getText());    samplerBase.setMD5(useMD5.isSelected());    samplerBase.setEmbeddedUrlRE(embeddedRE.getText());    if (!isAJP) {        samplerBase.setIpSource(sourceIpAddr.getText());        samplerBase.setIpSourceType(sourceIpType.getSelectedIndex());        samplerBase.setProperty(HTTPSamplerBase.PROXYSCHEME, proxyScheme.getText(), "");        samplerBase.setProperty(HTTPSamplerBase.PROXYHOST, proxyHost.getText(), "");        samplerBase.setProperty(HTTPSamplerBase.PROXYPORT, proxyPort.getText(), "");        samplerBase.setProperty(HTTPSamplerBase.PROXYUSER, proxyUser.getText(), "");        samplerBase.setProperty(HTTPSamplerBase.PROXYPASS, String.valueOf(proxyPass.getPassword()), "");        samplerBase.setProperty(HTTPSamplerBase.IMPLEMENTATION, httpImplementation.getSelectedItem().toString(), "");        samplerBase.setProperty(HTTPSamplerBase.CONNECT_TIMEOUT, connectTimeOut.getText());        samplerBase.setProperty(HTTPSamplerBase.RESPONSE_TIMEOUT, responseTimeOut.getText());    }    super.configureTestElement(sampler);}
0
public String getLabelResource()
{        return "web_testing_title";}
0
private void init()
{        setLayout(new BorderLayout(0, 5));    setBorder(makeBorder());        urlConfigGui = new UrlConfigGui(true, true, true);        JPanel httpOptions = new HorizontalPanel();    httpOptions.add(getImplementationPanel());    httpOptions.add(getTimeOutPanel());        JPanel advancedPanel = new VerticalPanel();    if (!isAJP) {        advancedPanel.add(httpOptions);    }    advancedPanel.add(createEmbeddedRsrcPanel());    if (!isAJP) {        advancedPanel.add(createSourceAddrPanel());        advancedPanel.add(getProxyServerPanel());    }    advancedPanel.add(createOptionalTasksPanel());    JTabbedPane tabbedPane = new JTabbedPane();    tabbedPane.add(JMeterUtils.getResString("web_testing_basic"), urlConfigGui);    tabbedPane.add(JMeterUtils.getResString("web_testing_advanced"), advancedPanel);    JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT, makeTitlePanel(), tabbedPane);    splitPane.setOneTouchExpandable(true);    add(splitPane);}
0
private JPanel getTimeOutPanel()
{    JPanel timeOut = new HorizontalPanel();    timeOut.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("web_server_timeout_title")));    final JPanel connPanel = getConnectTimeOutPanel();    final JPanel reqPanel = getResponseTimeOutPanel();    timeOut.add(connPanel);    timeOut.add(reqPanel);    return timeOut;}
0
private JPanel getConnectTimeOutPanel()
{    connectTimeOut = new JTextField(10);        JLabel label = new JLabel(JMeterUtils.getResString("web_server_timeout_connect"));    label.setLabelFor(connectTimeOut);    JPanel panel = new JPanel(new BorderLayout(5, 0));    panel.add(label, BorderLayout.WEST);    panel.add(connectTimeOut, BorderLayout.CENTER);    return panel;}
0
private JPanel getResponseTimeOutPanel()
{    responseTimeOut = new JTextField(10);        JLabel label = new JLabel(JMeterUtils.getResString("web_server_timeout_response"));    label.setLabelFor(responseTimeOut);    JPanel panel = new JPanel(new BorderLayout(5, 0));    panel.add(label, BorderLayout.WEST);    panel.add(responseTimeOut, BorderLayout.CENTER);    return panel;}
0
protected JPanel createEmbeddedRsrcPanel()
{            retrieveEmbeddedResources = new JCheckBox(JMeterUtils.getResString("web_testing_retrieve_images"));        retrieveEmbeddedResources.addItemListener(e -> {        if (e.getStateChange() == ItemEvent.SELECTED) {            enableConcurrentDwn(true);        } else {            enableConcurrentDwn(false);        }    });            concurrentDwn = new JCheckBox(JMeterUtils.getResString("web_testing_concurrent_download"));    concurrentDwn.addItemListener(e -> {        if (retrieveEmbeddedResources.isSelected() && e.getStateChange() == ItemEvent.SELECTED) {            concurrentPool.setEnabled(true);        } else {            concurrentPool.setEnabled(false);        }    });        concurrentPool = new JTextField(2);    concurrentPool.setMinimumSize(new Dimension(10, (int) concurrentPool.getPreferredSize().getHeight()));    concurrentPool.setMaximumSize(new Dimension(30, (int) concurrentPool.getPreferredSize().getHeight()));    final JPanel embeddedRsrcPanel = new HorizontalPanel();    embeddedRsrcPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), JMeterUtils.getResString(    "web_testing_retrieve_title")));    embeddedRsrcPanel.add(retrieveEmbeddedResources);    embeddedRsrcPanel.add(concurrentDwn);    embeddedRsrcPanel.add(concurrentPool);            embeddedRE = new JLabeledTextField(JMeterUtils.getResString("web_testing_embedded_url_pattern"), 20);    embeddedRsrcPanel.add(embeddedRE);    return embeddedRsrcPanel;}
0
protected final JPanel getImplementationPanel()
{    JPanel implPanel = new HorizontalPanel();    implPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("web_server_client")));        implPanel.add(new JLabel(JMeterUtils.getResString("http_implementation")));        httpImplementation.addItem("");    implPanel.add(httpImplementation);    return implPanel;}
0
protected JPanel createOptionalTasksPanel()
{        final JPanel checkBoxPanel = new VerticalPanel();    checkBoxPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), JMeterUtils.getResString(    "optional_tasks")));            useMD5 = new JCheckBox(JMeterUtils.getResString("response_save_as_md5"));    checkBoxPanel.add(useMD5);    return checkBoxPanel;}
0
protected JPanel createSourceAddrPanel()
{    final JPanel sourceAddrPanel = new HorizontalPanel();    sourceAddrPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), JMeterUtils.getResString(    "web_testing_source_ip")));            sourceIpType.setSelectedIndex(HTTPSamplerBase.SourceType.HOSTNAME.ordinal());    sourceAddrPanel.add(sourceIpType);    sourceIpAddr = new JTextField();    sourceAddrPanel.add(sourceIpAddr);    return sourceAddrPanel;}
0
public Dimension getPreferredSize()
{    return getMinimumSize();}
0
public void clearGui()
{    super.clearGui();    retrieveEmbeddedResources.setSelected(false);    concurrentDwn.setSelected(false);    concurrentPool.setText(String.valueOf(HTTPSamplerBase.CONCURRENT_POOL_SIZE));    enableConcurrentDwn(false);    useMD5.setSelected(false);    urlConfigGui.clear();        embeddedRE.setText("");    if (!isAJP) {                sourceIpAddr.setText("");                sourceIpType.setSelectedIndex(HTTPSamplerBase.SourceType.HOSTNAME.ordinal());                proxyScheme.setText("");                proxyHost.setText("");                proxyPort.setText("");                proxyUser.setText("");                proxyPass.setText("");                httpImplementation.setSelectedItem("");                connectTimeOut.setText("");                responseTimeOut.setText("");    }}
0
private void enableConcurrentDwn(boolean enable)
{    if (enable) {        concurrentDwn.setEnabled(true);        embeddedRE.setEnabled(true);        if (concurrentDwn.isSelected()) {            concurrentPool.setEnabled(true);        }    } else {        concurrentDwn.setEnabled(false);        concurrentPool.setEnabled(false);        embeddedRE.setEnabled(false);    }}
0
protected final JPanel getProxyServerPanel()
{    JPanel proxyServer = new HorizontalPanel();    proxyServer.add(getProxySchemePanel(), BorderLayout.WEST);    proxyServer.add(getProxyHostPanel(), BorderLayout.CENTER);    proxyServer.add(getProxyPortPanel(), BorderLayout.EAST);    JPanel proxyLogin = new HorizontalPanel();    proxyLogin.add(getProxyUserPanel());    proxyLogin.add(getProxyPassPanel());    JPanel proxyServerPanel = new HorizontalPanel();    proxyServerPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("web_proxy_server_title")));    proxyServerPanel.add(proxyServer);    proxyServerPanel.add(proxyLogin);    return proxyServerPanel;}
0
private JPanel getProxySchemePanel()
{    proxyScheme = new JTextField(5);        JLabel label = new JLabel(JMeterUtils.getResString("web_proxy_scheme"));    label.setLabelFor(proxyScheme);    label.setFont(FONT_SMALL);    JPanel panel = new JPanel(new BorderLayout(5, 0));    panel.add(label, BorderLayout.WEST);    panel.add(proxyScheme, BorderLayout.CENTER);    return panel;}
0
private JPanel getProxyHostPanel()
{    proxyHost = new JTextField(10);        JLabel label = new JLabel(JMeterUtils.getResString("web_server_domain"));    label.setLabelFor(proxyHost);    label.setFont(FONT_SMALL);    JPanel panel = new JPanel(new BorderLayout(5, 0));    panel.add(label, BorderLayout.WEST);    panel.add(proxyHost, BorderLayout.CENTER);    return panel;}
0
private JPanel getProxyPortPanel()
{    proxyPort = new JTextField(10);        JLabel label = new JLabel(JMeterUtils.getResString("web_server_port"));    label.setLabelFor(proxyPort);    label.setFont(FONT_SMALL);    JPanel panel = new JPanel(new BorderLayout(5, 0));    panel.add(label, BorderLayout.WEST);    panel.add(proxyPort, BorderLayout.CENTER);    return panel;}
0
private JPanel getProxyUserPanel()
{    proxyUser = new JTextField(5);        JLabel label = new JLabel(JMeterUtils.getResString("username"));    label.setLabelFor(proxyUser);    label.setFont(FONT_SMALL);    JPanel panel = new JPanel(new BorderLayout(5, 0));    panel.add(label, BorderLayout.WEST);    panel.add(proxyUser, BorderLayout.CENTER);    return panel;}
0
private JPanel getProxyPassPanel()
{    proxyPass = new JPasswordField(5);        JLabel label = new JLabel(JMeterUtils.getResString("password"));    label.setLabelFor(proxyPass);    label.setFont(FONT_SMALL);    JPanel panel = new JPanel(new BorderLayout(5, 0));    panel.add(label, BorderLayout.WEST);    panel.add(proxyPass, BorderLayout.CENTER);    return panel;}
0
public String getLabelResource()
{        return "record_controller_title";}
0
public TestElement createTestElement()
{    RecordingController con = new RecordingController();    super.configureTestElement(con);    return con;}
0
private void init()
{    JPanel panel = new JPanel();        clearButton = new JButton(JMeterUtils.getResString("record_controller_clear_samples"));    clearButton.addActionListener(this);    panel.add(clearButton);    panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));    add(panel);}
0
public void actionPerformed(ActionEvent e)
{    if (e.getSource() == clearButton) {        GuiPackage guiPackage = GuiPackage.getInstance();        JMeterTreeNode currentNode = guiPackage.getTreeListener().getCurrentNode();        if (!(currentNode.getUserObject() instanceof org.apache.jmeter.protocol.http.control.RecordingController)) {            Toolkit.getDefaultToolkit().beep();            return;        }        try {            guiPackage.updateCurrentNode();            JMeterTreeModel treeModel = guiPackage.getTreeModel();            int childCount = currentNode.getChildCount();            for (int i = 0; i < childCount; i++) {                JMeterTreeNode node = (JMeterTreeNode) currentNode.getChildAt(0);                treeModel.removeNodeFromParent(node);            }        } catch (Exception err) {            Toolkit.getDefaultToolkit().beep();                    }    }}
1
public void addCookieFromHeader(CookieManager cookieManager, boolean checkCookies, String cookieHeader, URL url)
{    boolean debugEnabled = log.isDebugEnabled();    if (debugEnabled) {            }    String protocol = url.getProtocol();    String host = url.getHost();    int port = HTTPSamplerBase.getDefaultPort(protocol, url.getPort());    String path = url.getPath();    boolean isSecure = HTTPSamplerBase.isSecure(protocol);    List<org.apache.http.cookie.Cookie> cookies = null;    CookieOrigin cookieOrigin = new CookieOrigin(host, port, path, isSecure);    BasicHeader basicHeader = new BasicHeader(HTTPConstants.HEADER_SET_COOKIE, cookieHeader);    try {        cookies = cookieSpec.parse(basicHeader, cookieOrigin);    } catch (MalformedCookieException e) {            }    if (cookies == null) {        return;    }    for (org.apache.http.cookie.Cookie cookie : cookies) {        try {            if (checkCookies) {                try {                    cookieSpec.validate(cookie, cookieOrigin);                } catch (MalformedCookieException e) {                                                            continue;                }            }            Date expiryDate = cookie.getExpiryDate();            long exp = 0;            if (expiryDate != null) {                exp = expiryDate.getTime();            }            Cookie newCookie = new Cookie(cookie.getName(), cookie.getValue(), cookie.getDomain(), cookie.getPath(), cookie.isSecure(), exp / 1000, ((BasicClientCookie) cookie).containsAttribute(ClientCookie.PATH_ATTR), ((BasicClientCookie) cookie).containsAttribute(ClientCookie.DOMAIN_ATTR), cookie.getVersion());                        if (exp == 0 || exp >= System.currentTimeMillis()) {                                cookieManager.add(newCookie);            } else {                cookieManager.removeMatchingCookies(newCookie);                if (debugEnabled) {                                    }            }        } catch (IllegalArgumentException e) {                    }    }}
1
public String getCookieHeaderForURL(CollectionProperty cookiesCP, URL url, boolean allowVariableCookie)
{    List<org.apache.http.cookie.Cookie> c = getCookiesForUrl(cookiesCP, url, allowVariableCookie);    boolean debugEnabled = log.isDebugEnabled();    if (debugEnabled) {            }    if (c.isEmpty()) {        return null;    }    List<Header> lstHdr = cookieSpec.formatCookies(c);    StringBuilder sbHdr = new StringBuilder();    for (Header header : lstHdr) {        sbHdr.append(header.getValue());    }    return sbHdr.toString();}
1
 List<org.apache.http.cookie.Cookie> getCookiesForUrl(CollectionProperty cookiesCP, URL url, boolean allowVariableCookie)
{    List<org.apache.http.cookie.Cookie> cookies = new ArrayList<>();    for (JMeterProperty jMeterProperty : cookiesCP) {        Cookie jmcookie = (Cookie) jMeterProperty.getObjectValue();                if (allowVariableCookie) {            jmcookie.setRunningVersion(true);        }        cookies.add(makeCookie(jmcookie));        if (allowVariableCookie) {            jmcookie.setRunningVersion(false);        }    }    String host = url.getHost();    String protocol = url.getProtocol();    int port = HTTPSamplerBase.getDefaultPort(protocol, url.getPort());    String path = url.getPath();    boolean secure = HTTPSamplerBase.isSecure(protocol);    CookieOrigin cookieOrigin = new CookieOrigin(host, port, path, secure);    List<org.apache.http.cookie.Cookie> cookiesValid = new ArrayList<>();    for (org.apache.http.cookie.Cookie cookie : cookies) {        if (cookieSpec.match(cookie, cookieOrigin)) {            cookiesValid.add(cookie);        }    }    return cookiesValid;}
0
private org.apache.http.cookie.Cookie makeCookie(Cookie jmc)
{    long exp = jmc.getExpiresMillis();    BasicClientCookie ret = new BasicClientCookie(jmc.getName(), jmc.getValue());    ret.setDomain(jmc.getDomain());    ret.setPath(jmc.getPath());        ret.setExpiryDate(exp > 0 ? new Date(exp) : null);    ret.setSecure(jmc.getSecure());    ret.setVersion(jmc.getVersion());    if (jmc.isDomainSpecified()) {        ret.setAttribute(ClientCookie.DOMAIN_ATTR, jmc.getDomain());    }    if (jmc.isPathSpecified()) {        ret.setAttribute(ClientCookie.PATH_ATTR, jmc.getPath());    }    return ret;}
0
public String getDefaultPolicy()
{    return DEFAULT_POLICY_NAME;}
0
public String[] getPolicies()
{    return AVAILABLE_POLICIES;}
0
public void addConfigElement(ConfigElement config)
{}
0
public boolean expectsModification()
{    return false;}
0
public String getName()
{    return getPropertyAsString(HNAME);}
0
public void setName(String name)
{    this.setProperty(HNAME, name);}
0
public String getValue()
{    return getPropertyAsString(VALUE);}
0
public void setValue(String value)
{    this.setProperty(VALUE, value);}
0
public String toString()
{        return getName() + "\t" + getValue();}
0
public void clear()
{    super.clear();    setProperty(new CollectionProperty(HEADERS, new ArrayList<>()));}
0
public CollectionProperty getHeaders()
{    return (CollectionProperty) getProperty(HEADERS);}
0
public int getColumnCount()
{    return COLUMN_COUNT;}
0
public String getColumnName(int column)
{    return COLUMN_RESOURCE_NAMES[column];}
0
public Class<? extends String> getColumnClass(int column)
{    return COLUMN_RESOURCE_NAMES[column].getClass();}
0
public Header getHeader(int row)
{    return (Header) getHeaders().get(row).getObjectValue();}
0
public void save(String headFile) throws IOException
{    File file = new File(headFile);    if (!file.isAbsolute()) {        file = new File(        System.getProperty("user.dir") + File.separator + headFile);    }    try (FileWriter fw = new FileWriter(file);        PrintWriter writer = new PrintWriter(fw)) {                        writer.println("# JMeter generated Header file");        final CollectionProperty hdrs = getHeaders();        for (int i = 0; i < hdrs.size(); i++) {            final JMeterProperty hdr = hdrs.get(i);            Header head = (Header) hdr.getObjectValue();            writer.println(head.toString());        }    }}
0
public void addFile(String headerFile) throws IOException
{    File file = new File(headerFile);    if (!file.isAbsolute()) {        file = new File(        System.getProperty("user.dir") + File.separator + headerFile);    }    if (!file.canRead()) {        throw new IOException("The file you specified cannot be read.");    }    try (BufferedReader reader = Files.newBufferedReader(file.toPath(), Charset.defaultCharset())) {        String line;        while ((line = reader.readLine()) != null) {            try {                if (line.startsWith("#") || JOrphanUtils.isBlank(line)) {                                        continue;                }                                String[] st = JOrphanUtils.split(line, "\t", " ");                int name = 0;                int value = 1;                Header header = new Header(st[name], st[value]);                getHeaders().addItem(header);            } catch (Exception e) {                throw new IOException("Error parsing header line\n\t'" + line + "'\n\t" + e);            }        }    }}
0
public void add(Header h)
{    getHeaders().addItem(h);}
0
public void add()
{    getHeaders().addItem(new Header());}
0
public void remove(int index)
{    getHeaders().remove(index);}
0
public int size()
{    return getHeaders().size();}
0
public Header get(int i)
{    return (Header) getHeaders().get(i).getObjectValue();}
0
public void removeHeaderNamed(String name)
{    List<Integer> removeIndices = new ArrayList<>();    for (int i = getHeaders().size() - 1; i >= 0; i--) {        Header header = (Header) getHeaders().get(i).getObjectValue();        if (header == null) {            continue;        }        if (header.getName().equalsIgnoreCase(name)) {            removeIndices.add(Integer.valueOf(i));        }    }    for (Integer indice : removeIndices) {        getHeaders().remove(indice.intValue());    }}
0
public HeaderManager merge(TestElement element, boolean preferLocalValues)
{    return merge(element);}
0
public HeaderManager merge(TestElement element)
{    if (!(element instanceof HeaderManager)) {        throw new IllegalArgumentException("Cannot merge type:" + this.getClass().getName() + " with type:" + element.getClass().getName());    }        HeaderManager merged = (HeaderManager) this.clone();    HeaderManager other = (HeaderManager) element;        for (int i = 0; i < other.getHeaders().size(); i++) {        Header otherHeader = other.get(i);        boolean found = false;                for (int j = 0; j < merged.getHeaders().size(); j++) {            Header mergedHeader = merged.get(j);            if (mergedHeader.getName().equalsIgnoreCase(otherHeader.getName())) {                                found = true;                                break;            }        }        if (!found) {                        merged.add(otherHeader);        }    }        merged.setName(merged.getName() + ":" + other.getName());    return merged;}
0
public int replace(String regex, String replaceBy, boolean caseSensitive) throws Exception
{    final CollectionProperty hdrs = getHeaders();    int totalReplaced = 0;    for (int i = 0; i < hdrs.size(); i++) {        final JMeterProperty hdr = hdrs.get(i);        Header head = (Header) hdr.getObjectValue();        totalReplaced += JOrphanUtils.replaceValue(regex, replaceBy, caseSensitive, head.getValue(), head::setValue);    }    return totalReplaced;}
0
private void initPort(int port)
{    setProperty(new IntegerProperty(PORT, port));}
0
public void setPort(int port)
{    initPort(port);}
0
public void setPort(String port)
{    setProperty(PORT, port);}
0
public int getPort()
{    return getPropertyAsInt(PORT);}
0
public String getPortString()
{    return getPropertyAsString(PORT);}
0
public String getMaxPoolSizeAsString()
{    return getPropertyAsString(MAX_POOL_SIZE);}
0
private int getMaxPoolSize()
{    return getPropertyAsInt(MAX_POOL_SIZE, DEFAULT_MAX_POOL_SIZE);}
0
public void setMaxPoolSize(String maxPoolSize)
{    setProperty(MAX_POOL_SIZE, maxPoolSize);}
0
public String getMaxQueueSizeAsString()
{    return getPropertyAsString(MAX_QUEUE_SIZE);}
0
private int getMaxQueueSize()
{    return getPropertyAsInt(MAX_QUEUE_SIZE, DEFAULT_MAX_QUEUE_SIZE);}
0
public void setMaxQueueSize(String maxQueueSize)
{    setProperty(MAX_QUEUE_SIZE, maxQueueSize);}
0
public int getDefaultPort()
{    return DEFAULT_PORT;}
0
public void startHttpMirror()
{    server = new HttpMirrorServer(getPort(), getMaxPoolSize(), getMaxQueueSize());    server.start();    GuiPackage instance = GuiPackage.getInstance();    if (instance != null) {        instance.register(server);    }}
0
public void stopHttpMirror()
{    if (server != null) {        server.stopServer();        GuiPackage instance = GuiPackage.getInstance();        if (instance != null) {            instance.unregister(server);        }        try {                        server.join(1000);        } catch (InterruptedException e) {            Thread.currentThread().interrupt();        }        server = null;    }}
0
public boolean canRemove()
{    return null == server;}
0
public boolean isServerAlive()
{    return server != null && server.isAlive();}
0
public void run()
{    except = null;    isRunning = true;    ServerSocket mainSocket = null;    ThreadPoolExecutor threadPoolExecutor = null;    if (maxThreadPoolSize > 0) {        threadPoolExecutor = new ThreadPoolExecutor(maxThreadPoolSize / 2, maxThreadPoolSize, KEEP_ALIVE_TIME, TimeUnit.SECONDS, new ArrayBlockingQueue<>(maxQueueSize));        threadPoolExecutor.setRejectedExecutionHandler(new ThreadPoolExecutor.DiscardPolicy());    }    try {        getLogger().info("Creating HttpMirror ... on port {}", daemonPort);        mainSocket = new ServerSocket(daemonPort);        mainSocket.setSoTimeout(ACCEPT_TIMEOUT);        getLogger().info("HttpMirror up and running!");        while (isRunning) {            try {                                Socket clientSocket = mainSocket.accept();                if (isRunning) {                                        if (threadPoolExecutor != null) {                        threadPoolExecutor.execute(new HttpMirrorThread(clientSocket));                    } else {                        Thread thd = new Thread(new HttpMirrorThread(clientSocket));                        getLogger().debug("Starting new Mirror thread");                        thd.start();                    }                } else {                    getLogger().warn("Server not running");                    JOrphanUtils.closeQuietly(clientSocket);                }            } catch (InterruptedIOException e) {                                    }        }        getLogger().info("HttpMirror Server stopped");    } catch (BindException e) {        except = e;        getLogger().warn("Could not bind HttpMirror to port {}. Maybe there is already a HttpMirror running?", daemonPort);    } catch (Exception e) {        except = e;        getLogger().warn("HttpMirror Server stopped", e);    } finally {        if (threadPoolExecutor != null) {            threadPoolExecutor.shutdownNow();        }        JOrphanUtils.closeQuietly(mainSocket);    }}
0
public void stopServer()
{    isRunning = false;}
0
public Exception getException()
{    return except;}
0
public static void main(String[] args)
{    CLArgsParser clArgsParser = new CLArgsParser(args, options);    String error = clArgsParser.getErrorString();    if (error != null) {                System.err.println("Error: " + error);                System.out.println("Usage");                System.out.println(CLUtil.describeOptions(options).toString());                        System.out.println("Error: " + error);        return;    }    if (clArgsParser.getArgumentById(HELP_OPT_ID) != null) {                System.out.println(CLUtil.describeOptions(options).toString());        return;    }    int port = getHttpPort(args, clArgsParser);    if (System.getProperty("log4j.configurationFile") == null) {                Configurator.setRootLevel(Level.INFO);    }    setLogLevel(clArgsParser);    new HttpMirrorServer(port).start();}
0
private static int getHttpPort(String[] args, CLArgsParser parser)
{    int port = HttpMirrorControl.DEFAULT_PORT;    if (parser.getArgumentById(PORT_OPT_ID) != null) {        CLOption option = parser.getArgumentById(PORT_OPT_ID);        String value = option.getArgument(0);        try {            port = Integer.parseInt(value);        } catch (NumberFormatException ignored) {        }    } else if (args.length > 0) {        try {            port = Integer.parseInt(args[0]);        } catch (NumberFormatException ignored) {        }    }    return port;}
0
private static void setLogLevel(CLArgsParser parser)
{    CLOption logLevelOption = parser.getArgumentById(LOGLEVEL_OPT_ID);    if (logLevelOption == null) {        return;    }    String name = logLevelOption.getArgument(0);    final Level logLevel = Level.getLevel(name);    if (logLevel == null) {        getLogger().warn("Invalid log level '{}'.", name);        return;    }    String value = logLevelOption.getArgument(1);    if (StringUtils.isEmpty(value)) {                        getLogger().info("Setting root log level to '{}'", name);        Configurator.setRootLevel(logLevel);    } else {                String loggerName = name;        if (name.startsWith("jmeter") || name.startsWith("jorphan")) {                        loggerName = "org.apache." + name;        }                getLogger().info("Setting log level to '{}' for '{}'.", value, loggerName);        Configurator.setAllLevels(loggerName, logLevel);    }}
0
private static Logger getLogger()
{    return LazyHolder.LOGGER;}
0
public void run()
{        BufferedInputStream in = null;    BufferedOutputStream out = null;    try {        in = new BufferedInputStream(clientSocket.getInputStream());                                                int contentLength = -1;        boolean isChunked = false;        byte[] buffer = new byte[1024];        StringBuilder headers = new StringBuilder();        int length = 0;        int positionOfBody = 0;        ByteArrayOutputStream baos = new ByteArrayOutputStream();        while (positionOfBody <= 0 && ((length = in.read(buffer)) != -1)) {                                    baos.write(buffer, 0, length);            headers.append(new String(buffer, 0, length, ISO_8859_1));                        positionOfBody = getPositionOfBody(headers.toString());        }        baos.close();        final String headerString = headers.toString();        if (headerString.length() == 0 || headerString.indexOf('\r') < 0) {                        return;        }                final String firstLine = headerString.substring(0, headerString.indexOf('\r'));        final String[] requestParts = firstLine.split("\\s+");        final String requestMethod = requestParts[0];        final String requestPath = requestParts[1];        final HashMap<String, String> parameters = new HashMap<>();        if (HTTPConstants.GET.equals(requestMethod)) {            int querypos = requestPath.indexOf('?');            if (querypos >= 0) {                String query;                try {                                        URI uri = new URI(requestPath);                    query = uri.getQuery();                } catch (URISyntaxException e) {                                        query = requestPath.substring(querypos + 1);                }                if (query != null) {                    String[] params = query.split("&");                    for (String param : params) {                        String[] parts = param.split("=", 2);                        if (parts.length == 2) {                            parameters.put(parts[0], parts[1]);                        } else {                                                        parameters.put(parts[0], "");                        }                    }                }            }        }        final boolean verbose = parameters.containsKey(VERBOSE);        if (verbose) {                        System.out.println(firstLine);                    }                        String responseStatusValue = getRequestHeaderValue(headerString, "X-ResponseStatus");        if (responseStatusValue == null) {            responseStatusValue = "200 OK";        }                if (parameters.containsKey(REDIRECT)) {            responseStatusValue = "302 Temporary Redirect";        }        if (parameters.containsKey(STATUS)) {            responseStatusValue = parameters.get(STATUS);        }                out = new BufferedOutputStream(clientSocket.getOutputStream());                        out.write(("HTTP/1.0 " + responseStatusValue).getBytes(ISO_8859_1));        out.write(CRLF);                out.write("Content-Type: text/plain".getBytes(ISO_8859_1));        out.write(CRLF);        if (parameters.containsKey(REDIRECT)) {            final String redirectLocation = HTTPConstants.HEADER_LOCATION + ": " + parameters.get(REDIRECT);            if (verbose) {                                System.out.println(redirectLocation);                            }            out.write(redirectLocation.getBytes(ISO_8859_1));            out.write(CRLF);        }                        String headersValue = getRequestHeaderValue(headerString, "X-SetHeaders");        if (headersValue != null) {            String[] headersToSet = headersValue.split("\\|");            for (String string : headersToSet) {                out.write(string.getBytes(ISO_8859_1));                out.write(CRLF);            }        }                        String responseLengthValue = getRequestHeaderValue(headerString, "X-ResponseLength");        int responseLength = -1;        if (responseLengthValue != null) {            responseLength = Integer.parseInt(responseLengthValue);        }                        String cookieHeaderValue = getRequestHeaderValue(headerString, "X-SetCookie");        if (cookieHeaderValue != null) {            out.write("Set-Cookie: ".getBytes(ISO_8859_1));            out.write(cookieHeaderValue.getBytes(ISO_8859_1));            out.write(CRLF);        }        out.write(CRLF);        out.flush();        if (responseLength >= 0) {            out.write(baos.toByteArray(), 0, Math.min(baos.toByteArray().length, responseLength));        } else {            out.write(baos.toByteArray());        }                String contentLengthHeaderValue = getRequestHeaderValue(headerString, HTTPConstants.HEADER_CONTENT_LENGTH);        if (contentLengthHeaderValue != null) {            contentLength = Integer.parseInt(contentLengthHeaderValue);        }                        String sleepHeaderValue = getRequestHeaderValue(headerString, "X-Sleep");        if (sleepHeaderValue != null) {            TimeUnit.MILLISECONDS.sleep(Integer.parseInt(sleepHeaderValue));        }        String transferEncodingHeaderValue = getRequestHeaderValue(headerString, HTTPConstants.TRANSFER_ENCODING);        if (transferEncodingHeaderValue != null) {                        isChunked = transferEncodingHeaderValue.equalsIgnoreCase("chunked");                        if (!isChunked) {                            }        }                                                length = 0;        if (contentLength > 0) {                                                int totalReadBytes = headerString.length() - positionOfBody - 2;                                    while ((totalReadBytes < contentLength) && ((length = in.read(buffer)) != -1)) {                                out.write(buffer, 0, length);                totalReadBytes += length;                            }        } else if (isChunked) {                                                                                                while (in.available() > 0 && ((length = in.read(buffer)) != -1)) {                out.write(buffer, 0, length);            }        } else {                                                while (in.available() > 0 && ((length = in.read(buffer)) != -1)) {                                out.write(buffer, 0, length);            }        }                out.flush();    } catch (IOException | InterruptedException e) {            } finally {        JOrphanUtils.closeQuietly(out);        JOrphanUtils.closeQuietly(in);        JOrphanUtils.closeQuietly(clientSocket);    }    }
1
private static String getRequestHeaderValue(String requestHeaders, String headerName)
{    Perl5Matcher localMatcher = JMeterUtils.getMatcher();            String expression = "^" + headerName + ":\\s+([^\\r\\n]+)";    Pattern pattern = JMeterUtils.getPattern(expression, Perl5Compiler.READ_ONLY_MASK | Perl5Compiler.CASE_INSENSITIVE_MASK | Perl5Compiler.MULTILINE_MASK);    if (localMatcher.contains(requestHeaders, pattern)) {                return localMatcher.getMatch().group(1);    } else {        return null;    }}
0
private static int getPositionOfBody(String stringToCheck)
{    Perl5Matcher localMatcher = JMeterUtils.getMatcher();            String regularExpression = "^\\r$";    Pattern pattern = JMeterUtils.getPattern(regularExpression, Perl5Compiler.READ_ONLY_MASK | Perl5Compiler.CASE_INSENSITIVE_MASK | Perl5Compiler.MULTILINE_MASK);    PatternMatcherInput input = new PatternMatcherInput(stringToCheck);    if (localMatcher.contains(input, pattern)) {        MatchResult match = localMatcher.getMatch();        return match.beginOffset(0);    }        return -1;}
0
 void clearSubjects()
{    subjects.clear();}
0
public Subject getSubjectForUser(final String username, final String password)
{    FutureTask<Subject> task = new FutureTask<>(() -> {        LoginContext loginCtx;        try {            loginCtx = new LoginContext(JAAS_APPLICATION, new LoginCallbackHandler(username, password));            loginCtx.login();            return loginCtx.getSubject();        } catch (LoginException e) {                    }        return null;    });    if (log.isDebugEnabled()) {            }    Future<Subject> subjectFuture = subjects.putIfAbsent(username, task);    if (subjectFuture == null) {        subjectFuture = task;                task.run();    }    try {        return subjectFuture.get();    } catch (InterruptedException e1) {                Thread.currentThread().interrupt();    } catch (ExecutionException e1) {            }    return null;}
1
public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException
{    for (Callback callback : callbacks) {        if (callback instanceof NameCallback && username != null) {            NameCallback nc = (NameCallback) callback;            nc.setName(username);        } else if (callback instanceof PasswordCallback) {            PasswordCallback pc = (PasswordCallback) callback;            pc.setPassword(password.toCharArray());        } else {            throw new UnsupportedCallbackException(callback,             "Unrecognized Callback");        }    }}
0
public String getKrb5Conf()
{        return System.getProperty("java.security.krb5.conf");}
0
public boolean getKrb5Debug()
{        return Boolean.getBoolean("java.security.krb5.debug");}
0
public String getJaasConf()
{        return System.getProperty("java.security.auth.login.config");}
0
public String toString()
{    return "KerberosManager[jaas: " + getJaasConf() + ", krb5: " + getKrb5Conf() + ", debug: " + getKrb5Debug() + "]";}
0
public void setName(String name)
{    setProperty(SNAME, name);}
0
public String getName()
{    return getPropertyAsString(SNAME);}
0
public void setAddress(String address)
{    setProperty(SADDRESS, address);}
0
public String getAddress()
{    return getPropertyAsString(SADDRESS);}
0
public String toString()
{    return String.format("StaticHost(%s, %s)", getName(), getAddress());}
0
public String getMethod()
{    return method;}
0
public void setMethod(String method)
{    this.method = method;}
0
public void setPostData(String value)
{    this.postData = value;}
0
public String getPostData()
{    return postData;}
0
public boolean isCompressed()
{    return compressed;}
0
public void setCompressed(boolean compressed)
{    this.compressed = compressed;}
0
public void addHeader(String name, String value)
{    if ("COOKIE".equalsIgnoreCase(name)) {        this.cookieInHeaders = value;    } else if (!HEADERS_TO_IGNORE.contains(name)) {        headers.put(name, value);    }}
0
public List<Cookie> getCookieInHeaders(String url)
{    return Collections.unmodifiableList(stringToCookie(cookieInHeaders, url));}
0
public void setCookieInHeaders(String cookieInHeaders)
{    this.cookieInHeaders = cookieInHeaders;}
0
public String getUrl()
{    return url;}
0
public void setUrl(String url)
{    this.url = url;}
0
public Map<String, String> getHeaders()
{    return Collections.unmodifiableMap(this.headers);}
0
public List<String> getOptionsInProperties()
{    return Collections.unmodifiableList(this.optionsInProperties);}
0
public void addOptionsInProperties(String option)
{    this.optionsInProperties.add(option);}
0
public int getLimitRate()
{    return limitRate;}
0
public void setLimitRate(String limitRate)
{    String unit = limitRate.substring(limitRate.length() - 1, limitRate.length()).toLowerCase();    int value = Integer.parseInt(limitRate.substring(0, limitRate.length() - 1).toLowerCase());    switch(unit) {        case "k":            this.limitRate = value * ONE_KILOBYTE_IN_CPS;            break;        case "m":            this.limitRate = value * ONE_KILOBYTE_IN_CPS * 1000;            break;        case "g":            this.limitRate = value * ONE_KILOBYTE_IN_CPS * 1000000;            break;        default:            break;    }}
0
public String getNoproxy()
{    return noproxy;}
0
public void setNoproxy(String noproxy)
{    this.noproxy = noproxy;}
0
public String getDnsResolver()
{    return dnsResolver;}
0
public void setDnsResolver(String dnsResolver)
{    this.dnsResolver = dnsResolver;}
0
public String getInterfaceName()
{    return interfaceName;}
0
public void setInterfaceName(String interfaceName)
{    this.interfaceName = interfaceName;}
0
public List<String> getOptionsIgnored()
{    return Collections.unmodifiableList(this.optionsIgnored);}
0
public void addOptionsIgnored(String option)
{    this.optionsIgnored.add(option);}
0
public List<String> getOptionsNoSupport()
{    return Collections.unmodifiableList(this.optionsNoSupport);}
0
public void addOptionsNoSupport(String option)
{    this.optionsNoSupport.add(option);}
0
public Map<String, String> getProxyServer()
{    return Collections.unmodifiableMap(this.proxyServer);}
0
public void setProxyServer(String key, String value)
{    this.proxyServer.put(key, value);}
0
public boolean isKeepAlive()
{    return isKeepAlive;}
0
public void setKeepAlive(boolean isKeepAlive)
{    this.isKeepAlive = isKeepAlive;}
0
public Set<String> getDnsServers()
{    return Collections.unmodifiableSet(this.dnsServers);}
0
public void addDnsServers(String dnsServer)
{    this.dnsServers.add(dnsServer);}
0
public Map<String, String> getFormStringData()
{    return Collections.unmodifiableMap(this.formStringData);}
0
public void addFormStringData(String key, String value)
{    formStringData.put(key, value);}
0
public Map<String, String> getFormData()
{    return Collections.unmodifiableMap(this.formData);}
0
public void addFormData(String key, String value)
{    formData.put(key, value);}
0
public String getCaCert()
{    return caCert;}
0
public void setCaCert(String caCert)
{    this.caCert = caCert;}
0
public Authorization getAuthorization()
{    return authorization;}
0
public double getConnectTimeout()
{    return connectTimeout;}
0
public void setConnectTimeout(double connectTimeout)
{    this.connectTimeout = connectTimeout;}
0
public double getMaxTime()
{    return maxTime;}
0
public void setMaxTime(double maxTime)
{    this.maxTime = maxTime;}
0
public String getFilepathCookie()
{    return filepathCookie;}
0
public void setFilepathCookie(String filepathCookie)
{    this.filepathCookie = filepathCookie;}
0
public List<Cookie> getCookies(String url)
{    return Collections.unmodifiableList(stringToCookie(cookies, url));}
0
public void setCookies(String cookies)
{    this.cookies = cookies;}
0
public String toString()
{    StringBuilder builder = new StringBuilder();    builder.append("Request [compressed=");    builder.append(compressed);    builder.append(", url=");    builder.append(url);    builder.append(", method=");    builder.append(method);    builder.append(", headers=");    builder.append(headers);    builder.append("]");    return builder.toString();}
0
public Request parse(String commandLine)
{    String[] args = translateCommandline(commandLine);    CLArgsParser parser = new CLArgsParser(args, OPTIONS);    String error = parser.getErrorString();    boolean isPostToGet = false;    if (error == null) {        List<CLOption> clOptions = parser.getArguments();        Request request = new Request();        for (CLOption option : clOptions) {            if (option.getDescriptor().getId() == URL_OPT) {                request.setUrl(option.getArgument());            } else if (option.getDescriptor().getId() == COMPRESSED_OPT) {                request.setCompressed(true);            } else if (option.getDescriptor().getId() == HEADER_OPT) {                String nameAndValue = option.getArgument(0);                int indexOfSemicolon = nameAndValue.indexOf(':');                String name = nameAndValue.substring(0, indexOfSemicolon).trim();                String value = nameAndValue.substring(indexOfSemicolon + 1).trim();                request.addHeader(name, value);            } else if (option.getDescriptor().getId() == METHOD_OPT) {                String value = option.getArgument(0);                request.setMethod(value);            } else if (DATAS_OPT.contains(option.getDescriptor().getId())) {                String value = option.getArgument(0);                String dataOptionName = option.getDescriptor().getName();                value = getPostDataByDifferentOption(value.trim(), dataOptionName);                request.setMethod("POST");                request.setPostData(value);            } else if (FORMS_OPT.contains(option.getDescriptor().getId())) {                String nameAndValue = option.getArgument(0);                int indexOfEqual = nameAndValue.indexOf('=');                String key = nameAndValue.substring(0, indexOfEqual).trim();                String value = nameAndValue.substring(indexOfEqual + 1).trim();                if ("form-string".equals(option.getDescriptor().getName())) {                    request.addFormStringData(key, value);                } else {                    request.addFormData(key, value);                }                request.setMethod("POST");            } else if (option.getDescriptor().getId() == USER_AGENT_OPT) {                request.addHeader("User-Agent", option.getArgument(0));            } else if (option.getDescriptor().getId() == REFERER_OPT) {                request.addHeader("Referer", option.getArgument(0));            } else if (option.getDescriptor().getId() == CONNECT_TIMEOUT_OPT) {                String value = option.getArgument(0);                request.setConnectTimeout(Double.valueOf(value) * 1000);            } else if (option.getDescriptor().getId() == COOKIE_OPT) {                String value = option.getArgument(0);                if (isValidCookie(value)) {                    request.setCookies(value);                } else {                    request.setFilepathCookie(value);                }            } else if (option.getDescriptor().getId() == USER_OPT) {                String value = option.getArgument(0);                setAuthUserPasswd(value, request.getUrl(), request.getAuthorization());            } else if (AUTH_OPT.contains(option.getDescriptor().getId())) {                String authOption = option.getDescriptor().getName();                setAuthMechanism(authOption, request.getAuthorization());            } else if (SSL_OPT.contains(option.getDescriptor().getId())) {                request.setCaCert(option.getDescriptor().getName());            } else if (option.getDescriptor().getId() == GET_OPT) {                isPostToGet = true;            } else if (option.getDescriptor().getId() == DNS_OPT) {                String value = option.getArgument(0);                String[] dnsServer = value.split(",");                for (String s : dnsServer) {                    request.addDnsServers(s);                }            } else if (option.getDescriptor().getId() == NO_KEEPALIVE_OPT) {                request.setKeepAlive(false);            } else if (option.getDescriptor().getId() == PROXY_OPT) {                String value = option.getArgument(0);                setProxyServer(request, value);            } else if (option.getDescriptor().getId() == PROXY_USER_OPT) {                String value = option.getArgument(0);                setProxyServerUserInfo(request, value);            } else if (option.getDescriptor().getId() == MAX_TIME_OPT) {                String value = option.getArgument(0);                request.setMaxTime(Double.valueOf(value) * 1000);            } else if (option.getDescriptor().getId() == HEAD_OPT) {                request.setMethod("HEAD");            } else if (option.getDescriptor().getId() == INTERFACE_OPT) {                String value = option.getArgument(0);                request.setInterfaceName(value);            } else if (option.getDescriptor().getId() == DNS_RESOLVER_OPT) {                String value = option.getArgument(0);                request.setDnsResolver(value);            } else if (option.getDescriptor().getId() == LIMIT_RATE_OPT) {                String value = option.getArgument(0);                request.setLimitRate(value);            } else if (option.getDescriptor().getId() == NOPROXY_OPT) {                String value = option.getArgument(0);                request.setNoproxy(value);            } else if (IGNORE_OPTIONS_OPT.contains(option.getDescriptor().getId())) {                request.addOptionsIgnored(option.getDescriptor().getName());            } else if (NOSUPPORT_OPTIONS_OPT.contains(option.getDescriptor().getId())) {                request.addOptionsNoSupport(option.getDescriptor().getName());            } else if (PROPERTIES_OPT.contains(option.getDescriptor().getId())) {                request.addOptionsInProperties("--" + option.getDescriptor().getName() + " is in 'httpsampler.max_redirects(1062 line)'");            } else if (option.getDescriptor().getId() == CLOption.TEXT_ARGUMENT) {                                if (!"CURL".equalsIgnoreCase(option.getArgument())) {                    try {                        request.setUrl(new URL(option.getArgument()).toExternalForm());                    } catch (MalformedURLException ex) {                                            }                }            }        }        if (isPostToGet) {            String url = request.getUrl();            url += "?" + request.getPostData();            request.setUrl(url);            request.setPostData(null);            request.setMethod("GET");        }        return request;    } else {        throw new IllegalArgumentException("Unexpected format for command line:" + commandLine + ", error:" + error);    }}
1
public static String[] translateCommandline(String toProcess)
{    if (toProcess == null || toProcess.isEmpty()) {                return new String[0];    }        final int normal = 0;    final int inQuote = 1;    final int inDoubleQuote = 2;    int state = normal;    final StringTokenizer tok = new StringTokenizer(toProcess, "\"\' ", true);    final ArrayList<String> result = new ArrayList<>();    final StringBuilder current = new StringBuilder();    boolean lastTokenHasBeenQuoted = false;    while (tok.hasMoreTokens()) {        String nextTok = tok.nextToken();        switch(state) {            case inQuote:                if ("\'".equals(nextTok)) {                    lastTokenHasBeenQuoted = true;                    state = normal;                } else {                    current.append(nextTok);                }                break;            case inDoubleQuote:                if ("\"".equals(nextTok)) {                    lastTokenHasBeenQuoted = true;                    state = normal;                } else {                    current.append(nextTok);                }                break;            default:                if ("\'".equals(nextTok)) {                    state = inQuote;                } else if ("\"".equals(nextTok)) {                    state = inDoubleQuote;                } else if (" ".equals(nextTok)) {                    if (lastTokenHasBeenQuoted || current.length() > 0) {                        result.add(current.toString());                        current.setLength(0);                    }                } else {                    current.append(nextTok);                }                lastTokenHasBeenQuoted = false;                break;        }    }    if (lastTokenHasBeenQuoted || current.length() > 0) {        result.add(current.toString());    }    if (state == inQuote || state == inDoubleQuote) {        throw new IllegalArgumentException("unbalanced quotes in " + toProcess);    }    return result.toArray(new String[result.size()]);}
0
public void setAuthUserPasswd(String authentication, String url, Authorization authorization)
{    String[] authorizationParameters = authentication.split(":", 2);    authorization.setUser(authorizationParameters[0].trim());    authorization.setPass(authorizationParameters[1].trim());    authorization.setURL(url);}
0
private void setAuthMechanism(String mechanism, Authorization authorization)
{    switch(mechanism.toLowerCase()) {        case "basic":            authorization.setMechanism(Mechanism.BASIC);            break;        case "digest":            authorization.setMechanism(Mechanism.DIGEST);            break;        default:            break;    }}
0
private void setProxyServer(Request request, String originalProxyServerParameters)
{    String proxyServerParameters = originalProxyServerParameters;    if (!proxyServerParameters.contains("://")) {        proxyServerParameters = "http://" + proxyServerParameters;    }    URI uriProxy = null;    try {        uriProxy = new URI(proxyServerParameters);        request.setProxyServer("scheme", uriProxy.getScheme());        Optional<String> userInfoOptional = Optional.ofNullable(uriProxy.getUserInfo());        if (userInfoOptional.isPresent()) {            setProxyServerUserInfo(request, userInfoOptional.get());        }        Optional<String> hostOptional = Optional.ofNullable(uriProxy.getHost());        if (hostOptional.isPresent()) {            request.setProxyServer("servername", hostOptional.get());        }        if (uriProxy.getPort() != -1) {            request.setProxyServer("port", String.valueOf(uriProxy.getPort()));        } else {            request.setProxyServer("port", "1080");        }    } catch (URISyntaxException e) {        throw new IllegalArgumentException(proxyServerParameters + " cannot be converted to a URL", e);    }}
0
private void setProxyServerUserInfo(Request request, String authentication)
{    if (authentication.contains(":")) {        String[] userInfo = authentication.split(":", 2);        request.setProxyServer("username", userInfo[0]);        request.setProxyServer("password", userInfo[1]);    }}
0
private String getPostDataByDifferentOption(final String originalPostdata, String dataOptionName)
{    String postdata = originalPostdata;    if ("data-urlencode".equals(dataOptionName)) {        postdata = encodePostdata(postdata);    } else {        if (postdata.charAt(0) == '@' && !"data-raw".equals(dataOptionName)) {            postdata = postdata.substring(1, postdata.length());            postdata = readFromFile(postdata);            if (!"data-binary".equals(dataOptionName)) {                postdata = deleteLineBreak(postdata);            }        }    }    return postdata;}
0
private String encodePostdata(String postdata)
{    if (postdata.contains("@")) {        String contentFile = null;        String[] arr = postdata.split("@", 2);        String dataToEncode = readFromFile(arr[1]);        try {            contentFile = URLEncoder.encode(dataToEncode, StandardCharsets.UTF_8.name());        } catch (UnsupportedEncodingException e) {            throw new IllegalArgumentException(dataToEncode + " cannot be encoded", e);        }        if (!arr[0].isEmpty()) {            contentFile = arr[0] + "=" + contentFile;        }        return contentFile;    } else {        if (!postdata.contains("=")) {            try {                return URLEncoder.encode(postdata, StandardCharsets.UTF_8.name());            } catch (UnsupportedEncodingException e) {                throw new IllegalArgumentException(postdata + " cannot be encoded", e);            }        } else {            int index = postdata.indexOf('=');            try {                return postdata.substring(0, index + 1) + URLEncoder.encode(postdata.substring(index + 1, postdata.length()), StandardCharsets.UTF_8.name());            } catch (UnsupportedEncodingException e) {                throw new IllegalArgumentException(postdata.substring(index + 1, postdata.length()) + " cannot be encoded", e);            }        }    }}
0
private static String readFromFile(String filePath)
{    File file = new File(filePath.trim());    if (file.isFile() && file.exists()) {        try {            return FileUtils.readFileToString(file, StandardCharsets.UTF_8.name());        } catch (IOException e) {                        throw new IllegalArgumentException("Failed to read from File " + filePath);        }    } else {        throw new IllegalArgumentException(filePath + " is a directory or does not exist");    }}
1
private static String deleteLineBreak(String postdata)
{    Matcher m = deleteLinePattern.matcher(postdata);    return m.replaceAll("");}
0
public static boolean isValidCookie(String str)
{    for (String r : str.split(";")) {        if (!r.contains("=")) {            return false;        }    }    return true;}
0
public static List<Cookie> stringToCookie(String cookieStr, String url)
{    List<Cookie> cookies = new ArrayList<>();    final StringTokenizer tok = new StringTokenizer(cookieStr, "; ", true);    while (tok.hasMoreTokens()) {        String nextCookie = tok.nextToken();        if (nextCookie.contains("=")) {            String[] cookieParameters = nextCookie.split("=", 2);            if (!DYNAMIC_COOKIES.contains(cookieParameters[0])) {                Cookie newCookie = new Cookie();                newCookie.setName(cookieParameters[0]);                newCookie.setValue(cookieParameters[1]);                URL newUrl;                try {                    newUrl = new URL(url.trim());                    newCookie.setDomain(newUrl.getHost());                    newCookie.setPath(newUrl.getPath());                    cookies.add(newCookie);                } catch (MalformedURLException e) {                    throw new IllegalArgumentException("unqualified url " + url.trim() + ", unable to create cookies.");                }            }        }    }    return cookies;}
0
public void doAction(ActionEvent e)
{    showInputDialog(e);}
0
private final void showInputDialog(ActionEvent event)
{    EscapeDialog messageDialog = new     EscapeDialog(    getParentFrame(event),     JMeterUtils.getResString("curl_import"), false);    Container contentPane = messageDialog.getContentPane();    contentPane.setLayout(new BorderLayout());    statusText = new JLabel("", JLabel.CENTER);    statusText.setForeground(Color.RED);    contentPane.add(statusText, BorderLayout.NORTH);    cURLCommandTA = JSyntaxTextArea.getInstance(20, 80, false);    cURLCommandTA.setCaretPosition(0);    contentPane.add(JTextScrollPane.getInstance(cURLCommandTA), BorderLayout.CENTER);    JPanel optionPanel = new JPanel(new BorderLayout(3, 1));        filePanel = new FilePanel(JMeterUtils.getResString("curl_import_from_file"));    optionPanel.add(filePanel, BorderLayout.CENTER);    uploadCookiesCheckBox = new JCheckBox(JMeterUtils.getResString("curl_add_cookie_header_to_cookiemanager"), false);    optionPanel.add(uploadCookiesCheckBox, BorderLayout.NORTH);    JButton button = new JButton(JMeterUtils.getResString("curl_create_request"));    button.setActionCommand(CREATE_REQUEST);    button.addActionListener(this);    button.setPreferredSize(new Dimension(50, 50));    optionPanel.add(button, BorderLayout.SOUTH);    contentPane.add(optionPanel, BorderLayout.SOUTH);    messageDialog.pack();    ComponentUtil.centerComponentInComponent(GuiPackage.getInstance().getMainFrame(), messageDialog);    SwingUtilities.invokeLater(() -> messageDialog.setVisible(true));}
0
private JMeterTreeNode findFirstNodeOfType(Class<?> type)
{    JMeterTreeModel treeModel = GuiPackage.getInstance().getTreeModel();    return treeModel.getNodesOfType(type).stream().filter(JMeterTreeNode::isEnabled).findFirst().orElse(null);}
0
private DNSCacheManager findNodeOfTypeDnsCacheManagerByType(boolean isCustom)
{    JMeterTreeModel treeModel = GuiPackage.getInstance().getTreeModel();    List<JMeterTreeNode> res = treeModel.getNodesOfType(DNSCacheManager.class);    for (JMeterTreeNode jm : res) {        DNSCacheManager dnsCacheManager = (DNSCacheManager) jm.getTestElement();        if (dnsCacheManager.isCustomResolver() == isCustom) {            return dnsCacheManager;        }    }    return null;}
0
private void createTestPlan(ActionEvent e, Request request, String statusText) throws MalformedURLException, IllegalUserActionException
{    ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(), e.getID(), ActionNames.CLOSE));    GuiPackage guiPackage = GuiPackage.getInstance();    guiPackage.clearTestPlan();    FileServer.getFileServer().setScriptName(null);    ThreadGroup threadGroup = new ThreadGroup();    threadGroup.setProperty(TestElement.GUI_CLASS, ThreadGroupGui.class.getName());    threadGroup.setProperty(TestElement.NAME, "Thread Group");    threadGroup.setProperty(ThreadGroup.NUM_THREADS, "${__P(threads,10)}");    threadGroup.setProperty(ThreadGroup.RAMP_TIME, "${__P(rampup,30)}");    threadGroup.setScheduler(true);    threadGroup.setProperty(ThreadGroup.DURATION, "${__P(duration,3600)}");    threadGroup.setDelay(5);    LoopController loopCtrl = new LoopController();    loopCtrl.setProperty(LoopController.LOOPS, "${__P(iterations,-1)}");    loopCtrl.setContinueForever(false);    threadGroup.setSamplerController(loopCtrl);    TestPlan testPlan = new TestPlan();    testPlan.setProperty(TestElement.NAME, "Test Plan");    testPlan.setProperty(TestElement.GUI_CLASS, TestPlanGui.class.getName());    testPlan.setComment("You can run me using: jmeter -Jthreads=<Number of threads> -Jrampup=<rampup in seconds> -Jduration=<duration in seconds> " + "-Jiterations=<Number of iterations, -1 means infinite> -e -o <report output folder>");    HashTree tree = new HashTree();    HashTree testPlanHT = tree.add(testPlan);    HashTree threadGroupHT = testPlanHT.add(threadGroup);    createHttpRequest(request, threadGroupHT, statusText);    if (!request.getAuthorization().getUser().isEmpty()) {        AuthManager authManager = new AuthManager();        createAuthManager(request, authManager);        threadGroupHT.add(authManager);    }    if (!request.getDnsServers().isEmpty()) {        DNSCacheManager dnsCacheManager = new DNSCacheManager();        createDnsServer(request, dnsCacheManager);        threadGroupHT.add(dnsCacheManager);    }    if (request.getDnsResolver() != null) {        DNSCacheManager dnsCacheManager = new DNSCacheManager();        createDnsResolver(request, dnsCacheManager);        threadGroupHT.add(dnsCacheManager);    }    CookieManager cookieManager = new CookieManager();    createCookieManager(cookieManager, request);    threadGroupHT.add(cookieManager);    ResultCollector resultCollector = new ResultCollector();    resultCollector.setProperty(TestElement.NAME, "View Results Tree");    resultCollector.setProperty(TestElement.GUI_CLASS, ViewResultsFullVisualizer.class.getName());    tree.add(tree.getArray()[0], resultCollector);    final HashTree newTree = guiPackage.addSubTree(tree);    guiPackage.updateCurrentGui();    guiPackage.getMainFrame().getTree().setSelectionPath(new TreePath(((JMeterTreeNode) newTree.getArray()[0]).getPath()));    final HashTree subTree = guiPackage.getCurrentSubTree();                ActionEvent actionEvent = new ActionEvent(subTree.get(subTree.getArray()[subTree.size() - 1]), e.getID(), ActionNames.SUB_TREE_LOADED);    ActionRouter.getInstance().actionPerformed(actionEvent);    ActionRouter.getInstance().doActionNow(new ActionEvent(e.getSource(), e.getID(), ActionNames.EXPAND_ALL));}
0
private HTTPSamplerProxy createHttpRequest(Request request, HashTree parentHT, String commentText) throws MalformedURLException
{    HTTPSamplerProxy httpSampler = createSampler(request, commentText);    HashTree samplerHT = parentHT.add(httpSampler);    samplerHT.add(httpSampler.getHeaderManager());    if (CERT.equals(request.getCaCert())) {        samplerHT.add(httpSampler.getKeystoreConfig());    }    return httpSampler;}
0
private HTTPSamplerProxy createSampler(Request request, String commentText) throws MalformedURLException
{    HTTPSamplerProxy httpSampler = (HTTPSamplerProxy) HTTPSamplerFactory.newInstance(HTTPSamplerFactory.DEFAULT_CLASSNAME);    httpSampler.setProperty(TestElement.GUI_CLASS, HttpTestSampleGui.class.getName());    httpSampler.setProperty(TestElement.NAME, "HTTP Request");    if (!commentText.isEmpty()) {                httpSampler.setProperty(TestElement.COMMENTS, commentText);    } else {        httpSampler.setProperty(TestElement.COMMENTS, "Created from cURL on " + LocalDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME));    }        URL url = new URL(request.getUrl());    httpSampler.setProtocol(url.getProtocol());    if (url.getPort() != -1) {        httpSampler.setPort(url.getPort());    }    httpSampler.setPath(url.getPath());    httpSampler.setDomain(url.getHost());    httpSampler.setUseKeepAlive(request.isKeepAlive());    httpSampler.setFollowRedirects(true);    httpSampler.setMethod(request.getMethod());    HeaderManager headerManager = createHeaderManager(request);    httpSampler.addTestElement(headerManager);    configureTimeout(request, httpSampler);    createProxyServer(request, httpSampler);    if (request.getInterfaceName() != null) {        httpSampler.setIpSourceType(1);        httpSampler.setIpSource(request.getInterfaceName());    }    if (!"GET".equals(request.getMethod()) && request.getPostData() != null) {        Arguments arguments = new Arguments();        httpSampler.setArguments(arguments);        httpSampler.addNonEncodedArgument("", request.getPostData(), "");    }    if (!request.getFormData().isEmpty() || !request.getFormStringData().isEmpty()) {        setFormData(request, httpSampler);        httpSampler.setDoMultipart(true);    }    if (CERT.equals(request.getCaCert())) {        KeystoreConfig keystoreConfig = createKeystoreConfiguration();        httpSampler.addTestElement(keystoreConfig);    }    return httpSampler;}
0
private void configureTimeout(Request request, HTTPSamplerProxy httpSampler)
{    double connectTimeout = request.getConnectTimeout();    double maxTime = request.getMaxTime();    if (connectTimeout >= 0) {        httpSampler.setConnectTimeout(String.valueOf((int) request.getConnectTimeout()));        if (maxTime >= 0) {            maxTime = maxTime - connectTimeout;        }    }    if (maxTime >= 0) {        httpSampler.setResponseTimeout(String.valueOf((int) maxTime));    }}
0
private HeaderManager createHeaderManager(Request request)
{    HeaderManager headerManager = new HeaderManager();    headerManager.setProperty(TestElement.GUI_CLASS, HeaderPanel.class.getName());    headerManager.setProperty(TestElement.NAME, "HTTP HeaderManager");    headerManager.setProperty(TestElement.COMMENTS, "Created from cURL on " + LocalDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME));    Map<String, String> map = request.getHeaders();    boolean hasAcceptEncoding = false;    for (Map.Entry<String, String> header : map.entrySet()) {        String key = header.getKey();        hasAcceptEncoding = hasAcceptEncoding || key.equalsIgnoreCase(ACCEPT_ENCODING);        headerManager.getHeaders().addItem(new Header(key, header.getValue()));    }    if (!hasAcceptEncoding && request.isCompressed()) {        headerManager.getHeaders().addItem(new Header(ACCEPT_ENCODING, "gzip, deflate"));    }    return headerManager;}
0
private void createCookieManager(CookieManager cookieManager, Request request)
{    cookieManager.setProperty(TestElement.GUI_CLASS, CookiePanel.class.getName());    cookieManager.setProperty(TestElement.NAME, "HTTP CookieManager");    cookieManager.setProperty(TestElement.COMMENTS, "Created from cURL on " + LocalDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME));    if (!request.getCookies(request.getUrl()).isEmpty()) {        for (Cookie c : request.getCookies(request.getUrl())) {            cookieManager.getCookies().addItem(c);        }    }    if (!request.getCookieInHeaders(request.getUrl()).isEmpty() && uploadCookiesCheckBox.isSelected()) {        for (Cookie c : request.getCookieInHeaders(request.getUrl())) {            cookieManager.getCookies().addItem(c);        }    }    if (!request.getFilepathCookie().isEmpty()) {        String pathfileCookie = request.getFilepathCookie();        File file = new File(pathfileCookie);        if (file.isFile() && file.exists()) {            try {                cookieManager.addFile(pathfileCookie);            } catch (IOException e) {                                throw new IllegalArgumentException("Failed to read from File " + pathfileCookie);            }        } else {                        throw new IllegalArgumentException("File " + pathfileCookie + " doesn't exist");        }    }}
1
private KeystoreConfig createKeystoreConfiguration()
{    KeystoreConfig keystoreConfig = new KeystoreConfig();    keystoreConfig.setProperty(TestElement.GUI_CLASS, TestBeanGUI.class.getName());    keystoreConfig.setProperty(TestElement.NAME, "Keystore Configuration");    keystoreConfig.setProperty(TestElement.COMMENTS, "Created from cURL on " + LocalDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME));    return keystoreConfig;}
0
private void createAuthManager(Request request, AuthManager authManager)
{    Authorization auth = request.getAuthorization();    authManager.setProperty(TestElement.GUI_CLASS, AuthPanel.class.getName());    authManager.setProperty(TestElement.NAME, "HTTP AuthorizationManager");    authManager.setProperty(TestElement.COMMENTS, "Created from cURL on " + LocalDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME));    authManager.getAuthObjects().addItem(auth);}
0
private boolean canAddAuthManagerInHttpRequest(Request request, AuthManager authManager)
{    Authorization auth = request.getAuthorization();    for (int i = 0; i < authManager.getAuthObjects().size(); i++) {        if (!authManager.getAuthObjectAt(i).getUser().equals(auth.getUser()) || !authManager.getAuthObjectAt(i).getPass().equals(auth.getPass()) || !authManager.getAuthObjectAt(i).getMechanism().equals(auth.getMechanism())) {            return true;        }    }    return false;}
0
private boolean canUpdateAuthManagerInThreadGroup(Request request, AuthManager authManager)
{    Authorization auth = request.getAuthorization();    for (int i = 0; i < authManager.getAuthObjects().size(); i++) {        if (auth.getURL().equals(authManager.getAuthObjectAt(i).getURL())) {            return false;        }    }    return true;}
0
private void createDnsServer(Request request, DNSCacheManager dnsCacheManager)
{    Set<String> dnsServers = request.getDnsServers();    dnsCacheManager.setProperty(TestElement.GUI_CLASS, DNSCachePanel.class.getName());    dnsCacheManager.setProperty(TestElement.NAME, "DNS Cache Manager");    dnsCacheManager.setProperty(TestElement.COMMENTS, "Created from cURL on " + LocalDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME));    dnsCacheManager.getServers().clear();    for (String dnsServer : dnsServers) {        dnsCacheManager.addServer(dnsServer);    }}
0
private boolean canAddDnsServerInHttpRequest(Request request, DNSCacheManager dnsCacheManager)
{    Set<String> currentDnsServers = new HashSet<>();    Set<String> newDnsServers = request.getDnsServers();    for (int i = 0; i < dnsCacheManager.getServers().size(); i++) {        currentDnsServers.add(dnsCacheManager.getServers().get(i).getStringValue());    }    return !(newDnsServers.size() == currentDnsServers.size() && newDnsServers.containsAll(currentDnsServers));}
0
private void createDnsResolver(Request request, DNSCacheManager dnsCacheManager)
{    dnsCacheManager.setProperty(TestElement.GUI_CLASS, DNSCachePanel.class.getName());    dnsCacheManager.setProperty(TestElement.NAME, "DNS Cache Manager");    dnsCacheManager.setCustomResolver(true);    dnsCacheManager.getHosts().clear();    String[] resolveParameters = request.getDnsResolver().split(":");    String port = resolveParameters[1];    if (!"443".equals(port) && !"80".equals(port) && !"*".equals(port)) {        dnsCacheManager.setProperty(TestElement.COMMENTS, "Custom DNS resolver doesn't support port " + port);    } else {        dnsCacheManager.setProperty(TestElement.COMMENTS, "Created from cURL on " + LocalDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME));    }    dnsCacheManager.addHost(resolveParameters[0], resolveParameters[2]);}
0
private boolean canAddDnsResolverInHttpRequest(Request request, DNSCacheManager dnsCacheManager)
{    if (dnsCacheManager.getHosts().size() != 1) {        return true;    } else {        String[] resolveParameters = request.getDnsResolver().split(":");        String host = resolveParameters[0];        String address = resolveParameters[2];        StaticHost statichost = (StaticHost) dnsCacheManager.getHosts().get(0).getObjectValue();        if (statichost.getAddress().equals(address) && statichost.getName().equals(host)) {            return false;        }    }    return true;}
0
private void setFormData(Request request, HTTPSamplerProxy httpSampler)
{    if (request.getPostData() != null) {        throw new IllegalArgumentException("--form and --data can't appear in the same command");    }    List<HTTPFileArg> httpFileArgs = new ArrayList<>();    for (Map.Entry<String, String> entry : request.getFormStringData().entrySet()) {        String formName = entry.getKey();        String formValue = entry.getValue();        httpSampler.addNonEncodedArgument(formName, formValue, "");    }    for (Map.Entry<String, String> entry : request.getFormData().entrySet()) {        String formName = entry.getKey();        String formValue = entry.getValue();        boolean isContainsFile = "@".equals(formValue.substring(0, 1));        boolean isContainsContentType = formValue.toLowerCase().contains(TYPE_FORM);        if (isContainsFile) {            formValue = formValue.substring(1, formValue.length());            String contentType;            if (isContainsContentType) {                String[] formValueWithType = formValue.split(TYPE_FORM);                formValue = formValueWithType[0];                contentType = formValueWithType[1];            } else {                contentType = new MimetypesFileTypeMap().getContentType(formValue);            }            httpFileArgs.add(new HTTPFileArg(formValue, formName, contentType));        } else {            if (isContainsContentType) {                String[] formValueWithType = formValue.split(TYPE_FORM);                formValue = formValueWithType[0];                String contentType = formValueWithType[1];                httpSampler.addNonEncodedArgument(formName, formValue, "", contentType);            } else {                httpSampler.addNonEncodedArgument(formName, formValue, "");            }        }    }    if (!httpFileArgs.isEmpty()) {        httpSampler.setHTTPFiles(httpFileArgs.toArray(new HTTPFileArg[httpFileArgs.size()]));    }}
0
private void createProxyServer(Request request, HTTPSamplerProxy httpSampler)
{    Map<String, String> proxyServer = request.getProxyServer();    for (Map.Entry<String, String> proxyPara : proxyServer.entrySet()) {        String key = proxyPara.getKey();        switch(key) {            case "servername":                httpSampler.setProxyHost(proxyPara.getValue());                break;            case "port":                httpSampler.setProxyPortInt(proxyPara.getValue());                break;            case "scheme":                httpSampler.setProxyScheme(proxyPara.getValue());                break;            case "username":                httpSampler.setProxyUser(proxyPara.getValue());                break;            case "password":                httpSampler.setProxyPass(proxyPara.getValue());                break;            default:                break;        }    }}
0
public JMenuItem[] getMenuItemsAtLocation(MENU_LOCATION location)
{    if (location == MENU_LOCATION.TOOLS) {        JMenuItem menuItemIC = new JMenuItem(JMeterUtils.getResString("curl_import_menu"), KeyEvent.VK_UNDEFINED);        menuItemIC.setName(IMPORT_CURL);        menuItemIC.setActionCommand(IMPORT_CURL);        menuItemIC.setAccelerator(null);        menuItemIC.addActionListener(ActionRouter.getInstance());        return new JMenuItem[] { menuItemIC };    }    return new JMenuItem[0];}
0
public void actionPerformed(ActionEvent e)
{    statusText.setText("");    statusText.setForeground(Color.GREEN);    boolean isReadFromFile = false;    if (e.getActionCommand().equals(CREATE_REQUEST)) {        List<String> commandsList = null;        try {            if (!filePanel.getFilename().trim().isEmpty() && cURLCommandTA.getText().trim().isEmpty()) {                commandsList = readFromFile(filePanel.getFilename().trim());                isReadFromFile = true;            } else if (filePanel.getFilename().trim().isEmpty() && !cURLCommandTA.getText().trim().isEmpty()) {                commandsList = readFromTextPanel(cURLCommandTA.getText().trim());            } else {                throw new IllegalArgumentException("Error creating tast plan ,Please select one between reading file and directly fill in the panel");            }            List<Request> requests = parseCommands(isReadFromFile, commandsList);            for (int i = 0; i < requests.size(); i++) {                BasicCurlParser.Request request = requests.get(i);                try {                    String commentText = createCommentText(request);                    GuiPackage guiPackage = GuiPackage.getInstance();                    guiPackage.updateCurrentNode();                    JMeterTreeNode treeNode = findFirstNodeOfType(AbstractThreadGroup.class);                    if (treeNode == null) {                                                createTestPlan(e, request, commentText);                    } else {                        JMeterTreeNode currentNode = guiPackage.getCurrentNode();                        Object userObject = currentNode.getUserObject();                        if (userObject instanceof Controller && !(userObject instanceof ReplaceableController)) {                                                        addToTestPlan(currentNode, request, commentText);                        } else {                                                        addToTestPlan(treeNode, request, commentText);                        }                    }                    statusText.setText(JMeterUtils.getResString("curl_create_success"));                } catch (Exception ex) {                                        statusText.setText(MessageFormat.format(JMeterUtils.getResString("curl_create_failure"), ex.getMessage()));                    statusText.setForeground(Color.RED);                    break;                }            }        } catch (Exception ex) {                        statusText.setText(MessageFormat.format(JMeterUtils.getResString("curl_create_failure"), ex.getMessage()));            statusText.setForeground(Color.RED);        }    }}
1
public List<Request> parseCommands(boolean isReadFromFile, List<String> commandsList)
{    List<Request> requests = new ArrayList<>();    BasicCurlParser basicCurlParser = new BasicCurlParser();    for (int i = 0; i < commandsList.size(); i++) {        try {            BasicCurlParser.Request q = basicCurlParser.parse(commandsList.get(i));            requests.add(q);                    } catch (IllegalArgumentException ie) {            if (isReadFromFile) {                int line = i + 1;                                throw new IllegalArgumentException("Error creating tast plan from file in line " + line + ", see log file");            } else {                                throw ie;            }        }    }    return requests;}
1
private void addToTestPlan(final JMeterTreeNode currentNode, Request request, String statusText) throws MalformedURLException
{    final HTTPSamplerProxy sampler = createSampler(request, statusText);    JMeterTreeModel treeModel = GuiPackage.getInstance().getTreeModel();    JMeterUtils.runSafe(true, () -> {        try {            boolean canAddAuthManagerInHttpRequest = false;            boolean canAddDnsServer = false;            boolean canAddDnsResolver = false;            if (!request.getAuthorization().getUser().isEmpty()) {                JMeterTreeNode jMeterTreeNodeAuth = findFirstNodeOfType(AuthManager.class);                if (jMeterTreeNodeAuth == null) {                    AuthManager authManager = new AuthManager();                    createAuthManager(request, authManager);                    treeModel.addComponent(authManager, currentNode);                } else {                    AuthManager authManager = (AuthManager) jMeterTreeNodeAuth.getTestElement();                    if (canUpdateAuthManagerInThreadGroup(request, authManager)) {                        createAuthManager(request, authManager);                    } else {                        canAddAuthManagerInHttpRequest = canAddAuthManagerInHttpRequest(request, authManager);                    }                }            }            if (!request.getDnsServers().isEmpty()) {                DNSCacheManager dnsCacheManager = findNodeOfTypeDnsCacheManagerByType(false);                if (dnsCacheManager == null) {                    dnsCacheManager = new DNSCacheManager();                    createDnsServer(request, dnsCacheManager);                    treeModel.addComponent(dnsCacheManager, currentNode);                } else {                    canAddDnsServer = canAddDnsServerInHttpRequest(request, dnsCacheManager);                }            }            if (request.getDnsResolver() != null) {                DNSCacheManager dnsCacheManager = findNodeOfTypeDnsCacheManagerByType(true);                if (dnsCacheManager == null) {                    dnsCacheManager = new DNSCacheManager();                    createDnsResolver(request, dnsCacheManager);                    treeModel.addComponent(dnsCacheManager, currentNode);                } else {                    canAddDnsResolver = canAddDnsResolverInHttpRequest(request, dnsCacheManager);                }            }            if (!request.getCookies(request.getUrl()).isEmpty() || !request.getFilepathCookie().isEmpty() || (!request.getCookieInHeaders(request.getUrl()).isEmpty() && uploadCookiesCheckBox.isSelected())) {                JMeterTreeNode jMeterTreeNodeCookie = findFirstNodeOfType(CookieManager.class);                if (jMeterTreeNodeCookie == null) {                    CookieManager cookieManager = new CookieManager();                    createCookieManager(cookieManager, request);                    treeModel.addComponent(cookieManager, currentNode);                } else {                    CookieManager cookieManager = (CookieManager) jMeterTreeNodeCookie.getTestElement();                    createCookieManager(cookieManager, request);                }            }            HeaderManager headerManager = sampler.getHeaderManager();            KeystoreConfig keystoreConfig = sampler.getKeystoreConfig();            final JMeterTreeNode newNode = treeModel.addComponent(sampler, currentNode);            treeModel.addComponent(headerManager, newNode);            if (CERT.equals(request.getCaCert())) {                treeModel.addComponent(keystoreConfig, newNode);            }            if (canAddAuthManagerInHttpRequest) {                AuthManager authManager = new AuthManager();                createAuthManager(request, authManager);                treeModel.addComponent(authManager, newNode);            }            if (canAddDnsServer) {                DNSCacheManager dnsCacheManager = new DNSCacheManager();                createDnsServer(request, dnsCacheManager);                treeModel.addComponent(dnsCacheManager, newNode);            }            if (canAddDnsResolver) {                DNSCacheManager dnsCacheManager = new DNSCacheManager();                createDnsResolver(request, dnsCacheManager);                treeModel.addComponent(dnsCacheManager, newNode);            }        } catch (IllegalUserActionException ex) {                        JMeterUtils.reportErrorToUser(ex.getMessage());        }    });}
1
public Set<String> getActionNames()
{    return commands;}
0
public JMenu[] getTopLevelMenus()
{    return new JMenu[0];}
0
public boolean localeChanged(MenuElement menu)
{    return false;}
0
public void localeChanged()
{}
0
public List<String> readFromFile(String pathname) throws IOException
{    String encoding = StandardCharsets.UTF_8.name();    File file = new File(pathname);    return FileUtils.readLines(file, encoding);}
0
public List<String> readFromTextPanel(String commands)
{    String[] cs = commands.split("curl");    List<String> s = new ArrayList<>();    for (int i = 1; i < cs.length; i++) {        s.add("curl " + cs[i].trim());    }    return s;}
0
public String createCommentText(Request request)
{    StringBuilder commentText = new StringBuilder();    if (!request.getOptionsIgnored().isEmpty()) {        for (String s : request.getOptionsIgnored()) {            commentText.append("--" + s + " ");        }        commentText.append("ignoring; ");    }    if (!request.getOptionsInProperties().isEmpty()) {        for (String s : request.getOptionsInProperties()) {            commentText.append(s + " ");        }        commentText.append("configure in jmeter.properties ");    }    if (request.getLimitRate() != 0) {        commentText.append("Please configure the limit rate in 'httpclient.socket.http.cps' of 'jmeter.properties(374 line), the value is " + request.getLimitRate() + ";");    }    if (!request.getOptionsNoSupport().isEmpty()) {        for (String s : request.getOptionsNoSupport()) {            commentText.append("--" + s + " ");        }        commentText.append("not supported; ");    }    if (request.getNoproxy() != null) {        commentText.append("Please configure noproxy list in terminal and restart JMeter. ");        commentText.append("Look: https://jmeter.apache.org/usermanual/get-started.html#proxy_server");    }    if (!request.getCaCert().isEmpty()) {        commentText.append("Please configure the SSL file with CA certificates in 'SSL configuration' of 'system.properties(49 line)'. ");        commentText.append("Look: https://jmeter.apache.org/usermanual/properties_reference.html#ssl_config");    }    return commentText.toString();}
0
public TestElement createTestElement()
{    AuthManager authMan = tableModel.manager;    configureTestElement(authMan);    authMan.setClearEachIteration(clearEachIteration.isSelected());    return (TestElement) authMan.clone();}
0
public void modifyTestElement(TestElement el)
{    GuiUtils.stopTableEditing(authTable);    AuthManager authManager = (AuthManager) el;    authManager.clear();    authManager.addTestElement((TestElement) tableModel.manager.clone());    authManager.setClearEachIteration(clearEachIteration.isSelected());    authManager.setControlledByThread(controlledByThreadGroup.isSelected());    configureTestElement(el);}
0
public void clearGui()
{    super.clearGui();    tableModel.clearData();    deleteButton.setEnabled(false);    saveButton.setEnabled(false);    clearEachIteration.setSelected(false);    controlledByThreadGroup.setSelected(false);}
0
public void configure(TestElement el)
{    super.configure(el);    tableModel.manager.clear();    AuthManager authManager = (AuthManager) el;    tableModel.manager.addTestElement((AuthManager) authManager.clone());    clearEachIteration.setSelected(authManager.getClearEachIteration());    controlledByThreadGroup.setSelected(authManager.getControlledByThread());    checkButtonsStatus();}
0
public String getLabelResource()
{        return "auth_manager_title";}
0
private void init()
{        setLayout(new BorderLayout());    setBorder(makeBorder());    JPanel northPanel = new JPanel();    northPanel.setLayout(new VerticalLayout(5, VerticalLayout.BOTH));    northPanel.add(makeTitlePanel());    JPanel optionsPane = new JPanel();    optionsPane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("auth_manager_options")));    optionsPane.setLayout(new VerticalLayout(5, VerticalLayout.BOTH));    clearEachIteration =     new JCheckBox(JMeterUtils.getResString("auth_manager_clear_per_iter"), false);    controlledByThreadGroup =     new JCheckBox(JMeterUtils.getResString("auth_manager_clear_controlled_by_threadgroup"), false);    controlledByThreadGroup.setActionCommand(CONTROLLED_BY_THREADGROUP);    controlledByThreadGroup.addActionListener(this);    optionsPane.add(clearEachIteration);    optionsPane.add(controlledByThreadGroup);    northPanel.add(optionsPane);    add(northPanel, BorderLayout.NORTH);    add(createAuthTablePanel(), BorderLayout.CENTER);}
0
protected void deleteRows()
{            GuiUtils.cancelEditing(authTable);    int[] rowsSelected = authTable.getSelectedRows();    int anchorSelection = authTable.getSelectionModel().getAnchorSelectionIndex();    authTable.clearSelection();    if (rowsSelected.length > 0) {        for (int i = rowsSelected.length - 1; i >= 0; i--) {            tableModel.removeRow(rowsSelected[i]);        }        tableModel.fireTableDataChanged();                if (tableModel.getRowCount() > 0) {            if (anchorSelection >= tableModel.getRowCount()) {                anchorSelection = tableModel.getRowCount() - 1;            }            authTable.setRowSelectionInterval(anchorSelection, anchorSelection);        }        checkButtonsStatus();    }}
0
private void checkButtonsStatus()
{        if (tableModel.getRowCount() == 0) {        deleteButton.setEnabled(false);        saveButton.setEnabled(false);    } else {        deleteButton.setEnabled(true);        saveButton.setEnabled(true);    }}
0
public void actionPerformed(ActionEvent e)
{    String action = e.getActionCommand();    if (action.equals(CONTROLLED_BY_THREADGROUP)) {        clearEachIteration.setEnabled(!controlledByThreadGroup.isSelected());    }    if (action.equals(DELETE_COMMAND)) {        deleteRows();    } else if (action.equals(ADD_COMMAND)) {                        GuiUtils.stopTableEditing(authTable);        tableModel.addNewRow();        tableModel.fireTableDataChanged();        checkButtonsStatus();                int rowToSelect = tableModel.getRowCount() - 1;        authTable.setRowSelectionInterval(rowToSelect, rowToSelect);    } else if (action.equals(LOAD_COMMAND)) {        try {                        final String[] _txt = { ".txt" };            final JFileChooser dialog = FileDialoger.promptToOpenFile(_txt);            if (dialog != null) {                tableModel.manager.addFile(dialog.getSelectedFile().getAbsolutePath());                tableModel.fireTableDataChanged();                checkButtonsStatus();            }        } catch (IOException ex) {                    }    } else if (action.equals(SAVE_COMMAND)) {        try {                        final JFileChooser chooser = FileDialoger.promptToSaveFile("auth.txt");            if (chooser != null) {                tableModel.manager.save(chooser.getSelectedFile().getAbsolutePath());            }        } catch (IOException ex) {            JMeterUtils.reportErrorToUser(ex.getMessage(), "Error saving auth data");        }    }}
1
public JPanel createAuthTablePanel()
{        authTable = new JTable(tableModel);    JMeterUtils.applyHiDPI(authTable);    authTable.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());    authTable.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);    authTable.setPreferredScrollableViewportSize(new Dimension(100, 70));    TableColumn passwordColumn = authTable.getColumnModel().getColumn(AuthManager.COL_PASSWORD);    passwordColumn.setCellRenderer(new PasswordCellRenderer());    TableColumn mechanismColumn = authTable.getColumnModel().getColumn(AuthManager.COL_MECHANISM);    mechanismColumn.setCellEditor(new MechanismCellEditor());    JPanel panel = new JPanel(new BorderLayout(0, 5));    panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("auths_stored")));    panel.add(new JScrollPane(authTable));    panel.add(createButtonPanel(), BorderLayout.SOUTH);    return panel;}
0
private JButton createButton(String resName, char mnemonic, String command, boolean enabled)
{    JButton button = new JButton(JMeterUtils.getResString(resName));    button.setMnemonic(mnemonic);    button.setActionCommand(command);    button.setEnabled(enabled);    button.addActionListener(this);    return button;}
0
private JPanel createButtonPanel()
{    boolean tableEmpty = tableModel.getRowCount() == 0;        addButton = createButton("add", 'A', ADD_COMMAND, true);        deleteButton = createButton("delete", 'D', DELETE_COMMAND, !tableEmpty);        loadButton = createButton("load", 'L', LOAD_COMMAND, true);        saveButton = createButton("save", 'S', SAVE_COMMAND, !tableEmpty);        JPanel buttonPanel = new JPanel();    buttonPanel.add(addButton);    buttonPanel.add(deleteButton);    buttonPanel.add(loadButton);    buttonPanel.add(saveButton);    return buttonPanel;}
0
public void clearData()
{    manager.clear();    fireTableDataChanged();}
0
public void removeRow(int row)
{    manager.remove(row);}
0
public void addNewRow()
{    manager.addAuth();}
0
public boolean isCellEditable(int row, int column)
{        return true;}
0
public Class<?> getColumnClass(int column)
{    return getValueAt(0, column).getClass();}
0
public int getRowCount()
{    return manager.getAuthObjects().size();}
0
public int getColumnCount()
{    return manager.getColumnCount();}
0
public String getColumnName(int column)
{    return manager.getColumnName(column);}
0
public Object getValueAt(int row, int column)
{    Authorization auth = manager.getAuthObjectAt(row);    switch(column) {        case AuthManager.COL_URL:            return auth.getURL();        case AuthManager.COL_USERNAME:            return auth.getUser();        case AuthManager.COL_PASSWORD:            return auth.getPass();        case AuthManager.COL_DOMAIN:            return auth.getDomain();        case AuthManager.COL_REALM:            return auth.getRealm();        case AuthManager.COL_MECHANISM:            return auth.getMechanism();        default:            return null;    }}
0
public void setValueAt(Object value, int row, int column)
{    Authorization auth = manager.getAuthObjectAt(row);        switch(column) {        case AuthManager.COL_URL:            auth.setURL((String) value);            break;        case AuthManager.COL_USERNAME:            auth.setUser((String) value);            break;        case AuthManager.COL_PASSWORD:            auth.setPass((String) value);            break;        case AuthManager.COL_DOMAIN:            auth.setDomain((String) value);            break;        case AuthManager.COL_REALM:            auth.setRealm((String) value);            break;        case AuthManager.COL_MECHANISM:            auth.setMechanism((Mechanism) value);            break;        default:            break;    }}
1
public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
{    setText((String) value);    setBackground(isSelected && !hasFocus ? table.getSelectionBackground() : table.getBackground());    setForeground(isSelected && !hasFocus ? table.getSelectionForeground() : table.getForeground());    setFont(table.getFont());    return this;}
0
public String getLabelResource()
{        return "cache_manager_title";}
0
public void configure(TestElement element)
{    super.configure(element);    final CacheManager cacheManager = (CacheManager) element;    useExpires.setSelected(cacheManager.getUseExpires());    maxCacheSize.setText(Integer.toString(cacheManager.getMaxSize()));    controlledByThreadGroup.setSelected(cacheManager.getControlledByThread());    clearEachIteration.setSelected(cacheManager.getClearEachIteration());}
0
public TestElement createTestElement()
{    CacheManager element = new CacheManager();    modifyTestElement(element);    controlledByThreadGroup.setSelected(element.getControlledByThread());    clearEachIteration.setEnabled(!element.getControlledByThread());    return element;}
0
public void modifyTestElement(TestElement element)
{    configureTestElement(element);    final CacheManager cacheManager = (CacheManager) element;    cacheManager.setClearEachIteration(clearEachIteration.isSelected());    cacheManager.setUseExpires(useExpires.isSelected());    cacheManager.setControlledByThread(controlledByThreadGroup.isSelected());    try {        cacheManager.setMaxSize(Integer.parseInt(maxCacheSize.getText()));    } catch (NumberFormatException ignored) {        }}
0
public void clearGui()
{    super.clearGui();    clearEachIteration.setSelected(false);    useExpires.setSelected(true);        maxCacheSize.setText("");    controlledByThreadGroup.setSelected(false);}
0
private void init()
{    setLayout(new BorderLayout(0, 5));    setBorder(makeBorder());        clearEachIteration = new JCheckBox(JMeterUtils.getResString("clear_cache_per_iter"), false);    controlledByThreadGroup =     new JCheckBox(JMeterUtils.getResString("cache_clear_controlled_by_threadgroup"), false);    controlledByThreadGroup.setActionCommand(CONTROLLED_BY_THREADGROUP);    controlledByThreadGroup.addActionListener(this);        useExpires = new JCheckBox(JMeterUtils.getResString("use_expires"), false);    JPanel northPanel = new JPanel();    northPanel.setLayout(new VerticalLayout(5, VerticalLayout.BOTH));    northPanel.add(makeTitlePanel());    northPanel.add(clearEachIteration);    northPanel.add(controlledByThreadGroup);    northPanel.add(useExpires);        JLabel label = new JLabel(JMeterUtils.getResString("cache_manager_size"));    maxCacheSize = new JTextField(20);    maxCacheSize.setName(CacheManager.MAX_SIZE);    label.setLabelFor(maxCacheSize);    JPanel maxCacheSizePanel = new JPanel(new BorderLayout(5, 0));    maxCacheSizePanel.add(label, BorderLayout.WEST);    maxCacheSizePanel.add(maxCacheSize, BorderLayout.CENTER);    northPanel.add(maxCacheSizePanel);    add(northPanel, BorderLayout.NORTH);}
0
public void actionPerformed(ActionEvent e)
{    String action = e.getActionCommand();    if (action.equals(CONTROLLED_BY_THREADGROUP)) {        clearEachIteration.setEnabled(!controlledByThreadGroup.isSelected());    }}
0
public String getLabelResource()
{        return "cookie_manager_title";}
0
public void actionPerformed(ActionEvent e)
{    String action = e.getActionCommand();    if (action.equals(CONTROLLED_BY_THREADGROUP)) {        clearEachIteration.setEnabled(!controlledByThreadGroup.isSelected());    }    if (action.equals(DELETE_COMMAND)) {        if (tableModel.getRowCount() > 0) {                                    GuiUtils.cancelEditing(cookieTable);            if (cookieTable.getRowCount() > 0) {                int rowSelected = cookieTable.getSelectedRow();                if (rowSelected < 0) {                    rowSelected = 0;                }                tableModel.removeRow(rowSelected);                tableModel.fireTableDataChanged();                                                configureButtonsState();                if (tableModel.getRowCount() > 0) {                                                            int rowToSelect = rowSelected;                    if (rowSelected >= tableModel.getRowCount()) {                        rowToSelect = rowSelected - 1;                    }                    cookieTable.setRowSelectionInterval(rowToSelect, rowToSelect);                }            }        }    } else if (action.equals(ADD_COMMAND)) {                        GuiUtils.stopTableEditing(cookieTable);        tableModel.addNewRow();        tableModel.fireTableDataChanged();        configureButtonsState();                int rowToSelect = tableModel.getRowCount() - 1;        cookieTable.setRowSelectionInterval(rowToSelect, rowToSelect);    } else if (action.equals(LOAD_COMMAND)) {        try {                        final String[] _txt = { ".txt" };            final JFileChooser chooser = FileDialoger.promptToOpenFile(_txt);            if (chooser != null) {                CookieManager manager = new CookieManager();                manager.addFile(chooser.getSelectedFile().getAbsolutePath());                for (int i = 0; i < manager.getCookieCount(); i++) {                    addCookieToTable(manager.get(i));                }                tableModel.fireTableDataChanged();                configureButtonsState();            }        } catch (IOException ex) {                    }    } else if (action.equals(SAVE_COMMAND)) {        try {                        final JFileChooser chooser = FileDialoger.promptToSaveFile("cookies.txt");            if (chooser != null) {                ((CookieManager) createTestElement()).save(chooser.getSelectedFile().getAbsolutePath());            }        } catch (IOException ex) {            JMeterUtils.reportErrorToUser(ex.getMessage(), "Error saving cookies");        }    }}
1
private void addCookieToTable(Cookie cookie)
{    tableModel.addRow(new Object[] { cookie.getName(), cookie.getValue(), cookie.getDomain(), cookie.getPath(), Boolean.valueOf(cookie.getSecure()) });}
0
public void modifyTestElement(TestElement cm)
{    GuiUtils.stopTableEditing(cookieTable);    cm.clear();    configureTestElement(cm);    if (cm instanceof CookieManager) {        CookieManager cookieManager = (CookieManager) cm;        for (int i = 0; i < tableModel.getRowCount(); i++) {            Cookie cookie = createCookie(tableModel.getRowData(i));            cookieManager.add(cookie);        }        cookieManager.setClearEachIteration(clearEachIteration.isSelected());        cookieManager.setControlledByThread(controlledByThreadGroup.isSelected());        cookieManager.setCookiePolicy(policy.getText());    }}
0
public void clearGui()
{    super.clearGui();    tableModel.clearData();    clearEachIteration.setSelected(false);    controlledByThreadGroup.setSelected(false);    policy.setText(DEFAULT_POLICY);    configureButtonsState();}
0
private void configureButtonsState()
{    boolean hasRows = tableModel.getRowCount() > 0;    deleteButton.setEnabled(hasRows);    saveButton.setEnabled(hasRows);}
0
private Cookie createCookie(Object[] rowData)
{    Cookie cookie = new Cookie((String) rowData[0], (String) rowData[1], (String) rowData[2], (String) rowData[3], ((Boolean) rowData[4]).booleanValue(),     0);    return cookie;}
0
private void populateTable(CookieManager manager)
{    tableModel.clearData();    for (JMeterProperty jMeterProperty : manager.getCookies()) {        addCookieToTable((Cookie) jMeterProperty.getObjectValue());    }    configureButtonsState();}
0
public TestElement createTestElement()
{    CookieManager cookieManager = new CookieManager();    modifyTestElement(cookieManager);    return cookieManager;}
0
public void configure(TestElement el)
{    super.configure(el);    CookieManager cookieManager = (CookieManager) el;    populateTable(cookieManager);    clearEachIteration.setSelected(cookieManager.getClearEachIteration());        policy.setText(cookieManager.getPolicy());    controlledByThreadGroup.setSelected(cookieManager.getControlledByThread());    clearEachIteration.setEnabled(!cookieManager.getControlledByThread());}
0
private void init()
{        tableModel = new PowerTableModel(COLUMN_RESOURCE_NAMES, columnClasses);    clearEachIteration =     new JCheckBox(JMeterUtils.getResString("clear_cookies_per_iter"), false);    controlledByThreadGroup =     new JCheckBox(JMeterUtils.getResString("cookie_clear_controlled_by_threadgroup"), false);    controlledByThreadGroup.setActionCommand(CONTROLLED_BY_THREADGROUP);    controlledByThreadGroup.addActionListener(this);    policy = new JLabeledChoice(    JMeterUtils.getResString("cookie_manager_policy"), new HC4CookieHandler().getPolicies());    setLayout(new BorderLayout());    setBorder(makeBorder());    JPanel northPanel = new JPanel();    northPanel.setLayout(new VerticalLayout(5, VerticalLayout.BOTH));    northPanel.add(makeTitlePanel());    JPanel optionsPane = new JPanel();    optionsPane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("cookie_options")));    optionsPane.setLayout(new VerticalLayout(5, VerticalLayout.BOTH));    optionsPane.add(clearEachIteration);    optionsPane.add(controlledByThreadGroup);    JPanel policyTypePane = new JPanel();    policyTypePane.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));    policyTypePane.add(policy);    optionsPane.add(policyTypePane);    northPanel.add(optionsPane);    add(northPanel, BorderLayout.NORTH);    add(createCookieTablePanel(), BorderLayout.CENTER);}
0
public JPanel createCookieTablePanel()
{        cookieTable = new JTable(tableModel);    JMeterUtils.applyHiDPI(cookieTable);    cookieTable.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());    cookieTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);    cookieTable.setPreferredScrollableViewportSize(new Dimension(100, 70));    JPanel buttonPanel = createButtonPanel();    JPanel panel = new JPanel(new BorderLayout(0, 5));    panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), JMeterUtils.getResString(    "cookies_stored")));    panel.add(new JScrollPane(cookieTable), BorderLayout.CENTER);    panel.add(buttonPanel, BorderLayout.SOUTH);    return panel;}
0
private JButton createButton(String resName, char mnemonic, String command, boolean enabled)
{    JButton button = new JButton(JMeterUtils.getResString(resName));    button.setMnemonic(mnemonic);    button.setActionCommand(command);    button.setEnabled(enabled);    button.addActionListener(this);    return button;}
0
private JPanel createButtonPanel()
{    boolean tableEmpty = tableModel.getRowCount() == 0;        addButton = createButton("add", 'A', ADD_COMMAND, true);        deleteButton = createButton("delete", 'D', DELETE_COMMAND, !tableEmpty);        loadButton = createButton("load", 'L', LOAD_COMMAND, true);        saveButton = createButton("save", 'S', SAVE_COMMAND, !tableEmpty);    JPanel buttonPanel = new JPanel();    buttonPanel.add(addButton);    buttonPanel.add(deleteButton);    buttonPanel.add(loadButton);    buttonPanel.add(saveButton);    return buttonPanel;}
0
public String getLabelResource()
{    return "dns_cache_manager_title";}
0
public void modifyTestElement(TestElement dnsRes)
{    GuiUtils.stopTableEditing(dnsServersTable);    dnsRes.clear();    configureTestElement(dnsRes);    if (dnsRes instanceof DNSCacheManager) {        DNSCacheManager dnsCacheManager = (DNSCacheManager) dnsRes;        for (int i = 0; i < dnsServersTableModel.getRowCount(); i++) {            String server = (String) dnsServersTableModel.getRowData(i)[0];            dnsCacheManager.addServer(server);        }        for (int i = 0; i < dnsHostsTableModel.getRowCount(); i++) {            String host = (String) dnsHostsTableModel.getRowData(i)[0];            String addresses = (String) dnsHostsTableModel.getRowData(i)[1];            dnsCacheManager.addHost(host, addresses);        }        dnsCacheManager.setClearEachIteration(clearEachIteration.isSelected());        if (providerDNSradioGroup.isSelected(custResButton.getModel())) {            dnsCacheManager.setCustomResolver(true);        } else {            dnsCacheManager.setCustomResolver(false);        }    }}
0
public void clearGui()
{    super.clearGui();    clearEachIteration.setSelected(DNSCacheManager.DEFAULT_CLEAR_CACHE_EACH_ITER);    providerDNSradioGroup.setSelected(sysResButton.getModel(), true);    dnsServersTableModel.clearData();    deleteButton.setEnabled(false);    dnsHostsTableModel.clearData();    deleteHostButton.setEnabled(false);}
0
private void populateTable(DNSCacheManager resolver)
{    dnsServersTableModel.clearData();    for (JMeterProperty jMeterProperty : resolver.getServers()) {        addServerToTable((String) jMeterProperty.getObjectValue());    }}
0
private void populateHostsTable(DNSCacheManager resolver)
{    dnsHostsTableModel.clearData();    for (JMeterProperty hostEntry : resolver.getHosts()) {        addHostToTable((StaticHost) hostEntry.getObjectValue());    }}
0
public TestElement createTestElement()
{    DNSCacheManager dnsCacheManager = new DNSCacheManager();    modifyTestElement(dnsCacheManager);    return dnsCacheManager;}
0
public void configure(TestElement el)
{    super.configure(el);    DNSCacheManager dnsCacheManager = (DNSCacheManager) el;    populateTable(dnsCacheManager);    populateHostsTable(dnsCacheManager);    clearEachIteration.setSelected(dnsCacheManager.isClearEachIteration());    if (dnsCacheManager.isCustomResolver()) {        providerDNSradioGroup.setSelected(custResButton.getModel(), true);        deleteButton.setEnabled(dnsServersTable.getColumnCount() > 0);        deleteHostButton.setEnabled(dnsHostsTable.getColumnCount() > 0);        addButton.setEnabled(true);        addHostButton.setEnabled(true);    } else {        providerDNSradioGroup.setSelected(sysResButton.getModel(), true);    }}
0
private void init()
{        dnsServersTableModel = new PowerTableModel(COLUMN_RESOURCE_NAMES, columnClasses);    dnsHostsTableModel = new PowerTableModel(HOSTS_COLUMN_RESOURCE_NAMES, HOSTS_COLUMN_CLASSES);        clearEachIteration = new JCheckBox(JMeterUtils.getResString("clear_cache_each_iteration"), true);    setLayout(new BorderLayout());    setBorder(makeBorder());    JPanel northPanel = new JPanel();    northPanel.setLayout(new VerticalLayout(5, VerticalLayout.BOTH));    northPanel.add(makeTitlePanel());    JPanel optionsPane = new JPanel();        optionsPane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), OPTIONS));    optionsPane.setLayout(new VerticalLayout(5, VerticalLayout.BOTH));    optionsPane.add(clearEachIteration, BorderLayout.WEST);    optionsPane.add(createChooseResPanel(), BorderLayout.SOUTH);    northPanel.add(optionsPane);    add(northPanel, BorderLayout.NORTH);    JPanel tables = new JPanel();    tables.setLayout(new VerticalLayout(2, VerticalLayout.BOTH));    dnsServersPanel = createDnsServersTablePanel();    dnsHostsPanel = createDnsHostsTablePanel();    tables.add(dnsServersPanel);    tables.add(dnsHostsPanel);    add(tables, BorderLayout.CENTER);}
0
public JPanel createDnsServersTablePanel()
{        dnsServersTable = new JTable(dnsServersTableModel);    JMeterUtils.applyHiDPI(dnsServersTable);    dnsServersTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);    dnsServersTable.setPreferredScrollableViewportSize(new Dimension(400, 100));    JPanel panel = new JPanel(new BorderLayout(0, 5));    panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("dns_servers")));    JScrollPane dnsServScrollPane = new JScrollPane(dnsServersTable);    panel.add(dnsServScrollPane, BorderLayout.CENTER);    dnsServButPanel = createButtonPanel();    panel.add(dnsServButPanel, BorderLayout.SOUTH);    return panel;}
0
public JPanel createDnsHostsTablePanel()
{        dnsHostsTable = new JTable(dnsHostsTableModel);    JMeterUtils.applyHiDPI(dnsHostsTable);    dnsHostsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);    dnsHostsTable.setPreferredScrollableViewportSize(new Dimension(400, 100));    JPanel panel = new JPanel(new BorderLayout(0, 5));    panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("dns_hosts")));    JScrollPane dnsHostsScrollPane = new JScrollPane(dnsHostsTable);    panel.add(dnsHostsScrollPane, BorderLayout.CENTER);    dnsHostsButPanel = createHostsButtonPanel();    panel.add(dnsHostsButPanel, BorderLayout.SOUTH);    return panel;}
0
private JPanel createChooseResPanel()
{    JPanel chooseResPanel = new JPanel(new BorderLayout(0, 5));    sysResButton = new JRadioButton();    sysResButton.setSelected(true);    sysResButton.setText(SYS_RES_COMMAND);    sysResButton.setToolTipText(SYS_RES_COMMAND);    sysResButton.setEnabled(true);    sysResButton.addActionListener(this);    custResButton = new JRadioButton();    custResButton.setSelected(false);    custResButton.setText(CUST_RES_COMMAND);    custResButton.setToolTipText(CUST_RES_COMMAND);    custResButton.setEnabled(true);    custResButton.addActionListener(this);    providerDNSradioGroup.add(sysResButton);    providerDNSradioGroup.add(custResButton);    chooseResPanel.add(sysResButton, BorderLayout.WEST);    chooseResPanel.add(custResButton, BorderLayout.CENTER);    return chooseResPanel;}
0
private JPanel createButtonPanel()
{    boolean tableEmpty = dnsServersTableModel.getRowCount() == 0;        addButton = createButton("add", 'A', ADD_COMMAND, custResButton.isSelected());        deleteButton = createButton("delete", 'D', DELETE_COMMAND, !tableEmpty);    JPanel buttonPanel = new JPanel();    buttonPanel.add(addButton, BorderLayout.WEST);    buttonPanel.add(deleteButton, BorderLayout.LINE_END);    return buttonPanel;}
0
private JPanel createHostsButtonPanel()
{    boolean tableEmpty = dnsHostsTableModel.getRowCount() == 0;        addHostButton = createButton("add_host", 'H', ADD_HOST_COMMAND, custResButton.isSelected());        deleteHostButton = createButton("delete_host", 'X', DELETE_HOST_COMMAND, !tableEmpty);    JPanel buttonPanel = new JPanel();    buttonPanel.add(addHostButton, BorderLayout.WEST);    buttonPanel.add(deleteHostButton, BorderLayout.LINE_END);    return buttonPanel;}
0
private JButton createButton(String resName, char mnemonic, String command, boolean enabled)
{    JButton button = new JButton(JMeterUtils.getResString(resName));    button.setMnemonic(mnemonic);    button.setActionCommand(command);    button.setEnabled(enabled);    button.addActionListener(this);    return button;}
0
private void addServerToTable(String dnsServer)
{    dnsServersTableModel.addRow(new Object[] { dnsServer });}
0
private void addHostToTable(StaticHost hostEntry)
{        dnsHostsTableModel.addRow(new Object[] { hostEntry.getName(), hostEntry.getAddress() });}
1
public void actionPerformed(ActionEvent e)
{    String action = e.getActionCommand();    enableTable(custResButton.isSelected(), sysResButton.isSelected(), dnsServersTable, dnsServersTableModel, addButton, deleteButton);    enableTable(custResButton.isSelected(), sysResButton.isSelected(), dnsHostsTable, dnsHostsTableModel, addHostButton, deleteHostButton);    if (action.equals(DELETE_COMMAND)) {        deleteTableRow(dnsServersTable, dnsServersTableModel, deleteButton);    } else if (action.equals(ADD_COMMAND)) {        addTableRow(dnsServersTable, dnsServersTableModel, deleteButton);    } else if (DELETE_HOST_COMMAND.equals(action)) {        deleteTableRow(dnsHostsTable, dnsHostsTableModel, deleteHostButton);    } else if (ADD_HOST_COMMAND.equals(action)) {        addTableRow(dnsHostsTable, dnsHostsTableModel, deleteHostButton);    }}
0
private void enableTable(boolean custEnabled, boolean sysEnabled, JTable table, PowerTableModel model, JButton addButton, JButton deleteButton)
{    table.setEnabled(custEnabled);    Color greyColor = new Color(240, 240, 240);    Color blueColor = new Color(184, 207, 229);    table.setBackground(sysEnabled ? greyColor : Color.WHITE);    table.setSelectionBackground(sysEnabled ? greyColor : blueColor);    addButton.setEnabled(custEnabled);    deleteButton.setEnabled(custEnabled);    if (custEnabled && (model.getRowCount() > 0)) {        deleteButton.setEnabled(true);        addButton.setEnabled(true);    }}
0
private void addTableRow(JTable table, PowerTableModel model, JButton button)
{            GuiUtils.stopTableEditing(table);    model.addNewRow();    model.fireTableDataChanged();    if (!button.isEnabled()) {        button.setEnabled(true);    }        int rowToSelect = model.getRowCount() - 1;    table.setRowSelectionInterval(rowToSelect, rowToSelect);}
0
private void deleteTableRow(JTable table, PowerTableModel model, JButton button)
{    if (model.getRowCount() > 0) {                        GuiUtils.cancelEditing(table);        int rowSelected = table.getSelectedRow();        if (rowSelected != -1) {            model.removeRow(rowSelected);            model.fireTableDataChanged();            if (model.getRowCount() == 0) {                button.setEnabled(false);            } else {                int rowToSelect = Math.min(rowSelected, model.getRowCount() - 1);                table.setRowSelectionInterval(rowToSelect, rowToSelect);            }        }    }}
0
public TestElement createTestElement()
{    configureTestElement(headerManager);    return (TestElement) headerManager.clone();}
0
public void modifyTestElement(TestElement el)
{    GuiUtils.stopTableEditing(headerTable);    el.clear();    el.addTestElement(headerManager);    configureTestElement(el);}
0
public void clearGui()
{    super.clearGui();    tableModel.clearData();    deleteButton.setEnabled(false);    saveButton.setEnabled(false);}
0
public void configure(TestElement el)
{    headerManager.clear();    super.configure(el);    headerManager.addTestElement(el);    checkButtonsStatus();}
0
public String getLabelResource()
{        return "header_manager_title";}
0
private void init()
{        setLayout(new BorderLayout());    setBorder(makeBorder());    add(makeTitlePanel(), BorderLayout.NORTH);    add(createHeaderTablePanel(), BorderLayout.CENTER);}
0
private void checkButtonsStatus()
{    if (tableModel.getRowCount() == 0) {        deleteButton.setEnabled(false);        saveButton.setEnabled(false);    } else {        deleteButton.setEnabled(true);        saveButton.setEnabled(true);    }}
0
protected void deleteRows()
{            GuiUtils.cancelEditing(headerTable);    int[] rowsSelected = headerTable.getSelectedRows();    int anchorSelection = headerTable.getSelectionModel().getAnchorSelectionIndex();    headerTable.clearSelection();    if (rowsSelected.length > 0) {        for (int i = rowsSelected.length - 1; i >= 0; i--) {            tableModel.removeRow(rowsSelected[i]);        }        tableModel.fireTableDataChanged();                if (tableModel.getRowCount() > 0) {            if (anchorSelection >= tableModel.getRowCount()) {                anchorSelection = tableModel.getRowCount() - 1;            }            headerTable.setRowSelectionInterval(anchorSelection, anchorSelection);        }        checkButtonsStatus();    } else {        if (tableModel.getRowCount() > 0) {            tableModel.removeRow(0);            tableModel.fireTableDataChanged();            headerTable.setRowSelectionInterval(0, 0);        }    }}
0
public void actionPerformed(ActionEvent e)
{    String action = e.getActionCommand();    if (action.equals(DELETE_COMMAND)) {        deleteRows();    } else if (action.equals(ADD_COMMAND)) {                        GuiUtils.stopTableEditing(headerTable);        tableModel.addNewRow();        tableModel.fireTableDataChanged();                checkButtonsStatus();                int rowToSelect = tableModel.getRowCount() - 1;        headerTable.setRowSelectionInterval(rowToSelect, rowToSelect);    } else if (action.equals(LOAD_COMMAND)) {        try {            final JFileChooser chooser = FileDialoger.promptToOpenFile();            if (chooser != null) {                headerManager.addFile(chooser.getSelectedFile().getAbsolutePath());                tableModel.fireTableDataChanged();                checkButtonsStatus();            }        } catch (IOException ex) {                    }    } else if (action.equals(SAVE_COMMAND)) {        try {            final JFileChooser chooser = FileDialoger.promptToSaveFile(null);            if (chooser != null) {                headerManager.save(chooser.getSelectedFile().getAbsolutePath());            }        } catch (IOException ex) {            JMeterUtils.reportErrorToUser(ex.getMessage(), "Error saving headers");        }    } else if (action.equals(ADD_FROM_CLIPBOARD)) {        addFromClipboard();    }}
1
protected void addFromClipboard()
{    GuiUtils.stopTableEditing(this.headerTable);    int rowCount = headerTable.getRowCount();    try {        String clipboardContent = GuiUtils.getPastedText();        if (clipboardContent == null) {            return;        }                String[] clipboardLines = clipboardContent.split(CLIPBOARD_LINE_DELIMITER);        for (String clipboardLine : clipboardLines) {                        int index = clipboardLine.indexOf(CLIPBOARD_COLON_DELIMITER);            if (index < 0) {                                index = clipboardLine.indexOf(CLIPBOARD_TAB_DELIMITER);            }            if (index > 0) {                Header header = new Header(clipboardLine.substring(0, index).trim(), clipboardLine.substring(index + 1).trim());                headerManager.add(header);            }        }        tableModel.fireTableDataChanged();        if (headerTable.getRowCount() > rowCount) {                        int rowToSelect = tableModel.getRowCount() - 1;            headerTable.setRowSelectionInterval(rowCount, rowToSelect);        }        checkButtonsStatus();    } catch (IOException ioe) {        JOptionPane.showMessageDialog(this, "Could not add read headers from clipboard:\n" + ioe.getLocalizedMessage(), "Error", JOptionPane.ERROR_MESSAGE);    } catch (UnsupportedFlavorException ufe) {        JOptionPane.showMessageDialog(this, "Could not add retrieved " + DataFlavor.stringFlavor.getHumanPresentableName() + " from clipboard" + ufe.getLocalizedMessage(), "Error", JOptionPane.ERROR_MESSAGE);    }}
0
public JPanel createHeaderTablePanel()
{        headerTable = new JTable(tableModel);    JMeterUtils.applyHiDPI(headerTable);    headerTable.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());    headerTable.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);    headerTable.setPreferredScrollableViewportSize(new Dimension(100, 70));    JPanel panel = new JPanel(new BorderLayout(0, 5));    panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("headers_stored")));    panel.add(new JScrollPane(headerTable), BorderLayout.CENTER);    panel.add(createButtonPanel(), BorderLayout.SOUTH);    return panel;}
0
private JButton createButton(String resName, char mnemonic, String command, boolean enabled)
{    JButton button = new JButton(JMeterUtils.getResString(resName));    button.setMnemonic(mnemonic);    button.setActionCommand(command);    button.setEnabled(enabled);    button.addActionListener(this);    return button;}
0
private JPanel createButtonPanel()
{    boolean tableEmpty = tableModel.getRowCount() == 0;        JButton addButton = createButton("add", 'A', ADD_COMMAND, true);        deleteButton = createButton("delete", 'D', DELETE_COMMAND, !tableEmpty);        JButton loadButton = createButton("load", 'L', LOAD_COMMAND, true);        saveButton = createButton("save", 'S', SAVE_COMMAND, !tableEmpty);        JButton addFromClipboard = createButton("add_from_clipboard", 'C', ADD_FROM_CLIPBOARD, true);    JPanel buttonPanel = new JPanel();    buttonPanel.add(addButton);    buttonPanel.add(addFromClipboard);    buttonPanel.add(deleteButton);    buttonPanel.add(loadButton);    buttonPanel.add(saveButton);    return buttonPanel;}
0
public void clearData()
{    manager.clear();    fireTableDataChanged();}
0
public void removeRow(int row)
{    manager.remove(row);}
0
public void addNewRow()
{    manager.add();}
0
public boolean isCellEditable(int row, int column)
{        return true;}
0
public Class<?> getColumnClass(int column)
{    return getValueAt(0, column).getClass();}
0
public int getRowCount()
{    return manager.getHeaders().size();}
0
public int getColumnCount()
{    return manager.getColumnCount();}
0
public String getColumnName(int column)
{    return manager.getColumnName(column);}
0
public Object getValueAt(int row, int column)
{    Header head = manager.getHeader(row);    if (column == 0) {        return head.getName();    } else if (column == 1) {        return head.getValue();    }    return null;}
0
public void setValueAt(Object value, int row, int column)
{    Header header = manager.getHeader(row);    if (column == 0) {        header.setName((String) value);    } else if (column == 1) {        header.setValue((String) value);    }}
0
protected void initializeTableModel()
{    tableModel = new ObjectTableModel(new String[] { ArgumentsPanel.COLUMN_RESOURCE_NAMES_0, ArgumentsPanel.COLUMN_RESOURCE_NAMES_1, ENCODE_OR_NOT, CONTENT_TYPE, INCLUDE_EQUALS }, HTTPArgument.class, new Functor[] {     new Functor("getName"),     new Functor("getValue"),     new Functor("isAlwaysEncoded"),     new Functor("getContentType"),     new Functor("isUseEquals") }, new Functor[] {     new Functor("setName"),     new Functor("setValue"),     new Functor("setAlwaysEncoded"), new Functor("setContentType"),     new Functor("setUseEquals") }, new Class[] { String.class, String.class, Boolean.class, String.class, Boolean.class });}
0
public static boolean testFunctors()
{    HTTPArgumentsPanel instance = new HTTPArgumentsPanel();    instance.initializeTableModel();    return instance.tableModel.checkFunctors(null, instance.getClass());}
0
protected void sizeColumns(JTable table)
{    GuiUtils.fixSize(table.getColumn(INCLUDE_EQUALS), table);    GuiUtils.fixSize(table.getColumn(ENCODE_OR_NOT), table);}
0
protected HTTPArgument makeNewArgument()
{    HTTPArgument arg = new HTTPArgument("", "");    arg.setAlwaysEncoded(false);    arg.setUseEquals(true);    return arg;}
0
public TestElement createTestElement()
{    Arguments args = getUnclonedParameters();    super.configureTestElement(args);    return (TestElement) args.clone();}
0
public Arguments getParameters()
{    Arguments args = getUnclonedParameters();    return (Arguments) args.clone();}
0
private Arguments getUnclonedParameters()
{    stopTableEditing();        @SuppressWarnings("unchecked")    Iterator<HTTPArgument> modelData = (Iterator<HTTPArgument>) tableModel.iterator();    Arguments args = new Arguments();    while (modelData.hasNext()) {        HTTPArgument arg = modelData.next();        args.addArgument(arg);    }    return args;}
0
public void configure(TestElement el)
{    super.configure(el);    if (el instanceof Arguments) {        tableModel.clearData();        HTTPArgument.convertArgumentsToHTTP((Arguments) el);        for (JMeterProperty jMeterProperty : ((Arguments) el).getArguments()) {            HTTPArgument arg = (HTTPArgument) jMeterProperty.getObjectValue();            tableModel.addRow(arg);        }    }    checkButtonsStatus();}
0
protected boolean isMetaDataNormal(HTTPArgument arg)
{    return arg.getMetaData() == null || arg.getMetaData().equals("=") || (arg.getValue() != null && arg.getValue().length() > 0);}
0
protected void addFromClipboard()
{    addFromClipboard(CLIPBOARD_LINE_DELIMITERS, CLIPBOARD_ARG_DELIMITERS);}
0
protected Argument createArgumentFromClipboard(String[] clipboardCols)
{    HTTPArgument argument = makeNewArgument();    argument.setName(clipboardCols[0]);    if (clipboardCols.length > 1) {        argument.setValue(clipboardCols[1]);        if (clipboardCols.length > 2) {                        argument.setAlwaysEncoded(Boolean.parseBoolean(clipboardCols[2].trim()));            if (clipboardCols.length > 3) {                Boolean useEqual = BooleanUtils.toBooleanObject(clipboardCols[3].trim());                                argument.setUseEquals(useEqual != null ? useEqual.booleanValue() : true);            }        }    }    return argument;}
0
private void init()
{            JTable table = getTable();    final JPopupMenu popupMenu = new JPopupMenu();    JMenuItem variabilizeItem = new JMenuItem(JMeterUtils.getResString("transform_into_variable"));    variabilizeItem.addActionListener(e -> transformNameIntoVariable());    popupMenu.add(variabilizeItem);    table.setComponentPopupMenu(popupMenu);}
0
private void transformNameIntoVariable()
{    int[] rowsSelected = getTable().getSelectedRows();    for (int selectedRow : rowsSelected) {        String name = (String) tableModel.getValueAt(selectedRow, 0);        if (StringUtils.isNotBlank(name)) {            name = name.trim();            name = name.replaceAll("\\$", "_");            name = name.replaceAll("\\{", "_");            name = name.replaceAll("\\}", "_");            tableModel.setValueAt("${" + name + "}", selectedRow, 1);        }    }}
0
private void initializeTableModel()
{    tableModel = new ObjectTableModel(new String[] { FILEPATH, PARAMNAME, MIMETYPE }, HTTPFileArg.class, new Functor[] {     new Functor("getPath"),     new Functor("getParamName"),     new Functor("getMimeType") }, new Functor[] {     new Functor("setPath"),     new Functor("setParamName"),     new Functor("setMimeType") }, new Class[] { String.class, String.class, String.class });}
0
public static boolean testFunctors()
{    HTTPFileArgsPanel instance = new HTTPFileArgsPanel();    instance.initializeTableModel();    return instance.tableModel.checkFunctors(null, instance.getClass());}
0
public void modifyTestElement(TestElement testElement)
{    GuiUtils.stopTableEditing(table);    if (testElement instanceof HTTPSamplerBase) {        HTTPSamplerBase base = (HTTPSamplerBase) testElement;        int rows = tableModel.getRowCount();                @SuppressWarnings("unchecked")        Iterator<HTTPFileArg> modelData = (Iterator<HTTPFileArg>) tableModel.iterator();        HTTPFileArg[] files = new HTTPFileArg[rows];        int row = 0;        while (modelData.hasNext()) {            HTTPFileArg file = modelData.next();            files[row++] = file;        }        base.setHTTPFiles(files);    }}
0
public boolean hasData()
{    return tableModel.iterator().hasNext();}
0
public void configure(TestElement testElement)
{    if (testElement instanceof HTTPSamplerBase) {        HTTPSamplerBase base = (HTTPSamplerBase) testElement;        tableModel.clearData();        for (HTTPFileArg file : base.getHTTPFiles()) {            tableModel.addRow(file);        }        checkDeleteAndBrowseStatus();    }}
0
private void checkDeleteAndBrowseStatus()
{        if (tableModel.getRowCount() == 0) {        browse.setEnabled(false);        delete.setEnabled(false);    } else {        browse.setEnabled(true);        delete.setEnabled(true);    }}
0
public void clear()
{    GuiUtils.stopTableEditing(table);    tableModel.clearData();}
0
public void actionPerformed(ActionEvent e)
{    String action = e.getActionCommand();    if (action.equals(ADD)) {                addFile("");    }    runCommandOnSelectedFile(action);}
0
private void runCommandOnSelectedFile(String command)
{            GuiUtils.cancelEditing(table);    int rowSelected = table.getSelectedRow();    if (rowSelected >= 0) {        runCommandOnRow(command, rowSelected);        tableModel.fireTableDataChanged();                checkDeleteAndBrowseStatus();                if (tableModel.getRowCount() != 0) {            int rowToSelect = rowSelected;            if (rowSelected >= tableModel.getRowCount()) {                rowToSelect = rowSelected - 1;            }            table.setRowSelectionInterval(rowToSelect, rowToSelect);        }    }}
0
private void runCommandOnRow(String command, int rowSelected)
{    if (DELETE.equals(command)) {        tableModel.removeRow(rowSelected);    } else if (BROWSE.equals(command)) {        String path = browseAndGetFilePath();        if (StringUtils.isNotBlank(path)) {            tableModel.setValueAt(path, rowSelected, 0);        }    }}
0
private void addFile(String path)
{            GuiUtils.stopTableEditing(table);    tableModel.addRow(new HTTPFileArg(path));    checkDeleteAndBrowseStatus();        int rowToSelect = tableModel.getRowCount() - 1;    table.setRowSelectionInterval(rowToSelect, rowToSelect);}
0
private String browseAndGetFilePath()
{        String path = "";    JFileChooser chooser = FileDialoger.promptToOpenFile();    if (chooser != null) {        File file = chooser.getSelectedFile();        if (file != null) {            path = file.getPath();        }    }    return path;}
0
protected void stopTableEditing()
{    GuiUtils.stopTableEditing(table);}
0
private Component makeMainPanel()
{    initializeTableModel();    table = new JTable(tableModel);    JMeterUtils.applyHiDPI(table);    table.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());    table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);    return makeScrollPane(table);}
0
private JPanel makeButtonPanel()
{        add = new JButton(JMeterUtils.getResString("add"));    add.setActionCommand(ADD);    add.setEnabled(true);        browse = new JButton(JMeterUtils.getResString("browse"));    browse.setActionCommand(BROWSE);        delete = new JButton(JMeterUtils.getResString("delete"));    delete.setActionCommand(DELETE);    checkDeleteAndBrowseStatus();    JPanel buttonPanel = new JPanel();    buttonPanel.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 10));    add.addActionListener(this);    browse.addActionListener(this);    delete.addActionListener(this);    buttonPanel.add(add);    buttonPanel.add(browse);    buttonPanel.add(delete);    return buttonPanel;}
0
private void init()
{        JPanel p = this;    p.setLayout(new BorderLayout());    p.add(makeMainPanel(), BorderLayout.CENTER);        p.add(Box.createVerticalStrut(70), BorderLayout.WEST);    p.add(makeButtonPanel(), BorderLayout.SOUTH);    table.revalidate();}
0
private JScrollPane makeScrollPane(Component comp)
{    JScrollPane pane = new JScrollPane(comp);    pane.setPreferredSize(pane.getMinimumSize());    return pane;}
0
public void process()
{    JMeterContext context = getThreadContext();    Sampler sam = context.getCurrentSampler();    SampleResult res = context.getPreviousResult();    HTTPSamplerBase sampler;    HTTPSampleResult result;    if (!(sam instanceof HTTPSamplerBase) || !(res instanceof HTTPSampleResult)) {                return;    } else {        sampler = (HTTPSamplerBase) sam;        result = (HTTPSampleResult) res;    }    List<HTTPSamplerBase> potentialLinks = new ArrayList<>();    String responseText = result.getResponseDataAsString();        int index = responseText.indexOf('<');    if (index == -1) {        index = 0;    }    if (log.isDebugEnabled()) {            }    Document html = (Document) HtmlParsingUtils.getDOM(responseText.substring(index));    addAnchorUrls(html, result, sampler, potentialLinks);    addFormUrls(html, result, sampler, potentialLinks);    addFramesetUrls(html, result, sampler, potentialLinks);    if (!potentialLinks.isEmpty()) {        HTTPSamplerBase url = potentialLinks.get(ThreadLocalRandom.current().nextInt(potentialLinks.size()));        if (log.isDebugEnabled()) {                    }        sampler.setDomain(url.getDomain());        sampler.setPath(url.getPath());        if (url.getMethod().equals(HTTPConstants.POST)) {            for (JMeterProperty jMeterProperty : sampler.getArguments()) {                Argument arg = (Argument) jMeterProperty.getObjectValue();                modifyArgument(arg, url.getArguments());            }        } else {            sampler.setArguments(url.getArguments());        }        sampler.setProtocol(url.getProtocol());    } else {            }}
1
private void modifyArgument(Argument arg, Arguments args)
{    if (log.isDebugEnabled()) {            }    List<Argument> possibleReplacements = new ArrayList<>();    PropertyIterator iter = args.iterator();    Argument replacementArg;    while (iter.hasNext()) {        replacementArg = (Argument) iter.next().getObjectValue();        try {            if (HtmlParsingUtils.isArgumentMatched(replacementArg, arg)) {                possibleReplacements.add(replacementArg);            }        } catch (Exception ex) {                    }    }    if (!possibleReplacements.isEmpty()) {        replacementArg = possibleReplacements.get(ThreadLocalRandom.current().nextInt(possibleReplacements.size()));        arg.setName(replacementArg.getName());        arg.setValue(replacementArg.getValue());        if (log.isDebugEnabled()) {                    }        args.removeArgument(replacementArg);    }}
1
public void addConfigElement(ConfigElement config)
{}
0
private void addFormUrls(Document html, HTTPSampleResult result, HTTPSamplerBase config, List<HTTPSamplerBase> potentialLinks)
{    NodeList rootList = html.getChildNodes();    List<HTTPSamplerBase> urls = new LinkedList<>();    for (int x = 0; x < rootList.getLength(); x++) {        urls.addAll(HtmlParsingUtils.createURLFromForm(rootList.item(x), result.getURL()));    }    for (HTTPSamplerBase newUrl : urls) {        newUrl.setMethod(HTTPConstants.POST);        if (log.isDebugEnabled()) {                    }        if (HtmlParsingUtils.isAnchorMatched(newUrl, config)) {                        potentialLinks.add(newUrl);        }    }}
1
private void addAnchorUrls(Document html, HTTPSampleResult result, HTTPSamplerBase config, List<HTTPSamplerBase> potentialLinks)
{    String base = "";        NodeList baseList = html.getElementsByTagName("base");    if (baseList.getLength() > 0) {                base = baseList.item(0).getAttributes().getNamedItem("href").getNodeValue();    }        NodeList nodeList = html.getElementsByTagName("a");    for (int i = 0; i < nodeList.getLength(); i++) {        Node tempNode = nodeList.item(i);        NamedNodeMap nnm = tempNode.getAttributes();                Node namedItem = nnm.getNamedItem("href");        if (namedItem == null) {            continue;        }        String hrefStr = namedItem.getNodeValue();        if (hrefStr.startsWith("javascript:")) {                        continue;        }        try {            HTTPSamplerBase newUrl = HtmlParsingUtils.createUrlFromAnchor(hrefStr, ConversionUtils.makeRelativeURL(result.getURL(), base));            newUrl.setMethod(HTTPConstants.GET);            if (log.isDebugEnabled()) {                            }            if (HtmlParsingUtils.isAnchorMatched(newUrl, config)) {                                potentialLinks.add(newUrl);            }        } catch (MalformedURLException e) {                    }    }}
1
private void addFramesetUrls(Document html, HTTPSampleResult result, HTTPSamplerBase config, List<HTTPSamplerBase> potentialLinks)
{    String base = "";        NodeList baseList = html.getElementsByTagName("base");    if (baseList.getLength() > 0) {        base =         baseList.item(0).getAttributes().getNamedItem("href").getNodeValue();    }        NodeList nodeList = html.getElementsByTagName("frame");    for (int i = 0; i < nodeList.getLength(); i++) {        Node tempNode = nodeList.item(i);        NamedNodeMap nnm = tempNode.getAttributes();                Node namedItem = nnm.getNamedItem("src");        if (namedItem == null) {            continue;        }        String hrefStr = namedItem.getNodeValue();        try {            HTTPSamplerBase newUrl = HtmlParsingUtils.createUrlFromAnchor(hrefStr, ConversionUtils.makeRelativeURL(result.getURL(), base));            newUrl.setMethod(HTTPConstants.GET);            if (log.isDebugEnabled()) {                            }            if (HtmlParsingUtils.isAnchorMatched(newUrl, config)) {                                potentialLinks.add(newUrl);            }        } catch (MalformedURLException e) {                    }    }}
1
public String getLabelResource()
{        return "anchor_modifier_title";}
0
public TestElement createTestElement()
{    AnchorModifier modifier = new AnchorModifier();    modifyTestElement(modifier);    return modifier;}
0
public void modifyTestElement(TestElement modifier)
{    configureTestElement(modifier);}
0
private void init()
{        setLayout(new BorderLayout());    setBorder(makeBorder());    add(makeTitlePanel(), BorderLayout.NORTH);}
0
public String getLabelResource()
{        return "regex_params_title";}
0
public void configure(TestElement el)
{    super.configure(el);    if (el instanceof RegExUserParameters) {        RegExUserParameters re = (RegExUserParameters) el;        paramNamesGrNrField.setText(re.getRegParamNamesGrNr());        paramValuesGrNrField.setText(re.getRegExParamValuesGrNr());        refRegExRefNameField.setText(re.getRegExRefName());    }}
0
public TestElement createTestElement()
{    RegExUserParameters regExUserParams = new RegExUserParameters();    modifyTestElement(regExUserParams);    return regExUserParams;}
0
public void modifyTestElement(TestElement extractor)
{    super.configureTestElement(extractor);    if (extractor instanceof RegExUserParameters) {        RegExUserParameters regExUserParams = (RegExUserParameters) extractor;        regExUserParams.setRegExRefName(refRegExRefNameField.getText());        regExUserParams.setRegExParamNamesGrNr(paramNamesGrNrField.getText());        regExUserParams.setRegExParamValuesGrNr(paramValuesGrNrField.getText());    }}
0
public void clearGui()
{    super.clearGui();        paramNamesGrNrField.setText("");        paramValuesGrNrField.setText("");        refRegExRefNameField.setText("");}
0
private void init()
{        setLayout(new BorderLayout());    setBorder(makeBorder());    Box box = Box.createVerticalBox();    box.add(makeTitlePanel());    add(box, BorderLayout.NORTH);    add(makeParameterPanel(), BorderLayout.CENTER);}
0
private JPanel makeParameterPanel()
{        refRegExRefNameField = new JLabeledTextField(JMeterUtils.getResString("regex_params_ref_name_field"));        paramNamesGrNrField = new JLabeledTextField(JMeterUtils.getResString("regex_params_names_field"));        paramValuesGrNrField = new JLabeledTextField(JMeterUtils.getResString("regex_params_values_field"));    JPanel panel = new JPanel(new GridBagLayout());    GridBagConstraints gbc = new GridBagConstraints();    initConstraints(gbc);    addField(panel, refRegExRefNameField, gbc);    resetContraints(gbc);    addField(panel, paramNamesGrNrField, gbc);    resetContraints(gbc);    gbc.weighty = 1;    addField(panel, paramValuesGrNrField, gbc);    return panel;}
0
private void addField(JPanel panel, JLabeledTextField field, GridBagConstraints gbc)
{    List<JComponent> item = field.getComponentList();    panel.add(item.get(0), gbc.clone());    gbc.gridx++;    gbc.weightx = 1;    gbc.fill = GridBagConstraints.HORIZONTAL;    panel.add(item.get(1), gbc.clone());}
0
private void resetContraints(GridBagConstraints gbc)
{    gbc.gridx = 0;    gbc.gridy++;    gbc.weightx = 0;    gbc.fill = GridBagConstraints.NONE;}
0
private void initConstraints(GridBagConstraints gbc)
{    gbc.anchor = GridBagConstraints.NORTHWEST;    gbc.fill = GridBagConstraints.NONE;    gbc.gridheight = 1;    gbc.gridwidth = 1;    gbc.gridx = 0;    gbc.gridy = 0;    gbc.weightx = 0;    gbc.weighty = 0;}
0
public String getLabelResource()
{        return "http_url_rewriting_modifier_title";}
0
private void init()
{        setLayout(new BorderLayout(0, 5));    setBorder(makeBorder());    add(makeTitlePanel(), BorderLayout.NORTH);    VerticalPanel mainPanel = new VerticalPanel();        argumentName = new JLabeledTextField(JMeterUtils.getResString("session_argument_name"), 10);    mainPanel.add(argumentName);        pathExt = new JCheckBox(JMeterUtils.getResString("path_extension_choice"));    mainPanel.add(pathExt);        pathExtNoEquals = new JCheckBox(JMeterUtils.getResString("path_extension_dont_use_equals"));    mainPanel.add(pathExtNoEquals);        pathExtNoQuestionmark = new JCheckBox(JMeterUtils.getResString("path_extension_dont_use_questionmark"));    mainPanel.add(pathExtNoQuestionmark);        shouldCache = new JCheckBox(JMeterUtils.getResString("cache_session_id"));    shouldCache.setSelected(true);    mainPanel.add(shouldCache);        encode = new JCheckBox(JMeterUtils.getResString("encode"));    encode.setSelected(false);    mainPanel.add(encode);    add(mainPanel, BorderLayout.CENTER);}
0
public TestElement createTestElement()
{    URLRewritingModifier modifier = new URLRewritingModifier();    modifyTestElement(modifier);    return modifier;}
0
public void modifyTestElement(TestElement modifier)
{    super.configureTestElement(modifier);    URLRewritingModifier rewritingModifier = (URLRewritingModifier) modifier;    rewritingModifier.setArgumentName(argumentName.getText());    rewritingModifier.setPathExtension(pathExt.isSelected());    rewritingModifier.setPathExtensionNoEquals(pathExtNoEquals.isSelected());    rewritingModifier.setPathExtensionNoQuestionmark(pathExtNoQuestionmark.isSelected());    rewritingModifier.setShouldCache(shouldCache.isSelected());    rewritingModifier.setEncode(encode.isSelected());}
0
public void clearGui()
{    super.clearGui();        argumentName.setText("");    pathExt.setSelected(false);    pathExtNoEquals.setSelected(false);    pathExtNoQuestionmark.setSelected(false);    shouldCache.setSelected(false);    encode.setSelected(false);}
0
public void configure(TestElement el)
{    URLRewritingModifier rewritingModifier = (URLRewritingModifier) el;    argumentName.setText(rewritingModifier.getArgumentName());    pathExt.setSelected(rewritingModifier.isPathExtension());    pathExtNoEquals.setSelected(rewritingModifier.isPathExtensionNoEquals());    pathExtNoQuestionmark.setSelected(rewritingModifier.isPathExtensionNoQuestionmark());    shouldCache.setSelected(rewritingModifier.shouldCache());    encode.setSelected(rewritingModifier.encode());    super.configure(el);}
0
public void process()
{    if (log.isDebugEnabled()) {                    }    Sampler entry = getThreadContext().getCurrentSampler();    if (!(entry instanceof HTTPSamplerBase)) {        return;    }    Map<String, String> paramMap = buildParamsMap();    if (paramMap == null || paramMap.isEmpty()) {                return;    }    HTTPSamplerBase sampler = (HTTPSamplerBase) entry;    for (JMeterProperty jMeterProperty : sampler.getArguments()) {        Argument arg = (Argument) jMeterProperty.getObjectValue();        String oldValue = arg.getValue();                        String val = paramMap.get(arg.getName());        if (val != null) {            arg.setValue(val);        }        if (log.isDebugEnabled()) {                    }    }}
1
private Map<String, String> buildParamsMap()
{    String regExRefName = getRegExRefName() + "_";    String grNames = getRegParamNamesGrNr();    String grValues = getRegExParamValuesGrNr();    JMeterVariables jmvars = getThreadContext().getVariables();        if (jmvars.get(regExRefName + MATCH_NR) == null || jmvars.get(regExRefName + 1 + REGEX_GROUP_SUFFIX + grNames) == null || jmvars.get(regExRefName + 1 + REGEX_GROUP_SUFFIX + grValues) == null) {        return null;    }    int n = Integer.parseInt(jmvars.get(regExRefName + MATCH_NR));    Map<String, String> map = new HashMap<>(n);    for (int i = 1; i <= n; i++) {        map.put(jmvars.get(regExRefName + i + REGEX_GROUP_SUFFIX + grNames), jmvars.get(regExRefName + i + REGEX_GROUP_SUFFIX + grValues));    }    return map;}
0
public Object clone()
{    RegExUserParameters up = (RegExUserParameters) super.clone();    return up;}
0
public void setRegExRefName(String str)
{    setProperty(REG_EX_REF_NAME, str);}
0
public String getRegExRefName()
{    return getPropertyAsString(REG_EX_REF_NAME);}
0
public void setRegExParamNamesGrNr(String str)
{    setProperty(REG_EX_PARAM_NAMES_GR_NR, str);}
0
public String getRegParamNamesGrNr()
{    return getPropertyAsString(REG_EX_PARAM_NAMES_GR_NR);}
0
public void setRegExParamValuesGrNr(String str)
{    setProperty(REG_EX_PARAM_VALUES_GR_NR, str);}
0
public String getRegExParamValuesGrNr()
{    return getPropertyAsString(REG_EX_PARAM_VALUES_GR_NR);}
0
public void process()
{    JMeterContext ctx = getThreadContext();    Sampler sampler = ctx.getCurrentSampler();    if (!(sampler instanceof HTTPSamplerBase)) {                return;    }    SampleResult responseText = ctx.getPreviousResult();    if (responseText == null) {        return;    }    initRegex(getArgumentName());    String text = responseText.getResponseDataAsString();    Perl5Matcher matcher = JMeterUtils.getMatcher();    String value = "";    if (isPathExtension() && isPathExtensionNoEquals() && isPathExtensionNoQuestionmark()) {        if (matcher.contains(text, pathExtensionNoEqualsNoQuestionmarkRegexp)) {            MatchResult result = matcher.getMatch();            value = result.group(1);        }    } else if (    isPathExtension() && isPathExtensionNoEquals()) {        if (matcher.contains(text, pathExtensionNoEqualsQuestionmarkRegexp)) {            MatchResult result = matcher.getMatch();            value = result.group(1);        }    } else if (    isPathExtension() && isPathExtensionNoQuestionmark()) {        if (matcher.contains(text, pathExtensionEqualsNoQuestionmarkRegexp)) {            MatchResult result = matcher.getMatch();            value = result.group(1);        }    } else if (    isPathExtension()) {        if (matcher.contains(text, pathExtensionEqualsQuestionmarkRegexp)) {            MatchResult result = matcher.getMatch();            value = result.group(1);        }    } else     {        if (matcher.contains(text, parameterRegexp)) {            MatchResult result = matcher.getMatch();            for (int i = 1; i < result.groups(); i++) {                value = result.group(i);                if (value != null) {                    break;                }            }        }    }        if (shouldCache()) {        if (value == null || value.length() == 0) {            value = savedValue;        } else {            savedValue = value;        }    }    modify((HTTPSamplerBase) sampler, value);}
0
private void modify(HTTPSamplerBase sampler, String value)
{    if (isPathExtension()) {        String oldPath = sampler.getPath();        int indexOfSessionId = oldPath.indexOf(SEMI_COLON + getArgumentName());        if (oldPath.indexOf(SEMI_COLON + getArgumentName()) >= 0) {            int indexOfQuestionMark = oldPath.indexOf('?');            if (indexOfQuestionMark < 0) {                oldPath = oldPath.substring(0, indexOfSessionId);            } else {                oldPath = oldPath.substring(0, indexOfSessionId) + oldPath.substring(indexOfQuestionMark);            }        }        if (isPathExtensionNoEquals()) {                        sampler.setPath(oldPath + SEMI_COLON + getArgumentName() + value);        } else {                        sampler.setPath(oldPath + SEMI_COLON + getArgumentName() + "=" + value);        }    } else {        sampler.getArguments().removeArgument(getArgumentName());        sampler.getArguments().addArgument(new HTTPArgument(getArgumentName(), value, !encode()));    }}
0
public void setArgumentName(String argName)
{    setProperty(ARGUMENT_NAME, argName);}
0
private void initRegex(String argName)
{        String quotedArg = Perl5Compiler.quotemeta(argName);    pathExtensionEqualsQuestionmarkRegexp = JMeterUtils.getPatternCache().getPattern(    SEMI_COLON + quotedArg + "=([^\"'<>&\\s;]*)", Perl5Compiler.MULTILINE_MASK | Perl5Compiler.READ_ONLY_MASK);    pathExtensionEqualsNoQuestionmarkRegexp = JMeterUtils.getPatternCache().getPattern(    SEMI_COLON + quotedArg + "=([^\"'<>&\\s;?]*)", Perl5Compiler.MULTILINE_MASK | Perl5Compiler.READ_ONLY_MASK);    pathExtensionNoEqualsQuestionmarkRegexp = JMeterUtils.getPatternCache().getPattern(    SEMI_COLON + quotedArg + "([^\"'<>&\\s;]*)", Perl5Compiler.MULTILINE_MASK | Perl5Compiler.READ_ONLY_MASK);    pathExtensionNoEqualsNoQuestionmarkRegexp = JMeterUtils.getPatternCache().getPattern(    SEMI_COLON + quotedArg + "([^\"'<>&\\s;?]*)", Perl5Compiler.MULTILINE_MASK | Perl5Compiler.READ_ONLY_MASK);    parameterRegexp = JMeterUtils.getPatternCache().getPattern(        "[;\\?&]" + quotedArg + "=([^\"'<>&\\s;\\\\]*)" +     "|\\s[Nn][Aa][Mm][Ee]\\s*=\\s*[\"']" + quotedArg + "[\"']" +     "[^>]*" +     "\\s[vV][Aa][Ll][Uu][Ee]\\s*=\\s*[\"']" + "([^\"']*)" +     "[\"']" +     "|\\s[vV][Aa][Ll][Uu][Ee]\\s*=\\s*[\"']" +     "([^\"']*)" + "[\"']" +     "[^>]*" +     "\\s[Nn][Aa][Mm][Ee]\\s*=\\s*[\"']" + quotedArg +     "[\"']", Perl5Compiler.MULTILINE_MASK | Perl5Compiler.READ_ONLY_MASK);}
0
public String getArgumentName()
{    return getPropertyAsString(ARGUMENT_NAME);}
0
public void setPathExtension(boolean pathExt)
{    setProperty(new BooleanProperty(PATH_EXTENSION, pathExt));}
0
public void setPathExtensionNoEquals(boolean pathExtNoEquals)
{    setProperty(new BooleanProperty(PATH_EXTENSION_NO_EQUALS, pathExtNoEquals));}
0
public void setPathExtensionNoQuestionmark(boolean pathExtNoQuestionmark)
{    setProperty(new BooleanProperty(PATH_EXTENSION_NO_QUESTIONMARK, pathExtNoQuestionmark));}
0
public void setShouldCache(boolean b)
{    setProperty(new BooleanProperty(SHOULD_CACHE, b));}
0
public boolean isPathExtension()
{    return getPropertyAsBoolean(PATH_EXTENSION);}
0
public boolean isPathExtensionNoEquals()
{    return getPropertyAsBoolean(PATH_EXTENSION_NO_EQUALS);}
0
public boolean isPathExtensionNoQuestionmark()
{    return getPropertyAsBoolean(PATH_EXTENSION_NO_QUESTIONMARK);}
0
public boolean shouldCache()
{    return getPropertyAsBoolean(SHOULD_CACHE, true);}
0
protected Object readResolve()
{    savedValue = "";    return this;}
0
public boolean encode()
{    return getPropertyAsBoolean(ENCODE, false);}
0
public void setEncode(boolean b)
{    setProperty(new BooleanProperty(ENCODE, b));}
0
public static LinkExtractorParser getParser(String parserClassName) throws LinkExtractorParseException
{        LinkExtractorParser parser = PARSERS.get(parserClassName);    if (parser != null) {                return parser;    }    try {        Object clazz = Class.forName(parserClassName).getDeclaredConstructor().newInstance();        if (clazz instanceof LinkExtractorParser) {            parser = (LinkExtractorParser) clazz;        } else {            throw new LinkExtractorParseException(new ClassCastException(parserClassName));        }    } catch (IllegalArgumentException | ReflectiveOperationException | SecurityException e) {        throw new LinkExtractorParseException(e);    }        if (parser.isReusable()) {        LinkExtractorParser currentParser = PARSERS.putIfAbsent(parserClassName,         parser);                if (currentParser != null) {            return currentParser;        }    }    return parser;}
1
public boolean isReusable()
{    return true;}
0
public void onException(ParseException ex)
{    final String message = "Failed to parse CSS: " + baseUrl + ", " + LoggingCSSParseErrorHandler.createLoggingStringParseError(ex);    if (IGNORE_UNRECOVERABLE_PARSING_ERROR) {            } else {        throw new IllegalArgumentException("Unrecoverable error met during parsing, " + "you can ignore such errors by setting property:" + "'httpsampler.ignore_failed_embedded_resource' to true, message:" + message);    }}
1
public Iterator<URL> getEmbeddedResourceURLs(String userAgent, byte[] data, final URL baseUrl, String encoding) throws LinkExtractorParseException
{    try {        final String cssContent = new String(data, encoding);        final Charset charset = Charset.forName(encoding);        final Triple<String, URL, Charset> triple = ImmutableTriple.of(cssContent, baseUrl, charset);        final URLCollection urlCollection = orDefault(CSS_URL_CACHE.get(triple), EMPTY_URL_COLLECTION);        if (LOG.isDebugEnabled()) {                    }        return urlCollection.iterator();    } catch (Exception e) {        throw new LinkExtractorParseException(e);    }}
1
private URLCollection orDefault(URLCollection urlCollection, URLCollection defaultValue)
{    if (urlCollection == null) {        return Validate.notNull(defaultValue);    }    return urlCollection;}
0
public boolean isReusable()
{    return true;}
0
public URLCollection load(Triple<String, URL, Charset> triple) throws Exception
{    final String cssContent = triple.getLeft();    final URL baseUrl = triple.getMiddle();    final Charset charset = triple.getRight();    final CSSReaderSettings readerSettings = new CSSReaderSettings().setBrowserCompliantMode(true).setFallbackCharset(charset).setCSSVersion(ECSSVersion.CSS30).setCustomErrorHandler(new LoggingCSSParseErrorHandler()).setCustomExceptionHandler(new CSSParseExceptionCallback(baseUrl));    if (IGNORE_ALL_CSS_ERRORS) {        readerSettings.setInterpretErrorHandler(new DoNothingCSSInterpretErrorHandler());    }    final CascadingStyleSheet aCSS = CSSReader.readFromStringReader(cssContent, readerSettings);    final URLCollection urls = new URLCollection(new ArrayList<>());    if (aCSS == null) {                return urls;    }    CSSVisitor.visitCSSUrl(aCSS, new DefaultCSSUrlVisitor() {        @Override        public void onImport(CSSImportRule rule) {            final String location = rule.getLocationString();            if (!StringUtils.isEmpty(location)) {                urls.addURL(location, baseUrl);            }        }                @Override        public void onUrlDeclaration(final ICSSTopLevelRule aTopLevelRule, final CSSDeclaration aDeclaration, final CSSExpressionMemberTermURI aURITerm) {                                }    });    return urls;}
1
public void onImport(CSSImportRule rule)
{    final String location = rule.getLocationString();    if (!StringUtils.isEmpty(location)) {        urls.addURL(location, baseUrl);    }}
0
public void onUrlDeclaration(final ICSSTopLevelRule aTopLevelRule, final CSSDeclaration aDeclaration, final CSSExpressionMemberTermURI aURITerm)
{}
0
public Iterator<URL> getEmbeddedResourceURLs(String userAgent, byte[] html, URL baseUrl, String encoding) throws HTMLParseException
{                        Collection<URLString> col = new LinkedHashSet<>();    return getEmbeddedResourceURLs(userAgent, html, baseUrl, new URLCollection(col), encoding);}
0
public Iterator<URL> getEmbeddedResourceURLs(String userAgent, byte[] html, URL baseUrl, Collection<URLString> coll, String encoding) throws HTMLParseException
{    return getEmbeddedResourceURLs(userAgent, html, baseUrl, new URLCollection(coll), encoding);}
0
protected final boolean isEnableConditionalComments(Float ieVersion)
{        return ieVersion != null && ieVersion.floatValue() < IE_10;}
0
protected Float extractIEVersion(String userAgent)
{    if (StringUtils.isEmpty(userAgent)) {                return null;    }    Matcher matcher = IE_UA_PATTERN.matcher(userAgent);    String ieVersion = null;    if (matcher.find()) {        if (matcher.groupCount() > 0) {            ieVersion = matcher.group(1);        } else {            ieVersion = matcher.group();        }    }    if (ieVersion != null) {        return Float.valueOf(ieVersion);    } else {        return null;    }}
1
protected static String normalizeUrlValue(CharSequence url)
{    if (!StringUtils.isEmpty(url)) {        String trimmed = NORMALIZE_URL_PATTERN.matcher(url.toString().trim()).replaceAll("");        if (!trimmed.isEmpty()) {            return trimmed;        }    }    return null;}
0
public static boolean isAnchorMatched(HTTPSamplerBase newLink, HTTPSamplerBase config)
{    String query;    try {        query = URLDecoder.decode(newLink.getQueryString(), StandardCharsets.UTF_8.name());    } catch (UnsupportedEncodingException e) {                        throw new Error("Should not happen: " + e.toString(), e);    }    final Arguments arguments = config.getArguments();    final Perl5Matcher matcher = JMeterUtils.getMatcher();    final PatternCacheLRU patternCache = JMeterUtils.getPatternCache();    if (!isEqualOrMatches(newLink.getProtocol(), config.getProtocol(), matcher, patternCache)) {        return false;    }    final String domain = config.getDomain();    if (domain != null && domain.length() > 0) {        if (!isEqualOrMatches(newLink.getDomain(), domain, matcher, patternCache)) {            return false;        }    }    final String path = config.getPath();    if (!newLink.getPath().equals(path) && !matcher.matches(newLink.getPath(),     patternCache.getPattern(    "[/]*" + path, Perl5Compiler.READ_ONLY_MASK))) {        return false;    }    for (JMeterProperty argument : arguments) {        Argument item = (Argument) argument.getObjectValue();        final String name = item.getName();        if (!query.contains(name + "=")) {                        if (!(matcher.contains(query, patternCache.getPattern(name, Perl5Compiler.READ_ONLY_MASK)))) {                return false;            }        }    }    return true;}
1
public static boolean isArgumentMatched(Argument arg, Argument patternArg)
{    final Perl5Matcher matcher = JMeterUtils.getMatcher();    final PatternCacheLRU patternCache = JMeterUtils.getPatternCache();    return isEqualOrMatches(arg.getName(), patternArg.getName(), matcher, patternCache) && isEqualOrMatches(arg.getValue(), patternArg.getValue(), matcher, patternCache);}
0
public static boolean isEqualOrMatches(String arg, String pat, Perl5Matcher matcher, PatternCacheLRU cache)
{    return arg.equals(pat) || matcher.matches(arg, cache.getPattern(pat, Perl5Compiler.READ_ONLY_MASK));}
0
public static boolean isEqualOrMatchesCaseBlind(String arg, String pat, Perl5Matcher matcher, PatternCacheLRU cache)
{    return arg.equalsIgnoreCase(pat) || matcher.matches(arg, cache.getPattern(pat, Perl5Compiler.READ_ONLY_MASK | Perl5Compiler.CASE_INSENSITIVE_MASK));}
0
public static boolean isEqualOrMatches(String arg, String pat)
{    return isEqualOrMatches(arg, pat, JMeterUtils.getMatcher(), JMeterUtils.getPatternCache());}
0
public static boolean isEqualOrMatchesCaseBlind(String arg, String pat)
{    return isEqualOrMatchesCaseBlind(arg, pat, JMeterUtils.getMatcher(), JMeterUtils.getPatternCache());}
0
public static Tidy getParser()
{        Tidy tidy = new Tidy();    tidy.setInputEncoding(StandardCharsets.UTF_8.name());    tidy.setOutputEncoding(StandardCharsets.UTF_8.name());    tidy.setQuiet(true);    tidy.setShowWarnings(false);    if (log.isDebugEnabled()) {            }        return tidy;}
1
public static Node getDOM(String text)
{        Node node = getParser().parseDOM(new ByteArrayInputStream(text.getBytes(StandardCharsets.UTF_8)), null);    if (log.isDebugEnabled()) {            }        return node;}
1
public static Document createEmptyDoc()
{    return Tidy.createEmptyDocument();}
0
public static HTTPSamplerBase createUrlFromAnchor(String parsedUrlString, URL context) throws MalformedURLException
{    if (log.isDebugEnabled()) {            }    URL url = ConversionUtils.makeRelativeURL(context, parsedUrlString);    HTTPSamplerBase sampler = HTTPSamplerFactory.newInstance();    sampler.setDomain(url.getHost());    sampler.setProtocol(url.getProtocol());    sampler.setPort(url.getPort());    sampler.setPath(url.getPath());    sampler.parseArguments(url.getQuery());    return sampler;}
1
public static List<HTTPSamplerBase> createURLFromForm(Node doc, URL context)
{    String selectName = null;    LinkedList<HTTPSamplerBase> urlConfigs = new LinkedList<>();    recurseForm(doc, urlConfigs, context, selectName, false);    return urlConfigs;}
0
private static boolean recurseForm(Node tempNode, LinkedList<HTTPSamplerBase> urlConfigs, URL context, String selectName, boolean inForm)
{    NamedNodeMap nodeAtts = tempNode.getAttributes();    String tag = tempNode.getNodeName();    try {        if (inForm) {            HTTPSamplerBase url = urlConfigs.getLast();            if (tag.equalsIgnoreCase("form")) {                                try {                    urlConfigs.add(createFormUrlConfig(tempNode, context));                } catch (MalformedURLException e) {                    inForm = false;                }            } else if (tag.equalsIgnoreCase("input")) {                                                url.addEncodedArgument(                getAttributeValue(nodeAtts, "name"),                 getAttributeValue(nodeAtts, "value"));            } else if (tag.equalsIgnoreCase("textarea")) {                                try {                                        url.addEncodedArgument(                    getAttributeValue(nodeAtts, "name"), tempNode.getFirstChild().getNodeValue());                } catch (NullPointerException e) {                                        url.addArgument(getAttributeValue(nodeAtts, "name"), "");                }            } else if (tag.equalsIgnoreCase("select")) {                                                selectName = getAttributeValue(nodeAtts, "name");            } else if (tag.equalsIgnoreCase("option")) {                                                String value = getAttributeValue(nodeAtts, "value");                if (value == null) {                    try {                        value = tempNode.getFirstChild().getNodeValue();                    } catch (NullPointerException e) {                                                value = "";                    }                }                url.addEncodedArgument(selectName, value);            }        } else if (tag.equalsIgnoreCase("form")) {                        try {                urlConfigs.add(createFormUrlConfig(tempNode, context));                inForm = true;            } catch (MalformedURLException e) {                inForm = false;            }        }    } catch (Exception ex) {            }    NodeList childNodes = tempNode.getChildNodes();    for (int x = 0; x < childNodes.getLength(); x++) {        inForm = recurseForm(childNodes.item(x), urlConfigs, context, selectName, inForm);    }    return inForm;}
1
private static String getAttributeValue(NamedNodeMap att, String attName)
{    try {        return att.getNamedItem(attName).getNodeValue();    } catch (Exception ex) {                return "";    }}
0
private static String printNode(Node node)
{    StringBuilder buf = new StringBuilder();        buf.append('<');    buf.append(node.getNodeName());    NamedNodeMap atts = node.getAttributes();    for (int x = 0; x < atts.getLength(); x++) {                buf.append(' ');        buf.append(atts.item(x).getNodeName());                buf.append("=\"");        buf.append(atts.item(x).getNodeValue());                buf.append("\"");    }        buf.append('>');    return buf.toString();}
0
private static HTTPSamplerBase createFormUrlConfig(Node tempNode, URL context) throws MalformedURLException
{    NamedNodeMap atts = tempNode.getAttributes();    if (atts.getNamedItem("action") == null) {                throw new MalformedURLException();    }        String action = atts.getNamedItem("action").getNodeValue();    return createUrlFromAnchor(action, context);}
0
public static void extractStyleURLs(final URL baseUrl, final URLCollection urls, String styleTagStr)
{    Perl5Matcher matcher = JMeterUtils.getMatcher();    Pattern pattern = JMeterUtils.getPatternCache().getPattern(    "URL\\(\\s*('|\")(.*)('|\")\\s*\\)", Perl5Compiler.CASE_INSENSITIVE_MASK | Perl5Compiler.SINGLELINE_MASK | Perl5Compiler.READ_ONLY_MASK);    PatternMatcherInput input = null;    input = new PatternMatcherInput(styleTagStr);    while (matcher.contains(input, pattern)) {        MatchResult match = matcher.getMatch();                String styleUrl = match.group(2);        urls.addURL(styleUrl, baseUrl);    }}
0
private void extractAttribute(Element tag, String attributeName)
{    String url = tag.attr(attributeName);    String normalizedUrl = normalizeUrlValue(url);    if (normalizedUrl != null) {        urls.addURL(normalizedUrl, baseUrl.url);    }}
0
public void head(Node node, int depth)
{    if (!(node instanceof Element)) {        return;    }    Element tag = (Element) node;    String tagName = tag.tagName().toLowerCase();    if (tagName.equals(TAG_BODY)) {        extractAttribute(tag, ATT_BACKGROUND);    } else if (tagName.equals(TAG_SCRIPT)) {        extractAttribute(tag, ATT_SRC);    } else if (tagName.equals(TAG_BASE)) {        String baseref = tag.attr(ATT_HREF);        try {            if (            !StringUtils.isEmpty(baseref)) {                baseUrl.url = ConversionUtils.makeRelativeURL(baseUrl.url, baseref);            }        } catch (MalformedURLException e1) {            throw new IllegalArgumentException("Error creating relative url from " + baseref, e1);        }    } else if (tagName.equals(TAG_IMAGE)) {        extractAttribute(tag, ATT_SRC);    } else if (tagName.equals(TAG_APPLET)) {        extractAttribute(tag, ATT_CODE);    } else if (tagName.equals(TAG_OBJECT)) {        extractAttribute(tag, ATT_CODEBASE);        extractAttribute(tag, ATT_DATA);    } else if (tagName.equals(TAG_INPUT)) {                if (ATT_IS_IMAGE.equalsIgnoreCase(tag.attr(ATT_TYPE))) {                        extractAttribute(tag, ATT_SRC);        }        } else if (tagName.equals(TAG_FRAME) || tagName.equals(TAG_IFRAME)) {        extractAttribute(tag, ATT_SRC);    } else if (tagName.equals(TAG_EMBED)) {        extractAttribute(tag, ATT_SRC);    } else if (tagName.equals(TAG_BGSOUND)) {        extractAttribute(tag, ATT_SRC);    } else if (tagName.equals(TAG_LINK)) {        String relAttr = tag.attr(ATT_REL);                if (STYLESHEET.equalsIgnoreCase(relAttr) || ICON.equalsIgnoreCase(relAttr) || SHORTCUT_ICON.equalsIgnoreCase(relAttr)) {            extractAttribute(tag, ATT_HREF);        }    } else {        extractAttribute(tag, ATT_BACKGROUND);    }        String styleTagStr = tag.attr(ATT_STYLE);    if (styleTagStr != null) {        HtmlParsingUtils.extractStyleURLs(baseUrl.url, urls, styleTagStr);    }}
0
public void tail(Node arg0, int arg1)
{}
0
public Iterator<URL> getEmbeddedResourceURLs(String userAgent, byte[] html, URL baseUrl, URLCollection coll, String encoding) throws HTMLParseException
{    try {                String contents = new String(html, encoding);        Document doc = Jsoup.parse(contents);        JMeterNodeVisitor nodeVisitor = new JMeterNodeVisitor(new URLPointer(baseUrl), coll);        NodeTraversor.traverse(nodeVisitor, doc);        return coll.iterator();    } catch (Exception e) {        throw new HTMLParseException(e);    }}
0
public Iterator<URL> getEmbeddedResourceURLs(String userAgent, byte[] html, URL baseUrl, URLCollection urls, String encoding) throws HTMLParseException
{    Document dom;    try {        dom = (Document) getDOM(html, encoding);    } catch (SAXException se) {        throw new HTMLParseException(se);    }        scanNodes(dom, urls, baseUrl);    return urls.iterator();}
0
private URL scanNodes(Node node, URLCollection urls, URL baseUrl) throws HTMLParseException
{    if (node == null) {        return baseUrl;    }    String name = node.getNodeName();    int type = node.getNodeType();    switch(type) {        case Node.DOCUMENT_NODE:            scanNodes(((Document) node).getDocumentElement(), urls, baseUrl);            break;        case Node.ELEMENT_NODE:            NamedNodeMap attrs = node.getAttributes();            if (name.equalsIgnoreCase(TAG_BASE)) {                String tmp = getValue(attrs, ATT_HREF);                if (tmp != null) {                    try {                        baseUrl = ConversionUtils.makeRelativeURL(baseUrl, tmp);                    } catch (MalformedURLException e) {                        throw new HTMLParseException(e);                    }                }                break;            }            if (name.equalsIgnoreCase(TAG_IMAGE) || name.equalsIgnoreCase(TAG_EMBED)) {                urls.addURL(getValue(attrs, ATT_SRC), baseUrl);                break;            }            if (name.equalsIgnoreCase(TAG_APPLET)) {                urls.addURL(getValue(attrs, "code"), baseUrl);                break;            }            if (name.equalsIgnoreCase(TAG_OBJECT)) {                String data = getValue(attrs, "codebase");                if (!StringUtils.isEmpty(data)) {                    urls.addURL(data, baseUrl);                }                data = getValue(attrs, "data");                if (!StringUtils.isEmpty(data)) {                    urls.addURL(data, baseUrl);                }                break;            }            if (name.equalsIgnoreCase(TAG_INPUT)) {                String src = getValue(attrs, ATT_SRC);                String typ = getValue(attrs, ATT_TYPE);                if ((src != null) && ATT_IS_IMAGE.equalsIgnoreCase(typ)) {                    urls.addURL(src, baseUrl);                }                break;            }            if (TAG_LINK.equalsIgnoreCase(name) && (STYLESHEET.equalsIgnoreCase(getValue(attrs, ATT_REL)) || SHORTCUT_ICON.equalsIgnoreCase(getValue(attrs, ATT_REL)) || ICON.equalsIgnoreCase(getValue(attrs, ATT_REL)))) {                urls.addURL(getValue(attrs, ATT_HREF), baseUrl);                break;            }            if (name.equalsIgnoreCase(TAG_SCRIPT)) {                urls.addURL(getValue(attrs, ATT_SRC), baseUrl);                break;            }            if (name.equalsIgnoreCase(TAG_FRAME)) {                urls.addURL(getValue(attrs, ATT_SRC), baseUrl);                break;            }            if (name.equalsIgnoreCase(TAG_IFRAME)) {                urls.addURL(getValue(attrs, ATT_SRC), baseUrl);                break;            }            String back = getValue(attrs, ATT_BACKGROUND);            if (back != null) {                urls.addURL(back, baseUrl);            }            if (name.equalsIgnoreCase(TAG_BGSOUND)) {                urls.addURL(getValue(attrs, ATT_SRC), baseUrl);                break;            }            String style = getValue(attrs, ATT_STYLE);            if (style != null) {                HtmlParsingUtils.extractStyleURLs(baseUrl, urls, style);            }            NodeList children = node.getChildNodes();            if (children != null) {                int len = children.getLength();                for (int i = 0; i < len; i++) {                    baseUrl = scanNodes(children.item(i), urls, baseUrl);                }            }            break;        default:                        break;    }    return baseUrl;}
0
private String getValue(NamedNodeMap attrs, String attname)
{    String v = null;    Node n = attrs.getNamedItem(attname);    if (n != null) {        v = n.getNodeValue();    }    return v;}
0
private static Tidy getTidyParser(String encoding)
{        Tidy tidy = new Tidy();    tidy.setInputEncoding(encoding);    tidy.setOutputEncoding(StandardCharsets.UTF_8.name());    tidy.setQuiet(true);    tidy.setShowWarnings(false);    if (log.isDebugEnabled()) {            }        return tidy;}
1
private static Node getDOM(byte[] text, String encoding) throws SAXException
{        Node node = getTidyParser(encoding).parseDOM(new ByteArrayInputStream(text), null);    if (log.isDebugEnabled()) {            }        return node;}
1
private void extractAttribute(Tag tag, String attributeName)
{    CharSequence url = tag.getAttributeValue(attributeName);    String normalizedUrl = normalizeUrlValue(url);    if (normalizedUrl != null) {        urls.addURL(normalizedUrl, baseUrl.url);    }}
0
public void script(Tag tag, CharSequence body)
{    if (!enabled.peek().booleanValue()) {        return;    }    extractAttribute(tag, ATT_SRC);}
0
public void tag(Tag tag)
{    if (!enabled.peek().booleanValue()) {        return;    }    TagType tagType = tag.getType();    switch(tagType) {        case START:        case SELF_CLOSING:            if (tag.nameEquals(TAG_BODY)) {                extractAttribute(tag, ATT_BACKGROUND);            } else if (tag.nameEquals(TAG_BASE)) {                CharSequence baseref = tag.getAttributeValue(ATT_HREF);                try {                    if (                    !StringUtils.isEmpty(baseref)) {                        baseUrl.url = ConversionUtils.makeRelativeURL(baseUrl.url, baseref.toString());                    }                } catch (MalformedURLException e1) {                    throw new IllegalArgumentException("Error creating relative url from " + baseref, e1);                }            } else if (tag.nameEquals(TAG_IMAGE)) {                extractAttribute(tag, ATT_SRC);            } else if (tag.nameEquals(TAG_APPLET)) {                extractAttribute(tag, ATT_CODE);            } else if (tag.nameEquals(TAG_OBJECT)) {                extractAttribute(tag, ATT_CODEBASE);                extractAttribute(tag, ATT_DATA);            } else if (tag.nameEquals(TAG_INPUT)) {                                CharSequence type = tag.getAttributeValue(ATT_TYPE);                if (type != null && CharSequenceUtil.equalsIgnoreCase(ATT_IS_IMAGE, type)) {                                        extractAttribute(tag, ATT_SRC);                }            } else if (tag.nameEquals(TAG_SCRIPT)) {                extractAttribute(tag, ATT_SRC);                        } else if (tag.nameEquals(TAG_FRAME) || tag.nameEquals(TAG_IFRAME)) {                extractAttribute(tag, ATT_SRC);            } else if (tag.nameEquals(TAG_EMBED)) {                extractAttribute(tag, ATT_SRC);            } else if (tag.nameEquals(TAG_BGSOUND)) {                extractAttribute(tag, ATT_SRC);            } else if (tag.nameEquals(TAG_LINK)) {                CharSequence relAttribute = tag.getAttributeValue(ATT_REL);                                if (relAttribute != null && (CharSequenceUtil.equalsIgnoreCase(STYLESHEET, relAttribute) || CharSequenceUtil.equalsIgnoreCase(ICON, relAttribute) || CharSequenceUtil.equalsIgnoreCase(SHORTCUT_ICON, relAttribute))) {                    extractAttribute(tag, ATT_HREF);                }            } else {                extractAttribute(tag, ATT_BACKGROUND);            }                        CharSequence styleTagStr = tag.getAttributeValue(ATT_STYLE);            if (!StringUtils.isEmpty(styleTagStr)) {                HtmlParsingUtils.extractStyleURLs(baseUrl.url, urls, styleTagStr.toString());            }            break;        case END:            break;        default:            throw new IllegalStateException("Unexpected tagType " + tagType);    }}
0
public void condComment(CharSequence expression, boolean isStartingTag, boolean isHidden, boolean isHiddenEndTag)
{        if (!isStartingTag) {        enabled.pop();    } else {        if (htmlCCommentExpressionMatcher == null) {            htmlCCommentExpressionMatcher = new HtmlCCommentExpressionMatcher();        }        String expressionString = expression.toString().trim();        enabled.push(Boolean.valueOf(htmlCCommentExpressionMatcher.match(ieVersion.floatValue(), expressionString)));    }}
0
public void start()
{    super.start();    enabled.clear();    enabled.push(Boolean.TRUE);}
0
public Iterator<URL> getEmbeddedResourceURLs(String userAgent, byte[] html, URL baseUrl, URLCollection coll, String encoding) throws HTMLParseException
{    try {        Float ieVersion = extractIEVersion(userAgent);        String contents = new String(html, encoding);        LagartoParser lagartoParser = new LagartoParser(contents.toCharArray());        LagartoDomBuilderConfig config = new LagartoDomBuilderConfig();        config.setCaseSensitive(false);                config.setEnableConditionalComments(isEnableConditionalComments(ieVersion));        if (ieVersion != null) {            config.setCondCommentIEVersion(ieVersion);        }        lagartoParser.setConfig(config);        JMeterTagVisitor tagVisitor = new JMeterTagVisitor(new URLPointer(baseUrl), coll, ieVersion);        lagartoParser.parse(tagVisitor);        return coll.iterator();    } catch (LagartoException e) {                if (log.isDebugEnabled()) {                    }        return Collections.<URL>emptyList().iterator();    } catch (Exception e) {        throw new HTMLParseException(e);    }}
1
public Iterator<URL> getEmbeddedResourceURLs(String userAgent, byte[] html, URL baseUrl, URLCollection urls, String encoding) throws HTMLParseException
{    Pattern pattern = null;    Perl5Matcher matcher = null;    try {        matcher = JMeterUtils.getMatcher();        PatternMatcherInput input = localInput.get();                                input.setInput(new String(html, encoding));        pattern = JMeterUtils.getPatternCache().getPattern(REGEXP, Perl5Compiler.CASE_INSENSITIVE_MASK | Perl5Compiler.SINGLELINE_MASK | Perl5Compiler.READ_ONLY_MASK);        while (matcher.contains(input, pattern)) {            MatchResult match = matcher.getMatch();            String s;            if (log.isDebugEnabled()) {                            }                        for (int g = 1; g <= NUM_BASE_GROUPS && g <= match.groups(); g++) {                s = match.group(g);                if (s != null) {                                        try {                        baseUrl = ConversionUtils.makeRelativeURL(baseUrl, s);                    } catch (MalformedURLException e) {                                                                                            }                }            }            for (int g = NUM_BASE_GROUPS + 1; g <= match.groups(); g++) {                s = match.group(g);                if (s != null) {                    if (log.isDebugEnabled()) {                                            }                    urls.addURL(s, baseUrl);                }            }        }        return urls.iterator();    } catch (UnsupportedEncodingException | MalformedCachePatternException e) {        throw new HTMLParseException(e.getMessage(), e);    } finally {        JMeterUtils.clearMatcherMemory(matcher, pattern);    }}
1
public boolean add(URL u)
{    return coll.add(new URLString(u));}
0
public boolean addURL(String url, URL baseUrl)
{    if (url == null || url.length() == 0) {        return false;    }    url = StringEscapeUtils.unescapeXml(url);    boolean b;    try {        b = this.add(ConversionUtils.makeRelativeURL(baseUrl, url));    } catch (MalformedURLException mfue) {                if (log.isDebugEnabled()) {                    }                return false;    }    return b;}
1
public Iterator<URL> iterator()
{    return new UrlIterator(coll.iterator());}
0
public boolean hasNext()
{    return iter.hasNext();}
0
public URL next()
{    return iter.next().getURL();}
0
public void remove()
{    throw new UnsupportedOperationException();}
0
public String toString()
{    return urlAsString;}
0
public URL getURL()
{    return url;}
0
public int compareTo(URLString o)
{    return urlAsString.compareTo(o.toString());}
0
public boolean equals(Object o)
{    return o instanceof URLString && urlAsString.equals(o.toString());}
0
public int hashCode()
{    return hashCode;}
0
protected static int getRequestNumber()
{    return REQUEST_NUMBER.get();}
0
protected static void incrementRequestNumber()
{    incrementRequestNumberAndGet();}
0
protected static int incrementRequestNumberAndGet()
{    return REQUEST_NUMBER.incrementAndGet();}
0
protected static boolean isNumberRequests()
{    return NUMBER_REQUESTS;}
0
protected boolean isBinaryContent(String contentType)
{    if (contentType == null) {        return false;    }    return BINARY_CONTENT_TYPES.contains(contentType);}
0
protected String getBinaryFileSuffix()
{    return BINARY_FILE_SUFFIX;}
0
protected String getBinaryDirectory()
{    return BINARY_DIRECTORY;}
0
public void postProcessSampler(HTTPSamplerBase sampler, SampleResult result)
{}
0
public HTTPSamplerBase createAndPopulateSampler(HttpRequestHdr request, Map<String, String> pageEncodings, Map<String, String> formEncodings) throws Exception
{    HTTPSamplerBase sampler = createSampler(request, pageEncodings, formEncodings);    populateSampler(sampler, request, pageEncodings, formEncodings);    return sampler;}
0
public List<TestElement> createChildren(HTTPSamplerBase sampler, SampleResult result)
{    return Collections.emptyList();}
0
public void run()
{    running = true;            Map<String, String> pageEncodings = Collections.synchronizedMap(new HashMap<String, String>());    Map<String, String> formEncodings = Collections.synchronizedMap(new HashMap<String, String>());    pageEncodings.put(AbstractSamplerCreator.DEFAULT_ENCODING_KEY, target.getDefaultEncoding());    try {        while (running) {            try {                                Socket clientSocket = mainSocket.accept();                if (running) {                                        Proxy thd = proxyClass.getDeclaredConstructor().newInstance();                    thd.configure(clientSocket, target, pageEncodings, formEncodings);                    thd.start();                }            } catch (InterruptedIOException ignored) {                                    }        }            } catch (Exception e) {            } finally {        JOrphanUtils.closeQuietly(mainSocket);    }}
1
public void stopServer()
{    running = false;}
0
public String[] getManagedContentTypes()
{    return new String[0];}
0
public HTTPSamplerBase createSampler(HttpRequestHdr request, Map<String, String> pageEncodings, Map<String, String> formEncodings)
{        HTTPSamplerBase sampler = HTTPSamplerFactory.newInstance(request.getHttpSamplerName());    sampler.setProperty(TestElement.GUI_CLASS, HttpTestSampleGui.class.getName());        sampler.setFollowRedirects(false);    sampler.setUseKeepAlive(true);    if (log.isDebugEnabled()) {            }    return sampler;}
1
public final void populateSampler(HTTPSamplerBase sampler, HttpRequestHdr request, Map<String, String> pageEncodings, Map<String, String> formEncodings) throws Exception
{    computeFromHeader(sampler, request, pageEncodings, formEncodings);    computeFromPostBody(sampler, request);    if (log.isDebugEnabled()) {            }    Arguments arguments = sampler.getArguments();    if (arguments.getArgumentCount() == 1 && arguments.getArgument(0).getName().length() == 0) {        sampler.setPostBodyRaw(true);    }}
1
protected void computeFromHeader(HTTPSamplerBase sampler, HttpRequestHdr request, Map<String, String> pageEncodings, Map<String, String> formEncodings) throws Exception
{    computeDomain(sampler, request);    computeMethod(sampler, request);    computePort(sampler, request);    computeProtocol(sampler, request);    computeContentEncoding(sampler, request, pageEncodings, formEncodings);    computePath(sampler, request);    computeSamplerName(sampler, request);}
0
protected void computeFromPostBody(HTTPSamplerBase sampler, HttpRequestHdr request) throws Exception
{        if ((!HTTPConstants.CONNECT.equals(request.getMethod())) && (!HTTPConstants.GET.equals(request.getMethod()))) {                final String contentType = request.getContentType();        MultipartUrlConfig urlConfig = request.getMultipartConfig(contentType);        String contentEncoding = sampler.getContentEncoding();                String postData = null;        if (log.isDebugEnabled()) {            if (!StringUtils.isEmpty(contentEncoding)) {                            } else {                            }        }        if (!StringUtils.isEmpty(contentEncoding)) {            postData = new String(request.getRawPostData(), contentEncoding);        } else {                        postData = new String(request.getRawPostData(), PostWriter.ENCODING);        }        if (urlConfig != null) {            urlConfig.parseArguments(postData);                        sampler.setDoMultipart(true);                                                            request.getHeaderManager().removeHeaderNamed(HttpRequestHdr.CONTENT_TYPE);            request.getHeaderManager().removeHeaderNamed(HttpRequestHdr.CONTENT_LENGTH);                        sampler.setArguments(urlConfig.getArguments());                        sampler.setHTTPFiles(urlConfig.getHTTPFileArgs().asArray());                        sampler.setDoBrowserCompatibleMultipart(true);                } else if (postData.trim().startsWith("<?") || HTTPConstants.PUT.equals(sampler.getMethod()) || isPotentialXml(postData)) {            sampler.addNonEncodedArgument("", postData, "");        } else if (contentType == null || (contentType.startsWith(HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED) && !isBinaryContent(contentType))) {                                                            sampler.parseArguments(postData.trim(), contentEncoding);        } else if (postData.length() > 0) {            if (isBinaryContent(contentType)) {                try {                    File tempDir = new File(getBinaryDirectory());                    File out = File.createTempFile(request.getMethod(), getBinaryFileSuffix(), tempDir);                    FileUtils.writeByteArrayToFile(out, request.getRawPostData());                    HTTPFileArg[] files = { new HTTPFileArg(out.getPath(), "", contentType) };                    sampler.setHTTPFiles(files);                } catch (IOException e) {                                    }            } else {                                                sampler.addNonEncodedArgument("", postData, "");            }        }    }}
1
private static boolean isPotentialXml(String postData)
{    try {        SAXParserFactory spf = SAXParserFactory.newInstance();        SAXParser saxParser = spf.newSAXParser();        XMLReader xmlReader = saxParser.getXMLReader();        ErrorDetectionHandler detectionHandler = new ErrorDetectionHandler();        xmlReader.setContentHandler(detectionHandler);        xmlReader.setErrorHandler(detectionHandler);        xmlReader.parse(new InputSource(new StringReader(postData)));        return !detectionHandler.isErrorDetected();    } catch (ParserConfigurationException | SAXException | IOException e) {        return false;    }}
0
public void error(SAXParseException e) throws SAXException
{    this.errorDetected = true;}
0
public void fatalError(SAXParseException e) throws SAXException
{    this.errorDetected = true;}
0
public boolean isErrorDetected()
{    return errorDetected;}
0
protected void computeSamplerName(HTTPSamplerBase sampler, HttpRequestHdr request)
{    String prefix = request.getPrefix();    int httpSampleNameMode = request.getHttpSampleNameMode();    if (!HTTPConstants.CONNECT.equals(request.getMethod()) && isNumberRequests()) {        if (StringUtils.isNotEmpty(prefix)) {            if (httpSampleNameMode == SAMPLER_NAME_NAMING_MODE_PREFIX) {                sampler.setName(prefix + sampler.getPath() + "-" + incrementRequestNumberAndGet());            } else if (httpSampleNameMode == SAMPLER_NAME_NAMING_MODE_COMPLETE) {                sampler.setName(prefix + "-" + incrementRequestNumberAndGet());            } else {                            }        } else {            sampler.setName(sampler.getPath() + "-" + incrementRequestNumberAndGet());        }    } else {        if (StringUtils.isNotEmpty(prefix)) {            if (httpSampleNameMode == SAMPLER_NAME_NAMING_MODE_PREFIX) {                sampler.setName(prefix + sampler.getPath());            } else if (httpSampleNameMode == SAMPLER_NAME_NAMING_MODE_COMPLETE) {                sampler.setName(prefix);            } else {                            }        } else {            sampler.setName(sampler.getPath());        }    }}
1
protected void computePath(HTTPSamplerBase sampler, HttpRequestHdr request)
{    if (sampler.getContentEncoding() != null) {        sampler.setPath(request.getPath(), sampler.getContentEncoding());    } else {                                        sampler.setPath(request.getPath(), null);    }    if (log.isDebugEnabled()) {            }}
1
protected void computeContentEncoding(HTTPSamplerBase sampler, HttpRequestHdr request, Map<String, String> pageEncodings, Map<String, String> formEncodings) throws MalformedURLException
{    URL pageUrl;    if (sampler.isProtocolDefaultPort()) {        pageUrl = new URL(sampler.getProtocol(), sampler.getDomain(), request.getPath());    } else {        pageUrl = new URL(sampler.getProtocol(), sampler.getDomain(), sampler.getPort(), request.getPath());    }    String urlWithoutQuery = request.getUrlWithoutQuery(pageUrl);    String contentEncoding = computeContentEncoding(request, pageEncodings, formEncodings, urlWithoutQuery);        if (!StringUtils.isEmpty(contentEncoding)) {        sampler.setContentEncoding(contentEncoding);    }}
0
protected String computeContentEncoding(HttpRequestHdr request, Map<String, String> pageEncodings, Map<String, String> formEncodings, String urlWithoutQuery)
{        String contentEncoding;    String requestContentEncoding = ConversionUtils.getEncodingFromContentType(request.getContentType());    if (requestContentEncoding != null) {        contentEncoding = requestContentEncoding;    } else {                contentEncoding = pageEncodings.get(urlWithoutQuery);                        String formEncoding = formEncodings.get(urlWithoutQuery);                if (formEncoding != null) {            contentEncoding = formEncoding;                    }    }    if (contentEncoding == null) {        contentEncoding = pageEncodings.get(DEFAULT_ENCODING_KEY);            }    return contentEncoding;}
1
protected void computeProtocol(HTTPSamplerBase sampler, HttpRequestHdr request)
{    sampler.setProtocol(request.getProtocol(sampler));}
0
protected void computePort(HTTPSamplerBase sampler, HttpRequestHdr request)
{    sampler.setPort(request.serverPort());    if (log.isDebugEnabled()) {            }}
1
protected void computeMethod(HTTPSamplerBase sampler, HttpRequestHdr request)
{    sampler.setMethod(request.getMethod());    }
1
protected void computeDomain(HTTPSamplerBase sampler, HttpRequestHdr request)
{    sampler.setDomain(request.serverName());    if (log.isDebugEnabled()) {            }}
1
public void addFormActionsAndCharSet(String html, Map<String, String> formEncodings, String pageEncoding) throws HTMLParseException
{        Document document = Jsoup.parse(html);    Elements forms = document.select("form");    for (Element element : forms) {        String action = element.attr("action");        if (!(StringUtils.isEmpty(action))) {                                    String formCharSet = pageEncoding;            String acceptCharSet = element.attr("accept-charset");                        if (acceptCharSet != null) {                String[] charSets = JOrphanUtils.split(acceptCharSet, ",");                                if (charSets.length > 0) {                    formCharSet = charSets[0].trim();                    if (formCharSet.length() == 0) {                        formCharSet = null;                    }                }            }            if (formCharSet != null) {                formEncodings.put(action, formCharSet);            }        }    }}
1
public TestElement createTestElement()
{    model = makeProxyControl();        modifyTestElement(model);    return model;}
1
protected ProxyControl makeProxyControl()
{    return new ProxyControl();}
0
public void modifyTestElement(TestElement el)
{    GuiUtils.stopTableEditing(excludeTable);    GuiUtils.stopTableEditing(includeTable);    configureTestElement(el);    if (el instanceof ProxyControl) {        model = (ProxyControl) el;        model.setPort(portField.getText());        model.setSslDomains(sslDomains.getText());        setIncludeListInProxyControl(model);        setExcludeListInProxyControl(model);        model.setCaptureHttpHeaders(httpHeaders.isSelected());        model.setGroupingMode(groupingMode.getSelectedIndex());        model.setAssertions(addAssertions.isSelected());        if (samplerTypeName.getSelectedIndex() < HTTPSamplerFactory.getImplementations().length) {            model.setSamplerTypeName(HTTPSamplerFactory.getImplementations()[samplerTypeName.getSelectedIndex()]);        } else {            model.setSamplerTypeName(USE_DEFAULT_HTTP_IMPL);        }        model.setSamplerRedirectAutomatically(samplerRedirectAutomatically.isSelected());        model.setSamplerFollowRedirects(samplerFollowRedirects.isSelected());        model.setUseKeepAlive(useKeepAlive.isSelected());        model.setSamplerDownloadImages(samplerDownloadImages.isSelected());        model.setHTTPSampleNamingMode(httpSampleNamingMode.getSelectedIndex());        model.setDefaultEncoding(defaultEncoding.getText());        model.setPrefixHTTPSampleName(prefixHTTPSampleName.getText());        model.setProxyPauseHTTPSample(proxyPauseHTTPSample.getText());        model.setNotifyChildSamplerListenerOfFilteredSamplers(notifyChildSamplerListenerOfFilteredSamplersCB.isSelected());        model.setRegexMatch(regexMatch.isSelected());        model.setContentTypeInclude(contentTypeInclude.getText());        model.setContentTypeExclude(contentTypeExclude.getText());        TreeNodeWrapper nw = (TreeNodeWrapper) targetNodes.getSelectedItem();        if (nw == null) {            model.setTarget(null);        } else {            model.setTarget(nw.getTreeNode());        }    }}
0
protected void setIncludeListInProxyControl(ProxyControl element)
{    List<String> includeList = getDataList(includeModel, INCLUDE_COL);    element.setIncludeList(includeList);}
0
protected void setExcludeListInProxyControl(ProxyControl element)
{    List<String> excludeList = getDataList(excludeModel, EXCLUDE_COL);    element.setExcludeList(excludeList);}
0
private List<String> getDataList(PowerTableModel pModel, String colName)
{    String[] dataArray = pModel.getData().getColumn(colName);    List<String> list = new LinkedList<>();    for (String data : dataArray) {        list.add(data);    }    return list;}
0
public String getLabelResource()
{        return "proxy_title";}
0
public Collection<String> getMenuCategories()
{    return Arrays.asList(MenuFactory.NON_TEST_ELEMENTS);}
0
public void configure(TestElement element)
{        super.configure(element);    model = (ProxyControl) element;    portField.setText(model.getPortString());    sslDomains.setText(model.getSslDomains());    httpHeaders.setSelected(model.getCaptureHttpHeaders());    groupingMode.setSelectedIndex(model.getGroupingMode());    addAssertions.setSelected(model.getAssertions());    samplerTypeName.setSelectedItem(model.getSamplerTypeName());    samplerRedirectAutomatically.setSelected(model.getSamplerRedirectAutomatically());    samplerFollowRedirects.setSelected(model.getSamplerFollowRedirects());    useKeepAlive.setSelected(model.getUseKeepalive());    samplerDownloadImages.setSelected(model.getSamplerDownloadImages());    httpSampleNamingMode.setSelectedIndex(model.getHTTPSampleNamingMode());    prefixHTTPSampleName.setText(model.getPrefixHTTPSampleName());    defaultEncoding.setText(model.getDefaultEncoding());    proxyPauseHTTPSample.setText(model.getProxyPauseHTTPSample());    notifyChildSamplerListenerOfFilteredSamplersCB.setSelected(model.getNotifyChildSamplerListenerOfFilteredSamplers());    regexMatch.setSelected(model.getRegexMatch());    contentTypeInclude.setText(model.getContentTypeInclude());    contentTypeExclude.setText(model.getContentTypeExclude());        reinitializeTargetCombo();        populateTable(includeModel, model.getIncludePatterns().iterator());    populateTable(excludeModel, model.getExcludePatterns().iterator());    repaint();}
1
private void populateTable(PowerTableModel pModel, PropertyIterator iter)
{    pModel.clearData();    while (iter.hasNext()) {        pModel.addRow(new Object[] { iter.next().getStringValue() });    }    pModel.fireTableDataChanged();}
0
public void itemStateChanged(ItemEvent e)
{    if (e.getSource() instanceof JComboBox) {        JComboBox combo = (JComboBox) e.getSource();        if (HTTP_SAMPLER_NAMING_MODE.equals(combo.getName())) {            model.setHTTPSampleNamingMode(httpSampleNamingMode.getSelectedIndex());        }    } else {        enableRestart();    }}
0
public void actionPerformed(ActionEvent action)
{    String command = action.getActionCommand();        final Object source = action.getSource();    if (source.equals(samplerFollowRedirects) && samplerFollowRedirects.isSelected()) {        samplerRedirectAutomatically.setSelected(false);    } else if (source.equals(samplerRedirectAutomatically) && samplerRedirectAutomatically.isSelected()) {        samplerFollowRedirects.setSelected(false);    }    if (command.equals(ACTION_STOP)) {        stopRecorder();    } else if (command.equals(ACTION_START)) {        if (startProxy()) {            recorderDialog.setVisible(true);        }    } else if (command.equals(ACTION_RESTART)) {        model.stopProxy();        if (startProxy()) {            recorderDialog.setVisible(true);        }    } else if (command.equals(ENABLE_RESTART)) {        enableRestart();    } else if (command.equals(ADD_EXCLUDE)) {        excludeModel.addNewRow();        excludeModel.fireTableDataChanged();        enableRestart();    } else if (command.equals(ADD_INCLUDE)) {        includeModel.addNewRow();        includeModel.fireTableDataChanged();        enableRestart();    } else if (command.equals(DELETE_EXCLUDE)) {        deleteRowFromTable(excludeModel, excludeTable);    } else if (command.equals(DELETE_INCLUDE)) {        deleteRowFromTable(includeModel, includeTable);    } else if (command.equals(CHANGE_TARGET)) {                TreeNodeWrapper nw = (TreeNodeWrapper) targetNodes.getSelectedItem();        model.setTarget(nw.getTreeNode());        enableRestart();    } else if (command.equals(ADD_TO_INCLUDE_FROM_CLIPBOARD)) {        addFromClipboard(includeTable);        includeModel.fireTableDataChanged();        enableRestart();    } else if (command.equals(ADD_TO_EXCLUDE_FROM_CLIPBOARD)) {        addFromClipboard(excludeTable);        excludeModel.fireTableDataChanged();        enableRestart();    } else if (command.equals(ADD_SUGGESTED_EXCLUDES)) {        addSuggestedExcludes(excludeTable);        excludeModel.fireTableDataChanged();        enableRestart();    }}
1
 void stopRecorder()
{    model.stopProxy();    stop.setEnabled(false);    start.setEnabled(true);    restart.setEnabled(false);    recorderDialog.setVisible(false);}
0
private void deleteRowFromTable(PowerTableModel tableModel, JTable table)
{    int selectedRow = table.getSelectedRow();    if (selectedRow >= 0) {        tableModel.removeRow(table.getSelectedRow());    } else {        if (table.getRowCount() > 0) {            tableModel.removeRow(0);        }    }    tableModel.fireTableDataChanged();    if (table.getRowCount() > 0) {        if (selectedRow == -1) {            table.setRowSelectionInterval(0, 0);        } else {            int rowToSelect = selectedRow > 0 ? selectedRow - 1 : 0;            table.setRowSelectionInterval(rowToSelect, rowToSelect);        }    }    enableRestart();}
0
protected void addSuggestedExcludes(JTable table)
{    GuiUtils.stopTableEditing(table);    int rowCount = table.getRowCount();        String[] exclusions = SUGGESTED_EXCLUSIONS.split(";");    if (exclusions.length > 0) {        PowerTableModel model = (PowerTableModel) table.getModel();        if (model != null) {            for (String clipboardLine : exclusions) {                model.addRow(new Object[] { clipboardLine });            }            if (table.getRowCount() > rowCount) {                                int rowToSelect = model.getRowCount() - 1;                table.setRowSelectionInterval(rowCount, rowToSelect);            }        }    }}
0
protected void addFromClipboard(JTable table)
{    GuiUtils.stopTableEditing(table);    int rowCount = table.getRowCount();    try {        String clipboardContent = GuiUtils.getPastedText();        if (clipboardContent != null) {            PowerTableModel model = null;            String[] clipboardLines = clipboardContent.split(NEW_LINE);            for (String clipboardLine : clipboardLines) {                model = (PowerTableModel) table.getModel();                model.addRow(new Object[] { clipboardLine });            }            if (model != null && table.getRowCount() > rowCount) {                                int rowToSelect = model.getRowCount() - 1;                table.setRowSelectionInterval(rowCount, rowToSelect);            }        }    } catch (IOException ioe) {        JOptionPane.showMessageDialog(this,         JMeterUtils.getResString("proxy_daemon_error_read_args") + "\n" +         ioe.getLocalizedMessage(),         JMeterUtils.getResString("error_title"), JOptionPane.ERROR_MESSAGE);    } catch (UnsupportedFlavorException ufe) {        JOptionPane.showMessageDialog(this,         JMeterUtils.getResString("proxy_daemon_error_not_retrieve") + SPACE + DataFlavor.stringFlavor.getHumanPresentableName() + SPACE +         JMeterUtils.getResString("proxy_daemon_error_from_clipboard") +         ufe.getLocalizedMessage(),         JMeterUtils.getResString("error_title"), JOptionPane.ERROR_MESSAGE);    }}
0
private boolean startProxy()
{    ValueReplacer replacer = GuiPackage.getInstance().getReplacer();    modifyTestElement(model);    TreeNodeWrapper treeNodeWrapper = (TreeNodeWrapper) targetNodesModel.getSelectedItem();    if (JMeterUtils.getResString("use_recording_controller").equals(treeNodeWrapper.getLabel())) {        JMeterTreeNode targetNode = model.findTargetControllerNode();        if (targetNode == null || !(targetNode.getTestElement() instanceof RecordingController)) {            JOptionPane.showMessageDialog(this,             JMeterUtils.getResString("proxy_cl_wrong_target_cl"),             JMeterUtils.getResString("error_title"), JOptionPane.ERROR_MESSAGE);            return false;        }    }        Cursor cursor = getCursor();    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));    try {        replacer.replaceValues(model);        model.startProxy();        start.setEnabled(false);        stop.setEnabled(true);        restart.setEnabled(false);        if (ProxyControl.isDynamicMode()) {            String[] details = model.getCertificateDetails();            StringBuilder sb = new StringBuilder();            sb.append("<html>");                        sb.append(JMeterUtils.getResString("proxy_daemon_msg_rootca_cert")).append("&nbsp;<b>").append(KeyToolUtils.ROOT_CACERT_CRT_PFX).append("</b>&nbsp;").append(JMeterUtils.getResString("proxy_daemon_msg_created_in_bin"));                        sb.append("<br>").append(JMeterUtils.getResString("proxy_daemon_msg_install_as_in_doc"));            sb.append("<br><b>").append(MessageFormat.format(JMeterUtils.getResString("proxy_daemon_msg_check_expiration"),             ProxyControl.CERT_VALIDITY)).append("</b><br>");            sb.append("<br>").append(JMeterUtils.getResString("proxy_daemon_msg_check_details")).append(            "<ul>");            for (String detail : details) {                sb.append("<li>").append(detail).append("</li>");            }            sb.append("</ul>").append("</html>");                        JLabel messageLabel = new JLabel(sb.toString());            Timer timer = new Timer(7000, evt -> {                Window window = SwingUtilities.getWindowAncestor(messageLabel);                                if (window != null) {                    window.dispose();                }            });            timer.setRepeats(false);            timer.start();            JOptionPane.showMessageDialog(this, messageLabel,             JMeterUtils.getResString("proxy_daemon_msg_rootca_cert") + SPACE + KeyToolUtils.ROOT_CACERT_CRT_PFX + SPACE +             JMeterUtils.getResString("proxy_daemon_msg_created_in_bin"), JOptionPane.INFORMATION_MESSAGE);        }        return true;    } catch (InvalidVariableException e) {        JOptionPane.showMessageDialog(this,         JMeterUtils.getResString("invalid_variables") + ": " + e.getMessage(),         JMeterUtils.getResString("error_title"), JOptionPane.ERROR_MESSAGE);        return false;    } catch (BindException e) {        JOptionPane.showMessageDialog(this,         JMeterUtils.getResString("proxy_daemon_bind_error") + ": " + e.getMessage(),         JMeterUtils.getResString("error_title"), JOptionPane.ERROR_MESSAGE);        return false;    } catch (IOException e) {        JOptionPane.showMessageDialog(this,         JMeterUtils.getResString("proxy_daemon_error") + ": " + e.getMessage(),         JMeterUtils.getResString("error_title"), JOptionPane.ERROR_MESSAGE);        return false;    } finally {        setCursor(cursor);    }}
0
 void enableRestart()
{    if (stop.isEnabled()) {        restart.setEnabled(true);    }}
0
public void keyPressed(KeyEvent e)
{}
0
public void keyTyped(KeyEvent e)
{}
0
public void keyReleased(KeyEvent e)
{    String fieldName = e.getComponent().getName();    if (fieldName.equals(PORT_FIELD_NAME)) {        try {            int port = Integer.parseInt(portField.getText());                    } catch (NumberFormatException nfe) {            int length = portField.getText().length();            if (length > 0) {                JOptionPane.showMessageDialog(this,                 JMeterUtils.getResString("proxy_settings_port_error_digits"),                 JMeterUtils.getResString("proxy_settings_port_error_invalid_data"), JOptionPane.WARNING_MESSAGE);                                portField.setText(portField.getText().substring(0, length - 1));            }        }        enableRestart();    } else if (fieldName.equals(ENABLE_RESTART)) {        enableRestart();    } else if (fieldName.equals(PREFIX_HTTP_SAMPLER_NAME)) {        model.setPrefixHTTPSampleName(prefixHTTPSampleName.getText());    } else if (fieldName.equals(PROXY_PAUSE_HTTP_SAMPLER)) {        try {            Long.parseLong(proxyPauseHTTPSample.getText());        } catch (NumberFormatException nfe) {            int length = proxyPauseHTTPSample.getText().length();            if (length > 0) {                                JOptionPane.showMessageDialog(                this,                 JMeterUtils.getResString("proxy_settings_pause_error_digits"),                 JMeterUtils.getResString("proxy_settings_pause_error_invalid_data"), JOptionPane.WARNING_MESSAGE);                                proxyPauseHTTPSample.setText(proxyPauseHTTPSample.getText().substring(0, length - 1));            }        }        model.setProxyPauseHTTPSample(proxyPauseHTTPSample.getText());        enableRestart();    }}
1
private void init()
{        setLayout(new BorderLayout(0, 5));    setBorder(makeBorder());    add(makeTitlePanel(), BorderLayout.NORTH);    JPanel mainPanel = new JPanel(new BorderLayout());    mainPanel.add(createControls(), BorderLayout.NORTH);    JTabbedPane tabbedPane = new JTabbedPane();    JPanel testPlanPanel = new VerticalPanel();    testPlanPanel.add(createTestPlanContentPanel());    testPlanPanel.add(Box.createVerticalStrut(5));    testPlanPanel.add(createHTTPSamplerPanel());    tabbedPane.add(JMeterUtils.getResString("proxy_test_plan_creation"), testPlanPanel);    JPanel filteringPanel = new VerticalPanel();    tabbedPane.add(JMeterUtils.getResString("proxy_test_plan_filtering"), filteringPanel);    filteringPanel.add(createContentTypePanel());    filteringPanel.add(createIncludePanel());    filteringPanel.add(createExcludePanel());    filteringPanel.add(createNotifyListenersPanel());    JPanel vPanel = new VerticalPanel();    vPanel.add(createPortPanel());    vPanel.add(Box.createVerticalStrut(5));    vPanel.add(tabbedPane);    mainPanel.add(vPanel, BorderLayout.CENTER);    add(mainPanel, BorderLayout.CENTER);}
0
private JPanel createControls()
{    String iconSize = JMeterUtils.getPropDefault(JMeterToolBar.TOOLBAR_ICON_SIZE, JMeterToolBar.DEFAULT_TOOLBAR_ICON_SIZE);        start = new JButton(JMeterUtils.getResString("start"));    ImageIcon startImage = JMeterUtils.getImage("toolbar/" + iconSize + "/arrow-right-3.png");    start.setIcon(startImage);    start.addActionListener(this);    start.setActionCommand(ACTION_START);    start.setEnabled(true);    stop = createStopButton(iconSize);    stop.addActionListener(this);    ImageIcon restartImage = JMeterUtils.getImage("toolbar/" + iconSize + "/edit-redo-7.png");        restart = new JButton(JMeterUtils.getResString("restart"));    restart.setIcon(restartImage);    restart.addActionListener(this);    restart.setActionCommand(ACTION_RESTART);    restart.setEnabled(false);    JPanel panel = new JPanel();    panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("proxy_general_lifecycle")));    panel.add(start);    panel.add(Box.createHorizontalStrut(10));    panel.add(stop);    panel.add(Box.createHorizontalStrut(10));    panel.add(restart);    return panel;}
0
 JButton createStopButton(String iconSize)
{        JButton stop = new JButton(JMeterUtils.getResString("stop"));    ImageIcon stopImage = JMeterUtils.getImage("toolbar/" + iconSize + "/process-stop-4.png");    stop.setIcon(stopImage);    stop.setActionCommand(ACTION_STOP);    stop.setEnabled(false);    return stop;}
0
private JPanel createPortPanel()
{    portField = new JTextField(ProxyControl.DEFAULT_PORT_S, 20);    portField.setName(PORT_FIELD_NAME);    portField.addKeyListener(this);    Dimension portPreferredSize = portField.getPreferredSize();    portField.setMinimumSize(new Dimension((int) Math.round(portPreferredSize.width * 0.75), portPreferredSize.height));        JLabel label = new JLabel(JMeterUtils.getResString("port"));    label.setLabelFor(portField);    HorizontalPanel panel = new HorizontalPanel();    panel.add(label);    panel.add(portField);        sslDomains = new JLabeledTextField(JMeterUtils.getResString("proxy_domains"));    sslDomains.setEnabled(ProxyControl.isDynamicMode());    if (ProxyControl.isDynamicMode()) {        sslDomains.setToolTipText(JMeterUtils.getResString("proxy_domains_dynamic_mode_tooltip"));    } else {        sslDomains.setToolTipText(JMeterUtils.getResString("proxy_domains_dynamic_mode_tooltip_java6"));    }    GridBagLayout gridBagLayout = new GridBagLayout();    GridBagConstraints gbc = new GridBagConstraints();    gbc.anchor = GridBagConstraints.NORTHWEST;    gbc.fill = GridBagConstraints.NONE;    gbc.gridheight = 1;    gbc.gridwidth = 1;    gbc.gridx = 0;    gbc.gridy = 0;    gbc.weightx = 1;    gbc.weighty = 1;    JPanel gPane = new JPanel(gridBagLayout);    gPane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("proxy_general_settings")));    gPane.add(panel, gbc.clone());    gbc.gridx++;    gbc.fill = GridBagConstraints.HORIZONTAL;    gbc.weightx = 6;    gPane.add(sslDomains, gbc);    return gPane;}
0
private JPanel createTestPlanContentPanel()
{        httpHeaders = new JCheckBox(JMeterUtils.getResString("proxy_headers"));        httpHeaders.setSelected(true);    httpHeaders.addActionListener(this);    httpHeaders.setActionCommand(ENABLE_RESTART);        addAssertions = new JCheckBox(JMeterUtils.getResString("proxy_assertions"));    addAssertions.setSelected(false);    addAssertions.addActionListener(this);    addAssertions.setActionCommand(ENABLE_RESTART);        regexMatch = new JCheckBox(JMeterUtils.getResString("proxy_regex"));    regexMatch.setSelected(false);    regexMatch.addActionListener(this);    regexMatch.setActionCommand(ENABLE_RESTART);    VerticalPanel mainPanel = new VerticalPanel();    mainPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("proxy_test_plan_content")));    HorizontalPanel nodeCreationPanel = new HorizontalPanel();    nodeCreationPanel.add(createGroupingPanel());    nodeCreationPanel.add(httpHeaders);    nodeCreationPanel.add(addAssertions);    nodeCreationPanel.add(regexMatch);    HorizontalPanel targetPanel = new HorizontalPanel();    targetPanel.add(createTargetPanel());    mainPanel.add(targetPanel);    mainPanel.add(nodeCreationPanel);    return mainPanel;}
0
private JPanel createHTTPSamplerPanel()
{    DefaultComboBoxModel<String> m = new DefaultComboBoxModel<>();    for (String s : HTTPSamplerFactory.getImplementations()) {        m.addElement(s);    }    m.addElement(USE_DEFAULT_HTTP_IMPL);    samplerTypeName = new JComboBox<>(m);    samplerTypeName.setSelectedItem(USE_DEFAULT_HTTP_IMPL);    samplerTypeName.addItemListener(this);        JLabel labelSamplerType = new JLabel(JMeterUtils.getResString("proxy_sampler_type"));    labelSamplerType.setLabelFor(samplerTypeName);        samplerRedirectAutomatically = new JCheckBox(JMeterUtils.getResString("follow_redirects_auto"));    samplerRedirectAutomatically.setSelected(false);    samplerRedirectAutomatically.addActionListener(this);    samplerRedirectAutomatically.setActionCommand(ENABLE_RESTART);        samplerFollowRedirects = new JCheckBox(JMeterUtils.getResString("follow_redirects"));    samplerFollowRedirects.setSelected(true);    samplerFollowRedirects.addActionListener(this);    samplerFollowRedirects.setActionCommand(ENABLE_RESTART);        useKeepAlive = new JCheckBox(JMeterUtils.getResString("use_keepalive"));    useKeepAlive.setSelected(true);    useKeepAlive.addActionListener(this);    useKeepAlive.setActionCommand(ENABLE_RESTART);        samplerDownloadImages = new JCheckBox(JMeterUtils.getResString("web_testing_retrieve_images"));    samplerDownloadImages.setSelected(false);    samplerDownloadImages.addActionListener(this);    samplerDownloadImages.setActionCommand(ENABLE_RESTART);    DefaultComboBoxModel<String> choice = new DefaultComboBoxModel<>();        choice.addElement(JMeterUtils.getResString("sample_name_prefix"));        choice.addElement(JMeterUtils.getResString("sample_name_transaction"));    httpSampleNamingMode = new JComboBox<>(choice);    httpSampleNamingMode.setName(HTTP_SAMPLER_NAMING_MODE);    httpSampleNamingMode.addItemListener(this);    defaultEncoding = new JTextField(15);    prefixHTTPSampleName = new JTextField(20);    prefixHTTPSampleName.addKeyListener(this);    prefixHTTPSampleName.setName(PREFIX_HTTP_SAMPLER_NAME);    proxyPauseHTTPSample = new JTextField(10);    proxyPauseHTTPSample.addKeyListener(this);    proxyPauseHTTPSample.setName(PROXY_PAUSE_HTTP_SAMPLER);    proxyPauseHTTPSample.setActionCommand(ENABLE_RESTART);        JLabel labelProxyPause = new JLabel(JMeterUtils.getResString("proxy_pause_http_sampler"));    labelProxyPause.setLabelFor(proxyPauseHTTPSample);        JLabel labelDefaultEncoding = new JLabel(JMeterUtils.getResString("proxy_default_encoding"));    labelDefaultEncoding.setLabelFor(defaultEncoding);    GridBagLayout gridBagLayout = new GridBagLayout();    GridBagConstraints gbc = new GridBagConstraints();    gbc.anchor = GridBagConstraints.FIRST_LINE_START;    gbc.fill = GridBagConstraints.NONE;    gbc.gridheight = 1;    gbc.gridwidth = 1;    gbc.gridx = 0;    gbc.gridy = 0;    gbc.weightx = 1;    gbc.weighty = 1;    JPanel panel = new JPanel(gridBagLayout);    panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("proxy_sampler_settings")));    panel.add(httpSampleNamingMode, gbc.clone());    gbc.gridx++;    gbc.weightx = 3;    gbc.fill = GridBagConstraints.HORIZONTAL;    panel.add(prefixHTTPSampleName, gbc.clone());    gbc.gridx = 0;    gbc.gridy++;    panel.add(labelProxyPause, gbc.clone());    gbc.gridx++;    gbc.weightx = 3;    gbc.fill = GridBagConstraints.HORIZONTAL;    panel.add(proxyPauseHTTPSample, gbc.clone());    gbc.weightx = 1;    gbc.gridx = 0;    gbc.gridy++;    panel.add(labelDefaultEncoding, gbc.clone());    gbc.gridx++;    gbc.weightx = 3;    gbc.fill = GridBagConstraints.HORIZONTAL;    panel.add(defaultEncoding, gbc.clone());    gbc.weightx = 1;    gbc.gridx = 0;    gbc.gridy++;    gbc.fill = GridBagConstraints.VERTICAL;    panel.add(samplerDownloadImages, gbc.clone());    gbc.gridx = 0;    gbc.gridy++;    gbc.fill = GridBagConstraints.VERTICAL;    panel.add(samplerRedirectAutomatically, gbc.clone());    gbc.gridx++;    gbc.fill = GridBagConstraints.HORIZONTAL;    panel.add(samplerFollowRedirects, gbc.clone());    gbc.gridx = 0;    gbc.gridy++;    gbc.fill = GridBagConstraints.VERTICAL;    panel.add(useKeepAlive, gbc.clone());    gbc.gridx = 0;    gbc.gridy++;    gbc.fill = GridBagConstraints.VERTICAL;    panel.add(labelSamplerType, gbc.clone());    gbc.gridx++;    gbc.fill = GridBagConstraints.HORIZONTAL;    panel.add(samplerTypeName, gbc.clone());    return panel;}
0
private JPanel createTargetPanel()
{    targetNodesModel = new DefaultComboBoxModel<>();    targetNodes = new JComboBox<>(targetNodesModel);        targetNodes.setPrototypeDisplayValue("");        JPopupMenu popup = (JPopupMenu) targetNodes.getUI().getAccessibleChild(targetNodes, 0);    JScrollPane scrollPane = findScrollPane(popup);    if (scrollPane != null) {                scrollPane.setHorizontalScrollBar(new JScrollBar(JScrollBar.HORIZONTAL));        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);    }    targetNodes.setActionCommand(CHANGE_TARGET);            JLabel label = new JLabel(JMeterUtils.getResString("proxy_target"));    label.setLabelFor(targetNodes);    HorizontalPanel panel = new HorizontalPanel();    panel.add(label);    panel.add(targetNodes);    return panel;}
0
private JScrollPane findScrollPane(JPopupMenu popup)
{    Component[] components = popup.getComponents();    for (Component component : components) {        if (component instanceof JScrollPane) {            return (JScrollPane) component;        }    }    return null;}
0
private JPanel createGroupingPanel()
{    DefaultComboBoxModel<String> m = new DefaultComboBoxModel<>();                m.addElement(JMeterUtils.getResString("grouping_no_groups"));        m.addElement(JMeterUtils.getResString("grouping_add_separators"));        m.addElement(JMeterUtils.getResString("grouping_in_controllers"));        m.addElement(JMeterUtils.getResString("grouping_store_first_only"));        m.addElement(JMeterUtils.getResString("grouping_in_transaction_controllers"));    groupingMode = new JComboBox<>(m);    groupingMode.setPreferredSize(new Dimension(150, 20));    groupingMode.setSelectedIndex(0);    groupingMode.addItemListener(this);        JLabel label2 = new JLabel(JMeterUtils.getResString("grouping_mode"));    label2.setLabelFor(groupingMode);    HorizontalPanel panel = new HorizontalPanel();    panel.add(label2);    panel.add(groupingMode);    return panel;}
0
private JPanel createContentTypePanel()
{    contentTypeInclude = new JTextField(35);    contentTypeInclude.addKeyListener(this);    contentTypeInclude.setName(ENABLE_RESTART);        JLabel labelInclude = new JLabel(JMeterUtils.getResString("proxy_content_type_include"));    labelInclude.setLabelFor(contentTypeInclude);            contentTypeInclude.setText(JMeterUtils.getProperty("proxy.content_type_include"));    contentTypeExclude = new JTextField(35);    contentTypeExclude.addKeyListener(this);    contentTypeExclude.setName(ENABLE_RESTART);        JLabel labelExclude = new JLabel(JMeterUtils.getResString("proxy_content_type_exclude"));    labelExclude.setLabelFor(contentTypeExclude);            contentTypeExclude.setText(JMeterUtils.getProperty("proxy.content_type_exclude"));    HorizontalPanel panel = new HorizontalPanel();    panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("proxy_content_type_filter")));    panel.add(labelInclude);    panel.add(contentTypeInclude);    panel.add(labelExclude);    panel.add(contentTypeExclude);    return panel;}
0
private JPanel createIncludePanel()
{    includeModel = new PowerTableModel(new String[] { INCLUDE_COL }, new Class[] { String.class });    includeTable = new JTable(includeModel);    JMeterUtils.applyHiDPI(includeTable);    includeTable.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());    includeTable.setPreferredScrollableViewportSize(new Dimension(80, 80));    JPanel panel = new JPanel(new BorderLayout());    panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), JMeterUtils.getResString(    "patterns_to_include")));    panel.add(new JScrollPane(includeTable), BorderLayout.CENTER);    panel.add(createTableButtonPanel(ADD_INCLUDE, DELETE_INCLUDE, ADD_TO_INCLUDE_FROM_CLIPBOARD, null), BorderLayout.SOUTH);    return panel;}
0
private JPanel createExcludePanel()
{    excludeModel = new PowerTableModel(new String[] { EXCLUDE_COL }, new Class[] { String.class });    excludeTable = new JTable(excludeModel);    JMeterUtils.applyHiDPI(excludeTable);    excludeTable.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());    excludeTable.setPreferredScrollableViewportSize(new Dimension(80, 80));    JPanel panel = new JPanel(new BorderLayout());    panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), JMeterUtils.getResString(    "patterns_to_exclude")));    panel.add(new JScrollPane(excludeTable), BorderLayout.CENTER);    panel.add(createTableButtonPanel(ADD_EXCLUDE, DELETE_EXCLUDE, ADD_TO_EXCLUDE_FROM_CLIPBOARD, ADD_SUGGESTED_EXCLUDES), BorderLayout.SOUTH);    return panel;}
0
private JPanel createNotifyListenersPanel()
{    JPanel panel = new JPanel();    panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), JMeterUtils.getResString(    "notify_child_listeners_fr")));        notifyChildSamplerListenerOfFilteredSamplersCB = new JCheckBox(JMeterUtils.getResString("notify_child_listeners_fr"));    notifyChildSamplerListenerOfFilteredSamplersCB.setSelected(false);    notifyChildSamplerListenerOfFilteredSamplersCB.addActionListener(this);    notifyChildSamplerListenerOfFilteredSamplersCB.setActionCommand(ENABLE_RESTART);    panel.add(notifyChildSamplerListenerOfFilteredSamplersCB);    return panel;}
0
private JPanel createTableButtonPanel(String addCommand, String deleteCommand, String copyFromClipboard, String addSuggestedExcludes)
{    JPanel buttonPanel = new JPanel();        JButton addButton = new JButton(JMeterUtils.getResString("add"));    addButton.setActionCommand(addCommand);    addButton.addActionListener(this);    buttonPanel.add(addButton);        JButton deleteButton = new JButton(JMeterUtils.getResString("delete"));    deleteButton.setActionCommand(deleteCommand);    deleteButton.addActionListener(this);    buttonPanel.add(deleteButton);    /**     * A button for adding new excludes/includes to the table from the clipboard.     */        JButton addFromClipboard = new JButton(JMeterUtils.getResString("add_from_clipboard"));    addFromClipboard.setActionCommand(copyFromClipboard);    addFromClipboard.addActionListener(this);    buttonPanel.add(addFromClipboard);    if (addSuggestedExcludes != null) {        /**         * A button for adding suggested excludes.         */                JButton addFromSuggestedExcludes = new JButton(JMeterUtils.getResString("add_from_suggested_excludes"));        addFromSuggestedExcludes.setActionCommand(addSuggestedExcludes);        addFromSuggestedExcludes.addActionListener(this);        buttonPanel.add(addFromSuggestedExcludes);    }    return buttonPanel;}
0
private void reinitializeTargetCombo()
{            targetNodes.removeActionListener(this);    targetNodesModel.removeAllElements();    GuiPackage gp = GuiPackage.getInstance();    JMeterTreeNode root;    if (gp != null) {        root = (JMeterTreeNode) GuiPackage.getInstance().getTreeModel().getRoot();        targetNodesModel.addElement(        new TreeNodeWrapper(null, JMeterUtils.getResString("use_recording_controller")));        buildNodesModel(root, "", 0);    }    TreeNodeWrapper choice = null;    for (int i = 0; i < targetNodesModel.getSize(); i++) {        choice = (TreeNodeWrapper) targetNodesModel.getElementAt(i);                if (        choice.getTreeNode() == model.getTarget()) {            break;        }    }        targetNodes.addActionListener(this);        targetNodesModel.setSelectedItem(choice);    }
1
private void buildNodesModel(JMeterTreeNode node, String parentName, int level)
{    String separator = " > ";    if (node != null) {        for (int i = 0; i < node.getChildCount(); i++) {            StringBuilder name = new StringBuilder();            JMeterTreeNode cur = (JMeterTreeNode) node.getChildAt(i);            TestElement te = cur.getTestElement();            if (te instanceof Controller) {                name.append(parentName);                name.append(cur.getName());                TreeNodeWrapper tnw = new TreeNodeWrapper(cur, name.toString());                targetNodesModel.addElement(tnw);                name.append(separator);                buildNodesModel(cur, name.toString(), level + 1);            } else if (te instanceof TestPlan) {                name.append(cur.getName());                name.append(separator);                buildNodesModel(cur, name.toString(), 0);            }                }    }}
0
public JPopupMenu createPopupMenu()
{    JPopupMenu pop = new JPopupMenu();        JMenu addMenu = new JMenu(JMeterUtils.getResString("add"));    addMenu.add(MenuFactory.makeMenu(MenuFactory.TIMERS, ActionNames.ADD));    addMenu.add(MenuFactory.makeMenu(MenuFactory.PRE_PROCESSORS, ActionNames.ADD));    addMenu.add(MenuFactory.makeMenu(MenuFactory.LISTENERS, ActionNames.ADD));    pop.add(addMenu);    MenuFactory.addEditMenu(pop, true);    MenuFactory.addFileMenu(pop);    return pop;}
0
 int getHTTPSampleNamingMode()
{    return httpSampleNamingMode.getSelectedIndex();}
0
 String getProxyPauseHTTPSample()
{    return proxyPauseHTTPSample.getText();}
0
public String getPrefixHTTPSampleName()
{    return prefixHTTPSampleName.getText();}
0
 void setHTTPSampleNamingMode(int selectedIndex)
{    httpSampleNamingMode.setSelectedIndex(selectedIndex);    model.setHTTPSampleNamingMode(httpSampleNamingMode.getSelectedIndex());}
0
 void setProxyPauseHTTPSample(String text)
{    proxyPauseHTTPSample.setText(text);    model.setProxyPauseHTTPSample(text);}
0
 void setPrefixHTTPSampleName(String text)
{    prefixHTTPSampleName.setText(text);    model.setPrefixHTTPSampleName(text);}
0
protected JRootPane createRootPane()
{    JRootPane rootPane = new JRootPane();        Action escapeAction = new AbstractAction("ESCAPE") {        private static final long serialVersionUID = -6543764044868772971L;        @Override        public void actionPerformed(ActionEvent actionEvent) {            setVisible(false);        }    };    ActionMap actionMap = rootPane.getActionMap();    actionMap.put(escapeAction.getValue(Action.NAME), escapeAction);    InputMap inputMap = rootPane.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);    inputMap.put(KeyStrokes.ESC, escapeAction.getValue(Action.NAME));    return rootPane;}
0
public void actionPerformed(ActionEvent actionEvent)
{    setVisible(false);}
0
private void init()
{        this.getContentPane().setLayout(new BorderLayout(10, 10));    DefaultComboBoxModel<String> choice = new DefaultComboBoxModel<>();        choice.addElement(JMeterUtils.getResString("sample_name_prefix"));        choice.addElement(JMeterUtils.getResString("sample_name_transaction"));    httpSampleNamingMode = new JComboBox<>(choice);    httpSampleNamingMode.setName(ProxyControlGui.HTTP_SAMPLER_NAMING_MODE);    httpSampleNamingMode.addItemListener(this);    prefixHTTPSampleName = new JTextField(20);    prefixHTTPSampleName.addKeyListener(this);    prefixHTTPSampleName.setName(ProxyControlGui.PREFIX_HTTP_SAMPLER_NAME);    proxyPauseHTTPSample = new JTextField(10);    proxyPauseHTTPSample.addKeyListener(this);    proxyPauseHTTPSample.setName(ProxyControlGui.PROXY_PAUSE_HTTP_SAMPLER);    proxyPauseHTTPSample.setActionCommand(ProxyControlGui.ENABLE_RESTART);        JLabel labelProxyPause = new JLabel(JMeterUtils.getResString("proxy_pause_http_sampler"));    labelProxyPause.setLabelFor(proxyPauseHTTPSample);    GridBagLayout gridBagLayout = new GridBagLayout();    GridBagConstraints gbc = new GridBagConstraints();    gbc.anchor = GridBagConstraints.FIRST_LINE_START;    gbc.fill = GridBagConstraints.NONE;    gbc.gridheight = 1;    gbc.gridwidth = 1;    gbc.gridx = 0;    gbc.gridy = 0;    gbc.weightx = 1;    gbc.weighty = 1;    JPanel panel = new JPanel(gridBagLayout);    panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("proxy_sampler_settings")));    panel.add(httpSampleNamingMode, gbc.clone());    gbc.gridx++;    gbc.weightx = 3;    gbc.fill = GridBagConstraints.HORIZONTAL;    panel.add(prefixHTTPSampleName, gbc.clone());    gbc.gridx = 0;    gbc.gridy++;    panel.add(labelProxyPause, gbc.clone());    gbc.gridx++;    gbc.weightx = 3;    gbc.fill = GridBagConstraints.HORIZONTAL;    panel.add(proxyPauseHTTPSample, gbc.clone());    this.getContentPane().add(panel, BorderLayout.CENTER);    String iconSize = JMeterUtils.getPropDefault(JMeterToolBar.TOOLBAR_ICON_SIZE, JMeterToolBar.DEFAULT_TOOLBAR_ICON_SIZE);    stop = recorderGui.createStopButton(iconSize);    stop.addActionListener(this);    GridLayout gridLayout = new GridLayout(1, 1);    JPanel panelStop = new JPanel(gridLayout);    panelStop.add(stop);    this.getContentPane().add(panelStop, BorderLayout.WEST);    this.pack();    this.setLocation(5, 10);    prefixHTTPSampleName.requestFocusInWindow();}
0
public void setVisible(boolean b)
{    super.setVisible(b);    stop.setEnabled(true);    prefixHTTPSampleName.requestFocusInWindow();    prefixHTTPSampleName.setText(recorderGui.getPrefixHTTPSampleName());    httpSampleNamingMode.setSelectedIndex(recorderGui.getHTTPSampleNamingMode());    proxyPauseHTTPSample.setText(recorderGui.getProxyPauseHTTPSample());    setAlwaysOnTop(b);}
0
public void itemStateChanged(ItemEvent e)
{    if (e.getSource() instanceof JComboBox) {        JComboBox combo = (JComboBox) e.getSource();        if (ProxyControlGui.HTTP_SAMPLER_NAMING_MODE.equals(combo.getName())) {            recorderGui.setHTTPSampleNamingMode(httpSampleNamingMode.getSelectedIndex());        }    } else {        recorderGui.enableRestart();    }}
0
public void keyPressed(KeyEvent e)
{}
0
public void keyTyped(KeyEvent e)
{}
0
public void keyReleased(KeyEvent e)
{    String fieldName = e.getComponent().getName();    if (fieldName.equals(ProxyControlGui.PREFIX_HTTP_SAMPLER_NAME)) {        recorderGui.setPrefixHTTPSampleName(prefixHTTPSampleName.getText());    } else if (fieldName.equals(ProxyControlGui.PROXY_PAUSE_HTTP_SAMPLER)) {        try {            Long.parseLong(proxyPauseHTTPSample.getText());        } catch (NumberFormatException nfe) {            int length = proxyPauseHTTPSample.getText().length();            if (length > 0) {                                JOptionPane.showMessageDialog(                this,                 JMeterUtils.getResString("proxy_settings_pause_error_digits"),                 JMeterUtils.getResString("proxy_settings_pause_error_invalid_data"), JOptionPane.WARNING_MESSAGE);                                proxyPauseHTTPSample.setText(proxyPauseHTTPSample.getText().substring(0, length - 1));            }        }        recorderGui.setProxyPauseHTTPSample(proxyPauseHTTPSample.getText());        recorderGui.enableRestart();    }}
0
public void actionPerformed(ActionEvent event)
{    recorderGui.stopRecorder();}
0
public static String formOk(String contentType, long contentLength)
{    StringBuilder out = new StringBuilder();    out.append(HTTP_PROTOCOL).append(" 200 Ok").append(CR);    out.append("Server: ").append(HTTP_SERVER).append(CR);    out.append("MIME-version: 1.0").append(CR);    if (0 < contentType.length()) {        out.append("Content-Type: ").append(contentType).append(CR);    } else {        out.append("Content-Type: text/html").append(CR);    }    if (0 != contentLength) {        out.append("Content-Length: ").append(contentLength).append(CR);    }    out.append(CR);    return out.toString();}
0
private static String formErrorBody(String error, String description)
{    StringBuilder out = new StringBuilder();        out.append("<HTML><HEAD><TITLE>");    out.append(error);    out.append("</TITLE></HEAD>");    out.append("<BODY><H2>").append(error).append("</H2>\n");    out.append("</P></H3>");    out.append(description);    out.append("</BODY></HTML>");    return out.toString();}
0
private static String formError(String error, String description)
{    /*         * A HTTP RESPONSE HEADER LOOKS LIKE:         *         * HTTP/1.0 200 OK Date: Wednesday, 02-Feb-94 23:04:12 GMT Server:         * NCSA/1.1 MIME-version: 1.0 Last-modified: Monday, 15-Nov-93 23:33:16         * GMT Content-Type: text/html Content-Length: 2345 \r\n         */    String body = formErrorBody(error, description);    return HTTP_PROTOCOL + " " + error + CR + "Server: " + HTTP_SERVER + CR + "MIME-version: 1.0" + CR + "Content-Type: text/html" + CR + "Content-Length: " + body.length() + CR + CR + body;}
0
public static String formCreated()
{    return formError("201 Created", "Object was created");}
0
public static String formAccepted()
{    return formError("202 Accepted", "Object checked in");}
0
public static String formPartial()
{    return formError("203 Partial", "Only partial document available");}
0
public static String formMoved()
{        return formError("301 Moved", "File has moved");}
0
public static String formFound()
{    return formError("302 Found", "Object was found");}
0
public static String formMethod()
{    return formError("303 Method unsupported", "Method unsupported");}
0
public static String formNotModified()
{    return formError("304 Not modified", "Use local copy");}
0
public static String formUnauthorized()
{    return formError("401 Unauthorized", "Unauthorized use of this service");}
0
public static String formPaymentNeeded()
{    return formError("402 Payment required", "Payment is required");}
0
public static String formForbidden()
{    return formError("403 Forbidden", "You need permission for this service");}
0
public static String formNotFound()
{    return formError("404 Not_found", "Requested object was not found");}
0
public static String formInternalError()
{    return formError("500 Internal server error", "Server broke");}
0
public static String formNotImplemented()
{    return formError("501 Method not implemented", "Service not implemented");}
0
public static String formNotImplemented(String reason)
{    return formError("501 Method not implemented", "Service not implemented. " + reason);}
0
public static String formOverloaded()
{    return formError("502 Server overloaded", "Try again latter");}
0
public static String formTimeout()
{    return formError("503 Gateway timeout", "The connection timed out");}
0
public static String formServerNotFound()
{    return formError("503 Gateway timeout", "The requested server was not found");}
0
public static String formNotAllowed()
{    return formError("403 Access Denied", "Access is not allowed");}
0
public byte[] parse(InputStream in) throws IOException
{    boolean inHeaders = true;    int readLength = 0;    int dataLength = 0;    boolean firstLine = true;    ByteArrayOutputStream clientRequest = new ByteArrayOutputStream();    ByteArrayOutputStream line = new ByteArrayOutputStream();    int x;    while ((inHeaders || readLength < dataLength) && ((x = in.read()) != -1)) {        line.write(x);        clientRequest.write(x);        if (firstLine && !CharUtils.isAscii((char) x)) {                        throw new IllegalArgumentException("Only ASCII supported in headers (perhaps SSL was used?)");        }        if (inHeaders && (byte) x == (byte) '\n') {                        if (line.size() < 3) {                inHeaders = false;                                firstLine = false;            }            final String reqLine = line.toString();            if (firstLine) {                parseFirstLine(reqLine);                firstLine = false;            } else {                                final int contentLen = parseLine(reqLine);                if (contentLen > 0) {                                        dataLength = contentLen;                }            }            if (log.isDebugEnabled()) {                            }            line.reset();        } else if (!inHeaders) {            readLength++;        }    }        rawPostData = line.toByteArray();    if (log.isDebugEnabled()) {            }    return clientRequest.toByteArray();}
1
private void parseFirstLine(String firstLine)
{    this.firstLine = firstLine;    if (log.isDebugEnabled()) {            }    StringTokenizer tz = new StringTokenizer(firstLine);    method = getToken(tz).toUpperCase(java.util.Locale.ENGLISH);    url = getToken(tz);    String version = getToken(tz);    if (log.isDebugEnabled()) {                    }        if (getMethod().startsWith(HTTPConstants.CONNECT)) {        paramHttps = url;                return;    }    /* The next line looks odd, but proxied HTTP requests look like:         * GET http://www.apache.org/foundation/ HTTP/1.1         * i.e. url starts with "http:", not "/"         * whereas HTTPS proxy requests look like:         * CONNECT www.google.co.uk:443 HTTP/1.1         * followed by         * GET /?gws_rd=cr HTTP/1.1         */    if (url.startsWith("/")) {                        url = HTTPS + "://" + paramHttps + url;    }        if (HTTPSamplerFactory.IMPL_JAVA.equals(httpSamplerName)) {                return;    }    try {                URI testCleanUri = new URI(url);        if (log.isDebugEnabled()) {                    }    } catch (URISyntaxException e) {                try {            String escapedUrl = ConversionUtils.escapeIllegalURLCharacters(url);            if (log.isDebugEnabled()) {                            }            url = escapedUrl;        } catch (Exception e1) {                    }    }    }
1
private int parseLine(String nextLine)
{    int colon = nextLine.indexOf(':');    if (colon <= 0) {                return 0;    }    String name = nextLine.substring(0, colon).trim();    String value = nextLine.substring(colon + 1).trim();    headers.put(name.toLowerCase(java.util.Locale.ENGLISH), new Header(name, value));    if (name.equalsIgnoreCase(CONTENT_LENGTH)) {        return Integer.parseInt(value);    }    return 0;}
0
private HeaderManager createHeaderManager()
{    HeaderManager manager = new HeaderManager();    for (Map.Entry<String, Header> entry : headers.entrySet()) {        final String key = entry.getKey();        if (!key.equals(PROXY_CONNECTION) && !key.equals(CONTENT_LENGTH) && !key.equalsIgnoreCase(HTTPConstants.HEADER_CONNECTION)) {            manager.add(entry.getValue());        }    }        manager.setName(JMeterUtils.getResString("header_manager_title"));    manager.setProperty(TestElement.TEST_CLASS, HeaderManager.class.getName());    manager.setProperty(TestElement.GUI_CLASS, HeaderPanel.class.getName());    return manager;}
0
public HeaderManager getHeaderManager()
{    if (headerManager == null) {        headerManager = createHeaderManager();    }    return headerManager;}
0
public String getContentType()
{    Header contentTypeHeader = headers.get(CONTENT_TYPE);    if (contentTypeHeader != null) {        return contentTypeHeader.getValue();    }    return null;}
0
private boolean isMultipart(String contentType)
{    return contentType != null && contentType.startsWith(HTTPConstants.MULTIPART_FORM_DATA);}
0
public MultipartUrlConfig getMultipartConfig(String contentType)
{    if (isMultipart(contentType)) {                String boundaryString = contentType.substring(contentType.toLowerCase(java.util.Locale.ENGLISH).indexOf("boundary=") + "boundary=".length());        return new MultipartUrlConfig(boundaryString);    }    return null;}
0
public String serverName()
{        String str = url;        int i = str.indexOf("//");    if (i > 0) {        str = str.substring(i + 2);    }            i = str.indexOf('/');    if (0 < i) {        str = str.substring(0, i);    }            i = str.lastIndexOf(':');    if (0 < i) {        str = str.substring(0, i);    }        if (str.startsWith("[") && str.endsWith("]")) {        return str.substring(1, str.length() - 1);    }    return str;}
0
public int serverPort()
{    String str = url;        int i = str.indexOf("//");    if (i > 0) {        str = str.substring(i + 2);    }        i = str.indexOf('/');    if (0 < i) {        str = str.substring(0, i);    }        i = str.lastIndexOf(':');    if (0 < i) {        return Integer.parseInt(str.substring(i + 1).trim());    }    return HTTPSamplerBase.UNSPECIFIED_PORT;}
0
public String getPath()
{    String str = url;    int i = str.indexOf("//");    if (i > 0) {        str = str.substring(i + 2);    }    i = str.indexOf('/');    if (i < 0) {        return "";    }    return str.substring(i);}
0
public String getUrl()
{    return url;}
0
public String getMethod()
{    return method;}
0
public String getFirstLine()
{    return firstLine;}
0
private String getToken(StringTokenizer tk)
{    if (tk.hasMoreTokens()) {        return tk.nextToken();    }        return "";}
0
public String getUrlWithoutQuery(URL url)
{    String fullUrl = url.toString();    String urlWithoutQuery = fullUrl;    String query = url.getQuery();    if (query != null) {                urlWithoutQuery = urlWithoutQuery.substring(0, urlWithoutQuery.length() - query.length() - 1);    }    return urlWithoutQuery;}
0
public String getHttpSamplerName()
{    return httpSamplerName;}
0
public byte[] getRawPostData()
{    return rawPostData;}
0
public String getProtocol(HTTPSamplerBase sampler)
{    if (url.contains("//")) {        String protocol = url.substring(0, url.indexOf(':'));        if (log.isDebugEnabled()) {                    }        return protocol;    } else if (sampler.getPort() == HTTPConstants.DEFAULT_HTTPS_PORT) {        if (log.isDebugEnabled()) {                    }        return HTTPS;    } else {        if (log.isDebugEnabled()) {                    }        return HTTP;    }}
1
public String getPrefix()
{    return prefix;}
0
public int getHttpSampleNameMode()
{    return httpSampleNameMode;}
0
 void configure(Socket clientSocket, ProxyControl target, Map<String, String> pageEncodings, Map<String, String> formEncodings)
{    this.target = target;    this.clientSocket = clientSocket;    this.captureHttpHeaders = target.getCaptureHttpHeaders();    this.pageEncodings = pageEncodings;    this.formEncodings = formEncodings;    this.port = "[" + clientSocket.getPort() + "] ";    this.keyStore = target.getKeyStore();    this.keyPassword = target.getKeyPassword();}
0
public void run()
{        String httpSamplerName = target.getSamplerTypeName();    HttpRequestHdr request = new HttpRequestHdr(target.getPrefixHTTPSampleName(), httpSamplerName, target.getHTTPSampleNamingMode());    SampleResult result = null;    HeaderManager headers = null;    HTTPSamplerBase sampler = null;    final boolean isDebug = log.isDebugEnabled();        SamplerCreator samplerCreator = null;    try {        JMeterContextService.getContext().setRecording(true);                byte[] ba = request.parse(new BufferedInputStream(clientSocket.getInputStream()));        if (ba.length == 0) {                                    throw new JMeterException();        }        if (isDebug) {                                }                OutputStream outStreamClient = clientSocket.getOutputStream();        if ((request.getMethod().startsWith(HTTPConstants.CONNECT)) && (outStreamClient != null)) {                                    outStreamClient.write(            "HTTP/1.0 200 OK\r\n\r\n".getBytes(SampleResult.DEFAULT_HTTP_ENCODING));            outStreamClient.flush();                                    String[] param = request.getUrl().split(":");            if (param.length == 2) {                                clientSocket = startSSL(clientSocket, param[0]);            } else {                                                                throw new JMeterException();            }                        try {                ba = request.parse(new BufferedInputStream(clientSocket.getInputStream()));            } catch (IOException ioe) {                                                final String url = " for '" + param[0] + "'";                                                result = generateErrorResult(result, request, ioe, "\n**ensure browser is set to accept the JMeter proxy certificate**");                                throw new JMeterException();            }            if (isDebug) {                                            }            if (ba.length == 0) {                                                throw new JMeterException();            }        }        samplerCreator = SAMPLERFACTORY.getSamplerCreator(request, pageEncodings, formEncodings);        sampler = samplerCreator.createAndPopulateSampler(request, pageEncodings, formEncodings);        sampler.setUseKeepAlive(false);        /*             * Create a Header Manager to ensure that the browsers headers are             * captured and sent to the server             */        headers = request.getHeaderManager();        sampler.setHeaderManager(headers);                sampler.threadStarted();        if (isDebug) {                    }        result = sampler.sample();                        String pageEncoding = addPageEncoding(result);        addFormEncodings(result, pageEncoding);        writeToClient(result, new BufferedOutputStream(clientSocket.getOutputStream()));        samplerCreator.postProcessSampler(sampler, result);    } catch (JMeterException jme) {        } catch (UnknownHostException uhe) {                writeErrorToClient(HttpReplyHdr.formServerNotFound());                result = generateErrorResult(result, request, uhe);    } catch (IllegalArgumentException e) {                writeErrorToClient(HttpReplyHdr.formNotImplemented("Probably used https instead of http. " + "To record https requests, see " + "<a href=\"http://jmeter.apache.org/usermanual/component_reference.html#HTTP(S)_Test_Script_Recorder\">" + "HTTP(S) Test Script Recorder documentation</a>"));                result = generateErrorResult(result, request, e);    } catch (Exception e) {                writeErrorToClient(HttpReplyHdr.formInternalError());                result = generateErrorResult(result, request, e);    } finally {        if (sampler != null && isDebug) {                    }        /*             * We don't want to store any cookies in the generated test plan             */        if (headers != null) {                        headers.removeHeaderNamed(HTTPConstants.HEADER_COOKIE);                        for (String hdr : HEADERS_TO_REMOVE) {                headers.removeHeaderNamed(hdr);            }        }        if (        result != null) {            List<TestElement> children = new ArrayList<>();            if (captureHttpHeaders) {                children.add(headers);            }            if (samplerCreator != null) {                children.addAll(samplerCreator.createChildren(sampler, result));            }            target.deliverSampler(sampler, children.toArray(new TestElement[children.size()]), result);        }        try {            clientSocket.close();        } catch (Exception e) {                    }        if (sampler != null) {                        sampler.threadFinished();        }        JMeterContextService.getContext().setRecording(false);    }}
1
private SSLSocketFactory getSSLSocketFactory(String host)
{    if (keyStore == null) {                return null;    }    final String hashAlias;    final String keyAlias;    switch(ProxyControl.KEYSTORE_MODE) {        case DYNAMIC_KEYSTORE:            try {                                keyStore = target.getKeyStore();                String alias = getDomainMatch(keyStore, host);                if (alias == null) {                    hashAlias = host;                    keyAlias = host;                    keyStore = target.updateKeyStore(port, keyAlias);                } else if (alias.equals(host)) {                                        hashAlias = host;                    keyAlias = host;                } else {                                        hashAlias = alias;                    keyAlias = alias;                }            } catch (IOException | GeneralSecurityException e) {                                return null;            }            break;        case JMETER_KEYSTORE:            hashAlias = keyAlias = ProxyControl.JMETER_SERVER_ALIAS;            break;        case USER_KEYSTORE:            hashAlias = keyAlias = ProxyControl.CERT_ALIAS;            break;        default:            throw new IllegalStateException("Impossible case: " + ProxyControl.KEYSTORE_MODE);    }    synchronized (HOST2SSL_SOCK_FAC) {        final SSLSocketFactory sslSocketFactory = HOST2SSL_SOCK_FAC.get(hashAlias);        if (sslSocketFactory != null) {                        return sslSocketFactory;        }        try {            SSLContext sslcontext = SSLContext.getInstance(SSLCONTEXT_PROTOCOL);            sslcontext.init(getWrappedKeyManagers(keyAlias), null, null);            SSLSocketFactory sslFactory = sslcontext.getSocketFactory();            HOST2SSL_SOCK_FAC.put(hashAlias, sslFactory);                        return sslFactory;        } catch (GeneralSecurityException e) {                    } catch (IOException e) {                    }        return null;    }}
1
private String getDomainMatch(KeyStore keyStore, String host) throws KeyStoreException
{    if (keyStore.containsAlias(host)) {        return host;    }        String[] parts = host.split("\\.");                StringBuilder sb = new StringBuilder("*");    for (int j = 1; j < parts.length; j++) {                sb.append('.');        sb.append(parts[j]);    }    String alias = sb.toString();    if (keyStore.containsAlias(alias)) {        return alias;    }    return null;}
0
private KeyManager[] getWrappedKeyManagers(final String keyAlias) throws GeneralSecurityException, IOException
{    if (!keyStore.containsAlias(keyAlias)) {        throw new IOException("Keystore does not contain alias " + keyAlias);    }    KeyManagerFactory kmf = KeyManagerFactory.getInstance(KEYMANAGERFACTORY);    kmf.init(keyStore, keyPassword.toCharArray());    final KeyManager[] keyManagers = kmf.getKeyManagers();        final int keyManagerCount = keyManagers.length;    final KeyManager[] wrappedKeyManagers = new KeyManager[keyManagerCount];    for (int i = 0; i < keyManagerCount; i++) {        wrappedKeyManagers[i] = new ServerAliasKeyManager(keyManagers[i], keyAlias);    }    return wrappedKeyManagers;}
0
private Socket startSSL(Socket sock, String host) throws IOException
{    SSLSocketFactory sslFactory = getSSLSocketFactory(host);    SSLSocket secureSocket;    if (sslFactory != null) {        try {            secureSocket = (SSLSocket) sslFactory.createSocket(sock, sock.getInetAddress().getHostName(), sock.getPort(), true);            secureSocket.setUseClientMode(false);            if (log.isDebugEnabled()) {                            }            return secureSocket;        } catch (IOException e) {                        throw e;        }    } else {                throw new IOException("Unable to negotiate SSL transaction, no keystore?");    }}
1
private SampleResult generateErrorResult(SampleResult result, HttpRequestHdr request, Exception e)
{    return generateErrorResult(result, request, e, "");}
0
private static SampleResult generateErrorResult(SampleResult result, HttpRequestHdr request, Exception e, String msg)
{    if (result == null) {        result = new SampleResult();        ByteArrayOutputStream text = new ByteArrayOutputStream(200);                e.printStackTrace(new PrintStream(text));        result.setResponseData(text.toByteArray());        result.setSamplerData(request.getFirstLine());        result.setSampleLabel(request.getUrl());    }    result.setSuccessful(false);    result.setResponseMessage(e.getMessage() + msg);    return result;}
0
private void writeToClient(SampleResult res, OutputStream out) throws IOException
{    try {        String responseHeaders = messageResponseHeaders(res);        out.write(responseHeaders.getBytes(SampleResult.DEFAULT_HTTP_ENCODING));        out.write(CRLF_BYTES);        out.write(res.getResponseData());        out.flush();            } catch (IOException e) {                throw e;    } finally {        try {            out.close();        } catch (Exception ex) {                    }    }}
1
private String messageResponseHeaders(SampleResult res)
{    String headers = res.getResponseHeaders();        String[] headerLines = headers.split(NEW_LINE, 0);    int contentLengthIndex = -1;    boolean fixContentLength = false;    for (int i = 0; i < headerLines.length; i++) {        String line = headerLines[i];                String[] parts = line.split(":\\s+", 2);        if (parts.length == 2) {            if (HTTPConstants.TRANSFER_ENCODING.equalsIgnoreCase(parts[0])) {                                headerLines[i] = null;                continue;            }            if (HTTPConstants.HEADER_CONTENT_ENCODING.equalsIgnoreCase(parts[0]) && (HTTPConstants.ENCODING_GZIP.equalsIgnoreCase(parts[1]) || HTTPConstants.ENCODING_DEFLATE.equalsIgnoreCase(parts[1]) || HTTPConstants.ENCODING_BROTLI.equalsIgnoreCase(parts[1]))) {                                headerLines[i] = null;                fixContentLength = true;                continue;            }            if (HTTPConstants.HEADER_CONTENT_LENGTH.equalsIgnoreCase(parts[0])) {                contentLengthIndex = i;            }        }    }    if (fixContentLength && contentLengthIndex >= 0) {                headerLines[contentLengthIndex] = HTTPConstants.HEADER_CONTENT_LENGTH + ": " + res.getResponseData().length;    }    StringBuilder sb = new StringBuilder(headers.length());    for (String line : headerLines) {        if (line != null) {            sb.append(line).append(CRLF_STRING);        }    }    return sb.toString();}
0
private void writeErrorToClient(String message)
{    try {        OutputStream sockOut = clientSocket.getOutputStream();        DataOutputStream out = new DataOutputStream(sockOut);        out.writeBytes(message);        out.flush();    } catch (Exception e) {            }}
1
private String addPageEncoding(SampleResult result)
{    String pageEncoding = null;    try {        pageEncoding = ConversionUtils.getEncodingFromContentType(result.getContentType());    } catch (IllegalCharsetNameException ex) {            }    if (pageEncoding != null) {        String urlWithoutQuery = getUrlWithoutQuery(result.getURL());        pageEncodings.put(urlWithoutQuery, pageEncoding);    }    return pageEncoding;}
1
private void addFormEncodings(SampleResult result, String pageEncoding)
{    FormCharSetFinder finder = new FormCharSetFinder();    if (SampleResult.isBinaryType(result.getContentType())) {        if (log.isDebugEnabled()) {                    }                return;    }    try {        finder.addFormActionsAndCharSet(result.getResponseDataAsString(), formEncodings, pageEncoding);    } catch (HTMLParseException parseException) {        if (log.isDebugEnabled()) {                    }    }}
1
private String getUrlWithoutQuery(URL url)
{    String fullUrl = url.toString();    String urlWithoutQuery = fullUrl;    String query = url.getQuery();    if (query != null) {                urlWithoutQuery = urlWithoutQuery.substring(0, urlWithoutQuery.length() - query.length() - 1);    }    return urlWithoutQuery;}
0
public void setNonGuiTreeModel(JMeterTreeModel treeModel)
{    this.nonGuiTreeModel = treeModel;}
0
public void setPort(int port)
{    this.setProperty(new IntegerProperty(PORT, port));}
0
public void setPort(String port)
{    setProperty(PORT, port);}
0
public void setSslDomains(String domains)
{    setProperty(DOMAINS, domains, "");}
0
public String getSslDomains()
{    return getPropertyAsString(DOMAINS, "");}
0
public void setCaptureHttpHeaders(boolean capture)
{    setProperty(new BooleanProperty(CAPTURE_HTTP_HEADERS, capture));}
0
public void setGroupingMode(int grouping)
{    this.groupingMode = grouping;    setProperty(new IntegerProperty(GROUPING_MODE, grouping));}
0
public void setAssertions(boolean b)
{    addAssertions = b;    setProperty(new BooleanProperty(ADD_ASSERTIONS, b));}
0
public void setSamplerTypeName(String samplerTypeName)
{    setProperty(new StringProperty(SAMPLER_TYPE_NAME, samplerTypeName));}
0
public void setSamplerRedirectAutomatically(boolean b)
{    samplerRedirectAutomatically = b;    setProperty(new BooleanProperty(SAMPLER_REDIRECT_AUTOMATICALLY, b));}
0
public void setSamplerFollowRedirects(boolean b)
{    samplerFollowRedirects = b;    setProperty(new BooleanProperty(SAMPLER_FOLLOW_REDIRECTS, b));}
0
public void setUseKeepAlive(boolean b)
{    useKeepAlive = b;    setProperty(new BooleanProperty(USE_KEEPALIVE, b));}
0
public void setSamplerDownloadImages(boolean b)
{    samplerDownloadImages = b;    setProperty(new BooleanProperty(SAMPLER_DOWNLOAD_IMAGES, b));}
0
public void setHTTPSampleNamingMode(int httpNamingMode)
{    setProperty(new IntegerProperty(HTTP_SAMPLER_NAMING_MODE, httpNamingMode));}
0
public String getDefaultEncoding()
{    return getPropertyAsString(DEFAULT_ENCODING_PROPERTY, StandardCharsets.UTF_8.name());}
0
public void setDefaultEncoding(String defaultEncoding)
{    setProperty(DEFAULT_ENCODING_PROPERTY, defaultEncoding);}
0
public void setPrefixHTTPSampleName(String prefixHTTPSampleName)
{    setProperty(PREFIX_HTTP_SAMPLER_NAME, prefixHTTPSampleName);}
0
public void setProxyPauseHTTPSample(String proxyPauseHTTPSample)
{    setProperty(PROXY_PAUSE_HTTP_SAMPLER, proxyPauseHTTPSample);}
0
public void setNotifyChildSamplerListenerOfFilteredSamplers(boolean b)
{    notifyChildSamplerListenersOfFilteredSamples = b;    setProperty(new BooleanProperty(NOTIFY_CHILD_SAMPLER_LISTENERS_FILTERED, b));}
0
public void setIncludeList(Collection<String> list)
{    setProperty(new CollectionProperty(INCLUDE_LIST, new HashSet<>(list)));}
0
public void setExcludeList(Collection<String> list)
{    setProperty(new CollectionProperty(EXCLUDE_LIST, new HashSet<>(list)));}
0
public void setRegexMatch(boolean b)
{    regexMatch = b;    setProperty(new BooleanProperty(REGEX_MATCH, b));}
0
public void setContentTypeExclude(String contentTypeExclude)
{    setProperty(new StringProperty(CONTENT_TYPE_EXCLUDE, contentTypeExclude));}
0
public void setContentTypeInclude(String contentTypeInclude)
{    setProperty(new StringProperty(CONTENT_TYPE_INCLUDE, contentTypeInclude));}
0
public boolean getAssertions()
{    return getPropertyAsBoolean(ADD_ASSERTIONS);}
0
public int getGroupingMode()
{    return getPropertyAsInt(GROUPING_MODE);}
0
public int getPort()
{    return getPropertyAsInt(PORT);}
0
public String getPortString()
{    return getPropertyAsString(PORT);}
0
public int getDefaultPort()
{    return DEFAULT_PORT;}
0
public boolean getCaptureHttpHeaders()
{    return getPropertyAsBoolean(CAPTURE_HTTP_HEADERS);}
0
public String getSamplerTypeName()
{        String type = getPropertyAsString(SAMPLER_TYPE_NAME);    if (SAMPLER_TYPE_HTTP_SAMPLER_JAVA.equals(type)) {        type = HTTPSamplerFactory.IMPL_JAVA;    } else if (SAMPLER_TYPE_HTTP_SAMPLER_HC3_1.equals(type)) {        type = HTTPSamplerFactory.IMPL_HTTP_CLIENT4;    } else if (SAMPLER_TYPE_HTTP_SAMPLER_HC4.equals(type)) {        type = HTTPSamplerFactory.IMPL_HTTP_CLIENT4;    }    return type;}
0
public boolean getSamplerRedirectAutomatically()
{    return getPropertyAsBoolean(SAMPLER_REDIRECT_AUTOMATICALLY, false);}
0
public boolean getSamplerFollowRedirects()
{    return getPropertyAsBoolean(SAMPLER_FOLLOW_REDIRECTS, true);}
0
public boolean getUseKeepalive()
{    return getPropertyAsBoolean(USE_KEEPALIVE, true);}
0
public boolean getSamplerDownloadImages()
{    return getPropertyAsBoolean(SAMPLER_DOWNLOAD_IMAGES, false);}
0
public int getHTTPSampleNamingMode()
{    return getPropertyAsInt(HTTP_SAMPLER_NAMING_MODE);}
0
public String getPrefixHTTPSampleName()
{    return getPropertyAsString(PREFIX_HTTP_SAMPLER_NAME);}
0
public String getProxyPauseHTTPSample()
{    return getPropertyAsString(PROXY_PAUSE_HTTP_SAMPLER);}
0
public boolean getNotifyChildSamplerListenerOfFilteredSamplers()
{    return getPropertyAsBoolean(NOTIFY_CHILD_SAMPLER_LISTENERS_FILTERED, true);}
0
public boolean getRegexMatch()
{    return getPropertyAsBoolean(REGEX_MATCH, false);}
0
public String getContentTypeExclude()
{    return getPropertyAsString(CONTENT_TYPE_EXCLUDE);}
0
public String getContentTypeInclude()
{    return getPropertyAsString(CONTENT_TYPE_INCLUDE);}
0
public JMeterTreeModel getNonGuiTreeModel()
{    return nonGuiTreeModel;}
0
public void addConfigElement(ConfigElement config)
{}
0
public void startProxy() throws IOException
{    try {        initKeyStore();    } catch (GeneralSecurityException e) {                throw new IOException("Could not create keystore", e);    } catch (IOException e) {                        throw e;    }    notifyTestListenersOfStart();    try {        server = new Daemon(getPort(), this);        if (getProxyPauseHTTPSample().isEmpty()) {            sampleGap = JMeterUtils.getPropDefault("proxy.pause", 5000);        } else {            sampleGap = Long.parseLong(getProxyPauseHTTPSample().trim());        }        server.start();        if (GuiPackage.getInstance() != null) {            GuiPackage.getInstance().register(server);        }    } catch (IOException e) {                throw e;    }}
1
public void addExcludedPattern(String pattern)
{    getExcludePatterns().addItem(pattern);}
0
public CollectionProperty getExcludePatterns()
{    return (CollectionProperty) getProperty(EXCLUDE_LIST);}
0
public void addIncludedPattern(String pattern)
{    getIncludePatterns().addItem(pattern);}
0
public CollectionProperty getIncludePatterns()
{    return (CollectionProperty) getProperty(INCLUDE_LIST);}
0
public void clearExcludedPatterns()
{    getExcludePatterns().clear();}
0
public void clearIncludedPatterns()
{    getIncludePatterns().clear();}
0
public JMeterTreeNode getTarget()
{    return target;}
0
public void setTarget(JMeterTreeNode target)
{    this.target = target;}
0
public synchronized void deliverSampler(final HTTPSamplerBase sampler, final TestElement[] testElements, final SampleResult result)
{    boolean notifySampleListeners = true;    if (sampler != null) {        if (USE_REDIRECT_DISABLING && (samplerRedirectAutomatically || samplerFollowRedirects) && result instanceof HTTPSampleResult) {            final HTTPSampleResult httpSampleResult = (HTTPSampleResult) result;            final String urlAsString = httpSampleResult.getUrlAsString();            if (urlAsString.equals(LAST_REDIRECT)) {                                sampler.setEnabled(false);                sampler.setComment("Detected a redirect from the previous sample");            } else {                                                LAST_REDIRECT = null;            }            if (httpSampleResult.isRedirect()) {                                if (LAST_REDIRECT == null) {                    sampler.setComment("Detected the start of a redirect chain");                }                LAST_REDIRECT = httpSampleResult.getRedirectLocation();            } else {                LAST_REDIRECT = null;            }        }        if (filterContentType(result) && filterUrl(sampler)) {            JMeterTreeNode myTarget = findTargetControllerNode();                        @SuppressWarnings("unchecked")            Collection<ConfigTestElement> defaultConfigurations = (Collection<ConfigTestElement>) findApplicableElements(myTarget, ConfigTestElement.class, false);                        @SuppressWarnings("unchecked")            Collection<Arguments> userDefinedVariables = (Collection<Arguments>) findApplicableElements(myTarget, Arguments.class, true);            removeValuesFromSampler(sampler, defaultConfigurations);            replaceValues(sampler, testElements, userDefinedVariables);            sampler.setAutoRedirects(samplerRedirectAutomatically);            sampler.setFollowRedirects(samplerFollowRedirects);            sampler.setUseKeepAlive(useKeepAlive);            sampler.setImageParser(samplerDownloadImages);            Authorization authorization = createAuthorization(testElements, sampler);            if (authorization != null) {                setAuthorization(authorization, myTarget);            }            placeSampler(sampler, testElements, myTarget);        } else {            if (log.isDebugEnabled()) {                            }            notifySampleListeners = notifyChildSamplerListenersOfFilteredSamples;            result.setSampleLabel("[" + result.getSampleLabel() + "]");        }    }    if (notifySampleListeners) {                notifySampleListeners(new SampleEvent(result, "WorkBench"));    } else {            }}
1
private Authorization createAuthorization(final TestElement[] testElements, HTTPSamplerBase sampler)
{    Header authHeader;    Authorization authorization = null;        for (TestElement te : testElements) {        if (te instanceof HeaderManager) {                        @SuppressWarnings("unchecked")            List<TestElementProperty> headers = (ArrayList<TestElementProperty>) ((HeaderManager) te).getHeaders().getObjectValue();            for (Iterator<?> iterator = headers.iterator(); iterator.hasNext(); ) {                TestElementProperty tep = (TestElementProperty) iterator.next();                if (tep.getName().equals(HTTPConstants.HEADER_AUTHORIZATION)) {                                        authHeader = (Header) tep.getObjectValue();                    String headerValue = authHeader.getValue().trim();                                        String[] authHeaderContent = headerValue.split(" ");                    String authType;                    String authCredentialsBase64;                    if (authHeaderContent.length >= 2) {                        authType = authHeaderContent[0];                                                                        Mechanism mechanism;                        switch(authType) {                            case BEARER_AUTH:                                                                return null;                            case DIGEST_AUTH:                                mechanism = Mechanism.DIGEST;                                break;                            case BASIC_AUTH:                                mechanism = Mechanism.BASIC;                                break;                            default:                                mechanism = Mechanism.KERBEROS;                                break;                        }                        authCredentialsBase64 = authHeaderContent[1];                        authorization = new Authorization();                        try {                            authorization.setURL(sampler.getUrl().toExternalForm());                        } catch (MalformedURLException e) {                                                                                    authorization.setURL("${AUTH_BASE_URL}");                        }                        authorization.setMechanism(mechanism);                        if (BASIC_AUTH.equals(authType)) {                            String authCred = new String(Base64.decodeBase64(authCredentialsBase64));                                                        String[] loginPassword = authCred.split(":");                            if (loginPassword.length == 2) {                                authorization.setUser(loginPassword[0]);                                authorization.setPass(loginPassword[1]);                            } else {                                                                                                return null;                            }                        } else {                                                                                    authorization.setUser("${AUTH_LOGIN}");                                                        authorization.setPass("${AUTH_PASSWORD}");                        }                    }                                                            iterator.remove();                    break;                }            }        }    }    return authorization;}
1
public void stopProxy()
{    if (server != null) {        server.stopServer();        if (GuiPackage.getInstance() != null) {            GuiPackage.getInstance().unregister(server);        }        try {                        server.join(1000);        } catch (InterruptedException e) {                        Thread.currentThread().interrupt();        }        notifyTestListenersOfEnd();        server = null;    }}
0
public String[] getCertificateDetails()
{    if (isDynamicMode()) {        try {            X509Certificate caCert = (X509Certificate) keyStore.getCertificate(KeyToolUtils.getRootCAalias());            if (caCert == null) {                return new String[] { "Could not find certificate" };            }            return new String[] { caCert.getSubjectX500Principal().toString(), "Fingerprint(SHA1): " + JOrphanUtils.baToHexString(DigestUtils.sha1(caCert.getEncoded()), ' '), "Created: " + caCert.getNotBefore().toString() };        } catch (GeneralSecurityException e) {                        return new String[] { "Problem with root certificate", e.getMessage() };        }    }        return new String[0];}
1
 boolean filterUrl(HTTPSamplerBase sampler)
{    String domain = sampler.getDomain();    if (domain == null || domain.length() == 0) {        return false;    }    String url = generateMatchUrl(sampler);    CollectionProperty includePatterns = getIncludePatterns();    if (includePatterns.size() > 0 && !matchesPatterns(url, includePatterns)) {        return false;    }    CollectionProperty excludePatterns = getExcludePatterns();    if (excludePatterns.size() > 0 && matchesPatterns(url, excludePatterns)) {        return false;    }    return true;}
0
 boolean filterContentType(SampleResult result)
{    String includeExp = getContentTypeInclude();    String excludeExp = getContentTypeExclude();        if ((includeExp == null || includeExp.length() == 0) && (excludeExp == null || excludeExp.length() == 0)) {        return true;    }        String sampleContentType = result.getContentType();    if (sampleContentType == null || sampleContentType.length() == 0) {        if (log.isDebugEnabled()) {                    }        return true;    }    if (log.isDebugEnabled()) {            }        boolean matched = testPattern(includeExp, sampleContentType, true);    if (!matched) {        return false;    }        matched = testPattern(excludeExp, sampleContentType, false);    if (!matched) {        return false;    }    return true;}
1
private boolean testPattern(String expression, String sampleContentType, boolean expectedToMatch)
{    if (expression != null && expression.length() > 0) {        if (log.isDebugEnabled()) {                    }        Pattern pattern = null;        try {            pattern = JMeterUtils.getPatternCache().getPattern(expression, Perl5Compiler.READ_ONLY_MASK | Perl5Compiler.SINGLELINE_MASK);            if (JMeterUtils.getMatcher().contains(sampleContentType, pattern) != expectedToMatch) {                return false;            }        } catch (MalformedCachePatternException e) {                    }    }    return true;}
1
private void setAuthorization(Authorization authorization, JMeterTreeNode target)
{    JMeterTreeModel jmeterTreeModel = getJmeterTreeModel();    List<JMeterTreeNode> authManagerNodes = jmeterTreeModel.getNodesOfType(AuthManager.class);    if (authManagerNodes.isEmpty()) {        try {                        AuthManager authManager = newAuthorizationManager(authorization);            jmeterTreeModel.addComponent(authManager, target);        } catch (IllegalUserActionException e) {                    }    } else {        AuthManager authManager = (AuthManager) authManagerNodes.get(0).getTestElement();        authManager.addAuth(authorization);    }}
1
private JMeterTreeModel getJmeterTreeModel()
{    if (this.nonGuiTreeModel == null) {        return GuiPackage.getInstance().getTreeModel();    }    return this.nonGuiTreeModel;}
0
private void addAssertion(JMeterTreeModel model, JMeterTreeNode node) throws IllegalUserActionException
{    ResponseAssertion ra = new ResponseAssertion();    ra.setProperty(TestElement.GUI_CLASS, ASSERTION_GUI);        ra.setName(JMeterUtils.getResString("assertion_title"));    ra.setTestFieldResponseData();    model.addComponent(ra, node);}
0
private AuthManager newAuthorizationManager(Authorization authorization)
{    AuthManager authManager = new AuthManager();    authManager.setProperty(TestElement.GUI_CLASS, AUTH_PANEL);    authManager.setProperty(TestElement.TEST_CLASS, AUTH_MANAGER);    authManager.setName("HTTP Authorization Manager");    authManager.addAuth(authorization);    return authManager;}
0
private void addDivider(final JMeterTreeModel model, final JMeterTreeNode node)
{    final GenericController sc = new GenericController();    sc.setProperty(TestElement.GUI_CLASS, LOGIC_CONTROLLER_GUI);        sc.setName("-------------------");    safelyAddComponent(model, node, sc);}
0
private void safelyAddComponent(final JMeterTreeModel model, final JMeterTreeNode node, final GenericController controller)
{    JMeterUtils.runSafe(true, () -> {        try {            model.addComponent(controller, node);        } catch (IllegalUserActionException e) {                        throw new Error(e);        }    });}
1
private void addSimpleController(final JMeterTreeModel model, final JMeterTreeNode node, String name)
{    final GenericController sc = new GenericController();    sc.setProperty(TestElement.GUI_CLASS, LOGIC_CONTROLLER_GUI);    sc.setName(name);    safelyAddComponent(model, node, sc);}
0
private void addTransactionController(final JMeterTreeModel model, final JMeterTreeNode node, String name)
{    final TransactionController sc = new TransactionController();    sc.setIncludeTimers(false);    sc.setProperty(TestElement.GUI_CLASS, TRANSACTION_CONTROLLER_GUI);    sc.setName(name);    safelyAddComponent(model, node, sc);}
0
private void addTimers(JMeterTreeModel model, JMeterTreeNode node, long deltaT)
{    TestPlan variables = new TestPlan();        variables.addParameter("T", Long.toString(deltaT));    ValueReplacer replacer = new ValueReplacer(variables);    JMeterTreeNode mySelf = model.getNodeOf(this);    if (mySelf != null) {        Enumeration<?> children = mySelf.children();        while (children.hasMoreElements()) {            JMeterTreeNode templateNode = (JMeterTreeNode) children.nextElement();            if (templateNode.isEnabled()) {                TestElement template = templateNode.getTestElement();                if (template instanceof Timer) {                    TestElement timer = (TestElement) template.clone();                    try {                        timer.setComment("Recorded:" + Long.toString(deltaT) + "ms");                        replacer.undoReverseReplace(timer);                        model.addComponent(timer, node);                    } catch (InvalidVariableException | IllegalUserActionException e) {                                                                                                throw new Error(e);                    }                }            }        }    }}
1
private JMeterTreeNode findFirstNodeOfType(Class<?> type)
{    JMeterTreeModel treeModel = getJmeterTreeModel();    List<JMeterTreeNode> nodes = treeModel.getNodesOfType(type);    for (JMeterTreeNode node : nodes) {        if (node.isEnabled()) {            return node;        }    }    return null;}
0
public JMeterTreeNode findTargetControllerNode()
{    JMeterTreeNode myTarget = getTarget();    if (myTarget != null) {        return myTarget;    }    myTarget = findFirstNodeOfType(RecordingController.class);    if (myTarget != null) {        return myTarget;    }    myTarget = findFirstNodeOfType(AbstractThreadGroup.class);    if (myTarget != null) {        return myTarget;    }        return null;}
1
private Collection<?> findApplicableElements(JMeterTreeNode myTarget, Class<? extends TestElement> myClass, boolean ascending)
{    JMeterTreeModel treeModel = getJmeterTreeModel();    LinkedList<TestElement> elements = new LinkedList<>();        JMeterTreeNode node = treeModel.getNodeOf(this);    if (node != null) {        Enumeration<?> kids = node.children();        while (kids.hasMoreElements()) {            JMeterTreeNode subNode = (JMeterTreeNode) kids.nextElement();            if (subNode.isEnabled()) {                TestElement element = (TestElement) subNode.getUserObject();                if (myClass.isInstance(element)) {                    if (ascending) {                        elements.addFirst(element);                    } else {                        elements.add(element);                    }                }            }        }    }        for (JMeterTreeNode controller = myTarget; controller != null; controller = (JMeterTreeNode) controller.getParent()) {        Enumeration<?> kids = controller.children();        while (kids.hasMoreElements()) {            JMeterTreeNode subNode = (JMeterTreeNode) kids.nextElement();            if (subNode.isEnabled()) {                TestElement element = (TestElement) subNode.getUserObject();                if (myClass.isInstance(element)) {                                        if (ascending) {                        elements.addFirst(element);                    } else {                        elements.add(element);                    }                }                                if (element instanceof TestPlan) {                    TestPlan tp = (TestPlan) element;                    Arguments args = tp.getArguments();                    if (myClass.isInstance(args)) {                        if (ascending) {                            elements.addFirst(args);                        } else {                            elements.add(args);                        }                    }                }            }        }    }    return elements;}
1
private void placeSampler(HTTPSamplerBase sampler, TestElement[] testElements, JMeterTreeNode myTarget)
{    try {        final JMeterTreeModel treeModel = getJmeterTreeModel();        boolean firstInBatch = false;        long now = System.currentTimeMillis();        long deltaT = now - lastTime;        int cachedGroupingMode = groupingMode;        if (deltaT > sampleGap) {            if (!myTarget.isLeaf() && cachedGroupingMode == GROUPING_ADD_SEPARATORS) {                addDivider(treeModel, myTarget);            }            if (cachedGroupingMode == GROUPING_IN_SIMPLE_CONTROLLERS) {                addSimpleController(treeModel, myTarget, sampler.getName());            }            if (cachedGroupingMode == GROUPING_IN_TRANSACTION_CONTROLLERS) {                addTransactionController(treeModel, myTarget, sampler.getName());            }                        firstInBatch = true;        }        if (lastTime == 0) {                        deltaT = 0;        }        lastTime = now;        if (cachedGroupingMode == GROUPING_STORE_FIRST_ONLY) {            if (!firstInBatch) {                                return;            }                                    sampler.setFollowRedirects(true);            sampler.setImageParser(true);        }        if (cachedGroupingMode == GROUPING_IN_SIMPLE_CONTROLLERS || cachedGroupingMode == GROUPING_IN_TRANSACTION_CONTROLLERS) {                        for (int i = myTarget.getChildCount() - 1; i >= 0; i--) {                JMeterTreeNode c = (JMeterTreeNode) myTarget.getChildAt(i);                if (c.getTestElement() instanceof GenericController) {                    myTarget = c;                    break;                }            }        }        final long deltaTFinal = deltaT;        final boolean firstInBatchFinal = firstInBatch;        final JMeterTreeNode myTargetFinal = myTarget;        JMeterUtils.runSafe(true, () -> {            try {                final JMeterTreeNode newNode = treeModel.addComponent(sampler, myTargetFinal);                if (firstInBatchFinal) {                    if (addAssertions) {                        addAssertion(treeModel, newNode);                    }                    addTimers(treeModel, newNode, deltaTFinal);                }                if (testElements != null) {                    for (TestElement testElement : testElements) {                        if (isAddableTestElement(testElement)) {                            treeModel.addComponent(testElement, newNode);                        }                    }                }            } catch (IllegalUserActionException e) {                                JMeterUtils.reportErrorToUser(e.getMessage());            }        });    } catch (Exception e) {                JMeterUtils.reportErrorToUser(e.getMessage());    }}
1
private boolean isAddableTestElement(TestElement testElement)
{    if (hasCorrectInterface(testElement, addableInterfaces)) {        if (testElement.getProperty(TestElement.GUI_CLASS) != null) {            return true;        } else {                        return false;        }    } else {        return false;    }}
1
private boolean hasCorrectInterface(Object obj, Set<Class<?>> klasses)
{    for (Class<?> klass : klasses) {        if (klass != null && klass.isInstance(obj)) {            return true;        }    }    return false;}
0
private void removeValuesFromSampler(HTTPSamplerBase sampler, Collection<ConfigTestElement> configurations)
{    PropertyIterator props = sampler.propertyIterator();    while (props.hasNext()) {        JMeterProperty prop = props.next();        String name = prop.getName();        String value = prop.getStringValue();                if (name.equals(TestElement.ENABLED) || name.equals(TestElement.GUI_CLASS) || name.equals(TestElement.NAME) || name.equals(TestElement.TEST_CLASS)) {                        continue;        }        for (ConfigTestElement config : configurations) {            String configValue = config.getPropertyAsString(name);            if (configValue != null && configValue.length() > 0) {                if (configValue.equals(value)) {                                        sampler.setProperty(name, "");                }                                break;            }        }    }}
0
private String generateMatchUrl(HTTPSamplerBase sampler)
{    StringBuilder buf = new StringBuilder(sampler.getDomain());        buf.append(':');    buf.append(sampler.getPort());    buf.append(sampler.getPath());    if (sampler.getQueryString().length() > 0) {                buf.append('?');        buf.append(sampler.getQueryString());    }    return buf.toString();}
0
private boolean matchesPatterns(String url, CollectionProperty patterns)
{    for (JMeterProperty jMeterProperty : patterns) {        String item = jMeterProperty.getStringValue();        try {            Pattern pattern = JMeterUtils.getPatternCache().getPattern(item, Perl5Compiler.READ_ONLY_MASK | Perl5Compiler.SINGLELINE_MASK);            if (JMeterUtils.getMatcher().matches(url, pattern)) {                return true;            }        } catch (MalformedCachePatternException e) {                    }    }    return false;}
1
private void replaceValues(TestElement sampler, TestElement[] configs, Collection<Arguments> variables)
{        ValueReplacer replacer = new ValueReplacer();    for (Arguments variable : variables) {        final Map<String, String> map = variable.getArgumentsAsMap();                map.values().removeIf(""::equals);        replacer.addVariables(map);    }    try {        boolean cachedRegexpMatch = regexMatch;        replacer.reverseReplace(sampler, cachedRegexpMatch);        for (TestElement config : configs) {            if (config != null) {                replacer.reverseReplace(config, cachedRegexpMatch);            }        }    } catch (InvalidVariableException e) {            }}
1
private void notifySampleListeners(SampleEvent event)
{    JMeterTreeModel treeModel = getJmeterTreeModel();    JMeterTreeNode myNode = treeModel.getNodeOf(this);    if (myNode != null) {        Enumeration<?> kids = myNode.children();        while (kids.hasMoreElements()) {            JMeterTreeNode subNode = (JMeterTreeNode) kids.nextElement();            if (subNode.isEnabled()) {                TestElement testElement = subNode.getTestElement();                if (testElement instanceof SampleListener) {                    ((SampleListener) testElement).sampleOccurred(event);                }            }        }    }}
0
private void notifyTestListenersOfStart()
{    JMeterTreeModel treeModel = getJmeterTreeModel();    JMeterTreeNode myNode = treeModel.getNodeOf(this);    if (myNode != null) {        Enumeration<?> kids = myNode.children();        while (kids.hasMoreElements()) {            JMeterTreeNode subNode = (JMeterTreeNode) kids.nextElement();            if (subNode.isEnabled()) {                TestElement testElement = subNode.getTestElement();                if (testElement instanceof TestStateListener) {                    TestBeanHelper.prepare(testElement);                    ((TestStateListener) testElement).testStarted();                }            }        }    }}
0
private void notifyTestListenersOfEnd()
{    JMeterTreeModel treeModel = getJmeterTreeModel();    JMeterTreeNode myNode = treeModel.getNodeOf(this);    if (myNode != null) {        Enumeration<?> kids = myNode.children();        while (kids.hasMoreElements()) {            JMeterTreeNode subNode = (JMeterTreeNode) kids.nextElement();            if (subNode.isEnabled()) {                TestElement testElement = subNode.getTestElement();                if (testElement instanceof TestStateListener) {                                        ((TestStateListener) testElement).testEnded();                }            }        }    }}
0
public boolean canRemove()
{    return null == server;}
0
private void initKeyStore() throws IOException, GeneralSecurityException
{    switch(KEYSTORE_MODE) {        case DYNAMIC_KEYSTORE:            storePassword = getPassword();            keyPassword = getPassword();            initDynamicKeyStore();            break;        case JMETER_KEYSTORE:            storePassword = getPassword();            keyPassword = getPassword();            initJMeterKeyStore();            break;        case USER_KEYSTORE:                        storePassword = JMeterUtils.getPropDefault("proxy.cert.keystorepass", DEFAULT_PASSWORD);                        keyPassword = JMeterUtils.getPropDefault("proxy.cert.keypassword", DEFAULT_PASSWORD);                        initUserKeyStore();            break;        case NONE:            throw new IOException("Cannot find keytool application and no keystore was provided");        default:            throw new IllegalStateException("Impossible case: " + KEYSTORE_MODE);    }}
1
private void initUserKeyStore()
{    try {        keyStore = getKeyStore(storePassword.toCharArray());        X509Certificate caCert = (X509Certificate) keyStore.getCertificate(CERT_ALIAS);        if (caCert == null) {                        keyStore = null;        } else {            caCert.checkValidity(new Date(System.currentTimeMillis() + DateUtils.MILLIS_PER_DAY));        }    } catch (Exception e) {        keyStore = null;            }}
1
private boolean isValid(String subject)
{    String[] parts = subject.split("\\.");    return     !parts[0].endsWith("*") || parts.length >= 3 && AbstractVerifier.acceptableCountryWildcard(subject);}
0
 KeyStore updateKeyStore(String port, String host) throws IOException, GeneralSecurityException
{    synchronized (CERT_PATH) {                if (!keyStore.containsAlias(host)) {                        KeyToolUtils.generateHostCert(CERT_PATH, storePassword, host, CERT_VALIDITY);        }                keyStore = getKeyStore(storePassword.toCharArray());    }    return keyStore;}
1
private void initJMeterKeyStore() throws IOException, GeneralSecurityException
{    if (storePassword != null) {                try {            keyStore = getKeyStore(storePassword.toCharArray());            X509Certificate caCert = (X509Certificate) keyStore.getCertificate(JMETER_SERVER_ALIAS);            caCert.checkValidity(new Date(System.currentTimeMillis() + DateUtils.MILLIS_PER_DAY));        } catch (Exception e) {                                    keyStore = null;                    }    }    if (keyStore == null) {                        storePassword = JOrphanUtils.generateRandomAlphanumericPassword(20);                keyPassword = storePassword;        setPassword(storePassword);                if (!CERT_PATH.delete()) {                                }        KeyToolUtils.genkeypair(CERT_PATH, JMETER_SERVER_ALIAS, storePassword, CERT_VALIDITY, null, null);                keyStore = getKeyStore(storePassword.toCharArray());    }}
1
private KeyStore getKeyStore(char[] password) throws GeneralSecurityException, IOException
{    try (InputStream in = new BufferedInputStream(new FileInputStream(CERT_PATH))) {                KeyStore ks = KeyStore.getInstance(KEYSTORE_TYPE);        ks.load(in, password);                return ks;    }}
1
private String getPassword()
{    return PREFERENCES.get(USER_PASSWORD_KEY, null);}
0
private void setPassword(String password)
{    PREFERENCES.put(USER_PASSWORD_KEY, password);}
0
 KeyStore getKeyStore()
{    return keyStore;}
0
 String getKeyPassword()
{    return keyPassword;}
0
public static boolean isDynamicMode()
{    return KEYSTORE_MODE == KeystoreMode.DYNAMIC_KEYSTORE;}
0
private void init()
{        try {        List<String> listClasses = ClassFinder.findClassesThatExtend(JMeterUtils.getSearchPaths(), new Class[] { SamplerCreator.class });        for (String strClassName : listClasses) {            try {                if (log.isDebugEnabled()) {                                    }                Class<?> commandClass = Class.forName(strClassName);                if (!Modifier.isAbstract(commandClass.getModifiers())) {                    if (log.isDebugEnabled()) {                                            }                    SamplerCreator creator = (SamplerCreator) commandClass.getDeclaredConstructor().newInstance();                    String[] contentTypes = creator.getManagedContentTypes();                    for (String contentType : contentTypes) {                        if (log.isDebugEnabled()) {                                                    }                        SamplerCreator oldSamplerCreator = samplerCreatorMap.put(contentType, creator);                        if (oldSamplerCreator != null) {                                                    }                    }                }            } catch (Exception e) {                            }        }    } catch (IOException e) {            }}
1
public SamplerCreator getSamplerCreator(HttpRequestHdr request, Map<String, String> pageEncodings, Map<String, String> formEncodings)
{    SamplerCreator creator = samplerCreatorMap.get(request.getContentType());    if (creator == null) {        return DEFAULT_SAMPLER_CREATOR;    }    return creator;}
0
public String chooseServerAlias(String keyType, Principal[] issuers, Socket socket)
{    return serverAlias;}
0
public String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket)
{    return km.chooseClientAlias(keyType, issuers, socket);}
0
public X509Certificate[] getCertificateChain(String alias)
{    return km.getCertificateChain(alias);}
0
public String[] getClientAliases(String keyType, Principal[] issuers)
{    return km.getClientAliases(keyType, issuers);}
0
public PrivateKey getPrivateKey(String alias)
{    return km.getPrivateKey(alias);}
0
public String[] getServerAliases(String keyType, Principal[] issuers)
{    return km.getServerAliases(keyType, issuers);}
0
public void setLogFile(String path)
{    logFile = path;}
0
public String getLogFile()
{    return logFile;}
0
public void setParserClassName(String classname)
{    parserClassName = classname;}
0
public String getParserClassName()
{    return parserClassName;}
0
public SampleResult sampleWithParser()
{    initFilter();    instantiateParser();    SampleResult res = null;    try {        if (parser == null) {            throw new JMeterException("No Parser available");        }                                                                int thisCount = parser.parseAndConfigure(1, this);        if (        thisCount < 0) {            return errorResult(new Error("Problem parsing the log file"), new HTTPSampleResult());        }        if (thisCount == 0) {            if (count == 0 || filter == null) {                                JMeterContextService.getContext().getThread().stop();            }            if (filter != null) {                filter.reset();            }            CookieManager cm = getCookieManager();            if (cm != null) {                cm.clear();            }            count = 0;            return errorResult(new Error("No entries found"), new HTTPSampleResult());        }        count = thisCount;        res = sample();        if (res != null) {            res.setSampleLabel(toString());        }    } catch (Exception e) {                return errorResult(e, new HTTPSampleResult());    }    return res;}
1
public SampleResult sample(Entry e)
{    return sampleWithParser();}
0
public void instantiateParser()
{    if (parser == null) {        try {            if (StringUtils.isNotBlank(this.getParserClassName())) {                if (StringUtils.isNotBlank(this.getLogFile())) {                    parser = (LogParser) Class.forName(getParserClassName()).getDeclaredConstructor().newInstance();                    parser.setSourceFile(this.getLogFile());                    parser.setFilter(filter);                } else {                                    }            }        } catch (IllegalArgumentException | ReflectiveOperationException | SecurityException e) {                    }    }}
1
public String getFilterClassName()
{    return filterClassName;}
0
public void setFilterClassName(String filterClassName)
{    this.filterClassName = filterClassName;}
0
public String getDomain()
{        return super.getDomain();}
0
public void setDomain(String domain)
{        super.setDomain(domain);}
0
public boolean isImageParsing()
{    return super.isImageParser();}
0
public void setImageParsing(boolean imageParsing)
{    super.setImageParser(imageParsing);}
0
public String getPortString()
{    return super.getPropertyAsString(HTTPSamplerBase.PORT);}
0
public void setPortString(String port)
{    super.setProperty(HTTPSamplerBase.PORT, port);}
0
public void setProtocol(String value)
{    setProperty(PROTOCOL, value.toLowerCase(java.util.Locale.ENGLISH));}
0
public String getProtocol()
{    String protocol = getPropertyAsString(PROTOCOL);    if (StringUtils.isEmpty(protocol)) {        return HTTPConstants.PROTOCOL_HTTP;    }    return protocol;}
0
protected void initFilter()
{    if (filter == null && StringUtils.isNotBlank(filterClassName)) {        try {            filter = (Filter) Class.forName(filterClassName).getDeclaredConstructor().newInstance();        } catch (Exception e) {                    }    }}
1
public Object clone()
{    AccessLogSampler s = (AccessLogSampler) super.clone();    if (started && StringUtils.isNotBlank(filterClassName)) {        try {            if (TestCloneable.class.isAssignableFrom(Class.forName(filterClassName))) {                initFilter();                s.filter = (Filter) ((TestCloneable) filter).clone();            }            if (TestCloneable.class.isAssignableFrom(Class.forName(parserClassName))) {                instantiateParser();                s.parser = (LogParser) ((TestCloneable) parser).clone();                if (filter != null) {                    s.parser.setFilter(s.filter);                }            }        } catch (Exception e) {                    }    }    return s;}
1
public void testEnded()
{    if (parser != null) {        parser.close();    }    filter = null;    started = false;    super.testEnded();}
0
public void testStarted()
{    started = true;    super.testStarted();}
0
public void threadFinished()
{    if (parser instanceof ThreadListener) {        ((ThreadListener) parser).threadFinished();    }    if (filter instanceof ThreadListener) {        ((ThreadListener) filter).threadFinished();    }}
0
private static List<String> logParsers()
{    try {        return ClassFinder.findClassesThatExtend(JMeterUtils.getSearchPaths(), new Class[] { LogParser.class });    } catch (IOException e) {                return Collections.emptyList();    }}
1
protected HTTPSampleResult sample(URL url, String method, boolean frd, int fd)
{    HTTPSampleResult res = new HTTPSampleResult();    res.setSampleLabel(url.toExternalForm());    res.sampleStart();    try {        setupConnection(url, method, res);        activeChannel = channel;        execute(method, res);        res.sampleEnd();        res.setResponseData(responseData.toByteArray());        return res;    } catch (IOException iex) {        res.sampleEnd();                lastPort = -1;        channel = null;        return errorResult(iex, res);    } finally {        activeChannel = null;        JOrphanUtils.closeQuietly(body);        body = null;    }}
0
public void threadFinished()
{    if (channel != null) {        try {            channel.close();        } catch (IOException iex) {                    }    }    channel = null;    JOrphanUtils.closeQuietly(body);    body = null;    stringBody = null;}
1
private void setupConnection(URL url, String method, HTTPSampleResult res) throws IOException
{    String host = url.getHost();    int port = url.getPort();    if (port <= 0 || port == url.getDefaultPort()) {        port = 8009;    }    String scheme = url.getProtocol();    if (channel == null || !host.equals(lastHost) || port != lastPort) {        if (channel != null) {            channel.close();        }        channel = new Socket(host, port);                int timeout = JMeterUtils.getPropDefault("httpclient.timeout", 0);        if (timeout > 0) {            channel.setSoTimeout(timeout);        }        localAddress = channel.getLocalAddress().getHostAddress();        localName = channel.getLocalAddress().getHostName();        lastHost = host;        lastPort = port;    }    res.setURL(url);    res.setHTTPMethod(method);    outpos = 4;    setByte((byte) 2);    if (method.equals(HTTPConstants.POST)) {        setByte((byte) 4);    } else {        setByte((byte) 2);    }    if (JMeterUtils.getPropDefault("httpclient.version", "1.1").equals("1.0")) {                        setString("HTTP/1.0");    } else {        setString(HTTPConstants.HTTP_1_1);    }    setString(url.getPath());    setString(localAddress);    setString(localName);    setString(host);    setInt(url.getDefaultPort());    setByte(HTTPConstants.PROTOCOL_HTTPS.equalsIgnoreCase(scheme) ? (byte) 1 : (byte) 0);    setInt(getHeaderSize(method, url));    String hdr = setConnectionHeaders(url, host, method);    res.setRequestHeaders(hdr);    res.setCookies(setConnectionCookies(url, getCookieManager()));    String query = url.getQuery();    if (query != null) {                setByte((byte) 0x05);        setString(query);    }        setByte((byte) 0xff);}
0
private int getHeaderSize(String method, URL url)
{    HeaderManager headers = getHeaderManager();    CookieManager cookies = getCookieManager();    AuthManager auth = getAuthManager();        int hsz = 1;    if (method.equals(HTTPConstants.POST)) {        HTTPFileArg[] hfa = getHTTPFiles();        if (hfa.length > 0) {            hsz += 3;        } else {            hsz += 2;        }    }    if (headers != null) {        hsz += headers.size();    }    if (cookies != null) {        hsz += cookies.getCookieCount();    }    if (auth != null) {        String authHeader = auth.getAuthHeaderForURL(url);        if (authHeader != null) {            ++hsz;        }    }    return hsz;}
0
private String setConnectionHeaders(URL url, String host, String method) throws IOException
{    HeaderManager headers = getHeaderManager();    AuthManager auth = getAuthManager();    StringBuilder hbuf = new StringBuilder();            hbuf.append("Host").append(COLON_SPACE).append(host).append(NEWLINE);        setInt(0xA00b);    setString(host);    if (headers != null) {        for (JMeterProperty jMeterProperty : headers.getHeaders()) {            Header header = (Header) jMeterProperty.getObjectValue();            String n = header.getName();            String v = header.getValue();            hbuf.append(n).append(COLON_SPACE).append(v).append(NEWLINE);            int hc = translateHeader(n);            if (hc > 0) {                setInt(hc + AJP_HEADER_BASE);            } else {                setString(n);            }            setString(v);        }    }    if (method.equals(HTTPConstants.POST)) {        int cl = -1;        HTTPFileArg[] hfa = getHTTPFiles();        if (hfa.length > 0) {            HTTPFileArg fa = hfa[0];            String fn = fa.getPath();            File input = new File(fn);            cl = (int) input.length();            if (body != null) {                JOrphanUtils.closeQuietly(body);                body = null;            }            body = new BufferedInputStream(new FileInputStream(input));            setString(HTTPConstants.HEADER_CONTENT_DISPOSITION);            setString("form-data; name=\"" + encode(fa.getParamName()) + "\"; filename=\"" + encode(fn) +             "\"");            String mt = fa.getMimeType();            hbuf.append(HTTPConstants.HEADER_CONTENT_TYPE).append(COLON_SPACE).append(mt).append(NEWLINE);                        setInt(0xA007);            setString(mt);        } else {            hbuf.append(HTTPConstants.HEADER_CONTENT_TYPE).append(COLON_SPACE).append(HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED).append(NEWLINE);                        setInt(0xA007);            setString(HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED);            StringBuilder sb = new StringBuilder();            boolean first = true;            for (JMeterProperty arg : getArguments()) {                if (first) {                    first = false;                } else {                    sb.append('&');                }                sb.append(arg.getStringValue());            }            stringBody = sb.toString();                        byte[] sbody = stringBody.getBytes();            cl = sbody.length;            body = new ByteArrayInputStream(sbody);        }        hbuf.append(HTTPConstants.HEADER_CONTENT_LENGTH).append(COLON_SPACE).append(String.valueOf(cl)).append(NEWLINE);                setInt(0xA008);        setString(String.valueOf(cl));    }    if (auth != null) {        String authHeader = auth.getAuthHeaderForURL(url);        if (authHeader != null) {                        setInt(0xA005);            setString(authHeader);            hbuf.append(HTTPConstants.HEADER_AUTHORIZATION).append(COLON_SPACE).append(authHeader).append(NEWLINE);        }    }    return hbuf.toString();}
0
private String encode(String value)
{    StringBuilder newValue = new StringBuilder();    char[] chars = value.toCharArray();    for (char c : chars) {        if (        c == '\\') {                        newValue.append("\\\\");        } else {            newValue.append(c);        }    }    return newValue.toString();}
0
private String setConnectionCookies(URL url, CookieManager cookies)
{    String cookieHeader = null;    if (cookies != null) {        cookieHeader = cookies.getCookieHeaderForURL(url);        for (JMeterProperty jMeterProperty : cookies.getCookies()) {            Cookie cookie = (Cookie) (jMeterProperty.getObjectValue());                        setInt(0xA009);                        setString(cookie.getName() + "=" + cookie.getValue());        }    }    return cookieHeader;}
0
private int translateHeader(String n)
{    for (int i = 0; i < HEADER_TRANS_ARRAY.length; i++) {        if (HEADER_TRANS_ARRAY[i].equalsIgnoreCase(n)) {            return i + 1;        }    }    return -1;}
0
private void setByte(byte b)
{    outbuf[outpos++] = b;}
0
private void setInt(int n)
{    outbuf[outpos++] = (byte) ((n >> 8) & 0xff);    outbuf[outpos++] = (byte) (n & 0xff);}
0
private void setString(String s)
{    if (s == null) {        setInt(0xFFFF);    } else {        int len = s.length();        setInt(len);        for (int i = 0; i < len; i++) {            setByte((byte) s.charAt(i));        }        setByte((byte) 0);    }}
0
private void send() throws IOException
{    OutputStream os = channel.getOutputStream();    int len = outpos;    outpos = 0;    setInt(0x1234);    setInt(len - 4);    os.write(outbuf, 0, len);}
0
private void execute(String method, HTTPSampleResult res) throws IOException
{    send();    if (method.equals(HTTPConstants.POST)) {        res.setQueryString(stringBody);        sendPostBody();    }    handshake(res);}
0
private void handshake(HTTPSampleResult res) throws IOException
{    responseData.reset();    int msg = getMessage();    while (msg != 5) {        if (msg == 3) {            int len = getInt();            responseData.write(inbuf, inpos, len);        } else if (msg == 4) {            parseHeaders(res);        } else if (msg == 6) {            setNextBodyChunk();            send();        }        msg = getMessage();    }}
0
private void sendPostBody() throws IOException
{    setNextBodyChunk();    send();}
0
private void setNextBodyChunk() throws IOException
{    int nr = 0;    if (body != null) {        int len = body.available();        if (len < 0) {            len = 0;        } else if (len > MAX_SEND_SIZE) {            len = MAX_SEND_SIZE;        }        outpos = 4;        if (len > 0) {            nr = body.read(outbuf, outpos + 2, len);        }    } else {        outpos = 4;    }    setInt(nr);    outpos += nr;}
0
private void parseHeaders(HTTPSampleResult res) throws IOException
{    int status = getInt();    res.setResponseCode(Integer.toString(status));    res.setSuccessful(200 <= status && status <= 399);    String msg = getString();    res.setResponseMessage(msg);    int nh = getInt();    StringBuilder sb = new StringBuilder();        sb.append(HTTPConstants.HTTP_1_1).append(status).append(" ").append(msg).append(NEWLINE);    for (int i = 0; i < nh; i++) {        String name;        int thn = peekInt();        if ((thn & 0xff00) == AJP_HEADER_BASE) {            name = HEADER_TRANS_ARRAY[(thn & 0xff) - 1];                        getInt();        } else {            name = getString();        }        String value = getString();        if (HTTPConstants.HEADER_CONTENT_TYPE.equalsIgnoreCase(name)) {            res.setContentType(value);            res.setEncodingAndType(value);        } else if (HTTPConstants.HEADER_SET_COOKIE.equalsIgnoreCase(name)) {            CookieManager cookies = getCookieManager();            if (cookies != null) {                cookies.addCookieFromHeader(value, res.getURL());            }        }        sb.append(name).append(COLON_SPACE).append(value).append(NEWLINE);    }    res.setResponseHeaders(sb.toString());}
0
private int getMessage() throws IOException
{    InputStream is = channel.getInputStream();    inpos = 0;    int nr = is.read(inbuf, inpos, 4);    if (nr != 4) {        channel.close();        channel = null;        throw new IOException("Connection Closed: " + nr);    }    getInt();    int len = getInt();    int toRead = len;    int cpos = inpos;    while (toRead > 0) {        nr = is.read(inbuf, cpos, toRead);        cpos += nr;        toRead -= nr;    }    return getByte();}
0
private byte getByte()
{    return inbuf[inpos++];}
0
private int getInt()
{    int res = (inbuf[inpos++] << 8) & 0xff00;    res += inbuf[inpos++] & 0xff;    return res;}
0
private int peekInt()
{    int res = (inbuf[inpos] << 8) & 0xff00;    res += inbuf[inpos + 1] & 0xff;    return res;}
0
private String getString() throws IOException
{    int len = getInt();        String s = new String(inbuf, inpos, len, "iso-8859-1");    inpos += len + 1;    return s;}
0
public boolean interrupt()
{    Socket chan = activeChannel;    if (chan != null) {        activeChannel = null;        try {            chan.close();        } catch (Exception e) {                }    }    return chan != null;}
0
public int read(byte[] b, int off, int len) throws IOException
{    try {        return super.read(b, off, len);    } catch (final EOFException ex) {        return handleRelaxMode(ex, relax);    }}
0
public int read() throws IOException
{    try {        return super.read();    } catch (final EOFException ex) {        return handleRelaxMode(ex, relax);    }}
0
public int read(byte[] b) throws IOException
{    try {        return super.read(b);    } catch (final EOFException ex) {        return handleRelaxMode(ex, relax);    }}
0
private int handleRelaxMode(final EOFException ex, final boolean relaxMode) throws EOFException
{    if (relaxMode) {        return -1;    } else {        throw ex;    }}
0
public int read(byte[] b, int off, int len) throws IOException
{    try {        return super.read(b, off, len);    } catch (final EOFException ex) {        return handleRelaxMode(ex, relax);    }}
0
public int read() throws IOException
{    try {        return super.read();    } catch (final EOFException ex) {        return handleRelaxMode(ex, relax);    }}
0
public int read(byte[] b) throws IOException
{    try {        return super.read(b);    } catch (final EOFException ex) {        return handleRelaxMode(ex, relax);    }}
0
private int handleRelaxMode(final EOFException ex, final boolean relaxMode) throws EOFException
{    if (relaxMode) {        return -1;    } else {        throw ex;    }}
0
private static LayeredConnectionSocketFactory checkAndInit() throws SSLInitializationException
{        return new SSLConnectionSocketFactory(new HttpSSLProtocolSocketFactory(JsseSSLManager.CPS), SUPPORTED_PROTOCOL_LIST, SUPPORTED_CIPHER_LIST, NoopHostnameVerifier.INSTANCE);}
1
 static LayeredConnectionSocketFactory getINSTANCE()
{    return ADAPTEE;}
0
public Socket createSocket(HttpContext paramHttpContext) throws IOException
{    return AdapteeHolder.getINSTANCE().createSocket(paramHttpContext);}
0
public Socket connectSocket(int paramInt, Socket paramSocket, HttpHost paramHttpHost, InetSocketAddress paramInetSocketAddress1, InetSocketAddress paramInetSocketAddress2, HttpContext paramHttpContext) throws IOException
{    return AdapteeHolder.getINSTANCE().connectSocket(paramInt, paramSocket, paramHttpHost, paramInetSocketAddress1, paramInetSocketAddress2, paramHttpContext);}
0
public Socket createLayeredSocket(Socket paramSocket, String paramString, int paramInt, HttpContext paramHttpContext) throws IOException
{    return AdapteeHolder.getINSTANCE().createLayeredSocket(paramSocket, paramString, paramInt, paramHttpContext);}
0
protected void threadFinished()
{}
0
protected void notifyFirstSampleAfterLoopRestart()
{}
0
protected HTTPSampleResult errorResult(Throwable t, HTTPSampleResult res)
{    return testElement.errorResult(t, res);}
0
protected Arguments getArguments()
{    return testElement.getArguments();}
0
protected AuthManager getAuthManager()
{    return testElement.getAuthManager();}
0
protected boolean getAutoRedirects()
{    return testElement.getAutoRedirects();}
0
protected CacheManager getCacheManager()
{    return testElement.getCacheManager();}
0
protected int getConnectTimeout()
{    return testElement.getConnectTimeout();}
0
protected String getContentEncoding()
{    return testElement.getContentEncoding();}
0
protected CookieManager getCookieManager()
{    return testElement.getCookieManager();}
0
protected HeaderManager getHeaderManager()
{    return testElement.getHeaderManager();}
0
protected HTTPFileArg[] getHTTPFiles()
{    return testElement.getHTTPFiles();}
0
protected String getIpSource()
{    return testElement.getIpSource();}
0
protected InetAddress getIpSourceAddress() throws UnknownHostException, SocketException
{    final String ipSource = getIpSource();    if (ipSource.trim().length() > 0) {        Class<? extends InetAddress> ipClass = null;        final SourceType sourceType = HTTPSamplerBase.SourceType.values()[testElement.getIpSourceType()];        switch(sourceType) {            case DEVICE:                ipClass = InetAddress.class;                break;            case DEVICE_IPV4:                ipClass = Inet4Address.class;                break;            case DEVICE_IPV6:                ipClass = Inet6Address.class;                break;            case HOSTNAME:            default:                return InetAddress.getByName(ipSource);        }        NetworkInterface net = NetworkInterface.getByName(ipSource);        if (net != null) {            for (InterfaceAddress ia : net.getInterfaceAddresses()) {                final InetAddress inetAddr = ia.getAddress();                if (ipClass.isInstance(inetAddr)) {                    return inetAddr;                }            }            throw new UnknownHostException("Interface " + ipSource + " does not have address of type " + ipClass.getSimpleName());        }        throw new UnknownHostException("Cannot find interface " + ipSource);    }        return null;}
0
protected String getProxyScheme()
{    return testElement.getProxyScheme();}
0
protected String getProxyHost()
{    return testElement.getProxyHost();}
0
protected String getProxyPass()
{    return testElement.getProxyPass();}
0
protected int getProxyPortInt()
{    return testElement.getProxyPortInt();}
0
protected String getProxyUser()
{    return testElement.getProxyUser();}
0
protected int getResponseTimeout()
{    return testElement.getResponseTimeout();}
0
protected boolean getSendFileAsPostBody()
{    return testElement.getSendFileAsPostBody();}
0
protected boolean getSendParameterValuesAsPostBody()
{    return testElement.getSendParameterValuesAsPostBody();}
0
protected boolean getUseKeepAlive()
{    return testElement.getUseKeepAlive();}
0
protected boolean getUseMultipartForPost()
{    return testElement.getUseMultipartForPost();}
0
protected boolean getUseMultipart()
{    return testElement.getUseMultipart();}
0
protected boolean getDoBrowserCompatibleMultipart()
{    return testElement.getDoBrowserCompatibleMultipart();}
0
protected boolean hasArguments()
{    return testElement.hasArguments();}
0
protected boolean isMonitor()
{    return false;}
0
protected boolean isSuccessCode(int errorLevel)
{    return testElement.isSuccessCode(errorLevel);}
0
protected byte[] readResponse(SampleResult res, InputStream instream, int responseContentLength) throws IOException
{    return readResponse(res, instream, (long) responseContentLength);}
0
protected byte[] readResponse(SampleResult res, InputStream instream, long responseContentLength) throws IOException
{    return testElement.readResponse(res, instream, responseContentLength);}
0
protected byte[] readResponse(SampleResult res, BufferedInputStream in, int contentLength) throws IOException
{    return testElement.readResponse(res, in, contentLength);}
0
protected byte[] readResponse(SampleResult res, BufferedInputStream in, long contentLength) throws IOException
{    return testElement.readResponse(res, in, contentLength);}
0
protected HTTPSampleResult resultProcessing(boolean areFollowingRedirect, int frameDepth, HTTPSampleResult res)
{    return testElement.resultProcessing(areFollowingRedirect, frameDepth, res);}
0
protected void setUseKeepAlive(boolean b)
{    testElement.setUseKeepAlive(b);}
0
protected void notifySSLContextWasReset()
{}
0
protected HTTPSampleResult updateSampleResultForResourceInCache(HTTPSampleResult res)
{    switch(CACHED_RESOURCE_MODE) {        case RETURN_NO_SAMPLE:            return null;        case RETURN_200_CACHE:            res.sampleEnd();            res.setResponseCodeOK();            res.setResponseMessage(RETURN_200_CACHE_MESSAGE);            res.setSuccessful(true);            return res;        case RETURN_CUSTOM_STATUS:            res.sampleEnd();            res.setResponseCode(RETURN_CUSTOM_STATUS_CODE);            res.setResponseMessage(RETURN_CUSTOM_STATUS_MESSAGE);            res.setSuccessful(true);            return res;        default:                        throw new IllegalStateException("Unknown CACHED_RESOURCE_MODE");    }}
0
protected final void configureSampleLabel(SampleResult res, URL url)
{    if (SampleResult.isRenameSampleLabel()) {        res.setSampleLabel(this.testElement.getName());    } else {        res.setSampleLabel(url.toString());    }}
0
public static void load(String file, final org.apache.http.params.HttpParams params)
{    load(file, new GenericHttpParams() {        @Override        public void setParameter(String name, Object value) {            params.setParameter(name, value);        }        @Override        public void setVersion(String name, String value) {            String[] parts = value.split("\\.");            if (parts.length != 2) {                throw new IllegalArgumentException("Version must have form m.n");            }            params.setParameter(name, new org.apache.http.HttpVersion(Integer.parseInt(parts[0]), Integer.parseInt(parts[1])));        }    });}
0
public void setParameter(String name, Object value)
{    params.setParameter(name, value);}
0
public void setVersion(String name, String value)
{    String[] parts = value.split("\\.");    if (parts.length != 2) {        throw new IllegalArgumentException("Version must have form m.n");    }    params.setParameter(name, new org.apache.http.HttpVersion(Integer.parseInt(parts[0]), Integer.parseInt(parts[1])));}
0
private static void load(String file, GenericHttpParams params)
{        File f = new File(file);    if (!(f.exists() && f.canRead())) {        f = new File(NewDriver.getJMeterDir() + File.separator + "bin" + File.separator +         file);                if (!(f.exists() && f.canRead())) {                        return;        }    }        Properties props = new Properties();    try (InputStream is = new FileInputStream(f)) {        props.load(is);        for (Map.Entry<Object, Object> me : props.entrySet()) {            String key = (String) me.getKey();            String value = (String) me.getValue();                        int typeSep = key.indexOf('$');            try {                if (typeSep > 0) {                                        String type = key.substring(typeSep + 1);                    String name = key.substring(0, typeSep);                                        if (type.equals("Integer")) {                        params.setParameter(name, Integer.valueOf(value));                    } else if (type.equals("Long")) {                        params.setParameter(name, Long.valueOf(value));                    } else if (type.equals("Boolean")) {                        params.setParameter(name, Boolean.valueOf(value));                    } else if (type.equals("HttpVersion")) {                                                params.setVersion(name, value);                    } else {                                            }                } else {                                        params.setParameter(key, value);                }            } catch (Exception e) {                            }        }    } catch (IOException e) {            }}
1
public boolean interrupt()
{    return false;}
0
protected HTTPSampleResult sample(URL url, String method, boolean areFollowingRedirect, int frameDepth)
{    HTTPSampleResult res = new HTTPSampleResult();        res.setHTTPMethod(HTTPConstants.GET);    res.setURL(url);    res.setSampleLabel(url.toString());    InputStream is = null;    res.sampleStart();    int bufferSize = 4096;    try (org.apache.commons.io.output.ByteArrayOutputStream bos = new org.apache.commons.io.output.ByteArrayOutputStream(bufferSize)) {        byte[] responseData;        URLConnection conn = url.openConnection();        is = conn.getInputStream();        byte[] readBuffer = new byte[bufferSize];        int bytesReadInBuffer = 0;        long totalBytes = 0;        boolean storeInBOS = true;        while ((bytesReadInBuffer = is.read(readBuffer)) > -1) {            if (storeInBOS) {                if (totalBytes + bytesReadInBuffer <= MAX_BYTES_TO_STORE_PER_REQUEST) {                    bos.write(readBuffer, 0, bytesReadInBuffer);                } else {                    bos.write(readBuffer, 0, (int) (MAX_BYTES_TO_STORE_PER_REQUEST - totalBytes));                    storeInBOS = false;                }            }            totalBytes += bytesReadInBuffer;        }        responseData = bos.toByteArray();        res.sampleEnd();        res.setResponseData(responseData);        res.setBodySize(totalBytes);        res.setResponseCodeOK();        res.setResponseMessageOK();        res.setSuccessful(true);                StringBuilder ctb = new StringBuilder("text/html");                String contentEncoding = getContentEncoding();        if (contentEncoding.length() > 0) {                        ctb.append("; charset=");            ctb.append(contentEncoding);        }        String ct = ctb.toString();        res.setContentType(ct);        res.setEncodingAndType(ct);        res = resultProcessing(areFollowingRedirect, frameDepth, res);        return res;    } catch (IOException e) {        return errorResult(e, res);    } finally {        IOUtils.closeQuietly(is);    }}
0
public InputStream create(final InputStream instream) throws IOException
{    return new LaxGZIPInputStream(instream, GZIP_RELAX_MODE);}
0
public InputStream create(final InputStream instream) throws IOException
{    return new LaxDeflateInputStream(instream, DEFLATE_RELAX_MODE);}
0
public InputStream create(final InputStream instream) throws IOException
{    return new BrotliInputStream(instream);}
0
public void process(HttpRequest request, HttpContext context) throws HttpException, IOException
{    HttpClientContext localContext = HttpClientContext.adapt(context);    AuthManager authManager = (AuthManager) localContext.getAttribute(CONTEXT_ATTRIBUTE_AUTH_MANAGER);    if (authManager == null) {        Credentials credentials = null;        HttpClientKey key = (HttpClientKey) localContext.getAttribute(CONTEXT_ATTRIBUTE_CLIENT_KEY);        AuthScope authScope = null;        CredentialsProvider credentialsProvider = localContext.getCredentialsProvider();        if (key.hasProxy && !StringUtils.isEmpty(key.proxyUser)) {            authScope = new AuthScope(key.proxyHost, key.proxyPort);            credentials = credentialsProvider.getCredentials(authScope);        }        credentialsProvider.clear();        if (credentials != null) {            credentialsProvider.setCredentials(authScope, credentials);        }        return;    }    URI requestURI = null;    if (request instanceof HttpUriRequest) {        requestURI = ((HttpUriRequest) request).getURI();    } else {        try {            requestURI = new URI(request.getRequestLine().getUri());        } catch (final URISyntaxException ignore) {                        }    }    if (requestURI != null) {        HttpHost targetHost = (HttpHost) context.getAttribute(HttpCoreContext.HTTP_TARGET_HOST);        URL url;        if (requestURI.isAbsolute()) {            url = requestURI.toURL();        } else {            url = new URL(targetHost.getSchemeName(), targetHost.getHostName(), targetHost.getPort(), requestURI.getPath());        }        Authorization authorization = authManager.getAuthForURL(url);        CredentialsProvider credentialsProvider = localContext.getCredentialsProvider();        if (authorization != null) {            AuthCache authCache = localContext.getAuthCache();            if (authCache == null) {                authCache = new BasicAuthCache();                localContext.setAuthCache(authCache);            }            authManager.setupCredentials(authorization, url, localContext, credentialsProvider, LOCALHOST);            AuthState authState = (AuthState) context.getAttribute(HttpClientContext.TARGET_AUTH_STATE);            if (authState.getAuthScheme() == null) {                AuthScope authScope = new AuthScope(targetHost.getHostName(), targetHost.getPort(), authorization.getRealm(), targetHost.getSchemeName());                Credentials creds = credentialsProvider.getCredentials(authScope);                if (creds != null) {                    fillAuthCache(targetHost, authorization, authCache, authScope);                }            }        } else {            credentialsProvider.clear();        }    }}
0
private void fillAuthCache(HttpHost targetHost, Authorization authorization, AuthCache authCache, AuthScope authScope)
{    if (    authorization.getMechanism() == Mechanism.BASIC_DIGEST || authorization.getMechanism() == Mechanism.BASIC) {        BasicScheme basicAuth = new BasicScheme();        authCache.put(targetHost, basicAuth);    } else if (authorization.getMechanism() == Mechanism.DIGEST) {        JMeterVariables vars = JMeterContextService.getContext().getVariables();        DigestParameters digestParameters = (DigestParameters) vars.getObject(DIGEST_PARAMETERS);        if (digestParameters != null) {            DigestScheme digestAuth = (DigestScheme) authCache.get(targetHost);            if (digestAuth == null) {                digestAuth = new DigestScheme();            }            digestAuth.overrideParamter("realm", authScope.getRealm());            digestAuth.overrideParamter("algorithm", digestParameters.getAlgorithm());            digestAuth.overrideParamter("charset", digestParameters.getCharset());            digestAuth.overrideParamter("nonce", digestParameters.getNonce());            digestAuth.overrideParamter("opaque", digestParameters.getOpaque());            digestAuth.overrideParamter("qop", digestParameters.getQop());            authCache.put(targetHost, digestAuth);        }    } else if (authorization.getMechanism() == Mechanism.KERBEROS) {        KerberosScheme kerberosScheme = new KerberosScheme();        authCache.put(targetHost, kerberosScheme);    }}
0
public void connect(ManagedHttpClientConnection conn, HttpHost host, InetSocketAddress localAddress, int connectTimeout, SocketConfig socketConfig, HttpContext context) throws IOException
{    try {        super.connect(conn, host, localAddress, connectTimeout, socketConfig, context);    } finally {        SampleResult sample = (SampleResult) context.getAttribute(HTTPHC4Impl.CONTEXT_ATTRIBUTE_SAMPLER_RESULT);        if (sample != null) {            sample.connectEnd();        }    }}
0
public long getKeepAliveDuration(HttpResponse response, HttpContext context)
{    long duration = super.getKeepAliveDuration(response, context);    if (duration <= 0 && IDLE_TIMEOUT > 0) {                        return IDLE_TIMEOUT;    }        return duration;}
1
protected HttpResponse doSendRequest(final HttpRequest request, final HttpClientConnection conn, final HttpContext context) throws IOException, HttpException
{    HttpResponse response = super.doSendRequest(request, conn, context);    HttpConnectionMetrics metrics = conn.getMetrics();    long sentBytesCount = metrics.getSentBytesCount();        context.setAttribute(CONTEXT_ATTRIBUTE_SENT_BYTES, Long.valueOf(metrics.getSentBytesCount()));    context.setAttribute(CONTEXT_ATTRIBUTE_METRICS, metrics);        metrics.reset();    return response;}
1
public void process(HttpResponse response, HttpContext context) throws HttpException, IOException
{    ArrayList<Header[]> headersToSave = null;    final HttpEntity entity = response.getEntity();    final HttpClientContext clientContext = HttpClientContext.adapt(context);    final RequestConfig requestConfig = clientContext.getRequestConfig();        if (requestConfig.isContentCompressionEnabled() && entity != null && entity.getContentLength() != 0) {        final Header ceheader = entity.getContentEncoding();        if (ceheader != null) {            headersToSave = new ArrayList<>(3);            for (String name : HEADERS_TO_SAVE) {                                Header[] hdr = response.getHeaders(name);                headersToSave.add(hdr);            }        }    }        super.process(response, clientContext);        if (headersToSave != null) {        for (Header[] headers : headersToSave) {            for (Header headerToRestore : headers) {                if (response.containsHeader(headerToRestore.getName())) {                    break;                }                response.addHeader(headerToRestore);            }        }    }}
0
private static Lookup<InputStreamFactory> createLookupRegistry()
{    return RegistryBuilder.<InputStreamFactory>create().register("br", BROTLI).register("gzip", GZIP).register("x-gzip", GZIP).register("deflate", DEFLATE).build();}
0
public String getMethod()
{    return HTTPConstants.GET;}
0
public String getMethod()
{    return HTTPConstants.DELETE;}
0
protected HTTPSampleResult sample(URL url, String method, boolean areFollowingRedirect, int frameDepth)
{    if (log.isDebugEnabled()) {            }    JMeterVariables jMeterVariables = JMeterContextService.getContext().getVariables();    HTTPSampleResult res = createSampleResult(url, method);    CloseableHttpClient httpClient = null;    HttpRequestBase httpRequest = null;    HttpContext localContext = new BasicHttpContext();    HttpClientContext clientContext = HttpClientContext.adapt(localContext);    clientContext.setAttribute(CONTEXT_ATTRIBUTE_AUTH_MANAGER, getAuthManager());    HttpClientKey key = createHttpClientKey(url);    MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager> triple;    try {        triple = setupClient(key, jMeterVariables, clientContext);        httpClient = triple.getLeft();        URI uri = url.toURI();        httpRequest = createHttpRequest(uri, method, areFollowingRedirect);                setupRequest(url, httpRequest, res);    } catch (Exception e) {        res.sampleStart();        res.sampleEnd();        errorResult(e, res);        return res;    }    setupClientContextBeforeSample(jMeterVariables, localContext);    res.sampleStart();    final CacheManager cacheManager = getCacheManager();    if (cacheManager != null && HTTPConstants.GET.equalsIgnoreCase(method) && cacheManager.inCache(url, httpRequest.getAllHeaders())) {        return updateSampleResultForResourceInCache(res);    }    CloseableHttpResponse httpResponse = null;    try {        currentRequest = httpRequest;        handleMethod(method, res, httpRequest, localContext);                localContext.setAttribute(CONTEXT_ATTRIBUTE_SAMPLER_RESULT, res);                httpResponse = executeRequest(httpClient, httpRequest, localContext, url);        saveProxyAuth(triple, localContext);        if (log.isDebugEnabled()) {                    }                final HttpRequest request = (HttpRequest) localContext.getAttribute(HttpCoreContext.HTTP_REQUEST);        if (log.isDebugEnabled()) {                    }        extractClientContextAfterSample(jMeterVariables, localContext);                if (localAddress != null) {            request.addHeader(HEADER_LOCAL_ADDRESS, localAddress.toString());        }        res.setRequestHeaders(getAllHeadersExceptCookie(request));        Header contentType = httpResponse.getLastHeader(HTTPConstants.HEADER_CONTENT_TYPE);        if (contentType != null) {            String ct = contentType.getValue();            res.setContentType(ct);            res.setEncodingAndType(ct);        }        HttpEntity entity = httpResponse.getEntity();        if (entity != null) {            res.setResponseData(readResponse(res, entity.getContent(), entity.getContentLength()));        }                res.sampleEnd();        currentRequest = null;                StatusLine statusLine = httpResponse.getStatusLine();        int statusCode = statusLine.getStatusCode();        res.setResponseCode(Integer.toString(statusCode));        res.setResponseMessage(statusLine.getReasonPhrase());        res.setSuccessful(isSuccessCode(statusCode));        res.setResponseHeaders(getResponseHeaders(httpResponse));        if (res.isRedirect()) {            final Header headerLocation = httpResponse.getLastHeader(HTTPConstants.HEADER_LOCATION);            if (headerLocation == null) {                                throw new IllegalArgumentException("Missing location header in redirect for " + httpRequest.getRequestLine());            }            String redirectLocation = headerLocation.getValue();            res.setRedirectLocation(redirectLocation);        }                long headerBytes =         (long) res.getResponseHeaders().length() +         (long) httpResponse.getAllHeaders().length +         1L +         2L;        HttpConnectionMetrics metrics = (HttpConnectionMetrics) localContext.getAttribute(CONTEXT_ATTRIBUTE_METRICS);        long totalBytes = metrics.getReceivedBytesCount();        res.setHeadersSize((int) headerBytes);        res.setBodySize(totalBytes - headerBytes);        res.setSentBytes((Long) localContext.getAttribute(CONTEXT_ATTRIBUTE_SENT_BYTES));        if (log.isDebugEnabled()) {            long total = res.getHeadersSize() + res.getBodySizeAsLong();                    }                if (getAutoRedirects()) {            HttpUriRequest req = (HttpUriRequest) localContext.getAttribute(HttpCoreContext.HTTP_REQUEST);            HttpHost target = (HttpHost) localContext.getAttribute(HttpCoreContext.HTTP_TARGET_HOST);            URI redirectURI = req.getURI();            if (redirectURI.isAbsolute()) {                res.setURL(redirectURI.toURL());            } else {                res.setURL(new URL(new URL(target.toURI()), redirectURI.toString()));            }        }                saveConnectionCookies(httpResponse, res.getURL(), getCookieManager());                if (cacheManager != null) {            cacheManager.saveDetails(httpResponse, res);        }                res = resultProcessing(areFollowingRedirect, frameDepth, res);        if (!isSuccessCode(statusCode)) {            EntityUtils.consumeQuietly(httpResponse.getEntity());        }    } catch (IOException e) {                if (res.getEndTime() == 0) {            res.sampleEnd();        }                if (res.getRequestHeaders() != null) {                    }        res.setRequestHeaders(getAllHeadersExceptCookie((HttpRequest) localContext.getAttribute(HttpCoreContext.HTTP_REQUEST)));        errorResult(e, res);        return res;    } catch (RuntimeException e) {                if (res.getEndTime() == 0) {            res.sampleEnd();        }        errorResult(e, res);        return res;    } finally {        JOrphanUtils.closeQuietly(httpResponse);        currentRequest = null;        JMeterContextService.getContext().getSamplerContext().remove(CONTEXT_ATTRIBUTE_PARENT_SAMPLE_CLIENT_STATE);    }    return res;}
1
private void saveProxyAuth(MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager> triple, HttpContext localContext)
{    triple.setMiddle((AuthState) localContext.getAttribute(HttpClientContext.PROXY_AUTH_STATE));}
0
private void setupProxyAuthState(MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager> triple, HttpContext localContext)
{    if (triple != null) {        AuthState proxyAuthState = triple.getMiddle();        localContext.setAttribute(HttpClientContext.PROXY_AUTH_STATE, proxyAuthState);    }}
0
private HttpRequestBase createHttpRequest(URI uri, String method, boolean areFollowingRedirect)
{    HttpRequestBase result;    if (method.equals(HTTPConstants.POST)) {        result = new HttpPost(uri);    } else if (method.equals(HTTPConstants.GET)) {                if (!areFollowingRedirect && ((!hasArguments() && getSendFileAsPostBody()) || getSendParameterValuesAsPostBody())) {            result = new HttpGetWithEntity(uri);        } else {            result = new HttpGet(uri);        }    } else if (method.equals(HTTPConstants.PUT)) {        result = new HttpPut(uri);    } else if (method.equals(HTTPConstants.HEAD)) {        result = new HttpHead(uri);    } else if (method.equals(HTTPConstants.TRACE)) {        result = new HttpTrace(uri);    } else if (method.equals(HTTPConstants.OPTIONS)) {        result = new HttpOptions(uri);    } else if (method.equals(HTTPConstants.DELETE)) {        result = new HttpDelete(uri);    } else if (method.equals(HTTPConstants.PATCH)) {        result = new HttpPatch(uri);    } else if (HttpWebdav.isWebdavMethod(method)) {        result = new HttpWebdav(method, uri);    } else {        throw new IllegalArgumentException("Unexpected method: '" + method + "'");    }    return result;}
0
private void extractClientContextAfterSample(JMeterVariables jMeterVariables, HttpContext localContext)
{    Object userToken = localContext.getAttribute(HttpClientContext.USER_TOKEN);    if (userToken != null) {                        if (jMeterVariables != null) {            jMeterVariables.putObject(JMETER_VARIABLE_USER_TOKEN, userToken);        }    }}
1
private void setupClientContextBeforeSample(JMeterVariables jMeterVariables, HttpContext localContext)
{    Object userToken = null;        if (jMeterVariables != null) {        userToken = jMeterVariables.getObject(JMETER_VARIABLE_USER_TOKEN);    }    if (userToken != null) {                localContext.setAttribute(HttpClientContext.USER_TOKEN, userToken);    } else {                                String userId = Thread.currentThread().getName();                localContext.setAttribute(HttpClientContext.USER_TOKEN, userId);    }}
1
protected void handleMethod(String method, HTTPSampleResult result, HttpRequestBase httpRequest, HttpContext localContext) throws IOException
{        if (httpRequest instanceof HttpEntityEnclosingRequestBase) {        String entityBody = setupHttpEntityEnclosingRequestData((HttpEntityEnclosingRequestBase) httpRequest);        result.setQueryString(entityBody);    }}
0
protected HTTPSampleResult createSampleResult(URL url, String method)
{    HTTPSampleResult res = new HTTPSampleResult();    configureSampleLabel(res, url);    res.setHTTPMethod(method);    res.setURL(url);    return res;}
0
private CloseableHttpResponse executeRequest(final CloseableHttpClient httpClient, final HttpRequestBase httpRequest, final HttpContext localContext, final URL url) throws IOException
{    AuthManager authManager = getAuthManager();    if (authManager != null) {        Subject subject = authManager.getSubjectForUrl(url);        if (subject != null) {            try {                return Subject.doAs(subject, (PrivilegedExceptionAction<CloseableHttpResponse>) () -> httpClient.execute(httpRequest, localContext));            } catch (PrivilegedActionException e) {                                throw new IllegalArgumentException("Can't execute httpRequest with subject:" + subject, e);            }        }    }    return httpClient.execute(httpRequest, localContext);}
1
private int getHash()
{    int hash = 17;    hash = hash * 31 + (hasProxy ? 1 : 0);    if (hasProxy) {        hash = hash * 31 + getHash(proxyScheme);        hash = hash * 31 + getHash(proxyHost);        hash = hash * 31 + proxyPort;        hash = hash * 31 + getHash(proxyUser);        hash = hash * 31 + getHash(proxyPass);    }    hash = hash * 31 + target.hashCode();    return hash;}
0
private int getHash(String s)
{    return s == null ? 0 : s.hashCode();}
0
public boolean equals(Object obj)
{    if (this == obj) {        return true;    }    if (!(obj instanceof HttpClientKey)) {        return false;    }    HttpClientKey other = (HttpClientKey) obj;    if (this.hasProxy) {                if (proxyScheme == null) {            if (other.proxyScheme != null) {                return false;            }        } else if (!proxyScheme.equals(other.proxyScheme)) {            return false;        }        return this.hasProxy == other.hasProxy && this.proxyPort == other.proxyPort && this.proxyHost.equals(other.proxyHost) && this.proxyUser.equals(other.proxyUser) && this.proxyPass.equals(other.proxyPass) && this.target.equals(other.target);    }        return this.hasProxy == other.hasProxy && this.target.equals(other.target);}
0
public int hashCode()
{    return hashCode;}
0
public String toString()
{    StringBuilder sb = new StringBuilder();    sb.append(target);    if (hasProxy) {        sb.append(" via ");        sb.append(proxyUser);        sb.append('@');        sb.append(proxyScheme);        sb.append("://");        sb.append(proxyHost);        sb.append(':');        sb.append(proxyPort);    }    return sb.toString();}
0
private MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager> setupClient(HttpClientKey key, JMeterVariables jMeterVariables, HttpClientContext clientContext) throws GeneralSecurityException
{    Map<HttpClientKey, MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager>> mapHttpClientPerHttpClientKey = HTTPCLIENTS_CACHE_PER_THREAD_AND_HTTPCLIENTKEY.get();    clientContext.setAttribute(CONTEXT_ATTRIBUTE_CLIENT_KEY, key);    CloseableHttpClient httpClient = null;    MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager> triple = null;    boolean concurrentDwn = this.testElement.isConcurrentDwn();    Map<String, Object> samplerContext = JMeterContextService.getContext().getSamplerContext();    if (concurrentDwn) {        triple = (MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager>) samplerContext.get(CONTEXT_ATTRIBUTE_PARENT_SAMPLE_CLIENT_STATE);    }    if (triple == null) {        triple = mapHttpClientPerHttpClientKey.get(key);    }    if (triple != null) {        httpClient = triple.getLeft();    }    setupProxyAuthState(triple, clientContext);    resetStateIfNeeded(triple, jMeterVariables, clientContext, mapHttpClientPerHttpClientKey);    if (httpClient == null) {                DnsResolver resolver = this.testElement.getDNSResolver();        if (resolver == null) {            resolver = SystemDefaultDnsResolver.INSTANCE;        }        Registry<ConnectionSocketFactory> registry = RegistryBuilder.<ConnectionSocketFactory>create().register("https", new LazyLayeredConnectionSocketFactory()).register("http", CONNECTION_SOCKET_FACTORY).build();                                PoolingHttpClientConnectionManager pHCCM = new PoolingHttpClientConnectionManager(new JMeterDefaultHttpClientConnectionOperator(registry, null, resolver), null, TIME_TO_LIVE, TimeUnit.MILLISECONDS);        pHCCM.setValidateAfterInactivity(VALIDITY_AFTER_INACTIVITY_TIMEOUT);        if (concurrentDwn) {            try {                int maxConcurrentDownloads = Integer.parseInt(this.testElement.getConcurrentPool());                pHCCM.setDefaultMaxPerRoute(Math.max(maxConcurrentDownloads, pHCCM.getDefaultMaxPerRoute()));            } catch (NumberFormatException nfe) {                        }        }        CookieSpecProvider cookieSpecProvider = new IgnoreSpecProvider();        Lookup<CookieSpecProvider> cookieSpecRegistry = RegistryBuilder.<CookieSpecProvider>create().register(CookieSpecs.IGNORE_COOKIES, cookieSpecProvider).build();        HttpClientBuilder builder = HttpClients.custom().setConnectionManager(pHCCM).setSchemePortResolver(new DefaultSchemePortResolver()).setDnsResolver(resolver).setRequestExecutor(REQUEST_EXECUTOR).setSSLSocketFactory(new LazyLayeredConnectionSocketFactory()).setDefaultCookieSpecRegistry(cookieSpecRegistry).setDefaultSocketConfig(SocketConfig.DEFAULT).setRedirectStrategy(new LaxRedirectStrategy()).setConnectionTimeToLive(TIME_TO_LIVE, TimeUnit.MILLISECONDS).setRetryHandler(new StandardHttpRequestRetryHandler(RETRY_COUNT, REQUEST_SENT_RETRY_ENABLED)).setConnectionReuseStrategy(DefaultClientConnectionReuseStrategy.INSTANCE).setProxyAuthenticationStrategy(getProxyAuthStrategy());        if (DISABLE_DEFAULT_UA) {            builder.disableDefaultUserAgent();        }        Lookup<AuthSchemeProvider> authSchemeRegistry = RegistryBuilder.<AuthSchemeProvider>create().register(AuthSchemes.BASIC, new BasicSchemeFactory()).register(AuthSchemes.DIGEST, new DigestSchemeFactory()).register(AuthSchemes.NTLM, new NTLMSchemeFactory()).register(AuthSchemes.SPNEGO, new DynamicSPNegoSchemeFactory(AuthManager.STRIP_PORT, AuthManager.USE_CANONICAL_HOST_NAME)).register(AuthSchemes.KERBEROS, new DynamicKerberosSchemeFactory(AuthManager.STRIP_PORT, AuthManager.USE_CANONICAL_HOST_NAME)).build();        builder.setDefaultAuthSchemeRegistry(authSchemeRegistry);        if (IDLE_TIMEOUT > 0) {            builder.setKeepAliveStrategy(IDLE_STRATEGY);        }                if (key.hasProxy) {            HttpHost proxy = new HttpHost(key.proxyHost, key.proxyPort, key.proxyScheme);            builder.setProxy(proxy);            CredentialsProvider credsProvider = new BasicCredentialsProvider();            if (!key.proxyUser.isEmpty()) {                credsProvider.setCredentials(new AuthScope(key.proxyHost, key.proxyPort), new NTCredentials(key.proxyUser, key.proxyPass, LOCALHOST, PROXY_DOMAIN));            }            builder.setDefaultCredentialsProvider(credsProvider);        }        builder.disableContentCompression().addInterceptorLast(RESPONSE_CONTENT_ENCODING);        if (BASIC_AUTH_PREEMPTIVE) {            builder.addInterceptorFirst(PREEMPTIVE_AUTH_INTERCEPTOR);        }        httpClient = builder.build();        if (log.isDebugEnabled()) {                    }        triple = MutableTriple.of(httpClient, null, pHCCM);                mapHttpClientPerHttpClientKey.put(key, triple);    } else {        if (log.isDebugEnabled()) {                    }    }    if (concurrentDwn) {        samplerContext.put(CONTEXT_ATTRIBUTE_PARENT_SAMPLE_CLIENT_STATE, triple);    }    return triple;}
1
protected AuthenticationStrategy getProxyAuthStrategy()
{    return ProxyAuthenticationStrategy.INSTANCE;}
0
private HttpClientKey createHttpClientKey(URL url)
{    final String host = url.getHost();    String proxyScheme = getProxyScheme();    String proxyHost = getProxyHost();    int proxyPort = getProxyPortInt();    String proxyPass = getProxyPass();    String proxyUser = getProxyUser();        boolean useStaticProxy = isStaticProxy(host);        boolean useDynamicProxy = isDynamicProxy(proxyHost, proxyPort);    boolean useProxy = useStaticProxy || useDynamicProxy;        if (!useDynamicProxy) {        proxyScheme = PROXY_SCHEME;        proxyHost = PROXY_HOST;        proxyPort = PROXY_PORT;        proxyUser = PROXY_USER;        proxyPass = PROXY_PASS;    }        return new HttpClientKey(url, useProxy, proxyScheme, proxyHost, proxyPort, proxyUser, proxyPass);}
0
private void resetStateIfNeeded(MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager> triple, JMeterVariables jMeterVariables, HttpClientContext clientContext, Map<HttpClientKey, MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager>> mapHttpClientPerHttpClientKey)
{    if (resetStateOnThreadGroupIteration.get().booleanValue()) {        closeCurrentConnections(mapHttpClientPerHttpClientKey);        clientContext.removeAttribute(HttpClientContext.USER_TOKEN);        clientContext.removeAttribute(HttpClientContext.PROXY_AUTH_STATE);        if (triple != null) {            triple.setMiddle(null);        }        jMeterVariables.remove(JMETER_VARIABLE_USER_TOKEN);        ((JsseSSLManager) SSLManager.getInstance()).resetContext();        resetStateOnThreadGroupIteration.set(Boolean.FALSE);    }}
0
private void closeCurrentConnections(Map<HttpClientKey, MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager>> mapHttpClientPerHttpClientKey)
{    for (MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager> triple : mapHttpClientPerHttpClientKey.values()) {        PoolingHttpClientConnectionManager poolingHttpClientConnectionManager = triple.getRight();        poolingHttpClientConnectionManager.closeExpiredConnections();        poolingHttpClientConnectionManager.closeIdleConnections(1L, TimeUnit.MICROSECONDS);    }}
0
protected void setupRequest(URL url, HttpRequestBase httpRequest, HTTPSampleResult res) throws IOException
{    RequestConfig.Builder rCB = RequestConfig.custom();        final InetAddress inetAddr = getIpSourceAddress();    if (inetAddr != null) {                rCB.setLocalAddress(inetAddr);    } else if (localAddress != null) {        rCB.setLocalAddress(localAddress);    }    int rto = getResponseTimeout();    if (rto > 0) {        rCB.setSocketTimeout(rto);    }    int cto = getConnectTimeout();    if (cto > 0) {        rCB.setConnectTimeout(cto);    }    rCB.setRedirectsEnabled(getAutoRedirects());    rCB.setMaxRedirects(HTTPSamplerBase.MAX_REDIRECTS);    httpRequest.setConfig(rCB.build());        if (getUseKeepAlive()) {        httpRequest.setHeader(HTTPConstants.HEADER_CONNECTION, HTTPConstants.KEEP_ALIVE);    } else {        httpRequest.setHeader(HTTPConstants.HEADER_CONNECTION, HTTPConstants.CONNECTION_CLOSE);    }    setConnectionHeaders(httpRequest, url, getHeaderManager(), getCacheManager());    String cookies = setConnectionCookie(httpRequest, url, getCookieManager());    if (res != null) {        if (cookies != null && !cookies.isEmpty()) {            res.setCookies(cookies);        } else {                        res.setCookies(getOnlyCookieFromHeaders(httpRequest));        }    }}
0
protected void setDefaultRequestHeaders(HttpRequest request)
{}
0
private String getResponseHeaders(HttpResponse response)
{    Header[] rh = response.getAllHeaders();    StringBuilder headerBuf = new StringBuilder(40 * (rh.length + 1));        headerBuf.append(response.getStatusLine());        headerBuf.append("\n");    for (Header responseHeader : rh) {        writeHeader(headerBuf, responseHeader);    }    return headerBuf.toString();}
0
private void writeHeader(StringBuilder headerBuffer, Header header)
{    if (header instanceof BufferedHeader) {        CharArrayBuffer buffer = ((BufferedHeader) header).getBuffer();                headerBuffer.append(buffer.buffer(), 0, buffer.length()).append('\n');    } else {        headerBuffer.append(header.getName()).append(        ": ").append(header.getValue()).append(        '\n');    }}
0
protected String setConnectionCookie(HttpRequest request, URL url, CookieManager cookieManager)
{    String cookieHeader = null;    if (cookieManager != null) {        cookieHeader = cookieManager.getCookieHeaderForURL(url);        if (cookieHeader != null) {            request.setHeader(HTTPConstants.HEADER_COOKIE, cookieHeader);        }    }    return cookieHeader;}
0
protected void setConnectionHeaders(HttpRequestBase request, URL url, HeaderManager headerManager, CacheManager cacheManager)
{    if (headerManager != null) {        CollectionProperty headers = headerManager.getHeaders();        if (headers != null) {            for (JMeterProperty jMeterProperty : headers) {                org.apache.jmeter.protocol.http.control.Header header = (org.apache.jmeter.protocol.http.control.Header) jMeterProperty.getObjectValue();                String headerName = header.getName();                                if (!HTTPConstants.HEADER_CONTENT_LENGTH.equalsIgnoreCase(headerName)) {                    String headerValue = header.getValue();                    if (HTTPConstants.HEADER_HOST.equalsIgnoreCase(headerName)) {                        int port = getPortFromHostHeader(headerValue, url.getPort());                                                                        headerValue = headerValue.replaceFirst(":\\d+$", "");                        if (port != -1 && port == url.getDefaultPort()) {                                                        port = -1;                        }                        if (port == -1) {                            request.addHeader(HEADER_HOST, headerValue);                        } else {                            request.addHeader(HEADER_HOST, headerValue + ":" + port);                        }                    } else {                        request.addHeader(headerName, headerValue);                    }                }            }        }    }    if (cacheManager != null) {        cacheManager.setHeaders(url, request);    }}
0
private int getPortFromHostHeader(String hostHeaderValue, int defaultValue)
{    String[] hostParts = hostHeaderValue.split(":");    if (hostParts.length > 1) {        String portString = hostParts[hostParts.length - 1];        if (PORT_PATTERN.matcher(portString).matches()) {            return Integer.parseInt(portString);        }    }    return defaultValue;}
0
private String getAllHeadersExceptCookie(HttpRequest method)
{    return getFromHeadersMatchingPredicate(method, ALL_EXCEPT_COOKIE);}
0
private String getOnlyCookieFromHeaders(HttpRequest method)
{    String cookieHeader = getFromHeadersMatchingPredicate(method, ONLY_COOKIE).trim();    if (!cookieHeader.isEmpty()) {        return cookieHeader.substring((HTTPConstants.HEADER_COOKIE_IN_REQUEST).length(), cookieHeader.length()).trim();    }    return "";}
0
private String getFromHeadersMatchingPredicate(HttpRequest method, Predicate<String> predicate)
{    if (method != null) {                StringBuilder hdrs = new StringBuilder(150);        Header[] requestHeaders = method.getAllHeaders();        for (Header requestHeader : requestHeaders) {                        if (predicate.test(requestHeader.getName())) {                writeHeader(hdrs, requestHeader);            }        }        return hdrs.toString();    }        return "";}
0
public void writeTo(final OutputStream out) throws IOException
{    if (hideFileData) {                out.write("<actual file content, not shown here>".getBytes());    } else {        super.writeTo(out);    }}
0
protected String setupHttpEntityEnclosingRequestData(HttpEntityEnclosingRequestBase entityEnclosingRequest) throws IOException
{        StringBuilder postedBody = new StringBuilder(1000);    HTTPFileArg[] files = getHTTPFiles();    final String contentEncoding = getContentEncodingOrNull();    final boolean haveContentEncoding = contentEncoding != null;        if (getUseMultipart()) {                        Charset charset;        if (haveContentEncoding) {            charset = Charset.forName(contentEncoding);        } else {            charset = MIME.DEFAULT_CHARSET;        }        if (log.isDebugEnabled()) {                    }                MultipartEntityBuilder multipartEntityBuilder = MultipartEntityBuilder.create();        if (getDoBrowserCompatibleMultipart()) {            multipartEntityBuilder.setLaxMode();        } else {            multipartEntityBuilder.setStrictMode();        }                for (JMeterProperty jMeterProperty : getArguments()) {            HTTPArgument arg = (HTTPArgument) jMeterProperty.getObjectValue();            String parameterName = arg.getName();            if (arg.isSkippable(parameterName)) {                continue;            }            StringBody stringBody = new StringBody(arg.getValue(), ContentType.create(arg.getContentType(), charset));            FormBodyPart formPart = FormBodyPartBuilder.create(parameterName, stringBody).build();            multipartEntityBuilder.addPart(formPart);        }                        ViewableFileBody[] fileBodies = new ViewableFileBody[files.length];        for (int i = 0; i < files.length; i++) {            HTTPFileArg file = files[i];            File reservedFile = FileServer.getFileServer().getResolvedFile(file.getPath());            fileBodies[i] = new ViewableFileBody(reservedFile, ContentType.create(file.getMimeType()));            multipartEntityBuilder.addPart(file.getParamName(), fileBodies[i]);        }        HttpEntity entity = multipartEntityBuilder.build();        entityEnclosingRequest.setEntity(entity);        writeEntityToSB(postedBody, entity, fileBodies, contentEncoding);    } else {                                Header contentTypeHeader = entityEnclosingRequest.getFirstHeader(HTTPConstants.HEADER_CONTENT_TYPE);        boolean hasContentTypeHeader = contentTypeHeader != null && contentTypeHeader.getValue() != null && contentTypeHeader.getValue().length() > 0;                if (!hasArguments() && getSendFileAsPostBody()) {                        HTTPFileArg file = files[0];            if (!hasContentTypeHeader) {                                if (file.getMimeType() != null && file.getMimeType().length() > 0) {                    entityEnclosingRequest.setHeader(HTTPConstants.HEADER_CONTENT_TYPE, file.getMimeType());                } else if (ADD_CONTENT_TYPE_TO_POST_IF_MISSING) {                    entityEnclosingRequest.setHeader(HTTPConstants.HEADER_CONTENT_TYPE, HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED);                }            }            FileEntity fileRequestEntity = new FileEntity(FileServer.getFileServer().getResolvedFile(file.getPath()), (ContentType) null);            entityEnclosingRequest.setEntity(fileRequestEntity);                        postedBody.append("<actual file content, not shown here>");        } else {                        if (getSendParameterValuesAsPostBody()) {                                if (!hasContentTypeHeader) {                    HTTPFileArg file = files.length > 0 ? files[0] : null;                    if (file != null && file.getMimeType() != null && file.getMimeType().length() > 0) {                        entityEnclosingRequest.setHeader(HTTPConstants.HEADER_CONTENT_TYPE, file.getMimeType());                    } else if (ADD_CONTENT_TYPE_TO_POST_IF_MISSING) {                        entityEnclosingRequest.setHeader(HTTPConstants.HEADER_CONTENT_TYPE, HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED);                    }                }                                StringBuilder postBody = new StringBuilder();                for (JMeterProperty jMeterProperty : getArguments()) {                    HTTPArgument arg = (HTTPArgument) jMeterProperty.getObjectValue();                                        if (haveContentEncoding) {                        postBody.append(arg.getEncodedValue(contentEncoding));                    } else {                        postBody.append(arg.getEncodedValue());                    }                }                                StringEntity requestEntity = new StringEntity(postBody.toString(), contentEncoding);                entityEnclosingRequest.setEntity(requestEntity);                postedBody.append(postBody.toString());            } else {                                if (!hasContentTypeHeader && ADD_CONTENT_TYPE_TO_POST_IF_MISSING) {                    entityEnclosingRequest.setHeader(HTTPConstants.HEADER_CONTENT_TYPE, HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED);                }                String urlContentEncoding = contentEncoding;                UrlEncodedFormEntity entity = createUrlEncodedFormEntity(urlContentEncoding);                entityEnclosingRequest.setEntity(entity);                writeEntityToSB(postedBody, entity, EMPTY_FILE_BODIES, contentEncoding);            }        }    }    return postedBody.toString();}
1
private void writeEntityToSB(final StringBuilder postedBody, final HttpEntity entity, final ViewableFileBody[] fileBodies, final String contentEncoding) throws IOException
{    if (entity.isRepeatable()) {        ByteArrayOutputStream bos = new ByteArrayOutputStream();        for (ViewableFileBody fileBody : fileBodies) {            fileBody.hideFileData = true;        }        entity.writeTo(bos);        for (ViewableFileBody fileBody : fileBodies) {            fileBody.hideFileData = false;        }        bos.flush();                postedBody.append(bos.toString(contentEncoding == null ? SampleResult.DEFAULT_HTTP_ENCODING : contentEncoding));        bos.close();    } else {                postedBody.append("<Entity was not repeatable, cannot view what was sent>");    }}
0
protected String sendEntityData(HttpEntityEnclosingRequestBase entity) throws IOException
{    boolean hasEntityBody = false;    final HTTPFileArg[] files = getHTTPFiles();                final HTTPFileArg file = files.length > 0 ? files[0] : null;    String contentTypeValue;    if (file != null && file.getMimeType() != null && file.getMimeType().length() > 0) {        contentTypeValue = file.getMimeType();                entity.setHeader(HEADER_CONTENT_TYPE, contentTypeValue);    }            final String charset = getContentEncoding(HTTP.DEF_CONTENT_CHARSET.name());        if (!hasArguments() && getSendFileAsPostBody()) {        hasEntityBody = true;                File reservedFile = FileServer.getFileServer().getResolvedFile(files[0].getPath());                FileEntity fileRequestEntity = new FileEntity(reservedFile);        entity.setEntity(fileRequestEntity);    } else     if (getSendParameterValuesAsPostBody()) {        hasEntityBody = true;                Arguments arguments = getArguments();        StringBuilder entityBodyContent = new StringBuilder(arguments.getArgumentCount() * 15);        for (JMeterProperty jMeterProperty : arguments) {            HTTPArgument arg = (HTTPArgument) jMeterProperty.getObjectValue();                        if (charset != null) {                entityBodyContent.append(arg.getEncodedValue(charset));            } else {                entityBodyContent.append(arg.getEncodedValue());            }        }        StringEntity requestEntity = new StringEntity(entityBodyContent.toString(), charset);        entity.setEntity(requestEntity);    } else if (hasArguments()) {        hasEntityBody = true;        entity.setEntity(createUrlEncodedFormEntity(getContentEncodingOrNull()));    }        if (hasEntityBody) {                        final HttpEntity entityEntry = entity.getEntity();                StringBuilder entityBody = new StringBuilder(65);        writeEntityToSB(entityBody, entityEntry, EMPTY_FILE_BODIES, charset);        return entityBody.toString();    }        return "";}
0
private UrlEncodedFormEntity createUrlEncodedFormEntity(final String contentEncoding) throws UnsupportedEncodingException
{            PropertyIterator args = getArguments().iterator();    List<NameValuePair> nvps = new ArrayList<>();    String urlContentEncoding = contentEncoding;    if (urlContentEncoding == null || urlContentEncoding.length() == 0) {                urlContentEncoding = EncoderCache.URL_ARGUMENT_ENCODING;    }    while (args.hasNext()) {        HTTPArgument arg = (HTTPArgument) args.next().getObjectValue();                                String parameterName = arg.getName();        if (arg.isSkippable(parameterName)) {            continue;        }        String parameterValue = arg.getValue();        if (!arg.isAlwaysEncoded()) {                                                            parameterName = URLDecoder.decode(parameterName, urlContentEncoding);            parameterValue = URLDecoder.decode(parameterValue, urlContentEncoding);        }                nvps.add(new BasicNameValuePair(parameterName, parameterValue));    }    return new UrlEncodedFormEntity(nvps, urlContentEncoding);}
0
private String getContentEncodingOrNull()
{    return getContentEncoding(null);}
0
private String getContentEncoding(String dflt)
{    String ce = getContentEncoding();    if (isNullOrEmptyTrimmed(ce)) {        return dflt;    } else {        return ce;    }}
0
private void saveConnectionCookies(HttpResponse method, URL u, CookieManager cookieManager)
{    if (cookieManager != null) {        Header[] hdrs = method.getHeaders(HTTPConstants.HEADER_SET_COOKIE);        for (Header hdr : hdrs) {            cookieManager.addCookieFromHeader(hdr.getValue(), u);        }    }}
0
protected void notifyFirstSampleAfterLoopRestart()
{        JMeterVariables jMeterVariables = JMeterContextService.getContext().getVariables();    if (jMeterVariables.isSameUserOnNextIteration()) {                resetStateOnThreadGroupIteration.set(false);    } else {                resetStateOnThreadGroupIteration.set(Boolean.valueOf(RESET_STATE_ON_THREAD_GROUP_ITERATION));    }    }
1
protected void threadFinished()
{        closeThreadLocalConnections();}
1
private void closeThreadLocalConnections()
{        Map<HttpClientKey, MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager>> mapHttpClientPerHttpClientKey = HTTPCLIENTS_CACHE_PER_THREAD_AND_HTTPCLIENTKEY.get();    if (mapHttpClientPerHttpClientKey != null) {        for (MutableTriple<CloseableHttpClient, AuthState, PoolingHttpClientConnectionManager> triple : mapHttpClientPerHttpClientKey.values()) {            JOrphanUtils.closeQuietly(triple.getLeft());            JOrphanUtils.closeQuietly(triple.getRight());        }        mapHttpClientPerHttpClientKey.clear();    }}
0
public boolean interrupt()
{    HttpUriRequest request = currentRequest;    if (request != null) {                currentRequest = null;        try {            request.abort();        } catch (UnsupportedOperationException e) {                    }    }    return request != null;}
1
protected static boolean isNonProxy(String host)
{    return nonProxyHostFull.contains(host) || isPartialMatch(host);}
0
protected static boolean isPartialMatch(String host)
{    for (int i = 0; i < NON_PROXY_HOST_SUFFIX_SIZE; i++) {        if (host.endsWith(nonProxyHostSuffix.get(i))) {            return true;        }    }    return false;}
0
protected boolean isDynamicProxy(String proxyHost, int proxyPort)
{    return !JOrphanUtils.isBlank(proxyHost) && proxyPort > 0;}
0
protected static boolean isStaticProxy(String host)
{    return PROXY_DEFINED && !isNonProxy(host);}
0
protected static boolean isNullOrEmptyTrimmed(String value)
{    return JOrphanUtils.isBlank(value);}
0
protected void setPostHeaders(URLConnection conn) throws IOException
{    postOrPutWriter = new PostWriter();    postOrPutWriter.setHeaders(conn, testElement);}
0
private void setPutHeaders(URLConnection conn) throws IOException
{    postOrPutWriter = new PutWriter();    postOrPutWriter.setHeaders(conn, testElement);}
0
protected String sendPostData(URLConnection connection) throws IOException
{    return postOrPutWriter.sendPostData(connection, testElement);}
0
private String sendPutData(URLConnection connection) throws IOException
{    return postOrPutWriter.sendPostData(connection, testElement);}
0
protected HttpURLConnection setupConnection(URL u, String method, HTTPSampleResult res) throws IOException
{    SSLManager sslmgr = null;    if (HTTPConstants.PROTOCOL_HTTPS.equalsIgnoreCase(u.getProtocol())) {        try {                        sslmgr = SSLManager.getInstance();        } catch (Exception e) {                    }    }    final HttpURLConnection conn;    final String proxyHost = getProxyHost();    final int proxyPort = getProxyPortInt();    if (proxyHost.length() > 0 && proxyPort > 0) {        Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(proxyHost, proxyPort));                conn = (HttpURLConnection) u.openConnection(proxy);    } else {        conn = (HttpURLConnection) u.openConnection();    }        conn.setInstanceFollowRedirects(getAutoRedirects());    int cto = getConnectTimeout();    if (cto > 0) {        conn.setConnectTimeout(cto);    }    int rto = getResponseTimeout();    if (rto > 0) {        conn.setReadTimeout(rto);    }    if (HTTPConstants.PROTOCOL_HTTPS.equalsIgnoreCase(u.getProtocol())) {        try {            if (null != sslmgr) {                                sslmgr.setContext(conn);            }        } catch (Exception e) {                    }    }        if (getUseKeepAlive()) {        conn.setRequestProperty(HTTPConstants.HEADER_CONNECTION, HTTPConstants.KEEP_ALIVE);    } else {        conn.setRequestProperty(HTTPConstants.HEADER_CONNECTION, HTTPConstants.CONNECTION_CLOSE);    }    conn.setRequestMethod(method);    setConnectionHeaders(conn, u, getHeaderManager(), getCacheManager());    String cookies = setConnectionCookie(conn, u, getCookieManager());    Map<String, String> securityHeaders = setConnectionAuthorization(conn, u, getAuthManager());    if (method.equals(HTTPConstants.POST)) {        setPostHeaders(conn);    } else if (method.equals(HTTPConstants.PUT)) {        setPutHeaders(conn);    }    if (res != null) {        res.setRequestHeaders(getAllHeadersExceptCookie(conn, securityHeaders));        if (cookies != null && !cookies.isEmpty()) {            res.setCookies(cookies);        } else {                        res.setCookies(getOnlyCookieFromHeaders(conn, securityHeaders));        }    }    return conn;}
1
protected byte[] readResponse(HttpURLConnection conn, SampleResult res) throws IOException
{    BufferedInputStream in;    final long contentLength = conn.getContentLength();    if ((contentLength == 0) && OBEY_CONTENT_LENGTH) {                res.setResponseHeaders(getResponseHeaders(conn));        res.latencyEnd();        return NULL_BA;    }        boolean gzipped = HTTPConstants.ENCODING_GZIP.equals(conn.getContentEncoding());    CountingInputStream instream = null;    try {        instream = new CountingInputStream(conn.getInputStream());        if (gzipped) {            in = new BufferedInputStream(new GZIPInputStream(instream));        } else {            in = new BufferedInputStream(instream);        }    } catch (IOException e) {        if (!(e.getCause() instanceof FileNotFoundException)) {                        Throwable cause = e.getCause();            if (cause != null) {                                if (cause instanceof Error) {                    throw (Error) cause;                }            }        }                InputStream errorStream = conn.getErrorStream();        if (errorStream == null) {            if (log.isInfoEnabled()) {                            }            res.setResponseHeaders(getResponseHeaders(conn));            res.latencyEnd();            return NULL_BA;        }        if (log.isInfoEnabled()) {                    }        if (gzipped) {            in = new BufferedInputStream(new GZIPInputStream(errorStream));        } else {            in = new BufferedInputStream(errorStream);        }    } catch (Exception e) {                Throwable cause = e.getCause();        if (cause != null) {                        if (cause instanceof Error) {                throw (Error) cause;            }        }        in = new BufferedInputStream(conn.getErrorStream());    }        byte[] responseData = readResponse(res, in, contentLength);    if (instream != null) {        res.setBodySize(instream.getByteCount());        instream.close();    }    return responseData;}
1
protected String getResponseHeaders(HttpURLConnection conn)
{    StringBuilder headerBuf = new StringBuilder();        headerBuf.append(conn.getHeaderField(0));        headerBuf.append("\n");    String hfk;    for (int i = 1; (hfk = conn.getHeaderFieldKey(i)) != null; i++) {        headerBuf.append(hfk);                headerBuf.append(": ");        headerBuf.append(conn.getHeaderField(i));                headerBuf.append("\n");    }    return headerBuf.toString();}
0
private String setConnectionCookie(HttpURLConnection conn, URL u, CookieManager cookieManager)
{    String cookieHeader = null;    if (cookieManager != null) {        cookieHeader = cookieManager.getCookieHeaderForURL(u);        if (cookieHeader != null) {            conn.setRequestProperty(HTTPConstants.HEADER_COOKIE, cookieHeader);        }    }    return cookieHeader;}
0
private void setConnectionHeaders(HttpURLConnection conn, URL u, HeaderManager headerManager, CacheManager cacheManager)
{        Header[] arrayOfHeaders = null;    if (headerManager != null) {        CollectionProperty headers = headerManager.getHeaders();        if (headers != null) {            int i = 0;            arrayOfHeaders = new Header[headers.size()];            for (JMeterProperty jMeterProperty : headers) {                Header header = (Header) jMeterProperty.getObjectValue();                String n = header.getName();                String v = header.getValue();                arrayOfHeaders[i++] = header;                conn.addRequestProperty(n, v);            }        }    }    if (cacheManager != null) {        cacheManager.setHeaders(conn, arrayOfHeaders, u);    }}
0
private String getOnlyCookieFromHeaders(HttpURLConnection conn, Map<String, String> securityHeaders)
{    String cookieHeader = getFromConnectionHeaders(conn, securityHeaders, ONLY_COOKIE, false).trim();    if (!cookieHeader.isEmpty()) {        return cookieHeader.substring((HTTPConstants.HEADER_COOKIE_IN_REQUEST).length(), cookieHeader.length()).trim();    }    return "";}
0
private String getAllHeadersExceptCookie(HttpURLConnection conn, Map<String, String> securityHeaders)
{    return getFromConnectionHeaders(conn, securityHeaders, ALL_EXCEPT_COOKIE, true);}
0
private String getFromConnectionHeaders(HttpURLConnection conn, Map<String, String> securityHeaders, Predicate<String> predicate, boolean addSecurityHeaders)
{        StringBuilder hdrs = new StringBuilder(100);    Map<String, List<String>> requestHeaders = conn.getRequestProperties();    for (Map.Entry<String, List<String>> entry : requestHeaders.entrySet()) {        String headerKey = entry.getKey();                if (predicate.test(headerKey)) {                        for (String value : entry.getValue()) {                hdrs.append(headerKey);                                hdrs.append(": ");                hdrs.append(value);                                hdrs.append("\n");            }        }    }    if (addSecurityHeaders) {        for (Map.Entry<String, String> entry : securityHeaders.entrySet()) {                        hdrs.append(entry.getKey()).append(": ").append(entry.getValue()).append(            "\n");        }    }    return hdrs.toString();}
0
private Map<String, String> setConnectionAuthorization(HttpURLConnection conn, URL u, AuthManager authManager)
{    if (authManager != null) {        Authorization auth = authManager.getAuthForURL(u);        if (auth != null) {            String headerValue = auth.toBasicHeader();            conn.setRequestProperty(HTTPConstants.HEADER_AUTHORIZATION, headerValue);                                    Map<String, String> map = new HashMap<>(1);            map.put(HTTPConstants.HEADER_AUTHORIZATION, headerValue);            return map;        }    }    return Collections.emptyMap();}
0
private Header[] getHeaders(HeaderManager headerManager)
{    if (headerManager != null) {        final CollectionProperty headers = headerManager.getHeaders();        if (headers != null) {            final List<Header> allHeaders = new ArrayList<>(headers.size());            for (final JMeterProperty jMeterProperty : headers) {                allHeaders.add((Header) jMeterProperty.getObjectValue());            }            return allHeaders.toArray(new Header[allHeaders.size()]);        }    }    return new Header[0];}
0
protected void disconnect(HttpURLConnection conn)
{    if (conn != null) {        String connection = conn.getHeaderField(HTTPConstants.HEADER_CONNECTION);        String protocol = conn.getHeaderField(0);        if ((connection == null && (protocol == null || !protocol.startsWith(HTTPConstants.HTTP_1_1))) || (connection != null && connection.equalsIgnoreCase(HTTPConstants.CONNECTION_CLOSE))) {            conn.disconnect();        }        }}
0
private void saveConnectionCookies(HttpURLConnection conn, URL u, CookieManager cookieManager)
{    if (cookieManager != null) {        for (int i = 1; conn.getHeaderFieldKey(i) != null; i++) {            if (conn.getHeaderFieldKey(i).equalsIgnoreCase(HTTPConstants.HEADER_SET_COOKIE)) {                cookieManager.addCookieFromHeader(conn.getHeaderField(i), u);            }        }    }}
0
public boolean interrupt()
{    HttpURLConnection conn = savedConn;    if (conn != null) {        savedConn = null;        conn.disconnect();    }    return conn != null;}
0
public boolean interrupt()
{    return hc.interrupt();}
0
protected HTTPSampleResult sample(java.net.URL u, String method, boolean areFollowingRedirect, int depth)
{    return hc.sample(u, method, areFollowingRedirect, depth);}
0
public static String[] getSourceTypeList()
{    final SourceType[] types = SourceType.values();    final String[] displayStrings = new String[types.length];    for (int i = 0; i < types.length; i++) {        displayStrings[i] = JMeterUtils.getResString(types[i].propertyName);    }    return displayStrings;}
0
public boolean getSendFileAsPostBody()
{            HTTPFileArg[] files = getHTTPFiles();    return (files.length == 1) && (files[0].getPath().length() > 0) && (files[0].getParamName().length() == 0);}
0
public boolean getSendParameterValuesAsPostBody()
{    if (getPostBodyRaw()) {        return true;    } else {        boolean hasArguments = false;        for (JMeterProperty jMeterProperty : getArguments()) {            hasArguments = true;            HTTPArgument arg = (HTTPArgument) jMeterProperty.getObjectValue();            if (arg.getName() != null && arg.getName().length() > 0) {                return false;            }        }        return hasArguments;    }}
0
public boolean getUseMultipartForPost()
{            HTTPFileArg[] files = getHTTPFiles();    return HTTPConstants.POST.equals(getMethod()) && (getDoMultipart() || (files.length > 0 && hasNoMissingFile(files) && !getSendFileAsPostBody()));}
0
public boolean getUseMultipart()
{            HTTPFileArg[] files = getHTTPFiles();    return getDoMultipart() || (files.length > 0 && hasNoMissingFile(files) && !getSendFileAsPostBody());}
0
private boolean hasNoMissingFile(HTTPFileArg[] files)
{    for (HTTPFileArg httpFileArg : files) {        if (StringUtils.isEmpty(httpFileArg.getPath())) {                        return false;        }    }    return true;}
1
public void setProtocol(String value)
{    setProperty(PROTOCOL, value.toLowerCase(java.util.Locale.ENGLISH));}
0
public String getProtocol()
{    String protocol = getPropertyAsString(PROTOCOL);    if (protocol == null || protocol.length() == 0) {        return DEFAULT_PROTOCOL;    }    return protocol;}
0
public void setPath(String path)
{        setPath(path, EncoderCache.URL_ARGUMENT_ENCODING);}
0
public void setPath(String path, String contentEncoding)
{    boolean fullUrl = path.startsWith(HTTP_PREFIX) || path.startsWith(HTTPS_PREFIX);    String method = getMethod();    boolean getOrDelete = HTTPConstants.GET.equals(method) || HTTPConstants.DELETE.equals(method);    if (!fullUrl && getOrDelete) {        int index = path.indexOf(QRY_PFX);        if (index > -1) {            setProperty(PATH, path.substring(0, index));                        parseArguments(path.substring(index + 1), contentEncoding);        } else {            setProperty(PATH, path);        }    } else {        setProperty(PATH, path);    }}
0
public String getPath()
{    String p = getPropertyAsString(PATH);    return encodeSpaces(p);}
0
public void setFollowRedirects(boolean value)
{    setProperty(new BooleanProperty(FOLLOW_REDIRECTS, value));}
0
public boolean getFollowRedirects()
{    return getPropertyAsBoolean(FOLLOW_REDIRECTS);}
0
public void setAutoRedirects(boolean value)
{    setProperty(new BooleanProperty(AUTO_REDIRECTS, value));}
0
public boolean getAutoRedirects()
{    return getPropertyAsBoolean(AUTO_REDIRECTS);}
0
public void setMethod(String value)
{    setProperty(METHOD, value);}
0
public String getMethod()
{    return getPropertyAsString(METHOD);}
0
public void setContentEncoding(String charsetName)
{    setProperty(CONTENT_ENCODING, charsetName);}
0
public String getContentEncoding()
{    return getPropertyAsString(CONTENT_ENCODING);}
0
public void setUseKeepAlive(boolean value)
{    setProperty(new BooleanProperty(USE_KEEPALIVE, value));}
0
public boolean getUseKeepAlive()
{    return getPropertyAsBoolean(USE_KEEPALIVE);}
0
public void setDoMultipartPost(boolean value)
{    setDoMultipart(value);}
0
public boolean getDoMultipartPost()
{    return getDoMultipart();}
0
public void setDoMultipart(boolean value)
{    setProperty(new BooleanProperty(DO_MULTIPART_POST, value));}
0
public boolean getDoMultipart()
{    return getPropertyAsBoolean(DO_MULTIPART_POST, false);}
0
public void setDoBrowserCompatibleMultipart(boolean value)
{    setProperty(BROWSER_COMPATIBLE_MULTIPART, value, BROWSER_COMPATIBLE_MULTIPART_MODE_DEFAULT);}
0
public boolean getDoBrowserCompatibleMultipart()
{    return getPropertyAsBoolean(BROWSER_COMPATIBLE_MULTIPART, BROWSER_COMPATIBLE_MULTIPART_MODE_DEFAULT);}
0
public void setMonitor(String value)
{    this.setProperty(MONITOR, value);}
0
public void setMonitor(boolean truth)
{    this.setProperty(MONITOR, truth);}
0
public String getMonitor()
{    return "false";}
0
public boolean isMonitor()
{    return false;}
0
public void setImplementation(String value)
{    this.setProperty(IMPLEMENTATION, value);}
0
public String getImplementation()
{    return this.getPropertyAsString(IMPLEMENTATION);}
0
public boolean useMD5()
{    return this.getPropertyAsBoolean(MD5, false);}
0
public void setMD5(boolean truth)
{    this.setProperty(MD5, truth, false);}
0
public void addEncodedArgument(String name, String value)
{    this.addEncodedArgument(name, value, ARG_VAL_SEP);}
0
public void addEncodedArgument(String name, String value, String metaData, String contentEncoding)
{        HTTPArgument arg;    final boolean nonEmptyEncoding = !StringUtils.isEmpty(contentEncoding);    if (nonEmptyEncoding) {        arg = new HTTPArgument(name, value, metaData, true, contentEncoding);    } else {        arg = new HTTPArgument(name, value, metaData, true);    }        String valueEncoded;    if (nonEmptyEncoding) {        try {            valueEncoded = arg.getEncodedValue(contentEncoding);        } catch (UnsupportedEncodingException e) {                                    valueEncoded = arg.getEncodedValue();        }    } else {        valueEncoded = arg.getEncodedValue();    }        if (arg.getName().equals(arg.getEncodedName()) && arg.getValue().equals(valueEncoded)) {        arg.setAlwaysEncoded(false);    }    this.getArguments().addArgument(arg);}
1
public void addEncodedArgument(String name, String value, String metaData)
{    this.addEncodedArgument(name, value, metaData, null);}
0
public void addNonEncodedArgument(String name, String value, String metadata)
{    HTTPArgument arg = new HTTPArgument(name, value, metadata, false);    arg.setAlwaysEncoded(false);    this.getArguments().addArgument(arg);}
0
public void addNonEncodedArgument(String name, String value, String metadata, String contentType)
{    HTTPArgument arg = new HTTPArgument(name, value, metadata, false);    arg.setContentType(contentType);    arg.setAlwaysEncoded(false);    this.getArguments().addArgument(arg);}
0
public void addArgument(String name, String value)
{    this.getArguments().addArgument(new HTTPArgument(name, value));}
0
public void addArgument(String name, String value, String metadata)
{    this.getArguments().addArgument(new HTTPArgument(name, value, metadata));}
0
public boolean hasArguments()
{    return getArguments().getArgumentCount() > 0;}
0
public void addTestElement(TestElement el)
{    if (el instanceof CookieManager) {        setCookieManager((CookieManager) el);    } else if (el instanceof CacheManager) {        setCacheManager((CacheManager) el);    } else if (el instanceof HeaderManager) {        setHeaderManager((HeaderManager) el);    } else if (el instanceof AuthManager) {        setAuthManager((AuthManager) el);    } else if (el instanceof DNSCacheManager) {        setDNSResolver((DNSCacheManager) el);    } else if (el instanceof KeystoreConfig) {        setKeystoreConfigProperty((KeystoreConfig) el);    } else {        super.addTestElement(el);    }}
0
public void clearTestElementChildren()
{    removeProperty(HEADER_MANAGER);}
0
public void setPort(int value)
{    setProperty(new IntegerProperty(PORT, value));}
0
public static int getDefaultPort(String protocol, int port)
{    if (port == URL_UNSPECIFIED_PORT) {        if (protocol.equalsIgnoreCase(HTTPConstants.PROTOCOL_HTTP)) {            return HTTPConstants.DEFAULT_HTTP_PORT;        } else if (protocol.equalsIgnoreCase(HTTPConstants.PROTOCOL_HTTPS)) {            return HTTPConstants.DEFAULT_HTTPS_PORT;        }    }    return port;}
0
public int getPortIfSpecified()
{    String portAsString = getPropertyAsString(PORT);    if (portAsString == null || portAsString.isEmpty()) {        return UNSPECIFIED_PORT;    }    try {        return Integer.parseInt(portAsString.trim());    } catch (NumberFormatException e) {        return UNSPECIFIED_PORT;    }}
0
public boolean isProtocolDefaultPort()
{    final int port = getPortIfSpecified();    final String protocol = getProtocol();    boolean isDefaultHTTPPort = HTTPConstants.PROTOCOL_HTTP.equalsIgnoreCase(protocol) && port == HTTPConstants.DEFAULT_HTTP_PORT;    boolean isDefaultHTTPSPort = HTTPConstants.PROTOCOL_HTTPS.equalsIgnoreCase(protocol) && port == HTTPConstants.DEFAULT_HTTPS_PORT;    return port == UNSPECIFIED_PORT || isDefaultHTTPPort || isDefaultHTTPSPort;}
0
public int getPort()
{    final int port = getPortIfSpecified();    if (port == UNSPECIFIED_PORT) {        String prot = getProtocol();        if (HTTPConstants.PROTOCOL_HTTPS.equalsIgnoreCase(prot)) {            return HTTPConstants.DEFAULT_HTTPS_PORT;        }        if (!HTTPConstants.PROTOCOL_HTTP.equalsIgnoreCase(prot)) {                            }        return HTTPConstants.DEFAULT_HTTP_PORT;    }    return port;}
1
public void setDomain(String value)
{    setProperty(DOMAIN, value);}
0
public String getDomain()
{    return getPropertyAsString(DOMAIN);}
0
public void setConnectTimeout(String value)
{    setProperty(CONNECT_TIMEOUT, value, "");}
0
public int getConnectTimeout()
{    return getPropertyAsInt(CONNECT_TIMEOUT, 0);}
0
public void setResponseTimeout(String value)
{    setProperty(RESPONSE_TIMEOUT, value, "");}
0
public int getResponseTimeout()
{    return getPropertyAsInt(RESPONSE_TIMEOUT, 0);}
0
public String getProxyScheme()
{    return getPropertyAsString(PROXYSCHEME, HTTPHCAbstractImpl.PROXY_SCHEME);}
0
public void setProxyScheme(String schema)
{    setProperty(PROXYSCHEME, schema);}
0
public String getProxyHost()
{    return getPropertyAsString(PROXYHOST);}
0
public void setProxyHost(String host)
{    setProperty(PROXYHOST, host);}
0
public int getProxyPortInt()
{    return getPropertyAsInt(PROXYPORT, 0);}
0
public void setProxyPortInt(String port)
{    setProperty(PROXYPORT, port);}
0
public String getProxyUser()
{    return getPropertyAsString(PROXYUSER);}
0
public void setProxyUser(String user)
{    setProperty(PROXYUSER, user);}
0
public String getProxyPass()
{    return getPropertyAsString(PROXYPASS);}
0
public void setProxyPass(String pass)
{    setProperty(PROXYPASS, pass);}
0
public final void setArguments(Arguments value)
{    setProperty(new TestElementProperty(ARGUMENTS, value));}
0
public Arguments getArguments()
{    return (Arguments) getProperty(ARGUMENTS).getObjectValue();}
0
public void setPostBodyRaw(boolean value)
{    setProperty(POST_BODY_RAW, value, POST_BODY_RAW_DEFAULT);}
0
public boolean getPostBodyRaw()
{    return getPropertyAsBoolean(POST_BODY_RAW, POST_BODY_RAW_DEFAULT);}
0
public void setAuthManager(AuthManager value)
{    AuthManager mgr = getAuthManager();    if (mgr != null) {        if (log.isWarnEnabled()) {                    }    }    setProperty(new TestElementProperty(AUTH_MANAGER, value));}
1
public AuthManager getAuthManager()
{    return (AuthManager) getProperty(AUTH_MANAGER).getObjectValue();}
0
public void setHeaderManager(final HeaderManager value)
{    HeaderManager mgr = getHeaderManager();    HeaderManager lValue = value;    if (mgr != null) {        lValue = mgr.merge(value);        if (log.isDebugEnabled()) {                        for (int i = 0; i < lValue.getHeaders().size(); i++) {                            }        }    }    setProperty(new TestElementProperty(HEADER_MANAGER, lValue));}
1
public HeaderManager getHeaderManager()
{    return (HeaderManager) getProperty(HEADER_MANAGER).getObjectValue();}
0
private void setCookieManagerProperty(CookieManager value)
{    setProperty(new TestElementProperty(COOKIE_MANAGER, value));}
0
public void setCookieManager(CookieManager value)
{    CookieManager mgr = getCookieManager();    if (mgr != null) {        if (log.isWarnEnabled()) {                    }    }    setCookieManagerProperty(value);}
1
public CookieManager getCookieManager()
{    return (CookieManager) getProperty(COOKIE_MANAGER).getObjectValue();}
0
private void setCacheManagerProperty(CacheManager value)
{    setProperty(new TestElementProperty(CACHE_MANAGER, value));}
0
private void setKeystoreConfigProperty(KeystoreConfig value)
{    setProperty(new TestElementProperty(KEYSTORE_CONFIG, value));}
0
public void setKeystoreConfig(KeystoreConfig value)
{    KeystoreConfig mgr = getKeystoreConfig();    if (mgr != null && log.isWarnEnabled()) {            }    setKeystoreConfigProperty(value);}
1
public KeystoreConfig getKeystoreConfig()
{    return (KeystoreConfig) getProperty(KEYSTORE_CONFIG).getObjectValue();}
0
public void setCacheManager(CacheManager value)
{    CacheManager mgr = getCacheManager();    if (mgr != null) {        if (log.isWarnEnabled()) {                    }    }    setCacheManagerProperty(value);}
1
public CacheManager getCacheManager()
{    return (CacheManager) getProperty(CACHE_MANAGER).getObjectValue();}
0
public DNSCacheManager getDNSResolver()
{    return (DNSCacheManager) getProperty(DNS_CACHE_MANAGER).getObjectValue();}
0
public void setDNSResolver(DNSCacheManager cacheManager)
{    DNSCacheManager mgr = getDNSResolver();    if (mgr != null) {        if (log.isWarnEnabled()) {                    }    }    setProperty(new TestElementProperty(DNS_CACHE_MANAGER, cacheManager));}
1
public boolean isImageParser()
{    return getPropertyAsBoolean(IMAGE_PARSER, false);}
0
public void setImageParser(boolean parseImages)
{    setProperty(IMAGE_PARSER, parseImages, false);}
0
public String getEmbeddedUrlRE()
{    return getPropertyAsString(EMBEDDED_URL_RE, "");}
0
public void setEmbeddedUrlRE(String regex)
{    setProperty(new StringProperty(EMBEDDED_URL_RE, regex));}
0
protected HTTPSampleResult errorResult(Throwable e, HTTPSampleResult res)
{    res.setSampleLabel(res.getSampleLabel());    res.setDataType(SampleResult.TEXT);    ByteArrayOutputStream text = new ByteArrayOutputStream(200);        e.printStackTrace(new PrintStream(text));    res.setResponseData(text.toByteArray());    res.setResponseCode(NON_HTTP_RESPONSE_CODE + ": " + e.getClass().getName());    res.setResponseMessage(NON_HTTP_RESPONSE_MESSAGE + ": " + e.getMessage());    res.setSuccessful(false);    return res;}
0
public URL getUrl() throws MalformedURLException
{    String path = this.getPath();        if (path.startsWith(HTTP_PREFIX) || path.startsWith(HTTPS_PREFIX)) {        return new URL(path);    }    String domain = getDomain();    String protocol = getProtocol();    String method = getMethod();    StringBuilder pathAndQuery = new StringBuilder(100);    if (PROTOCOL_FILE.equalsIgnoreCase(protocol)) {                domain = null;    } else {                if (!path.startsWith("/")) {                                    pathAndQuery.append('/');        }    }    pathAndQuery.append(path);        if (HTTPConstants.GET.equals(method) || HTTPConstants.DELETE.equals(method) || HTTPConstants.OPTIONS.equals(method)) {                                String queryString = getQueryString(getContentEncoding());        if (queryString.length() > 0) {            if (path.contains(QRY_PFX)) {                                pathAndQuery.append(QRY_SEP);            } else {                pathAndQuery.append(QRY_PFX);            }            pathAndQuery.append(queryString);        }    }        if (isProtocolDefaultPort()) {        return new URL(protocol, domain, pathAndQuery.toString());    }    return new URL(protocol, domain, getPort(), pathAndQuery.toString());}
0
public String getQueryString()
{        return getQueryString(EncoderCache.URL_ARGUMENT_ENCODING);}
0
public String getQueryString(final String contentEncoding)
{    CollectionProperty arguments = getArguments().getArguments();        if (arguments.isEmpty()) {        return "";    }    String lContentEncoding = contentEncoding;        if (JOrphanUtils.isBlank(lContentEncoding)) {                lContentEncoding = EncoderCache.URL_ARGUMENT_ENCODING;    }    StringBuilder buf = new StringBuilder(arguments.size() * 15);    PropertyIterator iter = arguments.iterator();    boolean first = true;    while (iter.hasNext()) {        HTTPArgument item = null;        /*             * N.B. Revision 323346 introduced the ClassCast check, but then used iter.next()             * to fetch the item to be cast, thus skipping the element that did not cast.             * Reverted to work more like the original code, but with the check in place.             * Added a warning message so can track whether it is necessary             */        Object objectValue = iter.next().getObjectValue();        try {            item = (HTTPArgument) objectValue;        } catch (ClassCastException e) {                                    item = new HTTPArgument((Argument) objectValue);        }        final String encodedName = item.getEncodedName();        if (encodedName.isEmpty()) {                        continue;        }        if (!first) {            buf.append(QRY_SEP);        } else {            first = false;        }        buf.append(encodedName);        if (item.getMetaData() == null) {            buf.append(ARG_VAL_SEP);        } else {            buf.append(item.getMetaData());        }                try {            buf.append(item.getEncodedValue(lContentEncoding));        } catch (UnsupportedEncodingException e) {                                }    }    return buf.toString();}
1
public void parseArguments(String queryString, String contentEncoding)
{    String[] args = JOrphanUtils.split(queryString, QRY_SEP);    for (String arg : args) {                                                                String metaData;        String name;        String value;        int length = arg.length();        int endOfNameIndex = arg.indexOf(ARG_VAL_SEP);        if (endOfNameIndex != -1) {                                    metaData = ARG_VAL_SEP;            name = arg.substring(0, endOfNameIndex);            value = arg.substring(endOfNameIndex + 1, length);        } else {            metaData = "";            name = arg;            value = "";        }        if (name.length() > 0) {                                    if (!StringUtils.isEmpty(contentEncoding)) {                addEncodedArgument(name, value, metaData, contentEncoding);            } else {                                                addNonEncodedArgument(name, value, metaData);            }        }    }}
1
public void parseArguments(String queryString)
{        parseArguments(queryString, null);}
0
public String toString()
{    try {        StringBuilder stringBuffer = new StringBuilder();        stringBuffer.append(this.getUrl().toString());                String method = getMethod();        if (HTTPConstants.POST.equals(method) || HTTPConstants.PUT.equals(method)) {            stringBuffer.append("\nQuery Data: ");            stringBuffer.append(getQueryString());        }        return stringBuffer.toString();    } catch (MalformedURLException e) {        return "";    }}
0
public SampleResult sample(Entry e)
{    return sample();}
0
public SampleResult sample()
{    SampleResult res = null;    try {        res = sample(getUrl(), getMethod(), false, 0);        if (res != null) {            res.setSampleLabel(getName());        }        return res;    } catch (Exception e) {        return errorResult(e, new HTTPSampleResult());    }}
0
protected HTTPSampleResult downloadPageResources(final HTTPSampleResult pRes, final HTTPSampleResult container, final int frameDepth)
{    HTTPSampleResult res = pRes;    Iterator<URL> urls = null;    try {        final byte[] responseData = res.getResponseData();        if (responseData.length > 0) {                        final LinkExtractorParser parser = getParser(res);            if (parser != null) {                String userAgent = getUserAgent(res);                urls = parser.getEmbeddedResourceURLs(userAgent, responseData, res.getURL(), res.getDataEncodingWithDefault());            }        }    } catch (LinkExtractorParseException e) {                res.addSubResult(errorResult(e, new HTTPSampleResult(res)));        setParentSampleSuccess(res, false);    }    HTTPSampleResult lContainer = container;        if (urls != null && urls.hasNext()) {        if (lContainer == null) {            lContainer = new HTTPSampleResult(res);            lContainer.addRawSubResult(res);        }        res = lContainer;                String re = getEmbeddedUrlRE();        Perl5Matcher localMatcher = null;        Pattern pattern = null;        if (re.length() > 0) {            try {                pattern = JMeterUtils.getPattern(re);                                localMatcher = JMeterUtils.getMatcher();            } catch (MalformedCachePatternException e) {                                            }        }                final List<Callable<AsynSamplerResultHolder>> list = new ArrayList<>();                int maxConcurrentDownloads = CONCURRENT_POOL_SIZE;        boolean isConcurrentDwn = isConcurrentDwn();        if (isConcurrentDwn) {            try {                maxConcurrentDownloads = Integer.parseInt(getConcurrentPool());            } catch (NumberFormatException nfe) {                            }                        if (maxConcurrentDownloads == 1) {                                isConcurrentDwn = false;            }        }        while (urls.hasNext()) {                        Object binURL = urls.next();            try {                URL url = (URL) binURL;                if (url == null) {                                    } else {                    try {                        url = escapeIllegalURLCharacters(url);                    } catch (Exception e) {                                                res.addSubResult(errorResult(new Exception(url.toString() + " is not a correct URI", e), new HTTPSampleResult(res)));                        setParentSampleSuccess(res, false);                        continue;                    }                                        if (pattern != null && localMatcher != null && !localMatcher.matches(url.toString(), pattern)) {                                                continue;                    }                    try {                        url = url.toURI().normalize().toURL();                    } catch (MalformedURLException | URISyntaxException e) {                        res.addSubResult(errorResult(new Exception(url.toString() + " URI can not be normalized", e), new HTTPSampleResult(res)));                        setParentSampleSuccess(res, false);                        continue;                    }                    if (isConcurrentDwn) {                                                list.add(new ASyncSample(url, HTTPConstants.GET, false, frameDepth + 1, getCookieManager(), this));                    } else {                                                HTTPSampleResult binRes = sample(url, HTTPConstants.GET, false, frameDepth + 1);                        res.addSubResult(binRes);                        setParentSampleSuccess(res, res.isSuccessful() && (binRes == null || binRes.isSuccessful()));                    }                }            } catch (ClassCastException e) {                                res.addSubResult(errorResult(new Exception(binURL + " is not a correct URI", e), new HTTPSampleResult(res)));                setParentSampleSuccess(res, false);            }        }                if (isConcurrentDwn && !list.isEmpty()) {            ResourcesDownloader resourcesDownloader = ResourcesDownloader.getInstance();            try {                                final List<Future<AsynSamplerResultHolder>> retExec = resourcesDownloader.invokeAllAndAwaitTermination(maxConcurrentDownloads, list);                CookieManager cookieManager = getCookieManager();                                for (Future<AsynSamplerResultHolder> future : retExec) {                                                            AsynSamplerResultHolder binRes = future.get();                    if (cookieManager != null) {                        CollectionProperty cookies = binRes.getCookies();                        for (JMeterProperty jMeterProperty : cookies) {                            Cookie cookie = (Cookie) jMeterProperty.getObjectValue();                            cookieManager.add(cookie);                        }                    }                    res.addSubResult(binRes.getResult());                    setParentSampleSuccess(res, res.isSuccessful() && (binRes.getResult() != null ? binRes.getResult().isSuccessful() : true));                }            } catch (InterruptedException ie) {                                                Thread.currentThread().interrupt();            } catch (ExecutionException ee) {                                            }        }    }    return res;}
1
 static void registerParser(String contentType, String className)
{        PARSERS_FOR_CONTENT_TYPE.put(contentType, className);}
1
private LinkExtractorParser getParser(HTTPSampleResult res) throws LinkExtractorParseException
{    String parserClassName = PARSERS_FOR_CONTENT_TYPE.get(res.getMediaType());    if (!StringUtils.isEmpty(parserClassName)) {        return BaseParser.getParser(parserClassName);    }    return null;}
0
private URL escapeIllegalURLCharacters(java.net.URL url)
{    if (url == null || "file".equals(url.getProtocol())) {        return url;    }    try {        return ConversionUtils.sanitizeUrl(url).toURL();    } catch (Exception e1) {                        return url;    }}
1
private String getUserAgent(HTTPSampleResult sampleResult)
{    String res = sampleResult.getRequestHeaders();    int index = res.indexOf(USER_AGENT);    if (index >= 0) {                                        final String userAgentPrefix = USER_AGENT + ": ";        String userAgentHdr = res.substring(index + userAgentPrefix.length(),         res.indexOf(        '\n', index + userAgentPrefix.length() + 1));        return userAgentHdr.trim();    } else {        if (log.isInfoEnabled()) {                    }        return null;    }}
1
private void setParentSampleSuccess(HTTPSampleResult res, boolean initialValue)
{    if (!IGNORE_FAILED_EMBEDDED_RESOURCES) {        res.setSuccessful(initialValue);        if (!initialValue) {            StringBuilder detailedMessage = new StringBuilder(80);                        detailedMessage.append("Embedded resource download error:");            for (SampleResult subResult : res.getSubResults()) {                HTTPSampleResult httpSampleResult = (HTTPSampleResult) subResult;                if (!httpSampleResult.isSuccessful()) {                    detailedMessage.append(httpSampleResult.getURL()).append(                    " code:").append(httpSampleResult.getResponseCode()).append(                    " message:").append(httpSampleResult.getResponseMessage()).append(                    ", ");                }            }                        res.setResponseMessage(detailedMessage.toString());        }    }}
0
protected String encodeSpaces(String path)
{        return JOrphanUtils.replaceAllChars(path, ' ', "%20");}
0
public void testEnded()
{    if (isConcurrentDwn()) {        ResourcesDownloader.getInstance().shrink();    }}
0
public void testEnded(String host)
{    testEnded();}
0
public void testStarted()
{}
0
public void testStarted(String host)
{    testStarted();}
0
protected HTTPSampleResult followRedirects(HTTPSampleResult res, int frameDepth)
{    HTTPSampleResult totalRes = new HTTPSampleResult(res);    totalRes.addRawSubResult(res);    HTTPSampleResult lastRes = res;    int redirect;    for (redirect = 0; redirect < MAX_REDIRECTS; redirect++) {        boolean invalidRedirectUrl = false;        String location = lastRes.getRedirectLocation();                if (REMOVESLASHDOTDOT) {            location = ConversionUtils.removeSlashDotDot(location);        }                                location = encodeSpaces(location);                        String method = lastRes.getHTTPMethod();        method = computeMethodForRedirect(method);        try {            URL url = ConversionUtils.makeRelativeURL(lastRes.getURL(), location);            url = ConversionUtils.sanitizeUrl(url).toURL();                        HTTPSampleResult tempRes = sample(url, method, true, frameDepth);            if (tempRes != null) {                lastRes = tempRes;            } else {                                break;            }        } catch (MalformedURLException | URISyntaxException e) {            errorResult(e, lastRes);                        invalidRedirectUrl = true;        }        if (lastRes.getSubResults() != null && lastRes.getSubResults().length > 0) {            SampleResult[] subs = lastRes.getSubResults();            for (SampleResult sub : subs) {                totalRes.addSubResult(sub);            }        } else {                        if (!invalidRedirectUrl) {                totalRes.addSubResult(lastRes);            }        }        if (!lastRes.isRedirect()) {            break;        }    }    if (redirect >= MAX_REDIRECTS) {        lastRes = errorResult(new IOException("Exceeded maximum number of redirects: " + MAX_REDIRECTS), new HTTPSampleResult(lastRes));        totalRes.addSubResult(lastRes);    }            totalRes.setSampleLabel(totalRes.getSampleLabel() + "->" + lastRes.getSampleLabel());                    totalRes.setURL(lastRes.getURL());    totalRes.setHTTPMethod(lastRes.getHTTPMethod());    totalRes.setQueryString(lastRes.getQueryString());    totalRes.setRequestHeaders(lastRes.getRequestHeaders());    totalRes.setResponseData(lastRes.getResponseData());    totalRes.setResponseCode(lastRes.getResponseCode());    totalRes.setSuccessful(lastRes.isSuccessful());    totalRes.setResponseMessage(lastRes.getResponseMessage());    totalRes.setDataType(lastRes.getDataType());    totalRes.setResponseHeaders(lastRes.getResponseHeaders());    totalRes.setContentType(lastRes.getContentType());    totalRes.setDataEncoding(lastRes.getDataEncodingNoDefault());    return totalRes;}
1
private String computeMethodForRedirect(String initialMethod)
{    if (!HTTPConstants.HEAD.equalsIgnoreCase(initialMethod)) {        return HTTPConstants.GET;    }    return initialMethod;}
0
protected HTTPSampleResult resultProcessing(final boolean pAreFollowingRedirect, final int frameDepth, final HTTPSampleResult pRes)
{    boolean wasRedirected = false;    boolean areFollowingRedirect = pAreFollowingRedirect;    HTTPSampleResult res = pRes;    if (!areFollowingRedirect && res.isRedirect()) {        if (log.isDebugEnabled()) {                    }        if (getFollowRedirects()) {            res = followRedirects(res, frameDepth);            areFollowingRedirect = true;            wasRedirected = true;        }    }    if (res.isSuccessful() && SampleResult.TEXT.equals(res.getDataType()) && isImageParser()) {        if (frameDepth > MAX_FRAME_DEPTH) {            HTTPSampleResult errSubResult = new HTTPSampleResult(res);            errSubResult.removeSubResults();            res.addSubResult(errorResult(new Exception("Maximum frame/iframe nesting depth exceeded."), errSubResult));        } else {                        if (!wasRedirected) {                HTTPSampleResult container = (HTTPSampleResult) (areFollowingRedirect ? res.getParent() : SEPARATE_CONTAINER ? null : res);                res = downloadPageResources(res, container, frameDepth);            }        }    }    return res;}
1
protected boolean isSuccessCode(int code)
{    return MetricUtils.isSuccessCode(code);}
0
protected static String encodeBackSlashes(String value)
{    StringBuilder newValue = new StringBuilder();    for (int i = 0; i < value.length(); i++) {        char charAt = value.charAt(i);        if (charAt == '\\') {                                    newValue.append("\\\\");        } else {            newValue.append(charAt);        }    }    return newValue.toString();}
0
private void setHTTPFileArgs(HTTPFileArgs value)
{    if (value.getHTTPFileArgCount() > 0) {        setProperty(new TestElementProperty(FILE_ARGS, value));    } else {                removeProperty(FILE_ARGS);    }}
0
private HTTPFileArgs getHTTPFileArgs()
{    return (HTTPFileArgs) getProperty(FILE_ARGS).getObjectValue();}
0
public HTTPFileArg[] getHTTPFiles()
{    final HTTPFileArgs fileArgs = getHTTPFileArgs();    return fileArgs == null ? new HTTPFileArg[] {} : fileArgs.asArray();}
0
public int getHTTPFileCount()
{    return getHTTPFiles().length;}
0
public void setHTTPFiles(HTTPFileArg[] files)
{    HTTPFileArgs fileArgs = new HTTPFileArgs();        if (files.length > 0) {        for (HTTPFileArg file : files) {            if (file.isNotEmpty()) {                fileArgs.addHTTPFileArg(file);            }        }    }    setHTTPFileArgs(fileArgs);}
0
public static String[] getValidMethodsAsArray()
{    return METHODLIST.toArray(new String[METHODLIST.size()]);}
0
public static boolean isSecure(String protocol)
{    return HTTPConstants.PROTOCOL_HTTPS.equalsIgnoreCase(protocol);}
0
public static boolean isSecure(URL url)
{    return isSecure(url.getProtocol());}
0
public void threadStarted()
{}
0
public void threadFinished()
{}
0
public void testIterationStart(LoopIterationEvent event)
{}
0
public byte[] readResponse(SampleResult sampleResult, InputStream in, long length) throws IOException
{    OutputStream w = null;    try {                        byte[] readBuffer = new byte[8192];                int bufferSize = 32;        MessageDigest md = null;                boolean knownResponseLength = length > 0;        if (useMD5()) {            try {                                md = MessageDigest.getInstance("MD5");            } catch (NoSuchAlgorithmException e) {                            }        } else {            if (!knownResponseLength) {                bufferSize = 4 * 1024;            } else {                bufferSize = (int) Math.min(MAX_BUFFER_SIZE, length);            }        }        int bytesReadInBuffer = 0;        long totalBytes = 0;        boolean first = true;        boolean storeInBOS = true;        while ((bytesReadInBuffer = in.read(readBuffer)) > -1) {            if (first) {                sampleResult.latencyEnd();                first = false;                if (md == null) {                    if (!knownResponseLength) {                        w = new org.apache.commons.io.output.ByteArrayOutputStream(bufferSize);                    } else {                        w = new DirectAccessByteArrayOutputStream(bufferSize);                    }                }            }            if (md == null) {                if (storeInBOS) {                    if (MAX_BYTES_TO_STORE_PER_REQUEST <= 0 || (totalBytes + bytesReadInBuffer <= MAX_BYTES_TO_STORE_PER_REQUEST) || JMeterContextService.getContext().isRecording()) {                        w.write(readBuffer, 0, bytesReadInBuffer);                    } else {                                                w.write(readBuffer, 0, (int) (MAX_BYTES_TO_STORE_PER_REQUEST - totalBytes));                        storeInBOS = false;                    }                }            } else {                md.update(readBuffer, 0, bytesReadInBuffer);            }            totalBytes += bytesReadInBuffer;        }        if (first) {                        sampleResult.latencyEnd();            return new byte[0];        }        if (md == null) {            return toByteArray(w);        } else {            byte[] md5Result = md.digest();            sampleResult.setBytes(totalBytes);            return JOrphanUtils.baToHexBytes(md5Result);        }    } finally {        IOUtils.closeQuietly(in);        IOUtils.closeQuietly(w);    }}
1
private byte[] toByteArray(OutputStream w)
{    if (w instanceof DirectAccessByteArrayOutputStream) {        return ((DirectAccessByteArrayOutputStream) w).toByteArray();    }    if (w instanceof org.apache.commons.io.output.ByteArrayOutputStream) {        return ((org.apache.commons.io.output.ByteArrayOutputStream) w).toByteArray();    }        return null;}
1
 void mergeFileProperties()
{    JMeterProperty fileName = getProperty(FILE_NAME);    JMeterProperty paramName = getProperty(FILE_FIELD);    JMeterProperty mimeType = getProperty(MIMETYPE);    HTTPFileArg oldStyleFile = new HTTPFileArg(fileName, paramName, mimeType);    HTTPFileArgs fileArgs = getHTTPFileArgs();    HTTPFileArgs allFileArgs = new HTTPFileArgs();    if (oldStyleFile.isNotEmpty()) {                        allFileArgs.addHTTPFileArg(oldStyleFile);                if (fileArgs != null) {            HTTPFileArg[] infiles = fileArgs.asArray();            for (HTTPFileArg infile : infiles) {                allFileArgs.addHTTPFileArg(infile);            }        }    } else {        if (fileArgs != null) {                        allFileArgs = fileArgs;        }    }        setHTTPFileArgs(allFileArgs);    removeProperty(FILE_FIELD);    removeProperty(FILE_NAME);    removeProperty(MIMETYPE);}
0
public void setIpSource(String value)
{    setProperty(IP_SOURCE, value, "");}
0
public String getIpSource()
{    return getPropertyAsString(IP_SOURCE, "");}
0
public void setIpSourceType(int value)
{    setProperty(IP_SOURCE_TYPE, value, SOURCE_TYPE_DEFAULT);}
0
public int getIpSourceType()
{    return getPropertyAsInt(IP_SOURCE_TYPE, SOURCE_TYPE_DEFAULT);}
0
public boolean isConcurrentDwn()
{    return getPropertyAsBoolean(CONCURRENT_DWN, false);}
0
public void setConcurrentDwn(boolean concurrentDwn)
{    setProperty(CONCURRENT_DWN, concurrentDwn, false);}
0
public String getConcurrentPool()
{    return getPropertyAsString(CONCURRENT_POOL, CONCURRENT_POOL_DEFAULT);}
0
public void setConcurrentPool(String poolSize)
{    setProperty(CONCURRENT_POOL, poolSize, CONCURRENT_POOL_DEFAULT);}
0
public AsynSamplerResultHolder call()
{    JMeterContextService.replaceContext(jmeterContextOfParentThread);    HTTPSampleResult httpSampleResult = sampler.sample(url, method, areFollowingRedirect, depth);    if (sampler.getCookieManager() != null) {        CollectionProperty cookies = sampler.getCookieManager().getCookies();        return new AsynSamplerResultHolder(httpSampleResult, cookies);    } else {        return new AsynSamplerResultHolder(httpSampleResult, new CollectionProperty());    }}
0
public boolean applies(ConfigTestElement configElement)
{    String guiClass = configElement.getProperty(TestElement.GUI_CLASS).getStringValue();    return APPLIABLE_CONFIG_CLASSES.contains(guiClass);}
0
public int replace(String regex, String replaceBy, boolean caseSensitive) throws Exception
{    int totalReplaced = 0;    for (JMeterProperty jMeterProperty : getArguments()) {        HTTPArgument arg = (HTTPArgument) jMeterProperty.getObjectValue();        totalReplaced += JOrphanUtils.replaceValue(regex, replaceBy, caseSensitive, arg.getValue(), arg::setValue);    }    totalReplaced += JOrphanUtils.replaceValue(regex, replaceBy, caseSensitive, getPath(), this::setPath);    totalReplaced += JOrphanUtils.replaceValue(regex, replaceBy, caseSensitive, getDomain(), this::setDomain);    for (String key : Arrays.asList(PORT, PROTOCOL)) {        totalReplaced += JOrphanUtils.replaceValue(regex, replaceBy, caseSensitive, getPropertyAsString(key), s -> setProperty(key, s));    }    return totalReplaced;}
0
public static String getVersion()
{        return "$Revision$";}
0
public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0)
{        return HTTPSamplerBase.class.isAssignableFrom(arg0);}
0
public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context)
{    final HTTPSamplerBase httpSampler = (HTTPSamplerBase) super.unmarshal(reader, context);        String nodeName = reader.getNodeName();    if (nodeName.equals(HTTPSamplerFactory.HTTP_SAMPLER_JAVA)) {        httpSampler.setImplementation(HTTPSamplerFactory.IMPL_JAVA);    }    if (nodeName.equals(HTTPSamplerFactory.HTTP_SAMPLER_APACHE)) {        httpSampler.setImplementation(HTTPSamplerFactory.IMPL_HTTP_CLIENT4);    }    httpSampler.mergeFileProperties();    return httpSampler;}
0
public void setHTTPMethod(String method)
{    this.method = method;}
0
public String getHTTPMethod()
{    return method;}
0
public void setRedirectLocation(String redirectLocation)
{    this.redirectLocation = redirectLocation;}
0
public String getRedirectLocation()
{    return redirectLocation;}
0
public boolean isRedirect()
{    /*         * Don't redirect the following:         * 300 = Multiple choice         * 304 = Not Modified         * 305 = Use Proxy         * 306 = (Unused)         */    final String[] redirectCodes = { HTTPConstants.SC_MOVED_PERMANENTLY, HTTPConstants.SC_MOVED_TEMPORARILY, HTTPConstants.SC_SEE_OTHER };    String code = getResponseCode();    for (String redirectCode : redirectCodes) {        if (redirectCode.equals(code)) {            return true;        }    }        return HTTPConstants.SC_TEMPORARY_REDIRECT.equals(code) && (HTTPConstants.GET.equals(getHTTPMethod()) || HTTPConstants.HEAD.equals(getHTTPMethod()));}
0
public String getSamplerData()
{    StringBuilder sb = new StringBuilder();    sb.append(method);    URL u = super.getURL();    if (u != null) {        sb.append(' ');        sb.append(u.toString());        sb.append('\n');                if (!METHODS_WITHOUT_BODY.contains(method)) {            sb.append("\n").append(method).append(" data:\n");            sb.append(queryString);            sb.append('\n');        }        if (cookies.length() > 0) {            sb.append("\nCookie Data:\n");            sb.append(cookies);        } else {            sb.append("\n[no cookies]");        }        sb.append('\n');    }    final String sampData = super.getSamplerData();    if (sampData != null) {        sb.append(sampData);    }    return sb.toString();}
0
public String getCookies()
{    return cookies;}
0
public void setCookies(String string)
{    if (string == null) {                cookies = "";    } else {        cookies = string;    }}
0
public String getQueryString()
{    return queryString;}
0
public void setQueryString(String string)
{    if (string == null) {                queryString = "";    } else {        queryString = string;    }}
0
public String getDataEncodingWithDefault(String defaultEncoding)
{    String dataEncodingNoDefault = getDataEncodingNoDefault();    if (dataEncodingNoDefault != null && dataEncodingNoDefault.length() > 0) {        return dataEncodingNoDefault;    }    return defaultEncoding;}
0
public String getDataEncodingNoDefault()
{    if (super.getDataEncodingNoDefault() == null && getContentType().startsWith("text/html")) {                byte[] bytes = getResponseData();                String prefix = new String(bytes, 0, Math.min(bytes.length, 2000), Charset.forName(DEFAULT_HTTP_ENCODING));                String matchAgainst = prefix.toLowerCase(java.util.Locale.ENGLISH);                        final String metaTag = "<meta http-equiv=\"content-type\" content=\"";        int tagstart = matchAgainst.indexOf(metaTag);        if (tagstart != -1) {            tagstart += metaTag.length();                        int tagend = prefix.indexOf('\"', tagstart);            if (tagend != -1) {                final String ct = prefix.substring(tagstart, tagend);                                setEncodingAndType(ct);            }        }    }    return super.getDataEncodingNoDefault();}
0
public void setResponseNoContent()
{    setResponseCode(HTTP_NO_CONTENT_CODE);    setResponseMessage(HTTP_NO_CONTENT_MSG);}
0
public List<String> getSearchableTokens() throws Exception
{    List<String> list = new ArrayList<>(super.getSearchableTokens());    list.add(getQueryString());    list.add(getCookies());    list.add(getUrlAsString());    return list;}
0
public static HTTPSamplerBase newInstance()
{    return newInstance(DEFAULT_CLASSNAME);}
0
public static HTTPSamplerBase newInstance(String alias)
{    if (alias == null || alias.length() == 0) {        return new HTTPSamplerProxy();    }    if (alias.equals(HTTP_SAMPLER_JAVA) || alias.equals(IMPL_JAVA)) {        return new HTTPSamplerProxy(IMPL_JAVA);    }    if (alias.equals(IMPL_HTTP_CLIENT4) || alias.equals(HTTP_SAMPLER_APACHE) || alias.equals(IMPL_HTTP_CLIENT3_1)) {        return new HTTPSamplerProxy(IMPL_HTTP_CLIENT4);    }    throw new IllegalArgumentException("Unknown sampler type: '" + alias + "'");}
0
public static String[] getImplementations()
{    return new String[] { IMPL_HTTP_CLIENT4, IMPL_JAVA };}
0
public static HTTPAbstractImpl getImplementation(String impl, HTTPSamplerBase base)
{    if (HTTPSamplerBase.PROTOCOL_FILE.equals(base.getProtocol())) {        return new HTTPFileImpl(base);    }    if (JOrphanUtils.isBlank(impl)) {        impl = DEFAULT_CLASSNAME;    }    if (IMPL_JAVA.equals(impl) || HTTP_SAMPLER_JAVA.equals(impl)) {        return new HTTPJavaImpl(base);    } else if (IMPL_HTTP_CLIENT4.equals(impl) || IMPL_HTTP_CLIENT3_1.equals(impl)) {        return new HTTPHC4Impl(base);    } else {        throw new IllegalArgumentException("Unknown implementation type: '" + impl + "'");    }}
0
protected HTTPSampleResult sample(URL u, String method, boolean areFollowingRedirect, int depth)
{        if (impl == null) {                try {            impl = HTTPSamplerFactory.getImplementation(getImplementation(), this);        } catch (Exception ex) {            return errorResult(ex, new HTTPSampleResult());        }    }    return impl.sample(u, method, areFollowingRedirect, depth);}
0
public void threadFinished()
{    if (impl != null) {                impl.threadFinished();    }}
0
public boolean interrupt()
{    if (impl != null) {                return impl.interrupt();    }    return false;}
0
public void testIterationStart(LoopIterationEvent event)
{    if (impl != null) {        impl.notifyFirstSampleAfterLoopRestart();    }}
0
public String getMethod()
{    return davMethod;}
0
public static boolean isWebdavMethod(String method)
{    return method != null && WEBDAV_METHOD_PATTERN.matcher(method).matches();}
0
public String sendPostData(URLConnection connection, HTTPSamplerBase sampler) throws IOException
{        StringBuilder postedBody = new StringBuilder(1000);    HTTPFileArg[] files = sampler.getHTTPFiles();    String contentEncoding = sampler.getContentEncoding();    if (contentEncoding == null || contentEncoding.length() == 0) {        contentEncoding = ENCODING;    }        if (sampler.getUseMultipart()) {        OutputStream out = connection.getOutputStream();                                out.write(formDataPostBody);                postedBody.append(new String(formDataPostBody, contentEncoding));                for (int i = 0; i < files.length; i++) {            HTTPFileArg file = files[i];                                    byte[] header = file.getHeader().getBytes();            out.write(header);                                    postedBody.append(new String(header));                        writeFileToStream(file.getPath(), out);                                    postedBody.append("<actual file content, not shown here>");                        byte[] fileMultipartEndDivider = getFileMultipartEndDivider();            out.write(fileMultipartEndDivider);                        postedBody.append(new String(fileMultipartEndDivider, ENCODING));            if (i + 1 < files.length) {                out.write(CRLF);                postedBody.append(new String(CRLF, SampleResult.DEFAULT_HTTP_ENCODING));            }        }                byte[] multipartEndDivider = getMultipartEndDivider();        out.write(multipartEndDivider);        postedBody.append(new String(multipartEndDivider, ENCODING));        out.flush();        out.close();    } else {                if (sampler.getArguments() != null && !sampler.hasArguments() && sampler.getSendFileAsPostBody()) {            OutputStream out = connection.getOutputStream();                                    HTTPFileArg file = files[0];            writeFileToStream(file.getPath(), out);            out.flush();            out.close();                                    postedBody.append("<actual file content, not shown here>");        } else if (formDataUrlEncoded != null) {                                                OutputStream out = connection.getOutputStream();            out.write(formDataUrlEncoded);            out.flush();            out.close();            postedBody.append(new String(formDataUrlEncoded, contentEncoding));        }    }    return postedBody.toString();}
0
public void setHeaders(URLConnection connection, HTTPSamplerBase sampler) throws IOException
{        String contentEncoding = sampler.getContentEncoding();    if (contentEncoding == null || contentEncoding.length() == 0) {        contentEncoding = ENCODING;    }    long contentLength = 0L;    HTTPFileArg[] files = sampler.getHTTPFiles();        if (sampler.getUseMultipart()) {                connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE,         HTTPConstants.MULTIPART_FORM_DATA + "; boundary=" + getBoundary());                ByteArrayOutputStream bos = new ByteArrayOutputStream();                bos.write(getMultipartDivider());                for (JMeterProperty jMeterProperty : sampler.getArguments()) {            HTTPArgument arg = (HTTPArgument) jMeterProperty.getObjectValue();            String parameterName = arg.getName();            if (arg.isSkippable(parameterName)) {                continue;            }                        bos.write(CRLF);                        writeFormMultipart(bos, parameterName, arg.getValue(), contentEncoding, sampler.getDoBrowserCompatibleMultipart());        }                if (files.length > 0) {                        bos.write(CRLF);        }        bos.flush();                formDataPostBody = bos.toByteArray();        bos.close();        contentLength = formDataPostBody.length;                for (int i = 0; i < files.length; i++) {            HTTPFileArg file = files[i];                        bos = new ByteArrayOutputStream();            writeStartFileMultipart(bos, file.getPath(), file.getParamName(), file.getMimeType());            bos.flush();                        String header = bos.toString(contentEncoding);                                    file.setHeader(header);            bos.close();            contentLength += header.length();                        File uploadFile = new File(file.getPath());            contentLength += uploadFile.length();                        contentLength += getFileMultipartEndDivider().length;            if (i + 1 < files.length) {                contentLength += CRLF.length;            }        }                contentLength += getMultipartEndDivider().length;                connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_LENGTH, Long.toString(contentLength));                connection.setDoOutput(true);        connection.setDoInput(true);    } else {                        String contentTypeHeader = connection.getRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE);        boolean hasContentTypeHeader = contentTypeHeader != null && contentTypeHeader.length() > 0;                if (sampler.getArguments() != null && sampler.getArguments().getArgumentCount() == 0 && sampler.getSendFileAsPostBody()) {                                    HTTPFileArg file = files[0];            if (!hasContentTypeHeader) {                                if (file.getMimeType() != null && file.getMimeType().length() > 0) {                    connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE, file.getMimeType());                } else {                    if (HTTPAbstractImpl.ADD_CONTENT_TYPE_TO_POST_IF_MISSING) {                        connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE, HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED);                    }                }            }                        File inputFile = new File(file.getPath());            contentLength = inputFile.length();        } else {                        ByteArrayOutputStream bos = new ByteArrayOutputStream();                                    String postBody = null;            if (!sampler.getSendParameterValuesAsPostBody()) {                                if (!hasContentTypeHeader && HTTPAbstractImpl.ADD_CONTENT_TYPE_TO_POST_IF_MISSING) {                    connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE, HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED);                }                                postBody = sampler.getQueryString(contentEncoding);            } else {                                if (!hasContentTypeHeader) {                    HTTPFileArg file = files.length > 0 ? files[0] : null;                    if (file != null && file.getMimeType() != null && file.getMimeType().length() > 0) {                        connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE, file.getMimeType());                    } else {                        if (HTTPAbstractImpl.ADD_CONTENT_TYPE_TO_POST_IF_MISSING) {                            connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE, HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED);                        }                    }                }                                StringBuilder postBodyBuffer = new StringBuilder();                for (JMeterProperty jMeterProperty : sampler.getArguments()) {                    HTTPArgument arg = (HTTPArgument) jMeterProperty.getObjectValue();                    postBodyBuffer.append(arg.getEncodedValue(contentEncoding));                }                postBody = postBodyBuffer.toString();            }            bos.write(postBody.getBytes(contentEncoding));            bos.flush();            bos.close();                        formDataUrlEncoded = bos.toByteArray();            contentLength = bos.toByteArray().length;        }                connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_LENGTH, Long.toString(contentLength));                connection.setDoOutput(true);    }}
0
protected String getBoundary()
{    return boundary;}
0
private byte[] getMultipartDivider() throws IOException
{    return (DASH_DASH + getBoundary()).getBytes(ENCODING);}
0
private byte[] getFileMultipartEndDivider() throws IOException
{    byte[] ending = getMultipartDivider();    byte[] completeEnding = new byte[ending.length + CRLF.length];    System.arraycopy(CRLF, 0, completeEnding, 0, CRLF.length);    System.arraycopy(ending, 0, completeEnding, CRLF.length, ending.length);    return completeEnding;}
0
private byte[] getMultipartEndDivider()
{    byte[] ending = DASH_DASH_BYTES;    byte[] completeEnding = new byte[ending.length + CRLF.length];    System.arraycopy(ending, 0, completeEnding, 0, ending.length);    System.arraycopy(CRLF, 0, completeEnding, ending.length, CRLF.length);    return completeEnding;}
0
private void writeStartFileMultipart(OutputStream out, String filename, String nameField, String mimetype) throws IOException
{        write(out, "Content-Disposition: form-data; name=\"");    write(out, nameField);        write(out, "\"; filename=\"");    write(out, new File(filename).getName());        writeln(out, "\"");        writeln(out, "Content-Type: " + mimetype);        writeln(out, "Content-Transfer-Encoding: binary");    out.write(CRLF);}
0
private static void writeFileToStream(String filename, OutputStream out) throws IOException
{    byte[] buf = new byte[1024];                    InputStream in = new BufferedInputStream(new FileInputStream(filename));    int read;    boolean noException = false;    try {        while ((read = in.read(buf)) > 0) {            out.write(buf, 0, read);        }        noException = true;    } finally {        if (!noException) {                        JOrphanUtils.closeQuietly(in);        } else {            in.close();        }    }}
0
private void writeFormMultipart(OutputStream out, String name, String value, String charSet, boolean browserCompatibleMultipart) throws IOException
{        writeln(out, "Content-Disposition: form-data; name=\"" + name + "\"");    if (!browserCompatibleMultipart) {                writeln(out, "Content-Type: text/plain; charset=" + charSet);                writeln(out, "Content-Transfer-Encoding: 8bit");    }    out.write(CRLF);    out.write(value.getBytes(charSet));    out.write(CRLF);        out.write(getMultipartDivider());}
0
private void write(OutputStream out, String value) throws UnsupportedEncodingException, IOException
{    out.write(value.getBytes(ENCODING));}
0
private void writeln(OutputStream out, String value) throws UnsupportedEncodingException, IOException
{    out.write(value.getBytes(ENCODING));    out.write(CRLF);}
0
public void setHeaders(URLConnection connection, HTTPSamplerBase sampler) throws IOException
{        String contentEncoding = sampler.getContentEncoding();    if (contentEncoding == null || contentEncoding.length() == 0) {        contentEncoding = ENCODING;    }    long contentLength = 0L;    boolean hasPutBody = false;            String contentTypeHeader = connection.getRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE);    boolean hasContentTypeHeader = contentTypeHeader != null && contentTypeHeader.length() > 0;    HTTPFileArg[] files = sampler.getHTTPFiles();        if (sampler.getArguments() != null && sampler.getArguments().getArgumentCount() == 0 && sampler.getSendFileAsPostBody()) {                HTTPFileArg file = files[0];        hasPutBody = true;        if (!hasContentTypeHeader) {                        if (file.getMimeType().length() > 0) {                connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE, file.getMimeType());            }        }                File inputFile = new File(file.getPath());        contentLength = inputFile.length();    } else if (sampler.getSendParameterValuesAsPostBody()) {        hasPutBody = true;                if (!hasContentTypeHeader && files.length == 1 && files[0].getMimeType().length() > 0) {            connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE, files[0].getMimeType());        }                ByteArrayOutputStream bos = new ByteArrayOutputStream();                StringBuilder putBodyBuffer = new StringBuilder();        for (JMeterProperty jMeterProperty : sampler.getArguments()) {            HTTPArgument arg = (HTTPArgument) jMeterProperty.getObjectValue();            putBodyBuffer.append(arg.getEncodedValue(contentEncoding));        }        bos.write(putBodyBuffer.toString().getBytes(contentEncoding));        bos.flush();        bos.close();                formDataUrlEncoded = bos.toByteArray();        contentLength = bos.toByteArray().length;    }    if (hasPutBody) {                connection.setRequestProperty(HTTPConstants.HEADER_CONTENT_LENGTH, Long.toString(contentLength));                connection.setDoOutput(true);    }}
0
public static ResourcesDownloader getInstance()
{    return INSTANCE;}
0
private void init()
{        concurrentExecutor = new ThreadPoolExecutor(MIN_POOL_SIZE, MAX_POOL_SIZE, THREAD_KEEP_ALIVE_TIME, TimeUnit.SECONDS, new SynchronousQueue<>(), r -> {        Thread t = new Thread(r);                t.setName("ResDownload-" + t.getName());        t.setDaemon(true);        return t;    }) {    };}
1
public void shrink()
{    if (concurrentExecutor.getPoolSize() > MIN_POOL_SIZE) {                concurrentExecutor.purge();        List<Runnable> drainList = new ArrayList<>();        concurrentExecutor.getQueue().drainTo(drainList);        if (!drainList.isEmpty()) {                        for (Runnable runnable : drainList) {                if (runnable instanceof Future<?>) {                    Future<?> f = (Future<?>) runnable;                    f.cancel(true);                } else {                                    }            }        }                        concurrentExecutor.setMaximumPoolSize(MIN_POOL_SIZE);        }}
1
public List<Future<AsynSamplerResultHolder>> invokeAllAndAwaitTermination(int maxConcurrentDownloads, List<Callable<AsynSamplerResultHolder>> list) throws InterruptedException
{    List<Future<AsynSamplerResultHolder>> submittedTasks = new ArrayList<>();        if (list.isEmpty()) {        return submittedTasks;    }        concurrentExecutor.setMaximumPoolSize(MAX_POOL_SIZE);    if (LOG.isDebugEnabled()) {            }    CompletionService<AsynSamplerResultHolder> completionService = new ExecutorCompletionService<>(concurrentExecutor);    int remainingTasksToTake = list.size();    try {                int i = 0;        for (i = 0; i < Math.min(maxConcurrentDownloads, list.size()); i++) {            Callable<AsynSamplerResultHolder> task = list.get(i);            submittedTasks.add(completionService.submit(task));        }                for (; i < list.size(); i++) {            Callable<AsynSamplerResultHolder> task = list.get(i);            completionService.take();            remainingTasksToTake--;            submittedTasks.add(completionService.submit(task));        }                while (remainingTasksToTake > 0) {            completionService.take();            remainingTasksToTake--;        }    } finally {                if (remainingTasksToTake > 0) {                        for (Future<AsynSamplerResultHolder> future : submittedTasks) {                if (!future.isDone()) {                    future.cancel(true);                }            }        }    }    return submittedTasks;}
1
public HTTPSampleResult getResult()
{    return result;}
0
public CollectionProperty getCookies()
{    return cookies;}
0
public void setReplaceExtension(String oldext, String newext)
{    if (oldext != null && newext != null) {        this.CHANGEEXT = true;        if (!oldext.contains(".") && !newext.contains(".")) {            this.OLDEXT = "." + oldext;            this.NEWEXT = "." + newext;        } else {            this.OLDEXT = oldext;            this.NEWEXT = newext;        }    }}
0
public void includeFiles(String[] filenames)
{    if (filenames != null && filenames.length > 0) {        INCFILE = filenames;        this.FILEFILTER = true;    }}
0
public void excludeFiles(String[] filenames)
{    if (filenames != null && filenames.length > 0) {        EXCFILE = filenames;        this.FILEFILTER = true;    }}
0
public void includePattern(String[] regexp)
{    if (regexp != null && regexp.length > 0) {        INCPTRN = regexp;        this.PTRNFILTER = true;                for (String includePattern : INCPTRN) {            this.INCPATTERNS.add(this.createPattern(includePattern));        }    }}
0
public void excludePattern(String[] regexp)
{    if (regexp != null && regexp.length > 0) {        EXCPTRN = regexp;        this.PTRNFILTER = true;                for (String excludePattern : EXCPTRN) {            this.EXCPATTERNS.add(this.createPattern(excludePattern));        }    }}
0
public boolean isFiltered(String path, TestElement el)
{    if (this.FILEFILTER) {        return filterFile(path);    }    if (this.PTRNFILTER) {        return filterPattern(path);    }    return false;}
0
protected boolean filterFile(String file)
{        if (this.EXCFILE != null) {        return excFile(file);    } else if (this.INCFILE != null) {        return !incFile(file);    }    return false;}
0
public boolean incFile(String text)
{                    this.USEFILE = false;    for (String includeFile : this.INCFILE) {        if (text.contains(includeFile)) {            this.USEFILE = true;            break;        }    }    return this.USEFILE;}
0
public boolean excFile(String text)
{                    this.USEFILE = true;    boolean exc = false;    for (String excludeFile : this.EXCFILE) {        if (text.contains(excludeFile)) {            exc = true;            this.USEFILE = false;            break;        }    }    return exc;}
0
protected boolean filterPattern(String text)
{    if (this.INCPTRN != null) {        return !incPattern(text);    } else if (this.EXCPTRN != null) {        return excPattern(text);    }    return false;}
0
protected boolean incPattern(String text)
{    this.USEFILE = false;    for (Pattern includePattern : this.INCPATTERNS) {        if (JMeterUtils.getMatcher().contains(text, includePattern)) {            this.USEFILE = true;            break;        }    }    return this.USEFILE;}
0
protected boolean excPattern(String text)
{    this.USEFILE = true;    boolean exc = false;    for (Pattern excludePattern : this.EXCPATTERNS) {        if (JMeterUtils.getMatcher().contains(text, excludePattern)) {            exc = true;            this.USEFILE = false;            break;        }    }    return exc;}
0
public boolean replaceExtension(String text)
{    int pt = text.indexOf(this.OLDEXT);    if (pt > -1) {        int extsize = this.OLDEXT.length();        this.NEWFILE = text.substring(0, pt) + this.NEWEXT + text.substring(pt + extsize);        return true;    } else {        return false;    }}
0
public String filter(String text)
{    if (this.CHANGEEXT) {        if (replaceExtension(text)) {            return this.NEWFILE;        } else {            return text;        }    } else if (this.USEFILE) {        return text;    } else {        return null;    }}
0
public Pattern createPattern(String pattern)
{    try {        return JMeterUtils.getPatternCache().getPattern(pattern, Perl5Compiler.READ_ONLY_MASK | Perl5Compiler.SINGLELINE_MASK);    } catch (MalformedCachePatternException exception) {                return null;    }}
1
public void reset()
{}
0
public void setName(String name)
{    this.NAME = name;}
0
public void setValue(String value)
{    this.VALUE = value;}
0
public String getName()
{    return this.NAME;}
0
public String getValue()
{    return this.VALUE;}
0
public synchronized int parseAndConfigure(int count, TestElement el)
{    return this.parse(el, count);}
0
protected boolean hasExcPattern(String text)
{    return false;}
0
protected String getIpAddress(String logLine)
{    Pattern incIp = JMeterUtils.getPatternCache().getPattern("\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}", Perl5Compiler.READ_ONLY_MASK | Perl5Compiler.SINGLELINE_MASK);    Perl5Matcher matcher = JMeterUtils.getMatcher();    matcher.contains(logLine, incIp);    return matcher.getMatch().group(0);}
0
public void reset()
{    cookieManagers.clear();}
0
public Object clone()
{    return new SessionFilter(cookieManagers, managersInUse);}
0
public void excludeFiles(String[] filenames)
{}
0
public void excludePattern(String[] regexp)
{}
0
public String filter(String text)
{    return text;}
0
public void includeFiles(String[] filenames)
{}
0
public void includePattern(String[] regexp)
{}
0
public boolean isFiltered(String path, TestElement sampler)
{    String ipAddr = getIpAddress(path);    CookieManager cm = getCookieManager(ipAddr);    ((HTTPSampler) sampler).setCookieManager(cm);    return false;}
0
protected CookieManager getCookieManager(String ipAddr)
{    CookieManager cm;        synchronized (LOCK) {        if (lastUsed != null) {            managersInUse.remove(lastUsed);            LOCK.notifyAll();        }    }        if (lastUsed != null) {        Thread.yield();    }        synchronized (LOCK) {        cm = cookieManagers.get(ipAddr);        if (cm == null) {            cm = new CookieManager();            cm.testStarted();            cookieManagers.put(ipAddr, cm);        }        while (managersInUse.contains(cm)) {            try {                LOCK.wait();            } catch (InterruptedException e) {                                Thread.currentThread().interrupt();            }        }        managersInUse.add(cm);        lastUsed = cm;    }    return cm;}
1
public void setReplaceExtension(String oldextension, String newextension)
{}
0
public void threadFinished()
{    synchronized (LOCK) {        managersInUse.remove(lastUsed);        LOCK.notifyAll();    }}
0
public void threadStarted()
{}
0
public Object clone()
{    SharedTCLogParser parser = new SharedTCLogParser();    parser.FILENAME = FILENAME;    parser.FILTER = FILTER;    return parser;}
0
public int parse(TestElement el, int parseCount)
{    FileServer fileServer = FileServer.getFileServer();    fileServer.reserveFile(FILENAME);    try {        return parse(fileServer, el, parseCount);    } catch (Exception exception) {            }        return -1;}
1
protected int parse(FileServer breader, TestElement el, int parseCount)
{    int actualCount = 0;    String line = null;    try {                        line = breader.readLine(FILENAME);        while (line != null) {            if (line.length() > 0) {                actualCount += this.parseLine(line, el);            }                        if (parseCount != -1 && actualCount >= parseCount) {                break;            }            line = breader.readLine(FILENAME);        }        if (line == null) {            breader.closeFile(FILENAME);        }    } catch (IOException ioe) {            }    return actualCount;}
1
public void close()
{    try {        FileServer.getFileServer().closeFile(FILENAME);    } catch (IOException e) {        }}
0
private void init()
{        generateRequest();}
0
protected void initStream()
{    try {        this.OUTPUT = new FileOutputStream(FILE);    } catch (IOException exception) {            }}
1
public void close()
{    JOrphanUtils.closeQuietly(OUTPUT);}
0
public void setHost(String host)
{    SAMPLE.setDomain(host);}
0
public void setLabel(String label)
{}
0
public void setMethod(String post_get)
{    SAMPLE.setMethod(post_get);}
0
public void setParams(NVPair[] params)
{    for (NVPair param : params) {        SAMPLE.addArgument(param.getName(), param.getValue());    }}
0
public void setPath(String path)
{    SAMPLE.setPath(path);}
0
public void setPort(int port)
{    SAMPLE.setPort(port);}
0
public void setQueryString(String querystring)
{    SAMPLE.parseArguments(querystring);}
0
public void setSourceLogs(String sourcefile)
{}
0
public void setTarget(Object target)
{}
0
public Object generateRequest()
{    SAMPLE = HTTPSamplerFactory.newInstance();    return SAMPLE;}
0
public void save()
{}
0
public void reset()
{    SAMPLE = null;    generateRequest();}
0
public void setDecodeParameterValues(boolean decodeparams)
{    this.decode = decodeparams;}
0
public boolean decodeParameterValue()
{    return this.decode;}
0
public void setUseParsedFile(boolean file)
{    this.useFILE = file;}
0
public void setFilter(Filter filter)
{    FILTER = filter;}
0
public void setSourceFile(String source)
{    this.FILENAME = source;}
0
public int parse(TestElement el, int parseCount)
{    if (this.SOURCE == null) {        this.SOURCE = new File(this.FILENAME);    }    try {        if (this.READER == null) {            this.READER = getReader(this.SOURCE);        }        return parse(this.READER, el, parseCount);    } catch (Exception exception) {            }        return -1;}
1
private static BufferedReader getReader(File file) throws IOException
{    if (!isGZIP(file)) {        return new BufferedReader(new FileReader(file));    }    GZIPInputStream in = new GZIPInputStream(new FileInputStream(file));    return new BufferedReader(new InputStreamReader(in));}
0
private static boolean isGZIP(File file) throws IOException
{    try (FileInputStream in = new FileInputStream(file)) {        return in.read() == (GZIPInputStream.GZIP_MAGIC & 0xFF) && in.read() == (GZIPInputStream.GZIP_MAGIC >> 8);    }}
0
public int parseAndConfigure(int count, TestElement el)
{    return this.parse(el, count);}
0
protected int parse(BufferedReader breader, TestElement el, int parseCount)
{    int actualCount = 0;    String line = null;    try {                        line = breader.readLine();        while (line != null) {            if (line.length() > 0) {                actualCount += this.parseLine(line, el);            }                        if (parseCount != -1 && actualCount >= parseCount) {                break;            }            line = breader.readLine();        }        if (line == null) {            breader.close();            this.READER = null;        }    } catch (IOException ioe) {            }    return actualCount;}
1
protected int parseLine(String line, TestElement el)
{    int count = 0;            String cleanedLine = this.cleanURL(line);            el.setProperty(HTTPSamplerBase.METHOD, RMETHOD);    if (FILTER != null) {                if (!FILTER.isFiltered(line, el)) {                                    count++;                                                line = FILTER.filter(cleanedLine);            if (line != null) {                createUrl(line, el);            }        } else {                    }    } else {                        count++;                        createUrl(cleanedLine, el);    }    return count;}
1
private void createUrl(String line, TestElement el)
{    String paramString = null;        paramString = this.stripFile(line, el);    if (paramString != null) {        this.checkParamFormat(line);                this.convertStringToJMRequest(paramString, el);    }}
0
public String cleanURL(String entry)
{    String url = entry;    if (entry.contains("\"") && checkMethod(entry)) {                                StringTokenizer tokens = this.tokenize(entry, "\"");        while (tokens.hasMoreTokens()) {            String token = tokens.nextToken();            if (checkMethod(token)) {                                                                StringTokenizer token2 = this.tokenize(token, " ");                while (token2.hasMoreTokens()) {                    String t = (String) token2.nextElement();                    if (t.equalsIgnoreCase(GET)) {                        RMETHOD = GET;                    } else if (t.equalsIgnoreCase(POST)) {                        RMETHOD = POST;                    } else if (t.equalsIgnoreCase(HEAD)) {                        RMETHOD = HEAD;                    }                                        if (t.startsWith("/")) {                        url = t;                        break;                    }                }                break;            }        }        return url;    }        return url;}
0
public boolean checkMethod(String text)
{    if (text.contains("GET")) {        this.RMETHOD = GET;        return true;    } else if (text.contains("POST")) {        this.RMETHOD = POST;        return true;    } else if (text.contains("HEAD")) {        this.RMETHOD = HEAD;        return true;    } else {        return false;    }}
0
public String stripFile(String url, TestElement el)
{    if (url.contains("?")) {        StringTokenizer tokens = this.tokenize(url, "?");        this.URL_PATH = tokens.nextToken();        el.setProperty(HTTPSamplerBase.PATH, URL_PATH);        return tokens.hasMoreTokens() ? tokens.nextToken() : null;    }    el.setProperty(HTTPSamplerBase.PATH, url);    return null;}
0
public boolean checkURL(String url)
{    return url.contains("?");}
0
public boolean checkParamFormat(String text)
{    return text.contains("&") && text.contains("=");}
0
public void convertStringToJMRequest(String text, TestElement el)
{    ((HTTPSamplerBase) el).parseArguments(text);}
0
public NVPair[] convertStringtoNVPair(String stringparams)
{    List<String> vparams = this.parseParameters(stringparams);    NVPair[] nvparams = new NVPair[vparams.size()];        for (int idx = 0; idx < nvparams.length; idx++) {        nvparams[idx] = this.parseOneParameter(vparams.get(idx));    }    return nvparams;}
0
protected NVPair parseOneParameter(String parameter)
{        String name = "";    String value = null;    try {        StringTokenizer param = this.tokenize(parameter, "=");        name = param.nextToken();        value = param.nextToken();    } catch (Exception e) {                }    if (value == null) {        value = "";    } else {        if (decode) {            try {                value = URLDecoder.decode(value, StandardCharsets.UTF_8.name());            } catch (UnsupportedEncodingException e) {                            }        }    }    return new NVPair(name.trim(), value.trim());}
1
protected List<String> parseParameters(String parameters)
{    List<String> parsedParams = new ArrayList<>();    StringTokenizer paramtokens = this.tokenize(parameters, "&");    while (paramtokens.hasMoreElements()) {        parsedParams.add(paramtokens.nextToken());    }    return parsedParams;}
0
public StringTokenizer tokenize(String line, String delim)
{    return new StringTokenizer(line, delim);}
0
public void close()
{    try {        this.READER.close();        this.READER = null;        this.SOURCE = null;    } catch (IOException e) {        }}
0
public static String encode(String s)
{        return encode(s.getBytes());}
0
public static String encode(byte[] bs)
{    StringBuilder out = new StringBuilder();    int bl = bs.length;    for (int i = 0; i < bl; i += 3) {        out.append(encodeAtom(bs, i, bl - i));    }    return out.toString();}
0
public static String encodeAtom(byte[] b, int strt, int left)
{    StringBuilder out = new StringBuilder();    if (left == 1) {        byte b1 = b[strt];        int k = 0;        out.append(String.valueOf(pem_array[b1 >>> 2 & 63]));        out.append(String.valueOf(pem_array[(b1 << 4 & 48) + (k >>> 4 & 15)]));        out.append(String.valueOf(EQ));        out.append(String.valueOf(EQ));        return out.toString();    }    if (left == 2) {        byte b2 = b[strt];        byte b4 = b[strt + 1];        int l = 0;        out.append(String.valueOf(pem_array[b2 >>> 2 & 63]));        out.append(String.valueOf(pem_array[(b2 << 4 & 48) + (b4 >>> 4 & 15)]));        out.append(String.valueOf(pem_array[(b4 << 2 & 60) + (l >>> 6 & 3)]));        out.append(String.valueOf(EQ));        return out.toString();    }    byte b3 = b[strt];    byte b5 = b[strt + 1];    byte b6 = b[strt + 2];    out.append(String.valueOf(pem_array[b3 >>> 2 & 63]));    out.append(String.valueOf(pem_array[(b3 << 4 & 48) + (b5 >>> 4 & 15)]));    out.append(String.valueOf(pem_array[(b5 << 2 & 60) + (b6 >>> 6 & 3)]));    out.append(String.valueOf(pem_array[b6 & 63]));    return out.toString();}
0
public static String getEncodingFromContentType(String contentType)
{    String charSet = null;    if (contentType != null) {        int charSetStartPos = contentType.toLowerCase(java.util.Locale.ENGLISH).indexOf(CHARSET_EQ);        if (charSetStartPos >= 0) {            charSet = contentType.substring(charSetStartPos + CHARSET_EQ_LEN);            if (charSet != null) {                                charSet = StringUtils.replaceChars(charSet, "\'\"", null);                charSet = charSet.trim();                if (charSet.length() > 0) {                                        int semi = charSet.indexOf(';');                    if (semi == 0) {                        return null;                    }                    if (semi != -1) {                        charSet = charSet.substring(0, semi);                    }                    if (!Charset.isSupported(charSet)) {                        return null;                    }                    return charSet;                }                return null;            }        }    }    return charSet;}
0
public static URL makeRelativeURL(URL baseURL, String location) throws MalformedURLException
{    URL initial = new URL(baseURL, location);        if (!location.startsWith("../")) {                return initial;    }    String path = initial.getPath();    Matcher m = MAKE_RELATIVE_PATTERN.matcher(path);    if (m.lookingAt()) {                String prefix = m.group(1);        if (location.startsWith(prefix)) {            return new URL(baseURL, location.substring(prefix.length()));        }    }    return initial;}
0
public static String escapeIllegalURLCharacters(String url) throws Exception
{    String decodeUrl = URLDecoder.decode(url, StandardCharsets.UTF_8.name());    URL urlString = new URL(decodeUrl);    URI uri = new URI(urlString.getProtocol(), urlString.getUserInfo(), urlString.getHost(), urlString.getPort(), urlString.getPath(), urlString.getQuery(), urlString.getRef());    return uri.toString();}
0
public static URI sanitizeUrl(URL url) throws URISyntaxException
{    try {                return url.toURI();    } catch (URISyntaxException e) {                return new URI(url.getProtocol(), url.getUserInfo(), url.getHost(), url.getPort(), url.getPath(), url.getQuery(),         url.getRef());    }}
0
public static String removeSlashDotDot(String url)
{    if (url == null) {        return url;    }    url = url.trim();    if (url.length() < 4 || !url.contains(SLASHDOTDOT)) {        return url;    }    /**     * http://auth@host:port/path1/path2/path3/?query#anchor     */                int dotSlashSlashIndex = url.indexOf(COLONSLASHSLASH);    final int pathStartIndex;    if (dotSlashSlashIndex >= 0) {                pathStartIndex = url.indexOf(SLASH, dotSlashSlashIndex + COLONSLASHSLASH.length());    } else {                                        pathStartIndex = 0;    }        int pathEndIndex = url.length();    int questionMarkIdx = url.indexOf('?');    if (questionMarkIdx > 0) {        pathEndIndex = questionMarkIdx;    } else {        int anchorIdx = url.indexOf('#');        if (anchorIdx > 0) {            pathEndIndex = anchorIdx;        }    }            String currentPath = url.substring(pathStartIndex, pathEndIndex);    final boolean startsWithSlash = currentPath.startsWith(SLASH);    final boolean endsWithSlash = currentPath.endsWith(SLASH);    StringTokenizer st = new StringTokenizer(currentPath, SLASH);    List<String> tokens = new ArrayList<>();    while (st.hasMoreTokens()) {        tokens.add(st.nextToken());    }    for (int i = 0; i < tokens.size(); i++) {        if (i < tokens.size() - 1) {            final String thisToken = tokens.get(i);                        if (thisToken.length() > 0 && !thisToken.equals(DOTDOT) && tokens.get(i + 1).equals(DOTDOT)) {                tokens.remove(i);                tokens.remove(i);                                i = i - 2;                if (i < -1) {                                        i = -1;                }            }        }    }    StringBuilder newPath = new StringBuilder();    if (startsWithSlash) {        newPath.append(SLASH);    }    for (int i = 0; i < tokens.size(); i++) {        newPath.append(tokens.get(i));                        boolean appendSlash = i < (tokens.size() - 1) ? true : endsWithSlash;        if (appendSlash) {            newPath.append(SLASH);        }    }        StringBuilder s = new StringBuilder(url);    s.replace(pathStartIndex, pathEndIndex, newPath.toString());    return s.toString();}
0
public byte[] toByteArray()
{        if (this.count == this.buf.length) {        return this.buf;    }    return Arrays.copyOf(buf, count);}
0
public String getEncoded(String k)
{    try {        return getEncoded(k, URL_ARGUMENT_ENCODING);    } catch (UnsupportedEncodingException e) {                throw new Error("Should not happen: " + e.toString());    }}
0
public String getEncoded(String k, String contentEncoding) throws UnsupportedEncodingException
{    String cacheKey = k + contentEncoding;        Object encodedValue = cache.getElement(cacheKey);    if (encodedValue != null) {        return (String) encodedValue;    }        encodedValue = URLEncoder.encode(k, contentEncoding);        cache.addElement(cacheKey, encodedValue);    return (String) encodedValue;}
0
public void setUseEquals(boolean ue)
{    if (ue) {        setMetaData("=");    } else {        setMetaData("");    }    setProperty(new BooleanProperty(USE_EQUALS, ue));}
0
public boolean isUseEquals()
{    boolean eq = getPropertyAsBoolean(USE_EQUALS);    if (getMetaData().equals("=") || (getValue() != null && getValue().length() > 0)) {        setUseEquals(true);        return true;    }    return eq;}
0
public void setContentType(String ct)
{    setProperty(CONTENT_TYPE, ct, HTTPArgument.DEFAULT_CONTENT_TYPE);}
0
public String getContentType()
{    return getPropertyAsString(CONTENT_TYPE, HTTPArgument.DEFAULT_CONTENT_TYPE);}
0
public void setAlwaysEncoded(boolean ae)
{    setProperty(new BooleanProperty(ALWAYS_ENCODE, ae));}
0
public boolean isAlwaysEncoded()
{    return getPropertyAsBoolean(ALWAYS_ENCODE);}
0
public void setName(String newName)
{    if (newName == null || !newName.equals(getName())) {        super.setName(newName);    }}
0
public String getEncodedValue()
{        try {        return getEncodedValue(EncoderCache.URL_ARGUMENT_ENCODING);    } catch (UnsupportedEncodingException e) {                throw new Error("Should not happen: " + e.toString());    }}
0
public String getEncodedValue(String contentEncoding) throws UnsupportedEncodingException
{    if (isAlwaysEncoded()) {        return cache.getEncoded(getValue(), contentEncoding);    } else {        return getValue();    }}
0
public String getEncodedName()
{    if (isAlwaysEncoded()) {        return cache.getEncoded(getName());    } else {        return getName();    }}
0
public static void convertArgumentsToHTTP(Arguments args)
{    List<Argument> newArguments = new LinkedList<>();    for (JMeterProperty jMeterProperty : args.getArguments()) {        Argument arg = (Argument) jMeterProperty.getObjectValue();        if (!(arg instanceof HTTPArgument)) {            newArguments.add(new HTTPArgument(arg));        } else {            newArguments.add(arg);        }    }    args.removeAllArguments();    args.setArguments(newArguments);}
0
private void setProperty(String name, JMeterProperty prop)
{    JMeterProperty jmp = prop.clone();    jmp.setName(name);    setProperty(jmp);}
0
public void setParamName(String newParamName)
{    setProperty(new StringProperty(PARAMNAME, newParamName));}
0
public String getParamName()
{    return getPropertyAsString(PARAMNAME);}
0
public void setMimeType(String newMimeType)
{    setProperty(new StringProperty(MIMETYPE, newMimeType));}
0
public String getMimeType()
{    return getPropertyAsString(MIMETYPE);}
0
public void setPath(String newPath)
{    setProperty(new StringProperty(FILEPATH, newPath));}
0
public String getPath()
{    return getPropertyAsString(FILEPATH);}
0
public void setHeader(String newHeader)
{    header = newHeader;}
0
public String getHeader()
{    return header;}
0
public String toString()
{    return "path:'" + getPath() + "'|param:'" + getParamName() + "'|mimetype:'" + getMimeType() + "'";}
0
public boolean isNotEmpty()
{    return getPath().length() > 0 || getParamName().length() > 0 ||     getMimeType().length() > 0;}
0
public CollectionProperty getHTTPFileArgsCollection()
{    return (CollectionProperty) getProperty(HTTP_FILE_ARGS);}
0
public void clear()
{    super.clear();    setProperty(new CollectionProperty(HTTP_FILE_ARGS, new ArrayList<HTTPFileArg>()));}
0
public void setHTTPFileArgs(List<HTTPFileArg> files)
{    setProperty(new CollectionProperty(HTTP_FILE_ARGS, files));}
0
public void addHTTPFileArg(String path)
{    addHTTPFileArg(new HTTPFileArg(path));}
0
public void addHTTPFileArg(HTTPFileArg file)
{    TestElementProperty newHTTPFileArg = new TestElementProperty(file.getPath(), file);    if (isRunningVersion()) {        this.setTemporary(newHTTPFileArg);    }    getHTTPFileArgsCollection().addItem(newHTTPFileArg);}
0
public void addHTTPFileArg(String path, String param, String mime)
{    addHTTPFileArg(new HTTPFileArg(path, param, mime));}
0
public PropertyIterator iterator()
{    return getHTTPFileArgsCollection().iterator();}
0
public HTTPFileArg[] asArray()
{    CollectionProperty props = getHTTPFileArgsCollection();    final int size = props.size();    HTTPFileArg[] args = new HTTPFileArg[size];    for (int i = 0; i < size; i++) {        args[i] = (HTTPFileArg) props.get(i).getObjectValue();    }    return args;}
0
public String toString()
{    StringBuilder str = new StringBuilder();    PropertyIterator iter = getHTTPFileArgsCollection().iterator();    while (iter.hasNext()) {        HTTPFileArg file = (HTTPFileArg) iter.next().getObjectValue();        str.append(file.toString());        if (iter.hasNext()) {                        str.append("\n");        }    }    return str.toString();}
0
public void removeHTTPFileArg(int row)
{    if (row < getHTTPFileArgCount()) {        getHTTPFileArgsCollection().remove(row);    }}
0
public void removeHTTPFileArg(HTTPFileArg file)
{    PropertyIterator iter = getHTTPFileArgsCollection().iterator();    while (iter.hasNext()) {        HTTPFileArg item = (HTTPFileArg) iter.next().getObjectValue();        if (file.equals(item)) {            iter.remove();        }    }}
0
public void removeHTTPFileArg(String filePath)
{    PropertyIterator iter = getHTTPFileArgsCollection().iterator();    while (iter.hasNext()) {        HTTPFileArg file = (HTTPFileArg) iter.next().getObjectValue();        if (file.getPath().equals(filePath)) {            iter.remove();        }    }}
0
public void removeAllHTTPFileArgs()
{    getHTTPFileArgsCollection().clear();}
0
public void addEmptyHTTPFileArg()
{    addHTTPFileArg(new HTTPFileArg(""));}
0
public int getHTTPFileArgCount()
{    return getHTTPFileArgsCollection().size();}
0
public HTTPFileArg getHTTPFileArg(int row)
{    HTTPFileArg file = null;    if (row < getHTTPFileArgCount()) {        file = (HTTPFileArg) getHTTPFileArgsCollection().get(row).getObjectValue();    }    return file;}
0
public static String getVersion()
{        return "$Revision$";}
0
public boolean canConvert(@SuppressWarnings("rawtypes") Class arg0)
{        return HTTPSampleResult.class.equals(arg0);}
0
public void marshal(Object obj, HierarchicalStreamWriter writer, MarshallingContext context)
{    HTTPSampleResult res = (HTTPSampleResult) obj;    SampleSaveConfiguration save = res.getSaveConfig();    setAttributes(writer, context, res, save);    saveAssertions(writer, context, res, save);    saveSubResults(writer, context, res, save);    saveResponseHeaders(writer, context, res, save);    saveRequestHeaders(writer, context, res, save);    saveResponseData(writer, context, res, save);    saveSamplerData(writer, context, res, save);}
0
private void saveSamplerData(HierarchicalStreamWriter writer, MarshallingContext context, HTTPSampleResult res, SampleSaveConfiguration save)
{    if (save.saveSamplerData(res)) {        writeString(writer, TAG_COOKIES, res.getCookies());        writeString(writer, TAG_METHOD, res.getHTTPMethod());        writeString(writer, TAG_QUERY_STRING, res.getQueryString());        writeString(writer, TAG_REDIRECT_LOCATION, res.getRedirectLocation());    }    if (save.saveUrl()) {        writeItem(res.getURL(), context, writer);    }}
0
public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context)
{    HTTPSampleResult res = (HTTPSampleResult) createCollection(context.getRequiredType());    retrieveAttributes(reader, context, res);    while (reader.hasMoreChildren()) {        reader.moveDown();        Object subItem = readItem(reader, context, res);        if (!retrieveItem(reader, context, res, subItem)) {            retrieveHTTPItem(reader, res, subItem);        }        reader.moveUp();    }        String resultFileName = res.getResultFileName();    if (resultFileName.length() > 0 && res.getResponseData().length == 0) {        readFile(resultFileName, res);    }    return res;}
0
private void retrieveHTTPItem(HierarchicalStreamReader reader, HTTPSampleResult res, Object subItem)
{    if (subItem instanceof URL) {        res.setURL((URL) subItem);    } else {        String nodeName = reader.getNodeName();        if (nodeName.equals(TAG_COOKIES)) {            res.setCookies((String) subItem);        } else if (nodeName.equals(TAG_METHOD)) {            res.setHTTPMethod((String) subItem);        } else if (nodeName.equals(TAG_QUERY_STRING)) {            res.setQueryString((String) subItem);        } else if (nodeName.equals(TAG_REDIRECT_LOCATION)) {            res.setRedirectLocation((String) subItem);        }    }}
0
 byte[] getBuffer()
{    return buf;}
0
public synchronized int read()
{        buf = os.getBuffer();        count = buf.length;    return super.read();}
0
public synchronized int read(byte[] b, int off, int len)
{    buf = os.getBuffer();    count = buf.length;    return super.read(b, off, len);}
0
public OutputStream getOutputStream() throws IOException
{    return os;}
0
public InputStream getInputStream() throws IOException
{    return new LoopBackInputStream(os);}
0
public Socket createSocket(final HttpContext context) throws IOException
{    return new SlowSocket(charactersPerSecond);}
0
public void init()
{    paneParsed = new JPanel(new BorderLayout(0, 5));    paneParsed.add(createRequestPane(), BorderLayout.CENTER);    this.searchTextExtension = new SearchTextExtension(new RequestViewHttpSearchProvider());    paneParsed.add(searchTextExtension.getSearchToolBar(), BorderLayout.NORTH);}
0
public void clearData()
{    requestModel.clearData();    paramsModel.clearData();        headersModel.clearData();}
0
public void setSamplerResult(Object objectResult)
{    this.searchTextExtension.resetTextToFind();    if (objectResult instanceof HTTPSampleResult) {        HTTPSampleResult sampleResult = (HTTPSampleResult) objectResult;                requestModel.addRow(new RowResult(        JMeterUtils.getResString("view_results_table_request_http_method"), sampleResult.getHTTPMethod()));                LinkedHashMap<String, String> lhm = JMeterUtils.parseHeaders(sampleResult.getRequestHeaders());        for (Entry<String, String> entry : lhm.entrySet()) {            headersModel.addRow(new RowResult(entry.getKey(), entry.getValue()));        }        URL hUrl = sampleResult.getURL();        if (hUrl != null) {                        requestModel.addRow(new RowResult(JMeterUtils.getResString(            "view_results_table_request_http_protocol"), hUrl.getProtocol()));            requestModel.addRow(new RowResult(            JMeterUtils.getResString("view_results_table_request_http_host"), hUrl.getHost()));            int port = hUrl.getPort() == -1 ? hUrl.getDefaultPort() : hUrl.getPort();            requestModel.addRow(new RowResult(            JMeterUtils.getResString("view_results_table_request_http_port"), Integer.valueOf(port)));            requestModel.addRow(new RowResult(            JMeterUtils.getResString("view_results_table_request_http_path"), hUrl.getPath()));                        String queryGet = hUrl.getQuery() == null ? "" : hUrl.getQuery();            boolean isMultipart = isMultipart(lhm);                        String queryPost = sampleResult.getQueryString();            if (!isMultipart && StringUtils.isNotBlank(queryPost)) {                if (queryGet.length() > 0) {                    queryGet += PARAM_CONCATENATE;                }                queryGet += queryPost;            }            if (StringUtils.isNotBlank(queryGet)) {                Set<Entry<String, String[]>> keys = RequestViewHTTP.getQueryMap(queryGet).entrySet();                for (Entry<String, String[]> entry : keys) {                    for (String value : entry.getValue()) {                        paramsModel.addRow(new RowResult(entry.getKey(), value));                    }                }            }            if (isMultipart && StringUtils.isNotBlank(queryPost)) {                String contentType = lhm.get(HTTPConstants.HEADER_CONTENT_TYPE);                String boundaryString = extractBoundary(contentType);                MultipartUrlConfig urlconfig = new MultipartUrlConfig(boundaryString);                urlconfig.parseArguments(queryPost);                for (JMeterProperty prop : urlconfig.getArguments()) {                    Argument arg = (Argument) prop.getObjectValue();                    paramsModel.addRow(new RowResult(arg.getName(), arg.getValue()));                }            }        }                String cookie = sampleResult.getCookies();        if (cookie != null && cookie.length() > 0) {            headersModel.addRow(new RowResult(            JMeterUtils.getParsedLabel("view_results_table_request_http_cookie"), sampleResult.getCookies()));        }    } else {                requestModel.addRow(new         RowResult(        "",         JMeterUtils.getResString("view_results_table_request_http_nohttp")));    }}
0
private String extractBoundary(String contentType)
{        String boundaryString = contentType.substring(contentType.toLowerCase(java.util.Locale.ENGLISH).indexOf("boundary=") + "boundary=".length());        String[] split = boundaryString.split(";");    if (split.length > 1) {        boundaryString = split[0];    }    return boundaryString;}
0
private boolean isMultipart(LinkedHashMap<String, String> headers)
{    String contentType = headers.get(HTTPConstants.HEADER_CONTENT_TYPE);    return contentType != null && contentType.startsWith(HTTPConstants.MULTIPART_FORM_DATA);}
0
public static Map<String, String[]> getQueryMap(String query)
{    Map<String, String[]> map = new HashMap<>();    String[] params = query.split(PARAM_CONCATENATE);    for (String param : params) {        String[] paramSplit = param.split("=");        String name = decodeQuery(paramSplit[0]);                if (name.trim().startsWith("<?")) {                                    map.put(" ", new String[] { query });            return map;        }                if ((param.startsWith("=") && paramSplit.length == 1) || paramSplit.length > 2) {                        map.put(" ", new String[] { query });            return map;        }        String value = "";        if (paramSplit.length > 1) {            value = decodeQuery(paramSplit[1]);        }        String[] known = map.get(name);        if (known == null) {            known = new String[] { value };        } else {            String[] tmp = new String[known.length + 1];            tmp[tmp.length - 1] = value;            System.arraycopy(known, 0, tmp, 0, known.length);            known = tmp;        }        map.put(name, known);    }    return map;}
0
public static String decodeQuery(String query)
{    if (query != null && query.length() > 0) {        try {                        return URLDecoder.decode(query, CHARSET_DECODE);        } catch (IllegalArgumentException | UnsupportedEncodingException e) {                        return query;        }    }    return "";}
1
public JPanel getPanel()
{    return paneParsed;}
0
private Component createRequestPane()
{        tableRequest = new JTable(requestModel);    JMeterUtils.applyHiDPI(tableRequest);        tableRequest.setToolTipText(JMeterUtils.getResString("textbox_tooltip_cell"));    tableRequest.addMouseListener(new TextBoxDoubleClick(tableRequest));    setFirstColumnPreferredAndMaxWidth(tableRequest);    RendererUtils.applyRenderers(tableRequest, RENDERERS_REQUEST);        tableParams = new JTable(paramsModel);    JMeterUtils.applyHiDPI(tableParams);        tableParams.setToolTipText(JMeterUtils.getResString("textbox_tooltip_cell"));    tableParams.addMouseListener(new TextBoxDoubleClick(tableParams));    TableColumn column = tableParams.getColumnModel().getColumn(0);    column.setPreferredWidth(160);    tableParams.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());    RendererUtils.applyRenderers(tableParams, RENDERERS_PARAMS);        tableHeaders = new JTable(headersModel);    JMeterUtils.applyHiDPI(tableHeaders);        tableHeaders.setToolTipText(JMeterUtils.getResString("textbox_tooltip_cell"));    tableHeaders.addMouseListener(new TextBoxDoubleClick(tableHeaders));    setFirstColumnPreferredAndMaxWidth(tableHeaders);    tableHeaders.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());    RendererUtils.applyRenderers(tableHeaders, RENDERERS_HEADERS);        JSplitPane topSplit = new JSplitPane(JSplitPane.VERTICAL_SPLIT, GuiUtils.makeScrollPane(tableParams), GuiUtils.makeScrollPane(tableHeaders));    topSplit.setOneTouchExpandable(true);        topSplit.setResizeWeight(0.50);        topSplit.setBorder(null);    JSplitPane paneParsed = new JSplitPane(JSplitPane.VERTICAL_SPLIT, GuiUtils.makeScrollPane(tableRequest), topSplit);    paneParsed.setOneTouchExpandable(true);        paneParsed.setResizeWeight(0.25);        paneParsed.setBorder(null);        JPanel panel = new JPanel(new BorderLayout());    panel.add(paneParsed);    return panel;}
0
private void setFirstColumnPreferredAndMaxWidth(JTable table)
{    TableColumn column = table.getColumnModel().getColumn(0);    column.setMaxWidth(300);    column.setPreferredWidth(160);}
0
public String getLabel()
{    return JMeterUtils.getResString(KEY_LABEL);}
0
public void resetTextToFind()
{    lastPosition = -1;    if (tableParams != null) {        tableParams.clearSelection();    }}
0
public boolean executeAndShowTextFind(Pattern pattern)
{    boolean found = false;    if (tableParams != null) {        tableParams.clearSelection();        outerloop: for (int i = lastPosition + 1; i < tableParams.getRowCount(); i++) {            for (int j = 0; j < COLUMNS_PARAMS.length; j++) {                Object o = tableParams.getModel().getValueAt(i, j);                if (o instanceof String) {                    Matcher matcher = pattern.matcher((String) o);                    if (matcher.find()) {                        found = true;                        tableParams.setRowSelectionInterval(i, i);                        tableParams.scrollRectToVisible(tableParams.getCellRect(i, 0, true));                        lastPosition = i;                        break outerloop;                    }                }            }        }        if (!found) {            resetTextToFind();        }    }    return found;}
0
public void testFFParsing()
{    String cmdLine = "curl 'http://jmeter.apache.org/' -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:63.0) Gecko/20100101 Firefox/63.0' " + "-H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' " + "-H 'Accept-Language: en-US,en;q=0.5' --compressed -H 'DNT: 1' " + "-H 'Connection: keep-alive' -H 'Upgrade-Insecure-Requests: 1'";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("http://jmeter.apache.org/", request.getUrl());    Assert.assertEquals(5, request.getHeaders().size());    Assert.assertTrue(request.isCompressed());    Assert.assertEquals("GET", request.getMethod());    String resParser = "Request [compressed=true, url=http://jmeter.apache.org/, method=GET, headers={User-Agent=Mozilla/5.0 " + "(Macintosh; Intel Mac OS X 10.11; rv:63.0) Gecko/20100101 Firefox/63.0, Accept=text/html,application/xhtml+xml," + "application/xml;q=0.9,*/*;q=0.8, Accept-Language=en-US,en;q=0.5, DNT=1, " + "Upgrade-Insecure-Requests=1}]";    Assert.assertEquals("The method 'toString' should get all parameters correctly", resParser, request.toString());}
0
public void testChromeParsing()
{    String cmdLine = "curl 'https://jmeter.apache.org/' -H 'Proxy-Connection: keep-alive' " + "-H 'Proxy-Authorization: Basic XXXXXXXXX/' -H 'Upgrade-Insecure-Requests: 1' " + "-H 'User-Agent: Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) " + "Chrome/70.0.3538.102 Mobile Safari/537.36' " + "-H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8' " + "-H 'Accept-Encoding: gzip, deflate' -H 'Accept-Language: en-US,en;q=0.9,fr;q=0.8' --compressed";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("https://jmeter.apache.org/", request.getUrl());    Assert.assertEquals(7, request.getHeaders().size());    Assert.assertTrue(request.isCompressed());}
0
public void testDoubleQuote()
{    String cmdLine = "curl \"http://jmeter.apache.org/\"";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("The method 'translateCommandline' should get the url correctly When using double quotes, ", "http://jmeter.apache.org/", request.getUrl());}
0
public void testChromeParsingNotCompressed()
{    String cmdLine = "curl 'https://jmeter.apache.org/' -H 'Proxy-Connection: keep-alive' " + "-H 'Proxy-Authorization: Basic XXXXXXXXX/' -H 'Upgrade-Insecure-Requests: 1' " + "-H 'User-Agent: Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko)" + " Chrome/70.0.3538.102 Mobile Safari/537.36' " + "-H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8' " + "-H 'Accept-Encoding: gzip, deflate' " + "-H 'Accept-Language: en-US,en;q=0.9,fr;q=0.8'";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("https://jmeter.apache.org/", request.getUrl());    Assert.assertEquals(7, request.getHeaders().size());    Assert.assertFalse(request.isCompressed());    Assert.assertEquals("GET", request.getMethod());}
0
public void testChromeParsingNoHeaders()
{    String cmdLine = "curl 'https://jmeter.apache.org/'";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("https://jmeter.apache.org/", request.getUrl());    Assert.assertTrue(request.getHeaders().isEmpty());    Assert.assertFalse(request.isCompressed());    Assert.assertEquals("GET", request.getMethod());}
0
public void testNullCommand()
{    String cmdLine = "";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("The method 'translateCommandline' should return 'null' when command is empty, ", "Request [compressed=false, url=null, method=GET, headers={}]", request.toString());}
0
public void testUnbalancedQuotes()
{    String cmdLine = "curl \"https://jmeter.apache.org/'";    BasicCurlParser basicCurlParser = new BasicCurlParser();    basicCurlParser.parse(cmdLine);    Assert.fail("The method 'translateCommandline shouldn't run when the quotes are not balanced,");}
0
public void testPost()
{    String cmdLine = "curl 'https://jmeter.apache.org/test' -X 'POST' " + "-H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:63.0) Gecko/20100101 Firefox/63.0' -H 'Accept: */*' " + "-H 'Accept-Language: en-US,en;q=0.5' --compressed -H 'Referer: https://www.example.com/' " + "-H 'content-type: application/json;charset=UTF-8' -H 'Origin: https://www.example.com' " + "-H 'DNT: 1' -H 'Connection: keep-alive' -H 'TE: Trailers' " + "--data '{\"abc\":\"123\",\"no\":\"matter on sunshine\"}'";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("https://jmeter.apache.org/test", request.getUrl());    Assert.assertEquals(8, request.getHeaders().size());    Assert.assertTrue(request.isCompressed());    Assert.assertEquals("POST", request.getMethod());    Assert.assertEquals("The method 'getPostData' should return the data correctly", "{\"abc\":\"123\",\"no\":\"matter on sunshine\"}", request.getPostData());}
0
public void testMethodPut()
{    String cmdLine = "curl -X 'PUT' 'https://jmeter.apache.org/test' " + "-H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:63.0) Gecko/20100101 Firefox/63.0' -H 'Accept: */*' " + "-H 'Accept-Language: en-US,en;q=0.5' --compressed -H 'Referer: https://www.example.com/' " + "-H 'content-type: application/json;charset=UTF-8' -H 'Origin: https://www.example.com' " + "-H 'DNT: 1' -H 'Connection: keep-alive' -H 'TE: Trailers'";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("PUT", request.getMethod());}
0
public void testError()
{    String cmdLine = "curl 'https://jmeter.apache.org/' --error -H 'Proxy-Connection: keep-alive' " + "-H 'Proxy-Authorization: Basic XXXXXXXXX/' " + "-H 'User-Agent: Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko)" + " Chrome/70.0.3538.102 Mobile Safari/537.36' " + "-H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8' " + "-H 'Accept-Encoding: gzip, deflate' " + "-H 'Accept-Language: en-US,en;q=0.9,fr;q=0.8'";    BasicCurlParser basicCurlParser = new BasicCurlParser();    basicCurlParser.parse(cmdLine);}
0
public void testUserAgent()
{    String cmdLine = "curl 'http://jmeter.apache.org/' -H 'User-Agent: Mozilla/5.0 (Macintosh;" + " Intel Mac OS X 10.11; rv:63.0) Gecko/20100101 Firefox/63.0' " + "-H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' " + "-H 'Accept-Language: en-US,en;q=0.5' --compressed -H 'DNT: 1' " + "-H 'Connection: keep-alive' -H 'Upgrade-Insecure-Requests: 1' -A 'Mozilla/5.0'";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("With method 'parser', the quantity of Headers should be 5' ", 5, request.getHeaders().size());    Assert.assertEquals("With method 'parser', Headers need to add 'user-agent' with value 'Mozilla/5.0' ", "Mozilla/5.0", request.getHeaders().get("User-Agent"));}
0
public void testConnectMax()
{    String cmdLine = "curl 'http://jmeter.apache.org/' -H 'Connection: keep-alive' " + "-H 'Upgrade-Insecure-Requests: 1' --connect-timeout '2'";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("With method 'parser' request should contain 'connect-timeout=2'", "2000.0", String.valueOf(request.getConnectTimeout()));}
0
public void testAuthorization()
{    String cmdLine = "curl 'http://jmeter.apache.org/' -u 'arun:12345'";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("With method 'parser',request should contain the parameters of the userneame of authorization", "arun", request.getAuthorization().getUser());    Assert.assertEquals("With method 'parser',request should contain the " + "parameters of the password of authorization", "12345", request.getAuthorization().getPass());}
0
public void testAuthorizationMechanismIsDigest()
{    String cmdLine = "curl 'http://jmeter.apache.org/' -u 'arun:12345' --digest";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("With method 'parser',the mechanism should be 'DIGEST' ", "DIGEST", request.getAuthorization().getMechanism().toString());}
0
public void testAuthMechanismIsBasic()
{    String cmdLine = "curl 'http://jmeter.apache.org/' -u 'arun:12345' --basic";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("With method 'parser',the mechanism should be 'BASIC' ", "BASIC", request.getAuthorization().getMechanism().toString());}
0
public void testDefaultAuthMechanism()
{    String cmdLine = "curl 'http://jmeter.apache.org/' -u 'arun:12345'";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("With method 'parser',the mechanism should be 'BASIC' ", "BASIC", request.getAuthorization().getMechanism().toString());}
0
public void testCacert()
{    String cmdLine = "curl 'http://jmeter.apache.org/' --cacert 'test.pem' ";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("With method 'parser',the cacert need to show a warning' ", "cacert", request.getCaCert());}
0
public void testCapath()
{    String cmdLine = "curl 'http://jmeter.apache.org/' --capath 'test.pem' ";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("With method 'parser',the cacert need to show a warning' ", "capath", request.getCaCert());}
0
public void testCert()
{    String cmdLine = "curl 'http://jmeter.apache.org/' -E 'test.pem' ";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("With method 'parser',the cacert need to show a warning' ", "cert", request.getCaCert());}
0
public void testCiphers()
{    String cmdLine = "curl 'http://jmeter.apache.org/' --ciphers 'test.pem' ";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("With method 'parser',the cacert need to show a warning' ", "ciphers", request.getCaCert());}
0
public void testCertStatus()
{    String cmdLine = "curl 'http://jmeter.apache.org/'  --cert-status ";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("With method 'parser',the cacert need to show a warning' ", "cert-status", request.getCaCert());}
0
public void testCertType()
{    String cmdLine = "curl 'http://jmeter.apache.org/'  --cert-type 'test'";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("With method 'parser',the cacert need to show a warning' ", "cert-type", request.getCaCert());}
0
public void testData()
{    String cmdLine = "curl 'https://www.w3schools.com/html/tryit.asp?filename=tryhtml_form_submit/action_page.php' " + "-H 'cache-control: no-cache' --data 'name=test' ";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("With method 'parser',the parameters should be name=test' ", "name=test", request.getPostData());}
0
public void testDataReadFromFile() throws IOException
{    String encoding = StandardCharsets.UTF_8.name();    File file = tempFolder.newFile("test.txt");    FileUtils.writeStringToFile(file, "name=test" + System.lineSeparator(), encoding, true);    String pathname = file.getAbsolutePath();    String cmdLine = "curl 'https://www.w3schools.com/html/tryit.asp?filename=tryhtml_form_submit/action_page.php' " + "-H 'cache-control: no-cache' --data '@" + pathname + "' ";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("With method 'parser',the parameters need to reserve '\n' and '\r' ", "name=test", request.getPostData());}
0
public void testDataReadFromNonexistentFile()
{    String cmdLine = "curl 'https://www.w3schools.com/html/tryit.asp?filename=tryhtml_form_submit/action_page.php' " + "-H 'cache-control: no-cache' --data '@test.txt' ";    BasicCurlParser basicCurlParser = new BasicCurlParser();    basicCurlParser.parse(cmdLine);    Assert.fail("The method 'translateCommandline shouldn't run when the path of file is incorrect");}
0
public void testDataUrlEncodeOneParameterWithoutName()
{    String cmdLine = "curl 'https://www.w3schools.com/html/tryit.asp?filename=tryhtml_form_submit/action_page.php' " + "-H 'cache-control: no-cache' --data-urlencode 'é' ";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("With method 'parser',the parameters need to be encoded' ", "%C3%A9", request.getPostData());}
0
public void testDataUrlEncodeOneParameterWithName()
{    String cmdLine = "curl 'https://www.w3schools.com/html/tryit.asp?filename=tryhtml_form_submit/action_page.php' " + "-H 'cache-control: no-cache' --data-urlencode 'value=é' ";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("With method 'parser',the parameters need to be encoded' ", "value=%C3%A9", request.getPostData());}
0
public void testDataUrlEncodeMoreThanOneParameters()
{    String cmdLine = "curl 'https://postman-echo.com/post' -H 'Content-Type: application/x-www-form-urlencoded'" + " -H 'cache-control: no-cache' --data-urlencode 'foo1=!!!&foo2=???'";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("With method 'parser',the parameters need to be encoded' ", "foo1=%21%21%21%26foo2%3D%3F%3F%3F", request.getPostData());}
0
public void testDataUrlEncodeFromFile() throws IOException
{    String encoding = StandardCharsets.UTF_8.name();    File file = tempFolder.newFile("test.txt");    FileUtils.writeStringToFile(file, "test", encoding, true);    String pathname = file.getAbsolutePath();    String cmdLine = "curl 'https://www.w3schools.com/html/tryit.asp?filename=tryhtml_form_submit/action_page.php' " + "-H 'cache-control: no-cache' --data-urlencode 'name@" + pathname + "' ";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("With method 'parser',the parameters in the file need to be encoded' ", "name=test", request.getPostData());}
0
public void testDataUrlEncodeWith2AtSymbol() throws IOException
{    String encoding = StandardCharsets.UTF_8.name();    File file = tempFolder.newFile("test.txt");    FileUtils.writeStringToFile(file, "test@", encoding, true);    String pathname = file.getAbsolutePath();    String cmdLine = "curl 'https://www.w3schools.com/html/tryit.asp?filename=tryhtml_form_submit/action_page.php' " + "-H 'cache-control: no-cache' --data-urlencode 'name@" + pathname + "' ";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("With method 'parser',the parameters in the file need to be encoded' ", "name=test%40", request.getPostData());}
0
public void testDataBinaryReadFromFile() throws IOException
{    String encoding = StandardCharsets.UTF_8.name();    File file = tempFolder.newFile("test.txt");    FileUtils.writeStringToFile(file, "name=test" + System.lineSeparator(), encoding, true);    String pathname = file.getAbsolutePath();    String cmdLine = "curl 'https://www.w3schools.com/html/tryit.asp?filename=tryhtml_form_submit/action_page.php' " + "-H 'cache-control: no-cache' --data-binary '@" + pathname + "' ";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("With method 'parser',the parameters need to reserve '\n' and '\r' ", "name=test" + System.lineSeparator(), request.getPostData());}
0
public void testForm()
{    String cmdLine = "curl 'https://www.w3schools.com/html/tryit.asp?filename=tryhtml_form_submit/action_page.php' " + "-H 'cache-control: no-cache' -F 'test=name' -F 'test1=name1' ";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Map<String, String> res = request.getFormData();    Assert.assertEquals("With method 'parser', we should post form data", "name1", res.get("test1"));}
0
public void testFormString()
{    String cmdLine = "curl 'https://www.w3schools.com/html/tryit.asp?filename=tryhtml_form_submit/action_page.php' " + "-H 'cache-control: no-cache' --form-string 'image=@C:\\Test\\test.jpg' ";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Map<String, String> res = request.getFormStringData();    Assert.assertEquals("With method 'parser', we should post form data", "@C:\\Test\\test.jpg", res.get("image"));}
0
public void testGet()
{    String cmdLine = "curl -X POST  \"https://api.imgur.com/3/upload\" " + " -H 'Authorization: Client-ID fb52f2bfa714a36' --data   " + "'name=aaa%&lname=bbb' -G";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("With method 'parser', it should put the post data in the url", "https://api.imgur.com/3/upload?name=aaa%&lname=bbb", request.getUrl());    Assert.assertEquals("With method 'parser',the method should be 'GET'", "GET", request.getMethod());}
0
public void testDnsServer()
{    String cmdLine = "curl -X POST  \"https://api.imgur.com/3/upload\" " + " -H 'Authorization: Client-ID fb52f2bfa714a36' --dns-servers '0.0.0.0,1.1.1.1'";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertTrue("With method 'parser', the Dns Server 0.0.0.0 should exist", request.getDnsServers().contains("0.0.0.0"));}
0
public void testNotKeepAlive()
{    String cmdLine = "curl -X POST  \"https://api.imgur.com/3/upload\" " + " -H 'Authorization: Client-ID fb52f2bfa714a36' --dns-servers '0.0.0.0,1.1.1.1' --no-keepalive ";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertFalse("With method 'parser', keepalive should be disabled", request.isKeepAlive());}
0
public void testProxy()
{    String cmdLine = "curl 'http://jmeter.apache.org/' -x 'https://aa:bb@example.com:8042'";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("With method 'parser',the host of proxy should be 'examole.com'", "example.com", request.getProxyServer().get("servername"));    Assert.assertEquals("With method 'parser',the port of proxy should be 8042", "8042", request.getProxyServer().get("port"));    Assert.assertEquals("With method 'parser',the scheme of proxy should be https", "https", request.getProxyServer().get("scheme"));    Assert.assertEquals("With method 'parser',the username of proxy should be aa", "aa", request.getProxyServer().get("username"));    Assert.assertEquals("With method 'parser',the password of proxy should be aa", "bb", request.getProxyServer().get("password"));}
0
public void testProxyDefaultPort()
{    String cmdLine = "curl 'http://jmeter.apache.org/' -x 'https://example.com'";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("With method 'parser',the default port of proxy should be 1080", "1080", request.getProxyServer().get("port"));}
0
public void testProxyUser()
{    String cmdLine = "curl 'http://jmeter.apache.org/' --proxy '201.36.208.19:3128' -U 'aa:bb'";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("With method 'parser',the username of proxy should be aa", "aa", request.getProxyServer().get("username"));    Assert.assertEquals("With method 'parser',the password of proxy should be aa", "bb", request.getProxyServer().get("password"));}
0
public void testProxyUriIncorrectFormat()
{    String cmdLine = "curl 'http://jmeter.apache.org/' -x 'https://xxxx.xxx?xxx=xxx|xxxx|'";    BasicCurlParser basicCurlParser = new BasicCurlParser();    basicCurlParser.parse(cmdLine);    Assert.fail("The method 'translateCommandline shouldn't run when the uri of proxy is not in the correct format");}
0
public void testMaxTime()
{    String cmdLine = "curl 'http://jmeter.apache.org/' -m '2'";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("With method 'parser', max time of all the operation should be 200", "2000.0", String.valueOf(request.getMaxTime()));}
0
public void testReferer()
{    String cmdLine = "curl 'http://jmeter.apache.org/' --referer 'www.baidu.com'";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("With method 'parser', the refer page information should be set in http Header", "www.baidu.com", request.getHeaders().get("Referer"));}
0
public void testStringtoCookie()
{    String cookieStr = "name=Tom;password=123456";    String url = "api.imgur.com/3/upload";    BasicCurlParser.stringToCookie(cookieStr, url);}
0
public void testCookie()
{    String cmdLine = "curl -X POST  \"https://api.imgur.com/3/upload\" -b 'name=Tom;password=123456'";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    List<Cookie> cookies = new ArrayList<>();    Cookie c1 = new Cookie();    c1.setDomain("api.imgur.com");    c1.setName("name");    c1.setValue("Tom");    c1.setPath("/3/upload");    Cookie c2 = new Cookie();    c2.setDomain("api.imgur.com");    c2.setName("password");    c2.setValue("123456");    c2.setPath("/3/upload");    cookies.add(c1);    cookies.add(c2);    Assert.assertTrue("With method 'parser', the cookie should be set in CookieManager", request.getCookies("https://api.imgur.com/3/upload").contains(c1));    Assert.assertTrue("With method 'parser', the cookie should be set in CookieManager", request.getCookies("https://api.imgur.com/3/upload").contains(c2));    Assert.assertEquals("With method 'parser', the cookie should be set in CookieManager", 2, request.getCookies("https://api.imgur.com/3/upload").size());}
0
public void testCookieFromFile() throws IOException
{    File file = tempFolder.newFile("test.txt");    String pathname = file.getAbsolutePath();    String cmdLine = "curl -X POST  \"https://api.imgur.com/3/upload\" -b '" + pathname + "'";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("With method 'parser', the file of cookie should be uploaded in CookieManager", file.getAbsolutePath(), request.getFilepathCookie());}
0
public void testCookieInHeader()
{    String cmdLine = "curl 'http://jmeter.apache.org/' -H 'cookie: PHPSESSID=testphpsessid;a=b' --compressed";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    List<Cookie> cookies = request.getCookieInHeaders("http://jmeter.apache.org/");    Cookie c1 = new Cookie();    c1.setDomain("jmeter.apache.org");    c1.setName("a");    c1.setValue("b");    c1.setPath("/");    Assert.assertEquals("Just static cookie in header can be added in CookieManager", c1, cookies.get(0));    Assert.assertEquals("Just static cookie in header can be added in CookieManager", 1, cookies.size());}
0
public void testIgnoreOptions()
{    String cmdLine = "curl 'http://jmeter.apache.org/' --include --keepalive-time '20'";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    List<String> listOptions = request.getOptionsIgnored();    Assert.assertTrue("The list of ignored options should contain 'include'", listOptions.contains("include"));    Assert.assertTrue("The list of ignored options should contain 'keepalive-time'", listOptions.contains("keepalive-time"));}
0
public void testHead()
{    String cmdLine = "curl 'http://jmeter.apache.org/' --head";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("The method should be HEAD", "HEAD", request.getMethod());}
0
public void testInterface()
{    String cmdLine = "curl 'http://jmeter.apache.org/'   --interface 'etho'";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("The interface should to be etho", "etho", request.getInterfaceName());}
0
public void testResolver()
{    String cmdLine = "curl 'http://jmeter.apache.org/' --resolve 'moonagic.com:443:127.0.0.2'";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("The resolve DNS should be 'moonagic.com:443:127.0.0.2'", "moonagic.com:443:127.0.0.2", request.getDnsResolver());}
0
public void testLimitRate()
{    String cmdLine = "curl 'http://jmeter.apache.org/' --limit-rate '1g'";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("The limit rate should be 1024000000", 1024000000, request.getLimitRate());    cmdLine = "curl 'http://jmeter.apache.org/' --limit-rate '171k'";    request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("The limit rate should be 175104", 175104, request.getLimitRate());    cmdLine = "curl 'http://jmeter.apache.org/' --limit-rate '54M'";    request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("The limit rate should be 55296000", 55296000, request.getLimitRate());}
0
public void testNoproxy()
{    String cmdLine = "curl 'http://jmeter.apache.org/' --noproxy 'localhost'";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertEquals("No Proxy server should be localhost", "localhost", request.getNoproxy());}
0
public void testConfigureInProperties()
{    String cmdLine = "curl 'http://jmeter.apache.org/' --max-redirs 'b'";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertTrue("Option max-redirs should show warning", request.getOptionsInProperties().contains("--max-redirs is in 'httpsampler.max_redirects(1062 line)'"));}
0
public void testNoSupport()
{    String cmdLine = "curl 'http://jmeter.apache.org/' -x 'https://aa:bb@example.com:8042' --proxy-ntlm";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    Assert.assertTrue("Option proxy-ntlm should show warning", request.getOptionsNoSupport().contains("proxy-ntlm"));}
0
public void testIsValidCookie()
{    String str = "a=b;c=d";    Assert.assertTrue("The string should be cookies", BasicCurlParser.isValidCookie(str));    str = "test.txt";    Assert.assertFalse("The string should be filename", BasicCurlParser.isValidCookie(str));}
0
public void testCreateCommentText()
{    ParseCurlCommandAction p = new ParseCurlCommandAction();    String cmdLine = "curl 'http://jmeter.apache.org/' --max-redirs 'b'";    BasicCurlParser basicCurlParser = new BasicCurlParser();    BasicCurlParser.Request request = basicCurlParser.parse(cmdLine);    String comment = p.createCommentText(request);    assertEquals("Http request should can be set the right comment", "--max-redirs is in 'httpsampler.max_redirects(1062 line)' configure in jmeter.properties ", comment);    cmdLine = "curl 'http://jmeter.apache.org/' --include --keepalive-time '20'";    request = basicCurlParser.parse(cmdLine);    comment = p.createCommentText(request);    assertEquals("Http request should can be set the right comment", "--include --keepalive-time ignoring;", comment.trim());    cmdLine = "curl 'http://jmeter.apache.org/' -x 'https://aa:bb@example.com:8042' --proxy-ntlm";    basicCurlParser = new BasicCurlParser();    request = basicCurlParser.parse(cmdLine);    comment = p.createCommentText(request);    assertEquals("Http request should can be set the right comment", "--proxy-ntlm not supported; ", comment);    cmdLine = "curl 'http://jmeter.apache.org/' --include --keepalive-time '20'";    basicCurlParser = new BasicCurlParser();    request = basicCurlParser.parse(cmdLine);    comment = p.createCommentText(request);    assertEquals("Http request should can be set the right comment", "--include --keepalive-time ignoring;", comment.trim());    cmdLine = "curl 'http://jmeter.apache.org/'";    basicCurlParser = new BasicCurlParser();    request = basicCurlParser.parse(cmdLine);    comment = p.createCommentText(request);    assertTrue("Http request should can't be set the right comment", comment.isEmpty());    cmdLine = "curl 'http://jmeter.apache.org/' --limit-rate '54M'";    basicCurlParser = new BasicCurlParser();    request = basicCurlParser.parse(cmdLine);    comment = p.createCommentText(request);    assertTrue(comment.trim().contains("Please configure the limit rate in 'httpclient.socket.http.cps'"));    cmdLine = "curl 'http://jmeter.apache.org/' --noproxy ' localhost'";    basicCurlParser = new BasicCurlParser();    request = basicCurlParser.parse(cmdLine);    comment = p.createCommentText(request);    assertTrue(comment.trim().contains("Please configure noproxy list in terminal and restart JMeter."));    cmdLine = "curl 'http://jmeter.apache.org/' --cacert '<CA certificate>'";    basicCurlParser = new BasicCurlParser();    request = basicCurlParser.parse(cmdLine);    comment = p.createCommentText(request);    assertTrue(comment.trim().contains("Please configure the SSL file with CA certificates"));}
0
public void testReadCurlCommandsFromTextPanel()
{    ParseCurlCommandAction p = new ParseCurlCommandAction();    String cmdLine = "curl 'http://jmeter.apache.org/' --max-redirs 'b' " + "curl 'http://jmeter.apache.org/' --include --keepalive-time '20'";    List<String> commands = p.readFromTextPanel(cmdLine);    assertTrue("Curl commands should be saved in list", commands.contains("curl 'http://jmeter.apache.org/' --max-redirs 'b'"));    assertTrue("Curl commands should be saved in list", commands.contains("curl 'http://jmeter.apache.org/' --include --keepalive-time '20'"));    assertTrue("The size of list should be 2", commands.size() == 2);}
0
public void testReadCurlCommandsFromFile() throws IOException
{    String encoding = StandardCharsets.UTF_8.name();    File file = tempFolder.newFile("test.txt");    String cmdLine = "curl 'http://jmeter.apache.org/' --max-redirs 'b'" + System.lineSeparator() + "curl 'http://jmeter.apache.org/' --include --keepalive-time '20'";    FileUtils.writeStringToFile(file, cmdLine, encoding, true);    ParseCurlCommandAction p = new ParseCurlCommandAction();    List<String> commands = p.readFromFile(file.getAbsolutePath());    assertTrue("Curl commands should be saved in list", commands.contains("curl 'http://jmeter.apache.org/' --max-redirs 'b'"));    assertTrue("Curl commands should be saved in list", commands.contains("curl 'http://jmeter.apache.org/' --include --keepalive-time '20'"));    assertTrue("The size of list should be 2", commands.size() == 2);}
0
public void testParseCommands()
{        ParseCurlCommandAction p = new ParseCurlCommandAction();    String cmdLine = "curl 'http://jmeter.apache.org/' --max-redirs 'b' " + "curl 'http://jmeter.apache.org/' --include --keepalive-time '20'";    List<String> commands = p.readFromTextPanel(cmdLine);    List<Request> requests = p.parseCommands(false, commands);    BasicCurlParser basicCurlParser = new BasicCurlParser();    Request request1 = basicCurlParser.parse("curl 'http://jmeter.apache.org/' --max-redirs 'b'");    assertEquals("The command line should be parsed in turn", request1.toString(), requests.get(0).toString());    assertTrue("The size of list should be 2", requests.size() == 2);        cmdLine = "curl 'http://jmeter.apache.org/' --max-redirs 'b'" + System.lineSeparator() + "curl 'http://jmeter.apache.org/' --include --keepalive-time '20'";    commands = p.readFromTextPanel(cmdLine);    requests = p.parseCommands(true, commands);    request1 = basicCurlParser.parse("curl 'http://jmeter.apache.org/' --max-redirs 'b'");    assertTrue("The command line should be parsed in turn", request1.toString().equals(requests.get(0).toString()));    assertTrue("The size of list should be 2", requests.size() == 2);}
0
public void testParseCommandsException()
{    ParseCurlCommandAction p = new ParseCurlCommandAction();    String cmdLine = "curl 'http://jmeter.apache.org/' --max-redir 'b' " + "curl 'http://jmeter.apache.org/' --include --keepalive-time '20'";    List<String> commands = p.readFromTextPanel(cmdLine);    p.parseCommands(false, commands);}
0
public void testParseCommandsException2()
{    ParseCurlCommandAction p = new ParseCurlCommandAction();    String cmdLine = "curl 'http://jmeter.apache.org/' --max-redir 'b'" + System.lineSeparator() + "curl 'http://jmeter.apache.org/' --include --keepalive-time '20'";    List<String> commands = p.readFromTextPanel(cmdLine);    p.parseCommands(true, commands);}
0
public void testCreateProxyServer() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException
{    ParseCurlCommandAction p = new ParseCurlCommandAction();    HTTPSamplerProxy httpSampler = (HTTPSamplerProxy) HTTPSamplerFactory.newInstance(HTTPSamplerFactory.DEFAULT_CLASSNAME);    httpSampler.setProperty(TestElement.GUI_CLASS, HttpTestSampleGui.class.getName());    httpSampler.setProperty(TestElement.NAME, "HTTP Request");    BasicCurlParser basicCurlParser = new BasicCurlParser();    Request request = basicCurlParser.parse("curl 'http://jmeter.apache.org/' -x 'https://aa:bb@example.com:8042'");    Class<ParseCurlCommandAction> parseCurlCommandAction = ParseCurlCommandAction.class;    Class[] classes = new Class[] { Request.class, HTTPSamplerProxy.class };    Method method = parseCurlCommandAction.getDeclaredMethod("createProxyServer", classes);    method.setAccessible(true);    Object[] objs = new Object[] { request, httpSampler };    method.invoke(p, objs);    assertEquals("proxy host should be set in httpsampler", "example.com", httpSampler.getProxyHost());    assertEquals("proxy user should be set in httpsampler", "aa", httpSampler.getProxyUser());    assertEquals("proxy pass should be set in httpsampler", "bb", httpSampler.getProxyPass());    assertEquals("proxy scheme should be set in httpsampler", "https", httpSampler.getProxyScheme());    assertEquals("proxy host should be set in httpsampler", "example.com", httpSampler.getProxyHost());    assertTrue("The command line should be parsed in turn", httpSampler.getProxyPortInt() == 8042);}
0
public void testCreateSampler() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, IOException
{        ParseCurlCommandAction p = new ParseCurlCommandAction();    BasicCurlParser basicCurlParser = new BasicCurlParser();    Request request = basicCurlParser.parse("curl 'http://jmeter.apache.org:8443/' -x 'https://aa:bb@example.com:8042'");    Class<ParseCurlCommandAction> parseCurlCommandAction = ParseCurlCommandAction.class;    Class[] classes = new Class[] { Request.class, String.class };    Method method = parseCurlCommandAction.getDeclaredMethod("createSampler", classes);    method.setAccessible(true);    Object[] objs = new Object[] { request, "" };    HTTPSamplerProxy httpSampler = (HTTPSamplerProxy) method.invoke(p, objs);    assertEquals("proxy scheme should be set in httpsampler", "https", httpSampler.getProxyScheme());    assertEquals("proxy host should be set in httpsampler", "example.com", httpSampler.getProxyHost());    assertTrue("The command line should be parsed in turn", httpSampler.getProxyPortInt() == 8042);    assertEquals("path should be set in httpsampler", httpSampler.getPath(), "/");    assertEquals("domain should be set in httpsampler", "jmeter.apache.org", httpSampler.getDomain());    assertEquals("port should be set in httpsampler", 8443, httpSampler.getPort());    assertEquals("method should be set in httpsampler", "GET", httpSampler.getMethod());        request = basicCurlParser.parse("curl 'http://jmeter.apache.org/' --data 'name=test'");    request.setInterfaceName("interface_name");    objs = new Object[] { request, "" };    httpSampler = (HTTPSamplerProxy) method.invoke(p, objs);    assertEquals("method should be set in httpsampler", "POST", httpSampler.getMethod());    assertEquals("data should be set in httpsampler", "name=test", httpSampler.getArguments().getArgument(0).toString());        request = basicCurlParser.parse("curl 'http://jmeter.apache.org/' -F 'test=name;type=text/foo' -F 'test1=name1'");    objs = new Object[] { request, "" };    httpSampler = (HTTPSamplerProxy) method.invoke(p, objs);    assertEquals("method should be set in httpsampler", "POST", httpSampler.getMethod());    assertEquals("form name should be set in httpsampler", "test", httpSampler.getArguments().getArgument(0).getName());    assertEquals("form value should be set in httpsampler", "name", httpSampler.getArguments().getArgument(0).getValue());    assertEquals("form name should be set in httpsampler", "test1", httpSampler.getArguments().getArgument(1).getName());    assertEquals("form value should be set in httpsampler", "name1", httpSampler.getArguments().getArgument(1).getValue());        File file = tempFolder.newFile("test.txt");    String filePath = file.getAbsolutePath();    request = basicCurlParser.parse("curl 'http://jmeter.apache.org/' -F 'c=@" + filePath + ";type=text/foo' -F 'c1=@" + filePath + "'");    objs = new Object[] { request, "" };    httpSampler = (HTTPSamplerProxy) method.invoke(p, objs);    assertEquals("form name should be set in httpsampler", "c", httpSampler.getHTTPFiles()[0].getParamName());    assertEquals("form name should be set in httpsampler", filePath, httpSampler.getHTTPFiles()[0].getPath());    assertEquals("form name should be set in httpsampler", "c1", httpSampler.getHTTPFiles()[1].getParamName());        request = basicCurlParser.parse("curl 'http://jmeter.apache.org/' --form-string 'c=@test.txt;type=text/foo'");    objs = new Object[] { request, "" };    httpSampler = (HTTPSamplerProxy) method.invoke(p, objs);    assertEquals("form name should be set in httpsampler", "c", httpSampler.getArguments().getArgument(0).getName());    assertEquals("form value should be set in httpsampler", "@test.txt;type=text/foo", httpSampler.getArguments().getArgument(0).getValue());}
0
public void testDataFormException() throws NoSuchMethodException, SecurityException
{    ParseCurlCommandAction p = new ParseCurlCommandAction();    HTTPSamplerProxy httpSampler = (HTTPSamplerProxy) HTTPSamplerFactory.newInstance(HTTPSamplerFactory.DEFAULT_CLASSNAME);    httpSampler.setProperty(TestElement.GUI_CLASS, HttpTestSampleGui.class.getName());    httpSampler.setProperty(TestElement.NAME, "HTTP Request");    BasicCurlParser basicCurlParser = new BasicCurlParser();    Request request = basicCurlParser.parse("curl 'http://jmeter.apache.org/' -F 'test=name' --data 'fname=a&lname=b'");    Class<ParseCurlCommandAction> parseCurlCommandAction = ParseCurlCommandAction.class;    Class[] classes = new Class[] { Request.class, HTTPSamplerProxy.class };    Object[] objs = new Object[] { request, httpSampler };    try {        Method method = parseCurlCommandAction.getDeclaredMethod("setFormData", classes);        method.setAccessible(true);        method.invoke(p, objs);        fail();    } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {        Throwable cause = e.getCause();        if (cause instanceof IllegalArgumentException) {            assertTrue(cause.getMessage().contains("--form and --data can't appear in the same command"));        }    }}
0
public void testCreateHttpRequest() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException
{    ParseCurlCommandAction p = new ParseCurlCommandAction();    BasicCurlParser basicCurlParser = new BasicCurlParser();    ThreadGroup threadGroup = new ThreadGroup();    TestPlan testPlan = new TestPlan();    HashTree tree = new HashTree();    HashTree testPlanHT = tree.add(testPlan);    HashTree threadGroupHT = testPlanHT.add(threadGroup);    Request request = basicCurlParser.parse("curl 'http://jmeter.apache.org/'  -E '<CA certificate>'");    Class<ParseCurlCommandAction> parseCurlCommandAction = ParseCurlCommandAction.class;    Class[] classes = new Class[] { Request.class, HashTree.class, String.class };    Method method = parseCurlCommandAction.getDeclaredMethod("createHttpRequest", classes);    method.setAccessible(true);    Object[] objs = new Object[] { request, threadGroupHT, "comment" };    HTTPSamplerProxy httpSampler = (HTTPSamplerProxy) method.invoke(p, objs);    assertEquals("path should be set in httpsampler", httpSampler.getPath(), "/");    assertEquals("domain should be set in httpsampler", "jmeter.apache.org", httpSampler.getDomain());    assertEquals("port should be 80 in httpsampler", 80, httpSampler.getPort());    assertEquals("method should be set in httpsampler", "GET", httpSampler.getMethod());}
0
public void testConfigureTimeout() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException
{    ParseCurlCommandAction p = new ParseCurlCommandAction();    BasicCurlParser basicCurlParser = new BasicCurlParser();    Request request = basicCurlParser.parse("curl 'http://jmeter.apache.org/'  -m '20'  --connect-timeout '1'");    HTTPSamplerProxy httpSampler = (HTTPSamplerProxy) HTTPSamplerFactory.newInstance(HTTPSamplerFactory.DEFAULT_CLASSNAME);    httpSampler.setProperty(TestElement.GUI_CLASS, HttpTestSampleGui.class.getName());    httpSampler.setProperty(TestElement.NAME, "HTTP Request");    Class<ParseCurlCommandAction> parseCurlCommandAction = ParseCurlCommandAction.class;    Class[] classes = new Class[] { Request.class, HTTPSamplerProxy.class };    Method method = parseCurlCommandAction.getDeclaredMethod("configureTimeout", classes);    method.setAccessible(true);    Object[] objs = new Object[] { request, httpSampler };    method.invoke(p, objs);    assertTrue("max connection time should be 1000", httpSampler.getConnectTimeout() == 1000);    assertTrue("max response time should be 19000", httpSampler.getResponseTimeout() == 19000);}
0
public void testCreateHeaderManager() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException
{    ParseCurlCommandAction p = new ParseCurlCommandAction();    BasicCurlParser basicCurlParser = new BasicCurlParser();    Request request = basicCurlParser.parse("curl 'http://jmeter.apache.org/' -H 'Content-Type: application/x-www-form-urlencoded' --compressed");    Class<ParseCurlCommandAction> parseCurlCommandAction = ParseCurlCommandAction.class;    Class[] classes = new Class[] { Request.class };    Method method = parseCurlCommandAction.getDeclaredMethod("createHeaderManager", classes);    method.setAccessible(true);    Object[] objs = new Object[] { request };    HeaderManager headerManager = (HeaderManager) method.invoke(p, objs);    assertEquals("header should be set in HeaderManager", "Content-Type", headerManager.get(0).getName());    assertEquals("header should be set in HeaderManager", "application/x-www-form-urlencoded", headerManager.get(0).getValue());    assertEquals("header should be set in HeaderManager", "Accept-Encoding", headerManager.get(1).getName());    assertEquals("header should be set in HeaderManager", "gzip, deflate", headerManager.get(1).getValue());}
0
public void testCreateAuthManager() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException
{    ParseCurlCommandAction p = new ParseCurlCommandAction();    AuthManager authManager = new AuthManager();    BasicCurlParser basicCurlParser = new BasicCurlParser();    Request request = basicCurlParser.parse("curl 'http://jmeter.apache.org/' -u 'user:passwd'");    Class<ParseCurlCommandAction> parseCurlCommandAction = ParseCurlCommandAction.class;    Class[] classes = new Class[] { Request.class, AuthManager.class };    Method method = parseCurlCommandAction.getDeclaredMethod("createAuthManager", classes);    method.setAccessible(true);    Object[] objs = new Object[] { request, authManager };    HeaderManager headerManager = (HeaderManager) method.invoke(p, objs);    assertEquals("the username of Authorization should be set in AuthManager", "user", authManager.get(0).getUser());    assertEquals("the password of Authorization should be set in AuthManager", "passwd", authManager.get(0).getPass());}
0
public void testCanAddAuthManagerInHttpRequest() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException
{    ParseCurlCommandAction p = new ParseCurlCommandAction();    AuthManager authManager = new AuthManager();    Authorization authorization = new Authorization();    authorization.setPass("passwd");    authorization.setUser("user");    authorization.setURL("http://jmeter.apache.org/");    authorization.setMechanism(Mechanism.BASIC);    authManager.addAuth(authorization);    BasicCurlParser basicCurlParser = new BasicCurlParser();    Request request = basicCurlParser.parse("curl 'http://jmeter.apache.org/' -u 'user:passwd'");    Class<ParseCurlCommandAction> parseCurlCommandAction = ParseCurlCommandAction.class;    Class[] classes = new Class[] { Request.class, AuthManager.class };    Method method = parseCurlCommandAction.getDeclaredMethod("canAddAuthManagerInHttpRequest", classes);    method.setAccessible(true);    Object[] objs = new Object[] { request, authManager };    assertFalse("When AuthManager contains this authorization, shouldn't add a AuthManager in Http Request", (boolean) method.invoke(p, objs));    request = basicCurlParser.parse("curl 'http://jmeter.apache.org/' -u 'user1:passwd1'");    objs = new Object[] { request, authManager };    assertTrue("When AuthManager contains this url, but the username or password isn't the same," + "should add a AuthManager in Http Request", (boolean) method.invoke(p, objs));}
0
public void testCanUpdateAuthManagerInThreadGroupt() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException
{    ParseCurlCommandAction p = new ParseCurlCommandAction();    AuthManager authManager = new AuthManager();    Authorization authorization = new Authorization();    authorization.setPass("passwd");    authorization.setUser("user");    authorization.setURL("http://jmeter.apache.org/");    authorization.setMechanism(Mechanism.BASIC);    authManager.addAuth(authorization);    BasicCurlParser basicCurlParser = new BasicCurlParser();    Request request = basicCurlParser.parse("curl 'http://jmeter.apache.org/' -u 'user:passwd'");    Class<ParseCurlCommandAction> parseCurlCommandAction = ParseCurlCommandAction.class;    Class[] classes = new Class[] { Request.class, AuthManager.class };    Method method = parseCurlCommandAction.getDeclaredMethod("canUpdateAuthManagerInThreadGroup", classes);    method.setAccessible(true);    Object[] objs = new Object[] { request, authManager };    assertFalse("When AuthManager contains this url, shouldn't add a AuthManager in ThreadGroup", (boolean) method.invoke(p, objs));    request = basicCurlParser.parse("curl 'http://jmeter.apache.fr/' -u 'user:passwd'");    objs = new Object[] { request, authManager };    assertTrue("The AuthManager doesn't contain this url , should add a AuthManager in ThreadGroup", (boolean) method.invoke(p, objs));}
0
public void testCreateCookieManager() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, IOException
{    ParseCurlCommandAction p = new ParseCurlCommandAction();    CookieManager cookieManager = new CookieManager();    BasicCurlParser basicCurlParser = new BasicCurlParser();    Request request = basicCurlParser.parse("curl 'http://jmeter.apache.org/' -b 'name=Tom'");    Class<ParseCurlCommandAction> parseCurlCommandAction = ParseCurlCommandAction.class;    Class[] classes = new Class[] { CookieManager.class, Request.class };    Method method = parseCurlCommandAction.getDeclaredMethod("createCookieManager", classes);    method.setAccessible(true);    Object[] objs = new Object[] { cookieManager, request };    method.invoke(p, objs);    assertEquals("the domain of cookie should be set in cookieManager", "jmeter.apache.org", cookieManager.get(0).getDomain());    assertEquals("the path of cookie should be set in cookieManager", "/", cookieManager.get(0).getPath());    assertEquals("the name of cookie should be set in cookieManager", "name", cookieManager.get(0).getName());    assertEquals("the password of cookie should be set in cookieManager", "Tom", cookieManager.get(0).getValue());    cookieManager = new CookieManager();    File file = tempFolder.newFile("test.txt");    String filepath = file.getAbsolutePath();    request = basicCurlParser.parse("curl 'http://jmeter.apache.org/' -b '" + filepath + "'");    method = parseCurlCommandAction.getDeclaredMethod("createCookieManager", classes);    method.setAccessible(true);    objs = new Object[] { cookieManager, request };    method.invoke(p, objs);    request = basicCurlParser.parse("curl 'http://jmeter.apache.org/' -b 'test1.txt'");    method = parseCurlCommandAction.getDeclaredMethod("createCookieManager", classes);    method.setAccessible(true);    objs = new Object[] { cookieManager, request };    try {        method.invoke(p, objs);    } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {        Throwable cause = e.getCause();        if (cause instanceof IllegalArgumentException) {            assertTrue(cause.getMessage().contains("File test1.txt doesn't exist"));        }    }}
0
public void testCreateCookieManagerHeader() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, NoSuchFieldException, SecurityException
{    ParseCurlCommandAction p = new ParseCurlCommandAction();    CookieManager cookieManager = new CookieManager();    BasicCurlParser basicCurlParser = new BasicCurlParser();    Request request = basicCurlParser.parse("curl 'http://jmeter.apache.org/' -H 'cookie: PHPSESSID=testphpsessid;a=b' --compressed");    Class<ParseCurlCommandAction> parseCurlCommandAction = ParseCurlCommandAction.class;    Class[] classes = new Class[] { CookieManager.class, Request.class };    Field f = ParseCurlCommandAction.class.getDeclaredField("uploadCookiesCheckBox");    f.setAccessible(true);    JCheckBox uploadCookiesCheckBox = new JCheckBox(JMeterUtils.getResString("curl_add_cookie_header_to_cookiemanager"), true);    f.set(p, uploadCookiesCheckBox);    Method method = parseCurlCommandAction.getDeclaredMethod("createCookieManager", classes);    method.setAccessible(true);    Object[] objs = new Object[] { cookieManager, request };    method.invoke(p, objs);    assertEquals("the domain of cookie should be set in cookieManager", "jmeter.apache.org", cookieManager.get(0).getDomain());    assertEquals("the path of cookie should be set in cookieManager", "/", cookieManager.get(0).getPath());    assertEquals("the name of cookie should be set in cookieManager", "a", cookieManager.get(0).getName());    assertEquals("the password of cookie should be set in cookieManager", "b", cookieManager.get(0).getValue());    uploadCookiesCheckBox = new JCheckBox(JMeterUtils.getResString("curl_add_cookie_header_to_cookiemanager"), false);    f.set(p, uploadCookiesCheckBox);    method = parseCurlCommandAction.getDeclaredMethod("createCookieManager", classes);    method.setAccessible(true);    cookieManager = new CookieManager();    objs = new Object[] { cookieManager, request };    method.invoke(p, objs);    assertTrue("When doesn't choose to upload cookies from header," + "the cookie shouldn't be set in cookieManager", cookieManager.getCookies().size() == 0);}
0
public void testDnsServer() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, IOException
{    ParseCurlCommandAction p = new ParseCurlCommandAction();    DNSCacheManager dnsCacheManager = new DNSCacheManager();    BasicCurlParser basicCurlParser = new BasicCurlParser();    Request request = basicCurlParser.parse("curl 'http://jmeter.apache.org/' --dns-servers '0.0.0.0'");    Class<ParseCurlCommandAction> parseCurlCommandAction = ParseCurlCommandAction.class;    Class[] classes = new Class[] { Request.class, DNSCacheManager.class };    Method method = parseCurlCommandAction.getDeclaredMethod("createDnsServer", classes);    method.setAccessible(true);    Object[] objs = new Object[] { request, dnsCacheManager };    method.invoke(p, objs);    assertEquals("the dns server should be set in DNSCacheManager", "0.0.0.0", dnsCacheManager.getServers().get(0).getStringValue());}
0
public void testCanAddDnsServerInHttpRequest() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, IOException
{    ParseCurlCommandAction p = new ParseCurlCommandAction();    DNSCacheManager dnsCacheManager = new DNSCacheManager();    dnsCacheManager.addServer("0.0.0.0");    BasicCurlParser basicCurlParser = new BasicCurlParser();    Request request = basicCurlParser.parse("curl 'http://jmeter.apache.org/' --dns-servers '0.0.0.0'");    Class<ParseCurlCommandAction> parseCurlCommandAction = ParseCurlCommandAction.class;    Class[] classes = new Class[] { Request.class, DNSCacheManager.class };    Method method = parseCurlCommandAction.getDeclaredMethod("canAddDnsServerInHttpRequest", classes);    method.setAccessible(true);    Object[] objs = new Object[] { request, dnsCacheManager };    assertFalse("When the Dns servers are  the same, shouldn't add the DnsCacheManager in Http Request", (boolean) method.invoke(p, objs));    request = basicCurlParser.parse("curl 'http://jmeter.apache.org/' --dns-servers '1.1.1.1'");    objs = new Object[] { request, dnsCacheManager };    assertTrue("When the Dns servers aren't the same, should add the DnsCacheManager in Http Request", (boolean) method.invoke(p, objs));}
0
public void testCreateDnsResolver() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, IOException
{    ParseCurlCommandAction p = new ParseCurlCommandAction();    DNSCacheManager dnsCacheManager = new DNSCacheManager();    BasicCurlParser basicCurlParser = new BasicCurlParser();    Request request = basicCurlParser.parse("curl 'http://jmeter.apache.org/'  --resolve 'moonagic.com:443:127.0.0.2'");    Class<ParseCurlCommandAction> parseCurlCommandAction = ParseCurlCommandAction.class;    Class[] classes = new Class[] { Request.class, DNSCacheManager.class };    Method method = parseCurlCommandAction.getDeclaredMethod("createDnsResolver", classes);    method.setAccessible(true);    Object[] objs = new Object[] { request, dnsCacheManager };    method.invoke(p, objs);    assertEquals("the dns resolver should be set in DNSCacheManager", "StaticHost(moonagic.com, 127.0.0.2)", dnsCacheManager.getHosts().get(0).getStringValue());    request = basicCurlParser.parse("curl 'http://jmeter.apache.org/'  --resolve 'moonagic.com:9090:127.0.0.2'");    method.setAccessible(true);    objs = new Object[] { request, dnsCacheManager };    method.invoke(p, objs);    assertEquals("the dns resolver should be set in DNSCacheManager", "StaticHost(moonagic.com, 127.0.0.2)", dnsCacheManager.getHosts().get(0).getStringValue());    assertTrue("the dns resolver should be set in DNSCacheManager", dnsCacheManager.getComment().contains("Custom DNS resolver doesn't support port"));}
0
public void testCanAddDnsResolverInHttpRequest() throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, IOException
{    ParseCurlCommandAction p = new ParseCurlCommandAction();    BasicCurlParser basicCurlParser = new BasicCurlParser();    DNSCacheManager dnsCacheManager = new DNSCacheManager();    dnsCacheManager.addHost("moonagic.com", "127.0.0.2");    Request request = basicCurlParser.parse("curl 'http://jmeter.apache.org/'  --resolve 'moonagic.com:443:127.0.0.2'");    Class<ParseCurlCommandAction> parseCurlCommandAction = ParseCurlCommandAction.class;    Class[] classes = new Class[] { Request.class, DNSCacheManager.class };    Method method = parseCurlCommandAction.getDeclaredMethod("canAddDnsResolverInHttpRequest", classes);    method.setAccessible(true);    dnsCacheManager = new DNSCacheManager();    dnsCacheManager.addHost("moonagic.com", "127.0.0.2");    Object[] objs = new Object[] { request, dnsCacheManager };    method.invoke(p, objs);    assertFalse("When the Dns servers are the same, shouldn't add the DnsCacheManager in Http Request", (boolean) method.invoke(p, objs));    request = basicCurlParser.parse("curl 'http://jmeter.apache.org/'  --resolve 'moonagic.com:9090:127.0.0.1'");    method.setAccessible(true);    objs = new Object[] { request, dnsCacheManager };    method.invoke(p, objs);    assertTrue("When the Dns servers aren't the same, should add the DnsCacheManager in Http Request", (boolean) method.invoke(p, objs));    dnsCacheManager = new DNSCacheManager();    dnsCacheManager.addHost("moonagic.com", "127.0.0.1");    dnsCacheManager.addHost("moonagic.com", "127.0.0.2");    objs = new Object[] { request, dnsCacheManager };    method.invoke(p, objs);    assertTrue("When the Dns servers aren't the same, should add the DnsCacheManager in Http Request", (boolean) method.invoke(p, objs));    request = basicCurlParser.parse("curl 'http://jmeter.apache.org/'  --resolve 'moonagic.com:9090:127.0.0.1'");    method.setAccessible(true);    objs = new Object[] { request, dnsCacheManager };    method.invoke(p, objs);    assertTrue("When the Dns servers aren't the same, should add the DnsCacheManager in Http Request", (boolean) method.invoke(p, objs));}
0
public void testConstructors()
{    MultipartUrlConfig muc = new MultipartUrlConfig();    assertEquals(0, muc.getArguments().getArgumentCount());    assertEquals(0, muc.getHTTPFileArgs().getHTTPFileArgCount());    muc = new MultipartUrlConfig("boundary");    assertEquals(0, muc.getArguments().getArgumentCount());    assertEquals(0, muc.getHTTPFileArgs().getHTTPFileArgCount());    assertEquals("boundary", muc.getBoundary());}
0
public void testParseArgumentsLF()
{    String queryString = "Content-Disposition: form-data; name=\"aa\"\n" + "Content-Type: text/plain; charset=ISO-8859-1\n" + "Content-Transfer-Encoding: 8bit\n" + "\n" + "bb\n" + "--7d159c1302d0y0\n" + "Content-Disposition: form-data; name=\"xx\"\n" + "Content-Type: text/plain; charset=ISO-8859-1\n" + "Content-Transfer-Encoding: 8bit\n" + "\n" + "yy\n" + "--7d159c1302d0y0\n" + "Content-Disposition: form-data; name=\"abc\"\n" + "Content-Type: text/plain; charset=ISO-8859-1\n" + "Content-Transfer-Encoding: 8bit\n" + "\n" + "xyz  \n" + "xyz  \n" + "--7d159c1302d0y0\n" + "Content-Disposition: form-data; name=\"param1\"; filename=\"file1\"\n" + "Content-Type: text/plain\n" + "Content-Transfer-Encoding: binary\n" + "\n" + "file content\n" + "\n";    MultipartUrlConfig muc = new MultipartUrlConfig("7d159c1302d0y0");    muc.parseArguments(queryString);    HTTPFileArgs files = muc.getHTTPFileArgs();    assertEquals(1, files.getHTTPFileArgCount());    HTTPFileArg file = (HTTPFileArg) files.iterator().next().getObjectValue();    assertEquals("file1", file.getPath());    assertEquals("param1", file.getParamName());    assertEquals("text/plain", file.getMimeType());    Arguments args = muc.getArguments();    assertEquals(3, args.getArgumentCount());    Argument arg = args.getArgument(0);    assertEquals("aa", arg.getName());    assertEquals("bb", arg.getValue());    arg = args.getArgument(1);    assertEquals("xx", arg.getName());    assertEquals("yy", arg.getValue());    arg = args.getArgument(2);    assertEquals("abc", arg.getName());    assertEquals("xyz  \nxyz  ", arg.getValue());}
0
public void testParseArgumentsCRLF()
{    String queryString = "Content-Disposition: form-data; name=\"aa\"\r\n" + "Content-Type: text/plain; charset=ISO-8859-1\r\n" + "Content-Transfer-Encoding: 8bit\r\n" + "\r\n" + "bb\r\n" + "--7d159c1302d0y0\r\n" + "Content-Disposition: form-data; name=\"xx\"\r\n" + "Content-Type: text/plain; charset=ISO-8859-1\r\n" + "Content-Transfer-Encoding: 8bit\r\n" + "\r\n" + "yy\r\n" + "--7d159c1302d0y0\r\n" + "Content-Disposition: form-data; name=\"abc\"\r\n" + "Content-Type: text/plain; charset=ISO-8859-1\r\n" + "Content-Transfer-Encoding: 8bit\r\n" + "\r\n" + "xyz  \r\n" + "xyz  \r\n" + "--7d159c1302d0y0\r\n" + "Content-Disposition: form-data; name=\"param1\"; filename=\"file1\"\r\n" + "Content-Type: text/plain\r\n" + "Content-Transfer-Encoding: binary\r\n" + "\r\n" + "file content\r\n" + "\r\n";    MultipartUrlConfig muc = new MultipartUrlConfig("7d159c1302d0y0");    muc.parseArguments(queryString);    HTTPFileArgs files = muc.getHTTPFileArgs();    assertEquals(1, files.getHTTPFileArgCount());    HTTPFileArg file = (HTTPFileArg) files.iterator().next().getObjectValue();    assertEquals("file1", file.getPath());    assertEquals("param1", file.getParamName());    assertEquals("text/plain", file.getMimeType());    Arguments args = muc.getArguments();    assertEquals(3, args.getArgumentCount());    Argument arg = args.getArgument(0);    assertEquals("aa", arg.getName());    assertEquals("bb", arg.getValue());    arg = args.getArgument(1);    assertEquals("xx", arg.getName());    assertEquals("yy", arg.getValue());    arg = args.getArgument(2);    assertEquals("abc", arg.getName());    assertEquals("xyz  \r\nxyz  ", arg.getValue());}
0
public void setUp()
{    Arguments args = new Arguments();    args.addArgument("username", "mstover");    args.addArgument("password", "pass");    args.addArgument("action", "login");    config = new HTTPNullSampler();    config.setName("Full Config");    config.setProperty(HTTPSamplerBase.DOMAIN, "www.lazer.com");    config.setProperty(HTTPSamplerBase.PATH, "login.jsp");    config.setProperty(HTTPSamplerBase.METHOD, HTTPConstants.POST);    config.setProperty(new TestElementProperty(HTTPSamplerBase.ARGUMENTS, args));    defaultConfig = new HTTPNullSampler();    defaultConfig.setName("default");    defaultConfig.setProperty(HTTPSamplerBase.DOMAIN, "www.xerox.com");    defaultConfig.setProperty(HTTPSamplerBase.PATH, "default.html");    partialConfig = new HTTPNullSampler();    partialConfig.setProperty(HTTPSamplerBase.PATH, "main.jsp");    partialConfig.setProperty(HTTPSamplerBase.METHOD, HTTPConstants.GET);}
0
public void testSimpleConfig()
{    assertEquals("Full Config", config.getName());    assertEquals("www.lazer.com", config.getDomain());}
0
public void testOverRide()
{    JMeterProperty jmp = partialConfig.getProperty(HTTPSamplerBase.DOMAIN);    assertTrue(jmp instanceof NullProperty);    assertEquals(jmp, new NullProperty(HTTPSamplerBase.DOMAIN));    partialConfig.addTestElement(defaultConfig);    assertEquals(partialConfig.getPropertyAsString(HTTPSamplerBase.DOMAIN), "www.xerox.com");    assertEquals(partialConfig.getPropertyAsString(HTTPSamplerBase.PATH), "main.jsp");}
0
 void badDnsInCustomResolverShouldFailHttpSampler(String httpImplementation, WireMockServer server)
{    Assumptions.assumeTrue(!HTTPSamplerFactory.IMPL_JAVA.equals(httpImplementation), "Java implementation does not support custom DNS resolver yet");    DNSCacheManager dns = new DNSCacheManager();    dns.setCustomResolver(true);    dns.addServer("20.0.118.11");        dns.setTimeoutMs(2000);    HTTPSamplerBase http = HTTPSamplerFactory.newInstance(httpImplementation);    http.setDNSResolver(dns);    http.setMethod(HTTPSampler.GET);    http.setPort(server.port());    http.setDomain("localhost");    http.setPath("/index.html");    http.setRunningVersion(true);    SampleResult result = http.sample();    Assertions.assertEquals("Non HTTP response message: Failed to resolve host name: localhost", result.getResponseMessage(), () -> "HTTP is using a custom DNS resolver, so it must fail resolving localhost \n" + ResultAsString.toString(result));}
0
public void setUp()
{    gui = new HttpTestSampleGui();}
0
public void testCloneSampler() throws Exception
{    HTTPSamplerBase sampler = (HTTPSamplerBase) gui.createTestElement();    sampler.addArgument("param", "value");    HTTPSamplerBase clonedSampler = (HTTPSamplerBase) sampler.clone();    clonedSampler.setRunningVersion(true);    sampler.getArguments().getArgument(0).setValue("new value");    assertEquals("Sampler didn't clone correctly", "new value", sampler.getArguments().getArgument(0).getValue());}
0
public void testHttp() throws Exception
{    assertTrue(AuthManager.isSupportedProtocol(new URL("http:")));}
0
public void testHttps() throws Exception
{    assertTrue(AuthManager.isSupportedProtocol(new URL("https:")));}
0
public void testFile() throws Exception
{    AuthManager am = new AuthManager();    CollectionProperty ao = am.getAuthObjects();    assertEquals(0, ao.size());    am.addFile(findTestPath("testfiles/TestAuth.txt"));    assertEquals(9, ao.size());    Authorization at;    at = am.getAuthForURL(new URL("http://a.b.c/"));    assertEquals("login", at.getUser());    assertEquals("password", at.getPass());        at = am.getAuthForURL(new URL("http://a.b.c:80/"));    assertEquals("login", at.getUser());    assertEquals("password", at.getPass());        at = am.getAuthForURL(new URL("http://a.b.c:443/"));    assertNull(at);    at = am.getAuthForURL(new URL("http://a.b.c/1"));    assertEquals("login1", at.getUser());    assertEquals("password1", at.getPass());    assertEquals("", at.getDomain());    assertEquals("", at.getRealm());    at = am.getAuthForURL(new URL("http://d.e.f/"));    assertEquals("user", at.getUser());    assertEquals("pass", at.getPass());    assertEquals("domain", at.getDomain());    assertEquals("realm", at.getRealm());    at = am.getAuthForURL(new URL("https://j.k.l/"));    assertEquals("jkl", at.getUser());    assertEquals("pass", at.getPass());    at = am.getAuthForURL(new URL("https://j.k.l:443/"));    assertEquals("jkl", at.getUser());    assertEquals("pass", at.getPass());    at = am.getAuthForURL(new URL("https://l.m.n/"));    assertEquals("lmn443", at.getUser());    assertEquals("pass", at.getPass());    at = am.getAuthForURL(new URL("https://l.m.n:443/"));    assertEquals("lmn443", at.getUser());    assertEquals("pass", at.getPass());    at = am.getAuthForURL(new URL("https://l.m.n:8443/"));    assertEquals("lmn8443", at.getUser());    assertEquals("pass", at.getPass());}
0
public void testAddFileWithoutDomainAndRealmWithMechanism() throws IOException
{    File authFile = File.createTempFile("auth", ".txt");    Files.write(authFile.toPath(), "http://example.com\tuser\tpassword\t\t\tBASIC_DIGEST".getBytes());    AuthManager manager = new AuthManager();    manager.addFile(authFile.getAbsolutePath());    Authorization authForURL = manager.getAuthForURL(new URL("http://example.com"));    assertEquals("password", authForURL.getPass());}
0
public void testAddFileWithDomainAndRealmAndDefaultMechanism() throws IOException
{    File authFile = File.createTempFile("auth", ".txt");    Files.write(authFile.toPath(), "http://example.com\tuser\tpassword\tdomain\tEXAMPLE.COM\tBASIC_DIGEST".getBytes());    AuthManager manager = new AuthManager();    manager.addFile(authFile.getAbsolutePath());    Authorization authForURL = manager.getAuthForURL(new URL("http://example.com"));    assertEquals("password", authForURL.getPass());    assertEquals("domain", authForURL.getDomain());}
0
public void testAddFileWithDomainAndRealmAndMechanism() throws IOException
{    File authFile = File.createTempFile("auth", ".txt");    Files.write(authFile.toPath(), "http://example.com\tuser\tpassword\tdomain\tEXAMPLE.COM\tKERBEROS".getBytes());    AuthManager manager = new AuthManager();    manager.addFile(authFile.getAbsolutePath());    Authorization authForURL = manager.getAuthForURL(new URL("http://example.com"));    assertEquals("password", authForURL.getPass());    assertEquals("domain", authForURL.getDomain());    assertEquals(AuthManager.Mechanism.KERBEROS, authForURL.getMechanism());}
0
public KerberosManager initKerberosManager() throws IllegalAccessException, NoSuchFieldException
{    KerberosManager kerberosManager = new KerberosManager();    Future<Subject> future = Executors.newSingleThreadExecutor().submit(new Callable<Subject>() {        @Override        public Subject call() throws Exception {            return new Subject();        }    });    subjects.put("test", future);    Field privateField = kerberosManager.getClass().getDeclaredField("subjects");    privateField.setAccessible(true);    privateField.set(kerberosManager, subjects);    return kerberosManager;}
0
public Subject call() throws Exception
{    return new Subject();}
0
public void setUp()
{    jmctx = JMeterContextService.getContext();    jmvars = new JMeterVariables();}
0
public void testJmeterVariableAuthorizationWhenThreadIterationIsADifferentUser() throws IllegalAccessException, NoSuchFieldException
{        KerberosManager kerberosManager = initKerberosManager();    AuthManager authManager = new AuthManager();    Field authPrivateField = authManager.getClass().getDeclaredField("kerberosManager");    authPrivateField.setAccessible(true);    authPrivateField.set(authManager, kerberosManager);    assertNotNull("Before the iteration, the AuthManager shouldn't be cleared", subjects.get("test"));    authManager.setControlledByThread(false);    authManager.setClearEachIteration(true);    authManager.testIterationStart(null);    assertNull("After the iteration, the AuthManager should be cleared", subjects.get("test"));        kerberosManager = initKerberosManager();    jmvars.putObject(SAME_USER, false);    jmctx.setVariables(jmvars);    authManager.setThreadContext(jmctx);    authPrivateField.set(authManager, kerberosManager);    assertNotNull("Before the iteration, the AuthManager shouldn't be cleared", subjects.get("test"));    authManager.setControlledByThread(true);    authManager.setClearEachIteration(false);    authManager.testIterationStart(null);    assertNull("After the iteration, the AuthManager should be cleared", subjects.get("test"));}
0
public void testJmeterVariableAuthorizationWhenThreadIterationIsASameUser() throws IllegalAccessException, NoSuchFieldException
{        KerberosManager kerberosManager = initKerberosManager();    AuthManager authManager = new AuthManager();    Field authPrivateField = authManager.getClass().getDeclaredField("kerberosManager");    authPrivateField.setAccessible(true);    authPrivateField.set(authManager, kerberosManager);    assertNotNull("Before the iteration, the AuthManager shouldn't be cleared", subjects.get("test"));    authManager.setControlledByThread(false);    authManager.setClearEachIteration(false);    authManager.testIterationStart(null);    assertNotNull("After the iteration, the AuthManager shouldn't be cleared", subjects.get("test"));        kerberosManager = initKerberosManager();    jmvars.putObject(SAME_USER, true);    jmctx.setVariables(jmvars);    authManager.setThreadContext(jmctx);    authPrivateField.set(authManager, kerberosManager);    assertNotNull("Before the iteration, the AuthManager shouldn't be cleared", subjects.get("test"));    authManager.setControlledByThread(true);    authManager.setClearEachIteration(false);    authManager.testIterationStart(null);    assertNotNull("After the iteration, the AuthManager shouldn't be cleared", subjects.get("test"));}
0
public void testToBasicHeader()
{    Authorization basicAuthorization = new Authorization("http://example.com", "foo", "bar", null, "Test Realm", Mechanism.BASIC_DIGEST);    assertThat(basicAuthorization.toBasicHeader(), CoreMatchers.is("Basic Zm9vOmJhcg=="));}
0
protected String makeDate(Date d)
{    SimpleDateFormat simpleDateFormat = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss z", Locale.US);    simpleDateFormat.setTimeZone(GMT);    return simpleDateFormat.format(d);}
0
public void setUp() throws Exception
{    this.cacheManager = new CacheManager();    this.currentTimeInGMT = makeDate(new Date());    this.url = new URL(LOCAL_HOST);    this.sampleResultOK = getSampleResultWithSpecifiedResponseCode("200");}
0
public void tearDown() throws Exception
{    this.url = null;    this.cacheManager = null;    this.currentTimeInGMT = null;    this.sampleResultOK = null;}
0
protected void sleepTill(long deadline)
{    while (System.currentTimeMillis() < deadline) {        try {            Thread.sleep(100);        } catch (InterruptedException e) {                        Thread.currentThread().interrupt();            return;        }    }}
0
public void testExpiresBug59962() throws Exception
{    this.cacheManager.setUseExpires(true);    this.cacheManager.testIterationStart(null);    assertNull(getThreadCacheEntry(LOCAL_HOST), "Should not find entry");    assertFalse(this.cacheManager.inCache(url), "Should not find valid entry");    long start = System.currentTimeMillis();    setExpires(makeDate(new Date(start + 2000)));    cacheResultWithGivenCode("304");    assertNotNull(getThreadCacheEntry(LOCAL_HOST), "Should find entry");    assertTrue(this.cacheManager.inCache(url), "Should find valid entry");    sleepTill(start + 2010);    assertNotNull(getThreadCacheEntry(LOCAL_HOST), "Should find entry");    assertFalse(this.cacheManager.inCache(url), "Should not find valid entry");}
0
public void testExpires() throws Exception
{    this.cacheManager.setUseExpires(true);    this.cacheManager.testIterationStart(null);    assertNull(getThreadCacheEntry(LOCAL_HOST), "Should not find entry");    assertFalse(this.cacheManager.inCache(url), "Should not find valid entry");    long start = System.currentTimeMillis();    setExpires(makeDate(new Date(start + 2000)));    cacheResult(sampleResultOK);    assertNotNull(getThreadCacheEntry(LOCAL_HOST), "Should find entry");    assertTrue(this.cacheManager.inCache(url), "Should find valid entry");    sleepTill(start + 2010);    assertNotNull(getThreadCacheEntry(LOCAL_HOST), "Should find entry");    assertFalse(this.cacheManager.inCache(url), "Should not find valid entry");}
0
public void testNoExpires() throws Exception
{    this.cacheManager.setUseExpires(false);    this.cacheManager.testIterationStart(null);    assertNull(getThreadCacheEntry(LOCAL_HOST), "Should not find entry");    assertFalse(this.cacheManager.inCache(url), "Should not find valid entry");    setExpires(makeDate(new Date(System.currentTimeMillis() + 2000)));    cacheResult(sampleResultOK);    assertNotNull(getThreadCacheEntry(LOCAL_HOST), "Should find entry");    assertFalse(this.cacheManager.inCache(url), "Should not find valid entry");}
0
public void testCacheControl() throws Exception
{    this.cacheManager.setUseExpires(true);    this.cacheManager.testIterationStart(null);    assertNull(getThreadCacheEntry(LOCAL_HOST), "Should not find entry");    assertFalse(this.cacheManager.inCache(url), "Should not find valid entry");    long start = System.currentTimeMillis();    setExpires(makeDate(new Date(start)));    setCacheControl("public, max-age=1");    cacheResult(sampleResultOK);    assertNotNull(getThreadCacheEntry(LOCAL_HOST), "Should find entry");    assertTrue(this.cacheManager.inCache(url), "Should find valid entry");    sleepTill(start + 1010);    assertNotNull(getThreadCacheEntry(LOCAL_HOST), "Should find entry");    assertFalse(this.cacheManager.inCache(url), "Should not find valid entry");}
0
public void testCacheVarySomething() throws Exception
{    String varyHeader = "Something";    testCacheVary(varyHeader, new Header[] { new Header(varyHeader, "value") }, new Header[] { new Header(varyHeader, "something completely different") });}
0
public void testCacheVaryAcceptEncoding() throws Exception
{    String varyHeader = "Accept-Encoding";    testCacheVary(varyHeader, new Header[] { new Header(varyHeader, "value") }, new Header[] { new Header(varyHeader, "something completely different") });}
0
public void testCacheMultiValueVaryHeaders() throws Exception
{    String varyHeader = "Accept-Encoding";    testCacheVary(varyHeader, new Header[] { new Header(varyHeader, "value"), new Header(varyHeader, "another value") }, new Header[] { new Header(varyHeader, "something completely different") });}
0
public void testCacheMultipleVaryHeaders() throws Exception
{    String varyHeaderOne = "Accept-Encoding";    String varyHeaderTwo = "Something";    testCacheVary(varyHeaderOne + "," + varyHeaderTwo, new Header[] { new Header(varyHeaderOne, "first value"), new Header(varyHeaderTwo, "another value") }, new Header[] { new Header(varyHeaderOne, "first") });}
0
public void testCacheMultipleMultiVaryHeaders() throws Exception
{    String varyHeaderOne = "Accept-Encoding";    String varyHeaderTwo = "Something";    testCacheVary(varyHeaderOne + "," + varyHeaderTwo, new Header[] { new Header(varyHeaderOne, "first value"), new Header(varyHeaderOne, "second value"), new Header(varyHeaderTwo, "another value") }, new Header[] { new Header(varyHeaderOne, "first value"), new Header(varyHeaderOne, "another value") });}
0
private String asString(Header[] headers)
{    StringBuilder result = new StringBuilder();    for (Header header : headers) {        result.append(header.getName()).append(": ").append(header.getValue()).append("\n");    }    return result.toString();}
0
private void testCacheVary(String vary, Header[] origHeaders, Header[] differentHeaders) throws Exception
{    this.cacheManager.setUseExpires(true);    this.cacheManager.testIterationStart(null);    assertNull(getThreadCacheEntry(LOCAL_HOST), "Should not find entry");    assertFalse(this.cacheManager.inCache(url, origHeaders), "Should not find valid entry");    setExpires(makeDate(new Date(System.currentTimeMillis())));    setCacheControl("public, max-age=5");    sampleResultOK.setRequestHeaders(asString(origHeaders));    this.vary = vary;    cacheResult(sampleResultOK);    assertNotNull(getThreadCacheEntry(LOCAL_HOST).getVaryHeader(), "Should find entry with vary header");    assertFalse(this.cacheManager.inCache(url), "Should not find valid entry without headers");    assertTrue(this.cacheManager.inCache(url, origHeaders), "Should find valid entry with headers");    assertFalse(this.cacheManager.inCache(url, differentHeaders), "Should not find valid entry with different header");    this.vary = null;}
0
public void testCacheHEAD() throws Exception
{    this.cacheManager.setUseExpires(true);    this.cacheManager.testIterationStart(null);    assertNull(getThreadCacheEntry(LOCAL_HOST), "Should not find entry");    assertFalse(this.cacheManager.inCache(url), "Should not find valid entry");    setExpires(makeDate(new Date(System.currentTimeMillis())));    setCacheControl("public, max-age=5");    HTTPSampleResult sampleResultHEAD = getSampleResultWithSpecifiedResponseCode("200");    sampleResultHEAD.setHTTPMethod("HEAD");    cacheResult(sampleResultHEAD);    assertNull(getThreadCacheEntry(LOCAL_HOST), "Should not find entry");    assertFalse(this.cacheManager.inCache(url), "Should not find valid entry");}
0
public void testPrivateCache() throws Exception
{    this.cacheManager.setUseExpires(true);    this.cacheManager.testIterationStart(null);    assertNull(getThreadCacheEntry(LOCAL_HOST), "Should not find entry");    assertFalse(this.cacheManager.inCache(url), "Should not find valid entry");    long start = System.currentTimeMillis();    setExpires(makeDate(new Date(start)));    setCacheControl("private, max-age=1");    cacheResult(sampleResultOK);    assertNotNull(getThreadCacheEntry(LOCAL_HOST), "Should find entry");    assertTrue(this.cacheManager.inCache(url), "Should find valid entry");    sleepTill(start + 1010);    assertNotNull(getThreadCacheEntry(LOCAL_HOST), "Should find entry");    assertFalse(this.cacheManager.inCache(url), "Should not find valid entry");}
0
public void testNoCacheControlNoMaxAgeNoExpire() throws Exception
{    this.cacheManager.setUseExpires(true);    this.cacheManager.testIterationStart(null);    assertNull(getThreadCacheEntry(LOCAL_HOST), "Should not find entry");    assertFalse(this.cacheManager.inCache(url), "Should not find valid entry");                        long start = System.currentTimeMillis();        long age = 30 * 1000;    setLastModified(makeDate(new Date(start - age)));    cacheResult(sampleResultOK);    assertNotNull(getThreadCacheEntry(LOCAL_HOST), "Should find entry");    assertTrue(this.cacheManager.inCache(url), "Should find valid entry");    sleepTill(start + age / 10 + 10);    assertNotNull(getThreadCacheEntry(LOCAL_HOST), "Should find entry");    assertFalse(this.cacheManager.inCache(url), "Should not find valid entry");}
0
public void testPrivateCacheNoMaxAgeNoExpire() throws Exception
{    this.cacheManager.setUseExpires(true);    this.cacheManager.testIterationStart(null);    assertNull(getThreadCacheEntry(LOCAL_HOST), "Should not find entry");    assertFalse(this.cacheManager.inCache(url), "Should not find valid entry");    setCacheControl("private");                    long start = System.currentTimeMillis();        long age = 30 * 1000;    setLastModified(makeDate(new Date(start - age)));    cacheResult(sampleResultOK);    assertNotNull(getThreadCacheEntry(LOCAL_HOST), "Should find entry");    assertTrue(this.cacheManager.inCache(url), "Should find valid entry");    sleepTill(start + age / 10 + 10);    assertNotNull(getThreadCacheEntry(LOCAL_HOST), "Should find entry");    assertFalse(this.cacheManager.inCache(url), "Should not find valid entry");}
0
public void testPrivateCacheExpireNoMaxAge() throws Exception
{    this.cacheManager.setUseExpires(true);    this.cacheManager.testIterationStart(null);    assertNull(getThreadCacheEntry(LOCAL_HOST), "Should not find entry");    assertFalse(this.cacheManager.inCache(url), "Should not find valid entry");    long start = System.currentTimeMillis();    setExpires(makeDate(new Date(start + 2000)));    setCacheControl("private");    cacheResult(sampleResultOK);    assertNotNull(getThreadCacheEntry(LOCAL_HOST), "Should find entry");    assertTrue(this.cacheManager.inCache(url), "Should find valid entry");    sleepTill(start + 2010);    assertNotNull(getThreadCacheEntry(LOCAL_HOST), "Should find entry");    assertFalse(this.cacheManager.inCache(url), "Should not find valid entry");}
0
public void testNoCache() throws Exception
{    this.cacheManager.setUseExpires(true);    this.cacheManager.testIterationStart(null);    assertNull(getThreadCacheEntry(LOCAL_HOST), "Should not find entry");    assertFalse(this.cacheManager.inCache(url), "Should not find valid entry");    setCacheControl("no-cache");    cacheResult(sampleResultOK);    assertNotNull(getThreadCacheEntry(LOCAL_HOST), "Should find entry");    assertFalse(this.cacheManager.inCache(url), "Should not find valid entry");}
0
public void testNoStore() throws Exception
{    this.cacheManager.setUseExpires(true);    this.cacheManager.testIterationStart(null);    assertNull(getThreadCacheEntry(LOCAL_HOST), "Should not find entry");    assertFalse(this.cacheManager.inCache(url), "Should not find valid entry");    setCacheControl("no-store");    cacheResult(sampleResultOK);    assertNull(getThreadCacheEntry(LOCAL_HOST), "Should not find entry");    assertFalse(this.cacheManager.inCache(url), "Should not find valid entry");}
0
public void testCacheHttpClientBug51932() throws Exception
{    this.cacheManager.setUseExpires(true);    this.cacheManager.testIterationStart(null);    assertNull(getThreadCacheEntry(LOCAL_HOST), "Should not find entry");    assertFalse(this.cacheManager.inCache(url), "Should not find valid entry");    long start = System.currentTimeMillis();    setExpires(makeDate(new Date(start)));    setCacheControl("public, max-age=1, no-transform");    cacheResult(sampleResultOK);    assertNotNull(getThreadCacheEntry(LOCAL_HOST), "Should find entry");    assertTrue(this.cacheManager.inCache(url), "Should find valid entry");    sleepTill(start + 1010);    assertNotNull(getThreadCacheEntry(LOCAL_HOST), "Should find entry");    assertFalse(this.cacheManager.inCache(url), "Should not find valid entry");}
0
public void testGetClearEachIteration() throws Exception
{    assertFalse(this.cacheManager.getClearEachIteration(), "Should default not to clear after each iteration.");    this.cacheManager.setClearEachIteration(true);    assertTrue(this.cacheManager.getClearEachIteration(), "Should be settable to clear after each iteration.");    this.cacheManager.setClearEachIteration(false);    assertFalse(this.cacheManager.getClearEachIteration(), "Should be settable not to clear after each iteration.");}
0
private void cacheResultWithGivenCode(String responseCode) throws Exception
{    HTTPSampleResult sampleResult = getSampleResultWithSpecifiedResponseCode(responseCode);    cacheResult(sampleResult);}
0
public void testSaveDetailsWithEmptySampleResultGivesNoCacheEntry() throws Exception
{    cacheResultWithGivenCode("");    assertTrue(getThreadCache().isEmpty(), "Saving details with empty SampleResult should not make cache entry.");}
0
public void testSaveDetailsHttpMethodWithSampleResultWithResponseCode200GivesCacheEntry() throws Exception
{    cacheResultWithGivenCode("200");    CacheManager.CacheEntry cacheEntry = getThreadCacheEntry(LOCAL_HOST);    assertNotNull(cacheEntry, "Saving SampleResult with HttpMethod & 200 response should make cache entry.");    assertEquals(EXPECTED_ETAG, cacheEntry.getEtag());    assertEquals(this.currentTimeInGMT, cacheEntry.getLastModified());}
0
public void testSaveDetailsHttpMethodWithSampleResultWithResponseCode404GivesNoCacheEntry() throws Exception
{    cacheResultWithGivenCode("404");    assertNull(getThreadCacheEntry(LOCAL_HOST), "Saving SampleResult with HttpMethod & 404 response should not make cache entry.");}
0
public void testSetHeadersHttpMethodWithSampleResultWithResponseCode200GivesCacheEntry() throws Exception
{    addRequestHeader(HTTPConstants.IF_MODIFIED_SINCE, this.currentTimeInGMT);    addRequestHeader(HTTPConstants.ETAG, EXPECTED_ETAG);    cacheResultWithGivenCode("200");    setRequestHeaders();    checkRequestHeader(HTTPConstants.IF_NONE_MATCH, EXPECTED_ETAG);    checkRequestHeader(HTTPConstants.IF_MODIFIED_SINCE, this.currentTimeInGMT);}
0
public void testSetHeadersHttpMethodWithSampleResultWithResponseCode404GivesNoCacheEntry() throws Exception
{    cacheResultWithGivenCode("404");    setRequestHeaders();    assertNull(getThreadCacheEntry(LOCAL_HOST), "Saving SampleResult with HttpMethod & 404 response should not make cache entry.");}
0
public void testClearCache() throws Exception
{    assertTrue(getThreadCache().isEmpty(), "ThreadCache should be empty initially.");    cacheResultWithGivenCode("200");    assertFalse(getThreadCache().isEmpty(), "ThreadCache should be populated after saving details for HttpMethod with SampleResult with response code 200.");    this.cacheManager.clear();    assertTrue(getThreadCache().isEmpty(), "ThreadCache should be emptied by call to clear.");}
0
protected HTTPSampleResult getSampleResultWithSpecifiedResponseCode(String code)
{    HTTPSampleResult sampleResult = new HTTPSampleResult();    sampleResult.setResponseCode(code);    sampleResult.setHTTPMethod("GET");    sampleResult.setURL(url);    return sampleResult;}
0
private Map<String, CacheManager.CacheEntry> getThreadCache() throws Exception
{    Field threadLocalfield = CacheManager.class.getDeclaredField("threadCache");    threadLocalfield.setAccessible(true);    @SuppressWarnings("unchecked")    ThreadLocal<Map<String, CacheManager.CacheEntry>> threadLocal = (ThreadLocal<Map<String, CacheManager.CacheEntry>>) threadLocalfield.get(this.cacheManager);    return threadLocal.get();}
0
protected CacheManager.CacheEntry getThreadCacheEntry(String url) throws Exception
{    return getThreadCache().get(url);}
0
public org.apache.http.Header[] getAllHeaders()
{    return headers.toArray(new org.apache.http.Header[headers.size()]);}
0
public void addHeader(org.apache.http.Header header)
{    headers.add(header);}
0
public Header getFirstHeader(String headerName)
{    Header[] headers = getHeaders(headerName);    if (headers.length > 0) {        return headers[0];    }    return null;}
0
public Header getLastHeader(String headerName)
{    Header[] headers = getHeaders(headerName);    if (headers.length > 0) {        return headers[headers.length - 1];    }    return null;}
0
public Header[] getHeaders(String headerName)
{    org.apache.http.Header header = null;    if (HTTPConstants.LAST_MODIFIED.equals(headerName)) {        header = this.lastModifiedHeader;    } else if (HTTPConstants.ETAG.equals(headerName)) {        header = this.etagHeader;    } else if (HTTPConstants.EXPIRES.equals(headerName)) {        header = expires == null ? null : new BasicHeader(HTTPConstants.EXPIRES, expires);    } else if (HTTPConstants.CACHE_CONTROL.equals(headerName)) {        header = cacheControl == null ? null : new BasicHeader(HTTPConstants.CACHE_CONTROL, cacheControl);    } else if (HTTPConstants.DATE.equals(headerName)) {        header = this.dateHeader;    } else if (HTTPConstants.VARY.equals(headerName)) {        header = vary == null ? null : new BasicHeader(HTTPConstants.VARY, vary);    }    if (header != null) {        return new org.apache.http.Header[] { header };    } else {        return super.getHeaders(headerName);    }}
0
public ProtocolVersion getProtocolVersion()
{    return null;}
0
public StatusLine getStatusLine()
{    return null;}
0
public void setStatusLine(StatusLine statusline)
{}
0
public void setStatusLine(ProtocolVersion ver, int code)
{}
0
public void setStatusLine(ProtocolVersion ver, int code, String reason)
{}
0
public void setStatusCode(int code) throws IllegalStateException
{}
0
public void setReasonPhrase(String reason) throws IllegalStateException
{}
0
public HttpEntity getEntity()
{    return null;}
0
public void setEntity(HttpEntity entity)
{}
0
public Locale getLocale()
{    return null;}
0
public void setLocale(Locale loc)
{}
0
public java.net.URI getURI()
{    try {        return url.toURI();    } catch (URISyntaxException e) {        throw new IllegalStateException();    }}
0
public void setUp() throws Exception
{    super.setUp();    this.httpMethod = new HttpPostStub();    this.httpResponse = new HttpResponseStub();    this.httpMethod.setURI(this.url.toURI());}
0
public void tearDown() throws Exception
{    this.httpMethod = null;    this.httpResponse = null;    super.tearDown();}
0
protected void setExpires(String expires)
{    ((HttpResponseStub) httpResponse).expires = expires;}
0
protected void setCacheControl(String cacheControl)
{    ((HttpResponseStub) httpResponse).cacheControl = cacheControl;}
0
protected void setLastModified(String lastModified)
{    ((HttpResponseStub) httpResponse).lastModifiedHeader = new BasicHeader(HTTPConstants.LAST_MODIFIED, lastModified);}
0
protected void cacheResult(HTTPSampleResult result)
{    this.cacheManager.saveDetails(httpResponse, result);}
0
protected void addRequestHeader(String requestHeader, String value)
{    this.httpMethod.addHeader(new BasicHeader(requestHeader, value));}
0
protected void setRequestHeaders()
{    this.cacheManager.setHeaders(this.url, this.httpMethod);}
0
protected void checkRequestHeader(String requestHeader, String expectedValue)
{    org.apache.http.Header header = this.httpMethod.getLastHeader(requestHeader);    assertEquals(requestHeader + ": " + expectedValue, header.getName() + ": " + header.getValue());}
0
public void testBug61321() throws Exception
{    this.cacheManager.setUseExpires(false);    this.cacheManager.testIterationStart(null);    assertNull(getThreadCacheEntry(LOCAL_HOST), "Should not find entry");    assertFalse(this.cacheManager.inCache(url), "Should not find valid entry");    cacheResult(sampleResultOK);    assertNotNull(getThreadCacheEntry(LOCAL_HOST), "Should find entry");    assertFalse(this.cacheManager.inCache(url), "Should find valid entry");    cacheManager.setHeaders(url, httpMethod);    checkIfModifiedSinceHeader(httpMethod);    this.httpMethod = new HttpPostStub();    sampleResultOK = getSampleResultWithSpecifiedResponseCode("304");    setLastModified(null);    cacheResult(sampleResultOK);    assertNotNull(getThreadCacheEntry(LOCAL_HOST), "Should find entry");    assertFalse(this.cacheManager.inCache(url), "Should not find valid entry");    cacheManager.setHeaders(url, httpMethod);    checkIfModifiedSinceHeader(httpMethod);    this.httpMethod = new HttpPostStub();    sampleResultOK = getSampleResultWithSpecifiedResponseCode("304");    setLastModified(null);    cacheResult(sampleResultOK);    assertNotNull(getThreadCacheEntry(LOCAL_HOST), "Should find entry");    assertFalse(this.cacheManager.inCache(url), "Should not find valid entry");    cacheManager.setHeaders(url, httpMethod);    checkIfModifiedSinceHeader(httpMethod);}
0
protected void checkIfModifiedSinceHeader(HttpRequestBase httpMethod)
{    SimpleDateFormat dateFormat = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss z", Locale.US);    try {        assertEquals(1, httpMethod.getHeaders(HTTPConstantsInterface.IF_MODIFIED_SINCE).length, "Should have found 1 header " + HTTPConstantsInterface.IF_MODIFIED_SINCE);        Date date = dateFormat.parse(httpMethod.getHeaders(HTTPConstantsInterface.IF_MODIFIED_SINCE)[0].getValue());        assertNotNull(date, "Should have found a valid entry");    } catch (ParseException e) {        Assertions.fail("Invalid header format for:" + HTTPConstantsInterface.IF_MODIFIED_SINCE);    }}
0
public org.apache.http.Header[] getAllHeaders()
{    return headers.toArray(new org.apache.http.Header[headers.size()]);}
0
public void addHeader(org.apache.http.Header header)
{    headers.add(header);}
0
public Header getFirstHeader(String headerName)
{    Header[] headers = getHeaders(headerName);    if (headers.length > 0) {        return headers[0];    }    return null;}
0
public Header getLastHeader(String headerName)
{    Header[] headers = getHeaders(headerName);    if (headers.length > 0) {        return headers[headers.length - 1];    }    return null;}
0
public Header[] getHeaders(String headerName)
{    org.apache.http.Header header = null;    if (HTTPConstants.LAST_MODIFIED.equals(headerName)) {        header = this.lastModifiedHeader;    } else if (HTTPConstants.ETAG.equals(headerName)) {        header = this.etagHeader;    } else if (HTTPConstants.EXPIRES.equals(headerName)) {        header = expires == null ? null : new BasicHeader(HTTPConstants.EXPIRES, expires);    } else if (HTTPConstants.CACHE_CONTROL.equals(headerName)) {        header = cacheControl == null ? null : new BasicHeader(HTTPConstants.CACHE_CONTROL, cacheControl);    } else if (HTTPConstants.DATE.equals(headerName)) {        header = this.dateHeader;    } else if (HTTPConstants.VARY.equals(headerName)) {        header = vary == null ? null : new BasicHeader(HTTPConstants.VARY, vary);    }    if (header != null) {        return new org.apache.http.Header[] { header };    } else {        return super.getHeaders(headerName);    }}
0
public ProtocolVersion getProtocolVersion()
{    return null;}
0
public StatusLine getStatusLine()
{    return null;}
0
public void setStatusLine(StatusLine statusline)
{}
0
public void setStatusLine(ProtocolVersion ver, int code)
{}
0
public void setStatusLine(ProtocolVersion ver, int code, String reason)
{}
0
public void setStatusCode(int code) throws IllegalStateException
{}
0
public void setReasonPhrase(String reason) throws IllegalStateException
{}
0
public HttpEntity getEntity()
{    return null;}
0
public void setEntity(HttpEntity entity)
{}
0
public Locale getLocale()
{    return null;}
0
public void setLocale(Locale loc)
{}
0
public java.net.URI getURI()
{    try {        return url.toURI();    } catch (URISyntaxException e) {        throw new IllegalStateException();    }}
0
protected String makeDate(Date d)
{    SimpleDateFormat simpleDateFormat = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss z", Locale.US);    simpleDateFormat.setTimeZone(GMT);    return simpleDateFormat.format(d);}
0
protected HTTPSampleResult getSampleResultWithSpecifiedResponseCode(String code)
{    HTTPSampleResult sampleResult = new HTTPSampleResult();    sampleResult.setResponseCode(code);    sampleResult.setHTTPMethod("GET");    sampleResult.setURL(url);    return sampleResult;}
0
public void setUp() throws Exception
{    this.cacheManager = new CacheManager();    this.currentTimeInGMT = makeDate(new Date());    this.url = new URL(LOCAL_HOST);    this.sampleResultOK = getSampleResultWithSpecifiedResponseCode("200");    this.httpMethod = new HttpPostStub();    this.httpResponse = new HttpResponseStub();    this.httpMethod.setURI(this.url.toURI());    jmctx = JMeterContextService.getContext();    jmvars = new JMeterVariables();}
0
public void tearDown() throws Exception
{    this.url = null;    this.httpMethod = null;    this.httpResponse = null;    this.cacheManager = new CacheManager();    this.currentTimeInGMT = null;    this.sampleResultOK = null;}
0
protected void setExpires(String expires)
{    ((HttpResponseStub) httpResponse).expires = expires;}
0
protected void setCacheControl(String cacheControl)
{    ((HttpResponseStub) httpResponse).cacheControl = cacheControl;}
0
protected void setLastModified(String lastModified)
{    ((HttpResponseStub) httpResponse).lastModifiedHeader = new BasicHeader(HTTPConstants.LAST_MODIFIED, lastModified);}
0
protected void cacheResult(HTTPSampleResult result)
{    this.cacheManager.saveDetails(httpResponse, result);}
0
protected void addRequestHeader(String requestHeader, String value)
{    this.httpMethod.addHeader(new BasicHeader(requestHeader, value));}
0
protected void setRequestHeaders()
{    this.cacheManager.setHeaders(this.url, this.httpMethod);}
0
private Map<String, CacheManager.CacheEntry> getThreadCache() throws Exception
{    Field threadLocalfield = CacheManager.class.getDeclaredField("threadCache");    threadLocalfield.setAccessible(true);    @SuppressWarnings("unchecked")    ThreadLocal<Map<String, CacheManager.CacheEntry>> threadLocal = (ThreadLocal<Map<String, CacheManager.CacheEntry>>) threadLocalfield.get(this.cacheManager);    return threadLocal.get();}
0
protected CacheManager.CacheEntry getThreadCacheEntry(String url) throws Exception
{    return getThreadCache().get(url);}
0
public void testCacheControlCleared() throws Exception
{    this.cacheManager.setUseExpires(true);    this.cacheManager.testIterationStart(null);    assertNull("Should not find entry", getThreadCacheEntry(LOCAL_HOST));    Header[] headers = new Header[1];    assertFalse("Should not find valid entry", this.cacheManager.inCache(url, headers));    long start = System.currentTimeMillis();    setExpires(makeDate(new Date(start)));    setCacheControl("public, max-age=1");    cacheResult(sampleResultOK);    assertNotNull("Before iternation, should find entry", getThreadCacheEntry(LOCAL_HOST));    assertTrue("Before iternation, should find valid entry", this.cacheManager.inCache(url, headers));    this.cacheManager.setClearEachIteration(true);    this.cacheManager.testIterationStart(null);    assertNull("After iterantion, should not find entry", getThreadCacheEntry(LOCAL_HOST));    assertFalse("After iterantion, should not find valid entry", this.cacheManager.inCache(url, headers));}
0
public void testJmeterVariableCacheWhenThreadIterationIsANewUser()
{    jmvars.putObject(SAME_USER, true);    jmctx.setVariables(jmvars);    HTTPSamplerBase sampler = (HTTPSamplerBase) new HttpTestSampleGui().createTestElement();    cacheManager.setControlledByThread(true);    sampler.setCacheManager(cacheManager);    sampler.setThreadContext(jmctx);    boolean res = (boolean) cacheManager.getThreadContext().getVariables().getObject(SAME_USER);    assertTrue("When test different user on the different iternation, the cache should be cleared", res);}
0
public void testJmeterVariableWhenThreadIterationIsSameUser()
{    jmvars.putObject(SAME_USER, false);    jmctx.setVariables(jmvars);    HTTPSamplerBase sampler = (HTTPSamplerBase) new HttpTestSampleGui().createTestElement();    cacheManager.setControlledByThread(true);    sampler.setCacheManager(cacheManager);    sampler.setThreadContext(jmctx);    boolean res = (boolean) cacheManager.getThreadContext().getVariables().getObject(SAME_USER);    assertFalse("When test different user on the different iternation, the cache shouldn't be cleared", res);}
0
public void testCacheManagerWhenThreadIterationIsANewUser() throws Exception
{        jmvars.putObject(SAME_USER, false);    jmctx.setVariables(jmvars);    this.cacheManager.setUseExpires(true);    this.cacheManager.testIterationStart(null);    assertNull("Should not find entry", getThreadCacheEntry(LOCAL_HOST));    Header[] headers = new Header[1];    assertFalse("Should not find valid entry", this.cacheManager.inCache(url, headers));    long start = System.currentTimeMillis();    setExpires(makeDate(new Date(start)));    setCacheControl("public, max-age=1");    cacheResult(sampleResultOK);    this.cacheManager.setThreadContext(jmctx);    this.cacheManager.setControlledByThread(true);    assertNotNull("Before iternation, should find entry", getThreadCacheEntry(LOCAL_HOST));    assertTrue("Before iternation, should find valid entry", this.cacheManager.inCache(url, headers));    this.cacheManager.testIterationStart(null);    assertNull("After iterantion, should not find entry", getThreadCacheEntry(LOCAL_HOST));    assertFalse("After iterantion, should not find valid entry", this.cacheManager.inCache(url, headers));        jmvars.putObject(SAME_USER, true);    jmctx.setVariables(jmvars);    this.cacheManager.setThreadContext(jmctx);    start = System.currentTimeMillis();    setExpires(makeDate(new Date(start)));    setCacheControl("public, max-age=1");    cacheResult(sampleResultOK);    assertNotNull("Before iternation, should find entry", getThreadCacheEntry(LOCAL_HOST));    assertTrue("Before iternation, should find valid entry", this.cacheManager.inCache(url, headers));    this.cacheManager.setControlledByThread(false);    this.cacheManager.setClearEachIteration(true);    this.cacheManager.testIterationStart(null);    assertNull("After iterantion, should not find entry", getThreadCacheEntry(LOCAL_HOST));    assertFalse("After iterantion, should not find valid entry", this.cacheManager.inCache(url, headers));}
0
public void testCacheManagerWhenThreadIterationIsSameUser() throws Exception
{        jmvars.putObject(SAME_USER, true);    jmctx.setVariables(jmvars);    this.cacheManager.setUseExpires(true);    this.cacheManager.testIterationStart(null);    assertNull("Should not find entry", getThreadCacheEntry(LOCAL_HOST));    Header[] headers = new Header[1];    assertFalse("Should not find valid entry", this.cacheManager.inCache(url, headers));    long start = System.currentTimeMillis();    setExpires(makeDate(new Date(start)));    setCacheControl("public, max-age=1");    cacheResult(sampleResultOK);    this.cacheManager.setThreadContext(jmctx);    this.cacheManager.setControlledByThread(true);    assertNotNull("Before iteration, should find entry", getThreadCacheEntry(LOCAL_HOST));    assertTrue("Before iteration, should find valid entry", this.cacheManager.inCache(url, headers));    this.cacheManager.testIterationStart(null);    assertNotNull("After iteration, should find entry", getThreadCacheEntry(LOCAL_HOST));    assertTrue("After iteration, should find valid entry", this.cacheManager.inCache(url, headers));        jmvars.putObject(SAME_USER, false);    jmctx.setVariables(jmvars);    this.cacheManager.setThreadContext(jmctx);    start = System.currentTimeMillis();    setExpires(makeDate(new Date(start)));    setCacheControl("public, max-age=1");    cacheResult(sampleResultOK);    assertNotNull("Before iteration, should find entry", getThreadCacheEntry(LOCAL_HOST));    assertTrue("Before iteration, should find valid entry", this.cacheManager.inCache(url, headers));    this.cacheManager.setControlledByThread(false);    this.cacheManager.setClearEachIteration(false);    this.cacheManager.testIterationStart(null);    assertNotNull("After iteration, should find entry", getThreadCacheEntry(LOCAL_HOST));    assertTrue("After iteration, should find valid entry", this.cacheManager.inCache(url, headers));}
0
protected void cacheResult(HTTPSampleResult result) throws Exception
{    this.cacheManager.saveDetails(this.urlConnection, result);}
0
protected void setExpires(String expires)
{    ((URLConnectionStub) urlConnection).expires = expires;}
0
protected void setCacheControl(String cacheControl)
{    ((URLConnectionStub) urlConnection).cacheControl = cacheControl;}
0
protected void setLastModified(String lastModified)
{    ((URLConnectionStub) urlConnection).lastModifiedHeader = lastModified;}
0
protected void checkRequestHeader(String requestHeader, String expectedValue)
{    Map<String, List<String>> properties = this.urlConnection.getRequestProperties();    checkProperty(properties, requestHeader, expectedValue);}
0
protected void addRequestHeader(String requestHeader, String value)
{}
0
private org.apache.jmeter.protocol.http.control.Header[] asHeaders(Map<String, List<String>> headers)
{        return headers.entrySet().stream().filter(header -> header.getKey() != null).map(header -> new Header(header.getKey(), String.join(", ", header.getValue()))).toArray(Header[]::new);}
0
protected void setRequestHeaders()
{    this.cacheManager.setHeaders((HttpURLConnection) this.urlConnection, asHeaders(urlConnection.getHeaderFields()), this.url);}
0
private static void checkProperty(Map<String, List<String>> properties, String property, String expectedPropertyValue)
{    assertNotNull(properties, "Properties should not be null. Expected to find within it property = " + property + " with expected value = " + expectedPropertyValue);    List<String> listOfPropertyValues = properties.get(property);    assertNotNull(listOfPropertyValues, "No property entry found for property " + property);    assertEquals(1, listOfPropertyValues.size(), "Did not find single property for property " + property);    assertEquals(expectedPropertyValue, listOfPropertyValues.get(0), "Unexpected value for property " + property);}
0
public void connect() throws IOException
{}
0
public String getHeaderField(String name)
{    if (HTTPConstants.LAST_MODIFIED.equals(name)) {        return lastModifiedHeader;    } else if (HTTPConstants.ETAG.equals(name)) {        return EXPECTED_ETAG;    } else if (HTTPConstants.EXPIRES.equals(name)) {        return expires;    } else if (HTTPConstants.CACHE_CONTROL.equals(name)) {        return cacheControl;    } else if (HTTPConstants.DATE.equals(name)) {        return currentTimeInGMT;    } else if (HTTPConstants.VARY.equals(name)) {        return vary;    }    return super.getHeaderField(name);}
0
public URL getURL()
{    return url;}
0
public void disconnect()
{}
0
public boolean usingProxy()
{    return false;}
0
public void setUp() throws Exception
{    super.setUp();    this.urlConnection = new URLConnectionStub(this.url.openConnection());}
0
public void tearDown() throws Exception
{    this.urlConnection = null;    super.tearDown();}
0
public void setUp()
{    jmctx = JMeterContextService.getContext();    jmvars = new JMeterVariables();}
0
public void testJmeterVariableCookieWhenThreadIterationIsANewUser()
{    jmvars.putObject(SAME_USER, true);    jmctx.setVariables(jmvars);    HTTPSamplerBase sampler = (HTTPSamplerBase) new HttpTestSampleGui().createTestElement();    CookieManager cookieManager = new CookieManager();    cookieManager.setControlledByThread(true);    sampler.setCookieManager(cookieManager);    sampler.setThreadContext(jmctx);    boolean res = (boolean) cookieManager.getThreadContext().getVariables().getObject(SAME_USER);    assertTrue("When test different users on the different iternations, the cookie should be cleared", res);}
0
public void testJmeterVariableCookieWhenThreadIterationIsSameUser()
{    jmvars.putObject(SAME_USER, false);    jmctx.setVariables(jmvars);    HTTPSamplerBase sampler = (HTTPSamplerBase) new HttpTestSampleGui().createTestElement();    CookieManager cookieManager = new CookieManager();    cookieManager.setControlledByThread(true);    sampler.setCookieManager(cookieManager);    sampler.setThreadContext(jmctx);    boolean res = (boolean) cookieManager.getThreadContext().getVariables().getObject(SAME_USER);    assertFalse("When test same user on the different iternations, the cookie shouldn't be cleared", res);}
0
public void testCookieManagerWhenThreadIterationIsNewUser() throws NoSuchFieldException, IllegalAccessException
{        jmvars.putObject(SAME_USER, false);    jmctx.setVariables(jmvars);    CookieManager cookieManagerDynamic = new CookieManager();    cookieManagerDynamic.setThreadContext(jmctx);    cookieManagerDynamic.getCookies().clear();    cookieManagerDynamic.testStarted();    Cookie cookieDynamic = new Cookie();    cookieDynamic.setName(DYNAMIC_COOKIE);    cookieManagerDynamic.getCookies().addItem(cookieDynamic);    cookieManagerDynamic.setControlledByThread(true);    Field privateStringField = CookieManager.class.getDeclaredField("initialCookies");    privateStringField.setAccessible(true);    CookieManager cookieManagerStatic = new CookieManager();    Cookie cookieStatic = new Cookie();    cookieStatic.setName(STATIC_COOKIE);    cookieManagerStatic.getCookies().addItem(cookieStatic);    CollectionProperty initialCookies = cookieManagerStatic.getCookies();    privateStringField.set(cookieManagerDynamic, initialCookies);    assertTrue("Before the iteration,the quantity of cookies should be 1", cookieManagerDynamic.getCookies().size() == 1);    assertEquals("Before the iteration, the value of cookie should be what user have set", DYNAMIC_COOKIE, cookieManagerDynamic.getCookies().get(0).getName());    cookieManagerDynamic.testIterationStart(null);    assertEquals("After the iteration, the value of cookie should be the initial cookies", STATIC_COOKIE, cookieManagerDynamic.getCookies().get(0).getName());    assertTrue("After the iteration, the quantity of cookies should be 1", cookieManagerDynamic.getCookies().size() == 1);        jmvars.putObject(SAME_USER, true);    jmctx.setVariables(jmvars);    cookieManagerDynamic.setThreadContext(jmctx);    cookieManagerDynamic.getCookies().clear();    cookieManagerDynamic.testStarted();    cookieDynamic.setName(DYNAMIC_COOKIE);    cookieManagerDynamic.getCookies().addItem(cookieDynamic);    cookieManagerDynamic.setClearEachIteration(true);    cookieManagerDynamic.setControlledByThread(false);    cookieManagerStatic.getCookies().clear();    cookieManagerStatic.getCookies().addItem(cookieStatic);    initialCookies = cookieManagerStatic.getCookies();    privateStringField.set(cookieManagerDynamic, initialCookies);    assertEquals("Before the iteration, the value of cookie should be what user have set", DYNAMIC_COOKIE, cookieManagerDynamic.getCookies().get(0).getName());    assertTrue("Before the iteration,the quantity of cookies should be 1", cookieManagerDynamic.getCookies().size() == 1);    cookieManagerDynamic.testIterationStart(null);    assertEquals("After the iteration, the value of cookie should be the initial cookies", STATIC_COOKIE, cookieManagerDynamic.getCookies().get(0).getName());    assertTrue("After the iteration, the quantity of cookies should be 1", cookieManagerDynamic.getCookies().size() == 1);}
0
public void testCookieManagerWhenThreadIterationIsSameUser() throws NoSuchFieldException, IllegalAccessException
{        jmvars.putObject(SAME_USER, true);    jmctx.setVariables(jmvars);    CookieManager cookieManagerDynamic = new CookieManager();    cookieManagerDynamic.setThreadContext(jmctx);    cookieManagerDynamic.getCookies().clear();    cookieManagerDynamic.testStarted();    Cookie cookieDynamic = new Cookie();    cookieDynamic.setName(DYNAMIC_COOKIE);    cookieManagerDynamic.getCookies().addItem(cookieDynamic);    cookieManagerDynamic.setControlledByThread(true);    Field privateStringField = CookieManager.class.getDeclaredField("initialCookies");    privateStringField.setAccessible(true);    CookieManager cookieManagerStatic = new CookieManager();    Cookie cookieStatic = new Cookie();    cookieStatic.setName(STATIC_COOKIE);    cookieManagerStatic.getCookies().addItem(cookieStatic);    CollectionProperty initialCookies = cookieManagerStatic.getCookies();    privateStringField.set(cookieManagerDynamic, initialCookies);    assertTrue("Before the iteration,the quantity of cookies should be 1", cookieManagerDynamic.getCookies().size() == 1);    assertEquals("Before the iteration, the value of cookie should be what user have set", DYNAMIC_COOKIE, cookieManagerDynamic.getCookies().get(0).getName());    cookieManagerDynamic.testIterationStart(null);    assertEquals("After the iteration, the value of cookie should be what user have set", DYNAMIC_COOKIE, cookieManagerDynamic.getCookies().get(0).getName());    assertTrue("After the iteration, the quantity of cookies should be 1", cookieManagerDynamic.getCookies().size() == 1);        jmvars.putObject(SAME_USER, false);    jmctx.setVariables(jmvars);    cookieManagerDynamic.setControlledByThread(false);    cookieManagerDynamic.getCookies().clear();    cookieManagerDynamic.testStarted();    cookieDynamic.setName(DYNAMIC_COOKIE);    cookieManagerDynamic.getCookies().addItem(cookieDynamic);    cookieManagerDynamic.setClearEachIteration(false);    cookieManagerStatic.getCookies().clear();    cookieStatic.setName(STATIC_COOKIE);    privateStringField.set(cookieManagerDynamic, initialCookies);    assertEquals("Before the iteration, the value of cookie should be what user have set", DYNAMIC_COOKIE, cookieManagerDynamic.getCookies().get(0).getName());    assertTrue("Before the iteration,the quantity of cookies should be 1", cookieManagerDynamic.getCookies().size() == 1);    cookieManagerDynamic.testIterationStart(null);    assertEquals("After the iteration, the value of cookie should be what user have set", DYNAMIC_COOKIE, cookieManagerDynamic.getCookies().get(0).getName());    assertTrue("After the iteration, the quantity of cookies should be 1", cookieManagerDynamic.getCookies().size() == 1);}
0
public void setUp() throws Exception
{    jmctx = JMeterContextService.getContext();    man = new CookieManager();        man.setImplementation(HC4CookieHandler.class.getName());    man.setCookiePolicy(HC4CookieHandler.DEFAULT_POLICY_NAME);    man.setThreadContext(jmctx);        man.testStarted();}
0
public void testRemoveCookie() throws Exception
{    man.setThreadContext(jmctx);    Cookie c = new Cookie("id", "me", "127.0.0.1", "/", false, 0);    man.add(c);    assertEquals(1, man.getCookieCount());        Cookie d = new Cookie("id", "", "127.0.0.1", "/", false, 0);    man.add(d);    assertEquals(0, man.getCookieCount());    man.add(c);    man.add(c);    assertEquals(1, man.getCookieCount());    Cookie e = new Cookie("id", "me2", "127.0.0.1", "/", false, 0);    man.add(e);    assertEquals(1, man.getCookieCount());}
0
public void testSendCookie() throws Exception
{    man.add(new Cookie("id", "value", "jakarta.apache.org", "/", false, 9999999999L));    HTTPSamplerBase sampler = new HTTPNullSampler();    sampler.setDomain("jakarta.apache.org");    sampler.setPath("/index.html");    sampler.setMethod(HTTPConstants.GET);    assertNotNull(man.getCookieHeaderForURL(sampler.getUrl()));}
0
public void testSendCookie2() throws Exception
{    man.add(new Cookie("id", "value", ".apache.org", "/", false, 9999999999L));    HTTPSamplerBase sampler = new HTTPNullSampler();    sampler.setDomain("jakarta.apache.org");    sampler.setPath("/index.html");    sampler.setMethod(HTTPConstants.GET);    assertNotNull(man.getCookieHeaderForURL(sampler.getUrl()));}
0
public void testDomainHandling() throws Exception
{    URL url = new URL("http://jakarta.apache.org/");    man.addCookieFromHeader("test=1;domain=.jakarta.apache.org", url);    assertNotNull(man.getCookieHeaderForURL(url));}
0
public void testAddCookieFromHeaderWithWildcard() throws Exception
{    URL url = new URL("https://subdomain.bt.com/page");    String headerLine = "SMTRYNO=1; path=/; domain=.bt.com";    man.addCookieFromHeader(headerLine, url);    Assert.assertEquals(1, man.getCookieCount());    HC4CookieHandler cookieHandler = (HC4CookieHandler) man.getCookieHandler();    List<org.apache.http.cookie.Cookie> cookies = cookieHandler.getCookiesForUrl(man.getCookies(), url, CookieManager.ALLOW_VARIABLE_COOKIES);    for (org.apache.http.cookie.Cookie cookie : cookies) {                Assert.assertEquals("bt.com", cookie.getDomain());        Assert.assertTrue(((BasicClientCookie) cookie).containsAttribute(ClientCookie.DOMAIN_ATTR));    }        URL urlMainDomain = new URL("https://www.bt.com/page");    cookies = cookieHandler.getCookiesForUrl(man.getCookies(), urlMainDomain, CookieManager.ALLOW_VARIABLE_COOKIES);    Assert.assertEquals(1, cookies.size());    for (org.apache.http.cookie.Cookie cookie : cookies) {                Assert.assertEquals("bt.com", cookie.getDomain());        Assert.assertTrue(((BasicClientCookie) cookie).containsAttribute(ClientCookie.DOMAIN_ATTR));    }}
0
public void testAddCookieFromHeaderWithNoWildcard() throws Exception
{    URL url = new URL("https://subdomain.bt.com/page");    String headerLine = "SMTRYNO=1; path=/";    man.addCookieFromHeader(headerLine, url);    Assert.assertEquals(1, man.getCookieCount());    HC4CookieHandler cookieHandler = (HC4CookieHandler) man.getCookieHandler();    List<org.apache.http.cookie.Cookie> cookies = cookieHandler.getCookiesForUrl(man.getCookies(), url, CookieManager.ALLOW_VARIABLE_COOKIES);    Assert.assertEquals(1, cookies.size());    for (org.apache.http.cookie.Cookie cookie : cookies) {                Assert.assertEquals("subdomain.bt.com", cookie.getDomain());        Assert.assertFalse(((BasicClientCookie) cookie).containsAttribute(ClientCookie.DOMAIN_ATTR));    }        URL urlMainDomain = new URL("https://www.bt.com/page");    cookies = cookieHandler.getCookiesForUrl(man.getCookies(), urlMainDomain, CookieManager.ALLOW_VARIABLE_COOKIES);    Assert.assertEquals(0, cookies.size());}
0
public void testAddCookieFromHeaderWithWildcard2() throws Exception
{    URL url = new URL("https://www.bt.com/page");    String headerLine = "SMTRYNO=1; path=/; domain=.bt.com";    man.addCookieFromHeader(headerLine, url);    Assert.assertEquals(1, man.getCookieCount());    HC4CookieHandler cookieHandler = (HC4CookieHandler) man.getCookieHandler();    URL urlSubDomain = new URL("https://subdomain.bt.com/page");    List<org.apache.http.cookie.Cookie> cookies = cookieHandler.getCookiesForUrl(man.getCookies(), urlSubDomain, CookieManager.ALLOW_VARIABLE_COOKIES);    Assert.assertEquals(1, cookies.size());    for (org.apache.http.cookie.Cookie cookie : cookies) {                Assert.assertEquals("bt.com", cookie.getDomain());        Assert.assertTrue(((BasicClientCookie) cookie).containsAttribute(ClientCookie.DOMAIN_ATTR));    }}
0
public void testBug56358() throws Exception
{    URL url = new URL("http://remote.com:10008/get/cookie");    String headerLine = "test=value;Max-age=120;path=/;Version=1";    man.setCookiePolicy(CookieSpecs.STANDARD);    man.addCookieFromHeader(headerLine, url);    Assert.assertEquals(1, man.getCookieCount());    HC4CookieHandler cookieHandler = (HC4CookieHandler) man.getCookieHandler();    URL urlSameDomainDifferentPort = new URL("http://remote.com:10001/test/me");    List<org.apache.http.cookie.Cookie> cookies = cookieHandler.getCookiesForUrl(man.getCookies(), urlSameDomainDifferentPort, CookieManager.ALLOW_VARIABLE_COOKIES);    Assert.assertEquals(1, cookies.size());    for (org.apache.http.cookie.Cookie cookie : cookies) {                Assert.assertEquals("remote.com", cookie.getDomain());        Assert.assertEquals("test", cookie.getName());    }}
0
public void testCrossDomainHandling() throws Exception
{    URL url = new URL("http://jakarta.apache.org/");        assertEquals(0, man.getCookieCount());    man.addCookieFromHeader("test=2;domain=.hc.apache.org", url);        assertEquals(0, man.getCookieCount());    man.addCookieFromHeader("test=1;domain=.jakarta.apache.org", url);        assertEquals(1, man.getCookieCount());}
0
public void testSimilarHostNames() throws Exception
{    URL url = new URL("http://ache.org/");    man.addCookieFromHeader("test=1", url);    url = new URL("http://jakarta.apache.org/");    assertNull(man.getCookieHeaderForURL(url));}
0
public void testSessionCookie() throws Exception
{    URL url = new URL("http://a.b.c/");    man.addCookieFromHeader("test=1", url);    String s = man.getCookieHeaderForURL(url);    assertNotNull(s);    assertEquals("test=1", s);}
0
public void testCookieWithEquals() throws Exception
{    URL url = new URL("http://a.b.c/");    man.addCookieFromHeader("NSCP_USER_LOGIN1_NEW=SHA=xxxxx", url);    String s = man.getCookieHeaderForURL(url);    assertNotNull(s);    assertEquals("NSCP_USER_LOGIN1_NEW=SHA=xxxxx", s);    Cookie c = man.get(0);    assertEquals("NSCP_USER_LOGIN1_NEW", c.getName());    assertEquals("SHA=xxxxx", c.getValue());}
0
public void testOldCookie() throws Exception
{    URL url = new URL("http://a.b.c/");    man.addCookieFromHeader("test=1; expires=Mon, 01-Jan-1990 00:00:00 GMT", url);    String s = man.getCookieHeaderForURL(url);    assertNull(s);}
0
public void testNewCookie() throws Exception
{    URL url = new URL("http://a.b.c/");    man.addCookieFromHeader("test=1; expires=Mon, 01-Jan-2990 00:00:00 GMT", url);    assertEquals(1, man.getCookieCount());    String s = man.getCookieHeaderForURL(url);    assertNotNull(s);    assertEquals("test=1", s);}
0
public void testHttpOnlyCookie() throws Exception
{    URL url = new URL("http://a.b.c/");    man.addCookieFromHeader("mySASession=s%3AcafPSGf6UJguyhddGFFeLdHBy9CYbzIS.NhYyA26LGTAVoLxhCQUK%2F2Bs34MW5kGHmErKzG6r3XI; Path=/;" + " Expires=Tue, 07 Feb 2990 09:13:14 GMT; HttpOnly", url);    assertEquals(1, man.getCookieCount());    String s = man.getCookieHeaderForURL(url);    assertNotNull(s);    assertEquals("mySASession=s%3AcafPSGf6UJguyhddGFFeLdHBy9CYbzIS.NhYyA26LGTAVoLxhCQUK%2F2Bs34MW5kGHmErKzG6r3XI", s);}
0
public void testSecureCookieWithHttp() throws Exception
{    URL url = new URL("http://a.b.c/");    man.addCookieFromHeader("mySASession=s%3AcafPSGf6UJguyhddGFFeLdHBy9CYbzIS.NhYyA26LGTAVoLxhCQUK%2F2Bs34MW5kGHmErKzG6r3XI; Path=/;" + " Expires=Tue, 07 Feb 2990 09:13:14 GMT; HttpOnly; secure", url);    assertEquals(1, man.getCookieCount());    String s = man.getCookieHeaderForURL(url);    assertNull(s);}
0
public void testSecureCookieWithHttps() throws Exception
{    URL url = new URL("https://a.b.c/");    man.addCookieFromHeader("mySASession=s%3AcafPSGf6UJguyhddGFFeLdHBy9CYbzIS.NhYyA26LGTAVoLxhCQUK%2F2Bs34MW5kGHmErKzG6r3XI; Path=/;" + " Expires=Tue, 07 Feb 2990 09:13:14 GMT; HttpOnly; secure", url);    assertEquals(1, man.getCookieCount());    String s = man.getCookieHeaderForURL(url);    assertNotNull(s);    assertEquals("mySASession=s%3AcafPSGf6UJguyhddGFFeLdHBy9CYbzIS.NhYyA26LGTAVoLxhCQUK%2F2Bs34MW5kGHmErKzG6r3XI", s);}
0
public void testCookies1() throws Exception
{    man.setCookiePolicy(CookieSpecs.DEFAULT);        man.testStarted();    URL url = new URL("http://a.b.c.d/testCookies1");    man.addCookieFromHeader("test1=1; comment=\"how,now\", test2=2; version=1", url);    assertEquals(2, man.getCookieCount());    String s = man.getCookieHeaderForURL(url);    assertNotNull(s);    assertEquals("test1=1; test2=2", s);}
0
public void testCookies2() throws Exception
{    URL url = new URL("https://a.b.c.d/testCookies2");                    man.addCookieFromHeader("test1=1;secure, test2=2;secure", url);    assertEquals(1, man.getCookieCount());    String s = man.getCookieHeaderForURL(url);    assertNotNull(s);    assertEquals("test1=1", s);}
0
public void testCookies3() throws Exception
{    man.setCookiePolicy(CookieSpecs.DEFAULT);        man.testStarted();    URL url = new URL("https://a.b.c.d/testCookies2");    man.addCookieFromHeader("test1=1;secure, test2=2;secure; version=1", url);    assertEquals(2, man.getCookieCount());    String s = man.getCookieHeaderForURL(url);    assertNotNull(s);    assertEquals("test1=1; test2=2", s);}
0
public void testDuplicateCookie() throws Exception
{    URL url = new URL("http://a.b.c/");    man.addCookieFromHeader("test=1", url);    String s = man.getCookieHeaderForURL(url);    assertNotNull(s);    assertEquals("test=1", s);    man.addCookieFromHeader("test=2", url);    s = man.getCookieHeaderForURL(url);    assertNotNull(s);    assertEquals("test=2", s);}
0
public void testDuplicateCookie2() throws Exception
{    URL url = new URL("http://a.b.c/");    man.addCookieFromHeader("test=1", url);    man.addCookieFromHeader("test2=a", url);    String s = man.getCookieHeaderForURL(url);    assertNotNull(s);        assertEquals("test=1; test2=a", s);    man.addCookieFromHeader("test=2", url);    man.addCookieFromHeader("test3=b", url);    s = man.getCookieHeaderForURL(url);    assertNotNull(s);        assertEquals("test2=a; test=2; test3=b", s);}
0
public void testMissingPath0() throws Exception
{    URL url = new URL("http://d.e.f/goo.html");    man.addCookieFromHeader("test=moo", url);    String s = man.getCookieHeaderForURL(new URL("http://d.e.f/"));    assertNotNull(s);    assertEquals("test=moo", s);}
0
public void testMissingPath1() throws Exception
{    URL url = new URL("http://d.e.f/moo.html");    man.addCookieFromHeader("test=moo", url);    String s = man.getCookieHeaderForURL(new URL("http://d.e.f/goo.html"));    assertNotNull(s);    assertEquals("test=moo", s);}
0
public void testRootPath0() throws Exception
{    URL url = new URL("http://d.e.f/goo.html");    man.addCookieFromHeader("test=moo;path=/", url);    String s = man.getCookieHeaderForURL(new URL("http://d.e.f/"));    assertNotNull(s);    assertEquals("test=moo", s);}
0
public void testRootPath1() throws Exception
{    URL url = new URL("http://d.e.f/moo.html");    man.addCookieFromHeader("test=moo;path=/", url);    String s = man.getCookieHeaderForURL(new URL("http://d.e.f/goo.html"));    assertNotNull(s);    assertEquals("test=moo", s);}
0
public void testCookieMatching() throws Exception
{    URL url = new URL("http://a.b.c:8080/TopDir/fred.jsp");    man.addCookieFromHeader("ID=abcd; Path=/TopDir", url);    String s = man.getCookieHeaderForURL(url);    assertNotNull(s);    assertEquals("ID=abcd", s);    url = new URL("http://a.b.c:8080/other.jsp");    s = man.getCookieHeaderForURL(url);    assertNull(s);    url = new URL("http://a.b.c:8080/TopDir/suub/another.jsp");    s = man.getCookieHeaderForURL(url);    assertNotNull(s);    url = new URL("http://a.b.c:8080/TopDir");    s = man.getCookieHeaderForURL(url);    assertNotNull(s);    url = new URL("http://a.b.d/");    s = man.getCookieHeaderForURL(url);    assertNull(s);}
0
public void testCookieOrdering1() throws Exception
{    URL url = new URL("http://order.now/sub1/moo.html");    man.addCookieFromHeader("test1=moo1;path=/", url);        man.addCookieFromHeader("test2=moo2;path=/sub1", url);    man.addCookieFromHeader("test2=moo3;path=/", url);    assertEquals(3, man.getCookieCount());    String s = man.getCookieHeaderForURL(url);    assertNotNull(s);}
0
public void testCookieOrdering2() throws Exception
{    URL url = new URL("http://order.now/sub1/moo.html");    man.addCookieFromHeader("test1=moo1;", url);    man.addCookieFromHeader("test2=moo2;path=/sub1", url);    man.addCookieFromHeader("test2=moo3;path=/", url);    assertEquals(3, man.getCookieCount());        assertEquals("/sub1", man.get(0).getPath());    assertEquals("/sub1", man.get(1).getPath());    assertEquals("/", man.get(2).getPath());    String s = man.getCookieHeaderForURL(url);    assertNotNull(s);    HC4CookieHandler cookieHandler = (HC4CookieHandler) man.getCookieHandler();    List<org.apache.http.cookie.Cookie> c = cookieHandler.getCookiesForUrl(man.getCookies(), url, CookieManager.ALLOW_VARIABLE_COOKIES);    assertEquals("/sub1", c.get(0).getPath());    assertFalse(((BasicClientCookie) c.get(0)).containsAttribute(ClientCookie.PATH_ATTR));    assertEquals("/sub1", c.get(1).getPath());    assertTrue(((BasicClientCookie) c.get(1)).containsAttribute(ClientCookie.PATH_ATTR));    assertEquals("/", c.get(2).getPath());    assertEquals("test1=moo1; test2=moo2; test2=moo3", s);}
0
public void testCookiePolicy2109() throws Exception
{    man.setCookiePolicy(org.apache.http.client.params.CookiePolicy.RFC_2109);        man.testStarted();    URL url = new URL("http://order.now/sub1/moo.html");    man.addCookieFromHeader("test1=moo1;", url);    man.addCookieFromHeader("test2=moo2;path=/sub1", url);    man.addCookieFromHeader("test2=moo3;path=/", url);    assertEquals(3, man.getCookieCount());    assertEquals("/sub1", man.get(0).getPath());    assertEquals("/sub1", man.get(1).getPath());    assertEquals("/", man.get(2).getPath());    String s = man.getCookieHeaderForURL(url);    assertNotNull(s);    HC4CookieHandler cookieHandler = (HC4CookieHandler) man.getCookieHandler();    List<org.apache.http.cookie.Cookie> c = cookieHandler.getCookiesForUrl(man.getCookies(), url, CookieManager.ALLOW_VARIABLE_COOKIES);    assertEquals("/sub1", c.get(0).getPath());    assertFalse(((BasicClientCookie) c.get(0)).containsAttribute(ClientCookie.PATH_ATTR));    assertEquals("/sub1", c.get(1).getPath());    assertTrue(((BasicClientCookie) c.get(1)).containsAttribute(ClientCookie.PATH_ATTR));    assertEquals("/", c.get(2).getPath());    assertTrue(((BasicClientCookie) c.get(2)).containsAttribute(ClientCookie.PATH_ATTR));    assertEquals("$Version=0; test1=moo1; test2=moo2; $Path=/sub1; test2=moo3; $Path=/", s);}
0
public void testCookiePolicyNetscape() throws Exception
{    man.setCookiePolicy(CookieSpecs.NETSCAPE);        man.testStarted();    URL url = new URL("http://www.order.now/sub1/moo.html");    man.addCookieFromHeader("test1=moo1;", url);    man.addCookieFromHeader("test2=moo2;path=/sub1", url);    man.addCookieFromHeader("test2=moo3;path=/", url);    assertEquals(3, man.getCookieCount());    assertEquals("/sub1", man.get(0).getPath());    assertEquals("/sub1", man.get(1).getPath());    assertEquals("/", man.get(2).getPath());    String s = man.getCookieHeaderForURL(url);    assertNotNull(s);    HC4CookieHandler cookieHandler = (HC4CookieHandler) man.getCookieHandler();    List<org.apache.http.cookie.Cookie> c = cookieHandler.getCookiesForUrl(man.getCookies(), url, CookieManager.ALLOW_VARIABLE_COOKIES);    assertEquals("/sub1", c.get(0).getPath());    assertFalse(((BasicClientCookie) c.get(0)).containsAttribute(ClientCookie.PATH_ATTR));    assertEquals("/sub1", c.get(1).getPath());    assertTrue(((BasicClientCookie) c.get(1)).containsAttribute(ClientCookie.PATH_ATTR));    assertEquals("/", c.get(2).getPath());    assertTrue(((BasicClientCookie) c.get(2)).containsAttribute(ClientCookie.PATH_ATTR));    assertEquals("test1=moo1; test2=moo2; test2=moo3", s);}
0
public void testCookiePolicyIgnore() throws Exception
{    man.setCookiePolicy(CookieSpecs.IGNORE_COOKIES);        man.testStarted();    URL url = new URL("http://order.now/sub1/moo.html");    man.addCookieFromHeader("test1=moo1;", url);    man.addCookieFromHeader("test2=moo2;path=/sub1", url);    man.addCookieFromHeader("test2=moo3;path=/", url);        assertEquals(0, man.getCookieCount());    Cookie cc;    cc = new Cookie("test1", "moo1", null, "/sub1", false, 0, false, false);    man.add(cc);    cc = new Cookie("test2", "moo2", null, "/sub1", false, 0, true, false);    man.add(cc);    cc = new Cookie("test3", "moo3", null, "/", false, 0, false, false);    man.add(cc);    assertEquals(3, man.getCookieCount());    assertEquals("/sub1", man.get(0).getPath());    assertEquals("/sub1", man.get(1).getPath());    assertEquals("/", man.get(2).getPath());    String s = man.getCookieHeaderForURL(url);            assertNull(s);    HC4CookieHandler cookieHandler = (HC4CookieHandler) man.getCookieHandler();    List<org.apache.http.cookie.Cookie> c = cookieHandler.getCookiesForUrl(man.getCookies(), url, CookieManager.ALLOW_VARIABLE_COOKIES);        assertNotNull(c);            assertEquals(0, c.size());}
0
public void testLoad() throws Exception
{    assertEquals(0, man.getCookieCount());    man.addFile(findTestPath("testfiles/cookies.txt"));    assertEquals(3, man.getCookieCount());    int num = 0;    assertEquals("name", man.get(num).getName());    assertEquals("value", man.get(num).getValue());    assertEquals("path", man.get(num).getPath());    assertEquals("domain", man.get(num).getDomain());    assertTrue(man.get(num).getSecure());    assertEquals(num, man.get(num).getExpires());    num++;    assertEquals("name2", man.get(num).getName());    assertEquals("value2", man.get(num).getValue());    assertEquals("/", man.get(num).getPath());    assertEquals("", man.get(num).getDomain());    assertFalse(man.get(num).getSecure());    assertEquals(0, man.get(num).getExpires());    num++;    assertEquals("a", man.get(num).getName());    assertEquals("b", man.get(num).getValue());    assertEquals("d", man.get(num).getPath());    assertEquals("c", man.get(num).getDomain());    assertTrue(man.get(num).getSecure());        assertEquals(0, man.get(num).getExpires());}
0
public static Test suite()
{    return new TestSetup(new TestSuite(TestHTTPMirrorThread.class)) {        private HttpMirrorServer httpServer;        @Override        protected void setUp() throws Exception {            httpServer = startHttpMirror(HTTP_SERVER_PORT);        }        @Override        protected void tearDown() throws Exception {                        httpServer.stopServer();            httpServer = null;        }    };}
0
protected void setUp() throws Exception
{    httpServer = startHttpMirror(HTTP_SERVER_PORT);}
0
protected void tearDown() throws Exception
{        httpServer.stopServer();    httpServer = null;}
0
public static HttpMirrorServer startHttpMirror(int port) throws Exception
{    HttpMirrorServer server;    server = new HttpMirrorServer(port);    server.start();    Exception e;    for (int i = 0; i < 10; i++) {                try {            Thread.sleep(100);        } catch (InterruptedException ignored) {        }        e = server.getException();        if (e != null) {                        throw new Exception("Could not start mirror server on port: " + port + ". " + e);        }        if (server.isAlive()) {                        break;        }    }    if (!server.isAlive()) {        throw new Exception("Could not start mirror server on port: " + port);    }    return server;}
0
public void testGetRequest() throws Exception
{        Socket clientSocket = new Socket("localhost", HTTP_SERVER_PORT);    OutputStream outputStream = clientSocket.getOutputStream();    InputStream inputStream = clientSocket.getInputStream();        ByteArrayOutputStream bos = new ByteArrayOutputStream();        bos.write("GET / HTTP 1.1".getBytes(ISO_8859_1));    bos.write(CRLF);    bos.write("Host: localhost".getBytes(ISO_8859_1));    bos.write(CRLF);    bos.write(CRLF);    bos.close();    outputStream.write(bos.toByteArray());        ByteArrayOutputStream response = new ByteArrayOutputStream();    byte[] buffer = new byte[1024];    int length;    while ((length = inputStream.read(buffer)) != -1) {        response.write(buffer, 0, length);    }    response.close();    byte[] mirroredResponse = getMirroredResponse(response.toByteArray());        checkArraysHaveSameContent(bos.toByteArray(), mirroredResponse);        outputStream.close();    inputStream.close();    clientSocket.close();            clientSocket = new Socket("localhost", HTTP_SERVER_PORT);    outputStream = clientSocket.getOutputStream();    inputStream = clientSocket.getInputStream();        bos = new ByteArrayOutputStream();        bos.write("GET / HTTP 1.1".getBytes(ISO_8859_1));    bos.write(CRLF);            bos.close();    byte[] firstChunk = bos.toByteArray();    outputStream.write(firstChunk);    Thread.sleep(200);        bos = new ByteArrayOutputStream();    bos.write("Host: localhost".getBytes(ISO_8859_1));    bos.write(CRLF);    bos.write(CRLF);    bos.close();    byte[] secondChunk = bos.toByteArray();    outputStream.write(secondChunk);        response = new ByteArrayOutputStream();    buffer = new byte[1024];    while ((length = inputStream.read(buffer)) != -1) {        response.write(buffer, 0, length);    }    response.close();    mirroredResponse = getMirroredResponse(response.toByteArray());        bos = new ByteArrayOutputStream();    bos.write(firstChunk);    bos.write(secondChunk);    bos.close();        checkArraysHaveSameContent(bos.toByteArray(), mirroredResponse);        outputStream.close();    inputStream.close();    clientSocket.close();}
0
public void testPostRequest() throws Exception
{        Socket clientSocket = new Socket("localhost", HTTP_SERVER_PORT);    OutputStream outputStream = clientSocket.getOutputStream();    InputStream inputStream = clientSocket.getInputStream();        StringBuilder postBodyBuffer = new StringBuilder();    for (int i = 0; i < 1000; i++) {        postBodyBuffer.append("abc");    }    byte[] postBody = postBodyBuffer.toString().getBytes(ISO_8859_1);        ByteArrayOutputStream bos = new ByteArrayOutputStream();        bos.write("GET / HTTP 1.1".getBytes(ISO_8859_1));    bos.write(CRLF);    bos.write("Host: localhost".getBytes(ISO_8859_1));    bos.write(CRLF);    bos.write(("Content-type: text/plain; charset=" + ISO_8859_1).getBytes(ISO_8859_1));    bos.write(CRLF);    bos.write(("Content-length: " + postBody.length).getBytes(ISO_8859_1));    bos.write(CRLF);    bos.write(CRLF);    bos.write(postBody);    bos.close();        outputStream.write(bos.toByteArray());        ByteArrayOutputStream response = new ByteArrayOutputStream();    byte[] buffer = new byte[1024];    int length;    while ((length = inputStream.read(buffer)) != -1) {        response.write(buffer, 0, length);    }    response.close();    byte[] mirroredResponse = getMirroredResponse(response.toByteArray());        checkArraysHaveSameContent(bos.toByteArray(), mirroredResponse);        outputStream.close();    inputStream.close();    clientSocket.close();            clientSocket = new Socket("localhost", HTTP_SERVER_PORT);    outputStream = clientSocket.getOutputStream();    inputStream = clientSocket.getInputStream();        bos = new ByteArrayOutputStream();        bos.write("GET / HTTP 1.1".getBytes(ISO_8859_1));    bos.write(CRLF);    bos.write("Host: localhost".getBytes(ISO_8859_1));    bos.write(CRLF);    bos.write(("Content-type: text/plain; charset=" + ISO_8859_1).getBytes(ISO_8859_1));    bos.write(CRLF);    bos.write(("Content-length: " + postBody.length).getBytes(ISO_8859_1));    bos.write(CRLF);    bos.write(CRLF);    bos.close();        bos.close();    byte[] firstChunk = bos.toByteArray();    outputStream.write(firstChunk);    Thread.sleep(200);        byte[] secondChunk = postBody;    outputStream.write(secondChunk);        response = new ByteArrayOutputStream();    buffer = new byte[1024];    while ((length = inputStream.read(buffer)) != -1) {        response.write(buffer, 0, length);    }    response.close();    mirroredResponse = getMirroredResponse(response.toByteArray());        bos = new ByteArrayOutputStream();    bos.write(firstChunk);    bos.write(secondChunk);    bos.close();        checkArraysHaveSameContent(bos.toByteArray(), mirroredResponse);        outputStream.close();    inputStream.close();    clientSocket.close();                clientSocket = new Socket("localhost", HTTP_SERVER_PORT);    outputStream = clientSocket.getOutputStream();    inputStream = clientSocket.getInputStream();        postBodyBuffer = new StringBuilder();    for (int i = 0; i < 1000; i++) {        postBodyBuffer.append("\u0364\u00c5\u2052");    }    postBody = postBodyBuffer.toString().getBytes(UTF_8);        bos = new ByteArrayOutputStream();        bos.write("GET / HTTP 1.1".getBytes(ISO_8859_1));    bos.write(CRLF);    bos.write("Host: localhost".getBytes(ISO_8859_1));    bos.write(CRLF);    bos.write(("Content-type: text/plain; charset=" + UTF_8).getBytes(ISO_8859_1));    bos.write(CRLF);    bos.write(("Content-length: " + postBody.length).getBytes(ISO_8859_1));    bos.write(CRLF);    bos.write(CRLF);    bos.close();        bos.close();    firstChunk = bos.toByteArray();    outputStream.write(firstChunk);    Thread.sleep(200);        secondChunk = postBody;    outputStream.write(secondChunk);        response = new ByteArrayOutputStream();    buffer = new byte[1024];    while ((length = inputStream.read(buffer)) != -1) {        response.write(buffer, 0, length);    }    response.close();    mirroredResponse = getMirroredResponse(response.toByteArray());        bos = new ByteArrayOutputStream();    bos.write(firstChunk);    bos.write(secondChunk);    bos.close();        checkArraysHaveSameContent(bos.toByteArray(), mirroredResponse);        outputStream.close();    inputStream.close();    clientSocket.close();}
0
public void testStatus() throws Exception
{    URL url = new URL("http", "localhost", HTTP_SERVER_PORT, "/");    HttpURLConnection conn = (HttpURLConnection) url.openConnection();    conn.addRequestProperty("X-ResponseStatus", "302 Temporary Redirect");    conn.connect();    assertEquals(302, conn.getResponseCode());    assertEquals("Temporary Redirect", conn.getResponseMessage());}
0
public void testQueryStatus() throws Exception
{    URL url = new URI("http", null, "localhost", HTTP_SERVER_PORT, "/path", "status=303 See Other", null).toURL();    HttpURLConnection conn = (HttpURLConnection) url.openConnection();    conn.connect();    assertEquals(303, conn.getResponseCode());    assertEquals("See Other", conn.getResponseMessage());}
0
public void testQueryRedirect() throws Exception
{    URL url = new URI("http", null, "localhost", HTTP_SERVER_PORT, "/path", "redirect=/a/b/c/d?q", null).toURL();    HttpURLConnection conn = (HttpURLConnection) url.openConnection();    conn.setInstanceFollowRedirects(false);    conn.connect();    assertEquals(302, conn.getResponseCode());    assertEquals("Temporary Redirect", conn.getResponseMessage());    assertEquals("/a/b/c/d?q", conn.getHeaderField("Location"));}
0
public void testHeaders() throws Exception
{    URL url = new URL("http", "localhost", HTTP_SERVER_PORT, "/");    HttpURLConnection conn = (HttpURLConnection) url.openConnection();    conn.addRequestProperty("X-SetHeaders", "Location: /abcd|X-Dummy: none");    conn.connect();    assertEquals(200, conn.getResponseCode());    assertEquals("OK", conn.getResponseMessage());    assertEquals("/abcd", conn.getHeaderField("Location"));    assertEquals("none", conn.getHeaderField("X-Dummy"));}
0
public void testResponseLength() throws Exception
{    URL url = new URL("http", "localhost", HTTP_SERVER_PORT, "/");    HttpURLConnection conn = (HttpURLConnection) url.openConnection();    conn.addRequestProperty("X-ResponseLength", "10");    conn.connect();    final InputStream inputStream = conn.getInputStream();    assertEquals(10, IOUtils.toByteArray(inputStream).length);    inputStream.close();}
0
public void testCookie() throws Exception
{    URL url = new URL("http", "localhost", HTTP_SERVER_PORT, "/");    HttpURLConnection conn = (HttpURLConnection) url.openConnection();    conn.addRequestProperty("X-SetCookie", "four=2*2");    conn.connect();    assertEquals("four=2*2", conn.getHeaderField("Set-Cookie"));}
0
public void testSleep() throws Exception
{    URL url = new URL("http", "localhost", HTTP_SERVER_PORT, "/");    HttpURLConnection conn = (HttpURLConnection) url.openConnection();    conn.addRequestProperty("X-Sleep", "200");            long now = System.nanoTime();    conn.connect();    final InputStream inputStream = conn.getInputStream();        while (inputStream.read() != -1) {    }    inputStream.close();    final long elapsed = (System.nanoTime() - now) / 200000L;    assertTrue("Expected > 180 " + elapsed, elapsed >= 180);}
0
private void checkArraysHaveSameContent(byte[] expected, byte[] actual) throws UnsupportedEncodingException
{    if (expected != null && actual != null) {        if (expected.length != actual.length) {            System.out.println(">>>>>>>>>>>>>>>>>>>> (expected) : length " + expected.length);            System.out.println(new String(expected, "UTF-8"));            System.out.println("==================== (actual) : length " + actual.length);            System.out.println(new String(actual, "UTF-8"));            System.out.println("<<<<<<<<<<<<<<<<<<<<");            fail("arrays have different length, expected is " + expected.length + ", actual is " + actual.length);        } else {            for (int i = 0; i < expected.length; i++) {                if (expected[i] != actual[i]) {                    System.out.println(">>>>>>>>>>>>>>>>>>>> (expected) : length " + expected.length);                    System.out.println(new String(expected, 0, i + 1, ISO_8859_1));                    System.out.println("==================== (actual) : length " + actual.length);                    System.out.println(new String(actual, 0, i + 1, ISO_8859_1));                    System.out.println("<<<<<<<<<<<<<<<<<<<<");                    /*                                                for(int j = 0; j  < expected.length; j++) {                            System.out.print(expected[j] + " ");                        }                        System.out.println();                        for(int j = 0; j  < actual.length; j++) {                            System.out.print(actual[j] + " ");                        }                        System.out.println();*/                    fail("byte at position " + i + " is different, expected is " + expected[i] + ", actual is " + actual[i]);                }            }        }    } else {        fail("expected or actual byte arrays were null");    }}
0
private byte[] getMirroredResponse(byte[] allResponse)
{                int startOfMirrorResponse = 0;    for (int i = 0; i < allResponse.length; i++) {                if (allResponse[i] == 0x0d && allResponse[i + 1] == 0x0a && allResponse[i + 2] == 0x0d && allResponse[i + 3] == 0x0a) {            startOfMirrorResponse = i + 4;            break;        }    }    byte[] mirrorResponse = new byte[allResponse.length - startOfMirrorResponse];    System.arraycopy(allResponse, startOfMirrorResponse, mirrorResponse, 0, mirrorResponse.length);    return mirrorResponse;}
0
public void setUp()
{    jmctx = JMeterContextService.getContext();    parser.setThreadContext(jmctx);}
0
private void testProcessingHTMLFile(String HTMLFileName) throws Exception
{    File file = findTestFile("testfiles/load_bug_list.jmx");    HTTPSamplerBase config = (HTTPSamplerBase) SaveService.loadTree(file).getArray()[0];    config.setRunningVersion(true);    HTTPSampleResult result = new HTTPSampleResult();    file = findTestFile("testfiles/Load_JMeter_Page.jmx");    HTTPSamplerBase context = (HTTPSamplerBase) SaveService.loadTree(file).getArray()[0];    jmctx.setCurrentSampler(context);    jmctx.setCurrentSampler(config);    result.setResponseData(new TextFile(findTestFile(HTMLFileName)).getText(), null);    result.setSampleLabel(context.toString());    result.setSamplerData(context.toString());    result.setURL(new URL("http://bz.apache.org/fakepage.html"));    jmctx.setPreviousResult(result);    AnchorModifier modifier = new AnchorModifier();    modifier.setThreadContext(jmctx);    modifier.process();    assertEquals("http://bz.apache.org/bugzilla/buglist.cgi?" + "bug_status=NEW&bug_status=ASSIGNED&bug_status=REOPENED" + "&email1=&emailtype1=substring&emailassigned_to1=1" + "&email2=&emailtype2=substring&emailreporter2=1" + "&bugidtype=include&bug_id=&changedin=&votes=" + "&chfieldfrom=&chfieldto=Now&chfieldvalue=" + "&product=JMeter&short_desc=&short_desc_type=substring" + "&long_desc=&long_desc_type=substring&bug_file_loc=" + "&bug_file_loc_type=substring&keywords=" + "&keywords_type=anywords" + "&field0-0-0=noop&type0-0-0=noop&value0-0-0=" + "&cmdtype=doit&order=Reuse+same+sort+as+last+time", config.toString());    config.recoverRunningVersion();    assertEquals("http://bz.apache.org/bugzilla/buglist.cgi?" + "bug_status=.*&bug_status=.*&bug_status=.*&email1=" + "&emailtype1=substring&emailassigned_to1=1&email2=" + "&emailtype2=substring&emailreporter2=1" + "&bugidtype=include&bug_id=&changedin=&votes=" + "&chfieldfrom=&chfieldto=Now&chfieldvalue=" + "&product=JMeter&short_desc=&short_desc_type=substring" + "&long_desc=&long_desc_type=substring&bug_file_loc=" + "&bug_file_loc_type=substring&keywords=" + "&keywords_type=anywords&field0-0-0=noop" + "&type0-0-0=noop&value0-0-0=&cmdtype=doit" + "&order=Reuse+same+sort+as+last+time", config.toString());}
0
public void testModifySampler() throws Exception
{    testProcessingHTMLFile("testfiles/jmeter_home_page.html");}
0
public void testModifySamplerWithRelativeLink() throws Exception
{    testProcessingHTMLFile("testfiles/jmeter_home_page_with_relative_links.html");}
0
public void testModifySamplerWithBaseHRef() throws Exception
{    testProcessingHTMLFile("testfiles/jmeter_home_page_with_base_href.html");}
0
public void testNullSampler()
{    jmctx.setCurrentSampler(null);    jmctx.setPreviousResult(new HTTPSampleResult());        parser.process();}
0
public void testNullResult() throws Exception
{    jmctx.setCurrentSampler(makeContext("http://www.apache.org/subdir/previous.html"));    jmctx.setPreviousResult(null);        parser.process();}
0
public void testWrongResultClass() throws Exception
{    jmctx.setCurrentSampler(makeContext("http://www.apache.org/subdir/previous.html"));    jmctx.setPreviousResult(new SampleResult());        parser.process();}
0
public void testSimpleParse() throws Exception
{    HTTPSamplerBase config = makeUrlConfig(".*/index\\.html");    HTTPSamplerBase context = makeContext("http://www.apache.org/subdir/previous.html");    String responseText = "<html><head><title>Test page</title></head><body>" + "<a href=\"index.html\">Goto index page</a></body></html>";    HTTPSampleResult result = new HTTPSampleResult();    jmctx.setCurrentSampler(context);    jmctx.setCurrentSampler(config);    result.setResponseData(responseText, null);    result.setSampleLabel(context.toString());    result.setSamplerData(context.toString());    result.setURL(context.getUrl());    jmctx.setPreviousResult(result);    parser.process();    assertEquals("http://www.apache.org/subdir/index.html", config.getUrl().toString());}
0
public void testSimpleParse1() throws Exception
{    HTTPSamplerBase config = makeUrlConfig(".*/index\\.html");    config.setProtocol(HTTPConstants.PROTOCOL_HTTPS);    config.setPort(HTTPConstants.DEFAULT_HTTPS_PORT);    HTTPSamplerBase context = makeContext("https://www.apache.org/subdir/previous.html");    String responseText = "<html><head><title>Test page</title></head><body>" + "<a href=\"index.html\">Goto index page</a></body></html>";    HTTPSampleResult result = new HTTPSampleResult();    jmctx.setCurrentSampler(context);    jmctx.setCurrentSampler(config);    result.setResponseData(responseText, null);    result.setSampleLabel(context.toString());    result.setSamplerData(context.toString());    result.setURL(context.getUrl());    jmctx.setPreviousResult(result);    parser.process();    assertEquals("https://www.apache.org/subdir/index.html", config.getUrl().toString());}
0
public void testSimpleParse2() throws Exception
{    HTTPSamplerBase config = makeUrlConfig("/index\\.html");    HTTPSamplerBase context = makeContext("http://www.apache.org/subdir/previous.html");    String responseText = "<html><head><title>Test page</title></head><body>" + "<a href=\"/index.html\">Goto index page</a>" + "hfdfjiudfjdfjkjfkdjf" + "<b>bold text</b><a href=lowerdir/index.html>lower</a>" + "</body></html>";    HTTPSampleResult result = new HTTPSampleResult();    result.setResponseData(responseText, null);    result.setSampleLabel(context.toString());    result.setURL(context.getUrl());    jmctx.setCurrentSampler(context);    jmctx.setCurrentSampler(config);    jmctx.setPreviousResult(result);    parser.process();    String newUrl = config.getUrl().toString();    assertTrue("http://www.apache.org/index.html".equals(newUrl) || "http://www.apache.org/subdir/lowerdir/index.html".equals(newUrl));}
0
public void testSimpleParse3() throws Exception
{    HTTPSamplerBase config = makeUrlConfig(".*index.*");    config.getArguments().addArgument("param1", "value1");    HTTPSamplerBase context = makeContext("http://www.apache.org/subdir/previous.html");    String responseText = "<html><head><title>Test page</title></head><body>" + "<a href=\"/home/index.html?param1=value1\">" + "Goto index page</a></body></html>";    HTTPSampleResult result = new HTTPSampleResult();    result.setResponseData(responseText, null);    result.setSampleLabel(context.toString());    result.setURL(context.getUrl());    jmctx.setCurrentSampler(context);    jmctx.setCurrentSampler(config);    jmctx.setPreviousResult(result);    parser.process();    String newUrl = config.getUrl().toString();    assertEquals("http://www.apache.org/home/index.html?param1=value1", newUrl);}
0
public void testSimpleParse4() throws Exception
{    HTTPSamplerBase config = makeUrlConfig("/subdir/index\\..*");    HTTPSamplerBase context = makeContext("http://www.apache.org/subdir/previous.html");    String responseText = "<html><head><title>Test page</title></head><body>" + "<A HREF=\"index.html\">Goto index page</A></body></html>";    HTTPSampleResult result = new HTTPSampleResult();    result.setResponseData(responseText, null);    result.setSampleLabel(context.toString());    result.setURL(context.getUrl());    jmctx.setCurrentSampler(context);    jmctx.setCurrentSampler(config);    jmctx.setPreviousResult(result);    parser.process();    String newUrl = config.getUrl().toString();    assertEquals("http://www.apache.org/subdir/index.html", newUrl);}
0
public void testSimpleParse5() throws Exception
{    HTTPSamplerBase config = makeUrlConfig("/subdir/index\\.h.*");    HTTPSamplerBase context = makeContext("http://www.apache.org/subdir/one/previous.html");    String responseText = "<html><head><title>Test page</title></head><body>" + "<a href=\"../index.html\">Goto index page</a></body></html>";    HTTPSampleResult result = new HTTPSampleResult();    result.setResponseData(responseText, null);    result.setSampleLabel(context.toString());    result.setURL(context.getUrl());    jmctx.setCurrentSampler(context);    jmctx.setCurrentSampler(config);    jmctx.setPreviousResult(result);    parser.process();    String newUrl = config.getUrl().toString();    assertEquals("http://www.apache.org/subdir/index.html", newUrl);}
0
public void testFailSimpleParse1() throws Exception
{    HTTPSamplerBase config = makeUrlConfig(".*index.*?param2=.+1");    HTTPSamplerBase context = makeContext("http://www.apache.org/subdir/previous.html");    String responseText = "<html><head><title>Test page</title></head><body>" + "<a href=\"/home/index.html?param1=value1\">" + "Goto index page</a></body></html>";    HTTPSampleResult result = new HTTPSampleResult();    String newUrl = config.getUrl().toString();    result.setResponseData(responseText, null);    result.setSampleLabel(context.toString());    result.setURL(context.getUrl());    jmctx.setCurrentSampler(context);    jmctx.setCurrentSampler(config);    jmctx.setPreviousResult(result);    parser.process();    assertEquals(newUrl, config.getUrl().toString());}
0
public void testFailSimpleParse3() throws Exception
{    HTTPSamplerBase config = makeUrlConfig("/home/index.html");    HTTPSamplerBase context = makeContext("http://www.apache.org/subdir/previous.html");    String responseText = "<html><head><title>Test page</title></head><body>" + "<a href=\"/home/index.html?param1=value1\">" + "Goto index page</a></body></html>";    HTTPSampleResult result = new HTTPSampleResult();    String newUrl = config.getUrl().toString();    result.setResponseData(responseText, null);    result.setSampleLabel(context.toString());    result.setURL(context.getUrl());    jmctx.setCurrentSampler(context);    jmctx.setCurrentSampler(config);    jmctx.setPreviousResult(result);    parser.process();    assertEquals(newUrl + "?param1=value1", config.getUrl().toString());}
0
public void testFailSimpleParse2() throws Exception
{    HTTPSamplerBase config = makeUrlConfig(".*login\\.html");    HTTPSamplerBase context = makeContext("http://www.apache.org/subdir/previous.html");    String responseText = "<html><head><title>Test page</title></head><body>" + "<a href=\"/home/index.html?param1=value1\">" + "Goto index page</a></body></html>";    HTTPSampleResult result = new HTTPSampleResult();    result.setResponseData(responseText, null);    result.setSampleLabel(context.toString());    result.setURL(context.getUrl());    jmctx.setCurrentSampler(context);    jmctx.setPreviousResult(result);    parser.process();    String newUrl = config.getUrl().toString();    assertNotEquals("http://www.apache.org/home/index.html?param1=value1", newUrl);    assertEquals(config.getUrl().toString(), newUrl);}
0
public void testSimpleFormParse() throws Exception
{    HTTPSamplerBase config = makeUrlConfig(".*index.html");    config.addArgument("test", "g.*");    config.setMethod(HTTPConstants.POST);    HTTPSamplerBase context = makeContext("http://www.apache.org/subdir/previous.html");    String responseText = "<html><head><title>Test page</title></head><body>" + "<form action=\"index.html\" method=\"POST\">" + "<input type=\"checkbox\" name=\"test\"" + " value=\"goto\">Goto index page</form></body></html>";    HTTPSampleResult result = new HTTPSampleResult();    result.setResponseData(responseText, null);    result.setSampleLabel(context.toString());    result.setURL(context.getUrl());    jmctx.setCurrentSampler(context);    jmctx.setCurrentSampler(config);    jmctx.setPreviousResult(result);    parser.process();    assertEquals("http://www.apache.org/subdir/index.html", config.getUrl().toString());    assertEquals("test=goto", config.getQueryString());}
0
public void testBadCharParse() throws Exception
{    HTTPSamplerBase config = makeUrlConfig(".*index.html");    config.addArgument("te$st", "g.*");    config.setMethod(HTTPConstants.POST);    HTTPSamplerBase context = makeContext("http://www.apache.org/subdir/previous.html");    String responseText = "<html><head><title>Test page</title></head><body>" + "<form action=\"index.html\" method=\"POST\">" + "<input type=\"checkbox\" name=\"te$st\"" + " value=\"goto\">Goto index page</form></body></html>";    HTTPSampleResult result = new HTTPSampleResult();    result.setResponseData(responseText, null);    result.setSampleLabel(context.toString());    result.setURL(context.getUrl());    jmctx.setCurrentSampler(context);    jmctx.setCurrentSampler(config);    jmctx.setPreviousResult(result);    parser.process();    assertEquals("http://www.apache.org/subdir/index.html", config.getUrl().toString());    assertEquals("te%24st=goto", config.getQueryString());}
0
public void testSpecialCharParse() throws Exception
{        String specialChars = "-_.!~*'()%25";    String htmlEncodedFixture = URLEncoder.encode(specialChars, StandardCharsets.UTF_8.name());    HTTPSamplerBase config = makeUrlConfig(".*index.html");    config.addArgument("test", ".*");    config.setMethod(HTTPConstants.POST);    HTTPSamplerBase context = makeContext("http://www.apache.org/subdir/previous.html");    String responseText = "<html><head><title>Test page</title></head><body>" + "<form action=\"index.html\" method=\"POST\">" + "<input type=\"hidden\" name=\"test\"" + " value=\"" + htmlEncodedFixture + "\">Goto index page</form></body></html>";    HTTPSampleResult result = new HTTPSampleResult();    result.setResponseData(responseText, null);    result.setSampleLabel(context.toString());    result.setURL(context.getUrl());    jmctx.setCurrentSampler(context);    jmctx.setCurrentSampler(config);    jmctx.setPreviousResult(result);    parser.process();    assertEquals("http://www.apache.org/subdir/index.html", config.getUrl().toString());    assertEquals("test=" + htmlEncodedFixture, config.getQueryString());}
0
private HTTPSamplerBase makeContext(String url) throws MalformedURLException
{    URL u = new URL(url);    HTTPSamplerBase context = new HTTPNullSampler();    context.setDomain(u.getHost());    context.setPath(u.getPath());    context.setPort(u.getPort());    context.setProtocol(u.getProtocol());    context.parseArguments(u.getQuery());    return context;}
0
private HTTPSamplerBase makeUrlConfig(String path)
{    HTTPSamplerBase config = new HTTPNullSampler();    config.setDomain("www.apache.org");    config.setMethod(HTTPConstants.GET);    config.setPath(path);    config.setPort(HTTPConstants.DEFAULT_HTTP_PORT);    config.setProtocol(HTTPConstants.PROTOCOL_HTTP);    return config;}
0
public void setUp()
{    context = JMeterContextService.getContext();    mod = new URLRewritingModifier();    mod.setThreadContext(context);}
0
public void testNonHTTPSampler() throws Exception
{    Sampler sampler = new NullSampler();    response = new SampleResult();    context.setCurrentSampler(sampler);    context.setPreviousResult(response);    mod.process();}
0
public void testGrabSessionId() throws Exception
{    String html = "location: http://server.com/index.html" + "?session_id=jfdkjdkf%20jddkfdfjkdjfdf%22;";    response = new SampleResult();    response.setResponseData(html, null);    mod.setArgumentName("session_id");    HTTPSamplerBase sampler = createSampler();    sampler.addArgument("session_id", "adfasdfdsafasdfasd");    context.setCurrentSampler(sampler);    context.setPreviousResult(response);    mod.process();    Arguments args = sampler.getArguments();    assertEquals("jfdkjdkf jddkfdfjkdjfdf\"", ((Argument) args.getArguments().get(0).getObjectValue()).getValue());    assertEquals("http://server.com/index.html?" + "session_id=jfdkjdkf+jddkfdfjkdjfdf%22", sampler.toString());}
0
public void testGrabSessionId2() throws Exception
{    String html = "<a href=\"http://server.com/index.html?" + "session_id=jfdkjdkfjddkfdfjkdjfdf\">";    response = new SampleResult();    response.setResponseData(html, null);    mod.setArgumentName("session_id");    HTTPSamplerBase sampler = createSampler();    context.setCurrentSampler(sampler);    context.setPreviousResult(response);    mod.process();    Arguments args = sampler.getArguments();    assertEquals("jfdkjdkfjddkfdfjkdjfdf", ((Argument) args.getArguments().get(0).getObjectValue()).getValue());}
0
private HTTPSamplerBase createSampler()
{    HTTPSamplerBase sampler = new HTTPNullSampler();    sampler.setDomain("server.com");    sampler.setPath("index.html");    sampler.setMethod(HTTPConstants.GET);    sampler.setProtocol("http");    return sampler;}
0
public void testGrabSessionId3() throws Exception
{    String html = "href='index.html?session_id=jfdkjdkfjddkfdfjkdjfdf'";    response = new SampleResult();    response.setResponseData(html, null);    mod.setArgumentName("session_id");    HTTPSamplerBase sampler = createSampler();    context.setCurrentSampler(sampler);    context.setPreviousResult(response);    mod.process();    Arguments args = sampler.getArguments();    assertEquals("jfdkjdkfjddkfdfjkdjfdf", ((Argument) args.getArguments().get(0).getObjectValue()).getValue());}
0
public void testGrabSessionId6() throws Exception
{    String html = "location: http://server.com/index.html" + "?session_id=bonjour+monsieur";    response = new SampleResult();    response.setResponseData(html, null);    mod.setArgumentName("session_id");    HTTPSamplerBase sampler = createSampler();    sampler.addArgument("session_id", "adfasdfdsafasdfasd");    context.setCurrentSampler(sampler);    context.setPreviousResult(response);    mod.process();    Arguments args = sampler.getArguments();    assertEquals("bonjour monsieur", ((Argument) args.getArguments().get(0).getObjectValue()).getValue());    assertEquals("http://server.com/index.html?" + "session_id=bonjour+monsieur", sampler.toString());}
0
public void testGrabSessionId7() throws Exception
{    String html = "location: http://server.com/index.html" + "?session_id=bonjour+monsieur";    response = new SampleResult();    response.setResponseData(html, null);    mod.setArgumentName("session_id");    mod.setEncode(true);    HTTPSamplerBase sampler = createSampler();    sampler.addArgument("session_id", "adfasdfdsafasdfasd");    context.setCurrentSampler(sampler);    context.setPreviousResult(response);    mod.process();    Arguments args = sampler.getArguments();    assertEquals("bonjour+monsieur", ((Argument) args.getArguments().get(0).getObjectValue()).getValue());    assertEquals("http://server.com/index.html?" + "session_id=bonjour%2Bmonsieur", sampler.toString());}
0
public void testGrabSessionIdFromXMLNonPatExtension() throws Exception
{        String html = "<url>/some/path;jsessionid=123456789</url>";    response = new SampleResult();    response.setResponseData(html, null);    mod.setArgumentName("jsessionid");    HTTPSamplerBase sampler = createSampler();    context.setCurrentSampler(sampler);    context.setPreviousResult(response);    mod.process();    Arguments args = sampler.getArguments();    assertEquals("123456789", ((Argument) args.getArguments().get(0).getObjectValue()).getValue());}
0
public void testGrabSessionIdFromXMLPatExtension() throws Exception
{        String html = "<url>/some/path;jsessionid=123456789</url>";    response = new SampleResult();    response.setResponseData(html, null);    mod.setArgumentName("jsessionid");    mod.setPathExtension(true);    HTTPSamplerBase sampler = createSampler();    context.setCurrentSampler(sampler);    context.setPreviousResult(response);    mod.process();    assertEquals("index.html;jsessionid=123456789", sampler.getPath());}
0
public void testBug61314() throws Exception
{        String html = "<url>/some/path;jsessionid=123456789</url>";    response = new SampleResult();    response.setResponseData(html, null);    mod.setArgumentName("jsessionid");    mod.setPathExtension(true);    HTTPSamplerBase sampler = createSampler();    sampler.setPath("/urlRewrite/index;jsessionid=657CF77A86183868CF30AC36321394B7");    context.setCurrentSampler(sampler);    context.setPreviousResult(response);    mod.process();    assertEquals("/urlRewrite/index;jsessionid=123456789", sampler.getPath());}
0
public void testBug61314WithQuestionMark() throws Exception
{        String html = "<url>/some/path;jsessionid=123456789</url>";    response = new SampleResult();    response.setResponseData(html, null);    mod.setArgumentName("jsessionid");    mod.setPathExtension(true);    HTTPSamplerBase sampler = createSampler();    sampler.setPath("/urlRewrite/index;jsessionid=657CF77A86183868CF30AC36321394B7?toto=titi");    context.setCurrentSampler(sampler);    context.setPreviousResult(response);    mod.process();    assertEquals("/urlRewrite/index;jsessionid=123456789", sampler.getPath());}
0
public void testGrabSessionIdEndedInTab() throws Exception
{    String html = "href='index.html?session_id=jfdkjdkfjddkfdfjkdjfdf\t";    response = new SampleResult();    response.setResponseData(html, null);    mod.setArgumentName("session_id");    HTTPSamplerBase sampler = createSampler();    context.setCurrentSampler(sampler);    context.setPreviousResult(response);    mod.process();    Arguments args = sampler.getArguments();    assertEquals("jfdkjdkfjddkfdfjkdjfdf", ((Argument) args.getArguments().get(0).getObjectValue()).getValue());}
0
public void testGrabSessionId4() throws Exception
{    String html = "href='index.html;%24sid%24KQNq3AAADQZoEQAxlkX8uQV5bjqVBPbT'";    response = new SampleResult();    response.setResponseData(html, null);        mod.setArgumentName("%24sid%24");    mod.setPathExtension(true);    mod.setPathExtensionNoEquals(true);    HTTPSamplerBase sampler = createSampler();    context.setCurrentSampler(sampler);    context.setPreviousResult(response);    mod.process();    assertEquals("index.html;%24sid%24KQNq3AAADQZoEQAxlkX8uQV5bjqVBPbT", sampler.getPath());}
0
public void testGrabSessionId5() throws Exception
{    String html = "location: http://server.com/index.html" + "?session[33]=jfdkjdkf%20jddkfdfjkdjfdf%22;";    response = new SampleResult();    response.setResponseData(html, null);    mod.setArgumentName("session[33]");    HTTPSamplerBase sampler = createSampler();    sampler.addArgument("session[33]", "adfasdfdsafasdfasd");    context.setCurrentSampler(sampler);    context.setPreviousResult(response);    mod.process();    Arguments args = sampler.getArguments();    assertEquals("jfdkjdkf jddkfdfjkdjfdf\"", ((Argument) args.getArguments().get(0).getObjectValue()).getValue());    assertEquals("http://server.com/index.html?session%5B33%5D=jfdkjdkf+jddkfdfjkdjfdf%22", sampler.toString());}
0
public void testGrabSessionIdFromForm() throws Exception
{    String[] html = new String[] { "<input name=\"sid\" value=\"myId\">", "<input name='sid' value='myId'>", "<input value=\"myId\" NAME='sid'>", "<input VALUE='myId' name=\"sid\">", "<input blah blah value=\"myId\" yoda yoda NAME='sid'>", "<input type=\"HIDDEN\" name=\"sid\"      value=\"myId\">", "<input type=\"HIDDEN\" name=\"sid\"\tvalue=\"myId\">" };    for (int i = 0; i < html.length; i++) {        response = new SampleResult();        response.setResponseData(html[i], null);        URLRewritingModifier newMod = new URLRewritingModifier();        newMod.setThreadContext(context);        newMod.setArgumentName("sid");        newMod.setPathExtension(false);        HTTPSamplerBase sampler = createSampler();        context.setCurrentSampler(sampler);        context.setPreviousResult(response);        newMod.process();        Arguments args = sampler.getArguments();        assertEquals("For case i=" + i, "myId", ((Argument) args.getArguments().get(0).getObjectValue()).getValue());    }}
0
public void testGrabSessionIdURLinJSON() throws Exception
{    String html = "<a href=\"#\" onclick=\"$(\'frame\').src=\'/index?param1=bla&sessionid=xyzxyzxyz\\'";    response = new SampleResult();    response.setResponseData(html, null);    mod.setArgumentName("sessionid");    HTTPSamplerBase sampler = createSampler();    sampler.addArgument("sessionid", "xyzxyzxyz");    context.setCurrentSampler(sampler);    context.setPreviousResult(response);    mod.process();    Arguments args = sampler.getArguments();    assertEquals("xyzxyzxyz", ((Argument) args.getArguments().get(0).getObjectValue()).getValue());}
0
public void testCache() throws Exception
{    String[] html = new String[] { "<input name=\"sid\" value=\"myId\">",     "<html></html>" };    URLRewritingModifier newMod = new URLRewritingModifier();    newMod.setShouldCache(true);    newMod.setThreadContext(context);    newMod.setArgumentName("sid");    newMod.setPathExtension(false);    for (int i = 0; i < html.length; i++) {        response = new SampleResult();        response.setResponseData(html[i], null);        HTTPSamplerBase sampler = createSampler();        context.setCurrentSampler(sampler);        context.setPreviousResult(response);        newMod.process();        Arguments args = sampler.getArguments();        assertEquals("For case i=" + i, "myId", ((Argument) args.getArguments().get(0).getObjectValue()).getValue());    }}
0
public void testNoCache() throws Exception
{    String[] html = new String[] { "<input name=\"sid\" value=\"myId\">", "myId", "<html></html>", "" };    URLRewritingModifier newMod = new URLRewritingModifier();    newMod.setThreadContext(context);    newMod.setArgumentName("sid");    newMod.setPathExtension(false);    newMod.setShouldCache(false);    for (int i = 0; i < html.length / 2; i++) {        response = new SampleResult();        response.setResponseData(html[i * 2], null);        HTTPSamplerBase sampler = createSampler();        context.setCurrentSampler(sampler);        context.setPreviousResult(response);        newMod.process();        Arguments args = sampler.getArguments();        assertEquals("For case i=" + i, html[i * 2 + 1], ((Argument) args.getArguments().get(0).getObjectValue()).getValue());    }}
0
public Iterator<URL> getEmbeddedResourceURLs(String userAgent, byte[] responseData, URL baseUrl, String encoding) throws LinkExtractorParseException
{    throw new NotImplementedException("Test class");}
0
public boolean isReusable()
{    return false;}
0
public Iterator<URL> getEmbeddedResourceURLs(String userAgent, byte[] responseData, URL baseUrl, String encoding) throws LinkExtractorParseException
{    throw new NotImplementedException("Test class");}
0
public boolean isReusable()
{    return true;}
0
public void testReusableCache() throws Exception
{    assertSame(BaseParser.getParser(ReusableParser.class.getCanonicalName()), BaseParser.getParser(ReusableParser.class.getCanonicalName()));}
0
public void testNotReusableCache() throws Exception
{    assertNotSame(BaseParser.getParser(NotReusableParser.class.getCanonicalName()), BaseParser.getParser(NotReusableParser.class.getCanonicalName()));}
0
public static Collection<Object[]> params()
{    List<Object[]> result = new ArrayList<>();    for (HTMLParser parserToTest : Arrays.asList(new LagartoBasedHtmlParser(), new JsoupBasedHtmlParser())) {        for (Object[] data : Arrays.asList(new Object[] { parserToTest, "<body background='abc.png'/>", "http://example.org/abc.png" }, new Object[] { parserToTest, "<link href='abc.css' rel='stylesheet'/>", "http://example.org/abc.css" }, new Object[] { parserToTest, "<img src='abc.png'/>", "http://example.org/abc.png" }, new Object[] { parserToTest, "<base href='http://another.org'/><img src='one.png'/>", "http://another.org/one.png" }, new Object[] { parserToTest, "<applet code='abc.jar'/>", "http://example.org/abc.jar" }, new Object[] { parserToTest, "<object codebase='abc.jar' data='something'/>", "http://example.org/abc.jar,http://example.org/something" }, new Object[] { parserToTest, "<object data='something'/>", "http://example.org/something" }, new Object[] { parserToTest, "<object codebase='abc.jar'/>", "http://example.org/abc.jar" }, new Object[] { parserToTest, "<input type='image' src='foo'/>", "http://example.org/foo" }, new Object[] { parserToTest, "<input type='text' src='foo'/>", "" }, new Object[] { parserToTest, "<frameset><frame src='foo'/></frameset>", "http://example.org/foo" }, new Object[] { parserToTest, "<iframe src='foo'/>", "http://example.org/foo" }, new Object[] { parserToTest, "<embed src='foo'/>", "http://example.org/foo" }, new Object[] { parserToTest, "<bgsound src='foo'/>", "http://example.org/foo" }, new Object[] { parserToTest, "<anytag background='foo'/>", "http://example.org/foo" }, new Object[] { parserToTest, "<anytag style='foo: url(\"bar\")'/>", "http://example.org/bar" }, new Object[] { parserToTest, "<anytag style=\"foo: url('bar')'\"/>", "http://example.org/bar" }, new Object[] { parserToTest, "<link href='  abc\n.css  ' rel='stylesheet'/>", "http://example.org/abc.css" }, new Object[] { parserToTest, "<link href='  with spaces\n.css  ' rel='stylesheet'/>", "http://example.org/with spaces.css" }, new Object[] { parserToTest, "<link href='favicon.ico' rel='shortcut icon' type='image/vnd.microsoft.icon'/>", "http://example.org/favicon.ico" }, new Object[] { parserToTest, "<link href='favicon.ico' rel='icon' type='image/vnd.microsoft.icon'/>", "http://example.org/favicon.ico" }, new Object[] { parserToTest, "<embed src=''/>", "" }, new Object[] { parserToTest, "<embed src='  '/>", "" })) {            result.add(data);        }    }    return result;}
0
public void testGetEmbeddedResourceURLsStringByteArrayURLURLCollectionString() throws Exception
{    final ArrayList<URLString> c = new ArrayList<>();    parser.getEmbeddedResourceURLs("Mozilla", html.getBytes(StandardCharsets.UTF_8), new URL("http://example.org"), new URLCollection(c), StandardCharsets.UTF_8.name());    List<String> urlNames = c.stream().map(u -> u.toString()).collect(Collectors.toList());    assertThat(String.format("Parse with %s the page %s to get %s", parser.getClass().getSimpleName(), html, links), urlNames, CoreMatchers.is(CoreMatchers.equalTo(links)));}
0
public void testGetEmbeddedResourceURLsNoUrls() throws Exception
{    CssParser nonIgnoreParser = new CssParser();    List<?> result = extractUrls(nonIgnoreParser, "..");    assertThat(result.isEmpty(), CoreMatchers.is(true));}
0
public void testGetEmbeddedResourceURLsnOneUrl() throws Exception
{    List<?> result;    result = extractUrls("@import url(http://example.com/abc.css);");    assertThat(result.isEmpty(), CoreMatchers.is(false));}
0
public void testExtractUrlsFromBrokenData() throws Exception
{    extractUrls(CSS_IN_ERROR);}
0
public void testIsReusable()
{    assertThat(parser.isReusable(), CoreMatchers.is(true));}
0
private List<?> extractUrls(String css) throws LinkExtractorParseException, MalformedURLException
{    return extractUrls(parser, css);}
0
private List<?> extractUrls(CssParser parser, String css) throws LinkExtractorParseException, MalformedURLException
{    List<?> result = IteratorUtils.toList(parser.getEmbeddedResourceURLs("Mozilla", css.getBytes(StandardCharsets.UTF_8), new URL("http://example.org/"), StandardCharsets.UTF_8.displayName()));    return result;}
0
public Description getDescription()
{    return Description.createTestDescription(getClass(), getName() + " " + testNumber + " " + parserName);}
0
public static junit.framework.Test suite()
{    TestSuite suite = new TestSuite("TestHTMLParser");    suite.addTest(new TestHTMLParser("testDefaultParser"));    suite.addTest(new TestHTMLParser("testParserDefault"));    suite.addTest(new TestHTMLParser("testParserMissing"));    suite.addTest(new TestHTMLParser("testNotParser"));    suite.addTest(new TestHTMLParser("testNotCreatable"));    suite.addTest(new TestHTMLParser("testNotCreatableStatic"));    for (String parser : PARSERS) {                TestSuite ps = new TestSuite(parser);        ps.addTest(new TestHTMLParser("testParserProperty", parser, 0));        for (int j = 0; j < TESTS.length; j++) {            TestSuite ts = new TestSuite(TESTS[j].fileName);            ts.addTest(new TestHTMLParser("testParserSet", parser, j));            ts.addTest(new TestHTMLParser("testParserList", parser, j));            ps.addTest(ts);        }        suite.addTest(ps);    }        TestSuite ps = new TestSuite(DEFAULT_JMETER_PARSER + "_conditional_comments");    for (int j = 0; j < SPECIFIC_PARSER_TESTS.length; j++) {        TestSuite ts = new TestSuite(SPECIFIC_PARSER_TESTS[j].fileName);        ts.addTest(new TestHTMLParser("testSpecificParserList", DEFAULT_JMETER_PARSER, j));        ps.addTest(ts);    }    suite.addTest(ps);    return suite;}
0
public void testParserProperty() throws Exception
{    Properties p = JMeterUtils.getJMeterProperties();    if (p == null) {        p = JMeterUtils.getProperties("jmeter.properties");    }    p.setProperty(HTMLParser.PARSER_CLASSNAME, parserName);    BaseParser.getParser(p.getProperty(HTMLParser.PARSER_CLASSNAME));}
0
public void testDefaultParser() throws Exception
{    BaseParser.getParser(JMeterUtils.getPropDefault(HTMLParser.PARSER_CLASSNAME, HTMLParser.DEFAULT_PARSER));}
0
public void testParserDefault() throws Exception
{    BaseParser.getParser(HTMLParser.DEFAULT_PARSER);}
0
public void testParserMissing() throws Exception
{    try {        BaseParser.getParser("no.such.parser");        fail("Should not have been able to create the parser");    } catch (LinkExtractorParseException e) {        if (!(e.getCause() instanceof ClassNotFoundException)) {            throw e;        }    }}
0
public void testNotParser() throws Exception
{    try {        HTMLParser.getParser("java.lang.String");        fail("Should not have been able to create the parser");    } catch (LinkExtractorParseException e) {        if (e.getCause() instanceof ClassCastException) {            return;        }        throw e;    }}
0
public void testNotCreatable() throws Exception
{    try {        HTMLParser.getParser(TestClass.class.getName());        fail("Should not have been able to create the parser");    } catch (LinkExtractorParseException e) {        if (e.getCause() instanceof ReflectiveOperationException) {            return;        }        throw e;    }}
0
public void testNotCreatableStatic() throws Exception
{    try {        HTMLParser.getParser(StaticTestClass.class.getName());        fail("Should not have been able to create the parser");    } catch (LinkExtractorParseException e) {        if (e.getCause() instanceof ClassCastException) {            return;        }        if (e.getCause() instanceof IllegalAccessException) {            return;        }        throw e;    }}
0
public void testParserSet() throws Exception
{    HTMLParser p = (HTMLParser) BaseParser.getParser(parserName);    filetest(p, TESTS[testNumber].fileName, TESTS[testNumber].baseURL, TESTS[testNumber].expectedSet, null, false, TESTS[testNumber].userAgent);}
0
public void testParserList() throws Exception
{    HTMLParser p = (HTMLParser) BaseParser.getParser(parserName);    filetest(p, TESTS[testNumber].fileName, TESTS[testNumber].baseURL, TESTS[testNumber].expectedList, new Vector<URLString>(), true, TESTS[testNumber].userAgent);}
0
public void testSpecificParserList() throws Exception
{    HTMLParser p = (HTMLParser) BaseParser.getParser(parserName);    filetest(p, SPECIFIC_PARSER_TESTS[testNumber].fileName, SPECIFIC_PARSER_TESTS[testNumber].baseURL, SPECIFIC_PARSER_TESTS[testNumber].expectedList, new ArrayList<URLString>(), true, SPECIFIC_PARSER_TESTS[testNumber].userAgent);}
0
private static void filetest(HTMLParser p, String file, String url, String resultFile, Collection<URLString> c, boolean orderMatters, String userAgent) throws Exception
{    String parserName = p.getClass().getName().substring("org.apache.jmeter.protocol.http.parser.".length());    String fname = file.substring(file.indexOf('/') + 1);        byte[] buffer = IOUtils.toByteArray(getInputStream(file));    Iterator<URL> result;    if (c == null) {        result = p.getEmbeddedResourceURLs(userAgent, buffer, new URL(url), System.getProperty("file.encoding"));    } else {        result = p.getEmbeddedResourceURLs(userAgent, buffer, new URL(url), c, System.getProperty("file.encoding"));    }    /*         * TODO: Exact ordering is only required for some tests; change the         * comparison to do a set compare where necessary.         */    Iterator<String> expected;    if (orderMatters) {        expected = getFile(resultFile).iterator();    } else {                expected = new TreeSet<>(getFile(resultFile)).iterator();        TreeSet<URL> temp = new TreeSet<>(new Comparator<Object>() {            @Override            public int compare(Object o1, Object o2) {                return o1.toString().compareTo(o2.toString());            }        });        while (result.hasNext()) {            temp.add(result.next());        }        result = temp.iterator();    }    while (expected.hasNext()) {        Object next = expected.next();        assertTrue(userAgent + "::" + fname + "::" + parserName + "::Expecting another result " + next, result.hasNext());        try {            assertEquals(userAgent + "::" + fname + "::" + parserName + "(next)", next, result.next().toString());        } catch (ClassCastException e) {            fail(userAgent + "::" + fname + "::" + parserName + "::Expected URL, but got " + e.toString());        }    }    assertFalse(userAgent + "::" + fname + "::" + parserName + "::Should have reached the end of the results", result.hasNext());}
1
public int compare(Object o1, Object o2)
{    return o1.toString().compareTo(o2.toString());}
0
private static List<String> getFile(String file) throws Exception
{    if (file == null || file.isEmpty()) {        return Collections.emptyList();    }    try (InputStream is = getInputStream(file);        Reader fr = new InputStreamReader(is, StandardCharsets.UTF_8);        BufferedReader br = new BufferedReader(fr)) {        return br.lines().collect(Collectors.toList());    }}
0
private static InputStream getInputStream(String file)
{    if (file.startsWith("testfiles/HTMLParserTestFile_2")) {                        String path = "../../../bin/" + file;        try {            return new FileInputStream(path);        } catch (FileNotFoundException e) {            throw new IllegalArgumentException("File " + file + " is not found (" + path + ")");        }    }    return TestHTMLParser.class.getResourceAsStream("/" + file);}
0
public void setUp()
{}
0
public void testGetParser() throws Exception
{    HtmlParsingUtils.getParser();}
0
public void testGetDom() throws Exception
{    HtmlParsingUtils.getDOM("<HTML></HTML>");    HtmlParsingUtils.getDOM("");}
0
public void testIsArgumentMatched() throws Exception
{    Argument arg = new Argument();    Argument argp = new Argument();    assertTrue(HtmlParsingUtils.isArgumentMatched(arg, argp));    arg = new Argument("test", "abcd");    argp = new Argument("test", "a.*d");    assertTrue(HtmlParsingUtils.isArgumentMatched(arg, argp));    arg = new Argument("test", "abcd");    argp = new Argument("test", "a.*e");    assertFalse(HtmlParsingUtils.isArgumentMatched(arg, argp));}
0
public void testIsAnchorMatched() throws Exception
{    HTTPSamplerBase target = new HTTPNullSampler();    HTTPSamplerBase pattern = new HTTPNullSampler();    assertTrue(HtmlParsingUtils.isAnchorMatched(target, pattern));    target.setProtocol("http:");    assertFalse(HtmlParsingUtils.isAnchorMatched(target, pattern));    pattern.setProtocol(".*");    assertTrue(HtmlParsingUtils.isAnchorMatched(target, pattern));    target.setDomain("a.b.c");    assertTrue(HtmlParsingUtils.isAnchorMatched(target, pattern));    pattern.setDomain(".*");    assertTrue(HtmlParsingUtils.isAnchorMatched(target, pattern));    target.setPath("/abc");    assertFalse(HtmlParsingUtils.isAnchorMatched(target, pattern));    pattern.setPath(".*");    assertTrue(HtmlParsingUtils.isAnchorMatched(target, pattern));    target.addArgument("param2", "value2", "=");    assertTrue(HtmlParsingUtils.isAnchorMatched(target, pattern));    pattern.addArgument("param1", ".*", "=");    assertFalse(HtmlParsingUtils.isAnchorMatched(target, pattern));    target.addArgument("param1", "value1", "=");    assertTrue(HtmlParsingUtils.isAnchorMatched(target, pattern));}
0
public void testisEqualOrMatches() throws Exception
{    assertTrue(HtmlParsingUtils.isEqualOrMatches("http:", "http:"));    assertFalse(HtmlParsingUtils.isEqualOrMatches("http:", "htTp:"));    assertTrue(HtmlParsingUtils.isEqualOrMatches("http:", "ht+p:"));    assertFalse(HtmlParsingUtils.isEqualOrMatches("ht+p:", "http:"));}
0
public void testisEqualOrMatchesCaseBlind() throws Exception
{    assertTrue(HtmlParsingUtils.isEqualOrMatchesCaseBlind("http:", "http:"));    assertTrue(HtmlParsingUtils.isEqualOrMatchesCaseBlind("http:", "htTp:"));    assertTrue(HtmlParsingUtils.isEqualOrMatches("http:", "ht+p:"));    assertFalse(HtmlParsingUtils.isEqualOrMatches("ht+p:", "http:"));}
0
public static void main(String[] args) throws IllegalUserActionException, IOException
{        JMeterUtils.setJMeterHome("./");    JMeterUtils.loadJMeterProperties(JMeterUtils.getJMeterBinDir() + "/jmeter.properties");    JMeterUtils.initLocale();    TestPlan testPlan = new TestPlan();    ThreadGroup threadGroup = new ThreadGroup();    ListedHashTree testPlanTree = new ListedHashTree();    testPlanTree.add(testPlan);    testPlanTree.add(threadGroup, testPlan);        @SuppressWarnings("deprecation")    JMeterTreeModel treeModel = new JMeterTreeModel(new Object());    JMeterTreeNode root = (JMeterTreeNode) treeModel.getRoot();    treeModel.addSubTree(testPlanTree, root);    ProxyControl proxy = new ProxyControl();    proxy.setNonGuiTreeModel(treeModel);    proxy.setTarget(treeModel.getNodeOf(threadGroup));    proxy.setPort(8282);    treeModel.addComponent(proxy, (JMeterTreeNode) root.getChildAt(1));    proxy.startProxy();    HttpHost proxyHost = new HttpHost("localhost", 8282);    DefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxyHost);    CloseableHttpClient httpclient = HttpClients.custom().setRoutePlanner(routePlanner).build();    try {        httpclient.execute(new HttpGet("http://example.invalid"));    } catch (Exception e) {        }    proxy.stopProxy();    try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {        SaveService.saveTree(treeModel.getTestPlan(), out);        out.close();        System.out.println(out.toString());    }}
0
public void testRepeatedArguments() throws Exception
{    String url = "http://localhost/matrix.html";        String contentEncoding = "UTF-8";    String testGetRequest = "GET " + url + "?update=yes&d=1&d=2&d=&d=&d=&d=&d=&d=1&d=2&d=1&d=&d= " + "HTTP/1.0\r\n\r\n";    HTTPSamplerBase s = getSamplerForRequest(url, testGetRequest, contentEncoding);    assertEquals(HTTPConstants.GET, s.getMethod());    assertEquals(contentEncoding, s.getContentEncoding());        Arguments arguments = s.getArguments();    assertEquals(13, arguments.getArgumentCount());    checkArgument((HTTPArgument) arguments.getArgument(0), "update", "yes", "yes", contentEncoding, false);    checkArgument((HTTPArgument) arguments.getArgument(1), "d", "1", "1", contentEncoding, false);    checkArgument((HTTPArgument) arguments.getArgument(2), "d", "2", "2", contentEncoding, false);    checkArgument((HTTPArgument) arguments.getArgument(3), "d", "", "", contentEncoding, false);    checkArgument((HTTPArgument) arguments.getArgument(4), "d", "", "", contentEncoding, false);    checkArgument((HTTPArgument) arguments.getArgument(5), "d", "", "", contentEncoding, false);    checkArgument((HTTPArgument) arguments.getArgument(6), "d", "", "", contentEncoding, false);    checkArgument((HTTPArgument) arguments.getArgument(7), "d", "", "", contentEncoding, false);    checkArgument((HTTPArgument) arguments.getArgument(8), "d", "1", "1", contentEncoding, false);    checkArgument((HTTPArgument) arguments.getArgument(9), "d", "2", "2", contentEncoding, false);    checkArgument((HTTPArgument) arguments.getArgument(10), "d", "1", "1", contentEncoding, false);    checkArgument((HTTPArgument) arguments.getArgument(11), "d", "", "", contentEncoding, false);    checkArgument((HTTPArgument) arguments.getArgument(12), "d", "", "", contentEncoding, false);        contentEncoding = "UTF-8";    String postBody = "update=yes&d=1&d=2&d=&d=&d=&d=&d=&d=1&d=2&d=1&d=&d=";    String testPostRequest = "POST " + url + " HTTP/1.0\n" + "Content-type: " + HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED + "\r\n" + "Content-length: " + getBodyLength(postBody, contentEncoding) + "\r\n" + "\r\n" + postBody;    s = getSamplerForRequest(url, testPostRequest, contentEncoding);    assertEquals(HTTPConstants.POST, s.getMethod());    assertFalse(s.getDoMultipartPost());    assertEquals(contentEncoding, s.getContentEncoding());        arguments = s.getArguments();    assertEquals(13, arguments.getArgumentCount());    checkArgument((HTTPArgument) arguments.getArgument(0), "update", "yes", "yes", contentEncoding, false);    checkArgument((HTTPArgument) arguments.getArgument(1), "d", "1", "1", contentEncoding, false);    checkArgument((HTTPArgument) arguments.getArgument(2), "d", "2", "2", contentEncoding, false);    checkArgument((HTTPArgument) arguments.getArgument(3), "d", "", "", contentEncoding, false);    checkArgument((HTTPArgument) arguments.getArgument(4), "d", "", "", contentEncoding, false);    checkArgument((HTTPArgument) arguments.getArgument(5), "d", "", "", contentEncoding, false);    checkArgument((HTTPArgument) arguments.getArgument(6), "d", "", "", contentEncoding, false);    checkArgument((HTTPArgument) arguments.getArgument(7), "d", "", "", contentEncoding, false);    checkArgument((HTTPArgument) arguments.getArgument(8), "d", "1", "1", contentEncoding, false);    checkArgument((HTTPArgument) arguments.getArgument(9), "d", "2", "2", contentEncoding, false);    checkArgument((HTTPArgument) arguments.getArgument(10), "d", "1", "1", contentEncoding, false);    checkArgument((HTTPArgument) arguments.getArgument(11), "d", "", "", contentEncoding, false);    checkArgument((HTTPArgument) arguments.getArgument(12), "d", "", "", contentEncoding, false);        contentEncoding = "UTF-8";    postBody = "update=yes&d=1&d=2&d=&d=&d=&d=&d=&d=1&d=2&d=1&d=\uc385&d=";    testPostRequest = "POST " + url + " HTTP/1.1\r\n" + "Content-type: text/plain\r\n" + "Content-length: " + getBodyLength(postBody, contentEncoding) + "\r\n" + "\r\n" + postBody;    s = getSamplerForRequest(url, testPostRequest, contentEncoding);    assertEquals(HTTPConstants.POST, s.getMethod());    assertFalse(s.getDoMultipartPost());    assertEquals(contentEncoding, s.getContentEncoding());            arguments = s.getArguments();    assertEquals(1, arguments.getArgumentCount());    checkArgument((HTTPArgument) arguments.getArgument(0), "", postBody, postBody, contentEncoding, false);            contentEncoding = "UTF-8";    postBody = "update=yes&d=1&d=2&d=&d=&d=&d=&d=&d=1&d=2&d=1&d=\uc385&d=";    testPostRequest = "POST " + url + " HTTP/1.1\r\n" + "Content-type: text/plain; charset=" + contentEncoding + "\r\n" + "Content-length: " + getBodyLength(postBody, contentEncoding) + "\r\n" + "\r\n" + postBody;                s = getSamplerForRequest(null, testPostRequest, contentEncoding);    assertEquals(HTTPConstants.POST, s.getMethod());    assertFalse(s.getDoMultipartPost());    assertEquals(contentEncoding, s.getContentEncoding());            arguments = s.getArguments();    assertEquals(1, arguments.getArgumentCount());    checkArgument((HTTPArgument) arguments.getArgument(0), "", postBody, postBody, contentEncoding, false);            contentEncoding = "UTF-8";    url = "http://vmdal-hqqa9/retalixhq/GG_Implementation/ScreenEntity/ScreenEntityHTTP.aspx?Action=Save&ET=Vendor&TT=Single&Sid=1347280336092";    postBody = "<Action UIStatus=\"2\"><Vendor Id=\"9292\" HOST_ID=\"0\" VENDOR=\"9292\" TERMS_TYPE=\"No Terms\" TERMS=\"0 %\"" + " AUTO_PRICE=\"Use System Default\" VM_VENDOR_TYPE=\"DSD Vendor\" ITEM_FORMAT=\"PLU\" COST_ENTRY_SORT=\"UPC/EAN\"" + " VM_REPORT_SORT=\"UPC/EAN\" VM_ORDER_SORT=\"UPC/EAN\" VM_RECEIVING_SORT=\"UPC/EAN\" VM_MAX_BACK_ORDERS=\"99\"" + " MAX_OPEN_DAYS=\"99\" PAY_BASED_ON=\"System Cost\" ORDER_COST_DATE=\"Use System Rule\" VM_CONSIDER_FREE=\"False\"" + " VM_SHOW_DETAIL=\"False\" VM_UPDATE_COST=\"No\" RD_USE_VENDOR_CC=\"False\" BLIND_RECEIVING=\"Default\"" + " EXCLUDE_RECEIVED_COST=\"False\" PRINT_ITEM_ADJ=\"False\" PRINT_OVERALL_ADJ=\"False\" PRINT_TAX_DETAIL=\"False\"" + " BLOCK_PRICE_VIEW=\"False\" DELIVERY_STATUS=\"No Delivery\" AUTO_RECEIVE=\"False\" TARGET_GM_FLAG=\"%\"" + " MINIMUM_GM_FLAG=\"%\" MARGIN_TYPE=\"Gross Margin\" HOLD_REGULAR=\"Default\" HOLD_SPECIALS=\"Default\"" + " TRUSTING_VENDOR=\"False\" AUTO_ACCEPT=\"All\" EARLY_RCPT_AFFECTS=\"All Costs\" SBT_ELIGIBLE=\"Not eligible\"" + " SBT_REPORTING_DAY=\"Monday\" AUTO_BALANCE_FLAG=\"$\" DAX_MANAGED=\"False\" CHANGE_ID=\"QA\" CHANGE_SOURCE=\"Manual Change\"" + " ORIGINAL_SOURCE=\"Manual Change\" RECORD_STATUS=\"Add\" RECORD_STATUS_DATE=\"9/7/2012 8:34:58 AM\" VENDOR_NAME=\"test\"" + " UIStatus=\"2\"/></Action>";    testPostRequest = "POST " + url + " HTTP/1.1\r\n" + "x-requested-with: XMLHttpRequest" + "\r\n" + "Accept-Language: en-us" + "\r\n" + "Referer: http://vmdal-hqqa9/retalixhq/GG_Implementation/ScreenEntity/ScreenEntityPage.aspx?ET=Vendor&TT=Single&" + "WM=2&UID=9292&Sid=1347280331908&UITH=Blue&MUID=window_0" + "\r\n" + "Accept: */*" + "\r\n" + "Content-Type: application/x-www-form-urlencoded" + "\r\n" + "Accept-Encoding: gzip, deflate" + "\r\n" + "User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729;" + " .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; Tablet PC 2.0)" + "\r\n" + "Host: vmdal-hqqa9" + "\r\n" + "Content-Length: " + getBodyLength(postBody, contentEncoding) + "\r\n" + "Proxy-Connection: Keep-Alive" + "\r\n" + "Pragma: no-cache" + "\r\n" + "Cookie: RHQ=sid=5aaeb66c-e174-4f4c-9928-83cffcc62150" + "\r\n" + "\r\n" + postBody;                s = getSamplerForRequest(null, testPostRequest, contentEncoding);    assertEquals(HTTPConstants.POST, s.getMethod());    assertFalse(s.getDoMultipartPost());                    arguments = s.getArguments();    assertEquals(1, arguments.getArgumentCount());    checkArgument((HTTPArgument) arguments.getArgument(0), "", postBody, postBody, contentEncoding, false);}
0
public void testEncodedArguments() throws Exception
{    String url = "http://localhost/matrix.html";    testEncodedArguments(url);}
0
public void testEncodedArgumentsIPv6() throws Exception
{    String url = "http://[::1]:8080/matrix.html";    testEncodedArguments(url);}
0
private void testEncodedArguments(String url) throws Exception
{        String contentEncoding = "";    String queryString = "abc%3FSPACE=a+b&space=a%20b&query=What%3F";    String testGetRequest = "GET " + url + "?" + queryString + " HTTP/1.1\r\n\r\n";            HTTPSamplerBase s = getSamplerForRequest(null, testGetRequest, null);    assertEquals(HTTPConstants.GET, s.getMethod());    assertEquals(queryString, s.getQueryString());    assertEquals(contentEncoding, s.getContentEncoding());        Arguments arguments = s.getArguments();    assertEquals(3, arguments.getArgumentCount());        checkArgument((HTTPArgument) arguments.getArgument(0), "abc%3FSPACE", "a+b", "a+b", contentEncoding, false);    checkArgument((HTTPArgument) arguments.getArgument(1), "space", "a%20b", "a%20b", contentEncoding, false);    checkArgument((HTTPArgument) arguments.getArgument(2), "query", "What%3F", "What%3F", contentEncoding, false);        contentEncoding = "UTF-8";    queryString = "abc%3FSPACE=a+b&space=a%20b&query=What%3F";    testGetRequest = "GET " + url + "?" + queryString + " HTTP/1.1\r\n\r\n";    s = getSamplerForRequest(url, testGetRequest, contentEncoding);    assertEquals(HTTPConstants.GET, s.getMethod());    String expectedQueryString = "abc%3FSPACE=a+b&space=a+b&query=What%3F";    assertEquals(expectedQueryString, s.getQueryString());    assertEquals(contentEncoding, s.getContentEncoding());        arguments = s.getArguments();    assertEquals(3, arguments.getArgumentCount());    checkArgument((HTTPArgument) arguments.getArgument(0), "abc?SPACE", "a b", "a+b", contentEncoding, true);    checkArgument((HTTPArgument) arguments.getArgument(1), "space", "a b", "a+b", contentEncoding, true);    checkArgument((HTTPArgument) arguments.getArgument(2), "query", "What?", "What%3F", contentEncoding, true);        contentEncoding = "";    String postBody = "abc%3FSPACE=a+b&space=a%20b&query=What%3F";    String testPostRequest = "POST " + url + " HTTP/1.1\r\n" + "Content-type: " + HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED + "\r\n" + "Content-length: " + getBodyLength(postBody, contentEncoding) + "\r\n" + "\r\n" + postBody;            s = getSamplerForRequest(null, testPostRequest, null);    assertEquals(HTTPConstants.POST, s.getMethod());    assertEquals(queryString, s.getQueryString());    assertEquals(contentEncoding, s.getContentEncoding());    assertFalse(s.getDoMultipartPost());        arguments = s.getArguments();    assertEquals(3, arguments.getArgumentCount());        checkArgument((HTTPArgument) arguments.getArgument(0), "abc%3FSPACE", "a+b", "a+b", contentEncoding, false);    checkArgument((HTTPArgument) arguments.getArgument(1), "space", "a%20b", "a%20b", contentEncoding, false);    checkArgument((HTTPArgument) arguments.getArgument(2), "query", "What%3F", "What%3F", contentEncoding, false);        contentEncoding = "UTF-8";    postBody = "abc?SPACE=a+b&space=a%20b&query=What?";    testPostRequest = "POST " + url + " HTTP/1.1\n" + "Content-type: " + HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED + "\r\n" + "Content-length: " + getBodyLength(postBody, contentEncoding) + "\r\n" + "\r\n" + postBody;    s = getSamplerForRequest(url, testPostRequest, contentEncoding);    assertEquals(HTTPConstants.POST, s.getMethod());    expectedQueryString = "abc%3FSPACE=a+b&space=a+b&query=What%3F";    assertEquals(expectedQueryString, s.getQueryString());    assertEquals(contentEncoding, s.getContentEncoding());    assertFalse(s.getDoMultipartPost());        arguments = s.getArguments();    assertEquals(3, arguments.getArgumentCount());    checkArgument((HTTPArgument) arguments.getArgument(0), "abc?SPACE", "a b", "a+b", contentEncoding, true);    checkArgument((HTTPArgument) arguments.getArgument(1), "space", "a b", "a+b", contentEncoding, true);    checkArgument((HTTPArgument) arguments.getArgument(2), "query", "What?", "What%3F", contentEncoding, true);}
0
public void testGetRequestEncodings() throws Exception
{    testGetRequestEncodings("http://localhost/matrix.html");}
0
public void testGetRequestEncodingsIPv6() throws Exception
{    testGetRequestEncodings("http://[::1]:8080/matrix.html");}
0
private void testGetRequestEncodings(String url) throws Exception
{        String contentEncoding = "";    String param1Value = "yes";    String param2Value = "0+5 -\u00c5\uc385%C3%85";    String param2ValueEncoded = URLEncoder.encode(param2Value, "UTF-8");    String testGetRequest = "GET " + url + "?param1=" + param1Value + "&param2=" + param2ValueEncoded + " " + "HTTP/1.1\r\n\r\n";            HTTPSamplerBase s = getSamplerForRequest(null, testGetRequest, null);    assertEquals(HTTPConstants.GET, s.getMethod());    assertEquals(contentEncoding, s.getContentEncoding());        Arguments arguments = s.getArguments();    assertEquals(2, arguments.getArgumentCount());    checkArgument((HTTPArgument) arguments.getArgument(0), "param1", param1Value, param1Value, contentEncoding, false);        checkArgument((HTTPArgument) arguments.getArgument(1), "param2", param2ValueEncoded, param2ValueEncoded, contentEncoding, false);        contentEncoding = "UTF-8";    param1Value = "yes";    param2Value = "0+5 -\u007c\u2aa1\u266a\u0153\u20a1\u0115\u0364\u00c5\u2052\uc385%C3%85";    param2ValueEncoded = URLEncoder.encode(param2Value, contentEncoding);    testGetRequest = "GET " + url + "?param1=" + param1Value + "&param2=" + param2ValueEncoded + " " + "HTTP/1.1\r\n\r\n";    s = getSamplerForRequest(url, testGetRequest, contentEncoding);    assertEquals(HTTPConstants.GET, s.getMethod());    assertEquals(contentEncoding, s.getContentEncoding());        arguments = s.getArguments();    assertEquals(2, arguments.getArgumentCount());    checkArgument((HTTPArgument) arguments.getArgument(0), "param1", param1Value, param1Value, contentEncoding, false);    checkArgument((HTTPArgument) arguments.getArgument(1), "param2", param2Value, param2ValueEncoded, contentEncoding, true);        contentEncoding = "ISO-8859-1";    param1Value = "yes";    param2Value = "0+5 -\u00c5%C3%85";    param2ValueEncoded = URLEncoder.encode(param2Value, contentEncoding);    testGetRequest = "GET " + url + "?param1=" + param1Value + "&param2=" + param2ValueEncoded + " " + "HTTP/1.1\r\n\r\n";    s = getSamplerForRequest(url, testGetRequest, contentEncoding);    assertEquals(HTTPConstants.GET, s.getMethod());    assertEquals(contentEncoding, s.getContentEncoding());        arguments = s.getArguments();    assertEquals(2, arguments.getArgumentCount());    checkArgument((HTTPArgument) arguments.getArgument(0), "param1", param1Value, param1Value, contentEncoding, false);    checkArgument((HTTPArgument) arguments.getArgument(1), "param2", param2Value, param2ValueEncoded, contentEncoding, true);}
0
public void testPostRequestEncodings() throws Exception
{    String url = "http://localhost/matrix.html";        String contentEncoding = "";    String param1Value = "yes";    String param2Value = "0+5 -\u00c5%C3%85";    String param2ValueEncoded = URLEncoder.encode(param2Value, "UTF-8");    String postBody = "param1=" + param1Value + "&param2=" + param2ValueEncoded + "\r\n";    String testPostRequest = "POST " + url + " HTTP/1.1\r\n" + "Content-type: " + HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED + "\r\n" + "Content-length: " + getBodyLength(postBody, contentEncoding) + "\r\n" + "\r\n" + postBody;            HTTPSamplerBase s = getSamplerForRequest(null, testPostRequest, null);    assertEquals(HTTPConstants.POST, s.getMethod());    assertEquals(contentEncoding, s.getContentEncoding());        Arguments arguments = s.getArguments();    assertEquals(2, arguments.getArgumentCount());    checkArgument((HTTPArgument) arguments.getArgument(0), "param1", param1Value, param1Value, contentEncoding, false);        checkArgument((HTTPArgument) arguments.getArgument(1), "param2", param2ValueEncoded, param2ValueEncoded, contentEncoding, false);        contentEncoding = "UTF-8";    param1Value = "yes";    param2Value = "0+5 -\u007c\u2aa1\u266a\u0153\u20a1\u0115\u0364\u00c5\u2052\uc385%C3%85";    param2ValueEncoded = URLEncoder.encode(param2Value, contentEncoding);    postBody = "param1=" + param1Value + "&param2=" + param2ValueEncoded + "\r\n";    testPostRequest = "POST " + url + " HTTP/1.1\r\n" + "Content-type: " + HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED + "\r\n" + "Content-length: " + getBodyLength(postBody, contentEncoding) + "\r\n" + "\r\n" + postBody;    s = getSamplerForRequest(url, testPostRequest, contentEncoding);    assertEquals(HTTPConstants.POST, s.getMethod());    assertEquals(contentEncoding, s.getContentEncoding());        arguments = s.getArguments();    assertEquals(2, arguments.getArgumentCount());    checkArgument((HTTPArgument) arguments.getArgument(0), "param1", param1Value, param1Value, contentEncoding, false);    checkArgument((HTTPArgument) arguments.getArgument(1), "param2", param2Value, param2ValueEncoded, contentEncoding, true);        contentEncoding = "ISO-8859-1";    param1Value = "yes";    param2Value = "0+5 -\u00c5%C3%85";    param2ValueEncoded = URLEncoder.encode(param2Value, contentEncoding);    postBody = "param1=" + param1Value + "&param2=" + param2ValueEncoded + "\r\n";    testPostRequest = "POST " + url + " HTTP/1.1\r\n" + "Content-type: " + HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED + "\r\n" + "Content-length: " + getBodyLength(postBody, contentEncoding) + "\r\n" + "\r\n" + postBody;    s = getSamplerForRequest(url, testPostRequest, contentEncoding);    assertEquals(HTTPConstants.POST, s.getMethod());    assertEquals(contentEncoding, s.getContentEncoding());        arguments = s.getArguments();    assertEquals(2, arguments.getArgumentCount());    checkArgument((HTTPArgument) arguments.getArgument(0), "param1", param1Value, param1Value, contentEncoding, false);    checkArgument((HTTPArgument) arguments.getArgument(1), "param2", param2Value, param2ValueEncoded, contentEncoding, true);}
0
public void testPostMultipartFormData() throws Exception
{    String url = "http://localhost/matrix.html";        String contentEncoding = "UTF-8";    String boundary = "xf8SqlDNvmn6mFYwrioJaeUR2_Z4cLRXOSmB";    String endOfLine = "\r\n";    String titleValue = "mytitle";    String descriptionValue = "mydescription";    String postBody = createMultipartFormBody(titleValue, descriptionValue, contentEncoding, true, boundary, endOfLine);    String testPostRequest = createMultipartFormRequest(url, postBody, contentEncoding, boundary, endOfLine);    HTTPSamplerBase s = getSamplerForRequest(url, testPostRequest, contentEncoding);    assertEquals(HTTPConstants.POST, s.getMethod());    assertEquals(contentEncoding, s.getContentEncoding());    assertTrue(s.getDoMultipartPost());        Arguments arguments = s.getArguments();    assertEquals(2, arguments.getArgumentCount());    checkArgument((HTTPArgument) arguments.getArgument(0), "title", titleValue, titleValue, contentEncoding, false);    checkArgument((HTTPArgument) arguments.getArgument(1), "description", descriptionValue, descriptionValue, contentEncoding, false);                endOfLine = "\r\n";    titleValue = "mytitle";    descriptionValue = "mydescription";    postBody = createMultipartFormBody(titleValue, descriptionValue, contentEncoding, true, boundary, endOfLine);    testPostRequest = createMultipartFormRequest(url, postBody, contentEncoding, boundary, endOfLine);    s = getSamplerForRequest(url, testPostRequest, contentEncoding);    assertEquals(HTTPConstants.POST, s.getMethod());    assertEquals(contentEncoding, s.getContentEncoding());    assertTrue(s.getDoMultipartPost());        arguments = s.getArguments();    assertEquals(2, arguments.getArgumentCount());    checkArgument((HTTPArgument) arguments.getArgument(0), "title", titleValue, titleValue, contentEncoding, false);    checkArgument((HTTPArgument) arguments.getArgument(1), "description", descriptionValue, descriptionValue, contentEncoding, false);                endOfLine = "\n";    titleValue = "mytitle";    descriptionValue = "mydescription";    postBody = createMultipartFormBody(titleValue, descriptionValue, contentEncoding, true, boundary, endOfLine);    testPostRequest = createMultipartFormRequest(url, postBody, contentEncoding, boundary, endOfLine);    s = getSamplerForRequest(url, testPostRequest, contentEncoding);    assertEquals(HTTPConstants.POST, s.getMethod());    assertEquals(contentEncoding, s.getContentEncoding());    assertTrue(s.getDoMultipartPost());        arguments = s.getArguments();    assertEquals(2, arguments.getArgumentCount());    checkArgument((HTTPArgument) arguments.getArgument(0), "title", titleValue, titleValue, contentEncoding, false);    checkArgument((HTTPArgument) arguments.getArgument(1), "description", descriptionValue, descriptionValue, contentEncoding, false);                endOfLine = "\r\n";    titleValue = "/wEPDwULLTE2MzM2OTA0NTYPZBYCAgMPZ/rA+8DZ2dnZ2dnZ2d/GNDar6OshPwdJc=";    descriptionValue = "mydescription";    postBody = createMultipartFormBody(titleValue, descriptionValue, contentEncoding, true, boundary, endOfLine);    testPostRequest = createMultipartFormRequest(url, postBody, contentEncoding, boundary, endOfLine);    s = getSamplerForRequest(url, testPostRequest, contentEncoding);    assertEquals(HTTPConstants.POST, s.getMethod());    assertEquals(contentEncoding, s.getContentEncoding());    assertTrue(s.getDoMultipartPost());        arguments = s.getArguments();    assertEquals(2, arguments.getArgumentCount());    checkArgument((HTTPArgument) arguments.getArgument(0), "title", titleValue, titleValue, contentEncoding, false);    checkArgument((HTTPArgument) arguments.getArgument(1), "description", descriptionValue, descriptionValue, contentEncoding, false);}
0
public void testParse1() throws Exception
{        HttpRequestHdr req = new HttpRequestHdr();    ByteArrayInputStream bis = null;    bis = new ByteArrayInputStream("GET xxx HTTP/1.0\r\nname:value \r\n".getBytes("ISO-8859-1"));    req.parse(bis);    bis.close();    HeaderManager mgr = req.getHeaderManager();    Header header;    mgr.getHeaders();    header = mgr.getHeader(0);    assertEquals("name", header.getName());    assertEquals("value", header.getValue());}
0
public void testParse2() throws Exception
{        HttpRequestHdr req = new HttpRequestHdr();    ByteArrayInputStream bis = null;    bis = new ByteArrayInputStream("GET xxx HTTP/1.0\r\nname:           value \r\n".getBytes("ISO-8859-1"));    req.parse(bis);    bis.close();    HeaderManager mgr = req.getHeaderManager();    Header header;    mgr.getHeaders();    header = mgr.getHeader(0);    assertEquals("name", header.getName());    assertEquals("value", header.getValue());}
0
public void testPostMultipartFileUpload() throws Exception
{    String url = "http://localhost/matrix.html";        String contentEncoding = "UTF-8";    String boundary = "xf8SqlDNvmn6mFYwrioJaeUR2_Z4cLRXOSmB";    String endOfLine = "\r\n";    String fileFieldValue = "test_file";    String fileName = "somefilename.txt";    String mimeType = "text/plain";    String fileContent = "somedummycontent\n\ndfgdfg\r\nfgdgdg\nContent-type:dfsfsfds";    String postBody = createMultipartFileUploadBody(fileFieldValue, fileName, mimeType, fileContent, boundary, endOfLine);    String testPostRequest = createMultipartFormRequest(url, postBody, contentEncoding, boundary, endOfLine);    HTTPSamplerBase s = getSamplerForRequest(url, testPostRequest, contentEncoding);    assertEquals(HTTPConstants.POST, s.getMethod());    assertEquals(contentEncoding, s.getContentEncoding());    assertEquals("", s.getQueryString());    assertTrue(s.getDoMultipartPost());        Arguments arguments = s.getArguments();    assertEquals(0, arguments.getArgumentCount());        HTTPFileArg hfa = s.getHTTPFiles()[0];    assertEquals(fileFieldValue, hfa.getParamName());    assertEquals(fileName, hfa.getPath());    assertEquals(mimeType, hfa.getMimeType());}
0
private String createMultipartFormBody(String titleValue, String descriptionValue, String contentEncoding, boolean includeExtraHeaders, String boundary, String endOfLine)
{        String postBody = "--" + boundary + endOfLine + "Content-Disposition: form-data; name=\"title\"" + endOfLine;    if (includeExtraHeaders) {        postBody += "Content-Type: text/plain; charset=" + contentEncoding + endOfLine + "Content-Transfer-Encoding: 8bit" + endOfLine;    }    postBody += endOfLine + titleValue + endOfLine + "--" + boundary + endOfLine;        postBody += "Content-Disposition: form-data; name=\"description\"" + endOfLine;    if (includeExtraHeaders) {        postBody += "Content-Type: text/plain; charset=" + contentEncoding + endOfLine + "Content-Transfer-Encoding: 8bit" + endOfLine;    }    postBody += endOfLine + descriptionValue + endOfLine + "--" + boundary + "--" + endOfLine;    return postBody;}
0
private String createMultipartFileUploadBody(String fileField, String fileName, String fileMimeType, String fileContent, String boundary, String endOfLine)
{        String postBody = "--" + boundary + endOfLine + "Content-Disposition: form-data; name=\"" + fileField + "\" filename=\"" + fileName + "\"" + endOfLine + "Content-Type: " + fileMimeType + endOfLine + "Content-Transfer-Encoding: binary" + endOfLine + endOfLine + fileContent + endOfLine + "--" + boundary + "--" + endOfLine;    return postBody;}
0
private String createMultipartFormRequest(String url, String postBody, String contentEncoding, String boundary, String endOfLine) throws IOException
{    String postRequest = "POST " + url + " HTTP/1.1" + endOfLine + "Content-type: " + HTTPConstants.MULTIPART_FORM_DATA + "; boundary=" + boundary + endOfLine + "Content-length: " + getBodyLength(postBody, contentEncoding) + endOfLine + endOfLine + postBody;    return postRequest;}
0
private HTTPSamplerBase getSamplerForRequest(String url, String request, String contentEncoding) throws Exception
{    HttpRequestHdr req = new HttpRequestHdr();    ByteArrayInputStream bis = null;    if (contentEncoding != null) {        bis = new ByteArrayInputStream(request.getBytes(contentEncoding));    } else {                bis = new ByteArrayInputStream(request.getBytes("ISO-8859-1"));    }    req.parse(bis);    bis.close();    Map<String, String> pageEncodings = Collections.synchronizedMap(new HashMap<String, String>());    Map<String, String> formEncodings = Collections.synchronizedMap(new HashMap<String, String>());    if (url != null && contentEncoding != null) {        pageEncodings.put(url, contentEncoding);    }    SamplerCreatorFactory creatorFactory = new SamplerCreatorFactory();    SamplerCreator creator = creatorFactory.getSamplerCreator(req, pageEncodings, formEncodings);    HTTPSamplerBase sampler = creator.createSampler(req, pageEncodings, formEncodings);    creator.populateSampler(sampler, req, pageEncodings, formEncodings);    return sampler;}
0
private void checkArgument(HTTPArgument arg, String expectedName, String expectedValue, String expectedEncodedValue, String contentEncoding, boolean expectedEncoded) throws IOException
{    assertEquals(expectedName, arg.getName());    assertEquals(expectedValue, arg.getValue());    if (contentEncoding != null && contentEncoding.length() > 0) {        assertEquals(expectedEncodedValue, arg.getEncodedValue(contentEncoding));    } else {                assertEquals(expectedEncodedValue, arg.getEncodedValue("ISO-8859-1"));    }    assertPrimitiveEquals(expectedEncoded, arg.isAlwaysEncoded());}
0
private int getBodyLength(String postBody, String contentEncoding) throws IOException
{    if (contentEncoding != null && contentEncoding.length() > 0) {        return postBody.getBytes(contentEncoding).length;    } else {                return postBody.getBytes().length;    }}
0
public void setUp()
{    control = new ProxyControl();    control.addIncludedPattern(".*\\.jsp");    control.addExcludedPattern(".*apache.org.*");    sampler = new HTTPNullSampler();}
0
public void testFilter1() throws Exception
{    sampler.setDomain("jakarta.org");    sampler.setPath("index.jsp");    assertTrue("Should find jakarta.org/index.jsp", control.filterUrl(sampler));}
0
public void testFilter2() throws Exception
{    sampler.setPath("index.jsp");    sampler.setDomain("www.apache.org");    assertFalse("Should not match www.apache.org", control.filterUrl(sampler));}
0
public void testFilter3() throws Exception
{    sampler.setPath("header.gif");    sampler.setDomain("jakarta.org");    assertFalse("Should not match header.gif", control.filterUrl(sampler));}
0
public void testContentTypeNoFilters() throws Exception
{    SampleResult result = new SampleResult();        control.setContentTypeInclude(null);    control.setContentTypeExclude(null);    result.setContentType(null);    assertTrue("Should allow if no content-type present", control.filterContentType(result));    result.setContentType("text/html; charset=utf-8");    assertTrue("Should allow text/html", control.filterContentType(result));    result.setContentType("image/png");    assertTrue("Should allow image/png", control.filterContentType(result));        control.setContentTypeInclude("");    control.setContentTypeExclude("");    result.setContentType(null);    assertTrue("Should allow if no content-type present", control.filterContentType(result));    result.setContentType("text/html; charset=utf-8");    assertTrue("Should allow text/html", control.filterContentType(result));    result.setContentType("image/png");    assertTrue("Should allow image/png", control.filterContentType(result));        control.setContentTypeInclude(" ");    control.setContentTypeExclude(" ");    result.setContentType(null);    assertTrue("Should allow if no content-type present", control.filterContentType(result));    result.setContentType("text/html; charset=utf-8");    assertFalse("Should not allow text/html", control.filterContentType(result));    result.setContentType("image/png");    assertFalse("Should not allow image/png", control.filterContentType(result));}
0
public void testContentTypeInclude() throws Exception
{    SampleResult result = new SampleResult();    control.setContentTypeInclude("text/html|text/ascii");    result.setContentType(null);    assertTrue("Should allow if no content-type present", control.filterContentType(result));    result.setContentType("text/html; charset=utf-8");    assertTrue("Should allow text/html", control.filterContentType(result));    result.setContentType("text/css");    assertFalse("Should not allow text/css", control.filterContentType(result));}
0
public void testContentTypeExclude() throws Exception
{    SampleResult result = new SampleResult();    control.setContentTypeExclude("text/css");    result.setContentType(null);    assertTrue("Should allow if no content-type present", control.filterContentType(result));    result.setContentType("text/html; charset=utf-8");    assertTrue("Should allow text/html", control.filterContentType(result));    result.setContentType("text/css");    assertFalse("Should not allow text/css", control.filterContentType(result));}
0
public void testContentTypeIncludeAndExclude() throws Exception
{    SampleResult result = new SampleResult();        control.setContentTypeInclude("text/html|text/ascii");    control.setContentTypeExclude("text/css");    result.setContentType(null);    assertTrue("Should allow if no content-type present", control.filterContentType(result));    result.setContentType("text/html; charset=utf-8");    assertTrue("Should allow text/html", control.filterContentType(result));    result.setContentType("text/css");    assertFalse("Should not allow text/css", control.filterContentType(result));    result.setContentType("image/png");    assertFalse("Should not allow image/png", control.filterContentType(result));        control.setContentTypeInclude(null);    control.setContentTypeExclude("image/.*");    result.setContentType(null);    assertTrue("Should allow if no content-type present", control.filterContentType(result));    result.setContentType("text/html; charset=utf-8");    assertTrue("Should allow text/html", control.filterContentType(result));    result.setContentType("text/css");    assertTrue("Should allow text/css", control.filterContentType(result));    result.setContentType("image/png");    assertFalse("Should not allow image/png", control.filterContentType(result));}
0
protected HTTPSampleResult sample(URL u, String method, boolean areFollowingRedirec, int depth)
{    HTTPSampleResult res = new HTTPSampleResult();    res.sampleStart();    res.setURL(u);    res.sampleEnd();    return res;}
0
public boolean interrupt()
{    return hc.interrupt();}
0
protected HTTPSampleResult sample(java.net.URL u, String method, boolean areFollowingRedirect, int depth)
{    return hc.sample(u, method, areFollowingRedirect, depth);}
0
public void testIterationStart(LoopIterationEvent event)
{    hc.notifyFirstSampleAfterLoopRestart();}
0
public void connect()
{}
0
public void setRequestProperty(String name, String value)
{    data.put(name, value);}
0
public String getRequestProperty(String name)
{    return (String) data.get(name);}
0
public void testConfiguring() throws Exception
{    HTTPSamplerBase sampler = (HTTPSamplerBase) new HttpTestSampleGui().createTestElement();    configure(sampler);}
0
private void configure(HTTPSamplerBase sampler) throws Exception
{    sampler.addArgument("arg1", "val1");    ConfigTestElement config = (ConfigTestElement) new HttpDefaultsGui().createTestElement();    ((Arguments) config.getProperty(HTTPSamplerBase.ARGUMENTS).getObjectValue()).addArgument(new HTTPArgument("config1", "configValue"));    config.setRunningVersion(true);    sampler.setRunningVersion(true);    sampler.setRunningVersion(true);    sampler.addTestElement(config);    assertEquals("config1=configValue", sampler.getArguments().getArgument(1).toString());    sampler.recoverRunningVersion();    config.recoverRunningVersion();    assertEquals(1, sampler.getArguments().getArgumentCount());    sampler.addTestElement(config);    assertEquals("config1=configValue", sampler.getArguments().getArgument(1).toString());}
0
private void configureStubs(WireMockServer server)
{    server.stubFor(WireMock.get("/index.html").willReturn(WireMock.aResponse().withHeader("Content-Type", "text/html; encoding=utf-8").withBody("<html><body><img src='image1.png'><img src='image2.png'><img src='image3.png'></body>")));    for (int i = 1; i <= 3; i++) {        server.stubFor(WireMock.get("/image" + i + ".png").willReturn(WireMock.aResponse().withHeader("Content-Type", "image/png").withBody("content" + i)));    }}
0
public void test(String httpImplementation, WireMockServer server, JMeterVariables vars) throws SocketException
{    configureStubs(server);    HTTPSamplerBase http = HTTPSamplerFactory.newInstance(httpImplementation);    Optional<InterfaceAddress> localIp = Collections.list(NetworkInterface.getNetworkInterfaces()).stream().filter(networkInterface -> {        try {            return networkInterface.isLoopback();        } catch (SocketException e) {            return false;        }    }).flatMap(ni -> ni.getInterfaceAddresses().stream()).findFirst();    if (!localIp.isPresent()) {                Assertions.fail("Unable to find local IP to use as a source IP");    }    vars.put("IP_ADDR", localIp.get().getAddress().getHostAddress());        HTTPSamplerBase.registerParser("text/html", LagartoBasedHtmlParser.class.getName());    http.setConnectTimeout("2000");    http.setResponseTimeout("4000");    http.setMethod(HTTPConstants.GET);    http.setDomain("localhost");    http.setPort(server.port());    http.setPath("/index.html");    http.setFollowRedirects(true);    http.setUseKeepAlive(true);    http.setProperty(new FunctionProperty(HTTPSampler.IP_SOURCE, new CompoundVariable("${IP_ADDR}")));    http.setImageParser(true);    http.setConcurrentDwn(true);    http.setConcurrentPool("6");    http.setEmbeddedUrlRE(".*image.*");    http.setRunningVersion(true);    SampleResult result = http.sample();    Assertions.assertEquals("url: http://wiremock/index.html\n" + "response: OK\n" + "data.size: 85\n" + "data: <html><body><img src='image1.png'><img src='image2.png'><img src='image3.png'></body>\n" + "- url: http://wiremock/image1.png\n" + "  response: OK\n" + "  data.size: 8\n" + "  data: content1\n" + "- url: http://wiremock/image2.png\n" + "  response: OK\n" + "  data.size: 8\n" + "  data: content2\n" + "- url: http://wiremock/image3.png\n" + "  response: OK\n" + "  data.size: 8\n" + "  data: content3\n" + "- url: http://wiremock/index.html\n" + "  response: OK\n" + "  data.size: 85\n" + "  data: <html><body><img src='image1.png'><img src='image2.png'><img src='image3.png'></body>\n".replaceAll("\n", System.lineSeparator()), ResultAsString.toString(result).replaceAll(server.baseUrl(), "http://wiremock"));}
0
public void setUp() throws Exception
{    establishConnection();        sampler = new HTTPSampler();    postWriter = new PostWriter();        TEST_FILE_CONTENT = "foo content &?=01234+56789-\u007c\u2aa1\u266a\u0153\u20a1\u0115\u0364\u00c5\u2052".getBytes(UTF_8);            temporaryFile = File.createTempFile("foo", "txt");    OutputStream output = null;    try {        output = new FileOutputStream(temporaryFile);        output.write(TEST_FILE_CONTENT);        output.flush();    } finally {        JOrphanUtils.closeQuietly(output);    }}
0
public void tearDown() throws Exception
{        if (!temporaryFile.delete()) {        fail("Could not delete file:" + temporaryFile.getAbsolutePath());    }}
0
public void testSendPostData() throws IOException
{    sampler.setMethod(HTTPConstants.POST);    setupFilepart(sampler);    String titleValue = "mytitle";    String descriptionValue = "mydescription";    setupFormData(sampler, titleValue, descriptionValue);        String contentEncoding = "";    sampler.setContentEncoding(contentEncoding);    postWriter.setHeaders(connection, sampler);    postWriter.sendPostData(connection, sampler);    checkContentTypeMultipart(connection, PostWriter.BOUNDARY);    byte[] expectedFormBody = createExpectedOutput(PostWriter.BOUNDARY, null, titleValue, descriptionValue, TEST_FILE_CONTENT);    checkContentLength(connection, expectedFormBody.length);    checkArraysHaveSameContent(expectedFormBody, connection.getOutputStreamContent());    connection.disconnect();        establishConnection();    contentEncoding = "ISO-8859-1";    sampler.setContentEncoding(contentEncoding);    postWriter.setHeaders(connection, sampler);    postWriter.sendPostData(connection, sampler);    checkContentTypeMultipart(connection, PostWriter.BOUNDARY);    expectedFormBody = createExpectedOutput(PostWriter.BOUNDARY, contentEncoding, titleValue, descriptionValue, TEST_FILE_CONTENT);    checkContentLength(connection, expectedFormBody.length);    checkArraysHaveSameContent(expectedFormBody, connection.getOutputStreamContent());    connection.disconnect();        establishConnection();    titleValue = "mytitle\u0153\u20a1\u0115\u00c5";    descriptionValue = "mydescription\u0153\u20a1\u0115\u00c5";    contentEncoding = UTF_8;    sampler.setContentEncoding(contentEncoding);    setupFormData(sampler, titleValue, descriptionValue);    postWriter.setHeaders(connection, sampler);    postWriter.sendPostData(connection, sampler);    checkContentTypeMultipart(connection, PostWriter.BOUNDARY);    expectedFormBody = createExpectedOutput(PostWriter.BOUNDARY, contentEncoding, titleValue, descriptionValue, TEST_FILE_CONTENT);    checkContentLength(connection, expectedFormBody.length);    checkArraysHaveSameContent(expectedFormBody, connection.getOutputStreamContent());    connection.disconnect();        establishConnection();    contentEncoding = UTF_8;    sampler.setContentEncoding("ISO-8859-1");    postWriter.setHeaders(connection, sampler);    postWriter.sendPostData(connection, sampler);    checkContentTypeMultipart(connection, PostWriter.BOUNDARY);    expectedFormBody = createExpectedOutput(PostWriter.BOUNDARY, contentEncoding, titleValue, descriptionValue, TEST_FILE_CONTENT);    checkContentLength(connection, expectedFormBody.length);    checkArraysHaveDifferentContent(expectedFormBody, connection.getOutputStreamContent());    connection.disconnect();}
0
public void testSendPostData_NoFilename() throws IOException
{    setupNoFilename(sampler);    sampler.setMethod(HTTPConstants.POST);    String titleValue = "mytitle";    String descriptionValue = "mydescription";    setupFormData(sampler, titleValue, descriptionValue);        String contentEncoding = "";    sampler.setContentEncoding(contentEncoding);    postWriter.setHeaders(connection, sampler);    postWriter.sendPostData(connection, sampler);    checkNoContentType(connection);        byte[] expectedUrl = "title=mytitle&description=mydescription".getBytes();    checkContentLength(connection, expectedUrl.length);    checkArraysHaveSameContent(expectedUrl, connection.getOutputStreamContent());    expectedUrl = "title=mytitle&description=mydescription".getBytes(UTF_8);    checkContentLength(connection, expectedUrl.length);    checkArraysHaveSameContent(expectedUrl, connection.getOutputStreamContent());    connection.disconnect();        establishConnection();    contentEncoding = "ISO-8859-1";    sampler.setContentEncoding(contentEncoding);    postWriter.setHeaders(connection, sampler);    postWriter.sendPostData(connection, sampler);    checkNoContentType(connection);    expectedUrl = "title=mytitle&description=mydescription".getBytes(contentEncoding);    checkContentLength(connection, expectedUrl.length);    checkArraysHaveSameContent(expectedUrl, connection.getOutputStreamContent());    expectedUrl = "title=mytitle&description=mydescription".getBytes(UTF_8);    checkContentLength(connection, expectedUrl.length);    checkArraysHaveSameContent(expectedUrl, connection.getOutputStreamContent());    connection.disconnect();}
0
public void testSendPostData_FileAsBody() throws IOException
{    sampler.setMethod(HTTPConstants.POST);    setupFilepart(sampler, "", temporaryFile, "");        postWriter.setHeaders(connection, sampler);    postWriter.sendPostData(connection, sampler);    checkContentLength(connection, TEST_FILE_CONTENT.length);    checkArraysHaveSameContent(TEST_FILE_CONTENT, connection.getOutputStreamContent());    connection.disconnect();        String otherEncoding;        final String fileEncoding = System.getProperty("file.encoding");        if (UTF_8.equalsIgnoreCase(fileEncoding) || "UTF8".equalsIgnoreCase(fileEncoding)) {                        otherEncoding = "ISO-8859-1";    } else {        otherEncoding = UTF_8;    }        establishConnection();    sampler.setContentEncoding(otherEncoding);        postWriter.setHeaders(connection, sampler);    postWriter.sendPostData(connection, sampler);    checkContentLength(connection, TEST_FILE_CONTENT.length);    checkArraysHaveSameContent(TEST_FILE_CONTENT, connection.getOutputStreamContent());        checkArraysHaveDifferentContent(    new String(TEST_FILE_CONTENT).getBytes(otherEncoding), connection.getOutputStreamContent());        setupFormData(sampler);    establishConnection();    sampler.setContentEncoding("");    postWriter.setHeaders(connection, sampler);    postWriter.sendPostData(connection, sampler);    checkNoContentType(connection);        byte[] expectedUrl = "title=mytitle&description=mydescription".getBytes();    checkContentLength(connection, expectedUrl.length);    checkArraysHaveSameContent(expectedUrl, connection.getOutputStreamContent());}
1
public void testSendFileData_Multipart() throws IOException
{    sampler.setMethod(HTTPConstants.POST);    String fileField = "upload";    String mimeType = "text/plain";    File file = temporaryFile;    byte[] fileContent = TEST_FILE_CONTENT;    setupFilepart(sampler, fileField, file, mimeType);        String contentEncoding = "";    sampler.setContentEncoding(contentEncoding);    postWriter.setHeaders(connection, sampler);    postWriter.sendPostData(connection, sampler);    checkContentTypeMultipart(connection, PostWriter.BOUNDARY);    byte[] expectedFormBody = createExpectedFilepartOutput(PostWriter.BOUNDARY, fileField, file, mimeType, fileContent, true, true);    checkContentLength(connection, expectedFormBody.length);    checkArraysHaveSameContent(expectedFormBody, connection.getOutputStreamContent());    connection.disconnect();        establishConnection();    contentEncoding = "ISO-8859-1";    sampler.setContentEncoding(contentEncoding);    postWriter.setHeaders(connection, sampler);    postWriter.sendPostData(connection, sampler);    checkContentTypeMultipart(connection, PostWriter.BOUNDARY);    expectedFormBody = createExpectedFilepartOutput(PostWriter.BOUNDARY, fileField, file, mimeType, fileContent, true, true);    checkContentLength(connection, expectedFormBody.length);    checkArraysHaveSameContent(expectedFormBody, connection.getOutputStreamContent());    connection.disconnect();        establishConnection();    fileField = "some_file_field";    mimeType = "image/png";    contentEncoding = UTF_8;    sampler.setContentEncoding(contentEncoding);    setupFilepart(sampler, fileField, file, mimeType);    postWriter.setHeaders(connection, sampler);    postWriter.sendPostData(connection, sampler);    checkContentTypeMultipart(connection, PostWriter.BOUNDARY);    expectedFormBody = createExpectedFilepartOutput(PostWriter.BOUNDARY, fileField, file, mimeType, fileContent, true, true);    checkContentLength(connection, expectedFormBody.length);    checkArraysHaveSameContent(expectedFormBody, connection.getOutputStreamContent());    connection.disconnect();}
0
public void testSendFormData_Multipart() throws IOException
{    sampler.setMethod(HTTPConstants.POST);    String titleField = "title";    String titleValue = "mytitle";    String descriptionField = "description";    String descriptionValue = "mydescription";    setupFormData(sampler, titleValue, descriptionValue);        sampler.setDoMultipart(true);        String contentEncoding = "";    sampler.setContentEncoding(contentEncoding);    postWriter.setHeaders(connection, sampler);    postWriter.sendPostData(connection, sampler);    checkContentTypeMultipart(connection, PostWriter.BOUNDARY);    byte[] expectedFormBody = createExpectedFormdataOutput(PostWriter.BOUNDARY, null, titleField, titleValue, descriptionField, descriptionValue, true, true);    checkContentLength(connection, expectedFormBody.length);    checkArraysHaveSameContent(expectedFormBody, connection.getOutputStreamContent());    connection.disconnect();        establishConnection();    contentEncoding = "ISO-8859-1";    sampler.setContentEncoding(contentEncoding);    postWriter.setHeaders(connection, sampler);    postWriter.sendPostData(connection, sampler);    checkContentTypeMultipart(connection, PostWriter.BOUNDARY);    expectedFormBody = createExpectedFormdataOutput(PostWriter.BOUNDARY, contentEncoding, titleField, titleValue, descriptionField, descriptionValue, true, true);    checkContentLength(connection, expectedFormBody.length);    checkArraysHaveSameContent(expectedFormBody, connection.getOutputStreamContent());    connection.disconnect();        establishConnection();    titleValue = "mytitle+123 456&yes";    descriptionValue = "mydescription and some spaces";    contentEncoding = "ISO-8859-1";    sampler.setContentEncoding(contentEncoding);    setupFormData(sampler, titleValue, descriptionValue);    postWriter.setHeaders(connection, sampler);    postWriter.sendPostData(connection, sampler);    checkContentTypeMultipart(connection, PostWriter.BOUNDARY);    expectedFormBody = createExpectedFormdataOutput(PostWriter.BOUNDARY, contentEncoding, titleField, titleValue, descriptionField, descriptionValue, true, true);    checkContentLength(connection, expectedFormBody.length);    checkArraysHaveSameContent(expectedFormBody, connection.getOutputStreamContent());    connection.disconnect();        establishConnection();    titleValue = "mytitle\u0153\u20a1\u0115\u00c5";    descriptionValue = "mydescription\u0153\u20a1\u0115\u00c5";    contentEncoding = UTF_8;    sampler.setContentEncoding(contentEncoding);    setupFormData(sampler, titleValue, descriptionValue);    postWriter.setHeaders(connection, sampler);    postWriter.sendPostData(connection, sampler);    checkContentTypeMultipart(connection, PostWriter.BOUNDARY);    expectedFormBody = createExpectedFormdataOutput(PostWriter.BOUNDARY, contentEncoding, titleField, titleValue, descriptionField, descriptionValue, true, true);    checkContentLength(connection, expectedFormBody.length);    checkArraysHaveSameContent(expectedFormBody, connection.getOutputStreamContent());    connection.disconnect();            establishConnection();    titleValue = "mytitle\u0153+\u20a1 \u0115&yes\u00c5";    descriptionValue = "mydescription \u0153 \u20a1 \u0115 \u00c5";    contentEncoding = UTF_8;    sampler.setContentEncoding(contentEncoding);    setupFormData(sampler, titleValue, descriptionValue);    postWriter.setHeaders(connection, sampler);    postWriter.sendPostData(connection, sampler);    checkContentTypeMultipart(connection, PostWriter.BOUNDARY);    expectedFormBody = createExpectedFormdataOutput(PostWriter.BOUNDARY, contentEncoding, titleField, titleValue, descriptionField, descriptionValue, true, true);    checkContentLength(connection, expectedFormBody.length);    checkArraysHaveSameContent(expectedFormBody, connection.getOutputStreamContent());    connection.disconnect();}
0
public void testSendFormData_Urlencoded() throws IOException
{    String titleValue = "mytitle";    String descriptionValue = "mydescription";    setupFormData(sampler, titleValue, descriptionValue);        String contentEncoding = "";    sampler.setContentEncoding(contentEncoding);    sampler.setMethod(HTTPConstants.POST);    postWriter.setHeaders(connection, sampler);    postWriter.sendPostData(connection, sampler);    checkNoContentType(connection);    byte[] expectedUrl = ("title=" + titleValue + "&description=" + descriptionValue).getBytes("US-ASCII");    checkContentLength(connection, expectedUrl.length);    checkArraysHaveSameContent(expectedUrl, connection.getOutputStreamContent());    assertEquals(URLDecoder.decode(new String(expectedUrl, "US-ASCII"), "ISO-8859-1"), URLDecoder.decode(new String(connection.getOutputStreamContent(), "US-ASCII"), "ISO-8859-1"));    connection.disconnect();        establishConnection();    contentEncoding = "ISO-8859-1";    sampler.setContentEncoding(contentEncoding);    postWriter.setHeaders(connection, sampler);    postWriter.sendPostData(connection, sampler);    checkNoContentType(connection);    expectedUrl = new StringBuilder("title=").append(titleValue).append("&description=").append(descriptionValue).toString().getBytes("US-ASCII");    checkContentLength(connection, expectedUrl.length);    checkArraysHaveSameContent(expectedUrl, connection.getOutputStreamContent());    assertEquals(URLDecoder.decode(new String(expectedUrl, "US-ASCII"), contentEncoding), URLDecoder.decode(new String(connection.getOutputStreamContent(), "US-ASCII"), contentEncoding));    connection.disconnect();        establishConnection();    titleValue = "mytitle+123 456&yes";    descriptionValue = "mydescription and some spaces";    contentEncoding = "ISO-8859-1";    sampler.setContentEncoding(contentEncoding);    setupFormData(sampler, titleValue, descriptionValue);    postWriter.setHeaders(connection, sampler);    postWriter.sendPostData(connection, sampler);    checkNoContentType(connection);    String expectedString = "title=" + URLEncoder.encode(titleValue, contentEncoding) + "&description=" + URLEncoder.encode(descriptionValue, contentEncoding);    expectedUrl = expectedString.getBytes(contentEncoding);    checkContentLength(connection, expectedUrl.length);    checkArraysHaveSameContent(expectedUrl, connection.getOutputStreamContent());    assertEquals(URLDecoder.decode(new String(expectedUrl, "US-ASCII"), contentEncoding), URLDecoder.decode(new String(connection.getOutputStreamContent(), "US-ASCII"), contentEncoding));    String unencodedString = "title=" + titleValue + "&description=" + descriptionValue;    byte[] unexpectedUrl = unencodedString.getBytes(UTF_8);    checkArraysHaveDifferentContent(unexpectedUrl, connection.getOutputStreamContent());    connection.disconnect();        establishConnection();    titleValue = "mytitle\u0153\u20a1\u0115\u00c5";    descriptionValue = "mydescription\u0153\u20a1\u0115\u00c5";    contentEncoding = UTF_8;    sampler.setContentEncoding(contentEncoding);    setupFormData(sampler, titleValue, descriptionValue);    postWriter.setHeaders(connection, sampler);    postWriter.sendPostData(connection, sampler);    checkNoContentType(connection);    expectedString = "title=" + URLEncoder.encode(titleValue, contentEncoding) + "&description=" + URLEncoder.encode(descriptionValue, contentEncoding);    expectedUrl = expectedString.getBytes("US-ASCII");    checkContentLength(connection, expectedUrl.length);    checkArraysHaveSameContent(expectedUrl, connection.getOutputStreamContent());    assertEquals(URLDecoder.decode(new String(expectedUrl, "US-ASCII"), contentEncoding), URLDecoder.decode(new String(connection.getOutputStreamContent(), "US-ASCII"), contentEncoding));    connection.disconnect();        establishConnection();    titleValue = "mytitle\u0153+\u20a1 \u0115&yes\u00c5";    descriptionValue = "mydescription \u0153 \u20a1 \u0115 \u00c5";    contentEncoding = UTF_8;    sampler.setContentEncoding(contentEncoding);    setupFormData(sampler, titleValue, descriptionValue);    postWriter.setHeaders(connection, sampler);    postWriter.sendPostData(connection, sampler);    checkNoContentType(connection);    expectedString = "title=" + URLEncoder.encode(titleValue, UTF_8) + "&description=" + URLEncoder.encode(descriptionValue, UTF_8);    expectedUrl = expectedString.getBytes("US-ASCII");    checkContentLength(connection, expectedUrl.length);    checkArraysHaveSameContent(expectedUrl, connection.getOutputStreamContent());    assertEquals(URLDecoder.decode(new String(expectedUrl, "US-ASCII"), contentEncoding), URLDecoder.decode(new String(connection.getOutputStreamContent(), "US-ASCII"), contentEncoding));    unencodedString = "title=" + titleValue + "&description=" + descriptionValue;    unexpectedUrl = unencodedString.getBytes("US-ASCII");    checkArraysHaveDifferentContent(unexpectedUrl, connection.getOutputStreamContent());    connection.disconnect();                    titleValue = "mytitle%20and%20space%2Ftest%C3%85";    descriptionValue = "mydescription+and+plus+as+space%2Ftest%C3%85";    setupFormData(sampler, true, titleValue, descriptionValue);        establishConnection();    contentEncoding = "";    sampler.setContentEncoding(contentEncoding);    postWriter.setHeaders(connection, sampler);    postWriter.sendPostData(connection, sampler);    checkNoContentType(connection);    StringBuilder sb = new StringBuilder();    expectedUrl = sb.append("title=").append(titleValue.replaceAll("%20", "+").replaceAll("%C3%85", "%C5")).append("&description=").append(descriptionValue.replaceAll("%C3%85", "%C5")).toString().getBytes("US-ASCII");    checkContentLength(connection, expectedUrl.length);    checkArraysHaveSameContent(expectedUrl, connection.getOutputStreamContent());    assertEquals(    URLDecoder.decode(new String(expectedUrl, "US-ASCII"), "ISO-8859-1"), URLDecoder.decode(new String(connection.getOutputStreamContent(), "US-ASCII"), "ISO-8859-1"));    connection.disconnect();        establishConnection();    contentEncoding = "ISO-8859-1";    sampler.setContentEncoding(contentEncoding);    postWriter.setHeaders(connection, sampler);    postWriter.sendPostData(connection, sampler);    checkNoContentType(connection);    sb = new StringBuilder();    expectedUrl = sb.append("title=").append(titleValue.replaceAll("%20", "+").replaceAll("%C3%85", "%C5")).append("&description=").append(descriptionValue.replaceAll("%C3%85", "%C5")).toString().getBytes("US-ASCII");    checkContentLength(connection, expectedUrl.length);    checkArraysHaveSameContent(expectedUrl, connection.getOutputStreamContent());    assertEquals(URLDecoder.decode(new String(expectedUrl, "US-ASCII"), contentEncoding), URLDecoder.decode(new String(connection.getOutputStreamContent(), "US-ASCII"), contentEncoding));    connection.disconnect();        establishConnection();    contentEncoding = UTF_8;    sampler.setContentEncoding(contentEncoding);    postWriter.setHeaders(connection, sampler);    postWriter.sendPostData(connection, sampler);    checkNoContentType(connection);    sb = new StringBuilder();    expectedUrl = sb.append("title=").append(titleValue.replaceAll("%20", "+")).append("&description=").append(descriptionValue).toString().getBytes("US-ASCII");    checkContentLength(connection, expectedUrl.length);    checkArraysHaveSameContent(expectedUrl, connection.getOutputStreamContent());    assertEquals(URLDecoder.decode(new String(expectedUrl, "US-ASCII"), contentEncoding), URLDecoder.decode(new String(connection.getOutputStreamContent(), "US-ASCII"), contentEncoding));    connection.disconnect();}
0
public void testSetHeaders() throws IOException
{    sampler.setMethod(HTTPConstants.POST);    setupFilepart(sampler);    setupFormData(sampler);    postWriter.setHeaders(connection, sampler);    checkContentTypeMultipart(connection, PostWriter.BOUNDARY);}
0
public void testSetHeaders_NoFilename() throws IOException
{    sampler.setMethod(HTTPConstants.POST);    setupNoFilename(sampler);    setupFormData(sampler);    postWriter.setHeaders(connection, sampler);    checkNoContentType(connection);    checkContentLength(connection, "title=mytitle&description=mydescription".length());}
0
private void setupNoFilename(HTTPSampler httpSampler)
{    setupFilepart(sampler, "upload", null, "application/octet-stream");}
0
private void setupFilepart(HTTPSampler httpSampler)
{    setupFilepart(sampler, "upload", temporaryFile, "text/plain");}
0
private void setupFilepart(HTTPSampler httpSampler, String fileField, File file, String mimeType)
{    HTTPFileArg[] hfa = { new HTTPFileArg(file == null ? "" : file.getAbsolutePath(), fileField, mimeType) };    httpSampler.setHTTPFiles(hfa);}
0
private void setupFormData(HTTPSampler httpSampler)
{    setupFormData(httpSampler, "mytitle", "mydescription");}
0
private void setupFormData(HTTPSampler httpSampler, String titleValue, String descriptionValue)
{    setupFormData(sampler, false, titleValue, descriptionValue);}
0
private void setupFormData(HTTPSampler httpSampler, boolean isEncoded, String titleValue, String descriptionValue)
{    Arguments args = new Arguments();    HTTPArgument argument1 = new HTTPArgument("title", titleValue, isEncoded);    HTTPArgument argument2 = new HTTPArgument("description", descriptionValue, isEncoded);    args.addArgument(argument1);    args.addArgument(argument2);    httpSampler.setArguments(args);}
0
private void establishConnection() throws MalformedURLException
{    connection = new StubURLConnection("http://fake_url/test");}
0
private byte[] createExpectedOutput(String boundaryString, String contentEncoding, String titleValue, String descriptionValue, byte[] fileContent) throws IOException
{    return createExpectedOutput(boundaryString, contentEncoding, "title", titleValue, "description", descriptionValue, "upload", fileContent);}
0
private byte[] createExpectedOutput(String boundaryString, String contentEncoding, String titleField, String titleValue, String descriptionField, String descriptionValue, String fileField, byte[] fileContent) throws IOException
{        byte[] formdataMultipart = createExpectedFormdataOutput(boundaryString, contentEncoding, titleField, titleValue, descriptionField, descriptionValue, true, false);    byte[] fileMultipart = createExpectedFilepartOutput(boundaryString, fileField, temporaryFile, "text/plain", fileContent, false, true);        ByteArrayOutputStream output = new ByteArrayOutputStream();    output.write(formdataMultipart);    output.write(fileMultipart);    output.flush();    output.close();    return output.toByteArray();}
0
private byte[] createExpectedFormdataOutput(String boundaryString, String contentEncoding, String titleField, String titleValue, String descriptionField, String descriptionValue, boolean firstMultipart, boolean lastMultipart) throws IOException
{    final byte[] DASH_DASH = "--".getBytes(HTTP_ENCODING);            final String mimeType = "text/plain";    final ByteArrayOutputStream output = new ByteArrayOutputStream();    if (firstMultipart) {        output.write(DASH_DASH);        output.write(boundaryString.getBytes(HTTP_ENCODING));        output.write(CRLF);    }    output.write("Content-Disposition: form-data; name=\"".getBytes(HTTP_ENCODING));    output.write(titleField.getBytes(HTTP_ENCODING));    output.write("\"".getBytes(HTTP_ENCODING));    output.write(CRLF);    output.write("Content-Type: ".getBytes(HTTP_ENCODING));    output.write(mimeType.getBytes(HTTP_ENCODING));    output.write("; charset=".getBytes(HTTP_ENCODING));    output.write((contentEncoding == null ? PostWriter.ENCODING : contentEncoding).getBytes(HTTP_ENCODING));    output.write(CRLF);    output.write("Content-Transfer-Encoding: 8bit".getBytes(HTTP_ENCODING));    output.write(CRLF);    output.write(CRLF);    if (contentEncoding != null) {        output.write(titleValue.getBytes(contentEncoding));    } else {                output.write(titleValue.getBytes());    }    output.write(CRLF);    output.write(DASH_DASH);    output.write(boundaryString.getBytes(HTTP_ENCODING));    output.write(CRLF);    output.write("Content-Disposition: form-data; name=\"".getBytes(HTTP_ENCODING));    output.write(descriptionField.getBytes(HTTP_ENCODING));    output.write("\"".getBytes(HTTP_ENCODING));    output.write(CRLF);    output.write("Content-Type: ".getBytes(HTTP_ENCODING));    output.write(mimeType.getBytes(HTTP_ENCODING));    output.write("; charset=".getBytes(HTTP_ENCODING));    output.write((contentEncoding == null ? PostWriter.ENCODING : contentEncoding).getBytes(HTTP_ENCODING));    output.write(CRLF);    output.write("Content-Transfer-Encoding: 8bit".getBytes(HTTP_ENCODING));    output.write(CRLF);    output.write(CRLF);    if (contentEncoding != null) {        output.write(descriptionValue.getBytes(contentEncoding));    } else {                output.write(descriptionValue.getBytes());    }    output.write(CRLF);    output.write(DASH_DASH);    output.write(boundaryString.getBytes(HTTP_ENCODING));    if (lastMultipart) {        output.write(DASH_DASH);    }    output.write(CRLF);    output.flush();    output.close();    return output.toByteArray();}
0
private byte[] createExpectedFilepartOutput(String boundaryString, String fileField, File file, String mimeType, byte[] fileContent, boolean firstMultipart, boolean lastMultipart) throws IOException
{        final String httpEncoding = "ISO-8859-1";    final byte[] DASH_DASH = "--".getBytes(httpEncoding);    final ByteArrayOutputStream output = new ByteArrayOutputStream();    if (firstMultipart) {        output.write(DASH_DASH);        output.write(boundaryString.getBytes(httpEncoding));        output.write(CRLF);    }        String filename = file.getName();    output.write("Content-Disposition: form-data; name=\"".getBytes(httpEncoding));    output.write(fileField.getBytes(httpEncoding));    output.write(("\"; filename=\"" + filename + "\"").getBytes(httpEncoding));    output.write(CRLF);    output.write("Content-Type: ".getBytes(httpEncoding));    output.write(mimeType.getBytes(httpEncoding));    output.write(CRLF);    output.write("Content-Transfer-Encoding: binary".getBytes(httpEncoding));    output.write(CRLF);    output.write(CRLF);    output.write(fileContent);    output.write(CRLF);    output.write(DASH_DASH);    output.write(boundaryString.getBytes(httpEncoding));    if (lastMultipart) {        output.write(DASH_DASH);    }    output.write(CRLF);    output.flush();    output.close();    return output.toByteArray();}
0
private void checkArraysHaveSameContent(byte[] expected, byte[] actual) throws UnsupportedEncodingException
{    if (expected != null && actual != null) {        if (expected.length != actual.length) {            System.out.println(new String(expected, UTF_8));            System.out.println("--------------------");            System.out.println(new String(actual, UTF_8));            System.out.println("====================");            fail("arrays have different length, expected is " + expected.length + ", actual is " + actual.length);        } else {            for (int i = 0; i < expected.length; i++) {                if (expected[i] != actual[i]) {                    System.out.println(new String(expected, 0, i + 1, UTF_8));                    System.out.println("--------------------");                    System.out.println(new String(actual, 0, i + 1, UTF_8));                    System.out.println("====================");                    fail("byte at position " + i + " is different, expected is " + expected[i] + ", actual is " + actual[i]);                }            }        }    } else {        fail("expected or actual byte arrays were null");    }}
0
private void checkArraysHaveDifferentContent(byte[] expected, byte[] actual)
{    if (expected != null && actual != null) {        if (expected.length == actual.length) {            boolean allSame = true;            for (int i = 0; i < expected.length; i++) {                if (expected[i] != actual[i]) {                    allSame = false;                    break;                }            }            if (allSame) {                fail("all bytes were equal");            }        }    } else {        fail("expected or actual byte arrays were null");    }}
0
private void checkContentTypeMultipart(HttpURLConnection conn, String boundaryString)
{    assertEquals("multipart/form-data; boundary=" + boundaryString, conn.getRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE));}
0
private void checkNoContentType(HttpURLConnection conn)
{    assertNull(conn.getRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE));}
0
private void checkContentTypeUrlEncoded(HttpURLConnection conn)
{    assertEquals(HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED, conn.getRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE));}
0
private void checkContentLength(HttpURLConnection conn, int length)
{    assertEquals(Integer.toString(length), conn.getRequestProperty(HTTPConstants.HEADER_CONTENT_LENGTH));}
0
public void connect() throws IOException
{}
0
public OutputStream getOutputStream() throws IOException
{    return output;}
0
public void disconnect()
{}
0
public boolean usingProxy()
{    return false;}
0
public String getRequestProperty(String key)
{    return properties.get(key);}
0
public void setRequestProperty(String key, String value)
{    properties.put(key, value);}
0
public byte[] getOutputStreamContent()
{    return output.toByteArray();}
0
public void testSetHeadersWithNoParams() throws Exception
{    URLConnection uc = new NullURLConnection();    HTTPSampler sampler = new HTTPSampler();    sampler.setHTTPFiles(new HTTPFileArg[] { new HTTPFileArg("file1", "", "mime1") });    PutWriter pw = new PutWriter();    pw.setHeaders(uc, sampler);    assertEquals("mime1", uc.getRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE));}
0
public void testSetHeadersWithParams() throws Exception
{    URLConnection uc = new NullURLConnection();    HTTPSampler sampler = new HTTPSampler();    sampler.setHTTPFiles(new HTTPFileArg[] { new HTTPFileArg("file2", "param2", "mime2") });    Arguments arguments = new Arguments();    arguments.addArgument(new HTTPArgument("", "parameter with no name"));    sampler.setArguments(arguments);    PutWriter pw = new PutWriter();    pw.setHeaders(uc, sampler);    assertEquals("mime2", uc.getRequestProperty(HTTPConstants.HEADER_CONTENT_TYPE));}
0
public static String toString(SampleResult result)
{    StringWriter sw = new StringWriter();    try (PrintWriter pw = new PrintWriter(sw)) {        toString(pw, 0, result);    }    return sw.toString();}
0
private static void toString(PrintWriter pw, int indent, SampleResult result)
{    URL url = result.getURL();    if (indent > 0) {        indent(pw, indent - 2).append("- ");    } else {        indent(pw, indent);    }    if (url != null) {        pw.append("url: ").println(url);        indent(pw, indent);    }    pw.append("response: ").println(result.getResponseMessage());    byte[] responseData = result.getResponseData();    if (responseData != null) {        indent(pw, indent).append("data.size: ").println(responseData.length);        indent(pw, indent).append("data: ").println(result.getResponseDataAsString());    }    SampleResult[] subResults = result.getSubResults();    Arrays.sort(subResults, ORDER);    for (SampleResult subResult : subResults) {        toString(pw, indent + 2, subResult);    }}
0
private static PrintWriter indent(PrintWriter pw, int indent)
{    for (int i = 0; i < indent; i++) {        pw.append(" ");    }    return pw;}
0
public static final String[] getImplementations()
{    return new String[] { HTTPSamplerFactory.IMPL_HTTP_CLIENT4, HTTPSamplerFactory.IMPL_JAVA };}
0
public void testBug63364()
{    TestPlan plan = new TestPlan();    SampleResult[] subResults = doSample(implementation);    Assert.assertTrue("We should have at least one sample result, we had none", subResults.length > 0);    for (int i = 0; i < subResults.length; i++) {        assertEquals("Expected sample label to be " + LABEL + "-" + i, LABEL + "-" + i, subResults[i].getSampleLabel());    }    final boolean prevValue = TestPlan.getFunctionalMode();    plan.setFunctionalMode(true);    try {        subResults = doSample(implementation);        Assert.assertTrue("We should have at least one sample result, we had none", subResults.length > 0);        for (int i = 0; i < subResults.length; i++) {            Assert.assertTrue("Expected sample label to start with " + JMETER_HOME_PAGE, subResults[i].getSampleLabel().startsWith(JMETER_HOME_PAGE));        }    } finally {        plan.setFunctionalMode(prevValue);    }}
0
private SampleResult[] doSample(String implementation)
{    HTTPSamplerProxy httpSamplerProxy = new HTTPSamplerProxy(implementation);    httpSamplerProxy.setName(LABEL);    httpSamplerProxy.setConnectTimeout("15000");    httpSamplerProxy.setResponseTimeout("10000");    httpSamplerProxy.setImageParser(true);    httpSamplerProxy.setMethod("GET");    httpSamplerProxy.setPath(JMETER_HOME_PAGE);        httpSamplerProxy.setEmbeddedUrlRE(JMETER_HOME_PAGE + ".*");    SampleResult result = httpSamplerProxy.sample();    assertEquals("Expected sample label to be " + LABEL, LABEL, result.getSampleLabel());    return result.getSubResults();}
0
public static List<Arguments> mockServerParams()
{    List<Arguments> res = new ArrayList<>();        Arrays.stream(HTTPSamplerFactory.getImplementations()).forEach(httpImpl -> {        for (ClientGzip clientGzip : ClientGzip.values()) {            for (ServerGzip serverGzip : ServerGzip.values()) {                res.add(Arguments.of(httpImpl, clientGzip, serverGzip));            }        }    });    return res;}
0
public void mockServer(String httpImpl, ClientGzip clientGzip, ServerGzip serverGzip) throws MalformedURLException
{    WireMockServer server = createServer(c -> c.gzipDisabled(serverGzip == ServerGzip.NOT_SUPPORTED));    server.start();    try {        HTTPSamplerBase http = HTTPSamplerFactory.newInstance(httpImpl);        String expectedResponse = "Hello, 丈, \uD83D\uDE03, and नि";        HeaderManager hm = new HeaderManager();        if (clientGzip == ClientGzip.REQUESTED) {            hm.add(new Header("Accept-Encoding", "gzip"));        }        hm.add(new Header("Content-Encoding", "utf-8"));        http.setHeaderManager(hm);        MappingBuilder mappingBuilder = WireMock.get("/gzip");        if (clientGzip == ClientGzip.REQUESTED) {            mappingBuilder = mappingBuilder.withHeader("Accept-Encoding", WireMock.equalTo("gzip"));        }        server.stubFor(mappingBuilder.willReturn(WireMock.aResponse().withBody(expectedResponse).withHeader("Content-Type", "text/plain;charset=utf-8")));        HTTPSampleResult res = http.sample(new URL(server.url("/gzip")), "GET", false, 1);        Assertions.assertAll(() -> {            Matcher<String> matcher;            if (clientGzip == ClientGzip.NOT_REQUESTED || serverGzip == ServerGzip.NOT_SUPPORTED) {                matcher = Matchers.not(Matchers.containsStringIgnoringCase("Content-Encoding:"));            } else {                matcher = Matchers.containsStringIgnoringCase("Content-Encoding: gzip");            }            MatcherAssert.assertThat("getResponseHeaders", res.getResponseHeaders(), matcher);        }, () -> {            Assertions.assertEquals(expectedResponse, res.getResponseDataAsString(), "response body");        });    } finally {        server.stop();    }}
0
private WireMockServer createServer(Consumer<WireMockConfiguration> config)
{    WireMockConfiguration configuration = WireMockConfiguration.wireMockConfig().dynamicPort();    config.accept(configuration);    return new WireMockServer(configuration);}
0
public void setUp()
{    jmctx = JMeterContextService.getContext();    jmvars = new JMeterVariables();}
0
public void testNotifyFirstSampleAfterLoopRestartWhenThreadIterationIsSameUser()
{    jmvars.putObject(SAME_USER, true);    jmctx.setVariables(jmvars);    HTTPSamplerBase sampler = (HTTPSamplerBase) new HttpTestSampleGui().createTestElement();    sampler.setThreadContext(jmctx);    HTTPHC4Impl hc = new HTTPHC4Impl(sampler);    hc.notifyFirstSampleAfterLoopRestart();    assertFalse("User is the same, the state shouldn't be reset", HTTPHC4Impl.resetStateOnThreadGroupIteration.get());}
0
public void testNotifyFirstSampleAfterLoopRestartWhenThreadIterationIsANewUser()
{    jmvars.putObject(SAME_USER, false);    jmctx.setVariables(jmvars);    HTTPSamplerBase sampler = (HTTPSamplerBase) new HttpTestSampleGui().createTestElement();    sampler.setThreadContext(jmctx);    HTTPHC4Impl hc = new HTTPHC4Impl(sampler);    hc.notifyFirstSampleAfterLoopRestart();    assertTrue("Users are different, the state should be reset", HTTPHC4Impl.resetStateOnThreadGroupIteration.get());}
0
public void testParseArguments()
{    HTTPSamplerBase sampler = new HTTPNullSampler();    Arguments args;    Argument arg;    args = sampler.getArguments();    assertEquals(0, args.getArgumentCount());    assertEquals(0, sampler.getHTTPFileCount());    sampler.parseArguments("");    args = sampler.getArguments();    assertEquals(0, args.getArgumentCount());    assertEquals(0, sampler.getHTTPFileCount());    sampler.parseArguments("name1");    args = sampler.getArguments();    assertEquals(1, args.getArgumentCount());    arg = args.getArgument(0);    assertEquals("name1", arg.getName());    assertEquals("", arg.getMetaData());    assertEquals("", arg.getValue());    assertEquals(0, sampler.getHTTPFileCount());    sampler.parseArguments("name2=");    args = sampler.getArguments();    assertEquals(2, args.getArgumentCount());    arg = args.getArgument(1);    assertEquals("name2", arg.getName());    assertEquals("=", arg.getMetaData());    assertEquals("", arg.getValue());    assertEquals(0, sampler.getHTTPFileCount());    sampler.parseArguments("name3=value3");    args = sampler.getArguments();    assertEquals(3, args.getArgumentCount());    arg = args.getArgument(2);    assertEquals("name3", arg.getName());    assertEquals("=", arg.getMetaData());    assertEquals("value3", arg.getValue());    assertEquals(0, sampler.getHTTPFileCount());}
0
public void testParseArguments2()
{    HTTPSamplerBase sampler = new HTTPNullSampler();    Arguments args;    Argument arg;    args = sampler.getArguments();    assertEquals(0, args.getArgumentCount());    assertEquals(0, sampler.getHTTPFileCount());    sampler.parseArguments("&name1&name2=&name3=value3");    args = sampler.getArguments();    assertEquals(3, args.getArgumentCount());    assertEquals(0, sampler.getHTTPFileCount());    arg = args.getArgument(0);    assertEquals("name1", arg.getName());    assertEquals("", arg.getMetaData());    assertEquals("", arg.getValue());    assertEquals(0, sampler.getHTTPFileCount());    arg = args.getArgument(1);    assertEquals("name2", arg.getName());    assertEquals("=", arg.getMetaData());    assertEquals("", arg.getValue());    assertEquals(0, sampler.getHTTPFileCount());    arg = args.getArgument(2);    assertEquals("name3", arg.getName());    assertEquals("=", arg.getMetaData());    assertEquals("value3", arg.getValue());    assertEquals(0, sampler.getHTTPFileCount());}
0
public void testArgumentWithoutEquals() throws Exception
{    HTTPSamplerBase sampler = new HTTPNullSampler();    sampler.setProtocol("http");    sampler.setMethod(HTTPConstants.GET);    sampler.setPath("/index.html?pear");    sampler.setDomain("www.apache.org");    assertEquals("http://www.apache.org/index.html?pear", sampler.getUrl().toString());}
0
public void testMakingUrl() throws Exception
{    HTTPSamplerBase config = new HTTPNullSampler();    config.setProtocol("http");    config.setMethod(HTTPConstants.GET);    config.addArgument("param1", "value1");    config.setPath("/index.html");    config.setDomain("www.apache.org");    assertEquals("http://www.apache.org/index.html?param1=value1", config.getUrl().toString());}
0
public void testRedirect() throws Exception
{    HTTPSamplerBase config = new HTTPNullSampler();    config.setProtocol("http");    config.setMethod(HTTPConstants.GET);    config.setDomain("192.168.0.1");    HTTPSampleResult res = new HTTPSampleResult();    res.sampleStart();    res.setURL(config.getUrl());    res.setResponseCode("301");    res.sampleEnd();    res.setRedirectLocation("./");    config.followRedirects(res, 0);    assertEquals("http://192.168.0.1/", config.getUrl().toString());    res.setRedirectLocation(".");    config.followRedirects(res, 0);    assertEquals("http://192.168.0.1/", config.getUrl().toString());    res.setRedirectLocation("../");    config.followRedirects(res, 0);    assertEquals("http://192.168.0.1/", config.getUrl().toString());}
0
public void testMakingUrl2() throws Exception
{    HTTPSamplerBase config = new HTTPNullSampler();    config.setProtocol("http");    config.setMethod(HTTPConstants.GET);    config.addArgument("param1", "value1");    config.setPath("/index.html?p1=p2");    config.setDomain("192.168.0.1");    assertEquals("http://192.168.0.1/index.html?param1=value1&p1=p2", config.getUrl().toString());}
0
public void testMakingUrl3() throws Exception
{    HTTPSamplerBase config = new HTTPNullSampler();    config.setProtocol("http");    config.setMethod(HTTPConstants.POST);    config.addArgument("param1", "value1");    config.setPath("/index.html?p1=p2");    config.setDomain("192.168.0.1");    assertEquals("http://192.168.0.1/index.html?p1=p2", config.getUrl().toString());}
0
public void testMakingUrl4() throws Exception
{    HTTPSamplerBase config = new HTTPNullSampler();    config.setProtocol("http");    config.setMethod(HTTPConstants.GET);    config.addArgument("param1", "value1", "=");    config.setPath("/index.html");    config.setDomain("192.168.0.1");    assertEquals("http://192.168.0.1/index.html?param1=value1", config.getUrl().toString());}
0
public void testMakingUrl5() throws Exception
{    HTTPSamplerBase config = new HTTPNullSampler();    config.setProtocol("http");    config.setMethod(HTTPConstants.GET);    config.addArgument("param1", "", "=");    config.setPath("/index.html");    config.setDomain("192.168.0.1");    assertEquals("http://192.168.0.1/index.html?param1=", config.getUrl().toString());}
0
public void testMakingUrl6() throws Exception
{    HTTPSamplerBase config = new HTTPNullSampler();    config.setProtocol("http");    config.setMethod(HTTPConstants.GET);    config.addArgument("param1", "", "");    config.setPath("/index.html");    config.setDomain("192.168.0.1");    assertEquals("http://192.168.0.1/index.html?param1", config.getUrl().toString());}
0
public void testMakingUrl7() throws Exception
{    HTTPSamplerBase config = new HTTPNullSampler();    config.setProtocol("http");    config.setMethod(HTTPConstants.GET);    config.parseArguments("param1=value1");    config.setPath("/index.html");    config.setDomain("192.168.0.1");    assertEquals("http://192.168.0.1/index.html?param1=value1", config.getUrl().toString());}
0
public void testMakingUrl8() throws Exception
{    HTTPSamplerBase config = new HTTPNullSampler();    config.setProtocol("http");    config.setMethod(HTTPConstants.GET);    config.parseArguments("param1=");    config.setPath("/index.html");    config.setDomain("192.168.0.1");    assertEquals("http://192.168.0.1/index.html?param1=", config.getUrl().toString());}
0
public void testMakingUrl9() throws Exception
{    HTTPSamplerBase config = new HTTPNullSampler();    config.setProtocol("http");    config.setMethod(HTTPConstants.GET);    config.parseArguments("param1");    config.setPath("/index.html");    config.setDomain("192.168.0.1");    assertEquals("http://192.168.0.1/index.html?param1", config.getUrl().toString());}
0
public void testMakingUrl10() throws Exception
{    HTTPSamplerBase config = new HTTPNullSampler();    config.setProtocol("http");    config.setMethod(HTTPConstants.GET);    config.parseArguments("");    config.setPath("/index.html");    config.setDomain("192.168.0.1");    assertEquals("http://192.168.0.1/index.html", config.getUrl().toString());}
0
public void testFileList()
{    HTTPSamplerBase config = new HTTPNullSampler();    HTTPFileArg[] arg;    arg = config.getHTTPFiles();    assertNotNull(arg);    assertEquals(0, arg.length);    config.setHTTPFiles(new HTTPFileArg[] { new HTTPFileArg("", "", "") });    arg = config.getHTTPFiles();    assertNotNull(arg);    assertEquals(0, arg.length);    config.setHTTPFiles(new HTTPFileArg[] { new HTTPFileArg("", "", "text/plain") });    arg = config.getHTTPFiles();    assertNotNull(arg);    assertEquals(1, arg.length);    assertEquals("text/plain", arg[0].getMimeType());    assertEquals("", arg[0].getPath());    assertEquals("", arg[0].getParamName());    config.setHTTPFiles(new HTTPFileArg[] { new HTTPFileArg("/tmp/test123.tmp", "test123.tmp", "text/plain") });    arg = config.getHTTPFiles();    assertNotNull(arg);    assertEquals(1, arg.length);    assertEquals("text/plain", arg[0].getMimeType());    assertEquals("/tmp/test123.tmp", arg[0].getPath());    assertEquals("test123.tmp", arg[0].getParamName());    HTTPFileArg[] files = {};        config.setHTTPFiles(files);    arg = config.getHTTPFiles();    assertNotNull(arg);    assertEquals(0, arg.length);    files = new HTTPFileArg[] { new HTTPFileArg(), new HTTPFileArg() };    config.setHTTPFiles(files);    arg = config.getHTTPFiles();    assertNotNull(arg);    assertEquals(0, arg.length);        files = new HTTPFileArg[] { new HTTPFileArg("file"), new HTTPFileArg() };    config.setHTTPFiles(files);    arg = config.getHTTPFiles();    assertNotNull(arg);    assertEquals(1, arg.length);        files = new HTTPFileArg[] { new HTTPFileArg(), new HTTPFileArg("file1"), new HTTPFileArg(), new HTTPFileArg("file2"), new HTTPFileArg() };    config.setHTTPFiles(files);    arg = config.getHTTPFiles();    assertNotNull(arg);    assertEquals(2, arg.length);}
0
public void testSetAndGetFileField()
{    HTTPSamplerBase sampler = new HTTPNullSampler();    sampler.setHTTPFiles(new HTTPFileArg[] { new HTTPFileArg("", "param", "") });    HTTPFileArg file = sampler.getHTTPFiles()[0];    assertEquals("param", file.getParamName());    sampler.setHTTPFiles(new HTTPFileArg[] { new HTTPFileArg("", "param2", "") });    file = sampler.getHTTPFiles()[0];    assertEquals("param2", file.getParamName());}
0
public void testSetAndGetFilename()
{    HTTPSamplerBase sampler = new HTTPNullSampler();    sampler.setHTTPFiles(new HTTPFileArg[] { new HTTPFileArg("name", "", "") });    HTTPFileArg file = sampler.getHTTPFiles()[0];    assertEquals("name", file.getPath());    sampler.setHTTPFiles(new HTTPFileArg[] { new HTTPFileArg("name2", "", "") });    file = sampler.getHTTPFiles()[0];    assertEquals("name2", file.getPath());}
0
public void testSetAndGetMimetype()
{    HTTPSamplerBase sampler = new HTTPNullSampler();    sampler.setHTTPFiles(new HTTPFileArg[] { new HTTPFileArg("", "", "mime") });    HTTPFileArg file = sampler.getHTTPFiles()[0];    assertEquals("mime", file.getMimeType());    sampler.setHTTPFiles(new HTTPFileArg[] { new HTTPFileArg("", "", "mime2") });    file = sampler.getHTTPFiles()[0];    assertEquals("mime2", file.getMimeType());}
0
public Description getDescription()
{    return Description.createTestDescription(getClass(), getName() + " " + item);}
0
public static Test suite()
{    final TestSuite testSuite = new TestSuite(TestHTTPSamplersAgainstHttpMirrorServer.class);        for (int i = 0; i < 11; i++) {        testSuite.addTest(new TestHTTPSamplersAgainstHttpMirrorServer("itemised_testGetRequest_Parameters", i));        testSuite.addTest(new TestHTTPSamplersAgainstHttpMirrorServer("itemised_testGetRequest_Parameters3", i));        testSuite.addTest(new TestHTTPSamplersAgainstHttpMirrorServer("itemised_testPostRequest_UrlEncoded", i));        testSuite.addTest(new TestHTTPSamplersAgainstHttpMirrorServer("itemised_testPostRequest_UrlEncoded3", i));    }    return new TestSetup(testSuite) {        private HttpMirrorServer httpServer;        @Override        protected void setUp() throws Exception {            httpServer = TestHTTPMirrorThread.startHttpMirror(MIRROR_PORT);                        TEST_FILE_CONTENT = "some foo content &?=01234+56789-\u007c\u2aa1\u266a\u0153\u20a1\u0115\u0364\u00c5\u2052\uc385%C3%85".getBytes(StandardCharsets.UTF_8);                                    temporaryFile = File.createTempFile("TestHTTPSamplersAgainstHttpMirrorServer", "tmp");            OutputStream output = new FileOutputStream(temporaryFile);            output.write(TEST_FILE_CONTENT);            output.flush();            output.close();        }        @Override        protected void tearDown() {                        httpServer.stopServer();            httpServer = null;            if (!temporaryFile.delete()) {                Assert.fail("Could not delete file:" + temporaryFile.getAbsolutePath());            }        }    };}
0
protected void setUp() throws Exception
{    httpServer = TestHTTPMirrorThread.startHttpMirror(MIRROR_PORT);        TEST_FILE_CONTENT = "some foo content &?=01234+56789-\u007c\u2aa1\u266a\u0153\u20a1\u0115\u0364\u00c5\u2052\uc385%C3%85".getBytes(StandardCharsets.UTF_8);            temporaryFile = File.createTempFile("TestHTTPSamplersAgainstHttpMirrorServer", "tmp");    OutputStream output = new FileOutputStream(temporaryFile);    output.write(TEST_FILE_CONTENT);    output.flush();    output.close();}
0
protected void tearDown()
{        httpServer.stopServer();    httpServer = null;    if (!temporaryFile.delete()) {        Assert.fail("Could not delete file:" + temporaryFile.getAbsolutePath());    }}
0
public void itemised_testPostRequest_UrlEncoded() throws Exception
{    testPostRequest_UrlEncoded(HTTP_SAMPLER, ISO_8859_1, item);}
0
public void itemised_testPostRequest_UrlEncoded3() throws Exception
{    testPostRequest_UrlEncoded(HTTP_SAMPLER3, US_ASCII, item);}
0
public void testPostRequest_FormMultipart_0() throws Exception
{    testPostRequest_FormMultipart(HTTP_SAMPLER, ISO_8859_1);}
0
public void testPostRequest_FormMultipart3() throws Exception
{        testPostRequest_FormMultipart(HTTP_SAMPLER3, US_ASCII);}
0
public void testPostRequest_FileUpload() throws Exception
{    testPostRequest_FileUpload(HTTP_SAMPLER, ISO_8859_1);}
0
public void testPostRequest_FileUpload3() throws Exception
{        testPostRequest_FileUpload(HTTP_SAMPLER3, US_ASCII);}
0
public void testPostRequest_BodyFromParameterValues() throws Exception
{    testPostRequest_BodyFromParameterValues(HTTP_SAMPLER, ISO_8859_1);}
0
public void testPostRequest_BodyFromParameterValues3() throws Exception
{    testPostRequest_BodyFromParameterValues(HTTP_SAMPLER3, US_ASCII);}
0
public void testGetRequest() throws Exception
{    testGetRequest(HTTP_SAMPLER);}
0
public void testGetRequest3() throws Exception
{    testGetRequest(HTTP_SAMPLER3);}
0
public void itemised_testGetRequest_Parameters() throws Exception
{    testGetRequest_Parameters(HTTP_SAMPLER, item);}
0
public void itemised_testGetRequest_Parameters3() throws Exception
{    testGetRequest_Parameters(HTTP_SAMPLER3, item);}
0
public void testPutRequest_BodyFromParameterValues3() throws Exception
{    testPutRequest_BodyFromParameterValues(HTTP_SAMPLER3, US_ASCII);}
0
private void testPutRequest_BodyFromParameterValues(int samplerType, String samplerDefaultEncoding) throws Exception
{        final String titleField = "titleKey";    String titleValue = "mytitle";        final String descriptionField = "descriptionKey";    String descriptionValue = "mydescription";        HTTPSamplerBase sampler = createHttpSampler(samplerType);    String contentEncoding = "";    setupUrl(sampler, contentEncoding);    sampler.setMethod(HTTPConstants.PUT);    setupFormData(sampler, false, titleField, titleValue, descriptionField, descriptionValue);    ((HTTPArgument) sampler.getArguments().getArgument(0)).setAlwaysEncoded(false);    ((HTTPArgument) sampler.getArguments().getArgument(1)).setAlwaysEncoded(false);    HTTPSampleResult res = executeSampler(sampler);    String expectedPostBody = titleField + "=" + titleValue + "&" + descriptionField + "=" + descriptionValue;    checkPostRequestBody(sampler, res, samplerDefaultEncoding, contentEncoding, expectedPostBody, HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED);}
0
private void testPostRequest_UrlEncoded(int samplerType, String samplerDefaultEncoding, int test) throws Exception
{    String titleField = "title";    String titleValue = "mytitle";    String descriptionField = "description";    String descriptionValue = "mydescription";    HTTPSamplerBase sampler = createHttpSampler(samplerType);    HTTPSampleResult res;    String contentEncoding;    switch(test) {        case 0:                        contentEncoding = "";            setupUrl(sampler, contentEncoding);            setupFormData(sampler, false, titleField, titleValue, descriptionField, descriptionValue);            res = executeSampler(sampler);            checkPostRequestUrlEncoded(sampler, res, samplerDefaultEncoding, contentEncoding, titleField, titleValue, descriptionField, descriptionValue, false);            break;        case 1:                        contentEncoding = ISO_8859_1;            setupUrl(sampler, contentEncoding);            setupFormData(sampler, false, titleField, titleValue, descriptionField, descriptionValue);            res = executeSampler(sampler);            checkPostRequestUrlEncoded(sampler, res, samplerDefaultEncoding, contentEncoding, titleField, titleValue, descriptionField, descriptionValue, false);            break;        case 2:                        contentEncoding = "UTF-8";            titleValue = "mytitle2\u0153\u20a1\u0115\u00c5";            descriptionValue = "mydescription2\u0153\u20a1\u0115\u00c5";            setupUrl(sampler, contentEncoding);            setupFormData(sampler, false, titleField, titleValue, descriptionField, descriptionValue);            res = executeSampler(sampler);            checkPostRequestUrlEncoded(sampler, res, samplerDefaultEncoding, contentEncoding, titleField, titleValue, descriptionField, descriptionValue, false);            break;        case 3:                        contentEncoding = "UTF-8";            titleValue = "mytitle3/=";            descriptionValue = "mydescription3   /\\";            setupUrl(sampler, contentEncoding);            setupFormData(sampler, false, titleField, titleValue, descriptionField, descriptionValue);            res = executeSampler(sampler);            checkPostRequestUrlEncoded(sampler, res, samplerDefaultEncoding, contentEncoding, titleField, titleValue, descriptionField, descriptionValue, false);            break;        case 4:                        contentEncoding = "UTF-8";            titleValue = "mytitle4%2F%3D";            descriptionValue = "mydescription4+++%2F%5C";            setupUrl(sampler, contentEncoding);            setupFormData(sampler, true, titleField, titleValue, descriptionField, descriptionValue);            res = executeSampler(sampler);            checkPostRequestUrlEncoded(sampler, res, samplerDefaultEncoding, contentEncoding, titleField, titleValue, descriptionField, descriptionValue, true);            break;        case 5:                        contentEncoding = "UTF-8";            titleValue = "/wEPDwULLTE2MzM2OTA0NTYPZBYCAgMPZ/rA+8DZ2dnZ2dnZ2d/GNDar6OshPwdJc=";            descriptionValue = "mydescription5";            setupUrl(sampler, contentEncoding);            setupFormData(sampler, false, titleField, titleValue, descriptionField, descriptionValue);            res = executeSampler(sampler);            checkPostRequestUrlEncoded(sampler, res, samplerDefaultEncoding, contentEncoding, titleField, titleValue, descriptionField, descriptionValue, false);            break;        case 6:                                                contentEncoding = "UTF-8";            titleValue = "%2FwEPDwULLTE2MzM2OTA0NTYPZBYCAgMPZ%2FrA%2B8DZ2dnZ2dnZ2d%2FGNDar6OshPwdJc%3D";            descriptionValue = "mydescription6";            setupUrl(sampler, contentEncoding);            setupFormData(sampler, false, titleField, titleValue, descriptionField, descriptionValue);            ((HTTPArgument) sampler.getArguments().getArgument(0)).setAlwaysEncoded(false);            ((HTTPArgument) sampler.getArguments().getArgument(1)).setAlwaysEncoded(false);            res = executeSampler(sampler);            assertFalse(((HTTPArgument) sampler.getArguments().getArgument(0)).isAlwaysEncoded());            assertFalse(((HTTPArgument) sampler.getArguments().getArgument(1)).isAlwaysEncoded());            checkPostRequestUrlEncoded(sampler, res, samplerDefaultEncoding, contentEncoding, titleField, titleValue, descriptionField, descriptionValue, true);            break;        case 7:                                    JMeterUtils.setLocale(Locale.ENGLISH);            TestPlan testPlan = new TestPlan();            JMeterVariables vars = new JMeterVariables();            vars.put("title_prefix", "a test\u00c5");            vars.put("description_suffix", "the_end");            JMeterContextService.getContext().setVariables(vars);            JMeterContextService.getContext().setSamplingStarted(true);            ValueReplacer replacer = new ValueReplacer();            replacer.setUserDefinedVariables(testPlan.getUserDefinedVariables());            contentEncoding = "UTF-8";            titleValue = "${title_prefix}mytitle7\u0153\u20a1\u0115\u00c5";            descriptionValue = "mydescription7\u0153\u20a1\u0115\u00c5${description_suffix}";            setupUrl(sampler, contentEncoding);            setupFormData(sampler, false, titleField, titleValue, descriptionField, descriptionValue);                        replacer.replaceValues(sampler);            res = executeSampler(sampler);            String expectedTitleValue = "a test\u00c5mytitle7\u0153\u20a1\u0115\u00c5";            String expectedDescriptionValue = "mydescription7\u0153\u20a1\u0115\u00c5the_end";            checkPostRequestUrlEncoded(sampler, res, samplerDefaultEncoding, contentEncoding, titleField, expectedTitleValue, descriptionField, expectedDescriptionValue, false);            break;        case 8:            break;        case 9:            break;        case 10:            break;        default:            fail("Unexpected switch value: " + test);    }}
0
private void testPostRequest_FormMultipart(int samplerType, String samplerDefaultEncoding) throws Exception
{    String titleField = "title";    String titleValue = "mytitle";    String descriptionField = "description";    String descriptionValue = "mydescription";        HTTPSamplerBase sampler = createHttpSampler(samplerType);    String contentEncoding = "";    setupUrl(sampler, contentEncoding);    setupFormData(sampler, false, titleField, titleValue, descriptionField, descriptionValue);    sampler.setDoMultipart(true);    HTTPSampleResult res = executeSampler(sampler);    checkPostRequestFormMultipart(sampler, res, samplerDefaultEncoding, contentEncoding, titleField, titleValue, descriptionField, descriptionValue);        sampler = createHttpSampler(samplerType);    contentEncoding = ISO_8859_1;    setupUrl(sampler, contentEncoding);    setupFormData(sampler, false, titleField, titleValue, descriptionField, descriptionValue);    sampler.setDoMultipart(true);    res = executeSampler(sampler);    checkPostRequestFormMultipart(sampler, res, samplerDefaultEncoding, contentEncoding, titleField, titleValue, descriptionField, descriptionValue);        sampler = createHttpSampler(samplerType);    contentEncoding = "UTF-8";    titleValue = "mytitle\u0153\u20a1\u0115\u00c5";    descriptionValue = "mydescription\u0153\u20a1\u0115\u00c5";    setupUrl(sampler, contentEncoding);    setupFormData(sampler, false, titleField, titleValue, descriptionField, descriptionValue);    sampler.setDoMultipart(true);    res = executeSampler(sampler);    checkPostRequestFormMultipart(sampler, res, samplerDefaultEncoding, contentEncoding, titleField, titleValue, descriptionField, descriptionValue);            sampler = createHttpSampler(samplerType);    contentEncoding = "UTF-8";    titleValue = "mytitle/=";    descriptionValue = "mydescription   /\\";    setupUrl(sampler, contentEncoding);    setupFormData(sampler, false, titleField, titleValue, descriptionField, descriptionValue);    sampler.setDoMultipart(true);    res = executeSampler(sampler);    checkPostRequestFormMultipart(sampler, res, samplerDefaultEncoding, contentEncoding, titleField, titleValue, descriptionField, descriptionValue);        sampler = createHttpSampler(samplerType);    contentEncoding = "UTF-8";    titleValue = "mytitle%2F%3D";    descriptionValue = "mydescription+++%2F%5C";    setupUrl(sampler, contentEncoding);    setupFormData(sampler, true, titleField, titleValue, descriptionField, descriptionValue);    sampler.setDoMultipart(true);    res = executeSampler(sampler);    String expectedTitleValue = "mytitle/=";    String expectedDescriptionValue = "mydescription   /\\";    checkPostRequestFormMultipart(sampler, res, samplerDefaultEncoding, contentEncoding, titleField, expectedTitleValue, descriptionField, expectedDescriptionValue);        sampler = createHttpSampler(samplerType);    contentEncoding = "UTF-8";    titleValue = "/wEPDwULLTE2MzM2OTA0NTYPZBYCAgMPZ/rA+8DZ2dnZ2dnZ2d/GNDar6OshPwdJc=";    descriptionValue = "mydescription";    setupUrl(sampler, contentEncoding);    setupFormData(sampler, false, titleField, titleValue, descriptionField, descriptionValue);    sampler.setDoMultipart(true);    res = executeSampler(sampler);    checkPostRequestFormMultipart(sampler, res, samplerDefaultEncoding, contentEncoding, titleField, titleValue, descriptionField, descriptionValue);            JMeterUtils.setLocale(Locale.ENGLISH);    TestPlan testPlan = new TestPlan();    JMeterVariables vars = new JMeterVariables();    vars.put("title_prefix", "a test\u00c5");    vars.put("description_suffix", "the_end");    JMeterContextService.getContext().setVariables(vars);    JMeterContextService.getContext().setSamplingStarted(true);    ValueReplacer replacer = new ValueReplacer();    replacer.setUserDefinedVariables(testPlan.getUserDefinedVariables());    sampler = createHttpSampler(samplerType);    contentEncoding = "UTF-8";    titleValue = "${title_prefix}mytitle\u0153\u20a1\u0115\u00c5";    descriptionValue = "mydescription\u0153\u20a1\u0115\u00c5${description_suffix}";    setupUrl(sampler, contentEncoding);    setupFormData(sampler, false, titleField, titleValue, descriptionField, descriptionValue);    sampler.setDoMultipart(true);        replacer.replaceValues(sampler);    res = executeSampler(sampler);    expectedTitleValue = "a test\u00c5mytitle\u0153\u20a1\u0115\u00c5";    expectedDescriptionValue = "mydescription\u0153\u20a1\u0115\u00c5the_end";    checkPostRequestFormMultipart(sampler, res, samplerDefaultEncoding, contentEncoding, titleField, expectedTitleValue, descriptionField, expectedDescriptionValue);}
0
private void testPostRequest_FileUpload(int samplerType, String samplerDefaultEncoding) throws Exception
{    String titleField = "title";    String titleValue = "mytitle";    String descriptionField = "description";    String descriptionValue = "mydescription";    String fileField = "file1";    String fileMimeType = CONTENT_TYPE_TEXT_PLAIN;        HTTPSamplerBase sampler = createHttpSampler(samplerType);    String contentEncoding = "";    setupUrl(sampler, contentEncoding);    setupFileUploadData(sampler, false, titleField, titleValue, descriptionField, descriptionValue, fileField, temporaryFile, fileMimeType);    HTTPSampleResult res = executeSampler(sampler);    checkPostRequestFileUpload(sampler, res, samplerDefaultEncoding, contentEncoding, titleField, titleValue, descriptionField, descriptionValue, fileField, temporaryFile, fileMimeType, TEST_FILE_CONTENT);        sampler = createHttpSampler(samplerType);    contentEncoding = ISO_8859_1;    setupUrl(sampler, contentEncoding);    setupFileUploadData(sampler, false, titleField, titleValue, descriptionField, descriptionValue, fileField, temporaryFile, fileMimeType);    res = executeSampler(sampler);    checkPostRequestFileUpload(sampler, res, samplerDefaultEncoding, contentEncoding, titleField, titleValue, descriptionField, descriptionValue, fileField, temporaryFile, fileMimeType, TEST_FILE_CONTENT);        sampler = createHttpSampler(samplerType);    contentEncoding = "UTF-8";    titleValue = "mytitle\u0153\u20a1\u0115\u00c5";    descriptionValue = "mydescription\u0153\u20a1\u0115\u00c5";    setupUrl(sampler, contentEncoding);    setupFileUploadData(sampler, false, titleField, titleValue, descriptionField, descriptionValue, fileField, temporaryFile, fileMimeType);    res = executeSampler(sampler);    checkPostRequestFileUpload(sampler, res, samplerDefaultEncoding, contentEncoding, titleField, titleValue, descriptionField, descriptionValue, fileField, temporaryFile, fileMimeType, TEST_FILE_CONTENT);}
0
private void testPostRequest_BodyFromParameterValues(int samplerType, String samplerDefaultEncoding) throws Exception
{        final String titleField = "";    String titleValue = "mytitle";        final String descriptionField = "";    String descriptionValue = "mydescription";        HTTPSamplerBase sampler = createHttpSampler(samplerType);    setupUrl(sampler, "");    setupFormData(sampler, false, titleField, titleValue, descriptionField, descriptionValue);    ((HTTPArgument) sampler.getArguments().getArgument(0)).setAlwaysEncoded(false);    ((HTTPArgument) sampler.getArguments().getArgument(1)).setAlwaysEncoded(false);    HTTPSampleResult res = executeSampler(sampler);    String expectedPostBody = titleValue + descriptionValue;    checkPostRequestBody(sampler, res, samplerDefaultEncoding, "", expectedPostBody, CONTENT_TYPE_TEXT_PLAIN);        sampler = createHttpSampler(samplerType);    String contentEncoding = ISO_8859_1;    setupUrl(sampler, contentEncoding);    setupFormData(sampler, false, titleField, titleValue, descriptionField, descriptionValue);    ((HTTPArgument) sampler.getArguments().getArgument(0)).setAlwaysEncoded(false);    ((HTTPArgument) sampler.getArguments().getArgument(1)).setAlwaysEncoded(false);    res = executeSampler(sampler);    expectedPostBody = titleValue + descriptionValue;    checkPostRequestBody(sampler, res, samplerDefaultEncoding, contentEncoding, expectedPostBody, CONTENT_TYPE_TEXT_PLAIN);        sampler = createHttpSampler(samplerType);    contentEncoding = "UTF-8";    titleValue = "mytitle\u0153\u20a1\u0115\u00c5";    descriptionValue = "mydescription\u0153\u20a1\u0115\u00c5";    setupUrl(sampler, contentEncoding);    setupFormData(sampler, false, titleField, titleValue, descriptionField, descriptionValue);    ((HTTPArgument) sampler.getArguments().getArgument(0)).setAlwaysEncoded(false);    ((HTTPArgument) sampler.getArguments().getArgument(1)).setAlwaysEncoded(false);    res = executeSampler(sampler);    expectedPostBody = titleValue + descriptionValue;    checkPostRequestBody(sampler, res, samplerDefaultEncoding, contentEncoding, expectedPostBody, CONTENT_TYPE_TEXT_PLAIN);        sampler = createHttpSampler(samplerType);    contentEncoding = "UTF-8";    titleValue = "mytitle/=";    descriptionValue = "mydescription   /\\";    setupUrl(sampler, contentEncoding);    setupFormData(sampler, false, titleField, titleValue, descriptionField, descriptionValue);    ((HTTPArgument) sampler.getArguments().getArgument(0)).setAlwaysEncoded(false);    ((HTTPArgument) sampler.getArguments().getArgument(1)).setAlwaysEncoded(false);    res = executeSampler(sampler);    expectedPostBody = titleValue + descriptionValue;    checkPostRequestBody(sampler, res, samplerDefaultEncoding, contentEncoding, expectedPostBody, CONTENT_TYPE_TEXT_PLAIN);            sampler = createHttpSampler(samplerType);    contentEncoding = "UTF-8";    titleValue = "mytitle/=";    descriptionValue = "mydescription   /\\";    setupUrl(sampler, contentEncoding);    setupFormData(sampler, true, titleField, titleValue, descriptionField, descriptionValue);    res = executeSampler(sampler);    expectedPostBody = URLEncoder.encode(titleValue + descriptionValue, contentEncoding);    checkPostRequestBody(sampler, res, samplerDefaultEncoding, contentEncoding, expectedPostBody, CONTENT_TYPE_TEXT_PLAIN);        sampler = createHttpSampler(samplerType);    contentEncoding = "UTF-8";    titleValue = "mytitle%2F%3D";    descriptionValue = "mydescription+++%2F%5C";    setupUrl(sampler, contentEncoding);    setupFormData(sampler, false, titleField, titleValue, descriptionField, descriptionValue);    ((HTTPArgument) sampler.getArguments().getArgument(0)).setAlwaysEncoded(false);    ((HTTPArgument) sampler.getArguments().getArgument(1)).setAlwaysEncoded(false);    res = executeSampler(sampler);    expectedPostBody = titleValue + descriptionValue;    checkPostRequestBody(sampler, res, samplerDefaultEncoding, contentEncoding, expectedPostBody, CONTENT_TYPE_TEXT_PLAIN);            sampler = createHttpSampler(samplerType);    contentEncoding = "UTF-8";    titleValue = "mytitle%2F%3D";    descriptionValue = "mydescription+++%2F%5C";    setupUrl(sampler, contentEncoding);    setupFormData(sampler, true, titleField, titleValue, descriptionField, descriptionValue);    res = executeSampler(sampler);    expectedPostBody = titleValue + descriptionValue;    checkPostRequestBody(sampler, res, samplerDefaultEncoding, contentEncoding, expectedPostBody, CONTENT_TYPE_TEXT_PLAIN);        sampler = createHttpSampler(samplerType);    contentEncoding = "UTF-8";    titleValue = "/wEPDwULLTE2MzM2OTA0NTYPZBYCAgMPZ/rA+8DZ2dnZ2dnZ2d/GNDar6OshPwdJc=";    descriptionValue = "mydescription";    setupUrl(sampler, contentEncoding);    setupFormData(sampler, false, titleField, titleValue, descriptionField, descriptionValue);    ((HTTPArgument) sampler.getArguments().getArgument(0)).setAlwaysEncoded(false);    ((HTTPArgument) sampler.getArguments().getArgument(1)).setAlwaysEncoded(false);    res = executeSampler(sampler);    expectedPostBody = titleValue + descriptionValue;    checkPostRequestBody(sampler, res, samplerDefaultEncoding, contentEncoding, expectedPostBody, CONTENT_TYPE_TEXT_PLAIN);                        sampler = createHttpSampler(samplerType);    contentEncoding = "UTF-8";    titleValue = "mytitle++";    descriptionValue = "mydescription+";    setupUrl(sampler, contentEncoding);    setupFormData(sampler, false, titleField, titleValue, descriptionField, descriptionValue);    ((HTTPArgument) sampler.getArguments().getArgument(0)).setAlwaysEncoded(false);    ((HTTPArgument) sampler.getArguments().getArgument(1)).setAlwaysEncoded(false);    res = executeSampler(sampler);    expectedPostBody = titleValue + descriptionValue;    checkPostRequestBody(sampler, res, samplerDefaultEncoding, contentEncoding, expectedPostBody, CONTENT_TYPE_TEXT_PLAIN);            JMeterUtils.setLocale(Locale.ENGLISH);    TestPlan testPlan = new TestPlan();    JMeterVariables vars = new JMeterVariables();    vars.put("title_prefix", "a test\u00c5");    vars.put("description_suffix", "the_end");    JMeterContextService.getContext().setVariables(vars);    JMeterContextService.getContext().setSamplingStarted(true);    ValueReplacer replacer = new ValueReplacer();    replacer.setUserDefinedVariables(testPlan.getUserDefinedVariables());    sampler = createHttpSampler(samplerType);    contentEncoding = "UTF-8";    titleValue = "${title_prefix}mytitle\u0153\u20a1\u0115\u00c5";    descriptionValue = "mydescription\u0153\u20a1\u0115\u00c5${description_suffix}";    setupUrl(sampler, contentEncoding);    setupFormData(sampler, false, titleField, titleValue, descriptionField, descriptionValue);    ((HTTPArgument) sampler.getArguments().getArgument(0)).setAlwaysEncoded(false);    ((HTTPArgument) sampler.getArguments().getArgument(1)).setAlwaysEncoded(false);        replacer.replaceValues(sampler);    res = executeSampler(sampler);    String expectedTitleValue = "a test\u00c5mytitle\u0153\u20a1\u0115\u00c5";    String expectedDescriptionValue = "mydescription\u0153\u20a1\u0115\u00c5the_end";    expectedPostBody = expectedTitleValue + expectedDescriptionValue;    checkPostRequestBody(sampler, res, samplerDefaultEncoding, contentEncoding, expectedPostBody, CONTENT_TYPE_TEXT_PLAIN);}
0
private void testGetRequest(int samplerType) throws Exception
{            HTTPSamplerBase sampler = createHttpSampler(samplerType);    String contentEncoding = "";    setupUrl(sampler, contentEncoding);    sampler.setMethod(HTTPConstants.GET);    HTTPSampleResult res = executeSampler(sampler);    checkGetRequest(sampler, res);        sampler = createHttpSampler(samplerType);    contentEncoding = ISO_8859_1;    setupUrl(sampler, contentEncoding);    sampler.setMethod(HTTPConstants.GET);    res = executeSampler(sampler);    checkGetRequest(sampler, res);        sampler = createHttpSampler(samplerType);    contentEncoding = "UTF-8";    setupUrl(sampler, contentEncoding);    sampler.setMethod(HTTPConstants.GET);    res = executeSampler(sampler);    checkGetRequest(sampler, res);}
0
private void testGetRequest_Parameters(int samplerType, int test) throws Exception
{    String titleField = "title";    String titleValue = "mytitle";    String descriptionField = "description";    String descriptionValue = "mydescription";    HTTPSamplerBase sampler = createHttpSampler(samplerType);    String contentEncoding;    HTTPSampleResult res;    URL executedUrl;    switch(test) {        case 0:                                    contentEncoding = "";            setupUrl(sampler, contentEncoding);            sampler.setMethod(HTTPConstants.GET);            setupFormData(sampler, false, titleField, titleValue, descriptionField, descriptionValue);            res = executeSampler(sampler);            sampler.setRunningVersion(true);            executedUrl = sampler.getUrl();            sampler.setRunningVersion(false);            checkGetRequest_Parameters(sampler, res, contentEncoding, executedUrl, titleField, titleValue, descriptionField, descriptionValue, false);            break;        case 1:                        sampler = createHttpSampler(samplerType);            contentEncoding = ISO_8859_1;            titleValue = "mytitle1\uc385";            descriptionValue = "mydescription1\uc385";            setupUrl(sampler, contentEncoding);            sampler.setMethod(HTTPConstants.GET);            setupFormData(sampler, false, titleField, titleValue, descriptionField, descriptionValue);            res = executeSampler(sampler);            sampler.setRunningVersion(true);            executedUrl = sampler.getUrl();            sampler.setRunningVersion(false);            checkGetRequest_Parameters(sampler, res, contentEncoding, executedUrl, titleField, titleValue, descriptionField, descriptionValue, false);            break;        case 2:                        sampler = createHttpSampler(samplerType);            contentEncoding = "UTF-8";            titleValue = "mytitle2\u0153\u20a1\u0115\u00c5";            descriptionValue = "mydescription2\u0153\u20a1\u0115\u00c5";            setupUrl(sampler, contentEncoding);            sampler.setMethod(HTTPConstants.GET);            setupFormData(sampler, false, titleField, titleValue, descriptionField, descriptionValue);            res = executeSampler(sampler);            sampler.setRunningVersion(true);            executedUrl = sampler.getUrl();            sampler.setRunningVersion(false);            checkGetRequest_Parameters(sampler, res, contentEncoding, executedUrl, titleField, titleValue, descriptionField, descriptionValue, false);            break;        case 3:                        sampler = createHttpSampler(samplerType);            contentEncoding = "UTF-8";            titleValue = "mytitle3\u0153+\u20a1 \u0115&yes\u00c5";            descriptionValue = "mydescription3 \u0153 \u20a1 \u0115 \u00c5";            setupUrl(sampler, contentEncoding);            sampler.setMethod(HTTPConstants.GET);            setupFormData(sampler, false, titleField, titleValue, descriptionField, descriptionValue);            res = executeSampler(sampler);            sampler.setRunningVersion(true);            executedUrl = sampler.getUrl();            sampler.setRunningVersion(false);            checkGetRequest_Parameters(sampler, res, contentEncoding, executedUrl, titleField, titleValue, descriptionField, descriptionValue, false);            break;        case 4:                        sampler = createHttpSampler(samplerType);            contentEncoding = "UTF-8";            titleValue = "mytitle4%2F%3D";            descriptionValue = "mydescription4+++%2F%5C";            setupUrl(sampler, contentEncoding);            sampler.setMethod(HTTPConstants.GET);            setupFormData(sampler, true, titleField, titleValue, descriptionField, descriptionValue);            res = executeSampler(sampler);            sampler.setRunningVersion(true);            executedUrl = sampler.getUrl();            sampler.setRunningVersion(false);            checkGetRequest_Parameters(sampler, res, contentEncoding, executedUrl, titleField, titleValue, descriptionField, descriptionValue, true);            break;        case 5:                                    JMeterUtils.setLocale(Locale.ENGLISH);            TestPlan testPlan = new TestPlan();            JMeterVariables vars = new JMeterVariables();            vars.put("title_prefix", "a test\u00c5");            vars.put("description_suffix", "the_end");            JMeterContextService.getContext().setVariables(vars);            JMeterContextService.getContext().setSamplingStarted(true);            ValueReplacer replacer = new ValueReplacer();            replacer.setUserDefinedVariables(testPlan.getUserDefinedVariables());            sampler = createHttpSampler(samplerType);            contentEncoding = "UTF-8";            titleValue = "${title_prefix}mytitle5\u0153\u20a1\u0115\u00c5";            descriptionValue = "mydescription5\u0153\u20a1\u0115\u00c5${description_suffix}";            setupUrl(sampler, contentEncoding);            sampler.setMethod(HTTPConstants.GET);            setupFormData(sampler, false, titleField, titleValue, descriptionField, descriptionValue);                        replacer.replaceValues(sampler);            res = executeSampler(sampler);            String expectedTitleValue = "a test\u00c5mytitle5\u0153\u20a1\u0115\u00c5";            String expectedDescriptionValue = "mydescription5\u0153\u20a1\u0115\u00c5the_end";            sampler.setRunningVersion(true);            executedUrl = sampler.getUrl();            sampler.setRunningVersion(false);            checkGetRequest_Parameters(sampler, res, contentEncoding, executedUrl, titleField, expectedTitleValue, descriptionField, expectedDescriptionValue, false);            break;        case 6:            break;        case 7:            break;        case 8:            break;        case 9:            break;        case 10:            break;        default:            fail("Unexpected switch value: " + test);    }}
0
private HTTPSampleResult executeSampler(HTTPSamplerBase sampler)
{    sampler.setRunningVersion(true);    sampler.threadStarted();    HTTPSampleResult res = (HTTPSampleResult) sampler.sample();    sampler.threadFinished();    sampler.setRunningVersion(false);    return res;}
0
private void checkPostRequestUrlEncoded(HTTPSamplerBase sampler, HTTPSampleResult res, String samplerDefaultEncoding, String contentEncoding, String titleField, String titleValue, String descriptionField, String descriptionValue, boolean valuesAlreadyUrlEncoded) throws IOException
{    if (contentEncoding == null || contentEncoding.length() == 0) {        contentEncoding = samplerDefaultEncoding;    }        assertEquals(sampler.getUrl(), res.getURL());    String expectedPostBody = null;    if (!valuesAlreadyUrlEncoded) {        String expectedTitle = URLEncoder.encode(titleValue, contentEncoding);        String expectedDescription = URLEncoder.encode(descriptionValue, contentEncoding);        expectedPostBody = titleField + "=" + expectedTitle + "&" + descriptionField + "=" + expectedDescription;    } else {        expectedPostBody = titleField + "=" + titleValue + "&" + descriptionField + "=" + descriptionValue;    }        checkPostRequestBody(sampler, res, samplerDefaultEncoding, contentEncoding, expectedPostBody, HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED);}
0
private void checkPostRequestFormMultipart(HTTPSamplerBase sampler, HTTPSampleResult res, String samplerDefaultEncoding, String contentEncoding, String titleField, String titleValue, String descriptionField, String descriptionValue) throws IOException
{    if (contentEncoding == null || contentEncoding.length() == 0) {        contentEncoding = samplerDefaultEncoding;    }        assertEquals(sampler.getUrl(), res.getURL());    String boundaryString = getBoundaryStringFromContentType(res.getRequestHeaders());    assertNotNull(boundaryString);    byte[] expectedPostBody = createExpectedFormDataOutput(boundaryString, contentEncoding, titleField, titleValue, descriptionField, descriptionValue, true);        checkHeaderContentType(res.getRequestHeaders(), "multipart/form-data" + "; boundary=" + boundaryString);        checkArraysHaveSameContent(expectedPostBody, res.getQueryString().getBytes(contentEncoding), contentEncoding, res);        String dataSentToMirrorServer = new String(res.getResponseData(), contentEncoding);    int posDividerHeadersAndBody = getPositionOfBody(dataSentToMirrorServer);    String headersSent = null;    String bodySent = "";    if (posDividerHeadersAndBody >= 0) {        headersSent = dataSentToMirrorServer.substring(0, posDividerHeadersAndBody);                bodySent = dataSentToMirrorServer.substring(posDividerHeadersAndBody + 2);    } else {        fail("No header and body section found");    }        checkHeaderContentType(headersSent, "multipart/form-data" + "; boundary=" + boundaryString);            checkArraysHaveSameContent(expectedPostBody, bodySent.getBytes(contentEncoding), contentEncoding, res);        checkMethodPathQuery(headersSent, sampler.getMethod(), sampler.getPath(), (String) null, res);}
0
private void checkPostRequestFileUpload(HTTPSamplerBase sampler, HTTPSampleResult res, String samplerDefaultEncoding, String contentEncoding, String titleField, String titleValue, String descriptionField, String descriptionValue, String fileField, File fileValue, String fileMimeType, byte[] fileContent) throws IOException
{    if (contentEncoding == null || contentEncoding.length() == 0) {        contentEncoding = samplerDefaultEncoding;    }        assertEquals(sampler.getUrl(), res.getURL());    String boundaryString = getBoundaryStringFromContentType(res.getRequestHeaders());    assertNotNull(boundaryString);    byte[] expectedPostBody = createExpectedFormAndUploadOutput(boundaryString, contentEncoding, titleField, titleValue, descriptionField, descriptionValue, fileField, fileValue, fileMimeType, fileContent);        checkHeaderContentType(res.getRequestHeaders(), "multipart/form-data" + "; boundary=" + boundaryString);                    String headersSent = getHeadersSent(res.getResponseData());    if (headersSent == null) {        fail("No header and body section found");    }        checkHeaderContentType(headersSent, "multipart/form-data" + "; boundary=" + boundaryString);    byte[] bodySent = getBodySent(res.getResponseData());    assertNotNull("Sent body should not be null", bodySent);            checkArraysHaveSameContent(expectedPostBody, bodySent, contentEncoding, res);        checkMethodPathQuery(headersSent, sampler.getMethod(), sampler.getPath(), (String) null, res);}
0
private void checkPostRequestBody(HTTPSamplerBase sampler, HTTPSampleResult res, String samplerDefaultEncoding, String contentEncoding, String expectedPostBody, String expectedContentType) throws IOException
{    if (contentEncoding == null || contentEncoding.length() == 0) {        contentEncoding = samplerDefaultEncoding;    }        assertEquals(sampler.getUrl(), res.getURL());        if (sampler instanceof HTTPSampler) {        checkHeaderContentType(res.getRequestHeaders(), null);    } else {        checkHeaderContentType(res.getRequestHeaders(), expectedContentType);    }        checkArraysHaveSameContent(expectedPostBody.getBytes(contentEncoding), res.getQueryString().getBytes(contentEncoding), contentEncoding, res);        String dataSentToMirrorServer = new String(res.getResponseData(), contentEncoding);    int posDividerHeadersAndBody = getPositionOfBody(dataSentToMirrorServer);    String headersSent = null;    String bodySent = "";    if (posDividerHeadersAndBody >= 0) {        headersSent = dataSentToMirrorServer.substring(0, posDividerHeadersAndBody);                bodySent = dataSentToMirrorServer.substring(posDividerHeadersAndBody + 2);    } else {        fail("No header and body section found");    }        if (sampler instanceof HTTPSampler) {        checkHeaderContentType(res.getRequestHeaders(), null);    } else {        checkHeaderContentType(headersSent, expectedContentType);    }            checkArraysHaveSameContent(expectedPostBody.getBytes(contentEncoding), bodySent.getBytes(contentEncoding), contentEncoding, res);        checkMethodPathQuery(headersSent, sampler.getMethod(), sampler.getPath(), (String) null, res);}
0
private void checkGetRequest(HTTPSamplerBase sampler, HTTPSampleResult res) throws IOException
{        assertEquals(sampler.getUrl(), res.getURL());        assertEquals(sampler.getMethod(), res.getHTTPMethod());        assertEquals(0, res.getQueryString().length());        String dataSentToMirrorServer = new String(res.getResponseData(), EncoderCache.URL_ARGUMENT_ENCODING);    int posDividerHeadersAndBody = getPositionOfBody(dataSentToMirrorServer);    String headersSent = null;    String bodySent = "";    if (posDividerHeadersAndBody >= 0) {        headersSent = dataSentToMirrorServer.substring(0, posDividerHeadersAndBody);                bodySent = dataSentToMirrorServer.substring(posDividerHeadersAndBody + 2);    } else {        fail("No header and body section found");    }        assertEquals(bodySent.length(), 0);        checkMethodPathQuery(headersSent, sampler.getMethod(), sampler.getPath(), (String) null, res);}
0
private void checkGetRequest_Parameters(HTTPSamplerBase sampler, HTTPSampleResult res, String contentEncoding, URL executedUrl, String titleField, String titleValue, String descriptionField, String descriptionValue, boolean valuesAlreadyUrlEncoded) throws IOException
{    if (contentEncoding == null || contentEncoding.length() == 0) {        contentEncoding = EncoderCache.URL_ARGUMENT_ENCODING;    }        assertEquals(executedUrl, res.getURL());        assertEquals(sampler.getMethod(), res.getHTTPMethod());            String expectedQueryString = null;    if (!valuesAlreadyUrlEncoded) {        String expectedTitle = URLEncoder.encode(titleValue, contentEncoding);        String expectedDescription = URLEncoder.encode(descriptionValue, contentEncoding);        expectedQueryString = titleField + "=" + expectedTitle + "&" + descriptionField + "=" + expectedDescription;    } else {        expectedQueryString = titleField + "=" + titleValue + "&" + descriptionField + "=" + descriptionValue;    }        String dataSentToMirrorServer = new String(res.getResponseData(), EncoderCache.URL_ARGUMENT_ENCODING);    int posDividerHeadersAndBody = getPositionOfBody(dataSentToMirrorServer);    String headersSent = null;    String bodySent = "";    if (posDividerHeadersAndBody >= 0) {        headersSent = dataSentToMirrorServer.substring(0, posDividerHeadersAndBody);                bodySent = dataSentToMirrorServer.substring(posDividerHeadersAndBody + 2);    } else {        fail("No header and body section found in: [" + dataSentToMirrorServer + "]");    }        assertEquals(bodySent.length(), 0);        checkMethodPathQuery(headersSent, sampler.getMethod(), sampler.getPath(), expectedQueryString, res);}
0
private void checkMethodPathQuery(String headersSent, String expectedMethod, String expectedPath, String expectedQueryString, HTTPSampleResult res) throws IOException
{            int indexFirstSpace = headersSent.indexOf(' ');    int indexSecondSpace = headersSent.indexOf(' ', headersSent.length() > indexFirstSpace ? indexFirstSpace + 1 : indexFirstSpace);    if (indexFirstSpace <= 0 && indexSecondSpace <= 0 || indexFirstSpace == indexSecondSpace) {        fail("Could not find method and URI sent");    }    String methodSent = headersSent.substring(0, indexFirstSpace);    assertEquals(expectedMethod, methodSent);    String uriSent = headersSent.substring(indexFirstSpace + 1, indexSecondSpace);    int indexQueryStart = uriSent.indexOf('?');    if (expectedQueryString != null && expectedQueryString.length() > 0) {                if (indexQueryStart <= 0 || indexQueryStart == uriSent.length() - 1) {            fail("Could not find query string in URI");        }    } else {        if (indexQueryStart > 0) {                        fail("Query string present in URI");        } else {            indexQueryStart = uriSent.length();        }    }        String pathSent = uriSent.substring(0, indexQueryStart);    assertEquals(expectedPath, pathSent);        if (expectedQueryString != null && expectedQueryString.length() > 0) {        String queryStringSent = uriSent.substring(indexQueryStart + 1);                                checkArraysHaveSameContent(expectedQueryString.getBytes(EncoderCache.URL_ARGUMENT_ENCODING), queryStringSent.getBytes(EncoderCache.URL_ARGUMENT_ENCODING), EncoderCache.URL_ARGUMENT_ENCODING, res);    }}
0
private String getHeadersSent(byte[] responseData) throws IOException
{            String dataSentToMirrorServer = new String(responseData, StandardCharsets.ISO_8859_1);    int posDividerHeadersAndBody = getPositionOfBody(dataSentToMirrorServer);    String headersSent = null;    if (posDividerHeadersAndBody >= 0) {        headersSent = dataSentToMirrorServer.substring(0, posDividerHeadersAndBody);    }    return headersSent;}
0
private byte[] getBodySent(byte[] responseData) throws IOException
{                            byte[] bodySent = null;    String headersSent = getHeadersSent(responseData);    if (headersSent != null) {                        String contentLengthValue = getSentRequestHeaderValue(headersSent, HTTPConstants.HEADER_CONTENT_LENGTH);        int contentLength = -1;        if (contentLengthValue != null) {            contentLength = Integer.parseInt(contentLengthValue);        } else {            fail("Did not receive any content-length header");        }        bodySent = new byte[contentLength];        System.arraycopy(responseData, responseData.length - contentLength, bodySent, 0, contentLength);    }    return bodySent;}
0
private boolean isInRequestHeaders(String requestHeaders, String headerName, String headerValue)
{    return checkRegularExpression(requestHeaders, headerName + ": " + headerValue);}
0
private void checkHeaderContentType(String requestHeaders, String contentType)
{    if (contentType == null) {        boolean isPresent = checkRegularExpression(requestHeaders, HTTPConstants.HEADER_CONTENT_TYPE + ": .*");        assertFalse("Expected no Content-Type in request headers:\n" + requestHeaders, isPresent);    } else {        boolean typeOK = isInRequestHeaders(requestHeaders, HTTPConstants.HEADER_CONTENT_TYPE, contentType);        assertTrue("Expected type:" + contentType + " in request headers:\n" + requestHeaders, typeOK);    }}
0
private String getSentRequestHeaderValue(String requestHeaders, String headerName)
{    Perl5Matcher localMatcher = JMeterUtils.getMatcher();    String expression = ".*" + headerName + ": (\\d*).*";    Pattern pattern = JMeterUtils.getPattern(expression, Perl5Compiler.READ_ONLY_MASK | Perl5Compiler.CASE_INSENSITIVE_MASK | Perl5Compiler.SINGLELINE_MASK);    if (localMatcher.matches(requestHeaders, pattern)) {                return localMatcher.getMatch().group(1);    }    return null;}
0
private boolean checkRegularExpression(String stringToCheck, String regularExpression)
{    Perl5Matcher localMatcher = JMeterUtils.getMatcher();    Pattern pattern = JMeterUtils.getPattern(regularExpression, Perl5Compiler.READ_ONLY_MASK | Perl5Compiler.CASE_INSENSITIVE_MASK | Perl5Compiler.SINGLELINE_MASK);    return localMatcher.contains(stringToCheck, pattern);}
0
private int getPositionOfBody(String stringToCheck)
{    Perl5Matcher localMatcher = JMeterUtils.getMatcher();        String regularExpression = "^.$";    Pattern pattern = JMeterUtils.getPattern(regularExpression, Perl5Compiler.READ_ONLY_MASK | Perl5Compiler.CASE_INSENSITIVE_MASK | Perl5Compiler.MULTILINE_MASK);    PatternMatcherInput input = new PatternMatcherInput(stringToCheck);    while (localMatcher.contains(input, pattern)) {        MatchResult match = localMatcher.getMatch();        return match.beginOffset(0);    }        return -1;}
0
private String getBoundaryStringFromContentType(String requestHeaders)
{    Perl5Matcher localMatcher = JMeterUtils.getMatcher();    String regularExpression = "^" + HTTPConstants.HEADER_CONTENT_TYPE + ": multipart/form-data; boundary=(.+)$";    Pattern pattern = JMeterUtils.getPattern(regularExpression, Perl5Compiler.READ_ONLY_MASK | Perl5Compiler.CASE_INSENSITIVE_MASK | Perl5Compiler.MULTILINE_MASK);    if (localMatcher.contains(requestHeaders, pattern)) {        MatchResult match = localMatcher.getMatch();        String matchString = match.group(1);                int indexOf = matchString.indexOf(';');        if (indexOf >= 0) {            return matchString.substring(0, indexOf);        } else {            return matchString;        }    } else {        return null;    }}
0
private void setupUrl(HTTPSamplerBase sampler, String contentEncoding)
{    String protocol = "http";    String domain = "localhost";    String path = "/test/somescript.jsp";    sampler.setProtocol(protocol);    sampler.setMethod(HTTPConstants.POST);    sampler.setPath(path);    sampler.setDomain(domain);    sampler.setPort(MIRROR_PORT);    sampler.setContentEncoding(contentEncoding);}
0
private void setupFormData(HTTPSamplerBase httpSampler, boolean isEncoded, String titleField, String titleValue, String descriptionField, String descriptionValue)
{    if (isEncoded) {        httpSampler.addEncodedArgument(titleField, titleValue);        httpSampler.addEncodedArgument(descriptionField, descriptionValue);    } else {        httpSampler.addArgument(titleField, titleValue);        httpSampler.addArgument(descriptionField, descriptionValue);    }}
0
private void setupFileUploadData(HTTPSamplerBase httpSampler, boolean isEncoded, String titleField, String titleValue, String descriptionField, String descriptionValue, String fileField, File fileValue, String fileMimeType)
{        setupFormData(httpSampler, isEncoded, titleField, titleValue, descriptionField, descriptionValue);        HTTPFileArg[] hfa = { new HTTPFileArg(fileValue == null ? "" : fileValue.getAbsolutePath(), fileField, fileMimeType) };    httpSampler.setHTTPFiles(hfa);}
0
private void checkArraysHaveSameContent(byte[] expected, byte[] actual, String encoding, HTTPSampleResult res) throws UnsupportedEncodingException
{    if (expected != null && actual != null) {        if (expected.length != actual.length) {            System.out.println("\n>>>>>>>>>>>>>>>>>>>> expected:");            System.out.println(new String(expected, encoding));            System.out.println("==================== actual:");            System.out.println(new String(actual, encoding));            System.out.println("<<<<<<<<<<<<<<<<<<<<");            if (res != null) {                System.out.println("URL=" + res.getUrlAsString());            }            fail("arrays have different length, expected is " + expected.length + ", actual is " + actual.length);        } else {            for (int i = 0; i < expected.length; i++) {                if (expected[i] != actual[i]) {                    System.out.println("\n>>>>>>>>>>>>>>>>>>>> expected:");                    System.out.println(new String(expected, 0, i + 1, encoding));                    System.out.println("==================== actual:");                    System.out.println(new String(actual, 0, i + 1, encoding));                    System.out.println("<<<<<<<<<<<<<<<<<<<<");                    /*                                                for(int j = 0; j  < expected.length; j++) {                            System.out.print(expected[j] + " ");                        }                        System.out.println();                        for(int j = 0; j  < actual.length; j++) {                            System.out.print(actual[j] + " ");                        }                        System.out.println();*/                    if (res != null) {                        System.out.println("URL=" + res.getUrlAsString());                    }                    fail("byte at position " + i + " is different, expected is " + expected[i] + ", actual is " + actual[i]);                }            }        }    } else {        if (res != null) {            System.out.println("URL=" + res.getUrlAsString());        }        fail("expected or actual byte arrays were null");    }}
0
private byte[] createExpectedFormDataOutput(String boundaryString, String contentEncoding, String titleField, String titleValue, String descriptionField, String descriptionValue, boolean lastMultipart) throws IOException
{        final byte[] DASH_DASH = "--".getBytes(StandardCharsets.ISO_8859_1);    final ByteArrayOutputStream output = new ByteArrayOutputStream();        output.write(DASH_DASH);    output.write(boundaryString.getBytes(StandardCharsets.ISO_8859_1));    output.write(CRLF);    output.write("Content-Disposition: form-data; name=\"".getBytes(StandardCharsets.ISO_8859_1));    output.write(titleField.getBytes(StandardCharsets.ISO_8859_1));    output.write("\"".getBytes(StandardCharsets.ISO_8859_1));    output.write(CRLF);    output.write("Content-Type: text/plain".getBytes(StandardCharsets.ISO_8859_1));    if (contentEncoding != null) {        output.write("; charset=".getBytes(StandardCharsets.ISO_8859_1));        output.write(contentEncoding.getBytes(StandardCharsets.ISO_8859_1));    }    output.write(CRLF);    output.write("Content-Transfer-Encoding: 8bit".getBytes(StandardCharsets.ISO_8859_1));    output.write(CRLF);    output.write(CRLF);    if (contentEncoding != null) {        output.write(titleValue.getBytes(contentEncoding));    } else {                output.write(titleValue.getBytes());    }    output.write(CRLF);    output.write(DASH_DASH);    output.write(boundaryString.getBytes(StandardCharsets.ISO_8859_1));    output.write(CRLF);    output.write("Content-Disposition: form-data; name=\"".getBytes(StandardCharsets.ISO_8859_1));    output.write(descriptionField.getBytes(StandardCharsets.ISO_8859_1));    output.write("\"".getBytes(StandardCharsets.ISO_8859_1));    output.write(CRLF);    output.write("Content-Type: text/plain".getBytes(StandardCharsets.ISO_8859_1));    if (contentEncoding != null) {        output.write("; charset=".getBytes(StandardCharsets.ISO_8859_1));        output.write(contentEncoding.getBytes(StandardCharsets.ISO_8859_1));    }    output.write(CRLF);    output.write("Content-Transfer-Encoding: 8bit".getBytes(StandardCharsets.ISO_8859_1));    output.write(CRLF);    output.write(CRLF);    if (contentEncoding != null) {        output.write(descriptionValue.getBytes(contentEncoding));    } else {                output.write(descriptionValue.getBytes());    }    output.write(CRLF);    output.write(DASH_DASH);    output.write(boundaryString.getBytes(StandardCharsets.ISO_8859_1));    if (lastMultipart) {        output.write(DASH_DASH);    }    output.write(CRLF);    output.flush();    output.close();    return output.toByteArray();}
0
private byte[] createExpectedFilepartOutput(String boundaryString, String fileField, File file, String mimeType, byte[] fileContent) throws IOException
{    final byte[] DASH_DASH = "--".getBytes(StandardCharsets.ISO_8859_1);    final ByteArrayOutputStream output = new ByteArrayOutputStream();        String filename = file.getName();    output.write("Content-Disposition: form-data; name=\"".getBytes(StandardCharsets.ISO_8859_1));    output.write(fileField.getBytes(StandardCharsets.ISO_8859_1));    output.write(("\"; filename=\"" + filename + "\"").getBytes(StandardCharsets.ISO_8859_1));    output.write(CRLF);    output.write("Content-Type: ".getBytes(StandardCharsets.ISO_8859_1));    output.write(mimeType.getBytes(StandardCharsets.ISO_8859_1));    output.write(CRLF);    output.write("Content-Transfer-Encoding: binary".getBytes(StandardCharsets.ISO_8859_1));    output.write(CRLF);    output.write(CRLF);    output.write(fileContent);    output.write(CRLF);    output.write(DASH_DASH);    output.write(boundaryString.getBytes(StandardCharsets.ISO_8859_1));        output.write(DASH_DASH);    output.write(CRLF);    output.flush();    output.close();    return output.toByteArray();}
0
private byte[] createExpectedFormAndUploadOutput(String boundaryString, String contentEncoding, String titleField, String titleValue, String descriptionField, String descriptionValue, String fileField, File fileValue, String fileMimeType, byte[] fileContent) throws IOException
{        byte[] formdataMultipart = createExpectedFormDataOutput(boundaryString, contentEncoding, titleField, titleValue, descriptionField, descriptionValue, false);    byte[] fileMultipart = createExpectedFilepartOutput(boundaryString, fileField, fileValue, fileMimeType, fileContent);        ByteArrayOutputStream output = new ByteArrayOutputStream();    output.write(formdataMultipart);    output.write(fileMultipart);    output.flush();    output.close();    return output.toByteArray();}
0
private HTTPSamplerBase createHttpSampler(int samplerType)
{    switch(samplerType) {        case HTTP_SAMPLER:            return new HTTPSampler();        case HTTP_SAMPLER3:            return new HTTPSampler3();        default:            throw new IllegalArgumentException("Unexpected type: " + samplerType);    }}
0
public void testIsWebdavMethod()
{    for (String method : VALID_METHODS) {        assertTrue(method + " is a HttpWebdav method", HttpWebdav.isWebdavMethod(method));    }    for (String method : INVALID_METHODS) {        assertFalse(method + " is not a HttpWebdav method", HttpWebdav.isWebdavMethod(method));    }}
0
public void testGetMethod() throws URISyntaxException
{    for (String method : VALID_METHODS) {        HttpRequestBase request = new HttpWebdav(method, new URI("http://example.com"));        assertEquals(method, request.getMethod());    }}
0
public void checkThatFilesAreReadRelativeToBaseDir()
{    String baseDirPath = FileServer.getFileServer().getBaseDir();    File baseDir = new File(baseDirPath);    try {        File file = new File(getResourceFilePath("checkThatFilesAreReadRelativeToBaseDir.txt"));        FileServer.getFileServer().setBase(file.getParentFile());        HTTPSamplerBase sampler = new HTTPSampler3();        sampler.setMethod("POST");        sampler.setPath("https://httpbin.org/post");        sampler.setHTTPFiles(new HTTPFileArg[] { new HTTPFileArg(file.getName(), "", "") });        SampleResult sample = sampler.sample();        assertThat(sample.getResponseDataAsString(), not(containsString("java.io.FileNotFoundException:")));    } finally {        FileServer.getFileServer().setBase(baseDir);    }}
0
public void testConstruct()
{    new LogFilter();}
0
public void setUp()
{    testf = new LogFilter();}
0
public void testReplaceExtension()
{    testf.setReplaceExtension("html", "jsp");        testf.isFiltered(TESTSTR, null);    assertEquals(TESTSTROUT, testf.filter(TESTSTR));}
0
public void testExcludeFiles()
{    testf.excludeFiles(INCL);    for (TestData td : TESTDATA) {        String theFile = td.file;        boolean expect = td.exclfile;        testf.isFiltered(theFile, null);        String line = testf.filter(theFile);        if (line != null) {            assertTrue("Expect to accept " + theFile, expect);        } else {            assertFalse("Expect to reject " + theFile, expect);        }    }}
0
public void testIncludeFiles()
{    testf.includeFiles(INCL);    for (TestData td : TESTDATA) {        String theFile = td.file;        boolean expect = td.inclfile;        testf.isFiltered(theFile, null);        String line = testf.filter(theFile);        if (line != null) {            assertTrue("Expect to accept " + theFile, expect);        } else {            assertFalse("Expect to reject " + theFile, expect);        }    }}
0
public void testExcludePattern()
{    testf.excludePattern(PATTERNS);    for (TestData td : TESTDATA) {        String theFile = td.file;        boolean expect = td.exclpatt;        assertPrimitiveEquals(!expect, testf.isFiltered(theFile, null));        String line = testf.filter(theFile);        if (line != null) {            assertTrue("Expect to accept " + theFile, expect);        } else {            assertFalse("Expect to reject " + theFile, expect);        }    }}
0
public void testIncludePattern()
{    testf.includePattern(PATTERNS);    for (TestData td : TESTDATA) {        String theFile = td.file;        boolean expect = td.inclpatt;        assertPrimitiveEquals(!expect, testf.isFiltered(theFile, null));        String line = testf.filter(theFile);        if (line != null) {            assertTrue("Expect to accept " + theFile, expect);        } else {            assertFalse("Expect to reject " + theFile, expect);        }    }}
0
public void testGetCookieManager()
{    SessionFilter orig = new SessionFilter();    SessionFilter clone = (SessionFilter) orig.clone();    final String ipAddr = "1.2.3.4";    CookieManager cmOrig = orig.getCookieManager(ipAddr);        orig.threadFinished();    CookieManager cmClone = clone.getCookieManager(ipAddr);        clone.threadFinished();    assertSame(cmOrig, cmClone);}
0
public void testGetCookieManagerLastUse()
{    SessionFilter orig = new SessionFilter();    SessionFilter clone = (SessionFilter) orig.clone();    final String ipAddr = "1.2.3.4";    CookieManager cmOrig = orig.getCookieManager(ipAddr);    @SuppressWarnings("unused")    CookieManager     secondCm = orig.getCookieManager("2.2.2.2");    CookieManager cmClone = clone.getCookieManager(ipAddr);        orig.threadFinished();        clone.threadFinished();    assertSame(cmOrig, cmClone);}
0
public void testIsFiltered() throws Exception
{    Map<String, CookieManager> cm = new ConcurrentHashMap<>();    Set<CookieManager> inUse = Collections.synchronizedSet(new HashSet<CookieManager>());    SessionFilter filter = new SessionFilter(cm, inUse);    HTTPSampler sampler = new HTTPSampler();    filter.isFiltered("1.2.3.4 ...", sampler);    assertSame(cm.get("1.2.3.4"), sampler.getCookieManager());    assertTrue(inUse.contains(sampler.getCookieManager()));}
0
public void testConstruct() throws Exception
{    TCLogParser tcp;    tcp = new TCLogParser();    assertNull("Should not have set the filename", tcp.FILENAME);    String file = "testfiles/access.log";    tcp = new TCLogParser(file);    assertEquals("Filename should have been saved", file, tcp.FILENAME);}
0
public void testcleanURL() throws Exception
{    String res = tclp.cleanURL(URL1);    assertEquals("/addrbook/", res);    assertNull(tclp.stripFile(res, new HTTPNullSampler()));}
0
public void testcheckURL() throws Exception
{    assertFalse("URL does not have a query", tclp.checkURL(URL1));    assertTrue("URL is a query", tclp.checkURL(URL2));}
0
public void testHEAD() throws Exception
{    String res = tclp.cleanURL(TEST3);    assertEquals("/addrbook/", res);    assertNull(tclp.stripFile(res, new HTTPNullSampler()));}
0
public void testCloning() throws Exception
{    HTTPArgument arg = new HTTPArgument("name.?", "value_ here");    assertEquals("name.?", arg.getName());    assertEquals("value_ here", arg.getValue());    assertEquals("name.%3F", arg.getEncodedName());    assertEquals("value_+here", arg.getEncodedValue());    HTTPArgument clone = (HTTPArgument) arg.clone();    assertEquals("name.%3F", clone.getEncodedName());    assertEquals("value_+here", clone.getEncodedValue());    assertEquals("name.?", clone.getName());    assertEquals("value_ here", clone.getValue());}
0
public void testConversion() throws Exception
{    Arguments args = new Arguments();    args.addArgument("name.?", "value_ here");    args.addArgument("name$of property", "value_.+");    HTTPArgument.convertArgumentsToHTTP(args);    CollectionProperty argList = args.getArguments();    HTTPArgument httpArg = (HTTPArgument) argList.get(0).getObjectValue();    assertEquals("name.%3F", httpArg.getEncodedName());    assertEquals("value_+here", httpArg.getEncodedValue());    httpArg = (HTTPArgument) argList.get(1).getObjectValue();    assertEquals("name%24of+property", httpArg.getEncodedName());    assertEquals("value_.%2B", httpArg.getEncodedValue());}
0
public void testEncoding() throws Exception
{    HTTPArgument arg;    arg = new HTTPArgument("name.?", "value_ here", false);    assertEquals("name.?", arg.getName());    assertEquals("value_ here", arg.getValue());    assertEquals("name.%3F", arg.getEncodedName());    assertEquals("value_+here", arg.getEncodedValue());        arg.setAlwaysEncoded(false);    assertEquals("name.?", arg.getEncodedName());    assertEquals("value_ here", arg.getEncodedValue());        arg = new HTTPArgument("name.?", "value_ here", true);    assertEquals("name.?", arg.getName());    assertEquals("value_ here", arg.getValue());    assertEquals("name.%3F", arg.getEncodedName());    assertEquals("value_+here", arg.getEncodedValue());        arg.setAlwaysEncoded(false);    assertEquals("name.?", arg.getEncodedName());    assertEquals("value_ here", arg.getEncodedValue());        arg = new HTTPArgument("name.%3F", "value_+here", true);    assertEquals("name.?", arg.getName());    assertEquals("value_ here", arg.getValue());    assertEquals("name.%3F", arg.getEncodedName());    assertEquals("value_+here", arg.getEncodedValue());        arg.setAlwaysEncoded(false);    assertEquals("name.?", arg.getEncodedName());    assertEquals("value_ here", arg.getEncodedValue());    arg = new HTTPArgument("", "\00\01\07", "", false);    arg.setAlwaysEncoded(false);    assertEquals("", arg.getEncodedName());    assertEquals("\00\01\07", arg.getEncodedValue());}
0
public void testConstructors() throws Exception
{    HTTPFileArg file = new HTTPFileArg();    assertEquals("no parameter failure", "", file.getPath());    assertEquals("no parameter failure", "", file.getParamName());    assertEquals("no parameter failure", "", file.getMimeType());    file = new HTTPFileArg("path");    assertEquals("single parameter failure", "path", file.getPath());    assertEquals("single parameter failure", "", file.getParamName());    assertEquals("single parameter failure", "", file.getMimeType());    file = new HTTPFileArg("path", "param", "mimetype");    assertEquals("three parameter failure", "path", file.getPath());    assertEquals("three parameter failure", "param", file.getParamName());    assertEquals("three parameter failure", "mimetype", file.getMimeType());    HTTPFileArg file2 = new HTTPFileArg(file);    assertEquals("copy constructor failure", "path", file2.getPath());    assertEquals("copy constructor failure", "param", file2.getParamName());    assertEquals("copy constructor failure", "mimetype", file2.getMimeType());}
0
public void testGettersSetters() throws Exception
{    HTTPFileArg file = new HTTPFileArg();    assertEquals("", file.getPath());    assertEquals("", file.getParamName());    assertEquals("", file.getMimeType());    file.setPath("path");    file.setParamName("param");    file.setMimeType("mimetype");    file.setHeader("header");    assertEquals("path", file.getPath());    assertEquals("param", file.getParamName());    assertEquals("mimetype", file.getMimeType());    assertEquals("header", file.getHeader());}
0
public void testToString() throws Exception
{    HTTPFileArg file = new HTTPFileArg("path1", "param1", "mimetype1");    assertEquals("path:'path1'|param:'param1'|mimetype:'mimetype1'", file.toString());}
0
public void testConstructors() throws Exception
{    HTTPFileArgs files = new HTTPFileArgs();    assertEquals(0, files.getHTTPFileArgCount());}
0
public void testAdding() throws Exception
{    HTTPFileArgs files = new HTTPFileArgs();    assertEquals(0, files.getHTTPFileArgCount());    files.addHTTPFileArg("hede");    assertEquals(1, files.getHTTPFileArgCount());    assertEquals("hede", ((HTTPFileArg) files.iterator().next().getObjectValue()).getPath());    HTTPFileArg file = new HTTPFileArg("hodo");    files.addHTTPFileArg(file);    assertEquals(2, files.getHTTPFileArgCount());    PropertyIterator iter = files.iterator();    assertEquals("hede", ((HTTPFileArg) iter.next().getObjectValue()).getPath());    assertEquals("hodo", ((HTTPFileArg) iter.next().getObjectValue()).getPath());    files.addEmptyHTTPFileArg();    assertEquals(3, files.getHTTPFileArgCount());    iter = files.iterator();    assertEquals("hede", ((HTTPFileArg) iter.next().getObjectValue()).getPath());    assertEquals("hodo", ((HTTPFileArg) iter.next().getObjectValue()).getPath());    assertEquals("", ((HTTPFileArg) iter.next().getObjectValue()).getPath());}
0
public void testSetHTTPFileArgs() throws Exception
{    List<HTTPFileArg> newHTTPFileArgs = new LinkedList<>();    newHTTPFileArgs.add(new HTTPFileArg("hede"));    HTTPFileArgs files = new HTTPFileArgs();    files.setHTTPFileArgs(newHTTPFileArgs);    assertEquals(1, files.getHTTPFileArgCount());    assertEquals("hede", ((HTTPFileArg) files.iterator().next().getObjectValue()).getPath());}
0
public void testRemoving() throws Exception
{    HTTPFileArgs files = new HTTPFileArgs();    assertEquals(0, files.getHTTPFileArgCount());    files.addHTTPFileArg("hede");    assertEquals(1, files.getHTTPFileArgCount());    files.clear();    assertEquals(0, files.getHTTPFileArgCount());    files.addHTTPFileArg("file1");    files.addHTTPFileArg("file2");    files.addHTTPFileArg("file3");    HTTPFileArg file = new HTTPFileArg("file4");    files.addHTTPFileArg(file);    files.addHTTPFileArg("file5");    files.addHTTPFileArg("file6");    assertEquals(6, files.getHTTPFileArgCount());    files.removeHTTPFileArg("file3");    assertEquals(5, files.getHTTPFileArgCount());    PropertyIterator iter = files.iterator();    assertEquals("file1", ((HTTPFileArg) iter.next().getObjectValue()).getPath());    assertEquals("file2", ((HTTPFileArg) iter.next().getObjectValue()).getPath());    assertEquals("file4", ((HTTPFileArg) iter.next().getObjectValue()).getPath());    assertEquals("file5", ((HTTPFileArg) iter.next().getObjectValue()).getPath());    assertEquals("file6", ((HTTPFileArg) iter.next().getObjectValue()).getPath());    files.removeHTTPFileArg(file);    assertEquals(4, files.getHTTPFileArgCount());    iter = files.iterator();    assertEquals("file1", ((HTTPFileArg) iter.next().getObjectValue()).getPath());    assertEquals("file2", ((HTTPFileArg) iter.next().getObjectValue()).getPath());    assertEquals("file5", ((HTTPFileArg) iter.next().getObjectValue()).getPath());    assertEquals("file6", ((HTTPFileArg) iter.next().getObjectValue()).getPath());    files.removeHTTPFileArg(new HTTPFileArg("file5"));    assertEquals(3, files.getHTTPFileArgCount());    iter = files.iterator();    assertEquals("file1", ((HTTPFileArg) iter.next().getObjectValue()).getPath());    assertEquals("file2", ((HTTPFileArg) iter.next().getObjectValue()).getPath());    assertEquals("file6", ((HTTPFileArg) iter.next().getObjectValue()).getPath());    files.removeHTTPFileArg(1);    assertEquals(2, files.getHTTPFileArgCount());    iter = files.iterator();    assertEquals("file1", ((HTTPFileArg) iter.next().getObjectValue()).getPath());    assertEquals("file6", ((HTTPFileArg) iter.next().getObjectValue()).getPath());    files.removeAllHTTPFileArgs();    assertEquals(0, files.getHTTPFileArgCount());}
0
public void testToString() throws Exception
{    HTTPFileArgs files = new HTTPFileArgs();    files.addHTTPFileArg("file1");    files.addHTTPFileArg("file2");    files.addHTTPFileArg("file3");    assertEquals("path:'file1'|param:''|mimetype:''\n" + "path:'file2'|param:''|mimetype:''\n" + "path:'file3'|param:''|mimetype:''", files.toString());}
0
public void testGetQueryMapValueContainingAmpersand()
{        String query = "login=toto1&pwd=Welcome%261";    Map<String, String[]> params = RequestViewHTTP.getQueryMap(query);    Assert.assertNotNull(params);    Assert.assertEquals(2, params.size());    String[] param1 = params.get("login");    Assert.assertNotNull(param1);    Assert.assertEquals(1, param1.length);    Assert.assertEquals("toto1", param1[0]);    String[] param2 = params.get("pwd");    Assert.assertNotNull(param2);    Assert.assertEquals(1, param2.length);    Assert.assertEquals("Welcome&1", param2[0]);}
0
public void testGetQueryMapWithEmptyValue()
{    String query = "postalCode=59115&qrcode=";    Map<String, String[]> params = RequestViewHTTP.getQueryMap(query);    Assert.assertNotNull(params);    Assert.assertEquals(2, params.size());    String[] param1 = params.get("postalCode");    Assert.assertNotNull(param1);    Assert.assertEquals(1, param1.length);    Assert.assertEquals("59115", param1[0]);    String[] param2 = params.get("qrcode");    Assert.assertNotNull(param2);    Assert.assertEquals(1, param2.length);    Assert.assertEquals("", param2[0]);}
0
public void testGetQueryMapMultipleValues()
{    String query = "param2=15&param1=12&param2=baulpismuth";    Map<String, String[]> params = RequestViewHTTP.getQueryMap(query);    Assert.assertNotNull(params);    Assert.assertEquals(2, params.size());    String[] param1 = params.get("param1");    Assert.assertNotNull(param1);    Assert.assertEquals(1, param1.length);    Assert.assertEquals("12", param1[0]);    String[] param2 = params.get("param2");    Assert.assertNotNull(param2);    Assert.assertEquals(2, param2.length);    Assert.assertEquals("15", param2[0]);    Assert.assertEquals("baulpismuth", param2[1]);}
0
public void testGetQueryMapAmpInValue()
{    String query = "param2=15&param1=12&param3=baul%26Pismuth";    Map<String, String[]> params = RequestViewHTTP.getQueryMap(query);    Assert.assertNotNull(params);    Assert.assertEquals(3, params.size());    String[] param1 = params.get("param1");    Assert.assertNotNull(param1);    Assert.assertEquals(1, param1.length);    Assert.assertEquals("12", param1[0]);    String[] param2 = params.get("param2");    Assert.assertNotNull(param2);    Assert.assertEquals(1, param2.length);    Assert.assertEquals("15", param2[0]);    String[] param3 = params.get("param3");    Assert.assertNotNull(param3);    Assert.assertEquals(1, param3.length);    Assert.assertEquals("baul&Pismuth", param3[0]);}
0
public void testGetQueryMapBug54055()
{    String query = "param2=15&param1=12&param3=bu4m1KzFvsozCnR4lra0%2Be69YzpnRcF09nDjc3VJvl8%3D";    Map<String, String[]> params = RequestViewHTTP.getQueryMap(query);    Assert.assertNotNull(params);    Assert.assertEquals(3, params.size());    String[] param1 = params.get("param1");    Assert.assertNotNull(param1);    Assert.assertEquals(1, param1.length);    Assert.assertEquals("12", param1[0]);    String[] param2 = params.get("param2");    Assert.assertNotNull(param2);    Assert.assertEquals(1, param2.length);    Assert.assertEquals("15", param2[0]);    String[] param3 = params.get("param3");    Assert.assertNotNull(param3);    Assert.assertEquals(1, param3.length);    Assert.assertEquals("bu4m1KzFvsozCnR4lra0+e69YzpnRcF09nDjc3VJvl8=", param3[0]);}
0
public void testGetQueryMapBug52491()
{    String query = "<envelope><header><context><conversationId>119</conversationId></context></header>" + "<body><call component=\"OrderTransfer\" method=\"getSourceManifestID\" id=\"2\">\n" + "<params></params><refs></refs></call></body></envelope>";    Map<String, String[]> params = RequestViewHTTP.getQueryMap(query);    Assert.assertNotNull(params);    Assert.assertEquals(1, params.size());    Map.Entry<String, String[]> param1 = params.entrySet().iterator().next();    Assert.assertNotNull(param1);    Assert.assertEquals(1, param1.getValue().length);    Assert.assertEquals(query, param1.getValue()[0]);    Assert.assertTrue(StringUtils.isBlank(param1.getKey()));}
0
public void testGetQueryMapSoapHack()
{    String query = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"\n" + "xmlns:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\"\n" + "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n" + "xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n" + "    <SOAP-ENV:Header>\n" + "        <m:Security\n" + "xmlns:m=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\">\n" + "            <UsernameToken>\n" + "                <Username>hello</Username>\n" + "                <Password>world</Password>\n" + "            </UsernameToken>\n" + "        </m:Security>\n" + "    </SOAP-ENV:Header>\n" + "    <SOAP-ENV:Body>     \n" + "        <m:GeefPersoon xmlns:m=\"http://webservice.namespace\">\n" + "            <Vraag>\n" + "                <Context>\n" + "                    <Naam>GeefPersoon</Naam>\n" + "                    <Versie>01.00.0000</Versie>\n" + "                </Context>\n" + "                <Inhoud>\n" + "                    <INSZ>650602505589</INSZ>\n" + "                </Inhoud>\n" + "            </Vraag>\n" + "        </m:GeefPersoon>\n" + "    </SOAP-ENV:Body>\n" + "</SOAP-ENV:Envelope>";    Map<String, String[]> params = RequestViewHTTP.getQueryMap(query);    Assert.assertNotNull(params);    Assert.assertEquals(1, params.size());    Map.Entry<String, String[]> param1 = params.entrySet().iterator().next();    Assert.assertNotNull(param1);    Assert.assertEquals(1, param1.getValue().length);    Assert.assertEquals(query, param1.getValue()[0]);    Assert.assertTrue(StringUtils.isBlank(param1.getKey()));}
0
public void testReplace() throws Exception
{    HeaderManager headerManager = new HeaderManager();    headerManager.add(new Header("Referer", "https://jmeter.apache.org/changes.html"));    headerManager.add(new Header("JSESSIONID", "AZAZDZDAFEFZEVZEZEVZEVZEVZZ"));    int numberOfReplacements = headerManager.replace("jmeter.apache.org", "${host}", true);    assertEquals(1, numberOfReplacements);    assertEquals("Referer", headerManager.getHeader(0).getName());    assertEquals("JSESSIONID", headerManager.getHeader(1).getName());    assertEquals("https://${host}/changes.html", headerManager.getHeader(0).getValue());    assertEquals("AZAZDZDAFEFZEVZEZEVZEVZEVZZ", headerManager.getHeader(1).getValue());    headerManager = new HeaderManager();    headerManager.add(new Header("Referer", "https://JMeter.apache.org/changes.html"));    headerManager.add(new Header("JSESSIONID", "AZAZDZDAFEFZEVZEZEVZEVZEVZZ"));    numberOfReplacements = headerManager.replace("jmeter.apache.org", "${host}", false);    assertEquals(1, numberOfReplacements);    assertEquals("Referer", headerManager.getHeader(0).getName());    assertEquals("JSESSIONID", headerManager.getHeader(1).getName());    assertEquals("https://${host}/changes.html", headerManager.getHeader(0).getValue());    assertEquals("AZAZDZDAFEFZEVZEZEVZEVZEVZZ", headerManager.getHeader(1).getValue());}
0
public void testReplaceNoMatch() throws Exception
{    HeaderManager headerManager = new HeaderManager();    headerManager.add(new Header("Referer", "https://jmeter.apache.org/changes.html"));    headerManager.add(new Header("JSESSIONID", "AZAZDZDAFEFZEVZEZEVZEVZEVZZ"));    int numberOfReplacements = headerManager.replace("JMeter.apache.org", "${host}", true);    assertEquals(0, numberOfReplacements);    assertEquals("Referer", headerManager.getHeader(0).getName());    assertEquals("JSESSIONID", headerManager.getHeader(1).getName());    assertEquals("https://jmeter.apache.org/changes.html", headerManager.getHeader(0).getValue());    assertEquals("AZAZDZDAFEFZEVZEZEVZEVZEVZZ", headerManager.getHeader(1).getValue());    headerManager = new HeaderManager();    headerManager.add(new Header("Referer", "https://jmeter.apache.org/changes.html"));    headerManager.add(new Header("JSESSIONID", "AZAZDZDAFEFZEVZEZEVZEVZEVZZ"));    numberOfReplacements = headerManager.replace("JMeterx.apache.org", "${host}", false);    assertEquals(0, numberOfReplacements);    assertEquals("Referer", headerManager.getHeader(0).getName());    assertEquals("JSESSIONID", headerManager.getHeader(1).getName());    assertEquals("https://jmeter.apache.org/changes.html", headerManager.getHeader(0).getValue());    assertEquals("AZAZDZDAFEFZEVZEZEVZEVZEVZZ", headerManager.getHeader(1).getValue());}
0
public String getLabelResource()
{        return "java_request_defaults";}
0
private final void init()
{        setLayout(new BorderLayout(0, 5));    if (displayName) {        setBorder(makeBorder());        add(makeTitlePanel(), BorderLayout.NORTH);    }    JPanel classnameRequestPanel = new JPanel(new BorderLayout(0, 5));    classnameRequestPanel.add(createClassnamePanel(), BorderLayout.NORTH);    classnameRequestPanel.add(createParameterPanel(), BorderLayout.CENTER);    add(classnameRequestPanel, BorderLayout.CENTER);}
0
private JPanel createClassnamePanel()
{    List<String> possibleClasses = new ArrayList<>();    try {                        possibleClasses = ClassFinder.findClassesThatExtend(JMeterUtils.getSearchPaths(), new Class[] { JavaSamplerClient.class });                        possibleClasses.remove(JavaSampler.class.getName() + "$ErrorSamplerClient");    } catch (Exception e) {            }    classNameLabeledChoice = new JLabeledChoice(JMeterUtils.getResString("protocol_java_classname"), possibleClasses.toArray(ArrayUtils.EMPTY_STRING_ARRAY), true, false);    classNameLabeledChoice.addChangeListener(this);    warningLabel.setForeground(Color.RED);    Font font = warningLabel.getFont();    warningLabel.setFont(new Font(font.getFontName(), Font.BOLD, (int) (font.getSize() * 1.1)));    warningLabel.setVisible(false);    VerticalPanel panel = new VerticalPanel();    panel.add(classNameLabeledChoice);    panel.add(warningLabel);    return panel;}
1
public void stateChanged(ChangeEvent evt)
{    if (evt.getSource() == classNameLabeledChoice) {        configureClassName();    }}
0
private void configureClassName()
{    String className = classNameLabeledChoice.getText().trim();    try {        JavaSamplerClient client = (JavaSamplerClient) Class.forName(className, true, Thread.currentThread().getContextClassLoader()).getDeclaredConstructor().newInstance();        Arguments currArgs = new Arguments();        argsPanel.modifyTestElement(currArgs);        Map<String, String> currArgsMap = currArgs.getArgumentsAsMap();        Arguments newArgs = new Arguments();        Arguments testParams = null;        try {            testParams = client.getDefaultParameters();        } catch (AbstractMethodError e) {                    }        if (testParams != null) {            for (JMeterProperty jMeterProperty : testParams.getArguments()) {                Argument arg = (Argument) jMeterProperty.getObjectValue();                String name = arg.getName();                String value = arg.getValue();                                if (currArgsMap.containsKey(name)) {                    String newVal = currArgsMap.get(name);                    if (newVal != null && newVal.length() > 0) {                        value = newVal;                    }                }                newArgs.addArgument(name, value);            }        }        argsPanel.configure(newArgs);        warningLabel.setVisible(false);    } catch (Exception e) {                warningLabel.setVisible(true);    }}
1
private JPanel createParameterPanel()
{        argsPanel = new ArgumentsPanel(JMeterUtils.getResString("paramtable"));    return argsPanel;}
0
public void configure(TestElement config)
{    super.configure(config);    argsPanel.configure((Arguments) config.getProperty(JavaSampler.ARGUMENTS).getObjectValue());    String className = config.getPropertyAsString(JavaSampler.CLASSNAME);    if (!checkContainsClassName(classNameLabeledChoice, className)) {        classNameLabeledChoice.addValue(className);    }    warningLabel.setVisible(!classOk(className));    classNameLabeledChoice.setText(className);    configureClassName();}
0
private boolean classOk(String className)
{    try {        JavaSamplerClient client = (JavaSamplerClient) Class.forName(className, true, Thread.currentThread().getContextClassLoader()).getDeclaredConstructor().newInstance();                return client != null;    } catch (Exception ex) {                return false;    }}
1
private static boolean checkContainsClassName(JLabeledChoice classnameChoice, String className)
{    Set<String> set = new HashSet<>(Arrays.asList(classnameChoice.getItems()));    return set.contains(className);}
0
public TestElement createTestElement()
{    JavaConfig config = new JavaConfig();    modifyTestElement(config);    return config;}
0
public void modifyTestElement(TestElement config)
{    configureTestElement(config);    ((JavaConfig) config).setArguments((Arguments) argsPanel.createTestElement());    ((JavaConfig) config).setClassname(classNameLabeledChoice.getText().trim());}
0
public void clearGui()
{    super.clearGui();    this.displayName = true;    this.warningLabel.setVisible(false);    argsPanel.clearGui();    classNameLabeledChoice.setSelectedIndex(0);}
0
public void setClassname(String classname)
{    setProperty(JavaSampler.CLASSNAME, classname);}
0
public String getClassname()
{    return getPropertyAsString(JavaSampler.CLASSNAME);}
0
public void addArgument(String name, String value)
{    Arguments args = this.getArguments();    args.addArgument(name, value);}
0
public void removeArguments()
{    setProperty(new TestElementProperty(JavaSampler.ARGUMENTS, new Arguments()));}
0
public void setArguments(Arguments args)
{    setProperty(new TestElementProperty(JavaSampler.ARGUMENTS, args));}
0
public Arguments getArguments()
{    return (Arguments) getProperty(JavaSampler.ARGUMENTS).getObjectValue();}
0
public void configure(TestElement element)
{    scriptField.setInitialText(element.getPropertyAsString(BeanShellSampler.SCRIPT));    scriptField.setCaretPosition(0);    filename.setFilename(element.getPropertyAsString(BeanShellSampler.FILENAME));    parameters.setText(element.getPropertyAsString(BeanShellSampler.PARAMETERS));    resetInterpreter.setSelected(element.getPropertyAsBoolean(BeanShellSampler.RESET_INTERPRETER));    super.configure(element);}
0
public TestElement createTestElement()
{    BeanShellSampler sampler = new BeanShellSampler();    modifyTestElement(sampler);    return sampler;}
0
public void modifyTestElement(TestElement te)
{    te.clear();    super.configureTestElement(te);    te.setProperty(BeanShellSampler.SCRIPT, scriptField.getText());    te.setProperty(BeanShellSampler.FILENAME, filename.getFilename());    te.setProperty(BeanShellSampler.PARAMETERS, parameters.getText());    te.setProperty(new BooleanProperty(BeanShellSampler.RESET_INTERPRETER, resetInterpreter.isSelected()));}
0
public void clearGui()
{    super.clearGui();        filename.setFilename("");        parameters.setText("");        scriptField.setInitialText("");    resetInterpreter.setSelected(false);}
0
public String getLabelResource()
{        return "bsh_sampler_title";}
0
private JPanel createFilenamePanel()
{    JPanel filenamePanel = new JPanel(new BorderLayout());    filenamePanel.add(filename, BorderLayout.CENTER);    return filenamePanel;}
0
private JPanel createParameterPanel()
{        JLabel label = new JLabel(JMeterUtils.getResString("bsh_script_parameters"));    parameters = new JTextField(10);    parameters.setName(BeanShellSampler.PARAMETERS);    label.setLabelFor(parameters);    JPanel parameterPanel = new JPanel(new BorderLayout(5, 0));    parameterPanel.add(label, BorderLayout.WEST);    parameterPanel.add(parameters, BorderLayout.CENTER);    return parameterPanel;}
0
private JPanel createResetPanel()
{        resetInterpreter = new JCheckBox(JMeterUtils.getResString("bsh_script_reset_interpreter"));    resetInterpreter.setName(BeanShellSampler.PARAMETERS);    JPanel resetInterpreterPanel = new JPanel(new BorderLayout());    resetInterpreterPanel.add(resetInterpreter, BorderLayout.WEST);    return resetInterpreterPanel;}
0
private void init()
{        setLayout(new BorderLayout(0, 5));    setBorder(makeBorder());    Box box = Box.createVerticalBox();    box.add(makeTitlePanel());    box.add(createResetPanel());    box.add(createParameterPanel());    box.add(createFilenamePanel());    add(box, BorderLayout.NORTH);    JPanel panel = createScriptPanel();    add(panel, BorderLayout.CENTER);        add(Box.createVerticalStrut(panel.getPreferredSize().height), BorderLayout.WEST);}
0
private JPanel createScriptPanel()
{    scriptField = JSyntaxTextArea.getInstance(20, 20);        JLabel label = new JLabel(JMeterUtils.getResString("bsh_script"));    label.setLabelFor(scriptField);    JPanel panel = new JPanel(new BorderLayout());    panel.add(label, BorderLayout.NORTH);    panel.add(JTextScrollPane.getInstance(scriptField), BorderLayout.CENTER);        JTextArea explain = new JTextArea(JMeterUtils.getResString("bsh_script_variables"));    explain.setLineWrap(true);    explain.setEditable(false);    explain.setBackground(this.getBackground());    panel.add(explain, BorderLayout.SOUTH);    return panel;}
0
public String getLabelResource()
{        return "java_request";}
0
private void init()
{        setLayout(new BorderLayout(0, 5));    setBorder(makeBorder());    add(makeTitlePanel(), BorderLayout.NORTH);    javaPanel = new JavaConfigGui(false);    add(javaPanel, BorderLayout.CENTER);}
0
public TestElement createTestElement()
{    JavaSampler sampler = new JavaSampler();    modifyTestElement(sampler);    return sampler;}
0
public void modifyTestElement(TestElement sampler)
{    sampler.clear();    JavaConfig config = (JavaConfig) javaPanel.createTestElement();    configureTestElement(sampler);    sampler.addTestElement(config);}
0
public void configure(TestElement el)
{    super.configure(el);    javaPanel.configure(el);}
0
public void clearGui()
{    super.clearGui();    javaPanel.clearGui();}
0
public void setupTest(JavaSamplerContext context)
{    }
1
public void teardownTest(JavaSamplerContext context)
{    }
1
public Arguments getDefaultParameters()
{    return null;}
0
protected org.apache.log.Logger getLogger()
{    return oldLogger;}
0
protected Logger getNewLogger()
{    return log;}
0
protected String getInitFileProperty()
{    return INIT_FILE;}
0
public String getScript()
{    return this.getPropertyAsString(SCRIPT);}
0
public String getFilename()
{    return getPropertyAsString(FILENAME);}
0
public String getParameters()
{    return getPropertyAsString(PARAMETERS);}
0
public boolean isResetInterpreter()
{    return getPropertyAsBoolean(RESET_INTERPRETER);}
0
public SampleResult sample(Entry e)
{    SampleResult res = new SampleResult();    boolean isSuccessful = false;    res.setSampleLabel(getName());    res.sampleStart();    final BeanShellInterpreter bshInterpreter = getBeanShellInterpreter();    if (bshInterpreter == null) {        res.sampleEnd();                res.setResponseCode("503");        res.setResponseMessage("BeanShell Interpreter not found");        res.setSuccessful(false);        return res;    }    try {        String request = getScript();        String fileName = getFilename();        if (fileName.length() == 0) {            res.setSamplerData(request);        } else {            res.setSamplerData(fileName);        }                bshInterpreter.set("SampleResult", res);                        bshInterpreter.set("ResponseCode", "200");                bshInterpreter.set("ResponseMessage", "OK");                bshInterpreter.set("IsSuccess", true);                res.setDataType(SampleResult.TEXT);        savedBsh = bshInterpreter;        Object bshOut = processFileOrScript(bshInterpreter);        savedBsh = null;        if (bshOut != null) {                        String out = bshOut.toString();            res.setResponseData(out, null);        }                        res.setResponseCode(bshInterpreter.get("ResponseCode").toString());                res.setResponseMessage(bshInterpreter.get("ResponseMessage").toString());        isSuccessful = Boolean.valueOf(        bshInterpreter.get("IsSuccess").toString()).booleanValue();    }     catch (NoClassDefFoundError ex) {                        res.setResponseCode("501");        res.setResponseMessage(ex.toString());                res.setStopThread(true);    } catch (    Exception ex) {        if (log.isWarnEnabled()) {                    }                res.setResponseCode("500");        res.setResponseMessage(ex.toString());    } finally {        savedBsh = null;    }    res.sampleEnd();        res.setSuccessful(isSuccessful);    return res;}
1
public boolean interrupt()
{    if (savedBsh != null) {        try {                        savedBsh.evalNoLog("interrupt()");        } catch (JMeterException ignored) {            if (log.isDebugEnabled()) {                                            }        }        return true;    }    return false;}
1
public boolean applies(ConfigTestElement configElement)
{    String guiClass = configElement.getProperty(TestElement.GUI_CLASS).getStringValue();    return APPLIABLE_CONFIG_CLASSES.contains(guiClass);}
0
public SampleResult sample(Entry e)
{    final String label = getName();    final String request = getScript();    final String fileName = getFilename();        SampleResult res = new SampleResult();    res.setSampleLabel(label);    BSFEngine bsfEngine = null;            BSFManager mgr = new BSFManager();                res.setResponseCode("200");        res.setResponseMessage("OK");    res.setSuccessful(true);        res.setDataType(SampleResult.TEXT);    res.sampleStart();    try {        initManager(mgr);                mgr.declareBean("SampleResult", res, res.getClass());                        bsfEngine = mgr.loadScriptingEngine(getScriptLanguage());        Object bsfOut = null;        if (fileName.length() > 0) {            res.setSamplerData("File: " + fileName);            try (FileInputStream fis = new FileInputStream(fileName);                BufferedInputStream is = new BufferedInputStream(fis)) {                bsfOut = bsfEngine.eval(fileName, 0, 0, IOUtils.toString(is, Charset.defaultCharset()));            }        } else {            res.setSamplerData(request);            bsfOut = bsfEngine.eval("script", 0, 0, request);        }        if (bsfOut != null) {            res.setResponseData(bsfOut.toString(), null);        }    } catch (BSFException ex) {                res.setSuccessful(false);                res.setResponseCode("500");        res.setResponseMessage(ex.toString());    } catch (Exception ex) {                        res.setSuccessful(false);                res.setResponseCode("500");        res.setResponseMessage(ex.toString());    } finally {        res.sampleEnd();        mgr.terminate();    }    return res;}
1
public boolean applies(ConfigTestElement configElement)
{    String guiClass = configElement.getProperty(TestElement.GUI_CLASS).getStringValue();    return APPLIABLE_CONFIG_CLASSES.contains(guiClass);}
0
public Object clone()
{    JavaSampler clone = (JavaSampler) super.clone();    clone.javaClass = this.javaClass;    clone.isToBeRegistered = this.isToBeRegistered;    return clone;}
0
private void initClass()
{    String name = getClassname().trim();    try {        javaClass = Class.forName(name, false, Thread.currentThread().getContextClassLoader());        Method method = javaClass.getMethod("teardownTest", JavaSamplerContext.class);        isToBeRegistered = !method.getDeclaringClass().equals(AbstractJavaSamplerClient.class);            } catch (Exception e) {            }}
1
public void setArguments(Arguments args)
{    setProperty(new TestElementProperty(ARGUMENTS, args));}
0
public Arguments getArguments()
{    return (Arguments) getProperty(ARGUMENTS).getObjectValue();}
0
public void setClassname(String classname)
{    setProperty(CLASSNAME, classname);}
0
public String getClassname()
{    return getPropertyAsString(CLASSNAME);}
0
public SampleResult sample(Entry entry)
{    Arguments args = getArguments();        args.addArgument(TestElement.NAME, getName());        context = new JavaSamplerContext(args);    if (javaClient == null) {        if (log.isDebugEnabled()) {                    }        javaClient = createJavaClient();        javaClient.setupTest(context);    }    SampleResult result = javaClient.runTest(context);        if (result != null && result.getSampleLabel().length() == 0) {        result.setSampleLabel(getName());    }    return result;}
1
private JavaSamplerClient createJavaClient()
{    if (javaClass == null) {                return new ErrorSamplerClient();    }    JavaSamplerClient client;    try {        client = (JavaSamplerClient) javaClass.getDeclaredConstructor().newInstance();        if (log.isDebugEnabled()) {                    }        if (isToBeRegistered) {            TEAR_DOWN_SET.add(this);        }    } catch (Exception e) {        if (log.isErrorEnabled()) {                    }        client = new ErrorSamplerClient();    }    return client;}
1
private String whoAmI()
{    return Thread.currentThread().getName() + "@" + Integer.toHexString(hashCode()) + "-" + getName();}
0
public void testStarted()
{    if (log.isDebugEnabled()) {            }    initClass();}
1
public void testStarted(String host)
{    if (log.isDebugEnabled()) {            }    initClass();}
1
public void testEnded()
{    if (log.isDebugEnabled()) {            }    synchronized (TEAR_DOWN_SET) {        for (JavaSampler javaSampler : TEAR_DOWN_SET) {            JavaSamplerClient client = javaSampler.javaClient;            if (client != null) {                client.teardownTest(javaSampler.context);            }        }        TEAR_DOWN_SET.clear();    }}
1
public void testEnded(String host)
{    testEnded();}
0
public SampleResult runTest(JavaSamplerContext p_context)
{    if (log.isDebugEnabled()) {            }    Thread.yield();    SampleResult results = new SampleResult();    results.setSuccessful(false);    results.setResponseData("Class not found: " + getClassname(), null);    results.setSampleLabel("ERROR: " + getClassname());    return results;}
1
public boolean applies(ConfigTestElement configElement)
{    String guiClass = configElement.getProperty(TestElement.GUI_CLASS).getStringValue();    return APPLIABLE_CONFIG_CLASSES.contains(guiClass);}
0
public boolean interrupt()
{    if (javaClient instanceof Interruptible) {        return ((Interruptible) javaClient).interrupt();    }    return false;}
0
public boolean containsParameter(String name)
{    return params.containsKey(name);}
0
public Iterator<String> getParameterNamesIterator()
{    return params.keySet().iterator();}
0
public String getParameter(String name)
{    return getParameter(name, null);}
0
public String getParameter(String name, String defaultValue)
{    if (params == null || !params.containsKey(name)) {        return defaultValue;    }    return params.get(name);}
0
public int getIntParameter(String name) throws NumberFormatException
{    if (params == null || !params.containsKey(name)) {        throw new NumberFormatException("No value for parameter named '" + name + "'.");    }    return Integer.decode(params.get(name)).intValue();}
0
public int getIntParameter(String name, int defaultValue)
{    if (params == null || !params.containsKey(name)) {        return defaultValue;    }    try {        return Integer.decode(params.get(name)).intValue();    } catch (NumberFormatException e) {                return defaultValue;    }}
1
public long getLongParameter(String name) throws NumberFormatException
{    if (params == null || !params.containsKey(name)) {        throw new NumberFormatException("No value for parameter named '" + name + "'.");    }    return Long.decode(params.get(name)).longValue();}
0
public long getLongParameter(String name, long defaultValue)
{    if (params == null || !params.containsKey(name)) {        return defaultValue;    }    try {        return Long.decode(params.get(name)).longValue();    } catch (NumberFormatException e) {                return defaultValue;    }}
1
public JMeterContext getJMeterContext()
{    return JMeterContextService.getContext();}
0
public final JMeterVariables getJMeterVariables()
{    return JMeterContextService.getContext().getVariables();}
0
public final Properties getJMeterProperties()
{    return JMeterUtils.getJMeterProperties();}
0
public SampleResult sample(Entry entry)
{    SampleResult result = new SampleResult();    result.setSampleLabel(getName());    result.setSuccessful(true);    result.setResponseCodeOK();    result.setResponseMessageOK();    final String filename = getFilename();    if (filename.length() > 0) {        result.setSamplerData("File: " + filename);    } else {        result.setSamplerData(getScript());    }    result.setDataType(SampleResult.TEXT);    result.sampleStart();    try {        ScriptEngine scriptEngine = getScriptEngine();        Bindings bindings = scriptEngine.createBindings();        bindings.put("SampleResult", result);        Object ret = processFileOrScript(scriptEngine, bindings);        if (ret != null && (result.getResponseData() == null || result.getResponseData().length == 0)) {            result.setResponseData(ret.toString(), null);        }    } catch (IOException | ScriptException e) {                result.setSuccessful(false);                result.setResponseCode("500");        result.setResponseMessage(e.toString());    }    result.sampleEnd();    return result;}
1
public boolean applies(ConfigTestElement configElement)
{    String guiClass = configElement.getProperty(TestElement.GUI_CLASS).getStringValue();    return APPLIABLE_CONFIG_CLASSES.contains(guiClass);}
0
public Object clone()
{    return super.clone();}
0
private void setupValues(JavaSamplerContext context)
{    sleepTime = context.getLongParameter(SLEEP_NAME, DEFAULT_SLEEP_TIME);    sleepMask = context.getLongParameter(MASK_NAME, DEFAULT_SLEEP_MASK);    responseMessage = context.getParameter(RESPONSE_MESSAGE_NAME, RESPONSE_MESSAGE_DEFAULT);    responseCode = context.getParameter(RESPONSE_CODE_NAME, RESPONSE_CODE_DEFAULT);    success = "OK".equalsIgnoreCase(context.getParameter(SUCCESS_NAME, SUCCESS_DEFAULT));    label = context.getParameter(LABEL_NAME, "");    if (label.length() == 0) {                label = context.getParameter(TestElement.NAME);    }    samplerData = context.getParameter(SAMPLER_DATA_NAME, SAMPLER_DATA_DEFAULT);    resultData = context.getParameter(RESULT_DATA_NAME, RESULT_DATA_DEFAULT);}
0
public void setupTest(JavaSamplerContext context)
{    if (LOG.isDebugEnabled()) {                listParameters(context);    }}
1
public Arguments getDefaultParameters()
{    Arguments params = new Arguments();    params.addArgument(SLEEP_NAME, String.valueOf(DEFAULT_SLEEP_TIME));    params.addArgument(MASK_NAME, DEFAULT_MASK_STRING);    params.addArgument(LABEL_NAME, "");    params.addArgument(RESPONSE_CODE_NAME, RESPONSE_CODE_DEFAULT);    params.addArgument(RESPONSE_MESSAGE_NAME, RESPONSE_MESSAGE_DEFAULT);    params.addArgument(SUCCESS_NAME, SUCCESS_DEFAULT);    params.addArgument(SAMPLER_DATA_NAME, SAMPLER_DATA_DEFAULT);    params.addArgument(RESULT_DATA_NAME, SAMPLER_DATA_DEFAULT);    return params;}
0
public SampleResult runTest(JavaSamplerContext context)
{    setupValues(context);    SampleResult results = new SampleResult();    results.setResponseCode(responseCode);    results.setResponseMessage(responseMessage);    results.setSampleLabel(label);    if (samplerData != null && samplerData.length() > 0) {        results.setSamplerData(samplerData);    }    if (samplerData != null) {        results.setSentBytes(samplerData.length());    }    if (resultData != null && resultData.length() > 0) {        results.setResponseData(resultData, null);    }        results.setDataType(SampleResult.TEXT);        results.sampleStart();    long sleep = sleepTime;    if (sleepTime > 0 && sleepMask > 0) {                        long start = System.currentTimeMillis();                sleep = sleepTime + (start % sleepMask);    }    try {                if (sleep > 0) {            myThread = Thread.currentThread();            TimeUnit.MILLISECONDS.sleep(sleep);            myThread = null;        }        results.setSuccessful(success);    } catch (InterruptedException e) {        Thread.currentThread().interrupt();                results.setSuccessful(false);    } catch (Exception e) {                results.setSuccessful(false);    } finally {                results.sampleEnd();    }    if (LOG.isDebugEnabled()) {                listParameters(context);    }    return results;}
1
private void listParameters(JavaSamplerContext context)
{    Iterator<String> argsIt = context.getParameterNamesIterator();    while (argsIt.hasNext()) {        String name = argsIt.next();            }}
1
private String whoAmI()
{    return Thread.currentThread().toString() + "@" + Integer.toHexString(hashCode());}
0
public boolean interrupt()
{    Thread t = myThread;    if (t != null) {        t.interrupt();    }    return t != null;}
0
public void setupTest(JavaSamplerContext context)
{    if (LOG.isDebugEnabled()) {                listParameters(context);    }    sleepTime = context.getLongParameter("SleepTime", DEFAULT_SLEEP_TIME);    sleepMask = context.getLongParameter("SleepMask", DEFAULT_SLEEP_MASK);    name = context.getParameter(TestElement.NAME);}
1
public SampleResult runTest(JavaSamplerContext context)
{    SampleResult results = new SampleResult();    results.setSampleLabel(name);    long sleep = sleepTime;        if (sleepTime > 0 && sleepMask > 0) {        long start = System.currentTimeMillis();                sleep = sleepTime + (start % sleepMask);    }    results.setSamplerData("Sleep Test: time = " + sleep);    try {                results.sampleStart();        myThread = Thread.currentThread();                        TimeUnit.MILLISECONDS.sleep(sleep);        myThread = null;        results.setSuccessful(true);    } catch (InterruptedException e) {                results.setSuccessful(false);        results.setResponseMessage(e.toString());        Thread.currentThread().interrupt();    } catch (Exception e) {                results.setSuccessful(false);        results.setResponseMessage(e.toString());    } finally {        results.sampleEnd();    }    if (LOG.isDebugEnabled()) {                listParameters(context);    }    return results;}
1
public Arguments getDefaultParameters()
{    Arguments params = new Arguments();    params.addArgument("SleepTime", String.valueOf(DEFAULT_SLEEP_TIME));    params.addArgument("SleepMask", "0x" + (Long.toHexString(DEFAULT_SLEEP_MASK)).toUpperCase(java.util.Locale.ENGLISH));    return params;}
0
private void listParameters(JavaSamplerContext context)
{    Iterator<String> argsIt = context.getParameterNamesIterator();    while (argsIt.hasNext()) {        String lName = argsIt.next();            }}
1
private String whoAmI()
{    return Thread.currentThread().toString() + "@" + Integer.toHexString(hashCode());}
0
public boolean interrupt()
{    Thread t = myThread;    if (t != null) {        t.interrupt();    }    return t != null;}
0
protected byte[] execute(Connection conn) throws SQLException, IOException, UnsupportedOperationException
{        return execute(conn, new SampleResult());}
0
protected byte[] execute(Connection conn, SampleResult sample) throws SQLException, IOException, UnsupportedOperationException
{            String currentQueryType = getQueryType();    if (SELECT.equals(currentQueryType)) {        try (Statement stmt = conn.createStatement()) {            setQueryTimeout(stmt, getIntegerQueryTimeout());            ResultSet rs = null;            try {                rs = stmt.executeQuery(getQuery());                sample.latencyEnd();                return getStringFromResultSet(rs).getBytes(ENCODING);            } finally {                close(rs);            }        }    } else if (CALLABLE.equals(currentQueryType)) {        try (CallableStatement cstmt = getCallableStatement(conn)) {            int[] out = setArguments(cstmt);                                    boolean hasResultSet = cstmt.execute();            sample.latencyEnd();            String sb = resultSetsToString(cstmt, hasResultSet, out);            return sb.getBytes(ENCODING);        }    } else if (UPDATE.equals(currentQueryType)) {        try (Statement stmt = conn.createStatement()) {            setQueryTimeout(stmt, getIntegerQueryTimeout());            stmt.executeUpdate(getQuery());            sample.latencyEnd();            int updateCount = stmt.getUpdateCount();            String results = updateCount + " updates";            return results.getBytes(ENCODING);        }    } else if (PREPARED_SELECT.equals(currentQueryType)) {        try (PreparedStatement pstmt = getPreparedStatement(conn)) {            setArguments(pstmt);            ResultSet rs = null;            try {                rs = pstmt.executeQuery();                sample.latencyEnd();                return getStringFromResultSet(rs).getBytes(ENCODING);            } finally {                close(rs);            }        }    } else if (PREPARED_UPDATE.equals(currentQueryType)) {        try (PreparedStatement pstmt = getPreparedStatement(conn)) {            setArguments(pstmt);            pstmt.executeUpdate();            sample.latencyEnd();            String sb = resultSetsToString(pstmt, false, null);            return sb.getBytes(ENCODING);        }    } else if (ROLLBACK.equals(currentQueryType)) {        conn.rollback();        sample.latencyEnd();        return ROLLBACK.getBytes(ENCODING);    } else if (COMMIT.equals(currentQueryType)) {        conn.commit();        sample.latencyEnd();        return COMMIT.getBytes(ENCODING);    } else if (AUTOCOMMIT_FALSE.equals(currentQueryType)) {        conn.setAutoCommit(false);        sample.latencyEnd();        return AUTOCOMMIT_FALSE.getBytes(ENCODING);    } else if (AUTOCOMMIT_TRUE.equals(currentQueryType)) {        conn.setAutoCommit(true);        sample.latencyEnd();        return AUTOCOMMIT_TRUE.getBytes(ENCODING);    } else {                throw new UnsupportedOperationException("Unexpected query type: " + currentQueryType);    }}
1
private String resultSetsToString(PreparedStatement pstmt, boolean result, int[] out) throws SQLException, UnsupportedEncodingException
{    StringBuilder sb = new StringBuilder();    int updateCount = 0;    boolean currentResult = result;    if (!currentResult) {        updateCount = pstmt.getUpdateCount();    }    do {        if (currentResult) {            ResultSet rs = null;            try {                rs = pstmt.getResultSet();                                sb.append(getStringFromResultSet(rs)).append("\n");            } finally {                close(rs);            }        } else {            sb.append(updateCount).append(" updates.\n");        }        currentResult = pstmt.getMoreResults();        if (!currentResult) {            updateCount = pstmt.getUpdateCount();        }    } while (currentResult || (updateCount != -1));    if (out != null && pstmt instanceof CallableStatement) {        List<Object> outputValues = new ArrayList<>();        CallableStatement cs = (CallableStatement) pstmt;        sb.append("Output variables by position:\n");        for (int i = 0; i < out.length; i++) {            if (out[i] != java.sql.Types.NULL) {                Object o = cs.getObject(i + 1);                outputValues.add(o);                sb.append("[");                sb.append(i + 1);                sb.append("] ");                sb.append(o);                if (o instanceof java.sql.ResultSet && RS_COUNT_RECORDS.equals(resultSetHandler)) {                    sb.append(" ").append(countRows((ResultSet) o)).append(" rows");                }                sb.append("\n");            }        }        String[] varnames = getVariableNames().split(COMMA);        if (varnames.length > 0) {            JMeterVariables jmvars = getThreadContext().getVariables();            for (int i = 0; i < varnames.length && i < outputValues.size(); i++) {                String name = varnames[i].trim();                if (name.length() > 0) {                                        Object o = outputValues.get(i);                    if (o instanceof java.sql.ResultSet) {                        putIntoVar(jmvars, name, (java.sql.ResultSet) o);                    } else if (o instanceof java.sql.Clob) {                        putIntoVar(jmvars, name, (java.sql.Clob) o);                    } else if (o instanceof java.sql.Blob) {                        putIntoVar(jmvars, name, (java.sql.Blob) o);                    } else {                        jmvars.put(name, o == null ? null : o.toString());                    }                }            }        }    }    return sb.toString();}
0
private void putIntoVar(final JMeterVariables jmvars, final String name, final ResultSet resultSet) throws SQLException
{    if (RS_STORE_AS_OBJECT.equals(resultSetHandler)) {        jmvars.putObject(name, resultSet);    } else if (RS_COUNT_RECORDS.equals(resultSetHandler)) {        jmvars.put(name, resultSet.toString() + " " + countRows(resultSet) + " rows");    } else {        jmvars.put(name, resultSet.toString());    }}
0
private void putIntoVar(final JMeterVariables jmvars, final String name, final Clob clob) throws SQLException
{    try {        if (clob.length() > MAX_RETAIN_SIZE) {            try (Reader reader = clob.getCharacterStream(0, MAX_RETAIN_SIZE)) {                jmvars.put(name, IOUtils.toString(reader) + "<result cut off, it is too big>");            }        } else {            try (Reader reader = clob.getCharacterStream()) {                jmvars.put(name, IOUtils.toString(reader));            }        }    } catch (IOException e) {            }}
1
private void putIntoVar(final JMeterVariables jmvars, final String name, final Blob blob) throws SQLException
{    if (RS_STORE_AS_OBJECT.equals(resultSetHandler)) {        try {            long length = Math.max(blob.length(), MAX_RETAIN_SIZE);            jmvars.putObject(name, IOUtils.toByteArray(blob.getBinaryStream(0, length)));        } catch (IOException e) {                    }    } else if (RS_COUNT_RECORDS.equals(resultSetHandler)) {        jmvars.put(name, blob.length() + " bytes");    } else {        try {            long length = Math.max(blob.length(), MAX_RETAIN_SIZE);            try (InputStream is = blob.getBinaryStream(0, length)) {                jmvars.put(name, IOUtils.toString(is, ENCODING));            }        } catch (IOException e) {                    }    }}
1
private int countRows(ResultSet resultSet) throws SQLException
{    int resultSetMaxRows = getIntegerResultSetMaxRows();    if (resultSetMaxRows >= 0) {        resultSet.absolute(resultSetMaxRows);        if (!resultSet.isAfterLast()) {            return resultSet.getRow();        }    }    return resultSet.last() ? resultSet.getRow() : 0;}
0
private int[] setArguments(PreparedStatement pstmt) throws SQLException, IOException
{    if (getQueryArguments().trim().length() == 0) {        return new int[] {};    }    String[] arguments = CSVSaveService.csvSplitString(getQueryArguments(), COMMA_CHAR);    String[] argumentsTypes = getQueryArgumentsTypes().split(COMMA);    if (arguments.length != argumentsTypes.length) {        throw new SQLException("number of arguments (" + arguments.length + ") and number of types (" + argumentsTypes.length + ") are not equal");    }    int[] outputs = new int[arguments.length];    for (int i = 0; i < arguments.length; i++) {        String argument = arguments[i];        String argumentType = argumentsTypes[i];        String[] arg = argumentType.split(" ");        String inputOutput = "";        if (arg.length > 1) {            argumentType = arg[1];            inputOutput = arg[0];        }        int targetSqlType = getJdbcType(argumentType);        try {            if (!OUT.equalsIgnoreCase(inputOutput)) {                if (argument.equals(NULL_MARKER)) {                    pstmt.setNull(i + 1, targetSqlType);                } else {                    setArgument(pstmt, argument, targetSqlType, i + 1);                }            }            if (OUT.equalsIgnoreCase(inputOutput) || INOUT.equalsIgnoreCase(inputOutput)) {                CallableStatement cs = (CallableStatement) pstmt;                cs.registerOutParameter(i + 1, targetSqlType);                outputs[i] = targetSqlType;            } else {                                outputs[i] = java.sql.Types.NULL;            }        } catch (NullPointerException e) {                        throw new SQLException("Could not set argument no: " + (i + 1) + " - missing parameter marker?", e);        }    }    return outputs;}
0
private void setArgument(PreparedStatement pstmt, String argument, int targetSqlType, int index) throws SQLException
{    switch(targetSqlType) {        case Types.INTEGER:            pstmt.setInt(index, Integer.parseInt(argument));            break;        case Types.DECIMAL:        case Types.NUMERIC:            pstmt.setBigDecimal(index, new BigDecimal(argument));            break;        case Types.DOUBLE:        case Types.FLOAT:            pstmt.setDouble(index, Double.parseDouble(argument));            break;        case Types.CHAR:        case Types.LONGVARCHAR:        case Types.VARCHAR:            pstmt.setString(index, argument);            break;        case Types.BIT:        case Types.BOOLEAN:            pstmt.setBoolean(index, Boolean.parseBoolean(argument));            break;        case Types.BIGINT:            pstmt.setLong(index, Long.parseLong(argument));            break;        case Types.DATE:            pstmt.setDate(index, Date.valueOf(argument));            break;        case Types.REAL:            pstmt.setFloat(index, Float.parseFloat(argument));            break;        case Types.TINYINT:            pstmt.setByte(index, Byte.parseByte(argument));            break;        case Types.SMALLINT:            pstmt.setShort(index, Short.parseShort(argument));            break;        case Types.TIMESTAMP:            pstmt.setTimestamp(index, Timestamp.valueOf(argument));            break;        case Types.TIME:            pstmt.setTime(index, Time.valueOf(argument));            break;        case Types.BINARY:        case Types.VARBINARY:        case Types.LONGVARBINARY:            pstmt.setBytes(index, argument.getBytes());            break;        case Types.NULL:            pstmt.setNull(index, targetSqlType);            break;        default:            pstmt.setObject(index, argument, targetSqlType);    }}
0
private static int getJdbcType(String jdbcType) throws SQLException
{    Integer entry = mapJdbcNameToInt.get(jdbcType.toLowerCase(java.util.Locale.ENGLISH));    if (entry == null) {        try {            entry = Integer.decode(jdbcType);        } catch (NumberFormatException e) {            throw new SQLException("Invalid data type: " + jdbcType, e);        }    }    return entry.intValue();}
0
private CallableStatement getCallableStatement(Connection conn) throws SQLException
{    return (CallableStatement) getPreparedStatement(conn, true);}
0
private PreparedStatement getPreparedStatement(Connection conn) throws SQLException
{    return getPreparedStatement(conn, false);}
0
private PreparedStatement getPreparedStatement(Connection conn, boolean callable) throws SQLException
{    PreparedStatement pstmt;    if (callable) {                pstmt = conn.prepareCall(getQuery());    } else {                pstmt = conn.prepareStatement(getQuery());    }    setQueryTimeout(pstmt, getIntegerQueryTimeout());    return pstmt;}
0
private static void setQueryTimeout(Statement stmt, int timeout) throws SQLException
{    if (timeout >= 0) {        stmt.setQueryTimeout(timeout);    }}
0
private String getStringFromResultSet(ResultSet rs) throws SQLException, UnsupportedEncodingException
{    ResultSetMetaData meta = rs.getMetaData();    StringBuilder sb = new StringBuilder();    int numColumns = meta.getColumnCount();    for (int i = 1; i <= numColumns; i++) {        sb.append(meta.getColumnLabel(i));        if (i == numColumns) {            sb.append('\n');        } else {            sb.append('\t');        }    }    JMeterVariables jmvars = getThreadContext().getVariables();    String[] varNames = getVariableNames().split(COMMA);    String currentResultVariable = getResultVariable().trim();    List<Map<String, Object>> results = null;    if (!currentResultVariable.isEmpty()) {        results = new ArrayList<>();        jmvars.putObject(currentResultVariable, results);    }    int currentIterationIndex = 0;    int resultSetMaxRows = getIntegerResultSetMaxRows();    if (resultSetMaxRows < 0) {        while (rs.next()) {            currentIterationIndex = processRow(rs, meta, sb, numColumns, jmvars, varNames, results, currentIterationIndex);        }    } else {        while (currentIterationIndex < resultSetMaxRows && rs.next()) {            currentIterationIndex = processRow(rs, meta, sb, numColumns, jmvars, varNames, results, currentIterationIndex);        }    }        for (String varName : varNames) {        String name = varName.trim();        if (name.length() > 0 && jmvars != null) {                        final String varCount = name + "_#";                        String prevCount = jmvars.get(varCount);            if (prevCount != null) {                int prev = Integer.parseInt(prevCount);                for (int n = currentIterationIndex + 1; n <= prev; n++) {                    jmvars.remove(name + UNDERSCORE + n);                }            }                        jmvars.put(varCount, Integer.toString(currentIterationIndex));        }    }    return sb.toString();}
0
private int processRow(ResultSet rs, ResultSetMetaData meta, StringBuilder sb, int numColumns, JMeterVariables jmvars, String[] varNames, List<Map<String, Object>> results, int currentIterationIndex) throws SQLException, UnsupportedEncodingException
{    Map<String, Object> row = null;    currentIterationIndex++;    for (int i = 1; i <= numColumns; i++) {        Object o = rs.getObject(i);        if (results != null) {            if (row == null) {                row = new HashMap<>(numColumns);                results.add(row);            }            row.put(meta.getColumnLabel(i), o);        }        if (o instanceof byte[]) {            o = new String((byte[]) o, ENCODING);        }        sb.append(o);        if (i == numColumns) {            sb.append('\n');        } else {            sb.append('\t');        }        if (i <= varNames.length) {                        String name = varNames[i - 1].trim();            if (name.length() > 0) {                                jmvars.put(name + UNDERSCORE + currentIterationIndex, o == null ? null : o.toString());            }        }    }    return currentIterationIndex;}
0
public static void close(Connection c)
{    try {        if (c != null) {            c.close();        }    } catch (SQLException e) {            }}
1
public static void close(Statement s)
{    try {        if (s != null) {            s.close();        }    } catch (SQLException e) {            }}
1
public static void close(ResultSet rs)
{    try {        if (rs != null) {            rs.close();        }    } catch (SQLException e) {            }}
1
public int getIntegerQueryTimeout()
{    int timeout;    if (StringUtils.isEmpty(queryTimeout)) {        return 0;    } else {        try {            timeout = Integer.parseInt(queryTimeout);        } catch (NumberFormatException nfe) {            timeout = 0;        }    }    return timeout;}
0
public String getQueryTimeout()
{    return queryTimeout;}
0
public void setQueryTimeout(String queryTimeout)
{    this.queryTimeout = queryTimeout;}
0
public int getIntegerResultSetMaxRows()
{    int maxrows;    if (StringUtils.isEmpty(resultSetMaxRows)) {        return -1;    } else {        try {            maxrows = Integer.parseInt(resultSetMaxRows);        } catch (NumberFormatException nfe) {            maxrows = -1;        }    }    return maxrows;}
0
public String getResultSetMaxRows()
{    return resultSetMaxRows;}
0
public void setResultSetMaxRows(String resultSetMaxRows)
{    this.resultSetMaxRows = resultSetMaxRows;}
0
public String getQuery()
{    return query;}
0
public String toString()
{    StringBuilder sb = new StringBuilder(80);        sb.append("[");    sb.append(getQueryType());        sb.append("] ");    sb.append(getQuery());    sb.append("\n");    sb.append(getQueryArguments());    sb.append("\n");    sb.append(getQueryArgumentsTypes());    return sb.toString();}
0
public void setQuery(String query)
{    this.query = query;}
0
public String getDataSource()
{    return dataSource;}
0
public void setDataSource(String dataSource)
{    this.dataSource = dataSource;}
0
public String getQueryType()
{    return queryType;}
0
public void setQueryType(String queryType)
{    this.queryType = queryType;}
0
public String getQueryArguments()
{    return queryArguments;}
0
public void setQueryArguments(String queryArguments)
{    this.queryArguments = queryArguments;}
0
public String getQueryArgumentsTypes()
{    return queryArgumentsTypes;}
0
public void setQueryArgumentsTypes(String queryArgumentsType)
{    this.queryArgumentsTypes = queryArgumentsType;}
0
public String getVariableNames()
{    return variableNames;}
0
public void setVariableNames(String variableNames)
{    this.variableNames = variableNames;}
0
public String getResultSetHandler()
{    return resultSetHandler;}
0
public void setResultSetHandler(String resultSetHandler)
{    this.resultSetHandler = resultSetHandler;}
0
public String getResultVariable()
{    return resultVariable;}
0
public void setResultVariable(String resultVariable)
{    this.resultVariable = resultVariable;}
0
public void testStarted()
{    testStarted("");}
0
public void testStarted(String host)
{}
0
public void testEnded()
{    testEnded("");}
0
public void testEnded(String host)
{}
0
public void testEnded()
{    synchronized (this) {        if (dbcpDataSource != null) {            try {                dbcpDataSource.close();            } catch (SQLException ex) {                            }        }        dbcpDataSource = null;    }    if (perThreadPoolSet != null) {                for (BasicDataSource dsc : perThreadPoolSet) {                        try {                dsc.close();            } catch (SQLException ex) {                            }        }        perThreadPoolSet = null;    }}
1
public void testEnded(String host)
{    testEnded();}
0
public void testStarted()
{    this.setRunningVersion(true);    TestBeanHelper.prepare(this);    JMeterVariables variables = getThreadContext().getVariables();    String poolName = getDataSource();    if (JOrphanUtils.isBlank(poolName)) {        throw new IllegalArgumentException("Variable Name must not be empty for element:" + getName());    } else if (variables.getObject(poolName) != null) {            } else {        String maxPool = getPoolMax();        perThreadPoolSet = Collections.synchronizedSet(new HashSet<BasicDataSource>());        if (maxPool.equals("0")) {                                    variables.putObject(poolName, new DataSourceComponentImpl());        } else {            BasicDataSource src = initPool(maxPool);            synchronized (this) {                dbcpDataSource = src;                variables.putObject(poolName, new DataSourceComponentImpl(dbcpDataSource));            }        }    }}
1
public void testStarted(String host)
{    testStarted();}
0
public Object clone()
{    DataSourceElement el = (DataSourceElement) super.clone();    synchronized (this) {        el.dbcpDataSource = dbcpDataSource;        el.perThreadPoolSet = perThreadPoolSet;    }    return el;}
0
public static String getConnectionInfo(String poolName) throws SQLException
{    Object poolObject = JMeterContextService.getContext().getVariables().getObject(poolName);    if (poolObject instanceof DataSourceComponentImpl) {        DataSourceComponentImpl pool = (DataSourceComponentImpl) poolObject;        return pool.getConnectionInfo();    } else {        return "Object:" + poolName + " is not of expected type '" + DataSourceComponentImpl.class.getName() + "'";    }}
0
public static Connection getConnection(String poolName) throws SQLException
{    Object poolObject = JMeterContextService.getContext().getVariables().getObject(poolName);    if (poolObject == null) {        throw new SQLException("No pool found named: '" + poolName + "', ensure Variable Name matches Variable Name of JDBC Connection Configuration");    } else {        if (poolObject instanceof DataSourceComponentImpl) {            DataSourceComponentImpl pool = (DataSourceComponentImpl) poolObject;            return pool.getConnection();        } else {            String errorMsg = "Found object stored under variable:'" + poolName + "' with class:" + poolObject.getClass().getName() + " and value: '" + poolObject + " but it's not a DataSourceComponent, check you're not already using this name as another variable";                        throw new SQLException(errorMsg);        }    }}
1
private BasicDataSource initPool(String maxPool)
{    BasicDataSource dataSource = new BasicDataSource();    if (log.isDebugEnabled()) {        StringBuilder sb = new StringBuilder(40);        sb.append("MaxPool: ");        sb.append(maxPool);        sb.append(" Timeout: ");        sb.append(getTimeout());        sb.append(" TrimInt: ");        sb.append(getTrimInterval());        sb.append(" Auto-Commit: ");        sb.append(isAutocommit());        sb.append(" Preinit: ");        sb.append(isPreinit());            }    int poolSize = Integer.parseInt(maxPool);    dataSource.setMinIdle(0);    dataSource.setInitialSize(poolSize);    dataSource.setEnableAutoCommitOnReturn(false);    if (StringUtils.isNotEmpty(initQuery)) {        String[] sqls = initQuery.split("\n");        dataSource.setConnectionInitSqls(Arrays.asList(sqls));    } else {        dataSource.setConnectionInitSqls(Collections.emptyList());    }    dataSource.setRollbackOnReturn(false);    dataSource.setMaxIdle(poolSize);    dataSource.setMaxTotal(poolSize);    dataSource.setMaxWaitMillis(Long.parseLong(getTimeout()));    dataSource.setDefaultAutoCommit(Boolean.valueOf(isAutocommit()));    if (log.isDebugEnabled()) {        StringBuilder sb = new StringBuilder(40);        sb.append("KeepAlive: ");        sb.append(isKeepAlive());        sb.append(" Age: ");        sb.append(getConnectionAge());        sb.append(" CheckQuery: ");        sb.append(getCheckQuery());            }    dataSource.setTestOnBorrow(false);    dataSource.setTestOnReturn(false);    dataSource.setTestOnCreate(false);    dataSource.setTestWhileIdle(false);    if (isKeepAlive()) {        dataSource.setTestWhileIdle(true);        String validationQuery = getCheckQuery();        if (StringUtils.isBlank(validationQuery)) {            dataSource.setValidationQuery(null);        } else {            dataSource.setValidationQuery(validationQuery);        }        dataSource.setSoftMinEvictableIdleTimeMillis(Long.parseLong(getConnectionAge()));        dataSource.setTimeBetweenEvictionRunsMillis(Integer.parseInt(getTrimInterval()));    }    int transactionIsolation = DataSourceElementBeanInfo.getTransactionIsolationMode(getTransactionIsolation());    if (transactionIsolation >= 0) {        dataSource.setDefaultTransactionIsolation(transactionIsolation);    }    String _username = getUsername();    if (log.isDebugEnabled()) {        StringBuilder sb = new StringBuilder(40);        sb.append("Driver: ");        sb.append(getDriver());        sb.append(" DbUrl: ");        sb.append(getDbUrl());        sb.append(" User: ");        sb.append(_username);            }    dataSource.setDriverClassName(getDriver());    dataSource.setUrl(getDbUrl());    if (_username.length() > 0) {        dataSource.setUsername(_username);        dataSource.setPassword(getPassword());    }    if (isPreinit()) {                try {            dataSource.getConnection().close();            if (log.isDebugEnabled()) {                            }        } catch (SQLException ex) {            if (log.isErrorEnabled()) {                            }        }    }        return dataSource;}
1
public String getConnectionInfo()
{    BasicDataSource dsc = getConfiguredDataSource();    StringBuilder builder = new StringBuilder(100);    builder.append("shared:").append(sharedDSC != null).append(", driver:").append(dsc.getDriverClassName()).append(", url:").append(dsc.getUrl()).append(", user:").append(dsc.getUsername());    return builder.toString();}
0
public Connection getConnection() throws SQLException
{    BasicDataSource dsc = getConfiguredDataSource();    Connection conn = dsc.getConnection();    int isolation = DataSourceElementBeanInfo.getTransactionIsolationMode(getTransactionIsolation());    if (isolation >= 0 && conn.getTransactionIsolation() != isolation) {        try {                        conn.setTransactionIsolation(isolation);                    } catch (SQLException ex) {                    }    }    return conn;}
1
private BasicDataSource getConfiguredDataSource()
{    BasicDataSource dsc;    if (sharedDSC != null) {                dsc = sharedDSC;    } else {        Map<String, BasicDataSource> poolMap = perThreadPoolMap.get();        dsc = poolMap.get(getDataSourceName());        if (dsc == null) {            dsc = initPool("1");            poolMap.put(getDataSourceName(), dsc);                        perThreadPoolSet.add(dsc);        }    }    return dsc;}
1
public void addConfigElement(ConfigElement config)
{}
0
public boolean expectsModification()
{    return false;}
0
public String getCheckQuery()
{    return checkQuery;}
0
public void setCheckQuery(String checkQuery)
{    this.checkQuery = checkQuery;}
0
public String getConnectionAge()
{    return connectionAge;}
0
public void setConnectionAge(String connectionAge)
{    this.connectionAge = connectionAge;}
0
public String getDataSource()
{    return dataSource;}
0
public void setDataSource(String dataSource)
{    this.dataSource = dataSource;}
0
private String getDataSourceName()
{    return getDataSource();}
0
public String getDbUrl()
{    return dbUrl;}
0
public void setDbUrl(String dbUrl)
{    this.dbUrl = dbUrl;}
0
public String getDriver()
{    return driver;}
0
public void setDriver(String driver)
{    this.driver = driver;}
0
public String getPassword()
{    return password;}
0
public void setPassword(String password)
{    this.password = password;}
0
public String getPoolMax()
{    return poolMax;}
0
public void setPoolMax(String poolMax)
{    this.poolMax = poolMax;}
0
public String getTimeout()
{    return timeout;}
0
public void setTimeout(String timeout)
{    this.timeout = timeout;}
0
public String getTrimInterval()
{    return trimInterval;}
0
public void setTrimInterval(String trimInterval)
{    this.trimInterval = trimInterval;}
0
public String getUsername()
{    return username;}
0
public void setUsername(String username)
{    this.username = username;}
0
public boolean isAutocommit()
{    return autocommit;}
0
public void setAutocommit(boolean autocommit)
{    this.autocommit = autocommit;}
0
public boolean isPreinit()
{    return preinit;}
0
public void setPreinit(boolean preinit)
{    this.preinit = preinit;}
0
public boolean isKeepAlive()
{    return keepAlive;}
0
public void setKeepAlive(boolean keepAlive)
{    this.keepAlive = keepAlive;}
0
public String getTransactionIsolation()
{    return transactionIsolation;}
0
public void setTransactionIsolation(String transactionIsolation)
{    this.transactionIsolation = transactionIsolation;}
0
public String getInitQuery()
{    return initQuery;}
0
public void setInitQuery(String initQuery)
{    this.initQuery = initQuery;}
0
public static int getTransactionIsolationMode(String tag)
{    if (!StringUtils.isEmpty(tag)) {        Integer isolationMode = TRANSACTION_ISOLATION_MAP.get(tag);        if (isolationMode == null) {            try {                return Integer.parseInt(tag);            } catch (NumberFormatException e) {                            }        } else {            return isolationMode.intValue();        }    }    return -1;}
1
private String[] getListJDBCDriverClass()
{        return JOrphanUtils.split(JMeterUtils.getPropDefault("jdbc.config.jdbc.driver.class", ""), "|");}
0
private String[] getListCheckQuery()
{        return JOrphanUtils.split(JMeterUtils.getPropDefault("jdbc.config.check.query", ""), "|");}
0
protected void process()
{    if (JOrphanUtils.isBlank(getDataSource())) {        throw new IllegalArgumentException("Variable Name must not be null in " + getName());    }    try (Connection conn = DataSourceElement.getConnection(getDataSource())) {        execute(conn);    } catch (SQLException ex) {            } catch (IOException ex) {            } catch (UnsupportedOperationException ex) {            }}
1
public void process()
{    super.process();}
0
public void process()
{    super.process();}
0
public SampleResult sample(Entry e)
{    SampleResult res = new SampleResult();    res.setSampleLabel(getName());    res.setSamplerData(toString());    res.setDataType(SampleResult.TEXT);        res.setContentType("text/plain");    res.setDataEncoding(ENCODING);        res.setSuccessful(true);    res.setResponseMessageOK();    res.setResponseCodeOK();    res.sampleStart();    Connection conn = null;    try {        if (JOrphanUtils.isBlank(getDataSource())) {            throw new IllegalArgumentException("Variable Name must not be null in " + getName());        }        try {            conn = DataSourceElement.getConnection(getDataSource());        } finally {            res.connectEnd();        }        res.setResponseHeaders(DataSourceElement.getConnectionInfo(getDataSource()));        res.setResponseData(execute(conn, res));    } catch (SQLException ex) {        final String errCode = Integer.toString(ex.getErrorCode());        res.setResponseMessage(ex.toString());        res.setResponseCode(ex.getSQLState() + " " + errCode);        res.setResponseData(ex.getMessage().getBytes());        res.setSuccessful(false);    } catch (Exception ex) {        res.setResponseMessage(ex.toString());        res.setResponseCode("000");        res.setResponseData(ObjectUtils.defaultIfNull(ex.getMessage(), "NO MESSAGE").getBytes());        res.setSuccessful(false);    } finally {        close(conn);    }        res.sampleEnd();    return res;}
0
public boolean applies(ConfigTestElement configElement)
{    String guiClass = configElement.getProperty(TestElement.GUI_CLASS).getStringValue();    return APPLIABLE_CONFIG_CLASSES.contains(guiClass);}
0
public static void addClient(Closeable client)
{    CLIENTS.add(client);}
0
public static void removeClient(Publisher publisher)
{    CLIENTS.remove(publisher);}
0
public static void clearClient()
{    synchronized (CLIENTS) {        CLIENTS.forEach(JOrphanUtils::closeQuietly);                        CLIENTS.clear();    }}
0
public static Context lookupContext(String initialContextFactory, String providerUrl, boolean useAuth, String securityPrincipal, String securityCredentials) throws NamingException
{    String cacheKey = createKey(Thread.currentThread().getId(), initialContextFactory, providerUrl, securityPrincipal, securityCredentials);    Context ctx = MAP.get(cacheKey);    if (ctx == null) {        Properties props = new Properties();        props.setProperty(Context.INITIAL_CONTEXT_FACTORY, initialContextFactory);        props.setProperty(Context.PROVIDER_URL, providerUrl);        if (useAuth && securityPrincipal != null && securityCredentials != null && securityPrincipal.length() > 0 && securityCredentials.length() > 0) {            props.setProperty(Context.SECURITY_PRINCIPAL, securityPrincipal);            props.setProperty(Context.SECURITY_CREDENTIALS, securityCredentials);                    }        try {            ctx = new InitialContext(props);        } catch (NoClassDefFoundError | Exception e) {            throw new NamingException(e.toString());        }                        Context oldCtx = MAP.putIfAbsent(cacheKey, ctx);        if (oldCtx != null) {                        try {                ctx.close();            } catch (Exception e) {                        }            ctx = oldCtx;        }        }    return ctx;}
1
private static String createKey(long threadId, String initialContextFactory, String providerUrl, String securityPrincipal, String securityCredentials)
{    StringBuilder builder = new StringBuilder();    builder.append(threadId);    builder.append("#");    builder.append(initialContextFactory);    builder.append("#");    builder.append(providerUrl);    builder.append("#");    if (!StringUtils.isEmpty(securityPrincipal)) {        builder.append(securityPrincipal);        builder.append("#");    }    if (!StringUtils.isEmpty(securityCredentials)) {        builder.append(securityCredentials);    }    return builder.toString();}
0
public static Context getContext(boolean useProps, String initialContextFactory, String providerUrl, boolean useAuth, String securityPrincipal, String securityCredentials) throws NamingException
{    if (useProps) {        try {            return new InitialContext();        } catch (NoClassDefFoundError | Exception e) {            throw new NamingException(e.toString());        }    } else {        return lookupContext(initialContextFactory, providerUrl, useAuth, securityPrincipal, securityCredentials);    }}
0
public static void close()
{    for (Context ctx : MAP.values()) {        try {            ctx.close();        } catch (NamingException e) {                    }    }    MAP.clear();    }
1
public Message publish(String text, String destinationName, Map<String, Object> properties, int deliveryMode, int priority, long expiration) throws JMSException, NamingException
{    TextMessage msg = session.createTextMessage(text);    return setPropertiesAndSend(destinationName, properties, msg, deliveryMode, priority, expiration);}
0
public Message publish(Serializable contents, String destinationName, Map<String, Object> properties, int deliveryMode, int priority, long expiration) throws JMSException, NamingException
{    ObjectMessage msg = session.createObjectMessage(contents);    return setPropertiesAndSend(destinationName, properties, msg, deliveryMode, priority, expiration);}
0
public Message publish(byte[] bytes, String destinationName, Map<String, Object> properties, int deliveryMode, int priority, long expiration) throws JMSException, NamingException
{    BytesMessage msg = session.createBytesMessage();    msg.writeBytes(bytes);    return setPropertiesAndSend(destinationName, properties, msg, deliveryMode, priority, expiration);}
0
public MapMessage publish(Map<String, Object> map, String destinationName, Map<String, Object> properties, int deliveryMode, int priority, long expiration) throws JMSException, NamingException
{    MapMessage msg = session.createMapMessage();    for (Entry<String, Object> me : map.entrySet()) {        msg.setObject(me.getKey(), me.getValue());    }    return (MapMessage) setPropertiesAndSend(destinationName, properties, msg, deliveryMode, priority, expiration);}
0
private Message setPropertiesAndSend(String destinationName, Map<String, Object> properties, Message msg, int deliveryMode, int priority, long expiration) throws JMSException, NamingException
{    Utils.addJMSProperties(msg, properties);    if (staticDest || destinationName == null) {        producer.send(msg, deliveryMode, priority, expiration);    } else {        Destination dest = Utils.lookupDestination(ctx, destinationName);        producer.send(dest, msg, deliveryMode, priority, expiration);    }    return msg;}
0
public void close()
{    Utils.close(producer, log);    Utils.close(session, log);    Utils.close(connection, log);}
0
private MessageConsumer createSubscriber(Session session, Destination destination, String durableSubscriptionId, String jmsSelector) throws JMSException
{    if (isEmpty(durableSubscriptionId)) {        if (isEmpty(jmsSelector)) {            return session.createConsumer(destination);        } else {            return session.createConsumer(destination, jmsSelector);        }    } else {        if (isEmpty(jmsSelector)) {            return session.createDurableSubscriber((Topic) destination, durableSubscriptionId);        } else {            return session.createDurableSubscriber((Topic) destination, durableSubscriptionId, jmsSelector, false);        }    }}
0
public void start() throws JMSException
{        connection.start();    connectionStarted = true;}
1
public void stop() throws JMSException
{        connection.stop();    connectionStarted = false;}
1
public Message getMessage(long timeout) throws JMSException
{    Message message = null;    if (queue != null) {                try {            if (timeout < 10) {                                message = queue.poll();            } else {                message = queue.poll(timeout, TimeUnit.MILLISECONDS);            }        } catch (InterruptedException e) {                        Thread.currentThread().interrupt();        }        return message;    }    if (timeout < 10) {                message = subscriber.receiveNoWait();    } else {        message = subscriber.receive(timeout);    }    return message;}
0
public void close()
{            try {        if (connection != null && connectionStarted) {            connection.stop();            connectionStarted = false;        }    } catch (JMSException e) {            }    Utils.close(subscriber, log);    Utils.close(session, log);    Utils.close(connection, log);}
1
public void onMessage(Message message)
{    if (!queue.offer(message)) {            }}
1
private boolean isEmpty(String s1)
{    return s1 == null || s1.trim().isEmpty();}
0
public TestElement createTestElement()
{    JMSProperties jmsProperties = tableModel.jmsProperties;    return (TestElement) jmsProperties.clone();}
0
public void modifyTestElement(TestElement el)
{    GuiUtils.stopTableEditing(jmsPropertiesTable);    JMSProperties jmsProperties = (JMSProperties) el;    jmsProperties.clear();    jmsProperties.addTestElement((TestElement) tableModel.jmsProperties.clone());}
0
public void clearGui()
{    tableModel.clearData();    deleteButton.setEnabled(false);}
0
public void configure(TestElement el)
{    tableModel.jmsProperties.clear();    tableModel.jmsProperties.addTestElement((JMSProperties) el.clone());    if (tableModel.getRowCount() != 0) {        deleteButton.setEnabled(true);    }}
0
private void init()
{        setLayout(new BorderLayout());    setBorder(BorderFactory.createEmptyBorder(10, 10, 5, 10));    add(createPropertiesPanel(), BorderLayout.CENTER);}
0
public void actionPerformed(ActionEvent e)
{    String action = e.getActionCommand();    if (action.equals(DELETE_COMMAND)) {        if (tableModel.getRowCount() > 0) {                                    GuiUtils.cancelEditing(jmsPropertiesTable);            int rowSelected = jmsPropertiesTable.getSelectedRow();            if (rowSelected != -1) {                tableModel.removeRow(rowSelected);                tableModel.fireTableDataChanged();                                if (tableModel.getRowCount() == 0) {                    deleteButton.setEnabled(false);                } else                                 {                    int rowToSelect = rowSelected;                    if (rowSelected >= tableModel.getRowCount()) {                        rowToSelect = rowSelected - 1;                    }                    jmsPropertiesTable.setRowSelectionInterval(rowToSelect, rowToSelect);                }            }        }    } else if (action.equals(ADD_COMMAND)) {                        GuiUtils.stopTableEditing(jmsPropertiesTable);        tableModel.addNewRow();        tableModel.fireTableDataChanged();                if (!deleteButton.isEnabled()) {            deleteButton.setEnabled(true);        }                int rowToSelect = tableModel.getRowCount() - 1;        jmsPropertiesTable.setRowSelectionInterval(rowToSelect, rowToSelect);    }}
0
public JPanel createPropertiesPanel()
{        jmsPropertiesTable = new JTable(tableModel);    JMeterUtils.applyHiDPI(jmsPropertiesTable);    jmsPropertiesTable.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());    jmsPropertiesTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);    jmsPropertiesTable.setPreferredScrollableViewportSize(new Dimension(100, 70));    TableColumn mechanismColumn = jmsPropertiesTable.getColumnModel().getColumn(COL_TYPE);    mechanismColumn.setCellEditor(new TypeCellEditor());    JPanel panel = new JPanel(new BorderLayout(0, 5));    panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("jms_props")));    panel.add(new JScrollPane(jmsPropertiesTable));    panel.add(createButtonPanel(), BorderLayout.SOUTH);    return panel;}
0
private JButton createButton(String resName, char mnemonic, String command, boolean enabled)
{    JButton button = new JButton(JMeterUtils.getResString(resName));    button.setMnemonic(mnemonic);    button.setActionCommand(command);    button.setEnabled(enabled);    button.addActionListener(this);    return button;}
0
private JPanel createButtonPanel()
{    boolean tableEmpty = tableModel.getRowCount() == 0;        addButton = createButton("add", 'A', ADD_COMMAND, true);        deleteButton = createButton("delete", 'D', DELETE_COMMAND, !tableEmpty);        JPanel buttonPanel = new JPanel();    buttonPanel.add(addButton);    buttonPanel.add(deleteButton);    return buttonPanel;}
0
public void addNewRow()
{    jmsProperties.addJmsProperty(new JMSProperty("", "", String.class.getName()));}
0
public void clearData()
{    jmsProperties.clear();    fireTableDataChanged();}
0
public void removeRow(int row)
{    jmsProperties.removeJmsProperty(row);}
0
public boolean isCellEditable(int row, int column)
{        return true;}
0
public Class<?> getColumnClass(int column)
{    return getValueAt(0, column).getClass();}
0
public int getRowCount()
{    return jmsProperties.getJmsPropertyCount();}
0
public int getColumnCount()
{    return 3;}
0
public String getColumnName(int column)
{    switch(column) {        case COL_NAME:            return "name";        case COL_VALUE:            return "value";        case COL_TYPE:            return "jms_properties_type";        default:            return null;    }}
0
public Object getValueAt(int row, int column)
{    JMSProperty property = jmsProperties.getJmsProperty(row);    switch(column) {        case COL_NAME:            return property.getName();        case COL_VALUE:            return property.getValue();        case COL_TYPE:            return property.getType();        default:            return null;    }}
0
public void setValueAt(Object value, int row, int column)
{    JMSProperty property = jmsProperties.getJmsProperty(row);        switch(column) {        case COL_NAME:            property.setName((String) value);            break;        case COL_VALUE:            property.setValue((String) value);            break;        case COL_TYPE:            property.setType((String) value);            break;        default:            break;    }}
1
public String getLabelResource()
{        return "jms_publisher";}
0
public TestElement createTestElement()
{    PublisherSampler sampler = new PublisherSampler();    setupSamplerProperties(sampler);    return sampler;}
0
public void modifyTestElement(TestElement s)
{    PublisherSampler sampler = (PublisherSampler) s;    setupSamplerProperties(sampler);    sampler.setDestinationStatic(destSetup.getText().equals(DEST_SETUP_STATIC));}
0
private void setupSamplerProperties(final PublisherSampler sampler)
{    super.configureTestElement(sampler);    sampler.setUseJNDIProperties(String.valueOf(useProperties.isSelected()));    sampler.setJNDIIntialContextFactory(jndiICF.getText());    sampler.setProviderUrl(urlField.getText());    sampler.setConnectionFactory(jndiConnFac.getText());    sampler.setDestination(jmsDestination.getText());    sampler.setExpiration(expiration.getText());    sampler.setReconnectionErrorCodes(jmsErrorReconnectOnCodes.getText());    sampler.setPriority(priority.getText());    sampler.setUsername(jmsUser.getText());    sampler.setPassword(jmsPwd.getText());    sampler.setTextMessage(textMessage.getText());    sampler.setInputFile(messageFile.getFilename());    sampler.setRandomPath(randomFile.getFilename());    sampler.setConfigChoice(configChoice.getText());    sampler.setFileEncoding(fileEncoding.getText());    sampler.setMessageChoice(msgChoice.getText());    sampler.setIterations(iterations.getText());    sampler.setUseAuth(useAuth.isSelected());    sampler.setUseNonPersistentDelivery(useNonPersistentDelivery.isSelected());    JMSProperties args = (JMSProperties) jmsPropertiesPanel.createTestElement();    sampler.setJMSProperties(args);}
0
private void init()
{        setLayout(new BorderLayout());    setBorder(makeBorder());    add(makeTitlePanel(), BorderLayout.NORTH);    JPanel mainPanel = new VerticalPanel();    add(mainPanel, BorderLayout.CENTER);    mainPanel.add(useProperties);    mainPanel.add(jndiICF);    mainPanel.add(urlField);    mainPanel.add(jndiConnFac);    mainPanel.add(createDestinationPane());    mainPanel.add(createAuthPane());    mainPanel.add(createPriorityAndExpiration());    mainPanel.add(jmsErrorReconnectOnCodes);    mainPanel.add(iterations);        jmsPropertiesPanel = new JMSPropertiesPanel();    mainPanel.add(jmsPropertiesPanel);    configChoice.setLayout(new BoxLayout(configChoice, BoxLayout.X_AXIS));    mainPanel.add(configChoice);    msgChoice.setLayout(new BoxLayout(msgChoice, BoxLayout.X_AXIS));    mainPanel.add(msgChoice);        String nonBreakingSpace = "\u00A0";    fileEncoding = new     JLabeledChoice(    JMeterUtils.getResString("content_encoding") + nonBreakingSpace + nonBreakingSpace, PublisherSampler.getSupportedEncodings(), true, false);    fileEncoding.setLayout(new BoxLayout(fileEncoding, BoxLayout.X_AXIS));    fileEncoding.add(Box.createHorizontalGlue());    mainPanel.add(fileEncoding);    mainPanel.add(messageFile);    mainPanel.add(randomFile);    JPanel messageContentPanel = new JPanel(new BorderLayout());    messageContentPanel.add(new JLabel(JMeterUtils.getResString("jms_text_area")), BorderLayout.NORTH);    messageContentPanel.add(JTextScrollPane.getInstance(textMessage), BorderLayout.CENTER);    mainPanel.add(messageContentPanel);    useProperties.addChangeListener(this);    useAuth.addChangeListener(this);    configChoice.addChangeListener(this);    msgChoice.addChangeListener(this);}
0
public void clearGui()
{    super.clearGui();    useProperties.setSelected(false);        jndiICF.setText("");        urlField.setText("");        jndiConnFac.setText("");        jmsDestination.setText("");        expiration.setText("");    jmsErrorReconnectOnCodes.setText("");        priority.setText("");        jmsUser.setText("");        jmsPwd.setText("");        textMessage.setInitialText("");        messageFile.setFilename("");        randomFile.setFilename("");        msgChoice.setText("");    fileEncoding.setSelectedIndex(0);    configChoice.setText(USE_TEXT_RSC);    updateConfig(USE_TEXT_RSC);    msgChoice.setText(TEXT_MSG_RSC);        iterations.setText("1");    useAuth.setSelected(false);    jmsUser.setEnabled(false);    jmsPwd.setEnabled(false);    destSetup.setText(DEST_SETUP_STATIC);    useNonPersistentDelivery.setSelected(false);    jmsPropertiesPanel.clearGui();}
0
public void configure(TestElement el)
{    super.configure(el);    PublisherSampler sampler = (PublisherSampler) el;    useProperties.setSelected(sampler.getUseJNDIPropertiesAsBoolean());    jndiICF.setText(sampler.getJNDIInitialContextFactory());    urlField.setText(sampler.getProviderUrl());    jndiConnFac.setText(sampler.getConnectionFactory());    jmsDestination.setText(sampler.getDestination());    jmsUser.setText(sampler.getUsername());    jmsPwd.setText(sampler.getPassword());    textMessage.setInitialText(sampler.getTextMessage());    textMessage.setCaretPosition(0);    messageFile.setFilename(sampler.getInputFile());    randomFile.setFilename(sampler.getRandomPath());    configChoice.setText(sampler.getConfigChoice());    msgChoice.setText(sampler.getMessageChoice());    fileEncoding.setText(sampler.getFileEncoding());    iterations.setText(sampler.getIterations());    expiration.setText(sampler.getExpiration());    jmsErrorReconnectOnCodes.setText(sampler.getReconnectionErrorCodes());    priority.setText(sampler.getPriority());    useAuth.setSelected(sampler.isUseAuth());    jmsUser.setEnabled(useAuth.isSelected());    jmsPwd.setEnabled(useAuth.isSelected());    destSetup.setText(sampler.isDestinationStatic() ? DEST_SETUP_STATIC : DEST_SETUP_DYNAMIC);    useNonPersistentDelivery.setSelected(sampler.getUseNonPersistentDelivery());    jmsPropertiesPanel.configure(sampler.getJMSProperties());    updateChoice(msgChoice.getText());    updateConfig(sampler.getConfigChoice());}
0
public void stateChanged(ChangeEvent event)
{    if (event.getSource() == configChoice) {        updateConfig(configChoice.getText());    } else if (event.getSource() == msgChoice) {        updateChoice(msgChoice.getText());    } else if (event.getSource() == useProperties) {        final boolean isUseProperties = useProperties.isSelected();        jndiICF.setEnabled(!isUseProperties);        urlField.setEnabled(!isUseProperties);        useAuth.setEnabled(!isUseProperties);    } else if (event.getSource() == useAuth) {        jmsUser.setEnabled(useAuth.isSelected() && useAuth.isEnabled());        jmsPwd.setEnabled(useAuth.isSelected() && useAuth.isEnabled());    }}
0
private void updateFileEncoding()
{    boolean isTextMode = USE_TEXT_RSC.equals(configChoice.getText());    boolean isObjectType = OBJECT_MSG_RSC.equals(msgChoice.getText());    fileEncoding.setChoiceListEnabled(!isTextMode && !isObjectType);}
0
private void updateChoice(String command)
{    String oldChoice = configChoice.getText();    if (BYTES_MSG_RSC.equals(command)) {        String newChoice = USE_TEXT_RSC.equals(oldChoice) ? USE_FILE_RSC : oldChoice;        configChoice.resetButtons(CONFIG_ITEMS_BYTES_MSG, newChoice);        textMessage.setEnabled(false);    } else {        configChoice.resetButtons(CONFIG_ITEMS, oldChoice);        textMessage.setEnabled(true);    }    updateFileEncoding();    validate();}
0
private void updateConfig(String command)
{    if (command.equals(USE_TEXT_RSC)) {        textMessage.setEnabled(true);        messageFile.enableFile(false);        randomFile.enableFile(false);    } else if (command.equals(USE_RANDOM_RSC)) {        textMessage.setEnabled(false);        messageFile.enableFile(false);        randomFile.enableFile(true);    } else {        textMessage.setEnabled(false);        messageFile.enableFile(true);        randomFile.enableFile(false);    }    updateFileEncoding();}
0
private JPanel createDestinationPane()
{    JPanel pane = new JPanel(new BorderLayout(3, 0));    pane.add(jmsDestination, BorderLayout.WEST);    destSetup.setLayout(new BoxLayout(destSetup, BoxLayout.X_AXIS));    pane.add(destSetup, BorderLayout.CENTER);    pane.add(useNonPersistentDelivery, BorderLayout.EAST);    return pane;}
0
private JPanel createAuthPane()
{    JPanel pane = new JPanel();    pane.setLayout(new BoxLayout(pane, BoxLayout.X_AXIS));    pane.add(useAuth);    pane.add(Box.createHorizontalStrut(10));    pane.add(jmsUser);    pane.add(Box.createHorizontalStrut(10));    pane.add(jmsPwd);    return pane;}
0
private JPanel createPriorityAndExpiration()
{    JPanel panel = new HorizontalPanel();    panel.add(expiration);    panel.add(priority);    return panel;}
0
public void clearGui()
{        super.clearGui();        queueConnectionFactory.setText("");        sendQueue.setText("");        receiveQueue.setText("");    jmsCommunicationStyle.setSelectedIndex(0);        timeout.setText("");        expiration.setText("");        priority.setText("");        jmsSelector.setText("");        numberOfSamplesToAggregate.setText("");        messageContent.setInitialText("");        initialContextFactory.setText("");        providerUrl.setText("");    jmsPropertiesPanel.clearGui();    jndiPropertiesPanel.clear();}
0
public TestElement createTestElement()
{    JMSSampler sampler = new JMSSampler();    super.configureTestElement(sampler);    transfer(sampler);    return sampler;}
0
private void transfer(JMSSampler element)
{    element.setQueueConnectionFactory(queueConnectionFactory.getText());    element.setSendQueue(sendQueue.getText());    element.setReceiveQueue(receiveQueue.getText());    element.setProperty(JMSSampler.JMS_COMMUNICATION_STYLE, jmsCommunicationStyle.getSelectedIndex());    element.removeProperty(JMSSampler.IS_ONE_WAY);    element.setNonPersistent(useNonPersistentDelivery.isSelected());    element.setUseReqMsgIdAsCorrelId(useReqMsgIdAsCorrelId.isSelected());    element.setUseResMsgIdAsCorrelId(useResMsgIdAsCorrelId.isSelected());    element.setTimeout(timeout.getText());    element.setExpiration(expiration.getText());    element.setPriority(priority.getText());    element.setJMSSelector(jmsSelector.getText());    element.setNumberOfSamplesToAggregate(numberOfSamplesToAggregate.getText());    element.setContent(messageContent.getText());    element.setInitialContextFactory(initialContextFactory.getText());    element.setContextProvider(providerUrl.getText());    Arguments jndiArgs = (Arguments) jndiPropertiesPanel.createTestElement();    element.setJNDIProperties(jndiArgs);    JMSProperties args = (JMSProperties) jmsPropertiesPanel.createTestElement();    element.setJMSProperties(args);}
0
public void modifyTestElement(TestElement element)
{    super.configureTestElement(element);    if (!(element instanceof JMSSampler)) {        return;    }    JMSSampler sampler = (JMSSampler) element;    transfer(sampler);}
0
public void configure(TestElement el)
{    super.configure(el);    if (!(el instanceof JMSSampler)) {        return;    }    JMSSampler sampler = (JMSSampler) el;    queueConnectionFactory.setText(sampler.getQueueConnectionFactory());    sendQueue.setText(sampler.getSendQueue());    receiveQueue.setText(sampler.getReceiveQueue());        JMeterProperty oneWay = el.getProperty(JMSSampler.IS_ONE_WAY);    if (oneWay instanceof NullProperty) {        jmsCommunicationStyle.setSelectedIndex(el.getPropertyAsInt(JMSSampler.JMS_COMMUNICATION_STYLE));    } else {        jmsCommunicationStyle.setSelectedIndex(((BooleanProperty) oneWay).getBooleanValue() ? JMSSampler.COMMUNICATION_STYLE.ONE_WAY.getValue() : JMSSampler.COMMUNICATION_STYLE.REQUEST_REPLY.getValue());    }    useNonPersistentDelivery.setSelected(sampler.isNonPersistent());    useReqMsgIdAsCorrelId.setSelected(sampler.isUseReqMsgIdAsCorrelId());    useResMsgIdAsCorrelId.setSelected(sampler.isUseResMsgIdAsCorrelId());    timeout.setText(sampler.getTimeout());    expiration.setText(sampler.getExpiration());    priority.setText(sampler.getPriority());    jmsSelector.setText(sampler.getJMSSelector());    numberOfSamplesToAggregate.setText(sampler.getNumberOfSamplesToAggregate());    messageContent.setInitialText(sampler.getContent());    initialContextFactory.setText(sampler.getInitialContextFactory());    providerUrl.setText(sampler.getContextProvider());    jmsPropertiesPanel.configure(sampler.getJMSProperties());    jndiPropertiesPanel.configure(sampler.getJNDIProperties());}
0
private void init()
{            setLayout(new BorderLayout());    setBorder(makeBorder());    add(makeTitlePanel(), BorderLayout.NORTH);    JPanel jmsQueueingPanel = new JPanel(new BorderLayout());    jmsQueueingPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("jms_queueing")));    JPanel qcfPanel = new JPanel(new BorderLayout(5, 0));    qcfPanel.add(queueConnectionFactory, BorderLayout.CENTER);    jmsQueueingPanel.add(qcfPanel, BorderLayout.NORTH);    JPanel sendQueuePanel = new JPanel(new BorderLayout(5, 0));    sendQueuePanel.add(sendQueue);    jmsQueueingPanel.add(sendQueuePanel, BorderLayout.CENTER);    JPanel receiveQueuePanel = new JPanel(new BorderLayout(5, 0));    receiveQueuePanel.add(jmsSelector, BorderLayout.SOUTH);    receiveQueuePanel.add(numberOfSamplesToAggregate, BorderLayout.CENTER);    receiveQueuePanel.add(receiveQueue, BorderLayout.NORTH);    jmsQueueingPanel.add(receiveQueuePanel, BorderLayout.SOUTH);    JPanel messagePanel = new JPanel(new BorderLayout());    messagePanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("jms_message_title")));    JPanel correlationPanel = new HorizontalPanel();    correlationPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("jms_correlation_title")));        useReqMsgIdAsCorrelId = new JCheckBox(JMeterUtils.getResString("jms_use_req_msgid_as_correlid"), false);        useResMsgIdAsCorrelId = new JCheckBox(JMeterUtils.getResString("jms_use_res_msgid_as_correlid"), false);    correlationPanel.add(useReqMsgIdAsCorrelId);    correlationPanel.add(useResMsgIdAsCorrelId);    JPanel messageNorthPanel = new JPanel(new BorderLayout());    JPanel onewayPanel = new HorizontalPanel();    onewayPanel.add(jmsCommunicationStyle);    onewayPanel.add(correlationPanel);    messageNorthPanel.add(onewayPanel, BorderLayout.NORTH);        useNonPersistentDelivery = new JCheckBox(JMeterUtils.getResString("jms_use_non_persistent_delivery"), false);    JPanel timeoutPanel = new HorizontalPanel();    timeoutPanel.add(timeout);    timeoutPanel.add(expiration);    timeoutPanel.add(priority);    timeoutPanel.add(useNonPersistentDelivery);    messageNorthPanel.add(timeoutPanel, BorderLayout.SOUTH);    messagePanel.add(messageNorthPanel, BorderLayout.NORTH);    JPanel messageContentPanel = new JPanel(new BorderLayout());    messageContentPanel.add(new JLabel(JMeterUtils.getResString("jms_msg_content")), BorderLayout.NORTH);    messageContentPanel.add(JTextScrollPane.getInstance(messageContent), BorderLayout.CENTER);    messagePanel.add(messageContentPanel, BorderLayout.CENTER);        jmsPropertiesPanel = new JMSPropertiesPanel();    messagePanel.add(jmsPropertiesPanel, BorderLayout.SOUTH);    Box mainPanel = Box.createVerticalBox();    add(mainPanel, BorderLayout.CENTER);    mainPanel.add(jmsQueueingPanel, BorderLayout.NORTH);    mainPanel.add(messagePanel, BorderLayout.CENTER);    JPanel jndiPanel = createJNDIPanel();    mainPanel.add(jndiPanel, BorderLayout.SOUTH);}
0
private JPanel createJNDIPanel()
{    JPanel jndiPanel = new JPanel(new BorderLayout());    jndiPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("jms_jndi_props")));    JPanel contextPanel = new JPanel(new BorderLayout(10, 0));    contextPanel.add(initialContextFactory);    jndiPanel.add(contextPanel, BorderLayout.NORTH);    JPanel providerPanel = new JPanel(new BorderLayout(10, 0));    providerPanel.add(providerUrl);    jndiPanel.add(providerPanel, BorderLayout.SOUTH);        jndiPropertiesPanel = new ArgumentsPanel(JMeterUtils.getResString("jms_jndi_props"));    jndiPanel.add(jndiPropertiesPanel);    return jndiPanel;}
0
public String getLabelResource()
{        return "jms_point_to_point";}
0
public String getLabelResource()
{        return "jms_subscriber_title";}
0
public TestElement createTestElement()
{    SubscriberSampler sampler = new SubscriberSampler();    modifyTestElement(sampler);    return sampler;}
0
public void modifyTestElement(TestElement s)
{    SubscriberSampler sampler = (SubscriberSampler) s;    super.configureTestElement(sampler);    sampler.setUseJNDIProperties(String.valueOf(useProperties.isSelected()));    sampler.setJNDIIntialContextFactory(jndiICF.getText());    sampler.setProviderUrl(urlField.getText());    sampler.setConnectionFactory(jndiConnFac.getText());    sampler.setDestination(jmsDestination.getText());    sampler.setDurableSubscriptionId(jmsDurableSubscriptionId.getText());    sampler.setClientID(jmsClientId.getText());    sampler.setJmsSelector(jmsSelector.getText());    sampler.setUsername(jmsUser.getText());    sampler.setPassword(jmsPwd.getText());    sampler.setUseAuth(useAuth.isSelected());    sampler.setIterations(samplesToAggregate.getText());    sampler.setReadResponse(String.valueOf(storeResponse.isSelected()));    sampler.setClientChoice(clientChoice.getText());    sampler.setStopBetweenSamples(stopBetweenSamples.isSelected());    sampler.setTimeout(timeout.getText());    sampler.setReconnectionErrorCodes(jmsErrorReconnectOnCodes.getText());    sampler.setPauseBetweenErrors(jmsErrorPauseBetween.getText());    sampler.setDestinationStatic(destSetup.getText().equals(DEST_SETUP_STATIC));    sampler.setSeparator(separator.getText());}
0
private void init()
{        setLayout(new BorderLayout());    setBorder(makeBorder());    add(makeTitlePanel(), BorderLayout.NORTH);    JPanel mainPanel = new VerticalPanel();    add(mainPanel, BorderLayout.CENTER);    jndiICF.setToolTipText(Context.INITIAL_CONTEXT_FACTORY);    urlField.setToolTipText(Context.PROVIDER_URL);    jmsUser.setToolTipText(Context.SECURITY_PRINCIPAL);    jmsPwd.setToolTipText(Context.SECURITY_CREDENTIALS);    mainPanel.add(useProperties);    mainPanel.add(jndiICF);    mainPanel.add(urlField);    mainPanel.add(jndiConnFac);    mainPanel.add(createDestinationPane());    mainPanel.add(jmsDurableSubscriptionId);    mainPanel.add(jmsClientId);    mainPanel.add(jmsSelector);    mainPanel.add(useAuth);    mainPanel.add(jmsUser);    mainPanel.add(jmsPwd);    mainPanel.add(samplesToAggregate);    mainPanel.add(storeResponse);    mainPanel.add(timeout);    JPanel choice = new HorizontalPanel();    choice.add(clientChoice);    choice.add(stopBetweenSamples);    mainPanel.add(choice);    mainPanel.add(separator);    mainPanel.add(jmsErrorReconnectOnCodes);    mainPanel.add(jmsErrorPauseBetween);    useProperties.addChangeListener(this);    useAuth.addChangeListener(this);}
0
public void configure(TestElement el)
{    super.configure(el);    SubscriberSampler sampler = (SubscriberSampler) el;    useProperties.setSelected(sampler.getUseJNDIPropertiesAsBoolean());    jndiICF.setText(sampler.getJNDIInitialContextFactory());    urlField.setText(sampler.getProviderUrl());    jndiConnFac.setText(sampler.getConnectionFactory());    jmsDestination.setText(sampler.getDestination());    jmsDurableSubscriptionId.setText(sampler.getDurableSubscriptionId());    jmsClientId.setText(sampler.getClientId());    jmsSelector.setText(sampler.getJmsSelector());    jmsUser.setText(sampler.getUsername());    jmsPwd.setText(sampler.getPassword());    samplesToAggregate.setText(sampler.getIterations());    useAuth.setSelected(sampler.isUseAuth());    jmsUser.setEnabled(useAuth.isSelected());    jmsPwd.setEnabled(useAuth.isSelected());    storeResponse.setSelected(sampler.getReadResponseAsBoolean());    clientChoice.setText(sampler.getClientChoice());    stopBetweenSamples.setSelected(sampler.isStopBetweenSamples());    timeout.setText(sampler.getTimeout());    separator.setText(sampler.getSeparator());    destSetup.setText(sampler.isDestinationStatic() ? DEST_SETUP_STATIC : DEST_SETUP_DYNAMIC);    jmsErrorReconnectOnCodes.setText(sampler.getReconnectionErrorCodes());    jmsErrorPauseBetween.setText(sampler.getPauseBetweenErrors());}
0
public void clearGui()
{    super.clearGui();        useProperties.setSelected(false);        jndiICF.setText("");        urlField.setText("");        jndiConnFac.setText("");        jmsDestination.setText("");        jmsDurableSubscriptionId.setText("");        jmsClientId.setText("");        jmsSelector.setText("");        jmsUser.setText("");        jmsPwd.setText("");        samplesToAggregate.setText("1");        timeout.setText("");        separator.setText("");    useAuth.setSelected(false);    jmsUser.setEnabled(false);    jmsPwd.setEnabled(false);    storeResponse.setSelected(true);    clientChoice.setText(RECEIVE_RSC);    stopBetweenSamples.setSelected(false);    destSetup.setText(DEST_SETUP_STATIC);    jmsErrorReconnectOnCodes.setText("");    jmsErrorPauseBetween.setText("");}
0
public void stateChanged(ChangeEvent event)
{    if (event.getSource() == useProperties) {        final boolean isUseProperties = useProperties.isSelected();        jndiICF.setEnabled(!isUseProperties);        urlField.setEnabled(!isUseProperties);        useAuth.setEnabled(!isUseProperties);    } else if (event.getSource() == useAuth) {        jmsUser.setEnabled(useAuth.isSelected() && useAuth.isEnabled());        jmsPwd.setEnabled(useAuth.isSelected() && useAuth.isEnabled());    }}
0
private JPanel createDestinationPane()
{    JPanel pane = new JPanel(new BorderLayout(3, 0));    pane.add(jmsDestination, BorderLayout.CENTER);    destSetup.setLayout(new BoxLayout(destSetup, BoxLayout.X_AXIS));    pane.add(destSetup, BorderLayout.EAST);    return pane;}
0
public SampleResult sample(Entry e)
{    return this.sample();}
0
public void setJNDIIntialContextFactory(String icf)
{    setProperty(JNDI_INITIAL_CONTEXT_FAC, icf);}
0
public String getJNDIInitialContextFactory()
{    return getPropertyAsString(JNDI_INITIAL_CONTEXT_FAC);}
0
public void setProviderUrl(String url)
{    setProperty(PROVIDER_URL, url);}
0
public String getProviderUrl()
{    return getPropertyAsString(PROVIDER_URL);}
0
public void setConnectionFactory(String factory)
{    setProperty(CONN_FACTORY, factory);}
0
public String getConnectionFactory()
{    return getPropertyAsString(CONN_FACTORY);}
0
public void setDestination(String dest)
{    setProperty(DEST, dest);}
0
public String getDestination()
{    return getPropertyAsString(DEST);}
0
public void setUsername(String user)
{    setProperty(PRINCIPAL, user);}
0
public String getUsername()
{    return getPropertyAsString(PRINCIPAL);}
0
public void setPassword(String pwd)
{    setProperty(CREDENTIALS, pwd);}
0
public String getPassword()
{    return getPropertyAsString(CREDENTIALS);}
0
public void setIterations(String count)
{    setProperty(ITERATIONS, count);}
0
public String getIterations()
{    return getPropertyAsString(ITERATIONS);}
0
public int getIterationCount()
{    return getPropertyAsInt(ITERATIONS);}
0
public void setUseAuth(boolean useAuth)
{    setProperty(USE_AUTH, useAuth);}
0
public boolean isUseAuth()
{    final String useAuth = getPropertyAsString(USE_AUTH);        return useAuth.equalsIgnoreCase("true") || useAuth.equals(REQUIRED);}
0
public void setReadResponse(String read)
{    setProperty(STORE_RESPONSE, read);}
0
public String getReadResponse()
{    return getPropertyAsString(STORE_RESPONSE);}
0
public boolean getReadResponseAsBoolean()
{    return getPropertyAsBoolean(STORE_RESPONSE);}
0
public void setUseJNDIProperties(String properties)
{    setProperty(USE_PROPERTIES_FILE, properties);}
0
public String getUseJNDIProperties()
{    return getPropertyAsString(USE_PROPERTIES_FILE);}
0
public boolean getUseJNDIPropertiesAsBoolean()
{    return getPropertyAsBoolean(USE_PROPERTIES_FILE);}
0
public void setDestinationStatic(boolean isStatic)
{    setProperty(DESTINATION_STATIC, isStatic, DESTINATION_STATIC_DEFAULT);}
0
public boolean isDestinationStatic()
{    return getPropertyAsBoolean(DESTINATION_STATIC, DESTINATION_STATIC_DEFAULT);}
0
public static String getMessageHeaders(Message message)
{    final StringBuilder response = new StringBuilder(256);    try {        response.append("JMS Message Header Attributes:");        response.append("\n   Correlation ID: ");        response.append(message.getJMSCorrelationID());        response.append("\n   Delivery Mode: ");        if (message.getJMSDeliveryMode() == DeliveryMode.PERSISTENT) {            response.append("PERSISTANT");        } else {            response.append("NON-PERSISTANT");        }        final Destination destination = message.getJMSDestination();        response.append("\n   Destination: ");        response.append(destination == null ? null : destination.toString());        response.append("\n   Expiration: ");        response.append(new Date(message.getJMSExpiration()));        response.append("\n   Message ID: ");        response.append(message.getJMSMessageID());        response.append("\n   Priority: ");        response.append(message.getJMSPriority());        response.append("\n   Redelivered: ");        response.append(message.getJMSRedelivered());        final Destination replyTo = message.getJMSReplyTo();        response.append("\n   Reply to: ");        response.append(replyTo == null ? null : replyTo.toString());        response.append("\n   Timestamp: ");        response.append(new Date(message.getJMSTimestamp()));        response.append("\n   Type: ");        response.append(message.getJMSType());        response.append("\n\n");    } catch (JMSException e) {            }    return response.toString();}
1
public String getReconnectionErrorCodes()
{    return getPropertyAsString(ERROR_RECONNECT_ON_CODES);}
0
public void setReconnectionErrorCodes(String reconnectionErrorCodes)
{    setProperty(ERROR_RECONNECT_ON_CODES, reconnectionErrorCodes);}
0
public Predicate<String> getIsReconnectErrorCode()
{    return isReconnectErrorCode;}
0
protected void configureIsReconnectErrorCode()
{    String regex = StringUtils.trimToEmpty(getReconnectionErrorCodes());    if (regex.isEmpty()) {        isReconnectErrorCode = e -> false;    } else {        isReconnectErrorCode = Pattern.compile(regex).asPredicate();    }}
0
public Message sendAndReceive(Message request, int deliveryMode, int priority, long expiration) throws JMSException
{    String id = request.getJMSCorrelationID();    if (id == null && !useReqMsgIdAsCorrelId) {        throw new IllegalArgumentException("Correlation id is null. Set the JMSCorrelationID header.");    }    final CountDownLatch countDownLatch = new CountDownLatch(1);    final MessageAdmin admin = MessageAdmin.getAdmin();    if (useReqMsgIdAsCorrelId) {                synchronized (admin) {                        producer.send(request, deliveryMode, priority, expiration);            id = request.getJMSMessageID();            admin.putRequest(id, request, countDownLatch);        }    } else {        admin.putRequest(id, request, countDownLatch);        producer.send(request, deliveryMode, priority, expiration);    }    try {                        if (timeout == 0) {                                    countDownLatch.await();        } else {            if (!countDownLatch.await(timeout, TimeUnit.MILLISECONDS)) {                            }        }            } catch (InterruptedException e) {                Thread.currentThread().interrupt();    }    return admin.get(id);}
1
public void close() throws JMSException
{}
0
public CollectionProperty getProperties()
{    return (CollectionProperty) getProperty(JMS_PROPERTIES);}
0
public void clear()
{    super.clear();    setProperty(new CollectionProperty(JMS_PROPERTIES, new ArrayList<JMSProperty>()));}
0
public void setProperties(List<JMSProperty> jmsProperties)
{    setProperty(new CollectionProperty(JMS_PROPERTIES, jmsProperties));}
0
public Map<String, Object> getJmsPropertysAsMap()
{    Map<String, Object> argMap = new LinkedHashMap<>();    for (JMeterProperty jMeterProperty : getProperties()) {        JMSProperty arg = (JMSProperty) jMeterProperty.getObjectValue();                if (!argMap.containsKey(arg.getName())) {            argMap.put(arg.getName(), arg.getValueAsObject());        }    }    return argMap;}
0
public void addJmsProperty(String name, String value)
{    addJmsProperty(new JMSProperty(name, value));}
0
public void addJmsProperty(JMSProperty arg)
{    TestElementProperty newArg = new TestElementProperty(arg.getName(), arg);    if (isRunningVersion()) {        this.setTemporary(newArg);    }    getProperties().addItem(newArg);}
0
public void addJmsProperty(String name, String value, String type)
{    addJmsProperty(new JMSProperty(name, value, type));}
0
public PropertyIterator iterator()
{    return getProperties().iterator();}
0
public String toString()
{    StringBuilder str = new StringBuilder();    PropertyIterator iter = getProperties().iterator();    while (iter.hasNext()) {        JMSProperty arg = (JMSProperty) iter.next().getObjectValue();        str.append(arg.toString());        if (iter.hasNext()) {                        str.append(",");        }    }    return str.toString();}
0
public void removeJmsProperty(int row)
{    if (row < getProperties().size()) {        getProperties().remove(row);    }}
0
public void removeJmsProperty(JMSProperty arg)
{    PropertyIterator iter = getProperties().iterator();    while (iter.hasNext()) {        JMSProperty item = (JMSProperty) iter.next().getObjectValue();        if (arg.equals(item)) {            iter.remove();        }    }}
0
public void removeJmsProperty(String argName)
{    PropertyIterator iter = getProperties().iterator();    while (iter.hasNext()) {        JMSProperty arg = (JMSProperty) iter.next().getObjectValue();        if (arg.getName().equals(argName)) {            iter.remove();        }    }}
0
public void removeAllJmsPropertys()
{    getProperties().clear();}
0
public int getJmsPropertyCount()
{    return getProperties().size();}
0
public JMSProperty getJmsProperty(int row)
{    JMSProperty argument = null;    if (row < getProperties().size()) {        argument = (JMSProperty) getProperties().get(row).getObjectValue();    }    return argument;}
0
public void setName(String newName)
{    setProperty(new StringProperty(PROP_NAME, newName));}
0
public String getName()
{    return getPropertyAsString(PROP_NAME);}
0
public void setValue(String newValue)
{    setProperty(new StringProperty(PROP_VALUE, newValue));}
0
public String getValue()
{    return getPropertyAsString(PROP_VALUE);}
0
public void setType(String type)
{    setProperty(new StringProperty(PROP_TYPE, type));}
0
public String getType()
{    return getPropertyAsString(PROP_TYPE);}
0
public String toString()
{    return getName() + "," + getValue() + "," + getType();}
0
public Object getValueAsObject()
{    String type = getType();    String value = getValue();    if (type.equals(Boolean.class.getName())) {                return Boolean.valueOf(value);    } else if (type.equals(Byte.class.getName())) {                return Byte.valueOf(value);    } else if (type.equals(Short.class.getName())) {                return Short.valueOf(value);    } else if (type.equals(Integer.class.getName())) {                return Integer.valueOf(value);    } else if (type.equals(Long.class.getName())) {                return Long.valueOf(value);    } else if (type.equals(Float.class.getName())) {                return Float.valueOf(value);    } else if (type.equals(Double.class.getName())) {                return Double.valueOf(value);    } else if (type.equals(String.class.getName())) {                return value;    } else {        return null;    }}
0
public int getValue()
{    return value;}
0
public SampleResult sample(Entry entry)
{    JMeterContext jmeterContext = JMeterContextService.getContext();    SampleResult res = new SampleResult();    res.setSampleLabel(getName());    res.setSamplerData(getContent());        res.setSuccessful(false);    res.setDataType(SampleResult.TEXT);    res.sampleStart();    try {                if (isBrowse()) {            handleBrowse(res);        } else if (isClearQueue()) {            handleClearQueue(res);        } else if (isOneway()) {            handleOneWay(res);        } else if (isRead()) {            handleRead(jmeterContext, res);        } else {            handleRequestResponse(res);        }    } catch (Exception e) {                if (thrown != null) {            res.setResponseMessage(thrown.toString());        } else {            res.setResponseMessage(e.getLocalizedMessage());        }    }    res.sampleEnd();    return res;}
1
private void handleBrowse(SampleResult res) throws JMSException
{        StringBuilder sb = new StringBuilder(75);    res.setSuccessful(true);    sb.append("Browse message on Send Queue ").append(sendQueue.getQueueName()).append(": ").append(browseQueueDetails(sendQueue, res));    res.setResponseData(sb.toString().getBytes());    res.setResponseCodeOK();}
1
private void handleClearQueue(SampleResult res) throws JMSException
{        StringBuilder sb = new StringBuilder(75);    res.setSuccessful(true);    sb.append("Clear messages on Send Queue ").append(sendQueue.getQueueName()).append(": ").append(clearQueue(sendQueue, res));    res.setResponseData(sb.toString().getBytes());    res.setResponseCodeOK();}
1
private void handleOneWay(SampleResult res) throws JMSException
{        TextMessage msg = createMessage();    int deliveryMode = isNonPersistent() ? DeliveryMode.NON_PERSISTENT : DeliveryMode.PERSISTENT;    producer.send(msg, deliveryMode, Integer.parseInt(getPriority()), Long.parseLong(getExpiration()));    res.setRequestHeaders(Utils.messageProperties(msg));    res.setResponseOK();    res.setResponseData("Oneway request has no response data", null);}
1
private void handleRead(JMeterContext context, SampleResult res)
{        StringBuilder sb = new StringBuilder(75);    res.setSuccessful(true);    Sampler sampler = context.getPreviousSampler();    SampleResult sr = context.getPreviousResult();    String jmsSelector = getJMSSelector();    if (JMSSampler.PREV_SAMPLER.equals(jmsSelector) && (sampler instanceof JMSSampler)) {        jmsSelector = sr.getResponseMessage();    }    int sampleCounter = 0;    int sampleTries = 0;    String result;    StringBuilder buffer = new StringBuilder();    StringBuilder propBuffer = new StringBuilder();    do {        result = browseQueueForConsumption(sendQueue, jmsSelector, res, buffer, propBuffer);        if (result != null) {            sb.append(result);            sb.append('\n');            sampleCounter++;        }        sampleTries++;    } while ((result != null) && (sampleTries < getNumberOfSamplesToAggregateAsInt()));    res.setResponseData(buffer.toString(), StandardCharsets.UTF_8.name());    res.setResponseHeaders(propBuffer.toString());    if (sampleCounter == 0) {        res.setSuccessful(false);        res.setResponseCode("404");        res.setResponseMessage(sampleCounter + " samples messages received, last try had following response message:" + res.getResponseMessage());    } else {        res.setSuccessful(true);        res.setResponseCodeOK();        res.setResponseMessage(sampleCounter + " message(s) received successfully");    }    res.setSamplerData(getNumberOfSamplesToAggregateAsInt() + " messages expected");    res.setSampleCount(sampleCounter);}
1
private void handleRequestResponse(SampleResult res) throws JMSException
{    TextMessage msg = createMessage();    if (!useTemporyQueue()) {                msg.setJMSReplyTo(receiveQueue);    }        Message replyMsg = executor.sendAndReceive(msg, isNonPersistent() ? DeliveryMode.NON_PERSISTENT : DeliveryMode.PERSISTENT, Integer.parseInt(getPriority()), Long.parseLong(getExpiration()));    res.setRequestHeaders(Utils.messageProperties(msg));    if (replyMsg == null) {        res.setResponseMessage("No reply message received");    } else {        if (replyMsg instanceof TextMessage) {            res.setResponseData(((TextMessage) replyMsg).getText(), null);        } else {            res.setResponseData(replyMsg.toString(), null);        }        res.setResponseHeaders(Utils.messageProperties(replyMsg));        res.setResponseOK();    }}
1
private String browseQueueForConsumption(Queue queue, String jmsSelector, SampleResult res, StringBuilder buffer, StringBuilder propBuffer)
{    String retVal = null;    QueueReceiver consumer = null;    Message reply = null;    String queueName = null;    try {        queueName = queue.getQueueName();        consumer = session.createReceiver(queue, jmsSelector);        reply = consumer.receive(getTimeoutAsInt());                if (reply != null) {            res.setResponseMessage("1 message received successfully");            res.setResponseHeaders(reply.toString());            TextMessage msg = (TextMessage) reply;            retVal = msg.getText();            extractContent(buffer, propBuffer, msg);        } else {            res.setResponseMessage("No message received");        }    } catch (Exception ex) {        res.setResponseMessage("Error browsing queue '" + queueName + "' with selector '" + jmsSelector + "', timeout '" + getTimeout() + "', message:" + ex.getMessage());            } finally {        Utils.close(consumer, LOGGER);    }    return retVal;}
1
private void extractContent(StringBuilder buffer, StringBuilder propBuffer, Message msg)
{    if (msg != null) {        try {            if (msg instanceof TextMessage) {                buffer.append(((TextMessage) msg).getText());            } else if (msg instanceof ObjectMessage) {                ObjectMessage objectMessage = (ObjectMessage) msg;                if (objectMessage.getObject() != null) {                    buffer.append(objectMessage.getObject().getClass());                } else {                    buffer.append("object is null");                }            } else if (msg instanceof BytesMessage) {                BytesMessage bytesMessage = (BytesMessage) msg;                buffer.append(bytesMessage.getBodyLength() + " bytes received in BytesMessage");            } else if (msg instanceof MapMessage) {                MapMessage mapm = (MapMessage) msg;                                @SuppressWarnings("unchecked")                Enumeration<String> enumb = mapm.getMapNames();                while (enumb.hasMoreElements()) {                    String name = enumb.nextElement();                    Object obj = mapm.getObject(name);                    buffer.append(name);                    buffer.append(",");                    buffer.append(obj.getClass().getCanonicalName());                    buffer.append(",");                    buffer.append(obj);                    buffer.append("\n");                }            }            Utils.messageProperties(propBuffer, msg);        } catch (JMSException e) {            buffer.append("Error extracting content from message:" + e.getMessage());                    }    }}
1
private String browseQueueDetails(Queue queue, SampleResult res)
{    String queueName = null;    try {        queueName = queue.getQueueName();        StringBuilder messageBodies = new StringBuilder(150);        messageBodies.append("==== Browsing Messages ===\n");                QueueBrowser qBrowser = session.createBrowser(queue);                Enumeration<?> e = qBrowser.getEnumeration();        int numMsgs = 0;                String corrID;        while (e.hasMoreElements()) {            TextMessage message = (TextMessage) e.nextElement();            corrID = message.getJMSCorrelationID();            if (corrID == null) {                corrID = message.getJMSMessageID();                messageBodies.append(numMsgs).append(" - MessageID: ").append(corrID).append(": ").append(message.getText()).append("\n");            } else {                messageBodies.append(numMsgs).append(" - CorrelationID: ").append(corrID).append(": ").append(message.getText()).append("\n");            }            numMsgs++;        }        res.setResponseMessage(numMsgs + " messages available on the queue");        res.setResponseHeaders(qBrowser.toString());        return messageBodies + queue.getQueueName() + " has " + numMsgs + " messages";    } catch (Exception e) {        res.setResponseMessage("Error counting message on the queue");                return "Error browsing messages on the queue, message " + e.getMessage();    }}
1
private String clearQueue(Queue queue, SampleResult res)
{    String retVal = null;    QueueReceiver consumer = null;    String queueName = null;    try {        queueName = queue.getQueueName();        consumer = session.createReceiver(queue);        Message deletedMsg = null;        long deletedMsgCount = 0;        do {            deletedMsg = consumer.receive(getTimeoutAsInt());            if (deletedMsg != null) {                deletedMsgCount++;                deletedMsg.acknowledge();            }        } while (deletedMsg != null);        retVal = deletedMsgCount + " message(s) removed using receive timeout:" + getTimeoutAsInt() + "ms";        res.setResponseMessage(retVal);    } catch (Exception ex) {        res.setResponseMessage("Error clearing queue:" + queueName);                return "Error clearing queue " + queueName + ", message:" + ex.getMessage();    } finally {        Utils.close(consumer, LOGGER);    }    return retVal;}
1
private TextMessage createMessage() throws JMSException
{    if (session == null) {        throw new IllegalStateException("Session may not be null while creating message");    }    TextMessage msg = session.createTextMessage();    msg.setText(getContent());    addJMSProperties(msg);    return msg;}
0
private void addJMSProperties(TextMessage msg) throws JMSException
{    Utils.addJMSProperties(msg, getJMSProperties().getJmsPropertysAsMap());}
0
public JMSProperties getJMSProperties()
{    Object o = getProperty(JMS_PROPERTIES).getObjectValue();    JMSProperties jmsProperties = null;        if (o instanceof Arguments) {        jmsProperties = Utils.convertArgumentsToJmsProperties((Arguments) o);    } else {        jmsProperties = (JMSProperties) o;    }    if (jmsProperties == null) {        jmsProperties = new JMSProperties();        setJMSProperties(jmsProperties);    }    return jmsProperties;}
0
public void setJMSProperties(JMSProperties jmsProperties)
{    setProperty(new TestElementProperty(JMS_PROPERTIES, jmsProperties));}
0
public Arguments getJNDIProperties()
{    return getArguments(JMSSampler.JNDI_PROPERTIES);}
0
public void setJNDIProperties(Arguments args)
{    setProperty(new TestElementProperty(JMSSampler.JNDI_PROPERTIES, args));}
0
public String getQueueConnectionFactory()
{    return getPropertyAsString(QUEUE_CONNECTION_FACTORY_JNDI);}
0
public void setQueueConnectionFactory(String qcf)
{    setProperty(QUEUE_CONNECTION_FACTORY_JNDI, qcf);}
0
public String getSendQueue()
{    return getPropertyAsString(SEND_QUEUE);}
0
public void setSendQueue(String name)
{    setProperty(SEND_QUEUE, name);}
0
public String getReceiveQueue()
{    return getPropertyAsString(RECEIVE_QUEUE);}
0
public void setReceiveQueue(String name)
{    setProperty(RECEIVE_QUEUE, name);}
0
public String getContent()
{    return getPropertyAsString(XML_DATA);}
0
public void setContent(String content)
{    setProperty(XML_DATA, content);}
0
public boolean isOneway()
{    return COMMUNICATION_STYLE.ONE_WAY.value == getPropertyAsInt(JMS_COMMUNICATION_STYLE);}
0
public boolean isRead()
{    return COMMUNICATION_STYLE.READ.value == getPropertyAsInt(JMS_COMMUNICATION_STYLE);}
0
public boolean isBrowse()
{    return COMMUNICATION_STYLE.BROWSE.value == getPropertyAsInt(JMS_COMMUNICATION_STYLE);}
0
public boolean isClearQueue()
{    return COMMUNICATION_STYLE.CLEAR.value == getPropertyAsInt(JMS_COMMUNICATION_STYLE);}
0
public boolean isNonPersistent()
{    return getPropertyAsBoolean(IS_NON_PERSISTENT);}
0
public boolean isUseReqMsgIdAsCorrelId()
{    return getPropertyAsBoolean(USE_REQ_MSGID_AS_CORRELID);}
0
public boolean isUseResMsgIdAsCorrelId()
{    return getPropertyAsBoolean(USE_RES_MSGID_AS_CORRELID, USE_RES_MSGID_AS_CORRELID_DEFAULT);}
0
public String getInitialContextFactory()
{    return getPropertyAsString(JMSSampler.JNDI_INITIAL_CONTEXT_FACTORY);}
0
public String getContextProvider()
{    return getPropertyAsString(JMSSampler.JNDI_CONTEXT_PROVIDER_URL);}
0
public int getCommunicationstyle()
{    JMeterProperty prop = getProperty(JMS_COMMUNICATION_STYLE);    return Integer.parseInt(prop.getStringValue());}
0
public String getCommunicationstyleString()
{    return getPropertyAsString(JMS_COMMUNICATION_STYLE);}
0
public void setCommunicationstyle(int communicationStyle)
{    setProperty(new IntegerProperty(JMS_COMMUNICATION_STYLE, communicationStyle));}
0
public void setIsOneway(boolean isOneway)
{    setProperty(new IntegerProperty(JMS_COMMUNICATION_STYLE, isOneway ? COMMUNICATION_STYLE.ONE_WAY.value : COMMUNICATION_STYLE.REQUEST_REPLY.value));}
0
public void setNonPersistent(boolean value)
{    setProperty(new BooleanProperty(IS_NON_PERSISTENT, value));}
0
public void setUseReqMsgIdAsCorrelId(boolean value)
{    setProperty(new BooleanProperty(USE_REQ_MSGID_AS_CORRELID, value));}
0
public void setUseResMsgIdAsCorrelId(boolean value)
{    setProperty(USE_RES_MSGID_AS_CORRELID, value, USE_RES_MSGID_AS_CORRELID_DEFAULT);}
0
public String toString()
{    return getQueueConnectionFactory() + ", queue: " + getSendQueue();}
0
public void threadStarted()
{    logThreadStart();    thrown = null;    try {        context = getInitialContext();        Object obj = context.lookup(getQueueConnectionFactory());        if (!(obj instanceof QueueConnectionFactory)) {            String msg = "QueueConnectionFactory expected, but got " + (obj != null ? obj.getClass().getName() : "null");                        throw new IllegalStateException(msg);        }        QueueConnectionFactory factory = (QueueConnectionFactory) obj;        sendQueue = (Queue) context.lookup(getSendQueue());        if (!useTemporyQueue()) {            receiveQueue = (Queue) context.lookup(getReceiveQueue());            receiverThread = Receiver.createReceiver(factory, receiveQueue, Utils.getFromEnvironment(context, Context.SECURITY_PRINCIPAL), Utils.getFromEnvironment(context, Context.SECURITY_CREDENTIALS), isUseResMsgIdAsCorrelId(), getJMSSelector());        }        String principal = null;        String credentials = null;        if (USE_SECURITY_PROPERTIES) {            principal = Utils.getFromEnvironment(context, Context.SECURITY_PRINCIPAL);            credentials = Utils.getFromEnvironment(context, Context.SECURITY_CREDENTIALS);        }        if (principal != null && credentials != null) {            connection = factory.createQueueConnection(principal, credentials);        } else {            connection = factory.createQueueConnection();        }        session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);                if (!(isBrowse() || isRead() || isClearQueue())) {            if (isOneway()) {                producer = session.createSender(sendQueue);                if (isNonPersistent()) {                    producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);                }                producer.setPriority(Integer.parseInt(getPriority()));                producer.setTimeToLive(Long.parseLong(getExpiration()));            } else {                if (useTemporyQueue()) {                    executor = new TemporaryQueueExecutor(session, sendQueue, getTimeoutAsInt());                } else {                    producer = session.createSender(sendQueue);                    executor = new FixedQueueExecutor(producer, getTimeoutAsInt(), isUseReqMsgIdAsCorrelId());                }            }        }                connection.start();            } catch (Exception | NoClassDefFoundError e) {        thrown = e;            }}
1
private Context getInitialContext() throws NamingException
{    Hashtable<String, String> table = new Hashtable<>();    if (getInitialContextFactory() != null && getInitialContextFactory().trim().length() > 0) {                table.put(Context.INITIAL_CONTEXT_FACTORY, getInitialContextFactory());    }    if (getContextProvider() != null && getContextProvider().trim().length() > 0) {                table.put(Context.PROVIDER_URL, getContextProvider());    }    Map<String, String> map = getArguments(JMSSampler.JNDI_PROPERTIES).getArgumentsAsMap();    if (LOGGER.isDebugEnabled()) {        if (map.isEmpty()) {                    } else {                    }    }    for (Map.Entry<String, String> me : map.entrySet()) {        table.put(me.getKey(), me.getValue());    }    Context initialContext = new InitialContext(table);    if (LOGGER.isDebugEnabled()) {        printEnvironment(initialContext);    }    return initialContext;}
1
private void printEnvironment(Context context) throws NamingException
{    try {        Hashtable<?, ?> env = context.getEnvironment();        if (env != null) {                        for (Map.Entry<?, ?> entry : env.entrySet()) {                            }        } else {                    }    } catch (javax.naming.OperationNotSupportedException ex) {                    }}
1
private void logThreadStart()
{    if (LOGGER.isDebugEnabled()) {                                                    }}
1
private int getTimeoutAsInt()
{    String propAsString = getPropertyAsString(TIMEOUT);    if (StringUtils.isEmpty(propAsString)) {        return DEFAULT_TIMEOUT;    } else {        return Integer.parseInt(propAsString);    }}
0
public String getTimeout()
{    return getPropertyAsString(TIMEOUT, DEFAULT_TIMEOUT_STRING);}
0
public String getExpiration()
{    String expiration = getPropertyAsString(JMS_EXPIRATION);    if (expiration.length() == 0) {        return Utils.DEFAULT_NO_EXPIRY;    } else {        return expiration;    }}
0
public String getPriority()
{    String priority = getPropertyAsString(JMS_PRIORITY);    if (priority.length() == 0) {        return Utils.DEFAULT_PRIORITY_4;    } else {        return priority;    }}
0
public void threadFinished()
{        if (context != null) {        try {            context.close();        } catch (NamingException ignored) {                }    }    if (executor != null) {        try {            executor.close();        } catch (JMSException e) {                    }    }    Utils.close(session, LOGGER);    Utils.close(connection, LOGGER);    if (receiverThread != null) {        receiverThread.deactivate();    }}
1
private boolean useTemporyQueue()
{    String recvQueue = getReceiveQueue();    return recvQueue == null || recvQueue.trim().length() == 0;}
0
public void setArguments(Arguments args)
{    setProperty(new TestElementProperty(JMSSampler.JMS_PROPERTIES, args));}
0
public Arguments getArguments(String name)
{    return (Arguments) getProperty(name).getObjectValue();}
0
public void setTimeout(String s)
{    setProperty(JMSSampler.TIMEOUT, s);}
0
public void setPriority(String s)
{    setProperty(JMSSampler.JMS_PRIORITY, s, Utils.DEFAULT_PRIORITY_4);}
0
public void setExpiration(String s)
{    setProperty(JMSSampler.JMS_EXPIRATION, s, Utils.DEFAULT_NO_EXPIRY);}
0
public String getJMSSelector()
{    return getPropertyAsString(JMSSampler.JMS_SELECTOR, JMS_SELECTOR_DEFAULT);}
0
public void setJMSSelector(String selector)
{    setProperty(JMSSampler.JMS_SELECTOR, selector, JMS_SELECTOR_DEFAULT);}
0
public String getNumberOfSamplesToAggregate()
{    return getPropertyAsString(JMSSampler.JMS_NUMBEROFSAMPLES, JMS_NUMBEROFSAMPLES_DEFAULT);}
0
public void setNumberOfSamplesToAggregate(String selector)
{    setProperty(JMSSampler.JMS_NUMBEROFSAMPLES, selector, JMS_NUMBEROFSAMPLES_DEFAULT);}
0
private int getNumberOfSamplesToAggregateAsInt()
{    int val = 1;    try {        val = getPropertyAsInt(JMS_NUMBEROFSAMPLES);    } catch (Exception e) {                if (LOGGER.isDebugEnabled()) {                    }        val = 1;    }    if (val < 1) {        val = 1;    }    return val;}
1
public void setInitialContextFactory(String string)
{    setProperty(JNDI_INITIAL_CONTEXT_FACTORY, string);}
0
public void setContextProvider(String string)
{    setProperty(JNDI_CONTEXT_PROVIDER_URL, string);}
0
 void setReply(Object reply)
{    this.reply = reply;}
0
public Object getReply()
{    return reply;}
0
public Object getRequest()
{    return request;}
0
 boolean hasReply()
{    return reply != null;}
0
public String toString()
{    return "request=" + request + ", reply=" + reply;}
0
public CountDownLatch getLatch()
{    return latch;}
0
public static MessageAdmin getAdmin()
{    return SINGLETON;}
0
public void putRequest(String id, Message request, CountDownLatch latch)
{        table.put(id, new PlaceHolder(request, latch));}
1
public void putReply(String id, Message reply)
{    PlaceHolder holder = table.get(id);        if (holder != null) {        holder.setReply(reply);        CountDownLatch latch = holder.getLatch();        if (log.isDebugEnabled()) {                    }        latch.countDown();        if (log.isDebugEnabled()) {                    }    } else {        if (log.isDebugEnabled()) {                    }    }}
1
public Message get(String id)
{    PlaceHolder holder = table.remove(id);        if (holder == null || !holder.hasReply()) {            }    return holder == null ? null : (Message) holder.getReply();}
1
public static String[] getSupportedEncodings()
{        return Stream.concat(NO_ENCODING.stream(), Arrays.stream(StandardCharsets.class.getDeclaredFields()).filter(f -> Modifier.isStatic(f.getModifiers()) && Modifier.isPublic(f.getModifiers()) && f.getType() == Charset.class).map(f -> {        try {            return (Charset) f.get(null);        } catch (IllegalArgumentException | IllegalAccessException e) {            throw new RuntimeException(e);        }    }).map(Charset::displayName).sorted()).toArray(String[]::new);}
0
public void testStarted(String test)
{    testStarted();}
0
public void testEnded(String host)
{    testEnded();}
0
public void testEnded()
{        ClientPool.clearClient();    InitialContextFactory.close();}
1
public void testStarted()
{}
0
private void initClient() throws JMSException, NamingException
{    configureIsReconnectErrorCode();    publisher = new Publisher(getUseJNDIPropertiesAsBoolean(), getJNDIInitialContextFactory(), getProviderUrl(), getConnectionFactory(), getDestination(), isUseAuth(), getUsername(), getPassword(), isDestinationStatic());    ClientPool.addClient(publisher);    }
1
public SampleResult sample()
{    String configChoice = getConfigChoice();    if (fileCache == null) {        fileCache = buildCache(configChoice);    }    SampleResult result = new SampleResult();    result.setSampleLabel(getName());        result.setSuccessful(false);        result.setResponseCode("000");    if (publisher == null) {        try {            initClient();        } catch (JMSException | NamingException e) {            result.sampleStart();            result.sampleEnd();            handleError(result, e, false);            return result;        }    }    StringBuilder buffer = new StringBuilder();    StringBuilder propBuffer = new StringBuilder();    int loop = getIterationCount();    result.sampleStart();    String type = getMessageChoice();    try {        Map<String, Object> msgProperties = getJMSProperties().getJmsPropertysAsMap();        int deliveryMode = getUseNonPersistentDelivery() ? DeliveryMode.NON_PERSISTENT : DeliveryMode.PERSISTENT;        int priority = Integer.parseInt(getPriority());        long expiration = Long.parseLong(getExpiration());        for (int idx = 0; idx < loop; idx++) {            Message msg;            if (JMSPublisherGui.TEXT_MSG_RSC.equals(type)) {                String tmsg = getRenderedContent(String.class, TEXT_FILE_EXTS);                msg = publisher.publish(tmsg, getDestination(), msgProperties, deliveryMode, priority, expiration);                buffer.append(tmsg);            } else if (JMSPublisherGui.MAP_MSG_RSC.equals(type)) {                @SuppressWarnings("unchecked")                Map<String, Object> map = getRenderedContent(Map.class, TEXT_FILE_EXTS);                msg = publisher.publish(map, getDestination(), msgProperties, deliveryMode, priority, expiration);            } else if (JMSPublisherGui.OBJECT_MSG_RSC.equals(type)) {                Serializable omsg = getRenderedContent(Serializable.class, TEXT_FILE_EXTS);                msg = publisher.publish(omsg, getDestination(), msgProperties, deliveryMode, priority, expiration);            } else if (JMSPublisherGui.BYTES_MSG_RSC.equals(type)) {                byte[] bmsg = getRenderedContent(byte[].class, BIN_FILE_EXTS);                msg = publisher.publish(bmsg, getDestination(), msgProperties, deliveryMode, priority, expiration);            } else {                throw new JMSException(type + " is not recognised");            }            Utils.messageProperties(propBuffer, msg);        }        result.setResponseCodeOK();        result.setResponseMessage(loop + " messages published");        result.setSuccessful(true);        result.setSamplerData(buffer.toString());        result.setSampleCount(loop);        result.setRequestHeaders(propBuffer.toString());    } catch (JMSException e) {        handleError(result, e, true);    } catch (Exception e) {        handleError(result, e, false);    } finally {        result.sampleEnd();    }    return result;}
0
private void handleError(SampleResult result, Exception e, boolean checkForReconnect)
{    result.setSuccessful(false);    result.setResponseMessage(e.toString());    if (e instanceof JMSException) {        JMSException jms = (JMSException) e;        String errorCode = Optional.ofNullable(jms.getErrorCode()).orElse("");        if (checkForReconnect && publisher != null && getIsReconnectErrorCode().test(errorCode)) {            ClientPool.removeClient(publisher);            IOUtils.closeQuietly(publisher);            publisher = null;        }        result.setResponseCode(errorCode);    }    StringWriter writer = new StringWriter();        e.printStackTrace(new PrintWriter(writer));        result.setResponseData(writer.toString(), "UTF-8");}
0
protected static Cache<Object, Object> buildCache(String configChoice)
{    Caffeine<Object, Object> cacheBuilder = Caffeine.newBuilder();    switch(configChoice) {        case JMSPublisherGui.USE_FILE_RSC:            cacheBuilder.maximumSize(1);            break;        default:            cacheBuilder.expireAfterWrite(0, TimeUnit.MILLISECONDS).maximumSize(0);    }    return cacheBuilder.build();}
0
private String getFilePath(String... ext)
{    switch(getConfigChoice()) {        case JMSPublisherGui.USE_FILE_RSC:            return getInputFile();        case JMSPublisherGui.USE_RANDOM_RSC:            return FSERVER.getRandomFile(getRandomPath(), ext).getAbsolutePath();        default:            throw new IllegalArgumentException("Type of input not handled:" + getConfigChoice());    }}
0
private T getRenderedContent(Class<T> type, String[] fileExts)
{    MessageRenderer<T> renderer = Renderers.getInstance(type);    if (getConfigChoice().equals(JMSPublisherGui.USE_TEXT_RSC)) {        return renderer.getValueFromText(getTextMessage());    } else {        return renderer.getValueFromFile(getFilePath(fileExts), getFileEncoding(), !isRaw(), fileCache);    }}
0
private boolean isRaw()
{    return RAW_DATA.equals(getFileEncoding());}
0
public void setConfigChoice(String choice)
{    setProperty(CONFIG_CHOICE, choice);}
0
public String getConfigChoice()
{        String config = getPropertyAsString(CONFIG_CHOICE);    if (config.equals(USE_FILE_LOCALNAME) || config.equals(JMSPublisherGui.USE_FILE_RSC)) {        return JMSPublisherGui.USE_FILE_RSC;    }    if (config.equals(USE_RANDOM_LOCALNAME) || config.equals(JMSPublisherGui.USE_RANDOM_RSC)) {        return JMSPublisherGui.USE_RANDOM_RSC;    }        return config;}
0
public void setMessageChoice(String choice)
{    setProperty(MESSAGE_CHOICE, choice);}
0
public String getMessageChoice()
{    return getPropertyAsString(MESSAGE_CHOICE);}
0
public void setInputFile(String file)
{    setProperty(INPUT_FILE, file);}
0
public String getInputFile()
{    return getPropertyAsString(INPUT_FILE);}
0
public void setRandomPath(String path)
{    setProperty(RANDOM_PATH, path);}
0
public String getRandomPath()
{    return getPropertyAsString(RANDOM_PATH);}
0
public void setTextMessage(String message)
{    setProperty(TEXT_MSG, message);}
0
public String getTextMessage()
{    return getPropertyAsString(TEXT_MSG);}
0
public String getExpiration()
{    String expiration = getPropertyAsString(JMS_EXPIRATION);    if (expiration.length() == 0) {        return Utils.DEFAULT_NO_EXPIRY;    } else {        return expiration;    }}
0
public String getPriority()
{    String priority = getPropertyAsString(JMS_PRIORITY);    if (priority.length() == 0) {        return Utils.DEFAULT_PRIORITY_4;    } else {        return priority;    }}
0
public void setPriority(String s)
{        if (Utils.DEFAULT_PRIORITY_4.equals(s)) {                s = "";    }        setProperty(JMS_PRIORITY, s);}
0
public void setExpiration(String s)
{        if (Utils.DEFAULT_NO_EXPIRY.equals(s)) {                s = "";    }        setProperty(JMS_EXPIRATION, s);}
0
public void setUseNonPersistentDelivery(boolean value)
{    setProperty(NON_PERSISTENT_DELIVERY, value, false);}
0
public boolean getUseNonPersistentDelivery()
{    return getPropertyAsBoolean(NON_PERSISTENT_DELIVERY, false);}
0
public JMSProperties getJMSProperties()
{    Object o = getProperty(JMS_PROPERTIES).getObjectValue();    JMSProperties jmsProperties = null;        if (o instanceof Arguments) {        jmsProperties = Utils.convertArgumentsToJmsProperties((Arguments) o);    } else {        jmsProperties = (JMSProperties) o;    }    if (jmsProperties == null) {        jmsProperties = new JMSProperties();        setJMSProperties(jmsProperties);    }    return jmsProperties;}
0
public void setJMSProperties(JMSProperties jmsProperties)
{    setProperty(new TestElementProperty(JMS_PROPERTIES, jmsProperties));}
0
public String getFileEncoding()
{    return getPropertyAsString(JMS_FILE_ENCODING, RAW_DATA);}
0
public void setFileEncoding(String fileEncoding)
{    setProperty(JMS_FILE_ENCODING, fileEncoding, RAW_DATA);}
0
public static Receiver createReceiver(ConnectionFactory factory, Destination receiveQueue, String principal, String credentials, boolean useResMsgIdAsCorrelId, String jmsSelector) throws JMSException
{    Receiver receiver = new Receiver(factory, receiveQueue, principal, credentials, useResMsgIdAsCorrelId, jmsSelector);    Thread thread = new Thread(receiver, Thread.currentThread().getName() + "-JMS-Receiver");    thread.start();    return receiver;}
0
public void run()
{    active = true;    Message reply;    while (active) {        reply = null;        try {            reply = consumer.receive(5000);            if (reply != null) {                String messageKey;                final MessageAdmin admin = MessageAdmin.getAdmin();                if (useResMsgIdAsCorrelId) {                    messageKey = reply.getJMSMessageID();                    synchronized (admin) {                                                admin.putReply(messageKey, reply);                    }                } else {                    messageKey = reply.getJMSCorrelationID();                    if (messageKey == null) {                                                                    } else {                        synchronized (admin) {                            admin.putReply(messageKey, reply);                        }                    }                }            }        } catch (JMSException e1) {                    }    }    Utils.close(consumer, log);    Utils.close(session, log);    Utils.close(conn, log);}
1
public void deactivate()
{    active = false;}
0
public byte[] getValueFromText(String text)
{    throw new UnsupportedOperationException(format("Type of input not handled: %s", JMSPublisherGui.USE_TEXT_RSC));}
0
public byte[] getValueFromFile(String filename, String encoding, boolean hasVariable, Cache<Object, Object> cache)
{    byte[] bytes;    if (hasVariable) {        String stringValue = delegate.getValueFromFile(filename, encoding, hasVariable, cache);        try {            bytes = stringValue.getBytes(encoding);        } catch (UnsupportedEncodingException e) {            throw new RuntimeException("Unable to read " + filename, e);        }    } else {        bytes = (byte[]) cache.get(filename, _p -> getContent(filename));    }    return bytes;}
0
 byte[] getContent(String filename)
{    try {        return Files.readAllBytes(Paths.get(filename));    } catch (IOException e) {        throw new RuntimeException(format("Can't read content of %s", filename), e);    }}
0
public String getFilename()
{    return filename;}
0
public String getEncoding()
{    return encoding;}
0
public int hashCode()
{    return Objects.hashCode(filename);}
0
public boolean equals(Object obj)
{    if (obj == this) {        return true;    }    if (!(obj instanceof FileKey)) {        return false;    }    FileKey that = (FileKey) obj;    return Objects.equals(this.filename, that.filename);}
0
public Map<String, Object> getValueFromText(String text)
{    Map<String, Object> m = new HashMap<>();    String[] lines = text.split("\n");    for (String line : lines) {        String[] parts = line.split(",", 3);        if (parts.length != 3) {            throw new IllegalArgumentException("line must have 3 parts: " + line);        }        String name = parts[0];        String type = parts[1];        if (!type.contains(".")) {                        type = "java.lang." + type;        }        String value = parts[2];        Object obj;        if (type.equals("java.lang.String")) {            obj = value;        } else {            try {                Class<?> clazz = Class.forName(type);                Method method = clazz.getMethod("valueOf", String.class);                obj = method.invoke(clazz, value);            } catch (ClassNotFoundException | NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {                throw new RuntimeException(String.format("Can't convert %s to object", line), e);            }        }        m.put(name, obj);    }    return m;}
0
public Map<String, Object> getValueFromFile(String filename, String encoding, boolean hasVariable, Cache<Object, Object> cache)
{    String text = delegate.getValueFromFile(filename, encoding, hasVariable, cache);    return getValueFromText(text);}
0
public Serializable getValueFromFile(String filename, String encoding, boolean hasVariable, Cache<Object, Object> cache)
{    Serializable value;    if (hasVariable) {        value = getInterpretedContent(filename, encoding, hasVariable, cache);    } else {        value = (Serializable) cache.get(filename, p -> getContent(filename));    }    return value;}
0
public Serializable getValueFromText(final String xmlMessage)
{    Serializable readObject = null;    try {        XStream xstream = JMeterUtils.createXStream();        readObject = (Serializable) xstream.fromXML(xmlMessage, readObject);    } catch (Exception e) {        throw new IllegalStateException("Unable to load object instance from text", e);    }    return readObject;}
0
protected Serializable getInterpretedContent(String filename, final String pEncoding, boolean hasVariable, Cache<Object, Object> cache)
{    String encoding = pEncoding;    if (PublisherSampler.DEFAULT_ENCODING.equals(encoding)) {        encoding = findEncoding(filename);    }    String stringValue = delegate.getValueFromFile(filename, encoding, hasVariable, cache);    return (Serializable) JMeterUtils.createXStream().fromXML(stringValue);}
0
protected String findEncoding(String filename)
{    XMLInputFactory factory = XMLInputFactory.newInstance();    try (FileInputStream input = new FileInputStream(filename)) {        XMLStreamReader reader = factory.createXMLStreamReader(input);        return reader.getEncoding();    } catch (IOException | XMLStreamException e) {        throw new IllegalArgumentException(format("Unable to read %s", filename), e);    }}
0
protected Serializable getContent(String filename)
{    return (Serializable) JMeterUtils.createXStream().fromXML(new File(filename));}
0
public static RendererFactory getInstance()
{    return INSTANCE;}
0
public TextMessageRenderer getText()
{    return text;}
0
public BinaryMessageRenderer getBinary()
{    return binary;}
0
public ObjectMessageRenderer getObject()
{    return object;}
0
public MapMessageRenderer getMap()
{    return map;}
0
public MessageRenderer<T> getInstance(Class<T> type)
{    return (MessageRenderer<T>) renderers.get(type);}
0
public static MessageRenderer<String> getText()
{    return RendererFactory.getInstance().getText();}
0
public static MessageRenderer<byte[]> getBinary()
{    return RendererFactory.getInstance().getBinary();}
0
public static MessageRenderer<Serializable> getObject()
{    return RendererFactory.getInstance().getObject();}
0
public static MessageRenderer<Map<String, Object>> getMap()
{    return RendererFactory.getInstance().getMap();}
0
public static MessageRenderer<T> getInstance(Class<T> type)
{    return RendererFactory.getInstance().getInstance(type);}
0
public String getValueFromText(String text)
{    return text;}
0
public String getValueFromFile(String filename, String encoding, boolean hasVariable, Cache<Object, Object> cache)
{    String text = (String) cache.get(new FileKey(filename, encoding), key -> getContent((FileKey) key));    if (hasVariable) {        text = new CompoundVariable(text).execute();    }    return text;}
0
 String getContent(FileKey key)
{    return new TextFile(key.getFilename(), key.getEncoding()).getText();}
0
private void initListenerClient() throws JMSException, NamingException
{    SUBSCRIBER = new ReceiveSubscriber(0, getUseJNDIPropertiesAsBoolean(), getJNDIInitialContextFactory(), getProviderUrl(), getConnectionFactory(), getDestination(), getDurableSubscriptionId(), getClientId(), getJmsSelector(), isUseAuth(), getUsername(), getPassword());    }
1
private void initReceiveClient() throws NamingException, JMSException
{    SUBSCRIBER = new ReceiveSubscriber(getUseJNDIPropertiesAsBoolean(), getJNDIInitialContextFactory(), getProviderUrl(), getConnectionFactory(), getDestination(), getDurableSubscriptionId(), getClientId(), getJmsSelector(), isUseAuth(), getUsername(), getPassword());    }
1
public SampleResult sample()
{        if (!isDestinationStatic()) {        threadStarted(true);    }    SampleResult result = new SampleResult();    result.setDataType(SampleResult.TEXT);    result.setSampleLabel(getName());    result.sampleStart();    if (exceptionDuringInit != null) {        result.sampleEnd();        result.setSuccessful(false);        result.setResponseCode("000");        result.setResponseMessage(exceptionDuringInit.toString());        handleErrorAndAddTemporize(true);        return result;    }    if (stopBetweenSamples) {                try {            SUBSCRIBER.start();        } catch (JMSException e) {                    }    }    StringBuilder buffer = new StringBuilder();    StringBuilder propBuffer = new StringBuilder();    int loop = getIterationCount();    int read = 0;    long until = 0L;    long now = System.currentTimeMillis();    if (timeout > 0) {        until = timeout + now;    }    while (!interrupted && (until == 0 || now < until) && read < loop) {        Message msg;        try {            msg = SUBSCRIBER.getMessage(calculateWait(until, now));            if (msg != null) {                read++;                extractContent(buffer, propBuffer, msg, read == loop);            }        } catch (JMSException e) {            String errorCode = Optional.ofNullable(e.getErrorCode()).orElse("");                        handleErrorAndAddTemporize(getIsReconnectErrorCode().test(errorCode));        }        now = System.currentTimeMillis();    }    result.sampleEnd();    if (getReadResponseAsBoolean()) {                result.setResponseData(buffer.toString().getBytes());    } else {        result.setBytes((long) buffer.toString().length());    }    result.setResponseHeaders(propBuffer.toString());    if (read == 0) {                result.setResponseCode("404");        result.setSuccessful(false);    } else if (read < loop) {                        result.setResponseCode("500");        result.setSuccessful(false);    } else {        result.setResponseCodeOK();        result.setSuccessful(true);    }    result.setResponseMessage(read + " message(s) received successfully of " + loop + " expected");    result.setSamplerData(loop + " messages expected");    result.setSampleCount(read);    if (stopBetweenSamples) {        try {            SUBSCRIBER.stop();        } catch (JMSException e) {                    }    }        if (!isDestinationStatic()) {        threadFinished(true);    }    return result;}
1
private void handleErrorAndAddTemporize(boolean reconnect)
{    if (reconnect) {        cleanup();        initClient();    }    if (!reconnect || exceptionDuringInit != null) {        try {            long pause = getPauseBetweenErrorsAsLong();            if (pause > 0) {                Thread.sleep(pause);            }        } catch (InterruptedException ie) {                        Thread.currentThread().interrupt();            interrupted = true;        }    }}
1
private void cleanup()
{    IOUtils.closeQuietly(SUBSCRIBER);}
0
private long calculateWait(long until, long now)
{    if (until == 0) {                return DEFAULT_WAIT;    }        long wait = until - now;    return wait > DEFAULT_WAIT ? DEFAULT_WAIT : wait;}
0
private void extractContent(StringBuilder buffer, StringBuilder propBuffer, Message msg, boolean isLast)
{    if (msg != null) {        try {            if (msg instanceof TextMessage) {                buffer.append(((TextMessage) msg).getText());            } else if (msg instanceof ObjectMessage) {                ObjectMessage objectMessage = (ObjectMessage) msg;                if (objectMessage.getObject() != null) {                    buffer.append(objectMessage.getObject().getClass());                } else {                    buffer.append("object is null");                }            } else if (msg instanceof BytesMessage) {                BytesMessage bytesMessage = (BytesMessage) msg;                buffer.append(bytesMessage.getBodyLength() + " bytes received in BytesMessage");            } else if (msg instanceof MapMessage) {                MapMessage mapm = (MapMessage) msg;                                @SuppressWarnings("unchecked")                Enumeration<String> enumb = mapm.getMapNames();                while (enumb.hasMoreElements()) {                    String name = enumb.nextElement();                    Object obj = mapm.getObject(name);                    buffer.append(name);                    buffer.append(",");                    buffer.append(obj.getClass().getCanonicalName());                    buffer.append(",");                    buffer.append(obj);                    buffer.append("\n");                }            }            Utils.messageProperties(propBuffer, msg);            if (!isLast && !StringUtils.isEmpty(separator)) {                propBuffer.append(separator);                buffer.append(separator);            }        } catch (JMSException e) {                    }    }}
1
public void threadStarted()
{    configureIsReconnectErrorCode();        if (isDestinationStatic() || START_ON_SAMPLE) {        timeout = getTimeoutAsLong();        interrupted = false;        exceptionDuringInit = null;        useReceive = getClientChoice().equals(JMSSubscriberGui.RECEIVE_RSC);        stopBetweenSamples = isStopBetweenSamples();        setupSeparator();        initClient();    }}
0
private void initClient()
{    exceptionDuringInit = null;    try {        if (useReceive) {            initReceiveClient();        } else {            initListenerClient();        }        if (!stopBetweenSamples) {                                    SUBSCRIBER.start();        }    } catch (NamingException | JMSException e) {        exceptionDuringInit = e;    }    if (exceptionDuringInit != null) {            }}
1
public void threadStarted(boolean wts)
{    if (wts) {                START_ON_SAMPLE = true;    }    threadStarted();}
0
public void threadFinished()
{    if (SUBSCRIBER != null) {                cleanup();    }}
0
public void threadFinished(boolean wts)
{    if (wts) {                START_ON_SAMPLE = false;    }    threadFinished();}
0
public boolean interrupt()
{    boolean oldvalue = interrupted;        interrupted = true;    return !oldvalue;}
0
public void setClientChoice(String choice)
{    setProperty(CLIENT_CHOICE, choice);}
0
public String getClientChoice()
{    String choice = getPropertyAsString(CLIENT_CHOICE);        if (choice.equals(RECEIVE_STR)) {        choice = JMSSubscriberGui.RECEIVE_RSC;    } else if (!choice.equals(JMSSubscriberGui.RECEIVE_RSC)) {        choice = JMSSubscriberGui.ON_MESSAGE_RSC;    }    return choice;}
0
public String getTimeout()
{    return getPropertyAsString(TIMEOUT, TIMEOUT_DEFAULT);}
0
public long getTimeoutAsLong()
{    return getPropertyAsLong(TIMEOUT, 0L);}
0
public void setTimeout(String timeout)
{    setProperty(TIMEOUT, timeout, TIMEOUT_DEFAULT);}
0
public String getDurableSubscriptionId()
{    return getPropertyAsString(DURABLE_SUBSCRIPTION_ID);}
0
public String getClientId()
{    return getPropertyAsString(CLIENT_ID, CLIENT_ID_DEFAULT);}
0
public String getJmsSelector()
{    return getPropertyAsString(JMS_SELECTOR, JMS_SELECTOR_DEFAULT);}
0
public void setDurableSubscriptionId(String durableSubscriptionId)
{    setProperty(DURABLE_SUBSCRIPTION_ID, durableSubscriptionId, DURABLE_SUBSCRIPTION_ID_DEFAULT);}
0
public void setClientID(String clientId)
{    setProperty(CLIENT_ID, clientId, CLIENT_ID_DEFAULT);}
0
public void setJmsSelector(String jmsSelector)
{    setProperty(JMS_SELECTOR, jmsSelector, JMS_SELECTOR_DEFAULT);}
0
public String getSeparator()
{    return getPropertyAsString(SEPARATOR, SEPARATOR_DEFAULT);}
0
public void setSeparator(String text)
{    setProperty(SEPARATOR, text, SEPARATOR_DEFAULT);}
0
public boolean isStopBetweenSamples()
{    return getPropertyAsBoolean(STOP_BETWEEN, false);}
0
public void setStopBetweenSamples(boolean selected)
{    setProperty(STOP_BETWEEN, selected, false);}
0
public void setPauseBetweenErrors(String pause)
{    setProperty(ERROR_PAUSE_BETWEEN, pause, ERROR_PAUSE_BETWEEN_DEFAULT);}
0
public String getPauseBetweenErrors()
{    return getPropertyAsString(ERROR_PAUSE_BETWEEN, ERROR_PAUSE_BETWEEN_DEFAULT);}
0
public long getPauseBetweenErrorsAsLong()
{    return getPropertyAsLong(ERROR_PAUSE_BETWEEN, DEFAULT_WAIT);}
0
public void testEnded()
{    InitialContextFactory.close();}
0
public void testEnded(String host)
{    testEnded();}
0
public void testStarted()
{    testStarted("");}
0
public void testStarted(String host)
{}
0
private void setupSeparator()
{    separator = getSeparator();    separator = separator.replace("\\t", "\t");    separator = separator.replace("\\n", "\n");    separator = separator.replace("\\r", "\r");}
0
private Object readResolve()
{    setupSeparator();    exceptionDuringInit = null;    return this;}
0
public Message sendAndReceive(Message request, int deliveryMode, int priority, long expiration) throws JMSException
{        return requestor.request(request, timeout);}
1
public void close() throws JMSException
{    requestor.close();}
0
public Message request(Message message) throws JMSException
{    return request(message, 0);}
0
public Message request(Message message, long timeout) throws JMSException
{    message.setJMSReplyTo(tempQueue);    sender.send(message);    return receiver.receive(timeout);}
0
public void close() throws JMSException
{    String queueName = tempQueue.getQueueName();    try {        sender.close();    } catch (Exception ex) {            }    try {        receiver.close();    } catch (Exception ex) {            }    try {        tempQueue.delete();    } catch (Exception ex) {            }}
1
public static void close(MessageConsumer closeable, Logger log)
{    if (closeable != null) {        try {            closeable.close();        } catch (JMSException e) {                    }    }}
1
public static void close(Session closeable, Logger log)
{    if (closeable != null) {        try {            closeable.close();        } catch (JMSException e) {                    }    }}
1
public static void close(Connection closeable, Logger log)
{    if (closeable != null) {        try {            closeable.close();        } catch (JMSException e) {                    }    }}
1
public static void close(MessageProducer closeable, Logger log)
{    if (closeable != null) {        try {            closeable.close();        } catch (JMSException e) {                    }    }}
1
public static String messageProperties(Message msg)
{    return messageProperties(new StringBuilder(), msg).toString();}
0
public static StringBuilder messageProperties(StringBuilder sb, Message msg)
{    requestHeaders(sb, msg);    sb.append("Properties:\n");    Enumeration<?> rme;    try {        rme = msg.getPropertyNames();        while (rme.hasMoreElements()) {            String name = (String) rme.nextElement();            sb.append(name).append('\t');            String value = msg.getStringProperty(name);            sb.append(value).append('\n');        }    } catch (JMSException e) {        sb.append("\nError: " + e.toString());    }    return sb;}
0
public static StringBuilder requestHeaders(StringBuilder sb, Message msg)
{    try {        sb.append("JMSCorrelationId ").append(msg.getJMSCorrelationID()).append('\n');        sb.append("JMSMessageId     ").append(msg.getJMSMessageID()).append('\n');        sb.append("JMSTimestamp     ").append(msg.getJMSTimestamp()).append('\n');        sb.append("JMSType          ").append(msg.getJMSType()).append('\n');        sb.append("JMSExpiration    ").append(msg.getJMSExpiration()).append('\n');        sb.append("JMSPriority      ").append(msg.getJMSPriority()).append('\n');        sb.append("JMSDestination   ").append(msg.getJMSDestination()).append('\n');    } catch (JMSException e) {        sb.append("\nError: " + e.toString());    }    return sb;}
0
public static Destination lookupDestination(Context context, String name) throws NamingException
{    Object o = context.lookup(name);    if (o instanceof Destination) {        return (Destination) o;    }    throw new NamingException("Found: " + name + "; expected Destination, but was: " + (o != null ? o.getClass().getName() : "null"));}
0
public static String getFromEnvironment(Context context, String key) throws NamingException
{    try {        Hashtable<?, ?> env = context.getEnvironment();        if (env != null) {            return (String) env.get(key);        } else {                        return null;        }    } catch (javax.naming.OperationNotSupportedException ex) {                        return null;    }}
1
public static Connection getConnection(Context ctx, String factoryName) throws JMSException, NamingException
{    Object objfac = null;    try {        objfac = ctx.lookup(factoryName);    } catch (NoClassDefFoundError e) {        throw new NamingException("Lookup failed: " + e.toString());    }    if (objfac instanceof javax.jms.ConnectionFactory) {        String username = getFromEnvironment(ctx, Context.SECURITY_PRINCIPAL);        if (username != null) {            String password = getFromEnvironment(ctx, Context.SECURITY_CREDENTIALS);            return ((javax.jms.ConnectionFactory) objfac).createConnection(username, password);        } else {            return ((javax.jms.ConnectionFactory) objfac).createConnection();        }    }    throw new NamingException("Expected javax.jms.ConnectionFactory, found " + (objfac != null ? objfac.getClass().getName() : "null"));}
0
public static void addJMSProperties(Message msg, Map<String, Object> map) throws JMSException
{    if (map == null) {        return;    }    for (Map.Entry<String, Object> me : map.entrySet()) {        String name = me.getKey();        Object value = me.getValue();        if (log.isDebugEnabled()) {                    }                if ("JMSCorrelationID".equalsIgnoreCase(name)) {                        msg.setJMSCorrelationID((String) value);        } else {            msg.setObjectProperty(name, value);        }    }}
1
public static JMSProperties convertArgumentsToJmsProperties(Arguments args)
{    JMSProperties jmsProperties = new JMSProperties();    Map<String, String> map = args.getArgumentsAsMap();    for (Map.Entry<String, String> entry : map.entrySet()) {        jmsProperties.addJmsProperty(entry.getKey(), entry.getValue());    }    return jmsProperties;}
0
public void initJMeter()
{    JMeterUtils.setLocale(new Locale("ignoreResources"));}
0
public void resetJMeter()
{    JMeterUtils.setLocale(Locale.ENGLISH);}
0
public void noopCache()
{    Cache<Object, Object> noopCache = PublisherSampler.buildCache(JMSPublisherGui.USE_RANDOM_RSC);    assertEquals(0, noopCache.estimatedSize());    String key = "key";    String val1 = "1st time";    assertSame(val1, noopCache.get(key, k -> val1));    String val2 = "2nd call";    assertSame(val2, noopCache.get(key, k -> val2));}
0
protected MessageRenderer<byte[]> getRenderer()
{    return render;}
0
public void getValueFromText()
{    Assertions.assertThrows(UnsupportedOperationException.class, () -> render.getValueFromText(""));}
0
public void testGetContent(String encoding) throws UnsupportedEncodingException, IOException
{    String value = "éè€";    byte[] expected = value.getBytes(encoding);    String filename = writeFile(encoding, expected);        byte[] actual = render.getContent(filename);    assertArrayEquals(expected, actual, "value: " + value);}
0
public void readNonExistingContent()
{    RuntimeException ex = Assertions.assertThrows(RuntimeException.class, () -> render.getContent("__file_that_may_not_exists_else_it_will_fail"));    MatcherAssert.assertThat(ex, allOf(hasMessage(containsString("Can't read content of __file_that_may_not_exists_else_it_will_fail")), hasCause(instanceOf(IOException.class))));}
0
public void getValueFromFile_withNoVar() throws IOException
{    String text = "éè€";    String fileName = writeFile("utf8.txt", text);    assertValueFromFile(text, fileName, true);    assertCacheContentInString(text);}
0
public void getValueFromFile_withOneVar(JMeterVariables vars) throws IOException
{    String fileName = writeFile("oneVar.txt", "${oneVar}");    String value = "éè€";    vars.put("oneVar", value);    assertValueFromFile(value, fileName, true);    assertCacheContentInString("${oneVar}");}
0
public void getValueFromFile_withInvalidEncoding()
{    RuntimeException ex = Assertions.assertThrows(RuntimeException.class, () -> render.getValueFromFile("utf8.txt", "banana", true, cache));    MatcherAssert.assertThat(ex, allOf(hasMessage(containsString("utf8.txt")), hasCause(instanceOf(UnsupportedEncodingException.class))));}
0
public void getValueFromFile_inRawMode() throws IOException
{    String text = "${oneVar}";    String fileName = writeFile("oneVar.txt", text);    assertValueFromFile(text, fileName, false);    assertCacheContentInBytes(text);}
0
protected void assertValueFromFile(String expected, String fileName, boolean hasVariable)
{    assertValueFromFile(actual -> assertBytesEquals(expected, actual), fileName, hasVariable);}
0
protected void assertCacheContentInBytes(String expected)
{    assertBytesEquals(expected, (byte[]) getFirstCachedValue());}
0
protected void assertCacheContentInString(String expected)
{    assertEquals(expected, getFirstCachedValue());}
0
protected void assertBytesEquals(String expected, byte[] actual)
{    assertArrayEquals(expected.getBytes(StandardCharsets.UTF_8), actual);}
0
protected Object getFirstCachedValue()
{    return cache.asMap().values().stream().findFirst().get();}
0
protected void assertValueFromFile(Consumer<T> assertion, String fileName, boolean hasVariable)
{    T actual = getRenderer().getValueFromFile(fileName, "UTF-8", hasVariable, cache);    assertion.accept(actual);}
0
protected String writeFile(String fileName, byte[] contents) throws IOException
{    Path filePath = tmpDir.resolve(fileName);    Files.write(filePath, contents);    return filePath.toString();}
0
protected String writeFile(String fileName, String text) throws IOException
{    return writeFile(fileName, text.getBytes(StandardCharsets.UTF_8));}
0
protected String writeFile(String fileName, String text, Charset charset) throws IOException
{    return writeFile(fileName, text.getBytes(charset));}
0
public ObjectMessageRenderer getRenderer()
{    return render;}
0
public void getValueFromText()
{    String text = "<org.apache.jmeter.protocol.jms.sampler.render.Person><name>Doe</name></org.apache.jmeter.protocol.jms.sampler.render.Person>";    Serializable object = render.getValueFromText(text);    assertObject(object, "Doe");}
0
private void assertObject(Serializable object, String name)
{    assertNotNull(object, "object");    assertEquals(Person.class, object.getClass(), "object.class");    Person p = (Person) object;    assertEquals(name, p.getName(), "object.name");}
0
public void getValueFromFile_inRawMode() throws IOException
{    String fileName = writeFile("object_doe.xml", "<org.apache.jmeter.protocol.jms.sampler.render.Person><name>Doe</name></org.apache.jmeter.protocol.jms.sampler.render.Person>");    assertValueFromFile(object -> {        assertObject(object, "Doe");        Person p = (Person) object;        assertSame(p, getFirstCachedValue(), "cache");    }, fileName, false);}
0
public void getValueFromFile_withForcedEncoding() throws IOException
{    String filename = writeFile("object_cp1252.xml", CP1252_SAFE_XML, Charset.forName("Cp1252"));    Serializable object = getRenderer().getValueFromFile(filename, "Cp1252", true, cache);    assertObject(object, "eéè€");    assertEquals(CP1252_SAFE_XML, getFirstCachedValue(), "cache");}
0
public void getValueFromFile_withDefaultEncodingAndNoProlog() throws IOException
{    String content = "<org.apache.jmeter.protocol.jms.sampler.render.Person><name>eéè€</name></org.apache.jmeter.protocol.jms.sampler.render.Person>";    String filename = writeFile("object_utf8.xml", content, StandardCharsets.UTF_8);    Serializable object = getRenderer().getValueFromFile(filename, PublisherSampler.DEFAULT_ENCODING, true, cache);    assertObject(object, "eéè€");    assertEquals(CP1252_SAFE_XML, getFirstCachedValue(), "cache");}
0
public void getValueFromFile_withDefaultEncodingAndProlog() throws IOException
{    String content = "<?xml version=\"1.0\" encoding=\"Windows-1252\"?>\n" + CP1252_SAFE_XML;    String filename = writeFile("object_prolog_cp1252.xml", content, Charset.forName("Cp1252"));    Serializable object = getRenderer().getValueFromFile(filename, PublisherSampler.DEFAULT_ENCODING, true, cache);    assertObject(object, "eéè€");    Person p = (Person) object;    assertEquals("eéè€", p.getName(), "object.name");    Object firstCachedValue = getFirstCachedValue();    assertEquals(content, convertLineEndingsToSystem(firstCachedValue), "cache");}
0
private String convertLineEndingsToSystem(Object firstCachedValue)
{    return firstCachedValue.toString().replaceAll("[\r\n]+", "\n");}
0
public String getName()
{    return name;}
0
public void setName(String name)
{    this.name = name;}
0
protected MessageRenderer<String> getRenderer()
{    return render;}
0
public void testGetContent(String encoding) throws UnsupportedEncodingException, IOException
{    String value = "éè€";    byte[] expected = value.getBytes(encoding);    String filename = writeFile(encoding, expected);        String actual = render.getContent(new FileKey(filename, encoding));    assertEquals(value, actual);}
0
public void getValueFromFileWithNoVar() throws IOException
{    String fileName = writeFile("noVar", "noVar");    assertValueFromFile("noVar", fileName, true);}
0
public void getValueFromFileWithOneVar(JMeterVariables vars) throws IOException
{    String fileName = writeFile("oneVar.txt", "${oneVar}");    vars.put("oneVar", "foobar");    assertValueFromFile("foobar", fileName, true);}
0
public void checkCache(JMeterVariables vars) throws IOException
{    String fileName = writeFile("oneVar.txt", "${oneVar}");    vars.put("oneVar", "foo");    assertValueFromFile("foo", fileName, true);    assertEquals("${oneVar}", getFirstCachedValue());    vars.put("oneVar", "bar");    assertValueFromFile("bar", fileName, true);    assertEquals("${oneVar}", getFirstCachedValue());}
0
public void checkNoVariable(JMeterVariables vars) throws IOException
{    String fileName = writeFile("oneVar.txt", "${oneVar}");    vars.put("oneVar", "RAW");    assertValueFromFile("${oneVar}", fileName, false);}
0
public void getValueFromText()
{    for (String text : Arrays.asList("a", null, "b", "")) {        assertSame(text, render.getValueFromText(text));    }}
0
protected void assertValueFromFile(String expected, String fileName, boolean hasVariable)
{    assertValueFromFile(actual -> assertEquals(expected, actual), fileName, hasVariable);}
0
 void setPackges(String[] pk)
{    this.pkgs = pk;}
0
private boolean include(String text)
{        if (pkgs.length == 0) {        return true;    }    for (String pkg : pkgs) {        if (text.startsWith(pkg)) {            return true;        }    }    return false;}
0
 String[] filterArray(List<String> items)
{    List<String> newList = new ArrayList<>();    for (String item : items) {        if (include(item)) {            newList.add(item);        }    }    if (!newList.isEmpty()) {        return newList.toArray(ArrayUtils.EMPTY_STRING_ARRAY);    } else {        return ArrayUtils.EMPTY_STRING_ARRAY;    }}
0
 int size()
{    return pkgs.length;}
0
public String getLabelResource()
{        return "junit_request";}
0
private void init()
{    setLayout(new BorderLayout(0, 5));    setBorder(makeBorder());    add(makeTitlePanel(), BorderLayout.NORTH);    add(createClassPanel(), BorderLayout.CENTER);}
0
private void setupClasslist(boolean initialize)
{    classnameCombo.removeAllItems();    methodName.removeAllItems();    try {        List<String> classList = new ArrayList<>();        if (initialize) {            synchronized (IS_INITILIAZED) {                if (IS_INITILIAZED.compareAndSet(false, true)) {                    annotatedTestClasses = ClassFinder.findAnnotatedClasses(SPATHS, new Class[] { Test.class }, false);                    junitTestClasses = ClassFinder.findClassesThatExtend(SPATHS, new Class[] { TestCase.class });                }                if (junit4.isSelected()) {                    classList = annotatedTestClasses;                } else {                    classList = junitTestClasses;                }            }        }        ClassFilter filter = new ClassFilter();                filter.setPackges(JOrphanUtils.split(filterpkg.getText(), ","));                String[] clist = filter.filterArray(classList);        for (String classStr : clist) {            classnameCombo.addItem(classStr);        }    } catch (IOException e) {            }}
1
private JPanel createClassPanel()
{    JLabel label =     new JLabel(JMeterUtils.getResString("protocol_java_classname"));    classnameCombo = new JComboBox<>();    classnameCombo.addActionListener(this);    classnameCombo.setEditable(false);    label.setLabelFor(classnameCombo);    methodName = new JComboBox<>();    methodName.addActionListener(this);    methodLabel.setLabelFor(methodName);    setupClasslist(false);    VerticalPanel panel = new VerticalPanel();    panel.add(junit4);    junit4.addItemListener(this);    panel.add(filterpkg);    filterpkg.addChangeListener(this);    panel.add(label);    panel.add(classnameCombo);    constructorLabel.setText("");    panel.add(constructorLabel);    panel.add(methodLabel);    panel.add(methodName);    panel.add(successMsg);    panel.add(successCode);    panel.add(failureMsg);    panel.add(failureCode);    panel.add(errorMsg);    panel.add(errorCode);    panel.add(doSetup);    panel.add(appendError);    panel.add(appendExc);    panel.add(createInstancePerSample);    return panel;}
0
private void initGui()
{    appendError.setSelected(false);    appendExc.setSelected(false);    createInstancePerSample.setSelected(false);    doSetup.setSelected(false);    junit4.setSelected(false);        filterpkg.setText("");        constructorLabel.setText("");        successCode.setText(JMeterUtils.getResString("junit_success_default_code"));        successMsg.setText(JMeterUtils.getResString("junit_success_default_msg"));        failureCode.setText(JMeterUtils.getResString("junit_failure_default_code"));        failureMsg.setText(JMeterUtils.getResString("junit_failure_default_msg"));        errorMsg.setText(JMeterUtils.getResString("junit_error_default_msg"));        errorCode.setText(JMeterUtils.getResString("junit_error_default_code"));    setupClasslist(true);}
0
public void clearGui()
{    super.clearGui();    initGui();}
0
public TestElement createTestElement()
{    JUnitSampler sampler = new JUnitSampler();    modifyTestElement(sampler);    return sampler;}
0
public void modifyTestElement(TestElement el)
{    JUnitSampler sampler = (JUnitSampler) el;    configureTestElement(sampler);    if (classnameCombo.getSelectedItem() != null && classnameCombo.getSelectedItem() instanceof String) {        sampler.setClassname((String) classnameCombo.getSelectedItem());    } else {        sampler.setClassname(null);    }    sampler.setConstructorString(constructorLabel.getText());    if (methodName.getSelectedItem() != null) {        Object mobj = methodName.getSelectedItem();        sampler.setMethod((String) mobj);    } else {        sampler.setMethod(null);    }    sampler.setFilterString(filterpkg.getText());    sampler.setSuccess(successMsg.getText());    sampler.setSuccessCode(successCode.getText());    sampler.setFailure(failureMsg.getText());    sampler.setFailureCode(failureCode.getText());    sampler.setError(errorMsg.getText());    sampler.setErrorCode(errorCode.getText());    sampler.setDoNotSetUpTearDown(doSetup.isSelected());    sampler.setAppendError(appendError.isSelected());    sampler.setAppendException(appendExc.isSelected());    sampler.setCreateOneInstancePerSample(createInstancePerSample.isSelected());    sampler.setJunit4(junit4.isSelected());}
0
public void configure(TestElement el)
{    super.configure(el);    JUnitSampler sampler = (JUnitSampler) el;    junit4.setSelected(sampler.getJunit4());    filterpkg.setText(sampler.getFilterString());    classnameCombo.setSelectedItem(sampler.getClassname());    setupMethods();    methodName.setSelectedItem(sampler.getMethod());    constructorLabel.setText(sampler.getConstructorString());    if (sampler.getSuccessCode().length() > 0) {        successCode.setText(sampler.getSuccessCode());    } else {                successCode.setText(JMeterUtils.getResString("junit_success_default_code"));    }    if (sampler.getSuccess().length() > 0) {        successMsg.setText(sampler.getSuccess());    } else {                successMsg.setText(JMeterUtils.getResString("junit_success_default_msg"));    }    if (sampler.getFailureCode().length() > 0) {        failureCode.setText(sampler.getFailureCode());    } else {                failureCode.setText(JMeterUtils.getResString("junit_failure_default_code"));    }    if (sampler.getFailure().length() > 0) {        failureMsg.setText(sampler.getFailure());    } else {                failureMsg.setText(JMeterUtils.getResString("junit_failure_default_msg"));    }    if (sampler.getError().length() > 0) {        errorMsg.setText(sampler.getError());    } else {                errorMsg.setText(JMeterUtils.getResString("junit_error_default_msg"));    }    if (sampler.getErrorCode().length() > 0) {        errorCode.setText(sampler.getErrorCode());    } else {                errorCode.setText(JMeterUtils.getResString("junit_error_default_code"));    }    doSetup.setSelected(sampler.getDoNotSetUpTearDown());    appendError.setSelected(sampler.getAppendError());    appendExc.setSelected(sampler.getAppendException());    createInstancePerSample.setSelected(sampler.getCreateOneInstancePerSample());}
0
private void setupMethods()
{    String className = (String) classnameCombo.getSelectedItem();    methodName.removeAllItems();    if (className != null) {        try {                        Class<?> testClass = Class.forName(className, false, contextClassLoader);            String[] names = getMethodNames(testClass);            for (String name : names) {                methodName.addItem(name);            }            methodName.repaint();        } catch (ClassNotFoundException e) {            throw new IllegalStateException(e);        }    }}
0
private String[] getMethodNames(Class<?> clazz)
{    Method[] meths = clazz.getMethods();    List<String> list = new ArrayList<>();    for (final Method method : meths) {        final String name = method.getName();        if (junit4.isSelected()) {            if (method.isAnnotationPresent(Test.class) || method.isAnnotationPresent(BeforeClass.class) || method.isAnnotationPresent(AfterClass.class)) {                list.add(name);            }        } else {            if (name.startsWith(TESTMETHOD_PREFIX) || name.equals(ONETIMESETUP) || name.equals(ONETIMETEARDOWN) || name.equals(SUITE)) {                list.add(name);            }        }    }    if (!list.isEmpty()) {        return list.toArray(new String[list.size()]);    }    return new String[0];}
0
public void actionPerformed(ActionEvent evt)
{    if (evt.getSource() == classnameCombo) {        setupMethods();    }}
0
public void itemStateChanged(ItemEvent event)
{    if (event.getItem() == junit4) {        setupClasslist(true);    }}
0
public void stateChanged(ChangeEvent event)
{    if (event.getSource() == filterpkg) {        setupClasslist(true);    }}
0
private void initMethodObjects(Object testObject)
{    setUpMethod = null;    tearDownMethod = null;    if (!getDoNotSetUpTearDown()) {        setUpMethod = getJunit4() ? getMethodWithAnnotation(testObject, Before.class) : getMethod(testObject, SETUP);        tearDownMethod = getJunit4() ? getMethodWithAnnotation(testObject, After.class) : getMethod(testObject, TEARDOWN);    }}
0
public void setClassname(String classname)
{    setProperty(CLASSNAME, classname);}
0
public String getClassname()
{    return getPropertyAsString(CLASSNAME);}
0
public void setConstructorString(String constr)
{    setProperty(CONSTRUCTORSTRING, constr);}
0
public String getConstructorString()
{    return getPropertyAsString(CONSTRUCTORSTRING);}
0
public String getMethod()
{    return getPropertyAsString(METHOD);}
0
public void setMethod(String methodName)
{    setProperty(METHOD, methodName);}
0
public String getSuccess()
{    return getPropertyAsString(SUCCESS);}
0
public void setSuccess(String success)
{    setProperty(SUCCESS, success);}
0
public String getSuccessCode()
{    return getPropertyAsString(SUCCESSCODE);}
0
public void setSuccessCode(String code)
{    setProperty(SUCCESSCODE, code);}
0
public String getFailure()
{    return getPropertyAsString(FAILURE);}
0
public void setFailure(String fail)
{    setProperty(FAILURE, fail);}
0
public String getFailureCode()
{    return getPropertyAsString(FAILURECODE);}
0
public void setFailureCode(String code)
{    setProperty(FAILURECODE, code);}
0
public String getError()
{    return getPropertyAsString(ERROR);}
0
public void setError(String error)
{    setProperty(ERROR, error);}
0
public String getErrorCode()
{    return getPropertyAsString(ERRORCODE);}
0
public void setErrorCode(String code)
{    setProperty(ERRORCODE, code);}
0
public String getFilterString()
{    return getPropertyAsString(FILTER);}
0
public void setFilterString(String text)
{    setProperty(FILTER, text);}
0
public boolean getDoNotSetUpTearDown()
{    return getPropertyAsBoolean(DOSETUP);}
0
public void setDoNotSetUpTearDown(boolean setup)
{    setProperty(DOSETUP, String.valueOf(setup));}
0
public boolean getAppendError()
{    return getPropertyAsBoolean(APPEND_ERROR, false);}
0
public void setAppendError(boolean error)
{    setProperty(APPEND_ERROR, String.valueOf(error));}
0
public boolean getAppendException()
{    return getPropertyAsBoolean(APPEND_EXCEPTION, false);}
0
public void setAppendException(boolean exc)
{    setProperty(APPEND_EXCEPTION, String.valueOf(exc));}
0
public boolean getJunit4()
{    return getPropertyAsBoolean(JUNIT4, false);}
0
public void setJunit4(boolean junit4)
{    setProperty(JUNIT4, junit4, false);}
0
public SampleResult sample(Entry entry)
{    if (getCreateOneInstancePerSample()) {        initializeTestObject();    }    SampleResult sresult = new SampleResult();        sresult.setSampleLabel(getName());    sresult.setSamplerData(className + "." + methodName);    sresult.setDataType(SampleResult.TEXT);        sresult.setSuccessful(true);    sresult.setResponseMessage(getSuccess());    sresult.setResponseCode(getSuccessCode());    if (this.testCase != null) {                TestResult tr = new TestResult();        final TestCase theClazz = this.testCase;        try {            if (setUpMethod != null) {                setUpMethod.invoke(this.testObject, new Object[0]);            }            sresult.sampleStart();            tr.startTest(this.testCase);                                                            tr.runProtected(theClazz, protectable);            tr.endTest(this.testCase);            sresult.sampleEnd();            if (tearDownMethod != null) {                tearDownMethod.invoke(testObject, new Object[0]);            }        } catch (InvocationTargetException e) {            Throwable cause = e.getCause();            if (cause instanceof AssertionFailedError) {                tr.addFailure(theClazz, (AssertionFailedError) cause);            } else if (cause instanceof AssertionError) {                                AssertionFailedError afe = new AssertionFailedError(cause.toString());                                afe.setStackTrace(cause.getStackTrace());                tr.addFailure(theClazz, afe);            } else if (cause != null) {                tr.addError(theClazz, cause);                            } else {                tr.addError(theClazz, e);                            }        } catch (IllegalAccessException | IllegalArgumentException e) {            tr.addError(theClazz, e);        }        if (!tr.wasSuccessful()) {            sresult.setSuccessful(false);            StringBuilder buf = new StringBuilder();            StringBuilder buftrace = new StringBuilder();            Enumeration<TestFailure> en;            if (getAppendError()) {                en = tr.failures();                if (en.hasMoreElements()) {                    sresult.setResponseCode(getFailureCode());                    buf.append(getFailure());                    buf.append("\n");                }                while (en.hasMoreElements()) {                    TestFailure item = en.nextElement();                    buf.append("Failure -- ");                    buf.append(item.toString());                    buf.append("\n");                    buftrace.append("Failure -- ");                    buftrace.append(item.toString());                    buftrace.append("\n");                    buftrace.append("Trace -- ");                    buftrace.append(item.trace());                }                en = tr.errors();                if (en.hasMoreElements()) {                    sresult.setResponseCode(getErrorCode());                    buf.append(getError());                    buf.append("\n");                }                while (en.hasMoreElements()) {                    TestFailure item = en.nextElement();                    buf.append("Error -- ");                    buf.append(item.toString());                    buf.append("\n");                    buftrace.append("Error -- ");                    buftrace.append(item.toString());                    buftrace.append("\n");                    buftrace.append("Trace -- ");                    buftrace.append(item.trace());                }            }            sresult.setResponseMessage(buf.toString());            sresult.setResponseData(buftrace.toString(), null);        }    } else {                sresult.setSuccessful(false);                sresult.setResponseMessage("Failed to create an instance of the class:" + getClassname() + ", reasons may be missing both empty constructor and one " + "String constructor or failure to instantiate constructor," + " check warning messages in jmeter log file");        sresult.setResponseCode(getErrorCode());    }    return sresult;}
1
private static Object getClassInstance(String className, String label)
{    Object testclass = null;    if (className != null) {        Constructor<?> con = null;        Constructor<?> strCon = null;        Class<?> theclazz = null;        Object[] strParams = null;        Object[] params = null;        try {            theclazz = Thread.currentThread().getContextClassLoader().loadClass(className.trim());        } catch (ClassNotFoundException e) {                    }        if (theclazz != null) {                        try {                strCon = theclazz.getDeclaredConstructor(new Class[] { String.class });                                if (label == null || label.length() == 0) {                    label = className;                }                if (strCon.getModifiers() == Modifier.PUBLIC) {                    strParams = new Object[] { label };                } else {                    strCon = null;                }            } catch (NoSuchMethodException e) {                            }            try {                con = theclazz.getDeclaredConstructor(new Class[0]);                if (con != null) {                    params = new Object[] {};                }            } catch (NoSuchMethodException e) {                            }            try {                                if (strCon != null) {                    testclass = strCon.newInstance(strParams);                } else if (con != null) {                    testclass = con.newInstance(params);                } else {                                    }            } catch (InvocationTargetException | IllegalAccessException | InstantiationException e) {                            }        }    }    return testclass;}
1
private Method getMethod(Object clazz, String method)
{    if (clazz != null && method != null) {        try {            return clazz.getClass().getMethod(method, new Class[0]);        } catch (NoSuchMethodException e) {                    }    }    return null;}
1
private Method getMethodWithAnnotation(Object clazz, Class<? extends Annotation> annotation)
{    if (null != clazz && null != annotation) {        for (Method m : clazz.getClass().getMethods()) {            if (m.isAnnotationPresent(annotation)) {                return m;            }        }    }    return null;}
0
protected void runTest() throws Throwable
{    try {        long start = System.currentTimeMillis();        method.invoke(testObject, (Object[]) null);        if (expectedException != None.class) {            throw new AssertionFailedError("No error was generated for a test case which specifies an error.");        }        if (timeout > 0) {            long elapsed = System.currentTimeMillis() - start;            if (elapsed > timeout) {                throw new AssertionFailedError("Test took longer than the specified timeout.");            }        }    } catch (InvocationTargetException e) {        Throwable thrown = e.getCause();        if (thrown == null) {                        throw e;        }        if (expectedException == None.class) {                        if (thrown instanceof AssertionError && !(thrown instanceof AssertionFailedError)) {                AssertionFailedError afe = new AssertionFailedError(thrown.toString());                                afe.setStackTrace(thrown.getStackTrace());                throw afe;            }            throw thrown;        }        if (!expectedException.isAssignableFrom(thrown.getClass())) {            throw new AssertionFailedError("The wrong exception was thrown from the test case");        }    }}
0
public void threadFinished()
{}
0
public void threadStarted()
{    testObject = null;    testCase = null;    methodName = getMethod();    className = getClassname();    protectable = null;    if (!getCreateOneInstancePerSample()) {                        initializeTestObject();    }}
0
private void initializeTestObject()
{    String rlabel = getConstructorString();    if (rlabel.length() == 0) {        rlabel = JUnitSampler.class.getName();    }    this.testObject = getClassInstance(className, rlabel);    if (this.testObject != null) {        initMethodObjects(this.testObject);        final Method m = getMethod(this.testObject, methodName);        if (getJunit4()) {            Class<? extends Throwable> expectedException = None.class;            long timeout = 0;            Test annotation = m.getAnnotation(Test.class);            if (null != annotation) {                expectedException = annotation.expected();                timeout = annotation.timeout();            }            final AnnotatedTestCase at = new AnnotatedTestCase(m, expectedException, timeout);            testCase = at;            protectable = new Protectable() {                @Override                public void protect() throws Throwable {                    at.runTest();                }            };        } else {            this.testCase = (TestCase) this.testObject;                        final Object theClazz = this.testObject;            protectable = new Protectable() {                @Override                public void protect() throws Throwable {                    try {                        m.invoke(theClazz, new Object[0]);                    } catch (InvocationTargetException e) {                        /*                             * Calling a method via reflection results in wrapping any                             * Exceptions in ITE; unwrap these here so runProtected can                             * allocate them correctly.                             */                        Throwable t = e.getCause();                        if (t != null) {                            throw t;                        }                        throw e;                    }                }            };        }        if (this.testCase != null) {            this.testCase.setName(methodName);        }    }}
0
public void protect() throws Throwable
{    at.runTest();}
0
public void protect() throws Throwable
{    try {        m.invoke(theClazz, new Object[0]);    } catch (InvocationTargetException e) {        /*                             * Calling a method via reflection results in wrapping any                             * Exceptions in ITE; unwrap these here so runProtected can                             * allocate them correctly.                             */        Throwable t = e.getCause();        if (t != null) {            throw t;        }        throw e;    }}
0
public void setCreateOneInstancePerSample(boolean createOneInstancePerSample)
{    this.setProperty(CREATE_INSTANCE_PER_SAMPLE, createOneInstancePerSample, CREATE_INSTANCE_PER_SAMPLE_DEFAULT);}
0
public boolean getCreateOneInstancePerSample()
{    return getPropertyAsBoolean(CREATE_INSTANCE_PER_SAMPLE, CREATE_INSTANCE_PER_SAMPLE_DEFAULT);}
0
public void afterFail()
{    fail("afterFail()");}
0
public void afterTest()
{}
0
public void beginFail()
{    fail("beginFail()");}
0
public void beginTest()
{}
0
public void expectedExceptionPass()
{    throw new RuntimeException();}
0
public void expectedExceptionFail()
{}
0
public void verifyTwo()
{    System.out.println("DummyAnnotatedTest#verifyTwo()");    two = 2;}
0
public void printDone()
{    System.out.println("DummyAnnotatedTest#printDone()");}
0
public void add()
{    int four = two + 2;    if (4 != four) {        throw new RuntimeException("4 did not equal four.");    }        assert 4 == four;}
0
public void timeOutFail()
{    try {        TimeUnit.SECONDS.sleep(2);    } catch (InterruptedException ignored) {    }}
0
public void timeOutPass()
{    try {        TimeUnit.MILLISECONDS.sleep(500);    } catch (InterruptedException ignored) {    }}
0
public void alwaysFail()
{    fail("This always fails");}
0
public void divideByZero()
{    @SuppressWarnings("unused")    int     i = 27 / 0;}
0
public void stringCompareFail()
{    assertEquals("this", "that");}
0
public void objectCompareFail()
{    assertEquals(new Object(), new Object());}
0
public static void beforeClass()
{    System.out.println("beforeClass");}
0
public void before()
{    System.out.println("before");}
0
public void test()
{    System.out.println("test");}
0
public void after()
{    System.out.println("after");}
0
public static void afterClass()
{    System.out.println("afterClass");}
0
public void testRerun()
{    assertEquals(123, i);    i++;}
0
public void setUp()
{    throw new Error("setUp()");}
0
public void testSetUpError()
{}
0
public void setUp()
{    fail("setUp()");}
0
public void testSetUpFail()
{}
0
public void tearDown()
{    fail("tearDown()");}
0
public void testTearDownFail()
{}
0
public void setUp()
{    System.out.println("DummyTestCase#setup(): " + getName());}
0
public void tearDown()
{    System.out.println("DummyTestCase#tearDown(): " + getName());}
0
public void testMethodPass()
{    try {        TimeUnit.MILLISECONDS.sleep(100);        assertEquals(10, 10);    } catch (InterruptedException e) {        e.printStackTrace();    }}
0
public void testMethodPass2()
{    try {        TimeUnit.MILLISECONDS.sleep(100);        assertEquals("one", "one");    } catch (InterruptedException e) {        e.printStackTrace();    }}
0
public void testMethodFail()
{    try {        TimeUnit.MILLISECONDS.sleep(100);        assertEquals(20, 10);    } catch (InterruptedException e) {        e.printStackTrace();    }}
0
public void testMethodFail2()
{    try {        TimeUnit.MILLISECONDS.sleep(100);        assertEquals("one", "two");    } catch (InterruptedException e) {        e.printStackTrace();    }}
0
public void testFail()
{    fail("Test failure");}
0
public void testException()
{    @SuppressWarnings("unused")    int     i = 27 / 0;}
0
public void testStringCompareFail()
{    assertEquals("this", "that");}
0
public void testObjectCompareFail()
{    assertEquals(new Object(), new Object());}
0
public void oneTimeSetUp()
{    System.out.println("SubDummyTest#oneTimeSetUp(): " + getName());}
0
public void oneTimeTearDown()
{    System.out.println("SubDummyTest#oneTimeTearDown(): " + getName());}
0
public void oneTimeSetUp()
{    System.out.println("SubDummyTest2#oneTimeSetUp(): " + getName());}
0
public void oneTimeTearDown()
{    System.out.println("SubDummyTest2#oneTimeTearDown(): " + getName());}
0
public void setName(String newName)
{    setProperty(new StringProperty(ARG_NAME, newName));}
0
public String getName()
{    return getPropertyAsString(ARG_NAME);}
0
public void setValue(String newValue)
{    setProperty(new StringProperty(VALUE, newValue));}
0
public String getValue()
{    return getPropertyAsString(VALUE);}
0
public void setOpcode(String newOpcode)
{    setProperty(new StringProperty(OPCODE, newOpcode));}
0
public String getOpcode()
{    return getPropertyAsString(OPCODE);}
0
public void setMetaData(String newMetaData)
{    setProperty(new StringProperty(METADATA, newMetaData));}
0
public String getMetaData()
{    return getPropertyAsString(METADATA);}
0
public CollectionProperty getArguments()
{    return (CollectionProperty) getProperty(ARGUMENTS);}
0
public void clear()
{    super.clear();    setProperty(new CollectionProperty(ARGUMENTS, new ArrayList<>()));}
0
public void setArguments(List<Object> arguments)
{    setProperty(new CollectionProperty(ARGUMENTS, arguments));}
0
public Map<String, String> getArgumentsAsMap()
{    PropertyIterator iter = getArguments().iterator();    Map<String, String> argMap = new HashMap<>();    while (iter.hasNext()) {        LDAPArgument arg = (LDAPArgument) iter.next().getObjectValue();        argMap.put(arg.getName(), arg.getValue());    }    return argMap;}
0
public void addArgument(String name, String value, String opcode)
{    addArgument(new LDAPArgument(name, value, opcode, null));}
0
public void addArgument(LDAPArgument arg)
{    TestElementProperty newArg = new TestElementProperty(arg.getName(), arg);    if (isRunningVersion()) {        this.setTemporary(newArg);    }    getArguments().addItem(newArg);}
0
public void addArgument(String name, String value, String opcode, String metadata)
{    addArgument(new LDAPArgument(name, value, opcode, metadata));}
0
public PropertyIterator iterator()
{    return getArguments().iterator();}
0
public String toString()
{    StringBuilder str = new StringBuilder();    PropertyIterator iter = getArguments().iterator();    while (iter.hasNext()) {        LDAPArgument arg = (LDAPArgument) iter.next().getObjectValue();        final String metaData = arg.getMetaData();        str.append(arg.getName());        if (metaData == null) {                        str.append("=");        } else {            str.append(metaData);        }        str.append(arg.getValue());        if (iter.hasNext()) {                        str.append("&");        }    }    return str.toString();}
0
public void removeArgument(int row)
{    if (row < getArguments().size()) {        getArguments().remove(row);    }}
0
public void removeArgument(LDAPArgument arg)
{    PropertyIterator iter = getArguments().iterator();    while (iter.hasNext()) {        LDAPArgument item = (LDAPArgument) iter.next().getObjectValue();        if (arg.equals(item)) {            iter.remove();        }    }}
0
public void removeArgument(String argName)
{    PropertyIterator iter = getArguments().iterator();    while (iter.hasNext()) {        LDAPArgument arg = (LDAPArgument) iter.next().getObjectValue();        if (arg.getName().equals(argName)) {            iter.remove();        }    }}
0
public void removeAllArguments()
{    getArguments().clear();}
0
public void addEmptyArgument()
{    addArgument(new LDAPArgument("", "", "", null));}
0
public int getArgumentCount()
{    return getArguments().size();}
0
public LDAPArgument getArgument(int row)
{    LDAPArgument argument = null;    if (row < getArguments().size()) {        argument = (LDAPArgument) getArguments().get(row).getObjectValue();    }    return argument;}
0
public Collection<String> getMenuCategories()
{    return null;}
0
public String getLabelResource()
{        return "ldapext_sample_title";}
0
public TestElement createTestElement()
{    LDAPArguments args = new LDAPArguments();    modifyTestElement(args);        return (TestElement) args.clone();}
0
public void modifyTestElement(TestElement args)
{    GuiUtils.stopTableEditing(table);    if (args instanceof LDAPArguments) {        LDAPArguments arguments = (LDAPArguments) args;        arguments.clear();                @SuppressWarnings("unchecked")        Iterator<LDAPArgument> modelData = (Iterator<LDAPArgument>) tableModel.iterator();        while (modelData.hasNext()) {            LDAPArgument arg = modelData.next();            arg.setMetaData("=");            arguments.addArgument(arg);        }    }    super.configureTestElement(args);}
0
public void configure(TestElement el)
{    super.configure(el);    if (el instanceof LDAPArguments) {        tableModel.clearData();        PropertyIterator iter = ((LDAPArguments) el).iterator();        while (iter.hasNext()) {            LDAPArgument arg = (LDAPArgument) iter.next().getObjectValue();            tableModel.addRow(arg);        }    }    checkDeleteStatus();}
0
private void checkDeleteStatus()
{        if (tableModel.getRowCount() == 0) {        delete.setEnabled(false);    } else {        delete.setEnabled(true);    }}
0
public void clear()
{    tableModel.clearData();}
0
public void actionPerformed(ActionEvent e)
{    String action = e.getActionCommand();    if (action.equals(DELETE)) {        deleteArgument();    } else if (action.equals(ADD)) {        addArgument();    }}
0
private void deleteArgument()
{            GuiUtils.cancelEditing(table);    int rowSelected = table.getSelectedRow();    if (rowSelected >= 0) {        tableModel.removeRow(rowSelected);        tableModel.fireTableDataChanged();                if (tableModel.getRowCount() == 0) {            delete.setEnabled(false);        } else                 {            int rowToSelect = rowSelected;            if (rowSelected >= tableModel.getRowCount()) {                rowToSelect = rowSelected - 1;            }            table.setRowSelectionInterval(rowToSelect, rowToSelect);        }    }}
0
private void addArgument()
{            GuiUtils.stopTableEditing(table);    tableModel.addRow(makeNewLDAPArgument());        delete.setEnabled(true);        int rowToSelect = tableModel.getRowCount() - 1;    table.setRowSelectionInterval(rowToSelect, rowToSelect);}
0
private LDAPArgument makeNewLDAPArgument()
{    return new LDAPArgument("", "", "");}
0
private void initializeTableModel()
{    tableModel = new ObjectTableModel(new String[] { COLUMN_NAMES[0], COLUMN_NAMES[1], COLUMN_NAMES[2] }, LDAPArgument.class, new Functor[] { new Functor("getName"), new Functor("getValue"), new Functor("getOpcode") }, new Functor[] { new Functor("setName"), new Functor("setValue"), new Functor("setOpcode") }, new Class[] { String.class, String.class, String.class });}
0
public static boolean testFunctors()
{    LDAPArgumentsPanel instance = new LDAPArgumentsPanel();    instance.initializeTableModel();    return instance.tableModel.checkFunctors(null, instance.getClass());}
0
private Component makeMainPanel()
{    initializeTableModel();    table = new JTable(tableModel);    JMeterUtils.applyHiDPI(table);    table.getTableHeader().setDefaultRenderer(new HeaderAsPropertyRenderer());    table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);    return makeScrollPane(table);}
0
private Component makeLabelPanel()
{    JPanel labelPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));    labelPanel.add(tableLabel);    return labelPanel;}
0
private JPanel makeButtonPanel()
{    /* A button for adding new arguments to the table. */        JButton add = new JButton(JMeterUtils.getResString("add"));    add.setActionCommand(ADD);    add.setEnabled(true);        delete = new JButton(JMeterUtils.getResString("delete"));    delete.setActionCommand(DELETE);    checkDeleteStatus();    JPanel buttonPanel = new JPanel();    buttonPanel.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 10));    add.addActionListener(this);    delete.addActionListener(this);    buttonPanel.add(add);    buttonPanel.add(delete);    return buttonPanel;}
0
private void init()
{        setLayout(new BorderLayout());    add(makeLabelPanel(), BorderLayout.NORTH);    add(makeMainPanel(), BorderLayout.CENTER);        add(Box.createVerticalStrut(70), BorderLayout.WEST);    add(makeButtonPanel(), BorderLayout.SOUTH);    table.revalidate();}
0
public String getLabelResource()
{        return "ldap_sample_title";}
0
public void configure(TestElement element)
{    super.configure(element);    servername.setText(element.getPropertyAsString(LDAPSampler.SERVERNAME));    port.setText(element.getPropertyAsString(LDAPSampler.PORT));    rootdn.setText(element.getPropertyAsString(LDAPSampler.ROOTDN));    CardLayout cl = (CardLayout) (cards.getLayout());    final String testType = element.getPropertyAsString(LDAPSampler.TEST);    if (testType.equals(LDAPSampler.ADD)) {        addTest.setSelected(true);        add.setText(element.getPropertyAsString(LDAPSampler.BASE_ENTRY_DN));        tableAddPanel.configure((TestElement) element.getProperty(LDAPSampler.ARGUMENTS).getObjectValue());        cl.show(cards, "Add");    } else if (testType.equals(LDAPSampler.MODIFY)) {        modifyTest.setSelected(true);        modify.setText(element.getPropertyAsString(LDAPSampler.BASE_ENTRY_DN));        tableModifyPanel.configure((TestElement) element.getProperty(LDAPSampler.ARGUMENTS).getObjectValue());        cl.show(cards, "Modify");    } else if (testType.equals(LDAPSampler.DELETE)) {        deleteTest.setSelected(true);        delete.setText(element.getPropertyAsString(LDAPSampler.DELETE));        cl.show(cards, "Delete");    } else if (testType.equals(LDAPSampler.SEARCHBASE)) {        searchTest.setSelected(true);        searchbase.setText(element.getPropertyAsString(LDAPSampler.SEARCHBASE));        searchfilter.setText(element.getPropertyAsString(LDAPSampler.SEARCHFILTER));        cl.show(cards, "Search");    }    if (element.getPropertyAsBoolean(LDAPSampler.USER_DEFINED)) {        userDefined.setSelected(true);    } else {        userDefined.setSelected(false);                cl.show(cards, "");    }}
0
public TestElement createTestElement()
{    ConfigTestElement element = new ConfigTestElement();    modifyTestElement(element);    return element;}
0
public void modifyTestElement(TestElement element)
{    element.clear();    configureTestElement(element);    element.setProperty(LDAPSampler.SERVERNAME, servername.getText());    element.setProperty(LDAPSampler.PORT, port.getText());    element.setProperty(LDAPSampler.ROOTDN, rootdn.getText());    element.setProperty(new BooleanProperty(LDAPSampler.USER_DEFINED, userDefined.isSelected()));    if (addTest.isSelected()) {        element.setProperty(new StringProperty(LDAPSampler.TEST, LDAPSampler.ADD));        element.setProperty(new StringProperty(LDAPSampler.BASE_ENTRY_DN, add.getText()));        element.setProperty(new TestElementProperty(LDAPSampler.ARGUMENTS, tableAddPanel.createTestElement()));    }    if (modifyTest.isSelected()) {        element.setProperty(new StringProperty(LDAPSampler.TEST, LDAPSampler.MODIFY));        element.setProperty(new StringProperty(LDAPSampler.BASE_ENTRY_DN, modify.getText()));        element.setProperty(new TestElementProperty(LDAPSampler.ARGUMENTS, tableModifyPanel.createTestElement()));    }    if (deleteTest.isSelected()) {        element.setProperty(new StringProperty(LDAPSampler.TEST, LDAPSampler.DELETE));        element.setProperty(new StringProperty(LDAPSampler.DELETE, delete.getText()));    }    if (searchTest.isSelected()) {        element.setProperty(new StringProperty(LDAPSampler.TEST, LDAPSampler.SEARCHBASE));        element.setProperty(new StringProperty(LDAPSampler.SEARCHBASE, searchbase.getText()));        element.setProperty(new StringProperty(LDAPSampler.SEARCHFILTER, searchfilter.getText()));    }}
0
public void clearGui()
{    super.clearGui();        rootdn.setText("");        searchbase.setText("");        searchfilter.setText("");        delete.setText("");        add.setText("");        modify.setText("");        servername.setText("");        port.setText("");    userDefined.setSelected(false);    addTest.setSelected(true);    modifyTest.setSelected(false);    deleteTest.setSelected(false);    searchTest.setSelected(false);}
0
public void itemStateChanged(ItemEvent ie)
{    CardLayout cl = (CardLayout) (cards.getLayout());    if (userDefined.isSelected()) {        if (addTest.isSelected()) {            cl.show(cards, "Add");            tableModifyPanel.clear();                        modify.setText("");                        searchbase.setText("");                        searchfilter.setText("");            delete.setText("");        } else if (deleteTest.isSelected()) {            cl.show(cards, "Delete");            tableModifyPanel.clear();                        modify.setText("");            tableAddPanel.clear();                        add.setText("");                        searchbase.setText("");                        searchfilter.setText("");        } else if (searchTest.isSelected()) {            cl.show(cards, "Search");                        delete.setText("");            tableModifyPanel.clear();                        modify.setText("");            tableAddPanel.clear();                        add.setText("");        } else if (modifyTest.isSelected()) {            cl.show(cards, "Modify");            tableAddPanel.clear();                        add.setText("");                        searchbase.setText("");                        searchfilter.setText("");            delete.setText("");        } else {            resetCardLayout(cl);        }    } else {        resetCardLayout(cl);    }}
0
private void resetCardLayout(CardLayout cl)
{        cl.show(cards, "");    tableAddPanel.clear();        add.setText("");    tableModifyPanel.clear();        modify.setText("");        searchbase.setText("");        searchfilter.setText("");        delete.setText("");}
0
private JPanel createServernamePanel()
{    return createLabelPanel("servername", servername);}
0
private JPanel createPortPanel()
{    return createLabelPanel("port", port);}
0
private JPanel createRootdnPanel()
{    return createLabelPanel("dn", rootdn);}
0
private JPanel createSearchPanel()
{    VerticalPanel searchPanel = new VerticalPanel();    searchPanel.add(createLabelPanel("search_base", searchbase));    searchPanel.add(createLabelPanel("search_filter", searchfilter));    return searchPanel;}
0
private JPanel createDeletePanel()
{    VerticalPanel panel = new VerticalPanel();    panel.add(createLabelPanel("delete", delete));    return panel;}
0
private JPanel createAddPanel()
{    JPanel addPanel = new JPanel(new BorderLayout(5, 0));    addPanel.add(createLabelPanel("entry_dn", add), BorderLayout.NORTH);    addPanel.add(tableAddPanel, BorderLayout.CENTER);    return addPanel;}
0
private JPanel createLabelPanel(String key, JTextField field)
{    JPanel addInnerPanel = new JPanel(new BorderLayout(5, 0));        JLabel label = new JLabel(JMeterUtils.getResString(key));    label.setLabelFor(field);    addInnerPanel.add(label, BorderLayout.WEST);    addInnerPanel.add(field, BorderLayout.CENTER);    return addInnerPanel;}
0
private JPanel createModifyPanel()
{    JPanel modifyPanel = new JPanel(new BorderLayout(5, 0));    modifyPanel.add(createLabelPanel("entry_dn", modify), BorderLayout.NORTH);    modifyPanel.add(tableModifyPanel, BorderLayout.CENTER);    return modifyPanel;}
0
private JPanel testPanel()
{    cards = new JPanel(new CardLayout());    cards.add(new JPanel(), "");    cards.add(createAddPanel(), "Add");    cards.add(createModifyPanel(), "Modify");    cards.add(createDeletePanel(), "Delete");    cards.add(createSearchPanel(), "Search");    return cards;}
0
private JPanel createTestPanel()
{    JPanel testPanel = new JPanel(new BorderLayout());        testPanel.setBorder(BorderFactory.createTitledBorder(JMeterUtils.getResString("test_configuration")));        testPanel.add(new JLabel(JMeterUtils.getResString("test")));    JPanel rowPanel = new JPanel();    rowPanel.add(addTest);    bGroup.add(addTest);    rowPanel.add(deleteTest);    bGroup.add(deleteTest);    rowPanel.add(searchTest);    bGroup.add(searchTest);    rowPanel.add(modifyTest);    bGroup.add(modifyTest);    testPanel.add(rowPanel, BorderLayout.NORTH);    testPanel.add(userDefined, BorderLayout.CENTER);    return testPanel;}
0
private void init()
{        setLayout(new BorderLayout(0, 5));    if (displayName) {        setBorder(makeBorder());        add(makeTitlePanel(), BorderLayout.NORTH);    }    VerticalPanel mainPanel = new VerticalPanel();    mainPanel.add(createServernamePanel());    mainPanel.add(createPortPanel());    mainPanel.add(createRootdnPanel());    mainPanel.add(createTestPanel());    mainPanel.add(testPanel());    add(mainPanel, BorderLayout.CENTER);    userDefined.addItemListener(this);    addTest.addItemListener(this);    modifyTest.addItemListener(this);    deleteTest.addItemListener(this);    searchTest.addItemListener(this);}
0
public String getLabelResource()
{        return "ldapext_sample_title";}
0
public void configure(TestElement element)
{    super.configure(element);    servername.setText(element.getPropertyAsString(LDAPExtSampler.SERVERNAME));    port.setText(element.getPropertyAsString(LDAPExtSampler.PORT));    rootdn.setText(element.getPropertyAsString(LDAPExtSampler.ROOTDN));    scope.setSelectedIndex(element.getPropertyAsInt(LDAPExtSampler.SCOPE));    countlim.setText(element.getPropertyAsString(LDAPExtSampler.COUNTLIM));    timelim.setText(element.getPropertyAsString(LDAPExtSampler.TIMELIM));    attribs.setText(element.getPropertyAsString(LDAPExtSampler.ATTRIBS));    retobj.setSelected(element.getPropertyAsBoolean(LDAPExtSampler.RETOBJ));    deref.setSelected(element.getPropertyAsBoolean(LDAPExtSampler.DEREF));    connto.setText(element.getPropertyAsString(LDAPExtSampler.CONNTO));    parseflag.setSelected(element.getPropertyAsBoolean(LDAPExtSampler.PARSEFLAG));    secure.setSelected(element.getPropertyAsBoolean(LDAPExtSampler.SECURE));    trustAll.setSelected(element.getPropertyAsBoolean(LDAPExtSampler.TRUSTALL));    userpw.setText(element.getPropertyAsString(LDAPExtSampler.USERPW));    userdn.setText(element.getPropertyAsString(LDAPExtSampler.USERDN));    comparedn.setText(element.getPropertyAsString(LDAPExtSampler.COMPAREDN));    comparefilt.setText(element.getPropertyAsString(LDAPExtSampler.COMPAREFILT));    modddn.setText(element.getPropertyAsString(LDAPExtSampler.MODDDN));    newdn.setText(element.getPropertyAsString(LDAPExtSampler.NEWDN));    CardLayout cl = (CardLayout) (cards.getLayout());    final String testType = element.getPropertyAsString(LDAPExtSampler.TEST);    if (testType.equals(LDAPExtSampler.UNBIND)) {        unbind.setSelected(true);        cl.show(cards, CARDS_DEFAULT);    } else if (testType.equals(LDAPExtSampler.BIND)) {        bind.setSelected(true);        cl.show(cards, CARDS_BIND);    } else if (testType.equals(LDAPExtSampler.SBIND)) {        sbind.setSelected(true);        cl.show(cards, CARDS_BIND);    } else if (testType.equals(LDAPExtSampler.COMPARE)) {        compare.setSelected(true);        cl.show(cards, CARDS_COMPARE);    } else if (testType.equals(LDAPExtSampler.ADD)) {        addTest.setSelected(true);        add.setText(element.getPropertyAsString(LDAPExtSampler.BASE_ENTRY_DN));        tableAddPanel.configure((TestElement) element.getProperty(LDAPExtSampler.ARGUMENTS).getObjectValue());        cl.show(cards, CARDS_ADD);    } else if (testType.equals(LDAPExtSampler.MODIFY)) {        modifyTest.setSelected(true);        modify.setText(element.getPropertyAsString(LDAPExtSampler.BASE_ENTRY_DN));        tableModifyPanel.configure((TestElement) element.getProperty(LDAPExtSampler.LDAPARGUMENTS).getObjectValue());        cl.show(cards, CARDS_MODIFY);    } else if (testType.equals(LDAPExtSampler.DELETE)) {        deleteTest.setSelected(true);        delete.setText(element.getPropertyAsString(LDAPExtSampler.DELETE));        cl.show(cards, CARDS_DELETE);    } else if (testType.equals(LDAPExtSampler.RENAME)) {        rename.setSelected(true);        cl.show(cards, CARDS_RENAME);    } else if (testType.equals(LDAPExtSampler.SEARCH)) {        searchTest.setSelected(true);        searchbase.setText(element.getPropertyAsString(LDAPExtSampler.SEARCHBASE));        searchfilter.setText(element.getPropertyAsString(LDAPExtSampler.SEARCHFILTER));        cl.show(cards, CARDS_SEARCH);    }}
0
public TestElement createTestElement()
{    ConfigTestElement element = new ConfigTestElement();    modifyTestElement(element);    return element;}
0
public void modifyTestElement(TestElement element)
{    element.clear();    configureTestElement(element);    element.setProperty(LDAPExtSampler.SERVERNAME, servername.getText());    element.setProperty(LDAPExtSampler.PORT, port.getText());    element.setProperty(LDAPExtSampler.ROOTDN, rootdn.getText());    element.setProperty(LDAPExtSampler.SCOPE, String.valueOf(scope.getSelectedIndex()));    element.setProperty(LDAPExtSampler.COUNTLIM, countlim.getText());    element.setProperty(LDAPExtSampler.TIMELIM, timelim.getText());    element.setProperty(LDAPExtSampler.ATTRIBS, attribs.getText());    element.setProperty(LDAPExtSampler.RETOBJ, Boolean.toString(retobj.isSelected()));    element.setProperty(LDAPExtSampler.DEREF, Boolean.toString(deref.isSelected()));    element.setProperty(LDAPExtSampler.CONNTO, connto.getText());    element.setProperty(LDAPExtSampler.PARSEFLAG, Boolean.toString(parseflag.isSelected()));    element.setProperty(LDAPExtSampler.SECURE, Boolean.toString(secure.isSelected()));    element.setProperty(LDAPExtSampler.TRUSTALL, Boolean.toString(trustAll.isSelected()));    element.setProperty(LDAPExtSampler.USERDN, userdn.getText());    element.setProperty(LDAPExtSampler.USERPW, userpw.getText());    element.setProperty(LDAPExtSampler.COMPAREDN, comparedn.getText());    element.setProperty(LDAPExtSampler.COMPAREFILT, comparefilt.getText());    element.setProperty(LDAPExtSampler.MODDDN, modddn.getText());    element.setProperty(LDAPExtSampler.NEWDN, newdn.getText());    if (addTest.isSelected()) {        element.setProperty(new StringProperty(LDAPExtSampler.TEST, LDAPExtSampler.ADD));        element.setProperty(new StringProperty(LDAPExtSampler.BASE_ENTRY_DN, add.getText()));        element.setProperty(new TestElementProperty(LDAPExtSampler.ARGUMENTS, tableAddPanel.createTestElement()));    }    if (modifyTest.isSelected()) {        element.setProperty(new StringProperty(LDAPExtSampler.TEST, LDAPExtSampler.MODIFY));        element.setProperty(new StringProperty(LDAPExtSampler.BASE_ENTRY_DN, modify.getText()));        element.setProperty(new TestElementProperty(LDAPExtSampler.LDAPARGUMENTS, tableModifyPanel.createTestElement()));    }    if (deleteTest.isSelected()) {        element.setProperty(new StringProperty(LDAPExtSampler.TEST, LDAPExtSampler.DELETE));        element.setProperty(new StringProperty(LDAPExtSampler.DELETE, delete.getText()));    }    if (searchTest.isSelected()) {        element.setProperty(new StringProperty(LDAPExtSampler.TEST, LDAPExtSampler.SEARCH));        element.setProperty(new StringProperty(LDAPExtSampler.SEARCHBASE, searchbase.getText()));        element.setProperty(new StringProperty(LDAPExtSampler.SEARCHFILTER, searchfilter.getText()));    }    if (bind.isSelected()) {        element.setProperty(new StringProperty(LDAPExtSampler.TEST, LDAPExtSampler.BIND));    }    if (sbind.isSelected()) {        element.setProperty(new StringProperty(LDAPExtSampler.TEST, LDAPExtSampler.SBIND));    }    if (compare.isSelected()) {        element.setProperty(new StringProperty(LDAPExtSampler.TEST, LDAPExtSampler.COMPARE));    }    if (rename.isSelected()) {        element.setProperty(new StringProperty(LDAPExtSampler.TEST, LDAPExtSampler.RENAME));    }    if (unbind.isSelected()) {        element.setProperty(new StringProperty(LDAPExtSampler.TEST, LDAPExtSampler.UNBIND));    }}
0
public void clearGui()
{    super.clearGui();        rootdn.setText("");        searchbase.setText("");        searchfilter.setText("");        delete.setText("");        add.setText("");        modify.setText("");        servername.setText("");        port.setText("");        add.setText("");    scope.setSelectedIndex(SCOPE_STRINGS.length - 1);        countlim.setText("");        timelim.setText("");        attribs.setText("");        userdn.setText("");        userpw.setText("");        comparedn.setText("");        comparefilt.setText("");        modddn.setText("");        newdn.setText("");        connto.setText("");    retobj.setSelected(false);    deref.setSelected(false);    parseflag.setSelected(false);    secure.setSelected(false);    trustAll.setSelected(false);    addTest.setSelected(false);    modifyTest.setSelected(false);    deleteTest.setSelected(false);    searchTest.setSelected(false);    bind.setSelected(false);    rename.setSelected(false);    unbind.setSelected(false);    sbind.setSelected(false);    compare.setSelected(false);    tableAddPanel.clear();    tableModifyPanel.clear();}
0
public void itemStateChanged(ItemEvent ie)
{    CardLayout cl = (CardLayout) (cards.getLayout());    if (addTest.isSelected()) {        cl.show(cards, CARDS_ADD);    } else if (deleteTest.isSelected()) {        cl.show(cards, CARDS_DELETE);    } else if (bind.isSelected()) {        cl.show(cards, CARDS_BIND);    } else if (sbind.isSelected()) {        cl.show(cards, CARDS_BIND);    } else if (rename.isSelected()) {        cl.show(cards, CARDS_RENAME);    } else if (compare.isSelected()) {        cl.show(cards, CARDS_COMPARE);    } else if (searchTest.isSelected()) {        cl.show(cards, CARDS_SEARCH);    } else if (modifyTest.isSelected()) {        cl.show(cards, CARDS_MODIFY);    } else {                cl.show(cards, CARDS_DEFAULT);    }}
0
private JPanel createBindPanel()
{    VerticalPanel bindPanel = new VerticalPanel();    bindPanel.add(createLabelPanel("servername", servername));    bindPanel.add(createLabelPanel("port", port));    bindPanel.add(createLabelPanel("ddn", rootdn));    bindPanel.add(createLabelPanel("userdn", userdn));    bindPanel.add(createLabelPanel("userpw", userpw));    bindPanel.add(createLabelPanel("ldap_connto", connto));    bindPanel.add(secure);    bindPanel.add(trustAll);    return bindPanel;}
0
private JPanel createComparePanel()
{    VerticalPanel cbindPanel = new VerticalPanel();    cbindPanel.add(createLabelPanel("entrydn", comparedn));    cbindPanel.add(createLabelPanel("comparefilt", comparefilt));    return cbindPanel;}
0
private JPanel createSCPanel()
{    VerticalPanel scPanel = new VerticalPanel();    scPanel.add(scope);    scPanel.add(createLabelPanel("countlim", countlim));    scPanel.add(createLabelPanel("timelim", timelim));    scPanel.add(createLabelPanel("attrs", attribs));    scPanel.add(retobj);    scPanel.add(deref);    scPanel.add(parseflag);    return scPanel;}
0
private JPanel createSearchPanel()
{    VerticalPanel searchPanel = new VerticalPanel();    searchPanel.add(createLabelPanel("searchbase", searchbase));    searchPanel.add(createLabelPanel("searchfilter", searchfilter));    searchPanel.add(createSCPanel());    return searchPanel;}
0
private JPanel createModdnPanel()
{    VerticalPanel modPanel = new VerticalPanel();    modPanel.add(createLabelPanel("modddn", modddn));    modPanel.add(createLabelPanel("newdn", newdn));    return modPanel;}
0
private JPanel createLabelPanel(String key, JTextField field)
{    JPanel panel = new JPanel(new BorderLayout(5, 0));        JLabel label = new JLabel(JMeterUtils.getResString(key));    label.setLabelFor(field);    panel.add(label, BorderLayout.WEST);    panel.add(field, BorderLayout.CENTER);    return panel;}
0
private JPanel createDeletePanel()
{    VerticalPanel panel = new VerticalPanel();    panel.add(createLabelPanel("delete", delete));    return panel;}
0
private JPanel createAddPanel()
{    JPanel addPanel = new JPanel(new BorderLayout(5, 0));    addPanel.add(createLabelPanel("entrydn", add), BorderLayout.NORTH);    addPanel.add(tableAddPanel, BorderLayout.CENTER);    return addPanel;}
0
private JPanel createModifyPanel()
{    JPanel modifyPanel = new JPanel(new BorderLayout(5, 0));    modifyPanel.add(createLabelPanel("entrydn", modify), BorderLayout.NORTH);    modifyPanel.add(tableModifyPanel, BorderLayout.CENTER);    return modifyPanel;}
0
private JPanel testPanel()
{    cards = new JPanel(new CardLayout());    cards.add(new JPanel(), CARDS_DEFAULT);    cards.add(createAddPanel(), CARDS_ADD);    cards.add(createModifyPanel(), CARDS_MODIFY);    cards.add(createModdnPanel(), CARDS_RENAME);    cards.add(createDeletePanel(), CARDS_DELETE);    cards.add(createSearchPanel(), CARDS_SEARCH);    cards.add(createBindPanel(), CARDS_BIND);    cards.add(createComparePanel(), CARDS_COMPARE);    return cards;}
0
private JPanel createTestPanel()
{    JPanel testPanel = new JPanel(new BorderLayout());        testPanel.setBorder(BorderFactory.createTitledBorder(JMeterUtils.getResString("test_configuration")));        testPanel.add(new JLabel(JMeterUtils.getResString("testt")));    JPanel rowPanel = new JPanel();    JPanel row2Panel = new JPanel();    rowPanel.add(bind);    bGroup.add(bind);    rowPanel.add(unbind);    bGroup.add(unbind);    rowPanel.add(sbind);    bGroup.add(sbind);    rowPanel.add(rename);    bGroup.add(rename);    row2Panel.add(addTest);    bGroup.add(addTest);    row2Panel.add(deleteTest);    bGroup.add(deleteTest);    row2Panel.add(searchTest);    bGroup.add(searchTest);    row2Panel.add(compare);    bGroup.add(compare);    row2Panel.add(modifyTest);    bGroup.add(modifyTest);    testPanel.add(rowPanel, BorderLayout.NORTH);    testPanel.add(row2Panel, BorderLayout.SOUTH);    return testPanel;}
0
private void init()
{        setLayout(new BorderLayout(0, 5));    if (displayName) {        setBorder(makeBorder());        add(makeTitlePanel(), BorderLayout.NORTH);    }    VerticalPanel mainPanel = new VerticalPanel();    mainPanel.add(createTestPanel());    mainPanel.add(testPanel());    add(mainPanel, BorderLayout.CENTER);        bind.addItemListener(this);    sbind.addItemListener(this);    unbind.addItemListener(this);    compare.addItemListener(this);    addTest.addItemListener(this);    modifyTest.addItemListener(this);    rename.addItemListener(this);    deleteTest.addItemListener(this);    searchTest.addItemListener(this);}
0
public void configure(TestElement element)
{    super.configure(element);    ldapDefaultPanel.configure(element);}
0
public TestElement createTestElement()
{    LDAPExtSampler sampler = new LDAPExtSampler();    modifyTestElement(sampler);    return sampler;}
0
public void modifyTestElement(TestElement sampler)
{    sampler.clear();    sampler.addTestElement(ldapDefaultPanel.createTestElement());    super.configureTestElement(sampler);}
0
public void clearGui()
{    super.clearGui();    ldapDefaultPanel.clearGui();}
0
public String getLabelResource()
{        return "ldapext_testing_title";}
0
private void init()
{        setLayout(new BorderLayout(0, 5));    setBorder(makeBorder());    add(makeTitlePanel(), BorderLayout.NORTH);        JPanel mainPanel = new JPanel(new BorderLayout(0, 5));    ldapDefaultPanel = new LdapExtConfigGui(false);    mainPanel.add(ldapDefaultPanel);    add(mainPanel, BorderLayout.CENTER);}
0
public void configure(TestElement element)
{    super.configure(element);    loginPanel.configure(element);    ldapDefaultPanel.configure(element);}
0
public TestElement createTestElement()
{    LDAPSampler sampler = new LDAPSampler();    modifyTestElement(sampler);    return sampler;}
0
public void modifyTestElement(TestElement sampler)
{    sampler.clear();    sampler.addTestElement(ldapDefaultPanel.createTestElement());    sampler.addTestElement(loginPanel.createTestElement());    super.configureTestElement(sampler);}
0
public void clearGui()
{    super.clearGui();    ldapDefaultPanel.clearGui();    loginPanel.clearGui();}
0
public String getLabelResource()
{        return "ldap_testing_title";}
0
private void init()
{        setLayout(new BorderLayout(0, 5));    setBorder(makeBorder());        VerticalPanel mainPanel = new VerticalPanel();    loginPanel = new LoginConfigGui(false);    ldapDefaultPanel = new LdapConfigGui(false);        loginPanel.setBorder(BorderFactory.createTitledBorder(JMeterUtils.getResString("login_config")));    add(makeTitlePanel(), BorderLayout.NORTH);    mainPanel.add(loginPanel);    mainPanel.add(ldapDefaultPanel);    add(mainPanel, BorderLayout.CENTER);}
0
public void connect(String host, String port, String rootdn, String username, String password) throws NamingException
{    Hashtable<String, String> env = new Hashtable<>();        env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");        env.put(Context.PROVIDER_URL, "ldap://" + host + ":" + port + "/" + rootdn);        env.put(Context.REFERRAL, "throw");    env.put(Context.SECURITY_CREDENTIALS, password);    env.put(Context.SECURITY_PRINCIPAL, username);    dirContext = new InitialDirContext(env);}
0
public void disconnect()
{    try {        if (dirContext != null) {            dirContext.close();            dirContext = null;        }    } catch (NamingException e) {            }}
1
public boolean searchTest(String searchBase, String searchFilter) throws NamingException
{    SearchControls searchcontrols = new SearchControls(SearchControls.SUBTREE_SCOPE,     1L,     0,     null,     false,     false);    NamingEnumeration<?> ne = dirContext.search(searchBase, searchFilter, searchcontrols);    return ne.hasMore();}
0
public void modifyTest(ModificationItem[] mods, String string) throws NamingException
{    dirContext.modifyAttributes(string, mods);}
0
public void createTest(BasicAttributes basicattributes, String string) throws NamingException
{    dirContext.createSubcontext(string, basicattributes);}
0
public void deleteTest(String string) throws NamingException
{    dirContext.destroySubcontext(string);}
0
public static DirContext connect(String host, String port, String rootdn, String username, String password, String connTimeOut, boolean secure, boolean trustAll) throws NamingException
{    DirContext dirContext;        Hashtable<String, String> env = new Hashtable<>();        env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");    StringBuilder sb = new StringBuilder(80);    if (secure) {                sb.append("ldaps://");        if (trustAll) {                        env.put("java.naming.ldap.factory.socket", TrustAllSSLSocketFactory.class.getName());        }    } else {                sb.append("ldap://");    }    sb.append(host);    if (port.length() > 0) {                sb.append(":");        sb.append(port);    }        sb.append("/");    sb.append(rootdn);    env.put(Context.PROVIDER_URL, sb.toString());    if (log.isInfoEnabled()) {                    }    if (connTimeOut.length() > 0) {                env.put("com.sun.jndi.ldap.connect.timeout", connTimeOut);    }        env.put(Context.REFERRAL, "throw");        env.put("java.naming.batchsize", "0");    env.put(Context.SECURITY_CREDENTIALS, password);    env.put(Context.SECURITY_PRINCIPAL, username);    dirContext = new InitialDirContext(env);    return dirContext;}
1
public static void disconnect(DirContext dirContext)
{    if (dirContext == null) {                return;    }    try {        dirContext.close();    } catch (NamingException e) {            }}
1
public static NamingEnumeration<SearchResult> searchTest(DirContext dirContext, String searchBase, String searchFilter, int scope, long countlim, int timelim, String[] attrs, boolean retobj, boolean deref) throws NamingException
{    if (dirContext == null) {        throw new NamingException(CONTEXT_IS_NULL);    }    if (log.isDebugEnabled()) {            }    SearchControls searchcontrols = new SearchControls(scope, countlim, timelim, attrs, retobj, deref);    return dirContext.search(searchBase, searchFilter, searchcontrols);}
1
public static NamingEnumeration<SearchResult> compare(DirContext dirContext, String filter, String entrydn) throws NamingException
{    if (dirContext == null) {        throw new NamingException(CONTEXT_IS_NULL);    }    SearchControls searchcontrols = new SearchControls(0, 1, 0, new String[0], false, false);    return dirContext.search(entrydn, filter, searchcontrols);}
0
public static void moddnOp(DirContext dirContext, String ddn, String newdn) throws NamingException
{        if (dirContext == null) {        throw new NamingException(CONTEXT_IS_NULL);    }    dirContext.rename(ddn, newdn);}
1
public static void modifyTest(DirContext dirContext, ModificationItem[] mods, String string) throws NamingException
{    if (dirContext == null) {        throw new NamingException(CONTEXT_IS_NULL);    }    dirContext.modifyAttributes(string, mods);}
0
public static DirContext createTest(DirContext dirContext, Attributes attributes, String string) throws NamingException
{    if (dirContext == null) {        throw new NamingException(CONTEXT_IS_NULL);    }    return dirContext.createSubcontext(string, attributes);}
0
public static void deleteTest(DirContext dirContext, String string) throws NamingException
{    if (dirContext == null) {        throw new NamingException(CONTEXT_IS_NULL);    }    dirContext.destroySubcontext(string);}
0
public void setConnTimeOut(String connto)
{    setProperty(new StringProperty(CONNTO, connto));}
0
public String getConnTimeOut()
{    return getPropertyAsString(CONNTO);}
0
public void setSecure(String sec)
{    setProperty(new StringProperty(SECURE, sec));}
0
public boolean isSecure()
{    return getPropertyAsBoolean(SECURE);}
0
public void setTrustAll(String trust)
{    setProperty(new StringProperty(TRUSTALL, trust));}
0
public boolean isTrustAll()
{    return getPropertyAsBoolean(TRUSTALL);}
0
public boolean isParseFlag()
{    return getPropertyAsBoolean(PARSEFLAG);}
0
public void setParseFlag(String parseFlag)
{    setProperty(new StringProperty(PARSEFLAG, parseFlag));}
0
public String getUserDN()
{    return getPropertyAsString(USERDN);}
0
public void setUserDN(String newUserDN)
{    setProperty(new StringProperty(USERDN, newUserDN));}
0
public String getUserPw()
{    return getPropertyAsString(USERPW);}
0
public void setUserPw(String newUserPw)
{    setProperty(new StringProperty(USERPW, newUserPw));}
0
public void setServername(String servername)
{    setProperty(new StringProperty(SERVERNAME, servername));}
0
public void setPort(String port)
{    setProperty(new StringProperty(PORT, port));}
0
public String getServername()
{    return getPropertyAsString(SERVERNAME);}
0
public String getPort()
{    return getPropertyAsString(PORT);}
0
public void setRootdn(String newRootdn)
{    this.setProperty(ROOTDN, newRootdn);}
0
public String getRootdn()
{    return getPropertyAsString(ROOTDN);}
0
public String getScope()
{    return getPropertyAsString(SCOPE);}
0
public int getScopeAsInt()
{    return getPropertyAsInt(SCOPE);}
0
public void setScope(String newScope)
{    this.setProperty(SCOPE, newScope);}
0
public String getCountlim()
{    return getPropertyAsString(COUNTLIM);}
0
public long getCountlimAsLong()
{    return getPropertyAsLong(COUNTLIM);}
0
public void setCountlim(String newClim)
{    this.setProperty(COUNTLIM, newClim);}
0
public String getTimelim()
{    return getPropertyAsString(TIMELIM);}
0
public int getTimelimAsInt()
{    return getPropertyAsInt(TIMELIM);}
0
public void setTimelim(String newTlim)
{    this.setProperty(TIMELIM, newTlim);}
0
public boolean isRetobj()
{    return getPropertyAsBoolean(RETOBJ);}
0
public void setRetobj(String newRobj)
{    this.setProperty(RETOBJ, newRobj);}
0
public boolean isDeref()
{    return getPropertyAsBoolean(DEREF);}
0
public void setDeref(String newDref)
{    this.setProperty(DEREF, newDref);}
0
public void setTest(String newTest)
{    this.setProperty(TEST, newTest);}
0
public String getTest()
{    return getPropertyAsString(TEST);}
0
public void setAttrs(String newAttrs)
{    this.setProperty(ATTRIBS, newAttrs);}
0
public String getAttrs()
{    return getPropertyAsString(ATTRIBS);}
0
public void setBaseEntryDN(String newbaseentry)
{    setProperty(new StringProperty(BASE_ENTRY_DN, newbaseentry));}
0
public String getBaseEntryDN()
{    return getPropertyAsString(BASE_ENTRY_DN);}
0
public void setArguments(Arguments value)
{    setProperty(new TestElementProperty(ARGUMENTS, value));}
0
public Arguments getArguments()
{    return (Arguments) getProperty(ARGUMENTS).getObjectValue();}
0
public void setLDAPArguments(LDAPArguments value)
{    setProperty(new TestElementProperty(LDAPARGUMENTS, value));}
0
public LDAPArguments getLDAPArguments()
{    return (LDAPArguments) getProperty(LDAPARGUMENTS).getObjectValue();}
0
private Attributes getUserAttributes()
{    Attributes attrs = new BasicAttributes(true);    Attribute attr;    for (JMeterProperty jMeterProperty : getArguments()) {        Argument item = (Argument) jMeterProperty.getObjectValue();        attr = attrs.get(item.getName());        if (attr == null) {            attr = getBasicAttribute(item.getName(), item.getValue());        } else {            attr.add(item.getValue());        }        attrs.put(attr);    }    return attrs;}
0
private ModificationItem[] getUserModAttributes()
{    ModificationItem[] mods = new ModificationItem[getLDAPArguments().getArguments().size()];    PropertyIterator iter = getLDAPArguments().iterator();    int count = 0;    while (iter.hasNext()) {        BasicAttribute attr;        LDAPArgument item = (LDAPArgument) iter.next().getObjectValue();        if ((item.getValue()).length() == 0) {            attr = new BasicAttribute(item.getName());        } else {            attr = getBasicAttribute(item.getName(), item.getValue());        }        final String opcode = item.getOpcode();        if ("add".equals(opcode)) {                        mods[count++] = new ModificationItem(DirContext.ADD_ATTRIBUTE, attr);        } else if (        "delete".equals(opcode) || "remove".equals(opcode)) {                        mods[count++] = new ModificationItem(DirContext.REMOVE_ATTRIBUTE, attr);        } else if ("replace".equals(opcode)) {                        mods[count++] = new ModificationItem(DirContext.REPLACE_ATTRIBUTE, attr);        } else {                    }    }    return mods;}
1
private String[] getRequestAttributes(String reqAttr)
{    int index;    String[] mods;    int count = 0;    if (reqAttr.length() == 0) {                return null;    }    if (!reqAttr.endsWith(SEMI_COLON)) {        reqAttr = reqAttr + SEMI_COLON;    }    String attr = reqAttr;    while (attr.length() > 0) {        index = attr.indexOf(SEMI_COLON);        count += 1;        attr = attr.substring(index + 1);    }    if (count > 0) {        mods = new String[count];        attr = reqAttr;        count = 0;        while (attr.length() > 0) {            index = attr.indexOf(SEMI_COLON);            mods[count] = attr.substring(0, index);            count += 1;            attr = attr.substring(index + 1);        }    } else {        mods = null;    }    return mods;}
0
private BasicAttribute getBasicAttribute(String name, String value)
{    return new BasicAttribute(name, value);}
0
public String getLabel()
{    return     "ldap://" + this.getServername() + ":" +     getPort() + "/" +     this.getRootdn();}
0
private void addTest(DirContext dirContext, SampleResult res) throws NamingException
{    DirContext ctx = null;    try {        res.sampleStart();        ctx = LdapExtClient.createTest(dirContext, getUserAttributes(), getBaseEntryDN());    } finally {                LdapExtClient.disconnect(ctx);        res.sampleEnd();    }}
0
private void deleteTest(DirContext dirContext, SampleResult res) throws NamingException
{    try {        res.sampleStart();        LdapExtClient.deleteTest(dirContext, getPropertyAsString(DELETE));    } finally {        res.sampleEnd();    }}
0
private void modifyTest(DirContext dirContext, SampleResult res) throws NamingException
{    try {        res.sampleStart();        LdapExtClient.modifyTest(dirContext, getUserModAttributes(), getBaseEntryDN());    } finally {        res.sampleEnd();    }}
0
private void bindOp(SampleResult res) throws NamingException
{    DirContext ctx = ldapContexts.remove(getThreadName());    if (ctx != null) {        if (log.isWarnEnabled()) {                    }        LdapExtClient.disconnect(ctx);    }    try {        res.sampleStart();        ctx = LdapExtClient.connect(getServername(), getPort(), getRootdn(), getUserDN(), getUserPw(), getConnTimeOut(), isSecure(), isTrustAll());    } finally {        res.sampleEnd();    }    ldapContexts.put(getThreadName(), ctx);}
1
private void singleBindOp(SampleResult res) throws NamingException
{    try {        res.sampleStart();        DirContext ctx = LdapExtClient.connect(getServername(), getPort(), getRootdn(), getUserDN(), getUserPw(), getConnTimeOut(), isSecure(), isTrustAll());        LdapExtClient.disconnect(ctx);    } finally {        res.sampleEnd();    }}
0
private void renameTest(DirContext dirContext, SampleResult res) throws NamingException
{    try {        res.sampleStart();        LdapExtClient.moddnOp(dirContext, getPropertyAsString(MODDDN), getPropertyAsString(NEWDN));    } finally {        res.sampleEnd();    }}
0
private void unbindOp(DirContext dirContext, SampleResult res)
{    try {        res.sampleStart();        LdapExtClient.disconnect(dirContext);    } finally {        res.sampleEnd();    }    ldapContexts.remove(getThreadName());    }
1
public SampleResult sample(Entry e)
{    XMLBuffer xmlBuffer = new XMLBuffer();        xmlBuffer.openTag("ldapanswer");    SampleResult res = new SampleResult();    res.setResponseData("successfull", null);        res.setResponseMessage("Success");        res.setResponseCode("0");        res.setContentType("text/xml");    boolean isSuccessful = true;    res.setSampleLabel(getName());    DirContext dirContext = ldapContexts.get(getThreadName());    try {                xmlBuffer.openTag("operation");        final String testType = getTest();                xmlBuffer.tag("opertype", testType);                if (testType.equals(UNBIND)) {            res.setSamplerData("Unbind");                        xmlBuffer.tag("baseobj", getRootdn());                        xmlBuffer.tag("binddn", getUserDN());            unbindOp(dirContext, res);        } else if (testType.equals(BIND)) {            res.setSamplerData("Bind as " + getUserDN());                        xmlBuffer.tag("baseobj", getRootdn());                        xmlBuffer.tag("binddn", getUserDN());                        xmlBuffer.tag("connectionTO", getConnTimeOut());            bindOp(res);        } else if (testType.equals(SBIND)) {            res.setSamplerData("SingleBind as " + getUserDN());                        xmlBuffer.tag("baseobj", getRootdn());                        xmlBuffer.tag("binddn", getUserDN());                        xmlBuffer.tag("connectionTO", getConnTimeOut());            singleBindOp(res);        } else if (testType.equals(COMPARE)) {            res.setSamplerData("Compare " + getPropertyAsString(COMPAREFILT) + " " + getPropertyAsString(COMPAREDN));                        xmlBuffer.tag("comparedn", getPropertyAsString(COMPAREDN));                        xmlBuffer.tag("comparefilter", getPropertyAsString(COMPAREFILT));            NamingEnumeration<SearchResult> cmp = null;            try {                res.sampleStart();                cmp = LdapExtClient.compare(dirContext, getPropertyAsString(COMPAREFILT), getPropertyAsString(COMPAREDN));                if (!cmp.hasMore()) {                                        res.setResponseCode("5");                    res.setResponseMessage("compareFalse");                    isSuccessful = false;                }            } finally {                res.sampleEnd();                if (cmp != null) {                    cmp.close();                }            }        } else if (testType.equals(ADD)) {            res.setSamplerData("Add object " + getBaseEntryDN());                        xmlBuffer.tag("attributes", getArguments().toString());                        xmlBuffer.tag("dn", getBaseEntryDN());            addTest(dirContext, res);        } else if (testType.equals(DELETE)) {            res.setSamplerData("Delete object " + getBaseEntryDN());                        xmlBuffer.tag("dn", getBaseEntryDN());            deleteTest(dirContext, res);        } else if (testType.equals(MODIFY)) {            res.setSamplerData("Modify object " + getBaseEntryDN());                        xmlBuffer.tag("dn", getBaseEntryDN());                        xmlBuffer.tag("attributes", getLDAPArguments().toString());            modifyTest(dirContext, res);        } else if (testType.equals(RENAME)) {            res.setSamplerData("ModDN object " + getPropertyAsString(MODDDN) + " to " + getPropertyAsString(NEWDN));                        xmlBuffer.tag("dn", getPropertyAsString(MODDDN));                        xmlBuffer.tag("newdn", getPropertyAsString(NEWDN));            renameTest(dirContext, res);        } else if (testType.equals(SEARCH)) {            final String scopeStr = getScope();            final int scope = getScopeAsInt();            final String searchFilter = getPropertyAsString(SEARCHFILTER);            final String searchBase = getPropertyAsString(SEARCHBASE);            final String timeLimit = getTimelim();            final String countLimit = getCountlim();            res.setSamplerData("Search with filter " + searchFilter);                        xmlBuffer.tag("searchfilter", StringEscapeUtils.escapeXml10(searchFilter));                        xmlBuffer.tag("baseobj", getRootdn());                        xmlBuffer.tag("searchbase", searchBase);                        xmlBuffer.tag("scope", scopeStr);                        xmlBuffer.tag("countlimit", countLimit);                        xmlBuffer.tag("timelimit", timeLimit);            NamingEnumeration<SearchResult> srch = null;            try {                res.sampleStart();                srch = LdapExtClient.searchTest(dirContext, searchBase, searchFilter, scope, getCountlimAsLong(), getTimelimAsInt(), getRequestAttributes(getAttrs()), isRetobj(), isDeref());                if (isParseFlag()) {                    try {                                                xmlBuffer.openTag("searchresults");                        writeSearchResults(xmlBuffer, srch);                    } finally {                                                xmlBuffer.closeTag("searchresults");                    }                } else {                                        xmlBuffer.tag(                    "searchresults",                     "hasElements=" + srch.hasMoreElements());                }            } finally {                if (srch != null) {                    srch.close();                }                res.sampleEnd();            }        }    } catch (NamingException ex) {        String returnData = ex.toString();        final int indexOfLDAPErrCode = returnData.indexOf(RETURN_CODE_PREFIX);        if (indexOfLDAPErrCode >= 0) {            res.setResponseCode(returnData.substring(indexOfLDAPErrCode + RETURN_CODE_PREFIX.length(), indexOfLDAPErrCode + 19));                        res.setResponseMessage(returnData.substring(indexOfLDAPErrCode + ERROR_MSG_START_INDEX, returnData.indexOf(']')));        } else {            res.setResponseMessage(returnData);                        res.setResponseCode("800");        }        isSuccessful = false;    } catch (Exception ex) {                String returnData = ex.toString();        res.setResponseCode("500");                res.setResponseMessage(returnData);        isSuccessful = false;    } finally {                xmlBuffer.closeTag("operation");                xmlBuffer.tag("responsecode", res.getResponseCode());                xmlBuffer.tag("responsemessage", res.getResponseMessage());        res.setResponseData(xmlBuffer.toString(), null);        res.setDataType(SampleResult.TEXT);        res.setSuccessful(isSuccessful);    }    return res;}
1
private void writeSearchResults(final XMLBuffer xmlb, final NamingEnumeration<SearchResult> srch) throws NamingException
{    final ArrayList<SearchResult> sortedResults = new ArrayList<>(MAX_SORTED_RESULTS);    final String searchBase = getPropertyAsString(SEARCHBASE);    final String rootDn = getRootdn();        try {        while (srch.hasMore() && (sortedResults.size() < MAX_SORTED_RESULTS)) {            final SearchResult sr = srch.next();                        normaliseSearchDN(sr, searchBase, rootDn);            sortedResults.add(sr);        }    } finally {                sortResults(sortedResults);        for (final SearchResult sr : sortedResults) {            writeSearchResult(sr, xmlb);        }    }    while (srch.hasMore()) {                final SearchResult sr = srch.next();        normaliseSearchDN(sr, searchBase, rootDn);        writeSearchResult(sr, xmlb);    }}
0
private void writeSearchResult(final SearchResult sr, final XMLBuffer xmlb) throws NamingException
{    final Attributes attrs = sr.getAttributes();    final int size = attrs.size();    final List<Attribute> sortedAttrs = new ArrayList<>(size);        xmlb.openTag("searchresult");        xmlb.tag("dn", sr.getName());        xmlb.tag("returnedattr", Integer.toString(size));        xmlb.openTag("attributes");    try {        for (NamingEnumeration<? extends Attribute> en = attrs.getAll(); en.hasMore(); ) {            final Attribute attr = en.next();            sortedAttrs.add(attr);        }        sortAttributes(sortedAttrs);        for (final Attribute attr : sortedAttrs) {            StringBuilder sb = new StringBuilder();            if (attr.size() == 1) {                sb.append(getWriteValue(attr.get()));            } else {                final ArrayList<String> sortedVals = new ArrayList<>(attr.size());                for (NamingEnumeration<?> ven = attr.getAll(); ven.hasMore(); ) {                    final Object value = getWriteValue(ven.next());                    sortedVals.add(value.toString());                }                Collections.sort(sortedVals);                sb.append(StringUtils.join(sortedVals, ", "));            }            xmlb.tag(attr.getID(), sb);        }    } finally {                xmlb.closeTag("attributes");                xmlb.closeTag("searchresult");    }}
0
private void sortAttributes(final List<Attribute> sortedAttrs)
{    sortedAttrs.sort((o1, o2) -> {        String nm1 = o1.getID();        String nm2 = o2.getID();        return nm1.compareTo(nm2);    });}
0
private void sortResults(final List<SearchResult> sortedResults)
{    sortedResults.sort(new Comparator<SearchResult>() {        private int compareToReverse(final String s1, final String s2) {            int len1 = s1.length();            int len2 = s2.length();            int s1i = len1 - 1;            int s2i = len2 - 1;            for (; (s1i >= 0) && (s2i >= 0); s1i--, s2i--) {                char c1 = s1.charAt(s1i);                char c2 = s2.charAt(s2i);                if (c1 != c2) {                    return c1 - c2;                }            }            return len1 - len2;        }        @Override        public int compare(SearchResult o1, SearchResult o2) {            String nm1 = o1.getName();            String nm2 = o2.getName();            if (nm1 == null) {                nm1 = "";            }            if (nm2 == null) {                nm2 = "";            }            return compareToReverse(nm1, nm2);        }    });}
0
private int compareToReverse(final String s1, final String s2)
{    int len1 = s1.length();    int len2 = s2.length();    int s1i = len1 - 1;    int s2i = len2 - 1;    for (; (s1i >= 0) && (s2i >= 0); s1i--, s2i--) {        char c1 = s1.charAt(s1i);        char c2 = s2.charAt(s2i);        if (c1 != c2) {            return c1 - c2;        }    }    return len1 - len2;}
0
public int compare(SearchResult o1, SearchResult o2)
{    String nm1 = o1.getName();    String nm2 = o2.getName();    if (nm1 == null) {        nm1 = "";    }    if (nm2 == null) {        nm2 = "";    }    return compareToReverse(nm1, nm2);}
0
private String normaliseSearchDN(final SearchResult sr, final String searchBase, final String rootDn)
{    String srName = sr.getName();    if (!srName.endsWith(searchBase)) {        if (srName.length() > 0) {            srName = srName + ',';        }        srName = srName + searchBase;    }    if ((rootDn.length() > 0) && !srName.endsWith(rootDn)) {        if (srName.length() > 0) {            srName = srName + ',';        }        srName = srName + rootDn;    }    sr.setName(srName);    return srName;}
0
private String getWriteValue(final Object value)
{    if (value instanceof String) {                return StringEscapeUtils.escapeXml10((String) value);    }    if (value instanceof byte[]) {        return StringEscapeUtils.escapeXml10(new String((byte[]) value, StandardCharsets.UTF_8));    }    return StringEscapeUtils.escapeXml10(value.toString());}
0
public void testStarted()
{        testStarted("");}
0
public void testEnded()
{        testEnded("");}
0
public void testStarted(String host)
{}
0
public void testEnded(String host)
{    for (Map.Entry<String, DirContext> entry : ldapContexts.entrySet()) {        DirContext dc = entry.getValue();        try {            if (log.isWarnEnabled()) {                            }            dc.close();        } catch (NamingException ignored) {                }    }    ldapContexts.clear();}
1
public boolean applies(ConfigTestElement configElement)
{    String guiClass = configElement.getProperty(TestElement.GUI_CLASS).getStringValue();    return APPLIABLE_CONFIG_CLASSES.contains(guiClass);}
0
public String getUsername()
{    return getPropertyAsString(ConfigTestElement.USERNAME);}
0
public String getPassword()
{    return getPropertyAsString(ConfigTestElement.PASSWORD);}
0
public void setServername(String servername)
{    setProperty(new StringProperty(SERVERNAME, servername));}
0
public void setPort(String port)
{    setProperty(new StringProperty(PORT, port));}
0
public String getServername()
{    return getPropertyAsString(SERVERNAME);}
0
public String getPort()
{    return getPropertyAsString(PORT);}
0
public void setRootdn(String newRootdn)
{    this.setProperty(ROOTDN, newRootdn);}
0
public String getRootdn()
{    return getPropertyAsString(ROOTDN);}
0
public void setTest(String newTest)
{    this.setProperty(TEST, newTest);}
0
public String getTest()
{    return getPropertyAsString(TEST);}
0
public void setUserDefinedTest(boolean value)
{    setProperty(new BooleanProperty(USER_DEFINED, value));}
0
public boolean getUserDefinedTest()
{    return getPropertyAsBoolean(USER_DEFINED);}
0
public void setBaseEntryDN(String newbaseentry)
{    setProperty(new StringProperty(BASE_ENTRY_DN, newbaseentry));}
0
public String getBaseEntryDN()
{    return getPropertyAsString(BASE_ENTRY_DN);}
0
public void setArguments(Arguments value)
{    setProperty(new TestElementProperty(ARGUMENTS, value));}
0
public Arguments getArguments()
{    return (Arguments) getProperty(ARGUMENTS).getObjectValue();}
0
private BasicAttributes getUserAttributes()
{        BasicAttribute basicattribute = new BasicAttribute("objectclass");        basicattribute.add("top");        basicattribute.add("person");        basicattribute.add("organizationalPerson");        basicattribute.add("inetOrgPerson");    BasicAttributes attrs = new BasicAttributes(true);    attrs.put(basicattribute);    BasicAttribute attr;    for (JMeterProperty jMeterProperty : getArguments()) {        Argument item = (Argument) jMeterProperty.getObjectValue();        attr = getBasicAttribute(item.getName(), item.getValue());        attrs.put(attr);    }    return attrs;}
0
private ModificationItem[] getUserModAttributes()
{    ModificationItem[] mods = new ModificationItem[getArguments().getArguments().size()];    BasicAttribute attr;    PropertyIterator iter = getArguments().iterator();    int count = 0;    while (iter.hasNext()) {        Argument item = (Argument) iter.next().getObjectValue();        attr = getBasicAttribute(item.getName(), item.getValue());        mods[count] = new ModificationItem(DirContext.REPLACE_ATTRIBUTE, attr);        count = +1;    }    return mods;}
0
private ModificationItem[] getModificationItem()
{    ModificationItem[] mods = new ModificationItem[2];            Attribute mod0 = new BasicAttribute("userpassword", "secret");            Attribute mod1 = new BasicAttribute("mobile", "123-456-1234");    mods[0] = new ModificationItem(DirContext.REPLACE_ATTRIBUTE, mod0);    mods[1] = new ModificationItem(DirContext.ADD_ATTRIBUTE, mod1);    return mods;}
0
private BasicAttributes getBasicAttributes()
{    BasicAttributes basicattributes = new BasicAttributes();        BasicAttribute basicattribute = new BasicAttribute("objectclass");        basicattribute.add("top");        basicattribute.add("person");        basicattribute.add("organizationalPerson");        basicattribute.add("inetOrgPerson");    basicattributes.put(basicattribute);        String s1 = "User";        String s3 = "Test";        String s5 = "user";        String s6 = "test";    COUNTER.incrementAndGet();        basicattributes.put(new BasicAttribute("givenname", s1));        basicattributes.put(new BasicAttribute("sn", s3));        basicattributes.put(new BasicAttribute("cn", "TestUser" + COUNTER.get()));        basicattributes.put(new BasicAttribute("uid", s5));        basicattributes.put(new BasicAttribute("userpassword", s6));        setProperty(new StringProperty(ADD, "cn=TestUser" + COUNTER.get()));    return basicattributes;}
0
private BasicAttribute getBasicAttribute(String name, String value)
{    BasicAttribute attr = new BasicAttribute(name, value);    return attr;}
0
public String getLabel()
{    return "ldap://" + this.getServername() + ":" + getPort() + "/" + this.getRootdn();}
0
private void addTest(LdapClient ldap, SampleResult res) throws NamingException
{    if (getPropertyAsBoolean(USER_DEFINED)) {        res.sampleStart();        ldap.createTest(getUserAttributes(), getPropertyAsString(BASE_ENTRY_DN));        res.sampleEnd();    } else {        res.sampleStart();        ldap.createTest(getBasicAttributes(), getPropertyAsString(ADD));        res.sampleEnd();        ldap.deleteTest(getPropertyAsString(ADD));    }}
0
private void deleteTest(LdapClient ldap, SampleResult res) throws NamingException
{    if (!getPropertyAsBoolean(USER_DEFINED)) {        ldap.createTest(getBasicAttributes(), getPropertyAsString(ADD));        setProperty(new StringProperty(DELETE, getPropertyAsString(ADD)));    }    res.sampleStart();    ldap.deleteTest(getPropertyAsString(DELETE));    res.sampleEnd();}
0
private void searchTest(LdapClient ldap, SampleResult res) throws NamingException
{    if (!getPropertyAsBoolean(USER_DEFINED)) {        ldap.createTest(getBasicAttributes(), getPropertyAsString(ADD));        setProperty(new StringProperty(SEARCHBASE, getPropertyAsString(ADD)));        setProperty(new StringProperty(SEARCHFILTER, getPropertyAsString(ADD)));    }    res.sampleStart();    searchFoundEntries = ldap.searchTest(getPropertyAsString(SEARCHBASE), getPropertyAsString(SEARCHFILTER));    res.sampleEnd();    if (!getPropertyAsBoolean(USER_DEFINED)) {        ldap.deleteTest(getPropertyAsString(ADD));    }}
0
private void modifyTest(LdapClient ldap, SampleResult res) throws NamingException
{    if (getPropertyAsBoolean(USER_DEFINED)) {        res.sampleStart();        ldap.modifyTest(getUserModAttributes(), getPropertyAsString(BASE_ENTRY_DN));        res.sampleEnd();    } else {        ldap.createTest(getBasicAttributes(), getPropertyAsString(ADD));        setProperty(new StringProperty(MODIFY, getPropertyAsString(ADD)));        res.sampleStart();        ldap.modifyTest(getModificationItem(), getPropertyAsString(MODIFY));        res.sampleEnd();        ldap.deleteTest(getPropertyAsString(ADD));    }}
0
public SampleResult sample(Entry e)
{    SampleResult res = new SampleResult();    boolean isSuccessful = false;    res.setSampleLabel(getName());        res.setSamplerData(getPropertyAsString(TEST));    LdapClient ldap = new LdapClient();    try {        ldap.connect(getServername(), getPort(), getRootdn(), getUsername(), getPassword());        if (getPropertyAsString(TEST).equals(ADD)) {            addTest(ldap, res);        } else if (getPropertyAsString(TEST).equals(DELETE)) {            deleteTest(ldap, res);        } else if (getPropertyAsString(TEST).equals(MODIFY)) {            modifyTest(ldap, res);        } else if (getPropertyAsString(TEST).equals(SEARCHBASE)) {            searchTest(ldap, res);        }                if (getPropertyAsString(TEST).equals(SEARCHBASE) && !searchFoundEntries) {                        res.setResponseCode("201");            res.setResponseMessage("OK - no results");            res.setResponseData("successful - no results", null);        } else {            res.setResponseCodeOK();                        res.setResponseMessage("OK");            res.setResponseData("successful", null);        }        res.setDataType(SampleResult.TEXT);        isSuccessful = true;    } catch (Exception ex) {                        res.setResponseCode("500");        res.setResponseMessage(ex.toString());        isSuccessful = false;    } finally {        ldap.disconnect();    }        res.setSuccessful(isSuccessful);    return res;}
1
public boolean applies(ConfigTestElement configElement)
{    String guiClass = configElement.getProperty(TestElement.GUI_CLASS).getStringValue();    return APPLIABLE_CONFIG_CLASSES.contains(guiClass);}
0
public void testLDAPArgumentCreation() throws Exception
{    LDAPArgumentsPanel gui = new LDAPArgumentsPanel();    gui.tableModel.addRow(new LDAPArgument());    gui.tableModel.setValueAt("howdy", 0, 0);    gui.tableModel.addRow(new LDAPArgument());    gui.tableModel.setValueAt("doody", 0, 1);    assertEquals("=", ((LDAPArgument) ((LDAPArguments) gui.createTestElement()).getArguments().get(0).getObjectValue()).getMetaData());}
0
public String getLabelResource()
{        return "mail_reader_title";}
0
public void configure(TestElement element)
{    MailReaderSampler mrs = (MailReaderSampler) element;    serverTypeBox.setText(mrs.getServerType());    folderBox.setText(mrs.getFolder());    serverBox.setText(mrs.getServer());    portBox.setText(mrs.getPort());    usernameBox.setText(mrs.getUserName());    passwordBox.setText(mrs.getPassword());    if (mrs.getNumMessages() == MailReaderSampler.ALL_MESSAGES) {        allMessagesButton.setSelected(true);                someMessagesField.setText("0");    } else {        someMessagesButton.setSelected(true);        someMessagesField.setText(mrs.getNumMessagesString());    }    headerOnlyBox.setSelected(mrs.getHeaderOnly());    deleteBox.setSelected(mrs.getDeleteMessages());    storeMimeMessageBox.setSelected(mrs.isStoreMimeMessage());    securitySettingsPanel.configure(element);    super.configure(element);}
0
public TestElement createTestElement()
{    MailReaderSampler sampler = new MailReaderSampler();    modifyTestElement(sampler);    return sampler;}
0
public void modifyTestElement(TestElement te)
{    te.clear();    configureTestElement(te);    MailReaderSampler mrs = (MailReaderSampler) te;    mrs.setServerType(serverTypeBox.getText());    mrs.setFolder(folderBox.getText());    mrs.setServer(serverBox.getText());    mrs.setPort(portBox.getText());    mrs.setUserName(usernameBox.getText());    mrs.setPassword(passwordBox.getText());    if (allMessagesButton.isSelected()) {        mrs.setNumMessages(MailReaderSampler.ALL_MESSAGES);    } else {        mrs.setNumMessages(someMessagesField.getText());    }    mrs.setHeaderOnly(headerOnlyBox.isSelected());    mrs.setDeleteMessages(deleteBox.isSelected());    mrs.setStoreMimeMessage(storeMimeMessageBox.isSelected());    securitySettingsPanel.modifyTestElement(te);}
0
private void init()
{        setLayout(new BorderLayout());    setBorder(makeBorder());    JPanel settingsPanel = new JPanel(new GridBagLayout());    GridBagConstraints gbc = getConstraints();    serverTypeBox = new JTextField(20);    serverTypeBox.addActionListener(this);    serverTypeBox.addFocusListener(this);    addField(settingsPanel, serverTypeLabel, serverTypeBox, gbc);    serverBox = new JTextField(20);    addField(settingsPanel, serverLabel, serverBox, gbc);    portBox = new JTextField(20);    addField(settingsPanel, portLabel, portBox, gbc);    usernameBox = new JTextField(20);    addField(settingsPanel, accountLabel, usernameBox, gbc);    passwordBox = new JPasswordField(20);    addField(settingsPanel, passwordLabel, passwordBox, gbc);    folderLabel = new JLabel(folderLabelStr);    folderBox = new JTextField(INBOX, 20);    addField(settingsPanel, folderLabel, folderBox, gbc);    HorizontalPanel numMessagesPanel = new HorizontalPanel();    numMessagesPanel.add(new JLabel(numMessagesLabel));    ButtonGroup nmbg = new ButtonGroup();    allMessagesButton = new JRadioButton(allMessagesLabel);    allMessagesButton.addChangeListener(e -> {        if (allMessagesButton.isSelected()) {            someMessagesField.setEnabled(false);        }    });    someMessagesButton = new JRadioButton();    someMessagesButton.addChangeListener(e -> {        if (someMessagesButton.isSelected()) {            someMessagesField.setEnabled(true);        }    });    nmbg.add(allMessagesButton);    nmbg.add(someMessagesButton);    someMessagesField = new JTextField(5);    allMessagesButton.setSelected(true);    numMessagesPanel.add(allMessagesButton);    numMessagesPanel.add(someMessagesButton);    numMessagesPanel.add(someMessagesField);    headerOnlyBox = new JCheckBox(headerOnlyLabel);    deleteBox = new JCheckBox(deleteLabel);    storeMimeMessageBox = new JCheckBox(storeMime);    securitySettingsPanel = new SecuritySettingsPanel();    JPanel settings = new VerticalPanel();    settings.add(Box.createVerticalStrut(5));    settings.add(settingsPanel);    settings.add(numMessagesPanel);    settings.add(headerOnlyBox);    settings.add(deleteBox);    settings.add(storeMimeMessageBox);    settings.add(securitySettingsPanel);    add(makeTitlePanel(), BorderLayout.NORTH);    add(settings, BorderLayout.CENTER);}
0
private void addField(JPanel panel, JLabel label, JComponent field, GridBagConstraints gbc)
{    gbc.fill = GridBagConstraints.NONE;    gbc.anchor = GridBagConstraints.LINE_END;    panel.add(label, gbc);    gbc.gridx++;    gbc.weightx = 1;    gbc.fill = GridBagConstraints.HORIZONTAL;    gbc.anchor = GridBagConstraints.LINE_START;    panel.add(field, gbc);    nextLine(gbc);}
0
private void addField(JPanel panel, String text, JComponent field, GridBagConstraints gbc)
{    addField(panel, new JLabel(text), field, gbc);}
0
private void nextLine(GridBagConstraints gbc)
{    gbc.gridx = 0;    gbc.gridy++;    gbc.weightx = 0;}
0
private GridBagConstraints getConstraints()
{    GridBagConstraints gbc = new GridBagConstraints();    gbc.gridheight = 1;    gbc.gridwidth = 1;    gbc.gridx = 0;    gbc.gridy = 0;    gbc.weightx = 0;    gbc.weighty = 0;    return gbc;}
0
public void clearGui()
{    super.clearGui();    initGui();}
0
private void initGui()
{    allMessagesButton.setSelected(true);    headerOnlyBox.setSelected(false);    deleteBox.setSelected(false);    storeMimeMessageBox.setSelected(false);    folderBox.setText(INBOX);    serverTypeBox.setText(MailReaderSampler.DEFAULT_PROTOCOL);        passwordBox.setText("");        serverBox.setText("");        portBox.setText("");        usernameBox.setText("");}
0
public void actionPerformed(ActionEvent e)
{    final String item = serverTypeBox.getText();    if (item.equals("pop3") || item.equals("pop3s")) {        folderLabel.setEnabled(false);        folderBox.setText(INBOX);        folderBox.setEnabled(false);    } else {        folderLabel.setEnabled(true);        folderBox.setEnabled(true);    }}
0
public void focusGained(FocusEvent e)
{}
0
public void focusLost(FocusEvent e)
{    actionPerformed(null);}
0
public void appendMessages(Message[] messages) throws MessagingException
{    throw new MessagingException("Not supported");}
0
public void close(boolean expunge) throws MessagingException
{    this.store.close();    isOpen = false;}
0
public boolean create(int type) throws MessagingException
{    return false;}
0
public boolean delete(boolean recurse) throws MessagingException
{    return false;}
0
public boolean exists() throws MessagingException
{    return true;}
0
public Message[] expunge() throws MessagingException
{    return new Message[0];}
0
public Folder getFolder(String name) throws MessagingException
{    return this;}
0
public String getFullName()
{    return this.toString();}
0
public Message getMessage(int index) throws MessagingException
{    File f;    if (isFile) {        f = folderPath;    } else {        f = new File(folderPath, String.format(FILENAME_FORMAT, Integer.valueOf(index)));    }    try (InputStream fis = new FileInputStream(f);        InputStream bis = new BufferedInputStream(fis)) {        return new MailFileMessage(this, bis, index);    } catch (IOException e) {        throw new MessagingException("Cannot open folder: " + e.getMessage(), e);    }}
0
public int getMessageCount() throws MessagingException
{    if (!isOpen) {        return -1;    }    if (isFile) {        return 1;    }    File[] listFiles = folderPath.listFiles(FILENAME_FILTER);    return listFiles != null ? listFiles.length : 0;}
0
public String getName()
{    return this.toString();}
0
public Folder getParent() throws MessagingException
{    return null;}
0
public Flags getPermanentFlags()
{    return null;}
0
public char getSeparator() throws MessagingException
{    return '/';}
0
public int getType() throws MessagingException
{    return HOLDS_MESSAGES;}
0
public boolean hasNewMessages() throws MessagingException
{    return false;}
0
public boolean isOpen()
{    return isOpen;}
0
public Folder[] list(String pattern) throws MessagingException
{    return new Folder[] { this };}
0
public void open(int mode) throws MessagingException
{    if (mode != READ_ONLY) {        throw new MessagingException("Implementation only supports read-only access");    }    this.mode = mode;    isOpen = true;}
0
public boolean renameTo(Folder newName) throws MessagingException
{    return false;}
0
protected boolean protocolConnect(String host, int port, String user, String password) throws MessagingException
{    File base = new File(host);    if (base.isDirectory() || base.isFile()) {        return true;    }    throw new MessagingException("Host must be a valid directory or file");}
0
public Folder getDefaultFolder() throws MessagingException
{    return new MailFileFolder(this, "");}
0
public Folder getFolder(String path) throws MessagingException
{    return new MailFileFolder(this, path);}
0
public Folder getFolder(URLName path) throws MessagingException
{    return new MailFileFolder(this, path);}
0
public boolean isUseLocalTrustStore()
{    return getPropertyAsBoolean(SecuritySettingsPanel.USE_LOCAL_TRUSTSTORE);}
0
public String getTrustStoreToUse()
{    return getPropertyAsString(SecuritySettingsPanel.TRUSTSTORE_TO_USE);}
0
public boolean isUseSSL()
{    return getPropertyAsBoolean(SecuritySettingsPanel.USE_SSL);}
0
public boolean isUseStartTLS()
{    return getPropertyAsBoolean(SecuritySettingsPanel.USE_STARTTLS);}
0
public boolean isTrustAllCerts()
{    return getPropertyAsBoolean(SecuritySettingsPanel.SSL_TRUST_ALL_CERTS);}
0
public boolean isEnforceStartTLS()
{    return getPropertyAsBoolean(SecuritySettingsPanel.ENFORCE_STARTTLS);}
0
public SampleResult sample(Entry e)
{    SampleResult parent = new SampleResult();        boolean isOK = false;    final boolean deleteMessages = getDeleteMessages();    final String serverProtocol = getServerType();    parent.setSampleLabel(getName());    String samplerString = toString();    parent.setSamplerData(samplerString);    /*         * Perform the sampling         */        parent.sampleStart();    try {                Properties props = new Properties();        if (isUseStartTLS()) {                        props.setProperty(mailProp(serverProtocol, "starttls.enable"), TRUE);            if (isEnforceStartTLS()) {                                                props.setProperty(mailProp(serverProtocol, "starttls.require"), TRUE);            }        }        if (isTrustAllCerts()) {            if (isUseSSL() || isUseStartTLS()) {                                props.setProperty(mailProp(serverProtocol, "ssl.socketFactory.class"), TRUST_ALL_SOCKET_FACTORY);                                props.setProperty(mailProp(serverProtocol, "ssl.socketFactory.fallback"), FALSE);            }        } else if (isUseLocalTrustStore()) {            File truststore = new File(getTrustStoreToUse());                        if (!truststore.exists()) {                                truststore = new File(FileServer.getFileServer().getBaseDir(), getTrustStoreToUse());                                if (!truststore.exists()) {                                        throw new IOException("Local truststore file not found. Also not available under : " + truststore.getAbsolutePath());                }            }            if (isUseSSL() || isUseStartTLS()) {                                                props.put(                mailProp(serverProtocol, "ssl.socketFactory"), new LocalTrustStoreSSLSocketFactory(truststore));                                props.put(mailProp(serverProtocol, "ssl.socketFactory.fallback"), FALSE);            }        }        addCustomProperties(props);                Session session = Session.getInstance(props, null);                Store store = session.getStore(serverProtocol);        store.connect(getServer(), getPortAsInt(), getUserName(), getPassword());                Folder folder = store.getFolder(getFolder());        if (deleteMessages) {            folder.open(Folder.READ_WRITE);        } else {            folder.open(Folder.READ_ONLY);        }        final int messageTotal = folder.getMessageCount();        int n = getNumMessages();        if (n == ALL_MESSAGES || n > messageTotal) {            n = messageTotal;        }                Message[] messages = folder.getMessages(1, n);        String pdata = messages.length + " messages found\n";        parent.setResponseData(pdata, null);        parent.setDataType(SampleResult.TEXT);                parent.setContentType("text/plain");        final boolean headerOnly = getHeaderOnly();        busy = true;        for (Message message : messages) {            StringBuilder cdata = new StringBuilder();            SampleResult child = new SampleResult();            child.sampleStart();                        cdata.append("Message ");            cdata.append(message.getMessageNumber());            child.setSampleLabel(cdata.toString());            child.setSamplerData(cdata.toString());            cdata.setLength(0);            final String contentType = message.getContentType();                        child.setContentType(contentType);                        child.setDataEncoding(RFC_822_DEFAULT_ENCODING);                        child.setEncodingAndType(contentType);            if (isStoreMimeMessage()) {                                ByteArrayOutputStream bout = new ByteArrayOutputStream();                message.writeTo(bout);                                child.setResponseData(bout.toByteArray());                child.setDataType(SampleResult.TEXT);            } else {                                @SuppressWarnings("unchecked")                Enumeration<Header> hdrs = message.getAllHeaders();                while (hdrs.hasMoreElements()) {                    Header hdr = hdrs.nextElement();                    String value = hdr.getValue();                    try {                        value = MimeUtility.decodeText(value);                    } catch (UnsupportedEncodingException uce) {                                        }                    cdata.append(hdr.getName()).append(": ").append(value).append("\n");                }                child.setResponseHeaders(cdata.toString());                cdata.setLength(0);                if (!headerOnly) {                    appendMessageData(child, message);                }            }            if (deleteMessages) {                message.setFlag(Flags.Flag.DELETED, true);            }            child.setResponseOK();            if (child.getEndTime() == 0) {                                child.sampleEnd();            }            parent.addSubResult(child);        }                folder.close(true);        store.close();        parent.setResponseCodeOK();        parent.setResponseMessageOK();        isOK = true;    } catch (NoClassDefFoundError | IOException ex) {                                parent.setResponseCode("500");        parent.setResponseMessage(ex.toString());    } catch (MessagingException ex) {                                parent.setResponseCode("500");                parent.setResponseMessage(ex.toString() + "\n" + samplerString);    } finally {        busy = false;    }    if (parent.getEndTime() == 0) {                parent.sampleEnd();    }    parent.setSuccessful(isOK);    return parent;}
1
protected void addCustomProperties(Properties props)
{    Properties jMeterProperties = JMeterUtils.getJMeterProperties();    @SuppressWarnings("unchecked")    Enumeration<String> enums = (Enumeration<String>) jMeterProperties.propertyNames();    while (enums.hasMoreElements()) {        String key = enums.nextElement();        if (key.startsWith("mail.")) {            String value = jMeterProperties.getProperty(key);            props.put(key, value);        }    }}
0
private void appendMessageData(SampleResult child, Message message) throws MessagingException, IOException
{    StringBuilder cdata = new StringBuilder();        cdata.append("Date: ");        cdata.append(message.getSentDate());    cdata.append(NEW_LINE);        cdata.append("To: ");        Address[] recips = message.getAllRecipients();    for (int j = 0; recips != null && j < recips.length; j++) {        cdata.append(recips[j].toString());        if (j < recips.length - 1) {                        cdata.append("; ");        }    }    cdata.append(NEW_LINE);        cdata.append("From: ");        Address[] from = message.getFrom();    for (int j = 0; from != null && j < from.length; j++) {        cdata.append(from[j].toString());        if (j < from.length - 1) {                        cdata.append("; ");        }    }    cdata.append(NEW_LINE);        cdata.append("Subject: ");    cdata.append(message.getSubject());    cdata.append(NEW_LINE);    cdata.append(NEW_LINE);    Object content = message.getContent();    if (content instanceof MimeMultipart) {        appendMultiPart(child, cdata, (MimeMultipart) content);    } else if (content instanceof InputStream) {        child.setResponseData(IOUtils.toByteArray((InputStream) content));    } else {        cdata.append(content);        child.setResponseData(cdata.toString(), child.getDataEncodingNoDefault());    }}
0
private void appendMultiPart(SampleResult child, StringBuilder cdata, MimeMultipart mmp) throws MessagingException, IOException
{    String preamble = mmp.getPreamble();    if (preamble != null) {        cdata.append(preamble);    }    child.setResponseData(cdata.toString(), child.getDataEncodingNoDefault());    int count = mmp.getCount();    for (int j = 0; j < count; j++) {        BodyPart bodyPart = mmp.getBodyPart(j);        final Object bodyPartContent = bodyPart.getContent();        final String contentType = bodyPart.getContentType();        SampleResult sr = new SampleResult();        sr.setSampleLabel("Part: " + j);        sr.setContentType(contentType);        sr.setDataEncoding(RFC_822_DEFAULT_ENCODING);        sr.setEncodingAndType(contentType);        sr.sampleStart();        if (bodyPartContent instanceof InputStream) {            sr.setResponseData(IOUtils.toByteArray((InputStream) bodyPartContent));        } else if (bodyPartContent instanceof MimeMultipart) {            appendMultiPart(sr, cdata, (MimeMultipart) bodyPartContent);        } else {            sr.setResponseData(bodyPartContent.toString(), sr.getDataEncodingNoDefault());        }        sr.setResponseOK();        if (sr.getEndTime() == 0) {                        sr.sampleEnd();        }        child.addSubResult(sr);    }}
0
public void setServerType(String serverType)
{    setProperty(SERVER_TYPE, serverType);}
0
public String getServerType()
{    return getPropertyAsString(SERVER_TYPE);}
0
public void setServer(String server)
{    setProperty(SERVER, server);}
0
public String getServer()
{    return getPropertyAsString(SERVER);}
0
public String getPort()
{    return getPropertyAsString(PORT);}
0
private int getPortAsInt()
{    return getPropertyAsInt(PORT, -1);}
0
public void setPort(String port)
{    setProperty(PORT, port, "");}
0
public void setUserName(String username)
{    setProperty(USERNAME, username);}
0
public String getUserName()
{    return getPropertyAsString(USERNAME);}
0
public void setPassword(String password)
{    setProperty(PASSWORD, password);}
0
public String getPassword()
{    return getPropertyAsString(PASSWORD);}
0
public void setFolder(String folder)
{    setProperty(FOLDER, folder);}
0
public String getFolder()
{    return getPropertyAsString(FOLDER);}
0
public void setNumMessages(int numMessages)
{    setProperty(new IntegerProperty(NUM_MESSAGES, numMessages));}
0
public void setNumMessages(String numMessages)
{    setProperty(new StringProperty(NUM_MESSAGES, numMessages));}
0
public int getNumMessages()
{    return getPropertyAsInt(NUM_MESSAGES);}
0
public String getNumMessagesString()
{    return getPropertyAsString(NUM_MESSAGES);}
0
public void setDeleteMessages(boolean delete)
{    setProperty(new BooleanProperty(DELETE, delete));}
0
public boolean getDeleteMessages()
{    return getPropertyAsBoolean(DELETE);}
0
public boolean isStoreMimeMessage()
{    return getPropertyAsBoolean(STORE_MIME_MESSAGE, false);}
0
public void setStoreMimeMessage(boolean storeMimeMessage)
{    setProperty(STORE_MIME_MESSAGE, storeMimeMessage, false);}
0
public String toString()
{    StringBuilder sb = new StringBuilder();    sb.append(getServerType());    sb.append("://");    String name = getUserName();    if (name.length() > 0) {        sb.append(name);        sb.append("@");    }    sb.append(getServer());    int port = getPortAsInt();    if (port != -1) {        sb.append(":").append(port);    }    sb.append("/");    sb.append(getFolder());    sb.append("[");    sb.append(getNumMessages());    sb.append("]");    return sb.toString();}
0
public boolean interrupt()
{    boolean wasbusy = busy;    busy = false;    return wasbusy;}
0
public boolean applies(ConfigTestElement configElement)
{    String guiClass = configElement.getProperty(TestElement.GUI_CLASS).getStringValue();    return APPLIABLE_CONFIG_CLASSES.contains(guiClass);}
0
public boolean getHeaderOnly()
{    return getPropertyAsBoolean(HEADER_ONLY, HEADER_ONLY_DEFAULT);}
0
public void setHeaderOnly(boolean selected)
{    setProperty(HEADER_ONLY, selected, HEADER_ONLY_DEFAULT);}
0
private String mailProp(String protocol, String propname)
{    return "mail." + protocol + "." + propname;}
0
private void init()
{        this.setLayout(new GridBagLayout());    this.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("smtp_security_settings")));    GridBagConstraints gridBagConstraints = new GridBagConstraints();    gridBagConstraints.insets = new java.awt.Insets(2, 2, 3, 3);    gridBagConstraints.fill = GridBagConstraints.NONE;    gridBagConstraints.anchor = GridBagConstraints.WEST;    gridBagConstraints.weightx = 0.5;        rbUseNone = new JRadioButton(JMeterUtils.getResString("smtp_usenone"));        rbUseSSL = new JRadioButton(JMeterUtils.getResString("smtp_usessl"));        rbUseStartTLS = new JRadioButton(JMeterUtils.getResString("smtp_usestarttls"));        cbTrustAllCerts = new JCheckBox(JMeterUtils.getResString("smtp_trustall"));        cbEnforceStartTLS = new JCheckBox(JMeterUtils.getResString("smtp_enforcestarttls"));        cbUseLocalTrustStore = new JCheckBox(JMeterUtils.getResString("smtp_usetruststore"));        jlTrustStoreToUse = new JLabel(JMeterUtils.getResString("smtp_truststore"));        jlTlsProtocolsToUse = new JLabel(JMeterUtils.getResString("smtp_tlsprotocols"));    tfTrustStoreToUse = new JTextField(20);    tfTlsProtocolsToUse = new JTextField(20);    rbUseNone.setSelected(true);    bgSecuritySettings = new ButtonGroup();    bgSecuritySettings.add(rbUseNone);    bgSecuritySettings.add(rbUseSSL);    bgSecuritySettings.add(rbUseStartTLS);    gridBagConstraints.gridx = 0;    gridBagConstraints.gridy = 0;    this.add(rbUseNone, gridBagConstraints);    gridBagConstraints.gridx = 1;    gridBagConstraints.gridy = 0;    this.add(rbUseSSL, gridBagConstraints);    gridBagConstraints.gridx = 2;    gridBagConstraints.gridy = 0;    this.add(rbUseStartTLS, gridBagConstraints);    rbUseNone.addItemListener(this::rbSecuritySettingsItemStateChanged);    rbUseSSL.addItemListener(this::rbSecuritySettingsItemStateChanged);    rbUseStartTLS.addItemListener(this::rbSecuritySettingsItemStateChanged);    cbTrustAllCerts.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));    cbTrustAllCerts.setMargin(new java.awt.Insets(0, 0, 0, 0));    cbTrustAllCerts.setEnabled(false);        cbTrustAllCerts.setToolTipText(JMeterUtils.getResString("smtp_trustall_tooltip"));    cbTrustAllCerts.addActionListener(this::cbTrustAllCertsActionPerformed);    gridBagConstraints.gridx = 0;    gridBagConstraints.gridy = 1;    this.add(cbTrustAllCerts, gridBagConstraints);    cbEnforceStartTLS.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));    cbEnforceStartTLS.setMargin(new java.awt.Insets(0, 0, 0, 0));    cbEnforceStartTLS.setEnabled(false);    cbEnforceStartTLS.addActionListener(this::cbEnforceStartTLSActionPerformed);        cbEnforceStartTLS.setToolTipText(JMeterUtils.getResString("smtp_enforcestarttls_tooltip"));    gridBagConstraints.gridx = 2;    gridBagConstraints.gridy = 1;    this.add(cbEnforceStartTLS, gridBagConstraints);    cbUseLocalTrustStore.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));    cbUseLocalTrustStore.setMargin(new java.awt.Insets(0, 0, 0, 0));    cbUseLocalTrustStore.setEnabled(false);    cbUseLocalTrustStore.addActionListener(this::cbUseLocalTrustStoreActionPerformed);        cbUseLocalTrustStore.setToolTipText(JMeterUtils.getResString("smtp_usetruststore_tooltip"));    gridBagConstraints.gridx = 1;    gridBagConstraints.gridy = 1;    gridBagConstraints.gridwidth = 2;    this.add(cbUseLocalTrustStore, gridBagConstraints);    gridBagConstraints.gridx = 0;    gridBagConstraints.gridy = 2;    gridBagConstraints.gridwidth = 1;        jlTrustStoreToUse.setToolTipText(JMeterUtils.getResString("smtp_truststore_tooltip"));    this.add(jlTrustStoreToUse, gridBagConstraints);    gridBagConstraints.gridx = 1;    gridBagConstraints.gridy = 2;        tfTrustStoreToUse.setToolTipText(JMeterUtils.getResString("smtp_truststore_tooltip"));    this.add(tfTrustStoreToUse, gridBagConstraints);    gridBagConstraints.gridx = 0;    gridBagConstraints.gridy = 3;    gridBagConstraints.gridwidth = 1;        jlTlsProtocolsToUse.setToolTipText(JMeterUtils.getResString("smtp_tlsprotocols_tooltip"));    this.add(jlTlsProtocolsToUse, gridBagConstraints);    gridBagConstraints.gridx = 1;    gridBagConstraints.gridy = 3;        tfTrustStoreToUse.setToolTipText(JMeterUtils.getResString("smtp_tlsprotocols_tooltip"));    this.add(tfTlsProtocolsToUse, gridBagConstraints);}
0
private void cbUseLocalTrustStoreActionPerformed(ActionEvent evt)
{    final boolean selected = cbUseLocalTrustStore.isSelected();        tfTrustStoreToUse.setEditable(selected);    if (selected) {                cbTrustAllCerts.setSelected(false);    }}
0
private void cbTrustAllCertsActionPerformed(ActionEvent evt)
{    final boolean selected = cbTrustAllCerts.isSelected();    if (selected) {                cbUseLocalTrustStore.setSelected(false);                tfTrustStoreToUse.setEditable(false);    }}
0
private void cbEnforceStartTLSActionPerformed(ActionEvent evt)
{}
0
private void rbSecuritySettingsItemStateChanged(ItemEvent evt)
{        final Object source = evt.getSource();    if (source == rbUseNone) {        cbTrustAllCerts.setEnabled(false);        cbTrustAllCerts.setSelected(false);        cbEnforceStartTLS.setEnabled(false);        cbEnforceStartTLS.setSelected(false);        cbUseLocalTrustStore.setSelected(false);        cbUseLocalTrustStore.setEnabled(false);        tfTrustStoreToUse.setEditable(false);        tfTlsProtocolsToUse.setEditable(false);    } else if (source == rbUseSSL) {        cbTrustAllCerts.setEnabled(true);        cbEnforceStartTLS.setEnabled(false);        cbEnforceStartTLS.setSelected(false);        cbUseLocalTrustStore.setEnabled(true);        tfTrustStoreToUse.setEditable(false);        tfTlsProtocolsToUse.setEditable(true);    } else if (source == rbUseStartTLS) {        cbTrustAllCerts.setEnabled(true);        cbTrustAllCerts.setSelected(false);        cbEnforceStartTLS.setEnabled(true);        cbUseLocalTrustStore.setEnabled(true);        cbUseLocalTrustStore.setSelected(false);        tfTrustStoreToUse.setEditable(false);        tfTlsProtocolsToUse.setEditable(true);    }}
0
public boolean isUseSSL()
{    return rbUseSSL.isSelected();}
0
public void setUseSSL(boolean useSSL)
{    rbUseSSL.setSelected(useSSL);}
0
public boolean isUseStartTLS()
{    return rbUseStartTLS.isSelected();}
0
public void setUseStartTLS(boolean useStartTLS)
{    rbUseStartTLS.setSelected(useStartTLS);}
0
public boolean isEnforceStartTLS()
{    return cbEnforceStartTLS.isSelected();}
0
public void setEnforceStartTLS(boolean enforceStartTLS)
{    cbEnforceStartTLS.setSelected(enforceStartTLS);}
0
public boolean isUseLocalTrustStore()
{    return cbUseLocalTrustStore.isSelected();}
0
public void setUseLocalTrustStore(boolean useLocalTrustStore)
{    cbUseLocalTrustStore.setSelected(useLocalTrustStore);        tfTrustStoreToUse.setEditable(useLocalTrustStore);}
0
public String getTrustStoreToUse()
{    return tfTrustStoreToUse.getText();}
0
public void setTrustStoreToUse(String trustStoreToUse)
{    tfTrustStoreToUse.setText(trustStoreToUse);}
0
public String getTlsProtocolsToUse()
{    return tfTlsProtocolsToUse.getText();}
0
public void setTlsProtocolsToUse(String tlsProtocols)
{    tfTlsProtocolsToUse.setText(tlsProtocols);}
0
public void setUseNoSecurity(boolean selected)
{    rbUseNone.setSelected(selected);}
0
public boolean isTrustAllCerts()
{    return cbTrustAllCerts.isSelected();}
0
public void setTrustAllCerts(boolean trustAllCerts)
{    cbTrustAllCerts.setSelected(trustAllCerts);}
0
public void clear()
{    tfTrustStoreToUse.setText("");    tfTlsProtocolsToUse.setText("");    rbUseNone.setSelected(true);}
0
public void configure(TestElement element)
{    setUseSSL(element.getPropertyAsBoolean(USE_SSL));    setUseStartTLS(element.getPropertyAsBoolean(USE_STARTTLS));    if (!element.getPropertyAsBoolean(USE_STARTTLS) && !element.getPropertyAsBoolean(USE_SSL)) {        setUseNoSecurity(true);    }    setTrustAllCerts(element.getPropertyAsBoolean(SSL_TRUST_ALL_CERTS));    setEnforceStartTLS(element.getPropertyAsBoolean(ENFORCE_STARTTLS));    setUseLocalTrustStore(element.getPropertyAsBoolean(USE_LOCAL_TRUSTSTORE));    setTrustStoreToUse(element.getPropertyAsString(TRUSTSTORE_TO_USE));    setTlsProtocolsToUse(element.getPropertyAsString(TLS_PROTOCOLS));}
0
public void modifyTestElement(TestElement te)
{    te.setProperty(USE_SSL, Boolean.toString(isUseSSL()));    te.setProperty(USE_STARTTLS, Boolean.toString(isUseStartTLS()));    te.setProperty(SSL_TRUST_ALL_CERTS, Boolean.toString(isTrustAllCerts()));    te.setProperty(ENFORCE_STARTTLS, Boolean.toString(isEnforceStartTLS()));    te.setProperty(USE_LOCAL_TRUSTSTORE, Boolean.toString(isUseLocalTrustStore()));    te.setProperty(TRUSTSTORE_TO_USE, getTrustStoreToUse());    te.setProperty(TLS_PROTOCOLS, getTlsProtocolsToUse());}
0
public String getMailFrom()
{    return tfMailFrom.getText();}
0
public String getReceiverTo()
{    return tfMailTo.getText();}
0
public String getReceiverCC()
{    return tfMailToCC.getText();}
0
public String getReceiverBCC()
{    return tfMailToBCC.getText();}
0
public String getBody()
{    return taMessage.getText();}
0
public void setBody(String messageBodyText)
{    taMessage.setText(messageBodyText);}
0
public void setMailFrom(String mailFrom)
{    tfMailFrom.setText(mailFrom);}
0
public void setReceiverTo(String mailTo)
{    tfMailTo.setText(mailTo);}
0
public void setReceiverCC(String mailToCC)
{    tfMailToCC.setText(mailToCC);}
0
public void setReceiverBCC(String mailToBCC)
{    tfMailToBCC.setText(mailToBCC);}
0
public String getAttachments()
{    return tfAttachment.getText();}
0
public void setAttachments(String attachments)
{    tfAttachment.setText(attachments);}
0
public String getPort()
{    return tfMailServerPort.getText();}
0
public void setPort(String port)
{    tfMailServerPort.setText(port);}
0
public String getServer()
{    return tfMailServer.getText();}
0
public void setServer(String server)
{    tfMailServer.setText(server);}
0
public String getTimeout()
{    return tfMailServerTimeout.getText();}
0
public void setTimeout(String timeout)
{    tfMailServerTimeout.setText(timeout);}
0
public String getConnectionTimeout()
{    return tfMailServerConnectionTimeout.getText();}
0
public void setConnectionTimeout(String connectionTimeout)
{    tfMailServerConnectionTimeout.setText(connectionTimeout);}
0
public String getSubject()
{    return tfSubject.getText();}
0
public void setSubject(String subject)
{    tfSubject.setText(subject);}
0
public boolean isSuppressSubject()
{    return cbSuppressSubject.isSelected();}
0
public void setSuppressSubject(boolean emptySubject)
{    cbSuppressSubject.setSelected(emptySubject);}
0
public boolean isPlainBody()
{    return cbPlainBody.isSelected();}
0
public void setPlainBody(boolean plainBody)
{    cbPlainBody.setSelected(plainBody);}
0
public boolean isUseAuth()
{    return cbUseAuth.isSelected();}
0
public void setUseAuth(boolean selected)
{    cbUseAuth.setSelected(selected);        tfAuthPassword.setEditable(selected);        tfAuthUsername.setEditable(selected);}
0
public boolean isEnableDebug()
{    return cbEnableDebug.isSelected();}
0
public void setEnableDebug(boolean selected)
{    cbEnableDebug.setSelected(selected);}
0
public boolean isUseEmlMessage()
{    return cbUseEmlMessage.isSelected();}
0
public void setUseEmlMessage(boolean useEmlMessage)
{    cbUseEmlMessage.setSelected(useEmlMessage);}
0
public String getEmlMessage()
{    return tfEmlMessage.getText();}
0
public void setEmlMessage(String emlMessage)
{    tfEmlMessage.setText(emlMessage);}
0
public boolean isIncludeTimestamp()
{    return cbIncludeTimestamp.isSelected();}
0
public void setIncludeTimestamp(boolean includeTimestamp)
{    cbIncludeTimestamp.setSelected(includeTimestamp);}
0
public boolean isMessageSizeStatistics()
{    return cbMessageSizeStats.isSelected();}
0
public void setMessageSizeStatistic(boolean val)
{    cbMessageSizeStats.setSelected(val);}
0
public String getPassword()
{    return tfAuthPassword.getText();}
0
public void setPassword(String authPassword)
{    tfAuthPassword.setText(authPassword);}
0
public String getUsername()
{    return tfAuthUsername.getText();}
0
public void setUsername(String username)
{    tfAuthUsername.setText(username);}
0
public CollectionProperty getHeaderFields()
{    CollectionProperty result = new CollectionProperty();    result.setName(SmtpSampler.HEADER_FIELDS);    for (Map.Entry<JTextField, JTextField> header : headerFields.entrySet()) {        String name = header.getKey().getText();        String value = header.getValue().getText();        Argument argument = new Argument(name, value);        result.addItem(argument);    }    return result;}
0
public void setHeaderFields(CollectionProperty fields)
{    clearHeaderFields();    for (int i = 0; i < fields.size(); i++) {        Argument argument = (Argument) fields.get(i).getObjectValue();        String name = argument.getName();        JButton removeButton = addHeaderActionPerformed(null);        JTextField nameTF = removeButtons.get(removeButton);        nameTF.setText(name);        JTextField valueTF = headerFields.get(nameTF);        valueTF.setText(argument.getValue());    }    validate();}
0
public String getMailReplyTo()
{    return tfMailReplyTo.getText();}
0
public void setMailReplyTo(String replyTo)
{    tfMailReplyTo.setText(replyTo);}
0
private void initComponents()
{        JLabel jlAddressReplyTo = new JLabel(JMeterUtils.getResString("smtp_replyto"));        JLabel jlAddressFrom = new JLabel(JMeterUtils.getResString("smtp_from"));        JLabel jlAddressTo = new JLabel(JMeterUtils.getResString("smtp_to"));        JLabel jlAddressToCC = new JLabel(JMeterUtils.getResString("smtp_cc"));        JLabel jlAddressToBCC = new JLabel(JMeterUtils.getResString("smtp_bcc"));        JLabel jlMailServerPort = new JLabel(JMeterUtils.getResString("smtp_server_port"));        JLabel jlMailServer = new JLabel(JMeterUtils.getResString("smtp_server"));        JLabel jlMailServerTimeout = new JLabel(JMeterUtils.getResString("smtp_server_timeout"));        JLabel jlMailServerConnectionTimeout = new JLabel(JMeterUtils.getResString("smtp_server_connection_timeout"));        JLabel jlAttachFile = new JLabel(JMeterUtils.getResString("smtp_attach_file"));        JLabel jlDutPortStandard = new JLabel(JMeterUtils.getResString("smtp_default_port"));        JLabel jlUsername = new JLabel(JMeterUtils.getResString("smtp_username"));        JLabel jlPassword = new JLabel(JMeterUtils.getResString("smtp_password"));        JLabel jlSubject = new JLabel(JMeterUtils.getResString("smtp_subject"));        JLabel jlMessage = new JLabel(JMeterUtils.getResString("smtp_message"));    tfMailServer = new JTextField(30);    tfMailServerPort = new JTextField(6);    tfMailServerTimeout = new JTextField(6);    tfMailServerConnectionTimeout = new JTextField(6);    tfMailFrom = new JTextField(25);    tfMailReplyTo = new JTextField(25);    tfMailTo = new JTextField(25);    tfMailToCC = new JTextField(25);    tfMailToBCC = new JTextField(25);    tfAuthUsername = new JTextField(20);    tfAuthPassword = new JPasswordField(20);    tfSubject = new JTextField(20);    tfAttachment = new JTextField(30);    tfEmlMessage = new JTextField(30);    taMessage = new JTextArea(5, 20);        cbPlainBody = new JCheckBox(JMeterUtils.getResString("smtp_plainbody"));        cbSuppressSubject = new JCheckBox(JMeterUtils.getResString("smtp_suppresssubj"));    cbSuppressSubject.addChangeListener(this::emptySubjectActionPerformed);        cbUseAuth = new JCheckBox(JMeterUtils.getResString("smtp_useauth"));        cbIncludeTimestamp = new JCheckBox(JMeterUtils.getResString("smtp_timestamp"));        cbMessageSizeStats = new JCheckBox(JMeterUtils.getResString("smtp_messagesize"));        cbEnableDebug = new JCheckBox(JMeterUtils.getResString("smtp_enabledebug"));        cbUseEmlMessage = new JCheckBox(JMeterUtils.getResString("smtp_eml"));    attachmentFileChooser = new JFileChooser();    emlFileChooser = new JFileChooser();        browseButton = new JButton(JMeterUtils.getResString("browse"));        emlBrowseButton = new JButton(JMeterUtils.getResString("browse"));    attachmentFileChooser.addActionListener(this::attachmentFolderFileChooserActionPerformed);    emlFileChooser.addActionListener(this::emlFileChooserActionPerformed);    setLayout(new GridBagLayout());    GridBagConstraints gridBagConstraintsMain = new GridBagConstraints();    gridBagConstraintsMain.fill = GridBagConstraints.HORIZONTAL;    gridBagConstraintsMain.anchor = GridBagConstraints.WEST;    gridBagConstraintsMain.weightx = 0.5;    GridBagConstraints gridBagConstraints = new GridBagConstraints();    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);    gridBagConstraints.fill = GridBagConstraints.NONE;    gridBagConstraints.anchor = GridBagConstraints.WEST;    gridBagConstraints.weightx = 0.5;    /*         * Server Settings         */    JPanel panelServerSettings = new VerticalPanel();    panelServerSettings.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("smtp_server_settings")));    JPanel panelMailServer = new JPanel(new BorderLayout(5, 0));    panelMailServer.add(jlMailServer, BorderLayout.WEST);    panelMailServer.add(tfMailServer, BorderLayout.CENTER);    JPanel panelMailServerPort = new JPanel(new BorderLayout(5, 0));    panelMailServerPort.add(jlMailServerPort, BorderLayout.WEST);    panelMailServerPort.add(tfMailServerPort, BorderLayout.CENTER);    panelMailServerPort.add(jlDutPortStandard, BorderLayout.EAST);    panelServerSettings.add(panelMailServer, BorderLayout.CENTER);    panelServerSettings.add(panelMailServerPort, BorderLayout.SOUTH);    JPanel panelServerTimeoutsSettings = new VerticalPanel();    panelServerTimeoutsSettings.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("smtp_server_timeouts_settings")));    JPanel panelMailServerConnectionTimeout = new JPanel(new BorderLayout(5, 0));    panelMailServerConnectionTimeout.add(jlMailServerConnectionTimeout, BorderLayout.WEST);    panelMailServerConnectionTimeout.add(tfMailServerConnectionTimeout, BorderLayout.CENTER);    JPanel panelMailServerTimeout = new JPanel(new BorderLayout(5, 0));    panelMailServerTimeout.add(jlMailServerTimeout, BorderLayout.WEST);    panelMailServerTimeout.add(tfMailServerTimeout, BorderLayout.CENTER);    panelServerTimeoutsSettings.add(panelMailServerConnectionTimeout, BorderLayout.CENTER);    panelServerTimeoutsSettings.add(panelMailServerTimeout, BorderLayout.SOUTH);    JPanel panelServerConfig = new HorizontalPanel();    panelServerConfig.add(panelServerSettings, BorderLayout.CENTER);    panelServerConfig.add(panelServerTimeoutsSettings, BorderLayout.EAST);    gridBagConstraintsMain.gridx = 0;    gridBagConstraintsMain.gridy = 0;    add(panelServerConfig, gridBagConstraintsMain);    /*         * E-Mail Settings         */    JPanel panelMailSettings = new JPanel(new GridBagLayout());    panelMailSettings.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("smtp_mail_settings")));    gridBagConstraints.gridx = 0;    gridBagConstraints.gridy = 0;    panelMailSettings.add(jlAddressFrom, gridBagConstraints);    gridBagConstraints.gridx = 1;    gridBagConstraints.gridy = 0;    panelMailSettings.add(tfMailFrom, gridBagConstraints);    gridBagConstraints.gridx = 0;    gridBagConstraints.gridy = 1;    panelMailSettings.add(jlAddressTo, gridBagConstraints);    gridBagConstraints.gridx = 1;    gridBagConstraints.gridy = 1;    panelMailSettings.add(tfMailTo, gridBagConstraints);    gridBagConstraints.gridx = 0;    gridBagConstraints.gridy = 2;    panelMailSettings.add(jlAddressToCC, gridBagConstraints);    gridBagConstraints.gridx = 1;    gridBagConstraints.gridy = 2;    panelMailSettings.add(tfMailToCC, gridBagConstraints);    gridBagConstraints.gridx = 0;    gridBagConstraints.gridy = 3;    panelMailSettings.add(jlAddressToBCC, gridBagConstraints);    gridBagConstraints.gridx = 1;    gridBagConstraints.gridy = 3;    panelMailSettings.add(tfMailToBCC, gridBagConstraints);    gridBagConstraints.gridx = 0;    gridBagConstraints.gridy = 4;    panelMailSettings.add(jlAddressReplyTo, gridBagConstraints);    gridBagConstraints.gridx = 1;    gridBagConstraints.gridy = 4;    panelMailSettings.add(tfMailReplyTo, gridBagConstraints);    gridBagConstraintsMain.gridx = 0;    gridBagConstraintsMain.gridy = 1;    add(panelMailSettings, gridBagConstraintsMain);    /*         * Auth Settings         */    JPanel panelAuthSettings = new JPanel(new GridBagLayout());    panelAuthSettings.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("smtp_auth_settings")));    cbUseAuth.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));    cbUseAuth.setMargin(new java.awt.Insets(0, 0, 0, 0));    cbUseAuth.addActionListener(this::cbUseAuthActionPerformed);    gridBagConstraints.gridx = 0;    gridBagConstraints.gridy = 0;    panelAuthSettings.add(cbUseAuth, gridBagConstraints);    gridBagConstraints.gridx = 1;    gridBagConstraints.gridy = 0;    gridBagConstraints.gridwidth = 1;    gridBagConstraints.weightx = 0;    panelAuthSettings.add(jlUsername, gridBagConstraints);    gridBagConstraints.gridx = 2;    gridBagConstraints.gridy = 0;    gridBagConstraints.gridwidth = 2;    gridBagConstraints.weightx = 0.5;    panelAuthSettings.add(tfAuthUsername, gridBagConstraints);    tfAuthUsername.setEditable(false);    gridBagConstraints.gridx = 1;    gridBagConstraints.gridy = 1;    gridBagConstraints.gridwidth = 1;    gridBagConstraints.weightx = 0;    panelAuthSettings.add(jlPassword, gridBagConstraints);    gridBagConstraints.gridx = 2;    gridBagConstraints.gridy = 1;    gridBagConstraints.weightx = 0.5;    panelAuthSettings.add(tfAuthPassword, gridBagConstraints);    tfAuthPassword.setEditable(false);    gridBagConstraintsMain.gridx = 0;    gridBagConstraintsMain.gridy = 2;    add(panelAuthSettings, gridBagConstraintsMain);    /*         * Security Settings         */    securitySettingsPanel = new SecuritySettingsPanel();    gridBagConstraintsMain.gridx = 0;    gridBagConstraintsMain.gridy = 3;    add(securitySettingsPanel, gridBagConstraintsMain);    /*         * (non-Javadoc) Message Settings         */    JPanel panelMessageSettings = new JPanel(new GridBagLayout());    panelMessageSettings.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("smtp_message_settings")));    gridBagConstraints.gridx = 0;    gridBagConstraints.gridy = 0;    panelMessageSettings.add(jlSubject, gridBagConstraints);    gridBagConstraints.gridx = 1;    gridBagConstraints.gridy = 0;    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;    panelMessageSettings.add(tfSubject, gridBagConstraints);    cbSuppressSubject.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));    cbSuppressSubject.setMargin(new java.awt.Insets(0, 0, 0, 0));    gridBagConstraints.gridx = 2;    gridBagConstraints.gridy = 0;    gridBagConstraints.fill = GridBagConstraints.NONE;    panelMessageSettings.add(cbSuppressSubject, gridBagConstraints);    cbIncludeTimestamp.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));    cbIncludeTimestamp.setMargin(new java.awt.Insets(0, 0, 0, 0));    gridBagConstraints.gridx = 1;    gridBagConstraints.gridy = 1;    gridBagConstraints.fill = GridBagConstraints.NONE;    panelMessageSettings.add(cbIncludeTimestamp, gridBagConstraints);    /*         * Add the header panel         */        addHeaderFieldButton = new JButton(JMeterUtils.getResString("smtp_header_add"));    addHeaderFieldButton.addActionListener(this::addHeaderActionPerformed);        headerFieldName = new JLabel(JMeterUtils.getResString("smtp_header_name"));        headerFieldValue = new JLabel(JMeterUtils.getResString("smtp_header_value"));    headerFieldsPanel = new JPanel(new GridBagLayout());    headerFieldName.setVisible(false);    headerFieldValue.setVisible(false);    headerGridY = 0;    gridBagConstraints.gridx = 0;    gridBagConstraints.gridy = headerGridY++;    headerFieldsPanel.add(addHeaderFieldButton, gridBagConstraints);    gridBagConstraints.gridx = 0;    gridBagConstraints.gridy = headerGridY;    headerFieldsPanel.add(headerFieldName, gridBagConstraints);    gridBagConstraints.gridx = 1;    gridBagConstraints.gridy = headerGridY++;    headerFieldsPanel.add(headerFieldValue, gridBagConstraints);    gridBagConstraintsMain.gridx = 1;    gridBagConstraintsMain.gridy = 2;    panelMessageSettings.add(headerFieldsPanel, gridBagConstraintsMain);    gridBagConstraints.gridx = 0;    gridBagConstraints.gridy = 3;    panelMessageSettings.add(jlMessage, gridBagConstraints);    taMessage.setBorder(BorderFactory.createBevelBorder(1));    gridBagConstraints.gridx = 1;    gridBagConstraints.gridy = 3;    gridBagConstraints.fill = GridBagConstraints.BOTH;    panelMessageSettings.add(taMessage, gridBagConstraints);    cbPlainBody.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));    cbPlainBody.setMargin(new java.awt.Insets(0, 0, 0, 0));    gridBagConstraints.gridx = 2;    gridBagConstraints.gridy = 3;    gridBagConstraints.fill = GridBagConstraints.NONE;    panelMessageSettings.add(cbPlainBody, gridBagConstraints);    gridBagConstraints.gridx = 0;    gridBagConstraints.gridy = 4;    gridBagConstraints.fill = GridBagConstraints.NONE;    panelMessageSettings.add(jlAttachFile, gridBagConstraints);    gridBagConstraints.gridx = 1;    gridBagConstraints.gridy = 4;    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;    panelMessageSettings.add(tfAttachment, gridBagConstraints);        tfAttachment.setToolTipText(JMeterUtils.getResString("smtp_attach_file_tooltip"));    browseButton.addActionListener(this::browseButtonActionPerformed);    gridBagConstraints.gridx = 2;    gridBagConstraints.gridy = 4;    gridBagConstraints.fill = GridBagConstraints.NONE;    panelMessageSettings.add(browseButton, gridBagConstraints);    cbUseEmlMessage.setSelected(false);    cbUseEmlMessage.addActionListener(this::cbUseEmlMessageActionPerformed);    gridBagConstraints.gridx = 0;    gridBagConstraints.gridy = 5;    gridBagConstraints.fill = GridBagConstraints.NONE;    panelMessageSettings.add(cbUseEmlMessage, gridBagConstraints);    gridBagConstraints.gridx = 1;    gridBagConstraints.gridy = 5;    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;    tfEmlMessage.setEnabled(false);    panelMessageSettings.add(tfEmlMessage, gridBagConstraints);    emlBrowseButton.addActionListener(this::emlBrowseButtonActionPerformed);    emlBrowseButton.setEnabled(false);    gridBagConstraints.gridx = 2;    gridBagConstraints.gridy = 5;    gridBagConstraints.fill = GridBagConstraints.NONE;    panelMessageSettings.add(emlBrowseButton, gridBagConstraints);    gridBagConstraintsMain.gridx = 0;    gridBagConstraintsMain.gridy = 6;    add(panelMessageSettings, gridBagConstraintsMain);    /*         * Additional Settings         */    JPanel panelAdditionalSettings = new JPanel(new GridBagLayout());    panelAdditionalSettings.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("smtp_additional_settings")));    cbMessageSizeStats.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));    cbMessageSizeStats.setMargin(new java.awt.Insets(0, 0, 0, 0));    gridBagConstraints.gridx = 0;    gridBagConstraints.gridy = 0;    panelAdditionalSettings.add(cbMessageSizeStats, gridBagConstraints);    gridBagConstraints.gridx = 1;    gridBagConstraints.gridy = 0;    panelAdditionalSettings.add(cbEnableDebug, gridBagConstraints);    gridBagConstraintsMain.gridx = 0;    gridBagConstraintsMain.gridy = 7;    add(panelAdditionalSettings, gridBagConstraintsMain);}
0
private void cbUseAuthActionPerformed(ActionEvent evt)
{        tfAuthUsername.setEditable(cbUseAuth.isSelected());    tfAuthPassword.setEditable(cbUseAuth.isSelected());}
0
private void attachmentFolderFileChooserActionPerformed(ActionEvent evt)
{        File chosen = attachmentFileChooser.getSelectedFile();    if (chosen == null) {        return;    }    final String attachments = tfAttachment.getText().trim();    if (attachments.length() > 0) {        tfAttachment.setText(attachments + SmtpSampler.FILENAME_SEPARATOR + chosen.getAbsolutePath());    } else {        tfAttachment.setText(chosen.getAbsolutePath());    }}
0
private void browseButtonActionPerformed(ActionEvent evt)
{        attachmentFileChooser.showOpenDialog(this);}
0
private void cbUseEmlMessageActionPerformed(ActionEvent evt)
{        if (cbUseEmlMessage.isSelected()) {        tfEmlMessage.setEnabled(true);        emlBrowseButton.setEnabled(true);        taMessage.setEnabled(false);        tfAttachment.setEnabled(false);        browseButton.setEnabled(false);    } else {        tfEmlMessage.setEnabled(false);        emlBrowseButton.setEnabled(false);        taMessage.setEnabled(true);        tfAttachment.setEnabled(true);        browseButton.setEnabled(true);    }}
0
private void emlFileChooserActionPerformed(ActionEvent evt)
{        tfEmlMessage.setText(emlFileChooser.getSelectedFile().getAbsolutePath());}
0
private void emlBrowseButtonActionPerformed(ActionEvent evt)
{        emlFileChooser.showOpenDialog(this);}
0
public void clear()
{    cbIncludeTimestamp.setSelected(false);    cbMessageSizeStats.setSelected(false);    cbEnableDebug.setSelected(false);    cbUseEmlMessage.setSelected(false);    cbUseAuth.setSelected(false);    taMessage.setText("");    tfAttachment.setText("");    tfAuthPassword.setText("");    tfAuthUsername.setText("");    tfEmlMessage.setText("");    tfMailFrom.setText("");    tfMailReplyTo.setText("");    tfMailServer.setText("");    tfMailServerPort.setText("");    tfMailServerConnectionTimeout.setText("");    tfMailServerTimeout.setText("");    tfMailTo.setText("");    tfMailToBCC.setText("");    tfMailToCC.setText("");    tfSubject.setText("");    cbPlainBody.setSelected(false);    cbSuppressSubject.setSelected(false);    securitySettingsPanel.clear();    clearHeaderFields();    validate();}
0
private void clearHeaderFields()
{    headerFieldName.setVisible(false);    headerFieldValue.setVisible(false);    for (Iterator<JButton> iterator = removeButtons.keySet().iterator(); iterator.hasNext(); ) {        JButton removeButton = iterator.next();        JTextField headerName = removeButtons.get(removeButton);        JTextField headerValue = headerFields.get(headerName);        headerFieldsPanel.remove(headerName);        if (headerValue != null) {                        headerFieldsPanel.remove(headerValue);        }        headerFieldsPanel.remove(removeButton);        headerFields.remove(headerName);        iterator.remove();    }}
0
private JButton addHeaderActionPerformed(ActionEvent evt)
{    if (headerFields.isEmpty()) {        headerFieldName.setVisible(true);        headerFieldValue.setVisible(true);    }    JTextField nameTF = new JTextField();    JTextField valueTF = new JTextField();        JButton removeButton = new JButton(JMeterUtils.getResString("smtp_header_remove"));    headerFields.put(nameTF, valueTF);    removeButtons.put(removeButton, nameTF);    removeButton.addActionListener(this::removeHeaderActionPerformed);    GridBagConstraints gridBagConstraints = new GridBagConstraints();    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);    gridBagConstraints.weightx = 0.5;    gridBagConstraints.anchor = GridBagConstraints.WEST;    gridBagConstraints.gridx = 0;    gridBagConstraints.gridy = headerGridY;    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;    headerFieldsPanel.add(nameTF, gridBagConstraints);    gridBagConstraints.gridx = 1;    gridBagConstraints.gridy = headerGridY;    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;    headerFieldsPanel.add(valueTF, gridBagConstraints);    gridBagConstraints.gridx = 2;    gridBagConstraints.gridy = headerGridY++;    gridBagConstraints.fill = GridBagConstraints.NONE;    headerFieldsPanel.add(removeButton, gridBagConstraints);    validate();    return removeButton;}
0
public SecuritySettingsPanel getSecuritySettingsPanel()
{    return securitySettingsPanel;}
0
public void setSecuritySettingsPanel(SecuritySettingsPanel securitySettingsPanel)
{    this.securitySettingsPanel = securitySettingsPanel;}
0
private void removeHeaderActionPerformed(ActionEvent evt)
{        final Object source = evt.getSource();    if (source instanceof JButton) {        if (headerFields.size() == 1) {            headerFieldName.setVisible(false);            headerFieldValue.setVisible(false);        }        JTextField nameTF = removeButtons.get(source);        JTextField valueTF = headerFields.get(nameTF);        headerFields.remove(nameTF);        headerFieldsPanel.remove(nameTF);        headerFieldsPanel.remove(valueTF);        headerFieldsPanel.remove((JButton) source);        validate();    }}
0
private void emptySubjectActionPerformed(ChangeEvent evt)
{        final Object source = evt.getSource();    if (source instanceof JCheckBox) {        if (cbSuppressSubject.isSelected()) {            tfSubject.setEnabled(false);            cbIncludeTimestamp.setEnabled(false);        } else {            tfSubject.setEnabled(true);            cbIncludeTimestamp.setEnabled(true);        }    }}
0
public String getLabelResource()
{    return "smtp_sampler_title";}
0
public void configure(TestElement element)
{    if (smtpPanel == null) {        smtpPanel = new SmtpPanel();    }    smtpPanel.setServer(element.getPropertyAsString(SmtpSampler.SERVER));    smtpPanel.setPort(element.getPropertyAsString(SmtpSampler.SERVER_PORT));    smtpPanel.setTimeout(element.getPropertyAsString(SmtpSampler.SERVER_TIMEOUT));    smtpPanel.setConnectionTimeout(element.getPropertyAsString(SmtpSampler.SERVER_CONNECTION_TIMEOUT));    smtpPanel.setMailFrom(element.getPropertyAsString(SmtpSampler.MAIL_FROM));    smtpPanel.setMailReplyTo(element.getPropertyAsString(SmtpSampler.MAIL_REPLYTO));    smtpPanel.setReceiverTo(element.getPropertyAsString(SmtpSampler.RECEIVER_TO));    smtpPanel.setReceiverCC(element.getPropertyAsString(SmtpSampler.RECEIVER_CC));    smtpPanel.setReceiverBCC(element.getPropertyAsString(SmtpSampler.RECEIVER_BCC));    smtpPanel.setBody(element.getPropertyAsString(SmtpSampler.MESSAGE));    smtpPanel.setPlainBody(element.getPropertyAsBoolean(SmtpSampler.PLAIN_BODY));    smtpPanel.setSubject(element.getPropertyAsString(SmtpSampler.SUBJECT));    smtpPanel.setSuppressSubject(element.getPropertyAsBoolean(SmtpSampler.SUPPRESS_SUBJECT));    smtpPanel.setIncludeTimestamp(element.getPropertyAsBoolean(SmtpSampler.INCLUDE_TIMESTAMP));    JMeterProperty headers = element.getProperty(SmtpSampler.HEADER_FIELDS);    if (headers instanceof CollectionProperty) {                smtpPanel.setHeaderFields((CollectionProperty) headers);    } else {        smtpPanel.setHeaderFields(new CollectionProperty());    }    smtpPanel.setAttachments(element.getPropertyAsString(SmtpSampler.ATTACH_FILE));    smtpPanel.setUseEmlMessage(element.getPropertyAsBoolean(SmtpSampler.USE_EML));    smtpPanel.setEmlMessage(element.getPropertyAsString(SmtpSampler.EML_MESSAGE_TO_SEND));    SecuritySettingsPanel secPanel = smtpPanel.getSecuritySettingsPanel();    secPanel.configure(element);    smtpPanel.setUseAuth(element.getPropertyAsBoolean(SmtpSampler.USE_AUTH));    smtpPanel.setUsername(element.getPropertyAsString(SmtpSampler.USERNAME));    smtpPanel.setPassword(element.getPropertyAsString(SmtpSampler.PASSWORD));    smtpPanel.setMessageSizeStatistic(element.getPropertyAsBoolean(SmtpSampler.MESSAGE_SIZE_STATS));    smtpPanel.setEnableDebug(element.getPropertyAsBoolean(SmtpSampler.ENABLE_DEBUG));    super.configure(element);}
0
public TestElement createTestElement()
{    SmtpSampler sampler = new SmtpSampler();    modifyTestElement(sampler);    return sampler;}
0
public void modifyTestElement(TestElement te)
{    te.clear();    super.configureTestElement(te);    te.setProperty(SmtpSampler.SERVER, smtpPanel.getServer());    te.setProperty(SmtpSampler.SERVER_PORT, smtpPanel.getPort());        te.setProperty(SmtpSampler.SERVER_TIMEOUT, smtpPanel.getTimeout(), "");        te.setProperty(SmtpSampler.SERVER_CONNECTION_TIMEOUT, smtpPanel.getConnectionTimeout(), "");    te.setProperty(SmtpSampler.MAIL_FROM, smtpPanel.getMailFrom());    te.setProperty(SmtpSampler.MAIL_REPLYTO, smtpPanel.getMailReplyTo());    te.setProperty(SmtpSampler.RECEIVER_TO, smtpPanel.getReceiverTo());    te.setProperty(SmtpSampler.RECEIVER_CC, smtpPanel.getReceiverCC());    te.setProperty(SmtpSampler.RECEIVER_BCC, smtpPanel.getReceiverBCC());    te.setProperty(SmtpSampler.SUBJECT, smtpPanel.getSubject());    te.setProperty(SmtpSampler.SUPPRESS_SUBJECT, Boolean.toString(smtpPanel.isSuppressSubject()));    te.setProperty(SmtpSampler.INCLUDE_TIMESTAMP, Boolean.toString(smtpPanel.isIncludeTimestamp()));    te.setProperty(SmtpSampler.MESSAGE, smtpPanel.getBody());    te.setProperty(SmtpSampler.PLAIN_BODY, Boolean.toString(smtpPanel.isPlainBody()));    te.setProperty(SmtpSampler.ATTACH_FILE, smtpPanel.getAttachments());    SecuritySettingsPanel secPanel = smtpPanel.getSecuritySettingsPanel();    secPanel.modifyTestElement(te);    te.setProperty(SmtpSampler.USE_EML, smtpPanel.isUseEmlMessage());    te.setProperty(SmtpSampler.EML_MESSAGE_TO_SEND, smtpPanel.getEmlMessage());    te.setProperty(SmtpSampler.USE_AUTH, Boolean.toString(smtpPanel.isUseAuth()));    te.setProperty(SmtpSampler.PASSWORD, smtpPanel.getPassword());    te.setProperty(SmtpSampler.USERNAME, smtpPanel.getUsername());    te.setProperty(SmtpSampler.MESSAGE_SIZE_STATS, Boolean.toString(smtpPanel.isMessageSizeStatistics()));    te.setProperty(SmtpSampler.ENABLE_DEBUG, Boolean.toString(smtpPanel.isEnableDebug()));    te.setProperty(smtpPanel.getHeaderFields());}
0
private void init()
{            setLayout(new BorderLayout(0, 5));    setBorder(makeBorder());        add(makeTitlePanel(), BorderLayout.NORTH);    add(makeDataPanel(), BorderLayout.CENTER);}
0
public void clearGui()
{    super.clearGui();    if (smtpPanel != null) {        smtpPanel.clear();    }}
0
private Component makeDataPanel()
{    if (smtpPanel == null) {        smtpPanel = new SmtpPanel();    }    return smtpPanel;}
0
public Socket createSocket(Socket socket, String s, int i, boolean flag) throws IOException
{    return factory.createSocket(socket, s, i, flag);}
0
public Socket createSocket(InetAddress inaddr, int i, InetAddress inaddr1, int j) throws IOException
{    return factory.createSocket(inaddr, i, inaddr1, j);}
0
public Socket createSocket(InetAddress inaddr, int i) throws IOException
{    return factory.createSocket(inaddr, i);}
0
public Socket createSocket(String s, int i, InetAddress inaddr, int j) throws IOException
{    return factory.createSocket(s, i, inaddr, j);}
0
public Socket createSocket(String s, int i) throws IOException
{    return factory.createSocket(s, i);}
0
public Socket createSocket() throws IOException
{    return factory.createSocket();}
0
public String[] getDefaultCipherSuites()
{    return factory.getSupportedCipherSuites();}
0
public String[] getSupportedCipherSuites()
{    return factory.getSupportedCipherSuites();}
0
public Message prepareMessage() throws MessagingException, IOException
{    Properties props = new Properties();    String protocol = getProtocol();        props.setProperty(MAIL_PROPERTY_PREFIX + protocol + ".host", smtpServer);    props.setProperty(MAIL_PROPERTY_PREFIX + protocol + ".port", getPort());    props.setProperty(MAIL_PROPERTY_PREFIX + protocol + ".auth", Boolean.toString(useAuthentication));        props.setProperty(MAIL_PROPERTY_PREFIX + protocol + ".timeout", getTimeout());    props.setProperty(MAIL_PROPERTY_PREFIX + protocol + ".connectiontimeout", getConnectionTimeout());    configureTLSProtocols(props, protocol);    if (enableDebug) {        props.setProperty("mail.debug", "true");    }    if (useStartTLS) {        props.setProperty("mail.smtp.starttls.enable", "true");        if (enforceStartTLS) {                        props.setProperty("mail.smtp.starttls.require", "true");        }    }    configureCertificateTrust(props);    session = Session.getInstance(props, null);    Message message = buildMessage();    message.saveChanges();    return message;}
0
private Message buildMessage() throws MessagingException, IOException
{    Message message;    if (sendEmlMessage) {        message = new MimeMessage(session, new BufferedInputStream(new FileInputStream(emlMessage)));    } else {        message = new MimeMessage(session);                Multipart multipart = new MimeMultipart();        final int attachmentCount = attachments.size();        if (plainBody && (attachmentCount == 0 || (mailBody.length() == 0 && attachmentCount == 1))) {            if (attachmentCount == 1) {                                File first = attachments.get(0);                try (FileInputStream fis = new FileInputStream(first);                    InputStream is = new BufferedInputStream(fis)) {                    message.setText(IOUtils.toString(is, Charset.defaultCharset()));                }            } else {                message.setText(mailBody);            }        } else {            BodyPart body = new MimeBodyPart();            body.setText(mailBody);            multipart.addBodyPart(body);            for (File f : attachments) {                BodyPart attach = new MimeBodyPart();                attach.setFileName(f.getName());                attach.setDataHandler(new DataHandler(new FileDataSource(f.getAbsolutePath())));                multipart.addBodyPart(attach);            }            message.setContent(multipart);        }    }        if (null != sender) {        message.setFrom(new InternetAddress(sender));    }    if (null != replyTo) {        InternetAddress[] to = new InternetAddress[replyTo.size()];        message.setReplyTo(replyTo.toArray(to));    }    if (null != subject) {        message.setSubject(subject);    }    if (receiverTo != null) {        InternetAddress[] to = new InternetAddress[receiverTo.size()];        receiverTo.toArray(to);        message.setRecipients(Message.RecipientType.TO, to);    }    if (receiverCC != null) {        InternetAddress[] cc = new InternetAddress[receiverCC.size()];        receiverCC.toArray(cc);        message.setRecipients(Message.RecipientType.CC, cc);    }    if (receiverBCC != null) {        InternetAddress[] bcc = new InternetAddress[receiverBCC.size()];        receiverBCC.toArray(bcc);        message.setRecipients(Message.RecipientType.BCC, bcc);    }    for (int i = 0; i < headerFields.size(); i++) {        Argument argument = (Argument) headerFields.get(i).getObjectValue();        message.setHeader(argument.getName(), argument.getValue());    }    return message;}
0
private void configureCertificateTrust(Properties props) throws IOException
{    if (trustAllCerts) {        if (useSSL) {            props.setProperty("mail.smtps.ssl.socketFactory.class", TRUST_ALL_SOCKET_FACTORY);            props.setProperty("mail.smtps.ssl.socketFactory.fallback", FALSE);        } else if (useStartTLS) {            props.setProperty("mail.smtp.ssl.socketFactory.class", TRUST_ALL_SOCKET_FACTORY);            props.setProperty("mail.smtp.ssl.socketFactory.fallback", FALSE);        }    } else if (useLocalTrustStore) {        File truststore = new File(trustStoreToUse);                if (!truststore.exists()) {                        truststore = new File(FileServer.getFileServer().getBaseDir(), trustStoreToUse);                        if (!truststore.exists()) {                                throw new IOException("Local truststore file not found. Also not available under : " + truststore.getAbsolutePath());            }        }        if (useSSL) {                        props.put("mail.smtps.ssl.socketFactory", new LocalTrustStoreSSLSocketFactory(truststore));            props.put("mail.smtps.ssl.socketFactory.fallback", FALSE);        } else if (useStartTLS) {                        props.put("mail.smtp.ssl.socketFactory", new LocalTrustStoreSSLSocketFactory(truststore));            props.put("mail.smtp.ssl.socketFactory.fallback", FALSE);        }    }}
1
 void configureTLSProtocols(Properties props, String protocol)
{    String tlsProtocolsToUse = getTlsProtocolsToUse();    if (useStartTLS || useSSL) {        if (StringUtils.isEmpty(tlsProtocolsToUse)) {            try {                tlsProtocolsToUse = StringUtils.join(SSLContext.getDefault().getSupportedSSLParameters().getProtocols(), " ");            } catch (Exception e) {                            }        }                props.setProperty(MAIL_PROPERTY_PREFIX + protocol + ".ssl.protocols", tlsProtocolsToUse);    }}
1
public void execute(Message message) throws MessagingException, InterruptedException
{    Transport tr = null;    try {        tr = session.getTransport(getProtocol());        SynchronousTransportListener listener = null;        if (synchronousMode) {            listener = new SynchronousTransportListener();            tr.addTransportListener(listener);        }        if (useAuthentication) {            tr.connect(smtpServer, username, password);        } else {            tr.connect();        }        tr.sendMessage(message, message.getAllRecipients());        if (listener != null) /*synchronousMode==true*/        {                        listener.attend();        }    } finally {        if (tr != null) {            try {                tr.close();            } catch (Exception e) {                        }        }            }    }
1
public void execute() throws MessagingException, IOException, InterruptedException
{    execute(prepareMessage());}
0
public String getSmtpServer()
{    return smtpServer;}
0
public void setSmtpServer(String smtpServer)
{    this.smtpServer = smtpServer;}
0
public String getSender()
{    return sender;}
0
public void setSender(String sender)
{    this.sender = sender;}
0
public String getSubject()
{    return subject;}
0
public void setSubject(String subject)
{    this.subject = subject;}
0
public String getUsername()
{    return username;}
0
public void setUsername(String username)
{    this.username = username;}
0
public String getPassword()
{    return password;}
0
public void setPassword(String password)
{    this.password = password;}
0
public void setReceiverTo(List<InternetAddress> receiverTo)
{    this.receiverTo = receiverTo;}
0
public List<InternetAddress> getReceiverCC()
{    return receiverCC;}
0
public void setReceiverCC(List<InternetAddress> receiverCC)
{    this.receiverCC = receiverCC;}
0
public List<InternetAddress> getReceiverBCC()
{    return receiverBCC;}
0
public void setReceiverBCC(List<InternetAddress> receiverBCC)
{    this.receiverBCC = receiverBCC;}
0
public boolean isUseAuthentication()
{    return useAuthentication;}
0
public void setUseAuthentication(boolean useAuthentication)
{    this.useAuthentication = useAuthentication;}
0
public boolean getUseSSL()
{    return useSSL;}
0
public void setUseSSL(boolean useSSL)
{    this.useSSL = useSSL;}
0
public boolean getUseStartTLS()
{    return useStartTLS;}
0
public void setUseStartTLS(boolean useStartTLS)
{    this.useStartTLS = useStartTLS;}
0
public String getSmtpPort()
{    return smtpPort;}
0
public void setSmtpPort(String smtpPort)
{    this.smtpPort = smtpPort;}
0
public boolean isTrustAllCerts()
{    return trustAllCerts;}
0
public void setTrustAllCerts(boolean trustAllCerts)
{    this.trustAllCerts = trustAllCerts;}
0
public void setEnforceStartTLS(boolean enforceStartTLS)
{    this.enforceStartTLS = enforceStartTLS;}
0
public boolean isEnforceStartTLS()
{    return enforceStartTLS;}
0
public CollectionProperty getHeaders()
{    return headerFields;}
0
public void setHeaderFields(CollectionProperty headerFields)
{    this.headerFields = headerFields;}
0
public void addHeader(String headerName, String headerValue)
{    if (this.headerFields == null) {        this.headerFields = new CollectionProperty();    }    Argument argument = new Argument(headerName, headerValue);    this.headerFields.addItem(argument);}
0
public void clearHeaders()
{    if (this.headerFields == null) {        this.headerFields = new CollectionProperty();    } else {        this.headerFields.clear();    }}
0
public List<File> getAttachments()
{    return attachments;}
0
public void setAttachments(List<File> attachments)
{    this.attachments = attachments;}
0
public void addAttachment(File attachment)
{    this.attachments.add(attachment);}
0
public void clearAttachments()
{    this.attachments.clear();}
0
public boolean isSynchronousMode()
{    return synchronousMode;}
0
public void setSynchronousMode(boolean synchronousMode)
{    this.synchronousMode = synchronousMode;}
0
private String getProtocol()
{    return useSSL ? "smtps" : "smtp";}
0
private String getPort()
{    String port = smtpPort.trim();    if (port.length() > 0) {                return port;    }    if (useSSL) {        return "465";    }    if (useStartTLS) {        return "587";    }    return "25";}
0
public void setTimeOut(String timeOut)
{    this.timeOut = timeOut;}
0
public String getTimeout()
{    String timeout = timeOut.trim();    if (timeout.length() > 0) {                return timeout;    }        return "0";}
0
public void setConnectionTimeOut(String connectionTimeOut)
{    this.connectionTimeOut = connectionTimeOut;}
0
public String getConnectionTimeout()
{    String connectionTimeout = connectionTimeOut.trim();    if (connectionTimeout.length() > 0) {                return connectionTimeout;    }        return "0";}
0
public void setUseLocalTrustStore(boolean useLocalTrustStore)
{    this.useLocalTrustStore = useLocalTrustStore;}
0
public void setTrustStoreToUse(String trustStoreToUse)
{    this.trustStoreToUse = trustStoreToUse;}
0
public void setUseEmlMessage(boolean sendEmlMessage)
{    this.sendEmlMessage = sendEmlMessage;}
0
public void setEmlMessage(String emlMessage)
{    this.emlMessage = emlMessage;}
0
public void setMailBody(String body)
{    mailBody = body;}
0
public void setPlainBody(boolean plainBody)
{    this.plainBody = plainBody;}
0
public void setEnableDebug(boolean selected)
{    enableDebug = selected;}
0
public void setReplyTo(List<InternetAddress> replyTo)
{    this.replyTo = replyTo;}
0
public void setTlsProtocolsToUse(String tlsProtocols)
{    this.tlsProtocols = tlsProtocols;}
0
public String getTlsProtocolsToUse()
{    return this.tlsProtocols;}
0
public void messageDelivered(TransportEvent e)
{        finish();}
1
public void messageNotDelivered(TransportEvent e)
{        finish();}
1
public void messagePartiallyDelivered(TransportEvent e)
{        finish();}
1
public void attend() throws InterruptedException
{    synchronized (LOCK) {        while (!finished) {            LOCK.wait();        }    }}
0
public void finish()
{    finished = true;    synchronized (LOCK) {        LOCK.notify();    }}
0
public X509Certificate[] getAcceptedIssuers()
{    return EMPTY_X509Certificate;}
0
public void checkClientTrusted(X509Certificate[] certs, String authType)
{}
0
public void checkServerTrusted(X509Certificate[] certs, String authType)
{}
0
public static synchronized SocketFactory getDefault()
{    return new TrustAllSSLSocketFactory();}
0
public Socket createSocket(Socket socket, String s, int i, boolean flag) throws IOException
{    return factory.createSocket(socket, s, i, flag);}
0
public Socket createSocket(InetAddress inaddr, int i, InetAddress inaddr1, int j) throws IOException
{    return factory.createSocket(inaddr, i, inaddr1, j);}
0
public Socket createSocket(InetAddress inaddr, int i) throws IOException
{    return factory.createSocket(inaddr, i);}
0
public Socket createSocket(String s, int i, InetAddress inaddr, int j) throws IOException
{    return factory.createSocket(s, i, inaddr, j);}
0
public Socket createSocket(String s, int i) throws IOException
{    return factory.createSocket(s, i);}
0
public Socket createSocket() throws IOException
{    return factory.createSocket();}
0
public String[] getDefaultCipherSuites()
{    return factory.getSupportedCipherSuites();}
0
public String[] getSupportedCipherSuites()
{    return factory.getSupportedCipherSuites();}
0
public SampleResult sample(Entry e)
{    SendMailCommand sendMailCmd;    Message message;    SampleResult result = createSampleResult();    try {        sendMailCmd = createSendMailCommandFromProperties();        message = sendMailCmd.prepareMessage();        result.setBytes(calculateMessageSize(message));    } catch (Exception ex) {                result.setResponseCode("500");        result.setResponseMessage(ex.toString());        return result;    }        result.setDataType(SampleResult.TEXT);    try {        result.setRequestHeaders(getRequestHeaders(message));        result.setSamplerData(getSamplerData(message));    } catch (MessagingException | IOException ex) {        result.setSamplerData("Error occurred trying to save request info: " + ex);            }        result.sampleStart();    boolean isSuccessful = executeMessage(result, sendMailCmd, message);    result.sampleEnd();    try {        result.setResponseData(processSampler(message));    } catch (IOException | MessagingException ex) {            }    result.setSuccessful(isSuccessful);    return result;}
1
private SampleResult createSampleResult()
{    SampleResult result = new SampleResult();    result.setSampleLabel(getName());    return result;}
0
private boolean executeMessage(SampleResult result, SendMailCommand sendMailCmd, Message message)
{    boolean didSampleSucceed = false;    try {        sendMailCmd.execute(message);        result.setResponseCodeOK();        result.setResponseMessage("Message successfully sent!\n");        didSampleSucceed = true;    } catch (AuthenticationFailedException afex) {                result.setResponseCode("500");        result.setResponseMessage("AuthenticationFailedException: authentication failed - wrong username / password!\n" + afex);    } catch (Exception ex) {                result.setResponseCode("500");        result.setResponseMessage(ex.getMessage());    }    return didSampleSucceed;}
1
private long calculateMessageSize(Message message) throws IOException, MessagingException
{    if (getPropertyAsBoolean(MESSAGE_SIZE_STATS)) {                CountingOutputStream cs = new CountingOutputStream(new NullOutputStream());        message.writeTo(cs);        return cs.getByteCount();    } else {        return -1L;    }}
0
private byte[] processSampler(Message message) throws IOException, MessagingException
{        try (InputStream is = message.getInputStream()) {        return IOUtils.toByteArray(is);    }}
0
private List<File> getAttachmentFiles()
{    final String[] attachments = getPropertyAsString(ATTACH_FILE).split(FILENAME_SEPARATOR);    return     Arrays.stream(attachments).filter(s -> !s.isEmpty()).map(this::attachmentToFile).collect(Collectors.toList());}
0
private File attachmentToFile(String attachment)
{        File file = new File(attachment);    if (!file.isAbsolute() && !file.exists()) {        if (log.isDebugEnabled()) {                    }        file = new File(FileServer.getFileServer().getBaseDir(), attachment);        if (log.isDebugEnabled()) {                    }    }    return file;}
1
private String calculateSubject()
{    if (getPropertyAsBoolean(SUPPRESS_SUBJECT)) {        return null;    } else {        String subject = getPropertyAsString(SUBJECT);        if (getPropertyAsBoolean(INCLUDE_TIMESTAMP)) {            subject = subject + " <<< current timestamp: " + System.currentTimeMillis() + " >>>";        }        return subject;    }}
0
private SendMailCommand createSendMailCommandFromProperties() throws AddressException
{    SendMailCommand sendMailCmd = new SendMailCommand();    sendMailCmd.setSmtpServer(getPropertyAsString(SmtpSampler.SERVER));    sendMailCmd.setSmtpPort(getPropertyAsString(SmtpSampler.SERVER_PORT));    sendMailCmd.setConnectionTimeOut(getPropertyAsString(SmtpSampler.SERVER_CONNECTION_TIMEOUT));    sendMailCmd.setTimeOut(getPropertyAsString(SmtpSampler.SERVER_TIMEOUT));    sendMailCmd.setUseSSL(getPropertyAsBoolean(SecuritySettingsPanel.USE_SSL));    sendMailCmd.setUseStartTLS(getPropertyAsBoolean(SecuritySettingsPanel.USE_STARTTLS));    sendMailCmd.setTrustAllCerts(getPropertyAsBoolean(SecuritySettingsPanel.SSL_TRUST_ALL_CERTS));    sendMailCmd.setEnforceStartTLS(getPropertyAsBoolean(SecuritySettingsPanel.ENFORCE_STARTTLS));    sendMailCmd.setTlsProtocolsToUse(getPropertyAsString(SecuritySettingsPanel.TLS_PROTOCOLS));    sendMailCmd.setUseAuthentication(getPropertyAsBoolean(USE_AUTH));    sendMailCmd.setUsername(getPropertyAsString(USERNAME));    sendMailCmd.setPassword(getPropertyAsString(PASSWORD));    sendMailCmd.setUseLocalTrustStore(getPropertyAsBoolean(SecuritySettingsPanel.USE_LOCAL_TRUSTSTORE));    sendMailCmd.setTrustStoreToUse(getPropertyAsString(SecuritySettingsPanel.TRUSTSTORE_TO_USE));    sendMailCmd.setEmlMessage(getPropertyAsString(EML_MESSAGE_TO_SEND));    sendMailCmd.setUseEmlMessage(getPropertyAsBoolean(USE_EML));    if (!getPropertyAsBoolean(USE_EML)) {                sendMailCmd.setMailBody(getPropertyAsString(MESSAGE));        sendMailCmd.setPlainBody(getPropertyAsBoolean(PLAIN_BODY));        getAttachmentFiles().forEach(sendMailCmd::addAttachment);    }    sendMailCmd.setEnableDebug(getPropertyAsBoolean(ENABLE_DEBUG));    if (getPropertyAsString(MAIL_FROM).matches(".*@.*")) {        sendMailCmd.setSender(getPropertyAsString(MAIL_FROM));    }        sendMailCmd.setReceiverTo(getPropAsAddresses(SmtpSampler.RECEIVER_TO));    sendMailCmd.setReceiverCC(getPropAsAddresses(SmtpSampler.RECEIVER_CC));    sendMailCmd.setReceiverBCC(getPropAsAddresses(SmtpSampler.RECEIVER_BCC));    sendMailCmd.setReplyTo(getPropAsAddresses(SmtpSampler.MAIL_REPLYTO));    sendMailCmd.setSubject(calculateSubject());        sendMailCmd.setSynchronousMode(true);    sendMailCmd.setHeaderFields((CollectionProperty) getProperty(SmtpSampler.HEADER_FIELDS));    return sendMailCmd;}
0
private String getRequestHeaders(Message message) throws MessagingException
{    StringBuilder sb = new StringBuilder();        @SuppressWarnings("unchecked")    Enumeration<Header>     headers = message.getAllHeaders();    writeHeaders(headers, sb);    return sb.toString();}
0
private String getSamplerData(Message message) throws MessagingException, IOException
{    StringBuilder sb = new StringBuilder();        Object content = message.getContent();    if (content instanceof Multipart) {        Multipart multipart = (Multipart) content;        String contentType = multipart.getContentType();        ContentType ct = new ContentType(contentType);        String boundary = ct.getParameter("boundary");        for (int i = 0; i < multipart.getCount(); i++) {                        sb.append("--");            sb.append(boundary);            sb.append("\n");                        BodyPart bodyPart = multipart.getBodyPart(i);                        writeBodyPart(sb, bodyPart);        }        sb.append("--");        sb.append(boundary);        sb.append("--");        sb.append("\n");    } else if (content instanceof BodyPart) {        BodyPart bodyPart = (BodyPart) content;                writeBodyPart(sb, bodyPart);    } else if (content instanceof String) {        sb.append(content);    } else {        sb.append("Content has class: ");        sb.append(content.getClass().getCanonicalName());    }    return sb.toString();}
0
private void writeHeaders(Enumeration<Header> headers, StringBuilder sb)
{    while (headers.hasMoreElements()) {        Header header = headers.nextElement();        sb.append(header.getName());        sb.append(": ");        sb.append(header.getValue());        sb.append("\n");    }}
0
private void writeBodyPart(StringBuilder sb, BodyPart bodyPart) throws MessagingException, IOException
{        @SuppressWarnings("unchecked")    Enumeration<Header>     allHeaders = bodyPart.getAllHeaders();    writeHeaders(allHeaders, sb);        String disposition = bodyPart.getDisposition();    sb.append("\n");    if (Part.ATTACHMENT.equals(disposition)) {        sb.append("<attachment content not shown>");    } else {                sb.append(bodyPart.getContent());    }    sb.append("\n");}
0
private List<InternetAddress> getPropAsAddresses(String propKey) throws AddressException
{    final String propValue = getPropertyAsString(propKey).trim();    if (!propValue.isEmpty()) {                List<InternetAddress> addresses = new ArrayList<>();        for (String address : propValue.split(";")) {            addresses.add(new InternetAddress(address.trim()));        }        return addresses;    } else {        return null;    }}
0
public boolean applies(ConfigTestElement configElement)
{    String guiClass = configElement.getProperty(TestElement.GUI_CLASS).getStringValue();    return APPLIABLE_CONFIG_CLASSES.contains(guiClass);}
0
public static void createJMeterEnv()
{    File propsFile;    try {        propsFile = File.createTempFile("jmeter", ".properties");        propsFile.deleteOnExit();        JMeterUtils.loadJMeterProperties(propsFile.getAbsolutePath());    } catch (IOException ex) {        ex.printStackTrace(System.err);    }    JMeterUtils.setLocale(new Locale("ignoreResources"));}
0
public void testPassCustomProperties()
{    createJMeterEnv();    Properties jMeterProperties = JMeterUtils.getJMeterProperties();    jMeterProperties.put("prop1.name", "prop1.value");    jMeterProperties.put("mail.prop2.name", "mail.prop2.value");    MailReaderSampler sampler = new MailReaderSampler();    Properties properties = new Properties();    sampler.addCustomProperties(properties);    assertEquals(1, properties.size());    assertEquals("mail.prop2.value", properties.getProperty("mail.prop2.name"));}
0
public static DB getDBFromSource(String varName, String dbName)
{    return getDBFromSource(varName, dbName, null, null);}
0
public static DB getDBFromSource(String varName, String dbName, String login, String password)
{    MongoDB mongodb = (MongoDB) JMeterContextService.getContext().getVariables().getObject(varName);    if (mongodb == null) {        throw new IllegalStateException("You didn't define variable:" + varName + " using MongoDB Source Config (property:MongoDB Source)");    }    return mongodb.getDB(dbName, login, password);}
0
public String getTitle()
{    return this.getName();}
0
public String getConnection()
{    return connection;}
0
public void setConnection(String connection)
{    this.connection = connection;}
0
public String getSource()
{    return source;}
0
public void setSource(String source)
{    this.source = source;}
0
public static MongoDB getMongoDB(String source)
{    Object mongoSource = JMeterContextService.getContext().getVariables().getObject(source);    if (mongoSource == null) {        throw new IllegalStateException("mongoSource is null");    } else {        if (mongoSource instanceof MongoDB) {            return (MongoDB) mongoSource;        } else {            throw new IllegalStateException("Variable:" + source + " is not a MongoDB instance, class:" + mongoSource.getClass());        }    }}
0
public void addConfigElement(ConfigElement configElement)
{}
0
public boolean expectsModification()
{    return false;}
0
public void testStarted()
{    if (log.isDebugEnabled()) {            }    MongoClientOptions.Builder builder = MongoClientOptions.builder().autoConnectRetry(getAutoConnectRetry()).connectTimeout(getConnectTimeout()).connectionsPerHost(getConnectionsPerHost()).maxAutoConnectRetryTime(getMaxAutoConnectRetryTime()).maxWaitTime(getMaxWaitTime()).socketKeepAlive(getSocketKeepAlive()).socketTimeout(getSocketTimeout()).threadsAllowedToBlockForConnectionMultiplier(getThreadsAllowedToBlockForConnectionMultiplier());    if (getSafe()) {        builder.writeConcern(WriteConcern.SAFE);    } else {        builder.writeConcern(new WriteConcern(getWriteOperationNumberOfServers(), getWriteOperationTimeout(), getFsync(), getWaitForJournaling(), getContinueOnInsertError()));    }    MongoClientOptions mongoOptions = builder.build();    if (log.isDebugEnabled()) {            }    if (getThreadContext().getVariables().getObject(getSource()) != null) {        if (log.isWarnEnabled()) {                    }    } else {        if (log.isDebugEnabled()) {                    }        try {            getThreadContext().getVariables().putObject(getSource(), new MongoDB(MongoUtils.toServerAddresses(getConnection()), mongoOptions));        } catch (UnknownHostException e) {            throw new IllegalStateException(e);        }    }}
1
public void testStarted(String s)
{    testStarted();}
0
public void testEnded()
{    if (log.isDebugEnabled()) {            }    ((MongoDB) getThreadContext().getVariables().getObject(getSource())).clear();}
1
public void testEnded(String s)
{    testEnded();}
0
public boolean getAutoConnectRetry()
{    return autoConnectRetry;}
0
public void setAutoConnectRetry(boolean autoConnectRetry)
{    this.autoConnectRetry = autoConnectRetry;}
0
public int getConnectionsPerHost()
{    return connectionsPerHost;}
0
public void setConnectionsPerHost(int connectionsPerHost)
{    this.connectionsPerHost = connectionsPerHost;}
0
public int getConnectTimeout()
{    return connectTimeout;}
0
public void setConnectTimeout(int connectTimeout)
{    this.connectTimeout = connectTimeout;}
0
public long getMaxAutoConnectRetryTime()
{    return maxAutoConnectRetryTime;}
0
public void setMaxAutoConnectRetryTime(long maxAutoConnectRetryTime)
{    this.maxAutoConnectRetryTime = maxAutoConnectRetryTime;}
0
public int getMaxWaitTime()
{    return maxWaitTime;}
0
public void setMaxWaitTime(int maxWaitTime)
{    this.maxWaitTime = maxWaitTime;}
0
public int getSocketTimeout()
{    return socketTimeout;}
0
public void setSocketTimeout(int socketTimeout)
{    this.socketTimeout = socketTimeout;}
0
public boolean getSocketKeepAlive()
{    return socketKeepAlive;}
0
public void setSocketKeepAlive(boolean socketKeepAlive)
{    this.socketKeepAlive = socketKeepAlive;}
0
public int getThreadsAllowedToBlockForConnectionMultiplier()
{    return threadsAllowedToBlockForConnectionMultiplier;}
0
public void setThreadsAllowedToBlockForConnectionMultiplier(int threadsAllowedToBlockForConnectionMultiplier)
{    this.threadsAllowedToBlockForConnectionMultiplier = threadsAllowedToBlockForConnectionMultiplier;}
0
public boolean getFsync()
{    return fsync;}
0
public void setFsync(boolean fsync)
{    this.fsync = fsync;}
0
public boolean getSafe()
{    return safe;}
0
public void setSafe(boolean safe)
{    this.safe = safe;}
0
public boolean getWaitForJournaling()
{    return waitForJournaling;}
0
public void setWaitForJournaling(boolean waitForJournaling)
{    this.waitForJournaling = waitForJournaling;}
0
public int getWriteOperationNumberOfServers()
{    return writeOperationNumberOfServers;}
0
public void setWriteOperationNumberOfServers(int writeOperationNumberOfServers)
{    this.writeOperationNumberOfServers = writeOperationNumberOfServers;}
0
public int getWriteOperationTimeout()
{    return writeOperationTimeout;}
0
public void setWriteOperationTimeout(int writeOperationTimeout)
{    this.writeOperationTimeout = writeOperationTimeout;}
0
public boolean getContinueOnInsertError()
{    return continueOnInsertError;}
0
public void setContinueOnInsertError(boolean continueOnInsertError)
{    this.continueOnInsertError = continueOnInsertError;}
0
public String handle(Object o)
{    if (o == null) {        return "ok";    }    if (o instanceof Double) {        return this.handle((Double) o);    } else if (o instanceof Integer) {        return this.handle((Integer) o);    } else if (o instanceof String) {        return this.handle((String) o);    } else if (o instanceof DBObject) {        return this.handle((DBObject) o);    } else {        return "return type not handled";    }}
0
public String handle(Integer o)
{    return o.toString();}
0
public String handle(String o)
{    return o;}
0
public String handle(Double o)
{    return o.toString();}
0
public String handle(DBObject o)
{    return JSON.serialize(o);}
0
public DB getDB(String database, String username, String password)
{    if (log.isDebugEnabled()) {            }    DB db = mongo.getDB(database);    boolean authenticated = db.isAuthenticated();    if (!authenticated) {        if (username != null && password != null && username.length() > 0 && password.length() > 0) {            authenticated = db.authenticate(username, password.toCharArray());        }    }    if (log.isDebugEnabled()) {            }    return db;}
1
public void clear()
{    if (log.isDebugEnabled()) {            }    mongo.close();        mongo = null;}
1
public static List<ServerAddress> toServerAddresses(String connections) throws UnknownHostException
{    List<ServerAddress> addresses = new ArrayList<>();    for (String connection : Arrays.asList(connections.split(","))) {        int port = DEFAULT_PORT;        String[] hostPort = connection.split(":");        if (hostPort.length > 1 && !StringUtils.isEmpty(hostPort[1])) {            port = Integer.parseInt(hostPort[1].trim());        }        addresses.add(new ServerAddress(hostPort[0], port));    }    return addresses;}
0
public Object evaluate(DB db, String script) throws Exception
{    if (log.isDebugEnabled()) {            }    db.requestStart();    try {        db.requestEnsureConnection();        Object result = db.eval(script);        if (log.isDebugEnabled()) {                    }        return result;    } finally {        db.requestDone();    }}
1
public SampleResult sample(Entry e)
{    trace("sample()");    SampleResult res = new SampleResult();    String data = getScript();    res.setSampleLabel(getTitle());    res.setResponseCodeOK();        res.setResponseCode("200");    res.setSuccessful(true);    res.setResponseMessageOK();    res.setSamplerData(data);    res.setDataType(SampleResult.TEXT);        res.setContentType("text/plain");    res.sampleStart();    try {        MongoDB mongoDB = MongoSourceElement.getMongoDB(getSource());        MongoScriptRunner runner = new MongoScriptRunner();        DB db = mongoDB.getDB(getDatabase(), getUsername(), getPassword());        res.latencyEnd();        Object result = runner.evaluate(db, data);        EvalResultHandler handler = new EvalResultHandler();        String resultAsString = handler.handle(result);        res.setResponseData(resultAsString.getBytes());    } catch (Exception ex) {                res.setResponseCode("500");        res.setSuccessful(false);        res.setResponseMessage(ex.toString());        res.setResponseData(ex.getMessage().getBytes());    } finally {        res.sampleEnd();    }    return res;}
0
public String getTitle()
{    return this.getName();}
0
public String getScript()
{    return getPropertyAsString(SCRIPT);}
0
public void setScript(String script)
{    setProperty(SCRIPT, script);}
0
public String getDatabase()
{    return getPropertyAsString(DATABASE);}
0
public void setDatabase(String database)
{    setProperty(DATABASE, database);}
0
public String getUsername()
{    return getPropertyAsString(USERNAME);}
0
public void setUsername(String username)
{    setProperty(USERNAME, username);}
0
public String getPassword()
{    return getPropertyAsString(PASSWORD);}
0
public void setPassword(String password)
{    setProperty(PASSWORD, password);}
0
public String getSource()
{    return getPropertyAsString(SOURCE);}
0
public void setSource(String source)
{    setProperty(SOURCE, source);}
0
private void trace(String s)
{    if (log.isDebugEnabled()) {            }}
1
public String getLabelResource()
{        return "system_sampler_title";}
0
public String getStaticLabel()
{    return JMeterUtils.getResString(getLabelResource());}
0
private void init()
{        setLayout(new BorderLayout());    setBorder(makeBorder());    add(makeTitlePanel(), BorderLayout.NORTH);    add(makeCommandPanel(), BorderLayout.CENTER);    JPanel streamsCodePane = new JPanel(new BorderLayout());    streamsCodePane.add(makeStreamsPanel(), BorderLayout.NORTH);    streamsCodePane.add(makeReturnCodePanel(), BorderLayout.CENTER);    streamsCodePane.add(makeTimeoutPanel(), BorderLayout.SOUTH);    add(streamsCodePane, BorderLayout.SOUTH);}
0
public TestElement createTestElement()
{    SystemSampler sampler = new SystemSampler();    modifyTestElement(sampler);    return sampler;}
0
public void modifyTestElement(TestElement sampler)
{    super.configureTestElement(sampler);    SystemSampler systemSampler = (SystemSampler) sampler;    systemSampler.setCheckReturnCode(checkReturnCode.isSelected());    if (checkReturnCode.isSelected()) {        if (!StringUtils.isEmpty(desiredReturnCode.getText())) {            systemSampler.setExpectedReturnCode(Integer.parseInt(desiredReturnCode.getText()));        } else {            systemSampler.setExpectedReturnCode(SystemSampler.DEFAULT_RETURN_CODE);        }    } else {        systemSampler.setExpectedReturnCode(SystemSampler.DEFAULT_RETURN_CODE);    }    systemSampler.setCommand(command.getFilename());    systemSampler.setArguments((Arguments) argsPanel.createTestElement());    systemSampler.setEnvironmentVariables((Arguments) envPanel.createTestElement());    systemSampler.setDirectory(directory.getFilename());    systemSampler.setStdin(stdin.getFilename());    systemSampler.setStdout(stdout.getFilename());    systemSampler.setStderr(stderr.getFilename());    if (!StringUtils.isEmpty(timeout.getText())) {        try {            systemSampler.setTimout(Long.parseLong(timeout.getText()));        } catch (NumberFormatException e) {                    }    }}
1
public void configure(TestElement el)
{    super.configure(el);    SystemSampler systemSampler = (SystemSampler) el;    checkReturnCode.setSelected(systemSampler.getCheckReturnCode());    desiredReturnCode.setText(Integer.toString(systemSampler.getExpectedReturnCode()));    desiredReturnCode.setEnabled(checkReturnCode.isSelected());    command.setFilename(systemSampler.getCommand());    argsPanel.configure(systemSampler.getArguments());    envPanel.configure(systemSampler.getEnvironmentVariables());    directory.setFilename(systemSampler.getDirectory());    stdin.setFilename(systemSampler.getStdin());    stdout.setFilename(systemSampler.getStdout());    stderr.setFilename(systemSampler.getStderr());    timeout.setText(    systemSampler.getTimeout() == 0L ?     "" :     Long.toString(systemSampler.getTimeout()));}
0
private JPanel makeReturnCodePanel()
{    JPanel panel = new JPanel();    panel.setLayout(new BoxLayout(panel, BoxLayout.X_AXIS));    panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("return_code_config_box_title")));        checkReturnCode = new JCheckBox(JMeterUtils.getResString("check_return_code_title"));    checkReturnCode.addItemListener(this);        desiredReturnCode = new JLabeledTextField(JMeterUtils.getResString("expected_return_code_title"));    desiredReturnCode.setSize(desiredReturnCode.getSize().height, 30);    panel.add(checkReturnCode);    panel.add(Box.createHorizontalStrut(5));    panel.add(desiredReturnCode);    checkReturnCode.setSelected(true);    return panel;}
0
private JPanel makeTimeoutPanel()
{    JPanel panel = new JPanel();    panel.setLayout(new BoxLayout(panel, BoxLayout.X_AXIS));    panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("timeout_config_box_title")));        timeout = new JLabeledTextField(JMeterUtils.getResString("timeout_title"));    timeout.setSize(timeout.getSize().height, 30);    panel.add(timeout);    return panel;}
0
private JPanel makeCommandPanel()
{    JPanel cmdPanel = new JPanel();    cmdPanel.setLayout(new BoxLayout(cmdPanel, BoxLayout.X_AXIS));    JPanel cmdWkDirPane = new JPanel(new BorderLayout());    cmdWkDirPane.add(command, BorderLayout.NORTH);    cmdWkDirPane.add(directory, BorderLayout.SOUTH);    cmdPanel.add(cmdWkDirPane);    JPanel panel = new VerticalPanel();    panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("command_config_box_title")));    panel.add(cmdPanel, BorderLayout.NORTH);    panel.add(makeArgumentsPanel(), BorderLayout.CENTER);    panel.add(makeEnvironmentPanel(), BorderLayout.SOUTH);    return panel;}
0
private JPanel makeArgumentsPanel()
{    argsPanel = new     ArgumentsPanel(    JMeterUtils.getResString("arguments_panel_title"),     null,     true,     false, new ObjectTableModel(new String[] { ArgumentsPanel.COLUMN_RESOURCE_NAMES_1 }, Argument.class, new Functor[] {     new Functor("getValue") }, new Functor[] {     new Functor("setValue") }, new Class[] { String.class }));    return argsPanel;}
0
private JPanel makeEnvironmentPanel()
{        envPanel = new ArgumentsPanel(JMeterUtils.getResString("environment_panel_title"));    return envPanel;}
0
private JPanel makeStreamsPanel()
{    JPanel stdPane = new JPanel(new BorderLayout());    stdPane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),     JMeterUtils.getResString("command_config_std_streams_title")));    stdPane.add(stdin, BorderLayout.NORTH);    stdPane.add(stdout, BorderLayout.CENTER);    stdPane.add(stderr, BorderLayout.SOUTH);    return stdPane;}
0
public void clearGui()
{    super.clearGui();    directory.clearGui();    command.clearGui();    argsPanel.clearGui();    envPanel.clearGui();        desiredReturnCode.setText("");    checkReturnCode.setSelected(false);    desiredReturnCode.setEnabled(false);    stdin.clearGui();    stdout.clearGui();    stderr.clearGui();        timeout.setText("");}
0
public void itemStateChanged(ItemEvent e)
{    if (e.getSource() == checkReturnCode) {        desiredReturnCode.setEnabled(e.getStateChange() == ItemEvent.SELECTED);    }}
0
public SampleResult sample(Entry entry)
{    SampleResult results = new SampleResult();    results.setDataType(SampleResult.TEXT);    results.setSampleLabel(getName());    String command = getCommand();    Arguments args = getArguments();    Arguments environment = getEnvironmentVariables();    boolean checkReturnCode = getCheckReturnCode();    int expectedReturnCode = getExpectedReturnCode();    List<String> cmds = new ArrayList<>(args.getArgumentCount() + 1);    StringBuilder cmdLine = new StringBuilder((null == command) ? "" : command);    cmds.add(command);    for (int i = 0; i < args.getArgumentCount(); i++) {        Argument arg = args.getArgument(i);        cmds.add(arg.getPropertyAsString(Argument.VALUE));        cmdLine.append(" ");        cmdLine.append(cmds.get(i + 1));    }    Map<String, String> env = new HashMap<>();    for (int i = 0; i < environment.getArgumentCount(); i++) {        Argument arg = environment.getArgument(i);        env.put(arg.getName(), arg.getPropertyAsString(Argument.VALUE));    }    File directory;    if (StringUtils.isEmpty(getDirectory())) {        directory = new File(FileServer.getDefaultBase());        if (log.isDebugEnabled()) {                    }    } else {        directory = new File(getDirectory());        if (log.isDebugEnabled()) {                    }    }    if (log.isDebugEnabled()) {            }    results.setSamplerData("Working Directory: " + directory.getAbsolutePath() + "\nEnvironment: " + env + "\nExecuting: " + cmdLine.toString());    SystemCommand nativeCommand = null;    try {        nativeCommand = new SystemCommand(directory, getTimeout(), POLL_INTERVAL, env, getStdin(), getStdout(), getStderr());        results.sampleStart();        int returnCode = nativeCommand.run(cmds);        results.sampleEnd();        results.setResponseCode(Integer.toString(returnCode));        if (log.isDebugEnabled()) {                    }        if (checkReturnCode && (returnCode != expectedReturnCode)) {            results.setSuccessful(false);            results.setResponseMessage("Unexpected return code.  Expected [" + expectedReturnCode + "]. Actual [" + returnCode + "].");        } else {            results.setSuccessful(true);            results.setResponseMessage("OK");        }    } catch (IOException ioe) {        results.sampleEnd();        results.setSuccessful(false);                results.setResponseCode("500");        results.setResponseMessage("Exception occurred whilst executing system call: " + ioe);    } catch (InterruptedException ie) {        results.sampleEnd();        results.setSuccessful(false);                results.setResponseCode("500");        results.setResponseMessage("System Sampler interrupted whilst executing system call: " + ie);        Thread.currentThread().interrupt();    }    if (nativeCommand != null) {                results.setResponseData(nativeCommand.getOutResult().getBytes());    }    return results;}
1
public boolean applies(ConfigTestElement configElement)
{    String guiClass = configElement.getProperty(TestElement.GUI_CLASS).getStringValue();    return APPLIABLE_CONFIG_CLASSES.contains(guiClass);}
0
public String getDirectory()
{    return getPropertyAsString(DIRECTORY, FileServer.getDefaultBase());}
0
public void setDirectory(String directory)
{    setProperty(DIRECTORY, directory, FileServer.getDefaultBase());}
0
public void setCommand(String command)
{    setProperty(COMMAND, command);}
0
public String getCommand()
{    return getPropertyAsString(COMMAND);}
0
public void setArguments(Arguments args)
{    setProperty(new TestElementProperty(ARGUMENTS, args));}
0
public Arguments getArguments()
{    return (Arguments) getProperty(ARGUMENTS).getObjectValue();}
0
public void setCheckReturnCode(boolean checkit)
{    setProperty(CHECK_RETURN_CODE, checkit);}
0
public boolean getCheckReturnCode()
{    return getPropertyAsBoolean(CHECK_RETURN_CODE);}
0
public void setExpectedReturnCode(int code)
{    setProperty(EXPECTED_RETURN_CODE, Integer.toString(code));}
0
public int getExpectedReturnCode()
{    return getPropertyAsInt(EXPECTED_RETURN_CODE);}
0
public void setEnvironmentVariables(Arguments arguments)
{    setProperty(new TestElementProperty(ENVIRONMENT, arguments));}
0
public Arguments getEnvironmentVariables()
{    return (Arguments) getProperty(ENVIRONMENT).getObjectValue();}
0
public String getStdout()
{    return getPropertyAsString(STDOUT, "");}
0
public void setStdout(String filename)
{    setProperty(STDOUT, filename, "");}
0
public String getStderr()
{    return getPropertyAsString(STDERR, "");}
0
public void setStderr(String filename)
{    setProperty(STDERR, filename, "");}
0
public String getStdin()
{    return getPropertyAsString(STDIN, "");}
0
public void setStdin(String filename)
{    setProperty(STDIN, filename, "");}
0
public long getTimeout()
{    return getPropertyAsLong(TIMEOUT, 0L);}
0
public void setTimout(long timeoutMs)
{    setProperty(TIMEOUT, timeoutMs, 0L);}
0
public String getLabelResource()
{        return "tcp_config_title";}
0
public void configure(TestElement element)
{    super.configure(element);        classname.setText(element.getPropertyAsString(TCPSampler.CLASSNAME));    serverPanel.setServer(element.getPropertyAsString(TCPSampler.SERVER));        reUseConnection.setSelected(element.getPropertyAsBoolean(TCPSampler.RE_USE_CONNECTION, TCPSampler.RE_USE_CONNECTION_DEFAULT));    serverPanel.setPort(element.getPropertyAsString(TCPSampler.PORT));    serverPanel.setResponseTimeout(element.getPropertyAsString(TCPSampler.TIMEOUT));    serverPanel.setConnectTimeout(element.getPropertyAsString(TCPSampler.TIMEOUT_CONNECT));    setNoDelay.setTristateFromProperty(element, TCPSampler.NODELAY);    requestData.setInitialText(element.getPropertyAsString(TCPSampler.REQUEST));    requestData.setCaretPosition(0);    closeConnection.setTristateFromProperty(element, TCPSampler.CLOSE_CONNECTION);    soLinger.setText(element.getPropertyAsString(TCPSampler.SO_LINGER));    eolByte.setText(element.getPropertyAsString(TCPSampler.EOL_BYTE));}
0
public TestElement createTestElement()
{    ConfigTestElement element = new ConfigTestElement();    modifyTestElement(element);    return element;}
0
public void modifyTestElement(TestElement element)
{    configureTestElement(element);        element.setProperty(TCPSampler.CLASSNAME, classname.getText(), "");    element.setProperty(TCPSampler.SERVER, serverPanel.getServer());    element.setProperty(TCPSampler.RE_USE_CONNECTION, reUseConnection.isSelected());    element.setProperty(TCPSampler.PORT, serverPanel.getPort());    setNoDelay.setPropertyFromTristate(element, TCPSampler.NODELAY);    element.setProperty(TCPSampler.TIMEOUT, serverPanel.getResponseTimeout());    element.setProperty(TCPSampler.TIMEOUT_CONNECT, serverPanel.getConnectTimeout(), "");    element.setProperty(TCPSampler.REQUEST, requestData.getText());        closeConnection.setPropertyFromTristate(element, TCPSampler.CLOSE_CONNECTION);    element.setProperty(TCPSampler.SO_LINGER, soLinger.getText(), "");    element.setProperty(TCPSampler.EOL_BYTE, eolByte.getText(), "");}
0
public void clearGui()
{    super.clearGui();    serverPanel.clear();        classname.setText("");        requestData.setInitialText("");    reUseConnection.setSelected(true);        setNoDelay.setSelected(false);        closeConnection.setSelected(TCPSampler.CLOSE_CONNECTION_DEFAULT);        soLinger.setText("");        eolByte.setText("");}
0
private JPanel createNoDelayPanel()
{        JLabel label = new JLabel(JMeterUtils.getResString("tcp_nodelay"));    setNoDelay = new TristateCheckBox();    label.setLabelFor(setNoDelay);    JPanel nodelayPanel = new JPanel(new FlowLayout());    nodelayPanel.add(label);    nodelayPanel.add(setNoDelay);    return nodelayPanel;}
0
private JPanel createClosePortPanel()
{        JLabel label = new JLabel(JMeterUtils.getResString("reuseconnection"));    reUseConnection = new JCheckBox("", true);    reUseConnection.addItemListener(e -> {        if (e.getStateChange() == ItemEvent.SELECTED) {            closeConnection.setEnabled(true);        } else {            closeConnection.setEnabled(false);        }    });    label.setLabelFor(reUseConnection);    JPanel closePortPanel = new JPanel(new FlowLayout());    closePortPanel.add(label);    closePortPanel.add(reUseConnection);    return closePortPanel;}
0
private JPanel createCloseConnectionPanel()
{        JLabel label = new JLabel(JMeterUtils.getResString("closeconnection"));    closeConnection = new TristateCheckBox("", TCPSampler.CLOSE_CONNECTION_DEFAULT);    label.setLabelFor(closeConnection);    JPanel closeConnectionPanel = new JPanel(new FlowLayout());    closeConnectionPanel.add(label);    closeConnectionPanel.add(closeConnection);    return closeConnectionPanel;}
0
private JPanel createSoLingerOption()
{        JLabel label = new JLabel(JMeterUtils.getResString("solinger"));        soLinger = new JTextField(5);    soLinger.setMaximumSize(new Dimension(soLinger.getPreferredSize()));    label.setLabelFor(soLinger);    JPanel soLingerPanel = new JPanel(new FlowLayout());    soLingerPanel.add(label);    soLingerPanel.add(soLinger);    return soLingerPanel;}
0
private JPanel createEolBytePanel()
{        JLabel label = new JLabel(JMeterUtils.getResString("eolbyte"));        eolByte = new JTextField(3);    eolByte.setMaximumSize(new Dimension(eolByte.getPreferredSize()));    label.setLabelFor(eolByte);    JPanel eolBytePanel = new JPanel(new FlowLayout());    eolBytePanel.add(label);    eolBytePanel.add(eolByte);    return eolBytePanel;}
0
private JPanel createRequestPanel()
{        JLabel reqLabel = new JLabel(JMeterUtils.getResString("tcp_request_data"));    requestData = JSyntaxTextArea.getInstance(15, 80);        requestData.setLanguage("text");    reqLabel.setLabelFor(requestData);    JPanel reqDataPanel = new JPanel(new BorderLayout(5, 0));    reqDataPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder()));    reqDataPanel.add(reqLabel, BorderLayout.WEST);    reqDataPanel.add(JTextScrollPane.getInstance(requestData), BorderLayout.CENTER);    return reqDataPanel;}
0
private void init()
{        setLayout(new BorderLayout(0, 5));    serverPanel = new ServerPanel();    if (displayName) {        setBorder(makeBorder());        add(makeTitlePanel(), BorderLayout.NORTH);    }    VerticalPanel mainPanel = new VerticalPanel();        classname = new JLabeledTextField(JMeterUtils.getResString("tcp_classname"));    mainPanel.add(classname);    mainPanel.add(serverPanel);    HorizontalPanel optionsPanel = new HorizontalPanel();    optionsPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder()));    optionsPanel.add(createClosePortPanel());    optionsPanel.add(createCloseConnectionPanel());    optionsPanel.add(createNoDelayPanel());    optionsPanel.add(createSoLingerOption());    optionsPanel.add(createEolBytePanel());    mainPanel.add(optionsPanel);    mainPanel.add(createRequestPanel());    add(mainPanel, BorderLayout.CENTER);}
0
public void configure(TestElement element)
{    super.configure(element);    loginPanel.configure(element);    tcpDefaultPanel.configure(element);}
0
public TestElement createTestElement()
{    TCPSampler sampler = new TCPSampler();    modifyTestElement(sampler);    return sampler;}
0
public void modifyTestElement(TestElement sampler)
{    sampler.clear();    sampler.addTestElement(tcpDefaultPanel.createTestElement());    sampler.addTestElement(loginPanel.createTestElement());    super.configureTestElement(sampler);}
0
public void clearGui()
{    super.clearGui();    tcpDefaultPanel.clearGui();    loginPanel.clearGui();}
0
public String getLabelResource()
{        return "tcp_sample_title";}
0
private void init()
{        setLayout(new BorderLayout(0, 5));    setBorder(makeBorder());    add(makeTitlePanel(), BorderLayout.NORTH);    VerticalPanel mainPanel = new VerticalPanel();    tcpDefaultPanel = new TCPConfigGui(false);    mainPanel.add(tcpDefaultPanel);    loginPanel = new LoginConfigGui(false);        loginPanel.setBorder(BorderFactory.createTitledBorder(JMeterUtils.getResString("login_config")));    mainPanel.add(loginPanel);    add(mainPanel, BorderLayout.CENTER);}
0
public byte getEolByte()
{    return eolByte;}
0
public void setEolByte(int eolInt)
{    if (eolInt >= Byte.MIN_VALUE && eolInt <= Byte.MAX_VALUE) {        this.eolByte = (byte) eolInt;        useEolByte = true;    } else {        useEolByte = false;    }}
0
public void setupTest()
{}
0
public void teardownTest()
{}
0
public String getCharset()
{    return charset;}
0
public void setCharset(String charset)
{    this.charset = charset;}
0
public String read(InputStream is, SampleResult sampleResult) throws ReadException
{    return read(is);}
0
public static byte[] hexStringToByteArray(String hexEncodedBinary)
{    if (hexEncodedBinary.length() % 2 == 0) {        char[] sc = hexEncodedBinary.toCharArray();        byte[] ba = new byte[sc.length / 2];        for (int i = 0; i < ba.length; i++) {            int nibble0 = Character.digit(sc[i * 2], 16);            int nibble1 = Character.digit(sc[i * 2 + 1], 16);            if (nibble0 == -1 || nibble1 == -1) {                throw new IllegalArgumentException("Hex-encoded binary string contains an invalid hex digit in '" + sc[i * 2] + sc[i * 2 + 1] + "'");            }            ba[i] = (byte) ((nibble0 << 4) | nibble1);        }        return ba;    } else {        throw new IllegalArgumentException("Hex-encoded binary string contains an uneven no. of digits");    }}
0
public void write(OutputStream os, String hexEncodedBinary) throws IOException
{    os.write(hexStringToByteArray(hexEncodedBinary));    os.flush();    if (log.isDebugEnabled()) {            }}
1
public void write(OutputStream os, InputStream is)
{    throw new UnsupportedOperationException("Method not supported for Length-Prefixed data.");}
0
public String read(InputStream is) throws ReadException
{        return read(is, new SampleResult());}
1
public String read(InputStream is, SampleResult sampleResult) throws ReadException
{    ByteArrayOutputStream w = new ByteArrayOutputStream();    try {        byte[] buffer = new byte[4096];        int x = 0;        boolean first = true;        while ((x = is.read(buffer)) > -1) {            if (first) {                sampleResult.latencyEnd();                first = false;            }            w.write(buffer, 0, x);            if (useEolByte && (buffer[x - 1] == eolByte)) {                break;            }        }                IOUtils.closeQuietly(w);        final String hexString = JOrphanUtils.baToHexString(w.toByteArray());        if (log.isDebugEnabled()) {                    }        return hexString;    } catch (IOException e) {        throw new ReadException("", e, JOrphanUtils.baToHexString(w.toByteArray()));    }}
1
public void write(OutputStream os, String s) throws IOException
{    os.write(intToByteArray(s.length() / 2, lengthPrefixLen));    if (log.isDebugEnabled()) {            }    this.tcpClient.write(os, s);}
1
public void write(OutputStream os, InputStream is) throws IOException
{    this.tcpClient.write(os, is);}
0
public String read(InputStream is) throws ReadException
{        return read(is, new SampleResult());}
1
public String read(InputStream is, SampleResult sampleResult) throws ReadException
{    byte[] msg = new byte[0];    int msgLen = 0;    byte[] lengthBuffer = new byte[lengthPrefixLen];    try {        if (is.read(lengthBuffer, 0, lengthPrefixLen) == lengthPrefixLen) {            sampleResult.latencyEnd();            msgLen = byteArrayToInt(lengthBuffer);            msg = new byte[msgLen];            int bytes = JOrphanUtils.read(is, msg, 0, msgLen);            if (bytes < msgLen) {                            }        }        String buffer = JOrphanUtils.baToHexString(msg);        if (log.isDebugEnabled()) {                    }        return buffer;    } catch (IOException e) {        throw new ReadException("", e, JOrphanUtils.baToHexString(msg));    }}
1
public byte getEolByte()
{    return tcpClient.getEolByte();}
0
public void setEolByte(int eolInt)
{    throw new UnsupportedOperationException("Cannot set eomByte for prefixed messages");}
0
public String getPartialResponse()
{    return partialResponse;}
0
public static byte[] intToByteArray(int value, int len)
{    if (len == 2 || len == 4) {        if (len == 2 && (value < Short.MIN_VALUE || value > Short.MAX_VALUE)) {            throw new IllegalArgumentException("Value outside range for signed short int.");        } else {            byte[] b = new byte[len];            for (int i = 0; i < len; i++) {                int offset = (b.length - 1 - i) * 8;                b[i] = (byte) ((value >>> offset) & 0xFF);            }            return b;        }    } else {        throw new IllegalArgumentException("Length must be specified as either 2 or 4.");    }}
0
public static int byteArrayToInt(byte[] b)
{    if (b != null && (b.length == 2 || b.length == 4)) {                int value = b[0] << ((b.length - 1) * 8);        for (int i = 1; i < b.length; i++) {            int offset = (b.length - 1 - i) * 8;            value += (b[i] & 0xFF) << offset;        }        return value;    } else {        throw new IllegalArgumentException("Byte array is null or invalid length.");    }}
0
public void write(OutputStream os, String s) throws IOException
{    if (log.isDebugEnabled()) {            }    os.write(s.getBytes(CHARSET));    os.flush();}
1
public void write(OutputStream os, InputStream is) throws IOException
{    byte[] buff = new byte[512];    while (is.read(buff) > 0) {        if (log.isDebugEnabled()) {                    }        os.write(buff);        os.flush();    }}
1
public String read(InputStream is) throws ReadException
{    return read(is, new SampleResult());}
0
public String read(InputStream is, SampleResult sampleResult) throws ReadException
{    ByteArrayOutputStream w = new ByteArrayOutputStream();    try {        byte[] buffer = new byte[4096];        int x;        boolean first = true;        while ((x = is.read(buffer)) > -1) {            if (first) {                sampleResult.latencyEnd();                first = false;            }            w.write(buffer, 0, x);            if (useEolByte && (buffer[x - 1] == eolByte)) {                break;            }        }                if (log.isDebugEnabled()) {                    }        return w.toString(CHARSET);    } catch (IOException e) {        throw new ReadException("Error reading from server, bytes read: " + w.size(), e, w.toString());    }}
1
private String showEOL(final String input)
{    StringBuilder sb = new StringBuilder(input.length() * 2);    for (int i = 0; i < input.length(); i++) {        char ch = input.charAt(i);        if (ch < ' ') {            sb.append('[');            sb.append((int) ch);            sb.append(']');        } else {            sb.append(ch);        }    }    return sb.toString();}
0
private String getError()
{    Map<String, Object> cp = tp.get();    return (String) cp.get(ERRKEY);}
0
private Socket getSocket(String socketKey)
{    Map<String, Object> cp = tp.get();    Socket con = null;    if (isReUseConnection()) {        con = (Socket) cp.get(socketKey);        if (con != null) {                                }    }    if (con == null) {                try {                        closeSocket(socketKey);            SocketAddress sockaddr = new InetSocketAddress(getServer(), getPort());                        con = new Socket();            if (getPropertyAsString(SO_LINGER, "").length() > 0) {                con.setSoLinger(true, getSoLinger());            }            con.connect(sockaddr, getConnectTimeout());            if (log.isDebugEnabled()) {                                            }            cp.put(socketKey, con);        } catch (UnknownHostException e) {                                    cp.put(ERRKEY, e.toString());            return null;        } catch (IOException e) {                                    cp.put(ERRKEY, e.toString());            return null;        }    }        try {        con.setSoTimeout(getTimeout());        con.setTcpNoDelay(getNoDelay());        if (log.isDebugEnabled()) {                                }    } catch (SocketException se) {                        cp.put(ERRKEY, se.toString());    }    return con;}
1
private String getSocketKey()
{    return TCPKEY + "#" + getServer() + "#" + getPort() + "#" + getUsername() + "#" + getPassword();}
0
public String getUsername()
{    return getPropertyAsString(ConfigTestElement.USERNAME);}
0
public String getPassword()
{    return getPropertyAsString(ConfigTestElement.PASSWORD);}
0
public void setServer(String newServer)
{    this.setProperty(SERVER, newServer);}
0
public String getServer()
{    return getPropertyAsString(SERVER);}
0
public boolean isReUseConnection()
{    return getPropertyAsBoolean(RE_USE_CONNECTION, RE_USE_CONNECTION_DEFAULT);}
0
public void setCloseConnection(String close)
{    this.setProperty(CLOSE_CONNECTION, close, "");}
0
public boolean isCloseConnection()
{    return getPropertyAsBoolean(CLOSE_CONNECTION, CLOSE_CONNECTION_DEFAULT);}
0
public void setSoLinger(String soLinger)
{    this.setProperty(SO_LINGER, soLinger, "");}
0
public int getSoLinger()
{    return getPropertyAsInt(SO_LINGER);}
0
public void setEolByte(String eol)
{    this.setProperty(EOL_BYTE, eol, "");}
0
public int getEolByte()
{    return getPropertyAsInt(EOL_BYTE);}
0
public void setPort(String newFilename)
{    this.setProperty(PORT, newFilename);}
0
public int getPort()
{    return getPropertyAsInt(PORT);}
0
public void setFilename(String newFilename)
{    this.setProperty(FILENAME, newFilename);}
0
public String getFilename()
{    return getPropertyAsString(FILENAME);}
0
public void setRequestData(String newRequestData)
{    this.setProperty(REQUEST, newRequestData);}
0
public String getRequestData()
{    return getPropertyAsString(REQUEST);}
0
public void setTimeout(String newTimeout)
{    this.setProperty(TIMEOUT, newTimeout);}
0
public int getTimeout()
{    return getPropertyAsInt(TIMEOUT);}
0
public void setConnectTimeout(String newTimeout)
{    this.setProperty(TIMEOUT_CONNECT, newTimeout, "");}
0
public int getConnectTimeout()
{    return getPropertyAsInt(TIMEOUT_CONNECT, 0);}
0
public boolean getNoDelay()
{    return getPropertyAsBoolean(NODELAY);}
0
public void setClassname(String classname)
{        this.setProperty(CLASSNAME, classname, "");}
0
public String getClassname()
{    String clazz = getPropertyAsString(CLASSNAME, "");    if (clazz == null || clazz.length() == 0) {                clazz = JMeterUtils.getPropDefault("tcp.handler", "TCPClientImpl");    }    return clazz;}
0
public String getLabel()
{        return "tcp://" + this.getServer() + ":" + this.getPort();}
0
private Class<?> getClass(String className)
{    Class<?> c = null;    try {        c = Class.forName(className, false, Thread.currentThread().getContextClassLoader());    } catch (ClassNotFoundException e) {        try {            c = Class.forName(PROTO_PREFIX + className, false, Thread.currentThread().getContextClassLoader());        } catch (ClassNotFoundException e1) {                                }    }    return c;}
1
private TCPClient getProtocol()
{    TCPClient tcpClient = null;    Class<?> javaClass = getClass(getClassname());    if (javaClass == null) {        return null;    }    try {        tcpClient = (TCPClient) javaClass.getDeclaredConstructor().newInstance();        if (getPropertyAsString(EOL_BYTE, "").length() > 0) {            tcpClient.setEolByte(getEolByte());                    }        if (log.isDebugEnabled()) {                                }    } catch (Exception e) {                    }    return tcpClient;}
1
public SampleResult sample(Entry e)
{    if (firstSample) {                initSampling();        firstSample = false;    }    final boolean reUseConnection = isReUseConnection();    final boolean closeConnection = isCloseConnection();    String socketKey = getSocketKey();    if (log.isDebugEnabled()) {            }    SampleResult res = new SampleResult();    boolean isSuccessful = false;        res.setSampleLabel(getName());    String sb = "Host: " + getServer() + " Port: " + getPort() + "\n" + "Reuse: " + reUseConnection + " Close: " + closeConnection + "\n[" + "SOLINGER: " + getSoLinger() + " EOL: " + getEolByte() + " noDelay: " + getNoDelay() + "]";    res.setSamplerData(sb);    res.sampleStart();    try {        Socket sock;        try {            sock = getSocket(socketKey);        } finally {            res.connectEnd();        }        if (sock == null) {                        res.setResponseCode("500");            res.setResponseMessage(getError());        } else if (protocolHandler == null) {                        res.setResponseCode("500");            res.setResponseMessage("Protocol handler not found");        } else {            currentSocket = sock;            InputStream is = sock.getInputStream();            OutputStream os = sock.getOutputStream();            String req = getRequestData();                        res.setSamplerData(req);            protocolHandler.write(os, req);            String in = protocolHandler.read(is, res);            isSuccessful = setupSampleResult(res, in, null, protocolHandler);        }    } catch (ReadException ex) {                isSuccessful = setupSampleResult(res, ex.getPartialResponse(), ex, protocolHandler);        closeSocket(socketKey);    } catch (Exception ex) {                isSuccessful = setupSampleResult(res, "", ex, protocolHandler);        closeSocket(socketKey);    } finally {        currentSocket = null;                res.sampleEnd();                res.setSuccessful(isSuccessful);        if (!reUseConnection || closeConnection) {            closeSocket(socketKey);        }    }    return res;}
1
private boolean setupSampleResult(SampleResult sampleResult, String readResponse, Exception exception, TCPClient protocolHandler)
{    sampleResult.setResponseData(readResponse, protocolHandler != null ? protocolHandler.getCharset() : null);    sampleResult.setDataType(SampleResult.TEXT);    if (exception == null) {        sampleResult.setResponseCodeOK();                sampleResult.setResponseMessage("OK");    } else {                sampleResult.setResponseCode("500");                sampleResult.setResponseMessage(exception.toString());    }    boolean isSuccessful = exception == null;        if (!StringUtils.isEmpty(readResponse) && STATUS_PREFIX.length() > 0) {        int i = readResponse.indexOf(STATUS_PREFIX);        int j = readResponse.indexOf(STATUS_SUFFIX, i + STATUS_PREFIX.length());        if (i != -1 && j > i) {            String rc = readResponse.substring(i + STATUS_PREFIX.length(), j);            sampleResult.setResponseCode(rc);            isSuccessful = isSuccessful && checkResponseCode(rc);            if (HAVE_STATUS_PROPS) {                                sampleResult.setResponseMessage(STATUS_PROPS.getProperty(rc, "Status code not found in properties"));            } else {                sampleResult.setResponseMessage("No status property file");            }        } else {                        sampleResult.setResponseCode("999");            sampleResult.setResponseMessage("Status value not found");            isSuccessful = false;        }    }    return isSuccessful;}
0
private boolean checkResponseCode(String rc)
{    int responseCode = Integer.parseInt(rc);    return responseCode >= 400 && responseCode <= 599;}
0
public void threadStarted()
{            firstSample = true;}
1
private void initSampling()
{    protocolHandler = getProtocol();    if (log.isDebugEnabled()) {                    }    if (protocolHandler != null) {        protocolHandler.setupTest();    }}
1
private void closeSocket(String socketKey)
{    Map<String, Object> cp = tp.get();    Socket con = (Socket) cp.remove(socketKey);    if (con != null) {                        try {            con.close();        } catch (IOException e) {                                }    }}
1
public void threadFinished()
{            tearDown();    if (protocolHandler != null) {        protocolHandler.teardownTest();    }}
1
private void tearDown()
{    Map<String, Object> cp = tp.get();    cp.forEach((k, v) -> {        if (k.startsWith(TCPKEY)) {            try {                ((Socket) v).close();            } catch (IOException e) {                        }        }    });    cp.clear();    tp.remove();}
0
public boolean applies(ConfigTestElement configElement)
{    String guiClass = configElement.getProperty(TestElement.GUI_CLASS).getStringValue();    return APPLIABLE_CONFIG_CLASSES.contains(guiClass);}
0
public boolean interrupt()
{        Optional<Socket> sock = Optional.ofNullable(currentSocket);    if (sock.isPresent()) {        try {            sock.get().close();        } catch (IOException ignored) {                }        return true;    } else {        return false;    }}
0
public void testHexStringToByteArray() throws Exception
{    byte[] ba;    ba = BinaryTCPClientImpl.hexStringToByteArray("");    assertEquals(0, ba.length);    ba = BinaryTCPClientImpl.hexStringToByteArray("00");    assertEquals(1, ba.length);    assertEquals(0, ba[0]);    ba = BinaryTCPClientImpl.hexStringToByteArray("0f107F8081ff");    assertEquals(6, ba.length);    assertEquals(15, ba[0]);    assertEquals(16, ba[1]);    assertEquals(127, ba[2]);    assertEquals(-128, ba[3]);    assertEquals(-127, ba[4]);    assertEquals(-1, ba[5]);    try {                ba = BinaryTCPClientImpl.hexStringToByteArray("0f107f8081ff1");        fail("Expected IllegalArgumentException");    } catch (IllegalArgumentException expected) {        }    try {                BinaryTCPClientImpl.hexStringToByteArray("0f107xxf8081ff");        fail("Expected IllegalArgumentException");    } catch (IllegalArgumentException expected) {        }}
0
public void testLoopBack() throws Exception
{    assertEquals("0f107f8081ff", JOrphanUtils.baToHexString(BinaryTCPClientImpl.hexStringToByteArray("0f107f8081ff")));}
0
public void testRoundTrip() throws Exception
{    BinaryTCPClientImpl bi = new BinaryTCPClientImpl();    InputStream is = null;    try {        bi.write(null, is);        fail("Expected UnsupportedOperationException");    } catch (UnsupportedOperationException expected) {        }    ByteArrayOutputStream os = new ByteArrayOutputStream();        bi.write(os, "3132333435");    os.close();    assertEquals("12345", os.toString("ISO-8859-1"));    ByteArrayInputStream bis = new ByteArrayInputStream(os.toByteArray());    assertEquals("3132333435", bi.read(bis, new SampleResult()));}
0
public void testError() throws Exception
{    ByteArrayOutputStream os = null;    ByteArrayInputStream is = null;    LengthPrefixedBinaryTCPClientImpl lp = new LengthPrefixedBinaryTCPClientImpl();    try {        lp.write(os, is);        fail("Expected java.lang.UnsupportedOperationException");    } catch (java.lang.UnsupportedOperationException expected) {    }}
0
public void testValid() throws Exception
{    ByteArrayOutputStream os = new ByteArrayOutputStream();    LengthPrefixedBinaryTCPClientImpl lp = new LengthPrefixedBinaryTCPClientImpl();    final String DATA = "31323334353637";    lp.write(os, DATA);    os.close();    final byte[] byteArray = os.toByteArray();    assertEquals(2 + DATA.length() / 2, byteArray.length);    ByteArrayInputStream is = new ByteArrayInputStream(byteArray);    assertEquals(DATA, lp.read(is, new SampleResult()));}
0
public void testIntToByteArray() throws Exception
{    byte[] ba;    int len = 2;    ba = TCPClientDecorator.intToByteArray(0, len);    assertEquals(len, ba.length);    assertEquals(0, ba[0]);    assertEquals(0, ba[1]);    ba = TCPClientDecorator.intToByteArray(15, len);    assertEquals(len, ba.length);    assertEquals(0, ba[0]);    assertEquals(15, ba[1]);    ba = TCPClientDecorator.intToByteArray(255, len);    assertEquals(len, ba.length);    assertEquals(0, ba[0]);    assertEquals(-1, ba[1]);    ba = TCPClientDecorator.intToByteArray(256, len);    assertEquals(len, ba.length);    assertEquals(1, ba[0]);    assertEquals(0, ba[1]);    ba = TCPClientDecorator.intToByteArray(-1, len);    assertEquals(len, ba.length);    assertEquals(-1, ba[0]);    assertEquals(-1, ba[1]);    ba = TCPClientDecorator.intToByteArray(Short.MAX_VALUE, len);    assertEquals(len, ba.length);    assertEquals(127, ba[0]);    assertEquals(-1, ba[1]);    ba = TCPClientDecorator.intToByteArray(Short.MIN_VALUE, len);    assertEquals(len, ba.length);    assertEquals(-128, ba[0]);    assertEquals(0, ba[1]);    try {        ba = TCPClientDecorator.intToByteArray(Short.MIN_VALUE - 1, len);        fail();    } catch (IllegalArgumentException iae) {    }    try {        ba = TCPClientDecorator.intToByteArray(Short.MAX_VALUE + 1, len);        fail();    } catch (IllegalArgumentException iae) {    }    len = 4;    ba = TCPClientDecorator.intToByteArray(0, len);    assertEquals(len, ba.length);    assertEquals(0, ba[0]);    assertEquals(0, ba[1]);    assertEquals(0, ba[2]);    assertEquals(0, ba[3]);    ba = TCPClientDecorator.intToByteArray(15, len);    assertEquals(len, ba.length);    assertEquals(0, ba[0]);    assertEquals(0, ba[1]);    assertEquals(0, ba[2]);    assertEquals(15, ba[3]);    ba = TCPClientDecorator.intToByteArray(255, len);    assertEquals(len, ba.length);    assertEquals(0, ba[0]);    assertEquals(0, ba[1]);    assertEquals(0, ba[2]);    assertEquals(-1, ba[3]);    ba = TCPClientDecorator.intToByteArray(-1, len);    assertEquals(len, ba.length);    assertEquals(-1, ba[0]);    assertEquals(-1, ba[1]);    assertEquals(-1, ba[2]);    assertEquals(-1, ba[3]);    ba = TCPClientDecorator.intToByteArray(256, len);    assertEquals(len, ba.length);    assertEquals(0, ba[0]);    assertEquals(0, ba[1]);    assertEquals(1, ba[2]);    assertEquals(0, ba[3]);    ba = TCPClientDecorator.intToByteArray(65535, len);    assertEquals(len, ba.length);    assertEquals(0, ba[0]);    assertEquals(0, ba[1]);    assertEquals(-1, ba[2]);    assertEquals(-1, ba[3]);    ba = TCPClientDecorator.intToByteArray(65536, len);    assertEquals(len, ba.length);    assertEquals(0, ba[0]);    assertEquals(1, ba[1]);    assertEquals(0, ba[2]);    assertEquals(0, ba[3]);    ba = TCPClientDecorator.intToByteArray(Integer.MIN_VALUE, len);    assertEquals(len, ba.length);    assertEquals(-128, ba[0]);    assertEquals(0, ba[1]);    assertEquals(0, ba[2]);    assertEquals(0, ba[3]);    ba = TCPClientDecorator.intToByteArray(Integer.MAX_VALUE, len);    assertEquals(len, ba.length);    assertEquals(127, ba[0]);    assertEquals(-1, ba[1]);    assertEquals(-1, ba[2]);    assertEquals(-1, ba[3]);        try {        ba = TCPClientDecorator.intToByteArray(0, 0);        fail();    } catch (IllegalArgumentException iae) {    }    try {        ba = TCPClientDecorator.intToByteArray(0, 1);        fail();    } catch (IllegalArgumentException iae) {    }    try {        ba = TCPClientDecorator.intToByteArray(0, 3);        fail();    } catch (IllegalArgumentException iae) {    }    try {        TCPClientDecorator.intToByteArray(0, 5);        fail("Expected IllegalArgumentException");    } catch (IllegalArgumentException iae) {    }}
0
public void testByteArrayToInt() throws Exception
{    byte[] ba;    ba = new byte[] { 0, 0 };    assertEquals(0, TCPClientDecorator.byteArrayToInt(ba));    ba = new byte[] { 0, 15 };    assertEquals(15, TCPClientDecorator.byteArrayToInt(ba));    ba = new byte[] { 0, -1 };    assertEquals(255, TCPClientDecorator.byteArrayToInt(ba));    ba = new byte[] { 1, 0 };    assertEquals(256, TCPClientDecorator.byteArrayToInt(ba));    ba = new byte[] { -1, -1 };    assertEquals(-1, TCPClientDecorator.byteArrayToInt(ba));    ba = new byte[] { 0, 0, -1, -1 };    assertEquals(65535, TCPClientDecorator.byteArrayToInt(ba));    ba = new byte[] { 0, 1, 0, 0 };    assertEquals(65536, TCPClientDecorator.byteArrayToInt(ba));    ba = new byte[] { 0, 0, 0, 0 };    assertEquals(0, TCPClientDecorator.byteArrayToInt(ba));    ba = new byte[] { -128, 0, 0, 0 };    assertEquals(Integer.MIN_VALUE, TCPClientDecorator.byteArrayToInt(ba));    ba = new byte[] { 127, -1, -1, -1 };    assertEquals(Integer.MAX_VALUE, TCPClientDecorator.byteArrayToInt(ba));        try {        TCPClientDecorator.byteArrayToInt(null);        fail("Expected IllegalArgumentException");    } catch (IllegalArgumentException expected) {        }    try {        TCPClientDecorator.byteArrayToInt(new byte[] {});        fail("Expected IllegalArgumentException");    } catch (IllegalArgumentException expected) {        }    try {        TCPClientDecorator.byteArrayToInt(new byte[] { 0 });        fail("Expected IllegalArgumentException");    } catch (IllegalArgumentException expected) {        }    try {        TCPClientDecorator.byteArrayToInt(new byte[] { 0, 0, 0 });        fail("Expected IllegalArgumentException");    } catch (IllegalArgumentException expected) {        }    try {        TCPClientDecorator.byteArrayToInt(new byte[] { 0, 0, 0 });        fail("Expected IllegalArgumentException");    } catch (IllegalArgumentException expected) {        }}
