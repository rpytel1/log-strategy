c4aadd69dcbdc30a15109ff1725099184cafde4de56eae532ad42ff7aa52e41c
getCache
public Cache<K, V> getCache(String name) throws IllegalArgumentException, CacheException
{    if (!StringUtils.hasText(name)) {        throw new IllegalArgumentException("Cache name cannot be null or empty.");    }    Cache cache;    cache = caches.get(name);    if (cache == null) {        cache = createCache(name);        Cache existing = caches.putIfAbsent(name, cache);        if (existing != null) {            cache = existing;        }    }        return cache;}
b43e7dc4a9f7929f7cbf79e54bda99f9719af6c9509dfa283baa743984130577
destroy
public void destroy() throws Exception
{    while (!caches.isEmpty()) {        for (Cache cache : caches.values()) {            LifecycleUtils.destroy(cache);        }        caches.clear();    }}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    Collection<Cache> values = caches.values();    StringBuilder sb = new StringBuilder(getClass().getSimpleName()).append(" with ").append(caches.size()).append(" cache(s)): [");    int i = 0;    for (Cache cache : values) {        if (i > 0) {            sb.append(", ");        }        sb.append(cache.toString());        i++;    }    sb.append("]");    return sb.toString();}
45d77e50f36580b73f564b12a4cff413f90da274a7f320db65607808c59beb50
get
public V get(K key) throws CacheException
{    return map.get(key);}
4ef30104277f0ca64cf50fb465b22e3e8bbbc5e6051ec05e6b85d22d0eaa3802
put
public V put(K key, V value) throws CacheException
{    return map.put(key, value);}
478d63be104413b377a764b0dffa1a9f68d3c34dc2d191f5166ad5cc1869528b
remove
public V remove(K key) throws CacheException
{    return map.remove(key);}
b4784b2d58d329fdb413d221a292216bda3162e26bae93e33c534b8523b76a29
clear
public void clear() throws CacheException
{    map.clear();}
72ef1e59027007ffe0950edfd2670ad03bb65cd6463d5d1d282dfeb1750435b0
size
public int size()
{    return map.size();}
a36426a695959605362cd383d81d18c9f769e6afa6bec38be3837871a7303cac
keys
public Set<K> keys()
{    Set<K> keys = map.keySet();    if (!keys.isEmpty()) {        return Collections.unmodifiableSet(keys);    }    return Collections.emptySet();}
86f8cd7f78364ea8a0d36935cf2e3d294cee8b3b9e21cfe6a555d22e54e37f60
values
public Collection<V> values()
{    Collection<V> values = map.values();    if (!map.isEmpty()) {        return Collections.unmodifiableCollection(values);    }    return Collections.emptySet();}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return new StringBuilder("MapCache '").append(name).append("' (").append(map.size()).append(" entries)").toString();}
c948cd96af0fdf4a9d681b8e620b4624b07adcc2dec8cea4ceb641e3c4bc99e3
createCache
protected Cache createCache(String name)
{    return new MapCache<Object, Object>(name, new SoftHashMap<Object, Object>());}
803915e853382ad445a6e2333fabb8beb8e4acd70e908a0d818400f7baac42af
isEmpty
public boolean isEmpty()
{    Collection<Section> sections = this.sections.values();    if (!sections.isEmpty()) {        for (Section section : sections) {            if (!section.isEmpty()) {                return false;            }        }    }    return true;}
aeb7f4690f4ef1af92afd66937d32f2b96f1211d0263acf66a3c6cfcdb04c667
getSectionNames
public Set<String> getSectionNames()
{    return Collections.unmodifiableSet(sections.keySet());}
274925b92fc8d6a6479e3dc1f00946a6c0970012a0c5bc8699d4091393053de9
getSections
public Collection<Section> getSections()
{    return Collections.unmodifiableCollection(sections.values());}
c173f64033294837de6f5bc2fc17bc5ae08b260ad1beb0c55796d77271d60e82
getSection
public Section getSection(String sectionName)
{    String name = cleanName(sectionName);    return sections.get(name);}
ab772319efa0530273d2166ddfd151f0c45576057f002facd703ceee95cd0b74
addSection
public Section addSection(String sectionName)
{    String name = cleanName(sectionName);    Section section = getSection(name);    if (section == null) {        section = new Section(name);        this.sections.put(name, section);    }    return section;}
b8d029ed96ec968ba304e64a9e3de9bcd5edd032d4c8826dd873a3d1e14a3dae
removeSection
public Section removeSection(String sectionName)
{    String name = cleanName(sectionName);    return this.sections.remove(name);}
35a223978287e2db44e7e1fcc870889c44d0ac3b9d69a08f7518a3808821c2ca
cleanName
private static String cleanName(String sectionName)
{    String name = StringUtils.clean(sectionName);    if (name == null) {        log.trace("Specified name was null or empty.  Defaulting to the default section (name = \"\")");        name = DEFAULT_SECTION_NAME;    }    return name;}
691863f365034fb233f5d254fa56c689dbc6011330c348cec11c84dd4d84d084
setSectionProperty
public void setSectionProperty(String sectionName, String propertyName, String propertyValue)
{    String name = cleanName(sectionName);    Section section = getSection(name);    if (section == null) {        section = addSection(name);    }    section.put(propertyName, propertyValue);}
da2ad1acf0f944ac8667393cae2ead6dbd29df1db501d568e7fa23cb3cfb8842
getSectionProperty
public String getSectionProperty(String sectionName, String propertyName)
{    Section section = getSection(sectionName);    return section != null ? section.get(propertyName) : null;}
ea76ef250761797e8e8721e65bb947a39245d14f187014ce8d318e80761b39ab
getSectionProperty
public String getSectionProperty(String sectionName, String propertyName, String defaultValue)
{    String value = getSectionProperty(sectionName, propertyName);    return value != null ? value : defaultValue;}
e841deab3cf72a67bead8a46938e37fa50a04a8b315a526b1dda0a4682979925
fromResourcePath
public static Ini fromResourcePath(String resourcePath) throws ConfigurationException
{    if (!StringUtils.hasLength(resourcePath)) {        throw new IllegalArgumentException("Resource Path argument cannot be null or empty.");    }    Ini ini = new Ini();    ini.loadFromPath(resourcePath);    return ini;}
26e10728005eb1037d147cb66b06fef31a95df66828d1d2f805fa6b69761a428
loadFromPath
public void loadFromPath(String resourcePath) throws ConfigurationException
{    InputStream is;    try {        is = ResourceUtils.getInputStreamForPath(resourcePath);    } catch (IOException e) {        throw new ConfigurationException(e);    }    load(is);}
8723860e1f89d15b6f607f8416f15e62a27b41f3ef1d1d4bfadcbf2f419ba94d
load
public void load(String iniConfig) throws ConfigurationException
{    load(new Scanner(iniConfig));}
2055129d652ae04776d3f955626a30915b45a90c3b9c5f185d08f7e71d3ba36b
load
public void load(InputStream is) throws ConfigurationException
{    if (is == null) {        throw new NullPointerException("InputStream argument cannot be null.");    }    InputStreamReader isr;    try {        isr = new InputStreamReader(is, DEFAULT_CHARSET_NAME);    } catch (UnsupportedEncodingException e) {        throw new ConfigurationException(e);    }    load(isr);}
a9ecebb723339df7ff7fee89aaa963851e585ba8782f6e6b463fa159b51a1cb8
load
public void load(Reader reader)
{    Scanner scanner = new Scanner(reader);    try {        load(scanner);    } finally {        try {            scanner.close();        } catch (Exception e) {            log.debug("Unable to cleanly close the InputStream scanner.  Non-critical - ignoring.", e);        }    }}
34e7713165fa4a85a40cd5ace9e5f184844f49c379a40277d704625cfc98d2b0
merge
public void merge(Map<String, Section> m)
{    if (m != null) {        for (Entry<String, Section> entry : m.entrySet()) {            Section section = this.getSection(entry.getKey());            if (section == null) {                section = addSection(entry.getKey());            }            section.putAll(entry.getValue());        }    }}
d57db75db86d2bd693dedec6f4dc6efbfd1dabed03b935049a736af5f693a34c
addSection
private void addSection(String name, StringBuilder content)
{    if (content.length() > 0) {        String contentString = content.toString();        String cleaned = StringUtils.clean(contentString);        if (cleaned != null) {            Section section = new Section(name, contentString);            if (!section.isEmpty()) {                sections.put(name, section);            }        }    }}
f2da71cfa62afeb2226b635db109d015e96ba1c67373aa0045f4c4a7c1f233b2
load
public void load(Scanner scanner)
{    String sectionName = DEFAULT_SECTION_NAME;    StringBuilder sectionContent = new StringBuilder();    while (scanner.hasNextLine()) {        String rawLine = scanner.nextLine();        String line = StringUtils.clean(rawLine);        if (line == null || line.startsWith(COMMENT_POUND) || line.startsWith(COMMENT_SEMICOLON)) {                        continue;        }        String newSectionName = getSectionName(line);        if (newSectionName != null) {                        addSection(sectionName, sectionContent);                        sectionContent = new StringBuilder();            sectionName = newSectionName;            if (log.isDebugEnabled()) {                log.debug("Parsing " + SECTION_PREFIX + sectionName + SECTION_SUFFIX);            }        } else {                        sectionContent.append(rawLine).append("\n");        }    }        addSection(sectionName, sectionContent);}
278abdcf88f3ea6d55961da5f471ba648d9110ab41821c919127b0cd40b73b5b
isSectionHeader
protected static boolean isSectionHeader(String line)
{    String s = StringUtils.clean(line);    return s != null && s.startsWith(SECTION_PREFIX) && s.endsWith(SECTION_SUFFIX);}
40519ffcad78a9bfd2b3fe1c0a2695b9e08c7633afba2d735aa27c3e74a8401d
getSectionName
protected static String getSectionName(String line)
{    String s = StringUtils.clean(line);    if (isSectionHeader(s)) {        return cleanName(s.substring(1, s.length() - 1));    }    return null;}
4afeb0868b55bdd8e18a00a3cb43d83e0714378d1c4bb36f0936daefc060e2e8
equals
public boolean equals(Object obj)
{    if (obj instanceof Ini) {        Ini ini = (Ini) obj;        return this.sections.equals(ini.sections);    }    return false;}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    return this.sections.hashCode();}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    if (this.sections == null || this.sections.isEmpty()) {        return "<empty INI>";    } else {        StringBuilder sb = new StringBuilder("sections=");        int i = 0;        for (Ini.Section section : this.sections.values()) {            if (i > 0) {                sb.append(",");            }            sb.append(section.toString());            i++;        }        return sb.toString();    }}
72ef1e59027007ffe0950edfd2670ad03bb65cd6463d5d1d282dfeb1750435b0
size
public int size()
{    return this.sections.size();}
10251f6cf636f49b599299432df558beac5bc221e8b028def33778ce8ebe248a
containsKey
public boolean containsKey(Object key)
{    return this.sections.containsKey(key);}
c628f36c081e450f86a9e82a881e3e7747dea6b3d315f9d7efd8f5266497cb73
containsValue
public boolean containsValue(Object value)
{    return this.sections.containsValue(value);}
6deb865420a5eafd62a2e5b838f871cf2a164c707b551691eef00fc5f403e4b3
get
public Section get(Object key)
{    return this.sections.get(key);}
de4353e9e0627db24655358d348ebe83931b2abbe0d7ecac62868c6e274ca36a
put
public Section put(String key, Section value)
{    return this.sections.put(key, value);}
758a19acd646d0509058ac7c16c4977266ff88f53e820ff3c42bb98aba5a822f
remove
public Section remove(Object key)
{    return this.sections.remove(key);}
b16674faed1f14c6a20e6d329b9fc7c0dd8cc560196ce0ee959675e6adf23258
putAll
public void putAll(Map<? extends String, ? extends Section> m)
{    this.sections.putAll(m);}
21ac40bb9a99614b6ac18fa4043acb6173fccff96066fdfab963dba597923aa8
clear
public void clear()
{    this.sections.clear();}
19992f7878b292f412223047e28dd68a1ec96625e3ce9dda9ebba09864bae23c
keySet
public Set<String> keySet()
{    return Collections.unmodifiableSet(this.sections.keySet());}
bfa645aa3c18267b10ba3bfcac27d8e189a70f999fbddf69e17589cb86befcc7
values
public Collection<Section> values()
{    return Collections.unmodifiableCollection(this.sections.values());}
53f2fd308d5fa86cdaa9f6d3402bf35b99254eb79865d0b3b1e3875103748d5b
entrySet
public Set<Entry<String, Section>> entrySet()
{    return Collections.unmodifiableSet(this.sections.entrySet());}
a0210e51955b13293ea1f7c16335e477629887c043f9074e33f08b2704ec0235
isContinued
protected static boolean isContinued(String line)
{    if (!StringUtils.hasText(line)) {        return false;    }    int length = line.length();            int backslashCount = 0;    for (int i = length - 1; i > 0; i--) {        if (line.charAt(i) == ESCAPE_TOKEN) {            backslashCount++;        } else {            break;        }    }    return backslashCount % 2 != 0;}
ac670351440995b9a4433787fe15b6617000f666a9abdac131106c0697987ae7
isKeyValueSeparatorChar
private static boolean isKeyValueSeparatorChar(char c)
{    return Character.isWhitespace(c) || c == ':' || c == '=';}
e111b6e18807a226629f59a8e1458f48fc8437af6285dfaa105befcd1658b1c7
isCharEscaped
private static boolean isCharEscaped(CharSequence s, int index)
{    return index > 0 && s.charAt(index - 1) == ESCAPE_TOKEN;}
aa86fe725aceb03b4fd4e500f8d03d295cb6cc7e7b8b8523224267655ae6756b
splitKeyValue
protected static String[] splitKeyValue(String keyValueLine)
{    String line = StringUtils.clean(keyValueLine);    if (line == null) {        return null;    }    StringBuilder keyBuffer = new StringBuilder();    StringBuilder valueBuffer = new StringBuilder();        boolean buildingKey = true;    for (int i = 0; i < line.length(); i++) {        char c = line.charAt(i);        if (buildingKey) {            if (isKeyValueSeparatorChar(c) && !isCharEscaped(line, i)) {                                buildingKey = false;            } else {                keyBuffer.append(c);            }        } else {            if (valueBuffer.length() == 0 && isKeyValueSeparatorChar(c) && !isCharEscaped(line, i)) {                        } else {                valueBuffer.append(c);            }        }    }    String key = StringUtils.clean(keyBuffer.toString());    String value = StringUtils.clean(valueBuffer.toString());    if (key == null || value == null) {        String msg = "Line argument must contain a key and a value.  Only one string token was found.";        throw new IllegalArgumentException(msg);    }    log.trace("Discovered key/value pair: {} = {}", key, value);    return new String[] { key, value };}
f551454767be7080b80835ec17686d1957a2337ade10ae13ba2e8c4320e9ef7b
toMapProps
private static Map<String, String> toMapProps(String content)
{    Map<String, String> props = new LinkedHashMap<String, String>();    String line;    StringBuilder lineBuffer = new StringBuilder();    Scanner scanner = new Scanner(content);    while (scanner.hasNextLine()) {        line = StringUtils.clean(scanner.nextLine());        if (isContinued(line)) {                        line = line.substring(0, line.length() - 1);            lineBuffer.append(line);            continue;        } else {            lineBuffer.append(line);        }        line = lineBuffer.toString();        lineBuffer = new StringBuilder();        String[] kvPair = splitKeyValue(line);        props.put(kvPair[0], kvPair[1]);    }    return props;}
239fbe3eb64d679cbac1161825b07d6a8436ead3c6c3d140d9caec2275827023
getName
public String getName()
{    return this.name;}
21ac40bb9a99614b6ac18fa4043acb6173fccff96066fdfab963dba597923aa8
clear
public void clear()
{    this.props.clear();}
10251f6cf636f49b599299432df558beac5bc221e8b028def33778ce8ebe248a
containsKey
public boolean containsKey(Object key)
{    return this.props.containsKey(key);}
c628f36c081e450f86a9e82a881e3e7747dea6b3d315f9d7efd8f5266497cb73
containsValue
public boolean containsValue(Object value)
{    return this.props.containsValue(value);}
c418720ff072eed536e47597c7e1db566cb9cf439ab4f09239d271aee2081d57
entrySet
public Set<Entry<String, String>> entrySet()
{    return this.props.entrySet();}
cd46752bb39af0cdcecd54eaca62a0b2c10c9694a05e0ac383d749fe8837a0e9
get
public String get(Object key)
{    return this.props.get(key);}
803915e853382ad445a6e2333fabb8beb8e4acd70e908a0d818400f7baac42af
isEmpty
public boolean isEmpty()
{    return this.props.isEmpty();}
19992f7878b292f412223047e28dd68a1ec96625e3ce9dda9ebba09864bae23c
keySet
public Set<String> keySet()
{    return this.props.keySet();}
50270aa3ec7440d2b74f400da6e9e37713100d7a884713fb5dc925779bebb8a0
put
public String put(String key, String value)
{    return this.props.put(key, value);}
8b8efd38892647653ec902e44a9b95022f3702d73ff6cd0e48934a7e1c78afc3
putAll
public void putAll(Map<? extends String, ? extends String> m)
{    this.props.putAll(m);}
126978ad0672560f12fd205d3a4c4f691ab6e1b568ec99827b1a87a43300d097
remove
public String remove(Object key)
{    return this.props.remove(key);}
72ef1e59027007ffe0950edfd2670ad03bb65cd6463d5d1d282dfeb1750435b0
size
public int size()
{    return this.props.size();}
bdfb44ece0384fa3407b9f932592a06a599c4762bc4d2fb8b1f1cac4073ca7bd
values
public Collection<String> values()
{    return this.props.values();}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    String name = getName();    if (DEFAULT_SECTION_NAME.equals(name)) {        return "<default>";    }    return name;}
4afeb0868b55bdd8e18a00a3cb43d83e0714378d1c4bb36f0936daefc060e2e8
equals
public boolean equals(Object obj)
{    if (obj instanceof Section) {        Section other = (Section) obj;        return getName().equals(other.getName()) && this.props.equals(other.props);    }    return false;}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    return this.name.hashCode() * 31 + this.props.hashCode();}
12791edd7d317f266559787439df1aa67cabd19b3b444f723566a017cd71b1c9
interpolate
public String interpolate(String value)
{    return (String) interpolator.interpolate(value);}
19a1c9a48a8c23b3084dc10afd678c21392308908e27eacda1e3802e3c354c94
getConfigurationInterpolator
public ConfigurationInterpolator getConfigurationInterpolator()
{    return interpolator;}
12791edd7d317f266559787439df1aa67cabd19b3b444f723566a017cd71b1c9
interpolate
public String interpolate(String value)
{    return value;}
2d5b24f7f0116a751a1c525d28ea06a1742d7b3e1faf11196225d947e81a768d
getBeanName
public String getBeanName()
{    return beanName;}
f328631af1b62bbb91c7455161d2070ffcb8fee0a5b0e43a36909207847b65c1
getBean
public Object getBean()
{    return bean;}
34787656584b2ac0a93edb6bbf1d35e6aafbee5fbdafe832f16b77b66fa4555b
getBeanContext
public Map<String, Object> getBeanContext()
{    return beanContext;}
acb89f867397b95f11e1365d87fff80774a31ba468c63b26bdbce6540e8ed40b
onEvent
public void onEvent(BeanEvent e)
{    String className = e.getClass().getSimpleName();    int i = className.lastIndexOf(SUFFIX);    String subclassPrefix = i > 0 ? className.substring(0, i) : className;    logger.trace("{} bean '{}' [{}]", new Object[] { subclassPrefix, e.getBeanName(), e.getBean() });}
aab219df8048ee6979108a98f67489eb29442f984aad52e80e535a4ab58fae69
createDefaultObjectMap
private Map<String, Object> createDefaultObjectMap()
{    Map<String, Object> map = new LinkedHashMap<String, Object>();    map.put(EVENT_BUS_NAME, new DefaultEventBus());    return map;}
5ea2616f97b8f203f23f7756c66af0b3295c73f45402208af6a6273326391f35
apply
private void apply(Map<String, ?> objects)
{    if (!isEmpty(objects)) {        this.objects.putAll(objects);    }    EventBus found = findEventBus(this.objects);    Assert.notNull(found, "An " + EventBus.class.getName() + " instance must be present in the object defaults");    enableEvents(found);}
68d4d368568bada22a2c71a003d0cbfbfd602e778cca4b6fe53323cecae506be
getObjects
public Map<String, ?> getObjects()
{    return objects;}
2cd044a9386970c7c54db82f83e8bc71d7efad0e22332b700b69838353b8d0fc
setObjects
public void setObjects(Map<String, ?> objects)
{    this.objects.clear();    this.objects.putAll(createDefaultObjectMap());    apply(objects);}
95ba2586ef9b2d14764b5ac9f09fbad2b9da6ce258adad845ce5391f66af1ca2
enableEvents
private void enableEvents(EventBus eventBus)
{    Assert.notNull(eventBus, "EventBus argument cannot be null.");        for (Object subscriber : this.registeredEventSubscribers.values()) {        this.eventBus.unregister(subscriber);    }    this.registeredEventSubscribers.clear();    this.eventBus = eventBus;    for (Map.Entry<String, Object> entry : this.objects.entrySet()) {        enableEventsIfNecessary(entry.getValue(), entry.getKey());    }}
88931d43954708642d00c4f0d1adfff83dcd2d20a8d300b02d43a37fc4f6ce9c
enableEventsIfNecessary
private void enableEventsIfNecessary(Object bean, String name)
{    boolean applied = applyEventBusIfNecessary(bean);    if (!applied) {                if (isEventSubscriber(bean, name)) {                        this.eventBus.register(bean);            this.registeredEventSubscribers.put(name, bean);        }    }}
0985c9666cb668f76f5ca0fc6c4896fe87a7c46789bef3fabcec704b3ad9bda4
isEventSubscriber
private boolean isEventSubscriber(Object bean, String name)
{    List annotatedMethods = ClassUtils.getAnnotatedMethods(bean.getClass(), Subscribe.class);    return !isEmpty(annotatedMethods);}
babb2f7b8d17cef5f3688c1deeb779f64be1b94238655237950083bf56d01a8c
findEventBus
protected EventBus findEventBus(Map<String, ?> objects)
{    if (isEmpty(objects)) {        return null;    }        Object value = objects.get(EVENT_BUS_NAME);    if (value != null && value instanceof EventBus) {        return (EventBus) value;    }        for (Object v : objects.values()) {        if (v instanceof EventBus) {            return (EventBus) v;        }    }    return null;}
4a4a1cacaed5083ff9af341a941bfb58f9fa9fa0bf186ba2ab5680fe3f0c15fc
applyEventBusIfNecessary
private boolean applyEventBusIfNecessary(Object value)
{    if (value instanceof EventBusAware) {        ((EventBusAware) value).setEventBus(this.eventBus);        return true;    }    return false;}
350362fa043c473aa16d2c92fe738cfe5356e5b7937267d61bf64d3d15b91e39
getBean
public Object getBean(String id)
{    return objects.get(id);}
b3d3ef0df81f4886da544c144785430fb3e1cc2f0f42835a5c8456bd0b01ff17
getBean
public T getBean(String id, Class<T> requiredType)
{    if (requiredType == null) {        throw new NullPointerException("requiredType argument cannot be null.");    }    Object bean = getBean(id);    if (bean == null) {        return null;    }    Assert.state(requiredType.isAssignableFrom(bean.getClass()), "Bean with id [" + id + "] is not of the required type [" + requiredType.getName() + "].");    return (T) bean;}
7f2d8514192811cf8a9c0d36496d8d34f06f05fe508cd68954fd69bc24b40735
parseBeanId
private String parseBeanId(String lhs)
{    Assert.notNull(lhs);    if (lhs.indexOf('.') < 0) {        return lhs;    }    String classSuffix = ".class";    int index = lhs.indexOf(classSuffix);    if (index >= 0) {        return lhs.substring(0, index);    }    return null;}
5badd5b25da59649415d82251a5ee4e5c6aa860ce0ff6182b226b24803d20606
buildObjects
public Map<String, ?> buildObjects(Map<String, String> kvPairs)
{    if (kvPairs != null && !kvPairs.isEmpty()) {        BeanConfigurationProcessor processor = new BeanConfigurationProcessor();        for (Map.Entry<String, String> entry : kvPairs.entrySet()) {            String lhs = entry.getKey();            String rhs = interpolator.interpolate(entry.getValue());            String beanId = parseBeanId(lhs);            if (beanId != null) {                                processor.add(new InstantiationStatement(beanId, rhs));            } else {                                processor.add(new AssignmentStatement(lhs, rhs));            }        }        processor.execute();    }        LifecycleUtils.init(objects.values());    return objects;}
9cabd71a85d4928de1c9a46601c11d584f3e7522ee61146e1117d0d360a20b2e
destroy
public void destroy()
{    final Map<String, Object> immutableObjects = Collections.unmodifiableMap(objects);        List<Map.Entry<String, ?>> entries = new ArrayList<Map.Entry<String, ?>>(objects.entrySet());    Collections.reverse(entries);    for (Map.Entry<String, ?> entry : entries) {        String id = entry.getKey();        Object bean = entry.getValue();                if (bean != this.eventBus) {                        LifecycleUtils.destroy(bean);            BeanEvent event = new DestroyedBeanEvent(id, bean, immutableObjects);            eventBus.publish(event);                        this.eventBus.unregister(bean);        }    }        LifecycleUtils.destroy(this.eventBus);}
f56f935f5d4ae702e7a5985b290b91e5d554bd59bf0a6f989001c00c4f0f5618
createNewInstance
protected void createNewInstance(Map<String, Object> objects, String name, String value)
{    Object currentInstance = objects.get(name);    if (currentInstance != null) {        log.info("An instance with name '{}' already exists.  " + "Redefining this object as a new instance of type {}", name, value);    }        Object instance;    try {        instance = ClassUtils.newInstance(value);        if (instance instanceof Nameable) {            ((Nameable) instance).setName(name);        }    } catch (Exception e) {        String msg = "Unable to instantiate class [" + value + "] for object named '" + name + "'.  " + "Please ensure you've specified the fully qualified class name correctly.";        throw new ConfigurationException(msg, e);    }    objects.put(name, instance);}
8052c24c4ac01ce8be13dea0bc6f751ddddb6a8be44687e5137474f44d7db2d4
applyProperty
protected void applyProperty(String key, String value, Map objects)
{    int index = key.indexOf('.');    if (index >= 0) {        String name = key.substring(0, index);        String property = key.substring(index + 1, key.length());        if (GLOBAL_PROPERTY_PREFIX.equalsIgnoreCase(name)) {            applyGlobalProperty(objects, property, value);        } else {            applySingleProperty(objects, name, property, value);        }    } else {        throw new IllegalArgumentException("All property keys must contain a '.' character. " + "(e.g. myBean.property = value)  These should already be separated out by buildObjects().");    }}
fefd87b2c300fc42daf464f1069a1711f9838830fbb3542fa62bfb3e252654bc
applyGlobalProperty
protected void applyGlobalProperty(Map objects, String property, String value)
{    for (Object instance : objects.values()) {        try {            PropertyDescriptor pd = beanUtilsBean.getPropertyUtils().getPropertyDescriptor(instance, property);            if (pd != null) {                applyProperty(instance, property, value);            }        } catch (Exception e) {            String msg = "Error retrieving property descriptor for instance " + "of type [" + instance.getClass().getName() + "] " + "while setting property [" + property + "]";            throw new ConfigurationException(msg, e);        }    }}
5335edfe910f623cf135b1015831d4c55b546f1de6e86c8582e8c6c5b8805cb7
applySingleProperty
protected void applySingleProperty(Map objects, String name, String property, String value)
{    Object instance = objects.get(name);    if (property.equals("class")) {        throw new IllegalArgumentException("Property keys should not contain 'class' properties since these " + "should already be separated out by buildObjects().");    } else if (instance == null) {        String msg = "Configuration error.  Specified object [" + name + "] with property [" + property + "] without first defining that object's class.  Please first " + "specify the class property first, e.g. myObject = fully_qualified_class_name " + "and then define additional properties.";        throw new IllegalArgumentException(msg);    } else {        applyProperty(instance, property, value);    }}
aaee9a8be263dabaae1d4a42b508010c197d6e550003dd6753f78662b555f32d
isReference
protected boolean isReference(String value)
{    return value != null && value.startsWith(OBJECT_REFERENCE_BEGIN_TOKEN);}
9366ee6c64c3b97cb7d0f1ee4aa7fc6d089b98b5c27ac05b8f3423eed0b92fe9
getId
protected String getId(String referenceToken)
{    return referenceToken.substring(OBJECT_REFERENCE_BEGIN_TOKEN.length());}
2e1aebf629822f14a90e4872062629b7cfba3f82bf916fb5e4158555b82702f5
getReferencedObject
protected Object getReferencedObject(String id)
{    Object o = objects != null && !objects.isEmpty() ? objects.get(id) : null;    if (o == null) {        String msg = "The object with id [" + id + "] has not yet been defined and therefore cannot be " + "referenced.  Please ensure objects are defined in the order in which they should be " + "created and made available for future reference.";        throw new UnresolveableReferenceException(msg);    }    return o;}
fcffb1e0e7c52739f38679f19f0d0c7e672ec979465527c029620a8060a08d3c
unescapeIfNecessary
protected String unescapeIfNecessary(String value)
{    if (value != null && value.startsWith(ESCAPED_OBJECT_REFERENCE_BEGIN_TOKEN)) {        return value.substring(ESCAPED_OBJECT_REFERENCE_BEGIN_TOKEN.length() - 1);    }    return value;}
e19e07bfcdb0d46f25c74efc6ccc7525983d14a58fe1948ffa12e8d3f78713da
resolveReference
protected Object resolveReference(String reference)
{    String id = getId(reference);    log.debug("Encountered object reference '{}'.  Looking up object with id '{}'", reference, id);    final Object referencedObject = getReferencedObject(id);    if (referencedObject instanceof Factory) {        return ((Factory) referencedObject).getInstance();    }    return referencedObject;}
30b8f5a14c2b57cf3ffbd33c205e858eb7cea12e90d04a933722c941c61710dd
isTypedProperty
protected boolean isTypedProperty(Object object, String propertyName, Class clazz)
{    if (clazz == null) {        throw new NullPointerException("type (class) argument cannot be null.");    }    try {        PropertyDescriptor descriptor = beanUtilsBean.getPropertyUtils().getPropertyDescriptor(object, propertyName);        if (descriptor == null) {            String msg = "Property '" + propertyName + "' does not exist for object of " + "type " + object.getClass().getName() + ".";            throw new ConfigurationException(msg);        }        Class propertyClazz = descriptor.getPropertyType();        return clazz.isAssignableFrom(propertyClazz);    } catch (ConfigurationException ce) {                throw ce;    } catch (Exception e) {        String msg = "Unable to determine if property [" + propertyName + "] represents a " + clazz.getName();        throw new ConfigurationException(msg, e);    }}
4a997a2a132c08cf1e40674314cbc2ff48b85c63a43b4dc3c67abda1c49c0900
toSet
protected Set<?> toSet(String sValue)
{    String[] tokens = StringUtils.split(sValue);    if (tokens == null || tokens.length <= 0) {        return null;    }        if (tokens.length == 1 && isReference(tokens[0])) {        Object reference = resolveReference(tokens[0]);        if (reference instanceof Set) {            return (Set) reference;        }    }    Set<String> setTokens = new LinkedHashSet<String>(Arrays.asList(tokens));        Set<Object> values = new LinkedHashSet<Object>(setTokens.size());    for (String token : setTokens) {        Object value = resolveValue(token);        values.add(value);    }    return values;}
e0ac8fa25cf334914830bf160571f4a362ded166eb71550039bc07f11bc7eb1d
toMap
protected Map<?, ?> toMap(String sValue)
{    String[] tokens = StringUtils.split(sValue, StringUtils.DEFAULT_DELIMITER_CHAR, StringUtils.DEFAULT_QUOTE_CHAR, StringUtils.DEFAULT_QUOTE_CHAR, true, true);    if (tokens == null || tokens.length <= 0) {        return null;    }        if (tokens.length == 1 && isReference(tokens[0])) {        Object reference = resolveReference(tokens[0]);        if (reference instanceof Map) {            return (Map) reference;        }    }    Map<String, String> mapTokens = new LinkedHashMap<String, String>(tokens.length);    for (String token : tokens) {        String[] kvPair = StringUtils.split(token, MAP_KEY_VALUE_DELIMITER);        if (kvPair == null || kvPair.length != 2) {            String msg = "Map property value [" + sValue + "] contained key-value pair token [" + token + "] that does not properly split to a single key and pair.  This must be the " + "case for all map entries.";            throw new ConfigurationException(msg);        }        mapTokens.put(kvPair[0], kvPair[1]);    }        Map<Object, Object> map = new LinkedHashMap<Object, Object>(mapTokens.size());    for (Map.Entry<String, String> entry : mapTokens.entrySet()) {        Object key = resolveValue(entry.getKey());        Object value = resolveValue(entry.getValue());        map.put(key, value);    }    return map;}
4b60142bb511558f9606adb5b9deffd5cc7827a2f7ba0f95a28d1ff3af0aeffb
toCollection
protected Collection<?> toCollection(String sValue)
{    String[] tokens = StringUtils.split(sValue);    if (tokens == null || tokens.length <= 0) {        return null;    }        if (tokens.length == 1 && isReference(tokens[0])) {        Object reference = resolveReference(tokens[0]);        if (reference instanceof Collection) {            return (Collection) reference;        }    }        List<Object> values = new ArrayList<Object>(tokens.length);    for (String token : tokens) {        Object value = resolveValue(token);        values.add(value);    }    return values;}
b54466106d886e52e861f527d7527a9319859da7e0a715086a59c5cf0c31a9fd
toList
protected List<?> toList(String sValue)
{    String[] tokens = StringUtils.split(sValue);    if (tokens == null || tokens.length <= 0) {        return null;    }        if (tokens.length == 1 && isReference(tokens[0])) {        Object reference = resolveReference(tokens[0]);        if (reference instanceof List) {            return (List) reference;        }    }        List<Object> values = new ArrayList<Object>(tokens.length);    for (String token : tokens) {        Object value = resolveValue(token);        values.add(value);    }    return values;}
6808c1220f32b9fdbfa70b245b5b2390813bede7672408595aafd4260a3e9975
toBytes
protected byte[] toBytes(String sValue)
{    if (sValue == null) {        return null;    }    byte[] bytes;    if (sValue.startsWith(HEX_BEGIN_TOKEN)) {        String hex = sValue.substring(HEX_BEGIN_TOKEN.length());        bytes = Hex.decode(hex);    } else {                bytes = Base64.decode(sValue);    }    return bytes;}
4be95a8a2c91b96cadb2272f63245e385b23019c761b0876cb200125ac641cf2
resolveValue
protected Object resolveValue(String stringValue)
{    Object value;    if (isReference(stringValue)) {        value = resolveReference(stringValue);    } else {        value = unescapeIfNecessary(stringValue);    }    return value;}
ba011b7790e89875a41abe3cf63b2cdb61c8fa219a7170d9535fba22aee5566f
checkForNullOrEmptyLiteral
protected String checkForNullOrEmptyLiteral(String stringValue)
{    if (stringValue == null) {        return null;    }        if (stringValue.equals("\"null\"")) {        return NULL_VALUE_TOKEN;    } else     if (stringValue.equals("\"\"\"\"")) {        return EMPTY_STRING_VALUE_TOKEN;    } else {        return stringValue;    }}
0bdbe7743dfeddf4c0ded70f6811aa06324de9be124b2b907092c72d0498a687
applyProperty
protected void applyProperty(Object object, String propertyPath, Object value)
{    int mapBegin = propertyPath.indexOf(MAP_PROPERTY_BEGIN_TOKEN);    int mapEnd = -1;    String mapPropertyPath = null;    String keyString = null;    String remaining = null;    if (mapBegin >= 0) {                mapPropertyPath = propertyPath.substring(0, mapBegin);                mapEnd = propertyPath.indexOf(MAP_PROPERTY_END_TOKEN, mapBegin);                keyString = propertyPath.substring(mapBegin + 1, mapEnd);                if (propertyPath.length() > (mapEnd + 1)) {            remaining = propertyPath.substring(mapEnd + 1);            if (remaining.startsWith(".")) {                remaining = StringUtils.clean(remaining.substring(1));            }        }    }    if (remaining == null) {                if (keyString == null) {                        setProperty(object, propertyPath, value);        } else {                        if (isTypedProperty(object, mapPropertyPath, Map.class)) {                Map map = (Map) getProperty(object, mapPropertyPath);                Object mapKey = resolveValue(keyString);                                map.put(mapKey, value);            } else {                                int index = Integer.valueOf(keyString);                setIndexedProperty(object, mapPropertyPath, index, value);            }        }    } else {                        Object referencedValue = null;        if (isTypedProperty(object, mapPropertyPath, Map.class)) {            Map map = (Map) getProperty(object, mapPropertyPath);            Object mapKey = resolveValue(keyString);            referencedValue = map.get(mapKey);        } else {                        int index = Integer.valueOf(keyString);            referencedValue = getIndexedProperty(object, mapPropertyPath, index);        }        if (referencedValue == null) {            throw new ConfigurationException("Referenced map/array value '" + mapPropertyPath + "[" + keyString + "]' does not exist.");        }        applyProperty(referencedValue, remaining, value);    }}
9ad2332cf8e596dd3c3fd146a0bda3ffa8bac0c0dd2e4aeac7b5f0c14cacc9e0
setProperty
private void setProperty(Object object, String propertyPath, Object value)
{    try {        if (log.isTraceEnabled()) {            log.trace("Applying property [{}] value [{}] on object of type [{}]", new Object[] { propertyPath, value, object.getClass().getName() });        }        beanUtilsBean.setProperty(object, propertyPath, value);    } catch (Exception e) {        String msg = "Unable to set property '" + propertyPath + "' with value [" + value + "] on object " + "of type " + (object != null ? object.getClass().getName() : null) + ".  If " + "'" + value + "' is a reference to another (previously defined) object, prefix it with " + "'" + OBJECT_REFERENCE_BEGIN_TOKEN + "' to indicate that the referenced " + "object should be used as the actual value.  " + "For example, " + OBJECT_REFERENCE_BEGIN_TOKEN + value;        throw new ConfigurationException(msg, e);    }}
3ce89cfedbec549b2607c5e9a44ee8cb3ad7013e12e28da371dd8d0cbf31cc03
getProperty
private Object getProperty(Object object, String propertyPath)
{    try {        return beanUtilsBean.getPropertyUtils().getProperty(object, propertyPath);    } catch (Exception e) {        throw new ConfigurationException("Unable to access property '" + propertyPath + "'", e);    }}
1acb7c7630a9c7d8238ebd6f8bb4bf0314bdbff041be267b7fcd4b2cdda9b913
setIndexedProperty
private void setIndexedProperty(Object object, String propertyPath, int index, Object value)
{    try {        beanUtilsBean.getPropertyUtils().setIndexedProperty(object, propertyPath, index, value);    } catch (Exception e) {        throw new ConfigurationException("Unable to set array property '" + propertyPath + "'", e);    }}
58543c676b1a6a352decbf1ba7498ab02ac31567cb1b038b926707dc04ab7436
getIndexedProperty
private Object getIndexedProperty(Object object, String propertyPath, int index)
{    try {        return beanUtilsBean.getPropertyUtils().getIndexedProperty(object, propertyPath, index);    } catch (Exception e) {        throw new ConfigurationException("Unable to acquire array property '" + propertyPath + "'", e);    }}
32b1581b8d2d803d9a2d4b4ab370f235db439f6bbc91521c57bf461f041d26d1
isIndexedPropertyAssignment
protected boolean isIndexedPropertyAssignment(String propertyPath)
{    return propertyPath.endsWith("" + MAP_PROPERTY_END_TOKEN);}
2e8c8b1d859f3613ef1ae72266f50374a50b82a8578affa5d075911f7ab9994d
applyProperty
protected void applyProperty(Object object, String propertyName, String stringValue)
{    Object value;    if (NULL_VALUE_TOKEN.equals(stringValue)) {        value = null;    } else if (EMPTY_STRING_VALUE_TOKEN.equals(stringValue)) {        value = StringUtils.EMPTY_STRING;    } else if (isIndexedPropertyAssignment(propertyName)) {        String checked = checkForNullOrEmptyLiteral(stringValue);        value = resolveValue(checked);    } else if (isTypedProperty(object, propertyName, Set.class)) {        value = toSet(stringValue);    } else if (isTypedProperty(object, propertyName, Map.class)) {        value = toMap(stringValue);    } else if (isTypedProperty(object, propertyName, List.class)) {        value = toList(stringValue);    } else if (isTypedProperty(object, propertyName, Collection.class)) {        value = toCollection(stringValue);    } else if (isTypedProperty(object, propertyName, byte[].class)) {        value = toBytes(stringValue);    } else if (isTypedProperty(object, propertyName, ByteSource.class)) {        byte[] bytes = toBytes(stringValue);        value = ByteSource.Util.bytes(bytes);    } else {        String checked = checkForNullOrEmptyLiteral(stringValue);        value = resolveValue(checked);    }    applyProperty(object, propertyName, value);}
8c9645bcef05ba7ed51438dc51d11dc5bc04b9e034468cac22561def4aa4d937
createInterpolator
private Interpolator createInterpolator()
{    if (ClassUtils.isAvailable("org.apache.commons.configuration2.interpol.ConfigurationInterpolator")) {        return new CommonsInterpolator();    }    return new DefaultInterpolator();}
c618d6ed26e8fe17820884bf847887e090676794408b9d0a372259215a9be8c9
setInterpolator
public void setInterpolator(Interpolator interpolator)
{    this.interpolator = interpolator;}
3023389738fed1a492fc69223eb35f4d9ca0a920ff5de18662d684c990739ba4
add
public void add(Statement statement)
{        statements.add(statement);    if (statement instanceof InstantiationStatement) {        InstantiationStatement is = (InstantiationStatement) statement;        beanConfigurations.add(new BeanConfiguration(is));    } else {        AssignmentStatement as = (AssignmentStatement) statement;                        boolean addedToConfig = false;        String beanName = as.getRootBeanName();        for (int i = beanConfigurations.size() - 1; i >= 0; i--) {            BeanConfiguration mostRecent = beanConfigurations.get(i);            String mostRecentBeanName = mostRecent.getBeanName();            if (beanName.equals(mostRecentBeanName)) {                mostRecent.add(as);                addedToConfig = true;                break;            }        }        if (!addedToConfig) {                                                            beanConfigurations.add(new BeanConfiguration(as));        }    }}
bede5934779a409518dbb3042b91a5857baf593afc99995b9cc8a397e22c9a6b
execute
public void execute()
{    for (Statement statement : statements) {        statement.execute();        BeanConfiguration bd = statement.getBeanConfiguration();        if (bd.isExecuted()) {                        if (bd.getBeanName().equals(EVENT_BUS_NAME)) {                EventBus eventBus = (EventBus) bd.getBean();                enableEvents(eventBus);            }                        if (!bd.isGlobalConfig()) {                BeanEvent event = new ConfiguredBeanEvent(bd.getBeanName(), bd.getBean(), Collections.unmodifiableMap(objects));                eventBus.publish(event);            }                        LifecycleUtils.init(bd.getBean());                        if (!bd.isGlobalConfig()) {                BeanEvent event = new InitializedBeanEvent(bd.getBeanName(), bd.getBean(), Collections.unmodifiableMap(objects));                eventBus.publish(event);            }        }    }}
2d5b24f7f0116a751a1c525d28ea06a1742d7b3e1faf11196225d947e81a768d
getBeanName
public String getBeanName()
{    return this.beanName;}
a08f11e738102b352fe2ea9c75ab22bfc930110fa356f979ca5dcdc669b9ca64
isGlobalConfig
public boolean isGlobalConfig()
{        return GLOBAL_PROPERTY_PREFIX.equals(getBeanName());}
59a871664adc1f9db90972fe2a20a1af39a6b41e2c26d8a4776e1b1ac96595bf
add
public void add(AssignmentStatement as)
{    as.setBeanConfiguration(this);    assignments.add(as);}
bc87c20a5a27d3d464e84db0ecac2934dc7d7f3985245be59fbff2a3839614ea
setBean
public void setBean(Object bean)
{    this.bean = bean;}
f328631af1b62bbb91c7455161d2070ffcb8fee0a5b0e43a36909207847b65c1
getBean
public Object getBean()
{    return this.bean;}
359e7e33969f7ba6131c8abc70ca1f062884b4dff74e8a59846be133ee54f573
isExecuted
public boolean isExecuted()
{    if (instantiationStatement != null && !instantiationStatement.isExecuted()) {        return false;    }    for (AssignmentStatement as : assignments) {        if (!as.isExecuted()) {            return false;        }    }    return true;}
085527cf60a072e3c19fa87da5c13fd47a7d00ca9948c14353b28bb26fbfab3c
setBeanConfiguration
public void setBeanConfiguration(BeanConfiguration bd)
{    this.beanConfiguration = bd;}
59a0bb00e836179ac3b13c954168a1fe88c57a91fc75196d4e6df191c8ac3c45
getBeanConfiguration
public BeanConfiguration getBeanConfiguration()
{    return this.beanConfiguration;}
d52efbad180d3d3328491e6168d7a2952dda821dd602d3535d8f5271a01453bd
execute
public Object execute()
{    if (!isExecuted()) {        this.result = doExecute();        this.executed = true;    }    if (!getBeanConfiguration().isGlobalConfig()) {        Assert.notNull(this.bean, "Implementation must set the root bean for which it executed.");    }    return this.result;}
f328631af1b62bbb91c7455161d2070ffcb8fee0a5b0e43a36909207847b65c1
getBean
public Object getBean()
{    return this.bean;}
6b22112f34016b7518f98606069aa5aee68db7b0e5ec67db9ee1c0746e413837
setBean
protected void setBean(Object bean)
{    this.bean = bean;    if (this.beanConfiguration.getBean() == null) {        this.beanConfiguration.setBean(bean);    }}
e45d15ff8cefff91228cf54a337160b0e2a7e5b1e32268c71171d85dc02ab0e3
getResult
public Object getResult()
{    return result;}
359e7e33969f7ba6131c8abc70ca1f062884b4dff74e8a59846be133ee54f573
isExecuted
public boolean isExecuted()
{    return executed;}
1ab51f6808dca52d8a529d9bc01046fe2cf0e6b3b5e85e33ca63c1a0ae9cc303
doExecute
protected Object doExecute()
{    String beanName = this.lhs;    createNewInstance(objects, beanName, this.rhs);    Object instantiated = objects.get(beanName);    setBean(instantiated);                enableEventsIfNecessary(instantiated, beanName);    BeanEvent event = new InstantiatedBeanEvent(beanName, instantiated, Collections.unmodifiableMap(objects));    eventBus.publish(event);    return instantiated;}
1ab51f6808dca52d8a529d9bc01046fe2cf0e6b3b5e85e33ca63c1a0ae9cc303
doExecute
protected Object doExecute()
{    applyProperty(lhs, rhs, objects);    Object bean = objects.get(this.rootBeanName);    setBean(bean);    return null;}
cc80c220da88d39c27aa2140a15235fb8c1ade1798414fc80545943816295238
getRootBeanName
public String getRootBeanName()
{    return this.rootBeanName;}
138f9a6b7c66b5d9494e66085b16e7ebe6020167609a82d1eea7691eb6723909
isEmpty
private static boolean isEmpty(Map m)
{    return m == null || m.isEmpty();}
db596b53642ea727f60bbee77154b0fd34c88ce8e481bdc769096a951d31c8cd
isEmpty
private static boolean isEmpty(Collection c)
{    return c == null || c.isEmpty();}
500cdae0771f44e12e905471ad16b9b928667f19e77956836eb99281db53ebed
getSubject
protected Subject getSubject()
{    return SecurityUtils.getSubject();}
5deba545a1c0526f46ee22c7f3dd3f514fda495eb420d475f13b22d041cea072
setAnnotationClass
protected void setAnnotationClass(Class<? extends Annotation> annotationClass) throws IllegalArgumentException
{    if (annotationClass == null) {        String msg = "annotationClass argument cannot be null";        throw new IllegalArgumentException(msg);    }    this.annotationClass = annotationClass;}
f7d0c9effe16c9fe33bf280543f201e6dbcb3abd3c8283182c63ec77aa235825
getAnnotationClass
public Class<? extends Annotation> getAnnotationClass()
{    return this.annotationClass;}
583d33c8308605babfa49d8d1cded2b15877106a05affe7b1b2e611104d2f9a7
getHandler
public AnnotationHandler getHandler()
{    return handler;}
7ed4812f63c9877083cf145002f0735ca7007485cde68d0ffcbcb94dd93c2241
setHandler
public void setHandler(AnnotationHandler handler)
{    this.handler = handler;}
6a0b7a70bff0f1c89cadae72b84cf202966eb081962f53a16c28f1a71b2dc8fa
getResolver
public AnnotationResolver getResolver()
{    return resolver;}
b978b901b03e41338ac31a072f32e7920c1e613db02308bdc59df6f02af74b1b
setResolver
public void setResolver(AnnotationResolver resolver)
{    this.resolver = resolver;}
2595a5478484ac1d6bcf235e753acaa37716fda93e643aea4999156d5d4695ed
supports
public boolean supports(MethodInvocation mi)
{    return getAnnotation(mi) != null;}
699d6e6eed1f22f6f580662bf13c48d1e17f6da800878d2e83fe0336b4fd9b5e
getAnnotation
protected Annotation getAnnotation(MethodInvocation mi)
{    return getResolver().getAnnotation(mi, getHandler().getAnnotationClass());}
b1ec5334a9ee2830b74237f11c661005a5a73fd69396bedd55c8a611888661be
getAnnotation
public Annotation getAnnotation(MethodInvocation mi, Class<? extends Annotation> clazz)
{    if (mi == null) {        throw new IllegalArgumentException("method argument cannot be null");    }    Method m = mi.getMethod();    if (m == null) {        String msg = MethodInvocation.class.getName() + " parameter incorrectly constructed.  getMethod() returned null";        throw new IllegalArgumentException(msg);    }    Annotation annotation = m.getAnnotation(clazz);    if (annotation == null) {        Object miThis = mi.getThis();                annotation = miThis != null ? miThis.getClass().getAnnotation(clazz) : null;    }    return annotation;}
500cdae0771f44e12e905471ad16b9b928667f19e77956836eb99281db53ebed
getSubject
protected Subject getSubject()
{    return SecurityUtils.getSubject();}
f0370e36d568a12cbcfeadb606831e8edc6b458600281d061a01ad4aaaa84a22
setAuthenticationListeners
public void setAuthenticationListeners(Collection<AuthenticationListener> listeners)
{    if (listeners == null) {        this.listeners = new ArrayList<AuthenticationListener>();    } else {        this.listeners = listeners;    }}
419c4780611e2b42e9b4d55ce8c7542eff58f91b1e0b540b655f51312a2b08d7
getAuthenticationListeners
public Collection<AuthenticationListener> getAuthenticationListeners()
{    return this.listeners;}
03b82a95655df1f1a6bafd8040608cfbd1d2d609e89c341f52b30301fb94420c
notifySuccess
protected void notifySuccess(AuthenticationToken token, AuthenticationInfo info)
{    for (AuthenticationListener listener : this.listeners) {        listener.onSuccess(token, info);    }}
201f0ac178ed8e6780f203a5a112b7b4478ab6d2b806e4ad278873a5ef4d24e8
notifyFailure
protected void notifyFailure(AuthenticationToken token, AuthenticationException ae)
{    for (AuthenticationListener listener : this.listeners) {        listener.onFailure(token, ae);    }}
734829cb8aed33d4676229302119793048debbc28f5a1cc0e9ee94fef3ad3034
notifyLogout
protected void notifyLogout(PrincipalCollection principals)
{    for (AuthenticationListener listener : this.listeners) {        listener.onLogout(principals);    }}
6a60486de65510ea303d404f5173f7b287537b54a27c208a9e0fd62cbc9a5b98
onLogout
public void onLogout(PrincipalCollection principals)
{    notifyLogout(principals);}
d3ed2ae3d0ced1a675128fdb0f1ea4145fc6c094d062abc3fb66c32969b6869d
authenticate
public final AuthenticationInfo authenticate(AuthenticationToken token) throws AuthenticationException
{    if (token == null) {        throw new IllegalArgumentException("Method argument (authentication token) cannot be null.");    }    log.trace("Authentication attempt received for token [{}]", token);    AuthenticationInfo info;    try {        info = doAuthenticate(token);        if (info == null) {            String msg = "No account information found for authentication token [" + token + "] by this " + "Authenticator instance.  Please check that it is configured correctly.";            throw new AuthenticationException(msg);        }    } catch (Throwable t) {        AuthenticationException ae = null;        if (t instanceof AuthenticationException) {            ae = (AuthenticationException) t;        }        if (ae == null) {                                    String msg = "Authentication failed for token submission [" + token + "].  Possible unexpected " + "error? (Typical or expected login exceptions should extend from AuthenticationException).";            ae = new AuthenticationException(msg, t);            if (log.isWarnEnabled())                log.warn(msg, t);        }        try {            notifyFailure(token, ae);        } catch (Throwable t2) {            if (log.isWarnEnabled()) {                String msg = "Unable to send notification for failed authentication attempt - listener error?.  " + "Please check your AuthenticationListener implementation(s).  Logging sending exception " + "and propagating original AuthenticationException instead...";                log.warn(msg, t2);            }        }        throw ae;    }    log.debug("Authentication successful for token [{}].  Returned account [{}]", token, info);    notifySuccess(token, info);    return info;}
165b1c9352ad3d309866d5286d1a7fd8eae4d022cb5ad661b1269ac75c218ebb
getHost
public String getHost()
{    return host;}
fd56e1755384d43cd981f548599564b11bcb09d8d88ac23705d566dcbeb36882
getPrincipal
public Object getPrincipal()
{    return token;}
d40889d9d9d8556f6c0a26b69ca857cdca5bea6f57da293d87d0c43c6e6f218f
getCredentials
public Object getCredentials()
{    return token;}
ff19a6858052bd059345bbf1d0708c5fa45c4378a941cac2875a46a9e621e8ef
getToken
public String getToken()
{    return token;}
f097b7dc7dd6ec50f351b1c29f140cdd038bf3dab6d8f67f42dc48ae328acc19
doCredentialsMatch
public boolean doCredentialsMatch(AuthenticationToken token, AuthenticationInfo info)
{    return true;}
8e4fbafe616746394a4e6891e7848690eda3e74b22cb8800419071944ba0d5f5
encryptPassword
public String encryptPassword(Object plaintext)
{    Hash hash = hashPassword(plaintext);    checkHashFormatDurability();    return this.hashFormat.format(hash);}
16f9b12aa085ce3fa7e1efe04e96c38d9ba463f8f00f8d5b5125d6c80ac314cf
hashPassword
public Hash hashPassword(Object plaintext)
{    ByteSource plaintextBytes = createByteSource(plaintext);    if (plaintextBytes == null || plaintextBytes.isEmpty()) {        return null;    }    HashRequest request = createHashRequest(plaintextBytes);    return hashService.computeHash(request);}
fe139e1f418b1e2efb860ef4bf8e0c67ccf1f6d89e88048bb47ee1d434a6db36
passwordsMatch
public boolean passwordsMatch(Object plaintext, Hash saved)
{    ByteSource plaintextBytes = createByteSource(plaintext);    if (saved == null || saved.isEmpty()) {        return plaintextBytes == null || plaintextBytes.isEmpty();    } else {        if (plaintextBytes == null || plaintextBytes.isEmpty()) {            return false;        }    }    HashRequest request = buildHashRequest(plaintextBytes, saved);    Hash computed = this.hashService.computeHash(request);    return saved.equals(computed);}
786d6df5a4fbe708ebee7e0f14dee92e69ab028e112319ebbbecca0bf76a88a8
checkHashFormatDurability
protected void checkHashFormatDurability()
{    if (!this.hashFormatWarned) {        HashFormat format = this.hashFormat;        if (!(format instanceof ParsableHashFormat) && log.isWarnEnabled()) {            String msg = "The configured hashFormat instance [" + format.getClass().getName() + "] is not a " + ParsableHashFormat.class.getName() + " implementation.  This is " + "required if you wish to support backwards compatibility for saved password checking (almost " + "always desirable).  Without a " + ParsableHashFormat.class.getSimpleName() + " instance, " + "any hashService configuration changes will break previously hashed/saved passwords.";            log.warn(msg);            this.hashFormatWarned = true;        }    }}
605a6857da13e263e61612cd5bf6f752f527bf3983c7662900bbf7adb25273a6
createHashRequest
protected HashRequest createHashRequest(ByteSource plaintext)
{    return new HashRequest.Builder().setSource(plaintext).build();}
0c0b8ad97a4003a39e4d8cba0c1c83815f18503c245e5213cb18782db7983cd2
createByteSource
protected ByteSource createByteSource(Object o)
{    return ByteSource.Util.bytes(o);}
4d2aef613970969bd76828857cab6790510893675c599a8377eacd899a0fa27d
passwordsMatch
public boolean passwordsMatch(Object submittedPlaintext, String saved)
{    ByteSource plaintextBytes = createByteSource(submittedPlaintext);    if (saved == null || saved.length() == 0) {        return plaintextBytes == null || plaintextBytes.isEmpty();    } else {        if (plaintextBytes == null || plaintextBytes.isEmpty()) {            return false;        }    }                        HashFormat discoveredFormat = this.hashFormatFactory.getInstance(saved);    if (discoveredFormat != null && discoveredFormat instanceof ParsableHashFormat) {        ParsableHashFormat parsableHashFormat = (ParsableHashFormat) discoveredFormat;        Hash savedHash = parsableHashFormat.parse(saved);        return passwordsMatch(submittedPlaintext, savedHash);    }                                HashRequest request = createHashRequest(plaintextBytes);    Hash computed = this.hashService.computeHash(request);    String formatted = this.hashFormat.format(computed);    return saved.equals(formatted);}
3fc3c2a692328ebdd86d2fea027013117bf9177e3f0ea6d39738782b6ad49f08
buildHashRequest
protected HashRequest buildHashRequest(ByteSource plaintext, Hash saved)
{        return new HashRequest.Builder().setSource(plaintext).setAlgorithmName(saved.getAlgorithmName()).setSalt(saved.getSalt()).setIterations(saved.getIterations()).build();}
d6f30367164ff60510bf77646f5b6c6f045be30dfac0edcedd1d86dd8a6d9d97
getHashService
public HashService getHashService()
{    return hashService;}
7174f9ef105f27394e4130651328cacbfa59a50f4546f5614c2ac9b79634dac3
setHashService
public void setHashService(HashService hashService)
{    this.hashService = hashService;}
6d52f82221c1412b50b9c4e0bac21b01bd2286bcf3f47d2469cbaeefcb0bbe36
getHashFormat
public HashFormat getHashFormat()
{    return hashFormat;}
60bf6e052ca89e01bcafecbc8a296fb1fc3e154308e0104eaba4dea971ebb96a
setHashFormat
public void setHashFormat(HashFormat hashFormat)
{    this.hashFormat = hashFormat;}
025404491d4143d3ddb40bcfa16cc0fa32f6d89d885353c1666640d1ba9bceeb
getHashFormatFactory
public HashFormatFactory getHashFormatFactory()
{    return hashFormatFactory;}
729dfe1e0440515327ca97d3d166ea6b683cc09a114df3f6571f9e042ba28709
setHashFormatFactory
public void setHashFormatFactory(HashFormatFactory hashFormatFactory)
{    this.hashFormatFactory = hashFormatFactory;}
932a2853ceccdf1b43e97a80d0007ccf17cf8677e43cc1f46eef408bb83b3f9c
getHashAlgorithmName
public String getHashAlgorithmName()
{    return hashAlgorithm;}
1ff654a28d9e99345dc115b1f5d790caf41dadff68a3bdf4c776a0e76318980a
setHashAlgorithmName
public void setHashAlgorithmName(String hashAlgorithmName)
{    this.hashAlgorithm = hashAlgorithmName;}
4b59be610b0161bf13b4bfc6884894f4b0e237d71757c4b858f8602b6b4972ee
isStoredCredentialsHexEncoded
public boolean isStoredCredentialsHexEncoded()
{    return storedCredentialsHexEncoded;}
eb00587257edec3cc69fd08b42feb4afeea34b6ab36eea08d4c05d9a86e6ea05
setStoredCredentialsHexEncoded
public void setStoredCredentialsHexEncoded(boolean storedCredentialsHexEncoded)
{    this.storedCredentialsHexEncoded = storedCredentialsHexEncoded;}
6c7702806efb10e58942d0c413bc7fa474eca6c7b750035d0b76a7a4b8845029
isHashSalted
public boolean isHashSalted()
{    return hashSalted;}
51079280dba2e6d505b6f3563a1a96623af3bc8679d775bf5f8b97b98eee83c8
setHashSalted
public void setHashSalted(boolean hashSalted)
{    this.hashSalted = hashSalted;}
8a08f0efa4359173e0813d60676ba02dcfe9d055c4739c33a6115f83a83c1037
getHashIterations
public int getHashIterations()
{    return hashIterations;}
5b322b863ac467910ec819ae7010e62c72cae63d39e93a7e03cd4eb371b76636
setHashIterations
public void setHashIterations(int hashIterations)
{    if (hashIterations < 1) {        this.hashIterations = 1;    } else {        this.hashIterations = hashIterations;    }}
2ddac0e0b5e8f7ebe454efc9b55ed3b3bce7abd96d63dc9923c873db6750d0d0
getSalt
protected Object getSalt(AuthenticationToken token)
{    return token.getPrincipal();}
5a5dd126905308766c0c3b6fdb699902dc3fcacd459995ed1eb29cec5d9dac69
getCredentials
protected Object getCredentials(AuthenticationInfo info)
{    Object credentials = info.getCredentials();    byte[] storedBytes = toBytes(credentials);    if (credentials instanceof String || credentials instanceof char[]) {                if (isStoredCredentialsHexEncoded()) {            storedBytes = Hex.decode(storedBytes);        } else {            storedBytes = Base64.decode(storedBytes);        }    }    AbstractHash hash = newHashInstance();    hash.setBytes(storedBytes);    return hash;}
f097b7dc7dd6ec50f351b1c29f140cdd038bf3dab6d8f67f42dc48ae328acc19
doCredentialsMatch
public boolean doCredentialsMatch(AuthenticationToken token, AuthenticationInfo info)
{    Object tokenHashedCredentials = hashProvidedCredentials(token, info);    Object accountCredentials = getCredentials(info);    return equals(tokenHashedCredentials, accountCredentials);}
e3d499738d9195875a40fe058f839c7defe01af9618174c95687b22e995c6865
hashProvidedCredentials
protected Object hashProvidedCredentials(AuthenticationToken token, AuthenticationInfo info)
{    Object salt = null;    if (info instanceof SaltedAuthenticationInfo) {        salt = ((SaltedAuthenticationInfo) info).getCredentialsSalt();    } else {                if (isHashSalted()) {            salt = getSalt(token);        }    }    return hashProvidedCredentials(token.getCredentials(), salt, getHashIterations());}
7e27da627c91698db5e863201f41ed55284c6573c735ce559a59b2c7e372af2e
assertHashAlgorithmName
private String assertHashAlgorithmName() throws IllegalStateException
{    String hashAlgorithmName = getHashAlgorithmName();    if (hashAlgorithmName == null) {        String msg = "Required 'hashAlgorithmName' property has not been set.  This is required to execute " + "the hashing algorithm.";        throw new IllegalStateException(msg);    }    return hashAlgorithmName;}
fcc87a706c7c57cb44c40132404b2a7471cc7bedd411bbf9fa638d74e519bbf2
hashProvidedCredentials
protected Hash hashProvidedCredentials(Object credentials, Object salt, int hashIterations)
{    String hashAlgorithmName = assertHashAlgorithmName();    return new SimpleHash(hashAlgorithmName, credentials, salt, hashIterations);}
f7abc9fa44fe3eff51ad88e72d7fe2ba0dce9686151f35a3c2ec865f23480306
newHashInstance
protected AbstractHash newHashInstance()
{    String hashAlgorithmName = assertHashAlgorithmName();    return new SimpleHash(hashAlgorithmName);}
f097b7dc7dd6ec50f351b1c29f140cdd038bf3dab6d8f67f42dc48ae328acc19
doCredentialsMatch
public boolean doCredentialsMatch(AuthenticationToken token, AuthenticationInfo info)
{    PasswordService service = ensurePasswordService();    Object submittedPassword = getSubmittedPassword(token);    Object storedCredentials = getStoredPassword(info);    assertStoredCredentialsType(storedCredentials);    if (storedCredentials instanceof Hash) {        Hash hashedPassword = (Hash) storedCredentials;        HashingPasswordService hashingService = assertHashingPasswordService(service);        return hashingService.passwordsMatch(submittedPassword, hashedPassword);    }        String formatted = (String) storedCredentials;    return passwordService.passwordsMatch(submittedPassword, formatted);}
01c19dc388c99a12c1bef13e0fa78d25b40ca03506ab86958c7a3c3f2a19bf6d
assertHashingPasswordService
private HashingPasswordService assertHashingPasswordService(PasswordService service)
{    if (service instanceof HashingPasswordService) {        return (HashingPasswordService) service;    }    String msg = "AuthenticationInfo's stored credentials are a Hash instance, but the " + "configured passwordService is not a " + HashingPasswordService.class.getName() + " instance.  This is required to perform Hash " + "object password comparisons.";    throw new IllegalStateException(msg);}
08e271f13572b8a0681b6c919383a60a81645e51ea59b50095c8b321214eba71
ensurePasswordService
private PasswordService ensurePasswordService()
{    PasswordService service = getPasswordService();    if (service == null) {        String msg = "Required PasswordService has not been configured.";        throw new IllegalStateException(msg);    }    return service;}
0a7cd51233a8d34f2d20512b4be56a0ef64c3879697009109cfeb236f8efc0f8
getSubmittedPassword
protected Object getSubmittedPassword(AuthenticationToken token)
{    return token != null ? token.getCredentials() : null;}
0312a263372fdb85e1710042ad05673a16f93ed56855271a2ca62e9a3e7f4f3b
assertStoredCredentialsType
private void assertStoredCredentialsType(Object credentials)
{    if (credentials instanceof String || credentials instanceof Hash) {        return;    }    String msg = "Stored account credentials are expected to be either a " + Hash.class.getName() + " instance or a formatted hash String.";    throw new IllegalArgumentException(msg);}
f100d28723d48628dfede3ea54a5769fa656381215eb20c696a0b9f3c9af2b2c
getStoredPassword
protected Object getStoredPassword(AuthenticationInfo storedAccountInfo)
{    Object stored = storedAccountInfo != null ? storedAccountInfo.getCredentials() : null;        if (stored instanceof char[]) {        stored = new String((char[]) stored);    }    return stored;}
731f081eefa3babcb36b80d3091678bf544babe709cae9f90675bce3a00096cd
getPasswordService
public PasswordService getPasswordService()
{    return passwordService;}
d17903f38b5708b08f558f132c4b843764e928103251cbcbc5039a229a581d37
setPasswordService
public void setPasswordService(PasswordService passwordService)
{    this.passwordService = passwordService;}
d809b2a4ca224f9d53ef02e6479f9070e940ad3b876a99fec02a215b88f3fde4
getCredentials
protected Object getCredentials(AuthenticationToken token)
{    return token.getCredentials();}
5a5dd126905308766c0c3b6fdb699902dc3fcacd459995ed1eb29cec5d9dac69
getCredentials
protected Object getCredentials(AuthenticationInfo info)
{    return info.getCredentials();}
c4ccc1d5881925e1a1121a2de5782d22cb60d1a663da7612934215dc18548f7d
equals
protected boolean equals(Object tokenCredentials, Object accountCredentials)
{    if (log.isDebugEnabled()) {        log.debug("Performing credentials equality check for tokenCredentials of type [" + tokenCredentials.getClass().getName() + " and accountCredentials of type [" + accountCredentials.getClass().getName() + "]");    }    if (isByteSource(tokenCredentials) && isByteSource(accountCredentials)) {        if (log.isDebugEnabled()) {            log.debug("Both credentials arguments can be easily converted to byte arrays.  Performing " + "array equals comparison");        }        byte[] tokenBytes = toBytes(tokenCredentials);        byte[] accountBytes = toBytes(accountCredentials);        return MessageDigest.isEqual(tokenBytes, accountBytes);    } else {        return accountCredentials.equals(tokenCredentials);    }}
f097b7dc7dd6ec50f351b1c29f140cdd038bf3dab6d8f67f42dc48ae328acc19
doCredentialsMatch
public boolean doCredentialsMatch(AuthenticationToken token, AuthenticationInfo info)
{    Object tokenCredentials = getCredentials(token);    Object accountCredentials = getCredentials(info);    return equals(tokenCredentials, accountCredentials);}
76bb3105746f9bf4c823929312b1227e8d974a1545f3a1cee6034d73e53fafc3
beforeAllAttempts
public AuthenticationInfo beforeAllAttempts(Collection<? extends Realm> realms, AuthenticationToken token) throws AuthenticationException
{    return new SimpleAuthenticationInfo();}
8483b920a98fccebb4ebb3160316db3aebeac0a32cb2ef23b6b1870821e24ef2
beforeAttempt
public AuthenticationInfo beforeAttempt(Realm realm, AuthenticationToken token, AuthenticationInfo aggregate) throws AuthenticationException
{    return aggregate;}
ee63698231eded893ecf53ea85ff3c2047702db2ce6b6b36f43fa582e07c09f9
afterAttempt
public AuthenticationInfo afterAttempt(Realm realm, AuthenticationToken token, AuthenticationInfo singleRealmInfo, AuthenticationInfo aggregateInfo, Throwable t) throws AuthenticationException
{    AuthenticationInfo info;    if (singleRealmInfo == null) {        info = aggregateInfo;    } else {        if (aggregateInfo == null) {            info = singleRealmInfo;        } else {            info = merge(singleRealmInfo, aggregateInfo);        }    }    return info;}
167e011889b390374d4fedb6c8483c8d0baad3aa455047fe7998d52ce16e6c1b
merge
protected AuthenticationInfo merge(AuthenticationInfo info, AuthenticationInfo aggregate)
{    if (aggregate instanceof MergableAuthenticationInfo) {        ((MergableAuthenticationInfo) aggregate).merge(info);        return aggregate;    } else {        throw new IllegalArgumentException("Attempt to merge authentication info from multiple realms, but aggregate " + "AuthenticationInfo is not of type MergableAuthenticationInfo.");    }}
9a2def10946dd2702d205e3be9fcf0854207ba6fb1477918fd42936a46441e05
afterAllAttempts
public AuthenticationInfo afterAllAttempts(AuthenticationToken token, AuthenticationInfo aggregate) throws AuthenticationException
{    return aggregate;}
cf08af18727c34c4f90257ccdb0b3c4ad93c22a6b54568f8b833163423071a9a
beforeAttempt
public AuthenticationInfo beforeAttempt(Realm realm, AuthenticationToken token, AuthenticationInfo info) throws AuthenticationException
{    if (!realm.supports(token)) {        String msg = "Realm [" + realm + "] of type [" + realm.getClass().getName() + "] does not support " + " the submitted AuthenticationToken [" + token + "].  The [" + getClass().getName() + "] implementation requires all configured realm(s) to support and be able to process the submitted " + "AuthenticationToken.";        throw new UnsupportedTokenException(msg);    }    return info;}
ac3c95c19024cb91835250fc81bc5f7439242068dbacae0bcdb52b868fcbbfef
afterAttempt
public AuthenticationInfo afterAttempt(Realm realm, AuthenticationToken token, AuthenticationInfo info, AuthenticationInfo aggregate, Throwable t) throws AuthenticationException
{    if (t != null) {        if (t instanceof AuthenticationException) {                        throw ((AuthenticationException) t);        } else {            String msg = "Unable to acquire account data from realm [" + realm + "].  The [" + getClass().getName() + " implementation requires all configured realm(s) to operate successfully " + "for a successful authentication.";            throw new AuthenticationException(msg, t);        }    }    if (info == null) {        String msg = "Realm [" + realm + "] could not find any associated account data for the submitted " + "AuthenticationToken [" + token + "].  The [" + getClass().getName() + "] implementation requires " + "all configured realm(s) to acquire valid account data for a submitted token during the " + "log-in process.";        throw new UnknownAccountException(msg);    }    log.debug("Account successfully authenticated using realm [{}]", realm);            merge(info, aggregate);    return aggregate;}
744afb2c4b31487a891d9ddda2a4ab70e8add4a8a4b69269b191bd4c6a76c8b8
isEmpty
private static boolean isEmpty(PrincipalCollection pc)
{    return pc == null || pc.isEmpty();}
9a2def10946dd2702d205e3be9fcf0854207ba6fb1477918fd42936a46441e05
afterAllAttempts
public AuthenticationInfo afterAllAttempts(AuthenticationToken token, AuthenticationInfo aggregate) throws AuthenticationException
{        if (aggregate == null || isEmpty(aggregate.getPrincipals())) {        throw new AuthenticationException("Authentication token of type [" + token.getClass() + "] " + "could not be authenticated by any configured realms.  Please ensure that at least one realm can " + "authenticate these tokens.");    }    return aggregate;}
76bb3105746f9bf4c823929312b1227e8d974a1545f3a1cee6034d73e53fafc3
beforeAllAttempts
public AuthenticationInfo beforeAllAttempts(Collection<? extends Realm> realms, AuthenticationToken token) throws AuthenticationException
{    return null;}
744afb2c4b31487a891d9ddda2a4ab70e8add4a8a4b69269b191bd4c6a76c8b8
isEmpty
private static boolean isEmpty(PrincipalCollection pc)
{    return pc == null || pc.isEmpty();}
167e011889b390374d4fedb6c8483c8d0baad3aa455047fe7998d52ce16e6c1b
merge
protected AuthenticationInfo merge(AuthenticationInfo info, AuthenticationInfo aggregate)
{    if (aggregate != null && !isEmpty(aggregate.getPrincipals())) {        return aggregate;    }    return info != null ? info : aggregate;}
d1287b3e9ca3c96f596ed69b7a899c1cabbfbfa55b2c4bb35589866239ae2b9d
setRealms
public void setRealms(Collection<Realm> realms)
{    this.realms = realms;}
035403ee44af151978851c12ad1a6571f4540a0cd000f12f47e26accba81da94
getRealms
protected Collection<Realm> getRealms()
{    return this.realms;}
349554fdc5af17c71434ef4a4c2bca0e4a3d28d798191f0b8f5ba3e6a9e35b8b
getAuthenticationStrategy
public AuthenticationStrategy getAuthenticationStrategy()
{    return authenticationStrategy;}
a9fd698ea7e866e1315c4ba9a3e2c26ac2289a4a44bdc2adc248a29f92af225d
setAuthenticationStrategy
public void setAuthenticationStrategy(AuthenticationStrategy authenticationStrategy)
{    this.authenticationStrategy = authenticationStrategy;}
afc0033f9b81f76708c7940868f8ec0ac5c85767e2275219b32194db125fc865
assertRealmsConfigured
protected void assertRealmsConfigured() throws IllegalStateException
{    Collection<Realm> realms = getRealms();    if (CollectionUtils.isEmpty(realms)) {        String msg = "Configuration error:  No realms have been configured!  One or more realms must be " + "present to execute an authentication attempt.";        throw new IllegalStateException(msg);    }}
821e86d385416872a59b4caeef2d3317e9591bf57f9a9b521e2f1441a63bb9cf
doSingleRealmAuthentication
protected AuthenticationInfo doSingleRealmAuthentication(Realm realm, AuthenticationToken token)
{    if (!realm.supports(token)) {        String msg = "Realm [" + realm + "] does not support authentication token [" + token + "].  Please ensure that the appropriate Realm implementation is " + "configured correctly or that the realm accepts AuthenticationTokens of this type.";        throw new UnsupportedTokenException(msg);    }    AuthenticationInfo info = realm.getAuthenticationInfo(token);    if (info == null) {        String msg = "Realm [" + realm + "] was unable to find account data for the " + "submitted AuthenticationToken [" + token + "].";        throw new UnknownAccountException(msg);    }    return info;}
24a699d7eb67f41de63ae6a2a6d059ff107a95cc88a82e63ae96e53f7be9933c
doMultiRealmAuthentication
protected AuthenticationInfo doMultiRealmAuthentication(Collection<Realm> realms, AuthenticationToken token)
{    AuthenticationStrategy strategy = getAuthenticationStrategy();    AuthenticationInfo aggregate = strategy.beforeAllAttempts(realms, token);    if (log.isTraceEnabled()) {        log.trace("Iterating through {} realms for PAM authentication", realms.size());    }    for (Realm realm : realms) {        aggregate = strategy.beforeAttempt(realm, token, aggregate);        if (realm.supports(token)) {            log.trace("Attempting to authenticate token [{}] using realm [{}]", token, realm);            AuthenticationInfo info = null;            Throwable t = null;            try {                info = realm.getAuthenticationInfo(token);            } catch (Throwable throwable) {                t = throwable;                if (log.isDebugEnabled()) {                    String msg = "Realm [" + realm + "] threw an exception during a multi-realm authentication attempt:";                    log.debug(msg, t);                }            }            aggregate = strategy.afterAttempt(realm, token, info, aggregate, t);        } else {            log.debug("Realm [{}] does not support token {}.  Skipping realm.", realm, token);        }    }    aggregate = strategy.afterAllAttempts(token, aggregate);    return aggregate;}
3bcf05c6a73ce40f858d6b08b9a7e59a03e35d6b89773ec3a61cd531ff6e1b4c
doAuthenticate
protected AuthenticationInfo doAuthenticate(AuthenticationToken authenticationToken) throws AuthenticationException
{    assertRealmsConfigured();    Collection<Realm> realms = getRealms();    if (realms.size() == 1) {        return doSingleRealmAuthentication(realms.iterator().next(), authenticationToken);    } else {        return doMultiRealmAuthentication(realms, authenticationToken);    }}
6a60486de65510ea303d404f5173f7b287537b54a27c208a9e0fd62cbc9a5b98
onLogout
public void onLogout(PrincipalCollection principals)
{    super.onLogout(principals);    Collection<Realm> realms = getRealms();    if (!CollectionUtils.isEmpty(realms)) {        for (Realm realm : realms) {            if (realm instanceof LogoutAware) {                ((LogoutAware) realm).onLogout(principals);            }        }    }}
827e0a1d65c96dadbd66eb037a8c8e1d6d7169a482f4e5e0864a12a902d3d44b
getPrincipals
public PrincipalCollection getPrincipals()
{    return authcInfo.getPrincipals();}
c7b3b14aecec5000eb87974c2678a2eaa17176a02dc2e3ee92ed5637f79018c5
setPrincipals
public void setPrincipals(PrincipalCollection principals)
{    this.authcInfo.setPrincipals(principals);}
d40889d9d9d8556f6c0a26b69ca857cdca5bea6f57da293d87d0c43c6e6f218f
getCredentials
public Object getCredentials()
{    return authcInfo.getCredentials();}
215e52b298fb0b46ec48f404f7f69ab26f8092bedf754b6c03153d69b2614b3a
setCredentials
public void setCredentials(Object credentials)
{    this.authcInfo.setCredentials(credentials);}
3a7097f3876c436f29f50f2f2931d59a969036acb8a14a1e8d0bb0df0965362c
getCredentialsSalt
public ByteSource getCredentialsSalt()
{    return this.authcInfo.getCredentialsSalt();}
117d1d31ad3452af3a2f04246fb1602c478f4045fe13ee003a42a3eb60949091
setCredentialsSalt
public void setCredentialsSalt(ByteSource salt)
{    this.authcInfo.setCredentialsSalt(salt);}
ec311c86fa9aa4cf5ec62c466a4921734f8efe9e292068c6c4bb520c120aa39d
getRoles
public Collection<String> getRoles()
{    return authzInfo.getRoles();}
b155f3dc4c740f6a80500a1e457570e52052922cc070e8ec6a01384d8b2d21f3
setRoles
public void setRoles(Set<String> roles)
{    this.authzInfo.setRoles(roles);}
35d9918c93785a4811673a25938930630947309fbb3fcd199eec6275698c619d
addRole
public void addRole(String role)
{    this.authzInfo.addRole(role);}
db259e6050c24e214b0240e42c1bdfe98fa5d1ffd1e469331166b25fa14cbef8
addRole
public void addRole(Collection<String> roles)
{    this.authzInfo.addRoles(roles);}
cc9f1b33248075231f49abdf4392b6b8c17ce0fddf56f78fc494ec1a0f75a7ca
getStringPermissions
public Collection<String> getStringPermissions()
{    return authzInfo.getStringPermissions();}
715af6db219f243f93f3b5e02f461c7e411395a159294b438e80d5e0c353906d
setStringPermissions
public void setStringPermissions(Set<String> permissions)
{    this.authzInfo.setStringPermissions(permissions);}
d69353d4eaabf27c1c977b62d0afb01db012d438523bd009632efab46faef538
addStringPermission
public void addStringPermission(String permission)
{    this.authzInfo.addStringPermission(permission);}
4c690b53b9ec933311df57990188b103125b5d12b4d6a63d1e8708a504e878c8
addStringPermissions
public void addStringPermissions(Collection<String> permissions)
{    this.authzInfo.addStringPermissions(permissions);}
41adafc3f442306d09fdc0859bd5b300eb8a7f9f224da82a9ac1727ff06840b8
getObjectPermissions
public Collection<Permission> getObjectPermissions()
{    return authzInfo.getObjectPermissions();}
f0ce4ca5fcf4bc238cdb6096ef2668bc9feee82bb836cb5d1781a2bd7907feeb
setObjectPermissions
public void setObjectPermissions(Set<Permission> permissions)
{    this.authzInfo.setObjectPermissions(permissions);}
f2d70d922560f7155d6920de1ac943abb5cbc200cc161e9be2857b100b05c1c9
addObjectPermission
public void addObjectPermission(Permission permission)
{    this.authzInfo.addObjectPermission(permission);}
c8f3cff0e76cff90d3ee3c2e279f060304fd5963d8b5f02dde044d8acd2442e1
addObjectPermissions
public void addObjectPermissions(Collection<Permission> permissions)
{    this.authzInfo.addObjectPermissions(permissions);}
383274f66c4f3d38931a58e2db52cdf03d126a5657818df7759c7ec5fa0597a1
isLocked
public boolean isLocked()
{    return locked;}
c77841c938d09042bba61c8f78f68195295e98d5ce03fadf7bb72431a1c274d4
setLocked
public void setLocked(boolean locked)
{    this.locked = locked;}
f41ec429376ae50712518a87e3bac35e831cbfaee078c38db2452bdeca3d1483
isCredentialsExpired
public boolean isCredentialsExpired()
{    return credentialsExpired;}
28f9a56b38c07f097639098d95105b0c88eab7fdc26cf6cdeccaf720b3a048e2
setCredentialsExpired
public void setCredentialsExpired(boolean credentialsExpired)
{    this.credentialsExpired = credentialsExpired;}
3327b8ada8446344d3e76a1ac21319d875789f8c75168499761e4694479c5745
merge
public void merge(AuthenticationInfo info)
{    authcInfo.merge(info);        if (info instanceof SimpleAccount) {        SimpleAccount otherAccount = (SimpleAccount) info;        if (otherAccount.isLocked()) {            setLocked(true);        }        if (otherAccount.isCredentialsExpired()) {            setCredentialsExpired(true);        }    }}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    return (getPrincipals() != null ? getPrincipals().hashCode() : 0);}
8d37d11c7ecfc0d0589696a89cb385888c83bd3e43ea0c95a3b4ae4ef78180ce
equals
public boolean equals(Object o)
{    if (o == this) {        return true;    }    if (o instanceof SimpleAccount) {        SimpleAccount sa = (SimpleAccount) o;                return (getPrincipals() != null ? getPrincipals().equals(sa.getPrincipals()) : sa.getPrincipals() == null);    }    return false;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return getPrincipals() != null ? getPrincipals().toString() : "empty";}
827e0a1d65c96dadbd66eb037a8c8e1d6d7169a482f4e5e0864a12a902d3d44b
getPrincipals
public PrincipalCollection getPrincipals()
{    return principals;}
c7b3b14aecec5000eb87974c2678a2eaa17176a02dc2e3ee92ed5637f79018c5
setPrincipals
public void setPrincipals(PrincipalCollection principals)
{    this.principals = principals;}
d40889d9d9d8556f6c0a26b69ca857cdca5bea6f57da293d87d0c43c6e6f218f
getCredentials
public Object getCredentials()
{    return credentials;}
215e52b298fb0b46ec48f404f7f69ab26f8092bedf754b6c03153d69b2614b3a
setCredentials
public void setCredentials(Object credentials)
{    this.credentials = credentials;}
3a7097f3876c436f29f50f2f2931d59a969036acb8a14a1e8d0bb0df0965362c
getCredentialsSalt
public ByteSource getCredentialsSalt()
{    return credentialsSalt;}
117d1d31ad3452af3a2f04246fb1602c478f4045fe13ee003a42a3eb60949091
setCredentialsSalt
public void setCredentialsSalt(ByteSource salt)
{    this.credentialsSalt = salt;}
3327b8ada8446344d3e76a1ac21319d875789f8c75168499761e4694479c5745
merge
public void merge(AuthenticationInfo info)
{    if (info == null || info.getPrincipals() == null || info.getPrincipals().isEmpty()) {        return;    }    if (this.principals == null) {        this.principals = info.getPrincipals();    } else {        if (!(this.principals instanceof MutablePrincipalCollection)) {            this.principals = new SimplePrincipalCollection(this.principals);        }        ((MutablePrincipalCollection) this.principals).addAll(info.getPrincipals());    }        if (this.credentialsSalt == null && info instanceof SaltedAuthenticationInfo) {        this.credentialsSalt = ((SaltedAuthenticationInfo) info).getCredentialsSalt();    }    Object thisCredentials = getCredentials();    Object otherCredentials = info.getCredentials();    if (otherCredentials == null) {        return;    }    if (thisCredentials == null) {        this.credentials = otherCredentials;        return;    }    if (!(thisCredentials instanceof Collection)) {        Set newSet = new HashSet();        newSet.add(thisCredentials);        setCredentials(newSet);    }        Collection credentialCollection = (Collection) getCredentials();    if (otherCredentials instanceof Collection) {        credentialCollection.addAll((Collection) otherCredentials);    } else {        credentialCollection.add(otherCredentials);    }}
8d37d11c7ecfc0d0589696a89cb385888c83bd3e43ea0c95a3b4ae4ef78180ce
equals
public boolean equals(Object o)
{    if (this == o)        return true;    if (!(o instanceof SimpleAuthenticationInfo))        return false;    SimpleAuthenticationInfo that = (SimpleAuthenticationInfo) o;        if (principals != null ? !principals.equals(that.principals) : that.principals != null)        return false;    return true;}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    return (principals != null ? principals.hashCode() : 0);}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return principals.toString();}
6a70299d74b1ed8da0ff8fec5a1c89ba0dff9b5b133bb2544a0bc6abb19bcee7
getUsername
public String getUsername()
{    return username;}
2aa36d46562fccb437a954b773807392e01e3ad0d16cffa4fd33a5c48073160b
setUsername
public void setUsername(String username)
{    this.username = username;}
78c2e020a831db29a5e0504bb4469ebb42e987727f6ac60f5baadb12f9b6aab7
getPassword
public char[] getPassword()
{    return password;}
7b80258bd9c9b65df19af478c6e672f7d9182550ec562542ca72d89579536b93
setPassword
public void setPassword(char[] password)
{    this.password = password;}
fd56e1755384d43cd981f548599564b11bcb09d8d88ac23705d566dcbeb36882
getPrincipal
public Object getPrincipal()
{    return getUsername();}
d40889d9d9d8556f6c0a26b69ca857cdca5bea6f57da293d87d0c43c6e6f218f
getCredentials
public Object getCredentials()
{    return getPassword();}
165b1c9352ad3d309866d5286d1a7fd8eae4d022cb5ad661b1269ac75c218ebb
getHost
public String getHost()
{    return host;}
975df858cc36ca4ae96e66da70c7651a9608d19019688712f418ff1b046d6911
setHost
public void setHost(String host)
{    this.host = host;}
ed2429bd5404a4724e2c5245224385f456f205f0e707489cdc20d601b8646e06
isRememberMe
public boolean isRememberMe()
{    return rememberMe;}
5af3ec303dcb9240b3eb722b935dd9b96d9fd056ce97421d68a72083d6d1a789
setRememberMe
public void setRememberMe(boolean rememberMe)
{    this.rememberMe = rememberMe;}
21ac40bb9a99614b6ac18fa4043acb6173fccff96066fdfab963dba597923aa8
clear
public void clear()
{    this.username = null;    this.host = null;    this.rememberMe = false;    if (this.password != null) {        for (int i = 0; i < password.length; i++) {            this.password[i] = 0x00;        }        this.password = null;    }}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    StringBuilder sb = new StringBuilder();    sb.append(getClass().getName());    sb.append(" - ");    sb.append(username);    sb.append(", rememberMe=").append(rememberMe);    if (host != null) {        sb.append(" (").append(host).append(")");    }    return sb.toString();}
8b4c010418628f53a40ac6c9ec7ec66fac61e64e91f5b64fbf7ce965056d5094
getMethodInterceptors
public Collection<AuthorizingAnnotationMethodInterceptor> getMethodInterceptors()
{    return methodInterceptors;}
e7ce2d305e1f69e689ebdb3fb7b4da113eae65c5d7ccf99fa81cfc9dfcbec379
setMethodInterceptors
public void setMethodInterceptors(Collection<AuthorizingAnnotationMethodInterceptor> methodInterceptors)
{    this.methodInterceptors = methodInterceptors;}
4a31688af3d803ebee2d5273d63e49a82d59fd5085e3920e7362cc3591d4907f
assertAuthorized
protected void assertAuthorized(MethodInvocation methodInvocation) throws AuthorizationException
{        Collection<AuthorizingAnnotationMethodInterceptor> aamis = getMethodInterceptors();    if (aamis != null && !aamis.isEmpty()) {        for (AuthorizingAnnotationMethodInterceptor aami : aamis) {            if (aami.supports(methodInvocation)) {                aami.assertAuthorized(methodInvocation);            }        }    }}
7a599dbf50a3ad25def207787cf058943ee693f052249d140298c9f18040df39
assertAuthorized
public void assertAuthorized(Annotation a) throws UnauthenticatedException
{    if (a instanceof RequiresAuthentication && !getSubject().isAuthenticated()) {        throw new UnauthenticatedException("The current Subject is not authenticated.  Access denied.");    }}
452176b5a2b764d210f4e03b31efcbe2fed7512dde378a57931764d3ed55c42f
invoke
public Object invoke(MethodInvocation methodInvocation) throws Throwable
{    assertAuthorized(methodInvocation);    return methodInvocation.proceed();}
2ef9be2c20d2c8fc33f578cb5dbeebb1982ca778022dfddf8b3a8d82c2296e52
assertAuthorized
public void assertAuthorized(MethodInvocation mi) throws AuthorizationException
{    try {        ((AuthorizingAnnotationHandler) getHandler()).assertAuthorized(getAnnotation(mi));    } catch (AuthorizationException ae) {                if (ae.getCause() == null)            ae.initCause(new AuthorizationException("Not authorized to invoke method: " + mi.getMethod()));        throw ae;    }}
452176b5a2b764d210f4e03b31efcbe2fed7512dde378a57931764d3ed55c42f
invoke
public Object invoke(MethodInvocation methodInvocation) throws Throwable
{    assertAuthorized(methodInvocation);    return methodInvocation.proceed();}
02a5dcacf3bf7a64afc01091cec5b170e5439ebdc8740686b814f4fed018e81d
assertAuthorized
public void assertAuthorized(Annotation a) throws AuthorizationException
{    if (a instanceof RequiresGuest && getSubject().getPrincipal() != null) {        throw new UnauthenticatedException("Attempting to perform a guest-only operation.  The current Subject is " + "not a guest (they have been authenticated or remembered from a previous login).  Access " + "denied.");    }}
999ca7aba6b7f8d6207e4e9b8656f111b598640012f48e805da836b3e6bb7f0b
getAnnotationValue
protected String[] getAnnotationValue(Annotation a)
{    RequiresPermissions rpAnnotation = (RequiresPermissions) a;    return rpAnnotation.value();}
02a5dcacf3bf7a64afc01091cec5b170e5439ebdc8740686b814f4fed018e81d
assertAuthorized
public void assertAuthorized(Annotation a) throws AuthorizationException
{    if (!(a instanceof RequiresPermissions))        return;    RequiresPermissions rpAnnotation = (RequiresPermissions) a;    String[] perms = getAnnotationValue(a);    Subject subject = getSubject();    if (perms.length == 1) {        subject.checkPermission(perms[0]);        return;    }    if (Logical.AND.equals(rpAnnotation.logical())) {        getSubject().checkPermissions(perms);        return;    }    if (Logical.OR.equals(rpAnnotation.logical())) {                boolean hasAtLeastOnePermission = false;        for (String permission : perms) if (getSubject().isPermitted(permission))            hasAtLeastOnePermission = true;                if (!hasAtLeastOnePermission)            getSubject().checkPermission(perms[0]);    }}
02a5dcacf3bf7a64afc01091cec5b170e5439ebdc8740686b814f4fed018e81d
assertAuthorized
public void assertAuthorized(Annotation a) throws AuthorizationException
{    if (!(a instanceof RequiresRoles))        return;    RequiresRoles rrAnnotation = (RequiresRoles) a;    String[] roles = rrAnnotation.value();    if (roles.length == 1) {        getSubject().checkRole(roles[0]);        return;    }    if (Logical.AND.equals(rrAnnotation.logical())) {        getSubject().checkRoles(Arrays.asList(roles));        return;    }    if (Logical.OR.equals(rrAnnotation.logical())) {                boolean hasAtLeastOneRole = false;        for (String role : roles) if (getSubject().hasRole(role))            hasAtLeastOneRole = true;                if (!hasAtLeastOneRole)            getSubject().checkRole(roles[0]);    }}
02a5dcacf3bf7a64afc01091cec5b170e5439ebdc8740686b814f4fed018e81d
assertAuthorized
public void assertAuthorized(Annotation a) throws AuthorizationException
{    if (a instanceof RequiresUser && getSubject().getPrincipal() == null) {        throw new UnauthenticatedException("Attempting to perform a user-only operation.  The current Subject is " + "not a user (they haven't been authenticated or remembered from a previous login).  " + "Access denied.");    }}
165b1c9352ad3d309866d5286d1a7fd8eae4d022cb5ad661b1269ac75c218ebb
getHost
public String getHost()
{    return this.host;}
67fa3a680bbe8bbdad72ab72e243605650b41562eb55f602dcdc473bdb74ce29
setHostAddress
public void setHostAddress(String host)
{    this.host = host;}
951fa81a6232c4e37588785b56acedbe769005674365adb6e620e5b3605e4bd9
getRealms
public Collection<Realm> getRealms()
{    return this.realms;}
d1287b3e9ca3c96f596ed69b7a899c1cabbfbfa55b2c4bb35589866239ae2b9d
setRealms
public void setRealms(Collection<Realm> realms)
{    this.realms = realms;    applyPermissionResolverToRealms();    applyRolePermissionResolverToRealms();}
0bf26387380f47bbe90f7d2a1329dbdda5860eca4e689a8f66fe4bff08f67124
getPermissionResolver
public PermissionResolver getPermissionResolver()
{    return this.permissionResolver;}
8333cbb4518349c264b0615fb620db0422c748c04888b9f6477b9c802a2e9c04
setPermissionResolver
public void setPermissionResolver(PermissionResolver permissionResolver)
{    this.permissionResolver = permissionResolver;    applyPermissionResolverToRealms();}
4ead71255cab09ea1750c3725bbcc03194f28b999066d8ba46829f58f4f89e14
applyPermissionResolverToRealms
protected void applyPermissionResolverToRealms()
{    PermissionResolver resolver = getPermissionResolver();    Collection<Realm> realms = getRealms();    if (resolver != null && realms != null && !realms.isEmpty()) {        for (Realm realm : realms) {            if (realm instanceof PermissionResolverAware) {                ((PermissionResolverAware) realm).setPermissionResolver(resolver);            }        }    }}
c80edb6ab3dd516e326f6fea8e168d012fe6e13770e6cb790ae633c6673a3a77
getRolePermissionResolver
public RolePermissionResolver getRolePermissionResolver()
{    return this.rolePermissionResolver;}
ac6e55127ea5a7a03a7efb6f9eeb90d47a0df596176afe9468c1384cf6872b26
setRolePermissionResolver
public void setRolePermissionResolver(RolePermissionResolver rolePermissionResolver)
{    this.rolePermissionResolver = rolePermissionResolver;    applyRolePermissionResolverToRealms();}
cf1038e579e73ec9f6d93d97e9bfdbd86c5a1cf2a6ee83ce910cc11db77585da
applyRolePermissionResolverToRealms
protected void applyRolePermissionResolverToRealms()
{    RolePermissionResolver resolver = getRolePermissionResolver();    Collection<Realm> realms = getRealms();    if (resolver != null && realms != null && !realms.isEmpty()) {        for (Realm realm : realms) {            if (realm instanceof RolePermissionResolverAware) {                ((RolePermissionResolverAware) realm).setRolePermissionResolver(resolver);            }        }    }}
afc0033f9b81f76708c7940868f8ec0ac5c85767e2275219b32194db125fc865
assertRealmsConfigured
protected void assertRealmsConfigured() throws IllegalStateException
{    Collection<Realm> realms = getRealms();    if (realms == null || realms.isEmpty()) {        String msg = "Configuration error:  No realms have been configured!  One or more realms must be " + "present to execute an authorization operation.";        throw new IllegalStateException(msg);    }}
b045b946d9ccd7af32e0e8348ab5d6cf52cad0caca6e37305ca04b0924aa9973
isPermitted
public boolean isPermitted(PrincipalCollection principals, String permission)
{    assertRealmsConfigured();    for (Realm realm : getRealms()) {        if (!(realm instanceof Authorizer))            continue;        if (((Authorizer) realm).isPermitted(principals, permission)) {            return true;        }    }    return false;}
438a97ffc49877136761725a38f6b4dfbc4651416169eb87eff0209823624bce
isPermitted
public boolean isPermitted(PrincipalCollection principals, Permission permission)
{    assertRealmsConfigured();    for (Realm realm : getRealms()) {        if (!(realm instanceof Authorizer))            continue;        if (((Authorizer) realm).isPermitted(principals, permission)) {            return true;        }    }    return false;}
d8a57f7059848af1f45021e47e389ce324f8e378aa4eac4d6f29e6cbc62a25b1
isPermitted
public boolean[] isPermitted(PrincipalCollection principals, String... permissions)
{    assertRealmsConfigured();    if (permissions != null && permissions.length > 0) {        boolean[] isPermitted = new boolean[permissions.length];        for (int i = 0; i < permissions.length; i++) {            isPermitted[i] = isPermitted(principals, permissions[i]);        }        return isPermitted;    }    return new boolean[0];}
c84f86de3a9bc6f9df7214f7a84708c8ef37e8fa9da985ffebca471c6592dc87
isPermitted
public boolean[] isPermitted(PrincipalCollection principals, List<Permission> permissions)
{    assertRealmsConfigured();    if (permissions != null && !permissions.isEmpty()) {        boolean[] isPermitted = new boolean[permissions.size()];        int i = 0;        for (Permission p : permissions) {            isPermitted[i++] = isPermitted(principals, p);        }        return isPermitted;    }    return new boolean[0];}
cb60a1b9c97d51eab82a5901254b803ad2106c8a81333880770b409606e4cdf7
isPermittedAll
public boolean isPermittedAll(PrincipalCollection principals, String... permissions)
{    assertRealmsConfigured();    if (permissions != null && permissions.length > 0) {        for (String perm : permissions) {            if (!isPermitted(principals, perm)) {                return false;            }        }    }    return true;}
cfda870ec0318c2c375b9a93b4028328e5fadae8f41747584b5b6ebf87b6892c
isPermittedAll
public boolean isPermittedAll(PrincipalCollection principals, Collection<Permission> permissions)
{    assertRealmsConfigured();    if (permissions != null && !permissions.isEmpty()) {        for (Permission permission : permissions) {            if (!isPermitted(principals, permission)) {                return false;            }        }    }    return true;}
a327b08a77ad6580cd49b558e75df328aef7cdc39c067296740158e19bc2c855
checkPermission
public void checkPermission(PrincipalCollection principals, String permission) throws AuthorizationException
{    assertRealmsConfigured();    if (!isPermitted(principals, permission)) {        throw new UnauthorizedException("Subject does not have permission [" + permission + "]");    }}
91011aa09ea6ea8bee66056c82ac374cbb4b3e1a327d9a4a7eccd6f499b7b5e9
checkPermission
public void checkPermission(PrincipalCollection principals, Permission permission) throws AuthorizationException
{    assertRealmsConfigured();    if (!isPermitted(principals, permission)) {        throw new UnauthorizedException("Subject does not have permission [" + permission + "]");    }}
4a1f1bfb13cd0aa2fa306d956f9e33a1816c2333f8a57a30602675f69da5fd3a
checkPermissions
public void checkPermissions(PrincipalCollection principals, String... permissions) throws AuthorizationException
{    assertRealmsConfigured();    if (permissions != null && permissions.length > 0) {        for (String perm : permissions) {            checkPermission(principals, perm);        }    }}
1e35e3a23f3b8b2fb017ef639aba20f21d0c9b9ee697350c026b8977cdc65d74
checkPermissions
public void checkPermissions(PrincipalCollection principals, Collection<Permission> permissions) throws AuthorizationException
{    assertRealmsConfigured();    if (permissions != null) {        for (Permission permission : permissions) {            checkPermission(principals, permission);        }    }}
e99dd1bf53c1c3d3f6dc668f591eac4825acc96e21dc1e3baf22b30ec9b0c9db
hasRole
public boolean hasRole(PrincipalCollection principals, String roleIdentifier)
{    assertRealmsConfigured();    for (Realm realm : getRealms()) {        if (!(realm instanceof Authorizer))            continue;        if (((Authorizer) realm).hasRole(principals, roleIdentifier)) {            return true;        }    }    return false;}
41fe53ffbc8a39b20b2e5ce900e697802cb468530509d8fb8aa86b99b1f7225f
hasRoles
public boolean[] hasRoles(PrincipalCollection principals, List<String> roleIdentifiers)
{    assertRealmsConfigured();    if (roleIdentifiers != null && !roleIdentifiers.isEmpty()) {        boolean[] hasRoles = new boolean[roleIdentifiers.size()];        int i = 0;        for (String roleId : roleIdentifiers) {            hasRoles[i++] = hasRole(principals, roleId);        }        return hasRoles;    }    return new boolean[0];}
0caa8178e59d29be2a8a64698793ea248f7e066aab0a940a68cc6abbc27c24ab
hasAllRoles
public boolean hasAllRoles(PrincipalCollection principals, Collection<String> roleIdentifiers)
{    assertRealmsConfigured();    for (String roleIdentifier : roleIdentifiers) {        if (!hasRole(principals, roleIdentifier)) {            return false;        }    }    return true;}
a80b2148873c4d879bcb44e5f5b47ee1ec78161a31be6af6f6eb66cddad8681d
checkRole
public void checkRole(PrincipalCollection principals, String role) throws AuthorizationException
{    assertRealmsConfigured();    if (!hasRole(principals, role)) {        throw new UnauthorizedException("Subject does not have role [" + role + "]");    }}
b57e9e8417c977fa59c021a6a3197c3cd481b7da39f0c54f5c2be6f4e54c89f6
checkRoles
public void checkRoles(PrincipalCollection principals, Collection<String> roles) throws AuthorizationException
{        if (roles != null && !roles.isEmpty())        checkRoles(principals, roles.toArray(new String[roles.size()]));}
3317cd042100d4c6053b0d0e2831308b4574436bc02b7fe9ae2515cfac8fa342
checkRoles
public void checkRoles(PrincipalCollection principals, String... roles) throws AuthorizationException
{    assertRealmsConfigured();    if (roles != null) {        for (String role : roles) {            checkRole(principals, role);        }    }}
9db5786238bf037070b576a95c2fe40d03792cf47609652ca515c1404ef36b18
implies
public boolean implies(Permission p)
{    return true;}
20e611863c7551c666dadd12a39e6346e74bf93cdc01d6d8585689c0b0d8547d
encodeParts
private void encodeParts(String domain, String actions, String targets)
{    if (!StringUtils.hasText(domain)) {        throw new IllegalArgumentException("domain argument cannot be null or empty.");    }    StringBuilder sb = new StringBuilder(domain);    if (!StringUtils.hasText(actions)) {        if (StringUtils.hasText(targets)) {            sb.append(PART_DIVIDER_TOKEN).append(WILDCARD_TOKEN);        }    } else {        sb.append(PART_DIVIDER_TOKEN).append(actions);    }    if (StringUtils.hasText(targets)) {        sb.append(PART_DIVIDER_TOKEN).append(targets);    }    setParts(sb.toString());}
a9d98e6ffde7dc4f2bb987cec0a802c7152cf2caf4c1c669ee380a30def49960
setParts
protected void setParts(String domain, Set<String> actions, Set<String> targets)
{    String actionsString = StringUtils.toDelimitedString(actions, SUBPART_DIVIDER_TOKEN);    String targetsString = StringUtils.toDelimitedString(targets, SUBPART_DIVIDER_TOKEN);    encodeParts(domain, actionsString, targetsString);    this.domain = domain;    this.actions = actions;    this.targets = targets;}
7f24536eab08bb4dae9ece6a07d922460f92685d1985c58f821771381bec2674
getDomain
protected String getDomain(Class<? extends DomainPermission> clazz)
{    String domain = clazz.getSimpleName().toLowerCase();        int index = domain.lastIndexOf("permission");    if (index != -1) {        domain = domain.substring(0, index);    }    return domain;}
313e57c1be1e53c3ca27c7c5dbe49808d3145421a933669a6d99d52a16beb97b
getDomain
public String getDomain()
{    return domain;}
44a1ded29577b39af4a025576756dd2142a741f87cbaa1a90abb5b1d5e34a408
setDomain
protected void setDomain(String domain)
{    if (this.domain != null && this.domain.equals(domain)) {        return;    }    this.domain = domain;    setParts(domain, actions, targets);}
83596867a6777adae56c81de79475488cb8c2ef97fad44f1c8d607d38e0725bd
getActions
public Set<String> getActions()
{    return actions;}
cd42d74c025e32629d31114813964ab8521ef5994fe14370979c27ef0a9cac63
setActions
protected void setActions(Set<String> actions)
{    if (this.actions != null && this.actions.equals(actions)) {        return;    }    this.actions = actions;    setParts(domain, actions, targets);}
bc9d692401329ecad79d494d3e44177527424995f4ef76f35738ba3e249b4a37
getTargets
public Set<String> getTargets()
{    return targets;}
5dba08e39037980bbe09b8812a8d37e4294d7f46ac18cb8d80b271e24396835e
setTargets
protected void setTargets(Set<String> targets)
{    if (this.targets != null && this.targets.equals(targets)) {        return;    }    this.targets = targets;    setParts(domain, actions, targets);}
adb8030af26412c4711d5fbceb1708d4e20b21f6620565efa286d97193d5022e
getPermissionString
public String getPermissionString()
{    return this.permissionString;}
9a26b2ec4853a5d6e19eaa3e90005911ded6238ce17b286b5d607f9023c0f007
setParts
protected void setParts(String wildcardString)
{    setParts(wildcardString, DEFAULT_CASE_SENSITIVE);}
a0c670226a0c0e88db4882447cc05c7f8b05dcf60877ce4f0292226369688d0f
setParts
protected void setParts(String wildcardString, boolean caseSensitive)
{    wildcardString = StringUtils.clean(wildcardString);    if (wildcardString == null || wildcardString.isEmpty()) {        throw new IllegalArgumentException("Wildcard string cannot be null or empty. Make sure permission strings are properly formatted.");    }    if (!caseSensitive) {        wildcardString = wildcardString.toLowerCase();    }    List<String> parts = CollectionUtils.asList(wildcardString.split(PART_DIVIDER_TOKEN));    this.parts = new ArrayList<Set<String>>();    for (String part : parts) {        Set<String> subparts = CollectionUtils.asSet(part.split(SUBPART_DIVIDER_TOKEN));        if (subparts.isEmpty()) {            throw new IllegalArgumentException("Wildcard string cannot contain parts with only dividers. Make sure permission strings are properly formatted.");        }        this.parts.add(subparts);    }    if (this.parts.isEmpty()) {        throw new IllegalArgumentException("Wildcard string cannot contain only dividers. Make sure permission strings are properly formatted.");    }}
c3dc56c26e28e6c2f8b3e9c7d2c5ebfce19114132b560470f20e0a6eb80cae07
getParts
protected List<Set<String>> getParts()
{    return this.parts;}
3b0fccdfd4d8a83cfa8bb6349d0f6f8f35c1ede5c893f617bf400ae6e193765a
setParts
protected void setParts(List<Set<String>> parts)
{    this.parts = parts;}
9db5786238bf037070b576a95c2fe40d03792cf47609652ca515c1404ef36b18
implies
public boolean implies(Permission p)
{        if (!(p instanceof WildcardPermission)) {        return false;    }    WildcardPermission wp = (WildcardPermission) p;    List<Set<String>> otherParts = wp.getParts();    int i = 0;    for (Set<String> otherPart : otherParts) {                if (getParts().size() - 1 < i) {            return true;        } else {            Set<String> part = getParts().get(i);            if (!part.contains(WILDCARD_TOKEN) && !part.containsAll(otherPart)) {                return false;            }            i++;        }    }        for (; i < getParts().size(); i++) {        Set<String> part = getParts().get(i);        if (!part.contains(WILDCARD_TOKEN)) {            return false;        }    }    return true;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    StringBuilder buffer = new StringBuilder();    for (Set<String> part : parts) {        if (buffer.length() > 0) {            buffer.append(PART_DIVIDER_TOKEN);        }        Iterator<String> partIt = part.iterator();        while (partIt.hasNext()) {            buffer.append(partIt.next());            if (partIt.hasNext()) {                buffer.append(SUBPART_DIVIDER_TOKEN);            }        }    }    return buffer.toString();}
8d37d11c7ecfc0d0589696a89cb385888c83bd3e43ea0c95a3b4ae4ef78180ce
equals
public boolean equals(Object o)
{    if (o instanceof WildcardPermission) {        WildcardPermission wp = (WildcardPermission) o;        return parts.equals(wp.parts);    }    return false;}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    return parts.hashCode();}
290bf9ef15e13efb1eee2aae1d3e555f84cdc0a8b8a2316f081db9a12414dbe6
setCaseSensitive
public void setCaseSensitive(boolean state)
{    this.caseSensitive = state;}
f31e50a58ea11962c6c5d4b0420452c85d710d0b92fd544ccad1c770c060fb11
isCaseSensitive
public boolean isCaseSensitive()
{    return caseSensitive;}
56723d50a646291f5f82e15b5ec56351137f938d5e29b4bb0c5226a3a4a511d2
resolvePermission
public Permission resolvePermission(String permissionString)
{    return new WildcardPermission(permissionString, caseSensitive);}
34a3214ff4b9467d7d37a5c0852efc80555acb034ee2fec25881d5e9b2b4c013
getRoles
public Set<String> getRoles()
{    return roles;}
b155f3dc4c740f6a80500a1e457570e52052922cc070e8ec6a01384d8b2d21f3
setRoles
public void setRoles(Set<String> roles)
{    this.roles = roles;}
35d9918c93785a4811673a25938930630947309fbb3fcd199eec6275698c619d
addRole
public void addRole(String role)
{    if (this.roles == null) {        this.roles = new HashSet<String>();    }    this.roles.add(role);}
2931e1d4f6395642cf368e34c3fcd62ee5e04df7c98f3bfe4443a0f2397e97a5
addRoles
public void addRoles(Collection<String> roles)
{    if (this.roles == null) {        this.roles = new HashSet<String>();    }    this.roles.addAll(roles);}
bc6e79191f581b404653bc2bca1864be9dc0adf77ba007a0949e0fc3d74f6487
getStringPermissions
public Set<String> getStringPermissions()
{    return stringPermissions;}
c04981754933c51807805b6cfaec8884fe8a96cee8994e5e2d311a6eed688481
setStringPermissions
public void setStringPermissions(Set<String> stringPermissions)
{    this.stringPermissions = stringPermissions;}
d69353d4eaabf27c1c977b62d0afb01db012d438523bd009632efab46faef538
addStringPermission
public void addStringPermission(String permission)
{    if (this.stringPermissions == null) {        this.stringPermissions = new HashSet<String>();    }    this.stringPermissions.add(permission);}
4c690b53b9ec933311df57990188b103125b5d12b4d6a63d1e8708a504e878c8
addStringPermissions
public void addStringPermissions(Collection<String> permissions)
{    if (this.stringPermissions == null) {        this.stringPermissions = new HashSet<String>();    }    this.stringPermissions.addAll(permissions);}
96b3871640691f5d77c224e0be048ecc05a988b1a6ee239f9b329f33b1cc4007
getObjectPermissions
public Set<Permission> getObjectPermissions()
{    return objectPermissions;}
5a54d29cb84903d686d29edff6e56b868cb9ec9024c8ecf86786c128a0b2fc79
setObjectPermissions
public void setObjectPermissions(Set<Permission> objectPermissions)
{    this.objectPermissions = objectPermissions;}
f2d70d922560f7155d6920de1ac943abb5cbc200cc161e9be2857b100b05c1c9
addObjectPermission
public void addObjectPermission(Permission permission)
{    if (this.objectPermissions == null) {        this.objectPermissions = new HashSet<Permission>();    }    this.objectPermissions.add(permission);}
c8f3cff0e76cff90d3ee3c2e279f060304fd5963d8b5f02dde044d8acd2442e1
addObjectPermissions
public void addObjectPermissions(Collection<Permission> permissions)
{    if (this.objectPermissions == null) {        this.objectPermissions = new HashSet<Permission>();    }    this.objectPermissions.addAll(permissions);}
239fbe3eb64d679cbac1161825b07d6a8436ead3c6c3d140d9caec2275827023
getName
public String getName()
{    return name;}
f498f22eaf0816bf385a43365651d1b6d0455905fdd2d6be01ceefeb84e8f432
setName
public void setName(String name)
{    this.name = name;}
09562cd8ec3c5713a61c7d16ca456bdc2a9cee5b96dd01980beb2b9c376e4000
getPermissions
public Set<Permission> getPermissions()
{    return permissions;}
7d38171355e4d32c9bf8a7e4c289a97b4f6de7c383ecfbd5701782ffe9f5f8de
setPermissions
public void setPermissions(Set<Permission> permissions)
{    this.permissions = permissions;}
55746ce7e43b4df08f41b207d6b849d8902fbff10b6e15c3832e99b0d7084dcf
add
public void add(Permission permission)
{    Set<Permission> permissions = getPermissions();    if (permissions == null) {        permissions = new LinkedHashSet<Permission>();        setPermissions(permissions);    }    permissions.add(permission);}
1b40e968f9bc290d323b07fd60908c821add5187a8f0a197e383b9350c8e4bcf
addAll
public void addAll(Collection<Permission> perms)
{    if (perms != null && !perms.isEmpty()) {        Set<Permission> permissions = getPermissions();        if (permissions == null) {            permissions = new LinkedHashSet<Permission>(perms.size());            setPermissions(permissions);        }        permissions.addAll(perms);    }}
2ecfee85cf993f393436d151a2aed0d5ced1921ba5cf31cc4404962e012f74ab
isPermitted
public boolean isPermitted(Permission p)
{    Collection<Permission> perms = getPermissions();    if (perms != null && !perms.isEmpty()) {        for (Permission perm : perms) {            if (perm.implies(p)) {                return true;            }        }    }    return false;}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    return (getName() != null ? getName().hashCode() : 0);}
8d37d11c7ecfc0d0589696a89cb385888c83bd3e43ea0c95a3b4ae4ef78180ce
equals
public boolean equals(Object o)
{    if (o == this) {        return true;    }    if (o instanceof SimpleRole) {        SimpleRole sr = (SimpleRole) o;                return (getName() != null ? getName().equals(sr.getName()) : sr.getName() == null);    }    return false;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return getName();}
40a40e87e47eb99532aa00fdd13974864062229a250120f7bb0231e03dfdc33a
getTargetExecutor
public Executor getTargetExecutor()
{    return targetExecutor;}
fcd5f9e8e7ba70be5a5e67c80c8a2dc3176511726ebd941b3660588a7d7d4835
setTargetExecutor
public void setTargetExecutor(Executor targetExecutor)
{    this.targetExecutor = targetExecutor;}
500cdae0771f44e12e905471ad16b9b928667f19e77956836eb99281db53ebed
getSubject
protected Subject getSubject()
{    return SecurityUtils.getSubject();}
8c1e7d1fd842e828bba3e41eca4d9b0263a197950d250c3e9ab9d17ec741d177
associateWithSubject
protected Runnable associateWithSubject(Runnable r)
{    Subject subject = getSubject();    return subject.associateWith(r);}
ad84c13a4b48a71ac9cc53c212690071850fba3a6bebe8ae99378f76de235551
execute
public void execute(Runnable command)
{    Runnable associated = associateWithSubject(command);    getTargetExecutor().execute(associated);}
9a66c371511eecb3600650b4af250f337863971221863bbe491ae45f4229b558
getTargetExecutorService
public ExecutorService getTargetExecutorService()
{    return targetExecutorService;}
30c8d4c91c1da5a32651d03ed174131c88f7ee8e940bd46dfa3b24332771421a
setTargetExecutorService
public void setTargetExecutorService(ExecutorService targetExecutorService)
{    super.setTargetExecutor(targetExecutorService);    this.targetExecutorService = targetExecutorService;}
fcd5f9e8e7ba70be5a5e67c80c8a2dc3176511726ebd941b3660588a7d7d4835
setTargetExecutor
public void setTargetExecutor(Executor targetExecutor)
{    if (!(targetExecutor instanceof ExecutorService)) {        String msg = "The " + getClass().getName() + " implementation only accepts " + ExecutorService.class.getName() + " target instances.";        throw new IllegalArgumentException(msg);    }    super.setTargetExecutor(targetExecutor);}
df491dc8b9ff7b029a14c1088c98b538ae923511d668b67ae742be7c636ab813
shutdown
public void shutdown()
{    this.targetExecutorService.shutdown();}
4c45ee4d9eb054ebd067dd5874751b7bfc3a2cf2eb45214279db5bb2815019b3
shutdownNow
public List<Runnable> shutdownNow()
{    return this.targetExecutorService.shutdownNow();}
de15ce9b0ad9865c54a52f6c64043391e5b29feda58b57b6926cb3d5b0e7aeb8
isShutdown
public boolean isShutdown()
{    return this.targetExecutorService.isShutdown();}
a7705ddf21784ead75c5c8f226430ffc5611289fd8b0395c0e703726e9e0c05f
isTerminated
public boolean isTerminated()
{    return this.targetExecutorService.isTerminated();}
0914a9f004463fdc403eb8812a27433de347d542e24b38c16435c5081f5e4e41
awaitTermination
public boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException
{    return this.targetExecutorService.awaitTermination(timeout, unit);}
cac224ce20e69a7fe89ca8e5148349bf910d1c5f334f521f2f4b5c33150d7794
associateWithSubject
protected Callable<T> associateWithSubject(Callable<T> task)
{    Subject subject = getSubject();    return subject.associateWith(task);}
0c9a2082d04366d5173651e3ee908cf5d09e3fa1d265b153da1f2006a1515398
submit
public Future<T> submit(Callable<T> task)
{    Callable<T> work = associateWithSubject(task);    return this.targetExecutorService.submit(work);}
ef7c9b83668b995908c09d87c68f0079c04c722951c05789aa091f1710cdfa46
submit
public Future<T> submit(Runnable task, T result)
{    Runnable work = associateWithSubject(task);    return this.targetExecutorService.submit(work, result);}
c396ff386382681638e60c72135a572c6c403a789206b179996c80813af791ee
submit
public Future<?> submit(Runnable task)
{    Runnable work = associateWithSubject(task);    return this.targetExecutorService.submit(work);}
363d4b402a4e55851d4a873f5596d2a2d216702c232875b72d0808814773d2b0
associateWithSubject
protected Collection<Callable<T>> associateWithSubject(Collection<? extends Callable<T>> tasks)
{    Collection<Callable<T>> workItems = new ArrayList<Callable<T>>(tasks.size());    for (Callable<T> task : tasks) {        Callable<T> work = associateWithSubject(task);        workItems.add(work);    }    return workItems;}
727fb861e00e7f6bc0f268daf107d6616666b1ddf184b1bae2ce9384d51b53a4
invokeAll
public List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks) throws InterruptedException
{    Collection<Callable<T>> workItems = associateWithSubject(tasks);    return this.targetExecutorService.invokeAll(workItems);}
93a68fb322a325de7997c2f638866bb16e3bf30c29e3711c441e497b2bc6aa97
invokeAll
public List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) throws InterruptedException
{    Collection<Callable<T>> workItems = associateWithSubject(tasks);    return this.targetExecutorService.invokeAll(workItems, timeout, unit);}
1ad70e4ec92dd23735e8d3575755adbfe269e14b8a2d7b90af971ba52718045d
invokeAny
public T invokeAny(Collection<? extends Callable<T>> tasks) throws InterruptedException, ExecutionException
{    Collection<Callable<T>> workItems = associateWithSubject(tasks);    return this.targetExecutorService.invokeAny(workItems);}
98ee1f153c90d828d49a12b93ea148d5b0cd12a1e30f7f7a0e966d462387d201
invokeAny
public T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException
{    Collection<Callable<T>> workItems = associateWithSubject(tasks);    return this.targetExecutorService.invokeAny(workItems, timeout, unit);}
0acbc5eafa27be5c2b330de906842695a410cf5e1150b2c391194a46ac196f6f
getTargetScheduledExecutorService
public ScheduledExecutorService getTargetScheduledExecutorService()
{    return targetScheduledExecutorService;}
cccf7b3c752433522936e78925e838159a7f2e1ca3e986f9ab790ad118bd91af
setTargetScheduledExecutorService
public void setTargetScheduledExecutorService(ScheduledExecutorService targetScheduledExecutorService)
{    super.setTargetExecutorService(targetScheduledExecutorService);    this.targetScheduledExecutorService = targetScheduledExecutorService;}
fcd5f9e8e7ba70be5a5e67c80c8a2dc3176511726ebd941b3660588a7d7d4835
setTargetExecutor
public void setTargetExecutor(Executor targetExecutor)
{    if (!(targetExecutor instanceof ScheduledExecutorService)) {        String msg = "The " + getClass().getName() + " implementation only accepts " + ScheduledExecutorService.class.getName() + " target instances.";        throw new IllegalArgumentException(msg);    }    super.setTargetExecutorService((ScheduledExecutorService) targetExecutor);}
30c8d4c91c1da5a32651d03ed174131c88f7ee8e940bd46dfa3b24332771421a
setTargetExecutorService
public void setTargetExecutorService(ExecutorService targetExecutorService)
{    if (!(targetExecutorService instanceof ScheduledExecutorService)) {        String msg = "The " + getClass().getName() + " implementation only accepts " + ScheduledExecutorService.class.getName() + " target instances.";        throw new IllegalArgumentException(msg);    }    super.setTargetExecutorService(targetExecutorService);}
57b289a5d111e9bda38f82dbb648744ebe61c1afb53cb8324058da81208921f1
schedule
public ScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit)
{    Runnable work = associateWithSubject(command);    return this.targetScheduledExecutorService.schedule(work, delay, unit);}
ef094e3a7ff3b905dba745ab5afd6e47aec0d6efd762e19d86784ecaadfd0dd6
schedule
public ScheduledFuture<V> schedule(Callable<V> callable, long delay, TimeUnit unit)
{    Callable<V> work = associateWithSubject(callable);    return this.targetScheduledExecutorService.schedule(work, delay, unit);}
783e5be0a4910565c70ec905ee94cc016e1674344bf7d00884f8031e3518fda1
scheduleAtFixedRate
public ScheduledFuture<?> scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)
{    Runnable work = associateWithSubject(command);    return this.targetScheduledExecutorService.scheduleAtFixedRate(work, initialDelay, period, unit);}
956e3c0930e44860c4fcba8984e930304a9f1c4d9e5ff5287294627cc88b36b9
scheduleWithFixedDelay
public ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit)
{    Runnable work = associateWithSubject(command);    return this.targetScheduledExecutorService.scheduleWithFixedDelay(work, initialDelay, delay, unit);}
d742d5adfc4a66ed703f889ff5b15820397f6bc1ab534832eaccd42f24661391
getIni
public Ini getIni()
{    return ini;}
28d8efeba0b79f62443ec365b195cea5d2caf0d43970a32b51a379bc09a2337a
setIni
public void setIni(Ini ini)
{    this.ini = ini;}
53a8e1af37c2d62cdf51f6a1a80cb3aee77be6bf55ce8a36067e1741133e5554
getDefaults
protected Map<String, ?> getDefaults()
{    return defaultBeans;}
411a1a18bf475a51833fa08c922bcfade48945586ed364ba3acdcbe221f57b98
setDefaults
public void setDefaults(Map<String, ?> defaultBeans)
{    this.defaultBeans = defaultBeans;}
864487b9e8e0caa078a54b6e02993077b66ba04107c8cd167f8184adc64f6167
loadDefaultClassPathIni
public static Ini loadDefaultClassPathIni()
{    Ini ini = null;    if (ResourceUtils.resourceExists(DEFAULT_INI_RESOURCE_PATH)) {        log.debug("Found shiro.ini at the root of the classpath.");        ini = new Ini();        ini.loadFromPath(DEFAULT_INI_RESOURCE_PATH);        if (CollectionUtils.isEmpty(ini)) {            log.warn("shiro.ini found at the root of the classpath, but it did not contain any data.");        }    }    return ini;}
fe774d2f61f0a85edee71bbd30339a912a3fd42a7a605eb1c661c1388f690d68
resolveIni
protected Ini resolveIni()
{    Ini ini = getIni();    if (CollectionUtils.isEmpty(ini)) {        log.debug("Null or empty Ini instance.  Falling back to the default {} file.", DEFAULT_INI_RESOURCE_PATH);        ini = loadDefaultClassPathIni();    }    return ini;}
c6b87e4687afdc81c6ff4bf44dcc8bf1653b88bd197730a2b8b1120b62a808c1
createInstance
public T createInstance()
{    Ini ini = resolveIni();    T instance;    if (CollectionUtils.isEmpty(ini)) {        log.debug("No populated Ini available.  Creating a default instance.");        instance = createDefaultInstance();        if (instance == null) {            String msg = getClass().getName() + " implementation did not return a default instance in " + "the event of a null/empty Ini configuration.  This is required to support the " + "Factory interface.  Please check your implementation.";            throw new IllegalStateException(msg);        }    } else {        log.debug("Creating instance from Ini [" + ini + "]");        instance = createInstance(ini);        if (instance == null) {            String msg = getClass().getName() + " implementation did not return a constructed instance from " + "the createInstance(Ini) method implementation.";            throw new IllegalStateException(msg);        }    }    return instance;}
7d0f4bc7b4154c40ba89f19690fbbd2b1cb904953de6980131307a0291b12940
getBeans
public Map<String, ?> getBeans()
{    return this.builder != null ? Collections.unmodifiableMap(builder.getObjects()) : null;}
9cabd71a85d4928de1c9a46601c11d584f3e7522ee61146e1117d0d360a20b2e
destroy
public void destroy()
{    if (getReflectionBuilder() != null) {        getReflectionBuilder().destroy();    }}
0ed70c76aefc24034ce2f94069c8f192c766b5a612702bb311905c83b01897b2
getSecurityManagerBean
private SecurityManager getSecurityManagerBean()
{    return getReflectionBuilder().getBean(SECURITY_MANAGER_NAME, SecurityManager.class);}
7a0468473f9f64ecde9362e16e5dda02a9ab62c848684dcd22a139f87335f226
createDefaultInstance
protected SecurityManager createDefaultInstance()
{    return new DefaultSecurityManager();}
8f61a7d1b41811f7608019514fed080aeec9fac4d6e9f0905d1fde072f273ebc
createInstance
protected SecurityManager createInstance(Ini ini)
{    if (CollectionUtils.isEmpty(ini)) {        throw new NullPointerException("Ini argument cannot be null or empty.");    }    SecurityManager securityManager = createSecurityManager(ini);    if (securityManager == null) {        String msg = SecurityManager.class + " instance cannot be null.";        throw new ConfigurationException(msg);    }    return securityManager;}
cd66d90a34062d04137f6dc89ca80f1f189abc97211aa360a7db07e9932acc41
createSecurityManager
private SecurityManager createSecurityManager(Ini ini)
{    return createSecurityManager(ini, getConfigSection(ini));}
c9f6d4043e30d6722e0be8cacad47f755df1e1fa16487a7c4c54e0636733b99f
getConfigSection
private Ini.Section getConfigSection(Ini ini)
{    Ini.Section mainSection = ini.getSection(MAIN_SECTION_NAME);    if (CollectionUtils.isEmpty(mainSection)) {                mainSection = ini.getSection(Ini.DEFAULT_SECTION_NAME);    }    return mainSection;}
172d0938d4edf4aea87888155708b63146beab59ff04fad7cca17d7e60241b27
isAutoApplyRealms
protected boolean isAutoApplyRealms(SecurityManager securityManager)
{    boolean autoApply = true;    if (securityManager instanceof RealmSecurityManager) {                RealmSecurityManager realmSecurityManager = (RealmSecurityManager) securityManager;        Collection<Realm> realms = realmSecurityManager.getRealms();        if (!CollectionUtils.isEmpty(realms)) {            log.info("Realms have been explicitly set on the SecurityManager instance - auto-setting of " + "realms will not occur.");            autoApply = false;        }    }    return autoApply;}
3085949181cdee7946079c54d780f3915ec788b7c51d68a753c4983b7297b786
createSecurityManager
private SecurityManager createSecurityManager(Ini ini, Ini.Section mainSection)
{    getReflectionBuilder().setObjects(createDefaults(ini, mainSection));    Map<String, ?> objects = buildInstances(mainSection);    SecurityManager securityManager = getSecurityManagerBean();    boolean autoApplyRealms = isAutoApplyRealms(securityManager);    if (autoApplyRealms) {                        Collection<Realm> realms = getRealms(objects);                if (!CollectionUtils.isEmpty(realms)) {            applyRealmsToSecurityManager(realms, securityManager);        }    }    return securityManager;}
d600bf3cedbf6a5f45d33ba682658ab9e8194dee0aa7f937597281183ec6a972
createDefaults
protected Map<String, ?> createDefaults(Ini ini, Ini.Section mainSection)
{    Map<String, Object> defaults = new LinkedHashMap<String, Object>();    SecurityManager securityManager = createDefaultInstance();    defaults.put(SECURITY_MANAGER_NAME, securityManager);    if (shouldImplicitlyCreateRealm(ini)) {        Realm realm = createRealm(ini);        if (realm != null) {            defaults.put(INI_REALM_NAME, realm);        }    }        Map<String, ?> defaultBeans = getDefaults();    if (!CollectionUtils.isEmpty(defaultBeans)) {        defaults.putAll(defaultBeans);    }    return defaults;}
e663fd82525d2fdfabe87cfae83f8034b239ccb4d2ffb02c259c260c10a67312
buildInstances
private Map<String, ?> buildInstances(Ini.Section section)
{    return getReflectionBuilder().buildObjects(section);}
7b020560d8f3b00eed4a49494797cf44494124aea1be7ef5e1b233eca8e429ad
addToRealms
private void addToRealms(Collection<Realm> realms, RealmFactory factory)
{    LifecycleUtils.init(factory);    Collection<Realm> factoryRealms = factory.getRealms();        if (!CollectionUtils.isEmpty(factoryRealms)) {        realms.addAll(factoryRealms);    }}
270e5761a6c1499f5ce5cee6eb180408e2c73d6e7c65cd23a5beea9327f4be63
getRealms
private Collection<Realm> getRealms(Map<String, ?> instances)
{            List<Realm> realms = new ArrayList<Realm>();        for (Map.Entry<String, ?> entry : instances.entrySet()) {        String name = entry.getKey();        Object value = entry.getValue();        if (value instanceof RealmFactory) {            addToRealms(realms, (RealmFactory) value);        } else if (value instanceof Realm) {            Realm realm = (Realm) value;                        String existingName = realm.getName();            if (existingName == null || existingName.startsWith(realm.getClass().getName())) {                if (realm instanceof Nameable) {                    ((Nameable) realm).setName(name);                    log.debug("Applied name '{}' to Nameable realm instance {}", name, realm);                } else {                    log.info("Realm does not implement the {} interface.  Configured name will not be applied.", Nameable.class.getName());                }            }            realms.add(realm);        }    }    return realms;}
10cbcd2dc9496bb51df7c98923b46142eab23a1f34ce68ab471b13e3a08d8286
assertRealmSecurityManager
private void assertRealmSecurityManager(SecurityManager securityManager)
{    if (securityManager == null) {        throw new NullPointerException("securityManager instance cannot be null");    }    if (!(securityManager instanceof RealmSecurityManager)) {        String msg = "securityManager instance is not a " + RealmSecurityManager.class.getName() + " instance.  This is required to access or configure realms on the instance.";        throw new ConfigurationException(msg);    }}
6a7ecb2bf77e1b67844bd668f01a0ce1ba6fc2a879de5278c41ea5c5a67ff7b4
applyRealmsToSecurityManager
protected void applyRealmsToSecurityManager(Collection<Realm> realms, SecurityManager securityManager)
{    assertRealmSecurityManager(securityManager);    ((RealmSecurityManager) securityManager).setRealms(realms);}
c1e2a0f96e133a49ea4819804cbf4eedc0abfae142c8d06bf725088baaf1f456
shouldImplicitlyCreateRealm
protected boolean shouldImplicitlyCreateRealm(Ini ini)
{    return !CollectionUtils.isEmpty(ini) && (!CollectionUtils.isEmpty(ini.getSection(IniRealm.ROLES_SECTION_NAME)) || !CollectionUtils.isEmpty(ini.getSection(IniRealm.USERS_SECTION_NAME)));}
10230c6b1ebbecbf4a1711be965cf8d11de05bca8c6d428f1f25d02ba7410f46
createRealm
protected Realm createRealm(Ini ini)
{        IniRealm realm = new IniRealm();    realm.setName(INI_REALM_NAME);        realm.setIni(ini);    return realm;}
463f3c9fd561f9cab86e95c00ef8c204c28e25e9a10ec2a91fe1234e5699ef3e
getReflectionBuilder
public ReflectionBuilder getReflectionBuilder()
{    return builder;}
af43e2070850558d9a624ca125b8a8ab3fa9f5f05c355752f65030354f6aba55
setReflectionBuilder
public void setReflectionBuilder(ReflectionBuilder builder)
{    this.builder = builder;}
f7418ddcc892d2b96023c6b23db68d37108c92ead3e1cd118f6e8635d4c6d3b0
getSecurityManager
public SecurityManager getSecurityManager() throws IllegalStateException
{    SecurityManager securityManager = lookupSecurityManager();    if (securityManager == null) {        throw new IllegalStateException("No SecurityManager found in Environment.  This is an invalid " + "environment state.");    }    return securityManager;}
c11e39b3138902654fbfe242e943963b5e160471a127c735c0e7e1bf5c67886e
setSecurityManager
public void setSecurityManager(SecurityManager securityManager)
{    if (securityManager == null) {        throw new IllegalArgumentException("Null SecurityManager instances are not allowed.");    }    String name = getSecurityManagerName();    setObject(name, securityManager);}
f4e66e2dadaccfcf9dc89886e609bbaa56824f5c9d424416d08faf01f73a9360
lookupSecurityManager
protected SecurityManager lookupSecurityManager()
{    String name = getSecurityManagerName();    return getObject(name, SecurityManager.class);}
fc6ba9bb034e2fff4f4e2ec87e1071427d6550240caa77c8bbbf2162e6dbd938
getSecurityManagerName
public String getSecurityManagerName()
{    return securityManagerName;}
6ebe5c9605123a852691662632cc8708994a979e774e0c6a244880cce5f8f988
setSecurityManagerName
public void setSecurityManagerName(String securityManagerName)
{    this.securityManagerName = securityManagerName;}
77b2219156643458262f32527fc0fecfa57b4c73051c3f6058a1de1f107b594f
getObjects
public Map<String, Object> getObjects()
{    return this.objects;}
767d184d388472d3346a3e1f3693b38cdf9b34b4bb82a4fac3ba02258f30294d
getObject
public T getObject(String name, Class<T> requiredType) throws RequiredTypeException
{    if (name == null) {        throw new NullPointerException("name parameter cannot be null.");    }    if (requiredType == null) {        throw new NullPointerException("requiredType parameter cannot be null.");    }    Object o = this.objects.get(name);    if (o == null) {        return null;    }    if (!requiredType.isInstance(o)) {        String msg = "Object named '" + name + "' is not of required type [" + requiredType.getName() + "].";        throw new RequiredTypeException(msg);    }    return (T) o;}
e4b4224258864fc0135f751126d15fe6ace4421c0a23993382f8270e4bbfe431
setObject
public void setObject(String name, Object instance)
{    if (name == null) {        throw new NullPointerException("name parameter cannot be null.");    }    if (instance == null) {        this.objects.remove(name);    } else {        this.objects.put(name, instance);    }}
b43e7dc4a9f7929f7cbf79e54bda99f9719af6c9509dfa283baa743984130577
destroy
public void destroy() throws Exception
{    LifecycleUtils.destroy(this.objects.values());}
6ed2c5a7ab5f4b3061d55cc6e26bfa9e574bcb62a17d762b8fc89e5455164be7
setJndiTemplate
public void setJndiTemplate(JndiTemplate jndiTemplate)
{    this.jndiTemplate = (jndiTemplate != null ? jndiTemplate : new JndiTemplate());}
0e5420f9bdfa58b8fdce2eb6a8168df28b68d3ec3f820bfa3d72853fc7fc5d72
getJndiTemplate
public JndiTemplate getJndiTemplate()
{    return this.jndiTemplate;}
7d46caec37ceb6c9489d7eeb38c47ea4641431925f655086e35aa858ef81c322
setJndiEnvironment
public void setJndiEnvironment(Properties jndiEnvironment)
{    this.jndiTemplate = new JndiTemplate(jndiEnvironment);}
b3df09f63d012dc619a16b221c38fcafdc70913069424a85b37064e41a424b2c
getJndiEnvironment
public Properties getJndiEnvironment()
{    return this.jndiTemplate.getEnvironment();}
91534b3eb42947dfd3ebd81a9f03967dc03d9fd1dfd67306447356c60d403f2a
setResourceRef
public void setResourceRef(boolean resourceRef)
{    this.resourceRef = resourceRef;}
80dc78db5aa22c39adee2864730fd3739f2f6c1e87d7fbe31511287c3173cdfb
isResourceRef
public boolean isResourceRef()
{    return this.resourceRef;}
c693e4df9131a11ba642a288c4b12a8683726ea6fcf8a908978a71cbe987890f
lookup
protected Object lookup(String jndiName) throws NamingException
{    return lookup(jndiName, null);}
89913a500a66aab7c7721d2060890e8d94f0c47599961ea2fc83a1a46627a0f1
lookup
protected Object lookup(String jndiName, Class requiredType) throws NamingException
{    if (jndiName == null) {        throw new IllegalArgumentException("jndiName argument must not be null");    }    String convertedName = convertJndiName(jndiName);    Object jndiObject;    try {        jndiObject = getJndiTemplate().lookup(convertedName, requiredType);    } catch (NamingException ex) {        if (!convertedName.equals(jndiName)) {                        if (log.isDebugEnabled()) {                log.debug("Converted JNDI name [" + convertedName + "] not found - trying original name [" + jndiName + "]. " + ex);            }            jndiObject = getJndiTemplate().lookup(jndiName, requiredType);        } else {            throw ex;        }    }    log.debug("Located object with JNDI name '{}'", convertedName);    return jndiObject;}
17d84a3a55660f46b99be0025c4acd1b5a5b12872531ecbe743784eeac8131cc
convertJndiName
protected String convertJndiName(String jndiName)
{        if (isResourceRef() && !jndiName.startsWith(CONTAINER_PREFIX) && jndiName.indexOf(':') == -1) {        jndiName = CONTAINER_PREFIX + jndiName;    }    return jndiName;}
0efc6491cc44a0b97f695869a967e703ba397482733ea1a0f612f996532a7bcf
getInstance
public T getInstance()
{    try {        if (requiredType != null) {            return requiredType.cast(this.lookup(resourceName, requiredType));        } else {            return (T) this.lookup(resourceName);        }    } catch (NamingException e) {        final String typeName = requiredType != null ? requiredType.getName() : "object";        throw new IllegalStateException("Unable to look up " + typeName + " with jndi name '" + resourceName + "'.", e);    }}
55b0c8082aca9eb1cde8822448a06ba7563c146bbd923f4a78764c524acf141f
getResourceName
public String getResourceName()
{    return resourceName;}
6bdf320e7d114691ad048bebdf595f242effbb301f282c814f9e7135074d59fa
setResourceName
public void setResourceName(String resourceName)
{    this.resourceName = resourceName;}
5054480c0864e2fd18d9cfd238a3663a318afdec4e7a1cc1220f05216f7a7172
getRequiredType
public Class<? extends T> getRequiredType()
{    return requiredType;}
1c0b569e306c93310c6f7ec272c48639a2ece7493cd0eadc626126d355dba302
setRequiredType
public void setRequiredType(Class<? extends T> requiredType)
{    this.requiredType = requiredType;}
7601af8bbc5317627fa52360b1ffdc16ca49e0dca7fdfda0ad3acc619b30b277
setEnvironment
public void setEnvironment(Properties environment)
{    this.environment = environment;}
10a1c8754f45f5800f214293cabb266984597f8c667bda21360a3fae92b6f1e3
getEnvironment
public Properties getEnvironment()
{    return this.environment;}
aeb895fbb7f1e3c4beebd5190a4adb8973c04c9587cad5fbe5f21b58e27129c6
execute
public Object execute(JndiCallback contextCallback) throws NamingException
{    Context ctx = createInitialContext();    try {        return contextCallback.doInContext(ctx);    } finally {        try {            ctx.close();        } catch (NamingException ex) {            log.debug("Could not close JNDI InitialContext", ex);        }    }}
ddbdc57365ad23e813d52e756a3f9ec7626cad9d2880219e02312c1cf8ba2b4f
createInitialContext
protected Context createInitialContext() throws NamingException
{    Properties env = getEnvironment();    Hashtable icEnv = null;    if (env != null) {        icEnv = new Hashtable(env.size());        for (Enumeration en = env.propertyNames(); en.hasMoreElements(); ) {            String key = (String) en.nextElement();            icEnv.put(key, env.getProperty(key));        }    }    return new InitialContext(icEnv);}
1437692dd1dc2a4d151cc931eaeb44a3df5337d49cbe5ce2fbe53df2fd06393c
lookup
public Object lookup(final String name) throws NamingException
{    log.debug("Looking up JNDI object with name '{}'", name);    return execute(new JndiCallback() {        public Object doInContext(Context ctx) throws NamingException {            Object located = ctx.lookup(name);            if (located == null) {                throw new NameNotFoundException("JNDI object with [" + name + "] not found: JNDI implementation returned null");            }            return located;        }    });}
21d74840de964be3f83c498df845848f20265a023c615f5c62ec7e7de24d6aa8
doInContext
public Object doInContext(Context ctx) throws NamingException
{    Object located = ctx.lookup(name);    if (located == null) {        throw new NameNotFoundException("JNDI object with [" + name + "] not found: JNDI implementation returned null");    }    return located;}
c0e7ea80d1c1d0236484a554e62a0ea21d5396bb2dbba4c55ba03230e0ab0851
lookup
public Object lookup(String name, Class requiredType) throws NamingException
{    Object jndiObject = lookup(name);    if (requiredType != null && !requiredType.isInstance(jndiObject)) {        String msg = "Jndi object acquired under name '" + name + "' is of type [" + jndiObject.getClass().getName() + "] and not assignable to the required type [" + requiredType.getName() + "].";        throw new NamingException(msg);    }    return jndiObject;}
d641e1fe1e57dc9802588b6991214913cf69a823f45c26a3d0a1778bcdcaf296
bind
public void bind(final String name, final Object object) throws NamingException
{    log.debug("Binding JNDI object with name '{}'", name);    execute(new JndiCallback() {        public Object doInContext(Context ctx) throws NamingException {            ctx.bind(name, object);            return null;        }    });}
21d74840de964be3f83c498df845848f20265a023c615f5c62ec7e7de24d6aa8
doInContext
public Object doInContext(Context ctx) throws NamingException
{    ctx.bind(name, object);    return null;}
b0174befb5d0ec04bec67b80dbf3a639d1c17bc142620211a50de932e736b4eb
rebind
public void rebind(final String name, final Object object) throws NamingException
{    log.debug("Rebinding JNDI object with name '{}'", name);    execute(new JndiCallback() {        public Object doInContext(Context ctx) throws NamingException {            ctx.rebind(name, object);            return null;        }    });}
21d74840de964be3f83c498df845848f20265a023c615f5c62ec7e7de24d6aa8
doInContext
public Object doInContext(Context ctx) throws NamingException
{    ctx.rebind(name, object);    return null;}
39f3e82f117df66e2a484ebc8f3236a2ae102388d9963dd733cb0d8352d0769e
unbind
public void unbind(final String name) throws NamingException
{    log.debug("Unbinding JNDI object with name '{}'", name);    execute(new JndiCallback() {        public Object doInContext(Context ctx) throws NamingException {            ctx.unbind(name);            return null;        }    });}
21d74840de964be3f83c498df845848f20265a023c615f5c62ec7e7de24d6aa8
doInContext
public Object doInContext(Context ctx) throws NamingException
{    ctx.unbind(name);    return null;}
a19a0f7d1dad5418ad3dcb09f496af6b7da12abf6a9d5b352936825b8f5eb1eb
getSerializer
public Serializer<PrincipalCollection> getSerializer()
{    return serializer;}
b1a2a95ec3f6a37bf199b08caf68c91c485282c6e9a745d34918bd85ac78eb21
setSerializer
public void setSerializer(Serializer<PrincipalCollection> serializer)
{    this.serializer = serializer;}
cad4214c266d2e075fee28aa8c87f872ca6bcc2291731f4b8a90329401a60931
getCipherService
public CipherService getCipherService()
{    return cipherService;}
1656a494c3ced2b8145b6554e971b714e4c0c021dbb989fdc476b4057e3c7d51
setCipherService
public void setCipherService(CipherService cipherService)
{    this.cipherService = cipherService;}
3a2d8e2317890c8a6527a1cd09e993dacf857b9202bbe4adac0d6b593ab5cc7d
getEncryptionCipherKey
public byte[] getEncryptionCipherKey()
{    return encryptionCipherKey;}
073238d0b4988e89820873c46ec0cea19d9fa9d292e2b0dd379550e64c8642b4
setEncryptionCipherKey
public void setEncryptionCipherKey(byte[] encryptionCipherKey)
{    this.encryptionCipherKey = encryptionCipherKey;}
e175a2b90e19741fa648604ad1172bf2438fc073b0110389d41689cd869f0518
getDecryptionCipherKey
public byte[] getDecryptionCipherKey()
{    return decryptionCipherKey;}
3d736dcc3242589a5f6546e1136402751acd222113987c7ce5c7f33bc62add06
setDecryptionCipherKey
public void setDecryptionCipherKey(byte[] decryptionCipherKey)
{    this.decryptionCipherKey = decryptionCipherKey;}
1302767477b26fdd9402502e0f330210938e3f582c1d2b8aa3b0f34777232321
getCipherKey
public byte[] getCipherKey()
{        return getEncryptionCipherKey();}
9d21639f5f22f6a5859736a626be152d514042a633c452b17e1f9e5b6f49c29a
setCipherKey
public void setCipherKey(byte[] cipherKey)
{            setEncryptionCipherKey(cipherKey);    setDecryptionCipherKey(cipherKey);}
6f54de68e53872d62d6c8390f53874b6774f3abf81f4f63b8ed22937219e8624
isRememberMe
protected boolean isRememberMe(AuthenticationToken token)
{    return token != null && (token instanceof RememberMeAuthenticationToken) && ((RememberMeAuthenticationToken) token).isRememberMe();}
7e8e0d2883319180c7c4a93706bfb29500b957d424e0a5e8a8a2c6d27ff6719d
onSuccessfulLogin
public void onSuccessfulLogin(Subject subject, AuthenticationToken token, AuthenticationInfo info)
{        forgetIdentity(subject);        if (isRememberMe(token)) {        rememberIdentity(subject, token, info);    } else {        if (log.isDebugEnabled()) {            log.debug("AuthenticationToken did not indicate RememberMe is requested.  " + "RememberMe functionality will not be executed for corresponding account.");        }    }}
3c89d326e78bea6acdfc6ea168c98481e7c2b5df9c35300807ed931ba099e3fd
rememberIdentity
public void rememberIdentity(Subject subject, AuthenticationToken token, AuthenticationInfo authcInfo)
{    PrincipalCollection principals = getIdentityToRemember(subject, authcInfo);    rememberIdentity(subject, principals);}
f86cefd9a97fca68e76de796414fad976f7f1db862b62e778e79e3d2a71cb5bb
getIdentityToRemember
protected PrincipalCollection getIdentityToRemember(Subject subject, AuthenticationInfo info)
{    return info.getPrincipals();}
a61d2322b10c9c9fe051c2d0c0d272432f3b6ad94ae4e026507cba84e7072133
rememberIdentity
protected void rememberIdentity(Subject subject, PrincipalCollection accountPrincipals)
{    byte[] bytes = convertPrincipalsToBytes(accountPrincipals);    rememberSerializedIdentity(subject, bytes);}
00e8a11e59dcbe119977793afe1f3a1ef74d9e2bc65729376245d8cf0e186f7a
convertPrincipalsToBytes
protected byte[] convertPrincipalsToBytes(PrincipalCollection principals)
{    byte[] bytes = serialize(principals);    if (getCipherService() != null) {        bytes = encrypt(bytes);    }    return bytes;}
cacda1333f7dc6f76f33db4bbea4f17bd6258a33e2f2ec96d728c6871ab70162
getRememberedPrincipals
public PrincipalCollection getRememberedPrincipals(SubjectContext subjectContext)
{    PrincipalCollection principals = null;    try {        byte[] bytes = getRememberedSerializedIdentity(subjectContext);                if (bytes != null && bytes.length > 0) {            principals = convertBytesToPrincipals(bytes, subjectContext);        }    } catch (RuntimeException re) {        principals = onRememberedPrincipalFailure(re, subjectContext);    }    return principals;}
953c8270844b9a950efa4cc03555f17a63353da849e23dace13127466ef9e601
convertBytesToPrincipals
protected PrincipalCollection convertBytesToPrincipals(byte[] bytes, SubjectContext subjectContext)
{    if (getCipherService() != null) {        bytes = decrypt(bytes);    }    return deserialize(bytes);}
6e94be9af03c6650bd31efac277d8f2e7f3f26fddad37c67498e9175767c6972
onRememberedPrincipalFailure
protected PrincipalCollection onRememberedPrincipalFailure(RuntimeException e, SubjectContext context)
{    if (log.isWarnEnabled()) {        String message = "There was a failure while trying to retrieve remembered principals.  This could be due to a " + "configuration problem or corrupted principals.  This could also be due to a recently " + "changed encryption key, if you are using a shiro.ini file, this property would be " + "'securityManager.rememberMeManager.cipherKey' see: http://shiro.apache.org/web.html#Web-RememberMeServices. " + "The remembered identity will be forgotten and not used for this request.";        log.warn(message);    }    forgetIdentity(context);        throw e;}
3cc7ffa88ca62af8ad0ecf20b40e9cae21dfc1c520741b7be57598937c3e8030
encrypt
protected byte[] encrypt(byte[] serialized)
{    byte[] value = serialized;    CipherService cipherService = getCipherService();    if (cipherService != null) {        ByteSource byteSource = cipherService.encrypt(serialized, getEncryptionCipherKey());        value = byteSource.getBytes();    }    return value;}
2e81828deaf65ee90ffa1aca6e6909a06715e3f3c195d84d7c41faecc6278fc1
decrypt
protected byte[] decrypt(byte[] encrypted)
{    byte[] serialized = encrypted;    CipherService cipherService = getCipherService();    if (cipherService != null) {        ByteSource byteSource = cipherService.decrypt(encrypted, getDecryptionCipherKey());        serialized = byteSource.getBytes();    }    return serialized;}
7dc2e4cf86e0313ed6d9c07dfee14cede3c89a0739236ff1329e4e2f379bf51b
serialize
protected byte[] serialize(PrincipalCollection principals)
{    return getSerializer().serialize(principals);}
fca34ae48ff314922251e8b10518482a536e1a9b8f5080050c8b41be626ddb9a
deserialize
protected PrincipalCollection deserialize(byte[] serializedIdentity)
{    return getSerializer().deserialize(serializedIdentity);}
306093058b2ab56fad1e8f25759043400f5238550ff05cce3b199c7ac0a15ff6
onFailedLogin
public void onFailedLogin(Subject subject, AuthenticationToken token, AuthenticationException ae)
{    forgetIdentity(subject);}
0cf3347150a528adaab9a85c7c8f1c083b08139429fab9df81baf9c59c241634
onLogout
public void onLogout(Subject subject)
{    forgetIdentity(subject);}
dd4c5a32ee29a90570217e8356b9e51670ba7baa16092667ae282bd2a8037d5b
getAuthenticator
public Authenticator getAuthenticator()
{    return authenticator;}
060b2e7948da6d56aad52a474f85455a76fd04b249a20db5be0c4066f47080f4
setAuthenticator
public void setAuthenticator(Authenticator authenticator) throws IllegalArgumentException
{    if (authenticator == null) {        String msg = "Authenticator argument cannot be null.";        throw new IllegalArgumentException(msg);    }    this.authenticator = authenticator;}
6ed613e0699c0afd7f6510ffc7e2dbe42b66d5105dda5e1b12311b035671469d
afterRealmsSet
protected void afterRealmsSet()
{    super.afterRealmsSet();    if (this.authenticator instanceof ModularRealmAuthenticator) {        ((ModularRealmAuthenticator) this.authenticator).setRealms(getRealms());    }}
c12bfb4b018f7d82cb6d0c0bcdcb2ffd2db7978e38b22cef4fc61d68f61d0379
authenticate
public AuthenticationInfo authenticate(AuthenticationToken token) throws AuthenticationException
{    return this.authenticator.authenticate(token);}
9cabd71a85d4928de1c9a46601c11d584f3e7522ee61146e1117d0d360a20b2e
destroy
public void destroy()
{    LifecycleUtils.destroy(getAuthenticator());    this.authenticator = null;    super.destroy();}
fbbc957b9c2952ec058e3a9edcbf26fbfac07c83d90547a3885c5994c7babcff
getAuthorizer
public Authorizer getAuthorizer()
{    return authorizer;}
f4d655aa0b9f2b2170294dcba8b84da3c1eab5724fd5df4698c975b23c4f704e
setAuthorizer
public void setAuthorizer(Authorizer authorizer)
{    if (authorizer == null) {        String msg = "Authorizer argument cannot be null.";        throw new IllegalArgumentException(msg);    }    this.authorizer = authorizer;}
6ed613e0699c0afd7f6510ffc7e2dbe42b66d5105dda5e1b12311b035671469d
afterRealmsSet
protected void afterRealmsSet()
{    super.afterRealmsSet();    if (this.authorizer instanceof ModularRealmAuthorizer) {        ((ModularRealmAuthorizer) this.authorizer).setRealms(getRealms());    }}
9cabd71a85d4928de1c9a46601c11d584f3e7522ee61146e1117d0d360a20b2e
destroy
public void destroy()
{    LifecycleUtils.destroy(getAuthorizer());    this.authorizer = null;    super.destroy();}
0e7488ed21dc57f86d8f066ecd73eb3a3ddfc8d07ff479f08d3990d4e1e8c515
isPermitted
public boolean isPermitted(PrincipalCollection principals, String permissionString)
{    return this.authorizer.isPermitted(principals, permissionString);}
438a97ffc49877136761725a38f6b4dfbc4651416169eb87eff0209823624bce
isPermitted
public boolean isPermitted(PrincipalCollection principals, Permission permission)
{    return this.authorizer.isPermitted(principals, permission);}
d8a57f7059848af1f45021e47e389ce324f8e378aa4eac4d6f29e6cbc62a25b1
isPermitted
public boolean[] isPermitted(PrincipalCollection principals, String... permissions)
{    return this.authorizer.isPermitted(principals, permissions);}
c84f86de3a9bc6f9df7214f7a84708c8ef37e8fa9da985ffebca471c6592dc87
isPermitted
public boolean[] isPermitted(PrincipalCollection principals, List<Permission> permissions)
{    return this.authorizer.isPermitted(principals, permissions);}
cb60a1b9c97d51eab82a5901254b803ad2106c8a81333880770b409606e4cdf7
isPermittedAll
public boolean isPermittedAll(PrincipalCollection principals, String... permissions)
{    return this.authorizer.isPermittedAll(principals, permissions);}
cfda870ec0318c2c375b9a93b4028328e5fadae8f41747584b5b6ebf87b6892c
isPermittedAll
public boolean isPermittedAll(PrincipalCollection principals, Collection<Permission> permissions)
{    return this.authorizer.isPermittedAll(principals, permissions);}
a327b08a77ad6580cd49b558e75df328aef7cdc39c067296740158e19bc2c855
checkPermission
public void checkPermission(PrincipalCollection principals, String permission) throws AuthorizationException
{    this.authorizer.checkPermission(principals, permission);}
91011aa09ea6ea8bee66056c82ac374cbb4b3e1a327d9a4a7eccd6f499b7b5e9
checkPermission
public void checkPermission(PrincipalCollection principals, Permission permission) throws AuthorizationException
{    this.authorizer.checkPermission(principals, permission);}
4a1f1bfb13cd0aa2fa306d956f9e33a1816c2333f8a57a30602675f69da5fd3a
checkPermissions
public void checkPermissions(PrincipalCollection principals, String... permissions) throws AuthorizationException
{    this.authorizer.checkPermissions(principals, permissions);}
1e35e3a23f3b8b2fb017ef639aba20f21d0c9b9ee697350c026b8977cdc65d74
checkPermissions
public void checkPermissions(PrincipalCollection principals, Collection<Permission> permissions) throws AuthorizationException
{    this.authorizer.checkPermissions(principals, permissions);}
e99dd1bf53c1c3d3f6dc668f591eac4825acc96e21dc1e3baf22b30ec9b0c9db
hasRole
public boolean hasRole(PrincipalCollection principals, String roleIdentifier)
{    return this.authorizer.hasRole(principals, roleIdentifier);}
41fe53ffbc8a39b20b2e5ce900e697802cb468530509d8fb8aa86b99b1f7225f
hasRoles
public boolean[] hasRoles(PrincipalCollection principals, List<String> roleIdentifiers)
{    return this.authorizer.hasRoles(principals, roleIdentifiers);}
0caa8178e59d29be2a8a64698793ea248f7e066aab0a940a68cc6abbc27c24ab
hasAllRoles
public boolean hasAllRoles(PrincipalCollection principals, Collection<String> roleIdentifiers)
{    return this.authorizer.hasAllRoles(principals, roleIdentifiers);}
a80b2148873c4d879bcb44e5f5b47ee1ec78161a31be6af6f6eb66cddad8681d
checkRole
public void checkRole(PrincipalCollection principals, String role) throws AuthorizationException
{    this.authorizer.checkRole(principals, role);}
b57e9e8417c977fa59c021a6a3197c3cd481b7da39f0c54f5c2be6f4e54c89f6
checkRoles
public void checkRoles(PrincipalCollection principals, Collection<String> roles) throws AuthorizationException
{    this.authorizer.checkRoles(principals, roles);}
3317cd042100d4c6053b0d0e2831308b4574436bc02b7fe9ae2515cfac8fa342
checkRoles
public void checkRoles(PrincipalCollection principals, String... roles) throws AuthorizationException
{    this.authorizer.checkRoles(principals, roles);}
d235282ed55f1ba3e1df53154817dddfd84fb452c359aef3094af8724d330661
getCacheManager
public CacheManager getCacheManager()
{    return cacheManager;}
693625768ebe9598acbfb2af178abc5b90702d7019d784975fa548c3afa3ed99
setCacheManager
public void setCacheManager(CacheManager cacheManager)
{    this.cacheManager = cacheManager;    afterCacheManagerSet();}
198a1557d1dd223376fa795dd0031ea473ad4b12559f27aca88c2e064e04f213
afterCacheManagerSet
protected void afterCacheManagerSet()
{    applyEventBusToCacheManager();}
95c6edb20d2e27c54ce89be7d7ade6a5b9cdb9fa2cb451762c3c7ebed3f31e01
getEventBus
public EventBus getEventBus()
{    return eventBus;}
90d564afd68ffbd24f93d92358d830d481e0c7418cfcfeab221eab4774e70158
setEventBus
public void setEventBus(EventBus eventBus)
{    this.eventBus = eventBus;    afterEventBusSet();}
495f8a7feff8cd11649e398b08804a3b520ebea415b1da3b776bdb62f8fd8a83
applyEventBusToCacheManager
protected void applyEventBusToCacheManager()
{    if (this.eventBus != null && this.cacheManager != null && this.cacheManager instanceof EventBusAware) {        ((EventBusAware) this.cacheManager).setEventBus(this.eventBus);    }}
7aaeea1b57f37a5a14b4bbebf9fceb0ff2b9569d2aa871cc993e58ffa59117ea
afterEventBusSet
protected void afterEventBusSet()
{    applyEventBusToCacheManager();}
9cabd71a85d4928de1c9a46601c11d584f3e7522ee61146e1117d0d360a20b2e
destroy
public void destroy()
{    LifecycleUtils.destroy(getCacheManager());    this.cacheManager = null;    LifecycleUtils.destroy(getEventBus());    this.eventBus = new DefaultEventBus();}
5c03290a6a942298098308f7beaf3df27bdf1a8bae63c448d09b847a5d01455c
getSubjectFactory
public SubjectFactory getSubjectFactory()
{    return subjectFactory;}
98f66e4eadf364273fc9f112817e40d6bb6b8f2497f732f2fdb58e25c60ae59c
setSubjectFactory
public void setSubjectFactory(SubjectFactory subjectFactory)
{    this.subjectFactory = subjectFactory;}
2a922ad3c648a889d83ac0c1bd8b6721c0e97992f1ad886ac20a2c03f30bf52f
getSubjectDAO
public SubjectDAO getSubjectDAO()
{    return subjectDAO;}
e1ac022d111404617315290caefb2cd719a5e0585bd506d6fd1456ed0720ebc3
setSubjectDAO
public void setSubjectDAO(SubjectDAO subjectDAO)
{    this.subjectDAO = subjectDAO;}
ed597abcc5b2b410bd908c641fab066f85f8bffce229206cd7c713f25bc9bee1
getRememberMeManager
public RememberMeManager getRememberMeManager()
{    return rememberMeManager;}
c2ec85967ea50a46351b1f74f70135a6d42448836b9191a81ca695113898cec7
setRememberMeManager
public void setRememberMeManager(RememberMeManager rememberMeManager)
{    this.rememberMeManager = rememberMeManager;}
78bfe366482ef149b43136ff6c7d114ffdd5a671437fde82b4a3bbee5f7b5942
createSubjectContext
protected SubjectContext createSubjectContext()
{    return new DefaultSubjectContext();}
280b61f7a5bd9a5a315e44397990aaaf884c351d6435ad458649c4f9c22d9819
createSubject
protected Subject createSubject(AuthenticationToken token, AuthenticationInfo info, Subject existing)
{    SubjectContext context = createSubjectContext();    context.setAuthenticated(true);    context.setAuthenticationToken(token);    context.setAuthenticationInfo(info);    context.setSecurityManager(this);    if (existing != null) {        context.setSubject(existing);    }    return createSubject(context);}
c951d653dfc223f439b3a8236b96cb3f5a20a1fc166d3a7380ae6822fe57218c
bind
protected void bind(Subject subject)
{    save(subject);}
7ae7ece48d0c77c60e7c4bc7f7549bc27ecec5430c9d1c66227dcccdbf16af98
rememberMeSuccessfulLogin
protected void rememberMeSuccessfulLogin(AuthenticationToken token, AuthenticationInfo info, Subject subject)
{    RememberMeManager rmm = getRememberMeManager();    if (rmm != null) {        try {            rmm.onSuccessfulLogin(subject, token, info);        } catch (Exception e) {            if (log.isWarnEnabled()) {                String msg = "Delegate RememberMeManager instance of type [" + rmm.getClass().getName() + "] threw an exception during onSuccessfulLogin.  RememberMe services will not be " + "performed for account [" + info + "].";                log.warn(msg, e);            }        }    } else {        if (log.isTraceEnabled()) {            log.trace("This " + getClass().getName() + " instance does not have a " + "[" + RememberMeManager.class.getName() + "] instance configured.  RememberMe services " + "will not be performed for account [" + info + "].");        }    }}
ed83fa26ef94d9722aa088e6466468f90f99da78922ce61873808a4e23571291
rememberMeFailedLogin
protected void rememberMeFailedLogin(AuthenticationToken token, AuthenticationException ex, Subject subject)
{    RememberMeManager rmm = getRememberMeManager();    if (rmm != null) {        try {            rmm.onFailedLogin(subject, token, ex);        } catch (Exception e) {            if (log.isWarnEnabled()) {                String msg = "Delegate RememberMeManager instance of type [" + rmm.getClass().getName() + "] threw an exception during onFailedLogin for AuthenticationToken [" + token + "].";                log.warn(msg, e);            }        }    }}
f54e67fe01a8c8b0e5bbe290f56bf033c5f7d1ad94d5bffc05b3d600c4eeb537
rememberMeLogout
protected void rememberMeLogout(Subject subject)
{    RememberMeManager rmm = getRememberMeManager();    if (rmm != null) {        try {            rmm.onLogout(subject);        } catch (Exception e) {            if (log.isWarnEnabled()) {                String msg = "Delegate RememberMeManager instance of type [" + rmm.getClass().getName() + "] threw an exception during onLogout for subject with principals [" + (subject != null ? subject.getPrincipals() : null) + "]";                log.warn(msg, e);            }        }    }}
711218cb4d416f33f45ebf0347d6f2533a48036658c0f7aca89165918ed5a709
login
public Subject login(Subject subject, AuthenticationToken token) throws AuthenticationException
{    AuthenticationInfo info;    try {        info = authenticate(token);    } catch (AuthenticationException ae) {        try {            onFailedLogin(token, ae, subject);        } catch (Exception e) {            if (log.isInfoEnabled()) {                log.info("onFailedLogin method threw an " + "exception.  Logging and propagating original AuthenticationException.", e);            }        }                throw ae;    }    Subject loggedIn = createSubject(token, info, subject);    onSuccessfulLogin(token, info, loggedIn);    return loggedIn;}
64a49b6662827a648289280f6f0d4645ef8938151779f4d0aff6b614f866748f
onSuccessfulLogin
protected void onSuccessfulLogin(AuthenticationToken token, AuthenticationInfo info, Subject subject)
{    rememberMeSuccessfulLogin(token, info, subject);}
5799e35d07171c30f368c97f09b143d036180c221d7f3e653829ed09f0ae7ddf
onFailedLogin
protected void onFailedLogin(AuthenticationToken token, AuthenticationException ae, Subject subject)
{    rememberMeFailedLogin(token, ae, subject);}
1e890755ee2090c50ce9a0bce1fbab3966b345067da8bfe5bdcbb1f87a014c86
beforeLogout
protected void beforeLogout(Subject subject)
{    rememberMeLogout(subject);}
8e901e17183b526e54ba814b2d8197a8db7156f68a668111e5694559e9debc43
copy
protected SubjectContext copy(SubjectContext subjectContext)
{    return new DefaultSubjectContext(subjectContext);}
1def58e38e9964b7868cc3a36ee84dce1efd2fa4f33bd625322c484875955ed3
createSubject
public Subject createSubject(SubjectContext subjectContext)
{        SubjectContext context = copy(subjectContext);        context = ensureSecurityManager(context);                context = resolveSession(context);            context = resolvePrincipals(context);    Subject subject = doCreateSubject(context);                    save(subject);    return subject;}
07971a840ee555b22b1263cd935dc19a23ce024bf10ef156f0c862e18e107694
doCreateSubject
protected Subject doCreateSubject(SubjectContext context)
{    return getSubjectFactory().createSubject(context);}
df7c30d514ed0afa183c28e8dbe037963921d74be0eae2ac827fc631b2e6bc00
save
protected void save(Subject subject)
{    this.subjectDAO.save(subject);}
b79b897307d018f7adb0ee92aa233f65c2ce75f27e9bb1d5db037c81a3a16f4c
delete
protected void delete(Subject subject)
{    this.subjectDAO.delete(subject);}
533ccf3a3b70d9344902f66a9cd8d50d84ab27aa93149641cd455831c6adebc1
ensureSecurityManager
protected SubjectContext ensureSecurityManager(SubjectContext context)
{    if (context.resolveSecurityManager() != null) {        log.trace("Context already contains a SecurityManager instance.  Returning.");        return context;    }    log.trace("No SecurityManager found in context.  Adding self reference.");    context.setSecurityManager(this);    return context;}
21f174f28a6682ff945ebb533397dd2429e9e0695c4902ea66a1e4a19e2778bc
resolveSession
protected SubjectContext resolveSession(SubjectContext context)
{    if (context.resolveSession() != null) {        log.debug("Context already contains a session.  Returning.");        return context;    }    try {                        Session session = resolveContextSession(context);        if (session != null) {            context.setSession(session);        }    } catch (InvalidSessionException e) {        log.debug("Resolved SubjectContext context session is invalid.  Ignoring and creating an anonymous " + "(session-less) Subject instance.", e);    }    return context;}
f5b18e999b70dd4b450523fc3a17b16a8d90db2d0d18c47d7bd04e7827a4319a
resolveContextSession
protected Session resolveContextSession(SubjectContext context) throws InvalidSessionException
{    SessionKey key = getSessionKey(context);    if (key != null) {        return getSession(key);    }    return null;}
8a2a443730788a1e8711a23cb4e6babcd6a5a45b17c20d9d005bfb2346ae62fd
getSessionKey
protected SessionKey getSessionKey(SubjectContext context)
{    Serializable sessionId = context.getSessionId();    if (sessionId != null) {        return new DefaultSessionKey(sessionId);    }    return null;}
744afb2c4b31487a891d9ddda2a4ab70e8add4a8a4b69269b191bd4c6a76c8b8
isEmpty
private static boolean isEmpty(PrincipalCollection pc)
{    return pc == null || pc.isEmpty();}
052843590a0cbb6f768430f63be27f4d45de853c9e44a6dc99b98e2148c8d565
resolvePrincipals
protected SubjectContext resolvePrincipals(SubjectContext context)
{    PrincipalCollection principals = context.resolvePrincipals();    if (isEmpty(principals)) {        log.trace("No identity (PrincipalCollection) found in the context.  Looking for a remembered identity.");        principals = getRememberedIdentity(context);        if (!isEmpty(principals)) {            log.debug("Found remembered PrincipalCollection.  Adding to the context to be used " + "for subject construction by the SubjectFactory.");            context.setPrincipals(principals);                                                                                                                } else {            log.trace("No remembered identity found.  Returning original context.");        }    }    return context;}
f9df0572b0a250b0c430ebb22ba1459e6916ed41fbf4a700e066895d20a8fd28
createSessionContext
protected SessionContext createSessionContext(SubjectContext subjectContext)
{    DefaultSessionContext sessionContext = new DefaultSessionContext();    if (!CollectionUtils.isEmpty(subjectContext)) {        sessionContext.putAll(subjectContext);    }    Serializable sessionId = subjectContext.getSessionId();    if (sessionId != null) {        sessionContext.setSessionId(sessionId);    }    String host = subjectContext.resolveHost();    if (host != null) {        sessionContext.setHost(host);    }    return sessionContext;}
bab1ade66f0031b96e72e903a46f9d4c618e702662254b16a2895bf68d34cb62
logout
public void logout(Subject subject)
{    if (subject == null) {        throw new IllegalArgumentException("Subject method argument cannot be null.");    }    beforeLogout(subject);    PrincipalCollection principals = subject.getPrincipals();    if (principals != null && !principals.isEmpty()) {        if (log.isDebugEnabled()) {            log.debug("Logging out subject with primary principal {}", principals.getPrimaryPrincipal());        }        Authenticator authc = getAuthenticator();        if (authc instanceof LogoutAware) {            ((LogoutAware) authc).onLogout(principals);        }    }    try {        delete(subject);    } catch (Exception e) {        if (log.isDebugEnabled()) {            String msg = "Unable to cleanly unbind Subject.  Ignoring (logging out).";            log.debug(msg, e);        }    } finally {        try {            stopSession(subject);        } catch (Exception e) {            if (log.isDebugEnabled()) {                String msg = "Unable to cleanly stop Session for Subject [" + subject.getPrincipal() + "] " + "Ignoring (logging out).";                log.debug(msg, e);            }        }    }}
1c219c7b29f8c45e0a7e8dbadea70019ae07878c6c9f5445458befca0805c417
stopSession
protected void stopSession(Subject subject)
{    Session s = subject.getSession(false);    if (s != null) {        s.stop();    }}
71fe3c1d99a5a3ca04f04e77de4dbd2887384a053d4ee9c81fd04a93ee5493bc
unbind
protected void unbind(Subject subject)
{    delete(subject);}
a0c540ee8b6dd094b0f448f0b4aee35556a879f414bc2fc544c53621041ac43f
getRememberedIdentity
protected PrincipalCollection getRememberedIdentity(SubjectContext subjectContext)
{    RememberMeManager rmm = getRememberMeManager();    if (rmm != null) {        try {            return rmm.getRememberedPrincipals(subjectContext);        } catch (Exception e) {            if (log.isWarnEnabled()) {                String msg = "Delegate RememberMeManager instance of type [" + rmm.getClass().getName() + "] threw an exception during getRememberedPrincipals().";                log.warn(msg, e);            }        }    }    return null;}
197e9158b5eb362724187c5d892880e50645e621b973467764248799992e1724
isSessionStorageEnabled
public boolean isSessionStorageEnabled(Subject subject)
{    return (subject != null && subject.getSession(false) != null) || isSessionStorageEnabled();}
6d762bd70a9614dff7b9e4d163b6447f6295a522a7a5d0fd0bb6d815bd87b15f
isSessionStorageEnabled
public boolean isSessionStorageEnabled()
{    return sessionStorageEnabled;}
fa7ee1b80752995c5947a7ee5e01c968555fcf4a76ece81f0464ff94433b111a
setSessionStorageEnabled
public void setSessionStorageEnabled(boolean sessionStorageEnabled)
{    this.sessionStorageEnabled = sessionStorageEnabled;}
915637ba8673d2a8c5399073ffff367d008160c270386cf9e23c5c4308f41b9e
isSessionStorageEnabled
protected boolean isSessionStorageEnabled(Subject subject)
{    return getSessionStorageEvaluator().isSessionStorageEnabled(subject);}
2ffeba07f9894a8707af97c4818fd706efc4a8ac4de8fa71e69298b68d459f7f
getSessionStorageEvaluator
public SessionStorageEvaluator getSessionStorageEvaluator()
{    return sessionStorageEvaluator;}
a42a921d45f9eba93a50b7058a045c54d61d0dcda4a80844813b6ad18136a59b
setSessionStorageEvaluator
public void setSessionStorageEvaluator(SessionStorageEvaluator sessionStorageEvaluator)
{    this.sessionStorageEvaluator = sessionStorageEvaluator;}
2a50b9d84971f81386007a3213be64c51e550662074d18d2d2d280b760f6f91c
save
public Subject save(Subject subject)
{    if (isSessionStorageEnabled(subject)) {        saveToSession(subject);    } else {        log.trace("Session storage of subject state for Subject [{}] has been disabled: identity and " + "authentication state are expected to be initialized on every request or invocation.", subject);    }    return subject;}
2361eb3a10fefcc14d9987093147dc0c411d046ca0b07ab20d1b20620f351e22
saveToSession
protected void saveToSession(Subject subject)
{        mergePrincipals(subject);    mergeAuthenticationState(subject);}
744afb2c4b31487a891d9ddda2a4ab70e8add4a8a4b69269b191bd4c6a76c8b8
isEmpty
private static boolean isEmpty(PrincipalCollection pc)
{    return pc == null || pc.isEmpty();}
5ae722a7d17e680f14c449fe20a97e79461447cec6b902215c7ecab345b3f6d5
mergePrincipals
protected void mergePrincipals(Subject subject)
{        PrincipalCollection currentPrincipals = null;        if (subject.isRunAs() && subject instanceof DelegatingSubject) {        try {            Field field = DelegatingSubject.class.getDeclaredField("principals");            field.setAccessible(true);            currentPrincipals = (PrincipalCollection) field.get(subject);        } catch (Exception e) {            throw new IllegalStateException("Unable to access DelegatingSubject principals property.", e);        }    }    if (currentPrincipals == null || currentPrincipals.isEmpty()) {        currentPrincipals = subject.getPrincipals();    }    Session session = subject.getSession(false);    if (session == null) {        if (!isEmpty(currentPrincipals)) {            session = subject.getSession();            session.setAttribute(DefaultSubjectContext.PRINCIPALS_SESSION_KEY, currentPrincipals);        }        } else {        PrincipalCollection existingPrincipals = (PrincipalCollection) session.getAttribute(DefaultSubjectContext.PRINCIPALS_SESSION_KEY);        if (isEmpty(currentPrincipals)) {            if (!isEmpty(existingPrincipals)) {                session.removeAttribute(DefaultSubjectContext.PRINCIPALS_SESSION_KEY);            }                } else {            if (!currentPrincipals.equals(existingPrincipals)) {                session.setAttribute(DefaultSubjectContext.PRINCIPALS_SESSION_KEY, currentPrincipals);            }                }    }}
dca8241ba2dfeb3999b3e96b67f494b8eb6bb0cb4f70c3dc7993b109a05b6aec
mergeAuthenticationState
protected void mergeAuthenticationState(Subject subject)
{    Session session = subject.getSession(false);    if (session == null) {        if (subject.isAuthenticated()) {            session = subject.getSession();            session.setAttribute(DefaultSubjectContext.AUTHENTICATED_SESSION_KEY, Boolean.TRUE);        }        } else {        Boolean existingAuthc = (Boolean) session.getAttribute(DefaultSubjectContext.AUTHENTICATED_SESSION_KEY);        if (subject.isAuthenticated()) {            if (existingAuthc == null || !existingAuthc) {                session.setAttribute(DefaultSubjectContext.AUTHENTICATED_SESSION_KEY, Boolean.TRUE);            }                } else {            if (existingAuthc != null) {                                session.removeAttribute(DefaultSubjectContext.AUTHENTICATED_SESSION_KEY);            }                }    }}
5309646ca759cbd8e934f67e683ba311f5fb24c8b779ba12c450a2f51f6e651c
removeFromSession
protected void removeFromSession(Subject subject)
{    Session session = subject.getSession(false);    if (session != null) {        session.removeAttribute(DefaultSubjectContext.AUTHENTICATED_SESSION_KEY);        session.removeAttribute(DefaultSubjectContext.PRINCIPALS_SESSION_KEY);    }}
ce0bc52964065c4127c6c7781d192615a94ac7331fe7f98c91bbb7f1745b498a
delete
public void delete(Subject subject)
{    removeFromSession(subject);}
14ae44248da363eef52ae43e59184d7bf1d409ceab1ab983c65166d88de46d23
createSubject
public Subject createSubject(SubjectContext context)
{    SecurityManager securityManager = context.resolveSecurityManager();    Session session = context.resolveSession();    boolean sessionCreationEnabled = context.isSessionCreationEnabled();    PrincipalCollection principals = context.resolvePrincipals();    boolean authenticated = context.resolveAuthenticated();    String host = context.resolveHost();    return new DelegatingSubject(principals, authenticated, host, session, sessionCreationEnabled, securityManager);}
db23635f729c6df43d80e9433bba70ffe46fb8809bbd48599840348e813688ae
newSubjectInstance
protected Subject newSubjectInstance(PrincipalCollection principals, boolean authenticated, String host, Session session, SecurityManager securityManager)
{    return new DelegatingSubject(principals, authenticated, host, session, true, securityManager);}
ae88282d861c29d5a04bcff8702b4e0e18389b00049b12df4c095107ce4d3ea7
setRealm
public void setRealm(Realm realm)
{    if (realm == null) {        throw new IllegalArgumentException("Realm argument cannot be null");    }    Collection<Realm> realms = new ArrayList<Realm>(1);    realms.add(realm);    setRealms(realms);}
d1287b3e9ca3c96f596ed69b7a899c1cabbfbfa55b2c4bb35589866239ae2b9d
setRealms
public void setRealms(Collection<Realm> realms)
{    if (realms == null) {        throw new IllegalArgumentException("Realms collection argument cannot be null.");    }    if (realms.isEmpty()) {        throw new IllegalArgumentException("Realms collection argument cannot be empty.");    }    this.realms = realms;    afterRealmsSet();}
6ed613e0699c0afd7f6510ffc7e2dbe42b66d5105dda5e1b12311b035671469d
afterRealmsSet
protected void afterRealmsSet()
{    applyCacheManagerToRealms();    applyEventBusToRealms();}
951fa81a6232c4e37588785b56acedbe769005674365adb6e620e5b3605e4bd9
getRealms
public Collection<Realm> getRealms()
{    return realms;}
e19ec4cd4fb8efa8c2a6bb1665b571ea70392eb47585be9eff8bffb126cdf7e8
applyCacheManagerToRealms
protected void applyCacheManagerToRealms()
{    CacheManager cacheManager = getCacheManager();    Collection<Realm> realms = getRealms();    if (cacheManager != null && realms != null && !realms.isEmpty()) {        for (Realm realm : realms) {            if (realm instanceof CacheManagerAware) {                ((CacheManagerAware) realm).setCacheManager(cacheManager);            }        }    }}
10d8947595d61be6f877abd221ba85593d33d273a4f32f197aaab6ffac3cdac5
applyEventBusToRealms
protected void applyEventBusToRealms()
{    EventBus eventBus = getEventBus();    Collection<Realm> realms = getRealms();    if (eventBus != null && realms != null && !realms.isEmpty()) {        for (Realm realm : realms) {            if (realm instanceof EventBusAware) {                ((EventBusAware) realm).setEventBus(eventBus);            }        }    }}
198a1557d1dd223376fa795dd0031ea473ad4b12559f27aca88c2e064e04f213
afterCacheManagerSet
protected void afterCacheManagerSet()
{    super.afterCacheManagerSet();    applyCacheManagerToRealms();}
7aaeea1b57f37a5a14b4bbebf9fceb0ff2b9569d2aa871cc993e58ffa59117ea
afterEventBusSet
protected void afterEventBusSet()
{    super.afterEventBusSet();    applyEventBusToRealms();}
9cabd71a85d4928de1c9a46601c11d584f3e7522ee61146e1117d0d360a20b2e
destroy
public void destroy()
{    LifecycleUtils.destroy(getRealms());    this.realms = null;    super.destroy();}
26eba372800ee6d4b1ec38addc56249ef8efcb6bed332886bdf850e82507e367
setSessionManager
public void setSessionManager(SessionManager sessionManager)
{    this.sessionManager = sessionManager;    afterSessionManagerSet();}
e5ea61e578d50606430a19b255d5744d14f11b934a8d8f175285dc559c600a41
afterSessionManagerSet
protected void afterSessionManagerSet()
{    applyCacheManagerToSessionManager();    applyEventBusToSessionManager();}
02c9e025952ce141f6f798d37eca1344fa6a61ff1e6a57cfcd5a3c3fcdd073f7
getSessionManager
public SessionManager getSessionManager()
{    return this.sessionManager;}
198a1557d1dd223376fa795dd0031ea473ad4b12559f27aca88c2e064e04f213
afterCacheManagerSet
protected void afterCacheManagerSet()
{    super.afterCacheManagerSet();    applyCacheManagerToSessionManager();}
7aaeea1b57f37a5a14b4bbebf9fceb0ff2b9569d2aa871cc993e58ffa59117ea
afterEventBusSet
protected void afterEventBusSet()
{    super.afterEventBusSet();    applyEventBusToSessionManager();}
e3d01456ae61d7b600e50c94fec9d95a918722f1c87ac7be9efc7550c7311263
applyCacheManagerToSessionManager
protected void applyCacheManagerToSessionManager()
{    if (this.sessionManager instanceof CacheManagerAware) {        ((CacheManagerAware) this.sessionManager).setCacheManager(getCacheManager());    }}
29593b98ca4c08afa4b3b42300f3a01855b3267406fa8b1c5e2781d97751c4ec
applyEventBusToSessionManager
protected void applyEventBusToSessionManager()
{    EventBus eventBus = getEventBus();    if (eventBus != null && this.sessionManager instanceof EventBusAware) {        ((EventBusAware) this.sessionManager).setEventBus(eventBus);    }}
f047e6523fa6f59d1abb697a1490844e75a271170f990d7e62a9846b71e57fcd
start
public Session start(SessionContext context) throws AuthorizationException
{    return this.sessionManager.start(context);}
1ba0f6efa895eae1aa4848cdb5378fb11d6abf12a66aa92299e8647a5f706ae7
getSession
public Session getSession(SessionKey key) throws SessionException
{    return this.sessionManager.getSession(key);}
9cabd71a85d4928de1c9a46601c11d584f3e7522ee61146e1117d0d360a20b2e
destroy
public void destroy()
{    LifecycleUtils.destroy(getSessionManager());    this.sessionManager = null;    super.destroy();}
69c058c1aff28f01dc6c3a6f6b3d1897f6849254ff860177a0d203b970b688d7
setGroupRolesMap
public void setGroupRolesMap(Map<String, String> groupRolesMap)
{    this.groupRolesMap = groupRolesMap;}
74297bc9abcb1f0eee198e1ffbb79dc836a3856df82fded343746eda59c3dd0e
queryForAuthenticationInfo
protected AuthenticationInfo queryForAuthenticationInfo(AuthenticationToken token, LdapContextFactory ldapContextFactory) throws NamingException
{    UsernamePasswordToken upToken = (UsernamePasswordToken) token;        LdapContext ctx = null;    try {        ctx = ldapContextFactory.getLdapContext(upToken.getUsername(), String.valueOf(upToken.getPassword()));    } finally {        LdapUtils.closeContext(ctx);    }    return buildAuthenticationInfo(upToken.getUsername(), upToken.getPassword());}
5b5c5978ae4126390a33cb1cc0e04177c958715d4a83c271f893124043636755
buildAuthenticationInfo
protected AuthenticationInfo buildAuthenticationInfo(String username, char[] password)
{    return new SimpleAuthenticationInfo(username, password, getName());}
b75860148104dc4596680f863c0db2172fc3c91720d2a9e6e7c598ab33a495a2
queryForAuthorizationInfo
protected AuthorizationInfo queryForAuthorizationInfo(PrincipalCollection principals, LdapContextFactory ldapContextFactory) throws NamingException
{    String username = (String) getAvailablePrincipal(principals);        LdapContext ldapContext = ldapContextFactory.getSystemLdapContext();    Set<String> roleNames;    try {        roleNames = getRoleNamesForUser(username, ldapContext);    } finally {        LdapUtils.closeContext(ldapContext);    }    return buildAuthorizationInfo(roleNames);}
495215c904e7aa82e9a331e5a5cb6273855f8980ed32b7f422cdc07b9febd016
buildAuthorizationInfo
protected AuthorizationInfo buildAuthorizationInfo(Set<String> roleNames)
{    return new SimpleAuthorizationInfo(roleNames);}
71f426d3acf561ba5b0749398022be46872a82d35c67934ecee2ecb3d17e8683
getRoleNamesForUser
protected Set<String> getRoleNamesForUser(String username, LdapContext ldapContext) throws NamingException
{    Set<String> roleNames;    roleNames = new LinkedHashSet<String>();    SearchControls searchCtls = new SearchControls();    searchCtls.setSearchScope(SearchControls.SUBTREE_SCOPE);    String userPrincipalName = username;    if (principalSuffix != null) {        userPrincipalName += principalSuffix;    }    Object[] searchArguments = new Object[] { userPrincipalName };    NamingEnumeration answer = ldapContext.search(searchBase, searchFilter, searchArguments, searchCtls);    while (answer.hasMoreElements()) {        SearchResult sr = (SearchResult) answer.next();        if (log.isDebugEnabled()) {            log.debug("Retrieving group names for user [" + sr.getName() + "]");        }        Attributes attrs = sr.getAttributes();        if (attrs != null) {            NamingEnumeration ae = attrs.getAll();            while (ae.hasMore()) {                Attribute attr = (Attribute) ae.next();                if (attr.getID().equals("memberOf")) {                    Collection<String> groupNames = LdapUtils.getAllAttributeValues(attr);                    if (log.isDebugEnabled()) {                        log.debug("Groups found for user [" + username + "]: " + groupNames);                    }                    Collection<String> rolesForGroups = getRoleNamesForGroups(groupNames);                    roleNames.addAll(rolesForGroups);                }            }        }    }    return roleNames;}
a5b46a5e88c48fc990e3965ab4ae3a4f77a7c83cbe02e1377cae70ca5b5e1723
getRoleNamesForGroups
protected Collection<String> getRoleNamesForGroups(Collection<String> groupNames)
{    Set<String> roleNames = new HashSet<String>(groupNames.size());    if (groupRolesMap != null) {        for (String groupName : groupNames) {            String strRoleNames = groupRolesMap.get(groupName);            if (strRoleNames != null) {                for (String roleName : strRoleNames.split(ROLE_NAMES_DELIMETER)) {                    if (log.isDebugEnabled()) {                        log.debug("User is member of group [" + groupName + "] so adding role [" + roleName + "]");                    }                    roleNames.add(roleName);                }            }        }    }    return roleNames;}
e57c73de38996f9c120665f55c5d1fbb20c79639033cb8f2086ff88757005476
getCredentialsMatcher
public CredentialsMatcher getCredentialsMatcher()
{    return credentialsMatcher;}
86a06a6b8f16707ba25b2215fcdc6acff654e21ca8e0b674c72317f277b2bc43
setCredentialsMatcher
public void setCredentialsMatcher(CredentialsMatcher credentialsMatcher)
{    this.credentialsMatcher = credentialsMatcher;}
ac8b07d78304d3eafa4e88c2ce5710765e9311b36cba945b0a6a5c7ed6213bcb
getAuthenticationTokenClass
public Class getAuthenticationTokenClass()
{    return authenticationTokenClass;}
3187fdd5ea12cd98beedc81eeb918aab9593107793e9efd8eaf9c43f3701e560
setAuthenticationTokenClass
public void setAuthenticationTokenClass(Class<? extends AuthenticationToken> authenticationTokenClass)
{    this.authenticationTokenClass = authenticationTokenClass;}
579114163ed192d5612496d072d681943e69dfd0433ca1c9bbb639f655c35ae7
setAuthenticationCache
public void setAuthenticationCache(Cache<Object, AuthenticationInfo> authenticationCache)
{    this.authenticationCache = authenticationCache;}
7e0ef9f94834fc0770677605fc17453673b080167efc85e95174b04d4e2f8de5
getAuthenticationCache
public Cache<Object, AuthenticationInfo> getAuthenticationCache()
{    return this.authenticationCache;}
6a7eda29c4ddcd70d756e993c174e857cd17ba53f963abf324b76a0455d8713e
getAuthenticationCacheName
public String getAuthenticationCacheName()
{    return this.authenticationCacheName;}
bbf868f38155556228ff6414865930bfd6cff058cd4817c636bbb9609794e829
setAuthenticationCacheName
public void setAuthenticationCacheName(String authenticationCacheName)
{    this.authenticationCacheName = authenticationCacheName;}
cce310d66f8d07b8a6f442de4ac705b9d110d4d591d1525baccc96b4a02b21ec
isAuthenticationCachingEnabled
public boolean isAuthenticationCachingEnabled()
{    return this.authenticationCachingEnabled && isCachingEnabled();}
39f5c69969aa4870779581862cf9c2254d41b059ab40e3883e56d3f2f41dbfe8
setAuthenticationCachingEnabled
public void setAuthenticationCachingEnabled(boolean authenticationCachingEnabled)
{    this.authenticationCachingEnabled = authenticationCachingEnabled;    if (authenticationCachingEnabled) {        setCachingEnabled(true);    }}
f498f22eaf0816bf385a43365651d1b6d0455905fdd2d6be01ceefeb84e8f432
setName
public void setName(String name)
{    super.setName(name);    String authcCacheName = this.authenticationCacheName;    if (authcCacheName != null && authcCacheName.startsWith(getClass().getName())) {                        this.authenticationCacheName = name + DEFAULT_AUTHENTICATION_CACHE_SUFFIX;    }}
347204a6259b43636ce3e82255cd8e22c7e879cd3774506adc1867e8510e9f02
supports
public boolean supports(AuthenticationToken token)
{    return token != null && getAuthenticationTokenClass().isAssignableFrom(token.getClass());}
9fd9438674c528d872cd20e15a76849e481724a1714df5eabc6d00dba670ba35
init
public final void init()
{        getAvailableAuthenticationCache();    onInit();}
1a67e3209bd108e785c83f678bbaf2efc1a2cc2192fc6a4bf60bb7924700d74a
onInit
protected void onInit()
{}
198a1557d1dd223376fa795dd0031ea473ad4b12559f27aca88c2e064e04f213
afterCacheManagerSet
protected void afterCacheManagerSet()
{        getAvailableAuthenticationCache();}
a9b95fdadf75b1e7f7d1d7a1888c037476cf682a7ef0bfdf230a4355c00f0ace
getAvailableAuthenticationCache
private Cache<Object, AuthenticationInfo> getAvailableAuthenticationCache()
{    Cache<Object, AuthenticationInfo> cache = getAuthenticationCache();    boolean authcCachingEnabled = isAuthenticationCachingEnabled();    if (cache == null && authcCachingEnabled) {        cache = getAuthenticationCacheLazy();    }    return cache;}
2544f8dcc8015a4e4f9e05fdf181e06500788664e9256764716b4e15fc9586db
getAuthenticationCacheLazy
private Cache<Object, AuthenticationInfo> getAuthenticationCacheLazy()
{    if (this.authenticationCache == null) {        log.trace("No authenticationCache instance set.  Checking for a cacheManager...");        CacheManager cacheManager = getCacheManager();        if (cacheManager != null) {            String cacheName = getAuthenticationCacheName();            log.debug("CacheManager [{}] configured.  Building authentication cache '{}'", cacheManager, cacheName);            this.authenticationCache = cacheManager.getCache(cacheName);        }    }    return this.authenticationCache;}
f617e33f6bc855240d0f387e09a8d322bb5c5db1fb98a5e21988b9be2f46de0c
getCachedAuthenticationInfo
private AuthenticationInfo getCachedAuthenticationInfo(AuthenticationToken token)
{    AuthenticationInfo info = null;    Cache<Object, AuthenticationInfo> cache = getAvailableAuthenticationCache();    if (cache != null && token != null) {        log.trace("Attempting to retrieve the AuthenticationInfo from cache.");        Object key = getAuthenticationCacheKey(token);        info = cache.get(key);        if (info == null) {            log.trace("No AuthorizationInfo found in cache for key [{}]", key);        } else {            log.trace("Found cached AuthorizationInfo for key [{}]", key);        }    }    return info;}
5ee16600f947f76502412c368e4ba929970198218e356255c85cee3eed349b2e
cacheAuthenticationInfoIfPossible
private void cacheAuthenticationInfoIfPossible(AuthenticationToken token, AuthenticationInfo info)
{    if (!isAuthenticationCachingEnabled(token, info)) {        log.debug("AuthenticationInfo caching is disabled for info [{}].  Submitted token: [{}].", info, token);                return;    }    Cache<Object, AuthenticationInfo> cache = getAvailableAuthenticationCache();    if (cache != null) {        Object key = getAuthenticationCacheKey(token);        cache.put(key, info);        log.trace("Cached AuthenticationInfo for continued authentication.  key=[{}], value=[{}].", key, info);    }}
2a915e538074ed7937380dffa5740dae9f1a1b6c058a9a58707fa6cff6a59224
isAuthenticationCachingEnabled
protected boolean isAuthenticationCachingEnabled(AuthenticationToken token, AuthenticationInfo info)
{    return isAuthenticationCachingEnabled();}
a691b998a454dbf952e0c930c47958db60133de0f462d901bad2de31c36d6c25
getAuthenticationInfo
public final AuthenticationInfo getAuthenticationInfo(AuthenticationToken token) throws AuthenticationException
{    AuthenticationInfo info = getCachedAuthenticationInfo(token);    if (info == null) {                info = doGetAuthenticationInfo(token);        log.debug("Looked up AuthenticationInfo [{}] from doGetAuthenticationInfo", info);        if (token != null && info != null) {            cacheAuthenticationInfoIfPossible(token, info);        }    } else {        log.debug("Using cached authentication info [{}] to perform credentials matching.", info);    }    if (info != null) {        assertCredentialsMatch(token, info);    } else {        log.debug("No AuthenticationInfo found for submitted AuthenticationToken [{}].  Returning null.", token);    }    return info;}
2b68e1463176d8912a85883a5ff1d8a22d630cb47d0d538b0743162ded8ae3c3
assertCredentialsMatch
protected void assertCredentialsMatch(AuthenticationToken token, AuthenticationInfo info) throws AuthenticationException
{    CredentialsMatcher cm = getCredentialsMatcher();    if (cm != null) {        if (!cm.doCredentialsMatch(token, info)) {                        String msg = "Submitted credentials for token [" + token + "] did not match the expected credentials.";            throw new IncorrectCredentialsException(msg);        }    } else {        throw new AuthenticationException("A CredentialsMatcher must be configured in order to verify " + "credentials during authentication.  If you do not wish for credentials to be examined, you " + "can configure an " + AllowAllCredentialsMatcher.class.getName() + " instance.");    }}
fbeecdd71b602888ba3424cbfe6712fc584e638365c9c7af46f2c66a63f5476f
getAuthenticationCacheKey
protected Object getAuthenticationCacheKey(AuthenticationToken token)
{    return token != null ? token.getPrincipal() : null;}
1db5aed7ff02f8b7def998082a18ac2d2e367f4b7d50384a0d6b4256b3c3b929
getAuthenticationCacheKey
protected Object getAuthenticationCacheKey(PrincipalCollection principals)
{    return getAvailablePrincipal(principals);}
e136d48ae8b4933006ee866bb86dbd826c10372052b1bae83c92ef9d9ca82402
doClearCache
protected void doClearCache(PrincipalCollection principals)
{    super.doClearCache(principals);    clearCachedAuthenticationInfo(principals);}
744afb2c4b31487a891d9ddda2a4ab70e8add4a8a4b69269b191bd4c6a76c8b8
isEmpty
private static boolean isEmpty(PrincipalCollection pc)
{    return pc == null || pc.isEmpty();}
5084b0233c35b36d8987299e0af28137cdacdb8ed9ff28f2e0377bd9ae644c53
clearCachedAuthenticationInfo
protected void clearCachedAuthenticationInfo(PrincipalCollection principals)
{    if (!isEmpty(principals)) {        Cache<Object, AuthenticationInfo> cache = getAvailableAuthenticationCache();                if (cache != null) {            Object key = getAuthenticationCacheKey(principals);            cache.remove(key);        }    }}
f498f22eaf0816bf385a43365651d1b6d0455905fdd2d6be01ceefeb84e8f432
setName
public void setName(String name)
{    super.setName(name);    String authzCacheName = this.authorizationCacheName;    if (authzCacheName != null && authzCacheName.startsWith(getClass().getName())) {                        this.authorizationCacheName = name + DEFAULT_AUTHORIZATION_CACHE_SUFFIX;    }}
113059e1cca26f0d09415ca3114ffc04611f85ac28f88ab73efdb3533ddd74c2
setAuthorizationCache
public void setAuthorizationCache(Cache<Object, AuthorizationInfo> authorizationCache)
{    this.authorizationCache = authorizationCache;}
6de6bd3c98f493cc1896e08c2bc889f25a5ada86b5e8aa28d41afab37badd8c9
getAuthorizationCache
public Cache<Object, AuthorizationInfo> getAuthorizationCache()
{    return this.authorizationCache;}
6ee0073bed3815e6fa5d86b52453367cf70f8fb8c7e8a6f143c7f3cfc5078343
getAuthorizationCacheName
public String getAuthorizationCacheName()
{    return authorizationCacheName;}
f576094a54f424c4902544fb0f70120b303d51e716f1bd4b499c0831b2fd071c
setAuthorizationCacheName
public void setAuthorizationCacheName(String authorizationCacheName)
{    this.authorizationCacheName = authorizationCacheName;}
5c7312c8da96a746e1d3a80b1e548d659103b0d7670611be8d6d75c07de88b48
isAuthorizationCachingEnabled
public boolean isAuthorizationCachingEnabled()
{    return isCachingEnabled() && authorizationCachingEnabled;}
74b65361b1208edfe3296a28b36093d073a2247445c3255ec8e8eea72cd478ef
setAuthorizationCachingEnabled
public void setAuthorizationCachingEnabled(boolean authenticationCachingEnabled)
{    this.authorizationCachingEnabled = authenticationCachingEnabled;    if (authenticationCachingEnabled) {        setCachingEnabled(true);    }}
0bf26387380f47bbe90f7d2a1329dbdda5860eca4e689a8f66fe4bff08f67124
getPermissionResolver
public PermissionResolver getPermissionResolver()
{    return permissionResolver;}
8333cbb4518349c264b0615fb620db0422c748c04888b9f6477b9c802a2e9c04
setPermissionResolver
public void setPermissionResolver(PermissionResolver permissionResolver)
{    if (permissionResolver == null)        throw new IllegalArgumentException("Null PermissionResolver is not allowed");    this.permissionResolver = permissionResolver;}
c80edb6ab3dd516e326f6fea8e168d012fe6e13770e6cb790ae633c6673a3a77
getRolePermissionResolver
public RolePermissionResolver getRolePermissionResolver()
{    return permissionRoleResolver;}
ab76d5a1b5919da8264a61f8c99dbf3c43ef1c572450caa1d549e6082dc4dfab
setRolePermissionResolver
public void setRolePermissionResolver(RolePermissionResolver permissionRoleResolver)
{    this.permissionRoleResolver = permissionRoleResolver;}
1a67e3209bd108e785c83f678bbaf2efc1a2cc2192fc6a4bf60bb7924700d74a
onInit
protected void onInit()
{    super.onInit();        getAvailableAuthorizationCache();}
198a1557d1dd223376fa795dd0031ea473ad4b12559f27aca88c2e064e04f213
afterCacheManagerSet
protected void afterCacheManagerSet()
{    super.afterCacheManagerSet();        getAvailableAuthorizationCache();}
5d3a5829e2724c33c1560136eb052d1f27365c0acb7099b2332e84692abb32c2
getAuthorizationCacheLazy
private Cache<Object, AuthorizationInfo> getAuthorizationCacheLazy()
{    if (this.authorizationCache == null) {        if (log.isDebugEnabled()) {            log.debug("No authorizationCache instance set.  Checking for a cacheManager...");        }        CacheManager cacheManager = getCacheManager();        if (cacheManager != null) {            String cacheName = getAuthorizationCacheName();            if (log.isDebugEnabled()) {                log.debug("CacheManager [" + cacheManager + "] has been configured.  Building " + "authorization cache named [" + cacheName + "]");            }            this.authorizationCache = cacheManager.getCache(cacheName);        } else {            if (log.isDebugEnabled()) {                log.debug("No cache or cacheManager properties have been set.  Authorization cache cannot " + "be obtained.");            }        }    }    return this.authorizationCache;}
23b062a862576d4d1cf591c6270e80adc9089f63c83db959ff243239d0a32b0c
getAvailableAuthorizationCache
private Cache<Object, AuthorizationInfo> getAvailableAuthorizationCache()
{    Cache<Object, AuthorizationInfo> cache = getAuthorizationCache();    if (cache == null && isAuthorizationCachingEnabled()) {        cache = getAuthorizationCacheLazy();    }    return cache;}
82bd7aac10c0f34348066adcfca9a5190475fa39a10d7a1d291913cffae5aea4
getAuthorizationInfo
protected AuthorizationInfo getAuthorizationInfo(PrincipalCollection principals)
{    if (principals == null) {        return null;    }    AuthorizationInfo info = null;    if (log.isTraceEnabled()) {        log.trace("Retrieving AuthorizationInfo for principals [" + principals + "]");    }    Cache<Object, AuthorizationInfo> cache = getAvailableAuthorizationCache();    if (cache != null) {        if (log.isTraceEnabled()) {            log.trace("Attempting to retrieve the AuthorizationInfo from cache.");        }        Object key = getAuthorizationCacheKey(principals);        info = cache.get(key);        if (log.isTraceEnabled()) {            if (info == null) {                log.trace("No AuthorizationInfo found in cache for principals [" + principals + "]");            } else {                log.trace("AuthorizationInfo found in cache for principals [" + principals + "]");            }        }    }    if (info == null) {                info = doGetAuthorizationInfo(principals);                if (info != null && cache != null) {            if (log.isTraceEnabled()) {                log.trace("Caching authorization info for principals: [" + principals + "].");            }            Object key = getAuthorizationCacheKey(principals);            cache.put(key, info);        }    }    return info;}
11cbb332f813023c75d34af26feb2675be66a06d8362a4d3bfac175e905c4add
getAuthorizationCacheKey
protected Object getAuthorizationCacheKey(PrincipalCollection principals)
{    return principals;}
0c48b698e05f5d0efc176f0618d84ec2a3a274d7920461da3a4bb5e668a95af9
clearCachedAuthorizationInfo
protected void clearCachedAuthorizationInfo(PrincipalCollection principals)
{    if (principals == null) {        return;    }    Cache<Object, AuthorizationInfo> cache = getAvailableAuthorizationCache();        if (cache != null) {        Object key = getAuthorizationCacheKey(principals);        cache.remove(key);    }}
1a0609737dcd394805c7d8427c183b5b28140b5ce9eb8c65543c1c44878daec7
getPermissions
protected Collection<Permission> getPermissions(AuthorizationInfo info)
{    Set<Permission> permissions = new HashSet<Permission>();    if (info != null) {        Collection<Permission> perms = info.getObjectPermissions();        if (!CollectionUtils.isEmpty(perms)) {            permissions.addAll(perms);        }        perms = resolvePermissions(info.getStringPermissions());        if (!CollectionUtils.isEmpty(perms)) {            permissions.addAll(perms);        }        perms = resolveRolePermissions(info.getRoles());        if (!CollectionUtils.isEmpty(perms)) {            permissions.addAll(perms);        }    }    if (permissions.isEmpty()) {        return Collections.emptySet();    } else {        return Collections.unmodifiableSet(permissions);    }}
8ac4465d397b9616a12a671087fa830e547e3008933970c361b364509cf475e3
resolvePermissions
private Collection<Permission> resolvePermissions(Collection<String> stringPerms)
{    Collection<Permission> perms = Collections.emptySet();    PermissionResolver resolver = getPermissionResolver();    if (resolver != null && !CollectionUtils.isEmpty(stringPerms)) {        perms = new LinkedHashSet<Permission>(stringPerms.size());        for (String strPermission : stringPerms) {            if (StringUtils.clean(strPermission) != null) {                Permission permission = resolver.resolvePermission(strPermission);                perms.add(permission);            }        }    }    return perms;}
3f478ad31633b32cc55acf09c9580e882cfaccadec4e1b80a018d10a1b8a3695
resolveRolePermissions
private Collection<Permission> resolveRolePermissions(Collection<String> roleNames)
{    Collection<Permission> perms = Collections.emptySet();    RolePermissionResolver resolver = getRolePermissionResolver();    if (resolver != null && !CollectionUtils.isEmpty(roleNames)) {        perms = new LinkedHashSet<Permission>(roleNames.size());        for (String roleName : roleNames) {            Collection<Permission> resolved = resolver.resolvePermissionsInRole(roleName);            if (!CollectionUtils.isEmpty(resolved)) {                perms.addAll(resolved);            }        }    }    return perms;}
b045b946d9ccd7af32e0e8348ab5d6cf52cad0caca6e37305ca04b0924aa9973
isPermitted
public boolean isPermitted(PrincipalCollection principals, String permission)
{    Permission p = getPermissionResolver().resolvePermission(permission);    return isPermitted(principals, p);}
438a97ffc49877136761725a38f6b4dfbc4651416169eb87eff0209823624bce
isPermitted
public boolean isPermitted(PrincipalCollection principals, Permission permission)
{    AuthorizationInfo info = getAuthorizationInfo(principals);    return isPermitted(permission, info);}
583678dee208f0c5b19b06760e664730b9c39c18d817ba899958e4a2b7a45d53
isPermitted
protected boolean isPermitted(Permission permission, AuthorizationInfo info)
{    Collection<Permission> perms = getPermissions(info);    if (perms != null && !perms.isEmpty()) {        for (Permission perm : perms) {            if (perm.implies(permission)) {                return true;            }        }    }    return false;}
3f37ac9f953230a6b6ca137bd3e0ec13b418bb64f0b903c841cb1e221bde5d56
isPermitted
public boolean[] isPermitted(PrincipalCollection subjectIdentifier, String... permissions)
{    List<Permission> perms = new ArrayList<Permission>(permissions.length);    for (String permString : permissions) {        perms.add(getPermissionResolver().resolvePermission(permString));    }    return isPermitted(subjectIdentifier, perms);}
c84f86de3a9bc6f9df7214f7a84708c8ef37e8fa9da985ffebca471c6592dc87
isPermitted
public boolean[] isPermitted(PrincipalCollection principals, List<Permission> permissions)
{    AuthorizationInfo info = getAuthorizationInfo(principals);    return isPermitted(permissions, info);}
0fae3c5bdb244a7a180f9df6480549240107a39c26242a1b3f7432583f56a5e6
isPermitted
protected boolean[] isPermitted(List<Permission> permissions, AuthorizationInfo info)
{    boolean[] result;    if (permissions != null && !permissions.isEmpty()) {        int size = permissions.size();        result = new boolean[size];        int i = 0;        for (Permission p : permissions) {            result[i++] = isPermitted(p, info);        }    } else {        result = new boolean[0];    }    return result;}
afe04ffea025e3b1d38124413dbd02ef5fc393e9cb95cae82ffa372b19eb1cd5
isPermittedAll
public boolean isPermittedAll(PrincipalCollection subjectIdentifier, String... permissions)
{    if (permissions != null && permissions.length > 0) {        Collection<Permission> perms = new ArrayList<Permission>(permissions.length);        for (String permString : permissions) {            perms.add(getPermissionResolver().resolvePermission(permString));        }        return isPermittedAll(subjectIdentifier, perms);    }    return false;}
15e6391d94f97118548027cb9d4698005febd3789add39a852d726f36d098187
isPermittedAll
public boolean isPermittedAll(PrincipalCollection principal, Collection<Permission> permissions)
{    AuthorizationInfo info = getAuthorizationInfo(principal);    return info != null && isPermittedAll(permissions, info);}
bc599a48ea8b6110cdb42692ec241190836e77b87f23c51a36917a07676e0b23
isPermittedAll
protected boolean isPermittedAll(Collection<Permission> permissions, AuthorizationInfo info)
{    if (permissions != null && !permissions.isEmpty()) {        for (Permission p : permissions) {            if (!isPermitted(p, info)) {                return false;            }        }    }    return true;}
9f7bdee8d8b6a0fba683413139715f3bf4ad9d915c66b5a808cf6f20e2e48732
checkPermission
public void checkPermission(PrincipalCollection subjectIdentifier, String permission) throws AuthorizationException
{    Permission p = getPermissionResolver().resolvePermission(permission);    checkPermission(subjectIdentifier, p);}
774590a431994d5da69c6eb2a6a5f6d5738413f0d3cf533597cbc18246fe819a
checkPermission
public void checkPermission(PrincipalCollection principal, Permission permission) throws AuthorizationException
{    AuthorizationInfo info = getAuthorizationInfo(principal);    checkPermission(permission, info);}
c26fc10ce01b23596764bc6daef3a2789b45a20eb03900e3ce81cf3c8a0e8c5d
checkPermission
protected void checkPermission(Permission permission, AuthorizationInfo info)
{    if (!isPermitted(permission, info)) {        String msg = "User is not permitted [" + permission + "]";        throw new UnauthorizedException(msg);    }}
3218ac47c562de9c9937e982883c9af7f808fde409db04333d1c2732c2fd4751
checkPermissions
public void checkPermissions(PrincipalCollection subjectIdentifier, String... permissions) throws AuthorizationException
{    if (permissions != null) {        for (String permString : permissions) {            checkPermission(subjectIdentifier, permString);        }    }}
75b9ce397ef5899e47e1e5dc51f84719b72719d37f58222ba0c58445a2e78c50
checkPermissions
public void checkPermissions(PrincipalCollection principal, Collection<Permission> permissions) throws AuthorizationException
{    AuthorizationInfo info = getAuthorizationInfo(principal);    checkPermissions(permissions, info);}
3c69d84eb87b68621971b3ac6acfa5d80193204326ec77cef37ec392aaf1c6cd
checkPermissions
protected void checkPermissions(Collection<Permission> permissions, AuthorizationInfo info)
{    if (permissions != null && !permissions.isEmpty()) {        for (Permission p : permissions) {            checkPermission(p, info);        }    }}
dc620a273508da2ac35a72050e02da32cfffa25ebc5d71b6c8d3a56601eaf3ba
hasRole
public boolean hasRole(PrincipalCollection principal, String roleIdentifier)
{    AuthorizationInfo info = getAuthorizationInfo(principal);    return hasRole(roleIdentifier, info);}
c7b10c56d77a77819db2f4461c07d76df987f5269ea8f26d1eb2ab491c724008
hasRole
protected boolean hasRole(String roleIdentifier, AuthorizationInfo info)
{    return info != null && info.getRoles() != null && info.getRoles().contains(roleIdentifier);}
3a375407aa2cc9fc9c4a86bbe40d08851f6b053a6feb4384d11bec4e87b46149
hasRoles
public boolean[] hasRoles(PrincipalCollection principal, List<String> roleIdentifiers)
{    AuthorizationInfo info = getAuthorizationInfo(principal);    boolean[] result = new boolean[roleIdentifiers != null ? roleIdentifiers.size() : 0];    if (info != null) {        result = hasRoles(roleIdentifiers, info);    }    return result;}
dedd44d8f7fc51b12c9800f34ef1cc21d3b1eb1c57ddf886542f7403103c88d0
hasRoles
protected boolean[] hasRoles(List<String> roleIdentifiers, AuthorizationInfo info)
{    boolean[] result;    if (roleIdentifiers != null && !roleIdentifiers.isEmpty()) {        int size = roleIdentifiers.size();        result = new boolean[size];        int i = 0;        for (String roleName : roleIdentifiers) {            result[i++] = hasRole(roleName, info);        }    } else {        result = new boolean[0];    }    return result;}
ab1cb53a6234a9b1db80ab37ef5d8f0d8fa66df4c41e365d8cf15a4fe1c77d14
hasAllRoles
public boolean hasAllRoles(PrincipalCollection principal, Collection<String> roleIdentifiers)
{    AuthorizationInfo info = getAuthorizationInfo(principal);    return info != null && hasAllRoles(roleIdentifiers, info);}
f5632af15e7f21df6a50e8686565f6a333a127877dedcd7bd09a0afbe560ced2
hasAllRoles
private boolean hasAllRoles(Collection<String> roleIdentifiers, AuthorizationInfo info)
{    if (roleIdentifiers != null && !roleIdentifiers.isEmpty()) {        for (String roleName : roleIdentifiers) {            if (!hasRole(roleName, info)) {                return false;            }        }    }    return true;}
5598d26a78a1a490f7ffe723ab4efd3c7bfd0df206a446709b8d5f8b686630d3
checkRole
public void checkRole(PrincipalCollection principal, String role) throws AuthorizationException
{    AuthorizationInfo info = getAuthorizationInfo(principal);    checkRole(role, info);}
09a05b0b7b1fdb8017d618d258ae7d96d5f5827607661e9043cd923c49433b78
checkRole
protected void checkRole(String role, AuthorizationInfo info)
{    if (!hasRole(role, info)) {        String msg = "User does not have role [" + role + "]";        throw new UnauthorizedException(msg);    }}
5ea40bd4ae4358a4dd7089eae4a1b21037eca1c8c7cfe4c3830fae94d636e31d
checkRoles
public void checkRoles(PrincipalCollection principal, Collection<String> roles) throws AuthorizationException
{    AuthorizationInfo info = getAuthorizationInfo(principal);    checkRoles(roles, info);}
86f4c7764458fbe26adfecce500578c7b85b44826ae85a4f8e11ac74efc1b375
checkRoles
public void checkRoles(PrincipalCollection principal, String... roles) throws AuthorizationException
{    checkRoles(principal, Arrays.asList(roles));}
1b5530ad85e2e959d1e9376d1b8d05b2c906a276be327f87bdf6bd53d867cdd0
checkRoles
protected void checkRoles(Collection<String> roles, AuthorizationInfo info)
{    if (roles != null && !roles.isEmpty()) {        for (String roleName : roles) {            checkRole(roleName, info);        }    }}
e136d48ae8b4933006ee866bb86dbd826c10372052b1bae83c92ef9d9ca82402
doClearCache
protected void doClearCache(PrincipalCollection principals)
{    super.doClearCache(principals);    clearCachedAuthorizationInfo(principals);}
d235282ed55f1ba3e1df53154817dddfd84fb452c359aef3094af8724d330661
getCacheManager
public CacheManager getCacheManager()
{    return this.cacheManager;}
693625768ebe9598acbfb2af178abc5b90702d7019d784975fa548c3afa3ed99
setCacheManager
public void setCacheManager(CacheManager cacheManager)
{    this.cacheManager = cacheManager;    afterCacheManagerSet();}
a86feb20b233c9fefada346d2a3f0ba42fe9a794aa4648cc8bb2dc20f6409694
isCachingEnabled
public boolean isCachingEnabled()
{    return cachingEnabled;}
9f31c2f1c0865ae0230c640ebcbda4446d639f362de91d85396adcde74356276
setCachingEnabled
public void setCachingEnabled(boolean cachingEnabled)
{    this.cachingEnabled = cachingEnabled;}
239fbe3eb64d679cbac1161825b07d6a8436ead3c6c3d140d9caec2275827023
getName
public String getName()
{    return name;}
f498f22eaf0816bf385a43365651d1b6d0455905fdd2d6be01ceefeb84e8f432
setName
public void setName(String name)
{    this.name = name;}
198a1557d1dd223376fa795dd0031ea473ad4b12559f27aca88c2e064e04f213
afterCacheManagerSet
protected void afterCacheManagerSet()
{}
6a60486de65510ea303d404f5173f7b287537b54a27c208a9e0fd62cbc9a5b98
onLogout
public void onLogout(PrincipalCollection principals)
{    clearCache(principals);}
744afb2c4b31487a891d9ddda2a4ab70e8add4a8a4b69269b191bd4c6a76c8b8
isEmpty
private static boolean isEmpty(PrincipalCollection pc)
{    return pc == null || pc.isEmpty();}
a37bf10d0cdf172deda7105e133ba338eaa16b0b870890b8d9d31b3b9f4ddc84
clearCache
protected void clearCache(PrincipalCollection principals)
{    if (!isEmpty(principals)) {        doClearCache(principals);        log.trace("Cleared cache entries for account with principals [{}]", principals);    }}
e136d48ae8b4933006ee866bb86dbd826c10372052b1bae83c92ef9d9ca82402
doClearCache
protected void doClearCache(PrincipalCollection principals)
{}
5c55fe2dd7380ea72e1073753bf562caa0ef4ddb93d3eda4586a2afd0d1f9026
getAvailablePrincipal
protected Object getAvailablePrincipal(PrincipalCollection principals)
{    Object primary = null;    if (!isEmpty(principals)) {        Collection thisPrincipals = principals.fromRealm(getName());        if (!CollectionUtils.isEmpty(thisPrincipals)) {            primary = thisPrincipals.iterator().next();        } else {                        primary = principals.getPrimaryPrincipal();        }    }    return primary;}
057cead9360279fc7a4b4e9a61414aa24e6f8181e6320f93d280d56de42500fd
setDataSource
public void setDataSource(DataSource dataSource)
{    this.dataSource = dataSource;}
5d5fef23ec1411645d8e0e6383f44c5783894780817f34dc247bc7018c5955bb
setAuthenticationQuery
public void setAuthenticationQuery(String authenticationQuery)
{    this.authenticationQuery = authenticationQuery;}
d23e0e42751b713134e85e98fe30bd7feb4aae80db8908f5c5f4fc6e25498f51
setUserRolesQuery
public void setUserRolesQuery(String userRolesQuery)
{    this.userRolesQuery = userRolesQuery;}
bd1530543d0c584b8d309aeaa17ed6573c87d19cf2f6d1d62ee510c7bb960cd4
setPermissionsQuery
public void setPermissionsQuery(String permissionsQuery)
{    this.permissionsQuery = permissionsQuery;}
f45c332d7d3240b2d948ad00f301b7eabb5b2c892d73bc086bff4ca76ee6980c
setPermissionsLookupEnabled
public void setPermissionsLookupEnabled(boolean permissionsLookupEnabled)
{    this.permissionsLookupEnabled = permissionsLookupEnabled;}
2ed59bc4d44b3649453e4ad6e379148cffc2ad2f086b5e811a77b638523fb6db
setSaltStyle
public void setSaltStyle(SaltStyle saltStyle)
{    this.saltStyle = saltStyle;    if (saltStyle == SaltStyle.COLUMN && authenticationQuery.equals(DEFAULT_AUTHENTICATION_QUERY)) {        authenticationQuery = DEFAULT_SALTED_AUTHENTICATION_QUERY;    }}
03d05c60769ebb677484c7d0444953e16ef011134fd8225608227680cdca6149
setSaltIsBase64Encoded
public void setSaltIsBase64Encoded(boolean saltIsBase64Encoded)
{    this.saltIsBase64Encoded = saltIsBase64Encoded;}
04d12ebf29bfe2a4c8158a941df0d9788366bab7e1f094a3057e32147ffbeb42
doGetAuthenticationInfo
protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException
{    UsernamePasswordToken upToken = (UsernamePasswordToken) token;    String username = upToken.getUsername();        if (username == null) {        throw new AccountException("Null usernames are not allowed by this realm.");    }    Connection conn = null;    SimpleAuthenticationInfo info = null;    try {        conn = dataSource.getConnection();        String password = null;        String salt = null;        switch(saltStyle) {            case NO_SALT:                password = getPasswordForUser(conn, username)[0];                break;            case CRYPT:                                throw new ConfigurationException("Not implemented yet");                        case COLUMN:                String[] queryResults = getPasswordForUser(conn, username);                password = queryResults[0];                salt = queryResults[1];                break;            case EXTERNAL:                password = getPasswordForUser(conn, username)[0];                salt = getSaltForUser(username);        }        if (password == null) {            throw new UnknownAccountException("No account found for user [" + username + "]");        }        info = new SimpleAuthenticationInfo(username, password.toCharArray(), getName());        if (salt != null) {            if (saltStyle == SaltStyle.COLUMN && saltIsBase64Encoded) {                info.setCredentialsSalt(ByteSource.Util.bytes(Base64.decode(salt)));            } else {                info.setCredentialsSalt(ByteSource.Util.bytes(salt));            }        }    } catch (SQLException e) {        final String message = "There was a SQL error while authenticating user [" + username + "]";        if (log.isErrorEnabled()) {            log.error(message, e);        }                throw new AuthenticationException(message, e);    } finally {        JdbcUtils.closeConnection(conn);    }    return info;}
6ff941172d2090eec4d2784887c082d89b9bc07d8e876f6799b9ff8d2f66e951
getPasswordForUser
private String[] getPasswordForUser(Connection conn, String username) throws SQLException
{    String[] result;    boolean returningSeparatedSalt = false;    switch(saltStyle) {        case NO_SALT:        case CRYPT:        case EXTERNAL:            result = new String[1];            break;        default:            result = new String[2];            returningSeparatedSalt = true;    }    PreparedStatement ps = null;    ResultSet rs = null;    try {        ps = conn.prepareStatement(authenticationQuery);        ps.setString(1, username);                rs = ps.executeQuery();                boolean foundResult = false;        while (rs.next()) {                        if (foundResult) {                throw new AuthenticationException("More than one user row found for user [" + username + "]. Usernames must be unique.");            }            result[0] = rs.getString(1);            if (returningSeparatedSalt) {                result[1] = rs.getString(2);            }            foundResult = true;        }    } finally {        JdbcUtils.closeResultSet(rs);        JdbcUtils.closeStatement(ps);    }    return result;}
7d82f766d0b50c20008bf1b1d8345ac21d4827d0c5115d358a603d4f11fb64f3
doGetAuthorizationInfo
protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals)
{        if (principals == null) {        throw new AuthorizationException("PrincipalCollection method argument cannot be null.");    }    String username = (String) getAvailablePrincipal(principals);    Connection conn = null;    Set<String> roleNames = null;    Set<String> permissions = null;    try {        conn = dataSource.getConnection();                roleNames = getRoleNamesForUser(conn, username);        if (permissionsLookupEnabled) {            permissions = getPermissions(conn, username, roleNames);        }    } catch (SQLException e) {        final String message = "There was a SQL error while authorizing user [" + username + "]";        if (log.isErrorEnabled()) {            log.error(message, e);        }                throw new AuthorizationException(message, e);    } finally {        JdbcUtils.closeConnection(conn);    }    SimpleAuthorizationInfo info = new SimpleAuthorizationInfo(roleNames);    info.setStringPermissions(permissions);    return info;}
bd4e486c815e5b5a8696164c959db1617bdcb8517d37c884c9a43f9fb688552b
getRoleNamesForUser
protected Set<String> getRoleNamesForUser(Connection conn, String username) throws SQLException
{    PreparedStatement ps = null;    ResultSet rs = null;    Set<String> roleNames = new LinkedHashSet<String>();    try {        ps = conn.prepareStatement(userRolesQuery);        ps.setString(1, username);                rs = ps.executeQuery();                while (rs.next()) {            String roleName = rs.getString(1);                        if (roleName != null) {                roleNames.add(roleName);            } else {                if (log.isWarnEnabled()) {                    log.warn("Null role name found while retrieving role names for user [" + username + "]");                }            }        }    } finally {        JdbcUtils.closeResultSet(rs);        JdbcUtils.closeStatement(ps);    }    return roleNames;}
95b2d9277acab0f7958c6be07eddfaf9c0cd961809c4b659fb42bbd9155017dd
getPermissions
protected Set<String> getPermissions(Connection conn, String username, Collection<String> roleNames) throws SQLException
{    PreparedStatement ps = null;    Set<String> permissions = new LinkedHashSet<String>();    try {        ps = conn.prepareStatement(permissionsQuery);        for (String roleName : roleNames) {            ps.setString(1, roleName);            ResultSet rs = null;            try {                                rs = ps.executeQuery();                                while (rs.next()) {                    String permissionString = rs.getString(1);                                        permissions.add(permissionString);                }            } finally {                JdbcUtils.closeResultSet(rs);            }        }    } finally {        JdbcUtils.closeStatement(ps);    }    return permissions;}
f68569ea5e5a77448131b43f79f293c6b0815013e8588deb7590f8a517a390e4
getSaltForUser
protected String getSaltForUser(String username)
{    return username;}
d6445f1986da3cc8db3fd747ff9ef528d600d809389f80969f17ed316317a91e
getJndiNames
public Collection<String> getJndiNames()
{    return jndiNames;}
531d81e0fb676f107ffc0ea48fdb796fc50e221bf005762c8da10f38e957af76
setJndiNames
public void setJndiNames(Collection<String> jndiNames)
{    this.jndiNames = jndiNames;}
9e9c2f499b83699b62c4100bbb2e3119c4b393ac14795f70f24c9047df097058
setJndiNames
public void setJndiNames(String commaDelimited) throws IllegalStateException
{    String arg = StringUtils.clean(commaDelimited);    if (arg == null) {        String msg = "One or more comma-delimited jndi names must be specified for the " + getClass().getName() + " to locate Realms.";        throw new IllegalStateException(msg);    }    String[] names = StringUtils.tokenizeToStringArray(arg, ",");    setJndiNames(Arrays.asList(names));}
19b0bc20efec209710addfb1dbfcf2da64526574738d15e5345ca232e5222990
getRealms
public Collection<Realm> getRealms() throws IllegalStateException
{    Collection<String> jndiNames = getJndiNames();    if (jndiNames == null || jndiNames.isEmpty()) {        String msg = "One or more jndi names must be specified for the " + getClass().getName() + " to locate Realms.";        throw new IllegalStateException(msg);    }    List<Realm> realms = new ArrayList<Realm>(jndiNames.size());    for (String name : jndiNames) {        try {            Realm realm = (Realm) lookup(name, Realm.class);            realms.add(realm);        } catch (Exception e) {            throw new IllegalStateException("Unable to look up realm with jndi name '" + name + "'.", e);        }    }    return realms.isEmpty() ? null : realms;}
233109f9eb6ae14b721f6dd542761d16cf2da1402997369bd071997eda99a70a
setPrincipalSuffix
public void setPrincipalSuffix(String principalSuffix)
{    this.principalSuffix = principalSuffix;}
45d68ed2481de83f6468c00604118ad383a8e06d3b07a2dfbdc2369480e40383
setSearchBase
public void setSearchBase(String searchBase)
{    this.searchBase = searchBase;}
c3d2ee14b0a87d91276b6034d452ebbd50ed47914948b9edaea83747da585af6
setUrl
public void setUrl(String url)
{    this.url = url;}
505e2669f5659943f6b9241f235a73251007349137dc5f0169d535352fee7d49
setSystemUsername
public void setSystemUsername(String systemUsername)
{    this.systemUsername = systemUsername;}
bb2af74d341dfbf3edd6c3d6d18e4cbaabf64d94fce66991bc7ce858fb01ddc6
setSystemPassword
public void setSystemPassword(String systemPassword)
{    this.systemPassword = systemPassword;}
c3ef925c8ed232c3b7b0d08692cdc920345a51b4d56f838d3cc49048daa7316a
setLdapContextFactory
public void setLdapContextFactory(LdapContextFactory ldapContextFactory)
{    this.ldapContextFactory = ldapContextFactory;}
a57e7d81bd464d65ea88e46b68b9396837050260d8d7e5405247865842b1a80a
setSearchFilter
public void setSearchFilter(String searchFilter)
{    this.searchFilter = searchFilter;}
1a67e3209bd108e785c83f678bbaf2efc1a2cc2192fc6a4bf60bb7924700d74a
onInit
protected void onInit()
{    super.onInit();    ensureContextFactory();}
aea486da402334d269a73195b9a2c4c7ec3aef12fcb2d9c9a421c71919e61b9f
ensureContextFactory
private LdapContextFactory ensureContextFactory()
{    if (this.ldapContextFactory == null) {        if (log.isDebugEnabled()) {            log.debug("No LdapContextFactory specified - creating a default instance.");        }        DefaultLdapContextFactory defaultFactory = new DefaultLdapContextFactory();        defaultFactory.setPrincipalSuffix(this.principalSuffix);        defaultFactory.setSearchBase(this.searchBase);        defaultFactory.setUrl(this.url);        defaultFactory.setSystemUsername(this.systemUsername);        defaultFactory.setSystemPassword(this.systemPassword);        this.ldapContextFactory = defaultFactory;    }    return this.ldapContextFactory;}
04d12ebf29bfe2a4c8158a941df0d9788366bab7e1f094a3057e32147ffbeb42
doGetAuthenticationInfo
protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException
{    AuthenticationInfo info;    try {        info = queryForAuthenticationInfo(token, ensureContextFactory());    } catch (javax.naming.AuthenticationException e) {        throw new AuthenticationException("LDAP authentication failed.", e);    } catch (NamingException e) {        String msg = "LDAP naming error while attempting to authenticate user.";        throw new AuthenticationException(msg, e);    }    return info;}
7d82f766d0b50c20008bf1b1d8345ac21d4827d0c5115d358a603d4f11fb64f3
doGetAuthorizationInfo
protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals)
{    AuthorizationInfo info;    try {        info = queryForAuthorizationInfo(principals, ensureContextFactory());    } catch (NamingException e) {        String msg = "LDAP naming error while attempting to retrieve authorization for user [" + principals + "].";        throw new AuthorizationException(msg, e);    }    return info;}
b0ec5edf844fe1a8a6ce9b784dc0db607bbf001b08e61bdf95a796436f502877
setAuthentication
public void setAuthentication(String authentication)
{    this.authentication = authentication;}
233109f9eb6ae14b721f6dd542761d16cf2da1402997369bd071997eda99a70a
setPrincipalSuffix
public void setPrincipalSuffix(String principalSuffix)
{    this.principalSuffix = principalSuffix;}
45d68ed2481de83f6468c00604118ad383a8e06d3b07a2dfbdc2369480e40383
setSearchBase
public void setSearchBase(String searchBase)
{    this.searchBase = searchBase;}
42436d8588b0f44402e825c84a6a5256789148e1abc10e8b7ba06a940e2dfa48
setContextFactoryClassName
public void setContextFactoryClassName(String contextFactoryClassName)
{    this.contextFactoryClassName = contextFactoryClassName;}
c3d2ee14b0a87d91276b6034d452ebbd50ed47914948b9edaea83747da585af6
setUrl
public void setUrl(String url)
{    this.url = url;}
3be819abdf6888b1d3d23582884b66e9bc70f4c19d3c200195cc16536502761a
setReferral
public void setReferral(String referral)
{    this.referral = referral;}
505e2669f5659943f6b9241f235a73251007349137dc5f0169d535352fee7d49
setSystemUsername
public void setSystemUsername(String systemUsername)
{    this.systemUsername = systemUsername;}
bb2af74d341dfbf3edd6c3d6d18e4cbaabf64d94fce66991bc7ce858fb01ddc6
setSystemPassword
public void setSystemPassword(String systemPassword)
{    this.systemPassword = systemPassword;}
33cf6c2f4a2983960e94f49cd2839476d0956a55654df60df597e50709372e8c
setUsePooling
public void setUsePooling(boolean usePooling)
{    this.usePooling = usePooling;}
efc94b827e46aeb3e46f272860f2d303bd2835b87f92f539cffaee756b1f0dcb
setAdditionalEnvironment
public void setAdditionalEnvironment(Map<String, String> additionalEnvironment)
{    this.additionalEnvironment = additionalEnvironment;}
ed1b342588f0eb9c62fe968817b9e6e1fd18225f5be14032029e76c3a99d8e39
getSystemLdapContext
public LdapContext getSystemLdapContext() throws NamingException
{    return getLdapContext(systemUsername, systemPassword);}
9e768185996f5450938d341a0d0b19a62b99781f13a85f78101a8de8b1481758
getLdapContext
public LdapContext getLdapContext(String username, String password) throws NamingException
{    if (username != null && principalSuffix != null) {        username += principalSuffix;    }    return getLdapContext((Object) username, password);}
0338c50e7541bff06d0c697992dee96bcfbf96234832d64088d4e43fc4c4d422
getLdapContext
public LdapContext getLdapContext(Object principal, Object credentials) throws NamingException
{    if (url == null) {        throw new IllegalStateException("An LDAP URL must be specified of the form ldap://<hostname>:<port>");    }    Hashtable<String, Object> env = new Hashtable<String, Object>();    env.put(Context.SECURITY_AUTHENTICATION, authentication);    if (principal != null) {        env.put(Context.SECURITY_PRINCIPAL, principal);    }    if (credentials != null) {        env.put(Context.SECURITY_CREDENTIALS, credentials);    }    env.put(Context.INITIAL_CONTEXT_FACTORY, contextFactoryClassName);    env.put(Context.PROVIDER_URL, url);    env.put(Context.REFERRAL, referral);        if (usePooling && principal != null && principal.equals(systemUsername)) {                env.put(SUN_CONNECTION_POOLING_PROPERTY, "true");    }    if (additionalEnvironment != null) {        env.putAll(additionalEnvironment);    }    if (log.isDebugEnabled()) {        log.debug("Initializing LDAP context using URL [" + url + "] and username [" + systemUsername + "] " + "with pooling [" + (usePooling ? "enabled" : "disabled") + "]");    }        validateAuthenticationInfo(env);    return createLdapContext(env);}
55155c8b0246e88ecbd2e9094ac9b4f185b22a6974d76c5cc6a9eb96b287bbda
createLdapContext
protected LdapContext createLdapContext(Hashtable env) throws NamingException
{    return new InitialLdapContext(env, null);}
6bdb40191ba95af38e895115ce1ad3b91fbeff6accc1e67bc005bc574172b550
validateAuthenticationInfo
private void validateAuthenticationInfo(Hashtable<String, Object> environment) throws AuthenticationException
{        if (SIMPLE_AUTHENTICATION_MECHANISM_NAME.equals(environment.get(Context.SECURITY_AUTHENTICATION))) {                if (environment.get(Context.SECURITY_PRINCIPAL) != null && StringUtils.hasText(String.valueOf(environment.get(Context.SECURITY_PRINCIPAL)))) {            Object credentials = environment.get(Context.SECURITY_CREDENTIALS);                        if (credentials == null ||             (credentials instanceof byte[] && ((byte[]) credentials).length <= 0) ||             (credentials instanceof char[] && ((char[]) credentials).length <= 0) || (String.class.isInstance(credentials) && !StringUtils.hasText(String.valueOf(credentials)))) {                throw new javax.naming.AuthenticationException("LDAP Simple authentication requires both a " + "principal and credentials.");            }        }    }}
bd17b4d65d9ba97ea0718590c7667852bd568b3e8638558f20ff905dab949389
getUserDnPrefix
protected String getUserDnPrefix()
{    return userDnPrefix;}
530141a3d39f7d5d60bffd394517a8a3436cafe2bf94e73b310e5d26f25570a5
getUserDnSuffix
protected String getUserDnSuffix()
{    return userDnSuffix;}
3a9dab44f08711bbdf8e8c86c9a861d6da97b4cf769c683b95bc0810cfd2b1e7
setUserDnTemplate
public void setUserDnTemplate(String template) throws IllegalArgumentException
{    if (!StringUtils.hasText(template)) {        String msg = "User DN template cannot be null or empty.";        throw new IllegalArgumentException(msg);    }    int index = template.indexOf(USERDN_SUBSTITUTION_TOKEN);    if (index < 0) {        String msg = "User DN template must contain the '" + USERDN_SUBSTITUTION_TOKEN + "' replacement token to understand where to " + "insert the runtime authentication principal.";        throw new IllegalArgumentException(msg);    }    String prefix = template.substring(0, index);    String suffix = template.substring(prefix.length() + USERDN_SUBSTITUTION_TOKEN.length());    if (log.isDebugEnabled()) {        log.debug("Determined user DN prefix [{}] and suffix [{}]", prefix, suffix);    }    this.userDnPrefix = prefix;    this.userDnSuffix = suffix;}
9c15141dbb7036fe93b7b8310f19e2d8b0c7b0af5a7afa2d1a358143557dfd78
getUserDnTemplate
public String getUserDnTemplate()
{    return getUserDn(USERDN_SUBSTITUTION_TOKEN);}
7c3e61f212bce0c1e5295d9ce2a35ff503ef3afd8726b5bef4a093f6ff88ab1f
getUserDn
protected String getUserDn(String principal) throws IllegalArgumentException, IllegalStateException
{    if (!StringUtils.hasText(principal)) {        throw new IllegalArgumentException("User principal cannot be null or empty for User DN construction.");    }    String prefix = getUserDnPrefix();    String suffix = getUserDnSuffix();    if (prefix == null && suffix == null) {        log.debug("userDnTemplate property has not been configured, indicating the submitted " + "AuthenticationToken's principal is the same as the User DN.  Returning the method argument " + "as is.");        return principal;    }    int prefixLength = prefix != null ? prefix.length() : 0;    int suffixLength = suffix != null ? suffix.length() : 0;    StringBuilder sb = new StringBuilder(prefixLength + principal.length() + suffixLength);    if (prefixLength > 0) {        sb.append(prefix);    }    sb.append(principal);    if (suffixLength > 0) {        sb.append(suffix);    }    return sb.toString();}
35def30bbb2e94de8c04ff36e65dd6d64c8af21d99a337e6244c32af15a587a5
setContextFactory
public void setContextFactory(LdapContextFactory contextFactory)
{    this.contextFactory = contextFactory;}
43f53a9cdf7255e7bd505fd5c5187e8c7e68914cb8981a6d7f37c9712358740b
getContextFactory
public LdapContextFactory getContextFactory()
{    return this.contextFactory;}
04d12ebf29bfe2a4c8158a941df0d9788366bab7e1f094a3057e32147ffbeb42
doGetAuthenticationInfo
protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException
{    AuthenticationInfo info;    try {        info = queryForAuthenticationInfo(token, getContextFactory());    } catch (AuthenticationNotSupportedException e) {        String msg = "Unsupported configured authentication mechanism";        throw new UnsupportedAuthenticationMechanismException(msg, e);    } catch (javax.naming.AuthenticationException e) {        throw new AuthenticationException("LDAP authentication failed.", e);    } catch (NamingException e) {        String msg = "LDAP naming error while attempting to authenticate user.";        throw new AuthenticationException(msg, e);    }    return info;}
7d82f766d0b50c20008bf1b1d8345ac21d4827d0c5115d358a603d4f11fb64f3
doGetAuthorizationInfo
protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals)
{    AuthorizationInfo info;    try {        info = queryForAuthorizationInfo(principals, getContextFactory());    } catch (NamingException e) {        String msg = "LDAP naming error while attempting to retrieve authorization for user [" + principals + "].";        throw new AuthorizationException(msg, e);    }    return info;}
0aa98ce3b99273b24551e1b1fa902bb22847f3d74267287ef3234d0b34566d3e
getLdapPrincipal
protected Object getLdapPrincipal(AuthenticationToken token)
{    Object principal = token.getPrincipal();    if (principal instanceof String) {        String sPrincipal = (String) principal;        return getUserDn(sPrincipal);    }    return principal;}
74297bc9abcb1f0eee198e1ffbb79dc836a3856df82fded343746eda59c3dd0e
queryForAuthenticationInfo
protected AuthenticationInfo queryForAuthenticationInfo(AuthenticationToken token, LdapContextFactory ldapContextFactory) throws NamingException
{    Object principal = token.getPrincipal();    Object credentials = token.getCredentials();    log.debug("Authenticating user '{}' through LDAP", principal);    principal = getLdapPrincipal(token);    LdapContext ctx = null;    try {        ctx = ldapContextFactory.getLdapContext(principal, credentials);                return createAuthenticationInfo(token, principal, credentials, ctx);    } finally {        LdapUtils.closeContext(ctx);    }}
08242f53c8a88acd4e62fe855ffdde3a56cf5b30ab9e5f439813ee9e2eb912d9
createAuthenticationInfo
protected AuthenticationInfo createAuthenticationInfo(AuthenticationToken token, Object ldapPrincipal, Object ldapCredentials, LdapContext ldapContext) throws NamingException
{    return new SimpleAuthenticationInfo(token.getPrincipal(), token.getCredentials(), getName());}
b75860148104dc4596680f863c0db2172fc3c91720d2a9e6e7c598ab33a495a2
queryForAuthorizationInfo
protected AuthorizationInfo queryForAuthorizationInfo(PrincipalCollection principals, LdapContextFactory ldapContextFactory) throws NamingException
{    return null;}
90eb962268b8285228913e3fecf86257866bf3d704a0fe2712afe4e981f28af6
setAuthenticationMechanism
public void setAuthenticationMechanism(String authenticationMechanism)
{    setEnvironmentProperty(Context.SECURITY_AUTHENTICATION, authenticationMechanism);}
5aedcadbf654a709d031e156d164ee43b0fc7eda1d0cbee1264596aac2ff5f78
getAuthenticationMechanism
public String getAuthenticationMechanism()
{    return (String) getEnvironmentProperty(Context.SECURITY_AUTHENTICATION);}
42436d8588b0f44402e825c84a6a5256789148e1abc10e8b7ba06a940e2dfa48
setContextFactoryClassName
public void setContextFactoryClassName(String contextFactoryClassName)
{    setEnvironmentProperty(Context.INITIAL_CONTEXT_FACTORY, contextFactoryClassName);}
36f27f73b4789c1e756afe2d172ecdf38e5dad8808fbd875ef1d842f819a60c1
getContextFactoryClassName
public String getContextFactoryClassName()
{    return (String) getEnvironmentProperty(Context.INITIAL_CONTEXT_FACTORY);}
3dd9ec1b5cb7603cfafbfaccfafac9d6fba4528abd9317c70dd6d4f1a791503e
getEnvironment
public Map getEnvironment()
{    return this.environment;}
73deddb6697914eec682ae9b514cadfcc77d9f78c21f105430c2556a3da15b4f
setEnvironment
public void setEnvironment(Map env)
{    this.environment = env;}
7c765be917c8523eaaa78ea535c89768f79107c403f797918e0ed11f5dbdea28
getEnvironmentProperty
private Object getEnvironmentProperty(String name)
{    return this.environment.get(name);}
5874210bfd2fc5805adbf6ab9eb113ad20c49cf92eeac40d30e2e50bac316afb
setEnvironmentProperty
private void setEnvironmentProperty(String name, String value)
{    if (StringUtils.hasText(value)) {        this.environment.put(name, value);    } else {        this.environment.remove(name);    }}
63d1a3b0d434a263ea0439abbea27b12fbc405c564c4f4303ae06571b332493d
isPoolingEnabled
public boolean isPoolingEnabled()
{    return poolingEnabled;}
e4a2eb2b0c0c47849234f96323c4be40a8134251249083e148595ec0c9207fd6
setPoolingEnabled
public void setPoolingEnabled(boolean poolingEnabled)
{    this.poolingEnabled = poolingEnabled;}
3be819abdf6888b1d3d23582884b66e9bc70f4c19d3c200195cc16536502761a
setReferral
public void setReferral(String referral)
{    setEnvironmentProperty(Context.REFERRAL, referral);}
48d0461e98420094c68a160b8f79691e10c933f9bad4db532c24a6dce0494a73
getReferral
public String getReferral()
{    return (String) getEnvironmentProperty(Context.REFERRAL);}
c3d2ee14b0a87d91276b6034d452ebbd50ed47914948b9edaea83747da585af6
setUrl
public void setUrl(String url)
{    setEnvironmentProperty(Context.PROVIDER_URL, url);}
354afe66bbdb19ee4d620955bbb214ebf9b5aa09359dea30ffb867002b5a25bd
getUrl
public String getUrl()
{    return (String) getEnvironmentProperty(Context.PROVIDER_URL);}
bb2af74d341dfbf3edd6c3d6d18e4cbaabf64d94fce66991bc7ce858fb01ddc6
setSystemPassword
public void setSystemPassword(String systemPassword)
{    this.systemPassword = systemPassword;}
74b5cf9f27fcce12b52c76e1be66f419b0bf7cf191cd46d3b2df6c31886eb376
getSystemPassword
public String getSystemPassword()
{    return this.systemPassword;}
505e2669f5659943f6b9241f235a73251007349137dc5f0169d535352fee7d49
setSystemUsername
public void setSystemUsername(String systemUsername)
{    this.systemUsername = systemUsername;}
7f59b8f8a7008eb89c2490293d8d3f3af5f2ae8013f7c2852752ace8f202b937
getSystemUsername
public String getSystemUsername()
{    return systemUsername;}
ed1b342588f0eb9c62fe968817b9e6e1fd18225f5be14032029e76c3a99d8e39
getSystemLdapContext
public LdapContext getSystemLdapContext() throws NamingException
{    return getLdapContext((Object) getSystemUsername(), getSystemPassword());}
9e768185996f5450938d341a0d0b19a62b99781f13a85f78101a8de8b1481758
getLdapContext
public LdapContext getLdapContext(String username, String password) throws NamingException
{    return getLdapContext((Object) username, password);}
c4aa61fa9522565905459cc8a05feba57d1c53668b57edbdb541f053a414f988
isPoolingConnections
protected boolean isPoolingConnections(Object principal)
{    return isPoolingEnabled() && principal != null && principal.equals(getSystemUsername());}
3eaa76c98cc7aaa4a8f8b020bbe7fe4859356913542d980b1c50112546432e47
getLdapContext
public LdapContext getLdapContext(Object principal, Object credentials) throws NamingException, IllegalStateException
{    String url = getUrl();    if (url == null) {        throw new IllegalStateException("An LDAP URL must be specified of the form ldap://<hostname>:<port>");    }            Hashtable<String, Object> env = new Hashtable<String, Object>(this.environment);    Object authcMech = getAuthenticationMechanism();    if (authcMech == null && (principal != null || credentials != null)) {                                                env.put(Context.SECURITY_AUTHENTICATION, SIMPLE_AUTHENTICATION_MECHANISM_NAME);    }    if (principal != null) {        env.put(Context.SECURITY_PRINCIPAL, principal);    }    if (credentials != null) {        env.put(Context.SECURITY_CREDENTIALS, credentials);    }    boolean pooling = isPoolingConnections(principal);    if (pooling) {        env.put(SUN_CONNECTION_POOLING_PROPERTY, "true");    }    if (log.isDebugEnabled()) {        log.debug("Initializing LDAP context using URL [{}] and principal [{}] with pooling {}", new Object[] { url, principal, (pooling ? "enabled" : "disabled") });    }        validateAuthenticationInfo(env);    return createLdapContext(env);}
55155c8b0246e88ecbd2e9094ac9b4f185b22a6974d76c5cc6a9eb96b287bbda
createLdapContext
protected LdapContext createLdapContext(Hashtable env) throws NamingException
{    return new InitialLdapContext(env, null);}
6ba3a8786606571c42fbf3ca82314c4066cead0ba558b92533448d09d9018853
validateAuthenticationInfo
protected void validateAuthenticationInfo(Hashtable<String, Object> environment) throws AuthenticationException
{        if (SIMPLE_AUTHENTICATION_MECHANISM_NAME.equals(environment.get(Context.SECURITY_AUTHENTICATION))) {                if (environment.get(Context.SECURITY_PRINCIPAL) != null && StringUtils.hasText(String.valueOf(environment.get(Context.SECURITY_PRINCIPAL)))) {            Object credentials = environment.get(Context.SECURITY_CREDENTIALS);                        if (credentials == null ||             (credentials instanceof byte[] && ((byte[]) credentials).length <= 0) ||             (credentials instanceof char[] && ((char[]) credentials).length <= 0) || (String.class.isInstance(credentials) && !StringUtils.hasText(String.valueOf(credentials)))) {                throw new javax.naming.AuthenticationException("LDAP Simple authentication requires both a " + "principal and credentials.");            }        }    }}
cbbfcc89e49ae4fc613a97bf3ac85218f6d6b7a31cc089f74be285587f793f76
closeContext
public static void closeContext(LdapContext ctx)
{    try {        if (ctx != null) {            ctx.close();        }    } catch (NamingException e) {        log.error("Exception while closing LDAP context. ", e);    }}
e1c97a779865e3dd518f53979cfaaafd2d48e7259fb75a16bb6bda61f177a9d4
getAllAttributeValues
public static Collection<String> getAllAttributeValues(Attribute attr) throws NamingException
{    Set<String> values = new HashSet<String>();    NamingEnumeration ne = null;    try {        ne = attr.getAll();        while (ne.hasMore()) {            String value = (String) ne.next();            values.add(value);        }    } finally {        closeEnumeration(ne);    }    return values;}
e8217fd7923198ded2efb22a0e59f2d334de971ebb9e27ab4954498dced9d9f5
closeEnumeration
public static void closeEnumeration(NamingEnumeration ne)
{    try {        if (ne != null) {            ne.close();        }    } catch (NamingException e) {        log.error("Exception while closing NamingEnumeration: ", e);    }}
c4223f22b4e5eedd3943d3b492f433f38514d3edd83b5ff56f0a9e7e776c8923
getUser
protected SimpleAccount getUser(String username)
{    USERS_LOCK.readLock().lock();    try {        return this.users.get(username);    } finally {        USERS_LOCK.readLock().unlock();    }}
49a8cb8e507c00e2a29c0f0b9e686be1d996c4866620e077a3944c9131e5095d
accountExists
public boolean accountExists(String username)
{    return getUser(username) != null;}
c5ff845e0a0b9ceba001248d4068d7dfb0e5c8dadf32acab871e14e27ab59f80
addAccount
public void addAccount(String username, String password)
{    addAccount(username, password, (String[]) null);}
e6077fca0fd1ea1f910715f4ea197aa6ec8298909d2e25ce4f5ae6e8170a2093
addAccount
public void addAccount(String username, String password, String... roles)
{    Set<String> roleNames = CollectionUtils.asSet(roles);    SimpleAccount account = new SimpleAccount(username, password, getName(), roleNames, null);    add(account);}
ec6ae8a3fd82334e92e9d6b91cd486abc54d88f96d657928167b7bb779594309
getUsername
protected String getUsername(SimpleAccount account)
{    return getUsername(account.getPrincipals());}
e200c1f44c5dafb32db1bfc7eda23aa7d66ace73a46f209a5324d02566b37166
getUsername
protected String getUsername(PrincipalCollection principals)
{    return getAvailablePrincipal(principals).toString();}
2a4f1126c55a899ff9d9080939a1c842c07cbdd35133966c7bf0a50a1217a2a1
add
protected void add(SimpleAccount account)
{    String username = getUsername(account);    USERS_LOCK.writeLock().lock();    try {        this.users.put(username, account);    } finally {        USERS_LOCK.writeLock().unlock();    }}
7999e8a408114fe4c9a0510ea45dd1b43126067d7000a72b3a153c01d0991dc2
getRole
protected SimpleRole getRole(String rolename)
{    ROLES_LOCK.readLock().lock();    try {        return roles.get(rolename);    } finally {        ROLES_LOCK.readLock().unlock();    }}
07f37b6a6c2eea165eb6681dcf216e81055e8725df29e389de05e2ec50ea691f
roleExists
public boolean roleExists(String name)
{    return getRole(name) != null;}
cba48a1d7b46a54925f1917b810166bd0f3e6ec46ad17f963bc79fbaacd888f2
addRole
public void addRole(String name)
{    add(new SimpleRole(name));}
76595b8634ba73289e1b5879f623496b59e45a20d89ac0e06f854cb804ef5452
add
protected void add(SimpleRole role)
{    ROLES_LOCK.writeLock().lock();    try {        roles.put(role.getName(), role);    } finally {        ROLES_LOCK.writeLock().unlock();    }}
698d1dd867ae236fb49b2f724d5f9e411c5677ce3b8d87d0943066345bd67b19
toSet
protected static Set<String> toSet(String delimited, String delimiter)
{    if (delimited == null || delimited.trim().equals("")) {        return null;    }    Set<String> values = new HashSet<String>();    String[] rolenamesArray = delimited.split(delimiter);    for (String s : rolenamesArray) {        String trimmed = s.trim();        if (trimmed.length() > 0) {            values.add(trimmed);        }    }    return values;}
04d12ebf29bfe2a4c8158a941df0d9788366bab7e1f094a3057e32147ffbeb42
doGetAuthenticationInfo
protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException
{    UsernamePasswordToken upToken = (UsernamePasswordToken) token;    SimpleAccount account = getUser(upToken.getUsername());    if (account != null) {        if (account.isLocked()) {            throw new LockedAccountException("Account [" + account + "] is locked.");        }        if (account.isCredentialsExpired()) {            String msg = "The credentials for account [" + account + "] are expired";            throw new ExpiredCredentialsException(msg);        }    }    return account;}
7d82f766d0b50c20008bf1b1d8345ac21d4827d0c5115d358a603d4f11fb64f3
doGetAuthorizationInfo
protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals)
{    String username = getUsername(principals);    USERS_LOCK.readLock().lock();    try {        return this.users.get(username);    } finally {        USERS_LOCK.readLock().unlock();    }}
42599c83e63087cc6ce0edcae96d68ebb116e5c7d2a7b1f5ab536f34bfcfd934
getResourcePath
public String getResourcePath()
{    return resourcePath;}
2dc184ad75c627155b8b8590ce5863d2da8ba46f71804fcf9f66d26308d39d11
setResourcePath
public void setResourcePath(String resourcePath)
{    this.resourcePath = resourcePath;}
d742d5adfc4a66ed703f889ff5b15820397f6bc1ab534832eaccd42f24661391
getIni
public Ini getIni()
{    return ini;}
28d8efeba0b79f62443ec365b195cea5d2caf0d43970a32b51a379bc09a2337a
setIni
public void setIni(Ini ini)
{    this.ini = ini;}
1a67e3209bd108e785c83f678bbaf2efc1a2cc2192fc6a4bf60bb7924700d74a
onInit
protected void onInit()
{    super.onInit();            Ini ini = getIni();    String resourcePath = getResourcePath();    if (!CollectionUtils.isEmpty(this.users) || !CollectionUtils.isEmpty(this.roles)) {        if (!CollectionUtils.isEmpty(ini)) {            log.warn("Users or Roles are already populated.  Configured Ini instance will be ignored.");        }        if (StringUtils.hasText(resourcePath)) {            log.warn("Users or Roles are already populated.  resourcePath '{}' will be ignored.", resourcePath);        }        log.debug("Instance is already populated with users or roles.  No additional user/role population " + "will be performed.");        return;    }    if (CollectionUtils.isEmpty(ini)) {        log.debug("No INI instance configuration present.  Checking resourcePath...");        if (StringUtils.hasText(resourcePath)) {            log.debug("Resource path {} defined.  Creating INI instance.", resourcePath);            ini = Ini.fromResourcePath(resourcePath);            if (!CollectionUtils.isEmpty(ini)) {                setIni(ini);            }        }    }    if (CollectionUtils.isEmpty(ini)) {        String msg = "Ini instance and/or resourcePath resulted in null or empty Ini configuration.  Cannot " + "load account data.";        throw new IllegalStateException(msg);    }    processDefinitions(ini);}
b41792accd836ebd53c53fb6add5258a6940194688859c939b5731fcaffbff9a
processDefinitions
private void processDefinitions(Ini ini)
{    if (CollectionUtils.isEmpty(ini)) {        log.warn("{} defined, but the ini instance is null or empty.", getClass().getSimpleName());        return;    }    Ini.Section rolesSection = ini.getSection(ROLES_SECTION_NAME);    if (!CollectionUtils.isEmpty(rolesSection)) {        log.debug("Discovered the [{}] section.  Processing...", ROLES_SECTION_NAME);        processRoleDefinitions(rolesSection);    }    Ini.Section usersSection = ini.getSection(USERS_SECTION_NAME);    if (!CollectionUtils.isEmpty(usersSection)) {        log.debug("Discovered the [{}] section.  Processing...", USERS_SECTION_NAME);        processUserDefinitions(usersSection);    } else {        log.info("{} defined, but there is no [{}] section defined.  This realm will not be populated with any " + "users and it is assumed that they will be populated programatically.  Users must be defined " + "for this Realm instance to be useful.", getClass().getSimpleName(), USERS_SECTION_NAME);    }}
eaf9002653538da5d7a89aad4b792b6f9c894b32bf49b3681b9e0445b82b9c92
setUseXmlFormat
public void setUseXmlFormat(boolean useXmlFormat)
{    this.useXmlFormat = useXmlFormat;}
2dc184ad75c627155b8b8590ce5863d2da8ba46f71804fcf9f66d26308d39d11
setResourcePath
public void setResourcePath(String resourcePath)
{    this.resourcePath = resourcePath;}
d5b9e09106995ba904cfb252ea7e15bb1225c3ca739271dcf705f7dca6f228bd
setReloadIntervalSeconds
public void setReloadIntervalSeconds(int reloadIntervalSeconds)
{    this.reloadIntervalSeconds = reloadIntervalSeconds;}
c89db6072e84e19dc7d482bc1a520e6d04fb7608dfa5c33f889cee61c24c5579
onInit
public void onInit()
{    super.onInit();        afterRoleCacheSet();}
546ce32550d5fdb0a5c7e23af92aa417f4ab0e8532967c28a39a041606a7d5cb
afterRoleCacheSet
protected void afterRoleCacheSet()
{    loadProperties();        if (this.resourcePath.startsWith(ResourceUtils.FILE_PREFIX) && scheduler == null) {        startReloadThread();    }}
9cabd71a85d4928de1c9a46601c11d584f3e7522ee61146e1117d0d360a20b2e
destroy
public void destroy()
{    try {        if (scheduler != null) {            scheduler.shutdown();        }    } catch (Exception e) {        if (log.isInfoEnabled()) {            log.info("Unable to cleanly shutdown Scheduler.  Ignoring (shutting down)...", e);        }    } finally {        scheduler = null;    }}
c9d6e725441673d60185d285dea3a535a803268086b3927f576916562b8f44d6
startReloadThread
protected void startReloadThread()
{    if (this.reloadIntervalSeconds > 0) {        this.scheduler = Executors.newSingleThreadScheduledExecutor();        ((ScheduledExecutorService) this.scheduler).scheduleAtFixedRate(this, reloadIntervalSeconds, reloadIntervalSeconds, TimeUnit.SECONDS);    }}
4560d80c2474cc2770be19fbc06c60741920c59992e6b13524f8a5b688ec285a
run
public void run()
{    try {        reloadPropertiesIfNecessary();    } catch (Exception e) {        if (log.isErrorEnabled()) {            log.error("Error while reloading property files for realm.", e);        }    }}
25ab8f0590f7ed0737916ecd619982225f8f110cdcbdb0a10b3f25d8ca4431cd
loadProperties
private void loadProperties()
{    if (resourcePath == null || resourcePath.length() == 0) {        throw new IllegalStateException("The resourcePath property is not set.  " + "It must be set prior to this realm being initialized.");    }    if (log.isDebugEnabled()) {        log.debug("Loading user security information from file [" + resourcePath + "]...");    }    Properties properties = loadProperties(resourcePath);    createRealmEntitiesFromProperties(properties);}
4922dd5741ed40743ac1291a6424b16af532754e0ce9ce90794972f21e2e106f
loadProperties
private Properties loadProperties(String resourcePath)
{    Properties props = new Properties();    InputStream is = null;    try {        if (log.isDebugEnabled()) {            log.debug("Opening input stream for path [" + resourcePath + "]...");        }        is = ResourceUtils.getInputStreamForPath(resourcePath);        if (useXmlFormat) {            if (log.isDebugEnabled()) {                log.debug("Loading properties from path [" + resourcePath + "] in XML format...");            }            props.loadFromXML(is);        } else {            if (log.isDebugEnabled()) {                log.debug("Loading properties from path [" + resourcePath + "]...");            }            props.load(is);        }    } catch (IOException e) {        throw new ShiroException("Error reading properties path [" + resourcePath + "].  " + "Initializing of the realm from this file failed.", e);    } finally {        ResourceUtils.close(is);    }    return props;}
ce29fb9a1b8716cb6e99e628eaf7f6864c2cd99b268b18dcaa963c77cdb9d026
reloadPropertiesIfNecessary
private void reloadPropertiesIfNecessary()
{    if (isSourceModified()) {        restart();    }}
bc3819d94dce4bf4a4e50a0b0de0cd414c771a0c72c2c1d629b7de5e74b790c8
isSourceModified
private boolean isSourceModified()
{        return this.resourcePath.startsWith(ResourceUtils.FILE_PREFIX) && isFileModified();}
b392af7dc431a6f0de20518a70a7272a96329eb571a7484d228eb4324f53b857
isFileModified
private boolean isFileModified()
{        String fileNameWithoutPrefix = this.resourcePath.substring(this.resourcePath.indexOf(":") + 1);    File propertyFile = new File(fileNameWithoutPrefix);    long currentLastModified = propertyFile.lastModified();    if (currentLastModified > this.fileLastModified) {        this.fileLastModified = currentLastModified;        return true;    } else {        return false;    }}
e14ef93385f9f85a9bfc5e7522c6fa5f1373405001b6c8ead56daa6a6407120e
restart
private void restart()
{    if (resourcePath == null || resourcePath.length() == 0) {        throw new IllegalStateException("The resourcePath property is not set.  " + "It must be set prior to this realm being initialized.");    }    if (log.isDebugEnabled()) {        log.debug("Loading user security information from file [" + resourcePath + "]...");    }    try {        destroy();    } catch (Exception e) {        }    init();}
8cd02dd3ea30e007fa72d927aa6e0c77e8302a87fd3c19ce197be0bee2c31ba0
createRealmEntitiesFromProperties
private void createRealmEntitiesFromProperties(Properties properties)
{    StringBuilder userDefs = new StringBuilder();    StringBuilder roleDefs = new StringBuilder();    Enumeration<String> propNames = (Enumeration<String>) properties.propertyNames();    while (propNames.hasMoreElements()) {        String key = propNames.nextElement().trim();        String value = properties.getProperty(key).trim();        if (log.isTraceEnabled()) {            log.trace("Processing properties line - key: [" + key + "], value: [" + value + "].");        }        if (isUsername(key)) {            String username = getUsername(key);            userDefs.append(username).append(" = ").append(value).append("\n");        } else if (isRolename(key)) {            String rolename = getRolename(key);            roleDefs.append(rolename).append(" = ").append(value).append("\n");        } else {            String msg = "Encountered unexpected key/value pair.  All keys must be prefixed with either '" + USERNAME_PREFIX + "' or '" + ROLENAME_PREFIX + "'.";            throw new IllegalStateException(msg);        }    }    setUserDefinitions(userDefs.toString());    setRoleDefinitions(roleDefs.toString());    processDefinitions();}
3229c45d9df432705c0c22aeadfdfd7b7e04e9509c963a8e524f004c8b3f95b4
getName
protected String getName(String key, String prefix)
{    return key.substring(prefix.length(), key.length());}
f65ae114d5883152297991c9ae46c6ee6dadde1e115a45876d371713e1500380
isUsername
protected boolean isUsername(String key)
{    return key != null && key.startsWith(USERNAME_PREFIX);}
5ce8b76b18523d595eb08ff17ad67dbff87b679db546cbdc4a7b17b3a718054a
isRolename
protected boolean isRolename(String key)
{    return key != null && key.startsWith(ROLENAME_PREFIX);}
5b94121871b84421974fae4a13a30f7bc99e2b21c9b5a27a82d7efb293ad61d8
getUsername
protected String getUsername(String key)
{    return getName(key, USERNAME_PREFIX);}
9fb9f90acc0441a9f9df2a04d792ff9d1b611a859a8c0e994e4f5b112b43fd0b
getRolename
protected String getRolename(String key)
{    return getName(key, ROLENAME_PREFIX);}
1a67e3209bd108e785c83f678bbaf2efc1a2cc2192fc6a4bf60bb7924700d74a
onInit
protected void onInit()
{    super.onInit();    processDefinitions();}
b80fadac8a722bad88294fe5af55896fa74e740b78a04ff87d0aa20cf0be6f0c
getUserDefinitions
public String getUserDefinitions()
{    return userDefinitions;}
5ceee53250a8670ed89d02d1ff3e4597911ffbdf4c04d8db36485c9af0ab903f
setUserDefinitions
public void setUserDefinitions(String userDefinitions)
{    this.userDefinitions = userDefinitions;}
acf937cb3a2b68e8864077b09f9b4c19a05713b742f2221627b699a96e28d2c0
getRoleDefinitions
public String getRoleDefinitions()
{    return roleDefinitions;}
f28b52c548eddbbe789e7144f7c121a7fb842542d2d52458f1a3ab281e483a7b
setRoleDefinitions
public void setRoleDefinitions(String roleDefinitions)
{    this.roleDefinitions = roleDefinitions;}
254f6eaa657dc31801116fac4489a9620c511e7f3804c53e22b04e38c80c9957
processDefinitions
protected void processDefinitions()
{    try {        processRoleDefinitions();        processUserDefinitions();    } catch (ParseException e) {        String msg = "Unable to parse user and/or role definitions.";        throw new ConfigurationException(msg, e);    }}
76c5b6ba29af3f9ff331389d26cd3f4af8890838a217c141b436337146287df1
processRoleDefinitions
protected void processRoleDefinitions() throws ParseException
{    String roleDefinitions = getRoleDefinitions();    if (roleDefinitions == null) {        return;    }    Map<String, String> roleDefs = toMap(toLines(roleDefinitions));    processRoleDefinitions(roleDefs);}
0ff961ec005fde53f5d7b48f381da56cba656e39b5f8cf378d56f7ff7528c26d
processRoleDefinitions
protected void processRoleDefinitions(Map<String, String> roleDefs)
{    if (roleDefs == null || roleDefs.isEmpty()) {        return;    }    for (String rolename : roleDefs.keySet()) {        String value = roleDefs.get(rolename);        SimpleRole role = getRole(rolename);        if (role == null) {            role = new SimpleRole(rolename);            add(role);        }        Set<Permission> permissions = PermissionUtils.resolveDelimitedPermissions(value, getPermissionResolver());        role.setPermissions(permissions);    }}
4a46ae95adcaedda7921c135cbace62795679d6280501af4543d8f89e4880a13
processUserDefinitions
protected void processUserDefinitions() throws ParseException
{    String userDefinitions = getUserDefinitions();    if (userDefinitions == null) {        return;    }    Map<String, String> userDefs = toMap(toLines(userDefinitions));    processUserDefinitions(userDefs);}
45564035461836b1986c9800920121375ae1592e5947c369b7b09bcfdc221fbc
processUserDefinitions
protected void processUserDefinitions(Map<String, String> userDefs)
{    if (userDefs == null || userDefs.isEmpty()) {        return;    }    for (String username : userDefs.keySet()) {        String value = userDefs.get(username);        String[] passwordAndRolesArray = StringUtils.split(value);        String password = passwordAndRolesArray[0];        SimpleAccount account = getUser(username);        if (account == null) {            account = new SimpleAccount(username, password, getName());            add(account);        }        account.setCredentials(password);        if (passwordAndRolesArray.length > 1) {            for (int i = 1; i < passwordAndRolesArray.length; i++) {                String rolename = passwordAndRolesArray[i];                account.addRole(rolename);                SimpleRole role = getRole(rolename);                if (role != null) {                    account.addObjectPermissions(role.getPermissions());                }            }        } else {            account.setRoles(null);        }    }}
8dcc75d43d0be8dd654f12718c7e6d99113229c5dbd81c863941064cd4f85da2
toLines
protected static Set<String> toLines(String s)
{    LinkedHashSet<String> set = new LinkedHashSet<String>();    Scanner scanner = new Scanner(s);    while (scanner.hasNextLine()) {        set.add(scanner.nextLine());    }    return set;}
321b9e1b798f86d95157110a4f1b2838ff01d98044aacdd7d7ec9098be7ee95a
toMap
protected static Map<String, String> toMap(Collection<String> keyValuePairs) throws ParseException
{    if (keyValuePairs == null || keyValuePairs.isEmpty()) {        return null;    }    Map<String, String> pairs = new HashMap<String, String>();    for (String pairString : keyValuePairs) {        String[] pair = StringUtils.splitKeyValue(pairString);        if (pair != null) {            pairs.put(pair[0].trim(), pair[1].trim());        }    }    return pairs;}
769fa6ac5b48b51d900fb9422fe8c82bfa52d92ae6ebdf3bf43aa87a0ea9c4c1
getSubject
public static Subject getSubject()
{    Subject subject = ThreadContext.getSubject();    if (subject == null) {        subject = (new Subject.Builder()).buildSubject();        ThreadContext.bind(subject);    }    return subject;}
7fc1a02f93aa305253e901a523800b187972d284851149f5d817a4f1341cf8a6
setSecurityManager
public static void setSecurityManager(SecurityManager securityManager)
{    SecurityUtils.securityManager = securityManager;}
6180269fc06e2e05430b627cbbcab5e2f1fa8d52c96623ae437e9aaae108cd2b
getSecurityManager
public static SecurityManager getSecurityManager() throws UnavailableSecurityManagerException
{    SecurityManager securityManager = ThreadContext.getSecurityManager();    if (securityManager == null) {        securityManager = SecurityUtils.securityManager;    }    if (securityManager == null) {        String msg = "No SecurityManager accessible to the calling code, either bound to the " + ThreadContext.class.getName() + " or as a vm static singleton.  This is an invalid application " + "configuration.";        throw new UnavailableSecurityManagerException(msg);    }    return securityManager;}
89097ff1190f58d20afd1fe376294e63f6d8b3fdc4b7fd9e7be47bc68f6c7c2f
setSessionListeners
public void setSessionListeners(Collection<SessionListener> listeners)
{    this.listeners = listeners != null ? listeners : new ArrayList<SessionListener>();}
8ed7300ddd9c9d8433d837767c83790237ba37bacf88b71c3ca746df77f33c71
getSessionListeners
public Collection<SessionListener> getSessionListeners()
{    return this.listeners;}
b927165567c7daf605c9557a1ba38ba3f958aebe33abe6fd090e19a594a179d1
getEventBus
protected EventBus getEventBus()
{    return eventBus;}
90d564afd68ffbd24f93d92358d830d481e0c7418cfcfeab221eab4774e70158
setEventBus
public void setEventBus(EventBus eventBus)
{    this.eventBus = eventBus;}
52290486bedc3a588d1396cf484526da926e23b3a14e0788bd5485d7b8cf94bb
publishEvent
protected void publishEvent(Object event)
{    if (this.eventBus != null) {        this.eventBus.publish(event);    }}
81709e93237bca54da118dcf2cd3d587f6f73728db6f9e838e8be3858daa0dd2
start
public Session start(SessionContext context)
{    Session session = createSession(context);    applyGlobalSessionTimeout(session);    onStart(session, context);    notifyStart(session);        return createExposedSession(session, context);}
3bf17806c75c81afe34196cf87046c337f33717c2a92658cb3099ecf52116ed1
applyGlobalSessionTimeout
protected void applyGlobalSessionTimeout(Session session)
{    session.setTimeout(getGlobalSessionTimeout());    onChange(session);}
e3c04a12a31e2844bb03bd38f0d89c2c292cab482af7042cf749f173c6367e56
onStart
protected void onStart(Session session, SessionContext context)
{}
1ba0f6efa895eae1aa4848cdb5378fb11d6abf12a66aa92299e8647a5f706ae7
getSession
public Session getSession(SessionKey key) throws SessionException
{    Session session = lookupSession(key);    return session != null ? createExposedSession(session, key) : null;}
66c418f9fd8ea13ff6fb2394d499388c591c36391a6e702572dc6e1dc31e05af
lookupSession
private Session lookupSession(SessionKey key) throws SessionException
{    if (key == null) {        throw new NullPointerException("SessionKey argument cannot be null.");    }    return doGetSession(key);}
da7465775a3c2b116a0b0d29e424d2b5cad3ca535b758b73bc0ee19d88866267
lookupRequiredSession
private Session lookupRequiredSession(SessionKey key) throws SessionException
{    Session session = lookupSession(key);    if (session == null) {        String msg = "Unable to locate required Session instance based on SessionKey [" + key + "].";        throw new UnknownSessionException(msg);    }    return session;}
395bee12196fae75c3166ed4cad649b2a7b7b3e503a7894d247c5cb14e1a096a
createExposedSession
protected Session createExposedSession(Session session, SessionContext context)
{    return new DelegatingSession(this, new DefaultSessionKey(session.getId()));}
fe832b3f81ae0077b40fa478f9c7b92ede527e2bf1c09942175ce6b66a1d71a7
createExposedSession
protected Session createExposedSession(Session session, SessionKey key)
{    return new DelegatingSession(this, new DefaultSessionKey(session.getId()));}
5e388e63d7220158354df16a1dc218bd7b7d57c05b737ce1f71c72e97c5b64a9
beforeInvalidNotification
protected Session beforeInvalidNotification(Session session)
{    return new ImmutableProxiedSession(session);}
044abe44ccf06ebee99480d851fd7b3911567aec472bf39899468e8dec402477
notifyStart
protected void notifyStart(Session session)
{    for (SessionListener listener : this.listeners) {        listener.onStart(session);    }}
cf51579856d05edf58eb42fe79d89a44f4511c64cc97a1086b70459426b0088d
notifyStop
protected void notifyStop(Session session)
{    Session forNotification = beforeInvalidNotification(session);    for (SessionListener listener : this.listeners) {        listener.onStop(forNotification);    }}
b94c1a9220494735a5ab7cef1baed8c4fc09e44c77d70f4357b2118858e915c8
notifyExpiration
protected void notifyExpiration(Session session)
{    Session forNotification = beforeInvalidNotification(session);    for (SessionListener listener : this.listeners) {        listener.onExpiration(forNotification);    }}
c3af5b527ad640303bfe75470253eebd8ccf86f0cc2df152cd67ac7e5ffdac62
getStartTimestamp
public Date getStartTimestamp(SessionKey key)
{    return lookupRequiredSession(key).getStartTimestamp();}
d80908929385eb1d6a6279648cd346793ab9301851a1ccaf87d6e9cd97e3f8c9
getLastAccessTime
public Date getLastAccessTime(SessionKey key)
{    return lookupRequiredSession(key).getLastAccessTime();}
3111fd3acedd31d70e848ed4567dc6daead0e795171f601e6a1e9a4dba8cd719
getTimeout
public long getTimeout(SessionKey key) throws InvalidSessionException
{    return lookupRequiredSession(key).getTimeout();}
9d7ce964fce1ae63b122e8ad281616d8496ec0776722e3c396381081b9f65dcc
setTimeout
public void setTimeout(SessionKey key, long maxIdleTimeInMillis) throws InvalidSessionException
{    Session s = lookupRequiredSession(key);    s.setTimeout(maxIdleTimeInMillis);    onChange(s);}
acd70b52553a25a3b669d82e5eb6047bf24425d1762714e4ff3264372f5dc700
touch
public void touch(SessionKey key) throws InvalidSessionException
{    Session s = lookupRequiredSession(key);    s.touch();    onChange(s);}
b7c603659bd07c9a3ebcc207c4347de30cc1359cab85195523e8fb6c79a65b6f
getHost
public String getHost(SessionKey key)
{    return lookupRequiredSession(key).getHost();}
a044dd057b7dabcdebca66b4172a8cc8661f76b5608d034302368133aed7ca3c
getAttributeKeys
public Collection<Object> getAttributeKeys(SessionKey key)
{    Collection<Object> c = lookupRequiredSession(key).getAttributeKeys();    if (!CollectionUtils.isEmpty(c)) {        return Collections.unmodifiableCollection(c);    }    return Collections.emptySet();}
0fc5f2b4b8f94195330978554dea9dca7d04f68390ba844bb23e8914b7353db8
getAttribute
public Object getAttribute(SessionKey sessionKey, Object attributeKey) throws InvalidSessionException
{    return lookupRequiredSession(sessionKey).getAttribute(attributeKey);}
27a5e85b4908fa9c94e84f02a53d5819f2233255789ee2acbca95b4ba2456661
setAttribute
public void setAttribute(SessionKey sessionKey, Object attributeKey, Object value) throws InvalidSessionException
{    if (value == null) {        removeAttribute(sessionKey, attributeKey);    } else {        Session s = lookupRequiredSession(sessionKey);        s.setAttribute(attributeKey, value);        onChange(s);    }}
c23c8d67ce62d9e731aa4e954098893d169ff4011498f7d5bda051c85c3f20fe
removeAttribute
public Object removeAttribute(SessionKey sessionKey, Object attributeKey) throws InvalidSessionException
{    Session s = lookupRequiredSession(sessionKey);    Object removed = s.removeAttribute(attributeKey);    if (removed != null) {        onChange(s);    }    return removed;}
1c94608ab6b0639eac07a5fa3cea9050583ba9de96e05eba7f3f464dbfd6e89d
isValid
public boolean isValid(SessionKey key)
{    try {        checkValid(key);        return true;    } catch (InvalidSessionException e) {        return false;    }}
693ce70ae575fc3ffe125ee7e7b4230ef245d2e6520b6bc1fb5283831da08098
stop
public void stop(SessionKey key) throws InvalidSessionException
{    Session session = lookupRequiredSession(key);    try {        if (log.isDebugEnabled()) {            log.debug("Stopping session with id [" + session.getId() + "]");        }        session.stop();        onStop(session, key);        notifyStop(session);    } finally {        afterStopped(session);    }}
c8a106509e1800963e7c57f6d9defa8ed01787346761d98a50fa2ab917fdd190
onStop
protected void onStop(Session session, SessionKey key)
{    onStop(session);}
c35dda5d9ae165e8a30c872eac95379702fbbdb04a7e1e9beea8af6bd94b525a
onStop
protected void onStop(Session session)
{    onChange(session);}
46869ac67060438924ea4b4f5b8b6d1bcbc94970c3f22453ed6f5c215e22d0d4
afterStopped
protected void afterStopped(Session session)
{}
1644680c75c53090cff6e225686dac70e1a5e99bc048b5dcf7b79306321b1d74
checkValid
public void checkValid(SessionKey key) throws InvalidSessionException
{        lookupRequiredSession(key);}
548ce4d0ba84b3ab331c364078f07ee2a19eb897deabf4b005b5a89500fa486b
onChange
protected void onChange(Session s)
{}
fb098a585354f72a347f511cbee8c78d27b37e3de4680dfedcd8f5b8e67ff2a9
getGlobalSessionTimeout
public long getGlobalSessionTimeout()
{    return this.globalSessionTimeout;}
7b1d5436f8a8e6ab9af5c56152bc1944ae37822193673daf2d9924ec2801af2f
setGlobalSessionTimeout
public void setGlobalSessionTimeout(long globalSessionTimeout)
{    this.globalSessionTimeout = globalSessionTimeout;}
56fc1c4c769fe3e6a4ca57dd2e79609ea275c040d2089b1faa30f674965e10eb
isSessionValidationSchedulerEnabled
public boolean isSessionValidationSchedulerEnabled()
{    return sessionValidationSchedulerEnabled;}
11e2cdabc218dd2ee315e838ad05b985d48395acfd4e0a8681acb70954520707
setSessionValidationSchedulerEnabled
public void setSessionValidationSchedulerEnabled(boolean sessionValidationSchedulerEnabled)
{    this.sessionValidationSchedulerEnabled = sessionValidationSchedulerEnabled;}
7460e321d16e5bc6d2108cafa5c284e0a9364cb9d6e4bc8526cec5301da168dc
setSessionValidationScheduler
public void setSessionValidationScheduler(SessionValidationScheduler sessionValidationScheduler)
{    this.sessionValidationScheduler = sessionValidationScheduler;}
ca7af27e6d7ddf571122d8aeab6444a0729bf32daf759814ab02b716f7ea5231
getSessionValidationScheduler
public SessionValidationScheduler getSessionValidationScheduler()
{    return sessionValidationScheduler;}
a566ea527f9ec1d816d20ee535dfb20dce2906537531aca630470766d71bd72b
enableSessionValidationIfNecessary
private void enableSessionValidationIfNecessary()
{    SessionValidationScheduler scheduler = getSessionValidationScheduler();    if (isSessionValidationSchedulerEnabled() && (scheduler == null || !scheduler.isEnabled())) {        enableSessionValidation();    }}
fa6d7c0f2f8b483b5c053e7d23b8c333eea487fdf5509a7a95075ccc6d596857
setSessionValidationInterval
public void setSessionValidationInterval(long sessionValidationInterval)
{    this.sessionValidationInterval = sessionValidationInterval;}
7c63691e40eaa7e4ad3afe7bc69a67b93f42a4d0388b3d2332ed0a22bd729755
getSessionValidationInterval
public long getSessionValidationInterval()
{    return sessionValidationInterval;}
296373b279ec1abec59c562ff19e7441f158adf51ca2e74e284089181696e187
doGetSession
protected final Session doGetSession(final SessionKey key) throws InvalidSessionException
{    enableSessionValidationIfNecessary();    log.trace("Attempting to retrieve session with key {}", key);    Session s = retrieveSession(key);    if (s != null) {        validate(s, key);    }    return s;}
1df832eb5d783a1bad4fb26fd230cd6a35f3d1a0158f81bfa67f4d41e1a2f1b5
createSession
protected Session createSession(SessionContext context) throws AuthorizationException
{    enableSessionValidationIfNecessary();    return doCreateSession(context);}
3f813a161901b5fa3118f9bc4d5460a8999e50eb15787b7a8fb847d268671db9
validate
protected void validate(Session session, SessionKey key) throws InvalidSessionException
{    try {        doValidate(session);    } catch (ExpiredSessionException ese) {        onExpiration(session, ese, key);        throw ese;    } catch (InvalidSessionException ise) {        onInvalidation(session, ise, key);        throw ise;    }}
9d83d50266b81c5bb1ef6214697ca7542c84f4208e166510288d628a1d2d6794
onExpiration
protected void onExpiration(Session s, ExpiredSessionException ese, SessionKey key)
{    log.trace("Session with id [{}] has expired.", s.getId());    try {        onExpiration(s);        notifyExpiration(s);    } finally {        afterExpired(s);    }}
cc67da9613bbd1230ae55f55112ee3b7c528b88c67ddec235486e3c8e9862e70
onExpiration
protected void onExpiration(Session session)
{    onChange(session);}
2248bd12461fec2c86f73bc3407903a2b13ed79d32159aae188b1e0e3f17badb
afterExpired
protected void afterExpired(Session session)
{}
e7ab29b7e671587f597299f95d042e2420e14c2e04e708ea3e8bd0c03dd62720
onInvalidation
protected void onInvalidation(Session s, InvalidSessionException ise, SessionKey key)
{    if (ise instanceof ExpiredSessionException) {        onExpiration(s, (ExpiredSessionException) ise, key);        return;    }    log.trace("Session with id [{}] is invalid.", s.getId());    try {        onStop(s);        notifyStop(s);    } finally {        afterStopped(s);    }}
fe580c0e66200c0b6ddfc2709ce4d45c424b6afc06e8cdf9adff7d6cd8f3b694
doValidate
protected void doValidate(Session session) throws InvalidSessionException
{    if (session instanceof ValidatingSession) {        ((ValidatingSession) session).validate();    } else {        String msg = "The " + getClass().getName() + " implementation only supports validating " + "Session implementations of the " + ValidatingSession.class.getName() + " interface.  " + "Please either implement this interface in your session implementation or override the " + AbstractValidatingSessionManager.class.getName() + ".doValidate(Session) method to perform validation.";        throw new IllegalStateException(msg);    }}
37e7e3d8e707719c8a2b0680edad84044b66678d78853e02709ce6a5b85e52d5
getTimeout
protected long getTimeout(Session session)
{    return session.getTimeout();}
6dd83bea03eab8c7fe018afba5ef3987770933fadca17e75de16a17fc476c0f3
createSessionValidationScheduler
protected SessionValidationScheduler createSessionValidationScheduler()
{    ExecutorServiceSessionValidationScheduler scheduler;    if (log.isDebugEnabled()) {        log.debug("No sessionValidationScheduler set.  Attempting to create default instance.");    }    scheduler = new ExecutorServiceSessionValidationScheduler(this);    scheduler.setInterval(getSessionValidationInterval());    if (log.isTraceEnabled()) {        log.trace("Created default SessionValidationScheduler instance of type [" + scheduler.getClass().getName() + "].");    }    return scheduler;}
8e2f8c3b35cf23072f6657cc874c48800099e12019fc382355b1b0ac690c2f9f
enableSessionValidation
protected synchronized void enableSessionValidation()
{    SessionValidationScheduler scheduler = getSessionValidationScheduler();    if (scheduler == null) {        scheduler = createSessionValidationScheduler();        setSessionValidationScheduler(scheduler);    }        if (!scheduler.isEnabled()) {        if (log.isInfoEnabled()) {            log.info("Enabling session validation scheduler...");        }        scheduler.enableSessionValidation();        afterSessionValidationEnabled();    }}
c1fa5c20e10d2fa7907b531d86c53e6d363261223c95bb8b6b311797e8d40e39
afterSessionValidationEnabled
protected void afterSessionValidationEnabled()
{}
9a150a830b867a0fb6e589fc9da5f3fb6922a4bc3f9ca2ef2ffa85a4d0a85973
disableSessionValidation
protected synchronized void disableSessionValidation()
{    beforeSessionValidationDisabled();    SessionValidationScheduler scheduler = getSessionValidationScheduler();    if (scheduler != null) {        try {            scheduler.disableSessionValidation();            if (log.isInfoEnabled()) {                log.info("Disabled session validation scheduler.");            }        } catch (Exception e) {            if (log.isDebugEnabled()) {                String msg = "Unable to disable SessionValidationScheduler.  Ignoring (shutting down)...";                log.debug(msg, e);            }        }        LifecycleUtils.destroy(scheduler);        setSessionValidationScheduler(null);    }}
1ff7e284c815d90ef0d716df139bef08961f31ce1304fb1b56ac812b6415ec99
beforeSessionValidationDisabled
protected void beforeSessionValidationDisabled()
{}
9cabd71a85d4928de1c9a46601c11d584f3e7522ee61146e1117d0d360a20b2e
destroy
public void destroy()
{    disableSessionValidation();}
0167caf7b33984cb0afeaf4e8acc8cf5101551cf6a05705022893bdff000e62e
validateSessions
public void validateSessions()
{    if (log.isInfoEnabled()) {        log.info("Validating all active sessions...");    }    int invalidCount = 0;    Collection<Session> activeSessions = getActiveSessions();    if (activeSessions != null && !activeSessions.isEmpty()) {        for (Session s : activeSessions) {            try {                                                SessionKey key = new DefaultSessionKey(s.getId());                validate(s, key);            } catch (InvalidSessionException e) {                if (log.isDebugEnabled()) {                    boolean expired = (e instanceof ExpiredSessionException);                    String msg = "Invalidated session with id [" + s.getId() + "]" + (expired ? " (expired)" : " (stopped)");                    log.debug(msg);                }                invalidCount++;            }        }    }    if (log.isInfoEnabled()) {        String msg = "Finished session validation.";        if (invalidCount > 0) {            msg += "  [" + invalidCount + "] sessions were stopped.";        } else {            msg += "  No sessions were stopped.";        }        log.info(msg);    }}
165b1c9352ad3d309866d5286d1a7fd8eae4d022cb5ad661b1269ac75c218ebb
getHost
public String getHost()
{    return getTypedValue(HOST, String.class);}
975df858cc36ca4ae96e66da70c7651a9608d19019688712f418ff1b046d6911
setHost
public void setHost(String host)
{    if (StringUtils.hasText(host)) {        put(HOST, host);    }}
23e4deaeb77664a60acd61b50107a8c8b6563d0ab978152e7d9735b704182abc
getSessionId
public Serializable getSessionId()
{    return getTypedValue(SESSION_ID, Serializable.class);}
a04c177ea48803abcdedc246a29e093897d65fee4f2b68ca63fbfaf5565c02d1
setSessionId
public void setSessionId(Serializable sessionId)
{    nullSafePut(SESSION_ID, sessionId);}
a04c177ea48803abcdedc246a29e093897d65fee4f2b68ca63fbfaf5565c02d1
setSessionId
public void setSessionId(Serializable sessionId)
{    this.sessionId = sessionId;}
23e4deaeb77664a60acd61b50107a8c8b6563d0ab978152e7d9735b704182abc
getSessionId
public Serializable getSessionId()
{    return this.sessionId;}
5421b4acb2db2901090bcc2f9aeb86de125279a97d04d0e2118b4ccfeca7048d
setSessionDAO
public void setSessionDAO(SessionDAO sessionDAO)
{    this.sessionDAO = sessionDAO;    applyCacheManagerToSessionDAO();}
77e9d66feaa3909733d4d85902e7fb1663ac1d4952e7a5e9bd63dfe5f3550be2
getSessionDAO
public SessionDAO getSessionDAO()
{    return this.sessionDAO;}
e546c27149b840e725a7fbdf292b42e67bb22e72149d4cc81375e3a10e363987
getSessionFactory
public SessionFactory getSessionFactory()
{    return sessionFactory;}
9374b6dee252b1695fcbc6b0ad0a62bd2112dc8acabd270ce280c737d0037374
setSessionFactory
public void setSessionFactory(SessionFactory sessionFactory)
{    this.sessionFactory = sessionFactory;}
b485e4832163f4ef564fa4d0a97413cabb05282a6a660accb7352764bbac0eea
isDeleteInvalidSessions
public boolean isDeleteInvalidSessions()
{    return deleteInvalidSessions;}
84c8317d8ac965371c9c22b316ba186811a43c9fbf5bd43de637ef2362eb3e26
setDeleteInvalidSessions
public void setDeleteInvalidSessions(boolean deleteInvalidSessions)
{    this.deleteInvalidSessions = deleteInvalidSessions;}
693625768ebe9598acbfb2af178abc5b90702d7019d784975fa548c3afa3ed99
setCacheManager
public void setCacheManager(CacheManager cacheManager)
{    this.cacheManager = cacheManager;    applyCacheManagerToSessionDAO();}
f9a71dc1d5136f113fc72d535fdea2ad7f1ae41a46b1623fad613ed7410aa74b
applyCacheManagerToSessionDAO
private void applyCacheManagerToSessionDAO()
{    if (this.cacheManager != null && this.sessionDAO != null && this.sessionDAO instanceof CacheManagerAware) {        ((CacheManagerAware) this.sessionDAO).setCacheManager(this.cacheManager);    }}
aecfc9492666a19d9823c02df16fd540dc6e1cbcd60afd6fadacbc153566375a
doCreateSession
protected Session doCreateSession(SessionContext context)
{    Session s = newSessionInstance(context);    if (log.isTraceEnabled()) {        log.trace("Creating session for host {}", s.getHost());    }    create(s);    return s;}
f4c9a1da70a7c81ee9166b9d8930549746915e66690628bad8aae9c7535e6d6e
newSessionInstance
protected Session newSessionInstance(SessionContext context)
{    return getSessionFactory().createSession(context);}
61695568f2c8b8301f3455ff8f3c0e054564402bbdaae5bb84d49101eb05ca64
create
protected void create(Session session)
{    if (log.isDebugEnabled()) {        log.debug("Creating new EIS record for new session instance [" + session + "]");    }    sessionDAO.create(session);}
c35dda5d9ae165e8a30c872eac95379702fbbdb04a7e1e9beea8af6bd94b525a
onStop
protected void onStop(Session session)
{    if (session instanceof SimpleSession) {        SimpleSession ss = (SimpleSession) session;        Date stopTs = ss.getStopTimestamp();        ss.setLastAccessTime(stopTs);    }    onChange(session);}
46869ac67060438924ea4b4f5b8b6d1bcbc94970c3f22453ed6f5c215e22d0d4
afterStopped
protected void afterStopped(Session session)
{    if (isDeleteInvalidSessions()) {        delete(session);    }}
cc67da9613bbd1230ae55f55112ee3b7c528b88c67ddec235486e3c8e9862e70
onExpiration
protected void onExpiration(Session session)
{    if (session instanceof SimpleSession) {        ((SimpleSession) session).setExpired(true);    }    onChange(session);}
2248bd12461fec2c86f73bc3407903a2b13ed79d32159aae188b1e0e3f17badb
afterExpired
protected void afterExpired(Session session)
{    if (isDeleteInvalidSessions()) {        delete(session);    }}
87d189651f13fac95ea12454c543d5b20855e2f5a5840d3739f2fe72219bbec6
onChange
protected void onChange(Session session)
{    sessionDAO.update(session);}
266bd8ecc23d7c8882e247e4ad42e97937399f5351887ac9a91d79ba76096f3e
retrieveSession
protected Session retrieveSession(SessionKey sessionKey) throws UnknownSessionException
{    Serializable sessionId = getSessionId(sessionKey);    if (sessionId == null) {        log.debug("Unable to resolve session ID from SessionKey [{}].  Returning null to indicate a " + "session could not be found.", sessionKey);        return null;    }    Session s = retrieveSessionFromDataSource(sessionId);    if (s == null) {                String msg = "Could not find session with ID [" + sessionId + "]";        throw new UnknownSessionException(msg);    }    return s;}
eb898666fe64d17c6ee304a728c33403d79b3b9db4f3a41c5fcfd8c1177752d1
getSessionId
protected Serializable getSessionId(SessionKey sessionKey)
{    return sessionKey.getSessionId();}
8824db278d803a0b5570e53a08fd9ca6ffba950ff4382b6e774cade949010d20
retrieveSessionFromDataSource
protected Session retrieveSessionFromDataSource(Serializable sessionId) throws UnknownSessionException
{    return sessionDAO.readSession(sessionId);}
d32265d2e86dda6d53d1d512c0b076daaec3a9868dfb042a367215780ad428cc
delete
protected void delete(Session session)
{    sessionDAO.delete(session);}
a88e18d5369761fa36cafc9a5a153fd85ddc194881efe5d22c57204ccb185c15
getActiveSessions
protected Collection<Session> getActiveSessions()
{    Collection<Session> active = sessionDAO.getActiveSessions();    return active != null ? active : Collections.<Session>emptySet();}
1b47661190b3813bb9939d9e39dd3b48f7a2a65d160e0ec76b70cd54f7b7471c
getId
public Serializable getId()
{    return key.getSessionId();}
fe8d302181c3820c1119f97c4bef14795e630da09a9c873a888ff4d09d86b275
getStartTimestamp
public Date getStartTimestamp()
{    if (startTimestamp == null) {        startTimestamp = sessionManager.getStartTimestamp(key);    }    return startTimestamp;}
25ba1f7fdfb9e040a5661969c381484730fc729c24e3b2a787c587550a058803
getLastAccessTime
public Date getLastAccessTime()
{        return sessionManager.getLastAccessTime(key);}
1b89852ed0920e44be17fab17170d5e824a68e67943fbd9366e0cfcfba6d756e
getTimeout
public long getTimeout() throws InvalidSessionException
{    return sessionManager.getTimeout(key);}
d6fb8156f0da45eb46e124ff490bb291700ed2520e18bc78d544c9f66b9d64b1
setTimeout
public void setTimeout(long maxIdleTimeInMillis) throws InvalidSessionException
{    sessionManager.setTimeout(key, maxIdleTimeInMillis);}
165b1c9352ad3d309866d5286d1a7fd8eae4d022cb5ad661b1269ac75c218ebb
getHost
public String getHost()
{    if (host == null) {        host = sessionManager.getHost(key);    }    return host;}
694896c50108ffab355e12f28c5b1f039e4ee4ce710ccdfab3e35afaa5389ff7
touch
public void touch() throws InvalidSessionException
{    sessionManager.touch(key);}
1a1361a165bebeb83cd49e6148367728764fd34bea14dda08db81c1651e25a47
stop
public void stop() throws InvalidSessionException
{    sessionManager.stop(key);}
04c037b3e30baa218c131cdccbd86fa4d369636d55919a6c3ae536baf344cf08
getAttributeKeys
public Collection<Object> getAttributeKeys() throws InvalidSessionException
{    return sessionManager.getAttributeKeys(key);}
2ae9744b9324e5a2cfe0ba4886483c28e37b191154951f0eb612d2bd65e5bc35
getAttribute
public Object getAttribute(Object attributeKey) throws InvalidSessionException
{    return sessionManager.getAttribute(this.key, attributeKey);}
d73f08b180e6299158ba10100075e30dd14a433b4dda931675acdb0b7087dbce
setAttribute
public void setAttribute(Object attributeKey, Object value) throws InvalidSessionException
{    if (value == null) {        removeAttribute(attributeKey);    } else {        sessionManager.setAttribute(this.key, attributeKey, value);    }}
f3746c74cd68e22ac724eae2d8099a28b34a15d316bb3de687f7ce5d4118be7a
removeAttribute
public Object removeAttribute(Object attributeKey) throws InvalidSessionException
{    return sessionManager.removeAttribute(this.key, attributeKey);}
7c64bac5146304d9e3b47a881cde98cc7c777788f8bb85d2e95f6aa7c3349aac
getSessionIdGenerator
public SessionIdGenerator getSessionIdGenerator()
{    return sessionIdGenerator;}
db58182fcdd5c11694e52c189f9fe72aa85c08914680b0b4bd796e173030ff29
setSessionIdGenerator
public void setSessionIdGenerator(SessionIdGenerator sessionIdGenerator)
{    this.sessionIdGenerator = sessionIdGenerator;}
04aa101b3649b0163e663d1e761233c9c95604885996b2ca688352641bcf5d25
generateSessionId
protected Serializable generateSessionId(Session session)
{    if (this.sessionIdGenerator == null) {        String msg = "sessionIdGenerator attribute has not been configured.";        throw new IllegalStateException(msg);    }    return this.sessionIdGenerator.generateId(session);}
529332e59996236ed04dd5d29237556e8b072c780ef908f737f3d5e4a1f507b9
create
public Serializable create(Session session)
{    Serializable sessionId = doCreate(session);    verifySessionId(sessionId);    return sessionId;}
16711fe505c6c960deae085e6d07b1f20758d13fa86dd0c79e336db2233633f9
verifySessionId
private void verifySessionId(Serializable sessionId)
{    if (sessionId == null) {        String msg = "sessionId returned from doCreate implementation is null.  Please verify the implementation.";        throw new IllegalStateException(msg);    }}
30d8d4d8ea9c6b00545d5f2a0529c848977e453fc8a0fe84245070c65288db5d
assignSessionId
protected void assignSessionId(Session session, Serializable sessionId)
{    ((SimpleSession) session).setId(sessionId);}
997d39a8070f7fd20a4227abd7fc07cfcb8800a122cf3ef639bf10b4696abe5f
readSession
public Session readSession(Serializable sessionId) throws UnknownSessionException
{    Session s = doReadSession(sessionId);    if (s == null) {        throw new UnknownSessionException("There is no session with id [" + sessionId + "]");    }    return s;}
693625768ebe9598acbfb2af178abc5b90702d7019d784975fa548c3afa3ed99
setCacheManager
public void setCacheManager(CacheManager cacheManager)
{    this.cacheManager = cacheManager;}
d235282ed55f1ba3e1df53154817dddfd84fb452c359aef3094af8724d330661
getCacheManager
public CacheManager getCacheManager()
{    return cacheManager;}
5b2ec76f4a29355d620c641257da5c31304b39e3fe8fce30ec6eb5a8392ee14d
getActiveSessionsCacheName
public String getActiveSessionsCacheName()
{    return activeSessionsCacheName;}
c3f0978c8211b18fa076000682181cbb7a2515ec5684abaa31c2b00122c892f3
setActiveSessionsCacheName
public void setActiveSessionsCacheName(String activeSessionsCacheName)
{    this.activeSessionsCacheName = activeSessionsCacheName;}
42c0291bc88077cbc3c7ff2fb47ed607a25afe2a9937b859037b2a712d8a8c28
getActiveSessionsCache
public Cache<Serializable, Session> getActiveSessionsCache()
{    return this.activeSessions;}
14281382fe57527e78bdd762ee24f3864e67b3f9a9772b57fa3c592615c1c55b
setActiveSessionsCache
public void setActiveSessionsCache(Cache<Serializable, Session> cache)
{    this.activeSessions = cache;}
59e95792b64d3c64350c3d08261200c718ad3a4fb249a404ee9b032d959ea006
getActiveSessionsCacheLazy
private Cache<Serializable, Session> getActiveSessionsCacheLazy()
{    if (this.activeSessions == null) {        this.activeSessions = createActiveSessionsCache();    }    return activeSessions;}
9b3314bddfbe065c58abfd2c316956bed2ab30de76878d8fe51279f4bc14a09f
createActiveSessionsCache
protected Cache<Serializable, Session> createActiveSessionsCache()
{    Cache<Serializable, Session> cache = null;    CacheManager mgr = getCacheManager();    if (mgr != null) {        String name = getActiveSessionsCacheName();        cache = mgr.getCache(name);    }    return cache;}
529332e59996236ed04dd5d29237556e8b072c780ef908f737f3d5e4a1f507b9
create
public Serializable create(Session session)
{    Serializable sessionId = super.create(session);    cache(session, sessionId);    return sessionId;}
1beec03302c607699097875f11eb6a0ad2f9dbbd8629d3582d6634b5cc0618a6
getCachedSession
protected Session getCachedSession(Serializable sessionId)
{    Session cached = null;    if (sessionId != null) {        Cache<Serializable, Session> cache = getActiveSessionsCacheLazy();        if (cache != null) {            cached = getCachedSession(sessionId, cache);        }    }    return cached;}
26c734ccb6c08accd54fc63a2febe4a3fb4003a8011941a86488bf6365887e8d
getCachedSession
protected Session getCachedSession(Serializable sessionId, Cache<Serializable, Session> cache)
{    return cache.get(sessionId);}
440b7a3eae19ff4ec5672b55ec4ee6142724418b439b383cf56dd516d0bc7965
cache
protected void cache(Session session, Serializable sessionId)
{    if (session == null || sessionId == null) {        return;    }    Cache<Serializable, Session> cache = getActiveSessionsCacheLazy();    if (cache == null) {        return;    }    cache(session, sessionId, cache);}
8514710df16aeb20d4ad885b28a5e5f983d1c757c6881d8b52edb341a7951ddc
cache
protected void cache(Session session, Serializable sessionId, Cache<Serializable, Session> cache)
{    cache.put(sessionId, session);}
997d39a8070f7fd20a4227abd7fc07cfcb8800a122cf3ef639bf10b4696abe5f
readSession
public Session readSession(Serializable sessionId) throws UnknownSessionException
{    Session s = getCachedSession(sessionId);    if (s == null) {        s = super.readSession(sessionId);    }    return s;}
0d102c3a9937b6caedc5be1ad8d394bd7b02be9402816302b84fa0f6ed316f8e
update
public void update(Session session) throws UnknownSessionException
{    doUpdate(session);    if (session instanceof ValidatingSession) {        if (((ValidatingSession) session).isValid()) {            cache(session, session.getId());        } else {            uncache(session);        }    } else {        cache(session, session.getId());    }}
8b70b8aa972d60b94920f15ff5c01838c3ae1e86624b875ee7c4c2fd86b0acf8
delete
public void delete(Session session)
{    uncache(session);    doDelete(session);}
7bdab90cc304cc1f40705b6b0dd29a7a83c14bbf9b7f9683c80c403dc1acb05e
uncache
protected void uncache(Session session)
{    if (session == null) {        return;    }    Serializable id = session.getId();    if (id == null) {        return;    }    Cache<Serializable, Session> cache = getActiveSessionsCacheLazy();    if (cache != null) {        cache.remove(id);    }}
f73c1a1d0433cfbddf8cc7df8b8c68b96b1055664210033c174d589e58d87f02
getActiveSessions
public Collection<Session> getActiveSessions()
{    Cache<Serializable, Session> cache = getActiveSessionsCacheLazy();    if (cache != null) {        return cache.values();    } else {        return Collections.emptySet();    }}
b22a83c059f90f3901413b8a8f2e44014d9f987daa2f1285009036d9c11ec7b6
createCache
protected Cache<Serializable, Session> createCache(String name) throws CacheException
{    return new MapCache<Serializable, Session>(name, new ConcurrentHashMap<Serializable, Session>());}
cc37625c259e31bbfee4f412d9a9ff4b8f773420dbd1615e8a1bffc77179edba
doCreate
protected Serializable doCreate(Session session)
{    Serializable sessionId = generateSessionId(session);    assignSessionId(session, sessionId);    return sessionId;}
6c0c919274b4f2161adc4fad39edcce69a05f538b0af8d8173f99019f4924efa
doReadSession
protected Session doReadSession(Serializable sessionId)
{        return null;}
8b69afe863ace86ce9aa24184854e7543a37234458c05c43b82d9f01eef20391
doUpdate
protected void doUpdate(Session session)
{}
2114d31d1a0b852ae53e18310bfd88540cb51ce2544fdcabc1e17d7a51620b3a
doDelete
protected void doDelete(Session session)
{}
39e8e01fcb3a7a15c51913283feab8c796b245dd7dc1bd7a07004a32d0e86fd8
generateId
public Serializable generateId(Session session)
{    return UUID.randomUUID().toString();}
cc37625c259e31bbfee4f412d9a9ff4b8f773420dbd1615e8a1bffc77179edba
doCreate
protected Serializable doCreate(Session session)
{    Serializable sessionId = generateSessionId(session);    assignSessionId(session, sessionId);    storeSession(sessionId, session);    return sessionId;}
14f78e7f9ed4ea18dbcfca731695a200e98484177be6fffb459dd87df66afae2
storeSession
protected Session storeSession(Serializable id, Session session)
{    if (id == null) {        throw new NullPointerException("id argument cannot be null.");    }    return sessions.putIfAbsent(id, session);}
6c0c919274b4f2161adc4fad39edcce69a05f538b0af8d8173f99019f4924efa
doReadSession
protected Session doReadSession(Serializable sessionId)
{    return sessions.get(sessionId);}
0d102c3a9937b6caedc5be1ad8d394bd7b02be9402816302b84fa0f6ed316f8e
update
public void update(Session session) throws UnknownSessionException
{    storeSession(session.getId(), session);}
8b70b8aa972d60b94920f15ff5c01838c3ae1e86624b875ee7c4c2fd86b0acf8
delete
public void delete(Session session)
{    if (session == null) {        throw new NullPointerException("session argument cannot be null.");    }    Serializable id = session.getId();    if (id != null) {        sessions.remove(id);    }}
f73c1a1d0433cfbddf8cc7df8b8c68b96b1055664210033c174d589e58d87f02
getActiveSessions
public Collection<Session> getActiveSessions()
{    Collection<Session> values = sessions.values();    if (CollectionUtils.isEmpty(values)) {        return Collections.emptySet();    } else {        return Collections.unmodifiableCollection(values);    }}
84a65d1ef4f4975f3504220d6b7b0e0a57dabc36b0e99ded5305364698c4e6d5
getRandom
public Random getRandom()
{    return this.random;}
132287808487db2f908f8e856556a9cfd32ea0cd195b528e37a1ca065b3cb7d4
setRandom
public void setRandom(Random random)
{    this.random = random;}
39e8e01fcb3a7a15c51913283feab8c796b245dd7dc1bd7a07004a32d0e86fd8
generateId
public Serializable generateId(Session session)
{        return Long.toString(getRandom().nextLong());}
79372b0debb52eca86e96aed9ea10ab0f93c56f34f567dff8e489af8fa88b511
getSessionManager
public ValidatingSessionManager getSessionManager()
{    return sessionManager;}
983bcc541c55750a8434da68bb21f92e6eca05086d94de08cb598198ee09ee4d
setSessionManager
public void setSessionManager(ValidatingSessionManager sessionManager)
{    this.sessionManager = sessionManager;}
b785ec3433a08155931cf12a5cc7debca5bb5a7ed542a7a9659f28ff910a9c90
getInterval
public long getInterval()
{    return interval;}
fd2ab406491676f09a7462a8d47b62f91a5f8e0e765d25d00b05aba0471886f7
setInterval
public void setInterval(long interval)
{    this.interval = interval;}
3d48e803344c7a7e8e54f2ff2765c17f83485a126437f578afd50ad0c851ac27
isEnabled
public boolean isEnabled()
{    return this.enabled;}
40c19893f8840819b98d85324bcf11c6701eb678df71b91e15cceb46fd474d06
setThreadNamePrefix
public void setThreadNamePrefix(String threadNamePrefix)
{    this.threadNamePrefix = threadNamePrefix;}
97d997c9b66c7a2f4ca0efee0b48cb38550a7270f5c8e4729fc3e5deee22ea32
getThreadNamePrefix
public String getThreadNamePrefix()
{    return this.threadNamePrefix;}
b4878925c2499833a3cb74e04f3dec10e8ca105d8ce92d6ce3f7c862e53a9e75
enableSessionValidation
public void enableSessionValidation()
{    if (this.interval > 0l) {        this.service = Executors.newSingleThreadScheduledExecutor(new ThreadFactory() {            private final AtomicInteger count = new AtomicInteger(1);            public Thread newThread(Runnable r) {                Thread thread = new Thread(r);                thread.setDaemon(true);                thread.setName(threadNamePrefix + count.getAndIncrement());                return thread;            }        });        this.service.scheduleAtFixedRate(this, interval, interval, TimeUnit.MILLISECONDS);    }    this.enabled = true;}
02166686c9ffef8abcca97b0bc3e38cb95c97860d78686958b46127a2ecadb18
newThread
public Thread newThread(Runnable r)
{    Thread thread = new Thread(r);    thread.setDaemon(true);    thread.setName(threadNamePrefix + count.getAndIncrement());    return thread;}
4560d80c2474cc2770be19fbc06c60741920c59992e6b13524f8a5b688ec285a
run
public void run()
{    if (log.isDebugEnabled()) {        log.debug("Executing session validation...");    }    long startTime = System.currentTimeMillis();    this.sessionManager.validateSessions();    long stopTime = System.currentTimeMillis();    if (log.isDebugEnabled()) {        log.debug("Session validation completed successfully in " + (stopTime - startTime) + " milliseconds.");    }}
dac01f5af8e8c6469573bd33109e41c3ea8839076069bc09c7927e6cffc45b1b
disableSessionValidation
public void disableSessionValidation()
{    if (this.service != null) {        this.service.shutdownNow();    }    this.enabled = false;}
ea0aa08450dd320c2e56ef1e2f3cd95a4c1a289aa8ca9ac399e702ba16a944cd
throwImmutableException
protected void throwImmutableException() throws InvalidSessionException
{    String msg = "This session is immutable and read-only - it cannot be altered.  This is usually because " + "the session has been stopped or expired already.";    throw new InvalidSessionException(msg);}
d6fb8156f0da45eb46e124ff490bb291700ed2520e18bc78d544c9f66b9d64b1
setTimeout
public void setTimeout(long maxIdleTimeInMillis) throws InvalidSessionException
{    throwImmutableException();}
694896c50108ffab355e12f28c5b1f039e4ee4ce710ccdfab3e35afaa5389ff7
touch
public void touch() throws InvalidSessionException
{    throwImmutableException();}
1a1361a165bebeb83cd49e6148367728764fd34bea14dda08db81c1651e25a47
stop
public void stop() throws InvalidSessionException
{    throwImmutableException();}
fabc75ab1f1c81583fce31e6ffb2bef9aa9456483d521aa88f7fea3511e46c54
setAttribute
public void setAttribute(Object key, Object value) throws InvalidSessionException
{    throwImmutableException();}
2eae1ea784aa790ee89b8281b3f06790fdb79f2dff73ec48f9358c0a2a020dae
removeAttribute
public Object removeAttribute(Object key) throws InvalidSessionException
{    throwImmutableException();        throw new InternalError("This code should never execute - please report this as a bug!");}
1b47661190b3813bb9939d9e39dd3b48f7a2a65d160e0ec76b70cd54f7b7471c
getId
public Serializable getId()
{    return this.id;}
d450e720fdf912f8e678ac5f44507d11c6cb387a1a357b85549da4c725ab6f9a
setId
public void setId(Serializable id)
{    this.id = id;}
fe8d302181c3820c1119f97c4bef14795e630da09a9c873a888ff4d09d86b275
getStartTimestamp
public Date getStartTimestamp()
{    return startTimestamp;}
9ee44db090bc74ca4a93aebac73b958f0622a5f5f2e474f7467574deb453815c
setStartTimestamp
public void setStartTimestamp(Date startTimestamp)
{    this.startTimestamp = startTimestamp;}
79c1c9a780370c15f9f18aedcda37794e3dd3f5d5a82f8bbeb676e6c41fae716
getStopTimestamp
public Date getStopTimestamp()
{    return stopTimestamp;}
ad9d594d4ae8ceb04dc10d49587b86a1e88ee723b2be4907fa1ddbee8c628526
setStopTimestamp
public void setStopTimestamp(Date stopTimestamp)
{    this.stopTimestamp = stopTimestamp;}
25ba1f7fdfb9e040a5661969c381484730fc729c24e3b2a787c587550a058803
getLastAccessTime
public Date getLastAccessTime()
{    return lastAccessTime;}
3b24cdae5ae40221366751eeca3d3f30c01569cc0baa56c33d6a0c688738c70f
setLastAccessTime
public void setLastAccessTime(Date lastAccessTime)
{    this.lastAccessTime = lastAccessTime;}
29ea79acb04eb3020a70e67f57e217cd5daa9712eb7d0f37722f44503f68fc65
isExpired
public boolean isExpired()
{    return expired;}
6a96cccbb87c15837465b92e0c5e5182c7d6127412df2a3985b390346e12336f
setExpired
public void setExpired(boolean expired)
{    this.expired = expired;}
cc169cd7e343039ac53b992dd789247f8d6d9abf791e1dd1552ebadba8e74245
getTimeout
public long getTimeout()
{    return timeout;}
93ae46c9aad9a95261ae049939dff5e41cac41171a2b0b7f4037427d98e5455c
setTimeout
public void setTimeout(long timeout)
{    this.timeout = timeout;}
165b1c9352ad3d309866d5286d1a7fd8eae4d022cb5ad661b1269ac75c218ebb
getHost
public String getHost()
{    return host;}
975df858cc36ca4ae96e66da70c7651a9608d19019688712f418ff1b046d6911
setHost
public void setHost(String host)
{    this.host = host;}
2a86fa5132fa42d528453914f9ec39f1b714ac7d78fabfd9679c4a24122d733d
getAttributes
public Map<Object, Object> getAttributes()
{    return attributes;}
30ebbdd355489686d822e8afc7eac9ab027fdbdd2c3332e6ca621ea07a2129cc
setAttributes
public void setAttributes(Map<Object, Object> attributes)
{    this.attributes = attributes;}
6ce98baf68df8ba505f4661367a2b9565df9f6646df5bc475bb67a2674e7d03f
touch
public void touch()
{    this.lastAccessTime = new Date();}
4e5c4125627f8fae3fcb8fa1c2fa25ff160d3eec452770c97bbb601a580fe141
stop
public void stop()
{    if (this.stopTimestamp == null) {        this.stopTimestamp = new Date();    }}
a491a9f635d23a8690b1963a1640e1beac61c983bd9b95a2ab19930376c370f5
isStopped
protected boolean isStopped()
{    return getStopTimestamp() != null;}
5299e5edf0e01186f5da2d9ae5d888cc546f07b5dbb8da5aa320b0efc3a9bda7
expire
protected void expire()
{    stop();    this.expired = true;}
5d7e7426cc3979089b19a726ac0ddfcf063e2e361e313de81396724c2e017b02
isValid
public boolean isValid()
{    return !isStopped() && !isExpired();}
ccbd779f01685164b6b9decb47a3b2678f5745dba4e9ae98963934dac9ef4a35
isTimedOut
protected boolean isTimedOut()
{    if (isExpired()) {        return true;    }    long timeout = getTimeout();    if (timeout >= 0l) {        Date lastAccessTime = getLastAccessTime();        if (lastAccessTime == null) {            String msg = "session.lastAccessTime for session with id [" + getId() + "] is null.  This value must be set at " + "least once, preferably at least upon instantiation.  Please check the " + getClass().getName() + " implementation and ensure " + "this value will be set (perhaps in the constructor?)";            throw new IllegalStateException(msg);        }                                                long expireTimeMillis = System.currentTimeMillis() - timeout;        Date expireTime = new Date(expireTimeMillis);        return lastAccessTime.before(expireTime);    } else {        if (log.isTraceEnabled()) {            log.trace("No timeout for session with id [" + getId() + "].  Session is not considered expired.");        }    }    return false;}
85889fbaec7fef8696c52fc211d5f314af523842ee95c06234e8849e0f90b152
validate
public void validate() throws InvalidSessionException
{        if (isStopped()) {                String msg = "Session with id [" + getId() + "] has been " + "explicitly stopped.  No further interaction under this session is " + "allowed.";        throw new StoppedSessionException(msg);    }        if (isTimedOut()) {        expire();                Date lastAccessTime = getLastAccessTime();        long timeout = getTimeout();        Serializable sessionId = getId();        DateFormat df = DateFormat.getInstance();        String msg = "Session with id [" + sessionId + "] has expired. " + "Last access time: " + df.format(lastAccessTime) + ".  Current time: " + df.format(new Date()) + ".  Session timeout is set to " + timeout / MILLIS_PER_SECOND + " seconds (" + timeout / MILLIS_PER_MINUTE + " minutes)";        if (log.isTraceEnabled()) {            log.trace(msg);        }        throw new ExpiredSessionException(msg);    }}
8efe012b7c00730cd47d06b5e17eb8a0266f4b3da5c168d82ee04eed8e656fc7
getAttributesLazy
private Map<Object, Object> getAttributesLazy()
{    Map<Object, Object> attributes = getAttributes();    if (attributes == null) {        attributes = new HashMap<Object, Object>();        setAttributes(attributes);    }    return attributes;}
04c037b3e30baa218c131cdccbd86fa4d369636d55919a6c3ae536baf344cf08
getAttributeKeys
public Collection<Object> getAttributeKeys() throws InvalidSessionException
{    Map<Object, Object> attributes = getAttributes();    if (attributes == null) {        return Collections.emptySet();    }    return attributes.keySet();}
8c9cfe62bad1a3a5ddfc6827f6a6cc40dd9c3d6965d03175737a7fa8f1844cfe
getAttribute
public Object getAttribute(Object key)
{    Map<Object, Object> attributes = getAttributes();    if (attributes == null) {        return null;    }    return attributes.get(key);}
3ba44b20a3015f2b799244851f6eb376b2ff38d0981ce095cb87070be06bdfb3
setAttribute
public void setAttribute(Object key, Object value)
{    if (value == null) {        removeAttribute(key);    } else {        getAttributesLazy().put(key, value);    }}
6bb6f3cde5bc973bd0c75a5cfa8ac5d248f909cd7a845072639760413c34efc3
removeAttribute
public Object removeAttribute(Object key)
{    Map<Object, Object> attributes = getAttributes();    if (attributes == null) {        return null;    } else {        return attributes.remove(key);    }}
4afeb0868b55bdd8e18a00a3cb43d83e0714378d1c4bb36f0936daefc060e2e8
equals
public boolean equals(Object obj)
{    if (this == obj) {        return true;    }    if (obj instanceof SimpleSession) {        SimpleSession other = (SimpleSession) obj;        Serializable thisId = getId();        Serializable otherId = other.getId();        if (thisId != null && otherId != null) {            return thisId.equals(otherId);        } else {                        return onEquals(other);        }    }    return false;}
326a2544afe9c8e710f377066196c92a768b8426adc8507aacbd31ec609dafba
onEquals
protected boolean onEquals(SimpleSession ss)
{    return (getStartTimestamp() != null ? getStartTimestamp().equals(ss.getStartTimestamp()) : ss.getStartTimestamp() == null) && (getStopTimestamp() != null ? getStopTimestamp().equals(ss.getStopTimestamp()) : ss.getStopTimestamp() == null) && (getLastAccessTime() != null ? getLastAccessTime().equals(ss.getLastAccessTime()) : ss.getLastAccessTime() == null) && (getTimeout() == ss.getTimeout()) && (isExpired() == ss.isExpired()) && (getHost() != null ? getHost().equals(ss.getHost()) : ss.getHost() == null) && (getAttributes() != null ? getAttributes().equals(ss.getAttributes()) : ss.getAttributes() == null);}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    Serializable id = getId();    if (id != null) {        return id.hashCode();    }    int hashCode = getStartTimestamp() != null ? getStartTimestamp().hashCode() : 0;    hashCode = 31 * hashCode + (getStopTimestamp() != null ? getStopTimestamp().hashCode() : 0);    hashCode = 31 * hashCode + (getLastAccessTime() != null ? getLastAccessTime().hashCode() : 0);    hashCode = 31 * hashCode + Long.valueOf(Math.max(getTimeout(), 0)).hashCode();    hashCode = 31 * hashCode + Boolean.valueOf(isExpired()).hashCode();    hashCode = 31 * hashCode + (getHost() != null ? getHost().hashCode() : 0);    hashCode = 31 * hashCode + (getAttributes() != null ? getAttributes().hashCode() : 0);    return hashCode;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    StringBuilder sb = new StringBuilder();    sb.append(getClass().getName()).append(",id=").append(getId());    return sb.toString();}
33b1b3e93b6d5b9eabe840b69f77f62b38d45bec1c2c0db092ec9434d824a8ac
writeObject
private void writeObject(ObjectOutputStream out) throws IOException
{    out.defaultWriteObject();    short alteredFieldsBitMask = getAlteredFieldsBitMask();    out.writeShort(alteredFieldsBitMask);    if (id != null) {        out.writeObject(id);    }    if (startTimestamp != null) {        out.writeObject(startTimestamp);    }    if (stopTimestamp != null) {        out.writeObject(stopTimestamp);    }    if (lastAccessTime != null) {        out.writeObject(lastAccessTime);    }    if (timeout != 0l) {        out.writeLong(timeout);    }    if (expired) {        out.writeBoolean(expired);    }    if (host != null) {        out.writeUTF(host);    }    if (!CollectionUtils.isEmpty(attributes)) {        out.writeObject(attributes);    }}
6fe0c1d06819617999846210cadae5eec355ab96b5d372ef1b71fc9794613343
readObject
private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException
{    in.defaultReadObject();    short bitMask = in.readShort();    if (isFieldPresent(bitMask, ID_BIT_MASK)) {        this.id = (Serializable) in.readObject();    }    if (isFieldPresent(bitMask, START_TIMESTAMP_BIT_MASK)) {        this.startTimestamp = (Date) in.readObject();    }    if (isFieldPresent(bitMask, STOP_TIMESTAMP_BIT_MASK)) {        this.stopTimestamp = (Date) in.readObject();    }    if (isFieldPresent(bitMask, LAST_ACCESS_TIME_BIT_MASK)) {        this.lastAccessTime = (Date) in.readObject();    }    if (isFieldPresent(bitMask, TIMEOUT_BIT_MASK)) {        this.timeout = in.readLong();    }    if (isFieldPresent(bitMask, EXPIRED_BIT_MASK)) {        this.expired = in.readBoolean();    }    if (isFieldPresent(bitMask, HOST_BIT_MASK)) {        this.host = in.readUTF();    }    if (isFieldPresent(bitMask, ATTRIBUTES_BIT_MASK)) {        this.attributes = (Map<Object, Object>) in.readObject();    }}
04dab0f68d82212188e3fa3f238539b661bea2778d8159cb0b65799f49c08c62
getAlteredFieldsBitMask
private short getAlteredFieldsBitMask()
{    int bitMask = 0;    bitMask = id != null ? bitMask | ID_BIT_MASK : bitMask;    bitMask = startTimestamp != null ? bitMask | START_TIMESTAMP_BIT_MASK : bitMask;    bitMask = stopTimestamp != null ? bitMask | STOP_TIMESTAMP_BIT_MASK : bitMask;    bitMask = lastAccessTime != null ? bitMask | LAST_ACCESS_TIME_BIT_MASK : bitMask;    bitMask = timeout != 0l ? bitMask | TIMEOUT_BIT_MASK : bitMask;    bitMask = expired ? bitMask | EXPIRED_BIT_MASK : bitMask;    bitMask = host != null ? bitMask | HOST_BIT_MASK : bitMask;    bitMask = !CollectionUtils.isEmpty(attributes) ? bitMask | ATTRIBUTES_BIT_MASK : bitMask;    return (short) bitMask;}
bfc8c323b026697f9659ac1cdafef90490f4487a4717b5682cd25e9db4734245
isFieldPresent
private static boolean isFieldPresent(short bitMask, int fieldBitMask)
{    return (bitMask & fieldBitMask) != 0;}
cbf18adfa3077c126a71f397f5da1954d2dd1d952348c7c14c272633d3fee4d7
createSession
public Session createSession(SessionContext initData)
{    if (initData != null) {        String host = initData.getHost();        if (host != null) {            return new SimpleSession(host);        }    }    return new SimpleSession();}
1b47661190b3813bb9939d9e39dd3b48f7a2a65d160e0ec76b70cd54f7b7471c
getId
public Serializable getId()
{    return delegate.getId();}
fe8d302181c3820c1119f97c4bef14795e630da09a9c873a888ff4d09d86b275
getStartTimestamp
public Date getStartTimestamp()
{    return delegate.getStartTimestamp();}
25ba1f7fdfb9e040a5661969c381484730fc729c24e3b2a787c587550a058803
getLastAccessTime
public Date getLastAccessTime()
{    return delegate.getLastAccessTime();}
1b89852ed0920e44be17fab17170d5e824a68e67943fbd9366e0cfcfba6d756e
getTimeout
public long getTimeout() throws InvalidSessionException
{    return delegate.getTimeout();}
d6fb8156f0da45eb46e124ff490bb291700ed2520e18bc78d544c9f66b9d64b1
setTimeout
public void setTimeout(long maxIdleTimeInMillis) throws InvalidSessionException
{    delegate.setTimeout(maxIdleTimeInMillis);}
165b1c9352ad3d309866d5286d1a7fd8eae4d022cb5ad661b1269ac75c218ebb
getHost
public String getHost()
{    return delegate.getHost();}
694896c50108ffab355e12f28c5b1f039e4ee4ce710ccdfab3e35afaa5389ff7
touch
public void touch() throws InvalidSessionException
{    delegate.touch();}
1a1361a165bebeb83cd49e6148367728764fd34bea14dda08db81c1651e25a47
stop
public void stop() throws InvalidSessionException
{    delegate.stop();}
04c037b3e30baa218c131cdccbd86fa4d369636d55919a6c3ae536baf344cf08
getAttributeKeys
public Collection<Object> getAttributeKeys() throws InvalidSessionException
{    return delegate.getAttributeKeys();}
2e839eafb57402a6b8147b09ae48d14cc0d2d6f0b83cee1bf7b69ae9cb0332a9
getAttribute
public Object getAttribute(Object key) throws InvalidSessionException
{    return delegate.getAttribute(key);}
fabc75ab1f1c81583fce31e6ffb2bef9aa9456483d521aa88f7fea3511e46c54
setAttribute
public void setAttribute(Object key, Object value) throws InvalidSessionException
{    delegate.setAttribute(key, value);}
2eae1ea784aa790ee89b8281b3f06790fdb79f2dff73ec48f9358c0a2a020dae
removeAttribute
public Object removeAttribute(Object key) throws InvalidSessionException
{    return delegate.removeAttribute(key);}
3d6dab1bdc5714d6e01fdb4554380eec2929bb6821517bb505402f1e81ef77ee
onStart
public void onStart(Session session)
{}
75d613c36c50e6fc2a94f66d4ae49c1dd0e158728f7277cfaf0bf4093f1df4d1
onStop
public void onStop(Session session)
{}
0957417af57f98c016930564e7589702d38cfe25085c8d68c03bf4cc5fb59e65
onExpiration
public void onExpiration(Session session)
{}
a49baf1846a8c6f3b89ff8bd405c02401d449776baca2c3c1b3c83b7565658d1
getPrincipalsLazy
protected Collection getPrincipalsLazy(String realmName)
{    if (realmPrincipals == null) {        realmPrincipals = new LinkedHashMap<String, Set>();    }    Set principals = realmPrincipals.get(realmName);    if (principals == null) {        principals = new LinkedHashSet();        realmPrincipals.put(realmName, principals);    }    return principals;}
03786b397519a1c336f84e81accd350df6250b89107632ff6eeb1e9d8bacc854
getPrimaryPrincipal
public Object getPrimaryPrincipal()
{    if (isEmpty()) {        return null;    }    return iterator().next();}
52db31678fa1d8a949345f48ca951e5127be4e5811ef87a35ad56fe894ed6893
add
public void add(Object principal, String realmName)
{    if (realmName == null) {        throw new IllegalArgumentException("realmName argument cannot be null.");    }    if (principal == null) {        throw new IllegalArgumentException("principal argument cannot be null.");    }    this.cachedToString = null;    getPrincipalsLazy(realmName).add(principal);}
66919ba195b14e5c49d77d8b91fcee9682fb476f3a0dc3761977ab1db4b90ab9
addAll
public void addAll(Collection principals, String realmName)
{    if (realmName == null) {        throw new IllegalArgumentException("realmName argument cannot be null.");    }    if (principals == null) {        throw new IllegalArgumentException("principals argument cannot be null.");    }    if (principals.isEmpty()) {        throw new IllegalArgumentException("principals argument cannot be an empty collection.");    }    this.cachedToString = null;    getPrincipalsLazy(realmName).addAll(principals);}
003e720db9e4b74935a4df6971048949edbdee9fc6ddd84e3dae5d05043e833e
addAll
public void addAll(PrincipalCollection principals)
{    if (principals.getRealmNames() != null) {        for (String realmName : principals.getRealmNames()) {            for (Object principal : principals.fromRealm(realmName)) {                add(principal, realmName);            }        }    }}
c14bd3f65232d228d10596b452ba54c08d8b149166f15a67d0cce2462fa653da
oneByType
public T oneByType(Class<T> type)
{    if (realmPrincipals == null || realmPrincipals.isEmpty()) {        return null;    }    Collection<Set> values = realmPrincipals.values();    for (Set set : values) {        for (Object o : set) {            if (type.isAssignableFrom(o.getClass())) {                return (T) o;            }        }    }    return null;}
56e0f8f560d51fb06c10c88fc4dc0e6ddb16dd929e9f06357edc31a53b88ad4b
byType
public Collection<T> byType(Class<T> type)
{    if (realmPrincipals == null || realmPrincipals.isEmpty()) {        return Collections.EMPTY_SET;    }    Set<T> typed = new LinkedHashSet<T>();    Collection<Set> values = realmPrincipals.values();    for (Set set : values) {        for (Object o : set) {            if (type.isAssignableFrom(o.getClass())) {                typed.add((T) o);            }        }    }    if (typed.isEmpty()) {        return Collections.EMPTY_SET;    }    return Collections.unmodifiableSet(typed);}
70f50d219d93f109a24ab1bd10e5592bab92237e27e26da6857782492d224334
asList
public List asList()
{    Set all = asSet();    if (all.isEmpty()) {        return Collections.EMPTY_LIST;    }    return Collections.unmodifiableList(new ArrayList(all));}
fa80b6b35b133e5b6bc161f44789436efce185eaf30172135830cbf0be665ef8
asSet
public Set asSet()
{    if (realmPrincipals == null || realmPrincipals.isEmpty()) {        return Collections.EMPTY_SET;    }    Set aggregated = new LinkedHashSet();    Collection<Set> values = realmPrincipals.values();    for (Set set : values) {        aggregated.addAll(set);    }    if (aggregated.isEmpty()) {        return Collections.EMPTY_SET;    }    return Collections.unmodifiableSet(aggregated);}
8ec9cc5e7a7589b3d0160198501a02a3a0aed2b69db22bfc63b26ad0878df4a0
fromRealm
public Collection fromRealm(String realmName)
{    if (realmPrincipals == null || realmPrincipals.isEmpty()) {        return Collections.EMPTY_SET;    }    Set principals = realmPrincipals.get(realmName);    if (principals == null || principals.isEmpty()) {        principals = Collections.EMPTY_SET;    }    return Collections.unmodifiableSet(principals);}
e4264bd06365787bd21923b043189393c51654f85e0e25d9b99f172b49bb992d
getRealmNames
public Set<String> getRealmNames()
{    if (realmPrincipals == null) {        return null;    } else {        return realmPrincipals.keySet();    }}
803915e853382ad445a6e2333fabb8beb8e4acd70e908a0d818400f7baac42af
isEmpty
public boolean isEmpty()
{    return realmPrincipals == null || realmPrincipals.isEmpty();}
21ac40bb9a99614b6ac18fa4043acb6173fccff96066fdfab963dba597923aa8
clear
public void clear()
{    this.cachedToString = null;    if (realmPrincipals != null) {        realmPrincipals.clear();        realmPrincipals = null;    }}
0e723677317a453b15c6986c072fc4977b27401eb64776817756eb62d12f659f
iterator
public Iterator iterator()
{    return asSet().iterator();}
8d37d11c7ecfc0d0589696a89cb385888c83bd3e43ea0c95a3b4ae4ef78180ce
equals
public boolean equals(Object o)
{    if (o == this) {        return true;    }    if (o instanceof SimplePrincipalCollection) {        SimplePrincipalCollection other = (SimplePrincipalCollection) o;        return this.realmPrincipals != null ? this.realmPrincipals.equals(other.realmPrincipals) : other.realmPrincipals == null;    }    return false;}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    if (this.realmPrincipals != null && !realmPrincipals.isEmpty()) {        return realmPrincipals.hashCode();    }    return super.hashCode();}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    if (this.cachedToString == null) {        Set<Object> principals = asSet();        if (!CollectionUtils.isEmpty(principals)) {            this.cachedToString = StringUtils.toString(principals.toArray());        } else {            this.cachedToString = "empty";        }    }    return this.cachedToString;}
33b1b3e93b6d5b9eabe840b69f77f62b38d45bec1c2c0db092ec9434d824a8ac
writeObject
private void writeObject(ObjectOutputStream out) throws IOException
{    out.defaultWriteObject();    boolean principalsExist = !CollectionUtils.isEmpty(realmPrincipals);    out.writeBoolean(principalsExist);    if (principalsExist) {        out.writeObject(realmPrincipals);    }}
6fe0c1d06819617999846210cadae5eec355ab96b5d372ef1b71fc9794613343
readObject
private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException
{    in.defaultReadObject();    boolean principalsExist = in.readBoolean();    if (principalsExist) {        this.realmPrincipals = (Map<String, Set>) in.readObject();    }}
72ef1e59027007ffe0950edfd2670ad03bb65cd6463d5d1d282dfeb1750435b0
size
public int size()
{    return CollectionUtils.size(this.combinedPrincipals);}
b7aaea40620edec8bcd0088383e4ae5c1f9bb5dc039c12705c1cd059af926045
ensureCombinedPrincipals
protected Map<String, Object> ensureCombinedPrincipals()
{    if (this.combinedPrincipals == null) {        this.combinedPrincipals = new HashMap<String, Object>();    }    return this.combinedPrincipals;}
9154dce23d5a31d20990d1b60c713715a9ef8ca924d8d6162d23527312976a2b
containsKey
public boolean containsKey(Object o)
{    return this.combinedPrincipals != null && this.combinedPrincipals.containsKey(o);}
4e879072d074a556f62bc57b90c4759ec2dad39e716a67ddd495aec48e99868c
containsValue
public boolean containsValue(Object o)
{    return this.combinedPrincipals != null && this.combinedPrincipals.containsKey(o);}
aa363a94253c60a7f7ba636ee96a1d23ad45a22335c08bd730a7fe92038a81b3
get
public Object get(Object o)
{    return this.combinedPrincipals != null && this.combinedPrincipals.containsKey(o);}
4af6abb075a2aa9b8fd09fcdcfeaa67a959053a7d3f70288d0a7b2f4c77f0b94
put
public Object put(String s, Object o)
{    return ensureCombinedPrincipals().put(s, o);}
1a92244037e1af33db591623807dbb1123c1c7ad81a73ce8dedf3e4b3997ed11
remove
public Object remove(Object o)
{    return this.combinedPrincipals != null ? this.combinedPrincipals.remove(o) : null;}
0d79e2490cbb5693032c65152ee431fc0ec30d8ac6c2cb6ddbfc0ccc7de94834
putAll
public void putAll(Map<? extends String, ?> map)
{    if (!CollectionUtils.isEmpty(map)) {        ensureCombinedPrincipals().putAll(map);    }}
19992f7878b292f412223047e28dd68a1ec96625e3ce9dda9ebba09864bae23c
keySet
public Set<String> keySet()
{    return CollectionUtils.isEmpty(this.combinedPrincipals) ? Collections.<String>emptySet() : Collections.unmodifiableSet(this.combinedPrincipals.keySet());}
25f247b88c223a518c6f0edb394595a9501de75ec95fbda6943f936c3de77378
values
public Collection<Object> values()
{    return CollectionUtils.isEmpty(this.combinedPrincipals) ? Collections.emptySet() : Collections.unmodifiableCollection(this.combinedPrincipals.values());}
60d720eed1f11540ec58718241b8bd9889a8b2802d068634e456918e1d4e8d0e
entrySet
public Set<Entry<String, Object>> entrySet()
{    return CollectionUtils.isEmpty(this.combinedPrincipals) ? Collections.<Entry<String, Object>>emptySet() : Collections.unmodifiableSet(this.combinedPrincipals.entrySet());}
21ac40bb9a99614b6ac18fa4043acb6173fccff96066fdfab963dba597923aa8
clear
public void clear()
{    this.realmPrincipals = null;    this.combinedPrincipals = null;}
03786b397519a1c336f84e81accd350df6250b89107632ff6eeb1e9d8bacc854
getPrimaryPrincipal
public Object getPrimaryPrincipal()
{        return !CollectionUtils.isEmpty(this.combinedPrincipals) ? this.combinedPrincipals.values().iterator().next() : null;}
c14bd3f65232d228d10596b452ba54c08d8b149166f15a67d0cce2462fa653da
oneByType
public T oneByType(Class<T> type)
{    if (CollectionUtils.isEmpty(this.combinedPrincipals)) {        return null;    }    for (Object value : this.combinedPrincipals.values()) {        if (type.isInstance(value)) {            return type.cast(value);        }    }    return null;}
56e0f8f560d51fb06c10c88fc4dc0e6ddb16dd929e9f06357edc31a53b88ad4b
byType
public Collection<T> byType(Class<T> type)
{    if (CollectionUtils.isEmpty(this.combinedPrincipals)) {        return Collections.emptySet();    }    Collection<T> instances = null;    for (Object value : this.combinedPrincipals.values()) {        if (type.isInstance(value)) {            if (instances == null) {                instances = new ArrayList<T>();            }            instances.add(type.cast(value));        }    }    return instances != null ? instances : Collections.<T>emptyList();}
70f50d219d93f109a24ab1bd10e5592bab92237e27e26da6857782492d224334
asList
public List asList()
{    if (CollectionUtils.isEmpty(this.combinedPrincipals)) {        return Collections.emptyList();    }    List<Object> list = new ArrayList<Object>(this.combinedPrincipals.size());    list.addAll(this.combinedPrincipals.values());    return list;}
fa80b6b35b133e5b6bc161f44789436efce185eaf30172135830cbf0be665ef8
asSet
public Set asSet()
{    if (CollectionUtils.isEmpty(this.combinedPrincipals)) {        return Collections.emptySet();    }    Set<Object> set = new HashSet<Object>(this.combinedPrincipals.size());    set.addAll(this.combinedPrincipals.values());    return set;}
8ec9cc5e7a7589b3d0160198501a02a3a0aed2b69db22bfc63b26ad0878df4a0
fromRealm
public Collection fromRealm(String realmName)
{    if (CollectionUtils.isEmpty(this.realmPrincipals)) {        return Collections.emptySet();    }    Map<String, Object> principals = this.realmPrincipals.get(realmName);    if (CollectionUtils.isEmpty(principals)) {        return Collections.emptySet();    }    return Collections.unmodifiableCollection(principals.values());}
e4264bd06365787bd21923b043189393c51654f85e0e25d9b99f172b49bb992d
getRealmNames
public Set<String> getRealmNames()
{    if (CollectionUtils.isEmpty(this.realmPrincipals)) {        return Collections.emptySet();    }    return Collections.unmodifiableSet(this.realmPrincipals.keySet());}
803915e853382ad445a6e2333fabb8beb8e4acd70e908a0d818400f7baac42af
isEmpty
public boolean isEmpty()
{    return CollectionUtils.isEmpty(this.combinedPrincipals);}
0e723677317a453b15c6986c072fc4977b27401eb64776817756eb62d12f659f
iterator
public Iterator iterator()
{    return asList().iterator();}
85abf8e022df541a5224d74bed45afea6be2ff2a86074872801006369704bd81
getRealmPrincipals
public Map<String, Object> getRealmPrincipals(String name)
{    if (this.realmPrincipals == null) {        return null;    }    Map<String, Object> principals = this.realmPrincipals.get(name);    if (principals == null) {        return null;    }    return Collections.unmodifiableMap(principals);}
dd5e931953c3b7587c5df4dbb8743c81d5b7386c89cb694cd9af94d46cd64d4b
setRealmPrincipals
public Map<String, Object> setRealmPrincipals(String realmName, Map<String, Object> principals)
{    if (realmName == null) {        throw new NullPointerException("realmName argument cannot be null.");    }    if (this.realmPrincipals == null) {        if (!CollectionUtils.isEmpty(principals)) {            this.realmPrincipals = new HashMap<String, Map<String, Object>>();            return this.realmPrincipals.put(realmName, new HashMap<String, Object>(principals));        } else {            return null;        }    } else {        Map<String, Object> existingPrincipals = this.realmPrincipals.remove(realmName);        if (!CollectionUtils.isEmpty(principals)) {            this.realmPrincipals.put(realmName, new HashMap<String, Object>(principals));        }        return existingPrincipals;    }}
01691500093f682e6423fdceb88cd02ffc923fdea9a8fad11592a757a549dc3f
setRealmPrincipal
public Object setRealmPrincipal(String realmName, String principalName, Object principal)
{    if (realmName == null) {        throw new NullPointerException("realmName argument cannot be null.");    }    if (principalName == null) {        throw new NullPointerException(("principalName argument cannot be null."));    }    if (principal == null) {        return removeRealmPrincipal(realmName, principalName);    }    if (this.realmPrincipals == null) {        this.realmPrincipals = new HashMap<String, Map<String, Object>>();    }    Map<String, Object> principals = this.realmPrincipals.get(realmName);    if (principals == null) {        principals = new HashMap<String, Object>();        this.realmPrincipals.put(realmName, principals);    }    return principals.put(principalName, principal);}
e556663e6651f5665b35d6ae2eee09961638c993e4e28d534597858e974800c4
getRealmPrincipal
public Object getRealmPrincipal(String realmName, String principalName)
{    if (realmName == null) {        throw new NullPointerException("realmName argument cannot be null.");    }    if (principalName == null) {        throw new NullPointerException(("principalName argument cannot be null."));    }    if (this.realmPrincipals == null) {        return null;    }    Map<String, Object> principals = this.realmPrincipals.get(realmName);    if (principals != null) {        return principals.get(principalName);    }    return null;}
0f239ad1f2919408bbcf7d6d0603ba4e61cfe4a968bf35b61b55754b000b7241
removeRealmPrincipal
public Object removeRealmPrincipal(String realmName, String principalName)
{    if (realmName == null) {        throw new NullPointerException("realmName argument cannot be null.");    }    if (principalName == null) {        throw new NullPointerException(("principalName argument cannot be null."));    }    if (this.realmPrincipals == null) {        return null;    }    Map<String, Object> principals = this.realmPrincipals.get(realmName);    if (principals != null) {        return principals.remove(principalName);    }    return null;}
f12fd344d46f9efdce33e5b9075576c8df1715aeef80d30e51d5c297c9142d1d
newSubjectContextInstance
protected SubjectContext newSubjectContextInstance()
{    return new DefaultSubjectContext();}
4dd875ef989321827f7c4d32d1cd4b659587ad9c92ed53a6f0dc4c2e7073e556
getSubjectContext
protected SubjectContext getSubjectContext()
{    return this.subjectContext;}
8cf614d10faf2836435e189e016e012164750ff8d2fcf7e001c04f030aaf6597
sessionId
public Builder sessionId(Serializable sessionId)
{    if (sessionId != null) {        this.subjectContext.setSessionId(sessionId);    }    return this;}
1d37187810c2cde2dd10c9e346a49531bbe24c1c2d79c6e50b196161433b587d
host
public Builder host(String host)
{    if (StringUtils.hasText(host)) {        this.subjectContext.setHost(host);    }    return this;}
503edfb48a05ee0a47b60cc55a6fd64c2e34371aeb8fec191c59db0ef3382c06
session
public Builder session(Session session)
{    if (session != null) {        this.subjectContext.setSession(session);    }    return this;}
eb788f1db60fa141eeeee909dfff8afb7ba243d0e45d1b1462e41d59d5793dcc
principals
public Builder principals(PrincipalCollection principals)
{    if (principals != null && !principals.isEmpty()) {        this.subjectContext.setPrincipals(principals);    }    return this;}
7a37171e902da878d89c4276afa4539c3caf59f886f13d870f7416393571bdc4
sessionCreationEnabled
public Builder sessionCreationEnabled(boolean enabled)
{    this.subjectContext.setSessionCreationEnabled(enabled);    return this;}
8cc6d489c3ba40bca5bfd604a27fb7908386d49be3b25cf5cd471c4d0190a537
authenticated
public Builder authenticated(boolean authenticated)
{    this.subjectContext.setAuthenticated(authenticated);    return this;}
a7e5d92a0f415fc54fff44d9672952f8e1f235ce592304874ea6595760cb488c
contextAttribute
public Builder contextAttribute(String attributeKey, Object attributeValue)
{    if (attributeKey == null) {        String msg = "Subject context map key cannot be null.";        throw new IllegalArgumentException(msg);    }    if (attributeValue == null) {        this.subjectContext.remove(attributeKey);    } else {        this.subjectContext.put(attributeKey, attributeValue);    }    return this;}
83a29712b5c33e527df93961cd7ba6421e47a10ccca1bcf398d77ba1a393d608
buildSubject
public Subject buildSubject()
{    return this.securityManager.createSubject(this.subjectContext);}
893e074f548b64dec4e0ecb3d99b55207f0353bcbda59913daa9d0096ac3ba9d
getSecurityManager
public SecurityManager getSecurityManager()
{    return getTypedValue(SECURITY_MANAGER, SecurityManager.class);}
c11e39b3138902654fbfe242e943963b5e160471a127c735c0e7e1bf5c67886e
setSecurityManager
public void setSecurityManager(SecurityManager securityManager)
{    nullSafePut(SECURITY_MANAGER, securityManager);}
d9a0f3ce31f66b76401e8f2868ac35f5935f562a40016c5a4c9beed0786de630
resolveSecurityManager
public SecurityManager resolveSecurityManager()
{    SecurityManager securityManager = getSecurityManager();    if (securityManager == null) {        if (log.isDebugEnabled()) {            log.debug("No SecurityManager available in subject context map.  " + "Falling back to SecurityUtils.getSecurityManager() lookup.");        }        try {            securityManager = SecurityUtils.getSecurityManager();        } catch (UnavailableSecurityManagerException e) {            if (log.isDebugEnabled()) {                log.debug("No SecurityManager available via SecurityUtils.  Heuristics exhausted.", e);            }        }    }    return securityManager;}
23e4deaeb77664a60acd61b50107a8c8b6563d0ab978152e7d9735b704182abc
getSessionId
public Serializable getSessionId()
{    return getTypedValue(SESSION_ID, Serializable.class);}
a04c177ea48803abcdedc246a29e093897d65fee4f2b68ca63fbfaf5565c02d1
setSessionId
public void setSessionId(Serializable sessionId)
{    nullSafePut(SESSION_ID, sessionId);}
f36174daca49b76f0fe37b2200e55b491533846c9b27004c242fdf178a9802ff
getSubject
public Subject getSubject()
{    return getTypedValue(SUBJECT, Subject.class);}
1808de585c088633cf177dc7815b12f93471a95c06d0a70499ed767f29c5488d
setSubject
public void setSubject(Subject subject)
{    nullSafePut(SUBJECT, subject);}
827e0a1d65c96dadbd66eb037a8c8e1d6d7169a482f4e5e0864a12a902d3d44b
getPrincipals
public PrincipalCollection getPrincipals()
{    return getTypedValue(PRINCIPALS, PrincipalCollection.class);}
744afb2c4b31487a891d9ddda2a4ab70e8add4a8a4b69269b191bd4c6a76c8b8
isEmpty
private static boolean isEmpty(PrincipalCollection pc)
{    return pc == null || pc.isEmpty();}
c7b3b14aecec5000eb87974c2678a2eaa17176a02dc2e3ee92ed5637f79018c5
setPrincipals
public void setPrincipals(PrincipalCollection principals)
{    if (!isEmpty(principals)) {        put(PRINCIPALS, principals);    }}
6b4f5d3ef7b77f1b563a1e826fd82ad54a1dfb65bed729ace77482a40de936a5
resolvePrincipals
public PrincipalCollection resolvePrincipals()
{    PrincipalCollection principals = getPrincipals();    if (isEmpty(principals)) {                AuthenticationInfo info = getAuthenticationInfo();        if (info != null) {            principals = info.getPrincipals();        }    }    if (isEmpty(principals)) {        Subject subject = getSubject();        if (subject != null) {            principals = subject.getPrincipals();        }    }    if (isEmpty(principals)) {                Session session = resolveSession();        if (session != null) {            principals = (PrincipalCollection) session.getAttribute(PRINCIPALS_SESSION_KEY);        }    }    return principals;}
d9547d82f21fae987c0755d26b985bf504321cf6eb77372de06df2f22f592eae
getSession
public Session getSession()
{    return getTypedValue(SESSION, Session.class);}
0101389b8a46107d1546634d2a4ef3d9c83e78ea07aba7da6b58f31a819199bc
setSession
public void setSession(Session session)
{    nullSafePut(SESSION, session);}
ee1d880feee4a300c880bc4bf677a1d3b0436fab7d2d4ee6f5ce0f739e47ddab
resolveSession
public Session resolveSession()
{    Session session = getSession();    if (session == null) {                Subject existingSubject = getSubject();        if (existingSubject != null) {            session = existingSubject.getSession(false);        }    }    return session;}
6187f39fcbd246a4bc46020d48200ed58ec11796b33ed0452bdca4ab5697a39c
isSessionCreationEnabled
public boolean isSessionCreationEnabled()
{    Boolean val = getTypedValue(SESSION_CREATION_ENABLED, Boolean.class);    return val == null || val;}
1d0f02689f9c26bbc9c1a5d9c9876a4dde02f9f094dfc34189668d84445be598
setSessionCreationEnabled
public void setSessionCreationEnabled(boolean enabled)
{    nullSafePut(SESSION_CREATION_ENABLED, enabled);}
dc65f02fa1d333f908424da1b3350b52f4bc6fefe9646d1266e579e3c5be7951
isAuthenticated
public boolean isAuthenticated()
{    Boolean authc = getTypedValue(AUTHENTICATED, Boolean.class);    return authc != null && authc;}
be9183ca8c9224a481a6e04d70b02c68555ff0f40fa45578f7648a87192f2ad9
setAuthenticated
public void setAuthenticated(boolean authc)
{    put(AUTHENTICATED, authc);}
ff14c1442c7da165da498997ee7e0418198a60a41281bb66d7ee656d4f183707
resolveAuthenticated
public boolean resolveAuthenticated()
{    Boolean authc = getTypedValue(AUTHENTICATED, Boolean.class);    if (authc == null) {                        AuthenticationInfo info = getAuthenticationInfo();        authc = info != null;    }    if (!authc) {                Session session = resolveSession();        if (session != null) {            Boolean sessionAuthc = (Boolean) session.getAttribute(AUTHENTICATED_SESSION_KEY);            authc = sessionAuthc != null && sessionAuthc;        }    }    return authc;}
406fbd84afcff133092d4f87eb7cea9aee8d324c52c8b471fa970074884cb011
getAuthenticationInfo
public AuthenticationInfo getAuthenticationInfo()
{    return getTypedValue(AUTHENTICATION_INFO, AuthenticationInfo.class);}
4bb7530c38cf6dc64bafbf70703594cbc1735b123a7db0fb36172590f353a450
setAuthenticationInfo
public void setAuthenticationInfo(AuthenticationInfo info)
{    nullSafePut(AUTHENTICATION_INFO, info);}
006e19cefeda78f4461fff8d7c9fc6f04ee1a6c6c6583f1a057b35ef98c0d6bb
getAuthenticationToken
public AuthenticationToken getAuthenticationToken()
{    return getTypedValue(AUTHENTICATION_TOKEN, AuthenticationToken.class);}
9fbe98d0dc433c8c4f031af105d34a6909179ac1dd1524e954b8b3dd8f973c25
setAuthenticationToken
public void setAuthenticationToken(AuthenticationToken token)
{    nullSafePut(AUTHENTICATION_TOKEN, token);}
165b1c9352ad3d309866d5286d1a7fd8eae4d022cb5ad661b1269ac75c218ebb
getHost
public String getHost()
{    return getTypedValue(HOST, String.class);}
975df858cc36ca4ae96e66da70c7651a9608d19019688712f418ff1b046d6911
setHost
public void setHost(String host)
{    if (StringUtils.hasText(host)) {        put(HOST, host);    }}
2ffc47f427765bd78dfff6c55b3e32727e34d2794ede847ca985b1d4900d5004
resolveHost
public String resolveHost()
{    String host = getHost();    if (host == null) {                AuthenticationToken token = getAuthenticationToken();        if (token instanceof HostAuthenticationToken) {            host = ((HostAuthenticationToken) token).getHost();        }    }    if (host == null) {        Session session = resolveSession();        if (session != null) {            host = session.getHost();        }    }    return host;}
5324b22f546b13350953b54c4a6133ebc83958214cfc2fb3813191566de3a154
decorate
protected Session decorate(Session session)
{    if (session == null) {        throw new IllegalArgumentException("session cannot be null");    }    return new StoppingAwareProxiedSession(session, this);}
893e074f548b64dec4e0ecb3d99b55207f0353bcbda59913daa9d0096ac3ba9d
getSecurityManager
public SecurityManager getSecurityManager()
{    return securityManager;}
744afb2c4b31487a891d9ddda2a4ab70e8add4a8a4b69269b191bd4c6a76c8b8
isEmpty
private static boolean isEmpty(PrincipalCollection pc)
{    return pc == null || pc.isEmpty();}
8e9190c24087073a522786de50ce2721a5081514de54b0f740ec4d41aac33667
hasPrincipals
protected boolean hasPrincipals()
{    return !isEmpty(getPrincipals());}
165b1c9352ad3d309866d5286d1a7fd8eae4d022cb5ad661b1269ac75c218ebb
getHost
public String getHost()
{    return this.host;}
ef0d8c225dc61c726090bb781e5a5363f372c72f8229a4fb300a9de6e73e5bb9
getPrimaryPrincipal
private Object getPrimaryPrincipal(PrincipalCollection principals)
{    if (!isEmpty(principals)) {        return principals.getPrimaryPrincipal();    }    return null;}
fd56e1755384d43cd981f548599564b11bcb09d8d88ac23705d566dcbeb36882
getPrincipal
public Object getPrincipal()
{    return getPrimaryPrincipal(getPrincipals());}
827e0a1d65c96dadbd66eb037a8c8e1d6d7169a482f4e5e0864a12a902d3d44b
getPrincipals
public PrincipalCollection getPrincipals()
{    List<PrincipalCollection> runAsPrincipals = getRunAsPrincipalsStack();    return CollectionUtils.isEmpty(runAsPrincipals) ? this.principals : runAsPrincipals.get(0);}
d3e2c20fcdbac5504edf8eb64dd6a6809cdbc6b9729a151f21f02fc671a0e069
isPermitted
public boolean isPermitted(String permission)
{    return hasPrincipals() && securityManager.isPermitted(getPrincipals(), permission);}
a5f98b44f8f712310071f0b6a666d23dd39c53074d31eba1394ec26f928d67b8
isPermitted
public boolean isPermitted(Permission permission)
{    return hasPrincipals() && securityManager.isPermitted(getPrincipals(), permission);}
dc10ce843496563576145894452dff527993dfa119cd25bdd82904c957fe7aa5
isPermitted
public boolean[] isPermitted(String... permissions)
{    if (hasPrincipals()) {        return securityManager.isPermitted(getPrincipals(), permissions);    } else {        return new boolean[permissions.length];    }}
7642d9486b32a6ef5f2a180cb46dd81174ba4dffa497b92cbe260f8beb44e845
isPermitted
public boolean[] isPermitted(List<Permission> permissions)
{    if (hasPrincipals()) {        return securityManager.isPermitted(getPrincipals(), permissions);    } else {        return new boolean[permissions.size()];    }}
2aed4dd13a26f0a949dd41748883ea0122d2437af91a9086f46e1525a0547dad
isPermittedAll
public boolean isPermittedAll(String... permissions)
{    return hasPrincipals() && securityManager.isPermittedAll(getPrincipals(), permissions);}
9cce5d38f9428edbf68379d18223eca97a356a20ec0a52d84b638759a0160411
isPermittedAll
public boolean isPermittedAll(Collection<Permission> permissions)
{    return hasPrincipals() && securityManager.isPermittedAll(getPrincipals(), permissions);}
ac79f452389999ba7bd4a6bab3f968e5cdb5f0a06b26c782de98bf2a6512e91a
assertAuthzCheckPossible
protected void assertAuthzCheckPossible() throws AuthorizationException
{    if (!hasPrincipals()) {        String msg = "This subject is anonymous - it does not have any identifying principals and " + "authorization operations require an identity to check against.  A Subject instance will " + "acquire these identifying principals automatically after a successful login is performed " + "be executing " + Subject.class.getName() + ".login(AuthenticationToken) or when 'Remember Me' " + "functionality is enabled by the SecurityManager.  This exception can also occur when a " + "previously logged-in Subject has logged out which " + "makes it anonymous again.  Because an identity is currently not known due to any of these " + "conditions, authorization is denied.";        throw new UnauthenticatedException(msg);    }}
d59a67dd44e6598d81dd8df75d29b09ac7ae002a25b1810961ac646ea4e563d0
checkPermission
public void checkPermission(String permission) throws AuthorizationException
{    assertAuthzCheckPossible();    securityManager.checkPermission(getPrincipals(), permission);}
7690ef9c6a7b668554fd9e7d08232b28677f13543946447789d41b9b0173f83f
checkPermission
public void checkPermission(Permission permission) throws AuthorizationException
{    assertAuthzCheckPossible();    securityManager.checkPermission(getPrincipals(), permission);}
f9c038600ac74a88ca4b901befb9ba3a973ff9087b912993fcd6dac8aec51837
checkPermissions
public void checkPermissions(String... permissions) throws AuthorizationException
{    assertAuthzCheckPossible();    securityManager.checkPermissions(getPrincipals(), permissions);}
86d94b7fac0fd05c868418b507c2d375a5d4fceca787fafcc92a3fd7c905f8ee
checkPermissions
public void checkPermissions(Collection<Permission> permissions) throws AuthorizationException
{    assertAuthzCheckPossible();    securityManager.checkPermissions(getPrincipals(), permissions);}
5a1456433e36b644ee1278966195548239dc6934c364faac5c15f741955f2479
hasRole
public boolean hasRole(String roleIdentifier)
{    return hasPrincipals() && securityManager.hasRole(getPrincipals(), roleIdentifier);}
6f2843a362968975321a2a331366e5174b0465b66409f5633b65fc09f5fa801e
hasRoles
public boolean[] hasRoles(List<String> roleIdentifiers)
{    if (hasPrincipals()) {        return securityManager.hasRoles(getPrincipals(), roleIdentifiers);    } else {        return new boolean[roleIdentifiers.size()];    }}
7d09098784ca3f89507a96ea78c7253b63acb0c0811239fed84ce9234ec0c6d2
hasAllRoles
public boolean hasAllRoles(Collection<String> roleIdentifiers)
{    return hasPrincipals() && securityManager.hasAllRoles(getPrincipals(), roleIdentifiers);}
d3ebde027a677338b86673438daa7b07b376aafbe766ca43ad619da27436ba64
checkRole
public void checkRole(String role) throws AuthorizationException
{    assertAuthzCheckPossible();    securityManager.checkRole(getPrincipals(), role);}
c454d0918ad38c9d3a11e5a16bbf3bb8e1da2cf2a25eece1259c4dcfb9a04ad7
checkRoles
public void checkRoles(String... roleIdentifiers) throws AuthorizationException
{    assertAuthzCheckPossible();    securityManager.checkRoles(getPrincipals(), roleIdentifiers);}
36b20482dc44bffb5bfdacbb77fae191a3044dc3ccf713e7059be1703bf6b5fb
checkRoles
public void checkRoles(Collection<String> roles) throws AuthorizationException
{    assertAuthzCheckPossible();    securityManager.checkRoles(getPrincipals(), roles);}
c1eecb2337ae3d4bd133147e4742646fa58d15cf02927dfd86e413eed866c119
login
public void login(AuthenticationToken token) throws AuthenticationException
{    clearRunAsIdentitiesInternal();    Subject subject = securityManager.login(this, token);    PrincipalCollection principals;    String host = null;    if (subject instanceof DelegatingSubject) {        DelegatingSubject delegating = (DelegatingSubject) subject;                principals = delegating.principals;        host = delegating.host;    } else {        principals = subject.getPrincipals();    }    if (principals == null || principals.isEmpty()) {        String msg = "Principals returned from securityManager.login( token ) returned a null or " + "empty value.  This value must be non null and populated with one or more elements.";        throw new IllegalStateException(msg);    }    this.principals = principals;    this.authenticated = true;    if (token instanceof HostAuthenticationToken) {        host = ((HostAuthenticationToken) token).getHost();    }    if (host != null) {        this.host = host;    }    Session session = subject.getSession(false);    if (session != null) {        this.session = decorate(session);    } else {        this.session = null;    }}
dc65f02fa1d333f908424da1b3350b52f4bc6fefe9646d1266e579e3c5be7951
isAuthenticated
public boolean isAuthenticated()
{    return authenticated && hasPrincipals();}
c10dc24b817b335ca8396bc791557ce54882e34230f23f643940e6e05f117ea8
isRemembered
public boolean isRemembered()
{    PrincipalCollection principals = getPrincipals();    return principals != null && !principals.isEmpty() && !isAuthenticated();}
0ab3df878e17d83115e9dd0d9e8ea060e3fa9dd1f8161c0ce6492d5da11e97f2
isSessionCreationEnabled
protected boolean isSessionCreationEnabled()
{    return this.sessionCreationEnabled;}
d9547d82f21fae987c0755d26b985bf504321cf6eb77372de06df2f22f592eae
getSession
public Session getSession()
{    return getSession(true);}
fb5d9cf35fcb7384b55085c919bc579e0ec0e590ec1f4302c586f77635c49fc6
getSession
public Session getSession(boolean create)
{    if (log.isTraceEnabled()) {        log.trace("attempting to get session; create = " + create + "; session is null = " + (this.session == null) + "; session has id = " + (this.session != null && session.getId() != null));    }    if (this.session == null && create) {                if (!isSessionCreationEnabled()) {            String msg = "Session creation has been disabled for the current subject.  This exception indicates " + "that there is either a programming error (using a session when it should never be " + "used) or that Shiro's configuration needs to be adjusted to allow Sessions to be created " + "for the current Subject.  See the " + DisabledSessionException.class.getName() + " JavaDoc " + "for more.";            throw new DisabledSessionException(msg);        }        log.trace("Starting session for host {}", getHost());        SessionContext sessionContext = createSessionContext();        Session session = this.securityManager.start(sessionContext);        this.session = decorate(session);    }    return this.session;}
b64c62791d9c53467d77f04f5f78b6d25e1c271413c74dcb9fc68971f2da15c9
createSessionContext
protected SessionContext createSessionContext()
{    SessionContext sessionContext = new DefaultSessionContext();    if (StringUtils.hasText(host)) {        sessionContext.setHost(host);    }    return sessionContext;}
3b3a7c6038fd403164851dc0a02b102d45496d6968062215c366a1403479da17
clearRunAsIdentitiesInternal
private void clearRunAsIdentitiesInternal()
{        try {        clearRunAsIdentities();    } catch (SessionException se) {        log.debug("Encountered session exception trying to clear 'runAs' identities during logout.  This " + "can generally safely be ignored.", se);    }}
c509f8b8304f6a47095cafd6fdfe587af13d901e4a1e4e4aa586da38824e3ddc
logout
public void logout()
{    try {        clearRunAsIdentitiesInternal();        this.securityManager.logout(this);    } finally {        this.session = null;        this.principals = null;        this.authenticated = false;                        }}
ce0238adcae25b0ed065875431aab9c56a9cb289eee93327294c3c6d07a19131
sessionStopped
private void sessionStopped()
{    this.session = null;}
02a73fec239fe16eeebcce99a32a90199603c0ccb8d0dca1a253744ed3ecd025
execute
public V execute(Callable<V> callable) throws ExecutionException
{    Callable<V> associated = associateWith(callable);    try {        return associated.call();    } catch (Throwable t) {        throw new ExecutionException(t);    }}
27cd93a9c675e5a6c3e876bc2aacd571eaf9fbe99f46cfb5087592c21e9639f9
execute
public void execute(Runnable runnable)
{    Runnable associated = associateWith(runnable);    associated.run();}
67ac093fbcb05cc28b3d6860ea348177a6d3b38969fb2611e452c60d06c7e7ac
associateWith
public Callable<V> associateWith(Callable<V> callable)
{    return new SubjectCallable<V>(this, callable);}
11bf2acba6e6af0567588d951f4e85819582574531390bee78e818fec6e0c2c2
associateWith
public Runnable associateWith(Runnable runnable)
{    if (runnable instanceof Thread) {        String msg = "This implementation does not support Thread arguments because of JDK ThreadLocal " + "inheritance mechanisms required by Shiro.  Instead, the method argument should be a non-Thread " + "Runnable and the return value from this method can then be given to an ExecutorService or " + "another Thread.";        throw new UnsupportedOperationException(msg);    }    return new SubjectRunnable(this, runnable);}
1a1361a165bebeb83cd49e6148367728764fd34bea14dda08db81c1651e25a47
stop
public void stop() throws InvalidSessionException
{    super.stop();    owner.sessionStopped();}
ee4aa438d5123577a63d412ba24b2dc198a670377c530f54948a7fdd5b4597f2
runAs
public void runAs(PrincipalCollection principals)
{    if (!hasPrincipals()) {        String msg = "This subject does not yet have an identity.  Assuming the identity of another " + "Subject is only allowed for Subjects with an existing identity.  Try logging this subject in " + "first, or using the " + Subject.Builder.class.getName() + " to build ad hoc Subject instances " + "with identities as necessary.";        throw new IllegalStateException(msg);    }    pushIdentity(principals);}
370ec7bca7591e639b9f1e2e9b26091202955afb9dc9b59571c7d3481af88a39
isRunAs
public boolean isRunAs()
{    List<PrincipalCollection> stack = getRunAsPrincipalsStack();    return !CollectionUtils.isEmpty(stack);}
d31e6e388eca580765827f7a5ae2ea178ed896159b560d0cf7eef30f5e98eb19
getPreviousPrincipals
public PrincipalCollection getPreviousPrincipals()
{    PrincipalCollection previousPrincipals = null;    List<PrincipalCollection> stack = getRunAsPrincipalsStack();    int stackSize = stack != null ? stack.size() : 0;    if (stackSize > 0) {        if (stackSize == 1) {            previousPrincipals = this.principals;        } else {                        assert stack != null;            previousPrincipals = stack.get(1);        }    }    return previousPrincipals;}
5f3b780e340ff35c6f9f1fb0e493928de6e8c2093101753376a65abe386d03d4
releaseRunAs
public PrincipalCollection releaseRunAs()
{    return popIdentity();}
702fe352bdcb0e6578de4e67b45a190f1df013d9b5ce2031618a20aca7287d84
getRunAsPrincipalsStack
private List<PrincipalCollection> getRunAsPrincipalsStack()
{    Session session = getSession(false);    if (session != null) {        return (List<PrincipalCollection>) session.getAttribute(RUN_AS_PRINCIPALS_SESSION_KEY);    }    return null;}
88b283defced6bec99100a83086b5f1606cf08d0f120bde099c88a15c7298498
clearRunAsIdentities
private void clearRunAsIdentities()
{    Session session = getSession(false);    if (session != null) {        session.removeAttribute(RUN_AS_PRINCIPALS_SESSION_KEY);    }}
6d06509a1cc61507a79eea00cd348ab12178694af49b466227bb88083afc75ee
pushIdentity
private void pushIdentity(PrincipalCollection principals) throws NullPointerException
{    if (isEmpty(principals)) {        String msg = "Specified Subject principals cannot be null or empty for 'run as' functionality.";        throw new NullPointerException(msg);    }    List<PrincipalCollection> stack = getRunAsPrincipalsStack();    if (stack == null) {        stack = new CopyOnWriteArrayList<PrincipalCollection>();    }    stack.add(0, principals);    Session session = getSession();    session.setAttribute(RUN_AS_PRINCIPALS_SESSION_KEY, stack);}
eb8b54c781604918167ba81a5d1a1b35b543aa86887851c65853d92a45046089
popIdentity
private PrincipalCollection popIdentity()
{    PrincipalCollection popped = null;    List<PrincipalCollection> stack = getRunAsPrincipalsStack();    if (!CollectionUtils.isEmpty(stack)) {        popped = stack.remove(0);        Session session;        if (!CollectionUtils.isEmpty(stack)) {                        session = getSession();            session.setAttribute(RUN_AS_PRINCIPALS_SESSION_KEY, stack);        } else {                        clearRunAsIdentities();        }    }    return popped;}
d3323cef60aa4b403e24ceae18b1b93aad9fbf98b162b7892f9d09344cd66bdd
call
public V call() throws Exception
{    try {        threadState.bind();        return doCall(this.callable);    } finally {        threadState.restore();    }}
5a2d8584014a725f0eb213b975998e65d5204e21818b5cfc75daa10e9f6edf1f
doCall
protected V doCall(Callable<V> target) throws Exception
{    return target.call();}
4560d80c2474cc2770be19fbc06c60741920c59992e6b13524f8a5b688ec285a
run
public void run()
{    try {        threadState.bind();        doRun(this.runnable);    } finally {        threadState.restore();    }}
6bef016077be7f69fb2d0d35a3f4e81c96227b2a9750aa6973c7d0f33b3e4f69
doRun
protected void doRun(Runnable runnable)
{    runnable.run();}
500cdae0771f44e12e905471ad16b9b928667f19e77956836eb99281db53ebed
getSubject
protected Subject getSubject()
{    return this.subject;}
a39bebe44047a428e5b7b90852f2fa87b29c5730bb12f965bf7ed00fb23275a6
bind
public void bind()
{    SecurityManager securityManager = this.securityManager;    if (securityManager == null) {                securityManager = ThreadContext.getSecurityManager();    }    this.originalResources = ThreadContext.getResources();    ThreadContext.remove();    ThreadContext.bind(this.subject);    if (securityManager != null) {        ThreadContext.bind(securityManager);    }}
3b96ce949452524ec9b861b2ae4b53086a3281eedd7635a16c19c1b66bd1900d
restore
public void restore()
{    ThreadContext.remove();    if (!CollectionUtils.isEmpty(this.originalResources)) {        ThreadContext.setResources(this.originalResources);    }}
21ac40bb9a99614b6ac18fa4043acb6173fccff96066fdfab963dba597923aa8
clear
public void clear()
{    ThreadContext.remove();}
96c07fa80769e3073abe8ced949a55040869c46e5abbc4ba7e82bbf651809179
isSingleton
public boolean isSingleton()
{    return singleton;}
0be404c7e31ce84d044472e68959a3e3f7631d905a63ea51678aec073396cda6
setSingleton
public void setSingleton(boolean singleton)
{    this.singleton = singleton;}
0efc6491cc44a0b97f695869a967e703ba397482733ea1a0f612f996532a7bcf
getInstance
public T getInstance()
{    T instance;    if (isSingleton()) {        if (this.singletonInstance == null) {            this.singletonInstance = createInstance();        }        instance = this.singletonInstance;    } else {        instance = createInstance();    }    if (instance == null) {        String msg = "Factory 'createInstance' implementation returned a null object.";        throw new IllegalStateException(msg);    }    return instance;}
283826f512f19e300c75cffe1443b710be5035963c27a9588a2bc1cf3405c25b
setPathSeparator
public void setPathSeparator(String pathSeparator)
{    this.pathSeparator = (pathSeparator != null ? pathSeparator : DEFAULT_PATH_SEPARATOR);}
3d16de9f681932e18b2776b9713e917dfc63c54c4a2381d849b19cf8bf7b46de
isPattern
public boolean isPattern(String path)
{    return (path.indexOf('*') != -1 || path.indexOf('?') != -1);}
a5f3a27dcd09fe95c76a953453a3db7f79731b95029fa3814a9f6c955177bc03
matches
public boolean matches(String pattern, String source)
{    return match(pattern, source);}
247b05f79fea6e6b8521eeb188c6e840227a7cf2533b0417e2ec18ae99e25938
match
public boolean match(String pattern, String path)
{    return doMatch(pattern, path, true);}
6ad4efbc93aa9be5b7f8e8210d30d3c7c6b08aa64831665e57f13457ad0ac1ae
matchStart
public boolean matchStart(String pattern, String path)
{    return doMatch(pattern, path, false);}
27b633f20a26b3a45dc2b02667a1315e8de79339727d8d96c092be0ccf3fbc40
doMatch
protected boolean doMatch(String pattern, String path, boolean fullMatch)
{    if (path.startsWith(this.pathSeparator) != pattern.startsWith(this.pathSeparator)) {        return false;    }    String[] pattDirs = StringUtils.tokenizeToStringArray(pattern, this.pathSeparator);    String[] pathDirs = StringUtils.tokenizeToStringArray(path, this.pathSeparator);    int pattIdxStart = 0;    int pattIdxEnd = pattDirs.length - 1;    int pathIdxStart = 0;    int pathIdxEnd = pathDirs.length - 1;        while (pattIdxStart <= pattIdxEnd && pathIdxStart <= pathIdxEnd) {        String patDir = pattDirs[pattIdxStart];        if ("**".equals(patDir)) {            break;        }        if (!matchStrings(patDir, pathDirs[pathIdxStart])) {            return false;        }        pattIdxStart++;        pathIdxStart++;    }    if (pathIdxStart > pathIdxEnd) {                if (pattIdxStart > pattIdxEnd) {            return (pattern.endsWith(this.pathSeparator) ? path.endsWith(this.pathSeparator) : !path.endsWith(this.pathSeparator));        }        if (!fullMatch) {            return true;        }        if (pattIdxStart == pattIdxEnd && pattDirs[pattIdxStart].equals("*") && path.endsWith(this.pathSeparator)) {            return true;        }        for (int i = pattIdxStart; i <= pattIdxEnd; i++) {            if (!pattDirs[i].equals("**")) {                return false;            }        }        return true;    } else if (pattIdxStart > pattIdxEnd) {                return false;    } else if (!fullMatch && "**".equals(pattDirs[pattIdxStart])) {                return true;    }        while (pattIdxStart <= pattIdxEnd && pathIdxStart <= pathIdxEnd) {        String patDir = pattDirs[pattIdxEnd];        if (patDir.equals("**")) {            break;        }        if (!matchStrings(patDir, pathDirs[pathIdxEnd])) {            return false;        }        pattIdxEnd--;        pathIdxEnd--;    }    if (pathIdxStart > pathIdxEnd) {                for (int i = pattIdxStart; i <= pattIdxEnd; i++) {            if (!pattDirs[i].equals("**")) {                return false;            }        }        return true;    }    while (pattIdxStart != pattIdxEnd && pathIdxStart <= pathIdxEnd) {        int patIdxTmp = -1;        for (int i = pattIdxStart + 1; i <= pattIdxEnd; i++) {            if (pattDirs[i].equals("**")) {                patIdxTmp = i;                break;            }        }        if (patIdxTmp == pattIdxStart + 1) {                        pattIdxStart++;            continue;        }                        int patLength = (patIdxTmp - pattIdxStart - 1);        int strLength = (pathIdxEnd - pathIdxStart + 1);        int foundIdx = -1;        strLoop: for (int i = 0; i <= strLength - patLength; i++) {            for (int j = 0; j < patLength; j++) {                String subPat = (String) pattDirs[pattIdxStart + j + 1];                String subStr = (String) pathDirs[pathIdxStart + i + j];                if (!matchStrings(subPat, subStr)) {                    continue strLoop;                }            }            foundIdx = pathIdxStart + i;            break;        }        if (foundIdx == -1) {            return false;        }        pattIdxStart = patIdxTmp;        pathIdxStart = foundIdx + patLength;    }    for (int i = pattIdxStart; i <= pattIdxEnd; i++) {        if (!pattDirs[i].equals("**")) {            return false;        }    }    return true;}
d6b56e8c139aa2fc7cb60fb5e707dd2bb538b92da067cd4375f3010ccbab8024
matchStrings
private boolean matchStrings(String pattern, String str)
{    char[] patArr = pattern.toCharArray();    char[] strArr = str.toCharArray();    int patIdxStart = 0;    int patIdxEnd = patArr.length - 1;    int strIdxStart = 0;    int strIdxEnd = strArr.length - 1;    char ch;    boolean containsStar = false;    for (char aPatArr : patArr) {        if (aPatArr == '*') {            containsStar = true;            break;        }    }    if (!containsStar) {                if (patIdxEnd != strIdxEnd) {                        return false;        }        for (int i = 0; i <= patIdxEnd; i++) {            ch = patArr[i];            if (ch != '?') {                if (ch != strArr[i]) {                                        return false;                }            }        }                return true;    }    if (patIdxEnd == 0) {                return true;    }        while ((ch = patArr[patIdxStart]) != '*' && strIdxStart <= strIdxEnd) {        if (ch != '?') {            if (ch != strArr[strIdxStart]) {                                return false;            }        }        patIdxStart++;        strIdxStart++;    }    if (strIdxStart > strIdxEnd) {                for (int i = patIdxStart; i <= patIdxEnd; i++) {            if (patArr[i] != '*') {                return false;            }        }        return true;    }        while ((ch = patArr[patIdxEnd]) != '*' && strIdxStart <= strIdxEnd) {        if (ch != '?') {            if (ch != strArr[strIdxEnd]) {                                return false;            }        }        patIdxEnd--;        strIdxEnd--;    }    if (strIdxStart > strIdxEnd) {                for (int i = patIdxStart; i <= patIdxEnd; i++) {            if (patArr[i] != '*') {                return false;            }        }        return true;    }        while (patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd) {        int patIdxTmp = -1;        for (int i = patIdxStart + 1; i <= patIdxEnd; i++) {            if (patArr[i] == '*') {                patIdxTmp = i;                break;            }        }        if (patIdxTmp == patIdxStart + 1) {                        patIdxStart++;            continue;        }                        int patLength = (patIdxTmp - patIdxStart - 1);        int strLength = (strIdxEnd - strIdxStart + 1);        int foundIdx = -1;        strLoop: for (int i = 0; i <= strLength - patLength; i++) {            for (int j = 0; j < patLength; j++) {                ch = patArr[patIdxStart + j + 1];                if (ch != '?') {                    if (ch != strArr[strIdxStart + i + j]) {                        continue strLoop;                    }                }            }            foundIdx = strIdxStart + i;            break;        }        if (foundIdx == -1) {            return false;        }        patIdxStart = patIdxTmp;        strIdxStart = foundIdx + patLength;    }        for (int i = patIdxStart; i <= patIdxEnd; i++) {        if (patArr[i] != '*') {            return false;        }    }    return true;}
3a0e274e9bf4f5dcec23750d99cb73a7a3648dce1609698d4df876be6709091d
extractPathWithinPattern
public String extractPathWithinPattern(String pattern, String path)
{    String[] patternParts = StringUtils.tokenizeToStringArray(pattern, this.pathSeparator);    String[] pathParts = StringUtils.tokenizeToStringArray(path, this.pathSeparator);    StringBuilder buffer = new StringBuilder();        int puts = 0;    for (int i = 0; i < patternParts.length; i++) {        String patternPart = patternParts[i];        if ((patternPart.indexOf('*') > -1 || patternPart.indexOf('?') > -1) && pathParts.length >= i + 1) {            if (puts > 0 || (i == 0 && !pattern.startsWith(this.pathSeparator))) {                buffer.append(this.pathSeparator);            }            buffer.append(pathParts[i]);            puts++;        }    }        for (int i = patternParts.length; i < pathParts.length; i++) {        if (puts > 0 || i > 0) {            buffer.append(this.pathSeparator);        }        buffer.append(pathParts[i]);    }    return buffer.toString();}
f979e82606b6796d44acc21f4116aa03083918f154f5d9a1f094d6604912d54a
asSet
public static Set<E> asSet(E... elements)
{    if (elements == null || elements.length == 0) {        return Collections.emptySet();    }    if (elements.length == 1) {        return Collections.singleton(elements[0]);    }    LinkedHashSet<E> set = new LinkedHashSet<E>(elements.length * 4 / 3 + 1);    Collections.addAll(set, elements);    return set;}
6341ff14698e136e1e5fbd17cc5cccc3bd84dc483161beba12ea78a24083e667
isEmpty
public static boolean isEmpty(Collection c)
{    return c == null || c.isEmpty();}
70168b6211151b1ab2a9c7fafe2f283375fe0d868846049c12326ab131e34ac7
isEmpty
public static boolean isEmpty(Map m)
{    return m == null || m.isEmpty();}
67fe3e52c9c54d7d198c3226aae72f027d3aeb0413b903e25e721b6c86cb1c50
size
public static int size(Collection c)
{    return c != null ? c.size() : 0;}
d846a43fe3d8b0e2ad682676b2485790ad12d2e72d3c5219a921d90f1d898f34
size
public static int size(Map m)
{    return m != null ? m.size() : 0;}
ff305409a2c20699a293766872081f3db549324cb138b88b76d970d06ab5aad3
isEmpty
public static boolean isEmpty(PrincipalCollection principals)
{    return principals == null || principals.isEmpty();}
8ff8593c23a8d2dedcce131a15d4195bf961efde4891b82bb69214f0269885f4
asList
public static List<E> asList(E... elements)
{    if (elements == null || elements.length == 0) {        return Collections.emptyList();    }        return Arrays.asList(elements);}
e58161a427df3290fa02363c733f24a60b67e405c1641a9972d1e0516ef136c7
computeListCapacity
 static int computeListCapacity(int arraySize)
{    return (int) Math.min(5L + arraySize + (arraySize / 10), Integer.MAX_VALUE);}
09e2faf8b93816114e25a166e8a9df366645ed17d7b1f777d4604469c347b564
getVersion
public static String getVersion()
{    return version;}
bb742a7b49098417b1f722c2b5acb8cfbe8a129cfb30798c93d7bf6a694fa0f6
getMajorVersion
public static int getMajorVersion()
{    return majorVersion;}
4d9251eaa1e7998166fa8ee4bfcdc38ed3aa8f71488154897cddd0b0aa735076
isAtLeastVersion14
public static boolean isAtLeastVersion14()
{    return getMajorVersion() >= JAVA_14;}
61dcdcc3fdf4447d67bf7a4d6f3283a4347b202a2fae1b601d61c35f65e7bf26
isAtLeastVersion15
public static boolean isAtLeastVersion15()
{    return getMajorVersion() >= JAVA_15;}
9969e1463233f3dc8703d1d708c0245ee7323604cf5dfe4a28a94c78db1bc6c5
isAtLeastVersion16
public static boolean isAtLeastVersion16()
{    return getMajorVersion() >= JAVA_16;}
48a0856ab1681f48c39e1c2771b4c85ae516ba8a76035edbc51c9be3cab7a1be
closeConnection
public static void closeConnection(Connection connection)
{    if (connection != null) {        try {            connection.close();        } catch (SQLException ex) {            if (log.isDebugEnabled()) {                log.debug("Could not close JDBC Connection", ex);            }        } catch (Throwable ex) {            if (log.isDebugEnabled()) {                log.debug("Unexpected exception on closing JDBC Connection", ex);            }        }    }}
fcf01d745b6bdaaa733e2a12a181bed46f21e638eaaae0a66e43cf50d3d97ee5
closeStatement
public static void closeStatement(Statement statement)
{    if (statement != null) {        try {            statement.close();        } catch (SQLException ex) {            if (log.isDebugEnabled()) {                log.debug("Could not close JDBC Statement", ex);            }        } catch (Throwable ex) {            if (log.isDebugEnabled()) {                log.debug("Unexpected exception on closing JDBC Statement", ex);            }        }    }}
a8ba9085172769c4102a9be89c798f385479e844563b3f4a8af706671d42c90c
closeResultSet
public static void closeResultSet(ResultSet rs)
{    if (rs != null) {        try {            rs.close();        } catch (SQLException ex) {            if (log.isDebugEnabled()) {                log.debug("Could not close JDBC ResultSet", ex);            }        } catch (Throwable ex) {            if (log.isDebugEnabled()) {                log.debug("Unexpected exception on closing JDBC ResultSet", ex);            }        }    }}
5b235f5866f728233dddc7eafeb76fe8bede21d2fb1c6bd9b76c3a3350694241
getTypedValue
protected E getTypedValue(String key, Class<E> type)
{    E found = null;    Object o = backingMap.get(key);    if (o != null) {        if (!type.isAssignableFrom(o.getClass())) {            String msg = "Invalid object found in SubjectContext Map under key [" + key + "].  Expected type " + "was [" + type.getName() + "], but the object under that key is of type " + "[" + o.getClass().getName() + "].";            throw new IllegalArgumentException(msg);        }        found = (E) o;    }    return found;}
6c695fb2d62e3fa83696c74e6c26659e1a8ccaaac17a84d0d71c89d381a44231
nullSafePut
protected void nullSafePut(String key, Object value)
{    if (value != null) {        put(key, value);    }}
72ef1e59027007ffe0950edfd2670ad03bb65cd6463d5d1d282dfeb1750435b0
size
public int size()
{    return backingMap.size();}
803915e853382ad445a6e2333fabb8beb8e4acd70e908a0d818400f7baac42af
isEmpty
public boolean isEmpty()
{    return backingMap.isEmpty();}
9154dce23d5a31d20990d1b60c713715a9ef8ca924d8d6162d23527312976a2b
containsKey
public boolean containsKey(Object o)
{    return backingMap.containsKey(o);}
4e879072d074a556f62bc57b90c4759ec2dad39e716a67ddd495aec48e99868c
containsValue
public boolean containsValue(Object o)
{    return backingMap.containsValue(o);}
aa363a94253c60a7f7ba636ee96a1d23ad45a22335c08bd730a7fe92038a81b3
get
public Object get(Object o)
{    return backingMap.get(o);}
4af6abb075a2aa9b8fd09fcdcfeaa67a959053a7d3f70288d0a7b2f4c77f0b94
put
public Object put(String s, Object o)
{    return backingMap.put(s, o);}
1a92244037e1af33db591623807dbb1123c1c7ad81a73ce8dedf3e4b3997ed11
remove
public Object remove(Object o)
{    return backingMap.remove(o);}
0d79e2490cbb5693032c65152ee431fc0ec30d8ac6c2cb6ddbfc0ccc7de94834
putAll
public void putAll(Map<? extends String, ?> map)
{    backingMap.putAll(map);}
21ac40bb9a99614b6ac18fa4043acb6173fccff96066fdfab963dba597923aa8
clear
public void clear()
{    backingMap.clear();}
19992f7878b292f412223047e28dd68a1ec96625e3ce9dda9ebba09864bae23c
keySet
public Set<String> keySet()
{    return Collections.unmodifiableSet(backingMap.keySet());}
25f247b88c223a518c6f0edb394595a9501de75ec95fbda6943f936c3de77378
values
public Collection<Object> values()
{    return Collections.unmodifiableCollection(backingMap.values());}
60d720eed1f11540ec58718241b8bd9889a8b2802d068634e456918e1d4e8d0e
entrySet
public Set<Entry<String, Object>> entrySet()
{    return Collections.unmodifiableSet(backingMap.entrySet());}
afdb1f891f1dacc47f4e488678586e55b919865095777bda5fa8b6cd00f1b572
resolveDelimitedPermissions
public static Set<Permission> resolveDelimitedPermissions(String s, PermissionResolver permissionResolver)
{    Set<String> permStrings = toPermissionStrings(s);    return resolvePermissions(permStrings, permissionResolver);}
80ab4b455762514b33a453bb096971d8b85667013ec8ea0a6030c06e9a5e9bd8
toPermissionStrings
public static Set<String> toPermissionStrings(String permissionsString)
{    String[] tokens = StringUtils.split(permissionsString);    if (tokens != null && tokens.length > 0) {        return new LinkedHashSet<String>(Arrays.asList(tokens));    }    return null;}
859a5d72b01d5b040d888a8e403f1483e419a64a3a8f731eeb3907c05b66e4c9
resolvePermissions
public static Set<Permission> resolvePermissions(Collection<String> permissionStrings, PermissionResolver permissionResolver)
{    Set<Permission> permissions = new LinkedHashSet<Permission>(permissionStrings.size());    for (String permissionString : permissionStrings) {        permissions.add(permissionResolver.resolvePermission(permissionString));    }    return permissions;}
a5f3a27dcd09fe95c76a953453a3db7f79731b95029fa3814a9f6c955177bc03
matches
public boolean matches(String pattern, String source)
{    if (pattern == null) {        throw new IllegalArgumentException("pattern argument cannot be null.");    }    Pattern p = Pattern.compile(pattern);    Matcher m = p.matcher(source);    return m.matches();}
2f0daabbd2b51cd872aad9a43ac94c841c15743fc91a19effd0f1f4e5daea604
getResources
public static Map<Object, Object> getResources()
{    if (resources.get() == null) {        return Collections.emptyMap();    } else {        return new HashMap<Object, Object>(resources.get());    }}
e9411cdab622013e096852159dcbd1c30ce6775c65e8e307e1cbfa305f068215
setResources
public static void setResources(Map<Object, Object> newResources)
{    if (CollectionUtils.isEmpty(newResources)) {        return;    }    ensureResourcesInitialized();    resources.get().clear();    resources.get().putAll(newResources);}
b6921650806855c59f8bd9fc229008b82e3c35fbb493936e55b99608a7272979
getValue
private static Object getValue(Object key)
{    Map<Object, Object> perThreadResources = resources.get();    return perThreadResources != null ? perThreadResources.get(key) : null;}
2ea91c6d0a555cf9099bc4d53bb69af7e4dd9c204de0175e8f9e48176103d8cf
ensureResourcesInitialized
private static void ensureResourcesInitialized()
{    if (resources.get() == null) {        resources.set(new HashMap<Object, Object>());    }}
897750aa10b0343a5da10289ebe474e2a69fe04f12920ed2d93d5c9e7834aa31
get
public static Object get(Object key)
{    if (log.isTraceEnabled()) {        String msg = "get() - in thread [" + Thread.currentThread().getName() + "]";        log.trace(msg);    }    Object value = getValue(key);    if ((value != null) && log.isTraceEnabled()) {        String msg = "Retrieved value of type [" + value.getClass().getName() + "] for key [" + key + "] " + "bound to thread [" + Thread.currentThread().getName() + "]";        log.trace(msg);    }    return value;}
9fc4fdf94cf2de6c1da4e87d1c91c76c3a1b7b2c9663b192e5027dca68146c69
put
public static void put(Object key, Object value)
{    if (key == null) {        throw new IllegalArgumentException("key cannot be null");    }    if (value == null) {        remove(key);        return;    }    ensureResourcesInitialized();    resources.get().put(key, value);    if (log.isTraceEnabled()) {        String msg = "Bound value of type [" + value.getClass().getName() + "] for key [" + key + "] to thread " + "[" + Thread.currentThread().getName() + "]";        log.trace(msg);    }}
b9795c864f06ba90f0ca338c4ea5c59ba45145473f14020a74016b72d4b06f27
remove
public static Object remove(Object key)
{    Map<Object, Object> perThreadResources = resources.get();    Object value = perThreadResources != null ? perThreadResources.remove(key) : null;    if ((value != null) && log.isTraceEnabled()) {        String msg = "Removed value of type [" + value.getClass().getName() + "] for key [" + key + "]" + "from thread [" + Thread.currentThread().getName() + "]";        log.trace(msg);    }    return value;}
f78d83b3a83c100f294074f10ff50383b9a02545ffd24a3b43681f9a6abdfb33
remove
public static void remove()
{    resources.remove();}
dfeb536ecd650cd066c2b58506bed53e4f18c0c1075e0f5d8869ea6b3cd05871
getSecurityManager
public static SecurityManager getSecurityManager()
{    return (SecurityManager) get(SECURITY_MANAGER_KEY);}
f8cd7e9631b92d2ecd590ce5b6fda6d26605560c5ba55131ef713ae0b40cab01
bind
public static void bind(SecurityManager securityManager)
{    if (securityManager != null) {        put(SECURITY_MANAGER_KEY, securityManager);    }}
97ecda82255fb58fc5a104f7912788a8540b36b22dfc0785dd82b1ad6f3dbf56
unbindSecurityManager
public static SecurityManager unbindSecurityManager()
{    return (SecurityManager) remove(SECURITY_MANAGER_KEY);}
769fa6ac5b48b51d900fb9422fe8c82bfa52d92ae6ebdf3bf43aa87a0ea9c4c1
getSubject
public static Subject getSubject()
{    return (Subject) get(SUBJECT_KEY);}
9f9d6612d335ca86bc2d96d7565c1fdcfa61421dd52ec4ff96302c3d8c0a63cd
bind
public static void bind(Subject subject)
{    if (subject != null) {        put(SUBJECT_KEY, subject);    }}
22541f48ab9bcec0758b2977b8fe155d541beaa770a55700c225c99bb4720648
unbindSubject
public static Subject unbindSubject()
{    return (Subject) remove(SUBJECT_KEY);}
1719ac922f5639c03c64038dc8ce5be27bfcaeff364153fdc790fb931d58320b
childValue
protected Map<Object, Object> childValue(Map<Object, Object> parentValue)
{    if (parentValue != null) {        return (Map<Object, Object>) ((HashMap<Object, Object>) parentValue).clone();    } else {        return null;    }}
893f7c05873bfe6000bf9925cb2914ff90552d69c9e76ba13bc124a673a42229
operateThis
public void operateThis()
{}
aa1f2dca1eac253e74b42200ff2cbe6a8f0d9a96e8d51e0998c8a864dfc72996
operateThat
public void operateThat()
{}
94f1c39220263effad78dd51c88c0f4d799ed35c0cb500cb01c4ba17421292b9
testAnnotationFoundFromClass
public void testAnnotationFoundFromClass() throws SecurityException, NoSuchMethodException
{    MyFixture myFixture = new MyFixture();    MethodInvocation methodInvocation = createMock(MethodInvocation.class);    Method method = MyFixture.class.getDeclaredMethod("operateThis");    expect(methodInvocation.getMethod()).andReturn(method);    expect(methodInvocation.getThis()).andReturn(myFixture);    replay(methodInvocation);    assertNotNull(annotationResolver.getAnnotation(methodInvocation, RequiresRoles.class));}
cca89a18eb8f20658ab84f8e3bbc41c33f4dc552768765590e2f41c1be9f08b0
testAnnotationFoundFromMethod
public void testAnnotationFoundFromMethod() throws SecurityException, NoSuchMethodException
{    MethodInvocation methodInvocation = createMock(MethodInvocation.class);    Method method = MyFixture.class.getDeclaredMethod("operateThat");    expect(methodInvocation.getMethod()).andReturn(method);    replay(methodInvocation);    assertNotNull(annotationResolver.getAnnotation(methodInvocation, RequiresUser.class));}
b01489fe046d8213f4eec4423d5992a88fc840f7fc78c011cf6f33e6e2677038
testNullMethodInvocation
public void testNullMethodInvocation() throws SecurityException, NoSuchMethodException
{    MethodInvocation methodInvocation = createMock(MethodInvocation.class);    Method method = MyFixture.class.getDeclaredMethod("operateThis");    expect(methodInvocation.getMethod()).andReturn(method);    expect(methodInvocation.getThis()).andReturn(null);    replay(methodInvocation);    assertNull(annotationResolver.getAnnotation(methodInvocation, RequiresUser.class));}
2192f5ea59ea8a35a2f719224433776a4f38970d90038e3ea9fef476645e9266
createAuthcReturnNull
private AbstractAuthenticator createAuthcReturnNull()
{    return new AbstractAuthenticator() {        protected AuthenticationInfo doAuthenticate(AuthenticationToken token) throws AuthenticationException {            return null;        }    };}
69a2c746a923800356cafcbaba897b18d467f91122fd4ee982e5fa1e469f9955
doAuthenticate
protected AuthenticationInfo doAuthenticate(AuthenticationToken token) throws AuthenticationException
{    return null;}
8cb133e98857af5cab0afcc43ab163f85971243704d0ba69b9e6f4c0fd03b6d6
createAuthcReturnValidAuthcInfo
private AbstractAuthenticator createAuthcReturnValidAuthcInfo()
{    return new AbstractAuthenticator() {        protected AuthenticationInfo doAuthenticate(AuthenticationToken token) throws AuthenticationException {            return info;        }    };}
69a2c746a923800356cafcbaba897b18d467f91122fd4ee982e5fa1e469f9955
doAuthenticate
protected AuthenticationInfo doAuthenticate(AuthenticationToken token) throws AuthenticationException
{    return info;}
4bd0c98f16b184c0cbd316ad7ab328a9161402138ccf30db4e7a3ac294fde2ec
newToken
private AuthenticationToken newToken()
{    return new UsernamePasswordToken("user1", "secret");}
4adaefafec562702d887f5960a1408e5f9d1add92c42fab7cb857d701c42d2a2
setUp
public void setUp()
{    abstractAuthenticator = createAuthcReturnValidAuthcInfo();}
638a64a82e2602588f1da79a400dfa099ea7c71c05c0b48c815657cdc236be59
newAbstractAuthenticatorSecurityManagerConstructor
public void newAbstractAuthenticatorSecurityManagerConstructor()
{    abstractAuthenticator = new AbstractAuthenticator() {        protected AuthenticationInfo doAuthenticate(AuthenticationToken token) throws AuthenticationException {            return info;        }    };}
69a2c746a923800356cafcbaba897b18d467f91122fd4ee982e5fa1e469f9955
doAuthenticate
protected AuthenticationInfo doAuthenticate(AuthenticationToken token) throws AuthenticationException
{    return info;}
3854278fbb10d33d9dc1cd017df78870f598e09226db7c11e6bd198a43808a48
authenticateWithNullArgument
public void authenticateWithNullArgument()
{    abstractAuthenticator.authenticate(null);}
8ad5d3dcc4a9cbf899d5a2fbb0556d9f752a29fcc9326cf04a220595aebfa03e
throwAuthenticationExceptionIfDoAuthenticateReturnsNull
public void throwAuthenticationExceptionIfDoAuthenticateReturnsNull()
{    abstractAuthenticator = createAuthcReturnNull();    abstractAuthenticator.authenticate(newToken());}
21952fcac3afb7105e13db142d85484618175393d7ef0c32dc7ad1aca5286d5f
nonNullAuthenticationInfoAfterAuthenticate
public void nonNullAuthenticationInfoAfterAuthenticate()
{    AuthenticationInfo authcInfo = abstractAuthenticator.authenticate(newToken());    assertNotNull(authcInfo);}
e0b1167bce89b959439c20077058f93c17ca9aca61def83cb28e6df29ab814b6
notifySuccessAfterDoAuthenticate
public void notifySuccessAfterDoAuthenticate()
{    AuthenticationListener mockListener = createMock(AuthenticationListener.class);    abstractAuthenticator.getAuthenticationListeners().add(mockListener);    AuthenticationToken token = newToken();    mockListener.onSuccess(token, info);    replay(mockListener);    abstractAuthenticator.authenticate(token);    verify(mockListener);}
8fd93ac9333844a91124a58fc19e2333fa380a2ab55f843057c2a0f7e1d83c63
notifyFailureAfterDoAuthenticateThrowsAuthenticationException
public void notifyFailureAfterDoAuthenticateThrowsAuthenticationException()
{    AuthenticationListener mockListener = createMock(AuthenticationListener.class);    AuthenticationToken token = newToken();    final AuthenticationException ae = new AuthenticationException("dummy exception to test notification");    abstractAuthenticator = new AbstractAuthenticator() {        protected AuthenticationInfo doAuthenticate(AuthenticationToken token) throws AuthenticationException {            throw ae;        }    };    abstractAuthenticator.getAuthenticationListeners().add(mockListener);    mockListener.onFailure(token, ae);    replay(mockListener);    boolean exceptionThrown = false;    try {        abstractAuthenticator.authenticate(token);    } catch (AuthenticationException e) {        exceptionThrown = true;        assertEquals(e, ae);    }    verify(mockListener);    if (!exceptionThrown) {        fail("An AuthenticationException should have been thrown during the notifyFailure test case.");    }}
69a2c746a923800356cafcbaba897b18d467f91122fd4ee982e5fa1e469f9955
doAuthenticate
protected AuthenticationInfo doAuthenticate(AuthenticationToken token) throws AuthenticationException
{    throw ae;}
142b264aacfce4bf064030b53f8b7609b913bc9da91da7904a81b3e45b439130
notifyFailureAfterDoAuthenticateThrowsNonAuthenticationException
public void notifyFailureAfterDoAuthenticateThrowsNonAuthenticationException()
{    abstractAuthenticator = new AbstractAuthenticator() {        protected AuthenticationInfo doAuthenticate(AuthenticationToken token) throws AuthenticationException {            throw new IllegalArgumentException("not an AuthenticationException subclass");        }    };    AuthenticationToken token = newToken();    abstractAuthenticator.authenticate(token);}
69a2c746a923800356cafcbaba897b18d467f91122fd4ee982e5fa1e469f9955
doAuthenticate
protected AuthenticationInfo doAuthenticate(AuthenticationToken token) throws AuthenticationException
{    throw new IllegalArgumentException("not an AuthenticationException subclass");}
65df270d033a72ea9daed4044d6d263b4f3a80a50ef5b455c4e70f7c06d43526
logExceptionAfterDoAuthenticateThrowsNonAuthenticationException
public void logExceptionAfterDoAuthenticateThrowsNonAuthenticationException()
{    Logger logger = Logger.getLogger(AbstractAuthenticator.class);        ByteArrayOutputStream out = new ByteArrayOutputStream();    Layout layout = new SimpleLayout();    Appender appender = new WriterAppender(layout, out);    logger.addAppender(appender);    final String expectedExceptionMessage = "exception thrown for test logExceptionAfterDoAuthenticateThrowsNonAuthenticationException";    abstractAuthenticator = new AbstractAuthenticator() {        protected AuthenticationInfo doAuthenticate(AuthenticationToken token) throws AuthenticationException {            throw new IllegalArgumentException(expectedExceptionMessage);        }    };    AuthenticationToken token = newToken();    try {        abstractAuthenticator.authenticate(token);        fail("the expected AuthenticationException was not thrown");    } catch (AuthenticationException expectedException) {    }    String logMsg = out.toString();    assertTrue(logMsg.contains("WARN"));    assertTrue(logMsg.contains("java.lang.IllegalArgumentException: " + expectedExceptionMessage));    logger.removeAppender(appender);}
69a2c746a923800356cafcbaba897b18d467f91122fd4ee982e5fa1e469f9955
doAuthenticate
protected AuthenticationInfo doAuthenticate(AuthenticationToken token) throws AuthenticationException
{    throw new IllegalArgumentException(expectedExceptionMessage);}
731b0823f1b7fe36ea0e90b4498eb71abae99bc55c4896737a0a7d7cf1bcb301
getExceptionClass
protected Class getExceptionClass()
{    return ConcurrentAccessException.class;}
0e0411efe5e7868378f7f03580d84579275f5762c392b06dea78c574fd2c1d57
testBasic
public void testBasic()
{    CredentialsMatcher matcher = (CredentialsMatcher) ClassUtils.newInstance(getMatcherClass());    byte[] hashed = hash("password").getBytes();    AuthenticationInfo account = new SimpleAuthenticationInfo("username", hashed, "realmName");    AuthenticationToken token = new UsernamePasswordToken("username", "password");    assertTrue(matcher.doCredentialsMatch(token, account));}
0e0411efe5e7868378f7f03580d84579275f5762c392b06dea78c574fd2c1d57
testBasic
public void testBasic()
{    assertTrue(new AllowAllCredentialsMatcher().doCredentialsMatch(null, null));}
9db6501c829251ea8323fc165a2fcc7e0c85fd9686b5827d7e778e6e0c166f8c
testSaltedAuthenticationInfo
public void testSaltedAuthenticationInfo()
{        HashedCredentialsMatcher matcher = new HashedCredentialsMatcher(Sha1Hash.ALGORITHM_NAME);        ByteSource salt = new SecureRandomNumberGenerator().nextBytes();    Object hashedPassword = new Sha1Hash("password", salt);    SimpleAuthenticationInfo account = new SimpleAuthenticationInfo("username", hashedPassword, salt, "realmName");        AuthenticationToken token = new UsernamePasswordToken("username", "password");        assertTrue(matcher.doCredentialsMatch(token, account));}
f0808961f990e6cf9fbdbe63bd061840e7ac7ba34ffb96eaba226e34cf3055a4
testBackwardsCompatibleUnsaltedAuthenticationInfo
public void testBackwardsCompatibleUnsaltedAuthenticationInfo()
{    HashedCredentialsMatcher matcher = new HashedCredentialsMatcher(Sha1Hash.ALGORITHM_NAME);        final String username = "username";    final String password = "password";    final Object hashedPassword = new Sha1Hash(password).getBytes();    AuthenticationInfo account = new AuthenticationInfo() {        public PrincipalCollection getPrincipals() {            return new SimplePrincipalCollection(username, "realmName");        }        public Object getCredentials() {            return hashedPassword;        }    };        AuthenticationToken token = new UsernamePasswordToken("username", "password");        assertTrue(matcher.doCredentialsMatch(token, account));}
827e0a1d65c96dadbd66eb037a8c8e1d6d7169a482f4e5e0864a12a902d3d44b
getPrincipals
public PrincipalCollection getPrincipals()
{    return new SimplePrincipalCollection(username, "realmName");}
d40889d9d9d8556f6c0a26b69ca857cdca5bea6f57da293d87d0c43c6e6f218f
getCredentials
public Object getCredentials()
{    return hashedPassword;}
e788bc966397012d1ae697b878feded873c0fe95cf10fe2ff22ff91f625652c2
testBackwardsCompatibleSaltedAuthenticationInfo
public void testBackwardsCompatibleSaltedAuthenticationInfo()
{    HashedCredentialsMatcher matcher = new HashedCredentialsMatcher(Sha1Hash.ALGORITHM_NAME);        matcher.setHashSalted(true);            final String username = "username";    final String password = "password";    final Object hashedPassword = new Sha1Hash(password, username).getBytes();    AuthenticationInfo account = new AuthenticationInfo() {        public PrincipalCollection getPrincipals() {            return new SimplePrincipalCollection(username, "realmName");        }        public Object getCredentials() {            return hashedPassword;        }    };        AuthenticationToken token = new UsernamePasswordToken("username", "password");        assertTrue(matcher.doCredentialsMatch(token, account));}
827e0a1d65c96dadbd66eb037a8c8e1d6d7169a482f4e5e0864a12a902d3d44b
getPrincipals
public PrincipalCollection getPrincipals()
{    return new SimplePrincipalCollection(username, "realmName");}
d40889d9d9d8556f6c0a26b69ca857cdca5bea6f57da293d87d0c43c6e6f218f
getCredentials
public Object getCredentials()
{    return hashedPassword;}
cb7f303bf2b472ac1de26f6f02a15d7cb7473026009e20a1a0d9f83fa02bd8df
getMatcherClass
public Class<? extends HashedCredentialsMatcher> getMatcherClass()
{    return Md2CredentialsMatcher.class;}
10af9105f5ff9034f1d6cc1ce673082e5634d142f46fc6d798f77e0f16a1f3e0
hash
public AbstractHash hash(Object credentials)
{    return new Md2Hash(credentials);}
cb7f303bf2b472ac1de26f6f02a15d7cb7473026009e20a1a0d9f83fa02bd8df
getMatcherClass
public Class<? extends HashedCredentialsMatcher> getMatcherClass()
{    return Md5CredentialsMatcher.class;}
10af9105f5ff9034f1d6cc1ce673082e5634d142f46fc6d798f77e0f16a1f3e0
hash
public AbstractHash hash(Object credentials)
{    return new Md5Hash(credentials);}
cb7f303bf2b472ac1de26f6f02a15d7cb7473026009e20a1a0d9f83fa02bd8df
getMatcherClass
public Class<? extends HashedCredentialsMatcher> getMatcherClass()
{    return Sha1CredentialsMatcher.class;}
10af9105f5ff9034f1d6cc1ce673082e5634d142f46fc6d798f77e0f16a1f3e0
hash
public AbstractHash hash(Object credentials)
{    return new Sha1Hash(credentials);}
cb7f303bf2b472ac1de26f6f02a15d7cb7473026009e20a1a0d9f83fa02bd8df
getMatcherClass
public Class<? extends HashedCredentialsMatcher> getMatcherClass()
{    return Sha256CredentialsMatcher.class;}
10af9105f5ff9034f1d6cc1ce673082e5634d142f46fc6d798f77e0f16a1f3e0
hash
public AbstractHash hash(Object credentials)
{    return new Sha256Hash(credentials);}
cb7f303bf2b472ac1de26f6f02a15d7cb7473026009e20a1a0d9f83fa02bd8df
getMatcherClass
public Class<? extends HashedCredentialsMatcher> getMatcherClass()
{    return Sha384CredentialsMatcher.class;}
10af9105f5ff9034f1d6cc1ce673082e5634d142f46fc6d798f77e0f16a1f3e0
hash
public AbstractHash hash(Object credentials)
{    return new Sha384Hash(credentials);}
cb7f303bf2b472ac1de26f6f02a15d7cb7473026009e20a1a0d9f83fa02bd8df
getMatcherClass
public Class<? extends HashedCredentialsMatcher> getMatcherClass()
{    return Sha512CredentialsMatcher.class;}
10af9105f5ff9034f1d6cc1ce673082e5634d142f46fc6d798f77e0f16a1f3e0
hash
public AbstractHash hash(Object credentials)
{    return new Sha512Hash(credentials);}
731b0823f1b7fe36ea0e90b4498eb71abae99bc55c4896737a0a7d7cf1bcb301
getExceptionClass
protected Class getExceptionClass()
{    return ExcessiveAttemptsException.class;}
731b0823f1b7fe36ea0e90b4498eb71abae99bc55c4896737a0a7d7cf1bcb301
getExceptionClass
protected Class getExceptionClass()
{    return ExpiredCredentialsException.class;}
731b0823f1b7fe36ea0e90b4498eb71abae99bc55c4896737a0a7d7cf1bcb301
getExceptionClass
protected Class getExceptionClass()
{    return IncorrectCredentialsException.class;}
731b0823f1b7fe36ea0e90b4498eb71abae99bc55c4896737a0a7d7cf1bcb301
getExceptionClass
protected Class getExceptionClass()
{    return LockedAccountException.class;}
4adaefafec562702d887f5960a1408e5f9d1add92c42fab7cb857d701c42d2a2
setUp
public void setUp()
{    strategy = new AllSuccessfulStrategy();}
27d0fdc94dddf743335ce1036db380747f831e8ac454ae5b3a129d976153b18a
beforeAllAttempts
public void beforeAllAttempts()
{    AuthenticationInfo info = strategy.beforeAllAttempts(null, null);    assertNotNull(info);}
f5594960365d3498d0d91c4ca5caa67ba44a30f53a588e301b6b519701b8b644
beforeAttemptSupportingToken
public void beforeAttemptSupportingToken()
{    new SimpleAccountRealm();}
098e7382d7839135a4313de495d557c9a53ac07e8371d6b07a415dd9fcce97af
beforeAttemptRealmDoesntSupportToken
public void beforeAttemptRealmDoesntSupportToken()
{    Realm notSupportingRealm = new AuthorizingRealm() {        public boolean supports(AuthenticationToken token) {            return false;        }        protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {            return null;        }        protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principal) {            return null;        }    };    strategy.beforeAttempt(notSupportingRealm, null, null);}
347204a6259b43636ce3e82255cd8e22c7e879cd3774506adc1867e8510e9f02
supports
public boolean supports(AuthenticationToken token)
{    return false;}
04d12ebf29bfe2a4c8158a941df0d9788366bab7e1f094a3057e32147ffbeb42
doGetAuthenticationInfo
protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException
{    return null;}
ec7476a7ae1f0db35ecacccb7f86cb871e5cd2cea0428d2adb76e428b2fc3f1c
doGetAuthorizationInfo
protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principal)
{    return null;}
4adaefafec562702d887f5960a1408e5f9d1add92c42fab7cb857d701c42d2a2
setUp
public void setUp()
{    strategy = new FirstSuccessfulStrategy();}
27d0fdc94dddf743335ce1036db380747f831e8ac454ae5b3a129d976153b18a
beforeAllAttempts
public void beforeAllAttempts()
{    AuthenticationInfo authenticationInfo = strategy.beforeAllAttempts(null, null);    assertNull(authenticationInfo);}
1128355191865f84a979412644a7a4da8811c3b286539318535b013f1a940f04
testMergeWithValidAggregateInfo
public void testMergeWithValidAggregateInfo()
{    AuthenticationInfo aggregate = new MergableAuthenticationInfo() {        @Override        public void merge(AuthenticationInfo info) {        }        @Override        public PrincipalCollection getPrincipals() {            return new SimplePrincipalCollection("principals", "realmName");        }        @Override        public Object getCredentials() {            return null;        }    };    AuthenticationInfo mergeResult = strategy.merge(new SimpleAuthenticationInfo(), aggregate);    assertEquals(aggregate, mergeResult);}
3327b8ada8446344d3e76a1ac21319d875789f8c75168499761e4694479c5745
merge
public void merge(AuthenticationInfo info)
{}
827e0a1d65c96dadbd66eb037a8c8e1d6d7169a482f4e5e0864a12a902d3d44b
getPrincipals
public PrincipalCollection getPrincipals()
{    return new SimplePrincipalCollection("principals", "realmName");}
d40889d9d9d8556f6c0a26b69ca857cdca5bea6f57da293d87d0c43c6e6f218f
getCredentials
public Object getCredentials()
{    return null;}
4657b221775d660a6eadc2f0e47c57bc4b1984101b47673cc01982c0105d1a67
testMergeWithInvalidAggregateInfo
public void testMergeWithInvalidAggregateInfo()
{    AuthenticationInfo aggregate = new MergableAuthenticationInfo() {        @Override        public void merge(AuthenticationInfo info) {        }        @Override        public PrincipalCollection getPrincipals() {            return new SimplePrincipalCollection();        }        @Override        public Object getCredentials() {            return null;        }    };    AuthenticationInfo authInfo = new SimpleAuthenticationInfo();    AuthenticationInfo mergeResult = strategy.merge(authInfo, aggregate);    assertEquals(authInfo, mergeResult);}
3327b8ada8446344d3e76a1ac21319d875789f8c75168499761e4694479c5745
merge
public void merge(AuthenticationInfo info)
{}
827e0a1d65c96dadbd66eb037a8c8e1d6d7169a482f4e5e0864a12a902d3d44b
getPrincipals
public PrincipalCollection getPrincipals()
{    return new SimplePrincipalCollection();}
d40889d9d9d8556f6c0a26b69ca857cdca5bea6f57da293d87d0c43c6e6f218f
getCredentials
public Object getCredentials()
{    return null;}
bbff4ec329f9dc127a286e85fa4d02897ce882ec0210486b446c40c6b78e9c9f
testMergeWithEmptyInstances
public void testMergeWithEmptyInstances()
{    SimpleAuthenticationInfo aggregate = new SimpleAuthenticationInfo();    SimpleAuthenticationInfo local = new SimpleAuthenticationInfo();    aggregate.merge(local);}
35b4ad8c7e07f8faa84ad0c4648ea62f4e5bd67bb00b53dadb26e32f0d428bda
testMergeWithAggregateNullCredentials
public void testMergeWithAggregateNullCredentials()
{    SimpleAuthenticationInfo aggregate = new SimpleAuthenticationInfo();    SimpleAuthenticationInfo local = new SimpleAuthenticationInfo("username", "password", "testRealm");    aggregate.merge(local);}
fb5e6f5144818dbfba4398fab1aad98887dd11020285b877d04496cca6fe82c5
testMergeWithImmutablePrincipalCollection
public void testMergeWithImmutablePrincipalCollection()
{    SimpleAuthenticationInfo aggregate = new SimpleAuthenticationInfo();        PrincipalCollection principalCollection = new PrincipalCollection() {        @SuppressWarnings("unchecked")        public List asList() {            return null;        }        @SuppressWarnings("unchecked")        public Set asSet() {            return null;        }        public <T> Collection<T> byType(Class<T> type) {            return null;        }        @SuppressWarnings("unchecked")        public Collection fromRealm(String realmName) {            Collection<Object> principals = new HashSet<Object>();            principals.add("testprincipal");            return principals;        }        public Object getPrimaryPrincipal() {            return null;        }        public Set<String> getRealmNames() {            Set<String> realms = new HashSet<String>();            realms.add("testrealm");            return realms;        }        public boolean isEmpty() {            return false;        }        public <T> T oneByType(Class<T> type) {            return null;        }        @SuppressWarnings("unchecked")        public Iterator iterator() {            return null;        }    };    aggregate.setPrincipals(principalCollection);    SimpleAuthenticationInfo local = new SimpleAuthenticationInfo("username", "password", "testRealm");    aggregate.merge(local);    assertEquals(2, aggregate.getPrincipals().asList().size());}
70f50d219d93f109a24ab1bd10e5592bab92237e27e26da6857782492d224334
asList
public List asList()
{    return null;}
fa80b6b35b133e5b6bc161f44789436efce185eaf30172135830cbf0be665ef8
asSet
public Set asSet()
{    return null;}
56e0f8f560d51fb06c10c88fc4dc0e6ddb16dd929e9f06357edc31a53b88ad4b
byType
public Collection<T> byType(Class<T> type)
{    return null;}
8ec9cc5e7a7589b3d0160198501a02a3a0aed2b69db22bfc63b26ad0878df4a0
fromRealm
public Collection fromRealm(String realmName)
{    Collection<Object> principals = new HashSet<Object>();    principals.add("testprincipal");    return principals;}
03786b397519a1c336f84e81accd350df6250b89107632ff6eeb1e9d8bacc854
getPrimaryPrincipal
public Object getPrimaryPrincipal()
{    return null;}
e4264bd06365787bd21923b043189393c51654f85e0e25d9b99f172b49bb992d
getRealmNames
public Set<String> getRealmNames()
{    Set<String> realms = new HashSet<String>();    realms.add("testrealm");    return realms;}
803915e853382ad445a6e2333fabb8beb8e4acd70e908a0d818400f7baac42af
isEmpty
public boolean isEmpty()
{    return false;}
c14bd3f65232d228d10596b452ba54c08d8b149166f15a67d0cce2462fa653da
oneByType
public T oneByType(Class<T> type)
{    return null;}
0e723677317a453b15c6986c072fc4977b27401eb64776817756eb62d12f659f
iterator
public Iterator iterator()
{    return null;}
731b0823f1b7fe36ea0e90b4498eb71abae99bc55c4896737a0a7d7cf1bcb301
getExceptionClass
protected Class getExceptionClass()
{    return UnknownAccountException.class;}
02cc32fc963b59f5269c8503c14ba9efacd34ca30b86e5e2b6d06e507d511fa8
testGuestSinglePermissionAssertion
public void testGuestSinglePermissionAssertion() throws Throwable
{    PermissionAnnotationHandler handler = new PermissionAnnotationHandler();    Annotation requiresPermissionAnnotation = new RequiresPermissions() {        public String[] value() {            return new String[] { "test:test" };        }        public Class<? extends Annotation> annotationType() {            return RequiresPermissions.class;        }        public Logical logical() {            return Logical.AND;        }    };    handler.assertAuthorized(requiresPermissionAnnotation);}
c44d20562e8186bedeff4fd2c61176e42ca668e868dea937d51b52d6f26e12bd
value
public String[] value()
{    return new String[] { "test:test" };}
b98de90c31e2c04ccd33175a2f542ace00c163de7e8eb61020c2358bb7543d9a
annotationType
public Class<? extends Annotation> annotationType()
{    return RequiresPermissions.class;}
0ec7a8b28eb561104d0137a86dcc29387ed179e6f1b107a974dc3152ac27b780
logical
public Logical logical()
{    return Logical.AND;}
9836578400e179a0bf3312db6c70f484f321a0c0e20293a1da0398e0661b7262
testGuestMultiplePermissionAssertion
public void testGuestMultiplePermissionAssertion() throws Throwable
{    PermissionAnnotationHandler handler = new PermissionAnnotationHandler();    Annotation requiresPermissionAnnotation = new RequiresPermissions() {        public String[] value() {            return new String[] { "test:test", "test2:test2" };        }        public Class<? extends Annotation> annotationType() {            return RequiresPermissions.class;        }        public Logical logical() {            return Logical.AND;        }    };    handler.assertAuthorized(requiresPermissionAnnotation);}
c44d20562e8186bedeff4fd2c61176e42ca668e868dea937d51b52d6f26e12bd
value
public String[] value()
{    return new String[] { "test:test", "test2:test2" };}
b98de90c31e2c04ccd33175a2f542ace00c163de7e8eb61020c2358bb7543d9a
annotationType
public Class<? extends Annotation> annotationType()
{    return RequiresPermissions.class;}
0ec7a8b28eb561104d0137a86dcc29387ed179e6f1b107a974dc3152ac27b780
logical
public Logical logical()
{    return Logical.AND;}
a9a67afdc838371eade4dc798db55fff346627a9cbb0354dd988945709592819
testGuestSingleRoleAssertion
public void testGuestSingleRoleAssertion() throws Throwable
{    RoleAnnotationHandler handler = new RoleAnnotationHandler();    Annotation requiresRolesAnnotation = new RequiresRoles() {        public String[] value() {            return new String[] { "blah" };        }        public Class<? extends Annotation> annotationType() {            return RequiresRoles.class;        }        public Logical logical() {            return Logical.AND;        }    };    handler.assertAuthorized(requiresRolesAnnotation);}
c44d20562e8186bedeff4fd2c61176e42ca668e868dea937d51b52d6f26e12bd
value
public String[] value()
{    return new String[] { "blah" };}
b98de90c31e2c04ccd33175a2f542ace00c163de7e8eb61020c2358bb7543d9a
annotationType
public Class<? extends Annotation> annotationType()
{    return RequiresRoles.class;}
0ec7a8b28eb561104d0137a86dcc29387ed179e6f1b107a974dc3152ac27b780
logical
public Logical logical()
{    return Logical.AND;}
24c20fdfcad5fda96b1d7f149d14ce616445c44930d987d909f149f69f294fc4
testGuestMultipleRolesAssertion
public void testGuestMultipleRolesAssertion() throws Throwable
{    RoleAnnotationHandler handler = new RoleAnnotationHandler();    Annotation requiresRolesAnnotation = new RequiresRoles() {        public String[] value() {            return new String[] { "blah", "blah2" };        }        public Class<? extends Annotation> annotationType() {            return RequiresRoles.class;        }        public Logical logical() {            return Logical.AND;        }    };    handler.assertAuthorized(requiresRolesAnnotation);}
c44d20562e8186bedeff4fd2c61176e42ca668e868dea937d51b52d6f26e12bd
value
public String[] value()
{    return new String[] { "blah", "blah2" };}
b98de90c31e2c04ccd33175a2f542ace00c163de7e8eb61020c2358bb7543d9a
annotationType
public Class<? extends Annotation> annotationType()
{    return RequiresRoles.class;}
0ec7a8b28eb561104d0137a86dcc29387ed179e6f1b107a974dc3152ac27b780
logical
public Logical logical()
{    return Logical.AND;}
38e98f9117b1c74c4ba658a91b2886e616c119c770b8d1ca02b42a39031327b4
testOneOfTheRolesRequired
public void testOneOfTheRolesRequired() throws Throwable
{    subject = createMock(Subject.class);    expect(subject.hasRole("blah")).andReturn(true);    expect(subject.hasRole("blah2")).andReturn(false);    replay(subject);    RoleAnnotationHandler handler = new RoleAnnotationHandler() {        @Override        protected Subject getSubject() {            return subject;        }    };    Annotation requiresRolesAnnotation = new RequiresRoles() {        public String[] value() {            return new String[] { "blah", "blah2" };        }        public Class<? extends Annotation> annotationType() {            return RequiresRoles.class;        }        public Logical logical() {            return Logical.OR;        }    };    handler.assertAuthorized(requiresRolesAnnotation);}
500cdae0771f44e12e905471ad16b9b928667f19e77956836eb99281db53ebed
getSubject
protected Subject getSubject()
{    return subject;}
c44d20562e8186bedeff4fd2c61176e42ca668e868dea937d51b52d6f26e12bd
value
public String[] value()
{    return new String[] { "blah", "blah2" };}
b98de90c31e2c04ccd33175a2f542ace00c163de7e8eb61020c2358bb7543d9a
annotationType
public Class<? extends Annotation> annotationType()
{    return RequiresRoles.class;}
0ec7a8b28eb561104d0137a86dcc29387ed179e6f1b107a974dc3152ac27b780
logical
public Logical logical()
{    return Logical.OR;}
731b0823f1b7fe36ea0e90b4498eb71abae99bc55c4896737a0a7d7cf1bcb301
getExceptionClass
protected Class getExceptionClass()
{    return AuthorizationException.class;}
731b0823f1b7fe36ea0e90b4498eb71abae99bc55c4896737a0a7d7cf1bcb301
getExceptionClass
protected Class getExceptionClass()
{    return HostUnauthorizedException.class;}
a2e6f5bda72351b4a470d9e97bbe9c3730e23d497889a95f4d113fa282c2717b
testSettingOfRolePermissionResolver
public void testSettingOfRolePermissionResolver()
{    Collection<Realm> realms = new ArrayList<Realm>();    realms.add(new MockAuthorizingRealm());    realms.add(new MockAuthorizingRealm());        for (Realm realm : realms) {        assertNull(((AuthorizingRealm) realm).getRolePermissionResolver());    }    ModularRealmAuthorizer modRealmAuthz = new ModularRealmAuthorizer();    modRealmAuthz.setRealms(realms);        for (Realm realm : realms) {        assertNull(((AuthorizingRealm) realm).getRolePermissionResolver());    }        RolePermissionResolver rolePermissionResolver = new RolePermissionResolver() {        public Collection<Permission> resolvePermissionsInRole(String roleString) {            return null;        }    };    modRealmAuthz.setRolePermissionResolver(rolePermissionResolver);        for (Realm realm : realms) {                assertTrue(((AuthorizingRealm) realm).getRolePermissionResolver() == rolePermissionResolver);    }        MockAuthorizingRealm mockRealm = new MockAuthorizingRealm();    realms.add(mockRealm);    modRealmAuthz.setRealms(realms);    assertTrue(((AuthorizingRealm) mockRealm).getRolePermissionResolver() == rolePermissionResolver);}
dadcbe03658e57c5f31c83de162ee2c2f0d2fb7bc44fd5f30607369bc8f96412
resolvePermissionsInRole
public Collection<Permission> resolvePermissionsInRole(String roleString)
{    return null;}
7d82f766d0b50c20008bf1b1d8345ac21d4827d0c5115d358a603d4f11fb64f3
doGetAuthorizationInfo
protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals)
{    return null;}
04d12ebf29bfe2a4c8158a941df0d9788366bab7e1f094a3057e32147ffbeb42
doGetAuthenticationInfo
protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException
{    return null;}
ac55ca6022b642a6e0e8a69b5f3d4ec98c0408630436735a288180c79c20a869
testNullArgument
public void testNullArgument()
{    assertTrue(new AllPermission().implies(null));}
eed5eddc8d9fc0e949d4aad36eedcee3834c13cc8713cf5b6c5ca1630664e571
testNonNullArgument
public void testNonNullArgument()
{    assertTrue(new AllPermission().implies(new AllPermission()));}
af894f720cdc8ca50cf7142867f10f522e55490e092894b986b1092ba79300fe
testDefaultConstructor
public void testDefaultConstructor()
{    DomainPermission p;    List<Set<String>> parts;    Set<String> set;    String entry;        p = new DomainPermission();        assertTrue("domain".equals(p.getDomain()));        set = p.getActions();    assertNull(set);        set = p.getTargets();    assertNull(set);        parts = p.getParts();    assertEquals("Number of parts", 1, parts.size());    set = parts.get(0);    assertEquals(1, set.size());    entry = set.iterator().next();    assertEquals("domain", entry);}
05a798fa8b9e6335e6a17619aabebd1f70cd0a5efa6a34a84576a44ef8c8e5a0
testActionsConstructorWithSingleAction
public void testActionsConstructorWithSingleAction()
{    DomainPermission p;    List<Set<String>> parts;    Set<String> set;    Iterator<String> iterator;    String entry;        p = new DomainPermission("action1");        assertEquals("domain", p.getDomain());        set = p.getActions();    assertNotNull(set);    assertEquals(1, set.size());    iterator = set.iterator();    entry = iterator.next();    assertEquals("action1", entry);        set = p.getTargets();    assertNull(set);        parts = p.getParts();    assertEquals(2, parts.size());    set = parts.get(0);    assertEquals(1, set.size());    iterator = set.iterator();    entry = iterator.next();    assertEquals("domain", entry);    set = parts.get(1);    assertEquals(1, set.size());    iterator = set.iterator();    entry = iterator.next();    assertEquals("action1", entry);}
eaf171707b4a870525d0c7c458e0809f18b5445a218566bd2b627c917ab6cb5c
testActionsConstructorWithMultipleActions
public void testActionsConstructorWithMultipleActions()
{    DomainPermission p;    List<Set<String>> parts;    Set<String> set;    Iterator<String> iterator;    String entry;        p = new DomainPermission("action1,action2,action3");        assertEquals("domain", p.getDomain());        set = p.getActions();    assertNotNull(set);    assertEquals(3, set.size());    iterator = set.iterator();    entry = iterator.next();    assertEquals("action1", entry);    entry = iterator.next();    assertEquals("action2", entry);    entry = iterator.next();    assertEquals("action3", entry);        set = p.getTargets();    assertNull(set);        parts = p.getParts();    assertEquals(2, parts.size());    set = parts.get(0);    assertEquals(1, set.size());    iterator = set.iterator();    entry = iterator.next();    assertEquals("domain", entry);    set = parts.get(1);    assertEquals(3, set.size());    iterator = set.iterator();    entry = iterator.next();    assertEquals("action1", entry);    entry = iterator.next();    assertEquals("action2", entry);    entry = iterator.next();    assertEquals("action3", entry);}
af21b226e69f1b164088bb8846551315fd679a9e2df2098ac3aafce5a4c68268
testActionsTargetsConstructorWithSingleActionAndTarget
public void testActionsTargetsConstructorWithSingleActionAndTarget()
{    DomainPermission p;    List<Set<String>> parts;    Set<String> set;    Iterator<String> iterator;    String entry;        p = new DomainPermission("action1", "target1");        assertEquals("domain", p.getDomain());        set = p.getActions();    assertNotNull(set);    assertEquals(1, set.size());    iterator = set.iterator();    entry = iterator.next();    assertEquals("action1", entry);        set = p.getTargets();    assertNotNull(set);    assertEquals(1, set.size());    iterator = set.iterator();    entry = iterator.next();    assertEquals("target1", entry);        parts = p.getParts();    assertEquals(3, parts.size());    set = parts.get(0);    assertEquals(1, set.size());    iterator = set.iterator();    entry = iterator.next();    assertEquals("domain", entry);    set = parts.get(1);    assertEquals(1, set.size());    iterator = set.iterator();    entry = iterator.next();    assertEquals("action1", entry);    set = parts.get(2);    assertEquals(1, set.size());    iterator = set.iterator();    entry = iterator.next();    assertEquals("target1", entry);}
18913a8d00240cf19545e61b5e02e7e8677bcb91ac6990d69e14601361c6e88e
testActionsTargetsConstructorWithMultipleActionsAndTargets
public void testActionsTargetsConstructorWithMultipleActionsAndTargets()
{    DomainPermission p;    List<Set<String>> parts;    Set<String> set;    Iterator<String> iterator;    String entry;        p = new DomainPermission("action1,action2,action3", "target1,target2,target3");        assertEquals("domain", p.getDomain());        set = p.getActions();    assertNotNull(set);    assertEquals(3, set.size());    iterator = set.iterator();    entry = iterator.next();    assertEquals("action1", entry);    entry = iterator.next();    assertEquals("action2", entry);    entry = iterator.next();    assertEquals("action3", entry);        set = p.getTargets();    assertNotNull(set);    assertEquals(3, set.size());    iterator = set.iterator();    entry = iterator.next();    assertEquals("target1", entry);    entry = iterator.next();    assertEquals("target2", entry);    entry = iterator.next();    assertEquals("target3", entry);        parts = p.getParts();    assertEquals(3, parts.size());    set = parts.get(0);    assertEquals(1, set.size());    iterator = set.iterator();    entry = iterator.next();    assertEquals("domain", entry);    set = parts.get(1);    assertEquals(3, set.size());    iterator = set.iterator();    entry = iterator.next();    assertEquals("action1", entry);    entry = iterator.next();    assertEquals("action2", entry);    entry = iterator.next();    assertEquals("action3", entry);    set = parts.get(2);    assertEquals(3, set.size());    iterator = set.iterator();    entry = iterator.next();    assertEquals("target1", entry);    entry = iterator.next();    assertEquals("target2", entry);    entry = iterator.next();    assertEquals("target3", entry);}
e844ac9165eb700c1f32d3d38a628d65214c26738b21898c65845e5bf4de760a
testDefaultIsNonCaseSensitive
public void testDefaultIsNonCaseSensitive()
{    WildcardPermissionResolver resolver = new WildcardPermissionResolver();    assertFalse("Default sensitivity should be false", resolver.isCaseSensitive());    /* this is a round-about test as permissions don't store case sensitivity just lower case         the string. */    WildcardPermission permission = (WildcardPermission) resolver.resolvePermission("Foo:*");    assertEquals("string should be lowercase", "foo:*", permission.toString());}
b9caa67c69660facaebfe8e6b2d28722143b491cec3cee47914db915b52198e5
testCaseSensitive
public void testCaseSensitive()
{    WildcardPermissionResolver resolver = new WildcardPermissionResolver(true);    assertTrue("Sensitivity should be true", resolver.isCaseSensitive());    /* this is a round-about test as permissions don't store case sensitivity just lower case         the string. */    WildcardPermission permission = (WildcardPermission) resolver.resolvePermission("Foo:*");    assertEquals("string should be mixed case", "Foo:*", permission.toString());}
df75f5700336c95dd1442047c8e6d0f364bfd0403de448f8b6fb5ec425ea1862
testCaseInsensitive
public void testCaseInsensitive()
{    WildcardPermissionResolver resolver = new WildcardPermissionResolver(false);    assertFalse("Sensitivity should be false", resolver.isCaseSensitive());    /* this is a round-about test as permissions don't store case sensitivity just lower case         the string. */    WildcardPermission permission = (WildcardPermission) resolver.resolvePermission("Foo:*");    assertEquals("string should be lowercase", "foo:*", permission.toString());}
6893c038cba0ad106fc5471d57abab0af07b1ae0fe9e60cf6e1b9dab2e1c4cfd
testCaseSensitiveToggle
public void testCaseSensitiveToggle()
{    WildcardPermissionResolver resolver = new WildcardPermissionResolver();    assertFalse("Default sensitivity should be false", resolver.isCaseSensitive());    resolver.setCaseSensitive(true);    assertTrue("Sensitivity should be true", resolver.isCaseSensitive());    resolver.setCaseSensitive(false);    assertFalse("Sensitivity should be false", resolver.isCaseSensitive());}
1eeb1102bce7e6e987c547d40b38c59192fcbd975c451ef3811bb29a90c72382
testNull
public void testNull()
{    new WildcardPermission(null);}
5fb023989f358309e0153542e4406268eac42b6134fb82013b1199e120b658ae
testEmpty
public void testEmpty()
{    new WildcardPermission("");}
93a5eeb465f5044b53cebb2a245a98b24ff04d9fd0d3b93cb7d920c21d30b4e0
testBlank
public void testBlank()
{    new WildcardPermission("   ");}
ba4a7c926d677e5b5f6b2d0043e86fff6a97575a351e5440af4236af8b21d1b9
testOnlyDelimiters
public void testOnlyDelimiters()
{    new WildcardPermission("::,,::,:");}
84610d768e77040d9bdee053e97db9f062e2909838e08a4ae59a493068098d8c
testNamed
public void testNamed()
{    WildcardPermission p1, p2;        p1 = new WildcardPermission("something");    p2 = new WildcardPermission("something");    assertTrue(p1.implies(p2));    assertTrue(p2.implies(p1));        p1 = new WildcardPermission("something");    p2 = new WildcardPermission("SOMETHING");    assertTrue(p1.implies(p2));    assertTrue(p2.implies(p1));        p1 = new WildcardPermission("something");    p2 = new WildcardPermission("else");    assertFalse(p1.implies(p2));    assertFalse(p2.implies(p1));        p1 = new WildcardPermission("BLAHBLAH", false);    p2 = new WildcardPermission("BLAHBLAH", false);    assertTrue(p1.implies(p2));    assertTrue(p2.implies(p1));        p1 = new WildcardPermission("BLAHBLAH", false);    p2 = new WildcardPermission("bLAHBLAH", false);    assertTrue(p1.implies(p2));    assertTrue(p2.implies(p1));        p1 = new WildcardPermission("BLAHBLAH", false);    p2 = new WildcardPermission("whatwhat", false);    assertFalse(p1.implies(p2));    assertFalse(p2.implies(p1));}
28d6ae5928d3c6011f281a767b24ea79b6f81e4404368b1ca75f8c0abd5c7736
testLists
public void testLists()
{    WildcardPermission p1, p2, p3;    p1 = new WildcardPermission("one,two");    p2 = new WildcardPermission("one");    assertTrue(p1.implies(p2));    assertFalse(p2.implies(p1));    p1 = new WildcardPermission("one,two,three");    p2 = new WildcardPermission("one,three");    assertTrue(p1.implies(p2));    assertFalse(p2.implies(p1));    p1 = new WildcardPermission("one,two:one,two,three");    p2 = new WildcardPermission("one:three");    p3 = new WildcardPermission("one:two,three");    assertTrue(p1.implies(p2));    assertFalse(p2.implies(p1));    assertTrue(p1.implies(p3));    assertFalse(p2.implies(p3));    assertTrue(p3.implies(p2));    p1 = new WildcardPermission("one,two,three:one,two,three:one,two");    p2 = new WildcardPermission("one:three:two");    assertTrue(p1.implies(p2));    assertFalse(p2.implies(p1));    p1 = new WildcardPermission("one");    p2 = new WildcardPermission("one:two,three,four");    p3 = new WildcardPermission("one:two,three,four:five:six:seven");    assertTrue(p1.implies(p2));    assertTrue(p1.implies(p3));    assertFalse(p2.implies(p1));    assertFalse(p3.implies(p1));    assertTrue(p2.implies(p3));}
883083ba11224c7f376800ae59471f393b0812f0585779aa1aae650d666791a6
testListDifferentOrder
public void testListDifferentOrder()
{    WildcardPermission p6 = new WildcardPermission("one,two:three,four");    WildcardPermission p6DiffOrder = new WildcardPermission("two,one:four,three");    assertTrue(p6.equals(p6DiffOrder));}
ab0cb4b1a0278de06e7504fc906c651754aa747ab60f66043865edabd9c7a46b
testWildcards
public void testWildcards()
{    WildcardPermission p1, p2, p3, p4, p5, p6, p7, p8, p9;    p1 = new WildcardPermission("*");    p2 = new WildcardPermission("one");    p3 = new WildcardPermission("one:two");    p4 = new WildcardPermission("one,two:three,four");    p5 = new WildcardPermission("one,two:three,four,five:six:seven,eight");    assertTrue(p1.implies(p2));    assertTrue(p1.implies(p3));    assertTrue(p1.implies(p4));    assertTrue(p1.implies(p5));    p1 = new WildcardPermission("newsletter:*");    p2 = new WildcardPermission("newsletter:read");    p3 = new WildcardPermission("newsletter:read,write");    p4 = new WildcardPermission("newsletter:*");    p5 = new WildcardPermission("newsletter:*:*");    p6 = new WildcardPermission("newsletter:*:read");    p7 = new WildcardPermission("newsletter:write:*");    p8 = new WildcardPermission("newsletter:read,write:*");    p9 = new WildcardPermission("newsletter");    assertTrue(p1.implies(p2));    assertTrue(p1.implies(p3));    assertTrue(p1.implies(p4));    assertTrue(p1.implies(p5));    assertTrue(p1.implies(p6));    assertTrue(p1.implies(p7));    assertTrue(p1.implies(p8));    assertTrue(p1.implies(p9));    p1 = new WildcardPermission("newsletter:*:*");    assertTrue(p1.implies(p2));    assertTrue(p1.implies(p3));    assertTrue(p1.implies(p4));    assertTrue(p1.implies(p5));    assertTrue(p1.implies(p6));    assertTrue(p1.implies(p7));    assertTrue(p1.implies(p8));    assertTrue(p1.implies(p9));    p1 = new WildcardPermission("newsletter:*:*:*");    assertTrue(p1.implies(p2));    assertTrue(p1.implies(p3));    assertTrue(p1.implies(p4));    assertTrue(p1.implies(p5));    assertTrue(p1.implies(p6));    assertTrue(p1.implies(p7));    assertTrue(p1.implies(p8));    assertTrue(p1.implies(p9));    p1 = new WildcardPermission("newsletter");    assertTrue(p1.implies(p2));    assertTrue(p1.implies(p3));    assertTrue(p1.implies(p4));    assertTrue(p1.implies(p5));    assertTrue(p1.implies(p6));    assertTrue(p1.implies(p7));    assertTrue(p1.implies(p8));    assertTrue(p1.implies(p9));    p1 = new WildcardPermission("newsletter:*:read");    p2 = new WildcardPermission("newsletter:123:read");    p3 = new WildcardPermission("newsletter:123,456:read,write");    p4 = new WildcardPermission("newsletter:read");    p5 = new WildcardPermission("newsletter:read,write");    p6 = new WildcardPermission("newsletter:123:read:write");    assertTrue(p1.implies(p2));    assertFalse(p1.implies(p3));    assertFalse(p1.implies(p4));    assertFalse(p1.implies(p5));    assertTrue(p1.implies(p6));    p1 = new WildcardPermission("newsletter:*:read:*");    assertTrue(p1.implies(p2));    assertTrue(p1.implies(p6));}
cd89046fb8911fa4a6595be8ff9a8156398ebfad5d0c95e20ca6a68135c4b5d2
testToString
public void testToString()
{    WildcardPermission p1 = new WildcardPermission("*");    WildcardPermission p2 = new WildcardPermission("one");    WildcardPermission p3 = new WildcardPermission("one:two");    WildcardPermission p4 = new WildcardPermission("one,two:three,four");    WildcardPermission p5 = new WildcardPermission("one,two:three,four,five:six:seven,eight");    assertTrue("*".equals(p1.toString()));    assertTrue(p1.equals(new WildcardPermission(p1.toString())));    assertTrue("one".equals(p2.toString()));    assertTrue(p2.equals(new WildcardPermission(p2.toString())));    assertTrue("one:two".equals(p3.toString()));    assertTrue(p3.equals(new WildcardPermission(p3.toString())));    assertTrue("one,two:three,four".equals(p4.toString()));    assertTrue(p4.equals(new WildcardPermission(p4.toString())));    assertTrue("one,two:three,four,five:six:seven,eight".equals(p5.toString()));    assertTrue(p5.equals(new WildcardPermission(p5.toString())));}
05c129c9f429ae905ca34a2aa4d20c2cd84dfa956af3e9bc50f1121e031b68c4
testWildcardLeftTermination
public void testWildcardLeftTermination()
{    WildcardPermission p1, p2, p3, p4;    p1 = new WildcardPermission("one");    p2 = new WildcardPermission("one:*");    p3 = new WildcardPermission("one:*:*");    p4 = new WildcardPermission("one:read");    assertTrue(p1.implies(p2));    assertTrue(p1.implies(p3));    assertTrue(p1.implies(p4));    assertTrue(p2.implies(p1));    assertTrue(p2.implies(p3));    assertTrue(p2.implies(p4));    assertTrue(p3.implies(p1));    assertTrue(p3.implies(p2));    assertTrue(p3.implies(p4));    assertFalse(p4.implies(p1));    assertFalse(p4.implies(p2));    assertFalse(p4.implies(p3));}
731b0823f1b7fe36ea0e90b4498eb71abae99bc55c4896737a0a7d7cf1bcb301
getExceptionClass
protected Class getExceptionClass()
{    return UnauthenticatedException.class;}
731b0823f1b7fe36ea0e90b4498eb71abae99bc55c4896737a0a7d7cf1bcb301
getExceptionClass
protected Class getExceptionClass()
{    return UnauthorizedException.class;}
ed2d197dd8ffd03951938099d8fbb1b05a32c9c083a029c78889880643798120
testSubmitRunnable
public void testSubmitRunnable()
{    ExecutorService mockExecutorService = createNiceMock(ExecutorService.class);    expect(mockExecutorService.submit(isA(SubjectRunnable.class))).andReturn(new DummyFuture());    replay(mockExecutorService);    final SubjectAwareExecutorService executor = new SubjectAwareExecutorService(mockExecutorService);    Runnable testRunnable = new Runnable() {        public void run() {            System.out.println("Hello World");        }    };    executor.submit(testRunnable);    verify(mockExecutorService);}
4560d80c2474cc2770be19fbc06c60741920c59992e6b13524f8a5b688ec285a
run
public void run()
{    System.out.println("Hello World");}
edbd12c1cc557564be600e19141e1f02ec385141294696f73de8d4d8c40fc3e7
cancel
public boolean cancel(boolean b)
{    return false;}
1f8a60a8e7947244fd77c6226b688ce5cec6e83a6095e9c3a7f05fd821648396
isCancelled
public boolean isCancelled()
{    return false;}
7cf382bf6532528601afc0572ff7a4051fb2bd1cf2c9b7df66165750bb63dcd3
isDone
public boolean isDone()
{    return true;}
15f5c1e21d6c858479a040a2078355ab8a7656bdd858e3e5eb9ac16427cd63f9
get
public V get() throws InterruptedException, ExecutionException
{    return null;}
b0e6ae67fa41fe1ebfb28756b25e9c9b4d05bf31e39b9e75c9229e41987ebb5e
get
public V get(long l, TimeUnit timeUnit) throws InterruptedException, ExecutionException, TimeoutException
{    return null;}
06b9f6e40dc31a0835944809533f0b5ff96f91df6a9e9980a4f27a802956f61d
testExecute
public void testExecute()
{    Executor targetMockExecutor = createNiceMock(Executor.class);            targetMockExecutor.execute(isA(SubjectRunnable.class));    replay(targetMockExecutor);    final SubjectAwareExecutor executor = new SubjectAwareExecutor(targetMockExecutor);    Runnable work = new Runnable() {        public void run() {            System.out.println("Hello World");        }    };    executor.execute(work);    verify(targetMockExecutor);}
4560d80c2474cc2770be19fbc06c60741920c59992e6b13524f8a5b688ec285a
run
public void run()
{    System.out.println("Hello World");}
499c6b09b38d666ebbe9441877c66a0205592c1b909f777006e29945d6f8c32b
createCache
protected Cache createCache(String name) throws CacheException
{    return new HashMapCache<K, V>(name);}
939be67b4751929b9800887071041c666ced41b7c5eb7bac5ad5302aea915964
testNoArgConstructor
public void testNoArgConstructor()
{    ClassUtils.newInstance(getExceptionClass());}
b25d0114a2ba722e9d39afe1f5300464ecfa8e4287f7f2256156e2e173441d49
testMsgConstructor
public void testMsgConstructor() throws Exception
{    ClassUtils.newInstance(getExceptionClass(), "Msg");}
0a7ca1d0150112a34b5214bd47d85b9818d8530c5d19bcdd75a16fbdbfccf314
testCauseConstructor
public void testCauseConstructor() throws Exception
{    ClassUtils.newInstance(getExceptionClass(), new Throwable());}
95dc39d5127f23c8c1ad5b28366b31a8bae4bf376fd9570f2f561f8e1f2fbde7
testMsgCauseConstructor
public void testMsgCauseConstructor()
{    ClassUtils.newInstance(getExceptionClass(), "Msg", new Throwable());}
731b0823f1b7fe36ea0e90b4498eb71abae99bc55c4896737a0a7d7cf1bcb301
getExceptionClass
protected Class getExceptionClass()
{    return SerializationException.class;}
4cf562d8830f6713f616db8f20e475df93a5bc655cc28d59ba7ea9ff71674aa5
testGetInstanceWithType
public void testGetInstanceWithType() throws Exception
{    final String name = "my/jndi/resource";    final String returnValue = "jndiString";    JndiObjectFactory<String> underTest = new JndiObjectFactory<String>() {        @Override        protected Object lookup(String jndiName, Class requiredType) throws NamingException {            assertEquals(name, jndiName);            assertEquals(String.class, requiredType);            return new String(returnValue);        }    };    underTest.setRequiredType(String.class);    underTest.setResourceName(name);    assertEquals(returnValue, underTest.getInstance());}
89913a500a66aab7c7721d2060890e8d94f0c47599961ea2fc83a1a46627a0f1
lookup
protected Object lookup(String jndiName, Class requiredType) throws NamingException
{    assertEquals(name, jndiName);    assertEquals(String.class, requiredType);    return new String(returnValue);}
e3c1750fb519b0c7ccb6a4709830171845238f8278abec3f716c855b3ffc59ff
testGetInstanceNoType
public void testGetInstanceNoType() throws Exception
{    final String name = "my/jndi/resource";    final String returnValue = "jndiString";    JndiObjectFactory<String> underTest = new JndiObjectFactory<String>() {        @Override        protected Object lookup(String jndiName) throws NamingException {            assertEquals(name, jndiName);            return new String(returnValue);        }    };    underTest.setResourceName(name);    assertEquals(returnValue, underTest.getInstance());}
c693e4df9131a11ba642a288c4b12a8683726ea6fcf8a908978a71cbe987890f
lookup
protected Object lookup(String jndiName) throws NamingException
{    assertEquals(name, jndiName);    return new String(returnValue);}
2f0a8443788d9651bfb21dab3fcf09b10f8350b5829cbcad4672e86b56955cee
testJndiLookupFailsWithType
public void testJndiLookupFailsWithType() throws Exception
{    final String name = "my/jndi/resource";    JndiObjectFactory<String> underTest = new JndiObjectFactory<String>() {        @Override        protected Object lookup(String jndiName, Class requiredType) throws NamingException {            throw new NamingException("No resource named " + jndiName);        }    };    underTest.setResourceName(name);    underTest.setRequiredType(String.class);    underTest.getInstance();}
89913a500a66aab7c7721d2060890e8d94f0c47599961ea2fc83a1a46627a0f1
lookup
protected Object lookup(String jndiName, Class requiredType) throws NamingException
{    throw new NamingException("No resource named " + jndiName);}
8b4e1bc7262c01efc286f58aecc58efb6837cbaea13192fb3df95e7c128ee4c1
testJndiLookupFailsNoType
public void testJndiLookupFailsNoType() throws Exception
{    final String name = "my/jndi/resource";    JndiObjectFactory<String> underTest = new JndiObjectFactory<String>() {        @Override        protected Object lookup(String jndiName) throws NamingException {            throw new NamingException("No resource named " + jndiName);        }    };    underTest.setResourceName(name);    underTest.getInstance();}
c693e4df9131a11ba642a288c4b12a8683726ea6fcf8a908978a71cbe987890f
lookup
protected Object lookup(String jndiName) throws NamingException
{    throw new NamingException("No resource named " + jndiName);}
90ef69daa2c85b0acc5eed4cf2b7371fd575ccac02ac7fb748586add1bceebb1
testGetRememberedPrincipalsWithEmptySerializedBytes
public void testGetRememberedPrincipalsWithEmptySerializedBytes()
{    AbstractRememberMeManager rmm = new DummyRememberMeManager();            PrincipalCollection principals = rmm.getRememberedPrincipals(new DefaultSubjectContext());    assertNull(principals);        rmm = new DummyRememberMeManager() {        @Override        protected byte[] getRememberedSerializedIdentity(SubjectContext subjectContext) {            return null;        }    };    principals = rmm.getRememberedPrincipals(new DefaultSubjectContext());    assertNull(principals);}
c1bde12ac9209b2d9b17b8ce54bc8594554baeae20650faf1d44675cd84cf049
getRememberedSerializedIdentity
protected byte[] getRememberedSerializedIdentity(SubjectContext subjectContext)
{    return null;}
f978c7a3a48843554263157ad49fe1f3901e2e3a7c59d017036df388c769ddd8
forgetIdentity
public void forgetIdentity(SubjectContext subjectContext)
{}
b5911f232b7b5e7b7c6079b5ac856451f8720c36f36d0e1caaccbcfae6014f9b
forgetIdentity
protected void forgetIdentity(Subject subject)
{}
ee0eafeec1b236d7210de3cb61c9b5a414b8923db5067282b4029468081e8317
rememberSerializedIdentity
protected void rememberSerializedIdentity(Subject subject, byte[] serialized)
{}
c1bde12ac9209b2d9b17b8ce54bc8594554baeae20650faf1d44675cd84cf049
getRememberedSerializedIdentity
protected byte[] getRememberedSerializedIdentity(SubjectContext subjectContext)
{    return new byte[0];}
39e5ba029cc67f6f1d45c6d20f0df595ec16bc61da20d7680fcbbdae4fe7f95b
tearDown
public void tearDown()
{    ThreadContext.remove();}
1d8021057c51989244e6dec195507e3dd5cf628cd9375439c2d7142fe363a2ff
newSubject
protected Subject newSubject(SecurityManager securityManager)
{    Subject subject = new Subject.Builder(securityManager).buildSubject();    threadState = new SubjectThreadState(subject);    threadState.bind();    return subject;}
5ff0b8f7d2b080bcc6214fa5f91be74727145ea81cacb63a99c8d0f3106c089f
setup
public void setup()
{    sm = new DefaultSecurityManager();    Ini ini = new Ini();    Ini.Section section = ini.addSection(IniRealm.USERS_SECTION_NAME);    section.put("guest", "guest, guest");    section.put("lonestarr", "vespa, goodguy");    sm.setRealm(new IniRealm(ini));    SecurityUtils.setSecurityManager(sm);}
39e5ba029cc67f6f1d45c6d20f0df595ec16bc61da20d7680fcbbdae4fe7f95b
tearDown
public void tearDown()
{    SecurityUtils.setSecurityManager(null);    sm.destroy();    super.tearDown();}
7e1112d3eaa988f1b331e90f62c4290add2071ec1bf304ad5b8373cb130b472c
testDefaultConfig
public void testDefaultConfig()
{    Subject subject = SecurityUtils.getSubject();    AuthenticationToken token = new UsernamePasswordToken("guest", "guest");    subject.login(token);    assertTrue(subject.isAuthenticated());    assertTrue("guest".equals(subject.getPrincipal()));    assertTrue(subject.hasRole("guest"));    Session session = subject.getSession();    session.setAttribute("key", "value");    assertEquals(session.getAttribute("key"), "value");    subject.logout();    assertNull(subject.getSession(false));    assertNull(subject.getPrincipal());    assertNull(subject.getPrincipals());}
33b4201f768e2d9ab9c627c60cff6b2f15a3baf61f2bc1eeede9a98336e5fcaa
testAutoCreateSessionAfterInvalidation
public void testAutoCreateSessionAfterInvalidation()
{    Subject subject = SecurityUtils.getSubject();    Session session = subject.getSession();    Serializable origSessionId = session.getId();    String key = "foo";    String value1 = "bar";    session.setAttribute(key, value1);    assertEquals(value1, session.getAttribute(key));        session.setTimeout(50);    try {        Thread.sleep(150);    } catch (InterruptedException e) {        }    try {        session.setTimeout(AbstractValidatingSessionManager.DEFAULT_GLOBAL_SESSION_TIMEOUT);        fail("Session should have expired.");    } catch (ExpiredSessionException expected) {    }}
ae3b2a052d6b2fb975601d6de4f07f18e23399d23e733bc7e50c2233b7fc41d9
testSubjectReuseAfterLogout
public void testSubjectReuseAfterLogout()
{    Subject subject = SecurityUtils.getSubject();    AuthenticationToken token = new UsernamePasswordToken("guest", "guest");    subject.login(token);    assertTrue(subject.isAuthenticated());    assertTrue("guest".equals(subject.getPrincipal()));    assertTrue(subject.hasRole("guest"));    Session session = subject.getSession();    Serializable firstSessionId = session.getId();    session.setAttribute("key", "value");    assertEquals(session.getAttribute("key"), "value");    subject.logout();    assertNull(subject.getSession(false));    assertNull(subject.getPrincipal());    assertNull(subject.getPrincipals());    subject.login(new UsernamePasswordToken("lonestarr", "vespa"));    assertTrue(subject.isAuthenticated());    assertTrue("lonestarr".equals(subject.getPrincipal()));    assertTrue(subject.hasRole("goodguy"));    assertNotNull(subject.getSession());    assertFalse(firstSessionId.equals(subject.getSession().getId()));    subject.logout();    assertNull(subject.getSession(false));    assertNull(subject.getPrincipal());    assertNull(subject.getPrincipals());}
dd3645e67d63b5d84b22bf33781a9041a13613fb60344c2197d5c9e1788e3249
testNewSubjectWithoutThreadSecurityManager
public void testNewSubjectWithoutThreadSecurityManager()
{        SecurityUtils.setSecurityManager(null);    try {        SecurityUtils.getSecurityManager();    } catch (UnavailableSecurityManagerException e) {        assertTrue(e.getMessage().startsWith("No SecurityManager accessible"));    }        DelegatingSubject subject = (DelegatingSubject) (new Subject.Builder(sm)).buildSubject();        AuthenticationToken token = new UsernamePasswordToken("guest", "guest");    subject.login(token);    assertEquals(sm, subject.getSecurityManager());}
4adaefafec562702d887f5960a1408e5f9d1add92c42fab7cb857d701c42d2a2
setUp
public void setUp()
{    ThreadContext.remove();}
39e5ba029cc67f6f1d45c6d20f0df595ec16bc61da20d7680fcbbdae4fe7f95b
tearDown
public void tearDown()
{    ThreadContext.remove();}
80771b6079e4dc6160500cbb16c8cb7f6a02d36980e02f7a8c447ee84ddfb989
testVMSingleton
public void testVMSingleton()
{    DefaultSecurityManager sm = new DefaultSecurityManager();    Ini ini = new Ini();    Ini.Section section = ini.addSection(IniRealm.USERS_SECTION_NAME);    section.put("guest", "guest");    sm.setRealm(new IniRealm(ini));    SecurityUtils.setSecurityManager(sm);    try {        Subject subject = SecurityUtils.getSubject();        AuthenticationToken token = new UsernamePasswordToken("guest", "guest");        subject.login(token);        subject.getSession().setAttribute("key", "value");        assertTrue(subject.getSession().getAttribute("key").equals("value"));        subject = SecurityUtils.getSubject();        assertTrue(subject.isAuthenticated());        assertTrue(subject.getSession().getAttribute("key").equals("value"));    } finally {        sm.destroy();                SecurityUtils.setSecurityManager(null);    }}
5ff0b8f7d2b080bcc6214fa5f91be74727145ea81cacb63a99c8d0f3106c089f
setup
public void setup()
{    ThreadContext.remove();    realm = new TestActiveDirectoryRealm();    securityManager = new DefaultSecurityManager(realm);    SecurityUtils.setSecurityManager(securityManager);}
39e5ba029cc67f6f1d45c6d20f0df595ec16bc61da20d7680fcbbdae4fe7f95b
tearDown
public void tearDown()
{    SecurityUtils.setSecurityManager(null);    securityManager.destroy();    ThreadContext.remove();}
7e1112d3eaa988f1b331e90f62c4290add2071ec1bf304ad5b8373cb130b472c
testDefaultConfig
public void testDefaultConfig()
{    String localhost = "localhost";    Subject subject = SecurityUtils.getSubject();    subject.login(new UsernamePasswordToken(USERNAME, PASSWORD, localhost));    assertTrue(subject.isAuthenticated());    assertTrue(subject.hasRole(ROLE));    UsernamePrincipal usernamePrincipal = subject.getPrincipals().oneByType(UsernamePrincipal.class);    assertTrue(usernamePrincipal.getUsername().equals(USERNAME));    UserIdPrincipal userIdPrincipal = subject.getPrincipals().oneByType(UserIdPrincipal.class);    assertTrue(userIdPrincipal.getUserId() == USER_ID);    assertTrue(realm.hasRole(subject.getPrincipals(), ROLE));    subject.logout();}
91d8d3c1c859dccfa158ced97e30cfa7357d65bce2ac4b88ad2b30b36d575a85
doCredentialsMatch
public boolean doCredentialsMatch(AuthenticationToken object, AuthenticationInfo object1)
{    return true;}
04d12ebf29bfe2a4c8158a941df0d9788366bab7e1f094a3057e32147ffbeb42
doGetAuthenticationInfo
protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException
{    SimpleAccount account = (SimpleAccount) super.doGetAuthenticationInfo(token);    if (account != null) {        SimplePrincipalCollection principals = new SimplePrincipalCollection();        principals.add(new UserIdPrincipal(USER_ID), getName());        principals.add(new UsernamePrincipal(USERNAME), getName());        account.setPrincipals(principals);    }    return account;}
7d82f766d0b50c20008bf1b1d8345ac21d4827d0c5115d358a603d4f11fb64f3
doGetAuthorizationInfo
protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals)
{    Set<String> roles = new HashSet<String>();    roles.add(ROLE);    return new SimpleAuthorizationInfo(roles);}
74297bc9abcb1f0eee198e1ffbb79dc836a3856df82fded343746eda59c3dd0e
queryForAuthenticationInfo
protected AuthenticationInfo queryForAuthenticationInfo(AuthenticationToken token, LdapContextFactory ldapContextFactory) throws NamingException
{    return new SimpleAccount(token.getPrincipal(), token.getCredentials(), getName());}
5ff0b8f7d2b080bcc6214fa5f91be74727145ea81cacb63a99c8d0f3106c089f
setup
public void setup()
{    realm = new AllowAllRealm();}
39e5ba029cc67f6f1d45c6d20f0df595ec16bc61da20d7680fcbbdae4fe7f95b
tearDown
public void tearDown()
{    realm = null;}
7e1112d3eaa988f1b331e90f62c4290add2071ec1bf304ad5b8373cb130b472c
testDefaultConfig
public void testDefaultConfig()
{    AuthenticationInfo info = realm.getAuthenticationInfo(new UsernamePasswordToken(USERNAME, PASSWORD, localhost));    assertNotNull(info);    assertTrue(realm.hasRole(info.getPrincipals(), ROLE));    Object principal = info.getPrincipals().getPrimaryPrincipal();    assertTrue(principal instanceof UserIdPrincipal);    UsernamePrincipal usernamePrincipal = info.getPrincipals().oneByType(UsernamePrincipal.class);    assertTrue(usernamePrincipal.getUsername().equals(USERNAME));    UserIdPrincipal userIdPrincipal = info.getPrincipals().oneByType(UserIdPrincipal.class);    assertTrue(userIdPrincipal.getUserId() == USER_ID);    String stringPrincipal = info.getPrincipals().oneByType(String.class);    assertTrue(stringPrincipal.equals(USER_ID + USERNAME));}
42833f811e9a44db2d2cea4a77e813f6b9839db7b8b2d54f960e18e28c6f89af
testCreateAccountOverride
public void testCreateAccountOverride()
{    AuthorizingRealm realm = new AllowAllRealm() {        @Override        protected AuthenticationInfo buildAuthenticationInfo(Object principal, Object credentials) {            String username = (String) principal;            UsernamePrincipal customPrincipal = new UsernamePrincipal(username);            return new SimpleAccount(customPrincipal, credentials, getName());        }    };    AuthenticationInfo info = realm.getAuthenticationInfo(new UsernamePasswordToken(USERNAME, PASSWORD, localhost));    assertNotNull(info);    assertTrue(realm.hasRole(info.getPrincipals(), ROLE));    Object principal = info.getPrincipals().getPrimaryPrincipal();    assertTrue(principal instanceof UsernamePrincipal);    assertEquals(USERNAME, ((UsernamePrincipal) principal).getUsername());}
8991539219de47adfed5e475a070d79ccc0b7a98a4e33e92243615bff89b4f77
buildAuthenticationInfo
protected AuthenticationInfo buildAuthenticationInfo(Object principal, Object credentials)
{    String username = (String) principal;    UsernamePrincipal customPrincipal = new UsernamePrincipal(username);    return new SimpleAccount(customPrincipal, credentials, getName());}
631c4f21bcc70727d38ee078f294ae79085a5bd1481ce7b9f72c7f9fa09fe9d7
testNullAuthzInfo
public void testNullAuthzInfo()
{    AuthorizingRealm realm = new AuthorizingRealm() {        protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {            return null;        }        protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {            return null;        }    };    Principal principal = new UsernamePrincipal("blah");    PrincipalCollection pCollection = new SimplePrincipalCollection(principal, "nullAuthzRealm");    List<Permission> permList = new ArrayList<Permission>();    permList.add(new WildcardPermission("stringPerm1"));    permList.add(new WildcardPermission("stringPerm2"));    List<String> roleList = new ArrayList<String>();    roleList.add("role1");    roleList.add("role2");    boolean thrown = false;    try {        realm.checkPermission(pCollection, "stringPermission");    } catch (UnauthorizedException e) {        thrown = true;    }    assertTrue(thrown);    thrown = false;    try {        realm.checkPermission(pCollection, new WildcardPermission("stringPermission"));    } catch (UnauthorizedException e) {        thrown = true;    }    assertTrue(thrown);    thrown = false;    try {        realm.checkPermissions(pCollection, "stringPerm1", "stringPerm2");    } catch (UnauthorizedException e) {        thrown = true;    }    assertTrue(thrown);    thrown = false;    try {        realm.checkPermissions(pCollection, permList);    } catch (UnauthorizedException e) {        thrown = true;    }    assertTrue(thrown);    thrown = false;    try {        realm.checkRole(pCollection, "role1");    } catch (UnauthorizedException e) {        thrown = true;    }    assertTrue(thrown);    thrown = false;    try {        realm.checkRoles(pCollection, roleList);    } catch (UnauthorizedException e) {        thrown = true;    }    assertTrue(thrown);    assertFalse(realm.hasAllRoles(pCollection, roleList));    assertFalse(realm.hasRole(pCollection, "role1"));    assertArrayEquals(new boolean[] { false, false }, realm.hasRoles(pCollection, roleList));    assertFalse(realm.isPermitted(pCollection, "perm1"));    assertFalse(realm.isPermitted(pCollection, new WildcardPermission("perm1")));    assertArrayEquals(new boolean[] { false, false }, realm.isPermitted(pCollection, "perm1", "perm2"));    assertArrayEquals(new boolean[] { false, false }, realm.isPermitted(pCollection, permList));    assertFalse(realm.isPermittedAll(pCollection, "perm1", "perm2"));    assertFalse(realm.isPermittedAll(pCollection, permList));}
7d82f766d0b50c20008bf1b1d8345ac21d4827d0c5115d358a603d4f11fb64f3
doGetAuthorizationInfo
protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals)
{    return null;}
04d12ebf29bfe2a4c8158a941df0d9788366bab7e1f094a3057e32147ffbeb42
doGetAuthenticationInfo
protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException
{    return null;}
6e34513f4c597c52644f3400a88b122cac03db1cb3f255d3203a5c934c90bb3b
testRealmWithRolePermissionResolver
public void testRealmWithRolePermissionResolver()
{    Principal principal = new UsernamePrincipal("rolePermResolver");    PrincipalCollection pCollection = new SimplePrincipalCollection(principal, "testRealmWithRolePermissionResolver");    AuthorizingRealm realm = new AllowAllRealm();    realm.setRolePermissionResolver(new RolePermissionResolver() {        public Collection<Permission> resolvePermissionsInRole(String roleString) {            Collection<Permission> permissions = new HashSet<Permission>();            if (roleString.equals(ROLE)) {                permissions.add(new WildcardPermission(ROLE + ":perm1"));                permissions.add(new WildcardPermission(ROLE + ":perm2"));                permissions.add(new WildcardPermission("other:*:foo"));            }            return permissions;        }    });    assertTrue(realm.hasRole(pCollection, ROLE));    assertTrue(realm.isPermitted(pCollection, ROLE + ":perm1"));    assertTrue(realm.isPermitted(pCollection, ROLE + ":perm2"));    assertFalse(realm.isPermitted(pCollection, ROLE + ":perm3"));    assertTrue(realm.isPermitted(pCollection, "other:bar:foo"));}
dadcbe03658e57c5f31c83de162ee2c2f0d2fb7bc44fd5f30607369bc8f96412
resolvePermissionsInRole
public Collection<Permission> resolvePermissionsInRole(String roleString)
{    Collection<Permission> permissions = new HashSet<Permission>();    if (roleString.equals(ROLE)) {        permissions.add(new WildcardPermission(ROLE + ":perm1"));        permissions.add(new WildcardPermission(ROLE + ":perm2"));        permissions.add(new WildcardPermission("other:*:foo"));    }    return permissions;}
2696dd501c3185ee7298319469b9270901713424d6564650b43ee22ff2d55a9e
testRealmWithEmptyOrNullPermissions
public void testRealmWithEmptyOrNullPermissions()
{    Principal principal = new UsernamePrincipal("rolePermResolver");    PrincipalCollection pCollection = new SimplePrincipalCollection(principal, "testRealmWithRolePermissionResolver");    AuthorizingRealm realm = new AllowAllRealm();    realm.setRolePermissionResolver(new RolePermissionResolver() {        public Collection<Permission> resolvePermissionsInRole(String roleString) {            Collection<Permission> permissions = new HashSet<Permission>();            if (roleString.equals(ROLE)) {                permissions.add(new WildcardPermission(ROLE + ":perm1"));                permissions.add(new WildcardPermission(ROLE + ":perm2"));                permissions.add(new WildcardPermission(ROLE + ": "));                permissions.add(new WildcardPermission(ROLE + ":\t"));                permissions.add(new WildcardPermission("other:*:foo"));            }            return permissions;        }    });    realm.setPermissionResolver(new WildcardPermissionResolver());    SimpleAuthorizationInfo authorizationInfo = (SimpleAuthorizationInfo) realm.getAuthorizationInfo(pCollection);    assertNotNull(authorizationInfo);    authorizationInfo.addStringPermission("");    authorizationInfo.addStringPermission(" ");    authorizationInfo.addStringPermission("\t");    authorizationInfo.addStringPermission(null);    Collection<Permission> permissions = realm.getPermissions(authorizationInfo);    assertEquals(permissions.size(), 4);}
dadcbe03658e57c5f31c83de162ee2c2f0d2fb7bc44fd5f30607369bc8f96412
resolvePermissionsInRole
public Collection<Permission> resolvePermissionsInRole(String roleString)
{    Collection<Permission> permissions = new HashSet<Permission>();    if (roleString.equals(ROLE)) {        permissions.add(new WildcardPermission(ROLE + ":perm1"));        permissions.add(new WildcardPermission(ROLE + ":perm2"));        permissions.add(new WildcardPermission(ROLE + ": "));        permissions.add(new WildcardPermission(ROLE + ":\t"));        permissions.add(new WildcardPermission("other:*:foo"));    }    return permissions;}
11bdb2efc65d72830e1fc43edc6cbe6719b844ba480c0e6b42fa88f2c9a62777
assertArrayEquals
private void assertArrayEquals(boolean[] expected, boolean[] actual)
{    if (expected.length != actual.length) {        fail("Expected array of length [" + expected.length + "] but received array of length [" + actual.length + "]");    }    for (int i = 0; i < expected.length; i++) {        if (expected[i] != actual[i]) {            fail("Expected index [" + i + "] to be [" + expected[i] + "] but was [" + actual[i] + "]");        }    }}
04d12ebf29bfe2a4c8158a941df0d9788366bab7e1f094a3057e32147ffbeb42
doGetAuthenticationInfo
protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException
{    return buildAuthenticationInfo(token.getPrincipal(), token.getCredentials());}
7d82f766d0b50c20008bf1b1d8345ac21d4827d0c5115d358a603d4f11fb64f3
doGetAuthorizationInfo
protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals)
{    Set<String> roles = new HashSet<String>();    roles.add(ROLE);    return new SimpleAuthorizationInfo(roles);}
8991539219de47adfed5e475a070d79ccc0b7a98a4e33e92243615bff89b4f77
buildAuthenticationInfo
protected AuthenticationInfo buildAuthenticationInfo(Object principal, Object credentials)
{    Collection<Object> principals = new ArrayList<Object>(3);    principals.add(new UserIdPrincipal(USER_ID));    principals.add(new UsernamePrincipal(USERNAME));    principals.add(USER_ID + USERNAME);    return new SimpleAuthenticationInfo(principals, PASSWORD, getName());}
5ff0b8f7d2b080bcc6214fa5f91be74727145ea81cacb63a99c8d0f3106c089f
setup
public void setup()
{    ThreadContext.remove();    Ini config = new Ini();    config.setSectionProperty("main", "myRealm", "org.apache.shiro.realm.jdbc.JdbcRealm");    config.setSectionProperty("main", "myRealmCredentialsMatcher", "org.apache.shiro.authc.credential.Sha256CredentialsMatcher");    config.setSectionProperty("main", "myRealm.credentialsMatcher", "$myRealmCredentialsMatcher");    config.setSectionProperty("main", "securityManager.sessionManager.sessionValidationSchedulerEnabled", "false");    IniSecurityManagerFactory factory = new IniSecurityManagerFactory(config);    securityManager = (DefaultSecurityManager) factory.createInstance();    SecurityUtils.setSecurityManager(securityManager);        createRealm(name.getMethodName());}
39e5ba029cc67f6f1d45c6d20f0df595ec16bc61da20d7680fcbbdae4fe7f95b
tearDown
public void tearDown()
{    final String testName = name.getMethodName();    shutDown(testName);    SecurityUtils.setSecurityManager(null);    securityManager.destroy();    ThreadContext.remove();}
99fa26ba74168801e1180383564202244802758d8e3945de203f4aeace5278ed
testUnSaltedSuccess
public void testUnSaltedSuccess() throws Exception
{    String testMethodName = name.getMethodName();    JdbcRealm realm = realmMap.get(testMethodName);    createDefaultSchema(testMethodName, false);    realm.setSaltStyle(JdbcRealm.SaltStyle.NO_SALT);    Subject.Builder builder = new Subject.Builder(securityManager);    Subject currentUser = builder.buildSubject();    UsernamePasswordToken token = new UsernamePasswordToken(username, plainTextPassword);    currentUser.login(token);    currentUser.logout();}
0842b9f884a064914316fe97180b9a3a6d1baac86027d0b16cba8493ace9d024
testUnSaltedWrongPassword
public void testUnSaltedWrongPassword() throws Exception
{    String testMethodName = name.getMethodName();    JdbcRealm realm = realmMap.get(testMethodName);    createDefaultSchema(testMethodName, false);    realm.setSaltStyle(JdbcRealm.SaltStyle.NO_SALT);    Subject.Builder builder = new Subject.Builder(securityManager);    Subject currentUser = builder.buildSubject();    UsernamePasswordToken token = new UsernamePasswordToken(username, "passwrd");    try {        currentUser.login(token);    } catch (IncorrectCredentialsException ex) {        }}
c9f9aba7899a921f382fd97fd148263b5376cdd73eaabf58007c7b2f64350c3a
testUnSaltedMultipleRows
public void testUnSaltedMultipleRows() throws Exception
{    String testMethodName = name.getMethodName();    JdbcRealm realm = realmMap.get(testMethodName);    createDefaultSchema(testMethodName, false);    realm.setSaltStyle(JdbcRealm.SaltStyle.NO_SALT);    Connection conn = dsMap.get(testMethodName).getConnection();    Statement sql = conn.createStatement();    sql.executeUpdate("insert into users values ('" + username + "', 'dupe')");    Subject.Builder builder = new Subject.Builder(securityManager);    Subject currentUser = builder.buildSubject();    UsernamePasswordToken token = new UsernamePasswordToken(username, "passwrd");    try {        currentUser.login(token);    } catch (AuthenticationException ex) {        }}
9adbe0cea940f177606c51a28eab5369edc1c2cb9aab2901674b9b4eff310b7f
testSaltColumnSuccess
public void testSaltColumnSuccess() throws Exception
{    String testMethodName = name.getMethodName();    JdbcRealm realm = realmMap.get(testMethodName);    createSaltColumnSchema(testMethodName, false);    realm.setSaltStyle(JdbcRealm.SaltStyle.COLUMN);    realm.setSaltIsBase64Encoded(false);    Subject.Builder builder = new Subject.Builder(securityManager);    Subject currentUser = builder.buildSubject();    UsernamePasswordToken token = new UsernamePasswordToken(username, plainTextPassword);    currentUser.login(token);    currentUser.logout();}
b1453c474dbd012b6ae87b7cb6e387c1fd8b65a7ecbb7c573063e447110a98fd
testBase64EncodedSaltColumnSuccess
public void testBase64EncodedSaltColumnSuccess() throws Exception
{    String testMethodName = name.getMethodName();    JdbcRealm realm = realmMap.get(testMethodName);    createSaltColumnSchema(testMethodName, true);    realm.setSaltStyle(JdbcRealm.SaltStyle.COLUMN);    Subject.Builder builder = new Subject.Builder(securityManager);    Subject currentUser = builder.buildSubject();    UsernamePasswordToken token = new UsernamePasswordToken(username, plainTextPassword);    currentUser.login(token);    currentUser.logout();}
cbed2fccebd21ced5e47237877db88f859a23206205ff3c4214856dee0802a99
testSaltColumnWrongPassword
public void testSaltColumnWrongPassword() throws Exception
{    String testMethodName = name.getMethodName();    JdbcRealm realm = realmMap.get(testMethodName);    createSaltColumnSchema(testMethodName, false);    realm.setSaltStyle(JdbcRealm.SaltStyle.COLUMN);    realm.setSaltIsBase64Encoded(false);    Subject.Builder builder = new Subject.Builder(securityManager);    Subject currentUser = builder.buildSubject();    UsernamePasswordToken token = new UsernamePasswordToken(username, "passwrd");    try {        currentUser.login(token);    } catch (IncorrectCredentialsException ex) {        }}
4cffcf8e918911210388c9ae5eb4e53fb8e84f25624ea782d1c943127fab0ac8
testBase64SaltColumnWrongPassword
public void testBase64SaltColumnWrongPassword() throws Exception
{    String testMethodName = name.getMethodName();    JdbcRealm realm = realmMap.get(testMethodName);    createSaltColumnSchema(testMethodName, true);    realm.setSaltStyle(JdbcRealm.SaltStyle.COLUMN);    realm.setSaltIsBase64Encoded(false);    Subject.Builder builder = new Subject.Builder(securityManager);    Subject currentUser = builder.buildSubject();    UsernamePasswordToken token = new UsernamePasswordToken(username, "passwrd");    try {        currentUser.login(token);    } catch (IncorrectCredentialsException ex) {        }}
6f1c20fe0e5f9a0287fd90b2cd43881b845ff6f37cd9766bdfa45dccdcd67ccf
testExternalSuccess
public void testExternalSuccess() throws Exception
{    String testMethodName = name.getMethodName();    JdbcRealm realm = realmMap.get(testMethodName);    createDefaultSchema(testMethodName, true);    realm.setSaltStyle(JdbcRealm.SaltStyle.EXTERNAL);    Subject.Builder builder = new Subject.Builder(securityManager);    Subject currentUser = builder.buildSubject();    UsernamePasswordToken token = new UsernamePasswordToken(username, plainTextPassword);    currentUser.login(token);    currentUser.logout();}
ac39a87b21c2e7d6adcb88e11d41f5ed185ef0b46c6c87f7966054345b8a12dc
testExternalWrongPassword
public void testExternalWrongPassword() throws Exception
{    String testMethodName = name.getMethodName();    JdbcRealm realm = realmMap.get(testMethodName);    createDefaultSchema(testMethodName, true);    realm.setSaltStyle(JdbcRealm.SaltStyle.EXTERNAL);    Subject.Builder builder = new Subject.Builder(securityManager);    Subject currentUser = builder.buildSubject();    UsernamePasswordToken token = new UsernamePasswordToken(username, "passwrd");    try {        currentUser.login(token);    } catch (IncorrectCredentialsException ex) {        }}
e2fb67a52c54c46f37f05d38461ec291170ee5d2f79a90618e7257e38ce99b76
testRolePresent
public void testRolePresent() throws Exception
{    String testMethodName = name.getMethodName();    JdbcRealm realm = realmMap.get(testMethodName);    createDefaultSchema(testMethodName, false);    realm.setSaltStyle(JdbcRealm.SaltStyle.NO_SALT);    Subject.Builder builder = new Subject.Builder(securityManager);    Subject currentUser = builder.buildSubject();    UsernamePasswordToken token = new UsernamePasswordToken(username, plainTextPassword);    currentUser.login(token);    Assert.assertTrue(currentUser.hasRole(testRole));}
461d9f72a001220aff89a7cfc9e20be660f1f1f1c9216de628c1d64e6da8e8c9
testRoleNotPresent
public void testRoleNotPresent() throws Exception
{    String testMethodName = name.getMethodName();    JdbcRealm realm = realmMap.get(testMethodName);    createDefaultSchema(testMethodName, false);    realm.setSaltStyle(JdbcRealm.SaltStyle.NO_SALT);    Subject.Builder builder = new Subject.Builder(securityManager);    Subject currentUser = builder.buildSubject();    UsernamePasswordToken token = new UsernamePasswordToken(username, plainTextPassword);    currentUser.login(token);    Assert.assertFalse(currentUser.hasRole("Game Overall Director"));}
e41f722bb6cbb00e24f13bd52f0f6cbf4987239b5d0a61b381629c9ece823214
testPermissionPresent
public void testPermissionPresent() throws Exception
{    String testMethodName = name.getMethodName();    JdbcRealm realm = realmMap.get(testMethodName);    createDefaultSchema(testMethodName, false);    realm.setSaltStyle(JdbcRealm.SaltStyle.NO_SALT);    realm.setPermissionsLookupEnabled(true);    Subject.Builder builder = new Subject.Builder(securityManager);    Subject currentUser = builder.buildSubject();    UsernamePasswordToken token = new UsernamePasswordToken(username, plainTextPassword);    currentUser.login(token);    Assert.assertTrue(currentUser.isPermitted(testPermissionString));}
d4e6120bb72081ea2780d87baf70c3e9f331bbc11b16526e9ec48de5803e1bea
testPermissionNotPresent
public void testPermissionNotPresent() throws Exception
{    String testMethodName = name.getMethodName();    JdbcRealm realm = realmMap.get(testMethodName);    createDefaultSchema(testMethodName, false);    realm.setSaltStyle(JdbcRealm.SaltStyle.NO_SALT);    realm.setPermissionsLookupEnabled(true);    Subject.Builder builder = new Subject.Builder(securityManager);    Subject currentUser = builder.buildSubject();    UsernamePasswordToken token = new UsernamePasswordToken(username, plainTextPassword);    currentUser.login(token);    Assert.assertFalse(currentUser.isPermitted("testDomain:testTarget:specialAction"));}
77397730d52aa0f78f5cc52b987b88c5b087b1f5696ad58b5062f0664a93fe9a
createRealm
protected void createRealm(String testMethodName)
{    JdbcRealm realm = (JdbcRealm) securityManager.getRealms().iterator().next();    realmMap.put(testMethodName, realm);}
1c8d510b01554aab46dc4f3e09b0f4365c1bda2e86b28e3f9fcda973e517bbff
shutDown
protected void shutDown(String testName)
{    Connection conn = null;    Statement sql = null;    DataSource ds = dsMap.get(testName);    try {        Connection c = ds.getConnection();        Statement s = c.createStatement();        s.executeUpdate("SHUTDOWN");    } catch (SQLException ex) {        } finally {        JdbcUtils.closeStatement(sql);        JdbcUtils.closeConnection(conn);        dsMap.remove(testName);        realmMap.remove(testName);    }}
efadb42deb3608fcf7227c9c5773430fef81a598cda65b4a13c4a0aaf2eefe3a
createDefaultSchema
protected void createDefaultSchema(String testName, boolean salted)
{    JDBCDataSource ds = new JDBCDataSource();    ds.setDatabase("jdbc:hsqldb:mem:" + name);    ds.setUser("SA");    ds.setPassword("");    Connection conn = null;    Statement sql = null;    try {        conn = ds.getConnection();        sql = conn.createStatement();        sql.executeUpdate("create table users (username varchar(20), password varchar(100))");        Sha256Hash sha256Hash = salted ? new Sha256Hash(plainTextPassword, salt) : new Sha256Hash(plainTextPassword);        String password = sha256Hash.toHex();        sql.executeUpdate("insert into users values ('" + username + "', '" + password + "')");    } catch (SQLException ex) {        Assert.fail("Exception creating test database");    } finally {        JdbcUtils.closeStatement(sql);        JdbcUtils.closeConnection(conn);    }    createRolesAndPermissions(ds);    realmMap.get(testName).setDataSource(ds);    dsMap.put(testName, ds);}
c172f99bfa4979e5ea3c4ca87a3d3317bc0d4bc63ace5718cecb2a1a003e24d9
createSaltColumnSchema
protected void createSaltColumnSchema(String testName, boolean base64EncodeSalt)
{    JDBCDataSource ds = new JDBCDataSource();    ds.setDatabase("jdbc:hsqldb:mem:" + name);    ds.setUser("SA");    ds.setPassword("");    Connection conn = null;    Statement sql = null;    try {        conn = ds.getConnection();        sql = conn.createStatement();        sql.executeUpdate("create table users (username varchar(20), password varchar(100), password_salt varchar(20))");        Sha256Hash sha256Hash = new Sha256Hash(plainTextPassword, salt);        String password = sha256Hash.toHex();        String maybeBase64EncodedSalt = base64EncodeSalt ? Base64.encodeToString(CodecSupport.toBytes(salt)) : salt;        sql.executeUpdate("insert into users values ('" + username + "', '" + password + "', '" + maybeBase64EncodedSalt + "')");    } catch (SQLException ex) {        Assert.fail("Exception creating test database");    } finally {        JdbcUtils.closeStatement(sql);        JdbcUtils.closeConnection(conn);    }    createRolesAndPermissions(ds);    realmMap.get(testName).setDataSource(ds);    dsMap.put(testName, ds);}
e0d84b1d608598441ddb6752cd8fa5093bed123b477021201cd55d6a59a4575b
createRolesAndPermissions
protected void createRolesAndPermissions(DataSource ds)
{    Connection conn = null;    ;    Statement sql = null;    try {        conn = ds.getConnection();        sql = conn.createStatement();        sql.executeUpdate("create table user_roles (username varchar(20), role_name varchar(20))");        sql.executeUpdate("insert into user_roles values ('" + username + "', '" + testRole + "')");        sql.executeUpdate("create table roles_permissions (role_name varchar(20), permission varchar(40))");        sql.executeUpdate("insert into roles_permissions values ('" + testRole + "', '" + testPermissionString + "')");    } catch (SQLException ex) {        Assert.fail("Exception adding test role and permission");    } finally {        JdbcUtils.closeStatement(sql);        JdbcUtils.closeConnection(conn);    }}
4adaefafec562702d887f5960a1408e5f9d1add92c42fab7cb857d701c42d2a2
setUp
public void setUp()
{    factory = new DefaultLdapContextFactory() {                @Override        protected LdapContext createLdapContext(Hashtable env) throws NamingException {            return createNiceMock(LdapContext.class);        }    };}
55155c8b0246e88ecbd2e9094ac9b4f185b22a6974d76c5cc6a9eb96b287bbda
createLdapContext
protected LdapContext createLdapContext(Hashtable env) throws NamingException
{    return createNiceMock(LdapContext.class);}
a1f6612c7e2f92a7d1999dd5ecb442c6c9186bf81852f6a13a31b64cae476943
testGetLdapContext
public void testGetLdapContext() throws NamingException
{    factory = new DefaultLdapContextFactory();        String brokenHost = UUID.randomUUID().toString();    factory.setUrl("ldap://" + brokenHost + ":389");    factory.getLdapContext((Object) "foo", "bar");}
6a3e2f6eef4bf9579c15988e27716edb090ece04699d2b2837ce64a34af0e482
testGetLdapContextWithoutUrl
public void testGetLdapContextWithoutUrl() throws NamingException
{    factory.getLdapContext((Object) "foo", "bar");}
1bddd20b655fab71213ebee08823e26465af14b6f97724d427dde773a56d6ad0
testEmptyStringCredentials
public void testEmptyStringCredentials() throws NamingException
{    factory.setUrl("ldap://localhost:389");    factory.getLdapContext((Object) "jcoder", "");}
a0575c15e352ff90f800694e2cc217fc535af811596f8638e8bd57edb7f83997
testEmptyCharArrayCredentials
public void testEmptyCharArrayCredentials() throws NamingException
{    factory.setUrl("ldap://localhost:389");    factory.getLdapContext((Object) "jcoder", new char[0]);}
9b75e9dd754d79890d07d29d66f032190c2d67fa690a9bae93292bd6b91f664d
testEmptyByteArrayCredentials
public void testEmptyByteArrayCredentials() throws NamingException
{    factory.setUrl("ldap://localhost:389");    factory.getLdapContext((Object) "jcoder", new byte[0]);}
e5361b41f14b12434111a99aa44f7d6fab4b8087a51e7f284b343547ccf208c1
testEmptyNullCredentials
public void testEmptyNullCredentials() throws NamingException
{    factory.setUrl("ldap://localhost:389");    factory.getLdapContext((Object) "jcoder", null);}
cc62a79b96b2fc770a9cac5a9e12a50c26ec39d8b2e5eefe7fd9997dd25283cf
getNewRealmUnderTest
protected DefaultLdapRealm getNewRealmUnderTest()
{    return new DefaultLdapRealm();}
4adaefafec562702d887f5960a1408e5f9d1add92c42fab7cb857d701c42d2a2
setUp
public void setUp()
{    realm = getNewRealmUnderTest();}
be18f6228a45e67f4cccce2b61e40b605970e8923fe8ed11e3665312e2ba4c15
testDefaultInstance
public void testDefaultInstance()
{    assertTrue(realm.getCredentialsMatcher() instanceof AllowAllCredentialsMatcher);    assertEquals(AuthenticationToken.class, realm.getAuthenticationTokenClass());    assertTrue(realm.getContextFactory() instanceof JndiLdapContextFactory);}
2f55fbfdc17956e1cdf31e4e63e6280e95afe5e10c7a6e2a9e612ac34c7204ab
testSetUserDnTemplateNull
public void testSetUserDnTemplateNull()
{    realm.setUserDnTemplate(null);}
434776aa6e3ebab0825da3c76229319b29884d73059f677081dff89baa8fb94b
testSetUserDnTemplateEmpty
public void testSetUserDnTemplateEmpty()
{    realm.setUserDnTemplate("  ");}
bfbb8d03ba63ff20682102a108c44b6b61cec3a2f77259e8f3f41fbe48ef6b53
testSetUserDnTemplateWithoutToken
public void testSetUserDnTemplateWithoutToken()
{    realm.setUserDnTemplate("uid=,ou=users,dc=mycompany,dc=com");}
1626010c54c89ea894b63a58532e72c62dc8c63f689c34a4edf6be7b5c80ca45
testUserDnTemplate
public void testUserDnTemplate()
{    String template = "uid={0},ou=users,dc=mycompany,dc=com";    realm.setUserDnTemplate(template);    assertEquals(template, realm.getUserDnTemplate());}
969f11a793998337beb337fd65bee077875d2a69ce0af43cd0297cb3ffa338a6
testUserDnTemplateSubstitution
public void testUserDnTemplateSubstitution() throws NamingException
{    realm.setUserDnTemplate("uid={0},ou=users,dc=mycompany,dc=com");    LdapContextFactory factory = createMock(LdapContextFactory.class);    realm.setContextFactory(factory);    Object expectedPrincipal = "uid=jsmith,ou=users,dc=mycompany,dc=com";    expect(factory.getLdapContext(eq(expectedPrincipal), isA(Object.class))).andReturn(createNiceMock(LdapContext.class));    replay(factory);    realm.getAuthenticationInfo(new UsernamePasswordToken("jsmith", "secret"));    verify(factory);}
ed04aa71b033f559b0256ed8ad365ad14818159396d758c22e82bbc5e8940465
testGetAuthenticationInfoNamingAuthenticationException
public void testGetAuthenticationInfoNamingAuthenticationException() throws NamingException
{    realm.setUserDnTemplate("uid={0},ou=users,dc=mycompany,dc=com");    LdapContextFactory factory = createMock(LdapContextFactory.class);    realm.setContextFactory(factory);    expect(factory.getLdapContext(isA(Object.class), isA(Object.class))).andThrow(new javax.naming.AuthenticationException("LDAP Authentication failed."));    replay(factory);    realm.getAuthenticationInfo(new UsernamePasswordToken("jsmith", "secret"));}
726b7e9c39ad66f2bfc006a7967396175012c0a2ac516f30b8a8042213a21eac
testGetAuthenticationInfoNamingException
public void testGetAuthenticationInfoNamingException() throws NamingException
{    realm.setUserDnTemplate("uid={0},ou=users,dc=mycompany,dc=com");    LdapContextFactory factory = createMock(LdapContextFactory.class);    realm.setContextFactory(factory);    expect(factory.getLdapContext(isA(Object.class), isA(Object.class))).andThrow(new NamingException("Communication error."));    replay(factory);    realm.getAuthenticationInfo(new UsernamePasswordToken("jsmith", "secret"));}
6504481e999c29886a8e22d8f018578506309c1b86af7a0c7b7b798aa3e42910
testGetAuthenticationInfoNonSimpleToken
public void testGetAuthenticationInfoNonSimpleToken() throws NamingException
{    realm.setUserDnTemplate("uid={0},ou=users,dc=mycompany,dc=com");    LdapContextFactory factory = createMock(LdapContextFactory.class);    realm.setContextFactory(factory);    final UUID userId = UUID.randomUUID();        expect(factory.getLdapContext(eq(userId), isA(Object.class))).andReturn(createNiceMock(LdapContext.class));    replay(factory);    realm.getAuthenticationInfo(new AuthenticationToken() {        public Object getPrincipal() {            return userId;        }        public Object getCredentials() {            return "secret";        }    });    verify(factory);}
fd56e1755384d43cd981f548599564b11bcb09d8d88ac23705d566dcbeb36882
getPrincipal
public Object getPrincipal()
{    return userId;}
d40889d9d9d8556f6c0a26b69ca857cdca5bea6f57da293d87d0c43c6e6f218f
getCredentials
public Object getCredentials()
{    return "secret";}
b46cf0904c11fd06744769f8c4ab3de0497834fc7224f59b70171483b7146a90
testGetUserDnNullArgument
public void testGetUserDnNullArgument()
{    realm.getUserDn(null);}
f6c776adc66b3fbe6f4a18bd355c44c4bccf3ead9d1a3b86ac8c59396b2eb282
testGetUserDnWithOutPrefixAndSuffix
public void testGetUserDnWithOutPrefixAndSuffix()
{    realm = new DefaultLdapRealm() {        @Override        protected String getUserDnPrefix() {            return null;        }        @Override        protected String getUserDnSuffix() {            return null;        }    };    String principal = "foo";    String userDn = realm.getUserDn(principal);    assertEquals(principal, userDn);}
bd17b4d65d9ba97ea0718590c7667852bd568b3e8638558f20ff905dab949389
getUserDnPrefix
protected String getUserDnPrefix()
{    return null;}
530141a3d39f7d5d60bffd394517a8a3436cafe2bf94e73b310e5d26f25570a5
getUserDnSuffix
protected String getUserDnSuffix()
{    return null;}
4adaefafec562702d887f5960a1408e5f9d1add92c42fab7cb857d701c42d2a2
setUp
public void setUp()
{    factory = new JndiLdapContextFactory() {                @Override        protected LdapContext createLdapContext(Hashtable env) throws NamingException {            return createNiceMock(LdapContext.class);        }    };}
55155c8b0246e88ecbd2e9094ac9b4f185b22a6974d76c5cc6a9eb96b287bbda
createLdapContext
protected LdapContext createLdapContext(Hashtable env) throws NamingException
{    return createNiceMock(LdapContext.class);}
a1f6612c7e2f92a7d1999dd5ecb442c6c9186bf81852f6a13a31b64cae476943
testGetLdapContext
public void testGetLdapContext() throws NamingException
{    factory = new JndiLdapContextFactory();        String brokenHost = UUID.randomUUID().toString();    factory.setUrl("ldap://" + brokenHost + ":389");    factory.getLdapContext((Object) "foo", "bar");}
a5a980b729aa73b19dafff47fbbd48520a5c81864a86a7b796a40e89c2ac1d7a
testAuthenticationMechanism
public void testAuthenticationMechanism()
{    String mech = "MD5-DIGEST";    factory.setAuthenticationMechanism(mech);    assertEquals(mech, factory.getAuthenticationMechanism());}
d4177660d14245134c301c4701f19882c03ffd28a3d92a71740c9ad0048df7f2
testReferral
public void testReferral()
{    String referral = "throw";    factory.setReferral(referral);    assertEquals(referral, factory.getReferral());}
61222df5a0b2ed7c1d52ece4db670e49a7223a2729870324a0f2feef6f6ed83b
testGetContextFactoryClassName
public void testGetContextFactoryClassName()
{    assertEquals(JndiLdapContextFactory.DEFAULT_CONTEXT_FACTORY_CLASS_NAME, factory.getContextFactoryClassName());}
fe7a5164978dc820884bb3e20ccb241a0b1b509ed3e0528751adc2456151df94
testSetEnvironmentPropertyNull
public void testSetEnvironmentPropertyNull()
{    factory.setAuthenticationMechanism("MD5-DIGEST");    factory.setAuthenticationMechanism(null);    assertNull(factory.getAuthenticationMechanism());}
cdcbed23ccc6579c325f0969d0053ac27ae0e5234c73b9856bab005148dc3084
testCustomEnvironment
public void testCustomEnvironment()
{    Map<String, String> map = new HashMap<String, String>();    map.put("foo", "bar");    factory.setEnvironment(map);    assertEquals("bar", factory.getEnvironment().get("foo"));}
6a3e2f6eef4bf9579c15988e27716edb090ece04699d2b2837ce64a34af0e482
testGetLdapContextWithoutUrl
public void testGetLdapContextWithoutUrl() throws NamingException
{    factory.getLdapContext((Object) "foo", "bar");}
8a03395d08ae6ee5bbb33e8ebd33c330496a55d4e049a8ca54242b0541d0dcac
testGetLdapContextDefault
public void testGetLdapContextDefault() throws NamingException
{    factory = new JndiLdapContextFactory() {        @Override        protected LdapContext createLdapContext(Hashtable env) throws NamingException {            assertEquals("ldap://localhost:389", env.get(Context.PROVIDER_URL));            assertEquals("foo", env.get(Context.SECURITY_PRINCIPAL));            assertEquals("bar", env.get(Context.SECURITY_CREDENTIALS));            assertEquals("simple", env.get(Context.SECURITY_AUTHENTICATION));            assertNull(env.get(SUN_CONNECTION_POOLING_PROPERTY));            return createNiceMock(LdapContext.class);        }    };    factory.setUrl("ldap://localhost:389");    factory.getLdapContext((Object) "foo", "bar");}
55155c8b0246e88ecbd2e9094ac9b4f185b22a6974d76c5cc6a9eb96b287bbda
createLdapContext
protected LdapContext createLdapContext(Hashtable env) throws NamingException
{    assertEquals("ldap://localhost:389", env.get(Context.PROVIDER_URL));    assertEquals("foo", env.get(Context.SECURITY_PRINCIPAL));    assertEquals("bar", env.get(Context.SECURITY_CREDENTIALS));    assertEquals("simple", env.get(Context.SECURITY_AUTHENTICATION));    assertNull(env.get(SUN_CONNECTION_POOLING_PROPERTY));    return createNiceMock(LdapContext.class);}
8af8bdbfad9d6b21e2149919069e5dd5169955c65edf7ef34e94aca855893ffb
testGetLdapContextStringArguments
public void testGetLdapContextStringArguments() throws NamingException
{    factory = new JndiLdapContextFactory() {        @Override        protected LdapContext createLdapContext(Hashtable env) throws NamingException {            assertEquals("ldap://localhost:389", env.get(Context.PROVIDER_URL));            assertEquals("foo", env.get(Context.SECURITY_PRINCIPAL));            assertEquals("bar", env.get(Context.SECURITY_CREDENTIALS));            assertEquals("simple", env.get(Context.SECURITY_AUTHENTICATION));            assertNull(env.get(SUN_CONNECTION_POOLING_PROPERTY));            return createNiceMock(LdapContext.class);        }    };    factory.setUrl("ldap://localhost:389");    factory.getLdapContext("foo", "bar");}
55155c8b0246e88ecbd2e9094ac9b4f185b22a6974d76c5cc6a9eb96b287bbda
createLdapContext
protected LdapContext createLdapContext(Hashtable env) throws NamingException
{    assertEquals("ldap://localhost:389", env.get(Context.PROVIDER_URL));    assertEquals("foo", env.get(Context.SECURITY_PRINCIPAL));    assertEquals("bar", env.get(Context.SECURITY_CREDENTIALS));    assertEquals("simple", env.get(Context.SECURITY_AUTHENTICATION));    assertNull(env.get(SUN_CONNECTION_POOLING_PROPERTY));    return createNiceMock(LdapContext.class);}
170701b0d3cc7f416dbe97388efe03719e2f353273504e22cb8591164dc71289
testGetSystemLdapContext
public void testGetSystemLdapContext() throws NamingException
{    factory = new JndiLdapContextFactory() {        @Override        protected LdapContext createLdapContext(Hashtable env) throws NamingException {            assertEquals("ldap://localhost:389", env.get(Context.PROVIDER_URL));            assertEquals("foo", env.get(Context.SECURITY_PRINCIPAL));            assertEquals("bar", env.get(Context.SECURITY_CREDENTIALS));            assertEquals("simple", env.get(Context.SECURITY_AUTHENTICATION));            assertNotNull(env.get(SUN_CONNECTION_POOLING_PROPERTY));            return createNiceMock(LdapContext.class);        }    };    factory.setSystemUsername("foo");    factory.setSystemPassword("bar");    factory.setUrl("ldap://localhost:389");    factory.getSystemLdapContext();}
55155c8b0246e88ecbd2e9094ac9b4f185b22a6974d76c5cc6a9eb96b287bbda
createLdapContext
protected LdapContext createLdapContext(Hashtable env) throws NamingException
{    assertEquals("ldap://localhost:389", env.get(Context.PROVIDER_URL));    assertEquals("foo", env.get(Context.SECURITY_PRINCIPAL));    assertEquals("bar", env.get(Context.SECURITY_CREDENTIALS));    assertEquals("simple", env.get(Context.SECURITY_AUTHENTICATION));    assertNotNull(env.get(SUN_CONNECTION_POOLING_PROPERTY));    return createNiceMock(LdapContext.class);}
06fad13d5a6a519bc8c0aded97bb846e03ba30a998960cdfc4730498cba7d2ec
testGetSystemLdapContextPoolingDisabled
public void testGetSystemLdapContextPoolingDisabled() throws NamingException
{    factory = new JndiLdapContextFactory() {        @Override        protected LdapContext createLdapContext(Hashtable env) throws NamingException {            assertEquals("ldap://localhost:389", env.get(Context.PROVIDER_URL));            assertEquals("foo", env.get(Context.SECURITY_PRINCIPAL));            assertEquals("bar", env.get(Context.SECURITY_CREDENTIALS));            assertEquals("simple", env.get(Context.SECURITY_AUTHENTICATION));            assertNull(env.get(SUN_CONNECTION_POOLING_PROPERTY));            return createNiceMock(LdapContext.class);        }    };    factory.setSystemUsername("foo");    factory.setSystemPassword("bar");    factory.setPoolingEnabled(false);    factory.setUrl("ldap://localhost:389");    factory.getSystemLdapContext();}
55155c8b0246e88ecbd2e9094ac9b4f185b22a6974d76c5cc6a9eb96b287bbda
createLdapContext
protected LdapContext createLdapContext(Hashtable env) throws NamingException
{    assertEquals("ldap://localhost:389", env.get(Context.PROVIDER_URL));    assertEquals("foo", env.get(Context.SECURITY_PRINCIPAL));    assertEquals("bar", env.get(Context.SECURITY_CREDENTIALS));    assertEquals("simple", env.get(Context.SECURITY_AUTHENTICATION));    assertNull(env.get(SUN_CONNECTION_POOLING_PROPERTY));    return createNiceMock(LdapContext.class);}
1bddd20b655fab71213ebee08823e26465af14b6f97724d427dde773a56d6ad0
testEmptyStringCredentials
public void testEmptyStringCredentials() throws NamingException
{    factory.setUrl("ldap://localhost:389");    factory.getLdapContext((Object) "jcoder", "");}
a0575c15e352ff90f800694e2cc217fc535af811596f8638e8bd57edb7f83997
testEmptyCharArrayCredentials
public void testEmptyCharArrayCredentials() throws NamingException
{    factory.setUrl("ldap://localhost:389");    factory.getLdapContext((Object) "jcoder", new char[0]);}
9b75e9dd754d79890d07d29d66f032190c2d67fa690a9bae93292bd6b91f664d
testEmptyByteArrayCredentials
public void testEmptyByteArrayCredentials() throws NamingException
{    factory.setUrl("ldap://localhost:389");    factory.getLdapContext((Object) "jcoder", new byte[0]);}
e5361b41f14b12434111a99aa44f7d6fab4b8087a51e7f284b343547ccf208c1
testEmptyNullCredentials
public void testEmptyNullCredentials() throws NamingException
{    factory.setUrl("ldap://localhost:389");    factory.getLdapContext((Object) "jcoder", null);}
cc62a79b96b2fc770a9cac5a9e12a50c26ec39d8b2e5eefe7fd9997dd25283cf
getNewRealmUnderTest
protected DefaultLdapRealm getNewRealmUnderTest()
{    return new JndiLdapRealm();}
f6c776adc66b3fbe6f4a18bd355c44c4bccf3ead9d1a3b86ac8c59396b2eb282
testGetUserDnWithOutPrefixAndSuffix
public void testGetUserDnWithOutPrefixAndSuffix()
{    JndiLdapRealm realm = new JndiLdapRealm() {        @Override        protected String getUserDnPrefix() {            return null;        }        @Override        protected String getUserDnSuffix() {            return null;        }    };    String principal = "foo";    String userDn = realm.getUserDn(principal);    assertEquals(principal, userDn);}
bd17b4d65d9ba97ea0718590c7667852bd568b3e8638558f20ff905dab949389
getUserDnPrefix
protected String getUserDnPrefix()
{    return null;}
530141a3d39f7d5d60bffd394517a8a3436cafe2bf94e73b310e5d26f25570a5
getUserDnSuffix
protected String getUserDnSuffix()
{    return null;}
5db4beb8abfdc2d77257e2e87891f9185dd6d0d5c4e28891979f8969c474c237
testNullIni
public void testNullIni()
{    IniRealm realm = new IniRealm((Ini) null);}
4a5cd48d4de7562faa4c21818f17935ad9d336a38911ec8dcdfc5fca49d6a1a4
testEmptyIni
public void testEmptyIni()
{    new IniRealm(new Ini());}
d8bc25ac4af2194ddffc7fb60803f770592b139db8ce2b856dacfbb356f2151d
testInitWithoutIniResource
public void testInitWithoutIniResource()
{    new IniRealm().init();}
2e7754e819076012f0338f9050bf4fb72ffd013ee92ceee15447f829cef2654e
testIniFile
public void testIniFile()
{    IniRealm realm = new IniRealm();    realm.setResourcePath("classpath:org/apache/shiro/realm/text/IniRealmTest.simple.ini");    realm.init();    assertTrue(realm.roleExists("admin"));    UsernamePasswordToken token = new UsernamePasswordToken("user1", "user1");    AuthenticationInfo info = realm.getAuthenticationInfo(token);    assertNotNull(info);    assertTrue(realm.hasRole(info.getPrincipals(), "admin"));}
005e05da35d37ba399fb3f941689c22c9939633e62ad2e1efbcf002778daa569
testIniFileWithoutUsers
public void testIniFileWithoutUsers()
{    IniRealm realm = new IniRealm();    realm.setResourcePath("classpath:org/apache/shiro/realm/text/IniRealmTest.noUsers.ini");    realm.init();    assertTrue(realm.roleExists("admin"));}
aa57fd98fddd37301f10d1924999cba8a2ee761411e95c7288705bb2dc90ba99
setRoles
private void setRoles()
{    StringBuilder roleDefinitions = new StringBuilder().append("role1 = role1_permission1\n").append("role2 = role2_persission1, role2_permission2\n");    realm.setRoleDefinitions(roleDefinitions.toString());}
64ac4df0f9bf53df749e8856da84df763a8c73f2950902db46ca8e91125ec726
setUsers
private void setUsers()
{    StringBuilder userDefinitions = new StringBuilder();    for (int i = 1; i < 3; i++) {        userDefinitions.append(String.format("user%1$d = user%1$d_password, role1, role2%n", i));    }    realm.setUserDefinitions(userDefinitions.toString());}
eda70113ba01d5c0ebad36ae686169d6cd1795e8a7232b236db4e7fa44898520
setUpForReadConfigurationTest
private void setUpForReadConfigurationTest()
{    realm = new TestRealm() {        /*             * Demonstrates that a lock can't be obtained on the realm by a read thread until after             * the lock is released.             */        public void test(Thread runnable) throws InterruptedException {                        USERS_LOCK.writeLock().lock();            try {                ROLES_LOCK.writeLock().lock();                try {                                        runnable.start();                    Thread.sleep(500);                                        realm.onInit();                } finally {                    ROLES_LOCK.writeLock().unlock();                }            } finally {                USERS_LOCK.writeLock().unlock();            }        }    };    setRoles();    setUsers();}
10d7184645177fc8e54c33fe6e585026141e464d0ae380931617b8217c2b7ebf
test
public void test(Thread runnable) throws InterruptedException
{        USERS_LOCK.writeLock().lock();    try {        ROLES_LOCK.writeLock().lock();        try {                        runnable.start();            Thread.sleep(500);                        realm.onInit();        } finally {            ROLES_LOCK.writeLock().unlock();        }    } finally {        USERS_LOCK.writeLock().unlock();    }}
c1eacfd45564973b57ed1a7f11d65903778a9bc79273e41019d5e52fd616cef2
executeTest
private void executeTest(Runnable runnable) throws InterruptedException
{    TestThread testThread = new TestThread(runnable);    Thread testTask = new Thread(testThread);    realm.test(testTask);    testTask.join(500);        testThread.test();}
2b1e839b084201a1b4f823503b21d8a04a495def81c6b7ce3d3d3885364e5132
testRoleAndUserAccount
public void testRoleAndUserAccount() throws InterruptedException
{    setUpForReadConfigurationTest();    executeTest(new Runnable() {        public void run() {            assertTrue("role not found when it was expected", realm.roleExists("role1"));            assertTrue("user not found when it was expected", realm.accountExists("user1"));        }    });}
4560d80c2474cc2770be19fbc06c60741920c59992e6b13524f8a5b688ec285a
run
public void run()
{    assertTrue("role not found when it was expected", realm.roleExists("role1"));    assertTrue("user not found when it was expected", realm.accountExists("user1"));}
6e411bfccfc3c09d741efd8fe02000ce2a949c8dc2c842941cf55d2b3fca8c26
testHasRole
public void testHasRole() throws InterruptedException
{    setUpForReadConfigurationTest();    executeTest(new Runnable() {        public void run() {            PrincipalCollection principalCollection = new SimplePrincipalCollection("user1", "realm1");            assertTrue("principal doesn't have role when it should", realm.hasRole(principalCollection, "role2"));            assertTrue("principal doesn't have all roles when it should", realm.hasAllRoles(principalCollection, Arrays.asList(new String[] { "role1", "role2" })));        }    });}
4560d80c2474cc2770be19fbc06c60741920c59992e6b13524f8a5b688ec285a
run
public void run()
{    PrincipalCollection principalCollection = new SimplePrincipalCollection("user1", "realm1");    assertTrue("principal doesn't have role when it should", realm.hasRole(principalCollection, "role2"));    assertTrue("principal doesn't have all roles when it should", realm.hasAllRoles(principalCollection, Arrays.asList(new String[] { "role1", "role2" })));}
83f17eaeed4a23161ff062e21b7106dfec08079295fe6fbaef07d7848f4fa4e0
testCheckRole
public void testCheckRole() throws InterruptedException
{    setUpForReadConfigurationTest();    executeTest(new Runnable() {        public void run() {            PrincipalCollection principalCollection = new SimplePrincipalCollection("user1", "realm1");            try {                realm.checkRoles(principalCollection, new String[] { "role1", "role2" });            } catch (AuthorizationException ae) {                fail("principal doesn't have all roles when it should");            }        }    });}
4560d80c2474cc2770be19fbc06c60741920c59992e6b13524f8a5b688ec285a
run
public void run()
{    PrincipalCollection principalCollection = new SimplePrincipalCollection("user1", "realm1");    try {        realm.checkRoles(principalCollection, new String[] { "role1", "role2" });    } catch (AuthorizationException ae) {        fail("principal doesn't have all roles when it should");    }}
f7c216a39ad81bc10c8a9d50437bba54b322d1b7d8ebfd046875206864c4e62e
testCheckPermission
public void testCheckPermission() throws InterruptedException
{    setUpForReadConfigurationTest();    executeTest(new Runnable() {        public void run() {            PrincipalCollection principalCollection = new SimplePrincipalCollection("user1", "realm1");            try {                realm.checkPermission(principalCollection, "role1_permission1");                realm.checkPermissions(principalCollection, new String[] { "role1_permission1", "role2_permission2" });            } catch (AuthorizationException ae) {                fail("principal doesn't have permission when it should");            }        }    });}
4560d80c2474cc2770be19fbc06c60741920c59992e6b13524f8a5b688ec285a
run
public void run()
{    PrincipalCollection principalCollection = new SimplePrincipalCollection("user1", "realm1");    try {        realm.checkPermission(principalCollection, "role1_permission1");        realm.checkPermissions(principalCollection, new String[] { "role1_permission1", "role2_permission2" });    } catch (AuthorizationException ae) {        fail("principal doesn't have permission when it should");    }}
f636491543bcc3f5d40caaa22162f6961d67bea7fae1d5e53ef0afc32df4e4bf
testIsPermitted
public void testIsPermitted() throws InterruptedException
{    setUpForReadConfigurationTest();    executeTest(new Runnable() {        public void run() {            PrincipalCollection principalCollection = new SimplePrincipalCollection("user1", "realm1");            assertTrue("permission not permitted when it should be", realm.isPermitted(principalCollection, "role1_permission1"));            assertTrue("permission not permitted when it should be", realm.isPermittedAll(principalCollection, new String[] { "role1_permission1", "role2_permission2" }));        }    });}
4560d80c2474cc2770be19fbc06c60741920c59992e6b13524f8a5b688ec285a
run
public void run()
{    PrincipalCollection principalCollection = new SimplePrincipalCollection("user1", "realm1");    assertTrue("permission not permitted when it should be", realm.isPermitted(principalCollection, "role1_permission1"));    assertTrue("permission not permitted when it should be", realm.isPermittedAll(principalCollection, new String[] { "role1_permission1", "role2_permission2" }));}
98914157b43a6cb2955139f8e5a49200fd2ed88741e6c7a61fc594528a947c94
testProcessRoleDefinitions
public void testProcessRoleDefinitions() throws InterruptedException
{    realm = new TestRealm() {        public void test(Thread runnable) throws InterruptedException {                                    ROLES_LOCK.writeLock().lock();            try {                runnable.start();                Thread.sleep(500);                                assertFalse("role exists when it shouldn't", realm.roleExists("role1"));            } finally {                ROLES_LOCK.writeLock().unlock();            }        }    };        TestThread testThread = new TestThread(new Runnable() {        public void run() {            try {                realm.processRoleDefinitions();            } catch (ParseException e) {                fail("Unable to parse role definitions");            }        }    });    setRoles();    Thread testTask = new Thread(testThread);    realm.test(testTask);    testTask.join(500);    assertTrue("role doesn't exist when it should", realm.roleExists("role1"));    testThread.test();}
10d7184645177fc8e54c33fe6e585026141e464d0ae380931617b8217c2b7ebf
test
public void test(Thread runnable) throws InterruptedException
{            ROLES_LOCK.writeLock().lock();    try {        runnable.start();        Thread.sleep(500);                assertFalse("role exists when it shouldn't", realm.roleExists("role1"));    } finally {        ROLES_LOCK.writeLock().unlock();    }}
4560d80c2474cc2770be19fbc06c60741920c59992e6b13524f8a5b688ec285a
run
public void run()
{    try {        realm.processRoleDefinitions();    } catch (ParseException e) {        fail("Unable to parse role definitions");    }}
62a493b09e89b8e322c3d8803c801ec5412f4d47dc45e4a78736116e059940ca
testProcessUserDefinitions
public void testProcessUserDefinitions() throws InterruptedException
{    realm = new TestRealm() {        public void test(Thread runnable) throws InterruptedException {                                    USERS_LOCK.writeLock().lock();            try {                runnable.start();                Thread.sleep(500);                                assertFalse("account exists when it shouldn't", realm.accountExists("user1"));            } finally {                USERS_LOCK.writeLock().unlock();            }        }    };    TestThread testThread = new TestThread(new Runnable() {        public void run() {            try {                realm.processUserDefinitions();            } catch (ParseException e) {                fail("Unable to parse user definitions");            }        }    });    setUsers();    Thread testTask = new Thread(testThread);    realm.test(testTask);    testTask.join(500);    assertTrue("account doesn't exist when it should", realm.accountExists("user1"));    testThread.test();}
10d7184645177fc8e54c33fe6e585026141e464d0ae380931617b8217c2b7ebf
test
public void test(Thread runnable) throws InterruptedException
{            USERS_LOCK.writeLock().lock();    try {        runnable.start();        Thread.sleep(500);                assertFalse("account exists when it shouldn't", realm.accountExists("user1"));    } finally {        USERS_LOCK.writeLock().unlock();    }}
4560d80c2474cc2770be19fbc06c60741920c59992e6b13524f8a5b688ec285a
run
public void run()
{    try {        realm.processUserDefinitions();    } catch (ParseException e) {        fail("Unable to parse user definitions");    }}
4560d80c2474cc2770be19fbc06c60741920c59992e6b13524f8a5b688ec285a
run
public void run()
{    try {        test.run();    } catch (AssertionError ae) {        this.ae = ae;    }}
a505a221a080c584c1896dbef1a0d5c74c6ef08b41d9b90521f8bad26d05354c
test
public void test()
{    if (ae != null)        throw ae;}
e3e6c95047fa99f25cc815227af120d12242fedc8601ca66cc9c6354dca221e9
getUserId
public int getUserId()
{    return userId;}
239fbe3eb64d679cbac1161825b07d6a8436ead3c6c3d140d9caec2275827023
getName
public String getName()
{    return String.valueOf(userId);}
6a70299d74b1ed8da0ff8fec5a1c89ba0dff9b5b133bb2544a0bc6abb19bcee7
getUsername
public String getUsername()
{    return username;}
239fbe3eb64d679cbac1161825b07d6a8436ead3c6c3d140d9caec2275827023
getName
public String getName()
{    return String.valueOf(username);}
61a387258e0440147f15d105dcc36003e30ef0e1a291c1d3139a38f8d3cb9022
testValidateSessions
public void testValidateSessions()
{    final SimpleSession validSession = new SimpleSession();    validSession.setId(1);    final SimpleSession invalidSession = new SimpleSession();        Calendar cal = Calendar.getInstance();    Long expiredTimeout = AbstractSessionManager.DEFAULT_GLOBAL_SESSION_TIMEOUT + 1;    cal.add(Calendar.MILLISECOND, -(expiredTimeout.intValue()));    Date past = cal.getTime();    invalidSession.setStartTimestamp(past);    invalidSession.setLastAccessTime(past);    invalidSession.setId(2);    final AtomicInteger expirationCount = new AtomicInteger();    SessionListener sessionListener = new SessionListenerAdapter() {        @Override        public void onExpiration(Session session) {            expirationCount.incrementAndGet();        }    };    AbstractValidatingSessionManager sessionManager = new AbstractValidatingSessionManager() {        @Override        protected Session retrieveSession(SessionKey key) throws UnknownSessionException {            throw new UnsupportedOperationException("Should not be called in this test.");        }        @Override        protected Session doCreateSession(SessionContext initData) throws AuthorizationException {            throw new UnsupportedOperationException("Should not be called in this test.");        }        @Override        protected Collection<Session> getActiveSessions() {            Collection<Session> sessions = new ArrayList<Session>(2);            sessions.add(validSession);            sessions.add(invalidSession);            return sessions;        }    };    sessionManager.setSessionListeners(Arrays.asList(sessionListener));    sessionManager.validateSessions();    assertEquals(1, expirationCount.intValue());}
0957417af57f98c016930564e7589702d38cfe25085c8d68c03bf4cc5fb59e65
onExpiration
public void onExpiration(Session session)
{    expirationCount.incrementAndGet();}
cba663ddcc594dc68a1272d53e80bfc135bc3fb7130d0a805b5b1fb92e5c13fa
retrieveSession
protected Session retrieveSession(SessionKey key) throws UnknownSessionException
{    throw new UnsupportedOperationException("Should not be called in this test.");}
66cd7a142bfe2f53ac1907e4f1783f1882153208db687ff86e5a4f804635f56f
doCreateSession
protected Session doCreateSession(SessionContext initData) throws AuthorizationException
{    throw new UnsupportedOperationException("Should not be called in this test.");}
a88e18d5369761fa36cafc9a5a153fd85ddc194881efe5d22c57204ccb185c15
getActiveSessions
protected Collection<Session> getActiveSessions()
{    Collection<Session> sessions = new ArrayList<Session>(2);    sessions.add(validSession);    sessions.add(invalidSession);    return sessions;}
ecb5242b2464ca9c12577dbcddf3e0868c240986e0fc08c7f8de22ed511db8f7
testNoMemoryLeakOnInvalidSessions
public void testNoMemoryLeakOnInvalidSessions() throws Exception
{    SessionListener sessionListener = new SessionListener() {        public void onStart(Session session) {            session.setAttribute("I love", "Romania");        }        public void onStop(Session session) {            tryToCleanSession(session);        }        public void onExpiration(Session session) {            tryToCleanSession(session);        }        private void tryToCleanSession(Session session) {            Collection<Object> keys = session.getAttributeKeys();            for (Object key : keys) {                session.removeAttribute(key);            }        }    };    DefaultSessionManager sessionManager = new DefaultSessionManager();    sessionManager.setSessionListeners(Arrays.asList(sessionListener));    Session session = sessionManager.start(null);    assertEquals(1, sessionManager.getActiveSessions().size());    session.setTimeout(0L);        Thread.sleep(1);    sessionManager.validateSessions();    assertEquals(0, sessionManager.getActiveSessions().size());}
3d6dab1bdc5714d6e01fdb4554380eec2929bb6821517bb505402f1e81ef77ee
onStart
public void onStart(Session session)
{    session.setAttribute("I love", "Romania");}
75d613c36c50e6fc2a94f66d4ae49c1dd0e158728f7277cfaf0bf4093f1df4d1
onStop
public void onStop(Session session)
{    tryToCleanSession(session);}
0957417af57f98c016930564e7589702d38cfe25085c8d68c03bf4cc5fb59e65
onExpiration
public void onExpiration(Session session)
{    tryToCleanSession(session);}
cf9c41e89ce24a9c6e67b251aca4f04a481f283842c6e5e042516d7a5bb37847
tryToCleanSession
private void tryToCleanSession(Session session)
{    Collection<Object> keys = session.getAttributeKeys();    for (Object key : keys) {        session.removeAttribute(key);    }}
5ff0b8f7d2b080bcc6214fa5f91be74727145ea81cacb63a99c8d0f3106c089f
setup
public void setup()
{    ThreadContext.remove();    sm = new DefaultSessionManager();}
39e5ba029cc67f6f1d45c6d20f0df595ec16bc61da20d7680fcbbdae4fe7f95b
tearDown
public void tearDown()
{    sm.destroy();    ThreadContext.remove();}
b66e27b78829113feb6c4943ec3650080e1bb9c8d8141578095a5c52659c173e
sleep
public void sleep(long millis)
{    try {        Thread.sleep(millis);    } catch (InterruptedException e) {        throw new IllegalStateException(e);    }}
31b3a441bd50ef904fbd67df667bfd9f6b5746c2c4ffe83b2e74044c0e921569
testGlobalTimeout
public void testGlobalTimeout()
{    long timeout = 1000;    sm.setGlobalSessionTimeout(timeout);    Session session = sm.start(null);    assertNotNull(session);    assertNotNull(session.getId());    assertEquals(session.getTimeout(), timeout);}
88eabd09ccba69ade109035b22b8be3599f017e86c86877a916b1f43b4ffd939
testSessionListenerStartNotification
public void testSessionListenerStartNotification()
{    final boolean[] started = new boolean[1];    SessionListener listener = new SessionListenerAdapter() {        public void onStart(Session session) {            started[0] = true;        }    };    sm.getSessionListeners().add(listener);    sm.start(null);    assertTrue(started[0]);}
3d6dab1bdc5714d6e01fdb4554380eec2929bb6821517bb505402f1e81ef77ee
onStart
public void onStart(Session session)
{    started[0] = true;}
b3ce67c36c8b5cf3dd173a0b56bf6721b97e744077d891c31f23cbe78db62941
testSessionListenerStopNotification
public void testSessionListenerStopNotification()
{    final boolean[] stopped = new boolean[1];    SessionListener listener = new SessionListenerAdapter() {        public void onStop(Session session) {            stopped[0] = true;        }    };    sm.getSessionListeners().add(listener);    Session session = sm.start(null);    sm.stop(new DefaultSessionKey(session.getId()));    assertTrue(stopped[0]);}
75d613c36c50e6fc2a94f66d4ae49c1dd0e158728f7277cfaf0bf4093f1df4d1
onStop
public void onStop(Session session)
{    stopped[0] = true;}
6d7d2e6ff142e41c44ae722d5986da80149332d48cec67a0c31d9c704fc64434
testSessionListenerStopNotificationWithReadAttribute
public void testSessionListenerStopNotificationWithReadAttribute()
{    final boolean[] stopped = new boolean[1];    final String[] value = new String[1];    SessionListener listener = new SessionListenerAdapter() {        public void onStop(Session session) {            stopped[0] = true;            value[0] = (String) session.getAttribute("foo");        }    };    sm.getSessionListeners().add(listener);    Session session = sm.start(null);    session.setAttribute("foo", "bar");    sm.stop(new DefaultSessionKey(session.getId()));    assertTrue(stopped[0]);    assertEquals("bar", value[0]);}
75d613c36c50e6fc2a94f66d4ae49c1dd0e158728f7277cfaf0bf4093f1df4d1
onStop
public void onStop(Session session)
{    stopped[0] = true;    value[0] = (String) session.getAttribute("foo");}
8207a77a60a47b67a80dda511039187bb720ed9bd87d7f3d1c494853b2077b37
testSessionListenerExpiredNotification
public void testSessionListenerExpiredNotification()
{    final boolean[] expired = new boolean[1];    SessionListener listener = new SessionListenerAdapter() {        public void onExpiration(Session session) {            expired[0] = true;        }    };    sm.getSessionListeners().add(listener);    sm.setGlobalSessionTimeout(100);    Session session = sm.start(null);    sleep(150);    try {        sm.checkValid(new DefaultSessionKey(session.getId()));        fail("check should have thrown an exception.");    } catch (InvalidSessionException expected) {        }    assertTrue(expired[0]);}
0957417af57f98c016930564e7589702d38cfe25085c8d68c03bf4cc5fb59e65
onExpiration
public void onExpiration(Session session)
{    expired[0] = true;}
b6162028bbceceacc8b3282588abb0bc1c5131c8ba7afc55ad18b998eeebb405
testSessionDeleteOnExpiration
public void testSessionDeleteOnExpiration()
{    sm.setGlobalSessionTimeout(100);    SessionDAO sessionDAO = createMock(SessionDAO.class);    sm.setSessionDAO(sessionDAO);    String sessionId1 = UUID.randomUUID().toString();    final SimpleSession session1 = new SimpleSession();    session1.setId(sessionId1);    final Session[] activeSession = new SimpleSession[] { session1 };    sm.setSessionFactory(new SessionFactory() {        public Session createSession(SessionContext initData) {            return activeSession[0];        }    });    expect(sessionDAO.create(eq(session1))).andReturn(sessionId1);    sessionDAO.update(eq(session1));    expectLastCall().anyTimes();    replay(sessionDAO);    Session session = sm.start(null);    assertNotNull(session);    verify(sessionDAO);    reset(sessionDAO);    expect(sessionDAO.readSession(sessionId1)).andReturn(session1).anyTimes();    sessionDAO.update(eq(session1));    replay(sessionDAO);    sm.setTimeout(new DefaultSessionKey(sessionId1), 1);    verify(sessionDAO);    reset(sessionDAO);    sleep(20);    expect(sessionDAO.readSession(sessionId1)).andReturn(session1);        sessionDAO.update(eq(session1));    sessionDAO.delete(session1);    replay(sessionDAO);        try {        sm.getTimeout(new DefaultSessionKey(sessionId1));        fail("Session with id [" + sessionId1 + "] should have expired due to timeout.");    } catch (ExpiredSessionException expected) {        }        verify(sessionDAO);}
cbf18adfa3077c126a71f397f5da1954d2dd1d952348c7c14c272633d3fee4d7
createSession
public Session createSession(SessionContext initData)
{    return activeSession[0];}
33d5d0a87efa3e05533b2d46b5ca7124624f4b32d7919c57736fff6254489b72
testEnablingOfCustomSessionValidationScheduler
public void testEnablingOfCustomSessionValidationScheduler()
{            ExecutorServiceSessionValidationScheduler sessionValidationScheduler = new ExecutorServiceSessionValidationScheduler();    DefaultSessionManager sessionManager = new DefaultSessionManager();    sessionManager.setSessionValidationScheduler(sessionValidationScheduler);        try {        Session session = sessionManager.start(null);                assertTrue("sessionValidationScheduler was not enabled", sessionValidationScheduler.isEnabled());    } finally {                sessionManager.destroy();    }}
38839dfec24d8c5089a70737f13dcfab144562f883d7fa9fe20de1af95a7ee15
eqSessionTimeout
public static T eqSessionTimeout(long timeout)
{    EasyMock.reportMatcher(new SessionTimeoutMatcher(timeout));    return null;}
a9d4d655b19b70cdbe9824cc420ee83364e526a200478fba70afd680009cc19e
appendTo
public void appendTo(StringBuffer buffer)
{    buffer.append("eqSession(timeout=").append(this.timeout).append(")");}
4b76f08448051d0b2c30bed3181b740cecea28e3be1e496e637436cb88dff87c
matches
public boolean matches(Object o)
{    return o instanceof Session && ((Session) o).getTimeout() == this.timeout;}
5ff0b8f7d2b080bcc6214fa5f91be74727145ea81cacb63a99c8d0f3106c089f
setup
public void setup()
{    ThreadContext.remove();    sm = new DefaultSessionManager();    this.session = new DelegatingSession(sm, new DefaultSessionKey(sm.start(null).getId()));}
39e5ba029cc67f6f1d45c6d20f0df595ec16bc61da20d7680fcbbdae4fe7f95b
tearDown
public void tearDown()
{    sm.destroy();    ThreadContext.remove();}
b66e27b78829113feb6c4943ec3650080e1bb9c8d8141578095a5c52659c173e
sleep
public void sleep(long millis)
{    try {        Thread.sleep(millis);    } catch (InterruptedException e) {        throw new IllegalStateException(e);    }}
ff3c47a5142760fb533d3c91975080998cc3c2167720ba80353de75f197da932
testTimeout
public void testTimeout()
{    Serializable origId = session.getId();    assertEquals(session.getTimeout(), AbstractSessionManager.DEFAULT_GLOBAL_SESSION_TIMEOUT);    session.touch();    session.setTimeout(100);    assertEquals(100, session.getTimeout());    sleep(150);    try {        session.getTimeout();        fail("Session should have expired.");    } catch (ExpiredSessionException expected) {    }}
5136670ad9b4b824f7b792c3bdd7cf10224d9079b34ba055ebe0a04b6df3908a
testDefaultSerialization
public void testDefaultSerialization() throws Exception
{    SimpleSession session = new SimpleSession();    long timeout = session.getTimeout();    Date start = session.getStartTimestamp();    Date lastAccess = session.getLastAccessTime();    SimpleSession deserialized = serializeAndDeserialize(session);    assertEquals(timeout, deserialized.getTimeout());    assertEquals(start, deserialized.getStartTimestamp());    assertEquals(lastAccess, deserialized.getLastAccessTime());}
6dfd20f6bb5f9e26f68e03c85598d442500efc4d625478f15c9c82e73d6a95a8
serializeHost
public void serializeHost() throws IOException, ClassNotFoundException
{    SimpleSession session = new SimpleSession("localhost");    assertEquals("localhost", serializeAndDeserialize(session).getHost());}
30abcb56ad818542e5084dbb46ae8b283a0a3ff2257629e47ccbf80908253e2d
serializeExpired
public void serializeExpired() throws IOException, ClassNotFoundException
{    SimpleSession session = new SimpleSession();    session.setExpired(true);    assertTrue(serializeAndDeserialize(session).isExpired());}
473600b4f87a0baa93e9f0775ad5cd0e2bcf04d9416bed6804912465d531000b
serializeAndDeserialize
private SimpleSession serializeAndDeserialize(SimpleSession session) throws IOException, ClassNotFoundException
{    ByteArrayOutputStream serialized = new ByteArrayOutputStream();    ObjectOutputStream serializer = new ObjectOutputStream(serialized);    serializer.writeObject(session);    serializer.close();    return (SimpleSession) new ObjectInputStream(new ByteArrayInputStream(serialized.toByteArray())).readObject();}
5ff0b8f7d2b080bcc6214fa5f91be74727145ea81cacb63a99c8d0f3106c089f
setup
public void setup()
{    ThreadContext.remove();}
39e5ba029cc67f6f1d45c6d20f0df595ec16bc61da20d7680fcbbdae4fe7f95b
tearDown
public void tearDown()
{    ThreadContext.remove();}
d9154df990cddc37a7d835b36890c0a54473083dbdbb3284f6e5be4160db6879
testSessionStopThenStart
public void testSessionStopThenStart()
{    String key = "testKey";    String value = "testValue";    DefaultSecurityManager sm = new DefaultSecurityManager();    DelegatingSubject subject = new DelegatingSubject(sm);    Session session = subject.getSession();    session.setAttribute(key, value);    assertTrue(session.getAttribute(key).equals(value));    Serializable firstSessionId = session.getId();    assertNotNull(firstSessionId);    session.stop();    session = subject.getSession();    assertNotNull(session);    assertNull(session.getAttribute(key));    Serializable secondSessionId = session.getId();    assertNotNull(secondSessionId);    assertFalse(firstSessionId.equals(secondSessionId));    subject.logout();    sm.destroy();}
f9505800247be1824726ee439be474a6e0c07ec443e7f1ac540125b4961dc116
testExecuteCallable
public void testExecuteCallable()
{    String username = "jsmith";    SecurityManager securityManager = createNiceMock(SecurityManager.class);    PrincipalCollection identity = new SimplePrincipalCollection(username, "testRealm");    final Subject sourceSubject = new DelegatingSubject(identity, true, null, null, securityManager);    assertNull(ThreadContext.getSubject());    assertNull(ThreadContext.getSecurityManager());    Callable<String> callable = new Callable<String>() {        public String call() throws Exception {            Subject callingSubject = SecurityUtils.getSubject();            assertNotNull(callingSubject);            assertNotNull(SecurityUtils.getSecurityManager());            assertEquals(callingSubject, sourceSubject);            return "Hello " + callingSubject.getPrincipal();        }    };    String response = sourceSubject.execute(callable);    assertNotNull(response);    assertEquals("Hello " + username, response);    assertNull(ThreadContext.getSubject());    assertNull(ThreadContext.getSecurityManager());}
0de366753fb2c2ae2fa0e376bb10ccfbbff19256a8a508826be7c2384f30ac4b
call
public String call() throws Exception
{    Subject callingSubject = SecurityUtils.getSubject();    assertNotNull(callingSubject);    assertNotNull(SecurityUtils.getSecurityManager());    assertEquals(callingSubject, sourceSubject);    return "Hello " + callingSubject.getPrincipal();}
668ac24d5421abe123a6f8e70dd016dfb64cb0d999a39e29d8e04992d7f5b4e9
testExecuteRunnable
public void testExecuteRunnable()
{    String username = "jsmith";    SecurityManager securityManager = createNiceMock(SecurityManager.class);    PrincipalCollection identity = new SimplePrincipalCollection(username, "testRealm");    final Subject sourceSubject = new DelegatingSubject(identity, true, null, null, securityManager);    assertNull(ThreadContext.getSubject());    assertNull(ThreadContext.getSecurityManager());    Runnable runnable = new Runnable() {        public void run() {            Subject callingSubject = SecurityUtils.getSubject();            assertNotNull(callingSubject);            assertNotNull(SecurityUtils.getSecurityManager());            assertEquals(callingSubject, sourceSubject);        }    };    sourceSubject.execute(runnable);    assertNull(ThreadContext.getSubject());    assertNull(ThreadContext.getSecurityManager());}
4560d80c2474cc2770be19fbc06c60741920c59992e6b13524f8a5b688ec285a
run
public void run()
{    Subject callingSubject = SecurityUtils.getSubject();    assertNotNull(callingSubject);    assertNotNull(SecurityUtils.getSecurityManager());    assertEquals(callingSubject, sourceSubject);}
9218fe212a1acee62bb6d9bd352126479a7d81a1aa3965ead45a96c7aa642198
testRunAs
public void testRunAs()
{    Ini ini = new Ini();    Ini.Section users = ini.addSection("users");    users.put("user1", "user1,role1");    users.put("user2", "user2,role2");    users.put("user3", "user3,role3");    IniSecurityManagerFactory factory = new IniSecurityManagerFactory(ini);    SecurityManager sm = factory.getInstance();        Subject subject = new Subject.Builder(sm).buildSubject();    subject.login(new UsernamePasswordToken("user1", "user1"));    assertFalse(subject.isRunAs());    assertEquals("user1", subject.getPrincipal());    assertTrue(subject.hasRole("role1"));    assertFalse(subject.hasRole("role2"));    assertFalse(subject.hasRole("role3"));        assertNull(subject.getPreviousPrincipals());        subject.runAs(new SimplePrincipalCollection("user2", IniSecurityManagerFactory.INI_REALM_NAME));    assertTrue(subject.isRunAs());    assertEquals("user2", subject.getPrincipal());    assertTrue(subject.hasRole("role2"));    assertFalse(subject.hasRole("role1"));    assertFalse(subject.hasRole("role3"));        PrincipalCollection previous = subject.getPreviousPrincipals();    assertFalse(previous == null || previous.isEmpty());    assertTrue(previous.getPrimaryPrincipal().equals("user1"));        subject.runAs(new SimplePrincipalCollection("user3", IniSecurityManagerFactory.INI_REALM_NAME));    assertTrue(subject.isRunAs());    assertEquals("user3", subject.getPrincipal());    assertTrue(subject.hasRole("role3"));    assertFalse(subject.hasRole("role1"));    assertFalse(subject.hasRole("role2"));        previous = subject.getPreviousPrincipals();    assertFalse(previous == null || previous.isEmpty());    assertTrue(previous.getPrimaryPrincipal().equals("user2"));        subject.releaseRunAs();        assertTrue(subject.isRunAs());    assertEquals("user2", subject.getPrincipal());    assertTrue(subject.hasRole("role2"));    assertFalse(subject.hasRole("role1"));    assertFalse(subject.hasRole("role3"));        previous = subject.getPreviousPrincipals();    assertFalse(previous == null || previous.isEmpty());    assertTrue(previous.getPrimaryPrincipal().equals("user1"));        subject.releaseRunAs();        assertFalse(subject.isRunAs());    assertEquals("user1", subject.getPrincipal());    assertTrue(subject.hasRole("role1"));    assertFalse(subject.hasRole("role2"));    assertFalse(subject.hasRole("role3"));        assertNull(subject.getPreviousPrincipals());    subject.logout();    LifecycleUtils.destroy(sm);}
4db138a977bfcfb08a80b3bfbfcdc4e12c2502ac8133570eefe33938895124cc
multiplePrincipalsTest
public void multiplePrincipalsTest()
{    SimplePrincipalCollection principalCollection = new SimplePrincipalCollection();    principalCollection.add("frank", "realm1");    principalCollection.add("johnny", "realm1");    principalCollection.add("Alberto", "realm2");    PrincipalCollection underTest = principalCollection;        System.out.println(principalCollection);}
2dc6f3d311e8ab2cd55c9b4a350ac0e32f903ea5c656dfbea99cafccb58c572c
setSubject
protected void setSubject(Subject subject)
{    clearSubject();    subjectThreadState = createThreadState(subject);    subjectThreadState.bind();}
500cdae0771f44e12e905471ad16b9b928667f19e77956836eb99281db53ebed
getSubject
protected Subject getSubject()
{    return SecurityUtils.getSubject();}
7c3e50057f5240dccea4e7fb9c9adfa4975a2b675d868c391236ae8579d932f0
createThreadState
protected ThreadState createThreadState(Subject subject)
{    return new SubjectThreadState(subject);}
6430df16ac5bc14896e5c5f23d9dc28fdc1d4246d3e0923334ff130d0d4286a5
clearSubject
protected void clearSubject()
{    doClearSubject();}
8e2b2397ac9463fc075a6f4efe492354fcc10336b303573a0bc63e6d73af3724
doClearSubject
private static void doClearSubject()
{    if (subjectThreadState != null) {        subjectThreadState.clear();        subjectThreadState = null;    }}
d085bca43613c803b6e89ab236faeecea19c4773f776d093b43b05a008ec0c9a
setSecurityManager
protected static void setSecurityManager(SecurityManager securityManager)
{    SecurityUtils.setSecurityManager(securityManager);}
d1318570a060018a3766a100319a7e46198d8b2287f9a631e76cb41ed98bcd96
getSecurityManager
protected static SecurityManager getSecurityManager()
{    return SecurityUtils.getSecurityManager();}
2845379d796ee885590fd5966dad0e704f42d7b8a11ce8c090f864ceb4311dc3
tearDownShiro
public static void tearDownShiro()
{    doClearSubject();    try {        SecurityManager securityManager = getSecurityManager();        LifecycleUtils.destroy(securityManager);    } catch (UnavailableSecurityManagerException e) {                }    setSecurityManager(null);}
5012e0fedb3488b2c8d8e4378645325d1b3105ccea61d9711140c2eb3e4a52d8
beforeClass
public static void beforeClass()
{                Factory<SecurityManager> factory = new IniSecurityManagerFactory("classpath:test.shiro.ini");    setSecurityManager(factory.getInstance());}
55a7f99ea12a874ee6b4e42c2e184f3b174a1b226664a015fd13d18771b5f34d
testSimple
public void testSimple()
{        Subject subjectUnderTest = new Subject.Builder(getSecurityManager()).buildSubject();        setSubject(subjectUnderTest);}
0752d251d71a1703329002a6531c1f01bab59cb711a4eba68eabdcaf3517d697
tearDownSubject
public void tearDownSubject()
{        clearSubject();}
55a7f99ea12a874ee6b4e42c2e184f3b174a1b226664a015fd13d18771b5f34d
testSimple
public void testSimple()
{            Subject subjectUnderTest = createNiceMock(Subject.class);    expect(subjectUnderTest.isAuthenticated()).andReturn(true);        setSubject(subjectUnderTest);}
0752d251d71a1703329002a6531c1f01bab59cb711a4eba68eabdcaf3517d697
tearDownSubject
public void tearDownSubject()
{        clearSubject();}
602e51a6798162366a49c7ab07ff7bdcbc7eb6233a8f7659ffa02257f1be97f3
createTestSecurityManager
protected static SecurityManager createTestSecurityManager()
{    Ini ini = new Ini();    ini.setSectionProperty("users", "test", "test");    return new DefaultSecurityManager(new IniRealm(ini));}
d88c1f2700613726daa6962b707a15ab0a3cd0bfda140eb4ddbfa8afa1cf7d02
destroy
protected void destroy(SecurityManager sm)
{    LifecycleUtils.destroy(sm);}
8e3ed676f00bf2fef1f3a66c3cb0c31d1ae1e4cba07bb6099bd554fbcccf0ddb
createAndBindTestSecurityManager
protected SecurityManager createAndBindTestSecurityManager()
{    SecurityManager sm = createTestSecurityManager();    ThreadContext.bind(sm);    return sm;}
b704ddd274995b014b9b19eecd95664373e7c18638db76f3c67ad7b36f1d9912
createAndBindTestSubject
protected Subject createAndBindTestSubject()
{    SecurityManager sm = ThreadContext.getSecurityManager();    if (sm == null) {        createAndBindTestSecurityManager();    }    return SecurityUtils.getSubject();}
5ff0b8f7d2b080bcc6214fa5f91be74727145ea81cacb63a99c8d0f3106c089f
setup
public void setup()
{    createAndBindTestSubject();}
ec8b6259c87a96a7e78ab8ec13a826f2caf0d2a1c593d4aec011e181f3e17bbf
teardown
public void teardown()
{    ThreadContext.remove();}
d2dd3929d455231c8d2d601fbabeff7ac632f6af7a339484e4a50526470e4b99
testSimplePattern
public void testSimplePattern()
{    PatternMatcher pm = new RegExPatternMatcher();    String pattern = "a*b";    String test = "aaaaaaab";        Pattern.compile(pattern);    assertTrue(pm.matches(pattern, test));}
71ab510a277a7b90b5857d61f874d793b1f0e1c75af506fc105e50911b606d21
splitWithNullInput
public void splitWithNullInput()
{    String line = null;    String[] split = StringUtils.split(line);    assertNull(split);}
d9e72a60619120893d9083079979bf1a56626942af13e8999338e611bc90acba
splitWithCommas
public void splitWithCommas()
{    String line = "shall,we,play,a,game?";    String[] split = StringUtils.split(line);    assertNotNull(split);    assertTrue(split.length == 5);    assertEquals("shall", split[0]);    assertEquals("we", split[1]);    assertEquals("play", split[2]);    assertEquals("a", split[3]);    assertEquals("game?", split[4]);}
a9295caa6be95e0c55f8e84af1c625d3bf106076637c700097d8d6aed0f73e65
splitWithCommasAndSpaces
public void splitWithCommasAndSpaces()
{    String line = "shall,we ,    play, a,game?";    String[] split = StringUtils.split(line);    assertNotNull(split);    assertTrue(split.length == 5);    assertEquals("shall", split[0]);    assertEquals("we", split[1]);    assertEquals("play", split[2]);    assertEquals("a", split[3]);    assertEquals("game?", split[4]);}
f7594e012947cd4d64261dd2040c29f04c17003c5290300cfa3ef5a0a56b8d43
splitWithQuotedCommasAndSpaces
public void splitWithQuotedCommasAndSpaces()
{    String line = "shall, \"we, play\", a, game?";    String[] split = StringUtils.split(line);    assertNotNull(split);    assertTrue(split.length == 4);    assertEquals("shall", split[0]);    assertEquals("we, play", split[1]);    assertEquals("a", split[2]);    assertEquals("game?", split[3]);}
e583c6dfb547baef90dc4938559c82de2a022906d28d0c62d371a5cd09b05251
splitWithQuotedCommasAndSpacesAndDifferentQuoteChars
public void splitWithQuotedCommasAndSpacesAndDifferentQuoteChars()
{    String line = "authc, test[blah], test[1,2,3], test[]";    String[] split = StringUtils.split(line, ',', '[', ']', false, true);    assertNotNull(split);    assertTrue(split.length == 4);    assertEquals("authc", split[0]);    assertEquals("testblah", split[1]);    assertEquals("test1,2,3", split[2]);    assertEquals("test", split[3]);}
79db5b9cabea620afb25535b1b5cc2a6b37677d2525dfc82b6058b315282c13a
splitWithQuotedCommasAndSpacesAndDifferentQuoteCharsWhileRetainingQuotes
public void splitWithQuotedCommasAndSpacesAndDifferentQuoteCharsWhileRetainingQuotes()
{    String line = "authc, test[blah], test[1,2,3], test[]";    String[] split = StringUtils.split(line, ',', '[', ']', true, true);    assertNotNull(split);    assertTrue(split.length == 4);    assertEquals("authc", split[0]);    assertEquals("test[blah]", split[1]);    assertEquals("test[1,2,3]", split[2]);    assertEquals("test[]", split[3]);}
9ea8f37e2ae675ba6610ca7433d8fcf4a6a40e885a35b775179fadbf4c920575
splitTestWithQuotedCommas
public void splitTestWithQuotedCommas()
{    String line = "authc, test[blah], test[\"1,2,3\"], test[]";    String[] split = StringUtils.split(line);    assertNotNull(split);    assertTrue(split.length == 4);    assertEquals("authc", split[0]);    assertEquals("test[blah]", split[1]);    assertEquals("test[1,2,3]", split[2]);    assertEquals("test[]", split[3]);}
913dac6bd1c9381cc64fd5ec5675304e89ccf7321515da86a227a83b8caadcb6
splitWithQuotedCommasAndSpacesAndEscapedQuotes
public void splitWithQuotedCommasAndSpacesAndEscapedQuotes()
{    String line = "shall, \"\"\"we, play\", a, \"\"\"game?";    String[] split = StringUtils.split(line);    assertNotNull(split);    assertTrue(split.length == 4);    assertEquals("shall", split[0]);    assertEquals("\"we, play", split[1]);    assertEquals("a", split[2]);    assertEquals("\"game?", split[3]);}
46fc8878164bd56948b93f4e4b8f71dab17560327cba4824fa550fc278ea2a50
generateNewKey
public Key generateNewKey()
{    return generateNewKey(getKeySize());}
b389a7089d94309e129c1f82d94faa12c39b9742c7115fccba0267cccf8b5aa3
generateNewKey
public Key generateNewKey(int keyBitSize)
{    KeyGenerator kg;    try {        kg = KeyGenerator.getInstance(getAlgorithmName());    } catch (NoSuchAlgorithmException e) {        String msg = "Unable to acquire " + getAlgorithmName() + " algorithm.  This is required to function.";        throw new IllegalStateException(msg, e);    }    kg.init(keyBitSize);    return kg.generateKey();}
ccc587eeead229691b452ca2814ec1a1f574b2e8d652dcd85cb8fc6f13ad3acc
getModeName
public String getModeName()
{    return modeName;}
26241547c1a1704c0e6c5958acee41dc672622d79a1c506ff94f7cf120f7cacc
setModeName
public void setModeName(String modeName)
{    this.modeName = modeName;        this.transformationString = null;}
fcea4c922c09dd882f436c197978324902e6ffcc1c27e4ed23e3679b076510cb
setMode
public void setMode(OperationMode mode)
{    setModeName(mode.name());}
acffdcafe544150faf08945c6525c3f0f491ac969aeee46e065e2b5773001f6e
getPaddingSchemeName
public String getPaddingSchemeName()
{    return paddingSchemeName;}
00e1bdbea04e8ee24b6092dfe292d1c65c266d0b79b7616e7e629bc397aa20e9
setPaddingSchemeName
public void setPaddingSchemeName(String paddingSchemeName)
{    this.paddingSchemeName = paddingSchemeName;        this.transformationString = null;}
5e7e9f162da9afdb00d342a376085d1a5102e8ca7c6d554a1dde6c694faaab1e
setPaddingScheme
public void setPaddingScheme(PaddingScheme paddingScheme)
{    setPaddingSchemeName(paddingScheme.getTransformationName());}
3476c2e9b8d443ecde4493ebe30034f70a1af257fc1f7b2692b835dc2e7a38d5
getBlockSize
public int getBlockSize()
{    return blockSize;}
5a3378e79e838960f2d199b8bc33db15c6bfee48334e0cf50a63fa67b6f7aa7c
setBlockSize
public void setBlockSize(int blockSize)
{    this.blockSize = Math.max(DEFAULT_BLOCK_SIZE, blockSize);        this.transformationString = null;}
d7629c4a62bb5cdf23958172b150ac0b4f257d69b84f9e04b1d55d6210510a9b
getStreamingModeName
public String getStreamingModeName()
{    return streamingModeName;}
d0b8b00f15ed7a5f6820498398f3108c844d2b06190101e8a2b2153c787644f2
isModeStreamingCompatible
private boolean isModeStreamingCompatible(String modeName)
{    return modeName != null && !modeName.equalsIgnoreCase(OperationMode.ECB.name()) && !modeName.equalsIgnoreCase(OperationMode.NONE.name());}
16cfb600f4be051ec937556872c058a3f90e0dcbed17fbd1d4fecc525cea4f0b
setStreamingModeName
public void setStreamingModeName(String streamingModeName)
{    if (!isModeStreamingCompatible(streamingModeName)) {        String msg = "mode [" + streamingModeName + "] is not a valid operation mode for block cipher streaming.";        throw new IllegalArgumentException(msg);    }    this.streamingModeName = streamingModeName;        this.streamingTransformationString = null;}
4fbb61d021c59692f6ed846d4f806d56fccbc4dff18acd2d3e571ef7da95f2cc
setStreamingMode
public void setStreamingMode(OperationMode mode)
{    setStreamingModeName(mode.name());}
d0297a5c723e43a8589f02c4d0bac2c43662dbe487ed0bc38f1f05f98666891c
getStreamingPaddingSchemeName
public String getStreamingPaddingSchemeName()
{    return streamingPaddingSchemeName;}
da3503d19e917f6593339dd9c7de4247643d2ad3635f2783f3e90d887305f11d
setStreamingPaddingSchemeName
public void setStreamingPaddingSchemeName(String streamingPaddingSchemeName)
{    this.streamingPaddingSchemeName = streamingPaddingSchemeName;        this.streamingTransformationString = null;}
2f97af35bb27bddfbe3a72ea708ec45c4d6a83b12ed2702594f3122c813b050d
setStreamingPaddingScheme
public void setStreamingPaddingScheme(PaddingScheme scheme)
{    setStreamingPaddingSchemeName(scheme.getTransformationName());}
e1fe8e8378595c6717df7c4a6d40179ee42bdcf286360d4fd1d8a3dc4b828b44
getStreamingBlockSize
public int getStreamingBlockSize()
{    return streamingBlockSize;}
dbf3a8b627212764060357af103a5cfc8ec063ef756d9da29ac89e1273df863c
setStreamingBlockSize
public void setStreamingBlockSize(int streamingBlockSize)
{    this.streamingBlockSize = Math.max(DEFAULT_BLOCK_SIZE, streamingBlockSize);        this.streamingTransformationString = null;}
8157595b0c6fbcabf3c7d94e40f555b7169c376fe29b7ba5932e4212f6e3cece
getTransformationString
protected String getTransformationString(boolean streaming)
{    if (streaming) {        if (this.streamingTransformationString == null) {            this.streamingTransformationString = buildStreamingTransformationString();        }        return this.streamingTransformationString;    } else {        if (this.transformationString == null) {            this.transformationString = buildTransformationString();        }        return this.transformationString;    }}
7334476e13db8be7eef080ab3a39c07abe8ab883e7f0c235f388d194093f2ffd
buildTransformationString
private String buildTransformationString()
{    return buildTransformationString(getModeName(), getPaddingSchemeName(), getBlockSize());}
8ff43936be4747f16612232e45e2780011f57031ec5f60a8baaa632cc8d71020
buildStreamingTransformationString
private String buildStreamingTransformationString()
{    return buildTransformationString(getStreamingModeName(), getStreamingPaddingSchemeName(), 0);}
f6b1383e288d9fab8e8135743b7e3026e7159f1e90b88630318e6dd4504ff939
buildTransformationString
private String buildTransformationString(String modeName, String paddingSchemeName, int blockSize)
{    StringBuilder sb = new StringBuilder(getAlgorithmName());    if (StringUtils.hasText(modeName)) {        sb.append(TRANSFORMATION_STRING_DELIMITER).append(modeName);    }    if (blockSize > 0) {        sb.append(blockSize);    }    if (StringUtils.hasText(paddingSchemeName)) {        sb.append(TRANSFORMATION_STRING_DELIMITER).append(paddingSchemeName);    }    return sb.toString();}
58c13596bf079087cb3e2910786bdb541164351667f83e32a1dc451ab4cfeaa5
isModeInitializationVectorCompatible
private boolean isModeInitializationVectorCompatible(String modeName)
{    return modeName != null && !modeName.equalsIgnoreCase(OperationMode.ECB.name()) && !modeName.equalsIgnoreCase(OperationMode.NONE.name());}
fc541d2b04f0d2da0f38a6ff471c81ff511069bc30fe0098bfe031c7895f3c52
isGenerateInitializationVectors
protected boolean isGenerateInitializationVectors(boolean streaming)
{    return streaming || super.isGenerateInitializationVectors() && isModeInitializationVectorCompatible(getModeName());}
a8936e2b8383edc62f3f4c90378116e6ce23be97efcb0e4482563b54da1b91e4
generateInitializationVector
protected byte[] generateInitializationVector(boolean streaming)
{    if (streaming) {        String streamingModeName = getStreamingModeName();        if (!isModeInitializationVectorCompatible(streamingModeName)) {            String msg = "streamingMode attribute value [" + streamingModeName + "] does not support " + "Initialization Vectors.  Ensure the streamingMode value represents an operation mode " + "that is compatible with initialization vectors.";            throw new IllegalStateException(msg);        }    } else {        String modeName = getModeName();        if (!isModeInitializationVectorCompatible(modeName)) {            String msg = "mode attribute value [" + modeName + "] does not support " + "Initialization Vectors.  Ensure the mode value represents an operation mode " + "that is compatible with initialization vectors.";            throw new IllegalStateException(msg);        }    }    return super.generateInitializationVector(streaming);}
15bfb58212eb363abc9d68971592833afc3575e0ebadddb4654a6c40b48abd94
getAlgorithmName
public String getAlgorithmName()
{    return algorithmName;}
a4e13543ebbfbaa096968fe60c0f4efd6ab6feed647e37da2f13890b0b26da89
getKeySize
public int getKeySize()
{    return keySize;}
3dd93bb3dbebba1d002177d7cb166eb3b6d7842ccd4f0cd7508cb88054633709
setKeySize
public void setKeySize(int keySize)
{    this.keySize = keySize;}
f549eee12ebd03c9022352f06c4ce52e0c36c6b86d15066d799fb01e07d27fe8
isGenerateInitializationVectors
public boolean isGenerateInitializationVectors()
{    return generateInitializationVectors;}
a58ff594080bb8aecf3e740f391ef01b5ffed6ad4d6793861c1c62d02a11893d
setGenerateInitializationVectors
public void setGenerateInitializationVectors(boolean generateInitializationVectors)
{    this.generateInitializationVectors = generateInitializationVectors;}
3aea672674c2db3b62cc42591072ba72da8ac8766ab2da44f21dbb906e63179f
getInitializationVectorSize
public int getInitializationVectorSize()
{    return initializationVectorSize;}
9226fdcd7710b86c346f21376dd40e6221cfe0734269bf404ce3282a34842080
setInitializationVectorSize
public void setInitializationVectorSize(int initializationVectorSize) throws IllegalArgumentException
{    if (initializationVectorSize % BITS_PER_BYTE != 0) {        String msg = "Initialization vector sizes are specified in bits, but must be a multiple of 8 so they " + "can be easily represented as a byte array.";        throw new IllegalArgumentException(msg);    }    this.initializationVectorSize = initializationVectorSize;}
fc541d2b04f0d2da0f38a6ff471c81ff511069bc30fe0098bfe031c7895f3c52
isGenerateInitializationVectors
protected boolean isGenerateInitializationVectors(boolean streaming)
{    return isGenerateInitializationVectors();}
9cffe10bfda57ef3e14b485c908edf1240d43b170ed583cc4e6b8de5c01bdac2
getStreamingBufferSize
public int getStreamingBufferSize()
{    return streamingBufferSize;}
7c7927292f5a4646efec7b8050f1c178656c04dfca20429dc0d6da60382f99b5
setStreamingBufferSize
public void setStreamingBufferSize(int streamingBufferSize)
{    this.streamingBufferSize = streamingBufferSize;}
3b5ff94917e11406906acf2082a8ffe85de061e1924930c73dc77f9faa4d7fc3
getSecureRandom
public SecureRandom getSecureRandom()
{    return secureRandom;}
bd4cb7f4c7bc42df8e3469e192e71b205a66f69ce6987f01c3537ed4e66842f3
setSecureRandom
public void setSecureRandom(SecureRandom secureRandom)
{    this.secureRandom = secureRandom;}
26e84f30ebb97bc096747b0845e84afa61bcf24ef417caacde44c9b34b5388fb
getDefaultSecureRandom
protected static SecureRandom getDefaultSecureRandom()
{    try {        return java.security.SecureRandom.getInstance(RANDOM_NUM_GENERATOR_ALGORITHM_NAME);    } catch (java.security.NoSuchAlgorithmException e) {        log.debug("The SecureRandom SHA1PRNG algorithm is not available on the current platform.  Using the " + "platform's default SecureRandom algorithm.", e);        return new java.security.SecureRandom();    }}
0ae6ecdb029656afb2d3bb8f41f7caf99f64e62b8d1a716b415de61a10ec870f
ensureSecureRandom
protected SecureRandom ensureSecureRandom()
{    SecureRandom random = getSecureRandom();    if (random == null) {        random = getDefaultSecureRandom();    }    return random;}
8157595b0c6fbcabf3c7d94e40f555b7169c376fe29b7ba5932e4212f6e3cece
getTransformationString
protected String getTransformationString(boolean streaming)
{    return getAlgorithmName();}
a8936e2b8383edc62f3f4c90378116e6ce23be97efcb0e4482563b54da1b91e4
generateInitializationVector
protected byte[] generateInitializationVector(boolean streaming)
{    int size = getInitializationVectorSize();    if (size <= 0) {        String msg = "initializationVectorSize property must be greater than zero.  This number is " + "typically set in the " + CipherService.class.getSimpleName() + " subclass constructor.  " + "Also check your configuration to ensure that if you are setting a value, it is positive.";        throw new IllegalStateException(msg);    }    if (size % BITS_PER_BYTE != 0) {        String msg = "initializationVectorSize property must be a multiple of 8 to represent as a byte array.";        throw new IllegalStateException(msg);    }    int sizeInBytes = size / BITS_PER_BYTE;    byte[] ivBytes = new byte[sizeInBytes];    SecureRandom random = ensureSecureRandom();    random.nextBytes(ivBytes);    return ivBytes;}
2f4665093317c79ae0e0d3b4cd8cc85e8bd3ac99beefa0310f08cc19663382ae
encrypt
public ByteSource encrypt(byte[] plaintext, byte[] key)
{    byte[] ivBytes = null;    boolean generate = isGenerateInitializationVectors(false);    if (generate) {        ivBytes = generateInitializationVector(false);        if (ivBytes == null || ivBytes.length == 0) {            throw new IllegalStateException("Initialization vector generation is enabled - generated vector" + "cannot be null or empty.");        }    }    return encrypt(plaintext, key, ivBytes, generate);}
e101dc8ffa21ec536e67a258cf5d4156d24a325ba96328b9014d1b3d4e9882c9
encrypt
private ByteSource encrypt(byte[] plaintext, byte[] key, byte[] iv, boolean prependIv) throws CryptoException
{    final int MODE = javax.crypto.Cipher.ENCRYPT_MODE;    byte[] output;    if (prependIv && iv != null && iv.length > 0) {        byte[] encrypted = crypt(plaintext, key, iv, MODE);        output = new byte[iv.length + encrypted.length];                        System.arraycopy(iv, 0, output, 0, iv.length);                System.arraycopy(encrypted, 0, output, iv.length, encrypted.length);    } else {        output = crypt(plaintext, key, iv, MODE);    }    if (log.isTraceEnabled()) {        log.trace("Incoming plaintext of size " + (plaintext != null ? plaintext.length : 0) + ".  Ciphertext " + "byte array is size " + (output != null ? output.length : 0));    }    return ByteSource.Util.bytes(output);}
7aaf8c346ac01079b9ca509daf7c04488dcbbea95906ffc9f1ef27823d4bfae3
decrypt
public ByteSource decrypt(byte[] ciphertext, byte[] key) throws CryptoException
{    byte[] encrypted = ciphertext;        byte[] iv = null;    if (isGenerateInitializationVectors(false)) {        try {                                                                                                int ivSize = getInitializationVectorSize();            int ivByteSize = ivSize / BITS_PER_BYTE;                        iv = new byte[ivByteSize];            System.arraycopy(ciphertext, 0, iv, 0, ivByteSize);                        int encryptedSize = ciphertext.length - ivByteSize;            encrypted = new byte[encryptedSize];            System.arraycopy(ciphertext, ivByteSize, encrypted, 0, encryptedSize);        } catch (Exception e) {            String msg = "Unable to correctly extract the Initialization Vector or ciphertext.";            throw new CryptoException(msg, e);        }    }    return decrypt(encrypted, key, iv);}
ea684a9eac0996f9144faa0526b80d83f52f1243a13ea60bdf3ab9d4c54f45c3
decrypt
private ByteSource decrypt(byte[] ciphertext, byte[] key, byte[] iv) throws CryptoException
{    if (log.isTraceEnabled()) {        log.trace("Attempting to decrypt incoming byte array of length " + (ciphertext != null ? ciphertext.length : 0));    }    byte[] decrypted = crypt(ciphertext, key, iv, javax.crypto.Cipher.DECRYPT_MODE);    return decrypted == null ? null : ByteSource.Util.bytes(decrypted);}
22edf26f00905da7f72c677a93d805ba2e83531fbd5b2d0555376e0d363b4c91
newCipherInstance
private javax.crypto.Cipher newCipherInstance(boolean streaming) throws CryptoException
{    String transformationString = getTransformationString(streaming);    try {        return javax.crypto.Cipher.getInstance(transformationString);    } catch (Exception e) {        String msg = "Unable to acquire a Java JCA Cipher instance using " + javax.crypto.Cipher.class.getName() + ".getInstance( \"" + transformationString + "\" ). " + getAlgorithmName() + " under this configuration is required for the " + getClass().getName() + " instance to function.";        throw new CryptoException(msg, e);    }}
4f59818ddfc371f447a978233577963eeeb99e90ba6f33a2dba81b2d1fdd6f38
crypt
private byte[] crypt(byte[] bytes, byte[] key, byte[] iv, int mode) throws IllegalArgumentException, CryptoException
{    if (key == null || key.length == 0) {        throw new IllegalArgumentException("key argument cannot be null or empty.");    }    javax.crypto.Cipher cipher = initNewCipher(mode, key, iv, false);    return crypt(cipher, bytes);}
fc5287418546f191f35b1cc87fe81d208b5971a1f90a5c6142144ab1f6d8e789
crypt
private byte[] crypt(javax.crypto.Cipher cipher, byte[] bytes) throws CryptoException
{    try {        return cipher.doFinal(bytes);    } catch (Exception e) {        String msg = "Unable to execute 'doFinal' with cipher instance [" + cipher + "].";        throw new CryptoException(msg, e);    }}
34c9cc313120557775f62932bfce338ab00ca0084b1dfe979066193f59e12ada
init
private void init(javax.crypto.Cipher cipher, int mode, java.security.Key key, AlgorithmParameterSpec spec, SecureRandom random) throws CryptoException
{    try {        if (random != null) {            if (spec != null) {                cipher.init(mode, key, spec, random);            } else {                cipher.init(mode, key, random);            }        } else {            if (spec != null) {                cipher.init(mode, key, spec);            } else {                cipher.init(mode, key);            }        }    } catch (Exception e) {        String msg = "Unable to init cipher instance.";        throw new CryptoException(msg, e);    }}
3d6941d66863fdecdcdec8c5194a61c649b7d1578192c3422cf44c32a00e94a0
encrypt
public void encrypt(InputStream in, OutputStream out, byte[] key) throws CryptoException
{    byte[] iv = null;    boolean generate = isGenerateInitializationVectors(true);    if (generate) {        iv = generateInitializationVector(true);        if (iv == null || iv.length == 0) {            throw new IllegalStateException("Initialization vector generation is enabled - generated vector" + "cannot be null or empty.");        }    }    encrypt(in, out, key, iv, generate);}
3bfdb658a4b78833f60f41c2a1fa932832cf1ea6747d6633166c14429dc02636
encrypt
private void encrypt(InputStream in, OutputStream out, byte[] key, byte[] iv, boolean prependIv) throws CryptoException
{    if (prependIv && iv != null && iv.length > 0) {        try {                        out.write(iv);        } catch (IOException e) {            throw new CryptoException(e);        }    }    crypt(in, out, key, iv, javax.crypto.Cipher.ENCRYPT_MODE);}
8b19045ebec11a0615c8a3d77a46fa9aae51484e2b9859349166ec624efe3f90
decrypt
public void decrypt(InputStream in, OutputStream out, byte[] key) throws CryptoException
{    decrypt(in, out, key, isGenerateInitializationVectors(true));}
3a3a6dac16cb2626f707b08feeca93024d6e8464ac3480173c798bc582f888bc
decrypt
private void decrypt(InputStream in, OutputStream out, byte[] key, boolean ivPrepended) throws CryptoException
{    byte[] iv = null;        if (ivPrepended) {                        int ivSize = getInitializationVectorSize();        int ivByteSize = ivSize / BITS_PER_BYTE;        iv = new byte[ivByteSize];        int read;        try {            read = in.read(iv);        } catch (IOException e) {            String msg = "Unable to correctly read the Initialization Vector from the input stream.";            throw new CryptoException(msg, e);        }        if (read != ivByteSize) {            throw new CryptoException("Unable to read initialization vector bytes from the InputStream.  " + "This is required when initialization vectors are autogenerated during an encryption " + "operation.");        }    }    decrypt(in, out, key, iv);}
0de8369a8924d746bea5a525166adaae6dcae516d610d5b409b120ca23da8067
decrypt
private void decrypt(InputStream in, OutputStream out, byte[] decryptionKey, byte[] iv) throws CryptoException
{    crypt(in, out, decryptionKey, iv, javax.crypto.Cipher.DECRYPT_MODE);}
43d02660d8f73f4fe41bf71b140f9020c7cb3aefbac9155bd76dd0b1f850c053
crypt
private void crypt(InputStream in, OutputStream out, byte[] keyBytes, byte[] iv, int cryptMode) throws CryptoException
{    if (in == null) {        throw new NullPointerException("InputStream argument cannot be null.");    }    if (out == null) {        throw new NullPointerException("OutputStream argument cannot be null.");    }    javax.crypto.Cipher cipher = initNewCipher(cryptMode, keyBytes, iv, true);    CipherInputStream cis = new CipherInputStream(in, cipher);    int bufSize = getStreamingBufferSize();    byte[] buffer = new byte[bufSize];    int bytesRead;    try {        while ((bytesRead = cis.read(buffer)) != -1) {            out.write(buffer, 0, bytesRead);        }    } catch (IOException e) {        throw new CryptoException(e);    }}
9322875cb9fad7e87df520ad68603b4e70cb2a849fa512bbc0eaed32dd15465c
initNewCipher
private javax.crypto.Cipher initNewCipher(int jcaCipherMode, byte[] key, byte[] iv, boolean streaming) throws CryptoException
{    javax.crypto.Cipher cipher = newCipherInstance(streaming);    java.security.Key jdkKey = new SecretKeySpec(key, getAlgorithmName());    IvParameterSpec ivSpec = null;    if (iv != null && iv.length > 0) {        ivSpec = new IvParameterSpec(iv);    }    init(cipher, jcaCipherMode, jdkKey, ivSpec, getSecureRandom());    return cipher;}
b1446c473bcd7ff5409f88fb6bfc59e1085e4763b75d667709858cd431b1cf92
getTransformationName
public String getTransformationName()
{    return this.transformationName;}
421c064733be993cf65eb600e9ab94ac2776ab6ac3481a52184dc3d394763598
setSeed
public void setSeed(byte[] bytes)
{    this.secureRandom.setSeed(bytes);}
3b5ff94917e11406906acf2082a8ffe85de061e1924930c73dc77f9faa4d7fc3
getSecureRandom
public SecureRandom getSecureRandom()
{    return secureRandom;}
aedd8d0319b922c68e1e0dc952920cfea37bd818dfe3e45d36aeb4651bb954c4
setSecureRandom
public void setSecureRandom(SecureRandom random) throws NullPointerException
{    if (random == null) {        throw new NullPointerException("SecureRandom argument cannot be null.");    }    this.secureRandom = random;}
8af5a0a30a7e5f2f3e15c984d2abb67204d3b86b5dc2148d81da64b7e0e19fd9
getDefaultNextBytesSize
public int getDefaultNextBytesSize()
{    return defaultNextBytesSize;}
a1875c818be70bec283c10eaedee97484835ea1d2436d86af36ab210b446ec8c
setDefaultNextBytesSize
public void setDefaultNextBytesSize(int defaultNextBytesSize) throws IllegalArgumentException
{    if (defaultNextBytesSize <= 0) {        throw new IllegalArgumentException("size value must be a positive integer (1 or larger)");    }    this.defaultNextBytesSize = defaultNextBytesSize;}
4c861fd901554005cd886692cd969f7a85332173473697354478089ddd8724e1
nextBytes
public ByteSource nextBytes()
{    return nextBytes(getDefaultNextBytesSize());}
ba128ab8df0c1fe6fc8d92ed01f2c424a42625c51037ce52227bd55ca4f94e9c
nextBytes
public ByteSource nextBytes(int numBytes)
{    if (numBytes <= 0) {        throw new IllegalArgumentException("numBytes argument must be a positive integer (1 or larger)");    }    byte[] bytes = new byte[numBytes];    this.secureRandom.nextBytes(bytes);    return ByteSource.Util.bytes(bytes);}
c159a0fb57e2ba9a7fb373b47eabbc552079ef89a4a50bbca7903b879542d25a
getBytes
public byte[] getBytes()
{    return this.bytes;}
b3a2134cd9f077a43aa2dda9df27847a9a8aa2bff0b2992e1c02a8aa738a321a
setBytes
public void setBytes(byte[] alreadyHashedBytes)
{    this.bytes = alreadyHashedBytes;    this.hexEncoded = null;    this.base64Encoded = null;}
e07ef6ab5167054fbb1eab9b74da0fb05e34a85a64a4b9dbe4687cc694cd020f
getDigest
protected MessageDigest getDigest(String algorithmName) throws UnknownAlgorithmException
{    try {        return MessageDigest.getInstance(algorithmName);    } catch (NoSuchAlgorithmException e) {        String msg = "No native '" + algorithmName + "' MessageDigest instance available on the current JVM.";        throw new UnknownAlgorithmException(msg, e);    }}
d84edd4c3f5373d89b28022d4c8faa4c5f2d602f57983e9c6acb605512972759
hash
protected byte[] hash(byte[] bytes)
{    return hash(bytes, null, 1);}
914afde1ab958c579328313324e7b95d33e10ce797baee602bebbbba6520c1cf
hash
protected byte[] hash(byte[] bytes, byte[] salt)
{    return hash(bytes, salt, 1);}
110c31ffb3baabe08aa118502372133ef6b9230121edd870007d5aeae22bec68
hash
protected byte[] hash(byte[] bytes, byte[] salt, int hashIterations) throws UnknownAlgorithmException
{    MessageDigest digest = getDigest(getAlgorithmName());    if (salt != null) {        digest.reset();        digest.update(salt);    }    byte[] hashed = digest.digest(bytes);        int iterations = hashIterations - 1;        for (int i = 0; i < iterations; i++) {        digest.reset();        hashed = digest.digest(hashed);    }    return hashed;}
638a6a49016c93f7c6dd13d8abe990a7f2ebc5753931c31d6f7bbb7162bf965c
toHex
public String toHex()
{    if (this.hexEncoded == null) {        this.hexEncoded = Hex.encodeToString(getBytes());    }    return this.hexEncoded;}
b3033425dfbf6c1c407d713cf675d17f333e3c7d89f3c9685e6d08923eca9172
toBase64
public String toBase64()
{    if (this.base64Encoded == null) {                this.base64Encoded = Base64.encodeToString(getBytes());    }    return this.base64Encoded;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return toHex();}
8d37d11c7ecfc0d0589696a89cb385888c83bd3e43ea0c95a3b4ae4ef78180ce
equals
public boolean equals(Object o)
{    if (o instanceof Hash) {        Hash other = (Hash) o;        return MessageDigest.isEqual(getBytes(), other.getBytes());    }    return false;}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    if (this.bytes == null || this.bytes.length == 0) {        return 0;    }    return Arrays.hashCode(this.bytes);}
65d5d741dad696c3dd6eec37decb647c8c6d1a53c4fc283f479db23ce4de94fe
printMainUsage
private static void printMainUsage(Class<? extends AbstractHash> clazz, String type)
{    System.out.println("Prints an " + type + " hash value.");    System.out.println("Usage: java " + clazz.getName() + " [-base64] [-salt <saltValue>] [-times <N>] <valueToHash>");    System.out.println("Options:");    System.out.println("\t-base64\t\tPrints the hash value as a base64 String instead of the default hex.");    System.out.println("\t-salt\t\tSalts the hash with the specified <saltValue>");    System.out.println("\t-times\t\tHashes the input <N> number of times");}
7fe8c3581d449cb15bcfca90e8a6c861bee66340a902c0a3aa6f2a5d2b1070b5
isReserved
private static boolean isReserved(String arg)
{    return "-base64".equals(arg) || "-times".equals(arg) || "-salt".equals(arg);}
a042e11ddd8b632804572219637c64e865fd362d6e7d1e47522af81acbd7afc7
doMain
 static int doMain(Class<? extends AbstractHash> clazz, String[] args)
{    String simple = clazz.getSimpleName();    int index = simple.indexOf("Hash");    String type = simple.substring(0, index).toUpperCase();    if (args == null || args.length < 1 || args.length > 7) {        printMainUsage(clazz, type);        return -1;    }    boolean hex = true;    String salt = null;    int times = 1;    String text = args[args.length - 1];    for (int i = 0; i < args.length; i++) {        String arg = args[i];        if (arg.equals("-base64")) {            hex = false;        } else if (arg.equals("-salt")) {            if ((i + 1) >= (args.length - 1)) {                String msg = "Salt argument must be followed by a salt value.  The final argument is " + "reserved for the value to hash.";                System.out.println(msg);                printMainUsage(clazz, type);                return -1;            }            salt = args[i + 1];        } else if (arg.equals("-times")) {            if ((i + 1) >= (args.length - 1)) {                String msg = "Times argument must be followed by an integer value.  The final argument is " + "reserved for the value to hash";                System.out.println(msg);                printMainUsage(clazz, type);                return -1;            }            try {                times = Integer.valueOf(args[i + 1]);            } catch (NumberFormatException e) {                String msg = "Times argument must be followed by an integer value.";                System.out.println(msg);                printMainUsage(clazz, type);                return -1;            }        }    }    Hash hash = new Md2Hash(text, salt, times);    String hashed = hex ? hash.toHex() : hash.toBase64();    System.out.print(hex ? "Hex: " : "Base64: ");    System.out.println(hashed);    return 0;}
715b81a7c8219e84a88695b3026b26c4c9ce4085b2de509958d60e00ce0e6f5b
computeHash
public Hash computeHash(HashRequest request)
{    if (request == null || request.getSource() == null || request.getSource().isEmpty()) {        return null;    }    String algorithmName = getAlgorithmName(request);    ByteSource source = request.getSource();    int iterations = getIterations(request);    ByteSource publicSalt = getPublicSalt(request);    ByteSource privateSalt = getPrivateSalt();    ByteSource salt = combine(privateSalt, publicSalt);    Hash computed = new SimpleHash(algorithmName, source, salt, iterations);    SimpleHash result = new SimpleHash(algorithmName);    result.setBytes(computed.getBytes());    result.setIterations(iterations);        result.setSalt(publicSalt);    return result;}
d4ae6387d4839ade0c98f5846f1ae95fa565cdb9bbdba8b9728fd473f5429449
getAlgorithmName
protected String getAlgorithmName(HashRequest request)
{    String name = request.getAlgorithmName();    if (name == null) {        name = getHashAlgorithmName();    }    return name;}
f195745f57da09050d1b8fce1a6462f5b3d50416a2b55254c6b681605fd6238e
getIterations
protected int getIterations(HashRequest request)
{    int iterations = Math.max(0, request.getIterations());    if (iterations < 1) {        iterations = Math.max(1, getHashIterations());    }    return iterations;}
432ad2bee9d2f93d79d2cad370809087cbbdeec99623190afca455eba0bebf11
getPublicSalt
protected ByteSource getPublicSalt(HashRequest request)
{    ByteSource publicSalt = request.getSalt();    if (publicSalt != null && !publicSalt.isEmpty()) {                return publicSalt;    }    publicSalt = null;        ByteSource privateSalt = getPrivateSalt();    boolean privateSaltExists = privateSalt != null && !privateSalt.isEmpty();        if (privateSaltExists || isGeneratePublicSalt()) {        publicSalt = getRandomNumberGenerator().nextBytes();    }    return publicSalt;}
7b7c472901f636cf963dd4483c433b6fb69fcd2ef141c75f9789898e349aebe7
combine
protected ByteSource combine(ByteSource privateSalt, ByteSource publicSalt)
{    byte[] privateSaltBytes = privateSalt != null ? privateSalt.getBytes() : null;    int privateSaltLength = privateSaltBytes != null ? privateSaltBytes.length : 0;    byte[] publicSaltBytes = publicSalt != null ? publicSalt.getBytes() : null;    int extraBytesLength = publicSaltBytes != null ? publicSaltBytes.length : 0;    int length = privateSaltLength + extraBytesLength;    if (length <= 0) {        return null;    }    byte[] combined = new byte[length];    int i = 0;    for (int j = 0; j < privateSaltLength; j++) {        assert privateSaltBytes != null;        combined[i++] = privateSaltBytes[j];    }    for (int j = 0; j < extraBytesLength; j++) {        assert publicSaltBytes != null;        combined[i++] = publicSaltBytes[j];    }    return ByteSource.Util.bytes(combined);}
ef59540193b063c834365724286edc673b6f8d60447ba0a549a8eb44e05241f6
setHashAlgorithmName
public void setHashAlgorithmName(String name)
{    this.algorithmName = name;}
932a2853ceccdf1b43e97a80d0007ccf17cf8677e43cc1f46eef408bb83b3f9c
getHashAlgorithmName
public String getHashAlgorithmName()
{    return this.algorithmName;}
58c9293cf1f7d839fa7fc3c446695d5358ab8a7b2a7f04b521780321aabcac36
setPrivateSalt
public void setPrivateSalt(ByteSource privateSalt)
{    this.privateSalt = privateSalt;}
705c5e71fa562a20846de2711c76ae262f88606a32eebe42705adc3f06a96a68
getPrivateSalt
public ByteSource getPrivateSalt()
{    return this.privateSalt;}
3b1a35529107ff9376a957d9e39655b1ce81347e92fe4736ed4c24b0d2cf76fd
setHashIterations
public void setHashIterations(int count)
{    this.iterations = count;}
8a08f0efa4359173e0813d60676ba02dcfe9d055c4739c33a6115f83a83c1037
getHashIterations
public int getHashIterations()
{    return this.iterations;}
1254311b032f7ec767120065d72243128806b8db7404a2bb70c5034ea5f9c005
setRandomNumberGenerator
public void setRandomNumberGenerator(RandomNumberGenerator rng)
{    this.rng = rng;}
506ddfcbfb55900f82de5e89c68ad7165bf8cdad42febb062dfaa69c343eade8
getRandomNumberGenerator
public RandomNumberGenerator getRandomNumberGenerator()
{    return this.rng;}
6aab1660bf73db59019ec92cc0a65dd4e25d245846136eb7e4c853df38567f75
isGeneratePublicSalt
public boolean isGeneratePublicSalt()
{    return generatePublicSalt;}
2330923faa65a6499301d5ae717911b92e00c8b2cb883e79229050659379d0b1
setGeneratePublicSalt
public void setGeneratePublicSalt(boolean generatePublicSalt)
{    this.generatePublicSalt = generatePublicSalt;}
be0b6e828f158e56de8674ef5ca6df9bbb160538c344ccdd598753c3eec3c556
format
public String format(Hash hash)
{    return hash != null ? hash.toBase64() : null;}
1bbad4311004401a9e1b0a40630a54fe8a926879d3a57afd9f1570460c0fecc2
getFormatClassNames
public Map<String, String> getFormatClassNames()
{    return formatClassNames;}
71963458ee1d8e595b916d153a13b5fc7a99642a4851f008617a85569e55f924
setFormatClassNames
public void setFormatClassNames(Map<String, String> formatClassNames)
{    this.formatClassNames = formatClassNames;}
a1058161f1cb1b7a56b6ba056e0178d43f05fa5289a353855842223d5a8a266d
getSearchPackages
public Set<String> getSearchPackages()
{    return searchPackages;}
a6fc39c04b0dff0be2dd7ef7062f38f7c6ab5c5f378fc1d45ef8c106e2c23527
setSearchPackages
public void setSearchPackages(Set<String> searchPackages)
{    this.searchPackages = searchPackages;}
41e9f70f6e733d8ec1daab41f39fa2640a33affff8a66df4457c58e14ed3fadf
getInstance
public HashFormat getInstance(String in)
{    if (in == null) {        return null;    }    HashFormat hashFormat = null;    Class clazz = null;        if (in.startsWith(ModularCryptFormat.TOKEN_DELIMITER)) {                        String test = in.substring(ModularCryptFormat.TOKEN_DELIMITER.length());        String[] tokens = test.split("\\" + ModularCryptFormat.TOKEN_DELIMITER);                String possibleMcfId = (tokens != null && tokens.length > 0) ? tokens[0] : null;        if (possibleMcfId != null) {                        clazz = getHashFormatClass(possibleMcfId);        }    }    if (clazz == null) {                clazz = getHashFormatClass(in);    }    if (clazz != null) {                hashFormat = newHashFormatInstance(clazz);    }    return hashFormat;}
302e419dbb262c6a0ec68393a748c6f1878c53091ba85ce4de8802d3a7f71dea
getHashFormatClass
protected Class getHashFormatClass(String token)
{    Class clazz = null;        if (this.formatClassNames != null) {        String value = this.formatClassNames.get(token);        if (value != null) {                        clazz = lookupHashFormatClass(value);        }    }        if (clazz == null) {        ProvidedHashFormat provided = ProvidedHashFormat.byId(token);        if (provided != null) {            clazz = provided.getHashFormatClass();        }    }    if (clazz == null) {                clazz = lookupHashFormatClass(token);    }    if (clazz == null) {                if (this.searchPackages != null) {            for (String packageName : this.searchPackages) {                clazz = getHashFormatClass(packageName, token);                if (clazz != null) {                                        break;                }            }        }    }    if (clazz != null) {        assertHashFormatImpl(clazz);    }    return clazz;}
19eed79584ce842c02c0ddb8dd6021d5585a180dc8c5568e5fb6be30a682b151
getHashFormatClass
protected Class getHashFormatClass(String packageName, String token)
{    String test = token;    Class clazz = null;    String pkg = packageName == null ? "" : packageName;        clazz = lookupHashFormatClass(test);    if (clazz == null) {        test = pkg + "." + token;        clazz = lookupHashFormatClass(test);    }    if (clazz == null) {        test = pkg + "." + StringUtils.uppercaseFirstChar(token) + "Format";        clazz = lookupHashFormatClass(test);    }    if (clazz == null) {        test = pkg + "." + token + "Format";        clazz = lookupHashFormatClass(test);    }    if (clazz == null) {        test = pkg + "." + StringUtils.uppercaseFirstChar(token) + "HashFormat";        clazz = lookupHashFormatClass(test);    }    if (clazz == null) {        test = pkg + "." + token + "HashFormat";        clazz = lookupHashFormatClass(test);    }    if (clazz == null) {        test = pkg + "." + StringUtils.uppercaseFirstChar(token) + "CryptFormat";        clazz = lookupHashFormatClass(test);    }    if (clazz == null) {        test = pkg + "." + token + "CryptFormat";        clazz = lookupHashFormatClass(test);    }    if (clazz == null) {                return null;    }    assertHashFormatImpl(clazz);    return clazz;}
24b28a128aa198897d1c8296bc35f9f1e52c5a730148078cb884d52b572e252c
lookupHashFormatClass
protected Class lookupHashFormatClass(String name)
{    try {        return ClassUtils.forName(name);    } catch (UnknownClassException ignored) {    }    return null;}
d9f85119b0afcc9a66763acba497ad5d485324b11cc591250aca92ac5355a6a1
assertHashFormatImpl
protected final void assertHashFormatImpl(Class clazz)
{    if (!HashFormat.class.isAssignableFrom(clazz) || clazz.isInterface()) {        throw new IllegalArgumentException("Discovered class [" + clazz.getName() + "] is not a " + HashFormat.class.getName() + " implementation.");    }}
78dd9fb5da0369a76404d45363ae0b8257df34c2a79563e798d480d106166f63
newHashFormatInstance
protected final HashFormat newHashFormatInstance(Class clazz)
{    assertHashFormatImpl(clazz);    return (HashFormat) ClassUtils.newInstance(clazz);}
be0b6e828f158e56de8674ef5ca6df9bbb160538c344ccdd598753c3eec3c556
format
public String format(Hash hash)
{    return hash != null ? hash.toHex() : null;}
c907326ef49766da9c6538341f925b8d267d1ffdc79ecc83e67fd4c9b773f502
getHashFormatClass
 Class<? extends HashFormat> getHashFormatClass()
{    return this.clazz;}
92d693c57f777fd39490a1f5dcbac8a23625d83e9dd041a17c777fd49da4894f
byId
public static ProvidedHashFormat byId(String id)
{    if (id == null) {        return null;    }    try {                return valueOf(id.toUpperCase(Locale.ENGLISH));    } catch (IllegalArgumentException ignored) {        return null;    }}
09e8f13a9a603d31d64bb498b77d15572483824d843d0e82a570643192f62186
getId
public String getId()
{    return ID;}
be0b6e828f158e56de8674ef5ca6df9bbb160538c344ccdd598753c3eec3c556
format
public String format(Hash hash)
{    if (hash == null) {        return null;    }    String algorithmName = hash.getAlgorithmName();    ByteSource salt = hash.getSalt();    int iterations = hash.getIterations();    StringBuilder sb = new StringBuilder(MCF_PREFIX).append(algorithmName).append(TOKEN_DELIMITER).append(iterations).append(TOKEN_DELIMITER);    if (salt != null) {        sb.append(salt.toBase64());    }    sb.append(TOKEN_DELIMITER);    sb.append(hash.toBase64());    return sb.toString();}
582e0c198afaf853e6de3b57a47b271344bb122cec392fcfe99b52a5a5266a60
parse
public Hash parse(String formatted)
{    if (formatted == null) {        return null;    }    if (!formatted.startsWith(MCF_PREFIX)) {                String msg = "The argument is not a valid '" + ID + "' formatted hash.";        throw new IllegalArgumentException(msg);    }    String suffix = formatted.substring(MCF_PREFIX.length());    String[] parts = suffix.split("\\$");        int i = parts.length - 1;    String digestBase64 = parts[i--];        String saltBase64 = parts[i--];    String iterationsString = parts[i--];    String algorithmName = parts[i];    byte[] digest = Base64.decode(digestBase64);    ByteSource salt = null;    if (StringUtils.hasLength(saltBase64)) {        byte[] saltBytes = Base64.decode(saltBase64);        salt = ByteSource.Util.bytes(saltBytes);    }    int iterations;    try {        iterations = Integer.parseInt(iterationsString);    } catch (NumberFormatException e) {        String msg = "Unable to parse formatted hash string: " + formatted;        throw new IllegalArgumentException(msg, e);    }    SimpleHash hash = new SimpleHash(algorithmName);    hash.setBytes(digest);    if (salt != null) {        hash.setSalt(salt);    }    hash.setIterations(iterations);    return hash;}
f71dfe75836872ce280ccf63633b68705f4449240c5e8c989c249674b7db0de0
setSource
public Builder setSource(ByteSource source)
{    this.source = source;    return this;}
28b281d94bfb2da5c4c6fb9e36e00712af10c57362806de7f8cb459296bbccf4
setSource
public Builder setSource(Object source) throws IllegalArgumentException
{    this.source = ByteSource.Util.bytes(source);    return this;}
04e36f0266158120014570e236be5fe1c36bf75a47dea1c65f074a99b07c199b
setSalt
public Builder setSalt(ByteSource salt)
{    this.salt = salt;    return this;}
769cbd65b7224a2b984139a4db8e1cc5e4fd9cfc2a2fc26443d18c469bee18bc
setSalt
public Builder setSalt(Object salt) throws IllegalArgumentException
{    this.salt = ByteSource.Util.bytes(salt);    return this;}
e636dcb079ea382842461ec0d814818efbf12debaa9568e1f5490d8c43443949
setIterations
public Builder setIterations(int iterations)
{    this.iterations = iterations;    return this;}
5b554b5af8024bdc0f8986c1f3a0802f553a1fc7e0e4e76c1166c6183a259ffd
setAlgorithmName
public Builder setAlgorithmName(String algorithmName)
{    this.algorithmName = algorithmName;    return this;}
d1ee190f857c36f41e247e9ae7f140b327bedaa1f916f7395af199f072159af4
build
public HashRequest build()
{    return new SimpleHashRequest(this.algorithmName, this.source, this.salt, this.iterations);}
bd7169944ae819c934c4a36599eb26c90a70c995caeed0e00127e9f4620b40b4
fromHexString
public static Md2Hash fromHexString(String hex)
{    Md2Hash hash = new Md2Hash();    hash.setBytes(Hex.decode(hex));    return hash;}
a587350097be6f4bebcc599ed251a81cd8d3b032cd76bd027c7cc1221754a415
fromBase64String
public static Md2Hash fromBase64String(String base64)
{    Md2Hash hash = new Md2Hash();    hash.setBytes(Base64.decode(base64));    return hash;}
43c74abea0c16516b28bf3150f9314e43746896114c052aa523b39ce5a7b6819
fromHexString
public static Md5Hash fromHexString(String hex)
{    Md5Hash hash = new Md5Hash();    hash.setBytes(Hex.decode(hex));    return hash;}
ecad0169479bea48469e0aa864bdc87ae1126075b352f2a46b11f697655cd0e9
fromBase64String
public static Md5Hash fromBase64String(String base64)
{    Md5Hash hash = new Md5Hash();    hash.setBytes(Base64.decode(base64));    return hash;}
e817a6181f72ed8cd22ed76ecf2a6ae6ca5ec8d582b5e3f909ae6fd0184a09ed
fromHexString
public static Sha1Hash fromHexString(String hex)
{    Sha1Hash hash = new Sha1Hash();    hash.setBytes(Hex.decode(hex));    return hash;}
07f4084bdab92d9d51c12c38761612fc62baca7ad074713a09c967edbb239e62
fromBase64String
public static Sha1Hash fromBase64String(String base64)
{    Sha1Hash hash = new Sha1Hash();    hash.setBytes(Base64.decode(base64));    return hash;}
c124ca269e2ceb77e34083cdd3648ca48ed15a3d4cf47ab17960dc18bd368f39
fromHexString
public static Sha256Hash fromHexString(String hex)
{    Sha256Hash hash = new Sha256Hash();    hash.setBytes(Hex.decode(hex));    return hash;}
26dc71fc699a6e3d2a0defb65b1b50ac9618e4defc5908e3c515cff62625107c
fromBase64String
public static Sha256Hash fromBase64String(String base64)
{    Sha256Hash hash = new Sha256Hash();    hash.setBytes(Base64.decode(base64));    return hash;}
9c755ce85db72e64624a1aa8547ac6652840aebdf478ddc69b0ac93fa75c6207
fromHexString
public static Sha384Hash fromHexString(String hex)
{    Sha384Hash hash = new Sha384Hash();    hash.setBytes(Hex.decode(hex));    return hash;}
53f64a0dda23011a623e0e187c0a0e205d643487e99986548c1a458b074893be
fromBase64String
public static Sha384Hash fromBase64String(String base64)
{    Sha384Hash hash = new Sha384Hash();    hash.setBytes(Base64.decode(base64));    return hash;}
d6f63b1eaaeb0b86a1d39e568b7772feca6bbc25305f1b363bc966bb3e1ba631
fromHexString
public static Sha512Hash fromHexString(String hex)
{    Sha512Hash hash = new Sha512Hash();    hash.setBytes(Hex.decode(hex));    return hash;}
01e3c486c15a0d43946c98e833bd05e717a78a815f09b907febc03d45fcb0d2a
fromBase64String
public static Sha512Hash fromBase64String(String base64)
{    Sha512Hash hash = new Sha512Hash();    hash.setBytes(Base64.decode(base64));    return hash;}
946eabf5f8d92c96135b6d8b7e2a9777922db9e92b3d79f601c3efc718d46d3f
convertSourceToBytes
protected ByteSource convertSourceToBytes(Object source)
{    return toByteSource(source);}
af95fe93ebb55f4507bdef564270c3f569412707dd2e6a24f50ec8c9caf8b2d6
convertSaltToBytes
protected ByteSource convertSaltToBytes(Object salt)
{    return toByteSource(salt);}
9ad00c8c10a9b3b8ecf9392bbe64eb02b1368bf0881ed03f9bc5654d8435387e
toByteSource
protected ByteSource toByteSource(Object o)
{    if (o == null) {        return null;    }    if (o instanceof ByteSource) {        return (ByteSource) o;    }    byte[] bytes = toBytes(o);    return ByteSource.Util.bytes(bytes);}
25188ad0053df8caca643ad0f1b5e76f7fc71c7a05c4ec5d9fbd7b1d913fd69a
hash
private void hash(ByteSource source, ByteSource salt, int hashIterations) throws CodecException, UnknownAlgorithmException
{    byte[] saltBytes = salt != null ? salt.getBytes() : null;    byte[] hashedBytes = hash(source.getBytes(), saltBytes, hashIterations);    setBytes(hashedBytes);}
15bfb58212eb363abc9d68971592833afc3575e0ebadddb4654a6c40b48abd94
getAlgorithmName
public String getAlgorithmName()
{    return this.algorithmName;}
7145c153577d2bd1676415ab21a22d8218d389836479fa83d79894605e37acdd
getSalt
public ByteSource getSalt()
{    return this.salt;}
c094dd2808b32821554c91c98d7ecc248df73b37096e6a8b942ce9f00e514198
getIterations
public int getIterations()
{    return this.iterations;}
c159a0fb57e2ba9a7fb373b47eabbc552079ef89a4a50bbca7903b879542d25a
getBytes
public byte[] getBytes()
{    return this.bytes;}
b3a2134cd9f077a43aa2dda9df27847a9a8aa2bff0b2992e1c02a8aa738a321a
setBytes
public void setBytes(byte[] alreadyHashedBytes)
{    this.bytes = alreadyHashedBytes;    this.hexEncoded = null;    this.base64Encoded = null;}
01291e2825ad7a568bbd2ff022f29779be73e9e16728fce024f6039efdc3aebf
setIterations
public void setIterations(int iterations)
{    this.iterations = Math.max(DEFAULT_ITERATIONS, iterations);}
63b998e7769a1c64babe28cbf4974c610c0a89233fc41144016aa61060a9fe14
setSalt
public void setSalt(ByteSource salt)
{    this.salt = salt;}
e07ef6ab5167054fbb1eab9b74da0fb05e34a85a64a4b9dbe4687cc694cd020f
getDigest
protected MessageDigest getDigest(String algorithmName) throws UnknownAlgorithmException
{    try {        return MessageDigest.getInstance(algorithmName);    } catch (NoSuchAlgorithmException e) {        String msg = "No native '" + algorithmName + "' MessageDigest instance available on the current JVM.";        throw new UnknownAlgorithmException(msg, e);    }}
b2919f4ba21083c4aa6ddf81128e2de5a094f5fcbdbc73803f22d09db1697d71
hash
protected byte[] hash(byte[] bytes) throws UnknownAlgorithmException
{    return hash(bytes, null, DEFAULT_ITERATIONS);}
2b3bb86841791042a584ec610f9a02ccf2e88f00a383d09a54ad97ed0f9489b4
hash
protected byte[] hash(byte[] bytes, byte[] salt) throws UnknownAlgorithmException
{    return hash(bytes, salt, DEFAULT_ITERATIONS);}
110c31ffb3baabe08aa118502372133ef6b9230121edd870007d5aeae22bec68
hash
protected byte[] hash(byte[] bytes, byte[] salt, int hashIterations) throws UnknownAlgorithmException
{    MessageDigest digest = getDigest(getAlgorithmName());    if (salt != null) {        digest.reset();        digest.update(salt);    }    byte[] hashed = digest.digest(bytes);        int iterations = hashIterations - 1;        for (int i = 0; i < iterations; i++) {        digest.reset();        hashed = digest.digest(hashed);    }    return hashed;}
803915e853382ad445a6e2333fabb8beb8e4acd70e908a0d818400f7baac42af
isEmpty
public boolean isEmpty()
{    return this.bytes == null || this.bytes.length == 0;}
638a6a49016c93f7c6dd13d8abe990a7f2ebc5753931c31d6f7bbb7162bf965c
toHex
public String toHex()
{    if (this.hexEncoded == null) {        this.hexEncoded = Hex.encodeToString(getBytes());    }    return this.hexEncoded;}
b3033425dfbf6c1c407d713cf675d17f333e3c7d89f3c9685e6d08923eca9172
toBase64
public String toBase64()
{    if (this.base64Encoded == null) {                this.base64Encoded = Base64.encodeToString(getBytes());    }    return this.base64Encoded;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return toHex();}
8d37d11c7ecfc0d0589696a89cb385888c83bd3e43ea0c95a3b4ae4ef78180ce
equals
public boolean equals(Object o)
{    if (o instanceof Hash) {        Hash other = (Hash) o;        return MessageDigest.isEqual(getBytes(), other.getBytes());    }    return false;}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    if (this.bytes == null || this.bytes.length == 0) {        return 0;    }    return Arrays.hashCode(this.bytes);}
77dd585bcc4ef18135104fd77ee44c30b2b3f80ea7becc998ffe6a3f5bc961c5
getSource
public ByteSource getSource()
{    return this.source;}
7145c153577d2bd1676415ab21a22d8218d389836479fa83d79894605e37acdd
getSalt
public ByteSource getSalt()
{    return this.salt;}
c094dd2808b32821554c91c98d7ecc248df73b37096e6a8b942ce9f00e514198
getIterations
public int getIterations()
{    return iterations;}
15bfb58212eb363abc9d68971592833afc3575e0ebadddb4654a6c40b48abd94
getAlgorithmName
public String getAlgorithmName()
{    return algorithmName;}
efd4f04d2f7438e26699863148fedf2a1756ec4f9ea70d9d64b80b1bdb63169b
getTimestamp
public long getTimestamp()
{    return this.timestamp;}
f9916f8d7a6d25550735bd1145345298411071b86ca7e465bf0c89250a3ea7ce
getEventListeners
public List<EventListener> getEventListeners(Object instance)
{    if (instance == null) {        return Collections.emptyList();    }    List<Method> methods = ClassUtils.getAnnotatedMethods(instance.getClass(), getAnnotationClass());    if (methods == null || methods.isEmpty()) {        return Collections.emptyList();    }    List<EventListener> listeners = new ArrayList<EventListener>(methods.size());    for (Method m : methods) {        listeners.add(new SingleArgumentMethodEventListener(instance, m));    }    return listeners;}
f7d0c9effe16c9fe33bf280543f201e6dbcb3abd3c8283182c63ec77aa235825
getAnnotationClass
public Class<? extends Annotation> getAnnotationClass()
{    return annotationClass;}
cf132e749dd360539a850ef738665dbe12d09d3975a064f8ed14f26ea22c2243
setAnnotationClass
public void setAnnotationClass(Class<? extends Annotation> annotationClass)
{    this.annotationClass = annotationClass;}
bd22f416dff1c0700b6251a05e3133c9de60d36470e6b62c3c02435d2ebc69c6
getEventListenerResolver
public EventListenerResolver getEventListenerResolver()
{    return eventListenerResolver;}
aa21b9fd5db307ab95106132e7f8fda80d449a5153143aa5babd4896213596cd
setEventListenerResolver
public void setEventListenerResolver(EventListenerResolver eventListenerResolver)
{    this.eventListenerResolver = eventListenerResolver;}
16df9dd997e6017d4492cfd8ef2f9637076871c1f0ec72872edd49ca606f5838
publish
public void publish(Object event)
{    if (event == null) {        log.info("Received null event for publishing.  Ignoring and returning.");        return;    }    registryReadLock.lock();    try {        for (Subscription subscription : this.registry.values()) {            subscription.onEvent(event);        }    } finally {        registryReadLock.unlock();    }}
8796d1de1b35481fc74cc97d4b23f4ab12531fc40409c453ae90a55a246269c2
register
public void register(Object instance)
{    if (instance == null) {        log.info("Received null instance for event listener registration.  Ignoring registration request.");        return;    }    unregister(instance);    List<EventListener> listeners = getEventListenerResolver().getEventListeners(instance);    if (listeners == null || listeners.isEmpty()) {        log.warn("Unable to resolve event listeners for subscriber instance [{}]. Ignoring registration request.", instance);        return;    }    Subscription subscription = new Subscription(listeners);    this.registryWriteLock.lock();    try {        this.registry.put(instance, subscription);    } finally {        this.registryWriteLock.unlock();    }}
845dfaa73513a81240f3b6f9388a33839c4e94468545ea0f1ba7305f9b44a4d5
unregister
public void unregister(Object instance)
{    if (instance == null) {        return;    }    this.registryWriteLock.lock();    try {        this.registry.remove(instance);    } finally {        this.registryWriteLock.unlock();    }}
e156fe8b0cd5a133e08b292f47b406c49137fcb95d9aef3e2e530e65a5e8a86e
onEvent
public void onEvent(Object event)
{    Set<Object> delivered = new HashSet<Object>();    for (EventListener listener : this.listeners) {        Object target = listener;        if (listener instanceof SingleArgumentMethodEventListener) {            SingleArgumentMethodEventListener singleArgListener = (SingleArgumentMethodEventListener) listener;            target = singleArgListener.getTarget();        }        if (listener.accepts(event) && !delivered.contains(target)) {            try {                listener.onEvent(event);            } catch (Throwable t) {                log.warn(EVENT_LISTENER_ERROR_MSG, t);            }            delivered.add(target);        }    }}
3187867ecd22f5fa02995e441ae9a7f31aaaf63ed628c2e2e5855fbec83b1c28
compare
public int compare(Class a, Class b)
{    if (a == null) {        if (b == null) {            return 0;        } else {            return -1;        }    } else if (b == null) {        return 1;    } else if (a == b || a.equals(b)) {        return 0;    } else {        if (a.isAssignableFrom(b)) {            return 1;        } else if (b.isAssignableFrom(a)) {            return -1;        } else {            return 0;        }    }}
6a0e4a80a893b29f0ab6b9058b22c1188694a8a961e5483266bead5174740c95
compare
public int compare(EventListener a, EventListener b)
{    if (a == null) {        if (b == null) {            return 0;        } else {            return -1;        }    } else if (b == null) {        return 1;    } else if (a == b || a.equals(b)) {        return 0;    } else {        if (a instanceof TypedEventListener) {            TypedEventListener ta = (TypedEventListener) a;            if (b instanceof TypedEventListener) {                TypedEventListener tb = (TypedEventListener) b;                return EVENT_CLASS_COMPARATOR.compare(ta.getEventType(), tb.getEventType());            } else {                                return -1;            }        } else {            if (b instanceof TypedEventListener) {                return 1;            } else {                return 0;            }        }    }}
e94828abca8138bd732ff3e539636c4f7a3b0bd0a9ed707dfeb4110c330ce934
getTarget
public Object getTarget()
{    return this.target;}
16e4501d146132f0d2fae26807b36220aec005795fc6efafb7f90440a4081abd
getMethod
public Method getMethod()
{    return this.method;}
331df09299fd01a97c4d4b5aceb1b0e375136f5a787e85d7017004af3f1eaf5c
assertPublicMethod
private void assertPublicMethod(Method method)
{    int modifiers = method.getModifiers();    if (!Modifier.isPublic(modifiers)) {        throw new IllegalArgumentException("Event handler method [" + method + "] must be public.");    }}
4e72079f02b04b1aa2bc7dc84dfc19dbd767e68ae66e5ed45d3bc37c2f322ae8
accepts
public boolean accepts(Object event)
{    return event != null && getEventType().isInstance(event);}
4314e57827f40bd60a764965d7bcfd72ff7639f761a0c7469f5155ddf68e3f32
getEventType
public Class getEventType()
{    return getMethodArgumentType(getMethod());}
e156fe8b0cd5a133e08b292f47b406c49137fcb95d9aef3e2e530e65a5e8a86e
onEvent
public void onEvent(Object event)
{    Method method = getMethod();    try {        method.invoke(getTarget(), event);    } catch (Exception e) {        throw new IllegalStateException("Unable to invoke event handler method [" + method + "].", e);    }}
df1d5f72e87951922cef9ef8adce0c5d484b6dfa71b5fc70689c8bf845b4074f
getMethodArgumentType
protected Class getMethodArgumentType(Method method)
{    Class[] paramTypes = method.getParameterTypes();    if (paramTypes.length != 1) {                String msg = "Event handler methods must accept a single argument.";        throw new IllegalArgumentException(msg);    }    return paramTypes[0];}
a7cea521ef38610ad8529f9333fcd977747c640fad62503f45b6d540bd683833
contextInitialized
public void contextInitialized(final ServletContextEvent servletContextEvent)
{    this.servletContext = servletContextEvent.getServletContext();    super.contextInitialized(servletContextEvent);}
b73e0544fd4fb842a6cd33cde47c3d50a0802e3f8054990efc1827a598f82997
getInjector
protected Injector getInjector()
{    return Guice.createInjector(new SampleShiroServletModule(servletContext), ShiroWebModule.guiceFilterModule());}
bbbd43b6cce2fa5a2b3c044c8caafdc61177a774bb08e12cd12d7e2bb3d03045
configureShiroWeb
protected void configureShiroWeb()
{    bindConstant().annotatedWith(Names.named("shiro.loginUrl")).to("/login.jsp");    try {        this.bindRealm().toConstructor(IniRealm.class.getConstructor(Ini.class));    } catch (NoSuchMethodException e) {        addError("Could not locate proper constructor for IniRealm.", e);    }    this.addFilterChain("/login.jsp", AUTHC);    this.addFilterChain("/logout", LOGOUT);    this.addFilterChain("/account/**", AUTHC);    this.addFilterChain("/remoting/**", AUTHC, config(ROLES, "b2bClient"), config(PERMS, "remote:invoke:lan,wan"));}
c94374792d4a2d666c14c70650c7cf7c3fcd2eacc7e05c5bace05a72e8a18b26
loadShiroIni
 Ini loadShiroIni() throws MalformedURLException
{    URL iniUrl = servletContext.getResource("/WEB-INF/shiro.ini");    return Ini.fromResourcePath("url:" + iniUrl.toExternalForm());}
0d654944e1aeddffedbffede17f039e95a2c0e3458417603d6761aa9aaa34ad6
bindWebSecurityManager
protected void bindWebSecurityManager(AnnotatedBindingBuilder<? super WebSecurityManager> bind)
{    try {        String cipherKey = loadShiroIni().getSectionProperty("main", "securityManager.rememberMeManager.cipherKey");        DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();        CookieRememberMeManager rememberMeManager = new CookieRememberMeManager();        rememberMeManager.setCipherKey(Base64.decode(cipherKey));        securityManager.setRememberMeManager(rememberMeManager);        bind.toInstance(securityManager);    } catch (MalformedURLException e) {                throw new ConfigurationException("securityManager.rememberMeManager.cipherKey must be set in shiro.ini.");    }}
80eec807d7a34dda0c413e19376f12098c10f88424e72f15bf56cc9c531c6562
logOut
public void logOut() throws IOException
{        final HtmlPage homePage = webClient.getPage(getBaseUri());    try {        homePage.getAnchorByHref("/logout").click();    } catch (ElementNotFoundException e) {        }}
d624f725389c68d9482e9ee788fa1fe8c7b46634031ec4a41ed7751687f829c4
logIn
public void logIn() throws FailingHttpStatusCodeException, MalformedURLException, IOException, InterruptedException
{    HtmlPage page = webClient.getPage(getBaseUri() + "login.jsp");    HtmlForm form = page.getFormByName("loginform");    form.<HtmlInput>getInputByName("username").setValueAttribute("root");    form.<HtmlInput>getInputByName("password").setValueAttribute("secret");    page = form.<HtmlInput>getInputByName("submit").click();        page.getAnchorByHref("/logout");}
e28941ac691283e5debef553d668a12458c7aa0d5da972f67c4580d965e80f7c
logInAndRememberMe
public void logInAndRememberMe() throws Exception
{    HtmlPage page = webClient.getPage(getBaseUri() + "login.jsp");    HtmlForm form = page.getFormByName("loginform");    form.<HtmlInput>getInputByName("username").setValueAttribute("root");    form.<HtmlInput>getInputByName("password").setValueAttribute("secret");    HtmlCheckBoxInput checkbox = form.getInputByName("rememberMe");    checkbox.setChecked(true);    page = form.<HtmlInput>getInputByName("submit").click();    jetty.stop();    jetty.start();    page = webClient.getPage(getBaseUri());        WebAssert.assertLinkPresentWithText(page, "Log out");    page = page.getAnchorByHref("/account").click();        WebAssert.assertFormPresent(page, "loginform");}
a7cea521ef38610ad8529f9333fcd977747c640fad62503f45b6d540bd683833
contextInitialized
public void contextInitialized(final ServletContextEvent servletContextEvent)
{    this.servletContext = servletContextEvent.getServletContext();    super.contextInitialized(servletContextEvent);}
b73e0544fd4fb842a6cd33cde47c3d50a0802e3f8054990efc1827a598f82997
getInjector
protected Injector getInjector()
{    return Guice.createInjector(new SampleShiroServletModule(servletContext), ShiroWebModule.guiceFilterModule());}
bbbd43b6cce2fa5a2b3c044c8caafdc61177a774bb08e12cd12d7e2bb3d03045
configureShiroWeb
protected void configureShiroWeb()
{    bindConstant().annotatedWith(Names.named("shiro.loginUrl")).to("/login.jsp");    try {        this.bindRealm().toConstructor(IniRealm.class.getConstructor(Ini.class));    } catch (NoSuchMethodException e) {        addError("Could not locate proper constructor for IniRealm.", e);    }    this.addFilterChain("/login.jsp", AUTHC);    this.addFilterChain("/logout", LOGOUT);    this.addFilterChain("/account/**", AUTHC);    this.addFilterChain("/remoting/**", filterConfig(AUTHC), filterConfig(ROLES, "b2bClient"), filterConfig(PERMS, "remote:invoke:lan,wan"));}
c94374792d4a2d666c14c70650c7cf7c3fcd2eacc7e05c5bace05a72e8a18b26
loadShiroIni
 Ini loadShiroIni() throws MalformedURLException
{    URL iniUrl = servletContext.getResource("/WEB-INF/shiro.ini");    return Ini.fromResourcePath("url:" + iniUrl.toExternalForm());}
0d654944e1aeddffedbffede17f039e95a2c0e3458417603d6761aa9aaa34ad6
bindWebSecurityManager
protected void bindWebSecurityManager(AnnotatedBindingBuilder<? super WebSecurityManager> bind)
{    try {        String cipherKey = loadShiroIni().getSectionProperty("main", "securityManager.rememberMeManager.cipherKey");        DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();        CookieRememberMeManager rememberMeManager = new CookieRememberMeManager();        rememberMeManager.setCipherKey(Base64.decode(cipherKey));        securityManager.setRememberMeManager(rememberMeManager);        bind.toInstance(securityManager);    } catch (MalformedURLException e) {                throw new ConfigurationException("securityManager.rememberMeManager.cipherKey must be set in shiro.ini.");    }}
80eec807d7a34dda0c413e19376f12098c10f88424e72f15bf56cc9c531c6562
logOut
public void logOut() throws IOException
{        final HtmlPage homePage = webClient.getPage(getBaseUri());    try {        homePage.getAnchorByHref("/logout").click();    } catch (ElementNotFoundException e) {        }}
d624f725389c68d9482e9ee788fa1fe8c7b46634031ec4a41ed7751687f829c4
logIn
public void logIn() throws FailingHttpStatusCodeException, MalformedURLException, IOException, InterruptedException
{    HtmlPage page = webClient.getPage(getBaseUri() + "login.jsp");    HtmlForm form = page.getFormByName("loginform");    form.<HtmlInput>getInputByName("username").setValueAttribute("root");    form.<HtmlInput>getInputByName("password").setValueAttribute("secret");    page = form.<HtmlInput>getInputByName("submit").click();        page.getAnchorByHref("/logout");}
e28941ac691283e5debef553d668a12458c7aa0d5da972f67c4580d965e80f7c
logInAndRememberMe
public void logInAndRememberMe() throws Exception
{    HtmlPage page = webClient.getPage(getBaseUri() + "login.jsp");    HtmlForm form = page.getFormByName("loginform");    form.<HtmlInput>getInputByName("username").setValueAttribute("root");    form.<HtmlInput>getInputByName("password").setValueAttribute("secret");    HtmlCheckBoxInput checkbox = form.getInputByName("rememberMe");    checkbox.setChecked(true);    page = form.<HtmlInput>getInputByName("submit").click();    jetty.stop();    jetty.start();    page = webClient.getPage(getBaseUri());        WebAssert.assertLinkPresentWithText(page, "Log out");    page = page.getAnchorByHref("/account").click();        WebAssert.assertFormPresent(page, "loginform");}
3aa1dc0cf15b86ed33bdc2118f05a86539b707b4657d7cdc1cff4624991467db
startContainer
public static void startContainer() throws Exception
{    EmbeddedJettyConfiguration config = EmbeddedJettyConfiguration.builder().withWebapp(getWarDir()).build();    jetty = new EmbeddedJetty(config) {        /**         * Overriding with contents of this pull request, to make fragment scanning work.         * https://github.com/mjeanroy/junit-servers/pull/3         */        protected WebAppContext createdWebAppContext() throws Exception {            final String path = configuration.getPath();            final String webapp = configuration.getWebapp();            final String classpath = configuration.getClasspath();            WebAppContext ctx = new WebAppContext();            ctx.setClassLoader(Thread.currentThread().getContextClassLoader());            ctx.setContextPath(path);                        ctx.setBaseResource(newResource(webapp));            ctx.setConfigurations(new Configuration[] { new WebInfConfiguration(), new WebXmlConfiguration(), new AnnotationConfiguration(), new JettyWebXmlConfiguration(), new MetaInfConfiguration(), new FragmentConfiguration() });            if (isNotBlank(classpath)) {                                                                                File classes = new File(classpath);                FileResource containerResources = new FileResource(classes.toURI());                ctx.getMetaData().addContainerResource(containerResources);            }            Server server = getDelegate();            ctx.setParentLoaderPriority(true);            ctx.setWar(webapp);            ctx.setServer(server);                        server.setHandler(ctx);            return ctx;        }    };    jetty.start();    assertTrue(jetty.isStarted());}
887344f558dd70591fafe6ef05c665fbacb552e12c3edcf64191739af8bda4d6
createdWebAppContext
protected WebAppContext createdWebAppContext() throws Exception
{    final String path = configuration.getPath();    final String webapp = configuration.getWebapp();    final String classpath = configuration.getClasspath();    WebAppContext ctx = new WebAppContext();    ctx.setClassLoader(Thread.currentThread().getContextClassLoader());    ctx.setContextPath(path);        ctx.setBaseResource(newResource(webapp));    ctx.setConfigurations(new Configuration[] { new WebInfConfiguration(), new WebXmlConfiguration(), new AnnotationConfiguration(), new JettyWebXmlConfiguration(), new MetaInfConfiguration(), new FragmentConfiguration() });    if (isNotBlank(classpath)) {                                        File classes = new File(classpath);        FileResource containerResources = new FileResource(classes.toURI());        ctx.getMetaData().addContainerResource(containerResources);    }    Server server = getDelegate();    ctx.setParentLoaderPriority(true);    ctx.setWar(webapp);    ctx.setServer(server);        server.setHandler(ctx);    return ctx;}
bea9f8e1222d0faf05fa94e232e1977dae89ab5bda61aa351923a06d51eb48ba
getBaseUri
protected static String getBaseUri()
{    return "http://localhost:" + jetty.getPort() + "/";}
71e9e102a12bee5d5037f88fa202a1e7a5b5c465d7d02a855746ba55a9522479
getWarDir
protected static String getWarDir()
{    File[] warFiles = new File("target").listFiles(new FilenameFilter() {        @Override        public boolean accept(File dir, String name) {            return name.endsWith(".war");        }    });    assertEquals("Expected only one war file in target directory, run 'mvn clean' and try again", 1, warFiles.length);    return warFiles[0].getAbsolutePath().replaceFirst("\\.war$", "");}
ca62bfdc0472b2de6468644412d9ad6b432937742edcb5ca65b1f23b694b5853
accept
public boolean accept(File dir, String name)
{    return name.endsWith(".war");}
069c33a6f07a83fce31ad7a2485421158860d44a8f1a7f0cc4d4c3bcbeb096ff
getBasicAuthorizationHeaderValue
protected static String getBasicAuthorizationHeaderValue(String username, String password) throws UnsupportedEncodingException
{    String authorizationHeader = username + ":" + password;    byte[] valueBytes;    valueBytes = authorizationHeader.getBytes("UTF-8");    authorizationHeader = new String(Base64.encode(valueBytes));    return "Basic " + authorizationHeader;}
02d8cac7a53a7520fb0db8708d6fb55d7ad32e664244c4e90f60de3219b805f8
beforeTest
public void beforeTest()
{    webClient.getOptions().setThrowExceptionOnFailingStatusCode(true);}
3950c5d18384154dd86f1aff65db696886bc71183b9d69b2d3155fe2d2d560b2
stopContainer
public static void stopContainer()
{    if (jetty != null) {        jetty.stop();    }}
3e0868b160e01c8a3d53a2784b3910fd1f30ad5cc7a7f421ddee4648c39b27fe
isBase64
private static boolean isBase64(byte octect)
{    if (octect == PAD) {        return true;    } else     if (octect < 0 || base64Alphabet[octect] == -1) {        return false;    } else {        return true;    }}
d38e46e9de7ecb0dbd7ae4a0554be9fe64583bc44afad58e7e730403666cbd19
isBase64
public static boolean isBase64(byte[] arrayOctect)
{    arrayOctect = discardWhitespace(arrayOctect);    int length = arrayOctect.length;    if (length == 0) {                return true;    }    for (int i = 0; i < length; i++) {        if (!isBase64(arrayOctect[i])) {            return false;        }    }    return true;}
2e878f9002ba07b6c93d8b5294f26e999173bf2770b6d5b53ebedee58d61ca90
discardWhitespace
 static byte[] discardWhitespace(byte[] data)
{    byte[] groomedData = new byte[data.length];    int bytesCopied = 0;    for (byte aByte : data) {        switch(aByte) {            case (byte) ' ':            case (byte) '\n':            case (byte) '\r':            case (byte) '\t':                break;            default:                groomedData[bytesCopied++] = aByte;        }    }    byte[] packedData = new byte[bytesCopied];    System.arraycopy(groomedData, 0, packedData, 0, bytesCopied);    return packedData;}
e0cbe8e78a788b3a560c51a825b62e9e3d162466611af04a8b39e6c1e92d3935
encodeToString
public static String encodeToString(byte[] bytes)
{    byte[] encoded = encode(bytes);    return CodecSupport.toString(encoded);}
66887ba420c2fe78c4dcd48a0d78fa6396cc128bf451c9641da7029098e64c4c
encodeChunked
public static byte[] encodeChunked(byte[] binaryData)
{    return encode(binaryData, true);}
29e6af27bc36e716b3674bc08da100816c41f8fbf3e27a0cea410c4ad84c4aa6
encode
public static byte[] encode(byte[] pArray)
{    return encode(pArray, false);}
b15a2324bad72820a944fed5dfeec0fec647614718602d42d5d4e3de7c30273e
encode
public static byte[] encode(byte[] binaryData, boolean isChunked)
{    long binaryDataLength = binaryData.length;    long lengthDataBits = binaryDataLength * EIGHTBIT;    long fewerThan24bits = lengthDataBits % TWENTYFOURBITGROUP;    long tripletCount = lengthDataBits / TWENTYFOURBITGROUP;    long encodedDataLengthLong;    int chunckCount = 0;    if (fewerThan24bits != 0) {                encodedDataLengthLong = (tripletCount + 1) * 4;    } else {                encodedDataLengthLong = tripletCount * 4;    }        if (isChunked) {        chunckCount = (CHUNK_SEPARATOR.length == 0 ? 0 : (int) Math.ceil((float) encodedDataLengthLong / CHUNK_SIZE));        encodedDataLengthLong += chunckCount * CHUNK_SEPARATOR.length;    }    if (encodedDataLengthLong > Integer.MAX_VALUE) {        throw new IllegalArgumentException("Input array too big, output array would be bigger than Integer.MAX_VALUE=" + Integer.MAX_VALUE);    }    int encodedDataLength = (int) encodedDataLengthLong;    byte[] encodedData = new byte[encodedDataLength];    byte k, l, b1, b2, b3;    int encodedIndex = 0;    int dataIndex;    int i;    int nextSeparatorIndex = CHUNK_SIZE;    int chunksSoFar = 0;        for (i = 0; i < tripletCount; i++) {        dataIndex = i * 3;        b1 = binaryData[dataIndex];        b2 = binaryData[dataIndex + 1];        b3 = binaryData[dataIndex + 2];                l = (byte) (b2 & 0x0f);        k = (byte) (b1 & 0x03);        byte val1 = ((b1 & SIGN) == 0) ? (byte) (b1 >> 2) : (byte) ((b1) >> 2 ^ 0xc0);        byte val2 = ((b2 & SIGN) == 0) ? (byte) (b2 >> 4) : (byte) ((b2) >> 4 ^ 0xf0);        byte val3 = ((b3 & SIGN) == 0) ? (byte) (b3 >> 6) : (byte) ((b3) >> 6 ^ 0xfc);        encodedData[encodedIndex] = lookUpBase64Alphabet[val1];                                encodedData[encodedIndex + 1] = lookUpBase64Alphabet[val2 | (k << 4)];        encodedData[encodedIndex + 2] = lookUpBase64Alphabet[(l << 2) | val3];        encodedData[encodedIndex + 3] = lookUpBase64Alphabet[b3 & 0x3f];        encodedIndex += 4;                if (isChunked) {                        if (encodedIndex == nextSeparatorIndex) {                System.arraycopy(CHUNK_SEPARATOR, 0, encodedData, encodedIndex, CHUNK_SEPARATOR.length);                chunksSoFar++;                nextSeparatorIndex = (CHUNK_SIZE * (chunksSoFar + 1)) + (chunksSoFar * CHUNK_SEPARATOR.length);                encodedIndex += CHUNK_SEPARATOR.length;            }        }    }        dataIndex = i * 3;    if (fewerThan24bits == EIGHTBIT) {        b1 = binaryData[dataIndex];        k = (byte) (b1 & 0x03);                        byte val1 = ((b1 & SIGN) == 0) ? (byte) (b1 >> 2) : (byte) ((b1) >> 2 ^ 0xc0);        encodedData[encodedIndex] = lookUpBase64Alphabet[val1];        encodedData[encodedIndex + 1] = lookUpBase64Alphabet[k << 4];        encodedData[encodedIndex + 2] = PAD;        encodedData[encodedIndex + 3] = PAD;    } else if (fewerThan24bits == SIXTEENBIT) {        b1 = binaryData[dataIndex];        b2 = binaryData[dataIndex + 1];        l = (byte) (b2 & 0x0f);        k = (byte) (b1 & 0x03);        byte val1 = ((b1 & SIGN) == 0) ? (byte) (b1 >> 2) : (byte) ((b1) >> 2 ^ 0xc0);        byte val2 = ((b2 & SIGN) == 0) ? (byte) (b2 >> 4) : (byte) ((b2) >> 4 ^ 0xf0);        encodedData[encodedIndex] = lookUpBase64Alphabet[val1];        encodedData[encodedIndex + 1] = lookUpBase64Alphabet[val2 | (k << 4)];        encodedData[encodedIndex + 2] = lookUpBase64Alphabet[l << 2];        encodedData[encodedIndex + 3] = PAD;    }    if (isChunked) {                if (chunksSoFar < chunckCount) {            System.arraycopy(CHUNK_SEPARATOR, 0, encodedData, encodedDataLength - CHUNK_SEPARATOR.length, CHUNK_SEPARATOR.length);        }    }    return encodedData;}
c8985f6951d141a506c3fbe9100b32cd576955600d4bdbbf3cb11720c9a27b8b
decodeToString
public static String decodeToString(String base64Encoded)
{    byte[] encodedBytes = CodecSupport.toBytes(base64Encoded);    return decodeToString(encodedBytes);}
4e5aabb5fd0bfbeb2681e5c8df3833addf54239f26a81253ea4a8cbc1c571f1a
decodeToString
public static String decodeToString(byte[] base64Encoded)
{    byte[] decoded = decode(base64Encoded);    return CodecSupport.toString(decoded);}
0b6931e0ab03434a910d59397e060675bec8c658546df6118767b264b8d16ca8
decode
public static byte[] decode(String base64Encoded)
{    byte[] bytes = CodecSupport.toBytes(base64Encoded);    return decode(bytes);}
1880ead146721870c86df7ec7c18ccbec6ec262202ef79c1e8c87348dc6b3285
decode
public static byte[] decode(byte[] base64Data)
{        base64Data = discardNonBase64(base64Data);        if (base64Data.length == 0) {        return new byte[0];    }    int numberQuadruple = base64Data.length / FOURBYTE;    byte[] decodedData;    byte b1, b2, b3, b4, marker0, marker1;        int encodedIndex = 0;    int dataIndex;    {                int lastData = base64Data.length;                while (base64Data[lastData - 1] == PAD) {            if (--lastData == 0) {                return new byte[0];            }        }        decodedData = new byte[lastData - numberQuadruple];    }    for (int i = 0; i < numberQuadruple; i++) {        dataIndex = i * 4;        marker0 = base64Data[dataIndex + 2];        marker1 = base64Data[dataIndex + 3];        b1 = base64Alphabet[base64Data[dataIndex]];        b2 = base64Alphabet[base64Data[dataIndex + 1]];        if (marker0 != PAD && marker1 != PAD) {                        b3 = base64Alphabet[marker0];            b4 = base64Alphabet[marker1];            decodedData[encodedIndex] = (byte) (b1 << 2 | b2 >> 4);            decodedData[encodedIndex + 1] = (byte) (((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));            decodedData[encodedIndex + 2] = (byte) (b3 << 6 | b4);        } else if (marker0 == PAD) {                        decodedData[encodedIndex] = (byte) (b1 << 2 | b2 >> 4);        } else {                        b3 = base64Alphabet[marker0];            decodedData[encodedIndex] = (byte) (b1 << 2 | b2 >> 4);            decodedData[encodedIndex + 1] = (byte) (((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));        }        encodedIndex += 3;    }    return decodedData;}
197ed81d853050b111df9ca14053d2c59730fb59bec86d62e374cb9693ba0530
discardNonBase64
 static byte[] discardNonBase64(byte[] data)
{    byte[] groomedData = new byte[data.length];    int bytesCopied = 0;    for (byte aByte : data) {        if (isBase64(aByte)) {            groomedData[bytesCopied++] = aByte;        }    }    byte[] packedData = new byte[bytesCopied];    System.arraycopy(groomedData, 0, packedData, 0, bytesCopied);    return packedData;}
459ae5122167fa731c57b68742e62fe291b35ca550fa262a2a31a717dc5a3060
toBytes
public static byte[] toBytes(char[] chars)
{    return toBytes(new String(chars), PREFERRED_ENCODING);}
63e73d1ef39ec43a07197d5c83222bf7335971676ba9266c0bb2028b352e0eb0
toBytes
public static byte[] toBytes(char[] chars, String encoding) throws CodecException
{    return toBytes(new String(chars), encoding);}
a32edf4a2f8bb16b8ab67a37a0993284bff14dce828b12455cb5b12651cebdd3
toBytes
public static byte[] toBytes(String source)
{    return toBytes(source, PREFERRED_ENCODING);}
a27d997af9d7e6d3c959c18db366f40b2fbc6e474c1f4dbfdc4478c4fd073ef9
toBytes
public static byte[] toBytes(String source, String encoding) throws CodecException
{    try {        return source.getBytes(encoding);    } catch (UnsupportedEncodingException e) {        String msg = "Unable to convert source [" + source + "] to byte array using " + "encoding '" + encoding + "'";        throw new CodecException(msg, e);    }}
3674a11004995ef53613a451f45a1b7adb0f24bda0f6656c0e9e19cd1d1c03f1
toString
public static String toString(byte[] bytes)
{    return toString(bytes, PREFERRED_ENCODING);}
fea1437367e6f55c274592b266b13f4f78ee33b0c099f7e4e5a3198306e87ed9
toString
public static String toString(byte[] bytes, String encoding) throws CodecException
{    try {        return new String(bytes, encoding);    } catch (UnsupportedEncodingException e) {        String msg = "Unable to convert byte array to String with encoding '" + encoding + "'.";        throw new CodecException(msg, e);    }}
f572f43df167a29defecf06cbf48a02b8cf4867e785a146b67282543d2b1b07d
toChars
public static char[] toChars(byte[] bytes)
{    return toChars(bytes, PREFERRED_ENCODING);}
b5fc4dbf6007e32af4311161b31f4c0f1a8bfbcb3cf6740af79caf6b63cb4951
toChars
public static char[] toChars(byte[] bytes, String encoding) throws CodecException
{    return toString(bytes, encoding).toCharArray();}
683f246d92a663865517ead46cbea5111694ac304001ba7a080e2893b3d35c9a
isByteSource
protected boolean isByteSource(Object o)
{    return o instanceof byte[] || o instanceof char[] || o instanceof String || o instanceof ByteSource || o instanceof File || o instanceof InputStream;}
f16304706b91920efe375d50e27013e12d846855baeb2944a1e16c1762bf03c5
toBytes
protected byte[] toBytes(Object o)
{    if (o == null) {        String msg = "Argument for byte conversion cannot be null.";        throw new IllegalArgumentException(msg);    }    if (o instanceof byte[]) {        return (byte[]) o;    } else if (o instanceof ByteSource) {        return ((ByteSource) o).getBytes();    } else if (o instanceof char[]) {        return toBytes((char[]) o);    } else if (o instanceof String) {        return toBytes((String) o);    } else if (o instanceof File) {        return toBytes((File) o);    } else if (o instanceof InputStream) {        return toBytes((InputStream) o);    } else {        return objectToBytes(o);    }}
f01963c2e30bc5e8c4b7a8a0278ffe3f8a112ebbb4f46a9e4ab6a2169c0fb443
toString
protected String toString(Object o)
{    if (o == null) {        String msg = "Argument for String conversion cannot be null.";        throw new IllegalArgumentException(msg);    }    if (o instanceof byte[]) {        return toString((byte[]) o);    } else if (o instanceof char[]) {        return new String((char[]) o);    } else if (o instanceof String) {        return (String) o;    } else {        return objectToString(o);    }}
0c9e22ca4ae26cef3e38ff3393c8046fb40c276f16f63cb3294622740a06d6b5
toBytes
protected byte[] toBytes(File file)
{    if (file == null) {        throw new IllegalArgumentException("File argument cannot be null.");    }    try {        return toBytes(new FileInputStream(file));    } catch (FileNotFoundException e) {        String msg = "Unable to acquire InputStream for file [" + file + "]";        throw new CodecException(msg, e);    }}
df6e2c6face8f5dd9dc76b3c024c540fb8130d5f7896a1552b076094c4a25e69
toBytes
protected byte[] toBytes(InputStream in)
{    if (in == null) {        throw new IllegalArgumentException("InputStream argument cannot be null.");    }    final int BUFFER_SIZE = 512;    ByteArrayOutputStream out = new ByteArrayOutputStream(BUFFER_SIZE);    byte[] buffer = new byte[BUFFER_SIZE];    int bytesRead;    try {        while ((bytesRead = in.read(buffer)) != -1) {            out.write(buffer, 0, bytesRead);        }        return out.toByteArray();    } catch (IOException ioe) {        throw new CodecException(ioe);    } finally {        try {            in.close();        } catch (IOException ignored) {        }        try {            out.close();        } catch (IOException ignored) {        }    }}
53e69338c177112e56cfe24aed315e21ace697effb4f349aca1f9e3492c8c19c
objectToBytes
protected byte[] objectToBytes(Object o)
{    String msg = "The " + getClass().getName() + " implementation only supports conversion to " + "byte[] if the source is of type byte[], char[], String, " + ByteSource.class.getName() + " File or InputStream.  The instance provided as a method " + "argument is of type [" + o.getClass().getName() + "].  If you would like to convert " + "this argument type to a byte[], you can 1) convert the argument to one of the supported types " + "yourself and then use that as the method argument or 2) subclass " + getClass().getName() + "and override the objectToBytes(Object o) method.";    throw new CodecException(msg);}
243a2db327fd8cd30b66e3eb423c77f219ec2711be35c10af082356d3a58fb31
objectToString
protected String objectToString(Object o)
{    return o.toString();}
a187d1d74f1b26bbd1c4592b82f92d1187970c3498437ffa6c970088ea1e7aa6
toShort
private static short toShort(byte b)
{    return (short) (b & 0xff);}
6554d2ab0a9bd8eb7fb8fc67b79d8787383276d5af69b48f612e14c533fbacfc
toInt
private static int toInt(byte[] bytes, int offset, int numBytes)
{    if (numBytes < 1 || numBytes > 4) {        throw new IllegalArgumentException("numBytes must be between 1 and 4.");    }        int val = toShort(bytes[offset]);    for (int i = 1; i < numBytes; i++) {                short s = toShort(bytes[offset + i]);        switch(i) {            case 1:                val |= s << 8;                break;            case 2:                val |= s << 16;                break;            case 3:                val |= s << 24;                break;        }    }    return val;}
974d9e5933522b3ab6034e6801fd70eb1d321b0254f8a88b50b2864295bfb33b
append
private static void append(Appendable buf, char c)
{    try {        buf.append(c);    } catch (IOException e) {        throw new IllegalStateException("Unable to append character to internal buffer.", e);    }}
6174bf00c614343ce9872dc80828165b7fd6b3b359c03a275f40116d45cdf462
encodeAndAppend
private static void encodeAndAppend(int value, Appendable buf, int numChars)
{    for (int i = 0; i < numChars; i++) {        append(buf, itoa64[value & 0x3f]);        value >>= 6;    }}
e0cbe8e78a788b3a560c51a825b62e9e3d162466611af04a8b39e6c1e92d3935
encodeToString
public static String encodeToString(byte[] bytes)
{    if (bytes == null || bytes.length == 0)        return null;    StringBuilder buf = new StringBuilder();    int length = bytes.length;    int remainder = length % 3;        int i = 0;        int last3ByteIndex = length - remainder;    for (; i < last3ByteIndex; i += 3) {        int twentyFourBit = toInt(bytes, i, 3);        encodeAndAppend(twentyFourBit, buf, 4);    }    if (remainder > 0) {                int a = toInt(bytes, i, remainder);        encodeAndAppend(a, buf, remainder + 1);    }    return buf.toString();}
e0cbe8e78a788b3a560c51a825b62e9e3d162466611af04a8b39e6c1e92d3935
encodeToString
public static String encodeToString(byte[] bytes)
{    char[] encodedChars = encode(bytes);    return new String(encodedChars);}
579ba9ed3f8534e44a5badfb2a37436c0eb46234d06ace832a0f13d3c306022e
encode
public static char[] encode(byte[] data)
{    int l = data.length;    char[] out = new char[l << 1];        for (int i = 0, j = 0; i < l; i++) {        out[j++] = DIGITS[(0xF0 & data[i]) >>> 4];        out[j++] = DIGITS[0x0F & data[i]];    }    return out;}
422fd11cd9d8447e7a38068a1dc6f96e19284721f57bb77d1f008eb421e3f312
decode
public static byte[] decode(byte[] array) throws IllegalArgumentException
{    String s = CodecSupport.toString(array);    return decode(s);}
9b7305a7e01d5d65dcc4b485bca6fcbcc644731015e506a47a864afdc8ce7609
decode
public static byte[] decode(String hex)
{    return decode(hex.toCharArray());}
960b45bf77acfed8a88445a13e0b8a631dfeecfb13f7039c01f84afe14600041
decode
public static byte[] decode(char[] data) throws IllegalArgumentException
{    int len = data.length;    if ((len & 0x01) != 0) {        throw new IllegalArgumentException("Odd number of characters.");    }    byte[] out = new byte[len >> 1];        for (int i = 0, j = 0; j < len; i++) {        int f = toDigit(data[j], j) << 4;        j++;        f = f | toDigit(data[j], j);        j++;        out[i] = (byte) (f & 0xFF);    }    return out;}
f919123da6e98c56ed9285f5a54765df3ea4fb39d80a0a7d6c06d8599c33cf67
toDigit
protected static int toDigit(char ch, int index) throws IllegalArgumentException
{    int digit = Character.digit(ch, 16);    if (digit == -1) {        throw new IllegalArgumentException("Illegal hexadecimal character " + ch + " at index " + index);    }    return digit;}
9d24171f7372276227d534fc7fd793d2a824b8af7c858fcf4b957b1697903768
resolveClass
protected Class<?> resolveClass(ObjectStreamClass osc) throws IOException, ClassNotFoundException
{    try {        return ClassUtils.forName(osc.getName());    } catch (UnknownClassException e) {        throw new ClassNotFoundException("Unable to load ObjectStreamClass [" + osc + "]: ", e);    }}
67c3c820e431f73d9b8ee0eee3eb735bd43d8272e59b7610725158266a54f2b3
serialize
public byte[] serialize(T o) throws SerializationException
{    if (o == null) {        String msg = "argument cannot be null.";        throw new IllegalArgumentException(msg);    }    ByteArrayOutputStream baos = new ByteArrayOutputStream();    BufferedOutputStream bos = new BufferedOutputStream(baos);    try {        ObjectOutputStream oos = new ObjectOutputStream(bos);        oos.writeObject(o);        oos.close();        return baos.toByteArray();    } catch (IOException e) {        String msg = "Unable to serialize object [" + o + "].  " + "In order for the DefaultSerializer to serialize this object, the [" + o.getClass().getName() + "] " + "class must implement java.io.Serializable.";        throw new SerializationException(msg, e);    }}
b6fed1c84bb77dc78a69e3218ebdfd6b93986bda5abd5d1a8b98c9f34b301961
deserialize
public T deserialize(byte[] serialized) throws SerializationException
{    if (serialized == null) {        String msg = "argument cannot be null.";        throw new IllegalArgumentException(msg);    }    ByteArrayInputStream bais = new ByteArrayInputStream(serialized);    BufferedInputStream bis = new BufferedInputStream(bais);    try {        ObjectInputStream ois = new ClassResolvingObjectInputStream(bis);        @SuppressWarnings({ "unchecked" })        T deserialized = (T) ois.readObject();        ois.close();        return deserialized;    } catch (Exception e) {        String msg = "Unable to deserialize argument byte array.";        throw new SerializationException(msg, e);    }}
e0545863ff14786a01b48c995871b84c0d98a8654cfef70f16cf6bbfdb4cac8c
hasResourcePrefix
public static boolean hasResourcePrefix(String resourcePath)
{    return resourcePath != null && (resourcePath.startsWith(CLASSPATH_PREFIX) || resourcePath.startsWith(URL_PREFIX) || resourcePath.startsWith(FILE_PREFIX));}
8bd78cf77bae57f50b9b73f57d194be6a5f5cd415b762599ff9001bb843377b0
resourceExists
public static boolean resourceExists(String resourcePath)
{    InputStream stream = null;    boolean exists = false;    try {        stream = getInputStreamForPath(resourcePath);        exists = true;    } catch (IOException e) {        stream = null;    } finally {        if (stream != null) {            try {                stream.close();            } catch (IOException ignored) {            }        }    }    return exists;}
6c7e2afbbbe8969cc792b7a31b697b5f36da9932e43bf6834434cf62b2346da2
getInputStreamForPath
public static InputStream getInputStreamForPath(String resourcePath) throws IOException
{    InputStream is;    if (resourcePath.startsWith(CLASSPATH_PREFIX)) {        is = loadFromClassPath(stripPrefix(resourcePath));    } else if (resourcePath.startsWith(URL_PREFIX)) {        is = loadFromUrl(stripPrefix(resourcePath));    } else if (resourcePath.startsWith(FILE_PREFIX)) {        is = loadFromFile(stripPrefix(resourcePath));    } else {        is = loadFromFile(resourcePath);    }    if (is == null) {        throw new IOException("Resource [" + resourcePath + "] could not be found.");    }    return is;}
2ff087fb7a7500bd32c4aa2cc3ff0702d9957218f663ed228de0b0cf9228dd9e
loadFromFile
private static InputStream loadFromFile(String path) throws IOException
{    if (log.isDebugEnabled()) {        log.debug("Opening file [" + path + "]...");    }    return new FileInputStream(path);}
67ef45d71c7e46ff13948d55acb2e9bd8d40578201d2573a7dcad76a47900293
loadFromUrl
private static InputStream loadFromUrl(String urlPath) throws IOException
{    log.debug("Opening url {}", urlPath);    URL url = new URL(urlPath);    return url.openStream();}
2c784c3a272f1cb86434437acc35879b60a8ce49fc743c3a1791c73fa3a4d110
loadFromClassPath
private static InputStream loadFromClassPath(String path)
{    log.debug("Opening resource from class path [{}]", path);    return ClassUtils.getResourceAsStream(path);}
3e3ba549044b9d6bce3682137c71dd2c47b59945a0d8282d9e0ba7ee9ad69c4b
stripPrefix
private static String stripPrefix(String resourcePath)
{    return resourcePath.substring(resourcePath.indexOf(":") + 1);}
b9658d75e7c44f7d4bf0a8f43d66751627417a81e8f9e4a8cebc258a5e250e2a
close
public static void close(InputStream is)
{    if (is != null) {        try {            is.close();        } catch (IOException e) {            log.warn("Error closing input stream.", e);        }    }}
2d4855ff4c7f198638f6f2258a7db09c1b9d4ba0002b37fcd3daeb2ef9053910
serialize
public byte[] serialize(Object source)
{    if (source == null) {        String msg = "argument cannot be null.";        throw new IllegalArgumentException(msg);    }    ByteArrayOutputStream bos = new ByteArrayOutputStream();    XMLEncoder encoder = new XMLEncoder(new BufferedOutputStream(bos));    encoder.writeObject(source);    encoder.close();    return bos.toByteArray();}
ac8a594ce91a2f2e22c769297bd102b1eaf87b822c7879fe84a2fc1e86da032b
deserialize
public Object deserialize(byte[] serialized)
{    if (serialized == null) {        throw new IllegalArgumentException("Argument cannot be null.");    }    ByteArrayInputStream bis = new ByteArrayInputStream(serialized);    XMLDecoder decoder = new XMLDecoder(new BufferedInputStream(bis));    Object o = decoder.readObject();    decoder.close();    return o;}
d111438d14bcf29757bd02b58bbc011816be3660bdab6457e12f1d90caea45fc
isTrue
public static void isTrue(boolean expression, String message)
{    if (!expression) {        throw new IllegalArgumentException(message);    }}
408e613bd4bc50b26a21d6b3664f42b1f749a158504416583e7808ca88ec0368
isTrue
public static void isTrue(boolean expression)
{    isTrue(expression, "[Assertion failed] - this expression must be true");}
7353b4c22513973f4c68d2b2eeaeaf663ae0e47ab4d52ad57f437dce3dac19bd
isNull
public static void isNull(Object object, String message)
{    if (object != null) {        throw new IllegalArgumentException(message);    }}
6be5635f68b24bc6402ee494dde13e61ffc1a88c808eaea6850a669a8589adbf
isNull
public static void isNull(Object object)
{    isNull(object, "[Assertion failed] - the object argument must be null");}
770fb70525fa03245c7d3b2139e099fe135ba551272dd551b5c42a44a084202f
notNull
public static void notNull(Object object, String message)
{    if (object == null) {        throw new IllegalArgumentException(message);    }}
1b76e96caf03421c762a87504c86485697bf27f9774391f3b35df5f6f4f58e21
notNull
public static void notNull(Object object)
{    notNull(object, "[Assertion failed] - this argument is required; it must not be null");}
47c2a7483f737fab361f1eebad392b9492c1c3b6ae02343d506a88872dd133cd
hasLength
public static void hasLength(String text, String message)
{    if (!StringUtils.hasLength(text)) {        throw new IllegalArgumentException(message);    }}
e9aee5e100b3c69623d8825e1242bb36754937329bda6d4ee3a6adf489f0346c
hasLength
public static void hasLength(String text)
{    hasLength(text, "[Assertion failed] - this String argument must have length; it must not be null or empty");}
f9e1e3836556bee2e7e40fee5eec2d36c80734a40b92a89f1b79de00a15129ff
hasText
public static void hasText(String text, String message)
{    if (!StringUtils.hasText(text)) {        throw new IllegalArgumentException(message);    }}
4698883bcebad3b08483a67a2aabda2908eae66c915bc654104e16a1a3c7607a
hasText
public static void hasText(String text)
{    hasText(text, "[Assertion failed] - this String argument must have text; it must not be null, empty, or blank");}
62f081819853cce6a2691a4fd6f114b093893ba964b3831b5c04cb8c73fedc98
doesNotContain
public static void doesNotContain(String textToSearch, String substring, String message)
{    if (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) && textToSearch.indexOf(substring) != -1) {        throw new IllegalArgumentException(message);    }}
7d17b190b00a7cbc08b36dfc211a3ff573dadb370d6344b37ad63843a5e7a4d7
doesNotContain
public static void doesNotContain(String textToSearch, String substring)
{    doesNotContain(textToSearch, substring, "[Assertion failed] - this String argument must not contain the substring [" + substring + "]");}
5500b99c958f91a5d8255fe15aa34c8bc81b71b600a6936f993ac8e9fa3c6750
notEmpty
public static void notEmpty(Object[] array, String message)
{    if (array == null || array.length == 0) {        throw new IllegalArgumentException(message);    }}
2672dd7f067ed73d54dec7fbd4ca46c98f899664df6265c573066e9153a33bb9
notEmpty
public static void notEmpty(Object[] array)
{    notEmpty(array, "[Assertion failed] - this array must not be empty: it must contain at least 1 element");}
c71dce889e8525a3639bad6347345b9c7839dae336e0e1c0ed96526246a60d5d
noNullElements
public static void noNullElements(Object[] array, String message)
{    if (array != null) {        for (int i = 0; i < array.length; i++) {            if (array[i] == null) {                throw new IllegalArgumentException(message);            }        }    }}
52f55e15cb06aca9cdf43632d92b4257de5ca6c795770dbebe1d8b1cb78a4a28
noNullElements
public static void noNullElements(Object[] array)
{    noNullElements(array, "[Assertion failed] - this array must not contain any null elements");}
844c0fc4983db6e4bb8e965e54454fc94ffc744d870131e571f95a850f1533ca
notEmpty
public static void notEmpty(Collection collection, String message)
{    if (isEmpty(collection)) {        throw new IllegalArgumentException(message);    }}
d892ed16d2caa55b494f0bfc98a8a90b4c58fa647a9accdf0c852db9c8ac0208
notEmpty
public static void notEmpty(Collection collection)
{    notEmpty(collection, "[Assertion failed] - this collection must not be empty: it must contain at least 1 element");}
8ad28b499eeff068a808a4c14e5bcf7fab66204397ad47006f452eb943eb4acf
notEmpty
public static void notEmpty(Map map, String message)
{    if (isEmpty(map)) {        throw new IllegalArgumentException(message);    }}
a314bf4c403bcca235acc16f4765f8a91eeb456024bcaa2c77c06e7250758d58
notEmpty
public static void notEmpty(Map map)
{    notEmpty(map, "[Assertion failed] - this map must not be empty; it must contain at least one entry");}
52863684b8690bb2fc40f89f71a8996d838fa87c2f25410d38bbfa7652b5441b
isInstanceOf
public static void isInstanceOf(Class clazz, Object obj)
{    isInstanceOf(clazz, obj, "");}
73f962381ab269569afd6edaa7ffcd34cf90312720c4df201568b95d6bbc309d
isInstanceOf
public static void isInstanceOf(Class type, Object obj, String message)
{    notNull(type, "Type to check against must not be null");    if (!type.isInstance(obj)) {        throw new IllegalArgumentException(message + "Object of class [" + (obj != null ? obj.getClass().getName() : "null") + "] must be an instance of " + type);    }}
e6353060b08ad8219203f0d6d87ccfee069b523a04dfb5bc9b6c09dbff983991
isAssignable
public static void isAssignable(Class superType, Class subType)
{    isAssignable(superType, subType, "");}
bfaead6f1022d190208cabde5b6e469d71b02f5e720c7d69298ea18291199aaa
isAssignable
public static void isAssignable(Class superType, Class subType, String message)
{    notNull(superType, "Type to check against must not be null");    if (subType == null || !superType.isAssignableFrom(subType)) {        throw new IllegalArgumentException(message + subType + " is not assignable to " + superType);    }}
23de9ed9708a27c65b14436318dc728a0a954bde105b34c02bfc0b7f5991a63c
state
public static void state(boolean expression, String message)
{    if (!expression) {        throw new IllegalStateException(message);    }}
2dcd20dbd08b24a0ffe5275b7ee68f25a0dc17ab57eecddfb1d81849d8ccdc88
state
public static void state(boolean expression)
{    state(expression, "[Assertion failed] - this state invariant must be true");}
138f9a6b7c66b5d9494e66085b16e7ebe6020167609a82d1eea7691eb6723909
isEmpty
private static boolean isEmpty(Map m)
{    return m == null || m.isEmpty();}
db596b53642ea727f60bbee77154b0fd34c88ce8e481bdc769096a951d31c8cd
isEmpty
private static boolean isEmpty(Collection c)
{    return c == null || c.isEmpty();}
e5f2a494b3569f2b60e8a24c886f610222ec43767af7c47836f185cab5a97831
bytes
public static ByteSource bytes(byte[] bytes)
{    return new SimpleByteSource(bytes);}
f7c58cbf5da693523f9390890f0a7d0ecb576a5bd99baa906bafc01f7d77dd2a
bytes
public static ByteSource bytes(char[] chars)
{    return new SimpleByteSource(chars);}
4996e8b57bd2d4092189f33ceb20159c7568adcfa27a63c7e17c5a5afd689c73
bytes
public static ByteSource bytes(String string)
{    return new SimpleByteSource(string);}
af5485048cd40e8682c742d1da0997d359fafbd67d80f410154f1836fd5da03b
bytes
public static ByteSource bytes(ByteSource source)
{    return new SimpleByteSource(source);}
741783354567485cf03fcea55c4876c582dc90f0ce29324c932b93bb4526f419
bytes
public static ByteSource bytes(File file)
{    return new SimpleByteSource(file);}
bb012fe2d4132616b0ff2d2d042ab441309255313f55c7b9d5c70fa91e019ff2
bytes
public static ByteSource bytes(InputStream stream)
{    return new SimpleByteSource(stream);}
8593fcad725d046a9d8008a1bc4e6937a17e6cb7e1493b88bcafee6093041016
isCompatible
public static boolean isCompatible(Object source)
{    return SimpleByteSource.isCompatible(source);}
d2ac8bda070748445ef763204fa624af157b33fb4312e8ffff0d9523a5983d23
bytes
public static ByteSource bytes(Object source) throws IllegalArgumentException
{    if (source == null) {        return null;    }    if (!isCompatible(source)) {        String msg = "Unable to heuristically acquire bytes for object of type [" + source.getClass().getName() + "].  If this type is indeed a byte-backed data type, you might " + "want to write your own ByteSource implementation to extract its bytes explicitly.";        throw new IllegalArgumentException(msg);    }    if (source instanceof byte[]) {        return bytes((byte[]) source);    } else if (source instanceof ByteSource) {        return (ByteSource) source;    } else if (source instanceof char[]) {        return bytes((char[]) source);    } else if (source instanceof String) {        return bytes((String) source);    } else if (source instanceof File) {        return bytes((File) source);    } else if (source instanceof InputStream) {        return bytes((InputStream) source);    } else {        throw new IllegalStateException("Encountered unexpected byte source.  This is a bug - please notify " + "the Shiro developer list asap (the isCompatible implementation does not reflect this " + "method's implementation).");    }}
66b4cfad5cfc3b350a505af11fc6420dc7661e8e833a2c61861e347ad38ac9dd
doGetClassLoader
protected ClassLoader doGetClassLoader() throws Throwable
{    return Thread.currentThread().getContextClassLoader();}
66b4cfad5cfc3b350a505af11fc6420dc7661e8e833a2c61861e347ad38ac9dd
doGetClassLoader
protected ClassLoader doGetClassLoader() throws Throwable
{    return ClassUtils.class.getClassLoader();}
66b4cfad5cfc3b350a505af11fc6420dc7661e8e833a2c61861e347ad38ac9dd
doGetClassLoader
protected ClassLoader doGetClassLoader() throws Throwable
{    return ClassLoader.getSystemClassLoader();}
f27ffa57c0d353fd47b91b0baf6308f039e718d3d329ab7a69a3a9d535b85ea8
getResourceAsStream
public static InputStream getResourceAsStream(String name)
{    InputStream is = THREAD_CL_ACCESSOR.getResourceStream(name);    if (is == null) {        if (log.isTraceEnabled()) {            log.trace("Resource [" + name + "] was not found via the thread context ClassLoader.  Trying the " + "current ClassLoader...");        }        is = CLASS_CL_ACCESSOR.getResourceStream(name);    }    if (is == null) {        if (log.isTraceEnabled()) {            log.trace("Resource [" + name + "] was not found via the current class loader.  Trying the " + "system/application ClassLoader...");        }        is = SYSTEM_CL_ACCESSOR.getResourceStream(name);    }    if (is == null && log.isTraceEnabled()) {        log.trace("Resource [" + name + "] was not found via the thread context, current, or " + "system/application ClassLoaders.  All heuristics have been exhausted.  Returning null.");    }    return is;}
9512aaa925681f23494fd2b3218bfa95a9b35fb37990a22be8a7a8e0bb631a27
forName
public static Class forName(String fqcn) throws UnknownClassException
{    Class clazz = THREAD_CL_ACCESSOR.loadClass(fqcn);    if (clazz == null) {        if (log.isTraceEnabled()) {            log.trace("Unable to load class named [" + fqcn + "] from the thread context ClassLoader.  Trying the current ClassLoader...");        }        clazz = CLASS_CL_ACCESSOR.loadClass(fqcn);    }    if (clazz == null) {        if (log.isTraceEnabled()) {            log.trace("Unable to load class named [" + fqcn + "] from the current ClassLoader.  " + "Trying the system/application ClassLoader...");        }        clazz = SYSTEM_CL_ACCESSOR.loadClass(fqcn);    }    if (clazz == null) {        String msg = "Unable to load class named [" + fqcn + "] from the thread context, current, or " + "system/application ClassLoaders.  All heuristics have been exhausted.  Class could not be found.";        throw new UnknownClassException(msg);    }    return clazz;}
7bf311d1d571b157886a639f8cc2b26c9e06d3e8b7f0ea19cea6a1589846ff04
isAvailable
public static boolean isAvailable(String fullyQualifiedClassName)
{    try {        forName(fullyQualifiedClassName);        return true;    } catch (UnknownClassException e) {        return false;    }}
55940f53c056a59f94d6f97748bafd27aac7ed5e7edd27b6b8cff07f3e64d2e0
newInstance
public static Object newInstance(String fqcn)
{    return newInstance(forName(fqcn));}
a20dc27d30003ab145735a4492af72b1d8c57880c27b0f06b1372408a4201ff0
newInstance
public static Object newInstance(String fqcn, Object... args)
{    return newInstance(forName(fqcn), args);}
38b1dc3df956f959a3cd53ed83a0dcdf7954d52d52c4100cc7f20f5423659b40
newInstance
public static Object newInstance(Class clazz)
{    if (clazz == null) {        String msg = "Class method parameter cannot be null.";        throw new IllegalArgumentException(msg);    }    try {        return clazz.newInstance();    } catch (Exception e) {        throw new InstantiationException("Unable to instantiate class [" + clazz.getName() + "]", e);    }}
c33494a7ce808e45d2df2b1327de6a1e17515d805a9ea73bb362f8d56d9d25df
newInstance
public static Object newInstance(Class clazz, Object... args)
{    Class[] argTypes = new Class[args.length];    for (int i = 0; i < args.length; i++) {        argTypes[i] = args[i].getClass();    }    Constructor ctor = getConstructor(clazz, argTypes);    return instantiate(ctor, args);}
90d33f60c4dde1872b9263ca952bc6a7e4cf96ba52c10ab146b34ff39554ac69
getConstructor
public static Constructor getConstructor(Class clazz, Class... argTypes)
{    try {        return clazz.getConstructor(argTypes);    } catch (NoSuchMethodException e) {        throw new IllegalStateException(e);    }}
fcf42e90ce0943486b996fdc56d7336674484f05a61ede6e4f5262c9bac16978
instantiate
public static Object instantiate(Constructor ctor, Object... args)
{    try {        return ctor.newInstance(args);    } catch (Exception e) {        String msg = "Unable to instantiate Permission instance with constructor [" + ctor + "]";        throw new InstantiationException(msg, e);    }}
311a04fa51db180ec8a1b6e3a8eb1c212091bd8e93ffed0f90b413f51a96e72c
getAnnotatedMethods
public static List<Method> getAnnotatedMethods(final Class<?> type, final Class<? extends Annotation> annotation)
{    final List<Method> methods = new ArrayList<Method>();    Class<?> clazz = type;    while (!Object.class.equals(clazz)) {        Method[] currentClassMethods = clazz.getDeclaredMethods();        for (final Method method : currentClassMethods) {            if (annotation == null || method.isAnnotationPresent(annotation)) {                methods.add(method);            }        }                clazz = clazz.getSuperclass();    }    return methods;}
9291e82d9520eb5c9b84df3da393db6248be57ba443c3ffdb5804e87aac1dd2e
loadClass
public Class loadClass(String fqcn)
{    Class clazz = null;    ClassLoader cl = getClassLoader();    if (cl != null) {        try {            clazz = cl.loadClass(fqcn);        } catch (ClassNotFoundException e) {            if (log.isTraceEnabled()) {                log.trace("Unable to load clazz named [" + fqcn + "] from class loader [" + cl + "]");            }        }    }    return clazz;}
e2303d26561cbcdcb3ccab10dd5ce0071ac2af1bd4d669b5bbe6582848e7854e
getResourceStream
public InputStream getResourceStream(String name)
{    InputStream is = null;    ClassLoader cl = getClassLoader();    if (cl != null) {        is = cl.getResourceAsStream(name);    }    return is;}
f6b124e6aecef41bae9926683e37dc5433e1143aecb7fc9915cadabb70cca4e4
getClassLoader
protected final ClassLoader getClassLoader()
{    try {        return doGetClassLoader();    } catch (Throwable t) {        if (log.isDebugEnabled()) {            log.debug("Unable to acquire ClassLoader.", t);        }    }    return null;}
663d39a7c11696c8e31993a9be6b83fb4e53769f352db6468c71c95121e723a9
init
public static void init(Object o) throws ShiroException
{    if (o instanceof Initializable) {        init((Initializable) o);    }}
da5347f89c7847cbe15fe3354cb44bb5517060febc385a9b9c83974b2c67909b
init
public static void init(Initializable initializable) throws ShiroException
{    initializable.init();}
fb055231767919131471583bb859cbbee4a3ec0d0ef3d103edd67423b9929e6f
init
public static void init(Collection c) throws ShiroException
{    if (c == null || c.isEmpty()) {        return;    }    for (Object o : c) {        init(o);    }}
1a22564d95835400f619019531922c6944328de0c02bff36d7ccbd50d8a1d037
destroy
public static void destroy(Object o)
{    if (o instanceof Destroyable) {        destroy((Destroyable) o);    } else if (o instanceof Collection) {        destroy((Collection) o);    }}
5e5e1982efb6d82b300707e6c575a2bb33efbe3202730f8eada849685b025da1
destroy
public static void destroy(Destroyable d)
{    if (d != null) {        try {            d.destroy();        } catch (Throwable t) {            if (log.isDebugEnabled()) {                String msg = "Unable to cleanly destroy instance [" + d + "] of type [" + d.getClass().getName() + "].";                log.debug(msg, t);            }        }    }}
e3d46507022b8f7c99dfd7ed05b4b875ef07a82265b67770cf8b7490e0796e55
destroy
public static void destroy(Collection c)
{    if (c == null || c.isEmpty()) {        return;    }    for (Object o : c) {        destroy(o);    }}
672cc607a0e2d466d65ea0041f6dfdde2a4bd1699e5462f66c387b619a9633b8
isCompatible
public static boolean isCompatible(Object o)
{    return o instanceof byte[] || o instanceof char[] || o instanceof String || o instanceof ByteSource || o instanceof File || o instanceof InputStream;}
c159a0fb57e2ba9a7fb373b47eabbc552079ef89a4a50bbca7903b879542d25a
getBytes
public byte[] getBytes()
{    return this.bytes;}
803915e853382ad445a6e2333fabb8beb8e4acd70e908a0d818400f7baac42af
isEmpty
public boolean isEmpty()
{    return this.bytes == null || this.bytes.length == 0;}
638a6a49016c93f7c6dd13d8abe990a7f2ebc5753931c31d6f7bbb7162bf965c
toHex
public String toHex()
{    if (this.cachedHex == null) {        this.cachedHex = Hex.encodeToString(getBytes());    }    return this.cachedHex;}
b3033425dfbf6c1c407d713cf675d17f333e3c7d89f3c9685e6d08923eca9172
toBase64
public String toBase64()
{    if (this.cachedBase64 == null) {        this.cachedBase64 = Base64.encodeToString(getBytes());    }    return this.cachedBase64;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return toBase64();}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    if (this.bytes == null || this.bytes.length == 0) {        return 0;    }    return Arrays.hashCode(this.bytes);}
8d37d11c7ecfc0d0589696a89cb385888c83bd3e43ea0c95a3b4ae4ef78180ce
equals
public boolean equals(Object o)
{    if (o == this) {        return true;    }    if (o instanceof ByteSource) {        ByteSource bs = (ByteSource) o;        return Arrays.equals(getBytes(), bs.getBytes());    }    return false;}
ef5fa019b3bd112b35ebb385f423b090c09f4c8f13f3fd817cdb5b4a4df3c48a
getBytes
public byte[] getBytes(File file)
{    return toBytes(file);}
851d88fef2fbad22eee24f9a142e899db8cb2d9528a5bb3f822a35abe1a4c5e8
getBytes
public byte[] getBytes(InputStream stream)
{    return toBytes(stream);}
bff87e54075ba5d5421bf5ff5db42cbe90d6f2d40bf112005070d80ee9873381
get
public V get(Object key)
{    processQueue();    V result = null;    SoftValue<V, K> value = map.get(key);    if (value != null) {                result = value.get();        if (result == null) {                                    map.remove(key);        } else {                        addToStrongReferences(result);        }    }    return result;}
19c554104b2d73b14f5060a2825bc276698b2f405aba81914edeb1d71969a597
addToStrongReferences
private void addToStrongReferences(V result)
{    strongReferencesLock.lock();    try {        strongReferences.add(result);        trimStrongReferencesIfNecessary();    } finally {        strongReferencesLock.unlock();    }}
9a6a98eebefdbc4db81e37b2fb1e2a832eb8bcd4848d1a195c298afeb44f97d2
trimStrongReferencesIfNecessary
private void trimStrongReferencesIfNecessary()
{        while (strongReferences.size() > RETENTION_SIZE) {        strongReferences.poll();    }}
35d299ec9554bbd354f259886bbdd035095e484bfd3b3bc9bc64668f8b05ff63
processQueue
private void processQueue()
{    SoftValue sv;    while ((sv = (SoftValue) queue.poll()) != null) {                        map.remove(sv.key);    }}
803915e853382ad445a6e2333fabb8beb8e4acd70e908a0d818400f7baac42af
isEmpty
public boolean isEmpty()
{    processQueue();    return map.isEmpty();}
10251f6cf636f49b599299432df558beac5bc221e8b028def33778ce8ebe248a
containsKey
public boolean containsKey(Object key)
{    processQueue();    return map.containsKey(key);}
c628f36c081e450f86a9e82a881e3e7747dea6b3d315f9d7efd8f5266497cb73
containsValue
public boolean containsValue(Object value)
{    processQueue();    Collection values = values();    return values != null && values.contains(value);}
9cd08e1d9cc34dc735163c11e8d09464e64d86756c215e59fe5d0a8b9431f555
putAll
public void putAll(Map<? extends K, ? extends V> m)
{    if (m == null || m.isEmpty()) {        processQueue();        return;    }    for (Map.Entry<? extends K, ? extends V> entry : m.entrySet()) {        put(entry.getKey(), entry.getValue());    }}
c619c5c247e00c82e132c731db2d7dd646000c405d071795fcbfcba581649b68
keySet
public Set<K> keySet()
{    processQueue();    return map.keySet();}
86f8cd7f78364ea8a0d36935cf2e3d294cee8b3b9e21cfe6a555d22e54e37f60
values
public Collection<V> values()
{    processQueue();    Collection<K> keys = map.keySet();    if (keys.isEmpty()) {                return Collections.EMPTY_SET;    }    Collection<V> values = new ArrayList<V>(keys.size());    for (K key : keys) {        V v = get(key);        if (v != null) {            values.add(v);        }    }    return values;}
1872e986b4afc45b25826345adf05e6c986d61445f72dd373c75c28af725bf99
put
public V put(K key, V value)
{        processQueue();    SoftValue<V, K> sv = new SoftValue<V, K>(value, key, queue);    SoftValue<V, K> previous = map.put(key, sv);    addToStrongReferences(value);    return previous != null ? previous.get() : null;}
d3d9cbefed45d3eba7ffb31735e6c0cc3079bba6649ecef7eae69b6429c3717d
remove
public V remove(Object key)
{        processQueue();    SoftValue<V, K> raw = map.remove(key);    return raw != null ? raw.get() : null;}
21ac40bb9a99614b6ac18fa4043acb6173fccff96066fdfab963dba597923aa8
clear
public void clear()
{    strongReferencesLock.lock();    try {        strongReferences.clear();    } finally {        strongReferencesLock.unlock();    }        processQueue();    map.clear();}
72ef1e59027007ffe0950edfd2670ad03bb65cd6463d5d1d282dfeb1750435b0
size
public int size()
{        processQueue();    return map.size();}
131bb4f4440624fd9db5faf1720923c352ba37d48ee8db62980269dadb55eaae
entrySet
public Set<Map.Entry<K, V>> entrySet()
{        processQueue();    Collection<K> keys = map.keySet();    if (keys.isEmpty()) {                return Collections.EMPTY_SET;    }    Map<K, V> kvPairs = new HashMap<K, V>(keys.size());    for (K key : keys) {        V v = get(key);        if (v != null) {            kvPairs.put(key, v);        }    }    return kvPairs.entrySet();}
f121a949fbccf398bee85839216bcbd8a019de824e420ae9ce039469fa1e2622
hasText
public static boolean hasText(String str)
{    if (!hasLength(str)) {        return false;    }    int strLen = str.length();    for (int i = 0; i < strLen; i++) {        if (!Character.isWhitespace(str.charAt(i))) {            return true;        }    }    return false;}
e2456e694ef9b0c5d9db80910557600710b213eac3f2840f8fa88de0f9a7a537
hasLength
public static boolean hasLength(String str)
{    return (str != null && str.length() > 0);}
9fbcce63562ba5e238673ff6d07eb9f13fbb97b37f837d5eaa9cf70c0981e14e
startsWithIgnoreCase
public static boolean startsWithIgnoreCase(String str, String prefix)
{    if (str == null || prefix == null) {        return false;    }    if (str.startsWith(prefix)) {        return true;    }    if (str.length() < prefix.length()) {        return false;    }    String lcStr = str.substring(0, prefix.length()).toLowerCase();    String lcPrefix = prefix.toLowerCase();    return lcStr.equals(lcPrefix);}
d3b2eeec615032c485bb7e5103f63b21670a081d19cb5e5cd64cb381210e9a2b
clean
public static String clean(String in)
{    String out = in;    if (in != null) {        out = in.trim();        if (out.equals(EMPTY_STRING)) {            out = null;        }    }    return out;}
ab71be8bf534eb93730d4c8c88ec2d172153b0631e1fb66b55c4aef541693839
toString
public static String toString(Object[] array)
{    return toDelimitedString(array, ",");}
31de743ac51178f593eb99d8ca33e52ab17cb47f3172eac7c35ee1ce86cf87e6
toDelimitedString
public static String toDelimitedString(Object[] array, String delimiter)
{    if (array == null || array.length == 0) {        return EMPTY_STRING;    }    StringBuilder sb = new StringBuilder();    for (int i = 0; i < array.length; i++) {        if (i > 0) {            sb.append(delimiter);        }        sb.append(array[i]);    }    return sb.toString();}
408a187f692643fc1f3ce3977570bb7e4187503f80aa54fa5522efabd3afef7a
toDelimitedString
public static String toDelimitedString(Collection c, String delimiter)
{    if (c == null || c.isEmpty()) {        return EMPTY_STRING;    }    return join(c.iterator(), delimiter);}
073dcf9a93459fe62d62bf8005d7bfae1bdbeb5206fe1f98c031ed5531d9be4c
tokenizeToStringArray
public static String[] tokenizeToStringArray(String str, String delimiters)
{    return tokenizeToStringArray(str, delimiters, true, true);}
746568379cec46803556203d24c868e74e569bfc13648cf8f910adb03a52a9c5
tokenizeToStringArray
public static String[] tokenizeToStringArray(String str, String delimiters, boolean trimTokens, boolean ignoreEmptyTokens)
{    if (str == null) {        return null;    }    StringTokenizer st = new StringTokenizer(str, delimiters);    List tokens = new ArrayList();    while (st.hasMoreTokens()) {        String token = st.nextToken();        if (trimTokens) {            token = token.trim();        }        if (!ignoreEmptyTokens || token.length() > 0) {            tokens.add(token);        }    }    return toStringArray(tokens);}
6ace465a27f0f2c699e380fb08822ab74f03bb1eb8169fcf925a9ee998fc0112
toStringArray
public static String[] toStringArray(Collection collection)
{    if (collection == null) {        return null;    }    return (String[]) collection.toArray(new String[collection.size()]);}
284e3294f50a9d65b1f52e3282ec2266e19a8604e670460b0d1d0a4a4f2d2f83
splitKeyValue
public static String[] splitKeyValue(String aLine) throws ParseException
{    String line = clean(aLine);    if (line == null) {        return null;    }    String[] split = line.split(" ", 2);    if (split.length != 2) {                split = line.split("=", 2);        if (split.length != 2) {            String msg = "Unable to determine Key/Value pair from line [" + line + "].  There is no space from " + "which the split location could be determined.";            throw new ParseException(msg, 0);        }    }    split[0] = clean(split[0]);    split[1] = clean(split[1]);    if (split[1].startsWith("=")) {                        split[1] = clean(split[1].substring(1));    }    if (split[0] == null) {        String msg = "No valid key could be found in line [" + line + "] to form a key/value pair.";        throw new ParseException(msg, 0);    }    if (split[1] == null) {        String msg = "No corresponding value could be found in line [" + line + "] for key [" + split[0] + "]";        throw new ParseException(msg, 0);    }    return split;}
7aabee6e4d29be15bee32dc025658897afe48298ef6c9721c6b5d0f9caa1765e
split
public static String[] split(String line)
{    return split(line, DEFAULT_DELIMITER_CHAR);}
6f388e986a601ae0d6be56f4ebe5df0e83376b0a4e8abf0915aecf290f87eb58
split
public static String[] split(String line, char delimiter)
{    return split(line, delimiter, DEFAULT_QUOTE_CHAR);}
1e497d69c4f9fd4cd9705172ad8ee79831be5cfe715ab33e7f2b7f49d4312d97
split
public static String[] split(String line, char delimiter, char quoteChar)
{    return split(line, delimiter, quoteChar, quoteChar);}
10460bd87ee6115591d8cbdf6d79b9aaa13452ea97a07165947dc3b47b61a965
split
public static String[] split(String line, char delimiter, char beginQuoteChar, char endQuoteChar)
{    return split(line, delimiter, beginQuoteChar, endQuoteChar, false, true);}
67553b0ce0ce8c4b1f14276fb999e19c36e3a0ff08ac3eb8ba256a798f42b553
split
public static String[] split(String aLine, char delimiter, char beginQuoteChar, char endQuoteChar, boolean retainQuotes, boolean trimTokens)
{    String line = clean(aLine);    if (line == null) {        return null;    }    List<String> tokens = new ArrayList<String>();    StringBuilder sb = new StringBuilder();    boolean inQuotes = false;    for (int i = 0; i < line.length(); i++) {        char c = line.charAt(i);        if (c == beginQuoteChar) {                        if (            inQuotes &&             line.length() > (i + 1) && line.charAt(i + 1) == beginQuoteChar) {                                                                sb.append(line.charAt(i + 1));                i++;            } else {                inQuotes = !inQuotes;                if (retainQuotes) {                    sb.append(c);                }            }        } else if (c == endQuoteChar) {            inQuotes = !inQuotes;            if (retainQuotes) {                sb.append(c);            }        } else if (c == delimiter && !inQuotes) {            String s = sb.toString();            if (trimTokens) {                s = s.trim();            }            tokens.add(s);                        sb = new StringBuilder();        } else {            sb.append(c);        }    }    String s = sb.toString();    if (trimTokens) {        s = s.trim();    }    tokens.add(s);    return tokens.toArray(new String[tokens.size()]);}
7cb863331aafeeb2983553618ef9d3fa797d38dd538e1634197c0cb19eebbdda
join
public static String join(Iterator<?> iterator, String separator)
{    final String empty = "";        if (iterator == null) {        return null;    }    if (!iterator.hasNext()) {        return empty;    }    Object first = iterator.next();    if (!iterator.hasNext()) {        return first == null ? empty : first.toString();    }            StringBuilder buf = new StringBuilder(256);    if (first != null) {        buf.append(first);    }    while (iterator.hasNext()) {        if (separator != null) {            buf.append(separator);        }        Object obj = iterator.next();        if (obj != null) {            buf.append(obj);        }    }    return buf.toString();}
f7368a18675aacc17b643e72f58c2fdc5066ea8da3aea27600e8f0f7425a0355
splitToSet
public static Set<String> splitToSet(String delimited, String separator)
{    if (delimited == null || separator == null) {        return null;    }    String[] split = split(delimited, separator.charAt(0));    return asSet(split);}
c7f351bbe7df8bb50b1c1aa796329eb1d9e73905bff9015092846b9ea4e54679
uppercaseFirstChar
public static String uppercaseFirstChar(String in)
{    if (in == null || in.length() == 0) {        return in;    }    int length = in.length();    StringBuilder sb = new StringBuilder(length);    sb.append(Character.toUpperCase(in.charAt(0)));    if (length > 1) {        String remaining = in.substring(1);        sb.append(remaining);    }    return sb.toString();}
782b924c34b24b3bb6a4f8a7f5793bde3a1c75647e8c7c8db3d8eaedb9e5018f
asSet
private static Set<E> asSet(E... elements)
{    if (elements == null || elements.length == 0) {        return Collections.emptySet();    }    if (elements.length == 1) {        return Collections.singleton(elements[0]);    }    LinkedHashSet<E> set = new LinkedHashSet<E>(elements.length * 4 / 3 + 1);    Collections.addAll(set, elements);    return set;}
12988e32fb9e7822231bf05b7d2b2013fd70cf350e185d48e6fdacbe7847e62e
getId
public long getId()
{    return _id;}
4559dc10260923d68308a1e991ddaab6b9a76ee75285fcf1d3abfc6a6052fd45
getOwnerName
public String getOwnerName()
{    return _ownerName;}
967d21828dd4b7396b26e55f80c4b30972f51b68d2fa61b73d106a476da86ea0
isActive
public boolean isActive()
{    return _isActive;}
6fef0f2e4fb9bd099b31a33d74900950e908ace9f451fee079a9948e6cb6b9dc
setActive
public void setActive(boolean aIsActive)
{    _isActive = aIsActive;}
a2d82480397f7c0f4b4f4a1dace2b1acb6a20e9d734a996cf6383a5664cf60ab
setOwnerName
public void setOwnerName(String aOwnerName)
{    _ownerName = aOwnerName;}
451388a0b2b95acf5caffb858e7f3da4a87598df185d09d1c1fa8ff38b6a0613
getBalance
public double getBalance()
{    return _balance;}
7f97d42036b44c680acd40f8bcbe915424b00af1549927725cff942fcd9d080e
getTransactions
public List<AccountTransaction> getTransactions()
{    return _transactions;}
e1b0adb4b54b526b019ec4a9f0839f9ed0cd03e93c57b0f9a390d605bbfd634e
applyTransaction
protected void applyTransaction(AccountTransaction aTransaction) throws NotEnoughFundsException, InactiveAccountException
{    if (!_isActive) {        throw new InactiveAccountException("Unable to apply " + aTransaction.getType() + " of amount " + aTransaction.getAmount() + " to account " + _id);    }    synchronized (_transactions) {        if (AccountTransaction.TransactionType.DEPOSIT == aTransaction.getType()) {            _transactions.add(aTransaction);            _balance += aTransaction.getAmount();        } else if (AccountTransaction.TransactionType.WITHDRAWAL == aTransaction.getType()) {            if (_balance < aTransaction.getAmount()) {                throw new NotEnoughFundsException("Unable to withdraw " + aTransaction.getAmount() + "$ from account " + _id + " - current balance is " + _balance);            }            _transactions.add(aTransaction);            _balance -= aTransaction.getAmount();        } else {            throw new IllegalArgumentException("The transaction passed in has an invalid type: " + aTransaction.getType());        }    }}
f4113a02641e80443c2f716181ca124fa27251a0821f8e31b1127df93ca87e4e
setCreatedBy
protected void setCreatedBy(String aCreatedBy)
{    _createdBy = aCreatedBy;}
7afbd63304efd4f498b55ba4dbbae1919b9588564426efa3f5968a141bfa291f
getCreatedBy
public String getCreatedBy()
{    return _createdBy;}
309ea1594e350879bef98ade3eb5d2944b4e6346757bb739af922b9cfe9c8651
getCreationDate
public Date getCreationDate()
{    return _creationDate;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return new ToStringBuilder(this, ToStringStyle.SHORT_PREFIX_STYLE).append("id", _id).append("ownerName", _ownerName).append("isActive", _isActive).append("balance", _balance).append("tx.count", _transactions.size()).append("createdBy", _createdBy).append("creationDate", new Timestamp(_creationDate.getTime())).toString();}
0a0015f094a45ecda8e96ec68499963620a7460460e7fb278f7b49aa8c436cc2
createDepositTx
public static AccountTransaction createDepositTx(long anAccountId, double anAmount)
{    return new AccountTransaction(TransactionType.DEPOSIT, anAccountId, anAmount);}
f4c1d931b4bd65a8f61ce2be2adecc808710dd65b2ae1d8d5db8d2b509361643
createWithdrawalTx
public static AccountTransaction createWithdrawalTx(long anAccountId, double anAmount)
{    return new AccountTransaction(TransactionType.WITHDRAWAL, anAccountId, anAmount);}
12988e32fb9e7822231bf05b7d2b2013fd70cf350e185d48e6fdacbe7847e62e
getId
public long getId()
{    return _id;}
47ad7284f3e37e4e260f3fbfb86a205edb8d98e30392b6a5af4445b7b7e5be1e
getType
public TransactionType getType()
{    return _type;}
95e4f04b39309ceaa6d9ef99b0837d44abdec2d54768fdb429cb5d052e003217
getAccountId
public long getAccountId()
{    return _accountId;}
66450c62e55a26e3af204b64235425d1a09d498ab4dcdb9306fa964c6f293758
getAmount
public double getAmount()
{    return _amount;}
f4113a02641e80443c2f716181ca124fa27251a0821f8e31b1127df93ca87e4e
setCreatedBy
protected void setCreatedBy(String aCreatedBy)
{    _createdBy = aCreatedBy;}
7afbd63304efd4f498b55ba4dbbae1919b9588564426efa3f5968a141bfa291f
getCreatedBy
public String getCreatedBy()
{    return _createdBy;}
309ea1594e350879bef98ade3eb5d2944b4e6346757bb739af922b9cfe9c8651
getCreationDate
public Date getCreationDate()
{    return _creationDate;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return new ToStringBuilder(this, ToStringStyle.SHORT_PREFIX_STYLE).append("id", _id).append("type", _type).append("accountId", _accountId).append("amount", _amount).append("createdBy", _createdBy).append("creationDate", new Timestamp(_creationDate.getTime())).toString();}
b8282fe6b8c2a709b928707be57714a533155137ab05ea28c4f859387aeff305
start
public synchronized void start() throws Exception
{    if (_bankService == null) {        _bankService = new SecureBankService();        _bankService.start();    }}
06e1ddba8663c90da407ac517f29ed70555cfe57b0332c9a96e7c696e0255364
stop
public synchronized void stop()
{    if (_bankService != null) {        try {            _bankService.dispose();        } finally {            _bankService = null;        }    }}
9cb17dcbe982874e72698f839f784f59c2ef62474468159bf98140da78b9ac3e
getBankService
public BankService getBankService()
{    return _bankService;}
3116ea2053d9de960ec3753eb07f3d243c370662aa1f0175ad357057c9ce5a52
main
public static void main(String[] args)
{    try {        BankServerRunner server = new BankServerRunner();        server.start();        server.stop();    } catch (Exception e) {        e.printStackTrace();    }}
309ea1594e350879bef98ade3eb5d2944b4e6346757bb739af922b9cfe9c8651
getCreationDate
public Date getCreationDate()
{    return _creationDate;}
66450c62e55a26e3af204b64235425d1a09d498ab4dcdb9306fa964c6f293758
getAmount
public double getAmount()
{    return _amount;}
589e921c40b3cb18f33c541fca11ae3a5a80a3c12b6c4388f7386a00c9da22a0
getMadeBy
public String getMadeBy()
{    return _madeBy;}
90ba0dddc593bd95e2a0c0c039c523b81bfb91f87814ebcb222c3914ca772ead
start
public void start() throws Exception
{    _isRunning = true;    log.info("Bank service started");}
b9fb45dfe6e038cbb203f12831a900a458fc92323c8db50edb08712565a288f2
dispose
public void dispose()
{    log.info("Stopping bank service...");    _isRunning = false;    synchronized (_accounts) {        _accountsById.clear();        _accounts.clear();    }    log.info("Bank service stopped");}
f74c5885044ce2f0b23e943da108e45112a1626950e6e31ffbe15c1d6717d332
assertServiceState
protected void assertServiceState()
{    if (!_isRunning) {        throw new IllegalStateException("This bank service is not running");    }}
b11c7b2578eadc8fee8c64de2a9b2324b789a093f115ec7f752e79fb034960ca
getAccountCount
public int getAccountCount()
{    return _accounts.size();}
86fb2d13383a045b96f48619ffb0c248dcf0583fe5a795e94025cba20f81c07d
createNewAccount
public long createNewAccount(String anOwnerName)
{    assertServiceState();    log.info("Creating new account for " + anOwnerName);    synchronized (_accounts) {        Account account = new Account(anOwnerName);        account.setCreatedBy(getCurrentUsername());        _accounts.add(account);        _accountsById.put(account.getId(), account);        log.debug("Created new account: " + account);        return account.getId();    }}
b6ecd45582890618aaee9d16e9c7fbb795f3dfde025220015e7decf1493c3f97
searchAccountIdsByOwner
public long[] searchAccountIdsByOwner(String anOwnerName)
{    assertServiceState();    log.info("Searching existing accounts for " + anOwnerName);    ArrayList<Account> matchAccounts = new ArrayList<Account>();    synchronized (_accounts) {        for (Account a : _accounts) {            if (a.getOwnerName().toLowerCase().contains(anOwnerName.toLowerCase())) {                matchAccounts.add(a);            }        }    }    long[] accountIds = new long[matchAccounts.size()];    int index = 0;    for (Account a : matchAccounts) {        accountIds[index++] = a.getId();    }    log.debug("Found " + accountIds.length + " account(s) matching the name " + anOwnerName);    return accountIds;}
a3ecf375fe86ebe2b654a1f350fc6359074451c9e97f8062caebfcc046fbe7d9
getOwnerOf
public String getOwnerOf(long anAccountId) throws AccountNotFoundException
{    assertServiceState();    log.info("Getting owner of account " + anAccountId);    Account a = safellyRetrieveAccountForId(anAccountId);    return a.getOwnerName();}
c19d0b322de87e7ac12daeffd88b8b619ffab08ee120405fad54bd48bc638192
getBalanceOf
public double getBalanceOf(long anAccountId) throws AccountNotFoundException
{    assertServiceState();    log.info("Getting balance of account " + anAccountId);    Account a = safellyRetrieveAccountForId(anAccountId);    return a.getBalance();}
3778b11c1f30a9539e8da634beea1c7e2fcd34867393b10593395ea4641e31e2
depositInto
public double depositInto(long anAccountId, double anAmount) throws AccountNotFoundException, InactiveAccountException
{    assertServiceState();    log.info("Making deposit of " + anAmount + " into account " + anAccountId);    try {        Account a = safellyRetrieveAccountForId(anAccountId);        AccountTransaction tx = AccountTransaction.createDepositTx(anAccountId, anAmount);        tx.setCreatedBy(getCurrentUsername());        log.debug("Created a new transaction " + tx);        a.applyTransaction(tx);        log.debug("New balance of account " + a.getId() + " after deposit is " + a.getBalance());        return a.getBalance();    } catch (NotEnoughFundsException nefe) {        throw new IllegalStateException("Should never happen", nefe);    }}
caf78669a232d539336838a09fd264fabd73a4e215ab42c6f3b0200687b2effb
withdrawFrom
public double withdrawFrom(long anAccountId, double anAmount) throws AccountNotFoundException, NotEnoughFundsException, InactiveAccountException
{    assertServiceState();    log.info("Making withdrawal of " + anAmount + " from account " + anAccountId);    Account a = safellyRetrieveAccountForId(anAccountId);    AccountTransaction tx = AccountTransaction.createWithdrawalTx(anAccountId, anAmount);    tx.setCreatedBy(getCurrentUsername());    log.debug("Created a new transaction " + tx);    a.applyTransaction(tx);    log.debug("New balance of account " + a.getId() + " after withdrawal is " + a.getBalance());    return a.getBalance();}
996a36efe765835a9ef6d9892a32774cbfdf8ae6737c14e96b7b9b4776aae151
getTxHistoryFor
public TxLog[] getTxHistoryFor(long anAccountId) throws AccountNotFoundException
{    assertServiceState();    log.info("Getting transactions of account " + anAccountId);    Account a = safellyRetrieveAccountForId(anAccountId);    TxLog[] txs = new TxLog[a.getTransactions().size()];    int index = 0;    for (AccountTransaction tx : a.getTransactions()) {        log.debug("Retrieved transaction " + tx);        if (TransactionType.DEPOSIT == tx.getType()) {            txs[index++] = new TxLog(tx.getCreationDate(), tx.getAmount(), tx.getCreatedBy());        } else {            txs[index++] = new TxLog(tx.getCreationDate(), -1.0d * tx.getAmount(), tx.getCreatedBy());        }    }    return txs;}
0553e45facfc035c8056eb1609c57a2495d35a6cc196f0209956dc91a78cb8e9
closeAccount
public double closeAccount(long anAccountId) throws AccountNotFoundException, InactiveAccountException
{    assertServiceState();    log.info("Closing account " + anAccountId);    Account a = safellyRetrieveAccountForId(anAccountId);    if (!a.isActive()) {        throw new InactiveAccountException("The account " + anAccountId + " is already closed");    }    try {        AccountTransaction tx = AccountTransaction.createWithdrawalTx(a.getId(), a.getBalance());        tx.setCreatedBy(getCurrentUsername());        log.debug("Created a new transaction " + tx);        a.applyTransaction(tx);        a.setActive(false);        log.debug("Account " + a.getId() + " is now closed and an amount of " + tx.getAmount() + " is given to the owner");        return tx.getAmount();    } catch (NotEnoughFundsException nefe) {        throw new IllegalStateException("Should never happen", nefe);    }}
1ba7cf1d5cbafe9816dece138edd62ebf71eaeb8e9d5cda0455ea9505f866073
isAccountActive
public boolean isAccountActive(long anAccountId) throws AccountNotFoundException
{    assertServiceState();    log.info("Getting active status of account " + anAccountId);    Account a = safellyRetrieveAccountForId(anAccountId);    return a.isActive();}
6540d522b42aaf65693d41e113108581bbf1c9648ae7192be93c2e6d3a5196b2
safellyRetrieveAccountForId
protected Account safellyRetrieveAccountForId(long anAccountId) throws AccountNotFoundException
{    Account account = null;    synchronized (_accounts) {        account = _accountsById.get(anAccountId);    }    if (account == null) {        throw new AccountNotFoundException("No account found for the id " + anAccountId);    }    log.info("Retrieved account " + account);    return account;}
016c73d6b28ffbe6b1a47e72d2e8487f9f5de003af4c25e70f5ec5de3de3119a
getCurrentUsername
protected String getCurrentUsername()
{    Subject subject = SecurityUtils.getSubject();    if (subject == null || subject.getPrincipal() == null || !subject.isAuthenticated()) {        throw new IllegalStateException("Unable to retrieve the current authenticated subject");    }    return SecurityUtils.getSubject().getPrincipal().toString();}
7f0f73b325bcd37632c396c02bb87ddfe4bb9da1a35fac272192ae84740eb688
setUpClass
public static void setUpClass() throws Exception
{    Factory<SecurityManager> factory = new IniSecurityManagerFactory("classpath:shiroBankServiceTest.ini");    SecurityManager securityManager = factory.getInstance();    SecurityUtils.setSecurityManager(securityManager);    service = new SecureBankService();    service.start();}
ece20925fce346cce8156286e6fb6c3527c97916e4c6ffa79543eac2f6cc7e6d
tearDownClass
public static void tearDownClass()
{    if (service != null) {        service.dispose();    }}
9d69bfd2a279cacda04001b1c50c6f6698b00750596931407928c5a8169d56b7
setUp
public void setUp() throws Exception
{    logger.info("\n\n#########################\n### STARTING TEST CASE " + (++testCounter) + "\n");    Thread.sleep(50);}
39e5ba029cc67f6f1d45c6d20f0df595ec16bc61da20d7680fcbbdae4fe7f95b
tearDown
public void tearDown()
{    if (_subject != null) {        _subject.logout();    }}
81ed1d92c5d4f61224685ee1d8845baef8597ae29c5d1d6b0fe755de613ddb4a
logoutCurrentSubject
protected void logoutCurrentSubject()
{    if (_subject != null) {        _subject.logout();    }}
7c2db101ed358f8800993ba997cfdc8e4aec598eebe531fffb0bdbd7c822a8ad
loginAsUser
protected void loginAsUser()
{    if (_subject == null) {        _subject = SecurityUtils.getSubject();    }        _subject.login(new UsernamePasswordToken("dan", "123"));}
e5909418668b077dde42193d834b984b01af72c6f55391c5fbb8e9215dce444f
loginAsSuperviser
protected void loginAsSuperviser()
{    if (_subject == null) {        _subject = SecurityUtils.getSubject();    }        _subject.login(new UsernamePasswordToken("sally", "1234"));}
a16a9226f72f96f4c9617e2553a1420971f5d10ddb8cd0519c18fe66ecd4f77b
testCreateAccount
public void testCreateAccount() throws Exception
{    loginAsUser();    createAndValidateAccountFor("Bob Smith");}
a090e39b3e3c8b8bad75ffe5e318d01bc6bded564a93c12216df3e37376b2d72
testDepositInto_singleTx
public void testDepositInto_singleTx() throws Exception
{    loginAsUser();    long accountId = createAndValidateAccountFor("Joe Smith");    makeDepositAndValidateAccount(accountId, 250, "Joe Smith");}
a8a5cb4ceb3c97ac96f4703ede7a7905fdfe376071198902da7d66f71d350d83
testDepositInto_multiTxs
public void testDepositInto_multiTxs() throws Exception
{    loginAsUser();    long accountId = createAndValidateAccountFor("Everett Smith");    makeDepositAndValidateAccount(accountId, 50, "Everett Smith");    makeDepositAndValidateAccount(accountId, 300, "Everett Smith");    makeDepositAndValidateAccount(accountId, 85, "Everett Smith");    assertAccount("Everett Smith", true, 435, 3, accountId);}
1cd0362a709ffe2fdeca38999903e8300c77c859f0bab48c9eeb00dc3732974d
testWithdrawFrom_emptyAccount
public void testWithdrawFrom_emptyAccount() throws Exception
{    loginAsUser();    long accountId = createAndValidateAccountFor("Wally Smith");    service.withdrawFrom(accountId, 100);}
e01bc1e3a6df71aca5852837cdf4a61c98533de61369039a57b49e65a4334a96
testWithdrawFrom_notEnoughFunds
public void testWithdrawFrom_notEnoughFunds() throws Exception
{    loginAsUser();    long accountId = createAndValidateAccountFor("Frank Smith");    makeDepositAndValidateAccount(accountId, 50, "Frank Smith");    service.withdrawFrom(accountId, 100);}
3037fc95b25326bcee39ee0d0c3e16b04773da065da62e6b5f32c723698d9389
testWithdrawFrom_singleTx
public void testWithdrawFrom_singleTx() throws Exception
{    loginAsUser();    long accountId = createAndValidateAccountFor("Al Smith");    makeDepositAndValidateAccount(accountId, 500, "Al Smith");    makeWithdrawalAndValidateAccount(accountId, 100, "Al Smith");    assertAccount("Al Smith", true, 400, 2, accountId);}
e9d80655aa2d4425fdb36aa0fc30bcd6184885e0172011995703e48011b43a7b
testWithdrawFrom_manyTxs
public void testWithdrawFrom_manyTxs() throws Exception
{    loginAsUser();    long accountId = createAndValidateAccountFor("Zoe Smith");    makeDepositAndValidateAccount(accountId, 500, "Zoe Smith");    makeWithdrawalAndValidateAccount(accountId, 100, "Zoe Smith");    makeWithdrawalAndValidateAccount(accountId, 75, "Zoe Smith");    makeWithdrawalAndValidateAccount(accountId, 125, "Zoe Smith");    assertAccount("Zoe Smith", true, 200, 4, accountId);}
b13070cb13d38a95978168eb0cb77e5aefd799973819c6ea3b731f00a99c5fc9
testWithdrawFrom_upToZero
public void testWithdrawFrom_upToZero() throws Exception
{    loginAsUser();    long accountId = createAndValidateAccountFor("Zoe Smith");    makeDepositAndValidateAccount(accountId, 500, "Zoe Smith");    makeWithdrawalAndValidateAccount(accountId, 500, "Zoe Smith");    assertAccount("Zoe Smith", true, 0, 2, accountId);}
adade732fdbeb0f4f3ae7ff2ad9baf3f1b4e6fd5f651c4e5e1863ab1efdce6c9
testCloseAccount_zeroBalance
public void testCloseAccount_zeroBalance() throws Exception
{    loginAsUser();    long accountId = createAndValidateAccountFor("Chris Smith");    logoutCurrentSubject();    loginAsSuperviser();    double closingBalance = service.closeAccount(accountId);    Assert.assertEquals(0, (int) closingBalance);    assertAccount("Chris Smith", false, 0, 1, accountId);}
aa5770eeb2c75f3bf0da9317c155acc5776bdfcf15b72abf259da6cdec5ecf73
testCloseAccount_withBalance
public void testCloseAccount_withBalance() throws Exception
{    loginAsUser();    long accountId = createAndValidateAccountFor("Gerry Smith");    makeDepositAndValidateAccount(accountId, 385, "Gerry Smith");    logoutCurrentSubject();    loginAsSuperviser();    double closingBalance = service.closeAccount(accountId);    Assert.assertEquals(385, (int) closingBalance);    assertAccount("Gerry Smith", false, 0, 2, accountId);}
1b9248df2fc8ebf93aaaf79e9f37cfcf945fa6d4af82502441031b5b9a562428
testCloseAccount_alreadyClosed
public void testCloseAccount_alreadyClosed() throws Exception
{    loginAsUser();    long accountId = createAndValidateAccountFor("Chris Smith");    logoutCurrentSubject();    loginAsSuperviser();    double closingBalance = service.closeAccount(accountId);    Assert.assertEquals(0, (int) closingBalance);    assertAccount("Chris Smith", false, 0, 1, accountId);    service.closeAccount(accountId);}
b5262d092191d9378a39da240ea01b412a09da680aa07ca6876ad9d5e1ac4bdb
testCloseAccount_unauthorizedAttempt
public void testCloseAccount_unauthorizedAttempt() throws Exception
{    loginAsUser();    long accountId = createAndValidateAccountFor("Chris Smith");    service.closeAccount(accountId);}
86e7c2465feb03554e1c4311e246345522b43f7157212fb632a7b363dbb3ede2
createAndValidateAccountFor
protected long createAndValidateAccountFor(String anOwner) throws Exception
{    long createdId = service.createNewAccount(anOwner);    assertAccount(anOwner, true, 0, 0, createdId);    return createdId;}
c7c7f8b25ee131ef2d16e2a262309ce5f350bb4f52cc9e39707944e8afc6271b
makeDepositAndValidateAccount
protected double makeDepositAndValidateAccount(long anAccountId, int anAmount, String eOwnerName) throws Exception
{    double previousBalance = service.getBalanceOf(anAccountId);    int previousTxCount = service.getTxHistoryFor(anAccountId).length;    double newBalance = service.depositInto(anAccountId, anAmount);    Assert.assertEquals((int) previousBalance + anAmount, (int) newBalance);    assertAccount(eOwnerName, true, (int) newBalance, 1 + previousTxCount, anAccountId);    return newBalance;}
8314538722f5e7c8b85a7ff969d5bb23e30f0cd1075b58f30a948774d16df048
makeWithdrawalAndValidateAccount
protected double makeWithdrawalAndValidateAccount(long anAccountId, int anAmount, String eOwnerName) throws Exception
{    double previousBalance = service.getBalanceOf(anAccountId);    int previousTxCount = service.getTxHistoryFor(anAccountId).length;    double newBalance = service.withdrawFrom(anAccountId, anAmount);    Assert.assertEquals((int) previousBalance - anAmount, (int) newBalance);    assertAccount(eOwnerName, true, (int) newBalance, 1 + previousTxCount, anAccountId);    return newBalance;}
a802793d673dba8d248027c5aeb9a6878ad3ba75ce1804a47330bc8c6767923d
assertAccount
public static void assertAccount(String eOwnerName, boolean eIsActive, int eBalance, int eTxLogCount, long actualAccountId) throws Exception
{    Assert.assertEquals(eOwnerName, service.getOwnerOf(actualAccountId));    Assert.assertEquals(eIsActive, service.isAccountActive(actualAccountId));    Assert.assertEquals(eBalance, (int) service.getBalanceOf(actualAccountId));    Assert.assertEquals(eTxLogCount, service.getTxHistoryFor(actualAccountId).length);}
a7cea521ef38610ad8529f9333fcd977747c640fad62503f45b6d540bd683833
contextInitialized
public void contextInitialized(final ServletContextEvent servletContextEvent)
{    this.servletContext = servletContextEvent.getServletContext();    super.contextInitialized(servletContextEvent);}
b73e0544fd4fb842a6cd33cde47c3d50a0802e3f8054990efc1827a598f82997
getInjector
protected Injector getInjector()
{        return Guice.createInjector(new SampleShiroNativeSessionsServletModule(servletContext), ShiroWebModule.guiceFilterModule());}
bbbd43b6cce2fa5a2b3c044c8caafdc61177a774bb08e12cd12d7e2bb3d03045
configureShiroWeb
protected void configureShiroWeb()
{    bindConstant().annotatedWith(Names.named("shiro.loginUrl")).to("/login.jsp");    try {        this.bindRealm().toConstructor(IniRealm.class.getConstructor(Ini.class));    } catch (NoSuchMethodException e) {        addError("Could not locate proper constructor for IniRealm.", e);    }    this.addFilterChain("/login.jsp", AUTHC);    this.addFilterChain("/logout", LOGOUT);    this.addFilterChain("/account/**", AUTHC);    this.addFilterChain("/remoting/**", filterConfig(AUTHC), filterConfig(ROLES, "b2bClient"), filterConfig(PERMS, "remote:invoke:lan,wan"));}
c94374792d4a2d666c14c70650c7cf7c3fcd2eacc7e05c5bace05a72e8a18b26
loadShiroIni
 Ini loadShiroIni() throws MalformedURLException
{    URL iniUrl = servletContext.getResource("/WEB-INF/shiro.ini");    return Ini.fromResourcePath("url:" + iniUrl.toExternalForm());}
2b0506a3c76260df6b05f503fcc2aa66d5f0ce7ae4e8f61c15f0fd9fdbb74de1
bindSessionManager
protected void bindSessionManager(AnnotatedBindingBuilder<SessionManager> bind)
{    bind.to(DefaultWebSessionManager.class);    bindConstant().annotatedWith(Names.named("shiro.globalSessionTimeout")).to(5000L);    bindConstant().annotatedWith(Names.named("shiro.sessionIdUrlRewritingEnabled")).to(false);    bind(DefaultWebSessionManager.class);    bind(Cookie.class).toInstance(new SimpleCookie("myCookie"));}
0d654944e1aeddffedbffede17f039e95a2c0e3458417603d6761aa9aaa34ad6
bindWebSecurityManager
protected void bindWebSecurityManager(AnnotatedBindingBuilder<? super WebSecurityManager> bind)
{    try {        String cipherKey = loadShiroIni().getSectionProperty("main", "securityManager.rememberMeManager.cipherKey");        DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();        CookieRememberMeManager rememberMeManager = new CookieRememberMeManager();        rememberMeManager.setCipherKey(Base64.decode(cipherKey));        securityManager.setRememberMeManager(rememberMeManager);        bind.toInstance(securityManager);    } catch (MalformedURLException e) {                throw new ConfigurationException("securityManager.rememberMeManager.cipherKey must be set in shiro.ini.");    }}
bbbd43b6cce2fa5a2b3c044c8caafdc61177a774bb08e12cd12d7e2bb3d03045
configureShiroWeb
protected void configureShiroWeb()
{    bindConstant().annotatedWith(Names.named("shiro.loginUrl")).to("/login.jsp");    try {        this.bindRealm().toConstructor(IniRealm.class.getConstructor(Ini.class));    } catch (NoSuchMethodException e) {        addError("Could not locate proper constructor for IniRealm.", e);    }    this.addFilterChain("/login.jsp", AUTHC);    this.addFilterChain("/logout", LOGOUT);    this.addFilterChain("/account/**", AUTHC);    this.addFilterChain("/remoting/**", filterConfig(AUTHC), filterConfig(ROLES, "b2bClient"), filterConfig(PERMS, "remote:invoke:lan,wan"));}
c94374792d4a2d666c14c70650c7cf7c3fcd2eacc7e05c5bace05a72e8a18b26
loadShiroIni
 Ini loadShiroIni() throws MalformedURLException
{    URL iniUrl = servletContext.getResource("/WEB-INF/shiro.ini");    return Ini.fromResourcePath("url:" + iniUrl.toExternalForm());}
0d654944e1aeddffedbffede17f039e95a2c0e3458417603d6761aa9aaa34ad6
bindWebSecurityManager
protected void bindWebSecurityManager(AnnotatedBindingBuilder<? super WebSecurityManager> bind)
{    try {        String cipherKey = loadShiroIni().getSectionProperty("main", "securityManager.rememberMeManager.cipherKey");        DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();        CookieRememberMeManager rememberMeManager = new CookieRememberMeManager();        rememberMeManager.setCipherKey(Base64.decode(cipherKey));        securityManager.setRememberMeManager(rememberMeManager);        bind.toInstance(securityManager);    } catch (MalformedURLException e) {                throw new ConfigurationException("securityManager.rememberMeManager.cipherKey must be set in shiro.ini.");    }}
80eec807d7a34dda0c413e19376f12098c10f88424e72f15bf56cc9c531c6562
logOut
public void logOut() throws IOException
{        final HtmlPage homePage = webClient.getPage(getBaseUri());    try {        homePage.getAnchorByHref("/logout").click();    } catch (ElementNotFoundException e) {        }}
d624f725389c68d9482e9ee788fa1fe8c7b46634031ec4a41ed7751687f829c4
logIn
public void logIn() throws FailingHttpStatusCodeException, MalformedURLException, IOException, InterruptedException
{    HtmlPage page = webClient.getPage(getBaseUri() + "login.jsp");    HtmlForm form = page.getFormByName("loginform");    form.<HtmlInput>getInputByName("username").setValueAttribute("root");    form.<HtmlInput>getInputByName("password").setValueAttribute("secret");    page = form.<HtmlInput>getInputByName("submit").click();        page.getAnchorByHref("/logout");}
e28941ac691283e5debef553d668a12458c7aa0d5da972f67c4580d965e80f7c
logInAndRememberMe
public void logInAndRememberMe() throws Exception
{    HtmlPage page = webClient.getPage(getBaseUri() + "login.jsp");    HtmlForm form = page.getFormByName("loginform");    form.<HtmlInput>getInputByName("username").setValueAttribute("root");    form.<HtmlInput>getInputByName("password").setValueAttribute("secret");    HtmlCheckBoxInput checkbox = form.getInputByName("rememberMe");    checkbox.setChecked(true);    page = form.<HtmlInput>getInputByName("submit").click();    jetty.stop();    jetty.start();    page = webClient.getPage(getBaseUri());        WebAssert.assertLinkPresentWithText(page, "Log out");    page = page.getAnchorByHref("/account").click();        WebAssert.assertFormPresent(page, "loginform");}
30312de83ce99da9de7c67a9cc4a98fe4e06784fc97cb42432b92f56a59699b3
saySomething
public String saySomething(@QueryParam("words") @DefaultValue("Hello!") String words)
{    return words;}
8c2b382d5784c18ca666b0eeb45a552ccdf71a4e760d8049687615d01dcc2837
protectedByRequiresPermissions
public String protectedByRequiresPermissions()
{    return "protected";}
92ca3b4d7a400b549837bdf95a9a067f6989aa861d92a73e480cce16c9d9316a
protectedByRequiresRoles
public String protectedByRequiresRoles()
{    return "protected";}
e87b68f1168416c59854411dbb5bc66405ae36cd25c94a430f7b178cd53c84d6
protectedByRequiresUser
public String protectedByRequiresUser()
{    return "protected";}
328d5e91a87421a5941db914257be4e171f44829fc128f7af852ee2ef9ec1860
protectedByRequiresGuest
public String protectedByRequiresGuest()
{    return "not protected";}
8488a25954174103ad0dc929664bc5b2b908197f011f52134929ac22ee07dd09
protectedByRequiresAuthentication
public String protectedByRequiresAuthentication()
{    return "protected";}
74479314c585abfed62b3674589541de7555ab38ac6a1db15f9026ef354b7e76
getClasses
public Set<Class<?>> getClasses()
{    Set<Class<?>> classes = new HashSet<Class<?>>();        classes.add(ShiroFeature.class);        classes.add(HelloResource.class);    classes.add(SecureResource.class);    return classes;}
3116ea2053d9de960ec3753eb07f3d243c370662aa1f0175ad357057c9ce5a52
main
public static void main(String[] args)
{                            Factory<SecurityManager> factory = new IniSecurityManagerFactory("classpath:shiro.ini");    SecurityManager securityManager = factory.getInstance();                            SecurityUtils.setSecurityManager(securityManager);            Subject currentUser = SecurityUtils.getSubject();        Session session = currentUser.getSession();    session.setAttribute("someKey", "aValue");    String value = (String) session.getAttribute("someKey");    if (value.equals("aValue")) {        log.info("Retrieved the correct value! [" + value + "]");    }        if (!currentUser.isAuthenticated()) {        UsernamePasswordToken token = new UsernamePasswordToken("lonestarr", "vespa");        token.setRememberMe(true);        try {            currentUser.login(token);        } catch (UnknownAccountException uae) {            log.info("There is no user with username of " + token.getPrincipal());        } catch (IncorrectCredentialsException ice) {            log.info("Password for account " + token.getPrincipal() + " was incorrect!");        } catch (LockedAccountException lae) {            log.info("The account for username " + token.getPrincipal() + " is locked.  " + "Please contact your administrator to unlock it.");        }         catch (AuthenticationException ae) {                }    }            log.info("User [" + currentUser.getPrincipal() + "] logged in successfully.");        if (currentUser.hasRole("schwartz")) {        log.info("May the Schwartz be with you!");    } else {        log.info("Hello, mere mortal.");    }        if (currentUser.isPermitted("lightsaber:wield")) {        log.info("You may use a lightsaber ring.  Use it wisely.");    } else {        log.info("Sorry, lightsaber rings are for schwartz masters only.");    }        if (currentUser.isPermitted("winnebago:drive:eagle5")) {        log.info("You are permitted to 'drive' the winnebago with license plate (id) 'eagle5'.  " + "Here are the keys - have fun!");    } else {        log.info("Sorry, you aren't allowed to drive the 'eagle5' winnebago!");    }        currentUser.logout();    System.exit(0);}
3116ea2053d9de960ec3753eb07f3d243c370662aa1f0175ad357057c9ce5a52
main
public static void main(String[] args)
{        Injector injector = Guice.createInjector(new QuickstartShiroModule());    SecurityManager securityManager = injector.getInstance(SecurityManager.class);                            SecurityUtils.setSecurityManager(securityManager);            Subject currentUser = SecurityUtils.getSubject();        Session session = currentUser.getSession();    session.setAttribute("someKey", "aValue");    String value = (String) session.getAttribute("someKey");    if (value.equals("aValue")) {        log.info("Retrieved the correct value! [" + value + "]");    }        if (!currentUser.isAuthenticated()) {        UsernamePasswordToken token = new UsernamePasswordToken("lonestarr", "vespa");        token.setRememberMe(true);        try {            currentUser.login(token);        } catch (UnknownAccountException uae) {            log.info("There is no user with username of " + token.getPrincipal());        } catch (IncorrectCredentialsException ice) {            log.info("Password for account " + token.getPrincipal() + " was incorrect!");        } catch (LockedAccountException lae) {            log.info("The account for username " + token.getPrincipal() + " is locked.  " + "Please contact your administrator to unlock it.");        }         catch (AuthenticationException ae) {                }    }            log.info("User [" + currentUser.getPrincipal() + "] logged in successfully.");        if (currentUser.hasRole("schwartz")) {        log.info("May the Schwartz be with you!");    } else {        log.info("Hello, mere mortal.");    }        if (currentUser.isPermitted("lightsaber:weild")) {        log.info("You may use a lightsaber ring.  Use it wisely.");    } else {        log.info("Sorry, lightsaber rings are for schwartz masters only.");    }        if (currentUser.isPermitted("winnebago:drive:eagle5")) {        log.info("You are permitted to 'drive' the winnebago with license plate (id) 'eagle5'.  " + "Here are the keys - have fun!");    } else {        log.info("Sorry, you aren't allowed to drive the 'eagle5' winnebago!");    }        currentUser.logout();    System.exit(0);}
a01bffd7ffadb0cc7d69f95d376a3982f61a657101247c69f8a59229dbb6196c
configureShiro
protected void configureShiro()
{    try {        bindRealm().toConstructor(IniRealm.class.getConstructor(Ini.class));    } catch (NoSuchMethodException e) {        addError(e);    }}
6b8357655d6c3f122948d2e55f0c1c74bd4206ab222ab353f6ec6ba5e327e18e
loadShiroIni
 Ini loadShiroIni()
{    return Ini.fromResourcePath("classpath:shiro.ini");}
80eec807d7a34dda0c413e19376f12098c10f88424e72f15bf56cc9c531c6562
logOut
public void logOut() throws IOException
{        final HtmlPage homePage = webClient.getPage(getBaseUri());    try {        homePage.getAnchorByHref("/logout").click();    } catch (ElementNotFoundException e) {        }}
d624f725389c68d9482e9ee788fa1fe8c7b46634031ec4a41ed7751687f829c4
logIn
public void logIn() throws FailingHttpStatusCodeException, MalformedURLException, IOException, InterruptedException
{    HtmlPage page = webClient.getPage(getBaseUri() + "login.jsp");    HtmlForm form = page.getFormByName("loginform");    form.<HtmlInput>getInputByName("username").setValueAttribute("root");    form.<HtmlInput>getInputByName("password").setValueAttribute("secret");    page = form.<HtmlInput>getInputByName("submit").click();        page.getAnchorByHref("/logout");}
b83fb28ba53d798bc2ffbff8448001d7aadaab65d92484c999999b7d6224857d
realm
public Realm realm()
{    TextConfigurationRealm realm = new TextConfigurationRealm();    realm.setUserDefinitions("joe.coder=password,user\n" + "jill.coder=password,admin");    realm.setRoleDefinitions("admin=read,write\n" + "user=read");    realm.setCachingEnabled(true);    return realm;}
3116ea2053d9de960ec3753eb07f3d243c370662aa1f0175ad357057c9ce5a52
main
public static void main(String[] args)
{    AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(CliApp.class);    context.getBean(QuickStart.class).run();}
4560d80c2474cc2770be19fbc06c60741920c59992e6b13524f8a5b688ec285a
run
public void run()
{        Subject subject = SecurityUtils.getSubject();        Assert.isTrue(!subject.isAuthenticated());        UsernamePasswordToken token = new UsernamePasswordToken("joe.coder", "password");    subject.login(token);        subject.checkRole("user");        Assert.isTrue(!subject.hasRole("admin"));        subject.checkPermission("read");        simpleService.readRestrictedCall();    try {                simpleService.writeRestrictedCall();    } catch (AuthorizationException e) {        log.info("Subject was NOT allowed to execute method 'writeRestrictedCall'");    }        subject.logout();    Assert.isTrue(!subject.isAuthenticated());}
1797f57346aeb33d8ae5595bdf32fe25cd82b41475151a23f332abb82e36281a
initStaticSecurityManager
private void initStaticSecurityManager()
{    SecurityUtils.setSecurityManager(securityManager);}
8feb0f16fd2862106c441da52eaf3f9e1b58707293d0e6cc552d872e4ebbc1e9
writeRestrictedCall
public void writeRestrictedCall()
{    log.info("executing method that requires the 'write' permission");}
8e14d2290fa05eab2ddd91bc170f462b4805928f3f8be5bf218546b4edddaae4
readRestrictedCall
public void readRestrictedCall()
{    log.info("executing method that requires the 'read' permission");}
3116ea2053d9de960ec3753eb07f3d243c370662aa1f0175ad357057c9ce5a52
main
public static void main(String[] args)
{    ConfigurableApplicationContext context = SpringApplication.run(CliApp.class, args);        context.getBean(QuickStart.class).run();}
b83fb28ba53d798bc2ffbff8448001d7aadaab65d92484c999999b7d6224857d
realm
public Realm realm()
{    TextConfigurationRealm realm = new TextConfigurationRealm();    realm.setUserDefinitions("joe.coder=password,user\n" + "jill.coder=password,admin");    realm.setRoleDefinitions("admin=read,write\n" + "user=read");    realm.setCachingEnabled(true);    return realm;}
4560d80c2474cc2770be19fbc06c60741920c59992e6b13524f8a5b688ec285a
run
public void run()
{        Subject subject = SecurityUtils.getSubject();        Assert.isTrue(!subject.isAuthenticated());        UsernamePasswordToken token = new UsernamePasswordToken("joe.coder", "password");    subject.login(token);        subject.checkRole("user");        Assert.isTrue(!subject.hasRole("admin"));        subject.checkPermission("read");        simpleService.readRestrictedCall();    try {                simpleService.writeRestrictedCall();    } catch (AuthorizationException e) {        log.info("Subject was NOT allowed to execute method 'writeRestrictedCall'");    }        subject.logout();    Assert.isTrue(!subject.isAuthenticated());}
1797f57346aeb33d8ae5595bdf32fe25cd82b41475151a23f332abb82e36281a
initStaticSecurityManager
private void initStaticSecurityManager()
{    SecurityUtils.setSecurityManager(securityManager);}
8feb0f16fd2862106c441da52eaf3f9e1b58707293d0e6cc552d872e4ebbc1e9
writeRestrictedCall
public void writeRestrictedCall()
{    log.info("executing method that requires the 'write' permission");}
8e14d2290fa05eab2ddd91bc170f462b4805928f3f8be5bf218546b4edddaae4
readRestrictedCall
public void readRestrictedCall()
{    log.info("executing method that requires the 'read' permission");}
553548724ea5dab9084e5c19f96c299b6d59224dfc45a73141d890606cc23932
home
public String home(Model model)
{    String name = "World";    Subject subject = SecurityUtils.getSubject();    PrincipalCollection principalCollection = subject.getPrincipals();    if (principalCollection != null && !principalCollection.isEmpty()) {        name = principalCollection.getPrimaryPrincipal().toString();    }    model.addAttribute("name", name);    return "account-info";}
5f1d70579639171c9f29f78b798a8993f8b501f98e3af45ec785144cd71c8380
home
public String home(HttpServletRequest request, Model model)
{    String name = "World";    Subject subject = SecurityUtils.getSubject();    PrincipalCollection principalCollection = subject.getPrincipals();    if (principalCollection != null && !principalCollection.isEmpty()) {        Collection<Map> principalMaps = subject.getPrincipals().byType(Map.class);        if (CollectionUtils.isEmpty(principalMaps)) {            name = subject.getPrincipal().toString();        } else {            name = (String) principalMaps.iterator().next().get("username");        }    }    model.addAttribute("name", name);    return "hello";}
d62456e21a5a84d75452d4194003a203481a11d9ef99d8f24171422032e29e60
loginTemplate
public String loginTemplate()
{    return "login";}
a392acb42f2214a0515f228a9253859fdd2e68d8027bbad534e59ef531e206ae
getErrorPath
public String getErrorPath()
{    return ERROR_PATH;}
20bb928813992ff4981a02f91216524a7ba4ffa436a1996e6cf3a5d04e506d24
error
 String error(HttpServletRequest request, Model model)
{    Map<String, Object> errorMap = errorAttributes.getErrorAttributes(new ServletWebRequest(request), false);    model.addAttribute("errors", errorMap);    return "error";}
3116ea2053d9de960ec3753eb07f3d243c370662aa1f0175ad357057c9ce5a52
main
public static void main(String[] args)
{    SpringApplication.run(WebApp.class, args);}
8843169822d3ceb0c8950fdd470ebc1f43dea5c6ccc7525369071183c8b7455e
handleException
public String handleException(AuthorizationException e, Model model)
{            log.debug("AuthorizationException was thrown", e);    Map<String, Object> map = new HashMap<String, Object>();    map.put("status", HttpStatus.FORBIDDEN.value());    map.put("message", "No message available");    model.addAttribute("errors", map);    return "error";}
b83fb28ba53d798bc2ffbff8448001d7aadaab65d92484c999999b7d6224857d
realm
public Realm realm()
{    TextConfigurationRealm realm = new TextConfigurationRealm();    realm.setUserDefinitions("joe.coder=password,user\n" + "jill.coder=password,admin");    realm.setRoleDefinitions("admin=read,write\n" + "user=read");    realm.setCachingEnabled(true);    return realm;}
f585bf383be509f5db40114fc4b645c17414690cb3c9226ba908a2e8260f44be
shiroFilterChainDefinition
public ShiroFilterChainDefinition shiroFilterChainDefinition()
{    DefaultShiroFilterChainDefinition chainDefinition = new DefaultShiroFilterChainDefinition();        chainDefinition.addPathDefinition("/login.html", "authc");    chainDefinition.addPathDefinition("/logout", "logout");    return chainDefinition;}
3cef4ab3833b99ee404560fd6c2cb9e915ccc3adee9f073e5f22e455378dc50c
subject
public Subject subject()
{    return SecurityUtils.getSubject();}
3116ea2053d9de960ec3753eb07f3d243c370662aa1f0175ad357057c9ce5a52
main
public static void main(String[] args)
{        if (args.length > 0)        LAUNCH_SESSION_ID = args[0];    new ClassPathXmlApplicationContext("webstart.spring.xml");}
4838f4e13c5b21a493bbb71782835f2f6e73c5dfe9a84fbded6193e2d6e8b085
setSampleManager
public void setSampleManager(SampleManager sampleManager)
{    this.sampleManager = sampleManager;}
39feaf512727587ea628c30cafa4227d3abe7a1c885d09566a3e296255d2bd02
afterPropertiesSet
public void afterPropertiesSet() throws Exception
{    ClassPathResource resource = new ClassPathResource("logo.png");    ImageIcon icon = new ImageIcon(resource.getURL());    JLabel logo = new JLabel(icon);    valueField = new JTextField(20);    updateValueLabel();    saveButton = new JButton("Save Value");    saveButton.addActionListener(this);    refreshButton = new JButton("Refresh Value");    refreshButton.addActionListener(this);    JPanel valuePanel = new JPanel(new FlowLayout(FlowLayout.CENTER));    valuePanel.add(valueField);    valuePanel.add(saveButton);    valuePanel.add(refreshButton);    secureMethod1Button = new JButton("Method #1");    secureMethod1Button.addActionListener(this);    secureMethod2Button = new JButton("Method #2");    secureMethod2Button.addActionListener(this);    secureMethod3Button = new JButton("Method #3");    secureMethod3Button.addActionListener(this);    JPanel methodPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));    methodPanel.add(secureMethod1Button);    methodPanel.add(secureMethod2Button);    methodPanel.add(secureMethod3Button);    frame = new JFrame("Apache Shiro Sample Application");    frame.setSize(500, 200);    Container panel = frame.getContentPane();    panel.setLayout(new BorderLayout());    panel.add(logo, BorderLayout.NORTH);    panel.add(valuePanel, BorderLayout.CENTER);    panel.add(methodPanel, BorderLayout.SOUTH);    frame.setVisible(true);    frame.addWindowListener(new WindowAdapter() {        public void windowClosing(WindowEvent e) {            System.exit(0);        }    });}
a0c922349febb150d28dd70c0f056255958f8cc0890df5d8a70725bd52f963d6
windowClosing
public void windowClosing(WindowEvent e)
{    System.exit(0);}
7142791a7180812cb08bdd3e7cc919c664dcee9854204f3cb3204b8fbf1fa967
updateValueLabel
private void updateValueLabel()
{    valueField.setText(sampleManager.getValue());}
b383c4a073cb193838350745a02cbc37fea526ebea3aad6d1cc1545c45f38574
actionPerformed
public void actionPerformed(ActionEvent e)
{    try {        if (e.getSource() == saveButton) {            sampleManager.setValue(valueField.getText());        } else if (e.getSource() == refreshButton) {            updateValueLabel();        } else if (e.getSource() == secureMethod1Button) {            sampleManager.secureMethod1();            JOptionPane.showMessageDialog(frame, "Method #1 successfully called.", "Success", JOptionPane.INFORMATION_MESSAGE);        } else if (e.getSource() == secureMethod2Button) {            sampleManager.secureMethod2();            JOptionPane.showMessageDialog(frame, "Method #2 successfully called.", "Success", JOptionPane.INFORMATION_MESSAGE);        } else if (e.getSource() == secureMethod3Button) {            sampleManager.secureMethod3();            JOptionPane.showMessageDialog(frame, "Method #3 successfully called.", "Success", JOptionPane.INFORMATION_MESSAGE);        } else {            throw new RuntimeException("Unexpected action event from source: " + e.getSource());        }    } catch (AuthorizationException ae) {        JOptionPane.showMessageDialog(frame, "Unauthorized to perform action: " + ae.getMessage(), "Unauthorized", JOptionPane.WARNING_MESSAGE);    }}
057cead9360279fc7a4b4e9a61414aa24e6f8181e6320f93d280d56de42500fd
setDataSource
public void setDataSource(DataSource dataSource)
{    this.dataSource = dataSource;}
9374b6dee252b1695fcbc6b0ad0a62bd2112dc8acabd270ce280c737d0037374
setSessionFactory
public void setSessionFactory(SessionFactory sessionFactory)
{    this.sessionFactory = sessionFactory;}
39feaf512727587ea628c30cafa4227d3abe7a1c885d09566a3e296255d2bd02
afterPropertiesSet
public void afterPropertiesSet() throws Exception
{            JdbcTemplate jdbcTemplate = new JdbcTemplate(this.dataSource);    jdbcTemplate.execute("insert into roles values (1, 'user', 'The default role given to all users.')");    jdbcTemplate.execute("insert into roles values (2, 'admin', 'The administrator role only given to site admins')");    jdbcTemplate.execute("insert into roles_permissions values (2, 'user:*')");    jdbcTemplate.execute("insert into users(id,username,email,password) values (1, 'admin', 'sample@shiro.apache.org', '" + new Sha256Hash("admin").toHex() + "')");    jdbcTemplate.execute("insert into users_roles values (1, 2)");}
9374b6dee252b1695fcbc6b0ad0a62bd2112dc8acabd270ce280c737d0037374
setSessionFactory
public void setSessionFactory(SessionFactory sessionFactory)
{    this.sessionFactory = sessionFactory;}
d9547d82f21fae987c0755d26b985bf504321cf6eb77372de06df2f22f592eae
getSession
public Session getSession()
{    return sessionFactory.getCurrentSession();}
24cd60625afb50dfece09b4f38377ac775e8e23af6ee1e0f8d2f84043ed4898e
getUser
public User getUser(Long userId)
{    return (User) getSession().get(User.class, userId);}
e949bb2814fe874345b8f56e105cb1d9635ad1867a16b2cdec78acf9b08fe822
findUser
public User findUser(String username)
{    Assert.hasText(username);    String query = "from User u where u.username = :username";    return (User) getSession().createQuery(query).setString("username", username).uniqueResult();}
0107b33122dc851564b7aa65d1cbd73e37f7d308de8339e2ba294237c0d4f586
createUser
public void createUser(User user)
{    getSession().save(user);}
4e3604132c57adef4268b1ad6b9b2dc40047454d10d4c7cab5b829628258fd59
getAllUsers
public List<User> getAllUsers()
{    return getSession().createQuery("from User order by username").list();}
d18810dc1a9fee3eabdd00b5e530788abcf1d1be2a1a46374c2979c2a1ea76d0
deleteUser
public void deleteUser(Long userId)
{    User user = getUser(userId);    if (user != null) {        getSession().delete(user);    }}
0489a8c08ec2e098c39912196ed535e75b63720090e58be5d0741d4781d5c282
updateUser
public void updateUser(User user)
{    getSession().update(user);}
f734c2eebae9a730cc7699b15559fb359d3fde242fc8d95d883eb6e678db260e
getId
public Long getId()
{    return id;}
f244308ce1625e52b4f2d91f9d304d40b50af7d199f0957560887f734910fbdf
setId
public void setId(Long id)
{    this.id = id;}
239fbe3eb64d679cbac1161825b07d6a8436ead3c6c3d140d9caec2275827023
getName
public String getName()
{    return name;}
f498f22eaf0816bf385a43365651d1b6d0455905fdd2d6be01ceefeb84e8f432
setName
public void setName(String name)
{    this.name = name;}
706203ef14181d53971fddf5ab6603fcf31442cdccb19cc5e237bca9faee9d63
getDescription
public String getDescription()
{    return description;}
1a211ebf68b221c2c3c67d58559d636c48c482bac17440249777eb28f553a9ad
setDescription
public void setDescription(String description)
{    this.description = description;}
c7c8af65403ce8e94e7d5c82334284be88ecfbda5c16d7d4567b114f3b68ebee
getPermissions
public Set<String> getPermissions()
{    return permissions;}
c22d415b8d58f2852f9f380cf998575eddf9c1a64e458d224c3b328477e300f5
setPermissions
public void setPermissions(Set<String> permissions)
{    this.permissions = permissions;}
f734c2eebae9a730cc7699b15559fb359d3fde242fc8d95d883eb6e678db260e
getId
public Long getId()
{    return id;}
f244308ce1625e52b4f2d91f9d304d40b50af7d199f0957560887f734910fbdf
setId
public void setId(Long id)
{    this.id = id;}
6a70299d74b1ed8da0ff8fec5a1c89ba0dff9b5b133bb2544a0bc6abb19bcee7
getUsername
public String getUsername()
{    return username;}
2aa36d46562fccb437a954b773807392e01e3ad0d16cffa4fd33a5c48073160b
setUsername
public void setUsername(String username)
{    this.username = username;}
3fe5ca7538fb2a9508317550711867e764aecde38780a5e7dee5d78a1dfdd5aa
getEmail
public String getEmail()
{    return email;}
8360207b29db1b4b8e288d68e8b59114c235b84563842ead29812a66599cd970
setEmail
public void setEmail(String email)
{    this.email = email;}
84dc993e9ee2454a836a462d555136356e8d932d11a2a18b6c05e86764987456
getPassword
public String getPassword()
{    return password;}
a3fc85e095b71ade6f23516e300582f2daf9dc9c17a00077a31a992f77c08289
setPassword
public void setPassword(String password)
{    this.password = password;}
f3b79dfd96e4df3500fb866c538f95c20b9b18f5d91e0461e80e5b8e3a081323
getRoles
public Set<Role> getRoles()
{    return roles;}
585fb5d07ee7cb8b87aa998a6e01fd1fd173c080b94cdea734eb01bc40ebe078
setRoles
public void setRoles(Set<Role> roles)
{    this.roles = roles;}
99162dbe3f4830e7afb18f9e98141f51b9cd239fe57519c83c5d2a52b4c815ef
setUserDAO
public void setUserDAO(UserDAO userDAO)
{    this.userDAO = userDAO;}
986b0d4d7b80e543d81b19493649ac8f1e4bf5fa41f4d96d0a4ceec15fd1b518
doGetAuthenticationInfo
protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authcToken) throws AuthenticationException
{    UsernamePasswordToken token = (UsernamePasswordToken) authcToken;    User user = userDAO.findUser(token.getUsername());    if (user != null) {        return new SimpleAuthenticationInfo(user.getId(), user.getPassword(), getName());    } else {        return null;    }}
7d82f766d0b50c20008bf1b1d8345ac21d4827d0c5115d358a603d4f11fb64f3
doGetAuthorizationInfo
protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals)
{    Long userId = (Long) principals.fromRealm(getName()).iterator().next();    User user = userDAO.getUser(userId);    if (user != null) {        SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();        for (Role role : user.getRoles()) {            info.addRole(role.getName());            info.addStringPermissions(role.getPermissions());        }        return info;    } else {        return null;    }}
99162dbe3f4830e7afb18f9e98141f51b9cd239fe57519c83c5d2a52b4c815ef
setUserDAO
public void setUserDAO(UserDAO userDAO)
{    this.userDAO = userDAO;}
5887f8c8173d4f60a92bb04eaf58c5971bd4a116eac60ce896eb2767a0b7b2ab
getCurrentUser
public User getCurrentUser()
{    final Long currentUserId = (Long) SecurityUtils.getSubject().getPrincipal();    if (currentUserId != null) {        return getUser(currentUserId);    } else {        return null;    }}
7cb033cb758cc449b7e7386cbf89fa2b74f89c612618f50a1f5c8b79eb154e86
createUser
public void createUser(String username, String email, String password)
{    User user = new User();    user.setUsername(username);    user.setEmail(email);    user.setPassword(new Sha256Hash(password).toHex());    userDAO.createUser(user);}
4e3604132c57adef4268b1ad6b9b2dc40047454d10d4c7cab5b829628258fd59
getAllUsers
public List<User> getAllUsers()
{    return userDAO.getAllUsers();}
24cd60625afb50dfece09b4f38377ac775e8e23af6ee1e0f8d2f84043ed4898e
getUser
public User getUser(Long userId)
{    return userDAO.getUser(userId);}
d18810dc1a9fee3eabdd00b5e530788abcf1d1be2a1a46374c2979c2a1ea76d0
deleteUser
public void deleteUser(Long userId)
{    userDAO.deleteUser(userId);}
0489a8c08ec2e098c39912196ed535e75b63720090e58be5d0741d4781d5c282
updateUser
public void updateUser(User user)
{    userDAO.updateUser(user);}
f0212b051478d28c160f09971fea9c0f98fe9ed361316da3c4be4d2872c56856
setUserService
public void setUserService(UserService userService)
{    this.userService = userService;}
6183aabac450881257c59812ce47c235c5306cde40e7ae41d29a9449ce80b8ed
postHandle
public void postHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView) throws Exception
{        User currentUser = userService.getCurrentUser();    if (currentUser != null) {        httpServletRequest.setAttribute("currentUser", currentUser);    }}
5dc1070e318a53588aefea1bf824f0a0ad125885e9ebeca40e1fcf40a82ad5b3
getUserId
public Long getUserId()
{    return userId;}
a986be5131db25416704bc9e76f8da2277c6f59e48e953243e253a7fd0af3a96
setUserId
public void setUserId(Long userId)
{    this.userId = userId;}
6a70299d74b1ed8da0ff8fec5a1c89ba0dff9b5b133bb2544a0bc6abb19bcee7
getUsername
public String getUsername()
{    return username;}
2aa36d46562fccb437a954b773807392e01e3ad0d16cffa4fd33a5c48073160b
setUsername
public void setUsername(String username)
{    this.username = username;}
3fe5ca7538fb2a9508317550711867e764aecde38780a5e7dee5d78a1dfdd5aa
getEmail
public String getEmail()
{    return email;}
8360207b29db1b4b8e288d68e8b59114c235b84563842ead29812a66599cd970
setEmail
public void setEmail(String email)
{    this.email = email;}
84dc993e9ee2454a836a462d555136356e8d932d11a2a18b6c05e86764987456
getPassword
public String getPassword()
{    return password;}
a3fc85e095b71ade6f23516e300582f2daf9dc9c17a00077a31a992f77c08289
setPassword
public void setPassword(String password)
{    this.password = password;}
0489a8c08ec2e098c39912196ed535e75b63720090e58be5d0741d4781d5c282
updateUser
public void updateUser(User user)
{    Assert.isTrue(userId.equals(user.getId()), "User ID of command must match the user being updated.");    user.setUsername(getUsername());    user.setEmail(getEmail());    if (StringUtils.hasText(getPassword())) {        user.setPassword(new Sha256Hash(getPassword()).toHex());    }}
8a4586c2de3e56cffbb692b02ff55f6d77def9202e92e08f38a187fad263b020
supports
public boolean supports(Class aClass)
{    return EditUserCommand.class.isAssignableFrom(aClass);}
d45702acd34c07f49e78cd89ec82cac09d5fc1efdb0b15d964b853a353ecf13f
validate
public void validate(Object o, Errors errors)
{    EditUserCommand command = (EditUserCommand) o;    ValidationUtils.rejectIfEmptyOrWhitespace(errors, "username", "error.username.empty", "Please specify a username.");    ValidationUtils.rejectIfEmptyOrWhitespace(errors, "email", "error.email.empty", "Please specify an email address.");    if (StringUtils.hasText(command.getEmail()) && !Pattern.matches(SIMPLE_EMAIL_REGEX, command.getEmail().toUpperCase())) {        errors.rejectValue("email", "error.email.invalid", "Please enter a valid email address.");    }}
f0212b051478d28c160f09971fea9c0f98fe9ed361316da3c4be4d2872c56856
setUserService
public void setUserService(UserService userService)
{    this.userService = userService;}
8bda992b1054889ec4770703399bcf648d52fcb6842762105c5a4077eb9ff679
viewHome
public void viewHome(Model model)
{    model.addAttribute("users", userService.getAllUsers());}
6a70299d74b1ed8da0ff8fec5a1c89ba0dff9b5b133bb2544a0bc6abb19bcee7
getUsername
public String getUsername()
{    return username;}
2aa36d46562fccb437a954b773807392e01e3ad0d16cffa4fd33a5c48073160b
setUsername
public void setUsername(String username)
{    this.username = username;}
84dc993e9ee2454a836a462d555136356e8d932d11a2a18b6c05e86764987456
getPassword
public String getPassword()
{    return password;}
a3fc85e095b71ade6f23516e300582f2daf9dc9c17a00077a31a992f77c08289
setPassword
public void setPassword(String password)
{    this.password = password;}
ed2429bd5404a4724e2c5245224385f456f205f0e707489cdc20d601b8646e06
isRememberMe
public boolean isRememberMe()
{    return rememberMe;}
5af3ec303dcb9240b3eb722b935dd9b96d9fd056ce97421d68a72083d6d1a789
setRememberMe
public void setRememberMe(boolean rememberMe)
{    this.rememberMe = rememberMe;}
8a4586c2de3e56cffbb692b02ff55f6d77def9202e92e08f38a187fad263b020
supports
public boolean supports(Class aClass)
{    return LoginCommand.class.isAssignableFrom(aClass);}
d45702acd34c07f49e78cd89ec82cac09d5fc1efdb0b15d964b853a353ecf13f
validate
public void validate(Object o, Errors errors)
{    ValidationUtils.rejectIfEmptyOrWhitespace(errors, "username", "error.username.empty", "Please specify a username.");    ValidationUtils.rejectIfEmptyOrWhitespace(errors, "password", "error.password.empty", "Please specify a password.");}
f0212b051478d28c160f09971fea9c0f98fe9ed361316da3c4be4d2872c56856
setUserService
public void setUserService(UserService userService)
{    this.userService = userService;}
e3a2d84a03253aaa5a06f2c608f82c3466549144b36faabd3d8fda2d436feb68
manageUsers
public void manageUsers(Model model)
{    model.addAttribute("users", userService.getAllUsers());}
2244a1e4a5ee96d457e75e6614a0dfc60466d0cf6915815939c4c77cf47bc0fe
showEditUserForm
public String showEditUserForm(Model model, @RequestParam Long userId, @ModelAttribute EditUserCommand command)
{    User user = userService.getUser(userId);    command.setUserId(userId);    command.setUsername(user.getUsername());    command.setEmail(user.getEmail());    return "editUser";}
4764e53d9a718fd124bbf6118ac361a38c7391ab2aee276c18a5103d5f7ffa10
editUser
public String editUser(Model model, @RequestParam Long userId, @ModelAttribute EditUserCommand command, BindingResult errors)
{    editUserValidator.validate(command, errors);    if (errors.hasErrors()) {        return "editUser";    }    User user = userService.getUser(userId);    command.updateUser(user);    userService.updateUser(user);    return "redirect:/s/manageUsers";}
b3b7a15b550df1ddba0ceaeb62ffac38aa6a00dd7e38e92c9c07a3652a93d9e8
deleteUser
public String deleteUser(@RequestParam Long userId)
{    Assert.isTrue(userId != 1, "Cannot delete admin user");    userService.deleteUser(userId);    return "redirect:/s/manageUsers";}
b77eb1746c1cd9272ad877848ee5e790a466c797e26e886260b3bf20a0239965
showLoginForm
public String showLoginForm(Model model, @ModelAttribute LoginCommand command)
{    return "login";}
cae3ba5387d4d52e9b13f95450f773886080d7b0a08bfb1a32e255708c79bc48
login
public String login(Model model, @ModelAttribute LoginCommand command, BindingResult errors)
{    loginValidator.validate(command, errors);    if (errors.hasErrors()) {        return showLoginForm(model, command);    }    UsernamePasswordToken token = new UsernamePasswordToken(command.getUsername(), command.getPassword(), command.isRememberMe());    try {        SecurityUtils.getSubject().login(token);    } catch (AuthenticationException e) {        errors.reject("error.login.generic", "Invalid username or password.  Please try again.");    }    if (errors.hasErrors()) {        return showLoginForm(model, command);    } else {        return "redirect:/s/home";    }}
b8f8cae51e7ea40a2cf3d8dfe134c267859b2679bd5727bc5bac17e77cf7906b
logout
public String logout()
{    SecurityUtils.getSubject().logout();    return "redirect:/";}
6a70299d74b1ed8da0ff8fec5a1c89ba0dff9b5b133bb2544a0bc6abb19bcee7
getUsername
public String getUsername()
{    return username;}
2aa36d46562fccb437a954b773807392e01e3ad0d16cffa4fd33a5c48073160b
setUsername
public void setUsername(String username)
{    this.username = username;}
3fe5ca7538fb2a9508317550711867e764aecde38780a5e7dee5d78a1dfdd5aa
getEmail
public String getEmail()
{    return email;}
8360207b29db1b4b8e288d68e8b59114c235b84563842ead29812a66599cd970
setEmail
public void setEmail(String email)
{    this.email = email;}
84dc993e9ee2454a836a462d555136356e8d932d11a2a18b6c05e86764987456
getPassword
public String getPassword()
{    return password;}
a3fc85e095b71ade6f23516e300582f2daf9dc9c17a00077a31a992f77c08289
setPassword
public void setPassword(String password)
{    this.password = password;}
f0212b051478d28c160f09971fea9c0f98fe9ed361316da3c4be4d2872c56856
setUserService
public void setUserService(UserService userService)
{    this.userService = userService;}
9de88eebe5276616257509a0efbe48400cc3079bc1e6b825121d43733a2c7691
showSignupForm
public String showSignupForm(Model model, @ModelAttribute SignupCommand command)
{    return "signup";}
7fe3d710374c83a691af0bbf685e7857f825a00cff09cc35cfd20fd17df69381
showSignupForm
public String showSignupForm(Model model, @ModelAttribute SignupCommand command, BindingResult errors)
{    signupValidator.validate(command, errors);    if (errors.hasErrors()) {        return showSignupForm(model, command);    }        userService.createUser(command.getUsername(), command.getEmail(), command.getPassword());        SecurityUtils.getSubject().login(new UsernamePasswordToken(command.getUsername(), command.getPassword()));    return "redirect:/s/home";}
8a4586c2de3e56cffbb692b02ff55f6d77def9202e92e08f38a187fad263b020
supports
public boolean supports(Class aClass)
{    return SignupCommand.class.isAssignableFrom(aClass);}
d45702acd34c07f49e78cd89ec82cac09d5fc1efdb0b15d964b853a353ecf13f
validate
public void validate(Object o, Errors errors)
{    SignupCommand command = (SignupCommand) o;    ValidationUtils.rejectIfEmptyOrWhitespace(errors, "username", "error.username.empty", "Please specify a username.");    ValidationUtils.rejectIfEmptyOrWhitespace(errors, "email", "error.email.empty", "Please specify an email address.");    if (StringUtils.hasText(command.getEmail()) && !Pattern.matches(SIMPLE_EMAIL_REGEX, command.getEmail().toUpperCase())) {        errors.rejectValue("email", "error.email.invalid", "Please enter a valid email address.");    }    ValidationUtils.rejectIfEmptyOrWhitespace(errors, "password", "error.password.empty", "Please specify a password.");}
80eec807d7a34dda0c413e19376f12098c10f88424e72f15bf56cc9c531c6562
logOut
public void logOut() throws IOException
{        final HtmlPage homePage = webClient.getPage(getBaseUri());    try {        homePage.getAnchorByHref("/s/logout").click();    } catch (ElementNotFoundException e) {        }}
50553b15a523e70034fdd1d4b0c2099deade576437a61308aa33fedfd67b3944
logIn
public void logIn() throws FailingHttpStatusCodeException, IOException, InterruptedException
{    HtmlPage page = webClient.getPage(getBaseUri() + "s/login");    HtmlForm form = page.getFormByName("loginForm");    form.<HtmlInput>getInputByName("username").setValueAttribute("admin");    form.<HtmlInput>getInputByName("password").setValueAttribute("admin");    page = form.<HtmlInput>getInputByValue("Login").click();        page.getAnchorByHref("/s/logout");}
057cead9360279fc7a4b4e9a61414aa24e6f8181e6320f93d280d56de42500fd
setDataSource
public void setDataSource(DataSource dataSource)
{    this.dataSource = dataSource;}
39feaf512727587ea628c30cafa4227d3abe7a1c885d09566a3e296255d2bd02
afterPropertiesSet
public void afterPropertiesSet() throws Exception
{            JdbcTemplate jdbcTemplate = new JdbcTemplate(this.dataSource);    jdbcTemplate.execute(CREATE_TABLES);                        String query = "insert into users values ('user1', '" + new Sha256Hash("user1", "user1").toBase64() + "' )";    jdbcTemplate.execute(query);    log.debug("Created user1.");        query = "insert into users values ( 'user2', '" + new Sha256Hash("user2", "user2").toBase64() + "' )";    jdbcTemplate.execute(query);    log.debug("Created user2.");    query = "insert into roles values ( 'role1' )";    jdbcTemplate.execute(query);    log.debug("Created role1");    query = "insert into roles values ( 'role2' )";    jdbcTemplate.execute(query);    log.debug("Created role2");    query = "insert into roles_permissions values ( 'role1', 'permission1')";    jdbcTemplate.execute(query);    log.debug("Created permission 1 for role 1");    query = "insert into roles_permissions values ( 'role1', 'permission2')";    jdbcTemplate.execute(query);    log.debug("Created permission 2 for role 1");    query = "insert into roles_permissions values ( 'role2', 'permission1')";    jdbcTemplate.execute(query);    log.debug("Created permission 1 for role 2");    query = "insert into user_roles values ( 'user1', 'role1' )";    jdbcTemplate.execute(query);    query = "insert into user_roles values ( 'user1', 'role2' )";    jdbcTemplate.execute(query);    log.debug("Assigned user1 roles role1 and role2");    query = "insert into user_roles values ( 'user2', 'role2' )";    jdbcTemplate.execute(query);    log.debug("Assigned user2 role role2");}
27273e62f2e5689663713a700fe09951a14383782f02783f4cbf0432a89807fc
bootstrapDataPopulator
protected BootstrapDataPopulator bootstrapDataPopulator(DataSource dataSource)
{    BootstrapDataPopulator populator = new BootstrapDataPopulator();    populator.setDataSource(dataSource);    return populator;}
8730f899b5fde39abc2ec5af0b6ed3ecaa0b02ffdbbc86844087ddb43b1c3661
jdbcRealm
protected SaltAwareJdbcRealm jdbcRealm(DataSource dataSource)
{    HashedCredentialsMatcher credentialsMatcher = new HashedCredentialsMatcher();    credentialsMatcher.setHashAlgorithmName("SHA-256");    credentialsMatcher.setStoredCredentialsHexEncoded(false);    SaltAwareJdbcRealm jdbcRealm = new SaltAwareJdbcRealm();    jdbcRealm.setName("jdbcRealm");    jdbcRealm.setCredentialsMatcher(credentialsMatcher);    jdbcRealm.setDataSource(dataSource);    return jdbcRealm;}
cb64423acc7117ddb9661cc072a4af4c2a88c2e455587d0e657abce892feac14
cacheManager
protected EhCacheManager cacheManager()
{    EhCacheManager ehCacheManager = new EhCacheManager();    return ehCacheManager;}
f9dc37238272a1de1a160fcb1855f201ecc51462024514c68503a34e338b4e0b
secureRemoteInvocationExecutor
protected SecureRemoteInvocationExecutor secureRemoteInvocationExecutor(SecurityManager securityManager)
{    SecureRemoteInvocationExecutor executor = new SecureRemoteInvocationExecutor();    executor.setSecurityManager(securityManager);    return executor;}
32d7c94f14f2fa72b9ee1b7cba7501d8b5ae2cc783dedb9e5d278f57133e361d
sampleManager
protected DefaultSampleManager sampleManager()
{    return new DefaultSampleManager();}
6867c49355e2e83cc52ed8502783c87bcf9f4315a25cba260362bfac503364eb
dataSource
protected DriverManagerDataSource dataSource()
{    DriverManagerDataSource dataSource = new DriverManagerDataSource();    dataSource.setDriverClassName("org.hsqldb.jdbcDriver");    dataSource.setUrl("jdbc:hsqldb:mem:shiro-spring");    dataSource.setUsername("sa");    return dataSource;}
f585bf383be509f5db40114fc4b645c17414690cb3c9226ba908a2e8260f44be
shiroFilterChainDefinition
public ShiroFilterChainDefinition shiroFilterChainDefinition()
{    DefaultShiroFilterChainDefinition chainDefinition = new DefaultShiroFilterChainDefinition();            chainDefinition.addPathDefinition("/favicon.ico", "anon");    chainDefinition.addPathDefinition("/logo.png", "anon");    chainDefinition.addPathDefinition("/shiro.css", "anon");    chainDefinition.addPathDefinition("/s/login", "anon");        chainDefinition.addPathDefinition("/*.jar", "anon");        chainDefinition.addPathDefinition("/remoting/**", "anon");    chainDefinition.addPathDefinition("/**", "authc");    return chainDefinition;}
520ad19e89f5f6f09e41416ec73654e1313b9514cb2dfef91b482f731d615f87
getViewResolver
public ViewResolver getViewResolver()
{    InternalResourceViewResolver resolver = new InternalResourceViewResolver();    resolver.setViewClass(JstlView.class);    resolver.setPrefix("/WEB-INF/resources/");    resolver.setSuffix(".jsp");    return resolver;}
452ea237e494aa6e856cebc8e02bc3deb1f1c6af8fa7f76b76e62b566fe419c3
jnlpViewResolver
public ViewResolver jnlpViewResolver()
{    InternalResourceViewResolver resolver = new InternalResourceViewResolver();    resolver.setViewClass(JstlView.class);    resolver.setPrefix("/WEB-INF/jnlp/");    resolver.setSuffix(".jsp");    return resolver;}
304c9a16eee399b97e78f8fb385d0f2e587f8f0f8a37e6695ec1e928d14def87
addResourceHandlers
public void addResourceHandlers(ResourceHandlerRegistry registry)
{    registry.addResourceHandler("*.css", "*.png").addResourceLocations("/");    registry.addResourceHandler("*.jar", "*.pack").addResourceLocations("/WEB-INF/resources/");}
55a1f40f62349d16a9a4a136d28a88b9b4741d5f155ef3b1657d187a6e2bc91b
accountServiceExporter
public HttpInvokerServiceExporter accountServiceExporter(SampleManager sampleManager, SecureRemoteInvocationExecutor secureRemoteInvocationExecutor)
{    HttpInvokerServiceExporter httpInvokerServiceExporter = new HttpInvokerServiceExporter();    httpInvokerServiceExporter.setService(sampleManager);    httpInvokerServiceExporter.setServiceInterface(SampleManager.class);    httpInvokerServiceExporter.setRemoteInvocationExecutor(secureRemoteInvocationExecutor);    return httpInvokerServiceExporter;}
faff995619af29a5d50788b4a70a1a551ceb2f1f4899fb7e9642ddf6c2fbe5d2
onStartup
public void onStartup(ServletContext container)
{        AnnotationConfigWebApplicationContext appContext = getContext();        container.addListener(new ContextLoaderListener(appContext));    FilterRegistration.Dynamic shiroFilter = container.addFilter("shiroFilterFactoryBean", DelegatingFilterProxy.class);    shiroFilter.setInitParameter("targetFilterLifecycle", "true");    shiroFilter.addMappingForUrlPatterns(EnumSet.allOf(DispatcherType.class), false, "/*");    ServletRegistration.Dynamic remotingDispatcher = container.addServlet("remoting", new DispatcherServlet(appContext));    remotingDispatcher.setLoadOnStartup(1);    remotingDispatcher.addMapping("/remoting/*");    ServletRegistration.Dynamic dispatcher = container.addServlet("DispatcherServlet", new DispatcherServlet(appContext));    dispatcher.setLoadOnStartup(1);    dispatcher.addMapping("/");}
35b59faf580dc2da1040e9f8503d79a4a501da6cf3d78e78dbc615c1ab708aa1
getContext
private AnnotationConfigWebApplicationContext getContext()
{    AnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext();    context.setConfigLocation(getClass().getPackage().getName());    return context;}
3ffb3c74afa5355644c1f0bfdb5098954de2d3a057f971596bdb7110ccb67b1b
getValue
public String getValue()
{    String value = null;    Subject subject = SecurityUtils.getSubject();    Session session = subject.getSession(false);    if (session != null) {        value = (String) session.getAttribute(VALUE_KEY);        if (log.isDebugEnabled()) {            log.debug("retrieving session key [" + VALUE_KEY + "] with value [" + value + "] on session with id [" + session.getId() + "]");        }    }    return value;}
da4c68dce08e7b818c6c611833c6541d4770a0cc7fb158fa7c59b78479976b43
setValue
public void setValue(String newValue)
{    Subject subject = SecurityUtils.getSubject();    Session session = subject.getSession();    if (log.isDebugEnabled()) {        log.debug("saving session key [" + VALUE_KEY + "] with value [" + newValue + "] on session with id [" + session.getId() + "]");    }    session.setAttribute(VALUE_KEY, newValue);}
7ab823399448159196b442b94af4244735bcfec0eba0292a2c5e9fb7934b4a9b
secureMethod1
public void secureMethod1()
{    if (log.isInfoEnabled()) {        log.info("Secure method 1 called...");    }}
e3b4bec598a19f89becb969ed3b2830dffde83d466c7a10673c8463505c44b9a
secureMethod2
public void secureMethod2()
{    if (log.isInfoEnabled()) {        log.info("Secure method 2 called...");    }}
718d7265f69a76f0d36e7cd196f6b9f69ea48a708f35d60f5134e34f63e00c13
secureMethod3
public void secureMethod3()
{    if (log.isInfoEnabled()) {        log.info("Secure method 3 called...");    }}
04d12ebf29bfe2a4c8158a941df0d9788366bab7e1f094a3057e32147ffbeb42
doGetAuthenticationInfo
protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException
{    UsernamePasswordToken upToken = (UsernamePasswordToken) token;    String username = upToken.getUsername();        if (username == null) {        throw new AccountException("Null usernames are not allowed by this realm.");    }    Connection conn = null;    AuthenticationInfo info = null;    try {        conn = dataSource.getConnection();        String password = getPasswordForUser(conn, username);        if (password == null) {            throw new UnknownAccountException("No account found for user [" + username + "]");        }        SimpleAuthenticationInfo saInfo = new SimpleAuthenticationInfo(username, password, getName());        /**         * This (very bad) example uses the username as the salt in this sample app.  DON'T DO THIS IN A REAL APP!         *         * Salts should not be based on anything that a user could enter (attackers can exploit this).  Instead         * they should ideally be cryptographically-strong randomly generated numbers.         */        saInfo.setCredentialsSalt(ByteSource.Util.bytes(username));        info = saInfo;    } catch (SQLException e) {        final String message = "There was a SQL error while authenticating user [" + username + "]";        if (log.isErrorEnabled()) {            log.error(message, e);        }                throw new AuthenticationException(message, e);    } finally {        JdbcUtils.closeConnection(conn);    }    return info;}
77eea453d4e80fdc91636e39dd94e73b495165a20d6ab18be37868e39177b103
getPasswordForUser
private String getPasswordForUser(Connection conn, String username) throws SQLException
{    PreparedStatement ps = null;    ResultSet rs = null;    String password = null;    try {        ps = conn.prepareStatement(authenticationQuery);        ps.setString(1, username);                rs = ps.executeQuery();                boolean foundResult = false;        while (rs.next()) {                        if (foundResult) {                throw new AuthenticationException("More than one user row found for user [" + username + "]. Usernames must be unique.");            }            password = rs.getString(1);            foundResult = true;        }    } finally {        JdbcUtils.closeResultSet(rs);        JdbcUtils.closeStatement(ps);    }    return password;}
4838f4e13c5b21a493bbb71782835f2f6e73c5dfe9a84fbded6193e2d6e8b085
setSampleManager
public void setSampleManager(SampleManager sampleManager)
{    this.sampleManager = sampleManager;}
5d08ab87f89eeca19a71fee64060f298ab332c1940a22e062da67ec354b68fe5
doGet
protected String doGet(Model model)
{    buildModel(model);    model.addAttribute("value", sampleManager.getValue());    return "sampleIndex";}
ee12bfaab327cd593af123a11de4fc6f1674783cdafd67c40caf74826885f7ad
buildModel
protected Model buildModel(Model model)
{    Subject subject = SecurityUtils.getSubject();    boolean hasRole1 = subject.hasRole("role1");    boolean hasRole2 = subject.hasRole("role2");    model.addAttribute("hasRole1", hasRole1);    model.addAttribute("hasRole2", hasRole2);    Session session = subject.getSession();    Map<Object, Object> sessionAttributes = new LinkedHashMap<Object, Object>();    for (Object key : session.getAttributeKeys()) {        sessionAttributes.put(key, session.getAttribute(key));    }    model.addAttribute("sessionAttributes", sessionAttributes);    model.addAttribute("subjectSession", subject.getSession());    return model;}
dfa5adbb0689fe886a31d0ae0d451a290eb1881dd80e8a71029c674616a4eacf
doPost
protected String doPost(@RequestParam("value") String newSessionValue, Model model)
{    sampleManager.setValue(newSessionValue);    buildModel(model);    model.addAttribute("value", sampleManager.getValue());    return "sampleIndex";}
f799ca5fe3460a881ec2f61762c5de929867ab989363195431ed548550235b32
setJnlpView
public void setJnlpView(String jnlpView)
{    this.jnlpView = jnlpView;}
a302b79ede3b6d8062e119c38b46e087c34476375d888ea079a18d8c8ebcc116
handleRequestInternal
protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception
{    Subject subject = SecurityUtils.getSubject();    Session session = null;    if (subject != null) {        session = subject.getSession();    }    if (session == null) {        String msg = "Expected a non-null Shiro session.";        throw new IllegalArgumentException(msg);    }    StringBuilder sb = new StringBuilder();    sb.append("http://");    sb.append(request.getServerName());    if (request.getServerPort() != 80) {        sb.append(":");        sb.append(request.getServerPort());    }    sb.append(request.getContextPath());        response.setHeader("cache-control", "no-cache");    response.setHeader("pragma", "no-cache");    Map<String, Object> model = new HashMap<String, Object>();    model.put("codebaseUrl", sb.toString());    model.put("sessionId", session.getId());    return new ModelAndView(jnlpView, model);}
a3e5a47eb69911d4f4fd3f6b1507f88cbfe9e6c1c6b9371cec9a355442a8a5b6
view
protected String view()
{    return loginView;}
15602aa77437754fe1a6a5616b2181d9ad7858b3f28f8a51fde26fdc77ba5558
onSubmit
protected String onSubmit(@RequestParam("username") String username, @RequestParam("password") String password, Model model) throws Exception
{    UsernamePasswordToken token = new UsernamePasswordToken(username, password);    try {        SecurityUtils.getSubject().login(token);    } catch (AuthenticationException e) {        log.debug("Error authenticating.", e);        model.addAttribute("errorInvalidLogin", "The username or password was not correct.");        return loginView;    }    return "redirect:/s/index";}
a302b79ede3b6d8062e119c38b46e087c34476375d888ea079a18d8c8ebcc116
handleRequestInternal
protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception
{    SecurityUtils.getSubject().logout();    return new ModelAndView("redirect:login");}
dcc33d0deb6837f836284824d320e6c2feeef795a0081d070c560f7528468de3
redirect
public String redirect()
{    return "redirect:/s/login";}
80eec807d7a34dda0c413e19376f12098c10f88424e72f15bf56cc9c531c6562
logOut
public void logOut() throws IOException
{        final HtmlPage homePage = webClient.getPage(getBaseUri());    try {        homePage.getAnchorByHref("/logout").click();    } catch (ElementNotFoundException e) {        }}
d624f725389c68d9482e9ee788fa1fe8c7b46634031ec4a41ed7751687f829c4
logIn
public void logIn() throws FailingHttpStatusCodeException, MalformedURLException, IOException, InterruptedException
{    HtmlPage page = webClient.getPage(getBaseUri() + "login.jsp");    HtmlForm form = page.getFormByName("loginform");    form.<HtmlInput>getInputByName("username").setValueAttribute("root");    form.<HtmlInput>getInputByName("password").setValueAttribute("secret");    page = form.<HtmlInput>getInputByName("submit").click();        page.getAnchorByHref("/logout");}
351d6de9ff9880c2e14854a633dd2310d2ca65834e67d0b1149dc73770a2cf05
anyShiroAnnotatedMethod
public void anyShiroAnnotatedMethod()
{}
6ca73a27c5b084f5f04de0eb494622a075488feccdba7912d4aff2d70d3b51ee
anyShiroAnnotatedMethodCall
 void anyShiroAnnotatedMethodCall(JoinPoint thisJoinPoint)
{}
aa0bd4e94b26a2aeb5935af319b1f5363fb475f6eb6e9d016b213a3456924015
executeAnnotatedMethod
public void executeAnnotatedMethod(JoinPoint thisJoinPoint) throws Throwable
{    interceptor.performBeforeInterception(thisJoinPoint);}
9f0d6520aba9433cc305046e774a3964676541da63efc7f9a761f318e05d8994
performBeforeInterception
protected void performBeforeInterception(JoinPoint aJoinPoint) throws Throwable
{    if (log.isTraceEnabled())        log.trace("#### Invoking a method decorated with a Shiro annotation" + "\n\tkind       : " + aJoinPoint.getKind() + "\n\tjoinPoint  : " + aJoinPoint + "\n\tannotations: " + Arrays.toString(((MethodSignature) aJoinPoint.getSignature()).getMethod().getAnnotations()) + "\n\ttarget     : " + aJoinPoint.getTarget());        BeforeAdviceMethodInvocationAdapter mi = BeforeAdviceMethodInvocationAdapter.createFrom(aJoinPoint);        super.invoke(mi);}
c79810dc7cc973cf156901cbc871e909ec01516b6a4e31bcbd2ebf85d297ac5d
createFrom
public static BeforeAdviceMethodInvocationAdapter createFrom(JoinPoint aJoinPoint)
{    if (aJoinPoint.getSignature() instanceof MethodSignature) {        return new BeforeAdviceMethodInvocationAdapter(aJoinPoint.getThis(), ((MethodSignature) aJoinPoint.getSignature()).getMethod(), aJoinPoint.getArgs());    } else if (aJoinPoint.getSignature() instanceof AdviceSignature) {        return new BeforeAdviceMethodInvocationAdapter(aJoinPoint.getThis(), ((AdviceSignature) aJoinPoint.getSignature()).getAdvice(), aJoinPoint.getArgs());    } else {        throw new IllegalArgumentException("The joint point signature is invalid: expected a MethodSignature or an AdviceSignature but was " + aJoinPoint.getSignature());    }}
4ffa0498204382f03957f8df56dbc87185ee23c5779a3f6d8c660066ede66856
getArguments
public Object[] getArguments()
{    return _arguments;}
16e4501d146132f0d2fae26807b36220aec005795fc6efafb7f90440a4081abd
getMethod
public Method getMethod()
{    return _method;}
0e501a2977e5e3d04bd7ec0dcab2deb7e698ecc90c3cd6e9df30c6885dc5ba93
proceed
public Object proceed() throws Throwable
{        return null;}
2a93b1a795f42038e9a60220dce73fed03df638d7a4deb5668b6df7dfd6b2470
getThis
public Object getThis()
{    return _object;}
7f0f73b325bcd37632c396c02bb87ddfe4bb9da1a35fac272192ae84740eb688
setUpClass
public static void setUpClass() throws Exception
{    Logger log = Logger.getLogger(AspectjAnnotationsAuthorizingMethodInterceptor.class);    log.addAppender(new ConsoleAppender(new SimpleLayout(), ConsoleAppender.SYSTEM_OUT));    log.setLevel(Level.TRACE);    Factory<SecurityManager> factory = new IniSecurityManagerFactory("classpath:shiroDummyServiceTest.ini");    SecurityManager securityManager = factory.getInstance();    SecurityUtils.setSecurityManager(securityManager);    SECURED_SERVICE = new SecuredDummyService();    RESTRICTED_SERVICE = new RestrictedDummyService();}
57356f1c78bbffcbadab516b764dcc9a36fc07f0e28b2d56b001ac2d49131cb2
tearDownClass
public static void tearDownClass() throws Exception
{        SecurityUtils.setSecurityManager(null);}
9d69bfd2a279cacda04001b1c50c6f6698b00750596931407928c5a8169d56b7
setUp
public void setUp() throws Exception
{    subject = SecurityUtils.getSubject();}
c6aaebb5a52567751db8dc8e1cb9dd4a4e582ef964a374b376c6a04f741802dc
tearDown
public void tearDown() throws Exception
{    subject.logout();}
88738d171cbb60f4e7283c7d48fbb21eef77afd3f60cb7de2bb6a8f96989a48c
loginAsUser
private void loginAsUser()
{    subject.login(new UsernamePasswordToken("joe", "bob"));}
a5b0bc68bfa08fd3558fd11cac875ac39c6cf07ea21fa0f7c7cbf1a3c0c8b910
loginAsAdmin
private void loginAsAdmin()
{    subject.login(new UsernamePasswordToken("root", "secret"));}
4f7918de2afecacc932db7df08782190cbb8422b164ff275660c7648bbe8f046
testAnonymous_asAnonymous
public void testAnonymous_asAnonymous() throws Exception
{    SECURED_SERVICE.anonymous();}
f59d360ead086abca220e294b150220255631ca739d83f2a1a94c3147dc4452e
testAnonymous_asUser
public void testAnonymous_asUser() throws Exception
{    loginAsUser();    SECURED_SERVICE.anonymous();}
cd90b9e687bbefefd9d5c7ecef83464b318952f68774c356d5e36b94b727169f
testAnonymous_asAdmin
public void testAnonymous_asAdmin() throws Exception
{    loginAsAdmin();    SECURED_SERVICE.anonymous();}
d0527769d94f11fd3fb5b8bb969ea15d34f0494fcfd2651e79390c02115bb921
testGuest_asAnonymous
public void testGuest_asAnonymous() throws Exception
{    SECURED_SERVICE.guest();}
5e3e3f9b389a224969c1e6936209984e2e16fecf1c48a4c5597bba86aa4aa623
testGuest_asUser
public void testGuest_asUser() throws Exception
{    loginAsUser();    SECURED_SERVICE.guest();}
94385a2a48211ba197fee20707a0dafe53fa5fd8b907bc5ac6417192a1cac67d
testGuest_asAdmin
public void testGuest_asAdmin() throws Exception
{    loginAsAdmin();    SECURED_SERVICE.guest();}
a445336b89a724ffbd3a7b6d8a405ff63618b6f939046c781145d96d4710602a
testPeek_asAnonymous
public void testPeek_asAnonymous() throws Exception
{    SECURED_SERVICE.peek();}
3e2c36241ab15e01df5ebb8d119ad48af01a23d4b825f96f119b2a547d328f7b
testPeek_asUser
public void testPeek_asUser() throws Exception
{    loginAsUser();    SECURED_SERVICE.peek();}
812323c87e6ff83b856435ba65120e42d16f8fda1975ea305e2f77b76f1909b4
testPeek_asAdmin
public void testPeek_asAdmin() throws Exception
{    loginAsAdmin();    SECURED_SERVICE.peek();}
f94865d2c612674148abe4f8a9e55c80bf08280e428bc8eee3d41f569fb35fd6
testRetrieve_asAnonymous
public void testRetrieve_asAnonymous() throws Exception
{    SECURED_SERVICE.retrieve();}
f205473fd7b0754c113a4ff56c426cd431ca09e4f00f2e379ed6d6ef5afc0dca
testRetrieve_asUser
public void testRetrieve_asUser() throws Exception
{    loginAsUser();    SECURED_SERVICE.retrieve();}
5c1ebb04fa0e079f94d46fc200d4b73f785abdc341b911da0d570ecdb73d9c99
testRetrieve_asAdmin
public void testRetrieve_asAdmin() throws Exception
{    loginAsAdmin();    SECURED_SERVICE.retrieve();}
9168b9b9053465dcf2888f05e593fe6d21260063f1abcbd97b8552a7c23679e9
testChange_asAnonymous
public void testChange_asAnonymous() throws Exception
{    SECURED_SERVICE.change();}
b50f5939106b26b5b97c451afe2102f91659ece9a42d274fa752b3d3c8648d8a
testChange_asUser
public void testChange_asUser() throws Exception
{    loginAsUser();    SECURED_SERVICE.change();}
cb578ced5f1b14aa6e1f055b9799128ca513f13667c6d02b7585eed87ffd77c6
testChange_asAdmin
public void testChange_asAdmin() throws Exception
{    loginAsAdmin();    SECURED_SERVICE.change();}
ff3919fd3e862fb754839555cf23f3e75a022850daabecd5af492ef5ebf349cb
testRetrieveRestricted_asAnonymous
public void testRetrieveRestricted_asAnonymous() throws Exception
{    RESTRICTED_SERVICE.retrieve();}
b861ba8d3f62f702fb5f1a311c88e9f5b750c9d26fc01719f3bcb39accead12e
testRetrieveRestricted_asUser
public void testRetrieveRestricted_asUser() throws Exception
{    loginAsUser();    RESTRICTED_SERVICE.retrieve();}
01f6d00b6ddfe9414726015cd5bb42a406829be6c9e8fd1aab7eea69c6d8dcb5
testRetrieveRestricted_asAdmin
public void testRetrieveRestricted_asAdmin() throws Exception
{    loginAsAdmin();    RESTRICTED_SERVICE.retrieve();}
d8498c2e93e55ff733038ce5d024f94a23c9d187f49a9b4be60d9d7458f3d809
retrieve
public void retrieve()
{    log("retrieve *RESTRICTED*");    super.retrieve();}
038ddf3aad0b88a365f1f64746434310363aaf7e52a049a4934460d7b6996280
change
public void change()
{    retrieve();    log("change");    peek();}
84e09b727cd55375d9642e84b0869288bc3ea23a560b5dca80e83467e53bf46d
anonymous
public void anonymous()
{    log("anonymous");}
432aed50ed21901fefe2b492f8ff1bf4960c5c46d1efd06ca5961e3c6043cdc5
guest
public void guest()
{    log("guest");}
cd2f4b0aa99b205f4473dd4d972dab27153602ff900fe64bdf297fa5026a7c46
peek
public void peek()
{    log("peek");}
d8498c2e93e55ff733038ce5d024f94a23c9d187f49a9b4be60d9d7458f3d809
retrieve
public void retrieve()
{    log("retrieve");}
b93a9e5055780b54639512734586e923f33a15123e8ef2091e9e82509800976c
log
public void log(String aMessage)
{    if (aMessage != null) {        System.out.println(new Timestamp(System.currentTimeMillis()).toString() + " [" + Thread.currentThread() + "] * LOG * " + aMessage);    } else {        System.out.println("\n\n");    }}
500475aa02d0eb0660d88053e69e42eca08a276f9412c7abb0697632ba984085
createToken
protected AuthenticationToken createToken(ServletRequest request, ServletResponse response) throws Exception
{    HttpServletRequest httpRequest = (HttpServletRequest) request;    String ticket = httpRequest.getParameter(TICKET_PARAMETER);    return new CasToken(ticket);}
04af4160dfe000e02f78fcb6f3a44db6fc4f5a9b300dfce9119e2544f93ecee0
onAccessDenied
protected boolean onAccessDenied(ServletRequest request, ServletResponse response) throws Exception
{    return executeLogin(request, response);}
d87094a57fca8bbe1d42dc024b708d8796debf2fa4bdd1d89ab75f9cb2a79c0d
isAccessAllowed
protected boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue)
{    return false;}
254f5a919a751900cc60b81c694f07232e1ba93fae41d31678fd1c17c42d0a12
onLoginSuccess
protected boolean onLoginSuccess(AuthenticationToken token, Subject subject, ServletRequest request, ServletResponse response) throws Exception
{    issueSuccessRedirect(request, response);    return false;}
6de0958c8b0c6abb34777d8ffc9998468f1bf65750a2df48d92c2616dd40a20e
onLoginFailure
protected boolean onLoginFailure(AuthenticationToken token, AuthenticationException ae, ServletRequest request, ServletResponse response)
{    if (logger.isDebugEnabled()) {        logger.debug("Authentication exception", ae);    }        Subject subject = getSubject(request, response);    if (subject.isAuthenticated() || subject.isRemembered()) {        try {            issueSuccessRedirect(request, response);        } catch (Exception e) {            logger.error("Cannot redirect to the default success url", e);        }    } else {        try {            WebUtils.issueRedirect(request, response, failureUrl);        } catch (IOException e) {            logger.error("Cannot redirect to failure url : {}", failureUrl, e);        }    }    return false;}
ad40c26ba483ac39a2b727939395db22b0c1f6c57852d734698a61be780559d8
setFailureUrl
public void setFailureUrl(String failureUrl)
{    this.failureUrl = failureUrl;}
1a67e3209bd108e785c83f678bbaf2efc1a2cc2192fc6a4bf60bb7924700d74a
onInit
protected void onInit()
{    super.onInit();    ensureTicketValidator();}
034dbeeed2f0a70d0d56c1d9c44e3f37e753ed52cf3c1238a8834a8cfa74cf50
ensureTicketValidator
protected TicketValidator ensureTicketValidator()
{    if (this.ticketValidator == null) {        this.ticketValidator = createTicketValidator();    }    return this.ticketValidator;}
ed476087d6374b83c912b0324b00d1521714f61cfb51c3e330996acd620ba888
createTicketValidator
protected TicketValidator createTicketValidator()
{    String urlPrefix = getCasServerUrlPrefix();    if ("saml".equalsIgnoreCase(getValidationProtocol())) {        return new Saml11TicketValidator(urlPrefix);    }    return new Cas20ServiceTicketValidator(urlPrefix);}
04d12ebf29bfe2a4c8158a941df0d9788366bab7e1f094a3057e32147ffbeb42
doGetAuthenticationInfo
protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException
{    CasToken casToken = (CasToken) token;    if (token == null) {        return null;    }    String ticket = (String) casToken.getCredentials();    if (!StringUtils.hasText(ticket)) {        return null;    }    TicketValidator ticketValidator = ensureTicketValidator();    try {                Assertion casAssertion = ticketValidator.validate(ticket, getCasService());                AttributePrincipal casPrincipal = casAssertion.getPrincipal();        String userId = casPrincipal.getName();        log.debug("Validate ticket : {} in CAS server : {} to retrieve user : {}", new Object[] { ticket, getCasServerUrlPrefix(), userId });        Map<String, Object> attributes = casPrincipal.getAttributes();                casToken.setUserId(userId);        String rememberMeAttributeName = getRememberMeAttributeName();        String rememberMeStringValue = (String) attributes.get(rememberMeAttributeName);        boolean isRemembered = rememberMeStringValue != null && Boolean.parseBoolean(rememberMeStringValue);        if (isRemembered) {            casToken.setRememberMe(true);        }                List<Object> principals = CollectionUtils.asList(userId, attributes);        PrincipalCollection principalCollection = new SimplePrincipalCollection(principals, getName());        return new SimpleAuthenticationInfo(principalCollection, ticket);    } catch (TicketValidationException e) {        throw new CasAuthenticationException("Unable to validate ticket [" + ticket + "]", e);    }}
7d82f766d0b50c20008bf1b1d8345ac21d4827d0c5115d358a603d4f11fb64f3
doGetAuthorizationInfo
protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals)
{        SimplePrincipalCollection principalCollection = (SimplePrincipalCollection) principals;    List<Object> listPrincipals = principalCollection.asList();    Map<String, String> attributes = (Map<String, String>) listPrincipals.get(1);        SimpleAuthorizationInfo simpleAuthorizationInfo = new SimpleAuthorizationInfo();        addRoles(simpleAuthorizationInfo, split(defaultRoles));        addPermissions(simpleAuthorizationInfo, split(defaultPermissions));        List<String> attributeNames = split(roleAttributeNames);    for (String attributeName : attributeNames) {        String value = attributes.get(attributeName);        addRoles(simpleAuthorizationInfo, split(value));    }        attributeNames = split(permissionAttributeNames);    for (String attributeName : attributeNames) {        String value = attributes.get(attributeName);        addPermissions(simpleAuthorizationInfo, split(value));    }    return simpleAuthorizationInfo;}
3a05283695780a9966e498e2fc6e511cfa9309a4db1d2aaa5de7d05ae5cae265
split
private List<String> split(String s)
{    List<String> list = new ArrayList<String>();    String[] elements = StringUtils.split(s, ',');    if (elements != null && elements.length > 0) {        for (String element : elements) {            if (StringUtils.hasText(element)) {                list.add(element.trim());            }        }    }    return list;}
31a7667d24ca6d61228dee2fc02581a24a1cc66d1a4c2a6007c2fdb8a360d763
addRoles
private void addRoles(SimpleAuthorizationInfo simpleAuthorizationInfo, List<String> roles)
{    for (String role : roles) {        simpleAuthorizationInfo.addRole(role);    }}
6d6e9271c8434900499aade52198e5b64feb730116d08433423ff6d1c12b46ac
addPermissions
private void addPermissions(SimpleAuthorizationInfo simpleAuthorizationInfo, List<String> permissions)
{    for (String permission : permissions) {        simpleAuthorizationInfo.addStringPermission(permission);    }}
152f306dd783f4264469a2a396ca9594eeb24dd5d3d89b49aee0ca8a57b3d2bd
getCasServerUrlPrefix
public String getCasServerUrlPrefix()
{    return casServerUrlPrefix;}
96464b5428d1edeaf9208d729a08d951e5c70eb95f4e64aeda553b5fa4c07759
setCasServerUrlPrefix
public void setCasServerUrlPrefix(String casServerUrlPrefix)
{    this.casServerUrlPrefix = casServerUrlPrefix;}
4375d4c05aae9bc95d557245de7df1cbb4a919f04f5a0aa94ac9d944bd8bda70
getCasService
public String getCasService()
{    return casService;}
8cd8637d8d76eebbcf6aa27eb89be07dce7dc2405e137652662f25ebb541b590
setCasService
public void setCasService(String casService)
{    this.casService = casService;}
e0a45ebb1cfed31a534b8fd07e996e6984db3e54424e201e4df55058084f9b88
getValidationProtocol
public String getValidationProtocol()
{    return validationProtocol;}
a7ddb11fa04c4d38ca6fcebf0729b6e897cf63865e71cb734da78677f2b717e7
setValidationProtocol
public void setValidationProtocol(String validationProtocol)
{    this.validationProtocol = validationProtocol;}
72370e2f5696f9c5b49ca50465074234fe8e0fcf5d3e4459c80abd2113098151
getRememberMeAttributeName
public String getRememberMeAttributeName()
{    return rememberMeAttributeName;}
d44f8b636a41da4bde09c52b955d492ede5abc8b93bd22a9fbbb6b54d9731746
setRememberMeAttributeName
public void setRememberMeAttributeName(String rememberMeAttributeName)
{    this.rememberMeAttributeName = rememberMeAttributeName;}
d0e0a0cc59f7f6a59fe1790a5d7e4151797ffeb911ff355c097dc34c1fd3310e
getDefaultRoles
public String getDefaultRoles()
{    return defaultRoles;}
0209ee1c3a08865ca90706fa66a2a35dc15e349102357ce02cd3c58730017185
setDefaultRoles
public void setDefaultRoles(String defaultRoles)
{    this.defaultRoles = defaultRoles;}
b17acc141a8abcd6fddc978b2158ffbdfe14c6ef00b9f75df30eeff2c8b06998
getDefaultPermissions
public String getDefaultPermissions()
{    return defaultPermissions;}
fc954b304872b2e553fbd90a9cf9de1cb76f7b87ca0c0c8783e3aeb3d75c0763
setDefaultPermissions
public void setDefaultPermissions(String defaultPermissions)
{    this.defaultPermissions = defaultPermissions;}
50d2b5e99dd8977bb594b7de8684aafca856502e8d3965f8164ce9243ccbd2c7
getRoleAttributeNames
public String getRoleAttributeNames()
{    return roleAttributeNames;}
b8a6a6651e62a7ae7e645775fd2144766f54c6177fdc738594512772d83d5bad
setRoleAttributeNames
public void setRoleAttributeNames(String roleAttributeNames)
{    this.roleAttributeNames = roleAttributeNames;}
72b84ce03a5ac8b52356614f1dd952cefd4b4c46a7e53563f49ecc795b0a94b3
getPermissionAttributeNames
public String getPermissionAttributeNames()
{    return permissionAttributeNames;}
d09ec71de3ccb1693bfae168990a27633ac5cc189c5fef6acb2a4103466502cb
setPermissionAttributeNames
public void setPermissionAttributeNames(String permissionAttributeNames)
{    this.permissionAttributeNames = permissionAttributeNames;}
14ae44248da363eef52ae43e59184d7bf1d409ceab1ab983c65166d88de46d23
createSubject
public Subject createSubject(SubjectContext context)
{        boolean authenticated = context.isAuthenticated();        if (authenticated) {        AuthenticationToken token = context.getAuthenticationToken();        if (token != null && token instanceof CasToken) {            CasToken casToken = (CasToken) token;                        if (casToken.isRememberMe()) {                context.setAuthenticated(false);            }        }    }    return super.createSubject(context);}
fd56e1755384d43cd981f548599564b11bcb09d8d88ac23705d566dcbeb36882
getPrincipal
public Object getPrincipal()
{    return userId;}
d40889d9d9d8556f6c0a26b69ca857cdca5bea6f57da293d87d0c43c6e6f218f
getCredentials
public Object getCredentials()
{    return ticket;}
836e39a67f5872453e68549d6e97fbccbbad0bea29180254c305dae23c7f7be7
setUserId
public void setUserId(String userId)
{    this.userId = userId;}
ed2429bd5404a4724e2c5245224385f456f205f0e707489cdc20d601b8646e06
isRememberMe
public boolean isRememberMe()
{    return isRememberMe;}
7fbae1d7e97826cf30c4c9550ec2750ca4ff0d7436bce771eb5a28e8f608c6f5
setRememberMe
public void setRememberMe(boolean isRememberMe)
{    this.isRememberMe = isRememberMe;}
45d77e50f36580b73f564b12a4cff413f90da274a7f320db65607808c59beb50
get
public V get(K key) throws CacheException
{    try {        if (log.isTraceEnabled()) {            log.trace("Getting object from cache [" + cache.getName() + "] for key [" + key + "]");        }        if (key == null) {            return null;        } else {            Element element = cache.get(key);            if (element == null) {                if (log.isTraceEnabled()) {                    log.trace("Element for [" + key + "] is null.");                }                return null;            } else {                                return (V) element.getObjectValue();            }        }    } catch (Throwable t) {        throw new CacheException(t);    }}
4ef30104277f0ca64cf50fb465b22e3e8bbbc5e6051ec05e6b85d22d0eaa3802
put
public V put(K key, V value) throws CacheException
{    if (log.isTraceEnabled()) {        log.trace("Putting object in cache [" + cache.getName() + "] for key [" + key + "]");    }    try {        V previous = get(key);        Element element = new Element(key, value);        cache.put(element);        return previous;    } catch (Throwable t) {        throw new CacheException(t);    }}
478d63be104413b377a764b0dffa1a9f68d3c34dc2d191f5166ad5cc1869528b
remove
public V remove(K key) throws CacheException
{    if (log.isTraceEnabled()) {        log.trace("Removing object from cache [" + cache.getName() + "] for key [" + key + "]");    }    try {        V previous = get(key);        cache.remove(key);        return previous;    } catch (Throwable t) {        throw new CacheException(t);    }}
b4784b2d58d329fdb413d221a292216bda3162e26bae93e33c534b8523b76a29
clear
public void clear() throws CacheException
{    if (log.isTraceEnabled()) {        log.trace("Clearing all objects from cache [" + cache.getName() + "]");    }    try {        cache.removeAll();    } catch (Throwable t) {        throw new CacheException(t);    }}
72ef1e59027007ffe0950edfd2670ad03bb65cd6463d5d1d282dfeb1750435b0
size
public int size()
{    try {        return cache.getSize();    } catch (Throwable t) {        throw new CacheException(t);    }}
a36426a695959605362cd383d81d18c9f769e6afa6bec38be3837871a7303cac
keys
public Set<K> keys()
{    try {        @SuppressWarnings({ "unchecked" })        List<K> keys = cache.getKeys();        if (!isEmpty(keys)) {            return Collections.unmodifiableSet(new LinkedHashSet<K>(keys));        } else {            return Collections.emptySet();        }    } catch (Throwable t) {        throw new CacheException(t);    }}
86f8cd7f78364ea8a0d36935cf2e3d294cee8b3b9e21cfe6a555d22e54e37f60
values
public Collection<V> values()
{    try {        @SuppressWarnings({ "unchecked" })        List<K> keys = cache.getKeys();        if (!isEmpty(keys)) {            List<V> values = new ArrayList<V>(keys.size());            for (K key : keys) {                V value = get(key);                if (value != null) {                    values.add(value);                }            }            return Collections.unmodifiableList(values);        } else {            return Collections.emptyList();        }    } catch (Throwable t) {        throw new CacheException(t);    }}
d1891ac7dc7624dafa4525f0d18ab672e2e216ab9f000bf3d784f341a76759c1
getMemoryUsage
public long getMemoryUsage()
{    try {        return cache.calculateInMemorySize();    } catch (Throwable t) {        return -1;    }}
851f6d1b4197da3a194eeb54da9df97946789495ef43d94abcbe2644a787e934
getMemoryStoreSize
public long getMemoryStoreSize()
{    try {        return cache.getMemoryStoreSize();    } catch (Throwable t) {        throw new CacheException(t);    }}
9e9ef11e4abe964b106c4b633630738715c93c8c03af6ca860fd327bdd48e6da
getDiskStoreSize
public long getDiskStoreSize()
{    try {        return cache.getDiskStoreSize();    } catch (Throwable t) {        throw new CacheException(t);    }}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return "EhCache [" + cache.getName() + "]";}
db596b53642ea727f60bbee77154b0fd34c88ce8e481bdc769096a951d31c8cd
isEmpty
private static boolean isEmpty(Collection c)
{    return c == null || c.isEmpty();}
6ed7ece8720840c9aa1231729b6d419b9a7a9f39274a9de66ef8f52adbf9e3c4
getCacheManager
public net.sf.ehcache.CacheManager getCacheManager()
{    return manager;}
c7aef1b2cd71cc893515f75cd9d6baf49bd67313a656dab7586ed70ef1321f5b
setCacheManager
public void setCacheManager(net.sf.ehcache.CacheManager manager)
{    this.manager = manager;}
0b49a628bcff439934749d0ef33c7b44f85a0b0c6b4365053df7c0cdb623efa4
getCacheManagerConfigFile
public String getCacheManagerConfigFile()
{    return this.cacheManagerConfigFile;}
23c92affed1929bf04f81653b9504891015f1b2fa66ab41dda23d9c0695808c7
setCacheManagerConfigFile
public void setCacheManagerConfigFile(String classpathLocation)
{    this.cacheManagerConfigFile = classpathLocation;}
f0ec09b7099cf3488e3dc23e1d4a9f2e2c5280f94db3857ba6b4cbce562f4e57
getCacheManagerConfigFileInputStream
protected InputStream getCacheManagerConfigFileInputStream()
{    String configFile = getCacheManagerConfigFile();    try {        return ResourceUtils.getInputStreamForPath(configFile);    } catch (IOException e) {        throw new IllegalStateException("Unable to obtain input stream for cacheManagerConfigFile [" + configFile + "]", e);    }}
4ee93e5af2b55d080ea9b1e6751a48223b2b6156f72b7704bea5aba3e5705f34
getCache
public final Cache<K, V> getCache(String name) throws CacheException
{    if (log.isTraceEnabled()) {        log.trace("Acquiring EhCache instance named [" + name + "]");    }    try {        net.sf.ehcache.Ehcache cache = ensureCacheManager().getEhcache(name);        if (cache == null) {            if (log.isInfoEnabled()) {                log.info("Cache with name '{}' does not yet exist.  Creating now.", name);            }            this.manager.addCache(name);            cache = manager.getCache(name);            if (log.isInfoEnabled()) {                log.info("Added EhCache named [" + name + "]");            }        } else {            if (log.isInfoEnabled()) {                log.info("Using existing EHCache named [" + cache.getName() + "]");            }        }        return new EhCache<K, V>(cache);    } catch (net.sf.ehcache.CacheException e) {        throw new CacheException(e);    }}
30af27a633a2d5d82f28b8d0040fac1411fe0cfb5194874ef31cacb825c49079
init
public final void init() throws CacheException
{    ensureCacheManager();}
a11f8d2426e40fd63faeaed39d244469a31a118a3167ef57ef9eb0f2ecad4c6b
ensureCacheManager
private net.sf.ehcache.CacheManager ensureCacheManager()
{    try {        if (this.manager == null) {            if (log.isDebugEnabled()) {                log.debug("cacheManager property not set.  Constructing CacheManager instance... ");            }                                                                        this.manager = new net.sf.ehcache.CacheManager(getCacheManagerConfigFileInputStream());            if (log.isTraceEnabled()) {                log.trace("instantiated Ehcache CacheManager instance.");            }            cacheManagerImplicitlyCreated = true;            if (log.isDebugEnabled()) {                log.debug("implicit cacheManager created successfully.");            }        }        return this.manager;    } catch (Exception e) {        throw new CacheException(e);    }}
9cabd71a85d4928de1c9a46601c11d584f3e7522ee61146e1117d0d360a20b2e
destroy
public void destroy()
{    if (cacheManagerImplicitlyCreated) {        try {            net.sf.ehcache.CacheManager cacheMgr = getCacheManager();            cacheMgr.shutdown();        } catch (Throwable t) {            if (log.isWarnEnabled()) {                log.warn("Unable to cleanly shutdown implicitly created CacheManager instance.  " + "Ignoring (shutting down)...", t);            }        } finally {            this.manager = null;            this.cacheManagerImplicitlyCreated = false;        }    }}
4adaefafec562702d887f5960a1408e5f9d1add92c42fab7cb857d701c42d2a2
setUp
public void setUp()
{    cacheManager = new EhCacheManager();}
39e5ba029cc67f6f1d45c6d20f0df595ec16bc61da20d7680fcbbdae4fe7f95b
tearDown
public void tearDown()
{    LifecycleUtils.destroy(cacheManager);}
46a30966121107cb34262cfd5ad4a212838fb29b2bc66c801e1234c47aff6ba8
testCacheManagerCreationDuringInit
public void testCacheManagerCreationDuringInit()
{    net.sf.ehcache.CacheManager ehCacheManager = cacheManager.getCacheManager();    assertNull(ehCacheManager);    cacheManager.init();        ehCacheManager = cacheManager.getCacheManager();    assertNotNull(ehCacheManager);}
a83484c5a69db4086f7ade470e7bd82ab765fb5af01c9f3e8673d2b7e8135d44
testLazyCacheManagerCreationWithoutCallingInit
public void testLazyCacheManagerCreationWithoutCallingInit()
{    net.sf.ehcache.CacheManager ehCacheManager = cacheManager.getCacheManager();    assertNull(ehCacheManager);            Cache<String, String> cache = cacheManager.getCache("test");        ehCacheManager = cacheManager.getCacheManager();    assertNotNull(ehCacheManager);    assertNotNull(cache);    cache.put("hello", "world");    String value = cache.get("hello");    assertNotNull(value);    assertEquals(value, "world");}
793e6c0596fac573549f0525f8a104d02e8042ff3f2cf564b82b51a605003b73
invoke
public Object invoke(MethodInvocation invocation) throws Throwable
{    return shiroInterceptor.invoke(new AopAllianceMethodInvocationAdapter(invocation));}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return "AopAlliance Adapter for " + shiroInterceptor.toString();}
16e4501d146132f0d2fae26807b36220aec005795fc6efafb7f90440a4081abd
getMethod
public Method getMethod()
{    return mi.getMethod();}
4ffa0498204382f03957f8df56dbc87185ee23c5779a3f6d8c660066ede66856
getArguments
public Object[] getArguments()
{    return mi.getArguments();}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return "Method invocation [" + mi.getMethod() + "]";}
0e501a2977e5e3d04bd7ec0dcab2deb7e698ecc90c3cd6e9df30c6885dc5ba93
proceed
public Object proceed() throws Throwable
{    return mi.proceed();}
2a93b1a795f42038e9a60220dce73fed03df638d7a4deb5668b6df7dfd6b2470
getThis
public Object getThis()
{    return mi.getThis();}
735af3f0eb75e634a69ff4bc344ca6a60dcb1efdcf78f6d0afe4f2b5e8dcc135
configure
protected final void configure()
{    AnnotationResolver resolver = createAnnotationResolver();    configureDefaultInterceptors(resolver);    configureInterceptors(resolver);}
0688d294dc3195058bbe6429886cd3c1cad34e7ebe8337d1191d08e818a3bda6
bindShiroInterceptor
protected final void bindShiroInterceptor(final AnnotationMethodInterceptor methodInterceptor)
{    bindInterceptor(Matchers.any(), new AbstractMatcher<Method>() {        public boolean matches(Method method) {            Class<? extends Annotation> annotation = methodInterceptor.getHandler().getAnnotationClass();            return method.getAnnotation(annotation) != null || method.getDeclaringClass().getAnnotation(annotation) != null;        }    }, new AopAllianceMethodInterceptorAdapter(methodInterceptor));}
8217832363b380fde21f0d45845b1cecff6780b2c310c331d977255c993a3d76
matches
public boolean matches(Method method)
{    Class<? extends Annotation> annotation = methodInterceptor.getHandler().getAnnotationClass();    return method.getAnnotation(annotation) != null || method.getDeclaringClass().getAnnotation(annotation) != null;}
f48853a752d35d27a96c58e198cd18b8033dd5de3e9f31cc884787bc8c63a2c8
createAnnotationResolver
protected AnnotationResolver createAnnotationResolver()
{    return new DefaultAnnotationResolver();}
96ca000084a5e66939623e1ef6d62663d48a9a7f250b2d09d757b6f9ac9c2f49
configureDefaultInterceptors
protected void configureDefaultInterceptors(AnnotationResolver resolver)
{    bindShiroInterceptor(new RoleAnnotationMethodInterceptor(resolver));    bindShiroInterceptor(new PermissionAnnotationMethodInterceptor(resolver));    bindShiroInterceptor(new AuthenticatedAnnotationMethodInterceptor(resolver));    bindShiroInterceptor(new UserAnnotationMethodInterceptor(resolver));    bindShiroInterceptor(new GuestAnnotationMethodInterceptor(resolver));}
d4d03f01a9365517351bbe6e15d0670d1cb283855e1bc117125b84bdd638a1d1
configureInterceptors
protected void configureInterceptors(AnnotationResolver resolver)
{}
c92ea2419ac8ccf59d71a1211afa502c5c8a7e22d9eabc89ab8ee2cd6e321a36
hear
public void hear(TypeLiteral<I> type, final TypeEncounter<I> encounter)
{    PropertyDescriptor[] propertyDescriptors = beanUtilsBean.getPropertyUtils().getPropertyDescriptors(type.getRawType());    final Map<PropertyDescriptor, Key<?>> propertyDependencies = new HashMap<PropertyDescriptor, Key<?>>(propertyDescriptors.length);    final Provider<Injector> injectorProvider = encounter.getProvider(Injector.class);    for (PropertyDescriptor propertyDescriptor : propertyDescriptors) {        if (propertyDescriptor.getWriteMethod() != null && Modifier.isPublic(propertyDescriptor.getWriteMethod().getModifiers())) {            Type propertyType = propertyDescriptor.getWriteMethod().getGenericParameterTypes()[0];            propertyDependencies.put(propertyDescriptor, createDependencyKey(propertyDescriptor, propertyType));        }    }    encounter.register(new MembersInjector<I>() {        public void injectMembers(I instance) {            for (Map.Entry<PropertyDescriptor, Key<?>> dependency : propertyDependencies.entrySet()) {                try {                    final Injector injector = injectorProvider.get();                    Object value = injector.getInstance(getMappedKey(injector, dependency.getValue()));                    dependency.getKey().getWriteMethod().invoke(instance, value);                } catch (ConfigurationException e) {                                                } catch (InvocationTargetException e) {                    throw new RuntimeException("Couldn't set property " + dependency.getKey().getDisplayName(), e);                } catch (IllegalAccessException e) {                    throw new RuntimeException("We shouldn't have ever reached this point, we don't try to inject to non-accessible methods.", e);                }            }        }    });}
81c687341756ba2bdb9bf0373995a88d34d35b883b6afaeb6e52956ade19b475
injectMembers
public void injectMembers(I instance)
{    for (Map.Entry<PropertyDescriptor, Key<?>> dependency : propertyDependencies.entrySet()) {        try {            final Injector injector = injectorProvider.get();            Object value = injector.getInstance(getMappedKey(injector, dependency.getValue()));            dependency.getKey().getWriteMethod().invoke(instance, value);        } catch (ConfigurationException e) {                        } catch (InvocationTargetException e) {            throw new RuntimeException("Couldn't set property " + dependency.getKey().getDisplayName(), e);        } catch (IllegalAccessException e) {            throw new RuntimeException("We shouldn't have ever reached this point, we don't try to inject to non-accessible methods.", e);        }    }}
f2061da680edc936496f14f8da2d15190dc6f9c6d2433ac83d99f4069c87f0e2
getMappedKey
private static Key<?> getMappedKey(Injector injector, Key<?> key)
{    Map<TypeLiteral, BeanTypeKey> beanTypeMap = getBeanTypeMap(injector);    if (key.getAnnotation() == null && beanTypeMap.containsKey(key.getTypeLiteral())) {        return beanTypeMap.get(key.getTypeLiteral()).key;    } else {        return key;    }}
8df5e1ed9e61a53844e0e73a4edbd5d0e4e28db9db453f51f039b9f2b7b5085d
getBeanTypeMap
private static Map<TypeLiteral, BeanTypeKey> getBeanTypeMap(Injector injector)
{    return (Map<TypeLiteral, BeanTypeKey>) injector.getInstance(MAP_KEY);}
53d3bdfd8f6a1904cc2419034f5418fc3ee610cf022fa128bceeb7f5062b01e0
createDependencyKey
private static Key<?> createDependencyKey(PropertyDescriptor propertyDescriptor, Type propertyType)
{    if (requiresName(propertyType)) {        return Key.get(propertyType, Names.named("shiro." + propertyDescriptor.getName()));    } else {        return Key.get(propertyType);    }}
0950130264696083f1591d2b75c9235d114ded059656830ca169e3eb10fc4036
requiresName
private static boolean requiresName(Type propertyType)
{    if (propertyType instanceof Class) {        Class<?> aClass = (Class<?>) propertyType;        return aClass.isPrimitive() || aClass.isEnum() || WRAPPER_TYPES.contains(aClass) || CharSequence.class.isAssignableFrom(aClass);    } else {        return false;    }}
219309438f1d08d7b28372b59d76317a1a28453f62c7e8e631562a01f4327b22
ensureBeanTypeMapExists
 static void ensureBeanTypeMapExists(Binder binder)
{    beanTypeMapBinding(binder).addBinding(TypeLiteral.get(BeanTypeKey.class)).toInstance(new BeanTypeKey(null));}
3c09548497e7d35dd23a0694b4934a2129be431438debd80c07207ff90505184
bindBeanType
 static void bindBeanType(Binder binder, TypeLiteral<T> typeLiteral, Key<? extends T> key)
{    beanTypeMapBinding(binder).addBinding(typeLiteral).toInstance(new BeanTypeKey(key));}
c2452275e021c1283a2ca577ae81d98ea707c014afb0875cea1fb31ee55758d1
beanTypeMapBinding
private static MapBinder<TypeLiteral, BeanTypeKey> beanTypeMapBinding(Binder binder)
{    return MapBinder.newMapBinder(binder, TypeLiteral.class, BeanTypeKey.class, Names.named(BEAN_TYPE_MAP_NAME));}
8de1e5bb7b8b17ffd987775bbf85522536111a72071435807cd95003f4147a0a
afterInjection
public void afterInjection(Destroyable injectee)
{    registry.add(injectee);}
893e074f548b64dec4e0ecb3d99b55207f0353bcbda59913daa9d0096ac3ba9d
getSecurityManager
public SecurityManager getSecurityManager()
{    return securityManager;}
6bc788647a27b0da3473a49ee21b609ef2e193a53378e623968db9782f99ac4a
afterInjection
public void afterInjection(Initializable injectee)
{    injectee.init();}
d634019dc3203fffb627019359871dec74fe42d2c934ef4c9aa7578805c184ad
hear
public void hear(TypeLiteral<I> type, TypeEncounter<I> encounter)
{    if (InitializableInjectionListener.MATCHER.matches(type)) {        encounter.register(this.<I>castListener(new InitializableInjectionListener<Initializable>()));    }    if (DestroyableInjectionListener.MATCHER.matches(type)) {        encounter.register(this.<I>castListener(new DestroyableInjectionListener<Destroyable>(registry)));    }}
9b67cff5caef193f4bc1a2a252d5a6150155cdf75fa52486abd5829717d2f7a7
castListener
private InjectionListener<? super I> castListener(InjectionListener<?> listener)
{    return (InjectionListener<? super I>) listener;}
4012a548c67fa665e73d306cdabc971f2412f12b0621c00b8c539ad4e787e030
matches
public boolean matches(Class aClass)
{    return aClass.getPackage() != null;}
f8ce53af1a34054383c62358c3dbe304a1205535fda10211c8bc4603b0cf55b6
typeLiteral
public static Matcher<TypeLiteral> typeLiteral(final Matcher<Class> classMatcher)
{    return new AbstractMatcher<TypeLiteral>() {        public boolean matches(TypeLiteral typeLiteral) {            return classMatcher.matches(typeLiteral.getRawType());        }    };}
7dd4f07338a909493c1789a22aa5ec0f184cac5e84915de9ae455719f4a38f6c
matches
public boolean matches(TypeLiteral typeLiteral)
{    return classMatcher.matches(typeLiteral.getRawType());}
0fd4c8317412d757ef7fe47d33996b3a68442fe8ae1f102322a45dfd8a0d0768
configure
public void configure()
{        bindSecurityManager(bind(SecurityManager.class));    bindSessionManager(bind(SessionManager.class));    bindEnvironment(bind(Environment.class));    bindListener(BeanTypeListener.MATCHER, new BeanTypeListener());    bindEventBus(bind(EventBus.class));    bindListener(Matchers.any(), new SubscribedEventTypeListener());    bindListener(Matchers.any(), new EventBusAwareTypeListener());    final DestroyableInjectionListener.DestroyableRegistry registry = new DestroyableInjectionListener.DestroyableRegistry() {        public void add(Destroyable destroyable) {            ShiroModule.this.add(destroyable);        }        @PreDestroy        public void destroy() {            ShiroModule.this.destroy();        }    };    bindListener(LifecycleTypeListener.MATCHER, new LifecycleTypeListener(registry));    expose(SecurityManager.class);    expose(EventBus.class);    configureShiro();    bind(realmCollectionKey()).to(realmSetKey());    bind(DestroyableInjectionListener.DestroyableRegistry.class).toInstance(registry);    BeanTypeListener.ensureBeanTypeMapExists(binder());}
08bfddc2a3a725620a9e147da6af23cd6c92fd3bdb3f370be4ba0baedecbfd81
add
public void add(Destroyable destroyable)
{    ShiroModule.this.add(destroyable);}
9cabd71a85d4928de1c9a46601c11d584f3e7522ee61146e1117d0d360a20b2e
destroy
public void destroy()
{    ShiroModule.this.destroy();}
3c1e768b8c87443c6da90627a34a73fcabbb2e3063f28754a4aa07835339b365
realmSetKey
private Key<Set<Realm>> realmSetKey()
{    return (Key<Set<Realm>>) Key.get(TypeLiteral.get(Types.setOf(Realm.class)));}
073edd6a8f09fa7e8408c55b522a0062e9f6244a7e2bbd36427c4dd82ab310cd
realmCollectionKey
private Key<Collection<Realm>> realmCollectionKey()
{    return (Key<Collection<Realm>>) Key.get(Types.newParameterizedType(Collection.class, Realm.class));}
a2f5755f262421a62d88e8ba8bb94e20d7d7e640bbdd3fe5d0aa17d19e5ea485
bindRealm
protected final LinkedBindingBuilder<Realm> bindRealm()
{    Multibinder<Realm> multibinder = Multibinder.newSetBinder(binder(), Realm.class);    return multibinder.addBinding();}
0c0960677ed9ffe17d81f3dcbcd61c51f8ccd5e96998756de2e0fbb39a0bda91
bindSecurityManager
protected void bindSecurityManager(AnnotatedBindingBuilder<? super SecurityManager> bind)
{    try {        bind.toConstructor(DefaultSecurityManager.class.getConstructor(Collection.class)).asEagerSingleton();    } catch (NoSuchMethodException e) {        throw new ConfigurationException("This really shouldn't happen.  Either something has changed in Shiro, or there's a bug in " + ShiroModule.class.getSimpleName(), e);    }}
2b0506a3c76260df6b05f503fcc2aa66d5f0ce7ae4e8f61c15f0fd9fdbb74de1
bindSessionManager
protected void bindSessionManager(AnnotatedBindingBuilder<SessionManager> bind)
{    bind.to(DefaultSessionManager.class).asEagerSingleton();}
532cb7824b721385f6aa9f085dbca55212c72dd057fb3e1f04fd5ea7cdec5f50
bindEnvironment
protected void bindEnvironment(AnnotatedBindingBuilder<Environment> bind)
{    bind.to(GuiceEnvironment.class).asEagerSingleton();}
63cdece24090d25a5dda1557698150bcd4278dba145ee7b26e06c4855310801c
bindBeanType
protected final void bindBeanType(TypeLiteral<T> typeLiteral, Key<? extends T> key)
{    BeanTypeListener.bindBeanType(binder(), typeLiteral, key);}
9284bec1d27a633afb291336aadc9df1b6f87985bceb4baa43afcc3416e20a16
bindEventBus
protected void bindEventBus(AnnotatedBindingBuilder<EventBus> bind)
{    bind.to(DefaultEventBus.class).asEagerSingleton();}
5885ee3e5bef989ba234f90d9159e4bbb5bbeeef8428bfaea0cf4aa25e19efc2
destroy
public final void destroy()
{    for (Destroyable destroyable : destroyables) {        try {            destroyable.destroy();        } catch (Exception e) {            log.warn("Error destroying component class: " + destroyable.getClass(), e);        }    }}
08bfddc2a3a725620a9e147da6af23cd6c92fd3bdb3f370be4ba0baedecbfd81
add
public void add(Destroyable destroyable)
{    this.destroyables.add(destroyable);}
a05d7b8f8e6c922319d405a681b7dfe9f7abb92d1c21982118b839eb328705b9
hear
public void hear(TypeLiteral<I> typeLiteral, TypeEncounter<I> typeEncounter)
{    final Provider<EventBus> eventBusProvider = typeEncounter.getProvider(EventBus.class);    List<Method> methods = ClassUtils.getAnnotatedMethods(typeLiteral.getRawType(), Subscribe.class);    if (methods != null && !methods.isEmpty()) {        typeEncounter.register(new InjectionListener<I>() {            @Override            public void afterInjection(Object o) {                eventBusProvider.get().register(o);            }        });    }}
430a8e2249133be12fcfe4beb37039930f14183767d4431dd4976c77cc5fe441
afterInjection
public void afterInjection(Object o)
{    eventBusProvider.get().register(o);}
a05d7b8f8e6c922319d405a681b7dfe9f7abb92d1c21982118b839eb328705b9
hear
public void hear(TypeLiteral<I> typeLiteral, TypeEncounter<I> typeEncounter)
{    final Provider<EventBus> eventBusProvider = typeEncounter.getProvider(EventBus.class);    if (EventBusAware.class.isAssignableFrom(typeLiteral.getRawType())) {        typeEncounter.register(new InjectionListener<I>() {            @Override            public void afterInjection(Object o) {                ((EventBusAware) o).setEventBus(eventBusProvider.get());            }        });    }}
430a8e2249133be12fcfe4beb37039930f14183767d4431dd4976c77cc5fe441
afterInjection
public void afterInjection(Object o)
{    ((EventBusAware) o).setEventBus(eventBusProvider.get());}
0e39159daf4961a2ac28cd814c8475a699586ead2acc17f730f8671bf507a801
scope
public Provider<T> scope(final Key<T> key, final Provider<T> unscoped)
{    return new Provider<T>() {        public T get() {            Subject subject = ThreadContext.getSubject();            if (subject == null) {                throw new OutOfScopeException("There is no Shiro Session currently in scope.");            }            Session session = subject.getSession();            T scoped = castSessionAttribute(session);            if (scoped == null) {                scoped = unscoped.get();            }            return scoped;        }        @SuppressWarnings({ "unchecked" })        private T castSessionAttribute(Session session) {            return (T) session.getAttribute(key);        }        @Override        public String toString() {            return unscoped.toString();        }    };}
f92b71e18fa63d96cf2b628ad8520702b897423512edea5de9dd0e96f471f5ff
get
public T get()
{    Subject subject = ThreadContext.getSubject();    if (subject == null) {        throw new OutOfScopeException("There is no Shiro Session currently in scope.");    }    Session session = subject.getSession();    T scoped = castSessionAttribute(session);    if (scoped == null) {        scoped = unscoped.get();    }    return scoped;}
25786ebbcb6a5d276f755e032e42815b874e8d7c41b7345f5ae3b2349b2ca5ab
castSessionAttribute
private T castSessionAttribute(Session session)
{    return (T) session.getAttribute(key);}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return unscoped.toString();}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return "ShiroSessionScope";}
f92b71e18fa63d96cf2b628ad8520702b897423512edea5de9dd0e96f471f5ff
get
public T get()
{    Constructor<T> constructor = getConstructor();    Object[] params = new Object[constructor.getParameterTypes().length];    for (Dependency<?> dependency : constructorInjectionPoint.getDependencies()) {        params[dependency.getParameterIndex()] = injector.getInstance(dependency.getKey());    }    T t;    try {        t = constructor.newInstance(params);    } catch (Exception e) {        throw new ProvisionException("Could not instantiate " + key + "", e);    }    injector.injectMembers(t);    return postProcess(t);}
0c93f0c86713a03e14f8b4458964e306307ddee6f831eef5cd3ebbb61010fcaf
getConstructor
private Constructor<T> getConstructor()
{    return (Constructor<T>) constructorInjectionPoint.getMember();}
bc97270d2e93069a54248dd7cd85d53b8216712e9a78c9102109692228d562a6
postProcess
protected T postProcess(T t)
{        return t;}
d8b3a2d42811e9a84778c6a3292b3d22f02a13e621ec73ee3d413057a343c214
getDependencies
public Set<Dependency<?>> getDependencies()
{    return dependencies;}
7452d4dd5760629e88b282a695c9bb092df93db42ca0bee2a2b18c45648d85a9
setPatternMatcher
public void setPatternMatcher(PatternMatcher patternMatcher)
{    this.patternMatcher = patternMatcher;}
d8b3a2d42811e9a84778c6a3292b3d22f02a13e621ec73ee3d413057a343c214
getDependencies
public Set<Dependency<?>> getDependencies()
{    return dependencies;}
33108b4500ffc9712998b55973dec04803f729b2670be4c2f0f6a7f5423c426b
get
public FilterChainResolver get()
{    return new SimpleFilterChainResolver(chains, injector, patternMatcher);}
02a6c13dd3760283e38343820d8fabcb1ecf27db1eb9bf2617db0109b3acf378
postProcess
protected T postProcess(T filter)
{    for (Map.Entry<String, String> pathConfig : this.pathConfigs.entrySet()) {        filter.processPathConfig(pathConfig.getKey(), pathConfig.getValue());    }    return filter;}
9060a19a4a7b0d8c814e460d19d740030401c122f95502d8d9d142ce8eee1758
bindGuiceFilter
public static void bindGuiceFilter(Binder binder)
{    binder.install(guiceFilterModule());}
72c90f419e05be59261993b61e35943902701ba32efbb95db844fdfc08b01a9f
bindGuiceFilter
public static void bindGuiceFilter(final String pattern, Binder binder)
{    binder.install(guiceFilterModule(pattern));}
050d54ddac58e2c83294c7f3e581ee96785d2ab7c6ea182513265f26bf341186
guiceFilterModule
public static ServletModule guiceFilterModule()
{    return guiceFilterModule("/*");}
e47c7e595a109b46eaac214adbb4c234b0ee2a2709510176b6eb34bde8332c3d
guiceFilterModule
public static ServletModule guiceFilterModule(final String pattern)
{    return new ServletModule() {        @Override        protected void configureServlets() {            filter(pattern).through(GuiceShiroFilter.class);        }    };}
3e1f31db9ae996702b694ada3925348680a9d5efa947f6e092e45e1024b14386
configureServlets
protected void configureServlets()
{    filter(pattern).through(GuiceShiroFilter.class);}
94f737488bd24c3e903cd12640f611b50e93951b6e925ac3b1310fc7062e3ad3
configureShiro
protected final void configureShiro()
{    bindBeanType(TypeLiteral.get(ServletContext.class), Key.get(ServletContext.class, Names.named(NAME)));    bind(Key.get(ServletContext.class, Names.named(NAME))).toInstance(this.servletContext);    bindWebSecurityManager(bind(WebSecurityManager.class));    bindWebEnvironment(bind(WebEnvironment.class));    bind(GuiceShiroFilter.class).asEagerSingleton();    expose(GuiceShiroFilter.class);    this.configureShiroWeb();    bind(FilterChainResolver.class).toProvider(new FilterChainResolverProvider(setupFilterChainConfigs()));}
f479093963ffbabaedfcbd5b636a7a05f2a7f161bb7bf3d4f499a738439b6492
setupFilterChainConfigs
private Map<String, Key<? extends Filter>[]> setupFilterChainConfigs()
{        Map<Key<? extends Filter>, Map<String, String>> filterToPathToConfig = new HashMap<Key<? extends Filter>, Map<String, String>>();        Map<String, Key<? extends Filter>[]> resultConfigMap = new LinkedHashMap<String, Key<? extends Filter>[]>();    for (Map.Entry<String, FilterConfig<? extends Filter>[]> filterChain : filterChains.entrySet()) {        String path = filterChain.getKey();                List<Key<? extends Filter>> keysForPath = new ArrayList<Key<? extends Filter>>();        for (int i = 0; i < filterChain.getValue().length; i++) {            FilterConfig<? extends Filter> filterConfig = filterChain.getValue()[i];            Key<? extends Filter> key = filterConfig.getKey();            String config = filterConfig.getConfigValue();                        if (filterToPathToConfig.get(key) == null) {                                filterToPathToConfig.put((key), new LinkedHashMap<String, String>());            }                        filterToPathToConfig.get(key).put(path, config);                        if (StringUtils.hasText(config) && !PathMatchingFilter.class.isAssignableFrom(key.getTypeLiteral().getRawType())) {                throw new ConfigurationException("Config information requires a PathMatchingFilter - can't apply to " + key.getTypeLiteral().getRawType());            }                        keysForPath.add(key);        }                resultConfigMap.put(path, keysForPath.toArray(new Key[keysForPath.size()]));    }        for (Key<? extends Filter> key : filterToPathToConfig.keySet()) {        if (PathMatchingFilter.class.isAssignableFrom(key.getTypeLiteral().getRawType())) {            bindPathMatchingFilter(castToPathMatching(key), filterToPathToConfig.get(key));        } else {            bind(key);        }    }    return resultConfigMap;}
e8f3874145156dc2211caf9eefd01b31a734be6841f9a0a13afc69a453f2d61f
bindPathMatchingFilter
private void bindPathMatchingFilter(Key<T> filterKey, Map<String, String> configs)
{    bind(filterKey).toProvider(new PathMatchingFilterProvider<T>(filterKey, configs)).asEagerSingleton();}
7a60fe2482cb4e52890e0c24b1d2c8c5fb59db9075e49aec953bfafaced2be54
castToPathMatching
private Key<? extends PathMatchingFilter> castToPathMatching(Key<? extends Filter> key)
{    return (Key<? extends PathMatchingFilter>) key;}
186193b024ebbde39717fc4935669985fe9c58cb913208fe6bde2a25b344a58b
bindSecurityManager
protected final void bindSecurityManager(AnnotatedBindingBuilder<? super SecurityManager> bind)
{        bind.to(WebSecurityManager.class);}
0d654944e1aeddffedbffede17f039e95a2c0e3458417603d6761aa9aaa34ad6
bindWebSecurityManager
protected void bindWebSecurityManager(AnnotatedBindingBuilder<? super WebSecurityManager> bind)
{    try {        bind.toConstructor(DefaultWebSecurityManager.class.getConstructor(Collection.class)).asEagerSingleton();    } catch (NoSuchMethodException e) {        throw new ConfigurationException("This really shouldn't happen.  Either something has changed in Shiro, or there's a bug in ShiroModule.", e);    }}
2b0506a3c76260df6b05f503fcc2aa66d5f0ce7ae4e8f61c15f0fd9fdbb74de1
bindSessionManager
protected void bindSessionManager(AnnotatedBindingBuilder<SessionManager> bind)
{    bind.to(ServletContainerSessionManager.class).asEagerSingleton();}
c5f80a15513d0e68f2d10ea84d0f625fbb604b1e08116f3f3fcba7bf76012565
bindEnvironment
protected final void bindEnvironment(AnnotatedBindingBuilder<Environment> bind)
{        bind.to(WebEnvironment.class);}
d1e6c51a4d3ca60f65be8c6ced699d7e5b3b0f616e1eec57de9d8af7981870a3
bindWebEnvironment
protected void bindWebEnvironment(AnnotatedBindingBuilder<? super WebEnvironment> bind)
{    bind.to(WebGuiceEnvironment.class).asEagerSingleton();}
e5f517b35c388c61eb7c363865a3d8046af66f8689d75e6ad9043a086f47b649
addFilterChain
protected final void addFilterChain(String pattern, Key<? extends Filter> key)
{        if (key instanceof FilterConfigKey) {        addLegacyFilterChain(pattern, (FilterConfigKey) key);    } else {        addFilterChain(pattern, new FilterConfig<Filter>((Key<Filter>) key, ""));    }}
f4faeddb1b7a5ec4bb0c5cd58e3aaa844a4c24d8f58005a72c9aa6e10a26c69c
addFilterChain
protected final void addFilterChain(String pattern, FilterConfig<? extends Filter>... filterConfigs)
{    filterChains.put(pattern, filterConfigs);}
5ca73570bb74ac254d0fefe651060645aa0158bbfdff9eeae9438505bf32cac9
filterConfig
protected static FilterConfig<T> filterConfig(Key<T> baseKey, String configValue)
{    return new FilterConfig<T>(baseKey, configValue);}
fc6a3f0cb249c99569088b35cc0b0f4da9c9d8fc228c196b63ee482cf8e1b92d
filterConfig
protected static FilterConfig<T> filterConfig(Key<T> baseKey)
{    return filterConfig(baseKey, "");}
3bbac50645496e8d9b29a1dba64e786ab15552b35a5baabd7431dfbd09c66000
filterConfig
protected static FilterConfig<T> filterConfig(TypeLiteral<T> typeLiteral, String configValue)
{    return filterConfig(Key.get(typeLiteral), configValue);}
ca825caeca1dbf1ebbb369f666eaad8985dd460efb2fd4f6d3aa8e4c50738854
filterConfig
protected static FilterConfig<T> filterConfig(Class<T> type, String configValue)
{    return filterConfig(Key.get(type), configValue);}
847a9912158ea3a8df3f8f4809d4f90e643430f7b62ef2fbe584085d44bd4ed0
getKey
public Key<T> getKey()
{    return key;}
d6778c5233e1de24b771418df8b497074d6aa68d9e220149f4b8b8a0038556f8
getConfigValue
public String getConfigValue()
{    return configValue;}
49e925da687b8711c0cc6cddae9358cb097110bebbfc6224c96f0cde0d3bf65e
isGuiceVersion3
 static boolean isGuiceVersion3()
{    try {        Class.forName("com.google.inject.multibindings.MapKey");        return false;    } catch (ClassNotFoundException e) {        return true;    }}
c0f70785fa4b2a2921ec3c63a7402a6fb09d5f34c3f1b4b7f8b75add6490f676
addLegacyFilterChain
private void addLegacyFilterChain(String pattern, FilterConfigKey filterConfigKey)
{    FilterConfig<Filter> filterConfig = new FilterConfig<Filter>(filterConfigKey.getKey(), filterConfigKey.getConfigValue());    addFilterChain(pattern, filterConfig);}
b646f0067f6ddfc12b613b824bdbe91d0be05aa979319d6b8f66da05daaac0cd
addFilterChain
protected final void addFilterChain(String pattern, Key<? extends Filter>... keys)
{        FilterConfig[] filterConfigs = new FilterConfig[keys.length];    for (int ii = 0; ii < keys.length; ii++) {        Key<? extends Filter> key = keys[ii];                if (key instanceof FilterConfigKey) {                        FilterConfigKey legacyKey = (FilterConfigKey) key;            filterConfigs[ii] = new FilterConfig(legacyKey.getKey(), legacyKey.getConfigValue());        } else {                        filterConfigs[ii] = new FilterConfig(key, "");        }    }    filterChains.put(pattern, filterConfigs);}
503fd34b6fc41155b19345cdb1a6e248821faefc1d8e27a299b793ee9dfe7721
config
protected static Key<T> config(Key<T> baseKey, String configValue)
{    if (!isGuiceVersion3()) {        throw new ConfigurationException("Method ShiroWebModule.config(Key<? extends PathMatchingFilter>, String configValue), is not supported when using Guice 4+");    }    return new FilterConfigKey<T>(baseKey, configValue);}
392ff1522b11b08b5bb183ce88959f604fc4186add6675583a44897b4ff170a2
config
protected static Key<T> config(TypeLiteral<T> typeLiteral, String configValue)
{    return config(Key.get(typeLiteral), configValue);}
aa4cf650eba1ec2732f9d6679f224ebea6d12227d84091b2a944693dc16e0bd3
config
protected static Key<T> config(Class<T> type, String configValue)
{    return config(Key.get(type), configValue);}
847a9912158ea3a8df3f8f4809d4f90e643430f7b62ef2fbe584085d44bd4ed0
getKey
public Key<T> getKey()
{    return key;}
d6778c5233e1de24b771418df8b497074d6aa68d9e220149f4b8b8a0038556f8
getConfigValue
public String getConfigValue()
{    return configValue;}
4e60aae3708c708192e02f927431747947a9f8cc00b22fbdc63ef314d5ef7cad
doFilter
public void doFilter(ServletRequest request, ServletResponse response) throws IOException, ServletException
{    if (chain.hasNext()) {        Filter filter = chain.next();        filter.doFilter(request, response, this);    } else if (!originalCalled) {        originalCalled = true;        originalChain.doFilter(request, response);    }}
315aefe37a941f1d9c8026c9007289bafe6c5334c233161ec86d49c7d625fc6f
getFilters
 Iterator<? extends Filter> getFilters()
{    return chain;}
d8b493ed9020180682a742610844ff3d45cff089789d4952c2b463faad83bd46
getChain
public FilterChain getChain(ServletRequest request, ServletResponse response, final FilterChain originalChain)
{    String path = WebUtils.getPathWithinApplication(WebUtils.toHttp(request));    for (final String pathPattern : chains.keySet()) {        if (patternMatcher.matches(pathPattern, path)) {            final Iterator<Key<? extends Filter>> chain = Arrays.asList(chains.get(pathPattern)).iterator();            return new SimpleFilterChain(originalChain, new Iterator<Filter>() {                public boolean hasNext() {                    return chain.hasNext();                }                public Filter next() {                    return injector.getInstance(chain.next());                }                public void remove() {                    throw new UnsupportedOperationException();                }            });        }    }    return null;}
d51e5f7450eca0a0f63da1a466189e262d053b84aa767ba3be5cea740af7251b
hasNext
public boolean hasNext()
{    return chain.hasNext();}
761fa52d95e5beff56adf4cf03ec0a8ff20bfe2be4de05edc800ea42f664b250
next
public Filter next()
{    return injector.getInstance(chain.next());}
eb35e4acc0ab2c89fd30970f01fba35488b3a4581b2af1986091209043508a3e
remove
public void remove()
{    throw new UnsupportedOperationException();}
cf0db2f8e8ba0741baf805a8bc52b5f3592249ba61dc0b9a89961f5f54ffb5da
getFilterChainResolver
public FilterChainResolver getFilterChainResolver()
{    return filterChainResolver;}
080e6dfeffad4589787f1a6fda9a213672aea9ede479cb0719278c34fafc3319
getServletContext
public ServletContext getServletContext()
{    return servletContext;}
68d00d368c33d9504c762c7d755f515ad006daeb25df366e5f942714f8c46702
getWebSecurityManager
public WebSecurityManager getWebSecurityManager()
{    return securityManager;}
893e074f548b64dec4e0ecb3d99b55207f0353bcbda59913daa9d0096ac3ba9d
getSecurityManager
public SecurityManager getSecurityManager()
{    return securityManager;}
aa99dfcf4c86933ee605ce266f98a6e301d36522804f122aa5d020e7727101f1
testInvoke
public void testInvoke() throws Throwable
{    MethodInvocation allianceInvocation = createMock(MethodInvocation.class);    MethodInterceptor mockShiroInterceptor = createMock(MethodInterceptor.class);    expect(mockShiroInterceptor.invoke(anyObject(AopAllianceMethodInvocationAdapter.class))).andAnswer(new IAnswer<Object>() {        public Object answer() throws Throwable {            return getCurrentArguments()[0];        }    });    final Object expectedValue = new Object();    expect(allianceInvocation.proceed()).andReturn(expectedValue);    replay(mockShiroInterceptor, allianceInvocation);    AopAllianceMethodInterceptorAdapter underTest = new AopAllianceMethodInterceptorAdapter(mockShiroInterceptor);    Object invocation = underTest.invoke(allianceInvocation);    Object value = ((AopAllianceMethodInvocationAdapter) invocation).proceed();    assertSame("Adapter invocation returned a different value.", expectedValue, value);    verify(mockShiroInterceptor, allianceInvocation);}
7912982e61c9a78aeb1642f1bf326ed433012732ea9b9100c30d264cc489ffda
answer
public Object answer() throws Throwable
{    return getCurrentArguments()[0];}
bc98d7fc4142202e5b82a53f5bb2e8b372ec801424fa832d52128bdd9e99985b
testGetMethod
public void testGetMethod() throws Exception
{    MethodInvocation mock = createMock(MethodInvocation.class);    Method method = AopAllianceMethodInvocationAdapterTest.class.getMethod("testGetMethod");    expect(mock.getMethod()).andReturn(method);    AopAllianceMethodInvocationAdapter underTest = new AopAllianceMethodInvocationAdapter(mock);    replay(mock);    assertSame(method, underTest.getMethod());    verify(mock);}
638b3f4af0ddc77549fedb29abc56dad0a2e2497c3df2a65b47cdd44f213b7e6
testGetArguments
public void testGetArguments() throws Exception
{    MethodInvocation mock = createMock(MethodInvocation.class);    Object[] args = new Object[0];    expect(mock.getArguments()).andReturn(args);    AopAllianceMethodInvocationAdapter underTest = new AopAllianceMethodInvocationAdapter(mock);    replay(mock);    assertSame(args, underTest.getArguments());    verify(mock);}
fbd1990f1c9bc3b01cc88ddee9ba997abec7a5b3070b60e5b3c8f46f0ee51d57
testProceed
public void testProceed() throws Throwable
{    MethodInvocation mock = createMock(MethodInvocation.class);    Object value = new Object();    expect(mock.proceed()).andReturn(value);    AopAllianceMethodInvocationAdapter underTest = new AopAllianceMethodInvocationAdapter(mock);    replay(mock);    assertSame(value, underTest.proceed());    verify(mock);}
0cde9079edf290fb891563fcb33ce656ee5047456b67367cd6897f09a19b6c2a
testGetThis
public void testGetThis() throws Exception
{    MethodInvocation mock = createMock(MethodInvocation.class);    Object value = new Object();    expect(mock.getThis()).andReturn(value);    AopAllianceMethodInvocationAdapter underTest = new AopAllianceMethodInvocationAdapter(mock);    replay(mock);    assertSame(value, underTest.getThis());    verify(mock);}
c1e4e6600745e643ee857a972308a0e80157d150636fd101856db09d1d3b395f
testGetAnnotationResolver
public void testGetAnnotationResolver()
{    final AnnotationResolver annotationResolver = new DefaultAnnotationResolver();    ShiroAopModule underTest = new ShiroAopModule() {        @Override        protected AnnotationResolver createAnnotationResolver() {            return annotationResolver;        }        @Override        protected void configureDefaultInterceptors(AnnotationResolver resolver) {            assertSame(annotationResolver, resolver);            bind(Object.class).annotatedWith(Names.named("configureDefaultInterceptors"));        }        @Override        protected void configureInterceptors(AnnotationResolver resolver) {            assertSame(annotationResolver, resolver);            bind(Object.class).annotatedWith(Names.named("configureInterceptors"));        }    };    boolean calledDefault = false;    boolean calledCustom = false;    for (Element e : Elements.getElements(underTest)) {        if (e instanceof Binding) {            Key key = ((Binding) e).getKey();            if (Named.class.isAssignableFrom(key.getAnnotation().annotationType()) && "configureInterceptors".equals(((Named) key.getAnnotation()).value()) && key.getTypeLiteral().getRawType().equals(Object.class)) {                calledCustom = true;            }            if (Named.class.isAssignableFrom(key.getAnnotation().annotationType()) && "configureDefaultInterceptors".equals(((Named) key.getAnnotation()).value()) && key.getTypeLiteral().getRawType().equals(Object.class)) {                calledDefault = true;            }        }    }}
f48853a752d35d27a96c58e198cd18b8033dd5de3e9f31cc884787bc8c63a2c8
createAnnotationResolver
protected AnnotationResolver createAnnotationResolver()
{    return annotationResolver;}
96ca000084a5e66939623e1ef6d62663d48a9a7f250b2d09d757b6f9ac9c2f49
configureDefaultInterceptors
protected void configureDefaultInterceptors(AnnotationResolver resolver)
{    assertSame(annotationResolver, resolver);    bind(Object.class).annotatedWith(Names.named("configureDefaultInterceptors"));}
d4d03f01a9365517351bbe6e15d0670d1cb283855e1bc117125b84bdd638a1d1
configureInterceptors
protected void configureInterceptors(AnnotationResolver resolver)
{    assertSame(annotationResolver, resolver);    bind(Object.class).annotatedWith(Names.named("configureInterceptors"));}
b55b099d4223fdf2b816be7e0360c916d574724963658d9efa4c2edbd11cddba
testBindShiroInterceptor
public void testBindShiroInterceptor()
{    ShiroAopModule underTest = new ShiroAopModule() {        @Override        protected void configureInterceptors(AnnotationResolver resolver) {            bindShiroInterceptor(new MyAnnotationMethodInterceptor());        }    };    List<Element> elements = Elements.getElements(underTest);    for (Element element : elements) {        if (element instanceof InterceptorBinding) {            InterceptorBinding binding = (InterceptorBinding) element;            assertTrue(binding.getClassMatcher().matches(getClass()));            Method method = null;            Class<? extends Annotation> theAnnotation = null;            for (Class<? extends Annotation> annotation : protectedMethods.keySet()) {                if (binding.getMethodMatcher().matches(protectedMethods.get(annotation))) {                    method = protectedMethods.get(annotation);                    theAnnotation = annotation;                    protectedMethods.remove(annotation);                    break;                }            }            if (method == null) {                fail("Did not expect interceptor binding " + binding.getInterceptors());            }            List<MethodInterceptor> interceptors = binding.getInterceptors();            assertEquals(1, interceptors.size());            assertTrue(interceptors.get(0) instanceof AopAllianceMethodInterceptorAdapter);            assertTrue(interceptorTypes.get(theAnnotation).isInstance(((AopAllianceMethodInterceptorAdapter) interceptors.get(0)).shiroInterceptor));        }    }    assertTrue("Not all interceptors were bound.", protectedMethods.isEmpty());}
d4d03f01a9365517351bbe6e15d0670d1cb283855e1bc117125b84bdd638a1d1
configureInterceptors
protected void configureInterceptors(AnnotationResolver resolver)
{    bindShiroInterceptor(new MyAnnotationMethodInterceptor());}
452176b5a2b764d210f4e03b31efcbe2fed7512dde378a57931764d3ed55c42f
invoke
public Object invoke(MethodInvocation methodInvocation) throws Throwable
{    return null;}
dbd4b78cb74621a9211d203539c8b88009aa95292b0787d3f55b9839ff72cd88
roleProtected
public void roleProtected()
{}
a8279f1a4fd122567798c5ba7a15fc1a4cf89f30e7e291fc9aa082a8ef585c04
permissionProtected
public void permissionProtected()
{}
fca95d0189061c0242702bfbeca70d37bff31e4361460ec9e8cc2bea82b5a1f4
authProtected
public void authProtected()
{}
4efea3a4421162d23ebbf08c889f8ec42670295d1c41bb90a2f25799da8f2b5a
userProtected
public void userProtected()
{}
393096c811a485f11212a1c1e6f564fbb6f20868ef71ef881fa2d344ea42faed
guestProtected
public void guestProtected()
{}
1fc8bfca40bec4a83a139b3e1f43413c227e92fbd423d84d1246f57a5c274694
myTestProtected
public void myTestProtected()
{}
8cb42062319854b0f6abbe8d94a28781263ff475696099772f0f5a90659e9344
setup
public void setup() throws NoSuchMethodException
{    protectedMethods = new HashMap<Class<? extends Annotation>, Method>();    protectedMethods.put(RequiresRoles.class, getClass().getMethod("roleProtected"));    protectedMethods.put(RequiresPermissions.class, getClass().getMethod("permissionProtected"));    protectedMethods.put(RequiresAuthentication.class, getClass().getMethod("authProtected"));    protectedMethods.put(RequiresUser.class, getClass().getMethod("userProtected"));    protectedMethods.put(RequiresGuest.class, getClass().getMethod("guestProtected"));    protectedMethods.put(MyTestAnnotation.class, getClass().getMethod("myTestProtected"));    interceptorTypes = new HashMap<Class<? extends Annotation>, Class<? extends AnnotationMethodInterceptor>>();    interceptorTypes.put(RequiresRoles.class, RoleAnnotationMethodInterceptor.class);    interceptorTypes.put(RequiresPermissions.class, PermissionAnnotationMethodInterceptor.class);    interceptorTypes.put(RequiresAuthentication.class, AuthenticatedAnnotationMethodInterceptor.class);    interceptorTypes.put(RequiresUser.class, UserAnnotationMethodInterceptor.class);    interceptorTypes.put(RequiresGuest.class, GuestAnnotationMethodInterceptor.class);    interceptorTypes.put(MyTestAnnotation.class, MyAnnotationMethodInterceptor.class);}
c84c09030a39dcc1b222ea87d17731bdd42423a9fad0f0212bb3648daa009490
testUnmatchedPackage
public void testUnmatchedPackage() throws Exception
{    assertFalse(BeanTypeListener.MATCHER.matches(TypeLiteral.get(GuiceEnvironment.class)));    assertFalse(BeanTypeListener.MATCHER.matches(TypeLiteral.get(ShiroWebModule.class)));    assertFalse(BeanTypeListener.MATCHER.matches(TypeLiteral.get(ShiroAopModule.class)));}
fc17ad49f884ad2e8ca936bf98fa42d9345bca7ce6a9a40e28caeb150a05d6b5
testMatchedPackage
public void testMatchedPackage() throws Exception
{    assertTrue(BeanTypeListener.MATCHER.matches(TypeLiteral.get(SecurityUtils.class)));    assertTrue(BeanTypeListener.MATCHER.matches(TypeLiteral.get(DefaultAnnotationResolver.class)));    assertTrue(BeanTypeListener.MATCHER.matches(TypeLiteral.get(BlowfishCipherService.class)));}
6447ac6e0a604fb99230d7cdc8d3ed8c2f28cd54eeab72e41ba69c2756d9aaf4
testPropertySetting
public void testPropertySetting() throws Exception
{    IMocksControl control = createControl();    TypeEncounter<SomeInjectableBean> encounter = control.createMock(TypeEncounter.class);    Provider<Injector> injectorProvider = control.createMock(Provider.class);    Injector injector = control.createMock(Injector.class);    expect(encounter.getProvider(Injector.class)).andReturn(injectorProvider);    expect(injectorProvider.get()).andReturn(injector).anyTimes();    Capture<MembersInjector<SomeInjectableBean>> capture = Capture.newInstance();    encounter.register(and(anyObject(MembersInjector.class), capture(capture)));    SecurityManager securityManager = control.createMock(SecurityManager.class);    String property = "myPropertyValue";    expect(injector.getInstance(Key.get(SecurityManager.class))).andReturn(securityManager);    expect(injector.getInstance(Key.get(String.class, Names.named("shiro.myProperty")))).andReturn(property);    expect(injector.getInstance(Key.get(String.class, Names.named("shiro.unavailableProperty")))).andThrow(new ConfigurationException(Collections.singleton(new Message("Not Available!"))));    expect((Map) injector.getInstance(BeanTypeListener.MAP_KEY)).andReturn(Collections.EMPTY_MAP).anyTimes();    control.replay();    BeanTypeListener underTest = new BeanTypeListener();    underTest.hear(TypeLiteral.get(SomeInjectableBean.class), encounter);    SomeInjectableBean bean = new SomeInjectableBean();    capture.getValue().injectMembers(bean);    assertSame(securityManager, bean.securityManager);    assertSame(property, bean.myProperty);    assertNull(bean.unavailableProperty);    control.verify();}
c11e39b3138902654fbfe242e943963b5e160471a127c735c0e7e1bf5c67886e
setSecurityManager
public void setSecurityManager(SecurityManager securityManager)
{    this.securityManager = securityManager;}
467c76437854a657118547239b74707a17b994dbb371ec0fd6da8ea82a56bb24
setMyProperty
public void setMyProperty(String myProperty)
{    this.myProperty = myProperty;}
3eb87fda6288ca8b01a7ba997af8f12e47f68f76ac1aa158bcbcf9f8f4ea8dde
setUnavailableProperty
public void setUnavailableProperty(String unavailableProperty)
{    this.unavailableProperty = unavailableProperty;}
bfd172c86d3de0c398dde05830c24cdf86c1280bf6553a7c12ddddf503ce6ef2
testAfterInjection
public void testAfterInjection() throws Exception
{    DestroyableInjectionListener.DestroyableRegistry registry = createMock(DestroyableInjectionListener.DestroyableRegistry.class);    Destroyable destroyable = createMock(Destroyable.class);    registry.add(destroyable);    replay(registry, destroyable);    DestroyableInjectionListener underTest = new DestroyableInjectionListener(registry);    underTest.afterInjection(destroyable);    verify(registry, destroyable);}
5048b38663b8cef35d73d73637ddf973d01adec3749652d71bf761a17d1dd525
testGetSecurityManager
public void testGetSecurityManager() throws Exception
{    SecurityManager securityManager = createMock(SecurityManager.class);    GuiceEnvironment underTest = new GuiceEnvironment(securityManager);    assertSame(securityManager, underTest.getSecurityManager());}
c3ff40b08c1a5768b44d3cbd9c16c3a6c0bacc30bee92fb3140afc6099942708
ensureInjectable
public void ensureInjectable()
{    try {        InjectionPoint ip = InjectionPoint.forConstructorOf(GuiceEnvironment.class);    } catch (Exception e) {        fail("Could not create constructor injection point.");    }}
bfd172c86d3de0c398dde05830c24cdf86c1280bf6553a7c12ddddf503ce6ef2
testAfterInjection
public void testAfterInjection() throws Exception
{    Initializable initializable = createMock(Initializable.class);    initializable.init();    replay(initializable);    InitializableInjectionListener underTest = new InitializableInjectionListener();    underTest.afterInjection(initializable);    verify(initializable);}
4f1c805280dde8e4cf924506d5773ae11db13eb4b3e584f23d6e5fbb03075ff7
testHearInitializable
public void testHearInitializable() throws Exception
{    TypeEncounter encounter = createMock(TypeEncounter.class);    encounter.register(anyObject(InitializableInjectionListener.class));    replay(encounter);    LifecycleTypeListener underTest = new LifecycleTypeListener(null);    underTest.hear(TypeLiteral.get(MyInitializable.class), encounter);    verify(encounter);}
08f71f1442eac46c9684ecd9453cd1c6a0abf292f195f11c80a82717c6fc55cf
testHearDestroyable
public void testHearDestroyable() throws Exception
{    TypeEncounter encounter = createMock(TypeEncounter.class);    encounter.register(anyObject(DestroyableInjectionListener.class));    replay(encounter);    LifecycleTypeListener underTest = new LifecycleTypeListener(null);    underTest.hear(TypeLiteral.get(MyDestroyable.class), encounter);    verify(encounter);}
6a532077eaa300a777e08e8b5b6b15446b08d4dfae5065cb4ed1f2142af72511
init
public void init() throws ShiroException
{}
b43e7dc4a9f7929f7cbf79e54bda99f9719af6c9509dfa283baa743984130577
destroy
public void destroy() throws Exception
{}
8da8ef1b2fb46b67bbfb8b5a283c19e58aae47e8a1afc304d3ad76aec21905e5
testTypeLiteral
public void testTypeLiteral() throws Exception
{    Matcher<Class> classMatcher = createMock(Matcher.class);    expect(classMatcher.matches(MatchingClass.class)).andReturn(true);    expect(classMatcher.matches(NotMatchingClass.class)).andReturn(false);    replay(classMatcher);    Matcher<TypeLiteral> underTest = ShiroMatchers.typeLiteral(classMatcher);    assertTrue(underTest.matches(TypeLiteral.get(MatchingClass.class)));    assertFalse(underTest.matches(TypeLiteral.get(NotMatchingClass.class)));    verify(classMatcher);}
24a8ef6660ed1e616fc8fe059819a220b6064df93bd495ac8a777e1503c5a8f2
basicInstantiation
public void basicInstantiation()
{    final MockRealm mockRealm = createMock(MockRealm.class);    Injector injector = Guice.createInjector(new ShiroModule() {        @Override        protected void configureShiro() {            bindRealm().to(MockRealm.class);        }        @Provides        public MockRealm createRealm() {            return mockRealm;        }    });    SecurityManager securityManager = injector.getInstance(SecurityManager.class);    assertNotNull(securityManager);}
a01bffd7ffadb0cc7d69f95d376a3982f61a657101247c69f8a59229dbb6196c
configureShiro
protected void configureShiro()
{    bindRealm().to(MockRealm.class);}
7df85749518bf0e00932a560a32757ab0408cbe1f2e8c49322645b5ca1960348
createRealm
public MockRealm createRealm()
{    return mockRealm;}
57e3af1eefb27d515cf2edbe0364107956803b91525a594280f1ed19f7057951
testConfigure
public void testConfigure()
{    final MockRealm mockRealm = createMock(MockRealm.class);    AuthenticationToken authToken = createMock(AuthenticationToken.class);    AuthenticationInfo info = new SimpleAuthenticationInfo("mockUser", "password", "mockRealm");    expect(mockRealm.supports(authToken)).andReturn(true);    expect(mockRealm.getAuthenticationInfo(authToken)).andReturn(info);    replay(mockRealm);    Injector injector = Guice.createInjector(new ShiroModule() {        @Override        protected void configureShiro() {            bindRealm().to(MockRealm.class);        }        @Provides        public MockRealm createRealm() {            return mockRealm;        }    });    SecurityManager securityManager = injector.getInstance(SecurityManager.class);    assertNotNull(securityManager);    SecurityUtils.setSecurityManager(securityManager);    final Subject subject = new Subject.Builder(securityManager).buildSubject();    securityManager.login(subject, authToken);    verify(mockRealm);}
a01bffd7ffadb0cc7d69f95d376a3982f61a657101247c69f8a59229dbb6196c
configureShiro
protected void configureShiro()
{    bindRealm().to(MockRealm.class);}
7df85749518bf0e00932a560a32757ab0408cbe1f2e8c49322645b5ca1960348
createRealm
public MockRealm createRealm()
{    return mockRealm;}
17921c0fc5c3039e3d52f903edefc8358f956615dfdd235a404cf0bf4f8575d5
testBindSecurityManager
public void testBindSecurityManager()
{    final MockRealm mockRealm = createMock(MockRealm.class);    Injector injector = Guice.createInjector(new ShiroModule() {        @Override        protected void configureShiro() {            bindRealm().to(MockRealm.class);        }        @Provides        public MockRealm createRealm() {            return mockRealm;        }        @Override        protected void bindSecurityManager(AnnotatedBindingBuilder<? super SecurityManager> bind) {            bind.to(MyDefaultSecurityManager.class);        }    });    SecurityManager securityManager = injector.getInstance(SecurityManager.class);    assertNotNull(securityManager);    assertTrue(securityManager instanceof MyDefaultSecurityManager);}
a01bffd7ffadb0cc7d69f95d376a3982f61a657101247c69f8a59229dbb6196c
configureShiro
protected void configureShiro()
{    bindRealm().to(MockRealm.class);}
7df85749518bf0e00932a560a32757ab0408cbe1f2e8c49322645b5ca1960348
createRealm
public MockRealm createRealm()
{    return mockRealm;}
0c0960677ed9ffe17d81f3dcbcd61c51f8ccd5e96998756de2e0fbb39a0bda91
bindSecurityManager
protected void bindSecurityManager(AnnotatedBindingBuilder<? super SecurityManager> bind)
{    bind.to(MyDefaultSecurityManager.class);}
a665bfa127a10468c172357b49a675d6e376c0a8243d2871bacf19d5aec1222d
testBindSessionManager
public void testBindSessionManager()
{    final MockRealm mockRealm = createMock(MockRealm.class);    Injector injector = Guice.createInjector(new ShiroModule() {        @Override        protected void configureShiro() {            bindRealm().to(MockRealm.class);        }        @Provides        public MockRealm createRealm() {            return mockRealm;        }        @Override        protected void bindSessionManager(AnnotatedBindingBuilder<SessionManager> bind) {            bind.to(MyDefaultSessionManager.class);        }    });    DefaultSecurityManager securityManager = (DefaultSecurityManager) injector.getInstance(SecurityManager.class);    assertNotNull(securityManager);    assertNotNull(securityManager.getSessionManager());    assertTrue(securityManager.getSessionManager() instanceof MyDefaultSessionManager);}
a01bffd7ffadb0cc7d69f95d376a3982f61a657101247c69f8a59229dbb6196c
configureShiro
protected void configureShiro()
{    bindRealm().to(MockRealm.class);}
7df85749518bf0e00932a560a32757ab0408cbe1f2e8c49322645b5ca1960348
createRealm
public MockRealm createRealm()
{    return mockRealm;}
2b0506a3c76260df6b05f503fcc2aa66d5f0ce7ae4e8f61c15f0fd9fdbb74de1
bindSessionManager
protected void bindSessionManager(AnnotatedBindingBuilder<SessionManager> bind)
{    bind.to(MyDefaultSessionManager.class);}
5a00010fc6a7a76e3bb5537be152e1f26988a0c135604564efb80a4184f14b25
testBindEnvironment
public void testBindEnvironment()
{    final MockRealm mockRealm = createMock(MockRealm.class);    Injector injector = Guice.createInjector(new ShiroModule() {        @Override        protected void configureShiro() {            bindRealm().to(MockRealm.class);            expose(Environment.class);        }        @Provides        public MockRealm createRealm() {            return mockRealm;        }        @Override        protected void bindEnvironment(AnnotatedBindingBuilder<Environment> bind) {            bind.to(MyEnvironment.class);        }    });    Environment environment = injector.getInstance(Environment.class);    assertNotNull(environment);    assertTrue(environment instanceof MyEnvironment);}
a01bffd7ffadb0cc7d69f95d376a3982f61a657101247c69f8a59229dbb6196c
configureShiro
protected void configureShiro()
{    bindRealm().to(MockRealm.class);    expose(Environment.class);}
7df85749518bf0e00932a560a32757ab0408cbe1f2e8c49322645b5ca1960348
createRealm
public MockRealm createRealm()
{    return mockRealm;}
532cb7824b721385f6aa9f085dbca55212c72dd057fb3e1f04fd5ea7cdec5f50
bindEnvironment
protected void bindEnvironment(AnnotatedBindingBuilder<Environment> bind)
{    bind.to(MyEnvironment.class);}
488c97304e36e2a82533202174caf21d5c324064c15e327bfad64c620bbbe765
testDestroy
public void testDestroy() throws Exception
{    final MockRealm mockRealm = createMock(MockRealm.class);    final MyDestroyable myDestroyable = createMock(MyDestroyable.class);    myDestroyable.destroy();    replay(myDestroyable);    final ShiroModule shiroModule = new ShiroModule() {        @Override        protected void configureShiro() {            bindRealm().to(MockRealm.class);            bind(MyDestroyable.class).toInstance(myDestroyable);            expose(MyDestroyable.class);        }        @Provides        public MockRealm createRealm() {            return mockRealm;        }    };    Injector injector = Guice.createInjector(shiroModule);    injector.getInstance(MyDestroyable.class);    shiroModule.destroy();    verify(myDestroyable);}
a01bffd7ffadb0cc7d69f95d376a3982f61a657101247c69f8a59229dbb6196c
configureShiro
protected void configureShiro()
{    bindRealm().to(MockRealm.class);    bind(MyDestroyable.class).toInstance(myDestroyable);    expose(MyDestroyable.class);}
7df85749518bf0e00932a560a32757ab0408cbe1f2e8c49322645b5ca1960348
createRealm
public MockRealm createRealm()
{    return mockRealm;}
87243c024b9f084a6a013672a40407f74a37d497eed19736854c6274049e6a4e
testEventListener
public void testEventListener() throws Exception
{    final MockRealm mockRealm = createMock(MockRealm.class);    final EventBus eventBus = createMock(EventBus.class);        eventBus.register(anyObject(MockEventListener1.class));    eventBus.register(anyObject(MockEventListener2.class));    replay(eventBus);    final ShiroModule shiroModule = new ShiroModule() {        @Override        protected void configureShiro() {            bindRealm().to(MockRealm.class);                        binder().bind(MockEventListener1.class).asEagerSingleton();            binder().bind(MockEventListener2.class).asEagerSingleton();        }        @Override        protected void bindEventBus(AnnotatedBindingBuilder<EventBus> bind) {            bind.toInstance(eventBus);        }        @Provides        public MockRealm createRealm() {            return mockRealm;        }    };    Guice.createInjector(shiroModule);    verify(eventBus);}
a01bffd7ffadb0cc7d69f95d376a3982f61a657101247c69f8a59229dbb6196c
configureShiro
protected void configureShiro()
{    bindRealm().to(MockRealm.class);        binder().bind(MockEventListener1.class).asEagerSingleton();    binder().bind(MockEventListener2.class).asEagerSingleton();}
9284bec1d27a633afb291336aadc9df1b6f87985bceb4baa43afcc3416e20a16
bindEventBus
protected void bindEventBus(AnnotatedBindingBuilder<EventBus> bind)
{    bind.toInstance(eventBus);}
7df85749518bf0e00932a560a32757ab0408cbe1f2e8c49322645b5ca1960348
createRealm
public MockRealm createRealm()
{    return mockRealm;}
71dece9d4f34b25888ad8835ce18464bc10e5ef138e244ee51788be48535dff8
testEventBusAware
public void testEventBusAware() throws Exception
{    final MockRealm mockRealm = createMock(MockRealm.class);    final ShiroModule shiroModule = new ShiroModule() {        @Override        protected void configureShiro() {            bindRealm().to(MockRealm.class);            binder().bind(MockEventBusAware.class).asEagerSingleton();            expose(MockEventBusAware.class);        }        @Provides        public MockRealm createRealm() {            return mockRealm;        }    };    Injector injector = Guice.createInjector(shiroModule);    EventBus eventBus = injector.getInstance(EventBus.class);    SecurityManager securityManager = injector.getInstance(SecurityManager.class);    MockEventBusAware eventBusAware = injector.getInstance(MockEventBusAware.class);    assertSame(eventBus, eventBusAware.eventBus);    assertSame(eventBus, ((DefaultSecurityManager) securityManager).getEventBus());}
a01bffd7ffadb0cc7d69f95d376a3982f61a657101247c69f8a59229dbb6196c
configureShiro
protected void configureShiro()
{    bindRealm().to(MockRealm.class);    binder().bind(MockEventBusAware.class).asEagerSingleton();    expose(MockEventBusAware.class);}
7df85749518bf0e00932a560a32757ab0408cbe1f2e8c49322645b5ca1960348
createRealm
public MockRealm createRealm()
{    return mockRealm;}
5c7467c8f28ed39a393db482962bd4c2371517038bba0f7fa31b350ec1ea0d70
listenToAllAndDoNothing
public void listenToAllAndDoNothing(Object o)
{}
5c7467c8f28ed39a393db482962bd4c2371517038bba0f7fa31b350ec1ea0d70
listenToAllAndDoNothing
public void listenToAllAndDoNothing(Object o)
{}
95c6edb20d2e27c54ce89be7d7ade6a5b9cdb9fa2cb451762c3c7ebed3f31e01
getEventBus
public EventBus getEventBus()
{    return eventBus;}
90d564afd68ffbd24f93d92358d830d481e0c7418cfcfeab221eab4774e70158
setEventBus
public void setEventBus(EventBus eventBus)
{    this.eventBus = eventBus;}
13912e3d72dd237c09f8a0441e65728f9def29ded2ee5b3ec86e5159c1814da1
testScope
public void testScope() throws Exception
{    Subject subject = createMock(Subject.class);    try {        ThreadContext.bind(subject);        final Key<SomeClass> key = Key.get(SomeClass.class);        Provider<SomeClass> mockProvider = createMock(Provider.class);        Session session = createMock(Session.class);        SomeClass retuned = new SomeClass();        expect(subject.getSession()).andReturn(session);        expect(session.getAttribute(key)).andReturn(null);        expect(mockProvider.get()).andReturn(retuned);        expect(subject.getSession()).andReturn(session);        expect(session.getAttribute(key)).andReturn(retuned);        replay(subject, mockProvider, session);        ShiroSessionScope underTest = new ShiroSessionScope();                assertSame(retuned, underTest.scope(key, mockProvider).get());                assertSame(retuned, underTest.scope(key, mockProvider).get());        verify(subject, mockProvider, session);    } finally {        ThreadContext.unbindSubject();    }}
657f7bf130d6c4650d84a22c63b4306175e1f1faa591fbe3c935be4ec38d926a
testOutOfScope
public void testOutOfScope() throws Exception
{    ShiroSessionScope underTest = new ShiroSessionScope();    Provider<SomeClass> mockProvider = createMock(Provider.class);    replay(mockProvider);    underTest.scope(Key.get(SomeClass.class), mockProvider).get();}
2036295288ae2957843d767363bfed098cb02b2bd68371306e2b5d80e5352f05
testGet
public void testGet() throws Exception
{    Injector mockInjector = createMock(Injector.class);    Object c1 = new Object();    Object c2 = new Object();    final AtomicBoolean postProcessCalled = new AtomicBoolean(false);    expect(mockInjector.getInstance(keyC1)).andReturn(c1);    expect(mockInjector.getInstance(keyC2)).andReturn(c2);    mockInjector.injectMembers(anyObject(SomeInjectedClass.class));    replay(mockInjector);    AbstractInjectionProvider<SomeInjectedClass> underTest = new AbstractInjectionProvider<SomeInjectedClass>(Key.get(SomeInjectedClass.class)) {        @Override        protected SomeInjectedClass postProcess(SomeInjectedClass someInjectedClass) {            postProcessCalled.set(true);            return super.postProcess(someInjectedClass);        }    };    underTest.injector = mockInjector;    SomeInjectedClass got = underTest.get();    assertEquals("Wrong parameter passed to constructor (index 0).", c1, got.c1);    assertEquals("Wrong parameter passed to constructor (index 1).", c2, got.c2);    assertTrue("postProcess method was not called.", postProcessCalled.get());    verify(mockInjector);}
7f7ebdf384b5b583f43818c0880d5333f69b8b99d038614c9a5264f10a55c3ca
postProcess
protected SomeInjectedClass postProcess(SomeInjectedClass someInjectedClass)
{    postProcessCalled.set(true);    return super.postProcess(someInjectedClass);}
d2e5508785b651ba5c1a8fc058efff275e5dd19079292bc0cbf2795598d0bec2
testGetDependencies
public void testGetDependencies() throws Exception
{    AbstractInjectionProvider<SomeInjectedClass> underTest = new AbstractInjectionProvider<SomeInjectedClass>(Key.get(SomeInjectedClass.class));    boolean foundC1 = false;    boolean foundC2 = false;    boolean foundV1 = false;    boolean foundV2 = false;    boolean foundF1 = false;    for (Dependency<?> dependency : underTest.getDependencies()) {        if (dependency.getInjectionPoint().getMember() instanceof Constructor) {            if (dependency.getParameterIndex() == 0 && dependency.getKey().equals(keyC1)) {                foundC1 = true;            } else if (dependency.getParameterIndex() == 1 && dependency.getKey().equals(keyC2)) {                foundC2 = true;            } else {                fail("Did not expect constructor dependency with key " + dependency.getKey() + " at parameter index " + dependency.getParameterIndex());            }        } else if (dependency.getInjectionPoint().getMember() instanceof Method) {            if (dependency.getKey().equals(keyV1)) {                foundV1 = true;            } else if (dependency.getKey().equals(keyV2)) {                foundV2 = true;            } else {                fail("Did not expect method dependency with key " + dependency.getKey());            }        } else if (dependency.getInjectionPoint().getMember() instanceof Field) {            if (dependency.getKey().equals(keyF1)) {                foundF1 = true;            } else {                fail("Did not expect field dependency with key " + dependency.getKey());            }        } else {            fail("Did not expect dependency with key " + dependency.getKey());        }    }    assertTrue("Did not find dependency C1", foundC1);    assertTrue("Did not find dependency C2", foundC2);    assertTrue("Did not find dependency V1", foundV1);    assertTrue("Did not find dependency V2", foundV2);    assertTrue("Did not find dependency F1", foundF1);}
528a386479b0a15963757babdcf7c361b3d02bca72b2b5a31a37745e9b1259eb
setVal1
public void setVal1(@Named("val1") Object v1)
{}
23a86bdf4bb7a512763427fcb30e7527d3d78a23d1b9de78c716184c4501c64a
setVal2
public void setVal2(@Named("val2") Object v2)
{}
bc912c88e68d8b1e95ddf0a9b511ff673c84e3b791cfa5d80ad69b274abc8315
checkDefaultFilters
public void checkDefaultFilters() throws Exception
{    EnumSet<DefaultFilter> defaultFilters = EnumSet.allOf(DefaultFilter.class);    for (Field field : ShiroWebModule.class.getFields()) {        if (Modifier.isStatic(field.getModifiers()) && Key.class.isAssignableFrom(field.getType())) {            Class<? extends Filter> filterType = ((Key) field.get(null)).getTypeLiteral().getRawType();            boolean found = false;            for (DefaultFilter filter : defaultFilters) {                if (filterType.equals(filter.getFilterClass())) {                    found = true;                    defaultFilters.remove(filter);                    break;                }            }            if (!found) {                fail("Guice ShiroWebModule containts a default filter that Shiro proper does not. (" + filterType.getName() + ")");            }        }    }    if (!defaultFilters.isEmpty()) {        fail("Guice ShiroWebModule is missing one or more filters. " + defaultFilters);    }}
5ff0b8f7d2b080bcc6214fa5f91be74727145ea81cacb63a99c8d0f3106c089f
setup
public void setup()
{    chains = new LinkedHashMap<String, Key<? extends Filter>[]>();    key1a = Key.get(Filter.class, Names.named("key1a"));    key1b = Key.get(Filter.class, Names.named("key1b"));    key1c = Key.get(Filter.class, Names.named("key1c"));    key2a = Key.get(Filter.class, Names.named("key2a"));    chains.put("one", new Key[] { key1a, key1b, key1c });    chains.put("two", new Key[] { key2a });    underTest = new FilterChainResolverProvider(chains);}
d2e5508785b651ba5c1a8fc058efff275e5dd19079292bc0cbf2795598d0bec2
testGetDependencies
public void testGetDependencies() throws Exception
{    Set<Dependency<?>> dependencySet = underTest.getDependencies();    assertEquals(4, dependencySet.size());    assertTrue("Dependency set doesn't contain key1a.", dependencySet.contains(Dependency.get(key1a)));    assertTrue("Dependency set doesn't contain key1b.", dependencySet.contains(Dependency.get(key1b)));    assertTrue("Dependency set doesn't contain key1c.", dependencySet.contains(Dependency.get(key1c)));    assertTrue("Dependency set doesn't contain key2a.", dependencySet.contains(Dependency.get(key2a)));}
2036295288ae2957843d767363bfed098cb02b2bd68371306e2b5d80e5352f05
testGet
public void testGet() throws Exception
{    Injector injector = createMock(Injector.class);    PatternMatcher patternMatcher = createMock(PatternMatcher.class);    underTest.injector = injector;    underTest.setPatternMatcher(patternMatcher);    FilterChainResolver resolver = underTest.get();    Field chainsField = SimpleFilterChainResolver.class.getDeclaredField("chains");    chainsField.setAccessible(true);    Field injectorField = SimpleFilterChainResolver.class.getDeclaredField("injector");    injectorField.setAccessible(true);    Field patternMatcherField = SimpleFilterChainResolver.class.getDeclaredField("patternMatcher");    patternMatcherField.setAccessible(true);    assertSame(chains, chainsField.get(resolver));    assertSame(injector, injectorField.get(resolver));    assertSame(patternMatcher, patternMatcherField.get(resolver));}
a98415ae637d47887f2107cc89eac4b91ff0c9b2e87b868ea89dc153a80b126c
setupResolver
private FilterChainResolver setupResolver()
{    final ShiroModuleTest.MockRealm mockRealm = createMock(ShiroModuleTest.MockRealm.class);    ServletContext servletContext = createMock(ServletContext.class);    Injector injector = Guice.createInjector(new ShiroWebModule(servletContext) {        @Override        protected void configureShiroWeb() {            bindRealm().to(ShiroModuleTest.MockRealm.class);            addFilterChain("/index.html", AUTHC_BASIC);                        addFilterChain("/index2.html", filterConfig(PERMS, "permission"));        }        @Provides        public ShiroModuleTest.MockRealm createRealm() {            return mockRealm;        }    });    GuiceShiroFilter filter = injector.getInstance(GuiceShiroFilter.class);    return filter.getFilterChainResolver();}
bbbd43b6cce2fa5a2b3c044c8caafdc61177a774bb08e12cd12d7e2bb3d03045
configureShiroWeb
protected void configureShiroWeb()
{    bindRealm().to(ShiroModuleTest.MockRealm.class);    addFilterChain("/index.html", AUTHC_BASIC);        addFilterChain("/index2.html", filterConfig(PERMS, "permission"));}
0e0b8ef926c11e84356acd236174b86779a6ae5aadea0da489d4871e5a7b12de
createRealm
public ShiroModuleTest.MockRealm createRealm()
{    return mockRealm;}
7e6ef9a15f502c76aa39b9e99c40c2704757556d14668cef0634754950c971d9
testSimple
public void testSimple() throws Exception
{    FilterChainResolver resolver = setupResolver();    HttpServletResponse response = createNiceMock(HttpServletResponse.class);    FilterChain chain = createNiceMock(FilterChain.class);    HttpServletRequest request = createMockRequest("/index.html");    FilterChain resolved = resolver.getChain(request, response, chain);    assertNotNull(resolved);    verify(request);}
55d527892cb7f5a4ed31596ea5c346414f78f0f21b2568620046a9eaaa65e133
testWithConfig
public void testWithConfig() throws Exception
{    FilterChainResolver resolver = setupResolver();    HttpServletResponse response = createNiceMock(HttpServletResponse.class);    FilterChain chain = createNiceMock(FilterChain.class);    HttpServletRequest request = createMockRequest("/index2.html");    FilterChain resolved = resolver.getChain(request, response, chain);    assertNotNull(resolved);    verify(request);}
38f10458abe179906ec8fb9dba1bd18a936fc024eeeba2a3e888e1c8b4af6b1a
createMockRequest
private HttpServletRequest createMockRequest(String path)
{    HttpServletRequest request = createNiceMock(HttpServletRequest.class);    expect(request.getAttribute(WebUtils.INCLUDE_CONTEXT_PATH_ATTRIBUTE)).andReturn(null).anyTimes();    expect(request.getContextPath()).andReturn("");    expect(request.getRequestURI()).andReturn(path);    replay(request);    return request;}
c3ff40b08c1a5768b44d3cbd9c16c3a6c0bacc30bee92fb3140afc6099942708
ensureInjectable
public void ensureInjectable()
{    try {        InjectionPoint ip = InjectionPoint.forConstructorOf(GuiceShiroFilter.class);    } catch (Exception e) {        fail("Could not create constructor injection point.");    }}
b7b21d24e32e4f868979d3cde8815b02ce5665794ec7983f0b9cfd9954331bff
testConstructor
public void testConstructor()
{    WebSecurityManager securityManager = createMock(WebSecurityManager.class);    FilterChainResolver filterChainResolver = createMock(FilterChainResolver.class);    GuiceShiroFilter underTest = new GuiceShiroFilter(securityManager, filterChainResolver);    assertSame(securityManager, underTest.getSecurityManager());    assertSame(filterChainResolver, underTest.getFilterChainResolver());}
a2a31b8678ccd9aafe2ded8cf3a7ed0d25dc85a40afe44f247f5afd88a82df59
testPostProcess
public void testPostProcess()
{    PathMatchingFilter filter = createMock(PathMatchingFilter.class);    expect(filter.processPathConfig("/1", "first")).andReturn(filter);    expect(filter.processPathConfig("/2", "second")).andReturn(filter);    replay(filter);    Map<String, String> pathConfigMap = new HashMap<String, String>();    pathConfigMap.put("/1", "first");    pathConfigMap.put("/2", "second");    PathMatchingFilterProvider underTest = new PathMatchingFilterProvider(Key.get(PathMatchingFilter.class), pathConfigMap);    underTest.postProcess(filter);    verify(filter);}
24a8ef6660ed1e616fc8fe059819a220b6064df93bd495ac8a777e1503c5a8f2
basicInstantiation
public void basicInstantiation()
{    final ShiroModuleTest.MockRealm mockRealm = createMock(ShiroModuleTest.MockRealm.class);    ServletContext servletContext = createMock(ServletContext.class);    Injector injector = Guice.createInjector(new ShiroWebModule(servletContext) {        @Override        protected void configureShiroWeb() {            bindRealm().to(ShiroModuleTest.MockRealm.class);            expose(SessionManager.class);        }        @Provides        public ShiroModuleTest.MockRealm createRealm() {            return mockRealm;        }    });            SecurityManager securityManager = injector.getInstance(SecurityManager.class);    assertNotNull(securityManager);    assertTrue(securityManager instanceof WebSecurityManager);    SessionManager sessionManager = injector.getInstance(SessionManager.class);    assertNotNull(sessionManager);    assertTrue(sessionManager instanceof ServletContainerSessionManager);    assertTrue(((DefaultWebSecurityManager) securityManager).getSessionManager() instanceof ServletContainerSessionManager);}
bbbd43b6cce2fa5a2b3c044c8caafdc61177a774bb08e12cd12d7e2bb3d03045
configureShiroWeb
protected void configureShiroWeb()
{    bindRealm().to(ShiroModuleTest.MockRealm.class);    expose(SessionManager.class);}
0e0b8ef926c11e84356acd236174b86779a6ae5aadea0da489d4871e5a7b12de
createRealm
public ShiroModuleTest.MockRealm createRealm()
{    return mockRealm;}
99b56f32b2e696785b708575f16b47000570bc7f6564e2b7309896551d59598c
testBindGuiceFilter
public void testBindGuiceFilter() throws Exception
{}
f9e9457bd8fd934ca974ce0c083a7d09617a22022d1122db6477d1adf6652b5e
testBindWebSecurityManager
public void testBindWebSecurityManager() throws Exception
{    final ShiroModuleTest.MockRealm mockRealm = createMock(ShiroModuleTest.MockRealm.class);    ServletContext servletContext = createMock(ServletContext.class);    Injector injector = Guice.createInjector(new ShiroWebModule(servletContext) {        @Override        protected void configureShiroWeb() {            bindRealm().to(ShiroModuleTest.MockRealm.class);            expose(WebSecurityManager.class);        }        @Provides        public ShiroModuleTest.MockRealm createRealm() {            return mockRealm;        }        @Override        protected void bindWebSecurityManager(AnnotatedBindingBuilder<? super WebSecurityManager> bind) {            bind.to(MyDefaultWebSecurityManager.class).asEagerSingleton();        }    });    SecurityManager securityManager = injector.getInstance(SecurityManager.class);    assertNotNull(securityManager);    assertTrue(securityManager instanceof MyDefaultWebSecurityManager);    WebSecurityManager webSecurityManager = injector.getInstance(WebSecurityManager.class);    assertNotNull(webSecurityManager);    assertTrue(webSecurityManager instanceof MyDefaultWebSecurityManager);        assertTrue(securityManager == webSecurityManager);}
bbbd43b6cce2fa5a2b3c044c8caafdc61177a774bb08e12cd12d7e2bb3d03045
configureShiroWeb
protected void configureShiroWeb()
{    bindRealm().to(ShiroModuleTest.MockRealm.class);    expose(WebSecurityManager.class);}
0e0b8ef926c11e84356acd236174b86779a6ae5aadea0da489d4871e5a7b12de
createRealm
public ShiroModuleTest.MockRealm createRealm()
{    return mockRealm;}
0d654944e1aeddffedbffede17f039e95a2c0e3458417603d6761aa9aaa34ad6
bindWebSecurityManager
protected void bindWebSecurityManager(AnnotatedBindingBuilder<? super WebSecurityManager> bind)
{    bind.to(MyDefaultWebSecurityManager.class).asEagerSingleton();}
3d136b0bf636f59820438aeea3713de0d9368276a7a8cd3186dc485cbb2feb3a
testBindWebEnvironment
public void testBindWebEnvironment() throws Exception
{    final ShiroModuleTest.MockRealm mockRealm = createMock(ShiroModuleTest.MockRealm.class);    ServletContext servletContext = createMock(ServletContext.class);    Injector injector = Guice.createInjector(new ShiroWebModule(servletContext) {        @Override        protected void configureShiroWeb() {            bindRealm().to(ShiroModuleTest.MockRealm.class);            expose(WebEnvironment.class);            expose(Environment.class);        }        @Provides        public ShiroModuleTest.MockRealm createRealm() {            return mockRealm;        }        @Override        protected void bindWebEnvironment(AnnotatedBindingBuilder<? super WebEnvironment> bind) {            bind.to(MyWebEnvironment.class).asEagerSingleton();        }    });    Environment environment = injector.getInstance(Environment.class);    assertNotNull(environment);    assertTrue(environment instanceof MyWebEnvironment);    WebEnvironment webEnvironment = injector.getInstance(WebEnvironment.class);    assertNotNull(webEnvironment);    assertTrue(webEnvironment instanceof MyWebEnvironment);        assertTrue(environment == webEnvironment);}
bbbd43b6cce2fa5a2b3c044c8caafdc61177a774bb08e12cd12d7e2bb3d03045
configureShiroWeb
protected void configureShiroWeb()
{    bindRealm().to(ShiroModuleTest.MockRealm.class);    expose(WebEnvironment.class);    expose(Environment.class);}
0e0b8ef926c11e84356acd236174b86779a6ae5aadea0da489d4871e5a7b12de
createRealm
public ShiroModuleTest.MockRealm createRealm()
{    return mockRealm;}
d1e6c51a4d3ca60f65be8c6ced699d7e5b3b0f616e1eec57de9d8af7981870a3
bindWebEnvironment
protected void bindWebEnvironment(AnnotatedBindingBuilder<? super WebEnvironment> bind)
{    bind.to(MyWebEnvironment.class).asEagerSingleton();}
e56132a815421ddbe8d947d68ebd1fc344c43855a3b33b69930c5b6912e11543
testAddFilterChainGuice3and4
public void testAddFilterChainGuice3and4()
{    final ShiroModuleTest.MockRealm mockRealm = createMock(ShiroModuleTest.MockRealm.class);    ServletContext servletContext = createMock(ServletContext.class);    HttpServletRequest request = createMock(HttpServletRequest.class);    servletContext.setAttribute(eq(EnvironmentLoader.ENVIRONMENT_ATTRIBUTE_KEY), EasyMock.anyObject());    expect(request.getAttribute("javax.servlet.include.context_path")).andReturn("").anyTimes();    expect(request.getCharacterEncoding()).andReturn("UTF-8").anyTimes();    expect(request.getAttribute("javax.servlet.include.request_uri")).andReturn("/test_authc");    expect(request.getAttribute("javax.servlet.include.request_uri")).andReturn("/test_custom_filter");    expect(request.getAttribute("javax.servlet.include.request_uri")).andReturn("/test_authc_basic");    expect(request.getAttribute("javax.servlet.include.request_uri")).andReturn("/test_perms");    expect(request.getAttribute("javax.servlet.include.request_uri")).andReturn("/multiple_configs");    replay(servletContext, request);    Injector injector = Guice.createInjector(new ShiroWebModule(servletContext) {        @Override        protected void configureShiroWeb() {            bindRealm().to(ShiroModuleTest.MockRealm.class);            expose(FilterChainResolver.class);            this.addFilterChain("/test_authc/**", filterConfig(AUTHC));            this.addFilterChain("/test_custom_filter/**", Key.get(CustomFilter.class));            this.addFilterChain("/test_authc_basic/**", AUTHC_BASIC);            this.addFilterChain("/test_perms/**", filterConfig(PERMS, "remote:invoke:lan,wan"));            this.addFilterChain("/multiple_configs/**", filterConfig(AUTHC), filterConfig(ROLES, "b2bClient"), filterConfig(PERMS, "remote:invoke:lan,wan"));        }        @Provides        public ShiroModuleTest.MockRealm createRealm() {            return mockRealm;        }    });    FilterChainResolver resolver = injector.getInstance(FilterChainResolver.class);    assertThat(resolver, instanceOf(SimpleFilterChainResolver.class));    SimpleFilterChainResolver simpleFilterChainResolver = (SimpleFilterChainResolver) resolver;        FilterChain filterChain = simpleFilterChainResolver.getChain(request, null, null);    assertThat(filterChain, instanceOf(SimpleFilterChain.class));    Filter nextFilter = getNextFilter((SimpleFilterChain) filterChain);    assertThat(nextFilter, instanceOf(FormAuthenticationFilter.class));        filterChain = simpleFilterChainResolver.getChain(request, null, null);    assertThat(filterChain, instanceOf(SimpleFilterChain.class));    nextFilter = getNextFilter((SimpleFilterChain) filterChain);    assertThat(nextFilter, instanceOf(CustomFilter.class));        filterChain = simpleFilterChainResolver.getChain(request, null, null);    assertThat(filterChain, instanceOf(SimpleFilterChain.class));    nextFilter = getNextFilter((SimpleFilterChain) filterChain);    assertThat(nextFilter, instanceOf(BasicHttpAuthenticationFilter.class));        filterChain = simpleFilterChainResolver.getChain(request, null, null);    assertThat(filterChain, instanceOf(SimpleFilterChain.class));    nextFilter = getNextFilter((SimpleFilterChain) filterChain);    assertThat(nextFilter, instanceOf(PermissionsAuthorizationFilter.class));        filterChain = simpleFilterChainResolver.getChain(request, null, null);    assertThat(filterChain, instanceOf(SimpleFilterChain.class));    assertThat(getNextFilter((SimpleFilterChain) filterChain), instanceOf(FormAuthenticationFilter.class));    assertThat(getNextFilter((SimpleFilterChain) filterChain), instanceOf(RolesAuthorizationFilter.class));    assertThat(getNextFilter((SimpleFilterChain) filterChain), instanceOf(PermissionsAuthorizationFilter.class));    verify(servletContext, request);}
bbbd43b6cce2fa5a2b3c044c8caafdc61177a774bb08e12cd12d7e2bb3d03045
configureShiroWeb
protected void configureShiroWeb()
{    bindRealm().to(ShiroModuleTest.MockRealm.class);    expose(FilterChainResolver.class);    this.addFilterChain("/test_authc/**", filterConfig(AUTHC));    this.addFilterChain("/test_custom_filter/**", Key.get(CustomFilter.class));    this.addFilterChain("/test_authc_basic/**", AUTHC_BASIC);    this.addFilterChain("/test_perms/**", filterConfig(PERMS, "remote:invoke:lan,wan"));    this.addFilterChain("/multiple_configs/**", filterConfig(AUTHC), filterConfig(ROLES, "b2bClient"), filterConfig(PERMS, "remote:invoke:lan,wan"));}
0e0b8ef926c11e84356acd236174b86779a6ae5aadea0da489d4871e5a7b12de
createRealm
public ShiroModuleTest.MockRealm createRealm()
{    return mockRealm;}
281164a24d1d6e761ae4f40a6581617d4b66effe0a2523bf5c2fd1d836c8f5a3
testAddFilterChainGuice3Only
public void testAddFilterChainGuice3Only()
{    Assume.assumeTrue("This test only runs agains Guice 3.x", ShiroWebModule.isGuiceVersion3());    final ShiroModuleTest.MockRealm mockRealm = createMock(ShiroModuleTest.MockRealm.class);    ServletContext servletContext = createMock(ServletContext.class);    HttpServletRequest request = createMock(HttpServletRequest.class);    servletContext.setAttribute(eq(EnvironmentLoader.ENVIRONMENT_ATTRIBUTE_KEY), EasyMock.anyObject());    expect(request.getAttribute("javax.servlet.include.context_path")).andReturn("").anyTimes();    expect(request.getCharacterEncoding()).andReturn("UTF-8").anyTimes();    expect(request.getAttribute("javax.servlet.include.request_uri")).andReturn("/test_authc");    expect(request.getAttribute("javax.servlet.include.request_uri")).andReturn("/test_custom_filter");    expect(request.getAttribute("javax.servlet.include.request_uri")).andReturn("/test_perms");    expect(request.getAttribute("javax.servlet.include.request_uri")).andReturn("/multiple_configs");    replay(servletContext, request);    Injector injector = Guice.createInjector(new ShiroWebModule(servletContext) {        @Override        protected void configureShiroWeb() {            bindRealm().to(ShiroModuleTest.MockRealm.class);            expose(FilterChainResolver.class);            this.addFilterChain("/test_authc/**", AUTHC);            this.addFilterChain("/test_custom_filter/**", Key.get(CustomFilter.class));            this.addFilterChain("/test_perms/**", config(PERMS, "remote:invoke:lan,wan"));            this.addFilterChain("/multiple_configs/**", AUTHC, config(ROLES, "b2bClient"), config(PERMS, "remote:invoke:lan,wan"));        }        @Provides        public ShiroModuleTest.MockRealm createRealm() {            return mockRealm;        }    });    FilterChainResolver resolver = injector.getInstance(FilterChainResolver.class);    assertThat(resolver, instanceOf(SimpleFilterChainResolver.class));    SimpleFilterChainResolver simpleFilterChainResolver = (SimpleFilterChainResolver) resolver;        FilterChain filterChain = simpleFilterChainResolver.getChain(request, null, null);    assertThat(filterChain, instanceOf(SimpleFilterChain.class));    Filter nextFilter = getNextFilter((SimpleFilterChain) filterChain);    assertThat(nextFilter, instanceOf(FormAuthenticationFilter.class));        filterChain = simpleFilterChainResolver.getChain(request, null, null);    assertThat(filterChain, instanceOf(SimpleFilterChain.class));    nextFilter = getNextFilter((SimpleFilterChain) filterChain);    assertThat(nextFilter, instanceOf(CustomFilter.class));        filterChain = simpleFilterChainResolver.getChain(request, null, null);    assertThat(filterChain, instanceOf(SimpleFilterChain.class));    nextFilter = getNextFilter((SimpleFilterChain) filterChain);    assertThat(nextFilter, instanceOf(PermissionsAuthorizationFilter.class));        filterChain = simpleFilterChainResolver.getChain(request, null, null);    assertThat(filterChain, instanceOf(SimpleFilterChain.class));    assertThat(getNextFilter((SimpleFilterChain) filterChain), instanceOf(FormAuthenticationFilter.class));    assertThat(getNextFilter((SimpleFilterChain) filterChain), instanceOf(RolesAuthorizationFilter.class));    assertThat(getNextFilter((SimpleFilterChain) filterChain), instanceOf(PermissionsAuthorizationFilter.class));    verify(servletContext, request);}
bbbd43b6cce2fa5a2b3c044c8caafdc61177a774bb08e12cd12d7e2bb3d03045
configureShiroWeb
protected void configureShiroWeb()
{    bindRealm().to(ShiroModuleTest.MockRealm.class);    expose(FilterChainResolver.class);    this.addFilterChain("/test_authc/**", AUTHC);    this.addFilterChain("/test_custom_filter/**", Key.get(CustomFilter.class));    this.addFilterChain("/test_perms/**", config(PERMS, "remote:invoke:lan,wan"));    this.addFilterChain("/multiple_configs/**", AUTHC, config(ROLES, "b2bClient"), config(PERMS, "remote:invoke:lan,wan"));}
0e0b8ef926c11e84356acd236174b86779a6ae5aadea0da489d4871e5a7b12de
createRealm
public ShiroModuleTest.MockRealm createRealm()
{    return mockRealm;}
333468079b00392ccedeb34f959c3bfdfb6a32d253d2b5b6b42812c0be74eb49
getNextFilter
private Filter getNextFilter(SimpleFilterChain filterChain)
{    Iterator<? extends Filter> filters = filterChain.getFilters();    if (filters.hasNext()) {        return filters.next();    }    return null;}
fc816a7f48df910a0a746a065ef45bb2f432a908759d0caa838a3f1c69e0b8d9
init
public void init(FilterConfig filterConfig) throws ServletException
{}
9d4ba01fe9a48b67e6472e0dac656085ce7bc6cfe83fb78743cae78729263519
doFilter
public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException
{}
9cabd71a85d4928de1c9a46601c11d584f3e7522ee61146e1117d0d360a20b2e
destroy
public void destroy()
{}
b3176a6c8b50f78a8fa9cb78d532f7f4e8d41a5ecba1787095b66abf7fa29938
testGetChain
public void testGetChain() throws Exception
{                        IMocksControl ctrl = createStrictControl();    Injector injector = ctrl.createMock(Injector.class);    Map<String, Key<? extends Filter>[]> chainMap = new LinkedHashMap<String, Key<? extends Filter>[]>();    final String chainOne = "one";    final String chainTwo = "two";    final String chainThree = "three";    final Key<? extends Filter> key1a = Key.get(Filter.class, Names.named("key1a"));    final Key<? extends Filter> key1b = Key.get(Filter.class, Names.named("key1b"));    final Key<? extends Filter> key2a = Key.get(Filter.class, Names.named("key2a"));    final Key<? extends Filter> key2b = Key.get(Filter.class, Names.named("key2b"));    final Key<? extends Filter> key3a = Key.get(Filter.class, Names.named("key3a"));    final Key<? extends Filter> key3b = Key.get(Filter.class, Names.named("key3b"));    chainMap.put(chainOne, new Key[] { key1a, key1b });    chainMap.put(chainTwo, new Key[] { key2a, key2b });    chainMap.put(chainThree, new Key[] { key3a, key3b });    PatternMatcher patternMatcher = ctrl.createMock(PatternMatcher.class);    ServletRequest request = ctrl.createMock(HttpServletRequest.class);    ServletResponse response = ctrl.createMock(HttpServletResponse.class);    FilterChain originalChain = ctrl.createMock(FilterChain.class);    expect(request.getAttribute(WebUtils.INCLUDE_CONTEXT_PATH_ATTRIBUTE)).andReturn("/context");    expect(request.getAttribute(WebUtils.INCLUDE_REQUEST_URI_ATTRIBUTE)).andReturn("/mychain");    expect(request.getCharacterEncoding()).andStubReturn(null);    expect(patternMatcher.matches(chainOne, "/mychain")).andReturn(false);    expect(patternMatcher.matches(chainTwo, "/mychain")).andReturn(true);    Filter filter2a = ctrl.createMock(Filter.class);    Filter filter2b = ctrl.createMock(Filter.class);    expect((Filter) injector.getInstance(key2a)).andReturn(filter2a);    filter2a.doFilter(same(request), same(response), anyObject(FilterChain.class));    expect((Filter) injector.getInstance(key2b)).andReturn(filter2b);    filter2b.doFilter(same(request), same(response), anyObject(FilterChain.class));    originalChain.doFilter(request, response);    ctrl.replay();    SimpleFilterChainResolver underTest = new SimpleFilterChainResolver(chainMap, injector, patternMatcher);    FilterChain got = underTest.getChain(request, response, originalChain);    got.doFilter(request, response);    got.doFilter(request, response);    got.doFilter(request, response);    ctrl.verify();    ctrl.reset();    expect(request.getAttribute(WebUtils.INCLUDE_CONTEXT_PATH_ATTRIBUTE)).andReturn("/context");    expect(request.getAttribute(WebUtils.INCLUDE_REQUEST_URI_ATTRIBUTE)).andReturn("/nochain");    expect(request.getCharacterEncoding()).andStubReturn(null);    expect(patternMatcher.matches(chainOne, "/nochain")).andReturn(false);    expect(patternMatcher.matches(chainTwo, "/nochain")).andReturn(false);    expect(patternMatcher.matches(chainThree, "/nochain")).andReturn(false);    ctrl.replay();    assertNull("Expected no chain to match, did not get a null value in return.", underTest.getChain(request, response, originalChain));    ctrl.verify();}
ebb3dbe7a97c3a644a83eea2e251b930c597c1c10873fbd952aabf8697cc535b
testDoFilter
public void testDoFilter() throws Exception
{    IMocksControl ctrl = createStrictControl();    FilterChain originalChain = ctrl.createMock(FilterChain.class);    Filter filter1 = ctrl.createMock("filter1", Filter.class);    Filter filter2 = ctrl.createMock("filter2", Filter.class);    ServletRequest request = ctrl.createMock(ServletRequest.class);    ServletResponse response = ctrl.createMock(ServletResponse.class);    Capture<FilterChain> fc1 = Capture.newInstance();    Capture<FilterChain> fc2 = Capture.newInstance();    filter1.doFilter(same(request), same(response), and(anyObject(FilterChain.class), capture(fc1)));    filter2.doFilter(same(request), same(response), and(anyObject(FilterChain.class), capture(fc2)));    originalChain.doFilter(request, response);    ctrl.replay();    SimpleFilterChain underTest = new SimpleFilterChain(originalChain, Arrays.asList(filter1, filter2).iterator());            underTest.doFilter(request, response);    fc1.getValue().doFilter(request, response);    fc2.getValue().doFilter(request, response);    ctrl.verify();}
c3ff40b08c1a5768b44d3cbd9c16c3a6c0bacc30bee92fb3140afc6099942708
ensureInjectable
public void ensureInjectable()
{    try {        InjectionPoint ip = InjectionPoint.forConstructorOf(WebGuiceEnvironment.class);    } catch (Exception e) {        fail("Could not create constructor injection point.");    }}
b7b21d24e32e4f868979d3cde8815b02ce5665794ec7983f0b9cfd9954331bff
testConstructor
public void testConstructor()
{    WebSecurityManager securityManager = createMock(WebSecurityManager.class);    FilterChainResolver filterChainResolver = createMock(FilterChainResolver.class);    ServletContext servletContext = createMock(ServletContext.class);    Capture<WebGuiceEnvironment> capture = Capture.newInstance();    servletContext.setAttribute(eq(EnvironmentLoaderListener.ENVIRONMENT_ATTRIBUTE_KEY), and(anyObject(WebGuiceEnvironment.class), capture(capture)));    replay(servletContext, securityManager, filterChainResolver);    WebGuiceEnvironment underTest = new WebGuiceEnvironment(filterChainResolver, servletContext, securityManager);    assertSame(securityManager, underTest.getSecurityManager());    assertSame(filterChainResolver, underTest.getFilterChainResolver());    assertSame(securityManager, underTest.getWebSecurityManager());    assertSame(servletContext, underTest.getServletContext());    assertSame(underTest, capture.getValue());    verify(servletContext);}
2412a2818c11c45d9865fdc56410ae3c9ca0bd9276ba0ef8834970cef3ad94a0
getCache
public Cache<K, V> getCache(String name) throws CacheException
{        Map<K, V> map = ensureHazelcastInstance().getMap(name);    return new MapCache<K, V>(name, map);}
19efcd1cf9126ff60bdd71849923815e9331b354c0dfc8a8338c6bfe65635bf0
ensureHazelcastInstance
protected HazelcastInstance ensureHazelcastInstance()
{    if (this.hazelcastInstance == null) {        this.hazelcastInstance = createHazelcastInstance();        this.implicitlyCreated = true;    }    return this.hazelcastInstance;}
6a532077eaa300a777e08e8b5b6b15446b08d4dfae5065cb4ed1f2142af72511
init
public void init() throws ShiroException
{    ensureHazelcastInstance();}
f6a427ad314421fc503c6d0a303849a262faf6f5d56d27c589426dc4be7eb12a
createHazelcastInstance
protected HazelcastInstance createHazelcastInstance()
{    return Hazelcast.newHazelcastInstance(this.config);}
74e075190a2fa673b68439c4f468066175daed3e0932dc9ef3ff82aacdec32af
isImplicitlyCreated
protected final boolean isImplicitlyCreated()
{    return this.implicitlyCreated;}
b43e7dc4a9f7929f7cbf79e54bda99f9719af6c9509dfa283baa743984130577
destroy
public void destroy() throws Exception
{    if (this.implicitlyCreated) {        try {            this.hazelcastInstance.getLifecycleService().shutdown();        } catch (Throwable t) {            if (log.isWarnEnabled()) {                log.warn("Unable to cleanly shutdown implicitly created HazelcastInstance.  " + "Ignoring (shutting down)...", t);            }        } finally {            this.hazelcastInstance = null;            this.implicitlyCreated = false;        }    }}
8f5e1266935ad1b7d759eeb4e1454c4b0570aa327b705e4df55069b2c265b39c
getHazelcastInstance
public HazelcastInstance getHazelcastInstance()
{    return hazelcastInstance;}
73140e6ae7f5ecb882f622f6011862a0c63483cc011da92ee8058635ad689c56
setHazelcastInstance
public void setHazelcastInstance(HazelcastInstance hazelcastInstance)
{    this.hazelcastInstance = hazelcastInstance;}
71a0a58f03cd5d5c75fbe43f809127248cb640f0c17b65e64ecfb78d7d914999
getConfig
public Config getConfig()
{    return config;}
b5b89655600faf2fb3fcd6d69ddb3b87b5aa83513b85f8e4d39bacd50d7165d3
setConfig
public void setConfig(Config config)
{    this.config = config;}
a362d0d758b3d3accb7447348bcd2f2394a3cbef15d28e47b638de388c0644d1
createHandler
private static AuthorizingAnnotationHandler createHandler(Annotation annotation)
{    Class<?> t = annotation.annotationType();    if (RequiresPermissions.class.equals(t))        return new PermissionAnnotationHandler();    else if (RequiresRoles.class.equals(t))        return new RoleAnnotationHandler();    else if (RequiresUser.class.equals(t))        return new UserAnnotationHandler();    else if (RequiresGuest.class.equals(t))        return new GuestAnnotationHandler();    else if (RequiresAuthentication.class.equals(t))        return new AuthenticatedAnnotationHandler();    else        throw new IllegalArgumentException("Cannot create a handler for the unknown for annotation " + t);}
39990cf4b76cb76cc6600347f285e11d2e0d506223c7e94d5316ee67b23e6e81
filter
public void filter(ContainerRequestContext requestContext) throws IOException
{    for (Map.Entry<AuthorizingAnnotationHandler, Annotation> authzCheck : authzChecks.entrySet()) {        AuthorizingAnnotationHandler handler = authzCheck.getKey();        Annotation authzSpec = authzCheck.getValue();        handler.assertAuthorized(authzSpec);    }}
afb4d3764b3e39e2c3befce661e37a9f386230d65c6849b0c0216425d5f98437
toResponse
public Response toResponse(AuthorizationException exception)
{    Status status;    if (exception instanceof UnauthorizedException) {        status = Status.FORBIDDEN;    } else {        status = Status.UNAUTHORIZED;    }    return Response.status(status).build();}
bd4b627271c6aebb006abbf13381cc73fcccdecdaa7e011d20463c7391b560c9
configure
public void configure(ResourceInfo resourceInfo, FeatureContext context)
{    List<Annotation> authzSpecs = new ArrayList<Annotation>();    for (Class<? extends Annotation> annotationClass : shiroAnnotations) {                Annotation classAuthzSpec = resourceInfo.getResourceClass().getAnnotation(annotationClass);        Annotation methodAuthzSpec = resourceInfo.getResourceMethod().getAnnotation(annotationClass);        if (classAuthzSpec != null)            authzSpecs.add(classAuthzSpec);        if (methodAuthzSpec != null)            authzSpecs.add(methodAuthzSpec);    }    if (!authzSpecs.isEmpty()) {        context.register(new AnnotationAuthorizationFilter(authzSpecs), Priorities.AUTHORIZATION);    }}
a91043ef09b9aa6486a1b1ad3484138448644aaf91b7a67ab3f055d7b152600d
configure
public boolean configure(FeatureContext context)
{    context.register(ExceptionMapper.class);    context.register(SubjectPrincipalRequestFilter.class);    context.register(ShiroAnnotationFilterFeature.class);    return true;}
5d9bb0cdc7b2aa820d5d654cc4e191bb6fca3070733bad6303dfb3f7744ead0a
getUserPrincipal
public Principal getUserPrincipal()
{    Principal result;    Subject subject = getSubject();    PrincipalCollection shiroPrincipals = subject.getPrincipals();    if (shiroPrincipals != null) {        result = shiroPrincipals.oneByType(Principal.class);        if (result == null) {            result = new ObjectPrincipal(shiroPrincipals.getPrimaryPrincipal());        }    } else {        result = originalSecurityContext.getUserPrincipal();    }    return result;}
79438252e97fceeb1d82609d90f6afad95f8f768ff65fb71c428a92b0146e2ed
isUserInRole
public boolean isUserInRole(String role)
{    return getSubject().hasRole(role);}
c6a8b35027b486f9efda96936274975b221803473bdc28c586ea3371f63c78bd
isSecure
public boolean isSecure()
{    return containerRequestContext.getSecurityContext().isSecure();}
518e9c0f0283219c55fa4de0ef3c5699d99ffe23e6c58c0ec67b5be9fcc17e67
getAuthenticationScheme
public String getAuthenticationScheme()
{    return containerRequestContext.getSecurityContext().getAuthenticationScheme();}
50ee62c5b0fdeba2bebdb29565cdc2612cbb6722f2c3bbaeb72068e2ef50161b
getSubject
private Subject getSubject()
{    return SecurityUtils.getSubject();}
423e523586283771447f9add45491aa20c7df08442fcb0932210f46449eabda6
getObject
public Object getObject()
{    return object;}
239fbe3eb64d679cbac1161825b07d6a8436ead3c6c3d140d9caec2275827023
getName
public String getName()
{    return getObject().toString();}
8d37d11c7ecfc0d0589696a89cb385888c83bd3e43ea0c95a3b4ae4ef78180ce
equals
public boolean equals(Object o)
{    if (this == o)        return true;    if (o == null || getClass() != o.getClass())        return false;    ObjectPrincipal that = (ObjectPrincipal) o;    return object.equals(that.object);}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    return object.hashCode();}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return object.toString();}
39990cf4b76cb76cc6600347f285e11d2e0d506223c7e94d5316ee67b23e6e81
filter
public void filter(ContainerRequestContext requestContext) throws IOException
{    requestContext.setSecurityContext(new ShiroSecurityContext(requestContext));}
9d361bdaa6115bd6f20a2bf375f7a85aff84741ad2ccca1a53c7bf1aa87cd474
execute
public void execute(JobExecutionContext context) throws JobExecutionException
{    JobDataMap jobDataMap = context.getMergedJobDataMap();    ValidatingSessionManager sessionManager = (ValidatingSessionManager) jobDataMap.get(SESSION_MANAGER_KEY);    if (log.isDebugEnabled()) {        log.debug("Executing session validation Quartz job...");    }    sessionManager.validateSessions();    if (log.isDebugEnabled()) {        log.debug("Session validation Quartz job complete.");    }}
9fe6ccdf3e8b7f02b6e75064c72219a24b8e8865a6de83aa4317beca2d270e58
getScheduler
protected Scheduler getScheduler() throws SchedulerException
{    if (scheduler == null) {        scheduler = StdSchedulerFactory.getDefaultScheduler();        schedulerImplicitlyCreated = true;    }    return scheduler;}
5347619ba28437059758f756e288c6e88cb4377bf707cd2f7075b2bba5b270a9
setScheduler
public void setScheduler(Scheduler scheduler)
{    this.scheduler = scheduler;}
983bcc541c55750a8434da68bb21f92e6eca05086d94de08cb598198ee09ee4d
setSessionManager
public void setSessionManager(ValidatingSessionManager sessionManager)
{    this.sessionManager = sessionManager;}
3d48e803344c7a7e8e54f2ff2765c17f83485a126437f578afd50ad0c851ac27
isEnabled
public boolean isEnabled()
{    return this.enabled;}
fa6d7c0f2f8b483b5c053e7d23b8c333eea487fdf5509a7a95075ccc6d596857
setSessionValidationInterval
public void setSessionValidationInterval(long sessionValidationInterval)
{    this.sessionValidationInterval = sessionValidationInterval;}
b4878925c2499833a3cb74e04f3dec10e8ca105d8ce92d6ce3f7c862e53a9e75
enableSessionValidation
public void enableSessionValidation()
{    if (log.isDebugEnabled()) {        log.debug("Scheduling session validation job using Quartz with " + "session validation interval of [" + sessionValidationInterval + "]ms...");    }    try {        SimpleTrigger trigger = new SimpleTrigger(getClass().getName(), Scheduler.DEFAULT_GROUP, SimpleTrigger.REPEAT_INDEFINITELY, sessionValidationInterval);        JobDetail detail = new JobDetail(JOB_NAME, Scheduler.DEFAULT_GROUP, QuartzSessionValidationJob.class);        detail.getJobDataMap().put(QuartzSessionValidationJob.SESSION_MANAGER_KEY, sessionManager);        Scheduler scheduler = getScheduler();        scheduler.scheduleJob(detail, trigger);        if (schedulerImplicitlyCreated) {            scheduler.start();            if (log.isDebugEnabled()) {                log.debug("Successfully started implicitly created Quartz Scheduler instance.");            }        }        this.enabled = true;        if (log.isDebugEnabled()) {            log.debug("Session validation job successfully scheduled with Quartz.");        }    } catch (SchedulerException e) {        if (log.isErrorEnabled()) {            log.error("Error starting the Quartz session validation job.  Session validation may not occur.", e);        }    }}
dac01f5af8e8c6469573bd33109e41c3ea8839076069bc09c7927e6cffc45b1b
disableSessionValidation
public void disableSessionValidation()
{    if (log.isDebugEnabled()) {        log.debug("Stopping Quartz session validation job...");    }    Scheduler scheduler;    try {        scheduler = getScheduler();        if (scheduler == null) {            if (log.isWarnEnabled()) {                log.warn("getScheduler() method returned a null Quartz scheduler, which is unexpected.  Please " + "check your configuration and/or implementation.  Returning quietly since there is no " + "validation job to remove (scheduler does not exist).");            }            return;        }    } catch (SchedulerException e) {        if (log.isWarnEnabled()) {            log.warn("Unable to acquire Quartz Scheduler.  Ignoring and returning (already stopped?)", e);        }        return;    }    try {        scheduler.unscheduleJob(JOB_NAME, Scheduler.DEFAULT_GROUP);        if (log.isDebugEnabled()) {            log.debug("Quartz session validation job stopped successfully.");        }    } catch (SchedulerException e) {        if (log.isDebugEnabled()) {            log.debug("Could not cleanly remove SessionValidationJob from Quartz scheduler.  " + "Ignoring and stopping.", e);        }    }    this.enabled = false;    if (schedulerImplicitlyCreated) {        try {            scheduler.shutdown();        } catch (SchedulerException e) {            if (log.isWarnEnabled()) {                log.warn("Unable to cleanly shutdown implicitly created Quartz Scheduler instance.", e);            }        } finally {            setScheduler(null);            schedulerImplicitlyCreated = false;        }    }}
b1ec5334a9ee2830b74237f11c661005a5a73fd69396bedd55c8a611888661be
getAnnotation
public Annotation getAnnotation(MethodInvocation mi, Class<? extends Annotation> clazz)
{    Method m = mi.getMethod();    Annotation a = AnnotationUtils.findAnnotation(m, clazz);    if (a != null)        return a;                        Class<?> targetClass = mi.getThis().getClass();    m = ClassUtils.getMostSpecificMethod(m, targetClass);    a = AnnotationUtils.findAnnotation(m, clazz);    if (a != null)        return a;        return AnnotationUtils.findAnnotation(mi.getThis().getClass(), clazz);}
126aa429ee7beca76abf62f8af97d6684f9f8122c2c0b9fe2c8b51accf789d8a
defaultAdvisorAutoProxyCreator
protected DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator()
{    return new DefaultAdvisorAutoProxyCreator();}
48a686ab705dc3fd23273c4b4b05cd4f6e02421ead4d0450efb33d0072e3b2bd
authorizationAttributeSourceAdvisor
protected AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(SecurityManager securityManager)
{    AuthorizationAttributeSourceAdvisor advisor = new AuthorizationAttributeSourceAdvisor();    advisor.setSecurityManager(securityManager);    return advisor;}
face3d23cd3915bbae3945ad28532688ad9316046237024577d49ed5a37d081e
lifecycleBeanPostProcessor
protected LifecycleBeanPostProcessor lifecycleBeanPostProcessor()
{    return new LifecycleBeanPostProcessor();}
221d19cc0959de505eaffe39d7509d2766b90cd425ddbdce5ba02651c11006c7
eventBus
protected EventBus eventBus()
{    return new DefaultEventBus();}
1f7cf70874d551884064a7f32d7dfd06ef9058ca46105a819eb4f41738743bd5
shiroEventBusAwareBeanPostProcessor
protected ShiroEventBusBeanPostProcessor shiroEventBusAwareBeanPostProcessor()
{    return new ShiroEventBusBeanPostProcessor(eventBus());}
c134362343bd3eb1fa7566762355fd2659faf2800fe9571fa48562b37ba3c334
securityManager
protected SessionsSecurityManager securityManager(List<Realm> realms)
{    SessionsSecurityManager securityManager = createSecurityManager();    securityManager.setAuthenticator(authenticator());    securityManager.setAuthorizer(authorizer());    securityManager.setRealms(realms);    securityManager.setSessionManager(sessionManager());    securityManager.setEventBus(eventBus);    if (cacheManager != null) {        securityManager.setCacheManager(cacheManager);    }    return securityManager;}
a2329cf7aa482e2cac54d5a9f35cb1b9bda67081035e9210a3bfaa37307c0c0b
sessionManager
protected SessionManager sessionManager()
{    DefaultSessionManager sessionManager = new DefaultSessionManager();    sessionManager.setSessionDAO(sessionDAO());    sessionManager.setSessionFactory(sessionFactory());    sessionManager.setDeleteInvalidSessions(sessionManagerDeleteInvalidSessions);    return sessionManager;}
66d6855c2f73a612d695871c7d31a274fc9201133a31645259023af640ebf204
createSecurityManager
protected SessionsSecurityManager createSecurityManager()
{    DefaultSecurityManager securityManager = new DefaultSecurityManager();    securityManager.setSubjectDAO(subjectDAO());    securityManager.setSubjectFactory(subjectFactory());    RememberMeManager rememberMeManager = rememberMeManager();    if (rememberMeManager != null) {        securityManager.setRememberMeManager(rememberMeManager);    }    return securityManager;}
0161628ba61353944174c0aa98d8e671ffd4937372643ae4980176858100515e
rememberMeManager
protected RememberMeManager rememberMeManager()
{    return null;}
cd337bd6520bbc56a5b1952d891dc263e875762e81ed4e44efd988c5064f911e
subjectDAO
protected SubjectDAO subjectDAO()
{    DefaultSubjectDAO subjectDAO = new DefaultSubjectDAO();    subjectDAO.setSessionStorageEvaluator(sessionStorageEvaluator());    return subjectDAO;}
200f4bee9ddc71f495d642a5ae10e0d55721ed4a3cea639d9f843455331bff0b
sessionStorageEvaluator
protected SessionStorageEvaluator sessionStorageEvaluator()
{    return new DefaultSessionStorageEvaluator();}
0389f987fc0ee14af9e65b1533d9ae3639316a5b34dcd80dc728d77dd3ec17ad
subjectFactory
protected SubjectFactory subjectFactory()
{    return new DefaultSubjectFactory();}
a51907b5823f2cbd3913553872f9d2e3586a239575b47dc985146a995fe5bda6
sessionFactory
protected SessionFactory sessionFactory()
{    return new SimpleSessionFactory();}
c760a28914967721059a4e0a425a5de4f737cbb3407828ee233c835d6913a908
sessionDAO
protected SessionDAO sessionDAO()
{    return new MemorySessionDAO();}
0955506bf3361f1bfb86fdcf8629cb56e7e8b4950182b769b929aed35cf11a6e
authorizer
protected Authorizer authorizer()
{    ModularRealmAuthorizer authorizer = new ModularRealmAuthorizer();    if (permissionResolver != null) {        authorizer.setPermissionResolver(permissionResolver);    }    if (rolePermissionResolver != null) {        authorizer.setRolePermissionResolver(rolePermissionResolver);    }    return authorizer;}
4a1426790c477d0c9f1f08127d67d644e39539d5ceb094661c47323855a6a733
authenticationStrategy
protected AuthenticationStrategy authenticationStrategy()
{    return new AtLeastOneSuccessfulStrategy();}
9b929f66f01943438cc7bf706fa76fcb2fcd0405393c12ae3724b49f2a0d2207
authenticator
protected Authenticator authenticator()
{    ModularRealmAuthenticator authenticator = new ModularRealmAuthenticator();    authenticator.setAuthenticationStrategy(authenticationStrategy());    return authenticator;}
43db96d511c401475451203634dd6ff18ceab249e1e19808e9b3405a4f2a219c
iniRealmFromLocation
protected Realm iniRealmFromLocation(String iniLocation)
{    Ini ini = Ini.fromResourcePath(iniLocation);    return new IniRealm(ini);}
126aa429ee7beca76abf62f8af97d6684f9f8122c2c0b9fe2c8b51accf789d8a
defaultAdvisorAutoProxyCreator
protected DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator()
{    return super.defaultAdvisorAutoProxyCreator();}
48a686ab705dc3fd23273c4b4b05cd4f6e02421ead4d0450efb33d0072e3b2bd
authorizationAttributeSourceAdvisor
protected AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(SecurityManager securityManager)
{    return super.authorizationAttributeSourceAdvisor(securityManager);}
52508239d4822bfde98406e86f3d146649f071eb3b73c0ac26f65ca2899659c0
lifecycleBeanPostProcessor
public LifecycleBeanPostProcessor lifecycleBeanPostProcessor()
{    return super.lifecycleBeanPostProcessor();}
221d19cc0959de505eaffe39d7509d2766b90cd425ddbdce5ba02651c11006c7
eventBus
protected EventBus eventBus()
{    return super.eventBus();}
e007f85b1ae9e243c1c0e7be075e63ce8fd989a617bc6bfb8d3196bcf3fdf5ba
shiroEventBusAwareBeanPostProcessor
public ShiroEventBusBeanPostProcessor shiroEventBusAwareBeanPostProcessor()
{    return super.shiroEventBusAwareBeanPostProcessor();}
c134362343bd3eb1fa7566762355fd2659faf2800fe9571fa48562b37ba3c334
securityManager
protected SessionsSecurityManager securityManager(List<Realm> realms)
{    return super.securityManager(realms);}
a2329cf7aa482e2cac54d5a9f35cb1b9bda67081035e9210a3bfaa37307c0c0b
sessionManager
protected SessionManager sessionManager()
{    return super.sessionManager();}
cd337bd6520bbc56a5b1952d891dc263e875762e81ed4e44efd988c5064f911e
subjectDAO
protected SubjectDAO subjectDAO()
{    return super.subjectDAO();}
200f4bee9ddc71f495d642a5ae10e0d55721ed4a3cea639d9f843455331bff0b
sessionStorageEvaluator
protected SessionStorageEvaluator sessionStorageEvaluator()
{    return super.sessionStorageEvaluator();}
0389f987fc0ee14af9e65b1533d9ae3639316a5b34dcd80dc728d77dd3ec17ad
subjectFactory
protected SubjectFactory subjectFactory()
{    return super.subjectFactory();}
a51907b5823f2cbd3913553872f9d2e3586a239575b47dc985146a995fe5bda6
sessionFactory
protected SessionFactory sessionFactory()
{    return super.sessionFactory();}
c760a28914967721059a4e0a425a5de4f737cbb3407828ee233c835d6913a908
sessionDAO
protected SessionDAO sessionDAO()
{    return super.sessionDAO();}
0955506bf3361f1bfb86fdcf8629cb56e7e8b4950182b769b929aed35cf11a6e
authorizer
protected Authorizer authorizer()
{    return super.authorizer();}
4a1426790c477d0c9f1f08127d67d644e39539d5ceb094661c47323855a6a733
authenticationStrategy
protected AuthenticationStrategy authenticationStrategy()
{    return super.authenticationStrategy();}
9b929f66f01943438cc7bf706fa76fcb2fcd0405393c12ae3724b49f2a0d2207
authenticator
protected Authenticator authenticator()
{    return super.authenticator();}
0161628ba61353944174c0aa98d8e671ffd4937372643ae4980176858100515e
rememberMeManager
protected RememberMeManager rememberMeManager()
{    return super.rememberMeManager();}
b3efb76182450e4b9e32a06d5f6be9adc58ddaee9d7e64565eb0353b8158af0a
postProcessBeforeInitialization
public Object postProcessBeforeInitialization(Object object, String name) throws BeansException
{    if (object instanceof Initializable) {        try {            if (log.isDebugEnabled()) {                log.debug("Initializing bean [" + name + "]...");            }            ((Initializable) object).init();        } catch (Exception e) {            throw new FatalBeanException("Error initializing bean [" + name + "]", e);        }    }    return object;}
1f853b02ea14ae8764c8e2bae2d044a6b7f445162f09380aaef3e6155bbce3da
postProcessAfterInitialization
public Object postProcessAfterInitialization(Object object, String name) throws BeansException
{        return object;}
33fde9c1a4224227d07cd21096b14cb80f0db7f8780906c0616032286babf2d9
postProcessBeforeDestruction
public void postProcessBeforeDestruction(Object object, String name) throws BeansException
{    if (object instanceof Destroyable) {        try {            if (log.isDebugEnabled()) {                log.debug("Destroying bean [" + name + "]...");            }            ((Destroyable) object).destroy();        } catch (Exception e) {            throw new FatalBeanException("Error destroying bean [" + name + "]", e);        }    }}
3bbf6bc29815fb4d4042bc531167156edc35829518e884c4418b3527f610fca8
getOrder
public int getOrder()
{        return order;}
5c1548ed5c8fa36c37e30466189a32029440241ffffeebbb1fb83965e6154623
requiresDestruction
public boolean requiresDestruction(Object bean)
{    return (bean instanceof Destroyable);}
80a639aaa8753f5b610952ea4bba9ff416336a3c9d2372eba901aeb8e6ce92f3
setSecurityManager
public void setSecurityManager(org.apache.shiro.mgt.SecurityManager securityManager)
{    this.securityManager = securityManager;}
82d5dc8a50ac9becaaca786b4ed0efea6bc2ea8c6754f2d01e04bd54a966a9df
invoke
public Object invoke(final RemoteInvocation invocation, final Object targetObject) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException
{    try {        SecurityManager securityManager = this.securityManager != null ? this.securityManager : SecurityUtils.getSecurityManager();        Subject.Builder builder = new Subject.Builder(securityManager);        String host = (String) invocation.getAttribute(SecureRemoteInvocationFactory.HOST_KEY);        if (host != null) {            builder.host(host);        }        Serializable sessionId = invocation.getAttribute(SecureRemoteInvocationFactory.SESSION_ID_KEY);        if (sessionId != null) {            builder.sessionId(sessionId);        } else {            if (log.isTraceEnabled()) {                log.trace("RemoteInvocation did not contain a Shiro Session id attribute under " + "key [" + SecureRemoteInvocationFactory.SESSION_ID_KEY + "].  A Subject based " + "on an existing Session will not be available during the method invocation.");            }        }        Subject subject = builder.buildSubject();        return subject.execute(new Callable() {            public Object call() throws Exception {                return SecureRemoteInvocationExecutor.super.invoke(invocation, targetObject);            }        });    } catch (ExecutionException e) {        Throwable cause = e.getCause();        if (cause instanceof NoSuchMethodException) {            throw (NoSuchMethodException) cause;        } else if (cause instanceof IllegalAccessException) {            throw (IllegalAccessException) cause;        } else if (cause instanceof InvocationTargetException) {            throw (InvocationTargetException) cause;        } else {            throw new InvocationTargetException(cause);        }    } catch (Throwable t) {        throw new InvocationTargetException(t);    }}
6b6696c98cde0a78a1cb538a0489ddeafee18fe4969bcb083df143138b9793be
call
public Object call() throws Exception
{    return SecureRemoteInvocationExecutor.super.invoke(invocation, targetObject);}
c2c7d29a1c5566e7cd141d6d5be38b25f732f0ed664b095be555424d56be29b5
createRemoteInvocation
public RemoteInvocation createRemoteInvocation(MethodInvocation mi)
{    Serializable sessionId = null;    String host = null;    boolean sessionManagerMethodInvocation = false;            Class miDeclaringClass = mi.getMethod().getDeclaringClass();    if (SessionManager.class.equals(miDeclaringClass) || NativeSessionManager.class.equals(miDeclaringClass)) {        sessionManagerMethodInvocation = true;                if (!mi.getMethod().getName().equals("start")) {            SessionKey key = (SessionKey) mi.getArguments()[0];            sessionId = key.getSessionId();        }    }        if (sessionId == null)        sessionId = this.sessionId;        if (sessionId == null) {        try {                        SecurityUtils.getSecurityManager();            if (!sessionManagerMethodInvocation) {                Subject subject = SecurityUtils.getSubject();                Session session = subject.getSession(false);                if (session != null) {                    sessionId = session.getId();                    host = session.getHost();                }            }        } catch (Exception e) {            log.trace("No security manager set. Trying next to get session id from system property");        }    }        if (sessionId == null) {        if (log.isTraceEnabled()) {            log.trace("No Session found for the currently executing subject via subject.getSession(false).  " + "Attempting to revert back to the 'shiro.session.id' system property...");        }        sessionId = System.getProperty(SESSION_ID_SYSTEM_PROPERTY_NAME);        if (sessionId == null && log.isTraceEnabled()) {            log.trace("No 'shiro.session.id' system property found.  Heuristics have been exhausted; " + "RemoteInvocation will not contain a sessionId.");        }    }    RemoteInvocation ri = new RemoteInvocation(mi);    if (sessionId != null) {        ri.addAttribute(SESSION_ID_KEY, sessionId);    }    if (host != null) {        ri.addAttribute(HOST_KEY, host);    }    return ri;}
2867b443b98382799967c2768d58d2033b058be22c7fb858c050fc8ba2236cd4
createMethodInvocation
protected org.apache.shiro.aop.MethodInvocation createMethodInvocation(Object implSpecificMethodInvocation)
{    final MethodInvocation mi = (MethodInvocation) implSpecificMethodInvocation;    return new org.apache.shiro.aop.MethodInvocation() {        public Method getMethod() {            return mi.getMethod();        }        public Object[] getArguments() {            return mi.getArguments();        }        public String toString() {            return "Method invocation [" + mi.getMethod() + "]";        }        public Object proceed() throws Throwable {            return mi.proceed();        }        public Object getThis() {            return mi.getThis();        }    };}
16e4501d146132f0d2fae26807b36220aec005795fc6efafb7f90440a4081abd
getMethod
public Method getMethod()
{    return mi.getMethod();}
4ffa0498204382f03957f8df56dbc87185ee23c5779a3f6d8c660066ede66856
getArguments
public Object[] getArguments()
{    return mi.getArguments();}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return "Method invocation [" + mi.getMethod() + "]";}
0e501a2977e5e3d04bd7ec0dcab2deb7e698ecc90c3cd6e9df30c6885dc5ba93
proceed
public Object proceed() throws Throwable
{    return mi.proceed();}
2a93b1a795f42038e9a60220dce73fed03df638d7a4deb5668b6df7dfd6b2470
getThis
public Object getThis()
{    return mi.getThis();}
05d383ce00c51ad82992aa441b547a7adc15eca1fd3bf6af94d2959ed700a758
continueInvocation
protected Object continueInvocation(Object aopAllianceMethodInvocation) throws Throwable
{    MethodInvocation mi = (MethodInvocation) aopAllianceMethodInvocation;    return mi.proceed();}
452176b5a2b764d210f4e03b31efcbe2fed7512dde378a57931764d3ed55c42f
invoke
public Object invoke(MethodInvocation methodInvocation) throws Throwable
{    org.apache.shiro.aop.MethodInvocation mi = createMethodInvocation(methodInvocation);    return super.invoke(mi);}
893e074f548b64dec4e0ecb3d99b55207f0353bcbda59913daa9d0096ac3ba9d
getSecurityManager
public SecurityManager getSecurityManager()
{    return securityManager;}
80a639aaa8753f5b610952ea4bba9ff416336a3c9d2372eba901aeb8e6ce92f3
setSecurityManager
public void setSecurityManager(org.apache.shiro.mgt.SecurityManager securityManager)
{    this.securityManager = securityManager;}
bebbde68c772273afcd27e10dec86efe3ef5c72e86b32b7596d8d9d9e30c76e2
matches
public boolean matches(Method method, Class targetClass)
{    Method m = method;    if (isAuthzAnnotationPresent(m)) {        return true;    }        if (targetClass != null) {        try {            m = targetClass.getMethod(m.getName(), m.getParameterTypes());            return isAuthzAnnotationPresent(m) || isAuthzAnnotationPresent(targetClass);        } catch (NoSuchMethodException ignored) {                        }    }    return false;}
a9d26d1d0b9a60a22867ef1590d54339c9fe274c01e46bbd7a4bfa7509aca73a
isAuthzAnnotationPresent
private boolean isAuthzAnnotationPresent(Class<?> targetClazz)
{    for (Class<? extends Annotation> annClass : AUTHZ_ANNOTATION_CLASSES) {        Annotation a = AnnotationUtils.findAnnotation(targetClazz, annClass);        if (a != null) {            return true;        }    }    return false;}
f6f2e548e027e6bb67ebd4cd89b1e0e150424d81c350affda0043045350ccf1f
isAuthzAnnotationPresent
private boolean isAuthzAnnotationPresent(Method method)
{    for (Class<? extends Annotation> annClass : AUTHZ_ANNOTATION_CLASSES) {        Annotation a = AnnotationUtils.findAnnotation(method, annClass);        if (a != null) {            return true;        }    }    return false;}
c27ca1c7d593d06bd762cf23178db10a691d8934c2b5228b45d4728cb988dd32
postProcessBeforeInitialization
public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException
{    return bean;}
52cd3c851061f917ec0b9f5bb198b1ca8ea1626ce7c0d48d73ec0f950df3685a
postProcessAfterInitialization
public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException
{    if (bean instanceof EventBusAware) {        ((EventBusAware) bean).setEventBus(eventBus);    } else if (isEventSubscriber(bean)) {        eventBus.register(bean);    }    return bean;}
7062c800ca280b8b06d5c36c44bef28214977dc3eefde8e473851867c97e208c
isEventSubscriber
private boolean isEventSubscriber(Object bean)
{    List annotatedMethods = ClassUtils.getAnnotatedMethods(bean.getClass(), Subscribe.class);    return !CollectionUtils.isEmpty(annotatedMethods);}
3c2c899f9c6e20db5b13746df406726e6f3d2b9d6c6fbe44eadd2a361b526e4d
nativeSessionManager
protected SessionManager nativeSessionManager()
{    DefaultWebSessionManager webSessionManager = new DefaultWebSessionManager();    webSessionManager.setSessionIdCookieEnabled(sessionIdCookieEnabled);    webSessionManager.setSessionIdUrlRewritingEnabled(sessionIdUrlRewritingEnabled);    webSessionManager.setSessionIdCookie(sessionCookieTemplate());    webSessionManager.setSessionFactory(sessionFactory());    webSessionManager.setSessionDAO(sessionDAO());    webSessionManager.setDeleteInvalidSessions(sessionManagerDeleteInvalidSessions);    return webSessionManager;}
3a7f854c5430c44c043e20338a68b065f987d589078c3fc0c08e4bca72c8ad58
sessionCookieTemplate
protected Cookie sessionCookieTemplate()
{    return buildCookie(sessionIdCookieName, sessionIdCookieMaxAge, sessionIdCookiePath, sessionIdCookieDomain, sessionIdCookieSecure);}
e394717beec6692e2f7c3f43cbd908f25a14a074745e922870d285817cc2432e
rememberMeCookieTemplate
protected Cookie rememberMeCookieTemplate()
{    return buildCookie(rememberMeCookieName, rememberMeCookieMaxAge, rememberMeCookiePath, rememberMeCookieDomain, rememberMeCookieSecure);}
82cd066fdff1ca807ab9fb00becb0de6656da504bb503d475b90071a27d9cd73
buildCookie
protected Cookie buildCookie(String name, int maxAge, String path, String domain, boolean secure)
{    Cookie cookie = new SimpleCookie(name);    cookie.setHttpOnly(true);    cookie.setMaxAge(maxAge);    cookie.setPath(path);    cookie.setDomain(domain);    cookie.setSecure(secure);    return cookie;}
a2329cf7aa482e2cac54d5a9f35cb1b9bda67081035e9210a3bfaa37307c0c0b
sessionManager
protected SessionManager sessionManager()
{    if (useNativeSessionManager) {        return nativeSessionManager();    }    return new ServletContainerSessionManager();}
0161628ba61353944174c0aa98d8e671ffd4937372643ae4980176858100515e
rememberMeManager
protected RememberMeManager rememberMeManager()
{    CookieRememberMeManager cookieRememberMeManager = new CookieRememberMeManager();    cookieRememberMeManager.setCookie(rememberMeCookieTemplate());    return cookieRememberMeManager;}
0389f987fc0ee14af9e65b1533d9ae3639316a5b34dcd80dc728d77dd3ec17ad
subjectFactory
protected SubjectFactory subjectFactory()
{    return new DefaultWebSubjectFactory();}
200f4bee9ddc71f495d642a5ae10e0d55721ed4a3cea639d9f843455331bff0b
sessionStorageEvaluator
protected SessionStorageEvaluator sessionStorageEvaluator()
{    return new DefaultWebSessionStorageEvaluator();}
66d6855c2f73a612d695871c7d31a274fc9201133a31645259023af640ebf204
createSecurityManager
protected SessionsSecurityManager createSecurityManager()
{    DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();    securityManager.setSubjectDAO(subjectDAO());    securityManager.setSubjectFactory(subjectFactory());    securityManager.setRememberMeManager(rememberMeManager());    return securityManager;}
b8c097f592dfa9f3a77c84578ae93a55bd286b500d5de1c3f78223d3913feed0
shiroFilterChainDefinition
protected ShiroFilterChainDefinition shiroFilterChainDefinition()
{    DefaultShiroFilterChainDefinition chainDefinition = new DefaultShiroFilterChainDefinition();    chainDefinition.addPathDefinition("/**", "authc");    return chainDefinition;}
d3e7a4dfcbfafa6c21ab0005062204a40c5453a6dd4972845bf8000dc9be48b0
shiroFilterFactoryBean
protected ShiroFilterFactoryBean shiroFilterFactoryBean()
{    ShiroFilterFactoryBean filterFactoryBean = new ShiroFilterFactoryBean();    filterFactoryBean.setLoginUrl(loginUrl);    filterFactoryBean.setSuccessUrl(successUrl);    filterFactoryBean.setUnauthorizedUrl(unauthorizedUrl);    filterFactoryBean.setSecurityManager(securityManager);    filterFactoryBean.setFilterChainDefinitionMap(shiroFilterChainDefinition.getFilterChainMap());    return filterFactoryBean;}
baab7574db58ddd2a7d48a7aad988dd1b7b662ab68ccbb1ea052534215c1586c
addPathDefinition
public void addPathDefinition(String antPath, String definition)
{    filterChainDefinitionMap.put(antPath, definition);}
6f9f3294f2ab38aedd31652710cd669786fa40799be15c9d46cb73ec924db00f
addPathDefinitions
public void addPathDefinitions(Map<String, String> pathDefinitions)
{    filterChainDefinitionMap.putAll(pathDefinitions);}
a795aa0e59ac428628be981fce4569db25305855432bf5fc8c7d83a60763b3dd
getFilterChainMap
public Map<String, String> getFilterChainMap()
{    return filterChainDefinitionMap;}
cd337bd6520bbc56a5b1952d891dc263e875762e81ed4e44efd988c5064f911e
subjectDAO
protected SubjectDAO subjectDAO()
{    return super.subjectDAO();}
200f4bee9ddc71f495d642a5ae10e0d55721ed4a3cea639d9f843455331bff0b
sessionStorageEvaluator
protected SessionStorageEvaluator sessionStorageEvaluator()
{    return super.sessionStorageEvaluator();}
a51907b5823f2cbd3913553872f9d2e3586a239575b47dc985146a995fe5bda6
sessionFactory
protected SessionFactory sessionFactory()
{    return super.sessionFactory();}
c760a28914967721059a4e0a425a5de4f737cbb3407828ee233c835d6913a908
sessionDAO
protected SessionDAO sessionDAO()
{    return super.sessionDAO();}
3a7f854c5430c44c043e20338a68b065f987d589078c3fc0c08e4bca72c8ad58
sessionCookieTemplate
protected Cookie sessionCookieTemplate()
{    return super.sessionCookieTemplate();}
e394717beec6692e2f7c3f43cbd908f25a14a074745e922870d285817cc2432e
rememberMeCookieTemplate
protected Cookie rememberMeCookieTemplate()
{    return super.rememberMeCookieTemplate();}
0161628ba61353944174c0aa98d8e671ffd4937372643ae4980176858100515e
rememberMeManager
protected RememberMeManager rememberMeManager()
{    return super.rememberMeManager();}
0389f987fc0ee14af9e65b1533d9ae3639316a5b34dcd80dc728d77dd3ec17ad
subjectFactory
protected SubjectFactory subjectFactory()
{    return super.subjectFactory();}
0955506bf3361f1bfb86fdcf8629cb56e7e8b4950182b769b929aed35cf11a6e
authorizer
protected Authorizer authorizer()
{    return super.authorizer();}
4a1426790c477d0c9f1f08127d67d644e39539d5ceb094661c47323855a6a733
authenticationStrategy
protected AuthenticationStrategy authenticationStrategy()
{    return super.authenticationStrategy();}
9b929f66f01943438cc7bf706fa76fcb2fcd0405393c12ae3724b49f2a0d2207
authenticator
protected Authenticator authenticator()
{    return super.authenticator();}
a2329cf7aa482e2cac54d5a9f35cb1b9bda67081035e9210a3bfaa37307c0c0b
sessionManager
protected SessionManager sessionManager()
{    return super.sessionManager();}
c134362343bd3eb1fa7566762355fd2659faf2800fe9571fa48562b37ba3c334
securityManager
protected SessionsSecurityManager securityManager(List<Realm> realms)
{    return super.securityManager(realms);}
b8c097f592dfa9f3a77c84578ae93a55bd286b500d5de1c3f78223d3913feed0
shiroFilterChainDefinition
protected ShiroFilterChainDefinition shiroFilterChainDefinition()
{    return super.shiroFilterChainDefinition();}
d3e7a4dfcbfafa6c21ab0005062204a40c5453a6dd4972845bf8000dc9be48b0
shiroFilterFactoryBean
protected ShiroFilterFactoryBean shiroFilterFactoryBean()
{    return super.shiroFilterFactoryBean();}
893e074f548b64dec4e0ecb3d99b55207f0353bcbda59913daa9d0096ac3ba9d
getSecurityManager
public SecurityManager getSecurityManager()
{    return securityManager;}
c11e39b3138902654fbfe242e943963b5e160471a127c735c0e7e1bf5c67886e
setSecurityManager
public void setSecurityManager(SecurityManager securityManager)
{    this.securityManager = securityManager;}
cb0891b38e24fc37882bf570cfeff6bc166c3e5807343721685dec0e20913579
getLoginUrl
public String getLoginUrl()
{    return loginUrl;}
9053c363f73f1d7d13987e641b2f9b819cca91794470f42f477dfbb48b49782c
setLoginUrl
public void setLoginUrl(String loginUrl)
{    this.loginUrl = loginUrl;}
dfe0bc8c44b5d1a775738777802d6db4ba2ac20a2e2d6af542282b014e087c07
getSuccessUrl
public String getSuccessUrl()
{    return successUrl;}
a8fcc73deecc3343131a4baf3ebffbd85a24256bb25a7402766ad7c9b9b5860d
setSuccessUrl
public void setSuccessUrl(String successUrl)
{    this.successUrl = successUrl;}
48c6eb8c5e217000af328f573d595f5a9f7a53783217292565161f199407be60
getUnauthorizedUrl
public String getUnauthorizedUrl()
{    return unauthorizedUrl;}
e0d4b692ee7e706f05785f725ac9eb979da8e23a90ca39ec6b683960ef26cc9f
setUnauthorizedUrl
public void setUnauthorizedUrl(String unauthorizedUrl)
{    this.unauthorizedUrl = unauthorizedUrl;}
f0da0505a643e8f347db848380ac3a8a54e11cf7b80ba0fe331120484601c364
getFilters
public Map<String, Filter> getFilters()
{    return filters;}
c3d46a62b9829ffdaa40cba9534841156f3425d6f24d3cdee0d48d7cbf7e3d6d
setFilters
public void setFilters(Map<String, Filter> filters)
{    this.filters = filters;}
974a31efa1709a9f6f5f607f39004ef658e98785c3e8e60e9d53ce4071773a3f
getFilterChainDefinitionMap
public Map<String, String> getFilterChainDefinitionMap()
{    return filterChainDefinitionMap;}
5a058aaa3dadf8e310db7b3666f453fddc7e72560f6653dd86756f75e2e4ae82
setFilterChainDefinitionMap
public void setFilterChainDefinitionMap(Map<String, String> filterChainDefinitionMap)
{    this.filterChainDefinitionMap = filterChainDefinitionMap;}
eacf6b8277671523e3b8ce7e9ca644059f48aa30c58909f2bb11bc680c7e40fe
setFilterChainDefinitions
public void setFilterChainDefinitions(String definitions)
{    Ini ini = new Ini();    ini.load(definitions);        Ini.Section section = ini.getSection(IniFilterChainResolverFactory.URLS);    if (CollectionUtils.isEmpty(section)) {                        section = ini.getSection(Ini.DEFAULT_SECTION_NAME);    }    setFilterChainDefinitionMap(section);}
ad22baa6e4bf73f23ab3d3fa586b531ad71cb9589f3ee3aa20c5eaa695794d6b
getObject
public Object getObject() throws Exception
{    if (instance == null) {        instance = createInstance();    }    return instance;}
aef34091f0288bc2e74521c6613d032c50b248227f409c052a2268367bc49c32
getObjectType
public Class getObjectType()
{    return SpringShiroFilter.class;}
96c07fa80769e3073abe8ced949a55040869c46e5abbc4ba7e82bbf651809179
isSingleton
public boolean isSingleton()
{    return true;}
b3439e28fc7aa5334bde8cfb0c6552faac26b6c6748cee501ef1622f283ecb86
createFilterChainManager
protected FilterChainManager createFilterChainManager()
{    DefaultFilterChainManager manager = new DefaultFilterChainManager();    Map<String, Filter> defaultFilters = manager.getFilters();        for (Filter filter : defaultFilters.values()) {        applyGlobalPropertiesIfNecessary(filter);    }        Map<String, Filter> filters = getFilters();    if (!CollectionUtils.isEmpty(filters)) {        for (Map.Entry<String, Filter> entry : filters.entrySet()) {            String name = entry.getKey();            Filter filter = entry.getValue();            applyGlobalPropertiesIfNecessary(filter);            if (filter instanceof Nameable) {                ((Nameable) filter).setName(name);            }                                    manager.addFilter(name, filter, false);        }    }        Map<String, String> chains = getFilterChainDefinitionMap();    if (!CollectionUtils.isEmpty(chains)) {        for (Map.Entry<String, String> entry : chains.entrySet()) {            String url = entry.getKey();            String chainDefinition = entry.getValue();            manager.createChain(url, chainDefinition);        }    }    return manager;}
33ebb6712a335570126af52c4c440b71eaa1b772450cafd4ec75403406996e8b
createInstance
protected AbstractShiroFilter createInstance() throws Exception
{    log.debug("Creating Shiro Filter instance.");    SecurityManager securityManager = getSecurityManager();    if (securityManager == null) {        String msg = "SecurityManager property must be set.";        throw new BeanInitializationException(msg);    }    if (!(securityManager instanceof WebSecurityManager)) {        String msg = "The security manager does not implement the WebSecurityManager interface.";        throw new BeanInitializationException(msg);    }    FilterChainManager manager = createFilterChainManager();                PathMatchingFilterChainResolver chainResolver = new PathMatchingFilterChainResolver();    chainResolver.setFilterChainManager(manager);        return new SpringShiroFilter((WebSecurityManager) securityManager, chainResolver);}
d731a4091307ee4c21c42ea1c55f51e8d43b8a7799e0df62cd2dce78a0fbd688
applyLoginUrlIfNecessary
private void applyLoginUrlIfNecessary(Filter filter)
{    String loginUrl = getLoginUrl();    if (StringUtils.hasText(loginUrl) && (filter instanceof AccessControlFilter)) {        AccessControlFilter acFilter = (AccessControlFilter) filter;                String existingLoginUrl = acFilter.getLoginUrl();        if (AccessControlFilter.DEFAULT_LOGIN_URL.equals(existingLoginUrl)) {            acFilter.setLoginUrl(loginUrl);        }    }}
9b623d9afc8b99b8b9cb6a0e621efc67dae4e26c736320438bea241b72948bca
applySuccessUrlIfNecessary
private void applySuccessUrlIfNecessary(Filter filter)
{    String successUrl = getSuccessUrl();    if (StringUtils.hasText(successUrl) && (filter instanceof AuthenticationFilter)) {        AuthenticationFilter authcFilter = (AuthenticationFilter) filter;                String existingSuccessUrl = authcFilter.getSuccessUrl();        if (AuthenticationFilter.DEFAULT_SUCCESS_URL.equals(existingSuccessUrl)) {            authcFilter.setSuccessUrl(successUrl);        }    }}
b1644f2638f0241ee792c53505d46c751ac6aaa8eb62d77251cbdd5d7713cc0d
applyUnauthorizedUrlIfNecessary
private void applyUnauthorizedUrlIfNecessary(Filter filter)
{    String unauthorizedUrl = getUnauthorizedUrl();    if (StringUtils.hasText(unauthorizedUrl) && (filter instanceof AuthorizationFilter)) {        AuthorizationFilter authzFilter = (AuthorizationFilter) filter;                String existingUnauthorizedUrl = authzFilter.getUnauthorizedUrl();        if (existingUnauthorizedUrl == null) {            authzFilter.setUnauthorizedUrl(unauthorizedUrl);        }    }}
e9968c6913938e10175d62e107ed3f44149e3dde0f93010831b84e92531a5760
applyGlobalPropertiesIfNecessary
private void applyGlobalPropertiesIfNecessary(Filter filter)
{    applyLoginUrlIfNecessary(filter);    applySuccessUrlIfNecessary(filter);    applyUnauthorizedUrlIfNecessary(filter);}
c27ca1c7d593d06bd762cf23178db10a691d8934c2b5228b45d4728cb988dd32
postProcessBeforeInitialization
public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException
{    if (bean instanceof Filter) {        log.debug("Found filter chain candidate filter '{}'", beanName);        Filter filter = (Filter) bean;        applyGlobalPropertiesIfNecessary(filter);        getFilters().put(beanName, filter);    } else {        log.trace("Ignoring non-Filter bean '{}'", beanName);    }    return bean;}
52cd3c851061f917ec0b9f5bb198b1ca8ea1626ce7c0d48d73ec0f950df3685a
postProcessAfterInitialization
public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException
{    return bean;}
5fec71eed44fe432b50bfa5b71b5c464b6b7fa337bcc1353b00fa84599503e41
eventBusAwareObject
protected EventBusAwareObject eventBusAwareObject()
{    return new EventBusAwareObject();}
b12730f67bd39f8a463aff3bd265a2eda2231afbaa846d902d1e73877b73dcb6
subscriber
protected EventSubscriber subscriber()
{    return new EventSubscriber();}
95c6edb20d2e27c54ce89be7d7ade6a5b9cdb9fa2cb451762c3c7ebed3f31e01
getEventBus
public EventBus getEventBus()
{    return eventBus;}
90d564afd68ffbd24f93d92358d830d481e0c7418cfcfeab221eab4774e70158
setEventBus
public void setEventBus(EventBus eventBus)
{    this.eventBus = eventBus;}
268db8d27663ab04419378f5f6eb26a89279482434322a48c47c65445f10fd12
listen
public void listen(Object object)
{}
221d19cc0959de505eaffe39d7509d2766b90cd425ddbdce5ba02651c11006c7
eventBus
protected EventBus eventBus()
{    return new DefaultEventBus();}
2ad496d8570c4f8fd6df778db8a7ed1bc391a86e527673f13eeaff31cbfa6983
cacheManager
 CacheManager cacheManager()
{    return new MemoryConstrainedCacheManager();}
c81733d4b463d0175344128faefff8d5b1b9d7bdcb4cf3a9ed245ee0400f4a03
rolePermissionResolver
 RolePermissionResolver rolePermissionResolver()
{    return new RolePermissionResolver() {        @Override        public Collection<Permission> resolvePermissionsInRole(String roleString) {            return Collections.emptySet();        }    };}
dadcbe03658e57c5f31c83de162ee2c2f0d2fb7bc44fd5f30607369bc8f96412
resolvePermissionsInRole
public Collection<Permission> resolvePermissionsInRole(String roleString)
{    return Collections.emptySet();}
855b0ca5fed802798b079597e2867fc3ae4d01a6a5a1cbcea58098940bb1845f
permissionResolver
 PermissionResolver permissionResolver()
{        return new WildcardPermissionResolver();}
61dfaa2d76587fcc54d56224bb48fa6f2f4c883f1ede95fa955780f91a8f4e3c
getTextConfigurationRealm
 Realm getTextConfigurationRealm()
{    TextConfigurationRealm realm = new TextConfigurationRealm();    realm.setUserDefinitions("joe.coder=password,user\n" + "jill.coder=password,admin");    realm.setRoleDefinitions("admin=read,write\n" + "user=read");    realm.setCachingEnabled(true);    return realm;}
5ff0b8f7d2b080bcc6214fa5f91be74727145ea81cacb63a99c8d0f3106c089f
setup
public void setup()
{    ThreadContext.remove();}
39e5ba029cc67f6f1d45c6d20f0df595ec16bc61da20d7680fcbbdae4fe7f95b
tearDown
public void tearDown()
{    ThreadContext.remove();}
c52d35303c19423a2ca52e24130b66b370d2ebf912a38c2f5d9d4a3fb6fa4658
getMethod
protected Method getMethod(String name, Class clazz)
{    Method[] methods = clazz.getMethods();    for (Method method : methods) {        if (method.getName().equals(name)) {            return method;        }    }    throw new IllegalStateException("'" + name + "' method should exist.");}
957a3182ef3cc1452eb553e97063831c078acb54a6f13184d7cdea2f48380f36
testSessionManagerProxyStartRemoteInvocation
public void testSessionManagerProxyStartRemoteInvocation() throws Exception
{    SecureRemoteInvocationFactory factory = new SecureRemoteInvocationFactory();    MethodInvocation mi = createMock(MethodInvocation.class);    Method startMethod = getMethod("start", SessionManager.class);    expect(mi.getMethod()).andReturn(startMethod).anyTimes();    Object[] args = { "localhost" };    expect(mi.getArguments()).andReturn(args).anyTimes();    replay(mi);    RemoteInvocation ri = factory.createRemoteInvocation(mi);    verify(mi);    assertNull(ri.getAttribute(SecureRemoteInvocationFactory.SESSION_ID_KEY));}
8d21d42e525bba1356992d4912d7efa194e535dfac0c89469ddfc90eb1f56085
testSessionManagerProxyNonStartRemoteInvocation
public void testSessionManagerProxyNonStartRemoteInvocation() throws Exception
{    SecureRemoteInvocationFactory factory = new SecureRemoteInvocationFactory();    MethodInvocation mi = createMock(MethodInvocation.class);    Method method = getMethod("getSession", SessionManager.class);    expect(mi.getMethod()).andReturn(method).anyTimes();    String dummySessionId = UUID.randomUUID().toString();    SessionKey sessionKey = new DefaultSessionKey(dummySessionId);    Object[] args = { sessionKey };    expect(mi.getArguments()).andReturn(args).anyTimes();    replay(mi);    RemoteInvocation ri = factory.createRemoteInvocation(mi);    verify(mi);    assertEquals(dummySessionId, ri.getAttribute(SecureRemoteInvocationFactory.SESSION_ID_KEY));}
c951d653dfc223f439b3a8236b96cb3f5a20a1fc166d3a7380ae6822fe57218c
bind
protected void bind(Subject subject)
{    clearSubject();    this.threadState = new SubjectThreadState(subject);    this.threadState.bind();}
ac4ed70bf5019041c8e764133af43262e494a28fe17461b37437dc652e0d7348
clearSubject
public void clearSubject()
{    if (threadState != null) {        threadState.clear();    }}
cb86025d0e0f1dc5a27ab4c3f75d5b3175a722d87ebf870906b987af06ed8c04
bindGuest
protected void bindGuest()
{    bind(new Subject.Builder(securityManager).buildSubject());}
59430726f80c536a5c2ee92619a99a8dee8062308f495b4f8cd2bd3bf2c72cbf
bindUser
protected void bindUser()
{    PrincipalCollection principals = new SimplePrincipalCollection("test", realm.getName());    bind(new Subject.Builder(securityManager).principals(principals).buildSubject());}
c92b1d18750f0030759d1f03a31555b02da2299f30dbeb6f04a572b23407d1ec
bindAuthenticatedUser
protected void bindAuthenticatedUser()
{    PrincipalCollection principals = new SimplePrincipalCollection("test", realm.getName());    bind(new Subject.Builder(securityManager).principals(principals).authenticated(true).buildSubject());}
c4f9c6ba3d011e60125455f55f49a67aed319fbf5d0693e70ab60cc4c355a3cc
testGuestImplementation
public void testGuestImplementation()
{    bindGuest();    testService.guestImplementation();}
d18e95c7edea7e576c5e27049e1839212dd998fd2bb416d309a0e14e08685b6a
testGuestImplementationFailure
public void testGuestImplementationFailure()
{    bindUser();    testService.guestImplementation();}
354aab1ea1043172562c9608d554df591ad2cdda0d4015e93b2a0388627cde50
testGuestInterface
public void testGuestInterface()
{    bindGuest();    testService.guestInterface();}
564d2ae291b037aa1d8a02a542d0fe8f4011a81c424769e770e447287487d15d
testUserImplementation
public void testUserImplementation()
{    bindUser();    testService.userImplementation();}
01bf517dfd4fd36844e3c6ab3978b1078fe20f4eeab0baf501d267398138813c
testUserImplementationFailure
public void testUserImplementationFailure()
{    bindGuest();    testService.userImplementation();}
65e0d6904dd53b65e8dee0a329a98dce4d59d2148088f15025fe39a9af4cf8a2
testUserInterface
public void testUserInterface()
{    bindUser();    testService.userInterface();}
ec791cad152a2236c8c5aa49c80bb7dc0eb639dae2a5871da4b10f5d8360183a
testAuthenticatedImplementation
public void testAuthenticatedImplementation()
{    bindAuthenticatedUser();    testService.authenticatedImplementation();}
897b7402d391c42599f2adce77e4c85aef92ae848f4b9740be403f4e12e0ad31
testAuthenticatedImplementationFailure
public void testAuthenticatedImplementationFailure()
{    bindUser();    testService.authenticatedImplementation();}
7c5d1860421728010b1b9f4bbc078da38b95b09c7eb2317e14174c65c015d648
testAuthenticatedInterface
public void testAuthenticatedInterface()
{    bindAuthenticatedUser();    testService.authenticatedInterface();}
b790da720bbf0b265765af4f7ab2e5187efeddfc7197dbe35b0f14dda729295c
secureMethod
public void secureMethod()
{}
5e542cea5f0a845e9c29c83c5a921595a96b565faa83b4bda5bb169dd29a9868
unsecuredMethod
public void unsecuredMethod()
{}
e8724b749cbf74f2c3d7f687a936fbe04db25c175e9e49f1ed8689f0c20f233e
secureMethod
public String secureMethod()
{    return "";}
94f29b54a171ec77688f7a520b48196398477513b0d6a765ca510a785e9e5a6c
unsecuredMethod
public String unsecuredMethod()
{    return "";}
508452336d8c249058cc491dc8645358e212ba046121f9150547a9780c7e93c9
someMethod
public String someMethod()
{    return "";}
581b84b6c8d52e521494c6c12a99af371fbe566f87e1c97f56ec5ac24135f252
matches
public void matches() throws NoSuchMethodException
{    assertTrue("the method is annotated, should match", new AuthorizationAttributeSourceAdvisor().matches(Secured.class.getDeclaredMethod("secureMethod"), Secured.class));    assertFalse("the method is not annotated, should not match", new AuthorizationAttributeSourceAdvisor().matches(Secured.class.getDeclaredMethod("unsecuredMethod"), Secured.class));    assertTrue("the method declaration is annotated in the interface, should match", new AuthorizationAttributeSourceAdvisor().matches(ServiceInterface.class.getDeclaredMethod("secureMethod"), ServiceImpl.class));    assertFalse("not annotated method, should not match", new AuthorizationAttributeSourceAdvisor().matches(ServiceInterface.class.getDeclaredMethod("unsecuredMethod"), ServiceImpl.class));    assertTrue("the method declaration is in the interface with type-annotation, should match", new AuthorizationAttributeSourceAdvisor().matches(SafeServiceInterface.class.getDeclaredMethod("someMethod"), SafeServiceInterface.class));    assertTrue("the method declaration is in the interface with type-annotation, should match", new AuthorizationAttributeSourceAdvisor().matches(SafeServiceImpl.class.getDeclaredMethod("someMethod"), SafeServiceImpl.class));}
3bbf3247d5dbf946b2e1a838adcc21761d54f77c3d1c14b270f14b010228fdf2
testGuestInterfaceFailure
public void testGuestInterfaceFailure()
{    bindUser();    testService.guestInterface();}
4d7327d6aaefcc6cb6cf8a58eedd97d5a882bc69da1f18bb060db6ba483fadf3
testUserInterfaceFailure
public void testUserInterfaceFailure()
{    bindGuest();    testService.userInterface();}
af728e2790549d95d5896ef54e17836b5319de11922b33ef08990b8546ddcce1
testAuthenticatedInterfaceFailure
public void testAuthenticatedInterfaceFailure()
{    bindGuest();    testService.authenticatedInterface();}
4ab178c0a3c959ea9acd6bd1f16ca23a606440242e36252d8ff1cb46673a9131
guestImplementation
public void guestImplementation()
{}
886a5dded6a2bebac6ded2f911871820829bc7b636baa76cd8eb6b8e9f76de8c
guestInterface
public void guestInterface()
{}
e82025d0b87a639004d45d71b36db278baf3f8df7236e5269604c7dea4c43fe6
userImplementation
public void userImplementation()
{}
0ae374314fcb7027dca0c94e89fd73bdca44f2afe6c23be79ed15f98b94b1280
userInterface
public void userInterface()
{}
b9f03715d60407fd83891d53e4d15e0c842aaec22932601df5785d9afd06b6b4
authenticatedImplementation
public void authenticatedImplementation()
{}
ed28b08aa1a6ff7a5a9cfa182a4c280d15970db60ecd8e09e242819144ddc373
authenticatedInterface
public void authenticatedInterface()
{}
3a65105bf2fe826b835aa0d72c6f60340a2b289110a9d8d44d71ee7d2b2fa3bc
roleImplementation
public void roleImplementation()
{}
827c581097c515d7ec211eccbd372e14f6a3c36b8b7d05e93214809ff7f152cb
roleInterface
public void roleInterface()
{}
c6e510a5cf535e7d1b9494411bf5835ececcb380cd8afbefffbb74f1fb0806d0
permissionImplementation
public void permissionImplementation()
{}
93cf4fd0d247020d1d02e36b005098eef6d3c96307855e6c49dbe4b5db08c108
permissionInterface
public void permissionInterface()
{}
1fb68c41b6ca3bc6ef7f4d1288a7ffe87a9dbdccc15a1fdf1f52d2827af3fb45
getCacheManager
 CacheManager getCacheManager()
{    return new MemoryConstrainedCacheManager();}
fc816a7f48df910a0a746a065ef45bb2f432a908759d0caa838a3f1c69e0b8d9
init
public void init(FilterConfig filterConfig) throws ServletException
{}
9d4ba01fe9a48b67e6472e0dac656085ce7bc6cfe83fb78743cae78729263519
doFilter
public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException
{    chain.doFilter(request, response);}
9cabd71a85d4928de1c9a46601c11d584f3e7522ee61146e1117d0d360a20b2e
destroy
public void destroy()
{}
99848a05ab4880921964502b0280ef3561c60c75bf4baf2fddcfeaabf24a5556
testFilterDefinition
public void testFilterDefinition()
{    ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("org/apache/shiro/spring/web/ShiroFilterFactoryBeanTest.xml");    AbstractShiroFilter shiroFilter = (AbstractShiroFilter) context.getBean("shiroFilter");    PathMatchingFilterChainResolver resolver = (PathMatchingFilterChainResolver) shiroFilter.getFilterChainResolver();    DefaultFilterChainManager fcManager = (DefaultFilterChainManager) resolver.getFilterChainManager();    NamedFilterList chain = fcManager.getChain("/test");    assertNotNull(chain);    assertEquals(chain.size(), 2);    Filter[] filters = new Filter[chain.size()];    filters = chain.toArray(filters);    assertTrue(filters[0] instanceof DummyFilter);    assertTrue(filters[1] instanceof FormAuthenticationFilter);}
97801e63e8ebae290695365b0b94b4d8d5fe741aafbae4f8c83b901bc459b1bc
testFilterDefinitionWithInit
public void testFilterDefinitionWithInit() throws Exception
{    ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("org/apache/shiro/spring/web/ShiroFilterFactoryBeanTest.xml");    AbstractShiroFilter shiroFilter = (AbstractShiroFilter) context.getBean("shiroFilter");    FilterConfig mockFilterConfig = createNiceMock(FilterConfig.class);    ServletContext mockServletContext = createNiceMock(ServletContext.class);    expect(mockFilterConfig.getServletContext()).andReturn(mockServletContext).anyTimes();    HttpServletRequest mockRequest = createNiceMock(HttpServletRequest.class);    expect(mockRequest.getContextPath()).andReturn("/").anyTimes();    expect(mockRequest.getRequestURI()).andReturn("/").anyTimes();    HttpServletResponse mockResponse = createNiceMock(HttpServletResponse.class);    replay(mockFilterConfig);    replay(mockServletContext);    shiroFilter.init(mockFilterConfig);    verify(mockServletContext);    verify(mockFilterConfig);    FilterChain filterChain = new FilterChain() {        public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse) throws IOException, ServletException {            HttpServletRequest request = (HttpServletRequest) servletRequest;            assertNotNull(request.getSession());                        assertNotNull(request.getSession().getServletContext());        }    };    replay(mockRequest);    replay(mockResponse);    shiroFilter.doFilter(mockRequest, mockResponse, filterChain);    verify(mockResponse);    verify(mockRequest);}
fcce69bfe745a0b4193dfd0d3f7c33f5cb9ae64ddb1af268292620d24f0d7f8b
doFilter
public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse) throws IOException, ServletException
{    HttpServletRequest request = (HttpServletRequest) servletRequest;    assertNotNull(request.getSession());        assertNotNull(request.getSession().getServletContext());}
1a205e0a6066c9252892a28e4f44ca1c41b74fe14ef3cc303cf7b869770f5ed3
defaultAdvisorAutoProxyCreator
public DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator()
{    return super.defaultAdvisorAutoProxyCreator();}
49fc2974593a2f1e997ffe3da35b300b0fc1e4b65e8e82ea0e36c4e1c2bd219b
authorizationAttributeSourceAdvisor
public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(SecurityManager securityManager)
{    return super.authorizationAttributeSourceAdvisor(securityManager);}
4a1426790c477d0c9f1f08127d67d644e39539d5ceb094661c47323855a6a733
authenticationStrategy
protected AuthenticationStrategy authenticationStrategy()
{    return super.authenticationStrategy();}
9b929f66f01943438cc7bf706fa76fcb2fcd0405393c12ae3724b49f2a0d2207
authenticator
protected Authenticator authenticator()
{    return super.authenticator();}
0955506bf3361f1bfb86fdcf8629cb56e7e8b4950182b769b929aed35cf11a6e
authorizer
protected Authorizer authorizer()
{    return super.authorizer();}
cd337bd6520bbc56a5b1952d891dc263e875762e81ed4e44efd988c5064f911e
subjectDAO
protected SubjectDAO subjectDAO()
{    return super.subjectDAO();}
200f4bee9ddc71f495d642a5ae10e0d55721ed4a3cea639d9f843455331bff0b
sessionStorageEvaluator
protected SessionStorageEvaluator sessionStorageEvaluator()
{    return super.sessionStorageEvaluator();}
0389f987fc0ee14af9e65b1533d9ae3639316a5b34dcd80dc728d77dd3ec17ad
subjectFactory
protected SubjectFactory subjectFactory()
{    return super.subjectFactory();}
a51907b5823f2cbd3913553872f9d2e3586a239575b47dc985146a995fe5bda6
sessionFactory
protected SessionFactory sessionFactory()
{    return super.sessionFactory();}
c760a28914967721059a4e0a425a5de4f737cbb3407828ee233c835d6913a908
sessionDAO
protected SessionDAO sessionDAO()
{    return super.sessionDAO();}
a2329cf7aa482e2cac54d5a9f35cb1b9bda67081035e9210a3bfaa37307c0c0b
sessionManager
protected SessionManager sessionManager()
{    return super.sessionManager();}
c134362343bd3eb1fa7566762355fd2659faf2800fe9571fa48562b37ba3c334
securityManager
protected SessionsSecurityManager securityManager(List<Realm> realms)
{    return super.securityManager(realms);}
f508ffed73b619d5147a2783bddaf6e6f3071e309fc8d1fdd83700163e186a70
iniClasspathRealm
protected Realm iniClasspathRealm()
{    return iniRealmFromLocation("classpath:shiro.ini");}
2edcd8f554397e4750cf7338d49f8b565412f8ce68570df9dac692cde89a7425
iniMetaInfClasspathRealm
protected Realm iniMetaInfClasspathRealm()
{    return iniRealmFromLocation("classpath:META-INF/shiro.ini");}
7b879aef8ca3ef0d196edba0aeba7e04667a5acf386a93b8321a297ee4f151bb
missingRealm
protected Realm missingRealm()
{    throw new NoRealmBeanConfiguredException();}
52508239d4822bfde98406e86f3d146649f071eb3b73c0ac26f65ca2899659c0
lifecycleBeanPostProcessor
public LifecycleBeanPostProcessor lifecycleBeanPostProcessor()
{    return super.lifecycleBeanPostProcessor();}
221d19cc0959de505eaffe39d7509d2766b90cd425ddbdce5ba02651c11006c7
eventBus
protected EventBus eventBus()
{    return super.eventBus();}
e007f85b1ae9e243c1c0e7be075e63ce8fd989a617bc6bfb8d3196bcf3fdf5ba
shiroEventBusAwareBeanPostProcessor
public ShiroEventBusBeanPostProcessor shiroEventBusAwareBeanPostProcessor()
{    return super.shiroEventBusAwareBeanPostProcessor();}
801a87ff2a319a241d2e886c0b9e09503a2b1e4ba5d2c09d6fdc6f4f49ad696b
analyze
protected FailureAnalysis analyze(Throwable rootFailure, NoRealmBeanConfiguredException cause)
{    return new FailureAnalysis("No bean of type 'org.apache.shiro.realm.Realm' found.", "Please create bean of type 'Realm' or add a shiro.ini in the root classpath (src/main/resources/shiro.ini) or in the META-INF folder (src/main/resources/META-INF/shiro.ini).", cause);}
3116ea2053d9de960ec3753eb07f3d243c370662aa1f0175ad357057c9ce5a52
main
public static void main(String[] args)
{    SpringApplication.run(ShiroAutoConfigurationTestApplication.class, args);}
61dfaa2d76587fcc54d56224bb48fa6f2f4c883f1ede95fa955780f91a8f4e3c
getTextConfigurationRealm
 Realm getTextConfigurationRealm()
{    TextConfigurationRealm realm = new TextConfigurationRealm();    realm.setUserDefinitions("joe.coder=password,user\n" + "jill.coder=password,admin");    realm.setRoleDefinitions("admin=read,write\n" + "user=read");    realm.setCachingEnabled(true);    return realm;}
1d59b1f4cad781379e7be295816a0d4a0ece6cc03576b4a723bc2aea1778cce9
eventBusAwareObject
 EventBusAwareObject eventBusAwareObject()
{    return new EventBusAwareObject();}
9ea2f0d9dcd1366dffc26fd2ee1bc19d2ae96d8751adcedc6538ac8d4e097145
subscribedListener
 SubscribedListener subscribedListener()
{    return new SubscribedListener();}
1cef0cb85d834c28622cd9911ee0dc14d1a81f5390daafa46cd97bc017a51e63
setEventBus
public void setEventBus(EventBus bus)
{    this.eventBus = bus;}
95c6edb20d2e27c54ce89be7d7ade6a5b9cdb9fa2cb451762c3c7ebed3f31e01
getEventBus
public EventBus getEventBus()
{    return eventBus;}
5a3315edea4c31074e9e6223a7f61a769731b06bf658baa3a05564b7db0fd717
onEvent
public void onEvent(Object object)
{}
4a1426790c477d0c9f1f08127d67d644e39539d5ceb094661c47323855a6a733
authenticationStrategy
protected AuthenticationStrategy authenticationStrategy()
{    return super.authenticationStrategy();}
9b929f66f01943438cc7bf706fa76fcb2fcd0405393c12ae3724b49f2a0d2207
authenticator
protected Authenticator authenticator()
{    return super.authenticator();}
0955506bf3361f1bfb86fdcf8629cb56e7e8b4950182b769b929aed35cf11a6e
authorizer
protected Authorizer authorizer()
{    return super.authorizer();}
cd337bd6520bbc56a5b1952d891dc263e875762e81ed4e44efd988c5064f911e
subjectDAO
protected SubjectDAO subjectDAO()
{    return super.subjectDAO();}
200f4bee9ddc71f495d642a5ae10e0d55721ed4a3cea639d9f843455331bff0b
sessionStorageEvaluator
protected SessionStorageEvaluator sessionStorageEvaluator()
{    return super.sessionStorageEvaluator();}
0389f987fc0ee14af9e65b1533d9ae3639316a5b34dcd80dc728d77dd3ec17ad
subjectFactory
protected SubjectFactory subjectFactory()
{    return super.subjectFactory();}
a51907b5823f2cbd3913553872f9d2e3586a239575b47dc985146a995fe5bda6
sessionFactory
protected SessionFactory sessionFactory()
{    return super.sessionFactory();}
c760a28914967721059a4e0a425a5de4f737cbb3407828ee233c835d6913a908
sessionDAO
protected SessionDAO sessionDAO()
{    return super.sessionDAO();}
a2329cf7aa482e2cac54d5a9f35cb1b9bda67081035e9210a3bfaa37307c0c0b
sessionManager
protected SessionManager sessionManager()
{    return super.sessionManager();}
c134362343bd3eb1fa7566762355fd2659faf2800fe9571fa48562b37ba3c334
securityManager
protected SessionsSecurityManager securityManager(List<Realm> realms)
{    return super.securityManager(realms);}
3a7f854c5430c44c043e20338a68b065f987d589078c3fc0c08e4bca72c8ad58
sessionCookieTemplate
protected Cookie sessionCookieTemplate()
{    return super.sessionCookieTemplate();}
0161628ba61353944174c0aa98d8e671ffd4937372643ae4980176858100515e
rememberMeManager
protected RememberMeManager rememberMeManager()
{    return super.rememberMeManager();}
e394717beec6692e2f7c3f43cbd908f25a14a074745e922870d285817cc2432e
rememberMeCookieTemplate
protected Cookie rememberMeCookieTemplate()
{    return super.rememberMeCookieTemplate();}
b8c097f592dfa9f3a77c84578ae93a55bd286b500d5de1c3f78223d3913feed0
shiroFilterChainDefinition
protected ShiroFilterChainDefinition shiroFilterChainDefinition()
{    return super.shiroFilterChainDefinition();}
d3e7a4dfcbfafa6c21ab0005062204a40c5453a6dd4972845bf8000dc9be48b0
shiroFilterFactoryBean
protected ShiroFilterFactoryBean shiroFilterFactoryBean()
{    return super.shiroFilterFactoryBean();}
26bb226b2da18987a7bdaed480d1a4a71e595516fff5a4713c833a10058b8821
filterShiroFilterRegistrationBean
protected FilterRegistrationBean filterShiroFilterRegistrationBean() throws Exception
{    FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean();    filterRegistrationBean.setDispatcherTypes(DispatcherType.REQUEST, DispatcherType.FORWARD, DispatcherType.INCLUDE, DispatcherType.ERROR);    filterRegistrationBean.setFilter((AbstractShiroFilter) shiroFilterFactoryBean().getObject());    filterRegistrationBean.setOrder(1);    return filterRegistrationBean;}
3116ea2053d9de960ec3753eb07f3d243c370662aa1f0175ad357057c9ce5a52
main
public static void main(String[] args)
{    SpringApplication.run(ShiroWebAutoConfigurationTestApplication.class, args);}
61dfaa2d76587fcc54d56224bb48fa6f2f4c883f1ede95fa955780f91a8f4e3c
getTextConfigurationRealm
 Realm getTextConfigurationRealm()
{    TextConfigurationRealm realm = new TextConfigurationRealm();    realm.setUserDefinitions("joe.coder=password,user\n" + "jill.coder=password,admin");    realm.setRoleDefinitions("admin=read,write\n" + "user=read");    realm.setCachingEnabled(true);    return realm;}
a834b479d82b3fc4ce5966a9cb16edd8880eb6ce5b6c829f2c4d6de020d03b50
shiroFilterChainDefinition
 ShiroFilterChainDefinition shiroFilterChainDefinition()
{    return new DefaultShiroFilterChainDefinition();}
1d59b1f4cad781379e7be295816a0d4a0ece6cc03576b4a723bc2aea1778cce9
eventBusAwareObject
 EventBusAwareObject eventBusAwareObject()
{    return new EventBusAwareObject();}
9ea2f0d9dcd1366dffc26fd2ee1bc19d2ae96d8751adcedc6538ac8d4e097145
subscribedListener
 SubscribedListener subscribedListener()
{    return new SubscribedListener();}
1cef0cb85d834c28622cd9911ee0dc14d1a81f5390daafa46cd97bc017a51e63
setEventBus
public void setEventBus(EventBus bus)
{    this.eventBus = bus;}
95c6edb20d2e27c54ce89be7d7ade6a5b9cdb9fa2cb451762c3c7ebed3f31e01
getEventBus
public EventBus getEventBus()
{    return eventBus;}
5a3315edea4c31074e9e6223a7f61a769731b06bf658baa3a05564b7db0fd717
onEvent
public void onEvent(Object object)
{}
3116ea2053d9de960ec3753eb07f3d243c370662aa1f0175ad357057c9ce5a52
main
public static void main(String[] args)
{    CommandLineParser parser = new DefaultParser();    Options options = new Options();    options.addOption(HELP).addOption(DEBUG).addOption(ALGORITHM).addOption(ITERATIONS);    options.addOption(RESOURCE).addOption(PASSWORD).addOption(PASSWORD_NC);    options.addOption(SALT).addOption(SALT_BYTES).addOption(SALT_GEN).addOption(SALT_GEN_SIZE).addOption(NO_SALT_GEN);    options.addOption(PRIVATE_SALT).addOption(PRIVATE_SALT_BYTES);    options.addOption(FORMAT);    boolean debug = false;        String algorithm = null;        int iterations = 0;    boolean resource = false;    boolean password = false;    boolean passwordConfirm = true;    String saltString = null;    String saltBytesString = null;    boolean generateSalt = false;    int generatedSaltSize = DEFAULT_GENERATED_SALT_SIZE;    String privateSaltString = null;    String privateSaltBytesString = null;    String formatString = null;    char[] passwordChars = null;    try {        CommandLine line = parser.parse(options, args);        if (line.hasOption(HELP.getOpt())) {            printHelpAndExit(options, null, debug, 0);        }        if (line.hasOption(DEBUG.getOpt())) {            debug = true;        }        if (line.hasOption(ALGORITHM.getOpt())) {            algorithm = line.getOptionValue(ALGORITHM.getOpt());        }        if (line.hasOption(ITERATIONS.getOpt())) {            iterations = getRequiredPositiveInt(line, ITERATIONS);        }        if (line.hasOption(PASSWORD.getOpt())) {            password = true;            generateSalt = true;        }        if (line.hasOption(RESOURCE.getOpt())) {            resource = true;        }        if (line.hasOption(PASSWORD_NC.getOpt())) {            password = true;            generateSalt = true;            passwordConfirm = false;        }        if (line.hasOption(SALT.getOpt())) {            saltString = line.getOptionValue(SALT.getOpt());        }        if (line.hasOption(SALT_BYTES.getOpt())) {            saltBytesString = line.getOptionValue(SALT_BYTES.getOpt());        }        if (line.hasOption(NO_SALT_GEN.getOpt())) {            generateSalt = false;        }        if (line.hasOption(SALT_GEN.getOpt())) {            generateSalt = true;        }        if (line.hasOption(SALT_GEN_SIZE.getOpt())) {            generateSalt = true;            generatedSaltSize = getRequiredPositiveInt(line, SALT_GEN_SIZE);            if (generatedSaltSize % 8 != 0) {                throw new IllegalArgumentException("Generated salt size must be a multiple of 8 (e.g. 128, 192, 256, 512, etc).");            }        }        if (line.hasOption(PRIVATE_SALT.getOpt())) {            privateSaltString = line.getOptionValue(PRIVATE_SALT.getOpt());        }        if (line.hasOption(PRIVATE_SALT_BYTES.getOpt())) {            privateSaltBytesString = line.getOptionValue(PRIVATE_SALT_BYTES.getOpt());        }        if (line.hasOption(FORMAT.getOpt())) {            formatString = line.getOptionValue(FORMAT.getOpt());        }        String sourceValue;        Object source;        if (password) {            passwordChars = readPassword(passwordConfirm);            source = passwordChars;        } else {            String[] remainingArgs = line.getArgs();            if (remainingArgs == null || remainingArgs.length != 1) {                printHelpAndExit(options, null, debug, -1);            }            assert remainingArgs != null;            sourceValue = toString(remainingArgs);            if (resource) {                if (!ResourceUtils.hasResourcePrefix(sourceValue)) {                    source = toFile(sourceValue);                } else {                    source = ResourceUtils.getInputStreamForPath(sourceValue);                }            } else {                source = sourceValue;            }        }        if (algorithm == null) {            if (password) {                algorithm = DEFAULT_PASSWORD_ALGORITHM_NAME;            } else {                algorithm = DEFAULT_ALGORITHM_NAME;            }        }        if (iterations < DEFAULT_NUM_ITERATIONS) {                        if (password) {                iterations = DEFAULT_PASSWORD_NUM_ITERATIONS;            } else {                iterations = DEFAULT_NUM_ITERATIONS;            }        }        ByteSource publicSalt = getSalt(saltString, saltBytesString, generateSalt, generatedSaltSize);        ByteSource privateSalt = getSalt(privateSaltString, privateSaltBytesString, false, generatedSaltSize);        HashRequest hashRequest = new SimpleHashRequest(algorithm, ByteSource.Util.bytes(source), publicSalt, iterations);        DefaultHashService hashService = new DefaultHashService();        hashService.setPrivateSalt(privateSalt);        Hash hash = hashService.computeHash(hashRequest);        if (formatString == null) {                        if (password) {                formatString = Shiro1CryptFormat.class.getName();            } else {                formatString = HexFormat.class.getName();            }        }        HashFormat format = HASH_FORMAT_FACTORY.getInstance(formatString);        if (format == null) {            throw new IllegalArgumentException("Unrecognized hash format '" + formatString + "'.");        }        String output = format.format(hash);        System.out.println(output);    } catch (IllegalArgumentException iae) {        exit(iae, debug);    } catch (UnknownAlgorithmException uae) {        exit(uae, debug);    } catch (IOException ioe) {        exit(ioe, debug);    } catch (Exception e) {        printHelpAndExit(options, e, debug, -1);    } finally {        if (passwordChars != null && passwordChars.length > 0) {            for (int i = 0; i < passwordChars.length; i++) {                passwordChars[i] = ' ';            }        }    }}
9780d6c7fd514d3ad766ecedb7d68765d8c95fc0fe7d7064a5e231f3a8c83e4e
createMutexMessage
private static String createMutexMessage(Option... options)
{    StringBuilder sb = new StringBuilder();    sb.append("The ");    for (int i = 0; i < options.length; i++) {        if (i > 0) {            sb.append(", ");        }        Option o = options[0];        sb.append("-").append(o.getOpt()).append("/--").append(o.getLongOpt());    }    sb.append(" and generated salt options are mutually exclusive.  Only one of them may be used at a time");    return sb.toString();}
609b9cf222811aea90a09bad05e40f551468b858a76b389f8809805953b797d7
exit
private static void exit(Exception e, boolean debug)
{    printException(e, debug);    System.exit(-1);}
18ae975dbddc76ff6935ac7e62419d63bd98ca343aa9c47908ac18f4580d6bec
getRequiredPositiveInt
private static int getRequiredPositiveInt(CommandLine line, Option option)
{    String iterVal = line.getOptionValue(option.getOpt());    try {        return Integer.parseInt(iterVal);    } catch (NumberFormatException e) {        String msg = "'" + option.getLongOpt() + "' value must be a positive integer.";        throw new IllegalArgumentException(msg, e);    }}
39a9e93819f18ad3a06144ec4e67e2f2d923b9af10a8d833568a028a71a23c79
getSalt
private static ByteSource getSalt(String saltString, String saltBytesString, boolean generateSalt, int generatedSaltSize)
{    if (saltString != null) {        if (generateSalt || (saltBytesString != null)) {            throw new IllegalArgumentException(SALT_MUTEX_MSG);        }        return ByteSource.Util.bytes(saltString);    }    if (saltBytesString != null) {        if (generateSalt) {            throw new IllegalArgumentException(SALT_MUTEX_MSG);        }        String value = saltBytesString;        boolean base64 = true;        if (saltBytesString.startsWith(HEX_PREFIX)) {                        base64 = false;            value = value.substring(HEX_PREFIX.length());        }        byte[] bytes;        if (base64) {            bytes = Base64.decode(value);        } else {            bytes = Hex.decode(value);        }        return ByteSource.Util.bytes(bytes);    }    if (generateSalt) {        SecureRandomNumberGenerator generator = new SecureRandomNumberGenerator();                int byteSize = generatedSaltSize / 8;        return generator.nextBytes(byteSize);    }        return null;}
2216fefe69c39e065fcc1bad111a4a61bb8e66a3a592585445010c477833e42f
printException
private static void printException(Exception e, boolean debug)
{    if (e != null) {        System.out.println();        if (debug) {            System.out.println("Error: ");            e.printStackTrace(System.out);            System.out.println(e.getMessage());        } else {            System.out.println("Error: " + e.getMessage());            System.out.println();            System.out.println("Specify -d or --debug for more information.");        }    }}
0ca27f85d7326ddbbc7e23df794ddd5d1d54dd4e104a22c3afd8583a7e942fd3
printHelp
private static void printHelp(Options options, Exception e, boolean debug)
{    HelpFormatter help = new HelpFormatter();    String command = "java -jar shiro-tools-hasher-<version>.jar [options] [<value>]";    String header = "\nPrint a cryptographic hash (aka message digest) of the specified <value>.\n--\nOptions:";    String footer = "\n" + "<value> is optional only when hashing passwords (see below).  It is\n" + "required all other times." + "\n\n" + "Password Hashing:\n" + "---------------------------------\n" + "Specify the -p/--password option and DO NOT enter a <value>.  You will\n" + "be prompted for a password and characters will not echo as you type." + "\n\n" + "Salting:\n" + "---------------------------------\n" + "Specifying a salt:" + "\n\n" + "You may specify a salt using the -s/--salt option followed by the salt\n" + "value.  If the salt value is a base64 or hex string representing a\n" + "byte array, you must specify the -sb/--saltbytes option to indicate this,\n" + "otherwise the text value bytes will be used directly." + "\n\n" + "When using -sb/--saltbytes, the -s/--salt value is expected to be a\n" + "base64-encoded string by default.  If the value is a hex-encoded string,\n" + "you must prefix the string with 0x (zero x) to indicate a hex value." + "\n\n" + "Generating a salt:" + "\n\n" + "Use the -gs/--gensalt option if you don't want to specify a salt,\n" + "but want a strong random salt to be generated and used during hashing.\n" + "The generated salt size defaults to 128 bits.  You may specify\n" + "a different size by using the -gss/--gensaltsize option followed by\n" + "a positive integer (size is in bits, not bytes)." + "\n\n" + "Because a salt must be specified if computing the hash later,\n" + "generated salts are only useful with the shiro1 output format;\n" + "the other formats do not include the generated salt." + "\n\n" + "Specifying a private salt:" + "\n\n" + "You may specify a private salt using the -ps/--privatesalt option followed\n" + "by the private salt value.  If the private salt value is a base64 or hex \n" + "string representing a byte array, you must specify the -psb/--privatesaltbytes\n" + "option to indicate this, otherwise the text value bytes will be used directly." + "\n\n" + "When using -psb/--privatesaltbytes, the -ps/--privatesalt value is expected to\n" + "be a base64-encoded string by default.  If the value is a hex-encoded string,\n" + "you must prefix the string with 0x (zero x) to indicate a hex value." + "\n\n" + "Files, URLs and classpath resources:\n" + "---------------------------------\n" + "If using the -r/--resource option, the <value> represents a resource path.\n" + "By default this is expected to be a file path, but you may specify\n" + "classpath or URL resources by using the classpath: or url: prefix\n" + "respectively." + "\n\n" + "Some examples:" + "\n\n" + "<command> -r fileInCurrentDirectory.txt\n" + "<command> -r ../../relativePathFile.xml\n" + "<command> -r ~/documents/myfile.pdf\n" + "<command> -r /usr/local/logs/absolutePathFile.log\n" + "<command> -r url:http://foo.com/page.html\n" + "<command> -r classpath:/WEB-INF/lib/something.jar" + "\n\n" + "Output Format:\n" + "---------------------------------\n" + "Specify the -f/--format option followed by either 1) the format ID (as defined\n" + "by the " + DefaultHashFormatFactory.class.getName() + "\n" + "JavaDoc) or 2) the fully qualified " + HashFormat.class.getName() + "\n" + "implementation class name to instantiate and use for formatting.\n\n" + "The default output format is 'shiro1' which is a Modular Crypt Format (MCF)\n" + "that shows all relevant information as a dollar-sign ($) delimited string.\n" + "This format is ideal for use in Shiro's text-based user configuration (e.g.\n" + "shiro.ini or a properties file).";    printException(e, debug);    System.out.println();    help.printHelp(command, header, options, null);    System.out.println(footer);}
3728450fdeb453c572b3efe5aa638a42407d6ec24952584eca7b9aff5bc75ea4
printHelpAndExit
private static void printHelpAndExit(Options options, Exception e, boolean debug, int exitCode)
{    printHelp(options, e, debug);    System.exit(exitCode);}
9b48829c6c628f67a1c2853a5ffad755f72a189d393a4d71fdc10e29c428fcca
readPassword
private static char[] readPassword(boolean confirm)
{    java.io.Console console = System.console();    if (console == null) {        throw new IllegalStateException("java.io.Console is not available on the current JVM.  Cannot read passwords.");    }    char[] first = console.readPassword("%s", "Password to hash: ");    if (first == null || first.length == 0) {        throw new IllegalArgumentException("No password specified.");    }    if (confirm) {        char[] second = console.readPassword("%s", "Password to hash (confirm): ");        if (!Arrays.equals(first, second)) {            String msg = "Password entries do not match.";            throw new IllegalArgumentException(msg);        }    }    return first;}
235e5ddcc0f84402841125618a85afb67ece19a9befe70a1961fa5a8ef4ec7d8
toFile
private static File toFile(String path)
{    String resolved = path;    if (path.startsWith("~/") || path.startsWith(("~\\"))) {        resolved = path.replaceFirst("\\~", System.getProperty("user.home"));    }    return new File(resolved);}
8a90088709c1d4d929dacf2b9ed3a5335846ece3ce3329f441b1398da17aa271
toString
private static String toString(String[] strings)
{    int len = strings != null ? strings.length : 0;    if (len == 0) {        return null;    }    return StringUtils.toDelimitedString(strings, " ");}
09a006e639d1a7e60589e2ef74ea0b0d63d1c2cc1e725f551fb1df57c59bf246
getFilterConfig
public FilterConfig getFilterConfig()
{    return filterConfig;}
ffbff3a2e298981c8312db0d0093117df969a61d2580231af9e01ad15b01095e
setFilterConfig
public void setFilterConfig(FilterConfig filterConfig)
{    this.filterConfig = filterConfig;}
5944a54427975a83193661cf170ce124299428d7807169f8f1236ccb99f41e13
createInstance
protected FilterChainResolver createInstance(Ini ini)
{    FilterChainResolver filterChainResolver = createDefaultInstance();    if (filterChainResolver instanceof PathMatchingFilterChainResolver) {        PathMatchingFilterChainResolver resolver = (PathMatchingFilterChainResolver) filterChainResolver;        FilterChainManager manager = resolver.getFilterChainManager();        buildChains(manager, ini);    }    return filterChainResolver;}
a8f5e040b9d22bef53efedc50bf84ce46b504aabe768670b4ecbf68c1c36c3c3
createDefaultInstance
protected FilterChainResolver createDefaultInstance()
{    FilterConfig filterConfig = getFilterConfig();    if (filterConfig != null) {        return new PathMatchingFilterChainResolver(filterConfig);    } else {        return new PathMatchingFilterChainResolver();    }}
1a69a48662e1d58c89ab6deb81b63a2b7b2cf8b9d206f7fb0c299b35ac4aba19
buildChains
protected void buildChains(FilterChainManager manager, Ini ini)
{        Ini.Section section = ini.getSection(FILTERS);    if (!CollectionUtils.isEmpty(section)) {        String msg = "The [{}] section has been deprecated and will be removed in a future release!  Please " + "move all object configuration (filters and all other objects) to the [{}] section.";        log.warn(msg, FILTERS, IniSecurityManagerFactory.MAIN_SECTION_NAME);    }    Map<String, Object> defaults = new LinkedHashMap<String, Object>();    Map<String, Filter> defaultFilters = manager.getFilters();        if (!CollectionUtils.isEmpty(defaultFilters)) {        defaults.putAll(defaultFilters);    }            Map<String, ?> defaultBeans = getDefaults();    if (!CollectionUtils.isEmpty(defaultBeans)) {        defaults.putAll(defaultBeans);    }    Map<String, Filter> filters = getFilters(section, defaults);        registerFilters(filters, manager);        section = ini.getSection(URLS);    createChains(section, manager);}
f80f8746aad81e39ab0da60dd3d7e036c32528363aa890e9e426c5d3078ae845
registerFilters
protected void registerFilters(Map<String, Filter> filters, FilterChainManager manager)
{    if (!CollectionUtils.isEmpty(filters)) {                boolean init = getFilterConfig() != null;        for (Map.Entry<String, Filter> entry : filters.entrySet()) {            String name = entry.getKey();            Filter filter = entry.getValue();            manager.addFilter(name, filter, init);        }    }}
b915b310e639021c50be37e2790943eafa035cf7cea1636699bc09858798c041
getFilters
protected Map<String, Filter> getFilters(Map<String, String> section, Map<String, ?> defaults)
{    Map<String, Filter> filters = extractFilters(defaults);    if (!CollectionUtils.isEmpty(section)) {        ReflectionBuilder builder = new ReflectionBuilder(defaults);        Map<String, ?> built = builder.buildObjects(section);        Map<String, Filter> sectionFilters = extractFilters(built);        if (CollectionUtils.isEmpty(filters)) {            filters = sectionFilters;        } else {            if (!CollectionUtils.isEmpty(sectionFilters)) {                filters.putAll(sectionFilters);            }        }    }    return filters;}
d1e8b87c48849c4f2b813687a6d6ac4947e6ef58b2a0dbd08f89c5b4c9ec096f
extractFilters
private Map<String, Filter> extractFilters(Map<String, ?> objects)
{    if (CollectionUtils.isEmpty(objects)) {        return null;    }    Map<String, Filter> filterMap = new LinkedHashMap<String, Filter>();    for (Map.Entry<String, ?> entry : objects.entrySet()) {        String key = entry.getKey();        Object value = entry.getValue();        if (value instanceof Filter) {            filterMap.put(key, (Filter) value);        }    }    return filterMap;}
6a59997966b7726ae7b60a279777677db53081cb6751bc0b040896708cbacfa6
createChains
protected void createChains(Map<String, String> urls, FilterChainManager manager)
{    if (CollectionUtils.isEmpty(urls)) {        if (log.isDebugEnabled()) {            log.debug("No urls to process.");        }        return;    }    if (log.isTraceEnabled()) {        log.trace("Before url processing.");    }    for (Map.Entry<String, String> entry : urls.entrySet()) {        String path = entry.getKey();        String value = entry.getValue();        manager.createChain(path, value);    }}
7a0468473f9f64ecde9362e16e5dda02a9ab62c848684dcd22a139f87335f226
createDefaultInstance
protected SecurityManager createDefaultInstance()
{    return new DefaultWebSecurityManager();}
d600bf3cedbf6a5f45d33ba682658ab9e8194dee0aa7f937597281183ec6a972
createDefaults
protected Map<String, ?> createDefaults(Ini ini, Ini.Section mainSection)
{    Map defaults = super.createDefaults(ini, mainSection);        Map<String, Filter> defaultFilters = DefaultFilter.createInstanceMap(null);    defaults.putAll(defaultFilters);    return defaults;}
cf0db2f8e8ba0741baf805a8bc52b5f3592249ba61dc0b9a89961f5f54ffb5da
getFilterChainResolver
public FilterChainResolver getFilterChainResolver()
{    return getObject(DEFAULT_FILTER_CHAIN_RESOLVER_NAME, FilterChainResolver.class);}
0d3d4021f9c34493c76b6c6bbf78fe7d3ef7c14013aa85325f6391712f76795c
setFilterChainResolver
public void setFilterChainResolver(FilterChainResolver filterChainResolver)
{    setObject(DEFAULT_FILTER_CHAIN_RESOLVER_NAME, filterChainResolver);}
f7418ddcc892d2b96023c6b23db68d37108c92ead3e1cd118f6e8635d4c6d3b0
getSecurityManager
public SecurityManager getSecurityManager() throws IllegalStateException
{    return getWebSecurityManager();}
c11e39b3138902654fbfe242e943963b5e160471a127c735c0e7e1bf5c67886e
setSecurityManager
public void setSecurityManager(SecurityManager securityManager)
{    assertWebSecurityManager(securityManager);    super.setSecurityManager(securityManager);}
68d00d368c33d9504c762c7d755f515ad006daeb25df366e5f942714f8c46702
getWebSecurityManager
public WebSecurityManager getWebSecurityManager()
{    SecurityManager sm = super.getSecurityManager();    assertWebSecurityManager(sm);    return (WebSecurityManager) sm;}
d9d354caac2b45c5c9dc16c641d5064e2422f178a5672d528445c7f1d33f82a0
setWebSecurityManager
public void setWebSecurityManager(WebSecurityManager wsm)
{    super.setSecurityManager(wsm);}
0cfdd10272c7089e7b64220ff7cf41a0ba04b4e03103dcec6307714245acb7d7
assertWebSecurityManager
private void assertWebSecurityManager(SecurityManager sm)
{    if (!(sm instanceof WebSecurityManager)) {        String msg = "SecurityManager instance must be a " + WebSecurityManager.class.getName() + " instance.";        throw new IllegalStateException(msg);    }}
080e6dfeffad4589787f1a6fda9a213672aea9ede479cb0719278c34fafc3319
getServletContext
public ServletContext getServletContext()
{    return this.servletContext;}
562bd85cf2a48714ec9fbde8cd32d90b9ae5a5f78fdf6a7fe7860b1b1128ad0d
setServletContext
public void setServletContext(ServletContext servletContext)
{    this.servletContext = servletContext;}
f7b76c6c550be88366109c97d8c828480dd67ed13cca4533b6639b48fad60ccc
initEnvironment
public WebEnvironment initEnvironment(ServletContext servletContext) throws IllegalStateException
{    if (servletContext.getAttribute(ENVIRONMENT_ATTRIBUTE_KEY) != null) {        String msg = "There is already a Shiro environment associated with the current ServletContext.  " + "Check if you have multiple EnvironmentLoader* definitions in your web.xml!";        throw new IllegalStateException(msg);    }    servletContext.log("Initializing Shiro environment");    log.info("Starting Shiro environment initialization.");    long startTime = System.currentTimeMillis();    try {        WebEnvironment environment = createEnvironment(servletContext);        servletContext.setAttribute(ENVIRONMENT_ATTRIBUTE_KEY, environment);        log.debug("Published WebEnvironment as ServletContext attribute with name [{}]", ENVIRONMENT_ATTRIBUTE_KEY);        if (log.isInfoEnabled()) {            long elapsed = System.currentTimeMillis() - startTime;            log.info("Shiro environment initialized in {} ms.", elapsed);        }        return environment;    } catch (RuntimeException ex) {        log.error("Shiro environment initialization failed", ex);        servletContext.setAttribute(ENVIRONMENT_ATTRIBUTE_KEY, ex);        throw ex;    } catch (Error err) {        log.error("Shiro environment initialization failed", err);        servletContext.setAttribute(ENVIRONMENT_ATTRIBUTE_KEY, err);        throw err;    }}
ea3351bf14041bebdd0e6297d7a9c8ed04d7195b8fdf0c5b99f0fc0e1a127c7b
determineWebEnvironmentClass
protected Class<?> determineWebEnvironmentClass(ServletContext servletContext)
{    Class<? extends WebEnvironment> webEnvironmentClass = webEnvironmentClassFromServletContext(servletContext);    if (webEnvironmentClass != null) {        return webEnvironmentClass;    } else {        return getDefaultWebEnvironmentClass();    }}
10af1ea08c37bbce53777540d09b9f57080542668c490fa531d6d2a2b6dc95f4
webEnvironmentClassFromServletContext
private Class<? extends WebEnvironment> webEnvironmentClassFromServletContext(ServletContext servletContext)
{    Class<? extends WebEnvironment> webEnvironmentClass = null;    String className = servletContext.getInitParameter(ENVIRONMENT_CLASS_PARAM);    if (className != null) {        try {            webEnvironmentClass = ClassUtils.forName(className);        } catch (UnknownClassException ex) {            throw new ConfigurationException("Failed to load custom WebEnvironment class [" + className + "]", ex);        }    }    return webEnvironmentClass;}
1a10f98649ad1fcac25e8228f812d7cf8586fee6e78017eb3cdcfc27698a84b6
webEnvironmentFromServiceLoader
private WebEnvironment webEnvironmentFromServiceLoader()
{    WebEnvironment webEnvironment = null;        ServiceLoader<WebEnvironment> serviceLoader = ServiceLoader.load(WebEnvironment.class);    Iterator<WebEnvironment> iterator = serviceLoader.iterator();        if (iterator.hasNext()) {        webEnvironment = iterator.next();    }        if (iterator.hasNext()) {        List<String> allWebEnvironments = new ArrayList<String>();        allWebEnvironments.add(webEnvironment.getClass().getName());        while (iterator.hasNext()) {            allWebEnvironments.add(iterator.next().getClass().getName());        }        throw new ConfigurationException("ServiceLoader for class [" + WebEnvironment.class + "] returned more then one " + "result.  ServiceLoader must return zero or exactly one result for this class. Select one using the " + "servlet init parameter '" + ENVIRONMENT_CLASS_PARAM + "'. Found: " + allWebEnvironments);    }    return webEnvironment;}
b0f5c339b2b2c9d2dd2001331ae411c3bc4793e484a6f361a4f5d20a21f57aa6
getDefaultWebEnvironmentClass
protected Class<? extends WebEnvironment> getDefaultWebEnvironmentClass()
{    return IniWebEnvironment.class;}
0ddd52052a698c67c9387dc22b3a3b8fb91f104ef155eec46a1a45a2039ab56b
determineWebEnvironment
protected WebEnvironment determineWebEnvironment(ServletContext servletContext)
{    Class<? extends WebEnvironment> webEnvironmentClass = webEnvironmentClassFromServletContext(servletContext);    WebEnvironment webEnvironment = null;        if (webEnvironmentClass == null) {        webEnvironment = webEnvironmentFromServiceLoader();    }        if (webEnvironmentClass == null && webEnvironment == null) {        webEnvironmentClass = getDefaultWebEnvironmentClass();    }        if (webEnvironmentClass != null) {        webEnvironment = (WebEnvironment) ClassUtils.newInstance(webEnvironmentClass);    }    return webEnvironment;}
21d3928f8be6d600efef0590091d3387bdc75e154a4d90e282d61853d46d01d1
createEnvironment
protected WebEnvironment createEnvironment(ServletContext sc)
{    WebEnvironment webEnvironment = determineWebEnvironment(sc);    if (!MutableWebEnvironment.class.isInstance(webEnvironment)) {        throw new ConfigurationException("Custom WebEnvironment class [" + webEnvironment.getClass().getName() + "] is not of required type [" + MutableWebEnvironment.class.getName() + "]");    }    String configLocations = sc.getInitParameter(CONFIG_LOCATIONS_PARAM);    boolean configSpecified = StringUtils.hasText(configLocations);    if (configSpecified && !(ResourceConfigurable.class.isInstance(webEnvironment))) {        String msg = "WebEnvironment class [" + webEnvironment.getClass().getName() + "] does not implement the " + ResourceConfigurable.class.getName() + "interface.  This is required to accept any " + "configured " + CONFIG_LOCATIONS_PARAM + "value(s).";        throw new ConfigurationException(msg);    }    MutableWebEnvironment environment = (MutableWebEnvironment) webEnvironment;    environment.setServletContext(sc);    if (configSpecified && (environment instanceof ResourceConfigurable)) {        ((ResourceConfigurable) environment).setConfigLocations(configLocations);    }    customizeEnvironment(environment);    LifecycleUtils.init(environment);    return environment;}
3d9b555d6aaed1352bfca2b73f4049866c9f8518aceeb8406b0207af37aa17d8
customizeEnvironment
protected void customizeEnvironment(WebEnvironment environment)
{}
d14b0801d99a3e20d39d1fc596af70806d4749c36a399ce6551e4c4f3e57f172
destroyEnvironment
public void destroyEnvironment(ServletContext servletContext)
{    servletContext.log("Cleaning up Shiro Environment");    try {        Object environment = servletContext.getAttribute(ENVIRONMENT_ATTRIBUTE_KEY);        if (environment instanceof WebEnvironment) {            finalizeEnvironment((WebEnvironment) environment);        }        LifecycleUtils.destroy(environment);    } finally {        servletContext.removeAttribute(ENVIRONMENT_ATTRIBUTE_KEY);    }}
df1b0d29a8eea80dab4b8ba82f2ab23d0aa145fbd197473b84daed78db08c138
finalizeEnvironment
protected void finalizeEnvironment(WebEnvironment environment)
{}
a6b2633f688587d2672f001fbfaa9cc1890d0b3c0f9ebb606b67856f56d19f07
contextInitialized
public void contextInitialized(ServletContextEvent sce)
{    initEnvironment(sce.getServletContext());}
6739fd785e45e62a9fe14644f974abc0bc47d23d23e6009231d0a54a81f4e144
contextDestroyed
public void contextDestroyed(ServletContextEvent sce)
{    destroyEnvironment(sce.getServletContext());}
b2d7f0e8ddf1c02514ed19a5257c1cadcd6107187b0b8ba4b341193a7d69dfea
init
public void init()
{    setIni(parseConfig());    configure();}
08f764b7853a8f09467c2f850220c5f628358fda18b45de6c3e7e8100ecceffc
parseConfig
protected Ini parseConfig()
{    Ini ini = getIni();    String[] configLocations = getConfigLocations();    if (log.isWarnEnabled() && !CollectionUtils.isEmpty(ini) && configLocations != null && configLocations.length > 0) {        log.warn("Explicit INI instance has been provided, but configuration locations have also been " + "specified.  The {} implementation does not currently support multiple Ini config, but this may " + "be supported in the future. Only the INI instance will be used for configuration.", IniWebEnvironment.class.getName());    }    if (CollectionUtils.isEmpty(ini)) {        log.debug("Checking any specified config locations.");        ini = getSpecifiedIni(configLocations);    }    if (CollectionUtils.isEmpty(ini)) {        log.debug("No INI instance or config locations specified.  Trying default config locations.");        ini = getDefaultIni();    }            ini = mergeIni(getFrameworkIni(), ini);    if (CollectionUtils.isEmpty(ini)) {        String msg = "Shiro INI configuration was either not found or discovered to be empty/unconfigured.";        throw new ConfigurationException(msg);    }    return ini;}
e3f3888bce5cf21b1820845ce277d3e72af79375bd35bb93929649159ac47dbe
configure
protected void configure()
{    this.objects.clear();    WebSecurityManager securityManager = createWebSecurityManager();    setWebSecurityManager(securityManager);    FilterChainResolver resolver = createFilterChainResolver();    if (resolver != null) {        setFilterChainResolver(resolver);    }}
0d62820f5ca03d3a07bbfb55684369e9306fa433c9609e08e71aad1b4532fa74
getFrameworkIni
protected Ini getFrameworkIni()
{    return null;}
b14d1b2cd52c14b336a67022c08d140a7c2039864994336373499d994f4cfa0e
getSpecifiedIni
protected Ini getSpecifiedIni(String[] configLocations) throws ConfigurationException
{    Ini ini = null;    if (configLocations != null && configLocations.length > 0) {        if (configLocations.length > 1) {            log.warn("More than one Shiro .ini config location has been specified.  Only the first will be " + "used for configuration as the {} implementation does not currently support multiple " + "files.  This may be supported in the future however.", IniWebEnvironment.class.getName());        }                ini = createIni(configLocations[0], true);    }    return ini;}
3698a87b8dc06874b4d549e7c67d2bd5b2ecef467823f813be584e24532b8ce6
mergeIni
protected Ini mergeIni(Ini ini1, Ini ini2)
{    if (ini1 == null) {        return ini2;    }    if (ini2 == null) {        return ini1;    }        Ini iniResult = new Ini(ini1);    iniResult.merge(ini2);    return iniResult;}
0597f66eaa02e790c14b7005deca57ad78fc365c2c0dbbadfb5339b63a0bcc46
getDefaultIni
protected Ini getDefaultIni()
{    Ini ini = null;    String[] configLocations = getDefaultConfigLocations();    if (configLocations != null) {        for (String location : configLocations) {            ini = createIni(location, false);            if (!CollectionUtils.isEmpty(ini)) {                log.debug("Discovered non-empty INI configuration at location '{}'.  Using for configuration.", location);                break;            }        }    }    return ini;}
67721055b61d63b2c4f2fe88b327b088de20e4911790c7a1dce76071eee174d8
createIni
protected Ini createIni(String configLocation, boolean required) throws ConfigurationException
{    Ini ini = null;    if (configLocation != null) {        ini = convertPathToIni(configLocation, required);    }    if (required && CollectionUtils.isEmpty(ini)) {        String msg = "Required configuration location '" + configLocation + "' does not exist or did not " + "contain any INI configuration.";        throw new ConfigurationException(msg);    }    return ini;}
09d0713b9f72b0229a690340c410ec890c7bb6d3807969a956a3e93cc425b586
createFilterChainResolver
protected FilterChainResolver createFilterChainResolver()
{    FilterChainResolver resolver = null;    Ini ini = getIni();    if (!CollectionUtils.isEmpty(ini)) {                Ini.Section urls = ini.getSection(IniFilterChainResolverFactory.URLS);        Ini.Section filters = ini.getSection(IniFilterChainResolverFactory.FILTERS);        if (!CollectionUtils.isEmpty(urls) || !CollectionUtils.isEmpty(filters)) {                        Factory<FilterChainResolver> factory = (Factory<FilterChainResolver>) this.objects.get(FILTER_CHAIN_RESOLVER_NAME);            if (factory instanceof IniFactorySupport) {                IniFactorySupport iniFactory = (IniFactorySupport) factory;                iniFactory.setIni(ini);                iniFactory.setDefaults(this.objects);            }            resolver = factory.getInstance();        }    }    return resolver;}
7f872dfe91609e51b91b20d6116f3bb88fd4f886475e15e70a8cfe429ccb629a
createWebSecurityManager
protected WebSecurityManager createWebSecurityManager()
{    Ini ini = getIni();    if (!CollectionUtils.isEmpty(ini)) {        factory.setIni(ini);    }    Map<String, Object> defaults = getDefaults();    if (!CollectionUtils.isEmpty(defaults)) {        factory.setDefaults(defaults);    }    WebSecurityManager wsm = (WebSecurityManager) factory.getInstance();            Map<String, ?> beans = factory.getBeans();    if (!CollectionUtils.isEmpty(beans)) {        this.objects.putAll(beans);    }    return wsm;}
fbbb6fcb378b3ad1f12c315d8a4c8d26ff3f982d0b2578bdca8f62e117ae4d5b
getDefaultConfigLocations
protected String[] getDefaultConfigLocations()
{    return new String[] { DEFAULT_WEB_INI_RESOURCE_PATH, IniFactorySupport.DEFAULT_INI_RESOURCE_PATH };}
7b2a4df8bd2d0cdcccf2eb65f3ef522e0352a982acbaff71b18b7fd3a625199b
convertPathToIni
private Ini convertPathToIni(String path, boolean required)
{        Ini ini = null;    if (StringUtils.hasText(path)) {        InputStream is = null;                if (!ResourceUtils.hasResourcePrefix(path)) {            is = getServletContextResourceStream(path);        } else {            try {                is = ResourceUtils.getInputStreamForPath(path);            } catch (IOException e) {                if (required) {                    throw new ConfigurationException(e);                } else {                    if (log.isDebugEnabled()) {                        log.debug("Unable to load optional path '" + path + "'.", e);                    }                }            }        }        if (is != null) {            ini = new Ini();            ini.load(is);        } else {            if (required) {                throw new ConfigurationException("Unable to load resource path '" + path + "'");            }        }    }    return ini;}
3d30e0c2ba50ae80144db2525551818c3eff9b0e4bb4dbb08e8bc88c82dbc51f
getServletContextResourceStream
private InputStream getServletContextResourceStream(String path)
{    InputStream is = null;    path = WebUtils.normalize(path);    ServletContext sc = getServletContext();    if (sc != null) {        is = sc.getResourceAsStream(path);    }    return is;}
d742d5adfc4a66ed703f889ff5b15820397f6bc1ab534832eaccd42f24661391
getIni
public Ini getIni()
{    return this.ini;}
28d8efeba0b79f62443ec365b195cea5d2caf0d43970a32b51a379bc09a2337a
setIni
public void setIni(Ini ini)
{    this.ini = ini;}
43bc2ca7ddac439d9371ea5bd92cfe382f1da292480f7eadd2854f95eec4def3
getDefaults
protected Map<String, Object> getDefaults()
{    Map<String, Object> defaults = new HashMap<String, Object>();    defaults.put(FILTER_CHAIN_RESOLVER_NAME, new IniFilterChainResolverFactory());    return defaults;}
3fd1b01daf46813b25f6a5981aa1e57294309e673fc4fac9ef0cd37dfa1d136e
getSecurityManagerFactory
protected WebIniSecurityManagerFactory getSecurityManagerFactory()
{    return factory;}
caebced5c4055a6182cf70d8e9e3d2acb4e7c7cfcdd6a39496e1ebf0100bbc9c
setSecurityManagerFactory
protected void setSecurityManagerFactory(WebIniSecurityManagerFactory factory)
{    this.factory = factory;}
a2fb1148b1c1ddf778ab23d3c640c15280710ce363873da0dd6e0960c6818fa4
getConfigLocations
public String[] getConfigLocations()
{    return configLocations;}
e24e6dc56defae073e2448f96d4c4b6e1dda1e8daa0253902c0e269ede71543e
setConfigLocations
public void setConfigLocations(String locations)
{    if (!StringUtils.hasText(locations)) {        throw new IllegalArgumentException("Null/empty locations argument not allowed.");    }    String[] arr = StringUtils.split(locations);    setConfigLocations(arr);}
dbe911d041e980904690ae5b1be971818169a3efe387daf4e60140ed2e4a690d
setConfigLocations
public void setConfigLocations(String[] configLocations)
{    this.configLocations = configLocations;}
cb0891b38e24fc37882bf570cfeff6bc166c3e5807343721685dec0e20913579
getLoginUrl
public String getLoginUrl()
{    return loginUrl;}
9053c363f73f1d7d13987e641b2f9b819cca91794470f42f477dfbb48b49782c
setLoginUrl
public void setLoginUrl(String loginUrl)
{    this.loginUrl = loginUrl;}
00c3bdaacbca946628b719001d9981005f61c2e3712ab7cae1e062d9449e24fa
getSubject
protected Subject getSubject(ServletRequest request, ServletResponse response)
{    return SecurityUtils.getSubject();}
abcf570eaa2e7b5d69e56cf6e8d7089be5507d3d9a518951e406f010be9fa912
onAccessDenied
protected boolean onAccessDenied(ServletRequest request, ServletResponse response, Object mappedValue) throws Exception
{    return onAccessDenied(request, response);}
54f59b253331622459ab30a8c4e7eccfac2a4a018d21c3d4a9873e08c63985f7
onPreHandle
public boolean onPreHandle(ServletRequest request, ServletResponse response, Object mappedValue) throws Exception
{    return isAccessAllowed(request, response, mappedValue) || onAccessDenied(request, response, mappedValue);}
92713227746c4aae136c9e66b1128134e2c635845249ab8cb56f566385adbbbf
isLoginRequest
protected boolean isLoginRequest(ServletRequest request, ServletResponse response)
{    return pathsMatch(getLoginUrl(), request);}
b8cf61c2bbc4612e1d030207e66e16756fe51a2e9834dc9533b14762bb209ce6
saveRequestAndRedirectToLogin
protected void saveRequestAndRedirectToLogin(ServletRequest request, ServletResponse response) throws IOException
{    saveRequest(request);    redirectToLogin(request, response);}
ca0e6b6319bd6d14fc13fba04d452fcbf17040a46b2b5de9c3ec763f31a08539
saveRequest
protected void saveRequest(ServletRequest request)
{    WebUtils.saveRequest(request);}
c00c848c1f29000c6eb57b8163ef80f5fd9e4e270c80bbb65f1b4c7e036a0f42
redirectToLogin
protected void redirectToLogin(ServletRequest request, ServletResponse response) throws IOException
{    String loginUrl = getLoginUrl();    WebUtils.issueRedirect(request, response, loginUrl);}
20ca9b366625811c20b404a8a78f4b93a1dd2c01f640ac8e8ae1e8d1b8522d4e
onPreHandle
protected boolean onPreHandle(ServletRequest request, ServletResponse response, Object mappedValue)
{        return true;}
540eaa27849966dbcb99959327bcb3bfb9c988c939b647279b76ce1c6d6876f0
executeLogin
protected boolean executeLogin(ServletRequest request, ServletResponse response) throws Exception
{    AuthenticationToken token = createToken(request, response);    if (token == null) {        String msg = "createToken method implementation returned null. A valid non-null AuthenticationToken " + "must be created in order to execute a login attempt.";        throw new IllegalStateException(msg);    }    try {        Subject subject = getSubject(request, response);        subject.login(token);        return onLoginSuccess(token, subject, request, response);    } catch (AuthenticationException e) {        return onLoginFailure(token, e, request, response);    }}
01c9bd0e960850c0bc791b372e65ad9834ca33c6d21055bad982a20a8839139d
createToken
protected AuthenticationToken createToken(String username, String password, ServletRequest request, ServletResponse response)
{    boolean rememberMe = isRememberMe(request);    String host = getHost(request);    return createToken(username, password, rememberMe, host);}
70bd6563d36a562ec3febe83d0824b0437ddb25736ada2fb3b9fd1792dfbc9fd
createToken
protected AuthenticationToken createToken(String username, String password, boolean rememberMe, String host)
{    return new UsernamePasswordToken(username, password, rememberMe, host);}
254f5a919a751900cc60b81c694f07232e1ba93fae41d31678fd1c17c42d0a12
onLoginSuccess
protected boolean onLoginSuccess(AuthenticationToken token, Subject subject, ServletRequest request, ServletResponse response) throws Exception
{    return true;}
464c23d40c53989f69c9416c9fb62f7e440c974863c1cb883061538c267981a9
onLoginFailure
protected boolean onLoginFailure(AuthenticationToken token, AuthenticationException e, ServletRequest request, ServletResponse response)
{    return false;}
c00998a90936421c28701f884d5a8e61a4cbc54242618f8dc7ba4107b1ff19c8
getHost
protected String getHost(ServletRequest request)
{    return request.getRemoteHost();}
15f51e5bd6bc7b94b046763a60640391d93a0c573fa94daa3227d5a5020bbd15
isRememberMe
protected boolean isRememberMe(ServletRequest request)
{    return false;}
d87094a57fca8bbe1d42dc024b708d8796debf2fa4bdd1d89ab75f9cb2a79c0d
isAccessAllowed
protected boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue)
{    return super.isAccessAllowed(request, response, mappedValue) || (!isLoginRequest(request, response) && isPermissive(mappedValue));}
8d804626aad7d2174f4c35a1c3eea292a6f588b1104e9705bc0f0916acf59cf1
isPermissive
protected boolean isPermissive(Object mappedValue)
{    if (mappedValue != null) {        String[] values = (String[]) mappedValue;        return Arrays.binarySearch(values, PERMISSIVE) >= 0;    }    return false;}
2784eee5e32a91074f6545639ddf36992c0d9530a1489c7dd8f035dcd973ded8
cleanup
protected void cleanup(ServletRequest request, ServletResponse response, Exception existing) throws ServletException, IOException
{    if (existing instanceof UnauthenticatedException || (existing instanceof ServletException && existing.getCause() instanceof UnauthenticatedException)) {        try {            onAccessDenied(request, response);            existing = null;        } catch (Exception e) {            existing = e;        }    }    super.cleanup(request, response, existing);}
dfe0bc8c44b5d1a775738777802d6db4ba2ac20a2e2d6af542282b014e087c07
getSuccessUrl
public String getSuccessUrl()
{    return successUrl;}
a8fcc73deecc3343131a4baf3ebffbd85a24256bb25a7402766ad7c9b9b5860d
setSuccessUrl
public void setSuccessUrl(String successUrl)
{    this.successUrl = successUrl;}
d87094a57fca8bbe1d42dc024b708d8796debf2fa4bdd1d89ab75f9cb2a79c0d
isAccessAllowed
protected boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue)
{    Subject subject = getSubject(request, response);    return subject.isAuthenticated() && subject.getPrincipal() != null;}
064bad443435b66182a6abbfe79dd55e21e1060192df8308043d2babf3d53df2
issueSuccessRedirect
protected void issueSuccessRedirect(ServletRequest request, ServletResponse response) throws Exception
{    WebUtils.redirectToSavedRequest(request, response, getSuccessUrl());}
042a4355659d03512cb394da6a658fca7ca08b5cf1bf19a31cac0dc352831a60
createToken
protected AuthenticationToken createToken(ServletRequest request, ServletResponse response)
{    String authorizationHeader = getAuthzHeader(request);    if (authorizationHeader == null || authorizationHeader.length() == 0) {                return createToken("", "", request, response);    }    log.debug("Attempting to execute login with auth header");    String[] prinCred = getPrincipalsAndCredentials(authorizationHeader, request);    if (prinCred == null || prinCred.length < 2) {                        String username = prinCred == null || prinCred.length == 0 ? "" : prinCred[0];        return createToken(username, "", request, response);    }    String username = prinCred[0];    String password = prinCred[1];    return createToken(username, password, request, response);}
81160f4a50d8c5c4c1d6f7f5f58c87a6d0d99e477962676f11a8b157aed950a7
getPrincipalsAndCredentials
protected String[] getPrincipalsAndCredentials(String scheme, String encoded)
{    String decoded = Base64.decodeToString(encoded);    return decoded.split(":", 2);}
042a4355659d03512cb394da6a658fca7ca08b5cf1bf19a31cac0dc352831a60
createToken
protected AuthenticationToken createToken(ServletRequest request, ServletResponse response)
{    String authorizationHeader = getAuthzHeader(request);    if (authorizationHeader == null || authorizationHeader.length() == 0) {                return createBearerToken("", request);    }    log.debug("Attempting to execute login with auth header");    String[] prinCred = getPrincipalsAndCredentials(authorizationHeader, request);    if (prinCred == null || prinCred.length < 1) {                return createBearerToken("", request);    }    String token = prinCred[0] != null ? prinCred[0] : "";    return createBearerToken(token, request);}
0d3918fc146cb9645558459a4db121131644060f682c68c3ba45824f04c5655d
getPrincipalsAndCredentials
protected String[] getPrincipalsAndCredentials(String scheme, String token)
{    return new String[] { token };}
79dd9025b0446024b55b7f7dda789a3ede13a5c45a2406ca8c6bad2c61329ec4
createBearerToken
protected AuthenticationToken createBearerToken(String token, ServletRequest request)
{    return new BearerToken(token, request.getRemoteHost());}
9053c363f73f1d7d13987e641b2f9b819cca91794470f42f477dfbb48b49782c
setLoginUrl
public void setLoginUrl(String loginUrl)
{    String previous = getLoginUrl();    if (previous != null) {        this.appliedPaths.remove(previous);    }    super.setLoginUrl(loginUrl);    if (log.isTraceEnabled()) {        log.trace("Adding login url to applied paths.");    }    this.appliedPaths.put(getLoginUrl(), null);}
dcf7f30222067a2761c026cd3a44837cd5a2c5e675f6950313bd6c5561c51c10
getUsernameParam
public String getUsernameParam()
{    return usernameParam;}
755501b0c6a4b009c6a417fbb334da24f9345251b45c0b7d29583739fd82d74d
setUsernameParam
public void setUsernameParam(String usernameParam)
{    this.usernameParam = usernameParam;}
ab44ef2702e028017aa2f028c0c1df639986f6a90d1b86d7f74fc89f714dc79f
getPasswordParam
public String getPasswordParam()
{    return passwordParam;}
4457849c11b97fc6826597a7896df689a2145a9b67a7eeb82d20882dc7e1ecf8
setPasswordParam
public void setPasswordParam(String passwordParam)
{    this.passwordParam = passwordParam;}
7ee19f84c184c172f0b18e56aafd666d608a5a6918ceb106758cb23b225bbe67
getRememberMeParam
public String getRememberMeParam()
{    return rememberMeParam;}
f45c00c130f9e502ef9eee71cf34a4739ba08257f1e85c85fa7052de05b7b3ae
setRememberMeParam
public void setRememberMeParam(String rememberMeParam)
{    this.rememberMeParam = rememberMeParam;}
c56e30cd484bd6cd8712d58a05e42edb1b15d3b1205f4e3519f32ea617dff0ae
getFailureKeyAttribute
public String getFailureKeyAttribute()
{    return failureKeyAttribute;}
d5efaa6b0c4c7a06b7b4a1a2259f80cacb9037e3b322b22f274f7929b0fc1ed0
setFailureKeyAttribute
public void setFailureKeyAttribute(String failureKeyAttribute)
{    this.failureKeyAttribute = failureKeyAttribute;}
04af4160dfe000e02f78fcb6f3a44db6fc4f5a9b300dfce9119e2544f93ecee0
onAccessDenied
protected boolean onAccessDenied(ServletRequest request, ServletResponse response) throws Exception
{    if (isLoginRequest(request, response)) {        if (isLoginSubmission(request, response)) {            if (log.isTraceEnabled()) {                log.trace("Login submission detected.  Attempting to execute login.");            }            return executeLogin(request, response);        } else {            if (log.isTraceEnabled()) {                log.trace("Login page view.");            }                        return true;        }    } else {        if (log.isTraceEnabled()) {            log.trace("Attempting to access a path which requires authentication.  Forwarding to the " + "Authentication url [" + getLoginUrl() + "]");        }        saveRequestAndRedirectToLogin(request, response);        return false;    }}
710abb9298e415327dc98aa7b2ebfe788753cc8cdfb7adb87e241d1e7fc442cb
isLoginSubmission
protected boolean isLoginSubmission(ServletRequest request, ServletResponse response)
{    return (request instanceof HttpServletRequest) && WebUtils.toHttp(request).getMethod().equalsIgnoreCase(POST_METHOD);}
042a4355659d03512cb394da6a658fca7ca08b5cf1bf19a31cac0dc352831a60
createToken
protected AuthenticationToken createToken(ServletRequest request, ServletResponse response)
{    String username = getUsername(request);    String password = getPassword(request);    return createToken(username, password, request, response);}
15f51e5bd6bc7b94b046763a60640391d93a0c573fa94daa3227d5a5020bbd15
isRememberMe
protected boolean isRememberMe(ServletRequest request)
{    return WebUtils.isTrue(request, getRememberMeParam());}
254f5a919a751900cc60b81c694f07232e1ba93fae41d31678fd1c17c42d0a12
onLoginSuccess
protected boolean onLoginSuccess(AuthenticationToken token, Subject subject, ServletRequest request, ServletResponse response) throws Exception
{    issueSuccessRedirect(request, response);        return false;}
464c23d40c53989f69c9416c9fb62f7e440c974863c1cb883061538c267981a9
onLoginFailure
protected boolean onLoginFailure(AuthenticationToken token, AuthenticationException e, ServletRequest request, ServletResponse response)
{    if (log.isDebugEnabled()) {        log.debug("Authentication exception", e);    }    setFailureAttribute(request, e);        return true;}
6aa027eceff79cfd3cd9898d99d8c35833cb95c05c55920b1b4ccf38c9256e51
setFailureAttribute
protected void setFailureAttribute(ServletRequest request, AuthenticationException ae)
{    String className = ae.getClass().getName();    request.setAttribute(getFailureKeyAttribute(), className);}
482ce6fb9cb27d9f16cb2d58686aa23ce084d1ce9623115baba4e7ecdbfbdfbe
getUsername
protected String getUsername(ServletRequest request)
{    return WebUtils.getCleanParam(request, getUsernameParam());}
73a0b2471e91baacf8eea8edc05441886efcda7796b44fb284684cf381065fdf
getPassword
protected String getPassword(ServletRequest request)
{    return WebUtils.getCleanParam(request, getPasswordParam());}
f19c9c39919289c0d0a71424a42d10043f8383f593f4ab96d8a3d11c9535d9f5
getApplicationName
public String getApplicationName()
{    return applicationName;}
a9c7f6c58288db40688afd7055a0888a4b172b25890dc2ee0c82582cad551505
setApplicationName
public void setApplicationName(String applicationName)
{    this.applicationName = applicationName;}
9f8d35bf60781cb7b6ce090991a6e22fadde46e4345bad385ed64c0d17395095
getAuthzScheme
public String getAuthzScheme()
{    return authzScheme;}
7a1bafd6b9d2015b507b5a35eadd395c9ab2d797e2c39cb710e88f0149d7edbc
setAuthzScheme
public void setAuthzScheme(String authzScheme)
{    this.authzScheme = authzScheme;}
2fc03fe8a562bda3b458966e24ff9c4a9df2e3be00716bbb8d6cc40753f2103f
getAuthcScheme
public String getAuthcScheme()
{    return authcScheme;}
0194ad3443b0968e07d22577ff8d2ad1221d58fbb981ff9dd22fd6536e8649a4
setAuthcScheme
public void setAuthcScheme(String authcScheme)
{    this.authcScheme = authcScheme;}
d87094a57fca8bbe1d42dc024b708d8796debf2fa4bdd1d89ab75f9cb2a79c0d
isAccessAllowed
protected boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue)
{    HttpServletRequest httpRequest = WebUtils.toHttp(request);    String httpMethod = httpRequest.getMethod();                Set<String> methods = httpMethodsFromOptions((String[]) mappedValue);    boolean authcRequired = methods.size() == 0;    for (String m : methods) {        if (httpMethod.toUpperCase(Locale.ENGLISH).equals(m)) {                        authcRequired = true;            break;        }    }    if (authcRequired) {        return super.isAccessAllowed(request, response, mappedValue);    } else {        return true;    }}
52d6326eb0697de44f50e6e9533c43a82f70574d4a2c23965def68293432b419
httpMethodsFromOptions
private Set<String> httpMethodsFromOptions(String[] options)
{    Set<String> methods = new HashSet<String>();    if (options != null) {        for (String option : options) {                        if (!option.equalsIgnoreCase(PERMISSIVE)) {                methods.add(option.toUpperCase(Locale.ENGLISH));            }        }    }    return methods;}
04af4160dfe000e02f78fcb6f3a44db6fc4f5a9b300dfce9119e2544f93ecee0
onAccessDenied
protected boolean onAccessDenied(ServletRequest request, ServletResponse response) throws Exception
{        boolean loggedIn = false;    if (isLoginAttempt(request, response)) {        loggedIn = executeLogin(request, response);    }    if (!loggedIn) {        sendChallenge(request, response);    }    return loggedIn;}
70261551bc6bdfabd33f527755a14e3c6a751e7cd840c1d159f02a5f869c283c
isLoginAttempt
protected boolean isLoginAttempt(ServletRequest request, ServletResponse response)
{    String authzHeader = getAuthzHeader(request);    return authzHeader != null && isLoginAttempt(authzHeader);}
8b07f06572eed81b815558fb595d15d1f06febbcd48d222da0ebce5126702af4
isLoginRequest
protected final boolean isLoginRequest(ServletRequest request, ServletResponse response)
{    return this.isLoginAttempt(request, response);}
42289461c66bc165be55f78fce6e4af70ae853f94de8070da899b940b0dcd58c
getAuthzHeader
protected String getAuthzHeader(ServletRequest request)
{    HttpServletRequest httpRequest = WebUtils.toHttp(request);    return httpRequest.getHeader(AUTHORIZATION_HEADER);}
3e1bc3e85c76ca81e04e3dd3182838c7f179f02393a39bb0316de78593b637c8
isLoginAttempt
protected boolean isLoginAttempt(String authzHeader)
{        String authzScheme = getAuthzScheme().toLowerCase(Locale.ENGLISH);    return authzHeader.toLowerCase(Locale.ENGLISH).startsWith(authzScheme);}
60495a6ca5e4fdaf4aa53d6d691133baa1181508d9f7332e409dacc2ce5341dd
sendChallenge
protected boolean sendChallenge(ServletRequest request, ServletResponse response)
{    log.debug("Authentication required: sending 401 Authentication challenge response.");    HttpServletResponse httpResponse = WebUtils.toHttp(response);    httpResponse.setStatus(HttpServletResponse.SC_UNAUTHORIZED);    String authcHeader = getAuthcScheme() + " realm=\"" + getApplicationName() + "\"";    httpResponse.setHeader(AUTHENTICATE_HEADER, authcHeader);    return false;}
042a4355659d03512cb394da6a658fca7ca08b5cf1bf19a31cac0dc352831a60
createToken
protected AuthenticationToken createToken(ServletRequest request, ServletResponse response)
{    String authorizationHeader = getAuthzHeader(request);    if (authorizationHeader == null || authorizationHeader.length() == 0) {                return createToken("", "", request, response);    }    log.debug("Attempting to execute login with auth header");    String[] prinCred = getPrincipalsAndCredentials(authorizationHeader, request);    if (prinCred == null || prinCred.length < 2) {                        String username = prinCred == null || prinCred.length == 0 ? "" : prinCred[0];        return createToken(username, "", request, response);    }    String username = prinCred[0];    String password = prinCred[1];    return createToken(username, password, request, response);}
8a1d498d4df95753f98d84bd82c557a132e10ee68ff5c355546683f40af35a68
getPrincipalsAndCredentials
protected String[] getPrincipalsAndCredentials(String authorizationHeader, ServletRequest request)
{    if (authorizationHeader == null) {        return null;    }    String[] authTokens = authorizationHeader.split(" ");    if (authTokens == null || authTokens.length < 2) {        return null;    }    return getPrincipalsAndCredentials(authTokens[0], authTokens[1]);}
00a552751fab03375f60598cef0c58261a637886b80662b39f5b6efdbe9a609c
preHandle
protected boolean preHandle(ServletRequest request, ServletResponse response) throws Exception
{    Subject subject = getSubject(request, response);        if (isPostOnlyLogout()) {                if (!WebUtils.toHttp(request).getMethod().toUpperCase(Locale.ENGLISH).equals("POST")) {            return onLogoutRequestNotAPost(request, response);        }    }    String redirectUrl = getRedirectUrl(request, response, subject);        try {        subject.logout();    } catch (SessionException ise) {        log.debug("Encountered session exception during logout.  This can generally safely be ignored.", ise);    }    issueRedirect(request, response, redirectUrl);    return false;}
00c3bdaacbca946628b719001d9981005f61c2e3712ab7cae1e062d9449e24fa
getSubject
protected Subject getSubject(ServletRequest request, ServletResponse response)
{    return SecurityUtils.getSubject();}
17a5c713e8d44f1f4bd84e333a462b24907e5c5b7496b44e073a9cf09a736ded
issueRedirect
protected void issueRedirect(ServletRequest request, ServletResponse response, String redirectUrl) throws Exception
{    WebUtils.issueRedirect(request, response, redirectUrl);}
b38edbd7728ddcb78afecee8250a8a9b8719a029c18832f80831f9b77e627e56
getRedirectUrl
protected String getRedirectUrl(ServletRequest request, ServletResponse response, Subject subject)
{    return getRedirectUrl();}
0ccf65eafa3aeee92bd539a4004736d745ae74da949ea31d99572ff1bcc4f7ab
getRedirectUrl
public String getRedirectUrl()
{    return redirectUrl;}
ca55deef23e6b4ce81b6b41c89f557877f7af615bc025653c724d87ecc3633c6
setRedirectUrl
public void setRedirectUrl(String redirectUrl)
{    this.redirectUrl = redirectUrl;}
a19343a5c686d06dfdba5e4685681d28d1c0338f725dae889adb2c4f15c73c79
onLogoutRequestNotAPost
protected boolean onLogoutRequestNotAPost(ServletRequest request, ServletResponse response)
{    HttpServletResponse httpServletResponse = WebUtils.toHttp(response);    httpServletResponse.setStatus(HttpServletResponse.SC_METHOD_NOT_ALLOWED);    httpServletResponse.setHeader("Allow", "POST");    return false;}
4b1fb7e329a71dfe2b5f05c3bdbb221072f08ce238ba6536a4b77c22bafadda1
isPostOnlyLogout
public boolean isPostOnlyLogout()
{    return postOnlyLogout;}
fef1a47c6862ac3a1e0c3ecf689e605fb2af15deb71223ac63ebebb3657b1237
setPostOnlyLogout
public void setPostOnlyLogout(boolean postOnlyLogout)
{    this.postOnlyLogout = postOnlyLogout;}
04af4160dfe000e02f78fcb6f3a44db6fc4f5a9b300dfce9119e2544f93ecee0
onAccessDenied
protected boolean onAccessDenied(ServletRequest request, ServletResponse response) throws Exception
{    if (isLoginRequest(request, response)) {        return true;    } else {        saveRequestAndRedirectToLogin(request, response);        return false;    }}
d87094a57fca8bbe1d42dc024b708d8796debf2fa4bdd1d89ab75f9cb2a79c0d
isAccessAllowed
protected boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue)
{    if (isLoginRequest(request, response)) {        return true;    } else {        Subject subject = getSubject(request, response);                return subject.getPrincipal() != null;    }}
04af4160dfe000e02f78fcb6f3a44db6fc4f5a9b300dfce9119e2544f93ecee0
onAccessDenied
protected boolean onAccessDenied(ServletRequest request, ServletResponse response) throws Exception
{    saveRequestAndRedirectToLogin(request, response);    return false;}
48c6eb8c5e217000af328f573d595f5a9f7a53783217292565161f199407be60
getUnauthorizedUrl
public String getUnauthorizedUrl()
{    return unauthorizedUrl;}
e0d4b692ee7e706f05785f725ac9eb979da8e23a90ca39ec6b683960ef26cc9f
setUnauthorizedUrl
public void setUnauthorizedUrl(String unauthorizedUrl)
{    this.unauthorizedUrl = unauthorizedUrl;}
e154041f7f40f44b2f0228075a9bfb940204b002fdb77702d31f21337e6a2fc6
onAccessDenied
protected boolean onAccessDenied(ServletRequest request, ServletResponse response) throws IOException
{    Subject subject = getSubject(request, response);        if (subject.getPrincipal() == null) {        saveRequestAndRedirectToLogin(request, response);    } else {                        String unauthorizedUrl = getUnauthorizedUrl();                if (StringUtils.hasText(unauthorizedUrl)) {            WebUtils.issueRedirect(request, response, unauthorizedUrl);        } else {            WebUtils.toHttp(response).sendError(HttpServletResponse.SC_UNAUTHORIZED);        }    }    return false;}
d8fc17352052024a137dff3191911eac3f832410dcdf74070a75a6d9e8471428
setAuthorizedHosts
public void setAuthorizedHosts(String authorizedHosts)
{    if (!StringUtils.hasText(authorizedHosts)) {        throw new IllegalArgumentException("authorizedHosts argument cannot be null or empty.");    }    String[] hosts = StringUtils.tokenizeToStringArray(authorizedHosts, ", \t");    for (String host : hosts) {                String periodsReplaced = host.replace(".", "\\.");                String wildcardsReplaced = periodsReplaced.replace("*", IPV4_QUAD_REGEX);        if (IPV4_PATTERN.matcher(wildcardsReplaced).matches()) {            authorizedIps.put(host, wildcardsReplaced);        } else {        }    }}
2374d47656264a3e15bdf3df70e3e66692c8a516ee04d393e3decdfebcb6a644
setDeniedHosts
public void setDeniedHosts(String deniedHosts)
{    if (!StringUtils.hasText(deniedHosts)) {        throw new IllegalArgumentException("deniedHosts argument cannot be null or empty.");    }}
39357eb634f47d54903db81df55eb33338f4eb4192f9ba14a9e76cccf3c20776
isIpv4Candidate
protected boolean isIpv4Candidate(String host)
{    String[] quads = StringUtils.tokenizeToStringArray(host, ".");    if (quads == null || quads.length != 4) {        return false;    }    for (String quad : quads) {        if (!quad.equals("*")) {            try {                Integer.parseInt(quad);            } catch (NumberFormatException nfe) {                return false;            }        }    }    return true;}
cb596ee8dfd560e4fc2448f6ec004be6807ed13a4e33fd32f3eb6508a0f9205c
isAccessAllowed
protected boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue) throws Exception
{    throw new UnsupportedOperationException("Not yet fully implemented!!!");}
98879766a3b803261fcf4a9a3ccb87834d96959173ddc50288a6d1a4a1d02cb0
getAction
public String getAction()
{    return this.action;}
8e36f95aff1f8814299ebff0ee60399aa412622a12cd6372e054f3035a22f860
getHttpMethodActions
protected Map<String, String> getHttpMethodActions()
{    return this.httpMethodActions;}
a0f09790087eb09adbf63a72323cf5b1b1deaf29d43285d0c8fa12e2ec98e15e
getHttpMethodAction
protected String getHttpMethodAction(ServletRequest request)
{    String method = ((HttpServletRequest) request).getMethod();    return getHttpMethodAction(method);}
d82bcfda36538733611b795fd8a4fc2231ba781e0283235d4b607945a517a00d
getHttpMethodAction
protected String getHttpMethodAction(String method)
{    String lc = method.toLowerCase();    String resolved = getHttpMethodActions().get(lc);    return resolved != null ? resolved : method;}
56e104d666843e06de98b1eb3078460c284b8d1b4f17868ed90d0975fe472a10
buildPermissions
protected String[] buildPermissions(HttpServletRequest request, String[] configuredPerms, String action)
{    return buildPermissions(configuredPerms, action);}
11e681036ceaf8b4e2b6c313e25d69a36baf1fc87b0ff9da411e82fb13d5a371
buildPermissions
protected String[] buildPermissions(String[] configuredPerms, String action)
{    if (configuredPerms == null || configuredPerms.length <= 0 || !StringUtils.hasText(action)) {        return configuredPerms;    }    String[] mappedPerms = new String[configuredPerms.length];        for (int i = 0; i < configuredPerms.length; i++) {        mappedPerms[i] = configuredPerms[i] + ":" + action;    }    if (log.isTraceEnabled()) {        StringBuilder sb = new StringBuilder();        for (int i = 0; i < mappedPerms.length; i++) {            if (i > 0) {                sb.append(", ");            }            sb.append(mappedPerms[i]);        }        log.trace("MAPPED '{}' action to permission(s) '{}'", action, sb);    }    return mappedPerms;}
e1927bbbcbc091c71ee108e39733bcf91e951b022fffd803706100c3278d3f8d
isAccessAllowed
public boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue) throws IOException
{    String[] perms = (String[]) mappedValue;        String action = getHttpMethodAction(request);    String[] resolvedPerms = buildPermissions(perms, action);    return super.isAccessAllowed(request, response, resolvedPerms);}
e1927bbbcbc091c71ee108e39733bcf91e951b022fffd803706100c3278d3f8d
isAccessAllowed
public boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue) throws IOException
{    Subject subject = getSubject(request, response);    String[] perms = (String[]) mappedValue;    boolean isPermitted = true;    if (perms != null && perms.length > 0) {        if (perms.length == 1) {            if (!subject.isPermitted(perms[0])) {                isPermitted = false;            }        } else {            if (!subject.isPermittedAll(perms)) {                isPermitted = false;            }        }    }    return isPermitted;}
eedb587f68470407e820d49bf6bb9be573d78555382d32a0743e8fea8ced15d6
getPort
public int getPort()
{    return port;}
978b4a4182d7d5f4402fdef1f86d8511d09d2d1f97abd85ee89933c68ea32c5f
setPort
public void setPort(int port)
{    this.port = port;}
10232dc5da312ed4c8c35533824233a92bd48bfad288ac6aff7a1de798fd49c6
toPort
protected int toPort(Object mappedValue)
{    String[] ports = (String[]) mappedValue;    if (ports == null || ports.length == 0) {        return getPort();    }    if (ports.length > 1) {        throw new ConfigurationException("PortFilter can only be configured with a single port.  You have " + "configured " + ports.length + ": " + StringUtils.toString(ports));    }    return Integer.parseInt(ports[0]);}
cb596ee8dfd560e4fc2448f6ec004be6807ed13a4e33fd32f3eb6508a0f9205c
isAccessAllowed
protected boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue) throws Exception
{    int requiredPort = toPort(mappedValue);    int requestPort = request.getServerPort();    return requiredPort == requestPort;}
62d992b316a4f8c0a90f69d38b43e0827766f39a5245d1a16132ef6b0d7b5207
getScheme
protected String getScheme(String requestScheme, int port)
{    if (port == DEFAULT_HTTP_PORT) {        return HTTP_SCHEME;    } else if (port == SslFilter.DEFAULT_HTTPS_PORT) {        return SslFilter.HTTPS_SCHEME;    } else {        return requestScheme;    }}
3802f00cc7a594bff7e4147270e6c3841d54fffe1cfa40688588fa2b41362f30
onAccessDenied
protected boolean onAccessDenied(ServletRequest request, ServletResponse response, Object mappedValue) throws IOException
{        int port = toPort(mappedValue);    String scheme = getScheme(request.getScheme(), port);    StringBuilder sb = new StringBuilder();    sb.append(scheme).append("://");    sb.append(request.getServerName());    if (port != DEFAULT_HTTP_PORT && port != SslFilter.DEFAULT_HTTPS_PORT) {        sb.append(":");        sb.append(port);    }    if (request instanceof HttpServletRequest) {        sb.append(WebUtils.toHttp(request).getRequestURI());        String query = WebUtils.toHttp(request).getQueryString();        if (query != null) {            sb.append("?").append(query);        }    }    WebUtils.issueRedirect(request, response, sb.toString());    return false;}
e1927bbbcbc091c71ee108e39733bcf91e951b022fffd803706100c3278d3f8d
isAccessAllowed
public boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue) throws IOException
{    Subject subject = getSubject(request, response);    String[] rolesArray = (String[]) mappedValue;    if (rolesArray == null || rolesArray.length == 0) {                return true;    }    Set<String> roles = CollectionUtils.asSet(rolesArray);    return subject.hasAllRoles(roles);}
62d992b316a4f8c0a90f69d38b43e0827766f39a5245d1a16132ef6b0d7b5207
getScheme
protected String getScheme(String requestScheme, int port)
{    if (port == DEFAULT_HTTP_PORT) {        return PortFilter.HTTP_SCHEME;    } else {        return HTTPS_SCHEME;    }}
cb596ee8dfd560e4fc2448f6ec004be6807ed13a4e33fd32f3eb6508a0f9205c
isAccessAllowed
protected boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue) throws Exception
{    return super.isAccessAllowed(request, response, mappedValue) && request.isSecure();}
710d58adc8fe6c77638284bafe7339074a7df2da5e73527789915e4ce4321c17
newInstance
public Filter newInstance()
{    return (Filter) ClassUtils.newInstance(this.filterClass);}
fca99e1519314574b5242e83efe87db6af62240a3021d561e0eef1fd54ac4573
getFilterClass
public Class<? extends Filter> getFilterClass()
{    return this.filterClass;}
637eac05a12bd7b06ad6328354cca4ac75f1728a306c09f9a859a49296b6bf79
createInstanceMap
public static Map<String, Filter> createInstanceMap(FilterConfig config)
{    Map<String, Filter> filters = new LinkedHashMap<String, Filter>(values().length);    for (DefaultFilter defaultFilter : values()) {        Filter filter = defaultFilter.newInstance();        if (config != null) {            try {                filter.init(config);            } catch (ServletException e) {                String msg = "Unable to correctly init default filter instance of type " + filter.getClass().getName();                throw new IllegalStateException(msg, e);            }        }        filters.put(defaultFilter.name(), filter);    }    return filters;}
09a006e639d1a7e60589e2ef74ea0b0d63d1c2cc1e725f551fb1df57c59bf246
getFilterConfig
public FilterConfig getFilterConfig()
{    return filterConfig;}
ffbff3a2e298981c8312db0d0093117df969a61d2580231af9e01ad15b01095e
setFilterConfig
public void setFilterConfig(FilterConfig filterConfig)
{    this.filterConfig = filterConfig;}
f0da0505a643e8f347db848380ac3a8a54e11cf7b80ba0fe331120484601c364
getFilters
public Map<String, Filter> getFilters()
{    return filters;}
c3d46a62b9829ffdaa40cba9534841156f3425d6f24d3cdee0d48d7cbf7e3d6d
setFilters
public void setFilters(Map<String, Filter> filters)
{    this.filters = filters;}
ca4ca2fb0e442f0ced8d9f7262315f350cc1be8df597d9b539561adbbcb32ad1
getFilterChains
public Map<String, NamedFilterList> getFilterChains()
{    return filterChains;}
ae1910acf13b0d44c7b2eb90784c9b839a9eeba360df51cdc800adc371fb1411
setFilterChains
public void setFilterChains(Map<String, NamedFilterList> filterChains)
{    this.filterChains = filterChains;}
8fdd132369ea53daae83601bafeb447d359ef2e5f4b2a9b54b7c7959e217822c
getFilter
public Filter getFilter(String name)
{    return this.filters.get(name);}
d34db056429361e5c442fee9360c7235533128b92c7a8a60a093d06c2383f8e8
addFilter
public void addFilter(String name, Filter filter)
{    addFilter(name, filter, false);}
cc51cb91b99977e8500f7cd405892033626b094a6ff5979da7a3af65aa724b3d
addFilter
public void addFilter(String name, Filter filter, boolean init)
{    addFilter(name, filter, init, true);}
5f58e3fc2354784c29088b368e770516c124c528371d4f640af9a4e4b8bb4a15
createChain
public void createChain(String chainName, String chainDefinition)
{    if (!StringUtils.hasText(chainName)) {        throw new NullPointerException("chainName cannot be null or empty.");    }    if (!StringUtils.hasText(chainDefinition)) {        throw new NullPointerException("chainDefinition cannot be null or empty.");    }    if (log.isDebugEnabled()) {        log.debug("Creating chain [" + chainName + "] from String definition [" + chainDefinition + "]");    }                                            String[] filterTokens = splitChainDefinition(chainDefinition);        for (String token : filterTokens) {        String[] nameConfigPair = toNameConfigPair(token);                addToChain(chainName, nameConfigPair[0], nameConfigPair[1]);    }}
d323c44a8c996c3b4feb7dc47f39688dc6163f104cc5d6da566c3b60559f5426
splitChainDefinition
protected String[] splitChainDefinition(String chainDefinition)
{    return StringUtils.split(chainDefinition, StringUtils.DEFAULT_DELIMITER_CHAR, '[', ']', true, true);}
523cbdcafa809f319b104c231835ae369027dded937451f275f62c52e3aadd6b
toNameConfigPair
protected String[] toNameConfigPair(String token) throws ConfigurationException
{    try {        String[] pair = token.split("\\[", 2);        String name = StringUtils.clean(pair[0]);        if (name == null) {            throw new IllegalArgumentException("Filter name not found for filter chain definition token: " + token);        }        String config = null;        if (pair.length == 2) {            config = StringUtils.clean(pair[1]);                        config = config.substring(0, config.length() - 1);            config = StringUtils.clean(config);                        if (config != null && config.startsWith("\"") && config.endsWith("\"")) {                String stripped = config.substring(1, config.length() - 1);                stripped = StringUtils.clean(stripped);                                if (stripped != null && stripped.indexOf('"') == -1) {                    config = stripped;                }                                                            }        }        return new String[] { name, config };    } catch (Exception e) {        String msg = "Unable to parse filter chain definition token: " + token;        throw new ConfigurationException(msg, e);    }}
f7ec2ceddd26540acb72d7c96b01d3adf580d4daace8bfdf60313e13a2567112
addFilter
protected void addFilter(String name, Filter filter, boolean init, boolean overwrite)
{    Filter existing = getFilter(name);    if (existing == null || overwrite) {        if (filter instanceof Nameable) {            ((Nameable) filter).setName(name);        }        if (init) {            initFilter(filter);        }        this.filters.put(name, filter);    }}
2c3d5937aaafee269ca82ade93272db87f066359707bd0fd3011cebf58c2b2c7
addToChain
public void addToChain(String chainName, String filterName)
{    addToChain(chainName, filterName, null);}
3ed319443bd8ea977790f5a7906746631fdf527aa576f3b3e25291e4e894d06d
addToChain
public void addToChain(String chainName, String filterName, String chainSpecificFilterConfig)
{    if (!StringUtils.hasText(chainName)) {        throw new IllegalArgumentException("chainName cannot be null or empty.");    }    Filter filter = getFilter(filterName);    if (filter == null) {        throw new IllegalArgumentException("There is no filter with name '" + filterName + "' to apply to chain [" + chainName + "] in the pool of available Filters.  Ensure a " + "filter with that name/path has first been registered with the addFilter method(s).");    }    applyChainConfig(chainName, filter, chainSpecificFilterConfig);    NamedFilterList chain = ensureChain(chainName);    chain.add(filter);}
e709bd98f1c3abeb65efb6420a79f556271c2c7ed3730217e13776628600e9ea
applyChainConfig
protected void applyChainConfig(String chainName, Filter filter, String chainSpecificFilterConfig)
{    if (log.isDebugEnabled()) {        log.debug("Attempting to apply path [" + chainName + "] to filter [" + filter + "] " + "with config [" + chainSpecificFilterConfig + "]");    }    if (filter instanceof PathConfigProcessor) {        ((PathConfigProcessor) filter).processPathConfig(chainName, chainSpecificFilterConfig);    } else {        if (StringUtils.hasText(chainSpecificFilterConfig)) {                                    String msg = "chainSpecificFilterConfig was specified, but the underlying " + "Filter instance is not an 'instanceof' " + PathConfigProcessor.class.getName() + ".  This is required if the filter is to accept " + "chain-specific configuration.";            throw new ConfigurationException(msg);        }    }}
ac0cfad65ce512327f7235c8a35fe7253f5482a6557becaebbb4133ab455446c
ensureChain
protected NamedFilterList ensureChain(String chainName)
{    NamedFilterList chain = getChain(chainName);    if (chain == null) {        chain = new SimpleNamedFilterList(chainName);        this.filterChains.put(chainName, chain);    }    return chain;}
dfd8b7905912dc8000661c136beca86121985c352513e8357f341073b210419a
getChain
public NamedFilterList getChain(String chainName)
{    return this.filterChains.get(chainName);}
06faf61dc0229e26b6d806153a4891f188eea3d71236926c9bb8a523be8dbf45
hasChains
public boolean hasChains()
{    return !CollectionUtils.isEmpty(this.filterChains);}
4f8df4df0ad8515e8474b3370e24a7018bf7324ff8cb6816645221504a1d9323
getChainNames
public Set<String> getChainNames()
{        return this.filterChains != null ? this.filterChains.keySet() : Collections.EMPTY_SET;}
33a12336ca7daac382cde7dca071bf6cb438efd3768491273994dc7aadca1ebc
proxy
public FilterChain proxy(FilterChain original, String chainName)
{    NamedFilterList configured = getChain(chainName);    if (configured == null) {        String msg = "There is no configured chain under the name/key [" + chainName + "].";        throw new IllegalArgumentException(msg);    }    return configured.proxy(original);}
1a5a360f3b5c12de9917f9277ed4eea8bef8300d96000ec1fc8feb1395a5dc07
initFilter
protected void initFilter(Filter filter)
{    FilterConfig filterConfig = getFilterConfig();    if (filterConfig == null) {        throw new IllegalStateException("FilterConfig attribute has not been set.  This must occur before filter " + "initialization can occur.");    }    try {        filter.init(filterConfig);    } catch (ServletException e) {        throw new ConfigurationException(e);    }}
7848f9f233b3c8663be0127ad34eda8eba2668fb57b9810c7e6d7080ada532e7
addDefaultFilters
protected void addDefaultFilters(boolean init)
{    for (DefaultFilter defaultFilter : DefaultFilter.values()) {        addFilter(defaultFilter.name(), defaultFilter.newInstance(), init, false);    }}
fb6b3dfb896a0a7e4f5d60ab67c8a49a141dd296813af435431edceb352c27d5
getPathMatcher
public PatternMatcher getPathMatcher()
{    return pathMatcher;}
ae58fdd43f1ad5b187b2c659c6b022e8399bb5e1dca37da7003a129a9b5ad2d4
setPathMatcher
public void setPathMatcher(PatternMatcher pathMatcher)
{    this.pathMatcher = pathMatcher;}
2105e732ec8084d6f53f36471be3489cf54d7408ff2f18aef50224666ad58c35
getFilterChainManager
public FilterChainManager getFilterChainManager()
{    return filterChainManager;}
4e528e8fba1b8f15fcd8c4b96e9769183f7268f59a885f1801911035cb9c96bc
setFilterChainManager
public void setFilterChainManager(FilterChainManager filterChainManager)
{    this.filterChainManager = filterChainManager;}
b5f3b3f758a05a3882dbc21de3d2c222b89e510ae06b6213cc025328f8a92fcb
getChain
public FilterChain getChain(ServletRequest request, ServletResponse response, FilterChain originalChain)
{    FilterChainManager filterChainManager = getFilterChainManager();    if (!filterChainManager.hasChains()) {        return null;    }    String requestURI = getPathWithinApplication(request);        for (String pathPattern : filterChainManager.getChainNames()) {                if (pathMatches(pathPattern, requestURI)) {            if (log.isTraceEnabled()) {                log.trace("Matched path pattern [" + pathPattern + "] for requestURI [" + requestURI + "].  " + "Utilizing corresponding filter chain...");            }            return filterChainManager.proxy(originalChain, pathPattern);        }    }    return null;}
b4e97449ad91f5c1c7dbeadf6662864b06dd73d6421e806009c4979a668ce053
pathMatches
protected boolean pathMatches(String pattern, String path)
{    PatternMatcher pathMatcher = getPathMatcher();    return pathMatcher.matches(pattern, path);}
1c99b09fa245dccf0c582a13a169f1129dcef104a7902091a14921cc709a317e
getPathWithinApplication
protected String getPathWithinApplication(ServletRequest request)
{    return WebUtils.getPathWithinApplication(WebUtils.toHttp(request));}
c8589785586afb88f3e870effeb67e9014d7d0b865adef00ed5d4ede8ea15196
setName
protected void setName(String name)
{    if (!StringUtils.hasText(name)) {        throw new IllegalArgumentException("Cannot specify a null or empty name.");    }    this.name = name;}
239fbe3eb64d679cbac1161825b07d6a8436ead3c6c3d140d9caec2275827023
getName
public String getName()
{    return name;}
c9f1229bc7f44a925832460b428e3838a731f42638d5e2fa8292d6cae738210a
proxy
public FilterChain proxy(FilterChain orig)
{    return new ProxiedFilterChain(orig, this);}
f4edc4bd489679ea81a0d27623fa4ce746e483903ba97baa0692060c4c342403
add
public boolean add(Filter filter)
{    return this.backingList.add(filter);}
dd0fbeb2182fd7384a11521cc2bd599359718243d892729906b397c694c3d60a
add
public void add(int index, Filter filter)
{    this.backingList.add(index, filter);}
6e1f546ef9581e924d0c9dc5f035de15d04316857fdd9c56cbb1d82ae815f602
addAll
public boolean addAll(Collection<? extends Filter> c)
{    return this.backingList.addAll(c);}
b8d7241c835bea64fd14a964c28451ddf4ca0519782cb6006adf29a9c04b0fcb
addAll
public boolean addAll(int index, Collection<? extends Filter> c)
{    return this.backingList.addAll(index, c);}
21ac40bb9a99614b6ac18fa4043acb6173fccff96066fdfab963dba597923aa8
clear
public void clear()
{    this.backingList.clear();}
4da0ec02fabfc9d8d6db55f6b5aa73f917fe3ba7bce50e808cca9ac75625aec8
contains
public boolean contains(Object o)
{    return this.backingList.contains(o);}
fd464eef4f4e6205704a96d454e3289c2da4051347e8398533124338eb29f159
containsAll
public boolean containsAll(Collection<?> c)
{    return this.backingList.containsAll(c);}
feb5e244e3fbe29b5ce3423a15dfb129ee86378f7f1c32b02c1ec8a41f48224a
get
public Filter get(int index)
{    return this.backingList.get(index);}
bafd4bd7dab22de3b1924fcdc56147340df8655f4f992fb914430fcf61ff460e
indexOf
public int indexOf(Object o)
{    return this.backingList.indexOf(o);}
803915e853382ad445a6e2333fabb8beb8e4acd70e908a0d818400f7baac42af
isEmpty
public boolean isEmpty()
{    return this.backingList.isEmpty();}
827eafdf7cb52b8a118d65d551ff7182df998d4c40335f19eac997a1a20c1712
iterator
public Iterator<Filter> iterator()
{    return this.backingList.iterator();}
5c110d80307975a76d8e40f3e5b2bc8d9dbf5198d99309314ef472942ebc95da
lastIndexOf
public int lastIndexOf(Object o)
{    return this.backingList.lastIndexOf(o);}
27d4cdff365cd6a76e5cf170cb8a5841d84fd10d3b4b980c75880b9fae3c74d7
listIterator
public ListIterator<Filter> listIterator()
{    return this.backingList.listIterator();}
7b6ff8fb1dc418ef3503c88c19bde5336121b756ef474188c26f4da8d4987ad4
listIterator
public ListIterator<Filter> listIterator(int index)
{    return this.backingList.listIterator(index);}
a884bcde26f21e88550e80333c733e937398b338874948cf990b93c2a4126a43
remove
public Filter remove(int index)
{    return this.backingList.remove(index);}
419b436ee630c006c73c2ce3e35dc2241b7dd30a231c66d85f12ec2d22e1463b
remove
public boolean remove(Object o)
{    return this.backingList.remove(o);}
ffff7401397d7a097478dc98b31fe0fa2424d40a29232401684bbb6dc7f20b7c
removeAll
public boolean removeAll(Collection<?> c)
{    return this.backingList.removeAll(c);}
609acc2fd25fb3bb1f6a5af53227b6ccef0e2d5ba6c913c6d67ce78625568ff0
retainAll
public boolean retainAll(Collection<?> c)
{    return this.backingList.retainAll(c);}
0374351475e471e570706f53bed6a6d905b69f1db2a6e9eca0a04c9513d2e32c
set
public Filter set(int index, Filter filter)
{    return this.backingList.set(index, filter);}
72ef1e59027007ffe0950edfd2670ad03bb65cd6463d5d1d282dfeb1750435b0
size
public int size()
{    return this.backingList.size();}
00b2910e9de22bd0c5e05a9df4a7507b61e843807d2cc3c40fb42f5657f6719a
subList
public List<Filter> subList(int fromIndex, int toIndex)
{    return this.backingList.subList(fromIndex, toIndex);}
91fc4400c9ff6b0731166cd6de664ebb6461c928eba1cb982e4ae232c51cda71
toArray
public Object[] toArray()
{    return this.backingList.toArray();}
997e19e7bc6b3f37ebf2240fde6096df625cf0fc952371c238801cef0936fe73
toArray
public T[] toArray(T[] a)
{        return this.backingList.toArray(a);}
3bca43790adf91a2ab7a861c4cfa7f9a91a06c341fbce0e3c47fb0d950bf9171
processPathConfig
public Filter processPathConfig(String path, String config)
{    String[] values = null;    if (config != null) {        values = split(config);    }    this.appliedPaths.put(path, values);    return this;}
1c99b09fa245dccf0c582a13a169f1129dcef104a7902091a14921cc709a317e
getPathWithinApplication
protected String getPathWithinApplication(ServletRequest request)
{    return WebUtils.getPathWithinApplication(WebUtils.toHttp(request));}
10cdbfd0ac8b2e8f8afaf1e52aa5e5db8b08997155cc72a89207a5d27b0476a3
pathsMatch
protected boolean pathsMatch(String path, ServletRequest request)
{    String requestURI = getPathWithinApplication(request);    log.trace("Attempting to match pattern '{}' with current requestURI '{}'...", path, requestURI);    return pathsMatch(path, requestURI);}
545e701b348d6ddfe0fde81308501ba1e2c29fc4e52d9529aa5aa44d65ea6e06
pathsMatch
protected boolean pathsMatch(String pattern, String path)
{    return pathMatcher.matches(pattern, path);}
00a552751fab03375f60598cef0c58261a637886b80662b39f5b6efdbe9a609c
preHandle
protected boolean preHandle(ServletRequest request, ServletResponse response) throws Exception
{    if (this.appliedPaths == null || this.appliedPaths.isEmpty()) {        if (log.isTraceEnabled()) {            log.trace("appliedPaths property is null or empty.  This Filter will passthrough immediately.");        }        return true;    }    for (String path : this.appliedPaths.keySet()) {                if (pathsMatch(path, request)) {            log.trace("Current requestURI matches pattern '{}'.  Determining filter chain execution...", path);            Object config = this.appliedPaths.get(path);            return isFilterChainContinued(request, response, path, config);        }    }        return true;}
aad19694618acc64f2df3843b61ad206bfdc084e78fc78b4c957e3cd2eefb592
isFilterChainContinued
private boolean isFilterChainContinued(ServletRequest request, ServletResponse response, String path, Object pathConfig) throws Exception
{    if (isEnabled(request, response, path, pathConfig)) {                if (log.isTraceEnabled()) {            log.trace("Filter '{}' is enabled for the current request under path '{}' with config [{}].  " + "Delegating to subclass implementation for 'onPreHandle' check.", new Object[] { getName(), path, pathConfig });        }                return onPreHandle(request, response, pathConfig);    }    if (log.isTraceEnabled()) {        log.trace("Filter '{}' is disabled for the current request under path '{}' with config [{}].  " + "The next element in the FilterChain will be called immediately.", new Object[] { getName(), path, pathConfig });    }        return true;}
0742287ffedc47d9a617ad116ce6cdf6d1985eb00099680649b4e039f6e24e03
onPreHandle
protected boolean onPreHandle(ServletRequest request, ServletResponse response, Object mappedValue) throws Exception
{    return true;}
2ba351297035c99a28843fb34f6cf30305a5c843cd0e4f6778bd9bd96c3413af
isEnabled
protected boolean isEnabled(ServletRequest request, ServletResponse response, String path, Object mappedValue) throws Exception
{    return isEnabled(request, response);}
0742287ffedc47d9a617ad116ce6cdf6d1985eb00099680649b4e039f6e24e03
onPreHandle
protected boolean onPreHandle(ServletRequest request, ServletResponse response, Object mappedValue) throws Exception
{    request.setAttribute(DefaultSubjectContext.SESSION_CREATION_ENABLED, Boolean.FALSE);    return true;}
6970733223cf9772051cd981eee7ef10a68005cfb6640600db906425b5f932ab
getCookie
public Cookie getCookie()
{    return cookie;}
2c4a2302435058f27840714be555cfb8051bdc4fa51a4d60f9d36e967743df65
setCookie
public void setCookie(Cookie cookie)
{    this.cookie = cookie;}
ee0eafeec1b236d7210de3cb61c9b5a414b8923db5067282b4029468081e8317
rememberSerializedIdentity
protected void rememberSerializedIdentity(Subject subject, byte[] serialized)
{    if (!WebUtils.isHttp(subject)) {        if (log.isDebugEnabled()) {            String msg = "Subject argument is not an HTTP-aware instance.  This is required to obtain a servlet " + "request and response in order to set the rememberMe cookie. Returning immediately and " + "ignoring rememberMe operation.";            log.debug(msg);        }        return;    }    HttpServletRequest request = WebUtils.getHttpRequest(subject);    HttpServletResponse response = WebUtils.getHttpResponse(subject);        String base64 = Base64.encodeToString(serialized);        Cookie template = getCookie();    Cookie cookie = new SimpleCookie(template);    cookie.setValue(base64);    cookie.saveTo(request, response);}
60e1e57ac77d3dd7f3d16e7f9aafe21c28c83fbc57e617433148a1b522ef45fd
isIdentityRemoved
private boolean isIdentityRemoved(WebSubjectContext subjectContext)
{    ServletRequest request = subjectContext.resolveServletRequest();    if (request != null) {        Boolean removed = (Boolean) request.getAttribute(ShiroHttpServletRequest.IDENTITY_REMOVED_KEY);        return removed != null && removed;    }    return false;}
c1bde12ac9209b2d9b17b8ce54bc8594554baeae20650faf1d44675cd84cf049
getRememberedSerializedIdentity
protected byte[] getRememberedSerializedIdentity(SubjectContext subjectContext)
{    if (!WebUtils.isHttp(subjectContext)) {        if (log.isDebugEnabled()) {            String msg = "SubjectContext argument is not an HTTP-aware instance.  This is required to obtain a " + "servlet request and response in order to retrieve the rememberMe cookie. Returning " + "immediately and ignoring rememberMe operation.";            log.debug(msg);        }        return null;    }    WebSubjectContext wsc = (WebSubjectContext) subjectContext;    if (isIdentityRemoved(wsc)) {        return null;    }    HttpServletRequest request = WebUtils.getHttpRequest(wsc);    HttpServletResponse response = WebUtils.getHttpResponse(wsc);    String base64 = getCookie().readValue(request, response);        if (Cookie.DELETED_COOKIE_VALUE.equals(base64))        return null;    if (base64 != null) {        base64 = ensurePadding(base64);        if (log.isTraceEnabled()) {            log.trace("Acquired Base64 encoded identity [" + base64 + "]");        }        byte[] decoded = Base64.decode(base64);        if (log.isTraceEnabled()) {            log.trace("Base64 decoded byte array length: " + (decoded != null ? decoded.length : 0) + " bytes.");        }        return decoded;    } else {                return null;    }}
88169d86c157c62a4bd60a265ae260d16ddcc01dc7498944f9aacb041b7feee9
ensurePadding
private String ensurePadding(String base64)
{    int length = base64.length();    if (length % 4 != 0) {        StringBuilder sb = new StringBuilder(base64);        for (int i = 0; i < length % 4; ++i) {            sb.append('=');        }        base64 = sb.toString();    }    return base64;}
b5911f232b7b5e7b7c6079b5ac856451f8720c36f36d0e1caaccbcfae6014f9b
forgetIdentity
protected void forgetIdentity(Subject subject)
{    if (WebUtils.isHttp(subject)) {        HttpServletRequest request = WebUtils.getHttpRequest(subject);        HttpServletResponse response = WebUtils.getHttpResponse(subject);        forgetIdentity(request, response);    }}
f978c7a3a48843554263157ad49fe1f3901e2e3a7c59d017036df388c769ddd8
forgetIdentity
public void forgetIdentity(SubjectContext subjectContext)
{    if (WebUtils.isHttp(subjectContext)) {        HttpServletRequest request = WebUtils.getHttpRequest(subjectContext);        HttpServletResponse response = WebUtils.getHttpResponse(subjectContext);        forgetIdentity(request, response);    }}
4d42bb81173deea66b345594324018e2448c71871437dd68ade2234774627934
forgetIdentity
private void forgetIdentity(HttpServletRequest request, HttpServletResponse response)
{    getCookie().removeFrom(request, response);}
78bfe366482ef149b43136ff6c7d114ffdd5a671437fde82b4a3bbee5f7b5942
createSubjectContext
protected SubjectContext createSubjectContext()
{    return new DefaultWebSubjectContext();}
e1ac022d111404617315290caefb2cd719a5e0585bd506d6fd1456ed0720ebc3
setSubjectDAO
public void setSubjectDAO(SubjectDAO subjectDAO)
{    super.setSubjectDAO(subjectDAO);    applySessionManagerToSessionStorageEvaluatorIfPossible();}
e5ea61e578d50606430a19b255d5744d14f11b934a8d8f175285dc559c600a41
afterSessionManagerSet
protected void afterSessionManagerSet()
{    super.afterSessionManagerSet();    applySessionManagerToSessionStorageEvaluatorIfPossible();}
28419d978429b5116b20d5da8aa45c65b01c6b0b0eac0d1363d1a2840019a332
applySessionManagerToSessionStorageEvaluatorIfPossible
private void applySessionManagerToSessionStorageEvaluatorIfPossible()
{    SubjectDAO subjectDAO = getSubjectDAO();    if (subjectDAO instanceof DefaultSubjectDAO) {        SessionStorageEvaluator evaluator = ((DefaultSubjectDAO) subjectDAO).getSessionStorageEvaluator();        if (evaluator instanceof DefaultWebSessionStorageEvaluator) {            ((DefaultWebSessionStorageEvaluator) evaluator).setSessionManager(getSessionManager());        }    }}
8e901e17183b526e54ba814b2d8197a8db7156f68a668111e5694559e9debc43
copy
protected SubjectContext copy(SubjectContext subjectContext)
{    if (subjectContext instanceof WebSubjectContext) {        return new DefaultWebSubjectContext((WebSubjectContext) subjectContext);    }    return super.copy(subjectContext);}
28580e47f4b4f982176995e3f84eef2c675c634a06fa2045f0f936b57b7bb221
getSessionMode
public String getSessionMode()
{    return sessionMode;}
0e455a712fb1bf48f1047c193dec048ad8ca8a2cc42d1e814473869f666886e8
setSessionMode
public void setSessionMode(String sessionMode)
{    log.warn("The 'sessionMode' property has been deprecated.  Please configure an appropriate WebSessionManager " + "instance instead of using this property.  This property/method will be removed in a later version.");    String mode = sessionMode;    if (mode == null) {        throw new IllegalArgumentException("sessionMode argument cannot be null.");    }    mode = sessionMode.toLowerCase();    if (!HTTP_SESSION_MODE.equals(mode) && !NATIVE_SESSION_MODE.equals(mode)) {        String msg = "Invalid sessionMode [" + sessionMode + "].  Allowed values are " + "public static final String constants in the " + getClass().getName() + " class: '" + HTTP_SESSION_MODE + "' or '" + NATIVE_SESSION_MODE + "', with '" + HTTP_SESSION_MODE + "' being the default.";        throw new IllegalArgumentException(msg);    }    boolean recreate = this.sessionMode == null || !this.sessionMode.equals(mode);    this.sessionMode = mode;    if (recreate) {        LifecycleUtils.destroy(getSessionManager());        SessionManager sessionManager = createSessionManager(mode);        this.setInternalSessionManager(sessionManager);    }}
26eba372800ee6d4b1ec38addc56249ef8efcb6bed332886bdf850e82507e367
setSessionManager
public void setSessionManager(SessionManager sessionManager)
{    this.sessionMode = null;    if (sessionManager != null && !(sessionManager instanceof WebSessionManager)) {        if (log.isWarnEnabled()) {            String msg = "The " + getClass().getName() + " implementation expects SessionManager instances " + "that implement the " + WebSessionManager.class.getName() + " interface.  The " + "configured instance is of type [" + sessionManager.getClass().getName() + "] which does not " + "implement this interface..  This may cause unexpected behavior.";            log.warn(msg);        }    }    setInternalSessionManager(sessionManager);}
2daf9744241ac5c5ecc013dc57df27f846d3210af511a7b5f6d04f8dad40390e
setInternalSessionManager
private void setInternalSessionManager(SessionManager sessionManager)
{    super.setSessionManager(sessionManager);}
af38478c7a4ee61da559035415a19387df37c87239ad2246ab3ae85c070daab5
isHttpSessionMode
public boolean isHttpSessionMode()
{    SessionManager sessionManager = getSessionManager();    return sessionManager instanceof WebSessionManager && ((WebSessionManager) sessionManager).isServletContainerSessions();}
7329745330ff21bdd8f5930d02c540dea2c8ff6f06c28e7e5b8c5bcfac3baf8f
createSessionManager
protected SessionManager createSessionManager(String sessionMode)
{    if (sessionMode == null || !sessionMode.equalsIgnoreCase(NATIVE_SESSION_MODE)) {        log.info("{} mode - enabling ServletContainerSessionManager (HTTP-only Sessions)", HTTP_SESSION_MODE);        return new ServletContainerSessionManager();    } else {        log.info("{} mode - enabling DefaultWebSessionManager (non-HTTP and HTTP Sessions)", NATIVE_SESSION_MODE);        return new DefaultWebSessionManager();    }}
f9df0572b0a250b0c430ebb22ba1459e6916ed41fbf4a700e066895d20a8fd28
createSessionContext
protected SessionContext createSessionContext(SubjectContext subjectContext)
{    SessionContext sessionContext = super.createSessionContext(subjectContext);    if (subjectContext instanceof WebSubjectContext) {        WebSubjectContext wsc = (WebSubjectContext) subjectContext;        ServletRequest request = wsc.resolveServletRequest();        ServletResponse response = wsc.resolveServletResponse();        DefaultWebSessionContext webSessionContext = new DefaultWebSessionContext(sessionContext);        if (request != null) {            webSessionContext.setServletRequest(request);        }        if (response != null) {            webSessionContext.setServletResponse(response);        }        sessionContext = webSessionContext;    }    return sessionContext;}
8a2a443730788a1e8711a23cb4e6babcd6a5a45b17c20d9d005bfb2346ae62fd
getSessionKey
protected SessionKey getSessionKey(SubjectContext context)
{    if (WebUtils.isWeb(context)) {        Serializable sessionId = context.getSessionId();        ServletRequest request = WebUtils.getRequest(context);        ServletResponse response = WebUtils.getResponse(context);        return new WebSessionKey(sessionId, request, response);    } else {        return super.getSessionKey(context);    }}
1e890755ee2090c50ce9a0bce1fbab3966b345067da8bfe5bdcbb1f87a014c86
beforeLogout
protected void beforeLogout(Subject subject)
{    super.beforeLogout(subject);    removeRequestIdentity(subject);}
bf04330a1a59c20e7994bb47c52b40a953a4dfb08cc0872a2ada62aa2d1a908d
removeRequestIdentity
protected void removeRequestIdentity(Subject subject)
{    if (subject instanceof WebSubject) {        WebSubject webSubject = (WebSubject) subject;        ServletRequest request = webSubject.getServletRequest();        if (request != null) {            request.setAttribute(ShiroHttpServletRequest.IDENTITY_REMOVED_KEY, Boolean.TRUE);        }    }}
be8b9937f4aa650d989c3d4761a70db7b23c28dbba6df3216fb3fde579a263d5
setSessionManager
 void setSessionManager(SessionManager sessionManager)
{    this.sessionManager = sessionManager;}
197e9158b5eb362724187c5d892880e50645e621b973467764248799992e1724
isSessionStorageEnabled
public boolean isSessionStorageEnabled(Subject subject)
{    if (subject.getSession(false) != null) {                return true;    }    if (!isSessionStorageEnabled()) {                return false;    }        if (!(subject instanceof WebSubject) && (this.sessionManager != null && !(this.sessionManager instanceof NativeSessionManager))) {        return false;    }    return WebUtils._isSessionCreationEnabled(subject);}
14ae44248da363eef52ae43e59184d7bf1d409ceab1ab983c65166d88de46d23
createSubject
public Subject createSubject(SubjectContext context)
{                boolean isNotBasedOnWebSubject = context.getSubject() != null && !(context.getSubject() instanceof WebSubject);    if (!(context instanceof WebSubjectContext) || isNotBasedOnWebSubject) {        return super.createSubject(context);    }    WebSubjectContext wsc = (WebSubjectContext) context;    SecurityManager securityManager = wsc.resolveSecurityManager();    Session session = wsc.resolveSession();    boolean sessionEnabled = wsc.isSessionCreationEnabled();    PrincipalCollection principals = wsc.resolvePrincipals();    boolean authenticated = wsc.resolveAuthenticated();    String host = wsc.resolveHost();    ServletRequest request = wsc.resolveServletRequest();    ServletResponse response = wsc.resolveServletResponse();    return new WebDelegatingSubject(principals, authenticated, host, session, sessionEnabled, request, response, securityManager);}
213202c5102f92967fc8cf8b74db1e620b50fb0fe77e0db501adca39b069ae40
newSubjectInstance
protected Subject newSubjectInstance(PrincipalCollection principals, boolean authenticated, String host, Session session, ServletRequest request, ServletResponse response, SecurityManager securityManager)
{    return new WebDelegatingSubject(principals, authenticated, host, session, true, request, response, securityManager);}
09a006e639d1a7e60589e2ef74ea0b0d63d1c2cc1e725f551fb1df57c59bf246
getFilterConfig
public FilterConfig getFilterConfig()
{    return filterConfig;}
ffbff3a2e298981c8312db0d0093117df969a61d2580231af9e01ad15b01095e
setFilterConfig
public void setFilterConfig(FilterConfig filterConfig)
{    this.filterConfig = filterConfig;    setServletContext(filterConfig.getServletContext());}
3ac48216436a1fb93bddb775afa5412355fe1b91871c8cc096623035d5c9f08c
getInitParam
protected String getInitParam(String paramName)
{    FilterConfig config = getFilterConfig();    if (config != null) {        return StringUtils.clean(config.getInitParameter(paramName));    }    return null;}
350cb927cff2ca574cf1674f47018d28c610bafa330b01e11d0a2ca5054fff22
init
public final void init(FilterConfig filterConfig) throws ServletException
{    setFilterConfig(filterConfig);    try {        onFilterConfigSet();    } catch (Exception e) {        if (e instanceof ServletException) {            throw (ServletException) e;        } else {            if (log.isErrorEnabled()) {                log.error("Unable to start Filter: [" + e.getMessage() + "].", e);            }            throw new ServletException(e);        }    }}
a02ddbc9c204c4bcda48205d7cac9f16001b61c9752c22b7d49493611fd33372
onFilterConfigSet
protected void onFilterConfigSet() throws Exception
{}
9cabd71a85d4928de1c9a46601c11d584f3e7522ee61146e1117d0d360a20b2e
destroy
public void destroy()
{}
ba4b28430429e162e64cba31996dc3d409b7938c5f08700aec35bf1a23c6f608
getSecurityManager
public WebSecurityManager getSecurityManager()
{    return securityManager;}
b1aaae20bdebea75c438d2e7f8e03525195a2eaa869ee5a41b34a5dd2915b506
setSecurityManager
public void setSecurityManager(WebSecurityManager sm)
{    this.securityManager = sm;}
cf0db2f8e8ba0741baf805a8bc52b5f3592249ba61dc0b9a89961f5f54ffb5da
getFilterChainResolver
public FilterChainResolver getFilterChainResolver()
{    return filterChainResolver;}
0d3d4021f9c34493c76b6c6bbf78fe7d3ef7c14013aa85325f6391712f76795c
setFilterChainResolver
public void setFilterChainResolver(FilterChainResolver filterChainResolver)
{    this.filterChainResolver = filterChainResolver;}
d696c9ed1d15e385f63e4f4981800f327e65e7eda80b5870b986acf531880b36
isStaticSecurityManagerEnabled
public boolean isStaticSecurityManagerEnabled()
{    return staticSecurityManagerEnabled;}
4baffd97f850b54a0d4e2bee06051af847c90744ca050f50b5154b8b60d45507
setStaticSecurityManagerEnabled
public void setStaticSecurityManagerEnabled(boolean staticSecurityManagerEnabled)
{    this.staticSecurityManagerEnabled = staticSecurityManagerEnabled;}
a27f297fee4772e5d24245d54da1584056ef213a368387a5765bce695ce1ddbc
onFilterConfigSet
protected final void onFilterConfigSet() throws Exception
{        applyStaticSecurityManagerEnabledConfig();    init();    ensureSecurityManager();        if (isStaticSecurityManagerEnabled()) {        SecurityUtils.setSecurityManager(getSecurityManager());    }}
2a7c932be6c253f9d27fb82db68a4ec98cae909bee575e0aabefe2fe480a56c7
applyStaticSecurityManagerEnabledConfig
private void applyStaticSecurityManagerEnabledConfig()
{    String value = getInitParam(STATIC_INIT_PARAM_NAME);    if (value != null) {        Boolean b = Boolean.valueOf(value);        if (b != null) {            setStaticSecurityManagerEnabled(b);        }    }}
1359225215853f3f89f4af5641e298ce821f026f91f6d3bc4f753adf82ab1c74
init
public void init() throws Exception
{}
f8bd7006a27b64aa744351037119363f2a5ab66152c854246687d835780a81bb
ensureSecurityManager
private void ensureSecurityManager()
{    WebSecurityManager securityManager = getSecurityManager();    if (securityManager == null) {        log.info("No SecurityManager configured.  Creating default.");        securityManager = createDefaultSecurityManager();        setSecurityManager(securityManager);    }}
f135d07ae037c2dc17d6c204f5d9d455f075b2554f6fc10e3b15397754929a91
createDefaultSecurityManager
protected WebSecurityManager createDefaultSecurityManager()
{    return new DefaultWebSecurityManager();}
9bfee5fbeba6c2f7567837107a867cbf1d76f9f4314e089683ff88e29793a4d7
isHttpSessions
protected boolean isHttpSessions()
{    return getSecurityManager().isHttpSessionMode();}
02a72e2351aacbceac3d69026a8ac225e3d85c4aff02dea14d81906d0c808cf5
wrapServletRequest
protected ServletRequest wrapServletRequest(HttpServletRequest orig)
{    return new ShiroHttpServletRequest(orig, getServletContext(), isHttpSessions());}
5208973cf79a4c6ce4eebb82aa1dd6e6838b24816a910696a62f117258e74192
prepareServletRequest
protected ServletRequest prepareServletRequest(ServletRequest request, ServletResponse response, FilterChain chain)
{    ServletRequest toUse = request;    if (request instanceof HttpServletRequest) {        HttpServletRequest http = (HttpServletRequest) request;        toUse = wrapServletRequest(http);    }    return toUse;}
b3a52943c9928f7308c5bbad6ce8a1ef05f2f1f8ef866a38f64eb1c3f6173919
wrapServletResponse
protected ServletResponse wrapServletResponse(HttpServletResponse orig, ShiroHttpServletRequest request)
{    return new ShiroHttpServletResponse(orig, getServletContext(), request);}
96dfca881321e1fad8461f51862444a9773189c648db728c23d0b6c7edccb33e
prepareServletResponse
protected ServletResponse prepareServletResponse(ServletRequest request, ServletResponse response, FilterChain chain)
{    ServletResponse toUse = response;    if (!isHttpSessions() && (request instanceof ShiroHttpServletRequest) && (response instanceof HttpServletResponse)) {                        toUse = wrapServletResponse((HttpServletResponse) response, (ShiroHttpServletRequest) request);    }    return toUse;}
9677262976836910e2535bba51b6f9d4116faed1c5f097dfabbaebbdda2b40b8
createSubject
protected WebSubject createSubject(ServletRequest request, ServletResponse response)
{    return new WebSubject.Builder(getSecurityManager(), request, response).buildWebSubject();}
3b13fe57a0d4193a0d158d2894c560eac46eed1cdbbc3463381f18be7a07ccf0
updateSessionLastAccessTime
protected void updateSessionLastAccessTime(ServletRequest request, ServletResponse response)
{    if (!isHttpSessions()) {                Subject subject = SecurityUtils.getSubject();                if (subject != null) {            Session session = subject.getSession(false);            if (session != null) {                try {                    session.touch();                } catch (Throwable t) {                    log.error("session.touch() method invocation has failed.  Unable to update" + "the corresponding session's last access time based on the incoming request.", t);                }            }        }    }}
2a9b3dd5f096ca3783442744a99c1752815dab72c2b5eea22e3262ef747fb9c4
doFilterInternal
protected void doFilterInternal(ServletRequest servletRequest, ServletResponse servletResponse, final FilterChain chain) throws ServletException, IOException
{    Throwable t = null;    try {        final ServletRequest request = prepareServletRequest(servletRequest, servletResponse, chain);        final ServletResponse response = prepareServletResponse(request, servletResponse, chain);        final Subject subject = createSubject(request, response);                subject.execute(new Callable() {            public Object call() throws Exception {                updateSessionLastAccessTime(request, response);                executeChain(request, response, chain);                return null;            }        });    } catch (ExecutionException ex) {        t = ex.getCause();    } catch (Throwable throwable) {        t = throwable;    }    if (t != null) {        if (t instanceof ServletException) {            throw (ServletException) t;        }        if (t instanceof IOException) {            throw (IOException) t;        }                String msg = "Filtered request failed.";        throw new ServletException(msg, t);    }}
6b6696c98cde0a78a1cb538a0489ddeafee18fe4969bcb083df143138b9793be
call
public Object call() throws Exception
{    updateSessionLastAccessTime(request, response);    executeChain(request, response, chain);    return null;}
bb25428f489d668ebc218d27e3c1d3a0ffbc6a8f4b9fde5311167ce3f419f2bf
getExecutionChain
protected FilterChain getExecutionChain(ServletRequest request, ServletResponse response, FilterChain origChain)
{    FilterChain chain = origChain;    FilterChainResolver resolver = getFilterChainResolver();    if (resolver == null) {        log.debug("No FilterChainResolver configured.  Returning original FilterChain.");        return origChain;    }    FilterChain resolved = resolver.getChain(request, response, origChain);    if (resolved != null) {        log.trace("Resolved a configured FilterChain for the current request.");        chain = resolved;    } else {        log.trace("No FilterChain configured for the current request.  Using the default.");    }    return chain;}
13912b9ddb33e671abc262493d02fd3b7c58e201130cf93682797127f9d69b74
executeChain
protected void executeChain(ServletRequest request, ServletResponse response, FilterChain origChain) throws IOException, ServletException
{    FilterChain chain = getExecutionChain(request, response, origChain);    chain.doFilter(request, response);}
00a552751fab03375f60598cef0c58261a637886b80662b39f5b6efdbe9a609c
preHandle
protected boolean preHandle(ServletRequest request, ServletResponse response) throws Exception
{    return true;}
ab35aad2bf13d584b4b7d6e60e6a48352230a5364812a61c8f6a3119d855cea7
postHandle
protected void postHandle(ServletRequest request, ServletResponse response) throws Exception
{}
ccf9a0b9df40f2370abff2dfadc99843ce5b082c5bf67039d079eabe4320ff51
afterCompletion
public void afterCompletion(ServletRequest request, ServletResponse response, Exception exception) throws Exception
{}
2758818b7a87ccd6d95f60edb0e60cb21f6698515298c30451603fd7b0c50246
executeChain
protected void executeChain(ServletRequest request, ServletResponse response, FilterChain chain) throws Exception
{    chain.doFilter(request, response);}
c067fc562927da973a29005de4d387773393e61433f77a841b9c0e6f180c8285
doFilterInternal
public void doFilterInternal(ServletRequest request, ServletResponse response, FilterChain chain) throws ServletException, IOException
{    Exception exception = null;    try {        boolean continueChain = preHandle(request, response);        if (log.isTraceEnabled()) {            log.trace("Invoked preHandle method.  Continuing chain?: [" + continueChain + "]");        }        if (continueChain) {            executeChain(request, response, chain);        }        postHandle(request, response);        if (log.isTraceEnabled()) {            log.trace("Successfully invoked postHandle method");        }    } catch (Exception e) {        exception = e;    } finally {        cleanup(request, response, exception);    }}
2784eee5e32a91074f6545639ddf36992c0d9530a1489c7dd8f035dcd973ded8
cleanup
protected void cleanup(ServletRequest request, ServletResponse response, Exception existing) throws ServletException, IOException
{    Exception exception = existing;    try {        afterCompletion(request, response, exception);        if (log.isTraceEnabled()) {            log.trace("Successfully invoked afterCompletion method.");        }    } catch (Exception e) {        if (exception == null) {            exception = e;        } else {            log.debug("afterCompletion implementation threw an exception.  This will be ignored to " + "allow the original source exception to be propagated.", e);        }    }    if (exception != null) {        if (exception instanceof ServletException) {            throw (ServletException) exception;        } else if (exception instanceof IOException) {            throw (IOException) exception;        } else {            if (log.isDebugEnabled()) {                String msg = "Filter execution resulted in an unexpected Exception " + "(not IOException or ServletException as the Filter API recommends).  " + "Wrapping in ServletException and propagating.";                log.debug(msg);            }            throw new ServletException(exception);        }    }}
b0ebcf06cde6846f63ad619c415f2bb0b60033981730c6895a517ce19ce6613b
getConfig
public String getConfig()
{    return this.config;}
aa346b60bc7a888cc8ac6728b5964f7d08912140beb6170a12f2494f12eeca58
setConfig
public void setConfig(String config)
{    this.config = config;}
5aabc390fe2d279cc62e1a1a32d65a61bf822344f47dc71d7ae60cc7796444c4
getConfigPath
public String getConfigPath()
{    return configPath;}
bf803eb910fbbd1645a339096437414439b4a57371600cbf9f10581470ff19d4
setConfigPath
public void setConfigPath(String configPath)
{    this.configPath = StringUtils.clean(configPath);}
1359225215853f3f89f4af5641e298ce821f026f91f6d3bc4f753adf82ab1c74
init
public void init() throws Exception
{    applyInitParams();    configure();}
7314f126d962a4e54a7e02f818e5c97d300d73f58a5957cb2c5a61ef7b27e7f3
applyInitParams
protected void applyInitParams() throws Exception
{    String config = getInitParam(CONFIG_INIT_PARAM_NAME);    if (config != null) {        setConfig(config);    }    String configPath = getInitParam(CONFIG_PATH_INIT_PARAM_NAME);    if (configPath != null) {        setConfigPath(configPath);    }}
b51cf003e4d12e4caccad573cc9554713c71cf3432e98f447c29c69b3fbb3f34
configure
protected void configure() throws Exception
{    Ini ini = loadIniFromConfig();    if (CollectionUtils.isEmpty(ini)) {        log.info("Null or empty configuration specified via 'config' init-param.  " + "Checking path-based configuration.");        ini = loadIniFromPath();    }        if (CollectionUtils.isEmpty(ini)) {        log.info("Null or empty configuration specified via '" + CONFIG_INIT_PARAM_NAME + "' or '" + CONFIG_PATH_INIT_PARAM_NAME + "' filter parameters.  Trying the default " + DEFAULT_WEB_INI_RESOURCE_PATH + " file.");        ini = getServletContextIniResource(DEFAULT_WEB_INI_RESOURCE_PATH);    }        if (CollectionUtils.isEmpty(ini)) {        log.info("Null or empty configuration specified via '" + CONFIG_INIT_PARAM_NAME + "' or '" + CONFIG_PATH_INIT_PARAM_NAME + "' filter parameters.  Trying the default " + IniFactorySupport.DEFAULT_INI_RESOURCE_PATH + " file.");        ini = IniFactorySupport.loadDefaultClassPathIni();    }    Map<String, ?> objects = applySecurityManager(ini);    applyFilterChainResolver(ini, objects);}
0833e3c0452b2d62567596af82b20c5dc66397db7adabd27060c415c83a9591f
loadIniFromConfig
protected Ini loadIniFromConfig()
{    Ini ini = null;    String config = getConfig();    if (config != null) {        ini = convertConfigToIni(config);    }    return ini;}
8a8539d676e01de24db020e8b8f8ed92eacbde01e3f279a15ae54c64e36bdde5
loadIniFromPath
protected Ini loadIniFromPath()
{    Ini ini = null;    String path = getConfigPath();    if (path != null) {        ini = convertPathToIni(path);    }    return ini;}
bc18c16f6ce12a323019d2171dd39295063a29f27174320fd3508468122cb3ea
applySecurityManager
protected Map<String, ?> applySecurityManager(Ini ini)
{    WebIniSecurityManagerFactory factory;    if (CollectionUtils.isEmpty(ini)) {        factory = new WebIniSecurityManagerFactory();    } else {        factory = new WebIniSecurityManagerFactory(ini);    }            SecurityManager securityManager = factory.getInstance();    if (!(securityManager instanceof WebSecurityManager)) {        String msg = "The configured security manager is not an instance of WebSecurityManager, so " + "it can not be used with the Shiro servlet filter.";        throw new ConfigurationException(msg);    }    setSecurityManager((WebSecurityManager) securityManager);    return factory.getBeans();}
2a140ff400d6324ff831374f0488ce5e55ffe7d824c43d42c1bc67fc50e539ec
applyFilterChainResolver
protected void applyFilterChainResolver(Ini ini, Map<String, ?> defaults)
{    if (ini == null || ini.isEmpty()) {                return;    }        Ini.Section urls = ini.getSection(IniFilterChainResolverFactory.URLS);    Ini.Section filters = ini.getSection(IniFilterChainResolverFactory.FILTERS);    if ((urls != null && !urls.isEmpty()) || (filters != null && !filters.isEmpty())) {                        IniFilterChainResolverFactory filterChainResolverFactory = new IniFilterChainResolverFactory(ini, defaults);        filterChainResolverFactory.setFilterConfig(getFilterConfig());        FilterChainResolver resolver = filterChainResolverFactory.getInstance();        setFilterChainResolver(resolver);    }}
adf030c991644a3b8469ba7d50c62f30edd143d988fe0f3041030bdb39ed6fbd
convertConfigToIni
protected Ini convertConfigToIni(String config)
{    Ini ini = new Ini();    ini.load(config);    return ini;}
90e4385efa763b939d65fc90e822c31aa7d62938d3645658d2bc25fd1d63a670
getServletContextIniResource
protected Ini getServletContextIniResource(String servletContextPath)
{    String path = WebUtils.normalize(servletContextPath);    if (getServletContext() != null) {        InputStream is = getServletContext().getResourceAsStream(path);        if (is != null) {            Ini ini = new Ini();            ini.load(is);            if (CollectionUtils.isEmpty(ini)) {                log.warn("ServletContext INI resource '" + servletContextPath + "' exists, but it did not contain " + "any data.");            }            return ini;        }    }    return null;}
9cd202ccd5b246df170a3f2fdc66b5ae693a2aded542c0ace71abdbf7c29c154
convertPathToIni
protected Ini convertPathToIni(String path)
{    Ini ini = new Ini();        if (!ResourceUtils.hasResourcePrefix(path)) {        ini = getServletContextIniResource(path);        if (ini == null) {            String msg = "There is no servlet context resource corresponding to configPath '" + path + "'  If " + "the resource is located elsewhere (not immediately resolveable in the servlet context), " + "specify an appropriate classpath:, url:, or file: resource prefix accordingly.";            throw new ConfigurationException(msg);        }    } else {                ini.loadFromPath(path);    }    return ini;}
6ae869e8e8192d3dfe094d851903d4272abc110eca81b62228982913b4cb85e5
getName
protected String getName()
{    if (this.name == null) {        FilterConfig config = getFilterConfig();        if (config != null) {            this.name = config.getFilterName();        }    }    return this.name;}
f498f22eaf0816bf385a43365651d1b6d0455905fdd2d6be01ceefeb84e8f432
setName
public void setName(String name)
{    this.name = name;}
288f35c39714ea1e5c14d58a5d43630135de185096bb2f1f0840eb8b0652cf17
toStringBuilder
protected StringBuilder toStringBuilder()
{    String name = getName();    if (name == null) {        return super.toStringBuilder();    } else {        StringBuilder sb = new StringBuilder();        sb.append(name);        return sb;    }}
3d48e803344c7a7e8e54f2ff2765c17f83485a126437f578afd50ad0c851ac27
isEnabled
public boolean isEnabled()
{    return enabled;}
0ed97cfb12835792458743d0abab13b6fabba6fa7dfb98c4d62e5e03167ed7d7
setEnabled
public void setEnabled(boolean enabled)
{    this.enabled = enabled;}
5b6c1a59302b5fd7e949d8e0c205dea73f429d0938de59757bbc0fb5ef075201
doFilter
public final void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain) throws ServletException, IOException
{    String alreadyFilteredAttributeName = getAlreadyFilteredAttributeName();    if (request.getAttribute(alreadyFilteredAttributeName) != null) {        log.trace("Filter '{}' already executed.  Proceeding without invoking this filter.", getName());        filterChain.doFilter(request, response);    } else     if (/* added in 1.2: */    !isEnabled(request, response) || /* retain backwards compatibility: */    shouldNotFilter(request)) {        log.debug("Filter '{}' is not enabled for the current request.  Proceeding without invoking this filter.", getName());        filterChain.doFilter(request, response);    } else {                log.trace("Filter '{}' not yet executed.  Executing now.", getName());        request.setAttribute(alreadyFilteredAttributeName, Boolean.TRUE);        try {            doFilterInternal(request, response, filterChain);        } finally {                                    request.removeAttribute(alreadyFilteredAttributeName);        }    }}
46907bdfcdc22c9031ed9ce3b8219ed7eb76eccf86ed53309589ae6e6a7545fa
isEnabled
protected boolean isEnabled(ServletRequest request, ServletResponse response) throws ServletException, IOException
{    return isEnabled();}
bacac6028b59f2c82a377228ea3a6a22dc373c3a5daaee978eee9ded9cd01542
getAlreadyFilteredAttributeName
protected String getAlreadyFilteredAttributeName()
{    String name = getName();    if (name == null) {        name = getClass().getName();    }    return name + ALREADY_FILTERED_SUFFIX;}
654603a83acd04ad13317c1dc8ae3fffb661a02ddfb7e4563ce853dac56f30c2
shouldNotFilter
protected boolean shouldNotFilter(ServletRequest request) throws ServletException
{    return false;}
4e60aae3708c708192e02f927431747947a9f8cc00b22fbdc63ef314d5ef7cad
doFilter
public void doFilter(ServletRequest request, ServletResponse response) throws IOException, ServletException
{    if (this.filters == null || this.filters.size() == this.index) {                if (log.isTraceEnabled()) {            log.trace("Invoking original filter chain.");        }        this.orig.doFilter(request, response);    } else {        if (log.isTraceEnabled()) {            log.trace("Invoking wrapped filter at index [" + this.index + "]");        }        this.filters.get(this.index++).doFilter(request, response, this);    }}
080e6dfeffad4589787f1a6fda9a213672aea9ede479cb0719278c34fafc3319
getServletContext
public ServletContext getServletContext()
{    return servletContext;}
562bd85cf2a48714ec9fbde8cd32d90b9ae5a5f78fdf6a7fe7860b1b1128ad0d
setServletContext
public void setServletContext(ServletContext servletContext)
{    this.servletContext = servletContext;}
75ab7c4ffc81817bf6b7b2ec96320525555cc6a1cf03c267757c49fd343a521a
getContextInitParam
protected String getContextInitParam(String paramName)
{    return getServletContext().getInitParameter(paramName);}
e0aba2c26c25cbc1af06a099551de1219afb73e5888b0b1189d66fec497b3c0f
getRequiredServletContext
private ServletContext getRequiredServletContext()
{    ServletContext servletContext = getServletContext();    if (servletContext == null) {        String msg = "ServletContext property must be set via the setServletContext method.";        throw new IllegalStateException(msg);    }    return servletContext;}
ac59c0bd6ac756185fdca8e9a43c1c8276ef169bf8670e356cadf16d99b0e93f
setContextAttribute
protected void setContextAttribute(String key, Object value)
{    if (value == null) {        removeContextAttribute(key);    } else {        getRequiredServletContext().setAttribute(key, value);    }}
37a3fade788c1e08d7a462d96baec0cff3c6c9b22ca32f59dfe11f34eba7ac31
getContextAttribute
protected Object getContextAttribute(String key)
{    return getRequiredServletContext().getAttribute(key);}
cd9c924a7d7771dfcdd10d62321f7538bf5527f7ff34ff36d7b50816ae229f41
removeContextAttribute
protected void removeContextAttribute(String key)
{    getRequiredServletContext().removeAttribute(key);}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return toStringBuilder().toString();}
288f35c39714ea1e5c14d58a5d43630135de185096bb2f1f0840eb8b0652cf17
toStringBuilder
protected StringBuilder toStringBuilder()
{    return new StringBuilder(super.toString());}
1359225215853f3f89f4af5641e298ce821f026f91f6d3bc4f753adf82ab1c74
init
public void init() throws Exception
{    WebEnvironment env = WebUtils.getRequiredWebEnvironment(getServletContext());    setSecurityManager(env.getWebSecurityManager());    FilterChainResolver resolver = env.getFilterChainResolver();    if (resolver != null) {        setFilterChainResolver(resolver);    }}
28954614e87c17d0675a6224ebe5ecc90c94cda8f41f047828bee4b9b468be09
isHttpSessions
public boolean isHttpSessions()
{    return httpSessions;}
7a704082341a235e83c8e8512683bfd4e606683c2a7331adb94e42fe0c4f6ad7
getRemoteUser
public String getRemoteUser()
{    String remoteUser;    Object scPrincipal = getSubjectPrincipal();    if (scPrincipal != null) {        if (scPrincipal instanceof String) {            return (String) scPrincipal;        } else if (scPrincipal instanceof Principal) {            remoteUser = ((Principal) scPrincipal).getName();        } else {            remoteUser = scPrincipal.toString();        }    } else {        remoteUser = super.getRemoteUser();    }    return remoteUser;}
500cdae0771f44e12e905471ad16b9b928667f19e77956836eb99281db53ebed
getSubject
protected Subject getSubject()
{    return SecurityUtils.getSubject();}
9fdb82c2a92d79f396aafc55c862dd0df9364025ed13fee1f4ac3b9b53772b03
getSubjectPrincipal
protected Object getSubjectPrincipal()
{    Object userPrincipal = null;    Subject subject = getSubject();    if (subject != null) {        userPrincipal = subject.getPrincipal();    }    return userPrincipal;}
07e09987cf1900f1dd8cc748df2e41df796acfd5f4560e9ce5e01de15326d4ad
isUserInRole
public boolean isUserInRole(String s)
{    Subject subject = getSubject();    boolean inRole = (subject != null && subject.hasRole(s));    if (!inRole) {        inRole = super.isUserInRole(s);    }    return inRole;}
5d9bb0cdc7b2aa820d5d654cc4e191bb6fca3070733bad6303dfb3f7744ead0a
getUserPrincipal
public Principal getUserPrincipal()
{    Principal userPrincipal;    Object scPrincipal = getSubjectPrincipal();    if (scPrincipal != null) {        if (scPrincipal instanceof Principal) {            userPrincipal = (Principal) scPrincipal;        } else {            userPrincipal = new ObjectPrincipal(scPrincipal);        }    } else {        userPrincipal = super.getUserPrincipal();    }    return userPrincipal;}
e56b1108091fe9672e1528ce5995ac3fa13b44b9f1217b7ea3a1e9e5b52833e5
getRequestedSessionId
public String getRequestedSessionId()
{    String requestedSessionId = null;    if (isHttpSessions()) {        requestedSessionId = super.getRequestedSessionId();    } else {        Object sessionId = getAttribute(REFERENCED_SESSION_ID);        if (sessionId != null) {            requestedSessionId = sessionId.toString();        }    }    return requestedSessionId;}
602a1ce6dc0819d1dcba30a60fc4377d9a00548c7e823ee6cef63a939cb2c79f
getSession
public HttpSession getSession(boolean create)
{    HttpSession httpSession;    if (isHttpSessions()) {        httpSession = super.getSession(false);        if (httpSession == null && create) {                        if (WebUtils._isSessionCreationEnabled(this)) {                httpSession = super.getSession(create);            } else {                throw newNoSessionCreationException();            }        }    } else {        boolean existing = getSubject().getSession(false) != null;        if (this.session == null || !existing) {            Session shiroSession = getSubject().getSession(create);            if (shiroSession != null) {                this.session = new ShiroHttpSession(shiroSession, this, this.servletContext);                if (!existing) {                    setAttribute(REFERENCED_SESSION_IS_NEW, Boolean.TRUE);                }            } else if (this.session != null) {                this.session = null;            }        }        httpSession = this.session;    }    return httpSession;}
1a9615c355b1fdfb1cfdcbd10c066607967390f1bf848ca840334890854feb03
newNoSessionCreationException
private DisabledSessionException newNoSessionCreationException()
{    String msg = "Session creation has been disabled for the current request.  This exception indicates " + "that there is either a programming error (using a session when it should never be " + "used) or that Shiro's configuration needs to be adjusted to allow Sessions to be created " + "for the current request.  See the " + DisabledSessionException.class.getName() + " JavaDoc " + "for more.";    return new DisabledSessionException(msg);}
8671a3c391a4c1d16d46e234fe9b96b92ea0cef19bac007dc5f02541a7b0c75b
getSession
public HttpSession getSession()
{    return getSession(true);}
d9652c8fd847ec1d437759518061822e590079dafd23aa8ac8f148d365ca0301
isRequestedSessionIdValid
public boolean isRequestedSessionIdValid()
{    if (isHttpSessions()) {        return super.isRequestedSessionIdValid();    } else {        Boolean value = (Boolean) getAttribute(REFERENCED_SESSION_ID_IS_VALID);        return (value != null && value.equals(Boolean.TRUE));    }}
58571e473a7f2b59034411ca74271c20a7e9688d55f221aaced3111991a37006
isRequestedSessionIdFromCookie
public boolean isRequestedSessionIdFromCookie()
{    if (isHttpSessions()) {        return super.isRequestedSessionIdFromCookie();    } else {        String value = (String) getAttribute(REFERENCED_SESSION_ID_SOURCE);        return value != null && value.equals(COOKIE_SESSION_ID_SOURCE);    }}
ae3f8403b41004eed4053f56fbcb00d1bcffbde205053e065abaad4caeedd167
isRequestedSessionIdFromURL
public boolean isRequestedSessionIdFromURL()
{    if (isHttpSessions()) {        return super.isRequestedSessionIdFromURL();    } else {        String value = (String) getAttribute(REFERENCED_SESSION_ID_SOURCE);        return value != null && value.equals(URL_SESSION_ID_SOURCE);    }}
91fe83cc24a51476b247823443d2e339ad738ac0b2c5dcc936fc91135461a066
isRequestedSessionIdFromUrl
public boolean isRequestedSessionIdFromUrl()
{    return isRequestedSessionIdFromURL();}
423e523586283771447f9add45491aa20c7df08442fcb0932210f46449eabda6
getObject
public Object getObject()
{    return object;}
239fbe3eb64d679cbac1161825b07d6a8436ead3c6c3d140d9caec2275827023
getName
public String getName()
{    return getObject().toString();}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    return object.hashCode();}
8d37d11c7ecfc0d0589696a89cb385888c83bd3e43ea0c95a3b4ae4ef78180ce
equals
public boolean equals(Object o)
{    if (o instanceof ObjectPrincipal) {        ObjectPrincipal op = (ObjectPrincipal) o;        return getObject().equals(op.getObject());    }    return false;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return object.toString();}
814a3a9f575f12ec0d7b3ea940f9c6ab5cd01d5967af321d37792dcc17731878
getContext
public ServletContext getContext()
{    return context;}
d104f64c7e29d8acfe258638394dcccd6819a2292806765a657cf90562869b56
setContext
public void setContext(ServletContext context)
{    this.context = context;}
2ff2e38f4a6bac87ca57c3a1aef513914f8973d504e2844aecd2799803dda3b3
getRequest
public ShiroHttpServletRequest getRequest()
{    return request;}
b4ddf8e3d4605b5e95808f27dbf7d068fa7797340e1ae304e4b8764068acc0a2
setRequest
public void setRequest(ShiroHttpServletRequest request)
{    this.request = request;}
8d5846fc2b5f2be3a619eb1d31185982f7fd924f8b251c2a1c4e368eb30d8152
encodeRedirectURL
public String encodeRedirectURL(String url)
{    if (isEncodeable(toAbsolute(url))) {        return toEncoded(url, request.getSession().getId());    } else {        return url;    }}
a0728325ac6b420cddfac64868cd2a92dda5852972f4be95763ffc7b2aeec98d
encodeRedirectUrl
public String encodeRedirectUrl(String s)
{    return encodeRedirectURL(s);}
82760854d4e02dad6084fa334c7b65a89bee24cf6c5ea23a66bd35d832bcf65c
encodeURL
public String encodeURL(String url)
{    String absolute = toAbsolute(url);    if (isEncodeable(absolute)) {                if (url.equalsIgnoreCase("")) {            url = absolute;        }        return toEncoded(url, request.getSession().getId());    } else {        return url;    }}
1ffc28a540fa1552673f0068df42ff86a14fab29cb057e03baaa75c0ad5bcbe4
encodeUrl
public String encodeUrl(String s)
{    return encodeURL(s);}
58a9a9b5e31255de80c2b632d1cf315de40d11a792fb1f3bb0d20a35f5798a12
isEncodeable
protected boolean isEncodeable(final String location)
{        if (Boolean.FALSE.equals(request.getAttribute(ShiroHttpServletRequest.SESSION_ID_URL_REWRITING_ENABLED)))        return (false);    if (location == null)        return (false);        if (location.startsWith("#"))        return (false);        final HttpServletRequest hreq = request;    final HttpSession session = hreq.getSession(false);    if (session == null)        return (false);    if (hreq.isRequestedSessionIdFromCookie())        return (false);    return doIsEncodeable(hreq, session, location);}
be74774d58d75c986911373c2b28229ffd9fafaeb2e69e048bb4d87991326841
doIsEncodeable
private boolean doIsEncodeable(HttpServletRequest hreq, HttpSession session, String location)
{        URL url;    try {        url = new URL(location);    } catch (MalformedURLException e) {        return (false);    }        if (!hreq.getScheme().equalsIgnoreCase(url.getProtocol()))        return (false);    if (!hreq.getServerName().equalsIgnoreCase(url.getHost()))        return (false);    int serverPort = hreq.getServerPort();    if (serverPort == -1) {        if ("https".equals(hreq.getScheme()))            serverPort = 443;        else            serverPort = 80;    }    int urlPort = url.getPort();    if (urlPort == -1) {        if ("https".equals(url.getProtocol()))            urlPort = 443;        else            urlPort = 80;    }    if (serverPort != urlPort)        return (false);    String contextPath = getRequest().getContextPath();    if (contextPath != null) {        String file = url.getFile();        if ((file == null) || !file.startsWith(contextPath))            return (false);        String tok = ";" + DEFAULT_SESSION_ID_PARAMETER_NAME + "=" + session.getId();        if (file.indexOf(tok, contextPath.length()) >= 0)            return (false);    }        return (true);}
459f65639754ad5c6a6bab8f7672a8d41a0ba45350bc2c2e249836ed05e00502
toAbsolute
private String toAbsolute(String location)
{    if (location == null)        return (location);    boolean leadingSlash = location.startsWith("/");    if (leadingSlash || !hasScheme(location)) {        StringBuilder buf = new StringBuilder();        String scheme = request.getScheme();        String name = request.getServerName();        int port = request.getServerPort();        try {            buf.append(scheme).append("://").append(name);            if ((scheme.equals("http") && port != 80) || (scheme.equals("https") && port != 443)) {                buf.append(':').append(port);            }            if (!leadingSlash) {                String relativePath = request.getRequestURI();                int pos = relativePath.lastIndexOf('/');                relativePath = relativePath.substring(0, pos);                String encodedURI = URLEncoder.encode(relativePath, getCharacterEncoding());                buf.append(encodedURI).append('/');            }            buf.append(location);        } catch (IOException e) {            IllegalArgumentException iae = new IllegalArgumentException(location);            iae.initCause(e);            throw iae;        }        return buf.toString();    } else {        return location;    }}
95d4be794e43b9600ff879702ffcad5480f9f55ebfe2b10cc8f0002917bf9762
isSchemeChar
public static boolean isSchemeChar(char c)
{    return Character.isLetterOrDigit(c) || c == '+' || c == '-' || c == '.';}
98c1ff6c3d54666b87414b763d90e850e8538ce542e8667e65ed96713d77be56
hasScheme
private boolean hasScheme(String uri)
{    int len = uri.length();    for (int i = 0; i < len; i++) {        char c = uri.charAt(i);        if (c == ':') {            return i > 0;        } else if (!isSchemeChar(c)) {            return false;        }    }    return false;}
69a495a5ab0d23bf91a453cc031ec5a00f5f7e101e4491afb3d317c06b8f5c0b
toEncoded
protected String toEncoded(String url, String sessionId)
{    if ((url == null) || (sessionId == null))        return (url);    String path = url;    String query = "";    String anchor = "";    int question = url.indexOf('?');    if (question >= 0) {        path = url.substring(0, question);        query = url.substring(question);    }    int pound = path.indexOf('#');    if (pound >= 0) {        anchor = path.substring(pound);        path = path.substring(0, pound);    }    StringBuilder sb = new StringBuilder(path);    if (sb.length() > 0) {                sb.append(";");        sb.append(DEFAULT_SESSION_ID_PARAMETER_NAME);        sb.append("=");        sb.append(sessionId);    }    sb.append(anchor);    sb.append(query);    return (sb.toString());}
da08cdf75cc560a035cb95d54ab8d7f8ebf15cea6ebb6681d933f83f69d95057
hasMoreElements
public boolean hasMoreElements()
{    return false;}
ab967648282c1bb864bc31d2d8541e8e516e46281b5ebab3e9741a241bc4238d
nextElement
public Object nextElement()
{    return null;}
50f1ae63e0098d6f92b756e8e70a405bc0b42b3f93162d9645cc9818ec686511
getSession
public HttpSession getSession(String s)
{    return null;}
2138f5e8a59d367f3a7f5fcf5ca0d00a755f6cc548231d5ad8d4b90f3e0dc5a5
getIds
public Enumeration getIds()
{    return EMPTY_ENUMERATION;}
d9547d82f21fae987c0755d26b985bf504321cf6eb77372de06df2f22f592eae
getSession
public Session getSession()
{    return this.session;}
0de2c9b50af00eb95d805dbe19dd0dc0c5bd9b74cbd7b74d23c6153d3c013252
getCreationTime
public long getCreationTime()
{    try {        return getSession().getStartTimestamp().getTime();    } catch (Exception e) {        throw new IllegalStateException(e);    }}
09e8f13a9a603d31d64bb498b77d15572483824d843d0e82a570643192f62186
getId
public String getId()
{    return getSession().getId().toString();}
57b7d271bc2ae65ae212a842ca827a9f80ca955ae07cf377c6339e2b5250d99c
getLastAccessedTime
public long getLastAccessedTime()
{    return getSession().getLastAccessTime().getTime();}
080e6dfeffad4589787f1a6fda9a213672aea9ede479cb0719278c34fafc3319
getServletContext
public ServletContext getServletContext()
{    return this.servletContext;}
9bcb22fa91a74f0dabe4c636efac6b646a816395435c19e9f6a49d7d22c6d9c2
setMaxInactiveInterval
public void setMaxInactiveInterval(int i)
{    try {        getSession().setTimeout(i * 1000);    } catch (InvalidSessionException e) {        throw new IllegalStateException(e);    }}
ac8d1c4128815a8afdad8b192b94467124b405b1c7606853e9330741abdb826f
getMaxInactiveInterval
public int getMaxInactiveInterval()
{    try {        return (new Long(getSession().getTimeout() / 1000)).intValue();    } catch (InvalidSessionException e) {        throw new IllegalStateException(e);    }}
c3cff0f2d47f177922fbb1dbf2f46c9409cef2e42cddb6c461bdc9dafd14ece9
getSessionContext
public javax.servlet.http.HttpSessionContext getSessionContext()
{    return HTTP_SESSION_CONTEXT;}
a9872d2340279dcfcf6333d59d5ddf16bc9a8f18dd2066cd92e79c2fafb5d73d
getAttribute
public Object getAttribute(String s)
{    try {        return getSession().getAttribute(s);    } catch (InvalidSessionException e) {        throw new IllegalStateException(e);    }}
edeca7c8aee50ff0154afec3a2637c9395a8f064b418e3d1564c3b08fff09e2c
getValue
public Object getValue(String s)
{    return getAttribute(s);}
11990a6c7a84fe3c73c5c03c12a9afa5a5017161076742c63e27ad32e2bf98d2
getKeyNames
protected Set<String> getKeyNames()
{    Collection<Object> keySet;    try {        keySet = getSession().getAttributeKeys();    } catch (InvalidSessionException e) {        throw new IllegalStateException(e);    }    Set<String> keyNames;    if (keySet != null && !keySet.isEmpty()) {        keyNames = new HashSet<String>(keySet.size());        for (Object o : keySet) {            keyNames.add(o.toString());        }    } else {        keyNames = Collections.EMPTY_SET;    }    return keyNames;}
62f20ebcf0b01f327b924dd5b0865074817a1919bc3e9de8f8ede69b6975e6e2
getAttributeNames
public Enumeration getAttributeNames()
{    Set<String> keyNames = getKeyNames();    final Iterator iterator = keyNames.iterator();    return new Enumeration() {        public boolean hasMoreElements() {            return iterator.hasNext();        }        public Object nextElement() {            return iterator.next();        }    };}
da08cdf75cc560a035cb95d54ab8d7f8ebf15cea6ebb6681d933f83f69d95057
hasMoreElements
public boolean hasMoreElements()
{    return iterator.hasNext();}
ab967648282c1bb864bc31d2d8541e8e516e46281b5ebab3e9741a241bc4238d
nextElement
public Object nextElement()
{    return iterator.next();}
c83c7e4481b31b205de3031b3ab16213e97a701d3bac7bfd6fe037a40d1961f2
getValueNames
public String[] getValueNames()
{    Set<String> keyNames = getKeyNames();    String[] array = new String[keyNames.size()];    if (keyNames.size() > 0) {        array = keyNames.toArray(array);    }    return array;}
e75ef21dca1f5e33fa6550c857858e58201de9069e1f327092df50d757b568c1
afterBound
protected void afterBound(String s, Object o)
{    if (o instanceof HttpSessionBindingListener) {        HttpSessionBindingListener listener = (HttpSessionBindingListener) o;        HttpSessionBindingEvent event = new HttpSessionBindingEvent(this, s, o);        listener.valueBound(event);    }}
488d09214acffb33ff6460cce9ae1fcecd92ffc6d70f15293c72c1884728030e
afterUnbound
protected void afterUnbound(String s, Object o)
{    if (o instanceof HttpSessionBindingListener) {        HttpSessionBindingListener listener = (HttpSessionBindingListener) o;        HttpSessionBindingEvent event = new HttpSessionBindingEvent(this, s, o);        listener.valueUnbound(event);    }}
0905b406af700397a9fb14c25e4a028563821de54f48473a0e689d81eb1d5109
setAttribute
public void setAttribute(String s, Object o)
{    try {        getSession().setAttribute(s, o);        afterBound(s, o);    } catch (InvalidSessionException e) {                try {            afterUnbound(s, o);        } finally {                        throw new IllegalStateException(e);        }    }}
e96655ade26219fe051e29f2b2c6e231c1b6fdca42d61b057b9c10191592670b
putValue
public void putValue(String s, Object o)
{    setAttribute(s, o);}
b40d6372a66d06dd6ee823073af65661bc32174b93af1b4ca8d5f3bbc5ccd407
removeAttribute
public void removeAttribute(String s)
{    try {        Object attribute = getSession().removeAttribute(s);        afterUnbound(s, attribute);    } catch (InvalidSessionException e) {        throw new IllegalStateException(e);    }}
cb3f2fdb54f18b7d4f4929174d017f43e7dfdf09de708d28466c591dfc87e4d9
removeValue
public void removeValue(String s)
{    removeAttribute(s);}
02c5001a408071b0eb103e047277f17197b801882b18d2eeade62e32e583f4cc
invalidate
public void invalidate()
{    try {        getSession().stop();    } catch (InvalidSessionException e) {        throw new IllegalStateException(e);    }}
fb2d87d6dc04cd2a3703ce98380922203bddb39186a629b7657f27bf84eadfa3
isNew
public boolean isNew()
{    Boolean value = (Boolean) currentRequest.getAttribute(ShiroHttpServletRequest.REFERENCED_SESSION_IS_NEW);    return value != null && value.equals(Boolean.TRUE);}
239fbe3eb64d679cbac1161825b07d6a8436ead3c6c3d140d9caec2275827023
getName
public String getName()
{    return name;}
f498f22eaf0816bf385a43365651d1b6d0455905fdd2d6be01ceefeb84e8f432
setName
public void setName(String name)
{    if (!StringUtils.hasText(name)) {        throw new IllegalArgumentException("Name cannot be null/empty.");    }    this.name = name;}
3ffb3c74afa5355644c1f0bfdb5098954de2d3a057f971596bdb7110ccb67b1b
getValue
public String getValue()
{    return value;}
e711c8f2effc698edc71bd6b3e96530dc7034c8c55d38ce9f9541bf3f17925af
setValue
public void setValue(String value)
{    this.value = value;}
2afa3f4e511a0b8f677d7d0fa60036bae79f8440d8570c85f48360a35fb31172
getComment
public String getComment()
{    return comment;}
1ec1704552f6e4a0e72aaaac2b93b9abfc5aef2b5d9b3c8107813b98c2ea19a5
setComment
public void setComment(String comment)
{    this.comment = comment;}
313e57c1be1e53c3ca27c7c5dbe49808d3145421a933669a6d99d52a16beb97b
getDomain
public String getDomain()
{    return domain;}
e850b00322200899828da6b947f31721f4256bc0aaddacd215b992b8961f5147
setDomain
public void setDomain(String domain)
{    this.domain = domain;}
58e7b527ecd5014eaf5f30fc9c50ba33e1f005f8ce9d24246253d62377788662
getPath
public String getPath()
{    return path;}
de663c4293dc7b4649bc9588c013d3f165ef1bdb800ee63172ba8730f7b71d91
setPath
public void setPath(String path)
{    this.path = path;}
fbafabc3edb6c29395e677aa5e039ae27f16128dc3a5eaa26a46ca2011937832
getMaxAge
public int getMaxAge()
{    return maxAge;}
498b1fb3280cee49fa1648f9aeb12124cefa78558fe6e74eeab17f43df311351
setMaxAge
public void setMaxAge(int maxAge)
{    this.maxAge = Math.max(DEFAULT_MAX_AGE, maxAge);}
54bc0b349a40e5994cc6b2b7c63b7bdb8eaebafd56321e290c868307cb2a4574
getVersion
public int getVersion()
{    return version;}
24c1e0bb2fb8e08d8dbd6c1e1cc4e481fdcd5538e19be533ec851e4aedbf0628
setVersion
public void setVersion(int version)
{    this.version = Math.max(DEFAULT_VERSION, version);}
c6a8b35027b486f9efda96936274975b221803473bdc28c586ea3371f63c78bd
isSecure
public boolean isSecure()
{    return secure;}
46de2bc850f6a2c6c43ba4b717020d5c84cd2a17f8d2785045556e61aaac20b9
setSecure
public void setSecure(boolean secure)
{    this.secure = secure;}
ddfb3525d7edaa62e9c3b09e756eaef20978ec8e3769c01d3f939162951891ba
isHttpOnly
public boolean isHttpOnly()
{    return httpOnly;}
f0db71ed89baa1d5fe24f32e97286c1aea67811f43419e006a2da8ecc5adba29
setHttpOnly
public void setHttpOnly(boolean httpOnly)
{    this.httpOnly = httpOnly;}
eba5ec07fac8e430a2720afdff1ae104b8356de9831c1426a61e4f96374a0c8e
getSameSite
public SameSiteOptions getSameSite()
{    return sameSite;}
6a1ea4bcb7a9b4a18d8e1b09b5723a964335e0138aa985ff3b6c66a8e11f4b81
setSameSite
public void setSameSite(SameSiteOptions sameSite)
{    this.sameSite = sameSite;}
4a42f6395d3d914bb741d6f3eb07475c11b491508744f6cbdb600895d8541067
calculatePath
private String calculatePath(HttpServletRequest request)
{    String path = StringUtils.clean(getPath());    if (!StringUtils.hasText(path)) {        path = StringUtils.clean(request.getContextPath());    }        if (path == null) {        path = ROOT_PATH;    }    log.trace("calculated path: {}", path);    return path;}
6bf70d88b05cb197c4d6c00a25231eaaba16b529c25ba1bd41ddf737dbcfdf84
saveTo
public void saveTo(HttpServletRequest request, HttpServletResponse response)
{    String name = getName();    String value = getValue();    String comment = getComment();    String domain = getDomain();    String path = calculatePath(request);    int maxAge = getMaxAge();    int version = getVersion();    boolean secure = isSecure();    boolean httpOnly = isHttpOnly();    SameSiteOptions sameSite = getSameSite();    addCookieHeader(response, name, value, comment, domain, path, maxAge, version, secure, httpOnly, sameSite);}
85bf000a81655e41920a7a7914f930f0b71d83a77676f50b36f60507a3a7f47e
addCookieHeader
private void addCookieHeader(HttpServletResponse response, String name, String value, String comment, String domain, String path, int maxAge, int version, boolean secure, boolean httpOnly, SameSiteOptions sameSite)
{    String headerValue = buildHeaderValue(name, value, comment, domain, path, maxAge, version, secure, httpOnly, sameSite);    response.addHeader(COOKIE_HEADER_NAME, headerValue);    if (log.isDebugEnabled()) {        log.debug("Added HttpServletResponse Cookie [{}]", headerValue);    }}
784e4a9c2ccd89c1a7ccf441e1d54739a6ad475ef60811ecb65bec0a1b2394dc
buildHeaderValue
protected String buildHeaderValue(String name, String value, String comment, String domain, String path, int maxAge, int version, boolean secure, boolean httpOnly)
{    return buildHeaderValue(name, value, comment, domain, path, maxAge, version, secure, httpOnly, getSameSite());}
81948ae2557ffd48e8d033485f07069e0cf3e3132251a772b26c373cab5a67b5
buildHeaderValue
protected String buildHeaderValue(String name, String value, String comment, String domain, String path, int maxAge, int version, boolean secure, boolean httpOnly, SameSiteOptions sameSite)
{    if (!StringUtils.hasText(name)) {        throw new IllegalStateException("Cookie name cannot be null/empty.");    }    StringBuilder sb = new StringBuilder(name).append(NAME_VALUE_DELIMITER);    if (StringUtils.hasText(value)) {        sb.append(value);    }    appendComment(sb, comment);    appendDomain(sb, domain);    appendPath(sb, path);    appendExpires(sb, maxAge);    appendVersion(sb, version);    appendSecure(sb, secure);    appendHttpOnly(sb, httpOnly);    appendSameSite(sb, sameSite);    return sb.toString();}
e6860a7b71035086a76a9b1f8eb42651ebc8d8fd39c8940b00ecea106e323ce2
appendComment
private void appendComment(StringBuilder sb, String comment)
{    if (StringUtils.hasText(comment)) {        sb.append(ATTRIBUTE_DELIMITER);        sb.append(COMMENT_ATTRIBUTE_NAME).append(NAME_VALUE_DELIMITER).append(comment);    }}
277fca623715be1e139b18a3d755ec0de79dbf30847c5a25fe03d61b1ffc3607
appendDomain
private void appendDomain(StringBuilder sb, String domain)
{    if (StringUtils.hasText(domain)) {        sb.append(ATTRIBUTE_DELIMITER);        sb.append(DOMAIN_ATTRIBUTE_NAME).append(NAME_VALUE_DELIMITER).append(domain);    }}
fcfc177ca57ac917766a2fb26e0a90d9c5fa72ac4ee35ab193521da94f366e09
appendPath
private void appendPath(StringBuilder sb, String path)
{    if (StringUtils.hasText(path)) {        sb.append(ATTRIBUTE_DELIMITER);        sb.append(PATH_ATTRIBUTE_NAME).append(NAME_VALUE_DELIMITER).append(path);    }}
27032d50e10c98c659b707234a4f8fb806e98dbd3d7b34daa375aea735fa19ca
appendExpires
private void appendExpires(StringBuilder sb, int maxAge)
{        if (maxAge >= 0) {        sb.append(ATTRIBUTE_DELIMITER);        sb.append(MAXAGE_ATTRIBUTE_NAME).append(NAME_VALUE_DELIMITER).append(maxAge);        sb.append(ATTRIBUTE_DELIMITER);        Date expires;        if (maxAge == 0) {                        expires = new Date(System.currentTimeMillis() - DAY_MILLIS);        } else {                        Calendar cal = Calendar.getInstance();            cal.add(Calendar.SECOND, maxAge);            expires = cal.getTime();        }        String formatted = toCookieDate(expires);        sb.append(EXPIRES_ATTRIBUTE_NAME).append(NAME_VALUE_DELIMITER).append(formatted);    }}
942369654a3fcfb63b211ded8d82972a9fdb5414cab41889f09ed21a0b08df9f
appendVersion
private void appendVersion(StringBuilder sb, int version)
{    if (version > DEFAULT_VERSION) {        sb.append(ATTRIBUTE_DELIMITER);        sb.append(VERSION_ATTRIBUTE_NAME).append(NAME_VALUE_DELIMITER).append(version);    }}
6c86cd12a562ff392dc1f1ccfefcee9dc65b5ef86a97c73c56a7d90d4609a133
appendSecure
private void appendSecure(StringBuilder sb, boolean secure)
{    if (secure) {        sb.append(ATTRIBUTE_DELIMITER);                sb.append(SECURE_ATTRIBUTE_NAME);    }}
fd3d0c33741f154824b256b0905e50cb08fcd7e31e7724b16b3414d675c1b5d7
appendHttpOnly
private void appendHttpOnly(StringBuilder sb, boolean httpOnly)
{    if (httpOnly) {        sb.append(ATTRIBUTE_DELIMITER);                sb.append(HTTP_ONLY_ATTRIBUTE_NAME);    }}
aa7281c13a77c6f7248c3fa84470199023e47c5bb1741282612d3eb9697add32
appendSameSite
private void appendSameSite(StringBuilder sb, SameSiteOptions sameSite)
{    if (sameSite != null) {        sb.append(ATTRIBUTE_DELIMITER);        sb.append(SAME_SITE_ATTRIBUTE_NAME).append(NAME_VALUE_DELIMITER).append(sameSite.toString().toLowerCase(Locale.ENGLISH));    }}
21baf6b2b985f3a33ff22a14a74601aaa21563eef4755c0061e0b88b3e275e3e
pathMatches
private boolean pathMatches(String cookiePath, String requestPath)
{    if (!requestPath.startsWith(cookiePath)) {        return false;    }    return requestPath.length() == cookiePath.length() || cookiePath.charAt(cookiePath.length() - 1) == '/' || requestPath.charAt(cookiePath.length()) == '/';}
7b5e8feb4d5807a22bbaf9e003aeec6db94c5bb8ca28a71aba67f0a386a9c268
toCookieDate
private static String toCookieDate(Date date)
{    TimeZone tz = TimeZone.getTimeZone(GMT_TIME_ZONE_ID);    DateFormat fmt = new SimpleDateFormat(COOKIE_DATE_FORMAT_STRING, Locale.US);    fmt.setTimeZone(tz);    return fmt.format(date);}
e3742f0abdef2a2b339a7dd636da905e1ce46fc13c037e638c5d3908b101ed81
removeFrom
public void removeFrom(HttpServletRequest request, HttpServletResponse response)
{    String name = getName();    String value = DELETED_COOKIE_VALUE;        String comment = null;    String domain = getDomain();    String path = calculatePath(request);        int maxAge = 0;    int version = getVersion();    boolean secure = isSecure();        boolean httpOnly = false;    SameSiteOptions sameSite = null;    addCookieHeader(response, name, value, comment, domain, path, maxAge, version, secure, httpOnly, sameSite);    log.trace("Removed '{}' cookie by setting maxAge=0", name);}
6122a7f245aff58fd76820060d05e391f6cd4aa32400e7aef5edd3e1015136f1
readValue
public String readValue(HttpServletRequest request, HttpServletResponse ignored)
{    String name = getName();    String value = null;    javax.servlet.http.Cookie cookie = getCookie(request, name);    if (cookie != null) {                String path = StringUtils.clean(getPath());        if (path != null && !pathMatches(path, request.getRequestURI())) {            log.warn("Found '{}' cookie at path '{}', but should be only used for '{}'", new Object[] { name, request.getRequestURI(), path });        } else {            value = cookie.getValue();            log.debug("Found '{}' cookie value [{}]", name, value);        }    } else {        log.trace("No '{}' cookie value", name);    }    return value;}
fe9feb80da3626021bd6f6bd5e7839ed8de51634e8495ea7e47bfea10ea65326
getCookie
private static javax.servlet.http.Cookie getCookie(HttpServletRequest request, String cookieName)
{    javax.servlet.http.Cookie[] cookies = request.getCookies();    if (cookies != null) {        for (javax.servlet.http.Cookie cookie : cookies) {            if (cookie.getName().equals(cookieName)) {                return cookie;            }        }    }    return null;}
1b47661190b3813bb9939d9e39dd3b48f7a2a65d160e0ec76b70cd54f7b7471c
getId
public Serializable getId()
{    return httpSession.getId();}
fe8d302181c3820c1119f97c4bef14795e630da09a9c873a888ff4d09d86b275
getStartTimestamp
public Date getStartTimestamp()
{    return new Date(httpSession.getCreationTime());}
25ba1f7fdfb9e040a5661969c381484730fc729c24e3b2a787c587550a058803
getLastAccessTime
public Date getLastAccessTime()
{    return new Date(httpSession.getLastAccessedTime());}
1b89852ed0920e44be17fab17170d5e824a68e67943fbd9366e0cfcfba6d756e
getTimeout
public long getTimeout() throws InvalidSessionException
{    try {        return httpSession.getMaxInactiveInterval() * 1000L;    } catch (Exception e) {        throw new InvalidSessionException(e);    }}
d6fb8156f0da45eb46e124ff490bb291700ed2520e18bc78d544c9f66b9d64b1
setTimeout
public void setTimeout(long maxIdleTimeInMillis) throws InvalidSessionException
{    try {        int timeout = Long.valueOf(maxIdleTimeInMillis / 1000).intValue();        httpSession.setMaxInactiveInterval(timeout);    } catch (Exception e) {        throw new InvalidSessionException(e);    }}
7782eedf0a784a707caf7d4f137722c40907e78dd4cd65ce9a32b7843de64c7b
setHost
protected void setHost(String host)
{    setAttribute(HOST_SESSION_KEY, host);}
165b1c9352ad3d309866d5286d1a7fd8eae4d022cb5ad661b1269ac75c218ebb
getHost
public String getHost()
{    return (String) getAttribute(HOST_SESSION_KEY);}
694896c50108ffab355e12f28c5b1f039e4ee4ce710ccdfab3e35afaa5389ff7
touch
public void touch() throws InvalidSessionException
{        try {        httpSession.setAttribute(TOUCH_OBJECT_SESSION_KEY, TOUCH_OBJECT_SESSION_KEY);        httpSession.removeAttribute(TOUCH_OBJECT_SESSION_KEY);    } catch (Exception e) {        throw new InvalidSessionException(e);    }}
1a1361a165bebeb83cd49e6148367728764fd34bea14dda08db81c1651e25a47
stop
public void stop() throws InvalidSessionException
{    try {        httpSession.invalidate();    } catch (Exception e) {        throw new InvalidSessionException(e);    }}
04c037b3e30baa218c131cdccbd86fa4d369636d55919a6c3ae536baf344cf08
getAttributeKeys
public Collection<Object> getAttributeKeys() throws InvalidSessionException
{    try {        Enumeration namesEnum = httpSession.getAttributeNames();        Collection<Object> keys = null;        if (namesEnum != null) {            keys = new ArrayList<Object>();            while (namesEnum.hasMoreElements()) {                keys.add(namesEnum.nextElement());            }        }        return keys;    } catch (Exception e) {        throw new InvalidSessionException(e);    }}
a5ae56e6e67b57f637dfedfbcec190b5280b5821e9839809561aa4316e8a0377
assertString
private static String assertString(Object key)
{    if (!(key instanceof String)) {        String msg = "HttpSession based implementations of the Shiro Session interface requires attribute keys " + "to be String objects.  The HttpSession class does not support anything other than String keys.";        throw new IllegalArgumentException(msg);    }    return (String) key;}
2e839eafb57402a6b8147b09ae48d14cc0d2d6f0b83cee1bf7b69ae9cb0332a9
getAttribute
public Object getAttribute(Object key) throws InvalidSessionException
{    try {        return httpSession.getAttribute(assertString(key));    } catch (Exception e) {        throw new InvalidSessionException(e);    }}
fabc75ab1f1c81583fce31e6ffb2bef9aa9456483d521aa88f7fea3511e46c54
setAttribute
public void setAttribute(Object key, Object value) throws InvalidSessionException
{    try {        httpSession.setAttribute(assertString(key), value);    } catch (Exception e) {        throw new InvalidSessionException(e);    }}
2eae1ea784aa790ee89b8281b3f06790fdb79f2dff73ec48f9358c0a2a020dae
removeAttribute
public Object removeAttribute(Object key) throws InvalidSessionException
{    try {        String sKey = assertString(key);        Object removed = httpSession.getAttribute(sKey);        httpSession.removeAttribute(sKey);        return removed;    } catch (Exception e) {        throw new InvalidSessionException(e);    }}
076bd1bbc6bb379c4a07d333da95e51879c39fca37e3227a8ec1ac90fdbc0c39
setServletRequest
public void setServletRequest(ServletRequest request)
{    if (request != null) {        put(SERVLET_REQUEST, request);    }}
118d39b99271a04bcaeee812297acd2d703a8cbe3307a4572e228a3683963b7e
getServletRequest
public ServletRequest getServletRequest()
{    return getTypedValue(SERVLET_REQUEST, ServletRequest.class);}
c98cec48cb16a3f88dc769d87646932576dc3192c802119ad262feba568a8466
setServletResponse
public void setServletResponse(ServletResponse response)
{    if (response != null) {        put(SERVLET_RESPONSE, response);    }}
28ef88a46b6d6497478c06d4cbdb42cd04c559489095ca8320a698b97789ede0
getServletResponse
public ServletResponse getServletResponse()
{    return getTypedValue(SERVLET_RESPONSE, ServletResponse.class);}
9527c307932574df66b0b95594b606b581adf90a233b517b60f6dd66ea6ee459
getSessionIdCookie
public Cookie getSessionIdCookie()
{    return sessionIdCookie;}
446a062664b4db37221a6e1f3bb98736daca3b2a255fda09c355c2fe009d44c1
setSessionIdCookie
public void setSessionIdCookie(Cookie sessionIdCookie)
{    this.sessionIdCookie = sessionIdCookie;}
eb6cd674b1bb2a60c6a60b0ae82e443a45f0eef3bc1d2e4106d398b45e62eaaa
isSessionIdCookieEnabled
public boolean isSessionIdCookieEnabled()
{    return sessionIdCookieEnabled;}
c5948521df69900cd300a8f94d7e3de8f2581c2a264a2851b945191845b13d38
setSessionIdCookieEnabled
public void setSessionIdCookieEnabled(boolean sessionIdCookieEnabled)
{    this.sessionIdCookieEnabled = sessionIdCookieEnabled;}
c307cf06a12aeb3dd861c301b570ed054890085097b29e91104f34dfdbd8b9da
isSessionIdUrlRewritingEnabled
public boolean isSessionIdUrlRewritingEnabled()
{    return sessionIdUrlRewritingEnabled;}
df10ce688de3705c4cf2656685a95d118619287e01262f93891836f6dd51cfc8
setSessionIdUrlRewritingEnabled
public void setSessionIdUrlRewritingEnabled(boolean sessionIdUrlRewritingEnabled)
{    this.sessionIdUrlRewritingEnabled = sessionIdUrlRewritingEnabled;}
30cfbd29485d58b40e6b22449edc904d8a65a7c8abea93373f934f1441541900
storeSessionId
private void storeSessionId(Serializable currentId, HttpServletRequest request, HttpServletResponse response)
{    if (currentId == null) {        String msg = "sessionId cannot be null when persisting for subsequent requests.";        throw new IllegalArgumentException(msg);    }    Cookie template = getSessionIdCookie();    Cookie cookie = new SimpleCookie(template);    String idString = currentId.toString();    cookie.setValue(idString);    cookie.saveTo(request, response);    log.trace("Set session ID cookie for session with id {}", idString);}
ae01fc6ec896d69c69c68fe16b18f4d9cf432593341080ecb5ea148233296e57
removeSessionIdCookie
private void removeSessionIdCookie(HttpServletRequest request, HttpServletResponse response)
{    getSessionIdCookie().removeFrom(request, response);}
caeb98827297e79578fc37c1f0ecedc837229de84248b6ea236c4f151a2bf99e
getSessionIdCookieValue
private String getSessionIdCookieValue(ServletRequest request, ServletResponse response)
{    if (!isSessionIdCookieEnabled()) {        log.debug("Session ID cookie is disabled - session id will not be acquired from a request cookie.");        return null;    }    if (!(request instanceof HttpServletRequest)) {        log.debug("Current request is not an HttpServletRequest - cannot get session ID cookie.  Returning null.");        return null;    }    HttpServletRequest httpRequest = (HttpServletRequest) request;    return getSessionIdCookie().readValue(httpRequest, WebUtils.toHttp(response));}
0a7c4e4ee826ff38ea09363c27b01d9b0e4ab376d1aec3e2462e9fc23ef4c42a
getReferencedSessionId
private Serializable getReferencedSessionId(ServletRequest request, ServletResponse response)
{    String id = getSessionIdCookieValue(request, response);    if (id != null) {        request.setAttribute(ShiroHttpServletRequest.REFERENCED_SESSION_ID_SOURCE, ShiroHttpServletRequest.COOKIE_SESSION_ID_SOURCE);    } else {                        id = getUriPathSegmentParamValue(request, ShiroHttpSession.DEFAULT_SESSION_ID_NAME);        if (id == null) {                        String name = getSessionIdName();            id = request.getParameter(name);            if (id == null) {                                id = request.getParameter(name.toLowerCase());            }        }        if (id != null) {            request.setAttribute(ShiroHttpServletRequest.REFERENCED_SESSION_ID_SOURCE, ShiroHttpServletRequest.URL_SESSION_ID_SOURCE);        }    }    if (id != null) {        request.setAttribute(ShiroHttpServletRequest.REFERENCED_SESSION_ID, id);                        request.setAttribute(ShiroHttpServletRequest.REFERENCED_SESSION_ID_IS_VALID, Boolean.TRUE);    }        request.setAttribute(ShiroHttpServletRequest.SESSION_ID_URL_REWRITING_ENABLED, isSessionIdUrlRewritingEnabled());    return id;}
449f03dcc7a464990f9359f4f1c6ba430739fedc1123eac5bfe6cb7224bad0e8
getUriPathSegmentParamValue
private String getUriPathSegmentParamValue(ServletRequest servletRequest, String paramName)
{    if (!(servletRequest instanceof HttpServletRequest)) {        return null;    }    HttpServletRequest request = (HttpServletRequest) servletRequest;    String uri = request.getRequestURI();    if (uri == null) {        return null;    }    int queryStartIndex = uri.indexOf('?');    if (queryStartIndex >= 0) {                uri = uri.substring(0, queryStartIndex);    }        int index = uri.indexOf(';');    if (index < 0) {                return null;    }        final String TOKEN = paramName + "=";        uri = uri.substring(index + 1);        index = uri.lastIndexOf(TOKEN);    if (index < 0) {                return null;    }    uri = uri.substring(index + TOKEN.length());        index = uri.indexOf(';');    if (index >= 0) {        uri = uri.substring(0, index);    }        return uri;}
8028afbf9ab93043f83486d9e3190faabf3324d9b59ba6684823fca2a4b544d8
getSessionIdName
private String getSessionIdName()
{    String name = this.sessionIdCookie != null ? this.sessionIdCookie.getName() : null;    if (name == null) {        name = ShiroHttpSession.DEFAULT_SESSION_ID_NAME;    }    return name;}
395bee12196fae75c3166ed4cad649b2a7b7b3e503a7894d247c5cb14e1a096a
createExposedSession
protected Session createExposedSession(Session session, SessionContext context)
{    if (!WebUtils.isWeb(context)) {        return super.createExposedSession(session, context);    }    ServletRequest request = WebUtils.getRequest(context);    ServletResponse response = WebUtils.getResponse(context);    SessionKey key = new WebSessionKey(session.getId(), request, response);    return new DelegatingSession(this, key);}
fe832b3f81ae0077b40fa478f9c7b92ede527e2bf1c09942175ce6b66a1d71a7
createExposedSession
protected Session createExposedSession(Session session, SessionKey key)
{    if (!WebUtils.isWeb(key)) {        return super.createExposedSession(session, key);    }    ServletRequest request = WebUtils.getRequest(key);    ServletResponse response = WebUtils.getResponse(key);    SessionKey sessionKey = new WebSessionKey(session.getId(), request, response);    return new DelegatingSession(this, sessionKey);}
e3c04a12a31e2844bb03bd38f0d89c2c292cab482af7042cf749f173c6367e56
onStart
protected void onStart(Session session, SessionContext context)
{    super.onStart(session, context);    if (!WebUtils.isHttp(context)) {        log.debug("SessionContext argument is not HTTP compatible or does not have an HTTP request/response " + "pair. No session ID cookie will be set.");        return;    }    HttpServletRequest request = WebUtils.getHttpRequest(context);    HttpServletResponse response = WebUtils.getHttpResponse(context);    if (isSessionIdCookieEnabled()) {        Serializable sessionId = session.getId();        storeSessionId(sessionId, request, response);    } else {        log.debug("Session ID cookie is disabled.  No cookie has been set for new session with id {}", session.getId());    }    request.removeAttribute(ShiroHttpServletRequest.REFERENCED_SESSION_ID_SOURCE);    request.setAttribute(ShiroHttpServletRequest.REFERENCED_SESSION_IS_NEW, Boolean.TRUE);}
910c496eb5ad41c1ca176a6b0d69214dc549dc20e400697aea2d7abe5a4cbd2a
getSessionId
public Serializable getSessionId(SessionKey key)
{    Serializable id = super.getSessionId(key);    if (id == null && WebUtils.isWeb(key)) {        ServletRequest request = WebUtils.getRequest(key);        ServletResponse response = WebUtils.getResponse(key);        id = getSessionId(request, response);    }    return id;}
e4bf06edc0f231cda3836212fbba5260180cfac1a2cb70222ad31b4e5906a93b
getSessionId
protected Serializable getSessionId(ServletRequest request, ServletResponse response)
{    return getReferencedSessionId(request, response);}
9d83d50266b81c5bb1ef6214697ca7542c84f4208e166510288d628a1d2d6794
onExpiration
protected void onExpiration(Session s, ExpiredSessionException ese, SessionKey key)
{    super.onExpiration(s, ese, key);    onInvalidation(key);}
acab49de5d9c58133c0a609cabab1da3bcfc9817b2dafcbc70bbd0b24dd033fb
onInvalidation
protected void onInvalidation(Session session, InvalidSessionException ise, SessionKey key)
{    super.onInvalidation(session, ise, key);    onInvalidation(key);}
347e0d58dcf324219e903255b5619ff35916f59c1ef4d00b936851d93aadd9f0
onInvalidation
private void onInvalidation(SessionKey key)
{    ServletRequest request = WebUtils.getRequest(key);    if (request != null) {        request.removeAttribute(ShiroHttpServletRequest.REFERENCED_SESSION_ID_IS_VALID);    }    if (WebUtils.isHttp(key)) {        log.debug("Referenced session was invalid.  Removing session ID cookie.");        removeSessionIdCookie(WebUtils.getHttpRequest(key), WebUtils.getHttpResponse(key));    } else {        log.debug("SessionKey argument is not HTTP compatible or does not have an HTTP request/response " + "pair. Session ID cookie will not be removed due to invalidated session.");    }}
c8a106509e1800963e7c57f6d9defa8ed01787346761d98a50fa2ab917fdd190
onStop
protected void onStop(Session session, SessionKey key)
{    super.onStop(session, key);    if (WebUtils.isHttp(key)) {        HttpServletRequest request = WebUtils.getHttpRequest(key);        HttpServletResponse response = WebUtils.getHttpResponse(key);        log.debug("Session has been stopped (subject logout or explicit stop).  Removing session ID cookie.");        removeSessionIdCookie(request, response);    } else {        log.debug("SessionKey argument is not HTTP compatible or does not have an HTTP request/response " + "pair. Session ID cookie will not be removed due to stopped session.");    }}
e0cfa35004a73d321253972d1a007e234377516a524cd7c79280dffcae338144
isServletContainerSessions
public boolean isServletContainerSessions()
{    return false;}
f047e6523fa6f59d1abb697a1490844e75a271170f990d7e62a9846b71e57fcd
start
public Session start(SessionContext context) throws AuthorizationException
{    return createSession(context);}
1ba0f6efa895eae1aa4848cdb5378fb11d6abf12a66aa92299e8647a5f706ae7
getSession
public Session getSession(SessionKey key) throws SessionException
{    if (!WebUtils.isHttp(key)) {        String msg = "SessionKey must be an HTTP compatible implementation.";        throw new IllegalArgumentException(msg);    }    HttpServletRequest request = WebUtils.getHttpRequest(key);    Session session = null;    HttpSession httpSession = request.getSession(false);    if (httpSession != null) {        session = createSession(httpSession, request.getRemoteHost());    }    return session;}
07d2decbd1939992c389c480ca94ec7179623c12e524fda382f46c745c34a493
getHost
private String getHost(SessionContext context)
{    String host = context.getHost();    if (host == null) {        ServletRequest request = WebUtils.getRequest(context);        if (request != null) {            host = request.getRemoteHost();        }    }    return host;}
fda42aa1326f0e15dedb45d3d139cdc6ce808314649a0b3ad6c21882bd3e0d11
createSession
protected Session createSession(SessionContext sessionContext) throws AuthorizationException
{    if (!WebUtils.isHttp(sessionContext)) {        String msg = "SessionContext must be an HTTP compatible implementation.";        throw new IllegalArgumentException(msg);    }    HttpServletRequest request = WebUtils.getHttpRequest(sessionContext);    HttpSession httpSession = request.getSession();            String host = getHost(sessionContext);    return createSession(httpSession, host);}
dfe1d7065b3b6b600b958188617ff671c430383124cb8728ee718135fce2884a
createSession
protected Session createSession(HttpSession httpSession, String host)
{    return new HttpServletSession(httpSession, host);}
e0cfa35004a73d321253972d1a007e234377516a524cd7c79280dffcae338144
isServletContainerSessions
public boolean isServletContainerSessions()
{    return true;}
118d39b99271a04bcaeee812297acd2d703a8cbe3307a4572e228a3683963b7e
getServletRequest
public ServletRequest getServletRequest()
{    return servletRequest;}
28ef88a46b6d6497478c06d4cbdb42cd04c559489095ca8320a698b97789ede0
getServletResponse
public ServletResponse getServletResponse()
{    return servletResponse;}
2ffc47f427765bd78dfff6c55b3e32727e34d2794ede847ca985b1d4900d5004
resolveHost
public String resolveHost()
{    String host = super.resolveHost();    if (host == null) {        ServletRequest request = resolveServletRequest();        if (request != null) {            host = request.getRemoteHost();        }    }    return host;}
118d39b99271a04bcaeee812297acd2d703a8cbe3307a4572e228a3683963b7e
getServletRequest
public ServletRequest getServletRequest()
{    return getTypedValue(SERVLET_REQUEST, ServletRequest.class);}
076bd1bbc6bb379c4a07d333da95e51879c39fca37e3227a8ec1ac90fdbc0c39
setServletRequest
public void setServletRequest(ServletRequest request)
{    if (request != null) {        put(SERVLET_REQUEST, request);    }}
c03d8d6f0db72d201dfb3ec5bde1f16e8db31688f1a85ac803f336601283f891
resolveServletRequest
public ServletRequest resolveServletRequest()
{    ServletRequest request = getServletRequest();        if (request == null) {        Subject existing = getSubject();        if (existing instanceof WebSubject) {            request = ((WebSubject) existing).getServletRequest();        }    }    return request;}
28ef88a46b6d6497478c06d4cbdb42cd04c559489095ca8320a698b97789ede0
getServletResponse
public ServletResponse getServletResponse()
{    return getTypedValue(SERVLET_RESPONSE, ServletResponse.class);}
c98cec48cb16a3f88dc769d87646932576dc3192c802119ad262feba568a8466
setServletResponse
public void setServletResponse(ServletResponse response)
{    if (response != null) {        put(SERVLET_RESPONSE, response);    }}
61c81404af3981a59058f8bcb6ca8e97d8fc4d121b880341646d359568b157d8
resolveServletResponse
public ServletResponse resolveServletResponse()
{    ServletResponse response = getServletResponse();        if (response == null) {        Subject existing = getSubject();        if (existing instanceof WebSubject) {            response = ((WebSubject) existing).getServletResponse();        }    }    return response;}
118d39b99271a04bcaeee812297acd2d703a8cbe3307a4572e228a3683963b7e
getServletRequest
public ServletRequest getServletRequest()
{    return servletRequest;}
28ef88a46b6d6497478c06d4cbdb42cd04c559489095ca8320a698b97789ede0
getServletResponse
public ServletResponse getServletResponse()
{    return servletResponse;}
0ab3df878e17d83115e9dd0d9e8ea060e3fa9dd1f8161c0ce6492d5da11e97f2
isSessionCreationEnabled
protected boolean isSessionCreationEnabled()
{    boolean enabled = super.isSessionCreationEnabled();    return enabled && WebUtils._isSessionCreationEnabled(this);}
b64c62791d9c53467d77f04f5f78b6d25e1c271413c74dcb9fc68971f2da15c9
createSessionContext
protected SessionContext createSessionContext()
{    WebSessionContext wsc = new DefaultWebSessionContext();    String host = getHost();    if (StringUtils.hasText(host)) {        wsc.setHost(host);    }    wsc.setServletRequest(this.servletRequest);    wsc.setServletResponse(this.servletResponse);    return wsc;}
f12fd344d46f9efdce33e5b9075576c8df1715aeef80d30e51d5c297c9142d1d
newSubjectContextInstance
protected SubjectContext newSubjectContextInstance()
{    return new DefaultWebSubjectContext();}
5ccc42fe0c6190456d0107cb10bea33156f316b8be520e63b944a471422335ca
setRequest
protected Builder setRequest(ServletRequest request)
{    if (request != null) {        ((WebSubjectContext) getSubjectContext()).setServletRequest(request);    }    return this;}
a749c32da3f2b4c4060864dd9e48935808f224d5a185d8926733edea8bbd485d
setResponse
protected Builder setResponse(ServletResponse response)
{    if (response != null) {        ((WebSubjectContext) getSubjectContext()).setServletResponse(response);    }    return this;}
746a6e51d7dc29e298f07e1291cd03ca59d606d756f6c28d3f46ae49957f98e8
buildWebSubject
public WebSubject buildWebSubject()
{    Subject subject = super.buildSubject();    if (!(subject instanceof WebSubject)) {        String msg = "Subject implementation returned from the SecurityManager was not a " + WebSubject.class.getName() + " implementation.  Please ensure a Web-enabled SecurityManager " + "has been configured and made available to this builder.";        throw new IllegalStateException(msg);    }    return (WebSubject) subject;}
538d292d064013d8a73c7eccd71dfdc8ff40deb5dd21d0a2675bae660b1027bb
onDoStartTag
public int onDoStartTag() throws JspException
{    if (getSubject() != null && getSubject().isAuthenticated()) {        if (log.isTraceEnabled()) {            log.trace("Subject exists and is authenticated.  Tag body will be evaluated.");        }        return TagSupport.EVAL_BODY_INCLUDE;    } else {        if (log.isTraceEnabled()) {            log.trace("Subject does not exist or is not authenticated.  Tag body will not be evaluated.");        }        return TagSupport.SKIP_BODY;    }}
538d292d064013d8a73c7eccd71dfdc8ff40deb5dd21d0a2675bae660b1027bb
onDoStartTag
public int onDoStartTag() throws JspException
{    if (getSubject() == null || getSubject().getPrincipal() == null) {        if (log.isTraceEnabled()) {            log.trace("Subject does not exist or does not have a known identity (aka 'principal').  " + "Tag body will be evaluated.");        }        return TagSupport.EVAL_BODY_INCLUDE;    } else {        if (log.isTraceEnabled()) {            log.trace("Subject exists or has a known identity (aka 'principal').  " + "Tag body will not be evaluated.");        }        return TagSupport.SKIP_BODY;    }}
f9595c25c9fd9a188978f394badb57e5334d2be39cd6f32ef1dd4a1eaf92d3ef
showTagBody
protected boolean showTagBody(String roleNames)
{    boolean hasAnyRole = false;    Subject subject = getSubject();    if (subject != null) {                for (String role : roleNames.split(ROLE_NAMES_DELIMETER)) {            if (subject.hasRole(role.trim())) {                hasAnyRole = true;                break;            }        }    }    return hasAnyRole;}
8ceafe5539c47dc641afd7e68337f19d73f0ebe9b6f0571f5ffe126c21c00012
showTagBody
protected boolean showTagBody(String p)
{    return isPermitted(p);}
f8daf5f50208e897e1ea3646af3af5eedbcecc054a4b1b831d7d7fdb1982c4f8
showTagBody
protected boolean showTagBody(String roleName)
{    return getSubject() != null && getSubject().hasRole(roleName);}
8ceafe5539c47dc641afd7e68337f19d73f0ebe9b6f0571f5ffe126c21c00012
showTagBody
protected boolean showTagBody(String p)
{    return !isPermitted(p);}
f8daf5f50208e897e1ea3646af3af5eedbcecc054a4b1b831d7d7fdb1982c4f8
showTagBody
protected boolean showTagBody(String roleName)
{    boolean hasRole = getSubject() != null && getSubject().hasRole(roleName);    return !hasRole;}
538d292d064013d8a73c7eccd71dfdc8ff40deb5dd21d0a2675bae660b1027bb
onDoStartTag
public int onDoStartTag() throws JspException
{    if (getSubject() == null || !getSubject().isAuthenticated()) {        if (log.isTraceEnabled()) {            log.trace("Subject does not exist or is not authenticated.  Tag body will be evaluated.");        }        return TagSupport.EVAL_BODY_INCLUDE;    } else {        if (log.isTraceEnabled()) {            log.trace("Subject exists and is authenticated.  Tag body will not be evaluated.");        }        return TagSupport.SKIP_BODY;    }}
239fbe3eb64d679cbac1161825b07d6a8436ead3c6c3d140d9caec2275827023
getName
public String getName()
{    return name;}
f498f22eaf0816bf385a43365651d1b6d0455905fdd2d6be01ceefeb84e8f432
setName
public void setName(String name)
{    this.name = name;}
f931ca4483b87099257ad79ab6fe07096da3dee82bec470be04c30f409644305
verifyAttributes
protected void verifyAttributes() throws JspException
{    String permission = getName();    if (permission == null || permission.length() == 0) {        String msg = "The 'name' tag attribute must be set.";        throw new JspException(msg);    }}
538d292d064013d8a73c7eccd71dfdc8ff40deb5dd21d0a2675bae660b1027bb
onDoStartTag
public int onDoStartTag() throws JspException
{    String p = getName();    boolean show = showTagBody(p);    if (show) {        return TagSupport.EVAL_BODY_INCLUDE;    } else {        return TagSupport.SKIP_BODY;    }}
70740afff6e5a36b388da90f90670a7d7d39a54b416d9617800788810dfab8e1
isPermitted
protected boolean isPermitted(String p)
{    return getSubject() != null && getSubject().isPermitted(p);}
624f725337dde847c4a699397a02f1b5558c709c88374adb10e603d835f48c88
getType
public String getType()
{    return type;}
8ab53042064bb8f4e31355121ce5a5ccc6f3b8e9227cceb605ae26d51b21bddd
setType
public void setType(String type)
{    this.type = type;}
2928deefd9107f0437c270454e873204d967a5914db2f4552ab7d01312bb1e4a
getProperty
public String getProperty()
{    return property;}
9f34e0bf4cfffb63ac35d8cc78d81590a03260fa84ec8294313aab4bcc93fdb1
setProperty
public void setProperty(String property)
{    this.property = property;}
ee9bb53fab9c4745c45b4a746144b80867aad2e218c71e071dfc47288e0c0313
getDefaultValue
public String getDefaultValue()
{    return defaultValue;}
c3d5165114bf824442529a36e4b45ff75eaaa040bd046f1e16cc20a83823218d
setDefaultValue
public void setDefaultValue(String defaultValue)
{    this.defaultValue = defaultValue;}
538d292d064013d8a73c7eccd71dfdc8ff40deb5dd21d0a2675bae660b1027bb
onDoStartTag
public int onDoStartTag() throws JspException
{    String strValue = null;    if (getSubject() != null) {                Object principal;        if (type == null) {            principal = getSubject().getPrincipal();        } else {            principal = getPrincipalFromClassName();        }                if (principal != null) {            if (property == null) {                strValue = principal.toString();            } else {                strValue = getPrincipalProperty(principal, property);            }        }    }        if (strValue != null) {        try {            pageContext.getOut().write(strValue);        } catch (IOException e) {            throw new JspTagException("Error writing [" + strValue + "] to JSP.", e);        }    }    return SKIP_BODY;}
ae35d06032c584bd39630c5d67dc6916d0642f92551c4a833e0ad2ca144c05a9
getPrincipalFromClassName
private Object getPrincipalFromClassName()
{    Object principal = null;    try {        Class cls = Class.forName(type);        principal = getSubject().getPrincipals().oneByType(cls);    } catch (ClassNotFoundException e) {        if (log.isErrorEnabled()) {            log.error("Unable to find class for name [" + type + "]");        }    }    return principal;}
0b6f4abd5c2362d64d183f2b67f85d9bef66b8dea515eaf90e80da7c49555624
getPrincipalProperty
private String getPrincipalProperty(Object principal, String property) throws JspTagException
{    String strValue = null;    try {        BeanInfo bi = Introspector.getBeanInfo(principal.getClass());                boolean foundProperty = false;        for (PropertyDescriptor pd : bi.getPropertyDescriptors()) {            if (pd.getName().equals(property)) {                Object value = pd.getReadMethod().invoke(principal, (Object[]) null);                strValue = String.valueOf(value);                foundProperty = true;                break;            }        }        if (!foundProperty) {            final String message = "Property [" + property + "] not found in principal of type [" + principal.getClass().getName() + "]";            if (log.isErrorEnabled()) {                log.error(message);            }            throw new JspTagException(message);        }    } catch (Exception e) {        final String message = "Error reading property [" + property + "] from principal of type [" + principal.getClass().getName() + "]";        if (log.isErrorEnabled()) {            log.error(message, e);        }        throw new JspTagException(message, e);    }    return strValue;}
239fbe3eb64d679cbac1161825b07d6a8436ead3c6c3d140d9caec2275827023
getName
public String getName()
{    return name;}
f498f22eaf0816bf385a43365651d1b6d0455905fdd2d6be01ceefeb84e8f432
setName
public void setName(String name)
{    this.name = name;}
538d292d064013d8a73c7eccd71dfdc8ff40deb5dd21d0a2675bae660b1027bb
onDoStartTag
public int onDoStartTag() throws JspException
{    boolean show = showTagBody(getName());    if (show) {        return TagSupport.EVAL_BODY_INCLUDE;    } else {        return TagSupport.SKIP_BODY;    }}
500cdae0771f44e12e905471ad16b9b928667f19e77956836eb99281db53ebed
getSubject
protected Subject getSubject()
{    return SecurityUtils.getSubject();}
f931ca4483b87099257ad79ab6fe07096da3dee82bec470be04c30f409644305
verifyAttributes
protected void verifyAttributes() throws JspException
{}
7d3863ca1c941e064e9373042206280a9ae76e4e7b61d4155cbd0cdfdf189aa1
doStartTag
public int doStartTag() throws JspException
{    verifyAttributes();    return onDoStartTag();}
538d292d064013d8a73c7eccd71dfdc8ff40deb5dd21d0a2675bae660b1027bb
onDoStartTag
public int onDoStartTag() throws JspException
{    if (getSubject() != null && getSubject().getPrincipal() != null) {        if (log.isTraceEnabled()) {            log.trace("Subject has known identity (aka 'principal').  " + "Tag body will be evaluated.");        }        return EVAL_BODY_INCLUDE;    } else {        if (log.isTraceEnabled()) {            log.trace("Subject does not exist or have a known identity (aka 'principal').  " + "Tag body will not be evaluated.");        }        return SKIP_BODY;    }}
354afe66bbdb19ee4d620955bbb214ebf9b5aa09359dea30ffb867002b5a25bd
getUrl
public String getUrl()
{    return url;}
c3d2ee14b0a87d91276b6034d452ebbd50ed47914948b9edaea83747da585af6
setUrl
public void setUrl(String url)
{    this.url = url;}
522d4fca2cde1fe967e51268881d30e4fd1b13476745240973cf988d8050ff76
setContextRelative
public void setContextRelative(boolean contextRelative)
{    this.contextRelative = contextRelative;}
0e7f5930e53c4d49d3198ce988cc7a0087763cd32dbe0bf66eee7ffea6d6baf9
setHttp10Compatible
public void setHttp10Compatible(boolean http10Compatible)
{    this.http10Compatible = http10Compatible;}
d24a0576506fdc04e3d863f8f8c1b25fdcf4f9859d9592ea695d2e13736dbfd3
setEncodingScheme
public void setEncodingScheme(String encodingScheme)
{    this.encodingScheme = encodingScheme;}
b390eee1d3250218875b34bdbe690e5c1a9d222cad87094ecd043e3c1d9b5d57
renderMergedOutputModel
public final void renderMergedOutputModel(Map model, HttpServletRequest request, HttpServletResponse response) throws IOException
{        StringBuilder targetUrl = new StringBuilder();    if (this.contextRelative && getUrl().startsWith("/")) {                targetUrl.append(request.getContextPath());    }    targetUrl.append(getUrl());        appendQueryProperties(targetUrl, model, this.encodingScheme);    sendRedirect(request, response, targetUrl.toString(), this.http10Compatible);}
be4db37b1d056c94e7eeb8d5591415a087bb5ee2f1e86c52348fbdb01acca8a2
appendQueryProperties
protected void appendQueryProperties(StringBuilder targetUrl, Map model, String encodingScheme) throws UnsupportedEncodingException
{                String fragment = null;    int anchorIndex = targetUrl.toString().indexOf('#');    if (anchorIndex > -1) {        fragment = targetUrl.substring(anchorIndex);        targetUrl.delete(anchorIndex, targetUrl.length());    }        boolean first = (getUrl().indexOf('?') < 0);    Map queryProps = queryProperties(model);    if (queryProps != null) {        for (Object o : queryProps.entrySet()) {            if (first) {                targetUrl.append('?');                first = false;            } else {                targetUrl.append('&');            }            Map.Entry entry = (Map.Entry) o;            String encodedKey = urlEncode(entry.getKey().toString(), encodingScheme);            String encodedValue = (entry.getValue() != null ? urlEncode(entry.getValue().toString(), encodingScheme) : "");            targetUrl.append(encodedKey).append('=').append(encodedValue);        }    }        if (fragment != null) {        targetUrl.append(fragment);    }}
3986f4ade39870208643438e61f0f6d72bf200801a3e1d59d607f2f976ec0f47
urlEncode
protected String urlEncode(String input, String encodingScheme) throws UnsupportedEncodingException
{    return URLEncoder.encode(input, encodingScheme);}
1837f6e18506857cd3b9822fbc9b5df8a2aebc4c42d9d33811909b80da97219d
queryProperties
protected Map queryProperties(Map model)
{    return model;}
2032259582718317fbe458e9716ad9d175a3d62b4da049430e47d2b620341140
sendRedirect
protected void sendRedirect(HttpServletRequest request, HttpServletResponse response, String targetUrl, boolean http10Compatible) throws IOException
{    if (http10Compatible) {                response.sendRedirect(response.encodeRedirectURL(targetUrl));    } else {                response.setStatus(303);        response.setHeader("Location", response.encodeRedirectURL(targetUrl));    }}
1b04a48e342452eec0b4d88df8c129ec91df7eef97b2ef3d27b577702117da62
getMethod
public String getMethod()
{    return method;}
c7e000b510b9e11ec345d0fca397786eb5eabc475ef4adfe46dbc1cdbfb67ac4
getQueryString
public String getQueryString()
{    return queryString;}
36b26a68930fb147c2256251e6144032adb25b7313e9bfd66b646c5b3311234a
getRequestURI
public String getRequestURI()
{    return requestURI;}
1220fd586a09a477e4a44bf8af89cad9737637afdbeca777f92bdab51abadc81
getRequestUrl
public String getRequestUrl()
{    StringBuilder requestUrl = new StringBuilder(getRequestURI());    if (getQueryString() != null) {        requestUrl.append("?").append(getQueryString());    }    return requestUrl.toString();}
ba1c7b71dd5b6e631c7b9eeba9db84ccf42450b3b2ce5092f8ffc3748865f8ec
getPathWithinApplication
public static String getPathWithinApplication(HttpServletRequest request)
{    String contextPath = getContextPath(request);    String requestUri = getRequestUri(request);    if (StringUtils.startsWithIgnoreCase(requestUri, contextPath)) {                String path = requestUri.substring(contextPath.length());        return (StringUtils.hasText(path) ? path : "/");    } else {                return requestUri;    }}
c6ffca479e9cd2be4408705cd4d076681e7d39d623dec73a11069b40b2435835
getRequestUri
public static String getRequestUri(HttpServletRequest request)
{    String uri = (String) request.getAttribute(INCLUDE_REQUEST_URI_ATTRIBUTE);    if (uri == null) {        uri = request.getRequestURI();    }    return normalize(decodeAndCleanUriString(request, uri));}
b17d36b8f5cb83d9f36aa8da0b29f43e97b3ec10ba37fa02cda34d0cd871a60e
normalize
public static String normalize(String path)
{    return normalize(path, true);}
18aca33ae096a5b384e3790bba89fa539bdab1ea4236e3b3d69ffd0a482904c3
normalize
private static String normalize(String path, boolean replaceBackSlash)
{    if (path == null)        return null;        String normalized = path;    if (replaceBackSlash && normalized.indexOf('\\') >= 0)        normalized = normalized.replace('\\', '/');    if (normalized.equals("/."))        return "/";        if (!normalized.startsWith("/"))        normalized = "/" + normalized;        while (true) {        int index = normalized.indexOf("//");        if (index < 0)            break;        normalized = normalized.substring(0, index) + normalized.substring(index + 1);    }        while (true) {        int index = normalized.indexOf("/./");        if (index < 0)            break;        normalized = normalized.substring(0, index) + normalized.substring(index + 2);    }        while (true) {        int index = normalized.indexOf("/../");        if (index < 0)            break;        if (index == 0)                        return (null);        int index2 = normalized.lastIndexOf('/', index - 1);        normalized = normalized.substring(0, index2) + normalized.substring(index + 3);    }        return (normalized);}
54a007ce9ec440ab5b237df5dd656ebd969dc6c86543bdf8310dddac60bd1a00
decodeAndCleanUriString
private static String decodeAndCleanUriString(HttpServletRequest request, String uri)
{    uri = decodeRequestString(request, uri);    int semicolonIndex = uri.indexOf(';');    return (semicolonIndex != -1 ? uri.substring(0, semicolonIndex) : uri);}
7f5a18ee4059d85f57da76e68426ef2f07b1ba8e6dba834c1a3e9e5c2d1e5e2c
getContextPath
public static String getContextPath(HttpServletRequest request)
{    String contextPath = (String) request.getAttribute(INCLUDE_CONTEXT_PATH_ATTRIBUTE);    if (contextPath == null) {        contextPath = request.getContextPath();    }    contextPath = normalize(decodeRequestString(request, contextPath));    if ("/".equals(contextPath)) {                contextPath = "";    }    return contextPath;}
90d59ca2816a0bfe3558106303f5e62d3d8872a1322b32dabac898183d0331a5
getRequiredWebEnvironment
public static WebEnvironment getRequiredWebEnvironment(ServletContext sc) throws IllegalStateException
{    WebEnvironment we = getWebEnvironment(sc);    if (we == null) {        throw new IllegalStateException("No WebEnvironment found: no EnvironmentLoaderListener registered?");    }    return we;}
824f59c5713616c0b9077d1af769221d62d63a7232dd04af20b398b1d08ea58a
getWebEnvironment
public static WebEnvironment getWebEnvironment(ServletContext sc)
{    return getWebEnvironment(sc, EnvironmentLoader.ENVIRONMENT_ATTRIBUTE_KEY);}
fb92802b9ec5561dc47c47333ef4096d357b7d6763a777c371f049dbd1f83a75
getWebEnvironment
public static WebEnvironment getWebEnvironment(ServletContext sc, String attrName)
{    if (sc == null) {        throw new IllegalArgumentException("ServletContext argument must not be null.");    }    Object attr = sc.getAttribute(attrName);    if (attr == null) {        return null;    }    if (attr instanceof RuntimeException) {        throw (RuntimeException) attr;    }    if (attr instanceof Error) {        throw (Error) attr;    }    if (attr instanceof Exception) {        throw new IllegalStateException((Exception) attr);    }    if (!(attr instanceof WebEnvironment)) {        throw new IllegalStateException("Context attribute is not of type WebEnvironment: " + attr);    }    return (WebEnvironment) attr;}
34d18d61333bf604a5447a7b31d3c77628b764f676e79b9f854e3dff75e44ddf
decodeRequestString
public static String decodeRequestString(HttpServletRequest request, String source)
{    String enc = determineEncoding(request);    try {        return URLDecoder.decode(source, enc);    } catch (UnsupportedEncodingException ex) {        if (log.isWarnEnabled()) {            log.warn("Could not decode request string [" + source + "] with encoding '" + enc + "': falling back to platform default encoding; exception message: " + ex.getMessage());        }        return URLDecoder.decode(source);    }}
e8e19083f723ade881dcd670eb66ba09da01bfa90e88233e6e1cd1238592b4ed
determineEncoding
protected static String determineEncoding(HttpServletRequest request)
{    String enc = request.getCharacterEncoding();    if (enc == null) {        enc = DEFAULT_CHARACTER_ENCODING;    }    return enc;}
388e2b394ce952286f94e1d6b2fb4b6fb1700c7e0ba07544ca21f579debd5e93
isWeb
public static boolean isWeb(Object requestPairSource)
{    return requestPairSource instanceof RequestPairSource && isWeb((RequestPairSource) requestPairSource);}
b2e3f66ec07e22d2169b29d60f0e29dde01a211475582bfbdc1c0f265608b8bb
isHttp
public static boolean isHttp(Object requestPairSource)
{    return requestPairSource instanceof RequestPairSource && isHttp((RequestPairSource) requestPairSource);}
94e5eb22aa6693aba513849715e94b399084e67ec35939eac0c8aefffc17e50b
getRequest
public static ServletRequest getRequest(Object requestPairSource)
{    if (requestPairSource instanceof RequestPairSource) {        return ((RequestPairSource) requestPairSource).getServletRequest();    }    return null;}
bc1856689656f9f95cde204e00b58cec8b5c65a0102116fa9382e02714809d53
getResponse
public static ServletResponse getResponse(Object requestPairSource)
{    if (requestPairSource instanceof RequestPairSource) {        return ((RequestPairSource) requestPairSource).getServletResponse();    }    return null;}
63ad271a512d4eab334ed8b2429f6b718d92fbd18c01034d3def1757849a917b
getHttpRequest
public static HttpServletRequest getHttpRequest(Object requestPairSource)
{    ServletRequest request = getRequest(requestPairSource);    if (request instanceof HttpServletRequest) {        return (HttpServletRequest) request;    }    return null;}
802a736cf4e2add1068b3d7e01fd4e8be49b434a99f3d7fedf8f2a596aa9b807
getHttpResponse
public static HttpServletResponse getHttpResponse(Object requestPairSource)
{    ServletResponse response = getResponse(requestPairSource);    if (response instanceof HttpServletResponse) {        return (HttpServletResponse) response;    }    return null;}
9b9ca7bbb9cff5d00b66c3f9bfabf802cc69b3cda5f9b2854961e2012df7a61b
isWeb
private static boolean isWeb(RequestPairSource source)
{    ServletRequest request = source.getServletRequest();    ServletResponse response = source.getServletResponse();    return request != null && response != null;}
ff6b028f3317d0b1c117fba5a0caeb3e805e9b7ddd2945c8acd55e8bc9e61078
isHttp
private static boolean isHttp(RequestPairSource source)
{    ServletRequest request = source.getServletRequest();    ServletResponse response = source.getServletResponse();    return request instanceof HttpServletRequest && response instanceof HttpServletResponse;}
79690ad4b00fcc38565f7601ae13a7284390864fa237be7ddb8f0f22e0256301
_isSessionCreationEnabled
public static boolean _isSessionCreationEnabled(Object requestPairSource)
{    if (requestPairSource instanceof RequestPairSource) {        RequestPairSource source = (RequestPairSource) requestPairSource;        return _isSessionCreationEnabled(source.getServletRequest());    }        return true;}
0ce8be39b06736f0e09fe007a8b1ae5b194d0dfe9cf69e9e69fe64a24f9cbfb7
_isSessionCreationEnabled
public static boolean _isSessionCreationEnabled(ServletRequest request)
{    if (request != null) {        Object val = request.getAttribute(DefaultSubjectContext.SESSION_CREATION_ENABLED);        if (val != null && val instanceof Boolean) {            return (Boolean) val;        }    }        return true;}
1d308167d2b7d6b6e12d89075d802c0f00766a33e23e8553a038368fb78b1c94
toHttp
public static HttpServletRequest toHttp(ServletRequest request)
{    return (HttpServletRequest) request;}
aef9df1802156e085060e45678ed36e80898365fd37ea048e20023c13f066297
toHttp
public static HttpServletResponse toHttp(ServletResponse response)
{    return (HttpServletResponse) response;}
aca7bb8e95bf383e54228aacede5463617a4d673f8dc62ccb30ad928b1e8f6c2
issueRedirect
public static void issueRedirect(ServletRequest request, ServletResponse response, String url, Map queryParams, boolean contextRelative, boolean http10Compatible) throws IOException
{    RedirectView view = new RedirectView(url, contextRelative, http10Compatible);    view.renderMergedOutputModel(queryParams, toHttp(request), toHttp(response));}
61bf4bea59c8f2cec6f406482b496126572abc4a49865b94f90fcb2acb05421f
issueRedirect
public static void issueRedirect(ServletRequest request, ServletResponse response, String url) throws IOException
{    issueRedirect(request, response, url, null, true, true);}
3502d58f8556b1c04f1d28697c81823d4e901b7edc9622eb9e22231adb3c2567
issueRedirect
public static void issueRedirect(ServletRequest request, ServletResponse response, String url, Map queryParams) throws IOException
{    issueRedirect(request, response, url, queryParams, true, true);}
5eab09ffc9eb1275331c78690a594db3101097ab62b652261d22019aac937e70
issueRedirect
public static void issueRedirect(ServletRequest request, ServletResponse response, String url, Map queryParams, boolean contextRelative) throws IOException
{    issueRedirect(request, response, url, queryParams, contextRelative, true);}
c6f87491c2136703ff776592ee398228b71c84567041229047a75f840eee7067
isTrue
public static boolean isTrue(ServletRequest request, String paramName)
{    String value = getCleanParam(request, paramName);    return value != null && (value.equalsIgnoreCase("true") || value.equalsIgnoreCase("t") || value.equalsIgnoreCase("1") || value.equalsIgnoreCase("enabled") || value.equalsIgnoreCase("y") || value.equalsIgnoreCase("yes") || value.equalsIgnoreCase("on"));}
a2d0027745a61fe9e9491a3c8a06d384b0aece3759b0423fa04dcda9ed09da21
getCleanParam
public static String getCleanParam(ServletRequest request, String paramName)
{    return StringUtils.clean(request.getParameter(paramName));}
5a7f8b6ca18347b8efa2981dc3364e601480d30f0f24d646f46c49fdcc840e39
saveRequest
public static void saveRequest(ServletRequest request)
{    Subject subject = SecurityUtils.getSubject();    Session session = subject.getSession();    HttpServletRequest httpRequest = toHttp(request);    SavedRequest savedRequest = new SavedRequest(httpRequest);    session.setAttribute(SAVED_REQUEST_KEY, savedRequest);}
61d4a99aa600ff123927f5002ed808be583610ddb939ecbda7beccdbf4a3b1ff
getAndClearSavedRequest
public static SavedRequest getAndClearSavedRequest(ServletRequest request)
{    SavedRequest savedRequest = getSavedRequest(request);    if (savedRequest != null) {        Subject subject = SecurityUtils.getSubject();        Session session = subject.getSession();        session.removeAttribute(SAVED_REQUEST_KEY);    }    return savedRequest;}
e034df969d757031d255207094a1c97f3b2a7f1e47bdafdba182b241bc4a4ce5
getSavedRequest
public static SavedRequest getSavedRequest(ServletRequest request)
{    SavedRequest savedRequest = null;    Subject subject = SecurityUtils.getSubject();    Session session = subject.getSession(false);    if (session != null) {        savedRequest = (SavedRequest) session.getAttribute(SAVED_REQUEST_KEY);    }    return savedRequest;}
364936cb80f89f432cc908aca226beed0e99afe2b59627857a2b678b93326722
redirectToSavedRequest
public static void redirectToSavedRequest(ServletRequest request, ServletResponse response, String fallbackUrl) throws IOException
{    String successUrl = null;    boolean contextRelative = true;    SavedRequest savedRequest = WebUtils.getAndClearSavedRequest(request);    if (savedRequest != null && savedRequest.getMethod().equalsIgnoreCase(AccessControlFilter.GET_METHOD)) {        successUrl = savedRequest.getRequestUrl();        contextRelative = false;    }    if (successUrl == null) {        successUrl = fallbackUrl;    }    if (successUrl == null) {        throw new IllegalStateException("Success URL not available via saved request or via the " + "successUrlFallback method parameter. One of these must be non-null for " + "issueSuccessRedirect() to work.");    }    WebUtils.issueRedirect(request, response, successUrl, null, contextRelative);}
c583cd32f356d0f9296d19a089289d3df96a092baf898a72abf520a6122833e1
testDefaultFiltersPresent
public void testDefaultFiltersPresent()
{    Ini ini = new Ini();            Ini.Section section = ini.addSection(IniSecurityManagerFactory.MAIN_SECTION_NAME);    section.put("authc.loginUrl", "/login.jsp");    WebIniSecurityManagerFactory factory = new WebIniSecurityManagerFactory(ini);    org.apache.shiro.mgt.SecurityManager sm = factory.getInstance();    assertNotNull(sm);    assertTrue(sm instanceof DefaultWebSecurityManager);        Map<String, ?> beans = factory.getBeans();    for (DefaultFilter defaultFilter : DefaultFilter.values()) {        Filter filter = (Filter) beans.get(defaultFilter.name());        assertNotNull(filter);        assertTrue(defaultFilter.getFilterClass().isAssignableFrom(filter.getClass()));    }}
c41db0a41f5a5da8a73fd8694afdb836a6daa227cae56ff711d83705e277bd43
singleServiceTest
public void singleServiceTest() throws Exception
{    List<WebEnvironmentStub> environmentList = Arrays.asList(new WebEnvironmentStub());    ServletContext servletContext = EasyMock.mock(ServletContext.class);    expect(servletContext.getInitParameter("shiroEnvironmentClass")).andReturn(null);    expect(servletContext.getInitParameter("shiroConfigLocations")).andReturn(null);    PowerMock.mockStaticPartialStrict(ServiceLoader.class, "load");    final ServiceLoader serviceLoader = PowerMock.createMock(ServiceLoader.class);    EasyMock.expect(ServiceLoader.load(WebEnvironment.class)).andReturn(serviceLoader);    EasyMock.expect(serviceLoader.iterator()).andReturn(environmentList.iterator());    EasyMock.replay(servletContext);    PowerMock.replayAll();    WebEnvironment resultEnvironment = new EnvironmentLoader().createEnvironment(servletContext);    PowerMock.verifyAll();    EasyMock.verify(servletContext);    assertThat(resultEnvironment, instanceOf(WebEnvironmentStub.class));    WebEnvironmentStub environmentStub = (WebEnvironmentStub) resultEnvironment;    assertThat(environmentStub.getServletContext(), sameInstance(servletContext));}
4d7615e038473f09892a1ded13c8c601afeaa4a8630b74656b0ac55026e84732
multipleServiceTest
public void multipleServiceTest() throws Exception
{    List<WebEnvironmentStub> environmentList = Arrays.asList(new WebEnvironmentStub(), new WebEnvironmentStub());    ServletContext servletContext = EasyMock.mock(ServletContext.class);    expect(servletContext.getInitParameter("shiroEnvironmentClass")).andReturn(null);    PowerMock.mockStaticPartialStrict(ServiceLoader.class, "load");    final ServiceLoader serviceLoader = PowerMock.createMock(ServiceLoader.class);    EasyMock.expect(ServiceLoader.load(WebEnvironment.class)).andReturn(serviceLoader);    EasyMock.expect(serviceLoader.iterator()).andReturn(environmentList.iterator());    EasyMock.replay(servletContext);    PowerMock.replayAll();    try {        new EnvironmentLoader().createEnvironment(servletContext);        Assert.fail("Expected ConfigurationException to be thrown");    } catch (ConfigurationException e) {        assertThat(e.getMessage(), stringContainsInOrder("zero or exactly one", "shiroEnvironmentClass"));    }    PowerMock.verifyAll();    EasyMock.verify(servletContext);}
3117485d6d2e9705094581c034ec94933ba0630e91546a78c7a236edd28c1878
loadFromInitParamTest
public void loadFromInitParamTest() throws Exception
{    ServletContext servletContext = EasyMock.mock(ServletContext.class);    expect(servletContext.getInitParameter("shiroEnvironmentClass")).andReturn(WebEnvironmentStub.class.getName());    expect(servletContext.getInitParameter("shiroConfigLocations")).andReturn(null);    PowerMock.mockStaticPartialStrict(ServiceLoader.class, "load");    EasyMock.replay(servletContext);    PowerMock.replayAll();    WebEnvironment resultEnvironment = new EnvironmentLoader().createEnvironment(servletContext);    PowerMock.verifyAll();    EasyMock.verify(servletContext);    assertThat(resultEnvironment, instanceOf(WebEnvironmentStub.class));    WebEnvironmentStub environmentStub = (WebEnvironmentStub) resultEnvironment;    assertThat(environmentStub.getServletContext(), sameInstance(servletContext));}
cf0db2f8e8ba0741baf805a8bc52b5f3592249ba61dc0b9a89961f5f54ffb5da
getFilterChainResolver
public FilterChainResolver getFilterChainResolver()
{    return filterChainResolver;}
0d3d4021f9c34493c76b6c6bbf78fe7d3ef7c14013aa85325f6391712f76795c
setFilterChainResolver
public void setFilterChainResolver(FilterChainResolver filterChainResolver)
{    this.filterChainResolver = filterChainResolver;}
080e6dfeffad4589787f1a6fda9a213672aea9ede479cb0719278c34fafc3319
getServletContext
public ServletContext getServletContext()
{    return servletContext;}
562bd85cf2a48714ec9fbde8cd32d90b9ae5a5f78fdf6a7fe7860b1b1128ad0d
setServletContext
public void setServletContext(ServletContext servletContext)
{    this.servletContext = servletContext;}
68d00d368c33d9504c762c7d755f515ad006daeb25df366e5f942714f8c46702
getWebSecurityManager
public WebSecurityManager getWebSecurityManager()
{    return webSecurityManager;}
34598a558d74e0b1130585cf419c1f91cba0d26fc35e5dad7f186a5aad1123b3
setWebSecurityManager
public void setWebSecurityManager(WebSecurityManager webSecurityManager)
{    this.webSecurityManager = webSecurityManager;}
893e074f548b64dec4e0ecb3d99b55207f0353bcbda59913daa9d0096ac3ba9d
getSecurityManager
public SecurityManager getSecurityManager()
{    return getWebSecurityManager();}
a505a221a080c584c1896dbef1a0d5c74c6ef08b41d9b90521f8bad26d05354c
test
public void test()
{    AnonymousFilter filter = new AnonymousFilter();    boolean allow = filter.onPreHandle(null, null, null);    assertTrue(allow);}
4adaefafec562702d887f5960a1408e5f9d1add92c42fab7cb857d701c42d2a2
setUp
public void setUp()
{}
7a7faec21827c39d643d2aeac5fed049af009a629f5294ca3192403bd9eb49f7
createTokenNoAuthorizationHeader
public void createTokenNoAuthorizationHeader() throws Exception
{    testFilter = new BasicHttpAuthenticationFilter();    HttpServletRequest request = createMock(HttpServletRequest.class);    expect(request.getHeader("Authorization")).andReturn(null);    expect(request.getRemoteHost()).andReturn("localhost");    HttpServletResponse response = createMock(HttpServletResponse.class);    replay(request);    replay(response);    AuthenticationToken token = testFilter.createToken(request, response);    assertNotNull(token);    assertTrue("Token is not a username and password token.", token instanceof UsernamePasswordToken);    assertEquals("", token.getPrincipal());    verify(request);    verify(response);}
8af58ae3f4ceb45b8af531f5ef9215cb567f265b1f9310bbb832b39855bf2a1c
createTokenNoUsername
public void createTokenNoUsername() throws Exception
{    testFilter = new BasicHttpAuthenticationFilter();    HttpServletRequest request = createMock(HttpServletRequest.class);    expect(request.getHeader("Authorization")).andReturn(createAuthorizationHeader("", ""));    expect(request.getRemoteHost()).andReturn("localhost");    HttpServletResponse response = createMock(HttpServletResponse.class);    replay(request);    replay(response);    AuthenticationToken token = testFilter.createToken(request, response);    assertNotNull(token);    assertTrue("Token is not a username and password token.", token instanceof UsernamePasswordToken);    assertEquals("", token.getPrincipal());    verify(request);    verify(response);}
7c1ea4f2b243fa21a90daeedb0bcaf434b73d70b0e9f5b1327bf648671d87022
createTokenNoPassword
public void createTokenNoPassword() throws Exception
{    testFilter = new BasicHttpAuthenticationFilter();    HttpServletRequest request = createMock(HttpServletRequest.class);    expect(request.getHeader("Authorization")).andReturn(createAuthorizationHeader("pedro", ""));    expect(request.getRemoteHost()).andReturn("localhost");    HttpServletResponse response = createMock(HttpServletResponse.class);    replay(request);    replay(response);    AuthenticationToken token = testFilter.createToken(request, response);    assertNotNull(token);    assertTrue("Token is not a username and password token.", token instanceof UsernamePasswordToken);    UsernamePasswordToken upToken = (UsernamePasswordToken) token;    assertEquals("pedro", upToken.getUsername());    assertEquals("Password is not empty.", 0, upToken.getPassword().length);    verify(request);    verify(response);}
7faabb253dc9c178b89fd4894cfd626a2c11be024d0e6191edfccd43ec65d4eb
createTokenColonInPassword
public void createTokenColonInPassword() throws Exception
{    testFilter = new BasicHttpAuthenticationFilter();    HttpServletRequest request = createMock(HttpServletRequest.class);    expect(request.getHeader("Authorization")).andReturn(createAuthorizationHeader("pedro", "pass:word"));    expect(request.getRemoteHost()).andReturn("localhost");    HttpServletResponse response = createMock(HttpServletResponse.class);    replay(request);    replay(response);    AuthenticationToken token = testFilter.createToken(request, response);    assertNotNull(token);    assertTrue("Token is not a username and password token.", token instanceof UsernamePasswordToken);    UsernamePasswordToken upToken = (UsernamePasswordToken) token;    assertEquals("pedro", upToken.getUsername());    assertEquals("pass:word", new String(upToken.getPassword()));    verify(request);    verify(response);}
7834704a6bc25d4e255e9d8932f2346e05914da389b2021d5124fe5fee90b4ef
httpMethodDoesNotRequireAuthentication
public void httpMethodDoesNotRequireAuthentication() throws Exception
{    testFilter = new BasicHttpAuthenticationFilter();    HttpServletRequest request = createMock(HttpServletRequest.class);    expect(request.getMethod()).andReturn("GET");    replay(request);    HttpServletResponse response = createMock(HttpServletResponse.class);    replay(response);    boolean accessAllowed = testFilter.isAccessAllowed(request, response, new String[] { "POST", "PUT", "DELETE" });    assertTrue("Access not allowed for GET", accessAllowed);}
c7eb96010367524475f1f41dbcc8fab0669691144f7fbb811ab9ebc0cec55400
httpMethodRequiresAuthentication
public void httpMethodRequiresAuthentication() throws Exception
{    testFilter = new BasicHttpAuthenticationFilter();    HttpServletRequest request = createMock(HttpServletRequest.class);    expect(request.getHeader("Authorization")).andReturn(createAuthorizationHeader("pedro", ""));    expect(request.getRemoteHost()).andReturn("localhost");    expect(request.getMethod()).andReturn("POST");    replay(request);    HttpServletResponse response = createMock(HttpServletResponse.class);    replay(response);    boolean accessAllowed = testFilter.isAccessAllowed(request, response, new String[] { "POST", "PUT", "DELETE" });    assertTrue("Access allowed for POST", !accessAllowed);}
0e1ab29afef11f97257408623eba109e0a28a700b96b24f2471461bd4e0fd12c
httpMethodsAreCaseInsensitive
public void httpMethodsAreCaseInsensitive() throws Exception
{    testFilter = new BasicHttpAuthenticationFilter();    HttpServletRequest request = createMock(HttpServletRequest.class);    expect(request.getMethod()).andReturn("GET");    expect(request.getMethod()).andReturn("post");    expect(request.getHeader("Authorization")).andReturn(createAuthorizationHeader("pedro", "")).anyTimes();    expect(request.getRemoteHost()).andReturn("localhost").anyTimes();    replay(request);    HttpServletResponse response = createMock(HttpServletResponse.class);    replay(response);    boolean accessAllowed = testFilter.isAccessAllowed(request, response, new String[] { "POST", "put", "delete" });    assertTrue("Access not allowed for GET", accessAllowed);    accessAllowed = testFilter.isAccessAllowed(request, response, new String[] { "post", "put", "delete" });    assertTrue("Access allowed for POST", !accessAllowed);}
fa4e7d113801870830a613df99833069a5012da17b68778e33b8aeac7e177575
allHttpMethodsRequireAuthenticationIfNoneConfigured
public void allHttpMethodsRequireAuthenticationIfNoneConfigured() throws Exception
{    testFilter = new BasicHttpAuthenticationFilter();    HttpServletRequest request = createMock(HttpServletRequest.class);    expect(request.getHeader("Authorization")).andReturn(createAuthorizationHeader("pedro", "")).anyTimes();    expect(request.getRemoteHost()).andReturn("localhost").anyTimes();    expect(request.getMethod()).andReturn("GET");    expect(request.getMethod()).andReturn("POST");    replay(request);    HttpServletResponse response = createMock(HttpServletResponse.class);    replay(response);    boolean accessAllowed = testFilter.isAccessAllowed(request, response, new String[0]);    assertTrue("Access allowed for GET", !accessAllowed);    accessAllowed = testFilter.isAccessAllowed(request, response, new String[0]);    assertTrue("Access allowed for POST", !accessAllowed);}
d14346694ebfdc115c321e6280bcf026c828942d65e22a0d29b53c53d17ee60d
allHttpMethodsRequireAuthenticationIfNullConfig
public void allHttpMethodsRequireAuthenticationIfNullConfig() throws Exception
{    testFilter = new BasicHttpAuthenticationFilter();    HttpServletRequest request = createMock(HttpServletRequest.class);    expect(request.getHeader("Authorization")).andReturn(createAuthorizationHeader("pedro", "")).anyTimes();    expect(request.getRemoteHost()).andReturn("localhost").anyTimes();    expect(request.getMethod()).andReturn("GET");    expect(request.getMethod()).andReturn("POST");    replay(request);    HttpServletResponse response = createMock(HttpServletResponse.class);    replay(response);    boolean accessAllowed = testFilter.isAccessAllowed(request, response, null);    assertTrue("Access allowed for GET", !accessAllowed);    accessAllowed = testFilter.isAccessAllowed(request, response, null);    assertTrue("Access allowed for POST", !accessAllowed);}
2280e5fddc9a57696ca75f474b9261ef41f85894560ad1c3b013227453a68885
permissiveEnabledWithLoginTest
public void permissiveEnabledWithLoginTest()
{    testFilter = new BasicHttpAuthenticationFilter();    HttpServletRequest request = createMock(HttpServletRequest.class);    expect(request.getHeader("Authorization")).andReturn(createAuthorizationHeader("pedro", "")).anyTimes();    expect(request.getRemoteHost()).andReturn("localhost").anyTimes();    expect(request.getMethod()).andReturn("GET");    replay(request);    HttpServletResponse response = createMock(HttpServletResponse.class);    replay(response);    String[] mappedValue = { "permissive" };    boolean accessAllowed = testFilter.isAccessAllowed(request, response, mappedValue);        assertTrue("Access allowed for GET", !accessAllowed);}
fc5eb552c018e1dc14c5a3e384d5d2c5c7199c9945c90dd78a5a5c3827b1b730
permissiveEnabledTest
public void permissiveEnabledTest()
{    testFilter = new BasicHttpAuthenticationFilter();    HttpServletRequest request = createMock(HttpServletRequest.class);    expect(request.getHeader("Authorization")).andReturn(null).anyTimes();    expect(request.getRemoteHost()).andReturn("localhost").anyTimes();    expect(request.getMethod()).andReturn("GET");    replay(request);    HttpServletResponse response = createMock(HttpServletResponse.class);    replay(response);    String[] mappedValue = { "permissive" };    boolean accessAllowed = testFilter.isAccessAllowed(request, response, mappedValue);        assertTrue("Access should be allowed for GET", accessAllowed);}
e58c2005d2153151be3f93fc4fe786faf3b11c6790e5a76173c1704693c20065
httpMethodRequiresAuthenticationWithPermissive
public void httpMethodRequiresAuthenticationWithPermissive() throws Exception
{    testFilter = new BasicHttpAuthenticationFilter();    HttpServletRequest request = createMock(HttpServletRequest.class);    expect(request.getHeader("Authorization")).andReturn(createAuthorizationHeader("pedro", ""));    expect(request.getRemoteHost()).andReturn("localhost");    expect(request.getMethod()).andReturn("POST");    replay(request);    HttpServletResponse response = createMock(HttpServletResponse.class);    replay(response);    boolean accessAllowed = testFilter.isAccessAllowed(request, response, new String[] { "permissive", "POST", "PUT", "DELETE" });    assertTrue("Access allowed for POST", !accessAllowed);}
8d4ca5b60150bd857d832e747a93e548d0e5eb7c27e89d77318a32c169112d8c
createAuthorizationHeader
private String createAuthorizationHeader(String username, String password)
{    return "Basic " + new String(Base64.encode((username + ":" + password).getBytes()));}
2d0d57d8c2f3eafb04ab9503e2e22c3b2e4f9c2685ead7fbef6bcee417ce3e3e
testUserOnAccessDeniedWithResponseError
public void testUserOnAccessDeniedWithResponseError() throws IOException
{                SecurityUtils.getSubject().login(new UsernamePasswordToken("test", "test"));    AuthorizationFilter filter = new AuthorizationFilter() {        @Override        protected boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue) throws Exception {                        return false;        }    };    HttpServletRequest request = createNiceMock(HttpServletRequest.class);    HttpServletResponse response = createNiceMock(HttpServletResponse.class);    response.sendError(HttpServletResponse.SC_UNAUTHORIZED);    replay(response);    filter.onAccessDenied(request, response);    verify(response);}
cb596ee8dfd560e4fc2448f6ec004be6807ed13a4e33fd32f3eb6508a0f9205c
isAccessAllowed
protected boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue) throws Exception
{        return false;}
389ef2b65007da225a2efbd7bbb4fd7343e19333599dbfe917d0fa8cef7b94b0
testUserOnAccessDeniedWithRedirect
public void testUserOnAccessDeniedWithRedirect() throws IOException
{                SecurityUtils.getSubject().login(new UsernamePasswordToken("test", "test"));    String unauthorizedUrl = "unauthorized.jsp";    AuthorizationFilter filter = new AuthorizationFilter() {        @Override        protected boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue) throws Exception {                        return false;        }    };    filter.setUnauthorizedUrl(unauthorizedUrl);    HttpServletRequest request = createNiceMock(HttpServletRequest.class);    HttpServletResponse response = createNiceMock(HttpServletResponse.class);    expect(request.getContextPath()).andReturn("/").anyTimes();    String encoded = "/" + unauthorizedUrl;    expect(response.encodeRedirectURL(unauthorizedUrl)).andReturn(encoded);    response.sendRedirect(encoded);    replay(request);    replay(response);    filter.onAccessDenied(request, response);    verify(request);    verify(response);}
cb596ee8dfd560e4fc2448f6ec004be6807ed13a4e33fd32f3eb6508a0f9205c
isAccessAllowed
protected boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue) throws Exception
{        return false;}
e03859f9b7fc1bfbf99d4c0c45ea76cbeecefeb6f090320faa898d5e1c10158b
testPrivateClassC
public void testPrivateClassC()
{    Pattern p = Pattern.compile(HostFilter.PRIVATE_CLASS_C_REGEX);    String base = "192.168.";    for (int i = 0; i < 256; i++) {        String ibase = base + i;        for (int j = 0; j < 256; j++) {            String ip = ibase + "." + j;            assertTrue(p.matcher(ip).matches());        }    }}
eb312af2a29aca8364eb0718a534e93e0930c07e1d4f480a3cca7c525b8f3706
testPrivateClassB
public void testPrivateClassB()
{    Pattern p = Pattern.compile(HostFilter.PRIVATE_CLASS_B_REGEX);    String base = "172.";    for (int i = 16; i < 32; i++) {        String ibase = base + i;        for (int j = 0; j < 256; j++) {            String jBase = ibase + "." + j;            for (int k = 0; k < 256; k++) {                String ip = jBase + "." + k;                assertTrue(p.matcher(ip).matches());            }        }    }}
21fc2c70da2df1ed13dee9aa0613d623d78ec6e72541291f4c1e8b67b3fe9f64
testPermisisonMapping
public void testPermisisonMapping()
{        HttpMethodPermissionFilter filter = new HttpMethodPermissionFilter();    String[] permsBefore = { "foo", "bar" };    String[] permsAfter = filter.buildPermissions(permsBefore, filter.getHttpMethodAction("get"));    Assert.assertEquals(2, permsAfter.length);    Assert.assertEquals("foo:read", permsAfter[0]);    Assert.assertEquals("bar:read", permsAfter[1]);    Assert.assertEquals("foo:read", filter.buildPermissions(permsBefore, filter.getHttpMethodAction("head"))[0]);    Assert.assertEquals("foo:update", filter.buildPermissions(permsBefore, filter.getHttpMethodAction("put"))[0]);    Assert.assertEquals("foo:create", filter.buildPermissions(permsBefore, filter.getHttpMethodAction("post"))[0]);    Assert.assertEquals("foo:create", filter.buildPermissions(permsBefore, filter.getHttpMethodAction("mkcol"))[0]);    Assert.assertEquals("foo:delete", filter.buildPermissions(permsBefore, filter.getHttpMethodAction("delete"))[0]);    Assert.assertEquals("foo:read", filter.buildPermissions(permsBefore, filter.getHttpMethodAction("options"))[0]);    Assert.assertEquals("foo:read", filter.buildPermissions(permsBefore, filter.getHttpMethodAction("trace"))[0]);}
0b6943434971982f230f768319cc783202c69a99e641ed699e15e3a297744453
createBaseMockRequest
protected HttpServletRequest createBaseMockRequest()
{    HttpServletRequest request = createNiceMock(HttpServletRequest.class);    expect(request.getScheme()).andReturn("http");    expect(request.getServerName()).andReturn("localhost");    expect(request.getRequestURI()).andReturn("/");    return request;}
d80a5b65702bdb1e10773b8be92e6dfb9effe6f857a43579935db07f5309308f
testDefault
public void testDefault() throws Exception
{    HttpServletResponse response = createNiceMock(HttpServletResponse.class);    HttpServletRequest request = createBaseMockRequest();    expect(response.encodeRedirectURL(eq("http://localhost/"))).andReturn("http://localhost/");    replay(request);    replay(response);    PortFilter filter = new PortFilter();    boolean result = filter.onAccessDenied(request, response, null);    verify(request);    verify(response);    assertFalse(result);}
4b96a8158b66f2dd878d63de187ff1048d6b394b36ccc44c68416fbaf0633de5
testConfiguredPort
public void testConfiguredPort() throws Exception
{    int port = 8080;    HttpServletResponse response = createNiceMock(HttpServletResponse.class);    HttpServletRequest request = createBaseMockRequest();    String expected = "http://localhost:" + port + "/";    expect(response.encodeRedirectURL(eq(expected))).andReturn(expected);    replay(request);    replay(response);    PortFilter filter = new PortFilter();    filter.setPort(port);    boolean result = filter.onAccessDenied(request, response, null);    verify(request);    verify(response);    assertFalse(result);}
4adaefafec562702d887f5960a1408e5f9d1add92c42fab7cb857d701c42d2a2
setUp
public void setUp()
{    resolver = new PathMatchingFilterChainResolver();}
8109511a5c13ae2afded1cde5badda7abbcb9addf2413a38654acdfa3c9007c6
testNewInstance
public void testNewInstance()
{    assertNotNull(resolver.getPathMatcher());    assertTrue(resolver.getPathMatcher() instanceof AntPathMatcher);    assertNotNull(resolver.getFilterChainManager());    assertTrue(resolver.getFilterChainManager() instanceof DefaultFilterChainManager);}
aeb058cacc7e16ce6b1559b0f4f2d0b6a69b6a91698990471afec10d00cc8f8f
testNewInstanceWithFilterConfig
public void testNewInstanceWithFilterConfig()
{    FilterConfig mock = createNiceMockFilterConfig();    replay(mock);    resolver = new PathMatchingFilterChainResolver(mock);    assertNotNull(resolver.getPathMatcher());    assertTrue(resolver.getPathMatcher() instanceof AntPathMatcher);    assertNotNull(resolver.getFilterChainManager());    assertTrue(resolver.getFilterChainManager() instanceof DefaultFilterChainManager);    assertEquals(((DefaultFilterChainManager) resolver.getFilterChainManager()).getFilterConfig(), mock);    verify(mock);}
9ec0010626d68414180531f6d7dc9fd41f5185c80039307f998d2e6b274036dc
testSetters
public void testSetters()
{    resolver.setPathMatcher(new AntPathMatcher());    assertNotNull(resolver.getPathMatcher());    assertTrue(resolver.getPathMatcher() instanceof AntPathMatcher);    resolver.setFilterChainManager(new DefaultFilterChainManager());    assertNotNull(resolver.getFilterChainManager());    assertTrue(resolver.getFilterChainManager() instanceof DefaultFilterChainManager);}
e845e29cdbd0be1ceb45801a4d7732971738da8a6e63377f3d7d913650925608
testGetChainsWithoutChains
public void testGetChainsWithoutChains()
{    ServletRequest request = createNiceMock(HttpServletRequest.class);    ServletResponse response = createNiceMock(HttpServletResponse.class);    FilterChain chain = createNiceMock(FilterChain.class);    FilterChain resolved = resolver.getChain(request, response, chain);    assertNull(resolved);}
540f8b383410ca78faef0d16d803f6fffeaf3d95e9d436153dce1c86d9929974
testGetChainsWithMatch
public void testGetChainsWithMatch()
{    HttpServletRequest request = createNiceMock(HttpServletRequest.class);    HttpServletResponse response = createNiceMock(HttpServletResponse.class);    FilterChain chain = createNiceMock(FilterChain.class);        resolver.getFilterChainManager().addToChain("/index.html", "authcBasic");    expect(request.getAttribute(WebUtils.INCLUDE_CONTEXT_PATH_ATTRIBUTE)).andReturn(null).anyTimes();    expect(request.getContextPath()).andReturn("");    expect(request.getRequestURI()).andReturn("/index.html");    replay(request);    FilterChain resolved = resolver.getChain(request, response, chain);    assertNotNull(resolved);    verify(request);}
53f9f6b158826f3d58eb5e0b3b899e0b0d69d140f3aa43ed213a4e5d0fc3596b
testPathTraversalWithDot
public void testPathTraversalWithDot()
{    HttpServletRequest request = createNiceMock(HttpServletRequest.class);    HttpServletResponse response = createNiceMock(HttpServletResponse.class);    FilterChain chain = createNiceMock(FilterChain.class);        resolver.getFilterChainManager().addToChain("/index.html", "authcBasic");    expect(request.getAttribute(WebUtils.INCLUDE_CONTEXT_PATH_ATTRIBUTE)).andReturn(null).anyTimes();    expect(request.getContextPath()).andReturn("");    expect(request.getRequestURI()).andReturn("/./index.html");    replay(request);    FilterChain resolved = resolver.getChain(request, response, chain);    assertNotNull(resolved);    verify(request);}
dbf94beb4558c47242c108ec74846b6240ee651ee79e3998387699ec68ef2ff7
testPathTraversalWithDotDot
public void testPathTraversalWithDotDot()
{    HttpServletRequest request = createNiceMock(HttpServletRequest.class);    HttpServletResponse response = createNiceMock(HttpServletResponse.class);    FilterChain chain = createNiceMock(FilterChain.class);        resolver.getFilterChainManager().addToChain("/index.html", "authcBasic");    expect(request.getAttribute(WebUtils.INCLUDE_CONTEXT_PATH_ATTRIBUTE)).andReturn(null).anyTimes();    expect(request.getContextPath()).andReturn("");    expect(request.getRequestURI()).andReturn("/public/../index.html");    replay(request);    FilterChain resolved = resolver.getChain(request, response, chain);    assertNotNull(resolved);    verify(request);}
fedd13c5ea99d55fdc0add36ccbab2756072a8961ccef8f20d6facaa87ac3692
testGetChainsWithoutMatch
public void testGetChainsWithoutMatch()
{    HttpServletRequest request = createNiceMock(HttpServletRequest.class);    HttpServletResponse response = createNiceMock(HttpServletResponse.class);    FilterChain chain = createNiceMock(FilterChain.class);        resolver.getFilterChainManager().addToChain("/index.html", "authcBasic");    expect(request.getAttribute(WebUtils.INCLUDE_CONTEXT_PATH_ATTRIBUTE)).andReturn(null).anyTimes();    expect(request.getContextPath()).andReturn("");    expect(request.getRequestURI()).andReturn("/");    replay(request);    FilterChain resolved = resolver.getChain(request, response, chain);    assertNull(resolved);    verify(request);}
8109511a5c13ae2afded1cde5badda7abbcb9addf2413a38654acdfa3c9007c6
testNewInstance
public void testNewInstance()
{    @SuppressWarnings({ "MismatchedQueryAndUpdateOfCollection" })    SimpleNamedFilterList list = new SimpleNamedFilterList("test");    assertNotNull(list.getName());    assertEquals("test", list.getName());}
c5e0240551bfb7e6d8a9f325fcaaf2264769636bc36453b02bbff8aa6cb64681
testNewInstanceNameless
public void testNewInstanceNameless()
{    new SimpleNamedFilterList(null);}
2d9deb81d5588f681a6b2c9d0756f5c1c420224c695a57e1cd18ea2eb649420e
testNewInstanceBackingList
public void testNewInstanceBackingList()
{    new SimpleNamedFilterList("test", new ArrayList<Filter>());}
e392a4d93c6c23faa18aaef4d7930461e48210c128ce22a5e8631961061e14f8
testNewInstanceNullBackingList
public void testNewInstanceNullBackingList()
{    new SimpleNamedFilterList("test", null);}
06d05684255aaf215ea3a7153833145cb371f2419362a07ac704f267eb40c2ea
testListMethods
public void testListMethods()
{    FilterChain mock = createNiceMock(FilterChain.class);    Filter filter = createNiceMock(Filter.class);    NamedFilterList list = new SimpleNamedFilterList("test");    list.add(filter);    FilterChain chain = list.proxy(mock);    assertNotNull(chain);    assertNotSame(mock, chain);    Filter singleFilter = new SslFilter();    List<? extends Filter> multipleFilters = CollectionUtils.asList(new PortFilter(), new UserFilter());    list.add(0, singleFilter);    assertEquals(2, list.size());    assertTrue(list.get(0) instanceof SslFilter);    assertTrue(Arrays.equals(list.toArray(), new Object[] { singleFilter, filter }));    list.addAll(multipleFilters);    assertEquals(4, list.size());    assertTrue(list.get(2) instanceof PortFilter);    assertTrue(list.get(3) instanceof UserFilter);    list.addAll(0, CollectionUtils.asList(new PermissionsAuthorizationFilter(), new RolesAuthorizationFilter()));    assertEquals(6, list.size());    assertTrue(list.get(0) instanceof PermissionsAuthorizationFilter);    assertTrue(list.get(1) instanceof RolesAuthorizationFilter);    assertEquals(2, list.indexOf(singleFilter));    assertEquals(multipleFilters, list.subList(4, list.size()));    assertTrue(list.contains(singleFilter));    assertTrue(list.containsAll(multipleFilters));    assertFalse(list.isEmpty());    list.clear();    assertTrue(list.isEmpty());    list.add(singleFilter);    Iterator i = list.iterator();    assertTrue(i.hasNext());    assertEquals(i.next(), singleFilter);    ListIterator li = list.listIterator();    assertTrue(li.hasNext());    assertEquals(li.next(), singleFilter);    li = list.listIterator(0);    assertTrue(li.hasNext());    assertEquals(li.next(), singleFilter);    list.set(0, singleFilter);    assertEquals(list.get(0), singleFilter);    Filter[] filters = new Filter[list.size()];    filters = list.toArray(filters);    assertEquals(1, filters.length);    assertEquals(filters[0], singleFilter);    assertEquals(0, list.lastIndexOf(singleFilter));    list.remove(singleFilter);    assertTrue(list.isEmpty());    list.add(singleFilter);    list.remove(0);    assertTrue(list.isEmpty());    list.add(singleFilter);    list.addAll(multipleFilters);    assertEquals(3, list.size());    list.removeAll(multipleFilters);    assertEquals(1, list.size());    assertEquals(list.get(0), singleFilter);    list.addAll(multipleFilters);    assertEquals(3, list.size());    list.retainAll(multipleFilters);    assertEquals(2, list.size());        assertEquals(new ArrayList(list), multipleFilters);}
4adaefafec562702d887f5960a1408e5f9d1add92c42fab7cb857d701c42d2a2
setUp
public void setUp()
{    request = createNiceMock(HttpServletRequest.class);    response = createNiceMock(ServletResponse.class);    filter = createTestInstance();}
04db7850fe374c4d9f18c31b3ae404eaa8393673144c54cb7ff2aa8a931bafe0
createTestInstance
private PathMatchingFilter createTestInstance()
{    final String NAME = "pathMatchingFilter";    PathMatchingFilter filter = new PathMatchingFilter() {        @Override        protected boolean isEnabled(ServletRequest request, ServletResponse response, String path, Object mappedValue) throws Exception {            return !path.equals(DISABLED_PATH);        }        @Override        protected boolean onPreHandle(ServletRequest request, ServletResponse response, Object mappedValue) throws Exception {                        return false;        }    };    filter.setName(NAME);    return filter;}
2ba351297035c99a28843fb34f6cf30305a5c843cd0e4f6778bd9bd96c3413af
isEnabled
protected boolean isEnabled(ServletRequest request, ServletResponse response, String path, Object mappedValue) throws Exception
{    return !path.equals(DISABLED_PATH);}
0742287ffedc47d9a617ad116ce6cdf6d1985eb00099680649b4e039f6e24e03
onPreHandle
protected boolean onPreHandle(ServletRequest request, ServletResponse response, Object mappedValue) throws Exception
{        return false;}
f526705c60b72d841970f815efc10da2cdde803f498c8649653b6309c27c7ec9
testDisabledBasedOnPath
public void testDisabledBasedOnPath() throws Exception
{    filter.processPathConfig(DISABLED_PATH, null);    HttpServletRequest request = createNiceMock(HttpServletRequest.class);    ServletResponse response = createNiceMock(ServletResponse.class);    expect(request.getContextPath()).andReturn(CONTEXT_PATH).anyTimes();    expect(request.getRequestURI()).andReturn(DISABLED_PATH).anyTimes();    replay(request);    boolean continueFilterChain = filter.preHandle(request, response);    assertTrue("FilterChain should continue.", continueFilterChain);    verify(request);}
3e8e2e6332704d0e16a8b1f2aecc6fe5886f1984e41b657011783289b3e5f2f3
testEnabled
public void testEnabled() throws Exception
{            filter.processPathConfig(DISABLED_PATH, null);    filter.processPathConfig(ENABLED_PATH, null);    HttpServletRequest request = createNiceMock(HttpServletRequest.class);    ServletResponse response = createNiceMock(ServletResponse.class);    expect(request.getContextPath()).andReturn(CONTEXT_PATH).anyTimes();    expect(request.getRequestURI()).andReturn(ENABLED_PATH).anyTimes();    replay(request);    boolean continueFilterChain = filter.preHandle(request, response);    assertFalse("FilterChain should NOT continue.", continueFilterChain);    verify(request);}
39e5ba029cc67f6f1d45c6d20f0df595ec16bc61da20d7680fcbbdae4fe7f95b
tearDown
public void tearDown()
{    ThreadContext.remove();}
1cd6a169e1ba6297e395970cd482b7d2adba70ddd31a2f13e80b303de1c6a4c1
onSuccessfulLogin
public void onSuccessfulLogin()
{    HttpServletRequest mockRequest = createNiceMock(HttpServletRequest.class);    HttpServletResponse mockResponse = createNiceMock(HttpServletResponse.class);    WebSubject mockSubject = createNiceMock(WebSubject.class);    expect(mockSubject.getServletRequest()).andReturn(mockRequest).anyTimes();    expect(mockSubject.getServletResponse()).andReturn(mockResponse).anyTimes();    CookieRememberMeManager mgr = new CookieRememberMeManager();    org.apache.shiro.web.servlet.Cookie cookie = createMock(org.apache.shiro.web.servlet.Cookie.class);    mgr.setCookie(cookie);        cookie.removeFrom(isA(HttpServletRequest.class), isA(HttpServletResponse.class));        expect(cookie.getName()).andReturn("rememberMe");    expect(cookie.getValue()).andReturn(null);    expect(cookie.getComment()).andReturn(null);    expect(cookie.getDomain()).andReturn(null);    expect(cookie.getPath()).andReturn(null);    expect(cookie.getMaxAge()).andReturn(SimpleCookie.DEFAULT_MAX_AGE);    expect(cookie.getVersion()).andReturn(SimpleCookie.DEFAULT_VERSION);    expect(cookie.isSecure()).andReturn(false);    expect(cookie.isHttpOnly()).andReturn(true);    expect(cookie.getSameSite()).andReturn(org.apache.shiro.web.servlet.Cookie.SameSiteOptions.LAX);    UsernamePasswordToken token = new UsernamePasswordToken("user", "secret");    token.setRememberMe(true);    AuthenticationInfo account = new SimpleAuthenticationInfo("user", "secret", "test");    replay(mockSubject);    replay(mockRequest);    replay(cookie);    mgr.onSuccessfulLogin(mockSubject, token, account);    verify(mockRequest);    verify(mockSubject);    verify(cookie);}
1b8b32b5ed810f2603141a8895ad4707616c9f5adb8366f32b19dfef71c1ecc2
getRememberedSerializedIdentityReturnsNullForDeletedCookie
public void getRememberedSerializedIdentityReturnsNullForDeletedCookie()
{    HttpServletRequest mockRequest = createMock(HttpServletRequest.class);    HttpServletResponse mockResponse = createMock(HttpServletResponse.class);    WebSubjectContext context = new DefaultWebSubjectContext();    context.setServletRequest(mockRequest);    context.setServletResponse(mockResponse);    expect(mockRequest.getAttribute(ShiroHttpServletRequest.IDENTITY_REMOVED_KEY)).andReturn(null);    Cookie[] cookies = new Cookie[] { new Cookie(CookieRememberMeManager.DEFAULT_REMEMBER_ME_COOKIE_NAME, org.apache.shiro.web.servlet.Cookie.DELETED_COOKIE_VALUE) };    expect(mockRequest.getCookies()).andReturn(cookies);    replay(mockRequest);    CookieRememberMeManager mgr = new CookieRememberMeManager();    assertNull(mgr.getRememberedSerializedIdentity(context));}
5fdeed96108b12e6a960426550313a50dd0e74f709034fe700738275e9b9138e
getRememberedPrincipals
public void getRememberedPrincipals()
{    HttpServletRequest mockRequest = createMock(HttpServletRequest.class);    HttpServletResponse mockResponse = createMock(HttpServletResponse.class);    WebSubjectContext context = new DefaultWebSubjectContext();    context.setServletRequest(mockRequest);    context.setServletResponse(mockResponse);    expect(mockRequest.getAttribute(ShiroHttpServletRequest.IDENTITY_REMOVED_KEY)).andReturn(null);            final String userPCAesBase64 = "WlD5MLzzZznN3dQ1lPJO/eScSuY245k29aECNmjUs31o7Yu478hWhaM5Sj" + "jmoe900/72JNu3hcJaPG6Q17Vuz4F8x0kBjbFnPVx4PqzsZYT6yreeS2jwO6OwfI+efqXOKyB2a5KPtnr" + "7jt5kZsyH38XJISb81cf6xqTGUru8zC+kNqJFz7E5RpO0kraBofS5jhMm45gDVjDRkjgPJAzocVWMtrza" + "zy67P8eb+kMSBCqGI251JTNAGboVgQ28KjfaAJ/6LXRJUj7kB7CGia7mgRk+hxzEJGDs81at5VOPqODJr" + "xb8tcIdemFUFIkiYVP9bGs4dP3ECtmw7aNrCzv+84sx3vRFUrd5DbDYpEuE12hF2Y9owDK9sxStbXoF0y" + "A32dhfGDIqS+agsass0sWn8WX2TM9i8SxrUjiFbxqyIG49HbqGrZp5QLM9IuIwO+TzGfF1FzumQGdwmWT" + "xkVapw5UESl34YvA615cb+82ue1I=";    Cookie[] cookies = new Cookie[] { new Cookie(CookieRememberMeManager.DEFAULT_REMEMBER_ME_COOKIE_NAME, userPCAesBase64) };    expect(mockRequest.getCookies()).andReturn(cookies);    replay(mockRequest);    CookieRememberMeManager mgr = new CookieRememberMeManager();    mgr.setCipherKey(Base64.decode("kPH+bIxk5D2deZiIxcaaaA=="));    PrincipalCollection collection = mgr.getRememberedPrincipals(context);    verify(mockRequest);    assertTrue(collection != null);        assertTrue(collection.iterator().next().equals("user"));}
4116eaf2b534056718921c4c2ce6319c959f528fb3b49b75ed7e13873a114e78
getRememberedPrincipalsNoMoreDefaultCipher
public void getRememberedPrincipalsNoMoreDefaultCipher()
{    HttpServletRequest mockRequest = createMock(HttpServletRequest.class);    HttpServletResponse mockResponse = createMock(HttpServletResponse.class);    WebSubjectContext context = new DefaultWebSubjectContext();    context.setServletRequest(mockRequest);    context.setServletResponse(mockResponse);    expect(mockRequest.getAttribute(ShiroHttpServletRequest.IDENTITY_REMOVED_KEY)).andReturn(null);    expect(mockRequest.getContextPath()).andReturn("/test");            final String userPCAesBase64 = "WlD5MLzzZznN3dQ1lPJO/eScSuY245k29aECNmjUs31o7Yu478hWhaM5Sj" + "jmoe900/72JNu3hcJaPG6Q17Vuz4F8x0kBjbFnPVx4PqzsZYT6yreeS2jwO6OwfI+efqXOKyB2a5KPtnr" + "7jt5kZsyH38XJISb81cf6xqTGUru8zC+kNqJFz7E5RpO0kraBofS5jhMm45gDVjDRkjgPJAzocVWMtrza" + "zy67P8eb+kMSBCqGI251JTNAGboVgQ28KjfaAJ/6LXRJUj7kB7CGia7mgRk+hxzEJGDs81at5VOPqODJr" + "xb8tcIdemFUFIkiYVP9bGs4dP3ECtmw7aNrCzv+84sx3vRFUrd5DbDYpEuE12hF2Y9owDK9sxStbXoF0y" + "A32dhfGDIqS+agsass0sWn8WX2TM9i8SxrUjiFbxqyIG49HbqGrZp5QLM9IuIwO+TzGfF1FzumQGdwmWT" + "xkVapw5UESl34YvA615cb+82ue1I=";    Cookie[] cookies = new Cookie[] { new Cookie(CookieRememberMeManager.DEFAULT_REMEMBER_ME_COOKIE_NAME, userPCAesBase64) };    expect(mockRequest.getCookies()).andReturn(cookies);    replay(mockRequest);    CookieRememberMeManager mgr = new CookieRememberMeManager();                mgr.getRememberedPrincipals(context);}
77aaa831cfbcea1e0ecde0d48ef2cc636d6dead10db15eb3601fb66def54bb77
getRememberedPrincipalsDecryptionError
public void getRememberedPrincipalsDecryptionError()
{    HttpServletRequest mockRequest = createNiceMock(HttpServletRequest.class);    HttpServletResponse mockResponse = createNiceMock(HttpServletResponse.class);    WebSubjectContext context = new DefaultWebSubjectContext();    context.setServletRequest(mockRequest);    context.setServletResponse(mockResponse);    expect(mockRequest.getAttribute(ShiroHttpServletRequest.IDENTITY_REMOVED_KEY)).andReturn(null);        final String userPCAesBase64 = "garbage";    Cookie[] cookies = new Cookie[] { new Cookie(CookieRememberMeManager.DEFAULT_REMEMBER_ME_COOKIE_NAME, userPCAesBase64) };    expect(mockRequest.getCookies()).andReturn(cookies).anyTimes();    replay(mockRequest);    CookieRememberMeManager mgr = new CookieRememberMeManager();    try {        mgr.getRememberedPrincipals(context);    } catch (CryptoException expected) {        return;    }    fail("CryptoException was expected to be thrown");}
0dba927bc5efc435628f1a016358b75b1d613446154f16199f0eb99f7cb4b8a5
onLogout
public void onLogout()
{    CookieRememberMeManager mgr = new CookieRememberMeManager();    org.apache.shiro.web.servlet.Cookie cookie = createMock(org.apache.shiro.web.servlet.Cookie.class);    mgr.setCookie(cookie);    HttpServletRequest mockRequest = createMock(HttpServletRequest.class);    HttpServletResponse mockResponse = createMock(HttpServletResponse.class);    WebSubject mockSubject = createNiceMock(WebSubject.class);    expect(mockSubject.getServletRequest()).andReturn(mockRequest).anyTimes();    expect(mockSubject.getServletResponse()).andReturn(mockResponse).anyTimes();    expect(mockRequest.getContextPath()).andReturn(null).anyTimes();    cookie.removeFrom(isA(HttpServletRequest.class), isA(HttpServletResponse.class));    replay(mockRequest);    replay(mockResponse);    replay(mockSubject);    replay(cookie);    mgr.onLogout(mockSubject);    verify(mockSubject);    verify(mockRequest);    verify(mockResponse);    verify(cookie);}
5ff0b8f7d2b080bcc6214fa5f91be74727145ea81cacb63a99c8d0f3106c089f
setup
public void setup()
{    sm = new DefaultWebSecurityManager();    sm.setSessionMode(DefaultWebSecurityManager.NATIVE_SESSION_MODE);    Ini ini = new Ini();    Ini.Section section = ini.addSection(IniRealm.USERS_SECTION_NAME);    section.put("lonestarr", "vespa");    sm.setRealm(new IniRealm(ini));}
39e5ba029cc67f6f1d45c6d20f0df595ec16bc61da20d7680fcbbdae4fe7f95b
tearDown
public void tearDown()
{    sm.destroy();    super.tearDown();}
b8bf19f724ec1745ff195beef402167188962502dcee285a4329647a89a59237
newSubject
protected Subject newSubject(ServletRequest request, ServletResponse response)
{    return new WebSubject.Builder(sm, request, response).buildSubject();}
ae98b14e5f879e56bee8d1419c7d7e019ac08ed76b6cf01fcecd206f043b7330
checkSessionManagerDeterminesContainerSessionMode
public void checkSessionManagerDeterminesContainerSessionMode()
{    sm.setSessionMode(DefaultWebSecurityManager.NATIVE_SESSION_MODE);    WebSessionManager sessionManager = createMock(WebSessionManager.class);    expect(sessionManager.isServletContainerSessions()).andReturn(true).anyTimes();    replay(sessionManager);    sm.setSessionManager(sessionManager);    assertTrue("The set SessionManager is not being used to determine isHttpSessionMode.", sm.isHttpSessionMode());    verify(sessionManager);}
1fba6ef578995f1849088d522f5a15eb879903158dd9526d8cf786c4ed4069f2
shiroSessionModeInit
public void shiroSessionModeInit()
{    sm.setSessionMode(DefaultWebSecurityManager.NATIVE_SESSION_MODE);}
b3b4bd7e1e752d53d4ec985a6efb81f4b632b1b24970d9da7171a3af796e506b
sleep
protected void sleep(long millis)
{    try {        Thread.sleep(millis);    } catch (InterruptedException e) {        throw new IllegalStateException(e);    }}
a59f837374b1a4292cb30c04086d495cd07c0aa157103543d4fe6e0fbae19b20
testLogin
public void testLogin()
{    HttpServletRequest mockRequest = createNiceMock(HttpServletRequest.class);    HttpServletResponse mockResponse = createNiceMock(HttpServletResponse.class);    expect(mockRequest.getCookies()).andReturn(null);    expect(mockRequest.getContextPath()).andReturn("/");    replay(mockRequest);    Subject subject = newSubject(mockRequest, mockResponse);    assertFalse(subject.isAuthenticated());    subject.login(new UsernamePasswordToken("lonestarr", "vespa"));    assertTrue(subject.isAuthenticated());    assertNotNull(subject.getPrincipal());    assertTrue(subject.getPrincipal().equals("lonestarr"));}
0f75cade5fdeb5ea3a3847d06138721e36921364942cdfbeaf38ab8e5a26b574
testSessionTimeout
public void testSessionTimeout()
{    shiroSessionModeInit();    long globalTimeout = 100;    ((AbstractSessionManager) sm.getSessionManager()).setGlobalSessionTimeout(globalTimeout);    HttpServletRequest mockRequest = createNiceMock(HttpServletRequest.class);    HttpServletResponse mockResponse = createNiceMock(HttpServletResponse.class);    expect(mockRequest.getCookies()).andReturn(null);    expect(mockRequest.getContextPath()).andReturn("/");    replay(mockRequest);    Subject subject = newSubject(mockRequest, mockResponse);    Session session = subject.getSession();    assertEquals(session.getTimeout(), globalTimeout);    session.setTimeout(125);    assertEquals(session.getTimeout(), 125);    sleep(200);    try {        session.getTimeout();        fail("Session should have expired.");    } catch (ExpiredSessionException expected) {    }}
1e04c5f67b557656b111541ee67f10d291bfb29bb0a9dbfef140b76cc9c1eb6f
testGetSubjectByRequestResponsePair
public void testGetSubjectByRequestResponsePair()
{    shiroSessionModeInit();    HttpServletRequest mockRequest = createNiceMock(HttpServletRequest.class);    HttpServletResponse mockResponse = createNiceMock(HttpServletResponse.class);    expect(mockRequest.getCookies()).andReturn(null);    replay(mockRequest);    replay(mockResponse);    Subject subject = newSubject(mockRequest, mockResponse);    verify(mockRequest);    verify(mockResponse);    assertNotNull(subject);    assertTrue(subject.getPrincipals() == null || subject.getPrincipals().isEmpty());    assertTrue(subject.getSession(false) == null);    assertFalse(subject.isAuthenticated());}
c7aefcc1c55b84462311ec1f1c5592792bee70229c6a91c80dcf8367a18504c2
testGetSubjectByRequestSessionId
public void testGetSubjectByRequestSessionId()
{    shiroSessionModeInit();    HttpServletRequest mockRequest = createNiceMock(HttpServletRequest.class);    HttpServletResponse mockResponse = createNiceMock(HttpServletResponse.class);    replay(mockRequest);    replay(mockResponse);    Subject subject = newSubject(mockRequest, mockResponse);    Session session = subject.getSession();    Serializable sessionId = session.getId();    assertNotNull(sessionId);    verify(mockRequest);    verify(mockResponse);    mockRequest = createNiceMock(HttpServletRequest.class);    mockResponse = createNiceMock(HttpServletResponse.class);        Cookie[] cookies = new Cookie[] { new Cookie(ShiroHttpSession.DEFAULT_SESSION_ID_NAME, sessionId.toString()) };    expect(mockRequest.getCookies()).andReturn(cookies).anyTimes();    expect(mockRequest.getParameter(isA(String.class))).andReturn(null).anyTimes();    replay(mockRequest);    replay(mockResponse);    subject = newSubject(mockRequest, mockResponse);    session = subject.getSession(false);    assertNotNull(session);    assertEquals(sessionId, session.getId());    verify(mockRequest);    verify(mockResponse);}
6664bbb70b155f92bdd633747a03b906b6c5da4936bbb8b10dc24ee84694be57
testBuildNonWebSubjectWithDefaultServletContainerSessionManager
public void testBuildNonWebSubjectWithDefaultServletContainerSessionManager()
{    Ini ini = new Ini();    Ini.Section section = ini.addSection(IniRealm.USERS_SECTION_NAME);    section.put("user1", "user1");    WebIniSecurityManagerFactory factory = new WebIniSecurityManagerFactory(ini);    WebSecurityManager securityManager = (WebSecurityManager) factory.getInstance();    PrincipalCollection principals = new SimplePrincipalCollection("user1", "iniRealm");    Subject subject = new Subject.Builder(securityManager).principals(principals).buildSubject();    assertNotNull(subject);    assertEquals("user1", subject.getPrincipal());}
5ff0b8f7d2b080bcc6214fa5f91be74727145ea81cacb63a99c8d0f3106c089f
setup
public void setup()
{    sm = new DefaultWebSecurityManager();    Ini ini = new Ini();    Ini.Section section = ini.addSection(IniRealm.USERS_SECTION_NAME);    section.put("lonestarr", "vespa");    sm.setRealm(new IniRealm(ini));}
39e5ba029cc67f6f1d45c6d20f0df595ec16bc61da20d7680fcbbdae4fe7f95b
tearDown
public void tearDown()
{    sm.destroy();    super.tearDown();}
d9075dbb34d148043372a6c437ad50be6153284776a7555a72a5bb09c3bd39ba
testLoginNonWebSubject
public void testLoginNonWebSubject()
{    Subject.Builder builder = new Subject.Builder(sm);    Subject subject = builder.buildSubject();    subject.login(new UsernamePasswordToken("lonestarr", "vespa"));}
4adaefafec562702d887f5960a1408e5f9d1add92c42fab7cb857d701c42d2a2
setUp
public void setUp()
{    FILTERED[0] = false;    filter = createTestInstance();    chain = createNiceMock(FilterChain.class);    request = createNiceMock(ServletRequest.class);    response = createNiceMock(ServletResponse.class);}
a1b91ba2dae3297db1d791aa9dc0ea0bf131d45add244f07b7b6b532d2807627
createTestInstance
private OncePerRequestFilter createTestInstance()
{    OncePerRequestFilter filter = new OncePerRequestFilter() {        @Override        protected void doFilterInternal(ServletRequest request, ServletResponse response, FilterChain chain) throws ServletException, IOException {            FILTERED[0] = true;        }    };    filter.setName(NAME);    return filter;}
556ca09122f3c7fa98f58db957b012f1935c0e0cac75085516d519fdb3024454
doFilterInternal
protected void doFilterInternal(ServletRequest request, ServletResponse response, FilterChain chain) throws ServletException, IOException
{    FILTERED[0] = true;}
f4af52faefec555d02b8be82aea35b1622e9a32a339e3b43cea61a519cda5970
testEnabled
public void testEnabled() throws IOException, ServletException
{    expect(request.getAttribute(ATTR_NAME)).andReturn(null).anyTimes();    replay(request);    filter.doFilter(request, response, chain);    verify(request);    assertTrue("Filter should have executed", FILTERED[0]);}
a4a3dbd291f6fbecd228a1fb0c6c82b19c308f8327b1b7d7a8f95491524139b5
testDisabled
public void testDisabled() throws IOException, ServletException
{        filter.setEnabled(false);    expect(request.getAttribute(ATTR_NAME)).andReturn(null).anyTimes();    replay(request);    filter.doFilter(request, response, chain);    verify(request);    assertFalse("Filter should NOT have executed", FILTERED[0]);}
9d69bfd2a279cacda04001b1c50c6f6698b00750596931407928c5a8169d56b7
setUp
public void setUp() throws Exception
{    this.mockRequest = createMock(HttpServletRequest.class);    this.mockContext = createMock(ServletContext.class);    this.mockSubject = createMock(Subject.class);    ThreadContext.bind(this.mockSubject);    this.request = new ShiroHttpServletRequest(mockRequest, mockContext, false);}
9a64949a762c7cb8bf0d5e07962145639bedf50f5d8d8626c058d1ff4a4c879c
testRegetSession
public void testRegetSession() throws Exception
{    Session session1 = createMock(Session.class);    Session session2 = createMock(Session.class);    mockSubject.logout();    expect(mockSubject.getSession(true)).andReturn(session1).times(1).andReturn(session2).times(1);    expect(mockSubject.getSession(false)).andReturn(session1).times(2).andReturn(null).times(3);    replay(mockSubject);    assertNotNull(request.getSession(true));    assertNotNull(request.getSession(false));    mockSubject.logout();    assertNull(request.getSession(false));    assertNotNull(request.getSession(true));    verify(mockSubject);}
9d69bfd2a279cacda04001b1c50c6f6698b00750596931407928c5a8169d56b7
setUp
public void setUp() throws Exception
{    this.mockRequest = createMock(HttpServletRequest.class);    this.mockResponse = createMock(HttpServletResponse.class);    this.cookie = new SimpleCookie("test");}
d3d0eccabe0c8b545029b77746ebc169a6fecd2e9b5f9c3ac2cf771f420e732a
testRemoveValue
public void testRemoveValue() throws Exception
{                String name = "test";    String value = "deleteMe";    String path = "/somepath";    String headerValue = this.cookie.buildHeaderValue(name, value, null, null, path, 0, SimpleCookie.DEFAULT_VERSION, false, false, null);    String expectedStart = new StringBuilder().append(name).append(SimpleCookie.NAME_VALUE_DELIMITER).append(value).append(SimpleCookie.ATTRIBUTE_DELIMITER).append(SimpleCookie.PATH_ATTRIBUTE_NAME).append(SimpleCookie.NAME_VALUE_DELIMITER).append(path).toString();    assertTrue(headerValue.startsWith(expectedStart));    expect(mockRequest.getContextPath()).andReturn(path).times(1);        mockResponse.addHeader(eq(SimpleCookie.COOKIE_HEADER_NAME), isA(String.class));    replay(mockRequest);    replay(mockResponse);    this.cookie.removeFrom(mockRequest, mockResponse);    verify(mockRequest);    verify(mockResponse);}
c0f87889d57d966e567809e63e8fbd2db7386ef31fab4182dff735b7d87a2db9
testRootContextPath
private void testRootContextPath(String contextPath)
{    this.cookie.setValue("blah");    String expectedCookieValue = new StringBuilder().append("test").append(SimpleCookie.NAME_VALUE_DELIMITER).append("blah").append(SimpleCookie.ATTRIBUTE_DELIMITER).append(SimpleCookie.PATH_ATTRIBUTE_NAME).append(SimpleCookie.NAME_VALUE_DELIMITER).append(Cookie.ROOT_PATH).append(SimpleCookie.ATTRIBUTE_DELIMITER).append(SimpleCookie.HTTP_ONLY_ATTRIBUTE_NAME).append(SimpleCookie.ATTRIBUTE_DELIMITER).append(SimpleCookie.SAME_SITE_ATTRIBUTE_NAME).append(SimpleCookie.NAME_VALUE_DELIMITER).append(Cookie.SameSiteOptions.LAX.toString().toLowerCase(Locale.ENGLISH)).toString();    expect(mockRequest.getContextPath()).andReturn(contextPath);    mockResponse.addHeader(SimpleCookie.COOKIE_HEADER_NAME, expectedCookieValue);    replay(mockRequest);    replay(mockResponse);    this.cookie.saveTo(mockRequest, mockResponse);    verify(mockRequest);    verify(mockResponse);}
5bd62e223ac2d0f6f2bd8bcd554def41256ec442a43b7dfe00e9ba3b78450234
testEmptyContextPath
public void testEmptyContextPath() throws Exception
{    testRootContextPath("");}
6ca9cd6dda425620552d350bfdadc0be332fc29d69d0ccadd4fe0e7dec3cd16a
testNullContextPath
public void testNullContextPath() throws Exception
{    testRootContextPath(null);}
3d673606e3a456a0e87f07b16bc9b3fde30d1e8e2392bcb114a8f67fe968aab1
testReadValueInvalidPath
public void testReadValueInvalidPath() throws Exception
{    expect(mockRequest.getRequestURI()).andStubReturn("/foo/index.jsp");    expect(mockRequest.getCookies()).andStubReturn(new javax.servlet.http.Cookie[] { new javax.servlet.http.Cookie(this.cookie.getName(), "value") });    replay(mockRequest);    replay(mockResponse);    this.cookie.setPath("/bar/index.jsp");    assertEquals(null, this.cookie.readValue(mockRequest, mockResponse));}
7b1d4f59b915f705ff3f76292a36ac5aadb2a52dbba59fe373751f4840c91909
testReadValuePrefixPath
public void testReadValuePrefixPath() throws Exception
{    expect(mockRequest.getRequestURI()).andStubReturn("/bar/index.jsp");    expect(mockRequest.getCookies()).andStubReturn(new javax.servlet.http.Cookie[] { new javax.servlet.http.Cookie(this.cookie.getName(), "value") });    replay(mockRequest);    replay(mockResponse);    this.cookie.setPath("/bar");    assertEquals("value", this.cookie.readValue(mockRequest, mockResponse));}
270006517d307cef05daf4205c73b1a63b35c00b3e970e5b6c4df68e41915304
testReadValueInvalidPrefixPath
public void testReadValueInvalidPrefixPath() throws Exception
{    expect(mockRequest.getRequestURI()).andStubReturn("/foobar/index.jsp");    expect(mockRequest.getCookies()).andStubReturn(new javax.servlet.http.Cookie[] { new javax.servlet.http.Cookie(this.cookie.getName(), "value") });    replay(mockRequest);    replay(mockResponse);    this.cookie.setPath("/foo");    assertEquals(null, this.cookie.readValue(mockRequest, mockResponse));}
7601d58491c8170154169c577111b09ff69b351e55ca96da726d837f2c9aa0d1
eqCookie
private static T eqCookie(final T in)
{    reportMatcher(new IArgumentMatcher() {        public boolean matches(Object o) {            javax.servlet.http.Cookie c = (javax.servlet.http.Cookie) o;            return c.getName().equals(in.getName()) && c.getValue().equals(in.getValue()) && c.getPath().equals(in.getPath()) && c.getMaxAge() == in.getMaxAge() && c.getSecure() == in.getSecure() && c.getValue().equals(in.getValue());        }        public void appendTo(StringBuffer sb) {            sb.append("eqCookie(");            sb.append(in.getClass().getName());            sb.append(")");        }    });    return null;}
4b76f08448051d0b2c30bed3181b740cecea28e3be1e496e637436cb88dff87c
matches
public boolean matches(Object o)
{    javax.servlet.http.Cookie c = (javax.servlet.http.Cookie) o;    return c.getName().equals(in.getName()) && c.getValue().equals(in.getValue()) && c.getPath().equals(in.getPath()) && c.getMaxAge() == in.getMaxAge() && c.getSecure() == in.getSecure() && c.getValue().equals(in.getValue());}
6db7c79488791e7dcb33163df673264fe52b46c0349de6890eda4f0f1129205a
appendTo
public void appendTo(StringBuffer sb)
{    sb.append("eqCookie(");    sb.append(in.getClass().getName());    sb.append(")");}
9d69bfd2a279cacda04001b1c50c6f6698b00750596931407928c5a8169d56b7
setUp
public void setUp() throws Exception
{    this.mockSession = createMock(HttpSession.class);}
029da0c8c0fa0dd0ed8e6b73fe331a45abb9142c5f7bcd803db7b4cc2ed22294
testLongTimeout
public void testLongTimeout() throws Exception
{        final int expectedTimeoutInSeconds = 30 * 24 * 60 * 60;    final long expectedLongValue = expectedTimeoutInSeconds * 1000L;    Capture<Integer> capturedInt = Capture.newInstance();        mockSession.setMaxInactiveInterval(captureInt(capturedInt));    expect(mockSession.getMaxInactiveInterval()).andReturn(expectedTimeoutInSeconds);    replay(mockSession);    HttpServletSession servletSession = new HttpServletSession(mockSession, null);    servletSession.setTimeout(expectedLongValue);    long timeoutInMilliseconds = servletSession.getTimeout();    assertEquals(expectedLongValue, timeoutInMilliseconds);    assertEquals(expectedTimeoutInSeconds, capturedInt.getValue().intValue());}
09d33b824deedd06256058bbc90d2e04fe2cce944e5ce9ad9f46261db61467ef
createNiceMockFilterConfig
protected FilterConfig createNiceMockFilterConfig()
{    FilterConfig mock = createNiceMock(FilterConfig.class);    ServletContext mockServletContext = createNiceMock(ServletContext.class);    expect(mock.getServletContext()).andReturn(mockServletContext);    return mock;}
