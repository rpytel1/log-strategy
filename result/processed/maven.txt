7ff4fd2d3a8245a5f2ad9f1a9836ed8956e2ebe948ab64bb4d7115e50d1c2306
testValidGlobalSettings
public void testValidGlobalSettings() throws Exception
{    String basedir = System.getProperty("basedir", System.getProperty("user.dir"));    File globalSettingsFile = new File(basedir, "src/conf/settings.xml");    assertTrue(globalSettingsFile.getAbsolutePath(), globalSettingsFile.isFile());    try (Reader reader = new InputStreamReader(new FileInputStream(globalSettingsFile), "UTF-8")) {        new SettingsXpp3Reader().read(reader);    }}
09b732bf1cddca0f7ae95e8922ca935b5e64f5a143758f6c2b4f8b4f78850fa6
isSnapshot
public static boolean isSnapshot(String version)
{    if (version != null) {        if (version.regionMatches(true, version.length() - Artifact.SNAPSHOT_VERSION.length(), Artifact.SNAPSHOT_VERSION, 0, Artifact.SNAPSHOT_VERSION.length())) {            return true;        } else if (Artifact.VERSION_FILE_PATTERN.matcher(version).matches()) {            return true;        }    }    return false;}
5619bbde78ae71e5240ac58877c0c20948bcacb27e4981f62c1f55333e9f2107
toSnapshotVersion
public static String toSnapshotVersion(String version)
{    notBlank(version, "version can neither be null, empty nor blank");    int lastHyphen = version.lastIndexOf('-');    if (lastHyphen > 0) {        int prevHyphen = version.lastIndexOf('-', lastHyphen - 1);        if (prevHyphen > 0) {            Matcher m = Artifact.VERSION_FILE_PATTERN.matcher(version);            if (m.matches()) {                return m.group(1) + "-" + Artifact.SNAPSHOT_VERSION;            }        }    }    return version;}
f66a88d46b720d3355d165ce47c5fb7044e68b633e78a2e48aaa094acc3a2ece
versionlessKey
public static String versionlessKey(Artifact artifact)
{    return versionlessKey(artifact.getGroupId(), artifact.getArtifactId());}
b2314da0c92a779d707b7bf5b8483235547007772bcd0ca2b5ab3567fc18a5ba
versionlessKey
public static String versionlessKey(String groupId, String artifactId)
{    notBlank(groupId, "groupId can neither be null, empty nor blank");    notBlank(artifactId, "artifactId can neither be null, empty nor blank");    return groupId + ":" + artifactId;}
459433c7880edd0108824b404320abc5c2081b09aced72ab1cd790a726edda96
key
public static String key(Artifact artifact)
{    return key(artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion());}
1670b250caf865fab6eb76dfe9f8b20e9735f23ae0363ba8994772b8d943e303
key
public static String key(String groupId, String artifactId, String version)
{    notBlank(groupId, "groupId can neither be null, empty nor blank");    notBlank(artifactId, "artifactId can neither be null, empty nor blank");    notBlank(version, "version can neither be null, empty nor blank");    return groupId + ":" + artifactId + ":" + version;}
ffef36e9eee00172fe3bd11b377ac97222da3d63e88c3bc779690d5eb99d2887
notBlank
private static void notBlank(String str, String message)
{    int c = str != null && str.length() > 0 ? str.charAt(0) : 0;    if ((c < '0' || c > '9') && (c < 'a' || c > 'z')) {        Validate.notBlank(str, message);    }}
e0dd81cdf829ab3fb909465bfb5d986a26d7dee331ed9bfc4e28ff8a64ad8d56
artifactMapByVersionlessId
public static Map<String, Artifact> artifactMapByVersionlessId(Collection<Artifact> artifacts)
{    Map<String, Artifact> artifactMap = new LinkedHashMap<>();    if (artifacts != null) {        for (Artifact artifact : artifacts) {            artifactMap.put(versionlessKey(artifact), artifact);        }    }    return artifactMap;}
d773341cadb384adb71094454046c89e21cb2820401250308542694af847d253
copyArtifactSafe
public static Artifact copyArtifactSafe(Artifact artifact)
{    return (artifact != null) ? copyArtifact(artifact) : null;}
809e7f4c11294e23d45611e9224f139c8679764ed3ce1ab6e5fb88db165aa06a
copyArtifact
public static Artifact copyArtifact(Artifact artifact)
{    VersionRange range = artifact.getVersionRange();    if (range == null) {        range = VersionRange.createFromVersion(artifact.getVersion());    }    DefaultArtifact clone = new DefaultArtifact(artifact.getGroupId(), artifact.getArtifactId(), range, artifact.getScope(), artifact.getType(), artifact.getClassifier(), artifact.getArtifactHandler(), artifact.isOptional());    clone.setRelease(artifact.isRelease());    clone.setResolvedVersion(artifact.getVersion());    clone.setResolved(artifact.isResolved());    clone.setFile(artifact.getFile());    clone.setAvailableVersions(copyList(artifact.getAvailableVersions()));    if (artifact.getVersion() != null) {        clone.setBaseVersion(artifact.getBaseVersion());    }    clone.setDependencyFilter(artifact.getDependencyFilter());    clone.setDependencyTrail(copyList(artifact.getDependencyTrail()));    clone.setDownloadUrl(artifact.getDownloadUrl());    clone.setRepository(artifact.getRepository());    return clone;}
9c783141eb41196ea0be8188ef5134fd2d6c6078ca2f4cf910ea2eab13cb16a4
copyArtifacts
public static T copyArtifacts(Collection<Artifact> from, T to)
{    for (Artifact artifact : from) {        to.add(ArtifactUtils.copyArtifact(artifact));    }    return to;}
3e6d96fee91716c553658029f7ededa57656b50107d44d79b23234947e0bd1bf
copyArtifacts
public static T copyArtifacts(Map<K, ? extends Artifact> from, T to)
{    if (from != null) {        for (Map.Entry<K, ? extends Artifact> entry : from.entrySet()) {            to.put(entry.getKey(), ArtifactUtils.copyArtifact(entry.getValue()));        }    }    return to;}
4025960bf7daf998b8abf5b1a0c5f976663aff4f2d4f37ed2ca0256ad18f4fca
copyList
private static List<T> copyList(List<T> original)
{    List<T> copy = null;    if (original != null) {        copy = new ArrayList<>();        if (!original.isEmpty()) {            copy.addAll(original);        }    }    return copy;}
21f5dd807f90052ee834d73f72638d749ea17c4dcf9a12275e1ca74b9fd2d0de
validateIdentity
private void validateIdentity()
{    if (empty(groupId)) {        throw new InvalidArtifactRTException(groupId, artifactId, getVersion(), type, "The groupId cannot be empty.");    }    if (artifactId == null) {        throw new InvalidArtifactRTException(groupId, artifactId, getVersion(), type, "The artifactId cannot be empty.");    }    if (type == null) {        throw new InvalidArtifactRTException(groupId, artifactId, getVersion(), type, "The type cannot be empty.");    }    if ((version == null) && (versionRange == null)) {        throw new InvalidArtifactRTException(groupId, artifactId, getVersion(), type, "The version cannot be empty.");    }}
8f678b885f83c4f6c8d73a5015f222914e40f92a95d68d0e5dd681cbe34fede2
empty
private boolean empty(String value)
{    return (value == null) || (value.trim().length() < 1);}
72a56f4f76ed886823d719d171deaf7269e3e03581e490ae41d8888ab09c151c
getClassifier
public String getClassifier()
{    return classifier;}
f721392a893d3529016cc4cdf57e5222c13055ee095293044098556f68151dba
hasClassifier
public boolean hasClassifier()
{    return StringUtils.isNotEmpty(classifier);}
b6618886f045f72bd87b21e6ae50c04bc9f78ceb97355e9a0b0208f7669f7aa1
getScope
public String getScope()
{    return scope;}
9590314d7a6edd0118345714cc714a8e73448e57e702bb4c6893b363f509d64d
getGroupId
public String getGroupId()
{    return groupId;}
1e5191dc99d9314f2df50294bcd8d717af7b8f4311575d36d8d75b27121f1064
getArtifactId
public String getArtifactId()
{    return artifactId;}
446b3b91c7c41085df1dc5542616b89ccd409f6a1d45e4d60d3ca00ac839ecf0
getVersion
public String getVersion()
{    return version;}
fa655d76002df94322c0d82cb5fbadecc48b0bb7bb0e58203d0a274985fccd86
setVersion
public void setVersion(String version)
{    this.version = version;    setBaseVersionInternal(version);    versionRange = null;}
624f725337dde847c4a699397a02f1b5558c709c88374adb10e603d835f48c88
getType
public String getType()
{    return type;}
5e248210883b15055dbb92bcae692722adb76b511c50cc45408180b9a2a63764
setFile
public void setFile(File file)
{    this.file = file;}
ce0460f83bd172eacce98e8169f6d9b1d4ec316943fcf77ee2d8f12bbe7327a0
getFile
public File getFile()
{    return file;}
2173adbe55779ccb687142434f49e47b69ce1c4fc751fc2716e0487d65e3ec95
getRepository
public ArtifactRepository getRepository()
{    return repository;}
ec0b3ed0d7a9686a9733de62d618b332ae7a4b855d740b2399cb216d989b648b
setRepository
public void setRepository(ArtifactRepository repository)
{    this.repository = repository;}
09e8f13a9a603d31d64bb498b77d15572483824d843d0e82a570643192f62186
getId
public String getId()
{    return getDependencyConflictId() + ":" + getBaseVersion();}
1e6367faf89cb024d8c4d0b1db16125646d0f72a98ca702d55130cc6ac4f7cb3
getDependencyConflictId
public String getDependencyConflictId()
{    StringBuilder sb = new StringBuilder(128);    sb.append(getGroupId());    sb.append(':');    appendArtifactTypeClassifierString(sb);    return sb.toString();}
86b9cb0e6ea29cb86d7a7a86663df22baa4ab12196e5343c9372e5bf8e48187e
appendArtifactTypeClassifierString
private void appendArtifactTypeClassifierString(StringBuilder sb)
{    sb.append(getArtifactId());    sb.append(':');    sb.append(getType());    if (hasClassifier()) {        sb.append(':');        sb.append(getClassifier());    }}
26c41cc6f2bd2900b31464e8fd6b88dec56c1d99feedd7e0a5902b8e48f24c0b
addMetadata
public void addMetadata(ArtifactMetadata metadata)
{    if (metadataMap == null) {        metadataMap = new HashMap<>();    }    ArtifactMetadata m = metadataMap.get(metadata.getKey());    if (m != null) {        m.merge(metadata);    } else {        metadataMap.put(metadata.getKey(), metadata);    }}
5dd6732fbbd37765248b59cd0778916b61cf1f3d76152f0d3647aa9df6a3ea6b
getMetadataList
public Collection<ArtifactMetadata> getMetadataList()
{    if (metadataMap == null) {        return Collections.emptyList();    }    return Collections.unmodifiableCollection(metadataMap.values());}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    StringBuilder sb = new StringBuilder();    if (getGroupId() != null) {        sb.append(getGroupId());        sb.append(':');    }    appendArtifactTypeClassifierString(sb);    sb.append(':');    if (getBaseVersionInternal() != null) {        sb.append(getBaseVersionInternal());    } else {        sb.append(versionRange.toString());    }    if (scope != null) {        sb.append(':');        sb.append(scope);    }    return sb.toString();}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    int result = 17;    result = 37 * result + groupId.hashCode();    result = 37 * result + artifactId.hashCode();    result = 37 * result + type.hashCode();    if (version != null) {        result = 37 * result + version.hashCode();    }    result = 37 * result + (classifier != null ? classifier.hashCode() : 0);    return result;}
8d37d11c7ecfc0d0589696a89cb385888c83bd3e43ea0c95a3b4ae4ef78180ce
equals
public boolean equals(Object o)
{    if (o == this) {        return true;    }    if (!(o instanceof Artifact)) {        return false;    }    Artifact a = (Artifact) o;    if (!a.getGroupId().equals(groupId)) {        return false;    } else if (!a.getArtifactId().equals(artifactId)) {        return false;    } else if (!a.getVersion().equals(version)) {        return false;    } else if (!a.getType().equals(type)) {        return false;    } else if (a.getClassifier() == null ? classifier != null : !a.getClassifier().equals(classifier)) {        return false;    }    return true;}
2127b25546d419ff53a6da73c9acb361090188bd943b368d5e79d3f5d5595571
getBaseVersion
public String getBaseVersion()
{    if (baseVersion == null && version != null) {        setBaseVersionInternal(version);    }    return baseVersion;}
db2e3358f7af3ce4d5add6a211fa9db1ad6d6b941e5cd4b5694ddeb34a9c5ee4
getBaseVersionInternal
protected String getBaseVersionInternal()
{    if ((baseVersion == null) && (version != null)) {        setBaseVersionInternal(version);    }    return baseVersion;}
23be2c70ac63eb6873c76ebec2b6999b847bb0fec48ae937cdad8a750c45b816
setBaseVersion
public void setBaseVersion(String baseVersion)
{    setBaseVersionInternal(baseVersion);}
41fc612495de06b4a7b08657cfc0b875106afbdbe0e49d10b378d044ac4b3918
setBaseVersionInternal
protected void setBaseVersionInternal(String baseVersion)
{    this.baseVersion = ArtifactUtils.toSnapshotVersion(baseVersion);}
ad34435e911d504b25d4d3737bbaf6d6d9df4c0f035f975cfa76206f6d10a20d
compareTo
public int compareTo(Artifact a)
{    int result = groupId.compareTo(a.getGroupId());    if (result == 0) {        result = artifactId.compareTo(a.getArtifactId());        if (result == 0) {            result = type.compareTo(a.getType());            if (result == 0) {                if (classifier == null) {                    if (a.getClassifier() != null) {                        result = 1;                    }                } else {                    if (a.getClassifier() != null) {                        result = classifier.compareTo(a.getClassifier());                    } else {                        result = -1;                    }                }                if (result == 0) {                                        result = new DefaultArtifactVersion(version).compareTo(new DefaultArtifactVersion(a.getVersion()));                }            }        }    }    return result;}
3c7286dc9e3d0c57af6c42ceb0a870fdd4a1294203fa6dced67a1b05e995dbb3
updateVersion
public void updateVersion(String version, ArtifactRepository localRepository)
{    setResolvedVersion(version);    setFile(new File(localRepository.getBasedir(), localRepository.pathOf(this)));}
fdd3c1095681a9eb2b1cd3eaadc9c96fd8a66c032317c81a42a6759226050a56
getDownloadUrl
public String getDownloadUrl()
{    return downloadUrl;}
9bcae5cc53323a34cae81cd8b75e999e21913fc4c3cb526ff717322b9553bc85
setDownloadUrl
public void setDownloadUrl(String downloadUrl)
{    this.downloadUrl = downloadUrl;}
f7d9d9ab9b071bdeeae7ec4a36cdd3c15abe1337d5de4b71e53e8af09cf50723
getDependencyFilter
public ArtifactFilter getDependencyFilter()
{    return dependencyFilter;}
2c1e943d37b3257ce09eea53921797572835423ed2ef2d8ae53c7906e992e131
setDependencyFilter
public void setDependencyFilter(ArtifactFilter artifactFilter)
{    dependencyFilter = artifactFilter;}
52365404758e32b55e3cb9f08dbe4f0fee2589e9df75d6c65f381f8bee09edf0
getArtifactHandler
public ArtifactHandler getArtifactHandler()
{    return artifactHandler;}
a7f9690d083d0c367e9793e09d5da8fdac602db24768486b038b62acf216e515
getDependencyTrail
public List<String> getDependencyTrail()
{    return dependencyTrail;}
0e53d454aff0099e8133a67ca4fd591d53837bc6543de0ed9e072d8edc0fae69
setDependencyTrail
public void setDependencyTrail(List<String> dependencyTrail)
{    this.dependencyTrail = dependencyTrail;}
5c4863d73a6ffacd6a18b7c969209012fb3ef554b5811f0b02f91fa7d3ec102d
setScope
public void setScope(String scope)
{    this.scope = scope;}
2f4655c15394cc011c44bcfe146bf944356810a7e8c9309fd6e06f3d9064a9b7
getVersionRange
public VersionRange getVersionRange()
{    return versionRange;}
fd7b53cc466ef6757eca85bfbcd6c62c61072a3329495b9a9d2885627e3d988f
setVersionRange
public void setVersionRange(VersionRange versionRange)
{    this.versionRange = versionRange;    selectVersionFromNewRangeIfAvailable();}
8cab001513d18b394f60ae1d0a1564e26309ac4dd5f48d9a45fa93ab6182dc0a
selectVersionFromNewRangeIfAvailable
private void selectVersionFromNewRangeIfAvailable()
{    if ((versionRange != null) && (versionRange.getRecommendedVersion() != null)) {        selectVersion(versionRange.getRecommendedVersion().toString());    } else {        version = null;        baseVersion = null;    }}
6859049ee6755b805ed6cfd6cc459926346d8a041574061dfa774001a1deeaad
selectVersion
public void selectVersion(String version)
{    this.version = version;    setBaseVersionInternal(version);}
71bcb3c91e0d464929235253ed6afcc351b3e9058163242c449a951b7b882841
setGroupId
public void setGroupId(String groupId)
{    this.groupId = groupId;}
20cbd85c6b33f77aed396f8e4100794ba5666a5469aea43d797e8b46e9761df1
setArtifactId
public void setArtifactId(String artifactId)
{    this.artifactId = artifactId;}
2ade99e89c0802b58f3776f3f0e6d2be8b4db4b2629b011476786812f36d732e
isSnapshot
public boolean isSnapshot()
{    return getBaseVersion() != null && (getBaseVersion().endsWith(SNAPSHOT_VERSION) || getBaseVersion().equals(LATEST_VERSION));}
fef31378b34f4ec716c70a189152bb383cecb916bacbf12caacb9219745a1e07
setResolved
public void setResolved(boolean resolved)
{    this.resolved = resolved;}
2fa99a8aa2d293aadf123d8cbc90fb9b630a79bcc950706530654a9eec5b5162
isResolved
public boolean isResolved()
{    return resolved;}
c2589c9064dd8fc585ea12b866224712940218e18389ab77eb58f698acb848a5
setResolvedVersion
public void setResolvedVersion(String version)
{    this.version = version;}
e411ea2daa231e6625fa6ccaaf892deaa969fc8f63b0ad3d547c81ebb2fec9a6
setArtifactHandler
public void setArtifactHandler(ArtifactHandler artifactHandler)
{    this.artifactHandler = artifactHandler;}
256a0efdfd4b84f3fc2f54278eedb9b391570aa38945f40fcedc3aa30642f9a1
setRelease
public void setRelease(boolean release)
{    this.release = release;}
f308fae413bd651f467700bcd28719f9f8630f381481c07a1c9a2953fd5954d4
isRelease
public boolean isRelease()
{    return release;}
ddcea356411655ad892cda430f842666cce0dcbdebb84a6489c94699e56c23d8
getAvailableVersions
public List<ArtifactVersion> getAvailableVersions()
{    return availableVersions;}
2c6c640a29362db1d8ae6d92e399a7409f06ded4d023986ee14c5585c2fa15f3
setAvailableVersions
public void setAvailableVersions(List<ArtifactVersion> availableVersions)
{    this.availableVersions = availableVersions;}
d08e7adc07954a1eeda9fa3e115108b037db3cbed44d8e96edad28f88e853513
isOptional
public boolean isOptional()
{    return optional;}
32a03f1670c9cbc4691983dbd3dcfb5e759525e27d7924855bf834f85f78335f
getSelectedVersion
public ArtifactVersion getSelectedVersion() throws OverConstrainedVersionException
{    return versionRange.getSelectedVersion(this);}
139d50a13f73004101837282064f86968ebf4d5cd72f24c9c6bb1cb0f46ac8e1
isSelectedVersionKnown
public boolean isSelectedVersionKnown() throws OverConstrainedVersionException
{    return versionRange.isSelectedVersionKnown(this);}
f0b0621c604eeeb3cf40f1c764cb7e508310d033f3fd1e903830ad18682d1de0
setOptional
public void setOptional(boolean optional)
{    this.optional = optional;}
b46153cc21231cb60e014b6b3c49b437699575e4012681cb08026e5238c66751
getMessage
public String getMessage()
{    return "For artifact {" + getArtifactKey() + "}: " + getBaseMessage();}
190e02f934ddba35482f4485183ea1bff5871cf527ea9dc0a214fe266427a6f0
getBaseMessage
public String getBaseMessage()
{    return baseMessage;}
1e5191dc99d9314f2df50294bcd8d717af7b8f4311575d36d8d75b27121f1064
getArtifactId
public String getArtifactId()
{    return artifactId;}
9590314d7a6edd0118345714cc714a8e73448e57e702bb4c6893b363f509d64d
getGroupId
public String getGroupId()
{    return groupId;}
624f725337dde847c4a699397a02f1b5558c709c88374adb10e603d835f48c88
getType
public String getType()
{    return type;}
446b3b91c7c41085df1dc5542616b89ccd409f6a1d45e4d60d3ca00ac839ecf0
getVersion
public String getVersion()
{    return version;}
86e6bc21ce01c96aac0b11d962b67a065753d8c830081b78a0ee90be720bea1b
getArtifactKey
public String getArtifactKey()
{    return groupId + ":" + artifactId + ":" + version + ":" + type;}
0ed97cfb12835792458743d0abab13b6fabba6fa7dfb98c4d62e5e03167ed7d7
setEnabled
public void setEnabled(boolean enabled)
{    this.enabled = enabled;}
ff7df3222d495adefb5c5261b7cc4ebff61588dc6fb7e23cbf46ff9e9f47e94b
setUpdatePolicy
public void setUpdatePolicy(String updatePolicy)
{    if (updatePolicy != null) {        this.updatePolicy = updatePolicy;    }}
f5553bfab9cb092ca144f4f2232e1f20de90f4c84ab883ac177110f4983ad64b
setChecksumPolicy
public void setChecksumPolicy(String checksumPolicy)
{    if (checksumPolicy != null) {        this.checksumPolicy = checksumPolicy;    }}
3d48e803344c7a7e8e54f2ff2765c17f83485a126437f578afd50ad0c851ac27
isEnabled
public boolean isEnabled()
{    return enabled;}
f11aec9c64101dde1d3a603e92d53d69c24aa577a39d803fe0d5dedf6f1eb268
getUpdatePolicy
public String getUpdatePolicy()
{    return updatePolicy;}
c9b36f846de8f8506b6e311db0e66502680ec1d64e72624ed6d6211a5435c420
getChecksumPolicy
public String getChecksumPolicy()
{    return checksumPolicy;}
9b73986c149d0fd730fb08c42b6df28c68d05ead5705942ffc07393714b19ec1
checkOutOfDate
public boolean checkOutOfDate(Date lastModified)
{    boolean checkForUpdates = false;    if (UPDATE_POLICY_ALWAYS.equals(updatePolicy)) {        checkForUpdates = true;    } else if (UPDATE_POLICY_DAILY.equals(updatePolicy)) {                Calendar cal = Calendar.getInstance();        cal.set(Calendar.HOUR_OF_DAY, 0);        cal.set(Calendar.MINUTE, 0);        cal.set(Calendar.SECOND, 0);        cal.set(Calendar.MILLISECOND, 0);        if (cal.getTime().after(lastModified)) {            checkForUpdates = true;        }    } else if (updatePolicy.startsWith(UPDATE_POLICY_INTERVAL)) {        String s = updatePolicy.substring(UPDATE_POLICY_INTERVAL.length() + 1);        int minutes = Integer.valueOf(s);        Calendar cal = Calendar.getInstance();        cal.add(Calendar.MINUTE, -minutes);        if (cal.getTime().after(lastModified)) {            checkForUpdates = true;        }    }        return checkForUpdates;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    StringBuilder buffer = new StringBuilder(64);    buffer.append("{enabled=");    buffer.append(enabled);    buffer.append(", checksums=");    buffer.append(checksumPolicy);    buffer.append(", updates=");    buffer.append(updatePolicy);    buffer.append('}');    return buffer.toString();}
51401324bab5d3eca7bea1758b6fb6963d7fea180069227f7d6b51b47dc3060a
merge
public void merge(ArtifactRepositoryPolicy policy)
{    if (policy != null && policy.isEnabled()) {        setEnabled(true);        if (ordinalOfCksumPolicy(policy.getChecksumPolicy()) < ordinalOfCksumPolicy(getChecksumPolicy())) {            setChecksumPolicy(policy.getChecksumPolicy());        }        if (ordinalOfUpdatePolicy(policy.getUpdatePolicy()) < ordinalOfUpdatePolicy(getUpdatePolicy())) {            setUpdatePolicy(policy.getUpdatePolicy());        }    }}
0a7736f4cfd0054213210c1379c5a9f3b9fee385be7c95b21082b22d6aea475a
ordinalOfCksumPolicy
private int ordinalOfCksumPolicy(String policy)
{    if (ArtifactRepositoryPolicy.CHECKSUM_POLICY_FAIL.equals(policy)) {        return 2;    } else if (ArtifactRepositoryPolicy.CHECKSUM_POLICY_IGNORE.equals(policy)) {        return 0;    } else {        return 1;    }}
2c966a6bd7c497be3fbd7a1927c73301da2441f239478f1cb06dd5aa8b63d7e7
ordinalOfUpdatePolicy
private int ordinalOfUpdatePolicy(String policy)
{    if (ArtifactRepositoryPolicy.UPDATE_POLICY_DAILY.equals(policy)) {        return 1440;    } else if (ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS.equals(policy)) {        return 0;    } else if (policy != null && policy.startsWith(ArtifactRepositoryPolicy.UPDATE_POLICY_INTERVAL)) {        String s = policy.substring(UPDATE_POLICY_INTERVAL.length() + 1);        return Integer.valueOf(s);    } else {        return Integer.MAX_VALUE;    }}
84dc993e9ee2454a836a462d555136356e8d932d11a2a18b6c05e86764987456
getPassword
public String getPassword()
{    return password;}
a3fc85e095b71ade6f23516e300582f2daf9dc9c17a00077a31a992f77c08289
setPassword
public void setPassword(String password)
{    this.password = password;}
6a70299d74b1ed8da0ff8fec5a1c89ba0dff9b5b133bb2544a0bc6abb19bcee7
getUsername
public String getUsername()
{    return username;}
c843ecef68c5afb098f6933c6ccb087e8e3b8b1c399e3646c666363e1d903e74
setUsername
public void setUsername(final String userName)
{    this.username = userName;}
abcbb9ad60fdebce2af167f855905cd944f981230683e764e8ed337991d83fb9
getPassphrase
public String getPassphrase()
{    return passphrase;}
bb8cd74c914dd3586d68835e88befc199dcec96b6120f1efca299b50f117817b
setPassphrase
public void setPassphrase(final String passphrase)
{    this.passphrase = passphrase;}
d768e6d8e48568921933b5a93258a1a44c487c79ffa844c8e79c4ea1a5e4297f
getPrivateKey
public String getPrivateKey()
{    return privateKey;}
f3f0a8f298a24d2700aebb4f31a3580382d4c5744e205bd3e3926dd9601e0c6a
setPrivateKey
public void setPrivateKey(final String privateKey)
{    this.privateKey = privateKey;}
74532920252ab24aba3facb8f78a175de2fc4c1c8247fe2b3b2dce7bf79f6858
getArtifact
public Artifact getArtifact()
{    return artifact;}
9590314d7a6edd0118345714cc714a8e73448e57e702bb4c6893b363f509d64d
getGroupId
public String getGroupId()
{    return groupId;}
1e5191dc99d9314f2df50294bcd8d717af7b8f4311575d36d8d75b27121f1064
getArtifactId
public String getArtifactId()
{    return artifactId;}
446b3b91c7c41085df1dc5542616b89ccd409f6a1d45e4d60d3ca00ac839ecf0
getVersion
public String getVersion()
{    return version;}
624f725337dde847c4a699397a02f1b5558c709c88374adb10e603d835f48c88
getType
public String getType()
{    return type;}
72a56f4f76ed886823d719d171deaf7269e3e03581e490ae41d8888ab09c151c
getClassifier
public String getClassifier()
{    return this.classifier;}
58e7b527ecd5014eaf5f30fc9c50ba33e1f005f8ce9d24246253d62377788662
getPath
public String getPath()
{    return this.path;}
4fd44e1a9f23aaf113060017b1d8f6d3cf8794c129edf477e6b2ddacdfe7400d
getRemoteRepositories
public List<ArtifactRepository> getRemoteRepositories()
{    return remoteRepositories;}
38474dadad19762f77cbba12b80f1fce3c7b9de1b47a9e9e7f9ccc390c6ffb3d
getOriginalMessage
public String getOriginalMessage()
{    return originalMessage;}
5dd8441e64750590b65cb6760578aaa42bfde46a296e5dac697943761ac85cf5
constructArtifactPath
protected static String constructArtifactPath(List<String> path, String indentation)
{    StringBuilder sb = new StringBuilder();    if (path != null) {        sb.append(LS);        sb.append(indentation);        sb.append("Path to dependency: ");        sb.append(LS);        int num = 1;        for (Iterator<String> i = path.iterator(); i.hasNext(); num++) {            sb.append(indentation);            sb.append('\t');            sb.append(num);            sb.append(") ");            sb.append(i.next());            sb.append(LS);        }    }    return sb.toString();}
815d5f90549a248bb0576f3c19581b9caff4f2e8eda86458d84df2122d7f70af
constructMessageBase
private static String constructMessageBase(String message, String groupId, String artifactId, String version, String type, List<ArtifactRepository> remoteRepositories, List<String> path)
{    StringBuilder sb = new StringBuilder();    sb.append(message);    if (message == null || !message.contains("from the specified remote repositories:")) {        sb.append(LS);        sb.append("  ").append(groupId).append(':').append(artifactId).append(':').append(type).append(':').append(version);        sb.append(LS);        if (remoteRepositories != null) {            sb.append(LS);            sb.append("from the specified remote repositories:");            sb.append(LS).append("  ");            if (remoteRepositories.isEmpty()) {                sb.append("(none)");            }            for (Iterator<ArtifactRepository> i = remoteRepositories.iterator(); i.hasNext(); ) {                ArtifactRepository remoteRepository = i.next();                sb.append(remoteRepository.getId());                sb.append(" (");                sb.append(remoteRepository.getUrl());                ArtifactRepositoryPolicy releases = remoteRepository.getReleases();                if (releases != null) {                    sb.append(", releases=").append(releases.isEnabled());                }                ArtifactRepositoryPolicy snapshots = remoteRepository.getSnapshots();                if (snapshots != null) {                    sb.append(", snapshots=").append(snapshots.isEnabled());                }                sb.append(')');                if (i.hasNext()) {                    sb.append(',').append(LS).append("  ");                }            }        }        sb.append(constructArtifactPath(path, ""));        sb.append(LS);    }    return sb.toString();}
4f176727a2414affd0d2a80b5a5f9e9a6f6e392ea6972b6c1d58891b89ccf0d0
constructMissingArtifactMessage
protected static String constructMissingArtifactMessage(String message, String indentation, String groupId, String artifactId, String version, String type, String classifier, String downloadUrl, List<String> path)
{    StringBuilder sb = new StringBuilder(message);    if (!"pom".equals(type)) {        if (downloadUrl != null) {            sb.append(LS);            sb.append(LS);            sb.append(indentation);            sb.append("Try downloading the file manually from: ");            sb.append(LS);            sb.append(indentation);            sb.append("    ");            sb.append(downloadUrl);        } else {            sb.append(LS);            sb.append(LS);            sb.append(indentation);            sb.append("Try downloading the file manually from the project website.");        }        sb.append(LS);        sb.append(LS);        sb.append(indentation);        sb.append("Then, install it using the command: ");        sb.append(LS);        sb.append(indentation);        sb.append("    mvn install:install-file -DgroupId=");        sb.append(groupId);        sb.append(" -DartifactId=");        sb.append(artifactId);        sb.append(" -Dversion=");        sb.append(version);                if (classifier != null && !classifier.equals("")) {            sb.append(" -Dclassifier=");            sb.append(classifier);        }        sb.append(" -Dpackaging=");        sb.append(type);        sb.append(" -Dfile=/path/to/file");        sb.append(LS);                sb.append(LS);        sb.append(indentation);        sb.append("Alternatively, if you host your own repository you can deploy the file there: ");        sb.append(LS);        sb.append(indentation);        sb.append("    mvn deploy:deploy-file -DgroupId=");        sb.append(groupId);        sb.append(" -DartifactId=");        sb.append(artifactId);        sb.append(" -Dversion=");        sb.append(version);                if (classifier != null && !classifier.equals("")) {            sb.append(" -Dclassifier=");            sb.append(classifier);        }        sb.append(" -Dpackaging=");        sb.append(type);        sb.append(" -Dfile=/path/to/file");        sb.append(" -Durl=[url] -DrepositoryId=[id]");        sb.append(LS);    }    sb.append(constructArtifactPath(path, indentation));    sb.append(LS);    return sb.toString();}
31616c0f9a62b6348c50aaabc6cc8db014ce5f8cf72cc4667b2221a1d7d8c442
getArtifactPath
public String getArtifactPath()
{    return path;}
fdd3c1095681a9eb2b1cd3eaadc9c96fd8a66c032317c81a42a6759226050a56
getDownloadUrl
public String getDownloadUrl()
{    return downloadUrl;}
74532920252ab24aba3facb8f78a175de2fc4c1c8247fe2b3b2dce7bf79f6858
getArtifact
public Artifact getArtifact()
{    return artifact;}
89872cfc1374fcdf19fb5aae1f5749af15d3338f3840a3d75afc62d6f2294541
getResolvedArtifacts
public List<Artifact> getResolvedArtifacts()
{    return resolvedArtifacts;}
af9f88fa9ba078665d213d6ee428178026aede11c4b21d282f059bc294a87697
getMissingArtifacts
public List<Artifact> getMissingArtifacts()
{    return missingArtifacts;}
49acb572b6aad869711fc9a93f0d6b0fdd8e9e4d597b86db3fb4acf29e65d1bb
constructMessage
private static String constructMessage(List<Artifact> artifacts)
{    StringBuilder buffer = new StringBuilder(256);    buffer.append("Missing:\n");    buffer.append("----------\n");    int counter = 0;    for (Artifact artifact : artifacts) {        String message = (++counter) + ") " + artifact.getId();        buffer.append(constructMissingArtifactMessage(message, "  ", artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion(), artifact.getType(), artifact.getClassifier(), artifact.getDownloadUrl(), artifact.getDependencyTrail()));    }    buffer.append("----------\n");    int size = artifacts.size();    buffer.append(size).append(" required artifact");    if (size > 1) {        buffer.append("s are");    } else {        buffer.append(" is");    }    buffer.append(" missing.\n\nfor artifact: ");    return buffer.toString();}
e13ca6770d128854311e967cbfe111c5323a9155e542cbb6a563c89bfcce6811
getType
public int getType()
{    return INT_ITEM;}
14124e1e34e22cf40627f45a091e903cfa733d6810b53442872d7e033ca0a7bf
isNull
public boolean isNull()
{    return value == 0;}
dc92293aab84378b1397d8e475f3f5227bc411a01bb053f9a8eed5f823abc702
compareTo
public int compareTo(Item item)
{    if (item == null) {                return (value == 0) ? 0 : 1;    }    switch(item.getType()) {        case INT_ITEM:            int itemValue = ((IntItem) item).value;            return (value < itemValue) ? -1 : ((value == itemValue) ? 0 : 1);        case LONG_ITEM:        case BIGINTEGER_ITEM:            return -1;        case STRING_ITEM:                        return 1;        case LIST_ITEM:                        return 1;        default:            throw new IllegalStateException("invalid item: " + item.getClass());    }}
8d37d11c7ecfc0d0589696a89cb385888c83bd3e43ea0c95a3b4ae4ef78180ce
equals
public boolean equals(Object o)
{    if (this == o) {        return true;    }    if (o == null || getClass() != o.getClass()) {        return false;    }    IntItem intItem = (IntItem) o;    return value == intItem.value;}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    return value;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return Integer.toString(value);}
e13ca6770d128854311e967cbfe111c5323a9155e542cbb6a563c89bfcce6811
getType
public int getType()
{    return LONG_ITEM;}
14124e1e34e22cf40627f45a091e903cfa733d6810b53442872d7e033ca0a7bf
isNull
public boolean isNull()
{    return value == 0;}
dc92293aab84378b1397d8e475f3f5227bc411a01bb053f9a8eed5f823abc702
compareTo
public int compareTo(Item item)
{    if (item == null) {                return (value == 0) ? 0 : 1;    }    switch(item.getType()) {        case INT_ITEM:            return 1;        case LONG_ITEM:            long itemValue = ((LongItem) item).value;            return (value < itemValue) ? -1 : ((value == itemValue) ? 0 : 1);        case BIGINTEGER_ITEM:            return -1;        case STRING_ITEM:                        return 1;        case LIST_ITEM:                        return 1;        default:            throw new IllegalStateException("invalid item: " + item.getClass());    }}
8d37d11c7ecfc0d0589696a89cb385888c83bd3e43ea0c95a3b4ae4ef78180ce
equals
public boolean equals(Object o)
{    if (this == o) {        return true;    }    if (o == null || getClass() != o.getClass()) {        return false;    }    LongItem longItem = (LongItem) o;    return value == longItem.value;}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    return (int) (value ^ (value >>> 32));}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return Long.toString(value);}
e13ca6770d128854311e967cbfe111c5323a9155e542cbb6a563c89bfcce6811
getType
public int getType()
{    return BIGINTEGER_ITEM;}
14124e1e34e22cf40627f45a091e903cfa733d6810b53442872d7e033ca0a7bf
isNull
public boolean isNull()
{    return BigInteger.ZERO.equals(value);}
dc92293aab84378b1397d8e475f3f5227bc411a01bb053f9a8eed5f823abc702
compareTo
public int compareTo(Item item)
{    if (item == null) {                return BigInteger.ZERO.equals(value) ? 0 : 1;    }    switch(item.getType()) {        case INT_ITEM:        case LONG_ITEM:            return 1;        case BIGINTEGER_ITEM:            return value.compareTo(((BigIntegerItem) item).value);        case STRING_ITEM:                        return 1;        case LIST_ITEM:                        return 1;        default:            throw new IllegalStateException("invalid item: " + item.getClass());    }}
8d37d11c7ecfc0d0589696a89cb385888c83bd3e43ea0c95a3b4ae4ef78180ce
equals
public boolean equals(Object o)
{    if (this == o) {        return true;    }    if (o == null || getClass() != o.getClass()) {        return false;    }    BigIntegerItem that = (BigIntegerItem) o;    return value.equals(that.value);}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    return value.hashCode();}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return value.toString();}
e13ca6770d128854311e967cbfe111c5323a9155e542cbb6a563c89bfcce6811
getType
public int getType()
{    return STRING_ITEM;}
14124e1e34e22cf40627f45a091e903cfa733d6810b53442872d7e033ca0a7bf
isNull
public boolean isNull()
{    return (comparableQualifier(value).compareTo(RELEASE_VERSION_INDEX) == 0);}
5348662d8c716322c7ec3316debb94bee6dedcd444d046732c9197718b7fd53b
comparableQualifier
public static String comparableQualifier(String qualifier)
{    int i = QUALIFIERS.indexOf(qualifier);    return i == -1 ? (QUALIFIERS.size() + "-" + qualifier) : String.valueOf(i);}
dc92293aab84378b1397d8e475f3f5227bc411a01bb053f9a8eed5f823abc702
compareTo
public int compareTo(Item item)
{    if (item == null) {                return comparableQualifier(value).compareTo(RELEASE_VERSION_INDEX);    }    switch(item.getType()) {        case INT_ITEM:        case LONG_ITEM:        case BIGINTEGER_ITEM:                        return -1;        case STRING_ITEM:            return comparableQualifier(value).compareTo(comparableQualifier(((StringItem) item).value));        case LIST_ITEM:                        return -1;        default:            throw new IllegalStateException("invalid item: " + item.getClass());    }}
8d37d11c7ecfc0d0589696a89cb385888c83bd3e43ea0c95a3b4ae4ef78180ce
equals
public boolean equals(Object o)
{    if (this == o) {        return true;    }    if (o == null || getClass() != o.getClass()) {        return false;    }    StringItem that = (StringItem) o;    return value.equals(that.value);}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    return value.hashCode();}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return value;}
e13ca6770d128854311e967cbfe111c5323a9155e542cbb6a563c89bfcce6811
getType
public int getType()
{    return LIST_ITEM;}
14124e1e34e22cf40627f45a091e903cfa733d6810b53442872d7e033ca0a7bf
isNull
public boolean isNull()
{    return (size() == 0);}
32126d0cfa3b6863fc652e9e30bc0027f3464968a8810dd805feb4a7b5a51d6b
normalize
 void normalize()
{    for (int i = size() - 1; i >= 0; i--) {        Item lastItem = get(i);        if (lastItem.isNull()) {                        remove(i);        } else if (!(lastItem instanceof ListItem)) {            break;        }    }}
dc92293aab84378b1397d8e475f3f5227bc411a01bb053f9a8eed5f823abc702
compareTo
public int compareTo(Item item)
{    if (item == null) {        if (size() == 0) {                        return 0;        }        Item first = get(0);        return first.compareTo(null);    }    switch(item.getType()) {        case INT_ITEM:        case LONG_ITEM:        case BIGINTEGER_ITEM:                        return -1;        case STRING_ITEM:                        return 1;        case LIST_ITEM:            Iterator<Item> left = iterator();            Iterator<Item> right = ((ListItem) item).iterator();            while (left.hasNext() || right.hasNext()) {                Item l = left.hasNext() ? left.next() : null;                Item r = right.hasNext() ? right.next() : null;                                int result = l == null ? (r == null ? 0 : -1 * r.compareTo(l)) : l.compareTo(r);                if (result != 0) {                    return result;                }            }            return 0;        default:            throw new IllegalStateException("invalid item: " + item.getClass());    }}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    StringBuilder buffer = new StringBuilder();    for (Item item : this) {        if (buffer.length() > 0) {            buffer.append((item instanceof ListItem) ? '-' : '.');        }        buffer.append(item);    }    return buffer.toString();}
5e1587ea4800023b8a662fa074e91dfb30bee948613e86bb984850d67bd181c6
parseVersion
public final void parseVersion(String version)
{    this.value = version;    items = new ListItem();    version = version.toLowerCase(Locale.ENGLISH);    ListItem list = items;    Deque<Item> stack = new ArrayDeque<>();    stack.push(list);    boolean isDigit = false;    int startIndex = 0;    for (int i = 0; i < version.length(); i++) {        char c = version.charAt(i);        if (c == '.') {            if (i == startIndex) {                list.add(IntItem.ZERO);            } else {                list.add(parseItem(isDigit, version.substring(startIndex, i)));            }            startIndex = i + 1;        } else if (c == '-') {            if (i == startIndex) {                list.add(IntItem.ZERO);            } else {                list.add(parseItem(isDigit, version.substring(startIndex, i)));            }            startIndex = i + 1;            list.add(list = new ListItem());            stack.push(list);        } else if (Character.isDigit(c)) {            if (!isDigit && i > startIndex) {                list.add(new StringItem(version.substring(startIndex, i), true));                startIndex = i;                list.add(list = new ListItem());                stack.push(list);            }            isDigit = true;        } else {            if (isDigit && i > startIndex) {                list.add(parseItem(true, version.substring(startIndex, i)));                startIndex = i;                list.add(list = new ListItem());                stack.push(list);            }            isDigit = false;        }    }    if (version.length() > startIndex) {        list.add(parseItem(isDigit, version.substring(startIndex)));    }    while (!stack.isEmpty()) {        list = (ListItem) stack.pop();        list.normalize();    }}
e53e550a3c9d3359daa6987853fd4b991f535aba1902aa16a2db4990a7b0a9df
parseItem
private static Item parseItem(boolean isDigit, String buf)
{    if (isDigit) {        buf = stripLeadingZeroes(buf);        if (buf.length() <= MAX_INTITEM_LENGTH) {                        return new IntItem(buf);        } else if (buf.length() <= MAX_LONGITEM_LENGTH) {                        return new LongItem(buf);        }        return new BigIntegerItem(buf);    }    return new StringItem(buf, false);}
e9dad92afb1749e2c688338ea461e54b8a1affd7ea160db8e51693f310210d17
stripLeadingZeroes
private static String stripLeadingZeroes(String buf)
{    if (buf == null || buf.isEmpty()) {        return "0";    }    for (int i = 0; i < buf.length(); ++i) {        char c = buf.charAt(i);        if (c != '0') {            return buf.substring(i);        }    }    return buf;}
592c1dde7cae3bbdcfcb5cc807cd55c4bc1d59d1780b04c5d852b8b1110b7287
compareTo
public int compareTo(ComparableVersion o)
{    return items.compareTo(o.items);}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return value;}
86a6248c70e71379bc7b5db219470ca1ad1cfca8d7f6646f855f867be4ae5b57
getCanonical
public String getCanonical()
{    if (canonical == null) {        canonical = items.toString();    }    return canonical;}
8d37d11c7ecfc0d0589696a89cb385888c83bd3e43ea0c95a3b4ae4ef78180ce
equals
public boolean equals(Object o)
{    return (o instanceof ComparableVersion) && items.equals(((ComparableVersion) o).items);}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    return items.hashCode();}
e561e0fb33b6ecad74cfac95aff4a2ea7fe4834945d1691bd93c1963888a3ff8
main
public static void main(String... args)
{    System.out.println("Display parameters as parsed by Maven (in canonical form) and comparison result:");    if (args.length == 0) {        return;    }    ComparableVersion prev = null;    int i = 1;    for (String version : args) {        ComparableVersion c = new ComparableVersion(version);        if (prev != null) {            int compare = prev.compareTo(c);            System.out.println("   " + prev.toString() + ' ' + ((compare == 0) ? "==" : ((compare < 0) ? "<" : ">")) + ' ' + version);        }        System.out.println(String.valueOf(i++) + ". " + version + " == " + c.getCanonical());        prev = c;    }}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    return 11 + comparable.hashCode();}
74e378df448c6c3cd090d6daf881cfac8957dd555869ea4c13a46bdc6cdcf9a6
equals
public boolean equals(Object other)
{    if (this == other) {        return true;    }    if (!(other instanceof ArtifactVersion)) {        return false;    }    return compareTo((ArtifactVersion) other) == 0;}
87597d10d8d24e5d4246101a2598a218e8ece995d426b1502f5a71a380a540f4
compareTo
public int compareTo(ArtifactVersion otherVersion)
{    if (otherVersion instanceof DefaultArtifactVersion) {        return this.comparable.compareTo(((DefaultArtifactVersion) otherVersion).comparable);    } else {        return compareTo(new DefaultArtifactVersion(otherVersion.toString()));    }}
add8ba8d22276fda6011e31335e9559357f36a4472abd1443285071b389b4553
getMajorVersion
public int getMajorVersion()
{    return majorVersion != null ? majorVersion : 0;}
5ceadde540982a3cc9503c0d596a954074f26ed5c305344601c9d10afbe3243e
getMinorVersion
public int getMinorVersion()
{    return minorVersion != null ? minorVersion : 0;}
14eb8734c04508eef907a7fab8bd6d846b18ff351e747b344a81cf2737a14e97
getIncrementalVersion
public int getIncrementalVersion()
{    return incrementalVersion != null ? incrementalVersion : 0;}
dcac54987c06c4cded928db4650c06ee72e28d2136ac6424b19fa6dafd290bae
getBuildNumber
public int getBuildNumber()
{    return buildNumber != null ? buildNumber : 0;}
482d4834f54a4df750b6bd0053ce65d11623533ff4b1a4bc7da92c2a12ab1936
getQualifier
public String getQualifier()
{    return qualifier;}
5e1587ea4800023b8a662fa074e91dfb30bee948613e86bb984850d67bd181c6
parseVersion
public final void parseVersion(String version)
{    comparable = new ComparableVersion(version);    int index = version.indexOf('-');    String part1;    String part2 = null;    if (index < 0) {        part1 = version;    } else {        part1 = version.substring(0, index);        part2 = version.substring(index + 1);    }    if (part2 != null) {        if (part2.length() == 1 || !part2.startsWith("0")) {            buildNumber = tryParseInt(part2);            if (buildNumber == null) {                qualifier = part2;            }        } else {            qualifier = part2;        }    }    if ((!part1.contains(".")) && !part1.startsWith("0")) {        majorVersion = tryParseInt(part1);        if (majorVersion == null) {                        qualifier = version;            buildNumber = null;        }    } else {        boolean fallback = false;        StringTokenizer tok = new StringTokenizer(part1, ".");        if (tok.hasMoreTokens()) {            majorVersion = getNextIntegerToken(tok);            if (majorVersion == null) {                fallback = true;            }        } else {            fallback = true;        }        if (tok.hasMoreTokens()) {            minorVersion = getNextIntegerToken(tok);            if (minorVersion == null) {                fallback = true;            }        }        if (tok.hasMoreTokens()) {            incrementalVersion = getNextIntegerToken(tok);            if (incrementalVersion == null) {                fallback = true;            }        }        if (tok.hasMoreTokens()) {            qualifier = tok.nextToken();            fallback = isDigits(qualifier);        }                if (part1.contains("..") || part1.startsWith(".") || part1.endsWith(".")) {            fallback = true;        }        if (fallback) {                        qualifier = version;            majorVersion = null;            minorVersion = null;            incrementalVersion = null;            buildNumber = null;        }    }}
ce7840721e191019e3e12b5641163202ef9ab9c4a7782994c8db62c8d940c1a7
getNextIntegerToken
private static Integer getNextIntegerToken(StringTokenizer tok)
{    String s = tok.nextToken();    if ((s.length() > 1) && s.startsWith("0")) {        return null;    }    return tryParseInt(s);}
83f2e88155446ac0716b6d8ab789e9df19406e0ca8038619fca7951a4288a479
tryParseInt
private static Integer tryParseInt(String s)
{        if (!isDigits(s)) {        return null;    }    try {        long longValue = Long.parseLong(s);        if (longValue > Integer.MAX_VALUE) {            return null;        }        return (int) longValue;    } catch (NumberFormatException e) {                return null;    }}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return comparable.toString();}
54f767f5633a2d5168f31f88fdaf73bd3873aa87e7c257a29ba6ccaee3063d98
getLowerBound
public ArtifactVersion getLowerBound()
{    return lowerBound;}
6f63a27985cf85da1f174cbc841e1dd75c355ac0a72785aff97b9fd9a1f35f1f
isLowerBoundInclusive
public boolean isLowerBoundInclusive()
{    return lowerBoundInclusive;}
f97aaaee2dfc2def733ec12c3c744b66847019cb3ee87fb38c0ed0f7e326c903
getUpperBound
public ArtifactVersion getUpperBound()
{    return upperBound;}
9ad193cadbeb080fe8e95d8ef061dacb1bfe38a98dcf4ebba38b269188726c09
isUpperBoundInclusive
public boolean isUpperBoundInclusive()
{    return upperBoundInclusive;}
c51dc949072c5bc40f3896fc61a39ceecab54374e1dbfccc0257f5439157a936
containsVersion
public boolean containsVersion(ArtifactVersion version)
{    if (lowerBound != null) {        int comparison = lowerBound.compareTo(version);        if ((comparison == 0) && !lowerBoundInclusive) {            return false;        }        if (comparison > 0) {            return false;        }    }    if (upperBound != null) {        int comparison = upperBound.compareTo(version);        if ((comparison == 0) && !upperBoundInclusive) {            return false;        }        if (comparison < 0) {            return false;        }    }    return true;}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    int result = 13;    if (lowerBound == null) {        result += 1;    } else {        result += lowerBound.hashCode();    }    result *= lowerBoundInclusive ? 1 : 2;    if (upperBound == null) {        result -= 3;    } else {        result -= upperBound.hashCode();    }    result *= upperBoundInclusive ? 2 : 3;    return result;}
74e378df448c6c3cd090d6daf881cfac8957dd555869ea4c13a46bdc6cdcf9a6
equals
public boolean equals(Object other)
{    if (this == other) {        return true;    }    if (!(other instanceof Restriction)) {        return false;    }    Restriction restriction = (Restriction) other;    if (lowerBound != null) {        if (!lowerBound.equals(restriction.lowerBound)) {            return false;        }    } else if (restriction.lowerBound != null) {        return false;    }    if (lowerBoundInclusive != restriction.lowerBoundInclusive) {        return false;    }    if (upperBound != null) {        if (!upperBound.equals(restriction.upperBound)) {            return false;        }    } else if (restriction.upperBound != null) {        return false;    }    return upperBoundInclusive == restriction.upperBoundInclusive;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    StringBuilder buf = new StringBuilder();    buf.append(isLowerBoundInclusive() ? '[' : '(');    if (getLowerBound() != null) {        buf.append(getLowerBound().toString());    }    buf.append(',');    if (getUpperBound() != null) {        buf.append(getUpperBound().toString());    }    buf.append(isUpperBoundInclusive() ? ']' : ')');    return buf.toString();}
b7b0468c1b4094d381c6534f07351cada754bc840702ea73aa37b83b303f8e6c
getRecommendedVersion
public ArtifactVersion getRecommendedVersion()
{    return recommendedVersion;}
63df5e69a4eb3dc42e3f5ff385aaf88606db978f8724f51168a73173f0c1c757
getRestrictions
public List<Restriction> getRestrictions()
{    return restrictions;}
ea4166b49119208c9c67b34e82e4dcdd4e968537e3261bbe4afcfba88b8853e2
cloneOf
public VersionRange cloneOf()
{    List<Restriction> copiedRestrictions = null;    if (restrictions != null) {        copiedRestrictions = new ArrayList<>();        if (!restrictions.isEmpty()) {            copiedRestrictions.addAll(restrictions);        }    }    return new VersionRange(recommendedVersion, copiedRestrictions);}
2bb7eeef51995aa4eeba6041e31378ec57399ea1731d9aef7651bd8da3a9648d
createFromVersionSpec
public static VersionRange createFromVersionSpec(String spec) throws InvalidVersionSpecificationException
{    if (spec == null) {        return null;    }    VersionRange cached = CACHE_SPEC.get(spec);    if (cached != null) {        return cached;    }    List<Restriction> restrictions = new ArrayList<>();    String process = spec;    ArtifactVersion version = null;    ArtifactVersion upperBound = null;    ArtifactVersion lowerBound = null;    while (process.startsWith("[") || process.startsWith("(")) {        int index1 = process.indexOf(')');        int index2 = process.indexOf(']');        int index = index2;        if (index2 < 0 || index1 < index2) {            if (index1 >= 0) {                index = index1;            }        }        if (index < 0) {            throw new InvalidVersionSpecificationException("Unbounded range: " + spec);        }        Restriction restriction = parseRestriction(process.substring(0, index + 1));        if (lowerBound == null) {            lowerBound = restriction.getLowerBound();        }        if (upperBound != null) {            if (restriction.getLowerBound() == null || restriction.getLowerBound().compareTo(upperBound) < 0) {                throw new InvalidVersionSpecificationException("Ranges overlap: " + spec);            }        }        restrictions.add(restriction);        upperBound = restriction.getUpperBound();        process = process.substring(index + 1).trim();        if (process.length() > 0 && process.startsWith(",")) {            process = process.substring(1).trim();        }    }    if (process.length() > 0) {        if (restrictions.size() > 0) {            throw new InvalidVersionSpecificationException("Only fully-qualified sets allowed in multiple set scenario: " + spec);        } else {            version = new DefaultArtifactVersion(process);            restrictions.add(Restriction.EVERYTHING);        }    }    cached = new VersionRange(version, restrictions);    CACHE_SPEC.put(spec, cached);    return cached;}
57e9103c12724a1882fc521967111246a3b572a99f84435beba56db825646e80
parseRestriction
private static Restriction parseRestriction(String spec) throws InvalidVersionSpecificationException
{    boolean lowerBoundInclusive = spec.startsWith("[");    boolean upperBoundInclusive = spec.endsWith("]");    String process = spec.substring(1, spec.length() - 1).trim();    Restriction restriction;    int index = process.indexOf(',');    if (index < 0) {        if (!lowerBoundInclusive || !upperBoundInclusive) {            throw new InvalidVersionSpecificationException("Single version must be surrounded by []: " + spec);        }        ArtifactVersion version = new DefaultArtifactVersion(process);        restriction = new Restriction(version, lowerBoundInclusive, version, upperBoundInclusive);    } else {        String lowerBound = process.substring(0, index).trim();        String upperBound = process.substring(index + 1).trim();        if (lowerBound.equals(upperBound)) {            throw new InvalidVersionSpecificationException("Range cannot have identical boundaries: " + spec);        }        ArtifactVersion lowerVersion = null;        if (lowerBound.length() > 0) {            lowerVersion = new DefaultArtifactVersion(lowerBound);        }        ArtifactVersion upperVersion = null;        if (upperBound.length() > 0) {            upperVersion = new DefaultArtifactVersion(upperBound);        }        if (upperVersion != null && lowerVersion != null && upperVersion.compareTo(lowerVersion) < 0) {            throw new InvalidVersionSpecificationException("Range defies version ordering: " + spec);        }        restriction = new Restriction(lowerVersion, lowerBoundInclusive, upperVersion, upperBoundInclusive);    }    return restriction;}
70d6f7619e0822bed29eee41e60be06497e87ce6ba5067d85d8a0116dc334836
createFromVersion
public static VersionRange createFromVersion(String version)
{    VersionRange cached = CACHE_VERSION.get(version);    if (cached == null) {        List<Restriction> restrictions = Collections.emptyList();        cached = new VersionRange(new DefaultArtifactVersion(version), restrictions);        CACHE_VERSION.put(version, cached);    }    return cached;}
23efcd4418deffbc267a854fbfbaabbdf8531ff63e6cdebcc398dcaeef7a64c6
restrict
public VersionRange restrict(VersionRange restriction)
{    List<Restriction> r1 = this.restrictions;    List<Restriction> r2 = restriction.restrictions;    List<Restriction> restrictions;    if (r1.isEmpty() || r2.isEmpty()) {        restrictions = Collections.emptyList();    } else {        restrictions = Collections.unmodifiableList(intersection(r1, r2));    }    ArtifactVersion version = null;    if (restrictions.size() > 0) {        for (Restriction r : restrictions) {            if (recommendedVersion != null && r.containsVersion(recommendedVersion)) {                                version = recommendedVersion;                break;            } else if (version == null && restriction.getRecommendedVersion() != null && r.containsVersion(restriction.getRecommendedVersion())) {                                version = restriction.getRecommendedVersion();            }        }    } else     if (recommendedVersion != null) {                version = recommendedVersion;    } else if (restriction.recommendedVersion != null) {                        version = restriction.recommendedVersion;    }    return new VersionRange(version, restrictions);}
3bfadfff3e23827db68b8bc59e59e8082e64352fe8252b010909737563322032
intersection
private List<Restriction> intersection(List<Restriction> r1, List<Restriction> r2)
{    List<Restriction> restrictions = new ArrayList<>(r1.size() + r2.size());    Iterator<Restriction> i1 = r1.iterator();    Iterator<Restriction> i2 = r2.iterator();    Restriction res1 = i1.next();    Restriction res2 = i2.next();    boolean done = false;    while (!done) {        if (res1.getLowerBound() == null || res2.getUpperBound() == null || res1.getLowerBound().compareTo(res2.getUpperBound()) <= 0) {            if (res1.getUpperBound() == null || res2.getLowerBound() == null || res1.getUpperBound().compareTo(res2.getLowerBound()) >= 0) {                ArtifactVersion lower;                ArtifactVersion upper;                boolean lowerInclusive;                boolean upperInclusive;                                if (res1.getLowerBound() == null) {                    lower = res2.getLowerBound();                    lowerInclusive = res2.isLowerBoundInclusive();                } else if (res2.getLowerBound() == null) {                    lower = res1.getLowerBound();                    lowerInclusive = res1.isLowerBoundInclusive();                } else {                    int comparison = res1.getLowerBound().compareTo(res2.getLowerBound());                    if (comparison < 0) {                        lower = res2.getLowerBound();                        lowerInclusive = res2.isLowerBoundInclusive();                    } else if (comparison == 0) {                        lower = res1.getLowerBound();                        lowerInclusive = res1.isLowerBoundInclusive() && res2.isLowerBoundInclusive();                    } else {                        lower = res1.getLowerBound();                        lowerInclusive = res1.isLowerBoundInclusive();                    }                }                if (res1.getUpperBound() == null) {                    upper = res2.getUpperBound();                    upperInclusive = res2.isUpperBoundInclusive();                } else if (res2.getUpperBound() == null) {                    upper = res1.getUpperBound();                    upperInclusive = res1.isUpperBoundInclusive();                } else {                    int comparison = res1.getUpperBound().compareTo(res2.getUpperBound());                    if (comparison < 0) {                        upper = res1.getUpperBound();                        upperInclusive = res1.isUpperBoundInclusive();                    } else if (comparison == 0) {                        upper = res1.getUpperBound();                        upperInclusive = res1.isUpperBoundInclusive() && res2.isUpperBoundInclusive();                    } else {                        upper = res2.getUpperBound();                        upperInclusive = res2.isUpperBoundInclusive();                    }                }                                if (lower == null || upper == null || lower.compareTo(upper) != 0) {                    restrictions.add(new Restriction(lower, lowerInclusive, upper, upperInclusive));                } else if (lowerInclusive && upperInclusive) {                    restrictions.add(new Restriction(lower, lowerInclusive, upper, upperInclusive));                }                                if (upper == res2.getUpperBound()) {                                        if (i2.hasNext()) {                        res2 = i2.next();                    } else {                        done = true;                    }                } else {                                        if (i1.hasNext()) {                        res1 = i1.next();                    } else {                        done = true;                    }                }            } else {                                if (i1.hasNext()) {                    res1 = i1.next();                } else {                    done = true;                }            }        } else {                        if (i2.hasNext()) {                res2 = i2.next();            } else {                done = true;            }        }    }    return restrictions;}
90b1d57395be0f467038312caff226b95d45005d108aafcde25a658af70593ba
getSelectedVersion
public ArtifactVersion getSelectedVersion(Artifact artifact) throws OverConstrainedVersionException
{    ArtifactVersion version;    if (recommendedVersion != null) {        version = recommendedVersion;    } else {        if (restrictions.size() == 0) {            throw new OverConstrainedVersionException("The artifact has no valid ranges", artifact);        }        version = null;    }    return version;}
676fb3b9734e7fc7adebec676e1d932d6740938a25d63f41db9944bf703dbfe5
isSelectedVersionKnown
public boolean isSelectedVersionKnown(Artifact artifact) throws OverConstrainedVersionException
{    boolean value = false;    if (recommendedVersion != null) {        value = true;    } else {        if (restrictions.size() == 0) {            throw new OverConstrainedVersionException("The artifact has no valid ranges", artifact);        }    }    return value;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    if (recommendedVersion != null) {        return recommendedVersion.toString();    } else {        StringBuilder buf = new StringBuilder();        for (Iterator<Restriction> i = restrictions.iterator(); i.hasNext(); ) {            Restriction r = i.next();            buf.append(r.toString());            if (i.hasNext()) {                buf.append(',');            }        }        return buf.toString();    }}
dd1b9b829b4d445e08da67e2483f35590c6ab919e8b0178f84a46cae3a36ee45
matchVersion
public ArtifactVersion matchVersion(List<ArtifactVersion> versions)
{        ArtifactVersion matched = null;    for (ArtifactVersion version : versions) {        if (containsVersion(version)) {                        if (matched == null || version.compareTo(matched) > 0) {                matched = version;            }        }    }    return matched;}
c51dc949072c5bc40f3896fc61a39ceecab54374e1dbfccc0257f5439157a936
containsVersion
public boolean containsVersion(ArtifactVersion version)
{    for (Restriction restriction : restrictions) {        if (restriction.containsVersion(version)) {            return true;        }    }    return false;}
7592076956f06e43c8ded0c97f5102b518c7436c63db37c4cefefe6509d82e39
hasRestrictions
public boolean hasRestrictions()
{    return !restrictions.isEmpty() && recommendedVersion == null;}
4afeb0868b55bdd8e18a00a3cb43d83e0714378d1c4bb36f0936daefc060e2e8
equals
public boolean equals(Object obj)
{    if (this == obj) {        return true;    }    if (!(obj instanceof VersionRange)) {        return false;    }    VersionRange other = (VersionRange) obj;    return Objects.equals(recommendedVersion, other.recommendedVersion) && Objects.equals(restrictions, other.restrictions);}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    int hash = 7;    hash = 31 * hash + (recommendedVersion == null ? 0 : recommendedVersion.hashCode());    hash = 31 * hash + (restrictions == null ? 0 : restrictions.hashCode());    return hash;}
165b1c9352ad3d309866d5286d1a7fd8eae4d022cb5ad661b1269ac75c218ebb
getHost
public String getHost()
{    return host;}
975df858cc36ca4ae96e66da70c7651a9608d19019688712f418ff1b046d6911
setHost
public void setHost(String host)
{    this.host = host;}
84dc993e9ee2454a836a462d555136356e8d932d11a2a18b6c05e86764987456
getPassword
public String getPassword()
{    return password;}
a3fc85e095b71ade6f23516e300582f2daf9dc9c17a00077a31a992f77c08289
setPassword
public void setPassword(String password)
{    this.password = password;}
eedb587f68470407e820d49bf6bb9be573d78555382d32a0743e8fea8ced15d6
getPort
public int getPort()
{    return port;}
978b4a4182d7d5f4402fdef1f86d8511d09d2d1f97abd85ee89933c68ea32c5f
setPort
public void setPort(int port)
{    this.port = port;}
9c48ca62ed3220f7e1df765edd11b158b1bc2c3969a588f89a1de1e03a961859
getUserName
public String getUserName()
{    return userName;}
d7e0f440edd1f1846fd72a7222f8bc9550001f7579858e8e886740e69098a979
setUserName
public void setUserName(String userName)
{    this.userName = userName;}
6a5c52ec96402a32005f10b5e3e237a089c21a231622163ebe5dea143f2fdbbe
getProtocol
public String getProtocol()
{    return protocol;}
38c30d84c33b92f3d8aaf3bbffea0d0702762bb1252698987f1021e66b145c81
setProtocol
public void setProtocol(String protocol)
{    this.protocol = protocol;}
c8d0e4f4dc99557dabf35e5d1e58cc4277d6f5c4df46cba24e8a0013ead68f72
getNonProxyHosts
public String getNonProxyHosts()
{    return nonProxyHosts;}
ae8c5fcdbab0a516de1c31f2689afc6aba643dd505f82af68f191925c9d8b579
setNonProxyHosts
public void setNonProxyHosts(String nonProxyHosts)
{    this.nonProxyHosts = nonProxyHosts;}
5031d1efd1c65b313d025c7379787d11124258cf00c6c54ab3b6fa40a867f88c
getNtlmHost
public String getNtlmHost()
{    return ntlmHost;}
5e949c9afbde86deda9ea6562faa90ff77a7c3790f38a193bb42e035104b311f
setNtlmHost
public void setNtlmHost(String ntlmHost)
{    this.ntlmHost = ntlmHost;}
73263f649b733b2ab6981326b4cdcfd17edc5f1a39f0e64d9a55e611bef2910e
setNtlmDomain
public void setNtlmDomain(String ntlmDomain)
{    this.ntlmDomain = ntlmDomain;}
22221c60a7e8ae650fc17c1be8e7e9924d16ed212ad8e319903fcf72cdf89366
getNtlmDomain
public String getNtlmDomain()
{    return ntlmDomain;}
6677e67ea06998c6632bea8db4495e96826606dadef8ab27c61fe6b9562c6b24
newArtifact
private Artifact newArtifact(String aid)
{    return new DefaultArtifact("group", aid, VersionRange.createFromVersion("1.0"), "test", "jar", "tests", null);}
1f8ae7aa1eec25300fb92431b2c36abd694b55422b2c044db284a9b710856107
testIsSnapshot
public void testIsSnapshot()
{    assertEquals(false, ArtifactUtils.isSnapshot(null));    assertEquals(false, ArtifactUtils.isSnapshot(""));    assertEquals(false, ArtifactUtils.isSnapshot("1.2.3"));    assertEquals(true, ArtifactUtils.isSnapshot("1.2.3-SNAPSHOT"));    assertEquals(true, ArtifactUtils.isSnapshot("1.2.3-snapshot"));    assertEquals(true, ArtifactUtils.isSnapshot("1.2.3-20090413.094722-2"));    assertEquals(false, ArtifactUtils.isSnapshot("1.2.3-20090413X094722-2"));}
8a585023dd5f145852dc2c9ecf16c4de16c7e40595b06a494243e22e233391a2
testToSnapshotVersion
public void testToSnapshotVersion()
{    assertEquals("1.2.3", ArtifactUtils.toSnapshotVersion("1.2.3"));    assertEquals("1.2.3-SNAPSHOT", ArtifactUtils.toSnapshotVersion("1.2.3-SNAPSHOT"));    assertEquals("1.2.3-SNAPSHOT", ArtifactUtils.toSnapshotVersion("1.2.3-20090413.094722-2"));    assertEquals("1.2.3-20090413X094722-2", ArtifactUtils.toSnapshotVersion("1.2.3-20090413X094722-2"));}
00efcc7fd8da0f8a3cf11fea9ca45dfc15873878d8aeffd0ba84542db62e1549
testArtifactMapByVersionlessIdOrdering
public void testArtifactMapByVersionlessIdOrdering() throws Exception
{    List<Artifact> list = new ArrayList<>();    list.add(newArtifact("b"));    list.add(newArtifact("a"));    list.add(newArtifact("c"));    list.add(newArtifact("e"));    list.add(newArtifact("d"));    Map<String, Artifact> map = ArtifactUtils.artifactMapByVersionlessId(list);    assertNotNull(map);    assertEquals(list, new ArrayList<>(map.values()));}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();    artifactHandler = new ArtifactHandlerMock();    versionRange = VersionRange.createFromVersion(version);    artifact = new DefaultArtifact(groupId, artifactId, versionRange, scope, type, classifier, artifactHandler);    snapshotVersionRange = VersionRange.createFromVersion(snapshotResolvedVersion);    snapshotArtifact = new DefaultArtifact(groupId, artifactId, snapshotVersionRange, scope, type, classifier, artifactHandler);}
8ef1de411a8da40d20d184ed3ac52161dd5135cf9ebe93bc97177af10c5c5de3
testGetVersionReturnsResolvedVersionOnSnapshot
public void testGetVersionReturnsResolvedVersionOnSnapshot()
{    assertEquals(snapshotResolvedVersion, snapshotArtifact.getVersion());            assertEquals(snapshotSpecVersion, snapshotArtifact.getBaseVersion());}
11a86a8a2bfbec31de121154329799579a8ef891908792d767452afe842db574
testGetDependencyConflictId
public void testGetDependencyConflictId()
{    assertEquals(groupId + ":" + artifactId + ":" + type + ":" + classifier, artifact.getDependencyConflictId());}
425a30a3302efdd2f3b1d654897f55afdc992172a71691e3a8c25fbd8dc45f81
testGetDependencyConflictIdNullGroupId
public void testGetDependencyConflictIdNullGroupId()
{    artifact.setGroupId(null);    assertEquals(null + ":" + artifactId + ":" + type + ":" + classifier, artifact.getDependencyConflictId());}
43621cb76a5c3e0adb7eae56733c13b1986935f80a628077777392ab1154ac1c
testGetDependencyConflictIdNullClassifier
public void testGetDependencyConflictIdNullClassifier()
{    artifact = new DefaultArtifact(groupId, artifactId, versionRange, scope, type, null, artifactHandler);    assertEquals(groupId + ":" + artifactId + ":" + type, artifact.getDependencyConflictId());}
50afba01eb39d931a2acc95735ae444bace21726070f5339b6b5b8a1c6468377
testGetDependencyConflictIdNullScope
public void testGetDependencyConflictIdNullScope()
{    artifact.setScope(null);    assertEquals(groupId + ":" + artifactId + ":" + type + ":" + classifier, artifact.getDependencyConflictId());}
cd89046fb8911fa4a6595be8ff9a8156398ebfad5d0c95e20ca6a68135c4b5d2
testToString
public void testToString()
{    assertEquals(groupId + ":" + artifactId + ":" + type + ":" + classifier + ":" + version + ":" + scope, artifact.toString());}
a6b83a58c343e1981f89fbf69490d16a3db68c67c76377c4dfc1744e6704a9ba
testToStringNullGroupId
public void testToStringNullGroupId()
{    artifact.setGroupId(null);    assertEquals(artifactId + ":" + type + ":" + classifier + ":" + version + ":" + scope, artifact.toString());}
9026653c0e50cc9f2bcbac27d94edb207be843720ae40738dad0c612a433544f
testToStringNullClassifier
public void testToStringNullClassifier()
{    artifact = new DefaultArtifact(groupId, artifactId, versionRange, scope, type, null, artifactHandler);    assertEquals(groupId + ":" + artifactId + ":" + type + ":" + version + ":" + scope, artifact.toString());}
b876b7759eddcc83d1f61042e3fc190a8c80844e464472786976742a6afb07c7
testToStringNullScope
public void testToStringNullScope()
{    artifact.setScope(null);    assertEquals(groupId + ":" + artifactId + ":" + type + ":" + classifier + ":" + version, artifact.toString());}
0b2bcf1f4cb3b70394c92f27529c200858a09914a9bafaa27758f26c6bf0cf27
testComparisonByVersion
public void testComparisonByVersion()
{    Artifact artifact1 = new DefaultArtifact(groupId, artifactId, VersionRange.createFromVersion("5.0"), scope, type, classifier, artifactHandler);    Artifact artifact2 = new DefaultArtifact(groupId, artifactId, VersionRange.createFromVersion("12.0"), scope, type, classifier, artifactHandler);    assertTrue(artifact1.compareTo(artifact2) < 0);    assertTrue(artifact2.compareTo(artifact1) > 0);    Artifact artifact = new DefaultArtifact(groupId, artifactId, VersionRange.createFromVersion("5.0"), scope, type, classifier, artifactHandler);    assertTrue(artifact.compareTo(artifact1) == 0);    assertTrue(artifact1.compareTo(artifact) == 0);}
b948205d0c87067e9e5f593d3004794a467de4ce69e948ee441165f2f5115046
testNonResolvedVersionRangeConsistentlyYieldsNullVersions
public void testNonResolvedVersionRangeConsistentlyYieldsNullVersions() throws Exception
{    VersionRange vr = VersionRange.createFromVersionSpec("[1.0,2.0)");    artifact = new DefaultArtifact(groupId, artifactId, vr, scope, type, null, artifactHandler);    assertEquals(null, artifact.getVersion());    assertEquals(null, artifact.getBaseVersion());}
509e66a7c8dced6eb5209bd5e62cae525e6bd92eec813f6d336cf4a335e328eb
setExtension
public void setExtension(String extension)
{    this.extension = extension;}
dd386f4d75b694f73345347a9b2e46289fee679d7748d4d3eee41cd501d6e88c
getExtension
public String getExtension()
{    return extension;}
4d0f9adf12a3ead711288267beed6d51e673fa08d0bf311140c4976b8a824a3c
setDirectory
public void setDirectory(String directory)
{    this.directory = directory;}
1569f194c7523775c854ff67cac1f81383798e7ba057b83499d6000987730b95
getDirectory
public String getDirectory()
{    return directory;}
4305433e6556f806359f8272c959894656336e254e47baac325d67924f633458
setClassifier
public void setClassifier(String classifier)
{    this.classifier = classifier;}
72a56f4f76ed886823d719d171deaf7269e3e03581e490ae41d8888ab09c151c
getClassifier
public String getClassifier()
{    return classifier;}
26415e1eccf0b52fbbd0a77a449847cf58c068442969e7dc1010b681b39690fd
setPackaging
public void setPackaging(String packaging)
{    this.packaging = packaging;}
9a63f6cad461699089dd5d7d862cf5ef3ece77582a35e5816083a14583c6c7e1
getPackaging
public String getPackaging()
{    return packaging;}
225ba2c3a4646a4df91a771a7773c66f4c1aab1134a923dd2132019706e4003d
setIncludesDependencies
public void setIncludesDependencies(boolean includesDependencies)
{    this.includesDependencies = includesDependencies;}
4afd5ea007fd5caeb382a8a7af760bc7954fef2ae8328ed49c32b329839e5cd2
isIncludesDependencies
public boolean isIncludesDependencies()
{    return includesDependencies;}
d8e69827e8a460f65316bd1cfe439ebe9888ba1e85355ee02c0eab20e4fecfe1
setLanguage
public void setLanguage(String language)
{    this.language = language;}
345e79f504a23e5b53f54930d7e01f191e855cd500fc60bdda621eec493957bb
getLanguage
public String getLanguage()
{    return language;}
583d8450dd420cc6a33ecdfe1ad8e7989d361103193306843fbb177123bd93f8
setAddedToClasspath
public void setAddedToClasspath(boolean addedToClasspath)
{    this.addedToClasspath = addedToClasspath;}
80a8caf96dc1bfc507f0d97c625d5b23ce99f86dc8db2108fd0a07ee92590a10
isAddedToClasspath
public boolean isAddedToClasspath()
{    return addedToClasspath;}
ced3637227837bc8935023b279f6d11e541ba2dd6bbaff26ba3afa81b2fd1240
test
public void test() throws Exception
{    Files.walkFileTree(Paths.get("target"), new SimpleFileVisitor<Path>() {        Pattern mavenArtifactJar = Pattern.compile("maven-artifact-[\\d.]+(-SNAPSHOT)?\\.jar");        @Override        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {            String filename = file.getFileName().toString();            if (mavenArtifactJar.matcher(filename).matches()) {                Process p = Runtime.getRuntime().exec(new String[] { Paths.get(System.getProperty("java.home"), "bin/java").toString(), "-jar", file.toAbsolutePath().toString(), "5.32", "5.27" });                try {                    assertEquals("Unexpected exit code", 0, p.waitFor());                } catch (InterruptedException e) {                    fail(e.getMessage());                }                return FileVisitResult.TERMINATE;            } else {                return FileVisitResult.CONTINUE;            }        }        @Override        public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {            if (Paths.get("target").equals(dir)) {                return FileVisitResult.CONTINUE;            } else {                return FileVisitResult.SKIP_SUBTREE;            }        }    });}
065794f5ee3ce2fafb60e697b53bf22ee751fb996749c9f29f9073e8fa8ef867
visitFile
public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException
{    String filename = file.getFileName().toString();    if (mavenArtifactJar.matcher(filename).matches()) {        Process p = Runtime.getRuntime().exec(new String[] { Paths.get(System.getProperty("java.home"), "bin/java").toString(), "-jar", file.toAbsolutePath().toString(), "5.32", "5.27" });        try {            assertEquals("Unexpected exit code", 0, p.waitFor());        } catch (InterruptedException e) {            fail(e.getMessage());        }        return FileVisitResult.TERMINATE;    } else {        return FileVisitResult.CONTINUE;    }}
69a6be06b24a615260f3fd3c8200c8b2b084204987790b826896c35bb72841d2
preVisitDirectory
public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException
{    if (Paths.get("target").equals(dir)) {        return FileVisitResult.CONTINUE;    } else {        return FileVisitResult.SKIP_SUBTREE;    }}
e032f1daa899ac4f65380d4c0e59c996f0274776226a7528cd53a1b426b6fb5d
newComparable
private Comparable newComparable(String version)
{    ComparableVersion ret = new ComparableVersion(version);    String canonical = ret.getCanonical();    String parsedCanonical = new ComparableVersion(canonical).getCanonical();    System.out.println("canonical( " + version + " ) = " + canonical);    assertEquals("canonical( " + version + " ) = " + canonical + " -> canonical: " + parsedCanonical, canonical, parsedCanonical);    return ret;}
e6e8110c840b1c91bf95e036c8a434edfd06ff8ac80ec9566e917d84bf50c99e
checkVersionsOrder
private void checkVersionsOrder(String[] versions)
{    Comparable[] c = new Comparable[versions.length];    for (int i = 0; i < versions.length; i++) {        c[i] = newComparable(versions[i]);    }    for (int i = 1; i < versions.length; i++) {        Comparable low = c[i - 1];        for (int j = i; j < versions.length; j++) {            Comparable high = c[j];            assertTrue("expected " + low + " < " + high, low.compareTo(high) < 0);            assertTrue("expected " + high + " > " + low, high.compareTo(low) > 0);        }    }}
45382bbdfe443c5de3897f05d3eefc07ba938cf67a80d332e623dc80f14bcf6b
checkVersionsEqual
private void checkVersionsEqual(String v1, String v2)
{    Comparable c1 = newComparable(v1);    Comparable c2 = newComparable(v2);    assertTrue("expected " + v1 + " == " + v2, c1.compareTo(c2) == 0);    assertTrue("expected " + v2 + " == " + v1, c2.compareTo(c1) == 0);    assertTrue("expected same hashcode for " + v1 + " and " + v2, c1.hashCode() == c2.hashCode());    assertTrue("expected " + v1 + ".equals( " + v2 + " )", c1.equals(c2));    assertTrue("expected " + v2 + ".equals( " + v1 + " )", c2.equals(c1));}
5bc4a75cf7079bfd4b6dcac3cf166e4c9f2a519672904a3a07c9d0871aa35f71
checkVersionsArrayEqual
private void checkVersionsArrayEqual(String[] array)
{        for (int i = 0; i < array.length; ++i) for (int j = i; j < array.length; ++j) checkVersionsEqual(array[i], array[j]);}
cd96222491276c9682a969daa24f1c6ecf6c2330efa4a34b8781d60835fb94f9
checkVersionsOrder
private void checkVersionsOrder(String v1, String v2)
{    Comparable c1 = newComparable(v1);    Comparable c2 = newComparable(v2);    assertTrue("expected " + v1 + " < " + v2, c1.compareTo(c2) < 0);    assertTrue("expected " + v2 + " > " + v1, c2.compareTo(c1) > 0);}
055bc624f4575ca1b2b4e8463330e7d489008430e920f0adf497325add981151
testVersionsQualifier
public void testVersionsQualifier()
{    checkVersionsOrder(VERSIONS_QUALIFIER);}
007b63bea260b212597f11d43a76069a508d5a30ef2ab93035572767f8599a94
testVersionsNumber
public void testVersionsNumber()
{    checkVersionsOrder(VERSIONS_NUMBER);}
dd78fe4e06db8e199bfb5e7266b0c1555442eba97f321e53ba9d4662abf7a077
testVersionsEqual
public void testVersionsEqual()
{    newComparable("1.0-alpha");    checkVersionsEqual("1", "1");    checkVersionsEqual("1", "1.0");    checkVersionsEqual("1", "1.0.0");    checkVersionsEqual("1.0", "1.0.0");    checkVersionsEqual("1", "1-0");    checkVersionsEqual("1", "1.0-0");    checkVersionsEqual("1.0", "1.0-0");        checkVersionsEqual("1a", "1-a");    checkVersionsEqual("1a", "1.0-a");    checkVersionsEqual("1a", "1.0.0-a");    checkVersionsEqual("1.0a", "1-a");    checkVersionsEqual("1.0.0a", "1-a");    checkVersionsEqual("1x", "1-x");    checkVersionsEqual("1x", "1.0-x");    checkVersionsEqual("1x", "1.0.0-x");    checkVersionsEqual("1.0x", "1-x");    checkVersionsEqual("1.0.0x", "1-x");        checkVersionsEqual("1ga", "1");    checkVersionsEqual("1release", "1");    checkVersionsEqual("1final", "1");    checkVersionsEqual("1cr", "1rc");        checkVersionsEqual("1a1", "1-alpha-1");    checkVersionsEqual("1b2", "1-beta-2");    checkVersionsEqual("1m3", "1-milestone-3");        checkVersionsEqual("1X", "1x");    checkVersionsEqual("1A", "1a");    checkVersionsEqual("1B", "1b");    checkVersionsEqual("1M", "1m");    checkVersionsEqual("1Ga", "1");    checkVersionsEqual("1GA", "1");    checkVersionsEqual("1RELEASE", "1");    checkVersionsEqual("1release", "1");    checkVersionsEqual("1RELeaSE", "1");    checkVersionsEqual("1Final", "1");    checkVersionsEqual("1FinaL", "1");    checkVersionsEqual("1FINAL", "1");    checkVersionsEqual("1Cr", "1Rc");    checkVersionsEqual("1cR", "1rC");    checkVersionsEqual("1m3", "1Milestone3");    checkVersionsEqual("1m3", "1MileStone3");    checkVersionsEqual("1m3", "1MILESTONE3");}
3bc74e968da7a1be1b0a04965aac6d7332ebef6a0d9badee487fd0be1a7737c3
testVersionComparing
public void testVersionComparing()
{    checkVersionsOrder("1", "2");    checkVersionsOrder("1.5", "2");    checkVersionsOrder("1", "2.5");    checkVersionsOrder("1.0", "1.1");    checkVersionsOrder("1.1", "1.2");    checkVersionsOrder("1.0.0", "1.1");    checkVersionsOrder("1.0.1", "1.1");    checkVersionsOrder("1.1", "1.2.0");    checkVersionsOrder("1.0-alpha-1", "1.0");    checkVersionsOrder("1.0-alpha-1", "1.0-alpha-2");    checkVersionsOrder("1.0-alpha-1", "1.0-beta-1");    checkVersionsOrder("1.0-beta-1", "1.0-SNAPSHOT");    checkVersionsOrder("1.0-SNAPSHOT", "1.0");    checkVersionsOrder("1.0-alpha-1-SNAPSHOT", "1.0-alpha-1");    checkVersionsOrder("1.0", "1.0-1");    checkVersionsOrder("1.0-1", "1.0-2");    checkVersionsOrder("1.0.0", "1.0-1");    checkVersionsOrder("2.0-1", "2.0.1");    checkVersionsOrder("2.0.1-klm", "2.0.1-lmn");    checkVersionsOrder("2.0.1", "2.0.1-xyz");    checkVersionsOrder("2.0.1", "2.0.1-123");    checkVersionsOrder("2.0.1-xyz", "2.0.1-123");}
29d62cbe138ac4c098c5602bfe78c5b1c2ffbdba7b7999bf29bc741a5d3b8332
testMng5568
public void testMng5568()
{    String a = "6.1.0";    String b = "6.1.0rc3";        String c = "6.1H.5-beta";        checkVersionsOrder(b, a);        checkVersionsOrder(b, c);    checkVersionsOrder(a, c);}
fd3f83fe91a6b95900d6ce61bd93841465305d3fc5fcbc9d91bef340f4bdd875
testMng6572
public void testMng6572()
{        String a = "20190126.230843";        String b = "1234567890.12345";        String c = "123456789012345.1H.5-beta";        String d = "12345678901234567890.1H.5-beta";    checkVersionsOrder(a, b);    checkVersionsOrder(b, c);    checkVersionsOrder(a, c);    checkVersionsOrder(c, d);    checkVersionsOrder(b, d);    checkVersionsOrder(a, d);}
11f8b8894eeaddca909b64d1b363cef6567c6bbc56fb47687fa262b6096777b3
testVersionEqualWithLeadingZeroes
public void testVersionEqualWithLeadingZeroes()
{        String[] arr = new String[] { "0000000000000000001", "000000000000000001", "00000000000000001", "0000000000000001", "000000000000001", "00000000000001", "0000000000001", "000000000001", "00000000001", "0000000001", "000000001", "00000001", "0000001", "000001", "00001", "0001", "001", "01", "1" };    checkVersionsArrayEqual(arr);}
47c6f665c3185487c32684f20d1dc47f3752ef9173a6f632619d57525657bbf1
testVersionZeroEqualWithLeadingZeroes
public void testVersionZeroEqualWithLeadingZeroes()
{        String[] arr = new String[] { "0000000000000000000", "000000000000000000", "00000000000000000", "0000000000000000", "000000000000000", "00000000000000", "0000000000000", "000000000000", "00000000000", "0000000000", "000000000", "00000000", "0000000", "000000", "00000", "0000", "000", "00", "0" };    checkVersionsArrayEqual(arr);}
c891fcfe9258e0d3a08ce2cb2e8a22c1971ce68f6cb51a4aecec42b01c97da74
testLocaleIndependent
public void testLocaleIndependent()
{    Locale orig = Locale.getDefault();    Locale[] locales = { Locale.ENGLISH, new Locale("tr"), Locale.getDefault() };    try {        for (Locale locale : locales) {            Locale.setDefault(locale);            checkVersionsEqual("1-abcdefghijklmnopqrstuvwxyz", "1-ABCDEFGHIJKLMNOPQRSTUVWXYZ");        }    } finally {        Locale.setDefault(orig);    }}
3d25577e11a8af93a2ec1f3eee59422016e17169164f7eb98e51e7ac2a047a68
testReuse
public void testReuse()
{    ComparableVersion c1 = new ComparableVersion("1");    c1.parseVersion("2");    Comparable c2 = newComparable("2");    assertEquals("reused instance should be equivalent to new instance", c1, c2);}
8b0dbf04b9accfc2d36e5a1d92ede130dbf0f86ff1bd77918381d2551bf911ae
newArtifactVersion
private ArtifactVersion newArtifactVersion(String version)
{    return new DefaultArtifactVersion(version);}
aa42dca59e2f907633e4867565e127e62ba108ce3d9040a12c137f0c06737453
checkVersionParsing
private void checkVersionParsing(String version, int major, int minor, int incremental, int buildnumber, String qualifier)
{    ArtifactVersion artifactVersion = newArtifactVersion(version);    String parsed = "'" + version + "' parsed as ('" + artifactVersion.getMajorVersion() + "', '" + artifactVersion.getMinorVersion() + "', '" + artifactVersion.getIncrementalVersion() + "', '" + artifactVersion.getBuildNumber() + "', '" + artifactVersion.getQualifier() + "'), ";    assertEquals(parsed + "check major version", major, artifactVersion.getMajorVersion());    assertEquals(parsed + "check minor version", minor, artifactVersion.getMinorVersion());    assertEquals(parsed + "check incremental version", incremental, artifactVersion.getIncrementalVersion());    assertEquals(parsed + "check build number", buildnumber, artifactVersion.getBuildNumber());    assertEquals(parsed + "check qualifier", qualifier, artifactVersion.getQualifier());    assertEquals("check " + version + " string value", version, artifactVersion.toString());}
ba6cb16e19d99a2370a1de8c481d954c0669802bea3a55aa926301d4c217a507
testVersionParsing
public void testVersionParsing()
{    checkVersionParsing("1", 1, 0, 0, 0, null);    checkVersionParsing("1.2", 1, 2, 0, 0, null);    checkVersionParsing("1.2.3", 1, 2, 3, 0, null);    checkVersionParsing("1.2.3-1", 1, 2, 3, 1, null);    checkVersionParsing("1.2.3-alpha-1", 1, 2, 3, 0, "alpha-1");    checkVersionParsing("1.2-alpha-1", 1, 2, 0, 0, "alpha-1");    checkVersionParsing("1.2-alpha-1-20050205.060708-1", 1, 2, 0, 0, "alpha-1-20050205.060708-1");    checkVersionParsing("RELEASE", 0, 0, 0, 0, "RELEASE");    checkVersionParsing("2.0-1", 2, 0, 0, 1, null);        checkVersionParsing("02", 0, 0, 0, 0, "02");    checkVersionParsing("0.09", 0, 0, 0, 0, "0.09");    checkVersionParsing("0.2.09", 0, 0, 0, 0, "0.2.09");    checkVersionParsing("2.0-01", 2, 0, 0, 0, "01");        checkVersionParsing("1.0.1b", 0, 0, 0, 0, "1.0.1b");    checkVersionParsing("1.0M2", 0, 0, 0, 0, "1.0M2");    checkVersionParsing("1.0RC2", 0, 0, 0, 0, "1.0RC2");    checkVersionParsing("1.1.2.beta1", 1, 1, 2, 0, "beta1");    checkVersionParsing("1.7.3.beta1", 1, 7, 3, 0, "beta1");    checkVersionParsing("1.7.3.0", 0, 0, 0, 0, "1.7.3.0");    checkVersionParsing("1.7.3.0-1", 0, 0, 0, 0, "1.7.3.0-1");    checkVersionParsing("PATCH-1193602", 0, 0, 0, 0, "PATCH-1193602");    checkVersionParsing("5.0.0alpha-2006020117", 0, 0, 0, 0, "5.0.0alpha-2006020117");    checkVersionParsing("1.0.0.-SNAPSHOT", 0, 0, 0, 0, "1.0.0.-SNAPSHOT");    checkVersionParsing("1..0-SNAPSHOT", 0, 0, 0, 0, "1..0-SNAPSHOT");    checkVersionParsing("1.0.-SNAPSHOT", 0, 0, 0, 0, "1.0.-SNAPSHOT");    checkVersionParsing(".1.0-SNAPSHOT", 0, 0, 0, 0, ".1.0-SNAPSHOT");    checkVersionParsing("1.2.3.200705301630", 0, 0, 0, 0, "1.2.3.200705301630");    checkVersionParsing("1.2.3-200705301630", 1, 2, 3, 0, "200705301630");}
3bc74e968da7a1be1b0a04965aac6d7332ebef6a0d9badee487fd0be1a7737c3
testVersionComparing
public void testVersionComparing()
{    assertVersionEqual("1", "1");    assertVersionOlder("1", "2");    assertVersionOlder("1.5", "2");    assertVersionOlder("1", "2.5");    assertVersionEqual("1", "1.0");    assertVersionEqual("1", "1.0.0");    assertVersionOlder("1.0", "1.1");    assertVersionOlder("1.1", "1.2");    assertVersionOlder("1.0.0", "1.1");    assertVersionOlder("1.1", "1.2.0");    assertVersionOlder("1.1.2.alpha1", "1.1.2");    assertVersionOlder("1.1.2.alpha1", "1.1.2.beta1");    assertVersionOlder("1.1.2.beta1", "1.2");    assertVersionOlder("1.0-alpha-1", "1.0");    assertVersionOlder("1.0-alpha-1", "1.0-alpha-2");    assertVersionOlder("1.0-alpha-2", "1.0-alpha-15");    assertVersionOlder("1.0-alpha-1", "1.0-beta-1");    assertVersionOlder("1.0-beta-1", "1.0-SNAPSHOT");    assertVersionOlder("1.0-SNAPSHOT", "1.0");    assertVersionOlder("1.0-alpha-1-SNAPSHOT", "1.0-alpha-1");    assertVersionOlder("1.0", "1.0-1");    assertVersionOlder("1.0-1", "1.0-2");    assertVersionEqual("2.0-0", "2.0");    assertVersionOlder("2.0", "2.0-1");    assertVersionOlder("2.0.0", "2.0-1");    assertVersionOlder("2.0-1", "2.0.1");    assertVersionOlder("2.0.1-klm", "2.0.1-lmn");    assertVersionOlder("2.0.1", "2.0.1-xyz");    assertVersionOlder("2.0.1-xyz-1", "2.0.1-1-xyz");    assertVersionOlder("2.0.1", "2.0.1-123");    assertVersionOlder("2.0.1-xyz", "2.0.1-123");    assertVersionOlder("1.2.3-10000000000", "1.2.3-10000000001");    assertVersionOlder("1.2.3-1", "1.2.3-10000000001");        assertVersionOlder("2.3.0-v200706262000", "2.3.0-v200706262130");        assertVersionOlder("2.0.0.v200706041905-7C78EK9E_EkMNfNOd2d8qq", "2.0.0.v200706041906-7C78EK9E_EkMNfNOd2d8qq");}
e44ce407f5c3676dc11d75dee7a067de3530fc88964f0a070b6252ec8ff84745
testVersionSnapshotComparing
public void testVersionSnapshotComparing()
{    assertVersionEqual("1-SNAPSHOT", "1-SNAPSHOT");    assertVersionOlder("1-SNAPSHOT", "2-SNAPSHOT");    assertVersionOlder("1.5-SNAPSHOT", "2-SNAPSHOT");    assertVersionOlder("1-SNAPSHOT", "2.5-SNAPSHOT");    assertVersionEqual("1-SNAPSHOT", "1.0-SNAPSHOT");    assertVersionEqual("1-SNAPSHOT", "1.0.0-SNAPSHOT");    assertVersionOlder("1.0-SNAPSHOT", "1.1-SNAPSHOT");    assertVersionOlder("1.1-SNAPSHOT", "1.2-SNAPSHOT");    assertVersionOlder("1.0.0-SNAPSHOT", "1.1-SNAPSHOT");    assertVersionOlder("1.1-SNAPSHOT", "1.2.0-SNAPSHOT");        assertVersionOlder("1.0-alpha-1-SNAPSHOT", "1.0-alpha-2-SNAPSHOT");    assertVersionOlder("1.0-alpha-1-SNAPSHOT", "1.0-beta-1-SNAPSHOT");    assertVersionOlder("1.0-beta-1-SNAPSHOT", "1.0-SNAPSHOT-SNAPSHOT");    assertVersionOlder("1.0-SNAPSHOT-SNAPSHOT", "1.0-SNAPSHOT");    assertVersionOlder("1.0-alpha-1-SNAPSHOT-SNAPSHOT", "1.0-alpha-1-SNAPSHOT");    assertVersionOlder("1.0-SNAPSHOT", "1.0-1-SNAPSHOT");    assertVersionOlder("1.0-1-SNAPSHOT", "1.0-2-SNAPSHOT");        assertVersionOlder("2.0-SNAPSHOT", "2.0-1-SNAPSHOT");    assertVersionOlder("2.0.0-SNAPSHOT", "2.0-1-SNAPSHOT");    assertVersionOlder("2.0-1-SNAPSHOT", "2.0.1-SNAPSHOT");    assertVersionOlder("2.0.1-klm-SNAPSHOT", "2.0.1-lmn-SNAPSHOT");        assertVersionOlder("2.0.1-SNAPSHOT", "2.0.1-123-SNAPSHOT");    assertVersionOlder("2.0.1-xyz-SNAPSHOT", "2.0.1-123-SNAPSHOT");}
e9ca9ce84672d49a9d456a983daf55693567de04367b2ed53e6870b1a5649aa4
testSnapshotVsReleases
public void testSnapshotVsReleases()
{    assertVersionOlder("1.0-RC1", "1.0-SNAPSHOT");    assertVersionOlder("1.0-rc1", "1.0-SNAPSHOT");    assertVersionOlder("1.0-rc-1", "1.0-SNAPSHOT");}
ad6f12d30164517b5d8852c2595ff6dcc9e828122d198b1d26eaebfe2762e22e
testHashCode
public void testHashCode()
{    ArtifactVersion v1 = newArtifactVersion("1");    ArtifactVersion v2 = newArtifactVersion("1.0");    assertEquals(true, v1.equals(v2));    assertEquals(v1.hashCode(), v2.hashCode());}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(newArtifactVersion("1").equals(null));}
9adbdd48d8f07e6f67b23519decd67faa3d8c501f2a4e47707869f5fc9da4739
testEqualsTypeSafe
public void testEqualsTypeSafe()
{    assertFalse(newArtifactVersion("1").equals("non-an-artifact-version-instance"));}
8ae73a0736093c1e81854841209252b692e842c329da714a1947077b51f2c360
testNonNumericVersionRepresentationReturnsANumberFormatException
public void testNonNumericVersionRepresentationReturnsANumberFormatException()
{    try {        new DefaultArtifactVersion("...");    } catch (Exception e) {        assertTrue("We expect a NumberFormatException to be thrown.", e instanceof NumberFormatException);    }}
3f6594f45014791d8471f0b484634bbbfcd42776a9c7a8c1a34630888d237d7d
assertVersionOlder
private void assertVersionOlder(String left, String right)
{    assertTrue(left + " should be older than " + right, newArtifactVersion(left).compareTo(newArtifactVersion(right)) < 0);    assertTrue(right + " should be newer than " + left, newArtifactVersion(right).compareTo(newArtifactVersion(left)) > 0);}
193ff2c18c2b06d3d947c15e3583a7edf50d3b4b55381f545c0115f179f075b2
assertVersionEqual
private void assertVersionEqual(String left, String right)
{    assertTrue(left + " should be equal to " + right, newArtifactVersion(left).compareTo(newArtifactVersion(right)) == 0);    assertTrue(right + " should be equal to " + left, newArtifactVersion(right).compareTo(newArtifactVersion(left)) == 0);}
b59834339fd4b58f95a0035f3a7a198849e5855808f7fa6724bda103427e9784
testRange
public void testRange() throws InvalidVersionSpecificationException, OverConstrainedVersionException
{    Artifact artifact = null;    VersionRange range = VersionRange.createFromVersionSpec("(,1.0]");    List<Restriction> restrictions = range.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    Restriction restriction = restrictions.get(0);    assertNull(CHECK_LOWER_BOUND, restriction.getLowerBound());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.0", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    assertNull(CHECK_VERSION_RECOMMENDATION, range.getRecommendedVersion());    assertFalse(CHECK_SELECTED_VERSION_KNOWN, range.isSelectedVersionKnown(artifact));    assertNull(CHECK_SELECTED_VERSION, range.getSelectedVersion(artifact));    range = VersionRange.createFromVersionSpec("1.0");    assertEquals(CHECK_VERSION_RECOMMENDATION, "1.0", range.getRecommendedVersion().toString());    restrictions = range.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertNull(CHECK_LOWER_BOUND, restriction.getLowerBound());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertNull(CHECK_UPPER_BOUND, restriction.getUpperBound());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    assertTrue(CHECK_SELECTED_VERSION_KNOWN, range.isSelectedVersionKnown(artifact));    assertEquals(CHECK_SELECTED_VERSION, "1.0", range.getSelectedVersion(artifact).toString());    range = VersionRange.createFromVersionSpec("[1.0]");    restrictions = range.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.0", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.0", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    assertNull(CHECK_VERSION_RECOMMENDATION, range.getRecommendedVersion());    assertFalse(CHECK_SELECTED_VERSION_KNOWN, range.isSelectedVersionKnown(artifact));    assertNull(CHECK_SELECTED_VERSION, range.getSelectedVersion(artifact));    range = VersionRange.createFromVersionSpec("[1.2,1.3]");    restrictions = range.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.2", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.3", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    assertNull(CHECK_VERSION_RECOMMENDATION, range.getRecommendedVersion());    assertFalse(CHECK_SELECTED_VERSION_KNOWN, range.isSelectedVersionKnown(artifact));    assertNull(CHECK_SELECTED_VERSION, range.getSelectedVersion(artifact));    range = VersionRange.createFromVersionSpec("[1.0,2.0)");    restrictions = range.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.0", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "2.0", restriction.getUpperBound().toString());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    assertNull(CHECK_VERSION_RECOMMENDATION, range.getRecommendedVersion());    assertFalse(CHECK_SELECTED_VERSION_KNOWN, range.isSelectedVersionKnown(artifact));    assertNull(CHECK_SELECTED_VERSION, range.getSelectedVersion(artifact));    range = VersionRange.createFromVersionSpec("[1.5,)");    restrictions = range.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.5", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertNull(CHECK_UPPER_BOUND, restriction.getUpperBound());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    assertNull(CHECK_VERSION_RECOMMENDATION, range.getRecommendedVersion());    assertFalse(CHECK_SELECTED_VERSION_KNOWN, range.isSelectedVersionKnown(artifact));    assertNull(CHECK_SELECTED_VERSION, range.getSelectedVersion(artifact));    range = VersionRange.createFromVersionSpec("(,1.0],[1.2,)");    restrictions = range.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 2, restrictions.size());    restriction = restrictions.get(0);    assertNull(CHECK_LOWER_BOUND, restriction.getLowerBound());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.0", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    assertNull(CHECK_VERSION_RECOMMENDATION, range.getRecommendedVersion());    restriction = restrictions.get(1);    assertEquals(CHECK_LOWER_BOUND, "1.2", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertNull(CHECK_UPPER_BOUND, restriction.getUpperBound());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    assertNull(CHECK_VERSION_RECOMMENDATION, range.getRecommendedVersion());    assertFalse(CHECK_SELECTED_VERSION_KNOWN, range.isSelectedVersionKnown(artifact));    assertNull(CHECK_SELECTED_VERSION, range.getSelectedVersion(artifact));    range = VersionRange.createFromVersionSpec("[1.0,)");    assertFalse(range.containsVersion(new DefaultArtifactVersion("1.0-SNAPSHOT")));    range = VersionRange.createFromVersionSpec("[1.0,1.1-SNAPSHOT]");    assertTrue(range.containsVersion(new DefaultArtifactVersion("1.1-SNAPSHOT")));    range = VersionRange.createFromVersionSpec("[5.0.9.0,5.0.10.0)");    assertTrue(range.containsVersion(new DefaultArtifactVersion("5.0.9.0")));}
2a20ad5005b818d7db1c51db2e07a8d3cc5325548f64e0f1fa9a4f10a236b7ab
testInvalidRanges
public void testInvalidRanges()
{    checkInvalidRange("(1.0)");    checkInvalidRange("[1.0)");    checkInvalidRange("(1.0]");    checkInvalidRange("(1.0,1.0]");    checkInvalidRange("[1.0,1.0)");    checkInvalidRange("(1.0,1.0)");    checkInvalidRange("[1.1,1.0]");    checkInvalidRange("[1.0,1.2),1.3");        checkInvalidRange("[1.0,1.2),(1.1,1.3]");        checkInvalidRange("[1.1,1.3),(1.0,1.2]");        checkInvalidRange("(1.1,1.2],[1.0,1.1)");}
0ccd1929f99b92a3b7a84b5f5c64390808d85c23334cf28782a88115e1968659
testIntersections
public void testIntersections() throws InvalidVersionSpecificationException
{    VersionRange range1 = VersionRange.createFromVersionSpec("1.0");    VersionRange range2 = VersionRange.createFromVersionSpec("1.1");    VersionRange mergedRange = range1.restrict(range2);            assertEquals(CHECK_VERSION_RECOMMENDATION, "1.0", mergedRange.getRecommendedVersion().toString());    List<Restriction> restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    Restriction restriction = restrictions.get(0);    assertNull(CHECK_LOWER_BOUND, restriction.getLowerBound());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertNull(CHECK_UPPER_BOUND, restriction.getUpperBound());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    mergedRange = range2.restrict(range1);    assertEquals(CHECK_VERSION_RECOMMENDATION, "1.1", mergedRange.getRecommendedVersion().toString());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertNull(CHECK_LOWER_BOUND, restriction.getLowerBound());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertNull(CHECK_UPPER_BOUND, restriction.getUpperBound());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());        range1 = VersionRange.createFromVersionSpec("[1.0,)");    range2 = VersionRange.createFromVersionSpec("1.1");    mergedRange = range1.restrict(range2);    assertEquals(CHECK_VERSION_RECOMMENDATION, "1.1", mergedRange.getRecommendedVersion().toString());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.0", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertNull(CHECK_UPPER_BOUND, restriction.getUpperBound());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("[1.1,)");    range2 = VersionRange.createFromVersionSpec("1.1");    mergedRange = range1.restrict(range2);    assertEquals(CHECK_VERSION_RECOMMENDATION, "1.1", mergedRange.getRecommendedVersion().toString());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.1", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertNull(CHECK_UPPER_BOUND, restriction.getUpperBound());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("[1.1]");    range2 = VersionRange.createFromVersionSpec("1.1");    mergedRange = range1.restrict(range2);    assertEquals(CHECK_VERSION_RECOMMENDATION, "1.1", mergedRange.getRecommendedVersion().toString());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.1", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.1", restriction.getLowerBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("(1.1,)");    range2 = VersionRange.createFromVersionSpec("1.1");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.1", restriction.getLowerBound().toString());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertNull(CHECK_UPPER_BOUND, restriction.getUpperBound());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("[1.2,)");    range2 = VersionRange.createFromVersionSpec("1.1");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.2", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertNull(CHECK_UPPER_BOUND, restriction.getUpperBound());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("(,1.2]");    range2 = VersionRange.createFromVersionSpec("1.1");    mergedRange = range1.restrict(range2);    assertEquals(CHECK_VERSION_RECOMMENDATION, "1.1", mergedRange.getRecommendedVersion().toString());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertNull(CHECK_LOWER_BOUND, restriction.getLowerBound());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.2", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("(,1.1]");    range2 = VersionRange.createFromVersionSpec("1.1");    mergedRange = range1.restrict(range2);    assertEquals(CHECK_VERSION_RECOMMENDATION, "1.1", mergedRange.getRecommendedVersion().toString());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertNull(CHECK_LOWER_BOUND, restriction.getLowerBound());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.1", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("(,1.1)");    range2 = VersionRange.createFromVersionSpec("1.1");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertNull(CHECK_LOWER_BOUND, restriction.getLowerBound());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.1", restriction.getUpperBound().toString());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("(,1.0]");    range2 = VersionRange.createFromVersionSpec("1.1");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertNull(CHECK_LOWER_BOUND, restriction.getLowerBound());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.0", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("(,1.0], [1.1,)");    range2 = VersionRange.createFromVersionSpec("1.2");    mergedRange = range1.restrict(range2);    assertEquals(CHECK_VERSION_RECOMMENDATION, "1.2", mergedRange.getRecommendedVersion().toString());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 2, restrictions.size());    restriction = restrictions.get(0);    assertNull(CHECK_LOWER_BOUND, restriction.getLowerBound());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.0", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    restriction = restrictions.get(1);    assertEquals(CHECK_LOWER_BOUND, "1.1", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertNull(CHECK_UPPER_BOUND, restriction.getUpperBound());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("(,1.0], [1.1,)");    range2 = VersionRange.createFromVersionSpec("1.0.5");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 2, restrictions.size());    restriction = restrictions.get(0);    assertNull(CHECK_LOWER_BOUND, restriction.getLowerBound());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.0", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    restriction = restrictions.get(1);    assertEquals(CHECK_LOWER_BOUND, "1.1", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertNull(CHECK_UPPER_BOUND, restriction.getUpperBound());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("(,1.1), (1.1,)");    range2 = VersionRange.createFromVersionSpec("1.1");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 2, restrictions.size());    restriction = restrictions.get(0);    assertNull(CHECK_LOWER_BOUND, restriction.getLowerBound());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.1", restriction.getUpperBound().toString());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    restriction = restrictions.get(1);    assertEquals(CHECK_LOWER_BOUND, "1.1", restriction.getLowerBound().toString());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertNull(CHECK_UPPER_BOUND, restriction.getUpperBound());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("[1.1,1.3]");    range2 = VersionRange.createFromVersionSpec("(1.1,)");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.1", restriction.getLowerBound().toString());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.3", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("(,1.3)");    range2 = VersionRange.createFromVersionSpec("[1.2,1.3]");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.2", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.3", restriction.getUpperBound().toString());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("[1.1,1.3]");    range2 = VersionRange.createFromVersionSpec("[1.2,)");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.2", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.3", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("(,1.3]");    range2 = VersionRange.createFromVersionSpec("[1.2,1.4]");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.2", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.3", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("(1.2,1.3]");    range2 = VersionRange.createFromVersionSpec("[1.1,1.4]");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.2", restriction.getLowerBound().toString());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.3", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("(1.2,1.3)");    range2 = VersionRange.createFromVersionSpec("[1.1,1.4]");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.2", restriction.getLowerBound().toString());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.3", restriction.getUpperBound().toString());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("[1.2,1.3)");    range2 = VersionRange.createFromVersionSpec("[1.1,1.4]");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.2", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.3", restriction.getUpperBound().toString());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("[1.0,1.1]");    range2 = VersionRange.createFromVersionSpec("[1.1,1.4]");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.1", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.1", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("[1.0,1.1)");    range2 = VersionRange.createFromVersionSpec("[1.1,1.4]");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 0, restrictions.size());    range1 = VersionRange.createFromVersionSpec("[1.0,1.2],[1.3,1.5]");    range2 = VersionRange.createFromVersionSpec("[1.1]");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.1", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.1", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("[1.0,1.2],[1.3,1.5]");    range2 = VersionRange.createFromVersionSpec("[1.4]");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.4", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.4", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("[1.0,1.2],[1.3,1.5]");    range2 = VersionRange.createFromVersionSpec("[1.1,1.4]");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 2, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.1", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.2", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    restriction = restrictions.get(1);    assertEquals(CHECK_LOWER_BOUND, "1.3", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.4", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("[1.0,1.2),(1.3,1.5]");    range2 = VersionRange.createFromVersionSpec("[1.1,1.4]");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 2, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.1", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.2", restriction.getUpperBound().toString());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    restriction = restrictions.get(1);    assertEquals(CHECK_LOWER_BOUND, "1.3", restriction.getLowerBound().toString());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.4", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("[1.0,1.2],[1.3,1.5]");    range2 = VersionRange.createFromVersionSpec("(1.1,1.4)");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 2, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.1", restriction.getLowerBound().toString());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.2", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    restriction = restrictions.get(1);    assertEquals(CHECK_LOWER_BOUND, "1.3", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.4", restriction.getUpperBound().toString());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("[1.0,1.2),(1.3,1.5]");    range2 = VersionRange.createFromVersionSpec("(1.1,1.4)");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 2, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.1", restriction.getLowerBound().toString());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.2", restriction.getUpperBound().toString());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    restriction = restrictions.get(1);    assertEquals(CHECK_LOWER_BOUND, "1.3", restriction.getLowerBound().toString());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.4", restriction.getUpperBound().toString());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("(,1.1),(1.4,)");    range2 = VersionRange.createFromVersionSpec("[1.1,1.4]");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 0, restrictions.size());    range1 = VersionRange.createFromVersionSpec("(,1.1],[1.4,)");    range2 = VersionRange.createFromVersionSpec("(1.1,1.4)");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 0, restrictions.size());    range1 = VersionRange.createFromVersionSpec("[,1.1],[1.4,]");    range2 = VersionRange.createFromVersionSpec("[1.2,1.3]");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 0, restrictions.size());    range1 = VersionRange.createFromVersionSpec("[1.0,1.2],[1.3,1.5]");    range2 = VersionRange.createFromVersionSpec("[1.1,1.4],[1.6,]");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 2, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.1", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.2", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    restriction = restrictions.get(1);    assertEquals(CHECK_LOWER_BOUND, "1.3", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.4", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("[1.0,1.2],[1.3,1.5]");    range2 = VersionRange.createFromVersionSpec("[1.1,1.4],[1.5,]");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 3, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.1", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.2", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    restriction = restrictions.get(1);    assertEquals(CHECK_LOWER_BOUND, "1.3", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.4", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    restriction = restrictions.get(2);    assertEquals(CHECK_LOWER_BOUND, "1.5", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.5", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("[1.0,1.2],[1.3,1.7]");    range2 = VersionRange.createFromVersionSpec("[1.1,1.4],[1.5,1.6]");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 3, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.1", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.2", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    restriction = restrictions.get(1);    assertEquals(CHECK_LOWER_BOUND, "1.3", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.4", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    restriction = restrictions.get(2);    assertEquals(CHECK_LOWER_BOUND, "1.5", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.6", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());        range1 = VersionRange.createFromVersionSpec("[,1.1],[1.4,]");    range2 = VersionRange.createFromVersionSpec("[1.2,1.3]");    range1 = range1.restrict(range2);    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 0, restrictions.size());    range1 = VersionRange.createFromVersionSpec("[,1.1],[1.4,]");    range2 = VersionRange.createFromVersionSpec("[1.2,1.3]");    range2 = range1.restrict(range2);    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 0, restrictions.size());}
05ce9a1609f87a65198d047da0d769d07c947c161317504f3317d7f4616f3511
testReleaseRangeBoundsContainsSnapshots
public void testReleaseRangeBoundsContainsSnapshots() throws InvalidVersionSpecificationException
{    VersionRange range = VersionRange.createFromVersionSpec("[1.0,1.2]");    assertTrue(range.containsVersion(new DefaultArtifactVersion("1.1-SNAPSHOT")));    assertTrue(range.containsVersion(new DefaultArtifactVersion("1.2-SNAPSHOT")));    assertFalse(range.containsVersion(new DefaultArtifactVersion("1.0-SNAPSHOT")));}
4d6d4b21cfcadf0c07845708857e42e3a416798272e45618b37485cc4eb2bb5a
testSnapshotRangeBoundsCanContainSnapshots
public void testSnapshotRangeBoundsCanContainSnapshots() throws InvalidVersionSpecificationException
{    VersionRange range = VersionRange.createFromVersionSpec("[1.0,1.2-SNAPSHOT]");    assertTrue(range.containsVersion(new DefaultArtifactVersion("1.1-SNAPSHOT")));    assertTrue(range.containsVersion(new DefaultArtifactVersion("1.2-SNAPSHOT")));    range = VersionRange.createFromVersionSpec("[1.0-SNAPSHOT,1.2]");    assertTrue(range.containsVersion(new DefaultArtifactVersion("1.0-SNAPSHOT")));    assertTrue(range.containsVersion(new DefaultArtifactVersion("1.1-SNAPSHOT")));}
67c4486ec4b807fd23b708efc65a4fcf7b0a46d21ac1b0eae3a9404df6046336
testSnapshotSoftVersionCanContainSnapshot
public void testSnapshotSoftVersionCanContainSnapshot() throws InvalidVersionSpecificationException
{    VersionRange range = VersionRange.createFromVersionSpec("1.0-SNAPSHOT");    assertTrue(range.containsVersion(new DefaultArtifactVersion("1.0-SNAPSHOT")));}
d9ca3361e596ba66683af5a4d4cc545b969232e7ba71412829e020d49d79c56e
checkInvalidRange
private void checkInvalidRange(String version)
{    try {        VersionRange.createFromVersionSpec(version);        fail("Version " + version + " should have failed to construct");    } catch (InvalidVersionSpecificationException expected) {        }}
ca918840a5059bcbd46ea3fe03d0fd0742c61906e0e295940b09c665232a4e34
testContains
public void testContains() throws InvalidVersionSpecificationException
{    ArtifactVersion actualVersion = new DefaultArtifactVersion("2.0.5");    assertTrue(enforceVersion("2.0.5", actualVersion));    assertTrue(enforceVersion("2.0.4", actualVersion));    assertTrue(enforceVersion("[2.0.5]", actualVersion));    assertFalse(enforceVersion("[2.0.6,)", actualVersion));    assertFalse(enforceVersion("[2.0.6]", actualVersion));    assertTrue(enforceVersion("[2.0,2.1]", actualVersion));    assertFalse(enforceVersion("[2.0,2.0.3]", actualVersion));    assertTrue(enforceVersion("[2.0,2.0.5]", actualVersion));    assertFalse(enforceVersion("[2.0,2.0.5)", actualVersion));}
1b8cf08de89f66c94f30819a1928d95834599d7e4a40b18e99925cb86de463b1
enforceVersion
public boolean enforceVersion(String requiredVersionRange, ArtifactVersion actualVersion) throws InvalidVersionSpecificationException
{    VersionRange vr = null;    vr = VersionRange.createFromVersionSpec(requiredVersionRange);    return vr.containsVersion(actualVersion);}
be918a1d156f251277094879d056e0dff87eec264b41ce81e94df2033ed540db
testOrder0
public void testOrder0()
{}
59cf65b8d7cf079236c264df25682302ac88faaac8a20e7cc2e0ee0c7c14a7c9
testCache
public void testCache() throws InvalidVersionSpecificationException
{    VersionRange range = VersionRange.createFromVersionSpec("[1.0,1.2]");        assertSame(range, VersionRange.createFromVersionSpec("[1.0,1.2]"));    VersionRange spec = VersionRange.createFromVersionSpec("1.0");        assertSame(spec, VersionRange.createFromVersionSpec("1.0"));    List<Restriction> restrictions = spec.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    VersionRange version = VersionRange.createFromVersion("1.0");        assertSame(version, VersionRange.createFromVersion("1.0"));    restrictions = version.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 0, restrictions.size());    assertFalse("check !VersionRange.createFromVersionSpec(x).equals(VersionRange.createFromVersion(x))", spec.equals(version));}
c544784f026afebea24caaff889181a15292a98786506cbfc66814257976c7b9
getSource
public String getSource()
{    return source;}
d0206afdd4bbfbca49378097e83c12789d7836ac6e56572eee8d2abd20c4c84d
getLineNumber
public int getLineNumber()
{    return lineNumber;}
de418c2b40b113f31f0e80a27291a5fc9f70e24067ed5b3ab5871ddcb04ceb6e
getColumnNumber
public int getColumnNumber()
{    return columnNumber;}
a50882ead68e94dcbbdf96fb8dae09b529366434d16e69e44544e30f2176d810
getLocation
public String getLocation()
{    StringBuilder buffer = new StringBuilder(256);    if (getSource().length() > 0) {        if (buffer.length() > 0) {            buffer.append(", ");        }        buffer.append(getSource());    }    if (getLineNumber() > 0) {        if (buffer.length() > 0) {            buffer.append(", ");        }        buffer.append("line ").append(getLineNumber());    }    if (getColumnNumber() > 0) {        if (buffer.length() > 0) {            buffer.append(", ");        }        buffer.append("column ").append(getColumnNumber());    }    return buffer.toString();}
854d9d54d3315f04df8394cf9b7e23acfa1148329c6dabcb18e9f24a7ab80028
getException
public Exception getException()
{    return exception;}
b46153cc21231cb60e014b6b3c49b437699575e4012681cb08026e5238c66751
getMessage
public String getMessage()
{    String msg;    if (message != null && message.length() > 0) {        msg = message;    } else {        msg = exception.getMessage();        if (msg == null) {            msg = "";        }    }    return msg;}
60ad86dc590f7242c4533d9ac40bba78bbbb39054da6560754306741e80942d2
getSeverity
public Severity getSeverity()
{    return severity;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    StringBuilder buffer = new StringBuilder(128);    buffer.append('[').append(getSeverity()).append("] ");    buffer.append(getMessage());    buffer.append(" @ ").append(getLocation());    return buffer.toString();}
cb918f76e66dcaffd35efd5f9895e36ef9a7ce8148d7805278a6f8d0627d8494
getProblems
public List<Problem> getProblems()
{    return problems;}
d57b630a432828ab4cae20dd742ae31b73be5d282f67404d4a4b739bf68622a9
setSource
public void setSource(String source)
{    this.source = source;}
8c52e41fed5dd0ea5c19df7691588bb409c840f3d7c44467c437d33f930986c3
add
public void add(Problem.Severity severity, String message, int line, int column, Exception cause)
{    Problem problem = new DefaultProblem(message, severity, source, line, column, cause);    problems.add(problem);}
1bb9d826482de87041e929f03d6073d7bca36bd7359f7658f22d33e1af426037
getInputStream
public InputStream getInputStream() throws IOException
{    return new FileInputStream(file);}
a50882ead68e94dcbbdf96fb8dae09b529366434d16e69e44544e30f2176d810
getLocation
public String getLocation()
{    return file.getPath();}
ce0460f83bd172eacce98e8169f6d9b1d4ec316943fcf77ee2d8f12bbe7327a0
getFile
public File getFile()
{    return file;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return getLocation();}
c918b41d71b693d770ea3edf5275896d13ac81a242947b17b970912be8aa7745
newInstance
public static ProblemCollector newInstance(List<Problem> problems)
{    return new DefaultProblemCollector(problems);}
1bb9d826482de87041e929f03d6073d7bca36bd7359f7658f22d33e1af426037
getInputStream
public InputStream getInputStream() throws IOException
{    return new ByteArrayInputStream(content.getBytes("UTF-8"));}
a50882ead68e94dcbbdf96fb8dae09b529366434d16e69e44544e30f2176d810
getLocation
public String getLocation()
{    return location;}
a5030233d505c701cd5d3898b11b3535ad3aa6f726b610e2ae8670101566316e
getContent
public String getContent()
{    return content;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return getLocation();}
1bb9d826482de87041e929f03d6073d7bca36bd7359f7658f22d33e1af426037
getInputStream
public InputStream getInputStream() throws IOException
{    return url.openStream();}
a50882ead68e94dcbbdf96fb8dae09b529366434d16e69e44544e30f2176d810
getLocation
public String getLocation()
{    return url.toString();}
df2bf56d298a90d42d37e21b66baa5616d58f08e28d08ed47d7798ed099513ef
getUrl
public URL getUrl()
{    return url;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return getLocation();}
2d033295de24f21bc74caf87a57b9ff00154bfaeaa3fdfad79d055d165fceca2
testGetProblems
public void testGetProblems()
{    DefaultProblemCollector collector = new DefaultProblemCollector(null);    assertNotNull(collector.getProblems());    assertEquals(0, collector.getProblems().size());    collector.add(null, "MESSAGE1", -1, -1, null);    Exception e2 = new Exception();    collector.add(Severity.WARNING, null, 42, 127, e2);    assertEquals(2, collector.getProblems().size());    Problem p1 = collector.getProblems().get(0);    assertEquals(Severity.ERROR, p1.getSeverity());    assertEquals("MESSAGE1", p1.getMessage());    assertEquals(-1, p1.getLineNumber());    assertEquals(-1, p1.getColumnNumber());    assertEquals(null, p1.getException());    Problem p2 = collector.getProblems().get(1);    assertEquals(Severity.WARNING, p2.getSeverity());    assertEquals("", p2.getMessage());    assertEquals(42, p2.getLineNumber());    assertEquals(127, p2.getColumnNumber());    assertEquals(e2, p2.getException());}
54c99fbe79ae062266af57736f1882ef9c715a9c7c3882281512d73496c1994f
testSetSource
public void testSetSource()
{    DefaultProblemCollector collector = new DefaultProblemCollector(null);    collector.add(null, "PROBLEM1", -1, -1, null);    collector.setSource("SOURCE_PROBLEM2");    collector.add(null, "PROBLEM2", -1, -1, null);    collector.setSource("SOURCE_PROBLEM3");    collector.add(null, "PROBLEM3", -1, -1, null);    assertEquals("", collector.getProblems().get(0).getSource());    assertEquals("SOURCE_PROBLEM2", collector.getProblems().get(1).getSource());    assertEquals("SOURCE_PROBLEM3", collector.getProblems().get(2).getSource());}
4429f5ff09bd55e68852c5cc1cae42ca964e9b594672a8647dc7e734375d837f
testGetSeverity
public void testGetSeverity()
{    DefaultProblem problem = new DefaultProblem(null, null, null, -1, -1, null);    assertEquals(Severity.ERROR, problem.getSeverity());    problem = new DefaultProblem(null, Severity.FATAL, null, -1, -1, null);    assertEquals(Severity.FATAL, problem.getSeverity());    problem = new DefaultProblem(null, Severity.ERROR, null, -1, -1, null);    assertEquals(Severity.ERROR, problem.getSeverity());    problem = new DefaultProblem(null, Severity.WARNING, null, -1, -1, null);    assertEquals(Severity.WARNING, problem.getSeverity());}
dbd147af0e9c28e1046842fb9d14be9d5b1e189ab41cbf374e320feee350f37f
testGetLineNumber
public void testGetLineNumber()
{    DefaultProblem problem = new DefaultProblem(null, null, null, -1, -1, null);    assertEquals(-1, problem.getLineNumber());    problem = new DefaultProblem(null, null, null, 42, -1, null);    assertEquals(42, problem.getLineNumber());    problem = new DefaultProblem(null, null, null, Integer.MAX_VALUE, -1, null);    assertEquals(Integer.MAX_VALUE, problem.getLineNumber());        problem = new DefaultProblem(null, null, null, Integer.MIN_VALUE, -1, null);    assertEquals(Integer.MIN_VALUE, problem.getLineNumber());}
1b14b6042b739300f4b398bb6f8cf98f4f72ae224255c8001a0b0bdb747c7f12
testGetColumnNumber
public void testGetColumnNumber()
{    DefaultProblem problem = new DefaultProblem(null, null, null, -1, -1, null);    assertEquals(-1, problem.getColumnNumber());    problem = new DefaultProblem(null, null, null, -1, 42, null);    assertEquals(42, problem.getColumnNumber());    problem = new DefaultProblem(null, null, null, -1, Integer.MAX_VALUE, null);    assertEquals(Integer.MAX_VALUE, problem.getColumnNumber());        problem = new DefaultProblem(null, null, null, -1, Integer.MIN_VALUE, null);    assertEquals(Integer.MIN_VALUE, problem.getColumnNumber());}
654e9e7b43e8a4c8f4ff59e02cae98007583f21b56eac47c29ec8caac3b31ce7
testGetException
public void testGetException()
{    DefaultProblem problem = new DefaultProblem(null, null, null, -1, -1, null);    assertEquals(null, problem.getException());    Exception e = new Exception();    problem = new DefaultProblem(null, null, null, -1, -1, e);    assertSame(e, problem.getException());}
fec1b1186f8eb4a864dc89e4b37fc7746460574590a7817ea954e67516283db9
testGetSource
public void testGetSource()
{    DefaultProblem problem = new DefaultProblem(null, null, null, -1, -1, null);    assertEquals("", problem.getSource());    problem = new DefaultProblem(null, null, "", -1, -1, null);    assertEquals("", problem.getSource());    problem = new DefaultProblem(null, null, "SOURCE", -1, -1, null);    assertEquals("SOURCE", problem.getSource());}
8358e41f1c1988075853ac379113ddb68d0da4cc0ea2fbaa73b4d3bdc3286c6a
testGetLocation
public void testGetLocation()
{    DefaultProblem problem = new DefaultProblem(null, null, null, -1, -1, null);    assertEquals("", problem.getLocation());    problem = new DefaultProblem(null, null, "SOURCE", -1, -1, null);    assertEquals("SOURCE", problem.getLocation());    problem = new DefaultProblem(null, null, null, 42, -1, null);    assertEquals("line 42", problem.getLocation());    problem = new DefaultProblem(null, null, null, -1, 127, null);    assertEquals("column 127", problem.getLocation());    problem = new DefaultProblem(null, null, "SOURCE", 42, 127, null);    assertEquals("SOURCE, line 42, column 127", problem.getLocation());}
624089193584f4d7deea85c9b11f19cfad4e5a41703ac990c12e38bd353054f5
testGetMessage
public void testGetMessage()
{    DefaultProblem problem = new DefaultProblem("MESSAGE", null, null, -1, -1, null);    assertEquals("MESSAGE", problem.getMessage());    problem = new DefaultProblem(null, null, null, -1, -1, new Exception());    assertEquals("", problem.getMessage());    problem = new DefaultProblem(null, null, null, -1, -1, new Exception("EXCEPTION MESSAGE"));    assertEquals("EXCEPTION MESSAGE", problem.getMessage());}
2a52ac9159aad4840a2e31195a1369a8006743340765abf461519d915245bbcb
testFileSource
public void testFileSource()
{    try {        new FileSource(null);        fail("Should fail, since you must specify a file");    } catch (NullPointerException e) {        assertEquals("file cannot be null", e.getMessage());    }}
cdfd5bec442f753494b5fd01f4008eb56c0d9dd12a14f4438d33b3695ac909b6
testGetInputStream
public void testGetInputStream() throws Exception
{    File txtFile = new File("target/test-classes/source.txt");    FileSource source = new FileSource(txtFile);    try (InputStream is = source.getInputStream();        Scanner scanner = new Scanner(is)) {        assertEquals("Hello World!", scanner.nextLine());    }}
8358e41f1c1988075853ac379113ddb68d0da4cc0ea2fbaa73b4d3bdc3286c6a
testGetLocation
public void testGetLocation()
{    File txtFile = new File("target/test-classes/source.txt");    FileSource source = new FileSource(txtFile);    assertEquals(txtFile.getAbsolutePath(), source.getLocation());}
56074126ca95f0039ac00ca00bf78298bda28d4a7e13c4d0709c8b5d53c8cb1f
testGetFile
public void testGetFile()
{    File txtFile = new File("target/test-classes/source.txt");    FileSource source = new FileSource(txtFile);    assertEquals(txtFile.getAbsoluteFile(), source.getFile());}
8109511a5c13ae2afded1cde5badda7abbcb9addf2413a38654acdfa3c9007c6
testNewInstance
public void testNewInstance()
{    ProblemCollector collector1 = ProblemCollectorFactory.newInstance(null);    Problem problem = new DefaultProblem("MESSAGE1", null, null, -1, -1, null);    ProblemCollector collector2 = ProblemCollectorFactory.newInstance(Collections.singletonList(problem));    assertNotSame(collector1, collector2);    assertEquals(0, collector1.getProblems().size());    assertEquals(1, collector2.getProblems().size());}
cdfd5bec442f753494b5fd01f4008eb56c0d9dd12a14f4438d33b3695ac909b6
testGetInputStream
public void testGetInputStream() throws Exception
{    StringSource source = new StringSource("Hello World!");    try (InputStream is = source.getInputStream();        Scanner scanner = new Scanner(is)) {        assertEquals("Hello World!", scanner.nextLine());    }}
8358e41f1c1988075853ac379113ddb68d0da4cc0ea2fbaa73b4d3bdc3286c6a
testGetLocation
public void testGetLocation()
{    StringSource source = new StringSource("Hello World!");    assertEquals("(memory)", source.getLocation());    source = new StringSource("Hello World!", "LOCATION");    assertEquals("LOCATION", source.getLocation());}
461f5aae979e163d1988b2f1ee9403cbc3e02b0dbe0aaf5f1df6d989bd59d68f
testGetContent
public void testGetContent()
{    StringSource source = new StringSource(null);    assertEquals("", source.getContent());    source = new StringSource("Hello World!", "LOCATION");    assertEquals("Hello World!", source.getContent());}
c7e9282d146061c421417da6195462185a3515a5c4cafddac6d8d66ed3cd869c
testUrlSource
public void testUrlSource()
{    try {        new UrlSource(null);        fail("Should fail, since you must specify a url");    } catch (NullPointerException e) {        assertEquals("url cannot be null", e.getMessage());    }}
cdfd5bec442f753494b5fd01f4008eb56c0d9dd12a14f4438d33b3695ac909b6
testGetInputStream
public void testGetInputStream() throws Exception
{    URL txtFile = new File("target/test-classes/source.txt").toURI().toURL();    UrlSource source = new UrlSource(txtFile);    try (InputStream is = source.getInputStream();        Scanner scanner = new Scanner(is)) {        assertEquals("Hello World!", scanner.nextLine());    }}
323070a448a0fcaa532b6bfb81918b27061a97c6882218ff55fd6a678001b1ee
testGetLocation
public void testGetLocation() throws Exception
{    URL txtFile = new File("target/test-classes/source.txt").toURI().toURL();    UrlSource source = new UrlSource(txtFile);    assertEquals(txtFile.toExternalForm(), source.getLocation());}
88187863014f9569e6378eef1914c47682c2f68e03f1603006cb774d90310666
getId
 int getId()
{    return id;}
414e16aeeb21943dd80861ee1da7274454be009563a29f537dd6630d056a91d0
checkScope
public static final ArtifactScopeEnum checkScope(ArtifactScopeEnum scope)
{    return scope == null ? DEFAULT_SCOPE : scope;}
b6618886f045f72bd87b21e6ae50c04bc9f78ceb97355e9a0b0208f7669f7aa1
getScope
public String getScope()
{    if (id == 1) {        return Artifact.SCOPE_COMPILE;    } else if (id == 2) {        return Artifact.SCOPE_TEST;    } else if (id == 3) {        return Artifact.SCOPE_RUNTIME;    } else if (id == 4) {        return Artifact.SCOPE_PROVIDED;    } else if (id == 5) {        return Artifact.SCOPE_SYSTEM;    } else {        return Artifact.SCOPE_RUNTIME_PLUS_SYSTEM;    }}
1f8f10099f7c4f65ce4e13d408a17d482ea20ff4118c615929099283fb6f00cd
encloses
public boolean encloses(ArtifactScopeEnum scope)
{    final ArtifactScopeEnum s = checkScope(scope);        if (id == system.id) {        return scope.id == system.id;    }    for (ArtifactScopeEnum[][] set : COMPLIANCY_SETS) {        if (id == set[0][0].id) {            for (ArtifactScopeEnum ase : set[1]) {                if (s.id == ase.id) {                    return true;                }            }            break;        }    }    return false;}
c861a6b0e82007307643b851a7314e37365bc578a4df78bdb47585de261e112f
valueOf
public static ArtifactStatus valueOf(String status)
{    ArtifactStatus retVal = null;    if (status != null) {        retVal = map.get(status);    }    return retVal != null ? retVal : NONE;}
8d37d11c7ecfc0d0589696a89cb385888c83bd3e43ea0c95a3b4ae4ef78180ce
equals
public boolean equals(Object o)
{    if (this == o) {        return true;    }    if (o == null || getClass() != o.getClass()) {        return false;    }    final ArtifactStatus that = (ArtifactStatus) o;    return rank == that.rank;}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    return rank;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return key;}
6b215bb4c1a5f9ca8b51e01f895896cef71b947e626e99a3ffbc81fabab13102
compareTo
public int compareTo(ArtifactStatus s)
{    return rank - s.rank;}
2be542cdf24e902ef1b29f6f5223166fda30f8a53499872c3170f08ab1eab203
deploy
public void deploy(String basedir, String finalName, Artifact artifact, ArtifactRepository deploymentRepository, ArtifactRepository localRepository) throws ArtifactDeploymentException
{    String extension = artifact.getArtifactHandler().getExtension();    File source = new File(basedir, finalName + "." + extension);    deploy(source, artifact, deploymentRepository, localRepository);}
afd227ebb227b408b3e27745617813584dc1946128cfe114b98acdfdaf2ad6ad
deploy
public void deploy(File source, Artifact artifact, ArtifactRepository deploymentRepository, ArtifactRepository localRepository) throws ArtifactDeploymentException
{    RepositorySystemSession session = LegacyLocalRepositoryManager.overlay(localRepository, legacySupport.getRepositorySession(), repoSystem);    DeployRequest request = new DeployRequest();    request.setTrace(RequestTrace.newChild(null, legacySupport.getSession().getCurrentProject()));    org.eclipse.aether.artifact.Artifact mainArtifact = RepositoryUtils.toArtifact(artifact);    mainArtifact = mainArtifact.setFile(source);    request.addArtifact(mainArtifact);    String versionKey = artifact.getGroupId() + ':' + artifact.getArtifactId();    String snapshotKey = null;    if (artifact.isSnapshot()) {        snapshotKey = versionKey + ':' + artifact.getBaseVersion();        request.addMetadata(relatedMetadata.get(snapshotKey));    }    request.addMetadata(relatedMetadata.get(versionKey));    for (ArtifactMetadata metadata : artifact.getMetadataList()) {        if (metadata instanceof ProjectArtifactMetadata) {            org.eclipse.aether.artifact.Artifact pomArtifact = new SubArtifact(mainArtifact, "", "pom");            pomArtifact = pomArtifact.setFile(((ProjectArtifactMetadata) metadata).getFile());            request.addArtifact(pomArtifact);        } else if (metadata instanceof SnapshotArtifactRepositoryMetadata || metadata instanceof ArtifactRepositoryMetadata) {                } else {            request.addMetadata(new MetadataBridge(metadata));        }    }    RemoteRepository remoteRepo = RepositoryUtils.toRepo(deploymentRepository);    /*         * NOTE: This provides backward-compat with maven-deploy-plugin:2.4 which bypasses the repository factory when         * using an alternative deployment location.         */    if (deploymentRepository instanceof DefaultArtifactRepository && deploymentRepository.getAuthentication() == null) {        RemoteRepository.Builder builder = new RemoteRepository.Builder(remoteRepo);        builder.setAuthentication(session.getAuthenticationSelector().getAuthentication(remoteRepo));        builder.setProxy(session.getProxySelector().getProxy(remoteRepo));        remoteRepo = builder.build();    }    request.setRepository(remoteRepo);    DeployResult result;    try {        result = repoSystem.deploy(session, request);    } catch (DeploymentException e) {        throw new ArtifactDeploymentException(e.getMessage(), e);    }    for (Object metadata : result.getMetadata()) {        if (metadata.getClass().getName().endsWith(".internal.VersionsMetadata")) {            relatedMetadata.put(versionKey, (MergeableMetadata) metadata);        }        if (snapshotKey != null && metadata.getClass().getName().endsWith(".internal.RemoteSnapshotMetadata")) {            relatedMetadata.put(snapshotKey, (MergeableMetadata) metadata);        }    }    artifact.setResolvedVersion(result.getArtifacts().iterator().next().getVersion());}
4df38824ade8d1c6eecbcd408dcb82567dd083deff8f0900be513aa24e016b96
install
public void install(String basedir, String finalName, Artifact artifact, ArtifactRepository localRepository) throws ArtifactInstallationException
{    String extension = artifact.getArtifactHandler().getExtension();    File source = new File(basedir, finalName + "." + extension);    install(source, artifact, localRepository);}
1c15503c4d714057bb387d9409f0dd9748bb12af9e4b793357f2f9b0072b5a0d
install
public void install(File source, Artifact artifact, ArtifactRepository localRepository) throws ArtifactInstallationException
{    RepositorySystemSession session = LegacyLocalRepositoryManager.overlay(localRepository, legacySupport.getRepositorySession(), repoSystem);    InstallRequest request = new InstallRequest();    request.setTrace(RequestTrace.newChild(null, legacySupport.getSession().getCurrentProject()));    org.eclipse.aether.artifact.Artifact mainArtifact = RepositoryUtils.toArtifact(artifact);    mainArtifact = mainArtifact.setFile(source);    request.addArtifact(mainArtifact);    for (ArtifactMetadata metadata : artifact.getMetadataList()) {        if (metadata instanceof ProjectArtifactMetadata) {            org.eclipse.aether.artifact.Artifact pomArtifact = new SubArtifact(mainArtifact, "", "pom");            pomArtifact = pomArtifact.setFile(((ProjectArtifactMetadata) metadata).getFile());            request.addArtifact(pomArtifact);        } else if (metadata instanceof SnapshotArtifactRepositoryMetadata || metadata instanceof ArtifactRepositoryMetadata) {                } else {            request.addMetadata(new MetadataBridge(metadata));        }    }    try {        repoSystem.install(session, request);    } catch (InstallationException e) {        throw new ArtifactInstallationException(e.getMessage(), e);    }    if (artifact.isSnapshot()) {        Snapshot snapshot = new Snapshot();        snapshot.setLocalCopy(true);        artifact.addMetadata(new SnapshotArtifactRepositoryMetadata(artifact, snapshot));    }    Versioning versioning = new Versioning();    versioning.updateTimestamp();    versioning.addVersion(artifact.getBaseVersion());    if (artifact.isRelease()) {        versioning.setRelease(artifact.getBaseVersion());    }    artifact.addMetadata(new ArtifactRepositoryMetadata(artifact, versioning));}
81bef5255565f67d1ce5025c179cc5b6e209ba7981c779e3f3a1ca0a5654dcd7
getAuthenticationInfo
public AuthenticationInfo getAuthenticationInfo(String id)
{    MavenSession session = legacySupport.getSession();    if (session != null && id != null) {        MavenExecutionRequest request = session.getRequest();        if (request != null) {            List<Server> servers = request.getServers();            if (servers != null) {                for (Server server : servers) {                    if (id.equalsIgnoreCase(server.getId())) {                        SettingsDecryptionResult result = settingsDecrypter.decrypt(new DefaultSettingsDecryptionRequest(server));                        server = result.getServer();                        AuthenticationInfo authInfo = new AuthenticationInfo();                        authInfo.setUserName(server.getUsername());                        authInfo.setPassword(server.getPassword());                        authInfo.setPrivateKey(server.getPrivateKey());                        authInfo.setPassphrase(server.getPassphrase());                        return authInfo;                    }                }            }        }    }        return new AuthenticationInfo();}
2d33558329cc0810d464345241e95b3e1baa8c5305f26ec868a942f0d85dd408
getProxy
public ProxyInfo getProxy(String protocol)
{    MavenSession session = legacySupport.getSession();    if (session != null && protocol != null) {        MavenExecutionRequest request = session.getRequest();        if (request != null) {            List<Proxy> proxies = request.getProxies();            if (proxies != null) {                for (Proxy proxy : proxies) {                    if (proxy.isActive() && protocol.equalsIgnoreCase(proxy.getProtocol())) {                        SettingsDecryptionResult result = settingsDecrypter.decrypt(new DefaultSettingsDecryptionRequest(proxy));                        proxy = result.getProxy();                        ProxyInfo proxyInfo = new ProxyInfo();                        proxyInfo.setHost(proxy.getHost());                        proxyInfo.setType(proxy.getProtocol());                        proxyInfo.setPort(proxy.getPort());                        proxyInfo.setNonProxyHosts(proxy.getNonProxyHosts());                        proxyInfo.setUserName(proxy.getUsername());                        proxyInfo.setPassword(proxy.getPassword());                        return proxyInfo;                    }                }            }        }    }    return null;}
c095ff8450f7890f2dd6dbc0d85b94a23e047d38f97df0676665117353ba1949
getArtifact
public void getArtifact(Artifact artifact, ArtifactRepository repository) throws TransferFailedException, ResourceDoesNotExistException
{    getArtifact(artifact, repository, null, false);}
35b33d90711e6623bd31732d02d8123327926f194d125a115aa5d41429167ed1
getArtifact
public void getArtifact(Artifact artifact, List<ArtifactRepository> remoteRepositories) throws TransferFailedException, ResourceDoesNotExistException
{    getArtifact(artifact, remoteRepositories, null, false);}
706cc3d5ca16297c1a816b761592096628f52463f7c9381c32bf46ffac0bccb1
getMirrorRepository
public ArtifactRepository getMirrorRepository(ArtifactRepository repository)
{    Mirror mirror = mirrorSelector.getMirror(repository, legacySupport.getSession().getSettings().getMirrors());    if (mirror != null) {        String id = mirror.getId();        if (id == null) {                        id = repository.getId();        }        log.debug("Using mirror: " + mirror.getUrl() + " (id: " + id + ")");        repository = artifactRepositoryFactory.createArtifactRepository(id, mirror.getUrl(), repository.getLayout(), repository.getSnapshots(), repository.getReleases());    }    return repository;}
6c63652ca89949e5d136675e9b8c89f393e36286bda4d26fa63c77d8d06c4fab
pathOf
public String pathOf(Artifact artifact)
{    return layout.pathOf(artifact);}
27cf106da6e0f0a2e028e1c2df0f3942f631e27187b238c6910a6fd698f94fe1
pathOfRemoteRepositoryMetadata
public String pathOfRemoteRepositoryMetadata(ArtifactMetadata artifactMetadata)
{    return layout.pathOfRemoteRepositoryMetadata(artifactMetadata);}
2bf3ce12ca84872494a2865c7a246067b1efd12dc3403ae1a3b69eb89fda872e
pathOfLocalRepositoryMetadata
public String pathOfLocalRepositoryMetadata(ArtifactMetadata metadata, ArtifactRepository repository)
{    return layout.pathOfLocalRepositoryMetadata(metadata, repository);}
7e78cfde6963ae37d7bb68a98252859899af1a04bcfa98adb74741de408e0a08
setLayout
public void setLayout(ArtifactRepositoryLayout layout)
{    this.layout = layout;}
eaccd05b88d213888c2ea72d48c7456d59c1658d3dcd60e329d9f0dbcbd30ba5
getLayout
public ArtifactRepositoryLayout getLayout()
{    return layout;}
c51880675a292e1185cf5293eee389b8dd45e3f92adb2d755a254d0279d6f19f
setSnapshotUpdatePolicy
public void setSnapshotUpdatePolicy(ArtifactRepositoryPolicy snapshots)
{    this.snapshots = snapshots;}
222a67553e8947003641acb334617108f322c14e725a15da2df9d63dc24f62ac
getSnapshots
public ArtifactRepositoryPolicy getSnapshots()
{    return snapshots;}
b2ef7788eb28cb05cdce91a4de4843a00e75242c8b73da89366821d2f05a1a88
setReleaseUpdatePolicy
public void setReleaseUpdatePolicy(ArtifactRepositoryPolicy releases)
{    this.releases = releases;}
e409ed7b242cdfb930e2827760f13012a0489d3783c0c87a55ae976f5bdedf94
getReleases
public ArtifactRepositoryPolicy getReleases()
{    return releases;}
71dcee8caa732fdfbbc9042fbd951dc9dfd911ed9a4cabf0966856ac5de53dfc
getKey
public String getKey()
{    return getId();}
e3ffd24a285871396c4767f82c071f93b11f1b926d4b45e72fd04b9c3e3f9c39
isBlacklisted
public boolean isBlacklisted()
{    return blacklisted;}
1002d2c9dc39f642fd354c1fe0c6c06ab9c06b0390977ebad13b1ad968941bfc
setBlacklisted
public void setBlacklisted(boolean blacklisted)
{    this.blacklisted = blacklisted;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    StringBuilder sb = new StringBuilder(256);    sb.append("       id: ").append(getId()).append('\n');    sb.append("      url: ").append(getUrl()).append('\n');    sb.append("   layout: ").append(layout != null ? layout : "none").append('\n');    if (snapshots != null) {        sb.append("snapshots: [enabled => ").append(snapshots.isEnabled());        sb.append(", update => ").append(snapshots.getUpdatePolicy()).append("]\n");    }    if (releases != null) {        sb.append(" releases: [enabled => ").append(releases.isEnabled());        sb.append(", update => ").append(releases.getUpdatePolicy()).append("]\n");    }    return sb.toString();}
288e92881fed3bc8b09523aa53dbafc19c0d7a2134e03bc81446cb3e3ad05475
find
public Artifact find(Artifact artifact)
{    File artifactFile = new File(getBasedir(), pathOf(artifact));            artifact.setFile(artifactFile);    if (artifactFile.exists()) {        artifact.setResolved(true);    }    return artifact;}
7dbbbbca6cf59b7ba416355d0104cfe6d956ee9ca82698b8c55c8e726946b44d
findVersions
public List<String> findVersions(Artifact artifact)
{    return Collections.emptyList();}
08669c105bbf3a115f15048726a5d208c925555af6227b68853f58de5d081665
isProjectAware
public boolean isProjectAware()
{    return false;}
88ff97d266872019a27a324a427d72e949925137862c788004af02551c925751
getAuthentication
public Authentication getAuthentication()
{    return authentication;}
d9ef7e844af4717e446e197021842a9116efb3e8353c92f0b9ec31975d0330d9
setAuthentication
public void setAuthentication(Authentication authentication)
{    this.authentication = authentication;}
c70b87b7ec5d89054605722508abc6cf4c33d7e80c898c44a9112dbd3f52c7be
getProxy
public Proxy getProxy()
{    return proxy;}
6e75a24b61d743c90df7ce73337896b8b791f32af0703cf863cc6dc11e03d783
setProxy
public void setProxy(Proxy proxy)
{    this.proxy = proxy;}
a293b6df57609783e6668651cb67ec26359ef344440dd30ba2712ad30c619b60
isUniqueVersion
public boolean isUniqueVersion()
{    return true;}
2701253879f2e277f540f1efb5ee870b347b549c9c694bae84534aad1654feaa
getMirroredRepositories
public List<ArtifactRepository> getMirroredRepositories()
{    return mirroredRepositories;}
9f57ef1a9b76fe6eba32f26728fcf96fdd5c7ba5ffe630b9410f1786ec46da32
setMirroredRepositories
public void setMirroredRepositories(List<ArtifactRepository> mirroredRepositories)
{    if (mirroredRepositories != null) {        this.mirroredRepositories = Collections.unmodifiableList(mirroredRepositories);    } else {        this.mirroredRepositories = Collections.emptyList();    }}
ce5d355c7ad1e903bf4f37cf78f4b0539caef05ed5398d1d33a9e33476927e4d
getLayout
public ArtifactRepositoryLayout getLayout(String layoutId) throws UnknownRepositoryLayoutException
{    return factory.getLayout(layoutId);}
5307a7a1f762744bb7e64cfa9fa10064691908dda02887ad2929c1fd44dacb7d
createDeploymentArtifactRepository
public ArtifactRepository createDeploymentArtifactRepository(String id, String url, String layoutId, boolean uniqueVersion) throws UnknownRepositoryLayoutException
{    return injectSession(factory.createDeploymentArtifactRepository(id, url, layoutId, uniqueVersion), false);}
bf1919037ffc1da81b4c4b6593cff487cc4f9d6150b3eb90abce4da6395b2f9c
createDeploymentArtifactRepository
public ArtifactRepository createDeploymentArtifactRepository(String id, String url, ArtifactRepositoryLayout repositoryLayout, boolean uniqueVersion)
{    return injectSession(factory.createDeploymentArtifactRepository(id, url, repositoryLayout, uniqueVersion), false);}
de760ce8720ff2be5963c7f25797cf6aa644f2380ef9dd6d38ffe1b203525b59
createArtifactRepository
public ArtifactRepository createArtifactRepository(String id, String url, String layoutId, ArtifactRepositoryPolicy snapshots, ArtifactRepositoryPolicy releases) throws UnknownRepositoryLayoutException
{    return injectSession(factory.createArtifactRepository(id, url, layoutId, snapshots, releases), true);}
49aba91706982f41f7fbd4f48a3c5c4ae6ba78d4594fcf34ccaf6d3eae636c54
createArtifactRepository
public ArtifactRepository createArtifactRepository(String id, String url, ArtifactRepositoryLayout repositoryLayout, ArtifactRepositoryPolicy snapshots, ArtifactRepositoryPolicy releases)
{    return injectSession(factory.createArtifactRepository(id, url, repositoryLayout, snapshots, releases), true);}
0441e46a07c08169b6269ef55338ded415d7dbd9a5fe84e5c5316567a6156619
setGlobalUpdatePolicy
public void setGlobalUpdatePolicy(String updatePolicy)
{    factory.setGlobalUpdatePolicy(updatePolicy);}
a0dc4b2b83c195433a5f642a6d5cc91972e7729569a3528c97d0f7868641b29a
setGlobalChecksumPolicy
public void setGlobalChecksumPolicy(String checksumPolicy)
{    factory.setGlobalChecksumPolicy(checksumPolicy);}
d7d27777e84b5c7375fe176ff28c3928afccdca90478ddbc8c3aa220d29db399
injectSession
private ArtifactRepository injectSession(ArtifactRepository repository, boolean mirrors)
{    RepositorySystemSession session = legacySupport.getRepositorySession();    if (session != null && repository != null && !isLocalRepository(repository)) {        List<ArtifactRepository> repositories = Arrays.asList(repository);        if (mirrors) {            repositorySystem.injectMirror(session, repositories);        }        repositorySystem.injectProxy(session, repositories);        repositorySystem.injectAuthentication(session, repositories);    }    return repository;}
782f7db649d666e0c4bd6991d463e0006851bdebdaf50873770b20fea42d07dd
isLocalRepository
private boolean isLocalRepository(ArtifactRepository repository)
{        return "local".equals(repository.getId());}
09e8f13a9a603d31d64bb498b77d15572483824d843d0e82a570643192f62186
getId
public String getId()
{    return "flat";}
6c63652ca89949e5d136675e9b8c89f393e36286bda4d26fa63c77d8d06c4fab
pathOf
public String pathOf(Artifact artifact)
{    ArtifactHandler artifactHandler = artifact.getArtifactHandler();    StringBuilder path = new StringBuilder(128);    path.append(artifact.getArtifactId()).append(ARTIFACT_SEPARATOR).append(artifact.getVersion());    if (artifact.hasClassifier()) {        path.append(ARTIFACT_SEPARATOR).append(artifact.getClassifier());    }    if (artifactHandler.getExtension() != null && artifactHandler.getExtension().length() > 0) {        path.append(GROUP_SEPARATOR).append(artifactHandler.getExtension());    }    return path.toString();}
2bf3ce12ca84872494a2865c7a246067b1efd12dc3403ae1a3b69eb89fda872e
pathOfLocalRepositoryMetadata
public String pathOfLocalRepositoryMetadata(ArtifactMetadata metadata, ArtifactRepository repository)
{    return pathOfRepositoryMetadata(metadata.getLocalFilename(repository));}
e104b0b3baaf377e15de48a4a66cdd1a7262f7a69c037fe97fab9f1bcdc9d079
pathOfRepositoryMetadata
private String pathOfRepositoryMetadata(String filename)
{    StringBuilder path = new StringBuilder(128);    path.append(filename);    return path.toString();}
71592720c0b04200497abee0127a385a42bb60fee54e020cce105b67cd21d2e7
pathOfRemoteRepositoryMetadata
public String pathOfRemoteRepositoryMetadata(ArtifactMetadata metadata)
{    return pathOfRepositoryMetadata(metadata.getRemoteFilename());}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return getId();}
d7b2ad7cf7d13c49b77d4a9e76f05a821b8c78dc92ea6b7287686787e4eaeb6e
resolve
public void resolve(RepositoryMetadata metadata, List<ArtifactRepository> remoteRepositories, ArtifactRepository localRepository) throws RepositoryMetadataResolutionException
{    RepositoryRequest request = new DefaultRepositoryRequest();    request.setLocalRepository(localRepository);    request.setRemoteRepositories(remoteRepositories);    resolve(metadata, request);}
75bc6e1f5168ccf608c5a0de3d5fcaac5d29b84261051d1323def3a48b11a4fe
resolve
public void resolve(RepositoryMetadata metadata, RepositoryRequest request) throws RepositoryMetadataResolutionException
{    ArtifactRepository localRepo = request.getLocalRepository();    List<ArtifactRepository> remoteRepositories = request.getRemoteRepositories();    if (!request.isOffline()) {        Date localCopyLastModified = null;        if (metadata.getBaseVersion() != null) {            localCopyLastModified = getLocalCopyLastModified(localRepo, metadata);        }        for (ArtifactRepository repository : remoteRepositories) {            ArtifactRepositoryPolicy policy = metadata.getPolicy(repository);            File file = new File(localRepo.getBasedir(), localRepo.pathOfLocalRepositoryMetadata(metadata, repository));            boolean update;            if (!policy.isEnabled()) {                update = false;                if (getLogger().isDebugEnabled()) {                    getLogger().debug("Skipping update check for " + metadata.getKey() + " (" + file + ") from disabled repository " + repository.getId() + " (" + repository.getUrl() + ")");                }            } else if (request.isForceUpdate()) {                update = true;            } else if (localCopyLastModified != null && !policy.checkOutOfDate(localCopyLastModified)) {                update = false;                if (getLogger().isDebugEnabled()) {                    getLogger().debug("Skipping update check for " + metadata.getKey() + " (" + file + ") from repository " + repository.getId() + " (" + repository.getUrl() + ") in favor of local copy");                }            } else {                update = updateCheckManager.isUpdateRequired(metadata, repository, file);            }            if (update) {                getLogger().info(metadata.getKey() + ": checking for updates from " + repository.getId());                try {                    wagonManager.getArtifactMetadata(metadata, repository, file, policy.getChecksumPolicy());                } catch (ResourceDoesNotExistException e) {                    getLogger().debug(metadata + " could not be found on repository: " + repository.getId());                                        if (file.exists()) {                        if (!file.delete()) {                                                        try {                                Thread.sleep(10);                            } catch (InterruptedException ie) {                                                        }                                                        file.delete();                        }                    }                } catch (TransferFailedException e) {                    getLogger().warn(metadata + " could not be retrieved from repository: " + repository.getId() + " due to an error: " + e.getMessage());                    getLogger().debug("Exception", e);                } finally {                    updateCheckManager.touch(metadata, repository, file);                }            }                        if (file.exists()) {                file.setLastModified(System.currentTimeMillis());            }        }    }    try {        mergeMetadata(metadata, remoteRepositories, localRepo);    } catch (RepositoryMetadataStoreException e) {        throw new RepositoryMetadataResolutionException("Unable to store local copy of metadata: " + e.getMessage(), e);    }}
b63232f2d1e28aad7c93108b1477aeb40f99514c5e88984b091ef09e22816c2d
getLocalCopyLastModified
private Date getLocalCopyLastModified(ArtifactRepository localRepository, RepositoryMetadata metadata)
{    String metadataPath = localRepository.pathOfLocalRepositoryMetadata(metadata, localRepository);    File metadataFile = new File(localRepository.getBasedir(), metadataPath);    return metadataFile.isFile() ? new Date(metadataFile.lastModified()) : null;}
cdabfd7b50b6db5d13a5646b33d07d85302e1a8eb431e2bb0f8c9386c5c1ff15
mergeMetadata
private void mergeMetadata(RepositoryMetadata metadata, List<ArtifactRepository> remoteRepositories, ArtifactRepository localRepository) throws RepositoryMetadataStoreException
{                    Map<ArtifactRepository, Metadata> previousMetadata = new HashMap<>();    ArtifactRepository selected = null;    for (ArtifactRepository repository : remoteRepositories) {        ArtifactRepositoryPolicy policy = metadata.getPolicy(repository);        if (policy.isEnabled() && loadMetadata(metadata, repository, localRepository, previousMetadata)) {            metadata.setRepository(repository);            selected = repository;        }    }    if (loadMetadata(metadata, localRepository, localRepository, previousMetadata)) {        metadata.setRepository(null);        selected = localRepository;    }    updateSnapshotMetadata(metadata, previousMetadata, selected, localRepository);}
9d8f26e17c66f1512f02dd56b55d5e97c95f7f280565f3400b6a786f685a48a7
updateSnapshotMetadata
private void updateSnapshotMetadata(RepositoryMetadata metadata, Map<ArtifactRepository, Metadata> previousMetadata, ArtifactRepository selected, ArtifactRepository localRepository) throws RepositoryMetadataStoreException
{        if (metadata.isSnapshot()) {        Metadata prevMetadata = metadata.getMetadata();        for (ArtifactRepository repository : previousMetadata.keySet()) {            Metadata m = previousMetadata.get(repository);            if (repository.equals(selected)) {                if (m.getVersioning() == null) {                    m.setVersioning(new Versioning());                }                if (m.getVersioning().getSnapshot() == null) {                    m.getVersioning().setSnapshot(new Snapshot());                }            } else {                if ((m.getVersioning() != null) && (m.getVersioning().getSnapshot() != null) && m.getVersioning().getSnapshot().isLocalCopy()) {                    m.getVersioning().getSnapshot().setLocalCopy(false);                    metadata.setMetadata(m);                    metadata.storeInLocalRepository(localRepository, repository);                }            }        }        metadata.setMetadata(prevMetadata);    }}
01b84528d89b4f1d4499c048f6d197625ffce9340bda840dc893bcfef3ed5243
loadMetadata
private boolean loadMetadata(RepositoryMetadata repoMetadata, ArtifactRepository remoteRepository, ArtifactRepository localRepository, Map<ArtifactRepository, Metadata> previousMetadata)
{    boolean setRepository = false;    File metadataFile = new File(localRepository.getBasedir(), localRepository.pathOfLocalRepositoryMetadata(repoMetadata, remoteRepository));    if (metadataFile.exists()) {        Metadata metadata;        try {            metadata = readMetadata(metadataFile);        } catch (RepositoryMetadataReadException e) {            if (getLogger().isDebugEnabled()) {                getLogger().warn(e.getMessage(), e);            } else {                getLogger().warn(e.getMessage());            }            return setRepository;        }        if (repoMetadata.isSnapshot() && (previousMetadata != null)) {            previousMetadata.put(remoteRepository, metadata);        }        if (repoMetadata.getMetadata() != null) {            setRepository = repoMetadata.getMetadata().merge(metadata);        } else {            repoMetadata.setMetadata(metadata);            setRepository = true;        }    }    return setRepository;}
230b902ae251851d463fb16b73f7ee8b3adf82b15da53531fc6479de6f9dfa84
readMetadata
protected Metadata readMetadata(File mappingFile) throws RepositoryMetadataReadException
{    Metadata result;    try (Reader reader = ReaderFactory.newXmlReader(mappingFile)) {        MetadataXpp3Reader mappingReader = new MetadataXpp3Reader();        result = mappingReader.read(reader, false);    } catch (FileNotFoundException e) {        throw new RepositoryMetadataReadException("Cannot read metadata from '" + mappingFile + "'", e);    } catch (IOException | XmlPullParserException e) {        throw new RepositoryMetadataReadException("Cannot read metadata from '" + mappingFile + "': " + e.getMessage(), e);    }    return result;}
0e9e559447d75bec58ad659728e0e49d6e9c17ce7e6165467172ca885961b0c7
fixTimestamp
private void fixTimestamp(File metadataFile, Metadata metadata, Metadata reference)
{    boolean changed = false;    if (metadata != null && reference != null) {        Versioning versioning = metadata.getVersioning();        Versioning versioningRef = reference.getVersioning();        if (versioning != null && versioningRef != null) {            String lastUpdated = versioning.getLastUpdated();            String now = versioningRef.getLastUpdated();            if (lastUpdated != null && now != null && now.compareTo(lastUpdated) < 0) {                getLogger().warn("The last updated timestamp in " + metadataFile + " refers to the future (now = " + now + ", lastUpdated = " + lastUpdated + "). Please verify that the clocks of all" + " deploying machines are reasonably synchronized.");                versioning.setLastUpdated(now);                changed = true;            }        }    }    if (changed) {        getLogger().debug("Repairing metadata in " + metadataFile);        try (Writer writer = WriterFactory.newXmlWriter(metadataFile)) {            new MetadataXpp3Writer().write(writer, metadata);        } catch (IOException e) {            String msg = "Could not write fixed metadata to " + metadataFile + ": " + e.getMessage();            if (getLogger().isDebugEnabled()) {                getLogger().warn(msg, e);            } else {                getLogger().warn(msg);            }        }    }}
0608ac374dbbd20ad5766728355acfd4a7db07d13744dbcfc85a4c6f001f0dad
resolveAlways
public void resolveAlways(RepositoryMetadata metadata, ArtifactRepository localRepository, ArtifactRepository remoteRepository) throws RepositoryMetadataResolutionException
{    File file;    try {        file = getArtifactMetadataFromDeploymentRepository(metadata, localRepository, remoteRepository);    } catch (TransferFailedException e) {        throw new RepositoryMetadataResolutionException(metadata + " could not be retrieved from repository: " + remoteRepository.getId() + " due to an error: " + e.getMessage(), e);    }    try {        if (file.exists()) {            Metadata prevMetadata = readMetadata(file);            metadata.setMetadata(prevMetadata);        }    } catch (RepositoryMetadataReadException e) {        throw new RepositoryMetadataResolutionException(e.getMessage(), e);    }}
1033b540d86f115bf356af4657cad3c169867e0a33e692221a35cd8883e2aec2
getArtifactMetadataFromDeploymentRepository
private File getArtifactMetadataFromDeploymentRepository(ArtifactMetadata metadata, ArtifactRepository localRepo, ArtifactRepository remoteRepository) throws TransferFailedException
{    File file = new File(localRepo.getBasedir(), localRepo.pathOfLocalRepositoryMetadata(metadata, remoteRepository));    try {        wagonManager.getArtifactMetadataFromDeploymentRepository(metadata, remoteRepository, file, ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN);    } catch (ResourceDoesNotExistException e) {        getLogger().info(metadata + " could not be found on repository: " + remoteRepository.getId() + ", so will be created");                if (file.exists()) {            if (!file.delete()) {                                try {                    Thread.sleep(10);                } catch (InterruptedException ie) {                                }                                file.delete();            }        }    } finally {        if (metadata instanceof RepositoryMetadata) {            updateCheckManager.touch((RepositoryMetadata) metadata, remoteRepository, file);        }    }    return file;}
bfa8218bf643d665042c64c1152acb7b4d7b2a5c2ba7833cf372264ae81dc772
deploy
public void deploy(ArtifactMetadata metadata, ArtifactRepository localRepository, ArtifactRepository deploymentRepository) throws RepositoryMetadataDeploymentException
{    File file;    if (metadata instanceof RepositoryMetadata) {        getLogger().info("Retrieving previous metadata from " + deploymentRepository.getId());        try {            file = getArtifactMetadataFromDeploymentRepository(metadata, localRepository, deploymentRepository);        } catch (TransferFailedException e) {            throw new RepositoryMetadataDeploymentException(metadata + " could not be retrieved from repository: " + deploymentRepository.getId() + " due to an error: " + e.getMessage(), e);        }        if (file.isFile()) {            try {                fixTimestamp(file, readMetadata(file), ((RepositoryMetadata) metadata).getMetadata());            } catch (RepositoryMetadataReadException e) {                        }        }    } else {                file = new File(localRepository.getBasedir(), localRepository.pathOfLocalRepositoryMetadata(metadata, deploymentRepository));    }    try {        metadata.storeInLocalRepository(localRepository, deploymentRepository);    } catch (RepositoryMetadataStoreException e) {        throw new RepositoryMetadataDeploymentException("Error installing metadata: " + e.getMessage(), e);    }    try {        wagonManager.putArtifactMetadata(file, metadata, deploymentRepository);    } catch (TransferFailedException e) {        throw new RepositoryMetadataDeploymentException("Error while deploying metadata: " + e.getMessage(), e);    }}
f4b1ebc76f37ce751af462e30ef00edb0eafc99760cedf08635dc496ea3abd0f
install
public void install(ArtifactMetadata metadata, ArtifactRepository localRepository) throws RepositoryMetadataInstallationException
{    try {        metadata.storeInLocalRepository(localRepository, localRepository);    } catch (RepositoryMetadataStoreException e) {        throw new RepositoryMetadataInstallationException("Error installing metadata: " + e.getMessage(), e);    }}
aea943cbaf8dc855792e6e2de7f6a7341ed98e92852166fb77b4cc44da614bff
storedInGroupDirectory
public boolean storedInGroupDirectory()
{    return true;}
a566aae8ebe271cc85083f8936c9f756e314dec79de7b7324b49bc9aca8bc3e6
storedInArtifactVersionDirectory
public boolean storedInArtifactVersionDirectory()
{    return false;}
9590314d7a6edd0118345714cc714a8e73448e57e702bb4c6893b363f509d64d
getGroupId
public String getGroupId()
{    return groupId;}
1e5191dc99d9314f2df50294bcd8d717af7b8f4311575d36d8d75b27121f1064
getArtifactId
public String getArtifactId()
{    return null;}
2127b25546d419ff53a6da73c9acb361090188bd943b368d5e79d3f5d5595571
getBaseVersion
public String getBaseVersion()
{    return null;}
16e1369c3bfd3c502bf07a55df62bc5c9afe76fd5e46235b2f1bbef8e1d044c1
addPluginMapping
public void addPluginMapping(String goalPrefix, String artifactId)
{    addPluginMapping(goalPrefix, artifactId, artifactId);}
af02af4826cd7c7f215ad55f81906946ac01ce8d51ec5886038c3dc0f850eb62
addPluginMapping
public void addPluginMapping(String goalPrefix, String artifactId, String name)
{    List<Plugin> plugins = getMetadata().getPlugins();    boolean found = false;    for (Iterator<Plugin> i = plugins.iterator(); i.hasNext() && !found; ) {        Plugin plugin = i.next();        if (plugin.getPrefix().equals(goalPrefix)) {            found = true;        }    }    if (!found) {        Plugin plugin = new Plugin();        plugin.setPrefix(goalPrefix);        plugin.setArtifactId(artifactId);        plugin.setName(name);        getMetadata().addPlugin(plugin);    }}
b2585874b87865eace30c330168a04230bae89eeda3d2fe20bf9bf198ae6751e
getKey
public Object getKey()
{    return groupId;}
2ade99e89c0802b58f3776f3f0e6d2be8b4db4b2629b011476786812f36d732e
isSnapshot
public boolean isSnapshot()
{    return false;}
2173adbe55779ccb687142434f49e47b69ce1c4fc751fc2716e0487d65e3ec95
getRepository
public ArtifactRepository getRepository()
{    return null;}
3a2c20e3165e67e6a131ae78f6983fa19e8e2c2f33ad8e48ebf251b6d5463817
setRepository
public void setRepository(ArtifactRepository remoteRepository)
{}
184de2f88903e3da9285a44905c99fe0e7d8f5c54ea214299028bae0f2add46c
merge
public void merge(File current, File result) throws RepositoryException
{    try {        if (current.exists()) {            FileUtils.copyFile(current, result);        }        ArtifactRepository localRepo = new MetadataRepository(result);        metadata.storeInLocalRepository(localRepo, localRepo);        merged = true;    } catch (Exception e) {        throw new RepositoryException(e.getMessage(), e);    }}
cd82e61fe0a6cb4b8594ffc5700d7e4b1f51b3fa1e65ec7cedcc8d03a93a2f5f
isMerged
public boolean isMerged()
{    return merged;}
9590314d7a6edd0118345714cc714a8e73448e57e702bb4c6893b363f509d64d
getGroupId
public String getGroupId()
{    return emptify(metadata.getGroupId());}
1e5191dc99d9314f2df50294bcd8d717af7b8f4311575d36d8d75b27121f1064
getArtifactId
public String getArtifactId()
{    return metadata.storedInGroupDirectory() ? "" : emptify(metadata.getArtifactId());}
446b3b91c7c41085df1dc5542616b89ccd409f6a1d45e4d60d3ca00ac839ecf0
getVersion
public String getVersion()
{    return metadata.storedInArtifactVersionDirectory() ? emptify(metadata.getBaseVersion()) : "";}
624f725337dde847c4a699397a02f1b5558c709c88374adb10e603d835f48c88
getType
public String getType()
{    return metadata.getRemoteFilename();}
52a89937a3108980605e0220ae645a556a82fd2f2e901abb90336d4ea280ff70
emptify
private String emptify(String string)
{    return (string != null) ? string : "";}
ce0460f83bd172eacce98e8169f6d9b1d4ec316943fcf77ee2d8f12bbe7327a0
getFile
public File getFile()
{    return null;}
f6f0a8874bed8f735da12fbf5e8c42a981c7f74a15fc760f84e44d0d1d9cb9d1
setFile
public MetadataBridge setFile(File file)
{    return this;}
d09928812d53b8e1a0690014b798570240ad8d62451844faa13841636ba63f2b
getNature
public Nature getNature()
{    if (metadata instanceof RepositoryMetadata) {        switch(((RepositoryMetadata) metadata).getNature()) {            case RepositoryMetadata.RELEASE_OR_SNAPSHOT:                return Nature.RELEASE_OR_SNAPSHOT;            case RepositoryMetadata.SNAPSHOT:                return Nature.SNAPSHOT;            default:                return Nature.RELEASE;        }    } else {        return Nature.RELEASE;    }}
2d65e12184bdd23ad5df14852e274b71e6796ed83668169853faa0f3d1fdce62
getProperties
public Map<String, String> getProperties()
{    return Collections.emptyMap();}
35c593a7053c1150b236b8ab82885607c3dac5bb6390c531660b210146ccec5b
setProperties
public Metadata setProperties(Map<String, String> properties)
{    return this;}
3d255fad7e1640f914328be877db7f64afb0c48ada31dcd44a5404895e01e539
getBasedir
public String getBasedir()
{    return metadataFile.getParent();}
2bf3ce12ca84872494a2865c7a246067b1efd12dc3403ae1a3b69eb89fda872e
pathOfLocalRepositoryMetadata
public String pathOfLocalRepositoryMetadata(ArtifactMetadata metadata, ArtifactRepository repository)
{    return metadataFile.getName();}
b9b36a546cb09fb3bcea53b98011b56800b8b2d23a076b11abef74ae51f0ebc4
cloneMetadata
public static Metadata cloneMetadata(Metadata src)
{    if (src == null) {        return null;    }    return src.clone();}
aea943cbaf8dc855792e6e2de7f6a7341ed98e92852166fb77b4cc44da614bff
storedInGroupDirectory
public boolean storedInGroupDirectory()
{    return false;}
a566aae8ebe271cc85083f8936c9f756e314dec79de7b7324b49bc9aca8bc3e6
storedInArtifactVersionDirectory
public boolean storedInArtifactVersionDirectory()
{    return true;}
9590314d7a6edd0118345714cc714a8e73448e57e702bb4c6893b363f509d64d
getGroupId
public String getGroupId()
{    return artifact.getGroupId();}
1e5191dc99d9314f2df50294bcd8d717af7b8f4311575d36d8d75b27121f1064
getArtifactId
public String getArtifactId()
{    return artifact.getArtifactId();}
2127b25546d419ff53a6da73c9acb361090188bd943b368d5e79d3f5d5595571
getBaseVersion
public String getBaseVersion()
{    return artifact.getBaseVersion();}
b2585874b87865eace30c330168a04230bae89eeda3d2fe20bf9bf198ae6751e
getKey
public Object getKey()
{    return "snapshot " + artifact.getGroupId() + ":" + artifact.getArtifactId() + ":" + artifact.getBaseVersion();}
2ade99e89c0802b58f3776f3f0e6d2be8b4db4b2629b011476786812f36d732e
isSnapshot
public boolean isSnapshot()
{    return artifact.isSnapshot();}
3cbbe47b1ad336a16cce0b0b4862f773607af011ff584dce9f2e75aff31065b5
getNature
public int getNature()
{    return isSnapshot() ? SNAPSHOT : RELEASE;}
2173adbe55779ccb687142434f49e47b69ce1c4fc751fc2716e0487d65e3ec95
getRepository
public ArtifactRepository getRepository()
{    return artifact.getRepository();}
3a2c20e3165e67e6a131ae78f6983fa19e8e2c2f33ad8e48ebf251b6d5463817
setRepository
public void setRepository(ArtifactRepository remoteRepository)
{    artifact.setRepository(remoteRepository);}
24a17e2e18dc446d0de35550a7526b8e654a33c958c7ef08ceb70365c1666e4a
testArtifact
public void testArtifact(Artifact node)
{}
1bfb838cc74e8a15ef0b60c4f9f18f51fd4411c9d0406befa68f62383bd279d1
startProcessChildren
public void startProcessChildren(Artifact artifact)
{    indent += "  ";}
eb85b9a4729c117cdc5bd3fec6456a961cdaa6d6836d4f9491919650e1eb8a5a
endProcessChildren
public void endProcessChildren(Artifact artifact)
{    indent = indent.substring(2);}
7876ebac63a938a6fc7413ab09f4cadeb53ea0e77ac29d4892ab8b04d8113063
includeArtifact
public void includeArtifact(Artifact artifact)
{    logger.debug(indent + artifact + " (selected for " + artifact.getScope() + ")");}
d38b5073610d7dfd0257190f620b88741002f8526f9df0615f6539cb2c08ad66
omitForNearer
public void omitForNearer(Artifact omitted, Artifact kept)
{    String omittedVersion = omitted.getVersion();    String keptVersion = kept.getVersion();    if (!Objects.equals(omittedVersion, keptVersion)) {        logger.debug(indent + omitted + " (removed - nearer found: " + keptVersion + ")");    }}
49dfdcc0b13bf2587f29de668464882913885d847b6333a1ac27adb24b4ca7d3
omitForCycle
public void omitForCycle(Artifact omitted)
{    logger.debug(indent + omitted + " (removed - causes a cycle in the graph)");}
bef504d7dfb633b305886b4d9408d6daafe961dcaef598d16cb2ce9a7b4f3603
updateScopeCurrentPom
public void updateScopeCurrentPom(Artifact artifact, String ignoredScope)
{    logger.debug(indent + artifact + " (not setting artifactScope to: " + ignoredScope + "; local artifactScope " + artifact.getScope() + " wins)");        if (!ignoredArtifacts.contains(artifact)) {        logger.warn("\n\tArtifact " + artifact + " retains local artifactScope '" + artifact.getScope() + "' overriding broader artifactScope '" + ignoredScope + "'\n" + "\tgiven by a dependency. If this is not intended, modify or remove the local artifactScope.\n");        ignoredArtifacts.add(artifact);    }}
a451e5e506c7800893bedad3c0897c293d90eed40303c556bf9928ce0d5b4a6e
updateScope
public void updateScope(Artifact artifact, String scope)
{    logger.debug(indent + artifact + " (setting artifactScope to: " + scope + ")");}
365fab98fcb5cfd28a24fec3fab813ce074b9f621de6923eacd61a537aaa3015
selectVersionFromRange
public void selectVersionFromRange(Artifact artifact)
{    logger.debug(indent + artifact + " (setting version to: " + artifact.getVersion() + " from range: " + artifact.getVersionRange() + ")");}
431712019dec206cad0dd3956f8ab3540ff900215cb48565bcb20a13196da653
restrictRange
public void restrictRange(Artifact artifact, Artifact replacement, VersionRange newRange)
{    logger.debug(indent + artifact + " (range restricted from: " + artifact.getVersionRange() + " and: " + replacement.getVersionRange() + " to: " + newRange + " )");}
9dd3c322e4c04988386abeac1ca259b37e28684e86474ed3204b61895eae6a49
manageArtifact
public void manageArtifact(Artifact artifact, Artifact replacement)
{    String msg = indent + artifact;    msg += " (";    if (replacement.getVersion() != null) {        msg += "applying version: " + replacement.getVersion() + ";";    }    if (replacement.getScope() != null) {        msg += "applying artifactScope: " + replacement.getScope();    }    msg += ")";    logger.debug(msg);}
f4c6a30ab2126ccca86f3d89de10a0cec7cd9fe85d7a5352cc1a3412b08968d8
manageArtifactVersion
public void manageArtifactVersion(Artifact artifact, Artifact replacement)
{        if (!replacement.getVersion().equals(artifact.getVersion())) {        String msg = indent + artifact + " (applying version: " + replacement.getVersion() + ")";        logger.debug(msg);    }}
5ef6b7fe45ddc02c658c5c0fd715c0c58c714e69284bb0205bd12c9e224362bb
manageArtifactScope
public void manageArtifactScope(Artifact artifact, Artifact replacement)
{        if (!replacement.getScope().equals(artifact.getScope())) {        String msg = indent + artifact + " (applying artifactScope: " + replacement.getScope() + ")";        logger.debug(msg);    }}
382e8391b58e34f73edce1237b4197da30756ec0d63341875c9e780996e86c6e
manageArtifactSystemPath
public void manageArtifactSystemPath(Artifact artifact, Artifact replacement)
{        if (!replacement.getScope().equals(artifact.getScope())) {        String msg = indent + artifact + " (applying system path: " + replacement.getFile() + ")";        logger.debug(msg);    }}
ad84c13a4b48a71ac9cc53c212690071850fba3a6bebe8ae99378f76de235551
execute
public void execute(Runnable command)
{    command.run();}
b2e6a97d1c0f4ff2460b4c507815fbcf5044dfe532fa3af15de10422d0796746
getSession
private RepositorySystemSession getSession(ArtifactRepository localRepository)
{    return LegacyLocalRepositoryManager.overlay(localRepository, legacySupport.getRepositorySession(), repoSystem);}
8fd161978383ee8e046465c112f34bbcca33c65f57170c50e6fde05bdc568960
injectSession1
private void injectSession1(RepositoryRequest request, MavenSession session)
{    if (session != null) {        request.setOffline(session.isOffline());        request.setForceUpdate(session.getRequest().isUpdateSnapshots());    }}
dd390198ff913e0347611be2c3f75be85b825095600fa7f0c877fdf6143922ed
injectSession2
private void injectSession2(ArtifactResolutionRequest request, MavenSession session)
{    injectSession1(request, session);    if (session != null) {        request.setServers(session.getRequest().getServers());        request.setMirrors(session.getRequest().getMirrors());        request.setProxies(session.getRequest().getProxies());    }}
801f9d4193c51f15f004e8670a3e27ca224ee338d698a79149e733cbf22b4016
resolve
public void resolve(Artifact artifact, List<ArtifactRepository> remoteRepositories, ArtifactRepository localRepository, TransferListener resolutionListener) throws ArtifactResolutionException, ArtifactNotFoundException
{    resolve(artifact, remoteRepositories, getSession(localRepository));}
b684117c3351abbb6e2966ed992d6ca9c18743a4cccc98402f579fbb1ca97cef
resolveAlways
public void resolveAlways(Artifact artifact, List<ArtifactRepository> remoteRepositories, ArtifactRepository localRepository) throws ArtifactResolutionException, ArtifactNotFoundException
{    resolve(artifact, remoteRepositories, getSession(localRepository));}
77c0fd8a0e46fea117df82327c8a6e71caf8a9490f66e3c2ad7276ba13c6a6c3
resolve
private void resolve(Artifact artifact, List<ArtifactRepository> remoteRepositories, RepositorySystemSession session) throws ArtifactResolutionException, ArtifactNotFoundException
{    if (artifact == null) {        return;    }    if (Artifact.SCOPE_SYSTEM.equals(artifact.getScope())) {        File systemFile = artifact.getFile();        if (systemFile == null) {            throw new ArtifactNotFoundException("System artifact: " + artifact + " has no file attached", artifact);        }        if (!systemFile.exists()) {            throw new ArtifactNotFoundException("System artifact: " + artifact + " not found in path: " + systemFile, artifact);        }        if (!systemFile.isFile()) {            throw new ArtifactNotFoundException("System artifact: " + artifact + " is not a file: " + systemFile, artifact);        }        artifact.setResolved(true);        return;    }    if (!artifact.isResolved()) {        ArtifactResult result;        try {            ArtifactRequest artifactRequest = new ArtifactRequest();            artifactRequest.setArtifact(RepositoryUtils.toArtifact(artifact));            artifactRequest.setRepositories(RepositoryUtils.toRepos(remoteRepositories));                        LocalRepositoryManager lrm = session.getLocalRepositoryManager();            String path = lrm.getPathForLocalArtifact(artifactRequest.getArtifact());            artifact.setFile(new File(lrm.getRepository().getBasedir(), path));            result = repoSystem.resolveArtifact(session, artifactRequest);        } catch (org.eclipse.aether.resolution.ArtifactResolutionException e) {            if (e.getCause() instanceof org.eclipse.aether.transfer.ArtifactNotFoundException) {                throw new ArtifactNotFoundException(e.getMessage(), artifact, remoteRepositories, e);            } else {                throw new ArtifactResolutionException(e.getMessage(), artifact, remoteRepositories, e);            }        }        artifact.selectVersion(result.getArtifact().getVersion());        artifact.setFile(result.getArtifact().getFile());        artifact.setResolved(true);        if (artifact.isSnapshot()) {            Matcher matcher = Artifact.VERSION_FILE_PATTERN.matcher(artifact.getVersion());            if (matcher.matches()) {                Snapshot snapshot = new Snapshot();                snapshot.setTimestamp(matcher.group(2));                try {                    snapshot.setBuildNumber(Integer.parseInt(matcher.group(3)));                    artifact.addMetadata(new SnapshotArtifactRepositoryMetadata(artifact, snapshot));                } catch (NumberFormatException e) {                    logger.warn("Invalid artifact version " + artifact.getVersion() + ": " + e.getMessage());                }            }        }    }}
ee0cd4659ef411f9e8128754e368835784be8580b48810b624477223f442673c
resolveTransitively
public ArtifactResolutionResult resolveTransitively(Set<Artifact> artifacts, Artifact originatingArtifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories, ArtifactMetadataSource source, ArtifactFilter filter) throws ArtifactResolutionException, ArtifactNotFoundException
{    return resolveTransitively(artifacts, originatingArtifact, Collections.<String, Artifact>emptyMap(), localRepository, remoteRepositories, source, filter);}
bdd6aff7c173620f5baeb796706c3d5b724957f174bf55a520a0976d76c4bf4c
resolveTransitively
public ArtifactResolutionResult resolveTransitively(Set<Artifact> artifacts, Artifact originatingArtifact, Map<String, Artifact> managedVersions, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories, ArtifactMetadataSource source) throws ArtifactResolutionException, ArtifactNotFoundException
{    return resolveTransitively(artifacts, originatingArtifact, managedVersions, localRepository, remoteRepositories, source, null);}
2b0e694884eee1a330778e5eefbd2c17e70a9e40def2be05258705b4bd670f10
resolveTransitively
public ArtifactResolutionResult resolveTransitively(Set<Artifact> artifacts, Artifact originatingArtifact, Map<String, Artifact> managedVersions, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories, ArtifactMetadataSource source, ArtifactFilter filter) throws ArtifactResolutionException, ArtifactNotFoundException
{    return resolveTransitively(artifacts, originatingArtifact, managedVersions, localRepository, remoteRepositories, source, filter, null);}
8c9c74e527ef3e08506dd828053f2a89021d5b387eab0edcc950c86292a3ace6
resolveTransitively
public ArtifactResolutionResult resolveTransitively(Set<Artifact> artifacts, Artifact originatingArtifact, List<ArtifactRepository> remoteRepositories, ArtifactRepository localRepository, ArtifactMetadataSource source) throws ArtifactResolutionException, ArtifactNotFoundException
{    return resolveTransitively(artifacts, originatingArtifact, localRepository, remoteRepositories, source, null);}
bfcaac3779c44c5ed463607b33282f4d3ddd9fe359020a3391650e06347cee86
resolveTransitively
public ArtifactResolutionResult resolveTransitively(Set<Artifact> artifacts, Artifact originatingArtifact, List<ArtifactRepository> remoteRepositories, ArtifactRepository localRepository, ArtifactMetadataSource source, List<ResolutionListener> listeners) throws ArtifactResolutionException, ArtifactNotFoundException
{    return resolveTransitively(artifacts, originatingArtifact, Collections.<String, Artifact>emptyMap(), localRepository, remoteRepositories, source, null, listeners);}
026d1d98c98cdfe29556d6865fe3fa0ace3d484b1be25f5e8fbaaaadfc8e73fc
resolveTransitively
public ArtifactResolutionResult resolveTransitively(Set<Artifact> artifacts, Artifact originatingArtifact, Map<String, Artifact> managedVersions, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories, ArtifactMetadataSource source, ArtifactFilter filter, List<ResolutionListener> listeners) throws ArtifactResolutionException, ArtifactNotFoundException
{    return resolveTransitively(artifacts, originatingArtifact, managedVersions, localRepository, remoteRepositories, source, filter, listeners, null);}
3913e22e87a3a08afe9f4e335b3fbfc5dd5b21d9850eb9752b1d41fc09c44685
resolveTransitively
public ArtifactResolutionResult resolveTransitively(Set<Artifact> artifacts, Artifact originatingArtifact, Map<String, Artifact> managedVersions, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories, ArtifactMetadataSource source, ArtifactFilter filter, List<ResolutionListener> listeners, List<ConflictResolver> conflictResolvers) throws ArtifactResolutionException, ArtifactNotFoundException
{    ArtifactResolutionRequest request = new ArtifactResolutionRequest().setArtifact(originatingArtifact).setResolveRoot(false).setArtifactDependencies(artifacts).setManagedVersionMap(managedVersions).setLocalRepository(localRepository).setRemoteRepositories(remoteRepositories).setCollectionFilter(filter).setListeners(listeners);    injectSession2(request, legacySupport.getSession());    return resolveWithExceptions(request);}
4aa3d9736dc198231992204e6dfab4d5832fcdba1155e15ded47afcb551831f2
resolveWithExceptions
public ArtifactResolutionResult resolveWithExceptions(ArtifactResolutionRequest request) throws ArtifactResolutionException, ArtifactNotFoundException
{    ArtifactResolutionResult result = resolve(request);                resolutionErrorHandler.throwErrors(request, result);    return result;}
41d43ea96fb0228c74136a365645a34edf2ecef7753c54e332fa0c5228305fa5
resolve
public ArtifactResolutionResult resolve(ArtifactResolutionRequest request)
{    Artifact rootArtifact = request.getArtifact();    Set<Artifact> artifacts = request.getArtifactDependencies();    Map<String, Artifact> managedVersions = request.getManagedVersionMap();    List<ResolutionListener> listeners = request.getListeners();    ArtifactFilter collectionFilter = request.getCollectionFilter();    ArtifactFilter resolutionFilter = request.getResolutionFilter();    RepositorySystemSession session = getSession(request.getLocalRepository());        if (source == null) {        try {            source = container.lookup(ArtifactMetadataSource.class);        } catch (ComponentLookupException e) {                }    }    if (listeners == null) {        listeners = new ArrayList<>();        if (logger.isDebugEnabled()) {            listeners.add(new DebugResolutionListener(logger));        }        listeners.add(new WarningResolutionListener(logger));    }    ArtifactResolutionResult result = new ArtifactResolutionResult();    if (request.isResolveRoot()) /* && rootArtifact.getFile() == null */    {        try {            resolve(rootArtifact, request.getRemoteRepositories(), session);        } catch (ArtifactResolutionException e) {            result.addErrorArtifactException(e);            return result;        } catch (ArtifactNotFoundException e) {            result.addMissingArtifact(request.getArtifact());            return result;        }    }    ArtifactResolutionRequest collectionRequest = request;    if (request.isResolveTransitively()) {        MetadataResolutionRequest metadataRequest = new DefaultMetadataResolutionRequest(request);        metadataRequest.setArtifact(rootArtifact);        metadataRequest.setResolveManagedVersions(managedVersions == null);        try {            ResolutionGroup resolutionGroup = source.retrieve(metadataRequest);            if (managedVersions == null) {                managedVersions = resolutionGroup.getManagedVersions();            }            Set<Artifact> directArtifacts = resolutionGroup.getArtifacts();            if (artifacts == null || artifacts.isEmpty()) {                artifacts = directArtifacts;            } else {                List<Artifact> allArtifacts = new ArrayList<>();                allArtifacts.addAll(artifacts);                allArtifacts.addAll(directArtifacts);                Map<String, Artifact> mergedArtifacts = new LinkedHashMap<>();                for (Artifact artifact : allArtifacts) {                    String conflictId = artifact.getDependencyConflictId();                    if (!mergedArtifacts.containsKey(conflictId)) {                        mergedArtifacts.put(conflictId, artifact);                    }                }                artifacts = new LinkedHashSet<>(mergedArtifacts.values());            }            collectionRequest = new ArtifactResolutionRequest(request);            collectionRequest.setServers(request.getServers());            collectionRequest.setMirrors(request.getMirrors());            collectionRequest.setProxies(request.getProxies());            collectionRequest.setRemoteRepositories(resolutionGroup.getResolutionRepositories());        } catch (ArtifactMetadataRetrievalException e) {            ArtifactResolutionException are = new ArtifactResolutionException("Unable to get dependency information for " + rootArtifact.getId() + ": " + e.getMessage(), rootArtifact, metadataRequest.getRemoteRepositories(), e);            result.addMetadataResolutionException(are);            return result;        }    }    if (artifacts == null || artifacts.isEmpty()) {        if (request.isResolveRoot()) {            result.addArtifact(rootArtifact);        }        return result;    }        result = artifactCollector.collect(artifacts, rootArtifact, managedVersions, collectionRequest, source, collectionFilter, listeners, null);    if (result.hasMetadataResolutionExceptions() || result.hasVersionRangeViolations() || result.hasCircularDependencyExceptions()) {        logger.info("Failure detected.");        return result;    }    if (result.getArtifactResolutionNodes() != null) {        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();        CountDownLatch latch = new CountDownLatch(result.getArtifactResolutionNodes().size());        for (ResolutionNode node : result.getArtifactResolutionNodes()) {            Artifact artifact = node.getArtifact();            if (resolutionFilter == null || resolutionFilter.include(artifact)) {                executor.execute(new ResolveTask(classLoader, latch, artifact, session, node.getRemoteRepositories(), result));            } else {                latch.countDown();            }        }        try {            latch.await();        } catch (InterruptedException e) {            result.addErrorArtifactException(new ArtifactResolutionException("Resolution interrupted", rootArtifact, e));        }    }        if (request.isResolveRoot()) {                Set<Artifact> allArtifacts = new LinkedHashSet<>();        allArtifacts.add(rootArtifact);        allArtifacts.addAll(result.getArtifacts());        result.setArtifacts(allArtifacts);    }    return result;}
c75277d1203fea07ff721fd230d3a2bcb0e1c3cee1e03d31a1561d37be3ba7c7
resolve
public void resolve(Artifact artifact, List<ArtifactRepository> remoteRepositories, ArtifactRepository localRepository) throws ArtifactResolutionException, ArtifactNotFoundException
{    resolve(artifact, remoteRepositories, localRepository, null);}
02166686c9ffef8abcca97b0bc3e38cb95c97860d78686958b46127a2ecadb18
newThread
public Thread newThread(Runnable r)
{    Thread newThread = new Thread(GROUP, r, "resolver-" + THREAD_NUMBER.getAndIncrement());    newThread.setDaemon(true);    newThread.setContextClassLoader(null);    return newThread;}
4560d80c2474cc2770be19fbc06c60741920c59992e6b13524f8a5b688ec285a
run
public void run()
{    ClassLoader old = Thread.currentThread().getContextClassLoader();    try {        Thread.currentThread().setContextClassLoader(classLoader);        resolve(artifact, remoteRepositories, session);    } catch (ArtifactNotFoundException anfe) {        synchronized (result) {            result.addMissingArtifact(artifact);        }    } catch (ArtifactResolutionException e) {        synchronized (result) {            result.addErrorArtifactException(e);        }    } finally {        latch.countDown();        Thread.currentThread().setContextClassLoader(old);    }}
b9fb45dfe6e038cbb203f12831a900a458fc92323c8db50edb08712565a288f2
dispose
public void dispose()
{    if (executor instanceof ExecutorService) {        ((ExecutorService) executor).shutdownNow();    }}
d3ed17b58984fbee642a483f77d32e868d012e4887f1ca98f7f5abc5b7c7951f
include
public boolean include(Artifact artifact)
{    return !toInvert.include(artifact);}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    int hash = 17;    hash = hash * 31 + toInvert.hashCode();    return hash;}
4afeb0868b55bdd8e18a00a3cb43d83e0714378d1c4bb36f0936daefc060e2e8
equals
public boolean equals(Object obj)
{    if (this == obj) {        return true;    }    if (!(obj instanceof InversionArtifactFilter)) {        return false;    }    InversionArtifactFilter other = (InversionArtifactFilter) obj;    return toInvert.equals(other.toInvert);}
d3ed17b58984fbee642a483f77d32e868d012e4887f1ca98f7f5abc5b7c7951f
include
public boolean include(Artifact artifact)
{    for (ArtifactFilter filter : filters) {        if (filter.include(artifact)) {            return true;        }    }    return false;}
f4d53868c93437ac4ccee2de505190bda6d82dd762d36a94179d18495be25643
add
public void add(ArtifactFilter artifactFilter)
{    filters.add(artifactFilter);}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    int hash = 17;    hash = hash * 31 + filters.hashCode();    return hash;}
4afeb0868b55bdd8e18a00a3cb43d83e0714378d1c4bb36f0936daefc060e2e8
equals
public boolean equals(Object obj)
{    if (this == obj) {        return true;    }    if (!(obj instanceof OrArtifactFilter)) {        return false;    }    OrArtifactFilter other = (OrArtifactFilter) obj;    return filters.equals(other.filters);}
d3ed17b58984fbee642a483f77d32e868d012e4887f1ca98f7f5abc5b7c7951f
include
public boolean include(Artifact artifact)
{    return type.equals(artifact.getType());}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    int hash = 17;    hash = hash * 31 + type.hashCode();    return hash;}
4afeb0868b55bdd8e18a00a3cb43d83e0714378d1c4bb36f0936daefc060e2e8
equals
public boolean equals(Object obj)
{    if (this == obj) {        return true;    }    if (!(obj instanceof TypeArtifactFilter)) {        return false;    }    TypeArtifactFilter other = (TypeArtifactFilter) obj;    return type.equals(other.type);}
c147a7b6feca62852b6d175286f9a021159aeded96c8aa578d2422b126b0a64b
getOriginatingArtifact
public Artifact getOriginatingArtifact()
{    return originatingArtifact;}
a0643fa51f5c50a137f4c462d6e6ca72900bdcb1f098a11391a7572bc24da55e
getArtifacts
public List<Artifact> getArtifacts()
{    return artifacts;}
4fd44e1a9f23aaf113060017b1d8f6d3cf8794c129edf477e6b2ddacdfe7400d
getRemoteRepositories
public List<ArtifactRepository> getRemoteRepositories()
{    return remoteRepositories;}
24a17e2e18dc446d0de35550a7526b8e654a33c958c7ef08ceb70365c1666e4a
testArtifact
public void testArtifact(Artifact node)
{}
1bfb838cc74e8a15ef0b60c4f9f18f51fd4411c9d0406befa68f62383bd279d1
startProcessChildren
public void startProcessChildren(Artifact artifact)
{}
eb85b9a4729c117cdc5bd3fec6456a961cdaa6d6836d4f9491919650e1eb8a5a
endProcessChildren
public void endProcessChildren(Artifact artifact)
{}
7876ebac63a938a6fc7413ab09f4cadeb53ea0e77ac29d4892ab8b04d8113063
includeArtifact
public void includeArtifact(Artifact artifact)
{}
d38b5073610d7dfd0257190f620b88741002f8526f9df0615f6539cb2c08ad66
omitForNearer
public void omitForNearer(Artifact omitted, Artifact kept)
{}
49dfdcc0b13bf2587f29de668464882913885d847b6333a1ac27adb24b4ca7d3
omitForCycle
public void omitForCycle(Artifact omitted)
{}
dfab4bd0ccc2966e98c30048e93a73ea646dc042bce4280e9f751a6cfa22d587
updateScopeCurrentPom
public void updateScopeCurrentPom(Artifact artifact, String scope)
{}
a451e5e506c7800893bedad3c0897c293d90eed40303c556bf9928ce0d5b4a6e
updateScope
public void updateScope(Artifact artifact, String scope)
{}
9dd3c322e4c04988386abeac1ca259b37e28684e86474ed3204b61895eae6a49
manageArtifact
public void manageArtifact(Artifact artifact, Artifact replacement)
{}
365fab98fcb5cfd28a24fec3fab813ce074b9f621de6923eacd61a537aaa3015
selectVersionFromRange
public void selectVersionFromRange(Artifact artifact)
{}
431712019dec206cad0dd3956f8ab3540ff900215cb48565bcb20a13196da653
restrictRange
public void restrictRange(Artifact artifact, Artifact replacement, VersionRange newRange)
{}
7bc3312d02483f50578e86848c31c71a6ec92d57cc6a617b175bd995b97f6f52
getLayoutId
public String getLayoutId()
{    return layoutId;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    StringBuilder buffer = new StringBuilder("ManagedVersionMap (" + size() + " entries)\n");    Iterator<String> iter = keySet().iterator();    while (iter.hasNext()) {        String key = iter.next();        buffer.append(key).append('=').append(get(key));        if (iter.hasNext()) {            buffer.append('\n');        }    }    return buffer.toString();}
a09a21ad49b81d7e788eb10ebfcbb43676bdff0c66cd7d7683334c08493a525e
getApplicationVersion
public ArtifactVersion getApplicationVersion()
{    return applicationVersion;}
797be51949a881dc02a452eeae9db530546062bc2f7fb956c160d806ef9eaf36
initialize
public void initialize() throws InitializationException
{    String mavenVersion = rtInfo.getMavenVersion();    if (StringUtils.isEmpty(mavenVersion)) {        throw new InitializationException("Unable to read Maven version from maven-core");    }    applicationVersion = new DefaultArtifactVersion(mavenVersion);}
b4f22378bcb56baa6970415c7296e8af152efcac2d96cb57e182fbec2ae21e4b
canDetermineActivation
public boolean canDetermineActivation(Profile profile)
{    return canDetectActivation(profile);}
4bddf7d4fe84806a094122177556cdf0f7b74263cc99a9ecf93e2e200946eebd
canDetectActivation
protected boolean canDetectActivation(Profile profile)
{    return profile.getActivation() != null && profile.getActivation().getFile() != null;}
53e8f12e964c612e6e276cb9dede730208b008318c01b3c3ce1a167ed82569a7
isActive
public boolean isActive(Profile profile)
{    Activation activation = profile.getActivation();    ActivationFile actFile = activation.getFile();    if (actFile != null) {                String fileString = actFile.getExists();        RegexBasedInterpolator interpolator = new RegexBasedInterpolator();        try {            interpolator.addValueSource(new EnvarBasedValueSource());        } catch (IOException e) {                }        interpolator.addValueSource(new MapBasedValueSource(System.getProperties()));        try {            if (StringUtils.isNotEmpty(fileString)) {                fileString = StringUtils.replace(interpolator.interpolate(fileString, ""), "\\", "/");                return FileUtils.fileExists(fileString);            }                        fileString = actFile.getMissing();            if (StringUtils.isNotEmpty(fileString)) {                fileString = StringUtils.replace(interpolator.interpolate(fileString, ""), "\\", "/");                return !FileUtils.fileExists(fileString);            }        } catch (InterpolationException e) {            if (logger.isDebugEnabled()) {                logger.debug("Failed to interpolate missing file location for profile activator: " + fileString, e);            } else {                logger.warn("Failed to interpolate missing file location for profile activator: " + fileString + ". Run in debug mode (-X) for more information.");            }        }    }    return false;}
2bac77a4d9d9457c55f060981da6f1e1252d2bd0cb2749af52dee9438d4f84c5
enableLogging
public void enableLogging(Logger logger)
{    this.logger = logger;}
a3c572a256cf9fd9c4914adbe5b1ffb6f2b01614ddb5d2adf71e7b316725dae4
isActive
public boolean isActive(Profile profile) throws ProfileActivationException
{    Activation activation = profile.getActivation();    String jdk = activation.getJdk();        if (jdk.startsWith("[") || jdk.startsWith("(")) {        try {            return matchJdkVersionRange(jdk);        } catch (InvalidVersionSpecificationException e) {            throw new ProfileActivationException("Invalid JDK version in profile '" + profile.getId() + "': " + e.getMessage());        }    }    boolean reverse = false;    if (jdk.startsWith("!")) {        reverse = true;        jdk = jdk.substring(1);    }    if (getJdkVersion().startsWith(jdk)) {        return !reverse;    } else {        return reverse;    }}
b5c138188ba2c5a877f353814d42dce8fd45aa901a35276b2864a544066c4673
matchJdkVersionRange
private boolean matchJdkVersionRange(String jdk) throws InvalidVersionSpecificationException
{    VersionRange jdkVersionRange = VersionRange.createFromVersionSpec(convertJdkToMavenVersion(jdk));    DefaultArtifactVersion jdkVersion = new DefaultArtifactVersion(convertJdkToMavenVersion(getJdkVersion()));    return jdkVersionRange.containsVersion(jdkVersion);}
4c31fe8ca0620ebcd322dec1046b0a452a940a9bb1b26e11a1be1674b4736a97
convertJdkToMavenVersion
private String convertJdkToMavenVersion(String jdk)
{    return jdk.replaceAll("_", "-");}
ee0ed43dc939ece3d5fbe998ed4798415a98fa5ecdfd07396417e7bcaae27e2b
getJdkVersion
protected String getJdkVersion()
{    return JDK_VERSION;}
4bddf7d4fe84806a094122177556cdf0f7b74263cc99a9ecf93e2e200946eebd
canDetectActivation
protected boolean canDetectActivation(Profile profile)
{    return profile.getActivation() != null && StringUtils.isNotEmpty(profile.getActivation().getJdk());}
b4f22378bcb56baa6970415c7296e8af152efcac2d96cb57e182fbec2ae21e4b
canDetermineActivation
public boolean canDetermineActivation(Profile profile)
{    Activation activation = profile.getActivation();    return activation != null && activation.getOs() != null;}
53e8f12e964c612e6e276cb9dede730208b008318c01b3c3ce1a167ed82569a7
isActive
public boolean isActive(Profile profile)
{    Activation activation = profile.getActivation();    ActivationOS os = activation.getOs();    boolean result = ensureAtLeastOneNonNull(os);    if (result && os.getFamily() != null) {        result = determineFamilyMatch(os.getFamily());    }    if (result && os.getName() != null) {        result = determineNameMatch(os.getName());    }    if (result && os.getArch() != null) {        result = determineArchMatch(os.getArch());    }    if (result && os.getVersion() != null) {        result = determineVersionMatch(os.getVersion());    }    return result;}
d1c7cee862db36bf551aba658ca94cd67331133e0c78360344bf560af8130f3a
ensureAtLeastOneNonNull
private boolean ensureAtLeastOneNonNull(ActivationOS os)
{    return os.getArch() != null || os.getFamily() != null || os.getName() != null || os.getVersion() != null;}
1959be5500c1000baba7d288577eba0c4fefd66c6557f55ef129f50780f3e21c
determineVersionMatch
private boolean determineVersionMatch(String version)
{    String test = version;    boolean reverse = false;    if (test.startsWith("!")) {        reverse = true;        test = test.substring(1);    }    boolean result = Os.isVersion(test);    if (reverse) {        return !result;    } else {        return result;    }}
bac339c93db97d069212240aea5685c58a0a021e397883c8058e7195761c2d61
determineArchMatch
private boolean determineArchMatch(String arch)
{    String test = arch;    boolean reverse = false;    if (test.startsWith("!")) {        reverse = true;        test = test.substring(1);    }    boolean result = Os.isArch(test);    if (reverse) {        return !result;    } else {        return result;    }}
193e2ccb2b3e2d60b72344977d322cf023c1d60020022dc300e4c1abe62ebc14
determineNameMatch
private boolean determineNameMatch(String name)
{    String test = name;    boolean reverse = false;    if (test.startsWith("!")) {        reverse = true;        test = test.substring(1);    }    boolean result = Os.isName(test);    if (reverse) {        return !result;    } else {        return result;    }}
07bbc7203dc650a9a6e155ca170ad907e6cbd89f0b59fa7872dd3364fd936ee1
determineFamilyMatch
private boolean determineFamilyMatch(String family)
{    String test = family;    boolean reverse = false;    if (test.startsWith("!")) {        reverse = true;        test = test.substring(1);    }    boolean result = Os.isFamily(test);    if (reverse) {        return !result;    } else {        return result;    }}
9c4e05b840243f9d9865dc8306abec042bc35a07a2920376a4b9b147b305bd7d
contextualize
public void contextualize(Context context) throws ContextException
{    properties = (Properties) context.get("SystemProperties");}
4bddf7d4fe84806a094122177556cdf0f7b74263cc99a9ecf93e2e200946eebd
canDetectActivation
protected boolean canDetectActivation(Profile profile)
{    return profile.getActivation() != null && profile.getActivation().getProperty() != null;}
a3c572a256cf9fd9c4914adbe5b1ffb6f2b01614ddb5d2adf71e7b316725dae4
isActive
public boolean isActive(Profile profile) throws ProfileActivationException
{    Activation activation = profile.getActivation();    ActivationProperty property = activation.getProperty();    if (property != null) {        String name = property.getName();        boolean reverseName = false;        if (name == null) {            throw new ProfileActivationException("The property name is required to activate the profile '" + profile.getId() + "'");        }        if (name.startsWith("!")) {            reverseName = true;            name = name.substring(1);        }        String sysValue = properties.getProperty(name);        String propValue = property.getValue();        if (StringUtils.isNotEmpty(propValue)) {            boolean reverseValue = false;            if (propValue.startsWith("!")) {                reverseValue = true;                propValue = propValue.substring(1);            }                        boolean result = propValue.equals(sysValue);            if (reverseValue) {                return !result;            } else {                return result;            }        } else {            boolean result = StringUtils.isNotEmpty(sysValue);            if (reverseName) {                return !result;            } else {                return result;            }        }    }    return false;}
b0330b8f2a680f09cb2ea382ee1da0a6bdcf2282f899a8fb53b3780e54ec9a80
buildProfiles
public ProfilesRoot buildProfiles(File basedir) throws IOException, XmlPullParserException
{    File profilesXml = new File(basedir, PROFILES_XML_FILE);    ProfilesRoot profilesRoot = null;    if (profilesXml.exists()) {        ProfilesXpp3Reader reader = new ProfilesXpp3Reader();        try (Reader profileReader = ReaderFactory.newXmlReader(profilesXml);            StringWriter sWriter = new StringWriter()) {            IOUtil.copy(profileReader, sWriter);            String rawInput = sWriter.toString();            try {                RegexBasedInterpolator interpolator = new RegexBasedInterpolator();                interpolator.addValueSource(new EnvarBasedValueSource());                rawInput = interpolator.interpolate(rawInput, "settings");            } catch (Exception e) {                getLogger().warn("Failed to initialize environment variable resolver. Skipping environment " + "substitution in " + PROFILES_XML_FILE + ".");                getLogger().debug("Failed to initialize envar resolver. Skipping resolution.", e);            }            StringReader sReader = new StringReader(rawInput);            profilesRoot = reader.read(sReader);        }    }    return profilesRoot;}
c121780539a703bef0f40b5d31e57399ae212d6817ac2d3cc829667c6a00aedd
getRequestProperties
public Properties getRequestProperties()
{    return requestProperties;}
174f11d33a5a08f0df8f407e4fdc3e6a6513f456c3116148612fcd21769c1837
getProfilesById
public Map<String, Profile> getProfilesById()
{    return profilesById;}
4535e6c2132418aeb6de5617c3d87216917f9e9b5131e0983dabeb57eb89e3cd
addProfile
public void addProfile(Profile profile)
{    String profileId = profile.getId();    Profile existing = profilesById.get(profileId);    if (existing != null) {        logger.warn("Overriding profile: \'" + profileId + "\' (source: " + existing.getSource() + ") with new instance from source: " + profile.getSource());    }    profilesById.put(profile.getId(), profile);    Activation activation = profile.getActivation();    if (activation != null && activation.isActiveByDefault()) {        activateAsDefault(profileId);    }}
ac56eac02c2f5f2697e4894e1f61b70c7bd434b24f55f2e051ef7cde2a094192
explicitlyActivate
public void explicitlyActivate(String profileId)
{    if (!activatedIds.contains(profileId)) {        logger.debug("Profile with id: \'" + profileId + "\' has been explicitly activated.");        activatedIds.add(profileId);    }}
805a888dc5edaa230fe5f94b5a03cb4d3ece3bdf02155be5358afd5bb695530b
explicitlyActivate
public void explicitlyActivate(List<String> profileIds)
{    for (String profileId1 : profileIds) {        explicitlyActivate(profileId1);    }}
a7aace72ac42146711a448dac8cd7d6acf045006ea1fafd85ae546ca51382170
explicitlyDeactivate
public void explicitlyDeactivate(String profileId)
{    if (!deactivatedIds.contains(profileId)) {        logger.debug("Profile with id: \'" + profileId + "\' has been explicitly deactivated.");        deactivatedIds.add(profileId);    }}
dbbfee8f3636bcdd9eacda4a579aa781186db86e0acbe4c02d4ff954cd075713
explicitlyDeactivate
public void explicitlyDeactivate(List<String> profileIds)
{    for (String profileId1 : profileIds) {        explicitlyDeactivate(profileId1);    }}
7b107a73e5fd8f268fa5225a28d9f15e9787f3230dcb4ff8e3d1269e353884da
getActiveProfiles
public List getActiveProfiles() throws ProfileActivationException
{    DefaultProfileActivationContext context = new DefaultProfileActivationContext();    context.setActiveProfileIds(activatedIds);    context.setInactiveProfileIds(deactivatedIds);    context.setSystemProperties(System.getProperties());    context.setUserProperties(requestProperties);    final List<ProfileActivationException> errors = new ArrayList<>();    List<Profile> profiles = profileSelector.getActiveProfiles(profilesById.values(), context, new ModelProblemCollector() {        public void add(ModelProblemCollectorRequest req) {            if (!ModelProblem.Severity.WARNING.equals(req.getSeverity())) {                errors.add(new ProfileActivationException(req.getMessage(), req.getException()));            }        }    });    if (!errors.isEmpty()) {        throw errors.get(0);    }    return profiles;}
db24eb665ffaac0d3626cacc0bf9a02aa9918f27efe6dce02ae97c60cd1bc733
add
public void add(ModelProblemCollectorRequest req)
{    if (!ModelProblem.Severity.WARNING.equals(req.getSeverity())) {        errors.add(new ProfileActivationException(req.getMessage(), req.getException()));    }}
93a61d0fc73b2d641208e26045ed8c4a778396ea60f05246953314da64ef428b
addProfiles
public void addProfiles(List<Profile> profiles)
{    for (Profile profile1 : profiles) {        addProfile(profile1);    }}
bc4da1d06955b2b9184bcee7297cad01dbcf98dcc335d773b827c5a5a0e0d3d6
activateAsDefault
public void activateAsDefault(String profileId)
{    if (!defaultIds.contains(profileId)) {        defaultIds.add(profileId);    }}
d38c9946d2ec7204897e5d738695a966cfc9914c8264f1b777dd6eaf504a46a1
getExplicitlyActivatedIds
public List<String> getExplicitlyActivatedIds()
{    return activatedIds;}
06b94782ed18809383a73f86684802574dd1717f2b3d32f8c347ef70cf05a9ee
getExplicitlyDeactivatedIds
public List<String> getExplicitlyDeactivatedIds()
{    return deactivatedIds;}
63988cf153a004155d8a04dc1fbcb4ac8be377ecf396257aaad1727890812e8f
getIdsActivatedByDefault
public List getIdsActivatedByDefault()
{    return defaultIds;}
bc0c8745d4556ee4064a968f4f4a2cd94082a359fa273b8012c842af47dd54bd
convertFromProfileXmlProfile
public static Profile convertFromProfileXmlProfile(org.apache.maven.profiles.Profile profileXmlProfile)
{    Profile profile = new Profile();    profile.setId(profileXmlProfile.getId());    profile.setSource("profiles.xml");    org.apache.maven.profiles.Activation profileActivation = profileXmlProfile.getActivation();    if (profileActivation != null) {        Activation activation = new Activation();        activation.setActiveByDefault(profileActivation.isActiveByDefault());        activation.setJdk(profileActivation.getJdk());        org.apache.maven.profiles.ActivationProperty profileProp = profileActivation.getProperty();        if (profileProp != null) {            ActivationProperty prop = new ActivationProperty();            prop.setName(profileProp.getName());            prop.setValue(profileProp.getValue());            activation.setProperty(prop);        }        ActivationOS profileOs = profileActivation.getOs();        if (profileOs != null) {            org.apache.maven.model.ActivationOS os = new org.apache.maven.model.ActivationOS();            os.setArch(profileOs.getArch());            os.setFamily(profileOs.getFamily());            os.setName(profileOs.getName());            os.setVersion(profileOs.getVersion());            activation.setOs(os);        }        org.apache.maven.profiles.ActivationFile profileFile = profileActivation.getFile();        if (profileFile != null) {            ActivationFile file = new ActivationFile();            file.setExists(profileFile.getExists());            file.setMissing(profileFile.getMissing());            activation.setFile(file);        }        profile.setActivation(activation);    }    profile.setProperties(profileXmlProfile.getProperties());    List repos = profileXmlProfile.getRepositories();    if (repos != null) {        for (Object repo : repos) {            profile.addRepository(convertFromProfileXmlRepository((org.apache.maven.profiles.Repository) repo));        }    }    List pluginRepos = profileXmlProfile.getPluginRepositories();    if (pluginRepos != null) {        for (Object pluginRepo : pluginRepos) {            profile.addPluginRepository(convertFromProfileXmlRepository((org.apache.maven.profiles.Repository) pluginRepo));        }    }    return profile;}
f61a1049374537bf7d34645068828da4eef0583ff97697a97a38365fca64e83d
convertFromProfileXmlRepository
private static Repository convertFromProfileXmlRepository(org.apache.maven.profiles.Repository profileXmlRepo)
{    Repository repo = new Repository();    repo.setId(profileXmlRepo.getId());    repo.setLayout(profileXmlRepo.getLayout());    repo.setName(profileXmlRepo.getName());    repo.setUrl(profileXmlRepo.getUrl());    if (profileXmlRepo.getSnapshots() != null) {        repo.setSnapshots(convertRepositoryPolicy(profileXmlRepo.getSnapshots()));    }    if (profileXmlRepo.getReleases() != null) {        repo.setReleases(convertRepositoryPolicy(profileXmlRepo.getReleases()));    }    return repo;}
5ea798a401ea9842fe9858386a1948302167ee8790f3ac43e83d4b5b9a00add1
convertRepositoryPolicy
private static org.apache.maven.model.RepositoryPolicy convertRepositoryPolicy(RepositoryPolicy profileXmlRepo)
{    org.apache.maven.model.RepositoryPolicy policy = new org.apache.maven.model.RepositoryPolicy();    policy.setEnabled(profileXmlRepo.isEnabled());    policy.setUpdatePolicy(profileXmlRepo.getUpdatePolicy());    policy.setChecksumPolicy(profileXmlRepo.getChecksumPolicy());    return policy;}
385fe7e933dcdf796d7564210bea8e0f2f4577048e5f9f7a5383545396c58df4
toRequest
private ProjectBuildingRequest toRequest(ProjectBuilderConfiguration configuration)
{    DefaultProjectBuildingRequest request = new DefaultProjectBuildingRequest();    request.setValidationLevel(ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0);    request.setResolveDependencies(false);    request.setLocalRepository(configuration.getLocalRepository());    request.setBuildStartTime(configuration.getBuildStartTime());    request.setUserProperties(configuration.getUserProperties());    request.setSystemProperties(configuration.getExecutionProperties());    ProfileManager profileManager = configuration.getGlobalProfileManager();    if (profileManager != null) {        request.setActiveProfileIds(profileManager.getExplicitlyActivatedIds());        request.setInactiveProfileIds(profileManager.getExplicitlyDeactivatedIds());    } else {        /*             * MNG-4900: Hack to workaround deficiency of legacy API which makes it impossible for plugins to access the             * global profile manager which is required to build a POM like a CLI invocation does. Failure to consider             * the activated profiles can cause repo declarations to be lost which in turn will result in artifact             * resolution failures, in particular when using the enhanced local repo which guards access to local files             * based on the configured remote repos.             */        MavenSession session = legacySupport.getSession();        if (session != null) {            MavenExecutionRequest req = session.getRequest();            if (req != null) {                request.setActiveProfileIds(req.getActiveProfiles());                request.setInactiveProfileIds(req.getInactiveProfiles());            }        }    }    return request;}
feba447c459a094f54b2627fc0548e36f910a728464afc9d025a9be5a662bdc6
injectSession
private ProjectBuildingRequest injectSession(ProjectBuildingRequest request)
{    MavenSession session = legacySupport.getSession();    if (session != null) {        request.setRepositorySession(session.getRepositorySession());        request.setSystemProperties(session.getSystemProperties());        if (request.getUserProperties().isEmpty()) {            request.setUserProperties(session.getUserProperties());        }        MavenExecutionRequest req = session.getRequest();        if (req != null) {            request.setRemoteRepositories(req.getRemoteRepositories());        }    } else {        Properties props = new Properties();        EnvironmentUtils.addEnvVars(props);        props.putAll(System.getProperties());        request.setSystemProperties(props);    }    return request;}
ed8e079c3347a6d69cd39b1dd957b4cdfc0f44e7d7187bb90382ad2a45d8893c
normalizeToArtifactRepositories
private List<ArtifactRepository> normalizeToArtifactRepositories(List<?> repositories, ProjectBuildingRequest request) throws ProjectBuildingException
{    if (repositories != null) {        boolean normalized = false;        List<ArtifactRepository> repos = new ArrayList<>(repositories.size());        for (Object repository : repositories) {            if (repository instanceof Repository) {                try {                    ArtifactRepository repo = repositorySystem.buildArtifactRepository((Repository) repository);                    repositorySystem.injectMirror(request.getRepositorySession(), Arrays.asList(repo));                    repositorySystem.injectProxy(request.getRepositorySession(), Arrays.asList(repo));                    repositorySystem.injectAuthentication(request.getRepositorySession(), Arrays.asList(repo));                    repos.add(repo);                } catch (InvalidRepositoryException e) {                    throw new ProjectBuildingException("", "Invalid remote repository " + repository, e);                }                normalized = true;            } else {                repos.add((ArtifactRepository) repository);            }        }        if (normalized) {            return repos;        }    }    return (List<ArtifactRepository>) repositories;}
76e7aad41cf302108353c54d48e77067276b5a242291f714779a55b815860832
transformError
private ProjectBuildingException transformError(ProjectBuildingException e)
{    if (e.getCause() instanceof ModelBuildingException) {        return new InvalidProjectModelException(e.getProjectId(), e.getMessage(), e.getPomFile());    }    return e;}
fe58e31f985a56db2c70a7c27d6f43f270e370a39ca84add30e738fdfa6067e2
build
public MavenProject build(File pom, ProjectBuilderConfiguration configuration) throws ProjectBuildingException
{    ProjectBuildingRequest request = injectSession(toRequest(configuration));    try {        return projectBuilder.build(pom, request).getProject();    } catch (ProjectBuildingException e) {        throw transformError(e);    }}
4ebfb869fc0541b4c893828515702435721a321c2375376b9fde5fc1d0120229
build
public MavenProject build(File pom, ArtifactRepository localRepository, ProfileManager profileManager) throws ProjectBuildingException
{    ProjectBuilderConfiguration configuration = new DefaultProjectBuilderConfiguration();    configuration.setLocalRepository(localRepository);    configuration.setGlobalProfileManager(profileManager);    return build(pom, configuration);}
fee1b5a0083e874e7792dad23267441e4323d04c8f9aa60bae5da377a1851c30
buildFromRepository
public MavenProject buildFromRepository(Artifact artifact, List<ArtifactRepository> remoteRepositories, ProjectBuilderConfiguration configuration, boolean allowStubModel) throws ProjectBuildingException
{    ProjectBuildingRequest request = injectSession(toRequest(configuration));    request.setRemoteRepositories(normalizeToArtifactRepositories(remoteRepositories, request));    request.setProcessPlugins(false);    request.setValidationLevel(ModelBuildingRequest.VALIDATION_LEVEL_MINIMAL);    try {        return projectBuilder.build(artifact, allowStubModel, request).getProject();    } catch (ProjectBuildingException e) {        throw transformError(e);    }}
b6e119e1d0ea05fdbc2b85da7c67414cf81aa3fd8a9464d046bcd4c2234ec09f
buildFromRepository
public MavenProject buildFromRepository(Artifact artifact, List<ArtifactRepository> remoteRepositories, ArtifactRepository localRepository, boolean allowStubModel) throws ProjectBuildingException
{    ProjectBuilderConfiguration configuration = new DefaultProjectBuilderConfiguration();    configuration.setLocalRepository(localRepository);    return buildFromRepository(artifact, remoteRepositories, configuration, allowStubModel);}
1671c4b47f0aae4c1560edbaa032cb512f6c9a9aeec7668bcdac5df3c4edba3d
buildFromRepository
public MavenProject buildFromRepository(Artifact artifact, List<ArtifactRepository> remoteRepositories, ArtifactRepository localRepository) throws ProjectBuildingException
{    return buildFromRepository(artifact, remoteRepositories, localRepository, true);}
222f8b6f2e05f1535bdab57c9e23da67385f8d98c568e51b08e8d02338f09941
buildStandaloneSuperProject
public MavenProject buildStandaloneSuperProject(ProjectBuilderConfiguration configuration) throws ProjectBuildingException
{    ProjectBuildingRequest request = injectSession(toRequest(configuration));    request.setProcessPlugins(false);    request.setValidationLevel(ModelBuildingRequest.VALIDATION_LEVEL_MINIMAL);    ModelSource modelSource = new UrlModelSource(getClass().getResource("standalone.xml"));    MavenProject project = projectBuilder.build(modelSource, request).getProject();    project.setExecutionRoot(true);    return project;}
d653f87a231c655fe719373cfaddf77ed0de109b356e60d567cdda2bad8e455c
buildStandaloneSuperProject
public MavenProject buildStandaloneSuperProject(ArtifactRepository localRepository) throws ProjectBuildingException
{    return buildStandaloneSuperProject(localRepository, null);}
6959c9c30b3d46c14571aeb08df6bc0514fd926caec472f1f1c3a89f139c9e84
buildStandaloneSuperProject
public MavenProject buildStandaloneSuperProject(ArtifactRepository localRepository, ProfileManager profileManager) throws ProjectBuildingException
{    ProjectBuilderConfiguration configuration = new DefaultProjectBuilderConfiguration();    configuration.setLocalRepository(localRepository);    configuration.setGlobalProfileManager(profileManager);    return buildStandaloneSuperProject(configuration);}
e197df3f515fe0130ad87744ddfeefd7c89e26a94c5d5044217268310b71f94e
buildWithDependencies
public MavenProject buildWithDependencies(File pom, ArtifactRepository localRepository, ProfileManager profileManager, TransferListener transferListener) throws ProjectBuildingException, ArtifactResolutionException, ArtifactNotFoundException
{    ProjectBuilderConfiguration configuration = new DefaultProjectBuilderConfiguration();    configuration.setLocalRepository(localRepository);    configuration.setGlobalProfileManager(profileManager);    ProjectBuildingRequest request = injectSession(toRequest(configuration));    request.setResolveDependencies(true);    try {        return projectBuilder.build(pom, request).getProject();    } catch (ProjectBuildingException e) {        throw transformError(e);    }}
7641091e016c1cb74ea4eebf0fe91f17dc5274db0931158c4dc178a661b2a359
buildWithDependencies
public MavenProject buildWithDependencies(File pom, ArtifactRepository localRepository, ProfileManager profileManager) throws ProjectBuildingException, ArtifactResolutionException, ArtifactNotFoundException
{    return buildWithDependencies(pom, localRepository, profileManager, null);}
292b0c9409b1ce63b039b7f80ffc1f87200da3773466c9428c8bd4dd83d9a63f
setGlobalProfileManager
public ProjectBuilderConfiguration setGlobalProfileManager(ProfileManager globalProfileManager)
{    this.globalProfileManager = globalProfileManager;    return this;}
0c994829c43b01ad4308e0b0dded268f93f967fa747f5ee19e891260f62ee396
getGlobalProfileManager
public ProfileManager getGlobalProfileManager()
{    return globalProfileManager;}
3ac03df3b0fe770dd7ac625fd90abce093ebc155840631f46a563ef39cf09d89
setLocalRepository
public ProjectBuilderConfiguration setLocalRepository(ArtifactRepository localRepository)
{    this.localRepository = localRepository;    return this;}
64dc696be33c6c348d62217243ad7506283ed2be89f1b5410c8acb51390d930b
getLocalRepository
public ArtifactRepository getLocalRepository()
{    return localRepository;}
8b4b075457cd49398b32dc95435281788a0d34ccde0b4a25280c41f91485b584
setUserProperties
public ProjectBuilderConfiguration setUserProperties(Properties userProperties)
{    this.userProperties = userProperties;    return this;}
378f8d6e21d4ae0bd6aa85de0988ab8d214704648e0ad1a17b8ce9c7e3a14225
getUserProperties
public Properties getUserProperties()
{    if (userProperties == null) {        userProperties = new Properties();    }    return userProperties;}
d80181f3670be58d6ee5836bcabf9e55d9c444a633768c1b02287c2bb330bd4a
getExecutionProperties
public Properties getExecutionProperties()
{    return executionProperties;}
0e8eee87c05b0ac1e692ec1bad6f8d4e65d3a19102fe5b7028d0dd5ed8df375c
setExecutionProperties
public ProjectBuilderConfiguration setExecutionProperties(Properties executionProperties)
{    this.executionProperties = executionProperties;    return this;}
2168fd766a195a9904679de5bb0e68ef88a89fd39b1468640cdae24d4a564431
getBuildStartTime
public Date getBuildStartTime()
{    return buildStartTime;}
2f3549686711367c2b1e0653c65e61458da6d6a6000d1619e7f1dc5663c03819
setBuildStartTime
public ProjectBuilderConfiguration setBuildStartTime(Date buildStartTime)
{    this.buildStartTime = buildStartTime;    return this;}
5fa65e56e3e88913b10fded953aec10a3e77a984e8b83f8b2b8b3bfbff7107ca
assembleBuildInheritance
public void assembleBuildInheritance(Build childBuild, Build parentBuild, boolean handleAsInheritance)
{    if (childBuild.getSourceDirectory() == null) {        childBuild.setSourceDirectory(parentBuild.getSourceDirectory());    }    if (childBuild.getScriptSourceDirectory() == null) {        childBuild.setScriptSourceDirectory(parentBuild.getScriptSourceDirectory());    }    if (childBuild.getTestSourceDirectory() == null) {        childBuild.setTestSourceDirectory(parentBuild.getTestSourceDirectory());    }    if (childBuild.getOutputDirectory() == null) {        childBuild.setOutputDirectory(parentBuild.getOutputDirectory());    }    if (childBuild.getTestOutputDirectory() == null) {        childBuild.setTestOutputDirectory(parentBuild.getTestOutputDirectory());    }        mergeExtensionLists(childBuild, parentBuild);    if (childBuild.getDirectory() == null) {        childBuild.setDirectory(parentBuild.getDirectory());    }    if (childBuild.getDefaultGoal() == null) {        childBuild.setDefaultGoal(parentBuild.getDefaultGoal());    }    if (childBuild.getFinalName() == null) {        childBuild.setFinalName(parentBuild.getFinalName());    }    ModelUtils.mergeFilterLists(childBuild.getFilters(), parentBuild.getFilters());    List<Resource> resources = childBuild.getResources();    if ((resources == null) || resources.isEmpty()) {        childBuild.setResources(parentBuild.getResources());    }    resources = childBuild.getTestResources();    if ((resources == null) || resources.isEmpty()) {        childBuild.setTestResources(parentBuild.getTestResources());    }        ModelUtils.mergePluginLists(childBuild, parentBuild, handleAsInheritance);        PluginManagement dominantPM = childBuild.getPluginManagement();    PluginManagement recessivePM = parentBuild.getPluginManagement();    if ((dominantPM == null) && (recessivePM != null)) {                childBuild.setPluginManagement(recessivePM);    } else {        ModelUtils.mergePluginLists(childBuild.getPluginManagement(), parentBuild.getPluginManagement(), false);    }}
24347e6a57526e021f7b04f789eb3570a43430cac7b7b7af5a7f256469ec1a14
assembleScmInheritance
private void assembleScmInheritance(Model child, Model parent, String childPathAdjustment, boolean appendPaths)
{    if (parent.getScm() != null) {        Scm parentScm = parent.getScm();        Scm childScm = child.getScm();        if (childScm == null) {            childScm = new Scm();            child.setScm(childScm);        }        if (StringUtils.isEmpty(childScm.getConnection()) && !StringUtils.isEmpty(parentScm.getConnection())) {            childScm.setConnection(appendPath(parentScm.getConnection(), child.getArtifactId(), childPathAdjustment, appendPaths));        }        if (StringUtils.isEmpty(childScm.getDeveloperConnection()) && !StringUtils.isEmpty(parentScm.getDeveloperConnection())) {            childScm.setDeveloperConnection(appendPath(parentScm.getDeveloperConnection(), child.getArtifactId(), childPathAdjustment, appendPaths));        }        if (StringUtils.isEmpty(childScm.getUrl()) && !StringUtils.isEmpty(parentScm.getUrl())) {            childScm.setUrl(appendPath(parentScm.getUrl(), child.getArtifactId(), childPathAdjustment, appendPaths));        }    }}
db93b47c31ae1c750f75d0c21e710172c101e05afede9d38496b70429a9dc764
copyModel
public void copyModel(Model dest, Model source)
{    assembleModelInheritance(dest, source, null, false);}
420578cbe75533331d422cfa1598e7e45717d928c9071e77bf28b151d2b4a5dc
assembleModelInheritance
public void assembleModelInheritance(Model child, Model parent, String childPathAdjustment)
{    assembleModelInheritance(child, parent, childPathAdjustment, true);}
e62615e3e9d1a63eec2684ad4534e0bd4e23d8b15ea1367d512d03cb9ada5efd
assembleModelInheritance
public void assembleModelInheritance(Model child, Model parent)
{    assembleModelInheritance(child, parent, null, true);}
0215dd0769f44b3da16b8e7831b74361e1ba4ab7d53a8da96007725632a4980d
assembleModelInheritance
private void assembleModelInheritance(Model child, Model parent, String childPathAdjustment, boolean appendPaths)
{        if (parent == null) {        return;    }        if (child.getGroupId() == null) {        child.setGroupId(parent.getGroupId());    }        if (child.getVersion() == null) {        if (child.getParent() != null) {            child.setVersion(child.getParent().getVersion());        }    }        if (child.getInceptionYear() == null) {        child.setInceptionYear(parent.getInceptionYear());    }        if (child.getUrl() == null) {        if (parent.getUrl() != null) {            child.setUrl(appendPath(parent.getUrl(), child.getArtifactId(), childPathAdjustment, appendPaths));        } else {            child.setUrl(parent.getUrl());        }    }    assembleDistributionInheritance(child, parent, childPathAdjustment, appendPaths);        if (child.getIssueManagement() == null) {        child.setIssueManagement(parent.getIssueManagement());    }        if (child.getDescription() == null) {        child.setDescription(parent.getDescription());    }        if (child.getOrganization() == null) {        child.setOrganization(parent.getOrganization());    }        assembleScmInheritance(child, parent, childPathAdjustment, appendPaths);        if (child.getCiManagement() == null) {        child.setCiManagement(parent.getCiManagement());    }        if (child.getDevelopers().size() == 0) {        child.setDevelopers(parent.getDevelopers());    }        if (child.getLicenses().size() == 0) {        child.setLicenses(parent.getLicenses());    }        if (child.getContributors().size() == 0) {        child.setContributors(parent.getContributors());    }        if (child.getMailingLists().size() == 0) {        child.setMailingLists(parent.getMailingLists());    }        assembleBuildInheritance(child, parent);    assembleDependencyInheritance(child, parent);    child.setRepositories(ModelUtils.mergeRepositoryLists(child.getRepositories(), parent.getRepositories()));            assembleReportingInheritance(child, parent);    assembleDependencyManagementInheritance(child, parent);    Properties props = new Properties();    props.putAll(parent.getProperties());    props.putAll(child.getProperties());    child.setProperties(props);}
170d1f4c97b4fa7a84f3a457b8a9a39835d648fa85bcd902dbb0cd5b21068b79
assembleDependencyManagementInheritance
private void assembleDependencyManagementInheritance(Model child, Model parent)
{    DependencyManagement parentDepMgmt = parent.getDependencyManagement();    DependencyManagement childDepMgmt = child.getDependencyManagement();    if (parentDepMgmt != null) {        if (childDepMgmt == null) {            child.setDependencyManagement(parentDepMgmt);        } else {            List<Dependency> childDeps = childDepMgmt.getDependencies();            Map<String, Dependency> mappedChildDeps = new TreeMap<>();            for (Dependency dep : childDeps) {                mappedChildDeps.put(dep.getManagementKey(), dep);            }            for (Dependency dep : parentDepMgmt.getDependencies()) {                if (!mappedChildDeps.containsKey(dep.getManagementKey())) {                    childDepMgmt.addDependency(dep);                }            }        }    }}
c275f99a24d0068c0509cf730581521b0aa0130462a2e46f4df59c81c094c9c5
assembleReportingInheritance
private void assembleReportingInheritance(Model child, Model parent)
{        Reporting childReporting = child.getReporting();    Reporting parentReporting = parent.getReporting();    if (parentReporting != null) {        if (childReporting == null) {            childReporting = new Reporting();            child.setReporting(childReporting);        }        childReporting.setExcludeDefaults(parentReporting.isExcludeDefaults());        if (StringUtils.isEmpty(childReporting.getOutputDirectory())) {            childReporting.setOutputDirectory(parentReporting.getOutputDirectory());        }        mergeReportPluginLists(childReporting, parentReporting, true);    }}
22a9c0608e953bcb755004bcf12932690a01b946581ab324287b06a8be9c6758
mergeReportPluginLists
private static void mergeReportPluginLists(Reporting child, Reporting parent, boolean handleAsInheritance)
{    if ((child == null) || (parent == null)) {                return;    }    List<ReportPlugin> parentPlugins = parent.getPlugins();    if ((parentPlugins != null) && !parentPlugins.isEmpty()) {        Map<String, ReportPlugin> assembledPlugins = new TreeMap<>();        Map<String, ReportPlugin> childPlugins = child.getReportPluginsAsMap();        for (ReportPlugin parentPlugin : parentPlugins) {            String parentInherited = parentPlugin.getInherited();            if (!handleAsInheritance || (parentInherited == null) || Boolean.valueOf(parentInherited)) {                ReportPlugin assembledPlugin = parentPlugin;                ReportPlugin childPlugin = childPlugins.get(parentPlugin.getKey());                if (childPlugin != null) {                    assembledPlugin = childPlugin;                    mergeReportPluginDefinitions(childPlugin, parentPlugin, handleAsInheritance);                }                if (handleAsInheritance && (parentInherited == null)) {                    assembledPlugin.unsetInheritanceApplied();                }                assembledPlugins.put(assembledPlugin.getKey(), assembledPlugin);            }        }        for (ReportPlugin childPlugin : childPlugins.values()) {            if (!assembledPlugins.containsKey(childPlugin.getKey())) {                assembledPlugins.put(childPlugin.getKey(), childPlugin);            }        }        child.setPlugins(new ArrayList<>(assembledPlugins.values()));        child.flushReportPluginMap();    }}
a52ab16d7c9cba8625f81ed64dc4abf1ffa49031a260972eb4ebc233d7204c09
mergeReportSetDefinitions
private static void mergeReportSetDefinitions(ReportSet child, ReportSet parent)
{    List<String> parentReports = parent.getReports();    List<String> childReports = child.getReports();    List<String> reports = new ArrayList<>();    if ((childReports != null) && !childReports.isEmpty()) {        reports.addAll(childReports);    }    if (parentReports != null) {        for (String report : parentReports) {            if (!reports.contains(report)) {                reports.add(report);            }        }    }    child.setReports(reports);    Xpp3Dom childConfiguration = (Xpp3Dom) child.getConfiguration();    Xpp3Dom parentConfiguration = (Xpp3Dom) parent.getConfiguration();    childConfiguration = Xpp3Dom.mergeXpp3Dom(childConfiguration, parentConfiguration);    child.setConfiguration(childConfiguration);}
df7a0aed74ee0a44f91a8015c2c9d08a637e1b71648d6a1d43398f547d7c5895
mergeReportPluginDefinitions
public static void mergeReportPluginDefinitions(ReportPlugin child, ReportPlugin parent, boolean handleAsInheritance)
{    if ((child == null) || (parent == null)) {                return;    }    if ((child.getVersion() == null) && (parent.getVersion() != null)) {        child.setVersion(parent.getVersion());    }        String parentInherited = parent.getInherited();    boolean parentIsInherited = (parentInherited == null) || Boolean.valueOf(parentInherited);    List<ReportSet> parentReportSets = parent.getReportSets();    if ((parentReportSets != null) && !parentReportSets.isEmpty()) {        Map<String, ReportSet> assembledReportSets = new TreeMap<>();        Map<String, ReportSet> childReportSets = child.getReportSetsAsMap();        for (Object parentReportSet1 : parentReportSets) {            ReportSet parentReportSet = (ReportSet) parentReportSet1;            if (!handleAsInheritance || parentIsInherited) {                ReportSet assembledReportSet = parentReportSet;                ReportSet childReportSet = childReportSets.get(parentReportSet.getId());                if (childReportSet != null) {                    mergeReportSetDefinitions(childReportSet, parentReportSet);                    assembledReportSet = childReportSet;                } else if (handleAsInheritance && (parentInherited == null)) {                    parentReportSet.unsetInheritanceApplied();                }                assembledReportSets.put(assembledReportSet.getId(), assembledReportSet);            }        }        for (Map.Entry<String, ReportSet> entry : childReportSets.entrySet()) {            String id = entry.getKey();            if (!assembledReportSets.containsKey(id)) {                assembledReportSets.put(id, entry.getValue());            }        }        child.setReportSets(new ArrayList<>(assembledReportSets.values()));        child.flushReportSetMap();    }}
51c9532a755872e5aa5c4a67c53faa81fc381d1afbbf1f5a3c053bdf466a12c4
assembleDependencyInheritance
private void assembleDependencyInheritance(Model child, Model parent)
{    Map<String, Dependency> depsMap = new LinkedHashMap<>();    List<Dependency> deps = parent.getDependencies();    if (deps != null) {        for (Dependency dependency : deps) {            depsMap.put(dependency.getManagementKey(), dependency);        }    }    deps = child.getDependencies();    if (deps != null) {        for (Dependency dependency : deps) {            depsMap.put(dependency.getManagementKey(), dependency);        }    }    child.setDependencies(new ArrayList<>(depsMap.values()));}
d3c08335880ce47839b7e2940dc263f34a860018b76c23cbc3f7d733a86271de
assembleBuildInheritance
private void assembleBuildInheritance(Model child, Model parent)
{    Build childBuild = child.getBuild();    Build parentBuild = parent.getBuild();    if (parentBuild != null) {        if (childBuild == null) {            childBuild = new Build();            child.setBuild(childBuild);        }        assembleBuildInheritance(childBuild, parentBuild, true);    }}
dd3289b0ba25d3f9fef756295e08c8fe50303ac9343c964c81f5576406fbd3bd
assembleDistributionInheritance
private void assembleDistributionInheritance(Model child, Model parent, String childPathAdjustment, boolean appendPaths)
{    if (parent.getDistributionManagement() != null) {        DistributionManagement parentDistMgmt = parent.getDistributionManagement();        DistributionManagement childDistMgmt = child.getDistributionManagement();        if (childDistMgmt == null) {            childDistMgmt = new DistributionManagement();            child.setDistributionManagement(childDistMgmt);        }        if (childDistMgmt.getSite() == null) {            if (parentDistMgmt.getSite() != null) {                Site site = new Site();                childDistMgmt.setSite(site);                site.setId(parentDistMgmt.getSite().getId());                site.setName(parentDistMgmt.getSite().getName());                site.setUrl(parentDistMgmt.getSite().getUrl());                if (site.getUrl() != null) {                    site.setUrl(appendPath(site.getUrl(), child.getArtifactId(), childPathAdjustment, appendPaths));                }            }        }        if (childDistMgmt.getRepository() == null) {            if (parentDistMgmt.getRepository() != null) {                DeploymentRepository repository = copyDistributionRepository(parentDistMgmt.getRepository());                childDistMgmt.setRepository(repository);            }        }        if (childDistMgmt.getSnapshotRepository() == null) {            if (parentDistMgmt.getSnapshotRepository() != null) {                DeploymentRepository repository = copyDistributionRepository(parentDistMgmt.getSnapshotRepository());                childDistMgmt.setSnapshotRepository(repository);            }        }        if (StringUtils.isEmpty(childDistMgmt.getDownloadUrl())) {            childDistMgmt.setDownloadUrl(parentDistMgmt.getDownloadUrl());        }            }}
815fca08a4351a88eef528625861ec69531a91761759833e980d861f3f3b70a5
copyDistributionRepository
private static DeploymentRepository copyDistributionRepository(DeploymentRepository parentRepository)
{    DeploymentRepository repository = new DeploymentRepository();    repository.setId(parentRepository.getId());    repository.setName(parentRepository.getName());    repository.setUrl(parentRepository.getUrl());    repository.setLayout(parentRepository.getLayout());    repository.setUniqueVersion(parentRepository.isUniqueVersion());    return repository;}
5946e5245737eff9ab665c878c110e0a866e4db0801286170c5136ac363f9a17
appendPath
protected String appendPath(String parentPath, String childPath, String pathAdjustment, boolean appendPaths)
{    String uncleanPath = parentPath;    if (appendPaths) {        if (pathAdjustment != null) {            uncleanPath += "/" + pathAdjustment;        }        if (childPath != null) {            uncleanPath += "/" + childPath;        }    }    String cleanedPath = "";    int protocolIdx = uncleanPath.indexOf("://");    if (protocolIdx > -1) {        cleanedPath = uncleanPath.substring(0, protocolIdx + 3);        uncleanPath = uncleanPath.substring(protocolIdx + 3);    }    if (uncleanPath.startsWith("/")) {        cleanedPath += "/";    }    return cleanedPath + resolvePath(uncleanPath);}
560dd2ae66500ab94f416e40056365342bba4ca8249277d4904078fab1616a8b
resolvePath
private static String resolvePath(String uncleanPath)
{    LinkedList<String> pathElements = new LinkedList<>();    StringTokenizer tokenizer = new StringTokenizer(uncleanPath, "/");    while (tokenizer.hasMoreTokens()) {        String token = tokenizer.nextToken();        switch(token) {            case "":                                break;            case "..":                if (pathElements.isEmpty()) {                                                                } else {                    pathElements.removeLast();                }                break;            default:                pathElements.addLast(token);                break;        }    }    StringBuilder cleanedPath = new StringBuilder();    while (!pathElements.isEmpty()) {        cleanedPath.append(pathElements.removeFirst());        if (!pathElements.isEmpty()) {            cleanedPath.append('/');        }    }    return cleanedPath.toString();}
3583ecbe680877fedbe9d0c0348b280b45e33e402109a9d4be962cf474fba370
mergeExtensionLists
private static void mergeExtensionLists(Build childBuild, Build parentBuild)
{    for (Extension e : parentBuild.getExtensions()) {        if (!childBuild.getExtensions().contains(e)) {            childBuild.addExtension(e);        }    }}
fa8850f49b9f5508041a8d12b11e715000f527198bc7a6450067f69a6cfe0642
interpolate
public Model interpolate(Model model, Map<String, ?> context) throws ModelInterpolationException
{    return interpolate(model, context, true);}
438350ad130ec357f452b2fea6d336f916c289f6fc2f5be02c779397750088eb
interpolate
public Model interpolate(Model model, Map<String, ?> context, boolean strict) throws ModelInterpolationException
{    Properties props = new Properties();    props.putAll(context);    return interpolate(model, null, new DefaultProjectBuilderConfiguration().setExecutionProperties(props), true);}
0fbb3f46873024e26a466b2a77530deffceb7d4013bcef91c306b38e1860a7b3
interpolate
public Model interpolate(Model model, File projectDir, ProjectBuilderConfiguration config, boolean debugEnabled) throws ModelInterpolationException
{    StringWriter sWriter = new StringWriter(1024);    MavenXpp3Writer writer = new MavenXpp3Writer();    try {        writer.write(sWriter, model);    } catch (IOException e) {        throw new ModelInterpolationException("Cannot serialize project model for interpolation.", e);    }    String serializedModel = sWriter.toString();    serializedModel = interpolate(serializedModel, model, projectDir, config, debugEnabled);    StringReader sReader = new StringReader(serializedModel);    MavenXpp3Reader modelReader = new MavenXpp3Reader();    try {        model = modelReader.read(sReader);    } catch (IOException | XmlPullParserException e) {        throw new ModelInterpolationException("Cannot read project model from interpolating filter of serialized version.", e);    }    return model;}
7c1e349d831e41384acbee08255e037b1b067faae6d7b54fcb6dc239c8a2a45c
interpolate
public String interpolate(String src, Model model, final File projectDir, ProjectBuilderConfiguration config, boolean debug) throws ModelInterpolationException
{    try {        List<ValueSource> valueSources = createValueSources(model, projectDir, config);        List<InterpolationPostProcessor> postProcessors = createPostProcessors(model, projectDir, config);        return interpolateInternal(src, valueSources, postProcessors, debug);    } finally {        interpolator.clearAnswers();    }}
018339d23aa78232aa0b398f42747656883f6e5c64aa83661ff7d70335adb296
createValueSources
protected List<ValueSource> createValueSources(final Model model, final File projectDir, final ProjectBuilderConfiguration config)
{    String timestampFormat = DEFAULT_BUILD_TIMESTAMP_FORMAT;    Properties modelProperties = model.getProperties();    if (modelProperties != null) {        timestampFormat = modelProperties.getProperty(BUILD_TIMESTAMP_FORMAT_PROPERTY, timestampFormat);    }    ValueSource modelValueSource1 = new PrefixedObjectValueSource(PROJECT_PREFIXES, model, false);    ValueSource modelValueSource2 = new ObjectBasedValueSource(model);    ValueSource basedirValueSource = new PrefixedValueSourceWrapper(new AbstractValueSource(false) {        public Object getValue(String expression) {            if (projectDir != null && "basedir".equals(expression)) {                return projectDir.getAbsolutePath();            }            return null;        }    }, PROJECT_PREFIXES, true);    ValueSource baseUriValueSource = new PrefixedValueSourceWrapper(new AbstractValueSource(false) {        public Object getValue(String expression) {            if (projectDir != null && "baseUri".equals(expression)) {                return projectDir.getAbsoluteFile().toPath().toUri().toASCIIString();            }            return null;        }    }, PROJECT_PREFIXES, false);    List<ValueSource> valueSources = new ArrayList<>(9);        valueSources.add(basedirValueSource);    valueSources.add(baseUriValueSource);    valueSources.add(new BuildTimestampValueSource(config.getBuildStartTime(), timestampFormat));    valueSources.add(modelValueSource1);    valueSources.add(new MapBasedValueSource(config.getUserProperties()));    valueSources.add(new MapBasedValueSource(modelProperties));    valueSources.add(new MapBasedValueSource(config.getExecutionProperties()));    valueSources.add(new AbstractValueSource(false) {        public Object getValue(String expression) {            return config.getExecutionProperties().getProperty("env." + expression);        }    });    valueSources.add(modelValueSource2);    return valueSources;}
11847c6fc1ea657a09fb97cfea92c7688683b7b646d9a6d928e2358295df5188
getValue
public Object getValue(String expression)
{    if (projectDir != null && "basedir".equals(expression)) {        return projectDir.getAbsolutePath();    }    return null;}
11847c6fc1ea657a09fb97cfea92c7688683b7b646d9a6d928e2358295df5188
getValue
public Object getValue(String expression)
{    if (projectDir != null && "baseUri".equals(expression)) {        return projectDir.getAbsoluteFile().toPath().toUri().toASCIIString();    }    return null;}
11847c6fc1ea657a09fb97cfea92c7688683b7b646d9a6d928e2358295df5188
getValue
public Object getValue(String expression)
{    return config.getExecutionProperties().getProperty("env." + expression);}
61297450ad10e56f3123ae73cb57b82750ce8e8af84f1f16ee44c9333ff456ff
createPostProcessors
protected List<InterpolationPostProcessor> createPostProcessors(final Model model, final File projectDir, final ProjectBuilderConfiguration config)
{    return Collections.singletonList((InterpolationPostProcessor) new PathTranslatingPostProcessor(PROJECT_PREFIXES, TRANSLATED_PATH_EXPRESSIONS, projectDir, pathTranslator));}
ae09ca3cb61381d059df0af8e249fe684659e5288988ddda5928d3e7eeeeb6ea
interpolateInternal
protected String interpolateInternal(String src, List<ValueSource> valueSources, List<InterpolationPostProcessor> postProcessors, boolean debug) throws ModelInterpolationException
{    if (!src.contains("${")) {        return src;    }    Logger logger = getLogger();    String result = src;    synchronized (this) {        for (ValueSource vs : valueSources) {            interpolator.addValueSource(vs);        }        for (InterpolationPostProcessor postProcessor : postProcessors) {            interpolator.addPostProcessor(postProcessor);        }        try {            try {                result = interpolator.interpolate(result, recursionInterceptor);            } catch (InterpolationException e) {                throw new ModelInterpolationException(e.getMessage(), e);            }            if (debug) {                List<Object> feedback = interpolator.getFeedback();                if (feedback != null && !feedback.isEmpty()) {                    logger.debug("Maven encountered the following problems during initial POM interpolation:");                    Object last = null;                    for (Object next : feedback) {                        if (next instanceof Throwable) {                            if (last == null) {                                logger.debug("", ((Throwable) next));                            } else {                                logger.debug(String.valueOf(last), ((Throwable) next));                            }                        } else {                            if (last != null) {                                logger.debug(String.valueOf(last));                            }                            last = next;                        }                    }                    if (last != null) {                        logger.debug(String.valueOf(last));                    }                }            }            interpolator.clearFeedback();        } finally {            for (ValueSource vs : valueSources) {                interpolator.removeValuesSource(vs);            }            for (InterpolationPostProcessor postProcessor : postProcessors) {                interpolator.removePostProcessor(postProcessor);            }        }    }    return result;}
6b390f209904ad62687726b92b440e125d03fb7dea92d1d918cf2666bc3ab5d3
getRecursionInterceptor
protected RecursionInterceptor getRecursionInterceptor()
{    return recursionInterceptor;}
5e74dc572f255b78a1cfe383fb3c1c172cf54427ebd8e688a88deed8a18d09af
setRecursionInterceptor
protected void setRecursionInterceptor(RecursionInterceptor recursionInterceptor)
{    this.recursionInterceptor = recursionInterceptor;}
797be51949a881dc02a452eeae9db530546062bc2f7fb956c160d806ef9eaf36
initialize
public void initialize() throws InitializationException
{    interpolator = createInterpolator();    recursionInterceptor = new PrefixAwareRecursionInterceptor(PROJECT_PREFIXES);}
0ba0f334d0b5320f708c9ceca79eb8d3c373d88f9a05c1da0ca4f69f652d71a5
getInterpolator
protected final Interpolator getInterpolator()
{    return interpolator;}
11847c6fc1ea657a09fb97cfea92c7688683b7b646d9a6d928e2358295df5188
getValue
public Object getValue(String expression)
{    if ("build.timestamp".equals(expression) || "maven.build.timestamp".equals(expression)) {        if (formattedDate == null && startTime != null) {            formattedDate = new SimpleDateFormat(format).format(startTime);        }        return formattedDate;    }    return null;}
747b6115ad290211fe9c732a1673c80e3ab8293cad92382e1e50e4da076fa750
getExpression
public String getExpression()
{    return expression;}
38474dadad19762f77cbba12b80f1fce3c7b9de1b47a9e9e7f9ccc390c6ffb3d
getOriginalMessage
public String getOriginalMessage()
{    return originalMessage;}
fe2a911fe55b44d52d299fcb381b34c61df4b2095337c2d78f2fb1f1e77a3bb5
execute
public Object execute(String expression, Object value)
{    expression = ValueSourceUtils.trimPrefix(expression, expressionPrefixes, true);    if (projectDir != null && value != null && unprefixedPathKeys.contains(expression)) {        return pathTranslator.alignToBaseDirectory(String.valueOf(value), projectDir);    }    return value;}
d57cd0a755df107b9a78c3bcaca50743f6e5b8b580f31195ab08b58caeac93cc
createInterpolator
protected Interpolator createInterpolator()
{    return new RegexBasedInterpolator(true);}
0fbb3f46873024e26a466b2a77530deffceb7d4013bcef91c306b38e1860a7b3
interpolate
public Model interpolate(Model model, File projectDir, ProjectBuilderConfiguration config, boolean debugEnabled) throws ModelInterpolationException
{    interpolateObject(model, model, projectDir, config, debugEnabled);    return model;}
35be59f225edaf193eade4b720da855f70e7af63945c45b0bdc22fa4244581b3
interpolateObject
protected void interpolateObject(Object obj, Model model, File projectDir, ProjectBuilderConfiguration config, boolean debugEnabled) throws ModelInterpolationException
{    try {        List<ValueSource> valueSources = createValueSources(model, projectDir, config);        List<InterpolationPostProcessor> postProcessors = createPostProcessors(model, projectDir, config);        InterpolateObjectAction action = new InterpolateObjectAction(obj, valueSources, postProcessors, debugEnabled, this, getLogger());        ModelInterpolationException error = AccessController.doPrivileged(action);        if (error != null) {            throw error;        }    } finally {        getInterpolator().clearAnswers();    }}
d57cd0a755df107b9a78c3bcaca50743f6e5b8b580f31195ab08b58caeac93cc
createInterpolator
protected Interpolator createInterpolator()
{    StringSearchInterpolator interpolator = new StringSearchInterpolator();    interpolator.setCacheAnswers(true);    return interpolator;}
cc099ed47baf0b074630c45adad3dc0ca615a118205733f1f42c03475b8d09d7
run
public ModelInterpolationException run()
{    while (!interpolationTargets.isEmpty()) {        Object obj = interpolationTargets.removeFirst();        try {            traverseObjectWithParents(obj.getClass(), obj);        } catch (ModelInterpolationException e) {            return e;        }    }    return null;}
27e989f33413612f2b791d52d942aeaab012806e20776e1c5888153aee307b7c
traverseObjectWithParents
private void traverseObjectWithParents(Class<?> cls, Object target) throws ModelInterpolationException
{    if (cls == null) {        return;    }    if (cls.isArray()) {        evaluateArray(target);    } else if (isQualifiedForInterpolation(cls)) {        Field[] fields = FIELDS_BY_CLASS.get(cls);        if (fields == null) {            fields = cls.getDeclaredFields();            FIELDS_BY_CLASS.put(cls, fields);        }        for (Field field : fields) {            Class<?> type = field.getType();            if (isQualifiedForInterpolation(field, type)) {                boolean isAccessible = field.isAccessible();                field.setAccessible(true);                try {                    try {                        if (String.class == type) {                            String value = (String) field.get(target);                            if (value != null) {                                String interpolated = modelInterpolator.interpolateInternal(value, valueSources, postProcessors, debugEnabled);                                if (!interpolated.equals(value)) {                                    field.set(target, interpolated);                                }                            }                        } else if (Collection.class.isAssignableFrom(type)) {                            Collection<Object> c = (Collection<Object>) field.get(target);                            if (c != null && !c.isEmpty()) {                                List<Object> originalValues = new ArrayList<>(c);                                try {                                    c.clear();                                } catch (UnsupportedOperationException e) {                                    if (debugEnabled && logger != null) {                                        logger.debug("Skipping interpolation of field: " + field + " in: " + cls.getName() + "; it is an unmodifiable collection.");                                    }                                    continue;                                }                                for (Object value : originalValues) {                                    if (value != null) {                                        if (String.class == value.getClass()) {                                            String interpolated = modelInterpolator.interpolateInternal((String) value, valueSources, postProcessors, debugEnabled);                                            if (!interpolated.equals(value)) {                                                c.add(interpolated);                                            } else {                                                c.add(value);                                            }                                        } else {                                            c.add(value);                                            if (value.getClass().isArray()) {                                                evaluateArray(value);                                            } else {                                                interpolationTargets.add(value);                                            }                                        }                                    } else {                                                                                c.add(value);                                    }                                }                            }                        } else if (Map.class.isAssignableFrom(type)) {                            Map<Object, Object> m = (Map<Object, Object>) field.get(target);                            if (m != null && !m.isEmpty()) {                                for (Map.Entry<Object, Object> entry : m.entrySet()) {                                    Object value = entry.getValue();                                    if (value != null) {                                        if (String.class == value.getClass()) {                                            String interpolated = modelInterpolator.interpolateInternal((String) value, valueSources, postProcessors, debugEnabled);                                            if (!interpolated.equals(value)) {                                                try {                                                    entry.setValue(interpolated);                                                } catch (UnsupportedOperationException e) {                                                    if (debugEnabled && logger != null) {                                                        logger.debug("Skipping interpolation of field: " + field + " (key: " + entry.getKey() + ") in: " + cls.getName() + "; it is an unmodifiable collection.");                                                    }                                                }                                            }                                        } else {                                            if (value.getClass().isArray()) {                                                evaluateArray(value);                                            } else {                                                interpolationTargets.add(value);                                            }                                        }                                    }                                }                            }                        } else {                            Object value = field.get(target);                            if (value != null) {                                if (field.getType().isArray()) {                                    evaluateArray(value);                                } else {                                    interpolationTargets.add(value);                                }                            }                        }                    } catch (IllegalArgumentException | IllegalAccessException e) {                        throw new ModelInterpolationException("Failed to interpolate field: " + field + " on class: " + cls.getName(), e);                    }                } finally {                    field.setAccessible(isAccessible);                }            }        }        traverseObjectWithParents(cls.getSuperclass(), target);    }}
1b6aa501302f24ff86ee87d1122ec43866a8be54e86429b8ce144b742bea1982
isQualifiedForInterpolation
private boolean isQualifiedForInterpolation(Class<?> cls)
{    return !cls.getPackage().getName().startsWith("java");}
1f8738cacbfb07953cbb93596b3305bf7cca49744eb3b85335bff233c6f57e54
isQualifiedForInterpolation
private boolean isQualifiedForInterpolation(Field field, Class<?> fieldType)
{    if (!PRIMITIVE_BY_CLASS.containsKey(fieldType)) {        PRIMITIVE_BY_CLASS.put(fieldType, fieldType.isPrimitive());    }    if (PRIMITIVE_BY_CLASS.get(fieldType)) {        return false;    }    if ("parent".equals(field.getName())) {        return false;    }    return true;}
fbc3cbc4c94cb5750b06fedc3b0e500ac9e31f07d2b75c1e643712b13e360abd
evaluateArray
private void evaluateArray(Object target) throws ModelInterpolationException
{    int len = Array.getLength(target);    for (int i = 0; i < len; i++) {        Object value = Array.get(target, i);        if (value != null) {            if (String.class == value.getClass()) {                String interpolated = modelInterpolator.interpolateInternal((String) value, valueSources, postProcessors, debugEnabled);                if (!interpolated.equals(value)) {                    Array.set(target, i, interpolated);                }            } else {                interpolationTargets.add(value);            }        }    }}
5b6ef321bd605f07f4ca5271ae32c3d3d60e3687322d74b21537264e27238304
getValidationResult
public final ModelValidationResult getValidationResult()
{    return validationResult;}
c4c0ed8017c581a38206bbf16ee94effef6954af3bdf2868d0451d078039ff9c
mergePluginLists
public static void mergePluginLists(PluginContainer childContainer, PluginContainer parentContainer, boolean handleAsInheritance)
{    if ((childContainer == null) || (parentContainer == null)) {                return;    }    List<Plugin> parentPlugins = parentContainer.getPlugins();    if ((parentPlugins != null) && !parentPlugins.isEmpty()) {        parentPlugins = new ArrayList<>(parentPlugins);                if (handleAsInheritance) {            for (Iterator<Plugin> it = parentPlugins.iterator(); it.hasNext(); ) {                Plugin plugin = it.next();                String inherited = plugin.getInherited();                if ((inherited != null) && !Boolean.valueOf(inherited)) {                    it.remove();                }            }        }        List<Plugin> assembledPlugins = new ArrayList<>();        Map<String, Plugin> childPlugins = childContainer.getPluginsAsMap();        for (Plugin parentPlugin : parentPlugins) {            String parentInherited = parentPlugin.getInherited();                        if (!handleAsInheritance || (parentInherited == null) || Boolean.valueOf(parentInherited)) {                Plugin childPlugin = childPlugins.get(parentPlugin.getKey());                if ((childPlugin != null) && !assembledPlugins.contains(childPlugin)) {                    Plugin assembledPlugin = childPlugin;                    mergePluginDefinitions(childPlugin, parentPlugin, handleAsInheritance);                                        assembledPlugins.add(assembledPlugin);                }                                if (handleAsInheritance && (parentInherited == null)) {                    parentPlugin.unsetInheritanceApplied();                }            }                                    List<Plugin> results = ModelUtils.orderAfterMerge(assembledPlugins, parentPlugins, childContainer.getPlugins());            childContainer.setPlugins(results);            childContainer.flushPluginMap();        }    }}
516cfed2a9bd38e0177d46feb129e56d3b5b596bebdf064fa4a087922e6cc498
orderAfterMerge
public static List<Plugin> orderAfterMerge(List<Plugin> merged, List<Plugin> highPrioritySource, List<Plugin> lowPrioritySource)
{    List<Plugin> results = new ArrayList<>();    if (!merged.isEmpty()) {        results.addAll(merged);    }    List<Plugin> missingFromResults = new ArrayList<>();    List<List<Plugin>> sources = new ArrayList<>();    sources.add(highPrioritySource);    sources.add(lowPrioritySource);    for (List<Plugin> source : sources) {        for (Plugin item : source) {            if (results.contains(item)) {                if (!missingFromResults.isEmpty()) {                    int idx = results.indexOf(item);                    if (idx < 0) {                        idx = 0;                    }                    results.addAll(idx, missingFromResults);                    missingFromResults.clear();                }            } else {                missingFromResults.add(item);            }        }        if (!missingFromResults.isEmpty()) {            results.addAll(missingFromResults);            missingFromResults.clear();        }    }    return results;}
25a996a6dcd42636ca0b3649f1d8514166ded65e471375501b6bda19a01064ce
mergePluginDefinitions
public static void mergePluginDefinitions(Plugin child, Plugin parent, boolean handleAsInheritance)
{    if ((child == null) || (parent == null)) {                return;    }    if (parent.isExtensions()) {        child.setExtensions(true);    }    if ((child.getVersion() == null) && (parent.getVersion() != null)) {        child.setVersion(parent.getVersion());    }    Xpp3Dom childConfiguration = (Xpp3Dom) child.getConfiguration();    Xpp3Dom parentConfiguration = (Xpp3Dom) parent.getConfiguration();    childConfiguration = Xpp3Dom.mergeXpp3Dom(childConfiguration, parentConfiguration);    child.setConfiguration(childConfiguration);    child.setDependencies(mergeDependencyList(child.getDependencies(), parent.getDependencies()));        String parentInherited = parent.getInherited();    boolean parentIsInherited = (parentInherited == null) || Boolean.valueOf(parentInherited);    List<PluginExecution> parentExecutions = parent.getExecutions();    if ((parentExecutions != null) && !parentExecutions.isEmpty()) {        List<PluginExecution> mergedExecutions = new ArrayList<>();        Map<String, PluginExecution> assembledExecutions = new TreeMap<>();        Map<String, PluginExecution> childExecutions = child.getExecutionsAsMap();        for (PluginExecution parentExecution : parentExecutions) {            String inherited = parentExecution.getInherited();            boolean parentExecInherited = parentIsInherited && ((inherited == null) || Boolean.valueOf(inherited));            if (!handleAsInheritance || parentExecInherited) {                PluginExecution assembled = parentExecution;                PluginExecution childExecution = childExecutions.get(parentExecution.getId());                if (childExecution != null) {                    mergePluginExecutionDefinitions(childExecution, parentExecution);                    assembled = childExecution;                } else if (handleAsInheritance && (parentInherited == null)) {                    parentExecution.unsetInheritanceApplied();                }                assembledExecutions.put(assembled.getId(), assembled);                mergedExecutions.add(assembled);            }        }        for (PluginExecution childExecution : child.getExecutions()) {            if (!assembledExecutions.containsKey(childExecution.getId())) {                mergedExecutions.add(childExecution);            }        }        child.setExecutions(mergedExecutions);        child.flushExecutionMap();    }}
49d4d305176bb479fb5aa295d258341c5506c2dddc5715d00dc927e8e8f5230c
mergePluginExecutionDefinitions
private static void mergePluginExecutionDefinitions(PluginExecution child, PluginExecution parent)
{    if (child.getPhase() == null) {        child.setPhase(parent.getPhase());    }    List<String> parentGoals = parent.getGoals();    List<String> childGoals = child.getGoals();    List<String> goals = new ArrayList<>();    if ((childGoals != null) && !childGoals.isEmpty()) {        goals.addAll(childGoals);    }    if (parentGoals != null) {        for (String goal : parentGoals) {            if (!goals.contains(goal)) {                goals.add(goal);            }        }    }    child.setGoals(goals);    Xpp3Dom childConfiguration = (Xpp3Dom) child.getConfiguration();    Xpp3Dom parentConfiguration = (Xpp3Dom) parent.getConfiguration();    childConfiguration = Xpp3Dom.mergeXpp3Dom(childConfiguration, parentConfiguration);    child.setConfiguration(childConfiguration);}
c411e00126b69d12602e9bb0da846cbb7dc942a20627dda6b265b806ea50aa5e
mergeRepositoryLists
public static List<Repository> mergeRepositoryLists(List<Repository> dominant, List<Repository> recessive)
{    List<Repository> repositories = new ArrayList<>(dominant);    for (Repository repository : recessive) {        if (!repositories.contains(repository)) {            repositories.add(repository);        }    }    return repositories;}
5e2478cfd0116b29eaec65537638a93150f5b068e56cf8d9cbb37c55b878f34b
mergeFilterLists
public static void mergeFilterLists(List<String> childFilters, List<String> parentFilters)
{    for (String f : parentFilters) {        if (!childFilters.contains(f)) {            childFilters.add(f);        }    }}
1952950d358583b1ab091fb7ab309f5809916e8eea3036c3fc32990ddda539e5
mergeDependencyList
private static List<Dependency> mergeDependencyList(List<Dependency> child, List<Dependency> parent)
{    Map<String, Dependency> depsMap = new LinkedHashMap<>();    if (parent != null) {        for (Dependency dependency : parent) {            depsMap.put(dependency.getManagementKey(), dependency);        }    }    if (child != null) {        for (Dependency dependency : child) {            depsMap.put(dependency.getManagementKey(), dependency);        }    }    return new ArrayList<>(depsMap.values());}
3b7624d886c89d55ebbe1143ac4a81932cc9293bdefafec20c08b411a84f73a6
alignToBaseDirectory
public void alignToBaseDirectory(Model model, File basedir)
{    if (basedir == null) {        return;    }    Build build = model.getBuild();    if (build != null) {        build.setDirectory(alignToBaseDirectory(build.getDirectory(), basedir));        build.setSourceDirectory(alignToBaseDirectory(build.getSourceDirectory(), basedir));        build.setTestSourceDirectory(alignToBaseDirectory(build.getTestSourceDirectory(), basedir));        for (Resource resource : build.getResources()) {            resource.setDirectory(alignToBaseDirectory(resource.getDirectory(), basedir));        }        for (Resource resource : build.getTestResources()) {            resource.setDirectory(alignToBaseDirectory(resource.getDirectory(), basedir));        }        if (build.getFilters() != null) {            List<String> filters = new ArrayList<>();            for (String filter : build.getFilters()) {                filters.add(alignToBaseDirectory(filter, basedir));            }            build.setFilters(filters);        }        build.setOutputDirectory(alignToBaseDirectory(build.getOutputDirectory(), basedir));        build.setTestOutputDirectory(alignToBaseDirectory(build.getTestOutputDirectory(), basedir));    }    Reporting reporting = model.getReporting();    if (reporting != null) {        reporting.setOutputDirectory(alignToBaseDirectory(reporting.getOutputDirectory(), basedir));    }}
354a1082414820dbbf9e47bd6a5085105d873a28c1dacc5d514f5fb7c987ab0f
alignToBaseDirectory
public String alignToBaseDirectory(String path, File basedir)
{    if (basedir == null) {        return path;    }    if (path == null) {        return null;    }    String s = stripBasedirToken(path);    File file = new File(s);    if (file.isAbsolute()) {                s = file.getPath();    } else if (file.getPath().startsWith(File.separator)) {                s = file.getAbsolutePath();    } else {                s = new File(new File(basedir, s).toURI().normalize()).getAbsolutePath();    }    return s;}
4b0d2f9e97d5679e3a93e25ace695c524150a091f7b2faffea27ce4953873c6e
stripBasedirToken
private String stripBasedirToken(String s)
{    if (s != null) {        String basedirExpr = null;        for (String expression : BASEDIR_EXPRESSIONS) {            if (s.startsWith(expression)) {                basedirExpr = expression;                break;            }        }        if (basedirExpr != null) {            if (s.length() > basedirExpr.length()) {                                s = chopLeadingFileSeparator(s.substring(basedirExpr.length()));            } else {                s = ".";            }        }    }    return s;}
a949f953668ca37994bfbf3187078b93b1538df5cc6e9b0fba10b20553b156cf
chopLeadingFileSeparator
private String chopLeadingFileSeparator(String path)
{    if (path != null) {        if (path.startsWith("/") || path.startsWith("\\")) {            path = path.substring(1);        }    }    return path;}
dccd7b152a5f80e5005d6bb4adc90d652182d06f2eda07389391175ac2f783b3
unalignFromBaseDirectory
public void unalignFromBaseDirectory(Model model, File basedir)
{    if (basedir == null) {        return;    }    Build build = model.getBuild();    if (build != null) {        build.setDirectory(unalignFromBaseDirectory(build.getDirectory(), basedir));        build.setSourceDirectory(unalignFromBaseDirectory(build.getSourceDirectory(), basedir));        build.setTestSourceDirectory(unalignFromBaseDirectory(build.getTestSourceDirectory(), basedir));        for (Resource resource : build.getResources()) {            resource.setDirectory(unalignFromBaseDirectory(resource.getDirectory(), basedir));        }        for (Resource resource : build.getTestResources()) {            resource.setDirectory(unalignFromBaseDirectory(resource.getDirectory(), basedir));        }        if (build.getFilters() != null) {            List<String> filters = new ArrayList<>();            for (String filter : build.getFilters()) {                filters.add(unalignFromBaseDirectory(filter, basedir));            }            build.setFilters(filters);        }        build.setOutputDirectory(unalignFromBaseDirectory(build.getOutputDirectory(), basedir));        build.setTestOutputDirectory(unalignFromBaseDirectory(build.getTestOutputDirectory(), basedir));    }    Reporting reporting = model.getReporting();    if (reporting != null) {        reporting.setOutputDirectory(unalignFromBaseDirectory(reporting.getOutputDirectory(), basedir));    }}
702b01a17e0a3366eedc44de76edbba1ce1bda0e441807b8a462b27f8b631d80
unalignFromBaseDirectory
public String unalignFromBaseDirectory(String path, File basedir)
{    if (basedir == null) {        return path;    }    if (path == null) {        return null;    }    path = path.trim();    String base = basedir.getAbsolutePath();    if (path.startsWith(base)) {        path = chopLeadingFileSeparator(path.substring(base.length()));    }    if (path.length() <= 0) {        path = ".";    }    if (!new File(path).isAbsolute()) {        path = path.replace('\\', '/');    }    return path;}
5c8cb62efb8264a4fdb9b522ae54524e9e2c32de6847d690ad9380b4afc1bea6
buildArtifactRepositories
public static List<ArtifactRepository> buildArtifactRepositories(List<Repository> repositories, ArtifactRepositoryFactory artifactRepositoryFactory, PlexusContainer c) throws InvalidRepositoryException
{    List<ArtifactRepository> remoteRepositories = new ArrayList<>();    for (Repository r : repositories) {        remoteRepositories.add(buildArtifactRepository(r, artifactRepositoryFactory, c));    }    return remoteRepositories;}
17b7c668b866f461c0f4f7ce670de269f142b60e9b33f73b225d7c687c664d24
buildDeploymentArtifactRepository
public static ArtifactRepository buildDeploymentArtifactRepository(DeploymentRepository repo, ArtifactRepositoryFactory artifactRepositoryFactory, PlexusContainer c) throws InvalidRepositoryException
{    return buildArtifactRepository(repo, artifactRepositoryFactory, c);}
16236f6c82f7f46eb9d8221afcc5ccc45da63d578be992dc0ae620681792a006
buildArtifactRepository
public static ArtifactRepository buildArtifactRepository(Repository repo, ArtifactRepositoryFactory artifactRepositoryFactory, PlexusContainer c) throws InvalidRepositoryException
{    RepositorySystem repositorySystem = rs(c);    RepositorySystemSession session = rss(c);    ArtifactRepository repository = repositorySystem.buildArtifactRepository(repo);    if (session != null) {        repositorySystem.injectMirror(session, Arrays.asList(repository));        repositorySystem.injectProxy(session, Arrays.asList(repository));        repositorySystem.injectAuthentication(session, Arrays.asList(repository));    }    return repository;}
3b1862288d2b0eee918c30f1cad285cd8e332e4ba6bea51eade5532a44d86ca2
rs
private static RepositorySystem rs(PlexusContainer c)
{    try {        return c.lookup(RepositorySystem.class);    } catch (ComponentLookupException e) {        throw new IllegalStateException(e);    }}
cd19d61db42b01c07d66dcc87b1be49786e4eb23c8cbfe2b9b8414974502779c
rss
private static RepositorySystemSession rss(PlexusContainer c)
{    try {        LegacySupport legacySupport = c.lookup(LegacySupport.class);        return legacySupport.getRepositorySession();    } catch (ComponentLookupException e) {        throw new IllegalStateException(e);    }}
afc90eeec5be470e6ce8f4dabe82ae1992016a8d9d978a0733be42a2a6eca4fe
validate
public ModelValidationResult validate(Model model)
{    ModelValidationResult result = new ModelValidationResult();    ModelBuildingRequest request = new DefaultModelBuildingRequest().setValidationLevel(ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0);    SimpleModelProblemCollector problems = new SimpleModelProblemCollector(result);    modelValidator.validateEffectiveModel(model, request, problems);    return result;}
db24eb665ffaac0d3626cacc0bf9a02aa9918f27efe6dce02ae97c60cd1bc733
add
public void add(ModelProblemCollectorRequest req)
{    if (!ModelProblem.Severity.WARNING.equals(req.getSeverity())) {        result.addMessage(req.getMessage());    }}
2804bf6af95d62a8dbf737c8ec8f9d18857009e0c5e31fcbfdc1c8f37e3975f6
getMessageCount
public int getMessageCount()
{    return messages.size();}
f4a33f791395f205d1b9c3045b6b7d413d4d1c1b9e43a5c635778535ec0f6687
getMessage
public String getMessage(int i)
{    return messages.get(i);}
1b224fd783156845b0248b2e66d47ad6352462255c64eeb3ba955f3f21767022
getMessages
public List<String> getMessages()
{    return Collections.unmodifiableList(messages);}
d6aa387cb0a1e6e3cdf67c651a05b88a5b7a3a95209474fcc9eee24f17e0cf77
addMessage
public void addMessage(String message)
{    messages.add(message);}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return render("");}
5aab72c6000aec3505259f087147ffee4e7c139ae05b1b9e4634b09e84a134ed
render
public String render(String indentation)
{    if (messages.size() == 0) {        return indentation + "There were no validation errors.";    }    StringBuilder message = new StringBuilder();        for (int i = 0; i < messages.size(); i++) {        message.append(indentation).append('[').append(i).append("]  ").append(messages.get(i)).append(NEWLINE);    }    return message.toString();}
6dbb55585f8912eb53068978297e11fb324bb5da9d2bd564fe6aebaa3b1d8930
getMirror
public Mirror getMirror(ArtifactRepository repository, List<Mirror> mirrors)
{    String repoId = repository.getId();    if (repoId != null && mirrors != null) {        for (Mirror mirror : mirrors) {            if (repoId.equals(mirror.getMirrorOf()) && matchesLayout(repository, mirror)) {                return mirror;            }        }        for (Mirror mirror : mirrors) {            if (matchPattern(repository, mirror.getMirrorOf()) && matchesLayout(repository, mirror)) {                return mirror;            }        }    }    return null;}
01a44c85fde8d23e359ae51f0c5954e8bd0afcd71e0f3150b5a3aa3d6e6a55f5
matchPattern
 static boolean matchPattern(ArtifactRepository originalRepository, String pattern)
{    boolean result = false;    String originalId = originalRepository.getId();        if (WILDCARD.equals(pattern) || pattern.equals(originalId)) {        result = true;    } else {                String[] repos = pattern.split(",");        for (String repo : repos) {            repo = repo.trim();                        if (repo.length() > 1 && repo.startsWith("!")) {                if (repo.substring(1).equals(originalId)) {                                        result = false;                    break;                }            } else             if (repo.equals(originalId)) {                result = true;                break;            } else             if (EXTERNAL_WILDCARD.equals(repo) && isExternalRepo(originalRepository)) {                result = true;                        } else if (WILDCARD.equals(repo)) {                result = true;                        }        }    }    return result;}
e06eee06fd59f6af06dd449f6aa32486413ed4d86e1d41e91efe54a6f90fae35
isExternalRepo
 static boolean isExternalRepo(ArtifactRepository originalRepository)
{    try {        URL url = new URL(originalRepository.getUrl());        return !(url.getHost().equals("localhost") || url.getHost().equals("127.0.0.1") || url.getProtocol().equals("file"));    } catch (MalformedURLException e) {                return false;    }}
9a1303fb6568c76af81feff79851f1cd6b1d88710fa7f311f2e5446203fc5746
matchesLayout
 static boolean matchesLayout(ArtifactRepository repository, Mirror mirror)
{    return matchesLayout(RepositoryUtils.getLayout(repository), mirror.getMirrorOfLayouts());}
388c238244ab80806f0f1353c44d997553360fd12c96231794296a740326b915
matchesLayout
 static boolean matchesLayout(String repoLayout, String mirrorLayout)
{    boolean result = false;        if (StringUtils.isEmpty(mirrorLayout) || WILDCARD.equals(mirrorLayout)) {        result = true;    } else if (mirrorLayout.equals(repoLayout)) {        result = true;    } else {                String[] layouts = mirrorLayout.split(",");        for (String layout : layouts) {                        if (layout.length() > 1 && layout.startsWith("!")) {                if (layout.substring(1).equals(repoLayout)) {                                        result = false;                    break;                }            } else             if (layout.equals(repoLayout)) {                result = true;                break;            } else if (WILDCARD.equals(layout)) {                result = true;                        }        }    }    return result;}
0834a3b8568f82d35429c3d31e57bcf1032a5cd156b44fb6fb00ff2519dfcdc8
isUpdateRequired
public boolean isUpdateRequired(Artifact artifact, ArtifactRepository repository)
{    File file = artifact.getFile();    ArtifactRepositoryPolicy policy = artifact.isSnapshot() ? repository.getSnapshots() : repository.getReleases();    if (!policy.isEnabled()) {        if (getLogger().isDebugEnabled()) {            getLogger().debug("Skipping update check for " + artifact + " (" + file + ") from " + repository.getId() + " (" + repository.getUrl() + ")");        }        return false;    }    if (getLogger().isDebugEnabled()) {        getLogger().debug("Determining update check for " + artifact + " (" + file + ") from " + repository.getId() + " (" + repository.getUrl() + ")");    }    if (file == null) {                return true;    }    Date lastCheckDate;    if (file.exists()) {        lastCheckDate = new Date(file.lastModified());    } else {        File touchfile = getTouchfile(artifact);        lastCheckDate = readLastUpdated(touchfile, getRepositoryKey(repository));    }    return (lastCheckDate == null) || policy.checkOutOfDate(lastCheckDate);}
b33b038784c5910b3833efdb7ac9f9872d0069158da6da22949b3fc650dd72f0
isUpdateRequired
public boolean isUpdateRequired(RepositoryMetadata metadata, ArtifactRepository repository, File file)
{                            ArtifactRepositoryPolicy policy = metadata.getPolicy(repository);    if (!policy.isEnabled()) {        if (getLogger().isDebugEnabled()) {            getLogger().debug("Skipping update check for " + metadata.getKey() + " (" + file + ") from " + repository.getId() + " (" + repository.getUrl() + ")");        }        return false;    }    if (getLogger().isDebugEnabled()) {        getLogger().debug("Determining update check for " + metadata.getKey() + " (" + file + ") from " + repository.getId() + " (" + repository.getUrl() + ")");    }    if (file == null) {                return true;    }    Date lastCheckDate = readLastUpdated(metadata, repository, file);    return (lastCheckDate == null) || policy.checkOutOfDate(lastCheckDate);}
42aa903f4b0729d6a3096b4b5f34212a07a79cadb6134bee303f9024c6cdd89b
readLastUpdated
private Date readLastUpdated(RepositoryMetadata metadata, ArtifactRepository repository, File file)
{    File touchfile = getTouchfile(metadata, file);    String key = getMetadataKey(repository, file);    return readLastUpdated(touchfile, key);}
b13ed356cf82eaf2179471cf8aa85cf78a30db369af31efbb74a40cb2bc27660
getError
public String getError(Artifact artifact, ArtifactRepository repository)
{    File touchFile = getTouchfile(artifact);    return getError(touchFile, getRepositoryKey(repository));}
d74477362477b412af08c6dc819d71121679470006266ea89738cf6ab878c17e
touch
public void touch(Artifact artifact, ArtifactRepository repository, String error)
{    File file = artifact.getFile();    File touchfile = getTouchfile(artifact);    if (file.exists()) {        touchfile.delete();    } else {        writeLastUpdated(touchfile, getRepositoryKey(repository), error);    }}
2e4ac1d6f7f932ba77aff4a3773f91b8f2075e47824579767d132e2dc0b1fbc0
touch
public void touch(RepositoryMetadata metadata, ArtifactRepository repository, File file)
{    File touchfile = getTouchfile(metadata, file);    String key = getMetadataKey(repository, file);    writeLastUpdated(touchfile, key, null);}
05209661ca59dedf9933bc3f2c54e04b7c962d736c78ba8dac5a2642e79017cb
getMetadataKey
 String getMetadataKey(ArtifactRepository repository, File file)
{    return repository.getId() + '.' + file.getName() + LAST_UPDATE_TAG;}
0f59e5e2fcae16c93f16953654443d4c64d5dd94ee8f8d99d8d52c1050304264
getRepositoryKey
 String getRepositoryKey(ArtifactRepository repository)
{    StringBuilder buffer = new StringBuilder(256);    Proxy proxy = repository.getProxy();    if (proxy != null) {        if (proxy.getUserName() != null) {            int hash = (proxy.getUserName() + proxy.getPassword()).hashCode();            buffer.append(hash).append('@');        }        buffer.append(proxy.getHost()).append(':').append(proxy.getPort()).append('>');    }        Authentication auth = repository.getAuthentication();    if (auth != null) {        int hash = (auth.getUsername() + auth.getPassword()).hashCode();        buffer.append(hash).append('@');    }        buffer.append(repository.getUrl());    return buffer.toString();}
62b57df440540c04e3d342bc7ef64f6fc137413bc131d3f557834febd246c44d
writeLastUpdated
private void writeLastUpdated(File touchfile, String key, String error)
{    synchronized (touchfile.getAbsolutePath().intern()) {        if (!touchfile.getParentFile().exists() && !touchfile.getParentFile().mkdirs()) {            getLogger().debug("Failed to create directory: " + touchfile.getParent() + " for tracking artifact metadata resolution.");            return;        }        FileChannel channel = null;        FileLock lock = null;        try {            Properties props = new Properties();            channel = new RandomAccessFile(touchfile, "rw").getChannel();            lock = channel.lock();            if (touchfile.canRead()) {                getLogger().debug("Reading resolution-state from: " + touchfile);                props.load(Channels.newInputStream(channel));            }            props.setProperty(key, Long.toString(System.currentTimeMillis()));            if (error != null) {                props.setProperty(key + ERROR_KEY_SUFFIX, error);            } else {                props.remove(key + ERROR_KEY_SUFFIX);            }            getLogger().debug("Writing resolution-state to: " + touchfile);            channel.truncate(0);            props.store(Channels.newOutputStream(channel), "Last modified on: " + new Date());            lock.release();            lock = null;            channel.close();            channel = null;        } catch (IOException e) {            getLogger().debug("Failed to record lastUpdated information for resolution.\nFile: " + touchfile.toString() + "; key: " + key, e);        } finally {            if (lock != null) {                try {                    lock.release();                } catch (IOException e) {                    getLogger().debug("Error releasing exclusive lock for resolution tracking file: " + touchfile, e);                }            }            if (channel != null) {                try {                    channel.close();                } catch (IOException e) {                    getLogger().debug("Error closing FileChannel for resolution tracking file: " + touchfile, e);                }            }        }    }}
5864464414a4db02affa7ab0a28984b0df5a1121ba0460e7625d26d37dbe2f82
readLastUpdated
 Date readLastUpdated(File touchfile, String key)
{    getLogger().debug("Searching for " + key + " in resolution tracking file.");    Properties props = read(touchfile);    if (props != null) {        String rawVal = props.getProperty(key);        if (rawVal != null) {            try {                return new Date(Long.parseLong(rawVal));            } catch (NumberFormatException e) {                getLogger().debug("Cannot parse lastUpdated date: \'" + rawVal + "\'. Ignoring.", e);            }        }    }    return null;}
8161898f091517de71adc7795e20538c7a6e52360282fb5d9d54454ca00e0732
getError
private String getError(File touchFile, String key)
{    Properties props = read(touchFile);    if (props != null) {        return props.getProperty(key + ERROR_KEY_SUFFIX);    }    return null;}
bfdb6b1880ccff895ea70be3ac3b38537c12f630cdcb2c352d4fbc8596cf6042
read
private Properties read(File touchfile)
{    if (!touchfile.canRead()) {        getLogger().debug("Skipped unreadable resolution tracking file " + touchfile);        return null;    }    synchronized (touchfile.getAbsolutePath().intern()) {        FileInputStream in = null;        FileLock lock = null;        try {            Properties props = new Properties();            in = new FileInputStream(touchfile);            lock = in.getChannel().lock(0, Long.MAX_VALUE, true);            getLogger().debug("Reading resolution-state from: " + touchfile);            props.load(in);            lock.release();            lock = null;            in.close();            in = null;            return props;        } catch (IOException e) {            getLogger().debug("Failed to read resolution tracking file " + touchfile, e);            return null;        } finally {            if (lock != null) {                try {                    lock.release();                } catch (IOException e) {                    getLogger().debug("Error releasing shared lock for resolution tracking file: " + touchfile, e);                }            }            if (in != null) {                try {                    in.close();                } catch (IOException e) {                    getLogger().debug("Error closing FileChannel for resolution tracking file: " + touchfile, e);                }            }        }    }}
790ae9a0e7d5bff6902d76e97b92102e2d9bc923b8b73dcfdcc8c35b09d6238b
getTouchfile
 File getTouchfile(Artifact artifact)
{    StringBuilder sb = new StringBuilder(128);    sb.append(artifact.getArtifactId());    sb.append('-').append(artifact.getBaseVersion());    if (artifact.getClassifier() != null) {        sb.append('-').append(artifact.getClassifier());    }    sb.append('.').append(artifact.getType()).append(LAST_UPDATE_TAG);    return new File(artifact.getFile().getParentFile(), sb.toString());}
de8dcdc50cee33d91a9003ea413a5d2fb1eb91fdfcb0e92d4055b3a2290dbc84
getTouchfile
 File getTouchfile(RepositoryMetadata metadata, File file)
{    return new File(file.getParent(), TOUCHFILE_NAME);}
a9a9f97e747a740ff63a0606a72de2db7f27f61294b2a212e6716d1b072d8e5d
getArtifact
public void getArtifact(Artifact artifact, ArtifactRepository repository, TransferListener downloadMonitor, boolean force) throws TransferFailedException, ResourceDoesNotExistException
{    String remotePath = repository.pathOf(artifact);    ArtifactRepositoryPolicy policy = artifact.isSnapshot() ? repository.getSnapshots() : repository.getReleases();    if (!policy.isEnabled()) {        logger.debug("Skipping disabled repository " + repository.getId() + " for resolution of " + artifact.getId());    } else if (artifact.isSnapshot() || !artifact.getFile().exists()) {        if (force || updateCheckManager.isUpdateRequired(artifact, repository)) {            logger.debug("Trying repository " + repository.getId() + " for resolution of " + artifact.getId() + " from " + remotePath);            try {                getRemoteFile(repository, artifact.getFile(), remotePath, downloadMonitor, policy.getChecksumPolicy(), false);                updateCheckManager.touch(artifact, repository, null);            } catch (ResourceDoesNotExistException e) {                updateCheckManager.touch(artifact, repository, null);                throw e;            } catch (TransferFailedException e) {                String error = (e.getMessage() != null) ? e.getMessage() : e.getClass().getSimpleName();                updateCheckManager.touch(artifact, repository, error);                throw e;            }            logger.debug("  Artifact " + artifact.getId() + " resolved to " + artifact.getFile());            artifact.setResolved(true);        } else if (!artifact.getFile().exists()) {            String error = updateCheckManager.getError(artifact, repository);            if (error != null) {                throw new TransferFailedException("Failure to resolve " + remotePath + " from " + repository.getUrl() + " was cached in the local repository. " + "Resolution will not be reattempted until the update interval of " + repository.getId() + " has elapsed or updates are forced. Original error: " + error);            } else {                throw new ResourceDoesNotExistException("Failure to resolve " + remotePath + " from " + repository.getUrl() + " was cached in the local repository. " + "Resolution will not be reattempted until the update interval of " + repository.getId() + " has elapsed or updates are forced.");            }        }    }}
8d74e3b17fcdacb0083757a8408a9f72ed218de29691384e2c2913edcbb2e5ec
getArtifact
public void getArtifact(Artifact artifact, List<ArtifactRepository> remoteRepositories, TransferListener downloadMonitor, boolean force) throws TransferFailedException, ResourceDoesNotExistException
{    TransferFailedException tfe = null;    for (ArtifactRepository repository : remoteRepositories) {        try {            getArtifact(artifact, repository, downloadMonitor, force);            if (artifact.isResolved()) {                artifact.setRepository(repository);                break;            }        } catch (ResourceDoesNotExistException e) {                                    logger.debug("Unable to find artifact " + artifact.getId() + " in repository " + repository.getId() + " (" + repository.getUrl() + ")", e);        } catch (TransferFailedException e) {            tfe = e;            String msg = "Unable to get artifact " + artifact.getId() + " from repository " + repository.getId() + " (" + repository.getUrl() + "): " + e.getMessage();            if (logger.isDebugEnabled()) {                logger.warn(msg, e);            } else {                logger.warn(msg);            }        }    }        if (!artifact.getFile().exists()) {        if (tfe != null) {            throw tfe;        } else {            throw new ResourceDoesNotExistException("Unable to download the artifact from any repository");        }    }}
84958b69ccc19b4693cc05f5db3d1668fd4e658aca9a199fbf41c0d186767f4e
getArtifactMetadata
public void getArtifactMetadata(ArtifactMetadata metadata, ArtifactRepository repository, File destination, String checksumPolicy) throws TransferFailedException, ResourceDoesNotExistException
{    String remotePath = repository.pathOfRemoteRepositoryMetadata(metadata);    getRemoteFile(repository, destination, remotePath, null, checksumPolicy, true);}
9377c78e95bdde3154e86b0ca8688d59ac0f0b8586af59197aa3bee8b898abca
getArtifactMetadataFromDeploymentRepository
public void getArtifactMetadataFromDeploymentRepository(ArtifactMetadata metadata, ArtifactRepository repository, File destination, String checksumPolicy) throws TransferFailedException, ResourceDoesNotExistException
{    String remotePath = repository.pathOfRemoteRepositoryMetadata(metadata);    getRemoteFile(repository, destination, remotePath, null, checksumPolicy, true);}
dfe5bbc0bb9103156410d838230275547e0b2563c2d45bf0e576a754041732de
connectWagon
private void connectWagon(Wagon wagon, ArtifactRepository repository) throws ConnectionException, AuthenticationException
{        if (legacySupport.getRepositorySession() != null) {        String userAgent = ConfigUtils.getString(legacySupport.getRepositorySession(), null, ConfigurationProperties.USER_AGENT);        if (userAgent == null) {            Properties headers = new Properties();            headers.put("User-Agent", ConfigUtils.getString(legacySupport.getRepositorySession(), "Maven", ConfigurationProperties.USER_AGENT));            try {                Method setHttpHeaders = wagon.getClass().getMethod("setHttpHeaders", Properties.class);                setHttpHeaders.invoke(wagon, headers);            } catch (NoSuchMethodException e) {                        } catch (Exception e) {                logger.debug("Could not set user agent for wagon " + wagon.getClass().getName() + ": " + e);            }        }    }    if (repository.getProxy() != null && logger.isDebugEnabled()) {        logger.debug("Using proxy " + repository.getProxy().getHost() + ":" + repository.getProxy().getPort() + " for " + repository.getUrl());    }    if (repository.getAuthentication() != null && repository.getProxy() != null) {        wagon.connect(new Repository(repository.getId(), repository.getUrl()), authenticationInfo(repository), proxyInfo(repository));    } else if (repository.getAuthentication() != null) {        wagon.connect(new Repository(repository.getId(), repository.getUrl()), authenticationInfo(repository));    } else if (repository.getProxy() != null) {        wagon.connect(new Repository(repository.getId(), repository.getUrl()), proxyInfo(repository));    } else {        wagon.connect(new Repository(repository.getId(), repository.getUrl()));    }}
8788bb2ff783d7e15f1258ebb509636c238bfb8548f8df6cf4c442e5f1f9bdd7
authenticationInfo
private AuthenticationInfo authenticationInfo(ArtifactRepository repository)
{    AuthenticationInfo ai = new AuthenticationInfo();    ai.setUserName(repository.getAuthentication().getUsername());    ai.setPassword(repository.getAuthentication().getPassword());    return ai;}
e4bdbb944d2f4c7baa291e766e195f57f4b2f7203fbf8aafe19db540c2eeb404
proxyInfo
private ProxyInfo proxyInfo(ArtifactRepository repository)
{    ProxyInfo proxyInfo = new ProxyInfo();    proxyInfo.setHost(repository.getProxy().getHost());    proxyInfo.setType(repository.getProxy().getProtocol());    proxyInfo.setPort(repository.getProxy().getPort());    proxyInfo.setNonProxyHosts(repository.getProxy().getNonProxyHosts());    proxyInfo.setUserName(repository.getProxy().getUserName());    proxyInfo.setPassword(repository.getProxy().getPassword());    return proxyInfo;}
e0b318e07024ccdef427400697c424e0bff4f9c8d3f66e7863f8c6e07993ce9b
getRemoteFile
public void getRemoteFile(ArtifactRepository repository, File destination, String remotePath, TransferListener downloadMonitor, String checksumPolicy, boolean force) throws TransferFailedException, ResourceDoesNotExistException
{    String protocol = repository.getProtocol();    Wagon wagon;    try {        wagon = getWagon(protocol);    } catch (UnsupportedProtocolException e) {        throw new TransferFailedException("Unsupported Protocol: '" + protocol + "': " + e.getMessage(), e);    }    if (downloadMonitor != null) {        wagon.addTransferListener(downloadMonitor);    }    File temp = new File(destination + ".tmp");    temp.deleteOnExit();    boolean downloaded = false;    try {        connectWagon(wagon, repository);        boolean firstRun = true;        boolean retry = true;                while (firstRun || retry) {            ChecksumObserver md5ChecksumObserver = null;            ChecksumObserver sha1ChecksumObserver = null;            try {                                int i = 0;                md5ChecksumObserver = addChecksumObserver(wagon, CHECKSUM_ALGORITHMS[i++]);                sha1ChecksumObserver = addChecksumObserver(wagon, CHECKSUM_ALGORITHMS[i++]);                                retry = false;                                if (destination.exists() && !force) {                    try {                        downloaded = wagon.getIfNewer(remotePath, temp, destination.lastModified());                        if (!downloaded) {                                                        destination.setLastModified(System.currentTimeMillis());                        }                    } catch (UnsupportedOperationException e) {                                                wagon.get(remotePath, temp);                        downloaded = true;                    }                } else {                    wagon.get(remotePath, temp);                    downloaded = true;                }            } finally {                wagon.removeTransferListener(md5ChecksumObserver);                wagon.removeTransferListener(sha1ChecksumObserver);            }            if (downloaded) {                                if (downloadMonitor != null) {                    wagon.removeTransferListener(downloadMonitor);                }                                try {                    verifyChecksum(sha1ChecksumObserver, destination, temp, remotePath, ".sha1", wagon);                } catch (ChecksumFailedException e) {                                        if (firstRun) {                        logger.warn("*** CHECKSUM FAILED - " + e.getMessage() + " - RETRYING");                        retry = true;                    } else {                        handleChecksumFailure(checksumPolicy, e.getMessage(), e.getCause());                    }                } catch (ResourceDoesNotExistException sha1TryException) {                    logger.debug("SHA1 not found, trying MD5: " + sha1TryException.getMessage());                                        try {                        verifyChecksum(md5ChecksumObserver, destination, temp, remotePath, ".md5", wagon);                    } catch (ChecksumFailedException e) {                                                if (firstRun) {                            retry = true;                        } else {                            handleChecksumFailure(checksumPolicy, e.getMessage(), e.getCause());                        }                    } catch (ResourceDoesNotExistException md5TryException) {                                                handleChecksumFailure(checksumPolicy, "Error retrieving checksum file for " + remotePath, md5TryException);                    }                }                                if (downloadMonitor != null) {                    wagon.addTransferListener(downloadMonitor);                }            }                        firstRun = false;        }    } catch (ConnectionException e) {        throw new TransferFailedException("Connection failed: " + e.getMessage(), e);    } catch (AuthenticationException e) {        throw new TransferFailedException("Authentication failed: " + e.getMessage(), e);    } catch (AuthorizationException e) {        throw new TransferFailedException("Authorization failed: " + e.getMessage(), e);    } finally {                if (downloadMonitor != null) {            wagon.removeTransferListener(downloadMonitor);        }        disconnectWagon(wagon);        releaseWagon(protocol, wagon);    }    if (downloaded) {        if (!temp.exists()) {            throw new ResourceDoesNotExistException("Downloaded file does not exist: " + temp);        }                if (!temp.renameTo(destination)) {            try {                FileUtils.copyFile(temp, destination);                if (!temp.delete()) {                    temp.deleteOnExit();                }            } catch (IOException e) {                throw new TransferFailedException("Error copying temporary file to the final destination: " + e.getMessage(), e);            }        }    }}
1f32c3dc82963054f87d1ac7601174837e959b303642ca1c4bc561b9def6d05b
putArtifact
public void putArtifact(File source, Artifact artifact, ArtifactRepository deploymentRepository, TransferListener downloadMonitor) throws TransferFailedException
{    putRemoteFile(deploymentRepository, source, deploymentRepository.pathOf(artifact), downloadMonitor);}
65cd8fa1a1d02491754f2407c4e5280dc29ba3a6386630c71f2332bcd6572805
putArtifactMetadata
public void putArtifactMetadata(File source, ArtifactMetadata artifactMetadata, ArtifactRepository repository) throws TransferFailedException
{    logger.info("Uploading " + artifactMetadata);    putRemoteFile(repository, source, repository.pathOfRemoteRepositoryMetadata(artifactMetadata), null);}
5f4dac347bba9330fed5e8c897fdafb6b5c1f1be856ba5845c7736ad12786dd6
putRemoteFile
public void putRemoteFile(ArtifactRepository repository, File source, String remotePath, TransferListener downloadMonitor) throws TransferFailedException
{    String protocol = repository.getProtocol();    Wagon wagon;    try {        wagon = getWagon(protocol);    } catch (UnsupportedProtocolException e) {        throw new TransferFailedException("Unsupported Protocol: '" + protocol + "': " + e.getMessage(), e);    }    if (downloadMonitor != null) {        wagon.addTransferListener(downloadMonitor);    }    Map<String, ChecksumObserver> checksums = new HashMap<>(2);    Map<String, String> sums = new HashMap<>(2);        for (int i = 0; i < CHECKSUM_IDS.length; i++) {        checksums.put(CHECKSUM_IDS[i], addChecksumObserver(wagon, CHECKSUM_ALGORITHMS[i]));    }    List<File> temporaryFiles = new ArrayList<>();    try {        try {            connectWagon(wagon, repository);            wagon.put(source, remotePath);        } finally {            if (downloadMonitor != null) {                wagon.removeTransferListener(downloadMonitor);            }        }                for (String extension : checksums.keySet()) {            ChecksumObserver observer = checksums.get(extension);            sums.put(extension, observer.getActualChecksum());        }                for (String extension : checksums.keySet()) {                        File temp = File.createTempFile("maven-artifact", null);            temp.deleteOnExit();            FileUtils.fileWrite(temp.getAbsolutePath(), "UTF-8", sums.get(extension));            temporaryFiles.add(temp);            wagon.put(temp, remotePath + "." + extension);        }    } catch (ConnectionException e) {        throw new TransferFailedException("Connection failed: " + e.getMessage(), e);    } catch (AuthenticationException e) {        throw new TransferFailedException("Authentication failed: " + e.getMessage(), e);    } catch (AuthorizationException e) {        throw new TransferFailedException("Authorization failed: " + e.getMessage(), e);    } catch (ResourceDoesNotExistException e) {        throw new TransferFailedException("Resource to deploy not found: " + e.getMessage(), e);    } catch (IOException e) {        throw new TransferFailedException("Error creating temporary file for deployment: " + e.getMessage(), e);    } finally {                cleanupTemporaryFiles(temporaryFiles);                for (String id : CHECKSUM_IDS) {            TransferListener checksumListener = checksums.get(id);            if (checksumListener != null) {                wagon.removeTransferListener(checksumListener);            }        }        disconnectWagon(wagon);        releaseWagon(protocol, wagon);    }}
f0a2b293776dd1c9fee26414e90b479c64a31d8d5b981dca430484010be6a0d8
cleanupTemporaryFiles
private void cleanupTemporaryFiles(List<File> files)
{    for (File file : files) {                if (!file.delete()) {            logger.warn("skip failed to delete temporary file : " + file.getAbsolutePath());            file.deleteOnExit();        }    }}
dba39a8d09ee3f4c4cd0fae2ebdb8d032f4012e108f55342e8c4266ba78b8dc4
addChecksumObserver
private ChecksumObserver addChecksumObserver(Wagon wagon, String algorithm) throws TransferFailedException
{    try {        ChecksumObserver checksumObserver = new ChecksumObserver(algorithm);        wagon.addTransferListener(checksumObserver);        return checksumObserver;    } catch (NoSuchAlgorithmException e) {        throw new TransferFailedException("Unable to add checksum for unsupported algorithm " + algorithm, e);    }}
f0cfbada27b51aad39f832cc793579f2e962f9873d578495ad97abb880e92f5c
handleChecksumFailure
private void handleChecksumFailure(String checksumPolicy, String message, Throwable cause) throws ChecksumFailedException
{    if (ArtifactRepositoryPolicy.CHECKSUM_POLICY_FAIL.equals(checksumPolicy)) {        throw new ChecksumFailedException(message, cause);    } else if (!ArtifactRepositoryPolicy.CHECKSUM_POLICY_IGNORE.equals(checksumPolicy)) {                logger.warn("*** CHECKSUM FAILED - " + message + " - IGNORING");    }}
824293045a87136d58683dee3c2a2ddaa748618503794d2204c4c6c69380a779
verifyChecksum
private void verifyChecksum(ChecksumObserver checksumObserver, File destination, File tempDestination, String remotePath, String checksumFileExtension, Wagon wagon) throws ResourceDoesNotExistException, TransferFailedException, AuthorizationException
{    try {                String actualChecksum = checksumObserver.getActualChecksum();        File tempChecksumFile = new File(tempDestination + checksumFileExtension + ".tmp");        tempChecksumFile.deleteOnExit();        wagon.get(remotePath + checksumFileExtension, tempChecksumFile);        String expectedChecksum = FileUtils.fileRead(tempChecksumFile, "UTF-8");                expectedChecksum = expectedChecksum.trim();                if (expectedChecksum.regionMatches(true, 0, "MD", 0, 2) || expectedChecksum.regionMatches(true, 0, "SHA", 0, 3)) {            int lastSpacePos = expectedChecksum.lastIndexOf(' ');            expectedChecksum = expectedChecksum.substring(lastSpacePos + 1);        } else {                        int spacePos = expectedChecksum.indexOf(' ');            if (spacePos != -1) {                expectedChecksum = expectedChecksum.substring(0, spacePos);            }        }        if (expectedChecksum.equalsIgnoreCase(actualChecksum)) {            File checksumFile = new File(destination + checksumFileExtension);            if (checksumFile.exists()) {                                checksumFile.delete();            }            FileUtils.copyFile(tempChecksumFile, checksumFile);            if (!tempChecksumFile.delete()) {                tempChecksumFile.deleteOnExit();            }        } else {            throw new ChecksumFailedException("Checksum failed on download: local = '" + actualChecksum + "'; remote = '" + expectedChecksum + "'");        }    } catch (IOException e) {        throw new ChecksumFailedException("Invalid checksum file", e);    }}
90d309d0e8973d43d42e95f55dee34f7ecde1c75d9e767e30e3f47196461af23
disconnectWagon
private void disconnectWagon(Wagon wagon)
{    try {        wagon.disconnect();    } catch (ConnectionException e) {        logger.error("Problem disconnecting from wagon - ignoring: " + e.getMessage());    }}
69a0f669e0004e2e930d7635fd53e2bb3613c60f63d323eb1d6b3f4d07527a01
releaseWagon
private void releaseWagon(String protocol, Wagon wagon)
{    try {        container.release(wagon);    } catch (ComponentLifecycleException e) {        logger.error("Problem releasing wagon - ignoring: " + e.getMessage());        logger.debug("", e);    }}
eb935f1db89416ad6b5406464960d32ee0484c834aa14a8d18b3d6ecfc53485e
getWagon
public Wagon getWagon(Repository repository) throws UnsupportedProtocolException
{    return getWagon(repository.getProtocol());}
41bc7a80cd174db4d338b6cf811b9868a5da53bc9cc7e2fd7715fb9fd54b666a
getWagon
public Wagon getWagon(String protocol) throws UnsupportedProtocolException
{    if (protocol == null) {        throw new UnsupportedProtocolException("Unspecified protocol");    }    String hint = protocol.toLowerCase(java.util.Locale.ENGLISH);    Wagon wagon;    try {        wagon = container.lookup(Wagon.class, hint);    } catch (ComponentLookupException e) {        throw new UnsupportedProtocolException("Cannot find wagon which supports the requested protocol: " + protocol, e);    }    return wagon;}
9dcc665db886a44495acf2d5a6ffdbbe51c603897f3a7adbec1d3ba2cac656c9
createArtifact
public Artifact createArtifact(String groupId, String artifactId, String version, String scope, String type)
{    return artifactFactory.createArtifact(groupId, artifactId, version, scope, type);}
116d7476418b06efc4a2719ff335ac0555aed715dfc0256cd0c74f7060bb73a9
createArtifact
public Artifact createArtifact(String groupId, String artifactId, String version, String packaging)
{    return artifactFactory.createBuildArtifact(groupId, artifactId, version, packaging);}
306c76fcdafeefa93e242b23b802b4246a023047aeb055255e6b6197361f8357
createArtifactWithClassifier
public Artifact createArtifactWithClassifier(String groupId, String artifactId, String version, String type, String classifier)
{    return artifactFactory.createArtifactWithClassifier(groupId, artifactId, version, type, classifier);}
dd82aba3f4b0680c6f6a926e581525d46255986c7a605e25187f927cb921b9e3
createProjectArtifact
public Artifact createProjectArtifact(String groupId, String artifactId, String metaVersionId)
{    return artifactFactory.createProjectArtifact(groupId, artifactId, metaVersionId);}
d75965c2e86759799788fdab95b2fe59f7f7db5dcff143906e96ec896f6283de
createDependencyArtifact
public Artifact createDependencyArtifact(Dependency d)
{    VersionRange versionRange;    try {        versionRange = VersionRange.createFromVersionSpec(d.getVersion());    } catch (InvalidVersionSpecificationException e) {                this.logger.error(String.format("Invalid version specification '%s' creating dependency artifact '%s'.", d.getVersion(), d), e);        return null;    }    Artifact artifact = artifactFactory.createDependencyArtifact(d.getGroupId(), d.getArtifactId(), versionRange, d.getType(), d.getClassifier(), d.getScope(), d.isOptional());    if (Artifact.SCOPE_SYSTEM.equals(d.getScope()) && d.getSystemPath() != null) {        artifact.setFile(new File(d.getSystemPath()));    }    if (!d.getExclusions().isEmpty()) {        List<String> exclusions = new ArrayList<>();        for (Exclusion exclusion : d.getExclusions()) {            exclusions.add(exclusion.getGroupId() + ':' + exclusion.getArtifactId());        }        artifact.setDependencyFilter(new ExcludesArtifactFilter(exclusions));    }    return artifact;}
aca62cc728ed8ad40fc110c742801b84deece7f4e83d97c78dcdab34430a77d9
createExtensionArtifact
public Artifact createExtensionArtifact(String groupId, String artifactId, String version)
{    VersionRange versionRange;    try {        versionRange = VersionRange.createFromVersionSpec(version);    } catch (InvalidVersionSpecificationException e) {                this.logger.error(String.format("Invalid version specification '%s' creating extension artifact '%s:%s:%s'.", version, groupId, artifactId, version), e);        return null;    }    return artifactFactory.createExtensionArtifact(groupId, artifactId, versionRange);}
626d44f2026240a6644e5b7637324c86a2a6203e5a9ead2b8492aeec21d25d2b
createParentArtifact
public Artifact createParentArtifact(String groupId, String artifactId, String version)
{    return artifactFactory.createParentArtifact(groupId, artifactId, version);}
47b2231db8dbc0f6859db880e4a46547c53616f8dc0d80395fdff4a9f50f8012
createPluginArtifact
public Artifact createPluginArtifact(Plugin plugin)
{    String version = plugin.getVersion();    if (StringUtils.isEmpty(version)) {        version = "RELEASE";    }    VersionRange versionRange;    try {        versionRange = VersionRange.createFromVersionSpec(version);    } catch (InvalidVersionSpecificationException e) {                this.logger.error(String.format("Invalid version specification '%s' creating plugin artifact '%s'.", version, plugin), e);        return null;    }    return artifactFactory.createPluginArtifact(plugin.getGroupId(), plugin.getArtifactId(), versionRange);}
961d5ac8df30828191210b0febfba27cf461902a8bdfffe44a929a5e2272850a
buildArtifactRepositoryPolicy
public ArtifactRepositoryPolicy buildArtifactRepositoryPolicy(RepositoryPolicy policy)
{    boolean enabled = true;    String updatePolicy = null;    String checksumPolicy = null;    if (policy != null) {        enabled = policy.isEnabled();        if (policy.getUpdatePolicy() != null) {            updatePolicy = policy.getUpdatePolicy();        }        if (policy.getChecksumPolicy() != null) {            checksumPolicy = policy.getChecksumPolicy();        }    }    return new ArtifactRepositoryPolicy(enabled, updatePolicy, checksumPolicy);}
f5a7e8f200be2c0bab11727b8a96c04a7379c2aacf75dcf17d68c9c0032e2e39
createDefaultLocalRepository
public ArtifactRepository createDefaultLocalRepository() throws InvalidRepositoryException
{    return createLocalRepository(RepositorySystem.defaultUserLocalRepository);}
f1062cde2d10c36bf583f0f5408ebe9898ca4e7b1946ba848424b26f340c2347
createLocalRepository
public ArtifactRepository createLocalRepository(File localRepository) throws InvalidRepositoryException
{    return createRepository("file://" + localRepository.toURI().getRawPath(), RepositorySystem.DEFAULT_LOCAL_REPO_ID, true, ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS, true, ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS, ArtifactRepositoryPolicy.CHECKSUM_POLICY_IGNORE);}
62a3c7af5cd7ff2d256030427cd9176a7617fcb566da6c9ba17b729a21651dcb
createDefaultRemoteRepository
public ArtifactRepository createDefaultRemoteRepository() throws InvalidRepositoryException
{    return createRepository(RepositorySystem.DEFAULT_REMOTE_REPO_URL, RepositorySystem.DEFAULT_REMOTE_REPO_ID, true, ArtifactRepositoryPolicy.UPDATE_POLICY_DAILY, false, ArtifactRepositoryPolicy.UPDATE_POLICY_DAILY, ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN);}
2cebecf6709112d9ff50e01e3f89f7d65fad8ff0f302d1727afd96c2200bd255
createLocalRepository
public ArtifactRepository createLocalRepository(String url, String repositoryId) throws IOException
{    return createRepository(canonicalFileUrl(url), repositoryId, true, ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS, true, ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS, ArtifactRepositoryPolicy.CHECKSUM_POLICY_IGNORE);}
f0610700df6df77fdb652f55b086f99dc39937ee9f95c8e14aad854ba7d8baf8
canonicalFileUrl
private String canonicalFileUrl(String url) throws IOException
{    if (!url.startsWith("file:")) {        url = "file://" + url;    } else if (url.startsWith("file:") && !url.startsWith("file://")) {        url = "file://" + url.substring("file:".length());    }                        File localRepository = new File(url.substring("file://".length()));    if (!localRepository.isAbsolute()) {        url = "file://" + localRepository.getCanonicalPath();    }    return url;}
41d43ea96fb0228c74136a365645a34edf2ecef7753c54e332fa0c5228305fa5
resolve
public ArtifactResolutionResult resolve(ArtifactResolutionRequest request)
{    /*         * Probably is not worth it, but here I make sure I restore request         * to its original state.         */    try {        LocalArtifactRepository ideWorkspace = plexus.lookup(LocalArtifactRepository.class, LocalArtifactRepository.IDE_WORKSPACE);        if (request.getLocalRepository() instanceof DelegatingLocalArtifactRepository) {            DelegatingLocalArtifactRepository delegatingLocalRepository = (DelegatingLocalArtifactRepository) request.getLocalRepository();            LocalArtifactRepository orig = delegatingLocalRepository.getIdeWorkspace();            delegatingLocalRepository.setIdeWorkspace(ideWorkspace);            try {                return artifactResolver.resolve(request);            } finally {                delegatingLocalRepository.setIdeWorkspace(orig);            }        } else {            ArtifactRepository localRepository = request.getLocalRepository();            DelegatingLocalArtifactRepository delegatingLocalRepository = new DelegatingLocalArtifactRepository(localRepository);            delegatingLocalRepository.setIdeWorkspace(ideWorkspace);            request.setLocalRepository(delegatingLocalRepository);            try {                return artifactResolver.resolve(request);            } finally {                request.setLocalRepository(localRepository);            }        }    } catch (ComponentLookupException e) {        }    return artifactResolver.resolve(request);}
6b77819ca5f2dd829929aaa18de753c98ae8553a6896c9ed3a568965007e9071
getEffectiveRepositories
public List<ArtifactRepository> getEffectiveRepositories(List<ArtifactRepository> repositories)
{    if (repositories == null) {        return null;    }    Map<String, List<ArtifactRepository>> reposByKey = new LinkedHashMap<>();    for (ArtifactRepository repository : repositories) {        String key = repository.getId();        List<ArtifactRepository> aliasedRepos = reposByKey.get(key);        if (aliasedRepos == null) {            aliasedRepos = new ArrayList<>();            reposByKey.put(key, aliasedRepos);        }        aliasedRepos.add(repository);    }    List<ArtifactRepository> effectiveRepositories = new ArrayList<>();    for (List<ArtifactRepository> aliasedRepos : reposByKey.values()) {        List<ArtifactRepository> mirroredRepos = new ArrayList<>();        List<ArtifactRepositoryPolicy> releasePolicies = new ArrayList<>(aliasedRepos.size());        for (ArtifactRepository aliasedRepo : aliasedRepos) {            releasePolicies.add(aliasedRepo.getReleases());            mirroredRepos.addAll(aliasedRepo.getMirroredRepositories());        }        ArtifactRepositoryPolicy releasePolicy = getEffectivePolicy(releasePolicies);        List<ArtifactRepositoryPolicy> snapshotPolicies = new ArrayList<>(aliasedRepos.size());        for (ArtifactRepository aliasedRepo : aliasedRepos) {            snapshotPolicies.add(aliasedRepo.getSnapshots());        }        ArtifactRepositoryPolicy snapshotPolicy = getEffectivePolicy(snapshotPolicies);        ArtifactRepository aliasedRepo = aliasedRepos.get(0);        ArtifactRepository effectiveRepository = createArtifactRepository(aliasedRepo.getId(), aliasedRepo.getUrl(), aliasedRepo.getLayout(), snapshotPolicy, releasePolicy);        effectiveRepository.setAuthentication(aliasedRepo.getAuthentication());        effectiveRepository.setProxy(aliasedRepo.getProxy());        effectiveRepository.setMirroredRepositories(mirroredRepos);        effectiveRepositories.add(effectiveRepository);    }    return effectiveRepositories;}
302a0cd726eb270b48731c40e8419d560d1bb29fdd4494411124aa23ac00d41b
getEffectivePolicy
private ArtifactRepositoryPolicy getEffectivePolicy(Collection<ArtifactRepositoryPolicy> policies)
{    ArtifactRepositoryPolicy effectivePolicy = null;    for (ArtifactRepositoryPolicy policy : policies) {        if (effectivePolicy == null) {            effectivePolicy = new ArtifactRepositoryPolicy(policy);        } else {            effectivePolicy.merge(policy);        }    }    return effectivePolicy;}
6dbb55585f8912eb53068978297e11fb324bb5da9d2bd564fe6aebaa3b1d8930
getMirror
public Mirror getMirror(ArtifactRepository repository, List<Mirror> mirrors)
{    return mirrorSelector.getMirror(repository, mirrors);}
eea68400fdcf34a185329c7c2d13b1d683d9d45106e381da55c51c5fa75e4b29
injectMirror
public void injectMirror(List<ArtifactRepository> repositories, List<Mirror> mirrors)
{    if (repositories != null && mirrors != null) {        for (ArtifactRepository repository : repositories) {            Mirror mirror = getMirror(repository, mirrors);            injectMirror(repository, mirror);        }    }}
12dd86a53bb9d31bc27df74b58c525c15ae9682fd4c4e4e541a6b7dab226a9f3
getMirror
private Mirror getMirror(RepositorySystemSession session, ArtifactRepository repository)
{    if (session != null) {        org.eclipse.aether.repository.MirrorSelector selector = session.getMirrorSelector();        if (selector != null) {            RemoteRepository repo = selector.getMirror(RepositoryUtils.toRepo(repository));            if (repo != null) {                Mirror mirror = new Mirror();                mirror.setId(repo.getId());                mirror.setUrl(repo.getUrl());                mirror.setLayout(repo.getContentType());                return mirror;            }        }    }    return null;}
7b51646ca668c6e9862ffcbf5b4a0410b275f09f503985296422e249cea4033b
injectMirror
public void injectMirror(RepositorySystemSession session, List<ArtifactRepository> repositories)
{    if (repositories != null && session != null) {        for (ArtifactRepository repository : repositories) {            Mirror mirror = getMirror(session, repository);            injectMirror(repository, mirror);        }    }}
23ce9437861c20f2dff0199d6cd0b58e202edc82f7417b16e2a748aa35cf9165
injectMirror
private void injectMirror(ArtifactRepository repository, Mirror mirror)
{    if (mirror != null) {        ArtifactRepository original = createArtifactRepository(repository.getId(), repository.getUrl(), repository.getLayout(), repository.getSnapshots(), repository.getReleases());        repository.setMirroredRepositories(Collections.singletonList(original));        repository.setId(mirror.getId());        repository.setUrl(mirror.getUrl());        if (StringUtils.isNotEmpty(mirror.getLayout())) {            repository.setLayout(getLayout(mirror.getLayout()));        }    }}
3d16fc60588729d41c0e3f86be8069bfebea52e0b97d80a8252a105c236bf821
injectAuthentication
public void injectAuthentication(List<ArtifactRepository> repositories, List<Server> servers)
{    if (repositories != null) {        Map<String, Server> serversById = new HashMap<>();        if (servers != null) {            for (Server server : servers) {                if (!serversById.containsKey(server.getId())) {                    serversById.put(server.getId(), server);                }            }        }        for (ArtifactRepository repository : repositories) {            Server server = serversById.get(repository.getId());            if (server != null) {                SettingsDecryptionRequest request = new DefaultSettingsDecryptionRequest(server);                SettingsDecryptionResult result = settingsDecrypter.decrypt(request);                server = result.getServer();                if (logger.isDebugEnabled()) {                    for (SettingsProblem problem : result.getProblems()) {                        logger.debug(problem.getMessage(), problem.getException());                    }                }                Authentication authentication = new Authentication(server.getUsername(), server.getPassword());                authentication.setPrivateKey(server.getPrivateKey());                authentication.setPassphrase(server.getPassphrase());                repository.setAuthentication(authentication);            } else {                repository.setAuthentication(null);            }        }    }}
d9456a069778e126d9c8bed79acf3a82c5e43365056cbde842b010a530c40b9c
getAuthentication
private Authentication getAuthentication(RepositorySystemSession session, ArtifactRepository repository)
{    if (session != null) {        AuthenticationSelector selector = session.getAuthenticationSelector();        if (selector != null) {            RemoteRepository repo = RepositoryUtils.toRepo(repository);            org.eclipse.aether.repository.Authentication auth = selector.getAuthentication(repo);            if (auth != null) {                repo = new RemoteRepository.Builder(repo).setAuthentication(auth).build();                AuthenticationContext authCtx = AuthenticationContext.forRepository(session, repo);                Authentication result = new Authentication(authCtx.get(AuthenticationContext.USERNAME), authCtx.get(AuthenticationContext.PASSWORD));                result.setPrivateKey(authCtx.get(AuthenticationContext.PRIVATE_KEY_PATH));                result.setPassphrase(authCtx.get(AuthenticationContext.PRIVATE_KEY_PASSPHRASE));                authCtx.close();                return result;            }        }    }    return null;}
24049d25ed73938e13d72fa18c664728b7252c115e7751b9af078890bd672425
injectAuthentication
public void injectAuthentication(RepositorySystemSession session, List<ArtifactRepository> repositories)
{    if (repositories != null && session != null) {        for (ArtifactRepository repository : repositories) {            repository.setAuthentication(getAuthentication(session, repository));        }    }}
05d62ea2d4f1535cfcaadaa1b880f2fbdfed44db694a764c2b41d3393f94cd83
getProxy
private org.apache.maven.settings.Proxy getProxy(ArtifactRepository repository, List<org.apache.maven.settings.Proxy> proxies)
{    if (proxies != null && repository.getProtocol() != null) {        for (org.apache.maven.settings.Proxy proxy : proxies) {            if (proxy.isActive() && repository.getProtocol().equalsIgnoreCase(proxy.getProtocol())) {                if (StringUtils.isNotEmpty(proxy.getNonProxyHosts())) {                    ProxyInfo pi = new ProxyInfo();                    pi.setNonProxyHosts(proxy.getNonProxyHosts());                    org.apache.maven.wagon.repository.Repository repo = new org.apache.maven.wagon.repository.Repository(repository.getId(), repository.getUrl());                    if (!ProxyUtils.validateNonProxyHosts(pi, repo.getHost())) {                        return proxy;                    }                } else {                    return proxy;                }            }        }    }    return null;}
c859eda9a4853c9ade33b7f3c29ed066a32fbb84a84f344160befe299bdf7a0e
injectProxy
public void injectProxy(List<ArtifactRepository> repositories, List<org.apache.maven.settings.Proxy> proxies)
{    if (repositories != null) {        for (ArtifactRepository repository : repositories) {            org.apache.maven.settings.Proxy proxy = getProxy(repository, proxies);            if (proxy != null) {                SettingsDecryptionRequest request = new DefaultSettingsDecryptionRequest(proxy);                SettingsDecryptionResult result = settingsDecrypter.decrypt(request);                proxy = result.getProxy();                if (logger.isDebugEnabled()) {                    for (SettingsProblem problem : result.getProblems()) {                        logger.debug(problem.getMessage(), problem.getException());                    }                }                Proxy p = new Proxy();                p.setHost(proxy.getHost());                p.setProtocol(proxy.getProtocol());                p.setPort(proxy.getPort());                p.setNonProxyHosts(proxy.getNonProxyHosts());                p.setUserName(proxy.getUsername());                p.setPassword(proxy.getPassword());                repository.setProxy(p);            } else {                repository.setProxy(null);            }        }    }}
6640303402957c0c2bef32ef66d1f6e85a2b19c101ebb4fc5ad9be9e8eb56a20
getProxy
private Proxy getProxy(RepositorySystemSession session, ArtifactRepository repository)
{    if (session != null) {        ProxySelector selector = session.getProxySelector();        if (selector != null) {            RemoteRepository repo = RepositoryUtils.toRepo(repository);            org.eclipse.aether.repository.Proxy proxy = selector.getProxy(repo);            if (proxy != null) {                Proxy p = new Proxy();                p.setHost(proxy.getHost());                p.setProtocol(proxy.getType());                p.setPort(proxy.getPort());                if (proxy.getAuthentication() != null) {                    repo = new RemoteRepository.Builder(repo).setProxy(proxy).build();                    AuthenticationContext authCtx = AuthenticationContext.forProxy(session, repo);                    p.setUserName(authCtx.get(AuthenticationContext.USERNAME));                    p.setPassword(authCtx.get(AuthenticationContext.PASSWORD));                    p.setNtlmDomain(authCtx.get(AuthenticationContext.NTLM_DOMAIN));                    p.setNtlmHost(authCtx.get(AuthenticationContext.NTLM_WORKSTATION));                    authCtx.close();                }                return p;            }        }    }    return null;}
ff5c8a85e02c8eeed19d9841ddf23931b4721f3b2b299841f2eba6426de17b25
injectProxy
public void injectProxy(RepositorySystemSession session, List<ArtifactRepository> repositories)
{    if (repositories != null && session != null) {        for (ArtifactRepository repository : repositories) {            repository.setProxy(getProxy(session, repository));        }    }}
3fa6a862ec16329ab6a6963e376b46c0cd34eb9721899d541b0dcc47d7d768b2
retrieve
public void retrieve(ArtifactRepository repository, File destination, String remotePath, ArtifactTransferListener transferListener) throws ArtifactTransferFailedException, ArtifactDoesNotExistException
{    try {        wagonManager.getRemoteFile(repository, destination, remotePath, TransferListenerAdapter.newAdapter(transferListener), ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN, true);    } catch (org.apache.maven.wagon.TransferFailedException e) {        throw new ArtifactTransferFailedException(getMessage(e, "Error transferring artifact."), e);    } catch (org.apache.maven.wagon.ResourceDoesNotExistException e) {        throw new ArtifactDoesNotExistException(getMessage(e, "Requested artifact does not exist."), e);    }}
fa73d8f8294b6a712710a50228d861a520d948a680d79e8a160922ed9a8322d3
publish
public void publish(ArtifactRepository repository, File source, String remotePath, ArtifactTransferListener transferListener) throws ArtifactTransferFailedException
{    try {        wagonManager.putRemoteFile(repository, source, remotePath, TransferListenerAdapter.newAdapter(transferListener));    } catch (org.apache.maven.wagon.TransferFailedException e) {        throw new ArtifactTransferFailedException(getMessage(e, "Error transferring artifact."), e);    }}
b309402b12dc0f8fb9ea64b2870c0518e622adbf953db127a16d625866718dcc
buildArtifactRepository
public ArtifactRepository buildArtifactRepository(Repository repo) throws InvalidRepositoryException
{    if (repo != null) {        String id = repo.getId();        if (StringUtils.isEmpty(id)) {            throw new InvalidRepositoryException("Repository identifier missing", "");        }        String url = repo.getUrl();        if (StringUtils.isEmpty(url)) {            throw new InvalidRepositoryException("URL missing for repository " + id, id);        }        ArtifactRepositoryPolicy snapshots = buildArtifactRepositoryPolicy(repo.getSnapshots());        ArtifactRepositoryPolicy releases = buildArtifactRepositoryPolicy(repo.getReleases());        return createArtifactRepository(id, url, getLayout(repo.getLayout()), snapshots, releases);    } else {        return null;    }}
bc70fb9a4971217a221f7d05b8913af5b638397f5560de6c27f833d1b8dc80cb
createRepository
private ArtifactRepository createRepository(String url, String repositoryId, boolean releases, String releaseUpdates, boolean snapshots, String snapshotUpdates, String checksumPolicy)
{    ArtifactRepositoryPolicy snapshotsPolicy = new ArtifactRepositoryPolicy(snapshots, snapshotUpdates, checksumPolicy);    ArtifactRepositoryPolicy releasesPolicy = new ArtifactRepositoryPolicy(releases, releaseUpdates, checksumPolicy);    return createArtifactRepository(repositoryId, url, null, snapshotsPolicy, releasesPolicy);}
247ef045f62516a909ec0913225c9c4b1ab17db2228d5d69c5ce01b2e8a17eb1
createArtifactRepository
public ArtifactRepository createArtifactRepository(String repositoryId, String url, ArtifactRepositoryLayout repositoryLayout, ArtifactRepositoryPolicy snapshots, ArtifactRepositoryPolicy releases)
{    if (repositoryLayout == null) {        repositoryLayout = layouts.get("default");    }    ArtifactRepository artifactRepository = artifactRepositoryFactory.createArtifactRepository(repositoryId, url, repositoryLayout, snapshots, releases);    return artifactRepository;}
3581b3be65a808f0f476afc2b2ab2e4f8bb2d3db31a9e58358c34b9d4d60eeff
getMessage
private static String getMessage(Throwable error, String def)
{    if (error == null) {        return def;    }    String msg = error.getMessage();    if (StringUtils.isNotEmpty(msg)) {        return msg;    }    return getMessage(error.getCause(), def);}
39a9378befb2940809037f05f8acb7eb0bd5fb06049c400feac6f9d6f1cecdcf
getLayout
private ArtifactRepositoryLayout getLayout(String id)
{    ArtifactRepositoryLayout layout = layouts.get(id);    if (layout == null) {        layout = new UnknownRepositoryLayout(id, layouts.get("default"));    }    return layout;}
09e8f13a9a603d31d64bb498b77d15572483824d843d0e82a570643192f62186
getId
public String getId()
{    return id;}
6c63652ca89949e5d136675e9b8c89f393e36286bda4d26fa63c77d8d06c4fab
pathOf
public String pathOf(Artifact artifact)
{    return fallback.pathOf(artifact);}
2bf3ce12ca84872494a2865c7a246067b1efd12dc3403ae1a3b69eb89fda872e
pathOfLocalRepositoryMetadata
public String pathOfLocalRepositoryMetadata(ArtifactMetadata metadata, ArtifactRepository repository)
{    return fallback.pathOfLocalRepositoryMetadata(metadata, repository);}
71592720c0b04200497abee0127a385a42bb60fee54e020cce105b67cd21d2e7
pathOfRemoteRepositoryMetadata
public String pathOfRemoteRepositoryMetadata(ArtifactMetadata metadata)
{    return fallback.pathOfRemoteRepositoryMetadata(metadata);}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return getId();}
d269f534801a9896d7d3a24419edba75a930fe27e62e32160b65d18b8a05d553
getRepositoryUrl
public String getRepositoryUrl()
{    return repositoryUrl;}
239fbe3eb64d679cbac1161825b07d6a8436ead3c6c3d140d9caec2275827023
getName
public String getName()
{    String name = resource.getName();    if (name == null) {        name = "";    } else if (name.startsWith("/")) {        name = name.substring(1);    }    return name;}
354afe66bbdb19ee4d620955bbb214ebf9b5aa09359dea30ffb867002b5a25bd
getUrl
public String getUrl()
{    return getRepositoryUrl() + getName();}
5cc7d3d734a9961e9063573693a2f693e49fdcef1052bc5069a4deeec2a9d002
getContentLength
public long getContentLength()
{    return resource.getContentLength();}
3d713132f28ec28f974f091b05fdc3705cb44b7969b8f42f55c5732a861bdd12
getTransferStartTime
public long getTransferStartTime()
{    return transferStartTime;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return getUrl();}
ce5d355c7ad1e903bf4f37cf78f4b0539caef05ed5398d1d33a9e33476927e4d
getLayout
public ArtifactRepositoryLayout getLayout(String layoutId) throws UnknownRepositoryLayoutException
{    return repositoryLayouts.get(layoutId);}
5307a7a1f762744bb7e64cfa9fa10064691908dda02887ad2929c1fd44dacb7d
createDeploymentArtifactRepository
public ArtifactRepository createDeploymentArtifactRepository(String id, String url, String layoutId, boolean uniqueVersion) throws UnknownRepositoryLayoutException
{    ArtifactRepositoryLayout layout = repositoryLayouts.get(layoutId);    checkLayout(id, layoutId, layout);    return createDeploymentArtifactRepository(id, url, layout, uniqueVersion);}
c1ef1b06a7028a0efad92fdc7261d1752795546d6e0766fa170973a05ecb104b
checkLayout
private void checkLayout(String repositoryId, String layoutId, ArtifactRepositoryLayout layout) throws UnknownRepositoryLayoutException
{    if (layout == null) {        throw new UnknownRepositoryLayoutException(repositoryId, layoutId);    }}
bf1919037ffc1da81b4c4b6593cff487cc4f9d6150b3eb90abce4da6395b2f9c
createDeploymentArtifactRepository
public ArtifactRepository createDeploymentArtifactRepository(String id, String url, ArtifactRepositoryLayout repositoryLayout, boolean uniqueVersion)
{    return createArtifactRepository(id, url, repositoryLayout, null, null);}
de760ce8720ff2be5963c7f25797cf6aa644f2380ef9dd6d38ffe1b203525b59
createArtifactRepository
public ArtifactRepository createArtifactRepository(String id, String url, String layoutId, ArtifactRepositoryPolicy snapshots, ArtifactRepositoryPolicy releases) throws UnknownRepositoryLayoutException
{    ArtifactRepositoryLayout layout = repositoryLayouts.get(layoutId);    checkLayout(id, layoutId, layout);    return createArtifactRepository(id, url, layout, snapshots, releases);}
49aba91706982f41f7fbd4f48a3c5c4ae6ba78d4594fcf34ccaf6d3eae636c54
createArtifactRepository
public ArtifactRepository createArtifactRepository(String id, String url, ArtifactRepositoryLayout repositoryLayout, ArtifactRepositoryPolicy snapshots, ArtifactRepositoryPolicy releases)
{    if (snapshots == null) {        snapshots = new ArtifactRepositoryPolicy();    }    if (releases == null) {        releases = new ArtifactRepositoryPolicy();    }    if (globalUpdatePolicy != null) {        snapshots.setUpdatePolicy(globalUpdatePolicy);        releases.setUpdatePolicy(globalUpdatePolicy);    }    if (globalChecksumPolicy != null) {        snapshots.setChecksumPolicy(globalChecksumPolicy);        releases.setChecksumPolicy(globalChecksumPolicy);    }    ArtifactRepository repository;    if (repositoryLayout instanceof ArtifactRepositoryLayout2) {        repository = ((ArtifactRepositoryLayout2) repositoryLayout).newMavenArtifactRepository(id, url, snapshots, releases);    } else {        repository = new MavenArtifactRepository(id, url, repositoryLayout, snapshots, releases);    }    return repository;}
0441e46a07c08169b6269ef55338ded415d7dbd9a5fe84e5c5316567a6156619
setGlobalUpdatePolicy
public void setGlobalUpdatePolicy(String updatePolicy)
{    globalUpdatePolicy = updatePolicy;}
a0dc4b2b83c195433a5f642a6d5cc91972e7729569a3528c97d0f7868641b29a
setGlobalChecksumPolicy
public void setGlobalChecksumPolicy(String checksumPolicy)
{    globalChecksumPolicy = checksumPolicy;}
75ff126fa94b1cda636b37c7a493288891b32a9517d211f4a8409dcff079299f
getConflictResolver
public ConflictResolver getConflictResolver(String type) throws ConflictResolverNotFoundException
{    try {        return (ConflictResolver) container.lookup(ConflictResolver.ROLE, type);    } catch (ComponentLookupException exception) {        throw new ConflictResolverNotFoundException("Cannot find conflict resolver of type: " + type);    }}
9c4e05b840243f9d9865dc8306abec042bc35a07a2920376a4b9b147b305bd7d
contextualize
public void contextualize(Context context) throws ContextException
{    container = (PlexusContainer) context.get(PlexusConstants.PLEXUS_KEY);}
37eb735115d36671267b84f7597e3e5b4b2dec5ed361f993bcabf8ce069c7265
resolveConflict
public ResolutionNode resolveConflict(ResolutionNode node1, ResolutionNode node2)
{    return node1.getDepth() >= node2.getDepth() ? node1 : node2;}
37eb735115d36671267b84f7597e3e5b4b2dec5ed361f993bcabf8ce069c7265
resolveConflict
public ResolutionNode resolveConflict(ResolutionNode node1, ResolutionNode node2)
{    return node1.getDepth() <= node2.getDepth() ? node1 : node2;}
37eb735115d36671267b84f7597e3e5b4b2dec5ed361f993bcabf8ce069c7265
resolveConflict
public ResolutionNode resolveConflict(ResolutionNode node1, ResolutionNode node2)
{    try {        ArtifactVersion version1 = node1.getArtifact().getSelectedVersion();        ArtifactVersion version2 = node2.getArtifact().getSelectedVersion();        return version1.compareTo(version2) > 0 ? node1 : node2;    } catch (OverConstrainedVersionException exception) {        return null;    }}
37eb735115d36671267b84f7597e3e5b4b2dec5ed361f993bcabf8ce069c7265
resolveConflict
public ResolutionNode resolveConflict(ResolutionNode node1, ResolutionNode node2)
{    try {        ArtifactVersion version1 = node1.getArtifact().getSelectedVersion();        ArtifactVersion version2 = node2.getArtifact().getSelectedVersion();        return version1.compareTo(version2) <= 0 ? node1 : node2;    } catch (OverConstrainedVersionException exception) {        return null;    }}
1fa5b48da75dfa46b70e970054824865ebb4db2f0a44b6edf05fc492eef21379
injectSession
private void injectSession(ArtifactResolutionRequest request)
{    MavenSession session = legacySupport.getSession();    if (session != null) {        request.setOffline(session.isOffline());        request.setForceUpdate(session.getRequest().isUpdateSnapshots());        request.setServers(session.getRequest().getServers());        request.setMirrors(session.getRequest().getMirrors());        request.setProxies(session.getRequest().getProxies());    }}
4a1fb92b2fcbd3bfa2bb2a9a89afbbf16041c7915fe295c5f4861ec73e73aabb
collect
public ArtifactResolutionResult collect(Set<Artifact> artifacts, Artifact originatingArtifact, Map<String, Artifact> managedVersions, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories, ArtifactMetadataSource source, ArtifactFilter filter, List<ResolutionListener> listeners, List<ConflictResolver> conflictResolvers)
{    ArtifactResolutionRequest request = new ArtifactResolutionRequest();    request.setLocalRepository(localRepository);    request.setRemoteRepositories(remoteRepositories);    injectSession(request);    return collect(artifacts, originatingArtifact, managedVersions, request, source, filter, listeners, conflictResolvers);}
841e7dfd99d8c9ebb928ecaee6053333ee607cc3344dbc5844e306dd8a802652
collect
public ArtifactResolutionResult collect(Set<Artifact> artifacts, Artifact originatingArtifact, Map<String, Artifact> managedVersions, ArtifactResolutionRequest repositoryRequest, ArtifactMetadataSource source, ArtifactFilter filter, List<ResolutionListener> listeners, List<ConflictResolver> conflictResolvers)
{    ArtifactResolutionResult result = new ArtifactResolutionResult();    result.setOriginatingArtifact(originatingArtifact);    if (conflictResolvers == null) {        conflictResolvers = Collections.singletonList(defaultConflictResolver);    }    Map<Object, List<ResolutionNode>> resolvedArtifacts = new LinkedHashMap<>();    ResolutionNode root = new ResolutionNode(originatingArtifact, repositoryRequest.getRemoteRepositories());    try {        root.addDependencies(artifacts, repositoryRequest.getRemoteRepositories(), filter);    } catch (CyclicDependencyException e) {        result.addCircularDependencyException(e);        return result;    } catch (OverConstrainedVersionException e) {        result.addVersionRangeViolation(e);        return result;    }    ManagedVersionMap versionMap = getManagedVersionsMap(originatingArtifact, managedVersions);    try {        recurse(result, root, resolvedArtifacts, versionMap, repositoryRequest, source, filter, listeners, conflictResolvers);    } catch (CyclicDependencyException e) {        logger.debug("While recursing: " + e.getMessage(), e);        result.addCircularDependencyException(e);    } catch (OverConstrainedVersionException e) {        logger.debug("While recursing: " + e.getMessage(), e);        result.addVersionRangeViolation(e);    } catch (ArtifactResolutionException e) {        logger.debug("While recursing: " + e.getMessage(), e);        result.addErrorArtifactException(e);    }    Set<ResolutionNode> set = new LinkedHashSet<>();    for (List<ResolutionNode> nodes : resolvedArtifacts.values()) {        for (ResolutionNode node : nodes) {            if (!node.equals(root) && node.isActive()) {                Artifact artifact = node.getArtifact();                try {                    if (node.filterTrail(filter)) {                                                if (node.isChildOfRootNode() || !artifact.isOptional()) {                            artifact.setDependencyTrail(node.getDependencyTrail());                            set.add(node);                                                        result.addArtifact(artifact);                        }                    }                } catch (OverConstrainedVersionException e) {                    result.addVersionRangeViolation(e);                }            }        }    }    result.setArtifactResolutionNodes(set);    return result;}
745915134451f1d25c189ecb15befc81ae7a68e74b58740c2b603f95975d868e
getManagedVersionsMap
private ManagedVersionMap getManagedVersionsMap(Artifact originatingArtifact, Map<String, Artifact> managedVersions)
{    ManagedVersionMap versionMap;    if ((managedVersions != null) && (managedVersions instanceof ManagedVersionMap)) {        versionMap = (ManagedVersionMap) managedVersions;    } else {        versionMap = new ManagedVersionMap(managedVersions);    }        Artifact managedOriginatingArtifact = versionMap.get(originatingArtifact.getDependencyConflictId());    if (managedOriginatingArtifact != null) {                if (managedVersions instanceof ManagedVersionMap) {            /* avoid modifying the managedVersions parameter creating a new map */            versionMap = new ManagedVersionMap(managedVersions);        }        versionMap.remove(originatingArtifact.getDependencyConflictId());    }    return versionMap;}
079645f3204c26092e73189175cec2fa363e3e1ce3e2055034ba79055365423b
recurse
private void recurse(ArtifactResolutionResult result, ResolutionNode node, Map<Object, List<ResolutionNode>> resolvedArtifacts, ManagedVersionMap managedVersions, ArtifactResolutionRequest request, ArtifactMetadataSource source, ArtifactFilter filter, List<ResolutionListener> listeners, List<ConflictResolver> conflictResolvers) throws ArtifactResolutionException
{    fireEvent(ResolutionListener.TEST_ARTIFACT, listeners, node);    Object key = node.getKey();        if (managedVersions.containsKey(key)) {        manageArtifact(node, managedVersions, listeners);    }    List<ResolutionNode> previousNodes = resolvedArtifacts.get(key);    if (previousNodes != null) {        for (ResolutionNode previous : previousNodes) {            try {                if (previous.isActive()) {                                        VersionRange previousRange = previous.getArtifact().getVersionRange();                    VersionRange currentRange = node.getArtifact().getVersionRange();                    if ((previousRange != null) && (currentRange != null)) {                                                                                                VersionRange newRange = previousRange.restrict(currentRange);                                                if (newRange.isSelectedVersionKnown(previous.getArtifact())) {                            fireEvent(ResolutionListener.RESTRICT_RANGE, listeners, node, previous.getArtifact(), newRange);                        }                        previous.getArtifact().setVersionRange(newRange);                        node.getArtifact().setVersionRange(currentRange.restrict(previousRange));                                                                                                ResolutionNode[] resetNodes = { previous, node };                        for (int j = 0; j < 2; j++) {                            Artifact resetArtifact = resetNodes[j].getArtifact();                                                        if (resetArtifact.getVersion() == null && resetArtifact.getVersionRange() != null) {                                                                List<ArtifactVersion> versions = resetArtifact.getAvailableVersions();                                if (versions == null) {                                    try {                                        MetadataResolutionRequest metadataRequest = new DefaultMetadataResolutionRequest(request);                                        metadataRequest.setArtifact(resetArtifact);                                        versions = source.retrieveAvailableVersions(metadataRequest);                                        resetArtifact.setAvailableVersions(versions);                                    } catch (ArtifactMetadataRetrievalException e) {                                        resetArtifact.setDependencyTrail(node.getDependencyTrail());                                        throw new ArtifactResolutionException("Unable to get dependency information: " + e.getMessage(), resetArtifact, request.getRemoteRepositories(), e);                                    }                                }                                                                                                ArtifactVersion selectedVersion = resetArtifact.getVersionRange().matchVersion(resetArtifact.getAvailableVersions());                                if (selectedVersion != null) {                                    resetArtifact.selectVersion(selectedVersion.toString());                                } else {                                    throw new OverConstrainedVersionException("Unable to find a version in " + resetArtifact.getAvailableVersions() + " to match the range " + resetArtifact.getVersionRange(), resetArtifact);                                }                                fireEvent(ResolutionListener.SELECT_VERSION_FROM_RANGE, listeners, resetNodes[j]);                            }                        }                    }                                        ResolutionNode resolved = null;                    for (Iterator<ConflictResolver> j = conflictResolvers.iterator(); resolved == null && j.hasNext(); ) {                        ConflictResolver conflictResolver = j.next();                        resolved = conflictResolver.resolveConflict(previous, node);                    }                    if (resolved == null) {                                                ArtifactResolutionException are = new ArtifactResolutionException("Cannot resolve artifact version conflict between " + previous.getArtifact().getVersion() + " and " + node.getArtifact().getVersion(), previous.getArtifact());                        result.addVersionRangeViolation(are);                    }                    if ((resolved != previous) && (resolved != node)) {                                                result.addVersionRangeViolation(new ArtifactResolutionException("Conflict resolver returned unknown resolution node: ", resolved.getArtifact()));                    }                                                            ResolutionNode nearest;                    ResolutionNode farthest;                    if (resolved == previous) {                        nearest = previous;                        farthest = node;                    } else {                        nearest = node;                        farthest = previous;                    }                    if (checkScopeUpdate(farthest, nearest, listeners)) {                                                                        nearest.disable();                        farthest.getArtifact().setVersion(nearest.getArtifact().getVersion());                        fireEvent(ResolutionListener.OMIT_FOR_NEARER, listeners, nearest, farthest.getArtifact());                    } else {                        farthest.disable();                        fireEvent(ResolutionListener.OMIT_FOR_NEARER, listeners, farthest, nearest.getArtifact());                    }                }            } catch (OverConstrainedVersionException e) {                result.addVersionRangeViolation(e);            }        }    } else {        previousNodes = new ArrayList<>();        resolvedArtifacts.put(key, previousNodes);    }    previousNodes.add(node);    if (node.isActive()) {        fireEvent(ResolutionListener.INCLUDE_ARTIFACT, listeners, node);    }        if (node.isActive() && !Artifact.SCOPE_SYSTEM.equals(node.getArtifact().getScope())) {        fireEvent(ResolutionListener.PROCESS_CHILDREN, listeners, node);        Artifact parentArtifact = node.getArtifact();        for (Iterator<ResolutionNode> i = node.getChildrenIterator(); i.hasNext(); ) {            ResolutionNode child = i.next();            try {                                if (!child.isResolved() && (!child.getArtifact().isOptional() || child.isChildOfRootNode())) {                    Artifact artifact = child.getArtifact();                    artifact.setDependencyTrail(node.getDependencyTrail());                    List<ArtifactRepository> childRemoteRepositories = child.getRemoteRepositories();                    MetadataResolutionRequest metadataRequest = new DefaultMetadataResolutionRequest(request);                    metadataRequest.setArtifact(artifact);                    metadataRequest.setRemoteRepositories(childRemoteRepositories);                    try {                        ResolutionGroup rGroup;                        Object childKey;                        do {                            childKey = child.getKey();                            if (managedVersions.containsKey(childKey)) {                                                                                                                                                                                                manageArtifact(child, managedVersions, listeners);                                                                                                                                                                Artifact ma = managedVersions.get(childKey);                                ArtifactFilter managedExclusionFilter = ma.getDependencyFilter();                                if (null != managedExclusionFilter) {                                    if (null != artifact.getDependencyFilter()) {                                        AndArtifactFilter aaf = new AndArtifactFilter();                                        aaf.add(artifact.getDependencyFilter());                                        aaf.add(managedExclusionFilter);                                        artifact.setDependencyFilter(aaf);                                    } else {                                        artifact.setDependencyFilter(managedExclusionFilter);                                    }                                }                            }                            if (artifact.getVersion() == null) {                                                                                                                                ArtifactVersion version;                                if (!artifact.isSelectedVersionKnown()) {                                    List<ArtifactVersion> versions = artifact.getAvailableVersions();                                    if (versions == null) {                                        versions = source.retrieveAvailableVersions(metadataRequest);                                        artifact.setAvailableVersions(versions);                                    }                                    Collections.sort(versions);                                    VersionRange versionRange = artifact.getVersionRange();                                    version = versionRange.matchVersion(versions);                                    if (version == null) {                                        if (versions.isEmpty()) {                                            throw new OverConstrainedVersionException("No versions are present in the repository for the artifact" + " with a range " + versionRange, artifact, childRemoteRepositories);                                        }                                        throw new OverConstrainedVersionException("Couldn't find a version in " + versions + " to match range " + versionRange, artifact, childRemoteRepositories);                                    }                                } else {                                    version = artifact.getSelectedVersion();                                }                                artifact.selectVersion(version.toString());                                fireEvent(ResolutionListener.SELECT_VERSION_FROM_RANGE, listeners, child);                            }                            rGroup = source.retrieve(metadataRequest);                            if (rGroup == null) {                                break;                            }                        } while (!childKey.equals(child.getKey()));                        if (parentArtifact != null && parentArtifact.getDependencyFilter() != null && !parentArtifact.getDependencyFilter().include(artifact)) {                                                        continue;                        }                                                if (rGroup == null) {                                                        continue;                        }                        child.addDependencies(rGroup.getArtifacts(), rGroup.getResolutionRepositories(), filter);                    } catch (CyclicDependencyException e) {                                                fireEvent(ResolutionListener.OMIT_FOR_CYCLE, listeners, new ResolutionNode(e.getArtifact(), childRemoteRepositories, child));                    } catch (ArtifactMetadataRetrievalException e) {                        artifact.setDependencyTrail(node.getDependencyTrail());                        throw new ArtifactResolutionException("Unable to get dependency information for " + artifact.getId() + ": " + e.getMessage(), artifact, childRemoteRepositories, e);                    }                    ArtifactResolutionRequest subRequest = new ArtifactResolutionRequest(metadataRequest);                    subRequest.setServers(request.getServers());                    subRequest.setMirrors(request.getMirrors());                    subRequest.setProxies(request.getProxies());                    recurse(result, child, resolvedArtifacts, managedVersions, subRequest, source, filter, listeners, conflictResolvers);                }            } catch (OverConstrainedVersionException e) {                result.addVersionRangeViolation(e);            } catch (ArtifactResolutionException e) {                result.addMetadataResolutionException(e);            }        }        fireEvent(ResolutionListener.FINISH_PROCESSING_CHILDREN, listeners, node);    }}
ec1c6aa42fc2cf0e676f3cf7db1bdf7e402caf954c741b57ae971df01bcd2132
manageArtifact
private void manageArtifact(ResolutionNode node, ManagedVersionMap managedVersions, List<ResolutionListener> listeners)
{    Artifact artifact = managedVersions.get(node.getKey());        if ((artifact.getVersion() != null) && (!node.isChildOfRootNode() || node.getArtifact().getVersion() == null)) {        fireEvent(ResolutionListener.MANAGE_ARTIFACT_VERSION, listeners, node, artifact);        node.getArtifact().setVersion(artifact.getVersion());    }    if ((artifact.getScope() != null) && (!node.isChildOfRootNode() || node.getArtifact().getScope() == null)) {        fireEvent(ResolutionListener.MANAGE_ARTIFACT_SCOPE, listeners, node, artifact);        node.getArtifact().setScope(artifact.getScope());    }    if (Artifact.SCOPE_SYSTEM.equals(node.getArtifact().getScope()) && (node.getArtifact().getFile() == null) && (artifact.getFile() != null)) {        fireEvent(ResolutionListener.MANAGE_ARTIFACT_SYSTEM_PATH, listeners, node, artifact);        node.getArtifact().setFile(artifact.getFile());    }}
79e550df76344752d5c59fcaf7f44b2d8dad5185d1793153ca8f331e5cd05778
checkScopeUpdate
 boolean checkScopeUpdate(ResolutionNode farthest, ResolutionNode nearest, List<ResolutionListener> listeners)
{    boolean updateScope = false;    Artifact farthestArtifact = farthest.getArtifact();    Artifact nearestArtifact = nearest.getArtifact();    /* farthest is runtime and nearest has lower priority, change to runtime */    if (Artifact.SCOPE_RUNTIME.equals(farthestArtifact.getScope()) && (Artifact.SCOPE_TEST.equals(nearestArtifact.getScope()) || Artifact.SCOPE_PROVIDED.equals(nearestArtifact.getScope()))) {        updateScope = true;    }    /* farthest is compile and nearest is not (has lower priority), change to compile */    if (Artifact.SCOPE_COMPILE.equals(farthestArtifact.getScope()) && !Artifact.SCOPE_COMPILE.equals(nearestArtifact.getScope())) {        updateScope = true;    }    /* current POM rules all, if nearest is in current pom, do not update its artifactScope */    if ((nearest.getDepth() < 2) && updateScope) {        updateScope = false;        fireEvent(ResolutionListener.UPDATE_SCOPE_CURRENT_POM, listeners, nearest, farthestArtifact);    }    if (updateScope) {        fireEvent(ResolutionListener.UPDATE_SCOPE, listeners, nearest, farthestArtifact);                                        nearestArtifact.setScope(farthestArtifact.getScope());    }    return updateScope;}
31815b2e76fce98f305a22e2a6cba69acc2b6bacd5ad5bfbfa2ba872d750172b
fireEvent
private void fireEvent(int event, List<ResolutionListener> listeners, ResolutionNode node)
{    fireEvent(event, listeners, node, null);}
eb19fbc760366c11b30a51e9fd11657bf0c24c442cd5fad8da6bfdaa387829b0
fireEvent
private void fireEvent(int event, List<ResolutionListener> listeners, ResolutionNode node, Artifact replacement)
{    fireEvent(event, listeners, node, replacement, null);}
3639b705383074291bb0c0033eda863abb17bd5b41293e1471f0c1b5c42f6eb3
fireEvent
private void fireEvent(int event, List<ResolutionListener> listeners, ResolutionNode node, Artifact replacement, VersionRange newRange)
{    for (ResolutionListener listener : listeners) {        switch(event) {            case ResolutionListener.TEST_ARTIFACT:                listener.testArtifact(node.getArtifact());                break;            case ResolutionListener.PROCESS_CHILDREN:                listener.startProcessChildren(node.getArtifact());                break;            case ResolutionListener.FINISH_PROCESSING_CHILDREN:                listener.endProcessChildren(node.getArtifact());                break;            case ResolutionListener.INCLUDE_ARTIFACT:                listener.includeArtifact(node.getArtifact());                break;            case ResolutionListener.OMIT_FOR_NEARER:                listener.omitForNearer(node.getArtifact(), replacement);                break;            case ResolutionListener.OMIT_FOR_CYCLE:                listener.omitForCycle(node.getArtifact());                break;            case ResolutionListener.UPDATE_SCOPE:                listener.updateScope(node.getArtifact(), replacement.getScope());                break;            case ResolutionListener.UPDATE_SCOPE_CURRENT_POM:                listener.updateScopeCurrentPom(node.getArtifact(), replacement.getScope());                break;            case ResolutionListener.MANAGE_ARTIFACT_VERSION:                if (listener instanceof ResolutionListenerForDepMgmt) {                    ResolutionListenerForDepMgmt asImpl = (ResolutionListenerForDepMgmt) listener;                    asImpl.manageArtifactVersion(node.getArtifact(), replacement);                } else {                    listener.manageArtifact(node.getArtifact(), replacement);                }                break;            case ResolutionListener.MANAGE_ARTIFACT_SCOPE:                if (listener instanceof ResolutionListenerForDepMgmt) {                    ResolutionListenerForDepMgmt asImpl = (ResolutionListenerForDepMgmt) listener;                    asImpl.manageArtifactScope(node.getArtifact(), replacement);                } else {                    listener.manageArtifact(node.getArtifact(), replacement);                }                break;            case ResolutionListener.MANAGE_ARTIFACT_SYSTEM_PATH:                if (listener instanceof ResolutionListenerForDepMgmt) {                    ResolutionListenerForDepMgmt asImpl = (ResolutionListenerForDepMgmt) listener;                    asImpl.manageArtifactSystemPath(node.getArtifact(), replacement);                } else {                    listener.manageArtifact(node.getArtifact(), replacement);                }                break;            case ResolutionListener.SELECT_VERSION_FROM_RANGE:                listener.selectVersionFromRange(node.getArtifact());                break;            case ResolutionListener.RESTRICT_RANGE:                if (node.getArtifact().getVersionRange().hasRestrictions() || replacement.getVersionRange().hasRestrictions()) {                    listener.restrictRange(node.getArtifact(), replacement, newRange);                }                break;            default:                throw new IllegalStateException("Unknown event: " + event);        }    }}
fc8e350a1399a5dd2d5a48fd80a3712618d45fbb966e9d6ecb913679193094fe
collect
public ArtifactResolutionResult collect(Set<Artifact> artifacts, Artifact originatingArtifact, Map<String, Artifact> managedVersions, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories, ArtifactMetadataSource source, ArtifactFilter filter, List<ResolutionListener> listeners)
{    return collect(artifacts, originatingArtifact, managedVersions, localRepository, remoteRepositories, source, filter, listeners, null);}
8690515231b985fabf8629776d906c8ad78ffaa509ad51f687f659660e6b0ccf
collect
public ArtifactResolutionResult collect(Set<Artifact> artifacts, Artifact originatingArtifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories, ArtifactMetadataSource source, ArtifactFilter filter, List<ResolutionListener> listeners)
{    return collect(artifacts, originatingArtifact, null, localRepository, remoteRepositories, source, filter, listeners);}
deaa33e6c55f86b50e3e8f68ba8618bfe347afa4c75d80eebf72894c1c27bfb6
transformForResolve
public void transformForResolve(Artifact artifact, List<ArtifactRepository> remoteRepositories, ArtifactRepository localRepository) throws ArtifactResolutionException, ArtifactNotFoundException
{    RepositoryRequest request = new DefaultRepositoryRequest();    request.setLocalRepository(localRepository);    request.setRemoteRepositories(remoteRepositories);    transformForResolve(artifact, request);}
6238d0a82973ba5e5d30eaf02d3b49f69ecfe678a118ce12c440ddba8483f1b1
resolveVersion
protected String resolveVersion(Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories) throws RepositoryMetadataResolutionException
{    RepositoryRequest request = new DefaultRepositoryRequest();    request.setLocalRepository(localRepository);    request.setRemoteRepositories(remoteRepositories);    return resolveVersion(artifact, request);}
21bc281725644386f7187b7191f42fc60214e40c4c8fcdd6652fcadb24694b31
resolveVersion
protected String resolveVersion(Artifact artifact, RepositoryRequest request) throws RepositoryMetadataResolutionException
{    RepositoryMetadata metadata;        if (!artifact.isSnapshot() || Artifact.LATEST_VERSION.equals(artifact.getBaseVersion())) {        metadata = new ArtifactRepositoryMetadata(artifact);    } else {        metadata = new SnapshotArtifactRepositoryMetadata(artifact);    }    repositoryMetadataManager.resolve(metadata, request);    artifact.addMetadata(metadata);    Metadata repoMetadata = metadata.getMetadata();    String version = null;    if (repoMetadata != null && repoMetadata.getVersioning() != null) {        version = constructVersion(repoMetadata.getVersioning(), artifact.getBaseVersion());    }    if (version == null) {                version = artifact.getBaseVersion();    }        if (getLogger().isDebugEnabled()) {        if (!version.equals(artifact.getBaseVersion())) {            String message = artifact.getArtifactId() + ": resolved to version " + version;            if (artifact.getRepository() != null) {                message += " from repository " + artifact.getRepository().getId();            } else {                message += " from local repository";            }            getLogger().debug(message);        } else {                        getLogger().debug(artifact.getArtifactId() + ": using locally installed snapshot");        }    }    return version;}
b029ff77a6ef6d445431f0c381edbeb9ccaeb1865e56599cf830f7b3d7896ecf
transformForResolve
public void transformForResolve(Artifact artifact, RepositoryRequest request) throws ArtifactResolutionException, ArtifactNotFoundException
{    for (ArtifactTransformation transform : artifactTransformations) {        transform.transformForResolve(artifact, request);    }}
deaa33e6c55f86b50e3e8f68ba8618bfe347afa4c75d80eebf72894c1c27bfb6
transformForResolve
public void transformForResolve(Artifact artifact, List<ArtifactRepository> remoteRepositories, ArtifactRepository localRepository) throws ArtifactResolutionException, ArtifactNotFoundException
{    for (ArtifactTransformation transform : artifactTransformations) {        transform.transformForResolve(artifact, remoteRepositories, localRepository);    }}
7f5312c3db19494e3052be64670a0a4a02e813c928a56dd0f15f5f7a6973519c
transformForInstall
public void transformForInstall(Artifact artifact, ArtifactRepository localRepository) throws ArtifactInstallationException
{    for (ArtifactTransformation transform : artifactTransformations) {        transform.transformForInstall(artifact, localRepository);    }}
fadfb9fd873b78c3c350dd9d6a52dbf6f3414a191aa9befecd2c29d298f89990
transformForDeployment
public void transformForDeployment(Artifact artifact, ArtifactRepository remoteRepository, ArtifactRepository localRepository) throws ArtifactDeploymentException
{    for (ArtifactTransformation transform : artifactTransformations) {        transform.transformForDeployment(artifact, remoteRepository, localRepository);    }}
857ee155c531c8615811b0644e8d759d95bed8dc4e5c186fb0f31976d5f5d33a
getArtifactTransformations
public List<ArtifactTransformation> getArtifactTransformations()
{    return artifactTransformations;}
b029ff77a6ef6d445431f0c381edbeb9ccaeb1865e56599cf830f7b3d7896ecf
transformForResolve
public void transformForResolve(Artifact artifact, RepositoryRequest request) throws ArtifactResolutionException, ArtifactNotFoundException
{    if (Artifact.LATEST_VERSION.equals(artifact.getVersion())) {        try {            String version = resolveVersion(artifact, request);            if (Artifact.LATEST_VERSION.equals(version)) {                throw new ArtifactNotFoundException("Unable to determine the latest version", artifact);            }            artifact.setBaseVersion(version);            artifact.updateVersion(version, request.getLocalRepository());        } catch (RepositoryMetadataResolutionException e) {            throw new ArtifactResolutionException(e.getMessage(), artifact, e);        }    }}
4194961b5a459b3c91822e425259eb545dc0d96da40ab935e2130c0e50b8ba2b
transformForInstall
public void transformForInstall(Artifact artifact, ArtifactRepository localRepository)
{}
40ae4f2a69bfbc926d8c7b3977000e60516e18013c833a374f4cc3f7dd30d44a
transformForDeployment
public void transformForDeployment(Artifact artifact, ArtifactRepository remoteRepository, ArtifactRepository localRepository)
{}
46dfba0b726b119c7e60dc67a1dfc5c3ea75418d22af5db308e3a40b760b581e
constructVersion
protected String constructVersion(Versioning versioning, String baseVersion)
{    return versioning.getLatest();}
b029ff77a6ef6d445431f0c381edbeb9ccaeb1865e56599cf830f7b3d7896ecf
transformForResolve
public void transformForResolve(Artifact artifact, RepositoryRequest request) throws ArtifactResolutionException, ArtifactNotFoundException
{    if (Artifact.RELEASE_VERSION.equals(artifact.getVersion())) {        try {            String version = resolveVersion(artifact, request);            if (Artifact.RELEASE_VERSION.equals(version)) {                throw new ArtifactNotFoundException("Unable to determine the release version", artifact);            }            artifact.setBaseVersion(version);            artifact.updateVersion(version, request.getLocalRepository());        } catch (RepositoryMetadataResolutionException e) {            throw new ArtifactResolutionException(e.getMessage(), artifact, e);        }    }}
4194961b5a459b3c91822e425259eb545dc0d96da40ab935e2130c0e50b8ba2b
transformForInstall
public void transformForInstall(Artifact artifact, ArtifactRepository localRepository)
{    ArtifactMetadata metadata = createMetadata(artifact);    artifact.addMetadata(metadata);}
40ae4f2a69bfbc926d8c7b3977000e60516e18013c833a374f4cc3f7dd30d44a
transformForDeployment
public void transformForDeployment(Artifact artifact, ArtifactRepository remoteRepository, ArtifactRepository localRepository)
{    ArtifactMetadata metadata = createMetadata(artifact);    artifact.addMetadata(metadata);}
80e7ea8e33f8c85a0adf529bf0933fc59d6477b88d69ca8666d0318c06b4261f
createMetadata
private ArtifactMetadata createMetadata(Artifact artifact)
{    Versioning versioning = new Versioning();    versioning.updateTimestamp();    versioning.addVersion(artifact.getVersion());    if (artifact.isRelease()) {        versioning.setRelease(artifact.getVersion());    }    return new ArtifactRepositoryMetadata(artifact, versioning);}
46dfba0b726b119c7e60dc67a1dfc5c3ea75418d22af5db308e3a40b760b581e
constructVersion
protected String constructVersion(Versioning versioning, String baseVersion)
{    return versioning.getRelease();}
2e14e144b56a27d06973b205a28d04472d7796038db9a5056f056d3eaffcbfb0
transformForResolve
public void transformForResolve(Artifact artifact, RepositoryRequest request) throws ArtifactResolutionException
{        if (artifact.isSnapshot() && artifact.getBaseVersion().equals(artifact.getVersion())) {        try {            String version = resolveVersion(artifact, request);            artifact.updateVersion(version, request.getLocalRepository());        } catch (RepositoryMetadataResolutionException e) {            throw new ArtifactResolutionException(e.getMessage(), artifact, e);        }    }}
4194961b5a459b3c91822e425259eb545dc0d96da40ab935e2130c0e50b8ba2b
transformForInstall
public void transformForInstall(Artifact artifact, ArtifactRepository localRepository)
{    if (artifact.isSnapshot()) {        Snapshot snapshot = new Snapshot();        snapshot.setLocalCopy(true);        RepositoryMetadata metadata = new SnapshotArtifactRepositoryMetadata(artifact, snapshot);        artifact.addMetadata(metadata);    }}
fadfb9fd873b78c3c350dd9d6a52dbf6f3414a191aa9befecd2c29d298f89990
transformForDeployment
public void transformForDeployment(Artifact artifact, ArtifactRepository remoteRepository, ArtifactRepository localRepository) throws ArtifactDeploymentException
{    if (artifact.isSnapshot()) {        Snapshot snapshot = new Snapshot();        snapshot.setTimestamp(getDeploymentTimestamp());                try {            int buildNumber = resolveLatestSnapshotBuildNumber(artifact, localRepository, remoteRepository);            snapshot.setBuildNumber(buildNumber + 1);        } catch (RepositoryMetadataResolutionException e) {            throw new ArtifactDeploymentException("Error retrieving previous build number for artifact '" + artifact.getDependencyConflictId() + "': " + e.getMessage(), e);        }        RepositoryMetadata metadata = new SnapshotArtifactRepositoryMetadata(artifact, snapshot);        artifact.setResolvedVersion(constructVersion(metadata.getMetadata().getVersioning(), artifact.getBaseVersion()));        artifact.addMetadata(metadata);    }}
cc5f184d20ddb278057f0701f6bd5dbe0ac7341dd6296906698b984b3c172310
getDeploymentTimestamp
public String getDeploymentTimestamp()
{    if (deploymentTimestamp == null) {        deploymentTimestamp = getUtcDateFormatter().format(new Date());    }    return deploymentTimestamp;}
46dfba0b726b119c7e60dc67a1dfc5c3ea75418d22af5db308e3a40b760b581e
constructVersion
protected String constructVersion(Versioning versioning, String baseVersion)
{    String version = null;    Snapshot snapshot = versioning.getSnapshot();    if (snapshot != null) {        if (snapshot.getTimestamp() != null && snapshot.getBuildNumber() > 0) {            String newVersion = snapshot.getTimestamp() + "-" + snapshot.getBuildNumber();            version = StringUtils.replace(baseVersion, Artifact.SNAPSHOT_VERSION, newVersion);        } else {            version = baseVersion;        }    }    return version;}
ea895c5197fe775f9a7a64608b138b9b698eb9923371315bac3fb309e0131bd8
resolveLatestSnapshotBuildNumber
private int resolveLatestSnapshotBuildNumber(Artifact artifact, ArtifactRepository localRepository, ArtifactRepository remoteRepository) throws RepositoryMetadataResolutionException
{    RepositoryMetadata metadata = new SnapshotArtifactRepositoryMetadata(artifact);    getLogger().info("Retrieving previous build number from " + remoteRepository.getId());    repositoryMetadataManager.resolveAlways(metadata, localRepository, remoteRepository);    int buildNumber = 0;    Metadata repoMetadata = metadata.getMetadata();    if ((repoMetadata != null) && (repoMetadata.getVersioning() != null && repoMetadata.getVersioning().getSnapshot() != null)) {        buildNumber = repoMetadata.getVersioning().getSnapshot().getBuildNumber();    }    return buildNumber;}
9bdc0ffbe8131e0314548c7c95b1e241e0d2ba43221614540fe58717304816a8
getUtcDateFormatter
public static DateFormat getUtcDateFormatter()
{    DateFormat utcDateFormatter = new SimpleDateFormat(DEFAULT_SNAPSHOT_TIMESTAMP_FORMAT);    utcDateFormatter.setCalendar(new GregorianCalendar());    utcDateFormatter.setTimeZone(DEFAULT_SNAPSHOT_TIME_ZONE);    return utcDateFormatter;}
99218f81269e4877b5d478050b47fdc86ad5272d168ca9ada2ec5255fa82e53b
newAdapter
public static TransferListener newAdapter(ArtifactTransferListener listener)
{    if (listener == null) {        return null;    } else {        return new TransferListenerAdapter(listener);    }}
7aac23a7b2811b66d2d3d2b593ab28f1d4d72a40344a95b1fe55fb7a5d090ced
debug
public void debug(String message)
{}
5afeb3d623a8f8e74893ca8f0d2e96847689705826d2f239e2249229607ecea1
transferCompleted
public void transferCompleted(TransferEvent transferEvent)
{    ArtifactTransferEvent event = wrap(transferEvent);    Long transferred;    synchronized (transfers) {        transferred = transfers.remove(transferEvent.getResource());    }    if (transferred != null) {        event.setTransferredBytes(transferred);    }    synchronized (artifacts) {        artifacts.remove(transferEvent.getResource());    }    listener.transferCompleted(event);}
fc2c5dc57088106d58108738720c764811c9db129dad966f761586324a115cc0
transferError
public void transferError(TransferEvent transferEvent)
{    synchronized (transfers) {        transfers.remove(transferEvent.getResource());    }    synchronized (artifacts) {        artifacts.remove(transferEvent.getResource());    }}
86bedfea6e43f28c82fbc36f219c0724df7d99dd838b19176570cc459bca4f8e
transferInitiated
public void transferInitiated(TransferEvent transferEvent)
{    listener.transferInitiated(wrap(transferEvent));}
5887c3cef4c3202d31a52a5f6d60e733a3874860d4909dd725dd2e17bc7c62cf
transferProgress
public void transferProgress(TransferEvent transferEvent, byte[] buffer, int length)
{    Long transferred;    synchronized (transfers) {        transferred = transfers.get(transferEvent.getResource());        if (transferred == null) {            transferred = (long) length;        } else {            transferred = transferred + length;        }        transfers.put(transferEvent.getResource(), transferred);    }    ArtifactTransferEvent event = wrap(transferEvent);    event.setDataBuffer(buffer);    event.setDataOffset(0);    event.setDataLength(length);    event.setTransferredBytes(transferred);    listener.transferProgress(event);}
f632f0fef6c748d2878ed2782ec90cd7f0627e00225a7a3afe97dada8daae769
transferStarted
public void transferStarted(TransferEvent transferEvent)
{    listener.transferStarted(wrap(transferEvent));}
8f9ba228f1be76c3f300b2a069c804cde16172bf4505fcb84c215ef9ec1a6f31
wrap
private ArtifactTransferEvent wrap(TransferEvent event)
{    if (event == null) {        return null;    } else {        String wagon = event.getWagon().getClass().getName();        ArtifactTransferResource artifact = wrap(event.getWagon().getRepository(), event.getResource());        ArtifactTransferEvent evt;        if (event.getException() != null) {            evt = new ArtifactTransferEvent(wagon, event.getException(), event.getRequestType(), artifact);        } else {            evt = new ArtifactTransferEvent(wagon, event.getEventType(), event.getRequestType(), artifact);        }        evt.setLocalFile(event.getLocalFile());        return evt;    }}
1e730538c82bdee89804e0f2ced09bc389fb652427e1c633d431286b32f69e78
wrap
private ArtifactTransferResource wrap(Repository repository, Resource resource)
{    if (resource == null) {        return null;    } else {        synchronized (artifacts) {            ArtifactTransferResource artifact = artifacts.get(resource);            if (artifact == null) {                artifact = new MavenArtifact(repository.getUrl(), resource);                artifacts.put(resource, artifact);            }            return artifact;        }    }}
5cbae5809748475bfd482404262d1cb9e0be70ff67db1a1cec261e61242c7cac
getRepositoryId
public final String getRepositoryId()
{    return repositoryId;}
2e66a378edaf01bcdc5aebd1190abb2fc087fdb8f9c252b7e72c4c21c403364d
getOriginalMessage
public final String getOriginalMessage()
{    return originalMessage;}
9590314d7a6edd0118345714cc714a8e73448e57e702bb4c6893b363f509d64d
getGroupId
public String getGroupId()
{    return groupId;}
71bcb3c91e0d464929235253ed6afcc351b3e9058163242c449a951b7b882841
setGroupId
public void setGroupId(String groupId)
{    this.groupId = groupId;}
1e5191dc99d9314f2df50294bcd8d717af7b8f4311575d36d8d75b27121f1064
getArtifactId
public String getArtifactId()
{    return artifactId;}
20cbd85c6b33f77aed396f8e4100794ba5666a5469aea43d797e8b46e9761df1
setArtifactId
public void setArtifactId(String artifactId)
{    this.artifactId = artifactId;}
446b3b91c7c41085df1dc5542616b89ccd409f6a1d45e4d60d3ca00ac839ecf0
getVersion
public String getVersion()
{    return version;}
fa655d76002df94322c0d82cb5fbadecc48b0bb7bb0e58203d0a274985fccd86
setVersion
public void setVersion(String version)
{    this.version = version;}
72a56f4f76ed886823d719d171deaf7269e3e03581e490ae41d8888ab09c151c
getClassifier
public String getClassifier()
{    return classifier;}
4305433e6556f806359f8272c959894656336e254e47baac325d67924f633458
setClassifier
public void setClassifier(String classifier)
{    this.classifier = classifier;}
624f725337dde847c4a699397a02f1b5558c709c88374adb10e603d835f48c88
getType
public String getType()
{    return type;}
8ab53042064bb8f4e31355121ce5a5ccc6f3b8e9227cceb605ae26d51b21bddd
setType
public void setType(String type)
{    this.type = type;}
10acbd41cfd99d832235a7119bd79be8e640d0be65618448c909209b402f5185
getDatum
public Object getDatum()
{    return datum;}
87d41a184281020c3b2f28b40d6e99aba26e31af8891dcd2a10c80096213a9d9
setDatum
public void setDatum(Object datum)
{    this.datum = datum;}
b6618886f045f72bd87b21e6ae50c04bc9f78ceb97355e9a0b0208f7669f7aa1
getScope
public String getScope()
{    return scope;}
5c4863d73a6ffacd6a18b7c969209012fb3ef554b5811f0b02f91fa7d3ec102d
setScope
public void setScope(String scope)
{    this.scope = scope;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return getGroupId() + ":" + getArtifactId() + ":" + getVersion() + ":" + (getClassifier() == null ? "" : getClassifier()) + ":" + (getType() == null ? DEFAULT_TYPE : getType());}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return groupId + ":" + artifactId + ":" + version;}
3f674b8212d97efacb48eee14b975b9a75886e9375cb34e77c19f150dc0c820b
toDomainString
public String toDomainString()
{    return groupId + ":" + artifactId;}
9590314d7a6edd0118345714cc714a8e73448e57e702bb4c6893b363f509d64d
getGroupId
public String getGroupId()
{    return groupId;}
71bcb3c91e0d464929235253ed6afcc351b3e9058163242c449a951b7b882841
setGroupId
public void setGroupId(String groupId)
{    this.groupId = groupId;}
1e5191dc99d9314f2df50294bcd8d717af7b8f4311575d36d8d75b27121f1064
getArtifactId
public String getArtifactId()
{    return artifactId;}
4f8a2c3c64f2ea1a6ab67ba56c9de175667d403be0b5653d4c94bde3815a3d6e
setArtifactId
public void setArtifactId(String name)
{    this.artifactId = name;}
446b3b91c7c41085df1dc5542616b89ccd409f6a1d45e4d60d3ca00ac839ecf0
getVersion
public String getVersion()
{    return version;}
fa655d76002df94322c0d82cb5fbadecc48b0bb7bb0e58203d0a274985fccd86
setVersion
public void setVersion(String version)
{    this.version = version;}
624f725337dde847c4a699397a02f1b5558c709c88374adb10e603d835f48c88
getType
public String getType()
{    return type;}
5b4977b0d2b47f68d5a8869f9ef1cccd9facda314d46d64f15434343ac8c7c28
getCheckedType
public String getCheckedType()
{    return type == null ? "jar" : type;}
8ab53042064bb8f4e31355121ce5a5ccc6f3b8e9227cceb605ae26d51b21bddd
setType
public void setType(String type)
{    this.type = type;}
4f7ba3f0e12c90350977e190b4b773442a449496f8545b79461a3d955b770b90
getArtifactScope
public ArtifactScopeEnum getArtifactScope()
{    return artifactScope == null ? ArtifactScopeEnum.DEFAULT_SCOPE : artifactScope;}
ab5b83dcfb289f136f415e61a71b4f481768f05cee30a13b6d045c9f324e8d2f
setArtifactScope
public void setArtifactScope(ArtifactScopeEnum artifactScope)
{    this.artifactScope = artifactScope;}
5c4863d73a6ffacd6a18b7c969209012fb3ef554b5811f0b02f91fa7d3ec102d
setScope
public void setScope(String scope)
{    this.artifactScope = scope == null ? ArtifactScopeEnum.DEFAULT_SCOPE : ArtifactScopeEnum.valueOf(scope);}
72a56f4f76ed886823d719d171deaf7269e3e03581e490ae41d8888ab09c151c
getClassifier
public String getClassifier()
{    return classifier;}
4305433e6556f806359f8272c959894656336e254e47baac325d67924f633458
setClassifier
public void setClassifier(String classifier)
{    this.classifier = classifier;}
2fa99a8aa2d293aadf123d8cbc90fb9b630a79bcc950706530654a9eec5b5162
isResolved
public boolean isResolved()
{    return resolved;}
fef31378b34f4ec716c70a189152bb383cecb916bacbf12caacb9219745a1e07
setResolved
public void setResolved(boolean resolved)
{    this.resolved = resolved;}
af227241c72dc06c7c8fd99d92aae1e6029deaee34f6a8f52bd14d80403cc33e
getUri
public String getUri()
{    return uri;}
a288ca35a25c3421a9b290220998f3c9334b1645e316539601883cab46f657e3
setUri
public void setUri(String uri)
{    this.uri = uri;}
b6618886f045f72bd87b21e6ae50c04bc9f78ceb97355e9a0b0208f7669f7aa1
getScope
public String getScope()
{    return getArtifactScope().getScope();}
d265f546a2940a6d2ddfe659a68c6dbeda7653b937e1be0e93f06fba1c138bf6
getScopeAsEnum
public ArtifactScopeEnum getScopeAsEnum()
{    return artifactScope == null ? ArtifactScopeEnum.DEFAULT_SCOPE : artifactScope;}
3bb367ccfd14223b41a2794bf49a5e0537388b315a666063ed6b82e8431d0eee
isArtifactExists
public boolean isArtifactExists()
{    return artifactExists;}
ea1389255302ff6d9682b849d13a1d0ba4729f79df51a343d99da505789951d0
setArtifactExists
public void setArtifactExists(boolean artifactExists)
{    this.artifactExists = artifactExists;}
590933ce93a897e701dd818072bd7f692d9cc9657926050125b03d85156d2c02
getDependencies
public Collection<ArtifactMetadata> getDependencies()
{    return dependencies;}
03653da6d71974f472ed9db512373b6184465315a963f732fd258b976c81465d
setDependencies
public void setDependencies(Collection<ArtifactMetadata> dependencies)
{    this.dependencies = dependencies;}
35fc2ca800469e7836ba352b16a4b1639dde1690548bd43d7a898bb2983c354b
getArtifactUri
public String getArtifactUri()
{    return artifactUri;}
8d6f07a69fdb40bf8e98f2b018b54405620aa728f08b09c95a7dac59031ea1fa
setArtifactUri
public void setArtifactUri(String artifactUri)
{    this.artifactUri = artifactUri;}
3f814ee3d0e5c00bc9e83045b38d9e27e8fb93fe0571593578b655ea33b045fc
getWhy
public String getWhy()
{    return why;}
94f5e258fea646df0420f5f17e4600583374ce2d7d2eaedb86c1a372c3d7de98
setWhy
public void setWhy(String why)
{    this.why = why;}
735d2bd2d31b5695cc6801e48a1e2b92cd0a4cc38870ad4f31df08f8a70419a7
getError
public String getError()
{    return error;}
5178db25ea08499d04ec853508cd388075328fc2db123206093a8cdf095e825c
setError
public void setError(String error)
{    this.error = error;}
fd9504dee16080e07420afd6a5d3ae609db08e44a33146c0a95ec89a5654c2f0
isError
public boolean isError()
{    return error == null;}
1e6367faf89cb024d8c4d0b1db16125646d0f72a98ca702d55130cc6ac4f7cb3
getDependencyConflictId
public String getDependencyConflictId()
{    return groupId + ":" + artifactId;}
25ee793ed598d0f273fb579d13b21e78d3c0df4d290835544ec0d7b94e3f2ea8
iterator
public Iterator<ArtifactMetadata> iterator()
{    return classpath == null ? null : classpath.iterator();}
83981fabb90fcd1370cb10bf01583568e8d34df1130d299d9b9b0ef84a1a1165
add
public ClasspathContainer add(ArtifactMetadata md)
{    if (classpath == null) {        classpath = new ArrayList<>(16);    }    classpath.add(md);    return this;}
86d8e3681620e3dd603fc2d72ab6c277f2502d1c00e71f0875069107a91b19cd
getClasspath
public List<ArtifactMetadata> getClasspath()
{    return classpath;}
625e8256b8bf276c511633f01c4e4858d31fbaf40f39e54b1bfe145c93f09c50
getClasspathAsTree
public MetadataTreeNode getClasspathAsTree() throws MetadataResolutionException
{    if (classpath == null || classpath.size() < 1) {        return null;    }    MetadataTreeNode tree = null;    MetadataTreeNode parent = null;    for (ArtifactMetadata md : classpath) {        MetadataTreeNode node = new MetadataTreeNode(md, parent, md.isResolved(), md.getArtifactScope());        if (tree == null) {            tree = node;        }        if (parent != null) {            parent.setNChildren(1);            parent.addChild(0, node);        }        parent = node;    }    return tree;}
48dd2cfd8dbf95189834c279e0a18728090bf829c733aaa30427320860cebdd0
setClasspath
public void setClasspath(List<ArtifactMetadata> classpath)
{    this.classpath = classpath;}
8310701a13cab78214dad1dc5d61350e837e096d5680ad021d5d16017ce25a96
getScope
public ArtifactScopeEnum getScope()
{    return scope;}
464958a1b122d5f8b648cc23e976cf95fd76dda5fc31586519fd0b937cf4c65e
setScope
public void setScope(ArtifactScopeEnum scope)
{    this.scope = scope;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    StringBuilder sb = new StringBuilder(256);    sb.append("[scope=").append(scope.getScope());    if (classpath != null) {        for (ArtifactMetadata md : classpath) {            sb.append(": ").append(md.toString()).append('{').append(md.getArtifactUri()).append('}');        }    }    sb.append(']');    return sb.toString();}
c72a190b7eeb0c769f85f388bc9903b63da4b46cc593e36711709aa9d711ea6d
transform
public ClasspathContainer transform(MetadataGraph dirtyGraph, ArtifactScopeEnum scope, boolean resolve) throws MetadataGraphTransformationException
{    try {        if (dirtyGraph == null || dirtyGraph.isEmpty()) {            return null;        }        MetadataGraph cleanGraph = conflictResolver.resolveConflicts(dirtyGraph, scope);        if (cleanGraph == null || cleanGraph.isEmpty()) {            return null;        }        ClasspathContainer cpc = new ClasspathContainer(scope);        if (cleanGraph.isEmptyEdges()) {                        ArtifactMetadata amd = cleanGraph.getEntry().getMd();            cpc.add(amd);        } else {            ClasspathGraphVisitor v = new ClasspathGraphVisitor(cleanGraph, cpc);            MetadataGraphVertex entry = cleanGraph.getEntry();                        v.visit(entry);        }        return cpc;    } catch (GraphConflictResolutionException e) {        throw new MetadataGraphTransformationException(e);    }}
e0ce68c21eda1ee70802643699d4b9ea7b25747959c827b9ffe553d12122593f
visit
protected void visit(MetadataGraphVertex node)
{    ArtifactMetadata md = node.getMd();    if (visited.contains(node)) {        return;    }    cpc.add(md);                                                                                    List<MetadataGraphEdge> exits = graph.getExcidentEdges(node);    if (exits != null && exits.size() > 0) {        MetadataGraphEdge[] sortedExits = exits.toArray(new MetadataGraphEdge[0]);        Arrays.sort(sortedExits, new Comparator<MetadataGraphEdge>() {            public int compare(MetadataGraphEdge e1, MetadataGraphEdge e2) {                if (e1.getDepth() == e2.getDepth()) {                    if (e2.getPomOrder() == e1.getPomOrder()) {                        return e1.getTarget().toString().compareTo(e2.getTarget().toString());                    }                    return e2.getPomOrder() - e1.getPomOrder();                }                return e2.getDepth() - e1.getDepth();            }        });        for (MetadataGraphEdge e : sortedExits) {            MetadataGraphVertex targetNode = e.getTarget();            targetNode.getMd().setArtifactScope(e.getScope());            targetNode.getMd().setWhy(e.getSource().getMd().toString());            visit(targetNode);        }    }}
0c1e2183d28f0d987008f5de6a0c0101ef95b02ef514e097217823d4cb7a3fb8
compare
public int compare(MetadataGraphEdge e1, MetadataGraphEdge e2)
{    if (e1.getDepth() == e2.getDepth()) {        if (e2.getPomOrder() == e1.getPomOrder()) {            return e1.getTarget().toString().compareTo(e2.getTarget().toString());        }        return e2.getPomOrder() - e1.getPomOrder();    }    return e2.getDepth() - e1.getDepth();}
83379759815567406568439e1553178279b17bfe637cf4980cbc9bbf4a512e2a
apply
public MetadataGraphEdge apply(MetadataGraphEdge e1, MetadataGraphEdge e2)
{    int depth1 = e1.getDepth();    int depth2 = e2.getDepth();    if (depth1 == depth2) {        ArtifactVersion v1 = new DefaultArtifactVersion(e1.getVersion());        ArtifactVersion v2 = new DefaultArtifactVersion(e2.getVersion());        if (newerFirst) {            return v1.compareTo(v2) > 0 ? e1 : e2;        }        return v1.compareTo(v2) > 0 ? e2 : e1;    }    if (closerFirst) {        return depth1 < depth2 ? e1 : e2;    }    return depth1 < depth2 ? e2 : e1;}
a93fa0c467e594d011bec9502ca0cbe35dbac59432361bcf3b3dc5530f02a21e
resolveConflicts
public MetadataGraph resolveConflicts(MetadataGraph graph, ArtifactScopeEnum scope) throws GraphConflictResolutionException
{    if (policy == null) {        throw new GraphConflictResolutionException("no GraphConflictResolutionPolicy injected");    }    if (graph == null) {        return null;    }    final MetadataGraphVertex entry = graph.getEntry();    if (entry == null) {        return null;    }    if (graph.isEmpty()) {        throw new GraphConflictResolutionException("graph with an entry, but not vertices do not exist");    }    if (graph.isEmptyEdges()) {                return null;    }    final TreeSet<MetadataGraphVertex> vertices = graph.getVertices();    try {                if (vertices.size() == 1) {            return new MetadataGraph(entry);        }        final ArtifactScopeEnum requestedScope = ArtifactScopeEnum.checkScope(scope);        MetadataGraph res = new MetadataGraph(vertices.size());        res.setVersionedVertices(false);        res.setScopedVertices(false);        MetadataGraphVertex resEntry = res.addVertex(entry.getMd());        res.setEntry(resEntry);        res.setScope(requestedScope);        for (MetadataGraphVertex v : vertices) {            final List<MetadataGraphEdge> ins = graph.getIncidentEdges(v);            final MetadataGraphEdge edge = cleanEdges(v, ins, requestedScope);            if (edge == null) {                                if (entry.equals(v)) {                                                            res.getEntry().getMd().setWhy("This is a graph entry point. No links.");                } else {                                                                                                }            } else {                                                ArtifactMetadata md = v.getMd();                ArtifactMetadata newMd = new ArtifactMetadata(md.getGroupId(), md.getArtifactId(), edge.getVersion(), md.getType(), md.getScopeAsEnum(), md.getClassifier(), edge.getArtifactUri(), edge.getSource() == null ? "" : edge.getSource().getMd().toString(), edge.isResolved(), edge.getTarget() == null ? null : edge.getTarget().getMd().getError());                MetadataGraphVertex newV = res.addVertex(newMd);                MetadataGraphVertex sourceV = res.addVertex(edge.getSource().getMd());                res.addEdge(sourceV, newV, edge);            }        }        MetadataGraph linkedRes = findLinkedSubgraph(res);                return linkedRes;    } catch (MetadataResolutionException e) {        throw new GraphConflictResolutionException(e);    }}
dea5e2b82c9334bf340a1ae5e5251c89813a31c7eaf768aa99ae11ea44680acb
findLinkedSubgraph
private MetadataGraph findLinkedSubgraph(MetadataGraph g)
{    if (g.getVertices().size() == 1) {        return g;    }    List<MetadataGraphVertex> visited = new ArrayList<>(g.getVertices().size());    visit(g.getEntry(), visited, g);    List<MetadataGraphVertex> dropList = new ArrayList<>(g.getVertices().size());        for (MetadataGraphVertex v : g.getVertices()) {        if (!visited.contains(v)) {            dropList.add(v);        }    }    if (dropList.size() < 1) {        return g;    }        TreeSet<MetadataGraphVertex> vertices = g.getVertices();    for (MetadataGraphVertex v : dropList) {        vertices.remove(v);    }    return g;}
98065aaecfe9b843c81c68226863b8ad879fdde9a8230ed71101299483c359bf
visit
private void visit(MetadataGraphVertex from, List<MetadataGraphVertex> visited, MetadataGraph graph)
{    if (visited.contains(from)) {        return;    }    visited.add(from);    List<MetadataGraphEdge> exitList = graph.getExcidentEdges(from);        if (exitList != null && exitList.size() > 0) {        for (MetadataGraphEdge e : graph.getExcidentEdges(from)) {            visit(e.getTarget(), visited, graph);        }    }}
b56a241ca9f0d9d2c00bd0d11b8fb21609df697051b015626da0f8f46d4b4d53
cleanEdges
private MetadataGraphEdge cleanEdges(MetadataGraphVertex v, List<MetadataGraphEdge> edges, ArtifactScopeEnum scope)
{    if (edges == null || edges.isEmpty()) {        return null;    }    if (edges.size() == 1) {        MetadataGraphEdge e = edges.get(0);        if (scope.encloses(e.getScope())) {            return e;        }        return null;    }    MetadataGraphEdge res = null;    for (MetadataGraphEdge e : edges) {        if (!scope.encloses(e.getScope())) {            continue;        }        if (res == null) {            res = e;        } else {            res = policy.apply(e, res);        }    }    return res;}
db86d218eef370db7c1a89cc1167aef24157dd720bbde9cbb3f67b7d66668013
processTreeNodes
private void processTreeNodes(MetadataGraphVertex parentVertex, MetadataTreeNode node, int depth, int pomOrder) throws MetadataResolutionException
{    if (node == null) {        return;    }    MetadataGraphVertex vertex = new MetadataGraphVertex(node.md, versionedVertices, scopedVertices);    if (!vertices.contains(vertex)) {        vertices.add(vertex);    }    if (    parentVertex != null) {        ArtifactMetadata md = node.getMd();        MetadataGraphEdge e = new MetadataGraphEdge(md.version, md.resolved, md.artifactScope, md.artifactUri, depth, pomOrder);        addEdge(parentVertex, vertex, e);    } else {        entry = vertex;    }    MetadataTreeNode[] kids = node.getChildren();    if (kids == null || kids.length < 1) {        return;    }    for (int i = 0; i < kids.length; i++) {        MetadataTreeNode n = kids[i];        processTreeNodes(vertex, n, depth + 1, i);    }}
ba668e605a8aed9dd1937c0cf76ef00edeac04d3b4b7e43cc05b54d580e6b7b3
findVertex
public MetadataGraphVertex findVertex(ArtifactMetadata md)
{    if (md == null || vertices == null || vertices.size() < 1) {        return null;    }    MetadataGraphVertex v = new MetadataGraphVertex(md);    v.setCompareVersion(versionedVertices);    v.setCompareScope(scopedVertices);    for (MetadataGraphVertex gv : vertices) {        if (gv.equals(v)) {            return gv;        }    }    return null;}
d502695a21d4a3291913d1d60a0f1071ffa7754d196dbbed03247db9f6d37aec
addVertex
public MetadataGraphVertex addVertex(ArtifactMetadata md)
{    if (md == null) {        return null;    }    checkVertices();    MetadataGraphVertex v = findVertex(md);    if (v != null) {        return v;    }    v = new MetadataGraphVertex(md);    v.setCompareVersion(versionedVertices);    v.setCompareScope(scopedVertices);    vertices.add(v);    return v;}
cb48023c1a8ae4bab6181bf7deb6a32072600a3be39e2a784798568571eeb4ad
init
private void init(int nVertices, int nEdges)
{    int nV = nVertices;    if (nVertices < 1) {        nV = 1;    }    checkVertices(nV);    int nE = nVertices;    if (nEdges <= nV) {        nE = 2 * nE;    }    checkEdges(nE);}
72cb7b8845e72c500446b6075836b0bac03802a69ba161708d8e245bd498164d
checkVertices
private void checkVertices()
{    checkVertices(DEFAULT_VERTICES);}
631520c66da1b61ef4097db1acc4bdfe805a765e176ea56ac0b961ac9fc5b233
checkVertices
private void checkVertices(int nVertices)
{    if (vertices == null) {        vertices = new TreeSet<>();    }}
59c122e9f70781a5e13758f6bde0133d4f622b51839aaa538070cdbcf1688ccf
checkEdges
private void checkEdges()
{    int count = DEFAULT_EDGES;    if (vertices != null) {        count = vertices.size() + vertices.size() / 2;    }    checkEdges(count);}
b64a0e56fb55b735f724712d841bc73ab8ccfa38e59d8b2109662a700217f7f9
checkEdges
private void checkEdges(int nEdges)
{    if (incidentEdges == null) {        incidentEdges = new HashMap<>(nEdges);    }    if (excidentEdges == null) {        excidentEdges = new HashMap<>(nEdges);    }}
e7066f24e3ab369d1f5357a5e9c598b5b5fa31aeac7f6373476786baf8a2ef01
checkVertex
private static void checkVertex(MetadataGraphVertex v) throws MetadataResolutionException
{    if (v == null) {        throw new MetadataResolutionException("null vertex");    }    if (v.getMd() == null) {        throw new MetadataResolutionException("vertex without metadata");    }}
0fb36dd32129a8613bc6bfe707ef984ccf382db5356bfafb4877cab51731a702
checkEdge
private static void checkEdge(MetadataGraphEdge e) throws MetadataResolutionException
{    if (e == null) {        throw new MetadataResolutionException("badly formed edge");    }}
636e20123dc521f503f38c62eacaa8980e89d84ac65fc22cb4b40e42dd49b68a
getEdgesBetween
public List<MetadataGraphEdge> getEdgesBetween(MetadataGraphVertex vFrom, MetadataGraphVertex vTo)
{    List<MetadataGraphEdge> edges = getIncidentEdges(vTo);    if (edges == null || edges.isEmpty()) {        return null;    }    List<MetadataGraphEdge> res = new ArrayList<>(edges.size());    for (MetadataGraphEdge e : edges) {        if (e.getSource().equals(vFrom)) {            res.add(e);        }    }    return res;}
b5bb354a00077ecfc39ea052efb7e329161be3cd95b3351b9173de96afc9403a
addEdge
public MetadataGraph addEdge(MetadataGraphVertex vFrom, MetadataGraphVertex vTo, MetadataGraphEdge e) throws MetadataResolutionException
{    checkVertex(vFrom);    checkVertex(vTo);    checkVertices();    checkEdge(e);    checkEdges();    e.setSource(vFrom);    e.setTarget(vTo);    vFrom.setCompareVersion(versionedVertices);    vFrom.setCompareScope(scopedVertices);    List<MetadataGraphEdge> exList = excidentEdges.get(vFrom);    if (exList == null) {        exList = new ArrayList<>();        excidentEdges.put(vFrom, exList);    }    if (!exList.contains(e)) {        exList.add(e);    }    List<MetadataGraphEdge> inList = incidentEdges.get(vTo);    if (inList == null) {        inList = new ArrayList<>();        incidentEdges.put(vTo, inList);    }    if (!inList.contains(e)) {        inList.add(e);    }    return this;}
cf2c5f89f849d2b8330455d8f355cf95db7cc40b5728ace69a8bbc4643b643e2
removeVertex
public MetadataGraph removeVertex(MetadataGraphVertex v)
{    if (vertices != null && v != null) {        vertices.remove(v);    }    if (incidentEdges != null) {        incidentEdges.remove(v);    }    if (excidentEdges != null) {        excidentEdges.remove(v);    }    return this;}
c33bc2b68c5e6a9cbec3ec7fb2c4a0f71e9e2e633270fdffe79d7604f2c0e0d1
countNodes
private static int countNodes(MetadataTreeNode tree)
{    if (tree == null) {        return 0;    }    int count = 1;    MetadataTreeNode[] kids = tree.getChildren();    if (kids == null || kids.length < 1) {        return count;    }    for (MetadataTreeNode n : kids) {        count += countNodes(n);    }    return count;}
36049a22f0fa8f46e3470d6a18d0353f412a6c8c3a9ca191101fff3166444d2a
getEntry
public MetadataGraphVertex getEntry()
{    return entry;}
ba3cb632cec95296f8455c68ab291e1a16347f0c7bd2eb387b9a0e4f0bc1dfd5
setEntry
public void setEntry(MetadataGraphVertex entry)
{    this.entry = entry;}
885b93911c97183b0b4cfdb75104919883541ab88bd0307c37988da8eb087f5d
getVertices
public TreeSet<MetadataGraphVertex> getVertices()
{    return vertices;}
ad2ac4518c5c7f357dd2e7a475ec543656f67c1a6f4c1c234d87fee073ca562b
getIncidentEdges
public List<MetadataGraphEdge> getIncidentEdges(MetadataGraphVertex vertex)
{    checkEdges();    return incidentEdges.get(vertex);}
e0380412370f1bbbf9efe622e7c60805318260e34a6fa839cca6fbb7104ee0b4
getExcidentEdges
public List<MetadataGraphEdge> getExcidentEdges(MetadataGraphVertex vertex)
{    checkEdges();    return excidentEdges.get(vertex);}
fb16dbbe8443b56519c94b06744bbb61a88209267c563e94ed8eb1296e6bc21d
isVersionedVertices
public boolean isVersionedVertices()
{    return versionedVertices;}
b70357b69d9f1b986eecc74bfe902e15551d975a483787f682bc0cd4f9b068a3
setVersionedVertices
public void setVersionedVertices(boolean versionedVertices)
{    this.versionedVertices = versionedVertices;}
5068085be3834018e494b7f302ba3e4a11a8bc020a5824ee48a43746aa6bf50e
isScopedVertices
public boolean isScopedVertices()
{    return scopedVertices;}
52ddc37e95d8d4e15021a5173644e7f053d6d9c76fad485778e97e12730a3eea
setScopedVertices
public void setScopedVertices(boolean scopedVertices)
{    this.scopedVertices = scopedVertices;        if (scopedVertices) {        versionedVertices = true;    }}
8310701a13cab78214dad1dc5d61350e837e096d5680ad021d5d16017ce25a96
getScope
public ArtifactScopeEnum getScope()
{    return scope;}
464958a1b122d5f8b648cc23e976cf95fd76dda5fc31586519fd0b937cf4c65e
setScope
public void setScope(ArtifactScopeEnum scope)
{    this.scope = scope;}
803915e853382ad445a6e2333fabb8beb8e4acd70e908a0d818400f7baac42af
isEmpty
public boolean isEmpty()
{    return entry == null || vertices == null || vertices.isEmpty();}
b953b0bdee2f8a732501be239792afe2f5ed9f8ca61fa5dd8aa0c1141afb0262
isEmptyEdges
public boolean isEmptyEdges()
{    return isEmpty() || incidentEdges == null || incidentEdges.isEmpty();}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    StringBuilder sb = new StringBuilder(512);    if (isEmpty()) {        return "empty";    }    for (MetadataGraphVertex v : vertices) {        sb.append("Vertex:  ").append(v.getMd().toString()).append('\n');        List<MetadataGraphEdge> ins = getIncidentEdges(v);        if (ins != null) {            for (MetadataGraphEdge e : ins) {                sb.append("       from :  ").append(e.toString()).append('\n');            }        } else {            sb.append("      no entries\n");        }        List<MetadataGraphEdge> outs = getExcidentEdges(v);        if (outs != null) {            for (MetadataGraphEdge e : outs) {                sb.append("        to :  ").append(e.toString()).append('\n');            }        } else {            sb.append("      no exit\n");        }        sb.append("-------------------------------------------------\n");    }    sb.append("=============================================================\n");    return sb.toString();}
332904b17bc87b062edaa5473cb313dcb27b991e837bc239424def36586653e2
objectsEqual
private static boolean objectsEqual(Object o1, Object o2)
{    if (o1 == null && o2 == null) {        return true;    }    if (o1 == null || o2 == null) {                return false;    }    return o1.equals(o2);}
8d37d11c7ecfc0d0589696a89cb385888c83bd3e43ea0c95a3b4ae4ef78180ce
equals
public boolean equals(Object o)
{    if (o instanceof MetadataGraphEdge) {        MetadataGraphEdge e = (MetadataGraphEdge) o;        return objectsEqual(version, e.version) && ArtifactScopeEnum.checkScope(scope).getScope().equals(ArtifactScopeEnum.checkScope(e.scope).getScope()) && depth == e.depth;    }    return false;}
446b3b91c7c41085df1dc5542616b89ccd409f6a1d45e4d60d3ca00ac839ecf0
getVersion
public String getVersion()
{    return version;}
fa655d76002df94322c0d82cb5fbadecc48b0bb7bb0e58203d0a274985fccd86
setVersion
public void setVersion(String version)
{    this.version = version;}
8310701a13cab78214dad1dc5d61350e837e096d5680ad021d5d16017ce25a96
getScope
public ArtifactScopeEnum getScope()
{    return scope;}
464958a1b122d5f8b648cc23e976cf95fd76dda5fc31586519fd0b937cf4c65e
setScope
public void setScope(ArtifactScopeEnum scope)
{    this.scope = scope;}
bf59abd5eadbc4a8a91e7c05be9505c15b915c4238866a6dfb81b4ad63852244
getDepth
public int getDepth()
{    return depth;}
182f1ce93d6c953f827af02b419b46ab250d77fa557c4d27df22e312724b17b0
setDepth
public void setDepth(int depth)
{    this.depth = depth;}
2fa99a8aa2d293aadf123d8cbc90fb9b630a79bcc950706530654a9eec5b5162
isResolved
public boolean isResolved()
{    return resolved;}
fef31378b34f4ec716c70a189152bb383cecb916bacbf12caacb9219745a1e07
setResolved
public void setResolved(boolean resolved)
{    this.resolved = resolved;}
55d7fc4dc6a3c75a99933b7db72034af006a57b55295ba419efca46f70834a8f
getPomOrder
public int getPomOrder()
{    return pomOrder;}
45e32cb9dfa55366ed467aa50df4d9f178447d5171f18f8a6a8f309051964a4e
setPomOrder
public void setPomOrder(int pomOrder)
{    this.pomOrder = pomOrder;}
35fc2ca800469e7836ba352b16a4b1639dde1690548bd43d7a898bb2983c354b
getArtifactUri
public String getArtifactUri()
{    return artifactUri;}
8d6f07a69fdb40bf8e98f2b018b54405620aa728f08b09c95a7dac59031ea1fa
setArtifactUri
public void setArtifactUri(String artifactUri)
{    this.artifactUri = artifactUri;}
4df56b6e832d7d05ec211891ad6ea2fbf1219214a69d9f6c8b3c25190ae0d4cc
getSource
public MetadataGraphVertex getSource()
{    return source;}
d5ea29c268638d9268c5bf9f7cb4f31ea017444fbd2dea342c84346b9f8c29aa
setSource
public void setSource(MetadataGraphVertex source)
{    this.source = source;}
1c0d77fa38eedf783752bb1a4d3354311d5b720f037c2c26c49ad83fc9b6ee87
getTarget
public MetadataGraphVertex getTarget()
{    return target;}
c39f74563513fcb6e6c741d06f2ee4a78cdb2234691c7708c2e917854c7a1024
setTarget
public void setTarget(MetadataGraphVertex target)
{    this.target = target;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return "[ " + "FROM:(" + (source == null ? "no source" : (source.md == null ? "no source MD" : source.md.toString())) + ") " + "TO:(" + (target == null ? "no target" : (target.md == null ? "no target MD" : target.md.toString())) + ") " + "version=" + version + ", scope=" + (scope == null ? "null" : scope.getScope()) + ", depth=" + depth + "]";}
a48ae98035bfbace3cf1cd8c8e96678ef6a55a42d69f5c3c4e74539b1a2052df
getMd
public ArtifactMetadata getMd()
{    return md;}
f4900bd61d2b77a6697756ad194beb94783d19aa18f36f916b2de74ac2d2a538
setMd
public void setMd(ArtifactMetadata md)
{    this.md = md;}
5a412324ff2d35ffbef03bd3067198980cb9760af8a03467f37ac99ad36a545b
isCompareVersion
public boolean isCompareVersion()
{    return compareVersion;}
c3471b8a97059a357776b386d266a361e1588be5ede952559b516e9d78b6746d
setCompareVersion
public void setCompareVersion(boolean compareVersion)
{    this.compareVersion = compareVersion;}
013d647d20c4829df5db9e1ff7f0da46c2eeac3250168222c6d62603ba074aaa
isCompareScope
public boolean isCompareScope()
{    return compareScope;}
8058e084215b5f996dae26e6b1c4918520f9bef0e7298fe4d2af67cfdac50cb8
setCompareScope
public void setCompareScope(boolean compareScope)
{    this.compareScope = compareScope;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return "[" + (md == null ? "no metadata" : md.toString()) + "]";}
d2961eac4d003edadc4313c10c1f09a2e23276d46ee145ab1777dda9cb737e77
compareStrings
private static int compareStrings(String s1, String s2)
{    if (s1 == null && s2 == null) {        return 0;    }    if (s1 == null) /* && s2 != null */    {        return -1;    }    if (/* s1 != null && */    s2 == null) {        return 1;    }    return s1.compareTo(s2);}
ab6dd021c04ed408476a95e808efc1e0c980222d78c74720bf27b58fb925ad64
compareTo
public int compareTo(MetadataGraphVertex vertex)
{    if (vertex == null || vertex.getMd() == null) {        return 1;    }    ArtifactMetadata vmd = vertex.getMd();    if (vmd == null) {        if (md == null) {            return 0;        } else {            return 1;        }    }    int g = compareStrings(md.groupId, vmd.groupId);    if (g == 0) {        int a = compareStrings(md.artifactId, vmd.artifactId);        if (a == 0) {            if (compareVersion) {                int v = compareStrings(md.version, vmd.version);                if (v == 0) {                    if (compareScope) {                        String s1 = ArtifactScopeEnum.checkScope(md.artifactScope).getScope();                        String s2 = ArtifactScopeEnum.checkScope(vmd.artifactScope).getScope();                        return s1.compareTo(s2);                    } else {                        return 0;                    }                } else {                    return v;                }            } else {                return 0;            }        } else {            return a;        }    }    return g;}
abba2301e3d81c8ebcd636279a73cff21419646791494076c532e284403c7d44
equals
public boolean equals(Object vo)
{    if (vo == null || !(vo instanceof MetadataGraphVertex)) {        return false;    }    return compareTo((MetadataGraphVertex) vo) == 0;}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    if (md == null) {        return super.hashCode();    }    StringBuilder hashString = new StringBuilder(128);    hashString.append(md.groupId).append('|');    hashString.append(md.artifactId).append('|');    if (compareVersion) {        hashString.append(md.version).append('|');    }    if (compareScope) {        hashString.append(md.getArtifactScope()).append('|');    }    return hashString.toString().hashCode();}
2df6c7c476a064ff240574674a2fd4b92276719b09e443e50ddb126fc28ebac9
getMetadataRepositories
public Collection<ArtifactRepository> getMetadataRepositories()
{    return metadataRepositories;}
47249fbffe82794b810d30a217b71c9ce7f7eeefb786a9d3f471e673eb9abee3
setMetadataRepositories
public void setMetadataRepositories(Collection<ArtifactRepository> metadataRepositories)
{    this.metadataRepositories = metadataRepositories;}
bec509b103268564afaf1386fd5b8bb2b47c0978cc91216f3b6096c6cb579fd2
getArtifactMetadata
public ArtifactMetadata getArtifactMetadata()
{    return artifactMetadata;}
52c62cc1cc5c0beb4630ac30917d273cd595273d90958447da870b1f0866b846
setArtifactMetadata
public void setArtifactMetadata(ArtifactMetadata artifactMetadata)
{    this.artifactMetadata = artifactMetadata;}
1d5429afb50f86ecd31396765053268bdcebb5aa3378864752adf621f68c4ea5
getQuery
public ArtifactMetadata getQuery()
{    return query;}
3410cfe941504111eb964c569980f337e08be05ef16a03c1f885ae115d605d18
setQuery
public void setQuery(ArtifactMetadata query)
{    this.query = query;}
64dc696be33c6c348d62217243ad7506283ed2be89f1b5410c8acb51390d930b
getLocalRepository
public ArtifactRepository getLocalRepository()
{    return localRepository;}
3c6dc47c983d15749bd81aadb34652e5aad1a5fcacfd083790bb614459cf8051
setLocalRepository
public void setLocalRepository(ArtifactRepository localRepository)
{    this.localRepository = localRepository;}
4fd44e1a9f23aaf113060017b1d8f6d3cf8794c129edf477e6b2ddacdfe7400d
getRemoteRepositories
public List<ArtifactRepository> getRemoteRepositories()
{    return remoteRepositories;}
7c7824a68a05d18a8f6242da14dbcf375fa864af29dc01497f28d5de6e9f0f1e
setRemoteRepositories
public void setRemoteRepositories(List<ArtifactRepository> remoteRepositories)
{    this.remoteRepositories = remoteRepositories;}
88187863014f9569e6378eef1914c47682c2f68e03f1603006cb774d90310666
getId
 int getId()
{    return id;}
055a07c6c155d9776bcc14a0a556c9b16e50a0a9880aca430fe1e898d5332f89
getTree
public MetadataTreeNode getTree()
{    return treeRoot;}
1acb8efaf0515d757bc60d37fe2247cdffd75b42cc49de29cb7787fe1552c20b
setTree
public void setTree(MetadataTreeNode root)
{    this.treeRoot = root;}
146b5b0382ae3470b50d3ea560c23b3b12dab92c4cd3be4549cfbd02e757fd74
initTreeProcessing
public void initTreeProcessing(PlexusContainer plexus) throws ComponentLookupException
{    classpathTransformation = plexus.lookup(ClasspathTransformation.class);    conflictResolver = plexus.lookup(GraphConflictResolver.class);}
daeeea3b268a30797772fea3d018e8819d75fc69d884a30368cf7eccf14be993
getGraph
public MetadataGraph getGraph() throws MetadataResolutionException
{    return treeRoot == null ? null : new MetadataGraph(treeRoot);}
676184ca015cde6c036c1c653ad71d5327826908af7326b6fabd6a548599d477
getGraph
public MetadataGraph getGraph(ArtifactScopeEnum scope) throws MetadataResolutionException, GraphConflictResolutionException
{    if (treeRoot == null) {        return null;    }    if (conflictResolver == null) {        return null;    }    return conflictResolver.resolveConflicts(getGraph(), scope);}
7aef4b11a944a9e49432aae1f589fb49d0a0273fa7740fb7da1bed93050e38c3
getGraph
public MetadataGraph getGraph(MetadataResolutionRequestTypeEnum requestType) throws MetadataResolutionException, GraphConflictResolutionException
{    if (requestType == null) {        return null;    }    if (treeRoot == null) {        return null;    }    if (conflictResolver == null) {        return null;    }    if (requestType.equals(MetadataResolutionRequestTypeEnum.classpathCompile)) {        return conflictResolver.resolveConflicts(getGraph(), ArtifactScopeEnum.compile);    } else if (requestType.equals(MetadataResolutionRequestTypeEnum.classpathRuntime)) {        return conflictResolver.resolveConflicts(getGraph(), ArtifactScopeEnum.runtime);    } else if (requestType.equals(MetadataResolutionRequestTypeEnum.classpathTest)) {        return conflictResolver.resolveConflicts(getGraph(), ArtifactScopeEnum.test);    } else if (requestType.equals(MetadataResolutionRequestTypeEnum.graph)) {        return getGraph();    } else if (requestType.equals(MetadataResolutionRequestTypeEnum.versionedGraph)) {        return new MetadataGraph(getTree(), true, false);    } else if (requestType.equals(MetadataResolutionRequestTypeEnum.scopedGraph)) {        return new MetadataGraph(getTree(), true, true);    }    return null;}
591451f12a49a25757917031f84b1631b18f376c51780844e7a0f568d1ebcd70
getClasspath
public ClasspathContainer getClasspath(ArtifactScopeEnum scope) throws MetadataGraphTransformationException, MetadataResolutionException
{    if (classpathTransformation == null) {        return null;    }    MetadataGraph dirtyGraph = getGraph();    if (dirtyGraph == null) {        return null;    }    return classpathTransformation.transform(dirtyGraph, scope, false);}
dfe054a61e3dba8e03868846657db50be255b1ae6a750d2c19f1b35c70e20a95
getClasspathTree
public MetadataTreeNode getClasspathTree(ArtifactScopeEnum scope) throws MetadataGraphTransformationException, MetadataResolutionException
{    ClasspathContainer cpc = getClasspath(scope);    if (cpc == null) {        return null;    }    return cpc.getClasspathAsTree();}
bec509b103268564afaf1386fd5b8bb2b47c0978cc91216f3b6096c6cb579fd2
getArtifactMetadata
public ArtifactMetadata getArtifactMetadata()
{    return artifact;}
e73e7beeb42526c54ada85f36854c92602b9adc50a9b2b19036e953b85516794
getNChildren
public int getNChildren()
{    return nChildren;}
c5b0fdc4766d9ee415e6a9eee354f36344cdbbe4bfc4d598a89c87ffbb0c144d
setNChildren
public void setNChildren(int children)
{    nChildren = children;}
cd1dcc157dd48fa640337390f0a9ea84b04127af09d85d8776c069fba7f519b1
addChild
public void addChild(int index, MetadataTreeNode kid)
{    if (kid == null) {        return;    }    if (children == null) {        children = new MetadataTreeNode[nChildren];    }    children[index % nChildren] = kid;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return md == null ? "no metadata" : md.toString();}
3a4404fe80d869383964b7763eccd9221b306d50b3bd47cb76dc931e5dc45d58
graphHash
public String graphHash() throws MetadataResolutionException
{    if (md == null) {        throw new MetadataResolutionException("treenode without metadata, parent: " + (parent == null ? "null" : parent.toString()));    }    return md.groupId + ":" + md.artifactId;}
65c976cc5e7137c02f014c9e6a40ae125e586d4b612eba04b1bac94ae5e48ff0
hasChildren
public boolean hasChildren()
{    return children != null;}
a48ae98035bfbace3cf1cd8c8e96678ef6a55a42d69f5c3c4e74539b1a2052df
getMd
public ArtifactMetadata getMd()
{    return md;}
f4900bd61d2b77a6697756ad194beb94783d19aa18f36f916b2de74ac2d2a538
setMd
public void setMd(ArtifactMetadata md)
{    this.md = md;}
00ccfb32a62b6e9e83a619d170b4b1945b74d4b0219cb865cf75e78eeb9101a8
getParent
public MetadataTreeNode getParent()
{    return parent;}
8515e0896d130cdf4c4fe39116935e94d04daecbd6da828a2b346faf5f276071
setParent
public void setParent(MetadataTreeNode parent)
{    this.parent = parent;}
91c26bcc8da39570513be08cfb6de6c58c04c918615c06807f133b1e3081bc6f
getChildren
public MetadataTreeNode[] getChildren()
{    return children;}
4eca866c1907467024dc1b5095be2d34d236cb4c5595b4391fd8f38d637bd54d
setChildren
public void setChildren(MetadataTreeNode[] children)
{    this.children = children;}
d85674c02e9cae1f98b2fecd48905cfce9393a89ad945e52f2f6b8c0fc9d0c0c
addNode
public void addNode(MetadataGraphNode node)
{    nodes.add(node);}
ae5a384593aa741043bb148347249d7b912f6b4c7ee19b30ff9b2b663050f936
findNode
public MetadataGraphNode findNode(MavenArtifactMetadata md)
{    for (MetadataGraphNode mgn : nodes) {        if (mgn.metadata.equals(md)) {            return mgn;        }    }    MetadataGraphNode node = new MetadataGraphNode(md);    addNode(node);    return node;}
0f693529c160f648c4a748e32270be1d4bbc8a9b1e2be5f4b4cad3a6024eb713
getEntry
public MetadataGraphNode getEntry()
{    return entry;}
aa1d7ee40193f69012f2626a214468f8e2f0e7e6aef1c8ee3b77568beaabb66f
getNodes
public Collection<MetadataGraphNode> getNodes()
{    return nodes;}
d38fbc1dcbf9ee37db0ddcb0f5778407b0f20c382e84910eed9c707735c7d325
addIncident
public MetadataGraphNode addIncident(MetadataGraphNode node)
{    inNodes.add(node);    return this;}
8888367b1b16856911f2f4f088733587b8c418dcb86a22dc9964b99bd7f75c51
addExident
public MetadataGraphNode addExident(MetadataGraphNode node)
{    exNodes.add(node);    return this;}
4afeb0868b55bdd8e18a00a3cb43d83e0714378d1c4bb36f0936daefc060e2e8
equals
public boolean equals(Object obj)
{    if (obj == null) {        return false;    }    if (MetadataGraphNode.class.isAssignableFrom(obj.getClass())) {        MetadataGraphNode node2 = (MetadataGraphNode) obj;        if (node2.metadata == null) {            return metadata == null;        }        return metadata != null && metadata.toString().equals(node2.metadata.toString());    } else {        return super.equals(obj);    }}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    if (metadata == null) {        return super.hashCode();    }    return metadata.toString().hashCode();}
88d64da8ea507b51ef399fee6fef4bb369db7c037e8b18c6d4754c643e5c102c
getArtifactMetadata
public MavenArtifactMetadata getArtifactMetadata()
{    return mad;}
32443b1d107a3795ae389999979ef34bf6decef78ab502bfb00284b941c43e99
setArtifactMetadata
public MetadataResolutionRequest setArtifactMetadata(MavenArtifactMetadata md)
{    this.mad = md;    return this;}
02059d6404ab0ba7b9eecce4ce42858777074a30a04688f7fd0449187d266350
setArtifactDependencies
public MetadataResolutionRequest setArtifactDependencies(Set<Artifact> artifactDependencies)
{    this.artifactDependencies = artifactDependencies;    return this;}
7534c0e1d930e877f11ccdf9321188c374518dba08069605f63c865a342953c0
getArtifactDependencies
public Set<Artifact> getArtifactDependencies()
{    return artifactDependencies;}
64dc696be33c6c348d62217243ad7506283ed2be89f1b5410c8acb51390d930b
getLocalRepository
public ArtifactRepository getLocalRepository()
{    return localRepository;}
fb66aef4e4ca9ebf37e9fb36c2ea25b4c3c9d565b351192c0399f1ddc3b5ab49
setLocalRepository
public MetadataResolutionRequest setLocalRepository(ArtifactRepository localRepository)
{    this.localRepository = localRepository;    return this;}
a1559e397a9b0d9ace9cc7943b3fe717944daf602178d64549de6b2937a1f5d2
getRemoteRepostories
public List<ArtifactRepository> getRemoteRepostories()
{    return remoteRepositories;}
4fd44e1a9f23aaf113060017b1d8f6d3cf8794c129edf477e6b2ddacdfe7400d
getRemoteRepositories
public List<ArtifactRepository> getRemoteRepositories()
{    return getRemoteRepostories();}
ea7e12d129d59fa4341f3658e1fc05bd11360df60498645a3ce17d93bb6057e3
setRemoteRepostories
public MetadataResolutionRequest setRemoteRepostories(List<ArtifactRepository> remoteRepostories)
{    this.remoteRepositories = remoteRepostories;    return this;}
a4b3fef4a6aa7a1fc69928eba34bc218e8804c0c69fe46cbe69f8126fc90829a
setRemoteRepositories
public MetadataResolutionRequest setRemoteRepositories(List<ArtifactRepository> remoteRepositories)
{    return setRemoteRepostories(remoteRepositories);}
67bfd421659fed05a5bbfcaf690c7ffaa8e201bb85f31150f63a5a974e3ecf52
getManagedVersionMap
public Map getManagedVersionMap()
{    return managedVersionMap;}
4846c2be616e44c9288a14eedebce0f33962eac8f5f179187c08ffb2f099a081
setManagedVersionMap
public MetadataResolutionRequest setManagedVersionMap(Map managedVersionMap)
{    this.managedVersionMap = managedVersionMap;    return this;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    StringBuilder sb = new StringBuilder().append("REQUEST: ").append("\n").append("artifact: ").append(mad).append("\n").append(artifactDependencies).append("\n").append("localRepository: ").append(localRepository).append("\n").append("remoteRepositories: ").append(remoteRepositories).append("\n");    return sb.toString();}
cceaa624c9e17bc3f0879784cdf508248b78c0e558bdc7bf6d4c83a1a8d94b4c
isAsList
public boolean isAsList()
{    return asList;}
06592f1ef015499d54cdd909c84d36549bf9df5c25704bc1cebb4f1747083abe
setAsList
public MetadataResolutionRequest setAsList(boolean asList)
{    this.asList = asList;    return this;}
80d03b08e9c51122fbcfce01036ef45d53c652c39bc40adfe33bf659b7657405
isAsDirtyTree
public boolean isAsDirtyTree()
{    return asDirtyTree;}
973967467d5a0dd23171a0c023b2007902ea75fc2b7411aebf2154730e1f9648
setAsDirtyTree
public MetadataResolutionRequest setAsDirtyTree(boolean asDirtyTree)
{    this.asDirtyTree = asDirtyTree;    return this;}
0bf10f9bbbadda8d6e72a29e1603b538383372514bc73a8b8e268ddd289119c4
isAsResolvedTree
public boolean isAsResolvedTree()
{    return asResolvedTree;}
1d4970635d3ac368901222b55aa358a329901040e854ecc584febb811d1e5588
setAsResolvedTree
public MetadataResolutionRequest setAsResolvedTree(boolean asResolvedTree)
{    this.asResolvedTree = asResolvedTree;    return this;}
53e46ed7d49c5d816ea055751a11bfe778db2f55c2d37c5cef39d282ac8677a8
isAsGraph
public boolean isAsGraph()
{    return asGraph;}
840f24e6e2910bfa739035652b58edd575c6f53135776773f816281ebe9c335b
setAsGraph
public MetadataResolutionRequest setAsGraph(boolean asGraph)
{    this.asGraph = asGraph;    return this;}
e8ec7db1d4bee75c3a1396eafa7afbcb4446f2d65c50e7b994adce8cff79e414
setScope
public MetadataResolutionRequest setScope(String scope)
{    this.scope = scope;    return this;}
b6618886f045f72bd87b21e6ae50c04bc9f78ceb97355e9a0b0208f7669f7aa1
getScope
public String getScope()
{    return scope;}
c147a7b6feca62852b6d175286f9a021159aeded96c8aa578d2422b126b0a64b
getOriginatingArtifact
public Artifact getOriginatingArtifact()
{    return originatingArtifact;}
0f5c6860c0d91b8e65592126086bcd9e67f2319224b5fba347fa114c95ac70d5
listOriginatingArtifact
public MetadataResolutionResult listOriginatingArtifact(final Artifact originatingArtifact)
{    this.originatingArtifact = originatingArtifact;    return this;}
9ad93361f44999115a8317aff2798307632ede55fc44f0959e22c6e9ed85ffbf
addArtifact
public void addArtifact(Artifact artifact)
{    if (artifacts == null) {        artifacts = new LinkedHashSet<>();    }    artifacts.add(artifact);}
7fbcab6f8caea634ee263da5b98d32d0edbb7c9976f623f712b9aa9b45246d30
getArtifacts
public Set<Artifact> getArtifacts()
{    return artifacts;}
d319d467183b50190f145ded094790cf715eebee47a1839b18d00cb6b927b070
addRequestedArtifact
public void addRequestedArtifact(Artifact artifact)
{    if (requestedArtifacts == null) {        requestedArtifacts = new LinkedHashSet<>();    }    requestedArtifacts.add(artifact);}
0e6beaae4102045abf7e23000645abc68641c31c5a908775f99806c575ab6a5a
getRequestedArtifacts
public Set<Artifact> getRequestedArtifacts()
{    return requestedArtifacts;}
88178970b2cf7d518f94378fd0b73a623f550fcb2b2dbbacc1154aaedff86489
hasMissingArtifacts
public boolean hasMissingArtifacts()
{    return missingArtifacts != null && !missingArtifacts.isEmpty();}
af9f88fa9ba078665d213d6ee428178026aede11c4b21d282f059bc294a87697
getMissingArtifacts
public List<Artifact> getMissingArtifacts()
{    return missingArtifacts == null ? Collections.<Artifact>emptyList() : Collections.unmodifiableList(missingArtifacts);}
e833cb3758f93ced060488c5a3b4702106db41ebeb29400abc471b925630df18
addMissingArtifact
public MetadataResolutionResult addMissingArtifact(Artifact artifact)
{    missingArtifacts = initList(missingArtifacts);    missingArtifacts.add(artifact);    return this;}
1b0de730044891936b80fe94274cd1742a9c1e6e18d67a4284210b3a88ea1457
setUnresolvedArtifacts
public MetadataResolutionResult setUnresolvedArtifacts(final List<Artifact> unresolvedArtifacts)
{    this.missingArtifacts = unresolvedArtifacts;    return this;}
a1a7f8f9ee39d88cbb24fed8790d6985de9b95699c4a9dffd2608570a001490a
hasExceptions
public boolean hasExceptions()
{    return exceptions != null && !exceptions.isEmpty();}
333ae0038ba75ccee34548e072313ef1bbb50247b8d4c16eb7b033dd7684ec47
getExceptions
public List<Exception> getExceptions()
{    return exceptions == null ? Collections.<Exception>emptyList() : Collections.unmodifiableList(exceptions);}
d4daaeb61af0bbd8e3a2290ae4c80a08f3db28d546bf3116c197a692d6f46bbb
hasVersionRangeViolations
public boolean hasVersionRangeViolations()
{    return versionRangeViolations != null;}
318161f8feef8c2ea16af1016b13ad18cc82b6831fe3ddb68a9a4a4dc3a05e8d
addVersionRangeViolation
public MetadataResolutionResult addVersionRangeViolation(Exception e)
{    versionRangeViolations = initList(versionRangeViolations);    versionRangeViolations.add(e);    exceptions = initList(exceptions);    exceptions.add(e);    return this;}
39fea1fb7986cb9a4a704acbda27d89015b91e0678d5003e795b712556f29918
getVersionRangeViolation
public OverConstrainedVersionException getVersionRangeViolation(int i)
{    return (OverConstrainedVersionException) versionRangeViolations.get(i);}
f31164a8584eefeaac4f9ff53afd4ba2782f85ecc0cf97b2d02e26b26150e3f7
getVersionRangeViolations
public List<Exception> getVersionRangeViolations()
{    return versionRangeViolations == null ? Collections.<Exception>emptyList() : Collections.unmodifiableList(versionRangeViolations);}
bcd76ae6fd0fdadc1dd6b983ef6dc896be0a1bc0f5d43d3b7d152649c8fec603
hasMetadataResolutionExceptions
public boolean hasMetadataResolutionExceptions()
{    return metadataResolutionExceptions != null;}
d91097ba6d36af1f8b4daa28cca6fd0f993d84e427ac864c7b8b0b0cf79f8084
addMetadataResolutionException
public MetadataResolutionResult addMetadataResolutionException(ArtifactResolutionException e)
{    metadataResolutionExceptions = initList(metadataResolutionExceptions);    metadataResolutionExceptions.add(e);    exceptions = initList(exceptions);    exceptions.add(e);    return this;}
9b53ca692db6434e36b97a3b8fe2af03bff942c7bbe23ba053ced8657466dcac
getMetadataResolutionException
public ArtifactResolutionException getMetadataResolutionException(int i)
{    return metadataResolutionExceptions.get(i);}
0873f5a81ee7659cb91e0cabb1f44e630e572c30d6016fd0dc2a816f7efe1d84
getMetadataResolutionExceptions
public List<ArtifactResolutionException> getMetadataResolutionExceptions()
{    return metadataResolutionExceptions == null ? Collections.<ArtifactResolutionException>emptyList() : Collections.unmodifiableList(metadataResolutionExceptions);}
f24802535634ae4ad7cc678a18534afd3b9aceff29bfb81ac836f799175acf39
hasErrorArtifactExceptions
public boolean hasErrorArtifactExceptions()
{    return errorArtifactExceptions != null;}
29e582ab2a615dd391578f5cde3750a4d5de3c27f93d911edfa39c44ab69e38f
addError
public MetadataResolutionResult addError(Exception e)
{    exceptions = initList(exceptions);    exceptions.add(e);    return this;}
18125781712de2da6c7b620558c669d15db4fce1588b61befdb9ec0d7e46dabb
getErrorArtifactExceptions
public List<ArtifactResolutionException> getErrorArtifactExceptions()
{    if (errorArtifactExceptions == null) {        return Collections.emptyList();    }    return Collections.unmodifiableList(errorArtifactExceptions);}
13e956e5b375b3792b434276ee170d23a5da09bfc3bbbde5876a5244a350ae98
hasCircularDependencyExceptions
public boolean hasCircularDependencyExceptions()
{    return circularDependencyExceptions != null;}
2c532780eb44e19d09d701fd04fffbe8d1219453f034e518734152e306882e75
addCircularDependencyException
public MetadataResolutionResult addCircularDependencyException(CyclicDependencyException e)
{    circularDependencyExceptions = initList(circularDependencyExceptions);    circularDependencyExceptions.add(e);    exceptions = initList(exceptions);    exceptions.add(e);    return this;}
529c62a5d374951f1779ce6f38aa38c7f591391bf9e18f89215a157c52f47ee5
getCircularDependencyException
public CyclicDependencyException getCircularDependencyException(int i)
{    return circularDependencyExceptions.get(i);}
e30637efd9a703fac7c269b970d6e75be215ddc571f46788f73050b6c39ea142
getCircularDependencyExceptions
public List<CyclicDependencyException> getCircularDependencyExceptions()
{    if (circularDependencyExceptions == null) {        return Collections.emptyList();    }    return Collections.unmodifiableList(circularDependencyExceptions);}
a84be80ef151360f291e377f2640582b832a596c092c69f1ac1ced3c7b438ac5
getRepositories
public List<ArtifactRepository> getRepositories()
{    if (repositories == null) {        return Collections.emptyList();    }    return Collections.unmodifiableList(repositories);}
e24c5660f1bdd66bb30f19efd850202fd1d80d75b5ed36af96f5ec590df8a178
setRepositories
public MetadataResolutionResult setRepositories(final List<ArtifactRepository> repositories)
{    this.repositories = repositories;    return this;}
5589bba01b2057fd5866f5f8a1aec1f34e8ec6035f7e8ce3006cb9a12301bdfb
initList
private List<T> initList(final List<T> l)
{    if (l == null) {        return new ArrayList<>();    }    return l;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    if (artifacts == null) {        return "";    }    StringBuilder sb = new StringBuilder(256);    int i = 1;    sb.append("---------\n");    sb.append(artifacts.size()).append('\n');    for (Artifact a : artifacts) {        sb.append(i).append(' ').append(a).append('\n');        i++;    }    sb.append("---------\n");    return sb.toString();}
17870901c7dac7878ed4ad89c7b1e3cc46ed273b8322b58aa31237b824a9fe39
getResolvedTree
public MetadataGraph getResolvedTree()
{    return resolvedTree;}
2585b3fa5a0dfb5d386b16caa1b812df1bedd1ff20ac6a6c762456e4851620b4
setResolvedTree
public void setResolvedTree(MetadataGraph resolvedTree)
{    this.resolvedTree = resolvedTree;}
288e92881fed3bc8b09523aa53dbafc19c0d7a2134e03bc81446cb3e3ad05475
find
public Artifact find(Artifact artifact)
{    File artifactFile = new File(localRepository.getBasedir(), pathOf(artifact));            artifact.setFile(artifactFile);    return artifact;}
09e8f13a9a603d31d64bb498b77d15572483824d843d0e82a570643192f62186
getId
public String getId()
{    return localRepository.getId();}
2bf3ce12ca84872494a2865c7a246067b1efd12dc3403ae1a3b69eb89fda872e
pathOfLocalRepositoryMetadata
public String pathOfLocalRepositoryMetadata(ArtifactMetadata metadata, ArtifactRepository repository)
{    return localRepository.pathOfLocalRepositoryMetadata(metadata, repository);}
6c63652ca89949e5d136675e9b8c89f393e36286bda4d26fa63c77d8d06c4fab
pathOf
public String pathOf(Artifact artifact)
{    return localRepository.pathOf(artifact);}
7505bec215c06af90dac1f0ca265f96233d5a76aeafab2962d5ac76580318880
hasLocalMetadata
public boolean hasLocalMetadata()
{    return true;}
318388d370c7316e8cf967d497d95fde2c86982cf831ef2c67918eaa671b28d7
formatLocationInPom
private static String formatLocationInPom(Dependency dependency)
{    return "Dependency: " + ArtifactUtils.versionlessKey(dependency.getGroupId(), dependency.getArtifactId());}
7fff3741c2125c4011d8febf8d3f255073b69b9d3003c531ce5a284c4820063f
getDependency
public Dependency getDependency()
{    return dependency;}
ad67d5b9fa7e17a19cbfed8dce418c9bb6a0b5a721f5e5755b5b3c36c14801d9
getProjectId
public String getProjectId()
{    return projectId;}
9e41472ee24bfb1867a8e9e5c5bd1fe3eb2642f5fedb094f54f96a5b46b086ba
getPomFile
public File getPomFile()
{    return pomFile;}
00ba3e2766c44af648b6189bd6305ee4fe62d54f987cc0e3b3cbae7c3f2b8cfa
getCauseException
public InvalidVersionSpecificationException getCauseException()
{    return cause;}
17104e26bd03cd1d5193209f25c3ecb18bf9f7642473c919e2418d979f9051ae
load
public static Map<String, Expression> load() throws ExpressionDocumentationException
{    if (expressionDocumentation == null) {        expressionDocumentation = new HashMap<>();        ClassLoader docLoader = initializeDocLoader();        for (String root : EXPRESSION_ROOTS) {            try (InputStream docStream = docLoader.getResourceAsStream(EXPRESSION_DOCO_ROOTPATH + root + ".paramdoc.xml")) {                if (docStream != null) {                    Map<String, Expression> doco = parseExpressionDocumentation(docStream);                    expressionDocumentation.putAll(doco);                }            } catch (IOException e) {                throw new ExpressionDocumentationException("Failed to read documentation for expression root: " + root, e);            } catch (XmlPullParserException e) {                throw new ExpressionDocumentationException("Failed to parse documentation for expression root: " + root, e);            }        }    }    return expressionDocumentation;}
f7bf363748c99a81527ae9b82f53b405e4572a2bfc8fcd834b8389b60485e346
parseExpressionDocumentation
private static Map<String, Expression> parseExpressionDocumentation(InputStream docStream) throws IOException, XmlPullParserException
{    Reader reader = new BufferedReader(ReaderFactory.newXmlReader(docStream));    ParamdocXpp3Reader paramdocReader = new ParamdocXpp3Reader();    ExpressionDocumentation documentation = paramdocReader.read(reader, true);    List<Expression> expressions = documentation.getExpressions();    Map<String, Expression> bySyntax = new HashMap<>();    if (expressions != null && !expressions.isEmpty()) {        for (Expression expression : expressions) {            bySyntax.put(expression.getSyntax(), expression);        }    }    return bySyntax;}
da072da06e61ef89c131c1183f6ee9be910ba956de341a41201542d858d7a5a8
initializeDocLoader
private static ClassLoader initializeDocLoader() throws ExpressionDocumentationException
{    String myResourcePath = ExpressionDocumenter.class.getName().replace('.', '/') + ".class";    URL myResource = ExpressionDocumenter.class.getClassLoader().getResource(myResourcePath);    assert myResource != null : "The resource is this class itself loaded by its own classloader and must exist";    String myClasspathEntry = myResource.getPath();    myClasspathEntry = myClasspathEntry.substring(0, myClasspathEntry.length() - (myResourcePath.length() + 2));    if (myClasspathEntry.startsWith("file:")) {        myClasspathEntry = myClasspathEntry.substring("file:".length());    }    URL docResource;    try {        docResource = new File(myClasspathEntry).toURL();    } catch (MalformedURLException e) {        throw new ExpressionDocumentationException("Cannot construct expression documentation classpath" + " resource base.", e);    }    return new URLClassLoader(new URL[] { docResource });}
d57c1d7022b9b24e5d6471b55681e866b61cc2646c5e5e41baf69039be0b670b
customizeContainerConfiguration
protected void customizeContainerConfiguration(ContainerConfiguration containerConfiguration)
{    super.customizeContainerConfiguration(containerConfiguration);    containerConfiguration.setAutoWiring(true);    containerConfiguration.setClassPathScanning(PlexusConstants.SCANNING_INDEX);}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();    artifactFactory = lookup(ArtifactFactory.class);    artifactRepositoryFactory = lookup(ArtifactRepositoryFactory.class);    RepositorySystemSession repoSession = initRepoSession();    MavenSession session = new MavenSession(getContainer(), repoSession, new DefaultMavenExecutionRequest(), new DefaultMavenExecutionResult());    LegacySupport legacySupport = lookup(LegacySupport.class);    legacySupport.setSession(session);}
68bbf6c94fbad4862990669ea582b65c28678087c2377b2c3fb0948d54293af4
tearDown
protected void tearDown() throws Exception
{    release(artifactFactory);    super.tearDown();}
5a9f389b21037d7d1a10667f29c13155227b97b203e8251eb9037cc7a828f014
badLocalRepository
protected ArtifactRepository badLocalRepository() throws Exception
{    String path = "target/test-repositories/" + component() + "/bad-local-repository";    File f = new File(getBasedir(), path);    f.createNewFile();    ArtifactRepositoryLayout repoLayout = (ArtifactRepositoryLayout) lookup(ArtifactRepositoryLayout.ROLE, "default");    return artifactRepositoryFactory.createArtifactRepository("test", "file://" + f.getPath(), repoLayout, null, null);}
0fc77631285a4969cc43e7c9f7f6a22d44892567c034b610d557ab8fbb200294
getRepositoryLayout
protected String getRepositoryLayout()
{    return "default";}
77f5c078862c94ac70faad1d4148b7e9ee3a4dd7b5c73ec3cc7336c99975e69b
localRepository
protected ArtifactRepository localRepository() throws Exception
{    String path = "target/test-repositories/" + component() + "/local-repository";    File f = new File(getBasedir(), path);    ArtifactRepositoryLayout repoLayout = (ArtifactRepositoryLayout) lookup(ArtifactRepositoryLayout.ROLE, "default");    return artifactRepositoryFactory.createArtifactRepository("local", "file://" + f.getPath(), repoLayout, null, null);}
2b604f8de5d109664c77c5984275f24164d36e2a2a014a8a87f4efec077ef48c
remoteRepository
protected ArtifactRepository remoteRepository() throws Exception
{    String path = "target/test-repositories/" + component() + "/remote-repository";    File f = new File(getBasedir(), path);    ArtifactRepositoryLayout repoLayout = (ArtifactRepositoryLayout) lookup(ArtifactRepositoryLayout.ROLE, "default");    return artifactRepositoryFactory.createArtifactRepository("test", "file://" + f.getPath(), repoLayout, new ArtifactRepositoryPolicy(), new ArtifactRepositoryPolicy());}
4e4ddc8a535f4694d8dc1558c443f27ac496c80abe83e4e75d57ec8abb319a01
badRemoteRepository
protected ArtifactRepository badRemoteRepository() throws Exception
{    ArtifactRepositoryLayout repoLayout = (ArtifactRepositoryLayout) lookup(ArtifactRepositoryLayout.ROLE, "default");    return artifactRepositoryFactory.createArtifactRepository("test", "http://foo.bar/repository", repoLayout, null, null);}
8f0a8ee30d394d3f3e918d7eb7a60ebc02c7edcbb551fa1eb5838f5f06b16edb
assertRemoteArtifactPresent
protected void assertRemoteArtifactPresent(Artifact artifact) throws Exception
{    ArtifactRepository remoteRepo = remoteRepository();    String path = remoteRepo.pathOf(artifact);    File file = new File(remoteRepo.getBasedir(), path);    if (!file.exists()) {        fail("Remote artifact " + file + " should be present.");    }}
4441114faa342ca59f41778f8c165612e4ea3c4d513d208f72ca90e9aae056f7
assertLocalArtifactPresent
protected void assertLocalArtifactPresent(Artifact artifact) throws Exception
{    ArtifactRepository localRepo = localRepository();    String path = localRepo.pathOf(artifact);    File file = new File(localRepo.getBasedir(), path);    if (!file.exists()) {        fail("Local artifact " + file + " should be present.");    }}
80c223a540a3c0b5634fd71ca83afd39109680c52a2d98b0b2e4aeb59ed662b0
assertRemoteArtifactNotPresent
protected void assertRemoteArtifactNotPresent(Artifact artifact) throws Exception
{    ArtifactRepository remoteRepo = remoteRepository();    String path = remoteRepo.pathOf(artifact);    File file = new File(remoteRepo.getBasedir(), path);    if (file.exists()) {        fail("Remote artifact " + file + " should not be present.");    }}
4a7d23e07a1d08c5ee82a0e1e29f0180bafe46bd48a22f5f8b3444f906566ca9
assertLocalArtifactNotPresent
protected void assertLocalArtifactNotPresent(Artifact artifact) throws Exception
{    ArtifactRepository localRepo = localRepository();    String path = localRepo.pathOf(artifact);    File file = new File(localRepo.getBasedir(), path);    if (file.exists()) {        fail("Local artifact " + file + " should not be present.");    }}
7c127c08f03880b748603a141e6dd07874b94604894d1885682489f51c4501ba
remoteRepositories
protected List<ArtifactRepository> remoteRepositories() throws Exception
{    List<ArtifactRepository> remoteRepositories = new ArrayList<>();    remoteRepositories.add(remoteRepository());    return remoteRepositories;}
bc4796fb6803bd3bc9966867992832e0367a483be9350f9b7a6584e0452c2dd8
createLocalArtifact
protected Artifact createLocalArtifact(String artifactId, String version) throws Exception
{    Artifact artifact = createArtifact(artifactId, version);    createArtifact(artifact, localRepository());    return artifact;}
0edf2cea6980d36a823480ca4b0f44c7f5412f0a571dda271cc5234344db24d2
createRemoteArtifact
protected Artifact createRemoteArtifact(String artifactId, String version) throws Exception
{    Artifact artifact = createArtifact(artifactId, version);    createArtifact(artifact, remoteRepository());    return artifact;}
480f68c8a97b16159ef92d0146092d503fb65029af4ae20d59ac67d32e4b0b28
createLocalArtifact
protected void createLocalArtifact(Artifact artifact) throws Exception
{    createArtifact(artifact, localRepository());}
b41babdfc105ac214fd0a6dc46adc1e0cbcc15d14ccba123489f345d892a0610
createRemoteArtifact
protected void createRemoteArtifact(Artifact artifact) throws Exception
{    createArtifact(artifact, remoteRepository());}
812481cc14eebb3b562b61994dd9a79342c9dcefc7424b15ef5a768563937d2a
createArtifact
protected void createArtifact(Artifact artifact, ArtifactRepository repository) throws Exception
{    String path = repository.pathOf(artifact);    File artifactFile = new File(repository.getBasedir(), path);    if (!artifactFile.getParentFile().exists()) {        artifactFile.getParentFile().mkdirs();    }    try (Writer writer = new OutputStreamWriter(new FileOutputStream(artifactFile), "ISO-8859-1")) {        writer.write(artifact.getId());    }}
5be5b9807557a0b89662d803bdc65cc5090d035ac7a12e81b5c1c2dcf2a8f5e1
createArtifact
protected Artifact createArtifact(String artifactId, String version) throws Exception
{    return createArtifact(artifactId, version, "jar");}
63cd4b7ddfff087b52c745c3fe67415905e608e860d100a3ec1aea6604e85eae
createArtifact
protected Artifact createArtifact(String artifactId, String version, String type) throws Exception
{    return createArtifact("org.apache.maven", artifactId, version, type);}
60669bee801822225130448bbd412c62ea4ed2b03742ead45dae974f37c97a67
createArtifact
protected Artifact createArtifact(String groupId, String artifactId, String version, String type) throws Exception
{    Artifact a = artifactFactory.createBuildArtifact(groupId, artifactId, version, type);    return a;}
c73ad9549f50eb337cc287759c5f8a62dba65bd3113f376a5ba925896c820810
deleteLocalArtifact
protected void deleteLocalArtifact(Artifact artifact) throws Exception
{    deleteArtifact(artifact, localRepository());}
c7d3742debb6bc0eb9c4270cb4ed4e2401ef1ea7ef19d6cc493c449bf26e0da9
deleteArtifact
protected void deleteArtifact(Artifact artifact, ArtifactRepository repository) throws Exception
{    String path = repository.pathOf(artifact);    File artifactFile = new File(repository.getBasedir(), path);    if (artifactFile.exists()) {        if (!artifactFile.delete()) {            throw new IOException("Failure while attempting to delete artifact " + artifactFile);        }    }}
d75fd3a37a286ba9749e6264604ce96b1c89713233ff1fbfd43b64d212079a39
initRepoSession
protected RepositorySystemSession initRepoSession() throws Exception
{    DefaultRepositorySystemSession session = new DefaultRepositorySystemSession();    session.setArtifactDescriptorPolicy(new SimpleArtifactDescriptorPolicy(true, true));    DependencyTraverser depTraverser = new FatArtifactTraverser();    session.setDependencyTraverser(depTraverser);    DependencyManager depManager = new ClassicDependencyManager();    session.setDependencyManager(depManager);    DependencySelector depFilter = new AndDependencySelector(new ScopeDependencySelector("test", "provided"), new OptionalDependencySelector(), new ExclusionDependencySelector());    session.setDependencySelector(depFilter);    DependencyGraphTransformer transformer = new ConflictResolver(new NearestVersionSelector(), new JavaScopeSelector(), new SimpleOptionalitySelector(), new JavaScopeDeriver());    transformer = new ChainedDependencyGraphTransformer(transformer, new JavaDependencyContextRefiner());    session.setDependencyGraphTransformer(transformer);    LocalRepository localRepo = new LocalRepository(localRepository().getBasedir());    session.setLocalRepositoryManager(new SimpleLocalRepositoryManagerFactory().newInstance(session, localRepo));    return session;}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();    artifactDeployer = (ArtifactDeployer) lookup(ArtifactDeployer.ROLE);}
dd59ae9f9cfea8bf9399289d3fe827bfa692a718c5bf26c281144904defa084d
component
protected String component()
{    return "deployer";}
1ca19fff0955b9ba8773f75b91a19755aee4a47fcdccb665f181a8254ab01730
testArtifactInstallation
public void testArtifactInstallation() throws Exception
{    String artifactBasedir = new File(getBasedir(), "src/test/resources/artifact-install").getAbsolutePath();    Artifact artifact = createArtifact("artifact", "1.0");    File file = new File(artifactBasedir, "artifact-1.0.jar");    assertEquals("dummy", FileUtils.fileRead(file, "UTF-8").trim());    artifactDeployer.deploy(file, artifact, remoteRepository(), localRepository());    ArtifactRepository remoteRepository = remoteRepository();    File deployedFile = new File(remoteRepository.getBasedir(), remoteRepository.pathOf(artifact));    assertTrue(deployedFile.exists());    assertEquals("dummy", FileUtils.fileRead(deployedFile, "UTF-8").trim());}
5bba400f6603b67e47f7e66643840fc70b026b0c24e45f5186f68b7b6868d426
retrieve
public ResolutionGroup retrieve(Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories) throws ArtifactMetadataRetrievalException
{    throw new UnsupportedOperationException("Cannot retrieve metadata in this test case");}
f045a47c561ceae88e478bc9c655018ee33f1f9c50881fcce688c25b1aa58caf
retrieveAvailableVersions
public List<ArtifactVersion> retrieveAvailableVersions(Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories) throws ArtifactMetadataRetrievalException
{    return Collections.<ArtifactVersion>singletonList(new DefaultArtifactVersion("10.1.3"));}
b6fa63f75afb47914a4411b185dbeea8f335152adeb209cbddfecf59de218df6
retrieveAvailableVersionsFromDeploymentRepository
public List<ArtifactVersion> retrieveAvailableVersionsFromDeploymentRepository(Artifact artifact, ArtifactRepository localRepository, ArtifactRepository remoteRepository) throws ArtifactMetadataRetrievalException
{    return Collections.<ArtifactVersion>singletonList(new DefaultArtifactVersion("10.1.3"));}
9b8ea57ab997d4826bd7a3e3824dd6e2acc6f5ff7cf8e12bb559485f7a81bae8
retrieve
public ResolutionGroup retrieve(MetadataResolutionRequest request) throws ArtifactMetadataRetrievalException
{    return retrieve(request.getArtifact(), request.getLocalRepository(), request.getRemoteRepositories());}
436b408309735605f72362a422c7a8c5708fe5938f64f50790a17c7149910c5d
testPropagationOfSystemScopeRegardlessOfInheritedScope
public void testPropagationOfSystemScopeRegardlessOfInheritedScope() throws Exception
{    ArtifactFactory factory = (ArtifactFactory) lookup(ArtifactFactory.ROLE);    Artifact artifact = factory.createDependencyArtifact("test-grp", "test-artifact", VersionRange.createFromVersion("1.0"), "type", null, "system", "provided");    Artifact artifact2 = factory.createDependencyArtifact("test-grp", "test-artifact-2", VersionRange.createFromVersion("1.0"), "type", null, "system", "test");    Artifact artifact3 = factory.createDependencyArtifact("test-grp", "test-artifact-3", VersionRange.createFromVersion("1.0"), "type", null, "system", "runtime");    Artifact artifact4 = factory.createDependencyArtifact("test-grp", "test-artifact-4", VersionRange.createFromVersion("1.0"), "type", null, "system", "compile");        Artifact artifact5 = factory.createDependencyArtifact("test-grp", "test-artifact-5", VersionRange.createFromVersion("1.0"), "type", null, "system", "system");    assertEquals("system", artifact.getScope());    assertEquals("system", artifact2.getScope());    assertEquals("system", artifact3.getScope());    assertEquals("system", artifact4.getScope());    assertEquals("system", artifact5.getScope());}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();    artifactInstaller = (ArtifactInstaller) lookup(ArtifactInstaller.ROLE);}
dd59ae9f9cfea8bf9399289d3fe827bfa692a718c5bf26c281144904defa084d
component
protected String component()
{    return "installer";}
1ca19fff0955b9ba8773f75b91a19755aee4a47fcdccb665f181a8254ab01730
testArtifactInstallation
public void testArtifactInstallation() throws Exception
{    String artifactBasedir = new File(getBasedir(), "src/test/resources/artifact-install").getAbsolutePath();    Artifact artifact = createArtifact("artifact", "1.0");    File source = new File(artifactBasedir, "artifact-1.0.jar");    artifactInstaller.install(source, artifact, localRepository());    assertLocalArtifactPresent(artifact);}
5bba400f6603b67e47f7e66643840fc70b026b0c24e45f5186f68b7b6868d426
retrieve
public ResolutionGroup retrieve(Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories) throws ArtifactMetadataRetrievalException
{    Set<Artifact> dependencies = new HashSet<>();    if ("g".equals(artifact.getArtifactId())) {        Artifact a = null;        try {            a = factory.createBuildArtifact("org.apache.maven", "h", "1.0", "jar");            dependencies.add(a);        } catch (Exception e) {            throw new ArtifactMetadataRetrievalException("Error retrieving metadata", e, a);        }    }    if ("i".equals(artifact.getArtifactId())) {        Artifact a = null;        try {            a = factory.createBuildArtifact("org.apache.maven", "j", "1.0-SNAPSHOT", "jar");            dependencies.add(a);        } catch (Exception e) {            throw new ArtifactMetadataRetrievalException("Error retrieving metadata", e, a);        }    }    return new ResolutionGroup(artifact, dependencies, remoteRepositories);}
f045a47c561ceae88e478bc9c655018ee33f1f9c50881fcce688c25b1aa58caf
retrieveAvailableVersions
public List<ArtifactVersion> retrieveAvailableVersions(Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories) throws ArtifactMetadataRetrievalException
{    throw new UnsupportedOperationException("Cannot get available versions in this test case");}
b6fa63f75afb47914a4411b185dbeea8f335152adeb209cbddfecf59de218df6
retrieveAvailableVersionsFromDeploymentRepository
public List<ArtifactVersion> retrieveAvailableVersionsFromDeploymentRepository(Artifact artifact, ArtifactRepository localRepository, ArtifactRepository remoteRepository) throws ArtifactMetadataRetrievalException
{    throw new UnsupportedOperationException("Cannot get available versions in this test case");}
9b8ea57ab997d4826bd7a3e3824dd6e2acc6f5ff7cf8e12bb559485f7a81bae8
retrieve
public ResolutionGroup retrieve(MetadataResolutionRequest request) throws ArtifactMetadataRetrievalException
{    return retrieve(request.getArtifact(), request.getLocalRepository(), request.getRemoteRepositories());}
7f1c1281141386384057b32c578f2d0b7885978914cd039afb29ede35aed8dbe
retrieveAvailableVersions
public List<ArtifactVersion> retrieveAvailableVersions(MetadataResolutionRequest request) throws ArtifactMetadataRetrievalException
{    return retrieveAvailableVersions(request.getArtifact(), request.getLocalRepository(), request.getRemoteRepositories());}
09e8f13a9a603d31d64bb498b77d15572483824d843d0e82a570643192f62186
getId
public String getId()
{    return id;}
03fb94e5903eb5813ccefec2728fddb2d25a85a882e1148297eb029b99474b0c
testHashCodeEquals
public void testHashCodeEquals()
{    MavenArtifactRepositorySubclass r1 = new MavenArtifactRepositorySubclass("foo");    MavenArtifactRepositorySubclass r2 = new MavenArtifactRepositorySubclass("foo");    MavenArtifactRepositorySubclass r3 = new MavenArtifactRepositorySubclass("bar");    assertTrue(r1.hashCode() == r2.hashCode());    assertFalse(r1.hashCode() == r3.hashCode());    assertTrue(r1.equals(r2));    assertTrue(r2.equals(r1));    assertFalse(r1.equals(r3));    assertFalse(r3.equals(r1));}
3d529bd0831ff744f78b0a8aed2fbc11c90c6dd16fdb2ccc0c4529e69cf0865b
testMissingArtifactMessageFormat
public void testMissingArtifactMessageFormat()
{    String message = "Missing artifact";    String indentation = "  ";    String groupId = "aGroupId";    String artifactId = "anArtifactId";    String version = "aVersion";    String type = "jar";    String classifier = "aClassifier";    String downloadUrl = "http://somewhere.com/download";    List<String> path = Arrays.asList("dependency1", "dependency2");    String expected = "Missing artifact" + LS + LS + "  Try downloading the file manually from: " + LS + "      http://somewhere.com/download" + LS + LS + "  Then, install it using the command: " + LS + "      mvn install:install-file -DgroupId=aGroupId -DartifactId=anArtifactId -Dversion=aVersion " + "-Dclassifier=aClassifier -Dpackaging=jar -Dfile=/path/to/file" + LS + LS + "  Alternatively, if you host your own repository you can deploy the file there: " + LS + "      mvn deploy:deploy-file -DgroupId=aGroupId -DartifactId=anArtifactId" + " -Dversion=aVersion -Dclassifier=aClassifier -Dpackaging=jar -Dfile=/path/to/file" + " -Durl=[url] -DrepositoryId=[id]" + LS + LS + "  Path to dependency: " + LS + "  \t1) dependency1" + LS + "  \t2) dependency2" + LS + LS;    String actual = AbstractArtifactResolutionException.constructMissingArtifactMessage(message, indentation, groupId, artifactId, version, type, classifier, downloadUrl, path);    assertEquals(expected, actual);}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();    artifactResolver = (DefaultArtifactResolver) lookup(ArtifactResolver.class);    projectArtifact = createLocalArtifact("project", "3.0");}
68bbf6c94fbad4862990669ea582b65c28678087c2377b2c3fb0948d54293af4
tearDown
protected void tearDown() throws Exception
{    artifactFactory = null;    projectArtifact = null;    super.tearDown();}
dd59ae9f9cfea8bf9399289d3fe827bfa692a718c5bf26c281144904defa084d
component
protected String component()
{    return "resolver";}
133e64e42c80c06825b833ac3285bfc36d917a6adee1c791f73bd8ce46569002
testResolutionOfASingleArtifactWhereTheArtifactIsPresentInTheLocalRepository
public void testResolutionOfASingleArtifactWhereTheArtifactIsPresentInTheLocalRepository() throws Exception
{    Artifact a = createLocalArtifact("a", "1.0");    artifactResolver.resolve(a, remoteRepositories(), localRepository());    assertLocalArtifactPresent(a);}
49811f1ad0d43e3b66bf9cb4709186dcbc6e9f914465d03ba76ecd39b59ced40
testResolutionOfASingleArtifactWhereTheArtifactIsNotPresentLocallyAndMustBeRetrievedFromTheRemoteRepository
public void testResolutionOfASingleArtifactWhereTheArtifactIsNotPresentLocallyAndMustBeRetrievedFromTheRemoteRepository() throws Exception
{    Artifact b = createRemoteArtifact("b", "1.0-SNAPSHOT");    deleteLocalArtifact(b);    artifactResolver.resolve(b, remoteRepositories(), localRepository());    assertLocalArtifactPresent(b);}
60669bee801822225130448bbd412c62ea4ed2b03742ead45dae974f37c97a67
createArtifact
protected Artifact createArtifact(String groupId, String artifactId, String version, String type) throws Exception
{        return super.createArtifact(groupId, artifactId, version, type);}
e659a391348fcdbb7479991cd0591d07bce3f778df5577b556a25d81d74bf690
testTransitiveResolutionWhereAllArtifactsArePresentInTheLocalRepository
public void testTransitiveResolutionWhereAllArtifactsArePresentInTheLocalRepository() throws Exception
{    Artifact g = createLocalArtifact("g", "1.0");    Artifact h = createLocalArtifact("h", "1.0");    ArtifactResolutionResult result = artifactResolver.resolveTransitively(Collections.singleton(g), projectArtifact, remoteRepositories(), localRepository(), null);    printErrors(result);    assertEquals(2, result.getArtifacts().size());    assertTrue(result.getArtifacts().contains(g));    assertTrue(result.getArtifacts().contains(h));    assertLocalArtifactPresent(g);    assertLocalArtifactPresent(h);}
56fb57f195e0cb34cfafb0360b71f1e439531107fd1258ff64b59683db522bdf
testTransitiveResolutionWhereAllArtifactsAreNotPresentInTheLocalRepositoryAndMustBeRetrievedFromTheRemoteRepository
public void testTransitiveResolutionWhereAllArtifactsAreNotPresentInTheLocalRepositoryAndMustBeRetrievedFromTheRemoteRepository() throws Exception
{    Artifact i = createRemoteArtifact("i", "1.0-SNAPSHOT");    deleteLocalArtifact(i);    Artifact j = createRemoteArtifact("j", "1.0-SNAPSHOT");    deleteLocalArtifact(j);    ArtifactResolutionResult result = artifactResolver.resolveTransitively(Collections.singleton(i), projectArtifact, remoteRepositories(), localRepository(), null);    printErrors(result);    assertEquals(2, result.getArtifacts().size());    assertTrue(result.getArtifacts().contains(i));    assertTrue(result.getArtifacts().contains(j));    assertLocalArtifactPresent(i);    assertLocalArtifactPresent(j);}
592a2badc36db38bf387af21e773c5ee39d397d0f1f259004faaf48ba4bc6bb9
testResolutionFailureWhenArtifactNotPresentInRemoteRepository
public void testResolutionFailureWhenArtifactNotPresentInRemoteRepository() throws Exception
{    Artifact k = createArtifact("k", "1.0");    try {        artifactResolver.resolve(k, remoteRepositories(), localRepository());        fail("Resolution succeeded when it should have failed");    } catch (ArtifactNotFoundException expected) {        assertTrue(true);    }}
1e70be8a5de05263023e4b3a7464c843d073fd4ae9550794df5762144c9cc3c3
testResolutionOfAnArtifactWhereOneRemoteRepositoryIsBadButOneIsGood
public void testResolutionOfAnArtifactWhereOneRemoteRepositoryIsBadButOneIsGood() throws Exception
{    Artifact l = createRemoteArtifact("l", "1.0-SNAPSHOT");    deleteLocalArtifact(l);    List<ArtifactRepository> repositories = new ArrayList<>();    repositories.add(remoteRepository());    repositories.add(badRemoteRepository());    artifactResolver.resolve(l, repositories, localRepository());    assertLocalArtifactPresent(l);}
f76d892e994243b390657e83f57dd9e9fc1226ab720ce827f6256d3247918044
testTransitiveResolutionOrder
public void testTransitiveResolutionOrder() throws Exception
{    Artifact m = createLocalArtifact("m", "1.0");    Artifact n = createLocalArtifact("n", "1.0");    ArtifactMetadataSource mds = new ArtifactMetadataSource() {        public ResolutionGroup retrieve(Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories) throws ArtifactMetadataRetrievalException {            Set<Artifact> dependencies = new HashSet<>();            return new ResolutionGroup(artifact, dependencies, remoteRepositories);        }        public List<ArtifactVersion> retrieveAvailableVersions(Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories) throws ArtifactMetadataRetrievalException {            throw new UnsupportedOperationException("Cannot get available versions in this test case");        }        public List<ArtifactVersion> retrieveAvailableVersionsFromDeploymentRepository(Artifact artifact, ArtifactRepository localRepository, ArtifactRepository remoteRepository) throws ArtifactMetadataRetrievalException {            throw new UnsupportedOperationException("Cannot get available versions in this test case");        }        public ResolutionGroup retrieve(MetadataResolutionRequest request) throws ArtifactMetadataRetrievalException {            return retrieve(request.getArtifact(), request.getLocalRepository(), request.getRemoteRepositories());        }        public List<ArtifactVersion> retrieveAvailableVersions(MetadataResolutionRequest request) throws ArtifactMetadataRetrievalException {            return retrieveAvailableVersions(request.getArtifact(), request.getLocalRepository(), request.getRemoteRepositories());        }    };    ArtifactResolutionResult result = null;    Set<Artifact> set = new LinkedHashSet<>();    set.add(n);    set.add(m);    result = artifactResolver.resolveTransitively(set, projectArtifact, remoteRepositories(), localRepository(), mds);    printErrors(result);    Iterator<Artifact> i = result.getArtifacts().iterator();    assertEquals("n should be first", n, i.next());    assertEquals("m should be second", m, i.next());        set = new LinkedHashSet<>();    set.add(m);    set.add(n);    result = artifactResolver.resolveTransitively(set, projectArtifact, remoteRepositories(), localRepository(), mds);    printErrors(result);    i = result.getArtifacts().iterator();    assertEquals("m should be first", m, i.next());    assertEquals("n should be second", n, i.next());}
5bba400f6603b67e47f7e66643840fc70b026b0c24e45f5186f68b7b6868d426
retrieve
public ResolutionGroup retrieve(Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories) throws ArtifactMetadataRetrievalException
{    Set<Artifact> dependencies = new HashSet<>();    return new ResolutionGroup(artifact, dependencies, remoteRepositories);}
f045a47c561ceae88e478bc9c655018ee33f1f9c50881fcce688c25b1aa58caf
retrieveAvailableVersions
public List<ArtifactVersion> retrieveAvailableVersions(Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories) throws ArtifactMetadataRetrievalException
{    throw new UnsupportedOperationException("Cannot get available versions in this test case");}
b6fa63f75afb47914a4411b185dbeea8f335152adeb209cbddfecf59de218df6
retrieveAvailableVersionsFromDeploymentRepository
public List<ArtifactVersion> retrieveAvailableVersionsFromDeploymentRepository(Artifact artifact, ArtifactRepository localRepository, ArtifactRepository remoteRepository) throws ArtifactMetadataRetrievalException
{    throw new UnsupportedOperationException("Cannot get available versions in this test case");}
9b8ea57ab997d4826bd7a3e3824dd6e2acc6f5ff7cf8e12bb559485f7a81bae8
retrieve
public ResolutionGroup retrieve(MetadataResolutionRequest request) throws ArtifactMetadataRetrievalException
{    return retrieve(request.getArtifact(), request.getLocalRepository(), request.getRemoteRepositories());}
7f1c1281141386384057b32c578f2d0b7885978914cd039afb29ede35aed8dbe
retrieveAvailableVersions
public List<ArtifactVersion> retrieveAvailableVersions(MetadataResolutionRequest request) throws ArtifactMetadataRetrievalException
{    return retrieveAvailableVersions(request.getArtifact(), request.getLocalRepository(), request.getRemoteRepositories());}
31ba35e4520e7e9c210293760ec47a3fad0ea271ea6581396c941f9e127a43fb
printErrors
private void printErrors(ArtifactResolutionResult result)
{    if (result.hasMissingArtifacts()) {        for (Artifact artifact : result.getMissingArtifacts()) {            System.err.println("Missing: " + artifact);        }    }    if (result.hasExceptions()) {        for (Exception e : result.getExceptions()) {            e.printStackTrace();        }    }}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();    artifactResolver = (DefaultArtifactResolver) lookup(ArtifactResolver.class);    projectArtifact = createLocalArtifact("project", "3.0");}
68bbf6c94fbad4862990669ea582b65c28678087c2377b2c3fb0948d54293af4
tearDown
protected void tearDown() throws Exception
{    artifactFactory = null;    projectArtifact = null;    super.tearDown();}
dd59ae9f9cfea8bf9399289d3fe827bfa692a718c5bf26c281144904defa084d
component
protected String component()
{    return "resolver";}
52cc2433cf98f083f2eaeafbe3d36e5a1d844e0dd711616da7e9f9250379d7c5
testMNG4738
public void testMNG4738() throws Exception
{    Artifact g = createLocalArtifact("g", "1.0");    createLocalArtifact("h", "1.0");    artifactResolver.resolveTransitively(Collections.singleton(g), projectArtifact, remoteRepositories(), localRepository(), null);        ThreadGroup tg = Thread.currentThread().getThreadGroup();    while (tg.getParent() == null) {        tg = tg.getParent();    }    ThreadGroup[] tgList = new ThreadGroup[tg.activeGroupCount()];    tg.enumerate(tgList);    boolean seen = false;    for (ThreadGroup aTgList : tgList) {        if (!aTgList.getName().equals(DaemonThreadCreator.THREADGROUP_NAME)) {            continue;        }        seen = true;        tg = aTgList;        Thread[] ts = new Thread[tg.activeCount()];        tg.enumerate(ts);        for (Thread active : ts) {            String name = active.getName();            boolean daemon = active.isDaemon();            assertTrue(name + " is no daemon Thread.", daemon);        }    }    assertTrue("Could not find ThreadGroup: " + DaemonThreadCreator.THREADGROUP_NAME, seen);}
7c85216d887f9c47c4728e62db616cd46a32baaf6213f4c9e1c918621cffd9e8
testLookup
public void testLookup() throws Exception
{    ArtifactResolver resolver = lookup(ArtifactResolver.class, "default");}
1774827b8cc3db9371f7c842f16b34a8a95c904e77b8303d22fabd6adfd3e1bb
newSubFilter
private ArtifactFilter newSubFilter()
{    return new ArtifactFilter() {        public boolean include(Artifact artifact) {            return false;        }    };}
d3ed17b58984fbee642a483f77d32e868d012e4887f1ca98f7f5abc5b7c7951f
include
public boolean include(Artifact artifact)
{    return false;}
d743635326590d02d09b08382668302390b29ae4396743be077aaaa0d7b5353f
testEquals
public void testEquals()
{    AndArtifactFilter filter1 = new AndArtifactFilter();    AndArtifactFilter filter2 = new AndArtifactFilter(Arrays.asList(newSubFilter()));    assertFalse(filter1.equals(null));    assertTrue(filter1.equals(filter1));    assertEquals(filter1.hashCode(), filter1.hashCode());    assertFalse(filter1.equals(filter2));    assertFalse(filter2.equals(filter1));}
a044e0dfee7f3b517584a0b6d50dd9dc5b07293da8f84e956ea99e0eb1661ef5
testIncludesExcludesArtifactFilter
public void testIncludesExcludesArtifactFilter()
{    List<String> patterns = Arrays.asList("c", "d", "e");    IncludesArtifactFilter f1 = new IncludesArtifactFilter(patterns);    IncludesArtifactFilter f2 = new IncludesArtifactFilter(patterns);    assertTrue(f1.equals(f2));    assertTrue(f2.equals(f1));    assertTrue(f1.hashCode() == f2.hashCode());    IncludesArtifactFilter f3 = new IncludesArtifactFilter(Arrays.asList("d", "c", "e"));    assertTrue(f1.equals(f3));    assertTrue(f1.hashCode() == f3.hashCode());}
1774827b8cc3db9371f7c842f16b34a8a95c904e77b8303d22fabd6adfd3e1bb
newSubFilter
private ArtifactFilter newSubFilter()
{    return new ArtifactFilter() {        public boolean include(Artifact artifact) {            return false;        }    };}
d3ed17b58984fbee642a483f77d32e868d012e4887f1ca98f7f5abc5b7c7951f
include
public boolean include(Artifact artifact)
{    return false;}
d743635326590d02d09b08382668302390b29ae4396743be077aaaa0d7b5353f
testEquals
public void testEquals()
{    OrArtifactFilter filter1 = new OrArtifactFilter();    OrArtifactFilter filter2 = new OrArtifactFilter(Arrays.asList(newSubFilter()));    assertFalse(filter1.equals(null));    assertTrue(filter1.equals(filter1));    assertEquals(filter1.hashCode(), filter1.hashCode());    assertFalse(filter1.equals(filter2));    assertFalse(filter2.equals(filter1));}
03d25f365cc6b3075d481755a316c6cf096fd3ff87e4d9e1c4611dfccc4a747e
newArtifact
private Artifact newArtifact(String scope)
{    return new DefaultArtifact("g", "a", "1.0", scope, "jar", "", null);}
7201e1e166bdca9f2d38915209a2cc877ac3998beadf4a1bc6e0490a074ccbd4
testInclude_Compile
public void testInclude_Compile()
{    ScopeArtifactFilter filter = new ScopeArtifactFilter(Artifact.SCOPE_COMPILE);    assertTrue(filter.include(newArtifact(Artifact.SCOPE_COMPILE)));    assertTrue(filter.include(newArtifact(Artifact.SCOPE_SYSTEM)));    assertTrue(filter.include(newArtifact(Artifact.SCOPE_PROVIDED)));    assertFalse(filter.include(newArtifact(Artifact.SCOPE_RUNTIME)));    assertFalse(filter.include(newArtifact(Artifact.SCOPE_TEST)));}
73394d6d1ee4cea146eb10719645b437ea4192ea5de5a82bf264f64224fedffa
testInclude_CompilePlusRuntime
public void testInclude_CompilePlusRuntime()
{    ScopeArtifactFilter filter = new ScopeArtifactFilter(Artifact.SCOPE_COMPILE_PLUS_RUNTIME);    assertTrue(filter.include(newArtifact(Artifact.SCOPE_COMPILE)));    assertTrue(filter.include(newArtifact(Artifact.SCOPE_SYSTEM)));    assertTrue(filter.include(newArtifact(Artifact.SCOPE_PROVIDED)));    assertTrue(filter.include(newArtifact(Artifact.SCOPE_RUNTIME)));    assertFalse(filter.include(newArtifact(Artifact.SCOPE_TEST)));}
ccb14331e043aea53de101d8774181e67b21121f66ad9965892015e3d23f6356
testInclude_Runtime
public void testInclude_Runtime()
{    ScopeArtifactFilter filter = new ScopeArtifactFilter(Artifact.SCOPE_RUNTIME);    assertTrue(filter.include(newArtifact(Artifact.SCOPE_COMPILE)));    assertFalse(filter.include(newArtifact(Artifact.SCOPE_SYSTEM)));    assertFalse(filter.include(newArtifact(Artifact.SCOPE_PROVIDED)));    assertTrue(filter.include(newArtifact(Artifact.SCOPE_RUNTIME)));    assertFalse(filter.include(newArtifact(Artifact.SCOPE_TEST)));}
bd99b22766ba1eb69064178f6e3f85512cb672f401d04f8eec1e1bbf30fe300d
testInclude_RuntimePlusSystem
public void testInclude_RuntimePlusSystem()
{    ScopeArtifactFilter filter = new ScopeArtifactFilter(Artifact.SCOPE_RUNTIME_PLUS_SYSTEM);    assertTrue(filter.include(newArtifact(Artifact.SCOPE_COMPILE)));    assertTrue(filter.include(newArtifact(Artifact.SCOPE_SYSTEM)));    assertFalse(filter.include(newArtifact(Artifact.SCOPE_PROVIDED)));    assertTrue(filter.include(newArtifact(Artifact.SCOPE_RUNTIME)));    assertFalse(filter.include(newArtifact(Artifact.SCOPE_TEST)));}
f37dc70e7e64d4325ceb729c4bb0ee6ad22ab777c2974fff17d91dd4ee8ebf95
testInclude_Test
public void testInclude_Test()
{    ScopeArtifactFilter filter = new ScopeArtifactFilter(Artifact.SCOPE_TEST);    assertTrue(filter.include(newArtifact(Artifact.SCOPE_COMPILE)));    assertTrue(filter.include(newArtifact(Artifact.SCOPE_SYSTEM)));    assertTrue(filter.include(newArtifact(Artifact.SCOPE_PROVIDED)));    assertTrue(filter.include(newArtifact(Artifact.SCOPE_RUNTIME)));    assertTrue(filter.include(newArtifact(Artifact.SCOPE_TEST)));}
17b84b27e18e40a24890feaf51c6f7b1a466962a851c81d4255e96c151f55990
getTransfer
protected void getTransfer(Resource resource, File destination, InputStream input, boolean closeInput, int maxSize) throws TransferFailedException
{    addTransfer("getTransfer " + resource.getName());    super.getTransfer(resource, destination, input, closeInput, maxSize);}
7aa4b8d8d47c38d8a8c4d34d7749e61a80eb19a2b1dd34c0ceb112719471c93d
get
public void get(String resourceName, File destination) throws TransferFailedException, ResourceDoesNotExistException, AuthorizationException
{    addTransfer("get " + resourceName);    insideGet = true;    super.get(resourceName, destination);    insideGet = false;}
a1159d56c2fd54cb53d481050b767d30e2df5b2200c37bb82850b506f18d7cb9
addTransfer
private void addTransfer(String resourceName)
{    if (testTransferListener != null) {        testTransferListener.addTransfer(resourceName);    }}
699d44304c675cce5edb3e4da183608f1b9c921eb0426e85db15e46bdee230ae
getIfNewer
public boolean getIfNewer(String resourceName, File destination, long timestamp) throws TransferFailedException, ResourceDoesNotExistException, AuthorizationException
{    if (!insideGet) {        addTransfer("getIfNewer " + resourceName);    }    return super.getIfNewer(resourceName, destination, timestamp);}
7ea6d8525e9d5d8cad1680fee671626a1f48c685ca971d20245df41556b50992
addTransferListener
public void addTransferListener(TransferListener listener)
{    if (listener instanceof TestTransferListener) {        testTransferListener = (TestTransferListener) listener;    }    super.addTransferListener(listener);}
5c79dd2270cfe0b990de4f6c630904498783c269f226a3d7f25bfe41d65f8e00
getTransfers
public List<String> getTransfers()
{    return transfers;}
1642cc4d8a88f2541d84f8502898f1efdbdb7013dc611caf5bb8ebbb3d398786
addTransfer
public void addTransfer(String name)
{    transfers.add(name);}
0ed9cd2c3d3be963e21813329e2616d725583a74535debf1e65a16c89d54b657
initializeCleanupMonitoring
private void initializeCleanupMonitoring()
{    callerInfo = new NullPointerException().getStackTrace()[2];    Runnable warning = new Runnable() {        public void run() {            maybeWarnAboutCleanUp();        }    };    cleanupWarning = new Thread(warning);    Runtime.getRuntime().addShutdownHook(cleanupWarning);}
4560d80c2474cc2770be19fbc06c60741920c59992e6b13524f8a5b688ec285a
run
public void run()
{    maybeWarnAboutCleanUp();}
8822114d0f58d0171e74a53c6ff287c727267929f17093e3818a373f69c144c8
maybeWarnAboutCleanUp
private void maybeWarnAboutCleanUp()
{    if (warnAboutCleanup) {        System.out.println("[WARNING] TestFileManager from: " + callerInfo.getClassName() + " not cleaned up!");    }}
5de03b0fad20e8b1df40c4f331c1e79229a559b167f5c02eeb23616ed33eafe2
markForDeletion
public void markForDeletion(File toDelete)
{    filesToDelete.add(toDelete);    warnAboutCleanup = true;}
ccf58a6e7762be96dbfde234a92ef59e0daf495c0b12c95e98fe1b8b27366d53
createTempDir
public synchronized File createTempDir()
{    try {        Thread.sleep(20);    } catch (InterruptedException e) {        }    File dir = new File(TEMP_DIR_PATH, baseFilename + System.currentTimeMillis());    dir.mkdirs();    markForDeletion(dir);    return dir;}
6d77638c830b2c5e60b92a5dd4465cfbb56134ec739c47e77e9856ab36ef6f81
createTempFile
public synchronized File createTempFile() throws IOException
{    File tempFile = File.createTempFile(baseFilename, fileSuffix);    tempFile.deleteOnExit();    markForDeletion(tempFile);    return tempFile;}
3020db5f2fc310433884ca02f23a07556c88e33a1b4442d8fb6f7aaddb75a666
cleanUp
public void cleanUp() throws IOException
{    for (Iterator it = filesToDelete.iterator(); it.hasNext(); ) {        File file = (File) it.next();        if (file.exists()) {            if (file.isDirectory()) {                FileUtils.deleteDirectory(file);            } else {                file.delete();            }        }        it.remove();    }    warnAboutCleanup = false;}
bc2ddc22e5b3c6f6335db01e2790da051536436d95cf714b63558568203d2f36
assertFileExistence
public void assertFileExistence(File dir, String filename, boolean shouldExist)
{    File file = new File(dir, filename);    if (shouldExist) {        Assert.assertTrue(file.exists());    } else {        Assert.assertFalse(file.exists());    }}
088cfc07b57257a18ad1d47aab75581dc681f34e148a4a0db8be60cf7d6abd05
assertFileContents
public void assertFileContents(File dir, String filename, String contentsTest, String encoding) throws IOException
{    assertFileExistence(dir, filename, true);    File file = new File(dir, filename);    String contents = FileUtils.fileRead(file, encoding);    Assert.assertEquals(contentsTest, contents);}
20dc1f7b034960654a7f2798e9686117c16c6a7324463d23d5a6333ce6acb723
createFile
public File createFile(File dir, String filename, String contents, String encoding) throws IOException
{    File file = new File(dir, filename);    file.getParentFile().mkdirs();    FileUtils.fileWrite(file.getPath(), encoding, contents);    markForDeletion(file);    return file;}
f3636fc0278ed9be7812cc30f15c5fd6a09446720825e77dca8444fb92f86b96
getFileContents
public String getFileContents(File file, String encoding) throws IOException
{    return FileUtils.fileRead(file, encoding);}
f02ec37a20530e45e47a678cf238f78284654c7b754ccb2bcaeea803d7b3de1b
finalize
protected void finalize() throws Throwable
{    maybeWarnAboutCleanUp();    super.finalize();}
4b5cfd2b6c6fe6f3e1c8488e296cb46e570c06e9dc59611cb42f15e205e623ae
createFile
public File createFile(String filename, String content, String encoding) throws IOException
{    File dir = createTempDir();    return createFile(dir, filename, content, encoding);}
08c113ded2e25a22472f9bd53bc8e3e5294f6eb7d88ffea1b04dceba7ac2a323
testTransformationManager
public void testTransformationManager() throws Exception
{    ArtifactTransformationManager tm = lookup(ArtifactTransformationManager.class);    List tms = tm.getArtifactTransformations();    assertEquals(3, tms.size());    assertTrue("We expected the release transformation and got " + tms.get(0), tms.get(0) instanceof ReleaseArtifactTransformation);    assertTrue("We expected the latest transformation and got " + tms.get(1), tms.get(1) instanceof LatestArtifactTransformation);    assertTrue("We expected the snapshot transformation and got " + tms.get(2), tms.get(2) instanceof SnapshotTransformation);}
bf955697a9ffb8b837ee86d833edd6b7464d617aea48732c8b9ad2974cfc5fa5
customizeContainerConfiguration
protected void customizeContainerConfiguration(ContainerConfiguration configuration)
{    super.customizeContainerConfiguration(configuration);    configuration.setAutoWiring(true);    configuration.setClassPathScanning(PlexusConstants.SCANNING_ON);}
848d74b3032e7e7cce325be31e5bc16fb5e106b5e7f65168b2d2abf91da8af83
testShouldActivateDefaultProfile
public void testShouldActivateDefaultProfile() throws Exception
{    Profile notActivated = new Profile();    notActivated.setId("notActivated");    Activation nonActivation = new Activation();    nonActivation.setJdk("19.2");    notActivated.setActivation(nonActivation);    Profile defaultActivated = new Profile();    defaultActivated.setId("defaultActivated");    Activation defaultActivation = new Activation();    defaultActivation.setActiveByDefault(true);    defaultActivated.setActivation(defaultActivation);    Properties props = System.getProperties();    ProfileManager profileManager = new DefaultProfileManager(getContainer(), props);    profileManager.addProfile(notActivated);    profileManager.addProfile(defaultActivated);    List active = profileManager.getActiveProfiles();    assertNotNull(active);    assertEquals(1, active.size());    assertEquals("defaultActivated", ((Profile) active.get(0)).getId());}
235a4b60862c3fb9f36931607c99367b9995a608138e1d7a859d919e0bb64b72
testShouldNotActivateDefaultProfile
public void testShouldNotActivateDefaultProfile() throws Exception
{    Profile syspropActivated = new Profile();    syspropActivated.setId("syspropActivated");    Activation syspropActivation = new Activation();    ActivationProperty syspropProperty = new ActivationProperty();    syspropProperty.setName("java.version");    syspropActivation.setProperty(syspropProperty);    syspropActivated.setActivation(syspropActivation);    Profile defaultActivated = new Profile();    defaultActivated.setId("defaultActivated");    Activation defaultActivation = new Activation();    defaultActivation.setActiveByDefault(true);    defaultActivated.setActivation(defaultActivation);    Properties props = System.getProperties();    ProfileManager profileManager = new DefaultProfileManager(getContainer(), props);    profileManager.addProfile(syspropActivated);    profileManager.addProfile(defaultActivated);    List active = profileManager.getActiveProfiles();    assertNotNull(active);    assertEquals(1, active.size());    assertEquals("syspropActivated", ((Profile) active.get(0)).getId());}
a7bd466777237066d2b76e2bdf8af950cf22cacd3a7373cfaae55c3b1f210cda
testShouldNotActivateReversalOfPresentSystemProperty
public void testShouldNotActivateReversalOfPresentSystemProperty() throws Exception
{    Profile syspropActivated = new Profile();    syspropActivated.setId("syspropActivated");    Activation syspropActivation = new Activation();    ActivationProperty syspropProperty = new ActivationProperty();    syspropProperty.setName("!java.version");    syspropActivation.setProperty(syspropProperty);    syspropActivated.setActivation(syspropActivation);    Properties props = System.getProperties();    ProfileManager profileManager = new DefaultProfileManager(getContainer(), props);    profileManager.addProfile(syspropActivated);    List active = profileManager.getActiveProfiles();    assertNotNull(active);    assertEquals(0, active.size());}
c1728dcb9bc30538bc7e2bc7f1905b99097035ee890c010c33d30a2c09f3a984
testShouldOverrideAndActivateInactiveProfile
public void testShouldOverrideAndActivateInactiveProfile() throws Exception
{    Profile syspropActivated = new Profile();    syspropActivated.setId("syspropActivated");    Activation syspropActivation = new Activation();    ActivationProperty syspropProperty = new ActivationProperty();    syspropProperty.setName("!java.version");    syspropActivation.setProperty(syspropProperty);    syspropActivated.setActivation(syspropActivation);    Properties props = System.getProperties();    ProfileManager profileManager = new DefaultProfileManager(getContainer(), props);    profileManager.addProfile(syspropActivated);    profileManager.explicitlyActivate("syspropActivated");    List active = profileManager.getActiveProfiles();    assertNotNull(active);    assertEquals(1, active.size());    assertEquals("syspropActivated", ((Profile) active.get(0)).getId());}
b52f003ebe266615e9402124f49648ff3afc335ae0e5d8daccba2977e4bb3b2f
testShouldOverrideAndDeactivateActiveProfile
public void testShouldOverrideAndDeactivateActiveProfile() throws Exception
{    Profile syspropActivated = new Profile();    syspropActivated.setId("syspropActivated");    Activation syspropActivation = new Activation();    ActivationProperty syspropProperty = new ActivationProperty();    syspropProperty.setName("java.version");    syspropActivation.setProperty(syspropProperty);    syspropActivated.setActivation(syspropActivation);    Properties props = System.getProperties();    ProfileManager profileManager = new DefaultProfileManager(getContainer(), props);    profileManager.addProfile(syspropActivated);    profileManager.explicitlyDeactivate("syspropActivated");    List active = profileManager.getActiveProfiles();    assertNotNull(active);    assertEquals(0, active.size());}
d57c1d7022b9b24e5d6471b55681e866b61cc2646c5e5e41baf69039be0b670b
customizeContainerConfiguration
protected void customizeContainerConfiguration(ContainerConfiguration containerConfiguration)
{    super.customizeContainerConfiguration(containerConfiguration);    containerConfiguration.setAutoWiring(true);    containerConfiguration.setClassPathScanning(PlexusConstants.SCANNING_INDEX);}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();    if (getContainer().hasComponent(ProjectBuilder.class, "test")) {        projectBuilder = lookup(ProjectBuilder.class, "test");    } else {                projectBuilder = lookup(ProjectBuilder.class);    }    repositorySystem = lookup(RepositorySystem.class);}
68bbf6c94fbad4862990669ea582b65c28678087c2377b2c3fb0948d54293af4
tearDown
protected void tearDown() throws Exception
{    projectBuilder = null;    super.tearDown();}
42738fe5921db096082d8f2f58e0599c3ac27ac5813ffab44c103a91b1eb7131
getProjectBuilder
protected ProjectBuilder getProjectBuilder()
{    return projectBuilder;}
d848f01b637485f262196c6134c856a9a3ceb73a94b5a500fd5c65cf5a6a324e
getCustomConfigurationName
protected String getCustomConfigurationName()
{    String name = AbstractMavenProjectTestCase.class.getName().replace('.', '/') + ".xml";    System.out.println(name);    return name;}
ba74258e5a9a17ebe507817ae5e051c85d251bf25abd865e684fcda57fce41ec
getLocalRepositoryPath
protected File getLocalRepositoryPath() throws FileNotFoundException, URISyntaxException
{    File markerFile = getFileForClasspathResource("local-repo/marker.txt");    return markerFile.getAbsoluteFile().getParentFile();}
8e90e3bfea2732e87fba27194b9f55726b26726929f12cea55d555b2013f7e05
getFileForClasspathResource
protected static File getFileForClasspathResource(String resource) throws FileNotFoundException
{    ClassLoader cloader = Thread.currentThread().getContextClassLoader();    URL resourceUrl = cloader.getResource(resource);    if (resourceUrl == null) {        throw new FileNotFoundException("Unable to find: " + resource);    }    return new File(URI.create(resourceUrl.toString().replaceAll(" ", "%20")));}
e10004dfd50d8c85bc2f5b897ee0eb46ee7fb7375f9c18f1bd006d5779afe14a
getLocalRepository
protected ArtifactRepository getLocalRepository() throws Exception
{    ArtifactRepositoryLayout repoLayout = lookup(ArtifactRepositoryLayout.class, "legacy");    ArtifactRepository r = repositorySystem.createArtifactRepository("local", "file://" + getLocalRepositoryPath().getAbsolutePath(), repoLayout, null, null);    return r;}
1b483f2f5e32cddf634b837929d2b6a59aede09bc7fb84230a6512cc555a649a
getProjectWithDependencies
protected MavenProject getProjectWithDependencies(File pom) throws Exception
{    ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();    configuration.setLocalRepository(getLocalRepository());    configuration.setRemoteRepositories(Arrays.asList(new ArtifactRepository[] {}));    configuration.setProcessPlugins(false);    configuration.setResolveDependencies(true);    initRepoSession(configuration);    try {        return projectBuilder.build(pom, configuration).getProject();    } catch (Exception e) {        Throwable cause = e.getCause();        if (cause instanceof ModelBuildingException) {            String message = "In: " + pom + "\n\n";            for (ModelProblem problem : ((ModelBuildingException) cause).getProblems()) {                message += problem + "\n";            }            System.out.println(message);            fail(message);        }        throw e;    }}
b60dbc9c08e449ecf03b65ff78f221a05aac580e7e07b33c5e1aeab6161779fa
getProject
protected MavenProject getProject(File pom) throws Exception
{    ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();    configuration.setLocalRepository(getLocalRepository());    initRepoSession(configuration);    return projectBuilder.build(pom, configuration).getProject();}
7c1cde935afbb37967a505b07ad86a2204198083e0afa5b20064a1b1db85e4ed
initRepoSession
protected void initRepoSession(ProjectBuildingRequest request)
{    File localRepo = new File(request.getLocalRepository().getBasedir());    DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();    session.setLocalRepositoryManager(new LegacyLocalRepositoryManager(localRepo));    request.setRepositorySession(session);}
2fb4f270516651564451d3e9a08e5b97cc0a4e40874185e14e5ee975c17a9e08
resolveArtifacts
public List<ArtifactResult> resolveArtifacts(RepositorySystemSession session, Collection<? extends ArtifactRequest> requests) throws ArtifactResolutionException
{    List<ArtifactResult> results = new ArrayList<>();    for (ArtifactRequest request : requests) {        ArtifactResult result = new ArtifactResult(request);        results.add(result);        Artifact artifact = request.getArtifact();        if ("maven-test".equals(artifact.getGroupId())) {            String scope = artifact.getArtifactId().substring("scope-".length());            try {                artifact = artifact.setFile(ProjectClasspathTest.getFileForClasspathResource(ProjectClasspathTest.dir + "transitive-" + scope + "-dep.xml"));                result.setArtifact(artifact);            } catch (FileNotFoundException e) {                throw new IllegalStateException("Missing test POM for " + artifact);            }        } else {            result.addException(new ArtifactNotFoundException(artifact, null));            throw new ArtifactResolutionException(results);        }    }    return results;}
d1abd6c4d4a85398f81289fbec306a5971619b256f5c8be658d89c39352d87f8
resolveArtifact
public ArtifactResult resolveArtifact(RepositorySystemSession session, ArtifactRequest request) throws ArtifactResolutionException
{    return resolveArtifacts(session, Collections.singleton(request)).get(0);}
6de51e1d5ff2377d3bee1256612e90a6a0d4b870e02c0519b9d1a1bbbea25fcb
calculateExecutionPlan
public MavenExecutionPlan calculateExecutionPlan(MavenSession session, String... tasks)
{    return new MavenExecutionPlan(null, new DefaultLifecycles());}
d6fec3a202a41051a2eba883112797c086ed1f0e03f8cbbb783efb10f8a63a5b
calculateExecutionPlan
public MavenExecutionPlan calculateExecutionPlan(MavenSession session, boolean setup, String... tasks)
{    return new MavenExecutionPlan(null, new DefaultLifecycles());}
67a6621c76d8c6bf6535ac8e9711527e7b493a85bf0ba75fb5bbbe482fe8d8e7
execute
public void execute(MavenSession session)
{}
afe8893888899b4a1f5ffc4906aebf4423c24f4d95f5e841bac29e33af7cd44d
getPluginsBoundByDefaultToAllLifecycles
public Set<Plugin> getPluginsBoundByDefaultToAllLifecycles(String packaging)
{    Set<Plugin> plugins;        if ("JAR".equals(packaging)) {        plugins = new LinkedHashSet<>();        plugins.add(newPlugin("maven-compiler-plugin", "compile", "testCompile"));        plugins.add(newPlugin("maven-resources-plugin", "resources", "testResources"));        plugins.add(newPlugin("maven-surefire-plugin", "test"));        plugins.add(newPlugin("maven-jar-plugin", "jar"));        plugins.add(newPlugin("maven-install-plugin", "install"));        plugins.add(newPlugin("maven-deploy-plugin", "deploy"));    } else {        plugins = Collections.emptySet();    }    return plugins;}
356be6482821e77782dbf2ac6a8e53e29604e3006ee24e251a61e242114c6cc8
newPlugin
private Plugin newPlugin(String artifactId, String... goals)
{    Plugin plugin = new Plugin();    plugin.setGroupId("org.apache.maven.plugins");    plugin.setArtifactId(artifactId);    for (String goal : goals) {        PluginExecution pluginExecution = new PluginExecution();        pluginExecution.setId("default-" + goal);        pluginExecution.addGoal(goal);        plugin.addExecution(pluginExecution);    }    return plugin;}
0d1ccd22fa0501be812173d01061bf92313aff3ee977cec098037000191c5120
calculateForkedExecutions
public void calculateForkedExecutions(MojoExecution mojoExecution, MavenSession session)
{}
b2694b7452eb01840dfcde3cc44ee78b510c50584473deb2cb17f27256eebe0d
executeForkedExecutions
public List<MavenProject> executeForkedExecutions(MojoExecution mojoExecution, MavenSession session)
{    return Collections.emptyList();}
afe8893888899b4a1f5ffc4906aebf4423c24f4d95f5e841bac29e33af7cd44d
getPluginsBoundByDefaultToAllLifecycles
public Set<Plugin> getPluginsBoundByDefaultToAllLifecycles(String packaging)
{    Set<Plugin> plugins;        if ("JAR".equals(packaging)) {        plugins = new LinkedHashSet<>();        plugins.add(newPlugin("maven-compiler-plugin", "compile", "testCompile"));        plugins.add(newPlugin("maven-resources-plugin", "resources", "testResources"));        plugins.add(newPlugin("maven-surefire-plugin", "test"));        plugins.add(newPlugin("maven-jar-plugin", "jar"));        plugins.add(newPlugin("maven-install-plugin", "install"));        plugins.add(newPlugin("maven-deploy-plugin", "deploy"));    } else {        plugins = Collections.emptySet();    }    return plugins;}
356be6482821e77782dbf2ac6a8e53e29604e3006ee24e251a61e242114c6cc8
newPlugin
private Plugin newPlugin(String artifactId, String... goals)
{    Plugin plugin = new Plugin();    plugin.setGroupId("org.apache.maven.plugins");    plugin.setArtifactId(artifactId);    for (String goal : goals) {        PluginExecution pluginExecution = new PluginExecution();        pluginExecution.setId("default-" + goal);        pluginExecution.addGoal(goal);        plugin.addExecution(pluginExecution);    }    return plugin;}
cd8e4e4c980455676880b161d895c1707d794f2f46d06cd97dcc213eb91446f2
getTestSeries
protected String getTestSeries()
{    String className = getClass().getPackage().getName();    return className.substring(className.lastIndexOf('.') + 1);}
29b6649dbc06f50f9dbb98fb53b69779fb5437189b21fde9febe2330f0ef4023
projectFile
protected File projectFile(String name)
{    return projectFile("maven", name);}
7d3693a94477a745cac1293e87100635fa10f79236095c1d512059dbc7716d1f
projectFile
protected File projectFile(String groupId, String artifactId)
{    return new File(getLocalRepositoryPath(), "/" + groupId + "/poms/" + artifactId + "-1.0.pom");}
e5111c23e0dd028e673c2ed1a02cc07a0502a1c9f78563ed3cfa1474972dea7d
getLocalRepositoryPath
protected File getLocalRepositoryPath()
{    return getTestFile("src/test/resources/inheritance-repo/" + getTestSeries());}
1be986a9d5b8e13eb27e61f4e4bae24c7c194acc341fc5087fc9953a34933c32
testProjectInheritance
public void testProjectInheritance() throws Exception
{    MavenProject p4 = getProject(projectFile("p4"));    assertEquals("p4", p4.getName());                assertEquals("2000", p4.getInceptionYear());                assertEquals("mailing-list", p4.getMailingLists().get(0).getName());                assertEquals("scm-url/p2/p3/p4", p4.getScm().getUrl());                assertEquals("Codehaus", p4.getOrganization().getName());                assertEquals("4.0.0", p4.getModelVersion());    assertEquals("4.0.0", p4.getModelVersion());}
1be986a9d5b8e13eb27e61f4e4bae24c7c194acc341fc5087fc9953a34933c32
testProjectInheritance
public void testProjectInheritance() throws Exception
{                MavenProject p0 = getProject(projectFile("maven.t01", "p0"));    assertEquals("p0-org", p0.getOrganization().getName());                MavenProject p1 = getProject(projectFile("maven.t01", "p1"));    assertEquals("p1-org", p1.getOrganization().getName());                MavenProject p2 = getProject(projectFile("maven.t01", "p2"));    assertEquals("p2-org", p2.getOrganization().getName());                MavenProject p3 = getProject(projectFile("maven.t01", "p3"));    assertEquals("p3-org", p3.getOrganization().getName());                MavenProject p4 = getProject(projectFile("maven.t01", "p4"));    assertEquals("p4-org", p4.getOrganization().getName());}
1be986a9d5b8e13eb27e61f4e4bae24c7c194acc341fc5087fc9953a34933c32
testProjectInheritance
public void testProjectInheritance() throws Exception
{    File localRepo = getLocalRepositoryPath();    System.out.println("Local repository is at: " + localRepo.getAbsolutePath());    File pom0 = new File(localRepo, "p0/pom.xml");    File pom1 = new File(pom0.getParentFile(), "p1/pom.xml");    File pom2 = new File(pom1.getParentFile(), "p2/pom.xml");    File pom3 = new File(pom2.getParentFile(), "p3/pom.xml");    File pom4 = new File(pom3.getParentFile(), "p4/pom.xml");    File pom5 = new File(pom4.getParentFile(), "p5/pom.xml");    System.out.println("Location of project-4's POM: " + pom4.getPath());        MavenProject project0 = getProject(pom0);    MavenProject project1 = getProject(pom1);    MavenProject project2 = getProject(pom2);    MavenProject project3 = getProject(pom3);    MavenProject project4 = getProject(pom4);    MavenProject project5 = getProject(pom5);    assertEquals("p4", project4.getName());                assertEquals("2000", project4.getInceptionYear());                assertEquals("mailing-list", project4.getMailingLists().get(0).getName());                assertEquals("scm-url/p2/p3/p4", project4.getScm().getUrl());                assertEquals("Codehaus", project4.getOrganization().getName());                assertEquals("4.0.0", project4.getModelVersion());    Build build = project4.getBuild();    List<Plugin> plugins = build.getPlugins();    Map<String, Integer> validPluginCounts = new HashMap<>();    String testPluginArtifactId = "maven-compiler-plugin";        validPluginCounts.put(testPluginArtifactId, 0);        validPluginCounts.put("maven-deploy-plugin", 0);    validPluginCounts.put("maven-javadoc-plugin", 0);    validPluginCounts.put("maven-source-plugin", 0);    Plugin testPlugin = null;    for (Plugin plugin : plugins) {        String pluginArtifactId = plugin.getArtifactId();        if (!validPluginCounts.containsKey(pluginArtifactId)) {            fail("Illegal plugin found: " + pluginArtifactId);        } else {            if (pluginArtifactId.equals(testPluginArtifactId)) {                testPlugin = plugin;            }            Integer count = validPluginCounts.get(pluginArtifactId);            if (count > 0) {                fail("Multiple copies of plugin: " + pluginArtifactId + " found in POM.");            } else {                count = count + 1;                validPluginCounts.put(pluginArtifactId, count);            }        }    }    List executions = testPlugin.getExecutions();    assertEquals(1, executions.size());}
1be986a9d5b8e13eb27e61f4e4bae24c7c194acc341fc5087fc9953a34933c32
testProjectInheritance
public void testProjectInheritance() throws Exception
{    File localRepo = getLocalRepositoryPath();    File pom0 = new File(localRepo, "p0/pom.xml");    File pom0Basedir = pom0.getParentFile();    File pom1 = new File(pom0Basedir, "p1/pom.xml");        MavenProject project0 = getProject(pom0);    MavenProject project1 = getProject(pom1);    assertEquals(pom0Basedir, project1.getParent().getBasedir());}
9e71b9998fc5d1f0aa1b97ab21178a64fd3bd6186790e2cd84fbb82961f4bc64
testDependencyManagementOverridesTransitiveDependencyVersion
public void testDependencyManagementOverridesTransitiveDependencyVersion() throws Exception
{    File localRepo = getLocalRepositoryPath();    File pom0 = new File(localRepo, "p0/pom.xml");    File pom0Basedir = pom0.getParentFile();    File pom1 = new File(pom0Basedir, "p1/pom.xml");        MavenProject project0 = getProjectWithDependencies(pom0);    MavenProject project1 = getProjectWithDependencies(pom1);    assertEquals(pom0Basedir, project1.getParent().getBasedir());    Set set = project1.getArtifacts();    assertNotNull("No artifacts", set);    assertTrue("No Artifacts", set.size() > 0);    assertTrue("Set size should be 3, is " + set.size(), set.size() == 3);    for (Object aSet : set) {        Artifact artifact = (Artifact) aSet;        System.out.println("Artifact: " + artifact.getDependencyConflictId() + " " + artifact.getVersion() + " Optional=" + (artifact.isOptional() ? "true" : "false"));        assertTrue("Incorrect version for " + artifact.getDependencyConflictId(), artifact.getVersion().equals("1.0"));    }}
0300a6cafca797719ba0e7f82cfc7ffd878db9a52658ee1504995a73274bec5f
testDependencyManagement
public void testDependencyManagement() throws Exception
{    File localRepo = getLocalRepositoryPath();    File pom0 = new File(localRepo, "p0/pom.xml");    File pom0Basedir = pom0.getParentFile();    File pom1 = new File(pom0Basedir, "p1/pom.xml");        MavenProject project0 = getProjectWithDependencies(pom0);    MavenProject project1 = getProjectWithDependencies(pom1);    assertEquals(pom0Basedir, project1.getParent().getBasedir());    Set set = project1.getArtifacts();    assertNotNull("No artifacts", set);    assertTrue("No Artifacts", set.size() > 0);    for (Object aSet : set) {        Artifact artifact = (Artifact) aSet;        System.out.println("Artifact: " + artifact.getDependencyConflictId() + " " + artifact.getVersion() + " Scope: " + artifact.getScope());        assertTrue("Incorrect version for " + artifact.getDependencyConflictId(), artifact.getVersion().equals("1.0"));    }}
0300a6cafca797719ba0e7f82cfc7ffd878db9a52658ee1504995a73274bec5f
testDependencyManagement
public void testDependencyManagement() throws Exception
{    File localRepo = getLocalRepositoryPath();    File pom0 = new File(localRepo, "p0/pom.xml");    File pom0Basedir = pom0.getParentFile();    File pom1 = new File(pom0Basedir, "p1/pom.xml");        MavenProject project0 = getProjectWithDependencies(pom0);    MavenProject project1 = getProjectWithDependencies(pom1);    assertEquals(pom0Basedir, project1.getParent().getBasedir());    Set set = project1.getArtifacts();    assertNotNull("No artifacts", set);    assertTrue("No Artifacts", set.size() > 0);    Iterator iter = set.iterator();    assertTrue("Set size should be 4, is " + set.size(), set.size() == 4);    while (iter.hasNext()) {        Artifact artifact = (Artifact) iter.next();        System.out.println("Artifact: " + artifact.getDependencyConflictId() + " " + artifact.getVersion() + " Optional=" + (artifact.isOptional() ? "true" : "false"));        assertTrue("Incorrect version for " + artifact.getDependencyConflictId(), artifact.getVersion().equals("1.0"));    }}
0300a6cafca797719ba0e7f82cfc7ffd878db9a52658ee1504995a73274bec5f
testDependencyManagement
public void testDependencyManagement() throws Exception
{    File localRepo = getLocalRepositoryPath();    File pom0 = new File(localRepo, "p0/pom.xml");    File pom0Basedir = pom0.getParentFile();    File pom1 = new File(pom0Basedir, "p1/pom.xml");        MavenProject project1 = getProjectWithDependencies(pom1);    assertEquals(pom0Basedir, project1.getParent().getBasedir());    System.out.println("Project " + project1.getId() + " " + project1);    Set set = project1.getArtifacts();    assertNotNull("No artifacts", set);    assertTrue("No Artifacts", set.size() > 0);    assertTrue("Set size should be 3, is " + set.size(), set.size() == 3);    for (Object aSet : set) {        Artifact artifact = (Artifact) aSet;        assertFalse("", artifact.getArtifactId().equals("t07-d"));        System.out.println("Artifact: " + artifact.getDependencyConflictId() + " " + artifact.getVersion() + " Optional=" + (artifact.isOptional() ? "true" : "false"));        assertTrue("Incorrect version for " + artifact.getDependencyConflictId(), artifact.getVersion().equals("1.0"));    }}
0300a6cafca797719ba0e7f82cfc7ffd878db9a52658ee1504995a73274bec5f
testDependencyManagement
public void testDependencyManagement() throws Exception
{    File localRepo = getLocalRepositoryPath();    File pom0 = new File(localRepo, "p0/pom.xml");    File pom0Basedir = pom0.getParentFile();    File pom1 = new File(pom0Basedir, "p1/pom.xml");        MavenProject project0 = getProjectWithDependencies(pom0);    MavenProject project1 = getProjectWithDependencies(pom1);    assertEquals(pom0Basedir, project1.getParent().getBasedir());    System.out.println("Project " + project1.getId() + " " + project1);    Set set = project1.getArtifacts();    assertNotNull("No artifacts", set);    assertTrue("No Artifacts", set.size() > 0);    Iterator iter = set.iterator();    assertTrue("Set size should be 4, is " + set.size(), set.size() == 4);    while (iter.hasNext()) {        Artifact artifact = (Artifact) iter.next();        System.out.println("Artifact: " + artifact.getDependencyConflictId() + " " + artifact.getVersion() + " Optional=" + (artifact.isOptional() ? "true" : "false"));        assertTrue("Incorrect version for " + artifact.getDependencyConflictId(), artifact.getVersion().equals("1.0"));    }}
dfb5549198c83cfdc4de70f6cba1b2c84893d651e2f5b729f6a1efb5f5ecd837
testDependencyManagementExclusionsExcludeTransitively
public void testDependencyManagementExclusionsExcludeTransitively() throws Exception
{    File localRepo = getLocalRepositoryPath();    File pom0 = new File(localRepo, "p0/pom.xml");    File pom0Basedir = pom0.getParentFile();    File pom1 = new File(pom0Basedir, "p1/pom.xml");        MavenProject project0 = getProjectWithDependencies(pom0);    MavenProject project1 = getProjectWithDependencies(pom1);    assertNotNull("Parent is null", project1.getParent());    assertEquals(pom0Basedir, project1.getParent().getBasedir());    Map map = project1.getArtifactMap();    assertNotNull("No artifacts", map);    assertTrue("No Artifacts", map.size() > 0);    assertTrue("Set size should be 2, is " + map.size(), map.size() == 2);    assertTrue("maven-test:t09-a is not in the project", map.containsKey("maven-test:t09-a"));    assertTrue("maven-test:t09-b is not in the project", map.containsKey("maven-test:t09-b"));    assertFalse("maven-test:t09-c is in the project", map.containsKey("maven-test:t09-c"));}
c4bf3254e4271b755d97fdd08b39eebc8f7c93cbbd07fba3559702484c5a14b8
testDependencyManagementExclusionDoesNotOverrideGloballyForTransitives
public void testDependencyManagementExclusionDoesNotOverrideGloballyForTransitives() throws Exception
{    File localRepo = getLocalRepositoryPath();    File pom0 = new File(localRepo, "p0/pom.xml");    File pom0Basedir = pom0.getParentFile();    File pom2 = new File(pom0Basedir, "p2/pom.xml");        MavenProject project0 = getProjectWithDependencies(pom0);    MavenProject project2 = getProjectWithDependencies(pom2);    assertEquals(pom0Basedir, project2.getParent().getBasedir());    Map map = project2.getArtifactMap();    assertNotNull("No artifacts", map);    assertTrue("No Artifacts", map.size() > 0);    assertTrue("Set size should be 4, is " + map.size(), map.size() == 4);    assertTrue("maven-test:t09-a is not in the project", map.containsKey("maven-test:t09-a"));    assertTrue("maven-test:t09-b is not in the project", map.containsKey("maven-test:t09-b"));    assertTrue("maven-test:t09-c is not in the project", map.containsKey("maven-test:t09-c"));    assertTrue("maven-test:t09-d is not in the project", map.containsKey("maven-test:t09-d"));}
9e71b9998fc5d1f0aa1b97ab21178a64fd3bd6186790e2cd84fbb82961f4bc64
testDependencyManagementOverridesTransitiveDependencyVersion
public void testDependencyManagementOverridesTransitiveDependencyVersion() throws Exception
{    File localRepo = getLocalRepositoryPath();    File pom0 = new File(localRepo, "p0/pom.xml");    File pom0Basedir = pom0.getParentFile();    File pom1 = new File(pom0Basedir, "p1/pom.xml");        MavenProject project0 = getProjectWithDependencies(pom0);    MavenProject project1 = getProjectWithDependencies(pom1);    assertEquals(pom0Basedir, project1.getParent().getBasedir());    System.out.println("Project " + project1.getId() + " " + project1);    Map map = project1.getArtifactMap();    assertNotNull("No artifacts", map);    assertTrue("No Artifacts", map.size() > 0);    assertTrue("Set size should be 3, is " + map.size(), map.size() == 3);    Artifact a = (Artifact) map.get("maven-test:t10-a");    Artifact b = (Artifact) map.get("maven-test:t10-b");    Artifact c = (Artifact) map.get("maven-test:t10-c");    assertNotNull(a);    assertNotNull(b);    assertNotNull(c);        System.out.println(a.getScope());    assertTrue("Incorrect scope for " + a.getDependencyConflictId(), a.getScope().equals("test"));        assertTrue("Incorrect scope for " + b.getDependencyConflictId(), b.getScope().equals("runtime"));        assertTrue("Incorrect scope for " + c.getDependencyConflictId(), c.getScope().equals("runtime"));}
4024d6d06c56e9df3ce05b308d385736eb6f761ee7e152fab83202f6eb23777e
testDependencyManagementDoesNotOverrideScopeOfCurrentArtifact
public void testDependencyManagementDoesNotOverrideScopeOfCurrentArtifact() throws Exception
{    File localRepo = getLocalRepositoryPath();    File pom0 = new File(localRepo, "p0/pom.xml");    File pom0Basedir = pom0.getParentFile();    File pom1 = new File(pom0Basedir, "p1/pom.xml");        MavenProject project0 = getProjectWithDependencies(pom0);    MavenProject project1 = getProjectWithDependencies(pom1);    assertEquals(pom0Basedir, project1.getParent().getBasedir());    assertNull("dependencyManagement has overwritten the scope of the currently building child project", project1.getArtifact().getScope());}
6816b6e1036c21405915d8330bfde936a36770527d4af9deabf7e87271441d39
testFalsePluginExecutionInheritValue
public void testFalsePluginExecutionInheritValue() throws Exception
{    File localRepo = getLocalRepositoryPath();    File pom0 = new File(localRepo, "p0/pom.xml");    File pom0Basedir = pom0.getParentFile();    File pom1 = new File(pom0Basedir, "p1/pom.xml");    getProjectWithDependencies(pom0);    MavenProject project1 = getProjectWithDependencies(pom1);    Map pluginMap = project1.getBuild().getPluginsAsMap();    Plugin compilerPlugin = (Plugin) pluginMap.get("org.apache.maven.plugins:maven-compiler-plugin");    assertNotNull(compilerPlugin);    Map executionMap = compilerPlugin.getExecutionsAsMap();    assertNull("Plugin execution: \'test\' should NOT exist in the compiler plugin specification for the child project!", executionMap.get("test"));}
84ea217aa591db4de916acf3e443f69b2a6fdccd33c403d28b7e9f832962315e
testScmInfoCalculatedCorrectlyOnParentAndChildRead
public void testScmInfoCalculatedCorrectlyOnParentAndChildRead() throws Exception
{    File localRepo = getLocalRepositoryPath();    File pom0 = new File(localRepo, "p0/pom.xml");    File pom0Basedir = pom0.getParentFile();    File pom1 = new File(pom0Basedir, "modules/p1/pom.xml");        MavenProject project0 = getProject(pom0);    MavenProject project1 = getProject(pom1);    System.out.println("\n\n");    System.out.println("Parent SCM URL is: " + project0.getScm().getUrl());    System.out.println("Child SCM URL is: " + project1.getScm().getUrl());    System.out.println();    System.out.println("Parent SCM connection is: " + project0.getScm().getConnection());    System.out.println("Child SCM connection is: " + project1.getScm().getConnection());    System.out.println();    System.out.println("Parent SCM developer connection is: " + project0.getScm().getDeveloperConnection());    System.out.println("Child SCM developer connection is: " + project1.getScm().getDeveloperConnection());    assertEquals(project1.getScm().getUrl(), project0.getScm().getUrl() + "/modules/p1");    assertEquals(project1.getScm().getConnection(), project0.getScm().getConnection() + "/modules/p1");    assertEquals(project1.getScm().getDeveloperConnection(), project0.getScm().getDeveloperConnection() + "/modules/p1");}
36cef9299d1acc3404865b12370eba9225be38508030690340d6810e776bdeac
testScmInfoCalculatedCorrectlyOnChildOnlyRead
public void testScmInfoCalculatedCorrectlyOnChildOnlyRead() throws Exception
{    File localRepo = getLocalRepositoryPath();    File pom1 = new File(localRepo, "p0/modules/p1/pom.xml");        MavenProject project1 = getProject(pom1);    System.out.println("\n\n");    System.out.println("Child SCM URL is: " + project1.getScm().getUrl());    System.out.println("Child SCM connection is: " + project1.getScm().getConnection());    System.out.println("Child SCM developer connection is: " + project1.getScm().getDeveloperConnection());    assertEquals("http://host/viewer?path=/p0/modules/p1", project1.getScm().getUrl());    assertEquals("scm:svn:http://host/p0/modules/p1", project1.getScm().getConnection());    assertEquals("scm:svn:https://host/p0/modules/p1", project1.getScm().getDeveloperConnection());}
89f1638f505b8271e8dd106a568ddd52a6fa936a9a443c7edf329af2cdf4ccc9
getRepository
public LocalRepository getRepository()
{    return repository;}
d4e5521b42b67adbcdbde521459c0bf3fa079aa6fb1e41d54e154da4944e61a2
getPathForLocalArtifact
public String getPathForLocalArtifact(Artifact artifact)
{    StringBuilder path = new StringBuilder(128);    path.append(artifact.getGroupId()).append('/');    path.append(artifact.getExtension()).append("s/");    path.append(artifact.getArtifactId()).append('-').append(artifact.getVersion());    if (artifact.getClassifier().length() > 0) {        path.append('-').append(artifact.getClassifier());    }    path.append('.').append(artifact.getExtension());    return path.toString();}
a5aae4fdc9f8e53af8b7d1de01e9c45714e8ef19194af0fce3ca7c15bf456e71
getPathForRemoteArtifact
public String getPathForRemoteArtifact(Artifact artifact, RemoteRepository repository, String context)
{    return getPathForLocalArtifact(artifact);}
b59230202063850b56827f9e04be9d24e31dc729958d0692757693f006d1dee1
getPathForLocalMetadata
public String getPathForLocalMetadata(Metadata metadata)
{    return getPath(metadata, "local");}
bb644dfe46d4351aa5ff27e75cdbd31e605bfe45a8c8f975765cc64afb0129bb
getPathForRemoteMetadata
public String getPathForRemoteMetadata(Metadata metadata, RemoteRepository repository, String context)
{    return getPath(metadata, getRepositoryKey(repository, context));}
9d3d14491a5ccb8006d5adbb929516c84d3934bae1061e5646a27f4b07d1d91a
getRepositoryKey
 String getRepositoryKey(RemoteRepository repository, String context)
{    return repository.getId();}
9d453f70b2a24a14d1daefcd618938580b499ca6325d84ff0e729284b9d12d69
getPath
private String getPath(Metadata metadata, String repositoryKey)
{    StringBuilder path = new StringBuilder(128);    if (metadata.getGroupId().length() > 0) {        path.append(metadata.getGroupId().replace('.', '/')).append('/');        if (metadata.getArtifactId().length() > 0) {            path.append(metadata.getArtifactId()).append('/');            if (metadata.getVersion().length() > 0) {                path.append(metadata.getVersion()).append('/');            }        }    }    path.append(insertRepositoryKey(metadata.getType(), repositoryKey));    return path.toString();}
2a1e3b50adae794feaca7aa7ca66fb5ed04cc9930fa3b7f40a341c4dd60de3f8
insertRepositoryKey
private String insertRepositoryKey(String filename, String repositoryKey)
{    String result;    int idx = filename.indexOf('.');    if (idx < 0) {        result = filename + '-' + repositoryKey;    } else {        result = filename.substring(0, idx) + '-' + repositoryKey + filename.substring(idx);    }    return result;}
d47545d8b9d69ca4f807125761430a3980f7977633bed9bb451c8374136256dc
find
public LocalArtifactResult find(RepositorySystemSession session, LocalArtifactRequest request)
{    String path = getPathForLocalArtifact(request.getArtifact());    File file = new File(getRepository().getBasedir(), path);    LocalArtifactResult result = new LocalArtifactResult(request);    if (file.isFile()) {        result.setFile(file);        result.setAvailable(true);    }    return result;}
f1ea2a44352c3ef6d1164b4a519aff25947342f5a526bdff5c76cf9b178a2887
add
public void add(RepositorySystemSession session, LocalArtifactRegistration request)
{}
785925ab40a1c8dcdf706067283c756eb376d28ae46ef28d0e8de179d49b8041
find
public LocalMetadataResult find(RepositorySystemSession session, LocalMetadataRequest request)
{    LocalMetadataResult result = new LocalMetadataResult(request);    String path;    Metadata metadata = request.getMetadata();    String context = request.getContext();    RemoteRepository remote = request.getRepository();    if (remote != null) {        path = getPathForRemoteMetadata(metadata, remote, context);    } else {        path = getPathForLocalMetadata(metadata);    }    File file = new File(getRepository().getBasedir(), path);    if (file.isFile()) {        result.setFile(file);    }    return result;}
12cd16cf6f6ca36eb33869b9573c1f80026030c65a5ee0b1cb74168b95a92a3f
add
public void add(RepositorySystemSession session, LocalMetadataRegistration request)
{}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return String.valueOf(getRepository());}
a08a91ad2c12f5f669fb0bb874c8b1f060fc4d151fa524c2ba356d9b2cb2d638
testShouldUseMainPluginDependencyVersionOverManagedDepVersion
public void testShouldUseMainPluginDependencyVersionOverManagedDepVersion()
{    Plugin mgtPlugin = createPlugin("group", "artifact", "1", Collections.EMPTY_MAP);    Dependency mgtDep = createDependency("g", "a", "2");    mgtPlugin.addDependency(mgtDep);    Plugin plugin = createPlugin("group", "artifact", "1", Collections.EMPTY_MAP);    Dependency dep = createDependency("g", "a", "1");    plugin.addDependency(dep);    ModelUtils.mergePluginDefinitions(plugin, mgtPlugin, false);    assertEquals(dep.getVersion(), plugin.getDependencies().get(0).getVersion());}
32bdd76b960130c15c12b09ebc5d08be70763605fd6104352d2519e54fe8e336
createDependency
private Dependency createDependency(String gid, String aid, String ver)
{    Dependency dep = new Dependency();    dep.setGroupId(gid);    dep.setArtifactId(aid);    dep.setVersion(ver);    return dep;}
430d4d18eadc163734c76c4bae43a7b8256785e9308626f08a1e4b8eece4ea6d
testShouldNotInheritPluginWithInheritanceSetToFalse
public void testShouldNotInheritPluginWithInheritanceSetToFalse()
{    PluginContainer parent = new PluginContainer();    Plugin parentPlugin = createPlugin("group", "artifact", "1.0", Collections.EMPTY_MAP);    parentPlugin.setInherited("false");    parent.addPlugin(parentPlugin);    PluginContainer child = new PluginContainer();    child.addPlugin(createPlugin("group3", "artifact3", "1.0", Collections.EMPTY_MAP));    ModelUtils.mergePluginLists(child, parent, true);    List results = child.getPlugins();    assertEquals(1, results.size());    Plugin result1 = (Plugin) results.get(0);    assertEquals("group3", result1.getGroupId());    assertEquals("artifact3", result1.getArtifactId());}
e667e6c4b9418665b2f1c1e7283b360aac1a7e1a3fe5a5b6d9bbc14da36488a4
testShouldPreserveChildOrderingOfPluginsAfterParentMerge
public void testShouldPreserveChildOrderingOfPluginsAfterParentMerge()
{    PluginContainer parent = new PluginContainer();    parent.addPlugin(createPlugin("group", "artifact", "1.0", Collections.EMPTY_MAP));    parent.addPlugin(createPlugin("group2", "artifact2", "1.0", Collections.singletonMap("key", "value")));    PluginContainer child = new PluginContainer();    child.addPlugin(createPlugin("group3", "artifact3", "1.0", Collections.EMPTY_MAP));    child.addPlugin(createPlugin("group2", "artifact2", "1.0", Collections.singletonMap("key2", "value2")));    ModelUtils.mergePluginLists(child, parent, true);    List results = child.getPlugins();    assertEquals(3, results.size());    Plugin result1 = (Plugin) results.get(0);    assertEquals("group", result1.getGroupId());    assertEquals("artifact", result1.getArtifactId());    Plugin result2 = (Plugin) results.get(1);    assertEquals("group3", result2.getGroupId());    assertEquals("artifact3", result2.getArtifactId());    Plugin result3 = (Plugin) results.get(2);    assertEquals("group2", result3.getGroupId());    assertEquals("artifact2", result3.getArtifactId());    Xpp3Dom result3Config = (Xpp3Dom) result3.getConfiguration();    assertNotNull(result3Config);    assertEquals("value", result3Config.getChild("key").getValue());    assertEquals("value2", result3Config.getChild("key2").getValue());}
726d74b2ba618e79e88d56a6e488d90aa5029712a6d541296f37014b252cc477
createPlugin
private Plugin createPlugin(String groupId, String artifactId, String version, Map configuration)
{    Plugin plugin = new Plugin();    plugin.setGroupId(groupId);    plugin.setArtifactId(artifactId);    plugin.setVersion(version);    Xpp3Dom config = new Xpp3Dom("configuration");    if (configuration != null) {        for (Object o : configuration.entrySet()) {            Map.Entry entry = (Map.Entry) o;            Xpp3Dom param = new Xpp3Dom(String.valueOf(entry.getKey()));            param.setValue(String.valueOf(entry.getValue()));            config.addChild(param);        }    }    plugin.setConfiguration(config);    return plugin;}
cf2d2ebd42b6c4c82339fe57d5186ba59ec1e06ee9bccf122261c0023ce31a6a
testShouldInheritOnePluginWithExecution
public void testShouldInheritOnePluginWithExecution()
{    Plugin parent = new Plugin();    parent.setArtifactId("testArtifact");    parent.setGroupId("testGroup");    parent.setVersion("1.0");    PluginExecution parentExecution = new PluginExecution();    parentExecution.setId("testExecution");    parent.addExecution(parentExecution);    Plugin child = new Plugin();    child.setArtifactId("testArtifact");    child.setGroupId("testGroup");    child.setVersion("1.0");    ModelUtils.mergePluginDefinitions(child, parent, false);    assertEquals(1, child.getExecutions().size());}
c7ab7d1c70d7eacba157e0372398f2f7fc4922a275b4e9c4fc03d1d5c164b6e2
testShouldMergeInheritedPluginHavingExecutionWithLocalPlugin
public void testShouldMergeInheritedPluginHavingExecutionWithLocalPlugin()
{    Plugin parent = new Plugin();    parent.setArtifactId("testArtifact");    parent.setGroupId("testGroup");    parent.setVersion("1.0");    PluginExecution parentExecution = new PluginExecution();    parentExecution.setId("testExecution");    parent.addExecution(parentExecution);    Plugin child = new Plugin();    child.setArtifactId("testArtifact");    child.setGroupId("testGroup");    child.setVersion("1.0");    PluginExecution childExecution = new PluginExecution();    childExecution.setId("testExecution2");    child.addExecution(childExecution);    ModelUtils.mergePluginDefinitions(child, parent, false);    assertEquals(2, child.getExecutions().size());}
9c7855729142936942c53603ef6db87368ebf4fff445a6b7efc0f7182d4789e8
testShouldMergeOnePluginWithInheritExecutionWithoutDuplicatingPluginInList
public void testShouldMergeOnePluginWithInheritExecutionWithoutDuplicatingPluginInList()
{    Plugin parent = new Plugin();    parent.setArtifactId("testArtifact");    parent.setGroupId("testGroup");    parent.setVersion("1.0");    PluginExecution parentExecution = new PluginExecution();    parentExecution.setId("testExecution");    parent.addExecution(parentExecution);    Build parentContainer = new Build();    parentContainer.addPlugin(parent);    Plugin child = new Plugin();    child.setArtifactId("testArtifact");    child.setGroupId("testGroup");    child.setVersion("1.0");    Build childContainer = new Build();    childContainer.addPlugin(child);    ModelUtils.mergePluginLists(childContainer, parentContainer, true);    List plugins = childContainer.getPlugins();    assertEquals(1, plugins.size());    Plugin plugin = (Plugin) plugins.get(0);    assertEquals(1, plugin.getExecutions().size());}
0893e5a71d3abcaf0c76be25f82a92c8e57a2bcfdadce316dfdac47b73c094e6
testShouldMergePluginWithDifferentExecutionFromParentWithoutDuplicatingPluginInList
public void testShouldMergePluginWithDifferentExecutionFromParentWithoutDuplicatingPluginInList()
{    Plugin parent = new Plugin();    parent.setArtifactId("testArtifact");    parent.setGroupId("testGroup");    parent.setVersion("1.0");    PluginExecution parentExecution = new PluginExecution();    parentExecution.setId("testExecution");    parent.addExecution(parentExecution);    Build parentContainer = new Build();    parentContainer.addPlugin(parent);    Plugin child = new Plugin();    child.setArtifactId("testArtifact");    child.setGroupId("testGroup");    child.setVersion("1.0");    PluginExecution childExecution = new PluginExecution();    childExecution.setId("testExecution2");    child.addExecution(childExecution);    Build childContainer = new Build();    childContainer.addPlugin(child);    ModelUtils.mergePluginLists(childContainer, parentContainer, true);    List plugins = childContainer.getPlugins();    assertEquals(1, plugins.size());    Plugin plugin = (Plugin) plugins.get(0);    assertEquals(2, plugin.getExecutions().size());}
c4df9683f1dde7c68d03a89ecbe45d7bd31226e8719ddad2c7a0e05498b19f1c
testShouldNOTMergeInheritedPluginHavingInheritEqualFalse
public void testShouldNOTMergeInheritedPluginHavingInheritEqualFalse()
{    Plugin parent = new Plugin();    parent.setArtifactId("testArtifact");    parent.setGroupId("testGroup");    parent.setVersion("1.0");    parent.setInherited("false");    PluginExecution parentExecution = new PluginExecution();    parentExecution.setId("testExecution");    parent.addExecution(parentExecution);    Plugin child = new Plugin();    child.setArtifactId("testArtifact");    child.setGroupId("testGroup");    child.setVersion("1.0");    ModelUtils.mergePluginDefinitions(child, parent, true);    assertEquals(0, child.getExecutions().size());}
1ce7dba6138e0f0717330f955fdf9fd66a460e945683a1f1ad64d24d2df4631d
testShouldKeepOriginalPluginOrdering
public void testShouldKeepOriginalPluginOrdering()
{    Plugin parentPlugin1 = new Plugin();    parentPlugin1.setArtifactId("testArtifact");        parentPlugin1.setGroupId("zzz");    parentPlugin1.setVersion("1.0");    PluginExecution parentExecution1 = new PluginExecution();    parentExecution1.setId("testExecution");    parentPlugin1.addExecution(parentExecution1);    Plugin parentPlugin2 = new Plugin();    parentPlugin2.setArtifactId("testArtifact");    parentPlugin2.setGroupId("yyy");    parentPlugin2.setVersion("1.0");    PluginExecution parentExecution2 = new PluginExecution();    parentExecution2.setId("testExecution");    parentPlugin2.addExecution(parentExecution2);    PluginContainer parentContainer = new PluginContainer();    parentContainer.addPlugin(parentPlugin1);    parentContainer.addPlugin(parentPlugin2);    Plugin childPlugin1 = new Plugin();    childPlugin1.setArtifactId("testArtifact");    childPlugin1.setGroupId("bbb");    childPlugin1.setVersion("1.0");    PluginExecution childExecution1 = new PluginExecution();    childExecution1.setId("testExecution");    childPlugin1.addExecution(childExecution1);    Plugin childPlugin2 = new Plugin();    childPlugin2.setArtifactId("testArtifact");    childPlugin2.setGroupId("aaa");    childPlugin2.setVersion("1.0");    PluginExecution childExecution2 = new PluginExecution();    childExecution2.setId("testExecution");    childPlugin2.addExecution(childExecution2);    PluginContainer childContainer = new PluginContainer();    childContainer.addPlugin(childPlugin1);    childContainer.addPlugin(childPlugin2);    ModelUtils.mergePluginLists(childContainer, parentContainer, true);    assertEquals(4, childContainer.getPlugins().size());    assertSame(parentPlugin1, childContainer.getPlugins().get(0));    assertSame(parentPlugin2, childContainer.getPlugins().get(1));    assertSame(childPlugin1, childContainer.getPlugins().get(2));    assertSame(childPlugin2, childContainer.getPlugins().get(3));}
8d6691475bc9dfa1834b649a6d88edd76eac00c0470005f119ec4d490664d7dd
testShouldKeepOriginalPluginExecutionOrdering
public void testShouldKeepOriginalPluginExecutionOrdering()
{    Plugin parent = new Plugin();    parent.setArtifactId("testArtifact");    parent.setGroupId("testGroup");    parent.setVersion("1.0");    PluginExecution parentExecution1 = new PluginExecution();        parentExecution1.setId("zzz");    PluginExecution parentExecution2 = new PluginExecution();        parentExecution2.setId("yyy");    parent.addExecution(parentExecution1);    parent.addExecution(parentExecution2);        Dependency dep = new Dependency();    dep.setGroupId("depGroupId");    dep.setArtifactId("depArtifactId");    dep.setVersion("depVersion");    parent.setDependencies(Collections.singletonList(dep));    Plugin child = new Plugin();    child.setArtifactId("testArtifact");    child.setGroupId("testGroup");    child.setVersion("1.0");    PluginExecution childExecution1 = new PluginExecution();    childExecution1.setId("bbb");    PluginExecution childExecution2 = new PluginExecution();    childExecution2.setId("aaa");    child.addExecution(childExecution1);    child.addExecution(childExecution2);    ModelUtils.mergePluginDefinitions(child, parent, false);    assertEquals(4, child.getExecutions().size());    assertSame(parentExecution1, child.getExecutions().get(0));    assertSame(parentExecution2, child.getExecutions().get(1));    assertSame(childExecution1, child.getExecutions().get(2));    assertSame(childExecution2, child.getExecutions().get(3));        assertEquals(1, child.getDependencies().size());    Dependency dep2 = child.getDependencies().get(0);    assertEquals(dep.getManagementKey(), dep2.getManagementKey());}
2d71b32e0ffe8587c4caf17104c37cb1363dfc7ae88e7be0b389b9be83abc678
testShouldOverwritePluginConfigurationSubItemsByDefault
public void testShouldOverwritePluginConfigurationSubItemsByDefault() throws XmlPullParserException, IOException
{    String parentConfigStr = "<configuration><items><item>one</item><item>two</item></items></configuration>";    Xpp3Dom parentConfig = Xpp3DomBuilder.build(new StringReader(parentConfigStr));    Plugin parentPlugin = createPlugin("group", "artifact", "1", null);    parentPlugin.setConfiguration(parentConfig);    String childConfigStr = "<configuration><items><item>three</item></items></configuration>";    Xpp3Dom childConfig = Xpp3DomBuilder.build(new StringReader(childConfigStr));    Plugin childPlugin = createPlugin("group", "artifact", "1", null);    childPlugin.setConfiguration(childConfig);    ModelUtils.mergePluginDefinitions(childPlugin, parentPlugin, true);    Xpp3Dom result = (Xpp3Dom) childPlugin.getConfiguration();    Xpp3Dom items = result.getChild("items");    assertEquals(1, items.getChildCount());    Xpp3Dom item = items.getChild(0);    assertEquals("three", item.getValue());}
25f543ad97c13afe84a543cfb28620056d40ddf2c06712037be379782d7ff47f
testShouldMergePluginConfigurationSubItemsWithMergeAttributeSet
public void testShouldMergePluginConfigurationSubItemsWithMergeAttributeSet() throws XmlPullParserException, IOException
{    String parentConfigStr = "<configuration><items><item>one</item><item>two</item></items></configuration>";    Xpp3Dom parentConfig = Xpp3DomBuilder.build(new StringReader(parentConfigStr));    Plugin parentPlugin = createPlugin("group", "artifact", "1", null);    parentPlugin.setConfiguration(parentConfig);    String childConfigStr = "<configuration><items combine.children=\"append\"><item>three</item></items></configuration>";    Xpp3Dom childConfig = Xpp3DomBuilder.build(new StringReader(childConfigStr));    Plugin childPlugin = createPlugin("group", "artifact", "1", null);    childPlugin.setConfiguration(childConfig);    ModelUtils.mergePluginDefinitions(childPlugin, parentPlugin, true);    Xpp3Dom result = (Xpp3Dom) childPlugin.getConfiguration();    Xpp3Dom items = result.getChild("items");    assertEquals(3, items.getChildCount());    Xpp3Dom[] item = items.getChildren();    List<String> actual = Arrays.asList(item[0].getValue(), item[1].getValue(), item[2].getValue());    List<String> expected = Arrays.asList("one", "two", "three");    Collections.sort(actual);    Collections.sort(expected);    assertEquals(expected, actual);}
7c305279206d9dd904e8e047c2f46823b891a1cabb18029e57d573350d3074d6
testShouldNotMergePluginExecutionWhenExecInheritedIsFalseAndTreatAsInheritanceIsTrue
public void testShouldNotMergePluginExecutionWhenExecInheritedIsFalseAndTreatAsInheritanceIsTrue()
{    String gid = "group";    String aid = "artifact";    String ver = "1";    PluginContainer parent = new PluginContainer();    Plugin pParent = createPlugin(gid, aid, ver, Collections.EMPTY_MAP);    pParent.setInherited(Boolean.toString(true));    PluginExecution eParent = new PluginExecution();    String testId = "test";    eParent.setId(testId);    eParent.addGoal("run");    eParent.setPhase("initialize");    eParent.setInherited(Boolean.toString(false));    pParent.addExecution(eParent);    parent.addPlugin(pParent);    PluginContainer child = new PluginContainer();    Plugin pChild = createPlugin(gid, aid, ver, Collections.EMPTY_MAP);    PluginExecution eChild = new PluginExecution();    eChild.setId("child-specified");    eChild.addGoal("child");    eChild.setPhase("compile");    pChild.addExecution(eChild);    child.addPlugin(pChild);    ModelUtils.mergePluginDefinitions(pChild, pParent, true);    Map executionMap = pChild.getExecutionsAsMap();    assertNull("test execution should not be inherited from parent.", executionMap.get(testId));}
711d0b5a15380fa91d116231d78b1b75b0b55208d4f28ffad75a75e9dd2ced26
testShouldNotMergePluginExecutionWhenPluginInheritedIsFalseAndTreatAsInheritanceIsTrue
public void testShouldNotMergePluginExecutionWhenPluginInheritedIsFalseAndTreatAsInheritanceIsTrue()
{    String gid = "group";    String aid = "artifact";    String ver = "1";    PluginContainer parent = new PluginContainer();    Plugin pParent = createPlugin(gid, aid, ver, Collections.EMPTY_MAP);    pParent.setInherited(Boolean.toString(false));    PluginExecution eParent = new PluginExecution();    String testId = "test";    eParent.setId(testId);    eParent.addGoal("run");    eParent.setPhase("initialize");    eParent.setInherited(Boolean.toString(true));    pParent.addExecution(eParent);    parent.addPlugin(pParent);    PluginContainer child = new PluginContainer();    Plugin pChild = createPlugin(gid, aid, ver, Collections.EMPTY_MAP);    PluginExecution eChild = new PluginExecution();    eChild.setId("child-specified");    eChild.addGoal("child");    eChild.setPhase("compile");    pChild.addExecution(eChild);    child.addPlugin(pChild);    ModelUtils.mergePluginDefinitions(pChild, pParent, true);    Map executionMap = pChild.getExecutionsAsMap();    assertNull("test execution should not be inherited from parent.", executionMap.get(testId));}
602e96ca3f9ad8a0da6abd5aad702f119ee556b985d83f84e05007709f555566
testShouldMergePluginExecutionWhenExecInheritedIsTrueAndTreatAsInheritanceIsTrue
public void testShouldMergePluginExecutionWhenExecInheritedIsTrueAndTreatAsInheritanceIsTrue()
{    String gid = "group";    String aid = "artifact";    String ver = "1";    PluginContainer parent = new PluginContainer();    Plugin pParent = createPlugin(gid, aid, ver, Collections.EMPTY_MAP);    pParent.setInherited(Boolean.toString(true));    PluginExecution eParent = new PluginExecution();    String testId = "test";    eParent.setId(testId);    eParent.addGoal("run");    eParent.setPhase("initialize");    eParent.setInherited(Boolean.toString(true));    pParent.addExecution(eParent);    parent.addPlugin(pParent);    PluginContainer child = new PluginContainer();    Plugin pChild = createPlugin(gid, aid, ver, Collections.EMPTY_MAP);    PluginExecution eChild = new PluginExecution();    eChild.setId("child-specified");    eChild.addGoal("child");    eChild.setPhase("compile");    pChild.addExecution(eChild);    child.addPlugin(pChild);    ModelUtils.mergePluginDefinitions(pChild, pParent, true);    Map executionMap = pChild.getExecutionsAsMap();    assertNotNull("test execution should be inherited from parent.", executionMap.get(testId));}
08e322e04b6ed110c332bf7b7d2cb6f980eaee1f2876884c482e0674652bd82e
testAlignToBasedirWhereBasedirExpressionIsTheCompleteValue
public void testAlignToBasedirWhereBasedirExpressionIsTheCompleteValue()
{    File basedir = new File(System.getProperty("java.io.tmpdir"), "test").getAbsoluteFile();    String aligned = new DefaultPathTranslator().alignToBaseDirectory("${basedir}", basedir);    assertEquals(basedir.getAbsolutePath(), aligned);}
08ed0b5812a8f5a84de4f872ab5197bada9caade600c35d9410d88ab4b5b4a60
testAlignToBasedirWhereBasedirExpressionIsTheValuePrefix
public void testAlignToBasedirWhereBasedirExpressionIsTheValuePrefix()
{    File basedir = new File(System.getProperty("java.io.tmpdir"), "test").getAbsoluteFile();    String aligned = new DefaultPathTranslator().alignToBaseDirectory("${basedir}/dir", basedir);    assertEquals(new File(basedir, "dir").getAbsolutePath(), aligned);}
a9534eeb4d23c36a124c3f01dcaee8ae4c103ca07242eb386a42e2a5f86dc4bc
testUnalignToBasedirWherePathEqualsBasedir
public void testUnalignToBasedirWherePathEqualsBasedir()
{    File basedir = new File(System.getProperty("java.io.tmpdir"), "test").getAbsoluteFile();    String unaligned = new DefaultPathTranslator().unalignFromBaseDirectory(basedir.getAbsolutePath(), basedir);    assertEquals(".", unaligned);}
9d69bfd2a279cacda04001b1c50c6f6698b00750596931407928c5a8169d56b7
setUp
public void setUp() throws Exception
{    ArtifactResolver resolver = lookup(ArtifactResolver.class, "classpath");    DefaultArtifactDescriptorReader pomReader = (DefaultArtifactDescriptorReader) lookup(ArtifactDescriptorReader.class);    pomReader.setArtifactResolver(resolver);    projectBuilder = lookup(ProjectBuilder.class, "classpath");        getContainer().addComponent(projectBuilder, ProjectBuilder.class, "default");    repositorySystem = lookup(RepositorySystem.class);}
d848f01b637485f262196c6134c856a9a3ceb73a94b5a500fd5c65cf5a6a324e
getCustomConfigurationName
protected String getCustomConfigurationName()
{    return null;}
4f0426f5c1595e783e6ab74c134dc12916a18804e427be687b7d8167ec517591
testProjectClasspath
public void testProjectClasspath() throws Exception
{    File f = getFileForClasspathResource(dir + "project-with-scoped-dependencies.xml");    MavenProject project = getProjectWithDependencies(f);    Artifact artifact;    assertNotNull("Test project can't be null!", project);    checkArtifactIdScope(project, "provided", "provided");    checkArtifactIdScope(project, "test", "test");    checkArtifactIdScope(project, "compile", "compile");    checkArtifactIdScope(project, "runtime", "runtime");    checkArtifactIdScope(project, "default", "compile");        artifact = getArtifact(project, "maven-test-test", "scope-provided");    assertNull("Check no provided dependencies are transitive", artifact);    artifact = getArtifact(project, "maven-test-test", "scope-test");    assertNull("Check no test dependencies are transitive", artifact);    artifact = getArtifact(project, "maven-test-test", "scope-compile");    assertNotNull(artifact);    System.out.println("a = " + artifact);    System.out.println("b = " + artifact.getScope());    assertEquals("Check scope", "test", artifact.getScope());    artifact = getArtifact(project, "maven-test-test", "scope-default");    assertEquals("Check scope", "test", artifact.getScope());    artifact = getArtifact(project, "maven-test-test", "scope-runtime");    assertEquals("Check scope", "test", artifact.getScope());        checkGroupIdScope(project, "provided", "maven-test-provided");    artifact = getArtifact(project, "maven-test-provided", "scope-runtime");    assertEquals("Check scope", "provided", artifact.getScope());        checkGroupIdScope(project, "runtime", "maven-test-runtime");    artifact = getArtifact(project, "maven-test-runtime", "scope-runtime");    assertEquals("Check scope", "runtime", artifact.getScope());        checkGroupIdScope(project, "compile", "maven-test-compile");    artifact = getArtifact(project, "maven-test-compile", "scope-runtime");    assertEquals("Check scope", "runtime", artifact.getScope());        checkGroupIdScope(project, "compile", "maven-test-default");    artifact = getArtifact(project, "maven-test-default", "scope-runtime");    assertEquals("Check scope", "runtime", artifact.getScope());}
fa135bc7b8ede56b1257e5759f73e9421b212e8dd0338b7b108e57014b6421c8
checkGroupIdScope
private void checkGroupIdScope(MavenProject project, String scopeValue, String groupId)
{    Artifact artifact;    artifact = getArtifact(project, groupId, "scope-compile");    assertEquals("Check scope", scopeValue, artifact.getScope());    artifact = getArtifact(project, groupId, "scope-test");    assertNull("Check test dependency is not transitive", artifact);    artifact = getArtifact(project, groupId, "scope-provided");    assertNull("Check provided dependency is not transitive", artifact);    artifact = getArtifact(project, groupId, "scope-default");    assertEquals("Check scope", scopeValue, artifact.getScope());}
0661dc07b2575f2cf0385456a7df76982257012643b91c29bea30c2ddee76845
checkArtifactIdScope
private void checkArtifactIdScope(MavenProject project, String scope, String scopeValue)
{    String artifactId = "scope-" + scope;    Artifact artifact = getArtifact(project, "maven-test", artifactId);    assertNotNull(artifact);    assertEquals("Check scope", scopeValue, artifact.getScope());}
b287fb9b4df4c0c7b519b1ade085e1818b1c37ae34ddf4fa35ade7c89d9abd75
getArtifact
private Artifact getArtifact(MavenProject project, String groupId, String artifactId)
{    System.out.println("[ Looking for " + groupId + ":" + artifactId + " ]");    for (Artifact a : project.getArtifacts()) {        System.out.println(a.toString());        if (artifactId.equals(a.getArtifactId()) && a.getGroupId().equals(groupId)) {            System.out.println("RETURN");            return a;        }    }    System.out.println("Return null");    return null;}
0f8f154bbaaf562bad535a682f37e39a295adf80f7dabf122b0d908d80aedc19
build
public ProjectBuildingResult build(Artifact artifact, ProjectBuildingRequest request) throws ProjectBuildingException
{    if ("maven-test".equals(artifact.getGroupId())) {        String scope = artifact.getArtifactId().substring("scope-".length());        try {            artifact.setFile(ProjectClasspathTest.getFileForClasspathResource(ProjectClasspathTest.dir + "transitive-" + scope + "-dep.xml"));        } catch (FileNotFoundException e) {            throw new IllegalStateException("Missing test POM for " + artifact);        }    }    if (artifact.getFile() == null) {        MavenProject project = new MavenProject();        project.setArtifact(artifact);        return new DefaultProjectBuildingResult(project, null, null);    }    return build(artifact.getFile(), request);}
63c3fc9427c3ab0c42d03f4fb9a887ab5420121ce4ea08e86e9c4d9ac3366a7a
build
public ProjectBuildingResult build(File pomFile, ProjectBuildingRequest configuration) throws ProjectBuildingException
{    ProjectBuildingResult result = super.build(pomFile, configuration);    result.getProject().setRemoteArtifactRepositories(Collections.<ArtifactRepository>emptyList());    return result;}
57137a8d8ba5b547fc6974ebdbf4bbce8102ffc300e0ef8fba4d8775dba406c4
testMirrorWithMirrorOfPatternContainingANegationIsNotSelected
public void testMirrorWithMirrorOfPatternContainingANegationIsNotSelected()
{    ArtifactRepository repository = new DefaultArtifactRepository("snapshots.repo", "http://whatever", null);    String pattern = "external:*, !snapshots.repo";    boolean matches = DefaultMirrorSelector.matchPattern(repository, pattern);    System.out.println(matches);    assertFalse(matches);}
dd59ae9f9cfea8bf9399289d3fe827bfa692a718c5bf26c281144904defa084d
component
protected String component()
{    return "updateCheckManager";}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();    updateCheckManager = new DefaultUpdateCheckManager(new ConsoleLogger(Logger.LEVEL_DEBUG, "test"));}
889c5b3fe297ce139a06a8afbb14ac30c7298f9774affb4539f8852dddc72e5f
testArtifact
public void testArtifact() throws Exception
{    ArtifactRepository remoteRepository = remoteRepository();    ArtifactRepository localRepository = localRepository();    Artifact a = createArtifact("a", "0.0.1-SNAPSHOT");    File file = new File(localRepository.getBasedir(), localRepository.pathOf(a));    file.delete();    a.setFile(file);    File touchFile = updateCheckManager.getTouchfile(a);    touchFile.delete();    assertTrue(updateCheckManager.isUpdateRequired(a, remoteRepository));    file.getParentFile().mkdirs();    file.createNewFile();    updateCheckManager.touch(a, remoteRepository, null);    assertFalse(updateCheckManager.isUpdateRequired(a, remoteRepository));    assertNull(updateCheckManager.readLastUpdated(touchFile, updateCheckManager.getRepositoryKey(remoteRepository)));    assertFalse(updateCheckManager.getTouchfile(a).exists());}
c454045a44764561d87ff255dbad7eee5ba143429866658f93d2e1329f19985e
testMissingArtifact
public void testMissingArtifact() throws Exception
{    ArtifactRepository remoteRepository = remoteRepository();    ArtifactRepository localRepository = localRepository();    Artifact a = createArtifact("a", "0.0.1-SNAPSHOT");    File file = new File(localRepository.getBasedir(), localRepository.pathOf(a));    file.delete();    a.setFile(file);    File touchFile = updateCheckManager.getTouchfile(a);    touchFile.delete();    assertTrue(updateCheckManager.isUpdateRequired(a, remoteRepository));    updateCheckManager.touch(a, remoteRepository, null);    assertFalse(updateCheckManager.isUpdateRequired(a, remoteRepository));    assertFalse(file.exists());    assertNotNull(updateCheckManager.readLastUpdated(touchFile, updateCheckManager.getRepositoryKey(remoteRepository)));}
80c45d3bcf67e8e7671367e370862d744d30c7a0831d7a2351c5a58c5afafd6e
testPom
public void testPom() throws Exception
{    ArtifactRepository remoteRepository = remoteRepository();    ArtifactRepository localRepository = localRepository();    Artifact a = createArtifact("a", "0.0.1", "pom");    File file = new File(localRepository.getBasedir(), localRepository.pathOf(a));    file.delete();    a.setFile(file);    File touchFile = updateCheckManager.getTouchfile(a);    touchFile.delete();    assertTrue(updateCheckManager.isUpdateRequired(a, remoteRepository));    file.getParentFile().mkdirs();    file.createNewFile();    updateCheckManager.touch(a, remoteRepository, null);    assertFalse(updateCheckManager.isUpdateRequired(a, remoteRepository));    assertNull(updateCheckManager.readLastUpdated(touchFile, updateCheckManager.getRepositoryKey(remoteRepository)));    assertFalse(updateCheckManager.getTouchfile(a).exists());}
55465cc532aadb3cbf7374ac8e687137476e5e74d298dbfb7839e5277db66ae7
testMissingPom
public void testMissingPom() throws Exception
{    ArtifactRepository remoteRepository = remoteRepository();    ArtifactRepository localRepository = localRepository();    Artifact a = createArtifact("a", "0.0.1", "pom");    File file = new File(localRepository.getBasedir(), localRepository.pathOf(a));    file.delete();    a.setFile(file);    File touchFile = updateCheckManager.getTouchfile(a);    touchFile.delete();    assertTrue(updateCheckManager.isUpdateRequired(a, remoteRepository));    updateCheckManager.touch(a, remoteRepository, null);    assertFalse(updateCheckManager.isUpdateRequired(a, remoteRepository));    assertFalse(file.exists());    assertNotNull(updateCheckManager.readLastUpdated(touchFile, updateCheckManager.getRepositoryKey(remoteRepository)));}
dc6cb372f78d0cd692a2dd5b8faff3e380952e14138a576171dd512658d93b5f
testMetadata
public void testMetadata() throws Exception
{    ArtifactRepository remoteRepository = remoteRepository();    ArtifactRepository localRepository = localRepository();    Artifact a = createRemoteArtifact("a", "0.0.1-SNAPSHOT");    RepositoryMetadata metadata = new ArtifactRepositoryMetadata(a);    File file = new File(localRepository.getBasedir(), localRepository.pathOfLocalRepositoryMetadata(metadata, localRepository));    file.delete();    File touchFile = updateCheckManager.getTouchfile(metadata, file);    touchFile.delete();    assertTrue(updateCheckManager.isUpdateRequired(metadata, remoteRepository, file));    file.getParentFile().mkdirs();    file.createNewFile();    updateCheckManager.touch(metadata, remoteRepository, file);    assertFalse(updateCheckManager.isUpdateRequired(metadata, remoteRepository, file));    assertNotNull(updateCheckManager.readLastUpdated(touchFile, updateCheckManager.getMetadataKey(remoteRepository, file)));}
4996eb0516ef530d9ad34e39c578d3f0e05108a7eb4b35c5e940b9a13f6d5d14
testMissingMetadata
public void testMissingMetadata() throws Exception
{    ArtifactRepository remoteRepository = remoteRepository();    ArtifactRepository localRepository = localRepository();    Artifact a = createRemoteArtifact("a", "0.0.1-SNAPSHOT");    RepositoryMetadata metadata = new ArtifactRepositoryMetadata(a);    File file = new File(localRepository.getBasedir(), localRepository.pathOfLocalRepositoryMetadata(metadata, localRepository));    file.delete();    File touchFile = updateCheckManager.getTouchfile(metadata, file);    touchFile.delete();    assertTrue(updateCheckManager.isUpdateRequired(metadata, remoteRepository, file));    updateCheckManager.touch(metadata, remoteRepository, file);    assertFalse(updateCheckManager.isUpdateRequired(metadata, remoteRepository, file));    assertNotNull(updateCheckManager.readLastUpdated(touchFile, updateCheckManager.getMetadataKey(remoteRepository, file)));}
a8c041751b6069e40e670bf8954b18242775d551646be0b57c3f9ee60fe50516
testArtifactTouchFileName
public void testArtifactTouchFileName() throws Exception
{    ArtifactFactory artifactFactory = (ArtifactFactory) lookup(ArtifactFactory.ROLE);    ArtifactRepository localRepository = localRepository();    Artifact a = artifactFactory.createArtifactWithClassifier("groupdId", "a", "0.0.1-SNAPSHOT", "jar", null);    File file = new File(localRepository.getBasedir(), localRepository.pathOf(a));    a.setFile(file);    assertEquals("a-0.0.1-SNAPSHOT.jar.lastUpdated", updateCheckManager.getTouchfile(a).getName());    a = artifactFactory.createArtifactWithClassifier("groupdId", "a", "0.0.1-SNAPSHOT", "jar", "classifier");    file = new File(localRepository.getBasedir(), localRepository.pathOf(a));    a.setFile(file);    assertEquals("a-0.0.1-SNAPSHOT-classifier.jar.lastUpdated", updateCheckManager.getTouchfile(a).getName());}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();    wagonManager = (DefaultWagonManager) lookup(WagonManager.class);    artifactFactory = lookup(ArtifactFactory.class);    artifactRepositoryFactory = lookup(ArtifactRepositoryFactory.class);}
68bbf6c94fbad4862990669ea582b65c28678087c2377b2c3fb0948d54293af4
tearDown
protected void tearDown() throws Exception
{    wagonManager = null;    artifactFactory = null;    super.tearDown();}
a7d7254a8c668b29eabd02f219aa9f6aa535689fe2868d735e578654100bbdca
testUnnecessaryRepositoryLookup
public void testUnnecessaryRepositoryLookup() throws Exception
{    Artifact artifact = createTestPomArtifact("target/test-data/get-missing-pom");    List<ArtifactRepository> repos = new ArrayList<>();    repos.add(artifactRepositoryFactory.createArtifactRepository("repo1", "string://url1", new ArtifactRepositoryLayoutStub(), null, null));    repos.add(artifactRepositoryFactory.createArtifactRepository("repo2", "string://url2", new ArtifactRepositoryLayoutStub(), null, null));    StringWagon wagon = (StringWagon) wagonManager.getWagon("string");    wagon.addExpectedContent(repos.get(0).getLayout().pathOf(artifact), "expected");    wagon.addExpectedContent(repos.get(1).getLayout().pathOf(artifact), "expected");    class TransferListener extends AbstractTransferListener {        public List<TransferEvent> events = new ArrayList<>();        @Override        public void transferInitiated(TransferEvent transferEvent) {            events.add(transferEvent);        }    }    TransferListener listener = new TransferListener();    wagonManager.getArtifact(artifact, repos, listener, false);    assertEquals(1, listener.events.size());}
86bedfea6e43f28c82fbc36f219c0724df7d99dd838b19176570cc459bca4f8e
transferInitiated
public void transferInitiated(TransferEvent transferEvent)
{    events.add(transferEvent);}
6b6206a033ff39246428e349e006576b83dabf6b9b0f035cd964be802e34c41d
testGetMissingJar
public void testGetMissingJar() throws TransferFailedException, UnsupportedProtocolException, IOException
{    Artifact artifact = createTestArtifact("target/test-data/get-missing-jar", "jar");    ArtifactRepository repo = createStringRepo();    try {        wagonManager.getArtifact(artifact, repo, null, false);        fail();    } catch (ResourceDoesNotExistException e) {        assertTrue(true);    }    assertFalse(artifact.getFile().exists());}
0c35065267984a62f29b18a61d2cd86fab4bde4e9a8c041e5572507cdf6a7f5c
testGetMissingJarForced
public void testGetMissingJarForced() throws TransferFailedException, UnsupportedProtocolException, IOException
{    Artifact artifact = createTestArtifact("target/test-data/get-missing-jar", "jar");    ArtifactRepository repo = createStringRepo();    try {        wagonManager.getArtifact(artifact, repo, null, true);        fail();    } catch (ResourceDoesNotExistException e) {        assertTrue(true);    }    assertFalse(artifact.getFile().exists());}
0388c43992c351730337ddbc627719fefa41af710792011646c402bd559c3a1e
testGetRemoteJar
public void testGetRemoteJar() throws TransferFailedException, ResourceDoesNotExistException, UnsupportedProtocolException, IOException, AuthorizationException
{    Artifact artifact = createTestArtifact("target/test-data/get-remote-jar", "jar");    ArtifactRepository repo = createStringRepo();    StringWagon wagon = (StringWagon) wagonManager.getWagon("string");    wagon.addExpectedContent(repo.getLayout().pathOf(artifact), "expected");    wagonManager.getArtifact(artifact, repo, null, false);    assertTrue(artifact.getFile().exists());    assertEquals("expected", FileUtils.fileRead(artifact.getFile(), "UTF-8"));}
7f1742124abb78cf20ced78c4edd738fd63628c8328c0b9fd42d532a03c3423e
createTestPomArtifact
private Artifact createTestPomArtifact(String directory) throws IOException
{    File testData = getTestFile(directory);    FileUtils.deleteDirectory(testData);    testData.mkdirs();    Artifact artifact = artifactFactory.createProjectArtifact("test", "test", "1.0");    artifact.setFile(new File(testData, "test-1.0.pom"));    assertFalse(artifact.getFile().exists());    return artifact;}
4cd973a9f38dd2661f5fdc47e25c870c873bd74dda5a998043fda9bb6d6f66f3
createTestArtifact
private Artifact createTestArtifact(String directory, String type) throws IOException
{    return createTestArtifact(directory, "1.0", type);}
8c8886ad4bdb20d0a35ffeca58313a5b15f536e47069c33be7ee77d2caff701f
createTestArtifact
private Artifact createTestArtifact(String directory, String version, String type) throws IOException
{    File testData = getTestFile(directory);    FileUtils.deleteDirectory(testData);    testData.mkdirs();    Artifact artifact = artifactFactory.createBuildArtifact("test", "test", version, type);    artifact.setFile(new File(testData, "test-" + version + "." + artifact.getArtifactHandler().getExtension()));    assertFalse(artifact.getFile().exists());    return artifact;}
7d7028998e67a7f49e6fc6cc8a83ea8c66d392c08638d63a0a7167fd08652a31
createStringRepo
private ArtifactRepository createStringRepo()
{    return artifactRepositoryFactory.createArtifactRepository("id", "string://url", new ArtifactRepositoryLayoutStub(), null, null);}
386d7e79231f49e5435e2b14cf8ae226bf9cdd5edf337986cf2f75d705bc0238
getRepo
private ArtifactRepository getRepo(String id, String url)
{    return artifactRepositoryFactory.createArtifactRepository(id, url, new DefaultRepositoryLayout(), null, null);}
3e69fa9e8eb3921b797c223e498abdd88a02d13611f6e1c919d4c23470295053
getRepo
private ArtifactRepository getRepo(String id)
{    return getRepo(id, "http://something");}
63b2c4d5cf2d25b9486d6301440a164053a5ea18922ce1ee73e4ddb8cc9720b8
testDefaultWagonManager
public void testDefaultWagonManager() throws Exception
{    assertWagon("a");    assertWagon("b");    assertWagon("c");    assertWagon("string");    try {        assertWagon("d");        fail("Expected :" + UnsupportedProtocolException.class.getName());    } catch (UnsupportedProtocolException e) {                assertTrue(true);    }}
7ea1b99c85fa270e7d845ee7afde20edbf667392f68a69d1e68e556b1854df5f
testWagonTransferListenerRemovedAfterGetArtifactAndPutArtifact
public void testWagonTransferListenerRemovedAfterGetArtifactAndPutArtifact() throws Exception
{    Artifact artifact = createTestArtifact("target/test-data/transfer-listener", "jar");    ArtifactRepository repo = createStringRepo();    StringWagon wagon = (StringWagon) wagonManager.getWagon("string");    wagon.addExpectedContent(repo.getLayout().pathOf(artifact), "expected");    /* getArtifact */    assertFalse("Transfer listener is registered before test", wagon.getTransferEventSupport().hasTransferListener(transferListener));    wagonManager.getArtifact(artifact, repo, transferListener, false);    assertFalse("Transfer listener still registered after getArtifact", wagon.getTransferEventSupport().hasTransferListener(transferListener));    /* putArtifact */    File sampleFile = getTestFile("target/test-file");    FileUtils.fileWrite(sampleFile.getAbsolutePath(), "sample file");    assertFalse("Transfer listener is registered before test", wagon.getTransferEventSupport().hasTransferListener(transferListener));    wagonManager.putArtifact(sampleFile, artifact, repo, transferListener);    assertFalse("Transfer listener still registered after putArtifact", wagon.getTransferEventSupport().hasTransferListener(transferListener));}
8def3dc108abafbf86a9cfd61507df7e505b2f6fc11a69f0206252720f4cadf6
xtestChecksumVerification
public void xtestChecksumVerification() throws Exception
{    ArtifactRepositoryPolicy policy = new ArtifactRepositoryPolicy(true, ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS, ArtifactRepositoryPolicy.CHECKSUM_POLICY_FAIL);    ArtifactRepository repo = artifactRepositoryFactory.createArtifactRepository("id", "string://url", new ArtifactRepositoryLayoutStub(), policy, policy);    Artifact artifact = new DefaultArtifact("sample.group", "sample-art", VersionRange.createFromVersion("1.0"), "scope", "jar", "classifier", null);    artifact.setFile(getTestFile("target/sample-art"));    StringWagon wagon = (StringWagon) wagonManager.getWagon("string");    wagon.clearExpectedContent();    wagon.addExpectedContent("path", "lower-case-checksum");    wagon.addExpectedContent("path.sha1", "2a25dc564a3b34f68237fc849066cbc7bb7a36a1");    try {        wagonManager.getArtifact(artifact, repo, null, false);    } catch (ChecksumFailedException e) {        fail("Checksum verification did not pass: " + e.getMessage());    }    wagon.clearExpectedContent();    wagon.addExpectedContent("path", "upper-case-checksum");    wagon.addExpectedContent("path.sha1", "B7BB97D7D0B9244398D9B47296907F73313663E6");    try {        wagonManager.getArtifact(artifact, repo, null, false);    } catch (ChecksumFailedException e) {        fail("Checksum verification did not pass: " + e.getMessage());    }    wagon.clearExpectedContent();    wagon.addExpectedContent("path", "expected-failure");    wagon.addExpectedContent("path.sha1", "b7bb97d7d0b9244398d9b47296907f73313663e6");    try {        wagonManager.getArtifact(artifact, repo, null, false);        fail("Checksum verification did not fail");    } catch (ChecksumFailedException e) {        }    wagon.clearExpectedContent();    wagon.addExpectedContent("path", "lower-case-checksum");    wagon.addExpectedContent("path.md5", "50b2cf50a103a965efac62b983035cac");    try {        wagonManager.getArtifact(artifact, repo, null, false);    } catch (ChecksumFailedException e) {        fail("Checksum verification did not pass: " + e.getMessage());    }    wagon.clearExpectedContent();    wagon.addExpectedContent("path", "upper-case-checksum");    wagon.addExpectedContent("path.md5", "842F568FCCFEB7E534DC72133D42FFDC");    try {        wagonManager.getArtifact(artifact, repo, null, false);    } catch (ChecksumFailedException e) {        fail("Checksum verification did not pass: " + e.getMessage());    }    wagon.clearExpectedContent();    wagon.addExpectedContent("path", "expected-failure");    wagon.addExpectedContent("path.md5", "b7bb97d7d0b9244398d9b47296907f73313663e6");    try {        wagonManager.getArtifact(artifact, repo, null, false);        fail("Checksum verification did not fail");    } catch (ChecksumFailedException e) {        }}
0953b50c8481135a54d5f163f2be2ce5b4237950b3b19a2734316dfd497bbbc5
testPerLookupInstantiation
public void testPerLookupInstantiation() throws Exception
{    String protocol = "perlookup";    Wagon one = wagonManager.getWagon(protocol);    Wagon two = wagonManager.getWagon(protocol);    assertNotSame(one, two);}
045bd72ac1c17169c39a414cee1e77dfd0a6a93ae828c754d5f3eba555e53fc4
assertWagon
private void assertWagon(String protocol) throws Exception
{    Wagon wagon = wagonManager.getWagon(protocol);    assertNotNull("Check wagon, protocol=" + protocol, wagon);}
09e8f13a9a603d31d64bb498b77d15572483824d843d0e82a570643192f62186
getId
public String getId()
{    return "test";}
71592720c0b04200497abee0127a385a42bb60fee54e020cce105b67cd21d2e7
pathOfRemoteRepositoryMetadata
public String pathOfRemoteRepositoryMetadata(ArtifactMetadata metadata)
{    return "path";}
2bf3ce12ca84872494a2865c7a246067b1efd12dc3403ae1a3b69eb89fda872e
pathOfLocalRepositoryMetadata
public String pathOfLocalRepositoryMetadata(ArtifactMetadata metadata, ArtifactRepository repository)
{    return "path";}
6c63652ca89949e5d136675e9b8c89f393e36286bda4d26fa63c77d8d06c4fab
pathOf
public String pathOf(Artifact artifact)
{    return "path";}
d57c1d7022b9b24e5d6471b55681e866b61cc2646c5e5e41baf69039be0b670b
customizeContainerConfiguration
protected void customizeContainerConfiguration(ContainerConfiguration containerConfiguration)
{    super.customizeContainerConfiguration(containerConfiguration);    containerConfiguration.setAutoWiring(true);    containerConfiguration.setClassPathScanning(PlexusConstants.SCANNING_INDEX);}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();    repositorySystem = lookup(RepositorySystem.class, "default");}
68bbf6c94fbad4862990669ea582b65c28678087c2377b2c3fb0948d54293af4
tearDown
protected void tearDown() throws Exception
{    repositorySystem = null;    super.tearDown();}
d5347658eb46caf812ff104bc80fd00de1b6451e8159df3f1314687dcf814814
testThatLocalRepositoryWithSpacesIsProperlyHandled
public void testThatLocalRepositoryWithSpacesIsProperlyHandled() throws Exception
{    File basedir = new File("target/spacy path").getAbsoluteFile();    ArtifactRepository repo = repositorySystem.createLocalRepository(basedir);    assertEquals(basedir, new File(repo.getBasedir()));}
25c3b60592f067c755a78324954115b77441288c364ce7e79dc699b396f681a9
testAuthenticationHandling
public void testAuthenticationHandling() throws Exception
{    Server server = new Server();    server.setId("repository");    server.setUsername("jason");    server.setPassword("abc123");    ArtifactRepository repository = repositorySystem.createArtifactRepository("repository", "http://foo", null, null, null);    repositorySystem.injectAuthentication(Arrays.asList(repository), Arrays.asList(server));    Authentication authentication = repository.getAuthentication();    assertNotNull(authentication);    assertEquals("jason", authentication.getUsername());    assertEquals("abc123", authentication.getPassword());}
21cc57ef097d7e3e07321d041c33b84a6bde7df3c3363c16de62f126a077c32f
getSupportedProtocols
public String[] getSupportedProtocols()
{    return new String[] { "perlookup" };}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();    artifactFactory = (ArtifactFactory) lookup(ArtifactFactory.ROLE);    conflictResolver = (ConflictResolver) lookup(ConflictResolver.ROLE, roleHint);    a1 = createArtifact("a", "1.0");    a2 = createArtifact("a", "2.0");    b1 = createArtifact("b", "1.0");}
68bbf6c94fbad4862990669ea582b65c28678087c2377b2c3fb0948d54293af4
tearDown
protected void tearDown() throws Exception
{    a1 = null;    a2 = null;    b1 = null;    artifactFactory = null;    conflictResolver = null;    super.tearDown();}
7ad8aaad7de029af685c55a90e1caaf1afa6f3e496a0a92c476da6c963571d18
getConflictResolver
protected ConflictResolver getConflictResolver()
{    return conflictResolver;}
d66b4f075929218ba12e19eb37185719831c990e674dcd1f001c3d65fb893015
assertResolveConflict
protected void assertResolveConflict(ResolutionNode expectedNode, ResolutionNode actualNode1, ResolutionNode actualNode2)
{    ResolutionNode resolvedNode = getConflictResolver().resolveConflict(actualNode1, actualNode2);    assertNotNull("Expected resolvable", resolvedNode);    assertEquals("Resolution node", expectedNode, resolvedNode);}
3552098988a268d2afcef395f92817971d551d5144b2ced6cbc4797aa326302c
createArtifact
protected Artifact createArtifact(String id, String version) throws InvalidVersionSpecificationException
{    return createArtifact(id, version, Artifact.SCOPE_COMPILE);}
3796194c7e9998ed4b7205d29ee49f392c9e1f296166570f5b0c9bc3f8855db9
createArtifact
protected Artifact createArtifact(String id, String version, String scope) throws InvalidVersionSpecificationException
{    return createArtifact(id, version, scope, null, false);}
dd0684c57db83a30ece5aedb5b286c5cb53ba249655822fd2cca3e3e73cf3e6e
createArtifact
protected Artifact createArtifact(String id, String version, String scope, String inheritedScope, boolean optional) throws InvalidVersionSpecificationException
{    VersionRange versionRange = VersionRange.createFromVersionSpec(version);    return artifactFactory.createDependencyArtifact(GROUP_ID, id, versionRange, "jar", null, scope, inheritedScope, optional);}
893129cdb888cade68722f2047533f806b0e143348477a22354f10672423dd4c
createResolutionNode
protected ResolutionNode createResolutionNode(Artifact Artifact)
{    return new ResolutionNode(Artifact, Collections.<ArtifactRepository>emptyList());}
6fe302b024e591b2d94185ff70b00d12fd3f8c1987db564523b28d4de2c6c587
createResolutionNode
protected ResolutionNode createResolutionNode(Artifact Artifact, ResolutionNode parent)
{    return new ResolutionNode(Artifact, Collections.<ArtifactRepository>emptyList(), parent);}
a72b97a48ef002f005a162ca0f77bd842e19f6e5e0c56359c179368819d75925
testDepth
public void testDepth()
{    ResolutionNode a1n = createResolutionNode(a1);    ResolutionNode b1n = createResolutionNode(b1);    ResolutionNode a2n = createResolutionNode(a2, b1n);    assertResolveConflict(a2n, a1n, a2n);}
4af50d4bdda527c80d1857b0d75c3836b7dab3bf6cf172b4ff9956243a88cbae
testDepthReversed
public void testDepthReversed()
{    ResolutionNode b1n = createResolutionNode(b1);    ResolutionNode a2n = createResolutionNode(a2, b1n);    ResolutionNode a1n = createResolutionNode(a1);    assertResolveConflict(a2n, a2n, a1n);}
99689aa686b597604bbe67752fcd809a44ce45c74ab5eb1aa483daa4318b2a05
testEqual
public void testEqual()
{    ResolutionNode a1n = createResolutionNode(a1);    ResolutionNode a2n = createResolutionNode(a2);    assertResolveConflict(a1n, a1n, a2n);}
aca3a446bb085370467741e824f5597197910d450cd525131bb11ed9578d91dc
testEqualReversed
public void testEqualReversed()
{    ResolutionNode a2n = createResolutionNode(a2);    ResolutionNode a1n = createResolutionNode(a1);    assertResolveConflict(a2n, a2n, a1n);}
a72b97a48ef002f005a162ca0f77bd842e19f6e5e0c56359c179368819d75925
testDepth
public void testDepth()
{    ResolutionNode a1n = createResolutionNode(a1);    ResolutionNode b1n = createResolutionNode(b1);    ResolutionNode a2n = createResolutionNode(a2, b1n);    assertResolveConflict(a1n, a1n, a2n);}
4af50d4bdda527c80d1857b0d75c3836b7dab3bf6cf172b4ff9956243a88cbae
testDepthReversed
public void testDepthReversed()
{    ResolutionNode b1n = createResolutionNode(b1);    ResolutionNode a2n = createResolutionNode(a2, b1n);    ResolutionNode a1n = createResolutionNode(a1);    assertResolveConflict(a1n, a2n, a1n);}
99689aa686b597604bbe67752fcd809a44ce45c74ab5eb1aa483daa4318b2a05
testEqual
public void testEqual()
{    ResolutionNode a1n = createResolutionNode(a1);    ResolutionNode a2n = createResolutionNode(a2);    assertResolveConflict(a1n, a1n, a2n);}
aca3a446bb085370467741e824f5597197910d450cd525131bb11ed9578d91dc
testEqualReversed
public void testEqualReversed()
{    ResolutionNode a2n = createResolutionNode(a2);    ResolutionNode a1n = createResolutionNode(a1);    assertResolveConflict(a2n, a2n, a1n);}
a72b97a48ef002f005a162ca0f77bd842e19f6e5e0c56359c179368819d75925
testDepth
public void testDepth()
{    ResolutionNode a1n = createResolutionNode(a1);    ResolutionNode b1n = createResolutionNode(b1);    ResolutionNode a2n = createResolutionNode(a2, b1n);    assertResolveConflict(a2n, a1n, a2n);}
4af50d4bdda527c80d1857b0d75c3836b7dab3bf6cf172b4ff9956243a88cbae
testDepthReversed
public void testDepthReversed()
{    ResolutionNode b1n = createResolutionNode(b1);    ResolutionNode a2n = createResolutionNode(a2, b1n);    ResolutionNode a1n = createResolutionNode(a1);    assertResolveConflict(a2n, a2n, a1n);}
99689aa686b597604bbe67752fcd809a44ce45c74ab5eb1aa483daa4318b2a05
testEqual
public void testEqual()
{    ResolutionNode a1n = createResolutionNode(a1);    ResolutionNode a2n = createResolutionNode(a2);    assertResolveConflict(a2n, a1n, a2n);}
aca3a446bb085370467741e824f5597197910d450cd525131bb11ed9578d91dc
testEqualReversed
public void testEqualReversed()
{    ResolutionNode a2n = createResolutionNode(a2);    ResolutionNode a1n = createResolutionNode(a1);    assertResolveConflict(a2n, a2n, a1n);}
a72b97a48ef002f005a162ca0f77bd842e19f6e5e0c56359c179368819d75925
testDepth
public void testDepth()
{    ResolutionNode a1n = createResolutionNode(a1);    ResolutionNode b1n = createResolutionNode(b1);    ResolutionNode a2n = createResolutionNode(a2, b1n);    assertResolveConflict(a1n, a1n, a2n);}
4af50d4bdda527c80d1857b0d75c3836b7dab3bf6cf172b4ff9956243a88cbae
testDepthReversed
public void testDepthReversed()
{    ResolutionNode b1n = createResolutionNode(b1);    ResolutionNode a2n = createResolutionNode(a2, b1n);    ResolutionNode a1n = createResolutionNode(a1);    assertResolveConflict(a1n, a2n, a1n);}
99689aa686b597604bbe67752fcd809a44ce45c74ab5eb1aa483daa4318b2a05
testEqual
public void testEqual()
{    ResolutionNode a1n = createResolutionNode(a1);    ResolutionNode a2n = createResolutionNode(a2);    assertResolveConflict(a1n, a1n, a2n);}
aca3a446bb085370467741e824f5597197910d450cd525131bb11ed9578d91dc
testEqualReversed
public void testEqualReversed()
{    ResolutionNode a2n = createResolutionNode(a2);    ResolutionNode a1n = createResolutionNode(a1);    assertResolveConflict(a1n, a2n, a1n);}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();    source = new Source();    artifactFactory = (ArtifactFactory) lookup(ArtifactFactory.ROLE);    artifactCollector = lookup(LegacyArtifactCollector.class);    projectArtifact = createArtifactSpec("project", "1.0", null);}
68bbf6c94fbad4862990669ea582b65c28678087c2377b2c3fb0948d54293af4
tearDown
protected void tearDown() throws Exception
{    artifactCollector = null;    artifactFactory = null;    super.tearDown();}
ac137f40e25c19747e2bc27d12c084c1e3417efe5cf59d3132b0df7c52d94157
disabledtestCircularDependencyNotIncludingCurrentProject
public void disabledtestCircularDependencyNotIncludingCurrentProject() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec b = a.addDependency("b", "1.0");    b.addDependency("a", "1.0");    try {        collect(a);        fail("Should have failed on cyclic dependency not involving project");    } catch (CyclicDependencyException expected) {        assertTrue(true);    }}
d23e58082e95e38e905331658db97de6a6997708941e0a9035bc9dcc5b36b69e
disabledtestCircularDependencyIncludingCurrentProject
public void disabledtestCircularDependencyIncludingCurrentProject() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec b = a.addDependency("b", "1.0");    b.addDependency("project", "1.0");    try {        collect(a);        fail("Should have failed on cyclic dependency involving project");    } catch (CyclicDependencyException expected) {        assertTrue(true);    }}
c6984281546b56f233f699c578c6551013294d152c516ced62a08b76730fb47d
testResolveWithFilter
public void testResolveWithFilter() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec b = a.addDependency("b", "1.0");    ArtifactSpec c = a.addDependency("c", "3.0");    b.addDependency("c", "2.0");    ArtifactSpec d = b.addDependency("d", "4.0");    ArtifactResolutionResult res = collect(a);    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, b.artifact, c.artifact, d.artifact }), res.getArtifacts());    ArtifactFilter filter = new ExclusionSetFilter(new String[] { "b" });    res = collect(a, filter);    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, c.artifact }), res.getArtifacts());}
54a1a60f4d5aa515812970effaf4be4281283023be9258de725c93dd8c6a9ab3
testResolveCorrectDependenciesWhenDifferentDependenciesOnNearest
public void testResolveCorrectDependenciesWhenDifferentDependenciesOnNearest() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec b = a.addDependency("b", "1.0");    ArtifactSpec c2 = b.addDependency("c", "2.0");    c2.addDependency("d", "1.0");    ArtifactSpec e = createArtifactSpec("e", "1.0");    ArtifactSpec c1 = e.addDependency("c", "1.0");    ArtifactSpec f = c1.addDependency("f", "1.0");    ArtifactResolutionResult res = collect(createSet(new Object[] { a.artifact, e.artifact }));    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, b.artifact, e.artifact, c1.artifact, f.artifact }), res.getArtifacts());    assertEquals("Check version", "1.0", getArtifact("c", res.getArtifacts()).getVersion());}
5b56459f36ca940d7fdd48641761354f3a261ca59d267435bcce61d33e2f7342
disabledtestResolveCorrectDependenciesWhenDifferentDependenciesOnNewest
public void disabledtestResolveCorrectDependenciesWhenDifferentDependenciesOnNewest() throws ArtifactResolutionException, InvalidVersionSpecificationException
{        ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec b = a.addDependency("b", "1.0");    ArtifactSpec c2 = b.addDependency("c", "2.0");    ArtifactSpec d = c2.addDependency("d", "1.0");    ArtifactSpec e = createArtifactSpec("e", "1.0");    ArtifactSpec c1 = e.addDependency("c", "1.0");    c1.addDependency("f", "1.0");    ArtifactResolutionResult res = collect(createSet(new Object[] { a.artifact, e.artifact }));    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, b.artifact, e.artifact, c2.artifact, d.artifact }), res.getArtifacts());    assertEquals("Check version", "2.0", getArtifact("c", res.getArtifacts()).getVersion());}
0bcd5306031663c4e5710ce7b74bc26433452c3844fdcc4c1a4ef135a1064374
disabledtestResolveCorrectDependenciesWhenDifferentDependenciesOnNewestVersionReplaced
public void disabledtestResolveCorrectDependenciesWhenDifferentDependenciesOnNewestVersionReplaced() throws ArtifactResolutionException, InvalidVersionSpecificationException
{        ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec b1 = a.addDependency("b", "1.0");    ArtifactSpec c = a.addDependency("c", "1.0");    ArtifactSpec d2 = b1.addDependency("d", "2.0");    d2.addDependency("h", "1.0");    ArtifactSpec d1 = c.addDependency("d", "1.0");    ArtifactSpec b2 = c.addDependency("b", "2.0");    ArtifactSpec e = b2.addDependency("e", "1.0");    ArtifactSpec g = d1.addDependency("g", "1.0");    ArtifactResolutionResult res = collect(createSet(new Object[] { a.artifact }));    Object[] artifacts = new Object[] { a.artifact, c.artifact, d1.artifact, b2.artifact, e.artifact, g.artifact };    assertEquals("Check artifact list", createSet(artifacts), res.getArtifacts());    assertEquals("Check version", "1.0", getArtifact("d", res.getArtifacts()).getVersion());    assertEquals("Check version", "2.0", getArtifact("b", res.getArtifacts()).getVersion());}
7dc031296bc67f4419b49ec78cc2cfabda61c395bf6fccb331dc8fc36fc88ee1
testResolveNearestNewestIsNearest
public void testResolveNearestNewestIsNearest() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec b = a.addDependency("b", "1.0");    ArtifactSpec c = a.addDependency("c", "3.0");    b.addDependency("c", "2.0");    ArtifactResolutionResult res = collect(a);    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, b.artifact, c.artifact }), res.getArtifacts());    assertEquals("Check version", "3.0", getArtifact("c", res.getArtifacts()).getVersion());}
0524aebad03649ce05442bc70ee6ceefccb2f845e3d6bd5005c6e5a24c267285
testResolveNearestOldestIsNearest
public void testResolveNearestOldestIsNearest() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec b = a.addDependency("b", "1.0");    ArtifactSpec c = a.addDependency("c", "2.0");    b.addDependency("c", "3.0");    ArtifactResolutionResult res = collect(a);    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, b.artifact, c.artifact }), res.getArtifacts());    assertEquals("Check version", "2.0", getArtifact("c", res.getArtifacts()).getVersion());}
75e4db5e3e17782a8ae6ab915c0236b32eabf22e9a1a99cf29622cc23609bfec
testResolveLocalNewestIsLocal
public void testResolveLocalNewestIsLocal() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    a.addDependency("b", "2.0");    ArtifactSpec b = createArtifactSpec("b", "3.0");    ArtifactResolutionResult res = collect(createSet(new Object[] { a.artifact, b.artifact }));    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, b.artifact }), res.getArtifacts());    assertEquals("Check version", "3.0", getArtifact("b", res.getArtifacts()).getVersion());}
c1711fb2d9331e045bdebd41bc46f6da5bb0ea3caf0185a68ef75217837e7126
testResolveLocalOldestIsLocal
public void testResolveLocalOldestIsLocal() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    a.addDependency("b", "3.0");    ArtifactSpec b = createArtifactSpec("b", "2.0");    ArtifactResolutionResult res = collect(createSet(new Object[] { a.artifact, b.artifact }));    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, b.artifact }), res.getArtifacts());    assertEquals("Check version", "2.0", getArtifact("b", res.getArtifacts()).getVersion());}
81334acc98956be274fc0dc572222e822fa74b1a35b45f4a6b25defc263cd8f6
testResolveLocalWithNewerVersionButLesserScope
public void testResolveLocalWithNewerVersionButLesserScope() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("commons-logging", "1.0");    a.addDependency("junit", "3.7");    ArtifactSpec b = createArtifactSpec("junit", "3.8.1", Artifact.SCOPE_TEST);    ArtifactResolutionResult res = collect(createSet(new Object[] { a.artifact, b.artifact }));    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, b.artifact }), res.getArtifacts());    assertEquals("Check version", "3.8.1", getArtifact("junit", res.getArtifacts()).getVersion());    assertEquals("Check artifactScope", Artifact.SCOPE_TEST, getArtifact("junit", res.getArtifacts()).getScope());}
db4b61bb8306ef20633543cb60eded2a3426a493c96015257476b8cd9deb618c
testResolveLocalWithNewerVersionButLesserScopeResolvedFirst
public void testResolveLocalWithNewerVersionButLesserScopeResolvedFirst() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec b = createArtifactSpec("junit", "3.8.1", Artifact.SCOPE_TEST);    ArtifactSpec a = createArtifactSpec("commons-logging", "1.0");    a.addDependency("junit", "3.7");    ArtifactResolutionResult res = collect(createSet(new Object[] { a.artifact, b.artifact }));    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, b.artifact }), res.getArtifacts());    assertEquals("Check version", "3.8.1", getArtifact("junit", res.getArtifacts()).getVersion());    assertEquals("Check artifactScope", Artifact.SCOPE_TEST, getArtifact("junit", res.getArtifacts()).getScope());}
a5cb184b6e7a0a4535135be6e0572d1b106680f41150ae750f1a9d48d29a1a69
testResolveNearestWithRanges
public void testResolveNearestWithRanges() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec b = a.addDependency("b", "1.0");    ArtifactSpec c = a.addDependency("c", "2.0");    b.addDependency("c", "[1.0,3.0]");    ArtifactResolutionResult res = collect(a);    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, b.artifact, c.artifact }), res.getArtifacts());    assertEquals("Check version", "2.0", getArtifact("c", res.getArtifacts()).getVersion());}
c7fe6dfccf6b6bea76e9bccec7b474f2f9f2c841391f81d01bf71b3fea4500bb
testResolveRangeWithManagedVersion
public void testResolveRangeWithManagedVersion() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec b = a.addDependency("b", "[1.0,3.0]");    ArtifactSpec managedB = createArtifactSpec("b", "5.0");    ArtifactResolutionResult res = collect(a, managedB.artifact);    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, managedB.artifact }), res.getArtifacts());    assertEquals("Check version", "5.0", getArtifact("b", res.getArtifacts()).getVersion());}
154ed5c3d14b5ffacb3d969a0b9bb91eb639b1dea942b6b96e344642f2391c8a
testCompatibleRanges
public void testCompatibleRanges() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec b = a.addDependency("b", "1.0");    a.addDependency("c", "[2.0,2.5]");    b.addDependency("c", "[1.0,3.0]");    ArtifactSpec c = createArtifactSpec("c", "2.5");    ArtifactResolutionResult res = collect(a);    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, b.artifact, c.artifact }), res.getArtifacts());    assertEquals("Check version", "2.5", getArtifact("c", res.getArtifacts()).getVersion());}
0fbf649c96f9f5289a55e978222f2d599131fc5158550d65177f0153856ca4d7
testIncompatibleRanges
public void testIncompatibleRanges() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec b = a.addDependency("b", "1.0");    a.addDependency("c", "[2.4,3.0]");    b.addDependency("c", "[1.0,2.0]");    ArtifactResolutionResult res = collect(a);    assertTrue(res.hasVersionRangeViolations());}
c7ea9fcab7b874d197d8077fbaa67b0ed12c6b03992692db64c7941728d39393
testUnboundedRangeWhenVersionUnavailable
public void testUnboundedRangeWhenVersionUnavailable() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec b = a.addDependency("b", "1.0");    a.addDependency("c", "[2.0,]");    b.addDependency("c", "[1.0,]");    ArtifactResolutionResult res = collect(a);    assertTrue(res.hasVersionRangeViolations());}
c4099ee8c63ef8926db19110e38009fd8905e1a2f20757880d70bada89f27e9d
testUnboundedRangeBelowLastRelease
public void testUnboundedRangeBelowLastRelease() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    createArtifactSpec("c", "1.5");    ArtifactSpec c = createArtifactSpec("c", "2.0");    createArtifactSpec("c", "1.1");    a.addDependency("c", "[1.0,)");    ArtifactResolutionResult res = collect(a);    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, c.artifact }), res.getArtifacts());    assertEquals("Check version", "2.0", getArtifact("c", res.getArtifacts()).getVersion());}
0da8f97c52460a20809c8dcd95a66c5dc0140b40a2fa0d96017d4040feaf5e5b
testUnboundedRangeAboveLastRelease
public void testUnboundedRangeAboveLastRelease() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    createArtifactSpec("c", "2.0");    a.addDependency("c", "[10.0,)");    ArtifactResolutionResult res = collect(a);    assertTrue(res.hasVersionRangeViolations());}
c1057ac9ef0c13da63322689f6b0272ac6028213f42728410b0e66fc3cc4ec99
testResolveManagedVersion
public void testResolveManagedVersion() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    a.addDependency("b", "3.0", Artifact.SCOPE_RUNTIME);    Artifact managedVersion = createArtifactSpec("b", "5.0").artifact;    Artifact modifiedB = createArtifactSpec("b", "5.0", Artifact.SCOPE_RUNTIME).artifact;    ArtifactResolutionResult res = collect(a, managedVersion);    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, modifiedB }), res.getArtifacts());}
ce24dff9dda1ec60d3bf9172ff4c7e5886ba9434fe2d3f2c446c135a3cc06332
testCollectChangesVersionOfOriginatingArtifactIfInDependencyManagementHasDifferentVersion
public void testCollectChangesVersionOfOriginatingArtifactIfInDependencyManagementHasDifferentVersion() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    Artifact artifact = projectArtifact.artifact;    Artifact managedVersion = createArtifactSpec(artifact.getArtifactId(), "2.0").artifact;    ArtifactResolutionResult result = collect(a, managedVersion);    assertEquals("collect has modified version in originating artifact", "1.0", artifact.getVersion());    Artifact resolvedArtifact = result.getArtifacts().iterator().next();    assertEquals("Resolved version don't match original artifact version", "1.0", resolvedArtifact.getVersion());}
50d20615bdb4359140bc75f69d0b8f0262781a6d92f6668cebc0339675b2bfaa
testResolveCompileScopeOverTestScope
public void testResolveCompileScopeOverTestScope() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec c = createArtifactSpec("c", "3.0", Artifact.SCOPE_TEST);    a.addDependency("c", "2.0", Artifact.SCOPE_COMPILE);    Artifact modifiedC = createArtifactSpec("c", "3.0", Artifact.SCOPE_COMPILE).artifact;    ArtifactResolutionResult res = collect(createSet(new Object[] { a.artifact, c.artifact }));    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, modifiedC }), res.getArtifacts());    Artifact artifact = getArtifact("c", res.getArtifacts());            assertEquals("Check artifactScope", Artifact.SCOPE_TEST, artifact.getScope());}
bc3d1e1240357578954176a0eab73cbcd77e10b15d37e46297fefebd14da10f6
testResolveRuntimeScopeOverTestScope
public void testResolveRuntimeScopeOverTestScope() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec c = createArtifactSpec("c", "3.0", Artifact.SCOPE_TEST);    a.addDependency("c", "2.0", Artifact.SCOPE_RUNTIME);    Artifact modifiedC = createArtifactSpec("c", "3.0", Artifact.SCOPE_RUNTIME).artifact;    ArtifactResolutionResult res = collect(createSet(new Object[] { a.artifact, c.artifact }));    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, modifiedC }), res.getArtifacts());    Artifact artifact = getArtifact("c", res.getArtifacts());            assertEquals("Check artifactScope", Artifact.SCOPE_TEST, artifact.getScope());}
d2af83e46244575cf559284892372561a72bfb7d361e096dc6de695c021e2edc
testResolveCompileScopeOverRuntimeScope
public void testResolveCompileScopeOverRuntimeScope() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec root = createArtifactSpec("root", "1.0");    ArtifactSpec a = root.addDependency("a", "1.0");    root.addDependency("c", "3.0", Artifact.SCOPE_RUNTIME);    a.addDependency("c", "2.0", Artifact.SCOPE_COMPILE);    Artifact modifiedC = createArtifactSpec("c", "3.0", Artifact.SCOPE_COMPILE).artifact;    ArtifactResolutionResult res = collect(createSet(new Object[] { root.artifact }));    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, root.artifact, modifiedC }), res.getArtifacts());    Artifact artifact = getArtifact("c", res.getArtifacts());    assertEquals("Check artifactScope", Artifact.SCOPE_COMPILE, artifact.getScope());}
cc0c3633c8eab661a70f4d3ab2c03192faef0f70559d3d0afd64373af171d77d
testResolveCompileScopeOverProvidedScope
public void testResolveCompileScopeOverProvidedScope() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec c = createArtifactSpec("c", "3.0", Artifact.SCOPE_PROVIDED);    a.addDependency("c", "2.0", Artifact.SCOPE_COMPILE);    Artifact modifiedC = createArtifactSpec("c", "3.0", Artifact.SCOPE_COMPILE).artifact;    ArtifactResolutionResult res = collect(createSet(new Object[] { a.artifact, c.artifact }));    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, modifiedC }), res.getArtifacts());    Artifact artifact = getArtifact("c", res.getArtifacts());            assertEquals("Check artifactScope", Artifact.SCOPE_PROVIDED, artifact.getScope());}
f96e2f130d1f7a84cae20b9ad02f65daa748550296cd9278f5c533d2af64c9eb
testResolveRuntimeScopeOverProvidedScope
public void testResolveRuntimeScopeOverProvidedScope() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec c = createArtifactSpec("c", "3.0", Artifact.SCOPE_PROVIDED);    a.addDependency("c", "2.0", Artifact.SCOPE_RUNTIME);    Artifact modifiedC = createArtifactSpec("c", "3.0", Artifact.SCOPE_RUNTIME).artifact;    ArtifactResolutionResult res = collect(createSet(new Object[] { a.artifact, c.artifact }));    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, modifiedC }), res.getArtifacts());    Artifact artifact = getArtifact("c", res.getArtifacts());            assertEquals("Check artifactScope", Artifact.SCOPE_PROVIDED, artifact.getScope());}
f703c7a3b00f39e4d5f54da804585a7311d9a505caa7dce543c1e6b5d748f556
testProvidedScopeNotTransitive
public void testProvidedScopeNotTransitive() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0", Artifact.SCOPE_PROVIDED);    ArtifactSpec b = createArtifactSpec("b", "1.0");    b.addDependency("c", "3.0", Artifact.SCOPE_PROVIDED);    ArtifactResolutionResult res = collect(createSet(new Object[] { a.artifact, b.artifact }));    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, b.artifact }), res.getArtifacts());}
940fed3dc603dc57aedf28a6f6fa3220ee33eeae7e167e40b29da27100e9d4df
testOptionalNotTransitive
public void testOptionalNotTransitive() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec b = createArtifactSpec("b", "1.0");    b.addDependency("c", "3.0", true);    ArtifactResolutionResult res = collect(createSet(new Object[] { a.artifact, b.artifact }));    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, b.artifact }), res.getArtifacts());}
dbf01cedd4073c82d80cda2a6e3e0e28e97c647527f926d2576850d36ca94acd
testOptionalIncludedAtRoot
public void testOptionalIncludedAtRoot() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec b = createArtifactSpec("b", "1.0", true);    ArtifactResolutionResult res = collect(createSet(new Object[] { a.artifact, b.artifact }));    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, b.artifact }), res.getArtifacts());}
dde3da6a9293214214261e406feb07febc9a59cd468b1e79c4cbf8f718864b74
testScopeUpdate
public void testScopeUpdate() throws InvalidVersionSpecificationException, ArtifactResolutionException
{    /* farthest = compile */    checkScopeUpdate(Artifact.SCOPE_COMPILE, Artifact.SCOPE_COMPILE, Artifact.SCOPE_COMPILE);    checkScopeUpdate(Artifact.SCOPE_COMPILE, Artifact.SCOPE_PROVIDED, Artifact.SCOPE_COMPILE);    checkScopeUpdate(Artifact.SCOPE_COMPILE, Artifact.SCOPE_RUNTIME, Artifact.SCOPE_COMPILE);    checkScopeUpdate(Artifact.SCOPE_COMPILE, Artifact.SCOPE_SYSTEM, Artifact.SCOPE_COMPILE);    checkScopeUpdate(Artifact.SCOPE_COMPILE, Artifact.SCOPE_TEST, Artifact.SCOPE_COMPILE);    /* farthest = provided */    checkScopeUpdate(Artifact.SCOPE_PROVIDED, Artifact.SCOPE_COMPILE, Artifact.SCOPE_COMPILE);    checkScopeUpdate(Artifact.SCOPE_PROVIDED, Artifact.SCOPE_PROVIDED, Artifact.SCOPE_PROVIDED);    checkScopeUpdate(Artifact.SCOPE_PROVIDED, Artifact.SCOPE_RUNTIME, Artifact.SCOPE_RUNTIME);    checkScopeUpdate(Artifact.SCOPE_PROVIDED, Artifact.SCOPE_SYSTEM, Artifact.SCOPE_SYSTEM);    checkScopeUpdate(Artifact.SCOPE_PROVIDED, Artifact.SCOPE_TEST, Artifact.SCOPE_TEST);    /* farthest = runtime */    checkScopeUpdate(Artifact.SCOPE_RUNTIME, Artifact.SCOPE_COMPILE, Artifact.SCOPE_COMPILE);    checkScopeUpdate(Artifact.SCOPE_RUNTIME, Artifact.SCOPE_PROVIDED, Artifact.SCOPE_RUNTIME);    checkScopeUpdate(Artifact.SCOPE_RUNTIME, Artifact.SCOPE_RUNTIME, Artifact.SCOPE_RUNTIME);    checkScopeUpdate(Artifact.SCOPE_RUNTIME, Artifact.SCOPE_SYSTEM, Artifact.SCOPE_SYSTEM);    checkScopeUpdate(Artifact.SCOPE_RUNTIME, Artifact.SCOPE_TEST, Artifact.SCOPE_RUNTIME);    /* farthest = system */    checkScopeUpdate(Artifact.SCOPE_SYSTEM, Artifact.SCOPE_COMPILE, Artifact.SCOPE_COMPILE);    checkScopeUpdate(Artifact.SCOPE_SYSTEM, Artifact.SCOPE_PROVIDED, Artifact.SCOPE_PROVIDED);    checkScopeUpdate(Artifact.SCOPE_SYSTEM, Artifact.SCOPE_RUNTIME, Artifact.SCOPE_RUNTIME);    checkScopeUpdate(Artifact.SCOPE_SYSTEM, Artifact.SCOPE_SYSTEM, Artifact.SCOPE_SYSTEM);    checkScopeUpdate(Artifact.SCOPE_SYSTEM, Artifact.SCOPE_TEST, Artifact.SCOPE_TEST);    /* farthest = test */    checkScopeUpdate(Artifact.SCOPE_TEST, Artifact.SCOPE_COMPILE, Artifact.SCOPE_COMPILE);    checkScopeUpdate(Artifact.SCOPE_TEST, Artifact.SCOPE_PROVIDED, Artifact.SCOPE_PROVIDED);    checkScopeUpdate(Artifact.SCOPE_TEST, Artifact.SCOPE_RUNTIME, Artifact.SCOPE_RUNTIME);    checkScopeUpdate(Artifact.SCOPE_TEST, Artifact.SCOPE_SYSTEM, Artifact.SCOPE_SYSTEM);    checkScopeUpdate(Artifact.SCOPE_TEST, Artifact.SCOPE_TEST, Artifact.SCOPE_TEST);}
cb77d24e03611e3dbe4f1f3e42496ec392b086455b00846ef9cae4db6d95daac
checkScopeUpdate
private void checkScopeUpdate(String farthestScope, String nearestScope, String expectedScope) throws ArtifactResolutionException, InvalidVersionSpecificationException
{    checkScopeUpdateDirect(farthestScope, nearestScope, expectedScope);    checkScopeUpdateTransitively(farthestScope, nearestScope, expectedScope);}
7b03da1d90d589bdcd67e53fa205e491ab813b25083c63aee618f99bb54f4201
checkScopeUpdateTransitively
private void checkScopeUpdateTransitively(String farthestScope, String nearestScope, String expectedScope) throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec b = createArtifactSpec("b", "1.0", nearestScope);    ArtifactSpec c = createArtifactSpec("c", "1.0");    a.addDependency(c);    ArtifactSpec dNearest = createArtifactSpec("d", "2.0");    b.addDependency(dNearest);    ArtifactSpec dFarthest = createArtifactSpec("d", "3.0", farthestScope);    c.addDependency(dFarthest);    /* system and provided dependencies are not transitive */    if (!Artifact.SCOPE_SYSTEM.equals(nearestScope) && !Artifact.SCOPE_PROVIDED.equals(nearestScope)) {        checkScopeUpdate(a, b, expectedScope, "2.0");    }}
a3f6f5b8ac2cc2cb4a9e778bd2c83abfc780cbceb1c694846f42785fdec77e0a
checkScopeUpdateDirect
private void checkScopeUpdateDirect(String farthestScope, String nearestScope, String expectedScope) throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec b = createArtifactSpec("b", "1.0");    ArtifactSpec c = createArtifactSpec("c", "1.0");    a.addDependency(c);    ArtifactSpec dNearest = createArtifactSpec("d", "2.0", nearestScope);    b.addDependency(dNearest);    ArtifactSpec dFarthest = createArtifactSpec("d", "3.0", farthestScope);    c.addDependency(dFarthest);    checkScopeUpdate(a, b, expectedScope, "2.0");}
52609cfb38d845f39a230a07d5de50bc589d970ec2d3e8a372cfc09261d3a6f5
checkScopeUpdate
private void checkScopeUpdate(ArtifactSpec a, ArtifactSpec b, String expectedScope, String expectedVersion) throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ScopeArtifactFilter filter;    if (Artifact.SCOPE_PROVIDED.equals(expectedScope)) {        filter = new ScopeArtifactFilter(Artifact.SCOPE_COMPILE);    } else if (Artifact.SCOPE_SYSTEM.equals(expectedScope)) {        filter = new ScopeArtifactFilter(Artifact.SCOPE_COMPILE);    } else {        filter = new ScopeArtifactFilter(expectedScope);    }    ArtifactResolutionResult res = collect(createSet(new Object[] { a.artifact, b.artifact }), filter);    Artifact artifact = getArtifact("d", res.getArtifacts());    assertNotNull("MNG-1895 Dependency was not added to resolution", artifact);    assertEquals("Check artifactScope", expectedScope, artifact.getScope());    assertEquals("Check version", expectedVersion, artifact.getVersion());    ArtifactSpec d = createArtifactSpec("d", "1.0");    res = collect(createSet(new Object[] { a.artifact, b.artifact, d.artifact }), filter);    artifact = getArtifact("d", res.getArtifacts());    assertNotNull("MNG-1895 Dependency was not added to resolution", artifact);    assertEquals("Check artifactScope", d.artifact.getScope(), artifact.getScope());    assertEquals("Check version", "1.0", artifact.getVersion());}
cd7dd851d83dabe3fdaa8e682fae984214f7a37fb4c00294aee4f6a409c6ae75
disabledtestOptionalNotTransitiveButVersionIsInfluential
public void disabledtestOptionalNotTransitiveButVersionIsInfluential() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec b = createArtifactSpec("b", "1.0");    b.addDependency("c", "3.0", true);    ArtifactSpec d = a.addDependency("d", "1.0");    ArtifactSpec e = d.addDependency("e", "1.0");    e.addDependency("c", "2.0");    ArtifactSpec c = createArtifactSpec("c", "3.0");    ArtifactResolutionResult res = collect(createSet(new Object[] { a.artifact, b.artifact }));    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, b.artifact, c.artifact, d.artifact, e.artifact }), res.getArtifacts());    Artifact artifact = getArtifact("c", res.getArtifacts());    assertEquals("Check version", "3.0", artifact.getVersion());}
6b49da5c263a76d78b1631375c665dcc629548f1310c29c48110732442e367d2
testTestScopeNotTransitive
public void testTestScopeNotTransitive() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0", Artifact.SCOPE_TEST);    ArtifactSpec b = createArtifactSpec("b", "1.0");    b.addDependency("c", "3.0", Artifact.SCOPE_TEST);    ArtifactResolutionResult res = collect(createSet(new Object[] { a.artifact, b.artifact }));    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, b.artifact }), res.getArtifacts());}
f20539e9c78d56ff10f0c5e529423016c60c883656f707ed7ae7eb23280693ed
testSnapshotNotIncluded
public void testSnapshotNotIncluded() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    a.addDependency("b", "[1.0,)");    createArtifactSpec("b", "1.0-SNAPSHOT");    ArtifactResolutionResult res = collect(a);    assertTrue(res.hasVersionRangeViolations());/*         * try { ArtifactResolutionResult res = collect( a ); fail( "Expected b not to resolve: " + res ); } catch (         * OverConstrainedVersionException e ) { assertTrue( e.getMessage().indexOf( "[1.0-SNAPSHOT]" ) <         * e.getMessage().indexOf( "[1.0,)" ) ); }         */}
bcc13953f978d429ce8f4b65e9dc0bd5cb756f62209b51834f3f903ef537273f
testOverConstrainedVersionException
public void testOverConstrainedVersionException() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    a.addDependency("b", "[1.0, 2.0)");    a.addDependency("c", "[3.3.0,4.0.0)");    ArtifactSpec b = createArtifactSpec("b", "1.0.0");    b.addDependency("c", "3.3.0-v3346");    ArtifactSpec c = createArtifactSpec("c", "3.2.1-v3235e");    try {        ArtifactResolutionResult res = collect(createSet(new Object[] { a.artifact }));    } catch (OverConstrainedVersionException e) {        assertTrue("Versions unordered", e.getMessage().contains("[3.2.1-v3235e, 3.3.0-v3346]"));        assertTrue("DependencyTrail unresolved", e.getMessage().contains("Path to dependency:"));    }}
e9ee9f87ef6dc5d13ca84a24d7ded9c9bc8eb24786ee728fd496d18db4145f36
getArtifact
private Artifact getArtifact(String id, Set artifacts)
{    for (Object artifact : artifacts) {        Artifact a = (Artifact) artifact;        if (a.getArtifactId().equals(id) && a.getGroupId().equals(GROUP_ID)) {            return a;        }    }    return null;}
78b419d135ffe466093b04100001d578e887a5f3379618062012d1fe532a4059
collect
private ArtifactResolutionResult collect(Set<Artifact> artifacts) throws ArtifactResolutionException
{    return collect(artifacts, null);}
52dc4e1d3edb38045f7808cee1c793cbc29314603aff2296761549211fb581bd
collect
private ArtifactResolutionResult collect(Set<Artifact> artifacts, ArtifactFilter filter) throws ArtifactResolutionException
{    return artifactCollector.collect(artifacts, projectArtifact.artifact, null, null, null, source, filter, Collections.<ResolutionListener>emptyList(), null);}
e370dc4d33ff24403be5255c935c5dc0293fbbd713c0ea11722f1e453c68d38f
collect
private ArtifactResolutionResult collect(ArtifactSpec a) throws ArtifactResolutionException
{    return artifactCollector.collect(Collections.singleton(a.artifact), projectArtifact.artifact, null, null, null, source, null, Collections.<ResolutionListener>emptyList(), null);}
e5c8ce2dcb0f699c3b6c7fb5dc107360c19d5067882b808033ba8ca6b3019071
collect
private ArtifactResolutionResult collect(ArtifactSpec a, ArtifactFilter filter) throws ArtifactResolutionException
{    return artifactCollector.collect(Collections.singleton(a.artifact), projectArtifact.artifact, null, null, null, source, filter, Collections.<ResolutionListener>emptyList(), null);}
6313ca9fcf7a91fa6e19c53b7a54b05ecf9527f6799072e7218797a00a3bbd46
collect
private ArtifactResolutionResult collect(ArtifactSpec a, Artifact managedVersion) throws ArtifactResolutionException
{    Map managedVersions = Collections.singletonMap(managedVersion.getDependencyConflictId(), managedVersion);    return artifactCollector.collect(Collections.singleton(a.artifact), projectArtifact.artifact, managedVersions, null, null, source, null, Collections.<ResolutionListener>emptyList(), null);}
304a9ee44d609d78d772538940634b27764d320a37897e83c6061cb73d6b5018
createArtifactSpec
private ArtifactSpec createArtifactSpec(String id, String version) throws InvalidVersionSpecificationException
{    return createArtifactSpec(id, version, Artifact.SCOPE_COMPILE);}
bf1e67038c2854f5d21d028725707fb29ba03bc9afc651f26fd1c8b318d01bfb
createArtifactSpec
private ArtifactSpec createArtifactSpec(String id, String version, boolean optional) throws InvalidVersionSpecificationException
{    return createArtifactSpec(id, version, Artifact.SCOPE_COMPILE, null, optional);}
59a758069d1e2dc504a14b426b0158977d019ce102dde1a3bbb240b0c795f1ec
createArtifactSpec
private ArtifactSpec createArtifactSpec(String id, String version, String scope) throws InvalidVersionSpecificationException
{    return createArtifactSpec(id, version, scope, null, false);}
de602dff4393db6e8bbb23610a3e64d88db09bc631e2fe69dbfcdb9315602b5e
createArtifactSpec
private ArtifactSpec createArtifactSpec(String id, String version, String scope, String inheritedScope, boolean optional) throws InvalidVersionSpecificationException
{    VersionRange versionRange = VersionRange.createFromVersionSpec(version);    Artifact artifact = artifactFactory.createDependencyArtifact(GROUP_ID, id, versionRange, "jar", null, scope, inheritedScope, optional);    ArtifactSpec spec = null;    if (artifact != null) {        spec = new ArtifactSpec();        spec.artifact = artifact;        source.addArtifact(spec);    }    return spec;}
933f90e838d5d701e4ad6edeeca851b55136595a5336d595bfa6c7ed6374fe25
createSet
private static Set<Artifact> createSet(Object[] x)
{    return new LinkedHashSet(Arrays.asList(x));}
d19493b06cbb4689d0fba70cb3abe93620d7ca86e52c17f6947a601757e83ffd
addDependency
public ArtifactSpec addDependency(String id, String version) throws InvalidVersionSpecificationException
{    return addDependency(id, version, Artifact.SCOPE_COMPILE);}
fec1c1dfd1616d4717141e53c386acae098f8f0d1ebfdb5e08206c0fb20e9937
addDependency
public ArtifactSpec addDependency(String id, String version, String scope) throws InvalidVersionSpecificationException
{    return addDependency(id, version, scope, false);}
80e6c25482c8d525a735767391cd183799ced8f47c27dc33026485f8e5daf2ae
addDependency
private ArtifactSpec addDependency(ArtifactSpec dep) throws InvalidVersionSpecificationException
{    if (dep != null) {        dependencies.add(dep.artifact);    }    return dep;}
01fcb45dd212ea287055a690620723b9c4c95e044d31d4bab21f0e28ca63917c
addDependency
private ArtifactSpec addDependency(String id, String version, String scope, boolean optional) throws InvalidVersionSpecificationException
{    ArtifactSpec dep = createArtifactSpec(id, version, scope, artifact.getScope(), optional);    return addDependency(dep);}
aafcb6272050373126c2b96ea963024e94a8e69226a4dd7540ca0f66f3ee9bd4
addDependency
public ArtifactSpec addDependency(String id, String version, boolean optional) throws InvalidVersionSpecificationException
{    return addDependency(id, version, Artifact.SCOPE_COMPILE, optional);}
5bba400f6603b67e47f7e66643840fc70b026b0c24e45f5186f68b7b6868d426
retrieve
public ResolutionGroup retrieve(Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories) throws ArtifactMetadataRetrievalException
{    String key = getKey(artifact);    ArtifactSpec a = (ArtifactSpec) artifacts.get(key);    try {        return new ResolutionGroup(artifact, createArtifacts(artifactFactory, a.dependencies, artifact.getScope(), artifact.getDependencyFilter()), Collections.EMPTY_LIST);    } catch (InvalidVersionSpecificationException e) {        throw new ArtifactMetadataRetrievalException("Invalid version creating artifacts", e, artifact);    }}
ae962142a76810bf3b114f8f36e1824d3d6752a66f3456c18577abd707073c63
getKey
private String getKey(Artifact artifact)
{    return artifact.getDependencyConflictId();}
e23311cf11e04becbba2703e284009e62e2e8793e3109118d8cbb9e2817ccc85
createArtifacts
private Set<Artifact> createArtifacts(ArtifactFactory artifactFactory, Set<Artifact> dependencies, String inheritedScope, ArtifactFilter dependencyFilter) throws InvalidVersionSpecificationException
{    Set<Artifact> projectArtifacts = new HashSet<>();    for (Artifact d : dependencies) {        VersionRange versionRange;        if (d.getVersionRange() != null) {            versionRange = d.getVersionRange();        } else {            versionRange = VersionRange.createFromVersionSpec(d.getVersion());        }        Artifact artifact;        if (d.getScope().equals(Artifact.SCOPE_TEST) || d.getScope().equals(Artifact.SCOPE_PROVIDED)) {            /* don't call createDependencyArtifact as it'll ignore test and provided scopes */            artifact = artifactFactory.createArtifact(d.getGroupId(), d.getArtifactId(), d.getVersion(), d.getScope(), d.getType());        } else {            artifact = artifactFactory.createDependencyArtifact(d.getGroupId(), d.getArtifactId(), versionRange, d.getType(), d.getClassifier(), d.getScope(), inheritedScope, d.isOptional());        }        if (artifact != null && (dependencyFilter == null || dependencyFilter.include(artifact))) {            artifact.setDependencyFilter(dependencyFilter);            projectArtifacts.add(artifact);        }    }    return projectArtifacts;}
6fc09acb00a1c9a81758a94ce6cf12b6754531a0b2b6293b273dfdd1eebfd3bb
addArtifact
public void addArtifact(ArtifactSpec spec)
{    artifacts.put(getKey(spec.artifact), spec);    String key = spec.artifact.getDependencyConflictId();    List<ArtifactVersion> artifactVersions = versions.get(key);    if (artifactVersions == null) {        artifactVersions = new ArrayList<>();        versions.put(key, artifactVersions);    }    if (spec.artifact.getVersion() != null) {        artifactVersions.add(new DefaultArtifactVersion(spec.artifact.getVersion()));    }}
f045a47c561ceae88e478bc9c655018ee33f1f9c50881fcce688c25b1aa58caf
retrieveAvailableVersions
public List<ArtifactVersion> retrieveAvailableVersions(Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories) throws ArtifactMetadataRetrievalException
{    return retrieveAvailableVersions(artifact);}
b6fa63f75afb47914a4411b185dbeea8f335152adeb209cbddfecf59de218df6
retrieveAvailableVersionsFromDeploymentRepository
public List<ArtifactVersion> retrieveAvailableVersionsFromDeploymentRepository(Artifact artifact, ArtifactRepository localRepository, ArtifactRepository remoteRepository) throws ArtifactMetadataRetrievalException
{    return retrieveAvailableVersions(artifact);}
b7ecb2dab58752f0d1c94df663f7a6c93b88f01ee491babf50228ab1c4d935a0
retrieveAvailableVersions
private List<ArtifactVersion> retrieveAvailableVersions(Artifact artifact)
{    List<ArtifactVersion> artifactVersions = versions.get(artifact.getDependencyConflictId());    if (artifactVersions == null) {        artifactVersions = Collections.emptyList();    }    return artifactVersions;}
9b8ea57ab997d4826bd7a3e3824dd6e2acc6f5ff7cf8e12bb559485f7a81bae8
retrieve
public ResolutionGroup retrieve(MetadataResolutionRequest request) throws ArtifactMetadataRetrievalException
{    return retrieve(request.getArtifact(), request.getLocalRepository(), request.getRemoteRepositories());}
7f1c1281141386384057b32c578f2d0b7885978914cd039afb29ede35aed8dbe
retrieveAvailableVersions
public List<ArtifactVersion> retrieveAvailableVersions(MetadataResolutionRequest request) throws ArtifactMetadataRetrievalException
{    return retrieveAvailableVersions(request.getArtifact(), request.getLocalRepository(), request.getRemoteRepositories());}
fff65168c50ea75c96354184b4d250203701eadbded79b85ee762ce33f2d5867
addExpectedContent
public void addExpectedContent(String resourceName, String expectedContent)
{    this.expectedContent.put(resourceName, expectedContent);}
21cc57ef097d7e3e07321d041c33b84a6bde7df3c3363c16de62f126a077c32f
getSupportedProtocols
public String[] getSupportedProtocols()
{    return new String[] { "string" };}
fc649dfc140e7c22b68ca94f0ca0c1bf32df41df1cbcb4d60c81a70dec641260
closeConnection
public void closeConnection() throws ConnectionException
{}
2a2f6be061adfdca0009afaa52c53d9c06252657a22744ca8f128919f1f3e771
fillInputData
public void fillInputData(InputData inputData) throws TransferFailedException, ResourceDoesNotExistException, AuthorizationException
{    Resource resource = inputData.getResource();    String content = expectedContent.get(resource.getName());    if (content != null) {        resource.setContentLength(content.length());        resource.setLastModified(System.currentTimeMillis());        try {            inputData.setInputStream(new ByteArrayInputStream(content.getBytes("UTF-8")));        } catch (UnsupportedEncodingException e) {            throw new Error("broken JVM", e);        }    } else {        throw new ResourceDoesNotExistException("No content provided for " + resource.getName());    }}
a639f038e86ff8d851f180ec60b8fb0e24792e8fcb82821eb69706097fb2716e
fillOutputData
public void fillOutputData(OutputData outputData) throws TransferFailedException
{    outputData.setOutputStream(new ByteArrayOutputStream());}
e4ccde791a2e17c2c7c48c47e184abeee150071c5b796199206c34f657c599a7
openConnectionInternal
protected void openConnectionInternal() throws ConnectionException, AuthenticationException
{}
9b48cde3f619bfa0ea690c8bd509dcac4095649d1cb2f5cfb0cf3978301f1795
clearExpectedContent
public void clearExpectedContent()
{    expectedContent.clear();}
21cc57ef097d7e3e07321d041c33b84a6bde7df3c3363c16de62f126a077c32f
getSupportedProtocols
public String[] getSupportedProtocols()
{    return new String[] { "a" };}
21cc57ef097d7e3e07321d041c33b84a6bde7df3c3363c16de62f126a077c32f
getSupportedProtocols
public String[] getSupportedProtocols()
{    return new String[] { "b1", "b2" };}
21cc57ef097d7e3e07321d041c33b84a6bde7df3c3363c16de62f126a077c32f
getSupportedProtocols
public String[] getSupportedProtocols()
{    return new String[] { "c" };}
e0ec4e946e62845e6e351d86d3af450548d297b15e8286932f86899fcf6564d0
setConfigurableField
public void setConfigurableField(String configurableField)
{    this.configurableField = configurableField;}
14f852bab9f27dc65c5b53a4c2cbee5c5add35d37e28a1609cf861f566b20fdc
getConfigurableField
public String getConfigurableField()
{    return configurableField;}
09e8f13a9a603d31d64bb498b77d15572483824d843d0e82a570643192f62186
getId
public String getId()
{    return "legacy";}
6c63652ca89949e5d136675e9b8c89f393e36286bda4d26fa63c77d8d06c4fab
pathOf
public String pathOf(Artifact artifact)
{    ArtifactHandler artifactHandler = artifact.getArtifactHandler();    StringBuilder path = new StringBuilder(128);    path.append(artifact.getGroupId()).append('/');    path.append(artifactHandler.getDirectory()).append('/');    path.append(artifact.getArtifactId()).append('-').append(artifact.getVersion());    if (artifact.hasClassifier()) {        path.append('-').append(artifact.getClassifier());    }    if (artifactHandler.getExtension() != null && artifactHandler.getExtension().length() > 0) {        path.append('.').append(artifactHandler.getExtension());    }    return path.toString();}
2bf3ce12ca84872494a2865c7a246067b1efd12dc3403ae1a3b69eb89fda872e
pathOfLocalRepositoryMetadata
public String pathOfLocalRepositoryMetadata(ArtifactMetadata metadata, ArtifactRepository repository)
{    return pathOfRepositoryMetadata(metadata, metadata.getLocalFilename(repository));}
b126eb700f169df57ef58e793e786479d7eea9e4bc840fe4603f35688a4a3510
pathOfRepositoryMetadata
private String pathOfRepositoryMetadata(ArtifactMetadata metadata, String filename)
{    StringBuilder path = new StringBuilder(128);    path.append(metadata.getGroupId()).append(PATH_SEPARATOR).append("poms").append(PATH_SEPARATOR);    path.append(filename);    return path.toString();}
71592720c0b04200497abee0127a385a42bb60fee54e020cce105b67cd21d2e7
pathOfRemoteRepositoryMetadata
public String pathOfRemoteRepositoryMetadata(ArtifactMetadata metadata)
{    return pathOfRepositoryMetadata(metadata, metadata.getRemoteFilename());}
d57c1d7022b9b24e5d6471b55681e866b61cc2646c5e5e41baf69039be0b670b
customizeContainerConfiguration
protected void customizeContainerConfiguration(ContainerConfiguration containerConfiguration)
{    super.customizeContainerConfiguration(containerConfiguration);    containerConfiguration.setAutoWiring(true);    containerConfiguration.setClassPathScanning(PlexusConstants.SCANNING_INDEX);}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();    repositorySystem = lookup(RepositorySystem.class, "default");    resolutionErrorHandler = lookup(ResolutionErrorHandler.class);}
68bbf6c94fbad4862990669ea582b65c28678087c2377b2c3fb0948d54293af4
tearDown
protected void tearDown() throws Exception
{    repositorySystem = null;    resolutionErrorHandler = null;    super.tearDown();}
a3287da63f017ab2fe9c0457d134197368397c234d204b6d2268da49a91b618c
getRemoteRepositories
protected List<ArtifactRepository> getRemoteRepositories() throws Exception
{    File repoDir = new File(getBasedir(), "src/test/remote-repo").getAbsoluteFile();    RepositoryPolicy policy = new RepositoryPolicy();    policy.setEnabled(true);    policy.setChecksumPolicy("ignore");    policy.setUpdatePolicy("always");    Repository repository = new Repository();    repository.setId(RepositorySystem.DEFAULT_REMOTE_REPO_ID);    repository.setUrl("file://" + repoDir.toURI().getPath());    repository.setReleases(policy);    repository.setSnapshots(policy);    return Arrays.asList(repositorySystem.buildArtifactRepository(repository));}
e10004dfd50d8c85bc2f5b897ee0eb46ee7fb7375f9c18f1bd006d5779afe14a
getLocalRepository
protected ArtifactRepository getLocalRepository() throws Exception
{    File repoDir = new File(getBasedir(), "target/local-repo").getAbsoluteFile();    return repositorySystem.createLocalRepository(repoDir);}
63471e2d47c0ab7acb6e8cddb71302e36e6e9d8ffe8227b3e58b69567ff96bf3
testThatASystemScopedDependencyIsNotResolvedFromRepositories
public void testThatASystemScopedDependencyIsNotResolvedFromRepositories() throws Exception
{                Dependency d = new Dependency();    d.setGroupId("org.apache.maven.its");    d.setArtifactId("b");    d.setVersion("0.1");    d.setScope(Artifact.SCOPE_COMPILE);    Artifact artifact = repositorySystem.createDependencyArtifact(d);    ArtifactResolutionRequest request = new ArtifactResolutionRequest().setArtifact(artifact).setResolveRoot(true).setResolveTransitively(true).setRemoteRepositories(getRemoteRepositories()).setLocalRepository(getLocalRepository());    DefaultRepositorySystemSession session = new DefaultRepositorySystemSession();    LocalRepository localRepo = new LocalRepository(request.getLocalRepository().getBasedir());    session.setLocalRepositoryManager(new SimpleLocalRepositoryManagerFactory().newInstance(session, localRepo));    LegacySupport legacySupport = lookup(LegacySupport.class);    legacySupport.setSession(new MavenSession(getContainer(), session, new DefaultMavenExecutionRequest(), new DefaultMavenExecutionResult()));    ArtifactResolutionResult result = repositorySystem.resolve(request);    resolutionErrorHandler.throwErrors(request, result);    assertEquals(2, result.getArtifacts().size());                d.setScope(Artifact.SCOPE_SYSTEM);    File file = new File(getBasedir(), "src/test/repository-system/maven-core-2.1.0.jar");    assertTrue(file.exists());    d.setSystemPath(file.getCanonicalPath());    artifact = repositorySystem.createDependencyArtifact(d);                    request = new ArtifactResolutionRequest().setArtifact(artifact).setResolveRoot(true).setResolveTransitively(true);    result = repositorySystem.resolve(request);    resolutionErrorHandler.throwErrors(request, result);    assertEquals(1, result.getArtifacts().size());                file = new File(getBasedir(), "src/test/repository-system/maven-monkey-2.1.0.jar");    assertFalse(file.exists());    d.setSystemPath(file.getCanonicalPath());    artifact = repositorySystem.createDependencyArtifact(d);                    request = new ArtifactResolutionRequest().setArtifact(artifact).setResolveRoot(true).setResolveTransitively(true);    try {        result = repositorySystem.resolve(request);        resolutionErrorHandler.throwErrors(request, result);    } catch (Exception e) {        assertTrue(result.hasMissingArtifacts());    }}
e49422349e49092352a6a23b5858235617efdfb36bce4079da900d171778ac47
testLocalRepositoryBasedir
public void testLocalRepositoryBasedir() throws Exception
{    File localRepoDir = new File("").getAbsoluteFile();    ArtifactRepository localRepo = repositorySystem.createLocalRepository(localRepoDir);    String basedir = localRepo.getBasedir();    assertFalse(basedir.endsWith("/"));    assertFalse(basedir.endsWith("\\"));    assertEquals(localRepoDir, new File(basedir));    assertEquals(localRepoDir.getPath(), basedir);}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();    transform = (ClasspathTransformation) lookup(ClasspathTransformation.ROLE, "default");    graph = new MetadataGraph(4, 3);    /*    	 *       v2    	 *   v1<    	 *       v3-v4    	 *    	 */    v1 = graph.addVertex(new ArtifactMetadata("g", "a1", "1.0"));    graph.setEntry(v1);    v2 = graph.addVertex(new ArtifactMetadata("g", "a2", "1.0"));    v3 = graph.addVertex(new ArtifactMetadata("g", "a3", "1.0"));    v4 = graph.addVertex(new ArtifactMetadata("g", "a4", "1.0"));        graph.addEdge(v1, v2, new MetadataGraphEdge("1.1", true, null, null, 2, 1));    graph.addEdge(v1, v2, new MetadataGraphEdge("1.2", true, null, null, 2, 2));        graph.addEdge(v1, v3, new MetadataGraphEdge("1.1", true, null, null, 2, 1));    graph.addEdge(v1, v3, new MetadataGraphEdge("1.2", true, null, null, 4, 2));        graph.addEdge(v3, v4, new MetadataGraphEdge("1.1", true, ArtifactScopeEnum.runtime, null, 2, 2));    graph.addEdge(v3, v4, new MetadataGraphEdge("1.2", true, ArtifactScopeEnum.test, null, 2, 2));}
bf79defce5d4d3a730a45c1bc928bca5b8d8d72b23cc1e6a8e4cf8f5b543c132
testCompileClasspathTransform
public void testCompileClasspathTransform() throws Exception
{    ClasspathContainer res;    res = transform.transform(graph, ArtifactScopeEnum.compile, false);    assertNotNull("null classpath container after compile transform", res);    assertNotNull("null classpath after compile transform", res.getClasspath());    assertEquals("compile classpath should have 3 entries", 3, res.getClasspath().size());}
3fef7acfa51a3f3e15bb3f7442ce5ea8cd2b285ed0001b198a8ce88b03f2ded9
testRuntimeClasspathTransform
public void testRuntimeClasspathTransform() throws Exception
{    ClasspathContainer res;    res = transform.transform(graph, ArtifactScopeEnum.runtime, false);    assertNotNull("null classpath container after runtime transform", res);    assertNotNull("null classpath after runtime transform", res.getClasspath());    assertEquals("runtime classpath should have 4 entries", 4, res.getClasspath().size());    ArtifactMetadata md = res.getClasspath().get(3);    assertEquals("runtime artifact version should be 1.1", "1.1", md.getVersion());}
4edac5ddfa5915248755ac4016d25e3937aa0b68d616a0d1532eff0081212404
testTestClasspathTransform
public void testTestClasspathTransform() throws Exception
{    ClasspathContainer res;    res = transform.transform(graph, ArtifactScopeEnum.test, false);    assertNotNull("null classpath container after runtime transform", res);    assertNotNull("null classpath after runtime transform", res.getClasspath());    assertEquals("runtime classpath should have 4 entries", 4, res.getClasspath().size());    ArtifactMetadata md = res.getClasspath().get(3);    assertEquals("test artifact version should be 1.2", "1.2", md.getVersion());}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();    policy = (GraphConflictResolutionPolicy) lookup(GraphConflictResolutionPolicy.ROLE, "default");    e1 = new MetadataGraphEdge("1.1", true, null, null, 2, 1);    e2 = new MetadataGraphEdge("1.2", true, null, null, 3, 2);    e3 = new MetadataGraphEdge("1.2", true, null, null, 2, 3);}
15039fcd94e393ec2173f8d042497a18d3daa8ef5d5bcc5a646e4f1db4d851e2
testDefaultPolicy
public void testDefaultPolicy() throws Exception
{    MetadataGraphEdge res;    res = policy.apply(e1, e2);    assertEquals("Wrong depth edge selected", "1.1", res.getVersion());    res = policy.apply(e1, e3);    assertEquals("Wrong version edge selected", "1.2", res.getVersion());}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();    resolver = (GraphConflictResolver) lookup(GraphConflictResolver.ROLE, "default");    /*    	 *       v2    	 *   v1<    	 *      v3-v4    	 *    	 */    graph = new MetadataGraph(4, 3);    v1 = graph.addVertex(new ArtifactMetadata("g", "a1", "1.0"));    graph.setEntry(v1);    v2 = graph.addVertex(new ArtifactMetadata("g", "a2", "1.0"));    v3 = graph.addVertex(new ArtifactMetadata("g", "a3", "1.0"));    v4 = graph.addVertex(new ArtifactMetadata("g", "a4", "1.0"));        graph.addEdge(v1, v2, new MetadataGraphEdge("1.1", true, null, null, 2, 1));    graph.addEdge(v1, v2, new MetadataGraphEdge("1.2", true, null, null, 2, 2));        graph.addEdge(v1, v3, new MetadataGraphEdge("1.1", true, null, null, 2, 1));    graph.addEdge(v1, v3, new MetadataGraphEdge("1.2", true, null, null, 4, 2));        graph.addEdge(v3, v4, new MetadataGraphEdge("1.1", true, ArtifactScopeEnum.runtime, null, 2, 1));    graph.addEdge(v3, v4, new MetadataGraphEdge("1.2", true, ArtifactScopeEnum.provided, null, 2, 2));}
989aadda22cd0f88cf0162d0abe98f93f654c0394335d14a7f265fe405ae3e64
testCompileResolution
public void testCompileResolution() throws Exception
{    MetadataGraph res;    res = resolver.resolveConflicts(graph, ArtifactScopeEnum.compile);    assertNotNull("null graph after resolver", res);    assertNotNull("no vertices in the resulting graph after resolver", res.getVertices());    assertNotNull("no edges in the resulting graph after resolver", res.getExcidentEdges(v1));    assertEquals("wrong # of vertices in the resulting graph after resolver", 4, res.getVertices().size());    assertEquals("wrong # of excident edges in the resulting graph entry after resolver", 2, res.getExcidentEdges(v1).size());    assertEquals("wrong # of v2 incident edges in the resulting graph after resolver", 1, res.getIncidentEdges(v2).size());    assertEquals("wrong edge v1-v2 in the resulting graph after resolver", "1.2", res.getIncidentEdges(v2).get(0).getVersion());    assertEquals("wrong # of edges v1-v3 in the resulting graph after resolver", 1, res.getIncidentEdges(v3).size());    assertEquals("wrong edge v1-v3 in the resulting graph after resolver", "1.1", res.getIncidentEdges(v3).get(0).getVersion());    assertEquals("wrong # of edges v3-v4 in the resulting graph after resolver", 1, res.getIncidentEdges(v4).size());    assertEquals("wrong edge v3-v4 in the resulting graph after resolver", "1.2", res.getIncidentEdges(v4).get(0).getVersion());}
7cddb938408b4f436e2c0f1f2b71ca61af4ef9fd013709b9b7e1dd27cc4f828c
testRuntimeResolution
public void testRuntimeResolution() throws Exception
{    MetadataGraph res;    res = resolver.resolveConflicts(graph, ArtifactScopeEnum.runtime);    assertNotNull("null graph after resolver", res);    assertNotNull("no vertices in the resulting graph after resolver", res.getVertices());    assertNotNull("no edges in the resulting graph after resolver", res.getExcidentEdges(v1));    assertEquals("wrong # of vertices in the resulting graph after resolver", 4, res.getVertices().size());    assertEquals("wrong # of excident edges in the resulting graph entry after resolver", 2, res.getExcidentEdges(v1).size());    assertEquals("wrong # of v2 incident edges in the resulting graph after resolver", 1, res.getIncidentEdges(v2).size());    assertEquals("wrong edge v1-v2 in the resulting graph after resolver", "1.2", res.getIncidentEdges(v2).get(0).getVersion());    assertEquals("wrong # of edges v1-v3 in the resulting graph after resolver", 1, res.getIncidentEdges(v3).size());    assertEquals("wrong edge v1-v3 in the resulting graph after resolver", "1.1", res.getIncidentEdges(v3).get(0).getVersion());    assertEquals("wrong # of edges v3-v4 in the resulting graph after resolver", 1, res.getIncidentEdges(v4).size());    assertEquals("wrong edge v3-v4 in the resulting graph after resolver", "1.1", res.getIncidentEdges(v4).get(0).getVersion());}
3a53996c6b62d1a7f9c614de7362ee6977d53788a5ae2dd9e3226b185503f063
testTestResolution
public void testTestResolution() throws Exception
{    MetadataGraph res;    res = resolver.resolveConflicts(graph, ArtifactScopeEnum.test);    assertNotNull("null graph after resolver", res);    assertNotNull("no vertices in the resulting graph after resolver", res.getVertices());    assertNotNull("no edges in the resulting graph after resolver", res.getExcidentEdges(v1));    assertEquals("wrong # of vertices in the resulting graph after resolver", 4, res.getVertices().size());    assertEquals("wrong # of excident edges in the resulting graph entry after resolver", 2, res.getExcidentEdges(v1).size());    assertEquals("wrong # of v2 incident edges in the resulting graph after resolver", 1, res.getIncidentEdges(v2).size());    assertEquals("wrong edge v1-v2 in the resulting graph after resolver", "1.2", res.getIncidentEdges(v2).get(0).getVersion());    assertEquals("wrong # of edges v1-v3 in the resulting graph after resolver", 1, res.getIncidentEdges(v3).size());    assertEquals("wrong edge v1-v3 in the resulting graph after resolver", "1.1", res.getIncidentEdges(v3).get(0).getVersion());    assertEquals("wrong # of edges v3-v4 in the resulting graph after resolver", 1, res.getIncidentEdges(v4).size());    assertEquals("wrong edge v3-v4 in the resulting graph after resolver", "1.2", res.getIncidentEdges(v4).get(0).getVersion());}
5bba400f6603b67e47f7e66643840fc70b026b0c24e45f5186f68b7b6868d426
retrieve
public ResolutionGroup retrieve(Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories) throws ArtifactMetadataRetrievalException
{    Set<Artifact> dependencies = new HashSet<>();    if ("g".equals(artifact.getArtifactId())) {        Artifact a = null;        try {            a = factory.createBuildArtifact("org.apache.maven", "h", "1.0", "jar");            dependencies.add(a);        } catch (Exception e) {            throw new ArtifactMetadataRetrievalException("Error retrieving metadata", e, a);        }    }    if ("i".equals(artifact.getArtifactId())) {        Artifact a = null;        try {            a = factory.createBuildArtifact("org.apache.maven", "j", "1.0-SNAPSHOT", "jar");            dependencies.add(a);        } catch (Exception e) {            throw new ArtifactMetadataRetrievalException("Error retrieving metadata", e, a);        }    }    return new ResolutionGroup(artifact, dependencies, remoteRepositories);}
f045a47c561ceae88e478bc9c655018ee33f1f9c50881fcce688c25b1aa58caf
retrieveAvailableVersions
public List<ArtifactVersion> retrieveAvailableVersions(Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories) throws ArtifactMetadataRetrievalException
{    throw new UnsupportedOperationException("Cannot get available versions in this test case");}
b6fa63f75afb47914a4411b185dbeea8f335152adeb209cbddfecf59de218df6
retrieveAvailableVersionsFromDeploymentRepository
public List<ArtifactVersion> retrieveAvailableVersionsFromDeploymentRepository(Artifact artifact, ArtifactRepository localRepository, ArtifactRepository remoteRepository) throws ArtifactMetadataRetrievalException
{    throw new UnsupportedOperationException("Cannot get available versions in this test case");}
9b8ea57ab997d4826bd7a3e3824dd6e2acc6f5ff7cf8e12bb559485f7a81bae8
retrieve
public ResolutionGroup retrieve(MetadataResolutionRequest request) throws ArtifactMetadataRetrievalException
{    return retrieve(request.getArtifact(), request.getLocalRepository(), request.getRemoteRepositories());}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    mirrorSelector = (DefaultMirrorSelector) lookup(MirrorSelector.class);    repositorySystem = lookup(ArtifactRepositoryFactory.class);}
68bbf6c94fbad4862990669ea582b65c28678087c2377b2c3fb0948d54293af4
tearDown
protected void tearDown() throws Exception
{    mirrorSelector = null;    repositorySystem = null;    super.tearDown();}
6a85cf0e6f31139f6c40b10872836727fc0892176b00676635ab892611b34c7c
testExternalURL
public void testExternalURL()
{    assertTrue(DefaultMirrorSelector.isExternalRepo(getRepo("foo", "http://somehost")));    assertTrue(DefaultMirrorSelector.isExternalRepo(getRepo("foo", "http://somehost:9090/somepath")));    assertTrue(DefaultMirrorSelector.isExternalRepo(getRepo("foo", "ftp://somehost")));    assertTrue(DefaultMirrorSelector.isExternalRepo(getRepo("foo", "http://192.168.101.1")));    assertTrue(DefaultMirrorSelector.isExternalRepo(getRepo("foo", "http://")));        assertFalse(DefaultMirrorSelector.isExternalRepo(getRepo("foo", "http://localhost:8080")));    assertFalse(DefaultMirrorSelector.isExternalRepo(getRepo("foo", "http://127.0.0.1:9090")));    assertFalse(DefaultMirrorSelector.isExternalRepo(getRepo("foo", "file://localhost/somepath")));    assertFalse(DefaultMirrorSelector.isExternalRepo(getRepo("foo", "file://localhost/D:/somepath")));    assertFalse(DefaultMirrorSelector.isExternalRepo(getRepo("foo", "http://localhost")));    assertFalse(DefaultMirrorSelector.isExternalRepo(getRepo("foo", "http://127.0.0.1")));    assertFalse(DefaultMirrorSelector.isExternalRepo(getRepo("foo", "file:///somepath")));    assertFalse(DefaultMirrorSelector.isExternalRepo(getRepo("foo", "file://D:/somepath")));        assertFalse(DefaultMirrorSelector.isExternalRepo(getRepo("foo", "192.168.101.1")));    assertFalse(DefaultMirrorSelector.isExternalRepo(getRepo("foo", "")));}
3d0bb007472263745c71e251e38430c3c453f2357291415c8fcae8b5d65b0764
testMirrorLookup
public void testMirrorLookup()
{    Mirror mirrorA = newMirror("a", "a", "http://a");    Mirror mirrorB = newMirror("b", "b", "http://b");    List<Mirror> mirrors = Arrays.asList(mirrorA, mirrorB);    assertSame(mirrorA, mirrorSelector.getMirror(getRepo("a", "http://a.a"), mirrors));    assertSame(mirrorB, mirrorSelector.getMirror(getRepo("b", "http://a.a"), mirrors));    assertNull(mirrorSelector.getMirror(getRepo("c", "http://c.c"), mirrors));}
8b513e588eb75c078782b32d57d0b33d0fda2bb71f772c4ce206ebbbe0a0de41
testMirrorWildcardLookup
public void testMirrorWildcardLookup()
{    Mirror mirrorA = newMirror("a", "a", "http://a");    Mirror mirrorB = newMirror("b", "b", "http://b");    Mirror mirrorC = newMirror("c", "*", "http://wildcard");    List<Mirror> mirrors = Arrays.asList(mirrorA, mirrorB, mirrorC);    assertSame(mirrorA, mirrorSelector.getMirror(getRepo("a", "http://a.a"), mirrors));    assertSame(mirrorB, mirrorSelector.getMirror(getRepo("b", "http://a.a"), mirrors));    assertSame(mirrorC, mirrorSelector.getMirror(getRepo("c", "http://c.c"), mirrors));}
312f2e2f769dcedcd92602372008c98afb119615aba30b663aa0c1a5f7c55598
testMirrorStopOnFirstMatch
public void testMirrorStopOnFirstMatch()
{        Mirror mirrorA2 = newMirror("a2", "a,b", "http://a2");    Mirror mirrorA = newMirror("a", "a", "http://a");        Mirror mirrorA3 = newMirror("a", "a", "http://a3");    Mirror mirrorB = newMirror("b", "b", "http://b");    Mirror mirrorC = newMirror("c", "d,e", "http://de");    Mirror mirrorC2 = newMirror("c", "*", "http://wildcard");    Mirror mirrorC3 = newMirror("c", "e,f", "http://ef");    List<Mirror> mirrors = Arrays.asList(mirrorA2, mirrorA, mirrorA3, mirrorB, mirrorC, mirrorC2, mirrorC3);    assertSame(mirrorA, mirrorSelector.getMirror(getRepo("a", "http://a.a"), mirrors));    assertSame(mirrorB, mirrorSelector.getMirror(getRepo("b", "http://a.a"), mirrors));    assertSame(mirrorC2, mirrorSelector.getMirror(getRepo("c", "http://c.c"), mirrors));    assertSame(mirrorC, mirrorSelector.getMirror(getRepo("d", "http://d"), mirrors));    assertSame(mirrorC, mirrorSelector.getMirror(getRepo("e", "http://e"), mirrors));    assertSame(mirrorC2, mirrorSelector.getMirror(getRepo("f", "http://f"), mirrors));}
4532df3afc630115330e7b1ab88e7b8abecdc586bf4a613af7c80765d1e251b6
testPatterns
public void testPatterns()
{    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("a"), "*"));    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("a"), "*,"));    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("a"), ",*,"));    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("a"), "*,"));    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("a"), "a"));    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("a"), "a,"));    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("a"), ",a,"));    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("a"), "a,"));    assertFalse(DefaultMirrorSelector.matchPattern(getRepo("b"), "a"));    assertFalse(DefaultMirrorSelector.matchPattern(getRepo("b"), "a,"));    assertFalse(DefaultMirrorSelector.matchPattern(getRepo("b"), ",a"));    assertFalse(DefaultMirrorSelector.matchPattern(getRepo("b"), ",a,"));    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("a"), "a,b"));    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("b"), "a,b"));    assertFalse(DefaultMirrorSelector.matchPattern(getRepo("c"), "a,b"));    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("a"), "*"));    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("a"), "*,b"));    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("a"), "*,!b"));    assertFalse(DefaultMirrorSelector.matchPattern(getRepo("a"), "*,!a"));    assertFalse(DefaultMirrorSelector.matchPattern(getRepo("a"), "!a,*"));    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("c"), "*,!a"));    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("c"), "!a,*"));    assertFalse(DefaultMirrorSelector.matchPattern(getRepo("c"), "!a,!c"));    assertFalse(DefaultMirrorSelector.matchPattern(getRepo("d"), "!a,!c*"));}
c7a963ceb57709ccae54430144da8e0eb49eb5b607518faf31517e6b68d65cfd
testPatternsWithExternal
public void testPatternsWithExternal()
{    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("a", "http://localhost"), "*"));    assertFalse(DefaultMirrorSelector.matchPattern(getRepo("a", "http://localhost"), "external:*"));    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("a", "http://localhost"), "external:*,a"));    assertFalse(DefaultMirrorSelector.matchPattern(getRepo("a", "http://localhost"), "external:*,!a"));    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("a", "http://localhost"), "a,external:*"));    assertFalse(DefaultMirrorSelector.matchPattern(getRepo("a", "http://localhost"), "!a,external:*"));    assertFalse(DefaultMirrorSelector.matchPattern(getRepo("c", "http://localhost"), "!a,external:*"));    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("c", "http://somehost"), "!a,external:*"));}
5c3e25780f739dd7b05c16b6c818d954babe581b0441b9056e8a740827192129
testLayoutPattern
public void testLayoutPattern()
{    assertTrue(DefaultMirrorSelector.matchesLayout("default", null));    assertTrue(DefaultMirrorSelector.matchesLayout("default", ""));    assertTrue(DefaultMirrorSelector.matchesLayout("default", "*"));    assertTrue(DefaultMirrorSelector.matchesLayout("default", "default"));    assertFalse(DefaultMirrorSelector.matchesLayout("default", "legacy"));    assertTrue(DefaultMirrorSelector.matchesLayout("default", "legacy,default"));    assertTrue(DefaultMirrorSelector.matchesLayout("default", "default,legacy"));    assertFalse(DefaultMirrorSelector.matchesLayout("default", "legacy,!default"));    assertFalse(DefaultMirrorSelector.matchesLayout("default", "!default,legacy"));    assertFalse(DefaultMirrorSelector.matchesLayout("default", "*,!default"));    assertFalse(DefaultMirrorSelector.matchesLayout("default", "!default,*"));}
6b0be966c856c67d828fa01cf80128e048ef9d41143cea94f8afc36a24b7e678
testMirrorLayoutConsideredForMatching
public void testMirrorLayoutConsideredForMatching()
{    ArtifactRepository repo = getRepo("a");    Mirror mirrorA = newMirror("a", "a", null, "http://a");    Mirror mirrorB = newMirror("b", "a", "p2", "http://b");    Mirror mirrorC = newMirror("c", "*", null, "http://c");    Mirror mirrorD = newMirror("d", "*", "p2", "http://d");    assertSame(mirrorA, mirrorSelector.getMirror(repo, Arrays.asList(mirrorA)));    assertNull(mirrorSelector.getMirror(repo, Arrays.asList(mirrorB)));    assertSame(mirrorC, mirrorSelector.getMirror(repo, Arrays.asList(mirrorC)));    assertNull(mirrorSelector.getMirror(repo, Arrays.asList(mirrorD)));}
386d7e79231f49e5435e2b14cf8ae226bf9cdd5edf337986cf2f75d705bc0238
getRepo
private ArtifactRepository getRepo(String id, String url)
{    return repositorySystem.createArtifactRepository(id, url, new DefaultRepositoryLayout(), null, null);}
3e69fa9e8eb3921b797c223e498abdd88a02d13611f6e1c919d4c23470295053
getRepo
private ArtifactRepository getRepo(String id)
{    return getRepo(id, "http://something");}
0bc2c0529706559b4ad2eae4639a0c052fd0864509322a0284e0c43117add44f
newMirror
private Mirror newMirror(String id, String mirrorOf, String url)
{    return newMirror(id, mirrorOf, null, url);}
e24921e1975a50a9b839981857a1affdd887b4df581312aa077279a6d15dd5a8
newMirror
private Mirror newMirror(String id, String mirrorOf, String layouts, String url)
{    Mirror mirror = new Mirror();    mirror.setId(id);    mirror.setMirrorOf(mirrorOf);    mirror.setMirrorOfLayouts(layouts);    mirror.setUrl(url);    return mirror;}
9a7629b4997ba8c9c2091629273e0118dc8dda9c4ccce0891998cdcd2ae9fa3b
afterProjectsRead
public void afterProjectsRead(MavenSession session) throws MavenExecutionException
{}
bc55caeb6cfbae66f3cedd0b5d2c38f84fd79d2fddee536972b44766d754cab2
afterSessionStart
public void afterSessionStart(MavenSession session) throws MavenExecutionException
{}
28b60fb20e3f1ae20d44603d8061dd6477f41d0e72e828d21072ff4298174724
afterSessionEnd
public void afterSessionEnd(MavenSession session) throws MavenExecutionException
{}
9dcc665db886a44495acf2d5a6ffdbbe51c603897f3a7adbec1d3ba2cac656c9
createArtifact
public Artifact createArtifact(String groupId, String artifactId, String version, String scope, String type)
{    return createArtifact(groupId, artifactId, version, scope, type, null, null);}
306c76fcdafeefa93e242b23b802b4246a023047aeb055255e6b6197361f8357
createArtifactWithClassifier
public Artifact createArtifactWithClassifier(String groupId, String artifactId, String version, String type, String classifier)
{    return createArtifact(groupId, artifactId, version, null, type, classifier, null);}
8899838c31f33a9f07219b320cf607935075ddb5431b54db2cfcc5f143b199bb
createDependencyArtifact
public Artifact createDependencyArtifact(String groupId, String artifactId, VersionRange versionRange, String type, String classifier, String scope)
{    return createArtifact(groupId, artifactId, versionRange, type, classifier, scope, null);}
34edc87c48faa56cc25158fb40741cf9ae5aea261d1e05bd1164e43e4412a128
createDependencyArtifact
public Artifact createDependencyArtifact(String groupId, String artifactId, VersionRange versionRange, String type, String classifier, String scope, boolean optional)
{    return createArtifact(groupId, artifactId, versionRange, type, classifier, scope, null, optional);}
c8c2dfaa81646fa88ad20dd984be4ebc8fc623be86dec6540a7182525f9aa104
createDependencyArtifact
public Artifact createDependencyArtifact(String groupId, String artifactId, VersionRange versionRange, String type, String classifier, String scope, String inheritedScope)
{    return createArtifact(groupId, artifactId, versionRange, type, classifier, scope, inheritedScope);}
336dda9698be51888dd236f11d49c318d3b02a4154364c27417cefded20eeab1
createDependencyArtifact
public Artifact createDependencyArtifact(String groupId, String artifactId, VersionRange versionRange, String type, String classifier, String scope, String inheritedScope, boolean optional)
{    return createArtifact(groupId, artifactId, versionRange, type, classifier, scope, inheritedScope, optional);}
298048111a18f400855265f163d6cedddd4c6db9e08f4e8cd75848a5e35fdf97
createBuildArtifact
public Artifact createBuildArtifact(String groupId, String artifactId, String version, String packaging)
{    return createArtifact(groupId, artifactId, version, null, packaging, null, null);}
d8cc055aec7e99ac29d0fd2895dd657d5a7960a423dcd97bab8d5727bf5ba9a2
createProjectArtifact
public Artifact createProjectArtifact(String groupId, String artifactId, String version)
{    return createProjectArtifact(groupId, artifactId, version, null);}
626d44f2026240a6644e5b7637324c86a2a6203e5a9ead2b8492aeec21d25d2b
createParentArtifact
public Artifact createParentArtifact(String groupId, String artifactId, String version)
{    return createProjectArtifact(groupId, artifactId, version);}
bd74b2ea72278d5821e9bb54a26855b31c0153c506b0ac8fc60bf6b411fc2a87
createPluginArtifact
public Artifact createPluginArtifact(String groupId, String artifactId, VersionRange versionRange)
{    return createArtifact(groupId, artifactId, versionRange, "maven-plugin", null, Artifact.SCOPE_RUNTIME, null);}
658ee17c1963dacbdc2d388f937b5474d24d5ac20b284b2a72fde3c986daf560
createProjectArtifact
public Artifact createProjectArtifact(String groupId, String artifactId, String version, String scope)
{    return createArtifact(groupId, artifactId, version, scope, "pom");}
ec9a9f9ff2f7983047d09e3515610ad7cc3fa579e78dcd6d0f781240d75d34c5
createExtensionArtifact
public Artifact createExtensionArtifact(String groupId, String artifactId, VersionRange versionRange)
{    return createArtifact(groupId, artifactId, versionRange, "jar", null, Artifact.SCOPE_RUNTIME, null);}
4038cb34e5b3a240fcf8a7d33b747e95f117d0af02917a163d6dabcc0506f364
createArtifact
private Artifact createArtifact(String groupId, String artifactId, String version, String scope, String type, String classifier, String inheritedScope)
{    VersionRange versionRange = null;    if (version != null) {        versionRange = VersionRange.createFromVersion(version);    }    return createArtifact(groupId, artifactId, versionRange, type, classifier, scope, inheritedScope);}
841dddddb77c0d9baa77d45c3209529b6ccc5953fd7b41b16eab80033e274e22
createArtifact
private Artifact createArtifact(String groupId, String artifactId, VersionRange versionRange, String type, String classifier, String scope, String inheritedScope)
{    return createArtifact(groupId, artifactId, versionRange, type, classifier, scope, inheritedScope, false);}
c777f5a289ab03994de92879ee640921cccbeb7e851c00afe8c731f133954892
createArtifact
private Artifact createArtifact(String groupId, String artifactId, VersionRange versionRange, String type, String classifier, String scope, String inheritedScope, boolean optional)
{    String desiredScope = Artifact.SCOPE_RUNTIME;    if (inheritedScope == null) {        desiredScope = scope;    } else if (Artifact.SCOPE_TEST.equals(scope) || Artifact.SCOPE_PROVIDED.equals(scope)) {        return null;    } else if (Artifact.SCOPE_COMPILE.equals(scope) && Artifact.SCOPE_COMPILE.equals(inheritedScope)) {                desiredScope = Artifact.SCOPE_COMPILE;    }    if (Artifact.SCOPE_TEST.equals(inheritedScope)) {        desiredScope = Artifact.SCOPE_TEST;    }    if (Artifact.SCOPE_PROVIDED.equals(inheritedScope)) {        desiredScope = Artifact.SCOPE_PROVIDED;    }    if (Artifact.SCOPE_SYSTEM.equals(scope)) {                desiredScope = Artifact.SCOPE_SYSTEM;    }    ArtifactHandler handler = artifactHandlerManager.getArtifactHandler(type);    return new DefaultArtifact(groupId, artifactId, versionRange, desiredScope, type, classifier, handler, optional);}
dd386f4d75b694f73345347a9b2e46289fee679d7748d4d3eee41cd501d6e88c
getExtension
public String getExtension()
{    if (extension == null) {        extension = type;    }    return extension;}
509e66a7c8dced6eb5209bd5e62cae525e6bd92eec813f6d336cf4a335e328eb
setExtension
public void setExtension(String extension)
{    this.extension = extension;}
624f725337dde847c4a699397a02f1b5558c709c88374adb10e603d835f48c88
getType
public String getType()
{    return type;}
72a56f4f76ed886823d719d171deaf7269e3e03581e490ae41d8888ab09c151c
getClassifier
public String getClassifier()
{    return classifier;}
1569f194c7523775c854ff67cac1f81383798e7ba057b83499d6000987730b95
getDirectory
public String getDirectory()
{    if (directory == null) {        directory = getPackaging() + "s";    }    return directory;}
9a63f6cad461699089dd5d7d862cf5ef3ece77582a35e5816083a14583c6c7e1
getPackaging
public String getPackaging()
{    if (packaging == null) {        packaging = type;    }    return packaging;}
4afd5ea007fd5caeb382a8a7af760bc7954fef2ae8328ed49c32b329839e5cd2
isIncludesDependencies
public boolean isIncludesDependencies()
{    return includesDependencies;}
225ba2c3a4646a4df91a771a7773c66f4c1aab1134a923dd2132019706e4003d
setIncludesDependencies
public void setIncludesDependencies(boolean includesDependencies)
{    this.includesDependencies = includesDependencies;}
345e79f504a23e5b53f54930d7e01f191e855cd500fc60bdda621eec493957bb
getLanguage
public String getLanguage()
{    if (language == null) {        language = "none";    }    return language;}
d8e69827e8a460f65316bd1cfe439ebe9888ba1e85355ee02c0eab20e4fecfe1
setLanguage
public void setLanguage(String language)
{    this.language = language;}
80a8caf96dc1bfc507f0d97c625d5b23ce99f86dc8db2108fd0a07ee92590a10
isAddedToClasspath
public boolean isAddedToClasspath()
{    return addedToClasspath;}
583d8450dd420cc6a33ecdfe1ad8e7989d361103193306843fbb177123bd93f8
setAddedToClasspath
public void setAddedToClasspath(boolean addedToClasspath)
{    this.addedToClasspath = addedToClasspath;}
1b864886083253fd85840769de7393ac18b3f60f40d36fbe9862928d819b79b0
getArtifactHandler
public ArtifactHandler getArtifactHandler(String type)
{    ArtifactHandler handler = allHandlers.get(type);    if (handler == null) {        handler = artifactHandlers.get(type);        if (handler == null) {            handler = new DefaultArtifactHandler(type);        } else {            allHandlers.put(type, handler);        }    }    return handler;}
0e9f75b484b154785a4f98c688f315a8dceca49f464b08b1eef32c34bffa8d2c
addHandlers
public void addHandlers(Map<String, ArtifactHandler> handlers)
{        allHandlers.putAll(handlers);}
4b119c590859d23002096132c99a00ca9d9ae8aa21d1c6c64880680092cc8e0f
getHandlerTypes
public Set<String> getHandlerTypes()
{    return artifactHandlers.keySet();}
ec5d47c6b6e5f8da6ece200c16163570f9f4ce20e78a71709b1e7af4041fd868
getRepositoryId
public String getRepositoryId()
{    return repositoryId;}
d62034321e7b6e3862bdf00684c244e44d3b2e2891288bf9430f4a04a1eb321d
getRepositoryRequest
public static RepositoryRequest getRepositoryRequest(MavenSession session, MavenProject project)
{    RepositoryRequest request = new DefaultRepositoryRequest();    request.setLocalRepository(session.getLocalRepository());    if (project != null) {        request.setRemoteRepositories(project.getPluginArtifactRepositories());    }    request.setOffline(session.isOffline());    request.setForceUpdate(session.getRequest().isUpdateSnapshots());    return request;}
9d7e8383b61b322508efc2a10595b57ab46f671235178f463907d85cad8d79c1
isOffline
public boolean isOffline()
{    return offline;}
aa97f4e41189045289adffd9c1831f264a48cc7f152d80f7684bbd11f0fb4a38
setOffline
public DefaultRepositoryRequest setOffline(boolean offline)
{    this.offline = offline;    return this;}
0d692361707bc74f9529b94f4ca2d694302c4a69ffd8ce760f01aeb760ad780c
isForceUpdate
public boolean isForceUpdate()
{    return forceUpdate;}
43c68a595f929402996bc984a2ea91ecef5a8578c4052bd8626ae33d62308be5
setForceUpdate
public DefaultRepositoryRequest setForceUpdate(boolean forceUpdate)
{    this.forceUpdate = forceUpdate;    return this;}
64dc696be33c6c348d62217243ad7506283ed2be89f1b5410c8acb51390d930b
getLocalRepository
public ArtifactRepository getLocalRepository()
{    return localRepository;}
dba3f3bfa4ad9f113e4d264107d195121132a9776c072d2b33dcf58cf40ad7ce
setLocalRepository
public DefaultRepositoryRequest setLocalRepository(ArtifactRepository localRepository)
{    this.localRepository = localRepository;    return this;}
4fd44e1a9f23aaf113060017b1d8f6d3cf8794c129edf477e6b2ddacdfe7400d
getRemoteRepositories
public List<ArtifactRepository> getRemoteRepositories()
{    if (remoteRepositories == null) {        remoteRepositories = new ArrayList<>();    }    return remoteRepositories;}
994b000462d07f3634acf4a7a0811cfffbaf5ca63ee23ad0a2cf7ca721ff1e84
setRemoteRepositories
public DefaultRepositoryRequest setRemoteRepositories(List<ArtifactRepository> remoteRepositories)
{    this.remoteRepositories = remoteRepositories;    return this;}
09e8f13a9a603d31d64bb498b77d15572483824d843d0e82a570643192f62186
getId
public String getId()
{    return "default";}
6c63652ca89949e5d136675e9b8c89f393e36286bda4d26fa63c77d8d06c4fab
pathOf
public String pathOf(Artifact artifact)
{    ArtifactHandler artifactHandler = artifact.getArtifactHandler();    StringBuilder path = new StringBuilder(128);    path.append(formatAsDirectory(artifact.getGroupId())).append(PATH_SEPARATOR);    path.append(artifact.getArtifactId()).append(PATH_SEPARATOR);    path.append(artifact.getBaseVersion()).append(PATH_SEPARATOR);    path.append(artifact.getArtifactId()).append(ARTIFACT_SEPARATOR).append(artifact.getVersion());    if (artifact.hasClassifier()) {        path.append(ARTIFACT_SEPARATOR).append(artifact.getClassifier());    }    if (artifactHandler.getExtension() != null && artifactHandler.getExtension().length() > 0) {        path.append(GROUP_SEPARATOR).append(artifactHandler.getExtension());    }    return path.toString();}
2bf3ce12ca84872494a2865c7a246067b1efd12dc3403ae1a3b69eb89fda872e
pathOfLocalRepositoryMetadata
public String pathOfLocalRepositoryMetadata(ArtifactMetadata metadata, ArtifactRepository repository)
{    return pathOfRepositoryMetadata(metadata, metadata.getLocalFilename(repository));}
b126eb700f169df57ef58e793e786479d7eea9e4bc840fe4603f35688a4a3510
pathOfRepositoryMetadata
private String pathOfRepositoryMetadata(ArtifactMetadata metadata, String filename)
{    StringBuilder path = new StringBuilder(128);    path.append(formatAsDirectory(metadata.getGroupId())).append(PATH_SEPARATOR);    if (!metadata.storedInGroupDirectory()) {        path.append(metadata.getArtifactId()).append(PATH_SEPARATOR);        if (metadata.storedInArtifactVersionDirectory()) {            path.append(metadata.getBaseVersion()).append(PATH_SEPARATOR);        }    }    path.append(filename);    return path.toString();}
71592720c0b04200497abee0127a385a42bb60fee54e020cce105b67cd21d2e7
pathOfRemoteRepositoryMetadata
public String pathOfRemoteRepositoryMetadata(ArtifactMetadata metadata)
{    return pathOfRepositoryMetadata(metadata, metadata.getRemoteFilename());}
1ae91fd8157560fc695f97a16e6a8ab464ba20e6d14f9926e9c470ed7a55963e
formatAsDirectory
private String formatAsDirectory(String directory)
{    return directory.replace(GROUP_SEPARATOR, PATH_SEPARATOR);}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return getId();}
3356173b070bf4308036d226e5e41325917c95c41f8c487f5eff3ec20201c62f
overlay
public static RepositorySystemSession overlay(ArtifactRepository repository, RepositorySystemSession session, RepositorySystem system)
{    if (repository == null || repository.getBasedir() == null) {        return session;    }    if (session != null) {        LocalRepositoryManager lrm = session.getLocalRepositoryManager();        if (lrm != null && lrm.getRepository().getBasedir().equals(new File(repository.getBasedir()))) {            return session;        }    } else {        session = new DefaultRepositorySystemSession();    }    final LocalRepositoryManager llrm = new LegacyLocalRepositoryManager(repository);    return new DefaultRepositorySystemSession(session).setLocalRepositoryManager(llrm);}
89f1638f505b8271e8dd106a568ddd52a6fa936a9a443c7edf329af2cdf4ccc9
getRepository
public LocalRepository getRepository()
{    return repo;}
d4e5521b42b67adbcdbde521459c0bf3fa079aa6fb1e41d54e154da4944e61a2
getPathForLocalArtifact
public String getPathForLocalArtifact(Artifact artifact)
{    if (realLocalRepo) {        return delegate.pathOf(RepositoryUtils.toArtifact(artifact.setVersion(artifact.getBaseVersion())));    }    return delegate.pathOf(RepositoryUtils.toArtifact(artifact));}
a5aae4fdc9f8e53af8b7d1de01e9c45714e8ef19194af0fce3ca7c15bf456e71
getPathForRemoteArtifact
public String getPathForRemoteArtifact(Artifact artifact, RemoteRepository repository, String context)
{    return delegate.pathOf(RepositoryUtils.toArtifact(artifact));}
b59230202063850b56827f9e04be9d24e31dc729958d0692757693f006d1dee1
getPathForLocalMetadata
public String getPathForLocalMetadata(Metadata metadata)
{    return delegate.pathOfLocalRepositoryMetadata(new ArtifactMetadataAdapter(metadata), delegate);}
bb644dfe46d4351aa5ff27e75cdbd31e605bfe45a8c8f975765cc64afb0129bb
getPathForRemoteMetadata
public String getPathForRemoteMetadata(Metadata metadata, RemoteRepository repository, String context)
{    return delegate.pathOfLocalRepositoryMetadata(new ArtifactMetadataAdapter(metadata), new ArtifactRepositoryAdapter(repository));}
d47545d8b9d69ca4f807125761430a3980f7977633bed9bb451c8374136256dc
find
public LocalArtifactResult find(RepositorySystemSession session, LocalArtifactRequest request)
{    String path = getPathForLocalArtifact(request.getArtifact());    File file = new File(getRepository().getBasedir(), path);    LocalArtifactResult result = new LocalArtifactResult(request);    if (file.isFile()) {        result.setFile(file);        result.setAvailable(true);    }    return result;}
785925ab40a1c8dcdf706067283c756eb376d28ae46ef28d0e8de179d49b8041
find
public LocalMetadataResult find(RepositorySystemSession session, LocalMetadataRequest request)
{    Metadata metadata = request.getMetadata();    String path;    if (request.getRepository() == null) {        path = getPathForLocalMetadata(metadata);    } else {        path = getPathForRemoteMetadata(metadata, request.getRepository(), request.getContext());    }    File file = new File(getRepository().getBasedir(), path);    LocalMetadataResult result = new LocalMetadataResult(request);    if (file.isFile()) {        result.setFile(file);    }    return result;}
f1ea2a44352c3ef6d1164b4a519aff25947342f5a526bdff5c76cf9b178a2887
add
public void add(RepositorySystemSession session, LocalArtifactRegistration request)
{}
12cd16cf6f6ca36eb33869b9573c1f80026030c65a5ee0b1cb74168b95a92a3f
add
public void add(RepositorySystemSession session, LocalMetadataRegistration request)
{}
a566aae8ebe271cc85083f8936c9f756e314dec79de7b7324b49bc9aca8bc3e6
storedInArtifactVersionDirectory
public boolean storedInArtifactVersionDirectory()
{    return metadata.getVersion().length() > 0;}
aea943cbaf8dc855792e6e2de7f6a7341ed98e92852166fb77b4cc44da614bff
storedInGroupDirectory
public boolean storedInGroupDirectory()
{    return metadata.getArtifactId().length() <= 0;}
9590314d7a6edd0118345714cc714a8e73448e57e702bb4c6893b363f509d64d
getGroupId
public String getGroupId()
{    return nullify(metadata.getGroupId());}
1e5191dc99d9314f2df50294bcd8d717af7b8f4311575d36d8d75b27121f1064
getArtifactId
public String getArtifactId()
{    return nullify(metadata.getArtifactId());}
2127b25546d419ff53a6da73c9acb361090188bd943b368d5e79d3f5d5595571
getBaseVersion
public String getBaseVersion()
{    return nullify(metadata.getVersion());}
1bb63540e1733205e004d01ff482b069b6bdd89263e722ac82262aebc3f649c9
nullify
private String nullify(String str)
{    return (str == null || str.length() <= 0) ? null : str;}
b2585874b87865eace30c330168a04230bae89eeda3d2fe20bf9bf198ae6751e
getKey
public Object getKey()
{    return metadata.toString();}
8b77e95c875b704c04f5ddbdbde0bedd5658db2b49479f38a5ae2b19decf32f7
getRemoteFilename
public String getRemoteFilename()
{    return metadata.getType();}
b8cc1cf841dbcb267a3d27699bb84c13ea8682df96140377dfa882858737fe9d
getLocalFilename
public String getLocalFilename(ArtifactRepository repository)
{    return insertRepositoryKey(getRemoteFilename(), repository.getKey());}
2a1e3b50adae794feaca7aa7ca66fb5ed04cc9930fa3b7f40a341c4dd60de3f8
insertRepositoryKey
private String insertRepositoryKey(String filename, String repositoryKey)
{    String result;    int idx = filename.indexOf('.');    if (idx < 0) {        result = filename + '-' + repositoryKey;    } else {        result = filename.substring(0, idx) + '-' + repositoryKey + filename.substring(idx);    }    return result;}
e39e849b5ab9270b13585a83606bd4dbbf47fb0247fd2db3f4a5bb3e00659e12
merge
public void merge(org.apache.maven.repository.legacy.metadata.ArtifactMetadata metadata)
{}
937b6b89139de0aba5ab3f963e257534282a146337ca9fd3f06b42363674f536
merge
public void merge(ArtifactMetadata metadata)
{}
80fe21068bf70166f67383e729c4e5d6684fd85dd050417c4d779e33eb44b1f7
storeInLocalRepository
public void storeInLocalRepository(ArtifactRepository localRepository, ArtifactRepository remoteRepository) throws RepositoryMetadataStoreException
{}
1f525bff1f51744c6b1f2ca9c4dde3286e4f8d0ac339b85bdcc2a87489eba75f
extendedToString
public String extendedToString()
{    return metadata.toString();}
2b2b9b0e38c5cf96bc1216809208e027723bf89239383280c4cf669e0b0d078b
pathOf
public String pathOf(org.apache.maven.artifact.Artifact artifact)
{    return null;}
27cf106da6e0f0a2e028e1c2df0f3942f631e27187b238c6910a6fd698f94fe1
pathOfRemoteRepositoryMetadata
public String pathOfRemoteRepositoryMetadata(ArtifactMetadata artifactMetadata)
{    return null;}
2bf3ce12ca84872494a2865c7a246067b1efd12dc3403ae1a3b69eb89fda872e
pathOfLocalRepositoryMetadata
public String pathOfLocalRepositoryMetadata(ArtifactMetadata metadata, ArtifactRepository repository)
{    return null;}
354afe66bbdb19ee4d620955bbb214ebf9b5aa09359dea30ffb867002b5a25bd
getUrl
public String getUrl()
{    return repository.getUrl();}
c3d2ee14b0a87d91276b6034d452ebbd50ed47914948b9edaea83747da585af6
setUrl
public void setUrl(String url)
{}
3d255fad7e1640f914328be877db7f64afb0c48ada31dcd44a5404895e01e539
getBasedir
public String getBasedir()
{    return null;}
6a5c52ec96402a32005f10b5e3e237a089c21a231622163ebe5dea143f2fdbbe
getProtocol
public String getProtocol()
{    return repository.getProtocol();}
09e8f13a9a603d31d64bb498b77d15572483824d843d0e82a570643192f62186
getId
public String getId()
{    return repository.getId();}
ef03857fdefb7c5e949826b070dcbdc52b14cca8f50e0c7e1f5da4ee7e390f1a
setId
public void setId(String id)
{}
222a67553e8947003641acb334617108f322c14e725a15da2df9d63dc24f62ac
getSnapshots
public ArtifactRepositoryPolicy getSnapshots()
{    return null;}
59f47db81462fa74dbf80c332fce10966ef48b70e08cac2d3eadada70547ce9c
setSnapshotUpdatePolicy
public void setSnapshotUpdatePolicy(ArtifactRepositoryPolicy policy)
{}
e409ed7b242cdfb930e2827760f13012a0489d3783c0c87a55ae976f5bdedf94
getReleases
public ArtifactRepositoryPolicy getReleases()
{    return null;}
56aee03ba63484ace47c2c829d9d346f127d1a68b6182c6b261ec09531969b0e
setReleaseUpdatePolicy
public void setReleaseUpdatePolicy(ArtifactRepositoryPolicy policy)
{}
eaccd05b88d213888c2ea72d48c7456d59c1658d3dcd60e329d9f0dbcbd30ba5
getLayout
public ArtifactRepositoryLayout getLayout()
{    return null;}
7e78cfde6963ae37d7bb68a98252859899af1a04bcfa98adb74741de408e0a08
setLayout
public void setLayout(ArtifactRepositoryLayout layout)
{}
71dcee8caa732fdfbbc9042fbd951dc9dfd911ed9a4cabf0966856ac5de53dfc
getKey
public String getKey()
{    return getId();}
a293b6df57609783e6668651cb67ec26359ef344440dd30ba2712ad30c619b60
isUniqueVersion
public boolean isUniqueVersion()
{    return true;}
e3ffd24a285871396c4767f82c071f93b11f1b926d4b45e72fd04b9c3e3f9c39
isBlacklisted
public boolean isBlacklisted()
{    return false;}
29c5303c2a2082149c09b4aad57e76f0d8aee127bc090029f8749c1be61c436b
setBlacklisted
public void setBlacklisted(boolean blackListed)
{}
a9ee37435f58ea4dd9ae7cdb954aec1075c69e14ef66bcb3cf044befa460ca20
find
public org.apache.maven.artifact.Artifact find(org.apache.maven.artifact.Artifact artifact)
{    return null;}
dc936c3080238ab46075c72e53b189bad1e3ee739f73d3d98909f28a2d9981d1
findVersions
public List<String> findVersions(org.apache.maven.artifact.Artifact artifact)
{    return Collections.emptyList();}
08669c105bbf3a115f15048726a5d208c925555af6227b68853f58de5d081665
isProjectAware
public boolean isProjectAware()
{    return false;}
d9ef7e844af4717e446e197021842a9116efb3e8353c92f0b9ec31975d0330d9
setAuthentication
public void setAuthentication(Authentication authentication)
{}
88ff97d266872019a27a324a427d72e949925137862c788004af02551c925751
getAuthentication
public Authentication getAuthentication()
{    return null;}
6e75a24b61d743c90df7ce73337896b8b791f32af0703cf863cc6dc11e03d783
setProxy
public void setProxy(Proxy proxy)
{}
c70b87b7ec5d89054605722508abc6cf4c33d7e80c898c44a9112dbd3f52c7be
getProxy
public Proxy getProxy()
{    return null;}
2701253879f2e277f540f1efb5ee870b347b549c9c694bae84534aad1654feaa
getMirroredRepositories
public List<ArtifactRepository> getMirroredRepositories()
{    return Collections.emptyList();}
9f57ef1a9b76fe6eba32f26728fcf96fdd5c7ba5ffe630b9410f1786ec46da32
setMirroredRepositories
public void setMirroredRepositories(List<ArtifactRepository> mirroredRepositories)
{}
6c63652ca89949e5d136675e9b8c89f393e36286bda4d26fa63c77d8d06c4fab
pathOf
public String pathOf(Artifact artifact)
{    return layout.pathOf(artifact);}
27cf106da6e0f0a2e028e1c2df0f3942f631e27187b238c6910a6fd698f94fe1
pathOfRemoteRepositoryMetadata
public String pathOfRemoteRepositoryMetadata(ArtifactMetadata artifactMetadata)
{    return layout.pathOfRemoteRepositoryMetadata(artifactMetadata);}
2bf3ce12ca84872494a2865c7a246067b1efd12dc3403ae1a3b69eb89fda872e
pathOfLocalRepositoryMetadata
public String pathOfLocalRepositoryMetadata(ArtifactMetadata metadata, ArtifactRepository repository)
{    return layout.pathOfLocalRepositoryMetadata(metadata, repository);}
7e78cfde6963ae37d7bb68a98252859899af1a04bcfa98adb74741de408e0a08
setLayout
public void setLayout(ArtifactRepositoryLayout layout)
{    this.layout = layout;}
eaccd05b88d213888c2ea72d48c7456d59c1658d3dcd60e329d9f0dbcbd30ba5
getLayout
public ArtifactRepositoryLayout getLayout()
{    return layout;}
c51880675a292e1185cf5293eee389b8dd45e3f92adb2d755a254d0279d6f19f
setSnapshotUpdatePolicy
public void setSnapshotUpdatePolicy(ArtifactRepositoryPolicy snapshots)
{    this.snapshots = snapshots;}
222a67553e8947003641acb334617108f322c14e725a15da2df9d63dc24f62ac
getSnapshots
public ArtifactRepositoryPolicy getSnapshots()
{    return snapshots;}
b2ef7788eb28cb05cdce91a4de4843a00e75242c8b73da89366821d2f05a1a88
setReleaseUpdatePolicy
public void setReleaseUpdatePolicy(ArtifactRepositoryPolicy releases)
{    this.releases = releases;}
e409ed7b242cdfb930e2827760f13012a0489d3783c0c87a55ae976f5bdedf94
getReleases
public ArtifactRepositoryPolicy getReleases()
{    return releases;}
71dcee8caa732fdfbbc9042fbd951dc9dfd911ed9a4cabf0966856ac5de53dfc
getKey
public String getKey()
{    return getId();}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    StringBuilder sb = new StringBuilder(256);    sb.append("      id: ").append(getId()).append('\n');    sb.append("      url: ").append(getUrl()).append('\n');    sb.append("   layout: ").append(layout != null ? layout : "none").append('\n');    if (proxy != null) {        sb.append("    proxy: ").append(proxy.getHost()).append(':').append(proxy.getPort()).append('\n');    }    if (snapshots != null) {        sb.append("snapshots: [enabled => ").append(snapshots.isEnabled());        sb.append(", update => ").append(snapshots.getUpdatePolicy()).append("]\n");    }    if (releases != null) {        sb.append(" releases: [enabled => ").append(releases.isEnabled());        sb.append(", update => ").append(releases.getUpdatePolicy()).append("]\n");    }    return sb.toString();}
288e92881fed3bc8b09523aa53dbafc19c0d7a2134e03bc81446cb3e3ad05475
find
public Artifact find(Artifact artifact)
{    File artifactFile = new File(getBasedir(), pathOf(artifact));            artifact.setFile(artifactFile);    return artifact;}
7dbbbbca6cf59b7ba416355d0104cfe6d956ee9ca82698b8c55c8e726946b44d
findVersions
public List<String> findVersions(Artifact artifact)
{    return Collections.emptyList();}
09e8f13a9a603d31d64bb498b77d15572483824d843d0e82a570643192f62186
getId
public String getId()
{    return id;}
354afe66bbdb19ee4d620955bbb214ebf9b5aa09359dea30ffb867002b5a25bd
getUrl
public String getUrl()
{    return url;}
3d255fad7e1640f914328be877db7f64afb0c48ada31dcd44a5404895e01e539
getBasedir
public String getBasedir()
{    return basedir;}
6a5c52ec96402a32005f10b5e3e237a089c21a231622163ebe5dea143f2fdbbe
getProtocol
public String getProtocol()
{    return protocol;}
ef03857fdefb7c5e949826b070dcbdc52b14cca8f50e0c7e1f5da4ee7e390f1a
setId
public void setId(String id)
{    this.id = id;}
c3d2ee14b0a87d91276b6034d452ebbd50ed47914948b9edaea83747da585af6
setUrl
public void setUrl(String url)
{    this.url = url;    this.protocol = protocol(url);    this.basedir = basedir(url);}
67f91b380d6b349771be85ee0945de72bc510220e317b352eb9229194e4488bb
protocol
private static String protocol(final String url)
{    final int pos = url.indexOf(':');    if (pos == -1) {        return "";    }    return url.substring(0, pos).trim();}
aee61449727b1b36062ee5b052bdbaaffc33e37cfadc9fd69387086c27cf3826
basedir
private String basedir(String url)
{    String retValue = null;    if (protocol.equalsIgnoreCase("file")) {        retValue = url.substring(protocol.length() + 1);        retValue = decode(retValue);                if (retValue.startsWith("//")) {            retValue = retValue.substring(2);            if (retValue.length() >= 2 && (retValue.charAt(1) == '|' || retValue.charAt(1) == ':')) {                                retValue = retValue.charAt(0) + ":" + retValue.substring(2);            } else {                                int index = retValue.indexOf('/');                if (index >= 0) {                    retValue = retValue.substring(index + 1);                }                                if (retValue.length() >= 2 && (retValue.charAt(1) == '|' || retValue.charAt(1) == ':')) {                    retValue = retValue.charAt(0) + ":" + retValue.substring(2);                } else if (index >= 0) {                                        retValue = "/" + retValue;                }            }        }                if (retValue.length() >= 2 && retValue.charAt(1) == '|') {            retValue = retValue.charAt(0) + ":" + retValue.substring(2);        }                retValue = new File(retValue).getPath();    }    if (retValue == null) {        retValue = "/";    }    return retValue.trim();}
fc7560a6a9641147788c15768be3a53e1ef00743ea3739b9e185a75d14a61f38
decode
private static String decode(String url)
{    String decoded = url;    if (url != null) {        int pos = -1;        while ((pos = decoded.indexOf('%', pos + 1)) >= 0) {            if (pos + 2 < decoded.length()) {                String hexStr = decoded.substring(pos + 1, pos + 3);                char ch = (char) Integer.parseInt(hexStr, 16);                decoded = decoded.substring(0, pos) + ch + decoded.substring(pos + 3);            }        }    }    return decoded;}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    final int prime = 31;    int result = 1;    result = prime * result + ((getId() == null) ? 0 : getId().hashCode());    return result;}
4afeb0868b55bdd8e18a00a3cb43d83e0714378d1c4bb36f0936daefc060e2e8
equals
public boolean equals(Object obj)
{    if (this == obj) {        return true;    }    if (obj == null) {        return false;    }    if (getClass() != obj.getClass()) {        return false;    }    ArtifactRepository other = (ArtifactRepository) obj;    return eq(getId(), other.getId());}
1702790a2770e5e74222f03f462eafe58e8f31ae8a8e090aba50d83df8478cd4
eq
protected static boolean eq(T s1, T s2)
{    return Objects.equals(s1, s2);}
88ff97d266872019a27a324a427d72e949925137862c788004af02551c925751
getAuthentication
public Authentication getAuthentication()
{    return authentication;}
d9ef7e844af4717e446e197021842a9116efb3e8353c92f0b9ec31975d0330d9
setAuthentication
public void setAuthentication(Authentication authentication)
{    this.authentication = authentication;}
c70b87b7ec5d89054605722508abc6cf4c33d7e80c898c44a9112dbd3f52c7be
getProxy
public Proxy getProxy()
{    return proxy;}
6e75a24b61d743c90df7ce73337896b8b791f32af0703cf863cc6dc11e03d783
setProxy
public void setProxy(Proxy proxy)
{    this.proxy = proxy;}
e3ffd24a285871396c4767f82c071f93b11f1b926d4b45e72fd04b9c3e3f9c39
isBlacklisted
public boolean isBlacklisted()
{    return false;}
29c5303c2a2082149c09b4aad57e76f0d8aee127bc090029f8749c1be61c436b
setBlacklisted
public void setBlacklisted(boolean blackListed)
{}
a293b6df57609783e6668651cb67ec26359ef344440dd30ba2712ad30c619b60
isUniqueVersion
public boolean isUniqueVersion()
{    return true;}
08669c105bbf3a115f15048726a5d208c925555af6227b68853f58de5d081665
isProjectAware
public boolean isProjectAware()
{    return false;}
2701253879f2e277f540f1efb5ee870b347b549c9c694bae84534aad1654feaa
getMirroredRepositories
public List<ArtifactRepository> getMirroredRepositories()
{    return mirroredRepositories;}
9f57ef1a9b76fe6eba32f26728fcf96fdd5c7ba5ffe630b9410f1786ec46da32
setMirroredRepositories
public void setMirroredRepositories(List<ArtifactRepository> mirroredRepositories)
{    if (mirroredRepositories != null) {        this.mirroredRepositories = Collections.unmodifiableList(mirroredRepositories);    } else {        this.mirroredRepositories = Collections.emptyList();    }}
8b77e95c875b704c04f5ddbdbde0bedd5658db2b49479f38a5ae2b19decf32f7
getRemoteFilename
public String getRemoteFilename()
{    return "maven-metadata.xml";}
b8cc1cf841dbcb267a3d27699bb84c13ea8682df96140377dfa882858737fe9d
getLocalFilename
public String getLocalFilename(ArtifactRepository repository)
{    return "maven-metadata-" + repository.getKey() + ".xml";}
80fe21068bf70166f67383e729c4e5d6684fd85dd050417c4d779e33eb44b1f7
storeInLocalRepository
public void storeInLocalRepository(ArtifactRepository localRepository, ArtifactRepository remoteRepository) throws RepositoryMetadataStoreException
{    try {        updateRepositoryMetadata(localRepository, remoteRepository);    } catch (IOException | XmlPullParserException e) {        throw new RepositoryMetadataStoreException("Error updating group repository metadata", e);    }}
7ebec8c25195d8d4e464124e1082a2b140b1f42cbcf3b975c2963251426a10ce
updateRepositoryMetadata
protected void updateRepositoryMetadata(ArtifactRepository localRepository, ArtifactRepository remoteRepository) throws IOException, XmlPullParserException
{    MetadataXpp3Reader mappingReader = new MetadataXpp3Reader();    Metadata metadata = null;    File metadataFile = new File(localRepository.getBasedir(), localRepository.pathOfLocalRepositoryMetadata(this, remoteRepository));    if (metadataFile.length() == 0) {        if (!metadataFile.delete()) {                        try {                Thread.sleep(10);            } catch (InterruptedException e) {                        }                        metadataFile.delete();                }    } else if (metadataFile.exists()) {        try (Reader reader = ReaderFactory.newXmlReader(metadataFile)) {            metadata = mappingReader.read(reader, false);        }    }    boolean changed;        if (metadata == null) {        metadata = this.metadata;        changed = true;    } else {        changed = metadata.merge(this.metadata);    }        String version = metadata.getVersion();    if (version != null && (Artifact.LATEST_VERSION.equals(version) || Artifact.RELEASE_VERSION.equals(version))) {                metadata.setVersion(null);    }    if (changed || !metadataFile.exists()) {        metadataFile.getParentFile().mkdirs();        try (Writer writer = WriterFactory.newXmlWriter(metadataFile)) {            MetadataXpp3Writer mappingWriter = new MetadataXpp3Writer();            mappingWriter.write(writer, metadata);        }    } else {        metadataFile.setLastModified(System.currentTimeMillis());    }}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return "repository metadata for: \'" + getKey() + "\'";}
e337ea7bd1448e36f7ec3023aa872342d081f21106122cee7cad253014099a60
createMetadata
protected static Metadata createMetadata(Artifact artifact, Versioning versioning)
{    Metadata metadata = new Metadata();    metadata.setGroupId(artifact.getGroupId());    metadata.setArtifactId(artifact.getArtifactId());    metadata.setVersion(artifact.getVersion());    metadata.setVersioning(versioning);    return metadata;}
542a21fbd6023bdd665b6319b1191622273fd934eb21357a45d4bf34da1842e2
createVersioning
protected static Versioning createVersioning(Snapshot snapshot)
{    Versioning versioning = new Versioning();    versioning.setSnapshot(snapshot);    versioning.updateTimestamp();    return versioning;}
3d75b4f93fffacb6e9ca645720d4a174e7b1772706baab104d664fe61f0c9f7f
setMetadata
public void setMetadata(Metadata metadata)
{    this.metadata = metadata;}
3278491613baf75b185ed9d8d57b8e0f596c9babb670aa112cc72d53896855cf
getMetadata
public Metadata getMetadata()
{    return metadata;}
e39e849b5ab9270b13585a83606bd4dbbf47fb0247fd2db3f4a5bb3e00659e12
merge
public void merge(org.apache.maven.repository.legacy.metadata.ArtifactMetadata metadata)
{            AbstractRepositoryMetadata repoMetadata = (AbstractRepositoryMetadata) metadata;    this.metadata.merge(repoMetadata.getMetadata());}
937b6b89139de0aba5ab3f963e257534282a146337ca9fd3f06b42363674f536
merge
public void merge(ArtifactMetadata metadata)
{            AbstractRepositoryMetadata repoMetadata = (AbstractRepositoryMetadata) metadata;    this.metadata.merge(repoMetadata.getMetadata());}
1f525bff1f51744c6b1f2ca9c4dde3286e4f8d0ac339b85bdcc2a87489eba75f
extendedToString
public String extendedToString()
{    StringBuilder buffer = new StringBuilder(256);    buffer.append("\nRepository Metadata\n--------------------------");    buffer.append("\nGroupId: ").append(getGroupId());    buffer.append("\nArtifactId: ").append(getArtifactId());    buffer.append("\nMetadata Type: ").append(getClass().getName());    return buffer.toString();}
3cbbe47b1ad336a16cce0b0b4862f773607af011ff584dce9f2e75aff31065b5
getNature
public int getNature()
{    return RELEASE;}
0866952ce239f71ea692e8b02a536ab5725c3f33e705870c2633b0c25e9520d6
getPolicy
public ArtifactRepositoryPolicy getPolicy(ArtifactRepository repository)
{    int nature = getNature();    if ((nature & RepositoryMetadata.RELEASE_OR_SNAPSHOT) == RepositoryMetadata.RELEASE_OR_SNAPSHOT) {        ArtifactRepositoryPolicy policy = new ArtifactRepositoryPolicy(repository.getReleases());        policy.merge(repository.getSnapshots());        return policy;    } else if ((nature & RepositoryMetadata.SNAPSHOT) != 0) {        return repository.getSnapshots();    } else {        return repository.getReleases();    }}
aea943cbaf8dc855792e6e2de7f6a7341ed98e92852166fb77b4cc44da614bff
storedInGroupDirectory
public boolean storedInGroupDirectory()
{    return false;}
a566aae8ebe271cc85083f8936c9f756e314dec79de7b7324b49bc9aca8bc3e6
storedInArtifactVersionDirectory
public boolean storedInArtifactVersionDirectory()
{    return false;}
9590314d7a6edd0118345714cc714a8e73448e57e702bb4c6893b363f509d64d
getGroupId
public String getGroupId()
{    return artifact.getGroupId();}
1e5191dc99d9314f2df50294bcd8d717af7b8f4311575d36d8d75b27121f1064
getArtifactId
public String getArtifactId()
{    return artifact.getArtifactId();}
2127b25546d419ff53a6da73c9acb361090188bd943b368d5e79d3f5d5595571
getBaseVersion
public String getBaseVersion()
{        return null;}
b2585874b87865eace30c330168a04230bae89eeda3d2fe20bf9bf198ae6751e
getKey
public Object getKey()
{    return "artifact " + artifact.getGroupId() + ":" + artifact.getArtifactId();}
2ade99e89c0802b58f3776f3f0e6d2be8b4db4b2629b011476786812f36d732e
isSnapshot
public boolean isSnapshot()
{        return false;}
3cbbe47b1ad336a16cce0b0b4862f773607af011ff584dce9f2e75aff31065b5
getNature
public int getNature()
{    if (artifact.getVersion() != null) {        return artifact.isSnapshot() ? SNAPSHOT : RELEASE;    }    VersionRange range = artifact.getVersionRange();    if (range != null) {        for (Restriction restriction : range.getRestrictions()) {            if (isSnapshot(restriction.getLowerBound()) || isSnapshot(restriction.getUpperBound())) {                return RELEASE_OR_SNAPSHOT;            }        }    }    return RELEASE;}
efa8bb18658ee35823134b34897aba35a15e4499e6ec7f3a4020c7a24596c972
isSnapshot
private boolean isSnapshot(ArtifactVersion version)
{    return version != null && ArtifactUtils.isSnapshot(version.getQualifier());}
2173adbe55779ccb687142434f49e47b69ce1c4fc751fc2716e0487d65e3ec95
getRepository
public ArtifactRepository getRepository()
{    return null;}
3a2c20e3165e67e6a131ae78f6983fa19e8e2c2f33ad8e48ebf251b6d5463817
setRepository
public void setRepository(ArtifactRepository remoteRepository)
{/*         * NOTE: Metadata at the g:a level contains a collection of available versions. After merging, we can't tell         * which repository provides which version so the metadata manager must not restrict the artifact resolution to         * the repository with the most recent updates.         */}
947f989a3ceacc09fe4349d0ab317e02fa894a6a0236e574147bdc8ac0474dee
read
public Metadata read(File input, Map<String, ?> options) throws IOException
{    Objects.requireNonNull(input, "input cannot be null");    Metadata metadata = read(ReaderFactory.newXmlReader(input), options);    return metadata;}
e84eef58065497499b20623a6305f1bdf7361f66376ebddeb32fafe126e2a30a
read
public Metadata read(Reader input, Map<String, ?> options) throws IOException
{    Objects.requireNonNull(input, "input cannot be null");    try (final Reader in = input) {        return new MetadataXpp3Reader().read(in, isStrict(options));    } catch (XmlPullParserException e) {        throw new MetadataParseException(e.getMessage(), e.getLineNumber(), e.getColumnNumber(), e);    }}
d8cb13b333a2bc37bae913a6fddbf778ef72111891ea3be9107f3f41cc61d451
read
public Metadata read(InputStream input, Map<String, ?> options) throws IOException
{    Objects.requireNonNull(input, "input cannot be null");    try (final InputStream in = input) {        return new MetadataXpp3Reader().read(in, isStrict(options));    } catch (XmlPullParserException e) {        throw new MetadataParseException(e.getMessage(), e.getLineNumber(), e.getColumnNumber(), e);    }}
6c7fea5c07553d4dd29f26b80b3a43d5b3576e5ae38d612c87b5e80f010983ed
isStrict
private boolean isStrict(Map<String, ?> options)
{    Object value = (options != null) ? options.get(IS_STRICT) : null;    return value == null || Boolean.parseBoolean(value.toString());}
d0206afdd4bbfbca49378097e83c12789d7836ac6e56572eee8d2abd20c4c84d
getLineNumber
public int getLineNumber()
{    return lineNumber;}
de418c2b40b113f31f0e80a27291a5fc9f70e24067ed5b3ab5871ddcb04ceb6e
getColumnNumber
public int getColumnNumber()
{    return columnNumber;}
74532920252ab24aba3facb8f78a175de2fc4c1c8247fe2b3b2dce7bf79f6858
getArtifact
public Artifact getArtifact()
{    return artifact;}
21e7383796679495ed302217e63d61c6fa72504f779f5e90b05f64414a37921b
setArtifact
public ArtifactResolutionRequest setArtifact(Artifact artifact)
{    this.artifact = artifact;    return this;}
d621649e80316ad93b09cbe0940a701736922ee990eaa8a730bb506319984e43
setArtifactDependencies
public ArtifactResolutionRequest setArtifactDependencies(Set<Artifact> artifactDependencies)
{    this.artifactDependencies = artifactDependencies;    return this;}
7534c0e1d930e877f11ccdf9321188c374518dba08069605f63c865a342953c0
getArtifactDependencies
public Set<Artifact> getArtifactDependencies()
{    return artifactDependencies;}
64dc696be33c6c348d62217243ad7506283ed2be89f1b5410c8acb51390d930b
getLocalRepository
public ArtifactRepository getLocalRepository()
{    return localRepository;}
d673ce8e3788ef7f4d7908ebdf722ecd27018ca9d9db8ea77269c1dda7629cd4
setLocalRepository
public ArtifactResolutionRequest setLocalRepository(ArtifactRepository localRepository)
{    this.localRepository = localRepository;    return this;}
4fd44e1a9f23aaf113060017b1d8f6d3cf8794c129edf477e6b2ddacdfe7400d
getRemoteRepositories
public List<ArtifactRepository> getRemoteRepositories()
{    return remoteRepositories;}
a6b87f48528af731f35cc91e96607ebf0d8db7ba7d2e643ca9bbac1876cdfff2
setRemoteRepositories
public ArtifactResolutionRequest setRemoteRepositories(List<ArtifactRepository> remoteRepositories)
{    this.remoteRepositories = remoteRepositories;    return this;}
b60aa1f74edfca25291116046ce44893c8f3b3c2fe43c8171c32b5c5763884a2
getCollectionFilter
public ArtifactFilter getCollectionFilter()
{    return collectionFilter;}
903c516d85c36a0d0f2b19f058f34f4a3d82c619cee8225255503100c9304498
setCollectionFilter
public ArtifactResolutionRequest setCollectionFilter(ArtifactFilter filter)
{    this.collectionFilter = filter;    return this;}
74e62b489f92d5b78d76fe637ce8c55abcab3d2a9f4eb2a307d80afcab8245b5
getResolutionFilter
public ArtifactFilter getResolutionFilter()
{    return resolutionFilter;}
0dac0124fcfa7af333e9945accc1c62da0e7dae131ba19df53dc36b75ffb774e
setResolutionFilter
public ArtifactResolutionRequest setResolutionFilter(ArtifactFilter filter)
{    this.resolutionFilter = filter;    return this;}
d6c8a33fc33cce812f258e8c094a337db51b0a97551a579e25dafe93a9f16f0d
getListeners
public List<ResolutionListener> getListeners()
{    return listeners;}
7c40302c2d8ff9639c2e89bd9ca00f2d2a537e1d4c96fa4ac0dcae1454bc1c6b
setListeners
public ArtifactResolutionRequest setListeners(List<ResolutionListener> listeners)
{    this.listeners = listeners;    return this;}
017d833e7bea41153f9070d1c5042e1cf378cef0752777a9fd6675f89c461916
addListener
public ArtifactResolutionRequest addListener(ResolutionListener listener)
{    listeners.add(listener);    return this;}
3ef8060f559ffe73bf6a8b77c7836dc91dcdd4f5c1e05318beef9008ed587b49
getManagedVersionMap
public Map<String, Artifact> getManagedVersionMap()
{    return managedVersionMap;}
0fc2a13a83c3bad483b57f20b9f54bf42260c82f8784ef602e1164b024e672a8
setManagedVersionMap
public ArtifactResolutionRequest setManagedVersionMap(Map<String, Artifact> managedVersionMap)
{    this.managedVersionMap = managedVersionMap;    return this;}
8ccb468ebd5458481a0c6d542e52a808f89024a822d967d4c798aa6664b51ab6
setResolveRoot
public ArtifactResolutionRequest setResolveRoot(boolean resolveRoot)
{    this.resolveRoot = resolveRoot;    return this;}
da67c8b36ba2b2681f3a664cf6a131d8770b91d9f6284cbb1c3d7f3f53fa4e56
isResolveRoot
public boolean isResolveRoot()
{    return resolveRoot;}
fd5eaf104ed27878fbb3abf30a4f0920fca51b4da02b95a6c985c4ff8e301b9e
setResolveTransitively
public ArtifactResolutionRequest setResolveTransitively(boolean resolveDependencies)
{    this.resolveTransitively = resolveDependencies;    return this;}
3d33d375b74328db60c0d71649aaa5e52a66150dfb4ffb6e255cf831b7202014
isResolveTransitively
public boolean isResolveTransitively()
{    return resolveTransitively;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    StringBuilder sb = new StringBuilder().append("REQUEST: ").append("\n").append("artifact: ").append(artifact).append("\n").append(artifactDependencies).append("\n").append("localRepository: ").append(localRepository).append("\n").append("remoteRepositories: ").append(remoteRepositories).append("\n");    return sb.toString();}
9d7e8383b61b322508efc2a10595b57ab46f671235178f463907d85cad8d79c1
isOffline
public boolean isOffline()
{    return offline;}
9a58807e971a3726e4a72fdc918b0a247feaf7c7a8ff20e5d920326df976ee28
setOffline
public ArtifactResolutionRequest setOffline(boolean offline)
{    this.offline = offline;    return this;}
0d692361707bc74f9529b94f4ca2d694302c4a69ffd8ce760f01aeb760ad780c
isForceUpdate
public boolean isForceUpdate()
{    return forceUpdate;}
38994fd3718fc34ab743b6acd495405fa548df7faccf71e675b3e41585f88231
setForceUpdate
public ArtifactResolutionRequest setForceUpdate(boolean forceUpdate)
{    this.forceUpdate = forceUpdate;    return this;}
9d7a6308998796d8dc373f750515221746bc47bec6ee21c5f227505ea63eeb99
setServers
public ArtifactResolutionRequest setServers(List<Server> servers)
{    this.servers = servers;    return this;}
a50ce03fbdd41821e15d3724fddb0b75023a1201ba0f6a90b301b8541e5eec6c
getServers
public List<Server> getServers()
{    if (servers == null) {        servers = new ArrayList<>();    }    return servers;}
f68a575fe440c2e882a2694329d4ce5f37282fe357c70d4fc9767311aac39f94
setMirrors
public ArtifactResolutionRequest setMirrors(List<Mirror> mirrors)
{    this.mirrors = mirrors;    return this;}
69f4b60c578031d60780c45aa7e594dc69d72de0f04d05943fee5f7396090aff
getMirrors
public List<Mirror> getMirrors()
{    if (mirrors == null) {        mirrors = new ArrayList<>();    }    return mirrors;}
95a584f0b40044463359a8cb2c6d5b932caa1ff2df72f93d7216341321e5cc02
setProxies
public ArtifactResolutionRequest setProxies(List<Proxy> proxies)
{    this.proxies = proxies;    return this;}
1dddedf2228f7f14ce20545b861fc996084e9df55600dfe14616dd12019e32fc
getProxies
public List<Proxy> getProxies()
{    if (proxies == null) {        proxies = new ArrayList<>();    }    return proxies;}
edef58c5e7353f6cf6de553d627a1a3a0ea8904ded0161b7e1e8dcea18163c75
setCache
public ArtifactResolutionRequest setCache(RepositoryCache cache)
{    return this;}
c147a7b6feca62852b6d175286f9a021159aeded96c8aa578d2422b126b0a64b
getOriginatingArtifact
public Artifact getOriginatingArtifact()
{    return originatingArtifact;}
c8e3f5456abdfda753523063042161beda36d7fd2f46c20b0f3150638db81a77
setOriginatingArtifact
public ArtifactResolutionResult setOriginatingArtifact(final Artifact originatingArtifact)
{    this.originatingArtifact = originatingArtifact;    return this;}
9ad93361f44999115a8317aff2798307632ede55fc44f0959e22c6e9ed85ffbf
addArtifact
public void addArtifact(Artifact artifact)
{    if (artifacts == null) {        artifacts = new LinkedHashSet<>();    }    artifacts.add(artifact);}
7fbcab6f8caea634ee263da5b98d32d0edbb7c9976f623f712b9aa9b45246d30
getArtifacts
public Set<Artifact> getArtifacts()
{    if (artifacts == null) {        artifacts = new LinkedHashSet<>();    }    return artifacts;}
7633e3e6e16501175a811d342d3080a50803821687b0bdeede4ec6591c654eff
setArtifacts
public void setArtifacts(Set<Artifact> artifacts)
{    this.artifacts = artifacts;}
165cf30e01f7e5225e4b70a38a9360bb225373ee9bc9a1e73fc355680d9ebaa8
getArtifactResolutionNodes
public Set<ResolutionNode> getArtifactResolutionNodes()
{    if (resolutionNodes == null) {        resolutionNodes = new LinkedHashSet<>();    }    return resolutionNodes;}
62281e282db78f6a8af4fd86a3aad25a61ad8a7b7742446d9e489390d88e09b7
setArtifactResolutionNodes
public void setArtifactResolutionNodes(Set<ResolutionNode> resolutionNodes)
{    this.resolutionNodes = resolutionNodes;}
88178970b2cf7d518f94378fd0b73a623f550fcb2b2dbbacc1154aaedff86489
hasMissingArtifacts
public boolean hasMissingArtifacts()
{    return missingArtifacts != null && !missingArtifacts.isEmpty();}
af9f88fa9ba078665d213d6ee428178026aede11c4b21d282f059bc294a87697
getMissingArtifacts
public List<Artifact> getMissingArtifacts()
{    return missingArtifacts == null ? Collections.<Artifact>emptyList() : Collections.unmodifiableList(missingArtifacts);}
61757e8b438836a2efc36fc3b37c2d9a6d18bf7155d667aef7eb6a4143c9f620
addMissingArtifact
public ArtifactResolutionResult addMissingArtifact(Artifact artifact)
{    missingArtifacts = initList(missingArtifacts);    missingArtifacts.add(artifact);    return this;}
11f62644930fb48b1606905088cdbfec05821c0efa17937b49ee6a6d3899213b
setUnresolvedArtifacts
public ArtifactResolutionResult setUnresolvedArtifacts(final List<Artifact> unresolvedArtifacts)
{    this.missingArtifacts = unresolvedArtifacts;    return this;}
612931c72bde28f1dce5cd75713a8d061fc0015a7653f03c77fdbe463c352c87
isSuccess
public boolean isSuccess()
{    return !(hasMissingArtifacts() || hasExceptions());}
a1a7f8f9ee39d88cbb24fed8790d6985de9b95699c4a9dffd2608570a001490a
hasExceptions
public boolean hasExceptions()
{    return exceptions != null && !exceptions.isEmpty();}
333ae0038ba75ccee34548e072313ef1bbb50247b8d4c16eb7b033dd7684ec47
getExceptions
public List<Exception> getExceptions()
{    return exceptions == null ? Collections.<Exception>emptyList() : Collections.unmodifiableList(exceptions);}
d4daaeb61af0bbd8e3a2290ae4c80a08f3db28d546bf3116c197a692d6f46bbb
hasVersionRangeViolations
public boolean hasVersionRangeViolations()
{    return versionRangeViolations != null;}
504957a7ecfff934fb674c952ba1afd40b247b2d3a7518637212d2a3810196b9
addVersionRangeViolation
public ArtifactResolutionResult addVersionRangeViolation(Exception e)
{    versionRangeViolations = initList(versionRangeViolations);    versionRangeViolations.add(e);    exceptions = initList(exceptions);    exceptions.add(e);    return this;}
39fea1fb7986cb9a4a704acbda27d89015b91e0678d5003e795b712556f29918
getVersionRangeViolation
public OverConstrainedVersionException getVersionRangeViolation(int i)
{    return (OverConstrainedVersionException) versionRangeViolations.get(i);}
f31164a8584eefeaac4f9ff53afd4ba2782f85ecc0cf97b2d02e26b26150e3f7
getVersionRangeViolations
public List<Exception> getVersionRangeViolations()
{    return versionRangeViolations == null ? Collections.<Exception>emptyList() : Collections.unmodifiableList(versionRangeViolations);}
bcd76ae6fd0fdadc1dd6b983ef6dc896be0a1bc0f5d43d3b7d152649c8fec603
hasMetadataResolutionExceptions
public boolean hasMetadataResolutionExceptions()
{    return metadataResolutionExceptions != null;}
98079cb0ca40fbb9c4ee2c35ceab27bc85b03d7bfdfde74d802a61bd381be15b
addMetadataResolutionException
public ArtifactResolutionResult addMetadataResolutionException(ArtifactResolutionException e)
{    metadataResolutionExceptions = initList(metadataResolutionExceptions);    metadataResolutionExceptions.add(e);    exceptions = initList(exceptions);    exceptions.add(e);    return this;}
9b53ca692db6434e36b97a3b8fe2af03bff942c7bbe23ba053ced8657466dcac
getMetadataResolutionException
public ArtifactResolutionException getMetadataResolutionException(int i)
{    return metadataResolutionExceptions.get(i);}
0873f5a81ee7659cb91e0cabb1f44e630e572c30d6016fd0dc2a816f7efe1d84
getMetadataResolutionExceptions
public List<ArtifactResolutionException> getMetadataResolutionExceptions()
{    return metadataResolutionExceptions == null ? Collections.<ArtifactResolutionException>emptyList() : Collections.unmodifiableList(metadataResolutionExceptions);}
f24802535634ae4ad7cc678a18534afd3b9aceff29bfb81ac836f799175acf39
hasErrorArtifactExceptions
public boolean hasErrorArtifactExceptions()
{    return errorArtifactExceptions != null;}
8b0f8fc53ad2a8a2c009d077b95b5f817aea907ba7f94f9ea47eb1e158176ed9
addErrorArtifactException
public ArtifactResolutionResult addErrorArtifactException(ArtifactResolutionException e)
{    errorArtifactExceptions = initList(errorArtifactExceptions);    errorArtifactExceptions.add(e);    exceptions = initList(exceptions);    exceptions.add(e);    return this;}
18125781712de2da6c7b620558c669d15db4fce1588b61befdb9ec0d7e46dabb
getErrorArtifactExceptions
public List<ArtifactResolutionException> getErrorArtifactExceptions()
{    if (errorArtifactExceptions == null) {        return Collections.emptyList();    }    return Collections.unmodifiableList(errorArtifactExceptions);}
13e956e5b375b3792b434276ee170d23a5da09bfc3bbbde5876a5244a350ae98
hasCircularDependencyExceptions
public boolean hasCircularDependencyExceptions()
{    return circularDependencyExceptions != null;}
cb24bac24d8a318467197120c96696769f189bda7615c0000d38d635d29d118d
addCircularDependencyException
public ArtifactResolutionResult addCircularDependencyException(CyclicDependencyException e)
{    circularDependencyExceptions = initList(circularDependencyExceptions);    circularDependencyExceptions.add(e);    exceptions = initList(exceptions);    exceptions.add(e);    return this;}
529c62a5d374951f1779ce6f38aa38c7f591391bf9e18f89215a157c52f47ee5
getCircularDependencyException
public CyclicDependencyException getCircularDependencyException(int i)
{    return circularDependencyExceptions.get(i);}
e30637efd9a703fac7c269b970d6e75be215ddc571f46788f73050b6c39ea142
getCircularDependencyExceptions
public List<CyclicDependencyException> getCircularDependencyExceptions()
{    if (circularDependencyExceptions == null) {        return Collections.emptyList();    }    return Collections.unmodifiableList(circularDependencyExceptions);}
a84be80ef151360f291e377f2640582b832a596c092c69f1ac1ced3c7b438ac5
getRepositories
public List<ArtifactRepository> getRepositories()
{    if (repositories == null) {        return Collections.emptyList();    }    return Collections.unmodifiableList(repositories);}
84d62ee6d627493377d835ba6f79883ac6824d37482f5c64c0193472b07ed01f
setRepositories
public ArtifactResolutionResult setRepositories(final List<ArtifactRepository> repositories)
{    this.repositories = repositories;    return this;}
5589bba01b2057fd5866f5f8a1aec1f34e8ec6035f7e8ce3006cb9a12301bdfb
initList
private List<T> initList(final List<T> l)
{    if (l == null) {        return new ArrayList<>();    }    return l;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    StringBuilder sb = new StringBuilder();    if (artifacts != null) {        int i = 1;        sb.append("---------\n");        sb.append(artifacts.size()).append('\n');        for (Artifact a : artifacts) {            sb.append(i).append(' ').append(a).append('\n');            i++;        }        sb.append("---------\n");    }    return sb.toString();}
9e8f557f6f1d7e1c120dd81991e6a76cff44adff1cd462dd84e9537698115405
throwErrors
public void throwErrors(ArtifactResolutionRequest request, ArtifactResolutionResult result) throws ArtifactResolutionException
{    if (result.hasMetadataResolutionExceptions()) {        throw result.getMetadataResolutionException(0);    }    if (result.hasCircularDependencyExceptions()) {        throw result.getCircularDependencyException(0);    }    if (result.hasVersionRangeViolations()) {        throw result.getVersionRangeViolation(0);    }    if (result.hasErrorArtifactExceptions()) {        throw result.getErrorArtifactExceptions().get(0);    }    if (result.hasMissingArtifacts()) {        throw new MultipleArtifactsNotFoundException(request.getArtifact(), toList(result.getArtifacts()), result.getMissingArtifacts(), request.getRemoteRepositories());    }        if (result.hasExceptions()) {        throw new ArtifactResolutionException("Unknown error during artifact resolution, " + request + ", " + result.getExceptions(), request.getArtifact(), request.getRemoteRepositories());    }}
fc8737cbfb21a10b651a600971a4ce3c9a4ffe0acb6062c612afae8218d8408d
toList
private static List<T> toList(Collection<T> items)
{    return (items != null) ? new ArrayList<>(items) : null;}
68afe01c179e5370f140c46f717807db35c44cf74381cb151108d8016ec49354
addScopeInternal
 void addScopeInternal(String scope)
{    if (Artifact.SCOPE_COMPILE.equals(scope)) {        systemScope = true;        providedScope = true;        compileScope = true;    } else if (Artifact.SCOPE_RUNTIME.equals(scope)) {        compileScope = true;        runtimeScope = true;    } else if (Artifact.SCOPE_COMPILE_PLUS_RUNTIME.equals(scope)) {        systemScope = true;        providedScope = true;        compileScope = true;        runtimeScope = true;    } else if (Artifact.SCOPE_RUNTIME_PLUS_SYSTEM.equals(scope)) {        systemScope = true;        compileScope = true;        runtimeScope = true;    } else if (Artifact.SCOPE_TEST.equals(scope)) {        systemScope = true;        providedScope = true;        compileScope = true;        runtimeScope = true;        testScope = true;    }}
d3ed17b58984fbee642a483f77d32e868d012e4887f1ca98f7f5abc5b7c7951f
include
public boolean include(Artifact artifact)
{    if (Artifact.SCOPE_COMPILE.equals(artifact.getScope())) {        return compileScope;    } else if (Artifact.SCOPE_RUNTIME.equals(artifact.getScope())) {        return runtimeScope;    } else if (Artifact.SCOPE_TEST.equals(artifact.getScope())) {        return testScope;    } else if (Artifact.SCOPE_PROVIDED.equals(artifact.getScope())) {        return providedScope;    } else if (Artifact.SCOPE_SYSTEM.equals(artifact.getScope())) {        return systemScope;    } else {        return true;    }}
d3ed17b58984fbee642a483f77d32e868d012e4887f1ca98f7f5abc5b7c7951f
include
public boolean include(Artifact artifact)
{    boolean include = true;    for (Iterator<ArtifactFilter> i = filters.iterator(); i.hasNext() && include; ) {        ArtifactFilter filter = i.next();        if (!filter.include(artifact)) {            include = false;        }    }    return include;}
f4d53868c93437ac4ccee2de505190bda6d82dd762d36a94179d18495be25643
add
public void add(ArtifactFilter artifactFilter)
{    filters.add(artifactFilter);}
8643cde88db1f62fde76328c5e2987ca902e64f5ffc3ff3db1747b9010daf7b3
getFilters
public List<ArtifactFilter> getFilters()
{    return new ArrayList<>(filters);}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    int hash = 17;    hash = hash * 31 + filters.hashCode();    return hash;}
4afeb0868b55bdd8e18a00a3cb43d83e0714378d1c4bb36f0936daefc060e2e8
equals
public boolean equals(Object obj)
{    if (this == obj) {        return true;    }    if (!(obj instanceof AndArtifactFilter)) {        return false;    }    AndArtifactFilter other = (AndArtifactFilter) obj;    return filters.equals(other.filters);}
c5eab28c65b598b8adbc4f4af9f8b121fab90ce93435561663c0d2dfc02f7840
addScopes
private void addScopes(Collection<String> scopes)
{    if (scopes != null) {        for (String scope : scopes) {            addScope(scope);        }    }}
df44cc51e5b0bec9cd66ff053fcd23e438415843482d4e073fe42ece716988d2
addScope
private void addScope(String scope)
{    this.scopes.add(scope);    addScopeInternal(scope);}
66aa1e42d21e6cf9e598a2d6a7d6ca3418f0ff95212c5b85ca39c7714dd8c22f
getScopes
public Set<String> getScopes()
{    return scopes;}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    int hash = 17;    hash = hash * 31 + scopes.hashCode();    return hash;}
4afeb0868b55bdd8e18a00a3cb43d83e0714378d1c4bb36f0936daefc060e2e8
equals
public boolean equals(Object obj)
{    if (this == obj) {        return true;    }    if (!(obj instanceof CumulativeScopeArtifactFilter)) {        return false;    }    CumulativeScopeArtifactFilter that = (CumulativeScopeArtifactFilter) obj;    return scopes.equals(that.scopes);}
d3ed17b58984fbee642a483f77d32e868d012e4887f1ca98f7f5abc5b7c7951f
include
public boolean include(Artifact artifact)
{    return !super.include(artifact);}
d3ed17b58984fbee642a483f77d32e868d012e4887f1ca98f7f5abc5b7c7951f
include
public boolean include(Artifact artifact)
{    for (Exclusion exclusion : exclusions) {        if (WILDCARD.equals(exclusion.getGroupId()) && WILDCARD.equals(exclusion.getArtifactId())) {            return false;        }        if (WILDCARD.equals(exclusion.getGroupId()) && exclusion.getArtifactId().equals(artifact.getArtifactId())) {            return false;        }        if (WILDCARD.equals(exclusion.getArtifactId()) && exclusion.getGroupId().equals(artifact.getGroupId())) {            return false;        }        if (exclusion.getGroupId().equals(artifact.getGroupId()) && exclusion.getArtifactId().equals(artifact.getArtifactId())) {            return false;        }    }    return true;}
d3ed17b58984fbee642a483f77d32e868d012e4887f1ca98f7f5abc5b7c7951f
include
public boolean include(Artifact artifact)
{    String id = artifact.getArtifactId();    if (excludes.contains(id)) {        return false;    }    id = artifact.getGroupId() + ':' + id;    return !excludes.contains(id);}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    int hash = 17;    hash = hash * 31 + excludes.hashCode();    return hash;}
4afeb0868b55bdd8e18a00a3cb43d83e0714378d1c4bb36f0936daefc060e2e8
equals
public boolean equals(Object obj)
{    if (this == obj) {        return true;    }    if (!(obj instanceof ExclusionSetFilter)) {        return false;    }    ExclusionSetFilter other = (ExclusionSetFilter) obj;    return excludes.equals(other.excludes);}
d3ed17b58984fbee642a483f77d32e868d012e4887f1ca98f7f5abc5b7c7951f
include
public boolean include(Artifact artifact)
{    String id = artifact.getGroupId() + ":" + artifact.getArtifactId();    boolean matched = false;    for (Iterator<String> i = patterns.iterator(); i.hasNext() & !matched; ) {                if (id.equals(i.next())) {            matched = true;        }    }    return matched;}
829bacbd7d26811a568e091bdc7320e9dcbc7f0ce9bd2cf355cc37ee4de53575
getPatterns
public List<String> getPatterns()
{    return new ArrayList<>(patterns);}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    int hash = 17;    hash = hash * 31 + patterns.hashCode();    return hash;}
4afeb0868b55bdd8e18a00a3cb43d83e0714378d1c4bb36f0936daefc060e2e8
equals
public boolean equals(Object obj)
{    if (this == obj) {        return true;    }        if (obj == null || getClass() != obj.getClass()) {        return false;    }    IncludesArtifactFilter other = (IncludesArtifactFilter) obj;    return patterns.equals(other.patterns);}
b6618886f045f72bd87b21e6ae50c04bc9f78ceb97355e9a0b0208f7669f7aa1
getScope
public String getScope()
{    return scope;}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    int hash = 17;    hash = hash * 31 + (scope != null ? scope.hashCode() : 0);    return hash;}
4afeb0868b55bdd8e18a00a3cb43d83e0714378d1c4bb36f0936daefc060e2e8
equals
public boolean equals(Object obj)
{    if (this == obj) {        return true;    }    if (!(obj instanceof ScopeArtifactFilter)) {        return false;    }    ScopeArtifactFilter other = (ScopeArtifactFilter) obj;    return Objects.equals(scope, other.scope);}
74532920252ab24aba3facb8f78a175de2fc4c1c8247fe2b3b2dce7bf79f6858
getArtifact
public Artifact getArtifact()
{    return artifact;}
b2585874b87865eace30c330168a04230bae89eeda3d2fe20bf9bf198ae6751e
getKey
public Object getKey()
{    return artifact.getDependencyConflictId();}
4721a9da00a0fd5bc983791779fe835dedf1059874839ad0600586a51a5e7c95
addDependencies
public void addDependencies(Set<Artifact> artifacts, List<ArtifactRepository> remoteRepositories, ArtifactFilter filter) throws CyclicDependencyException, OverConstrainedVersionException
{    if (artifacts != null && !artifacts.isEmpty()) {        children = new ArrayList<>(artifacts.size());        for (Artifact a : artifacts) {            if (parents.contains(a.getDependencyConflictId())) {                a.setDependencyTrail(getDependencyTrail());                throw new CyclicDependencyException("A dependency has introduced a cycle", a);            }            children.add(new ResolutionNode(a, remoteRepositories, this));        }        children = Collections.unmodifiableList(children);    } else {        children = Collections.emptyList();    }    trail = null;}
4e7d5049a3a89b205a3ee7be2ed29aa43651b543ac691613ebc849bca907f337
getDependencyTrail
public List<String> getDependencyTrail() throws OverConstrainedVersionException
{    List<Artifact> trial = getTrail();    List<String> ret = new ArrayList<>(trial.size());    for (Artifact artifact : trial) {        ret.add(artifact.getId());    }    return ret;}
f9428b4c8009bdca629cf78ce58e72fbb3328fcd7498d1b2c6d108d76791c920
getTrail
private List<Artifact> getTrail() throws OverConstrainedVersionException
{    if (trail == null) {        List<Artifact> ids = new LinkedList<>();        ResolutionNode node = this;        while (node != null) {            Artifact artifact = node.getArtifact();            if (artifact.getVersion() == null) {                                ArtifactVersion selected = artifact.getSelectedVersion();                                if (selected != null) {                    artifact.selectVersion(selected.toString());                } else {                    throw new OverConstrainedVersionException("Unable to get a selected Version for " + artifact.getArtifactId(), artifact);                }            }            ids.add(0, artifact);            node = node.parent;        }        trail = ids;    }    return trail;}
2fa99a8aa2d293aadf123d8cbc90fb9b630a79bcc950706530654a9eec5b5162
isResolved
public boolean isResolved()
{    return children != null;}
06ac97f8fdbbf6a64fb3bb6bb0e846d731e78cb10867a3e5221fcf7634c5ddc4
isChildOfRootNode
public boolean isChildOfRootNode()
{    return parent != null && parent.parent == null;}
3cbd8b3df2df53b801edc55dff54d2ed1326adcc4739ea7e4a0316f056f2c317
getChildrenIterator
public Iterator<ResolutionNode> getChildrenIterator()
{    return children.iterator();}
bf59abd5eadbc4a8a91e7c05be9505c15b915c4238866a6dfb81b4ad63852244
getDepth
public int getDepth()
{    return depth;}
4fd44e1a9f23aaf113060017b1d8f6d3cf8794c129edf477e6b2ddacdfe7400d
getRemoteRepositories
public List<ArtifactRepository> getRemoteRepositories()
{    return remoteRepositories;}
967d21828dd4b7396b26e55f80c4b30972f51b68d2fa61b73d106a476da86ea0
isActive
public boolean isActive()
{    return active;}
2ab346fb48ee15a4f715b972046d8265f8aa8a9cf86c0cf6f6f6fb2a60f2f569
enable
public void enable()
{    active = true;        if (children != null) {        for (ResolutionNode node : children) {            node.enable();        }    }}
89f5f2d9292bc5d5a3f91ae33bd8f9b7f2d339f36d89ab76304f9a83cb13b89b
disable
public void disable()
{    active = false;    if (children != null) {        for (ResolutionNode node : children) {            node.disable();        }    }}
50cf9860d076274dde4de0e8336d02cc036deff1206ec0ca49c57f15cd10c535
filterTrail
public boolean filterTrail(ArtifactFilter filter) throws OverConstrainedVersionException
{    boolean success = true;    if (filter != null) {        for (Artifact artifact : getTrail()) {            if (!filter.include(artifact)) {                success = false;            }        }    }    return success;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return artifact.toString() + " (" + depth + "; " + (active ? "enabled" : "disabled") + ")";}
4a81b6c870b01e2d4357e71f4c370c964d3fc7208f1aa052a4282f2d9c62a2ac
setArtifact
public void setArtifact(Artifact artifact)
{    this.artifact = artifact;}
9dcc665db886a44495acf2d5a6ffdbbe51c603897f3a7adbec1d3ba2cac656c9
createArtifact
public Artifact createArtifact(String groupId, String artifactId, String version, String scope, String type)
{    return createArtifactX(groupId, artifactId, version, scope, type);}
dd82aba3f4b0680c6f6a926e581525d46255986c7a605e25187f927cb921b9e3
createProjectArtifact
public Artifact createProjectArtifact(String groupId, String artifactId, String metaVersionId)
{    return createProjectArtifactX(groupId, artifactId, metaVersionId);}
d75965c2e86759799788fdab95b2fe59f7f7db5dcff143906e96ec896f6283de
createDependencyArtifact
public Artifact createDependencyArtifact(Dependency d)
{    if (d.getVersion() == null) {        return null;    }    VersionRange versionRange;    try {        versionRange = VersionRange.createFromVersionSpec(d.getVersion());    } catch (InvalidVersionSpecificationException e) {        return null;    }    Artifact artifact = createDependencyArtifactX(d.getGroupId(), d.getArtifactId(), versionRange, d.getType(), d.getClassifier(), d.getScope(), d.isOptional());    if (Artifact.SCOPE_SYSTEM.equals(d.getScope()) && d.getSystemPath() != null) {        artifact.setFile(new File(d.getSystemPath()));    }    if (!d.getExclusions().isEmpty()) {        artifact.setDependencyFilter(new ExclusionArtifactFilter(d.getExclusions()));    }    return artifact;}
aca62cc728ed8ad40fc110c742801b84deece7f4e83d97c78dcdab34430a77d9
createExtensionArtifact
public Artifact createExtensionArtifact(String groupId, String artifactId, String version)
{    VersionRange versionRange;    try {        versionRange = VersionRange.createFromVersionSpec(version);    } catch (InvalidVersionSpecificationException e) {        return null;    }    return createExtensionArtifactX(groupId, artifactId, versionRange);}
626d44f2026240a6644e5b7637324c86a2a6203e5a9ead2b8492aeec21d25d2b
createParentArtifact
public Artifact createParentArtifact(String groupId, String artifactId, String version)
{    return createParentArtifactX(groupId, artifactId, version);}
47b2231db8dbc0f6859db880e4a46547c53616f8dc0d80395fdff4a9f50f8012
createPluginArtifact
public Artifact createPluginArtifact(Plugin plugin)
{    VersionRange versionRange;    try {        String version = plugin.getVersion();        if (StringUtils.isEmpty(version)) {            version = "RELEASE";        }        versionRange = VersionRange.createFromVersionSpec(version);    } catch (InvalidVersionSpecificationException e) {        return null;    }    return createPluginArtifactX(plugin.getGroupId(), plugin.getArtifactId(), versionRange);}
eea68400fdcf34a185329c7c2d13b1d683d9d45106e381da55c51c5fa75e4b29
injectMirror
public void injectMirror(List<ArtifactRepository> repositories, List<Mirror> mirrors)
{    if (repositories != null && mirrors != null) {        for (ArtifactRepository repository : repositories) {            Mirror mirror = getMirror(repository, mirrors);            injectMirror(repository, mirror);        }    }}
12dd86a53bb9d31bc27df74b58c525c15ae9682fd4c4e4e541a6b7dab226a9f3
getMirror
private Mirror getMirror(RepositorySystemSession session, ArtifactRepository repository)
{    if (session != null) {        org.eclipse.aether.repository.MirrorSelector selector = session.getMirrorSelector();        if (selector != null) {            RemoteRepository repo = selector.getMirror(RepositoryUtils.toRepo(repository));            if (repo != null) {                Mirror mirror = new Mirror();                mirror.setId(repo.getId());                mirror.setUrl(repo.getUrl());                mirror.setLayout(repo.getContentType());                return mirror;            }        }    }    return null;}
7b51646ca668c6e9862ffcbf5b4a0410b275f09f503985296422e249cea4033b
injectMirror
public void injectMirror(RepositorySystemSession session, List<ArtifactRepository> repositories)
{    if (repositories != null && session != null) {        for (ArtifactRepository repository : repositories) {            Mirror mirror = getMirror(session, repository);            injectMirror(repository, mirror);        }    }}
23ce9437861c20f2dff0199d6cd0b58e202edc82f7417b16e2a748aa35cf9165
injectMirror
private void injectMirror(ArtifactRepository repository, Mirror mirror)
{    if (mirror != null) {        ArtifactRepository original = createArtifactRepository(repository.getId(), repository.getUrl(), repository.getLayout(), repository.getSnapshots(), repository.getReleases());        repository.setMirroredRepositories(Collections.singletonList(original));        repository.setId(mirror.getId());        repository.setUrl(mirror.getUrl());        if (StringUtils.isNotEmpty(mirror.getLayout())) {            repository.setLayout(getLayout(mirror.getLayout()));        }    }}
d9456a069778e126d9c8bed79acf3a82c5e43365056cbde842b010a530c40b9c
getAuthentication
private Authentication getAuthentication(RepositorySystemSession session, ArtifactRepository repository)
{    if (session != null) {        AuthenticationSelector selector = session.getAuthenticationSelector();        if (selector != null) {            RemoteRepository repo = RepositoryUtils.toRepo(repository);            org.eclipse.aether.repository.Authentication auth = selector.getAuthentication(repo);            if (auth != null) {                repo = new RemoteRepository.Builder(repo).setAuthentication(auth).build();                AuthenticationContext authCtx = AuthenticationContext.forRepository(session, repo);                Authentication result = new Authentication(authCtx.get(AuthenticationContext.USERNAME), authCtx.get(AuthenticationContext.PASSWORD));                result.setPrivateKey(authCtx.get(AuthenticationContext.PRIVATE_KEY_PATH));                result.setPassphrase(authCtx.get(AuthenticationContext.PRIVATE_KEY_PASSPHRASE));                authCtx.close();                return result;            }        }    }    return null;}
24049d25ed73938e13d72fa18c664728b7252c115e7751b9af078890bd672425
injectAuthentication
public void injectAuthentication(RepositorySystemSession session, List<ArtifactRepository> repositories)
{    if (repositories != null && session != null) {        for (ArtifactRepository repository : repositories) {            repository.setAuthentication(getAuthentication(session, repository));        }    }}
6640303402957c0c2bef32ef66d1f6e85a2b19c101ebb4fc5ad9be9e8eb56a20
getProxy
private Proxy getProxy(RepositorySystemSession session, ArtifactRepository repository)
{    if (session != null) {        ProxySelector selector = session.getProxySelector();        if (selector != null) {            RemoteRepository repo = RepositoryUtils.toRepo(repository);            org.eclipse.aether.repository.Proxy proxy = selector.getProxy(repo);            if (proxy != null) {                Proxy p = new Proxy();                p.setHost(proxy.getHost());                p.setProtocol(proxy.getType());                p.setPort(proxy.getPort());                if (proxy.getAuthentication() != null) {                    repo = new RemoteRepository.Builder(repo).setProxy(proxy).build();                    AuthenticationContext authCtx = AuthenticationContext.forProxy(session, repo);                    p.setUserName(authCtx.get(AuthenticationContext.USERNAME));                    p.setPassword(authCtx.get(AuthenticationContext.PASSWORD));                    p.setNtlmDomain(authCtx.get(AuthenticationContext.NTLM_DOMAIN));                    p.setNtlmHost(authCtx.get(AuthenticationContext.NTLM_WORKSTATION));                    authCtx.close();                }                return p;            }        }    }    return null;}
ff5c8a85e02c8eeed19d9841ddf23931b4721f3b2b299841f2eba6426de17b25
injectProxy
public void injectProxy(RepositorySystemSession session, List<ArtifactRepository> repositories)
{    if (repositories != null && session != null) {        for (ArtifactRepository repository : repositories) {            repository.setProxy(getProxy(session, repository));        }    }}
39a9378befb2940809037f05f8acb7eb0bd5fb06049c400feac6f9d6f1cecdcf
getLayout
private ArtifactRepositoryLayout getLayout(String id)
{    ArtifactRepositoryLayout layout = layouts.get(id);    return layout;}
13d9bbb74f975286b90d2bdac68b3f206392caf5db6f3899b97abafade1b52e1
fromSettingsRepository
public static org.apache.maven.model.Repository fromSettingsRepository(org.apache.maven.settings.Repository settingsRepository)
{    org.apache.maven.model.Repository modelRepository = new org.apache.maven.model.Repository();    modelRepository.setId(settingsRepository.getId());    modelRepository.setLayout(settingsRepository.getLayout());    modelRepository.setName(settingsRepository.getName());    modelRepository.setUrl(settingsRepository.getUrl());    modelRepository.setReleases(fromSettingsRepositoryPolicy(settingsRepository.getReleases()));    modelRepository.setSnapshots(fromSettingsRepositoryPolicy(settingsRepository.getSnapshots()));    return modelRepository;}
70f2d4754640e57c7db2ec9be217b814a227fcf33dc48ec36152be81268f00fb
fromSettingsRepositoryPolicy
public static org.apache.maven.model.RepositoryPolicy fromSettingsRepositoryPolicy(org.apache.maven.settings.RepositoryPolicy settingsRepositoryPolicy)
{    org.apache.maven.model.RepositoryPolicy modelRepositoryPolicy = new org.apache.maven.model.RepositoryPolicy();    if (settingsRepositoryPolicy != null) {        modelRepositoryPolicy.setEnabled(settingsRepositoryPolicy.isEnabled());        modelRepositoryPolicy.setUpdatePolicy(settingsRepositoryPolicy.getUpdatePolicy());        modelRepositoryPolicy.setChecksumPolicy(settingsRepositoryPolicy.getChecksumPolicy());    }    return modelRepositoryPolicy;}
620a19f7d4e8cfd31959c73d6bc83e9cdf8583ee798e60a5e123ba32c70360a1
buildArtifactRepository
public static ArtifactRepository buildArtifactRepository(org.apache.maven.settings.Repository repo) throws InvalidRepositoryException
{    return buildArtifactRepository(fromSettingsRepository(repo));}
59f04973b89e6dc1e081b794b6640ab0f4711a48288c673897f773fe3cfc8432
buildArtifactRepository
public static ArtifactRepository buildArtifactRepository(org.apache.maven.model.Repository repo) throws InvalidRepositoryException
{    if (repo != null) {        String id = repo.getId();        if (StringUtils.isEmpty(id)) {            throw new InvalidRepositoryException("Repository identifier missing", "");        }        String url = repo.getUrl();        if (StringUtils.isEmpty(url)) {            throw new InvalidRepositoryException("URL missing for repository " + id, id);        }        ArtifactRepositoryPolicy snapshots = buildArtifactRepositoryPolicy(repo.getSnapshots());        ArtifactRepositoryPolicy releases = buildArtifactRepositoryPolicy(repo.getReleases());        ArtifactRepositoryLayout layout = new DefaultRepositoryLayout();        return createArtifactRepository(id, url, layout, snapshots, releases);    } else {        return null;    }}
b912aa3e92cc5d4f1d40413525da3e0e055e46ae643d02eea9c72d95228d151e
buildArtifactRepositoryPolicy
public static ArtifactRepositoryPolicy buildArtifactRepositoryPolicy(org.apache.maven.model.RepositoryPolicy policy)
{    boolean enabled = true;    String updatePolicy = null;    String checksumPolicy = null;    if (policy != null) {        enabled = policy.isEnabled();        if (policy.getUpdatePolicy() != null) {            updatePolicy = policy.getUpdatePolicy();        }        if (policy.getChecksumPolicy() != null) {            checksumPolicy = policy.getChecksumPolicy();        }    }    return new ArtifactRepositoryPolicy(enabled, updatePolicy, checksumPolicy);}
4f84263ed52ed9038fa3c96ed946b092e80fb3a7e7917add3731909803b99479
createArtifactRepository
public ArtifactRepository createArtifactRepository(String id, String url, String layoutId, ArtifactRepositoryPolicy snapshots, ArtifactRepositoryPolicy releases) throws Exception
{    ArtifactRepositoryLayout layout = layouts.get(layoutId);    checkLayout(id, layoutId, layout);    return createArtifactRepository(id, url, layout, snapshots, releases);}
65d856cb57ad1781951d4325479b742eea52316059feafd07e1d18830e756eb7
checkLayout
private void checkLayout(String repositoryId, String layoutId, ArtifactRepositoryLayout layout) throws Exception
{    if (layout == null) {        throw new Exception(String.format("Cannot find ArtifactRepositoryLayout instance for: %s %s", layoutId, repositoryId));    }}
483ed1a63c8ea03f2429e33618b650caf4b8fb5ace7af66b095fbfac61bdbbcc
createArtifactRepository
public static ArtifactRepository createArtifactRepository(String id, String url, ArtifactRepositoryLayout repositoryLayout, ArtifactRepositoryPolicy snapshots, ArtifactRepositoryPolicy releases)
{    if (snapshots == null) {        snapshots = new ArtifactRepositoryPolicy();    }    if (releases == null) {        releases = new ArtifactRepositoryPolicy();    }    ArtifactRepository repository;    if (repositoryLayout instanceof ArtifactRepositoryLayout2) {        repository = ((ArtifactRepositoryLayout2) repositoryLayout).newMavenArtifactRepository(id, url, snapshots, releases);    } else {        repository = new MavenArtifactRepository(id, url, repositoryLayout, snapshots, releases);    }    return repository;}
163394f23670c3828c9c7ea33752496e74a4f495c246864f7543ac920646257c
createArtifactX
private Artifact createArtifactX(String groupId, String artifactId, String version, String scope, String type)
{    return createArtifactX(groupId, artifactId, version, scope, type, null, null);}
3b2e668e52ac8d4e8f14d68eaacaa10bc45692a64b2157f586256f340f9bed2f
createDependencyArtifactX
private Artifact createDependencyArtifactX(String groupId, String artifactId, VersionRange versionRange, String type, String classifier, String scope, boolean optional)
{    return createArtifactX(groupId, artifactId, versionRange, type, classifier, scope, null, optional);}
6e391edc8b630ed02cc62c5c0aebbdd30ad4851cfbdf0ee14deea97a77c1ce7b
createProjectArtifactX
private Artifact createProjectArtifactX(String groupId, String artifactId, String version)
{    return createProjectArtifactX(groupId, artifactId, version, null);}
68e03deac8dea4b335e191be363531ef436b317a2594e133192631ab49000bc8
createParentArtifactX
private Artifact createParentArtifactX(String groupId, String artifactId, String version)
{    return createProjectArtifactX(groupId, artifactId, version);}
3ed5ea5be8b1ace4722f290745e4d1f3f15028b03d66e310b9b2100eb2bd86fa
createPluginArtifactX
private Artifact createPluginArtifactX(String groupId, String artifactId, VersionRange versionRange)
{    return createArtifactX(groupId, artifactId, versionRange, "maven-plugin", null, Artifact.SCOPE_RUNTIME, null);}
870fca46ed8c0c93491c92020b00f479ecba1ba70fc57f3d49ad58fd884c3ef6
createProjectArtifactX
private Artifact createProjectArtifactX(String groupId, String artifactId, String version, String scope)
{    return createArtifactX(groupId, artifactId, version, scope, "pom");}
884d3db721f9836ae5b951c425f9e3b115811b18f291f09d45428632d100a0c5
createExtensionArtifactX
private Artifact createExtensionArtifactX(String groupId, String artifactId, VersionRange versionRange)
{    return createArtifactX(groupId, artifactId, versionRange, "jar", null, Artifact.SCOPE_RUNTIME, null);}
23cd1a75947f2d396687e0b35bac571abb39f54983e73d0b667499845e48009b
createArtifactX
private Artifact createArtifactX(String groupId, String artifactId, String version, String scope, String type, String classifier, String inheritedScope)
{    VersionRange versionRange = null;    if (version != null) {        versionRange = VersionRange.createFromVersion(version);    }    return createArtifactX(groupId, artifactId, versionRange, type, classifier, scope, inheritedScope);}
0cbefa92001fce818eff43257f7bfc5cd525b0770a37952bbe3c0fadd5e52476
createArtifactX
private Artifact createArtifactX(String groupId, String artifactId, VersionRange versionRange, String type, String classifier, String scope, String inheritedScope)
{    return createArtifactX(groupId, artifactId, versionRange, type, classifier, scope, inheritedScope, false);}
9f4270c2089386ddb1a06d919e90d379ce5bfaca0f82f48e833798b185097f0f
createArtifactX
private Artifact createArtifactX(String groupId, String artifactId, VersionRange versionRange, String type, String classifier, String scope, String inheritedScope, boolean optional)
{    String desiredScope = Artifact.SCOPE_RUNTIME;    if (inheritedScope == null) {        desiredScope = scope;    } else if (Artifact.SCOPE_TEST.equals(scope) || Artifact.SCOPE_PROVIDED.equals(scope)) {        return null;    } else if (Artifact.SCOPE_COMPILE.equals(scope) && Artifact.SCOPE_COMPILE.equals(inheritedScope)) {                desiredScope = Artifact.SCOPE_COMPILE;    }    if (Artifact.SCOPE_TEST.equals(inheritedScope)) {        desiredScope = Artifact.SCOPE_TEST;    }    if (Artifact.SCOPE_PROVIDED.equals(inheritedScope)) {        desiredScope = Artifact.SCOPE_PROVIDED;    }    if (Artifact.SCOPE_SYSTEM.equals(scope)) {                desiredScope = Artifact.SCOPE_SYSTEM;    }    ArtifactHandler handler = artifactHandlerManager.getArtifactHandler(type);    return new DefaultArtifact(groupId, artifactId, versionRange, desiredScope, type, classifier, handler, optional);}
ae899fb72e51a18fb5d49d069ac696d3f647c2c49d34374098c34aaa2e21fe41
createDefaultRemoteRepository
public ArtifactRepository createDefaultRemoteRepository(MavenExecutionRequest request) throws Exception
{    return createRepository(RepositorySystem.DEFAULT_REMOTE_REPO_URL, RepositorySystem.DEFAULT_REMOTE_REPO_ID, true, ArtifactRepositoryPolicy.UPDATE_POLICY_DAILY, false, ArtifactRepositoryPolicy.UPDATE_POLICY_DAILY, ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN);}
4e03512ce991e3171f3e2299dbe2006ea27f582b132e378ea2e392b85b979467
createRepository
public ArtifactRepository createRepository(String url, String repositoryId, boolean releases, String releaseUpdates, boolean snapshots, String snapshotUpdates, String checksumPolicy) throws Exception
{    ArtifactRepositoryPolicy snapshotsPolicy = new ArtifactRepositoryPolicy(snapshots, snapshotUpdates, checksumPolicy);    ArtifactRepositoryPolicy releasesPolicy = new ArtifactRepositoryPolicy(releases, releaseUpdates, checksumPolicy);    return createArtifactRepository(repositoryId, url, "default", snapshotsPolicy, releasesPolicy);}
c10bd6d284e96daeb38283ab45e4ddc6089549610f96fae68843b886b63ddccf
getRepoIds
public Set<String> getRepoIds(List<ArtifactRepository> repositories)
{    Set<String> repoIds = new HashSet<>();    if (repositories != null) {        for (ArtifactRepository repository : repositories) {            repoIds.add(repository.getId());        }    }    return repoIds;}
6b77819ca5f2dd829929aaa18de753c98ae8553a6896c9ed3a568965007e9071
getEffectiveRepositories
public List<ArtifactRepository> getEffectiveRepositories(List<ArtifactRepository> repositories)
{    if (repositories == null) {        return null;    }    Map<String, List<ArtifactRepository>> reposByKey = new LinkedHashMap<>();    for (ArtifactRepository repository : repositories) {        String key = repository.getId();        List<ArtifactRepository> aliasedRepos = reposByKey.get(key);        if (aliasedRepos == null) {            aliasedRepos = new ArrayList<>();            reposByKey.put(key, aliasedRepos);        }        aliasedRepos.add(repository);    }    List<ArtifactRepository> effectiveRepositories = new ArrayList<>();    for (List<ArtifactRepository> aliasedRepos : reposByKey.values()) {        List<ArtifactRepository> mirroredRepos = new ArrayList<>();        List<ArtifactRepositoryPolicy> releasePolicies = new ArrayList<>(aliasedRepos.size());        for (ArtifactRepository aliasedRepo : aliasedRepos) {            releasePolicies.add(aliasedRepo.getReleases());            mirroredRepos.addAll(aliasedRepo.getMirroredRepositories());        }        ArtifactRepositoryPolicy releasePolicy = getEffectivePolicy(releasePolicies);        List<ArtifactRepositoryPolicy> snapshotPolicies = new ArrayList<>(aliasedRepos.size());        for (ArtifactRepository aliasedRepo : aliasedRepos) {            snapshotPolicies.add(aliasedRepo.getSnapshots());        }        ArtifactRepositoryPolicy snapshotPolicy = getEffectivePolicy(snapshotPolicies);        ArtifactRepository aliasedRepo = aliasedRepos.get(0);        ArtifactRepository effectiveRepository = createArtifactRepository(aliasedRepo.getId(), aliasedRepo.getUrl(), aliasedRepo.getLayout(), snapshotPolicy, releasePolicy);        effectiveRepository.setAuthentication(aliasedRepo.getAuthentication());        effectiveRepository.setProxy(aliasedRepo.getProxy());        effectiveRepository.setMirroredRepositories(mirroredRepos);        effectiveRepositories.add(effectiveRepository);    }    return effectiveRepositories;}
302a0cd726eb270b48731c40e8419d560d1bb29fdd4494411124aa23ac00d41b
getEffectivePolicy
private ArtifactRepositoryPolicy getEffectivePolicy(Collection<ArtifactRepositoryPolicy> policies)
{    ArtifactRepositoryPolicy effectivePolicy = null;    for (ArtifactRepositoryPolicy policy : policies) {        if (effectivePolicy == null) {            effectivePolicy = new ArtifactRepositoryPolicy(policy);        } else {            effectivePolicy.merge(policy);        }    }    return effectivePolicy;}
b9546a6a7dd49b60b9b3624b1388a68f892cc46736274a2dc5ea03ac07ed8821
createLocalRepository
public ArtifactRepository createLocalRepository(MavenExecutionRequest request, File localRepository) throws Exception
{    return createRepository("file://" + localRepository.toURI().getRawPath(), RepositorySystem.DEFAULT_LOCAL_REPO_ID, true, ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS, true, ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS, ArtifactRepositoryPolicy.CHECKSUM_POLICY_IGNORE);}
c907520a08ea46bf2ac4e577c1a746914dc66870ef1465fb39d12369afebe203
getMirror
public static Mirror getMirror(ArtifactRepository repository, List<Mirror> mirrors)
{    String repoId = repository.getId();    if (repoId != null && mirrors != null) {        for (Mirror mirror : mirrors) {            if (repoId.equals(mirror.getMirrorOf()) && matchesLayout(repository, mirror)) {                return mirror;            }        }        for (Mirror mirror : mirrors) {            if (matchPattern(repository, mirror.getMirrorOf()) && matchesLayout(repository, mirror)) {                return mirror;            }        }    }    return null;}
01a44c85fde8d23e359ae51f0c5954e8bd0afcd71e0f3150b5a3aa3d6e6a55f5
matchPattern
 static boolean matchPattern(ArtifactRepository originalRepository, String pattern)
{    boolean result = false;    String originalId = originalRepository.getId();        if (WILDCARD.equals(pattern) || pattern.equals(originalId)) {        result = true;    } else {                String[] repos = pattern.split(",");        for (String repo : repos) {                        if (repo.length() > 1 && repo.startsWith("!")) {                if (repo.substring(1).equals(originalId)) {                                        result = false;                    break;                }            } else             if (repo.equals(originalId)) {                result = true;                break;            } else             if (EXTERNAL_WILDCARD.equals(repo) && isExternalRepo(originalRepository)) {                result = true;                        } else if (WILDCARD.equals(repo)) {                result = true;                        }        }    }    return result;}
e06eee06fd59f6af06dd449f6aa32486413ed4d86e1d41e91efe54a6f90fae35
isExternalRepo
 static boolean isExternalRepo(ArtifactRepository originalRepository)
{    try {        URL url = new URL(originalRepository.getUrl());        return !(url.getHost().equals("localhost") || url.getHost().equals("127.0.0.1") || url.getProtocol().equals("file"));    } catch (MalformedURLException e) {                return false;    }}
9a1303fb6568c76af81feff79851f1cd6b1d88710fa7f311f2e5446203fc5746
matchesLayout
 static boolean matchesLayout(ArtifactRepository repository, Mirror mirror)
{    return matchesLayout(RepositoryUtils.getLayout(repository), mirror.getMirrorOfLayouts());}
388c238244ab80806f0f1353c44d997553360fd12c96231794296a740326b915
matchesLayout
 static boolean matchesLayout(String repoLayout, String mirrorLayout)
{    boolean result = false;        if (StringUtils.isEmpty(mirrorLayout) || WILDCARD.equals(mirrorLayout)) {        result = true;    } else if (mirrorLayout.equals(repoLayout)) {        result = true;    } else {                String[] layouts = mirrorLayout.split(",");        for (String layout : layouts) {                        if (layout.length() > 1 && layout.startsWith("!")) {                if (layout.substring(1).equals(repoLayout)) {                                        result = false;                    break;                }            } else             if (layout.equals(repoLayout)) {                result = true;                break;            } else if (WILDCARD.equals(layout)) {                result = true;                        }        }    }    return result;}
9590314d7a6edd0118345714cc714a8e73448e57e702bb4c6893b363f509d64d
getGroupId
public String getGroupId()
{    return artifact.getGroupId();}
1e5191dc99d9314f2df50294bcd8d717af7b8f4311575d36d8d75b27121f1064
getArtifactId
public String getArtifactId()
{    return artifact.getArtifactId();}
624f725337dde847c4a699397a02f1b5558c709c88374adb10e603d835f48c88
getType
public String getType()
{    return artifact.getExtension();}
72a56f4f76ed886823d719d171deaf7269e3e03581e490ae41d8888ab09c151c
getClassifier
public String getClassifier()
{    return artifact.getClassifier();}
446b3b91c7c41085df1dc5542616b89ccd409f6a1d45e4d60d3ca00ac839ecf0
getVersion
public String getVersion()
{    return artifact.getBaseVersion();}
ce0460f83bd172eacce98e8169f6d9b1d4ec316943fcf77ee2d8f12bbe7327a0
getFile
public File getFile()
{    return artifact.getFile();}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return artifact.toString();}
c8ca4b4091f22f37d174110d6d33c5bf25cdf46eed07d18f13ffc7bc4d23e0c8
newRealm
private ClassRealm newRealm(String id)
{    synchronized (world) {        String realmId = id;        Random random = new Random();        while (true) {            try {                ClassRealm classRealm = world.newRealm(realmId, null);                if (logger.isDebugEnabled()) {                    logger.debug("Created new class realm " + realmId);                }                return classRealm;            } catch (DuplicateRealmException e) {                realmId = id + '-' + random.nextInt();            }        }    }}
6e66f8a0ed7d20442e29a5c11c3bd84b17d71459573d9a6d7ab133aee75584b3
getMavenApiRealm
public ClassRealm getMavenApiRealm()
{    return mavenApiRealm;}
39b67a31c528f018b86834f80ccc67e62606be050b13ec0f2a488791a487fd74
createRealm
private ClassRealm createRealm(String baseRealmId, RealmType type, ClassLoader parent, List<String> parentImports, Map<String, ClassLoader> foreignImports, List<Artifact> artifacts)
{    Set<String> artifactIds = new LinkedHashSet<>();    List<ClassRealmConstituent> constituents = new ArrayList<>();    if (artifacts != null) {        for (Artifact artifact : artifacts) {            if (!isProvidedArtifact(artifact)) {                artifactIds.add(getId(artifact));                if (artifact.getFile() != null) {                    constituents.add(new ArtifactClassRealmConstituent(artifact));                }            }        }    }    if (parentImports != null) {        parentImports = new ArrayList<>(parentImports);    } else {        parentImports = new ArrayList<>();    }    if (foreignImports != null) {        foreignImports = new TreeMap<>(foreignImports);    } else {        foreignImports = new TreeMap<>();    }    ClassRealm classRealm = newRealm(baseRealmId);    if (parent != null) {        classRealm.setParentClassLoader(parent);    }    callDelegates(classRealm, type, parent, parentImports, foreignImports, constituents);    wireRealm(classRealm, parentImports, foreignImports);    Set<String> includedIds = populateRealm(classRealm, constituents);    if (logger.isDebugEnabled()) {        artifactIds.removeAll(includedIds);        for (String id : artifactIds) {            logger.debug("  Excluded: " + id);        }    }    return classRealm;}
e9383a160a2d2fb18febf173a99ae47af80a90b8d0c4a82aef9b573bb368c8e4
getCoreRealm
public ClassRealm getCoreRealm()
{    return containerRealm;}
022aab72ff716320102db44db85ec1c47849157a928fd5707fe14baa5b810e97
createProjectRealm
public ClassRealm createProjectRealm(Model model, List<Artifact> artifacts)
{    Objects.requireNonNull(model, "model cannot be null");    ClassLoader parent = getMavenApiRealm();    return createRealm(getKey(model), RealmType.Project, parent, null, null, artifacts);}
816ea68d963155a2bddaee7320d557badb90c5d459cc567ab6e5883faadd84ff
getKey
private static String getKey(Model model)
{    return "project>" + model.getGroupId() + ":" + model.getArtifactId() + ":" + model.getVersion();}
6b1c3fb7613656a9965b350a5fd590bb15713c0725cb3d0ecfc5426e85d56144
createExtensionRealm
public ClassRealm createExtensionRealm(Plugin plugin, List<Artifact> artifacts)
{    Objects.requireNonNull(plugin, "plugin cannot be null");    ClassLoader parent = PARENT_CLASSLOADER;    Map<String, ClassLoader> foreignImports = Collections.<String, ClassLoader>singletonMap("", getMavenApiRealm());    return createRealm(getKey(plugin, true), RealmType.Extension, parent, null, foreignImports, artifacts);}
a9bc932aa38feaac8fc8f9a5332c530d7f62fd71dfbe913561d9cba7ed1cad1d
isProvidedArtifact
private boolean isProvidedArtifact(Artifact artifact)
{    return providedArtifacts.contains(artifact.getGroupId() + ":" + artifact.getArtifactId());}
61406cca5d63cdfefa6b0060faa5af8f8fb617b962c6fa12837081d6c9fbb0f6
createPluginRealm
public ClassRealm createPluginRealm(Plugin plugin, ClassLoader parent, List<String> parentImports, Map<String, ClassLoader> foreignImports, List<Artifact> artifacts)
{    Objects.requireNonNull(plugin, "plugin cannot be null");    if (parent == null) {        parent = PARENT_CLASSLOADER;    }    return createRealm(getKey(plugin, false), RealmType.Plugin, parent, parentImports, foreignImports, artifacts);}
f4f3c7706c401bbd03c84010bdeab91ea6baf9a6d6b9cd5eb5dc39ae22ad9d95
getKey
private static String getKey(Plugin plugin, boolean extension)
{    String version = ArtifactUtils.toSnapshotVersion(plugin.getVersion());    return (extension ? "extension>" : "plugin>") + plugin.getGroupId() + ":" + plugin.getArtifactId() + ":" + version;}
36b1abebe09a2245c8733b1fec10eb8d7d7be6d77bd8787116cfa3c4a6cfd41b
getId
private static String getId(Artifact artifact)
{    return getId(artifact.getGroupId(), artifact.getArtifactId(), artifact.getExtension(), artifact.getClassifier(), artifact.getBaseVersion());}
3d7e14f1066fc76e663b4e6ffcfcad17742c5515179de520758c8e3c252e44f5
getId
private static String getId(ClassRealmConstituent constituent)
{    return getId(constituent.getGroupId(), constituent.getArtifactId(), constituent.getType(), constituent.getClassifier(), constituent.getVersion());}
28ae21828a8bda20b4ab24d882d2b06b86bd4610712c135a6f5bbd216ea88686
getId
private static String getId(String gid, String aid, String type, String cls, String ver)
{    return gid + ':' + aid + ':' + type + (StringUtils.isNotEmpty(cls) ? ':' + cls : "") + ':' + ver;}
f5be7eeda7afa00c1bc5d7d1b93260002cec58fced155a699d94a00288174435
callDelegates
private void callDelegates(ClassRealm classRealm, RealmType type, ClassLoader parent, List<String> parentImports, Map<String, ClassLoader> foreignImports, List<ClassRealmConstituent> constituents)
{    List<ClassRealmManagerDelegate> delegates = new ArrayList<>(this.delegates);    if (!delegates.isEmpty()) {        ClassRealmRequest request = new DefaultClassRealmRequest(type, parent, parentImports, foreignImports, constituents);        for (ClassRealmManagerDelegate delegate : delegates) {            try {                delegate.setupRealm(classRealm, request);            } catch (Exception e) {                logger.error(delegate.getClass().getName() + " failed to setup class realm " + classRealm + ": " + e.getMessage(), e);            }        }    }}
1900293ccec0c3c43b96b050de48be7e4b053bbdcd200ed7b74f4c5cf8f41205
populateRealm
private Set<String> populateRealm(ClassRealm classRealm, List<ClassRealmConstituent> constituents)
{    Set<String> includedIds = new LinkedHashSet<>();    if (logger.isDebugEnabled()) {        logger.debug("Populating class realm " + classRealm.getId());    }    for (ClassRealmConstituent constituent : constituents) {        File file = constituent.getFile();        String id = getId(constituent);        includedIds.add(id);        if (logger.isDebugEnabled()) {            logger.debug("  Included: " + id);        }        try {            classRealm.addURL(file.toURI().toURL());        } catch (MalformedURLException e) {                        logger.error(e.getMessage(), e);        }    }    return includedIds;}
0be4be6773b691bc2222f52c79472524de7dce391b9789cd8575052468613de2
wireRealm
private void wireRealm(ClassRealm classRealm, List<String> parentImports, Map<String, ClassLoader> foreignImports)
{    if (foreignImports != null && !foreignImports.isEmpty()) {        if (logger.isDebugEnabled()) {            logger.debug("Importing foreign packages into class realm " + classRealm.getId());        }        for (Map.Entry<String, ClassLoader> entry : foreignImports.entrySet()) {            ClassLoader importedRealm = entry.getValue();            String imp = entry.getKey();            if (logger.isDebugEnabled()) {                logger.debug("  Imported: " + imp + " < " + getId(importedRealm));            }            classRealm.importFrom(importedRealm, imp);        }    }    if (parentImports != null && !parentImports.isEmpty()) {        if (logger.isDebugEnabled()) {            logger.debug("Importing parent packages into class realm " + classRealm.getId());        }        for (String imp : parentImports) {            if (logger.isDebugEnabled()) {                logger.debug("  Imported: " + imp + " < " + getId(classRealm.getParentClassLoader()));            }            classRealm.importFromParent(imp);        }    }}
c7a0f8146b46b13b08239150a1a9f26d8e128c123ce74c834cc8f73b68c2818d
getId
private String getId(ClassLoader classLoader)
{    if (classLoader instanceof ClassRealm) {        return ((ClassRealm) classLoader).getId();    }    return String.valueOf(classLoader);}
da5ea9c59fe43d49de94d5e407125d8d9e44d0cbaab958ba3c22065bf23dea88
getType
public RealmType getType()
{    return type;}
af2216c733220c20501f58a211666c05521b27e57c58b0f72e61d9477c326c65
getParent
public ClassLoader getParent()
{    return parent;}
8251f1783fc40bb677fccd810fa91e1c1f1867c698167a2d43e6ee4886a3c2c5
getImports
public List<String> getImports()
{    return getParentImports();}
19ef489d6d0b246d053ffc387026895a27f16c4a135e6abd9d4e462b2598ea1a
getParentImports
public List<String> getParentImports()
{    return parentImports;}
3caab7c311dd7acae98d261e171f15652f465f54f5c3b7a98390f4efd869b36f
getForeignImports
public Map<String, ClassLoader> getForeignImports()
{    return foreignImports;}
db641ec3d3fd5e96179e155aefeace6743d0ecf0970758d40da60eb457351b42
getConstituents
public List<ClassRealmConstituent> getConstituents()
{    return constituents;}
9cdfc560c47f6b09e5d271201bed26d1dabc869293b8c4729e4082d6cbba2bab
translatePath
public File translatePath(File path)
{    File result = path;    if (path != null && basedir != null) {        if (path.isAbsolute()) {                } else if (path.getPath().startsWith(File.separator)) {                        result = path.getAbsoluteFile();        } else {                        result = new File(new File(basedir, path.getPath()).toURI().normalize()).getAbsoluteFile();        }    }    return result;}
f328631af1b62bbb91c7455161d2070ffcb8fee0a5b0e43a36909207847b65c1
getBean
public Object getBean()
{    return bean;}
c38b5166ba2ddd55cc7d95013ac989b3d10fb5208dbd3a676a999c298519fb35
setBean
public DefaultBeanConfigurationRequest setBean(Object bean)
{    this.bean = bean;    return this;}
c053475c021105f219c9c682940a42f25fd00b6cf3bf8cbfce9d4eeb1c8cc5ca
getConfiguration
public Object getConfiguration()
{    return configuration;}
6fb84e3415c4f9149ed2a558c617c40620bf5e5e2613b9f01a75445f8b455abe
getConfigurationElement
public String getConfigurationElement()
{    return configurationElement;}
d61bb6a85910657af176851b5e0a9312c9cff44574a5723169be504b9f5418ce
setConfiguration
public DefaultBeanConfigurationRequest setConfiguration(Object configuration)
{    return setConfiguration(configuration, null);}
b2c2f594c0f23c722a9d70e99eef2a52dd46aea00a1ae1ac359a0cf6b9f5a722
setConfiguration
public DefaultBeanConfigurationRequest setConfiguration(Object configuration, String element)
{    this.configuration = configuration;    this.configurationElement = element;    return this;}
f3ea8653bd5be2675e42ea91c8c5f14497c6b6bd66ed2ab51808f987524af023
setConfiguration
public DefaultBeanConfigurationRequest setConfiguration(Model model, String pluginGroupId, String pluginArtifactId, String pluginExecutionId)
{    Plugin plugin = findPlugin(model, pluginGroupId, pluginArtifactId);    if (plugin != null) {        if (StringUtils.isNotEmpty(pluginExecutionId)) {            for (PluginExecution execution : plugin.getExecutions()) {                if (pluginExecutionId.equals(execution.getId())) {                    setConfiguration(execution.getConfiguration());                    break;                }            }        } else {            setConfiguration(plugin.getConfiguration());        }    }    return this;}
8de566f98ce4c12c3d2dcda92da02889db115444a5cd1aadbaf5585dbc6fb650
findPlugin
private Plugin findPlugin(Model model, String groupId, String artifactId)
{    Validate.notBlank(groupId, "groupId can neither be null, empty nor blank");    Validate.notBlank(artifactId, "artifactId can neither be null, empty nor blank");    if (model != null) {        Build build = model.getBuild();        if (build != null) {            for (Plugin plugin : build.getPlugins()) {                if (groupId.equals(plugin.getGroupId()) && artifactId.equals(plugin.getArtifactId())) {                    return plugin;                }            }            PluginManagement mgmt = build.getPluginManagement();            if (mgmt != null) {                for (Plugin plugin : mgmt.getPlugins()) {                    if (groupId.equals(plugin.getGroupId()) && artifactId.equals(plugin.getArtifactId())) {                        return plugin;                    }                }            }        }    }    return null;}
7e2af6083bdace22985574985e5e274f9fe159af2ce7078444be9e066d947995
getClassLoader
public ClassLoader getClassLoader()
{    return classLoader;}
5b81bc2411cc0b7ce168ea0193bdb6600583c90f87c9f9f41b707ecef2dec8f3
setClassLoader
public DefaultBeanConfigurationRequest setClassLoader(ClassLoader classLoader)
{    this.classLoader = classLoader;    return this;}
cef3df2823e028062d218f2786b0e696d16494b636c27a0a3935f88f6d2dda87
getValuePreprocessor
public BeanConfigurationValuePreprocessor getValuePreprocessor()
{    return valuePreprocessor;}
6d91927173ab21bda2d81bfb9bcba98b8f97b18010fcc403dfa0a7597c59d153
setValuePreprocessor
public DefaultBeanConfigurationRequest setValuePreprocessor(BeanConfigurationValuePreprocessor valuePreprocessor)
{    this.valuePreprocessor = valuePreprocessor;    return this;}
bae1bb4a38b3bdb8892256746365ffd22f0f727e654da3317e418ba2a4288ea2
getPathTranslator
public BeanConfigurationPathTranslator getPathTranslator()
{    return pathTranslator;}
112511f55e655ac0df3a4b6cde8107d8385afdaf567f27f60b0921e72f6d8a77
setPathTranslator
public DefaultBeanConfigurationRequest setPathTranslator(BeanConfigurationPathTranslator pathTranslator)
{    this.pathTranslator = pathTranslator;    return this;}
338ffa28528aa74c0cb07054941b7d347f4cb702d9dd9485eb2e301975f91fe8
configureBean
public void configureBean(BeanConfigurationRequest request) throws BeanConfigurationException
{    Objects.requireNonNull(request, "request cannot be null");    Objects.requireNonNull(request.getBean(), "request.bean cannot be null");    Object configuration = request.getConfiguration();    if (configuration == null) {        return;    }    PlexusConfiguration plexusConfig;    if (configuration instanceof PlexusConfiguration) {        plexusConfig = (PlexusConfiguration) configuration;    } else if (configuration instanceof Xpp3Dom) {        plexusConfig = new XmlPlexusConfiguration((Xpp3Dom) configuration);    } else {        throw new BeanConfigurationException("unsupported bean configuration source (" + configuration.getClass().getName() + ")");    }    if (request.getConfigurationElement() != null) {        plexusConfig = plexusConfig.getChild(request.getConfigurationElement());    }    ClassLoader classLoader = request.getClassLoader();    if (classLoader == null) {        classLoader = request.getBean().getClass().getClassLoader();    }    BeanExpressionEvaluator evaluator = new BeanExpressionEvaluator(request);    ObjectWithFieldsConverter converter = new ObjectWithFieldsConverter();    try {        converter.processConfiguration(converterLookup, request.getBean(), classLoader, plexusConfig, evaluator);    } catch (ComponentConfigurationException e) {        throw new BeanConfigurationException(e.getMessage(), e);    }}
c471d869331c6334549aa95c2421f4e1450b7250d7407dc6f06802c0bbe936af
evaluate
public Object evaluate(String expression, Class<?> type) throws ExpressionEvaluationException
{    if (preprocessor != null) {        try {            return preprocessor.preprocessValue(expression, type);        } catch (BeanConfigurationException e) {            throw new ExpressionEvaluationException(e.getMessage(), e);        }    }    return expression;}
c35900c78c83b02b4fa1472b6db10c956fa3333bdebd492c8aed3b7dbafa4b30
evaluate
public Object evaluate(String expression) throws ExpressionEvaluationException
{    return evaluate(expression, null);}
7c72de28d5e150070e621d08deda8c09b56192e770609871c8e2fcce7c5a04ae
alignToBaseDirectory
public File alignToBaseDirectory(File file)
{    if (translator != null) {        return translator.translatePath(file);    }    return file;}
7de21ef0f1c7970f3d2fe8572d06a965f9ccc1e13eecb59fd40aa2c9f5dbb856
getExcludedArtifacts
private synchronized Set<String> getExcludedArtifacts()
{    if (excludedArtifacts == null) {        excludedArtifacts = new LinkedHashSet<>(coreArtifacts);    }    return excludedArtifacts;}
6b4b8b9f5db1af2544e1e1ff2b912ae007b22ec6e46882c2699f74d0cc39330d
getArtifactFilter
public ArtifactFilter getArtifactFilter()
{    Set<String> excludes = new LinkedHashSet<>(getExcludedArtifacts());    for (ArtifactFilterManagerDelegate delegate : delegates) {        delegate.addExcludes(excludes);    }    return new ExclusionSetFilter(excludes);}
1daf08dc0de804320d12e99022607e0b6bb6afe12e065d41c62b7ec334b3a339
getCoreArtifactFilter
public ArtifactFilter getCoreArtifactFilter()
{    return new ExclusionSetFilter(getCoreArtifactExcludes());}
853cba1eb388a1a0239d185eea7caf57a34b975a9e429400ab021b4511a79647
excludeArtifact
public void excludeArtifact(String artifactId)
{    getExcludedArtifacts().add(artifactId);}
7d87fab605a3a1d3a09ad32205e354d612c9184edc60f9db95e1108017c8157a
getCoreArtifactExcludes
public Set<String> getCoreArtifactExcludes()
{    Set<String> excludes = new LinkedHashSet<>(coreArtifacts);    for (ArtifactFilterManagerDelegate delegate : delegates) {        delegate.addCoreExcludes(excludes);    }    return excludes;}
b49301128a22dd4dbfcb0b630b4f1a7c6e8bd7179a5a7e6fb68eab7008389ac7
execute
public MavenExecutionResult execute(MavenExecutionRequest request)
{    MavenExecutionResult result;    try {        result = doExecute(request);    } catch (OutOfMemoryError e) {        result = addExceptionToResult(new DefaultMavenExecutionResult(), e);    } catch (RuntimeException e) {                if (e.getCause() instanceof ProjectCycleException) {            result = addExceptionToResult(new DefaultMavenExecutionResult(), e.getCause());        } else {            result = addExceptionToResult(new DefaultMavenExecutionResult(), new InternalErrorException("Internal error: " + e, e));        }    } finally {        legacySupport.setSession(null);    }    return result;}
0044b56a09ff1c4637b6c54b085e69dac613eb56a7f76c914ec2a159fbc933e7
doExecute
private MavenExecutionResult doExecute(MavenExecutionRequest request)
{    request.setStartTime(new Date());    MavenExecutionResult result = new DefaultMavenExecutionResult();    try {        validateLocalRepository(request);    } catch (LocalRepositoryNotAccessibleException e) {        return addExceptionToResult(result, e);    }                        sessionScope.enter();    try {        DefaultRepositorySystemSession repoSession = (DefaultRepositorySystemSession) newRepositorySession(request);        MavenSession session = new MavenSession(container, repoSession, request, result);        sessionScope.seed(MavenSession.class, session);        legacySupport.setSession(session);        return doExecute(request, session, result, repoSession);    } finally {        sessionScope.exit();    }}
803418132f3143454fdbb67ad511aa219df3f112fa506579d32a0d3d6ea474b5
doExecute
private MavenExecutionResult doExecute(MavenExecutionRequest request, MavenSession session, MavenExecutionResult result, DefaultRepositorySystemSession repoSession)
{    try {                for (AbstractMavenLifecycleParticipant listener : getLifecycleParticipants(Collections.<MavenProject>emptyList())) {            listener.afterSessionStart(session);        }        } catch (MavenExecutionException e) {        return addExceptionToResult(result, e);    }    eventCatapult.fire(ExecutionEvent.Type.ProjectDiscoveryStarted, session, null);    Result<? extends ProjectDependencyGraph> graphResult = buildGraph(session, result);    if (graphResult.hasErrors()) {        return addExceptionToResult(result, graphResult.getProblems().iterator().next().getException());    }    try {        session.setProjectMap(getProjectMap(session.getProjects()));    } catch (DuplicateProjectException e) {        return addExceptionToResult(result, e);    }    WorkspaceReader reactorWorkspace;    try {        reactorWorkspace = container.lookup(WorkspaceReader.class, ReactorReader.HINT);    } catch (ComponentLookupException e) {        return addExceptionToResult(result, e);    }                                repoSession.setWorkspaceReader(ChainedWorkspaceReader.newInstance(reactorWorkspace, repoSession.getWorkspaceReader()));    repoSession.setReadOnly();    ClassLoader originalClassLoader = Thread.currentThread().getContextClassLoader();    try {        for (AbstractMavenLifecycleParticipant listener : getLifecycleParticipants(session.getProjects())) {            Thread.currentThread().setContextClassLoader(listener.getClass().getClassLoader());            listener.afterProjectsRead(session);        }    } catch (MavenExecutionException e) {        return addExceptionToResult(result, e);    } finally {        Thread.currentThread().setContextClassLoader(originalClassLoader);    }                                    graphResult = buildGraph(session, result);    if (graphResult.hasErrors()) {        return addExceptionToResult(result, graphResult.getProblems().iterator().next().getException());    }    try {        if (result.hasExceptions()) {            return result;        }        result.setTopologicallySortedProjects(session.getProjects());        result.setProject(session.getTopLevelProject());        validatePrerequisitesForNonMavenPluginProjects(session.getProjects());        lifecycleStarter.execute(session);        validateActivatedProfiles(session.getProjects(), request.getActiveProfiles());        if (session.getResult().hasExceptions()) {            return addExceptionToResult(result, session.getResult().getExceptions().get(0));        }    } finally {        try {            afterSessionEnd(session.getProjects(), session);        } catch (MavenExecutionException e) {            return addExceptionToResult(result, e);        }    }    return result;}
619ca78f99e277a702e94f574fe5f3ae6524206c38dceef05099616f5c7aaf70
afterSessionEnd
private void afterSessionEnd(Collection<MavenProject> projects, MavenSession session) throws MavenExecutionException
{    ClassLoader originalClassLoader = Thread.currentThread().getContextClassLoader();    try {        for (AbstractMavenLifecycleParticipant listener : getLifecycleParticipants(projects)) {            Thread.currentThread().setContextClassLoader(listener.getClass().getClassLoader());            listener.afterSessionEnd(session);        }    } finally {        Thread.currentThread().setContextClassLoader(originalClassLoader);    }}
f159a0f8c581694ffcfc2d1e83b367f1e89790df64c01548fc6bcc820d9b9da6
newRepositorySession
public RepositorySystemSession newRepositorySession(MavenExecutionRequest request)
{    return repositorySessionFactory.newRepositorySession(request);}
c5a0b41702c276437988c4827be4004e87f67bd43513810fa51107679eaef369
validateLocalRepository
private void validateLocalRepository(MavenExecutionRequest request) throws LocalRepositoryNotAccessibleException
{    File localRepoDir = request.getLocalRepositoryPath();    logger.debug("Using local repository at " + localRepoDir);    localRepoDir.mkdirs();    if (!localRepoDir.isDirectory()) {        throw new LocalRepositoryNotAccessibleException("Could not create local repository at " + localRepoDir);    }}
fb34948b3ad016d4c7140fe8c2396c234c1046ad95c04ab0c1ca1d2c0cf32b70
getLifecycleParticipants
private Collection<AbstractMavenLifecycleParticipant> getLifecycleParticipants(Collection<MavenProject> projects)
{    Collection<AbstractMavenLifecycleParticipant> lifecycleListeners = new LinkedHashSet<>();    ClassLoader originalClassLoader = Thread.currentThread().getContextClassLoader();    try {        try {            lifecycleListeners.addAll(container.lookupList(AbstractMavenLifecycleParticipant.class));        } catch (ComponentLookupException e) {                        logger.warn("Failed to lookup lifecycle participants: " + e.getMessage());        }        Collection<ClassLoader> scannedRealms = new HashSet<>();        for (MavenProject project : projects) {            ClassLoader projectRealm = project.getClassRealm();            if (projectRealm != null && scannedRealms.add(projectRealm)) {                Thread.currentThread().setContextClassLoader(projectRealm);                try {                    lifecycleListeners.addAll(container.lookupList(AbstractMavenLifecycleParticipant.class));                } catch (ComponentLookupException e) {                                        logger.warn("Failed to lookup lifecycle participants: " + e.getMessage());                }            }        }    } finally {        Thread.currentThread().setContextClassLoader(originalClassLoader);    }    return lifecycleListeners;}
04a233489be95605ad279483aac00ce837ce23ad489a8256b0db65cb9cae3f25
addExceptionToResult
private MavenExecutionResult addExceptionToResult(MavenExecutionResult result, Throwable e)
{    if (!result.getExceptions().contains(e)) {        result.addException(e);    }    return result;}
f4b118fd1765078d7b0cb1df960fb99adce887855b1a259db60e033d0f7ab3de
validatePrerequisitesForNonMavenPluginProjects
private void validatePrerequisitesForNonMavenPluginProjects(List<MavenProject> projects)
{    for (MavenProject mavenProject : projects) {        if (!"maven-plugin".equals(mavenProject.getPackaging())) {            Prerequisites prerequisites = mavenProject.getPrerequisites();            if (prerequisites != null && prerequisites.getMaven() != null) {                logger.warn("The project " + mavenProject.getId() + " uses prerequisites" + " which is only intended for maven-plugin projects " + "but not for non maven-plugin projects. " + "For such purposes you should use the maven-enforcer-plugin. " + "See https://maven.apache.org/enforcer/enforcer-rules/requireMavenVersion.html");            }        }    }}
1c2443aff67b2b9778d2f0ab9be5e6c1a7ba21f391c56399fda3f88ae675fd9c
validateActivatedProfiles
private void validateActivatedProfiles(List<MavenProject> projects, List<String> activeProfileIds)
{    Collection<String> notActivatedProfileIds = new LinkedHashSet<>(activeProfileIds);    for (MavenProject project : projects) {        for (List<String> profileIds : project.getInjectedProfileIds().values()) {            notActivatedProfileIds.removeAll(profileIds);        }    }    for (String notActivatedProfileId : notActivatedProfileIds) {        logger.warn("The requested profile \"" + notActivatedProfileId + "\" could not be activated because it does not exist.");    }}
6c0ac4fde3d5996272e9ce978add96946cb059933b3057188b042b2b1ac16eee
getProjectMap
private Map<String, MavenProject> getProjectMap(Collection<MavenProject> projects) throws DuplicateProjectException
{    Map<String, MavenProject> index = new LinkedHashMap<>();    Map<String, List<File>> collisions = new LinkedHashMap<>();    for (MavenProject project : projects) {        String projectId = ArtifactUtils.key(project.getGroupId(), project.getArtifactId(), project.getVersion());        MavenProject collision = index.get(projectId);        if (collision == null) {            index.put(projectId, project);        } else {            List<File> pomFiles = collisions.get(projectId);            if (pomFiles == null) {                pomFiles = new ArrayList<>(Arrays.asList(collision.getFile(), project.getFile()));                collisions.put(projectId, pomFiles);            } else {                pomFiles.add(project.getFile());            }        }    }    if (!collisions.isEmpty()) {        throw new DuplicateProjectException("Two or more projects in the reactor" + " have the same identifier, please make sure that <groupId>:<artifactId>:<version>" + " is unique for each project: " + collisions, collisions);    }    return index;}
690398872e2962a7996a75991bd6d6e8310ba311d4553d2aa171f73733c81dfe
buildGraph
private Result<? extends ProjectDependencyGraph> buildGraph(MavenSession session, MavenExecutionResult result)
{    Result<? extends ProjectDependencyGraph> graphResult = graphBuilder.build(session);    for (ModelProblem problem : graphResult.getProblems()) {        if (problem.getSeverity() == ModelProblem.Severity.WARNING) {            logger.warn(problem.toString());        } else {            logger.error(problem.toString());        }    }    if (!graphResult.hasErrors()) {        ProjectDependencyGraph projectDependencyGraph = graphResult.get();        session.setProjects(projectDependencyGraph.getSortedProjects());        session.setAllProjects(projectDependencyGraph.getAllProjects());        session.setProjectDependencyGraph(projectDependencyGraph);    }    return graphResult;}
e612cdc48fea06e4de5f115f0edba155942b7baddd36edf6301ea7c5b280a99c
getLogger
protected Logger getLogger()
{    return logger;}
105a02942c9b60071296b669e2388f85fc854a80bb644cc553b7ac024ebdeaaa
resolve
public Set<Artifact> resolve(MavenProject project, Collection<String> scopesToResolve, MavenSession session) throws ArtifactResolutionException, ArtifactNotFoundException
{    return resolve(Collections.singleton(project), scopesToResolve, session);}
73c8001980e8998b547af6dd91fd9bb87216ef63492ee7c12dc51209a6a49dd7
resolve
public Set<Artifact> resolve(MavenProject project, Collection<String> scopesToCollect, Collection<String> scopesToResolve, MavenSession session) throws ArtifactResolutionException, ArtifactNotFoundException
{    Set<MavenProject> mavenProjects = Collections.singleton(project);    return resolveImpl(mavenProjects, scopesToCollect, scopesToResolve, session, getIgnorableArtifacts(mavenProjects));}
6e3d10e2a997ead68dca71877aedd5c85b683dcbe16605c6972de72fffc7d7d2
resolve
public Set<Artifact> resolve(Collection<? extends MavenProject> projects, Collection<String> scopesToResolve, MavenSession session) throws ArtifactResolutionException, ArtifactNotFoundException
{    return resolveImpl(projects, null, scopesToResolve, session, getIgnorableArtifacts(projects));}
988c89b0b443036b944767113509b895059c8e6867ad713df30f45aa799c8ae5
resolve
public Set<Artifact> resolve(MavenProject project, Collection<String> scopesToCollect, Collection<String> scopesToResolve, MavenSession session, Set<Artifact> ignoreableArtifacts) throws ArtifactResolutionException, ArtifactNotFoundException
{    return resolveImpl(Collections.singleton(project), scopesToCollect, scopesToResolve, session, getIgnorableArtifacts(ignoreableArtifacts));}
122fbd0e1409fa4496895dc7f75950ca4ad8fb90d3301b3319bcb2ef3cf40c81
resolveImpl
private Set<Artifact> resolveImpl(Collection<? extends MavenProject> projects, Collection<String> scopesToCollect, Collection<String> scopesToResolve, MavenSession session, Set<String> projectIds) throws ArtifactResolutionException, ArtifactNotFoundException
{    Set<Artifact> resolved = new LinkedHashSet<>();    if (projects == null || projects.isEmpty()) {        return resolved;    }    if ((scopesToCollect == null || scopesToCollect.isEmpty()) && (scopesToResolve == null || scopesToResolve.isEmpty())) {        return resolved;    }    /*        Logic for transitive global exclusions        List<String> exclusions = new ArrayList<String>();        for ( Dependency d : project.getDependencies() )        {            if ( d.getExclusions() != null )            {                for ( Exclusion e : d.getExclusions() )                {                    exclusions.add(  e.getGroupId() + ":" + e.getArtifactId() );                }            }        }        ArtifactFilter scopeFilter = new ScopeArtifactFilter( scope );        ArtifactFilter filter;        if ( ! exclusions.isEmpty() )        {            filter = new AndArtifactFilter( Arrays.asList( new ArtifactFilter[]{                 new ExcludesArtifactFilter( exclusions ), scopeFilter } ) );        }        else        {            filter = scopeFilter;        }        */    CumulativeScopeArtifactFilter resolutionScopeFilter = new CumulativeScopeArtifactFilter(scopesToResolve);    CumulativeScopeArtifactFilter collectionScopeFilter = new CumulativeScopeArtifactFilter(scopesToCollect);    collectionScopeFilter = new CumulativeScopeArtifactFilter(collectionScopeFilter, resolutionScopeFilter);    ArtifactResolutionRequest request = new ArtifactResolutionRequest().setResolveRoot(false).setResolveTransitively(true).setCollectionFilter(collectionScopeFilter).setResolutionFilter(resolutionScopeFilter).setLocalRepository(session.getLocalRepository()).setOffline(session.isOffline()).setForceUpdate(session.getRequest().isUpdateSnapshots());    request.setServers(session.getRequest().getServers());    request.setMirrors(session.getRequest().getMirrors());    request.setProxies(session.getRequest().getProxies());    for (MavenProject project : projects) {        request.setArtifact(new ProjectArtifact(project));        request.setArtifactDependencies(project.getDependencyArtifacts());        request.setManagedVersionMap(project.getManagedVersionMap());        request.setRemoteRepositories(project.getRemoteArtifactRepositories());        ArtifactResolutionResult result = repositorySystem.resolve(request);        try {            resolutionErrorHandler.throwErrors(request, result);        } catch (MultipleArtifactsNotFoundException e) {            Collection<Artifact> missing = new HashSet<>(e.getMissingArtifacts());            for (Iterator<Artifact> it = missing.iterator(); it.hasNext(); ) {                String key = ArtifactUtils.key(it.next());                if (projectIds.contains(key)) {                    it.remove();                }            }            if (!missing.isEmpty()) {                throw e;            }        }        resolved.addAll(result.getArtifacts());    }    return resolved;}
b0842ff2194a990ffbc2ad0fec38cd03d8e60e319e7ea3164039874c7ddd226d
getIgnorableArtifacts
private Set<String> getIgnorableArtifacts(Collection<? extends MavenProject> projects)
{    Set<String> projectIds = new HashSet<>(projects.size() * 2);    for (MavenProject p : projects) {        String key = ArtifactUtils.key(p.getGroupId(), p.getArtifactId(), p.getVersion());        projectIds.add(key);    }    return projectIds;}
3145bde69952cf2cf4893895a79ef4743ba4f47b9eb1de99af75e8a07e698ee0
getIgnorableArtifacts
private Set<String> getIgnorableArtifacts(Iterable<Artifact> artifactIterable)
{    Set<String> projectIds = new HashSet<>();    for (Artifact artifact : artifactIterable) {        String key = ArtifactUtils.key(artifact);        projectIds.add(key);    }    return projectIds;}
f15160ea76bf61dc70597361537a510ebb89b7c17ddafcd8e7c302a707abc3fa
getCollisions
public Map<String, List<File>> getCollisions()
{    return collisions;}
f7f21ca868677815c46d8acac84d80299605f0f5e5dc0709427a04a8b44e11d2
init
public void init(Context context) throws Exception
{}
fcdcda818f175a151318fa75091eefb2dfd616416b82188233f8bfd03168a16c
onEvent
public void onEvent(Object event) throws Exception
{}
01bdbe3d598775bcdfd40c576dd509ca608ffa3f8e9f84c10577008566681778
close
public void close() throws Exception
{}
b855fe36e61a0c7bbc50b2c7862dde99382dbf48eb213104fbb65fb7e21df997
setEventSpies
public void setEventSpies(List<EventSpy> eventSpies)
{        this.eventSpies = new ArrayList<>(eventSpies);}
ded10ef389f8538d346267636cd838ee400f265c5edbf6189d3d636b356cd0d8
getEventSpies
public List<EventSpy> getEventSpies()
{    return eventSpies;}
2b19d95b5f18d0cf86b04b3c611233be1fc1537df3f1d346d60d2454857dc724
chainListener
public ExecutionListener chainListener(ExecutionListener listener)
{    if (eventSpies.isEmpty()) {        return listener;    }    return new EventSpyExecutionListener(this, listener);}
6f1a7c497cbf2dbc1f832829c25201139f268aaa35e9d1440a80cce151295793
chainListener
public RepositoryListener chainListener(RepositoryListener listener)
{    if (eventSpies.isEmpty()) {        return listener;    }    return new EventSpyRepositoryListener(this, listener);}
86b95deefa352c06868535683da590ea29bbbfb88fb83faa52ea1d0a9ace01a0
init
public void init(EventSpy.Context context)
{    if (eventSpies.isEmpty()) {        return;    }    for (EventSpy eventSpy : eventSpies) {        try {            eventSpy.init(context);        } catch (Exception | LinkageError e) {            logError("initialize", e, eventSpy);        }    }}
e156fe8b0cd5a133e08b292f47b406c49137fcb95d9aef3e2e530e65a5e8a86e
onEvent
public void onEvent(Object event)
{    if (eventSpies.isEmpty()) {        return;    }    for (EventSpy eventSpy : eventSpies) {        try {            eventSpy.onEvent(event);        } catch (Exception | LinkageError e) {            logError("notify", e, eventSpy);        }    }}
5df6118bc0e745d8b18e0a6a99b2e3f2ddba8140cbeb1423ce2df50a9f140574
close
public void close()
{    if (eventSpies.isEmpty()) {        return;    }    for (EventSpy eventSpy : eventSpies) {        try {            eventSpy.close();        } catch (Exception | LinkageError e) {            logError("close", e, eventSpy);        }    }}
ecfc59fb9b14c2a196522b39c5aa0d59412e721bac0d1216be05dc8774255861
logError
private void logError(String action, Throwable e, EventSpy spy)
{    String msg = "Failed to " + action + " spy " + spy.getClass().getName() + ": " + e.getMessage();    if (logger.isDebugEnabled()) {        logger.warn(msg, e);    } else {        logger.warn(msg);    }}
bde074900751c3b25c26912d6c9be48e4d4843d941508f08d4e23d0a1a535db5
projectDiscoveryStarted
public void projectDiscoveryStarted(ExecutionEvent event)
{    dispatcher.onEvent(event);    delegate.projectDiscoveryStarted(event);}
c45e4dd7ea75ec66380b113e76712481ffa32a1ab1707e8bf77234af1a3f71f0
sessionStarted
public void sessionStarted(ExecutionEvent event)
{    dispatcher.onEvent(event);    delegate.sessionStarted(event);}
73cf25d4af4150bd5e6423205c871e872330c350d955ee4bf8f527df86a22215
sessionEnded
public void sessionEnded(ExecutionEvent event)
{    dispatcher.onEvent(event);    delegate.sessionEnded(event);}
d319d6ff0357b049c416e143bb2b46f1bcdb12bfbfcb6e240e05a648218eeaab
projectSkipped
public void projectSkipped(ExecutionEvent event)
{    dispatcher.onEvent(event);    delegate.projectSkipped(event);}
dd3e62eef1d8e7cab546dfe7191afb60ca4d59daa13f2054d91e4e97be33b80f
projectStarted
public void projectStarted(ExecutionEvent event)
{    dispatcher.onEvent(event);    delegate.projectStarted(event);}
462985bc520652801139a6abab08c6d88b80896ccf40175a5a2c11c72f10880e
projectSucceeded
public void projectSucceeded(ExecutionEvent event)
{    dispatcher.onEvent(event);    delegate.projectSucceeded(event);}
c73c92fd1a50a03ec73f503b51150e9440e9fc5848dd5f162d1784b9fd65dcd5
projectFailed
public void projectFailed(ExecutionEvent event)
{    dispatcher.onEvent(event);    delegate.projectFailed(event);}
27cbe5e049a212addd857ddfe44c0b4b27c450ea4f4fdb39091e9e7d900c34bc
forkStarted
public void forkStarted(ExecutionEvent event)
{    dispatcher.onEvent(event);    delegate.forkStarted(event);}
d2cd2407e98598390dda7c32774876409194957bcf85c6aaccede8839f570c9e
forkSucceeded
public void forkSucceeded(ExecutionEvent event)
{    dispatcher.onEvent(event);    delegate.forkSucceeded(event);}
fcd2724edf48c74dfef2b4d82badae78954e989769af48b0dd246ccbff82161f
forkFailed
public void forkFailed(ExecutionEvent event)
{    dispatcher.onEvent(event);    delegate.forkFailed(event);}
b7a2616539a1d5fa0295fa4db735ebf0339570272731149c7d79ea145f8d275e
mojoSkipped
public void mojoSkipped(ExecutionEvent event)
{    dispatcher.onEvent(event);    delegate.mojoSkipped(event);}
d5ce85245dc6eeb7970d2efaa177d17cd4ac3d4023f01b7d6be498e000967579
mojoStarted
public void mojoStarted(ExecutionEvent event)
{    dispatcher.onEvent(event);    delegate.mojoStarted(event);}
e48d0a79627139756189bf887153e441589d934c1d7d64498f4af3643335a7f1
mojoSucceeded
public void mojoSucceeded(ExecutionEvent event)
{    dispatcher.onEvent(event);    delegate.mojoSucceeded(event);}
cc76fa543dff99ec6eac583da5a59dad310fbf22d3e2dabaf21a2cf56ce74395
mojoFailed
public void mojoFailed(ExecutionEvent event)
{    dispatcher.onEvent(event);    delegate.mojoFailed(event);}
444ad0a75462931f834b7df4b26ab092609d9ba60f680a92a5d59ee5eba5a30e
forkedProjectStarted
public void forkedProjectStarted(ExecutionEvent event)
{    dispatcher.onEvent(event);    delegate.forkedProjectStarted(event);}
ac78c7f7abd65541df61e5eea6b134d98e4b0f11133086f1e25fbcc569e3ddd3
forkedProjectSucceeded
public void forkedProjectSucceeded(ExecutionEvent event)
{    dispatcher.onEvent(event);    delegate.forkedProjectSucceeded(event);}
074a782706ec77edab3da50e942a42c109daa9226843ee807d18d527d4aa7074
forkedProjectFailed
public void forkedProjectFailed(ExecutionEvent event)
{    dispatcher.onEvent(event);    delegate.forkedProjectFailed(event);}
b3a25219893e44d3bf19456a3603cbffd0b351baefbd4df7b48b8c0658c749ef
artifactDeployed
public void artifactDeployed(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.artifactDeployed(event);}
6154a169e945319fe612b4f8f7558f2b6d1712fd469be1c5f0f868f22a3c5494
artifactDeploying
public void artifactDeploying(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.artifactDeploying(event);}
f1e301d83bfdae897667ae95d4f5d2492d3c00907292eb6c9aa79610986d6676
artifactDescriptorInvalid
public void artifactDescriptorInvalid(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.artifactDescriptorInvalid(event);}
eabdfac5fe85a9fb25305640d906eafc91431676b02d8419323e702d711b1d9b
artifactDescriptorMissing
public void artifactDescriptorMissing(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.artifactDescriptorMissing(event);}
8e8ea92d4d2a193565eeb171d7e62b4fe3d438a3ed250d2019f57376e291a72a
artifactInstalled
public void artifactInstalled(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.artifactInstalled(event);}
8a756148e2b12512aa3928f8ac78935964f7942d5ac4aa39608e8065ea8cbfbb
artifactInstalling
public void artifactInstalling(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.artifactInstalling(event);}
40fd07553750fd47584bb574904f97f461cec4092efee37cc6dd0d07580e3a1c
artifactResolved
public void artifactResolved(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.artifactResolved(event);}
078ae8163bc558e4cd07798d09f2be2113d04dc0ca12254f8980f6fd0ad45162
artifactResolving
public void artifactResolving(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.artifactResolving(event);}
f648c8d5b18eccf82f72313817b3d08af194f0e181b076f9d38520abeaf633c0
metadataDeployed
public void metadataDeployed(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.metadataDeployed(event);}
d5dfa50396ffc19e7af9fa14bd9a5c3212d4d12dc9d6987f4a0014a1a11037a4
metadataDeploying
public void metadataDeploying(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.metadataDeploying(event);}
1cb30e055e371de3ffb136f5b2f3afb29bf18a223794ee93a76150a2aece8dd7
metadataInstalled
public void metadataInstalled(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.metadataInstalled(event);}
eb974cf8314cc951656e512e4f6617994786037e4c0ca6b1733127dfb0e47f73
metadataInstalling
public void metadataInstalling(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.metadataInstalling(event);}
11feda80caf4c182286f3c22a0012ae9dd09a08ef64509a1b58e7dd663e483ce
metadataInvalid
public void metadataInvalid(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.metadataInvalid(event);}
87a28c3260b10bd2d310415ff0e99f76ce1ee09fbbb12d062e70b8149e201f44
metadataResolved
public void metadataResolved(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.metadataResolved(event);}
ca0a77257b3764653f5f520784024dc0a5877c1cd1fe6cc06bd45ee1c3980d0b
metadataResolving
public void metadataResolving(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.metadataResolving(event);}
7dac4b5513fcf9f6c452e181588bdd50e054967f94d1068e78e293d0a3b68408
artifactDownloaded
public void artifactDownloaded(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.artifactDownloaded(event);}
b2e0a06942acbb4b3465a301aadf6cf7c1611b857ff824e618156f6b5a3d71b3
artifactDownloading
public void artifactDownloading(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.artifactDownloading(event);}
c4f9cce08366e31dba1e7c12d2b62c5603f0c8921a9f73e7aa1e796006210011
metadataDownloaded
public void metadataDownloaded(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.metadataDownloaded(event);}
eb9d5b9ca769191748efcd430b41be69e4192628945f4bc48087a404d241ea0a
metadataDownloading
public void metadataDownloading(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.metadataDownloading(event);}
16ec81ef3ac2b249fce4df77d1d244b86ce19414cc41054c7f62a4e088e3dc9a
handleException
public ExceptionSummary handleException(Throwable exception)
{    return handle("", exception);}
34e365aca16f47d685972718d71761ed70c3b71310fa83c7ead05e2aa6cba3d8
handle
private ExceptionSummary handle(String message, Throwable exception)
{    String reference = getReference(exception);    List<ExceptionSummary> children = null;    if (exception instanceof ProjectBuildingException) {        List<ProjectBuildingResult> results = ((ProjectBuildingException) exception).getResults();        children = new ArrayList<>();        for (ProjectBuildingResult result : results) {            ExceptionSummary child = handle(result);            if (child != null) {                children.add(child);            }        }        message = "The build could not read " + children.size() + " project" + (children.size() == 1 ? "" : "s");    } else {        message = getMessage(message, exception);    }    return new ExceptionSummary(exception, message, reference, children);}
5666d62d99096d70eacad1d921c27452e434332a5b76ff644708a733814ba465
handle
private ExceptionSummary handle(ProjectBuildingResult result)
{    List<ExceptionSummary> children = new ArrayList<>();    for (ModelProblem problem : result.getProblems()) {        ExceptionSummary child = handle(problem, result.getProjectId());        if (child != null) {            children.add(child);        }    }    if (children.isEmpty()) {        return null;    }    String message = "\nThe project " + result.getProjectId() + " (" + result.getPomFile() + ") has " + children.size() + " error" + (children.size() == 1 ? "" : "s");    return new ExceptionSummary(null, message, null, children);}
80f01d46b67ee8b7343a31dc137f561ce19ff296bb44c0ee7b1208c4df6c63bb
handle
private ExceptionSummary handle(ModelProblem problem, String projectId)
{    if (ModelProblem.Severity.ERROR.compareTo(problem.getSeverity()) >= 0) {        String message = problem.getMessage();        String location = ModelProblemUtils.formatLocation(problem, projectId);        if (StringUtils.isNotEmpty(location)) {            message += " @ " + location;        }        return handle(message, problem.getException());    } else {        return null;    }}
313dde1ce4f1b7a871f1e39766865622825cec5eeb242b1361f94fb2bd625bd2
getReference
private String getReference(Throwable exception)
{    String reference = "";    if (exception != null) {        if (exception instanceof MojoExecutionException) {            reference = MojoExecutionException.class.getSimpleName();            Throwable cause = exception.getCause();            if (cause instanceof IOException) {                cause = cause.getCause();                if (cause instanceof ConnectException) {                    reference = ConnectException.class.getSimpleName();                }            }        } else if (exception instanceof MojoFailureException) {            reference = MojoFailureException.class.getSimpleName();        } else if (exception instanceof LinkageError) {            reference = LinkageError.class.getSimpleName();        } else if (exception instanceof PluginExecutionException) {            Throwable cause = exception.getCause();            if (cause instanceof PluginContainerException) {                Throwable cause2 = cause.getCause();                if (cause2 instanceof NoClassDefFoundError) {                    String message = cause2.getMessage();                    if (message != null && message.contains("org/sonatype/aether/")) {                        reference = "AetherClassNotFound";                    }                }            }            if (StringUtils.isEmpty(reference)) {                reference = getReference(cause);            }            if (StringUtils.isEmpty(reference)) {                reference = exception.getClass().getSimpleName();            }        } else if (exception instanceof LifecycleExecutionException) {            reference = getReference(exception.getCause());        } else if (isNoteworthyException(exception)) {            reference = exception.getClass().getSimpleName();        }    }    if (StringUtils.isNotEmpty(reference) && !reference.startsWith("http:")) {        reference = "http://cwiki.apache.org/confluence/display/MAVEN/" + reference;    }    return reference;}
9c9c1e132f0c386342abb14abc91031088c961aefeff5e02333eb5f82828f0fb
isNoteworthyException
private boolean isNoteworthyException(Throwable exception)
{    if (exception == null) {        return false;    } else if (exception instanceof Error) {        return true;    } else if (exception instanceof RuntimeException) {        return false;    } else if (exception.getClass().getName().startsWith("java")) {        return false;    }    return true;}
1c968b7ab3d5e4447f93a9fb91a0842d158ce9c8c045b5717b7b287bc610170b
getMessage
private String getMessage(String message, Throwable exception)
{    String fullMessage = (message != null) ? message : "";    for (Throwable t = exception; t != null; t = t.getCause()) {        String exceptionMessage = t.getMessage();        if (t instanceof AbstractMojoExecutionException) {            String longMessage = ((AbstractMojoExecutionException) t).getLongMessage();            if (StringUtils.isNotEmpty(longMessage)) {                if (StringUtils.isEmpty(exceptionMessage) || longMessage.contains(exceptionMessage)) {                    exceptionMessage = longMessage;                } else if (!exceptionMessage.contains(longMessage)) {                    exceptionMessage = join(exceptionMessage, '\n' + longMessage);                }            }        }        if (StringUtils.isEmpty(exceptionMessage)) {            exceptionMessage = t.getClass().getSimpleName();        }        if (t instanceof UnknownHostException && !fullMessage.contains("host")) {            fullMessage = join(fullMessage, "Unknown host " + exceptionMessage);        } else if (!fullMessage.contains(exceptionMessage)) {            fullMessage = join(fullMessage, exceptionMessage);        }    }    return fullMessage.trim();}
5eac21f5268fbc897bab99a1ea212c0d491b1226a023f10414deddd7941719ee
join
private String join(String message1, String message2)
{    String message = "";    if (StringUtils.isNotEmpty(message1)) {        message = message1.trim();    }    if (StringUtils.isNotEmpty(message2)) {        if (StringUtils.isNotEmpty(message)) {            if (message.endsWith(".") || message.endsWith("!") || message.endsWith(":")) {                message += " ";            } else {                message += ": ";            }        }        message += message2;    }    return message;}
0d4f7dcbc4d02d8196622c2176139421d6aee6297a781d3f13622d8238a8f1b8
getException
public Throwable getException()
{    return exception;}
b46153cc21231cb60e014b6b3c49b437699575e4012681cb08026e5238c66751
getMessage
public String getMessage()
{    return message;}
39bb1077e5d17adade5671e611570321915f82b5a3f2c36fb94c0993edd5fb6f
getReference
public String getReference()
{    return reference;}
a2048ecc60b9f7c5486420fadec4ece3af6273465a4af8361c8eab11e6025986
getChildren
public List<ExceptionSummary> getChildren()
{    return children;}
bde074900751c3b25c26912d6c9be48e4d4843d941508f08d4e23d0a1a535db5
projectDiscoveryStarted
public void projectDiscoveryStarted(ExecutionEvent event)
{}
c45e4dd7ea75ec66380b113e76712481ffa32a1ab1707e8bf77234af1a3f71f0
sessionStarted
public void sessionStarted(ExecutionEvent event)
{}
73cf25d4af4150bd5e6423205c871e872330c350d955ee4bf8f527df86a22215
sessionEnded
public void sessionEnded(ExecutionEvent event)
{}
d319d6ff0357b049c416e143bb2b46f1bcdb12bfbfcb6e240e05a648218eeaab
projectSkipped
public void projectSkipped(ExecutionEvent event)
{}
dd3e62eef1d8e7cab546dfe7191afb60ca4d59daa13f2054d91e4e97be33b80f
projectStarted
public void projectStarted(ExecutionEvent event)
{}
462985bc520652801139a6abab08c6d88b80896ccf40175a5a2c11c72f10880e
projectSucceeded
public void projectSucceeded(ExecutionEvent event)
{}
c73c92fd1a50a03ec73f503b51150e9440e9fc5848dd5f162d1784b9fd65dcd5
projectFailed
public void projectFailed(ExecutionEvent event)
{}
27cbe5e049a212addd857ddfe44c0b4b27c450ea4f4fdb39091e9e7d900c34bc
forkStarted
public void forkStarted(ExecutionEvent event)
{}
d2cd2407e98598390dda7c32774876409194957bcf85c6aaccede8839f570c9e
forkSucceeded
public void forkSucceeded(ExecutionEvent event)
{}
fcd2724edf48c74dfef2b4d82badae78954e989769af48b0dd246ccbff82161f
forkFailed
public void forkFailed(ExecutionEvent event)
{}
b7a2616539a1d5fa0295fa4db735ebf0339570272731149c7d79ea145f8d275e
mojoSkipped
public void mojoSkipped(ExecutionEvent event)
{}
d5ce85245dc6eeb7970d2efaa177d17cd4ac3d4023f01b7d6be498e000967579
mojoStarted
public void mojoStarted(ExecutionEvent event)
{}
e48d0a79627139756189bf887153e441589d934c1d7d64498f4af3643335a7f1
mojoSucceeded
public void mojoSucceeded(ExecutionEvent event)
{}
cc76fa543dff99ec6eac583da5a59dad310fbf22d3e2dabaf21a2cf56ce74395
mojoFailed
public void mojoFailed(ExecutionEvent event)
{}
444ad0a75462931f834b7df4b26ab092609d9ba60f680a92a5d59ee5eba5a30e
forkedProjectStarted
public void forkedProjectStarted(ExecutionEvent event)
{}
ac78c7f7abd65541df61e5eea6b134d98e4b0f11133086f1e25fbcc569e3ddd3
forkedProjectSucceeded
public void forkedProjectSucceeded(ExecutionEvent event)
{}
074a782706ec77edab3da50e942a42c109daa9226843ee807d18d527d4aa7074
forkedProjectFailed
public void forkedProjectFailed(ExecutionEvent event)
{}
3e7d70044d393c21fe2b8a32bb324941f159bc4a69cb81127e56e927719c28fd
getCause
public Throwable getCause()
{    return cause;}
cdcc47ed1eccb5aa7ba2aa1d33b327142be7cbcc16c1cff19fde28a6b8e02541
getProject
public MavenProject getProject()
{    return project;}
e908edc1322f03e7ca2dd841fb14f8c24df7b4eaa009531591d695d31b6fe131
getTime
public long getTime()
{    return time;}
81f14f655fc13ef63d739ddc2c9098967156dbd539b7a418407cf9ad7c2a5b1c
copy
public static MavenExecutionRequest copy(MavenExecutionRequest original)
{    DefaultMavenExecutionRequest copy = new DefaultMavenExecutionRequest();    copy.setLocalRepository(original.getLocalRepository());    copy.setLocalRepositoryPath(original.getLocalRepositoryPath());    copy.setOffline(original.isOffline());    copy.setInteractiveMode(original.isInteractiveMode());    copy.setCacheNotFound(original.isCacheNotFound());    copy.setCacheTransferError(original.isCacheTransferError());    copy.setProxies(original.getProxies());    copy.setServers(original.getServers());    copy.setMirrors(original.getMirrors());    copy.setProfiles(original.getProfiles());    copy.setPluginGroups(original.getPluginGroups());    copy.setProjectPresent(original.isProjectPresent());    copy.setUserSettingsFile(original.getUserSettingsFile());    copy.setGlobalSettingsFile(original.getGlobalSettingsFile());    copy.setUserToolchainsFile(original.getUserToolchainsFile());    copy.setGlobalToolchainsFile(original.getGlobalToolchainsFile());    copy.setBaseDirectory((original.getBaseDirectory() != null) ? new File(original.getBaseDirectory()) : null);    copy.setGoals(original.getGoals());    copy.setRecursive(original.isRecursive());    copy.setPom(original.getPom());    copy.setSystemProperties(original.getSystemProperties());    copy.setUserProperties(original.getUserProperties());    copy.setShowErrors(original.isShowErrors());    copy.setActiveProfiles(original.getActiveProfiles());    copy.setInactiveProfiles(original.getInactiveProfiles());    copy.setTransferListener(original.getTransferListener());    copy.setLoggingLevel(original.getLoggingLevel());    copy.setGlobalChecksumPolicy(original.getGlobalChecksumPolicy());    copy.setUpdateSnapshots(original.isUpdateSnapshots());    copy.setRemoteRepositories(original.getRemoteRepositories());    copy.setPluginArtifactRepositories(original.getPluginArtifactRepositories());    copy.setRepositoryCache(original.getRepositoryCache());    copy.setWorkspaceReader(original.getWorkspaceReader());    copy.setNoSnapshotUpdates(original.isNoSnapshotUpdates());    copy.setExecutionListener(original.getExecutionListener());    copy.setUseLegacyLocalRepository(original.isUseLegacyLocalRepository());    copy.setBuilderId(original.getBuilderId());    return copy;}
274e6dc9d0957a467d081764c69e8d9b1bd9b5dfa274e6d521eace0398568efd
getBaseDirectory
public String getBaseDirectory()
{    if (basedir == null) {        return null;    }    return basedir.getAbsolutePath();}
64dc696be33c6c348d62217243ad7506283ed2be89f1b5410c8acb51390d930b
getLocalRepository
public ArtifactRepository getLocalRepository()
{    return localRepository;}
3d92d6f0bc8f0ef62213b4e6b7d1149c3955ec0c6d16d88dc44b2c9340206548
getLocalRepositoryPath
public File getLocalRepositoryPath()
{    return localRepositoryPath;}
1e99acd0defcbcc8261233107f4e9f5ce41831ed002a91888e858ecfc9460e34
getGoals
public List<String> getGoals()
{    if (goals == null) {        goals = new ArrayList<>();    }    return goals;}
8b369022cea09c7bb7272e8cc545450dc294bedf652bae5b2ea9f14fffe1fc46
getSystemProperties
public Properties getSystemProperties()
{    if (systemProperties == null) {        systemProperties = new Properties();    }    return systemProperties;}
378f8d6e21d4ae0bd6aa85de0988ab8d214704648e0ad1a17b8ce9c7e3a14225
getUserProperties
public Properties getUserProperties()
{    if (userProperties == null) {        userProperties = new Properties();    }    return userProperties;}
0cd2f0810b1d0fb26aea1c44b652d1d3cb9781c1a327a4c077b8e13997b262f2
getPom
public File getPom()
{    return pom;}
f64e269f05b984cd2479fdf46401e6770238ef8a3e467259ca6e3c6f623502c4
getReactorFailureBehavior
public String getReactorFailureBehavior()
{    return reactorFailureBehavior;}
d37302f019d2c84895fcacf8c831435f9403ffc4d833d761502291ca53fc77dd
getSelectedProjects
public List<String> getSelectedProjects()
{    if (selectedProjects == null) {        selectedProjects = new ArrayList<>();    }    return selectedProjects;}
b6ac1b8eaf3db0cb8e7ee7cac3ba84d5b86096bf1e8fb7fe6ff4775bbacae74a
getExcludedProjects
public List<String> getExcludedProjects()
{    if (excludedProjects == null) {        excludedProjects = new ArrayList<>();    }    return excludedProjects;}
698cd34d48fc17c428109e5a5d313c51bf5650ccfd82b265e38f0785c4cd745c
getResumeFrom
public String getResumeFrom()
{    return resumeFrom;}
899c9fb458ade80ca43824b24931179baee35352a0c7922acbcc1ae16799f865
getMakeBehavior
public String getMakeBehavior()
{    return makeBehavior;}
fc7efdc8a23de017fc917165b9ae032ee66d4e4833599682304d07bd8185ab2c
getStartTime
public Date getStartTime()
{    return startTime;}
db8598d4554c461d2fbe3ad311e5529c836eece9a3a02e7c72b631746c8871fd
isShowErrors
public boolean isShowErrors()
{    return showErrors;}
295fe44b490a90626c65066257d0e00760c32b01f76e5d0fc4073c1de65feb55
isInteractiveMode
public boolean isInteractiveMode()
{    return interactiveMode;}
75840daa914b73b81c427af8911768b22841519bd84f5ce3643e460a4c7271c1
setActiveProfiles
public MavenExecutionRequest setActiveProfiles(List<String> activeProfiles)
{    if (activeProfiles != null) {        this.activeProfiles = new ArrayList<>(activeProfiles);    } else {        this.activeProfiles = null;    }    return this;}
4a997c695b2931e4a39760a13146820972fc0d111665951c140c7953f0cc151d
setInactiveProfiles
public MavenExecutionRequest setInactiveProfiles(List<String> inactiveProfiles)
{    if (inactiveProfiles != null) {        this.inactiveProfiles = new ArrayList<>(inactiveProfiles);    } else {        this.inactiveProfiles = null;    }    return this;}
f21b41bf5ed467970aecc95d399a97924360fe68db06e584e9db969dbdced2f7
setRemoteRepositories
public MavenExecutionRequest setRemoteRepositories(List<ArtifactRepository> remoteRepositories)
{    if (remoteRepositories != null) {        this.remoteRepositories = new ArrayList<>(remoteRepositories);    } else {        this.remoteRepositories = null;    }    return this;}
eb878f12f28182a35490400b4eec5a5328cd2b71c339c2f11989942597f41eb2
setPluginArtifactRepositories
public MavenExecutionRequest setPluginArtifactRepositories(List<ArtifactRepository> pluginArtifactRepositories)
{    if (pluginArtifactRepositories != null) {        this.pluginArtifactRepositories = new ArrayList<>(pluginArtifactRepositories);    } else {        this.pluginArtifactRepositories = null;    }    return this;}
280985528aae280eacaac066a60396ddded6147e4fca27e866fc08ce363e26ad
setProjectBuildingConfiguration
public void setProjectBuildingConfiguration(ProjectBuildingRequest projectBuildingConfiguration)
{    this.projectBuildingRequest = projectBuildingConfiguration;}
a6397ef5424e7e5562d887c38a3226cfed8d19bd224b27e54d80beadf97aef1b
getActiveProfiles
public List<String> getActiveProfiles()
{    if (activeProfiles == null) {        activeProfiles = new ArrayList<>();    }    return activeProfiles;}
de17c3da337b7b765339a7e4cdbc07f8bbcc9a4717f9742d6137eaee3c3382d1
getInactiveProfiles
public List<String> getInactiveProfiles()
{    if (inactiveProfiles == null) {        inactiveProfiles = new ArrayList<>();    }    return inactiveProfiles;}
7222bc1bba53361b08004c2c2d9c8cb47441922ea4728da34b0acd9647a544c9
getTransferListener
public TransferListener getTransferListener()
{    return transferListener;}
6f99fc8e43600dd6554ab25e7b3b5aba076e587282a92283d45762a879c4e43a
getLoggingLevel
public int getLoggingLevel()
{    return loggingLevel;}
9d7e8383b61b322508efc2a10595b57ab46f671235178f463907d85cad8d79c1
isOffline
public boolean isOffline()
{    return offline;}
17981a1906945de565aaed78a8b668d263c9c698f0ba99117d6e493aeedafc58
isUpdateSnapshots
public boolean isUpdateSnapshots()
{    return updateSnapshots;}
fafb8b3dab40d1defefc9d0ae780d8b018ac70ddd90bc1729191c0976155f405
isNoSnapshotUpdates
public boolean isNoSnapshotUpdates()
{    return noSnapshotUpdates;}
5756beaa7bc37cd19ec92f811159d3ed5f424707d95e8028899d66131657f546
getGlobalChecksumPolicy
public String getGlobalChecksumPolicy()
{    return globalChecksumPolicy;}
e56083dff4459f88fcc50707436382db85d93d65d44509e1d3d8106fbacaaa9a
isRecursive
public boolean isRecursive()
{    return recursive;}
9b1ee5e529a702093ec75cbce8a9ff9292902ecfd318a0420d9d8dd18748d094
setBaseDirectory
public MavenExecutionRequest setBaseDirectory(File basedir)
{    this.basedir = basedir;    return this;}
7c57daea47b03b3462e0f170a14638e428647d5337a79e19814c13e2440afdd0
setStartTime
public MavenExecutionRequest setStartTime(Date startTime)
{    this.startTime = startTime;    return this;}
67989dffa617578162388f89930b97708faa79bb0a9ff5ec19d826cc3c1ef7df
setShowErrors
public MavenExecutionRequest setShowErrors(boolean showErrors)
{    this.showErrors = showErrors;    return this;}
07aad0711736cd47b7ad9831d96960b6429eec28cd97ad0db370931a11db756e
setGoals
public MavenExecutionRequest setGoals(List<String> goals)
{    if (goals != null) {        this.goals = new ArrayList<>(goals);    } else {        this.goals = null;    }    return this;}
d957a62d64b06b56d32b2eb7ebb047bc0ab0461ae8b90265f31d57902d3996de
setLocalRepository
public MavenExecutionRequest setLocalRepository(ArtifactRepository localRepository)
{    this.localRepository = localRepository;    if (localRepository != null) {        setLocalRepositoryPath(new File(localRepository.getBasedir()).getAbsoluteFile());    }    return this;}
85ae5bf7f529b2252e5c8cdc0b2d140f99fbaf5fa46392b5e7c9b60c317a2294
setLocalRepositoryPath
public MavenExecutionRequest setLocalRepositoryPath(File localRepository)
{    localRepositoryPath = localRepository;    return this;}
42427235e6689010893fa5c2ea5fb289e888ab6a72059749e5c0fca5e8c02e1d
setLocalRepositoryPath
public MavenExecutionRequest setLocalRepositoryPath(String localRepository)
{    localRepositoryPath = (localRepository != null) ? new File(localRepository) : null;    return this;}
565b7156228cbc03a1b3187b94bdbc0bc438f9c292eafa32d79bd4095b78f97d
setSystemProperties
public MavenExecutionRequest setSystemProperties(Properties properties)
{    if (properties != null) {        this.systemProperties = SystemProperties.copyProperties(properties);    } else {        this.systemProperties = null;    }    return this;}
2c30634dc252bb233a5e0df7e8c57ea5bb402d35a469b7d0713a1d3f64e9f328
setUserProperties
public MavenExecutionRequest setUserProperties(Properties userProperties)
{    if (userProperties != null) {        this.userProperties = new Properties();        this.userProperties.putAll(userProperties);    } else {        this.userProperties = null;    }    return this;}
daa10e72791d77323714dc25685aed996562695bc3a62465d087d5e90e7b497d
setReactorFailureBehavior
public MavenExecutionRequest setReactorFailureBehavior(String failureBehavior)
{    reactorFailureBehavior = failureBehavior;    return this;}
e6a4e5551005e356b7dc8bb79e2b5c20abfa532294eb96968a2dafd16f4ca73c
setSelectedProjects
public MavenExecutionRequest setSelectedProjects(List<String> selectedProjects)
{    if (selectedProjects != null) {        this.selectedProjects = new ArrayList<>(selectedProjects);    } else {        this.selectedProjects = null;    }    return this;}
bc6264cbf2f0efab135213998dd8890acd981dd8960313530b1d654e436c5538
setExcludedProjects
public MavenExecutionRequest setExcludedProjects(List<String> excludedProjects)
{    if (excludedProjects != null) {        this.excludedProjects = new ArrayList<>(excludedProjects);    } else {        this.excludedProjects = null;    }    return this;}
25aa52b52cad1341179529c64ab8acd0933f33b0f28e6ec3b7c4c647eb850c2a
setResumeFrom
public MavenExecutionRequest setResumeFrom(String project)
{    this.resumeFrom = project;    return this;}
bfae357371d64048cd4e7145db021b68e723c2af853e6cb6f9c572216ef72e4b
setMakeBehavior
public MavenExecutionRequest setMakeBehavior(String makeBehavior)
{    this.makeBehavior = makeBehavior;    return this;}
b970f066448e9f7807a86cd5fb3b0144c3ea8c3954e724f6a2c7c47f8be44f54
addActiveProfile
public MavenExecutionRequest addActiveProfile(String profile)
{    if (!getActiveProfiles().contains(profile)) {        getActiveProfiles().add(profile);    }    return this;}
adffbcf1f438bb313698b0ffb860d054699e5587bae38408f0bee49f72874d60
addInactiveProfile
public MavenExecutionRequest addInactiveProfile(String profile)
{    if (!getInactiveProfiles().contains(profile)) {        getInactiveProfiles().add(profile);    }    return this;}
a3b6d653a7019e45934d9348c6790cdf8519859d49535100127bc2f2de73af8e
addActiveProfiles
public MavenExecutionRequest addActiveProfiles(List<String> profiles)
{    for (String profile : profiles) {        addActiveProfile(profile);    }    return this;}
ac45b19e5d2da8646410710416b50338fd7b57fea3582b56bec6e7e9f1fc034e
addInactiveProfiles
public MavenExecutionRequest addInactiveProfiles(List<String> profiles)
{    for (String profile : profiles) {        addInactiveProfile(profile);    }    return this;}
a748b98f8e623e94a4f6d027bb97ede93096f27c54d2af548bb29044a4cc33fa
setUseReactor
public MavenExecutionRequest setUseReactor(boolean reactorActive)
{    useReactor = reactorActive;    return this;}
8530c333df92daaae1363ab38e92f325425b0486dea6f2ae5a623abde729e1ac
useReactor
public boolean useReactor()
{    return useReactor;}
e26a25a832a574b858d8c05c7df4de1d71f73ab50868b69f76f1a1ec86fdca94
setPomFile
public MavenExecutionRequest setPomFile(String pomFilename)
{    if (pomFilename != null) {        pom = new File(pomFilename);    }    return this;}
0b003ec3fc2aed97e9a3da0a2768a7c88419cd7a8649a920231284432bd6cf5a
setPom
public MavenExecutionRequest setPom(File pom)
{    this.pom = pom;    return this;}
8be41df1c8b6606e0fd21501b0d069551958fb72ed27fce18cdd8a585fc7e342
setInteractiveMode
public MavenExecutionRequest setInteractiveMode(boolean interactive)
{    interactiveMode = interactive;    return this;}
81579229bb6ae52a02c41f84c0176daba786dea388a6b031c0ca49396430724f
setTransferListener
public MavenExecutionRequest setTransferListener(TransferListener transferListener)
{    this.transferListener = transferListener;    return this;}
f16013f37b4b7ec756eff0b4803488b228e99ef19ffc79ac095fd2f418142e0c
setLoggingLevel
public MavenExecutionRequest setLoggingLevel(int loggingLevel)
{    this.loggingLevel = loggingLevel;    return this;}
2575676e97eb33f2a83788693c7c07038c32f4f4c3597cfe85641f583e329b17
setOffline
public MavenExecutionRequest setOffline(boolean offline)
{    this.offline = offline;    return this;}
879b3362af08ba8ca4c4fabdfbe1cb0e9a3c462bf86271bc3c1f02cb15328b8c
setUpdateSnapshots
public MavenExecutionRequest setUpdateSnapshots(boolean updateSnapshots)
{    this.updateSnapshots = updateSnapshots;    return this;}
080106ae92e67fcbba7211bf812d145ecc45d03226c175f76066ca11df8f95c7
setNoSnapshotUpdates
public MavenExecutionRequest setNoSnapshotUpdates(boolean noSnapshotUpdates)
{    this.noSnapshotUpdates = noSnapshotUpdates;    return this;}
c02d5a8358dd754971d6001e86329eb829c50beb515666c71b0e29832a2b59ce
setGlobalChecksumPolicy
public MavenExecutionRequest setGlobalChecksumPolicy(String globalChecksumPolicy)
{    this.globalChecksumPolicy = globalChecksumPolicy;    return this;}
1dddedf2228f7f14ce20545b861fc996084e9df55600dfe14616dd12019e32fc
getProxies
public List<Proxy> getProxies()
{    if (proxies == null) {        proxies = new ArrayList<>();    }    return proxies;}
b8d9af5b12d48def7ac6942894ab6703ede9bd2be03001970ef9f1706acff137
setProxies
public MavenExecutionRequest setProxies(List<Proxy> proxies)
{    if (proxies != null) {        this.proxies = new ArrayList<>(proxies);    } else {        this.proxies = null;    }    return this;}
29267762d4afce3005fada584d151fc05b829f1395093cb667309164ed284543
addProxy
public MavenExecutionRequest addProxy(Proxy proxy)
{    Objects.requireNonNull(proxy, "proxy cannot be null");    for (Proxy p : getProxies()) {        if (p.getId() != null && p.getId().equals(proxy.getId())) {            return this;        }    }    getProxies().add(proxy);    return this;}
a50ce03fbdd41821e15d3724fddb0b75023a1201ba0f6a90b301b8541e5eec6c
getServers
public List<Server> getServers()
{    if (servers == null) {        servers = new ArrayList<>();    }    return servers;}
1bf0786acc6d0f3561044d7f632fe4a99d71776e05b6f4ca5021e7043e63d0f1
setServers
public MavenExecutionRequest setServers(List<Server> servers)
{    if (servers != null) {        this.servers = new ArrayList<>(servers);    } else {        this.servers = null;    }    return this;}
beda70221175c0d69e24fb2658d225d71aa555aeb9891082a088dd957b8be773
addServer
public MavenExecutionRequest addServer(Server server)
{    Objects.requireNonNull(server, "server cannot be null");    for (Server p : getServers()) {        if (p.getId() != null && p.getId().equals(server.getId())) {            return this;        }    }    getServers().add(server);    return this;}
69f4b60c578031d60780c45aa7e594dc69d72de0f04d05943fee5f7396090aff
getMirrors
public List<Mirror> getMirrors()
{    if (mirrors == null) {        mirrors = new ArrayList<>();    }    return mirrors;}
109fc3ea7f4cc33210501c37123582b912e3be55a7a703a6cb82e3e632bb803c
setMirrors
public MavenExecutionRequest setMirrors(List<Mirror> mirrors)
{    if (mirrors != null) {        this.mirrors = new ArrayList<>(mirrors);    } else {        this.mirrors = null;    }    return this;}
a2344b4044a94daab38a9bcd6e3bac60a7276c55ab502a932cf0430d1c4c2526
addMirror
public MavenExecutionRequest addMirror(Mirror mirror)
{    Objects.requireNonNull(mirror, "mirror cannot be null");    for (Mirror p : getMirrors()) {        if (p.getId() != null && p.getId().equals(mirror.getId())) {            return this;        }    }    getMirrors().add(mirror);    return this;}
07f936934d46b8317f059da2ec27eb16b676abfedf6a187723d3defbd4f5707f
getProfiles
public List<Profile> getProfiles()
{    if (profiles == null) {        profiles = new ArrayList<>();    }    return profiles;}
d06ba789eafcde28a5c6521b90e9c043b12dba55caf2d7925272609d9074cdb5
setProfiles
public MavenExecutionRequest setProfiles(List<Profile> profiles)
{    if (profiles != null) {        this.profiles = new ArrayList<>(profiles);    } else {        this.profiles = null;    }    return this;}
0288785a6c36414b98eec6c764e4ad51a1c637ff9dbf3f3324b9f18d982c807e
getPluginGroups
public List<String> getPluginGroups()
{    if (pluginGroups == null) {        pluginGroups = new ArrayList<>();    }    return pluginGroups;}
4c80110463390381f14ecdb64c2e8981ead2ef94e074828b2aebb4e7c8c1bf08
setPluginGroups
public MavenExecutionRequest setPluginGroups(List<String> pluginGroups)
{    if (pluginGroups != null) {        this.pluginGroups = new ArrayList<>(pluginGroups);    } else {        this.pluginGroups = null;    }    return this;}
34706990ba1d0b7f2f9db36fcf80d568680068367604afb8027107d4d73a6c53
addPluginGroup
public MavenExecutionRequest addPluginGroup(String pluginGroup)
{    if (!getPluginGroups().contains(pluginGroup)) {        getPluginGroups().add(pluginGroup);    }    return this;}
d1b0542a2e25f02f974018c903fbf412085f741117ce9242f696b6fc709dfe87
addPluginGroups
public MavenExecutionRequest addPluginGroups(List<String> pluginGroups)
{    for (String pluginGroup : pluginGroups) {        addPluginGroup(pluginGroup);    }    return this;}
e14bd250fba32878ee491eb659a308e1a8c1c90a5fbc1a4751bdf331a96866cc
setRecursive
public MavenExecutionRequest setRecursive(boolean recursive)
{    this.recursive = recursive;    return this;}
7cc0b7cd6a489390a309cbe2988629a309fb2547668eb90993f7115a927a127e
isProjectPresent
public boolean isProjectPresent()
{    return isProjectPresent;}
ac82b51b105fb7e374fd8e99cf48e01f78e92cba5b36574ca278542e69019dbf
setProjectPresent
public MavenExecutionRequest setProjectPresent(boolean projectPresent)
{    isProjectPresent = projectPresent;    return this;}
5815121cfc1ce6f319c1a893f64a30d2608dd239a4b592c68334cbb6fa7fa818
getUserSettingsFile
public File getUserSettingsFile()
{    return userSettingsFile;}
d5f80e4beb1f2e6ec1b269274ded8397af734723ea024506428fa9587ea2911d
setUserSettingsFile
public MavenExecutionRequest setUserSettingsFile(File userSettingsFile)
{    this.userSettingsFile = userSettingsFile;    return this;}
49e600078846f3f0fb7229d6bb535723c45d55deaf4b4cc47629c8f97872b45c
getGlobalSettingsFile
public File getGlobalSettingsFile()
{    return globalSettingsFile;}
011116a766153e63c574fc08235d5b66a7a29f32bca1a05367784bdf922ff3d9
setGlobalSettingsFile
public MavenExecutionRequest setGlobalSettingsFile(File globalSettingsFile)
{    this.globalSettingsFile = globalSettingsFile;    return this;}
46d6f14f6d7a26dfddb9cbd3a69775d661dcfcb123a625d83c2a0cf7a9367673
getUserToolchainsFile
public File getUserToolchainsFile()
{    return userToolchainsFile;}
836c7012f83e5995c955b6d050400c0293dc4a2c3c625ec0c949b444abbdd847
setUserToolchainsFile
public MavenExecutionRequest setUserToolchainsFile(File userToolchainsFile)
{    this.userToolchainsFile = userToolchainsFile;    return this;}
89bda7919010c894d2f3e7637935451f4a7afa3598ecc5db0b54d3e55c38209b
getGlobalToolchainsFile
public File getGlobalToolchainsFile()
{    return globalToolchainsFile;}
508222d536be054b62d43be46e0051e4deb7a2f1318f147ae796023c9e2403e5
setGlobalToolchainsFile
public MavenExecutionRequest setGlobalToolchainsFile(File globalToolchainsFile)
{    this.globalToolchainsFile = globalToolchainsFile;    return this;}
2c1b1bb31cbbd38ccf6721254e40ab94aecc76b21eebeabe85ad8f7ff092d7ed
addRemoteRepository
public MavenExecutionRequest addRemoteRepository(ArtifactRepository repository)
{    for (ArtifactRepository repo : getRemoteRepositories()) {        if (repo.getId() != null && repo.getId().equals(repository.getId())) {            return this;        }    }    getRemoteRepositories().add(repository);    return this;}
4fd44e1a9f23aaf113060017b1d8f6d3cf8794c129edf477e6b2ddacdfe7400d
getRemoteRepositories
public List<ArtifactRepository> getRemoteRepositories()
{    if (remoteRepositories == null) {        remoteRepositories = new ArrayList<>();    }    return remoteRepositories;}
f5b036e7fc2b3a8371b28a4ae1c5db9e2eeacf268466e753bd215c50b4bc6589
addPluginArtifactRepository
public MavenExecutionRequest addPluginArtifactRepository(ArtifactRepository repository)
{    for (ArtifactRepository repo : getPluginArtifactRepositories()) {        if (repo.getId() != null && repo.getId().equals(repository.getId())) {            return this;        }    }    getPluginArtifactRepositories().add(repository);    return this;}
4bbff9c28c6ee421876441e9b41e3c97a01a0508845cc7842befb31d0a30f8e8
getPluginArtifactRepositories
public List<ArtifactRepository> getPluginArtifactRepositories()
{    if (pluginArtifactRepositories == null) {        pluginArtifactRepositories = new ArrayList<>();    }    return pluginArtifactRepositories;}
c1778899792b339102598acfd060fdd0db8e60f8aa016d2d01bb6a92a2e5c656
getProjectBuildingRequest
public ProjectBuildingRequest getProjectBuildingRequest()
{    if (projectBuildingRequest == null) {        projectBuildingRequest = new DefaultProjectBuildingRequest();        projectBuildingRequest.setLocalRepository(getLocalRepository());        projectBuildingRequest.setSystemProperties(getSystemProperties());        projectBuildingRequest.setUserProperties(getUserProperties());        projectBuildingRequest.setRemoteRepositories(getRemoteRepositories());        projectBuildingRequest.setPluginArtifactRepositories(getPluginArtifactRepositories());        projectBuildingRequest.setActiveProfileIds(getActiveProfiles());        projectBuildingRequest.setInactiveProfileIds(getInactiveProfiles());        projectBuildingRequest.setProfiles(getProfiles());        projectBuildingRequest.setProcessPlugins(true);        projectBuildingRequest.setBuildStartTime(getStartTime());    }    return projectBuildingRequest;}
0e1ee1ef5a84d043cff3c2430c26a0da1ad9b1ca3cb6dcce69739ec5db771b31
addProfile
public MavenExecutionRequest addProfile(Profile profile)
{    Objects.requireNonNull(profile, "profile cannot be null");    for (Profile p : getProfiles()) {        if (p.getId() != null && p.getId().equals(profile.getId())) {            return this;        }    }    getProfiles().add(profile);    return this;}
ee949740ecdbfecee8cea2560caaca6e1dc23415e155633e178b3ae89ab6a768
getRepositoryCache
public RepositoryCache getRepositoryCache()
{    return repositoryCache;}
4762afd3b5a84893810d7b0bbc6712ecef305dc6f0b72b091bbd779a83f0f080
setRepositoryCache
public MavenExecutionRequest setRepositoryCache(RepositoryCache repositoryCache)
{    this.repositoryCache = repositoryCache;    return this;}
74e5bac775d983984b75b3327dec0a4b580649b51b569bf1dcceadb5cf4c04bf
getExecutionListener
public ExecutionListener getExecutionListener()
{    return executionListener;}
1f0a9a7053cfa9b62f821fe5c524276048068557a9804f300e9cb2ba7754b7ea
setExecutionListener
public MavenExecutionRequest setExecutionListener(ExecutionListener executionListener)
{    this.executionListener = executionListener;    return this;}
a01a9519f17e8b69753fb3808223be06a59b96e570d74b35f9499e67dc78c582
setDegreeOfConcurrency
public void setDegreeOfConcurrency(final int degreeOfConcurrency)
{    this.degreeOfConcurrency = degreeOfConcurrency;}
e1a52cbbb30bf2560d308b2fa5f62a2bccd928a3440a4ef870345b3718b31cdc
getDegreeOfConcurrency
public int getDegreeOfConcurrency()
{    return degreeOfConcurrency;}
80ed85cb135a728741d6e7ec12d7351c3efcaf6dd29b40307c32f95ca27adb10
getWorkspaceReader
public WorkspaceReader getWorkspaceReader()
{    return workspaceReader;}
7b270443d964f86c89ccb15fc33a1fe2148e36a355c36dd7e8bc34e95443d5db
setWorkspaceReader
public MavenExecutionRequest setWorkspaceReader(WorkspaceReader workspaceReader)
{    this.workspaceReader = workspaceReader;    return this;}
22bbd25dc53fe68dfe848a6485322dac76b2890b2babb8ea8db46516e496b60a
isCacheTransferError
public boolean isCacheTransferError()
{    return cacheTransferError;}
891d8de4b3418d37a309ff92026086ce04a7346fb0586b48f6885de91b231db6
setCacheTransferError
public MavenExecutionRequest setCacheTransferError(boolean cacheTransferError)
{    this.cacheTransferError = cacheTransferError;    return this;}
16c85cf4bc519131f467a9d6de290558412a792be76b0f39bfb5d5a57d48e2e7
isCacheNotFound
public boolean isCacheNotFound()
{    return cacheNotFound;}
107a73bbb436b3353992c77f6267b102f854035a86613b478c30f7dc19255800
setCacheNotFound
public MavenExecutionRequest setCacheNotFound(boolean cacheNotFound)
{    this.cacheNotFound = cacheNotFound;    return this;}
3f781319815840e4b289b17ce72c25d6354d7c8d6e27ffd3642d56bcd93b44d2
isUseLegacyLocalRepository
public boolean isUseLegacyLocalRepository()
{    return this.useLegacyLocalRepositoryManager;}
37694507164edc5475d11296b7d5445519978ec9ff91c3194f102252e0305162
setUseLegacyLocalRepository
public MavenExecutionRequest setUseLegacyLocalRepository(boolean useLegacyLocalRepositoryManager)
{    this.useLegacyLocalRepositoryManager = useLegacyLocalRepositoryManager;    return this;}
5ef55e6a6eebf9d61e461bf172ca2d471e4292ae7651f43228983b6298bb416f
setBuilderId
public MavenExecutionRequest setBuilderId(String builderId)
{    this.builderId = builderId;    return this;}
b57210efcbeafbe6ae7fc97b858c668156ae22f2f85b50338da11e271eefaa0e
getBuilderId
public String getBuilderId()
{    return builderId;}
03c6d1f3c6bf482ab4aa5ec57df9ed8501a3880b59cdfb2648c310a10918d867
getToolchains
public Map<String, List<ToolchainModel>> getToolchains()
{    if (toolchains == null) {        toolchains = new HashMap<>();    }    return toolchains;}
b922e986fd005feb2fb31de9410cf699777df220622e36e9c517e25a07156715
setToolchains
public MavenExecutionRequest setToolchains(Map<String, List<ToolchainModel>> toolchains)
{    this.toolchains = toolchains;    return this;}
c2ffab73014863cddb8189da2f7a2620890ae28946b925f19c5d7a2d40daf843
setMultiModuleProjectDirectory
public void setMultiModuleProjectDirectory(File directory)
{    this.multiModuleProjectDirectory = directory;}
fad67d0f98078ad918245257fd7128cd664ed78d241b5b4df24bad68873f38fc
getMultiModuleProjectDirectory
public File getMultiModuleProjectDirectory()
{    return multiModuleProjectDirectory;}
fc1a693126ee077eb33f17e56f15fc90473e72f086072b17cfb087a771b2a3a3
setEventSpyDispatcher
public MavenExecutionRequest setEventSpyDispatcher(EventSpyDispatcher eventSpyDispatcher)
{    this.eventSpyDispatcher = eventSpyDispatcher;    return this;}
077adf69b652ae36098a73deab453744446c95a8bdc43ec7a4fafd53611d69a4
getEventSpyDispatcher
public EventSpyDispatcher getEventSpyDispatcher()
{    return eventSpyDispatcher;}
5acc1da92c12fc444554e37df661720882bc2e507e63566bbe170e955ba0f8a1
getData
public Map<String, Object> getData()
{    if (data == null) {        data = new HashMap<>();    }    return data;}
b7820465a846d9b1d488ff75f9e365d6aabfaddc9c05556b8c454cacce09c57b
populateFromToolchains
public MavenExecutionRequest populateFromToolchains(MavenExecutionRequest request, PersistedToolchains toolchains) throws MavenExecutionRequestPopulationException
{    if (toolchains != null) {        Map<String, List<ToolchainModel>> groupedToolchains = new HashMap<>(2);        for (ToolchainModel model : toolchains.getToolchains()) {            if (!groupedToolchains.containsKey(model.getType())) {                groupedToolchains.put(model.getType(), new ArrayList<ToolchainModel>());            }            groupedToolchains.get(model.getType()).add(model);        }        request.setToolchains(groupedToolchains);    }    return request;}
ddb185217f44bdfd399ba833f5b64f3d80d2a47914054e2efdd9266036dd30dc
populateDefaults
public MavenExecutionRequest populateDefaults(MavenExecutionRequest request) throws MavenExecutionRequestPopulationException
{    baseDirectory(request);    localRepository(request);    populateDefaultPluginGroups(request);    injectDefaultRepositories(request);    injectDefaultPluginRepositories(request);    return request;}
06fb5dd4623833dc03d8bbc28129cbdb767012e7808267f2ee3880c97bc43b3d
populateDefaultPluginGroups
private void populateDefaultPluginGroups(MavenExecutionRequest request)
{    request.addPluginGroup("org.apache.maven.plugins");    request.addPluginGroup("org.codehaus.mojo");}
e13a69ca8a88dcad54759b3a81eb94702b025b44337a62413753056a6924a9ce
injectDefaultRepositories
private void injectDefaultRepositories(MavenExecutionRequest request) throws MavenExecutionRequestPopulationException
{    Set<String> definedRepositories = repositorySystem.getRepoIds(request.getRemoteRepositories());    if (!definedRepositories.contains(RepositorySystem.DEFAULT_REMOTE_REPO_ID)) {        try {            request.addRemoteRepository(repositorySystem.createDefaultRemoteRepository(request));        } catch (Exception e) {            throw new MavenExecutionRequestPopulationException("Cannot create default remote repository.", e);        }    }}
87d1558bfb3c833e9ee997ce5d27feede92222779e29f8709027320f77bba08a
injectDefaultPluginRepositories
private void injectDefaultPluginRepositories(MavenExecutionRequest request) throws MavenExecutionRequestPopulationException
{    Set<String> definedRepositories = repositorySystem.getRepoIds(request.getPluginArtifactRepositories());    if (!definedRepositories.contains(RepositorySystem.DEFAULT_REMOTE_REPO_ID)) {        try {            request.addPluginArtifactRepository(repositorySystem.createDefaultRemoteRepository(request));        } catch (Exception e) {            throw new MavenExecutionRequestPopulationException("Cannot create default remote repository.", e);        }    }}
a3ca21e4511fbb575ad04d8a04932095772807994dded28d763e6a5d1b3fd3e4
localRepository
private void localRepository(MavenExecutionRequest request) throws MavenExecutionRequestPopulationException
{    if (request.getLocalRepository() == null) {        request.setLocalRepository(createLocalRepository(request));    }    if (request.getLocalRepositoryPath() == null) {        request.setLocalRepositoryPath(new File(request.getLocalRepository().getBasedir()).getAbsoluteFile());    }}
9d267309b03560bba572f73b2f848f0bffe7a0a7661b947b9c945ce7ba4ccd39
createLocalRepository
private ArtifactRepository createLocalRepository(MavenExecutionRequest request) throws MavenExecutionRequestPopulationException
{    String localRepositoryPath = null;    if (request.getLocalRepositoryPath() != null) {        localRepositoryPath = request.getLocalRepositoryPath().getAbsolutePath();    }    if (StringUtils.isEmpty(localRepositoryPath)) {        localRepositoryPath = RepositorySystem.defaultUserLocalRepository.getAbsolutePath();    }    try {        return repositorySystem.createLocalRepository(request, new File(localRepositoryPath));    } catch (Exception e) {        throw new MavenExecutionRequestPopulationException("Cannot create local repository.", e);    }}
ee0f140cefa573d780157338f9461668da98618e187205732e51bdbd5bb64a28
baseDirectory
private void baseDirectory(MavenExecutionRequest request)
{    if (request.getBaseDirectory() == null && request.getPom() != null) {        request.setBaseDirectory(request.getPom().getAbsoluteFile().getParentFile());    }}
7b798c2f4899a9216adedee38315af37a669ea4cdd11b32a989fee237439cf68
populateFromSettings
public MavenExecutionRequest populateFromSettings(MavenExecutionRequest request, Settings settings) throws MavenExecutionRequestPopulationException
{    if (settings == null) {        return request;    }    request.setOffline(settings.isOffline());    request.setInteractiveMode(settings.isInteractiveMode());    request.setPluginGroups(settings.getPluginGroups());    request.setLocalRepositoryPath(settings.getLocalRepository());    for (Server server : settings.getServers()) {        server = server.clone();        request.addServer(server);    }    for (Proxy proxy : settings.getProxies()) {        if (!proxy.isActive()) {            continue;        }        proxy = proxy.clone();        request.addProxy(proxy);    }    for (Mirror mirror : settings.getMirrors()) {        mirror = mirror.clone();        request.addMirror(mirror);    }    request.setActiveProfiles(settings.getActiveProfiles());    for (org.apache.maven.settings.Profile rawProfile : settings.getProfiles()) {        request.addProfile(SettingsUtils.convertFromSettingsProfile(rawProfile));        if (settings.getActiveProfiles().contains(rawProfile.getId())) {            List<Repository> remoteRepositories = rawProfile.getRepositories();            for (Repository remoteRepository : remoteRepositories) {                try {                    request.addRemoteRepository(repositorySystem.buildArtifactRepository(remoteRepository));                } catch (InvalidRepositoryException e) {                                }            }            List<Repository> pluginRepositories = rawProfile.getPluginRepositories();            for (Repository pluginRepo : pluginRepositories) {                try {                    request.addPluginArtifactRepository(repositorySystem.buildArtifactRepository(pluginRepo));                } catch (InvalidRepositoryException e) {                                }            }        }    }    return request;}
571351cf9f70a41a6ecc81ce8e3ef8fe634ba45330874ac9798640ffef49b059
setProject
public MavenExecutionResult setProject(MavenProject project)
{    this.project = project;    return this;}
cdcc47ed1eccb5aa7ba2aa1d33b327142be7cbcc16c1cff19fde28a6b8e02541
getProject
public MavenProject getProject()
{    return project;}
a77a06b83c2e3a4fbe56ffa62160f8a7c967afa954dc7d926b15aaf9250f0431
setTopologicallySortedProjects
public MavenExecutionResult setTopologicallySortedProjects(List<MavenProject> topologicallySortedProjects)
{    this.topologicallySortedProjects = topologicallySortedProjects;    return this;}
f2f50878e128b5ed352201cd6e756493e5e17ae6aaa74f7de26ed0ae3609a05a
getTopologicallySortedProjects
public List<MavenProject> getTopologicallySortedProjects()
{    return null == topologicallySortedProjects ? Collections.<MavenProject>emptyList() : Collections.unmodifiableList(topologicallySortedProjects);}
e5639df4dc89ac40df97f0c2755323d9d444d11e457f73243ccc4b14e9b8d01e
getDependencyResolutionResult
public DependencyResolutionResult getDependencyResolutionResult()
{    return dependencyResolutionResult;}
0e4120b5be7e9e1d8cc89fcbd32c0d1eedd0b9a3058f04b16fc6fcd69a4b73ee
setDependencyResolutionResult
public MavenExecutionResult setDependencyResolutionResult(DependencyResolutionResult dependencyResolutionResult)
{    this.dependencyResolutionResult = dependencyResolutionResult;    return this;}
f5cba5a8ce4745288e706f9191bd1bb07cc04c16033e1aeb4434aa8f7448e391
getExceptions
public List<Throwable> getExceptions()
{    return exceptions;}
ec84f83fbc09bae7eb5ae4d59edc12d03ec3cceadf228b911990943eac5230c0
addException
public MavenExecutionResult addException(Throwable t)
{    exceptions.add(t);    return this;}
a1a7f8f9ee39d88cbb24fed8790d6985de9b95699c4a9dffd2608570a001490a
hasExceptions
public boolean hasExceptions()
{    return !getExceptions().isEmpty();}
bcfcc301651d0a1fc719ad7b8a3abf5547861948d0ace3553e0939117c80c12b
getBuildSummary
public BuildSummary getBuildSummary(MavenProject project)
{    return buildSummaries.get(project);}
83ca7eef61205ee507d381231bdaf36a83a891267b105a31902032e4652accfb
addBuildSummary
public void addBuildSummary(BuildSummary summary)
{    buildSummaries.put(summary.getProject(), summary);}
9594c4386bbf185d72f6c57ea838112bb7c0f31b4c5786febee47ce107f05563
setProjects
public void setProjects(List<MavenProject> projects)
{    if (!projects.isEmpty()) {        this.currentProject = projects.get(0);        this.topLevelProject = currentProject;        for (MavenProject project : projects) {            if (project.isExecutionRoot()) {                topLevelProject = project;                break;            }        }    } else {        this.currentProject = null;        this.topLevelProject = null;    }    this.projects = projects;}
64dc696be33c6c348d62217243ad7506283ed2be89f1b5410c8acb51390d930b
getLocalRepository
public ArtifactRepository getLocalRepository()
{    return request.getLocalRepository();}
1e99acd0defcbcc8261233107f4e9f5ce41831ed002a91888e858ecfc9460e34
getGoals
public List<String> getGoals()
{    return request.getGoals();}
378f8d6e21d4ae0bd6aa85de0988ab8d214704648e0ad1a17b8ce9c7e3a14225
getUserProperties
public Properties getUserProperties()
{    return request.getUserProperties();}
8b369022cea09c7bb7272e8cc545450dc294bedf652bae5b2ea9f14fffe1fc46
getSystemProperties
public Properties getSystemProperties()
{    return request.getSystemProperties();}
9346d0583c28241e8c951daffe081c3ad700a7330aa28467fdfceb9a4bf0fbce
getSettings
public Settings getSettings()
{    return settings;}
ab48d2b8540ce3040a1f3c99368c81872aa3166eaa6855af8f020c1a0b2a6b65
getProjects
public List<MavenProject> getProjects()
{    return projects;}
42f9e725ff5c3f76fb006c8466b467fec65f21c57b6c846cf48374e2fc97f0c2
getExecutionRootDirectory
public String getExecutionRootDirectory()
{    return request.getBaseDirectory();}
7c318a75c10bdf7ccc70b9c78c342fb8899fb88315cdf5124a31b22ff1c07598
getRequest
public MavenExecutionRequest getRequest()
{    return request;}
394e77ba6cd25150c80eb885859f3b44a88ab00b4e7b9e6c4804608a12305d71
setCurrentProject
public void setCurrentProject(MavenProject currentProject)
{    this.currentProject = currentProject;}
08edb360203b8ae1d0edce9e6caf6bb62a6f69d541818e1f4889e8fe574ff864
getCurrentProject
public MavenProject getCurrentProject()
{    return currentProject;}
c1778899792b339102598acfd060fdd0db8e60f8aa016d2d01bb6a92a2e5c656
getProjectBuildingRequest
public ProjectBuildingRequest getProjectBuildingRequest()
{    return request.getProjectBuildingRequest().setRepositorySession(getRepositorySession());}
0288785a6c36414b98eec6c764e4ad51a1c637ff9dbf3f3324b9f18d982c807e
getPluginGroups
public List<String> getPluginGroups()
{    return request.getPluginGroups();}
9d7e8383b61b322508efc2a10595b57ab46f671235178f463907d85cad8d79c1
isOffline
public boolean isOffline()
{    return request.isOffline();}
fe82cb814b033c6e8913b408e6824a13b81bc0cf5afdf1de0c77e031f361c708
getTopLevelProject
public MavenProject getTopLevelProject()
{    return topLevelProject;}
caef4572e073f435feb309a17b00f8c84b08ee55bc121c2d973817f3a9255070
getResult
public MavenExecutionResult getResult()
{    return result;}
06c6a0278d607a515ad1024b10e7717eafef63183d632c3920d631d1f6d88e7b
getPluginContext
public Map<String, Object> getPluginContext(PluginDescriptor plugin, MavenProject project)
{    String projectKey = project.getId();    Map<String, Map<String, Object>> pluginContextsByKey = pluginContextsByProjectAndPluginKey.get(projectKey);    if (pluginContextsByKey == null) {        pluginContextsByKey = new ConcurrentHashMap<>();        pluginContextsByProjectAndPluginKey.put(projectKey, pluginContextsByKey);    }    String pluginKey = plugin.getPluginLookupKey();    Map<String, Object> pluginContext = pluginContextsByKey.get(pluginKey);    if (pluginContext == null) {        pluginContext = new ConcurrentHashMap<>();        pluginContextsByKey.put(pluginKey, pluginContext);    }    return pluginContext;}
c3e32200ecfbee09ac88ce4d460485a2a9b885497e47b0fa5918685449a8a03e
getProjectDependencyGraph
public ProjectDependencyGraph getProjectDependencyGraph()
{    return projectDependencyGraph;}
a44a5734aff50f03d78e8492a74d0443d9294e7536f19b58617dded6e75c6da4
setProjectDependencyGraph
public void setProjectDependencyGraph(ProjectDependencyGraph projectDependencyGraph)
{    this.projectDependencyGraph = projectDependencyGraph;}
f64e269f05b984cd2479fdf46401e6770238ef8a3e467259ca6e3c6f623502c4
getReactorFailureBehavior
public String getReactorFailureBehavior()
{    return request.getReactorFailureBehavior();}
ef2c4577ceb8aecf70efda7ddf369c675b264a80072f7f0138e2d600922f4b94
clone
public MavenSession clone()
{    try {        return (MavenSession) super.clone();    } catch (CloneNotSupportedException e) {        throw new RuntimeException("Bug", e);    }}
fc7efdc8a23de017fc917165b9ae032ee66d4e4833599682304d07bd8185ab2c
getStartTime
public Date getStartTime()
{    return request.getStartTime();}
3766d929d74276f000ac298ec5ce051f7fe8309a99f5341fd73a65045054e8cd
isParallel
public boolean isParallel()
{    return parallel;}
4e377e03aa28746df701922e2f125e2de3942b37833242a5c072cba628367804
setParallel
public void setParallel(boolean parallel)
{    this.parallel = parallel;}
249c16421d8af9b25ee93ecd862c341aa3afc8023f876e65004c3f450248c6a6
getRepositorySession
public RepositorySystemSession getRepositorySession()
{    return repositorySession;}
9e9382847d3245377ea9e6a8b10af9840a28c68c9628ab49560dc8ef60a304c8
setProjectMap
public void setProjectMap(Map<String, MavenProject> projectMap)
{    this.projectMap = projectMap;}
9e7741414e346a2cf4af4830382cffb79f0ed8ac03e56602c02911d208de5fd7
getAllProjects
public List<MavenProject> getAllProjects()
{    return allProjects;}
edde840353c5b63b39733f8b86d10ab60f015dc45ad04af41969e562e948cdec
setAllProjects
public void setAllProjects(List<MavenProject> allProjects)
{    this.allProjects = allProjects;}
f4232367e9d1eef3457baa89b9ea7d3961422278637cfd8c9391ebb1ab06ce8f
getProjectMap
public Map<String, MavenProject> getProjectMap()
{    return projectMap;}
a741787f77d01caf822782e4c4aea27986cab8e6d656656dab23943bae6d8c3a
getSortedProjects
public List<MavenProject> getSortedProjects()
{    return getProjects();}
ee949740ecdbfecee8cea2560caaca6e1dc23415e155633e178b3ae89ab6a768
getRepositoryCache
public RepositoryCache getRepositoryCache()
{    return null;}
8b16596a07c5f67a130033dadb64a667d68c578c566ad47eaa8ba4ea89081123
getEventDispatcher
public EventDispatcher getEventDispatcher()
{    return null;}
9fec7f6e5b8767b7d72108e8dd03957a08489f5f2e448c272dce05fd3f6f6015
isUsingPOMsFromFilesystem
public boolean isUsingPOMsFromFilesystem()
{    return request.isProjectPresent();}
d80181f3670be58d6ee5836bcabf9e55d9c444a633768c1b02287c2bb330bd4a
getExecutionProperties
public Properties getExecutionProperties()
{    if (executionProperties == null) {        executionProperties = new Properties();        executionProperties.putAll(request.getSystemProperties());        executionProperties.putAll(request.getUserProperties());    }    return executionProperties;}
4c21cf8fd70af02e3e481d4ad162546e70cefa0dad715532233a81bd91bbe553
getContainer
public PlexusContainer getContainer()
{    return container;}
16412b1ab18869a81030a7b9ad7fc28e42cdc414cb50a814574af8298bab3154
lookup
public Object lookup(String role) throws ComponentLookupException
{    return container.lookup(role);}
2fdbaddfa4ec09432b510af1cf91475f08fb25337eb4bde4fbdc5b03540729d1
lookup
public Object lookup(String role, String roleHint) throws ComponentLookupException
{    return container.lookup(role, roleHint);}
22a420a506e1019505f9f0030d7a0512d7ec2ddec8c12b73975fc726b7c269f6
lookupList
public List<Object> lookupList(String role) throws ComponentLookupException
{    return container.lookupList(role);}
ee05ce3139891c59da69a70057ef697b8aeae9d90090cf6d923aafba8f25adac
lookupMap
public Map<String, Object> lookupMap(String role) throws ComponentLookupException
{    return container.lookupMap(role);}
5f9beff804d491307ef6fcfa2f8b51cce53a3674d5c1d3d683eb56a19c4083d7
getSession
public MavenSession getSession()
{    return session;}
cdcc47ed1eccb5aa7ba2aa1d33b327142be7cbcc16c1cff19fde28a6b8e02541
getProject
public MavenProject getProject()
{    return project;}
bc7c9ace630ada6e4b7a3cdb462dffc49d3f45fa89bded5032d315bad0db16ce
getExecution
public MojoExecution getExecution()
{    return mojoExecution;}
e28292357195470dff1cd1a86649ad239cc0631734d017f0bfe5800c6689ed83
getMojo
public Mojo getMojo()
{    return mojo;}
3e7d70044d393c21fe2b8a32bb324941f159bc4a69cb81127e56e927719c28fd
getCause
public Throwable getCause()
{    return cause;}
5f9beff804d491307ef6fcfa2f8b51cce53a3674d5c1d3d683eb56a19c4083d7
getSession
public MavenSession getSession()
{    return session;}
cdcc47ed1eccb5aa7ba2aa1d33b327142be7cbcc16c1cff19fde28a6b8e02541
getProject
public MavenProject getProject()
{    return project;}
2ede4b6900f88fd31519dafb9a2dcd3cd367b2949d84c986ad5f9905fa4d755c
getExecutionPlan
public List<MojoExecution> getExecutionPlan()
{    return executionPlan;}
3e7d70044d393c21fe2b8a32bb324941f159bc4a69cb81127e56e927719c28fd
getCause
public Throwable getCause()
{    return cause;}
f3a554a90e87cbaff00d3a55c042803b35d4f6c207e10cba0e1632556b5d45de
getPluginContext
public Map getPluginContext(PluginDescriptor plugin, MavenProject project)
{    Map<String, Map> pluginContextsByKey = pluginContextsByProjectAndPluginKey.get(project.getId());    if (pluginContextsByKey == null) {        pluginContextsByKey = new HashMap<>();        pluginContextsByProjectAndPluginKey.put(project.getId(), pluginContextsByKey);    }    Map pluginContext = pluginContextsByKey.get(plugin.getPluginLookupKey());    if (pluginContext == null) {        pluginContext = new HashMap<>();        pluginContextsByKey.put(plugin.getPluginLookupKey(), pluginContext);    }    return pluginContext;}
ea3cd2ab09cfcad1debdb87e911e315039d0d3e569f5dfa923e173713b2d0d7a
setFailureBehavior
public void setFailureBehavior(String failureBehavior)
{    if (failureBehavior == null) {                this.failureBehavior = FAIL_FAST;        return;    }    if (FAIL_FAST.equals(failureBehavior) || FAIL_AT_END.equals(failureBehavior) || FAIL_NEVER.equals(failureBehavior)) {        this.failureBehavior = failureBehavior;    } else {        throw new IllegalArgumentException("Invalid failure behavior (must be one of: \'" + FAIL_FAST + "\', \'" + FAIL_AT_END + "\', \'" + FAIL_NEVER + "\').");    }}
b57a6fbdeaf9d394e49b66605c44ba02d446ab1444a3dc007c7c19d92b194de9
getFailureBehavior
public String getFailureBehavior()
{    return failureBehavior;}
e7ac19ff71a0b7f1e89eb24436acf44237aaef0b608287c30297c26a102dbed2
blackList
public void blackList(MavenProject project)
{    blackList(getProjectKey(project));}
cc8f2d9192402ce53cc13d0619534e0c77e9cb0612d9677a10483a8dcf37552f
blackList
private void blackList(String id)
{    if (!blackList.contains(id)) {        blackList.add(id);        List<String> dependents = sorter.getDependents(id);        if (dependents != null && !dependents.isEmpty()) {            for (String dependentId : dependents) {                if (!buildSuccessesByProject.containsKey(dependentId) && !buildFailuresByProject.containsKey(dependentId)) {                    blackList(dependentId);                }            }        }    }}
72db8af6f194fca1374de66311959e540d3f86b5d7fc6e4658d8afc1dc4230e1
isBlackListed
public boolean isBlackListed(MavenProject project)
{    return blackList.contains(getProjectKey(project));}
c68e8e2500e94dcb6b1be144b5f406863a9c610bc9a47bc51a210e4b27319359
getProjectKey
private static String getProjectKey(MavenProject project)
{    return ArtifactUtils.versionlessKey(project.getGroupId(), project.getArtifactId());}
1330057f3f68620711bb1f758df1f480e5aeb200d8b24598e3b99334d7f44ecc
registerBuildFailure
public void registerBuildFailure(MavenProject project, Exception error, String task, long time)
{    buildFailuresByProject.put(getProjectKey(project), new BuildFailure(project, time, error));}
ed9d1299a0ee92e27ea46ce93d8c11eb5e645b7311b4a01cf078f83a74e95e12
hasBuildFailures
public boolean hasBuildFailures()
{    return !buildFailuresByProject.isEmpty();}
84eaef46f749f236a51499ce02b4921427e08c4335d7b69e6551f8f9dd049e88
hasBuildFailure
public boolean hasBuildFailure(MavenProject project)
{    return buildFailuresByProject.containsKey(getProjectKey(project));}
8abbd68cfb2889e710cd5fe49e9b4bee91a47392e8ddee67125706ecb7784080
hasMultipleProjects
public boolean hasMultipleProjects()
{    return sorter.hasMultipleProjects();}
a741787f77d01caf822782e4c4aea27986cab8e6d656656dab23943bae6d8c3a
getSortedProjects
public List<MavenProject> getSortedProjects()
{    return sorter.getSortedProjects();}
6d0f31af79cd5847253d81689f9b64631673fc36953caadf1db61b68f7939040
hasBuildSuccess
public boolean hasBuildSuccess(MavenProject project)
{    return buildSuccessesByProject.containsKey(getProjectKey(project));}
881e9e0f77188bfe434f8761d492b0d678a470934d88c012870b81b59a25d3c2
registerBuildSuccess
public void registerBuildSuccess(MavenProject project, long time)
{    buildSuccessesByProject.put(getProjectKey(project), new BuildSuccess(project, time));}
0447f45d464394fafa629ac2c65288b9591f8a6bed96117d78d011a06e46c248
getBuildFailure
public BuildFailure getBuildFailure(MavenProject project)
{    return buildFailuresByProject.get(getProjectKey(project));}
5d4d1d09a1572abd19835397ff3d8029d006112b57b436eac9280821362b5e80
getBuildSuccess
public BuildSuccess getBuildSuccess(MavenProject project)
{    return buildSuccessesByProject.get(getProjectKey(project));}
fe93e21bdd1a8c866217f2bf0cb0a9b4269fbd95cb98e7e765f4507a4def00ce
executedMultipleProjects
public boolean executedMultipleProjects()
{    return buildFailuresByProject.size() + buildSuccessesByProject.size() > 1;}
7879542e1c9692937bb06c057e45be2786184b48bff93d8e155d0e61dbdf105b
get
public Object get()
{    throw new IllegalStateException();}
9b1bf66852d5a16d13abe703e4706630d2e3019328e4c2064cdf2a117e1245fe
enter
public void enter()
{    LinkedList<ScopeState> stack = values.get();    if (stack == null) {        stack = new LinkedList<>();        values.set(stack);    }    stack.addFirst(new ScopeState());}
32bbc96e33a82faace60b56aca4b4504ac3a1107f91afd4f1825e139db009fb3
getScopeState
private ScopeState getScopeState()
{    LinkedList<ScopeState> stack = values.get();    if (stack == null || stack.isEmpty()) {        throw new IllegalStateException();    }    return stack.getFirst();}
e54f828416911ed19ddf98b318401a69771f4919123c50cd792ec9302929a810
exit
public void exit() throws MojoExecutionException
{    final LinkedList<ScopeState> stack = values.get();    if (stack == null || stack.isEmpty()) {        throw new IllegalStateException();    }    stack.removeFirst();    if (stack.isEmpty()) {        values.remove();    }}
c4e8c555668189b6fc1f4125da2ea654159c3d1b75b4e8ca94f486112ba391a2
seed
public void seed(Class<T> clazz, Provider<T> value)
{    getScopeState().seeded.put(Key.get(clazz), value);}
905fa83f5e0f9edf6aec407b5c3c7a04305845ee21425eeaed15152fd7980462
seed
public void seed(Class<T> clazz, final T value)
{    getScopeState().seeded.put(Key.get(clazz), Providers.of(value));}
0e39159daf4961a2ac28cd814c8475a699586ead2acc17f730f8671bf507a801
scope
public Provider<T> scope(final Key<T> key, final Provider<T> unscoped)
{    return new Provider<T>() {        @SuppressWarnings("unchecked")        public T get() {            LinkedList<ScopeState> stack = values.get();            if (stack == null || stack.isEmpty()) {                throw new OutOfScopeException("Cannot access " + key + " outside of a scoping block");            }            ScopeState state = stack.getFirst();            Provider<?> seeded = state.seeded.get(key);            if (seeded != null) {                return (T) seeded.get();            }            T provided = (T) state.provided.get(key);            if (provided == null && unscoped != null) {                provided = unscoped.get();                state.provided.put(key, provided);            }            return provided;        }    };}
f92b71e18fa63d96cf2b628ad8520702b897423512edea5de9dd0e96f471f5ff
get
public T get()
{    LinkedList<ScopeState> stack = values.get();    if (stack == null || stack.isEmpty()) {        throw new OutOfScopeException("Cannot access " + key + " outside of a scoping block");    }    ScopeState state = stack.getFirst();    Provider<?> seeded = state.seeded.get(key);    if (seeded != null) {        return (T) seeded.get();    }    T provided = (T) state.provided.get(key);    if (provided == null && unscoped != null) {        provided = unscoped.get();        state.provided.put(key, provided);    }    return provided;}
34c3c9f4b762eafc49d8827f453f2937425bd04a33bd9ca982bfe88cc8002088
seededKeyProvider
public static Provider<T> seededKeyProvider()
{    return (Provider<T>) SEEDED_KEY_PROVIDER;}
1d6e13f31541661fe5145780de30d54a71cb871a2779410243b78fff5482ba95
beforeMojoExecution
public void beforeMojoExecution(MojoExecutionEvent event) throws MojoExecutionException
{    for (WeakMojoExecutionListener provided : getProvidedListeners()) {        provided.beforeMojoExecution(event);    }}
c540c18000ae2dd7a797635f058a6aefc5bf7d27fde2f8cec0e6b58ab7af62f3
afterMojoExecutionSuccess
public void afterMojoExecutionSuccess(MojoExecutionEvent event) throws MojoExecutionException
{    for (WeakMojoExecutionListener provided : getProvidedListeners()) {        provided.afterMojoExecutionSuccess(event);    }}
a1ffbcc3ebfda4ce7f644850464e6aaf0a9cc0e544556c4d3ca31130ded7d890
afterExecutionFailure
public void afterExecutionFailure(MojoExecutionEvent event)
{    for (WeakMojoExecutionListener provided : getProvidedListeners()) {        provided.afterExecutionFailure(event);    }}
7991380c087a798b53c3a866efd0e2d2bf2542235e86ae640cb68bf68d85b850
getProvidedListeners
private Collection<WeakMojoExecutionListener> getProvidedListeners()
{            IdentityHashMap<WeakMojoExecutionListener, Object> listeners = new IdentityHashMap<>();    for (Object provided : getScopeState().provided.values()) {        if (provided instanceof WeakMojoExecutionListener) {            listeners.put((WeakMojoExecutionListener) provided, null);        }    }    return listeners.keySet();}
e3f3888bce5cf21b1820845ce277d3e72af79375bd35bb93929649159ac47dbe
configure
protected void configure()
{    super.configure();    bind(MojoExecutionListener.class).toInstance(scope);}
e3f3888bce5cf21b1820845ce277d3e72af79375bd35bb93929649159ac47dbe
configure
protected void configure()
{    bindScope(MojoExecutionScoped.class, scope);    bind(MojoExecutionScope.class).toInstance(scope);    bind(MavenProject.class).toProvider(MojoExecutionScope.<MavenProject>seededKeyProvider()).in(scope);    bind(MojoExecution.class).toProvider(MojoExecutionScope.<MojoExecution>seededKeyProvider()).in(scope);}
d10761dae72527364b2670e69041e375e10dc1f826e928d78da4e03ae9a54c85
getLocalRepository
public String getLocalRepository()
{    if (request.getLocalRepositoryPath() != null) {        return request.getLocalRepositoryPath().getAbsolutePath();    }    return null;}
295fe44b490a90626c65066257d0e00760c32b01f76e5d0fc4073c1de65feb55
isInteractiveMode
public boolean isInteractiveMode()
{    return request.isInteractiveMode();}
9d7e8383b61b322508efc2a10595b57ab46f671235178f463907d85cad8d79c1
isOffline
public boolean isOffline()
{    return request.isOffline();}
1dddedf2228f7f14ce20545b861fc996084e9df55600dfe14616dd12019e32fc
getProxies
public List<Proxy> getProxies()
{    return request.getProxies();}
a50ce03fbdd41821e15d3724fddb0b75023a1201ba0f6a90b301b8541e5eec6c
getServers
public List<Server> getServers()
{    return request.getServers();}
69f4b60c578031d60780c45aa7e594dc69d72de0f04d05943fee5f7396090aff
getMirrors
public List<Mirror> getMirrors()
{    return request.getMirrors();}
07f936934d46b8317f059da2ec27eb16b676abfedf6a187723d3defbd4f5707f
getProfiles
public List<Profile> getProfiles()
{    List<Profile> result = new ArrayList<>();    for (org.apache.maven.model.Profile profile : request.getProfiles()) {        result.add(SettingsUtils.convertToSettingsProfile(profile));    }    return result;}
a6397ef5424e7e5562d887c38a3226cfed8d19bd224b27e54d80beadf97aef1b
getActiveProfiles
public List<String> getActiveProfiles()
{    return request.getActiveProfiles();}
0288785a6c36414b98eec6c764e4ad51a1c637ff9dbf3f3324b9f18d982c807e
getPluginGroups
public List<String> getPluginGroups()
{    return request.getPluginGroups();}
87e0651410e9764da32e7f205c4697ab0d8f3ae69254f1220f9c067ff449b70d
getExportedArtifacts
public Set<String> getExportedArtifacts()
{    return artifacts;}
d8054e104a8e30f8f6c2f85bee70029a20ede86954e4fdedf3b3cd655314ce1a
getExportedPackages
public Map<String, ClassLoader> getExportedPackages()
{    return packages;}
5e0c2024d2363000c69f74a69804ab6c8e8acb0020eb7f214492d2708213c05f
get
public CoreExports get()
{    return exports;}
41b95a701d5ea67ed5412b37319f1271a238f18a1d7643168356b36e4e17b887
getClassRealm
public ClassRealm getClassRealm()
{    return realm;}
87e0651410e9764da32e7f205c4697ab0d8f3ae69254f1220f9c067ff449b70d
getExportedArtifacts
public Set<String> getExportedArtifacts()
{    return artifacts;}
1fac4bc714a21f088d68628f6a81803a84b8036a5594454b59b1b05044e576c3
getExportedPackages
public Set<String> getExportedPackages()
{    return packages;}
17ed909e6f7f89671f50f5b9bf284bcc57cb484ee1cacc2efe0971f73c4791c4
discoverFrom
public static CoreExtensionEntry discoverFrom(ClassRealm loader)
{    Set<String> artifacts = new LinkedHashSet<>();    Set<String> packages = new LinkedHashSet<>();    try {        Enumeration<URL> urls = loader.getResources(BUILDER.getExtensionDescriptorLocation());        while (urls.hasMoreElements()) {            try (InputStream is = urls.nextElement().openStream()) {                ExtensionDescriptor descriptor = BUILDER.build(is);                artifacts.addAll(descriptor.getExportedArtifacts());                packages.addAll(descriptor.getExportedPackages());            }        }    } catch (IOException ignored) {        }    return new CoreExtensionEntry(loader, artifacts, packages);}
79c3c269147d1bb6f07210e75185d51739e1c4a236ffa56f729815889ca99ed9
discoverFrom
public static CoreExtensionEntry discoverFrom(ClassRealm loader, Collection<File> classpath)
{    Set<String> artifacts = new LinkedHashSet<>();    Set<String> packages = new LinkedHashSet<>();    try {        for (File entry : classpath) {            ExtensionDescriptor descriptor = BUILDER.build(entry);            if (descriptor != null) {                artifacts.addAll(descriptor.getExportedArtifacts());                packages.addAll(descriptor.getExportedPackages());            }        }    } catch (IOException ignored) {        }    return new CoreExtensionEntry(loader, artifacts, packages);}
7e83a1bf70d59e534b8fd9b36561096994a3b985a6273e56d253f299357f3296
build
public Result<ProjectDependencyGraph> build(MavenSession session)
{    try {        Result<ProjectDependencyGraph> result = sessionDependencyGraph(session);        if (result == null) {            final List<MavenProject> projects = getProjectsForMavenReactor(session);            validateProjects(projects);            result = reactorDependencyGraph(session, projects);        }        return result;    } catch (final ProjectBuildingException | DuplicateProjectException | MavenExecutionException e) {        return Result.error(Collections.singletonList(new DefaultModelProblem(null, null, null, null, 0, 0, e)));    } catch (final CycleDetectedException e) {        String message = "The projects in the reactor contain a cyclic reference: " + e.getMessage();        ProjectCycleException error = new ProjectCycleException(message, e);        return Result.error(Collections.singletonList(new DefaultModelProblem(null, null, null, null, 0, 0, error)));    }}
f7475351892e429ce94229047cfa0947f62982e348201d0524642f28172aec53
sessionDependencyGraph
private Result<ProjectDependencyGraph> sessionDependencyGraph(final MavenSession session) throws CycleDetectedException, DuplicateProjectException
{    Result<ProjectDependencyGraph> result = null;    if (session.getProjectDependencyGraph() != null || session.getProjects() != null) {        final ProjectDependencyGraph graph = new DefaultProjectDependencyGraph(session.getAllProjects(), session.getProjects());        result = Result.success(graph);    }    return result;}
8416b016ef97cac88855b50765e2714a6ea6de7cc02aa6535818a5bf21a91d2a
reactorDependencyGraph
private Result<ProjectDependencyGraph> reactorDependencyGraph(MavenSession session, List<MavenProject> projects) throws CycleDetectedException, DuplicateProjectException, MavenExecutionException
{    ProjectDependencyGraph projectDependencyGraph = new DefaultProjectDependencyGraph(projects);    List<MavenProject> activeProjects = projectDependencyGraph.getSortedProjects();    activeProjects = trimSelectedProjects(activeProjects, projectDependencyGraph, session.getRequest());    activeProjects = trimExcludedProjects(activeProjects, session.getRequest());    activeProjects = trimResumedProjects(activeProjects, session.getRequest());    if (activeProjects.size() != projectDependencyGraph.getSortedProjects().size()) {        projectDependencyGraph = new FilteredProjectDependencyGraph(projectDependencyGraph, activeProjects);    }    return Result.success(projectDependencyGraph);}
3d865800dcdd42a31b07b7890366a71e41af9beeb6de9a8a13df5bcdce95cc19
trimSelectedProjects
private List<MavenProject> trimSelectedProjects(List<MavenProject> projects, ProjectDependencyGraph graph, MavenExecutionRequest request) throws MavenExecutionException
{    List<MavenProject> result = projects;    if (!request.getSelectedProjects().isEmpty()) {        File reactorDirectory = null;        if (request.getBaseDirectory() != null) {            reactorDirectory = new File(request.getBaseDirectory());        }        Collection<MavenProject> selectedProjects = new LinkedHashSet<>(projects.size());        for (String selector : request.getSelectedProjects()) {            MavenProject selectedProject = null;            for (MavenProject project : projects) {                if (isMatchingProject(project, selector, reactorDirectory)) {                    selectedProject = project;                    break;                }            }            if (selectedProject != null) {                selectedProjects.add(selectedProject);            } else {                throw new MavenExecutionException("Could not find the selected project in the reactor: " + selector, request.getPom());            }        }        boolean makeUpstream = false;        boolean makeDownstream = false;        if (MavenExecutionRequest.REACTOR_MAKE_UPSTREAM.equals(request.getMakeBehavior())) {            makeUpstream = true;        } else if (MavenExecutionRequest.REACTOR_MAKE_DOWNSTREAM.equals(request.getMakeBehavior())) {            makeDownstream = true;        } else if (MavenExecutionRequest.REACTOR_MAKE_BOTH.equals(request.getMakeBehavior())) {            makeUpstream = true;            makeDownstream = true;        } else if (StringUtils.isNotEmpty(request.getMakeBehavior())) {            throw new MavenExecutionException("Invalid reactor make behavior: " + request.getMakeBehavior(), request.getPom());        }        if (makeUpstream || makeDownstream) {            for (MavenProject selectedProject : new ArrayList<>(selectedProjects)) {                if (makeUpstream) {                    selectedProjects.addAll(graph.getUpstreamProjects(selectedProject, true));                }                if (makeDownstream) {                    selectedProjects.addAll(graph.getDownstreamProjects(selectedProject, true));                }            }        }        result = new ArrayList<>(selectedProjects.size());        for (MavenProject project : projects) {            if (selectedProjects.contains(project)) {                result.add(project);            }        }    }    return result;}
910e60843a431abebca528b14f3d05a772ff0e1d20d8266dc58ef9e8a2b39325
trimExcludedProjects
private List<MavenProject> trimExcludedProjects(List<MavenProject> projects, MavenExecutionRequest request) throws MavenExecutionException
{    List<MavenProject> result = projects;    if (!request.getExcludedProjects().isEmpty()) {        File reactorDirectory = null;        if (request.getBaseDirectory() != null) {            reactorDirectory = new File(request.getBaseDirectory());        }        Collection<MavenProject> excludedProjects = new LinkedHashSet<>(projects.size());        for (String selector : request.getExcludedProjects()) {            MavenProject excludedProject = null;            for (MavenProject project : projects) {                if (isMatchingProject(project, selector, reactorDirectory)) {                    excludedProject = project;                    break;                }            }            if (excludedProject != null) {                excludedProjects.add(excludedProject);            } else {                throw new MavenExecutionException("Could not find the selected project in the reactor: " + selector, request.getPom());            }        }        result = new ArrayList<>(projects.size());        for (MavenProject project : projects) {            if (!excludedProjects.contains(project)) {                result.add(project);            }        }    }    return result;}
e258860970d566167539de81b24b3f4be2e442eb2c809c102182202648c43994
trimResumedProjects
private List<MavenProject> trimResumedProjects(List<MavenProject> projects, MavenExecutionRequest request) throws MavenExecutionException
{    List<MavenProject> result = projects;    if (StringUtils.isNotEmpty(request.getResumeFrom())) {        File reactorDirectory = null;        if (request.getBaseDirectory() != null) {            reactorDirectory = new File(request.getBaseDirectory());        }        String selector = request.getResumeFrom();        result = new ArrayList<>(projects.size());        boolean resumed = false;        for (MavenProject project : projects) {            if (!resumed && isMatchingProject(project, selector, reactorDirectory)) {                resumed = true;            }            if (resumed) {                result.add(project);            }        }        if (!resumed) {            throw new MavenExecutionException("Could not find project to resume reactor build from: " + selector + " vs " + formatProjects(projects), request.getPom());        }    }    return result;}
7be5ce5f800c271368900a513f846073eaff17d780c8c1c995f495b7b51323e8
formatProjects
private String formatProjects(List<MavenProject> projects)
{    StringBuilder projectNames = new StringBuilder();    Iterator<MavenProject> iterator = projects.iterator();    while (iterator.hasNext()) {        MavenProject project = iterator.next();        projectNames.append(project.getGroupId()).append(":").append(project.getArtifactId());        if (iterator.hasNext()) {            projectNames.append(", ");        }    }    return projectNames.toString();}
d1573125729668a73b11c78757337d243d9cc3e90676edd71ca07bc23d67f6ac
isMatchingProject
private boolean isMatchingProject(MavenProject project, String selector, File reactorDirectory)
{        if (selector.indexOf(':') >= 0) {        String id = ':' + project.getArtifactId();        if (id.equals(selector)) {            return true;        }        id = project.getGroupId() + id;        if (id.equals(selector)) {            return true;        }    } else     if (reactorDirectory != null) {        File selectedProject = new File(new File(reactorDirectory, selector).toURI().normalize());        if (selectedProject.isFile()) {            return selectedProject.equals(project.getFile());        } else if (selectedProject.isDirectory()) {            return selectedProject.equals(project.getBasedir());        }    }    return false;}
59ea6f87dabf206b451b574a8fdb657f29aba4b4a141faca31b989d2807dba44
getProjectsForMavenReactor
private List<MavenProject> getProjectsForMavenReactor(MavenSession session) throws ProjectBuildingException
{    MavenExecutionRequest request = session.getRequest();    request.getProjectBuildingRequest().setRepositorySession(session.getRepositorySession());    List<MavenProject> projects = new ArrayList<>();        if (request.getPom() == null) {        ModelSource modelSource = new UrlModelSource(DefaultMaven.class.getResource("project/standalone.xml"));        MavenProject project = projectBuilder.build(modelSource, request.getProjectBuildingRequest()).getProject();        project.setExecutionRoot(true);        projects.add(project);        request.setProjectPresent(false);        return projects;    }    List<File> files = Arrays.asList(request.getPom().getAbsoluteFile());    collectProjects(projects, files, request);    return projects;}
2ecf0053cfa65e8a1d3a1d7b3b1bb7d21cc8547d5c51427885cae26605897543
collectProjects
private void collectProjects(List<MavenProject> projects, List<File> files, MavenExecutionRequest request) throws ProjectBuildingException
{    ProjectBuildingRequest projectBuildingRequest = request.getProjectBuildingRequest();    List<ProjectBuildingResult> results = projectBuilder.build(files, request.isRecursive(), projectBuildingRequest);    boolean problems = false;    for (ProjectBuildingResult result : results) {        projects.add(result.getProject());        if (!result.getProblems().isEmpty() && logger.isWarnEnabled()) {            logger.warn("");            logger.warn("Some problems were encountered while building the effective model for " + result.getProject().getId());            for (ModelProblem problem : result.getProblems()) {                String loc = ModelProblemUtils.formatLocation(problem, result.getProjectId());                logger.warn(problem.getMessage() + (StringUtils.isNotEmpty(loc) ? " @ " + loc : ""));            }            problems = true;        }    }    if (problems) {        logger.warn("");        logger.warn("It is highly recommended to fix these problems" + " because they threaten the stability of your build.");        logger.warn("");        logger.warn("For this reason, future Maven versions might no" + " longer support building such malformed projects.");        logger.warn("");    }}
de924e9df967a851372eebbc7367a81146243dd02d899d0ae7024a29409cf882
validateProjects
private void validateProjects(List<MavenProject> projects)
{    Map<String, MavenProject> projectsMap = new HashMap<>();    for (MavenProject p : projects) {        String projectKey = ArtifactUtils.key(p.getGroupId(), p.getArtifactId(), p.getVersion());        projectsMap.put(projectKey, p);    }    for (MavenProject project : projects) {                for (Plugin plugin : project.getBuildPlugins()) {            if (plugin.isExtensions()) {                String pluginKey = ArtifactUtils.key(plugin.getGroupId(), plugin.getArtifactId(), plugin.getVersion());                if (projectsMap.containsKey(pluginKey)) {                    logger.warn(project.getName() + " uses " + plugin.getKey() + " as extensions, which is not possible within the same reactor build. " + "This plugin was pulled from the local repository!");                }            }        }    }}
9e7741414e346a2cf4af4830382cffb79f0ed8ac03e56602c02911d208de5fd7
getAllProjects
public List<MavenProject> getAllProjects()
{    return this.allProjects;}
a741787f77d01caf822782e4c4aea27986cab8e6d656656dab23943bae6d8c3a
getSortedProjects
public List<MavenProject> getSortedProjects()
{    return new ArrayList<>(sorter.getSortedProjects());}
1d2b3daf6e7456d60fb80c4e6c5905b83fc04e5cc5cfc2e77f0b0da143a4b56f
getDownstreamProjects
public List<MavenProject> getDownstreamProjects(MavenProject project, boolean transitive)
{    Objects.requireNonNull(project, "project cannot be null");    Set<String> projectIds = new HashSet<>();    getDownstreamProjects(ProjectSorter.getId(project), projectIds, transitive);    return getSortedProjects(projectIds);}
707dc2f26caeeb523c9776218130c92fc5da4f08880ab0926db37bb7cca4d9f9
getDownstreamProjects
private void getDownstreamProjects(String projectId, Set<String> projectIds, boolean transitive)
{    for (String id : sorter.getDependents(projectId)) {        if (projectIds.add(id) && transitive) {            getDownstreamProjects(id, projectIds, transitive);        }    }}
71332a05a314f8bebde1320c8c9579682bfd5a09833a5930a06e1aa90f0156bb
getUpstreamProjects
public List<MavenProject> getUpstreamProjects(MavenProject project, boolean transitive)
{    Objects.requireNonNull(project, "project cannot be null");    Set<String> projectIds = new HashSet<>();    getUpstreamProjects(ProjectSorter.getId(project), projectIds, transitive);    return getSortedProjects(projectIds);}
3c0921abdc237739e423e4b81c569b8812a4da6cc896a8fc336fea83bab94219
getUpstreamProjects
private void getUpstreamProjects(String projectId, Collection<String> projectIds, boolean transitive)
{    for (String id : sorter.getDependencies(projectId)) {        if (projectIds.add(id) && transitive) {            getUpstreamProjects(id, projectIds, transitive);        }    }}
37a1c0886c20800bf797f26c610faf28b6d94ea8c22c83cb880f1db03c261b08
getSortedProjects
private List<MavenProject> getSortedProjects(Set<String> projectIds)
{    List<MavenProject> result = new ArrayList<>(projectIds.size());    for (MavenProject mavenProject : sorter.getSortedProjects()) {        if (projectIds.contains(ProjectSorter.getId(mavenProject))) {            result.add(mavenProject);        }    }    return result;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return sorter.getSortedProjects().toString();}
9e7741414e346a2cf4af4830382cffb79f0ed8ac03e56602c02911d208de5fd7
getAllProjects
public List<MavenProject> getAllProjects()
{    return this.projectDependencyGraph.getAllProjects();}
a741787f77d01caf822782e4c4aea27986cab8e6d656656dab23943bae6d8c3a
getSortedProjects
public List<MavenProject> getSortedProjects()
{    if (sortedProjects == null) {        sortedProjects = applyFilter(projectDependencyGraph.getSortedProjects());    }    return new ArrayList<>(sortedProjects);}
1d2b3daf6e7456d60fb80c4e6c5905b83fc04e5cc5cfc2e77f0b0da143a4b56f
getDownstreamProjects
public List<MavenProject> getDownstreamProjects(MavenProject project, boolean transitive)
{    return applyFilter(projectDependencyGraph.getDownstreamProjects(project, transitive));}
71332a05a314f8bebde1320c8c9579682bfd5a09833a5930a06e1aa90f0156bb
getUpstreamProjects
public List<MavenProject> getUpstreamProjects(MavenProject project, boolean transitive)
{    return applyFilter(projectDependencyGraph.getUpstreamProjects(project, transitive));}
bc6f66fe24293ef36da5671634ea3fc85018948a30d69e81f64cbbdda78c94e1
applyFilter
private List<MavenProject> applyFilter(Collection<? extends MavenProject> projects)
{    List<MavenProject> filtered = new ArrayList<>(projects.size());    for (MavenProject project : projects) {        if (whiteList.containsKey(project)) {            filtered.add(project);        }    }    return filtered;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return getSortedProjects().toString();}
b2015445edc6c914c35966f55d111993dff6284320cc473109af79ab85b5dff4
newRepositorySession
public DefaultRepositorySystemSession newRepositorySession(MavenExecutionRequest request)
{    DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();    session.setCache(request.getRepositoryCache());    Map<Object, Object> configProps = new LinkedHashMap<>();    configProps.put(ConfigurationProperties.USER_AGENT, getUserAgent());    configProps.put(ConfigurationProperties.INTERACTIVE, request.isInteractiveMode());    configProps.putAll(request.getSystemProperties());    configProps.putAll(request.getUserProperties());    session.setOffline(request.isOffline());    session.setChecksumPolicy(request.getGlobalChecksumPolicy());    if (request.isNoSnapshotUpdates()) {        session.setUpdatePolicy(RepositoryPolicy.UPDATE_POLICY_NEVER);    } else if (request.isUpdateSnapshots()) {        session.setUpdatePolicy(RepositoryPolicy.UPDATE_POLICY_ALWAYS);    } else {        session.setUpdatePolicy(null);    }    int errorPolicy = 0;    errorPolicy |= request.isCacheNotFound() ? ResolutionErrorPolicy.CACHE_NOT_FOUND : ResolutionErrorPolicy.CACHE_DISABLED;    errorPolicy |= request.isCacheTransferError() ? ResolutionErrorPolicy.CACHE_TRANSFER_ERROR : ResolutionErrorPolicy.CACHE_DISABLED;    session.setResolutionErrorPolicy(new SimpleResolutionErrorPolicy(errorPolicy, errorPolicy | ResolutionErrorPolicy.CACHE_NOT_FOUND));    session.setArtifactTypeRegistry(RepositoryUtils.newArtifactTypeRegistry(artifactHandlerManager));    LocalRepository localRepo = new LocalRepository(request.getLocalRepository().getBasedir());    if (request.isUseLegacyLocalRepository()) {        try {            session.setLocalRepositoryManager(simpleLocalRepoMgrFactory.newInstance(session, localRepo));            logger.info("Disabling enhanced local repository: using legacy is strongly discouraged to ensure" + " build reproducibility.");        } catch (NoLocalRepositoryManagerException e) {            logger.error("Failed to configure legacy local repository: falling back to default");            session.setLocalRepositoryManager(repoSystem.newLocalRepositoryManager(session, localRepo));        }    } else {        session.setLocalRepositoryManager(repoSystem.newLocalRepositoryManager(session, localRepo));    }    if (request.getWorkspaceReader() != null) {        session.setWorkspaceReader(request.getWorkspaceReader());    } else {        session.setWorkspaceReader(workspaceRepository);    }    DefaultSettingsDecryptionRequest decrypt = new DefaultSettingsDecryptionRequest();    decrypt.setProxies(request.getProxies());    decrypt.setServers(request.getServers());    SettingsDecryptionResult decrypted = settingsDecrypter.decrypt(decrypt);    if (logger.isDebugEnabled()) {        for (SettingsProblem problem : decrypted.getProblems()) {            logger.debug(problem.getMessage(), problem.getException());        }    }    DefaultMirrorSelector mirrorSelector = new DefaultMirrorSelector();    for (Mirror mirror : request.getMirrors()) {        mirrorSelector.add(mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.getMirrorOf(), mirror.getMirrorOfLayouts());    }    session.setMirrorSelector(mirrorSelector);    DefaultProxySelector proxySelector = new DefaultProxySelector();    for (Proxy proxy : decrypted.getProxies()) {        AuthenticationBuilder authBuilder = new AuthenticationBuilder();        authBuilder.addUsername(proxy.getUsername()).addPassword(proxy.getPassword());        proxySelector.add(new org.eclipse.aether.repository.Proxy(proxy.getProtocol(), proxy.getHost(), proxy.getPort(), authBuilder.build()), proxy.getNonProxyHosts());    }    session.setProxySelector(proxySelector);    DefaultAuthenticationSelector authSelector = new DefaultAuthenticationSelector();    for (Server server : decrypted.getServers()) {        AuthenticationBuilder authBuilder = new AuthenticationBuilder();        authBuilder.addUsername(server.getUsername()).addPassword(server.getPassword());        authBuilder.addPrivateKey(server.getPrivateKey(), server.getPassphrase());        authSelector.add(server.getId(), authBuilder.build());        if (server.getConfiguration() != null) {            Xpp3Dom dom = (Xpp3Dom) server.getConfiguration();            for (int i = dom.getChildCount() - 1; i >= 0; i--) {                Xpp3Dom child = dom.getChild(i);                if ("wagonProvider".equals(child.getName())) {                    dom.removeChild(i);                }            }            XmlPlexusConfiguration config = new XmlPlexusConfiguration(dom);            configProps.put("aether.connector.wagon.config." + server.getId(), config);        }        configProps.put("aether.connector.perms.fileMode." + server.getId(), server.getFilePermissions());        configProps.put("aether.connector.perms.dirMode." + server.getId(), server.getDirectoryPermissions());    }    session.setAuthenticationSelector(authSelector);    session.setTransferListener(request.getTransferListener());    session.setRepositoryListener(eventSpyDispatcher.chainListener(new LoggingRepositoryListener(logger)));    session.setUserProperties(request.getUserProperties());    session.setSystemProperties(request.getSystemProperties());    session.setConfigProperties(configProps);    mavenRepositorySystem.injectMirror(request.getRemoteRepositories(), request.getMirrors());    mavenRepositorySystem.injectProxy(session, request.getRemoteRepositories());    mavenRepositorySystem.injectAuthentication(session, request.getRemoteRepositories());    mavenRepositorySystem.injectMirror(request.getPluginArtifactRepositories(), request.getMirrors());    mavenRepositorySystem.injectProxy(session, request.getPluginArtifactRepositories());    mavenRepositorySystem.injectAuthentication(session, request.getPluginArtifactRepositories());    return session;}
f44824f6b0494ebd0e534bcc96259bce965660c1c6d1bc88d3b838386a0d82a0
getUserAgent
private String getUserAgent()
{    return "Apache-Maven/" + getMavenVersion() + " (Java " + System.getProperty("java.version") + "; " + System.getProperty("os.name") + " " + System.getProperty("os.version") + ")";}
65c52f3b1341a7f55820a7603da7a6d28a0425d3ea15ea21270bb558babad345
getMavenVersion
private String getMavenVersion()
{    Properties props = new Properties();    try (InputStream is = getClass().getResourceAsStream("/META-INF/maven/org.apache.maven/maven-core/pom.properties")) {        if (is != null) {            props.load(is);        }    } catch (IOException e) {        logger.debug("Failed to read Maven version", e);    }    return props.getProperty("version", "unknown-version");}
8a756148e2b12512aa3928f8ac78935964f7942d5ac4aa39608e8065ea8cbfbb
artifactInstalling
public void artifactInstalling(RepositoryEvent event)
{    logger.info("Installing " + event.getArtifact().getFile() + " to " + event.getFile());}
eb974cf8314cc951656e512e4f6617994786037e4c0ca6b1733127dfb0e47f73
metadataInstalling
public void metadataInstalling(RepositoryEvent event)
{    logger.debug("Installing " + event.getMetadata() + " to " + event.getFile());}
87a28c3260b10bd2d310415ff0e99f76ce1ee09fbbb12d062e70b8149e201f44
metadataResolved
public void metadataResolved(RepositoryEvent event)
{    Exception e = event.getException();    if (e != null) {        if (e instanceof MetadataNotFoundException) {            logger.debug(e.getMessage());        } else if (logger.isDebugEnabled()) {            logger.warn(e.getMessage(), e);        } else {            logger.warn(e.getMessage());        }    }}
11feda80caf4c182286f3c22a0012ae9dd09a08ef64509a1b58e7dd663e483ce
metadataInvalid
public void metadataInvalid(RepositoryEvent event)
{    Exception exception = event.getException();    StringBuilder buffer = new StringBuilder(256);    buffer.append("The metadata ");    if (event.getMetadata().getFile() != null) {        buffer.append(event.getMetadata().getFile());    } else {        buffer.append(event.getMetadata());    }    if (exception instanceof FileNotFoundException) {        buffer.append(" is inaccessible");    } else {        buffer.append(" is invalid");    }    if (exception != null) {        buffer.append(": ");        buffer.append(exception.getMessage());    }    if (logger.isDebugEnabled()) {        logger.warn(buffer.toString(), exception);    } else {        logger.warn(buffer.toString());    }}
f1e301d83bfdae897667ae95d4f5d2492d3c00907292eb6c9aa79610986d6676
artifactDescriptorInvalid
public void artifactDescriptorInvalid(RepositoryEvent event)
{    StringBuilder buffer = new StringBuilder(256);    buffer.append("The POM for ");    buffer.append(event.getArtifact());    buffer.append(" is invalid, transitive dependencies (if any) will not be available");    if (logger.isDebugEnabled()) {        logger.warn(buffer + ": " + event.getException().getMessage());    } else {        logger.warn(buffer + ", enable debug logging for more details");    }}
eabdfac5fe85a9fb25305640d906eafc91431676b02d8419323e702d711b1d9b
artifactDescriptorMissing
public void artifactDescriptorMissing(RepositoryEvent event)
{    logger.warn("The POM for " + event.getArtifact() + " is missing, no dependency information available");}
67a6621c76d8c6bf6535ac8e9711527e7b493a85bf0ba75fb5bbbe482fe8d8e7
execute
public void execute(MavenSession session)
{    lifecycleStarter.execute(session);}
afe8893888899b4a1f5ffc4906aebf4423c24f4d95f5e841bac29e33af7cd44d
getPluginsBoundByDefaultToAllLifecycles
public Set<Plugin> getPluginsBoundByDefaultToAllLifecycles(String packaging)
{    return lifeCyclePluginAnalyzer.getPluginsBoundByDefaultToAllLifecycles(packaging);}
fdc732f7bcdaca2651bfb8c5263e794c408c63d2a222b1c10d47193c2bb640f0
getPhaseToLifecycleMap
public Map<String, Lifecycle> getPhaseToLifecycleMap()
{    return defaultLifeCycles.getPhaseToLifecycleMap();}
a73d48f68ab26be754d7d1b5610863caf7afa4ce91ce4f8b9e5f573cfe511d73
getMojoDescriptor
 MojoDescriptor getMojoDescriptor(String task, MavenSession session, MavenProject project, String invokedVia, boolean canUsePrefix, boolean isOptionalMojo) throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, MojoNotFoundException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException, PluginVersionResolutionException
{    return mojoDescriptorCreator.getMojoDescriptor(task, session, project);}
9825540a4bf20db5fa137f81583b0b35fd96c8e9a260a82586a7e53c9dc4803a
calculateExecutionPlan
public MavenExecutionPlan calculateExecutionPlan(MavenSession session, boolean setup, String... tasks) throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, MojoNotFoundException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException, PluginManagerException, LifecyclePhaseNotFoundException, LifecycleNotFoundException, PluginVersionResolutionException
{    List<TaskSegment> taskSegments = lifecycleTaskSegmentCalculator.calculateTaskSegments(session, Arrays.asList(tasks));    TaskSegment mergedSegment = new TaskSegment(false);    for (TaskSegment taskSegment : taskSegments) {        mergedSegment.getTasks().addAll(taskSegment.getTasks());    }    return lifecycleExecutionPlanCalculator.calculateExecutionPlan(session, session.getCurrentProject(), mergedSegment.getTasks(), setup);}
a663e1a412ea5536d663db9b1681061fbbe1e8a33df1947540d0f5dab4dbedb3
calculateExecutionPlan
public MavenExecutionPlan calculateExecutionPlan(MavenSession session, String... tasks) throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, MojoNotFoundException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException, PluginManagerException, LifecyclePhaseNotFoundException, LifecycleNotFoundException, PluginVersionResolutionException
{    return calculateExecutionPlan(session, true, tasks);}
377d982318368e76c8ae67d6672b31a3a6d8877017a188f5fc6f46fbbb7eaaaf
calculateForkedExecutions
public void calculateForkedExecutions(MojoExecution mojoExecution, MavenSession session) throws MojoNotFoundException, PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException, LifecyclePhaseNotFoundException, LifecycleNotFoundException, PluginVersionResolutionException
{    lifecycleExecutionPlanCalculator.calculateForkedExecutions(mojoExecution, session);}
35a39faa81c643ca9d94357ab925a58195ddb0daf58e406df37cf401b8dab021
executeForkedExecutions
public List<MavenProject> executeForkedExecutions(MojoExecution mojoExecution, MavenSession session) throws LifecycleExecutionException
{    return mojoExecutor.executeForkedExecutions(mojoExecution, session, new ProjectIndex(session.getProjects()));}
004d18d114930dbf1798e0235ae13c1f012144da70e11b5961269b11f1044dce
get
public Lifecycle get(String key)
{    return getPhaseToLifecycleMap().get(key);}
fdc732f7bcdaca2651bfb8c5263e794c408c63d2a222b1c10d47193c2bb640f0
getPhaseToLifecycleMap
public Map<String, Lifecycle> getPhaseToLifecycleMap()
{            HashMap<String, Lifecycle> phaseToLifecycleMap = new HashMap<>();    for (Lifecycle lifecycle : getLifeCycles()) {        if (logger.isDebugEnabled()) {            logger.debug("Lifecycle " + lifecycle);        }        for (String phase : lifecycle.getPhases()) {                        if (!phaseToLifecycleMap.containsKey(phase)) {                phaseToLifecycleMap.put(phase, lifecycle);            } else {                Lifecycle original = phaseToLifecycleMap.get(phase);                logger.warn("Duplicated lifecycle phase " + phase + ". Defined in " + original.getId() + " but also in " + lifecycle.getId());            }        }    }    return phaseToLifecycleMap;}
69d9fea96cd96c24225a69536bd2699a3f54bbae75c838cf0fc3d0ce2ed41e66
getLifeCycles
public List<Lifecycle> getLifeCycles()
{        Map<String, Lifecycle> lifecycles = new LinkedHashMap<>(this.lifecycles);    LinkedHashSet<String> lifecycleNames = new LinkedHashSet<>(Arrays.asList(STANDARD_LIFECYCLES));    lifecycleNames.addAll(lifecycles.keySet());    ArrayList<Lifecycle> result = new ArrayList<>();    for (String name : lifecycleNames) {        Lifecycle lifecycle = lifecycles.get(name);        if (lifecycle.getId() == null) {            throw new NullPointerException("A lifecycle must have an id.");        }        result.add(lifecycle);    }    return result;}
f4c61aa83827207a2175b7351612b088ef620909e0a93af438153c0a2d51af60
getLifecyclePhaseList
public String getLifecyclePhaseList()
{    Set<String> phases = new LinkedHashSet<>();    for (Lifecycle lifecycle : getLifeCycles()) {        phases.addAll(lifecycle.getPhases());    }    return StringUtils.join(phases.iterator(), ", ");}
be32bfc1e16e1858d1341858e9cdd4cd46b67a488225418685e58e98a62e1ce9
resolveBuildPlan
public MavenExecutionPlan resolveBuildPlan(MavenSession session, MavenProject project, TaskSegment taskSegment, Set<Artifact> projectArtifacts) throws PluginNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException, PluginDescriptorParsingException, MojoNotFoundException, InvalidPluginDescriptorException, NoPluginFoundForPrefixException, LifecycleNotFoundException, PluginVersionResolutionException, LifecycleExecutionException
{    MavenExecutionPlan executionPlan = lifeCycleExecutionPlanCalculator.calculateExecutionPlan(session, project, taskSegment.getTasks());    lifecycleDebugLogger.debugProjectPlan(project, executionPlan);    if (session.getRequest().getDegreeOfConcurrency() > 1) {        final Set<Plugin> unsafePlugins = executionPlan.getNonThreadSafePlugins();        if (!unsafePlugins.isEmpty()) {            logger.warn("*****************************************************************");            logger.warn("* Your build is requesting parallel execution, but project      *");            logger.warn("* contains the following plugin(s) that have goals not marked   *");            logger.warn("* as @threadSafe to support parallel building.                  *");            logger.warn("* While this /may/ work fine, please look for plugin updates    *");            logger.warn("* and/or request plugins be made thread-safe.                   *");            logger.warn("* If reporting an issue, report it against the plugin in        *");            logger.warn("* question, not against maven-core                              *");            logger.warn("*****************************************************************");            if (logger.isDebugEnabled()) {                final Set<MojoDescriptor> unsafeGoals = executionPlan.getNonThreadSafeMojos();                logger.warn("The following goals are not marked @threadSafe in " + project.getName() + ":");                for (MojoDescriptor unsafeGoal : unsafeGoals) {                    logger.warn(unsafeGoal.getId());                }            } else {                logger.warn("The following plugins are not marked @threadSafe in " + project.getName() + ":");                for (Plugin unsafePlugin : unsafePlugins) {                    logger.warn(unsafePlugin.getId());                }                logger.warn("Enable debug to see more precisely which goals are not marked @threadSafe.");            }            logger.warn("*****************************************************************");        }    }    return executionPlan;}
ddeb817a5bef18ef1ce055bac09e75c92be1da7648a9f7aa446b3cfdd01fb56b
handleBuildError
public void handleBuildError(final ReactorContext buildContext, final MavenSession rootSession, final MavenSession currentSession, final MavenProject mavenProject, Throwable t, final long buildStartTime)
{        long buildEndTime = System.currentTimeMillis();    buildContext.getResult().addException(t);    buildContext.getResult().addBuildSummary(new BuildFailure(mavenProject, buildEndTime - buildStartTime, t));        if (t instanceof Exception && !(t instanceof RuntimeException)) {        eventCatapult.fire(ExecutionEvent.Type.ProjectFailed, currentSession, null, (Exception) t);    }        if (t instanceof RuntimeException || !(t instanceof Exception)) {                        buildContext.getReactorBuildStatus().halt();    } else if (MavenExecutionRequest.REACTOR_FAIL_NEVER.equals(rootSession.getReactorFailureBehavior())) {        } else if (MavenExecutionRequest.REACTOR_FAIL_AT_END.equals(rootSession.getReactorFailureBehavior())) {                buildContext.getReactorBuildStatus().blackList(mavenProject);    } else if (MavenExecutionRequest.REACTOR_FAIL_FAST.equals(rootSession.getReactorFailureBehavior())) {        buildContext.getReactorBuildStatus().halt();    } else {        logger.error("invalid reactor failure behavior " + rootSession.getReactorFailureBehavior());        buildContext.getReactorBuildStatus().halt();    }}
d6e9a137bfee4843f77e177d222d432ce0a845412c43e2c6b79fc96da424918d
attachToThread
public static void attachToThread(MavenProject currentProject)
{    ClassRealm projectRealm = currentProject.getClassRealm();    if (projectRealm != null) {        Thread.currentThread().setContextClassLoader(projectRealm);    }}
1127cba6d948f1202910bed626d728771c4e4138a8b1197deb13bdc7b4dd6d59
getKey
public static String getKey(MavenProject project)
{    return project.getGroupId() + ':' + project.getArtifactId() + ':' + project.getVersion();}
ab04c2c692bc769efa9f5d289582dbe42ad80291ff044c5415aa281b7fd9d2e7
getNumberOfBuilds
public int getNumberOfBuilds()
{    return projectBuilds.size();}
7eb06581a52d795f79338f24e9571ac81bc1ab6d8eb4b50611b03955a0e8bdaa
getRootSchedulableBuilds
public List<MavenProject> getRootSchedulableBuilds()
{    Set<MavenProject> result = new LinkedHashSet<>();    for (ProjectSegment projectBuild : projectBuilds) {        if (projectDependencyGraph.getUpstreamProjects(projectBuild.getProject(), false).isEmpty()) {            result.add(projectBuild.getProject());        }    }    return new ArrayList<>(result);}
ea513de4e228922205bea710cb3e29141732f012652661c9772e7edafe33c737
markAsFinished
public List<MavenProject> markAsFinished(MavenProject mavenProject)
{    finishedProjects.add(mavenProject);    return getSchedulableNewProcesses(mavenProject);}
4b836e85585689ef76e661653e8f6e84aa1d531d64c1b10b0cf7d39639cb9034
getSchedulableNewProcesses
private List<MavenProject> getSchedulableNewProcesses(MavenProject finishedProject)
{    List<MavenProject> result = new ArrayList<>();        for (MavenProject dependentProject : projectDependencyGraph.getDownstreamProjects(finishedProject, false)) {        final List<MavenProject> upstreamProjects = projectDependencyGraph.getUpstreamProjects(dependentProject, false);        if (finishedProjects.containsAll(upstreamProjects)) {            result.add(dependentProject);        }    }    return result;}
aefa3b945f1f917dec2932a0889ee0acb9e0c2a92446eb9af0a328ccb3840ea9
getUnfinishedProjects
public Set<MavenProject> getUnfinishedProjects()
{    Set<MavenProject> unfinished = new HashSet<>(projectBuilds.getProjects());    unfinished.removeAll(finishedProjects);    return unfinished;}
ce9928efcd83686b1af55295a97a2c02cefa8b260f926d952947d85bd2497014
getFinishedProjects
protected Set<MavenProject> getFinishedProjects()
{    return finishedProjects;}
2bd3c3517edc6923a6f8463dc91bce869bf24403ad324cadfa86776596afc3ff
getProjectBuilds
protected ProjectBuildList getProjectBuilds()
{    return projectBuilds;}
0e4d47b15b62ad674e77e329bbe46d2626a442aef59b8d9125f287b5097481f8
getDependencies
protected List<MavenProject> getDependencies(MavenProject p)
{    return projectDependencyGraph.getUpstreamProjects(p, false);}
c3904731d554fd301f8dabfb20c6386670899fbf1bcef4052ff10a3656b05781
getActiveDependencies
public List<MavenProject> getActiveDependencies(MavenProject p)
{    List<MavenProject> activeDependencies = projectDependencyGraph.getUpstreamProjects(p, false);    activeDependencies.removeAll(finishedProjects);    return activeDependencies;}
1cc2e41c3b2adbe1317e09ece86a5dd34b8d1b6883e0a809ee2c4a0e78dcfdeb
build
public void build(MavenSession session, ReactorContext reactorContext, ProjectBuildList projectBuilds, List<TaskSegment> taskSegments, ReactorBuildStatus reactorBuildStatus) throws ExecutionException, InterruptedException
{    int nThreads = Math.min(session.getRequest().getDegreeOfConcurrency(), session.getProjects().size());    boolean parallel = nThreads >= 2;        session.setParallel(parallel);    for (ProjectSegment segment : projectBuilds) {        segment.getSession().setParallel(parallel);    }    ExecutorService executor = Executors.newFixedThreadPool(nThreads, new BuildThreadFactory());    CompletionService<ProjectSegment> service = new ExecutorCompletionService<>(executor);            ThreadOutputMuxer muxer = null;    for (TaskSegment taskSegment : taskSegments) {        ProjectBuildList segmentProjectBuilds = projectBuilds.getByTaskSegment(taskSegment);        Map<MavenProject, ProjectSegment> projectBuildMap = projectBuilds.selectSegment(taskSegment);        try {            ConcurrencyDependencyGraph analyzer = new ConcurrencyDependencyGraph(segmentProjectBuilds, session.getProjectDependencyGraph());            multiThreadedProjectTaskSegmentBuild(analyzer, reactorContext, session, service, taskSegment, projectBuildMap, muxer);            if (reactorContext.getReactorBuildStatus().isHalted()) {                break;            }        } catch (Exception e) {            session.getResult().addException(e);            break;        }    }    executor.shutdown();    executor.awaitTermination(Long.MAX_VALUE, TimeUnit.MILLISECONDS);}
08214177fe1e1b1f9217b75fe310b9a6c8e0312d1575b69e90eac972dc583971
multiThreadedProjectTaskSegmentBuild
private void multiThreadedProjectTaskSegmentBuild(ConcurrencyDependencyGraph analyzer, ReactorContext reactorContext, MavenSession rootSession, CompletionService<ProjectSegment> service, TaskSegment taskSegment, Map<MavenProject, ProjectSegment> projectBuildList, ThreadOutputMuxer muxer)
{        for (MavenProject mavenProject : analyzer.getRootSchedulableBuilds()) {        ProjectSegment projectSegment = projectBuildList.get(mavenProject);        logger.debug("Scheduling: " + projectSegment.getProject());        Callable<ProjectSegment> cb = createBuildCallable(rootSession, projectSegment, reactorContext, taskSegment, muxer);        service.submit(cb);    }        for (int i = 0; i < analyzer.getNumberOfBuilds(); i++) {        try {            ProjectSegment projectBuild = service.take().get();            if (reactorContext.getReactorBuildStatus().isHalted()) {                break;            }                        if (analyzer.getNumberOfBuilds() > 1) {                final List<MavenProject> newItemsThatCanBeBuilt = analyzer.markAsFinished(projectBuild.getProject());                for (MavenProject mavenProject : newItemsThatCanBeBuilt) {                    ProjectSegment scheduledDependent = projectBuildList.get(mavenProject);                    logger.debug("Scheduling: " + scheduledDependent);                    Callable<ProjectSegment> cb = createBuildCallable(rootSession, scheduledDependent, reactorContext, taskSegment, muxer);                    service.submit(cb);                }            }        } catch (InterruptedException e) {            rootSession.getResult().addException(e);            break;        } catch (ExecutionException e) {                        rootSession.getResult().addException(e);            break;        }    }}
36fbd2e99bbc54f87fe402f1cb98f05472b563221f2ffbf5aaaa148d1adbb066
createBuildCallable
private Callable<ProjectSegment> createBuildCallable(final MavenSession rootSession, final ProjectSegment projectBuild, final ReactorContext reactorContext, final TaskSegment taskSegment, final ThreadOutputMuxer muxer)
{    return new Callable<ProjectSegment>() {        public ProjectSegment call() {                        lifecycleModuleBuilder.buildProject(projectBuild.getSession(), rootSession, reactorContext, projectBuild.getProject(), taskSegment);            return projectBuild;        }    };}
5959fd1c2c9b5f13d50a214e954eede2f1f831959210d5935c5d3ae22b3e1b6d
call
public ProjectSegment call()
{        lifecycleModuleBuilder.buildProject(projectBuild.getSession(), rootSession, reactorContext, projectBuild.getProject(), taskSegment);    return projectBuild;}
4560d80c2474cc2770be19fbc06c60741920c59992e6b13524f8a5b688ec285a
run
public void run()
{    running = true;    for (ProjectSegment projectBuild : projectBuildList) {        final PrintStream projectStream = printStreams.get(projectBuild);        ByteArrayOutputStream projectOs = streams.get(projectBuild);        do {            synchronized (projectStream) {                try {                    projectStream.wait(100);                } catch (InterruptedException e) {                    throw new RuntimeException(e);                }                try {                    projectOs.writeTo(originalSystemOUtStream);                } catch (IOException e) {                    throw new RuntimeException(e);                }                projectOs.reset();            }        } while (!completedBuilds.contains(projectBuild));    }    running = false;}
ae71cb6e01dd299e1fc4ae834d8ac26031864df59cf1355983bf125ca6e69805
waitUntilRunning
public void waitUntilRunning(boolean expect)
{    while (!running == expect) {        try {            Thread.sleep(10);        } catch (InterruptedException e) {            throw new RuntimeException(e);        }    }}
5df6118bc0e745d8b18e0a6a99b2e3f2ddba8140cbeb1423ce2df50a9f140574
close
public void close()
{    printer.waitUntilRunning(false);    System.setOut(this.originalSystemOUtStream);}
99d13682a1c1700cae5df5253772b39a19840996f4d514bfb3ffa7ac3f1e817a
setNext
private void setNext()
{    currentBuild = projects.hasNext() ? projects.next() : null;}
bb94e5a7a48ec4f189365a5377166827f93bcc82ca39b1f99b7b4a69573ead87
ownsRealOutputStream
private boolean ownsRealOutputStream(ProjectSegment projectBuild)
{    return projectBuild.equals(currentBuild);}
e467d12139b5de1baff1b24dd0adc82982eb5fdd281bd3d64e03fb5351233f67
getThreadBoundPrintStream
private PrintStream getThreadBoundPrintStream()
{    ProjectSegment threadProject = projectBuildThreadLocal.get();    if (threadProject == null) {        return defaultPrintStream;    }    if (ownsRealOutputStream(threadProject)) {        return originalSystemOUtStream;    }    return printStreams.get(threadProject);}
adb53db73056e1d007a094739452f7a17faa90515b2d205f4441593bb1557eef
associateThreadWithProjectSegment
public void associateThreadWithProjectSegment(ProjectSegment projectBuild)
{    projectBuildThreadLocal.set(projectBuild);}
6e55ad0d98261e58dc80e301e8a678378aabf2914ad78f131d74b5273d612e64
setThisModuleComplete
public void setThisModuleComplete(ProjectSegment projectBuild)
{    completedBuilds.add(projectBuild);    PrintStream stream = printStreams.get(projectBuild);    synchronized (stream) {        stream.notifyAll();    }    disconnectThreadFromProject();}
141d794d5472cc60a1ebdf90de0ce8c988e1e47b2297c4b7a3757fc34f2d1d2d
disconnectThreadFromProject
private void disconnectThreadFromProject()
{    projectBuildThreadLocal.remove();}
b785a8bceef733b041ad58607ccd7b35a00defbc8af8dabeaed2e87a68313f01
getOutputStreamForCurrentThread
private PrintStream getOutputStreamForCurrentThread()
{    return getThreadBoundPrintStream();}
61ec18fdee534037a4559a178a14e2b7a1caa49494d730ee98a1eacb2eca1c36
println
public void println()
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.println();        currentStream.notifyAll();    }}
4fadeaa309a91a646ef4b6c369b7eda9968a207ec60f5fbe12c99e32c1d75e68
print
public void print(char c)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.print(c);        currentStream.notifyAll();    }}
0009a30937af5a461749ed1ee7f1449ea9e0861fce4ce29bc982c9a17aebe73b
println
public void println(char x)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.println(x);        currentStream.notifyAll();    }}
e87779ccab1474b3b7572cf55a92aab3c8a8b1cc72fb56aa32d0020560338deb
print
public void print(double d)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.print(d);        currentStream.notifyAll();    }}
f642d1ea5e143bc27c38f863182ca13307bc3cc67521d7c8260b11f6d42eede6
println
public void println(double x)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.println(x);        currentStream.notifyAll();    }}
a5da7715081b453e9052b52a9371b4686f88c30244278706c2703b091bb3c328
print
public void print(float f)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.print(f);        currentStream.notifyAll();    }}
e8ac0615955dddaf5efd1cf038cd0137c85775a8052be950a4f0c47febf593f7
println
public void println(float x)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.println(x);        currentStream.notifyAll();    }}
0d9328626db4039ed01e4ea56640d8c351b8db4c57723a574c490e8b11d5bd22
print
public void print(int i)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.print(i);        currentStream.notifyAll();    }}
efe788b54f32362a1235e559ba465ec6f01bd6e21924351a02c899ee54dcd82f
println
public void println(int x)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.println(x);        currentStream.notifyAll();    }}
c7388ffb9bce68e8d8689355b3b73a3e63e1bcbf6c0fcb8b52fd3b5fc030d106
print
public void print(long l)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.print(l);        currentStream.notifyAll();    }}
967ad356a4478c2a2048c2030b727c62b6d78fcf710ee793041cc9d0e4feb6d4
println
public void println(long x)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.print(x);        currentStream.notifyAll();    }}
b139344054966794213f046d16e0cae8d0ae34df29653c34bda4cbc8cffc1efe
print
public void print(boolean b)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.print(b);        currentStream.notifyAll();    }}
54dfaad13ade37e67a9c952f1ece14dc07e3dad9b72b135e90a06058c3ecfe0b
println
public void println(boolean x)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.print(x);        currentStream.notifyAll();    }}
ddcfe69b836581a74a7d3a4b3d540bfd5cb8c707dde3ab806b123eb6ac16add6
print
public void print(char[] s)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.print(s);        currentStream.notifyAll();    }}
fb2c8004f178337caeb9516053df2bdc9893cae18e8b85c3ffd263be9d9caaf5
println
public void println(char[] x)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.print(x);        currentStream.notifyAll();    }}
7f3af16e8cdc31fc2138edb5fec3dda5f0bffc4af423104d122858353246ec13
print
public void print(Object obj)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.print(obj);        currentStream.notifyAll();    }}
0bae9a79ac5151b3c36e4586bf8aa41727dc5a4706f4221d2e06c449e14aa89d
println
public void println(Object x)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.println(x);        currentStream.notifyAll();    }}
1904a6c118641507ba7cbb132dd32f9381ae0cddc226e2f494c85210c74807f0
print
public void print(String s)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.print(s);        currentStream.notifyAll();    }}
03898c9a312c742b3adf79b045032a1c5bae27bc710bf96d451400941a46cea4
println
public void println(String x)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.println(x);        currentStream.notifyAll();    }}
ff0b219f0fb5d98769feafdb43b42bceec5beac4330d68da85f0f922f1b42b7f
write
public void write(byte[] b, int off, int len)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.write(b, off, len);        currentStream.notifyAll();    }}
5df6118bc0e745d8b18e0a6a99b2e3f2ddba8140cbeb1423ce2df50a9f140574
close
public void close()
{    getOutputStreamForCurrentThread().close();}
ea956eca0ceec4b07db63def8a0f238be4f058fb174f02b053447578581df262
flush
public void flush()
{    getOutputStreamForCurrentThread().flush();}
25b35cf2ca566b5b4b14451f4ded1a3f4e745f0a14883c16b91d1495a5574ab6
write
public void write(int b)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.write(b);        currentStream.notifyAll();    }}
9dc05e09d787e6afa8b5d2cf4cacaf1f65f348fcc597daca5502cd46ac6e898a
write
public void write(byte[] b) throws IOException
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.write(b);        currentStream.notifyAll();    }}
cbc9c4505e7e57d65010a51f62406366fd8b3a29a76bd3e9de4c5478329d918d
build
public void build(MavenSession session, ReactorContext reactorContext, ProjectBuildList projectBuilds, List<TaskSegment> taskSegments, ReactorBuildStatus reactorBuildStatus)
{    for (TaskSegment taskSegment : taskSegments) {        for (ProjectSegment projectBuild : projectBuilds.getByTaskSegment(taskSegment)) {            try {                lifecycleModuleBuilder.buildProject(session, reactorContext, projectBuild.getProject(), taskSegment);                if (reactorBuildStatus.isHalted()) {                    break;                }            } catch (Exception e) {                                break;            }        }    }}
5f3140590f86681492fbda157661f715567ab19758d3ca2990c4c8ba12da1ace
calculateProjectBuilds
public ProjectBuildList calculateProjectBuilds(MavenSession session, List<TaskSegment> taskSegments)
{    List<ProjectSegment> projectBuilds = new ArrayList<>();    MavenProject rootProject = session.getTopLevelProject();    for (TaskSegment taskSegment : taskSegments) {        List<MavenProject> projects;        if (taskSegment.isAggregating()) {            projects = Collections.singletonList(rootProject);        } else {            projects = session.getProjects();        }        for (MavenProject project : projects) {                        BuilderCommon.attachToThread(project);            MavenSession copiedSession = session.clone();            copiedSession.setCurrentProject(project);            projectBuilds.add(new ProjectSegment(project, taskSegment, copiedSession));        }    }    return new ProjectBuildList(projectBuilds);}
02166686c9ffef8abcca97b0bc3e38cb95c97860d78686958b46127a2ecadb18
newThread
public Thread newThread(Runnable r)
{    return new Thread(r, String.format("%s %d", PREFIX, id.getAndIncrement()));}
bc03a8cbbe8c058b62972712e49ae0297734812b2845987e21840bb9d8a0bb35
beforeProjectExecution
public void beforeProjectExecution(ProjectExecutionEvent event) throws LifecycleExecutionException
{    for (ProjectExecutionListener listener : listeners) {        listener.beforeProjectExecution(event);    }}
fe1cc24f207e06fcf8126b6728d51e29bf6a81ed4c6c7ca150e00938087eeb50
beforeProjectLifecycleExecution
public void beforeProjectLifecycleExecution(ProjectExecutionEvent event) throws LifecycleExecutionException
{    for (ProjectExecutionListener listener : listeners) {        listener.beforeProjectLifecycleExecution(event);    }}
084a5caee7db5136abb1db4a0093438a0e4f6f8a151216423eb95db3f69ea360
afterProjectExecutionSuccess
public void afterProjectExecutionSuccess(ProjectExecutionEvent event) throws LifecycleExecutionException
{    for (ProjectExecutionListener listener : listeners) {        listener.afterProjectExecutionSuccess(event);    }}
515cb1daced4439666ef611def0e2af8dc95d02a6fcc4bb0121dcf7c36df1489
afterProjectExecutionFailure
public void afterProjectExecutionFailure(ProjectExecutionEvent event)
{    for (ProjectExecutionListener listener : listeners) {        listener.afterProjectExecutionFailure(event);    }}
b36c0cb78d388571653840506cba5d90e12b262c755658912fc2224c314bcbf6
getType
public Type getType()
{    return type;}
5f9beff804d491307ef6fcfa2f8b51cce53a3674d5c1d3d683eb56a19c4083d7
getSession
public MavenSession getSession()
{    return session;}
cdcc47ed1eccb5aa7ba2aa1d33b327142be7cbcc16c1cff19fde28a6b8e02541
getProject
public MavenProject getProject()
{    return session.getCurrentProject();}
eb3a794f903f1ffc54f022291e7e753bb36cbee3f248989f4273a4089ec2eecd
getMojoExecution
public MojoExecution getMojoExecution()
{    return mojoExecution;}
854d9d54d3315f04df8394cf9b7e23acfa1148329c6dabcb18e9f24a7ab80028
getException
public Exception getException()
{    return exception;}
02a2979847716261d0e658e2d82769c6fe423bd33af6957d155bd907aed70d38
fire
public void fire(ExecutionEvent.Type eventType, MavenSession session, MojoExecution mojoExecution)
{    fire(eventType, session, mojoExecution, null);}
0cadaa36983eb45133e3675515eb245662bbe2d705135f38d917e996e2ecb847
fire
public void fire(ExecutionEvent.Type eventType, MavenSession session, MojoExecution mojoExecution, Exception exception)
{    ExecutionListener listener = session.getRequest().getExecutionListener();    if (listener != null) {        ExecutionEvent event = new DefaultExecutionEvent(eventType, session, mojoExecution, exception);        switch(eventType) {            case ProjectDiscoveryStarted:                listener.projectDiscoveryStarted(event);                break;            case SessionStarted:                listener.sessionStarted(event);                break;            case SessionEnded:                listener.sessionEnded(event);                break;            case ProjectSkipped:                listener.projectSkipped(event);                break;            case ProjectStarted:                listener.projectStarted(event);                break;            case ProjectSucceeded:                listener.projectSucceeded(event);                break;            case ProjectFailed:                listener.projectFailed(event);                break;            case MojoSkipped:                listener.mojoSkipped(event);                break;            case MojoStarted:                listener.mojoStarted(event);                break;            case MojoSucceeded:                listener.mojoSucceeded(event);                break;            case MojoFailed:                listener.mojoFailed(event);                break;            case ForkStarted:                listener.forkStarted(event);                break;            case ForkSucceeded:                listener.forkSucceeded(event);                break;            case ForkFailed:                listener.forkFailed(event);                break;            case ForkedProjectStarted:                listener.forkedProjectStarted(event);                break;            case ForkedProjectSucceeded:                listener.forkedProjectSucceeded(event);                break;            case ForkedProjectFailed:                listener.forkedProjectFailed(event);                break;            default:                throw new IllegalStateException("Unknown execution event type " + eventType);        }    }}
ec815ac2976b15174d72f7b24ee2f7bcc6d02bff9a3bb60a317acdab4c6e345a
calculateExecutionPlan
public MavenExecutionPlan calculateExecutionPlan(MavenSession session, MavenProject project, List<Object> tasks, boolean setup) throws PluginNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException, PluginDescriptorParsingException, MojoNotFoundException, InvalidPluginDescriptorException, NoPluginFoundForPrefixException, LifecycleNotFoundException, PluginVersionResolutionException
{    lifecyclePluginResolver.resolveMissingPluginVersions(project, session);    final List<MojoExecution> executions = calculateMojoExecutions(session, project, tasks);    if (setup) {        setupMojoExecutions(session, project, executions);    }    final List<ExecutionPlanItem> planItem = ExecutionPlanItem.createExecutionPlanItems(project, executions);    return new MavenExecutionPlan(planItem, defaultLifeCycles);}
78d1eeabb42e26a26ee6670cc46ef6fc8dd7264f3121db30f7dc9b12fa47e759
calculateExecutionPlan
public MavenExecutionPlan calculateExecutionPlan(MavenSession session, MavenProject project, List<Object> tasks) throws PluginNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException, PluginDescriptorParsingException, MojoNotFoundException, InvalidPluginDescriptorException, NoPluginFoundForPrefixException, LifecycleNotFoundException, PluginVersionResolutionException
{    return calculateExecutionPlan(session, project, tasks, true);}
ffcf05026e5ffc5cc4847e07e422da7de9bcea7fa9780e888e63e92dd89e8f99
setupMojoExecutions
private void setupMojoExecutions(MavenSession session, MavenProject project, List<MojoExecution> mojoExecutions) throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, MojoNotFoundException, InvalidPluginDescriptorException, NoPluginFoundForPrefixException, LifecyclePhaseNotFoundException, LifecycleNotFoundException, PluginVersionResolutionException
{    for (MojoExecution mojoExecution : mojoExecutions) {        setupMojoExecution(session, project, mojoExecution);    }}
9515816e6621cdca18b54e25b6e937fd795a94d0dc2cd73ac4a5eb929df1b49c
setupMojoExecution
public void setupMojoExecution(MavenSession session, MavenProject project, MojoExecution mojoExecution) throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, MojoNotFoundException, InvalidPluginDescriptorException, NoPluginFoundForPrefixException, LifecyclePhaseNotFoundException, LifecycleNotFoundException, PluginVersionResolutionException
{    MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();    if (mojoDescriptor == null) {        mojoDescriptor = pluginManager.getMojoDescriptor(mojoExecution.getPlugin(), mojoExecution.getGoal(), project.getRemotePluginRepositories(), session.getRepositorySession());        mojoExecution.setMojoDescriptor(mojoDescriptor);    }    mojoExecutionConfigurator(mojoExecution).configure(project, mojoExecution, MojoExecution.Source.CLI.equals(mojoExecution.getSource()));    finalizeMojoConfiguration(mojoExecution);    calculateForkedExecutions(mojoExecution, session, project, new HashSet<MojoDescriptor>());}
ae6f784e94110129488292995c1cf523f2363824d64d20392acac9f6b8f784e4
calculateMojoExecutions
public List<MojoExecution> calculateMojoExecutions(MavenSession session, MavenProject project, List<Object> tasks) throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, MojoNotFoundException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException, PluginVersionResolutionException, LifecyclePhaseNotFoundException
{    final List<MojoExecution> mojoExecutions = new ArrayList<>();    for (Object task : tasks) {        if (task instanceof GoalTask) {            String pluginGoal = ((GoalTask) task).pluginGoal;            String executionId = "default-cli";            int executionIdx = pluginGoal.indexOf('@');            if (executionIdx > 0) {                executionId = pluginGoal.substring(executionIdx + 1);            }            MojoDescriptor mojoDescriptor = mojoDescriptorCreator.getMojoDescriptor(pluginGoal, session, project);            MojoExecution mojoExecution = new MojoExecution(mojoDescriptor, executionId, MojoExecution.Source.CLI);            mojoExecutions.add(mojoExecution);        } else if (task instanceof LifecycleTask) {            String lifecyclePhase = ((LifecycleTask) task).getLifecyclePhase();            Map<String, List<MojoExecution>> phaseToMojoMapping = calculateLifecycleMappings(session, project, lifecyclePhase);            for (List<MojoExecution> mojoExecutionsFromLifecycle : phaseToMojoMapping.values()) {                mojoExecutions.addAll(mojoExecutionsFromLifecycle);            }        } else {            throw new IllegalStateException("unexpected task " + task);        }    }    return mojoExecutions;}
fc29758a69493a38f62f7085627ac235ff390f8bcd364dad82c6b9e268cfcff3
calculateLifecycleMappings
private Map<String, List<MojoExecution>> calculateLifecycleMappings(MavenSession session, MavenProject project, String lifecyclePhase) throws LifecyclePhaseNotFoundException, PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, MojoNotFoundException, InvalidPluginDescriptorException
{    /*         * Determine the lifecycle that corresponds to the given phase.         */    Lifecycle lifecycle = defaultLifeCycles.get(lifecyclePhase);    if (lifecycle == null) {        throw new LifecyclePhaseNotFoundException("Unknown lifecycle phase \"" + lifecyclePhase + "\". You must specify a valid lifecycle phase" + " or a goal in the format <plugin-prefix>:<goal> or" + " <plugin-group-id>:<plugin-artifact-id>[:<plugin-version>]:<goal>. Available lifecycle phases are: " + defaultLifeCycles.getLifecyclePhaseList() + ".", lifecyclePhase);    }    LifecycleMappingDelegate delegate;    if (Arrays.binarySearch(DefaultLifecycles.STANDARD_LIFECYCLES, lifecycle.getId()) >= 0) {        delegate = standardDelegate;    } else {        delegate = delegates.get(lifecycle.getId());        if (delegate == null) {            delegate = standardDelegate;        }    }    return delegate.calculateLifecycleMappings(session, project, lifecycle, lifecyclePhase);}
3a69e14b5294d9faa306d2444aaa14220d42ceece1d5e8057fdc8227cebd33f9
finalizeMojoConfiguration
private void finalizeMojoConfiguration(MojoExecution mojoExecution)
{    MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();    Xpp3Dom executionConfiguration = mojoExecution.getConfiguration();    if (executionConfiguration == null) {        executionConfiguration = new Xpp3Dom("configuration");    }    Xpp3Dom defaultConfiguration = getMojoConfiguration(mojoDescriptor);    Xpp3Dom finalConfiguration = new Xpp3Dom("configuration");    if (mojoDescriptor.getParameters() != null) {        for (Parameter parameter : mojoDescriptor.getParameters()) {            Xpp3Dom parameterConfiguration = executionConfiguration.getChild(parameter.getName());            if (parameterConfiguration == null) {                parameterConfiguration = executionConfiguration.getChild(parameter.getAlias());            }            Xpp3Dom parameterDefaults = defaultConfiguration.getChild(parameter.getName());            parameterConfiguration = Xpp3Dom.mergeXpp3Dom(parameterConfiguration, parameterDefaults, Boolean.TRUE);            if (parameterConfiguration != null) {                parameterConfiguration = new Xpp3Dom(parameterConfiguration, parameter.getName());                if (StringUtils.isEmpty(parameterConfiguration.getAttribute("implementation")) && StringUtils.isNotEmpty(parameter.getImplementation())) {                    parameterConfiguration.setAttribute("implementation", parameter.getImplementation());                }                finalConfiguration.addChild(parameterConfiguration);            }        }    }    mojoExecution.setConfiguration(finalConfiguration);}
758adffa6650e9df920411ad23cf01951b7c74e23dff0c6d40eb730a0f8880f9
getMojoConfiguration
private Xpp3Dom getMojoConfiguration(MojoDescriptor mojoDescriptor)
{    return MojoDescriptorCreator.convert(mojoDescriptor);}
377d982318368e76c8ae67d6672b31a3a6d8877017a188f5fc6f46fbbb7eaaaf
calculateForkedExecutions
public void calculateForkedExecutions(MojoExecution mojoExecution, MavenSession session) throws MojoNotFoundException, PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException, LifecyclePhaseNotFoundException, LifecycleNotFoundException, PluginVersionResolutionException
{    calculateForkedExecutions(mojoExecution, session, session.getCurrentProject(), new HashSet<MojoDescriptor>());}
e9542c22565b12de1aa5fec737b3c2a24b7888135f71f443472ccf37551271de
calculateForkedExecutions
private void calculateForkedExecutions(MojoExecution mojoExecution, MavenSession session, MavenProject project, Collection<MojoDescriptor> alreadyForkedExecutions) throws MojoNotFoundException, PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException, LifecyclePhaseNotFoundException, LifecycleNotFoundException, PluginVersionResolutionException
{    MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();    if (!mojoDescriptor.isForking()) {        return;    }    if (!alreadyForkedExecutions.add(mojoDescriptor)) {        return;    }    List<MavenProject> forkedProjects = LifecycleDependencyResolver.getProjects(project, session, mojoDescriptor.isAggregator());    for (MavenProject forkedProject : forkedProjects) {        if (forkedProject != project) {            lifecyclePluginResolver.resolveMissingPluginVersions(forkedProject, session);        }        List<MojoExecution> forkedExecutions;        if (StringUtils.isNotEmpty(mojoDescriptor.getExecutePhase())) {            forkedExecutions = calculateForkedLifecycle(mojoExecution, session, forkedProject, alreadyForkedExecutions);        } else {            forkedExecutions = calculateForkedGoal(mojoExecution, session, forkedProject, alreadyForkedExecutions);        }        mojoExecution.setForkedExecutions(BuilderCommon.getKey(forkedProject), forkedExecutions);    }    alreadyForkedExecutions.remove(mojoDescriptor);}
a528152c4aa77e88cf99aafe5ed4e728399138f01e5e90e9aacfdadd0a09f771
calculateForkedLifecycle
private List<MojoExecution> calculateForkedLifecycle(MojoExecution mojoExecution, MavenSession session, MavenProject project, Collection<MojoDescriptor> alreadyForkedExecutions) throws MojoNotFoundException, PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException, LifecyclePhaseNotFoundException, LifecycleNotFoundException, PluginVersionResolutionException
{    MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();    String forkedPhase = mojoDescriptor.getExecutePhase();    Map<String, List<MojoExecution>> lifecycleMappings = calculateLifecycleMappings(session, project, forkedPhase);    for (List<MojoExecution> forkedExecutions : lifecycleMappings.values()) {        for (MojoExecution forkedExecution : forkedExecutions) {            if (forkedExecution.getMojoDescriptor() == null) {                MojoDescriptor forkedMojoDescriptor = pluginManager.getMojoDescriptor(forkedExecution.getPlugin(), forkedExecution.getGoal(), project.getRemotePluginRepositories(), session.getRepositorySession());                forkedExecution.setMojoDescriptor(forkedMojoDescriptor);            }            mojoExecutionConfigurator(forkedExecution).configure(project, forkedExecution, false);        }    }    injectLifecycleOverlay(lifecycleMappings, mojoExecution, session, project);    List<MojoExecution> mojoExecutions = new ArrayList<>();    for (List<MojoExecution> forkedExecutions : lifecycleMappings.values()) {        for (MojoExecution forkedExecution : forkedExecutions) {            if (!alreadyForkedExecutions.contains(forkedExecution.getMojoDescriptor())) {                finalizeMojoConfiguration(forkedExecution);                calculateForkedExecutions(forkedExecution, session, project, alreadyForkedExecutions);                mojoExecutions.add(forkedExecution);            }        }    }    return mojoExecutions;}
d6ecf847a7c4de4e20002f8556533b4c0abd01c5c383cd430fd0afbab1ed293e
injectLifecycleOverlay
private void injectLifecycleOverlay(Map<String, List<MojoExecution>> lifecycleMappings, MojoExecution mojoExecution, MavenSession session, MavenProject project) throws PluginDescriptorParsingException, LifecycleNotFoundException, MojoNotFoundException, PluginNotFoundException, PluginResolutionException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException, PluginVersionResolutionException
{    MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();    PluginDescriptor pluginDescriptor = mojoDescriptor.getPluginDescriptor();    String forkedLifecycle = mojoDescriptor.getExecuteLifecycle();    if (StringUtils.isEmpty(forkedLifecycle)) {        return;    }    org.apache.maven.plugin.lifecycle.Lifecycle lifecycleOverlay;    try {        lifecycleOverlay = pluginDescriptor.getLifecycleMapping(forkedLifecycle);    } catch (IOException | XmlPullParserException e) {        throw new PluginDescriptorParsingException(pluginDescriptor.getPlugin(), pluginDescriptor.getSource(), e);    }    if (lifecycleOverlay == null) {        throw new LifecycleNotFoundException(forkedLifecycle);    }    for (Phase phase : lifecycleOverlay.getPhases()) {        List<MojoExecution> forkedExecutions = lifecycleMappings.get(phase.getId());        if (forkedExecutions != null) {            for (Execution execution : phase.getExecutions()) {                for (String goal : execution.getGoals()) {                    MojoDescriptor forkedMojoDescriptor;                    if (goal.indexOf(':') < 0) {                        forkedMojoDescriptor = pluginDescriptor.getMojo(goal);                        if (forkedMojoDescriptor == null) {                            throw new MojoNotFoundException(goal, pluginDescriptor);                        }                    } else {                        forkedMojoDescriptor = mojoDescriptorCreator.getMojoDescriptor(goal, session, project);                    }                    MojoExecution forkedExecution = new MojoExecution(forkedMojoDescriptor, mojoExecution.getExecutionId());                    Xpp3Dom forkedConfiguration = (Xpp3Dom) execution.getConfiguration();                    forkedExecution.setConfiguration(forkedConfiguration);                    mojoExecutionConfigurator(forkedExecution).configure(project, forkedExecution, true);                    forkedExecutions.add(forkedExecution);                }            }            Xpp3Dom phaseConfiguration = (Xpp3Dom) phase.getConfiguration();            if (phaseConfiguration != null) {                for (MojoExecution forkedExecution : forkedExecutions) {                    Xpp3Dom forkedConfiguration = forkedExecution.getConfiguration();                    forkedConfiguration = Xpp3Dom.mergeXpp3Dom(phaseConfiguration, forkedConfiguration);                    forkedExecution.setConfiguration(forkedConfiguration);                }            }        }    }}
aac0d8aa5d38e6a6bdcf84ce526240775e6bbd0f6b5062412c683a0005820c12
calculateForkedGoal
private List<MojoExecution> calculateForkedGoal(MojoExecution mojoExecution, MavenSession session, MavenProject project, Collection<MojoDescriptor> alreadyForkedExecutions) throws MojoNotFoundException, PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException, LifecyclePhaseNotFoundException, LifecycleNotFoundException, PluginVersionResolutionException
{    MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();    PluginDescriptor pluginDescriptor = mojoDescriptor.getPluginDescriptor();    String forkedGoal = mojoDescriptor.getExecuteGoal();    MojoDescriptor forkedMojoDescriptor = pluginDescriptor.getMojo(forkedGoal);    if (forkedMojoDescriptor == null) {        throw new MojoNotFoundException(forkedGoal, pluginDescriptor);    }    if (alreadyForkedExecutions.contains(forkedMojoDescriptor)) {        return Collections.emptyList();    }    MojoExecution forkedExecution = new MojoExecution(forkedMojoDescriptor, forkedGoal);    mojoExecutionConfigurator(forkedExecution).configure(project, forkedExecution, true);    finalizeMojoConfiguration(forkedExecution);    calculateForkedExecutions(forkedExecution, session, project, alreadyForkedExecutions);    return Collections.singletonList(forkedExecution);}
31bcd243244ab8929e1949e4ce5fef32614d736ca89bdea2f6d29f3e891dbef0
mojoExecutionConfigurator
private MojoExecutionConfigurator mojoExecutionConfigurator(MojoExecution mojoExecution)
{    String configuratorId = mojoExecution.getMojoDescriptor().getComponentConfigurator();    if (configuratorId == null) {        configuratorId = "default";    }    MojoExecutionConfigurator mojoExecutionConfigurator = mojoExecutionConfigurators.get(configuratorId);    if (mojoExecutionConfigurator == null) {                                        mojoExecutionConfigurator = mojoExecutionConfigurators.get("default");    }    return mojoExecutionConfigurator;}
d9c9da1afd4a652d7173dafdcc4fb592535b4cb534c533f3ef7f9113c5185421
calculateLifecycleMappings
public Map<String, List<MojoExecution>> calculateLifecycleMappings(MavenSession session, MavenProject project, Lifecycle lifecycle, String lifecyclePhase) throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, MojoNotFoundException, InvalidPluginDescriptorException
{    /*         * Initialize mapping from lifecycle phase to bound mojos. The key set of this map denotes the phases the caller         * is interested in, i.e. all phases up to and including the specified phase.         */    Map<String, Map<Integer, List<MojoExecution>>> mappings = new LinkedHashMap<>();    for (String phase : lifecycle.getPhases()) {        Map<Integer, List<MojoExecution>> phaseBindings = new TreeMap<>();        mappings.put(phase, phaseBindings);        if (phase.equals(lifecyclePhase)) {            break;        }    }    for (Plugin plugin : project.getBuild().getPlugins()) {        for (PluginExecution execution : plugin.getExecutions()) {                        if (execution.getPhase() != null) {                Map<Integer, List<MojoExecution>> phaseBindings = mappings.get(execution.getPhase());                if (phaseBindings != null) {                    for (String goal : execution.getGoals()) {                        MojoExecution mojoExecution = new MojoExecution(plugin, goal, execution.getId());                        mojoExecution.setLifecyclePhase(execution.getPhase());                        addMojoExecution(phaseBindings, mojoExecution, execution.getPriority());                    }                }            } else             {                for (String goal : execution.getGoals()) {                    MojoDescriptor mojoDescriptor = pluginManager.getMojoDescriptor(plugin, goal, project.getRemotePluginRepositories(), session.getRepositorySession());                    Map<Integer, List<MojoExecution>> phaseBindings = mappings.get(mojoDescriptor.getPhase());                    if (phaseBindings != null) {                        MojoExecution mojoExecution = new MojoExecution(mojoDescriptor, execution.getId());                        mojoExecution.setLifecyclePhase(mojoDescriptor.getPhase());                        addMojoExecution(phaseBindings, mojoExecution, execution.getPriority());                    }                }            }        }    }    Map<String, List<MojoExecution>> lifecycleMappings = new LinkedHashMap<>();    for (Map.Entry<String, Map<Integer, List<MojoExecution>>> entry : mappings.entrySet()) {        List<MojoExecution> mojoExecutions = new ArrayList<>();        for (List<MojoExecution> executions : entry.getValue().values()) {            mojoExecutions.addAll(executions);        }        lifecycleMappings.put(entry.getKey(), mojoExecutions);    }    return lifecycleMappings;}
b5a3c17ecc039f329f501084b55af86ded7dfbcd2d0e1886a76480ebe6d4164d
addMojoExecution
private void addMojoExecution(Map<Integer, List<MojoExecution>> phaseBindings, MojoExecution mojoExecution, int priority)
{    List<MojoExecution> mojoExecutions = phaseBindings.get(priority);    if (mojoExecutions == null) {        mojoExecutions = new ArrayList<>();        phaseBindings.put(priority, mojoExecutions);    }    mojoExecutions.add(mojoExecution);}
afe8893888899b4a1f5ffc4906aebf4423c24f4d95f5e841bac29e33af7cd44d
getPluginsBoundByDefaultToAllLifecycles
public Set<Plugin> getPluginsBoundByDefaultToAllLifecycles(String packaging)
{    if (logger.isDebugEnabled()) {        logger.debug("Looking up lifecycle mappings for packaging " + packaging + " from " + Thread.currentThread().getContextClassLoader());    }    LifecycleMapping lifecycleMappingForPackaging = lifecycleMappings.get(packaging);    if (lifecycleMappingForPackaging == null) {        return null;    }    Map<Plugin, Plugin> plugins = new LinkedHashMap<>();    for (Lifecycle lifecycle : getOrderedLifecycles()) {        org.apache.maven.lifecycle.mapping.Lifecycle lifecycleConfiguration = lifecycleMappingForPackaging.getLifecycles().get(lifecycle.getId());        Map<String, LifecyclePhase> phaseToGoalMapping = null;        if (lifecycleConfiguration != null) {            phaseToGoalMapping = lifecycleConfiguration.getLifecyclePhases();        } else if (lifecycle.getDefaultLifecyclePhases() != null) {            phaseToGoalMapping = lifecycle.getDefaultLifecyclePhases();        }        if (phaseToGoalMapping != null) {            for (Map.Entry<String, LifecyclePhase> goalsForLifecyclePhase : phaseToGoalMapping.entrySet()) {                String phase = goalsForLifecyclePhase.getKey();                LifecyclePhase goals = goalsForLifecyclePhase.getValue();                if (goals != null) {                    parseLifecyclePhaseDefinitions(plugins, phase, goals);                }            }        }    }    return plugins.keySet();}
9903db5c6939d0cbad3234d5a8eb37c93cf0589021420f669ab37c57cc4cc44b
getOrderedLifecycles
private List<Lifecycle> getOrderedLifecycles()
{        List<Lifecycle> lifecycles = new ArrayList<>(defaultLifeCycles.getLifeCycles());    Collections.sort(lifecycles, new Comparator<Lifecycle>() {        public int compare(Lifecycle l1, Lifecycle l2) {            return l1.getId().compareTo(l2.getId());        }    });    return lifecycles;}
b9d4329489193a45f465b7a58e199aa2e8edf6295181962e7b8efa442ae1f466
compare
public int compare(Lifecycle l1, Lifecycle l2)
{    return l1.getId().compareTo(l2.getId());}
2dd4f99771937015b1eeb264cc04a96876fc299a302c89af93a418cc740071bc
parseLifecyclePhaseDefinitions
private void parseLifecyclePhaseDefinitions(Map<Plugin, Plugin> plugins, String phase, LifecyclePhase goals)
{    String modelId = "org.apache.maven:maven-core:" + this.getClass().getPackage().getImplementationVersion() + ":default-lifecycle-bindings";    InputSource inputSource = new InputSource();    inputSource.setModelId(modelId);    InputLocation location = new InputLocation(-1, -1, inputSource);    location.setLocation(0, location);    List<LifecycleMojo> mojos = goals.getMojos();    if (mojos != null) {        for (int i = 0; i < mojos.size(); i++) {            LifecycleMojo mojo = mojos.get(i);            GoalSpec gs = parseGoalSpec(mojo.getGoal());            if (gs == null) {                logger.warn("Ignored invalid goal specification '" + mojo.getGoal() + "' from lifecycle mapping for phase " + phase);                continue;            }            Plugin plugin = new Plugin();            plugin.setGroupId(gs.groupId);            plugin.setArtifactId(gs.artifactId);            plugin.setVersion(gs.version);            plugin.setLocation("", location);            plugin.setLocation("groupId", location);            plugin.setLocation("artifactId", location);            plugin.setLocation("version", location);            Plugin existing = plugins.get(plugin);            if (existing != null) {                if (existing.getVersion() == null) {                    existing.setVersion(plugin.getVersion());                    existing.setLocation("version", location);                }                plugin = existing;            } else {                plugins.put(plugin, plugin);            }            PluginExecution execution = new PluginExecution();            execution.setId(getExecutionId(plugin, gs.goal));            execution.setPhase(phase);            execution.setPriority(i - mojos.size());            execution.getGoals().add(gs.goal);            execution.setLocation("", location);            execution.setLocation("id", location);            execution.setLocation("phase", location);            execution.setLocation("goals", location);            Xpp3Dom lifecycleConfiguration = mojo.getConfiguration();            if (lifecycleConfiguration != null) {                execution.setConfiguration(new Xpp3Dom(lifecycleConfiguration));            }            plugin.setDependencies(mojo.getDependencies());            plugin.getExecutions().add(execution);        }    }}
b9923828e92257c03dfa23cdb45953dc960db63a4796e468b168388462b6b8d8
parseGoalSpec
private GoalSpec parseGoalSpec(String goalSpec)
{    GoalSpec gs = new GoalSpec();    String[] p = StringUtils.split(goalSpec.trim(), ":");    if (p.length == 3) {                gs.groupId = p[0];        gs.artifactId = p[1];        gs.goal = p[2];    } else if (p.length == 4) {                gs.groupId = p[0];        gs.artifactId = p[1];        gs.version = p[2];        gs.goal = p[3];    } else {                gs = null;    }    return gs;}
9c4ddc2e6828d3349b9aac6882367a46f0aef2af84c9bfd05738bfa6763b371b
getExecutionId
private String getExecutionId(Plugin plugin, String goal)
{    Set<String> existingIds = new HashSet<>();    for (PluginExecution execution : plugin.getExecutions()) {        existingIds.add(execution.getId());    }    String base = "default-" + goal;    String id = base;    for (int index = 1; existingIds.contains(id); index++) {        id = base + '-' + index;    }    return id;}
48a11dab67efdff4bc8844b58c594428caa80c288acfb0b348600411dcbf8db2
calculateTaskSegments
public List<TaskSegment> calculateTaskSegments(MavenSession session) throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, MojoNotFoundException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException, PluginVersionResolutionException, LifecyclePhaseNotFoundException, LifecycleNotFoundException
{    MavenProject rootProject = session.getTopLevelProject();    List<String> tasks = session.getGoals();    if ((tasks == null || tasks.isEmpty()) && !StringUtils.isEmpty(rootProject.getDefaultGoal())) {        tasks = Arrays.asList(StringUtils.split(rootProject.getDefaultGoal()));    }    return calculateTaskSegments(session, tasks);}
c69463c29e15fb65c78f90742761cb0c5522e8c5ac36db4f7ea3914502b6091c
calculateTaskSegments
public List<TaskSegment> calculateTaskSegments(MavenSession session, List<String> tasks) throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, MojoNotFoundException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException, PluginVersionResolutionException
{    List<TaskSegment> taskSegments = new ArrayList<>(tasks.size());    TaskSegment currentSegment = null;    for (String task : tasks) {        if (isGoalSpecification(task)) {                        lifecyclePluginResolver.resolveMissingPluginVersions(session.getTopLevelProject(), session);            MojoDescriptor mojoDescriptor = mojoDescriptorCreator.getMojoDescriptor(task, session, session.getTopLevelProject());            boolean aggregating = mojoDescriptor.isAggregator() || !mojoDescriptor.isProjectRequired();            if (currentSegment == null || currentSegment.isAggregating() != aggregating) {                currentSegment = new TaskSegment(aggregating);                taskSegments.add(currentSegment);            }            currentSegment.getTasks().add(new GoalTask(task));        } else {            if (currentSegment == null || currentSegment.isAggregating()) {                currentSegment = new TaskSegment(false);                taskSegments.add(currentSegment);            }            currentSegment.getTasks().add(new LifecycleTask(task));        }    }    return taskSegments;}
ac2d74d662a3cf5b718d4f781ae858904c3f6bd8e66edfdd5c384120f044e98b
requiresProject
public boolean requiresProject(MavenSession session)
{    List<String> goals = session.getGoals();    if (goals != null) {        for (String goal : goals) {            if (!isGoalSpecification(goal)) {                return true;            }        }    }    return false;}
a7c39a6783f6d562985a9e96d542f8611e2804c18011b127238b509e16d26a03
isGoalSpecification
private boolean isGoalSpecification(String task)
{    return task.indexOf(':') >= 0;}
ba9615f7ec92da31ac44c37c96d099158565791120c2ac7fdd7d33c938e91c45
configure
public void configure(MavenProject project, MojoExecution mojoExecution, boolean allowPluginLevelConfig)
{    String g = mojoExecution.getGroupId();    String a = mojoExecution.getArtifactId();    Plugin plugin = findPlugin(g, a, project.getBuildPlugins());    if (plugin == null && project.getPluginManagement() != null) {        plugin = findPlugin(g, a, project.getPluginManagement().getPlugins());    }    if (plugin != null) {        PluginExecution pluginExecution = findPluginExecution(mojoExecution.getExecutionId(), plugin.getExecutions());        Xpp3Dom pomConfiguration = null;        if (pluginExecution != null) {            pomConfiguration = (Xpp3Dom) pluginExecution.getConfiguration();        } else if (allowPluginLevelConfig) {            pomConfiguration = (Xpp3Dom) plugin.getConfiguration();        }        Xpp3Dom mojoConfiguration = (pomConfiguration != null) ? new Xpp3Dom(pomConfiguration) : null;        mojoConfiguration = Xpp3Dom.mergeXpp3Dom(mojoExecution.getConfiguration(), mojoConfiguration);        mojoExecution.setConfiguration(mojoConfiguration);    }}
07d00957bd52c23ac4213188fce50625cace49bdfc37a303476c2dd70bcbb316
findPlugin
private Plugin findPlugin(String groupId, String artifactId, Collection<Plugin> plugins)
{    for (Plugin plugin : plugins) {        if (artifactId.equals(plugin.getArtifactId()) && groupId.equals(plugin.getGroupId())) {            return plugin;        }    }    return null;}
bb526d049d7fb30b1bad903fc506f9446306508de0280facf50070afe09e8d7a
findPluginExecution
private PluginExecution findPluginExecution(String executionId, Collection<PluginExecution> executions)
{    if (StringUtils.isNotEmpty(executionId)) {        for (PluginExecution execution : executions) {            if (executionId.equals(execution.getId())) {                return execution;            }        }    }    return null;}
235bd54ce67f1e0ec2b0fe0112693df131bb86f29ecc8ace6dded86a38abf132
createArtifacts
public Set<Artifact> createArtifacts(MavenProject project) throws InvalidDependencyVersionException
{    return MavenMetadataSource.createArtifacts(artifactFactory, project.getDependencies(), null, null, project);}
cdcc47ed1eccb5aa7ba2aa1d33b327142be7cbcc16c1cff19fde28a6b8e02541
getProject
public MavenProject getProject()
{    return project;}
a527ade02adb6dcb03d95662431c29611d32050aaf0966b27e36e6c416fa1067
getScopesToCollectForCurrentProject
public Collection<String> getScopesToCollectForCurrentProject()
{    return scopesToCollectForCurrentProject;}
4a645420ef47e86ce5c30411edf209333fbd55a5c8f11728a953e43df0d8146a
getScopesToResolveForCurrentProject
public Collection<String> getScopesToResolveForCurrentProject()
{    return scopesToResolveForCurrentProject;}
9795c4765a5bf50100aa04fb09e68867cd5c8786729a1b420d1366a8238e373a
getScopesToCollectForAggregatedProjects
public Collection<String> getScopesToCollectForAggregatedProjects()
{    return scopesToCollectForAggregatedProjects;}
0126d4bda76cb075c906b73963cd15428a8074132a08a879aa3d5fbc8e83ea3f
getScopesToResolveForAggregatedProjects
public Collection<String> getScopesToResolveForAggregatedProjects()
{    return scopesToResolveForAggregatedProjects;}
43fd1cae6cc44d37d8995fc1971c530e34d0a4224771315d7af99503949ba22c
isResolutionRequiredForCurrentProject
public boolean isResolutionRequiredForCurrentProject()
{    return lastDependencyArtifacts != project.getDependencyArtifacts() || (lastDependencyArtifacts != null && lastDependencyArtifactCount != lastDependencyArtifacts.size());}
fb461a4a86730efada650e8c99a318e5f6f0b7a94ed7aaa3ba298eb1aba411f6
isResolutionRequiredForAggregatedProjects
public boolean isResolutionRequiredForAggregatedProjects(Collection<String> scopesToCollect, Collection<String> scopesToResolve)
{    boolean required = scopesToCollectForAggregatedProjects.addAll(scopesToCollect) || scopesToResolveForAggregatedProjects.addAll(scopesToResolve);    return required;}
a1dcd8fa543958ff8df492e5da19abe3ec6f0c62b69536aa5e2a54178028dcc7
synchronizeWithProjectState
public void synchronizeWithProjectState()
{    lastDependencyArtifacts = project.getDependencyArtifacts();    lastDependencyArtifactCount = (lastDependencyArtifacts != null) ? lastDependencyArtifacts.size() : 0;}
cff0fa61e1b1d2d13abb65cd1a37c909b6df83351e24870f21b7bf567e63e853
createExecutionPlanItems
public static List<ExecutionPlanItem> createExecutionPlanItems(MavenProject mavenProject, List<MojoExecution> executions)
{    BuilderCommon.attachToThread(mavenProject);    List<ExecutionPlanItem> result = new ArrayList<>();    for (MojoExecution mojoExecution : executions) {        result.add(new ExecutionPlanItem(mojoExecution));    }    return result;}
eb3a794f903f1ffc54f022291e7e753bb36cbee3f248989f4273a4089ec2eecd
getMojoExecution
public MojoExecution getMojoExecution()
{    return mojoExecution;}
c5459e09ea51fe5334ba77c3873afa66f0e20095ce1e03fce19a75fef76bee5d
getLifecyclePhase
public String getLifecyclePhase()
{    return mojoExecution.getLifecyclePhase();}
73b43cf9677adc9b3dcd547ea67954af9521f47fc5ca326c40bf0c5890ba2d96
getPlugin
public Plugin getPlugin()
{    final MojoDescriptor mojoDescriptor = getMojoExecution().getMojoDescriptor();    return mojoDescriptor.getPluginDescriptor().getPlugin();}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return "ExecutionPlanItem{" + ", mojoExecution=" + mojoExecution + '}' + super.toString();}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return pluginGoal;}
31ed0b24b44f9832c686630301d8a00f3fc4836a43d95b2144ee1f11240990f8
debug
public void debug(String s)
{    logger.debug(s);}
66a9062e6de37c9182ba454596a06e931514361f5755d4433b602311687e37b3
info
public void info(String s)
{    logger.info(s);}
1f069ef70ccbef7da82234acf9e35ff00103e4b17fb6e62d3c7c8f36390b226e
debugReactorPlan
public void debugReactorPlan(ProjectBuildList projectBuilds)
{    if (!logger.isDebugEnabled()) {        return;    }    logger.debug("=== REACTOR BUILD PLAN ================================================");    for (Iterator<ProjectSegment> it = projectBuilds.iterator(); it.hasNext(); ) {        ProjectSegment projectBuild = it.next();        logger.debug("Project: " + projectBuild.getProject().getId());        logger.debug("Tasks:   " + projectBuild.getTaskSegment().getTasks());        logger.debug("Style:   " + (projectBuild.getTaskSegment().isAggregating() ? "Aggregating" : "Regular"));        if (it.hasNext()) {            logger.debug("-----------------------------------------------------------------------");        }    }    logger.debug("=======================================================================");}
977f23bdd4d6ba0ae0b54be4ac6b233f89d703648a692d8e7833f1dc7dd02d95
debugProjectPlan
public void debugProjectPlan(MavenProject currentProject, MavenExecutionPlan executionPlan)
{    if (!logger.isDebugEnabled()) {        return;    }    logger.debug("=== PROJECT BUILD PLAN ================================================");    logger.debug("Project:       " + BuilderCommon.getKey(currentProject));    debugDependencyRequirements(executionPlan.getMojoExecutions());    logger.debug("Repositories (dependencies): " + currentProject.getRemoteProjectRepositories());    logger.debug("Repositories (plugins)     : " + currentProject.getRemotePluginRepositories());    for (ExecutionPlanItem mojoExecution : executionPlan) {        debugMojoExecution(mojoExecution.getMojoExecution());    }    logger.debug("=======================================================================");}
fa1980f4b4c4a7e10cb424e69fb6c2dedd21c1f81bc89b01dd8dfd2dfe5431ff
debugMojoExecution
private void debugMojoExecution(MojoExecution mojoExecution)
{    String mojoExecId = mojoExecution.getGroupId() + ':' + mojoExecution.getArtifactId() + ':' + mojoExecution.getVersion() + ':' + mojoExecution.getGoal() + " (" + mojoExecution.getExecutionId() + ')';    Map<String, List<MojoExecution>> forkedExecutions = mojoExecution.getForkedExecutions();    if (!forkedExecutions.isEmpty()) {        for (Map.Entry<String, List<MojoExecution>> fork : forkedExecutions.entrySet()) {            logger.debug("--- init fork of " + fork.getKey() + " for " + mojoExecId + " ---");            debugDependencyRequirements(fork.getValue());            for (MojoExecution forkedExecution : fork.getValue()) {                debugMojoExecution(forkedExecution);            }            logger.debug("--- exit fork of " + fork.getKey() + " for " + mojoExecId + " ---");        }    }    logger.debug("-----------------------------------------------------------------------");    logger.debug("Goal:          " + mojoExecId);    logger.debug("Style:         " + (mojoExecution.getMojoDescriptor().isAggregator() ? "Aggregating" : "Regular"));    logger.debug("Configuration: " + mojoExecution.getConfiguration());}
ba038aca8a2ecd41debe7c53504666d662eed0232055fe570e79608795d31a68
debugDependencyRequirements
private void debugDependencyRequirements(List<MojoExecution> mojoExecutions)
{    Set<String> scopesToCollect = new TreeSet<>();    Set<String> scopesToResolve = new TreeSet<>();    for (MojoExecution mojoExecution : mojoExecutions) {        MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();        String scopeToCollect = mojoDescriptor.getDependencyCollectionRequired();        if (StringUtils.isNotEmpty(scopeToCollect)) {            scopesToCollect.add(scopeToCollect);        }        String scopeToResolve = mojoDescriptor.getDependencyResolutionRequired();        if (StringUtils.isNotEmpty(scopeToResolve)) {            scopesToResolve.add(scopeToResolve);        }    }    logger.debug("Dependencies (collect): " + scopesToCollect);    logger.debug("Dependencies (resolve): " + scopesToResolve);}
d71362efc0dca53dbc1f3ff9de70dd5ece48351180a76ef636928848b749f073
getProjects
public static List<MavenProject> getProjects(MavenProject project, MavenSession session, boolean aggregator)
{    if (aggregator) {        return session.getProjects();    } else {        return Collections.singletonList(project);    }}
c1f9aa24823af94623644d690fa99e4415e8223b18a2bce945bf516271b0c795
resolveProjectDependencies
public void resolveProjectDependencies(MavenProject project, Collection<String> scopesToCollect, Collection<String> scopesToResolve, MavenSession session, boolean aggregating, Set<Artifact> projectArtifacts) throws LifecycleExecutionException
{    ClassLoader tccl = Thread.currentThread().getContextClassLoader();    try {        ClassLoader projectRealm = project.getClassRealm();        if (projectRealm != null && projectRealm != tccl) {            Thread.currentThread().setContextClassLoader(projectRealm);        }        if (project.getDependencyArtifacts() == null) {            try {                project.setDependencyArtifacts(artifactFactory.createArtifacts(project));            } catch (InvalidDependencyVersionException e) {                throw new LifecycleExecutionException(e);            }        }        Set<Artifact> resolvedArtifacts;        ProjectArtifactsCache.Key cacheKey = projectArtifactsCache.createKey(project, scopesToCollect, scopesToResolve, aggregating, session.getRepositorySession());        ProjectArtifactsCache.CacheRecord recordArtifacts;        recordArtifacts = projectArtifactsCache.get(cacheKey);        if (recordArtifacts != null) {            resolvedArtifacts = recordArtifacts.getArtifacts();        } else {            try {                resolvedArtifacts = getDependencies(project, scopesToCollect, scopesToResolve, session, aggregating, projectArtifacts);                recordArtifacts = projectArtifactsCache.put(cacheKey, resolvedArtifacts);            } catch (LifecycleExecutionException e) {                projectArtifactsCache.put(cacheKey, e);                projectArtifactsCache.register(project, cacheKey, recordArtifacts);                throw e;            }        }        projectArtifactsCache.register(project, cacheKey, recordArtifacts);        Map<Artifact, File> reactorProjects = new HashMap<>(session.getProjects().size());        for (MavenProject reactorProject : session.getProjects()) {            reactorProjects.put(reactorProject.getArtifact(), reactorProject.getArtifact().getFile());        }        Map<String, Artifact> map = new HashMap<>();        for (Artifact artifact : resolvedArtifacts) {            /**             * MNG-6300: resolvedArtifacts can be cache result; this ensures reactor files are always up to date             * During lifecycle the Artifact.getFile() can change from target/classes to the actual jar.             * This clearly shows that target/classes should not be abused as artifactFile just for the classpath             */            File reactorProjectFile = reactorProjects.get(artifact);            if (reactorProjectFile != null) {                artifact.setFile(reactorProjectFile);            }            map.put(artifact.getDependencyConflictId(), artifact);        }        project.setResolvedArtifacts(resolvedArtifacts);        for (Artifact artifact : project.getDependencyArtifacts()) {            if (artifact.getFile() == null) {                Artifact resolved = map.get(artifact.getDependencyConflictId());                if (resolved != null) {                    artifact.setFile(resolved.getFile());                    artifact.setDependencyTrail(resolved.getDependencyTrail());                    artifact.setResolvedVersion(resolved.getVersion());                    artifact.setResolved(true);                }            }        }    } finally {        Thread.currentThread().setContextClassLoader(tccl);    }}
ebc8cce1adee072cf69e4e6a9d42bb2f141de2532f22fd3528e3d3d80bffd482
getDependencies
private Set<Artifact> getDependencies(MavenProject project, Collection<String> scopesToCollect, Collection<String> scopesToResolve, MavenSession session, boolean aggregating, Set<Artifact> projectArtifacts) throws LifecycleExecutionException
{    if (scopesToCollect == null) {        scopesToCollect = Collections.emptySet();    }    if (scopesToResolve == null) {        scopesToResolve = Collections.emptySet();    }    if (scopesToCollect.isEmpty() && scopesToResolve.isEmpty()) {        return new LinkedHashSet<>();    }    scopesToCollect = new HashSet<>(scopesToCollect);    scopesToCollect.addAll(scopesToResolve);    DependencyFilter collectionFilter = new ScopeDependencyFilter(null, negate(scopesToCollect));    DependencyFilter resolutionFilter = new ScopeDependencyFilter(null, negate(scopesToResolve));    resolutionFilter = AndDependencyFilter.newInstance(collectionFilter, resolutionFilter);    resolutionFilter = AndDependencyFilter.newInstance(resolutionFilter, new ReactorDependencyFilter(projectArtifacts));    DependencyResolutionResult result;    try {        DefaultDependencyResolutionRequest request = new DefaultDependencyResolutionRequest(project, session.getRepositorySession());        request.setResolutionFilter(resolutionFilter);        eventSpyDispatcher.onEvent(request);        result = dependenciesResolver.resolve(request);    } catch (DependencyResolutionException e) {        result = e.getResult();        /*             * MNG-2277, the check below compensates for our bad plugin support where we ended up with aggregator             * plugins that require dependency resolution although they usually run in phases of the build where project             * artifacts haven't been assembled yet. The prime example of this is "mvn release:prepare".             */        if (aggregating && areAllDependenciesInReactor(session.getProjects(), result.getUnresolvedDependencies())) {            logger.warn("The following dependencies could not be resolved at this point of the build" + " but seem to be part of the reactor:");            for (Dependency dependency : result.getUnresolvedDependencies()) {                logger.warn("o " + dependency);            }            logger.warn("Try running the build up to the lifecycle phase \"package\"");        } else {            throw new LifecycleExecutionException(null, project, e);        }    }    eventSpyDispatcher.onEvent(result);    Set<Artifact> artifacts = new LinkedHashSet<>();    if (result.getDependencyGraph() != null && !result.getDependencyGraph().getChildren().isEmpty()) {        RepositoryUtils.toArtifacts(artifacts, result.getDependencyGraph().getChildren(), Collections.singletonList(project.getArtifact().getId()), collectionFilter);    }    return artifacts;}
0d1bce3efaa359ee58ef19832f72cbbb3a17a7843b306ac4c5f20824ee750ecc
areAllDependenciesInReactor
private boolean areAllDependenciesInReactor(Collection<MavenProject> projects, Collection<Dependency> dependencies)
{    Set<String> projectKeys = getReactorProjectKeys(projects);    for (Dependency dependency : dependencies) {        org.eclipse.aether.artifact.Artifact a = dependency.getArtifact();        String key = ArtifactUtils.key(a.getGroupId(), a.getArtifactId(), a.getVersion());        if (!projectKeys.contains(key)) {            return false;        }    }    return true;}
0874c4aae9e4552cd24b73d24ae5d2074a1c5fab7e83d2d642b29375152a43a0
getReactorProjectKeys
private Set<String> getReactorProjectKeys(Collection<MavenProject> projects)
{    Set<String> projectKeys = new HashSet<>(projects.size() * 2);    for (MavenProject project : projects) {        String key = ArtifactUtils.key(project.getGroupId(), project.getArtifactId(), project.getVersion());        projectKeys.add(key);    }    return projectKeys;}
f3148acfddf1b006472fad7be108a4bc9c3f4048b141174ff777baea0dff4f20
negate
private Collection<String> negate(Collection<String> scopes)
{    Collection<String> result = new HashSet<>();    Collections.addAll(result, "system", "compile", "provided", "runtime", "test");    for (String scope : scopes) {        if ("compile".equals(scope)) {            result.remove("compile");            result.remove("system");            result.remove("provided");        } else if ("runtime".equals(scope)) {            result.remove("compile");            result.remove("runtime");        } else if ("compile+runtime".equals(scope)) {            result.remove("compile");            result.remove("system");            result.remove("provided");            result.remove("runtime");        } else if ("runtime+system".equals(scope)) {            result.remove("compile");            result.remove("system");            result.remove("runtime");        } else if ("test".equals(scope)) {            result.clear();        }    }    return result;}
d0f7bff15962e491dd169be32db4bb15da3e44006bb58db2d261510b057806eb
accept
public boolean accept(DependencyNode node, List<DependencyNode> parents)
{    Dependency dependency = node.getDependency();    if (dependency != null) {        org.eclipse.aether.artifact.Artifact a = dependency.getArtifact();        String key = ArtifactUtils.key(a.getGroupId(), a.getArtifactId(), a.getVersion());        return !keys.contains(key);    }    return false;}
d4cd4af30097e7f87eccda9e734383fbb82ef0c092d1f9ae53bda6b32bed7204
setProjectExecutionListeners
public void setProjectExecutionListeners(final List<ProjectExecutionListener> listeners)
{    this.projectExecutionListeners = listeners;    this.projectExecutionListener = new CompoundProjectExecutionListener(listeners);}
d1a9706ea4210729323609d9788d37d77a1ed35f13b72598803c0324dfeed956
buildProject
public void buildProject(MavenSession session, ReactorContext reactorContext, MavenProject currentProject, TaskSegment taskSegment)
{    buildProject(session, session, reactorContext, currentProject, taskSegment);}
c0674a4d24c64a34170dadd6543d11aa8701ad38d3fa37271c981aab9ad328c1
buildProject
public void buildProject(MavenSession session, MavenSession rootSession, ReactorContext reactorContext, MavenProject currentProject, TaskSegment taskSegment)
{    session.setCurrentProject(currentProject);    long buildStartTime = System.currentTimeMillis();            sessionScope.enter(reactorContext.getSessionScopeMemento());    sessionScope.seed(MavenSession.class, session);    try {        if (reactorContext.getReactorBuildStatus().isHaltedOrBlacklisted(currentProject)) {            eventCatapult.fire(ExecutionEvent.Type.ProjectSkipped, session, null);            return;        }        BuilderCommon.attachToThread(currentProject);        projectExecutionListener.beforeProjectExecution(new ProjectExecutionEvent(session, currentProject));        eventCatapult.fire(ExecutionEvent.Type.ProjectStarted, session, null);        MavenExecutionPlan executionPlan = builderCommon.resolveBuildPlan(session, currentProject, taskSegment, new HashSet<Artifact>());        List<MojoExecution> mojoExecutions = executionPlan.getMojoExecutions();        projectExecutionListener.beforeProjectLifecycleExecution(new ProjectExecutionEvent(session, currentProject, mojoExecutions));        mojoExecutor.execute(session, mojoExecutions, reactorContext.getProjectIndex());        long buildEndTime = System.currentTimeMillis();        projectExecutionListener.afterProjectExecutionSuccess(new ProjectExecutionEvent(session, currentProject, mojoExecutions));        reactorContext.getResult().addBuildSummary(new BuildSuccess(currentProject, buildEndTime - buildStartTime));        eventCatapult.fire(ExecutionEvent.Type.ProjectSucceeded, session, null);    } catch (Throwable t) {        builderCommon.handleBuildError(reactorContext, rootSession, session, currentProject, t, buildStartTime);        projectExecutionListener.afterProjectExecutionFailure(new ProjectExecutionEvent(session, currentProject, t));                if (t instanceof RuntimeException) {            throw (RuntimeException) t;        }        if (t instanceof Error) {            throw (Error) t;        }    } finally {        sessionScope.exit();        session.setCurrentProject(null);        Thread.currentThread().setContextClassLoader(reactorContext.getOriginalContextClassLoader());    }}
08502478bfdb1e85dbc253068018c596532ba9708776b58dd15b366b8fe00469
resolveMissingPluginVersions
public void resolveMissingPluginVersions(MavenProject project, MavenSession session) throws PluginVersionResolutionException
{    Map<String, String> versions = new HashMap<>(64);    for (Plugin plugin : project.getBuildPlugins()) {        if (plugin.getVersion() == null) {            PluginVersionRequest request = new DefaultPluginVersionRequest(plugin, session.getRepositorySession(), project.getRemotePluginRepositories());            plugin.setVersion(pluginVersionResolver.resolve(request).getVersion());        }        versions.put(plugin.getKey(), plugin.getVersion());    }    PluginManagement pluginManagement = project.getPluginManagement();    if (pluginManagement != null) {        for (Plugin plugin : pluginManagement.getPlugins()) {            if (plugin.getVersion() == null) {                plugin.setVersion(versions.get(plugin.getKey()));                if (plugin.getVersion() == null) {                    PluginVersionRequest request = new DefaultPluginVersionRequest(plugin, session.getRepositorySession(), project.getRemotePluginRepositories());                    plugin.setVersion(pluginVersionResolver.resolve(request).getVersion());                }            }        }    }}
67a6621c76d8c6bf6535ac8e9711527e7b493a85bf0ba75fb5bbbe482fe8d8e7
execute
public void execute(MavenSession session)
{    eventCatapult.fire(ExecutionEvent.Type.SessionStarted, session, null);    ReactorContext reactorContext = null;    ProjectBuildList projectBuilds = null;    MavenExecutionResult result = session.getResult();    try {        if (buildExecutionRequiresProject(session) && projectIsNotPresent(session)) {            throw new MissingProjectException("The goal you specified requires a project to execute" + " but there is no POM in this directory (" + session.getExecutionRootDirectory() + ")." + " Please verify you invoked Maven from the correct directory.");        }        List<TaskSegment> taskSegments = lifecycleTaskSegmentCalculator.calculateTaskSegments(session);        projectBuilds = buildListCalculator.calculateProjectBuilds(session, taskSegments);        if (projectBuilds.isEmpty()) {            throw new NoGoalSpecifiedException("No goals have been specified for this build." + " You must specify a valid lifecycle phase or a goal in the format <plugin-prefix>:<goal> or" + " <plugin-group-id>:<plugin-artifact-id>[:<plugin-version>]:<goal>." + " Available lifecycle phases are: " + defaultLifeCycles.getLifecyclePhaseList() + ".");        }        ProjectIndex projectIndex = new ProjectIndex(session.getProjects());        if (logger.isDebugEnabled()) {            lifecycleDebugLogger.debugReactorPlan(projectBuilds);        }        ClassLoader oldContextClassLoader = Thread.currentThread().getContextClassLoader();        ReactorBuildStatus reactorBuildStatus = new ReactorBuildStatus(session.getProjectDependencyGraph());        reactorContext = new ReactorContext(result, projectIndex, oldContextClassLoader, reactorBuildStatus, sessionScope.memento());        String builderId = session.getRequest().getBuilderId();        Builder builder = builders.get(builderId);        if (builder == null) {            throw new BuilderNotFoundException(String.format("The builder requested using id = %s cannot be" + " found", builderId));        }        int degreeOfConcurrency = session.getRequest().getDegreeOfConcurrency();        if (degreeOfConcurrency >= 2) {            logger.info("");            logger.info(String.format("Using the %s implementation with a thread count of %d", builder.getClass().getSimpleName(), degreeOfConcurrency));        }        builder.build(session, reactorContext, projectBuilds, taskSegments, reactorBuildStatus);    } catch (Exception e) {        result.addException(e);    } finally {        eventCatapult.fire(ExecutionEvent.Type.SessionEnded, session, null);    }}
1a5f21b2cd9e3c6d36a9f77378cdfbb77ea87e36b6a0c8e61b14ff745cedf5d1
buildExecutionRequiresProject
private boolean buildExecutionRequiresProject(MavenSession session)
{    return lifecycleTaskSegmentCalculator.requiresProject(session);}
39344d2ac1b9ad47fd13295443ea44c10e3a25a0a2e009c2568d2e69ac801f48
projectIsNotPresent
private boolean projectIsNotPresent(MavenSession session)
{    return !session.getRequest().isProjectPresent();}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return getLifecyclePhase();}
c5459e09ea51fe5334ba77c3873afa66f0e20095ce1e03fce19a75fef76bee5d
getLifecyclePhase
public String getLifecyclePhase()
{    return lifecyclePhase;}
07d00957bd52c23ac4213188fce50625cace49bdfc37a303476c2dd70bcbb316
findPlugin
private Plugin findPlugin(String groupId, String artifactId, Collection<Plugin> plugins)
{    for (Plugin plugin : plugins) {        if (artifactId.equals(plugin.getArtifactId()) && groupId.equals(plugin.getGroupId())) {            return plugin;        }    }    return null;}
2c37bf79e3c17fdc0fa4eb6783997a9e63feb76a568b6ff6d4c5f42016c30ee5
convert
public static Xpp3Dom convert(MojoDescriptor mojoDescriptor)
{    Xpp3Dom dom = new Xpp3Dom("configuration");    PlexusConfiguration c = mojoDescriptor.getMojoConfiguration();    PlexusConfiguration[] ces = c.getChildren();    if (ces != null) {        for (PlexusConfiguration ce : ces) {            String value = ce.getValue(null);            String defaultValue = ce.getAttribute("default-value", null);            if (value != null || defaultValue != null) {                Xpp3Dom e = new Xpp3Dom(ce.getName());                e.setValue(value);                if (defaultValue != null) {                    e.setAttribute("default-value", defaultValue);                }                dom.addChild(e);            }        }    }    return dom;}
f9d7e62be269e0fd92b4a72fc5286fabc8a852b41592074138ea2b821be24960
getMojoDescriptor
public MojoDescriptor getMojoDescriptor(String task, MavenSession session, MavenProject project) throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, MojoNotFoundException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException, PluginVersionResolutionException
{    String goal = null;    Plugin plugin = null;    StringTokenizer tok = new StringTokenizer(task, ":");    int numTokens = tok.countTokens();    if (numTokens >= 4) {                                                                                plugin = new Plugin();        plugin.setGroupId(tok.nextToken());        plugin.setArtifactId(tok.nextToken());        plugin.setVersion(tok.nextToken());        goal = tok.nextToken();                while (tok.hasMoreTokens()) {            goal += ":" + tok.nextToken();        }    } else if (numTokens == 3) {                                                                                plugin = new Plugin();        plugin.setGroupId(tok.nextToken());        plugin.setArtifactId(tok.nextToken());        goal = tok.nextToken();    } else if (numTokens <= 2) {                                        String prefix = tok.nextToken();        if (numTokens == 2) {            goal = tok.nextToken();        } else {                        goal = "";        }                                                                        plugin = findPluginForPrefix(prefix, session);    }    int executionIdx = goal.indexOf('@');    if (executionIdx > 0) {        goal = goal.substring(0, executionIdx);    }    injectPluginDeclarationFromProject(plugin, project);        if (plugin.getVersion() == null) {        resolvePluginVersion(plugin, session, project);    }    return pluginManager.getMojoDescriptor(plugin, goal, project.getRemotePluginRepositories(), session.getRepositorySession());}
171cba05d9593b1558755d6c3c75da9217258210df8d8fac5fa4309ccef582de
findPluginForPrefix
public Plugin findPluginForPrefix(String prefix, MavenSession session) throws NoPluginFoundForPrefixException
{    if (session.getCurrentProject() != null) {        try {            lifecyclePluginResolver.resolveMissingPluginVersions(session.getCurrentProject(), session);        } catch (PluginVersionResolutionException e) {                        logger.debug(e.getMessage(), e);        }    }    PluginPrefixRequest prefixRequest = new DefaultPluginPrefixRequest(prefix, session);    PluginPrefixResult prefixResult = pluginPrefixResolver.resolve(prefixRequest);    Plugin plugin = new Plugin();    plugin.setGroupId(prefixResult.getGroupId());    plugin.setArtifactId(prefixResult.getArtifactId());    return plugin;}
59059aa618293778455a0ba52290ca154fc0406a4960e3bf571138240eeae354
resolvePluginVersion
private void resolvePluginVersion(Plugin plugin, MavenSession session, MavenProject project) throws PluginVersionResolutionException
{    PluginVersionRequest versionRequest = new DefaultPluginVersionRequest(plugin, session.getRepositorySession(), project.getRemotePluginRepositories());    plugin.setVersion(pluginVersionResolver.resolve(versionRequest).getVersion());}
eac07745401757764b211a6c6f83a1a6420500236075b711750d261039f522ca
injectPluginDeclarationFromProject
private void injectPluginDeclarationFromProject(Plugin plugin, MavenProject project)
{    Plugin pluginInPom = findPlugin(plugin, project.getBuildPlugins());    if (pluginInPom == null && project.getPluginManagement() != null) {        pluginInPom = findPlugin(plugin, project.getPluginManagement().getPlugins());    }    if (pluginInPom != null) {        if (plugin.getVersion() == null) {            plugin.setVersion(pluginInPom.getVersion());        }        plugin.setDependencies(new ArrayList<>(pluginInPom.getDependencies()));    }}
9d073342ef6606aabccc3bd56e0e6809d2f4106b28dac38f21c9482872ae23f5
findPlugin
private Plugin findPlugin(Plugin plugin, Collection<Plugin> plugins)
{    return findPlugin(plugin.getGroupId(), plugin.getArtifactId(), plugins);}
f940d1f0cfdaed8d9abab16a671d4ab2ed6c31125e062616efaa4fe3c190bee0
newDependencyContext
public DependencyContext newDependencyContext(MavenSession session, List<MojoExecution> mojoExecutions)
{    Set<String> scopesToCollect = new TreeSet<>();    Set<String> scopesToResolve = new TreeSet<>();    collectDependencyRequirements(scopesToResolve, scopesToCollect, mojoExecutions);    return new DependencyContext(session.getCurrentProject(), scopesToCollect, scopesToResolve);}
ef91a6e650219fe52b78e9c9fedac80b51c5a07ec6c9d17bebe74e57572b8e26
collectDependencyRequirements
private void collectDependencyRequirements(Set<String> scopesToResolve, Set<String> scopesToCollect, Collection<MojoExecution> mojoExecutions)
{    for (MojoExecution mojoExecution : mojoExecutions) {        MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();        scopesToResolve.addAll(toScopes(mojoDescriptor.getDependencyResolutionRequired()));        scopesToCollect.addAll(toScopes(mojoDescriptor.getDependencyCollectionRequired()));    }}
3f93669db3ea0885440b0be62344d9ce094a902c5163360558c1bc297af5ee6e
toScopes
private Collection<String> toScopes(String classpath)
{    Collection<String> scopes = Collections.emptyList();    if (StringUtils.isNotEmpty(classpath)) {        if (Artifact.SCOPE_COMPILE.equals(classpath)) {            scopes = Arrays.asList(Artifact.SCOPE_COMPILE, Artifact.SCOPE_SYSTEM, Artifact.SCOPE_PROVIDED);        } else if (Artifact.SCOPE_RUNTIME.equals(classpath)) {            scopes = Arrays.asList(Artifact.SCOPE_COMPILE, Artifact.SCOPE_RUNTIME);        } else if (Artifact.SCOPE_COMPILE_PLUS_RUNTIME.equals(classpath)) {            scopes = Arrays.asList(Artifact.SCOPE_COMPILE, Artifact.SCOPE_SYSTEM, Artifact.SCOPE_PROVIDED, Artifact.SCOPE_RUNTIME);        } else if (Artifact.SCOPE_RUNTIME_PLUS_SYSTEM.equals(classpath)) {            scopes = Arrays.asList(Artifact.SCOPE_COMPILE, Artifact.SCOPE_SYSTEM, Artifact.SCOPE_RUNTIME);        } else if (Artifact.SCOPE_TEST.equals(classpath)) {            scopes = Arrays.asList(Artifact.SCOPE_COMPILE, Artifact.SCOPE_SYSTEM, Artifact.SCOPE_PROVIDED, Artifact.SCOPE_RUNTIME, Artifact.SCOPE_TEST);        }    }    return Collections.unmodifiableCollection(scopes);}
5fbb9a60220589be986c8459f21800b515c53e97d3c7e088d936e2ef6a23415b
execute
public void execute(MavenSession session, List<MojoExecution> mojoExecutions, ProjectIndex projectIndex) throws LifecycleExecutionException
{    DependencyContext dependencyContext = newDependencyContext(session, mojoExecutions);    PhaseRecorder phaseRecorder = new PhaseRecorder(session.getCurrentProject());    for (MojoExecution mojoExecution : mojoExecutions) {        execute(session, mojoExecution, projectIndex, dependencyContext, phaseRecorder);    }}
f18280faad1a1bcc00f367bf7143f37610465ef101d2d323305f11bad549ad6b
execute
public void execute(MavenSession session, MojoExecution mojoExecution, ProjectIndex projectIndex, DependencyContext dependencyContext, PhaseRecorder phaseRecorder) throws LifecycleExecutionException
{    execute(session, mojoExecution, projectIndex, dependencyContext);    phaseRecorder.observeExecution(mojoExecution);}
344e5674c1b5c7ad85aaf6527f9f15dec639a8d1d42e59640edc957b5a9a4bf0
execute
private void execute(MavenSession session, MojoExecution mojoExecution, ProjectIndex projectIndex, DependencyContext dependencyContext) throws LifecycleExecutionException
{    MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();    try {        mavenPluginManager.checkRequiredMavenVersion(mojoDescriptor.getPluginDescriptor());    } catch (PluginIncompatibleException e) {        throw new LifecycleExecutionException(mojoExecution, session.getCurrentProject(), e);    }    if (mojoDescriptor.isProjectRequired() && !session.getRequest().isProjectPresent()) {        Throwable cause = new MissingProjectException("Goal requires a project to execute" + " but there is no POM in this directory (" + session.getExecutionRootDirectory() + ")." + " Please verify you invoked Maven from the correct directory.");        throw new LifecycleExecutionException(mojoExecution, null, cause);    }    if (mojoDescriptor.isOnlineRequired() && session.isOffline()) {        if (MojoExecution.Source.CLI.equals(mojoExecution.getSource())) {            Throwable cause = new IllegalStateException("Goal requires online mode for execution" + " but Maven is currently offline.");            throw new LifecycleExecutionException(mojoExecution, session.getCurrentProject(), cause);        } else {            eventCatapult.fire(ExecutionEvent.Type.MojoSkipped, session, mojoExecution);            return;        }    }    List<MavenProject> forkedProjects = executeForkedExecutions(mojoExecution, session, projectIndex);    ensureDependenciesAreResolved(mojoDescriptor, session, dependencyContext);    eventCatapult.fire(ExecutionEvent.Type.MojoStarted, session, mojoExecution);    try {        try {            pluginManager.executeMojo(session, mojoExecution);        } catch (MojoFailureException | PluginManagerException | PluginConfigurationException | MojoExecutionException e) {            throw new LifecycleExecutionException(mojoExecution, session.getCurrentProject(), e);        }        eventCatapult.fire(ExecutionEvent.Type.MojoSucceeded, session, mojoExecution);    } catch (LifecycleExecutionException e) {        eventCatapult.fire(ExecutionEvent.Type.MojoFailed, session, mojoExecution, e);        throw e;    } finally {        for (MavenProject forkedProject : forkedProjects) {            forkedProject.setExecutionProject(null);        }    }}
5fcf1c6e4668c9725b0cce450d6349c04e0957ae6d593789d200e55d4e0ae831
ensureDependenciesAreResolved
public void ensureDependenciesAreResolved(MojoDescriptor mojoDescriptor, MavenSession session, DependencyContext dependencyContext) throws LifecycleExecutionException
{    MavenProject project = dependencyContext.getProject();    boolean aggregating = mojoDescriptor.isAggregator();    if (dependencyContext.isResolutionRequiredForCurrentProject()) {        Collection<String> scopesToCollect = dependencyContext.getScopesToCollectForCurrentProject();        Collection<String> scopesToResolve = dependencyContext.getScopesToResolveForCurrentProject();        lifeCycleDependencyResolver.resolveProjectDependencies(project, scopesToCollect, scopesToResolve, session, aggregating, Collections.<Artifact>emptySet());        dependencyContext.synchronizeWithProjectState();    }    if (aggregating) {        Collection<String> scopesToCollect = toScopes(mojoDescriptor.getDependencyCollectionRequired());        Collection<String> scopesToResolve = toScopes(mojoDescriptor.getDependencyResolutionRequired());        if (dependencyContext.isResolutionRequiredForAggregatedProjects(scopesToCollect, scopesToResolve)) {            for (MavenProject aggregatedProject : session.getProjects()) {                if (aggregatedProject != project) {                    lifeCycleDependencyResolver.resolveProjectDependencies(aggregatedProject, scopesToCollect, scopesToResolve, session, aggregating, Collections.<Artifact>emptySet());                }            }        }    }    ArtifactFilter artifactFilter = getArtifactFilter(mojoDescriptor);    List<MavenProject> projectsToResolve = LifecycleDependencyResolver.getProjects(session.getCurrentProject(), session, mojoDescriptor.isAggregator());    for (MavenProject projectToResolve : projectsToResolve) {        projectToResolve.setArtifactFilter(artifactFilter);    }}
37d0c6a7e0cafb1f0c13eadad5e4e39bdde6934e817d694206343164813320ec
getArtifactFilter
private ArtifactFilter getArtifactFilter(MojoDescriptor mojoDescriptor)
{    String scopeToResolve = mojoDescriptor.getDependencyResolutionRequired();    String scopeToCollect = mojoDescriptor.getDependencyCollectionRequired();    List<String> scopes = new ArrayList<>(2);    if (StringUtils.isNotEmpty(scopeToCollect)) {        scopes.add(scopeToCollect);    }    if (StringUtils.isNotEmpty(scopeToResolve)) {        scopes.add(scopeToResolve);    }    if (scopes.isEmpty()) {        return null;    } else {        return new CumulativeScopeArtifactFilter(scopes);    }}
25eaff53f1cdbb4a1e84bc14672d58a65b0e33b80d13169566afe794c6bc8c0d
executeForkedExecutions
public List<MavenProject> executeForkedExecutions(MojoExecution mojoExecution, MavenSession session, ProjectIndex projectIndex) throws LifecycleExecutionException
{    List<MavenProject> forkedProjects = Collections.emptyList();    Map<String, List<MojoExecution>> forkedExecutions = mojoExecution.getForkedExecutions();    if (!forkedExecutions.isEmpty()) {        eventCatapult.fire(ExecutionEvent.Type.ForkStarted, session, mojoExecution);        MavenProject project = session.getCurrentProject();        forkedProjects = new ArrayList<>(forkedExecutions.size());        try {            for (Map.Entry<String, List<MojoExecution>> fork : forkedExecutions.entrySet()) {                String projectId = fork.getKey();                int index = projectIndex.getIndices().get(projectId);                MavenProject forkedProject = projectIndex.getProjects().get(projectId);                forkedProjects.add(forkedProject);                MavenProject executedProject = forkedProject.clone();                forkedProject.setExecutionProject(executedProject);                List<MojoExecution> mojoExecutions = fork.getValue();                if (mojoExecutions.isEmpty()) {                    continue;                }                try {                    session.setCurrentProject(executedProject);                    session.getProjects().set(index, executedProject);                    projectIndex.getProjects().put(projectId, executedProject);                    eventCatapult.fire(ExecutionEvent.Type.ForkedProjectStarted, session, mojoExecution);                    execute(session, mojoExecutions, projectIndex);                    eventCatapult.fire(ExecutionEvent.Type.ForkedProjectSucceeded, session, mojoExecution);                } catch (LifecycleExecutionException e) {                    eventCatapult.fire(ExecutionEvent.Type.ForkedProjectFailed, session, mojoExecution, e);                    throw e;                } finally {                    projectIndex.getProjects().put(projectId, forkedProject);                    session.getProjects().set(index, forkedProject);                    session.setCurrentProject(project);                }            }            eventCatapult.fire(ExecutionEvent.Type.ForkSucceeded, session, mojoExecution);        } catch (LifecycleExecutionException e) {            eventCatapult.fire(ExecutionEvent.Type.ForkFailed, session, mojoExecution, e);            throw e;        }    }    return forkedProjects;}
83189839dcb5e2bf5fb13134aeaea1026f6d6a38c874b385b3460d88d1c00ccf
observeExecution
public void observeExecution(MojoExecution mojoExecution)
{    String lifecyclePhase = mojoExecution.getLifecyclePhase();    if (lifecyclePhase != null) {        if (lastLifecyclePhase == null) {            lastLifecyclePhase = lifecyclePhase;        } else if (!lifecyclePhase.equals(lastLifecyclePhase)) {            project.addLifecyclePhase(lastLifecyclePhase);            lastLifecyclePhase = lifecyclePhase;        }    }    if (lastLifecyclePhase != null) {        project.addLifecyclePhase(lastLifecyclePhase);    }}
f13b0e8205a4f88ca42fd0aed9a16004f6747691997009fec5f7089aec6c14e2
isDifferentPhase
public boolean isDifferentPhase(MojoExecution nextMojoExecution)
{    String lifecyclePhase = nextMojoExecution.getLifecyclePhase();    if (lifecyclePhase == null) {        return lastLifecyclePhase != null;    }    return !lifecyclePhase.equals(lastLifecyclePhase);}
c1c6eb6877373a510a570c647905f80f834cb685de625db24e2f1f0ed1ba52df
getByTaskSegment
public ProjectBuildList getByTaskSegment(TaskSegment taskSegment)
{    List<ProjectSegment> currentSegment = new ArrayList<>();    for (ProjectSegment projectBuild : items) {        if (taskSegment == projectBuild.getTaskSegment()) {                        currentSegment.add(projectBuild);        }    }    return new ProjectBuildList(currentSegment);}
ea2ecbc44966ae0631f275cc9a5d914e7077adb62f9d36e1d76d2920914a86e9
selectSegment
public Map<MavenProject, ProjectSegment> selectSegment(TaskSegment taskSegment)
{    Map<MavenProject, ProjectSegment> result = new HashMap<>();    for (ProjectSegment projectBuild : items) {        if (taskSegment == projectBuild.getTaskSegment()) {                        result.put(projectBuild.getProject(), projectBuild);        }    }    return result;}
5eeea0c3a2672babac6f90d7bf6dda7622fc2eed705e6f0460709d40ec7b74e1
findByMavenProject
public ProjectSegment findByMavenProject(MavenProject mavenProject)
{    for (ProjectSegment projectBuild : items) {        if (mavenProject.equals(projectBuild.getProject())) {            return projectBuild;        }    }    return null;}
d8a7275fd7b5e7d2a05057413933100a9ff7b07d35bddbf4fa01099195a05eb7
iterator
public Iterator<ProjectSegment> iterator()
{    return items.iterator();}
72fda972f0ef9cf90dd72e4e59f12e49760ecaa5946cc7f2f236638c6e6ec919
closeAll
public void closeAll()
{    for (ProjectSegment item : items) {        MavenSession sessionForThisModule = item.getSession();        sessionForThisModule.setCurrentProject(null);    }}
72ef1e59027007ffe0950edfd2670ad03bb65cd6463d5d1d282dfeb1750435b0
size
public int size()
{    return items.size();}
9587d13318c7043b76db8ea86ab2487e38ff8d0a237338ec91540002c8186426
get
public ProjectSegment get(int index)
{    return items.get(index);}
ad1ec609e8a2d933d38b7e70c438d1aa7b29c1315ca1a7d1431f4b71db019de4
getReactorProjectKeys
public Set<String> getReactorProjectKeys()
{    Set<String> projectKeys = new HashSet<>(items.size() * 2);    for (ProjectSegment projectBuild : items) {        MavenProject project = projectBuild.getProject();        String key = ArtifactUtils.key(project.getGroupId(), project.getArtifactId(), project.getVersion());        projectKeys.add(key);    }    return projectKeys;}
803915e853382ad445a6e2333fabb8beb8e4acd70e908a0d818400f7baac42af
isEmpty
public boolean isEmpty()
{    return items.isEmpty();}
404f4e42f111bdad93d630dc1eb182ec98ed73491ae523cc1f7cff070a6a1504
getProjects
public Set<MavenProject> getProjects()
{    Set<MavenProject> projects = new HashSet<>();    for (ProjectSegment s : items) {        projects.add(s.getProject());    }    return projects;}
57c10a41e460407ff61cc56d420847f2509367f1e9a1c44d355a5e56ef18faa4
getProjects
public Map<String, MavenProject> getProjects()
{    return projects;}
251b6ff2743ea85d6ec48c6b075c376b76f832cef6a256fc6f779e7c72564715
getIndices
public Map<String, Integer> getIndices()
{    return indices;}
5f9beff804d491307ef6fcfa2f8b51cce53a3674d5c1d3d683eb56a19c4083d7
getSession
public MavenSession getSession()
{    return session;}
cdcc47ed1eccb5aa7ba2aa1d33b327142be7cbcc16c1cff19fde28a6b8e02541
getProject
public MavenProject getProject()
{    return project;}
a01130892ab80f55c1a0c3dc811b28671978ba938658835f93688b13cb4024c3
getTaskSegment
public TaskSegment getTaskSegment()
{    return taskSegment;}
603bb34e037773d52270aa6710c0033a0806b9b37ba371f4fb592caa680bed26
getImmediateUpstreamProjects
public List<MavenProject> getImmediateUpstreamProjects()
{    return nonTransitiveUpstreamProjects;}
ad44604565613afcf9b522979b2ddfb7195cce67ba20c34ec02e76d876dcfeec
getTransitiveUpstreamProjects
public List<MavenProject> getTransitiveUpstreamProjects()
{    return transitiveUpstreamProjects;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return getProject().getId() + " -> " + getTaskSegment();}
72db8af6f194fca1374de66311959e540d3f86b5d7fc6e4658d8afc1dc4230e1
isBlackListed
public boolean isBlackListed(MavenProject project)
{    return blackListedProjects.contains(BuilderCommon.getKey(project));}
e7ac19ff71a0b7f1e89eb24436acf44237aaef0b608287c30297c26a102dbed2
blackList
public void blackList(MavenProject project)
{    if (blackListedProjects.add(BuilderCommon.getKey(project)) && projectDependencyGraph != null) {        for (MavenProject downstreamProject : projectDependencyGraph.getDownstreamProjects(project, true)) {            blackListedProjects.add(BuilderCommon.getKey(downstreamProject));        }    }}
09eaf0ae5188f6f2b67a395d40350eaef55fcab24a60bddfabdfe951df9354c8
halt
public void halt()
{    halted = true;}
4b10fae16a212add50ac71b4404ecb618bb001a498986ef2f9f3fd4332066d06
isHalted
public boolean isHalted()
{    return halted;}
2aa297f08d6d6f9a442ee7d173a1ce4a13ea174a392bc477a95179a843bd2f47
isHaltedOrBlacklisted
public boolean isHaltedOrBlacklisted(MavenProject mavenProject)
{    return isBlackListed(mavenProject) || isHalted();}
249fbdaba3d5d1388315df1074356da2f240920a74196759e3749573b98c5d12
getReactorBuildStatus
public ReactorBuildStatus getReactorBuildStatus()
{    return reactorBuildStatus;}
caef4572e073f435feb309a17b00f8c84b08ee55bc121c2d973817f3a9255070
getResult
public MavenExecutionResult getResult()
{    return result;}
ba1d06e5ae3bd21b5c641716785a7fe025b85105ec18f5002af20d923c88eb7b
getProjectIndex
public ProjectIndex getProjectIndex()
{    return projectIndex;}
2ec57e3a0734ff2f698594fbc0f8f55ef4597df8deae540df53f2dc5a37dd7b2
getOriginalContextClassLoader
public ClassLoader getOriginalContextClassLoader()
{    return originalContextClassLoader;}
3cf6d03800e712eea2c1fc39ac283293ba26327ed680b1b800c30b84689ea69b
getSessionScopeMemento
public SessionScope.Memento getSessionScopeMemento()
{    return sessionScope;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return getTasks().toString();}
777e90dedc42ac849b8d3f9877eceb9123ae89c3fd2c3a41243144a235f9e609
getTasks
public List<Object> getTasks()
{    return tasks;}
48141f2d2315e0ce9140271171838b4975bef2ad50dbab84a0912fec707c61e7
isAggregating
public boolean isAggregating()
{    return aggregating;}
09e8f13a9a603d31d64bb498b77d15572483824d843d0e82a570643192f62186
getId
public String getId()
{    return this.id;}
664e4289f95b5ea6700bd748db83d0cd936c34ae69196f1d7dea7eed277a7a77
getPhases
public List<String> getPhases()
{    return this.phases;}
4353f412257d97f85566b4e9c2219f003fdf22705fafe8d3ce8b69cf9d77c3d3
getDefaultLifecyclePhases
public Map<String, LifecyclePhase> getDefaultLifecyclePhases()
{    return defaultPhases;}
878583a93c3840a5f45a4caa98b54919f8db91be5eaf2f52463a0ec63aecaac2
getDefaultPhases
public Map<String, String> getDefaultPhases()
{    return LifecyclePhase.toLegacyMap(getDefaultLifecyclePhases());}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return id + " -> " + phases;}
cdcc47ed1eccb5aa7ba2aa1d33b327142be7cbcc16c1cff19fde28a6b8e02541
getProject
public MavenProject getProject()
{    return project;}
da9ef64ceaa913e5046280b591490e27a1fad6a3d8fb4db56a897d4803ee4d96
createMessage
private static String createMessage(MojoExecution execution, MavenProject project, Throwable cause)
{    MessageBuilder buffer = buffer(256);    buffer.a("Failed to execute goal");    if (execution != null) {        buffer.a(' ');        buffer.mojo(execution.getGroupId() + ':' + execution.getArtifactId() + ':' + execution.getVersion() + ':' + execution.getGoal());        buffer.a(' ').strong('(' + execution.getExecutionId() + ')');    }    if (project != null) {        buffer.a(" on project ");        buffer.project(project.getArtifactId());    }    if (cause != null) {        buffer.a(": ").failure(cause.getMessage());    }    return buffer.toString();}
90f6bfe3fbaaa565016dccbd504d9edb17b734a9cce1cec2ad4310606ff47595
getLifecycleId
public String getLifecycleId()
{    return lifecycleId;}
c5459e09ea51fe5334ba77c3873afa66f0e20095ce1e03fce19a75fef76bee5d
getLifecyclePhase
public String getLifecyclePhase()
{    return lifecyclePhase;}
58a18dbd7684c09d78fcb4095b441001e2b7204e8bf1f0423ccba250a9b4eb21
initLifecycleMap
private void initLifecycleMap()
{    if (lifecycleMap == null) {        lifecycleMap = new HashMap<>();        if (lifecycles != null) {            for (Lifecycle lifecycle : lifecycles) {                lifecycleMap.put(lifecycle.getId(), lifecycle);            }        } else {            /*                 * NOTE: This is to provide a migration path for implementors of the legacy API which did not know about                 * getLifecycles().                 */            String[] lifecycleIds = { "default", "clean", "site" };            for (String lifecycleId : lifecycleIds) {                Map<String, LifecyclePhase> phases = getLifecyclePhases(lifecycleId);                if (phases != null) {                    Lifecycle lifecycle = new Lifecycle();                    lifecycle.setId(lifecycleId);                    lifecycle.setLifecyclePhases(phases);                    lifecycleMap.put(lifecycleId, lifecycle);                }            }        }    }}
b133844bfade3b0c5db3a868135fc5b0f68eba51fcf6ed038fce6ec47e74c3f3
getLifecycles
public Map<String, Lifecycle> getLifecycles()
{    initLifecycleMap();    return lifecycleMap;}
fe0afdd252964c5be623052ec379549f3d8f78cb66f85c15994543dfd1065d0d
getOptionalMojos
public List<String> getOptionalMojos(String lifecycle)
{    return null;}
659c850d8621de60356a750885212245d03743d374662cc7abd0795de301f8a0
getLifecyclePhases
private Map<String, LifecyclePhase> getLifecyclePhases(String lifecycle)
{    initLifecycleMap();    Lifecycle lifecycleMapping = lifecycleMap.get(lifecycle);    if (lifecycleMapping != null) {        return lifecycleMapping.getLifecyclePhases();    } else if ("default".equals(lifecycle)) {        return phases;    } else {        return null;    }}
07b135c84570685d99e8def0f1b0aca9d8178529a9607b1f774a4b589213a834
getPhases
public Map<String, String> getPhases(String lifecycle)
{    return LifecyclePhase.toLegacyMap(getLifecyclePhases(lifecycle));}
09e8f13a9a603d31d64bb498b77d15572483824d843d0e82a570643192f62186
getId
public String getId()
{    return this.id;}
cb5e7b80a4c9fec8c9dac8c362e1d0c529714322cdffa7056788699a1f3d32de
getLifecyclePhases
public Map<String, LifecyclePhase> getLifecyclePhases()
{    return this.lifecyclePhases;}
ef03857fdefb7c5e949826b070dcbdc52b14cca8f50e0c7e1f5da4ee7e390f1a
setId
public void setId(String id)
{    this.id = id;}
a78c234511d3d8eea50ad8f7596427eb9f7b917bffe211a7c54667edc1e70075
setLifecyclePhases
public void setLifecyclePhases(Map<String, LifecyclePhase> lifecyclePhases)
{    this.lifecyclePhases = lifecyclePhases;}
969d5af3668af1418ba68ccdb5c7c128034acbb87fa8ff3edd796b0a5a4e0489
getPhases
public Map<String, String> getPhases()
{    Map<String, LifecyclePhase> lphases = getLifecyclePhases();    if (lphases == null) {        return null;    }    if (lphases.isEmpty()) {        return Collections.emptyMap();    }    Map<String, String> phases = new LinkedHashMap<>();    for (Map.Entry<String, LifecyclePhase> e : lphases.entrySet()) {        phases.put(e.getKey(), e.getValue().toString());    }    return phases;}
92f5dad70031bdab060aa1340dd8f7def4fb71990e317416b7445e1c5af887db
setPhases
public void setPhases(Map<String, String> phases)
{    Map<String, LifecyclePhase> lphases = new LinkedHashMap<>();    for (Map.Entry<String, String> e : phases.entrySet()) {        lphases.put(e.getKey(), new LifecyclePhase(e.getValue()));    }    setLifecyclePhases(lphases);}
9082fc77639536bd0806cf5ff8e124732907b588c0a1ce3bbdf3069504999815
getGoal
public String getGoal()
{    return goal;}
ab8b1b25d8cef63d285b8fe2f9cd7c73f4319a457a7dac03793fc8ea632fd546
getConfiguration
public Xpp3Dom getConfiguration()
{    return configuration;}
5d4ace0ef221a194a1d9585a92d0b74ee3987d6559e56dc9f7dc3a2570c07c7c
getDependencies
public List<Dependency> getDependencies()
{    return dependencies;}
e3d2cc5c87f45839004cd192d5f7cab2663199640c568e1de65c56f6d60e05a8
setGoal
public void setGoal(String goal)
{    this.goal = goal;}
d09e3c46dcc841c7c855a318a44a8fa5aeeaebfd0068df81439ac08f7f271f45
setConfiguration
public void setConfiguration(Xpp3Dom configuration)
{    this.configuration = configuration;}
74c5d66a4fad00a7d79600f0a9b934d3a5a4d111411ece2704ebd4ee51bab185
setDependencies
public void setDependencies(List<Dependency> dependencies)
{    this.dependencies = dependencies;}
66a97990bf75451839a7f898835b655b1bedf352f508689acf685703649d1d22
getMojos
public List<LifecycleMojo> getMojos()
{    return mojos;}
3aa362dac3601d1e03ad245d950221494a7c838d3bc712650c8de13eb2471793
setMojos
public void setMojos(List<LifecycleMojo> mojos)
{    this.mojos = mojos;}
de49c1448cb58b5b1ee9786641b623569c4db88d0d7c2f1ea90d038293ec2932
set
public void set(String goals)
{    mojos = new ArrayList<>();    if (StringUtils.isNotEmpty(goals)) {        String[] mojoGoals = StringUtils.split(goals, ",");        for (String mojoGoal : mojoGoals) {            LifecycleMojo lifecycleMojo = new LifecycleMojo();            lifecycleMojo.setGoal(mojoGoal.trim());            mojos.add(lifecycleMojo);        }    }}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    StringBuilder sb = new StringBuilder();    boolean first = true;    List<LifecycleMojo> mojos = getMojos();    if (mojos != null) {        for (LifecycleMojo mojo : mojos) {            if (first) {                first = false;            } else {                sb.append(',');            }            sb.append(mojo.getGoal());        }    }    return sb.toString();}
476a76a91b45dfd88d7f3be3038d7e581b00ae1b6ee373f8cf6de3b922a87a48
toLegacyMap
public static Map<String, String> toLegacyMap(Map<String, LifecyclePhase> lifecyclePhases)
{    if (lifecyclePhases == null) {        return null;    }    if (lifecyclePhases.isEmpty()) {        return Collections.emptyMap();    }    Map<String, String> phases = new LinkedHashMap<>();    for (Map.Entry<String, LifecyclePhase> e : lifecyclePhases.entrySet()) {        phases.put(e.getKey(), e.getValue().toString());    }    return phases;}
c94504a6833374dcd0aa8ff013f370723f609a969efb59932ae65985e4f8d109
iterator
public Iterator<ExecutionPlanItem> iterator()
{    return getExecutionPlanItems().iterator();}
11d65bae09631b4204c605a9451b6998e7bf0a841dc7ab67b15bd8a0e4c03fe5
findLastInPhase
public ExecutionPlanItem findLastInPhase(String requestedPhase)
{    return lastMojoExecutionForAllPhases.get(requestedPhase);}
d6c481068023dc6a41007d2aafe4d29184837f97f489a84ebf1fa069b622b025
getExecutionPlanItems
private List<ExecutionPlanItem> getExecutionPlanItems()
{    return planItem;}
a18fc5fcbbad6bd2058964d648f9f1de61ceeeba620bffe5ddb65009dc5fb4ab
getDistinctPhasesInOrderOfExecutionPlanAppearance
private static Iterable<String> getDistinctPhasesInOrderOfExecutionPlanAppearance(List<ExecutionPlanItem> planItems)
{    LinkedHashSet<String> result = new LinkedHashSet<>();    for (ExecutionPlanItem executionPlanItem : planItems) {        final String phase = executionPlanItem.getLifecyclePhase();        if (!result.contains(phase)) {            result.add(phase);        }    }    return result;}
e2269746c8b023343e0ce590e1275f76762e73212463180c257d75a16e2f1fd6
getMojoExecutions
public List<MojoExecution> getMojoExecutions()
{    List<MojoExecution> result = new ArrayList<>();    for (ExecutionPlanItem executionPlanItem : planItem) {        result.add(executionPlanItem.getMojoExecution());    }    return result;}
9e3bc76e5e0d9372defe5adab5ac83b8aed367fb22b7a5e01dd408ff64be3a91
getNonThreadSafePlugins
public Set<Plugin> getNonThreadSafePlugins()
{    Set<Plugin> plugins = new HashSet<>();    for (ExecutionPlanItem executionPlanItem : planItem) {        final MojoExecution mojoExecution = executionPlanItem.getMojoExecution();        if (!mojoExecution.getMojoDescriptor().isThreadSafe()) {            plugins.add(mojoExecution.getPlugin());        }    }    return plugins;}
a5f59af177c23be19c95db6ad96ba6d772f1a5c2dbc63fd838e1d608b4a07bdf
getNonThreadSafeMojos
public Set<MojoDescriptor> getNonThreadSafeMojos()
{    Set<MojoDescriptor> mojos = new HashSet<>();    for (ExecutionPlanItem executionPlanItem : planItem) {        final MojoExecution mojoExecution = executionPlanItem.getMojoExecution();        if (!mojoExecution.getMojoDescriptor().isThreadSafe()) {            mojos.add(mojoExecution.getMojoDescriptor());        }    }    return mojos;}
cf3b96339215800140268237885f33028570f42459f660e5fd02cddcc485eb69
getExecutions
public List<MojoExecution> getExecutions()
{    return getMojoExecutions();}
72ef1e59027007ffe0950edfd2670ad03bb65cd6463d5d1d282dfeb1750435b0
size
public int size()
{    return planItem.size();}
9e41472ee24bfb1867a8e9e5c5bd1fe3eb2642f5fedb094f54f96a5b46b086ba
getPomFile
public File getPomFile()
{    return pomFile;}
e47a221f3ae10f0265240db04dcb7cfdcd4ac528501c0d1c887778a830d75ee1
getModuleFile
public File getModuleFile()
{    return moduleFile;}
17f6eba0db1ca657895481f4a8596653a651f6badde7e611034b7d4014d4d27f
getModuleName
public String getModuleName()
{    return moduleName;}
45dfc46b723eaf7a21a6bd04035fa728e87c50cfff748057bf598b936fad7a47
injectLifecycleBindings
public void injectLifecycleBindings(Model model, ModelBuildingRequest request, ModelProblemCollector problems)
{    String packaging = model.getPackaging();    Collection<Plugin> defaultPlugins = lifecycle.getPluginsBoundByDefaultToAllLifecycles(packaging);    if (defaultPlugins == null) {        problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage("Unknown packaging: " + packaging).setLocation(model.getLocation("packaging")));    } else if (!defaultPlugins.isEmpty()) {        Model lifecycleModel = new Model();        lifecycleModel.setBuild(new Build());        lifecycleModel.getBuild().getPlugins().addAll(defaultPlugins);        merger.merge(model, lifecycleModel);    }}
11f077c627cbe6f9678fc88af1288054308ac005b478d425f749454380343c6e
merge
public void merge(Model target, Model source)
{    if (target.getBuild() == null) {        target.setBuild(new Build());    }    Map<Object, Object> context = Collections.<Object, Object>singletonMap(PLUGIN_MANAGEMENT, target.getBuild().getPluginManagement());    mergePluginContainer_Plugins(target.getBuild(), source.getBuild(), false, context);}
4dfefd0e1a9d2e2ec36522b87bc50609dee76c19bd871b54c6c21a022b576c70
mergePluginContainer_Plugins
protected void mergePluginContainer_Plugins(PluginContainer target, PluginContainer source, boolean sourceDominant, Map<Object, Object> context)
{    List<Plugin> src = source.getPlugins();    if (!src.isEmpty()) {        List<Plugin> tgt = target.getPlugins();        Map<Object, Plugin> merged = new LinkedHashMap<>((src.size() + tgt.size()) * 2);        for (Plugin element : tgt) {            Object key = getPluginKey(element);            merged.put(key, element);        }        Map<Object, Plugin> added = new LinkedHashMap<>();        for (Plugin element : src) {            Object key = getPluginKey(element);            Plugin existing = merged.get(key);            if (existing != null) {                mergePlugin(existing, element, sourceDominant, context);            } else {                merged.put(key, element);                added.put(key, element);            }        }        if (!added.isEmpty()) {            PluginManagement pluginMgmt = (PluginManagement) context.get(PLUGIN_MANAGEMENT);            if (pluginMgmt != null) {                for (Plugin managedPlugin : pluginMgmt.getPlugins()) {                    Object key = getPluginKey(managedPlugin);                    Plugin addedPlugin = added.get(key);                    if (addedPlugin != null) {                        Plugin plugin = managedPlugin.clone();                        mergePlugin(plugin, addedPlugin, sourceDominant, Collections.emptyMap());                        merged.put(key, plugin);                    }                }            }        }        List<Plugin> result = new ArrayList<>(merged.values());        target.setPlugins(result);    }}
58fd27357979fb84941ac99bdd9ecdd0e7a6eac36bcc1d7fa0bc62f518069899
mergePluginExecution
protected void mergePluginExecution(PluginExecution target, PluginExecution source, boolean sourceDominant, Map<Object, Object> context)
{    super.mergePluginExecution(target, source, sourceDominant, context);    target.setPriority(Math.min(target.getPriority(), source.getPriority()));}
9464b3eeca8a3528f76c81d42f8496ac5902d800ae63649270e6f0372c389c40
eq
public static boolean eq(T s1, T s2)
{    return Objects.equals(s1, s2);}
a3e6ba82a745ee95d4b39fcc260f1872f0fa4f0c5b3c8f49f5833b2c9f07edde
hash
public static int hash(Object obj)
{    return obj != null ? obj.hashCode() : 0;}
c850babda192f2addc97bc6f032712fd8f031865a43a6696278d3927ca54cbca
pluginHashCode
public static int pluginHashCode(Plugin plugin)
{    int hash = 17;    hash = hash * 31 + Objects.hashCode(plugin.getGroupId());    hash = hash * 31 + Objects.hashCode(plugin.getArtifactId());    hash = hash * 31 + Objects.hashCode(plugin.getVersion());    hash = hash * 31 + (plugin.isExtensions() ? 1 : 0);    for (Dependency dependency : plugin.getDependencies()) {        hash = hash * 31 + Objects.hashCode(dependency.getGroupId());        hash = hash * 31 + Objects.hashCode(dependency.getArtifactId());        hash = hash * 31 + Objects.hashCode(dependency.getVersion());        hash = hash * 31 + Objects.hashCode(dependency.getType());        hash = hash * 31 + Objects.hashCode(dependency.getClassifier());        hash = hash * 31 + Objects.hashCode(dependency.getScope());        for (Exclusion exclusion : dependency.getExclusions()) {            hash = hash * 31 + Objects.hashCode(exclusion.getGroupId());            hash = hash * 31 + Objects.hashCode(exclusion.getArtifactId());        }    }    return hash;}
3ec3465c8a8ed3652938fb406a9204575be926bed423a4a2629756f0b4ab443a
pluginEquals
public static boolean pluginEquals(Plugin a, Plugin b)
{    return     Objects.equals(a.getArtifactId(), b.getArtifactId()) &&     Objects.equals(a.getGroupId(), b.getGroupId()) &&     Objects.equals(a.getVersion(), b.getVersion()) &&     a.isExtensions() == b.isExtensions() && dependenciesEquals(a.getDependencies(), b.getDependencies());}
0ba04515cb546489522352c8ca03bfef0dad58df7b07ef7b1e7b771af81995ba
dependenciesEquals
private static boolean dependenciesEquals(List<Dependency> a, List<Dependency> b)
{    if (a.size() != b.size()) {        return false;    }    Iterator<Dependency> aI = a.iterator();    Iterator<Dependency> bI = b.iterator();    while (aI.hasNext()) {        Dependency aD = aI.next();        Dependency bD = bI.next();        boolean r =         Objects.equals(aD.getGroupId(), bD.getGroupId()) &&         Objects.equals(aD.getArtifactId(), bD.getArtifactId()) &&         Objects.equals(aD.getVersion(), bD.getVersion()) &&         Objects.equals(aD.getType(), bD.getType()) &&         Objects.equals(aD.getClassifier(), bD.getClassifier()) && Objects.equals(aD.getScope(), bD.getScope());        r &= exclusionsEquals(aD.getExclusions(), bD.getExclusions());        if (!r) {            return false;        }    }    return true;}
626023af821a225ce93e7f56ca9417cb6ff0ddb4b71afe2de3b2b211ed6965af
exclusionsEquals
private static boolean exclusionsEquals(List<Exclusion> a, List<Exclusion> b)
{    if (a.size() != b.size()) {        return false;    }    Iterator<Exclusion> aI = a.iterator();    Iterator<Exclusion> bI = b.iterator();    while (aI.hasNext()) {        Exclusion aD = aI.next();        Exclusion bD = bI.next();        boolean r =         Objects.equals(aD.getGroupId(), bD.getGroupId()) && Objects.equals(aD.getArtifactId(), bD.getArtifactId());        if (!r) {            return false;        }    }    return true;}
1d6e13f31541661fe5145780de30d54a71cb871a2779410243b78fff5482ba95
beforeMojoExecution
public void beforeMojoExecution(MojoExecutionEvent event) throws MojoExecutionException
{    for (MojoExecutionListener listener : listeners) {        listener.beforeMojoExecution(event);    }}
c540c18000ae2dd7a797635f058a6aefc5bf7d27fde2f8cec0e6b58ab7af62f3
afterMojoExecutionSuccess
public void afterMojoExecutionSuccess(MojoExecutionEvent event) throws MojoExecutionException
{    for (MojoExecutionListener listener : listeners) {        listener.afterMojoExecutionSuccess(event);    }}
a1ffbcc3ebfda4ce7f644850464e6aaf0a9cc0e544556c4d3ca31130ded7d890
afterExecutionFailure
public void afterExecutionFailure(MojoExecutionEvent event)
{    for (MojoExecutionListener listener : listeners) {        listener.afterExecutionFailure(event);    }}
73b43cf9677adc9b3dcd547ea67954af9521f47fc5ca326c40bf0c5890ba2d96
getPlugin
public Plugin getPlugin()
{    return plugin;}
6fa1360e14751eacbd5194bac947b9efc4ad88d54545e7f8415d9205e4f724ee
notifyFieldChangeUsingSetter
public void notifyFieldChangeUsingSetter(String fieldName, Object value, Object target)
{    if (logger.isDebugEnabled()) {        logger.debug("  (s) " + fieldName + " = " + toString(value));    }}
6b80878ef8ee6c85186e16e5b1751df2181f87b92888a53a5e227772664a03c9
notifyFieldChangeUsingReflection
public void notifyFieldChangeUsingReflection(String fieldName, Object value, Object target)
{    if (logger.isDebugEnabled()) {        logger.debug("  (f) " + fieldName + " = " + toString(value));    }}
2ee850ac3b5159a4b450128d9c443e3c3c9585529fa79c869c725cf80028ac39
toString
private String toString(Object obj)
{    String str;    if (obj != null && obj.getClass().isArray()) {        int n = Array.getLength(obj);        StringBuilder buf = new StringBuilder(256);        buf.append('[');        for (int i = 0; i < n; i++) {            if (i > 0) {                buf.append(", ");            }            buf.append(String.valueOf(Array.get(obj, i)));        }        buf.append(']');        str = buf.toString();    } else {        str = String.valueOf(obj);    }    return str;}
8b4875d54a0f53f6523e561e093279611a39f3b6a87ac0f1abdf9a0448d6dab8
setMojoExecutionListeners
public void setMojoExecutionListeners(final List<MojoExecutionListener> listeners)
{    this.mojoExecutionListeners = listeners;    this.mojoExecutionListener = new CompoundMojoExecutionListener(listeners);}
5f4a523b0311d2248caa455cfd6a57b2e3a6bee0d3771b429a065fa3031fb1e3
loadPlugin
public PluginDescriptor loadPlugin(Plugin plugin, List<RemoteRepository> repositories, RepositorySystemSession session) throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, InvalidPluginDescriptorException
{    return mavenPluginManager.getPluginDescriptor(plugin, repositories, session);}
4d7ae1cbe62c1d77df66ed439d95cc455931416b87c895468dca7e149318a9be
executeMojo
public void executeMojo(MavenSession session, MojoExecution mojoExecution) throws MojoFailureException, MojoExecutionException, PluginConfigurationException, PluginManagerException
{    MavenProject project = session.getCurrentProject();    MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();    Mojo mojo = null;    ClassRealm pluginRealm;    try {        pluginRealm = getPluginRealm(session, mojoDescriptor.getPluginDescriptor());    } catch (PluginResolutionException e) {        throw new PluginExecutionException(mojoExecution, project, e);    }    ClassLoader oldClassLoader = Thread.currentThread().getContextClassLoader();    Thread.currentThread().setContextClassLoader(pluginRealm);    MavenSession oldSession = legacySupport.getSession();    scope.enter();    try {        scope.seed(MavenProject.class, project);        scope.seed(MojoExecution.class, mojoExecution);        mojo = mavenPluginManager.getConfiguredMojo(Mojo.class, session, mojoExecution);        legacySupport.setSession(session);                try {            MojoExecutionEvent mojoExecutionEvent = new MojoExecutionEvent(session, project, mojoExecution, mojo);            mojoExecutionListener.beforeMojoExecution(mojoExecutionEvent);            mojo.execute();            mojoExecutionListener.afterMojoExecutionSuccess(mojoExecutionEvent);        } catch (ClassCastException e) {                        throw e;        } catch (RuntimeException e) {            throw new PluginExecutionException(mojoExecution, project, e);        }    } catch (PluginContainerException e) {        mojoExecutionListener.afterExecutionFailure(new MojoExecutionEvent(session, project, mojoExecution, mojo, e));        throw new PluginExecutionException(mojoExecution, project, e);    } catch (NoClassDefFoundError e) {        mojoExecutionListener.afterExecutionFailure(new MojoExecutionEvent(session, project, mojoExecution, mojo, e));        ByteArrayOutputStream os = new ByteArrayOutputStream(1024);        PrintStream ps = new PrintStream(os);        ps.println("A required class was missing while executing " + mojoDescriptor.getId() + ": " + e.getMessage());        pluginRealm.display(ps);        Exception wrapper = new PluginContainerException(mojoDescriptor, pluginRealm, os.toString(), e);        throw new PluginExecutionException(mojoExecution, project, wrapper);    } catch (LinkageError e) {        mojoExecutionListener.afterExecutionFailure(new MojoExecutionEvent(session, project, mojoExecution, mojo, e));        ByteArrayOutputStream os = new ByteArrayOutputStream(1024);        PrintStream ps = new PrintStream(os);        ps.println("An API incompatibility was encountered while executing " + mojoDescriptor.getId() + ": " + e.getClass().getName() + ": " + e.getMessage());        pluginRealm.display(ps);        Exception wrapper = new PluginContainerException(mojoDescriptor, pluginRealm, os.toString(), e);        throw new PluginExecutionException(mojoExecution, project, wrapper);    } catch (ClassCastException e) {        mojoExecutionListener.afterExecutionFailure(new MojoExecutionEvent(session, project, mojoExecution, mojo, e));        ByteArrayOutputStream os = new ByteArrayOutputStream(1024);        PrintStream ps = new PrintStream(os);        ps.println("A type incompatibility occurred while executing " + mojoDescriptor.getId() + ": " + e.getMessage());        pluginRealm.display(ps);        throw new PluginExecutionException(mojoExecution, project, os.toString(), e);    } catch (RuntimeException e) {        mojoExecutionListener.afterExecutionFailure(new MojoExecutionEvent(session, project, mojoExecution, mojo, e));        throw e;    } finally {        mavenPluginManager.releaseMojo(mojo, mojoExecution);        scope.exit();        Thread.currentThread().setContextClassLoader(oldClassLoader);        legacySupport.setSession(oldSession);    }}
f161915481d729b45d00233ed906673b085bb520532bc71074311039c3a7df76
getPluginRealm
public ClassRealm getPluginRealm(MavenSession session, PluginDescriptor pluginDescriptor) throws PluginResolutionException, PluginManagerException
{    ClassRealm pluginRealm = pluginDescriptor.getClassRealm();    if (pluginRealm != null) {        return pluginRealm;    }    mavenPluginManager.setupPluginRealm(pluginDescriptor, session, null, null, null);    return pluginDescriptor.getClassRealm();}
550e0e3de29a6332dcf6149d02cbceffc1e93f3e2e38149ba685bdf1ea20bb00
getMojoDescriptor
public MojoDescriptor getMojoDescriptor(Plugin plugin, String goal, List<RemoteRepository> repositories, RepositorySystemSession session) throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, MojoNotFoundException, InvalidPluginDescriptorException
{    return mavenPluginManager.getMojoDescriptor(plugin, goal, repositories, session);}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    return hashCode;}
8d37d11c7ecfc0d0589696a89cb385888c83bd3e43ea0c95a3b4ae4ef78180ce
equals
public boolean equals(Object o)
{    if (o == this) {        return true;    }    if (!(o instanceof CacheKey)) {        return false;    }    CacheKey other = (CacheKey) o;    return ids.equals(other.ids) && files.equals(other.files) && timestamps.equals(other.timestamps) && sizes.equals(other.sizes);}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return files.toString();}
aba67a056242e1f2baff3c800877dace9fa9881dcc56a2d18491bd187d5ac51a
createKey
public Key createKey(List<Artifact> extensionArtifacts)
{    return new CacheKey(extensionArtifacts);}
ac1004c5cbc510c5875a14dd2ad92ee037a2d5abbb3ceb451aa48b09a0395530
get
public CacheRecord get(Key key)
{    return cache.get(key);}
a464de88d84d6f67fdb484b1f0f205514f990c49f9daf3a4a582fe7d63277f9f
put
public CacheRecord put(Key key, ClassRealm extensionRealm, ExtensionDescriptor extensionDescriptor, List<Artifact> artifacts)
{    Objects.requireNonNull(extensionRealm, "extensionRealm cannot be null");    if (cache.containsKey(key)) {        throw new IllegalStateException("Duplicate extension realm for extension " + key);    }    CacheRecord record = new CacheRecord(extensionRealm, extensionDescriptor, artifacts);    cache.put(key, record);    return record;}
ea956eca0ceec4b07db63def8a0f238be4f058fb174f02b053447578581df262
flush
public void flush()
{    for (CacheRecord record : cache.values()) {        ClassRealm realm = record.getRealm();        try {            realm.getWorld().disposeRealm(realm.getId());        } catch (NoSuchRealmException e) {                }    }    cache.clear();}
74571427a40a593456ed72337d7b0bb5110d8203c76fea787335ca80bf426036
register
public void register(MavenProject project, Key key, CacheRecord record)
{}
b9fb45dfe6e038cbb203f12831a900a458fc92323c8db50edb08712565a288f2
dispose
public void dispose()
{    flush();}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return plugin.getId();}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    return hashCode;}
8d37d11c7ecfc0d0589696a89cb385888c83bd3e43ea0c95a3b4ae4ef78180ce
equals
public boolean equals(Object o)
{    if (o == this) {        return true;    }    if (!(o instanceof CacheKey)) {        return false;    }    CacheKey that = (CacheKey) o;    return CacheUtils.pluginEquals(plugin, that.plugin) && Objects.equals(workspace, that.workspace) && Objects.equals(localRepo, that.localRepo) && RepositoryUtils.repositoriesEquals(repositories, that.repositories) && Objects.equals(filter, that.filter);}
dd1e5831d89e205efee205b8dbea4a7409dce9384bca83e7502724c0744118a8
createKey
public Key createKey(Plugin plugin, DependencyFilter extensionFilter, List<RemoteRepository> repositories, RepositorySystemSession session)
{    return new CacheKey(plugin, extensionFilter, repositories, session);}
924eae06f99c30a6e7f36a210cf9b4f5834ae922666bdf435d5a50e839548e2b
get
public CacheRecord get(Key key) throws PluginResolutionException
{    CacheRecord cacheRecord = cache.get(key);    if (cacheRecord != null && cacheRecord.getException() != null) {        throw cacheRecord.getException();    }    return cacheRecord;}
2052d99316fb2cc550ba639337460bd7973937ff01be7cca66ae9dfea6924986
put
public CacheRecord put(Key key, List<Artifact> pluginArtifacts)
{    Objects.requireNonNull(pluginArtifacts, "pluginArtifacts cannot be null");    assertUniqueKey(key);    CacheRecord record = new CacheRecord(Collections.unmodifiableList(new ArrayList<>(pluginArtifacts)));    cache.put(key, record);    return record;}
110359f154a9fad8ac3e577596bfa22cae29eb997532318694802ff9490a6ee3
assertUniqueKey
protected void assertUniqueKey(Key key)
{    if (cache.containsKey(key)) {        throw new IllegalStateException("Duplicate artifact resolution result for plugin " + key);    }}
48f4650bf22a88c08ddd3825d51c35ebcfa2ad12fd4bfecd76cd221553beae5d
put
public CacheRecord put(Key key, PluginResolutionException exception)
{    Objects.requireNonNull(exception, "exception cannot be null");    assertUniqueKey(key);    CacheRecord record = new CacheRecord(exception);    cache.put(key, record);    return record;}
ea956eca0ceec4b07db63def8a0f238be4f058fb174f02b053447578581df262
flush
public void flush()
{    cache.clear();}
059533a42e882e351ef9ee86393604c9658f99fc76194c448ec455ee03bc04b0
pluginHashCode
protected static int pluginHashCode(Plugin plugin)
{    return CacheUtils.pluginHashCode(plugin);}
a6bc06d725d69a3f490507828dac93645fd42f5b4ab5a724a686f2f16ab0528e
pluginEquals
protected static boolean pluginEquals(Plugin a, Plugin b)
{    return CacheUtils.pluginEquals(a, b);}
98e2b11174cf109a8899f4b2b9a7fd49850806d92daa8c96f8ae9c63f7609d4a
register
public void register(MavenProject project, Key cacheKey, CacheRecord record)
{}
ea956eca0ceec4b07db63def8a0f238be4f058fb174f02b053447578581df262
flush
public void flush()
{    descriptors.clear();}
0bd6ddb684dd0e9673ada490a12b26fda14f469767605acacbf9d8f5e5fbdad5
createKey
public Key createKey(Plugin plugin, List<RemoteRepository> repositories, RepositorySystemSession session)
{    return new CacheKey(plugin, repositories, session);}
8c9581c5c317030823308230a6fee7eaf3e3c66b4f0eedf76f3d260319573228
get
public PluginDescriptor get(Key cacheKey)
{    return clone(descriptors.get(cacheKey));}
4696621472dc03dd8654d381cb156ebc928311b4005ae1f26d511408f08826ee
put
public void put(Key cacheKey, PluginDescriptor pluginDescriptor)
{    descriptors.put(cacheKey, clone(pluginDescriptor));}
5b108e57ac10c3dfcbd36024f9031776f363c2027f0e2142a4efe5984e67e015
clone
protected static PluginDescriptor clone(PluginDescriptor original)
{    PluginDescriptor clone = null;    if (original != null) {        clone = new PluginDescriptor();        clone.setGroupId(original.getGroupId());        clone.setArtifactId(original.getArtifactId());        clone.setVersion(original.getVersion());        clone.setGoalPrefix(original.getGoalPrefix());        clone.setInheritedByDefault(original.isInheritedByDefault());        clone.setName(original.getName());        clone.setDescription(original.getDescription());        clone.setRequiredMavenVersion(original.getRequiredMavenVersion());        clone.setPluginArtifact(ArtifactUtils.copyArtifactSafe(original.getPluginArtifact()));        clone.setComponents(clone(original.getMojos(), clone));        clone.setId(original.getId());        clone.setIsolatedRealm(original.isIsolatedRealm());        clone.setSource(original.getSource());        clone.setDependencies(original.getDependencies());    }    return clone;}
a2e69839a61d5a123eee322311b6a9cb725f040e2b468f1c06d5551858a0cd7a
clone
private static List<ComponentDescriptor<?>> clone(List<MojoDescriptor> mojos, PluginDescriptor pluginDescriptor)
{    List<ComponentDescriptor<?>> clones = null;    if (mojos != null) {        clones = new ArrayList<>(mojos.size());        for (MojoDescriptor mojo : mojos) {            MojoDescriptor clone = mojo.clone();            clone.setPluginDescriptor(pluginDescriptor);            clones.add(clone);        }    }    return clones;}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    return hashCode;}
4afeb0868b55bdd8e18a00a3cb43d83e0714378d1c4bb36f0936daefc060e2e8
equals
public boolean equals(Object obj)
{    if (this == obj) {        return true;    }    if (!(obj instanceof CacheKey)) {        return false;    }    CacheKey that = (CacheKey) obj;    return Objects.equals(this.artifactId, that.artifactId) && Objects.equals(this.groupId, that.groupId) && Objects.equals(this.version, that.version) && Objects.equals(this.localRepo, that.localRepo) && Objects.equals(this.workspace, that.workspace) && RepositoryUtils.repositoriesEquals(this.repositories, that.repositories);}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return groupId + ':' + artifactId + ':' + version;}
f604ba885cbfa359f000114d7abb79d283f6ca61f5ed2d4da8a27b83770074da
hash
private static int hash(Object obj)
{    return obj != null ? obj.hashCode() : 0;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return plugin.getId();}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    return hashCode;}
8d37d11c7ecfc0d0589696a89cb385888c83bd3e43ea0c95a3b4ae4ef78180ce
equals
public boolean equals(Object o)
{    if (o == this) {        return true;    }    if (!(o instanceof CacheKey)) {        return false;    }    CacheKey that = (CacheKey) o;    return parentRealm == that.parentRealm && CacheUtils.pluginEquals(plugin, that.plugin) && Objects.equals(workspace, that.workspace) && Objects.equals(localRepo, that.localRepo) && RepositoryUtils.repositoriesEquals(this.repositories, that.repositories) && Objects.equals(filter, that.filter) && Objects.equals(foreignImports, that.foreignImports);}
819cd631603808025b4587e5e0f2cca81984f974256be057ed133a335977b217
createKey
public Key createKey(Plugin plugin, ClassLoader parentRealm, Map<String, ClassLoader> foreignImports, DependencyFilter dependencyFilter, List<RemoteRepository> repositories, RepositorySystemSession session)
{    return new CacheKey(plugin, parentRealm, foreignImports, dependencyFilter, repositories, session);}
ac1004c5cbc510c5875a14dd2ad92ee037a2d5abbb3ceb451aa48b09a0395530
get
public CacheRecord get(Key key)
{    return cache.get(key);}
5274993f73b9b21bf9f24704075a840edf42b29ec0399085cc02ad49fa571891
put
public CacheRecord put(Key key, ClassRealm pluginRealm, List<Artifact> pluginArtifacts)
{    Objects.requireNonNull(pluginRealm, "pluginRealm cannot be null");    Objects.requireNonNull(pluginArtifacts, "pluginArtifacts cannot be null");    if (cache.containsKey(key)) {        throw new IllegalStateException("Duplicate plugin realm for plugin " + key);    }    CacheRecord record = new CacheRecord(pluginRealm, pluginArtifacts);    cache.put(key, record);    return record;}
ea956eca0ceec4b07db63def8a0f238be4f058fb174f02b053447578581df262
flush
public void flush()
{    for (CacheRecord record : cache.values()) {        ClassRealm realm = record.getRealm();        try {            realm.getWorld().disposeRealm(realm.getId());        } catch (NoSuchRealmException e) {                }    }    cache.clear();}
059533a42e882e351ef9ee86393604c9658f99fc76194c448ec455ee03bc04b0
pluginHashCode
protected static int pluginHashCode(Plugin plugin)
{    return CacheUtils.pluginHashCode(plugin);}
a6bc06d725d69a3f490507828dac93645fd42f5b4ab5a724a686f2f16ab0528e
pluginEquals
protected static boolean pluginEquals(Plugin a, Plugin b)
{    return CacheUtils.pluginEquals(a, b);}
74571427a40a593456ed72337d7b0bb5110d8203c76fea787335ca80bf426036
register
public void register(MavenProject project, Key key, CacheRecord record)
{}
b9fb45dfe6e038cbb203f12831a900a458fc92323c8db50edb08712565a288f2
dispose
public void dispose()
{    flush();}
cf647643514258c9a0c68e33021ffe1a88feac317927be05a3bbb5c9879955bb
getRealm
public ClassRealm getRealm()
{    return realm;}
e40212911251ca216c9521cf2208704ecbfb08eb9c8dccbe14cd765580ee21dc
getDescriptor
public ExtensionDescriptor getDescriptor()
{    return descriptor;}
a0643fa51f5c50a137f4c462d6e6ca72900bdcb1f098a11391a7572bc24da55e
getArtifacts
public List<Artifact> getArtifacts()
{    return artifacts;}
831f920abca063a755d000ca34ba6f51a4ddc4e9ccd8b9d35e5b0d4c14c2b2fb
setSession
public void setSession(MavenSession session)
{    AtomicReference<MavenSession> reference = DefaultLegacySupport.SESSION.get();    if (reference != null) {        reference.set(null);    }    if (session == null && reference != null) {        DefaultLegacySupport.SESSION.remove();    } else {        DefaultLegacySupport.SESSION.set(new AtomicReference<>(session));    }}
5f9beff804d491307ef6fcfa2f8b51cce53a3674d5c1d3d683eb56a19c4083d7
getSession
public MavenSession getSession()
{    AtomicReference<MavenSession> currentSession = DefaultLegacySupport.SESSION.get();    return currentSession != null ? currentSession.get() : null;}
249c16421d8af9b25ee93ecd862c341aa3afc8023f876e65004c3f450248c6a6
getRepositorySession
public RepositorySystemSession getRepositorySession()
{    MavenSession session = getSession();    return (session != null) ? session.getRepositorySession() : null;}
7f3d7260ba77d1d094a7d46e22fbff98abe0fcede10ff8e77186408b93ca4f75
getPluginDescriptor
public synchronized PluginDescriptor getPluginDescriptor(Plugin plugin, List<RemoteRepository> repositories, RepositorySystemSession session) throws PluginResolutionException, PluginDescriptorParsingException, InvalidPluginDescriptorException
{    PluginDescriptorCache.Key cacheKey = pluginDescriptorCache.createKey(plugin, repositories, session);    PluginDescriptor pluginDescriptor = pluginDescriptorCache.get(cacheKey);    if (pluginDescriptor == null) {        org.eclipse.aether.artifact.Artifact artifact = pluginDependenciesResolver.resolve(plugin, repositories, session);        Artifact pluginArtifact = RepositoryUtils.toArtifact(artifact);        pluginDescriptor = extractPluginDescriptor(pluginArtifact, plugin);        pluginDescriptor.setRequiredMavenVersion(artifact.getProperty("requiredMavenVersion", null));        pluginDescriptorCache.put(cacheKey, pluginDescriptor);    }    pluginDescriptor.setPlugin(plugin);    return pluginDescriptor;}
ac19a9c44ce386388750e2237eb24f0785e4f65a087e175d9582f6cbddaf87d1
extractPluginDescriptor
private PluginDescriptor extractPluginDescriptor(Artifact pluginArtifact, Plugin plugin) throws PluginDescriptorParsingException, InvalidPluginDescriptorException
{    PluginDescriptor pluginDescriptor = null;    File pluginFile = pluginArtifact.getFile();    try {        if (pluginFile.isFile()) {            try (JarFile pluginJar = new JarFile(pluginFile, false)) {                ZipEntry pluginDescriptorEntry = pluginJar.getEntry(getPluginDescriptorLocation());                if (pluginDescriptorEntry != null) {                    InputStream is = pluginJar.getInputStream(pluginDescriptorEntry);                    pluginDescriptor = parsePluginDescriptor(is, plugin, pluginFile.getAbsolutePath());                }            }        } else {            File pluginXml = new File(pluginFile, getPluginDescriptorLocation());            if (pluginXml.isFile()) {                try (InputStream is = new BufferedInputStream(new FileInputStream(pluginXml))) {                    pluginDescriptor = parsePluginDescriptor(is, plugin, pluginXml.getAbsolutePath());                }            }        }        if (pluginDescriptor == null) {            throw new IOException("No plugin descriptor found at " + getPluginDescriptorLocation());        }    } catch (IOException e) {        throw new PluginDescriptorParsingException(plugin, pluginFile.getAbsolutePath(), e);    }    MavenPluginValidator validator = new MavenPluginValidator(pluginArtifact);    validator.validate(pluginDescriptor);    if (validator.hasErrors()) {        throw new InvalidPluginDescriptorException("Invalid plugin descriptor for " + plugin.getId() + " (" + pluginFile + ")", validator.getErrors());    }    pluginDescriptor.setPluginArtifact(pluginArtifact);    return pluginDescriptor;}
2858048e73fb3fbe397c2ca4b3b889d61e74d8cde0701b614e6f2e5a109c7aba
getPluginDescriptorLocation
private String getPluginDescriptorLocation()
{    return "META-INF/maven/plugin.xml";}
30e70f1dc43cc2f3cc5ea82a7d5d2c5247008b5e3c92acea79cd287500811ab9
parsePluginDescriptor
private PluginDescriptor parsePluginDescriptor(InputStream is, Plugin plugin, String descriptorLocation) throws PluginDescriptorParsingException
{    try {        Reader reader = ReaderFactory.newXmlReader(is);        PluginDescriptor pluginDescriptor = builder.build(reader, descriptorLocation);        return pluginDescriptor;    } catch (IOException | PlexusConfigurationException e) {        throw new PluginDescriptorParsingException(plugin, descriptorLocation, e);    }}
953c65456ad8cbd5372ab3a17923b89f55728266f4daf0d0847f33112b652b06
getMojoDescriptor
public MojoDescriptor getMojoDescriptor(Plugin plugin, String goal, List<RemoteRepository> repositories, RepositorySystemSession session) throws MojoNotFoundException, PluginResolutionException, PluginDescriptorParsingException, InvalidPluginDescriptorException
{    PluginDescriptor pluginDescriptor = getPluginDescriptor(plugin, repositories, session);    MojoDescriptor mojoDescriptor = pluginDescriptor.getMojo(goal);    if (mojoDescriptor == null) {        throw new MojoNotFoundException(goal, pluginDescriptor);    }    return mojoDescriptor;}
fe8c4c3303f23553785584369c8600be8fea77396ac32b7956cde032a5e2e78f
checkRequiredMavenVersion
public void checkRequiredMavenVersion(PluginDescriptor pluginDescriptor) throws PluginIncompatibleException
{    String requiredMavenVersion = pluginDescriptor.getRequiredMavenVersion();    if (StringUtils.isNotBlank(requiredMavenVersion)) {        try {            if (!runtimeInformation.isMavenVersion(requiredMavenVersion)) {                throw new PluginIncompatibleException(pluginDescriptor.getPlugin(), "The plugin " + pluginDescriptor.getId() + " requires Maven version " + requiredMavenVersion);            }        } catch (RuntimeException e) {            logger.warn("Could not verify plugin's Maven prerequisite: " + e.getMessage());        }    }}
040ec29b6c94f901ebd428ea5ddbc7e0772c904c6cda76442cf4b76693cc2094
setupPluginRealm
public synchronized void setupPluginRealm(PluginDescriptor pluginDescriptor, MavenSession session, ClassLoader parent, List<String> imports, DependencyFilter filter) throws PluginResolutionException, PluginContainerException
{    Plugin plugin = pluginDescriptor.getPlugin();    MavenProject project = session.getCurrentProject();    if (plugin.isExtensions()) {        ExtensionRealmCache.CacheRecord extensionRecord;        try {            RepositorySystemSession repositorySession = session.getRepositorySession();            extensionRecord = setupExtensionsRealm(project, plugin, repositorySession);        } catch (PluginManagerException e) {                        throw new IllegalStateException(e);        }        ClassRealm pluginRealm = extensionRecord.getRealm();        List<Artifact> pluginArtifacts = extensionRecord.getArtifacts();        for (ComponentDescriptor<?> componentDescriptor : pluginDescriptor.getComponents()) {            componentDescriptor.setRealm(pluginRealm);        }        pluginDescriptor.setClassRealm(pluginRealm);        pluginDescriptor.setArtifacts(pluginArtifacts);    } else {        Map<String, ClassLoader> foreignImports = calcImports(project, parent, imports);        PluginRealmCache.Key cacheKey = pluginRealmCache.createKey(plugin, parent, foreignImports, filter, project.getRemotePluginRepositories(), session.getRepositorySession());        PluginRealmCache.CacheRecord cacheRecord = pluginRealmCache.get(cacheKey);        if (cacheRecord != null) {            pluginDescriptor.setClassRealm(cacheRecord.getRealm());            pluginDescriptor.setArtifacts(new ArrayList<>(cacheRecord.getArtifacts()));            for (ComponentDescriptor<?> componentDescriptor : pluginDescriptor.getComponents()) {                componentDescriptor.setRealm(cacheRecord.getRealm());            }        } else {            createPluginRealm(pluginDescriptor, session, parent, foreignImports, filter);            cacheRecord = pluginRealmCache.put(cacheKey, pluginDescriptor.getClassRealm(), pluginDescriptor.getArtifacts());        }        pluginRealmCache.register(project, cacheKey, cacheRecord);    }}
f7063f36ed28980a551e0c7f4da7aaa238125454dd93e40c130378188d3d14d4
createPluginRealm
private void createPluginRealm(PluginDescriptor pluginDescriptor, MavenSession session, ClassLoader parent, Map<String, ClassLoader> foreignImports, DependencyFilter filter) throws PluginResolutionException, PluginContainerException
{    Plugin plugin = Objects.requireNonNull(pluginDescriptor.getPlugin(), "pluginDescriptor.plugin cannot be null");    Artifact pluginArtifact = Objects.requireNonNull(pluginDescriptor.getPluginArtifact(), "pluginDescriptor.pluginArtifact cannot be null");    MavenProject project = session.getCurrentProject();    final ClassRealm pluginRealm;    final List<Artifact> pluginArtifacts;    RepositorySystemSession repositorySession = session.getRepositorySession();    DependencyFilter dependencyFilter = project.getExtensionDependencyFilter();    dependencyFilter = AndDependencyFilter.newInstance(dependencyFilter, filter);    DependencyNode root = pluginDependenciesResolver.resolve(plugin, RepositoryUtils.toArtifact(pluginArtifact), dependencyFilter, project.getRemotePluginRepositories(), repositorySession);    PreorderNodeListGenerator nlg = new PreorderNodeListGenerator();    root.accept(nlg);    pluginArtifacts = toMavenArtifacts(root, nlg);    pluginRealm = classRealmManager.createPluginRealm(plugin, parent, null, foreignImports, toAetherArtifacts(pluginArtifacts));    discoverPluginComponents(pluginRealm, plugin, pluginDescriptor);    pluginDescriptor.setClassRealm(pluginRealm);    pluginDescriptor.setArtifacts(pluginArtifacts);}
98132f8f8ab9eeda6d4ccf644dbe592e2dc4b7d9b1a8baa5ed1ebbe94993c6ac
discoverPluginComponents
private void discoverPluginComponents(final ClassRealm pluginRealm, Plugin plugin, PluginDescriptor pluginDescriptor) throws PluginContainerException
{    try {        if (pluginDescriptor != null) {            for (ComponentDescriptor<?> componentDescriptor : pluginDescriptor.getComponents()) {                componentDescriptor.setRealm(pluginRealm);                container.addComponentDescriptor(componentDescriptor);            }        }        ((DefaultPlexusContainer) container).discoverComponents(pluginRealm, new SessionScopeModule(container), new MojoExecutionScopeModule(container));    } catch (ComponentLookupException | CycleDetectedInComponentGraphException e) {        throw new PluginContainerException(plugin, pluginRealm, "Error in component graph of plugin " + plugin.getId() + ": " + e.getMessage(), e);    }}
7764f2964fa70fb183c8ce5530cb4a1d2177f8a042547ceb6993bb55b7061b0a
toAetherArtifacts
private List<org.eclipse.aether.artifact.Artifact> toAetherArtifacts(final List<Artifact> pluginArtifacts)
{    return new ArrayList<>(RepositoryUtils.toArtifacts(pluginArtifacts));}
a7a9144b0485682b3814ee3e0e36cecb90fcd23f9fc8a8b3e589e65453716d86
toMavenArtifacts
private List<Artifact> toMavenArtifacts(DependencyNode root, PreorderNodeListGenerator nlg)
{    List<Artifact> artifacts = new ArrayList<>(nlg.getNodes().size());    RepositoryUtils.toArtifacts(artifacts, Collections.singleton(root), Collections.<String>emptyList(), null);    for (Iterator<Artifact> it = artifacts.iterator(); it.hasNext(); ) {        Artifact artifact = it.next();        if (artifact.getFile() == null) {            it.remove();        }    }    return Collections.unmodifiableList(artifacts);}
cbb7b94d59ada3710c928d0fcb3eecc06bf38c4f7b0ffa4f76c0266e4b3fd9c1
calcImports
private Map<String, ClassLoader> calcImports(MavenProject project, ClassLoader parent, List<String> imports)
{    Map<String, ClassLoader> foreignImports = new HashMap<>();    ClassLoader projectRealm = project.getClassRealm();    if (projectRealm != null) {        foreignImports.put("", projectRealm);    } else {        foreignImports.put("", classRealmManager.getMavenApiRealm());    }    if (parent != null && imports != null) {        for (String parentImport : imports) {            foreignImports.put(parentImport, parent);        }    }    return foreignImports;}
6880b416e36bc7b003c99f6fc234b5b1b7d5e8b84334f80b178d23ffe194a503
getConfiguredMojo
public T getConfiguredMojo(Class<T> mojoInterface, MavenSession session, MojoExecution mojoExecution) throws PluginConfigurationException, PluginContainerException
{    MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();    PluginDescriptor pluginDescriptor = mojoDescriptor.getPluginDescriptor();    ClassRealm pluginRealm = pluginDescriptor.getClassRealm();    if (logger.isDebugEnabled()) {        logger.debug("Configuring mojo " + mojoDescriptor.getId() + " from plugin realm " + pluginRealm);    }                ClassRealm oldLookupRealm = container.setLookupRealm(pluginRealm);    ClassLoader oldClassLoader = Thread.currentThread().getContextClassLoader();    Thread.currentThread().setContextClassLoader(pluginRealm);    try {        T mojo;        try {            mojo = container.lookup(mojoInterface, mojoDescriptor.getRoleHint());        } catch (ComponentLookupException e) {            Throwable cause = e.getCause();            while (cause != null && !(cause instanceof LinkageError) && !(cause instanceof ClassNotFoundException)) {                cause = cause.getCause();            }            if ((cause instanceof NoClassDefFoundError) || (cause instanceof ClassNotFoundException)) {                ByteArrayOutputStream os = new ByteArrayOutputStream(1024);                PrintStream ps = new PrintStream(os);                ps.println("Unable to load the mojo '" + mojoDescriptor.getGoal() + "' in the plugin '" + pluginDescriptor.getId() + "'. A required class is missing: " + cause.getMessage());                pluginRealm.display(ps);                throw new PluginContainerException(mojoDescriptor, pluginRealm, os.toString(), cause);            } else if (cause instanceof LinkageError) {                ByteArrayOutputStream os = new ByteArrayOutputStream(1024);                PrintStream ps = new PrintStream(os);                ps.println("Unable to load the mojo '" + mojoDescriptor.getGoal() + "' in the plugin '" + pluginDescriptor.getId() + "' due to an API incompatibility: " + e.getClass().getName() + ": " + cause.getMessage());                pluginRealm.display(ps);                throw new PluginContainerException(mojoDescriptor, pluginRealm, os.toString(), cause);            }            throw new PluginContainerException(mojoDescriptor, pluginRealm, "Unable to load the mojo '" + mojoDescriptor.getGoal() + "' (or one of its required components) from the plugin '" + pluginDescriptor.getId() + "'", e);        }        if (mojo instanceof ContextEnabled) {            MavenProject project = session.getCurrentProject();            Map<String, Object> pluginContext = session.getPluginContext(pluginDescriptor, project);            if (pluginContext != null) {                pluginContext.put("project", project);                pluginContext.put("pluginDescriptor", pluginDescriptor);                ((ContextEnabled) mojo).setPluginContext(pluginContext);            }        }        if (mojo instanceof Mojo) {            Logger mojoLogger = loggerManager.getLoggerForComponent(mojoDescriptor.getImplementation());            ((Mojo) mojo).setLog(new DefaultLog(mojoLogger));        }        Xpp3Dom dom = mojoExecution.getConfiguration();        PlexusConfiguration pomConfiguration;        if (dom == null) {            pomConfiguration = new XmlPlexusConfiguration("configuration");        } else {            pomConfiguration = new XmlPlexusConfiguration(dom);        }        ExpressionEvaluator expressionEvaluator = new PluginParameterExpressionEvaluator(session, mojoExecution);        populatePluginFields(mojo, mojoDescriptor, pluginRealm, pomConfiguration, expressionEvaluator);        return mojo;    } finally {        Thread.currentThread().setContextClassLoader(oldClassLoader);        container.setLookupRealm(oldLookupRealm);    }}
22da4e946b3fe8e433f86c45f707cf1a4942e28287653a622ded92445d3b03fd
populatePluginFields
private void populatePluginFields(Object mojo, MojoDescriptor mojoDescriptor, ClassRealm pluginRealm, PlexusConfiguration configuration, ExpressionEvaluator expressionEvaluator) throws PluginConfigurationException
{    ComponentConfigurator configurator = null;    String configuratorId = mojoDescriptor.getComponentConfigurator();    if (StringUtils.isEmpty(configuratorId)) {        configuratorId = "basic";    }    try {                        configurator = container.lookup(ComponentConfigurator.class, configuratorId);        ConfigurationListener listener = new DebugConfigurationListener(logger);        ValidatingConfigurationListener validator = new ValidatingConfigurationListener(mojo, mojoDescriptor, listener);        logger.debug("Configuring mojo '" + mojoDescriptor.getId() + "' with " + configuratorId + " configurator -->");        configurator.configureComponent(mojo, configuration, expressionEvaluator, pluginRealm, validator);        logger.debug("-- end configuration --");        Collection<Parameter> missingParameters = validator.getMissingParameters();        if (!missingParameters.isEmpty()) {            if ("basic".equals(configuratorId)) {                throw new PluginParameterException(mojoDescriptor, new ArrayList<>(missingParameters));            } else {                /*                     * NOTE: Other configurators like the map-oriented one don't call into the listener, so do it the                     * hard way.                     */                validateParameters(mojoDescriptor, configuration, expressionEvaluator);            }        }    } catch (ComponentConfigurationException e) {        String message = "Unable to parse configuration of mojo " + mojoDescriptor.getId();        if (e.getFailedConfiguration() != null) {            message += " for parameter " + e.getFailedConfiguration().getName();        }        message += ": " + e.getMessage();        throw new PluginConfigurationException(mojoDescriptor.getPluginDescriptor(), message, e);    } catch (ComponentLookupException e) {        throw new PluginConfigurationException(mojoDescriptor.getPluginDescriptor(), "Unable to retrieve component configurator " + configuratorId + " for configuration of mojo " + mojoDescriptor.getId(), e);    } catch (NoClassDefFoundError e) {        ByteArrayOutputStream os = new ByteArrayOutputStream(1024);        PrintStream ps = new PrintStream(os);        ps.println("A required class was missing during configuration of mojo " + mojoDescriptor.getId() + ": " + e.getMessage());        pluginRealm.display(ps);        throw new PluginConfigurationException(mojoDescriptor.getPluginDescriptor(), os.toString(), e);    } catch (LinkageError e) {        ByteArrayOutputStream os = new ByteArrayOutputStream(1024);        PrintStream ps = new PrintStream(os);        ps.println("An API incompatibility was encountered during configuration of mojo " + mojoDescriptor.getId() + ": " + e.getClass().getName() + ": " + e.getMessage());        pluginRealm.display(ps);        throw new PluginConfigurationException(mojoDescriptor.getPluginDescriptor(), os.toString(), e);    } finally {        if (configurator != null) {            try {                container.release(configurator);            } catch (ComponentLifecycleException e) {                logger.debug("Failed to release mojo configurator - ignoring.");            }        }    }}
04db221fb6c38f58605df32d41d4fdd02fd419aee2a05cb45d74c40e60765153
validateParameters
private void validateParameters(MojoDescriptor mojoDescriptor, PlexusConfiguration configuration, ExpressionEvaluator expressionEvaluator) throws ComponentConfigurationException, PluginParameterException
{    if (mojoDescriptor.getParameters() == null) {        return;    }    List<Parameter> invalidParameters = new ArrayList<>();    for (Parameter parameter : mojoDescriptor.getParameters()) {        if (!parameter.isRequired()) {            continue;        }        Object value = null;        PlexusConfiguration config = configuration.getChild(parameter.getName(), false);        if (config != null) {            String expression = config.getValue(null);            try {                value = expressionEvaluator.evaluate(expression);                if (value == null) {                    value = config.getAttribute("default-value", null);                }            } catch (ExpressionEvaluationException e) {                String msg = "Error evaluating the expression '" + expression + "' for configuration value '" + configuration.getName() + "'";                throw new ComponentConfigurationException(configuration, msg, e);            }        }        if (value == null && (config == null || config.getChildCount() <= 0)) {            invalidParameters.add(parameter);        }    }    if (!invalidParameters.isEmpty()) {        throw new PluginParameterException(mojoDescriptor, invalidParameters);    }}
9e7440a506e890e09b21bae5b212833bfc1484cc32cebed370b54e0ff093cf6a
releaseMojo
public void releaseMojo(Object mojo, MojoExecution mojoExecution)
{    if (mojo != null) {        try {            container.release(mojo);        } catch (ComponentLifecycleException e) {            String goalExecId = mojoExecution.getGoal();            if (mojoExecution.getExecutionId() != null) {                goalExecId += " {execution: " + mojoExecution.getExecutionId() + "}";            }            logger.debug("Error releasing mojo for " + goalExecId, e);        }    }}
2b83c135d757a66be3bcc33e0a48870f32e6184566e730fa5eab3532ffa6ff7d
setupExtensionsRealm
public ExtensionRealmCache.CacheRecord setupExtensionsRealm(MavenProject project, Plugin plugin, RepositorySystemSession session) throws PluginManagerException
{    @SuppressWarnings("unchecked")    Map<String, ExtensionRealmCache.CacheRecord> pluginRealms = (Map<String, ExtensionRealmCache.CacheRecord>) project.getContextValue(KEY_EXTENSIONS_REALMS);    if (pluginRealms == null) {        pluginRealms = new HashMap<>();        project.setContextValue(KEY_EXTENSIONS_REALMS, pluginRealms);    }    final String pluginKey = plugin.getId();    ExtensionRealmCache.CacheRecord extensionRecord = pluginRealms.get(pluginKey);    if (extensionRecord != null) {        return extensionRecord;    }    final List<RemoteRepository> repositories = project.getRemotePluginRepositories();        if (plugin.getVersion() == null) {        PluginVersionRequest versionRequest = new DefaultPluginVersionRequest(plugin, session, repositories);        try {            plugin.setVersion(pluginVersionResolver.resolve(versionRequest).getVersion());        } catch (PluginVersionResolutionException e) {            throw new PluginManagerException(plugin, e.getMessage(), e);        }    }        List<Artifact> artifacts;    PluginArtifactsCache.Key cacheKey = pluginArtifactsCache.createKey(plugin, null, repositories, session);    PluginArtifactsCache.CacheRecord recordArtifacts;    try {        recordArtifacts = pluginArtifactsCache.get(cacheKey);    } catch (PluginResolutionException e) {        throw new PluginManagerException(plugin, e.getMessage(), e);    }    if (recordArtifacts != null) {        artifacts = recordArtifacts.getArtifacts();    } else {        try {            artifacts = resolveExtensionArtifacts(plugin, repositories, session);            recordArtifacts = pluginArtifactsCache.put(cacheKey, artifacts);        } catch (PluginResolutionException e) {            pluginArtifactsCache.put(cacheKey, e);            pluginArtifactsCache.register(project, cacheKey, recordArtifacts);            throw new PluginManagerException(plugin, e.getMessage(), e);        }    }    pluginArtifactsCache.register(project, cacheKey, recordArtifacts);        final ExtensionRealmCache.Key extensionKey = extensionRealmCache.createKey(artifacts);    extensionRecord = extensionRealmCache.get(extensionKey);    if (extensionRecord == null) {        ClassRealm extensionRealm = classRealmManager.createExtensionRealm(plugin, toAetherArtifacts(artifacts));                PluginDescriptor pluginDescriptor = null;        if (plugin.isExtensions() && !artifacts.isEmpty()) {                        try {                pluginDescriptor = extractPluginDescriptor(artifacts.get(0), plugin);            } catch (PluginDescriptorParsingException | InvalidPluginDescriptorException e) {                        }        }        discoverPluginComponents(extensionRealm, plugin, pluginDescriptor);        ExtensionDescriptor extensionDescriptor = null;        Artifact extensionArtifact = artifacts.get(0);        try {            extensionDescriptor = extensionDescriptorBuilder.build(extensionArtifact.getFile());        } catch (IOException e) {            String message = "Invalid extension descriptor for " + plugin.getId() + ": " + e.getMessage();            if (logger.isDebugEnabled()) {                logger.error(message, e);            } else {                logger.error(message);            }        }        extensionRecord = extensionRealmCache.put(extensionKey, extensionRealm, extensionDescriptor, artifacts);    }    extensionRealmCache.register(project, extensionKey, extensionRecord);    pluginRealms.put(pluginKey, extensionRecord);    return extensionRecord;}
bbba49e8d08c4224447df4cb760f92cbb40fc6bd61f012cd53eb9799f452305d
resolveExtensionArtifacts
private List<Artifact> resolveExtensionArtifacts(Plugin extensionPlugin, List<RemoteRepository> repositories, RepositorySystemSession session) throws PluginResolutionException
{    DependencyNode root = pluginDependenciesResolver.resolve(extensionPlugin, null, null, repositories, session);    PreorderNodeListGenerator nlg = new PreorderNodeListGenerator();    root.accept(nlg);    return toMavenArtifacts(root, nlg);}
e9944475567fc2dca861a4c22fc73236622f815fd2adb57ce1b033d6e37b378e
toArtifact
private Artifact toArtifact(Plugin plugin, RepositorySystemSession session)
{    return new DefaultArtifact(plugin.getGroupId(), plugin.getArtifactId(), null, "jar", plugin.getVersion(), session.getArtifactTypeRegistry().get("maven-plugin"));}
f9b7ac9c21a7cd55e7aba4b8835a063952fc3cd0c7a9dbfa29a1a3bf4c24860d
resolve
public Artifact resolve(Plugin plugin, List<RemoteRepository> repositories, RepositorySystemSession session) throws PluginResolutionException
{    RequestTrace trace = RequestTrace.newChild(null, plugin);    Artifact pluginArtifact = toArtifact(plugin, session);    try {        DefaultRepositorySystemSession pluginSession = new DefaultRepositorySystemSession(session);        pluginSession.setArtifactDescriptorPolicy(new SimpleArtifactDescriptorPolicy(true, false));        ArtifactDescriptorRequest request = new ArtifactDescriptorRequest(pluginArtifact, repositories, REPOSITORY_CONTEXT);        request.setTrace(trace);        ArtifactDescriptorResult result = repoSystem.readArtifactDescriptor(pluginSession, request);        pluginArtifact = result.getArtifact();        String requiredMavenVersion = (String) result.getProperties().get("prerequisites.maven");        if (requiredMavenVersion != null) {            Map<String, String> props = new LinkedHashMap<>(pluginArtifact.getProperties());            props.put("requiredMavenVersion", requiredMavenVersion);            pluginArtifact = pluginArtifact.setProperties(props);        }    } catch (ArtifactDescriptorException e) {        throw new PluginResolutionException(plugin, e);    }    try {        ArtifactRequest request = new ArtifactRequest(pluginArtifact, repositories, REPOSITORY_CONTEXT);        request.setTrace(trace);        pluginArtifact = repoSystem.resolveArtifact(session, request).getArtifact();    } catch (ArtifactResolutionException e) {        throw new PluginResolutionException(plugin, e);    }    return pluginArtifact;}
73083539762e7a674b7d1105182269bcc79121fdd2cd8817f3a43d7a803953cd
resolveCoreExtension
public DependencyNode resolveCoreExtension(Plugin plugin, DependencyFilter dependencyFilter, List<RemoteRepository> repositories, RepositorySystemSession session) throws PluginResolutionException
{    return resolveInternal(plugin, null, /* pluginArtifact */    dependencyFilter, null, /* transformer */    repositories, session);}
5ca3cace04efdbb74c1029f419bfb986a92835f3b00a3811bef3879d2e899e58
resolve
public DependencyNode resolve(Plugin plugin, Artifact pluginArtifact, DependencyFilter dependencyFilter, List<RemoteRepository> repositories, RepositorySystemSession session) throws PluginResolutionException
{    return resolveInternal(plugin, pluginArtifact, dependencyFilter, new PlexusUtilsInjector(), repositories, session);}
7ed8ccd5c31bf1128c96b38c65c64c597f075b8e5fa6a15d18f4b0ec42065781
resolveInternal
private DependencyNode resolveInternal(Plugin plugin, Artifact pluginArtifact, DependencyFilter dependencyFilter, DependencyGraphTransformer transformer, List<RemoteRepository> repositories, RepositorySystemSession session) throws PluginResolutionException
{    RequestTrace trace = RequestTrace.newChild(null, plugin);    if (pluginArtifact == null) {        pluginArtifact = toArtifact(plugin, session);    }    DependencyFilter collectionFilter = new ScopeDependencyFilter("provided", "test");    DependencyFilter resolutionFilter = AndDependencyFilter.newInstance(collectionFilter, dependencyFilter);    DependencyNode node;    try {        DependencySelector selector = AndDependencySelector.newInstance(session.getDependencySelector(), new WagonExcluder());        transformer = ChainedDependencyGraphTransformer.newInstance(session.getDependencyGraphTransformer(), transformer);        DefaultRepositorySystemSession pluginSession = new DefaultRepositorySystemSession(session);        pluginSession.setDependencySelector(selector);        pluginSession.setDependencyGraphTransformer(transformer);        CollectRequest request = new CollectRequest();        request.setRequestContext(REPOSITORY_CONTEXT);        request.setRepositories(repositories);        request.setRoot(new org.eclipse.aether.graph.Dependency(pluginArtifact, null));        for (Dependency dependency : plugin.getDependencies()) {            org.eclipse.aether.graph.Dependency pluginDep = RepositoryUtils.toDependency(dependency, session.getArtifactTypeRegistry());            if (!JavaScopes.SYSTEM.equals(pluginDep.getScope())) {                pluginDep = pluginDep.setScope(JavaScopes.RUNTIME);            }            request.addDependency(pluginDep);        }        DependencyRequest depRequest = new DependencyRequest(request, resolutionFilter);        depRequest.setTrace(trace);        request.setTrace(RequestTrace.newChild(trace, depRequest));        node = repoSystem.collectDependencies(pluginSession, request).getRoot();        if (logger.isDebugEnabled()) {            node.accept(new GraphLogger());        }        depRequest.setRoot(node);        repoSystem.resolveDependencies(session, depRequest);    } catch (DependencyCollectionException e) {        throw new PluginResolutionException(plugin, e);    } catch (DependencyResolutionException e) {        throw new PluginResolutionException(plugin, e.getCause());    }    return node;}
fa7695d69098c0b02361b51baa295180967a1eae9fbc0666846c0ae40fa58bc0
visitEnter
public boolean visitEnter(DependencyNode node)
{    StringBuilder buffer = new StringBuilder(128);    buffer.append(indent);    org.eclipse.aether.graph.Dependency dep = node.getDependency();    if (dep != null) {        org.eclipse.aether.artifact.Artifact art = dep.getArtifact();        buffer.append(art);        if (StringUtils.isNotEmpty(dep.getScope())) {            buffer.append(':').append(dep.getScope());        }        if (dep.isOptional()) {            buffer.append(" (optional)");        }                if ((node.getManagedBits() & DependencyNode.MANAGED_SCOPE) == DependencyNode.MANAGED_SCOPE) {            final String premanagedScope = DependencyManagerUtils.getPremanagedScope(node);            buffer.append(" (scope managed from ");            buffer.append(StringUtils.defaultString(premanagedScope, "default"));            buffer.append(')');        }        if ((node.getManagedBits() & DependencyNode.MANAGED_VERSION) == DependencyNode.MANAGED_VERSION) {            final String premanagedVersion = DependencyManagerUtils.getPremanagedVersion(node);            buffer.append(" (version managed from ");            buffer.append(StringUtils.defaultString(premanagedVersion, "default"));            buffer.append(')');        }        if ((node.getManagedBits() & DependencyNode.MANAGED_OPTIONAL) == DependencyNode.MANAGED_OPTIONAL) {            final Boolean premanagedOptional = DependencyManagerUtils.getPremanagedOptional(node);            buffer.append(" (optionality managed from ");            buffer.append(StringUtils.defaultString(premanagedOptional, "default"));            buffer.append(')');        }        if ((node.getManagedBits() & DependencyNode.MANAGED_EXCLUSIONS) == DependencyNode.MANAGED_EXCLUSIONS) {            final Collection<org.eclipse.aether.graph.Exclusion> premanagedExclusions = DependencyManagerUtils.getPremanagedExclusions(node);            buffer.append(" (exclusions managed from ");            buffer.append(StringUtils.defaultString(premanagedExclusions, "default"));            buffer.append(')');        }        if ((node.getManagedBits() & DependencyNode.MANAGED_PROPERTIES) == DependencyNode.MANAGED_PROPERTIES) {            final Map<String, String> premanagedProperties = DependencyManagerUtils.getPremanagedProperties(node);            buffer.append(" (properties managed from ");            buffer.append(StringUtils.defaultString(premanagedProperties, "default"));            buffer.append(')');        }    }    logger.debug(buffer.toString());    indent += "   ";    return true;}
3e25f59bf37cce5dd3c13da4d050df017478c00d296a2b51eaa6c870fd12fe01
visitLeave
public boolean visitLeave(DependencyNode node)
{    indent = indent.substring(0, indent.length() - 3);    return true;}
eb7e707be04373b46b2598e1aa30fa16ce7a26af232aeeaa1e78532f154038e8
executeMojo
public void executeMojo(MavenProject project, MojoExecution execution, MavenSession session) throws MojoExecutionException, ArtifactResolutionException, MojoFailureException, ArtifactNotFoundException, InvalidDependencyVersionException, PluginManagerException, PluginConfigurationException
{    throw new UnsupportedOperationException();}
6c11f838b718d7bbbcbeac362e6ec49b32209b12f99de3f87135d461f3d872b9
getPluginComponent
public Object getPluginComponent(Plugin plugin, String role, String roleHint) throws PluginManagerException, ComponentLookupException
{    MavenSession session = legacySupport.getSession();    PluginDescriptor pluginDescriptor;    try {        pluginDescriptor = pluginManager.getPluginDescriptor(plugin, session.getCurrentProject().getRemotePluginRepositories(), session.getRepositorySession());        pluginManager.setupPluginRealm(pluginDescriptor, session, null, null, null);    } catch (Exception e) {        throw new PluginManagerException(plugin, e.getMessage(), e);    }    ClassLoader oldClassLoader = Thread.currentThread().getContextClassLoader();    try {        Thread.currentThread().setContextClassLoader(pluginDescriptor.getClassRealm());        return container.lookup(role, roleHint);    } finally {        Thread.currentThread().setContextClassLoader(oldClassLoader);    }}
5ac7873a55516749101e5ad5bc256e2a91974a81b15d96b32a4be9ccc05e8099
getPluginComponents
public Map<String, Object> getPluginComponents(Plugin plugin, String role) throws ComponentLookupException, PluginManagerException
{    MavenSession session = legacySupport.getSession();    PluginDescriptor pluginDescriptor;    try {        pluginDescriptor = pluginManager.getPluginDescriptor(plugin, session.getCurrentProject().getRemotePluginRepositories(), session.getRepositorySession());        pluginManager.setupPluginRealm(pluginDescriptor, session, null, null, null);    } catch (Exception e) {        throw new PluginManagerException(plugin, e.getMessage(), e);    }    ClassLoader oldClassLoader = Thread.currentThread().getContextClassLoader();    try {        Thread.currentThread().setContextClassLoader(pluginDescriptor.getClassRealm());        return container.lookupMap(role);    } finally {        Thread.currentThread().setContextClassLoader(oldClassLoader);    }}
1110ef17307837305f24d87800c816002b36e90b847241a50d2ebfc419ad4f63
getPluginDefinitionForPrefix
public Plugin getPluginDefinitionForPrefix(String prefix, MavenSession session, MavenProject project)
{    PluginPrefixRequest request = new DefaultPluginPrefixRequest(prefix, session);    request.setPom(project.getModel());    try {        PluginPrefixResult result = pluginPrefixResolver.resolve(request);        Plugin plugin = new Plugin();        plugin.setGroupId(result.getGroupId());        plugin.setArtifactId(result.getArtifactId());        return plugin;    } catch (NoPluginFoundForPrefixException e) {        return null;    }}
f5a66a750d3366baf7ea45fa8bad6d97862a2c8a1718bd2374fe9c9873accfd4
getPluginDescriptorForPrefix
public PluginDescriptor getPluginDescriptorForPrefix(String prefix)
{    MavenSession session = legacySupport.getSession();    PluginPrefixRequest request = new DefaultPluginPrefixRequest(prefix, session);    try {        PluginPrefixResult result = pluginPrefixResolver.resolve(request);        Plugin plugin = new Plugin();        plugin.setGroupId(result.getGroupId());        plugin.setArtifactId(result.getArtifactId());        return loadPluginDescriptor(plugin, session.getCurrentProject(), session);    } catch (Exception e) {        return null;    }}
12f88a259cb2b0725a089a9c9796ee6e167aeea981767e398e46534e58fb8139
loadPluginDescriptor
public PluginDescriptor loadPluginDescriptor(Plugin plugin, MavenProject project, MavenSession session) throws ArtifactResolutionException, PluginVersionResolutionException, ArtifactNotFoundException, InvalidVersionSpecificationException, InvalidPluginException, PluginManagerException, PluginNotFoundException, PluginVersionNotFoundException
{    return verifyPlugin(plugin, project, session.getSettings(), session.getLocalRepository());}
54485afd5767c0fe3f6c3bd42ac50aae38b7fcd83a18c321739ee5139c199dcf
loadPluginFully
public PluginDescriptor loadPluginFully(Plugin plugin, MavenProject project, MavenSession session) throws ArtifactResolutionException, PluginVersionResolutionException, ArtifactNotFoundException, InvalidVersionSpecificationException, InvalidPluginException, PluginManagerException, PluginNotFoundException, PluginVersionNotFoundException
{    PluginDescriptor pluginDescriptor = loadPluginDescriptor(plugin, project, session);    try {        pluginManager.setupPluginRealm(pluginDescriptor, session, null, null, null);    } catch (PluginResolutionException e) {        throw new PluginManagerException(plugin, e.getMessage(), e);    }    return pluginDescriptor;}
367340b46b6530b754ed6a33fa471400e555136d6f5ba302bfbeead13122904a
verifyPlugin
public PluginDescriptor verifyPlugin(Plugin plugin, MavenProject project, Settings settings, ArtifactRepository localRepository) throws ArtifactResolutionException, PluginVersionResolutionException, ArtifactNotFoundException, InvalidVersionSpecificationException, InvalidPluginException, PluginManagerException, PluginNotFoundException, PluginVersionNotFoundException
{    MavenSession session = legacySupport.getSession();    if (plugin.getVersion() == null) {        PluginVersionRequest versionRequest = new DefaultPluginVersionRequest(plugin, session.getRepositorySession(), project.getRemotePluginRepositories());        plugin.setVersion(pluginVersionResolver.resolve(versionRequest).getVersion());    }    try {        return pluginManager.getPluginDescriptor(plugin, project.getRemotePluginRepositories(), session.getRepositorySession());    } catch (PluginResolutionException e) {        throw new PluginNotFoundException(plugin, project.getPluginArtifactRepositories());    } catch (PluginDescriptorParsingException | InvalidPluginDescriptorException e) {        throw new PluginManagerException(plugin, e.getMessage(), e);    }}
43db187c9c48b33f130aeb366deccfb2cfd1b01691e8fd69a065484ccb02aedf
transformGraph
public DependencyNode transformGraph(DependencyNode node, DependencyGraphTransformationContext context) throws RepositoryException
{    if (findPlexusUtils(node) == null) {        Artifact pu = new DefaultArtifact(GID, AID, null, EXT, VER);        DefaultDependencyNode child = new DefaultDependencyNode(new Dependency(pu, JavaScopes.RUNTIME));        child.setRepositories(node.getRepositories());        child.setRequestContext(node.getRequestContext());        node.getChildren().add(child);    }    return node;}
e9a299d8475834d4804950514ccf1adcf9e677a5910b7ed95fab0388cd464a52
findPlexusUtils
private DependencyNode findPlexusUtils(DependencyNode node)
{    Artifact artifact = node.getDependency().getArtifact();    if (AID.equals(artifact.getArtifactId()) && GID.equals(artifact.getGroupId()) && EXT.equals(artifact.getExtension()) && "".equals(artifact.getClassifier())) {        return node;    }    for (DependencyNode child : node.getChildren()) {        DependencyNode result = findPlexusUtils(child);        if (result != null) {            return result;        }    }    return null;}
b3455a07c34b76b9711c9e9665054a9588a677f8db90c10283f1bf369fa66441
removeBannedDependencies
public void removeBannedDependencies(Collection<Artifact> artifacts)
{    if (!bannedArtifacts.isEmpty() && artifacts != null) {        for (Iterator<Artifact> it = artifacts.iterator(); it.hasNext(); ) {            Artifact artifact = it.next();            if (bannedArtifacts.containsKey(artifact)) {                it.remove();            }        }    }}
1bfb838cc74e8a15ef0b60c4f9f18f51fd4411c9d0406befa68f62383bd279d1
startProcessChildren
public void startProcessChildren(Artifact artifact)
{    if (wagonProvider == null) {        if (isLegacyCoreArtifact(artifact)) {            coreArtifacts.addFirst(artifact);        } else if (!coreArtifacts.isEmpty() && isWagonProvider(artifact)) {            wagonProvider = artifact;            bannedArtifacts.put(artifact, null);        }    }}
3890675bb7bef6d6d3cb550a29c1475600f292b52dddd490b669f6a4ee8275af
isLegacyCoreArtifact
private boolean isLegacyCoreArtifact(Artifact artifact)
{    String version = artifact.getVersion();    return version != null && version.startsWith("2.") && !coreFilter.include(artifact);}
eb85b9a4729c117cdc5bd3fec6456a961cdaa6d6836d4f9491919650e1eb8a5a
endProcessChildren
public void endProcessChildren(Artifact artifact)
{    if (wagonProvider == artifact) {        wagonProvider = null;    } else if (coreArtifacts.peek() == artifact) {        coreArtifacts.removeFirst();    }}
7876ebac63a938a6fc7413ab09f4cadeb53ea0e77ac29d4892ab8b04d8113063
includeArtifact
public void includeArtifact(Artifact artifact)
{    if (wagonProvider != null) {        bannedArtifacts.put(artifact, null);    }}
f71c59610b9110de1600c4e05006a5483310e24fadd0e4e8da646eb9f65c1f4a
isWagonProvider
private boolean isWagonProvider(Artifact artifact)
{    if ("org.apache.maven.wagon".equals(artifact.getGroupId())) {        return artifact.getArtifactId().startsWith("wagon-");    }    return false;}
9dd3c322e4c04988386abeac1ca259b37e28684e86474ed3204b61895eae6a49
manageArtifact
public void manageArtifact(Artifact artifact, Artifact replacement)
{}
0d5a79c574a54b5a8345ea1548197c1f11f6bce1aeabb1eb0cfaefa8cbc3456f
omitForCycle
public void omitForCycle(Artifact artifact)
{}
d38b5073610d7dfd0257190f620b88741002f8526f9df0615f6539cb2c08ad66
omitForNearer
public void omitForNearer(Artifact omitted, Artifact kept)
{}
431712019dec206cad0dd3956f8ab3540ff900215cb48565bcb20a13196da653
restrictRange
public void restrictRange(Artifact artifact, Artifact replacement, VersionRange newRange)
{}
365fab98fcb5cfd28a24fec3fab813ce074b9f621de6923eacd61a537aaa3015
selectVersionFromRange
public void selectVersionFromRange(Artifact artifact)
{}
24a17e2e18dc446d0de35550a7526b8e654a33c958c7ef08ceb70365c1666e4a
testArtifact
public void testArtifact(Artifact node)
{}
a451e5e506c7800893bedad3c0897c293d90eed40303c556bf9928ce0d5b4a6e
updateScope
public void updateScope(Artifact artifact, String scope)
{}
bef504d7dfb633b305886b4d9408d6daafe961dcaef598d16cb2ce9a7b4f3603
updateScopeCurrentPom
public void updateScopeCurrentPom(Artifact artifact, String ignoredScope)
{}
ba6bdea6f9e08097d54b956216599232af56a0886b9e1775b0f2a8a2973a2fc7
getMissingParameters
public Collection<Parameter> getMissingParameters()
{    return missingParameters.values();}
6fa1360e14751eacbd5194bac947b9efc4ad88d54545e7f8415d9205e4f724ee
notifyFieldChangeUsingSetter
public void notifyFieldChangeUsingSetter(String fieldName, Object value, Object target)
{    delegate.notifyFieldChangeUsingSetter(fieldName, value, target);    if (mojo == target) {        notify(fieldName, value);    }}
6b80878ef8ee6c85186e16e5b1751df2181f87b92888a53a5e227772664a03c9
notifyFieldChangeUsingReflection
public void notifyFieldChangeUsingReflection(String fieldName, Object value, Object target)
{    delegate.notifyFieldChangeUsingReflection(fieldName, value, target);    if (mojo == target) {        notify(fieldName, value);    }}
b906c3c37663bcc5a1ddf73387f46081d7d8ad712474b049ab814826ac3097b9
notify
private void notify(String fieldName, Object value)
{    if (value != null) {        missingParameters.remove(fieldName);    }}
db1b97c4ffc258b3f303921c6fd79606473b125a04844c492cbb5a3255a708c4
selectDependency
public boolean selectDependency(Dependency dependency)
{    return !coreArtifact || !isWagonProvider(dependency.getArtifact());}
81d0e86a8546ce52c6ff95bc49b7ae007f23607bfda208a385ea707dbab98293
deriveChildSelector
public DependencySelector deriveChildSelector(DependencyCollectionContext context)
{    if (coreArtifact || !isLegacyCoreArtifact(context.getDependency().getArtifact())) {        return this;    } else {        return new WagonExcluder(true);    }}
3890675bb7bef6d6d3cb550a29c1475600f292b52dddd490b669f6a4ee8275af
isLegacyCoreArtifact
private boolean isLegacyCoreArtifact(Artifact artifact)
{    String version = artifact.getVersion();    return version != null && version.startsWith("2.") && artifact.getArtifactId().startsWith("maven-") && artifact.getGroupId().equals("org.apache.maven");}
f71c59610b9110de1600c4e05006a5483310e24fadd0e4e8da646eb9f65c1f4a
isWagonProvider
private boolean isWagonProvider(Artifact artifact)
{    if ("org.apache.maven.wagon".equals(artifact.getGroupId())) {        return artifact.getArtifactId().startsWith("wagon-");    }    return false;}
4afeb0868b55bdd8e18a00a3cb43d83e0714378d1c4bb36f0936daefc060e2e8
equals
public boolean equals(Object obj)
{    if (obj == this) {        return true;    } else if (obj == null || !getClass().equals(obj.getClass())) {        return false;    }    WagonExcluder that = (WagonExcluder) obj;    return coreArtifact == that.coreArtifact;}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    int hash = getClass().hashCode();    hash = hash * 31 + (coreArtifact ? 1 : 0);    return hash;}
4ad19ac535327089847c1befa2ae132a6ddf6a4278277b36e11b2f55814a1a9e
toMessage
private static String toMessage(String message, List<String> errors)
{    StringBuilder buffer = new StringBuilder(256);    buffer.append(message);    for (String error : errors) {        buffer.append(", ").append(error);    }    return buffer.toString();}
ff02bae34979b3e87fb90b98003d41b1b504e2438da49b7f4999cb0d09b40056
validate
public void validate(PluginDescriptor pluginDescriptor)
{    /*         * NOTE: For plugins that depend on other plugin artifacts the plugin realm contains more than one plugin         * descriptor. However, only the first descriptor is of interest.         */    if (!firstDescriptor) {        return;    }    firstDescriptor = false;    if (!pluginArtifact.getGroupId().equals(pluginDescriptor.getGroupId())) {        errors.add("Plugin's descriptor contains the wrong group ID: " + pluginDescriptor.getGroupId());    }    if (!pluginArtifact.getArtifactId().equals(pluginDescriptor.getArtifactId())) {        errors.add("Plugin's descriptor contains the wrong artifact ID: " + pluginDescriptor.getArtifactId());    }    if (!pluginArtifact.getBaseVersion().equals(pluginDescriptor.getVersion())) {        errors.add("Plugin's descriptor contains the wrong version: " + pluginDescriptor.getVersion());    }}
d99f047ebe8df4153e3d36ea8ba66b404f66ea62695843f4770c3ef6eed92ae1
hasErrors
public boolean hasErrors()
{    return !errors.isEmpty();}
e888a6d64706b06e73757b74290a24277ec021ca4f15afb86c901c4d707d444e
getErrors
public List<String> getErrors()
{    return errors;}
c447bf187e71df2ed36b6f089a159c9449db4e7a41a578c0f9ac8588bf7dc706
getSource
public Source getSource()
{    return source;}
b08ababcfee898827377ad0146a45b8fc7c4f35eb866af895608f523d910adb6
getExecutionId
public String getExecutionId()
{    return executionId;}
73b43cf9677adc9b3dcd547ea67954af9521f47fc5ca326c40bf0c5890ba2d96
getPlugin
public Plugin getPlugin()
{    if (mojoDescriptor != null) {        return mojoDescriptor.getPluginDescriptor().getPlugin();    }    return plugin;}
ae9feaff8ad904509b9f4c22aabd3fa523ffac88b24b10616123142e96bba5c8
getMojoDescriptor
public MojoDescriptor getMojoDescriptor()
{    return mojoDescriptor;}
ab8b1b25d8cef63d285b8fe2f9cd7c73f4319a457a7dac03793fc8ea632fd546
getConfiguration
public Xpp3Dom getConfiguration()
{    return configuration;}
d09e3c46dcc841c7c855a318a44a8fa5aeeaebfd0068df81439ac08f7f271f45
setConfiguration
public void setConfiguration(Xpp3Dom configuration)
{    this.configuration = configuration;}
62cb96ccf547920cd8b77944f31f3179a8391b9d5d2f006c6f441b672ca06041
identify
public String identify()
{    StringBuilder sb = new StringBuilder(256);    sb.append(executionId);    sb.append(configuration.toString());    return sb.toString();}
c5459e09ea51fe5334ba77c3873afa66f0e20095ce1e03fce19a75fef76bee5d
getLifecyclePhase
public String getLifecyclePhase()
{    return lifecyclePhase;}
a6ee0a0b395b0c2b7782ed19df44f5d2d529dbe96e1bd2c272b6e40a2040f924
setLifecyclePhase
public void setLifecyclePhase(String lifecyclePhase)
{    this.lifecyclePhase = lifecyclePhase;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    StringBuilder buffer = new StringBuilder(128);    if (mojoDescriptor != null) {        buffer.append(mojoDescriptor.getId());    }    buffer.append(" {execution: ").append(executionId).append('}');    return buffer.toString();}
9590314d7a6edd0118345714cc714a8e73448e57e702bb4c6893b363f509d64d
getGroupId
public String getGroupId()
{    if (mojoDescriptor != null) {        return mojoDescriptor.getPluginDescriptor().getGroupId();    }    return plugin.getGroupId();}
1e5191dc99d9314f2df50294bcd8d717af7b8f4311575d36d8d75b27121f1064
getArtifactId
public String getArtifactId()
{    if (mojoDescriptor != null) {        return mojoDescriptor.getPluginDescriptor().getArtifactId();    }    return plugin.getArtifactId();}
446b3b91c7c41085df1dc5542616b89ccd409f6a1d45e4d60d3ca00ac839ecf0
getVersion
public String getVersion()
{    if (mojoDescriptor != null) {        return mojoDescriptor.getPluginDescriptor().getVersion();    }    return plugin.getVersion();}
9082fc77639536bd0806cf5ff8e124732907b588c0a1ce3bbdf3069504999815
getGoal
public String getGoal()
{    if (mojoDescriptor != null) {        return mojoDescriptor.getGoal();    }    return goal;}
93ebcb9aa83d543336d6072f918349ce35a3f6818a582ffcc9992ac3f2e72175
setMojoDescriptor
public void setMojoDescriptor(MojoDescriptor mojoDescriptor)
{    this.mojoDescriptor = mojoDescriptor;}
34af8ce78f0d9c0e0baf9bdcac906e287762d81c3f0a5e97dbd36ae7f56c9784
getForkedExecutions
public Map<String, List<MojoExecution>> getForkedExecutions()
{    return forkedExecutions;}
752df30991ef7234cd4db2826a455c48dc6682290616fa33a7cb09149a808f6d
setForkedExecutions
public void setForkedExecutions(String projectKey, List<MojoExecution> forkedExecutions)
{    this.forkedExecutions.put(projectKey, forkedExecutions);}
a0643fa51f5c50a137f4c462d6e6ca72900bdcb1f098a11391a7572bc24da55e
getArtifacts
public List<Artifact> getArtifacts()
{    return artifacts;}
295cec7a9f5c45e56bb2e19df71911c293813e3abd6907791f4ba229acda3387
getException
public PluginResolutionException getException()
{    return exception;}
23707e923fe5c1dcbeec84ee77ef2a071d4ce95fcd96cdbb63cf7d33a836cd4b
getPluginRealm
public ClassRealm getPluginRealm()
{    return pluginRealm;}
38a416a8eff1bf1f6dacf77cc5934676242e6f5ccc10c44f8ec17c4fda96e910
createMessage
private static String createMessage(Plugin plugin, String descriptorLocation, Throwable e)
{    String message = "Failed to parse plugin descriptor";    if (plugin != null) {        message += " for " + plugin.getId();    }    if (descriptorLocation != null) {        message += " (" + descriptorLocation + ")";    }    if (e != null) {        message += ": " + e.getMessage();    }    return message;}
eb3a794f903f1ffc54f022291e7e753bb36cbee3f248989f4273a4089ec2eecd
getMojoExecution
public MojoExecution getMojoExecution()
{    return mojoExecution;}
81f2517470556cb90ebc50dd557de3cda6d858487f76ec2e456e18382e007167
constructMessage
private static String constructMessage(MojoExecution mojoExecution, Throwable cause)
{    String message;    if (mojoExecution != null) {        message = "Execution " + mojoExecution.getExecutionId() + " of goal " + mojoExecution.getMojoDescriptor().getId() + " failed";    } else {        message = "Mojo execution failed";    }    if (cause != null && StringUtils.isNotEmpty(cause.getMessage())) {        message += ": " + cause.getMessage();    } else {        message += ".";    }    return message;}
5bec6db56c6da3ab11851de8891ca2225f721f2e55b7a39fef2d77b6ee4a9319
getPluginKey
public String getPluginKey()
{    return pluginKey;}
31a34394321446dd03af312f335cf58ad12e82f3dcf15aa2d957e8de4485818e
getPluginGroupId
public String getPluginGroupId()
{    return pluginGroupId;}
9ae2f9b75a99820bc15126b31aaaaaa519269e06f641e23c335d5740b97f15e7
getPluginArtifactId
public String getPluginArtifactId()
{    return pluginArtifactId;}
0820cb206750c0f6e671d4f625d8762fc0919972b7ac21147742dab23add0027
getPluginVersion
public String getPluginVersion()
{    return pluginVersion;}
9082fc77639536bd0806cf5ff8e124732907b588c0a1ce3bbdf3069504999815
getGoal
public String getGoal()
{    return goal;}
cdcc47ed1eccb5aa7ba2aa1d33b327142be7cbcc16c1cff19fde28a6b8e02541
getProject
public MavenProject getProject()
{    return project;}
73b43cf9677adc9b3dcd547ea67954af9521f47fc5ca326c40bf0c5890ba2d96
getPlugin
public Plugin getPlugin()
{    return plugin;}
84040056553a70f7e02d2241aaf14501463e3ee84d79c50faf926f646c2041b3
format
private static String format(List<Parameter> parameters)
{    StringBuilder buffer = new StringBuilder(128);    if (parameters != null) {        for (Parameter parameter : parameters) {            if (buffer.length() > 0) {                buffer.append(", ");            }            buffer.append('\'').append(parameter.getName()).append('\'');        }    }    return buffer.toString();}
ae9feaff8ad904509b9f4c22aabd3fa523ffac88b24b10616123142e96bba5c8
getMojoDescriptor
public MojoDescriptor getMojoDescriptor()
{    return mojo;}
45a8043f6581aba0cf47ec77fc955eb9e43af3bcafbb67e357102237522f26f8
getParameters
public List<Parameter> getParameters()
{    return parameters;}
2e1d77d27ab42e4417d955d329be4b9e3f0599d9a7e9ede79fddb81dbe1b6892
decomposeParameterIntoUserInstructions
private static void decomposeParameterIntoUserInstructions(MojoDescriptor mojo, Parameter param, StringBuilder messageBuffer)
{    String expression = param.getExpression();    if (param.isEditable()) {        boolean isArray = param.getType().endsWith("[]");        boolean isCollection = false;        boolean isMap = false;        boolean isProperties = false;        if (!isArray) {            try {                                isCollection = Collection.class.isAssignableFrom(Class.forName(param.getType()));                isMap = Map.class.isAssignableFrom(Class.forName(param.getType()));                isProperties = Properties.class.isAssignableFrom(Class.forName(param.getType()));            } catch (ClassNotFoundException e) {                        }        }        messageBuffer.append("Inside the definition for plugin \'");        messageBuffer.append(mojo.getPluginDescriptor().getArtifactId());        messageBuffer.append("\', specify the following:\n\n<configuration>\n  ...\n");        messageBuffer.append("  <").append(param.getName()).append('>');        if (isArray || isCollection) {            messageBuffer.append('\n');            messageBuffer.append("    <item>");        } else if (isProperties) {            messageBuffer.append('\n');            messageBuffer.append("    <property>\n");            messageBuffer.append("      <name>KEY</name>\n");            messageBuffer.append("      <value>");        } else if (isMap) {            messageBuffer.append('\n');            messageBuffer.append("    <KEY>");        }        messageBuffer.append("VALUE");        if (isArray || isCollection) {            messageBuffer.append("</item>\n");            messageBuffer.append("  ");        } else if (isProperties) {            messageBuffer.append("</value>\n");            messageBuffer.append("    </property>\n");            messageBuffer.append("  ");        } else if (isMap) {            messageBuffer.append("</KEY>\n");            messageBuffer.append("  ");        }        messageBuffer.append("</").append(param.getName()).append(">\n");        messageBuffer.append("</configuration>");        String alias = param.getAlias();        if (StringUtils.isNotEmpty(alias) && !alias.equals(param.getName())) {            messageBuffer.append("\n\n-OR-\n\n<configuration>\n  ...\n  <").append(alias).append(">VALUE</").append(alias).append(">\n</configuration>\n");        }    }    if (StringUtils.isEmpty(expression)) {        messageBuffer.append('.');    } else {        if (param.isEditable()) {            messageBuffer.append("\n\n-OR-\n\n");        }        }}
21f19ec88fd222668bd4f9ed719bd995fbcb5883648e25628f4dfdc211cba76a
buildDiagnosticMessage
public String buildDiagnosticMessage()
{    StringBuilder messageBuffer = new StringBuilder(256);    List<Parameter> params = getParameters();    MojoDescriptor mojo = getMojoDescriptor();    messageBuffer.append("One or more required plugin parameters are invalid/missing for \'").append(mojo.getPluginDescriptor().getGoalPrefix()).append(':').append(mojo.getGoal()).append("\'\n");    int idx = 0;    for (Iterator<Parameter> it = params.iterator(); it.hasNext(); idx++) {        Parameter param = it.next();        messageBuffer.append("\n[").append(idx).append("] ");        decomposeParameterIntoUserInstructions(mojo, param, messageBuffer);        messageBuffer.append('\n');    }    return messageBuffer.toString();}
cbba329a351d5c988bb45614c95a799cb20d0c4f30682fcd0acc63fa37e3f783
evaluate
public Object evaluate(String expr) throws ExpressionEvaluationException
{    return evaluate(expr, null);}
dcad4162a247b33d918ca0d40ddc0bd0031ca18d38872e825ebc670031f902a5
evaluate
public Object evaluate(String expr, Class<?> type) throws ExpressionEvaluationException
{    Object value = null;    if (expr == null) {        return null;    }    String expression = stripTokens(expr);    if (expression.equals(expr)) {        int index = expr.indexOf("${");        if (index >= 0) {            int lastIndex = expr.indexOf('}', index);            if (lastIndex >= 0) {                String retVal = expr.substring(0, index);                if ((index > 0) && (expr.charAt(index - 1) == '$')) {                    retVal += expr.substring(index + 1, lastIndex + 1);                } else {                    Object subResult = evaluate(expr.substring(index, lastIndex + 1));                    if (subResult != null) {                        retVal += subResult;                    } else {                        retVal += "$" + expr.substring(index + 1, lastIndex + 1);                    }                }                retVal += evaluate(expr.substring(lastIndex + 1));                return retVal;            }        }                if (expression.contains("$$")) {            return expression.replaceAll("\\$\\$", "\\$");        } else {            return expression;        }    }    MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();    if ("localRepository".equals(expression)) {        value = session.getLocalRepository();    } else if ("session".equals(expression)) {        value = session;    } else if (expression.startsWith("session")) {        try {            int pathSeparator = expression.indexOf('/');            if (pathSeparator > 0) {                String pathExpression = expression.substring(1, pathSeparator);                value = ReflectionValueExtractor.evaluate(pathExpression, session);                value = value + expression.substring(pathSeparator);            } else {                value = ReflectionValueExtractor.evaluate(expression.substring(1), session);            }        } catch (Exception e) {                        throw new ExpressionEvaluationException("Error evaluating plugin parameter expression: " + expression, e);        }    } else if ("reactorProjects".equals(expression)) {        value = session.getProjects();    } else if ("mojoExecution".equals(expression)) {        value = mojoExecution;    } else if ("project".equals(expression)) {        value = project;    } else if ("executedProject".equals(expression)) {        value = project.getExecutionProject();    } else if (expression.startsWith("project") || expression.startsWith("pom")) {        try {            int pathSeparator = expression.indexOf('/');            if (pathSeparator > 0) {                String pathExpression = expression.substring(0, pathSeparator);                value = ReflectionValueExtractor.evaluate(pathExpression, project);                value = value + expression.substring(pathSeparator);            } else {                value = ReflectionValueExtractor.evaluate(expression.substring(1), project);            }        } catch (Exception e) {                        throw new ExpressionEvaluationException("Error evaluating plugin parameter expression: " + expression, e);        }    } else if (expression.equals("repositorySystemSession")) {        value = session.getRepositorySession();    } else if (expression.equals("mojo")) {        value = mojoExecution;    } else if (expression.startsWith("mojo")) {        try {            int pathSeparator = expression.indexOf('/');            if (pathSeparator > 0) {                String pathExpression = expression.substring(1, pathSeparator);                value = ReflectionValueExtractor.evaluate(pathExpression, mojoExecution);                value = value + expression.substring(pathSeparator);            } else {                value = ReflectionValueExtractor.evaluate(expression.substring(1), mojoExecution);            }        } catch (Exception e) {                        throw new ExpressionEvaluationException("Error evaluating plugin parameter expression: " + expression, e);        }    } else if (expression.equals("plugin")) {        value = mojoDescriptor.getPluginDescriptor();    } else if (expression.startsWith("plugin")) {        try {            int pathSeparator = expression.indexOf('/');            PluginDescriptor pluginDescriptor = mojoDescriptor.getPluginDescriptor();            if (pathSeparator > 0) {                String pathExpression = expression.substring(1, pathSeparator);                value = ReflectionValueExtractor.evaluate(pathExpression, pluginDescriptor);                value = value + expression.substring(pathSeparator);            } else {                value = ReflectionValueExtractor.evaluate(expression.substring(1), pluginDescriptor);            }        } catch (Exception e) {            throw new ExpressionEvaluationException("Error evaluating plugin parameter expression: " + expression, e);        }    } else if ("settings".equals(expression)) {        value = session.getSettings();    } else if (expression.startsWith("settings")) {        try {            int pathSeparator = expression.indexOf('/');            if (pathSeparator > 0) {                String pathExpression = expression.substring(1, pathSeparator);                value = ReflectionValueExtractor.evaluate(pathExpression, session.getSettings());                value = value + expression.substring(pathSeparator);            } else {                value = ReflectionValueExtractor.evaluate(expression.substring(1), session.getSettings());            }        } catch (Exception e) {                        throw new ExpressionEvaluationException("Error evaluating plugin parameter expression: " + expression, e);        }    } else if ("basedir".equals(expression)) {        value = basedir;    } else if (expression.startsWith("basedir")) {        int pathSeparator = expression.indexOf('/');        if (pathSeparator > 0) {            value = basedir + expression.substring(pathSeparator);        }    }    /*         * MNG-4312: We neither have reserved all of the above magic expressions nor is their set fixed/well-known (it         * gets occasionally extended by newer Maven versions). This imposes the risk for existing plugins to         * unintentionally use such a magic expression for an ordinary system property. So here we check whether we         * ended up with a magic value that is not compatible with the type of the configured mojo parameter (a string         * could still be converted by the configurator so we leave those alone). If so, back off to evaluating the         * expression from properties only.         */    if (value != null && type != null && !(value instanceof String) && !isTypeCompatible(type, value)) {        value = null;    }    if (value == null) {        if (properties != null) {                                                            value = properties.getProperty(expression);        }        if ((value == null) && ((project != null) && (project.getProperties() != null))) {            value = project.getProperties().getProperty(expression);        }    }    if (value instanceof String) {                String val = (String) value;        int exprStartDelimiter = val.indexOf("${");        if (exprStartDelimiter >= 0) {            if (exprStartDelimiter > 0) {                value = val.substring(0, exprStartDelimiter) + evaluate(val.substring(exprStartDelimiter));            } else {                value = evaluate(val.substring(exprStartDelimiter));            }        }    }    return value;}
3333e2f999db2d944eb9a863ec9c013042028920477a5d0cb55db9d64ebdd0af
isTypeCompatible
private static boolean isTypeCompatible(Class<?> type, Object value)
{    if (type.isInstance(value)) {        return true;    }        return ((type.isPrimitive() || type.getName().startsWith("java.lang.")) && value.getClass().getName().startsWith("java.lang."));}
c6ff4811d8c6a89dec33e1d6b1f0fb0bf0ee70641240ff360a51ccc748298a4f
stripTokens
private String stripTokens(String expr)
{    if (expr.startsWith("${") && (expr.indexOf('}') == expr.length() - 1)) {        expr = expr.substring(2, expr.length() - 1);    }    return expr;}
7c72de28d5e150070e621d08deda8c09b56192e770609871c8e2fcce7c5a04ae
alignToBaseDirectory
public File alignToBaseDirectory(File file)
{        if (file != null) {        if (file.isAbsolute()) {                } else if (file.getPath().startsWith(File.separator)) {                        file = file.getAbsoluteFile();        } else {                        file = new File(new File(basedir, file.getPath()).toURI().normalize()).getAbsoluteFile();        }    }    return file;}
cf647643514258c9a0c68e33021ffe1a88feac317927be05a3bbb5c9879955bb
getRealm
public ClassRealm getRealm()
{    return realm;}
a0643fa51f5c50a137f4c462d6e6ca72900bdcb1f098a11391a7572bc24da55e
getArtifacts
public List<Artifact> getArtifacts()
{    return artifacts;}
73b43cf9677adc9b3dcd547ea67954af9521f47fc5ca326c40bf0c5890ba2d96
getPlugin
public Plugin getPlugin()
{    return plugin;}
a45881c16ab9e38f31484f692ce1411b032f19370daab3e4040c1c04d984146f
getPrefix
public String getPrefix()
{    return prefix;}
7adc71fdf774215a28cf8c19359c76ccf0fc98fb8776c2e5c94a3c2c0be89ce0
setPrefix
public DefaultPluginPrefixRequest setPrefix(String prefix)
{    this.prefix = prefix;    return this;}
0288785a6c36414b98eec6c764e4ad51a1c637ff9dbf3f3324b9f18d982c807e
getPluginGroups
public List<String> getPluginGroups()
{    return pluginGroups;}
5c252b2ad86d2c396e33c2c04377f215cad5075a6a322d9fca489c7b1da9d6c0
setPluginGroups
public DefaultPluginPrefixRequest setPluginGroups(List<String> pluginGroups)
{    if (pluginGroups != null) {        this.pluginGroups = Collections.unmodifiableList(pluginGroups);    } else {        this.pluginGroups = Collections.emptyList();    }    return this;}
f82e31e88c60d748a1deef07dd7a681d6c32576dac5eaa857d6a22c49a865e98
getPom
public Model getPom()
{    return pom;}
3c0f7dfa7f7007dc32edc713b2b42c5eb4d9b58f51d47d43a99ba99c0c5254b8
setPom
public DefaultPluginPrefixRequest setPom(Model pom)
{    this.pom = pom;    return this;}
8f172c08ff1fafefe379a70e2715ee8cd8be23fcf5eb9508adf580e06b919595
getRepositories
public List<RemoteRepository> getRepositories()
{    return repositories;}
76564334f5665980e621552839a220000bb64eed32bf3cbd874c61d4a73a2cbb
setRepositories
public DefaultPluginPrefixRequest setRepositories(List<RemoteRepository> repositories)
{    if (repositories != null) {        this.repositories = Collections.unmodifiableList(repositories);    } else {        this.repositories = Collections.emptyList();    }    return this;}
249c16421d8af9b25ee93ecd862c341aa3afc8023f876e65004c3f450248c6a6
getRepositorySession
public RepositorySystemSession getRepositorySession()
{    return session;}
fdb4355bf53d279f129da94d4fa5afa6acebb42b486e52a0bebd793ff1faa296
setRepositorySession
public DefaultPluginPrefixRequest setRepositorySession(RepositorySystemSession session)
{    this.session = session;    return this;}
0f4c20daaa234964732d87495a8de05393d81089ba1af74c23bc1f069f88c223
resolve
public PluginPrefixResult resolve(PluginPrefixRequest request) throws NoPluginFoundForPrefixException
{    logger.debug("Resolving plugin prefix " + request.getPrefix() + " from " + request.getPluginGroups());    PluginPrefixResult result = resolveFromProject(request);    if (result == null) {        result = resolveFromRepository(request);        if (result == null) {            throw new NoPluginFoundForPrefixException(request.getPrefix(), request.getPluginGroups(), request.getRepositorySession().getLocalRepository(), request.getRepositories());        } else if (logger.isDebugEnabled()) {            logger.debug("Resolved plugin prefix " + request.getPrefix() + " to " + result.getGroupId() + ":" + result.getArtifactId() + " from repository " + (result.getRepository() != null ? result.getRepository().getId() : "null"));        }    } else if (logger.isDebugEnabled()) {        logger.debug("Resolved plugin prefix " + request.getPrefix() + " to " + result.getGroupId() + ":" + result.getArtifactId() + " from POM " + request.getPom());    }    return result;}
c7835704f563c9f4d4351f114f4a7cf1bf8f9a88005d6518a985f0c762c299d7
resolveFromProject
private PluginPrefixResult resolveFromProject(PluginPrefixRequest request)
{    PluginPrefixResult result = null;    if (request.getPom() != null && request.getPom().getBuild() != null) {        Build build = request.getPom().getBuild();        result = resolveFromProject(request, build.getPlugins());        if (result == null && build.getPluginManagement() != null) {            result = resolveFromProject(request, build.getPluginManagement().getPlugins());        }    }    return result;}
199c9a7b1d65d25ea67e9d34f5c9bce21405d413e44f4959f8f3087abecd9489
resolveFromProject
private PluginPrefixResult resolveFromProject(PluginPrefixRequest request, List<Plugin> plugins)
{    for (Plugin plugin : plugins) {        try {            PluginDescriptor pluginDescriptor = pluginManager.loadPlugin(plugin, request.getRepositories(), request.getRepositorySession());            if (request.getPrefix().equals(pluginDescriptor.getGoalPrefix())) {                return new DefaultPluginPrefixResult(plugin);            }        } catch (Exception e) {            if (logger.isDebugEnabled()) {                logger.warn("Failed to retrieve plugin descriptor for " + plugin.getId() + ": " + e.getMessage(), e);            } else {                logger.warn("Failed to retrieve plugin descriptor for " + plugin.getId() + ": " + e.getMessage());            }        }    }    return null;}
7d149785733ea8c3c923df434f483dff711470621529a6941b7a63b0a89460df
resolveFromRepository
private PluginPrefixResult resolveFromRepository(PluginPrefixRequest request)
{    RequestTrace trace = RequestTrace.newChild(null, request);    List<MetadataRequest> requests = new ArrayList<>();    for (String pluginGroup : request.getPluginGroups()) {        org.eclipse.aether.metadata.Metadata metadata = new DefaultMetadata(pluginGroup, "maven-metadata.xml", DefaultMetadata.Nature.RELEASE_OR_SNAPSHOT);        requests.add(new MetadataRequest(metadata, null, REPOSITORY_CONTEXT).setTrace(trace));        for (RemoteRepository repository : request.getRepositories()) {            requests.add(new MetadataRequest(metadata, repository, REPOSITORY_CONTEXT).setTrace(trace));        }    }        List<MetadataResult> results = repositorySystem.resolveMetadata(request.getRepositorySession(), requests);    requests.clear();    PluginPrefixResult result = processResults(request, trace, results, requests);    if (result != null) {        return result;    }    if (!request.getRepositorySession().isOffline() && !requests.isEmpty()) {        DefaultRepositorySystemSession session = new DefaultRepositorySystemSession(request.getRepositorySession());        session.setUpdatePolicy(RepositoryPolicy.UPDATE_POLICY_ALWAYS);        results = repositorySystem.resolveMetadata(session, requests);        return processResults(request, trace, results, null);    }    return null;}
2ec032af8ad61c8b9eae6c7a25e9822ca12804a8f41bbbd5c9e38fc1fb4533c2
processResults
private PluginPrefixResult processResults(PluginPrefixRequest request, RequestTrace trace, List<MetadataResult> results, List<MetadataRequest> requests)
{    for (MetadataResult res : results) {        org.eclipse.aether.metadata.Metadata metadata = res.getMetadata();        if (metadata != null) {            ArtifactRepository repository = res.getRequest().getRepository();            if (repository == null) {                repository = request.getRepositorySession().getLocalRepository();            }            PluginPrefixResult result = resolveFromRepository(request, trace, metadata.getGroupId(), metadata, repository);            if (result != null) {                return result;            }        }        if (requests != null && !res.isUpdated()) {            requests.add(res.getRequest());        }    }    return null;}
48059a4bf2d72b3db571f2096493d27534c9968629c98503c800afe0aa19276f
resolveFromRepository
private PluginPrefixResult resolveFromRepository(PluginPrefixRequest request, RequestTrace trace, String pluginGroup, org.eclipse.aether.metadata.Metadata metadata, ArtifactRepository repository)
{    if (metadata != null && metadata.getFile() != null && metadata.getFile().isFile()) {        try {            Map<String, ?> options = Collections.singletonMap(MetadataReader.IS_STRICT, Boolean.FALSE);            Metadata pluginGroupMetadata = metadataReader.read(metadata.getFile(), options);            List<org.apache.maven.artifact.repository.metadata.Plugin> plugins = pluginGroupMetadata.getPlugins();            if (plugins != null) {                for (org.apache.maven.artifact.repository.metadata.Plugin plugin : plugins) {                    if (request.getPrefix().equals(plugin.getPrefix())) {                        return new DefaultPluginPrefixResult(pluginGroup, plugin.getArtifactId(), repository);                    }                }            }        } catch (IOException e) {            invalidMetadata(request.getRepositorySession(), trace, metadata, repository, e);        }    }    return null;}
47d8558a6e46b5cdd62d3e16127125a3b2dd3501f08805b771bbe735232d31fe
invalidMetadata
private void invalidMetadata(RepositorySystemSession session, RequestTrace trace, org.eclipse.aether.metadata.Metadata metadata, ArtifactRepository repository, Exception exception)
{    RepositoryListener listener = session.getRepositoryListener();    if (listener != null) {        RepositoryEvent.Builder event = new RepositoryEvent.Builder(session, EventType.METADATA_INVALID);        event.setTrace(trace);        event.setMetadata(metadata);        event.setException(exception);        event.setRepository(repository);        listener.metadataInvalid(event.build());    }}
9590314d7a6edd0118345714cc714a8e73448e57e702bb4c6893b363f509d64d
getGroupId
public String getGroupId()
{    return groupId;}
71bcb3c91e0d464929235253ed6afcc351b3e9058163242c449a951b7b882841
setGroupId
public void setGroupId(String groupId)
{    this.groupId = groupId;}
1e5191dc99d9314f2df50294bcd8d717af7b8f4311575d36d8d75b27121f1064
getArtifactId
public String getArtifactId()
{    return artifactId;}
20cbd85c6b33f77aed396f8e4100794ba5666a5469aea43d797e8b46e9761df1
setArtifactId
public void setArtifactId(String artifactId)
{    this.artifactId = artifactId;}
2173adbe55779ccb687142434f49e47b69ce1c4fc751fc2716e0487d65e3ec95
getRepository
public ArtifactRepository getRepository()
{    return repository;}
ec0b3ed0d7a9686a9733de62d618b332ae7a4b855d740b2399cb216d989b648b
setRepository
public void setRepository(ArtifactRepository repository)
{    this.repository = repository;}
9c60f954fd24eb65a24cf46206cf1ad20ae146a8cac96e4f874e6f995964b819
format
private static String format(LocalRepository localRepository, List<RemoteRepository> remoteRepositories)
{    String repos = "[";    if (localRepository != null) {        repos += localRepository.getId() + " (" + localRepository.getBasedir() + ")";    }    if (remoteRepositories != null && !remoteRepositories.isEmpty()) {        for (RemoteRepository repository : remoteRepositories) {            repos += ", ";            if (repository != null) {                repos += repository.getId() + " (" + repository.getUrl() + ")";            }        }    }    repos += "]";    return repos;}
9590314d7a6edd0118345714cc714a8e73448e57e702bb4c6893b363f509d64d
getGroupId
public String getGroupId()
{    return groupId;}
4d2440d19c30b9f0b15a3d3bd4d28444b002ace958d58873b3d12b1d88a11c8b
setGroupId
public DefaultPluginVersionRequest setGroupId(String groupId)
{    this.groupId = groupId;    return this;}
1e5191dc99d9314f2df50294bcd8d717af7b8f4311575d36d8d75b27121f1064
getArtifactId
public String getArtifactId()
{    return artifactId;}
4e6d5cb5a5ac5c2d6f4f6fe1603c12aeb38f3bed5bf9f7035f2933bb317938c5
setArtifactId
public DefaultPluginVersionRequest setArtifactId(String artifactId)
{    this.artifactId = artifactId;    return this;}
f82e31e88c60d748a1deef07dd7a681d6c32576dac5eaa857d6a22c49a865e98
getPom
public Model getPom()
{    return pom;}
98b605323bdc9f7515b36d1526a626a667faebea3ac82ce3634eca801acecf51
setPom
public DefaultPluginVersionRequest setPom(Model pom)
{    this.pom = pom;    return this;}
8f172c08ff1fafefe379a70e2715ee8cd8be23fcf5eb9508adf580e06b919595
getRepositories
public List<RemoteRepository> getRepositories()
{    return repositories;}
37557a263a913da98dcdf15fbbcf04f205b520e1bf421cca5cafa25d45f36544
setRepositories
public DefaultPluginVersionRequest setRepositories(List<RemoteRepository> repositories)
{    if (repositories != null) {        this.repositories = Collections.unmodifiableList(repositories);    } else {        this.repositories = Collections.emptyList();    }    return this;}
249c16421d8af9b25ee93ecd862c341aa3afc8023f876e65004c3f450248c6a6
getRepositorySession
public RepositorySystemSession getRepositorySession()
{    return session;}
536e454a573e78df086713d8f6badb87ad07780bcc6f97faf549e3b1d5b3837e
setRepositorySession
public DefaultPluginVersionRequest setRepositorySession(RepositorySystemSession session)
{    this.session = session;    return this;}
db5321516d0664ffe1be137774c89a611019f50f43eff245b1b068345ae469d3
resolve
public PluginVersionResult resolve(PluginVersionRequest request) throws PluginVersionResolutionException
{    PluginVersionResult result = resolveFromProject(request);    if (result == null) {        result = resolveFromRepository(request);        if (logger.isDebugEnabled()) {            logger.debug("Resolved plugin version for " + request.getGroupId() + ":" + request.getArtifactId() + " to " + result.getVersion() + " from repository " + result.getRepository());        }    } else if (logger.isDebugEnabled()) {        logger.debug("Resolved plugin version for " + request.getGroupId() + ":" + request.getArtifactId() + " to " + result.getVersion() + " from POM " + request.getPom());    }    return result;}
26bb16f8ff9dfdcaf43d8cfd6eddc8373c6855677d328dc05a9d5654c3e9c5b1
resolveFromRepository
private PluginVersionResult resolveFromRepository(PluginVersionRequest request) throws PluginVersionResolutionException
{    RequestTrace trace = RequestTrace.newChild(null, request);    DefaultPluginVersionResult result = new DefaultPluginVersionResult();    org.eclipse.aether.metadata.Metadata metadata = new DefaultMetadata(request.getGroupId(), request.getArtifactId(), "maven-metadata.xml", DefaultMetadata.Nature.RELEASE_OR_SNAPSHOT);    List<MetadataRequest> requests = new ArrayList<>();    requests.add(new MetadataRequest(metadata, null, REPOSITORY_CONTEXT).setTrace(trace));    for (RemoteRepository repository : request.getRepositories()) {        requests.add(new MetadataRequest(metadata, repository, REPOSITORY_CONTEXT).setTrace(trace));    }    List<MetadataResult> results = repositorySystem.resolveMetadata(request.getRepositorySession(), requests);    Versions versions = new Versions();    for (MetadataResult res : results) {        ArtifactRepository repository = res.getRequest().getRepository();        if (repository == null) {            repository = request.getRepositorySession().getLocalRepository();        }        mergeMetadata(request.getRepositorySession(), trace, versions, res.getMetadata(), repository);    }    selectVersion(result, request, versions);    return result;}
d9657fe6e6f85984f2e98228e4737d805d3981b44a3ff9c2a0bf246bfb240f57
selectVersion
private void selectVersion(DefaultPluginVersionResult result, PluginVersionRequest request, Versions versions) throws PluginVersionResolutionException
{    String version = null;    ArtifactRepository repo = null;    if (StringUtils.isNotEmpty(versions.releaseVersion)) {        version = versions.releaseVersion;        repo = versions.releaseRepository;    } else if (StringUtils.isNotEmpty(versions.latestVersion)) {        version = versions.latestVersion;        repo = versions.latestRepository;    }    if (version != null && !isCompatible(request, version)) {        versions.versions.remove(version);        version = null;    }    if (version == null) {        VersionScheme versionScheme = new GenericVersionScheme();        TreeSet<Version> releases = new TreeSet<>(Collections.reverseOrder());        TreeSet<Version> snapshots = new TreeSet<>(Collections.reverseOrder());        for (String ver : versions.versions.keySet()) {            try {                Version v = versionScheme.parseVersion(ver);                if (ver.endsWith("-SNAPSHOT")) {                    snapshots.add(v);                } else {                    releases.add(v);                }            } catch (InvalidVersionSpecificationException e) {                        }        }        for (Version v : releases) {            String ver = v.toString();            if (isCompatible(request, ver)) {                version = ver;                repo = versions.versions.get(version);                break;            }        }        if (version == null) {            for (Version v : snapshots) {                String ver = v.toString();                if (isCompatible(request, ver)) {                    version = ver;                    repo = versions.versions.get(version);                    break;                }            }        }    }    if (version != null) {        result.setVersion(version);        result.setRepository(repo);    } else {        throw new PluginVersionResolutionException(request.getGroupId(), request.getArtifactId(), request.getRepositorySession().getLocalRepository(), request.getRepositories(), "Plugin not found in any plugin repository");    }}
00418cbfb718044776ee1d4f6bb42f5a25087561b3b10a4e6d2280bd4f645dad
isCompatible
private boolean isCompatible(PluginVersionRequest request, String version)
{    Plugin plugin = new Plugin();    plugin.setGroupId(request.getGroupId());    plugin.setArtifactId(request.getArtifactId());    plugin.setVersion(version);    PluginDescriptor pluginDescriptor;    try {        pluginDescriptor = pluginManager.getPluginDescriptor(plugin, request.getRepositories(), request.getRepositorySession());    } catch (PluginResolutionException e) {        logger.debug("Ignoring unresolvable plugin version " + version, e);        return false;    } catch (Exception e) {                return true;    }    try {        pluginManager.checkRequiredMavenVersion(pluginDescriptor);    } catch (Exception e) {        logger.debug("Ignoring incompatible plugin version " + version + ": " + e.getMessage());        return false;    }    return true;}
eedceeb18c7b3eb630d320dd1a622a686ea2790d3d5241b1df5a4d0d54197755
mergeMetadata
private void mergeMetadata(RepositorySystemSession session, RequestTrace trace, Versions versions, org.eclipse.aether.metadata.Metadata metadata, ArtifactRepository repository)
{    if (metadata != null && metadata.getFile() != null && metadata.getFile().isFile()) {        try {            Map<String, ?> options = Collections.singletonMap(MetadataReader.IS_STRICT, Boolean.FALSE);            Metadata repoMetadata = metadataReader.read(metadata.getFile(), options);            mergeMetadata(versions, repoMetadata, repository);        } catch (IOException e) {            invalidMetadata(session, trace, metadata, repository, e);        }    }}
47d8558a6e46b5cdd62d3e16127125a3b2dd3501f08805b771bbe735232d31fe
invalidMetadata
private void invalidMetadata(RepositorySystemSession session, RequestTrace trace, org.eclipse.aether.metadata.Metadata metadata, ArtifactRepository repository, Exception exception)
{    RepositoryListener listener = session.getRepositoryListener();    if (listener != null) {        RepositoryEvent.Builder event = new RepositoryEvent.Builder(session, EventType.METADATA_INVALID);        event.setTrace(trace);        event.setMetadata(metadata);        event.setException(exception);        event.setRepository(repository);        listener.metadataInvalid(event.build());    }}
f236936c1308290edf5fd64ce3bc17bb1421ddead952b2c4f65756d7b1d5903d
mergeMetadata
private void mergeMetadata(Versions versions, Metadata source, ArtifactRepository repository)
{    Versioning versioning = source.getVersioning();    if (versioning != null) {        String timestamp = StringUtils.clean(versioning.getLastUpdated());        if (StringUtils.isNotEmpty(versioning.getRelease()) && timestamp.compareTo(versions.releaseTimestamp) > 0) {            versions.releaseVersion = versioning.getRelease();            versions.releaseTimestamp = timestamp;            versions.releaseRepository = repository;        }        if (StringUtils.isNotEmpty(versioning.getLatest()) && timestamp.compareTo(versions.latestTimestamp) > 0) {            versions.latestVersion = versioning.getLatest();            versions.latestTimestamp = timestamp;            versions.latestRepository = repository;        }        for (String version : versioning.getVersions()) {            if (!versions.versions.containsKey(version)) {                versions.versions.put(version, repository);            }        }    }}
4eb628c98c71ee8db686ad86dfc2bc9ded016f66bb3fc34cd712c694aa32edd8
resolveFromProject
private PluginVersionResult resolveFromProject(PluginVersionRequest request)
{    PluginVersionResult result = null;    if (request.getPom() != null && request.getPom().getBuild() != null) {        Build build = request.getPom().getBuild();        result = resolveFromProject(request, build.getPlugins());        if (result == null && build.getPluginManagement() != null) {            result = resolveFromProject(request, build.getPluginManagement().getPlugins());        }    }    return result;}
861114fbadcf648ee4a17bcade5f2cbd5129bc35afed711653557128d312d630
resolveFromProject
private PluginVersionResult resolveFromProject(PluginVersionRequest request, List<Plugin> plugins)
{    for (Plugin plugin : plugins) {        if (request.getGroupId().equals(plugin.getGroupId()) && request.getArtifactId().equals(plugin.getArtifactId())) {            if (plugin.getVersion() != null) {                return new DefaultPluginVersionResult(plugin.getVersion());            } else {                return null;            }        }    }    return null;}
446b3b91c7c41085df1dc5542616b89ccd409f6a1d45e4d60d3ca00ac839ecf0
getVersion
public String getVersion()
{    return version;}
fa655d76002df94322c0d82cb5fbadecc48b0bb7bb0e58203d0a274985fccd86
setVersion
public void setVersion(String version)
{    this.version = version;}
2173adbe55779ccb687142434f49e47b69ce1c4fc751fc2716e0487d65e3ec95
getRepository
public ArtifactRepository getRepository()
{    return repository;}
ec0b3ed0d7a9686a9733de62d618b332ae7a4b855d740b2399cb216d989b648b
setRepository
public void setRepository(ArtifactRepository repository)
{    this.repository = repository;}
9590314d7a6edd0118345714cc714a8e73448e57e702bb4c6893b363f509d64d
getGroupId
public String getGroupId()
{    return groupId;}
1e5191dc99d9314f2df50294bcd8d717af7b8f4311575d36d8d75b27121f1064
getArtifactId
public String getArtifactId()
{    return artifactId;}
9590314d7a6edd0118345714cc714a8e73448e57e702bb4c6893b363f509d64d
getGroupId
public String getGroupId()
{    return groupId;}
1e5191dc99d9314f2df50294bcd8d717af7b8f4311575d36d8d75b27121f1064
getArtifactId
public String getArtifactId()
{    return artifactId;}
190e02f934ddba35482f4485183ea1bff5871cf527ea9dc0a214fe266427a6f0
getBaseMessage
public String getBaseMessage()
{    return baseMessage;}
9c60f954fd24eb65a24cf46206cf1ad20ae146a8cac96e4f874e6f995964b819
format
private static String format(LocalRepository localRepository, List<RemoteRepository> remoteRepositories)
{    String repos = "[";    if (localRepository != null) {        repos += localRepository.getId() + " (" + localRepository.getBasedir() + ")";    }    if (remoteRepositories != null && !remoteRepositories.isEmpty()) {        for (RemoteRepository repository : remoteRepositories) {            repos += ", ";            if (repository != null) {                repos += repository.getId() + " (" + repository.getUrl() + ")";            }        }    }    repos += "]";    return repos;}
ce0460f83bd172eacce98e8169f6d9b1d4ec316943fcf77ee2d8f12bbe7327a0
getFile
public File getFile()
{        return project.getArtifact().getFile();}
9590314d7a6edd0118345714cc714a8e73448e57e702bb4c6893b363f509d64d
getGroupId
public String getGroupId()
{    return artifact.getGroupId();}
1e5191dc99d9314f2df50294bcd8d717af7b8f4311575d36d8d75b27121f1064
getArtifactId
public String getArtifactId()
{    return artifact.getArtifactId();}
446b3b91c7c41085df1dc5542616b89ccd409f6a1d45e4d60d3ca00ac839ecf0
getVersion
public String getVersion()
{    return artifact.getVersion();}
fa655d76002df94322c0d82cb5fbadecc48b0bb7bb0e58203d0a274985fccd86
setVersion
public void setVersion(String version)
{    artifact.setVersion(version);}
b6618886f045f72bd87b21e6ae50c04bc9f78ceb97355e9a0b0208f7669f7aa1
getScope
public String getScope()
{    return artifact.getScope();}
624f725337dde847c4a699397a02f1b5558c709c88374adb10e603d835f48c88
getType
public String getType()
{    return artifact.getType();}
72a56f4f76ed886823d719d171deaf7269e3e03581e490ae41d8888ab09c151c
getClassifier
public String getClassifier()
{    return artifact.getClassifier();}
f721392a893d3529016cc4cdf57e5222c13055ee095293044098556f68151dba
hasClassifier
public boolean hasClassifier()
{    return artifact.hasClassifier();}
07725af208a821a7601c46521ad3913ff1fe94c7f6821022a78d06929e853726
setFile
public void setFile(File destination)
{    artifact.setFile(destination);    project.getArtifact().setFile(destination);}
2127b25546d419ff53a6da73c9acb361090188bd943b368d5e79d3f5d5595571
getBaseVersion
public String getBaseVersion()
{    return artifact.getBaseVersion();}
23be2c70ac63eb6873c76ebec2b6999b847bb0fec48ae937cdad8a750c45b816
setBaseVersion
public void setBaseVersion(String baseVersion)
{    artifact.setBaseVersion(baseVersion);}
09e8f13a9a603d31d64bb498b77d15572483824d843d0e82a570643192f62186
getId
public String getId()
{    return artifact.getId();}
1e6367faf89cb024d8c4d0b1db16125646d0f72a98ca702d55130cc6ac4f7cb3
getDependencyConflictId
public String getDependencyConflictId()
{    return artifact.getDependencyConflictId();}
26c41cc6f2bd2900b31464e8fd6b88dec56c1d99feedd7e0a5902b8e48f24c0b
addMetadata
public void addMetadata(ArtifactMetadata metadata)
{    artifact.addMetadata(metadata);}
5dd6732fbbd37765248b59cd0778916b61cf1f3d76152f0d3647aa9df6a3ea6b
getMetadataList
public Collection<ArtifactMetadata> getMetadataList()
{    return artifact.getMetadataList();}
3a2c20e3165e67e6a131ae78f6983fa19e8e2c2f33ad8e48ebf251b6d5463817
setRepository
public void setRepository(ArtifactRepository remoteRepository)
{    artifact.setRepository(remoteRepository);}
2173adbe55779ccb687142434f49e47b69ce1c4fc751fc2716e0487d65e3ec95
getRepository
public ArtifactRepository getRepository()
{    return artifact.getRepository();}
3c7286dc9e3d0c57af6c42ceb0a870fdd4a1294203fa6dced67a1b05e995dbb3
updateVersion
public void updateVersion(String version, ArtifactRepository localRepository)
{    artifact.updateVersion(version, localRepository);}
fdd3c1095681a9eb2b1cd3eaadc9c96fd8a66c032317c81a42a6759226050a56
getDownloadUrl
public String getDownloadUrl()
{    return artifact.getDownloadUrl();}
9bcae5cc53323a34cae81cd8b75e999e21913fc4c3cb526ff717322b9553bc85
setDownloadUrl
public void setDownloadUrl(String downloadUrl)
{    artifact.setDownloadUrl(downloadUrl);}
f7d9d9ab9b071bdeeae7ec4a36cdd3c15abe1337d5de4b71e53e8af09cf50723
getDependencyFilter
public ArtifactFilter getDependencyFilter()
{    return artifact.getDependencyFilter();}
2c1e943d37b3257ce09eea53921797572835423ed2ef2d8ae53c7906e992e131
setDependencyFilter
public void setDependencyFilter(ArtifactFilter artifactFilter)
{    artifact.setDependencyFilter(artifactFilter);}
52365404758e32b55e3cb9f08dbe4f0fee2589e9df75d6c65f381f8bee09edf0
getArtifactHandler
public ArtifactHandler getArtifactHandler()
{    return artifact.getArtifactHandler();}
a7f9690d083d0c367e9793e09d5da8fdac602db24768486b038b62acf216e515
getDependencyTrail
public List<String> getDependencyTrail()
{    return artifact.getDependencyTrail();}
0e53d454aff0099e8133a67ca4fd591d53837bc6543de0ed9e072d8edc0fae69
setDependencyTrail
public void setDependencyTrail(List<String> dependencyTrail)
{    artifact.setDependencyTrail(dependencyTrail);}
5c4863d73a6ffacd6a18b7c969209012fb3ef554b5811f0b02f91fa7d3ec102d
setScope
public void setScope(String scope)
{    artifact.setScope(scope);}
2f4655c15394cc011c44bcfe146bf944356810a7e8c9309fd6e06f3d9064a9b7
getVersionRange
public VersionRange getVersionRange()
{    return artifact.getVersionRange();}
1abba6da1c38ea7d3982b6c89b5db4fe3d621b7651ccffce3488142193dd07bc
setVersionRange
public void setVersionRange(VersionRange newRange)
{    artifact.setVersionRange(newRange);}
6859049ee6755b805ed6cfd6cc459926346d8a041574061dfa774001a1deeaad
selectVersion
public void selectVersion(String version)
{    artifact.selectVersion(version);}
71bcb3c91e0d464929235253ed6afcc351b3e9058163242c449a951b7b882841
setGroupId
public void setGroupId(String groupId)
{    artifact.setGroupId(groupId);}
20cbd85c6b33f77aed396f8e4100794ba5666a5469aea43d797e8b46e9761df1
setArtifactId
public void setArtifactId(String artifactId)
{    artifact.setArtifactId(artifactId);}
2ade99e89c0802b58f3776f3f0e6d2be8b4db4b2629b011476786812f36d732e
isSnapshot
public boolean isSnapshot()
{    return artifact.isSnapshot();}
ad34435e911d504b25d4d3737bbaf6d6d9df4c0f035f975cfa76206f6d10a20d
compareTo
public int compareTo(Artifact a)
{    return artifact.compareTo(a);}
fef31378b34f4ec716c70a189152bb383cecb916bacbf12caacb9219745a1e07
setResolved
public void setResolved(boolean resolved)
{    artifact.setResolved(resolved);}
2fa99a8aa2d293aadf123d8cbc90fb9b630a79bcc950706530654a9eec5b5162
isResolved
public boolean isResolved()
{    return artifact.isResolved();}
c2589c9064dd8fc585ea12b866224712940218e18389ab77eb58f698acb848a5
setResolvedVersion
public void setResolvedVersion(String version)
{    artifact.setResolvedVersion(version);}
4e0ac533a8a1087be5d0d1298cd7a55ffed241666b53b0ab77e8643135ff2265
setArtifactHandler
public void setArtifactHandler(ArtifactHandler handler)
{    artifact.setArtifactHandler(handler);}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return "active project artifact:\n\tartifact = " + artifact + ";\n\tproject: " + project;}
f308fae413bd651f467700bcd28719f9f8630f381481c07a1c9a2953fd5954d4
isRelease
public boolean isRelease()
{    return artifact.isRelease();}
256a0efdfd4b84f3fc2f54278eedb9b391570aa38945f40fcedc3aa30642f9a1
setRelease
public void setRelease(boolean release)
{    artifact.setRelease(release);}
ddcea356411655ad892cda430f842666cce0dcbdebb84a6489c94699e56c23d8
getAvailableVersions
public List<ArtifactVersion> getAvailableVersions()
{    return artifact.getAvailableVersions();}
74400245c7d578e1564e048a307faac551f60a646eda88af72b63b87affb8ac3
setAvailableVersions
public void setAvailableVersions(List<ArtifactVersion> versions)
{    artifact.setAvailableVersions(versions);}
d08e7adc07954a1eeda9fa3e115108b037db3cbed44d8e96edad28f88e853513
isOptional
public boolean isOptional()
{    return artifact.isOptional();}
32a03f1670c9cbc4691983dbd3dcfb5e759525e27d7924855bf834f85f78335f
getSelectedVersion
public ArtifactVersion getSelectedVersion() throws OverConstrainedVersionException
{    return artifact.getSelectedVersion();}
139d50a13f73004101837282064f86968ebf4d5cd72f24c9c6bb1cb0f46ac8e1
isSelectedVersionKnown
public boolean isSelectedVersionKnown() throws OverConstrainedVersionException
{    return artifact.isSelectedVersionKnown();}
f0b0621c604eeeb3cf40f1c764cb7e508310d033f3fd1e903830ad18682d1de0
setOptional
public void setOptional(boolean optional)
{    artifact.setOptional(optional);}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    int result = 17;    result = 37 * result + getGroupId().hashCode();    result = 37 * result + getArtifactId().hashCode();    result = 37 * result + getType().hashCode();    if (getVersion() != null) {        result = 37 * result + getVersion().hashCode();    }    result = 37 * result + (getClassifier() != null ? getClassifier().hashCode() : 0);    return result;}
8d37d11c7ecfc0d0589696a89cb385888c83bd3e43ea0c95a3b4ae4ef78180ce
equals
public boolean equals(Object o)
{    if (o == this) {        return true;    }    if (!(o instanceof Artifact)) {        return false;    }    Artifact a = (Artifact) o;    if (!a.getGroupId().equals(getGroupId())) {        return false;    } else if (!a.getArtifactId().equals(getArtifactId())) {        return false;    } else if (!a.getVersion().equals(getVersion())) {        return false;    } else if (!a.getType().equals(getType())) {        return false;    } else if (a.getClassifier() == null ? getClassifier() != null : !a.getClassifier().equals(getClassifier())) {        return false;    }    return true;}
20cbd85c6b33f77aed396f8e4100794ba5666a5469aea43d797e8b46e9761df1
setArtifactId
public void setArtifactId(String artifactId)
{    throw new UnsupportedOperationException("Cannot change the artifactId for an attached artifact." + " It is derived from the main artifact.");}
ddcea356411655ad892cda430f842666cce0dcbdebb84a6489c94699e56c23d8
getAvailableVersions
public List<ArtifactVersion> getAvailableVersions()
{    return parent.getAvailableVersions();}
2c6c640a29362db1d8ae6d92e399a7409f06ded4d023986ee14c5585c2fa15f3
setAvailableVersions
public void setAvailableVersions(List<ArtifactVersion> availableVersions)
{    throw new UnsupportedOperationException("Cannot change the version information for an attached artifact." + " It is derived from the main artifact.");}
2127b25546d419ff53a6da73c9acb361090188bd943b368d5e79d3f5d5595571
getBaseVersion
public String getBaseVersion()
{    return parent.getBaseVersion();}
23be2c70ac63eb6873c76ebec2b6999b847bb0fec48ae937cdad8a750c45b816
setBaseVersion
public void setBaseVersion(String baseVersion)
{    throw new UnsupportedOperationException("Cannot change the version information for an attached artifact." + " It is derived from the main artifact.");}
fdd3c1095681a9eb2b1cd3eaadc9c96fd8a66c032317c81a42a6759226050a56
getDownloadUrl
public String getDownloadUrl()
{    return parent.getDownloadUrl();}
9bcae5cc53323a34cae81cd8b75e999e21913fc4c3cb526ff717322b9553bc85
setDownloadUrl
public void setDownloadUrl(String downloadUrl)
{    throw new UnsupportedOperationException("Cannot change the download information for an attached artifact." + " It is derived from the main artifact.");}
71bcb3c91e0d464929235253ed6afcc351b3e9058163242c449a951b7b882841
setGroupId
public void setGroupId(String groupId)
{    throw new UnsupportedOperationException("Cannot change the groupId for an attached artifact." + " It is derived from the main artifact.");}
2173adbe55779ccb687142434f49e47b69ce1c4fc751fc2716e0487d65e3ec95
getRepository
public ArtifactRepository getRepository()
{    return parent.getRepository();}
ec0b3ed0d7a9686a9733de62d618b332ae7a4b855d740b2399cb216d989b648b
setRepository
public void setRepository(ArtifactRepository repository)
{    throw new UnsupportedOperationException("Cannot change the repository information for an attached artifact." + " It is derived from the main artifact.");}
b6618886f045f72bd87b21e6ae50c04bc9f78ceb97355e9a0b0208f7669f7aa1
getScope
public String getScope()
{    return parent.getScope();}
5c4863d73a6ffacd6a18b7c969209012fb3ef554b5811f0b02f91fa7d3ec102d
setScope
public void setScope(String scope)
{    throw new UnsupportedOperationException("Cannot change the scoping information for an attached artifact." + " It is derived from the main artifact.");}
446b3b91c7c41085df1dc5542616b89ccd409f6a1d45e4d60d3ca00ac839ecf0
getVersion
public String getVersion()
{    return parent.getVersion();}
fa655d76002df94322c0d82cb5fbadecc48b0bb7bb0e58203d0a274985fccd86
setVersion
public void setVersion(String version)
{    throw new UnsupportedOperationException("Cannot change the version information for an attached artifact." + " It is derived from the main artifact.");}
2f4655c15394cc011c44bcfe146bf944356810a7e8c9309fd6e06f3d9064a9b7
getVersionRange
public VersionRange getVersionRange()
{    return parent.getVersionRange();}
6ab30532958096b70c6b2df259829f83c4562285b079f358dbdd9f69800d4fcc
setVersionRange
public void setVersionRange(VersionRange range)
{    throw new UnsupportedOperationException("Cannot change the version information for an attached artifact." + " It is derived from the main artifact.");}
f308fae413bd651f467700bcd28719f9f8630f381481c07a1c9a2953fd5954d4
isRelease
public boolean isRelease()
{    return parent.isRelease();}
256a0efdfd4b84f3fc2f54278eedb9b391570aa38945f40fcedc3aa30642f9a1
setRelease
public void setRelease(boolean release)
{    throw new UnsupportedOperationException("Cannot change the version information for an attached artifact." + " It is derived from the main artifact.");}
2ade99e89c0802b58f3776f3f0e6d2be8b4db4b2629b011476786812f36d732e
isSnapshot
public boolean isSnapshot()
{    return parent.isSnapshot();}
26c41cc6f2bd2900b31464e8fd6b88dec56c1d99feedd7e0a5902b8e48f24c0b
addMetadata
public void addMetadata(ArtifactMetadata metadata)
{}
5dd6732fbbd37765248b59cd0778916b61cf1f3d76152f0d3647aa9df6a3ea6b
getMetadataList
public Collection<ArtifactMetadata> getMetadataList()
{    return Collections.emptyList();}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    return hashCode;}
8d37d11c7ecfc0d0589696a89cb385888c83bd3e43ea0c95a3b4ae4ef78180ce
equals
public boolean equals(Object o)
{    if (o == this) {        return true;    }    if (!(o instanceof CacheKey)) {        return false;    }    CacheKey other = (CacheKey) o;    return pomHash == other.pomHash && artifactEquals(artifact, other.artifact) && resolveManagedVersions == other.resolveManagedVersions && repositoriesEquals(repositories, other.repositories);}
05e44368ec0841021523c8e90fd8deea80edb8f469616155b3c063dd3252b6ba
artifactHashCode
private static int artifactHashCode(Artifact a)
{    int result = 17;    result = 31 * result + a.getGroupId().hashCode();    result = 31 * result + a.getArtifactId().hashCode();    result = 31 * result + a.getType().hashCode();    if (a.getVersion() != null) {        result = 31 * result + a.getVersion().hashCode();    }    result = 31 * result + (a.getClassifier() != null ? a.getClassifier().hashCode() : 0);    result = 31 * result + (a.getScope() != null ? a.getScope().hashCode() : 0);    result = 31 * result + (a.getDependencyFilter() != null ? a.getDependencyFilter().hashCode() : 0);    result = 31 * result + (a.isOptional() ? 1 : 0);    return result;}
a6d1d7a39571cbbac0af27f887bf48fed0e5cc6738506167beed4e35cbaecd7b
artifactEquals
private static boolean artifactEquals(Artifact a1, Artifact a2)
{    if (a1 == a2) {        return true;    }    return Objects.equals(a1.getGroupId(), a2.getGroupId()) && Objects.equals(a1.getArtifactId(), a2.getArtifactId()) && Objects.equals(a1.getType(), a2.getType()) && Objects.equals(a1.getVersion(), a2.getVersion()) && Objects.equals(a1.getClassifier(), a2.getClassifier()) && Objects.equals(a1.getScope(), a2.getScope()) && Objects.equals(a1.getDependencyFilter(), a2.getDependencyFilter()) && a1.isOptional() == a2.isOptional();}
873d958bf9c98259aadf086934ea581db9d59880710356c0bb323fd1bf6c0836
repositoryHashCode
private static int repositoryHashCode(ArtifactRepository repository)
{    int result = 17;    result = 31 * result + (repository.getId() != null ? repository.getId().hashCode() : 0);    return result;}
602e5282de51558ade39280ff686363f06bdac427c0c353ddb136f7e9b8e27c4
repositoriesHashCode
private static int repositoriesHashCode(List<ArtifactRepository> repositories)
{    int result = 17;    for (ArtifactRepository repository : repositories) {        result = 31 * result + repositoryHashCode(repository);    }    return result;}
f82d6b2696b63c4ef6c9e7e5922a4c6445f0adc166973130b0839cbc69468de0
repositoryEquals
private static boolean repositoryEquals(ArtifactRepository r1, ArtifactRepository r2)
{    if (r1 == r2) {        return true;    }    return Objects.equals(r1.getId(), r2.getId()) && Objects.equals(r1.getUrl(), r2.getUrl()) && repositoryPolicyEquals(r1.getReleases(), r2.getReleases()) && repositoryPolicyEquals(r1.getSnapshots(), r2.getSnapshots());}
807f53b2a67f0c0955942137c33990a600429ccd6f47f138af81cbfdb0e08dc1
repositoryPolicyEquals
private static boolean repositoryPolicyEquals(ArtifactRepositoryPolicy p1, ArtifactRepositoryPolicy p2)
{    if (p1 == p2) {        return true;    }    return p1.isEnabled() == p2.isEnabled() && Objects.equals(p1.getUpdatePolicy(), p2.getUpdatePolicy());}
25f7bcb8819288e25a9f8390f8c1c27c86e838b91ff4ead21ad0ab4a85eca9ff
repositoriesEquals
private static boolean repositoriesEquals(List<ArtifactRepository> r1, List<ArtifactRepository> r2)
{    if (r1.size() != r2.size()) {        return false;    }    for (Iterator<ArtifactRepository> it1 = r1.iterator(), it2 = r2.iterator(); it1.hasNext(); ) {        if (!repositoryEquals(it1.next(), it2.next())) {            return false;        }    }    return true;}
74532920252ab24aba3facb8f78a175de2fc4c1c8247fe2b3b2dce7bf79f6858
getArtifact
public Artifact getArtifact()
{    return pomArtifact;}
fc5ce01c0449961354330a0cace46330ff8ab65f9bd3bd9d1483a03b7700bdb4
getRelocatedArtifact
public Artifact getRelocatedArtifact()
{    return relocatedArtifact;}
a0643fa51f5c50a137f4c462d6e6ca72900bdcb1f098a11391a7572bc24da55e
getArtifacts
public List<Artifact> getArtifacts()
{    return artifacts;}
6fc9c67073a6315713f289a20571233a4621fe6af6041a9dd20801d14f47a57b
getManagedVersions
public Map<String, Artifact> getManagedVersions()
{    return managedVersions;}
4fd44e1a9f23aaf113060017b1d8f6d3cf8794c129edf477e6b2ddacdfe7400d
getRemoteRepositories
public List<ArtifactRepository> getRemoteRepositories()
{    return remoteRepositories;}
833eecaf3ef30fbfad81449304a6c84a29c07c46396e1334c6462020fe69043d
isStale
public boolean isStale()
{    File pomFile = pomArtifact.getFile();    if (pomFile != null) {        if (pomFile.canRead()) {            return length != pomFile.length() || timestamp != pomFile.lastModified();        } else {                        boolean snapshot = pomArtifact.isSnapshot();            for (ArtifactRepository repository : remoteRepositories) {                ArtifactRepositoryPolicy policy = snapshot ? repository.getSnapshots() : repository.getReleases();                if (ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS.equals(policy.getUpdatePolicy())) {                    return true;                }            }        }    }    return length != -1 || timestamp != -1;}
b51acd5a2e44cc54cb98a7ce10ba0230ed64b5d5c03e520b89940486f9ea84c8
get
public ResolutionGroup get(Artifact artifact, boolean resolveManagedVersions, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories)
{    CacheKey cacheKey = newCacheKey(artifact, resolveManagedVersions, localRepository, remoteRepositories);    CacheRecord cacheRecord = cache.get(cacheKey);    if (cacheRecord != null && !cacheRecord.isStale()) {        Artifact pomArtifact = ArtifactUtils.copyArtifact(cacheRecord.getArtifact());        Artifact relocatedArtifact = ArtifactUtils.copyArtifactSafe(cacheRecord.getRelocatedArtifact());        Set<Artifact> artifacts = ArtifactUtils.copyArtifacts(cacheRecord.getArtifacts(), new LinkedHashSet<Artifact>());        Map<String, Artifact> managedVersions = cacheRecord.getManagedVersions();        if (managedVersions != null) {            managedVersions = ArtifactUtils.copyArtifacts(managedVersions, new LinkedHashMap<String, Artifact>());        }        return new ResolutionGroup(pomArtifact, relocatedArtifact, artifacts, managedVersions, cacheRecord.getRemoteRepositories());    }    cache.remove(cacheKey);    return null;}
0858b15bd074edf5e4a166516ac00a456b846a7cb25b281bc640bf0a886896b5
put
public void put(Artifact artifact, boolean resolveManagedVersions, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories, ResolutionGroup result)
{    put(newCacheKey(artifact, resolveManagedVersions, localRepository, remoteRepositories), result);}
3d6b4f4a321206f7e3c316853c20d90e5030180d7bae28574e0e59ca37db5787
newCacheKey
protected CacheKey newCacheKey(Artifact artifact, boolean resolveManagedVersions, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories)
{    return new CacheKey(artifact, resolveManagedVersions, localRepository, remoteRepositories);}
4e6ebfa472da6604f0e8fe946539c35c69ebfc857fcd671c59617dfd915d5ae9
put
protected void put(CacheKey cacheKey, ResolutionGroup result)
{    CacheRecord cacheRecord = new CacheRecord(result.getPomArtifact(), result.getRelocatedArtifact(), result.getArtifacts(), result.getManagedVersions(), result.getResolutionRepositories());    cache.put(cacheKey, cacheRecord);}
ea956eca0ceec4b07db63def8a0f238be4f058fb174f02b053447578581df262
flush
public void flush()
{    cache.clear();}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return groupId + ":" + artifactId + ":" + version;}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    return hashCode;}
8d37d11c7ecfc0d0589696a89cb385888c83bd3e43ea0c95a3b4ae4ef78180ce
equals
public boolean equals(Object o)
{    if (o == this) {        return true;    }    if (!(o instanceof CacheKey)) {        return false;    }    CacheKey that = (CacheKey) o;    return Objects.equals(groupId, that.groupId) && Objects.equals(artifactId, that.artifactId) && Objects.equals(version, that.version) && Objects.equals(dependencyArtifacts, that.dependencyArtifacts) && Objects.equals(workspace, that.workspace) && Objects.equals(localRepo, that.localRepo) && RepositoryUtils.repositoriesEquals(repositories, that.repositories) && Objects.equals(collect, that.collect) && Objects.equals(resolve, that.resolve) && aggregating == that.aggregating;}
d4e572c46bcb4793c2ce8540676031b5659c8d42cbd006c6add3c80cd476439e
createKey
public Key createKey(MavenProject project, Collection<String> scopesToCollect, Collection<String> scopesToResolve, boolean aggregating, RepositorySystemSession session)
{    return new CacheKey(project, project.getRemoteProjectRepositories(), scopesToCollect, scopesToResolve, aggregating, session);}
c822f1e6579e83b5f9447f7c901e036e1719e8f54cdc8ee0b19967fe05d01590
get
public CacheRecord get(Key key) throws LifecycleExecutionException
{    CacheRecord cacheRecord = cache.get(key);    if (cacheRecord != null && cacheRecord.getException() != null) {        throw cacheRecord.getException();    }    return cacheRecord;}
acff4788dabd73d68567fa27c9b45d008efb42b7982391f750f7f6500fd82858
put
public CacheRecord put(Key key, Set<Artifact> projectArtifacts)
{    Objects.requireNonNull(projectArtifacts, "projectArtifacts cannot be null");    assertUniqueKey(key);    CacheRecord record = new CacheRecord(Collections.unmodifiableSet(new LinkedHashSet<>(projectArtifacts)));    cache.put(key, record);    return record;}
110359f154a9fad8ac3e577596bfa22cae29eb997532318694802ff9490a6ee3
assertUniqueKey
protected void assertUniqueKey(Key key)
{    if (cache.containsKey(key)) {        throw new IllegalStateException("Duplicate artifact resolution result for project " + key);    }}
4553a417ac3cbebf6ccf031aecd93ee0c3b5a3902f5e6a577466da6c15d4e675
put
public CacheRecord put(Key key, LifecycleExecutionException exception)
{    Objects.requireNonNull(exception, "exception cannot be null");    assertUniqueKey(key);    CacheRecord record = new CacheRecord(exception);    cache.put(key, record);    return record;}
ea956eca0ceec4b07db63def8a0f238be4f058fb174f02b053447578581df262
flush
public void flush()
{    cache.clear();}
98e2b11174cf109a8899f4b2b9a7fd49850806d92daa8c96f8ae9c63f7609d4a
register
public void register(MavenProject project, Key cacheKey, CacheRecord record)
{}
318388d370c7316e8cf967d497d95fde2c86982cf831ef2c67918eaa671b28d7
formatLocationInPom
private static String formatLocationInPom(Dependency dependency)
{    return "Dependency: " + ArtifactUtils.versionlessKey(dependency.getGroupId(), dependency.getArtifactId());}
7fff3741c2125c4011d8febf8d3f255073b69b9d3003c531ce5a284c4820063f
getDependency
public Dependency getDependency()
{    return dependency;}
188ddb0e6b7e91291febb51aef57ffb92bc21dfe3cee81a529c3214f449ecb88
injectSession
private void injectSession(MetadataResolutionRequest request)
{    RepositorySystemSession session = legacySupport.getRepositorySession();    if (session != null) {        request.setOffline(session.isOffline());        request.setForceUpdate(RepositoryPolicy.UPDATE_POLICY_ALWAYS.equals(session.getUpdatePolicy()));    }}
5bba400f6603b67e47f7e66643840fc70b026b0c24e45f5186f68b7b6868d426
retrieve
public ResolutionGroup retrieve(Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories) throws ArtifactMetadataRetrievalException
{    return retrieve(artifact, localRepository, remoteRepositories, false);}
ed4458fbb42ce28cee351c31bb43f3bc977c4c1c9ef3b94425fe0829ee503f15
retrieve
public ResolutionGroup retrieve(Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories, boolean resolveManagedVersions) throws ArtifactMetadataRetrievalException
{    MetadataResolutionRequest request = new DefaultMetadataResolutionRequest();    injectSession(request);    request.setArtifact(artifact);    request.setLocalRepository(localRepository);    request.setRemoteRepositories(remoteRepositories);    request.setResolveManagedVersions(resolveManagedVersions);    return retrieve(request);}
9b8ea57ab997d4826bd7a3e3824dd6e2acc6f5ff7cf8e12bb559485f7a81bae8
retrieve
public ResolutionGroup retrieve(MetadataResolutionRequest request) throws ArtifactMetadataRetrievalException
{    Artifact artifact = request.getArtifact();        if (artifact.getScope() != null && artifact.getScope().equals(Artifact.SCOPE_SYSTEM)) {        return new ResolutionGroup(null, null, null);    }    ResolutionGroup cached = cache.get(artifact, request.isResolveManagedVersions(), request.getLocalRepository(), request.getRemoteRepositories());    if (cached != null &&     (!request.isForceUpdate() || hasFile(cached.getPomArtifact()))) {        return cached;    }    List<Dependency> dependencies;    List<Dependency> managedDependencies = null;    List<ArtifactRepository> pomRepositories = null;    Artifact pomArtifact;    Artifact relocatedArtifact = null;    final WorkspaceReader workspace = legacySupport.getRepositorySession().getWorkspaceReader();    Model model = null;    if (workspace instanceof MavenWorkspaceReader) {        model = ((MavenWorkspaceReader) workspace).findModel(RepositoryUtils.toArtifact(artifact));    }    if (model != null) {        pomArtifact = artifact;        dependencies = model.getDependencies();        DependencyManagement dependencyManagement = model.getDependencyManagement();        managedDependencies = dependencyManagement == null ? null : dependencyManagement.getDependencies();    } else if (artifact instanceof ArtifactWithDependencies) {        pomArtifact = artifact;        dependencies = ((ArtifactWithDependencies) artifact).getDependencies();        managedDependencies = ((ArtifactWithDependencies) artifact).getManagedDependencies();    } else {        ProjectRelocation rel = retrieveRelocatedProject(artifact, request);        if (rel == null) {            return null;        }        pomArtifact = rel.pomArtifact;        relocatedArtifact = rel.relocatedArtifact;        if (rel.project == null) {                                    dependencies = Collections.emptyList();        } else {            dependencies = rel.project.getDependencies();            DependencyManagement depMgmt = rel.project.getDependencyManagement();            managedDependencies = (depMgmt != null) ? depMgmt.getDependencies() : null;            pomRepositories = rel.project.getRemoteArtifactRepositories();        }    }    Set<Artifact> artifacts = Collections.emptySet();    if (!artifact.getArtifactHandler().isIncludesDependencies()) {        artifacts = new LinkedHashSet<>();        for (Dependency dependency : dependencies) {            Artifact dependencyArtifact = createDependencyArtifact(dependency, artifact, pomArtifact);            if (dependencyArtifact != null) {                artifacts.add(dependencyArtifact);            }        }    }    Map<String, Artifact> managedVersions = null;    if (managedDependencies != null && request.isResolveManagedVersions()) {        managedVersions = new HashMap<>();        for (Dependency managedDependency : managedDependencies) {            Artifact managedArtifact = createDependencyArtifact(managedDependency, null, pomArtifact);            managedVersions.put(managedDependency.getManagementKey(), managedArtifact);        }    }    List<ArtifactRepository> aggregatedRepositories = aggregateRepositories(request.getRemoteRepositories(), pomRepositories);    ResolutionGroup result = new ResolutionGroup(pomArtifact, relocatedArtifact, artifacts, managedVersions, aggregatedRepositories);    cache.put(artifact, request.isResolveManagedVersions(), request.getLocalRepository(), request.getRemoteRepositories(), result);    return result;}
647fa3fce81d648c23093812c6f8a64f47ee9744806f8a58dbdcce9eccb7e7aa
hasFile
private boolean hasFile(Artifact artifact)
{    return artifact != null && artifact.getFile() != null && artifact.getFile().exists();}
dfbfb2e6b086b487c4865ab6a33a93ccf8e9cebbb4116c87974ba35bda317daa
aggregateRepositories
private List<ArtifactRepository> aggregateRepositories(List<ArtifactRepository> requestRepositories, List<ArtifactRepository> pomRepositories)
{    List<ArtifactRepository> repositories = requestRepositories;    if (pomRepositories != null && !pomRepositories.isEmpty()) {        Map<String, ArtifactRepository> repos = new LinkedHashMap<>();        for (ArtifactRepository repo : requestRepositories) {            if (!repos.containsKey(repo.getId())) {                repos.put(repo.getId(), repo);            }        }        for (ArtifactRepository repo : pomRepositories) {            if (!repos.containsKey(repo.getId())) {                repos.put(repo.getId(), repo);            }        }        repositories = new ArrayList<>(repos.values());    }    return repositories;}
dc78d81e1902cb578577b8d3f042c20b1c53680c7a46d9c619233aca09d4f7b1
createDependencyArtifact
private Artifact createDependencyArtifact(Dependency dependency, Artifact owner, Artifact pom) throws ArtifactMetadataRetrievalException
{    try {        String inheritedScope = (owner != null) ? owner.getScope() : null;        ArtifactFilter inheritedFilter = (owner != null) ? owner.getDependencyFilter() : null;        return createDependencyArtifact(repositorySystem, dependency, inheritedScope, inheritedFilter);    } catch (InvalidVersionSpecificationException e) {        throw new ArtifactMetadataRetrievalException("Invalid version for dependency " + dependency.getManagementKey() + ": " + e.getMessage(), e, pom);    }}
7334591f1c51018ed419cd0a0ced8a7fe5f0f309f4ccb69665147e0c21a68c2d
createDependencyArtifact
private static Artifact createDependencyArtifact(ArtifactFactory factory, Dependency dependency, String inheritedScope, ArtifactFilter inheritedFilter) throws InvalidVersionSpecificationException
{    String effectiveScope = getEffectiveScope(dependency.getScope(), inheritedScope);    if (effectiveScope == null) {        return null;    }    VersionRange versionRange = VersionRange.createFromVersionSpec(dependency.getVersion());    Artifact dependencyArtifact = factory.createDependencyArtifact(dependency.getGroupId(), dependency.getArtifactId(), versionRange, dependency.getType(), dependency.getClassifier(), effectiveScope, dependency.isOptional());    ArtifactFilter dependencyFilter = inheritedFilter;    if (dependencyFilter != null && !dependencyFilter.include(dependencyArtifact)) {        return null;    }    if (Artifact.SCOPE_SYSTEM.equals(effectiveScope)) {        dependencyArtifact.setFile(new File(dependency.getSystemPath()));    }    dependencyArtifact.setDependencyFilter(createDependencyFilter(dependency, dependencyFilter));    return dependencyArtifact;}
2f5fe64ff16d2c68e6b470bad6f29af02c0823602a3f492b1aa76b070a39ecf0
getEffectiveScope
private static String getEffectiveScope(String originalScope, String inheritedScope)
{    String effectiveScope = Artifact.SCOPE_RUNTIME;    if (originalScope == null) {        originalScope = Artifact.SCOPE_COMPILE;    }    if (inheritedScope == null) {                effectiveScope = originalScope;    } else if (Artifact.SCOPE_TEST.equals(originalScope) || Artifact.SCOPE_PROVIDED.equals(originalScope)) {                effectiveScope = null;    } else if (Artifact.SCOPE_SYSTEM.equals(originalScope)) {                effectiveScope = Artifact.SCOPE_SYSTEM;    } else if (Artifact.SCOPE_COMPILE.equals(originalScope) && Artifact.SCOPE_COMPILE.equals(inheritedScope)) {                effectiveScope = Artifact.SCOPE_COMPILE;    } else if (Artifact.SCOPE_TEST.equals(inheritedScope)) {        effectiveScope = Artifact.SCOPE_TEST;    } else if (Artifact.SCOPE_PROVIDED.equals(inheritedScope)) {        effectiveScope = Artifact.SCOPE_PROVIDED;    }    return effectiveScope;}
efbbbc38e7cdf781135e7ae01fd23966d82f2d551f78f74ded6c1c7301636ce1
createDependencyFilter
private static ArtifactFilter createDependencyFilter(Dependency dependency, ArtifactFilter inheritedFilter)
{    ArtifactFilter effectiveFilter = inheritedFilter;    if (!dependency.getExclusions().isEmpty()) {        effectiveFilter = new ExclusionArtifactFilter(dependency.getExclusions());        if (inheritedFilter != null) {            effectiveFilter = new AndArtifactFilter(Arrays.asList(inheritedFilter, effectiveFilter));        }    }    return effectiveFilter;}
f045a47c561ceae88e478bc9c655018ee33f1f9c50881fcce688c25b1aa58caf
retrieveAvailableVersions
public List<ArtifactVersion> retrieveAvailableVersions(Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories) throws ArtifactMetadataRetrievalException
{    MetadataResolutionRequest request = new DefaultMetadataResolutionRequest();    injectSession(request);    request.setArtifact(artifact);    request.setLocalRepository(localRepository);    request.setRemoteRepositories(remoteRepositories);    return retrieveAvailableVersions(request);}
7f1c1281141386384057b32c578f2d0b7885978914cd039afb29ede35aed8dbe
retrieveAvailableVersions
public List<ArtifactVersion> retrieveAvailableVersions(MetadataResolutionRequest request) throws ArtifactMetadataRetrievalException
{    RepositoryMetadata metadata = new ArtifactRepositoryMetadata(request.getArtifact());    try {        repositoryMetadataManager.resolve(metadata, request);    } catch (RepositoryMetadataResolutionException e) {        throw new ArtifactMetadataRetrievalException(e.getMessage(), e, request.getArtifact());    }    List<String> availableVersions = request.getLocalRepository().findVersions(request.getArtifact());    return retrieveAvailableVersionsFromMetadata(metadata.getMetadata(), availableVersions);}
90b53708a91e7cb4d6849f2992d8e6fd7987d6b884f98ff136cf0d626cdb7488
retrieveAvailableVersionsFromDeploymentRepository
public List<ArtifactVersion> retrieveAvailableVersionsFromDeploymentRepository(Artifact artifact, ArtifactRepository localRepository, ArtifactRepository deploymentRepository) throws ArtifactMetadataRetrievalException
{    RepositoryMetadata metadata = new ArtifactRepositoryMetadata(artifact);    try {        repositoryMetadataManager.resolveAlways(metadata, localRepository, deploymentRepository);    } catch (RepositoryMetadataResolutionException e) {        throw new ArtifactMetadataRetrievalException(e.getMessage(), e, artifact);    }    List<String> availableVersions = localRepository.findVersions(artifact);    return retrieveAvailableVersionsFromMetadata(metadata.getMetadata(), availableVersions);}
57aec41e32c0887b4fd30196e58d1c2c665f31aa71a7d80220d432c744f4b8b0
retrieveAvailableVersionsFromMetadata
private List<ArtifactVersion> retrieveAvailableVersionsFromMetadata(Metadata repoMetadata, List<String> availableVersions)
{    Collection<String> versions = new LinkedHashSet<>();    if ((repoMetadata != null) && (repoMetadata.getVersioning() != null)) {        versions.addAll(repoMetadata.getVersioning().getVersions());    }    versions.addAll(availableVersions);    List<ArtifactVersion> artifactVersions = new ArrayList<>(versions.size());    for (String version : versions) {        artifactVersions.add(new DefaultArtifactVersion(version));    }    return artifactVersions;}
f7886cbb3a8b4e9d606570cd37f755daf8866932b5a6c37a25c59f5ca897c96c
createArtifacts
public static Set<Artifact> createArtifacts(ArtifactFactory artifactFactory, List<Dependency> dependencies, String inheritedScope, ArtifactFilter dependencyFilter, MavenProject project) throws InvalidDependencyVersionException
{    Set<Artifact> artifacts = new LinkedHashSet<>();    for (Dependency d : dependencies) {        Artifact dependencyArtifact;        try {            dependencyArtifact = createDependencyArtifact(artifactFactory, d, inheritedScope, dependencyFilter);        } catch (InvalidVersionSpecificationException e) {            throw new InvalidDependencyVersionException(project.getId(), d, project.getFile(), e);        }        if (dependencyArtifact != null) {            artifacts.add(dependencyArtifact);        }    }    return artifacts;}
7b967ccaf75c5e358cfba0da906f7717b797c0b4e5f05189384a7d883fa578bd
getProjectBuilder
private ProjectBuilder getProjectBuilder()
{    if (projectBuilder != null) {        return projectBuilder;    }    try {        projectBuilder = container.lookup(ProjectBuilder.class);    } catch (ComponentLookupException e) {        }    return projectBuilder;}
52532d4421e53395bad1b6fe4d08faf905de90aae6ccc4b383bab23e8be29304
retrieveRelocatedProject
private ProjectRelocation retrieveRelocatedProject(Artifact artifact, MetadataResolutionRequest repositoryRequest) throws ArtifactMetadataRetrievalException
{    MavenProject project;    Artifact pomArtifact;    Artifact relocatedArtifact = null;    boolean done = false;    do {        project = null;        pomArtifact = repositorySystem.createProjectArtifact(artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion(), artifact.getScope());        if ("pom".equals(artifact.getType())) {            pomArtifact.setFile(artifact.getFile());        }        if (Artifact.SCOPE_SYSTEM.equals(artifact.getScope())) {            done = true;        } else {            try {                ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();                configuration.setLocalRepository(repositoryRequest.getLocalRepository());                configuration.setRemoteRepositories(repositoryRequest.getRemoteRepositories());                configuration.setValidationLevel(ModelBuildingRequest.VALIDATION_LEVEL_MINIMAL);                configuration.setProcessPlugins(false);                configuration.setRepositoryMerging(ProjectBuildingRequest.RepositoryMerging.REQUEST_DOMINANT);                configuration.setSystemProperties(getSystemProperties());                configuration.setRepositorySession(legacySupport.getRepositorySession());                project = getProjectBuilder().build(pomArtifact, configuration).getProject();            } catch (ProjectBuildingException e) {                ModelProblem missingParentPom = hasMissingParentPom(e);                if (missingParentPom != null) {                    throw new ArtifactMetadataRetrievalException("Failed to process POM for " + artifact.getId() + ": " + missingParentPom.getMessage(), missingParentPom.getException(), artifact);                }                String message;                if (isMissingPom(e)) {                    message = "Missing POM for " + artifact.getId();                } else if (isNonTransferrablePom(e)) {                    throw new ArtifactMetadataRetrievalException("Failed to retrieve POM for " + artifact.getId() + ": " + e.getCause().getMessage(), e.getCause(), artifact);                } else {                    message = "Invalid POM for " + artifact.getId() + ", transitive dependencies (if any) will not be available" + ", enable debug logging for more details";                }                if (logger.isDebugEnabled()) {                    message += ": " + e.getMessage();                }                logger.warn(message);            }            if (project != null) {                Relocation relocation = null;                DistributionManagement distMgmt = project.getDistributionManagement();                if (distMgmt != null) {                    relocation = distMgmt.getRelocation();                    artifact.setDownloadUrl(distMgmt.getDownloadUrl());                    pomArtifact.setDownloadUrl(distMgmt.getDownloadUrl());                }                if (relocation != null) {                    if (relocation.getGroupId() != null) {                        artifact.setGroupId(relocation.getGroupId());                        relocatedArtifact = artifact;                        project.setGroupId(relocation.getGroupId());                    }                    if (relocation.getArtifactId() != null) {                        artifact.setArtifactId(relocation.getArtifactId());                        relocatedArtifact = artifact;                        project.setArtifactId(relocation.getArtifactId());                    }                    if (relocation.getVersion() != null) {                                                artifact.setVersionRange(VersionRange.createFromVersion(relocation.getVersion()));                        relocatedArtifact = artifact;                        project.setVersion(relocation.getVersion());                    }                    if (artifact.getDependencyFilter() != null && !artifact.getDependencyFilter().include(artifact)) {                        return null;                    }                                                                                List<ArtifactVersion> available = artifact.getAvailableVersions();                    if (available != null && !available.isEmpty()) {                        MetadataResolutionRequest metadataRequest = new DefaultMetadataResolutionRequest(repositoryRequest);                        metadataRequest.setArtifact(artifact);                        available = retrieveAvailableVersions(metadataRequest);                        artifact.setAvailableVersions(available);                    }                    String message = "\n  This artifact has been relocated to " + artifact.getGroupId() + ":" + artifact.getArtifactId() + ":" + artifact.getVersion() + ".\n";                    if (relocation.getMessage() != null) {                        message += "  " + relocation.getMessage() + "\n";                    }                    if (artifact.getDependencyTrail() != null && artifact.getDependencyTrail().size() == 1) {                        logger.warn("While downloading " + pomArtifact.getGroupId() + ":" + pomArtifact.getArtifactId() + ":" + pomArtifact.getVersion() + message + "\n");                    } else {                        logger.debug("While downloading " + pomArtifact.getGroupId() + ":" + pomArtifact.getArtifactId() + ":" + pomArtifact.getVersion() + message + "\n");                    }                } else {                    done = true;                }            } else {                done = true;            }        }    } while (!done);    ProjectRelocation rel = new ProjectRelocation();    rel.project = project;    rel.pomArtifact = pomArtifact;    rel.relocatedArtifact = relocatedArtifact;    return rel;}
a855092f5b112f7ae256fc83801c35c400ab5e599d52c9968cfb4d9e40b6bf8e
hasMissingParentPom
private ModelProblem hasMissingParentPom(ProjectBuildingException e)
{    if (e.getCause() instanceof ModelBuildingException) {        ModelBuildingException mbe = (ModelBuildingException) e.getCause();        for (ModelProblem problem : mbe.getProblems()) {            if (problem.getException() instanceof UnresolvableModelException) {                return problem;            }        }    }    return null;}
adcc0d0dfefd0e8f7fb8a4e495f91456f91055428b2eed7ee7d5ff39c9bd4ae7
isMissingPom
private boolean isMissingPom(Exception e)
{    if (e.getCause() instanceof MultipleArtifactsNotFoundException) {        return true;    }    return e.getCause() instanceof org.eclipse.aether.resolution.ArtifactResolutionException && e.getCause().getCause() instanceof ArtifactNotFoundException;}
45b3d0bc41e2d40276af41563b0e18f3b974a6300370629fb7d2ecf31833871c
isNonTransferrablePom
private boolean isNonTransferrablePom(Exception e)
{    if (e.getCause() instanceof ArtifactResolutionException) {        return true;    }    return e.getCause() instanceof org.eclipse.aether.resolution.ArtifactResolutionException && !(e.getCause().getCause() instanceof ArtifactNotFoundException);}
514df5c22590d88395789a23586efb82b8d856068221d47e47d6ae4401b3f192
getSystemProperties
private Properties getSystemProperties()
{    Properties props = new Properties();    EnvironmentUtils.addEnvVars(props);    SystemProperties.addSystemProperties(props);    return props;}
5d4ace0ef221a194a1d9585a92d0b74ee3987d6559e56dc9f7dc3a2570c07c7c
getDependencies
public List<Dependency> getDependencies()
{    return plugin.getDependencies();}
9595757febc34787dfdfbc88942018e94983fd96b6d9e6a772639612f8c63a2a
getManagedDependencies
public List<Dependency> getManagedDependencies()
{    return Collections.emptyList();}
72a56f4f76ed886823d719d171deaf7269e3e03581e490ae41d8888ab09c151c
getClassifier
public String getClassifier()
{    return null;}
1569f194c7523775c854ff67cac1f81383798e7ba057b83499d6000987730b95
getDirectory
public String getDirectory()
{    return null;}
dd386f4d75b694f73345347a9b2e46289fee679d7748d4d3eee41cd501d6e88c
getExtension
public String getExtension()
{    return "jar";}
345e79f504a23e5b53f54930d7e01f191e855cd500fc60bdda621eec493957bb
getLanguage
public String getLanguage()
{    return "none";}
9a63f6cad461699089dd5d7d862cf5ef3ece77582a35e5816083a14583c6c7e1
getPackaging
public String getPackaging()
{    return "maven-plugin";}
80a8caf96dc1bfc507f0d97c625d5b23ce99f86dc8db2108fd0a07ee92590a10
isAddedToClasspath
public boolean isAddedToClasspath()
{    return true;}
4afd5ea007fd5caeb382a8a7af760bc7954fef2ae8328ed49c32b329839e5cd2
isIncludesDependencies
public boolean isIncludesDependencies()
{    return false;}
cdcc47ed1eccb5aa7ba2aa1d33b327142be7cbcc16c1cff19fde28a6b8e02541
getProject
public MavenProject getProject()
{    return project;}
5d4ace0ef221a194a1d9585a92d0b74ee3987d6559e56dc9f7dc3a2570c07c7c
getDependencies
public List<Dependency> getDependencies()
{    return project.getDependencies();}
9595757febc34787dfdfbc88942018e94983fd96b6d9e6a772639612f8c63a2a
getManagedDependencies
public List<Dependency> getManagedDependencies()
{    DependencyManagement depMngt = project.getDependencyManagement();    return (depMngt != null) ? Collections.unmodifiableList(depMngt.getDependencies()) : Collections.<Dependency>emptyList();}
72a56f4f76ed886823d719d171deaf7269e3e03581e490ae41d8888ab09c151c
getClassifier
public String getClassifier()
{    return null;}
1569f194c7523775c854ff67cac1f81383798e7ba057b83499d6000987730b95
getDirectory
public String getDirectory()
{    return null;}
dd386f4d75b694f73345347a9b2e46289fee679d7748d4d3eee41cd501d6e88c
getExtension
public String getExtension()
{    return "pom";}
345e79f504a23e5b53f54930d7e01f191e855cd500fc60bdda621eec493957bb
getLanguage
public String getLanguage()
{    return "none";}
9a63f6cad461699089dd5d7d862cf5ef3ece77582a35e5816083a14583c6c7e1
getPackaging
public String getPackaging()
{    return "pom";}
80a8caf96dc1bfc507f0d97c625d5b23ce99f86dc8db2108fd0a07ee92590a10
isAddedToClasspath
public boolean isAddedToClasspath()
{    return false;}
4afd5ea007fd5caeb382a8a7af760bc7954fef2ae8328ed49c32b329839e5cd2
isIncludesDependencies
public boolean isIncludesDependencies()
{    return false;}
ce0460f83bd172eacce98e8169f6d9b1d4ec316943fcf77ee2d8f12bbe7327a0
getFile
public File getFile()
{    return file;}
8b77e95c875b704c04f5ddbdbde0bedd5658db2b49479f38a5ae2b19decf32f7
getRemoteFilename
public String getRemoteFilename()
{    return getFilename();}
b8cc1cf841dbcb267a3d27699bb84c13ea8682df96140377dfa882858737fe9d
getLocalFilename
public String getLocalFilename(ArtifactRepository repository)
{    return getFilename();}
1b9ba8c8a854a816b171bea8f9e083fd3d7967210aa5a07f4c61d412ffd36a7f
getFilename
private String getFilename()
{    return getArtifactId() + "-" + artifact.getVersion() + ".pom";}
80fe21068bf70166f67383e729c4e5d6684fd85dd050417c4d779e33eb44b1f7
storeInLocalRepository
public void storeInLocalRepository(ArtifactRepository localRepository, ArtifactRepository remoteRepository) throws RepositoryMetadataStoreException
{    File destination = new File(localRepository.getBasedir(), localRepository.pathOfLocalRepositoryMetadata(this, remoteRepository));    try {        FileUtils.copyFile(file, destination);    } catch (IOException e) {        throw new RepositoryMetadataStoreException("Error copying POM to the local repository.", e);    }}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return "project information for " + artifact.getArtifactId() + " " + artifact.getVersion();}
a566aae8ebe271cc85083f8936c9f756e314dec79de7b7324b49bc9aca8bc3e6
storedInArtifactVersionDirectory
public boolean storedInArtifactVersionDirectory()
{    return true;}
2127b25546d419ff53a6da73c9acb361090188bd943b368d5e79d3f5d5595571
getBaseVersion
public String getBaseVersion()
{    return artifact.getBaseVersion();}
b2585874b87865eace30c330168a04230bae89eeda3d2fe20bf9bf198ae6751e
getKey
public Object getKey()
{    return "project " + artifact.getGroupId() + ":" + artifact.getArtifactId();}
937b6b89139de0aba5ab3f963e257534282a146337ca9fd3f06b42363674f536
merge
public void merge(ArtifactMetadata metadata)
{    ProjectArtifactMetadata m = (ProjectArtifactMetadata) metadata;    if (!m.file.equals(file)) {        throw new IllegalStateException("Cannot add two different pieces of metadata for: " + getKey());    }}
e39e849b5ab9270b13585a83606bd4dbbf47fb0247fd2db3f4a5bb3e00659e12
merge
public void merge(org.apache.maven.repository.legacy.metadata.ArtifactMetadata metadata)
{    this.merge((ArtifactMetadata) metadata);}
7fbcab6f8caea634ee263da5b98d32d0edbb7c9976f623f712b9aa9b45246d30
getArtifacts
public Set<Artifact> getArtifacts()
{    return artifacts;}
afda269f79ca56bf1330c6972b62e47c420914c5fae435d450dfd08a26fe6ef9
getException
public LifecycleExecutionException getException()
{    return exception;}
2d500805e50f3dc649c66e3760e00f774d140162feed2b9a61eecb270e7ed99e
getResolutionFilter
public DependencyFilter getResolutionFilter()
{    return filter;}
93698ec2ecff90b499e70d69f05d9699406e684e85b205d961a8230648a40043
getMavenProject
public MavenProject getMavenProject()
{    return project;}
249c16421d8af9b25ee93ecd862c341aa3afc8023f876e65004c3f450248c6a6
getRepositorySession
public RepositorySystemSession getRepositorySession()
{    return session;}
16584acc2464f52652ca89939a3c4041e631813e0bced9c1fc0bb12750fb98c5
setResolutionFilter
public DependencyResolutionRequest setResolutionFilter(DependencyFilter filter)
{    this.filter = filter;    return this;}
90d8d810f4cce538671474fd3573d9ef4482622d97963658c9b989959e05a9d5
setMavenProject
public DependencyResolutionRequest setMavenProject(MavenProject project)
{    this.project = project;    return this;}
fdad4116ed5062ab0c6457c474f11b2f3f8720ebb285cf956b7ef859ed99d308
setRepositorySession
public DependencyResolutionRequest setRepositorySession(RepositorySystemSession repositorySession)
{    this.session = repositorySession;    return this;}
ed1fc006e96be971c099147190c581205772d4d573744ce19bec77918fb33fd6
getDependencyGraph
public DependencyNode getDependencyGraph()
{    return root;}
9a02f76314b7bb511ecaa8b0d87037d925f6aa28a6e5ceb69145ff5962aa4101
setDependencyGraph
public void setDependencyGraph(DependencyNode root)
{    this.root = root;}
5d4ace0ef221a194a1d9585a92d0b74ee3987d6559e56dc9f7dc3a2570c07c7c
getDependencies
public List<Dependency> getDependencies()
{    return dependencies;}
1dff3065bf37a96258b63b6475be5d5f07bbd9d763ae77e115ba77f406d30f9f
getResolvedDependencies
public List<Dependency> getResolvedDependencies()
{    return resolvedDependencies;}
64219128489258dd4b37e6688b62913b7c64f358a00a6fb0f68a42f8e4d6eb6a
addResolvedDependency
public void addResolvedDependency(Dependency dependency)
{    dependencies.add(dependency);    resolvedDependencies.add(dependency);}
90c80a1cd590d15cc71662e0ee1392d6ad8971fc0566151468c77f01ec2fe373
getUnresolvedDependencies
public List<Dependency> getUnresolvedDependencies()
{    return unresolvedDependencies;}
bf1e05993bce2c01443b9d48ba0cc3d467169dbf53fff1cd5904a23b87f69274
getCollectionErrors
public List<Exception> getCollectionErrors()
{    return collectionErrors;}
fe4fb7a3d384cf2284bb3e180c95d1bef9c5ec85283ed6dc09e2fb447eb5932c
setCollectionErrors
public void setCollectionErrors(List<Exception> exceptions)
{    if (exceptions != null) {        this.collectionErrors = exceptions;    } else {        this.collectionErrors = new ArrayList<>();    }}
9def1f5feb749a20b9ebbe31c126327303cb2cfd702973e37c727082e09490fc
getResolutionErrors
public List<Exception> getResolutionErrors(Dependency dependency)
{    List<Exception> errors = resolutionErrors.get(dependency);    return (errors != null) ? Collections.unmodifiableList(errors) : Collections.<Exception>emptyList();}
09eef5d8b04d6bec2821eb64282791d83057cd3d8844964e03428a94a101e6c1
setResolutionErrors
public void setResolutionErrors(Dependency dependency, List<Exception> errors)
{    dependencies.add(dependency);    unresolvedDependencies.add(dependency);    resolutionErrors.put(dependency, errors);}
fc6bbefd85eefe5d655be5c56047d895c0eeb48b1c6158188b1a17f57838b1c2
attachArtifact
public void attachArtifact(MavenProject project, String artifactType, String artifactClassifier, File artifactFile)
{    String type = artifactType;    ArtifactHandler handler = null;    if (type != null) {        handler = artifactHandlerManager.getArtifactHandler(artifactType);    }    if (handler == null) {        handler = artifactHandlerManager.getArtifactHandler("jar");    }    Artifact artifact = new AttachedArtifact(project.getArtifact(), artifactType, artifactClassifier, handler);    artifact.setFile(artifactFile);    artifact.setResolved(true);    attachArtifact(project, artifact);}
1f9d650e03f594e8cb0b19c9812ceeb7d109755dbdc5f34f64fd659a38ef6b7c
attachArtifact
public void attachArtifact(MavenProject project, String artifactType, File artifactFile)
{    ArtifactHandler handler = artifactHandlerManager.getArtifactHandler(artifactType);    Artifact artifact = new AttachedArtifact(project.getArtifact(), artifactType, handler);    artifact.setFile(artifactFile);    artifact.setResolved(true);    attachArtifact(project, artifact);}
3a03f81edf18677c6eaf997a5ec4b7596bc6641db65f83266afc79feeb1c2eda
attachArtifact
public void attachArtifact(MavenProject project, File artifactFile, String artifactClassifier)
{    Artifact projectArtifact = project.getArtifact();    Artifact artifact = new AttachedArtifact(projectArtifact, projectArtifact.getType(), artifactClassifier, projectArtifact.getArtifactHandler());    artifact.setFile(artifactFile);    artifact.setResolved(true);    attachArtifact(project, artifact);}
a0e3a72321863a249d1ee8ce9c0a2255ee99fa2b24923be3aa20dd0ee708319e
attachArtifact
public void attachArtifact(MavenProject project, Artifact artifact)
{    project.addAttachedArtifact(artifact);}
60e949a140a79b404adbd16c5a70cf758ec33d41c75b6719d2e36a9d3dfdd433
addResource
public void addResource(MavenProject project, String resourceDirectory, List<String> includes, List<String> excludes)
{    Resource resource = new Resource();    resource.setDirectory(resourceDirectory);    resource.setIncludes(includes);    resource.setExcludes(excludes);    project.addResource(resource);}
a2e96a47c325ae1252c18e402abe0847c6d214c453a5e9d68576d4f781fd80a1
addTestResource
public void addTestResource(MavenProject project, String resourceDirectory, List<String> includes, List<String> excludes)
{    Resource resource = new Resource();    resource.setDirectory(resourceDirectory);    resource.setIncludes(includes);    resource.setExcludes(excludes);    project.addTestResource(resource);}
cdcc47ed1eccb5aa7ba2aa1d33b327142be7cbcc16c1cff19fde28a6b8e02541
getProject
public MavenProject getProject()
{    return project;}
1e91bec93918d33ff32f96824213790b432e802a412095a02439d448c2fe178f
buildExtensionsAssembled
public void buildExtensionsAssembled(ModelBuildingEvent event)
{    Model model = event.getModel();    try {        pluginRepositories = projectBuildingHelper.createArtifactRepositories(model.getPluginRepositories(), pluginRepositories, projectBuildingRequest);    } catch (Exception e) {        event.getProblems().add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage("Invalid plugin repository: " + e.getMessage()).setException(e));    }    project.setPluginArtifactRepositories(pluginRepositories);    if (event.getRequest().isProcessPlugins()) {        try {            ProjectRealmCache.CacheRecord record = projectBuildingHelper.createProjectRealm(project, model, projectBuildingRequest);            project.setClassRealm(record.getRealm());            project.setExtensionDependencyFilter(record.getExtensionArtifactFilter());        } catch (PluginResolutionException | PluginManagerException | PluginVersionResolutionException e) {            event.getProblems().add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage("Unresolveable build extension: " + e.getMessage()).setException(e));        }        projectBuildingHelper.selectProjectRealm(project);    }        try {        remoteRepositories = projectBuildingHelper.createArtifactRepositories(model.getRepositories(), remoteRepositories, projectBuildingRequest);    } catch (Exception e) {        event.getProblems().add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage("Invalid artifact repository: " + e.getMessage()).setException(e));    }    project.setRemoteArtifactRepositories(remoteRepositories);}
f27ea13dd8e826f4e628242af384d79b2db0532eaf2639378389f6f5a3952e50
build
public ProjectBuildingResult build(File pomFile, ProjectBuildingRequest request) throws ProjectBuildingException
{    return build(pomFile, new FileModelSource(pomFile), new InternalConfig(request, null, useGlobalModelCache() ? getModelCache() : null));}
042c49fccd979ecefb34fd2bb763b4af1652254c36ffd9beeab7d9a4db0fc2e2
useGlobalModelCache
private boolean useGlobalModelCache()
{    return !Boolean.getBoolean(DISABLE_GLOBAL_MODEL_CACHE_SYSTEM_PROPERTY);}
13c569982a9b77ca243f888c15308e589344ee74049fd68cf188dadc2da8ecc5
build
public ProjectBuildingResult build(ModelSource modelSource, ProjectBuildingRequest request) throws ProjectBuildingException
{    return build(null, modelSource, new InternalConfig(request, null, useGlobalModelCache() ? getModelCache() : null));}
0da7eec1b0b878e810d9357cec8914bf3832f14f282278c8da66d9288322ad62
build
private ProjectBuildingResult build(File pomFile, ModelSource modelSource, InternalConfig config) throws ProjectBuildingException
{    ClassLoader oldContextClassLoader = Thread.currentThread().getContextClassLoader();    try {        ProjectBuildingRequest projectBuildingRequest = config.request;        MavenProject project = projectBuildingRequest.getProject();        List<ModelProblem> modelProblems = null;        Throwable error = null;        if (project == null) {            ModelBuildingRequest request = getModelBuildingRequest(config);            project = new MavenProject();            project.setFile(pomFile);            DefaultModelBuildingListener listener = new DefaultModelBuildingListener(project, projectBuildingHelper, projectBuildingRequest);            request.setModelBuildingListener(listener);            request.setPomFile(pomFile);            request.setModelSource(modelSource);            request.setLocationTracking(true);            ModelBuildingResult result;            try {                result = modelBuilder.build(request);            } catch (ModelBuildingException e) {                result = e.getResult();                if (result == null || result.getEffectiveModel() == null) {                    throw new ProjectBuildingException(e.getModelId(), e.getMessage(), pomFile, e);                }                                error = e;            }            modelProblems = result.getProblems();            initProject(project, Collections.<String, MavenProject>emptyMap(), true, result, new HashMap<File, Boolean>(), projectBuildingRequest);        } else if (projectBuildingRequest.isResolveDependencies()) {            projectBuildingHelper.selectProjectRealm(project);        }        DependencyResolutionResult resolutionResult = null;        if (projectBuildingRequest.isResolveDependencies()) {            resolutionResult = resolveDependencies(project, config.session);        }        ProjectBuildingResult result = new DefaultProjectBuildingResult(project, modelProblems, resolutionResult);        if (error != null) {            ProjectBuildingException e = new ProjectBuildingException(Arrays.asList(result));            e.initCause(error);            throw e;        }        return result;    } finally {        Thread.currentThread().setContextClassLoader(oldContextClassLoader);    }}
2e662477b7af08b4872323ceed853b037f26b7b8061f3e47b0626ead5e3175b0
resolveDependencies
private DependencyResolutionResult resolveDependencies(MavenProject project, RepositorySystemSession session)
{    DependencyResolutionResult resolutionResult;    try {        DefaultDependencyResolutionRequest resolution = new DefaultDependencyResolutionRequest(project, session);        resolutionResult = dependencyResolver.resolve(resolution);    } catch (DependencyResolutionException e) {        resolutionResult = e.getResult();    }    Set<Artifact> artifacts = new LinkedHashSet<>();    if (resolutionResult.getDependencyGraph() != null) {        RepositoryUtils.toArtifacts(artifacts, resolutionResult.getDependencyGraph().getChildren(), Collections.singletonList(project.getArtifact().getId()), null);                LocalRepositoryManager lrm = session.getLocalRepositoryManager();        for (Artifact artifact : artifacts) {            if (!artifact.isResolved()) {                String path = lrm.getPathForLocalArtifact(RepositoryUtils.toArtifact(artifact));                artifact.setFile(new File(lrm.getRepository().getBasedir(), path));            }        }    }    project.setResolvedArtifacts(artifacts);    project.setArtifacts(artifacts);    return resolutionResult;}
b6d2905b6c61a840d1c36ad15ae46c173aaa54da179b2661acfba133946b5994
getProfileIds
private List<String> getProfileIds(List<Profile> profiles)
{    List<String> ids = new ArrayList<>(profiles.size());    for (Profile profile : profiles) {        ids.add(profile.getId());    }    return ids;}
4ec3ef883f6d1dfedf36a1550a3a36bca795fddc870792330eb76229ee58cad0
getModelBuildingRequest
private ModelBuildingRequest getModelBuildingRequest(InternalConfig config)
{    ProjectBuildingRequest configuration = config.request;    ModelBuildingRequest request = new DefaultModelBuildingRequest();    RequestTrace trace = RequestTrace.newChild(null, configuration).newChild(request);    ModelResolver resolver = new ProjectModelResolver(config.session, trace, repoSystem, repositoryManager, config.repositories, configuration.getRepositoryMerging(), config.modelPool);    request.setValidationLevel(configuration.getValidationLevel());    request.setProcessPlugins(configuration.isProcessPlugins());    request.setProfiles(configuration.getProfiles());    request.setActiveProfileIds(configuration.getActiveProfileIds());    request.setInactiveProfileIds(configuration.getInactiveProfileIds());    request.setSystemProperties(configuration.getSystemProperties());    request.setUserProperties(configuration.getUserProperties());    request.setBuildStartTime(configuration.getBuildStartTime());    request.setModelResolver(resolver);    request.setModelCache(config.modelCache);    return request;}
0f8f154bbaaf562bad535a682f37e39a295adf80f7dabf122b0d908d80aedc19
build
public ProjectBuildingResult build(Artifact artifact, ProjectBuildingRequest request) throws ProjectBuildingException
{    return build(artifact, false, request);}
8794a45eba5f0479a8b47904e6e0db268fdd9e7e4abf9192de550a7f4c794b15
build
public ProjectBuildingResult build(Artifact artifact, boolean allowStubModel, ProjectBuildingRequest request) throws ProjectBuildingException
{    org.eclipse.aether.artifact.Artifact pomArtifact = RepositoryUtils.toArtifact(artifact);    pomArtifact = ArtifactDescriptorUtils.toPomArtifact(pomArtifact);    InternalConfig config = new InternalConfig(request, null, useGlobalModelCache() ? getModelCache() : null);    boolean localProject;    try {        ArtifactRequest pomRequest = new ArtifactRequest();        pomRequest.setArtifact(pomArtifact);        pomRequest.setRepositories(config.repositories);        ArtifactResult pomResult = repoSystem.resolveArtifact(config.session, pomRequest);        pomArtifact = pomResult.getArtifact();        localProject = pomResult.getRepository() instanceof WorkspaceRepository;    } catch (org.eclipse.aether.resolution.ArtifactResolutionException e) {        if (e.getResults().get(0).isMissing() && allowStubModel) {            return build(null, createStubModelSource(artifact), config);        }        throw new ProjectBuildingException(artifact.getId(), "Error resolving project artifact: " + e.getMessage(), e);    }    File pomFile = pomArtifact.getFile();    if ("pom".equals(artifact.getType())) {        artifact.selectVersion(pomArtifact.getVersion());        artifact.setFile(pomFile);        artifact.setResolved(true);    }    return build(localProject ? pomFile : null, new FileModelSource(pomFile), config);}
ea3edb11c977ce694f24c300669abd859693c98d11a7f794e1e24bcfcc06d819
createStubModelSource
private ModelSource createStubModelSource(Artifact artifact)
{    StringBuilder buffer = new StringBuilder(1024);    buffer.append("<?xml version='1.0'?>");    buffer.append("<project>");    buffer.append("<modelVersion>4.0.0</modelVersion>");    buffer.append("<groupId>").append(artifact.getGroupId()).append("</groupId>");    buffer.append("<artifactId>").append(artifact.getArtifactId()).append("</artifactId>");    buffer.append("<version>").append(artifact.getBaseVersion()).append("</version>");    buffer.append("<packaging>").append(artifact.getType()).append("</packaging>");    buffer.append("</project>");    return new StringModelSource(buffer, artifact.getId());}
f3fb670e7d1742348b1c18b6f2d4501cb8f2602873e07503f32034026da5d33a
build
public List<ProjectBuildingResult> build(List<File> pomFiles, boolean recursive, ProjectBuildingRequest request) throws ProjectBuildingException
{    List<ProjectBuildingResult> results = new ArrayList<>();    List<InterimResult> interimResults = new ArrayList<>();    ReactorModelPool modelPool = new ReactorModelPool();    InternalConfig config = new InternalConfig(request, modelPool, useGlobalModelCache() ? getModelCache() : new ReactorModelCache());    Map<String, MavenProject> projectIndex = new HashMap<>(256);    boolean noErrors = build(results, interimResults, projectIndex, pomFiles, new LinkedHashSet<File>(), true, recursive, config);    populateReactorModelPool(modelPool, interimResults);    ClassLoader oldContextClassLoader = Thread.currentThread().getContextClassLoader();    try {        noErrors = build(results, new ArrayList<MavenProject>(), projectIndex, interimResults, request, new HashMap<File, Boolean>(), config.session) && noErrors;    } finally {        Thread.currentThread().setContextClassLoader(oldContextClassLoader);    }    if (!noErrors) {        throw new ProjectBuildingException(results);    }    return results;}
d4b80fc2d717d66aaa4611c1b1cd8a3b9889cf18ac3de91d1244d65f8a595e51
build
private boolean build(List<ProjectBuildingResult> results, List<InterimResult> interimResults, Map<String, MavenProject> projectIndex, List<File> pomFiles, Set<File> aggregatorFiles, boolean isRoot, boolean recursive, InternalConfig config)
{    boolean noErrors = true;    for (File pomFile : pomFiles) {        aggregatorFiles.add(pomFile);        if (!build(results, interimResults, projectIndex, pomFile, aggregatorFiles, isRoot, recursive, config)) {            noErrors = false;        }        aggregatorFiles.remove(pomFile);    }    return noErrors;}
34e84309098aad6959470dce44227a284a19576c99a007439b8930d58707b7d7
build
private boolean build(List<ProjectBuildingResult> results, List<InterimResult> interimResults, Map<String, MavenProject> projectIndex, File pomFile, Set<File> aggregatorFiles, boolean isRoot, boolean recursive, InternalConfig config)
{    boolean noErrors = true;    ModelBuildingRequest request = getModelBuildingRequest(config);    MavenProject project = new MavenProject();    project.setFile(pomFile);    request.setPomFile(pomFile);    request.setTwoPhaseBuilding(true);    request.setLocationTracking(true);    DefaultModelBuildingListener listener = new DefaultModelBuildingListener(project, projectBuildingHelper, config.request);    request.setModelBuildingListener(listener);    ModelBuildingResult result;    try {        result = modelBuilder.build(request);    } catch (ModelBuildingException e) {        result = e.getResult();        if (result == null || result.getEffectiveModel() == null) {            results.add(new DefaultProjectBuildingResult(e.getModelId(), pomFile, e.getProblems()));            return false;        }                        noErrors = false;    }    Model model = result.getEffectiveModel();    try {                initProject(project, projectIndex, false, result, new HashMap<File, Boolean>(0), config.request);    } catch (InvalidArtifactRTException iarte) {        result.getProblems().add(new DefaultModelProblem(null, ModelProblem.Severity.ERROR, null, model, -1, -1, iarte));    }    projectIndex.put(result.getModelIds().get(0), project);    InterimResult interimResult = new InterimResult(pomFile, request, result, listener, isRoot);    interimResults.add(interimResult);    if (recursive && !model.getModules().isEmpty()) {        File basedir = pomFile.getParentFile();        List<File> moduleFiles = new ArrayList<>();        for (String module : model.getModules()) {            if (StringUtils.isEmpty(module)) {                continue;            }            module = module.replace('\\', File.separatorChar).replace('/', File.separatorChar);            File moduleFile = new File(basedir, module);            if (moduleFile.isDirectory()) {                moduleFile = modelProcessor.locatePom(moduleFile);            }            if (!moduleFile.isFile()) {                ModelProblem problem = new DefaultModelProblem("Child module " + moduleFile + " of " + pomFile + " does not exist", ModelProblem.Severity.ERROR, ModelProblem.Version.BASE, model, -1, -1, null);                result.getProblems().add(problem);                noErrors = false;                continue;            }            if (Os.isFamily(Os.FAMILY_WINDOWS)) {                                try {                    moduleFile = moduleFile.getCanonicalFile();                } catch (IOException e) {                    moduleFile = moduleFile.getAbsoluteFile();                }            } else {                moduleFile = new File(moduleFile.toURI().normalize());            }            if (aggregatorFiles.contains(moduleFile)) {                StringBuilder buffer = new StringBuilder(256);                for (File aggregatorFile : aggregatorFiles) {                    buffer.append(aggregatorFile).append(" -> ");                }                buffer.append(moduleFile);                ModelProblem problem = new DefaultModelProblem("Child module " + moduleFile + " of " + pomFile + " forms aggregation cycle " + buffer, ModelProblem.Severity.ERROR, ModelProblem.Version.BASE, model, -1, -1, null);                result.getProblems().add(problem);                noErrors = false;                continue;            }            moduleFiles.add(moduleFile);        }        interimResult.modules = new ArrayList<>();        if (!build(results, interimResult.modules, projectIndex, moduleFiles, aggregatorFiles, false, recursive, config)) {            noErrors = false;        }    }    return noErrors;}
d3c8af86a6fe7bb605672dd8fd637a67cfb9b91bc7883bf353910093fadf3124
populateReactorModelPool
private void populateReactorModelPool(ReactorModelPool reactorModelPool, List<InterimResult> interimResults)
{    for (InterimResult interimResult : interimResults) {        Model model = interimResult.result.getEffectiveModel();        reactorModelPool.put(model.getGroupId(), model.getArtifactId(), model.getVersion(), model.getPomFile());        populateReactorModelPool(reactorModelPool, interimResult.modules);    }}
c1c0f5183c60d76d64c85ab4b2509915a594adf7da07acd56b42c5db1b65a262
build
private boolean build(List<ProjectBuildingResult> results, List<MavenProject> projects, Map<String, MavenProject> projectIndex, List<InterimResult> interimResults, ProjectBuildingRequest request, Map<File, Boolean> profilesXmls, RepositorySystemSession session)
{    boolean noErrors = true;    for (InterimResult interimResult : interimResults) {        MavenProject project = interimResult.listener.getProject();        try {            ModelBuildingResult result = modelBuilder.build(interimResult.request, interimResult.result);                        try {                initProject(project, projectIndex, true, result, profilesXmls, request);            } catch (InvalidArtifactRTException iarte) {                result.getProblems().add(new DefaultModelProblem(null, ModelProblem.Severity.ERROR, null, result.getEffectiveModel(), -1, -1, iarte));            }            List<MavenProject> modules = new ArrayList<>();            noErrors = build(results, modules, projectIndex, interimResult.modules, request, profilesXmls, session) && noErrors;            projects.addAll(modules);            projects.add(project);            project.setExecutionRoot(interimResult.root);            project.setCollectedProjects(modules);            DependencyResolutionResult resolutionResult = null;            if (request.isResolveDependencies()) {                resolutionResult = resolveDependencies(project, session);            }            results.add(new DefaultProjectBuildingResult(project, result.getProblems(), resolutionResult));        } catch (ModelBuildingException e) {            DefaultProjectBuildingResult result = null;            if (project == null) {                result = new DefaultProjectBuildingResult(e.getModelId(), interimResult.pomFile, e.getProblems());            } else {                result = new DefaultProjectBuildingResult(project, e.getProblems(), null);            }            results.add(result);            noErrors = false;        }    }    return noErrors;}
9d4c9b288a71a9e266280ff18729192252a88cd77ae6ad65107ff18c13353c22
initProject
private void initProject(MavenProject project, Map<String, MavenProject> projects, boolean buildParentIfNotExisting, ModelBuildingResult result, Map<File, Boolean> profilesXmls, ProjectBuildingRequest projectBuildingRequest)
{    Model model = result.getEffectiveModel();    project.setModel(model);    project.setOriginalModel(result.getRawModel());    project.setFile(model.getPomFile());    initParent(project, projects, buildParentIfNotExisting, result, projectBuildingRequest);    Artifact projectArtifact = repositorySystem.createArtifact(project.getGroupId(), project.getArtifactId(), project.getVersion(), null, project.getPackaging());    project.setArtifact(projectArtifact);    if (    project.getFile() != null && buildParentIfNotExisting) {        Build build = project.getBuild();        project.addScriptSourceRoot(build.getScriptSourceDirectory());        project.addCompileSourceRoot(build.getSourceDirectory());        project.addTestCompileSourceRoot(build.getTestSourceDirectory());    }    List<Profile> activeProfiles = new ArrayList<>();    activeProfiles.addAll(result.getActivePomProfiles(result.getModelIds().get(0)));    activeProfiles.addAll(result.getActiveExternalProfiles());    project.setActiveProfiles(activeProfiles);    project.setInjectedProfileIds("external", getProfileIds(result.getActiveExternalProfiles()));    for (String modelId : result.getModelIds()) {        project.setInjectedProfileIds(modelId, getProfileIds(result.getActivePomProfiles(modelId)));    }    String modelId = findProfilesXml(result, profilesXmls);    if (modelId != null) {        ModelProblem problem = new DefaultModelProblem("Detected profiles.xml alongside " + modelId + ", this file is no longer supported and was ignored" + ", please use the settings.xml instead", ModelProblem.Severity.WARNING, ModelProblem.Version.V30, model, -1, -1, null);        result.getProblems().add(problem);    }                project.setProjectBuildingRequest(projectBuildingRequest);        Set<Artifact> pluginArtifacts = new HashSet<>();    for (Plugin plugin : project.getBuildPlugins()) {        Artifact artifact = repositorySystem.createPluginArtifact(plugin);        if (artifact != null) {            pluginArtifacts.add(artifact);        }    }    project.setPluginArtifacts(pluginArtifacts);        Set<Artifact> reportArtifacts = new HashSet<>();    for (ReportPlugin report : project.getReportPlugins()) {        Plugin pp = new Plugin();        pp.setGroupId(report.getGroupId());        pp.setArtifactId(report.getArtifactId());        pp.setVersion(report.getVersion());        Artifact artifact = repositorySystem.createPluginArtifact(pp);        if (artifact != null) {            reportArtifacts.add(artifact);        }    }    project.setReportArtifacts(reportArtifacts);        Set<Artifact> extensionArtifacts = new HashSet<>();    List<Extension> extensions = project.getBuildExtensions();    if (extensions != null) {        for (Extension ext : extensions) {            String version;            if (StringUtils.isEmpty(ext.getVersion())) {                version = "RELEASE";            } else {                version = ext.getVersion();            }            Artifact artifact = repositorySystem.createArtifact(ext.getGroupId(), ext.getArtifactId(), version, null, "jar");            if (artifact != null) {                extensionArtifacts.add(artifact);            }        }    }    project.setExtensionArtifacts(extensionArtifacts);        Map<String, Artifact> map = null;    if (repositorySystem != null) {        final DependencyManagement dependencyManagement = project.getDependencyManagement();        if ((dependencyManagement != null) && ((dependencyManagement.getDependencies()) != null) && (dependencyManagement.getDependencies().size() > 0)) {            map = new AbstractMap<String, Artifact>() {                HashMap<String, Artifact> delegate;                @Override                public Set<Entry<String, Artifact>> entrySet() {                    return Collections.unmodifiableSet(compute().entrySet());                }                @Override                public Set<String> keySet() {                    return Collections.unmodifiableSet(compute().keySet());                }                @Override                public Collection<Artifact> values() {                    return Collections.unmodifiableCollection(compute().values());                }                @Override                public boolean containsValue(Object value) {                    return compute().containsValue(value);                }                @Override                public boolean containsKey(Object key) {                    return compute().containsKey(key);                }                @Override                public Artifact get(Object key) {                    return compute().get(key);                }                HashMap<String, Artifact> compute() {                    if (delegate == null) {                        delegate = new HashMap<>();                        for (Dependency d : dependencyManagement.getDependencies()) {                            Artifact artifact = repositorySystem.createDependencyArtifact(d);                            if (artifact != null) {                                delegate.put(d.getManagementKey(), artifact);                            }                        }                    }                    return delegate;                }            };        } else {            map = Collections.emptyMap();        }    }    project.setManagedVersionMap(map);        if (project.getDistributionManagement() != null && project.getDistributionManagement().getRepository() != null) {        try {            DeploymentRepository r = project.getDistributionManagement().getRepository();            if (!StringUtils.isEmpty(r.getId()) && !StringUtils.isEmpty(r.getUrl())) {                ArtifactRepository repo = repositorySystem.buildArtifactRepository(r);                repositorySystem.injectProxy(projectBuildingRequest.getRepositorySession(), Arrays.asList(repo));                repositorySystem.injectAuthentication(projectBuildingRequest.getRepositorySession(), Arrays.asList(repo));                project.setReleaseArtifactRepository(repo);            }        } catch (InvalidRepositoryException e) {            throw new IllegalStateException("Failed to create release distribution repository for " + project.getId(), e);        }    }        if (project.getDistributionManagement() != null && project.getDistributionManagement().getSnapshotRepository() != null) {        try {            DeploymentRepository r = project.getDistributionManagement().getSnapshotRepository();            if (!StringUtils.isEmpty(r.getId()) && !StringUtils.isEmpty(r.getUrl())) {                ArtifactRepository repo = repositorySystem.buildArtifactRepository(r);                repositorySystem.injectProxy(projectBuildingRequest.getRepositorySession(), Arrays.asList(repo));                repositorySystem.injectAuthentication(projectBuildingRequest.getRepositorySession(), Arrays.asList(repo));                project.setSnapshotArtifactRepository(repo);            }        } catch (InvalidRepositoryException e) {            throw new IllegalStateException("Failed to create snapshot distribution repository for " + project.getId(), e);        }    }}
15f85afe336f08270ff8357601ce75c6f9fa9843dd3551679c3ff2dd8b314f9e
entrySet
public Set<Entry<String, Artifact>> entrySet()
{    return Collections.unmodifiableSet(compute().entrySet());}
19992f7878b292f412223047e28dd68a1ec96625e3ce9dda9ebba09864bae23c
keySet
public Set<String> keySet()
{    return Collections.unmodifiableSet(compute().keySet());}
65a751b9928c900f502ee2e86a78cf6bd2904c29197cf22d2e927ba137fb5700
values
public Collection<Artifact> values()
{    return Collections.unmodifiableCollection(compute().values());}
c628f36c081e450f86a9e82a881e3e7747dea6b3d315f9d7efd8f5266497cb73
containsValue
public boolean containsValue(Object value)
{    return compute().containsValue(value);}
10251f6cf636f49b599299432df558beac5bc221e8b028def33778ce8ebe248a
containsKey
public boolean containsKey(Object key)
{    return compute().containsKey(key);}
97380e6a55206934e038dca1b7f51b90415ac0e6d94352aed5a867a3cdeb499a
get
public Artifact get(Object key)
{    return compute().get(key);}
8852bc245c7b25cde5da95a26fd304e824e0986de2cc406a62c0e5897d2a575c
compute
 HashMap<String, Artifact> compute()
{    if (delegate == null) {        delegate = new HashMap<>();        for (Dependency d : dependencyManagement.getDependencies()) {            Artifact artifact = repositorySystem.createDependencyArtifact(d);            if (artifact != null) {                delegate.put(d.getManagementKey(), artifact);            }        }    }    return delegate;}
74f772eab98ec72601b58f4c13ad665cd75a89ef0785326b24cba9aca47670cc
initParent
private void initParent(MavenProject project, Map<String, MavenProject> projects, boolean buildParentIfNotExisting, ModelBuildingResult result, ProjectBuildingRequest projectBuildingRequest)
{    Model parentModel = result.getModelIds().size() > 1 && !result.getModelIds().get(1).isEmpty() ? result.getRawModel(result.getModelIds().get(1)) : null;    if (parentModel != null) {        final String parentGroupId = inheritedGroupId(result, 1);        final String parentVersion = inheritedVersion(result, 1);        project.setParentArtifact(repositorySystem.createProjectArtifact(parentGroupId, parentModel.getArtifactId(), parentVersion));                String parentModelId = result.getModelIds().get(1);        File parentPomFile = result.getRawModel(parentModelId).getPomFile();        MavenProject parent = projects.get(parentModelId);        if (parent == null && buildParentIfNotExisting) {                                                                        projectBuildingRequest.setRemoteRepositories(project.getRemoteArtifactRepositories());            if (parentPomFile != null) {                project.setParentFile(parentPomFile);                try {                    parent = build(parentPomFile, projectBuildingRequest).getProject();                } catch (ProjectBuildingException e) {                                        if (logger.isDebugEnabled()) {                                                logger.warn("Failed to build parent project for " + project.getId(), e);                    } else {                                                logger.warn("Failed to build parent project for " + project.getId());                    }                }            } else {                Artifact parentArtifact = project.getParentArtifact();                try {                    parent = build(parentArtifact, projectBuildingRequest).getProject();                } catch (ProjectBuildingException e) {                                        if (logger.isDebugEnabled()) {                                                logger.warn("Failed to build parent project for " + project.getId(), e);                    } else {                                                logger.warn("Failed to build parent project for " + project.getId());                    }                }            }        }        project.setParent(parent);        if (project.getParentFile() == null && parent != null) {            project.setParentFile(parent.getFile());        }    }}
7dedb35f57225fa8248a4a7fcbb422f2ec3a28950df4863e06f26136b5668e00
inheritedGroupId
private static String inheritedGroupId(final ModelBuildingResult result, final int modelIndex)
{    String groupId = null;    final String modelId = result.getModelIds().get(modelIndex);    if (!modelId.isEmpty()) {        final Model model = result.getRawModel(modelId);        groupId = model.getGroupId() != null ? model.getGroupId() : inheritedGroupId(result, modelIndex + 1);    }    return groupId;}
524e43a59fa6c9e84d8b68ff075f91d61afe2854cb239a417c59f3d6777864e5
inheritedVersion
private static String inheritedVersion(final ModelBuildingResult result, final int modelIndex)
{    String version = null;    final String modelId = result.getModelIds().get(modelIndex);    if (!modelId.isEmpty()) {        final Model model = result.getRawModel(modelId);        version = model.getVersion() != null ? model.getVersion() : inheritedVersion(result, modelIndex + 1);    }    return version;}
8bb143a611eb9be14050d6521b4a78ae13bfae9159b39803755c8d102bff1b6e
findProfilesXml
private String findProfilesXml(ModelBuildingResult result, Map<File, Boolean> profilesXmls)
{    for (String modelId : result.getModelIds()) {        Model model = result.getRawModel(modelId);        File basedir = model.getProjectDirectory();        if (basedir == null) {            break;        }        Boolean profilesXml = profilesXmls.get(basedir);        if (profilesXml == null) {            profilesXml = new File(basedir, "profiles.xml").exists();            profilesXmls.put(basedir, profilesXml);        }        if (profilesXml) {            return modelId;        }    }    return null;}
c9e646c3a3b07b6ec4320b53a1141fbbb93f4d6ff3330deac1c1b6f62eb7f760
getModelCache
private ReactorModelCache getModelCache()
{    return this.modelCache;}
83aaf0365797449005101ba4a5e4bdec2689c79b6af028cbfa3c0fb00ec9a4c8
createArtifactRepositories
public List<ArtifactRepository> createArtifactRepositories(List<Repository> pomRepositories, List<ArtifactRepository> externalRepositories, ProjectBuildingRequest request) throws InvalidRepositoryException
{    List<ArtifactRepository> internalRepositories = new ArrayList<>();    for (Repository repository : pomRepositories) {        internalRepositories.add(repositorySystem.buildArtifactRepository(repository));    }    repositorySystem.injectMirror(request.getRepositorySession(), internalRepositories);    repositorySystem.injectProxy(request.getRepositorySession(), internalRepositories);    repositorySystem.injectAuthentication(request.getRepositorySession(), internalRepositories);    List<ArtifactRepository> dominantRepositories;    List<ArtifactRepository> recessiveRepositories;    if (ProjectBuildingRequest.RepositoryMerging.REQUEST_DOMINANT.equals(request.getRepositoryMerging())) {        dominantRepositories = externalRepositories;        recessiveRepositories = internalRepositories;    } else {        dominantRepositories = internalRepositories;        recessiveRepositories = externalRepositories;    }    List<ArtifactRepository> artifactRepositories = new ArrayList<>();    Collection<String> repoIds = new HashSet<>();    if (dominantRepositories != null) {        for (ArtifactRepository repository : dominantRepositories) {            repoIds.add(repository.getId());            artifactRepositories.add(repository);        }    }    if (recessiveRepositories != null) {        for (ArtifactRepository repository : recessiveRepositories) {            if (repoIds.add(repository.getId())) {                artifactRepositories.add(repository);            }        }    }    artifactRepositories = repositorySystem.getEffectiveRepositories(artifactRepositories);    return artifactRepositories;}
b2e919007afb5a6ca7f6f00c54e03e34174ad591271eec4707eca8c2802e8646
createProjectRealm
public synchronized ProjectRealmCache.CacheRecord createProjectRealm(MavenProject project, Model model, ProjectBuildingRequest request) throws PluginResolutionException, PluginVersionResolutionException, PluginManagerException
{    ClassRealm projectRealm;    List<Plugin> extensionPlugins = new ArrayList<>();    Build build = model.getBuild();    if (build != null) {        for (Extension extension : build.getExtensions()) {            Plugin plugin = new Plugin();            plugin.setGroupId(extension.getGroupId());            plugin.setArtifactId(extension.getArtifactId());            plugin.setVersion(extension.getVersion());            extensionPlugins.add(plugin);        }        for (Plugin plugin : build.getPlugins()) {            if (plugin.isExtensions()) {                extensionPlugins.add(plugin);            }        }    }    if (extensionPlugins.isEmpty()) {        if (logger.isDebugEnabled()) {            logger.debug("Extension realms for project " + model.getId() + ": (none)");        }        return new ProjectRealmCache.CacheRecord(null, null);    }    List<ClassRealm> extensionRealms = new ArrayList<>();    Map<ClassRealm, List<String>> exportedPackages = new HashMap<>();    Map<ClassRealm, List<String>> exportedArtifacts = new HashMap<>();    List<Artifact> publicArtifacts = new ArrayList<>();    for (Plugin plugin : extensionPlugins) {        ExtensionRealmCache.CacheRecord recordRealm = pluginManager.setupExtensionsRealm(project, plugin, request.getRepositorySession());        final ClassRealm extensionRealm = recordRealm.getRealm();        final ExtensionDescriptor extensionDescriptor = recordRealm.getDescriptor();        final List<Artifact> artifacts = recordRealm.getArtifacts();        extensionRealms.add(extensionRealm);        if (extensionDescriptor != null) {            exportedPackages.put(extensionRealm, extensionDescriptor.getExportedPackages());            exportedArtifacts.put(extensionRealm, extensionDescriptor.getExportedArtifacts());        }        if (!plugin.isExtensions() && artifacts.size() == 2 && artifacts.get(0).getFile() != null && "plexus-utils".equals(artifacts.get(1).getArtifactId())) {            /*                 * This is purely for backward-compat with 2.x where <extensions> consisting of a single artifact where                 * loaded into the core and hence available to plugins, in contrast to bigger extensions that were                 * loaded into a dedicated realm which is invisible to plugins (MNG-2749).                 */            publicArtifacts.add(artifacts.get(0));        }    }    if (logger.isDebugEnabled()) {        logger.debug("Extension realms for project " + model.getId() + ": " + extensionRealms);    }    ProjectRealmCache.Key projectRealmKey = projectRealmCache.createKey(extensionRealms);    ProjectRealmCache.CacheRecord record = projectRealmCache.get(projectRealmKey);    if (record == null) {        projectRealm = classRealmManager.createProjectRealm(model, toAetherArtifacts(publicArtifacts));        Set<String> exclusions = new LinkedHashSet<>();        for (ClassRealm extensionRealm : extensionRealms) {            List<String> excludes = exportedArtifacts.get(extensionRealm);            if (excludes != null) {                exclusions.addAll(excludes);            }            List<String> exports = exportedPackages.get(extensionRealm);            if (exports == null || exports.isEmpty()) {                /*                     * Most existing extensions don't define exported packages, i.e. no classes are to be exposed to                     * plugins, yet the components provided by the extension (e.g. artifact handlers) must be                     * accessible, i.e. we still must import the extension realm into the project realm.                     */                exports = Arrays.asList(extensionRealm.getId());            }            for (String export : exports) {                projectRealm.importFrom(extensionRealm, export);            }        }        DependencyFilter extensionArtifactFilter = null;        if (!exclusions.isEmpty()) {            extensionArtifactFilter = new ExclusionsDependencyFilter(exclusions);        }        record = projectRealmCache.put(projectRealmKey, projectRealm, extensionArtifactFilter);    }    projectRealmCache.register(project, projectRealmKey, record);    return record;}
e674f8adf67ffdd4bdbe55ad65b0528d716bdf10eeb6a3c8a6a838e11a8a1825
selectProjectRealm
public void selectProjectRealm(MavenProject project)
{    ClassLoader projectRealm = project.getClassRealm();    if (projectRealm == null) {        projectRealm = classRealmManager.getCoreRealm();    }    Thread.currentThread().setContextClassLoader(projectRealm);}
7764f2964fa70fb183c8ce5530cb4a1d2177f8a042547ceb6993bb55b7061b0a
toAetherArtifacts
private List<org.eclipse.aether.artifact.Artifact> toAetherArtifacts(final List<Artifact> pluginArtifacts)
{    return new ArrayList<>(RepositoryUtils.toArtifacts(pluginArtifacts));}
cdcc47ed1eccb5aa7ba2aa1d33b327142be7cbcc16c1cff19fde28a6b8e02541
getProject
public MavenProject getProject()
{    return project;}
aa07f9c463ba7abef23d0b51fdae99af7fefe84a09fcc6e5422a149742e69aad
setProject
public void setProject(MavenProject mavenProject)
{    this.project = mavenProject;}
52275bb562e08595fee8840d9defd2b992bae8e4a0decc3ad6747888a06b40c1
setLocalRepository
public ProjectBuildingRequest setLocalRepository(ArtifactRepository localRepository)
{    this.localRepository = localRepository;    return this;}
64dc696be33c6c348d62217243ad7506283ed2be89f1b5410c8acb51390d930b
getLocalRepository
public ArtifactRepository getLocalRepository()
{    return localRepository;}
4fd44e1a9f23aaf113060017b1d8f6d3cf8794c129edf477e6b2ddacdfe7400d
getRemoteRepositories
public List<ArtifactRepository> getRemoteRepositories()
{    return remoteRepositories;}
820ca260c4704e7b7b8d6e073c0e89c14f7e41d90bb2f5a10aed64e6a1f36ced
setRemoteRepositories
public ProjectBuildingRequest setRemoteRepositories(List<ArtifactRepository> remoteRepositories)
{    if (remoteRepositories != null) {        this.remoteRepositories = new ArrayList<>(remoteRepositories);    } else {        this.remoteRepositories.clear();    }    return this;}
4bbff9c28c6ee421876441e9b41e3c97a01a0508845cc7842befb31d0a30f8e8
getPluginArtifactRepositories
public List<ArtifactRepository> getPluginArtifactRepositories()
{    return pluginArtifactRepositories;}
0f5ccf704550925ae57e0a94e50a559fffa6a62805e3abf4c8619c7589e4c141
setPluginArtifactRepositories
public ProjectBuildingRequest setPluginArtifactRepositories(List<ArtifactRepository> pluginArtifactRepositories)
{    if (pluginArtifactRepositories != null) {        this.pluginArtifactRepositories = new ArrayList<>(pluginArtifactRepositories);    } else {        this.pluginArtifactRepositories.clear();    }    return this;}
8b369022cea09c7bb7272e8cc545450dc294bedf652bae5b2ea9f14fffe1fc46
getSystemProperties
public Properties getSystemProperties()
{    return systemProperties;}
50673d776eff603cd1dfa9b830076a5392e5eef2b1bb56eeed7eda53616fdad1
setSystemProperties
public ProjectBuildingRequest setSystemProperties(Properties systemProperties)
{    if (systemProperties != null) {        this.systemProperties = SystemProperties.copyProperties(systemProperties);    } else {        this.systemProperties.clear();    }    return this;}
378f8d6e21d4ae0bd6aa85de0988ab8d214704648e0ad1a17b8ce9c7e3a14225
getUserProperties
public Properties getUserProperties()
{    return userProperties;}
c9300f713094d0f1d1094825e1f4a23621b9b15168d6440856cad356bd714256
setUserProperties
public ProjectBuildingRequest setUserProperties(Properties userProperties)
{    if (userProperties != null) {        this.userProperties = new Properties();        this.userProperties.putAll(userProperties);    } else {        this.userProperties.clear();    }    return this;}
fb5aa23cec5727b1ee69ee2223c3dac50c01a7e9c600cfc3ade8c4592b52fed8
isProcessPlugins
public boolean isProcessPlugins()
{    return processPlugins;}
8ef237b616e631bfa5ff3bd06826c2bfcc40190048ba783775f74442b70af745
setProcessPlugins
public ProjectBuildingRequest setProcessPlugins(boolean processPlugins)
{    this.processPlugins = processPlugins;    return this;}
d1962e58604091f124c278ab8e0b2637aa5cc91855bd140fe35904426496499a
setResolveDependencies
public ProjectBuildingRequest setResolveDependencies(boolean resolveDependencies)
{    this.resolveDependencies = resolveDependencies;    return this;}
25844dc8008ea1a0590cb2270d3cb92aae4f0e831a9c6c85d5b2e51af970aca1
isResolveDependencies
public boolean isResolveDependencies()
{    return resolveDependencies;}
9eff34bb4a615250d8d483de8b87409c1ef2446dfcc0baaefd94c6c19b27963f
setResolveVersionRanges
public ProjectBuildingRequest setResolveVersionRanges(boolean value)
{    this.resolveVersionRanges = value;    return this;}
e0be3a67f3d7870fc135880b149d53b8b87b3c3fb0b182937309fce9980e53c1
isResolveVersionRanges
public boolean isResolveVersionRanges()
{    return this.resolveVersionRanges;}
3068b00c7e8f07aa523e9815afe82c53c59fb69dc1ff472bb824a09cfc141ea5
setValidationLevel
public ProjectBuildingRequest setValidationLevel(int validationLevel)
{    this.validationLevel = validationLevel;    return this;}
cedc9d30d793a95bc432229d6308faea636d2bfe1a884ce5b844a48888ca25e0
getValidationLevel
public int getValidationLevel()
{    return validationLevel;}
e14ffb2a27c664e5057ee17c4a1fb0bb5b055f2a4b10065731f970cb254fa6a4
getActiveProfileIds
public List<String> getActiveProfileIds()
{    return activeProfileIds;}
dec699a687d01d12e899878b40fd7abe0d935e28ef1445233d70edde2636cf04
setActiveProfileIds
public void setActiveProfileIds(List<String> activeProfileIds)
{    if (activeProfileIds != null) {        this.activeProfileIds = new ArrayList<>(activeProfileIds);    } else {        this.activeProfileIds.clear();    }}
74822a7709f5a5a1241339c1cdc0e2793c5f8fec1d0f52e09d8c8b484423e538
getInactiveProfileIds
public List<String> getInactiveProfileIds()
{    return inactiveProfileIds;}
4d2f28c6961197a92ce49cac9f229fce80d40ac07dde83660f8236e723b8722c
setInactiveProfileIds
public void setInactiveProfileIds(List<String> inactiveProfileIds)
{    if (inactiveProfileIds != null) {        this.inactiveProfileIds = new ArrayList<>(inactiveProfileIds);    } else {        this.inactiveProfileIds.clear();    }}
30b31bb7addf2a74d476ca08477e0301f4599c9dcbc17948d7445db59eb9f296
setProfiles
public void setProfiles(List<Profile> profiles)
{    if (profiles != null) {        this.profiles = new ArrayList<>(profiles);    } else {        this.profiles.clear();    }}
4535e6c2132418aeb6de5617c3d87216917f9e9b5131e0983dabeb57eb89e3cd
addProfile
public void addProfile(Profile profile)
{    profiles.add(profile);}
07f936934d46b8317f059da2ec27eb16b676abfedf6a187723d3defbd4f5707f
getProfiles
public List<Profile> getProfiles()
{    return profiles;}
2168fd766a195a9904679de5bb0e68ef88a89fd39b1468640cdae24d4a564431
getBuildStartTime
public Date getBuildStartTime()
{    return buildStartTime;}
dfb710fbf7ae6f859d87030603975ee48c7602493cbc3fc304b0d870c4a16a93
setBuildStartTime
public void setBuildStartTime(Date buildStartTime)
{    this.buildStartTime = buildStartTime;}
249c16421d8af9b25ee93ecd862c341aa3afc8023f876e65004c3f450248c6a6
getRepositorySession
public RepositorySystemSession getRepositorySession()
{    return repositorySession;}
4a913a8f3d51c37eb14deece1d4300513231387bb638d81ca80cbcc473efb2d8
setRepositorySession
public DefaultProjectBuildingRequest setRepositorySession(RepositorySystemSession repositorySession)
{    this.repositorySession = repositorySession;    return this;}
1b58acbc9389d5bc4464b77f215c5bdd0dd97b6a2d2e9414baeae38f6e53befa
setRepositoryMerging
public DefaultProjectBuildingRequest setRepositoryMerging(RepositoryMerging repositoryMerging)
{    this.repositoryMerging = Objects.requireNonNull(repositoryMerging, "repositoryMerging cannot be null");    return this;}
575437b017b6d7f7e526c605dc93879ead35b12d60ce51b6796eb52822063d91
getRepositoryMerging
public RepositoryMerging getRepositoryMerging()
{    return repositoryMerging;}
ad67d5b9fa7e17a19cbfed8dce418c9bb6a0b5a721f5e5755b5b3c36c14801d9
getProjectId
public String getProjectId()
{    return projectId;}
9e41472ee24bfb1867a8e9e5c5bd1fe3eb2642f5fedb094f54f96a5b46b086ba
getPomFile
public File getPomFile()
{    return pomFile;}
cdcc47ed1eccb5aa7ba2aa1d33b327142be7cbcc16c1cff19fde28a6b8e02541
getProject
public MavenProject getProject()
{    return project;}
a2ea96049239ca557f106e499635d922b304c6461a115dff7d982c9db8123264
getProblems
public List<ModelProblem> getProblems()
{    if (problems == null) {        problems = new ArrayList<>();    }    return problems;}
e5639df4dc89ac40df97f0c2755323d9d444d11e457f73243ccc4b14e9b8d01e
getDependencyResolutionResult
public DependencyResolutionResult getDependencyResolutionResult()
{    return dependencyResolutionResult;}
de316baf8266c96f65ccb57b2a16487c5ff7f6e6dff1430877dc88ad04caf585
resolve
public DependencyResolutionResult resolve(DependencyResolutionRequest request) throws DependencyResolutionException
{    final RequestTrace trace = RequestTrace.newChild(null, request);    final DefaultDependencyResolutionResult result = new DefaultDependencyResolutionResult();    final MavenProject project = request.getMavenProject();    final DependencyFilter filter = request.getResolutionFilter();    RepositorySystemSession session = request.getRepositorySession();    ArtifactTypeRegistry stereotypes = session.getArtifactTypeRegistry();    if (logger.isDebugEnabled() && session.getConfigProperties().get(DependencyManagerUtils.CONFIG_PROP_VERBOSE) == null) {        DefaultRepositorySystemSession verbose = new DefaultRepositorySystemSession(session);        verbose.setConfigProperty(DependencyManagerUtils.CONFIG_PROP_VERBOSE, Boolean.TRUE);        session = verbose;    }    for (RepositorySessionDecorator decorator : decorators) {        RepositorySystemSession decorated = decorator.decorate(project, session);        if (decorated != null) {            session = decorated;        }    }    CollectRequest collect = new CollectRequest();    collect.setRootArtifact(RepositoryUtils.toArtifact(project.getArtifact()));    collect.setRequestContext("project");    collect.setRepositories(project.getRemoteProjectRepositories());    if (project.getDependencyArtifacts() == null) {        for (Dependency dependency : project.getDependencies()) {            if (StringUtils.isEmpty(dependency.getGroupId()) || StringUtils.isEmpty(dependency.getArtifactId()) || StringUtils.isEmpty(dependency.getVersion())) {                                continue;            }            collect.addDependency(RepositoryUtils.toDependency(dependency, stereotypes));        }    } else {        Map<String, Dependency> dependencies = new HashMap<>();        for (Dependency dependency : project.getDependencies()) {            String classifier = dependency.getClassifier();            if (classifier == null) {                ArtifactType type = stereotypes.get(dependency.getType());                if (type != null) {                    classifier = type.getClassifier();                }            }            String key = ArtifactIdUtils.toVersionlessId(dependency.getGroupId(), dependency.getArtifactId(), dependency.getType(), classifier);            dependencies.put(key, dependency);        }        for (Artifact artifact : project.getDependencyArtifacts()) {            String key = artifact.getDependencyConflictId();            Dependency dependency = dependencies.get(key);            Collection<Exclusion> exclusions = dependency != null ? dependency.getExclusions() : null;            org.eclipse.aether.graph.Dependency dep = RepositoryUtils.toDependency(artifact, exclusions);            if (!JavaScopes.SYSTEM.equals(dep.getScope()) && dep.getArtifact().getFile() != null) {                                org.eclipse.aether.artifact.Artifact art = dep.getArtifact();                art = art.setFile(null).setVersion(art.getBaseVersion());                dep = dep.setArtifact(art);            }            collect.addDependency(dep);        }    }    DependencyManagement depMgmt = project.getDependencyManagement();    if (depMgmt != null) {        for (Dependency dependency : depMgmt.getDependencies()) {            collect.addManagedDependency(RepositoryUtils.toDependency(dependency, stereotypes));        }    }    DependencyRequest depRequest = new DependencyRequest(collect, filter);    depRequest.setTrace(trace);    DependencyNode node;    try {        collect.setTrace(RequestTrace.newChild(trace, depRequest));        node = repoSystem.collectDependencies(session, collect).getRoot();        result.setDependencyGraph(node);    } catch (DependencyCollectionException e) {        result.setDependencyGraph(e.getResult().getRoot());        result.setCollectionErrors(e.getResult().getExceptions());        throw new DependencyResolutionException(result, "Could not resolve dependencies for project " + project.getId() + ": " + e.getMessage(), e);    }    depRequest.setRoot(node);    if (logger.isWarnEnabled()) {        for (DependencyNode child : node.getChildren()) {            if (!child.getRelocations().isEmpty()) {                logger.warn("The artifact " + child.getRelocations().get(0) + " has been relocated to " + child.getDependency().getArtifact());            }        }    }    if (logger.isDebugEnabled()) {        node.accept(new GraphLogger(project));    }    try {        process(result, repoSystem.resolveDependencies(session, depRequest).getArtifactResults());    } catch (org.eclipse.aether.resolution.DependencyResolutionException e) {        process(result, e.getResult().getArtifactResults());        throw new DependencyResolutionException(result, "Could not resolve dependencies for project " + project.getId() + ": " + e.getMessage(), e);    }    return result;}
7d2a1e5a9a4e24a3a0794821e8de7638ca6d95dff57efe91df06e2caef86f0b5
process
private void process(DefaultDependencyResolutionResult result, Collection<ArtifactResult> results)
{    for (ArtifactResult ar : results) {        DependencyNode node = ar.getRequest().getDependencyNode();        if (ar.isResolved()) {            result.addResolvedDependency(node.getDependency());        } else {            result.setResolutionErrors(node.getDependency(), ar.getExceptions());        }    }}
fa7695d69098c0b02361b51baa295180967a1eae9fbc0666846c0ae40fa58bc0
visitEnter
public boolean visitEnter(DependencyNode node)
{    StringBuilder buffer = new StringBuilder(128);    buffer.append(indent);    org.eclipse.aether.graph.Dependency dep = node.getDependency();    if (dep != null) {        org.eclipse.aether.artifact.Artifact art = dep.getArtifact();        buffer.append(art);        if (StringUtils.isNotEmpty(dep.getScope())) {            buffer.append(':').append(dep.getScope());        }        if (dep.isOptional()) {            buffer.append(" (optional)");        }                if ((node.getManagedBits() & DependencyNode.MANAGED_SCOPE) == DependencyNode.MANAGED_SCOPE) {            final String premanagedScope = DependencyManagerUtils.getPremanagedScope(node);            buffer.append(" (scope managed from ");            buffer.append(StringUtils.defaultString(premanagedScope, "default"));            buffer.append(')');        }        if ((node.getManagedBits() & DependencyNode.MANAGED_VERSION) == DependencyNode.MANAGED_VERSION) {            final String premanagedVersion = DependencyManagerUtils.getPremanagedVersion(node);            buffer.append(" (version managed from ");            buffer.append(StringUtils.defaultString(premanagedVersion, "default"));            buffer.append(')');        }        if ((node.getManagedBits() & DependencyNode.MANAGED_OPTIONAL) == DependencyNode.MANAGED_OPTIONAL) {            final Boolean premanagedOptional = DependencyManagerUtils.getPremanagedOptional(node);            buffer.append(" (optionality managed from ");            buffer.append(StringUtils.defaultString(premanagedOptional, "default"));            buffer.append(')');        }        if ((node.getManagedBits() & DependencyNode.MANAGED_EXCLUSIONS) == DependencyNode.MANAGED_EXCLUSIONS) {            final Collection<org.eclipse.aether.graph.Exclusion> premanagedExclusions = DependencyManagerUtils.getPremanagedExclusions(node);            buffer.append(" (exclusions managed from ");            buffer.append(StringUtils.defaultString(premanagedExclusions, "default"));            buffer.append(')');        }        if ((node.getManagedBits() & DependencyNode.MANAGED_PROPERTIES) == DependencyNode.MANAGED_PROPERTIES) {            final Map<String, String> premanagedProperties = DependencyManagerUtils.getPremanagedProperties(node);            buffer.append(" (properties managed from ");            buffer.append(StringUtils.defaultString(premanagedProperties, "default"));            buffer.append(')');        }    } else {        buffer.append(project.getGroupId());        buffer.append(':').append(project.getArtifactId());        buffer.append(':').append(project.getPackaging());        buffer.append(':').append(project.getVersion());    }    logger.debug(buffer.toString());    indent += "   ";    return true;}
3e25f59bf37cce5dd3c13da4d050df017478c00d296a2b51eaa6c870fd12fe01
visitLeave
public boolean visitLeave(DependencyNode node)
{    indent = indent.substring(0, indent.length() - 3);    return true;}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    return hashCode;}
8d37d11c7ecfc0d0589696a89cb385888c83bd3e43ea0c95a3b4ae4ef78180ce
equals
public boolean equals(Object o)
{    if (o == this) {        return true;    }    if (!(o instanceof CacheKey)) {        return false;    }    CacheKey other = (CacheKey) o;    return extensionRealms.equals(other.extensionRealms);}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return extensionRealms.toString();}
fb123fcade8f50d35c9f1aa220b8dca8be58f235f20047709ea1a1ad2c7fb25f
createKey
public Key createKey(List<? extends ClassRealm> extensionRealms)
{    return new CacheKey(extensionRealms);}
ac1004c5cbc510c5875a14dd2ad92ee037a2d5abbb3ceb451aa48b09a0395530
get
public CacheRecord get(Key key)
{    return cache.get(key);}
426a8f8f0d4908482c601cd788bfd6989eec38519ae975a620087e6a14381137
put
public CacheRecord put(Key key, ClassRealm projectRealm, DependencyFilter extensionArtifactFilter)
{    Objects.requireNonNull(projectRealm, "projectRealm cannot be null");    if (cache.containsKey(key)) {        throw new IllegalStateException("Duplicate project realm for extensions " + key);    }    CacheRecord record = new CacheRecord(projectRealm, extensionArtifactFilter);    cache.put(key, record);    return record;}
ea956eca0ceec4b07db63def8a0f238be4f058fb174f02b053447578581df262
flush
public void flush()
{    for (CacheRecord record : cache.values()) {        ClassRealm realm = record.getRealm();        try {            realm.getWorld().disposeRealm(realm.getId());        } catch (NoSuchRealmException e) {                }    }    cache.clear();}
74571427a40a593456ed72337d7b0bb5110d8203c76fea787335ca80bf426036
register
public void register(MavenProject project, Key key, CacheRecord record)
{}
b9fb45dfe6e038cbb203f12831a900a458fc92323c8db50edb08712565a288f2
dispose
public void dispose()
{    flush();}
24002d21161771faafa552dac17f375b1e785b44fdc67276ab7423acc1bdeac8
getResult
public DependencyResolutionResult getResult()
{    return result;}
a9be66857014d8ba5f6fa15fca121aa8b701f067ad6ffbeaadb89ae4b2c0be9c
constructMessage
private static String constructMessage(MavenProject project, Artifact artifact)
{    return DEFAULT_MESSAGE + " (project: " + project.getId() + "; illegal attachment: " + artifact.getId() + ")";}
cdcc47ed1eccb5aa7ba2aa1d33b327142be7cbcc16c1cff19fde28a6b8e02541
getProject
public MavenProject getProject()
{    return project;}
74532920252ab24aba3facb8f78a175de2fc4c1c8247fe2b3b2dce7bf79f6858
getArtifact
public Artifact getArtifact()
{    return artifact;}
ad67d5b9fa7e17a19cbfed8dce418c9bb6a0b5a721f5e5755b5b3c36c14801d9
getProjectId
public String getProjectId()
{    return projectId;}
b7d580b4245be1098b26e43d14caa879b978c2388a3a9f3830526840b644999c
getExistingProjectFile
public File getExistingProjectFile()
{    return existingProjectFile;}
216994d89711b0b5aa134b9e6d1308aec03b14c52d047f0ebb85be2ef3ca2917
getConflictingProjectFile
public File getConflictingProjectFile()
{    return conflictingProjectFile;}
ca2137a0962a7378310ab6254a6e7900021a3b2ce55d9bd303cd54404b14b03f
getExportedPackages
public List<String> getExportedPackages()
{    if (exportedPackages == null) {        exportedPackages = new ArrayList<>();    }    return exportedPackages;}
390072041169c44c5e4dccd8c87a3cc5a275fc95799840dcbdbd0d7ecb000ff8
setExportedPackages
public void setExportedPackages(List<String> exportedPackages)
{    if (exportedPackages == null) {        this.exportedPackages = null;    } else {        this.exportedPackages = new ArrayList<>(exportedPackages);    }}
fb6db36af51bbf9281bfc48c12908d4f14f6430eb7086750984a5dc4970b5917
getExportedArtifacts
public List<String> getExportedArtifacts()
{    if (exportedArtifacts == null) {        exportedArtifacts = new ArrayList<>();    }    return exportedArtifacts;}
4211955a53d1aa6fd33792a3147544545258ab47dba395c1541e84e557521907
setExportedArtifacts
public void setExportedArtifacts(List<String> exportedArtifacts)
{    if (exportedArtifacts == null) {        this.exportedArtifacts = null;    } else {        this.exportedArtifacts = new ArrayList<>(exportedArtifacts);    }}
4612afea75810a3ffffbeee1a7208f0493261b2c648bd10523709be3c6f812e3
getExtensionDescriptorLocation
public String getExtensionDescriptorLocation()
{    return "META-INF/maven/extension.xml";}
b6c77d6d82e12894989110112e8147926255c8d17993830c376d9de1bc660f26
build
public ExtensionDescriptor build(File extensionJar) throws IOException
{    ExtensionDescriptor extensionDescriptor = null;    if (extensionJar.isFile()) {        try (JarFile pluginJar = new JarFile(extensionJar, false)) {            ZipEntry pluginDescriptorEntry = pluginJar.getEntry(getExtensionDescriptorLocation());            if (pluginDescriptorEntry != null) {                try (InputStream is = pluginJar.getInputStream(pluginDescriptorEntry)) {                    extensionDescriptor = build(is);                }            }        }    } else {        File pluginXml = new File(extensionJar, getExtensionDescriptorLocation());        if (pluginXml.canRead()) {            try (InputStream is = new BufferedInputStream(new FileInputStream(pluginXml))) {                extensionDescriptor = build(is);            }        }    }    return extensionDescriptor;}
9d51bcff2cf923bf02b94df44019c6259c112b69a1ab2811666292589da7bb2a
build
public ExtensionDescriptor build(InputStream is) throws IOException
{    ExtensionDescriptor extensionDescriptor = new ExtensionDescriptor();    Xpp3Dom dom;    try {        dom = Xpp3DomBuilder.build(ReaderFactory.newXmlReader(is));    } catch (XmlPullParserException e) {        throw (IOException) new IOException(e.getMessage()).initCause(e);    }    if (!"extension".equals(dom.getName())) {        throw new IOException("Unexpected root element \"" + dom.getName() + "\", expected \"extension\"");    }    extensionDescriptor.setExportedPackages(parseStrings(dom.getChild("exportedPackages")));    extensionDescriptor.setExportedArtifacts(parseStrings(dom.getChild("exportedArtifacts")));    return extensionDescriptor;}
34e1664df80b64c9f4c3b980e81be1c3ff1139a43882ed38ce5999d12de7ff7c
parseStrings
private List<String> parseStrings(Xpp3Dom dom)
{    List<String> strings = null;    if (dom != null) {        strings = new ArrayList<>();        for (Xpp3Dom child : dom.getChildren()) {            String string = child.getValue();            if (string != null) {                string = string.trim();                if (string.length() > 0) {                    strings.add(string);                }            }        }    }    return strings;}
cbc6c6128cd44d605677907cb3c88eda35fc84ca72a91b63cca3422ba6af673d
formatMessage
private static String formatMessage(String projectId, String locationInPom, String offendingVersion, InvalidVersionSpecificationException cause)
{    return "Invalid version: " + offendingVersion + " found for: " + locationInPom + " in project: " + projectId + ". Reason: " + cause.getMessage();}
563fee6cb37a666b7fd10d372667cdf456caa825530b45b68360f5e121e68ed8
getOffendingVersion
public String getOffendingVersion()
{    return offendingVersion;}
0a1087f8855e1f8b5fdf690bb0b0f243c50758af674275cb046e0edcdf795d32
getLocationInPom
public String getLocationInPom()
{    return locationInPom;}
46cf27ae2deb8f398606a7498b34c8d1eb7f9a6c364b1edc4ae1c3fb252fd654
getParentFile
public File getParentFile()
{    return parentFile;}
a39a2e20f4e4af3de5e7dbf110be7b2db9af4d51e001ff55b8157578c9160fc7
setParentFile
public void setParentFile(File parentFile)
{    this.parentFile = parentFile;}
74532920252ab24aba3facb8f78a175de2fc4c1c8247fe2b3b2dce7bf79f6858
getArtifact
public Artifact getArtifact()
{    return artifact;}
4a81b6c870b01e2d4357e71f4c370c964d3fc7208f1aa052a4282f2d9c62a2ac
setArtifact
public void setArtifact(Artifact artifact)
{    this.artifact = artifact;}
f938998a08eadbdbb54a4592f85c356494c5fd4a09480ef41473d448461d6a49
getModel
public Model getModel()
{    return model;}
d8547cf736614bdf0ddc6f595f7894d4b00c919e9bfc9572550a50912ae7beec
getParent
public MavenProject getParent()
{    return parent;}
b28ed82b4c1a112988e24c790ae9ba60c02e1a58a48e0a7bca45e8597c2aa580
setParent
public void setParent(MavenProject parent)
{    this.parent = parent;}
9ea3848d5d0a4ec7db39554385ade26a74b5c66a0c779e6177de4c1852d76b13
hasParent
public boolean hasParent()
{    return getParent() != null;}
ce0460f83bd172eacce98e8169f6d9b1d4ec316943fcf77ee2d8f12bbe7327a0
getFile
public File getFile()
{    return file;}
5e248210883b15055dbb92bcae692722adb76b511c50cc45408180b9a2a63764
setFile
public void setFile(File file)
{    this.file = file;    this.basedir = file != null ? file.getParentFile() : null;}
59db9082ec9fcc9412f0c937684e4e0272dc81655007ffc372e8589d2a24df80
setPomFile
public void setPomFile(File file)
{    this.file = file;}
836b78713d27b2990ed04962445a6d442d190beddecc8871dd3329ba106351f2
getBasedir
public File getBasedir()
{    return basedir;}
74c5d66a4fad00a7d79600f0a9b934d3a5a4d111411ece2704ebd4ee51bab185
setDependencies
public void setDependencies(List<Dependency> dependencies)
{    getModel().setDependencies(dependencies);}
5d4ace0ef221a194a1d9585a92d0b74ee3987d6559e56dc9f7dc3a2570c07c7c
getDependencies
public List<Dependency> getDependencies()
{    return getModel().getDependencies();}
b8b90f5664a09e274c70bebb868810d58704022c126dae06e35ec78aa6da7ae4
getDependencyManagement
public DependencyManagement getDependencyManagement()
{    return getModel().getDependencyManagement();}
30823fb16e1d30c8f8962797a6265ed5a67df2e9f748918a2815db540a7d12f1
addPath
private void addPath(List<String> paths, String path)
{    if (path != null) {        path = path.trim();        if (path.length() > 0) {            File file = new File(path);            if (file.isAbsolute()) {                path = file.getAbsolutePath();            } else if (".".equals(path)) {                path = getBasedir().getAbsolutePath();            } else {                path = new File(getBasedir(), path).getAbsolutePath();            }            if (!paths.contains(path)) {                paths.add(path);            }        }    }}
cc543671428d6427f2f6e77401153a95dd5e1d9026445bb43c340533988d5f27
addCompileSourceRoot
public void addCompileSourceRoot(String path)
{    addPath(getCompileSourceRoots(), path);}
62808e0b84c3e95b614bf0dd7c8a35f9c69fd0b96b79d979db90c439f1d10aff
addTestCompileSourceRoot
public void addTestCompileSourceRoot(String path)
{    addPath(getTestCompileSourceRoots(), path);}
6f8a5f68c9d0b5a178c50f3cc98a7cf192d16454db28657b6852bd2c68db49f9
getCompileSourceRoots
public List<String> getCompileSourceRoots()
{    return compileSourceRoots;}
856522c8eb914806af6d06333e2ec4dd00c5ab2a3dd555d1b46c6a83ec2d451e
getTestCompileSourceRoots
public List<String> getTestCompileSourceRoots()
{    return testCompileSourceRoots;}
c0069090bab985a1826ce27ca71a4b32b8c0151d8e900dfa11e918783a8ccfc7
getCompileClasspathElements
public List<String> getCompileClasspathElements() throws DependencyResolutionRequiredException
{    List<String> list = new ArrayList<>(getArtifacts().size() + 1);    String d = getBuild().getOutputDirectory();    if (d != null) {        list.add(d);    }    for (Artifact a : getArtifacts()) {        if (a.getArtifactHandler().isAddedToClasspath()) {                        if (Artifact.SCOPE_COMPILE.equals(a.getScope()) || Artifact.SCOPE_PROVIDED.equals(a.getScope()) || Artifact.SCOPE_SYSTEM.equals(a.getScope())) {                addArtifactPath(a, list);            }        }    }    return list;}
87c383f807c3f89c646ed4353b6a81764ce1adfed6edc44a2e40e185e9b8f12d
getTestClasspathElements
public List<String> getTestClasspathElements() throws DependencyResolutionRequiredException
{    List<String> list = new ArrayList<>(getArtifacts().size() + 2);    String d = getBuild().getTestOutputDirectory();    if (d != null) {        list.add(d);    }    d = getBuild().getOutputDirectory();    if (d != null) {        list.add(d);    }    for (Artifact a : getArtifacts()) {        if (a.getArtifactHandler().isAddedToClasspath()) {            addArtifactPath(a, list);        }    }    return list;}
6de753a4d81e8caa5b8d3f40ca5913ff807bb23ba5be53cdf795a733c96d596b
getRuntimeClasspathElements
public List<String> getRuntimeClasspathElements() throws DependencyResolutionRequiredException
{    List<String> list = new ArrayList<>(getArtifacts().size() + 1);    String d = getBuild().getOutputDirectory();    if (d != null) {        list.add(d);    }    for (Artifact a : getArtifacts()) {        if (a.getArtifactHandler().isAddedToClasspath() &&         (Artifact.SCOPE_COMPILE.equals(a.getScope()) || Artifact.SCOPE_RUNTIME.equals(a.getScope()))) {            addArtifactPath(a, list);        }    }    return list;}
27359baae99ce41ff9d10be8d79747283b724dfd7ac129c670cdd876e13cf516
setModelVersion
public void setModelVersion(String pomVersion)
{    getModel().setModelVersion(pomVersion);}
0adac729f9e872a4d16537798e330c6c730b9c05d45f52e56b6f325276ff1492
getModelVersion
public String getModelVersion()
{    return getModel().getModelVersion();}
09e8f13a9a603d31d64bb498b77d15572483824d843d0e82a570643192f62186
getId
public String getId()
{    return getModel().getId();}
71bcb3c91e0d464929235253ed6afcc351b3e9058163242c449a951b7b882841
setGroupId
public void setGroupId(String groupId)
{    getModel().setGroupId(groupId);}
9590314d7a6edd0118345714cc714a8e73448e57e702bb4c6893b363f509d64d
getGroupId
public String getGroupId()
{    String groupId = getModel().getGroupId();    if ((groupId == null) && (getModel().getParent() != null)) {        groupId = getModel().getParent().getGroupId();    }    return groupId;}
20cbd85c6b33f77aed396f8e4100794ba5666a5469aea43d797e8b46e9761df1
setArtifactId
public void setArtifactId(String artifactId)
{    getModel().setArtifactId(artifactId);}
1e5191dc99d9314f2df50294bcd8d717af7b8f4311575d36d8d75b27121f1064
getArtifactId
public String getArtifactId()
{    return getModel().getArtifactId();}
f498f22eaf0816bf385a43365651d1b6d0455905fdd2d6be01ceefeb84e8f432
setName
public void setName(String name)
{    getModel().setName(name);}
239fbe3eb64d679cbac1161825b07d6a8436ead3c6c3d140d9caec2275827023
getName
public String getName()
{        if (getModel().getName() != null) {        return getModel().getName();    } else {        return getArtifactId();    }}
fa655d76002df94322c0d82cb5fbadecc48b0bb7bb0e58203d0a274985fccd86
setVersion
public void setVersion(String version)
{    getModel().setVersion(version);}
446b3b91c7c41085df1dc5542616b89ccd409f6a1d45e4d60d3ca00ac839ecf0
getVersion
public String getVersion()
{    String version = getModel().getVersion();    if ((version == null) && (getModel().getParent() != null)) {        version = getModel().getParent().getVersion();    }    return version;}
9a63f6cad461699089dd5d7d862cf5ef3ece77582a35e5816083a14583c6c7e1
getPackaging
public String getPackaging()
{    return getModel().getPackaging();}
26415e1eccf0b52fbbd0a77a449847cf58c068442969e7dc1010b681b39690fd
setPackaging
public void setPackaging(String packaging)
{    getModel().setPackaging(packaging);}
d3571535dd6ed84375e3c569d5df94065c4150193047c9733282d51082d318e3
setInceptionYear
public void setInceptionYear(String inceptionYear)
{    getModel().setInceptionYear(inceptionYear);}
0e55a1aad6baf401695ba77446475ecee3ab675743fd01b890f2041d9dc2207d
getInceptionYear
public String getInceptionYear()
{    return getModel().getInceptionYear();}
c3d2ee14b0a87d91276b6034d452ebbd50ed47914948b9edaea83747da585af6
setUrl
public void setUrl(String url)
{    getModel().setUrl(url);}
354afe66bbdb19ee4d620955bbb214ebf9b5aa09359dea30ffb867002b5a25bd
getUrl
public String getUrl()
{    return getModel().getUrl();}
29c4035490c549f305cc589a7a5e5028e8e54e26225981def6f336bcb5e8fc14
getPrerequisites
public Prerequisites getPrerequisites()
{    return getModel().getPrerequisites();}
3a0bef8fbaaba00bad13bca297245463bbbf252cc762044ffbc1ffc02ca9076b
setIssueManagement
public void setIssueManagement(IssueManagement issueManagement)
{    getModel().setIssueManagement(issueManagement);}
350a0b552c6a7e1f7285b118d002f27d8104ff20459ce69df44aa5549035f698
getCiManagement
public CiManagement getCiManagement()
{    return getModel().getCiManagement();}
7bc75c97619cb3e92fc72cf3cb77b1c9cec3920afb5a74558026eb53a1e98620
setCiManagement
public void setCiManagement(CiManagement ciManagement)
{    getModel().setCiManagement(ciManagement);}
b4b57aa5afe3779fdc5904036ce2eec74f8f678809209022bd2f8847ef97b8b7
getIssueManagement
public IssueManagement getIssueManagement()
{    return getModel().getIssueManagement();}
7cb41c0fb081615682d92424efd9d22f75f5020d908418cab91b577d87596555
setDistributionManagement
public void setDistributionManagement(DistributionManagement distributionManagement)
{    getModel().setDistributionManagement(distributionManagement);}
36982df3f8e917b634d2f2529fa201d352bb192c499c641b9dcb0aa8613aa88e
getDistributionManagement
public DistributionManagement getDistributionManagement()
{    return getModel().getDistributionManagement();}
1a211ebf68b221c2c3c67d58559d636c48c482bac17440249777eb28f553a9ad
setDescription
public void setDescription(String description)
{    getModel().setDescription(description);}
706203ef14181d53971fddf5ab6603fcf31442cdccb19cc5e237bca9faee9d63
getDescription
public String getDescription()
{    return getModel().getDescription();}
5379e031c0757a38d7259b60a1fdefb89acf0c008b8e12544ed26d571e4e7003
setOrganization
public void setOrganization(Organization organization)
{    getModel().setOrganization(organization);}
a7d22d6476d5bb1213c96202f95567baf7aa796e9f686b6e5467c01a26be731d
getOrganization
public Organization getOrganization()
{    return getModel().getOrganization();}
d66726b66f8839646a6f85651fdfa0b3bc6128f79f7c3fdcc27f69274145e3f8
setScm
public void setScm(Scm scm)
{    getModel().setScm(scm);}
bb2216adcda5ff8cb3258bade6f73e2a5fb2e5e34ab1d096e56edfb0f147083f
getScm
public Scm getScm()
{    return getModel().getScm();}
098641ffe6a9d10a550ea9e888d38250a86fbeb0f04f98dbb952fd74fa78a10b
setMailingLists
public void setMailingLists(List<MailingList> mailingLists)
{    getModel().setMailingLists(mailingLists);}
cbf42ce6b953f062f5118210f677b480eb45b5c678e32b6a713e8075b003cfdd
getMailingLists
public List<MailingList> getMailingLists()
{    return getModel().getMailingLists();}
6fb8452ee0e7be612007ff88a84a3a866aee2e442cfa59e16981c72aeff43e34
addMailingList
public void addMailingList(MailingList mailingList)
{    getModel().addMailingList(mailingList);}
bec81e5d376240516c33803e1780717befe4ac7b4c0f09d1042956d94d351da8
setDevelopers
public void setDevelopers(List<Developer> developers)
{    getModel().setDevelopers(developers);}
4e1dc84f19672d756b189188ca883d7cad0e715514a9886470ba395fbc9a0072
getDevelopers
public List<Developer> getDevelopers()
{    return getModel().getDevelopers();}
9810a5205a5e138a7d1a115103c413c49babe6aadd0e669f4d4c189e3073a2f2
addDeveloper
public void addDeveloper(Developer developer)
{    getModel().addDeveloper(developer);}
9f2b2fa5161d84d86f5d984bc71776d6011701bd1b3b2a691378a088308da7f0
setContributors
public void setContributors(List<Contributor> contributors)
{    getModel().setContributors(contributors);}
bcc3ae17f5da777a8a1d467997a9cd25da6109bc7e18db09662ae4f4f855f4ff
getContributors
public List<Contributor> getContributors()
{    return getModel().getContributors();}
ef2188edb31a78a78db4d40259c0099a11a6ddbf9ca5b6965c2db0bdb5fa49b1
addContributor
public void addContributor(Contributor contributor)
{    getModel().addContributor(contributor);}
cbbdb7c3bfe25fc9b989335e4c430e2b6adda1ef81138be73dda2a7b8a1c101d
setBuild
public void setBuild(Build build)
{    getModel().setBuild(build);}
9226f622bad747883c1b61ec4259cfd3a2a78d14d1db45181d0c25100a3756c9
getBuild
public Build getBuild()
{    return getModelBuild();}
9b171668111362ee5cc0f063bff249695d9ffab23b70ecc2b845e724da1dd178
getResources
public List<Resource> getResources()
{    return getBuild().getResources();}
5cac068fd709dce3a8f3392809b40c5116b56c0da13ce1ca5cc47d0b7ca89ec2
getTestResources
public List<Resource> getTestResources()
{    return getBuild().getTestResources();}
829178f5b8b6feb39d155674c090f458542b652a55e255c56c0384d7c5f1951c
addResource
public void addResource(Resource resource)
{    getBuild().addResource(resource);}
3e564c426ffffdd6d62e5db25288b6bffb431fd6129064b029c4c9ba54a98d12
addTestResource
public void addTestResource(Resource testResource)
{    getBuild().addTestResource(testResource);}
64aa3b2bc113adf1c233c2ce32a5b3242667c253159f2e12bbd9ebc7f65a0542
setLicenses
public void setLicenses(List<License> licenses)
{    getModel().setLicenses(licenses);}
1ede860a420e6ee79d9f53bc0bbf012007a720878b69ac59909a8a50219b0d86
getLicenses
public List<License> getLicenses()
{    return getModel().getLicenses();}
38a595288d6910e251a3759567b9fc70c49fcb29c6ab23293c9fd71bdefbd451
addLicense
public void addLicense(License license)
{    getModel().addLicense(license);}
7633e3e6e16501175a811d342d3080a50803821687b0bdeede4ec6591c654eff
setArtifacts
public void setArtifacts(Set<Artifact> artifacts)
{    this.artifacts = artifacts;        artifactMap = null;}
7fbcab6f8caea634ee263da5b98d32d0edbb7c9976f623f712b9aa9b45246d30
getArtifacts
public Set<Artifact> getArtifacts()
{    if (artifacts == null) {        if (artifactFilter == null || resolvedArtifacts == null) {            artifacts = new LinkedHashSet<>();        } else {            artifacts = new LinkedHashSet<>(resolvedArtifacts.size() * 2);            for (Artifact artifact : resolvedArtifacts) {                if (artifactFilter.include(artifact)) {                    artifacts.add(artifact);                }            }        }    }    return artifacts;}
92aff013ac1e5c8033bb1761799d3b85f9a24406729c3ec77d55d1c7477883b8
getArtifactMap
public Map<String, Artifact> getArtifactMap()
{    if (artifactMap == null) {        artifactMap = ArtifactUtils.artifactMapByVersionlessId(getArtifacts());    }    return artifactMap;}
a1e0a60fdbd5f48cbd34fb8545b9beaa1a842c00d433a8a00ac6e7a764bb3bd2
setPluginArtifacts
public void setPluginArtifacts(Set<Artifact> pluginArtifacts)
{    this.pluginArtifacts = pluginArtifacts;    this.pluginArtifactMap = null;}
95eefc618a8a857f80180cc450730be217af3728d2fbd1827227663c232a32a0
getPluginArtifacts
public Set<Artifact> getPluginArtifacts()
{    return pluginArtifacts;}
1043ed1e3c4c7d0534d4628cc2f5ba5f18bb4d32e4e66314c4be42ab717e00e2
getPluginArtifactMap
public Map<String, Artifact> getPluginArtifactMap()
{    if (pluginArtifactMap == null) {        pluginArtifactMap = ArtifactUtils.artifactMapByVersionlessId(getPluginArtifacts());    }    return pluginArtifactMap;}
15f2ad4d5146525fc0645d7f76b78415edd50b63451fda5b5e55ab6e81f5a21b
setParentArtifact
public void setParentArtifact(Artifact parentArtifact)
{    this.parentArtifact = parentArtifact;}
908e81cb088564acb4a29f9f3b156a3ddcecadd1b2c61add015bc2415feb99a3
getParentArtifact
public Artifact getParentArtifact()
{    return parentArtifact;}
9799d270764c3c773457f0e9a49512ea8eca4b7701d547c740f368ac7a897c42
getRepositories
public List<Repository> getRepositories()
{    return getModel().getRepositories();}
c549051537ae1d976944746fd5a64473ccd9288accacb74a9262667abdddba48
getBuildPlugins
public List<Plugin> getBuildPlugins()
{    if (getModel().getBuild() == null) {        return Collections.emptyList();    }    return Collections.unmodifiableList(getModel().getBuild().getPlugins());}
586a76ce41a88e5b12ca0ad3adb07cca9555efa272c7de8e1d56839239fdf543
getModules
public List<String> getModules()
{    return getModel().getModules();}
4f5a32f2ee7f566bf8f2c81c869d7e5f8622d17bc3940b3ec25409175839264a
getPluginManagement
public PluginManagement getPluginManagement()
{    PluginManagement pluginMgmt = null;    Build build = getModel().getBuild();    if (build != null) {        pluginMgmt = build.getPluginManagement();    }    return pluginMgmt;}
f04030b0034a04be14c7708729f819df2b5ddbc45cc2945b16df643055c3824d
getModelBuild
private Build getModelBuild()
{    Build build = getModel().getBuild();    if (build == null) {        build = new Build();        getModel().setBuild(build);    }    return build;}
54d32e88f512be9ddd583efc94c6926bcfc995662884e1e7d59cb8a0bf387745
setRemoteArtifactRepositories
public void setRemoteArtifactRepositories(List<ArtifactRepository> remoteArtifactRepositories)
{    this.remoteArtifactRepositories = remoteArtifactRepositories;    this.remoteProjectRepositories = RepositoryUtils.toRepos(getRemoteArtifactRepositories());}
68184c7cd72900728cb8492285a86b2c4e67dfa333b7b6ae01f5eafd85cea916
getRemoteArtifactRepositories
public List<ArtifactRepository> getRemoteArtifactRepositories()
{    if (remoteArtifactRepositories == null) {        remoteArtifactRepositories = new ArrayList<>();    }    return remoteArtifactRepositories;}
8ff016150e6aeab96ad28ddc7fb28543e60736112203c6d842e78a95cb989936
setPluginArtifactRepositories
public void setPluginArtifactRepositories(List<ArtifactRepository> pluginArtifactRepositories)
{    this.pluginArtifactRepositories = pluginArtifactRepositories;    this.remotePluginRepositories = RepositoryUtils.toRepos(getPluginArtifactRepositories());}
4bbff9c28c6ee421876441e9b41e3c97a01a0508845cc7842befb31d0a30f8e8
getPluginArtifactRepositories
public List<ArtifactRepository> getPluginArtifactRepositories()
{    if (pluginArtifactRepositories == null) {        pluginArtifactRepositories = new ArrayList<>();    }    return pluginArtifactRepositories;}
8f285eac7bf2e806e156f2ed2ae6394a31b2f8291c4120305498a2148e218bf5
getDistributionManagementArtifactRepository
public ArtifactRepository getDistributionManagementArtifactRepository()
{    return getArtifact().isSnapshot() && (getSnapshotArtifactRepository() != null) ? getSnapshotArtifactRepository() : getReleaseArtifactRepository();}
1128f5807ca9237d1d053ebb71cd80f341ec7a7c222b4cc07be4f05552d21de7
getPluginRepositories
public List<Repository> getPluginRepositories()
{    return getModel().getPluginRepositories();}
1b01fc7aa5abb97e5c6eacabefd3faaa2424cef7be4fbb1433852451ec87ba01
getRemoteProjectRepositories
public List<RemoteRepository> getRemoteProjectRepositories()
{    return remoteProjectRepositories;}
0808a7d739bbe3bc32e27579cc32359323d1732079c0952dfa5cfee375014ff6
getRemotePluginRepositories
public List<RemoteRepository> getRemotePluginRepositories()
{    return remotePluginRepositories;}
65103e24417ff186ae0f70fc41b0bb1da2f84e408a93109e734eb93131d500b7
setActiveProfiles
public void setActiveProfiles(List<Profile> activeProfiles)
{    this.activeProfiles = activeProfiles;}
1aea36cefa606fc4fc88d3d2c313e87927892cd12ab460dddae7fd6917e14659
getActiveProfiles
public List<Profile> getActiveProfiles()
{    return activeProfiles;}
8a3efccf9993d4428216893f4ea8edba84d293f39cce0efcbeb43df78ecf22ba
setInjectedProfileIds
public void setInjectedProfileIds(String source, List<String> injectedProfileIds)
{    if (injectedProfileIds != null) {        this.injectedProfileIds.put(source, new ArrayList<>(injectedProfileIds));    } else {        this.injectedProfileIds.remove(source);    }}
93b29699080b46f48e61d068fa29fdf74ad9af9bb271edd60476293c49f3864d
getInjectedProfileIds
public Map<String, List<String>> getInjectedProfileIds()
{    return this.injectedProfileIds;}
5648a070ed63da2bd3ba44c16ce208c02d2153a315145870c07c9ae5676dcadd
addAttachedArtifact
public void addAttachedArtifact(Artifact artifact) throws DuplicateArtifactAttachmentException
{    getAttachedArtifacts().add(artifact);}
0cc1c3b9526b02b3db353c31345a2d9bb55018a4c4e55c58e3b080d17ff4ba4d
getAttachedArtifacts
public List<Artifact> getAttachedArtifacts()
{    if (attachedArtifacts == null) {        attachedArtifacts = new ArrayList<>();    }    return attachedArtifacts;}
b23e20e27d5a2a1542de3236a8ec6a612968f4cb0d119f06b68b2307b1c3cff4
getGoalConfiguration
public Xpp3Dom getGoalConfiguration(String pluginGroupId, String pluginArtifactId, String executionId, String goalId)
{    Xpp3Dom dom = null;    if (getBuildPlugins() != null) {        for (Plugin plugin : getBuildPlugins()) {            if (pluginGroupId.equals(plugin.getGroupId()) && pluginArtifactId.equals(plugin.getArtifactId())) {                dom = (Xpp3Dom) plugin.getConfiguration();                if (executionId != null) {                    PluginExecution execution = plugin.getExecutionsAsMap().get(executionId);                    if (execution != null) {                                                dom = (Xpp3Dom) execution.getConfiguration();                    }                }                break;            }        }    }    if (dom != null) {                dom = new Xpp3Dom(dom);    }    return dom;}
3bace423649f7d1fd99f7ab30b1b2e8c53ad892159324a974d9b637542d39aa0
getExecutionProject
public MavenProject getExecutionProject()
{    return (executionProject == null ? this : executionProject);}
fd6679eff161585d3ef0b5a2ef7a0c2091d03d40d8af46bb98f4184be916abd1
setExecutionProject
public void setExecutionProject(MavenProject executionProject)
{    this.executionProject = executionProject;}
30ea269a7607b034e3be8b00081fedc8c8d62f476c6ab9890b5ce3d3359895c5
getCollectedProjects
public List<MavenProject> getCollectedProjects()
{    return collectedProjects;}
f1de3d2939543d36904adf06f7f1d035901d5ec5f63d2008026dfa94ab7286a4
setCollectedProjects
public void setCollectedProjects(List<MavenProject> collectedProjects)
{    this.collectedProjects = collectedProjects;}
357dbe7662f0835f491fcfba60cd1efba078bccd90678ee45093c9baec293668
getDependencyArtifacts
public Set<Artifact> getDependencyArtifacts()
{    return dependencyArtifacts;}
e2847a6b9c0797c8864c624e1345fb9570fea0cbac79433354085fa9cea56682
setDependencyArtifacts
public void setDependencyArtifacts(Set<Artifact> dependencyArtifacts)
{    this.dependencyArtifacts = dependencyArtifacts;}
e626c799268939407e00fec9ae5d22b730813e8d1ed540e87bbd6f948dad434a
setReleaseArtifactRepository
public void setReleaseArtifactRepository(ArtifactRepository releaseArtifactRepository)
{    this.releaseArtifactRepository = releaseArtifactRepository;}
d182645a2687ea7667ab98f654a9dbee44f27889d0beb5aa4f43e2be53913f5b
setSnapshotArtifactRepository
public void setSnapshotArtifactRepository(ArtifactRepository snapshotArtifactRepository)
{    this.snapshotArtifactRepository = snapshotArtifactRepository;}
2f7f8d92189c09d37c01a5c1b57cf1766e5bb36b109f7a9f101b6baf78ef89df
setOriginalModel
public void setOriginalModel(Model originalModel)
{    this.originalModel = originalModel;}
11629b778b14cf92b4ecc55023c8b64dd2dd35e4203bbf580ada90a2f80b3680
getOriginalModel
public Model getOriginalModel()
{    return originalModel;}
2ab7677ed0882139a6251d4500673a856f4fe099def2b2d1786fda222d459a49
setManagedVersionMap
public void setManagedVersionMap(Map<String, Artifact> map)
{    managedVersionMap = map;}
3ef8060f559ffe73bf6a8b77c7836dc91dcdd4f5c1e05318beef9008ed587b49
getManagedVersionMap
public Map<String, Artifact> getManagedVersionMap()
{    return managedVersionMap;}
74e378df448c6c3cd090d6daf881cfac8957dd555869ea4c13a46bdc6cdcf9a6
equals
public boolean equals(Object other)
{    if (other == this) {        return true;    } else if (!(other instanceof MavenProject)) {        return false;    }    MavenProject that = (MavenProject) other;    return Objects.equals(getArtifactId(), that.getArtifactId()) && Objects.equals(getGroupId(), that.getGroupId()) && Objects.equals(getVersion(), that.getVersion());}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    int hash = 17;    hash = 31 * hash + getGroupId().hashCode();    hash = 31 * hash + getArtifactId().hashCode();    hash = 31 * hash + getVersion().hashCode();    return hash;}
b1e0216057892ebdcdfa2dcf65f2bcf09cfcc6e17232aeda630fa4a75b373ac5
getBuildExtensions
public List<Extension> getBuildExtensions()
{    Build build = getBuild();    if ((build == null) || (build.getExtensions() == null)) {        return Collections.emptyList();    } else {        return Collections.unmodifiableList(build.getExtensions());    }}
24b59b7c66c76759df673f8ca3c779269f8c4b773418f7ed5b04e530b4c0d588
addProjectReference
public void addProjectReference(MavenProject project)
{    projectReferences.put(getProjectReferenceId(project.getGroupId(), project.getArtifactId(), project.getVersion()), project);}
b0e3682446b0d2e414e608eea23cc6403c3dd27227986d60e2ff2d143cd3c820
getProperties
public Properties getProperties()
{    return getModel().getProperties();}
9be47f1191d8d5ef3d25b3201e4d123566660b658c80dfacd4c3a5e57f90e084
getFilters
public List<String> getFilters()
{    return getBuild().getFilters();}
7f5ff319219d436f5b3ad7edaaf0ad3b630aa1a1f35ad4f133a0f06361c31601
getProjectReferences
public Map<String, MavenProject> getProjectReferences()
{    return projectReferences;}
9cd053de166ef8a1589a7bf22f223172d71fc6dd2ce681bd3a93efbc0d978004
isExecutionRoot
public boolean isExecutionRoot()
{    return executionRoot;}
e52b02f8e9e1d7a2496e0acce44f6998ae07c2e877991dbdd44bd5765652b778
setExecutionRoot
public void setExecutionRoot(boolean executionRoot)
{    this.executionRoot = executionRoot;}
7857129ca084e70aa18f3f2610c0aab12bdbc278cfe0dce7c58716f6c650e337
getDefaultGoal
public String getDefaultGoal()
{    return getBuild() != null ? getBuild().getDefaultGoal() : null;}
aa482eec7b7d2dd444706f32a58665d8c59c61695e361ef7e5ccbd2ba9e113d9
getPlugin
public Plugin getPlugin(String pluginKey)
{    return getBuild().getPluginsAsMap().get(pluginKey);}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    StringBuilder sb = new StringBuilder(128);    sb.append("MavenProject: ");    sb.append(getGroupId());    sb.append(':');    sb.append(getArtifactId());    sb.append(':');    sb.append(getVersion());    sb.append(" @ ");    try {        sb.append(getFile().getPath());    } catch (NullPointerException e) {        }    return sb.toString();}
bdff92e7f029966050fd0c09e9036a99ad81b10e7bf213c70135381983d668d7
clone
public MavenProject clone()
{    MavenProject clone;    try {        clone = (MavenProject) super.clone();    } catch (CloneNotSupportedException e) {        throw new UnsupportedOperationException(e);    }    clone.deepCopy(this);    return clone;}
bed66aab2d230f0da58021af59b552451fbdb0495ff7e0cfeed543eadd9b29bc
setModel
public void setModel(Model model)
{    this.model = model;}
ad0675f845f4b9735f962f85d8ca388bb5dbfcaaab0a7f6448055ef82277d420
setAttachedArtifacts
protected void setAttachedArtifacts(List<Artifact> attachedArtifacts)
{    this.attachedArtifacts = attachedArtifacts;}
7bfbd0ffcc68aa20fbf8b0077a280c03335c34baa5d3e555b6d547f48c35afa3
setCompileSourceRoots
protected void setCompileSourceRoots(List<String> compileSourceRoots)
{    this.compileSourceRoots = compileSourceRoots;}
5b360658dad070c7614f0f7c1d445409f4a042cc12c470ce9a792b4746f75a50
setTestCompileSourceRoots
protected void setTestCompileSourceRoots(List<String> testCompileSourceRoots)
{    this.testCompileSourceRoots = testCompileSourceRoots;}
c7ae4f73c547d59fb31dfc399cf9cae7032057801ff748846c47b9e50b1227df
getReleaseArtifactRepository
protected ArtifactRepository getReleaseArtifactRepository()
{    return releaseArtifactRepository;}
6f2ca2dd5f9968489e79a1ccbbc8feff09dad374ebf92a2f3ed737ee6f21beba
getSnapshotArtifactRepository
protected ArtifactRepository getSnapshotArtifactRepository()
{    return snapshotArtifactRepository;}
496e8d8183f2eb6c42abfb68ee1ae185a8e72e62f9c71ef5469a7d4eb76e9a39
deepCopy
private void deepCopy(MavenProject project)
{            file = project.file;    basedir = project.basedir;        if (project.getDependencyArtifacts() != null) {        setDependencyArtifacts(Collections.unmodifiableSet(project.getDependencyArtifacts()));    }    if (project.getArtifacts() != null) {        setArtifacts(Collections.unmodifiableSet(project.getArtifacts()));    }    if (project.getParentFile() != null) {        parentFile = new File(project.getParentFile().getAbsolutePath());    }    if (project.getPluginArtifacts() != null) {        setPluginArtifacts(Collections.unmodifiableSet(project.getPluginArtifacts()));    }    if (project.getReportArtifacts() != null) {        setReportArtifacts(Collections.unmodifiableSet(project.getReportArtifacts()));    }    if (project.getExtensionArtifacts() != null) {        setExtensionArtifacts(Collections.unmodifiableSet(project.getExtensionArtifacts()));    }    setParentArtifact((project.getParentArtifact()));    if (project.getRemoteArtifactRepositories() != null) {        setRemoteArtifactRepositories(Collections.unmodifiableList(project.getRemoteArtifactRepositories()));    }    if (project.getPluginArtifactRepositories() != null) {        setPluginArtifactRepositories(Collections.unmodifiableList(project.getPluginArtifactRepositories()));    }    if (project.getActiveProfiles() != null) {        setActiveProfiles((Collections.unmodifiableList(project.getActiveProfiles())));    }    if (project.getAttachedArtifacts() != null) {                setAttachedArtifacts(new ArrayList<>(project.getAttachedArtifacts()));    }    if (project.getCompileSourceRoots() != null) {                setCompileSourceRoots((new ArrayList<>(project.getCompileSourceRoots())));    }    if (project.getTestCompileSourceRoots() != null) {        setTestCompileSourceRoots((new ArrayList<>(project.getTestCompileSourceRoots())));    }    if (project.getScriptSourceRoots() != null) {        setScriptSourceRoots((new ArrayList<>(project.getScriptSourceRoots())));    }    if (project.getModel() != null) {        setModel(project.getModel().clone());    }    if (project.getOriginalModel() != null) {        setOriginalModel(project.getOriginalModel());    }    setExecutionRoot(project.isExecutionRoot());    if (project.getArtifact() != null) {        setArtifact(ArtifactUtils.copyArtifact(project.getArtifact()));    }    if (project.getManagedVersionMap() != null) {        setManagedVersionMap(project.getManagedVersionMap());    }    lifecyclePhases.addAll(project.lifecyclePhases);}
53baf8a19427785f79eb419379795c73778d0ebcd85ba03e454420195202f868
addArtifactPath
private void addArtifactPath(Artifact artifact, List<String> classpath)
{    File file = artifact.getFile();    if (file != null) {        classpath.add(file.getPath());    }}
59b42965c50293ee4f70c74dc3c98d0380872c1708fba2534bd436f773e22a6a
getProjectReferenceId
private static String getProjectReferenceId(String groupId, String artifactId, String version)
{    StringBuilder buffer = new StringBuilder(128);    buffer.append(groupId).append(':').append(artifactId).append(':').append(version);    return buffer.toString();}
46988940eee7cb7b26f4443adda6d8553a9284fa8322ada6e727b197799f4187
setContextValue
public void setContextValue(String key, Object value)
{    if (context == null) {        context = new HashMap<>();    }    if (value != null) {        context.put(key, value);    } else {        context.remove(key);    }}
583ec3c01579a7ef425e45b45394496abeb1daab6bde2ee5367ad626044e0ef7
getContextValue
public Object getContextValue(String key)
{    if (context == null) {        return null;    }    return context.get(key);}
3397f08fcc9666661f1a607685d4d58bbf7f760cceff7f81b6dd86cb12b9f30e
setClassRealm
public void setClassRealm(ClassRealm classRealm)
{    this.classRealm = classRealm;}
41b95a701d5ea67ed5412b37319f1271a238f18a1d7643168356b36e4e17b887
getClassRealm
public ClassRealm getClassRealm()
{    return classRealm;}
d9ee691bdf5c3f89bfe128a2edfaaa5bb3357ee6e9ecaa7a1acddaccea6cab20
setExtensionDependencyFilter
public void setExtensionDependencyFilter(DependencyFilter extensionDependencyFilter)
{    this.extensionDependencyFilter = extensionDependencyFilter;}
edafc3370b97a30ec937f09b6dc7f03357d413ef83c0c9b9441e590674c21987
getExtensionDependencyFilter
public DependencyFilter getExtensionDependencyFilter()
{    return extensionDependencyFilter;}
62f493b405b60fd099b284d30871a23aed4f9e71b57ce42715c44ca1dd790d37
setResolvedArtifacts
public void setResolvedArtifacts(Set<Artifact> artifacts)
{    this.resolvedArtifacts = (artifacts != null) ? artifacts : Collections.<Artifact>emptySet();    this.artifacts = null;    this.artifactMap = null;}
0e8128de18e8d94a637b4c2b90051c7112076113550316b3333ffd073a96ccb1
setArtifactFilter
public void setArtifactFilter(ArtifactFilter artifactFilter)
{    this.artifactFilter = artifactFilter;    this.artifacts = null;    this.artifactMap = null;}
99afe68bc2af186fffce8e352d11244fef9b3b9969f59daacce5bf8a3819a8f1
hasLifecyclePhase
public boolean hasLifecyclePhase(String phase)
{    return lifecyclePhases.contains(phase);}
e92cd00732b0517591e8c6d478a78bcb431c51ac4eff950ebb9d07abd3f333a9
addLifecyclePhase
public void addLifecyclePhase(String lifecyclePhase)
{    lifecyclePhases.add(lifecyclePhase);}
8999242ad6276e0e46444966dd5d9741d707ac2de44af0b7a5929534596fe2c9
getModulePathAdjustment
public String getModulePathAdjustment(MavenProject moduleProject) throws IOException
{            String module = moduleProject.getArtifactId();    File moduleFile = moduleProject.getFile();    if (moduleFile != null) {        File moduleDir = moduleFile.getCanonicalFile().getParentFile();        module = moduleDir.getName();    }    if (moduleAdjustments == null) {        moduleAdjustments = new HashMap<>();        List<String> modules = getModules();        if (modules != null) {            for (String modulePath : modules) {                String moduleName = modulePath;                if (moduleName.endsWith("/") || moduleName.endsWith("\\")) {                    moduleName = moduleName.substring(0, moduleName.length() - 1);                }                int lastSlash = moduleName.lastIndexOf('/');                if (lastSlash < 0) {                    lastSlash = moduleName.lastIndexOf('\\');                }                String adjustment = null;                if (lastSlash > -1) {                    moduleName = moduleName.substring(lastSlash + 1);                    adjustment = modulePath.substring(0, lastSlash);                }                moduleAdjustments.put(moduleName, adjustment);            }        }    }    return moduleAdjustments.get(module);}
be56de109c67d9d740bea76afcd32b222131724bf5ec8ce02a3ff150e6358fa1
createArtifacts
public Set<Artifact> createArtifacts(ArtifactFactory artifactFactory, String inheritedScope, ArtifactFilter filter) throws InvalidDependencyVersionException
{    return MavenMetadataSource.createArtifacts(artifactFactory, getDependencies(), inheritedScope, filter, this);}
4e001cb71416d87e4c13c94d901392b66d9c39a5373347a58bef3bd8987bbb4f
setScriptSourceRoots
protected void setScriptSourceRoots(List<String> scriptSourceRoots)
{    this.scriptSourceRoots = scriptSourceRoots;}
beb578adcb939ec3b9c49984054eb546a17c55d901677d8ddb08342a78328acc
addScriptSourceRoot
public void addScriptSourceRoot(String path)
{    if (path != null) {        path = path.trim();        if (path.length() != 0) {            if (!getScriptSourceRoots().contains(path)) {                getScriptSourceRoots().add(path);            }        }    }}
d64b1d1af97fbc10efc5abefb46d943b967712f2be37c829b0c4090aafc2f902
getScriptSourceRoots
public List<String> getScriptSourceRoots()
{    return scriptSourceRoots;}
07561fafdf5691982a5abef162da30baf00ccb8be4106642f3e2ea8ae589f764
getCompileArtifacts
public List<Artifact> getCompileArtifacts()
{    List<Artifact> list = new ArrayList<>(getArtifacts().size());    for (Artifact a : getArtifacts()) {                if (a.getArtifactHandler().isAddedToClasspath()) {                        if (Artifact.SCOPE_COMPILE.equals(a.getScope()) || Artifact.SCOPE_PROVIDED.equals(a.getScope()) || Artifact.SCOPE_SYSTEM.equals(a.getScope())) {                list.add(a);            }        }    }    return list;}
5898e1faaf7c0a23b2764be4037dd0af63c7c3f81473398733864fa86a561bb9
getCompileDependencies
public List<Dependency> getCompileDependencies()
{    Set<Artifact> artifacts = getArtifacts();    if ((artifacts == null) || artifacts.isEmpty()) {        return Collections.emptyList();    }    List<Dependency> list = new ArrayList<>(artifacts.size());    for (Artifact a : getArtifacts()) {                if (Artifact.SCOPE_COMPILE.equals(a.getScope()) || Artifact.SCOPE_PROVIDED.equals(a.getScope()) || Artifact.SCOPE_SYSTEM.equals(a.getScope())) {            Dependency dependency = new Dependency();            dependency.setArtifactId(a.getArtifactId());            dependency.setGroupId(a.getGroupId());            dependency.setVersion(a.getVersion());            dependency.setScope(a.getScope());            dependency.setType(a.getType());            dependency.setClassifier(a.getClassifier());            list.add(dependency);        }    }    return Collections.unmodifiableList(list);}
eaaa3e969d09a6b5bf7fb4069a1cb75aa8a3a5cef5ac5423f9226fb0d8b9c5fd
getTestArtifacts
public List<Artifact> getTestArtifacts()
{    List<Artifact> list = new ArrayList<>(getArtifacts().size());    for (Artifact a : getArtifacts()) {                if (a.getArtifactHandler().isAddedToClasspath()) {            list.add(a);        }    }    return list;}
954bfa488d6aa716344cfd28ced885cd25a3ce2bf033b3d804431b63da4ccf8e
getTestDependencies
public List<Dependency> getTestDependencies()
{    Set<Artifact> artifacts = getArtifacts();    if ((artifacts == null) || artifacts.isEmpty()) {        return Collections.emptyList();    }    List<Dependency> list = new ArrayList<>(artifacts.size());    for (Artifact a : getArtifacts()) {        Dependency dependency = new Dependency();        dependency.setArtifactId(a.getArtifactId());        dependency.setGroupId(a.getGroupId());        dependency.setVersion(a.getVersion());        dependency.setScope(a.getScope());        dependency.setType(a.getType());        dependency.setClassifier(a.getClassifier());        list.add(dependency);    }    return Collections.unmodifiableList(list);}
8c0a43116c2df6e9dfd2a9b862b6f4786bdf381d1c49a01ac5711d1174a5a047
getRuntimeDependencies
public List<Dependency> getRuntimeDependencies()
{    Set<Artifact> artifacts = getArtifacts();    if ((artifacts == null) || artifacts.isEmpty()) {        return Collections.emptyList();    }    List<Dependency> list = new ArrayList<>(artifacts.size());    for (Artifact a : getArtifacts()) {                if (Artifact.SCOPE_COMPILE.equals(a.getScope()) || Artifact.SCOPE_RUNTIME.equals(a.getScope())) {            Dependency dependency = new Dependency();            dependency.setArtifactId(a.getArtifactId());            dependency.setGroupId(a.getGroupId());            dependency.setVersion(a.getVersion());            dependency.setScope(a.getScope());            dependency.setType(a.getType());            dependency.setClassifier(a.getClassifier());            list.add(dependency);        }    }    return Collections.unmodifiableList(list);}
e440dadcab695d9fedf7298dcb62f4467c27ffe007e9c51de12bed19975968a7
getRuntimeArtifacts
public List<Artifact> getRuntimeArtifacts()
{    List<Artifact> list = new ArrayList<>(getArtifacts().size());    for (Artifact a : getArtifacts()) {                if (a.getArtifactHandler().isAddedToClasspath() &&         (Artifact.SCOPE_COMPILE.equals(a.getScope()) || Artifact.SCOPE_RUNTIME.equals(a.getScope()))) {            list.add(a);        }    }    return list;}
632abbf45ba369c7d6ad7a5403ba1715f13a0ab374ffbd0eb9b1071daeb2e37d
getSystemClasspathElements
public List<String> getSystemClasspathElements() throws DependencyResolutionRequiredException
{    List<String> list = new ArrayList<>(getArtifacts().size());    String d = getBuild().getOutputDirectory();    if (d != null) {        list.add(d);    }    for (Artifact a : getArtifacts()) {        if (a.getArtifactHandler().isAddedToClasspath()) {                        if (Artifact.SCOPE_SYSTEM.equals(a.getScope())) {                addArtifactPath(a, list);            }        }    }    return list;}
afd4c17702a3f788cfcfcb580600915824fe2702ab25730b17afb1c57db08701
getSystemArtifacts
public List<Artifact> getSystemArtifacts()
{    List<Artifact> list = new ArrayList<>(getArtifacts().size());    for (Artifact a : getArtifacts()) {                if (a.getArtifactHandler().isAddedToClasspath()) {                        if (Artifact.SCOPE_SYSTEM.equals(a.getScope())) {                list.add(a);            }        }    }    return list;}
810d37d2e5b2342a4705151eec237514671d37052e4e2cf3b9b18b75c79380da
getSystemDependencies
public List<Dependency> getSystemDependencies()
{    Set<Artifact> artifacts = getArtifacts();    if ((artifacts == null) || artifacts.isEmpty()) {        return Collections.emptyList();    }    List<Dependency> list = new ArrayList<>(artifacts.size());    for (Artifact a : getArtifacts()) {                if (Artifact.SCOPE_SYSTEM.equals(a.getScope())) {            Dependency dependency = new Dependency();            dependency.setArtifactId(a.getArtifactId());            dependency.setGroupId(a.getGroupId());            dependency.setVersion(a.getVersion());            dependency.setScope(a.getScope());            dependency.setType(a.getType());            dependency.setClassifier(a.getClassifier());            list.add(dependency);        }    }    return Collections.unmodifiableList(list);}
fccb6ba7cf40a12f86619165d2d1e0f5e2da962138a9bbd9be77f0411a079554
setReporting
public void setReporting(Reporting reporting)
{    getModel().setReporting(reporting);}
2c529a7fb52fdfba9920e2ce3dab63990d3de4ae7873836c99103304ef48a5a6
getReporting
public Reporting getReporting()
{    return getModel().getReporting();}
26470b4cf8d998c52661adcecdc1b4bd6c5f2a2aa2a2ea5489e0cd833adb658f
setReportArtifacts
public void setReportArtifacts(Set<Artifact> reportArtifacts)
{    this.reportArtifacts = reportArtifacts;    reportArtifactMap = null;}
c306c89d94daab954d4f25b45893866dfb0c3a2c5c748dd8f1bdcc17552af610
getReportArtifacts
public Set<Artifact> getReportArtifacts()
{    return reportArtifacts;}
09ab0e01659d6e78d366840cfd307208365d0d7f3d5af7cee9b2f3bc8b852457
getReportArtifactMap
public Map<String, Artifact> getReportArtifactMap()
{    if (reportArtifactMap == null) {        reportArtifactMap = ArtifactUtils.artifactMapByVersionlessId(getReportArtifacts());    }    return reportArtifactMap;}
297d41673327eed3c5d2dc96d004796c112bc8e98b4493281ad6cdc83e706dfb
setExtensionArtifacts
public void setExtensionArtifacts(Set<Artifact> extensionArtifacts)
{    this.extensionArtifacts = extensionArtifacts;    extensionArtifactMap = null;}
020daafd49bc8b3db5595cd98bfb64645ccba7bc91f33e635adeabf14fff2036
getExtensionArtifacts
public Set<Artifact> getExtensionArtifacts()
{    return extensionArtifacts;}
1cc9a61aed40fbf2b89240d7d653ec2637ebde529767b6a72308b0749fe6c797
getExtensionArtifactMap
public Map<String, Artifact> getExtensionArtifactMap()
{    if (extensionArtifactMap == null) {        extensionArtifactMap = ArtifactUtils.artifactMapByVersionlessId(getExtensionArtifacts());    }    return extensionArtifactMap;}
3e1abfe901aafee831112e47ba04f78ae48abe6b372d3ba4d37523b90d678a1d
getReportPlugins
public List<ReportPlugin> getReportPlugins()
{    if (getModel().getReporting() == null) {        return Collections.emptyList();    }    return Collections.unmodifiableList(getModel().getReporting().getPlugins());}
eab87f25d7d20bf0dca11b5e34ead6825336e5b883c7de3ee92294a9041342cf
getReportConfiguration
public Xpp3Dom getReportConfiguration(String pluginGroupId, String pluginArtifactId, String reportSetId)
{    Xpp3Dom dom = null;    if (getReportPlugins() != null) {        for (ReportPlugin plugin : getReportPlugins()) {            if (pluginGroupId.equals(plugin.getGroupId()) && pluginArtifactId.equals(plugin.getArtifactId())) {                dom = (Xpp3Dom) plugin.getConfiguration();                if (reportSetId != null) {                    ReportSet reportSet = plugin.getReportSetsAsMap().get(reportSetId);                    if (reportSet != null) {                        Xpp3Dom executionConfiguration = (Xpp3Dom) reportSet.getConfiguration();                        if (executionConfiguration != null) {                            Xpp3Dom newDom = new Xpp3Dom(executionConfiguration);                            dom = Xpp3Dom.mergeXpp3Dom(newDom, dom);                        }                    }                }                break;            }        }    }    if (dom != null) {                dom = new Xpp3Dom(dom);    }    return dom;}
fa9577be3d474d0e6298ea17968eb608790994fc9d4dbc475efcd0ae66437535
attachArtifact
public void attachArtifact(String type, String classifier, File file)
{}
b5111597d5e4460c6d92a7e204b0077320bc60e4d23223b5c79f4cd7d7ad0ef7
writeModel
public void writeModel(Writer writer) throws IOException
{    MavenXpp3Writer pomWriter = new MavenXpp3Writer();    pomWriter.write(writer, getModel());}
665fd43ae6dffa11b879427ef78f13502734c1817bc899ad7bc0373319f13b69
writeOriginalModel
public void writeOriginalModel(Writer writer) throws IOException
{    MavenXpp3Writer pomWriter = new MavenXpp3Writer();    pomWriter.write(writer, getOriginalModel());}
24c18679a62343bf1bee69a173716972dc6b1334aa38f5fa71e602fea0284dbd
replaceWithActiveArtifact
public Artifact replaceWithActiveArtifact(Artifact pluginArtifact)
{    return pluginArtifact;}
c1778899792b339102598acfd060fdd0db8e60f8aa016d2d01bb6a92a2e5c656
getProjectBuildingRequest
public ProjectBuildingRequest getProjectBuildingRequest()
{    return projectBuilderConfiguration;}
847be80b862ac1150536058dc9f6d03955b87fa286b3d8c6ce25e003fcf2fba3
setProjectBuildingRequest
public void setProjectBuildingRequest(ProjectBuildingRequest projectBuildingRequest)
{    this.projectBuilderConfiguration = projectBuildingRequest;}
9e41472ee24bfb1867a8e9e5c5bd1fe3eb2642f5fedb094f54f96a5b46b086ba
getPomFile
public File getPomFile()
{    return pomFile;}
625f553e9160dea82c5da0a95a6e41405a361d5c4d2d593b83e5fc3f22cafba8
getPomLocation
public String getPomLocation()
{    if (getPomFile() != null) {        return getPomFile().getAbsolutePath();    } else {        return "null";    }}
ad67d5b9fa7e17a19cbfed8dce418c9bb6a0b5a721f5e5755b5b3c36c14801d9
getProjectId
public String getProjectId()
{    return projectId;}
fd86c863199acd6d5199ed52ecad6b0f67b647a3044afe9d82d39d56023f272e
getResults
public List<ProjectBuildingResult> getResults()
{    return results;}
7c773e12ddbc0017b2246fe5839abd48db52f201fd2b10566d5261c55e0b54b5
createMessage
private static String createMessage(String message, String projectId, File pomFile)
{    StringBuilder buffer = new StringBuilder(256);    buffer.append(message);    buffer.append(" for project ").append(projectId);    if (pomFile != null) {        buffer.append(" at ").append(pomFile.getAbsolutePath());    }    return buffer.toString();}
d1debe16f3476ab3054a436c6fad50dc85d1a41e73c0604f94315485db386071
createMessage
private static String createMessage(List<ProjectBuildingResult> results)
{    StringWriter buffer = new StringWriter(1024);    PrintWriter writer = new PrintWriter(buffer);    writer.println("Some problems were encountered while processing the POMs:");    try {        for (ProjectBuildingResult result : results) {            for (ModelProblem problem : result.getProblems()) {                writer.print("[");                writer.print(problem.getSeverity());                writer.print("] ");                writer.print(problem.getMessage());                writer.print(" @ ");                writer.println(ModelProblemUtils.formatLocation(problem, result.getProjectId()));            }        }    } finally {        writer.close();    }    return buffer.toString();}
467ea5e295e1f15047a9b83ae3e55e9464c209cc6ae2bee05fdb315572532646
addRepository
public void addRepository(Repository repository) throws InvalidRepositoryException
{    addRepository(repository, false);}
8343f67aab5514aff60481158c0cd8325c0c3bf8859dd7a98add97adfe77299e
addRepository
public void addRepository(final Repository repository, boolean replace) throws InvalidRepositoryException
{    if (!repositoryIds.add(repository.getId())) {        if (!replace) {            return;        }                removeMatchingRepository(repositories, repository.getId());        removeMatchingRepository(pomRepositories, repository.getId());    }    List<RemoteRepository> newRepositories = Collections.singletonList(ArtifactDescriptorUtils.toRemoteRepository(repository));    if (ProjectBuildingRequest.RepositoryMerging.REQUEST_DOMINANT.equals(repositoryMerging)) {        repositories = remoteRepositoryManager.aggregateRepositories(session, repositories, newRepositories, true);    } else {        pomRepositories = remoteRepositoryManager.aggregateRepositories(session, pomRepositories, newRepositories, true);        repositories = remoteRepositoryManager.aggregateRepositories(session, pomRepositories, externalRepositories, false);    }}
3c224e2ee32649e4a530ceb70cad8fb54bd7275f90fb46a9404ebe2c1e92c540
removeMatchingRepository
private static void removeMatchingRepository(Iterable<RemoteRepository> repositories, final String id)
{    Iterator iterator = repositories.iterator();    while (iterator.hasNext()) {        RemoteRepository next = (RemoteRepository) iterator.next();        if (next.getId().equals(id)) {            iterator.remove();        }    }}
446063212e23e9fc60d1234332ccf63a43972cd5c4ae2a0af1b45ee35164b304
newCopy
public ModelResolver newCopy()
{    return new ProjectModelResolver(this);}
a1f0ab58c62382803001e3a2c6a037c159e0fe62056cded8b49d68f7639ff18f
resolveModel
public ModelSource resolveModel(String groupId, String artifactId, String version) throws UnresolvableModelException
{    File pomFile = null;    if (modelPool != null) {        pomFile = modelPool.get(groupId, artifactId, version);    }    if (pomFile == null) {        Artifact pomArtifact = new DefaultArtifact(groupId, artifactId, "", "pom", version);        try {            ArtifactRequest request = new ArtifactRequest(pomArtifact, repositories, context);            request.setTrace(trace);            pomArtifact = resolver.resolveArtifact(session, request).getArtifact();        } catch (ArtifactResolutionException e) {            throw new UnresolvableModelException(e.getMessage(), groupId, artifactId, version, e);        }        pomFile = pomArtifact.getFile();    }    return new FileModelSource(pomFile);}
47f48a9db6ee67cda33d0d71d480f7d963f9f1daa84a0ccd079e975719ad5a8f
resolveModel
public ModelSource resolveModel(final Parent parent) throws UnresolvableModelException
{    try {        final Artifact artifact = new DefaultArtifact(parent.getGroupId(), parent.getArtifactId(), "", "pom", parent.getVersion());        final VersionRangeRequest versionRangeRequest = new VersionRangeRequest(artifact, repositories, context);        versionRangeRequest.setTrace(trace);        final VersionRangeResult versionRangeResult = resolver.resolveVersionRange(session, versionRangeRequest);        if (versionRangeResult.getHighestVersion() == null) {            throw new UnresolvableModelException(String.format("No versions matched the requested parent version range '%s'", parent.getVersion()), parent.getGroupId(), parent.getArtifactId(), parent.getVersion());        }        if (versionRangeResult.getVersionConstraint() != null && versionRangeResult.getVersionConstraint().getRange() != null && versionRangeResult.getVersionConstraint().getRange().getUpperBound() == null) {                        throw new UnresolvableModelException(String.format("The requested parent version range '%s' does not specify an upper bound", parent.getVersion()), parent.getGroupId(), parent.getArtifactId(), parent.getVersion());        }        parent.setVersion(versionRangeResult.getHighestVersion().toString());        return resolveModel(parent.getGroupId(), parent.getArtifactId(), parent.getVersion());    } catch (final VersionRangeResolutionException e) {        throw new UnresolvableModelException(e.getMessage(), parent.getGroupId(), parent.getArtifactId(), parent.getVersion(), e);    }}
ee82a01c8cb484ef212006487cd73128f4cbcf54b98d69bf20404a45bf356c50
resolveModel
public ModelSource resolveModel(final Dependency dependency) throws UnresolvableModelException
{    try {        final Artifact artifact = new DefaultArtifact(dependency.getGroupId(), dependency.getArtifactId(), "", "pom", dependency.getVersion());        final VersionRangeRequest versionRangeRequest = new VersionRangeRequest(artifact, repositories, context);        versionRangeRequest.setTrace(trace);        final VersionRangeResult versionRangeResult = resolver.resolveVersionRange(session, versionRangeRequest);        if (versionRangeResult.getHighestVersion() == null) {            throw new UnresolvableModelException(String.format("No versions matched the requested dependency version range '%s'", dependency.getVersion()), dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion());        }        if (versionRangeResult.getVersionConstraint() != null && versionRangeResult.getVersionConstraint().getRange() != null && versionRangeResult.getVersionConstraint().getRange().getUpperBound() == null) {                        throw new UnresolvableModelException(String.format("The requested dependency version range '%s' does not specify an upper bound", dependency.getVersion()), dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion());        }        dependency.setVersion(versionRangeResult.getHighestVersion().toString());        return resolveModel(dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion());    } catch (VersionRangeResolutionException e) {        throw new UnresolvableModelException(e.getMessage(), dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion(), e);    }}
cf647643514258c9a0c68e33021ffe1a88feac317927be05a3bbb5c9879955bb
getRealm
public ClassRealm getRealm()
{    return realm;}
30211531844293a21da1d62b7cf4af416f3c6129ff3d677f544872e92dd4a3f6
getExtensionArtifactFilter
public DependencyFilter getExtensionArtifactFilter()
{    return extensionArtifactFilter;}
9100779f4d8f285850813db3a6efc045b53dc848224a53856258dc1b9072e430
addEdge
private void addEdge(Map<String, MavenProject> projectMap, Map<String, Map<String, Vertex>> vertexMap, MavenProject project, Vertex projectVertex, String groupId, String artifactId, String version, boolean force, boolean safe) throws CycleDetectedException
{    String projectKey = ArtifactUtils.versionlessKey(groupId, artifactId);    Map<String, Vertex> vertices = vertexMap.get(projectKey);    if (vertices != null) {        if (isSpecificVersion(version)) {            Vertex vertex = vertices.get(version);            if (vertex != null) {                addEdge(projectVertex, vertex, project, projectMap, force, safe);            }        } else {            for (Vertex vertex : vertices.values()) {                addEdge(projectVertex, vertex, project, projectMap, force, safe);            }        }    }}
c003e430dd6162f0ed80b96898ebe925c9f0209bf64dc07485eb3af3969c07a2
addEdge
private void addEdge(Vertex fromVertex, Vertex toVertex, MavenProject fromProject, Map<String, MavenProject> projectMap, boolean force, boolean safe) throws CycleDetectedException
{    if (fromVertex.equals(toVertex)) {        return;    }    if (fromProject != null) {        MavenProject toProject = projectMap.get(toVertex.getLabel());        fromProject.addProjectReference(toProject);    }    if (force && toVertex.getChildren().contains(fromVertex)) {        dag.removeEdge(toVertex, fromVertex);    }    try {        dag.addEdge(fromVertex, toVertex);    } catch (CycleDetectedException e) {        if (!safe) {            throw e;        }    }}
267f0f613a9070ef17b6988e865c9a2ae6cb17036a2e1062743ba14e92efe4c6
isSpecificVersion
private boolean isSpecificVersion(String version)
{    return !(StringUtils.isEmpty(version) || version.startsWith("[") || version.startsWith("("));}
fe82cb814b033c6e8913b408e6824a13b81bc0cf5afdf1de0c77e031f361c708
getTopLevelProject
public MavenProject getTopLevelProject()
{    if (topLevelProject == null) {        for (Iterator<MavenProject> i = sortedProjects.iterator(); i.hasNext() && (topLevelProject == null); ) {            MavenProject project = i.next();            if (project.isExecutionRoot()) {                topLevelProject = project;            }        }    }    return topLevelProject;}
a741787f77d01caf822782e4c4aea27986cab8e6d656656dab23943bae6d8c3a
getSortedProjects
public List<MavenProject> getSortedProjects()
{    return sortedProjects;}
8abbd68cfb2889e710cd5fe49e9b4bee91a47392e8ddee67125706ecb7784080
hasMultipleProjects
public boolean hasMultipleProjects()
{    return sortedProjects.size() > 1;}
efe3b7486d5ab23034bfa56e6db5429458e93365d067f3e03d6d81c9ca4a947a
getDependents
public List<String> getDependents(String id)
{    return dag.getParentLabels(id);}
b6a864d9e0dd3e46763f9e53dfe02123200acad4f43527f17f2b76f93358f911
getDependencies
public List<String> getDependencies(String id)
{    return dag.getChildLabels(id);}
1c919b239ee369da52ad7b57c7cc15ef7847f38ad610cb506b8c8fc7b5b13021
getId
public static String getId(MavenProject project)
{    return ArtifactUtils.key(project.getGroupId(), project.getArtifactId(), project.getVersion());}
fd060e957508f846813a1ac038667750b2fc4446864c4d994a324fef10a87773
getDAG
public DAG getDAG()
{    return dag;}
f4232367e9d1eef3457baa89b9ea7d3961422278637cfd8c9391ebb1ab06ce8f
getProjectMap
public Map<String, MavenProject> getProjectMap()
{    return projectMap;}
3ba0719ba0a4eb8adf63f719fa27051808bba53d102089d8e8eb248f0466a20d
get
public Object get(String groupId, String artifactId, String version, String tag)
{    return models.get(new CacheKey(groupId, artifactId, version, tag));}
828b663836ea5cf2e4476429a75f4d11892b09d5a2a45fe05e63fdba7b19c68b
put
public void put(String groupId, String artifactId, String version, String tag, Object data)
{    models.put(new CacheKey(groupId, artifactId, version, tag), data);}
4afeb0868b55bdd8e18a00a3cb43d83e0714378d1c4bb36f0936daefc060e2e8
equals
public boolean equals(Object obj)
{    if (this == obj) {        return true;    }    if (!(obj instanceof CacheKey)) {        return false;    }    CacheKey that = (CacheKey) obj;    return artifactId.equals(that.artifactId) && groupId.equals(that.groupId) && version.equals(that.version) && tag.equals(that.tag);}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    return hashCode;}
280b75acea0f4c04c8ef9e64feb408585c959e01a6133c8352b5b9767933d5de
get
public File get(String groupId, String artifactId, String version)
{    return pomFiles.get(new CacheKey(groupId, artifactId, version));}
6f578b439fc24a7108285213d1bd13b0930351ba4e3ecf619915334eac157893
put
public void put(String groupId, String artifactId, String version, File pomFile)
{    pomFiles.put(new CacheKey(groupId, artifactId, version), pomFile);}
4afeb0868b55bdd8e18a00a3cb43d83e0714378d1c4bb36f0936daefc060e2e8
equals
public boolean equals(Object obj)
{    if (this == obj) {        return true;    }    if (!(obj instanceof CacheKey)) {        return false;    }    CacheKey that = (CacheKey) obj;    return artifactId.equals(that.artifactId) && groupId.equals(that.groupId) && version.equals(that.version);}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    return hashCode;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    StringBuilder buffer = new StringBuilder(128);    buffer.append(groupId).append(':').append(artifactId).append(':').append(version);    return buffer.toString();}
c0c4b90d5fe8e528ed5a871ba136d16902df188fbf4f6003bdb6a5c38b36f124
getMojoFailureException
public MojoFailureException getMojoFailureException()
{    return (MojoFailureException) getCause();}
ad67d5b9fa7e17a19cbfed8dce418c9bb6a0b5a721f5e5755b5b3c36c14801d9
getProjectId
public String getProjectId()
{    return projectId;}
d27874fa0881632d0e80ab4e420ba8eaceac1caeb977e4bec4666af35a270845
addEnvVars
public static void addEnvVars(Properties props)
{    if (props != null) {        if (envVars == null) {            Properties tmp = new Properties();            boolean caseSensitive = !Os.isFamily(Os.FAMILY_WINDOWS);            for (Map.Entry<String, String> entry : System.getenv().entrySet()) {                String key = "env." + (caseSensitive ? entry.getKey() : entry.getKey().toUpperCase(Locale.ENGLISH));                tmp.setProperty(key, entry.getValue());            }            envVars = tmp;        }        props.putAll(envVars);    }}
74a28e5a295ac85caa33142e8c9a27b720280282c7bd621d45ee8f6a3d226497
addSystemProperties
public static void addSystemProperties(Properties props)
{    props.putAll(getSystemProperties());}
2b96e6eecae18770c3f9098428be00192c684a61377b91b73dd0432fbc5afbce
getSystemProperties
public static Properties getSystemProperties()
{    return copyProperties(System.getProperties());}
1c03de8675b7e91765397f98927cb8218a73bd052f5559cb0119f885ed28f329
copyProperties
public static Properties copyProperties(Properties properties)
{    final Properties copyProperties = new Properties();        synchronized (properties) {        copyProperties.putAll(properties);    }    return copyProperties;}
0aef2a36a7955f354ff74604a83f98730e02e1222c8ddecd94d7761e80bc9fe3
getRepository
public WorkspaceRepository getRepository()
{    return repository;}
ef2defe03265a30b880b874341b37071bc1956e6227c441db204ad1d6b94f03a
findArtifact
public File findArtifact(Artifact artifact)
{    String projectKey = ArtifactUtils.key(artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion());    MavenProject project = projectsByGAV.get(projectKey);    if (project != null) {        File file = find(project, artifact);        if (file == null && project != project.getExecutionProject()) {            file = find(project.getExecutionProject(), artifact);        }        return file;    }    return null;}
7dbbbbca6cf59b7ba416355d0104cfe6d956ee9ca82698b8c55c8e726946b44d
findVersions
public List<String> findVersions(Artifact artifact)
{    String key = ArtifactUtils.versionlessKey(artifact.getGroupId(), artifact.getArtifactId());    List<MavenProject> projects = projectsByGA.get(key);    if (projects == null || projects.isEmpty()) {        return Collections.emptyList();    }    List<String> versions = new ArrayList<>();    for (MavenProject project : projects) {        if (find(project, artifact) != null) {            versions.add(project.getVersion());        }    }    return Collections.unmodifiableList(versions);}
92d48804e294241c18e30a801f906be3ca1d69957bce8d0a63232c28f650d8df
findModel
public Model findModel(Artifact artifact)
{    String projectKey = ArtifactUtils.key(artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion());    MavenProject project = projectsByGAV.get(projectKey);    return project == null ? null : project.getModel();}
ed623f4e7ee918438d788025d4f946cbebe67606b15d4bedc834186071c3f293
find
private File find(MavenProject project, Artifact artifact)
{    if ("pom".equals(artifact.getExtension())) {        return project.getFile();    }    Artifact projectArtifact = findMatchingArtifact(project, artifact);    if (hasArtifactFileFromPackagePhase(projectArtifact)) {        return projectArtifact.getFile();    } else if (!hasBeenPackaged(project)) {        if (isTestArtifact(artifact)) {            if (project.hasLifecyclePhase("test-compile")) {                return new File(project.getBuild().getTestOutputDirectory());            }        } else {            String type = artifact.getProperty("type", "");            if (project.hasLifecyclePhase("compile") && COMPILE_PHASE_TYPES.contains(type)) {                return new File(project.getBuild().getOutputDirectory());            }        }    }        return null;}
1d9bc9c9bf4750a0b1596f504e82eb2a427b3bc339ec87af6babd5762b3d66a9
hasArtifactFileFromPackagePhase
private boolean hasArtifactFileFromPackagePhase(Artifact projectArtifact)
{    return projectArtifact != null && projectArtifact.getFile() != null && projectArtifact.getFile().exists();}
ea9c675a8d5ad3a1969db98eb9ab3140bf9b618908c838b758d66b9abfd74ae6
hasBeenPackaged
private boolean hasBeenPackaged(MavenProject project)
{    return project.hasLifecyclePhase("package") || project.hasLifecyclePhase("install") || project.hasLifecyclePhase("deploy");}
8126196d123a946761590006df5f2f1a7a7b0168526057bd9e675523ef071c3b
findMatchingArtifact
private Artifact findMatchingArtifact(MavenProject project, Artifact requestedArtifact)
{    String requestedRepositoryConflictId = ArtifactIdUtils.toVersionlessId(requestedArtifact);    Artifact mainArtifact = RepositoryUtils.toArtifact(project.getArtifact());    if (requestedRepositoryConflictId.equals(ArtifactIdUtils.toVersionlessId(mainArtifact))) {        return mainArtifact;    }    for (Artifact attachedArtifact : RepositoryUtils.toArtifacts(project.getAttachedArtifacts())) {        if (attachedArtifactComparison(requestedArtifact, attachedArtifact)) {            return attachedArtifact;        }    }    return null;}
8b02a25c4344100a4b463616158d90af4b0ad7f8d6a234801b7c94cac1b6303f
attachedArtifactComparison
private boolean attachedArtifactComparison(Artifact requested, Artifact attached)
{        return requested.getArtifactId().equals(attached.getArtifactId()) && requested.getGroupId().equals(attached.getGroupId()) && requested.getVersion().equals(attached.getVersion()) && requested.getExtension().equals(attached.getExtension()) && requested.getClassifier().equals(attached.getClassifier());}
0d38095f18bde4f26db7cdec2bd75614fca6f88a6044f4fa7ad034e13398d485
isTestArtifact
private static boolean isTestArtifact(Artifact artifact)
{    return ("test-jar".equals(artifact.getProperty("type", ""))) || ("jar".equals(artifact.getExtension()) && "tests".equals(artifact.getClassifier()));}
b61b90789cd607f723b65c8e762e5711bb75729caac568e42b4076c482a3a71c
getResource
public ArtifactTransferResource getResource()
{    return artifact;}
854d9d54d3315f04df8394cf9b7e23acfa1148329c6dabcb18e9f24a7ab80028
getException
public Exception getException()
{    return exception;}
9beaf1566b7d17cebec4b8b2a103d1222e43f9df8c9ba2c750e47d2ac7cfdfd1
getRequestType
public int getRequestType()
{    return requestType;}
a77c92d1b4f825ce1c2933ed95a3a9afb846d4f975690dfb44d49431e3042b0b
setRequestType
public void setRequestType(final int requestType)
{    switch(requestType) {        case REQUEST_PUT:            break;        case REQUEST_GET:            break;        default:            throw new IllegalArgumentException("Illegal request type: " + requestType);    }    this.requestType = requestType;}
72eab6c30103695829aebfd0d1c3584cbb88229b15d1acd302730d835f553a69
getEventType
public int getEventType()
{    return eventType;}
5910d1e618e4755bea622b114522cbeea55ce46048201fadb939da07e63d0cb7
setEventType
public void setEventType(final int eventType)
{    switch(eventType) {        case TRANSFER_INITIATED:            break;        case TRANSFER_STARTED:            break;        case TRANSFER_COMPLETED:            break;        case TRANSFER_PROGRESS:            break;        case TRANSFER_ERROR:            break;        default:            throw new IllegalArgumentException("Illegal event type: " + eventType);    }    this.eventType = eventType;}
17215367a32fba08fd9e52e0749e5d91da1780b3be9179eff23e1d4f91e37dfc
getLocalFile
public File getLocalFile()
{    return localFile;}
e62e2df3c9d00918939e5523a4273580301e6c031e0ececc8c7d204b7065d835
setLocalFile
public void setLocalFile(File localFile)
{    this.localFile = localFile;}
9af0cbbeb7f174e275797512db8a4a07ad4197e8665beeca617fcd8f540c4d91
getTransferredBytes
public long getTransferredBytes()
{    return transferredBytes;}
ed1f5c9fd19eecd344aad6fbc8f5640958f2777107cabfb0e16c3d257c9bfab6
setTransferredBytes
public void setTransferredBytes(long transferredBytes)
{    this.transferredBytes = transferredBytes;}
462dc9c73513cb6c88f9be4f20f3ddac27e1ed7890c3ecc026895624664598b3
getDataBuffer
public byte[] getDataBuffer()
{    return dataBuffer;}
a66c33997638c1abaa9067823f11ca90f99996f64dd96f0e6bc5fff6f2b9832b
setDataBuffer
public void setDataBuffer(byte[] dataBuffer)
{    this.dataBuffer = dataBuffer;}
cd485e093c09d2d0098929d5a6125c1a2bc583013cf0d5b554954bae2d227df6
getDataOffset
public int getDataOffset()
{    return dataOffset;}
7ede4280118db86af041d28fe66099bf1b10a11b8fe4143e03e6d1f9d547f03d
setDataOffset
public void setDataOffset(int dataOffset)
{    this.dataOffset = dataOffset;}
bc3d224ad10f8d8115e8351cb5434153bc5e7b054d14edba66da33d8c2f09494
getDataLength
public int getDataLength()
{    return dataLength;}
57e2a728b5aa8ce975f6808b0d7ea1b1f2ccc58d9cb34620e75edacd396a0f75
setDataLength
public void setDataLength(int dataLength)
{    this.dataLength = dataLength;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    StringBuilder sb = new StringBuilder(64);    sb.append("TransferEvent[");    switch(this.getRequestType()) {        case REQUEST_GET:            sb.append("GET");            break;        case REQUEST_PUT:            sb.append("PUT");            break;        default:            sb.append(this.getRequestType());            break;    }    sb.append('|');    switch(this.getEventType()) {        case TRANSFER_COMPLETED:            sb.append("COMPLETED");            break;        case TRANSFER_ERROR:            sb.append("ERROR");            break;        case TRANSFER_INITIATED:            sb.append("INITIATED");            break;        case TRANSFER_PROGRESS:            sb.append("PROGRESS");            break;        case TRANSFER_STARTED:            sb.append("STARTED");            break;        default:            sb.append(this.getEventType());            break;    }    sb.append('|');    sb.append(this.getLocalFile()).append('|');    sb.append(']');    return sb.toString();}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    final int prime = 31;    int result = 1;    result = prime * result + eventType;    result = prime * result + ((exception == null) ? 0 : exception.hashCode());    result = prime * result + ((localFile == null) ? 0 : localFile.hashCode());    result = prime * result + requestType;    return result;}
4afeb0868b55bdd8e18a00a3cb43d83e0714378d1c4bb36f0936daefc060e2e8
equals
public boolean equals(Object obj)
{    if (this == obj) {        return true;    }    if ((obj == null) || (getClass() != obj.getClass())) {        return false;    }    final ArtifactTransferEvent other = (ArtifactTransferEvent) obj;    if (eventType != other.eventType) {        return false;    }    if (exception == null) {        if (other.exception != null) {            return false;        }    } else if (!exception.getClass().equals(other.exception.getClass())) {        return false;    }    if (requestType != other.requestType) {        return false;    } else if (!source.equals(other.source)) {        return false;    }    return true;}
d4a77a07468e1a287553b73ee7876b5880ff7e59d680707a497da0528b579723
setBuildReactor
public void setBuildReactor(LocalArtifactRepository localRepository)
{    this.buildReactor = localRepository;}
5711b443a551e98dcf6798cbb78bdff7344122929b5bb64dbbcdbffa0603891e
setIdeWorkspace
public void setIdeWorkspace(LocalArtifactRepository localRepository)
{    this.ideWorkspace = localRepository;}
d939b4c96ade1143db2b5b280864c52a25e67041e886f9fe5e86cb5d0db9f05e
getIdeWorspace
public LocalArtifactRepository getIdeWorspace()
{    return ideWorkspace;}
3197aad17c6db899f549e6c68dd9a374f5222fe5d911df08e2fad562507cc07c
getIdeWorkspace
public LocalArtifactRepository getIdeWorkspace()
{    return getIdeWorspace();}
288e92881fed3bc8b09523aa53dbafc19c0d7a2134e03bc81446cb3e3ad05475
find
public Artifact find(Artifact artifact)
{    if (!artifact.isRelease() && buildReactor != null) {        artifact = buildReactor.find(artifact);    }    if (!artifact.isResolved() && ideWorkspace != null) {        artifact = ideWorkspace.find(artifact);    }    if (!artifact.isResolved()) {        artifact = userLocalArtifactRepository.find(artifact);    }    return artifact;}
7dbbbbca6cf59b7ba416355d0104cfe6d956ee9ca82698b8c55c8e726946b44d
findVersions
public List<String> findVersions(Artifact artifact)
{    Collection<String> versions = new LinkedHashSet<>();    if (buildReactor != null) {        versions.addAll(buildReactor.findVersions(artifact));    }    if (ideWorkspace != null) {        versions.addAll(ideWorkspace.findVersions(artifact));    }    versions.addAll(userLocalArtifactRepository.findVersions(artifact));    return Collections.unmodifiableList(new ArrayList<>(versions));}
2bf3ce12ca84872494a2865c7a246067b1efd12dc3403ae1a3b69eb89fda872e
pathOfLocalRepositoryMetadata
public String pathOfLocalRepositoryMetadata(ArtifactMetadata metadata, ArtifactRepository repository)
{    return userLocalArtifactRepository.pathOfLocalRepositoryMetadata(metadata, repository);}
09e8f13a9a603d31d64bb498b77d15572483824d843d0e82a570643192f62186
getId
public String getId()
{    return userLocalArtifactRepository.getId();}
6c63652ca89949e5d136675e9b8c89f393e36286bda4d26fa63c77d8d06c4fab
pathOf
public String pathOf(Artifact artifact)
{    return userLocalArtifactRepository.pathOf(artifact);}
3d255fad7e1640f914328be877db7f64afb0c48ada31dcd44a5404895e01e539
getBasedir
public String getBasedir()
{    return (userLocalArtifactRepository != null) ? userLocalArtifactRepository.getBasedir() : null;}
eaccd05b88d213888c2ea72d48c7456d59c1658d3dcd60e329d9f0dbcbd30ba5
getLayout
public ArtifactRepositoryLayout getLayout()
{    return userLocalArtifactRepository.getLayout();}
e409ed7b242cdfb930e2827760f13012a0489d3783c0c87a55ae976f5bdedf94
getReleases
public ArtifactRepositoryPolicy getReleases()
{    return userLocalArtifactRepository.getReleases();}
222a67553e8947003641acb334617108f322c14e725a15da2df9d63dc24f62ac
getSnapshots
public ArtifactRepositoryPolicy getSnapshots()
{    return userLocalArtifactRepository.getSnapshots();}
71dcee8caa732fdfbbc9042fbd951dc9dfd911ed9a4cabf0966856ac5de53dfc
getKey
public String getKey()
{    return userLocalArtifactRepository.getKey();}
354afe66bbdb19ee4d620955bbb214ebf9b5aa09359dea30ffb867002b5a25bd
getUrl
public String getUrl()
{    return userLocalArtifactRepository.getUrl();}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    int hash = 17;    hash = hash * 31 + (buildReactor == null ? 0 : buildReactor.hashCode());    hash = hash * 31 + (ideWorkspace == null ? 0 : ideWorkspace.hashCode());    hash = hash * 31 + (userLocalArtifactRepository == null ? 0 : userLocalArtifactRepository.hashCode());    return hash;}
4afeb0868b55bdd8e18a00a3cb43d83e0714378d1c4bb36f0936daefc060e2e8
equals
public boolean equals(Object obj)
{    if (this == obj) {        return true;    }    if (obj == null) {        return false;    }    if (getClass() != obj.getClass()) {        return false;    }    DelegatingLocalArtifactRepository other = (DelegatingLocalArtifactRepository) obj;    return eq(buildReactor, other.buildReactor) && eq(ideWorkspace, other.ideWorkspace) && eq(userLocalArtifactRepository, other.userLocalArtifactRepository);}
aea943cbaf8dc855792e6e2de7f6a7341ed98e92852166fb77b4cc44da614bff
storedInGroupDirectory
public boolean storedInGroupDirectory()
{    return false;}
9590314d7a6edd0118345714cc714a8e73448e57e702bb4c6893b363f509d64d
getGroupId
public String getGroupId()
{    return artifact.getGroupId();}
1e5191dc99d9314f2df50294bcd8d717af7b8f4311575d36d8d75b27121f1064
getArtifactId
public String getArtifactId()
{    return artifact.getArtifactId();}
1f525bff1f51744c6b1f2ca9c4dde3286e4f8d0ac339b85bdcc2a87489eba75f
extendedToString
public String extendedToString()
{    StringBuilder buffer = new StringBuilder(256);    buffer.append("\nArtifact Metadata\n--------------------------");    buffer.append("\nGroupId: ").append(getGroupId());    buffer.append("\nArtifactId: ").append(getArtifactId());    buffer.append("\nMetadata Type: ").append(getClass().getName());    return buffer.toString();}
74532920252ab24aba3facb8f78a175de2fc4c1c8247fe2b3b2dce7bf79f6858
getArtifact
public Artifact getArtifact()
{    return artifact;}
74532920252ab24aba3facb8f78a175de2fc4c1c8247fe2b3b2dce7bf79f6858
getArtifact
public Artifact getArtifact()
{    return artifact;}
d699f605c983d7f78d5f9851cb88690f788541c5eee4c010d99917bd4ec0bee2
setArtifact
public DefaultMetadataResolutionRequest setArtifact(Artifact artifact)
{    this.artifact = artifact;    return this;}
64dc696be33c6c348d62217243ad7506283ed2be89f1b5410c8acb51390d930b
getLocalRepository
public ArtifactRepository getLocalRepository()
{    return repositoryRequest.getLocalRepository();}
ed28bd655327bc007a342d7632f3f8fc24a1b492a2c35827a593fedde890cf7e
setLocalRepository
public DefaultMetadataResolutionRequest setLocalRepository(ArtifactRepository localRepository)
{    repositoryRequest.setLocalRepository(localRepository);    return this;}
4fd44e1a9f23aaf113060017b1d8f6d3cf8794c129edf477e6b2ddacdfe7400d
getRemoteRepositories
public List<ArtifactRepository> getRemoteRepositories()
{    return repositoryRequest.getRemoteRepositories();}
5d57fdfa4bf01809b338a3c8f3be8e85198ac8f91ee1c05476292cee366b6db1
setRemoteRepositories
public DefaultMetadataResolutionRequest setRemoteRepositories(List<ArtifactRepository> remoteRepositories)
{    repositoryRequest.setRemoteRepositories(remoteRepositories);    return this;}
0275384c2cc3cf90d4a9915b3fcd087e92ab81a3f59555ec215637cf390fe4bb
isResolveManagedVersions
public boolean isResolveManagedVersions()
{    return resolveManagedVersions;}
58b9b1329136fddce0f94e5e2be87adc709f289acefbd357192d4761580c97a4
setResolveManagedVersions
public DefaultMetadataResolutionRequest setResolveManagedVersions(boolean resolveManagedVersions)
{    this.resolveManagedVersions = resolveManagedVersions;    return this;}
9d7e8383b61b322508efc2a10595b57ab46f671235178f463907d85cad8d79c1
isOffline
public boolean isOffline()
{    return repositoryRequest.isOffline();}
dd0113282e2e221f136685c7123fe078e3619e46bdaebf44d031210d5fb1e7c7
setOffline
public DefaultMetadataResolutionRequest setOffline(boolean offline)
{    repositoryRequest.setOffline(offline);    return this;}
0d692361707bc74f9529b94f4ca2d694302c4a69ffd8ce760f01aeb760ad780c
isForceUpdate
public boolean isForceUpdate()
{    return repositoryRequest.isForceUpdate();}
aa4ba535acb7d1328219d0dc058af40e28a5c247b0487311d91faa7ffec2f920
setForceUpdate
public DefaultMetadataResolutionRequest setForceUpdate(boolean forceUpdate)
{    repositoryRequest.setForceUpdate(forceUpdate);    return this;}
96484999cb2f37f8f439e8c094ff1ed4040e14c103a728cc911834631adb4184
getPomArtifact
public Artifact getPomArtifact()
{    return pomArtifact;}
fc5ce01c0449961354330a0cace46330ff8ab65f9bd3bd9d1483a03b7700bdb4
getRelocatedArtifact
public Artifact getRelocatedArtifact()
{    return relocatedArtifact;}
7fbcab6f8caea634ee263da5b98d32d0edbb7c9976f623f712b9aa9b45246d30
getArtifacts
public Set<Artifact> getArtifacts()
{    return artifacts;}
80ad57250228d8e342d1cd42b4e7a9aecf970f1e0bb01d8c165a93d5fe19e356
getResolutionRepositories
public List<ArtifactRepository> getResolutionRepositories()
{    return resolutionRepositories;}
6fc9c67073a6315713f289a20571233a4621fe6af6041a9dd20801d14f47a57b
getManagedVersions
public Map<String, Artifact> getManagedVersions()
{    return managedVersions;}
c5fc7c58441ad465d36d6a1b2aaab64941b9dc1022bc50829c4e25d514dfe7c6
nullify
private static String nullify(String string)
{    return (string == null || string.length() <= 0) ? null : string;}
869e39380b5936c75eefcdd5bbee9d65c536dcd2715999032a50c6af7b7ac79e
toArtifact
private static org.apache.maven.artifact.Artifact toArtifact(Dependency dependency)
{    if (dependency == null) {        return null;    }    org.apache.maven.artifact.Artifact result = toArtifact(dependency.getArtifact());    result.setScope(dependency.getScope());    result.setOptional(dependency.isOptional());    return result;}
97e5419bcfc4be557f91ed6d48bc31a9900846b5ae9830200b47cd503c405890
toArtifact
public static org.apache.maven.artifact.Artifact toArtifact(Artifact artifact)
{    if (artifact == null) {        return null;    }    ArtifactHandler handler = newHandler(artifact);    /*         * NOTE: From Artifact.hasClassifier(), an empty string and a null both denote "no classifier". However, some         * plugins only check for null, so be sure to nullify an empty classifier.         */    org.apache.maven.artifact.Artifact result = new org.apache.maven.artifact.DefaultArtifact(artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion(), null, artifact.getProperty(ArtifactProperties.TYPE, artifact.getExtension()), nullify(artifact.getClassifier()), handler);    result.setFile(artifact.getFile());    result.setResolved(artifact.getFile() != null);    List<String> trail = new ArrayList<>(1);    trail.add(result.getId());    result.setDependencyTrail(trail);    return result;}
85adfc0f4c9b6577c68631601be01c2beed220c5f1f2cf2a9b7942651549c52e
toArtifacts
public static void toArtifacts(Collection<org.apache.maven.artifact.Artifact> artifacts, Collection<? extends DependencyNode> nodes, List<String> trail, DependencyFilter filter)
{    for (DependencyNode node : nodes) {        org.apache.maven.artifact.Artifact artifact = toArtifact(node.getDependency());        List<String> nodeTrail = new ArrayList<>(trail.size() + 1);        nodeTrail.addAll(trail);        nodeTrail.add(artifact.getId());        if (filter == null || filter.accept(node, Collections.<DependencyNode>emptyList())) {            artifact.setDependencyTrail(nodeTrail);            artifacts.add(artifact);        }        toArtifacts(artifacts, node.getChildren(), nodeTrail, filter);    }}
b76b19e00fd1918b07e97638bf0a56558b738f082a2f20045bb4c7291301d107
toArtifact
public static Artifact toArtifact(org.apache.maven.artifact.Artifact artifact)
{    if (artifact == null) {        return null;    }    String version = artifact.getVersion();    if (version == null && artifact.getVersionRange() != null) {        version = artifact.getVersionRange().toString();    }    Map<String, String> props = null;    if (org.apache.maven.artifact.Artifact.SCOPE_SYSTEM.equals(artifact.getScope())) {        String localPath = (artifact.getFile() != null) ? artifact.getFile().getPath() : "";        props = Collections.singletonMap(ArtifactProperties.LOCAL_PATH, localPath);    }    Artifact result = new DefaultArtifact(artifact.getGroupId(), artifact.getArtifactId(), artifact.getClassifier(), artifact.getArtifactHandler().getExtension(), version, props, newArtifactType(artifact.getType(), artifact.getArtifactHandler()));    result = result.setFile(artifact.getFile());    return result;}
e63dc32f64f6b9397f40c9fd31eb89a3d91d6485df1a37fddbb7fe7db9ba4441
toDependency
public static Dependency toDependency(org.apache.maven.artifact.Artifact artifact, Collection<org.apache.maven.model.Exclusion> exclusions)
{    if (artifact == null) {        return null;    }    Artifact result = toArtifact(artifact);    List<Exclusion> excl = null;    if (exclusions != null) {        excl = new ArrayList<>(exclusions.size());        for (org.apache.maven.model.Exclusion exclusion : exclusions) {            excl.add(toExclusion(exclusion));        }    }    return new Dependency(result, artifact.getScope(), artifact.isOptional(), excl);}
2a74b41a51dd6fd7df5a2213449f1597d56716535e7e0cb6728d22b9a9776498
toRepos
public static List<RemoteRepository> toRepos(List<ArtifactRepository> repos)
{    if (repos == null) {        return null;    }    List<RemoteRepository> results = new ArrayList<>(repos.size());    for (ArtifactRepository repo : repos) {        results.add(toRepo(repo));    }    return results;}
adadbec8ba01b00172392afcb8d8c6dfd59cf1a0c2f85ad0df8ac981d9db0963
toRepo
public static RemoteRepository toRepo(ArtifactRepository repo)
{    RemoteRepository result = null;    if (repo != null) {        RemoteRepository.Builder builder = new RemoteRepository.Builder(repo.getId(), getLayout(repo), repo.getUrl());        builder.setSnapshotPolicy(toPolicy(repo.getSnapshots()));        builder.setReleasePolicy(toPolicy(repo.getReleases()));        builder.setAuthentication(toAuthentication(repo.getAuthentication()));        builder.setProxy(toProxy(repo.getProxy()));        builder.setMirroredRepositories(toRepos(repo.getMirroredRepositories()));        result = builder.build();    }    return result;}
3e680c395af139d7c0f4c1f2d929fd9177dae7260cc09808611ddcde4aefd389
getLayout
public static String getLayout(ArtifactRepository repo)
{    try {        return repo.getLayout().getId();    } catch (LinkageError e) {        /*             * NOTE: getId() was added in 3.x and is as such not implemented by plugins compiled against 2.x APIs.             */        String className = repo.getLayout().getClass().getSimpleName();        if (className.endsWith("RepositoryLayout")) {            String layout = className.substring(0, className.length() - "RepositoryLayout".length());            if (layout.length() > 0) {                layout = Character.toLowerCase(layout.charAt(0)) + layout.substring(1);                return layout;            }        }        return "";    }}
24385790c7ab2a5acb49dc312911d599b2a152e9cd5ce7e180c566d314bd9cf2
toPolicy
private static RepositoryPolicy toPolicy(ArtifactRepositoryPolicy policy)
{    RepositoryPolicy result = null;    if (policy != null) {        result = new RepositoryPolicy(policy.isEnabled(), policy.getUpdatePolicy(), policy.getChecksumPolicy());    }    return result;}
93dcac831e411b887a0849e446d883978f6a0698760536250ae3e288bb351689
toAuthentication
private static Authentication toAuthentication(org.apache.maven.artifact.repository.Authentication auth)
{    Authentication result = null;    if (auth != null) {        AuthenticationBuilder authBuilder = new AuthenticationBuilder();        authBuilder.addUsername(auth.getUsername()).addPassword(auth.getPassword());        authBuilder.addPrivateKey(auth.getPrivateKey(), auth.getPassphrase());        result = authBuilder.build();    }    return result;}
ce07106e09f2e001665399e0a05420a474f3c8eb5fedc285c9e9a159362e0ac7
toProxy
private static Proxy toProxy(org.apache.maven.repository.Proxy proxy)
{    Proxy result = null;    if (proxy != null) {        AuthenticationBuilder authBuilder = new AuthenticationBuilder();        authBuilder.addUsername(proxy.getUserName()).addPassword(proxy.getPassword());        result = new Proxy(proxy.getProtocol(), proxy.getHost(), proxy.getPort(), authBuilder.build());    }    return result;}
1624d0d4b0018229c7185835dc32430c9dd395e37983fb03f15c904dfce924bc
newHandler
public static ArtifactHandler newHandler(Artifact artifact)
{    String type = artifact.getProperty(ArtifactProperties.TYPE, artifact.getExtension());    DefaultArtifactHandler handler = new DefaultArtifactHandler(type);    handler.setExtension(artifact.getExtension());    handler.setLanguage(artifact.getProperty(ArtifactProperties.LANGUAGE, null));    String addedToClasspath = artifact.getProperty(ArtifactProperties.CONSTITUTES_BUILD_PATH, "");    handler.setAddedToClasspath(Boolean.parseBoolean(addedToClasspath));    String includesDependencies = artifact.getProperty(ArtifactProperties.INCLUDES_DEPENDENCIES, "");    handler.setIncludesDependencies(Boolean.parseBoolean(includesDependencies));    return handler;}
2bea3645c5c243916d64cc3cf05788c8cf1707435478abe3e5934f88290bc201
newArtifactType
public static ArtifactType newArtifactType(String id, ArtifactHandler handler)
{    return new DefaultArtifactType(id, handler.getExtension(), handler.getClassifier(), handler.getLanguage(), handler.isAddedToClasspath(), handler.isIncludesDependencies());}
9d9d1ceb7910db76b8c202e564a31a8571500851521eeae6cd6a7547ae7b91b7
toDependency
public static Dependency toDependency(org.apache.maven.model.Dependency dependency, ArtifactTypeRegistry stereotypes)
{    ArtifactType stereotype = stereotypes.get(dependency.getType());    if (stereotype == null) {        stereotype = new DefaultArtifactType(dependency.getType());    }    boolean system = dependency.getSystemPath() != null && dependency.getSystemPath().length() > 0;    Map<String, String> props = null;    if (system) {        props = Collections.singletonMap(ArtifactProperties.LOCAL_PATH, dependency.getSystemPath());    }    Artifact artifact = new DefaultArtifact(dependency.getGroupId(), dependency.getArtifactId(), dependency.getClassifier(), null, dependency.getVersion(), props, stereotype);    List<Exclusion> exclusions = new ArrayList<>(dependency.getExclusions().size());    for (org.apache.maven.model.Exclusion exclusion : dependency.getExclusions()) {        exclusions.add(toExclusion(exclusion));    }    Dependency result = new Dependency(artifact, dependency.getScope(), dependency.getOptional() != null ? dependency.isOptional() : null, exclusions);    return result;}
859a5000885b1ae0db6b72d73f89625307dfcf33b567321565779a2868bd921c
toExclusion
private static Exclusion toExclusion(org.apache.maven.model.Exclusion exclusion)
{    return new Exclusion(exclusion.getGroupId(), exclusion.getArtifactId(), "*", "*");}
c268f20b8e2f16bdeb4f1f1fd03893ffafee8af1fd69a9289ab5c97f7cbdcb86
newArtifactTypeRegistry
public static ArtifactTypeRegistry newArtifactTypeRegistry(ArtifactHandlerManager handlerManager)
{    return new MavenArtifactTypeRegistry(handlerManager);}
9cf8ff3d66095df03eae906bc055976516b63691eca300fe5e343844c0ade2a8
get
public ArtifactType get(String stereotypeId)
{    ArtifactHandler handler = handlerManager.getArtifactHandler(stereotypeId);    return newArtifactType(stereotypeId, handler);}
89aa2383a9d792edf3daed93c9f1f0fed29acd5fedbeebcdefba71ea0718c3df
toArtifacts
public static Collection<Artifact> toArtifacts(Collection<org.apache.maven.artifact.Artifact> artifactsToConvert)
{    List<Artifact> artifacts = new ArrayList<>();    for (org.apache.maven.artifact.Artifact a : artifactsToConvert) {        artifacts.add(toArtifact(a));    }    return artifacts;}
3962d5cea77c9743f5adf35874a6589534e12d946ac8b9e77e0ff0b9edc59207
getWorkspace
public static WorkspaceRepository getWorkspace(RepositorySystemSession session)
{    WorkspaceReader reader = session.getWorkspaceReader();    return (reader != null) ? reader.getRepository() : null;}
1044b4d9a3ca9f2d05041d43031593a3f78654b6d2ef284a9bf955167f735f5f
repositoriesEquals
public static boolean repositoriesEquals(List<RemoteRepository> r1, List<RemoteRepository> r2)
{    if (r1.size() != r2.size()) {        return false;    }    for (Iterator<RemoteRepository> it1 = r1.iterator(), it2 = r2.iterator(); it1.hasNext(); ) {        if (!repositoryEquals(it1.next(), it2.next())) {            return false;        }    }    return true;}
17cd4cd8fb97b23eddb52cdf6eba66a4636a7df156729785d7d6b0e0482abdee
repositoriesHashCode
public static int repositoriesHashCode(List<RemoteRepository> repositories)
{    int result = 17;    for (RemoteRepository repository : repositories) {        result = 31 * result + repositoryHashCode(repository);    }    return result;}
81922d3e456a78eb9af029c5106949ac95d027428e9690616804bb0db344b82b
repositoryHashCode
private static int repositoryHashCode(RemoteRepository repository)
{    int result = 17;    Object obj = repository.getUrl();    result = 31 * result + (obj != null ? obj.hashCode() : 0);    return result;}
1eecc3dc23376d394a46a9fc3d355978213466b0872107db3328e45a91bfcb9b
policyEquals
private static boolean policyEquals(RepositoryPolicy p1, RepositoryPolicy p2)
{    if (p1 == p2) {        return true;    }        return p1.isEnabled() == p2.isEnabled() && Objects.equals(p1.getChecksumPolicy(), p2.getChecksumPolicy());}
95a86b1daa9b46de9cf3776ac45bee0158092449c2a71d36f124431f7124d9fd
repositoryEquals
private static boolean repositoryEquals(RemoteRepository r1, RemoteRepository r2)
{    if (r1 == r2) {        return true;    }    return Objects.equals(r1.getId(), r2.getId()) && Objects.equals(r1.getUrl(), r2.getUrl()) && policyEquals(r1.getPolicy(false), r2.getPolicy(false)) && policyEquals(r1.getPolicy(true), r2.getPolicy(true));}
acd8db9db5ff75b6367a5bd760cccff303d4526dafb7b19955229a78e1445ced
getMavenVersion
public String getMavenVersion()
{    if (mavenVersion == null) {        Properties props = new Properties();        String resource = "META-INF/maven/org.apache.maven/maven-core/pom.properties";        try (InputStream is = DefaultRuntimeInformation.class.getResourceAsStream("/" + resource)) {            if (is != null) {                props.load(is);            } else {                logger.warn("Could not locate " + resource + " on classpath, Maven runtime information not available");            }        } catch (IOException e) {            String msg = "Could not parse " + resource + ", Maven runtime information not available";            if (logger.isDebugEnabled()) {                logger.warn(msg, e);            } else {                logger.warn(msg);            }        }        String version = props.getProperty("version", "").trim();        if (!version.startsWith("${")) {            mavenVersion = version;        } else {            mavenVersion = "";        }    }    return mavenVersion;}
a40e29013f39e6ec5a40d6971f2d57de07947ddcdf840bf2793618d5bf7925fa
isMavenVersion
public boolean isMavenVersion(String versionRange)
{    VersionScheme versionScheme = new GenericVersionScheme();    Validate.notBlank(versionRange, "versionRange can neither be null, empty nor blank");    VersionConstraint constraint;    try {        constraint = versionScheme.parseVersionConstraint(versionRange);    } catch (InvalidVersionSpecificationException e) {        throw new IllegalArgumentException(e.getMessage(), e);    }    Version current;    try {        String mavenVersion = getMavenVersion();        Validate.validState(StringUtils.isNotEmpty(mavenVersion), "Could not determine current Maven version");        current = versionScheme.parseVersion(mavenVersion);    } catch (InvalidVersionSpecificationException e) {        throw new IllegalStateException("Could not parse current Maven version: " + e.getMessage(), e);    }    if (constraint.getRange() == null) {        return constraint.getVersion().compareTo(current) <= 0;    }    return constraint.containsVersion(current);}
7879542e1c9692937bb06c057e45be2786184b48bff93d8e155d0e61dbdf105b
get
public Object get()
{    throw new IllegalStateException();}
9b1bf66852d5a16d13abe703e4706630d2e3019328e4c2064cdf2a117e1245fe
enter
public void enter()
{    LinkedList<ScopeState> stack = values.get();    if (stack == null) {        stack = new LinkedList<>();        values.set(stack);    }    stack.addFirst(new ScopeState());}
69f9b722c5240f9477c13fb3dc2a413b9b13c359e2e12ad6420aa382b2237e5d
enter
public void enter(Memento memento)
{    enter();    getScopeState().seeded.putAll(memento.seeded);}
32bbc96e33a82faace60b56aca4b4504ac3a1107f91afd4f1825e139db009fb3
getScopeState
private ScopeState getScopeState()
{    LinkedList<ScopeState> stack = values.get();    if (stack == null || stack.isEmpty()) {        throw new IllegalStateException();    }    return stack.getFirst();}
d6f4ccd28a98bf4e274e0d96436aa883a7bbb5027387c88f09ece6b8c05a5d88
exit
public void exit()
{    final LinkedList<ScopeState> stack = values.get();    if (stack == null || stack.isEmpty()) {        throw new IllegalStateException();    }    stack.removeFirst();    if (stack.isEmpty()) {        values.remove();    }}
5e5798824c05c81b57e4ebcfd2640e74b3eec13d2a74b392578471adbe575e14
memento
public Memento memento()
{    LinkedList<ScopeState> stack = values.get();    return new Memento(stack != null ? stack.getFirst().seeded : Collections.<Key<?>, Provider<?>>emptyMap());}
c4e8c555668189b6fc1f4125da2ea654159c3d1b75b4e8ca94f486112ba391a2
seed
public void seed(Class<T> clazz, Provider<T> value)
{    getScopeState().seeded.put(Key.get(clazz), value);}
905fa83f5e0f9edf6aec407b5c3c7a04305845ee21425eeaed15152fd7980462
seed
public void seed(Class<T> clazz, final T value)
{    getScopeState().seeded.put(Key.get(clazz), Providers.of(value));}
0e39159daf4961a2ac28cd814c8475a699586ead2acc17f730f8671bf507a801
scope
public Provider<T> scope(final Key<T> key, final Provider<T> unscoped)
{    return new Provider<T>() {        @SuppressWarnings("unchecked")        public T get() {            LinkedList<ScopeState> stack = values.get();            if (stack == null || stack.isEmpty()) {                throw new OutOfScopeException("Cannot access " + key + " outside of a scoping block");            }            ScopeState state = stack.getFirst();            Provider<?> seeded = state.seeded.get(key);            if (seeded != null) {                return (T) seeded.get();            }            T provided = (T) state.provided.get(key);            if (provided == null && unscoped != null) {                provided = unscoped.get();                state.provided.put(key, provided);            }            return provided;        }    };}
f92b71e18fa63d96cf2b628ad8520702b897423512edea5de9dd0e96f471f5ff
get
public T get()
{    LinkedList<ScopeState> stack = values.get();    if (stack == null || stack.isEmpty()) {        throw new OutOfScopeException("Cannot access " + key + " outside of a scoping block");    }    ScopeState state = stack.getFirst();    Provider<?> seeded = state.seeded.get(key);    if (seeded != null) {        return (T) seeded.get();    }    T provided = (T) state.provided.get(key);    if (provided == null && unscoped != null) {        provided = unscoped.get();        state.provided.put(key, provided);    }    return provided;}
34c3c9f4b762eafc49d8827f453f2937425bd04a33bd9ca982bfe88cc8002088
seededKeyProvider
public static Provider<T> seededKeyProvider()
{    return (Provider<T>) SEEDED_KEY_PROVIDER;}
e3f3888bce5cf21b1820845ce277d3e72af79375bd35bb93929649159ac47dbe
configure
protected void configure()
{    bindScope(SessionScoped.class, scope);    bind(SessionScope.class).toInstance(scope);    bind(MavenSession.class).toProvider(SessionScope.<MavenSession>seededKeyProvider()).in(scope);}
aee5551f5caa93e9cc09b5315613da05c9cee7305e65007be328f38e417074ea
buildSettings
public Settings buildSettings() throws IOException, XmlPullParserException
{    File userSettingsFile = getFile("${user.home}/.m2/settings.xml", "user.home", MavenSettingsBuilder.ALT_USER_SETTINGS_XML_LOCATION);    return buildSettings(userSettingsFile);}
812a588af7c34fb4fedbe1ff8684af787246446525086af1cd77b3cd852ffd5a
buildSettings
public Settings buildSettings(boolean useCachedSettings) throws IOException, XmlPullParserException
{    return buildSettings();}
ccab20b32f87362be03e974143d646cfaeda7da442be09d86bfa1c2ac5d103b7
buildSettings
public Settings buildSettings(File userSettingsFile) throws IOException, XmlPullParserException
{    File globalSettingsFile = getFile("${maven.conf}/settings.xml", "maven.conf", MavenSettingsBuilder.ALT_GLOBAL_SETTINGS_XML_LOCATION);    SettingsBuildingRequest request = new DefaultSettingsBuildingRequest();    request.setUserSettingsFile(userSettingsFile);    request.setGlobalSettingsFile(globalSettingsFile);    request.setSystemProperties(SystemProperties.getSystemProperties());    return build(request);}
c621385964d53fbd86d2f2cb8ad4c6432fd861d12a6da50b1ec219fdc3418a7b
buildSettings
public Settings buildSettings(File userSettingsFile, boolean useCachedSettings) throws IOException, XmlPullParserException
{    return buildSettings(userSettingsFile);}
1808fd32f6bdb0fc0f1b355f2410a1e239fa79f9c0aaf6dddec743bad02d2e20
build
private Settings build(SettingsBuildingRequest request) throws IOException, XmlPullParserException
{    try {        return settingsBuilder.build(request).getEffectiveSettings();    } catch (SettingsBuildingException e) {        throw (IOException) new IOException(e.getMessage()).initCause(e);    }}
cca9a516d87363872ead6d9a35f593cc5dd512fbd7df4e000a0e08c0b9fb6cb8
buildSettings
public Settings buildSettings(MavenExecutionRequest request) throws IOException, XmlPullParserException
{    SettingsBuildingRequest settingsRequest = new DefaultSettingsBuildingRequest();    settingsRequest.setUserSettingsFile(request.getUserSettingsFile());    settingsRequest.setGlobalSettingsFile(request.getGlobalSettingsFile());    settingsRequest.setUserProperties(request.getUserProperties());    settingsRequest.setSystemProperties(request.getSystemProperties());    return build(settingsRequest);}
074e23d871c3a225f2fdb5db192f1bc57b5f3644a59cece3bc223bee56f2bcac
getFile
private File getFile(String pathPattern, String basedirSysProp, String altLocationSysProp)
{                                                    String path = System.getProperty(altLocationSysProp);    if (StringUtils.isEmpty(path)) {                        String basedir = System.getProperty(basedirSysProp);        if (basedir == null) {            basedir = System.getProperty("user.dir");        }        basedir = basedir.replaceAll("\\\\", "/");        basedir = basedir.replaceAll("\\$", "\\\\\\$");        path = pathPattern.replaceAll("\\$\\{" + basedirSysProp + "\\}", basedir);        path = path.replaceAll("\\\\", "/");        return new File(path).getAbsoluteFile();    } else {        return new File(path).getAbsoluteFile();    }}
de418c2b40b113f31f0e80a27291a5fc9f70e24067ed5b3ab5871ddcb04ceb6e
getColumnNumber
public int getColumnNumber()
{    return columnNumber;}
d0206afdd4bbfbca49378097e83c12789d7836ac6e56572eee8d2abd20c4c84d
getLineNumber
public int getLineNumber()
{    return lineNumber;}
a9af20bc701ec8d1c984e00b67854b937faade4dc62e378eb66c9c7a5d46e248
merge
public static void merge(Settings dominant, Settings recessive, String recessiveSourceLevel)
{    new MavenSettingsMerger().merge(dominant, recessive, recessiveSourceLevel);}
9203677950308c2ab5a3e93b3fc125ffd0946fed31f2bd302540737480938042
convertToSettingsProfile
public static Profile convertToSettingsProfile(org.apache.maven.model.Profile modelProfile)
{    Profile profile = new Profile();    profile.setId(modelProfile.getId());    org.apache.maven.model.Activation modelActivation = modelProfile.getActivation();    if (modelActivation != null) {        Activation activation = new Activation();        activation.setActiveByDefault(modelActivation.isActiveByDefault());        activation.setJdk(modelActivation.getJdk());        org.apache.maven.model.ActivationProperty modelProp = modelActivation.getProperty();        if (modelProp != null) {            ActivationProperty prop = new ActivationProperty();            prop.setName(modelProp.getName());            prop.setValue(modelProp.getValue());            activation.setProperty(prop);        }        org.apache.maven.model.ActivationOS modelOs = modelActivation.getOs();        if (modelOs != null) {            ActivationOS os = new ActivationOS();            os.setArch(modelOs.getArch());            os.setFamily(modelOs.getFamily());            os.setName(modelOs.getName());            os.setVersion(modelOs.getVersion());            activation.setOs(os);        }        ActivationFile modelFile = modelActivation.getFile();        if (modelFile != null) {            org.apache.maven.settings.ActivationFile file = new org.apache.maven.settings.ActivationFile();            file.setExists(modelFile.getExists());            file.setMissing(modelFile.getMissing());            activation.setFile(file);        }        profile.setActivation(activation);    }    profile.setProperties(modelProfile.getProperties());    List<org.apache.maven.model.Repository> repos = modelProfile.getRepositories();    if (repos != null) {        for (org.apache.maven.model.Repository repo : repos) {            profile.addRepository(convertToSettingsRepository(repo));        }    }    List<org.apache.maven.model.Repository> pluginRepos = modelProfile.getPluginRepositories();    if (pluginRepos != null) {        for (org.apache.maven.model.Repository pluginRepo : pluginRepos) {            profile.addPluginRepository(convertToSettingsRepository(pluginRepo));        }    }    return profile;}
100cbb14e5b92eb60db1a9c310e41f7324b6b8ea7ccd1fe61df32f98f864846e
convertFromSettingsProfile
public static org.apache.maven.model.Profile convertFromSettingsProfile(Profile settingsProfile)
{    org.apache.maven.model.Profile profile = new org.apache.maven.model.Profile();    profile.setId(settingsProfile.getId());    profile.setSource("settings.xml");    Activation settingsActivation = settingsProfile.getActivation();    if (settingsActivation != null) {        org.apache.maven.model.Activation activation = new org.apache.maven.model.Activation();        activation.setActiveByDefault(settingsActivation.isActiveByDefault());        activation.setJdk(settingsActivation.getJdk());        ActivationProperty settingsProp = settingsActivation.getProperty();        if (settingsProp != null) {            org.apache.maven.model.ActivationProperty prop = new org.apache.maven.model.ActivationProperty();            prop.setName(settingsProp.getName());            prop.setValue(settingsProp.getValue());            activation.setProperty(prop);        }        ActivationOS settingsOs = settingsActivation.getOs();        if (settingsOs != null) {            org.apache.maven.model.ActivationOS os = new org.apache.maven.model.ActivationOS();            os.setArch(settingsOs.getArch());            os.setFamily(settingsOs.getFamily());            os.setName(settingsOs.getName());            os.setVersion(settingsOs.getVersion());            activation.setOs(os);        }        org.apache.maven.settings.ActivationFile settingsFile = settingsActivation.getFile();        if (settingsFile != null) {            ActivationFile file = new ActivationFile();            file.setExists(settingsFile.getExists());            file.setMissing(settingsFile.getMissing());            activation.setFile(file);        }        profile.setActivation(activation);    }    profile.setProperties(settingsProfile.getProperties());    List<Repository> repos = settingsProfile.getRepositories();    if (repos != null) {        for (Repository repo : repos) {            profile.addRepository(convertFromSettingsRepository(repo));        }    }    List<Repository> pluginRepos = settingsProfile.getPluginRepositories();    if (pluginRepos != null) {        for (Repository pluginRepo : pluginRepos) {            profile.addPluginRepository(convertFromSettingsRepository(pluginRepo));        }    }    return profile;}
2121530e3cf1fc3f2003f72984eae0bba4f80f97e9561efa5a851743e8a11e17
convertFromSettingsRepository
private static org.apache.maven.model.Repository convertFromSettingsRepository(Repository settingsRepo)
{    org.apache.maven.model.Repository repo = new org.apache.maven.model.Repository();    repo.setId(settingsRepo.getId());    repo.setLayout(settingsRepo.getLayout());    repo.setName(settingsRepo.getName());    repo.setUrl(settingsRepo.getUrl());    if (settingsRepo.getSnapshots() != null) {        repo.setSnapshots(convertRepositoryPolicy(settingsRepo.getSnapshots()));    }    if (settingsRepo.getReleases() != null) {        repo.setReleases(convertRepositoryPolicy(settingsRepo.getReleases()));    }    return repo;}
1b38293ffffea73a597cc6653e0f81c9efdcb9252862aab33e36462885f4b6b6
convertRepositoryPolicy
private static org.apache.maven.model.RepositoryPolicy convertRepositoryPolicy(RepositoryPolicy settingsPolicy)
{    org.apache.maven.model.RepositoryPolicy policy = new org.apache.maven.model.RepositoryPolicy();    policy.setEnabled(settingsPolicy.isEnabled());    policy.setUpdatePolicy(settingsPolicy.getUpdatePolicy());    policy.setChecksumPolicy(settingsPolicy.getChecksumPolicy());    return policy;}
079b143ffa47e343d73829dec61575506040b70ac80ea1c8ca9ee0cc5aebe826
convertToSettingsRepository
private static Repository convertToSettingsRepository(org.apache.maven.model.Repository modelRepo)
{    Repository repo = new Repository();    repo.setId(modelRepo.getId());    repo.setLayout(modelRepo.getLayout());    repo.setName(modelRepo.getName());    repo.setUrl(modelRepo.getUrl());    if (modelRepo.getSnapshots() != null) {        repo.setSnapshots(convertRepositoryPolicy(modelRepo.getSnapshots()));    }    if (modelRepo.getReleases() != null) {        repo.setReleases(convertRepositoryPolicy(modelRepo.getReleases()));    }    return repo;}
76ca492ebbf8a9fb635cddf258a4101c78fb5d5d756feec9745e8e3b9411546c
convertRepositoryPolicy
private static RepositoryPolicy convertRepositoryPolicy(org.apache.maven.model.RepositoryPolicy modelPolicy)
{    RepositoryPolicy policy = new RepositoryPolicy();    policy.setEnabled(modelPolicy.isEnabled());    policy.setUpdatePolicy(modelPolicy.getUpdatePolicy());    policy.setChecksumPolicy(modelPolicy.getChecksumPolicy());    return policy;}
0f12d78856ff60ae9deaa827c37f7ff7b58347ffbb6c09482b28dbacbd0f72d8
copySettings
public static Settings copySettings(Settings settings)
{    if (settings == null) {        return null;    }    Settings clone = new Settings();    clone.setActiveProfiles(settings.getActiveProfiles());    clone.setInteractiveMode(settings.isInteractiveMode());    clone.setLocalRepository(settings.getLocalRepository());    clone.setMirrors(settings.getMirrors());    clone.setModelEncoding(settings.getModelEncoding());    clone.setOffline(settings.isOffline());    clone.setPluginGroups(settings.getPluginGroups());    clone.setProfiles(settings.getProfiles());    clone.setProxies(settings.getProxies());    clone.setServers(settings.getServers());    clone.setSourceLevel(settings.getSourceLevel());    clone.setUsePluginRegistry(settings.isUsePluginRegistry());    return clone;}
f6b06b8722608313153ff67e5185e059f22f233e8b96acfd18c3cb25b0cc4278
build
public ToolchainsBuildingResult build(ToolchainsBuildingRequest request) throws ToolchainsBuildingException
{    ProblemCollector problems = ProblemCollectorFactory.newInstance(null);    PersistedToolchains globalToolchains = readToolchains(request.getGlobalToolchainsSource(), request, problems);    PersistedToolchains userToolchains = readToolchains(request.getUserToolchainsSource(), request, problems);    toolchainsMerger.merge(userToolchains, globalToolchains, TrackableBase.GLOBAL_LEVEL);    problems.setSource("");    userToolchains = interpolate(userToolchains, problems);    if (hasErrors(problems.getProblems())) {        throw new ToolchainsBuildingException(problems.getProblems());    }    return new DefaultToolchainsBuildingResult(userToolchains, problems.getProblems());}
ff3bae761bd13a50ac3cd947f3e44f6ca0d1acb0211759c011ef0a97d5ffeae1
interpolate
private PersistedToolchains interpolate(PersistedToolchains toolchains, ProblemCollector problems)
{    StringWriter stringWriter = new StringWriter(1024 * 4);    try {        toolchainsWriter.write(stringWriter, null, toolchains);    } catch (IOException e) {        throw new IllegalStateException("Failed to serialize toolchains to memory", e);    }    String serializedToolchains = stringWriter.toString();    RegexBasedInterpolator interpolator = new RegexBasedInterpolator();    try {        interpolator.addValueSource(new EnvarBasedValueSource());    } catch (IOException e) {        problems.add(Problem.Severity.WARNING, "Failed to use environment variables for interpolation: " + e.getMessage(), -1, -1, e);    }    interpolator.addPostProcessor(new InterpolationPostProcessor() {        @Override        public Object execute(String expression, Object value) {            if (value != null) {                                value = value.toString().replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;");                return value;            }            return null;        }    });    try {        serializedToolchains = interpolator.interpolate(serializedToolchains);    } catch (InterpolationException e) {        problems.add(Problem.Severity.ERROR, "Failed to interpolate toolchains: " + e.getMessage(), -1, -1, e);        return toolchains;    }    PersistedToolchains result;    try {        Map<String, ?> options = Collections.singletonMap(ToolchainsReader.IS_STRICT, Boolean.FALSE);        result = toolchainsReader.read(new StringReader(serializedToolchains), options);    } catch (IOException e) {        problems.add(Problem.Severity.ERROR, "Failed to interpolate toolchains: " + e.getMessage(), -1, -1, e);        return toolchains;    }    return result;}
fe2a911fe55b44d52d299fcb381b34c61df4b2095337c2d78f2fb1f1e77a3bb5
execute
public Object execute(String expression, Object value)
{    if (value != null) {                value = value.toString().replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;");        return value;    }    return null;}
367416ac78b956b7c83cb488d5eee5f5959c08064e62bcbdc56489eccd222c6f
readToolchains
private PersistedToolchains readToolchains(Source toolchainsSource, ToolchainsBuildingRequest request, ProblemCollector problems)
{    if (toolchainsSource == null) {        return new PersistedToolchains();    }    PersistedToolchains toolchains;    try {        Map<String, ?> options = Collections.singletonMap(ToolchainsReader.IS_STRICT, Boolean.TRUE);        try {            toolchains = toolchainsReader.read(toolchainsSource.getInputStream(), options);        } catch (ToolchainsParseException e) {            options = Collections.singletonMap(ToolchainsReader.IS_STRICT, Boolean.FALSE);            toolchains = toolchainsReader.read(toolchainsSource.getInputStream(), options);            problems.add(Problem.Severity.WARNING, e.getMessage(), e.getLineNumber(), e.getColumnNumber(), e);        }    } catch (ToolchainsParseException e) {        problems.add(Problem.Severity.FATAL, "Non-parseable toolchains " + toolchainsSource.getLocation() + ": " + e.getMessage(), e.getLineNumber(), e.getColumnNumber(), e);        return new PersistedToolchains();    } catch (IOException e) {        problems.add(Problem.Severity.FATAL, "Non-readable toolchains " + toolchainsSource.getLocation() + ": " + e.getMessage(), -1, -1, e);        return new PersistedToolchains();    }    return toolchains;}
ae55c50e0a48655b5e43ea6d1255c0f83b7a41dd22a8bd7f1043d768799ceb2d
hasErrors
private boolean hasErrors(List<Problem> problems)
{    if (problems != null) {        for (Problem problem : problems) {            if (Problem.Severity.ERROR.compareTo(problem.getSeverity()) >= 0) {                return true;            }        }    }    return false;}
7e6ca7c80b8cf0b3148c8c4e4d985c9174039048470e2c4e6be662987045e9b7
getGlobalToolchainsSource
public Source getGlobalToolchainsSource()
{    return globalToolchainsSource;}
3f0fb53b0b57b7918a6fefb4f8c1b0ef9610a01f77929f89a3c7df0c04b4d412
setGlobalToolchainsSource
public ToolchainsBuildingRequest setGlobalToolchainsSource(Source globalToolchainsSource)
{    this.globalToolchainsSource = globalToolchainsSource;    return this;}
fe87c062cb95a4927f6d03a4fdc3d281387d70e720e43780205a74722a300422
getUserToolchainsSource
public Source getUserToolchainsSource()
{    return userToolchainsSource;}
8d9813f28d55641e921691178c00af2f6bbc76380be1c83219f5fc84149a010c
setUserToolchainsSource
public ToolchainsBuildingRequest setUserToolchainsSource(Source userToolchainsSource)
{    this.userToolchainsSource = userToolchainsSource;    return this;}
28efd7fd8135b777ba302211888c0931f0197b535d3c62b72486e56f695eb6b9
getEffectiveToolchains
public PersistedToolchains getEffectiveToolchains()
{    return effectiveToolchains;}
cb918f76e66dcaffd35efd5f9895e36ef9a7ce8148d7805278a6f8d0627d8494
getProblems
public List<Problem> getProblems()
{    return problems;}
cb918f76e66dcaffd35efd5f9895e36ef9a7ce8148d7805278a6f8d0627d8494
getProblems
public List<Problem> getProblems()
{    return problems;}
e9e893a8484eb477b53922cbfac66da500f422d5ca6e5658b1dfa902adc1395f
toMessage
private static String toMessage(List<Problem> problems)
{    StringWriter buffer = new StringWriter(1024);    PrintWriter writer = new PrintWriter(buffer);    writer.print(problems.size());    writer.print((problems.size() == 1) ? " problem was " : " problems were ");    writer.print("encountered while building the effective toolchains");    writer.println();    for (Problem problem : problems) {        writer.print("[");        writer.print(problem.getSeverity());        writer.print("] ");        writer.print(problem.getMessage());        String location = problem.getLocation();        if (!location.isEmpty()) {            writer.print(" @ ");            writer.print(location);        }        writer.println();    }    return buffer.toString();}
fa0025fbf9b0df93c43af75458e4a03124c4c79cb6304b4c7700bb7e1e26bd2e
getType
public final String getType()
{    return type != null ? type : model.getType();}
cbc4b8755345674a7b435f82f7b9bf7e94fb1d80f7356de288bb49ca5da71a81
getModel
public final ToolchainModel getModel()
{    return model;}
4eb00dabe633813556d6dfd5b032d3d1dca998560e3417c6c77693212220f6f8
addProvideToken
public final void addProvideToken(String type, RequirementMatcher matcher)
{    provides.put(type, matcher);}
a3913a2fe54901a2a294d983d47842b4d9de16f8e0d0e3b472e865f6ddb1e1e7
matchesRequirements
public boolean matchesRequirements(Map<String, String> requirements)
{    for (Map.Entry<String, String> requirement : requirements.entrySet()) {        String key = requirement.getKey();        RequirementMatcher matcher = provides.get(key);        if (matcher == null) {            getLog().debug("Toolchain " + this + " is missing required property: " + key);            return false;        }        if (!matcher.matches(requirement.getValue())) {            getLog().debug("Toolchain " + this + " doesn't match required property: " + key);            return false;        }    }    return true;}
c44b3c5e269ca6e0866a5dd34d2a109ecdd3efd227c75ac685351c450a5cc9fc
getLog
protected Logger getLog()
{    return logger;}
4afeb0868b55bdd8e18a00a3cb43d83e0714378d1c4bb36f0936daefc060e2e8
equals
public boolean equals(Object obj)
{    if (obj == null) {        return false;    }    if (this == obj) {        return true;    }    if (!(obj instanceof DefaultToolchain)) {        return false;    }    DefaultToolchain other = (DefaultToolchain) obj;    if (!Objects.equals(type, other.type)) {        return false;    }    Properties thisProvides = this.getModel().getProvides();    Properties otherProvides = other.getModel().getProvides();    return Objects.equals(thisProvides, otherProvides);}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    int hashCode = (type == null) ? 0 : type.hashCode();    if (this.getModel().getProvides() != null) {        hashCode = 31 * hashCode + this.getModel().getProvides().hashCode();    }    return hashCode;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    StringBuilder builder = new StringBuilder();    builder.append("type:").append(getType());    builder.append('{');    Iterator<Map.Entry<String, RequirementMatcher>> providesIter = provides.entrySet().iterator();    while (providesIter.hasNext()) {        Map.Entry<String, RequirementMatcher> provideEntry = providesIter.next();        builder.append(provideEntry.getKey()).append(" = ").append(provideEntry.getValue());        if (providesIter.hasNext()) {            builder.append(';');        }    }    builder.append('}');    return builder.toString();}
b18395b4ec118407595f9384e66647599cd23b6a015b6826157216c09298f253
getToolchainFromBuildContext
public Toolchain getToolchainFromBuildContext(String type, MavenSession session)
{    Map<String, Object> context = retrieveContext(session);    ToolchainModel model = (ToolchainModel) context.get(getStorageKey(type));    if (model != null) {        List<Toolchain> toolchains = selectToolchains(Collections.singletonList(model), type, null);        if (!toolchains.isEmpty()) {            return toolchains.get(0);        }    }    return null;}
c636e3a9e63ed07990bb9dcc5bf6747453e40d5caf2d131a1f7b5540c8dde3a7
getToolchains
public List<Toolchain> getToolchains(MavenSession session, String type, Map<String, String> requirements)
{    List<ToolchainModel> models = session.getRequest().getToolchains().get(type);    return selectToolchains(models, type, requirements);}
90ca9689cc9cf0448f7c0b4fc6dcf0fa985bb8bf2c8f19484b05fed363d21f1f
selectToolchains
private List<Toolchain> selectToolchains(List<ToolchainModel> models, String type, Map<String, String> requirements)
{    List<Toolchain> toolchains = new ArrayList<>();    if (models != null) {        ToolchainFactory fact = factories.get(type);        if (fact == null) {            logger.error("Missing toolchain factory for type: " + type + ". Possibly caused by misconfigured project.");        } else {            for (ToolchainModel model : models) {                try {                    ToolchainPrivate toolchain = fact.createToolchain(model);                    if (requirements == null || toolchain.matchesRequirements(requirements)) {                        toolchains.add(toolchain);                    }                } catch (MisconfiguredToolchainException ex) {                    logger.error("Misconfigured toolchain.", ex);                }            }        }    }    return toolchains;}
ab2da8df67ff2738cea9e84166bcbcdc4f84612b308c482d88fd6be20bbf8b6c
retrieveContext
 Map<String, Object> retrieveContext(MavenSession session)
{    Map<String, Object> context = null;    if (session != null) {        PluginDescriptor desc = new PluginDescriptor();        desc.setGroupId(PluginDescriptor.getDefaultPluginGroupId());        desc.setArtifactId(PluginDescriptor.getDefaultPluginArtifactId("toolchains"));        MavenProject current = session.getCurrentProject();        if (current != null) {                        context = session.getPluginContext(desc, current);        }    }    return (context != null) ? context : new HashMap<String, Object>();}
58758db049c168611ef28d4ab46b1fcabd20800862dbed80bac00357094ca28d
getStorageKey
public static final String getStorageKey(String type)
{        return "toolchain-" + type;}
b70a22b60443aaa3df3798e7f8c186376a64fe798b605734aaa56626e6419613
getToolchainsForType
public ToolchainPrivate[] getToolchainsForType(String type, MavenSession context) throws MisconfiguredToolchainException
{    List<ToolchainPrivate> toRet = new ArrayList<>();    ToolchainFactory fact = factories.get(type);    if (fact == null) {        logger.error("Missing toolchain factory for type: " + type + ". Possibly caused by misconfigured project.");    } else {        List<ToolchainModel> availableToolchains = context.getRequest().getToolchains().get(type);        if (availableToolchains != null) {            for (ToolchainModel toolchainModel : availableToolchains) {                toRet.add(fact.createToolchain(toolchainModel));            }        }                ToolchainPrivate tool = fact.createDefaultToolchain();        if (tool != null) {            toRet.add(tool);        }    }    return toRet.toArray(new ToolchainPrivate[0]);}
d777c159d65ab205f6732a45346be88df9b21df6a5314025da0cd843c0b39e96
storeToolchainToBuildContext
public void storeToolchainToBuildContext(ToolchainPrivate toolchain, MavenSession session)
{    Map<String, Object> context = retrieveContext(session);    context.put(getStorageKey(toolchain.getType()), toolchain.getModel());}
27e9da33ea77734b0cd71a0b8407cd468f5db87baa8a2c59f3d4457d884c390d
build
public PersistedToolchains build(File userToolchainsFile) throws MisconfiguredToolchainException
{    PersistedToolchains toolchains = null;    if (userToolchainsFile != null && userToolchainsFile.isFile()) {        try (Reader in = ReaderFactory.newXmlReader(userToolchainsFile)) {            toolchains = new MavenToolchainsXpp3Reader().read(in);        } catch (Exception e) {            throw new MisconfiguredToolchainException("Cannot read toolchains file at " + userToolchainsFile.getAbsolutePath(), e);        }    } else if (userToolchainsFile != null) {        logger.debug("Toolchains configuration was not found at " + userToolchainsFile);    }    return toolchains;}
50e74a8b9e1e66bc1dcc76ee91f056aed22beb9fc99eb2d3197ff8198502211e
read
public PersistedToolchains read(File input, Map<String, ?> options) throws IOException
{    Objects.requireNonNull(input, "input cannot be null");    return read(ReaderFactory.newXmlReader(input), options);}
29d8cb1daf71c3f43d1abe600f9884a07efa8818fa9b29a78b93321bd2e99492
read
public PersistedToolchains read(Reader input, Map<String, ?> options) throws IOException
{    Objects.requireNonNull(input, "input cannot be null");    try (final Reader in = input) {        return new MavenToolchainsXpp3Reader().read(in, isStrict(options));    } catch (XmlPullParserException e) {        throw new ToolchainsParseException(e.getMessage(), e.getLineNumber(), e.getColumnNumber(), e);    }}
b58b9e993d2313593476fccf956778f5bd63bed5db303e2994ca239966d804d9
read
public PersistedToolchains read(InputStream input, Map<String, ?> options) throws IOException
{    Objects.requireNonNull(input, "input cannot be null");    try (final InputStream in = input) {        return new MavenToolchainsXpp3Reader().read(in, isStrict(options));    } catch (XmlPullParserException e) {        throw new ToolchainsParseException(e.getMessage(), e.getLineNumber(), e.getColumnNumber(), e);    }}
6c7fea5c07553d4dd29f26b80b3a43d5b3576e5ae38d612c87b5e80f010983ed
isStrict
private boolean isStrict(Map<String, ?> options)
{    Object value = (options != null) ? options.get(IS_STRICT) : null;    return value == null || Boolean.parseBoolean(value.toString());}
f9bbc5fc8eb64cc2ef6f9643b272fc54b9e00f45b86693612711111a90f6b964
write
public void write(Writer output, Map<String, Object> options, PersistedToolchains toolchains) throws IOException
{    Objects.requireNonNull(output, "output cannot be null");    Objects.requireNonNull(toolchains, "toolchains cannot be null");    try (final Writer out = output) {        new MavenToolchainsXpp3Writer().write(out, toolchains);    }}
d0206afdd4bbfbca49378097e83c12789d7836ac6e56572eee8d2abd20c4c84d
getLineNumber
public int getLineNumber()
{    return lineNumber;}
de418c2b40b113f31f0e80a27291a5fc9f70e24067ed5b3ab5871ddcb04ceb6e
getColumnNumber
public int getColumnNumber()
{    return columnNumber;}
a5a1bec14e46b83f4bad1fee150ee5237604b90326a698bfafe882c31442b59b
getJavaHome
public String getJavaHome()
{    return super.getJavaHome();}
61f3fda74d869fc6d5e7632107bc9f0a1cce353871fd08eb702d40c12c34b87f
setJavaHome
public void setJavaHome(String javaHome)
{    super.setJavaHome(javaHome);}
3a668b263a0861b1c86ddac435a0bf28545f04814cf96ad5c42a0329784045fb
createToolchain
public ToolchainPrivate createToolchain(ToolchainModel model) throws MisconfiguredToolchainException
{    if (model == null) {        return null;    }        @SuppressWarnings("deprecation")    JavaToolchainImpl jtc = new DefaultJavaToolChain(model, logger);        Properties provides = model.getProvides();    for (Entry<Object, Object> provide : provides.entrySet()) {        String key = (String) provide.getKey();        String value = (String) provide.getValue();        if (value == null) {            throw new MisconfiguredToolchainException("Provides token '" + key + "' doesn't have any value configured.");        }        RequirementMatcher matcher;        if ("version".equals(key)) {            matcher = RequirementMatcherFactory.createVersionMatcher(value);        } else {            matcher = RequirementMatcherFactory.createExactMatcher(value);        }        jtc.addProvideToken(key, matcher);    }        Xpp3Dom dom = (Xpp3Dom) model.getConfiguration();    Xpp3Dom javahome = dom.getChild(JavaToolchainImpl.KEY_JAVAHOME);    if (javahome == null) {        throw new MisconfiguredToolchainException("Java toolchain without the " + JavaToolchainImpl.KEY_JAVAHOME + " configuration element.");    }    File normal = new File(FileUtils.normalize(javahome.getValue()));    if (normal.exists()) {        jtc.setJavaHome(FileUtils.normalize(javahome.getValue()));    } else {        throw new MisconfiguredToolchainException("Non-existing JDK home configuration at " + normal.getAbsolutePath());    }    return jtc;}
de2aeaad7d568fd5549678b1b67ad1dd52ea00bb773f4fa5e0d1e1cc68baa4f2
createDefaultToolchain
public ToolchainPrivate createDefaultToolchain()
{        return null;}
e612cdc48fea06e4de5f115f0edba155942b7baddd36edf6301ea7c5b280a99c
getLogger
protected Logger getLogger()
{    return logger;}
a5a1bec14e46b83f4bad1fee150ee5237604b90326a698bfafe882c31442b59b
getJavaHome
public String getJavaHome()
{    return javaHome;}
61f3fda74d869fc6d5e7632107bc9f0a1cce353871fd08eb702d40c12c34b87f
setJavaHome
public void setJavaHome(String javaHome)
{    this.javaHome = javaHome;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return "JDK[" + getJavaHome() + "]";}
f6af714bd6298caf8ee5f32f9bc3c9fce87dfa22c08698bf513bc5274fbe13a9
findTool
public String findTool(String toolName)
{    File toRet = findTool(toolName, new File(FileUtils.normalize(getJavaHome())));    if (toRet != null) {        return toRet.getAbsolutePath();    }    return null;}
8a29b216514d019d413e343defbca20b43cf885bf45b489758503ff3fbf210b0
findTool
private static File findTool(String toolName, File installFolder)
{        File bin = new File(installFolder, "bin");    if (bin.exists()) {                File tool = new File(bin, toolName + (Os.isFamily("windows") ? ".exe" : ""));        if (tool.exists()) {            return tool;        }    }    return null;}
6720d1259d81e2a7909d83a6cc5cc19a981ae14699e7f55f471f8c46706f47fe
merge
public void merge(PersistedToolchains dominant, PersistedToolchains recessive, String recessiveSourceLevel)
{    if (dominant == null || recessive == null) {        return;    }    recessive.setSourceLevel(recessiveSourceLevel);    shallowMerge(dominant.getToolchains(), recessive.getToolchains(), recessiveSourceLevel);}
b89d2a31be93efc8405bdabbfa94567bbf0ee7da18fd55c67fe374743e1662f2
shallowMerge
private void shallowMerge(List<ToolchainModel> dominant, List<ToolchainModel> recessive, String recessiveSourceLevel)
{    Map<Object, ToolchainModel> merged = new LinkedHashMap<>();    for (ToolchainModel dominantModel : dominant) {        Object key = getToolchainModelKey(dominantModel);        merged.put(key, dominantModel);    }    for (ToolchainModel recessiveModel : recessive) {        Object key = getToolchainModelKey(recessiveModel);        ToolchainModel dominantModel = merged.get(key);        if (dominantModel == null) {            recessiveModel.setSourceLevel(recessiveSourceLevel);            dominant.add(recessiveModel);        } else {            mergeToolchainModelConfiguration(dominantModel, recessiveModel);        }    }}
29b4516c1edf5a17fd25f3bf660ef2b23e6503571b62813538cca9a0aa4f98a7
mergeToolchainModelConfiguration
protected void mergeToolchainModelConfiguration(ToolchainModel target, ToolchainModel source)
{    Xpp3Dom src = (Xpp3Dom) source.getConfiguration();    if (src != null) {        Xpp3Dom tgt = (Xpp3Dom) target.getConfiguration();        if (tgt == null) {            tgt = Xpp3Dom.mergeXpp3Dom(new Xpp3Dom(src), tgt);        } else {            tgt = Xpp3Dom.mergeXpp3Dom(tgt, src);        }        target.setConfiguration(tgt);    }}
4dd1b7b0a7463a010c43fb5ba96e26241db9b71b3fedc1de32d7a8c9dcde15c7
getToolchainModelKey
protected Object getToolchainModelKey(ToolchainModel model)
{    return model;}
dadf39d5558e583bd61f61531b09f93a07878a00e536f693b2cce46be6cacd3d
createExactMatcher
public static RequirementMatcher createExactMatcher(String provideValue)
{    return new ExactMatcher(provideValue);}
ffa0f9571fc27a26de93a2007d75760ef13c27c28430507a1e63297ed9af066c
createVersionMatcher
public static RequirementMatcher createVersionMatcher(String provideValue)
{    return new VersionMatcher(provideValue);}
513c224c1314bd2809977347fd5342b62be7c1c8798d0825d6401356ff4e8883
matches
public boolean matches(String requirement)
{    return provides.equalsIgnoreCase(requirement);}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return provides;}
513c224c1314bd2809977347fd5342b62be7c1c8798d0825d6401356ff4e8883
matches
public boolean matches(String requirement)
{    try {        VersionRange range = VersionRange.createFromVersionSpec(requirement);        if (range.hasRestrictions()) {            return range.containsVersion(version);        } else {            return range.getRecommendedVersion().compareTo(version) == 0;        }    } catch (InvalidVersionSpecificationException ex) {                ex.printStackTrace();        return false;    }}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return version.toString();}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    repositorySystem = lookup(RepositorySystem.class);    projectBuilder = lookup(org.apache.maven.project.ProjectBuilder.class);}
68bbf6c94fbad4862990669ea582b65c28678087c2377b2c3fb0948d54293af4
tearDown
protected void tearDown() throws Exception
{    repositorySystem = null;    projectBuilder = null;    super.tearDown();}
b32b7ecb6b8d0abcd7860d25be9aad7e93636aa48011959e6887fe75ed724b79
getProject
protected File getProject(String name) throws Exception
{    File source = new File(new File(getBasedir(), getProjectsDirectory()), name);    File target = new File(new File(getBasedir(), "target"), name);    FileUtils.copyDirectoryStructureIfModified(source, target);    return new File(target, "pom.xml");}
d57c1d7022b9b24e5d6471b55681e866b61cc2646c5e5e41baf69039be0b670b
customizeContainerConfiguration
protected void customizeContainerConfiguration(ContainerConfiguration containerConfiguration)
{    containerConfiguration.setAutoWiring(true).setClassPathScanning(PlexusConstants.SCANNING_INDEX);}
5773884323b8788e5041a5f30a6b5c392cca57463064245d27f758d63159e561
createMavenExecutionRequest
protected MavenExecutionRequest createMavenExecutionRequest(File pom) throws Exception
{    MavenExecutionRequest request = new DefaultMavenExecutionRequest().setPom(pom).setProjectPresent(true).setShowErrors(true).setPluginGroups(Arrays.asList("org.apache.maven.plugins")).setLocalRepository(getLocalRepository()).setRemoteRepositories(getRemoteRepositories()).setPluginArtifactRepositories(getPluginArtifactRepositories()).setGoals(Arrays.asList("package"));    return request;}
8f245a3305c377ee0b699368c9ad56ad4c602dc296223cc19af4a4f7aadf40e8
createMavenSession
protected MavenSession createMavenSession(File pom) throws Exception
{    return createMavenSession(pom, new Properties());}
35aaf9f6d37537b9c5c6fa6799e6098220fba29ab5e33d358848c3e1ebb70b80
createMavenSession
protected MavenSession createMavenSession(File pom, Properties executionProperties) throws Exception
{    return createMavenSession(pom, executionProperties, false);}
b8c128841406060cd901d0813fa7b66612820783114b39c1841049143cc3c791
createMavenSession
protected MavenSession createMavenSession(File pom, Properties executionProperties, boolean includeModules) throws Exception
{    MavenExecutionRequest request = createMavenExecutionRequest(pom);    ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest().setLocalRepository(request.getLocalRepository()).setRemoteRepositories(request.getRemoteRepositories()).setPluginArtifactRepositories(request.getPluginArtifactRepositories()).setSystemProperties(executionProperties);    List<MavenProject> projects = new ArrayList<>();    if (pom != null) {        MavenProject project = projectBuilder.build(pom, configuration).getProject();        projects.add(project);        if (includeModules) {            for (String module : project.getModules()) {                File modulePom = new File(pom.getParentFile(), module);                if (modulePom.isDirectory()) {                    modulePom = new File(modulePom, "pom.xml");                }                projects.add(projectBuilder.build(modulePom, configuration).getProject());            }        }    } else {        MavenProject project = createStubMavenProject();        project.setRemoteArtifactRepositories(request.getRemoteRepositories());        project.setPluginArtifactRepositories(request.getPluginArtifactRepositories());        projects.add(project);    }    initRepoSession(configuration);    MavenSession session = new MavenSession(getContainer(), configuration.getRepositorySession(), request, new DefaultMavenExecutionResult());    session.setProjects(projects);    session.setAllProjects(session.getProjects());    return session;}
31805ac07be41d13da9f1a289d347b63343515cc7ebdcc25a08600bb5642935e
initRepoSession
protected void initRepoSession(ProjectBuildingRequest request) throws Exception
{    File localRepoDir = new File(request.getLocalRepository().getBasedir());    LocalRepository localRepo = new LocalRepository(localRepoDir);    DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();    session.setLocalRepositoryManager(new SimpleLocalRepositoryManagerFactory().newInstance(session, localRepo));    request.setRepositorySession(session);}
423ce3cd81ac1207fc7a461b7c530f48c25a6b9fd0472964d260cf6856d83922
createStubMavenProject
protected MavenProject createStubMavenProject()
{    Model model = new Model();    model.setGroupId("org.apache.maven.test");    model.setArtifactId("maven-test");    model.setVersion("1.0");    return new MavenProject(model);}
15e282c960ecb4737308027786a59f75b870b65e3308ce8fdb87e53537585069
getRemoteRepositories
protected List<ArtifactRepository> getRemoteRepositories() throws InvalidRepositoryException
{    File repoDir = new File(getBasedir(), "src/test/remote-repo").getAbsoluteFile();    RepositoryPolicy policy = new RepositoryPolicy();    policy.setEnabled(true);    policy.setChecksumPolicy("ignore");    policy.setUpdatePolicy("always");    Repository repository = new Repository();    repository.setId(RepositorySystem.DEFAULT_REMOTE_REPO_ID);    repository.setUrl("file://" + repoDir.toURI().getPath());    repository.setReleases(policy);    repository.setSnapshots(policy);    return Arrays.asList(repositorySystem.buildArtifactRepository(repository));}
ff5a949b4e5b19478959c04644767dffe3dd3b318f72c83bc15cc605349454d2
getPluginArtifactRepositories
protected List<ArtifactRepository> getPluginArtifactRepositories() throws InvalidRepositoryException
{    return getRemoteRepositories();}
bd55ff32f7095d669be0a554ccfa934905d803fa38b422858b531b7f97d12665
getLocalRepository
protected ArtifactRepository getLocalRepository() throws InvalidRepositoryException
{    File repoDir = new File(getBasedir(), "target/local-repo").getAbsoluteFile();    return repositorySystem.createLocalRepository(repoDir);}
14f2b427d70eb039458b97fe629ae6500b79c148a43a468bdf727520aedfa55d
setGroupId
public ProjectBuilder setGroupId(String groupId)
{    project.setGroupId(groupId);    return this;}
009dd127b38a0d2bfd453315c87653bf184631770c7a1b03f4335000cf62117e
setArtifactId
public ProjectBuilder setArtifactId(String artifactId)
{    project.setArtifactId(artifactId);    return this;}
47b0ccac676fb7dc0566a6506e4d92620688be385b9fb2ecb11b71ce5fe8213b
setVersion
public ProjectBuilder setVersion(String version)
{    project.setVersion(version);    return this;}
15540f0979ac9178ee456c13fae58fc59b11f88652ebdc5090936d7d4a0de4d7
addDependency
public ProjectBuilder addDependency(String groupId, String artifactId, String version, String scope)
{    return addDependency(groupId, artifactId, version, scope, (Exclusion) null);}
c0144e04bd4de48df63458bedba1fecc3b331f16859a740f6d92cee8c66ecdbd
addDependency
public ProjectBuilder addDependency(String groupId, String artifactId, String version, String scope, Exclusion exclusion)
{    return addDependency(groupId, artifactId, version, scope, null, exclusion);}
23bca5f7270603e5644da404b7211a1599e10dbbd7c8352f581826ed250d579a
addDependency
public ProjectBuilder addDependency(String groupId, String artifactId, String version, String scope, String systemPath)
{    return addDependency(groupId, artifactId, version, scope, systemPath, null);}
9401a0be53e5b195999bc3c346fe052bcf79ab739968013df2b5f241253f25d3
addDependency
public ProjectBuilder addDependency(String groupId, String artifactId, String version, String scope, String systemPath, Exclusion exclusion)
{    Dependency d = new Dependency();    d.setGroupId(groupId);    d.setArtifactId(artifactId);    d.setVersion(version);    d.setScope(scope);    if (systemPath != null && scope.equals(Artifact.SCOPE_SYSTEM)) {        d.setSystemPath(systemPath);    }    if (exclusion != null) {        d.addExclusion(exclusion);    }    project.getDependencies().add(d);    return this;}
9ff61ca9ca78b1e4ef7c03a2ea1c377d42f518b3ec3965d0d6d5e512b0005b52
addPlugin
public ProjectBuilder addPlugin(Plugin plugin)
{    project.getBuildPlugins().add(plugin);    return this;}
4906389da7b604c2a53812e4a4b6bb280fda661926d2c0ef95bd15fbd03c2151
get
public MavenProject get()
{    return project;}
74bb5c53dc1eb6ae6c63a41d7036a5e0239c72ebdfa6f4abf93c60a22188f481
testAptConsistency
public void testAptConsistency() throws Exception
{    File apt = getTestFile("src/site/apt/artifact-handlers.apt");    @SuppressWarnings("unchecked")    List<String> lines = FileUtils.loadFile(apt);    for (String line : lines) {        if (line.startsWith("||")) {            String[] cols = line.split("\\|\\|");            String[] expected = new String[] { "", "type", "classifier", "extension", "packaging", "language", "added to classpath", "includesDependencies", "" };            int i = 0;            for (String col : cols) {                assertEquals("Wrong column header", expected[i++], col.trim());            }        } else if (line.startsWith("|")) {            String[] cols = line.split("\\|");            String type = trimApt(cols[1]);            String classifier = trimApt(cols[2]);            String extension = trimApt(cols[3], type);            String packaging = trimApt(cols[4], type);            String language = trimApt(cols[5]);            String addedToClasspath = trimApt(cols[6]);            String includesDependencies = trimApt(cols[7]);            ArtifactHandler handler = lookup(ArtifactHandler.class, type);            assertEquals(type + " extension", handler.getExtension(), extension);            assertEquals(type + " packaging", handler.getPackaging(), packaging);            assertEquals(type + " classifier", handler.getClassifier(), classifier);            assertEquals(type + " language", handler.getLanguage(), language);            assertEquals(type + " addedToClasspath", handler.isAddedToClasspath() ? "true" : null, addedToClasspath);            assertEquals(type + " includesDependencies", handler.isIncludesDependencies() ? "true" : null, includesDependencies);        }    }}
e885b8aafbd25c6d382ecf4048c752ac165e2d92923fe40b8cd64707eecb63be
trimApt
private String trimApt(String content, String type)
{    String value = trimApt(content);    return "= type".equals(value) ? type : value;}
6cf55d38b6d24422947c3505feaa08c798cbe059f38f20fb9064844c4a1e3892
trimApt
private String trimApt(String content)
{    content = content.replace('<', ' ').replace('>', ' ').trim();    return (content.length() == 0) ? null : content;}
5ff0b8f7d2b080bcc6214fa5f91be74727145ea81cacb63a99c8d0f3106c089f
setup
public void setup()
{    artifact = mock(Artifact.class);    when(artifact.getGroupId()).thenReturn("org.apache.maven");    when(artifact.getArtifactId()).thenReturn("maven-core");}
38b146668aeea8a341a62dd8693e1a31d3441bb855132993f6b8ab31659bd2c0
testExcludeExact
public void testExcludeExact()
{    Exclusion exclusion = new Exclusion();    exclusion.setGroupId("org.apache.maven");    exclusion.setArtifactId("maven-core");    ExclusionArtifactFilter filter = new ExclusionArtifactFilter(Collections.singletonList(exclusion));    assertThat(filter.include(artifact), is(false));}
d5ca0db437fb04afcfeafd5abe43b1fe5b9d792edf834b90cbdb24da9f8bbbb9
testExcludeNoMatch
public void testExcludeNoMatch()
{    Exclusion exclusion = new Exclusion();    exclusion.setGroupId("org.apache.maven");    exclusion.setArtifactId("maven-model");    ExclusionArtifactFilter filter = new ExclusionArtifactFilter(Collections.singletonList(exclusion));    assertThat(filter.include(artifact), is(true));}
ba0eb760ea4cd96c387bbba10c4d593d5d9f2c35176f16908c7f129d304b1975
testExcludeGroupIdWildcard
public void testExcludeGroupIdWildcard()
{    Exclusion exclusion = new Exclusion();    exclusion.setGroupId("*");    exclusion.setArtifactId("maven-core");    ExclusionArtifactFilter filter = new ExclusionArtifactFilter(Collections.singletonList(exclusion));    assertThat(filter.include(artifact), is(false));}
62424e33a95a40c5a2e55a90c1b06cf8fdcb3a31d4250d12fdb091d11c4eb5fe
testExcludeGroupIdWildcardNoMatch
public void testExcludeGroupIdWildcardNoMatch()
{    Exclusion exclusion = new Exclusion();    exclusion.setGroupId("*");    exclusion.setArtifactId("maven-compat");    ExclusionArtifactFilter filter = new ExclusionArtifactFilter(Collections.singletonList(exclusion));    assertThat(filter.include(artifact), is(true));}
54c0dc1437501eeefd4a0fa694696ebe0d2aadf0ba05754803d2e54cd5f31ba3
testExcludeArtifactIdWildcard
public void testExcludeArtifactIdWildcard()
{    Exclusion exclusion = new Exclusion();    exclusion.setGroupId("org.apache.maven");    exclusion.setArtifactId("*");    ExclusionArtifactFilter filter = new ExclusionArtifactFilter(Collections.singletonList(exclusion));    assertThat(filter.include(artifact), is(false));}
25cdf0f9a716b2ec79530dd3db0d7038c2a35ecb98bcb6f5ed26afd55877e2c9
testExcludeArtifactIdWildcardNoMatch
public void testExcludeArtifactIdWildcardNoMatch()
{    Exclusion exclusion = new Exclusion();    exclusion.setGroupId("org.apache.groovy");    exclusion.setArtifactId("*");    ExclusionArtifactFilter filter = new ExclusionArtifactFilter(Collections.singletonList(exclusion));    assertThat(filter.include(artifact), is(true));}
82f3421fcb79e5edb85e6cda03d06feded132843d41f72bfdc8620faa6a79b82
testExcludeAllWildcard
public void testExcludeAllWildcard()
{    Exclusion exclusion = new Exclusion();    exclusion.setGroupId("*");    exclusion.setArtifactId("*");    ExclusionArtifactFilter filter = new ExclusionArtifactFilter(Collections.singletonList(exclusion));    assertThat(filter.include(artifact), is(false));}
64e9f07187dc67fa62553e97508614aba79e75780cea944c5dbac1d5d1851634
testMultipleExclusionsExcludeArtifactIdWildcard
public void testMultipleExclusionsExcludeArtifactIdWildcard()
{    Exclusion exclusion1 = new Exclusion();    exclusion1.setGroupId("org.apache.groovy");    exclusion1.setArtifactId("*");    Exclusion exclusion2 = new Exclusion();    exclusion2.setGroupId("org.apache.maven");    exclusion2.setArtifactId("maven-core");    ExclusionArtifactFilter filter = new ExclusionArtifactFilter(Arrays.asList(exclusion1, exclusion2));    assertThat(filter.include(artifact), is(false));}
d7ec93a635982c44daf815c3ea2c780e9b573dab13572082c4f1661d3fdf3b4c
testMultipleExclusionsExcludeGroupIdWildcard
public void testMultipleExclusionsExcludeGroupIdWildcard()
{    Exclusion exclusion1 = new Exclusion();    exclusion1.setGroupId("*");    exclusion1.setArtifactId("maven-model");    Exclusion exclusion2 = new Exclusion();    exclusion2.setGroupId("org.apache.maven");    exclusion2.setArtifactId("maven-core");    ExclusionArtifactFilter filter = new ExclusionArtifactFilter(Arrays.asList(exclusion1, exclusion2));    assertThat(filter.include(artifact), is(false));}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();    configurator = lookup(BeanConfigurator.class);}
68bbf6c94fbad4862990669ea582b65c28678087c2377b2c3fb0948d54293af4
tearDown
protected void tearDown() throws Exception
{    configurator = null;    super.tearDown();}
267770d3b68e8c534ea3dd3e7639e00f5e420136e04df911b27be062cfd0cd84
toConfig
private Xpp3Dom toConfig(String xml)
{    try {        return Xpp3DomBuilder.build(new StringReader("<configuration>" + xml + "</configuration>"));    } catch (XmlPullParserException | IOException e) {        throw new IllegalArgumentException(e);    }}
943e57755732b674be9674ab046473fa64fea6e20f52dcea8b7ab7253229dfdc
testMinimal
public void testMinimal() throws BeanConfigurationException
{    SomeBean bean = new SomeBean();    Xpp3Dom config = toConfig("<file>test</file>");    DefaultBeanConfigurationRequest request = new DefaultBeanConfigurationRequest();    request.setBean(bean).setConfiguration(config);    configurator.configureBean(request);    assertEquals(new File("test"), bean.file);}
20132931ad83fe6e1e1624a6e2ac2d1b2b862a20bff008913fb20739a9f70707
testPreAndPostProcessing
public void testPreAndPostProcessing() throws BeanConfigurationException
{    SomeBean bean = new SomeBean();    Xpp3Dom config = toConfig("<file>${test}</file>");    BeanConfigurationValuePreprocessor preprocessor = new BeanConfigurationValuePreprocessor() {        public Object preprocessValue(String value, Class<?> type) throws BeanConfigurationException {            if (value != null && value.startsWith("${") && value.endsWith("}")) {                return value.substring(2, value.length() - 1);            }            return value;        }    };    BeanConfigurationPathTranslator translator = new BeanConfigurationPathTranslator() {        public File translatePath(File path) {            return new File("base", path.getPath()).getAbsoluteFile();        }    };    DefaultBeanConfigurationRequest request = new DefaultBeanConfigurationRequest();    request.setBean(bean).setConfiguration(config);    request.setValuePreprocessor(preprocessor).setPathTranslator(translator);    configurator.configureBean(request);    assertEquals(new File("base/test").getAbsoluteFile(), bean.file);}
e9f8e937ad93a7dae4e0a3ad8595e6031f6a6c21e1cbf6f4e81025a83e5f0ca7
preprocessValue
public Object preprocessValue(String value, Class<?> type) throws BeanConfigurationException
{    if (value != null && value.startsWith("${") && value.endsWith("}")) {        return value.substring(2, value.length() - 1);    }    return value;}
9cdfc560c47f6b09e5d271201bed26d1dabc869293b8c4729e4082d6cbba2bab
translatePath
public File translatePath(File path)
{    return new File("base", path.getPath()).getAbsoluteFile();}
efcebf591b9d2495c03428de4742d94ae991a5a7859dbbddfca3efb70fedb668
testChildConfigurationElement
public void testChildConfigurationElement() throws BeanConfigurationException
{    SomeBean bean = new SomeBean();    Xpp3Dom config = toConfig("<wrapper><file>test</file></wrapper>");    DefaultBeanConfigurationRequest request = new DefaultBeanConfigurationRequest();    request.setBean(bean).setConfiguration(config, "wrapper");    configurator.configureBean(request);    assertEquals(new File("test"), bean.file);}
387641d5e8a23aa48a0d06660a40bf529786415007d142579939bee5d2d4c5a0
testThatErrorDuringProjectDependencyGraphCreationAreStored
public void testThatErrorDuringProjectDependencyGraphCreationAreStored() throws Exception
{    Maven maven = getContainer().lookup(Maven.class);    MavenExecutionRequest request = createMavenExecutionRequest(getProject("cyclic-reference")).setGoals(asList("validate"));    MavenExecutionResult result = maven.execute(request);    assertEquals(ProjectCycleException.class, result.getExceptions().get(0).getClass());}
5cb41634139dccbc03acc9c3d530014417a0a8675a81e3d64379b8ce64bb81b2
getProjectsDirectory
protected String getProjectsDirectory()
{    return "src/test/projects/default-maven";}
48a73dda978e16423c8193764cf437326d0de980309c84db3d107be8fbddf44e
testJdk7ipv6
public void testJdk7ipv6()
{    ConnectException connEx = new ConnectException("Connection refused: connect");    IOException ioEx = new IOException("Unable to establish loopback connection", connEx);    MojoExecutionException mojoEx = new MojoExecutionException("Error executing Jetty: Unable to establish loopback connection", ioEx);    ExceptionHandler exceptionHandler = new DefaultExceptionHandler();    ExceptionSummary exceptionSummary = exceptionHandler.handleException(mojoEx);    String expectedReference = "http://cwiki.apache.org/confluence/display/MAVEN/ConnectException";    assertEquals(expectedReference, exceptionSummary.getReference());}
616ac7f78f0ee8535bc0616758f485e901b8710fdc6f4f1db9b958c94af0b6c1
testHandleExceptionAetherClassNotFound
public void testHandleExceptionAetherClassNotFound()
{    Throwable cause2 = new NoClassDefFoundError("org/sonatype/aether/RepositorySystem");    Plugin plugin = new Plugin();    Exception cause = new PluginContainerException(plugin, null, null, cause2);    PluginDescriptor pluginDescriptor = new PluginDescriptor();    MojoDescriptor mojoDescriptor = new MojoDescriptor();    mojoDescriptor.setPluginDescriptor(pluginDescriptor);    MojoExecution mojoExecution = new MojoExecution(mojoDescriptor);    Throwable exception = new PluginExecutionException(mojoExecution, null, cause);    DefaultExceptionHandler handler = new DefaultExceptionHandler();    ExceptionSummary summary = handler.handleException(exception);    String expectedReference = "http://cwiki.apache.org/confluence/display/MAVEN/AetherClassNotFound";    assertEquals(expectedReference, summary.getReference());}
f988743ed9c9a8c31f05df86ac05b1e50e6b0cfea8d1e6972c2eb14c31e996af
testHandleExceptionNoClassDefFoundErrorNull
public void testHandleExceptionNoClassDefFoundErrorNull()
{    Throwable cause2 = new NoClassDefFoundError();    Plugin plugin = new Plugin();    Exception cause = new PluginContainerException(plugin, null, null, cause2);    PluginDescriptor pluginDescriptor = new PluginDescriptor();    MojoDescriptor mojoDescriptor = new MojoDescriptor();    mojoDescriptor.setPluginDescriptor(pluginDescriptor);    MojoExecution mojoExecution = new MojoExecution(mojoDescriptor);    Throwable exception = new PluginExecutionException(mojoExecution, null, cause);    DefaultExceptionHandler handler = new DefaultExceptionHandler();    ExceptionSummary summary = handler.handleException(exception);    String expectedReference = "http://cwiki.apache.org/confluence/display/MAVEN/PluginContainerException";    assertEquals(expectedReference, summary.getReference());}
ddd3abbf8ed31c058e67793cb5dcf338fe6882681f8bc64b15e87c5f27c6a1ab
testPluginRepositoryInjection
public void testPluginRepositoryInjection() throws Exception
{    MavenExecutionRequest request = new DefaultMavenExecutionRequest();    Repository r = new Repository();    r.setId("test");    r.setUrl("file:///test");    Profile p = new Profile();    p.setId("test");    p.addPluginRepository(r);    Settings settings = new Settings();    settings.addProfile(p);    settings.addActiveProfile(p.getId());    testee.populateFromSettings(request, settings);    List<ArtifactRepository> repositories = request.getPluginArtifactRepositories();    assertEquals(1, repositories.size());    assertEquals(r.getId(), repositories.get(0).getId());    assertEquals(r.getUrl(), repositories.get(0).getUrl());}
22de9b6ed7ac6106a3ae57ffafc7c98d360bc5391a4819fcb667bc67bb7f3874
testCopyDefault
public void testCopyDefault()
{    MavenExecutionRequest original = new DefaultMavenExecutionRequest();    MavenExecutionRequest copy = DefaultMavenExecutionRequest.copy(original);    assertNotNull(copy);    assertNotSame(copy, original);}
23612a0bf41630f2054e17b147bc55ac2d2c7add73805486ee6da4568701c003
testResultWithNullTopologicallySortedProjectsIsEmptyList
public void testResultWithNullTopologicallySortedProjectsIsEmptyList()
{    MavenExecutionResult result = new DefaultMavenExecutionResult();    result.setTopologicallySortedProjects(null);    List<MavenProject> projects = result.getTopologicallySortedProjects();    assertNotNull(projects);    assertTrue(projects.isEmpty());}
c8d3bc974aae4e29b976ab84906f60a26b41fd80377e0c4219b042644b369206
testNestedEnter
public void testNestedEnter() throws Exception
{    MojoExecutionScope scope = new MojoExecutionScope();    scope.enter();    Object o1 = new Object();    scope.seed(Object.class, o1);    assertSame(o1, scope.scope(Key.get(Object.class), null).get());    scope.enter();    Object o2 = new Object();    scope.seed(Object.class, o2);    assertSame(o2, scope.scope(Key.get(Object.class), null).get());    scope.exit();    assertSame(o1, scope.scope(Key.get(Object.class), null).get());    scope.exit();    try {        scope.exit();        fail();    } catch (IllegalStateException expected) {    }}
735ea883abe96dfd9a5064dfeedd5499986b5ff729243ed47596c826fd47fd26
testMultiKeyInstance
public void testMultiKeyInstance() throws Exception
{    MojoExecutionScope scope = new MojoExecutionScope();    scope.enter();    final AtomicInteger beforeExecution = new AtomicInteger();    final AtomicInteger afterExecutionSuccess = new AtomicInteger();    final AtomicInteger afterExecutionFailure = new AtomicInteger();    final WeakMojoExecutionListener instance = new WeakMojoExecutionListener() {        @Override        public void beforeMojoExecution(MojoExecutionEvent event) throws MojoExecutionException {            beforeExecution.incrementAndGet();        }        @Override        public void afterMojoExecutionSuccess(MojoExecutionEvent event) throws MojoExecutionException {            afterExecutionSuccess.incrementAndGet();        }        @Override        public void afterExecutionFailure(MojoExecutionEvent event) {            afterExecutionFailure.incrementAndGet();        }    };    assertSame(instance, scope.scope(Key.get(Object.class), new Provider<Object>() {        @Override        public Object get() {            return instance;        }    }).get());    assertSame(instance, scope.scope(Key.get(WeakMojoExecutionListener.class), new Provider<WeakMojoExecutionListener>() {        @Override        public WeakMojoExecutionListener get() {            return instance;        }    }).get());    final MojoExecutionEvent event = new MojoExecutionEvent(null, null, null, null);    scope.beforeMojoExecution(event);    scope.afterMojoExecutionSuccess(event);    scope.afterExecutionFailure(event);    assertEquals(1, beforeExecution.get());    assertEquals(1, afterExecutionSuccess.get());    assertEquals(1, afterExecutionFailure.get());    scope.exit();}
1d6e13f31541661fe5145780de30d54a71cb871a2779410243b78fff5482ba95
beforeMojoExecution
public void beforeMojoExecution(MojoExecutionEvent event) throws MojoExecutionException
{    beforeExecution.incrementAndGet();}
c540c18000ae2dd7a797635f058a6aefc5bf7d27fde2f8cec0e6b58ab7af62f3
afterMojoExecutionSuccess
public void afterMojoExecutionSuccess(MojoExecutionEvent event) throws MojoExecutionException
{    afterExecutionSuccess.incrementAndGet();}
a1ffbcc3ebfda4ce7f644850464e6aaf0a9cc0e544556c4d3ca31130ded7d890
afterExecutionFailure
public void afterExecutionFailure(MojoExecutionEvent event)
{    afterExecutionFailure.incrementAndGet();}
7879542e1c9692937bb06c057e45be2786184b48bff93d8e155d0e61dbdf105b
get
public Object get()
{    return instance;}
d717d36fadef8539c3c3551ac845feec9ebbc5da01298960bbf18f9ac3e14470
get
public WeakMojoExecutionListener get()
{    return instance;}
9f66fc2692c843bfeaa8bdca7c57520405756e00a27980a8baaff6f0cf6b8130
testGetSortedProjects
public void testGetSortedProjects() throws DuplicateProjectException, CycleDetectedException
{    ProjectDependencyGraph graph = new DefaultProjectDependencyGraph(Arrays.asList(depender1, aProject));    final List<MavenProject> sortedProjects = graph.getSortedProjects();    assertEquals(aProject, sortedProjects.get(0));    assertEquals(depender1, sortedProjects.get(1));}
38802082e587d78e785a1e28d728b4b3db1dbba93292142fb9023f739254d9cc
testVerifyExpectedParentStructure
public void testVerifyExpectedParentStructure() throws CycleDetectedException, DuplicateProjectException
{        ProjectDependencyGraph graph = threeProjectsDependingOnASingle();    final List<MavenProject> sortedProjects = graph.getSortedProjects();    assertEquals(aProject, sortedProjects.get(0));    assertEquals(depender1, sortedProjects.get(1));    assertEquals(depender2, sortedProjects.get(2));    assertEquals(depender3, sortedProjects.get(3));}
f28b9b61d64ae1d185905eb5569aed52fc5502b1aeffec0d6ec4bd4012d92f3c
testVerifyThatDownstreamProjectsComeInSortedOrder
public void testVerifyThatDownstreamProjectsComeInSortedOrder() throws CycleDetectedException, DuplicateProjectException
{    final List<MavenProject> downstreamProjects = threeProjectsDependingOnASingle().getDownstreamProjects(aProject, true);    assertEquals(depender1, downstreamProjects.get(0));    assertEquals(depender2, downstreamProjects.get(1));    assertEquals(depender3, downstreamProjects.get(2));}
ebda0d2d5e656cbfe8cc6c10bc1c43f55ebc08695153a05a81ebe27a99c1468d
testTransitivesInOrder
public void testTransitivesInOrder() throws CycleDetectedException, DuplicateProjectException
{    final ProjectDependencyGraph graph = new DefaultProjectDependencyGraph(Arrays.asList(depender1, depender4, depender2, depender3, aProject));    final List<MavenProject> downstreamProjects = graph.getDownstreamProjects(aProject, true);    assertEquals(depender1, downstreamProjects.get(0));    assertEquals(depender3, downstreamProjects.get(1));    assertEquals(depender4, downstreamProjects.get(2));    assertEquals(depender2, downstreamProjects.get(3));}
826782502eba879c9ac1cf41dd60b4c20d38ef48403e35af216a32e1a35e797c
testNonTransitivesInOrder
public void testNonTransitivesInOrder() throws CycleDetectedException, DuplicateProjectException
{    final ProjectDependencyGraph graph = new DefaultProjectDependencyGraph(Arrays.asList(depender1, depender4, depender2, depender3, aProject));    final List<MavenProject> downstreamProjects = graph.getDownstreamProjects(aProject, false);    assertEquals(depender1, downstreamProjects.get(0));    assertEquals(depender3, downstreamProjects.get(1));    assertEquals(depender4, downstreamProjects.get(2));    assertEquals(depender2, downstreamProjects.get(3));}
a0fd1ca881071885a53666785faf98ad187cc23d045404011d5094175d93e3a7
testWithTransitiveOnly
public void testWithTransitiveOnly() throws CycleDetectedException, DuplicateProjectException
{    final ProjectDependencyGraph graph = new DefaultProjectDependencyGraph(Arrays.asList(depender1, transitiveOnly, depender2, depender3, aProject));    final List<MavenProject> downstreamProjects = graph.getDownstreamProjects(aProject, true);    assertEquals(depender1, downstreamProjects.get(0));    assertEquals(depender3, downstreamProjects.get(1));    assertEquals(transitiveOnly, downstreamProjects.get(2));    assertEquals(depender2, downstreamProjects.get(3));}
839d547b2249c60c7748e31cd97459ac005c4f5b6ebe371b97af9d24215807d6
testWithMissingTransitiveOnly
public void testWithMissingTransitiveOnly() throws CycleDetectedException, DuplicateProjectException
{    final ProjectDependencyGraph graph = new DefaultProjectDependencyGraph(Arrays.asList(depender1, transitiveOnly, depender2, depender3, aProject));    final List<MavenProject> downstreamProjects = graph.getDownstreamProjects(aProject, false);    assertEquals(depender1, downstreamProjects.get(0));    assertEquals(depender3, downstreamProjects.get(1));    assertEquals(depender2, downstreamProjects.get(2));}
e18e105ca29aed919bb82d913e01a0622deb1de6613309bc9c5c0a6f478aa1fe
testGetUpstreamProjects
public void testGetUpstreamProjects() throws CycleDetectedException, DuplicateProjectException
{    ProjectDependencyGraph graph = threeProjectsDependingOnASingle();    final List<MavenProject> downstreamProjects = graph.getUpstreamProjects(depender1, true);    assertEquals(aProject, downstreamProjects.get(0));}
8aa41646fdf21a29c8f806cd415e50c4bc2ab7469786110fd91e7c465b033437
threeProjectsDependingOnASingle
private ProjectDependencyGraph threeProjectsDependingOnASingle() throws CycleDetectedException, DuplicateProjectException
{    return new DefaultProjectDependencyGraph(Arrays.asList(depender1, depender2, depender3, aProject));}
4c4577258321ea43479a1a24f302582388c4452951577e29b138bd44c24bb4f9
createA
private static MavenProject createA()
{    MavenProject result = new MavenProject();    result.setGroupId("org.apache");    result.setArtifactId("A");    result.setVersion("1.2");    return result;}
3797294603d06a519ecd38eba5d5dcccb407e5f0abff64f0894a66776ab00be3
toDependency
 static Dependency toDependency(MavenProject mavenProject)
{    final Dependency dependency = new Dependency();    dependency.setArtifactId(mavenProject.getArtifactId());    dependency.setGroupId(mavenProject.getGroupId());    dependency.setVersion(mavenProject.getVersion());    return dependency;}
545ce581b856e6809b2264d050f3ae2b8f1e11641bb1d4c46686746fd7ff3800
createProject
private static MavenProject createProject(List<Dependency> dependencies, String artifactId)
{    MavenProject result = new MavenProject();    result.setGroupId("org.apache");    result.setArtifactId(artifactId);    result.setVersion("1.2");    result.setDependencies(dependencies);    return result;}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();    defaultLifeCycles = lookup(DefaultLifecycles.class);}
68bbf6c94fbad4862990669ea582b65c28678087c2377b2c3fb0948d54293af4
tearDown
protected void tearDown() throws Exception
{    defaultLifeCycles = null;    super.tearDown();}
3c5150be6958b21d2400f5f0ae23b9fbe7e9412cca6a681e5bc9af74fc2235c0
testLifecycle
public void testLifecycle() throws Exception
{    final List<Lifecycle> cycles = defaultLifeCycles.getLifeCycles();    assertNotNull(cycles);    final Lifecycle lifecycle = cycles.get(0);    assertEquals("default", lifecycle.getId());    assertEquals(23, lifecycle.getPhases().size());}
1d6e13f31541661fe5145780de30d54a71cb871a2779410243b78fff5482ba95
beforeMojoExecution
public void beforeMojoExecution(MojoExecutionEvent event) throws MojoExecutionException
{    for (MojoExecutionListener listener : listeners) {        listener.beforeMojoExecution(event);    }}
c540c18000ae2dd7a797635f058a6aefc5bf7d27fde2f8cec0e6b58ab7af62f3
afterMojoExecutionSuccess
public void afterMojoExecutionSuccess(MojoExecutionEvent event) throws MojoExecutionException
{    for (MojoExecutionListener listener : listeners) {        listener.afterMojoExecutionSuccess(event);    }}
a1ffbcc3ebfda4ce7f644850464e6aaf0a9cc0e544556c4d3ca31130ded7d890
afterExecutionFailure
public void afterExecutionFailure(MojoExecutionEvent event)
{    for (MojoExecutionListener listener : listeners) {        listener.afterExecutionFailure(event);    }}
8786904cb891e1993ebe72b71db25a009a059a5a1039fef1ff88542756396eba
addMojoExecutionListener
public void addMojoExecutionListener(MojoExecutionListener listener)
{    this.listeners.add(listener);}
e0e207b93ac03eb3d3407aa91e1564c880642d513b6da13730b7067d36900e41
removeMojoExecutionListener
public void removeMojoExecutionListener(MojoExecutionListener listener)
{    this.listeners.remove(listener);}
bc03a8cbbe8c058b62972712e49ae0297734812b2845987e21840bb9d8a0bb35
beforeProjectExecution
public void beforeProjectExecution(ProjectExecutionEvent event) throws LifecycleExecutionException
{    for (ProjectExecutionListener listener : listeners) {        listener.beforeProjectExecution(event);    }}
fe1cc24f207e06fcf8126b6728d51e29bf6a81ed4c6c7ca150e00938087eeb50
beforeProjectLifecycleExecution
public void beforeProjectLifecycleExecution(ProjectExecutionEvent event) throws LifecycleExecutionException
{    for (ProjectExecutionListener listener : listeners) {        listener.beforeProjectLifecycleExecution(event);    }}
084a5caee7db5136abb1db4a0093438a0e4f6f8a151216423eb95db3f69ea360
afterProjectExecutionSuccess
public void afterProjectExecutionSuccess(ProjectExecutionEvent event) throws LifecycleExecutionException
{    for (ProjectExecutionListener listener : listeners) {        listener.afterProjectExecutionSuccess(event);    }}
515cb1daced4439666ef611def0e2af8dc95d02a6fcc4bb0121dcf7c36df1489
afterProjectExecutionFailure
public void afterProjectExecutionFailure(ProjectExecutionEvent event)
{    for (ProjectExecutionListener listener : listeners) {        listener.afterProjectExecutionFailure(event);    }}
919c1f9e1854ec7ca55f43d960fd3916c0faed0807b5f7c562e5c6d0ee9fb550
addProjectExecutionListener
public void addProjectExecutionListener(ProjectExecutionListener listener)
{    this.listeners.add(listener);}
7f5d842b14c8c9b4ed46dd849dea1baa59cfac60fdc3cacd7f8f2eae5fe72e0c
removeProjectExecutionListener
public void removeProjectExecutionListener(ProjectExecutionListener listener)
{    this.listeners.remove(listener);}
afe8893888899b4a1f5ffc4906aebf4423c24f4d95f5e841bac29e33af7cd44d
getPluginsBoundByDefaultToAllLifecycles
public Set<Plugin> getPluginsBoundByDefaultToAllLifecycles(String packaging)
{    Set<Plugin> plugins;        if ("JAR".equals(packaging)) {        plugins = new LinkedHashSet<>();        plugins.add(newPlugin("maven-compiler-plugin", "compile", "testCompile"));        plugins.add(newPlugin("maven-resources-plugin", "resources", "testResources"));        plugins.add(newPlugin("maven-surefire-plugin", "test"));        plugins.add(newPlugin("maven-jar-plugin", "jar"));        plugins.add(newPlugin("maven-install-plugin", "install"));        plugins.add(newPlugin("maven-deploy-plugin", "deploy"));    } else {        plugins = Collections.emptySet();    }    return plugins;}
356be6482821e77782dbf2ac6a8e53e29604e3006ee24e251a61e242114c6cc8
newPlugin
private Plugin newPlugin(String artifactId, String... goals)
{    Plugin plugin = new Plugin();    plugin.setGroupId("org.apache.maven.plugins");    plugin.setArtifactId(artifactId);    for (String goal : goals) {        PluginExecution pluginExecution = new PluginExecution();        pluginExecution.setId("default-" + goal);        pluginExecution.addGoal(goal);        plugin.addExecution(pluginExecution);    }    return plugin;}
cba21661fe385ecc75ff57bb2a2f77b30f0a209d0a9027f70fb0968075ffa622
testGraph
public void testGraph() throws Exception
{    ProjectBuildList projectBuildList = ProjectDependencyGraphStub.getProjectBuildList(ProjectDependencyGraphStub.getMavenSession());    ProjectDependencyGraph projectDependencyGraph = new ProjectDependencyGraphStub();    ConcurrencyDependencyGraph graph = new ConcurrencyDependencyGraph(projectBuildList, projectDependencyGraph);        assertEquals(0, graph.getFinishedProjects().size());    assertEquals(6, graph.getNumberOfBuilds());    List<MavenProject> rootSchedulableBuilds = graph.getRootSchedulableBuilds();        assertEquals(1, rootSchedulableBuilds.size());    assertEquals(ProjectDependencyGraphStub.A, rootSchedulableBuilds.iterator().next());        List<MavenProject> dependenciesA = graph.getDependencies(ProjectDependencyGraphStub.A);    assertEquals(0, dependenciesA.size());    assertEquals(6, graph.getUnfinishedProjects().size());    List<MavenProject> schedulableNewProcesses = graph.markAsFinished(ProjectDependencyGraphStub.A);        assertEquals(2, schedulableNewProcesses.size());    assertEquals(1, graph.getFinishedProjects().size());    graph.markAsFinished(ProjectDependencyGraphStub.A);        assertEquals(1, graph.getFinishedProjects().size());    Set<MavenProject> unfinishedProjects = graph.getUnfinishedProjects();    assertEquals(5, unfinishedProjects.size());    graph.markAsFinished(schedulableNewProcesses.get(0));    assertEquals(2, graph.getFinishedProjects().size());    assertEquals(4, graph.getUnfinishedProjects().size());    List<MavenProject> dependenciesC = graph.getDependencies(ProjectDependencyGraphStub.C);        assertEquals(1, dependenciesC.size());    List<MavenProject> dependenciesX = graph.getDependencies(ProjectDependencyGraphStub.X);        assertEquals(2, dependenciesX.size());    List<MavenProject> activeDependenciesC = graph.getActiveDependencies(ProjectDependencyGraphStub.C);        assertEquals(0, activeDependenciesC.size());    List<MavenProject> activeDependenciesX = graph.getActiveDependencies(ProjectDependencyGraphStub.X);        assertEquals(1, activeDependenciesX.size());}
0a748b9bcf323b94c68f0341e4e435b70fe7252fd7abdd625cc3a725d126b888
testSingleThreaded
public void testSingleThreaded() throws Exception
{    ProjectBuildList src = getProjectBuildList();    ProjectBuildList projectBuildList = new ProjectBuildList(Arrays.asList(src.get(0), src.get(1), src.get(2)));    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();    PrintStream systemOut = new PrintStream(byteArrayOutputStream);    ThreadOutputMuxer threadOutputMuxer = new ThreadOutputMuxer(projectBuildList, systemOut);    threadOutputMuxer.associateThreadWithProjectSegment(projectBuildList.get(0));        System.out.print(paid);    assertEquals(paid.length(), byteArrayOutputStream.size());    threadOutputMuxer.associateThreadWithProjectSegment(projectBuildList.get(1));        System.out.print(in);    assertEquals(paid.length(), byteArrayOutputStream.size());    threadOutputMuxer.associateThreadWithProjectSegment(projectBuildList.get(2));        System.out.print(full);    assertEquals(paid.length(), byteArrayOutputStream.size());    threadOutputMuxer.setThisModuleComplete(projectBuildList.get(0));    threadOutputMuxer.setThisModuleComplete(projectBuildList.get(1));    threadOutputMuxer.setThisModuleComplete(projectBuildList.get(2));    threadOutputMuxer.close();    assertEquals((paid + in + full).length(), byteArrayOutputStream.size());}
58f68f837c9fad0a284a880117553893a4e5d592d7bd5506e99d66722e588a1d
testMultiThreaded
public void testMultiThreaded() throws Exception
{    ProjectBuildList projectBuildList = getProjectBuildList();    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();    PrintStream systemOut = new PrintStream(byteArrayOutputStream);    final ThreadOutputMuxer threadOutputMuxer = new ThreadOutputMuxer(projectBuildList, systemOut);    final List<String> stringList = Arrays.asList("Thinkin", "of", "a", "master", "plan", "Cuz", "ain’t", "nuthin", "but", "sweat", "inside", "my", "hand");    Iterator<String> lyrics = stringList.iterator();    ExecutorService executor = Executors.newFixedThreadPool(10);    CompletionService<ProjectSegment> service = new ExecutorCompletionService<>(executor);    List<Future<ProjectSegment>> futures = new ArrayList<>();    for (ProjectSegment projectBuild : projectBuildList) {        final Future<ProjectSegment> buildFuture = service.submit(new Outputter(threadOutputMuxer, projectBuild, lyrics.next()));        futures.add(buildFuture);    }    for (Future<ProjectSegment> future : futures) {        future.get();    }    int expectedLength = 0;    for (int i = 0; i < projectBuildList.size(); i++) {        expectedLength += stringList.get(i).length();    }    threadOutputMuxer.close();    final byte[] bytes = byteArrayOutputStream.toByteArray();    String result = new String(bytes);    assertEquals(result, expectedLength, bytes.length);}
2c01e93f8b677f564c60d8889ef6d46db030201e60193aa5b0c3ea0328614d7f
call
public ProjectSegment call() throws Exception
{    threadOutputMuxer.associateThreadWithProjectSegment(item);    System.out.print(response);    threadOutputMuxer.setThisModuleComplete(item);    return item;}
210fdaa077fb28811511430882e88beef5a3547105d84aae0186b9348c37b804
getProjectBuildList
private ProjectBuildList getProjectBuildList() throws InvalidPluginDescriptorException, PluginVersionResolutionException, PluginDescriptorParsingException, NoPluginFoundForPrefixException, MojoNotFoundException, PluginNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException, LifecycleNotFoundException
{    final MavenSession session = ProjectDependencyGraphStub.getMavenSession();    return ProjectDependencyGraphStub.getProjectBuildList(session);}
f28da26f43e74366b665156c9b88b4bbf3a0ff173d103f06f7b14c00607846c6
testResolveBuildPlan
public void testResolveBuildPlan() throws Exception
{    MavenSession original = ProjectDependencyGraphStub.getMavenSession();    final TaskSegment taskSegment1 = new TaskSegment(false);    final MavenSession session1 = original.clone();    session1.setCurrentProject(ProjectDependencyGraphStub.A);    final BuilderCommon builderCommon = getBuilderCommon();    final MavenExecutionPlan plan = builderCommon.resolveBuildPlan(session1, ProjectDependencyGraphStub.A, taskSegment1, new HashSet<Artifact>());    assertEquals(LifecycleExecutionPlanCalculatorStub.getProjectAExceutionPlan().size(), plan.size());}
171923485d65732b4ed78d80cb64799e30110beb2050f5389522aa484a49607b
testHandleBuildError
public void testHandleBuildError() throws Exception
{}
63ff979d1528e6efff4be633008900fc95bab4d658f56f0880137e6f2c5452fa
testAttachToThread
public void testAttachToThread() throws Exception
{}
bcbac9e3181e96bd63d0da0f26bad8c3a68728ed078bd519a1d373b580beff11
testGetKey
public void testGetKey() throws Exception
{}
c00603426d103175bdd761a1a355c7ca08bd81239b92bcd229676136c6fa1c8f
getBuilderCommon
public static BuilderCommon getBuilderCommon()
{    final LifecycleDebugLogger logger = new LifecycleDebugLogger(new LoggerStub());    return new BuilderCommon(logger, new LifecycleExecutionPlanCalculatorStub(), new LoggerStub());}
131b5454bc2b6e9720539d8a5cb5abfdaebbe0f36ff73f89c4c3f89e23253a74
testCalculateProjectBuilds
public void testCalculateProjectBuilds() throws Exception
{    LifecycleTaskSegmentCalculator lifecycleTaskSegmentCalculator = getTaskSegmentCalculator();    BuildListCalculator buildListCalculator = new BuildListCalculator();    final MavenSession session = ProjectDependencyGraphStub.getMavenSession();    List<TaskSegment> taskSegments = lifecycleTaskSegmentCalculator.calculateTaskSegments(session);    final ProjectBuildList buildList = buildListCalculator.calculateProjectBuilds(session, taskSegments);    final ProjectBuildList segments = buildList.getByTaskSegment(taskSegments.get(0));    assertEquals("Stub data contains 3 segments", 3, taskSegments.size());    assertEquals("Stub data contains 6 items", 6, segments.size());    final ProjectSegment build = segments.get(0);    assertNotNull(build);}
6cc2469712ef9dde3fa54e5d0b8d118a51ed31c146d9eb62758009c2ed499e84
getTaskSegmentCalculator
private static LifecycleTaskSegmentCalculator getTaskSegmentCalculator()
{    return new LifecycleTaskSegmentCalculatorStub();}
75401243b920849267ffe0bb3e5d5184b42129c9df17818bb9d0089dd2225923
testConcurrencyGraphPrimaryVersion
public void testConcurrencyGraphPrimaryVersion() throws InvalidPluginDescriptorException, PluginVersionResolutionException, PluginDescriptorParsingException, NoPluginFoundForPrefixException, MojoNotFoundException, PluginNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException, LifecycleNotFoundException
{    ProjectDependencyGraph dependencyGraph = new ProjectDependencyGraphStub();    final MavenSession session = ProjectDependencyGraphStub.getMavenSession();    ConcurrencyDependencyGraph graph = new ConcurrencyDependencyGraph(getProjectBuildList(session), dependencyGraph);    final List<MavenProject> projectBuilds = graph.getRootSchedulableBuilds();    assertEquals(1, projectBuilds.size());    assertEquals(A, projectBuilds.iterator().next());    final List<MavenProject> subsequent = graph.markAsFinished(A);    assertEquals(2, subsequent.size());    assertEquals(ProjectDependencyGraphStub.B, subsequent.get(0));    assertEquals(C, subsequent.get(1));    final List<MavenProject> bDescendants = graph.markAsFinished(B);    assertEquals(1, bDescendants.size());    assertEquals(Y, bDescendants.get(0));    final List<MavenProject> cDescendants = graph.markAsFinished(C);    assertEquals(2, cDescendants.size());    assertEquals(X, cDescendants.get(0));    assertEquals(Z, cDescendants.get(1));}
35fe57711e8ad45defd4c541417e216e823d963b8b9f38c49fa20c6ce5ea62c1
testConcurrencyGraphDifferentCompletionOrder
public void testConcurrencyGraphDifferentCompletionOrder() throws InvalidPluginDescriptorException, PluginVersionResolutionException, PluginDescriptorParsingException, NoPluginFoundForPrefixException, MojoNotFoundException, PluginNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException, LifecycleNotFoundException
{    ProjectDependencyGraph dependencyGraph = new ProjectDependencyGraphStub();    final MavenSession session = ProjectDependencyGraphStub.getMavenSession();    ConcurrencyDependencyGraph graph = new ConcurrencyDependencyGraph(getProjectBuildList(session), dependencyGraph);    graph.markAsFinished(A);    final List<MavenProject> cDescendants = graph.markAsFinished(C);    assertEquals(1, cDescendants.size());    assertEquals(Z, cDescendants.get(0));    final List<MavenProject> bDescendants = graph.markAsFinished(B);    assertEquals(2, bDescendants.size());    assertEquals(X, bDescendants.get(0));    assertEquals(Y, bDescendants.get(1));}
5cb41634139dccbc03acc9c3d530014417a0a8675a81e3d64379b8ce64bb81b2
getProjectsDirectory
protected String getProjectsDirectory()
{    return null;}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();    resolver = lookup(LifecycleDependencyResolver.class);}
8c1cdb64b859b0f7a0f8d5e8055b1ddd896de85b0b83d9aad149c1640d05c0fb
testCachedReactorProjectDependencies
public void testCachedReactorProjectDependencies() throws Exception
{    MavenSession session = createMavenSession(new File("src/test/projects/lifecycle-dependency-resolver/pom.xml"), new Properties(), true);    Collection<String> scopesToCollect = null;    Collection<String> scopesToResolve = Collections.singletonList("compile");    boolean aggregating = false;    Set<Artifact> reactorArtifacts = new HashSet<>(3);    for (MavenProject reactorProject : session.getProjects()) {        reactorProject.setArtifactFilter(new ArtifactFilter() {            @Override            public boolean include(Artifact artifact) {                return true;            }        });        resolver.resolveProjectDependencies(reactorProject, scopesToCollect, scopesToResolve, session, aggregating, reactorArtifacts);        reactorArtifacts.add(reactorProject.getArtifact());    }    MavenProject lib = session.getProjects().get(1);    MavenProject war = session.getProjects().get(2);    assertEquals(null, war.getArtifactMap().get("org.apache.maven.its.mng6300:mng6300-lib").getFile());    lib.getArtifact().setFile(new File("lib.jar"));    resolver.resolveProjectDependencies(war, scopesToCollect, scopesToResolve, session, aggregating, reactorArtifacts);    assertEquals(new File("lib.jar"), war.getArtifactMap().get("org.apache.maven.its.mng6300:mng6300-lib").getFile());}
d3ed17b58984fbee642a483f77d32e868d012e4887f1ca98f7f5abc5b7c7951f
include
public boolean include(Artifact artifact)
{    return true;}
17ea395626938a33e83ab612bf39eac424b50860eefc7752ffd7a12c206785fa
testCalculateExecutionPlanWithGoalTasks
public void testCalculateExecutionPlanWithGoalTasks() throws Exception
{    MojoDescriptorCreator mojoDescriptorCreator = createMojoDescriptorCreator();    LifecycleExecutionPlanCalculator lifecycleExecutionPlanCalculator = createExecutionPlaceCalculator(mojoDescriptorCreator);    final GoalTask goalTask1 = new GoalTask("compiler:compile");    final GoalTask goalTask2 = new GoalTask("surefire:test");    final TaskSegment taskSegment1 = new TaskSegment(false, goalTask1, goalTask2);    final MavenSession session1 = ProjectDependencyGraphStub.getMavenSession(ProjectDependencyGraphStub.A);    MavenExecutionPlan executionPlan = lifecycleExecutionPlanCalculator.calculateExecutionPlan(session1, ProjectDependencyGraphStub.A, taskSegment1.getTasks());    assertEquals(2, executionPlan.size());    final GoalTask goalTask3 = new GoalTask("surefire:test");    final TaskSegment taskSegment2 = new TaskSegment(false, goalTask1, goalTask2, goalTask3);    MavenExecutionPlan executionPlan2 = lifecycleExecutionPlanCalculator.calculateExecutionPlan(session1, ProjectDependencyGraphStub.A, taskSegment2.getTasks());    assertEquals(3, executionPlan2.size());}
391cfde2b5ae2519b06a5939c5bdabbfb2fe27bdd88af8bee2e09aaf0e171eaf
createExecutionPlaceCalculator
public static LifecycleExecutionPlanCalculator createExecutionPlaceCalculator(MojoDescriptorCreator mojoDescriptorCreator)
{    LifecyclePluginResolver lifecyclePluginResolver = new LifecyclePluginResolver(new PluginVersionResolverStub());    return new DefaultLifecycleExecutionPlanCalculator(new BuildPluginManagerStub(), DefaultLifecyclesStub.createDefaultLifecycles(), mojoDescriptorCreator, lifecyclePluginResolver);}
77e76811f446ffced828b9aff4aa53d8c9ea106569dcda563069c16b02b748c0
createMojoDescriptorCreator
public static MojoDescriptorCreator createMojoDescriptorCreator()
{    return new MojoDescriptorCreator(new PluginVersionResolverStub(), new BuildPluginManagerStub(), new PluginPrefixResolverStub(), new LifecyclePluginResolver(new PluginVersionResolverStub()));}
5cb41634139dccbc03acc9c3d530014417a0a8675a81e3d64379b8ce64bb81b2
getProjectsDirectory
protected String getProjectsDirectory()
{    return "src/test/projects/lifecycle-executor";}
131b5454bc2b6e9720539d8a5cb5abfdaebbe0f36ff73f89c4c3f89e23253a74
testCalculateProjectBuilds
public void testCalculateProjectBuilds() throws Exception
{    LifecycleTaskSegmentCalculator lifecycleTaskSegmentCalculator = getTaskSegmentCalculator();    BuildListCalculator buildListCalculator = new BuildListCalculator();    final MavenSession session = ProjectDependencyGraphStub.getMavenSession();    List<TaskSegment> taskSegments = lifecycleTaskSegmentCalculator.calculateTaskSegments(session);    final ProjectBuildList buildList = buildListCalculator.calculateProjectBuilds(session, taskSegments);    final ProjectBuildList segments = buildList.getByTaskSegment(taskSegments.get(0));    assertEquals("Stub data contains 3 segments", 3, taskSegments.size());    assertEquals("Stub data contains 6 items", 6, segments.size());    final ProjectSegment build = segments.get(0);    assertNotNull(build);}
6cc2469712ef9dde3fa54e5d0b8d118a51ed31c146d9eb62758009c2ed499e84
getTaskSegmentCalculator
private static LifecycleTaskSegmentCalculator getTaskSegmentCalculator()
{    return new LifecycleTaskSegmentCalculatorStub();}
da186425b2a0bf4c25da18d36d504ddaa0c8e51e5327b80f1aea72d55bf7c53b
testObserveExecution
public void testObserveExecution() throws Exception
{    PhaseRecorder phaseRecorder = new PhaseRecorder(ProjectDependencyGraphStub.A);    MavenExecutionPlan plan = LifecycleExecutionPlanCalculatorStub.getProjectAExceutionPlan();    final List<MojoExecution> executions = plan.getMojoExecutions();    final MojoExecution mojoExecution1 = executions.get(0);    final MojoExecution mojoExecution2 = executions.get(1);    phaseRecorder.observeExecution(mojoExecution1);    assertTrue(ProjectDependencyGraphStub.A.hasLifecyclePhase(mojoExecution1.getLifecyclePhase()));    assertFalse(ProjectDependencyGraphStub.A.hasLifecyclePhase(mojoExecution2.getLifecyclePhase()));    assertFalse(phaseRecorder.isDifferentPhase(mojoExecution1));    assertTrue(phaseRecorder.isDifferentPhase(mojoExecution2));}
5f27db5ff819bdf628b9c1a1ed649e175b11a894b8ad21961b88e37f9ac324c9
testGetByTaskSegment
public void testGetByTaskSegment() throws Exception
{    final MavenSession session = ProjectDependencyGraphStub.getMavenSession();    ProjectBuildList projectBuildList = ProjectDependencyGraphStub.getProjectBuildList(session);    TaskSegment taskSegment = projectBuildList.get(0).getTaskSegment();    assertTrue("This test assumes there are at least 6 elements in projectBuilds", projectBuildList.size() >= 6);    final ProjectBuildList byTaskSegment = projectBuildList.getByTaskSegment(taskSegment);    assertEquals(projectBuildList.size(),     byTaskSegment.size());}
9d11b29d08cc7d5f603c9549fbb44a913c15a040ba1f3450fb12519906283084
loadPlugin
public PluginDescriptor loadPlugin(Plugin plugin, List<RemoteRepository> repositories, RepositorySystemSession session)
{    return null;}
3d2ba0010b5b53edd735b22bb4650490e4d7f4d8d4fff058d4e9498ef23ed3ca
getMojoDescriptor
public MojoDescriptor getMojoDescriptor(Plugin plugin, String goal, List<RemoteRepository> repositories, RepositorySystemSession session)
{    return MojoExecutorStub.createMojoDescriptor(plugin.getKey());}
d37ca0ffd2ad9f99d7c26f19357cae4008e7c9ebc699d6923acb63b864a597d8
getPluginRealm
public ClassRealm getPluginRealm(MavenSession session, PluginDescriptor pluginDescriptor)
{    return null;}
32cd3ab44e7d16e84dbb897a2ef00bf4a981e6a76d2b9ae6caa0b746d128188b
executeMojo
public void executeMojo(MavenSession session, MojoExecution execution)
{}
72ef1e59027007ffe0950edfd2670ad03bb65cd6463d5d1d282dfeb1750435b0
size
public int size()
{    return projectBuildFutureTasks.size();}
08fe03e06a0c8be87c3860b9804d68435ffcb53fb19f93d04d4179a131055031
submit
public Future<ProjectSegment> submit(Callable<ProjectSegment> task)
{    FutureTask<ProjectSegment> projectBuildFutureTask = new FutureTask<>(task);    projectBuildFutureTasks.add(projectBuildFutureTask);    if (finishImmediately) {        projectBuildFutureTask.run();    }    return projectBuildFutureTask;}
ceb84a5b9147c6d69a63a9d5e214fe0ef4dc3cdd2bf33b7df972a1492ef7bb69
submit
public Future<ProjectSegment> submit(Runnable task, ProjectSegment result)
{    FutureTask<ProjectSegment> projectBuildFutureTask = new FutureTask<>(task, result);    projectBuildFutureTasks.add(projectBuildFutureTask);    if (finishImmediately) {        projectBuildFutureTask.run();    }    return projectBuildFutureTask;}
6ff6cfd0ed182a948396f5bafae308c6ff616496da171fa6dae08e99cb85023d
take
public Future<ProjectSegment> take() throws InterruptedException
{    return null;}
6145e9c63a7059a1482444b97932f7d63742df023de509a961b1e6b37e85120f
poll
public Future<ProjectSegment> poll()
{    return null;}
0de9d01dbd9451cbe407b2ee90ac51f023d216d7b1029af4aba1b912d40582d7
poll
public Future<ProjectSegment> poll(long timeout, TimeUnit unit) throws InterruptedException
{    return null;}
86f3f7bf4e0709c325fe71a13c46e579724e59593ffed4931fe56c0d8832162f
createDefaultLifecycles
public static DefaultLifecycles createDefaultLifecycles()
{    List<String> stubDefaultCycle = Arrays.asList(VALIDATE.getPhase(), INITIALIZE.getPhase(), PROCESS_RESOURCES.getPhase(), COMPILE.getPhase(), TEST.getPhase(), PROCESS_TEST_RESOURCES.getPhase(), PACKAGE.getPhase(), "BEER", INSTALL.getPhase());            List<String> stubCleanCycle = Arrays.asList(PRE_CLEAN.getPhase(), CLEAN.getPhase(), POST_CLEAN.getPhase());    List<String> stubSiteCycle = Arrays.asList(PRE_SITE.getPhase(), SITE.getPhase(), POST_SITE.getPhase(), SITE_DEPLOY.getPhase());    @SuppressWarnings("unchecked")    Iterator<List<String>> lcs = Arrays.asList(stubDefaultCycle, stubCleanCycle, stubSiteCycle).iterator();    Map<String, Lifecycle> lifeCycles = new HashMap<>();    for (String s : DefaultLifecycles.STANDARD_LIFECYCLES) {        final Lifecycle lifecycle = new Lifecycle(s, lcs.next(), null);        lifeCycles.put(s, lifecycle);    }    return new DefaultLifecycles(lifeCycles, new LoggerStub());}
7dcb1cbff7704f1f1edb22abbeaf527967898b5c736685cf667b98e544c81f59
fire
public void fire(Type eventType, MavenSession session, MojoExecution mojoExecution)
{}
bede16ee9ff11c612ab19c35e8431ab70b73d58d822f9c87101c09f104a626c3
fire
public void fire(Type eventType, MavenSession session, MojoExecution mojoExecution, Exception exception)
{}
c7dd74764d84176ab83e8182751445b3b558fe1f7d8efc88d43c1517eabf4e20
getNumberOfExceutions
public int getNumberOfExceutions(ProjectBuildList projectBuildList) throws InvalidPluginDescriptorException, PluginVersionResolutionException, PluginDescriptorParsingException, NoPluginFoundForPrefixException, MojoNotFoundException, PluginNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException, LifecycleNotFoundException
{    int result = 0;    for (ProjectSegment projectBuild : projectBuildList) {        MavenExecutionPlan plan = calculateExecutionPlan(projectBuild.getSession(), projectBuild.getProject(), projectBuild.getTaskSegment().getTasks());        result += plan.size();    }    return result;}
0e6aa1980c4b9aeb10bb5ca970e64d39a2687b811473f9eaa90a86db4414e777
getNumberOfExecutions
public int getNumberOfExecutions(ProjectBuildList projectBuildList) throws InvalidPluginDescriptorException, PluginVersionResolutionException, PluginDescriptorParsingException, NoPluginFoundForPrefixException, MojoNotFoundException, PluginNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException, LifecycleNotFoundException
{    return getNumberOfExceutions(projectBuildList);}
377d982318368e76c8ae67d6672b31a3a6d8877017a188f5fc6f46fbbb7eaaaf
calculateForkedExecutions
public void calculateForkedExecutions(MojoExecution mojoExecution, MavenSession session) throws MojoNotFoundException, PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException, LifecyclePhaseNotFoundException, LifecycleNotFoundException, PluginVersionResolutionException
{}
ec815ac2976b15174d72f7b24ee2f7bcc6d02bff9a3bb60a317acdab4c6e345a
calculateExecutionPlan
public MavenExecutionPlan calculateExecutionPlan(MavenSession session, MavenProject project, List<Object> tasks, boolean setup) throws PluginNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException, PluginDescriptorParsingException, MojoNotFoundException, InvalidPluginDescriptorException, NoPluginFoundForPrefixException, LifecycleNotFoundException, PluginVersionResolutionException
{    if (project.equals(ProjectDependencyGraphStub.A)) {        return getProjectAExceutionPlan();    }    if (project.equals(ProjectDependencyGraphStub.B)) {        return getProjectBExecutionPlan();    }        List<MojoExecution> me = new ArrayList<>();    me.add(createMojoExecution("resources", "default-resources", PROCESS_RESOURCES));    me.add(createMojoExecution("compile", "default-compile", COMPILE));    return createExecutionPlan(project, me);}
78d1eeabb42e26a26ee6670cc46ef6fc8dd7264f3121db30f7dc9b12fa47e759
calculateExecutionPlan
public MavenExecutionPlan calculateExecutionPlan(MavenSession session, MavenProject project, List<Object> tasks) throws PluginNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException, PluginDescriptorParsingException, MojoNotFoundException, InvalidPluginDescriptorException, NoPluginFoundForPrefixException, LifecycleNotFoundException, PluginVersionResolutionException
{    return calculateExecutionPlan(session, project, tasks, true);}
9515816e6621cdca18b54e25b6e937fd795a94d0dc2cd73ac4a5eb929df1b49c
setupMojoExecution
public void setupMojoExecution(MavenSession session, MavenProject project, MojoExecution mojoExecution) throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, MojoNotFoundException, InvalidPluginDescriptorException, NoPluginFoundForPrefixException, LifecyclePhaseNotFoundException, LifecycleNotFoundException, PluginVersionResolutionException
{}
1dc0a34bb0c240603a9e63a22d8077e4bd22ac70ad544b692b484c8e6a6d70de
getProjectAExceutionPlan
public static MavenExecutionPlan getProjectAExceutionPlan() throws PluginNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException, PluginDescriptorParsingException, MojoNotFoundException, InvalidPluginDescriptorException, NoPluginFoundForPrefixException, LifecycleNotFoundException, PluginVersionResolutionException
{    List<MojoExecution> me = new ArrayList<>();    me.add(createMojoExecution("initialize", "default-initialize", INITIALIZE));    me.add(createMojoExecution("resources", "default-resources", PROCESS_RESOURCES));    me.add(createMojoExecution("compile", "default-compile", COMPILE));    me.add(createMojoExecution("testResources", "default-testResources", PROCESS_TEST_RESOURCES));    me.add(createMojoExecution("testCompile", "default-testCompile", TEST_COMPILE));    me.add(createMojoExecution("test", "default-test", TEST));    me.add(createMojoExecution("war", "default-war", PACKAGE));    me.add(createMojoExecution("install", "default-install", INSTALL));    return createExecutionPlan(ProjectDependencyGraphStub.A.getExecutionProject(), me);}
affd4d525a4c14b36f6124231857ee4f358b33c8714dbce34beac48d10ee6533
getProjectBExecutionPlan
public static MavenExecutionPlan getProjectBExecutionPlan() throws PluginNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException, PluginDescriptorParsingException, MojoNotFoundException, InvalidPluginDescriptorException, NoPluginFoundForPrefixException, LifecycleNotFoundException, PluginVersionResolutionException
{    List<MojoExecution> me = new ArrayList<>();    me.add(createMojoExecution("enforce", "enforce-versions", VALIDATE));    me.add(createMojoExecution("resources", "default-resources", PROCESS_RESOURCES));    me.add(createMojoExecution("compile", "default-compile", COMPILE));    me.add(createMojoExecution("testResources", "default-testResources", PROCESS_TEST_RESOURCES));    me.add(createMojoExecution("testCompile", "default-testCompile", TEST_COMPILE));    me.add(createMojoExecution("test", "default-test", TEST));    return createExecutionPlan(ProjectDependencyGraphStub.B.getExecutionProject(), me);}
1d2d3a5e1684d0ae042e0295ea6dd4805e9b8cb00a146454ecd200658d8e7392
createExecutionPlan
private static MavenExecutionPlan createExecutionPlan(MavenProject project, List<MojoExecution> mojoExecutions) throws InvalidPluginDescriptorException, PluginVersionResolutionException, PluginDescriptorParsingException, NoPluginFoundForPrefixException, MojoNotFoundException, PluginNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException, LifecycleNotFoundException
{    final List<ExecutionPlanItem> planItemList = ExecutionPlanItem.createExecutionPlanItems(project, mojoExecutions);    return new MavenExecutionPlan(planItemList, DefaultLifecyclesStub.createDefaultLifecycles());}
16a0d2fb05e1a970278864a646e6bbb6071f693674e41c53415d2c2399230ca2
createMojoExecution
private static MojoExecution createMojoExecution(String goal, String executionId, MojoDescriptor mojoDescriptor)
{    final Plugin plugin = mojoDescriptor.getPluginDescriptor().getPlugin();    MojoExecution result = new MojoExecution(plugin, goal, executionId);    result.setConfiguration(new Xpp3Dom(executionId + "-" + goal));    result.setMojoDescriptor(mojoDescriptor);    result.setLifecyclePhase(mojoDescriptor.getPhase());    return result;}
c6fe609f2cae0abd0fec35fcbf885128fa7533351186000a7084bc5d9cac99ea
createMojoDescriptor
public static MojoDescriptor createMojoDescriptor(String phaseName)
{    return createMojoDescriptor(phaseName, false);}
8ee93d6bea756d586304185311b919b7f8748124cb90808db67353a4834264c5
createMojoDescriptor
public static MojoDescriptor createMojoDescriptor(String phaseName, boolean threadSafe)
{    final MojoDescriptor mojoDescriptor = new MojoDescriptor();    mojoDescriptor.setPhase(phaseName);    final PluginDescriptor descriptor = new PluginDescriptor();    Plugin plugin = new Plugin();    plugin.setArtifactId("org.apache.maven.test.MavenExecutionPlan");    plugin.setGroupId("stub-plugin-" + phaseName);    descriptor.setPlugin(plugin);    descriptor.setArtifactId("artifact." + phaseName);    mojoDescriptor.setPluginDescriptor(descriptor);    mojoDescriptor.setThreadSafe(threadSafe);    return mojoDescriptor;}
1d1c124a8a0ef6c40fc31bffbe5dd1cbe566890f9308981a1d36b84051e6e009
getScopes
public static Set<String> getScopes()
{    return new HashSet<>(Arrays.asList("compile"));}
afe8893888899b4a1f5ffc4906aebf4423c24f4d95f5e841bac29e33af7cd44d
getPluginsBoundByDefaultToAllLifecycles
public Set<Plugin> getPluginsBoundByDefaultToAllLifecycles(String packaging)
{    Set<Plugin> plugins;        if ("JAR".equals(packaging)) {        plugins = new LinkedHashSet<>();        plugins.add(newPlugin("maven-compiler-plugin", "compile", "testCompile"));        plugins.add(newPlugin("maven-resources-plugin", "resources", "testResources"));        plugins.add(newPlugin("maven-surefire-plugin", "test"));        plugins.add(newPlugin("maven-jar-plugin", "jar"));        plugins.add(newPlugin("maven-install-plugin", "install"));        plugins.add(newPlugin("maven-deploy-plugin", "deploy"));    } else {        plugins = Collections.emptySet();    }    return plugins;}
356be6482821e77782dbf2ac6a8e53e29604e3006ee24e251a61e242114c6cc8
newPlugin
private Plugin newPlugin(String artifactId, String... goals)
{    Plugin plugin = new Plugin();    plugin.setGroupId("org.apache.maven.plugins");    plugin.setArtifactId(artifactId);    for (String goal : goals) {        PluginExecution pluginExecution = new PluginExecution();        pluginExecution.setId("default-" + goal);        pluginExecution.addGoal(goal);        plugin.addExecution(pluginExecution);    }    return plugin;}
c69463c29e15fb65c78f90742761cb0c5522e8c5ac36db4f7ea3914502b6091c
calculateTaskSegments
public List<TaskSegment> calculateTaskSegments(MavenSession session, List<String> tasks) throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, MojoNotFoundException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException, PluginVersionResolutionException
{    List<TaskSegment> taskSegments = new ArrayList<>(tasks.size());    TaskSegment currentSegment = null;    for (String task : tasks) {        if (aggr.equals(task)) {            boolean aggregating = true;            if (currentSegment == null || currentSegment.isAggregating() != aggregating) {                currentSegment = new TaskSegment(aggregating);                taskSegments.add(currentSegment);            }            currentSegment.getTasks().add(new GoalTask(task));        } else {                        if (currentSegment == null || currentSegment.isAggregating()) {                currentSegment = new TaskSegment(false);                taskSegments.add(currentSegment);            }            currentSegment.getTasks().add(new LifecycleTask(task));        }    }    return taskSegments;}
ac2d74d662a3cf5b718d4f781ae858904c3f6bd8e66edfdd5c384120f044e98b
requiresProject
public boolean requiresProject(MavenSession session)
{    return true;}
31ed0b24b44f9832c686630301d8a00f3fc4836a43d95b2144ee1f11240990f8
debug
public void debug(String s)
{}
e176a0ea5f54ecd1ecafc20b5ed57f0ad5a4387b1016a44863d5e7105399ad99
debug
public void debug(String s, Throwable throwable)
{}
78a12d10dabb3d8114aaac00c701b5b6aa7cbfaa2d8d5e567d835d24c4e4049e
isDebugEnabled
public boolean isDebugEnabled()
{    return true;}
66a9062e6de37c9182ba454596a06e931514361f5755d4433b602311687e37b3
info
public void info(String s)
{}
c88b40f47a43a785b0d211c8a3894a6f2dfbc1ea362daeab8f2b9429c2ce0426
info
public void info(String s, Throwable throwable)
{}
791133a98f4bf579531e6f98c8eedc6a6b04fa18d00c49cc69e44fb34f1d7bfb
isInfoEnabled
public boolean isInfoEnabled()
{    return true;}
c53cbf868ccb3338a84616a919e60f54f822cebd08edbe58bdefef985df3fd39
warn
public void warn(String s)
{}
1fdc4684599866b8dedab88d7daba6fcb639706b065b62466c22abb7cdcc471b
warn
public void warn(String s, Throwable throwable)
{}
ed1cbf9afb39ae4c470fcb5327707d375fad568a93babe54ea77258009a55c9a
isWarnEnabled
public boolean isWarnEnabled()
{    return true;}
577d8d805ef6510650d4036cb7836c70fd0fdca527904b9ea91aa461a8566e64
error
public void error(String s)
{}
ceb38c9fea8b24107ee1d9471d73910bc9ff1087ae40c31707c3f8e621faf8e3
error
public void error(String s, Throwable throwable)
{}
57f02ea050263534c4a0e031302153aeaf6c901a04ad56b7140d80df41a36abd
isErrorEnabled
public boolean isErrorEnabled()
{    return true;}
fd0a93fc9fe69bffebf785d4d7f7466224fecfabd41bcc017d7616977c81a409
fatalError
public void fatalError(String s)
{}
538991358ecacf001197c2c0c42455ecd7f60f838e983a1c9341aeae6412ac1d
fatalError
public void fatalError(String s, Throwable throwable)
{}
1471709423ea34758cb2c9c789a79c7e47e1eceef9ce6572a83271b2b70591b9
isFatalErrorEnabled
public boolean isFatalErrorEnabled()
{    return true;}
91f160e0bf1e0c2b607c2ae7ee7201a70958aa774e49460745f7e311e8e6a87c
getChildLogger
public Logger getChildLogger(String s)
{    return null;}
49b6d134697e50240add951addd4f3b66e8dc36b3c4739cbbf097d0150540b4b
getThreshold
public int getThreshold()
{    return 0;}
b75610a8bfdfcf587cde9894b01313b49e5d39a654186e8390cc5611ddd5aaf6
setThreshold
public void setThreshold(int i)
{}
239fbe3eb64d679cbac1161825b07d6a8436ead3c6c3d140d9caec2275827023
getName
public String getName()
{    return "StubLogger";}
f18280faad1a1bcc00f367bf7143f37610465ef101d2d323305f11bad549ad6b
execute
public void execute(MavenSession session, MojoExecution mojoExecution, ProjectIndex projectIndex, DependencyContext dependencyContext, PhaseRecorder phaseRecorder) throws LifecycleExecutionException
{    executions.add(mojoExecution);}
5fbb9a60220589be986c8459f21800b515c53e97d3c7e088d936e2ef6a23415b
execute
public void execute(MavenSession session, List<MojoExecution> mojoExecutions, ProjectIndex projectIndex) throws LifecycleExecutionException
{    executions.addAll(mojoExecutions);}
a2a7cddac1a867855e08cd2a47157c8fd610331060ee39c8c1237bcd117330fe
createMojoDescriptor
public static MojoDescriptor createMojoDescriptor(String mojoDescription)
{    final PluginDescriptor descriptor = new PluginDescriptor();    descriptor.setArtifactId(mojoDescription);    final MojoDescriptor mojoDescriptor = new MojoDescriptor();    mojoDescriptor.setDescription(mojoDescription);    mojoDescriptor.setPluginDescriptor(descriptor);    return mojoDescriptor;}
0f4c20daaa234964732d87495a8de05393d81089ba1af74c23bc1f069f88c223
resolve
public PluginPrefixResult resolve(PluginPrefixRequest request) throws NoPluginFoundForPrefixException
{    return new PluginPrefixResult() {        public String getGroupId() {            return "com.foobar";        }        public String getArtifactId() {            return "bazbaz";        }        public ArtifactRepository getRepository() {            return null;        }    };}
9590314d7a6edd0118345714cc714a8e73448e57e702bb4c6893b363f509d64d
getGroupId
public String getGroupId()
{    return "com.foobar";}
1e5191dc99d9314f2df50294bcd8d717af7b8f4311575d36d8d75b27121f1064
getArtifactId
public String getArtifactId()
{    return "bazbaz";}
2173adbe55779ccb687142434f49e47b69ce1c4fc751fc2716e0487d65e3ec95
getRepository
public ArtifactRepository getRepository()
{    return null;}
db5321516d0664ffe1be137774c89a611019f50f43eff245b1b068345ae469d3
resolve
public PluginVersionResult resolve(PluginVersionRequest request) throws PluginVersionResolutionException
{    return new PluginVersionResult() {        public String getVersion() {            return "0.42";        }        public ArtifactRepository getRepository() {            return null;        }    };}
446b3b91c7c41085df1dc5542616b89ccd409f6a1d45e4d60d3ca00ac839ecf0
getVersion
public String getVersion()
{    return "0.42";}
2173adbe55779ccb687142434f49e47b69ce1c4fc751fc2716e0487d65e3ec95
getRepository
public ArtifactRepository getRepository()
{    return null;}
105a02942c9b60071296b669e2388f85fc854a80bb644cc553b7ac024ebdeaaa
resolve
public Set<Artifact> resolve(MavenProject project, Collection<String> scopesToResolve, MavenSession session) throws ArtifactResolutionException, ArtifactNotFoundException
{    return new HashSet<>();}
73c8001980e8998b547af6dd91fd9bb87216ef63492ee7c12dc51209a6a49dd7
resolve
public Set<Artifact> resolve(MavenProject project, Collection<String> scopesToCollect, Collection<String> scopesToResolve, MavenSession session) throws ArtifactResolutionException, ArtifactNotFoundException
{    return new HashSet<>();}
bfb0f70351ad1539031da390ed7fe1bb434180843d342fea9adc1fd99f51db17
resolve
public Set<Artifact> resolve(Collection<? extends MavenProject> projects, Collection<String> scopes, MavenSession session) throws ArtifactResolutionException, ArtifactNotFoundException
{    return new HashSet<>();}
988c89b0b443036b944767113509b895059c8e6867ad713df30f45aa799c8ae5
resolve
public Set<Artifact> resolve(MavenProject project, Collection<String> scopesToCollect, Collection<String> scopesToResolve, MavenSession session, Set<Artifact> ignoreableArtifacts) throws ArtifactResolutionException, ArtifactNotFoundException
{    return new HashSet<>();}
de316baf8266c96f65ccb57b2a16487c5ff7f6e6dff1430877dc88ad04caf585
resolve
public DependencyResolutionResult resolve(DependencyResolutionRequest request) throws DependencyResolutionException
{    return new DependencyResolutionResult() {        public List<Dependency> getUnresolvedDependencies() {            return Collections.emptyList();        }        public List<Dependency> getResolvedDependencies() {            return Collections.emptyList();        }        public List<Exception> getResolutionErrors(Dependency dependency) {            return Collections.emptyList();        }        public DependencyNode getDependencyGraph() {            return new DefaultDependencyNode((Dependency) null);        }        public List<Dependency> getDependencies() {            return Collections.emptyList();        }        public List<Exception> getCollectionErrors() {            return Collections.emptyList();        }    };}
90c80a1cd590d15cc71662e0ee1392d6ad8971fc0566151468c77f01ec2fe373
getUnresolvedDependencies
public List<Dependency> getUnresolvedDependencies()
{    return Collections.emptyList();}
1dff3065bf37a96258b63b6475be5d5f07bbd9d763ae77e115ba77f406d30f9f
getResolvedDependencies
public List<Dependency> getResolvedDependencies()
{    return Collections.emptyList();}
9def1f5feb749a20b9ebbe31c126327303cb2cfd702973e37c727082e09490fc
getResolutionErrors
public List<Exception> getResolutionErrors(Dependency dependency)
{    return Collections.emptyList();}
ed1fc006e96be971c099147190c581205772d4d573744ce19bec77918fb33fd6
getDependencyGraph
public DependencyNode getDependencyGraph()
{    return new DefaultDependencyNode((Dependency) null);}
5d4ace0ef221a194a1d9585a92d0b74ee3987d6559e56dc9f7dc3a2570c07c7c
getDependencies
public List<Dependency> getDependencies()
{    return Collections.emptyList();}
bf1e05993bce2c01443b9d48ba0cc3d467169dbf53fff1cd5904a23b87f69274
getCollectionErrors
public List<Exception> getCollectionErrors()
{    return Collections.emptyList();}
25c7b189645508d8182bfe9129f0081fc5e57b927caf7aea0243273dc0719f99
getProjectBuildList
public static ProjectBuildList getProjectBuildList(MavenSession session) throws InvalidPluginDescriptorException, PluginVersionResolutionException, PluginDescriptorParsingException, NoPluginFoundForPrefixException, MojoNotFoundException, PluginNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException, LifecycleNotFoundException
{    final List<ProjectSegment> list = getProjectBuilds(session);    return new ProjectBuildList(list);}
357d453c237d7be028582fdb8fa7e45cfb64136a831e40b8be2ef956e655aaac
getProjectBuilds
public static List<ProjectSegment> getProjectBuilds(MavenSession session) throws InvalidPluginDescriptorException, PluginVersionResolutionException, PluginDescriptorParsingException, NoPluginFoundForPrefixException, PluginNotFoundException, MojoNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException, LifecycleNotFoundException
{    List<ProjectSegment> projectBuilds = new ArrayList<>();    TaskSegment segment = createTaskSegment();    projectBuilds.add(createProjectBuild(A, session, segment));    projectBuilds.add(createProjectBuild(B, session, segment));    projectBuilds.add(createProjectBuild(C, session, segment));    projectBuilds.add(createProjectBuild(X, session, segment));    projectBuilds.add(createProjectBuild(Y, session, segment));    projectBuilds.add(createProjectBuild(Z, session, segment));    return projectBuilds;}
e5974850faba99e802d440f0276113e768c638a2ae7147b08e71176733477a3b
createProjectBuild
private static ProjectSegment createProjectBuild(MavenProject project, MavenSession session, TaskSegment taskSegment) throws InvalidPluginDescriptorException, PluginVersionResolutionException, PluginDescriptorParsingException, NoPluginFoundForPrefixException, MojoNotFoundException, PluginNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException, LifecycleNotFoundException
{    final MavenSession session1 = session.clone();    return new ProjectSegment(project, taskSegment, session1);}
57081fd8997f001246a988329109e93a57aaeca595bc1955070855df75e6a315
createTaskSegment
private static TaskSegment createTaskSegment()
{    TaskSegment result = new TaskSegment(false);    result.getTasks().add(new GoalTask("t1"));    result.getTasks().add(new GoalTask("t2"));    return result;}
0b30f31283a7e91af784c74cd4d239de3421f402dfeaa95d0268f1e877f74cdd
addIfDownstream
 void addIfDownstream(MavenProject mavenProject, List<MavenProject> result)
{    if (dependency == mavenProject) {        result.add(dependant);    }}
2b53a525796b28b47f1ff6620825428985ff7b10c0f43df1bdf8251f6ff2dc16
addIfUpstreamOf
 void addIfUpstreamOf(MavenProject mavenProject, List<MavenProject> result)
{    if (dependant == mavenProject) {                result.add(dependency);    }}
e02e99479606b7b436203882e9f7427a91a8eccbbc77f511e85b0c33c96cd133
getDependencies
private List<Dependency> getDependencies()
{    List<Dependency> dependencies = new ArrayList<>();    dependencies.add(new Dependency(B, A));    dependencies.add(new Dependency(C, A));    dependencies.add(new Dependency(X, B));    dependencies.add(new Dependency(X, C));    dependencies.add(new Dependency(Y, B));    dependencies.add(new Dependency(Z, C));    return dependencies;}
9e7741414e346a2cf4af4830382cffb79f0ed8ac03e56602c02911d208de5fd7
getAllProjects
public List<MavenProject> getAllProjects()
{    return Arrays.asList(A, B, C, X, Y, Z, UNKNOWN);}
a741787f77d01caf822782e4c4aea27986cab8e6d656656dab23943bae6d8c3a
getSortedProjects
public List<MavenProject> getSortedProjects()
{        return Arrays.asList(A, B, C, X, Y, Z);}
1d2b3daf6e7456d60fb80c4e6c5905b83fc04e5cc5cfc2e77f0b0da143a4b56f
getDownstreamProjects
public List<MavenProject> getDownstreamProjects(MavenProject project, boolean transitive)
{    if (transitive) {        throw new RuntimeException("Not implemented yet");    }    List<MavenProject> result = new ArrayList<>();    for (Dependency dependency : getDependencies()) {        dependency.addIfDownstream(project, result);    }    return result;}
71332a05a314f8bebde1320c8c9579682bfd5a09833a5930a06e1aa90f0156bb
getUpstreamProjects
public List<MavenProject> getUpstreamProjects(MavenProject project, boolean transitive)
{    /*  if ( transitive )        {            throw new RuntimeException( "Not implemented yet" );        }*/    List<MavenProject> result = new ArrayList<>();    final List<Dependency> dependencies = getDependencies();    for (Dependency dependency : dependencies) {        dependency.addIfUpstreamOf(project, result);    }    return result;}
8a050f53da1271bfcf04b6d5fab4f0f827918c67ec088224c591bfd284709006
getMavenSession
public static MavenSession getMavenSession(MavenProject mavenProject)
{    final MavenSession session = getMavenSession();    session.setCurrentProject(mavenProject);    return session;}
2f9c3dacbd1818728774b4d4a92b09e386fc0aac37e12347d1048f618ffd6d6b
getMavenSession
public static MavenSession getMavenSession()
{    final DefaultMavenExecutionResult defaultMavenExecutionResult = new DefaultMavenExecutionResult();    MavenExecutionRequest mavenExecutionRequest = new DefaultMavenExecutionRequest();    mavenExecutionRequest.setExecutionListener(new AbstractExecutionListener());    mavenExecutionRequest.setGoals(Arrays.asList("clean", "aggr", "install"));    mavenExecutionRequest.setDegreeOfConcurrency(1);    final MavenSession session = new MavenSession(null, null, mavenExecutionRequest, defaultMavenExecutionResult);    final ProjectDependencyGraphStub dependencyGraphStub = new ProjectDependencyGraphStub();    session.setProjectDependencyGraph(dependencyGraphStub);    session.setProjects(dependencyGraphStub.getSortedProjects());    return session;}
279dd0da81d89ce55bd2a5d8d89312551ea89efb247aa5211d641fab538b3efe
testADependencies
public void testADependencies()
{    ProjectDependencyGraphStub stub = new ProjectDependencyGraphStub();    final List<MavenProject> mavenProjects = stub.getUpstreamProjects(ProjectDependencyGraphStub.A, false);    assertEquals(0, mavenProjects.size());}
98eee8361eaf933f5a56216937234e937a3387edb9f5e84329d91302ef5855a8
testBDepenencies
public void testBDepenencies(ProjectDependencyGraphStub stub)
{    final List<MavenProject> bProjects = stub.getUpstreamProjects(ProjectDependencyGraphStub.B, false);    assertEquals(1, bProjects.size());    assertTrue(bProjects.contains(ProjectDependencyGraphStub.A));}
6abc7d81bc18f4e443d95b522ea018b5febdd35585dc1aa9ca1b445eb0327cf5
testCDepenencies
public void testCDepenencies(ProjectDependencyGraphStub stub)
{    final List<MavenProject> cProjects = stub.getUpstreamProjects(ProjectDependencyGraphStub.C, false);    assertEquals(1, cProjects.size());    assertTrue(cProjects.contains(ProjectDependencyGraphStub.C));}
58aa0254b3b7f279b1fafd5b400013ae29a3ce9004c76c36cce7615adee3c6d6
testXDepenencies
public void testXDepenencies(ProjectDependencyGraphStub stub)
{    final List<MavenProject> cProjects = stub.getUpstreamProjects(ProjectDependencyGraphStub.X, false);    assertEquals(2, cProjects.size());    assertTrue(cProjects.contains(ProjectDependencyGraphStub.C));    assertTrue(cProjects.contains(ProjectDependencyGraphStub.B));}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();    defaultLifeCycles = lookup(DefaultLifecycles.class);    mojoExecutor = lookup(MojoExecutor.class);    lifeCycleBuilder = lookup(LifecycleModuleBuilder.class);    lifeCycleDependencyResolver = lookup(LifecycleDependencyResolver.class);    lifeCycleExecutionPlanCalculator = lookup(LifecycleExecutionPlanCalculator.class);    lifeCyclePluginAnalyzer = lookup(LifeCyclePluginAnalyzer.class);    lifeCycleTaskSegmentCalculator = lookup(LifecycleTaskSegmentCalculator.class);    lookup(ExceptionHandler.class);}
68bbf6c94fbad4862990669ea582b65c28678087c2377b2c3fb0948d54293af4
tearDown
protected void tearDown() throws Exception
{    defaultLifeCycles = null;    super.tearDown();}
5cb41634139dccbc03acc9c3d530014417a0a8675a81e3d64379b8ce64bb81b2
getProjectsDirectory
protected String getProjectsDirectory()
{    return "src/test/projects/lifecycle-executor";}
27c47e2fe240f765a53c2e6fc48bda45add8d849bf5c619faa776fd153bf7e62
testCreation
public void testCreation() throws Exception
{    assertNotNull(defaultLifeCycles);    assertNotNull(mojoExecutor);    assertNotNull(lifeCycleBuilder);    assertNotNull(lifeCycleDependencyResolver);    assertNotNull(lifeCycleExecutionPlanCalculator);    assertNotNull(lifeCyclePluginAnalyzer);    assertNotNull(lifeCycleTaskSegmentCalculator);}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();    lifecycleExecutor = (DefaultLifecycleExecutor) lookup(LifecycleExecutor.class);    lifeCycleTaskSegmentCalculator = (DefaultLifecycleTaskSegmentCalculator) lookup(LifecycleTaskSegmentCalculator.class);    lifeCycleExecutionPlanCalculator = lookup(LifecycleExecutionPlanCalculator.class);    mojoDescriptorCreator = lookup(MojoDescriptorCreator.class);    lookup(ExceptionHandler.class);}
68bbf6c94fbad4862990669ea582b65c28678087c2377b2c3fb0948d54293af4
tearDown
protected void tearDown() throws Exception
{    lifecycleExecutor = null;    super.tearDown();}
5cb41634139dccbc03acc9c3d530014417a0a8675a81e3d64379b8ce64bb81b2
getProjectsDirectory
protected String getProjectsDirectory()
{    return "src/test/projects/lifecycle-executor";}
9154776ec2f7d3b8b9a4473e547d5badd93015080d229bb0d0b549a13c95741b
testCalculationOfBuildPlanWithIndividualTaskWherePluginIsSpecifiedInThePom
public void testCalculationOfBuildPlanWithIndividualTaskWherePluginIsSpecifiedInThePom() throws Exception
{            File pom = getProject("project-basic");    MavenSession session = createMavenSession(pom);    assertEquals("project-basic", session.getCurrentProject().getArtifactId());    assertEquals("1.0", session.getCurrentProject().getVersion());    List<MojoExecution> executionPlan = getExecutions(calculateExecutionPlan(session, "resources:resources"));    assertEquals(1, executionPlan.size());    MojoExecution mojoExecution = executionPlan.get(0);    assertNotNull(mojoExecution);    assertEquals("org.apache.maven.plugins", mojoExecution.getMojoDescriptor().getPluginDescriptor().getGroupId());    assertEquals("maven-resources-plugin", mojoExecution.getMojoDescriptor().getPluginDescriptor().getArtifactId());    assertEquals("0.1", mojoExecution.getMojoDescriptor().getPluginDescriptor().getVersion());}
db562810ac6d8d4abc97f98898c9f46b9b14fccc677958f7d45952d7526926bb
testCalculationOfBuildPlanWithIndividualTaskOfTheCleanLifecycle
public void testCalculationOfBuildPlanWithIndividualTaskOfTheCleanLifecycle() throws Exception
{            File pom = getProject("project-basic");    MavenSession session = createMavenSession(pom);    assertEquals("project-basic", session.getCurrentProject().getArtifactId());    assertEquals("1.0", session.getCurrentProject().getVersion());    List<MojoExecution> executionPlan = getExecutions(calculateExecutionPlan(session, "clean"));    assertEquals(1, executionPlan.size());    MojoExecution mojoExecution = executionPlan.get(0);    assertNotNull(mojoExecution);    assertEquals("org.apache.maven.plugins", mojoExecution.getMojoDescriptor().getPluginDescriptor().getGroupId());    assertEquals("maven-clean-plugin", mojoExecution.getMojoDescriptor().getPluginDescriptor().getArtifactId());    assertEquals("0.1", mojoExecution.getMojoDescriptor().getPluginDescriptor().getVersion());}
03268dc394c3d514b49abb086a7aac9ba288055620902e0bba83e6ddd8b78abb
testCalculationOfBuildPlanWithIndividualTaskOfTheCleanCleanGoal
public void testCalculationOfBuildPlanWithIndividualTaskOfTheCleanCleanGoal() throws Exception
{            File pom = getProject("project-basic");    MavenSession session = createMavenSession(pom);    assertEquals("project-basic", session.getCurrentProject().getArtifactId());    assertEquals("1.0", session.getCurrentProject().getVersion());    List<MojoExecution> executionPlan = getExecutions(calculateExecutionPlan(session, "clean:clean"));    assertEquals(1, executionPlan.size());    MojoExecution mojoExecution = executionPlan.get(0);    assertNotNull(mojoExecution);    assertEquals("org.apache.maven.plugins", mojoExecution.getMojoDescriptor().getPluginDescriptor().getGroupId());    assertEquals("maven-clean-plugin", mojoExecution.getMojoDescriptor().getPluginDescriptor().getArtifactId());    assertEquals("0.1", mojoExecution.getMojoDescriptor().getPluginDescriptor().getVersion());}
da52f76bf9b85c229f66137708e9545a283028fbc5075f0edb0124aa9340197a
getExecutions
 List<MojoExecution> getExecutions(MavenExecutionPlan mavenExecutionPlan)
{    List<MojoExecution> result = new ArrayList<>();    for (ExecutionPlanItem executionPlanItem : mavenExecutionPlan) {        result.add(executionPlanItem.getMojoExecution());    }    return result;}
8001297d80558e9e8e36ecf0da911f1053d78e7ecf57ad5aa8756962c04a373e
testCalculationOfBuildPlanTasksOfTheCleanLifecycleAndTheInstallLifecycle
public void testCalculationOfBuildPlanTasksOfTheCleanLifecycleAndTheInstallLifecycle() throws Exception
{    File pom = getProject("project-with-additional-lifecycle-elements");    MavenSession session = createMavenSession(pom);    assertEquals("project-with-additional-lifecycle-elements", session.getCurrentProject().getArtifactId());    assertEquals("1.0", session.getCurrentProject().getVersion());    List<MojoExecution> executionPlan = getExecutions(calculateExecutionPlan(session, "clean", "install"));                                                assertEquals(10, executionPlan.size());    assertEquals("clean:clean", executionPlan.get(0).getMojoDescriptor().getFullGoalName());    assertEquals("resources:resources", executionPlan.get(1).getMojoDescriptor().getFullGoalName());    assertEquals("compiler:compile", executionPlan.get(2).getMojoDescriptor().getFullGoalName());    assertEquals("it:generate-metadata", executionPlan.get(3).getMojoDescriptor().getFullGoalName());    assertEquals("resources:testResources", executionPlan.get(4).getMojoDescriptor().getFullGoalName());    assertEquals("compiler:testCompile", executionPlan.get(5).getMojoDescriptor().getFullGoalName());    assertEquals("it:generate-test-metadata", executionPlan.get(6).getMojoDescriptor().getFullGoalName());    assertEquals("surefire:test", executionPlan.get(7).getMojoDescriptor().getFullGoalName());    assertEquals("jar:jar", executionPlan.get(8).getMojoDescriptor().getFullGoalName());    assertEquals("install:install", executionPlan.get(9).getMojoDescriptor().getFullGoalName());}
c364fc363be04a0731bab716b81b1449e9f3571421acfb2e937f9b013416032e
testCalculationOfBuildPlanWithMultipleExecutionsOfModello
public void testCalculationOfBuildPlanWithMultipleExecutionsOfModello() throws Exception
{    File pom = getProject("project-with-multiple-executions");    MavenSession session = createMavenSession(pom);    assertEquals("project-with-multiple-executions", session.getCurrentProject().getArtifactId());    assertEquals("1.0.1", session.getCurrentProject().getVersion());    MavenExecutionPlan plan = calculateExecutionPlan(session, "clean", "install");    List<MojoExecution> executions = getExecutions(plan);                                                                        assertEquals(16, executions.size());    assertEquals("clean:clean", executions.get(0).getMojoDescriptor().getFullGoalName());    assertEquals("it:xpp3-writer", executions.get(1).getMojoDescriptor().getFullGoalName());    assertEquals("it:java", executions.get(2).getMojoDescriptor().getFullGoalName());    assertEquals("it:xpp3-reader", executions.get(3).getMojoDescriptor().getFullGoalName());    assertEquals("it:xpp3-writer", executions.get(4).getMojoDescriptor().getFullGoalName());    assertEquals("it:java", executions.get(5).getMojoDescriptor().getFullGoalName());    assertEquals("it:xpp3-reader", executions.get(6).getMojoDescriptor().getFullGoalName());    assertEquals("resources:resources", executions.get(7).getMojoDescriptor().getFullGoalName());    assertEquals("compiler:compile", executions.get(8).getMojoDescriptor().getFullGoalName());    assertEquals("plugin:descriptor", executions.get(9).getMojoDescriptor().getFullGoalName());    assertEquals("resources:testResources", executions.get(10).getMojoDescriptor().getFullGoalName());    assertEquals("compiler:testCompile", executions.get(11).getMojoDescriptor().getFullGoalName());    assertEquals("surefire:test", executions.get(12).getMojoDescriptor().getFullGoalName());    assertEquals("jar:jar", executions.get(13).getMojoDescriptor().getFullGoalName());    assertEquals("plugin:addPluginArtifactMetadata", executions.get(14).getMojoDescriptor().getFullGoalName());    assertEquals("install:install", executions.get(15).getMojoDescriptor().getFullGoalName());    assertEquals("src/main/mdo/remote-resources.mdo", new MojoExecutionXPathContainer(executions.get(1)).getValue("configuration/models[1]/model"));    assertEquals("src/main/mdo/supplemental-model.mdo", new MojoExecutionXPathContainer(executions.get(4)).getValue("configuration/models[1]/model"));}
22cec30c1edbcb653824521235b35b6042fa5b1b40951ebca17f1fd530943f42
testLifecycleQueryingUsingADefaultLifecyclePhase
public void testLifecycleQueryingUsingADefaultLifecyclePhase() throws Exception
{    File pom = getProject("project-with-additional-lifecycle-elements");    MavenSession session = createMavenSession(pom);    assertEquals("project-with-additional-lifecycle-elements", session.getCurrentProject().getArtifactId());    assertEquals("1.0", session.getCurrentProject().getVersion());    List<MojoExecution> executionPlan = getExecutions(calculateExecutionPlan(session, "package"));                                        assertEquals(8, executionPlan.size());    assertEquals("resources:resources", executionPlan.get(0).getMojoDescriptor().getFullGoalName());    assertEquals("compiler:compile", executionPlan.get(1).getMojoDescriptor().getFullGoalName());    assertEquals("it:generate-metadata", executionPlan.get(2).getMojoDescriptor().getFullGoalName());    assertEquals("resources:testResources", executionPlan.get(3).getMojoDescriptor().getFullGoalName());    assertEquals("compiler:testCompile", executionPlan.get(4).getMojoDescriptor().getFullGoalName());    assertEquals("it:generate-test-metadata", executionPlan.get(5).getMojoDescriptor().getFullGoalName());    assertEquals("surefire:test", executionPlan.get(6).getMojoDescriptor().getFullGoalName());    assertEquals("jar:jar", executionPlan.get(7).getMojoDescriptor().getFullGoalName());}
44039509bcad65982365348247b1db35cb8ce754f4b17fb4125811f7fd945572
testLifecyclePluginsRetrievalForDefaultLifecycle
public void testLifecyclePluginsRetrievalForDefaultLifecycle() throws Exception
{    List<Plugin> plugins = new ArrayList<>(lifecycleExecutor.getPluginsBoundByDefaultToAllLifecycles("jar"));    assertEquals(8, plugins.size());}
0901abdd2cb933d3bd46e272d2a65fa5fe34a885dcbfe0d338c88353cd0e1235
testPluginConfigurationCreation
public void testPluginConfigurationCreation() throws Exception
{    File pom = getProject("project-with-additional-lifecycle-elements");    MavenSession session = createMavenSession(pom);    MojoDescriptor mojoDescriptor = mojoDescriptorCreator.getMojoDescriptor("org.apache.maven.its.plugins:maven-it-plugin:0.1:java", session, session.getCurrentProject());    Xpp3Dom dom = MojoDescriptorCreator.convert(mojoDescriptor);    System.out.println(dom);}
a6333a3e1004df6886f935bc0b6936e99036a268ef931a0e085a9a5487f61aac
calculateExecutionPlan
 MavenExecutionPlan calculateExecutionPlan(MavenSession session, String... tasks) throws Exception
{    List<TaskSegment> taskSegments = lifeCycleTaskSegmentCalculator.calculateTaskSegments(session, Arrays.asList(tasks));    TaskSegment mergedSegment = new TaskSegment(false);    for (TaskSegment taskSegment : taskSegments) {        mergedSegment.getTasks().addAll(taskSegment.getTasks());    }    return lifeCycleExecutionPlanCalculator.calculateExecutionPlan(session, session.getCurrentProject(), mergedSegment.getTasks());}
360c79c9f69fa790cabc05b8aaabe328078705b5f7cfbd8eb1eaf4de2096c99d
testInvalidGoalName
public void testInvalidGoalName() throws Exception
{    File pom = getProject("project-basic");    MavenSession session = createMavenSession(pom);    try {        getExecutions(calculateExecutionPlan(session, "resources:"));        fail("expected a MojoNotFoundException");    } catch (MojoNotFoundException e) {        assertEquals("", e.getGoal());    }    try {        getExecutions(calculateExecutionPlan(session, "org.apache.maven.plugins:maven-resources-plugin:0.1:resources:toomany"));        fail("expected a MojoNotFoundException");    } catch (MojoNotFoundException e) {        assertEquals("resources:toomany", e.getGoal());    }}
acc38e93bc36b0717ea6ded267e8503756b215c6dcab9c6dc7b0caa0075daaea
testPluginPrefixRetrieval
public void testPluginPrefixRetrieval() throws Exception
{    File pom = getProject("project-basic");    MavenSession session = createMavenSession(pom);    Plugin plugin = mojoDescriptorCreator.findPluginForPrefix("resources", session);    assertEquals("org.apache.maven.plugins", plugin.getGroupId());    assertEquals("maven-resources-plugin", plugin.getArtifactId());}
100e56727b21cb3a2cfb8a44480eabd6ed34394d1d5f38ae545fb73716ab4859
testFindingPluginPrefixforCleanClean
public void testFindingPluginPrefixforCleanClean() throws Exception
{    File pom = getProject("project-basic");    MavenSession session = createMavenSession(pom);    Plugin plugin = mojoDescriptorCreator.findPluginForPrefix("clean", session);    assertNotNull(plugin);}
e030ca2043670428a01b4ef9057f819ee26a3c0e598d0c792cbf005a3c52795e
testSetupMojoExecution
public void testSetupMojoExecution() throws Exception
{    File pom = getProject("mojo-configuration");    MavenSession session = createMavenSession(pom);    LifecycleTask task = new LifecycleTask("generate-sources");    MavenExecutionPlan executionPlan = lifeCycleExecutionPlanCalculator.calculateExecutionPlan(session, session.getCurrentProject(), Arrays.asList((Object) task), false);    MojoExecution execution = executionPlan.getMojoExecutions().get(0);    assertEquals(execution.toString(), "maven-it-plugin", execution.getArtifactId());    assertNull(execution.getConfiguration());    lifeCycleExecutionPlanCalculator.setupMojoExecution(session, session.getCurrentProject(), execution);    assertNotNull(execution.getConfiguration());    assertEquals("1.0", execution.getConfiguration().getChild("version").getAttribute("default-value"));}
57fb53b035ff77c49f05c42b1adb5d6cf025f9a7d5922ecbfc6bfb0b4b8e3800
testExecutionListeners
public void testExecutionListeners() throws Exception
{    final File pom = getProject("project-basic");    final MavenSession session = createMavenSession(pom);    session.setProjectDependencyGraph(new ProjectDependencyGraph() {        public List<MavenProject> getUpstreamProjects(MavenProject project, boolean transitive) {            return Collections.emptyList();        }        public List<MavenProject> getAllProjects() {            return session.getAllProjects();        }        public List<MavenProject> getSortedProjects() {            return Collections.singletonList(session.getCurrentProject());        }        public List<MavenProject> getDownstreamProjects(MavenProject project, boolean transitive) {            return Collections.emptyList();        }        public java.util.List<MavenProject> getAllSortedProjects() {            return Collections.emptyList();        }    });    final List<String> log = new ArrayList<>();    MojoExecutionListener mojoListener = new MojoExecutionListener() {        public void beforeMojoExecution(MojoExecutionEvent event) throws MojoExecutionException {            assertNotNull(event.getSession());            assertNotNull(event.getProject());            assertNotNull(event.getExecution());            assertNotNull(event.getMojo());            assertNull(event.getCause());            log.add("beforeMojoExecution " + event.getProject().getArtifactId() + ":" + event.getExecution().getExecutionId());        }        public void afterMojoExecutionSuccess(MojoExecutionEvent event) throws MojoExecutionException {            assertNotNull(event.getSession());            assertNotNull(event.getProject());            assertNotNull(event.getExecution());            assertNotNull(event.getMojo());            assertNull(event.getCause());            log.add("afterMojoExecutionSuccess " + event.getProject().getArtifactId() + ":" + event.getExecution().getExecutionId());        }        public void afterExecutionFailure(MojoExecutionEvent event) {            assertNotNull(event.getSession());            assertNotNull(event.getProject());            assertNotNull(event.getExecution());            assertNotNull(event.getMojo());            assertNotNull(event.getCause());            log.add("afterExecutionFailure " + event.getProject().getArtifactId() + ":" + event.getExecution().getExecutionId());        }    };    ProjectExecutionListener projectListener = new ProjectExecutionListener() {        public void beforeProjectExecution(ProjectExecutionEvent event) throws LifecycleExecutionException {            assertNotNull(event.getSession());            assertNotNull(event.getProject());            assertNull(event.getExecutionPlan());            assertNull(event.getCause());            log.add("beforeProjectExecution " + event.getProject().getArtifactId());        }        public void beforeProjectLifecycleExecution(ProjectExecutionEvent event) throws LifecycleExecutionException {            assertNotNull(event.getSession());            assertNotNull(event.getProject());            assertNotNull(event.getExecutionPlan());            assertNull(event.getCause());            log.add("beforeProjectLifecycleExecution " + event.getProject().getArtifactId());        }        public void afterProjectExecutionSuccess(ProjectExecutionEvent event) throws LifecycleExecutionException {            assertNotNull(event.getSession());            assertNotNull(event.getProject());            assertNotNull(event.getExecutionPlan());            assertNull(event.getCause());            log.add("afterProjectExecutionSuccess " + event.getProject().getArtifactId());        }        public void afterProjectExecutionFailure(ProjectExecutionEvent event) {            assertNotNull(event.getSession());            assertNotNull(event.getProject());            assertNull(event.getExecutionPlan());            assertNotNull(event.getCause());            log.add("afterProjectExecutionFailure " + event.getProject().getArtifactId());        }    };    lookup(DelegatingProjectExecutionListener.class).addProjectExecutionListener(projectListener);    lookup(DelegatingMojoExecutionListener.class).addMojoExecutionListener(mojoListener);    try {        lifecycleExecutor.execute(session);    } finally {        lookup(DelegatingProjectExecutionListener.class).removeProjectExecutionListener(projectListener);        lookup(DelegatingMojoExecutionListener.class).removeMojoExecutionListener(mojoListener);    }    List<String> expectedLog =     Arrays.asList(    "beforeProjectExecution project-basic",     "beforeProjectLifecycleExecution project-basic",     "beforeMojoExecution project-basic:default-resources",     "afterMojoExecutionSuccess project-basic:default-resources",     "beforeMojoExecution project-basic:default-compile",     "afterMojoExecutionSuccess project-basic:default-compile",     "beforeMojoExecution project-basic:default-testResources",     "afterMojoExecutionSuccess project-basic:default-testResources",     "beforeMojoExecution project-basic:default-testCompile",     "afterMojoExecutionSuccess project-basic:default-testCompile",     "beforeMojoExecution project-basic:default-test",     "afterMojoExecutionSuccess project-basic:default-test",     "beforeMojoExecution project-basic:default-jar",     "afterMojoExecutionSuccess project-basic:default-jar",     "afterProjectExecutionSuccess project-basic");    assertEventLog(expectedLog, log);}
71332a05a314f8bebde1320c8c9579682bfd5a09833a5930a06e1aa90f0156bb
getUpstreamProjects
public List<MavenProject> getUpstreamProjects(MavenProject project, boolean transitive)
{    return Collections.emptyList();}
9e7741414e346a2cf4af4830382cffb79f0ed8ac03e56602c02911d208de5fd7
getAllProjects
public List<MavenProject> getAllProjects()
{    return session.getAllProjects();}
a741787f77d01caf822782e4c4aea27986cab8e6d656656dab23943bae6d8c3a
getSortedProjects
public List<MavenProject> getSortedProjects()
{    return Collections.singletonList(session.getCurrentProject());}
1d2b3daf6e7456d60fb80c4e6c5905b83fc04e5cc5cfc2e77f0b0da143a4b56f
getDownstreamProjects
public List<MavenProject> getDownstreamProjects(MavenProject project, boolean transitive)
{    return Collections.emptyList();}
c40e26f52b82c8c4dcac743d6a55dccda0a44f876de57716b6e21c2ed18b13ca
getAllSortedProjects
public java.util.List<MavenProject> getAllSortedProjects()
{    return Collections.emptyList();}
1d6e13f31541661fe5145780de30d54a71cb871a2779410243b78fff5482ba95
beforeMojoExecution
public void beforeMojoExecution(MojoExecutionEvent event) throws MojoExecutionException
{    assertNotNull(event.getSession());    assertNotNull(event.getProject());    assertNotNull(event.getExecution());    assertNotNull(event.getMojo());    assertNull(event.getCause());    log.add("beforeMojoExecution " + event.getProject().getArtifactId() + ":" + event.getExecution().getExecutionId());}
c540c18000ae2dd7a797635f058a6aefc5bf7d27fde2f8cec0e6b58ab7af62f3
afterMojoExecutionSuccess
public void afterMojoExecutionSuccess(MojoExecutionEvent event) throws MojoExecutionException
{    assertNotNull(event.getSession());    assertNotNull(event.getProject());    assertNotNull(event.getExecution());    assertNotNull(event.getMojo());    assertNull(event.getCause());    log.add("afterMojoExecutionSuccess " + event.getProject().getArtifactId() + ":" + event.getExecution().getExecutionId());}
a1ffbcc3ebfda4ce7f644850464e6aaf0a9cc0e544556c4d3ca31130ded7d890
afterExecutionFailure
public void afterExecutionFailure(MojoExecutionEvent event)
{    assertNotNull(event.getSession());    assertNotNull(event.getProject());    assertNotNull(event.getExecution());    assertNotNull(event.getMojo());    assertNotNull(event.getCause());    log.add("afterExecutionFailure " + event.getProject().getArtifactId() + ":" + event.getExecution().getExecutionId());}
bc03a8cbbe8c058b62972712e49ae0297734812b2845987e21840bb9d8a0bb35
beforeProjectExecution
public void beforeProjectExecution(ProjectExecutionEvent event) throws LifecycleExecutionException
{    assertNotNull(event.getSession());    assertNotNull(event.getProject());    assertNull(event.getExecutionPlan());    assertNull(event.getCause());    log.add("beforeProjectExecution " + event.getProject().getArtifactId());}
fe1cc24f207e06fcf8126b6728d51e29bf6a81ed4c6c7ca150e00938087eeb50
beforeProjectLifecycleExecution
public void beforeProjectLifecycleExecution(ProjectExecutionEvent event) throws LifecycleExecutionException
{    assertNotNull(event.getSession());    assertNotNull(event.getProject());    assertNotNull(event.getExecutionPlan());    assertNull(event.getCause());    log.add("beforeProjectLifecycleExecution " + event.getProject().getArtifactId());}
084a5caee7db5136abb1db4a0093438a0e4f6f8a151216423eb95db3f69ea360
afterProjectExecutionSuccess
public void afterProjectExecutionSuccess(ProjectExecutionEvent event) throws LifecycleExecutionException
{    assertNotNull(event.getSession());    assertNotNull(event.getProject());    assertNotNull(event.getExecutionPlan());    assertNull(event.getCause());    log.add("afterProjectExecutionSuccess " + event.getProject().getArtifactId());}
515cb1daced4439666ef611def0e2af8dc95d02a6fcc4bb0121dcf7c36df1489
afterProjectExecutionFailure
public void afterProjectExecutionFailure(ProjectExecutionEvent event)
{    assertNotNull(event.getSession());    assertNotNull(event.getProject());    assertNull(event.getExecutionPlan());    assertNotNull(event.getCause());    log.add("afterProjectExecutionFailure " + event.getProject().getArtifactId());}
487d2fc034530b87afef3a6c7cce696e628f6d0577c12e86e5b1785b80495d7c
assertEventLog
private static void assertEventLog(List<String> expectedList, List<String> actualList)
{    assertEquals(toString(expectedList), toString(actualList));}
62e6ed0df7ba6e3622fa4dcb5d1e4c0ad7e6a4dbbec210a5ab6cf88e26407c46
toString
private static String toString(List<String> lines)
{    StringBuilder sb = new StringBuilder();    for (String line : lines) {        sb.append(line).append('\n');    }    return sb.toString();}
cd89046fb8911fa4a6595be8ff9a8156398ebfad5d0c95e20ca6a68135c4b5d2
testToString
public void testToString()
{    LifecyclePhase phase = new LifecyclePhase();    assertEquals("", phase.toString());    LifecycleMojo mojo1 = new LifecycleMojo();    mojo1.setGoal("jar:jar");    phase.setMojos(Arrays.asList(mojo1));    assertEquals("jar:jar", phase.toString());    LifecycleMojo mojo2 = new LifecycleMojo();    mojo2.setGoal("war:war");    phase.setMojos(Arrays.asList(mojo1, mojo2));    assertEquals("jar:jar,war:war", phase.toString());}
ccc71e78604747a6c2ff387c36191673e2e448a9e206301aa6f8960c681f52d9
testSet
public void testSet()
{    LifecyclePhase phase = new LifecyclePhase();    assertNull(phase.getMojos());    phase.set("");    assertNotNull(phase.getMojos());    assertEquals(0, phase.getMojos().size());    phase.set("jar:jar, war:war");    List<LifecycleMojo> mojos = phase.getMojos();    assertNotNull(mojos);    assertEquals(2, mojos.size());    LifecycleMojo mojo1 = mojos.get(0);    assertNotNull(mojo1);    assertEquals("jar:jar", mojo1.getGoal());    LifecycleMojo mojo2 = mojos.get(1);    assertNotNull(mojo2);    assertEquals("war:war", mojo2.getGoal());}
1c08984077f62510477b27f06d835c3d61d190deca5a24209b6668130818f7c4
testFindLastInPhase
public void testFindLastInPhase() throws Exception
{    MavenExecutionPlan plan = LifecycleExecutionPlanCalculatorStub.getProjectAExceutionPlan();    ExecutionPlanItem expected = plan.findLastInPhase("package");        ExecutionPlanItem beerPhase = plan.findLastInPhase("BEER");    assertEquals(expected, beerPhase);    assertNotNull(expected);}
fad33d50ec461a60fdbb0b48f7b8c70619d6891f5894eb5e20c5be62795ffd1c
testThreadSafeMojos
public void testThreadSafeMojos() throws Exception
{    MavenExecutionPlan plan = LifecycleExecutionPlanCalculatorStub.getProjectAExceutionPlan();    final Set<Plugin> unSafePlugins = plan.getNonThreadSafePlugins();        assertEquals(plan.size() - 1, unSafePlugins.size());}
61b3e1cd57d0019b09df2d928ec9c185b3e4ba747b44c103c7b155dbc8776812
testFindLastWhenFirst
public void testFindLastWhenFirst() throws Exception
{    MavenExecutionPlan plan = LifecycleExecutionPlanCalculatorStub.getProjectAExceutionPlan();    ExecutionPlanItem beerPhase = plan.findLastInPhase(    LifecycleExecutionPlanCalculatorStub.VALIDATE.getPhase());    assertNull(beerPhase);}
e2a78c9cc6aa5e5dc03e162ab2415d3de2a8e74e24b6bc09d7ba71d57b48892b
testFindLastInPhaseMisc
public void testFindLastInPhaseMisc() throws Exception
{    MavenExecutionPlan plan = LifecycleExecutionPlanCalculatorStub.getProjectAExceutionPlan();    assertNull(plan.findLastInPhase("pacXkage"));        assertNotNull(plan.findLastInPhase(LifecycleExecutionPlanCalculatorStub.INITIALIZE.getPhase()));}
9e5bb14c5b55f2d61697cb252cce0e217fc9284c0d9dec040f3115ac285051a7
getIteratorForXPathExpression
public Iterator<?> getIteratorForXPathExpression(String expression)
{    return context.iterate(expression);}
56679db347db2cba390d2d8d4b47c29a56cac924182c31d6c66a5ca74848c517
containsXPathExpression
public boolean containsXPathExpression(String expression)
{    return context.getValue(expression) != null;}
11847c6fc1ea657a09fb97cfea92c7688683b7b646d9a6d928e2358295df5188
getValue
public Object getValue(String expression)
{    try {        return context.getValue(expression);    } catch (JXPathNotFoundException e) {        return null;    }}
65349353f767684772139a691cc23a0efb6e53ef6487560b16e49a0148e16e3b
xPathExpressionEqualsValue
public boolean xPathExpressionEqualsValue(String expression, String value)
{    return context.getValue(expression) != null && context.getValue(expression).equals(value);}
3bae0fbb04f88f9cea8963fc4a88fa73f3e55320947230ed49ac77beee852dc3
afterProjectsRead
public void afterProjectsRead(MavenSession session)
{    MavenProject project = session.getProjects().get(0);    Dependency dependency = new Dependency();    dependency.setArtifactId(INJECTED_ARTIFACT_ID);    dependency.setGroupId("foo");    dependency.setVersion("1.2.3");    dependency.setScope("system");    try {        dependency.setSystemPath(new File("src/test/projects/lifecycle-executor/project-with-additional-lifecycle-elements/pom.xml").getCanonicalPath());    } catch (IOException e) {        throw new RuntimeException(e);    }    project.getModel().addDependency(dependency);}
caf2596363b68b06c0aae31f222aeb2910ce9b7b368f5ec17a6690a7729e4dbe
afterSessionStart
public void afterSessionStart(MavenSession session)
{    session.getUserProperties().setProperty("injected", "bar");}
3bae0fbb04f88f9cea8963fc4a88fa73f3e55320947230ed49ac77beee852dc3
afterProjectsRead
public void afterProjectsRead(MavenSession session)
{    injectReactorDependency(session.getProjects(), "module-a", "module-b");}
486f1d07b80bbdb4bb8879d881eee56b3870c6df572abc70a4ae91970aa7e487
injectReactorDependency
private void injectReactorDependency(List<MavenProject> projects, String moduleFrom, String moduleTo)
{    for (MavenProject project : projects) {        if (moduleFrom.equals(project.getArtifactId())) {            Dependency dependency = new Dependency();            dependency.setArtifactId(moduleTo);            dependency.setGroupId(project.getGroupId());            dependency.setVersion(project.getVersion());            project.getModel().addDependency(dependency);        }    }}
70f266283b07b44b5a2a9281630f952e1856f428891a14bc4d234bb264bd127f
setupContainer
protected void setupContainer()
{    super.setupContainer();}
5cb41634139dccbc03acc9c3d530014417a0a8675a81e3d64379b8ce64bb81b2
getProjectsDirectory
protected String getProjectsDirectory()
{    return "src/test/projects/lifecycle-listener";}
76b25085a2094378be6c308563eb35b646a3505a76b9714decfda4ebc7cfd2f4
testDependencyInjection
public void testDependencyInjection() throws Exception
{    PlexusContainer container = getContainer();    ComponentDescriptor<? extends AbstractMavenLifecycleParticipant> cd = new ComponentDescriptor<>(InjectDependencyLifecycleListener.class, container.getContainerRealm());    cd.setRoleClass(AbstractMavenLifecycleParticipant.class);    container.addComponentDescriptor(cd);    Maven maven = container.lookup(Maven.class);    File pom = getProject("lifecycle-listener-dependency-injection");    MavenExecutionRequest request = createMavenExecutionRequest(pom);    request.setGoals(Arrays.asList("validate"));    MavenExecutionResult result = maven.execute(request);    assertFalse(result.getExceptions().toString(), result.hasExceptions());    MavenProject project = result.getProject();    assertEquals("bar", project.getProperties().getProperty("foo"));    ArrayList<Artifact> artifacts = new ArrayList<>(project.getArtifacts());    assertEquals(1, artifacts.size());    assertEquals(INJECTED_ARTIFACT_ID, artifacts.get(0).getArtifactId());}
33ceaf00c8a283352a0b9c799b659096d53c41ca97706fb3476aa9cfeb43090d
testReactorDependencyInjection
public void testReactorDependencyInjection() throws Exception
{    List<String> reactorOrder = getReactorOrder("lifecycle-participant-reactor-dependency-injection", InjectReactorDependency.class);    assertEquals(Arrays.asList("parent", "module-b", "module-a"), reactorOrder);}
237e293c6b8177f8ced84819d5b92f6001f0609e0f35775aa01dfc28162e5f28
getReactorOrder
private List<String> getReactorOrder(String testProject, Class<T> participant) throws Exception
{    PlexusContainer container = getContainer();    ComponentDescriptor<T> cd = new ComponentDescriptor<>(participant, container.getContainerRealm());    cd.setRoleClass(AbstractMavenLifecycleParticipant.class);    container.addComponentDescriptor(cd);    Maven maven = container.lookup(Maven.class);    File pom = getProject(testProject);    MavenExecutionRequest request = createMavenExecutionRequest(pom);    request.setGoals(Arrays.asList("validate"));    MavenExecutionResult result = maven.execute(request);    assertFalse(result.getExceptions().toString(), result.hasExceptions());    List<String> order = new ArrayList<>();    for (MavenProject project : result.getTopologicallySortedProjects()) {        order.add(project.getArtifactId());    }    return order;}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();    maven = lookup(Maven.class);    exceptionHandler = lookup(ExceptionHandler.class);}
68bbf6c94fbad4862990669ea582b65c28678087c2377b2c3fb0948d54293af4
tearDown
protected void tearDown() throws Exception
{    maven = null;    exceptionHandler = null;    super.tearDown();}
5cb41634139dccbc03acc9c3d530014417a0a8675a81e3d64379b8ce64bb81b2
getProjectsDirectory
protected String getProjectsDirectory()
{    return "src/test/projects/lifecycle-executor";}
029f137da77ddbecb0eb648d5561b806ad91fd24dcc0f315366474e76f8775e5
testLifecycleExecutionUsingADefaultLifecyclePhase
public void testLifecycleExecutionUsingADefaultLifecyclePhase() throws Exception
{/*        File pom = getProject( "project-with-additional-lifecycle-elements" );        MavenExecutionRequest request = createMavenExecutionRequest( pom );        MavenExecutionResult result = maven.execute( request );        if ( result.hasExceptions() )        {            ExceptionSummary es = exceptionHandler.handleException( result.getExceptions().get( 0 ) );            System.out.println( es.getMessage() );            es.getException().printStackTrace();            fail( "Maven did not execute correctly." );        }        */}
2a5279f801912d155fb212ee7be42a6a16c5f1adc5c5bdf8ab0de6bf01c23d11
testSetSession
public void testSetSession() throws Exception
{    MavenExecutionRequest mavenExecutionRequest = new DefaultMavenExecutionRequest();    MavenSession m1 = new MavenSession(null, null, mavenExecutionRequest, null);    defaultLegacySupport.setSession(m1);    MyRunnable myRunnable = new MyRunnable();    Thread thread = new Thread(myRunnable);    thread.start();    MavenSession m2 = new MavenSession(null, null, mavenExecutionRequest, null);    defaultLegacySupport.setSession(m2);    latch.countDown();    thread.join();    assertNull(myRunnable.getSession());}
4560d80c2474cc2770be19fbc06c60741920c59992e6b13524f8a5b688ec285a
run
public void run()
{    try {        latch.await();    } catch (InterruptedException ignore) {        }    session = defaultLegacySupport.getSession();}
5f9beff804d491307ef6fcfa2f8b51cce53a3674d5c1d3d683eb56a19c4083d7
getSession
public MavenSession getSession()
{    return session;}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();    pluginManager = (DefaultBuildPluginManager) lookup(BuildPluginManager.class);}
68bbf6c94fbad4862990669ea582b65c28678087c2377b2c3fb0948d54293af4
tearDown
protected void tearDown() throws Exception
{    pluginManager = null;    super.tearDown();}
5cb41634139dccbc03acc9c3d530014417a0a8675a81e3d64379b8ce64bb81b2
getProjectsDirectory
protected String getProjectsDirectory()
{    return "src/test/projects/plugin-manager";}
77ae93b2c0c31040cca67cc4c727fa207b567c8974056ff2e1fc988ccdbd3123
testPluginLoading
public void testPluginLoading() throws Exception
{    MavenSession session = createMavenSession(null);    Plugin plugin = new Plugin();    plugin.setGroupId("org.apache.maven.its.plugins");    plugin.setArtifactId("maven-it-plugin");    plugin.setVersion("0.1");    PluginDescriptor pluginDescriptor = pluginManager.loadPlugin(plugin, session.getCurrentProject().getRemotePluginRepositories(), session.getRepositorySession());    assertNotNull(pluginDescriptor);}
d77b48115a6ac7725b39d94a2556d726aa32dd9a00fb63497541cf63d8d8f11e
testMojoDescriptorRetrieval
public void testMojoDescriptorRetrieval() throws Exception
{    MavenSession session = createMavenSession(null);    String goal = "it";    Plugin plugin = new Plugin();    plugin.setGroupId("org.apache.maven.its.plugins");    plugin.setArtifactId("maven-it-plugin");    plugin.setVersion("0.1");    MojoDescriptor mojoDescriptor = pluginManager.getMojoDescriptor(plugin, goal, session.getCurrentProject().getRemotePluginRepositories(), session.getRepositorySession());    assertNotNull(mojoDescriptor);    assertEquals(goal, mojoDescriptor.getGoal());            PluginDescriptor pluginDescriptor = mojoDescriptor.getPluginDescriptor();    assertNotNull(pluginDescriptor);    assertEquals("org.apache.maven.its.plugins", pluginDescriptor.getGroupId());    assertEquals("maven-it-plugin", pluginDescriptor.getArtifactId());    assertEquals("0.1", pluginDescriptor.getVersion());}
6c6ee5ce66468a87a992536b6fe3e986f65cea2049a640a1733adf6e7e56d2b5
testRemoteResourcesPlugin
public void testRemoteResourcesPlugin() throws Exception
{/*        This will not work until the RR plugin is released to get rid of the binding to the reporting exception which is a mistake.        This happens after removing the reporting API from the core:        java.lang.NoClassDefFoundError: org/apache/maven/reporting/MavenReportException        MavenSession session = createMavenSession( getProject( "project-with-inheritance" ) );        String goal = "process";        Plugin plugin = new Plugin();        plugin.setGroupId( "org.apache.maven.plugins" );        plugin.setArtifactId( "maven-remote-resources-plugin" );        plugin.setVersion( "1.0-beta-2" );        MojoDescriptor mojoDescriptor = pluginManager.getMojoDescriptor( plugin, goal, session.getCurrentProject(), session.getLocalRepository() );        assertPluginDescriptor( mojoDescriptor, "org.apache.maven.plugins", "maven-remote-resources-plugin", "1.0-beta-2" );        MojoExecution mojoExecution = new MojoExecution( mojoDescriptor );        pluginManager.executeMojo( session, mojoExecution );        */}
b5f8158b5baf80ebd83acf62f8ede882352874c3c8c2596c151675389b6d4f2b
testSurefirePlugin
public void testSurefirePlugin() throws Exception
{/*        MavenSession session = createMavenSession( getProject( "project-with-inheritance" ) );        String goal = "test";        Plugin plugin = new Plugin();        plugin.setGroupId( "org.apache.maven.plugins" );        plugin.setArtifactId( "maven-surefire-plugin" );        plugin.setVersion( "2.4.2" );                MojoDescriptor mojoDescriptor = pluginManager.getMojoDescriptor( plugin, goal, session.getLocalRepository(), session.getCurrentProject().getPluginArtifactRepositories() );        assertPluginDescriptor( mojoDescriptor, "org.apache.maven.plugins", "maven-surefire-plugin", "2.4.2" );        System.out.println( session.getCurrentProject().getBuild().getPluginsAsMap() );        Xpp3Dom configuration = (Xpp3Dom) session.getCurrentProject().getBuild().getPluginsAsMap().get( plugin.getKey() ).getExecutions().get( 0 ).getConfiguration();        MojoExecution mojoExecution = new MojoExecution( mojoDescriptor, configuration );        pluginManager.executeMojo( session, mojoExecution );        */}
517c82cad7d80c5cb7e7f9104301c9205cf8685b7f157537fedc0144f1284a9c
testMojoConfigurationIsMergedCorrectly
public void testMojoConfigurationIsMergedCorrectly() throws Exception
{}
1e0247eca6e4ac6f7067972652adb0b8030c3e0a2791069e3fb65d3f0455e17a
testMojoWhereInternallyStatedDependencyIsOverriddenByProject
public void testMojoWhereInternallyStatedDependencyIsOverriddenByProject() throws Exception
{}
64393af92d58004cdae4d7c9108592d5aa1ce598a6dec1580b547af372ec0c0d
testMojoThatIsPresentInTheCurrentBuild
public void testMojoThatIsPresentInTheCurrentBuild() throws Exception
{}
78f56490881790784ed0b383c6230e333241dcfe923d49a574f51c3a595f6cb3
testAggregatorMojo
public void testAggregatorMojo() throws Exception
{}
9335c57e1c57b1406f5bc0daa5567f7088b421a638b507d35ada8f3632f11da7
testMojoThatRequiresExecutionToAGivenPhaseBeforeExecutingItself
public void testMojoThatRequiresExecutionToAGivenPhaseBeforeExecutingItself() throws Exception
{}
c8f41d156b1dbd3801aa8be5f1d25945cfa30b94a6ac07b8fc2dee0458b822b8
testThatPluginDependencyThatHasSystemScopeIsResolved
public void testThatPluginDependencyThatHasSystemScopeIsResolved() throws Exception
{    MavenSession session = createMavenSession(getProject("project-contributing-system-scope-plugin-dep"));    MavenProject project = session.getCurrentProject();    Plugin plugin = project.getPlugin("org.apache.maven.its.plugins:maven-it-plugin");    RepositoryRequest repositoryRequest = new DefaultRepositoryRequest();    repositoryRequest.setLocalRepository(getLocalRepository());    repositoryRequest.setRemoteRepositories(getPluginArtifactRepositories());    PluginDescriptor pluginDescriptor = pluginManager.loadPlugin(plugin, session.getCurrentProject().getRemotePluginRepositories(), session.getRepositorySession());    pluginManager.getPluginRealm(session, pluginDescriptor);    List<Artifact> artifacts = pluginDescriptor.getArtifacts();    for (Artifact a : artifacts) {        if (a.getGroupId().equals("org.apache.maven.its.mng3586") && a.getArtifactId().equals("tools")) {                        return;        }    }    fail("Can't find the system scoped dependency in the plugin artifacts.");}
d3a3c8f800432485ecc4e61147a59faf850361a66f537460e7fbd135f3847da8
assertPluginDescriptor
protected void assertPluginDescriptor(MojoDescriptor mojoDescriptor, String groupId, String artifactId, String version)
{    assertNotNull(mojoDescriptor);    PluginDescriptor pd = mojoDescriptor.getPluginDescriptor();    assertNotNull(pd);    assertEquals(groupId, pd.getGroupId());    assertEquals(artifactId, pd.getArtifactId());    assertEquals(version, pd.getVersion());}
b6a92af21d70b472ea66f2f6edcf9262592feb181927daae7f420a369e097f7d
testPluginRealmCache
public void testPluginRealmCache() throws Exception
{    RepositoryRequest repositoryRequest = new DefaultRepositoryRequest();    repositoryRequest.setLocalRepository(getLocalRepository());    repositoryRequest.setRemoteRepositories(getPluginArtifactRepositories());        MavenSession session = createMavenSession(getProject("project-contributing-system-scope-plugin-dep"));    MavenProject project = session.getCurrentProject();    Plugin plugin = project.getPlugin("org.apache.maven.its.plugins:maven-it-plugin");    PluginDescriptor pluginDescriptor = pluginManager.loadPlugin(plugin, session.getCurrentProject().getRemotePluginRepositories(), session.getRepositorySession());    pluginManager.getPluginRealm(session, pluginDescriptor);    assertEquals(1, pluginDescriptor.getDependencies().size());    for (ComponentDescriptor<?> descriptor : pluginDescriptor.getComponents()) {        assertNotNull(descriptor.getRealm());        assertNotNull(descriptor.getImplementationClass());    }        session = createMavenSession(getProject("project-contributing-system-scope-plugin-dep"));    project = session.getCurrentProject();    plugin = project.getPlugin("org.apache.maven.its.plugins:maven-it-plugin");    pluginDescriptor = pluginManager.loadPlugin(plugin, session.getCurrentProject().getRemotePluginRepositories(), session.getRepositorySession());    pluginManager.getPluginRealm(session, pluginDescriptor);    assertEquals(1, pluginDescriptor.getDependencies().size());    for (ComponentDescriptor<?> descriptor : pluginDescriptor.getComponents()) {        assertNotNull(descriptor.getRealm());        assertNotNull(descriptor.getImplementationClass());    }}
c61119d74c23675c1b979af90fbf36130d7fc894634281ce795a667fd8616d6d
testBuildExtensionsPluginLoading
public void testBuildExtensionsPluginLoading() throws Exception
{    RepositoryRequest repositoryRequest = new DefaultRepositoryRequest();    repositoryRequest.setLocalRepository(getLocalRepository());    repositoryRequest.setRemoteRepositories(getPluginArtifactRepositories());        MavenSession session = createMavenSession(getProject("project-with-build-extensions-plugin"));    MavenProject project = session.getCurrentProject();    Plugin plugin = project.getPlugin("org.apache.maven.its.plugins:maven-it-plugin");    PluginDescriptor pluginDescriptor = pluginManager.loadPlugin(plugin, session.getCurrentProject().getRemotePluginRepositories(), session.getRepositorySession());    ClassRealm pluginRealm = pluginManager.getPluginRealm(session, pluginDescriptor);    assertEquals(pluginRealm, pluginDescriptor.getComponents().get(0).getRealm());}
8e2c143778296fc62e4886c13c36e2fb3310ca2e877ffeae093fd3869a44fff7
testMissingRequiredStringArrayTypeParameter
public void testMissingRequiredStringArrayTypeParameter()
{    MojoDescriptor mojoDescriptor = new MojoDescriptor();    mojoDescriptor.setGoal("goal");    PluginDescriptor pluginDescriptor = new PluginDescriptor();    pluginDescriptor.setGoalPrefix("goalPrefix");    pluginDescriptor.setArtifactId("artifactId");    mojoDescriptor.setPluginDescriptor(pluginDescriptor);    Parameter parameter = new Parameter();    parameter.setType("java.lang.String[]");    parameter.setName("toAddresses");    parameter.setRequired(true);    PluginParameterException exception = new PluginParameterException(mojoDescriptor, Collections.singletonList(parameter));    assertEquals("One or more required plugin parameters are invalid/missing for 'goalPrefix:goal'\n" + "\n" + "[0] Inside the definition for plugin 'artifactId', specify the following:\n" + "\n" + "<configuration>\n" + "  ...\n" + "  <toAddresses>\n" + "    <item>VALUE</item>\n" + "  </toAddresses>\n" + "</configuration>.\n", exception.buildDiagnosticMessage());}
7e878d26e0b54ff368d9dce71ce2cf39ecce3d706dad061c19d5fb7894e8f933
testMissingRequiredCollectionTypeParameter
public void testMissingRequiredCollectionTypeParameter()
{    MojoDescriptor mojoDescriptor = new MojoDescriptor();    mojoDescriptor.setGoal("goal");    PluginDescriptor pluginDescriptor = new PluginDescriptor();    pluginDescriptor.setGoalPrefix("goalPrefix");    pluginDescriptor.setArtifactId("artifactId");    mojoDescriptor.setPluginDescriptor(pluginDescriptor);    Parameter parameter = new Parameter();    parameter.setType("java.util.List");    parameter.setName("toAddresses");    parameter.setRequired(true);    PluginParameterException exception = new PluginParameterException(mojoDescriptor, Collections.singletonList(parameter));    assertEquals("One or more required plugin parameters are invalid/missing for 'goalPrefix:goal'\n" + "\n" + "[0] Inside the definition for plugin 'artifactId', specify the following:\n" + "\n" + "<configuration>\n" + "  ...\n" + "  <toAddresses>\n" + "    <item>VALUE</item>\n" + "  </toAddresses>\n" + "</configuration>.\n", exception.buildDiagnosticMessage());}
e9b2b1a6e01f1024897a115f337ecae20e31eafa84971ea0e26c1cd735083bda
testMissingRequiredMapTypeParameter
public void testMissingRequiredMapTypeParameter()
{    MojoDescriptor mojoDescriptor = new MojoDescriptor();    mojoDescriptor.setGoal("goal");    PluginDescriptor pluginDescriptor = new PluginDescriptor();    pluginDescriptor.setGoalPrefix("goalPrefix");    pluginDescriptor.setArtifactId("artifactId");    mojoDescriptor.setPluginDescriptor(pluginDescriptor);    Parameter parameter = new Parameter();    parameter.setType("java.util.Map");    parameter.setName("toAddresses");    parameter.setRequired(true);    PluginParameterException exception = new PluginParameterException(mojoDescriptor, Collections.singletonList(parameter));    assertEquals("One or more required plugin parameters are invalid/missing for 'goalPrefix:goal'\n" + "\n" + "[0] Inside the definition for plugin 'artifactId', specify the following:\n" + "\n" + "<configuration>\n" + "  ...\n" + "  <toAddresses>\n" + "    <KEY>VALUE</KEY>\n" + "  </toAddresses>\n" + "</configuration>.\n", exception.buildDiagnosticMessage());}
12d40993ddef9365faab00c5a0f5516e922a072b73024f4a38535e4159e0983d
testMissingRequiredPropertiesTypeParameter
public void testMissingRequiredPropertiesTypeParameter()
{    MojoDescriptor mojoDescriptor = new MojoDescriptor();    mojoDescriptor.setGoal("goal");    PluginDescriptor pluginDescriptor = new PluginDescriptor();    pluginDescriptor.setGoalPrefix("goalPrefix");    pluginDescriptor.setArtifactId("artifactId");    mojoDescriptor.setPluginDescriptor(pluginDescriptor);    Parameter parameter = new Parameter();    parameter.setType("java.util.Properties");    parameter.setName("toAddresses");    parameter.setRequired(true);    PluginParameterException exception = new PluginParameterException(mojoDescriptor, Collections.singletonList(parameter));    assertEquals("One or more required plugin parameters are invalid/missing for 'goalPrefix:goal'\n" + "\n" + "[0] Inside the definition for plugin 'artifactId', specify the following:\n" + "\n" + "<configuration>\n" + "  ...\n" + "  <toAddresses>\n" + "    <property>\n" + "      <name>KEY</name>\n" + "      <value>VALUE</value>\n" + "    </property>\n" + "  </toAddresses>\n" + "</configuration>.\n", exception.buildDiagnosticMessage());}
9d69bfd2a279cacda04001b1c50c6f6698b00750596931407928c5a8169d56b7
setUp
public void setUp() throws Exception
{    super.setUp();    factory = lookup(RepositorySystem.class);}
68bbf6c94fbad4862990669ea582b65c28678087c2377b2c3fb0948d54293af4
tearDown
protected void tearDown() throws Exception
{    factory = null;    super.tearDown();}
b994701585b2757755dab6775fcb07f457f12c7586085e32845ce6492bdc8577
testPluginDescriptorExpressionReference
public void testPluginDescriptorExpressionReference() throws Exception
{    MojoExecution exec = newMojoExecution();    MavenSession session = newMavenSession();    Object result = new PluginParameterExpressionEvaluator(session, exec).evaluate("${plugin}");    System.out.println("Result: " + result);    assertSame("${plugin} expression does not return plugin descriptor.", exec.getMojoDescriptor().getPluginDescriptor(), result);}
d4ebe250a0803f9efad57a5640240c10985380a171b183b4c474fa38b28e0ac0
testPluginArtifactsExpressionReference
public void testPluginArtifactsExpressionReference() throws Exception
{    MojoExecution exec = newMojoExecution();    Artifact depArtifact = createArtifact("group", "artifact", "1");    List<Artifact> deps = new ArrayList<>();    deps.add(depArtifact);    exec.getMojoDescriptor().getPluginDescriptor().setArtifacts(deps);    MavenSession session = newMavenSession();    @SuppressWarnings("unchecked")    List<Artifact> depResults = (List<Artifact>) new PluginParameterExpressionEvaluator(session, exec).evaluate("${plugin.artifacts}");    System.out.println("Result: " + depResults);    assertNotNull(depResults);    assertEquals(1, depResults.size());    assertSame("dependency artifact is wrong.", depArtifact, depResults.get(0));}
495bcdd35d80f09f369835fa058898d7977b4fc7a0b3436f8f1148ba428d8ad3
testPluginArtifactMapExpressionReference
public void testPluginArtifactMapExpressionReference() throws Exception
{    MojoExecution exec = newMojoExecution();    Artifact depArtifact = createArtifact("group", "artifact", "1");    List<Artifact> deps = new ArrayList<>();    deps.add(depArtifact);    exec.getMojoDescriptor().getPluginDescriptor().setArtifacts(deps);    MavenSession session = newMavenSession();    @SuppressWarnings("unchecked")    Map<String, Artifact> depResults = (Map<String, Artifact>) new PluginParameterExpressionEvaluator(session, exec).evaluate("${plugin.artifactMap}");    System.out.println("Result: " + depResults);    assertNotNull(depResults);    assertEquals(1, depResults.size());    assertSame("dependency artifact is wrong.", depArtifact, depResults.get(ArtifactUtils.versionlessKey(depArtifact)));}
0c57a9d6446b6eedfeb6c0ff5493eac75e173a94938affe6cba048e7170dab64
testPluginArtifactIdExpressionReference
public void testPluginArtifactIdExpressionReference() throws Exception
{    MojoExecution exec = newMojoExecution();    MavenSession session = newMavenSession();    Object result = new PluginParameterExpressionEvaluator(session, exec).evaluate("${plugin.artifactId}");    System.out.println("Result: " + result);    assertSame("${plugin.artifactId} expression does not return plugin descriptor's artifactId.", exec.getMojoDescriptor().getPluginDescriptor().getArtifactId(), result);}
b468be0444522bde23e8fbf152159b5949e13a342bcdd7d611eb2d4bb0045359
testValueExtractionWithAPomValueContainingAPath
public void testValueExtractionWithAPomValueContainingAPath() throws Exception
{    String expected = getTestFile("target/test-classes/target/classes").getCanonicalPath();    Build build = new Build();    build.setDirectory(expected.substring(0, expected.length() - "/classes".length()));    Model model = new Model();    model.setBuild(build);    MavenProject project = new MavenProject(model);    project.setFile(new File("pom.xml").getCanonicalFile());    ExpressionEvaluator expressionEvaluator = createExpressionEvaluator(project, null, new Properties());    Object value = expressionEvaluator.evaluate("${project.build.directory}/classes");    String actual = new File(value.toString()).getCanonicalPath();    assertEquals(expected, actual);}
66c4c5993bf0248e80cee7ffe35f82bb2cfec6ceb2aa7fbc276c0e60ea9eb835
testEscapedVariablePassthrough
public void testEscapedVariablePassthrough() throws Exception
{    String var = "${var}";    Model model = new Model();    model.setVersion("1");    MavenProject project = new MavenProject(model);    ExpressionEvaluator ee = createExpressionEvaluator(project, null, new Properties());    Object value = ee.evaluate("$" + var);    assertEquals(var, value);}
5748b84d39eec2266928a9b73f4e20769b87ebfc81ca4e65d933770f8187f820
testEscapedVariablePassthroughInLargerExpression
public void testEscapedVariablePassthroughInLargerExpression() throws Exception
{    String var = "${var}";    String key = var + " with version: ${project.version}";    Model model = new Model();    model.setVersion("1");    MavenProject project = new MavenProject(model);    ExpressionEvaluator ee = createExpressionEvaluator(project, null, new Properties());    Object value = ee.evaluate("$" + key);    assertEquals("${var} with version: 1", value);}
5dadabe150d4c462ca42cd1d35341e81433d2790640bbe66423cbe97b0ba5f55
testMultipleSubExpressionsInLargerExpression
public void testMultipleSubExpressionsInLargerExpression() throws Exception
{    String key = "${project.artifactId} with version: ${project.version}";    Model model = new Model();    model.setArtifactId("test");    model.setVersion("1");    MavenProject project = new MavenProject(model);    ExpressionEvaluator ee = createExpressionEvaluator(project, null, new Properties());    Object value = ee.evaluate(key);    assertEquals("test with version: 1", value);}
3959fb6e6526ccb884b7fd5a5139a5f2c64a2b40a06adebacda6dd78202f420e
testMissingPOMPropertyRefInLargerExpression
public void testMissingPOMPropertyRefInLargerExpression() throws Exception
{    String expr = "/path/to/someproject-${baseVersion}";    MavenProject project = new MavenProject(new Model());    ExpressionEvaluator ee = createExpressionEvaluator(project, null, new Properties());    Object value = ee.evaluate(expr);    assertEquals(expr, value);}
531b8e13acaa4c017904598a18c9bce68aee2521af224c4826a77ae2ec175fa9
testPOMPropertyExtractionWithMissingProject_WithDotNotation
public void testPOMPropertyExtractionWithMissingProject_WithDotNotation() throws Exception
{    String key = "m2.name";    String checkValue = "value";    Properties properties = new Properties();    properties.setProperty(key, checkValue);    Model model = new Model();    model.setProperties(properties);    MavenProject project = new MavenProject(model);    ExpressionEvaluator ee = createExpressionEvaluator(project, null, new Properties());    Object value = ee.evaluate("${" + key + "}");    assertEquals(checkValue, value);}
9755e7c84d6241bb1b39e0d249105e766cb19fe3de57ed47f854ff33caf077a1
testBasedirExtractionWithMissingProject
public void testBasedirExtractionWithMissingProject() throws Exception
{    ExpressionEvaluator ee = createExpressionEvaluator(null, null, new Properties());    Object value = ee.evaluate("${basedir}");    assertEquals(System.getProperty("user.dir"), value);}
8e19ed6b54f0fad9969eb99933620dae5dc58f0c5f831a6c3c655475e45024c3
testValueExtractionFromSystemPropertiesWithMissingProject
public void testValueExtractionFromSystemPropertiesWithMissingProject() throws Exception
{    String sysprop = "PPEET_sysprop1";    Properties executionProperties = new Properties();    if (executionProperties.getProperty(sysprop) == null) {        executionProperties.setProperty(sysprop, "value");    }    ExpressionEvaluator ee = createExpressionEvaluator(null, null, executionProperties);    Object value = ee.evaluate("${" + sysprop + "}");    assertEquals("value", value);}
81b2c54201cf6b44d97e77a5c1e7696bfe68475abd1bad79fe0e8f6d7aeb5e82
testValueExtractionFromSystemPropertiesWithMissingProject_WithDotNotation
public void testValueExtractionFromSystemPropertiesWithMissingProject_WithDotNotation() throws Exception
{    String sysprop = "PPEET.sysprop2";    Properties executionProperties = new Properties();    if (executionProperties.getProperty(sysprop) == null) {        executionProperties.setProperty(sysprop, "value");    }    ExpressionEvaluator ee = createExpressionEvaluator(null, null, executionProperties);    Object value = ee.evaluate("${" + sysprop + "}");    assertEquals("value", value);}
62166dfb77e5f21790e6a94bc62319778ebe413eb026a75ddf6557c583d7face
createSession
private static MavenSession createSession(PlexusContainer container, ArtifactRepository repo, Properties properties) throws CycleDetectedException, DuplicateProjectException
{    MavenExecutionRequest request = new DefaultMavenExecutionRequest().setSystemProperties(properties).setGoals(Collections.<String>emptyList()).setBaseDirectory(new File("")).setLocalRepository(repo);    return new MavenSession(container, request, new DefaultMavenExecutionResult(), Collections.<MavenProject>emptyList());}
bcf4940b1d2ead7985ef77682bf8819fe87b2dcc1eac7411782ac640a3fdb1c4
testLocalRepositoryExtraction
public void testLocalRepositoryExtraction() throws Exception
{    ExpressionEvaluator expressionEvaluator = createExpressionEvaluator(createDefaultProject(), null, new Properties());    Object value = expressionEvaluator.evaluate("${localRepository}");    assertEquals("local", ((ArtifactRepository) value).getId());}
4f8b183589412613cb5d05d1e015d8ca0accfc944ffaa85bfeeff84299cd1120
testTwoExpressions
public void testTwoExpressions() throws Exception
{    Build build = new Build();    build.setDirectory("expected-directory");    build.setFinalName("expected-finalName");    Model model = new Model();    model.setBuild(build);    ExpressionEvaluator expressionEvaluator = createExpressionEvaluator(new MavenProject(model), null, new Properties());    Object value = expressionEvaluator.evaluate("${project.build.directory}" + FS + "${project.build.finalName}");    assertEquals("expected-directory" + File.separatorChar + "expected-finalName", value);}
ae9d7998ba1e68050bcd164a4b165be9a059d31b24b30201dd5eba13141d6b0a
testShouldExtractPluginArtifacts
public void testShouldExtractPluginArtifacts() throws Exception
{    PluginDescriptor pd = new PluginDescriptor();    Artifact artifact = createArtifact("testGroup", "testArtifact", "1.0");    pd.setArtifacts(Collections.singletonList(artifact));    ExpressionEvaluator ee = createExpressionEvaluator(createDefaultProject(), pd, new Properties());    Object value = ee.evaluate("${plugin.artifacts}");    assertTrue(value instanceof List);    @SuppressWarnings("unchecked")    List<Artifact> artifacts = (List<Artifact>) value;    assertEquals(1, artifacts.size());    Artifact result = artifacts.get(0);    assertEquals("testGroup", result.getGroupId());}
40009a51e133bb6353546e2b571c5ba601353259cb5b5cf99b1d8546095f0315
createDefaultProject
private MavenProject createDefaultProject()
{    return new MavenProject(new Model());}
44debb349ac60c1fc7c29dfb51ea20bc00bcfac3173f6749b92594a063024ba8
createExpressionEvaluator
private ExpressionEvaluator createExpressionEvaluator(MavenProject project, PluginDescriptor pluginDescriptor, Properties executionProperties) throws Exception
{    ArtifactRepository repo = factory.createDefaultLocalRepository();    MutablePlexusContainer container = (MutablePlexusContainer) getContainer();    MavenSession session = createSession(container, repo, executionProperties);    session.setCurrentProject(project);    MojoDescriptor mojo = new MojoDescriptor();    mojo.setPluginDescriptor(pluginDescriptor);    mojo.setGoal("goal");    MojoExecution mojoExecution = new MojoExecution(mojo);    return new PluginParameterExpressionEvaluator(session, mojoExecution);}
cda57437d45650aa81a97c2be2769406bf647a5c0fe787f489b733b5a83ad3ef
createArtifact
protected Artifact createArtifact(String groupId, String artifactId, String version) throws Exception
{    Dependency dependency = new Dependency();    dependency.setGroupId(groupId);    dependency.setArtifactId(artifactId);    dependency.setVersion(version);    dependency.setType("jar");    dependency.setScope("compile");    return factory.createDependencyArtifact(dependency);}
a95f6e200ace26d91e11fb331d0f10911136a9d973838ce3ad6e0718ff40e086
newMojoExecution
private MojoExecution newMojoExecution()
{    PluginDescriptor pd = new PluginDescriptor();    pd.setArtifactId("my-plugin");    pd.setGroupId("org.myco.plugins");    pd.setVersion("1");    MojoDescriptor md = new MojoDescriptor();    md.setPluginDescriptor(pd);    pd.addComponentDescriptor(md);    return new MojoExecution(md);}
4e48fa49d8a7d3afc539cdc39aff1202e2f915b2accbb11a93d1a713b2987688
newMavenSession
private MavenSession newMavenSession() throws Exception
{    return createMavenSession(null);}
5cb41634139dccbc03acc9c3d530014417a0a8675a81e3d64379b8ce64bb81b2
getProjectsDirectory
protected String getProjectsDirectory()
{        return null;}
d57c1d7022b9b24e5d6471b55681e866b61cc2646c5e5e41baf69039be0b670b
customizeContainerConfiguration
protected void customizeContainerConfiguration(ContainerConfiguration containerConfiguration)
{    super.customizeContainerConfiguration(containerConfiguration);    containerConfiguration.setAutoWiring(true);    containerConfiguration.setClassPathScanning(PlexusConstants.SCANNING_INDEX);}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();    if (getContainer().hasComponent(ProjectBuilder.class, "test")) {        projectBuilder = lookup(ProjectBuilder.class, "test");    } else {                projectBuilder = lookup(ProjectBuilder.class);    }    repositorySystem = lookup(RepositorySystem.class);}
68bbf6c94fbad4862990669ea582b65c28678087c2377b2c3fb0948d54293af4
tearDown
protected void tearDown() throws Exception
{    projectBuilder = null;    super.tearDown();}
42738fe5921db096082d8f2f58e0599c3ac27ac5813ffab44c103a91b1eb7131
getProjectBuilder
protected ProjectBuilder getProjectBuilder()
{    return projectBuilder;}
d848f01b637485f262196c6134c856a9a3ceb73a94b5a500fd5c65cf5a6a324e
getCustomConfigurationName
protected String getCustomConfigurationName()
{    String name = AbstractMavenProjectTestCase.class.getName().replace('.', '/') + ".xml";    System.out.println(name);    return name;}
ba74258e5a9a17ebe507817ae5e051c85d251bf25abd865e684fcda57fce41ec
getLocalRepositoryPath
protected File getLocalRepositoryPath() throws FileNotFoundException, URISyntaxException
{    File markerFile = getFileForClasspathResource("local-repo/marker.txt");    return markerFile.getAbsoluteFile().getParentFile();}
8e90e3bfea2732e87fba27194b9f55726b26726929f12cea55d555b2013f7e05
getFileForClasspathResource
protected static File getFileForClasspathResource(String resource) throws FileNotFoundException
{    ClassLoader cloader = Thread.currentThread().getContextClassLoader();    URL resourceUrl = cloader.getResource(resource);    if (resourceUrl == null) {        throw new FileNotFoundException("Unable to find: " + resource);    }    return new File(URI.create(resourceUrl.toString().replaceAll(" ", "%20")));}
e10004dfd50d8c85bc2f5b897ee0eb46ee7fb7375f9c18f1bd006d5779afe14a
getLocalRepository
protected ArtifactRepository getLocalRepository() throws Exception
{    ArtifactRepositoryLayout repoLayout = lookup(ArtifactRepositoryLayout.class, "legacy");    ArtifactRepository r = repositorySystem.createArtifactRepository("local", "file://" + getLocalRepositoryPath().getAbsolutePath(), repoLayout, null, null);    return r;}
1b483f2f5e32cddf634b837929d2b6a59aede09bc7fb84230a6512cc555a649a
getProjectWithDependencies
protected MavenProject getProjectWithDependencies(File pom) throws Exception
{    ProjectBuildingRequest configuration = newBuildingRequest();    configuration.setRemoteRepositories(Arrays.asList(new ArtifactRepository[] {}));    configuration.setProcessPlugins(false);    configuration.setResolveDependencies(true);    try {        return projectBuilder.build(pom, configuration).getProject();    } catch (Exception e) {        Throwable cause = e.getCause();        if (cause instanceof ModelBuildingException) {            String message = "In: " + pom + "\n\n";            for (ModelProblem problem : ((ModelBuildingException) cause).getProblems()) {                message += problem + "\n";            }            System.out.println(message);        }        throw e;    }}
b60dbc9c08e449ecf03b65ff78f221a05aac580e7e07b33c5e1aeab6161779fa
getProject
protected MavenProject getProject(File pom) throws Exception
{    ProjectBuildingRequest configuration = newBuildingRequest();    return projectBuilder.build(pom, configuration).getProject();}
0a9ab4132e95c19bb8b519a94cf83d6372823a11feaf4e548839f08e07ad2cd8
getProjectFromRemoteRepository
protected MavenProject getProjectFromRemoteRepository(final File pom) throws Exception
{    final ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();    configuration.setLocalRepository(this.getLocalRepository());    configuration.setRemoteRepositories(Arrays.asList(this.repositorySystem.createDefaultRemoteRepository()));    initRepoSession(configuration);    return projectBuilder.build(pom, configuration).getProject();}
e99ed9712f64b6665e2e480b75bec8d271b9bc08f56f77dcfed0847d554a8d8b
newBuildingRequest
protected ProjectBuildingRequest newBuildingRequest() throws Exception
{    ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();    configuration.setLocalRepository(getLocalRepository());    initRepoSession(configuration);    return configuration;}
7c1cde935afbb37967a505b07ad86a2204198083e0afa5b20064a1b1db85e4ed
initRepoSession
protected void initRepoSession(ProjectBuildingRequest request)
{    File localRepo = new File(request.getLocalRepository().getBasedir());    DefaultRepositorySystemSession repoSession = MavenRepositorySystemUtils.newSession();    repoSession.setLocalRepositoryManager(new LegacyLocalRepositoryManager(localRepo));    request.setRepositorySession(repoSession);}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();    repositorySystem = new TestRepositorySystem();}
68bbf6c94fbad4862990669ea582b65c28678087c2377b2c3fb0948d54293af4
tearDown
protected void tearDown() throws Exception
{    repositorySystem = null;    super.tearDown();}
8eb944c63fcdef3fd72a179db703a0675439544d67b3ae6a5ab6cc484c36d2d3
testCacheKey
public void testCacheKey() throws Exception
{    Artifact a1 = repositorySystem.createArtifact("testGroup", "testArtifact", "1.2.3", "jar");    @SuppressWarnings("deprecation")    ArtifactRepository lr1 = new DelegatingLocalArtifactRepository(repositorySystem.createDefaultLocalRepository());    ArtifactRepository rr1 = repositorySystem.createDefaultRemoteRepository();    a1.setDependencyFilter(new ExcludesArtifactFilter(Arrays.asList("foo")));    Artifact a2 = repositorySystem.createArtifact("testGroup", "testArtifact", "1.2.3", "jar");    @SuppressWarnings("deprecation")    ArtifactRepository lr2 = new DelegatingLocalArtifactRepository(repositorySystem.createDefaultLocalRepository());    ArtifactRepository rr2 = repositorySystem.createDefaultRemoteRepository();    a2.setDependencyFilter(new ExcludesArtifactFilter(Arrays.asList("foo")));        assertNotSame(a1, a2);    assertNotSame(lr1, lr2);    assertNotSame(rr1, rr2);    CacheKey k1 = new CacheKey(a1, false, lr1, Collections.singletonList(rr1));    CacheKey k2 = new CacheKey(a2, false, lr2, Collections.singletonList(rr2));    assertEquals(k1.hashCode(), k2.hashCode());}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();    cache = lookup(ProjectArtifactsCache.class);}
c2b7c549ee361796a5acb01282d5d860b2c41059b23d302f53fbd13d0457c59c
testProjectDependencyOrder
public void testProjectDependencyOrder() throws Exception
{    ProjectArtifactsCache.Key project1 = new ProjectArtifactsCache.Key() {    };    Set<Artifact> artifacts = new LinkedHashSet<>(4);    artifacts.add(new DefaultArtifact("g", "a1", "v", "compile", "jar", "", null));    artifacts.add(new DefaultArtifact("g", "a2", "v", "compile", "jar", "", null));    artifacts.add(new DefaultArtifact("g", "a3", "v", "compile", "jar", "", null));    artifacts.add(new DefaultArtifact("g", "a4", "v", "compile", "jar", "", null));    cache.put(project1, artifacts);    assertArrayEquals(artifacts.toArray(new Artifact[0]), cache.get(project1).getArtifacts().toArray(new Artifact[0]));    ProjectArtifactsCache.Key project2 = new ProjectArtifactsCache.Key() {    };    Set<Artifact> reversedArtifacts = new LinkedHashSet<>(4);    artifacts.add(new DefaultArtifact("g", "a4", "v", "compile", "jar", "", null));    artifacts.add(new DefaultArtifact("g", "a3", "v", "compile", "jar", "", null));    artifacts.add(new DefaultArtifact("g", "a2", "v", "compile", "jar", "", null));    artifacts.add(new DefaultArtifact("g", "a1", "v", "compile", "jar", "", null));    cache.put(project2, reversedArtifacts);    assertArrayEquals(reversedArtifacts.toArray(new Artifact[0]), cache.get(project2).getArtifacts().toArray(new Artifact[0]));}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();    repositorySystem = lookup(RepositorySystem.class);}
68bbf6c94fbad4862990669ea582b65c28678087c2377b2c3fb0948d54293af4
tearDown
protected void tearDown() throws Exception
{    repositorySystem = null;    super.tearDown();}
f4619311de6d0a155de161a8aea5df9ec523e5b1b44c24f427844b3f08f9e366
testShouldNotCarryExclusionsOverFromDependencyToDependency
public void testShouldNotCarryExclusionsOverFromDependencyToDependency() throws Exception
{/*        Dependency dep1 = new Dependency();        dep1.setGroupId( "test" );        dep1.setArtifactId( "test-artifact" );        dep1.setVersion( "1" );        dep1.setType( "jar" );        Exclusion exc = new Exclusion();        exc.setGroupId( "test" );        exc.setArtifactId( "test-artifact3" );        dep1.addExclusion( exc );        Dependency dep2 = new Dependency();        dep2.setGroupId( "test" );        dep2.setArtifactId( "test-artifact2" );        dep2.setVersion( "1" );        dep2.setType( "jar" );        List deps = new ArrayList();        deps.add( dep1 );        deps.add( dep2 );        ArtifactFactory factory = lookup( ArtifactFactory.class );        ArtifactFilter dependencyFilter = new ScopeArtifactFilter( Artifact.SCOPE_COMPILE );        MavenProject project = new MavenProject( new Model() );        Set result = project.createArtifacts( dependencyFilter );        for ( Iterator it = result.iterator(); it.hasNext(); )        {            Artifact artifact = ( Artifact ) it.next();            if ( "test-artifact2".equals( artifact.getArtifactId() ) )            {                ArtifactFilter filter = artifact.getDependencyFilter();                assertSame( dependencyFilter, filter );            }        }        */}
a21e4bdff1f67427df858614d3296f6687689aa7690fa90e8afa350f6884b653
testProjectBuilder
public void testProjectBuilder() throws Exception
{    File f = getFileForClasspathResource("canonical-pom.xml");    MavenProject project = getProject(f);                assertEquals("4.0.0", project.getModelVersion());                List<Plugin> plugins = project.getBuildPlugins();        String key = "org.apache.maven.plugins:maven-plexus-plugin";    Plugin plugin = null;    for (Plugin check : plugins) {        if (key.equals(check.getKey())) {            plugin = check;            break;        }    }    assertNotNull(plugin);    assertEquals("1.0", plugin.getVersion());    Xpp3Dom configuration = (Xpp3Dom) plugin.getConfiguration();    assertEquals("src/conf/plexus.conf", configuration.getChild("plexusConfiguration").getValue());    assertEquals("src/conf/plexus.properties", configuration.getChild("plexusConfigurationPropertiesFile").getValue());    assertEquals("Continuum", configuration.getChild("plexusApplicationName").getValue());                List<PluginExecution> executions = plugin.getExecutions();    PluginExecution execution = executions.get(0);    String g0 = execution.getGoals().get(0);    assertEquals("plexus:runtime", g0);    configuration = (Xpp3Dom) execution.getConfiguration();    assertEquals("ContinuumPro", configuration.getChild("plexusApplicationName").getValue());}
9d69bfd2a279cacda04001b1c50c6f6698b00750596931407928c5a8169d56b7
setUp
public void setUp() throws Exception
{    super.setUp();    projectBuilder = lookup(ProjectBuilder.class);    localRepoDir = new File(System.getProperty("java.io.tmpdir"), "local-repo." + System.currentTimeMillis());    localRepoDir.mkdirs();    filesToDelete.add(localRepoDir);}
c6aaebb5a52567751db8dc8e1cb9dd4a4e582ef964a374b376c6a04f741802dc
tearDown
public void tearDown() throws Exception
{    super.tearDown();    if (!filesToDelete.isEmpty()) {        for (File file : filesToDelete) {            if (file.exists()) {                if (file.isDirectory()) {                    FileUtils.deleteDirectory(file);                } else {                    file.delete();                }            }        }    }}
872e3bc3f5669911bb1b3c75841f979b3540c3b9f84b90860ba8cb6c24c07483
getProject
protected MavenProject getProject(Artifact pom, boolean allowStub) throws Exception
{    ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();    configuration.setLocalRepository(getLocalRepository());    initRepoSession(configuration);    return projectBuilder.build(pom, allowStub, configuration).getProject();}
f45ec4ee2002bb24d17561f2bbf599849932ea3072dd0df80f4b8f36c3fa5851
testBuildFromMiddlePom
public void testBuildFromMiddlePom() throws Exception
{    File f1 = getTestFile("src/test/resources/projects/grandchild-check/child/pom.xml");    File f2 = getTestFile("src/test/resources/projects/grandchild-check/child/grandchild/pom.xml");    getProject(f1);            getProject(f2);}
71c1b800e3e552ef217edc1b9040134d1e9dab9689b323a8f77759008fc4d360
testDuplicatePluginDefinitionsMerged
public void testDuplicatePluginDefinitionsMerged() throws Exception
{    File f1 = getTestFile("src/test/resources/projects/duplicate-plugins-merged-pom.xml");    MavenProject project = getProject(f1);    assertEquals(2, project.getBuildPlugins().get(0).getDependencies().size());    assertEquals(2, project.getBuildPlugins().get(0).getExecutions().size());    assertEquals("first", project.getBuildPlugins().get(0).getExecutions().get(0).getId());}
b6a3cc3b0524b004d2cc6f342d90704d597a2d70833ac59ba6719142468a1332
testFutureModelVersion
public void testFutureModelVersion() throws Exception
{    File f1 = getTestFile("src/test/resources/projects/future-model-version-pom.xml");    try {        getProject(f1);        fail("Expected to fail for future versions");    } catch (ProjectBuildingException e) {        assertContains("Building this project requires a newer version of Maven", e.getMessage());    }}
c015d1d790a3e16993aa192661a64070598fa21585e304d7eab0ad62406db43f
testPastModelVersion
public void testPastModelVersion() throws Exception
{            File f1 = getTestFile("src/test/resources/projects/past-model-version-pom.xml");    try {        getProject(f1);        fail("Expected to fail for past versions");    } catch (ProjectBuildingException e) {        assertContains("Building this project requires an older version of Maven", e.getMessage());    }}
6dd18938e829ebe00f2af22e2d19f7218b222a69279602ad4d8058b86e9d4817
testFutureSchemaModelVersion
public void testFutureSchemaModelVersion() throws Exception
{    File f1 = getTestFile("src/test/resources/projects/future-schema-model-version-pom.xml");    try {        getProject(f1);        fail("Expected to fail for future versions");    } catch (ProjectBuildingException e) {        assertContains("Building this project requires a newer version of Maven", e.getMessage());    }}
42afc74a33519fa00bf992070d6696ac0813846d379690deb9b12ec98195be42
assertContains
private void assertContains(String expected, String actual)
{    if (actual == null || !actual.contains(expected)) {        fail("Expected: a string containing " + expected + "\nActual: " + (actual == null ? "null" : "'" + actual + "'"));    }}
491f05129114072f5096599a171413b59ed295e7dd04313925feae4c0cae55b9
testBuildStubModelForMissingRemotePom
public void testBuildStubModelForMissingRemotePom() throws Exception
{    Artifact pom = repositorySystem.createProjectArtifact("org.apache.maven.its", "missing", "0.1");    MavenProject project = getProject(pom, true);    assertNotNull(project.getArtifactId());    assertNotNull(project.getRemoteArtifactRepositories());    assertFalse(project.getRemoteArtifactRepositories().isEmpty());    assertNotNull(project.getPluginArtifactRepositories());    assertFalse(project.getPluginArtifactRepositories().isEmpty());    assertNull(project.getParent());    assertNull(project.getParentArtifact());    assertFalse(project.isExecutionRoot());}
e10004dfd50d8c85bc2f5b897ee0eb46ee7fb7375f9c18f1bd006d5779afe14a
getLocalRepository
protected ArtifactRepository getLocalRepository() throws Exception
{    ArtifactRepositoryLayout repoLayout = lookup(ArtifactRepositoryLayout.class, "default");    ArtifactRepository r = repositorySystem.createArtifactRepository("local", "file://" + localRepoDir.getAbsolutePath(), repoLayout, null, null);    return r;}
d23a56f8cdce15b134001dd6d7f54d1e12b39a2f0b60858cfb86ec11dd958274
xtestLoop
public void xtestLoop() throws Exception
{    while (true) {        File f1 = getTestFile("src/test/resources/projects/duplicate-plugins-merged-pom.xml");        getProject(f1);    }}
4329b8f6da40e7db41f01de5606a69dfc0a675639053e8cbc84f6095bf05766b
testPartialResultUponBadDependencyDeclaration
public void testPartialResultUponBadDependencyDeclaration() throws Exception
{    File pomFile = getTestFile("src/test/resources/projects/bad-dependency.xml");    try {        ProjectBuildingRequest request = newBuildingRequest();        request.setProcessPlugins(false);        request.setResolveDependencies(true);        projectBuilder.build(pomFile, request);        fail("Project building did not fail despite invalid POM");    } catch (ProjectBuildingException e) {        List<ProjectBuildingResult> results = e.getResults();        assertNotNull(results);        assertEquals(1, results.size());        ProjectBuildingResult result = results.get(0);        assertNotNull(result);        assertNotNull(result.getProject());        assertEquals(1, result.getProblems().size());        assertEquals(1, result.getProject().getArtifacts().size());        assertNotNull(result.getDependencyResolutionResult());    }}
02cab93dac8dd285ae1043949447871709398b08061cd0eca0644631af7ec6d9
testImportScopePomResolvesFromPropertyBasedRepository
public void testImportScopePomResolvesFromPropertyBasedRepository() throws Exception
{    File pomFile = getTestFile("src/test/resources/projects/import-scope-pom-resolves-from-property-based-repository.xml");    ProjectBuildingRequest request = newBuildingRequest();    request.setProcessPlugins(false);    request.setResolveDependencies(true);    projectBuilder.build(pomFile, request);}
e0da5f83b9042bfe53fcf373aabf6f40c8857d70c80043088c70d9fa0c226953
testBuildValidParentVersionRangeLocally
public void testBuildValidParentVersionRangeLocally() throws Exception
{    File f1 = getTestFile("src/test/resources/projects/parent-version-range-local-valid/child/pom.xml");    final MavenProject childProject = getProject(f1);    assertNotNull(childProject.getParentArtifact());    assertEquals(childProject.getParentArtifact().getVersion(), "1");    assertNotNull(childProject.getParent());    assertEquals(childProject.getParent().getVersion(), "1");    assertNotNull(childProject.getModel().getParent());    assertEquals(childProject.getModel().getParent().getVersion(), "[1,10]");}
2f5e22854a9144b13172aaf8282c74004e0ebdb1c6258b1867e9107b62b68b2d
testBuildParentVersionRangeLocallyWithoutChildVersion
public void testBuildParentVersionRangeLocallyWithoutChildVersion() throws Exception
{    File f1 = getTestFile("src/test/resources/projects/parent-version-range-local-child-without-version/child/pom.xml");    try {        getProject(f1);        fail("Expected 'ProjectBuildingException' not thrown.");    } catch (final ProjectBuildingException e) {        assertNotNull(e.getMessage());        assertTrue(e.getMessage().contains("Version must be a constant"));    }}
a79eaa235b44c0fc21b5f1c16877a441a848a6a882bd9881985dbbf465c35e7a
testBuildParentVersionRangeLocallyWithChildVersionExpression
public void testBuildParentVersionRangeLocallyWithChildVersionExpression() throws Exception
{    File f1 = getTestFile("src/test/resources/projects/parent-version-range-local-child-version-expression/child/pom.xml");    try {        getProject(f1);        fail("Expected 'ProjectBuildingException' not thrown.");    } catch (final ProjectBuildingException e) {        assertNotNull(e.getMessage());        assertTrue(e.getMessage().contains("Version must be a constant"));    }}
70cf1da231d0600b7becfce37e46302be00180ee807c382b8abca0d82cc05ba0
testBuildParentVersionRangeExternally
public void testBuildParentVersionRangeExternally() throws Exception
{    File f1 = getTestFile("src/test/resources/projects/parent-version-range-external-valid/pom.xml");    final MavenProject childProject = this.getProjectFromRemoteRepository(f1);    assertNotNull(childProject.getParentArtifact());    assertEquals(childProject.getParentArtifact().getVersion(), "1");    assertNotNull(childProject.getParent());    assertEquals(childProject.getParent().getVersion(), "1");    assertNotNull(childProject.getModel().getParent());    assertEquals(childProject.getModel().getParent().getVersion(), "[1,1]");}
2b5bee3097e717bce959db051febd078326022f4358e81d36e899bde1ed2363b
testBuildParentVersionRangeExternallyWithoutChildVersion
public void testBuildParentVersionRangeExternallyWithoutChildVersion() throws Exception
{    File f1 = getTestFile("src/test/resources/projects/parent-version-range-external-child-without-version/pom.xml");    try {        this.getProjectFromRemoteRepository(f1);        fail("Expected 'ProjectBuildingException' not thrown.");    } catch (final ProjectBuildingException e) {        assertNotNull(e.getMessage());        assertTrue(e.getMessage().contains("Version must be a constant"));    }}
60fd5d707c0fc25bed2e89144c5e10b0f5c412104098ed519c7fb530461f2df4
testBuildParentVersionRangeExternallyWithChildVersionExpression
public void testBuildParentVersionRangeExternallyWithChildVersionExpression() throws Exception
{    File f1 = getTestFile("src/test/resources/projects/parent-version-range-external-child-version-expression/pom.xml");    try {        this.getProjectFromRemoteRepository(f1);        fail("Expected 'ProjectBuildingException' not thrown.");    } catch (final ProjectBuildingException e) {        assertNotNull(e.getMessage());        assertTrue(e.getMessage().contains("Version must be a constant"));    }}
6de51e1d5ff2377d3bee1256612e90a6a0d4b870e02c0519b9d1a1bbbea25fcb
calculateExecutionPlan
public MavenExecutionPlan calculateExecutionPlan(MavenSession session, String... tasks)
{    return new MavenExecutionPlan(null, null);}
d6fec3a202a41051a2eba883112797c086ed1f0e03f8cbbb783efb10f8a63a5b
calculateExecutionPlan
public MavenExecutionPlan calculateExecutionPlan(MavenSession session, boolean setup, String... tasks)
{    return new MavenExecutionPlan(null, null);}
67a6621c76d8c6bf6535ac8e9711527e7b493a85bf0ba75fb5bbbe482fe8d8e7
execute
public void execute(MavenSession session)
{}
afe8893888899b4a1f5ffc4906aebf4423c24f4d95f5e841bac29e33af7cd44d
getPluginsBoundByDefaultToAllLifecycles
public Set<Plugin> getPluginsBoundByDefaultToAllLifecycles(String packaging)
{    Set<Plugin> plugins;        if ("JAR".equals(packaging)) {        plugins = new LinkedHashSet<>();        plugins.add(newPlugin("maven-compiler-plugin", "compile", "testCompile"));        plugins.add(newPlugin("maven-resources-plugin", "resources", "testResources"));        plugins.add(newPlugin("maven-surefire-plugin", "test"));        plugins.add(newPlugin("maven-jar-plugin", "jar"));        plugins.add(newPlugin("maven-install-plugin", "install"));        plugins.add(newPlugin("maven-deploy-plugin", "deploy"));    } else {        plugins = Collections.emptySet();    }    return plugins;}
356be6482821e77782dbf2ac6a8e53e29604e3006ee24e251a61e242114c6cc8
newPlugin
private Plugin newPlugin(String artifactId, String... goals)
{    Plugin plugin = new Plugin();    plugin.setGroupId("org.apache.maven.plugins");    plugin.setArtifactId(artifactId);    for (String goal : goals) {        PluginExecution pluginExecution = new PluginExecution();        pluginExecution.setId("default-" + goal);        pluginExecution.addGoal(goal);        plugin.addExecution(pluginExecution);    }    return plugin;}
0d1ccd22fa0501be812173d01061bf92313aff3ee977cec098037000191c5120
calculateForkedExecutions
public void calculateForkedExecutions(MojoExecution mojoExecution, MavenSession session)
{}
b2694b7452eb01840dfcde3cc44ee78b510c50584473deb2cb17f27256eebe0d
executeForkedExecutions
public List<MavenProject> executeForkedExecutions(MojoExecution mojoExecution, MavenSession session)
{    return Collections.emptyList();}
82f1a639a1a4bcb676735caf06260b668ed050553f67977e59161585a32ee54c
createArtifactRepositories
public List<ArtifactRepository> createArtifactRepositories(List<Repository> pomRepositories, List<ArtifactRepository> externalRepositories, ProjectBuildingRequest request)
{    if (externalRepositories != null) {        return externalRepositories;    } else {        return new ArrayList<>();    }}
d0f99ab22e32a3304fb7d7d3522655a8ebcc43fe6e587b37ee3c8191fc12f5ce
createProjectRealm
public ProjectRealmCache.CacheRecord createProjectRealm(MavenProject project, Model model, ProjectBuildingRequest request)
{    return new ProjectRealmCache.CacheRecord(null, null);}
e674f8adf67ffdd4bdbe55ad65b0528d716bdf10eeb6a3c8a6a838e11a8a1825
selectProjectRealm
public void selectProjectRealm(MavenProject project)
{}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();    builder = new ExtensionDescriptorBuilder();}
68bbf6c94fbad4862990669ea582b65c28678087c2377b2c3fb0948d54293af4
tearDown
protected void tearDown() throws Exception
{    builder = null;    super.tearDown();}
fad9514b1f99b7c016c6d7e3273ba08cc3c8d96275b2a71179461d2e662d781b
toStream
private InputStream toStream(String xml)
{    try {        return new ByteArrayInputStream(xml.getBytes("UTF-8"));    } catch (UnsupportedEncodingException e) {        throw new IllegalStateException(e);    }}
caeb99cc6b8af64cf7ad740c4fefb9ab144f4e105f6c45a5656018659a07cada
testEmptyDescriptor
public void testEmptyDescriptor() throws Exception
{    String xml = "<extension></extension>";    ExtensionDescriptor ed = builder.build(toStream(xml));    assertNotNull(ed);    assertNotNull(ed.getExportedPackages());    assertTrue(ed.getExportedPackages().isEmpty());    assertNotNull(ed.getExportedArtifacts());    assertTrue(ed.getExportedArtifacts().isEmpty());}
eaaca95d9beaeb2f36ac7cf6132eba22ba2b0479bdc14da70ccaca43046b42ab
testCompleteDescriptor
public void testCompleteDescriptor() throws Exception
{    String xml = "<?xml version='1.0' encoding='UTF-8'?>" + "<extension>" + "<exportedPackages>" + "<exportedPackage>a</exportedPackage>" + "<exportedPackage>b</exportedPackage>" + "<exportedPackage>c</exportedPackage>" + "</exportedPackages>" + "<exportedArtifacts>" + "<exportedArtifact>x</exportedArtifact>" + "<exportedArtifact>y</exportedArtifact>" + "<exportedArtifact> z </exportedArtifact>" + "</exportedArtifacts>" + "</extension>";    ExtensionDescriptor ed = builder.build(toStream(xml));    assertNotNull(ed);    assertEquals(Arrays.asList("a", "b", "c"), ed.getExportedPackages());    assertEquals(Arrays.asList("x", "y", "z"), ed.getExportedArtifacts());}
93698ec2ecff90b499e70d69f05d9699406e684e85b205d961a8230648a40043
getMavenProject
public MavenProject getMavenProject()
{    return mavenProject;}
836b78713d27b2990ed04962445a6d442d190beddecc8871dd3329ba106351f2
getBasedir
public File getBasedir()
{    return (pomFile != null) ? pomFile.getParentFile() : null;}
5d1c4cff488d9d8ebae6d56b4aa96fd5b48080fe21927c02f83bc61d61917e70
setValueOnModel
public void setValueOnModel(String expression, Object value)
{    context.setValue(expression, value);}
9e5bb14c5b55f2d61697cb252cce0e217fc9284c0d9dec040f3115ac285051a7
getIteratorForXPathExpression
public Iterator<?> getIteratorForXPathExpression(String expression)
{    return context.iterate(expression);}
56679db347db2cba390d2d8d4b47c29a56cac924182c31d6c66a5ca74848c517
containsXPathExpression
public boolean containsXPathExpression(String expression)
{    return context.getValue(expression) != null;}
11847c6fc1ea657a09fb97cfea92c7688683b7b646d9a6d928e2358295df5188
getValue
public Object getValue(String expression)
{    try {        return context.getValue(expression);    } catch (JXPathNotFoundException e) {        return null;    }}
65349353f767684772139a691cc23a0efb6e53ef6487560b16e49a0148e16e3b
xPathExpressionEqualsValue
public boolean xPathExpressionEqualsValue(String expression, String value)
{    return context.getValue(expression) != null && context.getValue(expression).equals(value);}
9fa0729e7c49cddf358b23d19956d273fb76dd65bac5b3c2c23f39b4bcf56dc6
getNodePointer
public NodePointer getNodePointer()
{    if (position == 0) {        setPosition(1);    }    return (attribute == null) ? null : new Xpp3DomAttributePointer(parent, attribute);}
bc2d4db78473e0dd61026b0dd2cb8061d34be5a1128693380d22661ffbb0ccb6
getPosition
public int getPosition()
{    return position;}
fcb8757b67b2e62c1f5cc668eb370c9b721aba0c81c67fc6bc41683937ab8e58
setPosition
public boolean setPosition(int position)
{    this.position = position;    attribute = (position > 0 && position <= attributes.size()) ? attributes.get(position - 1) : null;    return attribute != null;}
78cda778e9e1c626873cd0e581f5fc770a2b52e66c1e7aabca82e2011ac6c791
compareChildNodePointers
public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2)
{        return 0;}
cc9131919df0823e8e8ee6054b03ea6d4a394f817422ddb0f9240211f097bcaf
getValue
public Object getValue()
{    return attrib.getValue();}
9c68184fae93724e709df75d8d45e2a50b1e87dba332a0f27a532e39d0d0edd9
getBaseValue
public Object getBaseValue()
{    return attrib;}
790c60bbce33c0c7ad59fb1e54cd2200fefe3df23860b83c9fb6d8be1132e290
getImmediateNode
public Object getImmediateNode()
{    return attrib;}
1e7a9ccf869d4ffcaafdb7996c8f1f820d6f2af9eb816b65ead1db5bcfc3f744
getLength
public int getLength()
{    return 1;}
fac513abac3339fead879bd60f27e4cd06f12a428057c62360775f2792c11d29
getName
public QName getName()
{    return new QName(null, attrib.getKey());}
9fca8b76edf5c8c290cb8d0226e9377ebf07a00196eaf51ce8f0b2e090275225
isActual
public boolean isActual()
{    return true;}
95618d1efab6688cb0c54de563ec62dbb6356161cb2c6fba51827f9663696b89
isCollection
public boolean isCollection()
{    return false;}
28bf92fbf201e74de25feaf287fe7bc9b97f32448c500fb022db2a994f08a86a
isLeaf
public boolean isLeaf()
{    return true;}
466435f095882709c815b2f9ef5b3f48b70403d8347ab4db453a6e623790b225
setValue
public void setValue(Object value)
{    throw new UnsupportedOperationException();}
9fa0729e7c49cddf358b23d19956d273fb76dd65bac5b3c2c23f39b4bcf56dc6
getNodePointer
public NodePointer getNodePointer()
{    if (position == 0) {        setPosition(1);    }    return (child == null) ? null : new Xpp3DomNodePointer(parent, child);}
bc2d4db78473e0dd61026b0dd2cb8061d34be5a1128693380d22661ffbb0ccb6
getPosition
public int getPosition()
{    return position;}
fcb8757b67b2e62c1f5cc668eb370c9b721aba0c81c67fc6bc41683937ab8e58
setPosition
public boolean setPosition(int position)
{    this.position = position;    filterChildren(position);    child = (position > 0 && position <= filteredChildren.size()) ? filteredChildren.get(position - 1) : null;    return child != null;}
2aebcacdc37d0b98e5c3f49bfa093ffe7c7c3dc8514d292925a00a83b3c59ebd
filterChildren
private void filterChildren(int position)
{    for (; position > filteredChildren.size() && filteredIndex < children.length; filteredIndex++) {        Xpp3Dom child = children[filteredIndex];        if (testNode(child)) {            filteredChildren.add(child);        }    }}
963503e55eb6e619042ebe4d76ef19b1baa794b8a3eb2c580d64230dee19dd16
testNode
private boolean testNode(Xpp3Dom node)
{    if (test == null) {        return true;    }    if (test instanceof NodeNameTest) {        String nodeName = node.getName();        if (StringUtils.isEmpty(nodeName)) {            return false;        }        NodeNameTest nodeNameTest = (NodeNameTest) test;        String namespaceURI = nodeNameTest.getNamespaceURI();        boolean wildcard = nodeNameTest.isWildcard();        String testName = nodeNameTest.getNodeName().getName();        String testPrefix = nodeNameTest.getNodeName().getPrefix();        if (wildcard && testPrefix == null) {            return true;        }        if (wildcard || testName.equals(nodeName)) {            return StringUtils.isEmpty(namespaceURI) || StringUtils.isEmpty(testPrefix);        }        return false;    }    if (test instanceof NodeTypeTest) {        switch(((NodeTypeTest) test).getNodeType()) {            case Compiler.NODE_TYPE_NODE:                return true;            case Compiler.NODE_TYPE_TEXT:                return node.getValue() != null;            default:                return false;        }    }    return false;}
78cda778e9e1c626873cd0e581f5fc770a2b52e66c1e7aabca82e2011ac6c791
compareChildNodePointers
public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2)
{    Xpp3Dom node1 = (Xpp3Dom) pointer1.getBaseValue();    Xpp3Dom node2 = (Xpp3Dom) pointer2.getBaseValue();    if (node1 == node2) {        return 0;    }    for (int i = 0; i < node.getChildCount(); i++) {        Xpp3Dom child = node.getChild(i);        if (child == node1) {            return -1;        }        if (child == node2) {            return 1;        }    }    return 0;}
cc9131919df0823e8e8ee6054b03ea6d4a394f817422ddb0f9240211f097bcaf
getValue
public Object getValue()
{    return getValue(node);}
4c826fdf7244243c128f62e674788b5ebc2190f1e48333a8870d8472b5a988e0
getValue
private static Object getValue(Xpp3Dom node)
{    if (node.getValue() != null) {        return node.getValue();    } else {        List<Object> children = new ArrayList<>();        for (int i = 0; i < node.getChildCount(); i++) {            children.add(getValue(node.getChild(i)));        }        return children;    }}
9c68184fae93724e709df75d8d45e2a50b1e87dba332a0f27a532e39d0d0edd9
getBaseValue
public Object getBaseValue()
{    return node;}
790c60bbce33c0c7ad59fb1e54cd2200fefe3df23860b83c9fb6d8be1132e290
getImmediateNode
public Object getImmediateNode()
{    return node;}
1e7a9ccf869d4ffcaafdb7996c8f1f820d6f2af9eb816b65ead1db5bcfc3f744
getLength
public int getLength()
{    return 1;}
fac513abac3339fead879bd60f27e4cd06f12a428057c62360775f2792c11d29
getName
public QName getName()
{    return new QName(null, node.getName());}
95618d1efab6688cb0c54de563ec62dbb6356161cb2c6fba51827f9663696b89
isCollection
public boolean isCollection()
{    return false;}
28bf92fbf201e74de25feaf287fe7bc9b97f32448c500fb022db2a994f08a86a
isLeaf
public boolean isLeaf()
{    return node.getChildCount() <= 0;}
466435f095882709c815b2f9ef5b3f48b70403d8347ab4db453a6e623790b225
setValue
public void setValue(Object value)
{    throw new UnsupportedOperationException();}
db1180d96e82ece5653564d4450c2f386d5a08e8052d54c54f255b4376391535
childIterator
public NodeIterator childIterator(NodeTest test, boolean reverse, NodePointer startWith)
{    return new Xpp3DomNodeIterator(this, test, reverse, startWith);}
8771051cce6fd65d1c201c106731df36e6fd37512f6fe2811619bb2002fcff82
attributeIterator
public NodeIterator attributeIterator(QName qname)
{    return new Xpp3DomAttributeIterator(this, qname);}
3bbf6bc29815fb4d4042bc531167156edc35829518e884c4418b3527f610fca8
getOrder
public int getOrder()
{    return 200;}
dbadc1234476a1f89f2aae5ed30352162e2c54acf3d5dab28e6a613a20576461
createNodePointer
public NodePointer createNodePointer(QName name, Object object, Locale locale)
{    if (object instanceof Xpp3Dom) {        return new Xpp3DomNodePointer((Xpp3Dom) object);    }    return null;}
132949d2a815b9535666b719b21093f48258794e22ad04c73a15e94880d7b8d6
createNodePointer
public NodePointer createNodePointer(NodePointer parent, QName name, Object object)
{    if (object instanceof Xpp3Dom) {        return new Xpp3DomNodePointer(parent, (Xpp3Dom) object);    }    return null;}
89f1638f505b8271e8dd106a568ddd52a6fa936a9a443c7edf329af2cdf4ccc9
getRepository
public LocalRepository getRepository()
{    return repository;}
d4e5521b42b67adbcdbde521459c0bf3fa079aa6fb1e41d54e154da4944e61a2
getPathForLocalArtifact
public String getPathForLocalArtifact(Artifact artifact)
{    StringBuilder path = new StringBuilder(128);    path.append(artifact.getGroupId()).append('/');    path.append(artifact.getExtension()).append("s/");    path.append(artifact.getArtifactId()).append('-').append(artifact.getVersion());    if (artifact.getClassifier().length() > 0) {        path.append('-').append(artifact.getClassifier());    }    path.append('.').append(artifact.getExtension());    return path.toString();}
a5aae4fdc9f8e53af8b7d1de01e9c45714e8ef19194af0fce3ca7c15bf456e71
getPathForRemoteArtifact
public String getPathForRemoteArtifact(Artifact artifact, RemoteRepository repository, String context)
{    return getPathForLocalArtifact(artifact);}
b59230202063850b56827f9e04be9d24e31dc729958d0692757693f006d1dee1
getPathForLocalMetadata
public String getPathForLocalMetadata(Metadata metadata)
{    return getPath(metadata, "local");}
bb644dfe46d4351aa5ff27e75cdbd31e605bfe45a8c8f975765cc64afb0129bb
getPathForRemoteMetadata
public String getPathForRemoteMetadata(Metadata metadata, RemoteRepository repository, String context)
{    return getPath(metadata, getRepositoryKey(repository, context));}
9d3d14491a5ccb8006d5adbb929516c84d3934bae1061e5646a27f4b07d1d91a
getRepositoryKey
 String getRepositoryKey(RemoteRepository repository, String context)
{    return repository.getId();}
9d453f70b2a24a14d1daefcd618938580b499ca6325d84ff0e729284b9d12d69
getPath
private String getPath(Metadata metadata, String repositoryKey)
{    StringBuilder path = new StringBuilder(128);    if (metadata.getGroupId().length() > 0) {        path.append(metadata.getGroupId().replace('.', '/')).append('/');        if (metadata.getArtifactId().length() > 0) {            path.append(metadata.getArtifactId()).append('/');            if (metadata.getVersion().length() > 0) {                path.append(metadata.getVersion()).append('/');            }        }    }    path.append(insertRepositoryKey(metadata.getType(), repositoryKey));    return path.toString();}
2a1e3b50adae794feaca7aa7ca66fb5ed04cc9930fa3b7f40a341c4dd60de3f8
insertRepositoryKey
private String insertRepositoryKey(String filename, String repositoryKey)
{    String result;    int idx = filename.indexOf('.');    if (idx < 0) {        result = filename + '-' + repositoryKey;    } else {        result = filename.substring(0, idx) + '-' + repositoryKey + filename.substring(idx);    }    return result;}
d47545d8b9d69ca4f807125761430a3980f7977633bed9bb451c8374136256dc
find
public LocalArtifactResult find(RepositorySystemSession session, LocalArtifactRequest request)
{    String path = getPathForLocalArtifact(request.getArtifact());    File file = new File(getRepository().getBasedir(), path);    LocalArtifactResult result = new LocalArtifactResult(request);    if (file.isFile()) {        result.setFile(file);        result.setAvailable(true);    }    return result;}
f1ea2a44352c3ef6d1164b4a519aff25947342f5a526bdff5c76cf9b178a2887
add
public void add(RepositorySystemSession session, LocalArtifactRegistration request)
{}
785925ab40a1c8dcdf706067283c756eb376d28ae46ef28d0e8de179d49b8041
find
public LocalMetadataResult find(RepositorySystemSession session, LocalMetadataRequest request)
{    LocalMetadataResult result = new LocalMetadataResult(request);    String path;    Metadata metadata = request.getMetadata();    String context = request.getContext();    RemoteRepository remote = request.getRepository();    if (remote != null) {        path = getPathForRemoteMetadata(metadata, remote, context);    } else {        path = getPathForLocalMetadata(metadata);    }    File file = new File(getRepository().getBasedir(), path);    if (file.isFile()) {        result.setFile(file);    }    return result;}
12cd16cf6f6ca36eb33869b9573c1f80026030c65a5ee0b1cb74168b95a92a3f
add
public void add(RepositorySystemSession session, LocalMetadataRegistration request)
{}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return String.valueOf(getRepository());}
6fa990e7869b018a76a9c4f2f9fc6afe0c2a931b7058a3b8e8269b9c912875d9
testShouldInterpretChildPathAdjustmentBasedOnModulePaths
public void testShouldInterpretChildPathAdjustmentBasedOnModulePaths() throws IOException
{    Model parentModel = new Model();    parentModel.addModule("../child");    MavenProject parentProject = new MavenProject(parentModel);    Model childModel = new Model();    childModel.setArtifactId("artifact");    MavenProject childProject = new MavenProject(childModel);    File childFile = new File(System.getProperty("java.io.tmpdir"), "maven-project-tests" + System.currentTimeMillis() + "/child/pom.xml");    childProject.setFile(childFile);    String adjustment = parentProject.getModulePathAdjustment(childProject);    assertNotNull(adjustment);    assertEquals("..", adjustment);}
4b10d7b93c64c72c0b78f77e48bcce01bb24c4db2d3717d0e34dd2f8f52fc0e6
testIdentityProtoInheritance
public void testIdentityProtoInheritance()
{    Parent parent = new Parent();    parent.setGroupId("test-group");    parent.setVersion("1000");    parent.setArtifactId("test-artifact");    Model model = new Model();    model.setParent(parent);    model.setArtifactId("real-artifact");    MavenProject project = new MavenProject(model);    assertEquals("groupId proto-inheritance failed.", "test-group", project.getGroupId());    assertEquals("artifactId is masked.", "real-artifact", project.getArtifactId());    assertEquals("version proto-inheritance failed.", "1000", project.getVersion());        project.getId();}
4afa0ae40ef03f43bff2547a0b64aa22b1f191f378f9ab4a4901e65d863ba40c
testEmptyConstructor
public void testEmptyConstructor()
{    MavenProject project = new MavenProject();    assertEquals(MavenProject.EMPTY_PROJECT_GROUP_ID + ":" + MavenProject.EMPTY_PROJECT_ARTIFACT_ID + ":jar:" + MavenProject.EMPTY_PROJECT_VERSION, project.getId());}
9ab337a2ce283eba0836dc4366d926e061e33dae2ba6121ea7102781506b6bdd
testClone
public void testClone() throws Exception
{    File f = getFileForClasspathResource("canonical-pom.xml");    MavenProject projectToClone = getProject(f);    MavenProject clonedProject = projectToClone.clone();    assertEquals("maven-core", clonedProject.getArtifactId());    Map<?, ?> clonedMap = clonedProject.getManagedVersionMap();    assertNotNull("ManagedVersionMap not copied", clonedMap);    assertTrue("ManagedVersionMap is not empty", clonedMap.isEmpty());}
cb8599efb8691aae8206971aadab1d4badc4f81be087c531fd52d025fb98fd74
testCloneWithDependencyManagement
public void testCloneWithDependencyManagement() throws Exception
{    File f = getFileForClasspathResource("dependencyManagement-pom.xml");    MavenProject projectToClone = getProjectWithDependencies(f);    DependencyManagement dep = projectToClone.getDependencyManagement();    assertNotNull("No dependencyManagement", dep);    List<?> list = dep.getDependencies();    assertNotNull("No dependencies", list);    assertTrue("Empty dependency list", !list.isEmpty());    Map<?, ?> map = projectToClone.getManagedVersionMap();    assertNotNull("No ManagedVersionMap", map);    assertTrue("ManagedVersionMap is empty", !map.isEmpty());    MavenProject clonedProject = projectToClone.clone();    assertEquals("maven-core", clonedProject.getArtifactId());    Map<?, ?> clonedMap = clonedProject.getManagedVersionMap();    assertNotNull("ManagedVersionMap not copied", clonedMap);    assertTrue("ManagedVersionMap is empty", !clonedMap.isEmpty());    assertTrue("ManagedVersionMap does not contain test key", clonedMap.containsKey("maven-test:maven-test-b:jar"));}
12a467cdcdd8ba45aa6da3cd6d0ab62cf4ac1d6430aa00dcdeca03175bf9517c
testGetModulePathAdjustment
public void testGetModulePathAdjustment() throws IOException
{    Model moduleModel = new Model();    MavenProject module = new MavenProject(moduleModel);    module.setFile(new File("module-dir/pom.xml"));    Model parentModel = new Model();    parentModel.addModule("../module-dir");    MavenProject parent = new MavenProject(parentModel);    parent.setFile(new File("parent-dir/pom.xml"));    String pathAdjustment = parent.getModulePathAdjustment(module);    assertEquals("..", pathAdjustment);}
6cf895c7c555361e902192c790b9e5244fc83d6838f384916d99559352816d43
testCloneWithDistributionManagement
public void testCloneWithDistributionManagement() throws Exception
{    File f = getFileForClasspathResource("distributionManagement-pom.xml");    MavenProject projectToClone = getProject(f);    MavenProject clonedProject = projectToClone.clone();    assertNotNull("clonedProject - distributionManagement", clonedProject.getDistributionManagementArtifactRepository());}
544154333d3b6049bf4bf1bf8eed6df8f039e31b4a86c123d289bcaa6867fbd2
testCloneWithActiveProfile
public void testCloneWithActiveProfile() throws Exception
{    File f = getFileForClasspathResource("withActiveByDefaultProfile-pom.xml");    MavenProject projectToClone = getProject(f);    List<Profile> activeProfilesOrig = projectToClone.getActiveProfiles();    assertEquals("Expecting 1 active profile", 1, activeProfilesOrig.size());    MavenProject clonedProject = projectToClone.clone();    List<Profile> activeProfilesClone = clonedProject.getActiveProfiles();    assertEquals("Expecting 1 active profile", 1, activeProfilesClone.size());    assertNotSame("The list of active profiles should have been cloned too but is same", activeProfilesOrig, activeProfilesClone);}
bb94007073cc3ba35d246ce6a3191a46be8a367cf90a68d769ef63a59fc761d8
testCloneWithBaseDir
public void testCloneWithBaseDir() throws Exception
{    File f = getFileForClasspathResource("canonical-pom.xml");    MavenProject projectToClone = getProject(f);    projectToClone.setPomFile(new File(new File(f.getParentFile(), "target"), "flattened.xml"));    MavenProject clonedProject = projectToClone.clone();    assertEquals("POM file is preserved across clone", projectToClone.getFile(), clonedProject.getFile());    assertEquals("Base directory is preserved across clone", projectToClone.getBasedir(), clonedProject.getBasedir());}
51ad0713c47277c80c65151672166d5971a0a263f769f26a64be341704360bb6
testUndefinedOutputDirectory
public void testUndefinedOutputDirectory() throws Exception
{    MavenProject p = new MavenProject();    assertNoNulls(p.getCompileClasspathElements());    assertNoNulls(p.getSystemClasspathElements());    assertNoNulls(p.getRuntimeClasspathElements());    assertNoNulls(p.getTestClasspathElements());}
90f028ebd9d4e28c9d1a85c05d6705b96e55a8ec2a0b2f3e1d15353c82867f52
testAddDotFile
public void testAddDotFile()
{    MavenProject project = new MavenProject();    File basedir = new File(System.getProperty("java.io.tmpdir"));    project.setFile(new File(basedir, "file"));    project.addCompileSourceRoot(basedir.getAbsolutePath());    project.addCompileSourceRoot(".");    assertEquals(1, project.getCompileSourceRoots().size());}
40f5ef4c4f211e9acfbed1a451bac373880cca2bc2bf6b72f0b1ef81bd00ff91
assertNoNulls
private void assertNoNulls(List<String> elements)
{    assertFalse(elements.contains(null));}
d57c1d7022b9b24e5d6471b55681e866b61cc2646c5e5e41baf69039be0b670b
customizeContainerConfiguration
protected void customizeContainerConfiguration(ContainerConfiguration containerConfiguration)
{    super.customizeContainerConfiguration(containerConfiguration);    containerConfiguration.setAutoWiring(true);    containerConfiguration.setClassPathScanning(PlexusConstants.SCANNING_INDEX);}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    testDirectory = new File(getBasedir(), BASE_POM_DIR);    new File(getBasedir(), BASE_MIXIN_DIR);    projectBuilder = (DefaultProjectBuilder) lookup(ProjectBuilder.class);    repositorySystem = lookup(RepositorySystem.class);}
68bbf6c94fbad4862990669ea582b65c28678087c2377b2c3fb0948d54293af4
tearDown
protected void tearDown() throws Exception
{    projectBuilder = null;    super.tearDown();}
f292fcf20e124bf12985ee252c12065fb6516a2aa751caa2098107f58960aba5
testEmptyUrl
public void testEmptyUrl() throws Exception
{    buildPom("empty-distMng-repo-url");}
6588c1bc5ec553bfc438dc7d886291563b26199de08d2611178212963f87b0c1
testProfileModules
public void testProfileModules() throws Exception
{    PomTestWrapper pom = buildPom("profile-module", "a");        assertEquals("test-prop", pom.getValue("properties[1]/b"));    assertEquals(4, ((List<?>) pom.getValue("modules")).size());    assertEquals("module-2", pom.getValue("modules[1]"));    assertEquals("module-1", pom.getValue("modules[2]"));    assertEquals("module-3", pom.getValue("modules[3]"));    assertEquals("module-4", pom.getValue("modules[4]"));}
9981e8d9eeb3d4d8be46c7918fcf0f764b3ba6cfbdc98ef92464f4057d9d969f
testParentInheritance
public void testParentInheritance() throws Exception
{    buildPom("parent-inheritance/sub");}
773167f48fbca2ad58ca1e309b7054b6fac1944e854eb7f6c56195d019c3f78e
testExecutionConfigurationJoin
public void testExecutionConfigurationJoin() throws Exception
{    PomTestWrapper pom = buildPom("execution-configuration-join");    assertEquals(2, ((List<?>) pom.getValue("build/plugins[1]/executions[1]/configuration[1]/fileset[1]")).size());}
04a27d802494ab82912b8775aca59c7957e14e39f01051c13792961e6606af79
testPluginConfigProperties
public void testPluginConfigProperties() throws Exception
{    PomTestWrapper pom = buildPom("plugin-config-properties");    assertEquals("my.property", pom.getValue("build/plugins[1]/configuration[1]/systemProperties[1]/property[1]/name"));}
7e9ad40d5c4fb09dbf1d6a3c047b5a25084df6270d666a64eb0ac1cc4694eb5f
testProfilePropertiesInterpolation
public void testProfilePropertiesInterpolation() throws Exception
{    PomTestWrapper pom = buildPom("profile-properties-interpolation", "interpolation-profile");    assertEquals("PASSED", pom.getValue("properties[1]/test"));    assertEquals("PASSED", pom.getValue("properties[1]/property"));}
57ded78da22fff8592aecdcb3185eac8903e7439e36bccc753b4f556270404a1
testThatExecutionsWithoutIdsAreMergedAndTheChildWins
public void testThatExecutionsWithoutIdsAreMergedAndTheChildWins() throws Exception
{    PomTestWrapper tester = buildPom("micromailer");    assertModelEquals(tester, "child-descriptor", "build/plugins[1]/executions[1]/goals[1]");}
b5a39214e5d4989efec9b2c06e4b699c6f23a1e149e4525651d2a0265393091e
testDuplicateExclusionsDependency
public void testDuplicateExclusionsDependency() throws Exception
{    PomTestWrapper pom = buildPom("duplicate-exclusions-dependency/sub");    assertEquals(1, ((List<?>) pom.getValue("dependencies[1]/exclusions")).size());}
7b5b94c94319bbe9a82b4a61460b055a70b642572c1cb6f59df93881c2f1775c
testMultipleFilters
public void testMultipleFilters() throws Exception
{    PomTestWrapper pom = buildPom("multiple-filters");    assertEquals(4, ((List<?>) pom.getValue("build/filters")).size());}
9228ea26b2bba6889f50a40f283fa3d90c69982ca6e142bfceab8e8a63241fea
testDuplicateDependenciesCauseLastDeclarationToBePickedInLenientMode
public void testDuplicateDependenciesCauseLastDeclarationToBePickedInLenientMode() throws Exception
{    PomTestWrapper pom = buildPom("unique-dependency-key/deps", true, null);    assertEquals(1, ((List<?>) pom.getValue("dependencies")).size());    assertEquals("0.2", pom.getValue("dependencies[1]/version"));}
2ff4dfb8ad6dd06608116e0c5a7e92dcfb95c81edd20bf744c7bf529c22ba913
testParentInterpolation
public void testParentInterpolation() throws Exception
{    PomTestWrapper pom = buildPom("parent-interpolation/sub");    pom = new PomTestWrapper(pom.getMavenProject().getParent());    assertEquals("1.3.0-SNAPSHOT", pom.getValue("build/plugins[1]/version"));}
104ed4bb323a0571a9cdd97149cd700a58e43ac864ffa47eb8fe328b84186152
testPluginManagementInherited
public void testPluginManagementInherited() throws Exception
{    PomTestWrapper pom = buildPom("pluginmanagement-inherited/sub");    assertEquals("1.0-alpha-21", pom.getValue("build/plugins[1]/version"));}
ee8809cbf529c08469981729199a2089d3633bf9340770464c06a2b4255eb2e1
testPluginManagementDependencies
public void testPluginManagementDependencies() throws Exception
{    PomTestWrapper pom = buildPom("plugin-management-dependencies/sub", "test");    assertEquals("1.0-alpha-21", pom.getValue("build/plugins[1]/version"));    assertEquals("1.0", pom.getValue("build/plugins[1]/dependencies[1]/version"));}
8cebff8a47e4905001b5d07bd5c7820557b1326d941406eb9c89960af69bd5ff
testReportingInterpolation
public void testReportingInterpolation() throws Exception
{    PomTestWrapper pom = buildPom("reporting-interpolation");    assertEquals(createPath(Arrays.asList(System.getProperty("user.dir"), "src", "test", "resources-project-builder", "reporting-interpolation", "target", "site")), pom.getValue("reporting/outputDirectory"));}
78b63e174ef1e69bf30c5ef303e684faafbd255c7c2670104be3c664d722e5fa
testPluginOrder
public void testPluginOrder() throws Exception
{    PomTestWrapper pom = buildPom("plugin-order");    assertEquals("plexus-component-metadata", pom.getValue("build/plugins[1]/artifactId"));    assertEquals("maven-surefire-plugin", pom.getValue("build/plugins[2]/artifactId"));}
390f3be9bd439ae2984e3decb3a85cc7de889ff6d34a31ac544d8281f2bff852
testErroneousJoiningOfDifferentPluginsWithEqualDependencies
public void testErroneousJoiningOfDifferentPluginsWithEqualDependencies() throws Exception
{    PomTestWrapper pom = buildPom("equal-plugin-deps");    assertEquals("maven-it-plugin-a", pom.getValue("build/plugins[1]/artifactId"));    assertEquals(1, ((List<?>) pom.getValue("build/plugins[1]/dependencies")).size());    assertEquals("maven-it-plugin-b", pom.getValue("build/plugins[2]/artifactId"));    assertEquals(1, ((List<?>) pom.getValue("build/plugins[1]/dependencies")).size());}
b6255d4ed6a6ce976929fc8c081cb68013efce289c793aa11fa9d5ef2106df44
testErroneousJoiningOfDifferentPluginsWithEqualExecutionIds
public void testErroneousJoiningOfDifferentPluginsWithEqualExecutionIds() throws Exception
{    PomTestWrapper pom = buildPom("equal-plugin-exec-ids");    assertEquals("maven-it-plugin-a", pom.getValue("build/plugins[1]/artifactId"));    assertEquals(1, ((List<?>) pom.getValue("build/plugins[1]/executions")).size());    assertEquals("maven-it-plugin-b", pom.getValue("build/plugins[2]/artifactId"));    assertEquals(1, ((List<?>) pom.getValue("build/plugins[1]/executions")).size());    assertEquals("maven-it-plugin-a", pom.getValue("reporting/plugins[1]/artifactId"));    assertEquals(1, ((List<?>) pom.getValue("reporting/plugins[1]/reportSets")).size());    assertEquals("maven-it-plugin-b", pom.getValue("reporting/plugins[2]/artifactId"));    assertEquals(1, ((List<?>) pom.getValue("reporting/plugins[1]/reportSets")).size());}
76cb594323f72f51ad4315d3dd03aef80d267536c7a384d908cd9d8ce5fcd63e
testExecutionConfiguration
public void testExecutionConfiguration() throws Exception
{    PomTestWrapper pom = buildPom("execution-configuration");    assertEquals(2, ((List<?>) pom.getValue("build/plugins[1]/executions")).size());    assertEquals("src/main/mdo/nexus.xml", (pom.getValue("build/plugins[1]/executions[1]/configuration[1]/model")));    assertEquals("src/main/mdo/security.xml", (pom.getValue("build/plugins[1]/executions[2]/configuration[1]/model")));}
296a22b33d9414532bb7dca226e39a8e6f87be9303d810d53f4a657c9e617097
testSingleConfigurationInheritance
public void testSingleConfigurationInheritance() throws Exception
{    PomTestWrapper pom = buildPom("single-configuration-inheritance");    assertEquals(2, ((List<?>) pom.getValue("build/plugins[1]/executions[1]/configuration[1]/rules")).size());    assertEquals("2.0.6", pom.getValue("build/plugins[1]/executions[1]/configuration[1]/rules[1]/requireMavenVersion[1]/version"));    assertEquals("[1.4,)", pom.getValue("build/plugins[1]/executions[1]/configuration[1]/rules[1]/requireJavaVersion[1]/version"));}
58af626d26ec15cd683c4d07f2a4549fe8d1e1d7fbb8123d5f001a30ee733c1a
testConfigWithPluginManagement
public void testConfigWithPluginManagement() throws Exception
{    PomTestWrapper pom = buildPom("config-with-plugin-mng");    assertEquals(2, ((List<?>) pom.getValue("build/plugins[1]/executions")).size());    assertEquals("src/main/mdo/security.xml", pom.getValue("build/plugins[1]/executions[2]/configuration[1]/model"));    assertEquals("1.0.8", pom.getValue("build/plugins[1]/executions[1]/configuration[1]/version"));}
83c9eeb8ebaec6b56e4d2190d8c420858af5b1585238facb9102dac31cdbbcf8
testExecutionConfigurationSubcollections
public void testExecutionConfigurationSubcollections() throws Exception
{    PomTestWrapper pom = buildPom("execution-configuration-subcollections");    assertEquals(2, ((List<?>) pom.getValue("build/plugins[1]/executions[1]/configuration[1]/rules[1]/bannedDependencies")).size());}
acee49efa563def37105714523101df7d7f2ddbbe642d586a4c6cc2c2c35ff2a
testMultipleRepositories
public void testMultipleRepositories() throws Exception
{    PomTestWrapper pom = buildPom("multiple-repos/sub");    assertEquals(3, ((List<?>) pom.getValue("repositories")).size());}
89e9c7e8a56c51e5eeda62970dba173e77e8fa7254e672f3ea1cfac9d88b61ac
testMultipleExecutionIds
public void testMultipleExecutionIds() throws Exception
{    PomTestWrapper pom = buildPom("dual-execution-ids/sub");    assertEquals(1, ((List<?>) pom.getValue("build/plugins[1]/executions")).size());}
b89811f47d361ba60fc21525219ece54b3fee9511c1e77571c3115226f36f957
testConsecutiveEmptyElements
public void testConsecutiveEmptyElements() throws Exception
{    buildPom("consecutive_empty_elements");}
94a02e6d3f473484014954b010bec1b6d261fe65ba86097331e0ecd756c7fe29
testOrderOfGoalsFromPluginExecutionWithoutPluginManagement
public void testOrderOfGoalsFromPluginExecutionWithoutPluginManagement() throws Exception
{    PomTestWrapper pom = buildPom("plugin-exec-goals-order/wo-plugin-mgmt");    assertEquals(5, ((List<?>) pom.getValue("build/plugins[1]/executions[1]/goals")).size());    assertEquals("b", pom.getValue("build/plugins[1]/executions[1]/goals[1]"));    assertEquals("a", pom.getValue("build/plugins[1]/executions[1]/goals[2]"));    assertEquals("d", pom.getValue("build/plugins[1]/executions[1]/goals[3]"));    assertEquals("c", pom.getValue("build/plugins[1]/executions[1]/goals[4]"));    assertEquals("e", pom.getValue("build/plugins[1]/executions[1]/goals[5]"));}
fd3b37baaf89668fe97c098967a8460c324153c6f5d75719ce399afd27d18728
testOrderOfGoalsFromPluginExecutionWithPluginManagement
public void testOrderOfGoalsFromPluginExecutionWithPluginManagement() throws Exception
{    PomTestWrapper pom = buildPom("plugin-exec-goals-order/w-plugin-mgmt");    assertEquals(5, ((List<?>) pom.getValue("build/plugins[1]/executions[1]/goals")).size());    assertEquals("b", pom.getValue("build/plugins[1]/executions[1]/goals[1]"));    assertEquals("a", pom.getValue("build/plugins[1]/executions[1]/goals[2]"));    assertEquals("d", pom.getValue("build/plugins[1]/executions[1]/goals[3]"));    assertEquals("c", pom.getValue("build/plugins[1]/executions[1]/goals[4]"));    assertEquals("e", pom.getValue("build/plugins[1]/executions[1]/goals[5]"));}
07da42635f837f6de9fe75ce306bc02bf5c1b257953628d0cf1ef3af449a6f27
testOrderOfPluginExecutionsWithoutPluginManagement
public void testOrderOfPluginExecutionsWithoutPluginManagement() throws Exception
{    PomTestWrapper pom = buildPom("plugin-exec-order/wo-plugin-mgmt");    assertEquals(5, ((List<?>) pom.getValue("build/plugins[1]/executions")).size());    assertEquals("b", pom.getValue("build/plugins[1]/executions[1]/id"));    assertEquals("a", pom.getValue("build/plugins[1]/executions[2]/id"));    assertEquals("d", pom.getValue("build/plugins[1]/executions[3]/id"));    assertEquals("c", pom.getValue("build/plugins[1]/executions[4]/id"));    assertEquals("e", pom.getValue("build/plugins[1]/executions[5]/id"));}
51cb9eb42ebbf7ab2737f0dc0895de5a02fe9b8f657209f06d1732dc0faf3d70
testOrderOfPluginExecutionsWithPluginManagement
public void testOrderOfPluginExecutionsWithPluginManagement() throws Exception
{    PomTestWrapper pom = buildPom("plugin-exec-order/w-plugin-mgmt");    assertEquals(5, ((List<?>) pom.getValue("build/plugins[1]/executions")).size());    assertEquals("b", pom.getValue("build/plugins[1]/executions[1]/id"));    assertEquals("a", pom.getValue("build/plugins[1]/executions[2]/id"));    assertEquals("d", pom.getValue("build/plugins[1]/executions[3]/id"));    assertEquals("c", pom.getValue("build/plugins[1]/executions[4]/id"));    assertEquals("e", pom.getValue("build/plugins[1]/executions[5]/id"));}
d7e80467c295f013fffc7de6e51d2f6d51c8fba3f01f935342d4f0458372c5c1
testMergeOfPluginExecutionsWhenChildInheritsPluginVersion
public void testMergeOfPluginExecutionsWhenChildInheritsPluginVersion() throws Exception
{    PomTestWrapper pom = buildPom("plugin-exec-merging-wo-version/sub");    assertEquals(4, ((List<?>) pom.getValue("build/plugins[1]/executions")).size());}
acfbcde7ccd32a36255870eb7d93f14604ca6d1e9857c4eb9dc1198e72ed6557
testMergeOfPluginExecutionsWhenChildAndParentUseDifferentPluginVersions
public void testMergeOfPluginExecutionsWhenChildAndParentUseDifferentPluginVersions() throws Exception
{    PomTestWrapper pom = buildPom("plugin-exec-merging-version-insensitive/sub");    assertEquals(4, ((List<?>) pom.getValue("build/plugins[1]/executions")).size());}
b46a2c7332cd6b68e88325a8de33148e0a2158bda963a7434df58a20e938093a
testInterpolationWithXmlMarkup
public void testInterpolationWithXmlMarkup() throws Exception
{    PomTestWrapper pom = buildPom("xml-markup-interpolation");    assertEquals("<?xml version='1.0'?>Tom&Jerry", pom.getValue("properties/xmlTest"));}
bc2252ed6ce68c809971955b1016aee992f696a25c0b10612a9a86bdeabaecd2
testOrderOfMergedPluginExecutionsWithoutPluginManagement
public void testOrderOfMergedPluginExecutionsWithoutPluginManagement() throws Exception
{    PomTestWrapper pom = buildPom("merged-plugin-exec-order/wo-plugin-mgmt/sub");    assertEquals(5, ((List<?>) pom.getValue("build/plugins[1]/executions")).size());    assertEquals("parent-1", pom.getValue("build/plugins[1]/executions[1]/goals[1]"));    assertEquals("parent-2", pom.getValue("build/plugins[1]/executions[2]/goals[1]"));    assertEquals("child-default", pom.getValue("build/plugins[1]/executions[3]/goals[1]"));    assertEquals("child-1", pom.getValue("build/plugins[1]/executions[4]/goals[1]"));    assertEquals("child-2", pom.getValue("build/plugins[1]/executions[5]/goals[1]"));}
5a39a68cb343fbba811ecd78276557da2ad2c3eff04d1b2c31e4b13e0ac4ed6a
testOrderOfMergedPluginExecutionsWithPluginManagement
public void testOrderOfMergedPluginExecutionsWithPluginManagement() throws Exception
{    PomTestWrapper pom = buildPom("merged-plugin-exec-order/w-plugin-mgmt/sub");    assertEquals(5, ((List<?>) pom.getValue("build/plugins[1]/executions")).size());    assertEquals("parent-1", pom.getValue("build/plugins[1]/executions[1]/goals[1]"));    assertEquals("parent-2", pom.getValue("build/plugins[1]/executions[2]/goals[1]"));    assertEquals("child-default", pom.getValue("build/plugins[1]/executions[3]/goals[1]"));    assertEquals("child-1", pom.getValue("build/plugins[1]/executions[4]/goals[1]"));    assertEquals("child-2", pom.getValue("build/plugins[1]/executions[5]/goals[1]"));}
af8ba17220a5550224772ae9122fa4a30b69ab315101f0043e0777e88b9243a0
testDifferentContainersWithSameId
public void testDifferentContainersWithSameId() throws Exception
{    PomTestWrapper pom = buildPom("join-different-containers-same-id");    assertEquals(1, ((List<?>) pom.getValue("build/plugins[1]/executions[1]/goals")).size());    assertEquals(1, ((List<?>) pom.getValue("build/pluginManagement/plugins[@artifactId='maven-it-plugin-b']/executions[1]/goals")).size());}
1a178fd4ccd016db6c04b5235d43c95cdfcbc177d3d2e2231869bb4b7fbb2481
testOrderOfMergedPluginExecutionGoalsWithoutPluginManagement
public void testOrderOfMergedPluginExecutionGoalsWithoutPluginManagement() throws Exception
{    PomTestWrapper pom = buildPom("merged-plugin-exec-goals-order/wo-plugin-mgmt/sub");    assertEquals(5, ((List<?>) pom.getValue("build/plugins[1]/executions[1]/goals")).size());    assertEquals("child-a", pom.getValue("build/plugins[1]/executions[1]/goals[1]"));    assertEquals("merged", pom.getValue("build/plugins[1]/executions[1]/goals[2]"));    assertEquals("child-b", pom.getValue("build/plugins[1]/executions[1]/goals[3]"));    assertEquals("parent-b", pom.getValue("build/plugins[1]/executions[1]/goals[4]"));    assertEquals("parent-a", pom.getValue("build/plugins[1]/executions[1]/goals[5]"));}
0f9b4b6b8534637ccc2af4b53a10407f4b3b9f27c162da732f92204e0d562857
testOrderOfMergedPluginExecutionGoalsWithPluginManagement
public void testOrderOfMergedPluginExecutionGoalsWithPluginManagement() throws Exception
{    PomTestWrapper pom = buildPom("merged-plugin-exec-goals-order/w-plugin-mgmt/sub");    assertEquals(5, ((List<?>) pom.getValue("build/plugins[1]/executions[1]/goals")).size());    assertEquals("child-a", pom.getValue("build/plugins[1]/executions[1]/goals[1]"));    assertEquals("merged", pom.getValue("build/plugins[1]/executions[1]/goals[2]"));    assertEquals("child-b", pom.getValue("build/plugins[1]/executions[1]/goals[3]"));    assertEquals("parent-b", pom.getValue("build/plugins[1]/executions[1]/goals[4]"));    assertEquals("parent-a", pom.getValue("build/plugins[1]/executions[1]/goals[5]"));}
35b5a08d60e5a34c2fff03e0340d0a213d0ec0cfb5801daa705ca625fff3e36a
testOverridingOfInheritedPluginExecutionsWithoutPluginManagement
public void testOverridingOfInheritedPluginExecutionsWithoutPluginManagement() throws Exception
{    PomTestWrapper pom = buildPom("plugin-exec-merging/wo-plugin-mgmt/sub");    assertEquals(2, ((List<?>) pom.getValue("build/plugins[1]/executions")).size());    assertEquals("child-default", pom.getValue("build/plugins[1]/executions[@id='default']/phase"));    assertEquals("child-non-default", pom.getValue("build/plugins[1]/executions[@id='non-default']/phase"));}
df8f9b36ff6b51337701a00956bb69df3d701a99a981cf5e41f100a57d31d666
testOverridingOfInheritedPluginExecutionsWithPluginManagement
public void testOverridingOfInheritedPluginExecutionsWithPluginManagement() throws Exception
{    PomTestWrapper pom = buildPom("plugin-exec-merging/w-plugin-mgmt/sub");    assertEquals(2, ((List<?>) pom.getValue("build/plugins[1]/executions")).size());    assertEquals("child-default", pom.getValue("build/plugins[1]/executions[@id='default']/phase"));    assertEquals("child-non-default", pom.getValue("build/plugins[1]/executions[@id='non-default']/phase"));}
74a75eb335dbaa57056c1664e349c4c3bbcecf75be2a2f5439ac8f196060bc6f
testOrderOfMergedPluginDependenciesWithoutPluginManagement
public void testOrderOfMergedPluginDependenciesWithoutPluginManagement() throws Exception
{    PomTestWrapper pom = buildPom("merged-plugin-class-path-order/wo-plugin-mgmt/sub");    assertEquals(5, ((List<?>) pom.getValue("build/plugins[1]/dependencies")).size());    assertNotNull(pom.getValue("build/plugins[1]/dependencies[1]"));    assertEquals("c", pom.getValue("build/plugins[1]/dependencies[1]/artifactId"));    assertEquals("1", pom.getValue("build/plugins[1]/dependencies[1]/version"));    assertEquals("a", pom.getValue("build/plugins[1]/dependencies[2]/artifactId"));    assertEquals("2", pom.getValue("build/plugins[1]/dependencies[2]/version"));    assertEquals("b", pom.getValue("build/plugins[1]/dependencies[3]/artifactId"));    assertEquals("1", pom.getValue("build/plugins[1]/dependencies[3]/version"));    assertEquals("e", pom.getValue("build/plugins[1]/dependencies[4]/artifactId"));    assertEquals("1", pom.getValue("build/plugins[1]/dependencies[4]/version"));    assertEquals("d", pom.getValue("build/plugins[1]/dependencies[5]/artifactId"));    assertEquals("1", pom.getValue("build/plugins[1]/dependencies[5]/version"));}
0f54aa8bbee1df3dbe6fe9fb4ddbf9d130f6a9b2ea07da7fee151b3f9e11e231
testOrderOfMergedPluginDependenciesWithPluginManagement
public void testOrderOfMergedPluginDependenciesWithPluginManagement() throws Exception
{    PomTestWrapper pom = buildPom("merged-plugin-class-path-order/w-plugin-mgmt/sub");    assertEquals(5, ((List<?>) pom.getValue("build/plugins[1]/dependencies")).size());    assertEquals("c", pom.getValue("build/plugins[1]/dependencies[1]/artifactId"));    assertEquals("1", pom.getValue("build/plugins[1]/dependencies[1]/version"));    assertEquals("a", pom.getValue("build/plugins[1]/dependencies[2]/artifactId"));    assertEquals("2", pom.getValue("build/plugins[1]/dependencies[2]/version"));    assertEquals("b", pom.getValue("build/plugins[1]/dependencies[3]/artifactId"));    assertEquals("1", pom.getValue("build/plugins[1]/dependencies[3]/version"));    assertEquals("e", pom.getValue("build/plugins[1]/dependencies[4]/artifactId"));    assertEquals("1", pom.getValue("build/plugins[1]/dependencies[4]/version"));    assertEquals("d", pom.getValue("build/plugins[1]/dependencies[5]/artifactId"));    assertEquals("1", pom.getValue("build/plugins[1]/dependencies[5]/version"));}
9dbd533d1efeae975a29a6773a54508ceee07bfc138f26f3439412d0c7de4106
testInterpolationOfNestedBuildDirectories
public void testInterpolationOfNestedBuildDirectories() throws Exception
{    PomTestWrapper pom = buildPom("nested-build-dir-interpolation");    assertEquals(new File(pom.getBasedir(), "target/classes/dir0"), new File((String) pom.getValue("properties/dir0")));    assertEquals(new File(pom.getBasedir(), "src/test/dir1"), new File((String) pom.getValue("properties/dir1")));    assertEquals(new File(pom.getBasedir(), "target/site/dir2"), new File((String) pom.getValue("properties/dir2")));}
e36416c943402c9cc74eeb8c3d8e201ce7620e8dfc2d7af83eb81395862468a8
testAppendArtifactIdOfChildToInheritedUrls
public void testAppendArtifactIdOfChildToInheritedUrls() throws Exception
{    PomTestWrapper pom = buildPom("url-inheritance/sub");    assertEquals("http://parent.url/child", pom.getValue("url"));    assertEquals("http://parent.url/org", pom.getValue("organization/url"));    assertEquals("http://parent.url/license.txt", pom.getValue("licenses[1]/url"));    assertEquals("http://parent.url/viewvc/child", pom.getValue("scm/url"));    assertEquals("http://parent.url/scm/child", pom.getValue("scm/connection"));    assertEquals("https://parent.url/scm/child", pom.getValue("scm/developerConnection"));    assertEquals("http://parent.url/issues", pom.getValue("issueManagement/url"));    assertEquals("http://parent.url/ci", pom.getValue("ciManagement/url"));    assertEquals("http://parent.url/dist", pom.getValue("distributionManagement/repository/url"));    assertEquals("http://parent.url/snaps", pom.getValue("distributionManagement/snapshotRepository/url"));    assertEquals("http://parent.url/site/child", pom.getValue("distributionManagement/site/url"));    assertEquals("http://parent.url/download", pom.getValue("distributionManagement/downloadUrl"));}
f5cd289342544e0baad5b0a538077f5192761ee755bbc97d2f9e3b9f732eb1b9
testAppendArtifactIdOfParentAndChildToInheritedUrls
public void testAppendArtifactIdOfParentAndChildToInheritedUrls() throws Exception
{    PomTestWrapper pom = buildPom("url-inheritance/another-parent/sub");    assertEquals("http://parent.url/ap/child", pom.getValue("url"));    assertEquals("http://parent.url/org", pom.getValue("organization/url"));    assertEquals("http://parent.url/license.txt", pom.getValue("licenses[1]/url"));    assertEquals("http://parent.url/viewvc/ap/child", pom.getValue("scm/url"));    assertEquals("http://parent.url/scm/ap/child", pom.getValue("scm/connection"));    assertEquals("https://parent.url/scm/ap/child", pom.getValue("scm/developerConnection"));    assertEquals("http://parent.url/issues", pom.getValue("issueManagement/url"));    assertEquals("http://parent.url/ci", pom.getValue("ciManagement/url"));    assertEquals("http://parent.url/dist", pom.getValue("distributionManagement/repository/url"));    assertEquals("http://parent.url/snaps", pom.getValue("distributionManagement/snapshotRepository/url"));    assertEquals("http://parent.url/site/ap/child", pom.getValue("distributionManagement/site/url"));    assertEquals("http://parent.url/download", pom.getValue("distributionManagement/downloadUrl"));}
21071f8a35071960db49c7201e33d6f3c6c98539a2d68e3f8eaaaf219a50f9b6
testNonInheritedElementsInSubtreesOverriddenByChild
public void testNonInheritedElementsInSubtreesOverriddenByChild() throws Exception
{    PomTestWrapper pom = buildPom("limited-inheritance/child");    assertEquals(null, pom.getValue("organization/url"));    assertEquals(null, pom.getValue("issueManagement/system"));    assertEquals(0, ((List<?>) pom.getValue("ciManagement/notifiers")).size());    assertEquals("child-distros", pom.getValue("distributionManagement/repository/id"));    assertEquals("ssh://child.url/distros", pom.getValue("distributionManagement/repository/url"));    assertEquals(null, pom.getValue("distributionManagement/repository/name"));    assertEquals(true, pom.getValue("distributionManagement/repository/uniqueVersion"));    assertEquals("default", pom.getValue("distributionManagement/repository/layout"));    assertEquals("child-snaps", pom.getValue("distributionManagement/snapshotRepository/id"));    assertEquals("ssh://child.url/snaps", pom.getValue("distributionManagement/snapshotRepository/url"));    assertEquals(null, pom.getValue("distributionManagement/snapshotRepository/name"));    assertEquals(true, pom.getValue("distributionManagement/snapshotRepository/uniqueVersion"));    assertEquals("default", pom.getValue("distributionManagement/snapshotRepository/layout"));    assertEquals("child-site", pom.getValue("distributionManagement/site/id"));    assertEquals("scp://child.url/site", pom.getValue("distributionManagement/site/url"));    assertEquals(null, pom.getValue("distributionManagement/site/name"));}
175e14b220323fe58988a9dd5f561d2e1e97fbde20fa726a9917bc41519bd902
testXmlTextCoalescing
public void testXmlTextCoalescing() throws Exception
{    PomTestWrapper pom = buildPom("xml-coalesce-text");    assertEquals("A  Test  Project Property", pom.getValue("properties/prop0"));    assertEquals("That's a test!", pom.getValue("properties/prop1"));    assertEquals(32 * 1024, pom.getValue("properties/prop2").toString().trim().replaceAll("[\n\r]", "").length());}
c3f1deeaeee77811bb0a14d5238b0e12fcc9fb9cbfc9ec14f762f69167f0a1eb
testFullInterpolationOfNestedExpressions
public void testFullInterpolationOfNestedExpressions() throws Exception
{    PomTestWrapper pom = buildPom("full-interpolation");    for (int i = 0; i < 24; i++) {        String index = ((i < 10) ? "0" : "") + i;        assertEquals("PASSED", pom.getValue("properties/property" + index));    }}
21b7516e89ce9733a5d538902886db9237d28e77f7b36b38ef07db1803cb088e
testInterpolationOfLegacyExpressionsThatDontIncludeTheProjectPrefix
public void testInterpolationOfLegacyExpressionsThatDontIncludeTheProjectPrefix() throws Exception
{    PomTestWrapper pom = buildPom("unprefixed-expression-interpolation/child");    assertEquals(pom.getBasedir(), new File(pom.getValue("properties/projectDir").toString()));    assertEquals("org.apache.maven.its.mng3831.child", pom.getValue("properties/projectGroupId"));    assertEquals("child", pom.getValue("properties/projectArtifactId"));    assertEquals("2.0-alpha-1", pom.getValue("properties/projectVersion"));    assertEquals("jar", pom.getValue("properties/projectPackaging"));    assertEquals("child-name", pom.getValue("properties/projectName"));    assertEquals("child-desc", pom.getValue("properties/projectDesc"));    assertEquals("http://child.org/", pom.getValue("properties/projectUrl"));    assertEquals("2008", pom.getValue("properties/projectYear"));    assertEquals("child-org-name", pom.getValue("properties/projectOrgName"));    assertEquals("2.0.0", pom.getValue("properties/projectPrereqMvn"));    assertEquals("http://scm.org/", pom.getValue("properties/projectScmUrl"));    assertEquals("http://issue.org/", pom.getValue("properties/projectIssueUrl"));    assertEquals("http://ci.org/", pom.getValue("properties/projectCiUrl"));    assertEquals("child-dist-repo", pom.getValue("properties/projectDistRepoName"));    assertEquals("http://dist.org/", pom.getValue("properties/projectDistRepoUrl"));    assertEquals("http://site.org/", pom.getValue("properties/projectDistSiteUrl"));    assertEquals("org.apache.maven.its.mng3831", pom.getValue("properties/parentGroupId"));    assertEquals("parent", pom.getValue("properties/parentArtifactId"));    assertEquals("1.0", pom.getValue("properties/parentVersion"));    assertTrue(pom.getValue("properties/projectBuildOut").toString().endsWith("bin"));    assertTrue(pom.getValue("properties/projectSiteOut").toString().endsWith("doc"));}
06373d77ea8690d3f2467ee68c7633eb793e86714605b8939ebb1d76ee3533fd
testInterpolationWithBasedirAlignedDirectories
public void testInterpolationWithBasedirAlignedDirectories() throws Exception
{    PomTestWrapper pom = buildPom("basedir-aligned-interpolation");    assertEquals(new File(pom.getBasedir(), "src/main/java"), new File(pom.getValue("properties/buildMainSrc").toString()));    assertEquals(new File(pom.getBasedir(), "src/test/java"), new File(pom.getValue("properties/buildTestSrc").toString()));    assertEquals(new File(pom.getBasedir(), "src/main/scripts"), new File(pom.getValue("properties/buildScriptSrc").toString()));    assertEquals(new File(pom.getBasedir(), "target"), new File(pom.getValue("properties/buildOut").toString()));    assertEquals(new File(pom.getBasedir(), "target/classes"), new File(pom.getValue("properties/buildMainOut").toString()));    assertEquals(new File(pom.getBasedir(), "target/test-classes"), new File(pom.getValue("properties/buildTestOut").toString()));    assertEquals(new File(pom.getBasedir(), "target/site"), new File(pom.getValue("properties/siteOut").toString()));}
7d2c9ce9378052fd22f3686acaccdcd3c8b83f525814759bb49fc702bd2ab565
testInterpolationOfBasedirInPomWithUnusualName
public void testInterpolationOfBasedirInPomWithUnusualName() throws Exception
{    PomTestWrapper pom = buildPom("basedir-interpolation/pom-with-unusual-name.xml");    assertEquals(pom.getBasedir(), new File(pom.getValue("properties/prop0").toString()));    assertEquals(pom.getBasedir(), new File(pom.getValue("properties/prop1").toString()));}
2b2db8a74ac9749c855a1ebc8d697cd159bbfe2ed9d5e5b19b88a734b7287749
testJoiningOfContainersWhenChildHasEmptyElements
public void testJoiningOfContainersWhenChildHasEmptyElements() throws Exception
{    PomTestWrapper pom = buildPom("id-container-joining-with-empty-elements/sub");    assertNotNull(pom);}
94dce347907362a4532d7b7fce9c57136d89493f90a8be48502c413d78773486
testOrderOfPluginConfigurationElementsWithoutPluginManagement
public void testOrderOfPluginConfigurationElementsWithoutPluginManagement() throws Exception
{    PomTestWrapper pom = buildPom("plugin-config-order/wo-plugin-mgmt");    assertEquals("one", pom.getValue("build/plugins[1]/configuration/stringParams/stringParam[1]"));    assertEquals("two", pom.getValue("build/plugins[1]/configuration/stringParams/stringParam[2]"));    assertEquals("three", pom.getValue("build/plugins[1]/configuration/stringParams/stringParam[3]"));    assertEquals("four", pom.getValue("build/plugins[1]/configuration/stringParams/stringParam[4]"));}
db22a01c83f33cfc31e7b727069a4ae7f518fdc18ccbe7656119804da13bea5d
testOrderOfPluginConfigurationElementsWithPluginManagement
public void testOrderOfPluginConfigurationElementsWithPluginManagement() throws Exception
{    PomTestWrapper pom = buildPom("plugin-config-order/w-plugin-mgmt");    assertEquals("one", pom.getValue("build/plugins[1]/configuration/stringParams/stringParam[1]"));    assertEquals("two", pom.getValue("build/plugins[1]/configuration/stringParams/stringParam[2]"));    assertEquals("three", pom.getValue("build/plugins[1]/configuration/stringParams/stringParam[3]"));    assertEquals("four", pom.getValue("build/plugins[1]/configuration/stringParams/stringParam[4]"));}
450523800c5a1625141f9627e58c7422afcf57c99377438000b76bc18981ff78
testOrderOfPluginExecutionConfigurationElementsWithoutPluginManagement
public void testOrderOfPluginExecutionConfigurationElementsWithoutPluginManagement() throws Exception
{    PomTestWrapper pom = buildPom("plugin-exec-config-order/wo-plugin-mgmt");    String prefix = "build/plugins[1]/executions[1]/configuration/";    assertEquals("one", pom.getValue(prefix + "stringParams/stringParam[1]"));    assertEquals("two", pom.getValue(prefix + "stringParams/stringParam[2]"));    assertEquals("three", pom.getValue(prefix + "stringParams/stringParam[3]"));    assertEquals("four", pom.getValue(prefix + "stringParams/stringParam[4]"));    assertEquals("key1", pom.getValue(prefix + "propertiesParam/property[1]/name"));    assertEquals("key2", pom.getValue(prefix + "propertiesParam/property[2]/name"));}
aac4ba1a6a253833a9346862550b1c28d1f29d0b0dd3bb5a5763272aeaaf5d30
testOrderOfPluginExecutionConfigurationElementsWithPluginManagement
public void testOrderOfPluginExecutionConfigurationElementsWithPluginManagement() throws Exception
{    PomTestWrapper pom = buildPom("plugin-exec-config-order/w-plugin-mgmt");    String prefix = "build/plugins[1]/executions[1]/configuration/";    assertEquals("one", pom.getValue(prefix + "stringParams/stringParam[1]"));    assertEquals("two", pom.getValue(prefix + "stringParams/stringParam[2]"));    assertEquals("three", pom.getValue(prefix + "stringParams/stringParam[3]"));    assertEquals("four", pom.getValue(prefix + "stringParams/stringParam[4]"));    assertEquals("key1", pom.getValue(prefix + "propertiesParam/property[1]/name"));    assertEquals("key2", pom.getValue(prefix + "propertiesParam/property[2]/name"));}
b9fd3523ad7979bdfe5f666760037d9212e8f11d39931e8568ee99da9ebac519
testMergeOfInheritedPluginConfiguration
public void testMergeOfInheritedPluginConfiguration() throws Exception
{    PomTestWrapper pom = buildPom("plugin-config-merging/child");    String prefix = "build/plugins[1]/configuration/";    assertEquals("PASSED", pom.getValue(prefix + "propertiesFile"));    assertEquals("PASSED", pom.getValue(prefix + "parent"));    assertEquals("PASSED-1", pom.getValue(prefix + "stringParams/stringParam[1]"));    assertEquals("PASSED-3", pom.getValue(prefix + "stringParams/stringParam[2]"));    assertEquals("PASSED-2", pom.getValue(prefix + "stringParams/stringParam[3]"));    assertEquals("PASSED-4", pom.getValue(prefix + "stringParams/stringParam[4]"));    assertEquals("PASSED-1", pom.getValue(prefix + "listParam/listParam[1]"));    assertEquals("PASSED-3", pom.getValue(prefix + "listParam/listParam[2]"));    assertEquals("PASSED-2", pom.getValue(prefix + "listParam/listParam[3]"));    assertEquals("PASSED-4", pom.getValue(prefix + "listParam/listParam[4]"));}
76fb1ad98266121ff628cc642950d89d2e5525127d52bb9406da7f72a972e734
testAppendOfInheritedPluginConfigurationWithNoProfile
public void testAppendOfInheritedPluginConfigurationWithNoProfile() throws Exception
{    testAppendOfInheritedPluginConfiguration("no-profile");}
e3aa894071a3b12d852039692bd1bc9f9e000ee718f2a1621950b8638ae75ca3
testAppendOfInheritedPluginConfigurationWithActiveProfile
public void testAppendOfInheritedPluginConfigurationWithActiveProfile() throws Exception
{    testAppendOfInheritedPluginConfiguration("with-profile");}
d16fcf9924106a92825cc89a52796ab384a01dc5cc52dcc00261b2810a54459b
testAppendOfInheritedPluginConfiguration
private void testAppendOfInheritedPluginConfiguration(String test) throws Exception
{    PomTestWrapper pom = buildPom("plugin-config-append/" + test + "/subproject");    String prefix = "build/plugins[1]/configuration/";    assertEquals("PARENT-1", pom.getValue(prefix + "stringParams/stringParam[1]"));    assertEquals("PARENT-3", pom.getValue(prefix + "stringParams/stringParam[2]"));    assertEquals("PARENT-2", pom.getValue(prefix + "stringParams/stringParam[3]"));    assertEquals("PARENT-4", pom.getValue(prefix + "stringParams/stringParam[4]"));    assertEquals("CHILD-1", pom.getValue(prefix + "stringParams/stringParam[5]"));    assertEquals("CHILD-3", pom.getValue(prefix + "stringParams/stringParam[6]"));    assertEquals("CHILD-2", pom.getValue(prefix + "stringParams/stringParam[7]"));    assertEquals("CHILD-4", pom.getValue(prefix + "stringParams/stringParam[8]"));    assertEquals(null, pom.getValue(prefix + "stringParams/stringParam[9]"));    assertEquals("PARENT-1", pom.getValue(prefix + "listParam/listParam[1]"));    assertEquals("PARENT-3", pom.getValue(prefix + "listParam/listParam[2]"));    assertEquals("PARENT-2", pom.getValue(prefix + "listParam/listParam[3]"));    assertEquals("PARENT-4", pom.getValue(prefix + "listParam/listParam[4]"));    assertEquals("CHILD-1", pom.getValue(prefix + "listParam/listParam[5]"));    assertEquals("CHILD-3", pom.getValue(prefix + "listParam/listParam[6]"));    assertEquals("CHILD-2", pom.getValue(prefix + "listParam/listParam[7]"));    assertEquals("CHILD-4", pom.getValue(prefix + "listParam/listParam[8]"));    assertEquals(null, pom.getValue(prefix + "listParam/listParam[9]"));}
4d295fb919a345852410900012eb0053c64611d851f653ffc9314256032b7528
testMultiplePluginExecutionsWithAndWithoutIdsWithoutPluginManagement
public void testMultiplePluginExecutionsWithAndWithoutIdsWithoutPluginManagement() throws Exception
{    PomTestWrapper pom = buildPom("plugin-exec-w-and-wo-id/wo-plugin-mgmt");    assertEquals(2, ((List<?>) pom.getValue("build/plugins[1]/executions")).size());    assertEquals("log-string", pom.getValue("build/plugins[1]/executions[1]/goals[1]"));    assertEquals("log-string", pom.getValue("build/plugins[1]/executions[2]/goals[1]"));}
d68c29b3a7031cd8e9946c87848a2ccedf9614b4a8a2a6aa477579c03500a7f1
testMultiplePluginExecutionsWithAndWithoutIdsWithPluginManagement
public void testMultiplePluginExecutionsWithAndWithoutIdsWithPluginManagement() throws Exception
{    PomTestWrapper pom = buildPom("plugin-exec-w-and-wo-id/w-plugin-mgmt");    assertEquals(2, ((List<?>) pom.getValue("build/plugins[1]/executions")).size());    assertEquals("log-string", pom.getValue("build/plugins[1]/executions[1]/goals[1]"));    assertEquals("log-string", pom.getValue("build/plugins[1]/executions[2]/goals[1]"));}
b166d970f98245014f1d25ec2a9ae8c15ca69de1244e77ee0f6eed8fe7f4f2b2
testDependencyOrderWithoutPluginManagement
public void testDependencyOrderWithoutPluginManagement() throws Exception
{    PomTestWrapper pom = buildPom("dependency-order/wo-plugin-mgmt");    assertEquals(4, ((List<?>) pom.getValue("dependencies")).size());    assertEquals("a", pom.getValue("dependencies[1]/artifactId"));    assertEquals("c", pom.getValue("dependencies[2]/artifactId"));    assertEquals("b", pom.getValue("dependencies[3]/artifactId"));    assertEquals("d", pom.getValue("dependencies[4]/artifactId"));}
b6f7a21a3fdfce6cb39307b8b45adc6d9bc0d7144df9302ce32ced44cac9e09e
testDependencyOrderWithPluginManagement
public void testDependencyOrderWithPluginManagement() throws Exception
{    PomTestWrapper pom = buildPom("dependency-order/w-plugin-mgmt");    assertEquals(4, ((List<?>) pom.getValue("dependencies")).size());    assertEquals("a", pom.getValue("dependencies[1]/artifactId"));    assertEquals("c", pom.getValue("dependencies[2]/artifactId"));    assertEquals("b", pom.getValue("dependencies[3]/artifactId"));    assertEquals("d", pom.getValue("dependencies[4]/artifactId"));}
0f9a35bed8eb8c875212fd5f976d0c3a359f1de21ac1405e999a536481d4bb0b
testBuildDirectoriesUsePlatformSpecificFileSeparator
public void testBuildDirectoriesUsePlatformSpecificFileSeparator() throws Exception
{    PomTestWrapper pom = buildPom("platform-file-separator");    assertPathWithNormalizedFileSeparators(pom.getValue("build/directory"));    assertPathWithNormalizedFileSeparators(pom.getValue("build/outputDirectory"));    assertPathWithNormalizedFileSeparators(pom.getValue("build/testOutputDirectory"));    assertPathWithNormalizedFileSeparators(pom.getValue("build/sourceDirectory"));    assertPathWithNormalizedFileSeparators(pom.getValue("build/testSourceDirectory"));    assertPathWithNormalizedFileSeparators(pom.getValue("build/resources[1]/directory"));    assertPathWithNormalizedFileSeparators(pom.getValue("build/testResources[1]/directory"));    assertPathWithNormalizedFileSeparators(pom.getValue("build/filters[1]"));    assertPathWithNormalizedFileSeparators(pom.getValue("reporting/outputDirectory"));}
46cd1cd970bbba704b0ad1952cc5f5e9856f8f2a18b2397fab2e00665da79c62
testMergedFilterOrder
public void testMergedFilterOrder() throws Exception
{    PomTestWrapper pom = buildPom("merged-filter-order/sub");    assertEquals(7, ((List<?>) pom.getValue("build/filters")).size());    assertTrue(pom.getValue("build/filters[1]").toString().endsWith("child-a.properties"));    assertTrue(pom.getValue("build/filters[2]").toString().endsWith("child-c.properties"));    assertTrue(pom.getValue("build/filters[3]").toString().endsWith("child-b.properties"));    assertTrue(pom.getValue("build/filters[4]").toString().endsWith("child-d.properties"));    assertTrue(pom.getValue("build/filters[5]").toString().endsWith("parent-c.properties"));    assertTrue(pom.getValue("build/filters[6]").toString().endsWith("parent-b.properties"));    assertTrue(pom.getValue("build/filters[7]").toString().endsWith("parent-d.properties"));}
e40cd8b2aa58a92161d30b026c8fe7493853f43496d924560529efb7c83e01a8
testProfileInjectedDependencies
public void testProfileInjectedDependencies() throws Exception
{    PomTestWrapper pom = buildPom("profile-injected-dependencies");    assertEquals(4, ((List<?>) pom.getValue("dependencies")).size());    assertEquals("a", pom.getValue("dependencies[1]/artifactId"));    assertEquals("c", pom.getValue("dependencies[2]/artifactId"));    assertEquals("b", pom.getValue("dependencies[3]/artifactId"));    assertEquals("d", pom.getValue("dependencies[4]/artifactId"));}
0a75e892c1b1ba96ce524acdd33d5daf23ab3065d58a999fc21c5e00cfdc71fe
testProfileDependenciesMultipleProfiles
public void testProfileDependenciesMultipleProfiles() throws Exception
{    PomTestWrapper pom = buildPom("profile-dependencies-multiple-profiles", "profile-1", "profile-2");    assertEquals(2, ((List<?>) pom.getValue("dependencies")).size());}
0579219b2bca2c73e8051a29612efe5f4970ce37bcf3bd8ded92091e224a2d90
testDependencyInheritance
public void testDependencyInheritance() throws Exception
{    PomTestWrapper pom = buildPom("dependency-inheritance/sub");    assertEquals(1, ((List<?>) pom.getValue("dependencies")).size());    assertEquals("4.4", pom.getValue("dependencies[1]/version"));}
7a6a174362982d09b69d92974ee69e1f5f6e70fb4658b5b36f55475c1eba6788
testManagedProfileDependency
public void testManagedProfileDependency() throws Exception
{    PomTestWrapper pom = this.buildPom("managed-profile-dependency/sub", "maven-core-it");    assertEquals(1, ((List<?>) pom.getValue("dependencies")).size());    assertEquals("org.apache.maven.its", pom.getValue("dependencies[1]/groupId"));    assertEquals("maven-core-it-support", pom.getValue("dependencies[1]/artifactId"));    assertEquals("1.3", pom.getValue("dependencies[1]/version"));    assertEquals("runtime", pom.getValue("dependencies[1]/scope"));    assertEquals(1, ((List<?>) pom.getValue("dependencies[1]/exclusions")).size());    assertEquals("commons-lang", pom.getValue("dependencies[1]/exclusions[1]/groupId"));}
a2b3bbb28bfe1c10667f670d88d989364d41d1405c0984d8831f513f4a50ec05
testProfileModuleInheritance
public void testProfileModuleInheritance() throws Exception
{    PomTestWrapper pom = this.buildPom("profile-module-inheritance/sub", "dist");    assertEquals(0, ((List<?>) pom.getValue("modules")).size());}
039726d09d8598d928b0f98eedb51fd4a3c028da1de0e9e1a465ee4fa80aa74f
testUncPath
public void testUncPath() throws Exception
{    PomTestWrapper pom = this.buildPom("unc-path/sub");    assertEquals("file:////host/site/test-child", pom.getValue("distributionManagement/site/url"));}
878956e4dbc6803dedc8389045fa7ac314b4767e94c9f156b7ad4a7b43cf67f4
testUrlAppendWithChildPathAdjustment
public void testUrlAppendWithChildPathAdjustment() throws Exception
{    PomTestWrapper pom = this.buildPom("url-append/child");    assertEquals("http://project.url/child", pom.getValue("url"));    assertEquals("http://viewvc.project.url/child", pom.getValue("scm/url"));    assertEquals("http://scm.project.url/child", pom.getValue("scm/connection"));    assertEquals("https://scm.project.url/child", pom.getValue("scm/developerConnection"));    assertEquals("http://site.project.url/child", pom.getValue("distributionManagement/site/url"));}
95d5fc5ec4127d370d738063de7d3b7f395872223db836fcce0fab2871a144a1
testRepoInheritance
public void testRepoInheritance() throws Exception
{    PomTestWrapper pom = this.buildPom("repo-inheritance");    assertEquals(1, ((List<?>) pom.getValue("repositories")).size());    assertEquals("it0043", pom.getValue("repositories[1]/name"));}
de044b0fa27912e4e45996dd27031b7c00d540f96e8c4b566a3701e374d3af53
testEmptyScm
public void testEmptyScm() throws Exception
{    PomTestWrapper pom = this.buildPom("empty-scm");    assertNull(pom.getValue("scm"));}
724c39896c5a0402188a3ce9b8a5d8b17619ff71115167bd501f8bc7f852652c
testPluginConfigurationUsingAttributesWithoutPluginManagement
public void testPluginConfigurationUsingAttributesWithoutPluginManagement() throws Exception
{    PomTestWrapper pom = buildPom("plugin-config-attributes/wo-plugin-mgmt");    assertEquals("src", pom.getValue("build/plugins[1]/configuration/domParam/copy/@todir"));    assertEquals("true", pom.getValue("build/plugins[1]/configuration/domParam/copy/@overwrite"));    assertEquals("target", pom.getValue("build/plugins[1]/configuration/domParam/copy/fileset/@dir"));    assertEquals(null, pom.getValue("build/plugins[1]/configuration/domParam/copy/fileset/@todir"));    assertEquals(null, pom.getValue("build/plugins[1]/configuration/domParam/copy/fileset/@overwrite"));}
b94f015bd34b30b71c07eecb8576c18f1c32baec015bc06ee69f3aec6e772dd6
testPluginConfigurationUsingAttributesWithPluginManagement
public void testPluginConfigurationUsingAttributesWithPluginManagement() throws Exception
{    PomTestWrapper pom = buildPom("plugin-config-attributes/w-plugin-mgmt");    assertEquals("src", pom.getValue("build/plugins[1]/configuration/domParam/copy/@todir"));    assertEquals("true", pom.getValue("build/plugins[1]/configuration/domParam/copy/@overwrite"));    assertEquals("target", pom.getValue("build/plugins[1]/configuration/domParam/copy/fileset/@dir"));    assertEquals(null, pom.getValue("build/plugins[1]/configuration/domParam/copy/fileset/@todir"));    assertEquals(null, pom.getValue("build/plugins[1]/configuration/domParam/copy/fileset/@overwrite"));}
2d74afd0c9c7073b149a03814979b772fb3f3480367dd9a9ab14d4d3b829489a
testPluginConfigurationUsingAttributesWithPluginManagementAndProfile
public void testPluginConfigurationUsingAttributesWithPluginManagementAndProfile() throws Exception
{    PomTestWrapper pom = buildPom("plugin-config-attributes/w-profile", "maven-core-it");    assertEquals("src", pom.getValue("build/plugins[1]/configuration/domParam/copy/@todir"));    assertEquals("true", pom.getValue("build/plugins[1]/configuration/domParam/copy/@overwrite"));    assertEquals("target", pom.getValue("build/plugins[1]/configuration/domParam/copy/fileset/@dir"));    assertEquals(null, pom.getValue("build/plugins[1]/configuration/domParam/copy/fileset/@todir"));    assertEquals(null, pom.getValue("build/plugins[1]/configuration/domParam/copy/fileset/@overwrite"));}
ff020469eb77650c862094b492b2749736668687e0c9ecb1a969c2d6103ac902
testPomEncoding
public void testPomEncoding() throws Exception
{    PomTestWrapper pom = buildPom("pom-encoding/utf-8");    assertEquals("TEST-CHARS: \u00DF\u0131\u03A3\u042F\u05D0\u20AC", pom.getValue("description"));    pom = buildPom("pom-encoding/latin-1");    assertEquals("TEST-CHARS: \u00C4\u00D6\u00DC\u00E4\u00F6\u00FC\u00DF", pom.getValue("description"));}
088df543a411124747311e85e13120606c4e0cdb41bff4a641b49e704366e1f1
testXmlWhitespaceHandling
public void testXmlWhitespaceHandling() throws Exception
{    PomTestWrapper pom = buildPom("xml-whitespace/sub");    assertEquals("org.apache.maven.its.mng4070", pom.getValue("groupId"));}
2145f292024a9a98ca2197bfe3214091a555d88bdd602c327453a82603c0a751
testInterpolationOfBaseUri
public void testInterpolationOfBaseUri() throws Exception
{    PomTestWrapper pom = buildPom("baseuri-interpolation/pom.xml");    assertNotEquals(pom.getBasedir().toURI().toString(), pom.getValue("properties/prop1").toString());}
01b1586b19b8619ae13b82780b7edbcbd97f6013479375165e92bd6d87d41dcd
testInterpolationOfRfc3986BaseUri
public void testInterpolationOfRfc3986BaseUri() throws Exception
{    PomTestWrapper pom = buildPom("baseuri-interpolation/pom.xml");    String prop1 = pom.getValue("properties/prop1").toString();    assertEquals(pom.getBasedir().toPath().toUri().toASCIIString(), prop1);    assertTrue(prop1.startsWith("file:///"));}
e8e113a02c3ff62c5820afd525db3129e1a6987619bb9de23fc540193d3ac9b8
testReportingPluginConfig
public void testReportingPluginConfig() throws Exception
{    PomTestWrapper pom = buildPom("reporting-plugin-config/sub");    assertEquals(3, ((List<?>) pom.getValue("reporting/plugins[1]/configuration/stringParams")).size());    assertEquals("parentParam", pom.getValue("reporting/plugins[1]/configuration/stringParams[1]/stringParam[1]"));    assertEquals("childParam", pom.getValue("reporting/plugins[1]/configuration/stringParams[1]/stringParam[2]"));    assertEquals("  preserve space  ", pom.getValue("reporting/plugins[1]/configuration/stringParams[1]/stringParam[3]"));    assertEquals("true", pom.getValue("reporting/plugins[1]/configuration/booleanParam"));}
24bd3ef48d51878f6697daf5781a1016a7d2b6b2f07658d6c50ca62eba54da88
testPropertiesNoDuplication
public void testPropertiesNoDuplication() throws Exception
{    PomTestWrapper pom = buildPom("properties-no-duplication/sub");    assertEquals(1, ((Properties) pom.getValue("properties")).size());    assertEquals("child", pom.getValue("properties/pomProfile"));}
ed3be4097196596aa722d8f1b647638bd0d48fe12c59c9d60d8d194677ea3535
testPomInheritance
public void testPomInheritance() throws Exception
{    PomTestWrapper pom = buildPom("pom-inheritance/sub");    assertEquals("parent-description", pom.getValue("description"));    assertEquals("jar", pom.getValue("packaging"));}
24dbdc0b4607a62ec3a0660d6a1e6e88d6d7212546dd81539221f5f329bfc036
testCompleteModelWithoutParent
public void testCompleteModelWithoutParent() throws Exception
{    PomTestWrapper pom = buildPom("complete-model/wo-parent");    testCompleteModel(pom);}
3949d46426c943fe806daceecf4c198c50c91c13326fe9c107dec3141cf8a62f
testCompleteModelWithParent
public void testCompleteModelWithParent() throws Exception
{    PomTestWrapper pom = buildPom("complete-model/w-parent/sub");    testCompleteModel(pom);}
e12d014c8aef667ce34498f911d1877a4a783857f491fac2bbde14ebf6e2aa65
testCompleteModel
private void testCompleteModel(PomTestWrapper pom) throws Exception
{    assertEquals("4.0.0", pom.getValue("modelVersion"));    assertEquals("org.apache.maven.its.mng", pom.getValue("groupId"));    assertEquals("test", pom.getValue("artifactId"));    assertEquals("0.2", pom.getValue("version"));    assertEquals("pom", pom.getValue("packaging"));    assertEquals("project-name", pom.getValue("name"));    assertEquals("project-description", pom.getValue("description"));    assertEquals("http://project.url/", pom.getValue("url"));    assertEquals("2009", pom.getValue("inceptionYear"));    assertEquals("project-org", pom.getValue("organization/name"));    assertEquals("http://project-org.url/", pom.getValue("organization/url"));    assertEquals(1, ((List<?>) pom.getValue("licenses")).size());    assertEquals("project-license", pom.getValue("licenses[1]/name"));    assertEquals("http://project.url/license", pom.getValue("licenses[1]/url"));    assertEquals("repo", pom.getValue("licenses[1]/distribution"));    assertEquals("free", pom.getValue("licenses[1]/comments"));    assertEquals(1, ((List<?>) pom.getValue("developers")).size());    assertEquals("dev", pom.getValue("developers[1]/id"));    assertEquals("project-developer", pom.getValue("developers[1]/name"));    assertEquals("developer@", pom.getValue("developers[1]/email"));    assertEquals("http://developer", pom.getValue("developers[1]/url"));    assertEquals("developer", pom.getValue("developers[1]/organization"));    assertEquals("http://devel.org", pom.getValue("developers[1]/organizationUrl"));    assertEquals("-1", pom.getValue("developers[1]/timezone"));    assertEquals("yes", pom.getValue("developers[1]/properties/developer"));    assertEquals(1, ((List<?>) pom.getValue("developers[1]/roles")).size());    assertEquals("devel", pom.getValue("developers[1]/roles[1]"));    assertEquals(1, ((List<?>) pom.getValue("contributors")).size());    assertEquals("project-contributor", pom.getValue("contributors[1]/name"));    assertEquals("contributor@", pom.getValue("contributors[1]/email"));    assertEquals("http://contributor", pom.getValue("contributors[1]/url"));    assertEquals("contributor", pom.getValue("contributors[1]/organization"));    assertEquals("http://contrib.org", pom.getValue("contributors[1]/organizationUrl"));    assertEquals("+1", pom.getValue("contributors[1]/timezone"));    assertEquals("yes", pom.getValue("contributors[1]/properties/contributor"));    assertEquals(1, ((List<?>) pom.getValue("contributors[1]/roles")).size());    assertEquals("contrib", pom.getValue("contributors[1]/roles[1]"));    assertEquals(1, ((List<?>) pom.getValue("mailingLists")).size());    assertEquals("project-mailing-list", pom.getValue("mailingLists[1]/name"));    assertEquals("subscribe@", pom.getValue("mailingLists[1]/subscribe"));    assertEquals("unsubscribe@", pom.getValue("mailingLists[1]/unsubscribe"));    assertEquals("post@", pom.getValue("mailingLists[1]/post"));    assertEquals("mail-archive", pom.getValue("mailingLists[1]/archive"));    assertEquals(1, ((List<?>) pom.getValue("mailingLists[1]/otherArchives")).size());    assertEquals("other-archive", pom.getValue("mailingLists[1]/otherArchives[1]"));    assertEquals("2.0.1", pom.getValue("prerequisites/maven"));    assertEquals("http://project.url/trunk", pom.getValue("scm/url"));    assertEquals("http://project.url/scm", pom.getValue("scm/connection"));    assertEquals("https://project.url/scm", pom.getValue("scm/developerConnection"));    assertEquals("TAG", pom.getValue("scm/tag"));    assertEquals("issues", pom.getValue("issueManagement/system"));    assertEquals("http://project.url/issues", pom.getValue("issueManagement/url"));    assertEquals("ci", pom.getValue("ciManagement/system"));    assertEquals("http://project.url/ci", pom.getValue("ciManagement/url"));    assertEquals(1, ((List<?>) pom.getValue("ciManagement/notifiers")).size());    assertEquals("irc", pom.getValue("ciManagement/notifiers[1]/type"));    assertEquals("ci@", pom.getValue("ciManagement/notifiers[1]/address"));    assertEquals(Boolean.TRUE, pom.getValue("ciManagement/notifiers[1]/sendOnError"));    assertEquals(Boolean.FALSE, pom.getValue("ciManagement/notifiers[1]/sendOnFailure"));    assertEquals(Boolean.FALSE, pom.getValue("ciManagement/notifiers[1]/sendOnWarning"));    assertEquals(Boolean.FALSE, pom.getValue("ciManagement/notifiers[1]/sendOnSuccess"));    assertEquals("ci", pom.getValue("ciManagement/notifiers[1]/configuration/ciProp"));    assertEquals("project.distros", pom.getValue("distributionManagement/repository/id"));    assertEquals("distros", pom.getValue("distributionManagement/repository/name"));    assertEquals("http://project.url/dist", pom.getValue("distributionManagement/repository/url"));    assertEquals(Boolean.TRUE, pom.getValue("distributionManagement/repository/uniqueVersion"));    assertEquals("project.snaps", pom.getValue("distributionManagement/snapshotRepository/id"));    assertEquals("snaps", pom.getValue("distributionManagement/snapshotRepository/name"));    assertEquals("http://project.url/snaps", pom.getValue("distributionManagement/snapshotRepository/url"));    assertEquals(Boolean.FALSE, pom.getValue("distributionManagement/snapshotRepository/uniqueVersion"));    assertEquals("project.site", pom.getValue("distributionManagement/site/id"));    assertEquals("docs", pom.getValue("distributionManagement/site/name"));    assertEquals("http://project.url/site", pom.getValue("distributionManagement/site/url"));    assertEquals("http://project.url/download", pom.getValue("distributionManagement/downloadUrl"));    assertEquals("reloc-gid", pom.getValue("distributionManagement/relocation/groupId"));    assertEquals("reloc-aid", pom.getValue("distributionManagement/relocation/artifactId"));    assertEquals("reloc-version", pom.getValue("distributionManagement/relocation/version"));    assertEquals("project-reloc-msg", pom.getValue("distributionManagement/relocation/message"));    assertEquals(1, ((List<?>) pom.getValue("modules")).size());    assertEquals("sub", pom.getValue("modules[1]"));    assertEquals(1, ((Map<?, ?>) pom.getValue("properties")).size());    assertEquals("project-property", pom.getValue("properties[1]/itProperty"));    assertEquals(1, ((List<?>) pom.getValue("dependencyManagement/dependencies")).size());    assertEquals("org.apache.maven.its", pom.getValue("dependencyManagement/dependencies[1]/groupId"));    assertEquals("managed-dep", pom.getValue("dependencyManagement/dependencies[1]/artifactId"));    assertEquals("0.1", pom.getValue("dependencyManagement/dependencies[1]/version"));    assertEquals("war", pom.getValue("dependencyManagement/dependencies[1]/type"));    assertEquals("runtime", pom.getValue("dependencyManagement/dependencies[1]/scope"));    assertEquals(Boolean.FALSE, pom.getValue("dependencyManagement/dependencies[1]/optional"));    assertEquals(1, ((List<?>) pom.getValue("dependencyManagement/dependencies[1]/exclusions")).size());    assertEquals("org.apache.maven.its", pom.getValue("dependencyManagement/dependencies[1]/exclusions[1]/groupId"));    assertEquals("excluded-managed-dep", pom.getValue("dependencyManagement/dependencies[1]/exclusions[1]/artifactId"));    assertEquals(1, ((List<?>) pom.getValue("dependencies")).size());    assertEquals("org.apache.maven.its", pom.getValue("dependencies[1]/groupId"));    assertEquals("dep", pom.getValue("dependencies[1]/artifactId"));    assertEquals("0.2", pom.getValue("dependencies[1]/version"));    assertEquals("ejb", pom.getValue("dependencies[1]/type"));    assertEquals("test", pom.getValue("dependencies[1]/scope"));    assertEquals(Boolean.TRUE, pom.getValue("dependencies[1]/optional"));    assertEquals(1, ((List<?>) pom.getValue("dependencies[1]/exclusions")).size());    assertEquals("org.apache.maven.its", pom.getValue("dependencies[1]/exclusions[1]/groupId"));    assertEquals("excluded-dep", pom.getValue("dependencies[1]/exclusions[1]/artifactId"));    assertEquals(2, ((List<?>) pom.getValue("repositories")).size());    assertEquals("project-remote-repo", pom.getValue("repositories[1]/id"));    assertEquals("http://project.url/remote", pom.getValue("repositories[1]/url"));    assertEquals("repo", pom.getValue("repositories[1]/name"));    assertEquals(RepositorySystem.DEFAULT_REMOTE_REPO_ID, pom.getValue("repositories[2]/id"));    assertEquals(RepositorySystem.DEFAULT_REMOTE_REPO_URL, pom.getValue("repositories[2]/url"));    assertEquals("test", pom.getValue("build/defaultGoal"));    assertEquals("coreit", pom.getValue("build/finalName"));    assertPathSuffixEquals("build", pom.getValue("build/directory"));    assertPathSuffixEquals("build/main", pom.getValue("build/outputDirectory"));    assertPathSuffixEquals("build/test", pom.getValue("build/testOutputDirectory"));    assertPathSuffixEquals("sources/main", pom.getValue("build/sourceDirectory"));    assertPathSuffixEquals("sources/test", pom.getValue("build/testSourceDirectory"));    assertPathSuffixEquals("sources/scripts", pom.getValue("build/scriptSourceDirectory"));    assertEquals(1, ((List<?>) pom.getValue("build/filters")).size());    assertPathSuffixEquals("src/main/filter/it.properties", pom.getValue("build/filters[1]"));    assertEquals(1, ((List<?>) pom.getValue("build/resources")).size());    assertPathSuffixEquals("res/main", pom.getValue("build/resources[1]/directory"));    assertPathSuffixEquals("main", pom.getValue("build/resources[1]/targetPath"));    assertEquals(Boolean.TRUE, pom.getValue("build/resources[1]/filtering"));    assertEquals(1, ((List<?>) pom.getValue("build/resources[1]/includes")).size());    assertPathSuffixEquals("main.included", pom.getValue("build/resources[1]/includes[1]"));    assertEquals(1, ((List<?>) pom.getValue("build/resources[1]/excludes")).size());    assertPathSuffixEquals("main.excluded", pom.getValue("build/resources[1]/excludes[1]"));    assertEquals(1, ((List<?>) pom.getValue("build/testResources")).size());    assertPathSuffixEquals("res/test", pom.getValue("build/testResources[1]/directory"));    assertPathSuffixEquals("test", pom.getValue("build/testResources[1]/targetPath"));    assertEquals(Boolean.TRUE, pom.getValue("build/testResources[1]/filtering"));    assertEquals(1, ((List<?>) pom.getValue("build/testResources[1]/includes")).size());    assertPathSuffixEquals("test.included", pom.getValue("build/testResources[1]/includes[1]"));    assertEquals(1, ((List<?>) pom.getValue("build/testResources[1]/excludes")).size());    assertPathSuffixEquals("test.excluded", pom.getValue("build/testResources[1]/excludes[1]"));    assertEquals(1, ((List<?>) pom.getValue("build/extensions")).size());    assertEquals("org.apache.maven.its.ext", pom.getValue("build/extensions[1]/groupId"));    assertEquals("ext", pom.getValue("build/extensions[1]/artifactId"));    assertEquals("3.0", pom.getValue("build/extensions[1]/version"));    assertEquals(1, ((List<?>) pom.getValue("build/plugins")).size());    assertEquals("org.apache.maven.its.plugins", pom.getValue("build/plugins[1]/groupId"));    assertEquals("maven-it-plugin-build", pom.getValue("build/plugins[1]/artifactId"));    assertEquals("2.1-SNAPSHOT", pom.getValue("build/plugins[1]/version"));    assertEquals("test.properties", pom.getValue("build/plugins[1]/configuration/outputFile"));    assertEquals(1, ((List<?>) pom.getValue("build/plugins[1]/executions")).size());    assertEquals("test", pom.getValue("build/plugins[1]/executions[1]/id"));    assertEquals("validate", pom.getValue("build/plugins[1]/executions[1]/phase"));    assertEquals("pom.properties", pom.getValue("build/plugins[1]/executions[1]/configuration/outputFile"));    assertEquals(1, ((List<?>) pom.getValue("build/plugins[1]/executions[1]/goals")).size());    assertEquals("eval", pom.getValue("build/plugins[1]/executions[1]/goals[1]"));    assertEquals(1, ((List<?>) pom.getValue("build/plugins[1]/dependencies")).size());    assertEquals("org.apache.maven.its", pom.getValue("build/plugins[1]/dependencies[1]/groupId"));    assertEquals("build-plugin-dep", pom.getValue("build/plugins[1]/dependencies[1]/artifactId"));    assertEquals("0.3", pom.getValue("build/plugins[1]/dependencies[1]/version"));    assertEquals("zip", pom.getValue("build/plugins[1]/dependencies[1]/type"));    assertEquals(1, ((List<?>) pom.getValue("build/plugins[1]/dependencies[1]/exclusions")).size());    assertEquals("org.apache.maven.its", pom.getValue("build/plugins[1]/dependencies[1]/exclusions[1]/groupId"));    assertEquals("excluded-build-plugin-dep", pom.getValue("build/plugins[1]/dependencies[1]/exclusions[1]/artifactId"));    assertEquals(Boolean.TRUE, pom.getValue("reporting/excludeDefaults"));    assertPathSuffixEquals("docs", pom.getValue("reporting/outputDirectory"));    assertEquals(1, ((List<?>) pom.getValue("reporting/plugins")).size());    assertEquals("org.apache.maven.its.plugins", pom.getValue("reporting/plugins[1]/groupId"));    assertEquals("maven-it-plugin-reporting", pom.getValue("reporting/plugins[1]/artifactId"));    assertEquals("2.0-SNAPSHOT", pom.getValue("reporting/plugins[1]/version"));    assertEquals("test.html", pom.getValue("reporting/plugins[1]/configuration/outputFile"));    assertEquals(1, ((List<?>) pom.getValue("reporting/plugins[1]/reportSets")).size());    assertEquals("it", pom.getValue("reporting/plugins[1]/reportSets[1]/id"));    assertEquals("index.html", pom.getValue("reporting/plugins[1]/reportSets[1]/configuration/outputFile"));    assertEquals(1, ((List<?>) pom.getValue("reporting/plugins[1]/reportSets[1]/reports")).size());    assertEquals("run", pom.getValue("reporting/plugins[1]/reportSets[1]/reports[1]"));}
cca91988dd7f9834cd991717e680f98f1f8654a6b8a13c7f09f3921cc61e0762
testProfileInjectionOrder
public void testProfileInjectionOrder() throws Exception
{    PomTestWrapper pom = buildPom("profile-injection-order", "pom-a", "pom-b", "pom-e", "pom-c", "pom-d");    assertEquals("e", pom.getValue("properties[1]/pomProperty"));}
f14de4e9b135fb9001bc35924ffb43134a84169450a52004c677fa1e3dfdbfed
testPropertiesInheritance
public void testPropertiesInheritance() throws Exception
{    PomTestWrapper pom = buildPom("properties-inheritance/sub");    assertEquals("parent-property", pom.getValue("properties/parentProperty"));    assertEquals("child-property", pom.getValue("properties/childProperty"));    assertEquals("child-override", pom.getValue("properties/overriddenProperty"));}
562bc10681d6e7bda8c67c57885d5be089d44ca2d7398b9ee6704b27ee9ea158
testInheritedPropertiesInterpolatedWithValuesFromChildWithoutProfiles
public void testInheritedPropertiesInterpolatedWithValuesFromChildWithoutProfiles() throws Exception
{    PomTestWrapper pom = buildPom("inherited-properties-interpolation/no-profile/sub");    assertEquals("CHILD", pom.getValue("properties/overridden"));    assertEquals("CHILD", pom.getValue("properties/interpolated"));}
a6cb4b52022c22a153425546003893b43d1b5e5b8c0fb0c99a5fa82fac5a7eba
testInheritedPropertiesInterpolatedWithValuesFromChildWithActiveProfiles
public void testInheritedPropertiesInterpolatedWithValuesFromChildWithActiveProfiles() throws Exception
{    PomTestWrapper pom = buildPom("inherited-properties-interpolation/active-profile/sub");    assertEquals(1, pom.getMavenProject().getModel().getProfiles().size());    buildPom("inherited-properties-interpolation/active-profile/sub", "it-parent", "it-child");    assertEquals("CHILD", pom.getValue("properties/overridden"));    assertEquals("CHILD", pom.getValue("properties/interpolated"));}
98fc0d55c9021c44352853b008f95f20b817fe14e1daa3bcfc2648ee281f5a88
testProfileDefaultActivation
public void testProfileDefaultActivation() throws Exception
{    PomTestWrapper pom = buildPom("profile-default-deactivation", "profile4");    assertEquals(1, pom.getMavenProject().getActiveProfiles().size());    assertEquals(1, ((List<?>) pom.getValue("build/plugins")).size());    assertEquals("2.1", pom.getValue("build/plugins[1]/version"));}
01467246102978e8ae8e17601f9ad3fa6b28c5cdd640b6ca5d64a2eeacb6415e
testBooleanInterpolation
public void testBooleanInterpolation() throws Exception
{    PomTestWrapper pom = buildPom("boolean-interpolation");    assertTrue((Boolean) pom.getValue("repositories[1]/releases/enabled"));    assertTrue((Boolean) pom.getValue("build/resources[1]/filtering"));}
db4c1bcb79978be8a7d784213f23d01adc6a866b3e370ffbc49ece1def2a67bc
testBuildExtensionInheritance
public void testBuildExtensionInheritance() throws Exception
{    PomTestWrapper pom = buildPom("build-extension-inheritance/sub");    assertEquals(3, ((List<?>) pom.getValue("build/extensions")).size());    assertEquals("b", pom.getValue("build/extensions[1]/artifactId"));    assertEquals("a", pom.getValue("build/extensions[2]/artifactId"));    assertEquals("0.2", pom.getValue("build/extensions[2]/version"));    assertEquals("c", pom.getValue("build/extensions[3]/artifactId"));}
aed64b2e096445706270708cd15564428f19fef848d79ccc3c9e31c5715d0278
testJdkActivation
public void testJdkActivation() throws Exception
{    Properties props = new Properties();    props.put("java.version", "1.5.0_15");    PomTestWrapper pom = buildPom("jdk-activation", props);    assertEquals(3, pom.getMavenProject().getActiveProfiles().size());    assertEquals("PASSED", pom.getValue("properties/jdkProperty3"));    assertEquals("PASSED", pom.getValue("properties/jdkProperty2"));    assertEquals("PASSED", pom.getValue("properties/jdkProperty1"));}
6541fa8dd9ba83a9677b078264df1f46db8c9740b71309444f9ceaf63f3b48d4
testProfilePluginMngDependencies
public void testProfilePluginMngDependencies() throws Exception
{    PomTestWrapper pom = buildPom("profile-plugin-mng-dependencies/sub", "maven-core-it");    assertEquals("a", pom.getValue("build/plugins[1]/dependencies[1]/artifactId"));}
7f631b39d0e3af36e77d4f876a0329c974f8340fc559d61667b1159184d93855
testPercentEncodedUrlsMustNotBeDecoded
public void testPercentEncodedUrlsMustNotBeDecoded() throws Exception
{    PomTestWrapper pom = this.buildPom("url-no-decoding");    assertEquals("http://maven.apache.org/spacy%20path", pom.getValue("url"));    assertEquals("http://svn.apache.org/viewvc/spacy%20path", pom.getValue("scm/url"));    assertEquals("scm:svn:svn+ssh://svn.apache.org/spacy%20path", pom.getValue("scm/connection"));    assertEquals("scm:svn:svn+ssh://svn.apache.org/spacy%20path", pom.getValue("scm/developerConnection"));    assertEquals("http://issues.apache.org/spacy%20path", pom.getValue("issueManagement/url"));    assertEquals("http://ci.apache.org/spacy%20path", pom.getValue("ciManagement/url"));    assertEquals("scm:svn:svn+ssh://dist.apache.org/spacy%20path", pom.getValue("distributionManagement/repository/url"));    assertEquals("scm:svn:svn+ssh://snap.apache.org/spacy%20path", pom.getValue("distributionManagement/snapshotRepository/url"));    assertEquals("scm:svn:svn+ssh://site.apache.org/spacy%20path", pom.getValue("distributionManagement/site/url"));}
54899275f9ec75070fcb651dd89d81da968c59699bf6d47f4d8fc84872a34c9d
testPluginManagementInheritance
public void testPluginManagementInheritance() throws Exception
{    PomTestWrapper pom = this.buildPom("plugin-management-inheritance");    assertEquals("0.1-stub-SNAPSHOT", pom.getValue("build/pluginManagement/plugins[@artifactId='maven-compiler-plugin']/version"));}
63739fbd6751cc8b6c69b0b741390043eb21217b902c814f297b048d5f5bb2bb
testProfilePlugins
public void testProfilePlugins() throws Exception
{    PomTestWrapper pom = this.buildPom("profile-plugins", "standard");    assertEquals(2, ((List<?>) pom.getValue("build/plugins")).size());    assertEquals("maven-assembly2-plugin", pom.getValue("build/plugins[2]/artifactId"));}
59fe32a2b50f99fc2a685db4b06b672b923493708b26115908367955cc5eb822
testPluginInheritanceSimple
public void testPluginInheritanceSimple() throws Exception
{    PomTestWrapper pom = this.buildPom("plugin-inheritance-simple/sub");    assertEquals(2, ((List<?>) pom.getValue("build/plugins")).size());}
ef6b449eda9ff5aa07f08ba8164a949b9867ff14ca2c9320887a7dcdcd6d8ee7
testPluginManagementDuplicate
public void testPluginManagementDuplicate() throws Exception
{    PomTestWrapper pom = this.buildPom("plugin-management-duplicate/sub");    assertEquals(12, ((List<?>) pom.getValue("build/pluginManagement/plugins")).size());}
a30d84fd39508fc0187c11cf583997e0991c2b9ed38b2f6a6708bb603355e1bc
testDistributionManagement
public void testDistributionManagement() throws Exception
{    PomTestWrapper pom = this.buildPom("distribution-management");    assertEquals("legacy", pom.getValue("distributionManagement/repository/layout"));}
aef9c52925aa28538c8a7004e1a3c6612f39198be9013e0cb5fbee7d8d0ff3d1
testDependencyScopeInheritance
public void testDependencyScopeInheritance() throws Exception
{    PomTestWrapper pom = buildPom("dependency-scope-inheritance/sub");    String scope = (String) pom.getValue("dependencies[1]/scope");    assertEquals("compile", scope);}
db7da71928f666c0eb65a7da13547ec9e95b88facccfdadb1d5b361770512667
testDependencyScope
public void testDependencyScope() throws Exception
{    buildPom("dependency-scope/sub");}
1318a090472f87c99ee022ca4d36c1f3b189b5f2c0783d90a6f2157f95775a0a
testDependencyManagementWithInterpolation
public void testDependencyManagementWithInterpolation() throws Exception
{    buildPom("dependency-management-with-interpolation/sub");}
a18110926e53741a9976e9e49b540d1d8a292c9f04da000dd7e722419c1c05e1
testInterpolationWithSystemProperty
public void testInterpolationWithSystemProperty() throws Exception
{    Properties sysProps = new Properties();    sysProps.setProperty("system.property", "PASSED");    PomTestWrapper pom = buildPom("system-property-interpolation", sysProps);    assertEquals("PASSED", pom.getValue("name"));}
a08a1b8b09191983aa5599068fcd26fa4e45fb4df9673ae99ebd1aa8c56eb1da
testPluginExecutionInheritanceWhenChildDoesNotDeclarePlugin
public void testPluginExecutionInheritanceWhenChildDoesNotDeclarePlugin() throws Exception
{    PomTestWrapper pom = buildPom("plugin-exec-inheritance/wo-merge");    @SuppressWarnings("unchecked")    List<PluginExecution> executions = (List<PluginExecution>) pom.getValue("build/pluginsAsMap[@name='org.apache.maven.its.plugins:maven-it-plugin-log-file']/executions");    assertEquals(1, executions.size());    assertEquals("inherited-execution", executions.get(0).getId());}
b54e62d0876255e08b918b23a3ed8c3242053ec08f4516ae9d38c5b353ed75de
testPluginExecutionInheritanceWhenChildDoesDeclarePluginAsWell
public void testPluginExecutionInheritanceWhenChildDoesDeclarePluginAsWell() throws Exception
{    PomTestWrapper pom = buildPom("plugin-exec-inheritance/w-merge");    @SuppressWarnings("unchecked")    List<PluginExecution> executions = (List<PluginExecution>) pom.getValue("build/pluginsAsMap[@name='org.apache.maven.its.plugins:maven-it-plugin-log-file']/executions");    assertEquals(1, executions.size());    assertEquals("inherited-execution", executions.get(0).getId());}
6973e41acfb8618899c63cabab25cccb023a791aa6a731d5424d0df0e66ede2d
testValidationErrorUponNonUniqueArtifactRepositoryId
public void testValidationErrorUponNonUniqueArtifactRepositoryId() throws Exception
{    try {        buildPom("unique-repo-id/artifact-repo");        fail("Non-unique repository ids did not cause validation error");    } catch (ProjectBuildingException e) {        }}
862fce17260f8f8f7b4c5c6f18c9e0a568f28d83705e7b4b9bb96a2237bc31df
testValidationErrorUponNonUniquePluginRepositoryId
public void testValidationErrorUponNonUniquePluginRepositoryId() throws Exception
{    try {        buildPom("unique-repo-id/plugin-repo");        fail("Non-unique repository ids did not cause validation error");    } catch (ProjectBuildingException e) {        }}
f28976733a6b1eede2198ad23d10fcd0f6b77c5d98cc80961391c36b24755b54
testValidationErrorUponNonUniqueArtifactRepositoryIdInProfile
public void testValidationErrorUponNonUniqueArtifactRepositoryIdInProfile() throws Exception
{    try {        buildPom("unique-repo-id/artifact-repo-in-profile");        fail("Non-unique repository ids did not cause validation error");    } catch (ProjectBuildingException e) {        }}
abe02bada91f773264b75d99be75d591033632ff6bd610e068264321e662e726
testValidationErrorUponNonUniquePluginRepositoryIdInProfile
public void testValidationErrorUponNonUniquePluginRepositoryIdInProfile() throws Exception
{    try {        buildPom("unique-repo-id/plugin-repo-in-profile");        fail("Non-unique repository ids did not cause validation error");    } catch (ProjectBuildingException e) {        }}
98a4ed8add3af918c1fd938d22f29abc2b4c8695363e65fc86b5090911222c18
testPrerequisitesAreNotInherited
public void testPrerequisitesAreNotInherited() throws Exception
{    PomTestWrapper pom = buildPom("prerequisites-inheritance/child");    assertSame(null, pom.getValue("prerequisites"));}
69a9faa7a6bce1e29d0296d28f10339387633c92ee31868f0a2a857f48961e70
testLicensesAreInheritedButNotAggregated
public void testLicensesAreInheritedButNotAggregated() throws Exception
{    PomTestWrapper pom = buildPom("licenses-inheritance/child-2");    assertEquals(1, ((List<?>) pom.getValue("licenses")).size());    assertEquals("child-license", pom.getValue("licenses[1]/name"));    assertEquals("http://child.url/license", pom.getValue("licenses[1]/url"));}
78f0dedea76e791b68ee10385328505eca123b668e695f84ddf0c450b5245556
testDevelopersAreInheritedButNotAggregated
public void testDevelopersAreInheritedButNotAggregated() throws Exception
{    PomTestWrapper pom = buildPom("developers-inheritance/child-2");    assertEquals(1, ((List<?>) pom.getValue("developers")).size());    assertEquals("child-developer", pom.getValue("developers[1]/name"));}
d5f01d627f9c37b0b27f447a263702e48a705caa9dbf84a75b4ebe6799faea4c
testContributorsAreInheritedButNotAggregated
public void testContributorsAreInheritedButNotAggregated() throws Exception
{    PomTestWrapper pom = buildPom("contributors-inheritance/child-2");    assertEquals(1, ((List<?>) pom.getValue("contributors")).size());    assertEquals("child-contributor", pom.getValue("contributors[1]/name"));}
c71ee240b7998eb62ccf3a4e7f1f47e904fc48028e7bc71ebdc37d8a00af9aeb
testMailingListsAreInheritedButNotAggregated
public void testMailingListsAreInheritedButNotAggregated() throws Exception
{    PomTestWrapper pom = buildPom("mailing-lists-inheritance/child-2");    assertEquals(1, ((List<?>) pom.getValue("mailingLists")).size());    assertEquals("child-mailing-list", pom.getValue("mailingLists[1]/name"));}
78715451764ef0a00133ccc4575bbc3f317d46e2c2ae475d16476021978b260a
testPluginInheritanceOrder
public void testPluginInheritanceOrder() throws Exception
{    PomTestWrapper pom = buildPom("plugin-inheritance-order/child");    assertEquals("maven-it-plugin-log-file", pom.getValue("build/plugins[1]/artifactId"));    assertEquals("maven-it-plugin-expression", pom.getValue("build/plugins[2]/artifactId"));    assertEquals("maven-it-plugin-configuration", pom.getValue("build/plugins[3]/artifactId"));    assertEquals("maven-it-plugin-log-file", pom.getValue("reporting/plugins[1]/artifactId"));    assertEquals("maven-it-plugin-expression", pom.getValue("reporting/plugins[2]/artifactId"));    assertEquals("maven-it-plugin-configuration", pom.getValue("reporting/plugins[3]/artifactId"));}
eadd5c2a4aa22c2f46299e46d929c03fba914c057f29e47328c4b20f40e7994b
testCliPropsDominateProjectPropsDuringInterpolation
public void testCliPropsDominateProjectPropsDuringInterpolation() throws Exception
{    Properties props = new Properties();    props.setProperty("testProperty", "PASSED");    PomTestWrapper pom = buildPom("interpolation-cli-wins", props);    assertEquals("PASSED", pom.getValue("properties/interpolatedProperty"));}
e7f7f1f84fc8f1991092b48a7965233ea9e7f1971ca534b909b0228dfd885c0f
testParentPomPackagingMustBePom
public void testParentPomPackagingMustBePom() throws Exception
{    try {        buildPom("parent-pom-packaging/sub");        fail("Wrong packaging of parent POM was not rejected");    } catch (ProjectBuildingException e) {        }}
837ea02834723b0a2a14c28a671f7f51fed4d88f69016d197f522dd5d75e36f7
testManagedPluginConfigurationAppliesToImplicitPluginsIntroducedByPackaging
public void testManagedPluginConfigurationAppliesToImplicitPluginsIntroducedByPackaging() throws Exception
{    PomTestWrapper pom = buildPom("plugin-management-for-implicit-plugin/child");    assertEquals("passed.txt", pom.getValue("build/plugins[@artifactId='maven-resources-plugin']/configuration/pathname"));    assertEquals("passed.txt", pom.getValue("build/plugins[@artifactId='maven-it-plugin-log-file']/configuration/logFile"));}
7acc5e6119cc1f59ff3d3c75595b5572903de762079107f3482ea62ede997f8c
testDefaultPluginsExecutionContributedByPackagingExecuteBeforeUserDefinedExecutions
public void testDefaultPluginsExecutionContributedByPackagingExecuteBeforeUserDefinedExecutions() throws Exception
{    PomTestWrapper pom = buildPom("plugin-exec-order-and-default-exec");    @SuppressWarnings("unchecked")    List<PluginExecution> executions = (List<PluginExecution>) pom.getValue("build/plugins[@artifactId='maven-resources-plugin']/executions");    assertNotNull(executions);    assertEquals(4, executions.size());    assertEquals("default-resources", executions.get(0).getId());    assertEquals("default-testResources", executions.get(1).getId());    assertEquals("test-1", executions.get(2).getId());    assertEquals("test-2", executions.get(3).getId());}
3b0b3a54a3506ea209867781c301909cd8d3176ab4f83acf363659c4b5f06d06
testPluginDeclarationsRetainPomOrderAfterInjectionOfDefaultPlugins
public void testPluginDeclarationsRetainPomOrderAfterInjectionOfDefaultPlugins() throws Exception
{    PomTestWrapper pom = buildPom("plugin-exec-order-with-lifecycle");    @SuppressWarnings("unchecked")    List<Plugin> plugins = (List<Plugin>) pom.getValue("build/plugins");    int resourcesPlugin = -1;    int customPlugin = -1;    for (int i = 0; i < plugins.size(); i++) {        Plugin plugin = plugins.get(i);        if ("maven-resources-plugin".equals(plugin.getArtifactId())) {            assertTrue(resourcesPlugin < 0);            resourcesPlugin = i;        } else if ("maven-it-plugin-log-file".equals(plugin.getArtifactId())) {            assertTrue(customPlugin < 0);            customPlugin = i;        }    }    assertTrue(plugins.toString(), customPlugin == resourcesPlugin - 1);}
69748fe09b8022036426779593b984c9c7c68daae5bb4d3ef5bc56a31bf27a8a
testPluginOrderAfterMergingWithInheritedPlugins
public void testPluginOrderAfterMergingWithInheritedPlugins() throws Exception
{    PomTestWrapper pom = buildPom("plugin-inheritance-merge-order/sub");    List<String> expected = new ArrayList<>();    expected.add("maven-it-plugin-error");    expected.add("maven-it-plugin-configuration");    expected.add("maven-it-plugin-dependency-resolution");    expected.add("maven-it-plugin-packaging");    expected.add("maven-it-plugin-log-file");    expected.add("maven-it-plugin-expression");    expected.add("maven-it-plugin-fork");    expected.add("maven-it-plugin-touch");    List<String> actual = new ArrayList<>();    @SuppressWarnings("unchecked")    List<Plugin> plugins = (List<Plugin>) pom.getValue("build/plugins");    for (Plugin plugin : plugins) {        actual.add(plugin.getArtifactId());    }    actual.retainAll(expected);    assertEquals(actual, expected);}
946273448660d63b3ef08f1ac8e05206e6cb212a18458f20b1e4c95ce4e1d421
testPluginOrderAfterMergingWithInjectedPlugins
public void testPluginOrderAfterMergingWithInjectedPlugins() throws Exception
{    PomTestWrapper pom = buildPom("plugin-injection-merge-order");    List<String> expected = new ArrayList<>();    expected.add("maven-it-plugin-error");    expected.add("maven-it-plugin-configuration");    expected.add("maven-it-plugin-dependency-resolution");    expected.add("maven-it-plugin-packaging");    expected.add("maven-it-plugin-log-file");    expected.add("maven-it-plugin-expression");    expected.add("maven-it-plugin-fork");    expected.add("maven-it-plugin-touch");    List<String> actual = new ArrayList<>();    @SuppressWarnings("unchecked")    List<Plugin> plugins = (List<Plugin>) pom.getValue("build/plugins");    for (Plugin plugin : plugins) {        actual.add(plugin.getArtifactId());    }    actual.retainAll(expected);    assertEquals(actual, expected);}
807dbe0179c919a8d02ae38ccb75cee358f2c433bc46a5f544da8d74b34e5aea
testProjectArtifactIdIsNotInheritedButMandatory
public void testProjectArtifactIdIsNotInheritedButMandatory() throws Exception
{    try {        buildPom("artifact-id-inheritance/child");        fail("Missing artifactId did not cause validation error");    } catch (ProjectBuildingException e) {        }}
f64470264786bc51721fc4a8adff9f04b05230e64f54d6bb5577e97c75919d65
assertPathSuffixEquals
private void assertPathSuffixEquals(String expected, Object actual)
{    String a = actual.toString();    a = a.substring(a.length() - expected.length()).replace('\\', '/');    assertEquals(expected, a);}
152fefb2a3b73f46f8d8d047361e606ef0c4366b16a76f3d5935fa423e79a383
assertPathWithNormalizedFileSeparators
private void assertPathWithNormalizedFileSeparators(Object value)
{    assertEquals(new File(value.toString()).getPath(), value.toString());}
a2e1f2f92ce77c715a3337e805eac9c3fcada116fafd0527ae05ae3b4d3a624e
buildPom
private PomTestWrapper buildPom(String pomPath, String... profileIds) throws Exception
{    return buildPom(pomPath, null, profileIds);}
f75e64fa0771c5f6ef48d3067fd6cddcd13c74fa9c41890f9d1d5cf7ae37b837
buildPom
private PomTestWrapper buildPom(String pomPath, Properties executionProperties, String... profileIds) throws Exception
{    return buildPom(pomPath, false, executionProperties, profileIds);}
92bb73995d554ea314b77d48165cf16b4afe1bcfb4be2236c94b3a4bdad5a4bb
buildPom
private PomTestWrapper buildPom(String pomPath, boolean lenientValidation, Properties executionProperties, String... profileIds) throws Exception
{    File pomFile = new File(testDirectory, pomPath);    if (pomFile.isDirectory()) {        pomFile = new File(pomFile, "pom.xml");    }    ProjectBuildingRequest config = new DefaultProjectBuildingRequest();    String localRepoUrl = System.getProperty("maven.repo.local", System.getProperty("user.home") + "/.m2/repository");    localRepoUrl = "file://" + localRepoUrl;    config.setLocalRepository(repositorySystem.createArtifactRepository("local", localRepoUrl, new DefaultRepositoryLayout(), null, null));    config.setActiveProfileIds(Arrays.asList(profileIds));    config.setSystemProperties(executionProperties);    config.setUserProperties(executionProperties);    config.setValidationLevel(lenientValidation ? ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0 : ModelBuildingRequest.VALIDATION_LEVEL_STRICT);    DefaultRepositorySystemSession repoSession = MavenRepositorySystemUtils.newSession();    LocalRepository localRepo = new LocalRepository(config.getLocalRepository().getBasedir());    repoSession.setLocalRepositoryManager(new SimpleLocalRepositoryManagerFactory().newInstance(repoSession, localRepo));    config.setRepositorySession(repoSession);    return new PomTestWrapper(pomFile, projectBuilder.build(pomFile, config).getProject());}
2f306784c6fb832994afc2b0c9b3874cbee42d2712d365583ddd0507dcb3a488
assertModelEquals
protected void assertModelEquals(PomTestWrapper pom, Object expected, String expression)
{    assertEquals(expected, pom.getValue(expression));}
3c8731de8b703ade2a502d1be36a1f56f37f189bcaaeec8ff0f216e81f891d0f
createPath
private static String createPath(List<String> elements)
{    StringBuilder buffer = new StringBuilder(256);    for (String s : elements) {        buffer.append(s).append(File.separator);    }    return buffer.toString().substring(0, buffer.toString().length() - 1);}
5cb41634139dccbc03acc9c3d530014417a0a8675a81e3d64379b8ce64bb81b2
getProjectsDirectory
protected String getProjectsDirectory()
{    return "src/test/projects/project-builder";}
fcf5874f4873261ac89d378003ee95bcef425bd603ad98f3f0bbc0187f943ee7
testSystemScopeDependencyIsPresentInTheCompileClasspathElements
public void testSystemScopeDependencyIsPresentInTheCompileClasspathElements() throws Exception
{    File pom = getProject("it0063");    Properties eps = new Properties();    eps.setProperty("jre.home", new File(pom.getParentFile(), "jdk/jre").getPath());    MavenSession session = createMavenSession(pom, eps);    MavenProject project = session.getCurrentProject();            project.getCompileClasspathElements();}
13004e8e0728346dd2460adc1e931b3e07761b74faab751a856164b44476b601
testBuildFromModelSource
public void testBuildFromModelSource() throws Exception
{    File pomFile = new File("src/test/resources/projects/modelsource/module01/pom.xml");    MavenSession mavenSession = createMavenSession(pomFile);    ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();    configuration.setRepositorySession(mavenSession.getRepositorySession());    ModelSource modelSource = new FileModelSource(pomFile);    ProjectBuildingResult result = lookup(org.apache.maven.project.ProjectBuilder.class).build(modelSource, configuration);    assertNotNull(result.getProject().getParentFile());}
7aa8df91e89d74ac21c4f55cb1bb3b5a12167dfec79a49a42a23a1a247145fd4
testVersionlessManagedDependency
public void testVersionlessManagedDependency() throws Exception
{    File pomFile = new File("src/test/resources/projects/versionless-managed-dependency.xml");    MavenSession mavenSession = createMavenSession(null);    ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();    configuration.setRepositorySession(mavenSession.getRepositorySession());    try {        lookup(org.apache.maven.project.ProjectBuilder.class).build(pomFile, configuration);        fail();    } catch (ProjectBuildingException e) {        }}
0b4b6eb89166595f3fe550c0f077421f6cebc0cc1cc07c890fbc992e049a57e7
testResolveDependencies
public void testResolveDependencies() throws Exception
{    File pomFile = new File("src/test/resources/projects/basic-resolveDependencies.xml");    MavenSession mavenSession = createMavenSession(null);    ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();    configuration.setRepositorySession(mavenSession.getRepositorySession());    configuration.setResolveDependencies(true);        ProjectBuildingResult result = lookup(org.apache.maven.project.ProjectBuilder.class).build(pomFile, configuration);    assertEquals(1, result.getProject().getArtifacts().size());        List<ProjectBuildingResult> results = lookup(org.apache.maven.project.ProjectBuilder.class).build(Collections.singletonList(pomFile), false, configuration);    assertEquals(1, results.size());    MavenProject mavenProject = results.get(0).getProject();    assertEquals(1, mavenProject.getArtifacts().size());}
eef5e225b457cd22cebe6e4d886b94dd0178c1f1ea64f723a1c43b832c48782a
testDontResolveDependencies
public void testDontResolveDependencies() throws Exception
{    File pomFile = new File("src/test/resources/projects/basic-resolveDependencies.xml");    MavenSession mavenSession = createMavenSession(null);    ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();    configuration.setRepositorySession(mavenSession.getRepositorySession());    configuration.setResolveDependencies(false);        ProjectBuildingResult result = lookup(org.apache.maven.project.ProjectBuilder.class).build(pomFile, configuration);    assertEquals(0, result.getProject().getArtifacts().size());        List<ProjectBuildingResult> results = lookup(org.apache.maven.project.ProjectBuilder.class).build(Collections.singletonList(pomFile), false, configuration);    assertEquals(1, results.size());    MavenProject mavenProject = results.get(0).getProject();    assertEquals(0, mavenProject.getArtifacts().size());}
b4dd0b975e34fbb4f963c20e9354e110c8ef9e67b9e9110b207e891d7a91da05
testReadModifiedPoms
public void testReadModifiedPoms() throws Exception
{    String initialValue = System.setProperty(DefaultProjectBuilder.DISABLE_GLOBAL_MODEL_CACHE_SYSTEM_PROPERTY, Boolean.toString(true));            File tempDir = Files.createTempDir();    FileUtils.copyDirectoryStructure(new File("src/test/resources/projects/grandchild-check"), tempDir);    try {        MavenSession mavenSession = createMavenSession(null);        ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();        configuration.setRepositorySession(mavenSession.getRepositorySession());        org.apache.maven.project.ProjectBuilder projectBuilder = lookup(org.apache.maven.project.ProjectBuilder.class);        File child = new File(tempDir, "child/pom.xml");                projectBuilder.build(child, configuration);                File parent = new File(tempDir, "pom.xml");        String parentContent = FileUtils.fileRead(parent);        parentContent = parentContent.replaceAll("<packaging>pom</packaging>", "<packaging>pom</packaging><properties><addedProperty>addedValue</addedProperty></properties>");        FileUtils.fileWrite(parent, "UTF-8", parentContent);                ProjectBuildingResult result = projectBuilder.build(child, configuration);        assertTrue(result.getProject().getProperties().containsKey("addedProperty"));    } finally {        if (initialValue == null) {            System.clearProperty(DefaultProjectBuilder.DISABLE_GLOBAL_MODEL_CACHE_SYSTEM_PROPERTY);        } else {            System.setProperty(DefaultProjectBuilder.DISABLE_GLOBAL_MODEL_CACHE_SYSTEM_PROPERTY, initialValue);        }        FileUtils.deleteDirectory(tempDir);    }}
22d3fca3fe6568dffae7b36ee90c4e3aaf770813ff306eb91dcdad29216e4033
testReadErroneousMavenProjectContainsReference
public void testReadErroneousMavenProjectContainsReference() throws Exception
{    File pomFile = new File("src/test/resources/projects/artifactMissingVersion.xml").getAbsoluteFile();    MavenSession mavenSession = createMavenSession(null);    ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();    configuration.setValidationLevel(ModelBuildingRequest.VALIDATION_LEVEL_MINIMAL);    configuration.setRepositorySession(mavenSession.getRepositorySession());    org.apache.maven.project.ProjectBuilder projectBuilder = lookup(org.apache.maven.project.ProjectBuilder.class);        try {        projectBuilder.build(pomFile, configuration);    } catch (ProjectBuildingException ex) {        assertEquals(1, ex.getResults().size());        MavenProject project = ex.getResults().get(0).getProject();        assertNotNull(project);        assertEquals("testArtifactMissingVersion", project.getArtifactId());        assertEquals(pomFile, project.getFile());    }        try {        projectBuilder.build(Collections.singletonList(pomFile), false, configuration);    } catch (ProjectBuildingException ex) {        assertEquals(1, ex.getResults().size());        MavenProject project = ex.getResults().get(0).getProject();        assertNotNull(project);        assertEquals("testArtifactMissingVersion", project.getArtifactId());        assertEquals(pomFile, project.getFile());    }}
fb7d34716d8d435d2d25eb5f54eeb19fb534fa0c8a9c3017c88392547e3fc55f
testReadInvalidPom
public void testReadInvalidPom() throws Exception
{    File pomFile = new File("src/test/resources/projects/badPom.xml").getAbsoluteFile();    MavenSession mavenSession = createMavenSession(null);    ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();    configuration.setValidationLevel(ModelBuildingRequest.VALIDATION_LEVEL_MINIMAL);    configuration.setRepositorySession(mavenSession.getRepositorySession());    org.apache.maven.project.ProjectBuilder projectBuilder = lookup(org.apache.maven.project.ProjectBuilder.class);        try {        projectBuilder.build(pomFile, configuration);    } catch (InvalidArtifactRTException iarte) {        assertTrue(iarte.getMessage().contains("The groupId cannot be empty."));    }        try {        projectBuilder.build(Collections.singletonList(pomFile), false, configuration);    } catch (ProjectBuildingException ex) {        assertEquals(1, ex.getResults().size());        MavenProject project = ex.getResults().get(0).getProject();        assertNotNull(project);        assertNotSame(0, ex.getResults().get(0).getProblems().size());    }}
1aa1e30544c07862aa45331d681be91d2ba681bd0edde55e65eb9b05992d9464
testReadParentAndChildWithRegularVersionSetParentFile
public void testReadParentAndChildWithRegularVersionSetParentFile() throws Exception
{    List<File> toRead = new ArrayList<>(2);    File parentPom = getProject("MNG-6723");    toRead.add(parentPom);    toRead.add(new File(parentPom.getParentFile(), "child/pom.xml"));    MavenSession mavenSession = createMavenSession(null);    ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();    configuration.setValidationLevel(ModelBuildingRequest.VALIDATION_LEVEL_MINIMAL);    configuration.setRepositorySession(mavenSession.getRepositorySession());    org.apache.maven.project.ProjectBuilder projectBuilder = lookup(org.apache.maven.project.ProjectBuilder.class);        boolean parentFileWasFoundOnChild = false;    for (File file : toRead) {        List<ProjectBuildingResult> results = projectBuilder.build(Collections.singletonList(file), false, configuration);        assertResultShowNoError(results);        MavenProject project = findChildProject(results);        if (project != null) {            assertEquals(parentPom, project.getParentFile());            parentFileWasFoundOnChild = true;        }    }    assertTrue(parentFileWasFoundOnChild);        List<ProjectBuildingResult> results = projectBuilder.build(toRead, false, configuration);    assertResultShowNoError(results);    assertEquals(parentPom, findChildProject(results).getParentFile());    Collections.reverse(toRead);    results = projectBuilder.build(toRead, false, configuration);    assertResultShowNoError(results);    assertEquals(parentPom, findChildProject(results).getParentFile());}
bd91bc6a766c2e11c057e5ef06beb672dbacc9a03be9e6d62117b89cef438ec1
findChildProject
private MavenProject findChildProject(List<ProjectBuildingResult> results)
{    for (ProjectBuildingResult result : results) {        if (result.getPomFile().getParentFile().getName().equals("child")) {            return result.getProject();        }    }    return null;}
72c7afb730efd3a81b6f2e313a047742b8a97c0422c15fd509048e8884bf60ba
assertResultShowNoError
private void assertResultShowNoError(List<ProjectBuildingResult> results)
{    for (ProjectBuildingResult result : results) {        assertTrue(result.getProblems().isEmpty());        assertNotNull(result.getProject());    }}
103a67ea2644561d1558ca976f825d905e1e54fa67a305b8adb06d266e3bec75
testBuildProperties
public void testBuildProperties() throws Exception
{    File file = new File(getProject("MNG-6716").getParentFile(), "project/pom.xml");    MavenSession mavenSession = createMavenSession(null);    ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();    configuration.setRepositorySession(mavenSession.getRepositorySession());    configuration.setResolveDependencies(true);    List<ProjectBuildingResult> result = projectBuilder.build(Collections.singletonList(file), true, configuration);    MavenProject project = result.get(0).getProject();        assertEquals(1, project.getTestCompileSourceRoots().size());    assertEquals(1, project.getCompileSourceRoots().size());    assertEquals(1, project.getMailingLists().size());    assertEquals(1, project.getResources().size());}
042f9df5e2d072985c137909e88ab90ad237ebae82f80dfc99ce712061acf9e3
testResolveParentThrowsUnresolvableModelExceptionWhenNotFound
public void testResolveParentThrowsUnresolvableModelExceptionWhenNotFound() throws Exception
{    final Parent parent = new Parent();    parent.setGroupId("org.apache");    parent.setArtifactId("apache");    parent.setVersion("0");    try {        this.newModelResolver().resolveModel(parent);        fail("Expected 'UnresolvableModelException' not thrown.");    } catch (final UnresolvableModelException e) {        assertNotNull(e.getMessage());        assertTrue(e.getMessage().startsWith("Could not find artifact org.apache:apache:pom:0 in central"));    }}
24b15d737b18756f8bcd288906dca4928e5d47182198810ea71fd9638a530d28
testResolveParentThrowsUnresolvableModelExceptionWhenNoMatchingVersionFound
public void testResolveParentThrowsUnresolvableModelExceptionWhenNoMatchingVersionFound() throws Exception
{    final Parent parent = new Parent();    parent.setGroupId("org.apache");    parent.setArtifactId("apache");    parent.setVersion("[2.0,2.1)");    try {        this.newModelResolver().resolveModel(parent);        fail("Expected 'UnresolvableModelException' not thrown.");    } catch (final UnresolvableModelException e) {        assertEquals("No versions matched the requested parent version range '[2.0,2.1)'", e.getMessage());    }}
991b1cf72428e4d6dc0f1be2fb6015541b3a37cba40d9271aa6949405b4e7138
testResolveParentThrowsUnresolvableModelExceptionWhenUsingRangesWithoutUpperBound
public void testResolveParentThrowsUnresolvableModelExceptionWhenUsingRangesWithoutUpperBound() throws Exception
{    final Parent parent = new Parent();    parent.setGroupId("org.apache");    parent.setArtifactId("apache");    parent.setVersion("[1,)");    try {        this.newModelResolver().resolveModel(parent);        fail("Expected 'UnresolvableModelException' not thrown.");    } catch (final UnresolvableModelException e) {        assertEquals("The requested parent version range '[1,)' does not specify an upper bound", e.getMessage());    }}
a4980fe65692d3947e8d2e04228b134ca83be2d8dbc2afbd9ec6b1d96132b887
testResolveParentSuccessfullyResolvesExistingParentWithoutRange
public void testResolveParentSuccessfullyResolvesExistingParentWithoutRange() throws Exception
{    final Parent parent = new Parent();    parent.setGroupId("org.apache");    parent.setArtifactId("apache");    parent.setVersion("1");    assertNotNull(this.newModelResolver().resolveModel(parent));    assertEquals("1", parent.getVersion());}
1afccffcb3d27b2bf629f255973454d21bedf32e3349fd16edb3b25a258b91e1
testResolveParentSuccessfullyResolvesExistingParentUsingHighestVersion
public void testResolveParentSuccessfullyResolvesExistingParentUsingHighestVersion() throws Exception
{    final Parent parent = new Parent();    parent.setGroupId("org.apache");    parent.setArtifactId("apache");    parent.setVersion("(,2.0)");    assertNotNull(this.newModelResolver().resolveModel(parent));    assertEquals("1", parent.getVersion());}
d017e044218aa08ae4aead2208da552dff242706a125a6e044d6176491840e08
testResolveDependencyThrowsUnresolvableModelExceptionWhenNotFound
public void testResolveDependencyThrowsUnresolvableModelExceptionWhenNotFound() throws Exception
{    final Dependency dependency = new Dependency();    dependency.setGroupId("org.apache");    dependency.setArtifactId("apache");    dependency.setVersion("0");    try {        this.newModelResolver().resolveModel(dependency);        fail("Expected 'UnresolvableModelException' not thrown.");    } catch (final UnresolvableModelException e) {        assertNotNull(e.getMessage());        assertTrue(e.getMessage().startsWith("Could not find artifact org.apache:apache:pom:0 in central"));    }}
71e6f273ad35df8acd356817b036bb09fcdf717745e55d5792c453dd1e31c552
testResolveDependencyThrowsUnresolvableModelExceptionWhenNoMatchingVersionFound
public void testResolveDependencyThrowsUnresolvableModelExceptionWhenNoMatchingVersionFound() throws Exception
{    final Dependency dependency = new Dependency();    dependency.setGroupId("org.apache");    dependency.setArtifactId("apache");    dependency.setVersion("[2.0,2.1)");    try {        this.newModelResolver().resolveModel(dependency);        fail("Expected 'UnresolvableModelException' not thrown.");    } catch (final UnresolvableModelException e) {        assertEquals("No versions matched the requested dependency version range '[2.0,2.1)'", e.getMessage());    }}
a3c17ab183fcf38a1cd8190acd3b15881b9631a3d58a224bb98b0a4612ee1349
testResolveDependencyThrowsUnresolvableModelExceptionWhenUsingRangesWithoutUpperBound
public void testResolveDependencyThrowsUnresolvableModelExceptionWhenUsingRangesWithoutUpperBound() throws Exception
{    final Dependency dependency = new Dependency();    dependency.setGroupId("org.apache");    dependency.setArtifactId("apache");    dependency.setVersion("[1,)");    try {        this.newModelResolver().resolveModel(dependency);        fail("Expected 'UnresolvableModelException' not thrown.");    } catch (final UnresolvableModelException e) {        assertEquals("The requested dependency version range '[1,)' does not specify an upper bound", e.getMessage());    }}
b975c57fc0e140ca994be768b59fa26058fda00f57afce5fdc2e0f8ed512f9ad
testResolveDependencySuccessfullyResolvesExistingDependencyWithoutRange
public void testResolveDependencySuccessfullyResolvesExistingDependencyWithoutRange() throws Exception
{    final Dependency dependency = new Dependency();    dependency.setGroupId("org.apache");    dependency.setArtifactId("apache");    dependency.setVersion("1");    assertNotNull(this.newModelResolver().resolveModel(dependency));    assertEquals("1", dependency.getVersion());}
2a7c8c9ddb07fea00acb6c17f0b6d1b262229c97b9027027d65b170304384acc
testResolveDependencySuccessfullyResolvesExistingDependencyUsingHighestVersion
public void testResolveDependencySuccessfullyResolvesExistingDependencyUsingHighestVersion() throws Exception
{    final Dependency dependency = new Dependency();    dependency.setGroupId("org.apache");    dependency.setArtifactId("apache");    dependency.setVersion("(,2.0)");    assertNotNull(this.newModelResolver().resolveModel(dependency));    assertEquals("1", dependency.getVersion());}
74b2ae87339e712719e3a6b64902147045c061923e500737bbb0d9da7d82fa5f
newModelResolver
private ModelResolver newModelResolver() throws Exception
{    final File localRepo = new File(this.getLocalRepository().getBasedir());    final DefaultRepositorySystemSession repoSession = MavenRepositorySystemUtils.newSession();    repoSession.setLocalRepositoryManager(new LegacyLocalRepositoryManager(localRepo));    return new ProjectModelResolver(repoSession, null, lookup(RepositorySystem.class), lookup(RemoteRepositoryManager.class), this.getRemoteRepositories(), ProjectBuildingRequest.RepositoryMerging.REQUEST_DOMINANT, null);}
e8ec55ec7e7be6fa146fe5cb57dc739bf7b6085ecf684c2084ae4e7c5f271dea
getRemoteRepositories
private List<RemoteRepository> getRemoteRepositories() throws InvalidRepositoryException
{    final File repoDir = new File(getBasedir(), "src/test/remote-repo").getAbsoluteFile();    final RemoteRepository remoteRepository = new RemoteRepository.Builder(org.apache.maven.repository.RepositorySystem.DEFAULT_REMOTE_REPO_ID, "default", repoDir.toURI().toASCIIString()).build();    return Collections.singletonList(remoteRepository);}
7a946abc0786fc3d66ef2a869200aca9d89a996c2da0c15cbd0b120d801977ef
createParent
private Parent createParent(MavenProject project)
{    return createParent(project.getGroupId(), project.getArtifactId(), project.getVersion());}
f2a86a96a3ef19889a0aa5b96107912d09591bb1085db831aad1783e79fc29ca
createParent
private Parent createParent(String groupId, String artifactId, String version)
{    Parent plugin = new Parent();    plugin.setGroupId(groupId);    plugin.setArtifactId(artifactId);    plugin.setVersion(version);    return plugin;}
69fa7fcef20a8f42f52ea7fb9939110ac243728b2a24519f43fa2450b592565b
createDependency
private Dependency createDependency(MavenProject project)
{    return createDependency(project.getGroupId(), project.getArtifactId(), project.getVersion());}
490c7fe19e08cccd2474f837e6434a57eed222cf8cc1428510b9905036bcd6e7
createDependency
private Dependency createDependency(String groupId, String artifactId, String version)
{    Dependency dependency = new Dependency();    dependency.setGroupId(groupId);    dependency.setArtifactId(artifactId);    dependency.setVersion(version);    return dependency;}
f4edb8717d571333205e79536b0d68f4a26c6252d946fc82be4041b5ead38b32
createPlugin
private Plugin createPlugin(MavenProject project)
{    return createPlugin(project.getGroupId(), project.getArtifactId(), project.getVersion());}
c1f5ac93036ebc30ab7599f2358080909949a142b0ec2bac14a8afed1d6425fb
createPlugin
private Plugin createPlugin(String groupId, String artifactId, String version)
{    Plugin plugin = new Plugin();    plugin.setGroupId(groupId);    plugin.setArtifactId(artifactId);    plugin.setVersion(version);    return plugin;}
5befec5f2dc8f692af7b79b892496669903db39c0aa38f026b1a1bcc96cb70cc
createExtension
private Extension createExtension(String groupId, String artifactId, String version)
{    Extension extension = new Extension();    extension.setGroupId(groupId);    extension.setArtifactId(artifactId);    extension.setVersion(version);    return extension;}
d522eed660573bbbc415f54fe1e1d7ef5e7326c3540ee5448fe0575a91948231
createProject
private static MavenProject createProject(String groupId, String artifactId, String version)
{    Model model = new Model();    model.setGroupId(groupId);    model.setArtifactId(artifactId);    model.setVersion(version);    model.setBuild(new Build());    return new MavenProject(model);}
a5785dd18c8a45b49eb2f459f7dfa1c6a76fc1c950ad994131308a0b7140a8cc
testShouldNotFailWhenPluginDepReferencesCurrentProject
public void testShouldNotFailWhenPluginDepReferencesCurrentProject() throws CycleDetectedException, DuplicateProjectException
{    MavenProject project = createProject("group", "artifact", "1.0");    Build build = project.getModel().getBuild();    Plugin plugin = createPlugin("other.group", "other-artifact", "1.0");    Dependency dep = createDependency("group", "artifact", "1.0");    plugin.addDependency(dep);    build.addPlugin(plugin);    new ProjectSorter(Collections.singletonList(project));}
28ee486bc53fdb47fa124acc38ec91a3103ff62a13a7368f520a50319d990df9
testShouldNotFailWhenManagedPluginDepReferencesCurrentProject
public void testShouldNotFailWhenManagedPluginDepReferencesCurrentProject() throws CycleDetectedException, DuplicateProjectException
{    MavenProject project = createProject("group", "artifact", "1.0");    Build build = project.getModel().getBuild();    PluginManagement pMgmt = new PluginManagement();    Plugin plugin = createPlugin("other.group", "other-artifact", "1.0");    Dependency dep = createDependency("group", "artifact", "1.0");    plugin.addDependency(dep);    pMgmt.addPlugin(plugin);    build.setPluginManagement(pMgmt);    new ProjectSorter(Collections.singletonList(project));}
feafd6d84052fcbd7e85c550d8a48e728a0bb72538ad4ad2386b2f3608731afa
testShouldNotFailWhenProjectReferencesNonExistentProject
public void testShouldNotFailWhenProjectReferencesNonExistentProject() throws CycleDetectedException, DuplicateProjectException
{    MavenProject project = createProject("group", "artifact", "1.0");    Build build = project.getModel().getBuild();    Extension extension = createExtension("other.group", "other-artifact", "1.0");    build.addExtension(extension);    new ProjectSorter(Collections.singletonList(project));}
6414eebbc0d12319d53c9aa4fa46bfe4493d4b00506783ddb4011f4c0434499f
testMatchingArtifactIdsDifferentGroupIds
public void testMatchingArtifactIdsDifferentGroupIds() throws CycleDetectedException, DuplicateProjectException
{    List<MavenProject> projects = new ArrayList<>();    MavenProject project1 = createProject("groupId1", "artifactId", "1.0");    projects.add(project1);    MavenProject project2 = createProject("groupId2", "artifactId", "1.0");    projects.add(project2);    project1.getDependencies().add(createDependency(project2));    projects = new ProjectSorter(projects).getSortedProjects();    assertEquals(project2, projects.get(0));    assertEquals(project1, projects.get(1));}
0717f9b66603d6a3799f08e19d2eab8f8461996995cd4b4b4f6224c8fdd6c1b7
testMatchingGroupIdsDifferentArtifactIds
public void testMatchingGroupIdsDifferentArtifactIds() throws CycleDetectedException, DuplicateProjectException
{    List<MavenProject> projects = new ArrayList<>();    MavenProject project1 = createProject("groupId", "artifactId1", "1.0");    projects.add(project1);    MavenProject project2 = createProject("groupId", "artifactId2", "1.0");    projects.add(project2);    project1.getDependencies().add(createDependency(project2));    projects = new ProjectSorter(projects).getSortedProjects();    assertEquals(project2, projects.get(0));    assertEquals(project1, projects.get(1));}
d74b08b2cdb2fdbd957cd7d22e6db37cfc4cd5f1633a7de3b0482eeba112c49b
testMatchingIdsAndVersions
public void testMatchingIdsAndVersions() throws CycleDetectedException
{    List<MavenProject> projects = new ArrayList<>();    MavenProject project1 = createProject("groupId", "artifactId", "1.0");    projects.add(project1);    MavenProject project2 = createProject("groupId", "artifactId", "1.0");    projects.add(project2);    try {        projects = new ProjectSorter(projects).getSortedProjects();        fail("Duplicate projects should fail");    } catch (DuplicateProjectException e) {                assertTrue(true);    }}
5b0f48980671ed7d000467780eeab3d85b54e9e842268497fb0058737725b347
testMatchingIdsAndDifferentVersions
public void testMatchingIdsAndDifferentVersions() throws CycleDetectedException, DuplicateProjectException
{    List<MavenProject> projects = new ArrayList<>();    MavenProject project1 = createProject("groupId", "artifactId", "1.0");    projects.add(project1);    MavenProject project2 = createProject("groupId", "artifactId", "2.0");    projects.add(project2);    projects = new ProjectSorter(projects).getSortedProjects();    assertEquals(project1, projects.get(0));    assertEquals(project2, projects.get(1));}
9e8a3e72aa406dfa09eb04950ecef04a7616d0dea86a42425ec9fea25645c8c9
testPluginDependenciesInfluenceSorting
public void testPluginDependenciesInfluenceSorting() throws Exception
{    List<MavenProject> projects = new ArrayList<>();    MavenProject parentProject = createProject("groupId", "parent", "1.0");    projects.add(parentProject);    MavenProject declaringProject = createProject("groupId", "declarer", "1.0");    declaringProject.setParent(parentProject);    declaringProject.getModel().setParent(createParent(parentProject));    projects.add(declaringProject);    MavenProject pluginLevelDepProject = createProject("groupId", "plugin-level-dep", "1.0");    pluginLevelDepProject.setParent(parentProject);    pluginLevelDepProject.getModel().setParent(createParent(parentProject));    projects.add(pluginLevelDepProject);    MavenProject pluginProject = createProject("groupId", "plugin", "1.0");    pluginProject.setParent(parentProject);    pluginProject.getModel().setParent(createParent(parentProject));    projects.add(pluginProject);    Plugin plugin = createPlugin(pluginProject);    plugin.addDependency(createDependency(pluginLevelDepProject));    Build build = declaringProject.getModel().getBuild();    build.addPlugin(plugin);    projects = new ProjectSorter(projects).getSortedProjects();    assertEquals(parentProject, projects.get(0));        assertTrue(projects.contains(pluginProject));    assertTrue(projects.contains(pluginLevelDepProject));        assertEquals(declaringProject, projects.get(3));}
86bcf7a08b7b891414f9e540dff2a261f1cce803d68f02717991dad0b808403c
testPluginDependenciesInfluenceSorting_DeclarationInParent
public void testPluginDependenciesInfluenceSorting_DeclarationInParent() throws Exception
{    List<MavenProject> projects = new ArrayList<>();    MavenProject parentProject = createProject("groupId", "parent-declarer", "1.0");    projects.add(parentProject);    MavenProject pluginProject = createProject("groupId", "plugin", "1.0");    pluginProject.setParent(parentProject);    pluginProject.getModel().setParent(createParent(parentProject));    projects.add(pluginProject);    MavenProject pluginLevelDepProject = createProject("groupId", "plugin-level-dep", "1.0");    pluginLevelDepProject.setParent(parentProject);    pluginLevelDepProject.getModel().setParent(createParent(parentProject));    projects.add(pluginLevelDepProject);    Plugin plugin = createPlugin(pluginProject);    plugin.addDependency(createDependency(pluginLevelDepProject));    Build build = parentProject.getModel().getBuild();    build.addPlugin(plugin);    projects = new ProjectSorter(projects).getSortedProjects();    System.out.println(projects);    assertEquals(parentProject, projects.get(0));        assertTrue(projects.contains(pluginProject));    assertTrue(projects.contains(pluginLevelDepProject));}
f8182cb4a95424aa35380f6ef7a25131507ca46464450464eaee8fe870a4bb62
testPluginVersionsAreConsidered
public void testPluginVersionsAreConsidered() throws Exception
{    List<MavenProject> projects = new ArrayList<>();    MavenProject pluginProjectA = createProject("group", "plugin-a", "2.0-SNAPSHOT");    projects.add(pluginProjectA);    pluginProjectA.getModel().getBuild().addPlugin(createPlugin("group", "plugin-b", "1.0"));    MavenProject pluginProjectB = createProject("group", "plugin-b", "2.0-SNAPSHOT");    projects.add(pluginProjectB);    pluginProjectB.getModel().getBuild().addPlugin(createPlugin("group", "plugin-a", "1.0"));    projects = new ProjectSorter(projects).getSortedProjects();    assertTrue(projects.contains(pluginProjectA));    assertTrue(projects.contains(pluginProjectB));}
342adf38b63dadeab6e12871aa41191ba65c27751a8469a4040344237a9f323d
testDependencyPrecedesProjectThatUsesSpecificDependencyVersion
public void testDependencyPrecedesProjectThatUsesSpecificDependencyVersion() throws Exception
{    List<MavenProject> projects = new ArrayList<>();    MavenProject usingProject = createProject("group", "project", "1.0");    projects.add(usingProject);    usingProject.getModel().addDependency(createDependency("group", "dependency", "1.0"));    MavenProject pluginProject = createProject("group", "dependency", "1.0");    projects.add(pluginProject);    projects = new ProjectSorter(projects).getSortedProjects();    assertEquals(pluginProject, projects.get(0));    assertEquals(usingProject, projects.get(1));}
f685d3a7452997b55914ab2af547c5c0c7c969ad6c8ad3ead653e0284dc46e6e
testDependencyPrecedesProjectThatUsesUnresolvedDependencyVersion
public void testDependencyPrecedesProjectThatUsesUnresolvedDependencyVersion() throws Exception
{    List<MavenProject> projects = new ArrayList<>();    MavenProject usingProject = createProject("group", "project", "1.0");    projects.add(usingProject);    usingProject.getModel().addDependency(createDependency("group", "dependency", "[1.0,)"));    MavenProject pluginProject = createProject("group", "dependency", "1.0");    projects.add(pluginProject);    projects = new ProjectSorter(projects).getSortedProjects();    assertEquals(pluginProject, projects.get(0));    assertEquals(usingProject, projects.get(1));}
5bba400f6603b67e47f7e66643840fc70b026b0c24e45f5186f68b7b6868d426
retrieve
public ResolutionGroup retrieve(Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories) throws ArtifactMetadataRetrievalException
{    ResolutionGroup rg = super.retrieve(artifact, localRepository, remoteRepositories);    for (Artifact a : rg.getArtifacts()) {        a.setResolved(true);    }    return rg;}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();    resolver = lookup(ProjectDependenciesResolver.class);}
68bbf6c94fbad4862990669ea582b65c28678087c2377b2c3fb0948d54293af4
tearDown
protected void tearDown() throws Exception
{    resolver = null;    super.tearDown();}
5cb41634139dccbc03acc9c3d530014417a0a8675a81e3d64379b8ce64bb81b2
getProjectsDirectory
protected String getProjectsDirectory()
{    return "src/test/projects/project-dependencies-resolver";}
e3ac12eb7b18b2319929c9b9b81eb32c62fbe2a49a6b858f59b7103f14368e2f
testSystemScopeDependencies
public void testSystemScopeDependencies() throws Exception
{    MavenSession session = createMavenSession(null);    MavenProject project = session.getCurrentProject();    new ProjectBuilder(project).addDependency("com.mycompany", "system-dependency", "1.0", Artifact.SCOPE_SYSTEM, new File(getBasedir(), "pom.xml").getAbsolutePath());    Set<Artifact> artifactDependencies = resolver.resolve(project, Collections.singleton(Artifact.SCOPE_COMPILE), session);    assertEquals(1, artifactDependencies.size());}
fcf5874f4873261ac89d378003ee95bcef425bd603ad98f3f0bbc0187f943ee7
testSystemScopeDependencyIsPresentInTheCompileClasspathElements
public void testSystemScopeDependencyIsPresentInTheCompileClasspathElements() throws Exception
{    File pom = getProject("it0063");    Properties eps = new Properties();    eps.setProperty("jre.home", new File(pom.getParentFile(), "jdk/jre").getPath());    MavenSession session = createMavenSession(pom, eps);    MavenProject project = session.getCurrentProject();    project.setArtifacts(resolver.resolve(project, Collections.singleton(Artifact.SCOPE_COMPILE), session));    List<String> elements = project.getCompileClasspathElements();    assertEquals(2, elements.size());    @SuppressWarnings("deprecation")    List<Artifact> artifacts = project.getCompileArtifacts();    assertEquals(1, artifacts.size());    assertTrue(artifacts.get(0).getFile().getName().endsWith("tools.jar"));}
09e8f13a9a603d31d64bb498b77d15572483824d843d0e82a570643192f62186
getId
public String getId()
{    return "legacy";}
6c63652ca89949e5d136675e9b8c89f393e36286bda4d26fa63c77d8d06c4fab
pathOf
public String pathOf(Artifact artifact)
{    ArtifactHandler artifactHandler = artifact.getArtifactHandler();    StringBuilder path = new StringBuilder(128);    path.append(artifact.getGroupId()).append('/');    path.append(artifactHandler.getDirectory()).append('/');    path.append(artifact.getArtifactId()).append('-').append(artifact.getVersion());    if (artifact.hasClassifier()) {        path.append('-').append(artifact.getClassifier());    }    if (artifactHandler.getExtension() != null && artifactHandler.getExtension().length() > 0) {        path.append('.').append(artifactHandler.getExtension());    }    return path.toString();}
2bf3ce12ca84872494a2865c7a246067b1efd12dc3403ae1a3b69eb89fda872e
pathOfLocalRepositoryMetadata
public String pathOfLocalRepositoryMetadata(ArtifactMetadata metadata, ArtifactRepository repository)
{    return pathOfRepositoryMetadata(metadata, metadata.getLocalFilename(repository));}
b126eb700f169df57ef58e793e786479d7eea9e4bc840fe4603f35688a4a3510
pathOfRepositoryMetadata
private String pathOfRepositoryMetadata(ArtifactMetadata metadata, String filename)
{    StringBuilder path = new StringBuilder(128);    path.append(metadata.getGroupId()).append(PATH_SEPARATOR).append("poms").append(PATH_SEPARATOR);    path.append(filename);    return path.toString();}
71592720c0b04200497abee0127a385a42bb60fee54e020cce105b67cd21d2e7
pathOfRemoteRepositoryMetadata
public String pathOfRemoteRepositoryMetadata(ArtifactMetadata metadata)
{    return pathOfRepositoryMetadata(metadata, metadata.getRemoteFilename());}
72a56f4f76ed886823d719d171deaf7269e3e03581e490ae41d8888ab09c151c
getClassifier
public String getClassifier()
{    return null;}
1569f194c7523775c854ff67cac1f81383798e7ba057b83499d6000987730b95
getDirectory
public String getDirectory()
{    return getPackaging() + "s";}
dd386f4d75b694f73345347a9b2e46289fee679d7748d4d3eee41cd501d6e88c
getExtension
public String getExtension()
{    return extension;}
345e79f504a23e5b53f54930d7e01f191e855cd500fc60bdda621eec493957bb
getLanguage
public String getLanguage()
{    return "java";}
9a63f6cad461699089dd5d7d862cf5ef3ece77582a35e5816083a14583c6c7e1
getPackaging
public String getPackaging()
{    return type;}
80a8caf96dc1bfc507f0d97c625d5b23ce99f86dc8db2108fd0a07ee92590a10
isAddedToClasspath
public boolean isAddedToClasspath()
{    return true;}
4afd5ea007fd5caeb382a8a7af760bc7954fef2ae8328ed49c32b329839e5cd2
isIncludesDependencies
public boolean isIncludesDependencies()
{    return false;}
5df6118bc0e745d8b18e0a6a99b2e3f2ddba8140cbeb1423ce2df50a9f140574
close
public void close()
{}
ca18a71d24538f9fa76545c55c3e0bff613250937d7b269062a6a5f0f05cdbb8
get
public void get(Collection<? extends ArtifactDownload> artifactDownloads, Collection<? extends MetadataDownload> metadataDownloads)
{    if (artifactDownloads != null) {        for (ArtifactDownload download : artifactDownloads) {            File remoteFile = new File(basedir, path(download.getArtifact()));            try {                FileUtils.copyFile(remoteFile, download.getFile());            } catch (IOException e) {                if (!remoteFile.exists()) {                    download.setException(new ArtifactNotFoundException(download.getArtifact(), repository));                } else {                    download.setException(new ArtifactTransferException(download.getArtifact(), repository, e));                }            }        }    }    if (metadataDownloads != null) {        for (final MetadataDownload download : metadataDownloads) {            File remoteFile = new File(basedir, path(download.getMetadata()));            try {                FileUtils.copyFile(remoteFile, download.getFile());            } catch (IOException e) {                if (!remoteFile.exists()) {                    download.setException(new MetadataNotFoundException(download.getMetadata(), repository));                } else {                    download.setException(new MetadataTransferException(download.getMetadata(), repository, e));                }            }        }    }}
b99302097a371a2ed9bcd45876aa8d6f63e03081ba7b8fe15e51497dedeea0f0
path
private String path(Artifact artifact)
{    StringBuilder path = new StringBuilder(128);    path.append(artifact.getGroupId().replace('.', '/')).append('/');    path.append(artifact.getArtifactId()).append('/');    path.append(artifact.getBaseVersion()).append('/');    path.append(artifact.getArtifactId()).append('-').append(artifact.getVersion());    if (artifact.getClassifier().length() > 0) {        path.append('-').append(artifact.getClassifier());    }    path.append('.').append(artifact.getExtension());    return path.toString();}
cc4cd36a5b14b96e487a5243b82b2f9ad2c73e850ce62f5f62585ba85f4b9267
path
private String path(Metadata metadata)
{    StringBuilder path = new StringBuilder(128);    path.append(metadata.getGroupId().replace('.', '/')).append('/');    path.append(metadata.getArtifactId()).append('/');    path.append("maven-metadata.xml");    return path.toString();}
dec89320f39ba07bc8e4e10e9d371121cfd23bc5b3f545abf9f3d382cfcf2098
put
public void put(Collection<? extends ArtifactUpload> artifactUploads, Collection<? extends MetadataUpload> metadataUploads)
{}
9fb5f76d2aa5dec2da4ddd38a43b668ec64215c8a5d436fde99553266442993d
newInstance
public RepositoryConnector newInstance(RepositorySystemSession session, RemoteRepository repository) throws NoRepositoryConnectorException
{    return new TestRepositoryConnector(repository);}
05059ca149ccaeab9b544201863a810ff640c2cd00713f51ae2dd34812733778
getPriority
public float getPriority()
{    return 0;}
09a0a8d8198fc496a8298e5fbf8867b1772df4dcf6c62098d677096a6394fa77
buildArtifactRepository
public ArtifactRepository buildArtifactRepository(Repository repository) throws InvalidRepositoryException
{    return new MavenArtifactRepository(repository.getId(), repository.getUrl(), new DefaultRepositoryLayout(), new ArtifactRepositoryPolicy(), new ArtifactRepositoryPolicy());}
116d7476418b06efc4a2719ff335ac0555aed715dfc0256cd0c74f7060bb73a9
createArtifact
public Artifact createArtifact(String groupId, String artifactId, String version, String packaging)
{    return createArtifact(groupId, artifactId, version, null, packaging);}
9dcc665db886a44495acf2d5a6ffdbbe51c603897f3a7adbec1d3ba2cac656c9
createArtifact
public Artifact createArtifact(String groupId, String artifactId, String version, String scope, String type)
{    return new DefaultArtifact(groupId, artifactId, version, scope, type, null, new TestArtifactHandler(type));}
49aba91706982f41f7fbd4f48a3c5c4ae6ba78d4594fcf34ccaf6d3eae636c54
createArtifactRepository
public ArtifactRepository createArtifactRepository(String id, String url, ArtifactRepositoryLayout repositoryLayout, ArtifactRepositoryPolicy snapshots, ArtifactRepositoryPolicy releases)
{    return new MavenArtifactRepository(id, url, repositoryLayout, snapshots, releases);}
306c76fcdafeefa93e242b23b802b4246a023047aeb055255e6b6197361f8357
createArtifactWithClassifier
public Artifact createArtifactWithClassifier(String groupId, String artifactId, String version, String type, String classifier)
{    return new DefaultArtifact(groupId, artifactId, version, null, type, classifier, new TestArtifactHandler(type));}
f5a7e8f200be2c0bab11727b8a96c04a7379c2aacf75dcf17d68c9c0032e2e39
createDefaultLocalRepository
public ArtifactRepository createDefaultLocalRepository() throws InvalidRepositoryException
{    return createLocalRepository(new File(System.getProperty("basedir", ""), "target/local-repo").getAbsoluteFile());}
62a3c7af5cd7ff2d256030427cd9176a7617fcb566da6c9ba17b729a21651dcb
createDefaultRemoteRepository
public ArtifactRepository createDefaultRemoteRepository() throws InvalidRepositoryException
{    return new MavenArtifactRepository(DEFAULT_REMOTE_REPO_ID, "file://" + new File(System.getProperty("basedir", ""), "src/test/remote-repo").toURI().getPath(), new DefaultRepositoryLayout(), new ArtifactRepositoryPolicy(), new ArtifactRepositoryPolicy());}
981d146f2805705375ab83dc3733b66db1afc59358546dd6ecc7661b4f50b982
createDependencyArtifact
public Artifact createDependencyArtifact(Dependency dependency)
{    Artifact artifact = new DefaultArtifact(dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion(), dependency.getScope(), dependency.getType(), dependency.getClassifier(), new TestArtifactHandler(dependency.getType()));    if (Artifact.SCOPE_SYSTEM.equals(dependency.getScope())) {        artifact.setFile(new File(dependency.getSystemPath()));        artifact.setResolved(true);    }    return artifact;}
f1062cde2d10c36bf583f0f5408ebe9898ca4e7b1946ba848424b26f340c2347
createLocalRepository
public ArtifactRepository createLocalRepository(File localRepository) throws InvalidRepositoryException
{    return new MavenArtifactRepository(DEFAULT_LOCAL_REPO_ID, "file://" + localRepository.toURI().getPath(), new DefaultRepositoryLayout(), new ArtifactRepositoryPolicy(), new ArtifactRepositoryPolicy());}
47b2231db8dbc0f6859db880e4a46547c53616f8dc0d80395fdff4a9f50f8012
createPluginArtifact
public Artifact createPluginArtifact(Plugin plugin)
{    VersionRange versionRange;    try {        String version = plugin.getVersion();        if (StringUtils.isEmpty(version)) {            version = "RELEASE";        }        versionRange = VersionRange.createFromVersionSpec(version);    } catch (InvalidVersionSpecificationException e) {        return null;    }    return artifactFactory.createPluginArtifact(plugin.getGroupId(), plugin.getArtifactId(), versionRange);}
d8cc055aec7e99ac29d0fd2895dd657d5a7960a423dcd97bab8d5727bf5ba9a2
createProjectArtifact
public Artifact createProjectArtifact(String groupId, String artifactId, String version)
{    return createArtifact(groupId, artifactId, version, "pom");}
6b77819ca5f2dd829929aaa18de753c98ae8553a6896c9ed3a568965007e9071
getEffectiveRepositories
public List<ArtifactRepository> getEffectiveRepositories(List<ArtifactRepository> repositories)
{    return repositories;}
6dbb55585f8912eb53068978297e11fb324bb5da9d2bd564fe6aebaa3b1d8930
getMirror
public Mirror getMirror(ArtifactRepository repository, List<Mirror> mirrors)
{    return null;}
3d16fc60588729d41c0e3f86be8069bfebea52e0b97d80a8252a105c236bf821
injectAuthentication
public void injectAuthentication(List<ArtifactRepository> repositories, List<Server> servers)
{}
eea68400fdcf34a185329c7c2d13b1d683d9d45106e381da55c51c5fa75e4b29
injectMirror
public void injectMirror(List<ArtifactRepository> repositories, List<Mirror> mirrors)
{}
a41a2bfbb018fa677434a408212b99266cbc81f180caab97d06556ba1ef8aa34
injectProxy
public void injectProxy(List<ArtifactRepository> repositories, List<Proxy> proxies)
{}
fa73d8f8294b6a712710a50228d861a520d948a680d79e8a160922ed9a8322d3
publish
public void publish(ArtifactRepository repository, File source, String remotePath, ArtifactTransferListener transferListener) throws ArtifactTransferFailedException
{}
41d43ea96fb0228c74136a365645a34edf2ecef7753c54e332fa0c5228305fa5
resolve
public ArtifactResolutionResult resolve(ArtifactResolutionRequest request)
{    ArtifactResolutionResult result = new ArtifactResolutionResult();    if (request.isResolveRoot()) {        try {            resolve(request.getArtifact(), request);            result.addArtifact(request.getArtifact());        } catch (IOException e) {            result.addMissingArtifact(request.getArtifact());        }    }    if (request.isResolveTransitively()) {        Map<String, Artifact> artifacts = new LinkedHashMap<>();        if (request.getArtifactDependencies() != null) {            for (Artifact artifact : request.getArtifactDependencies()) {                artifacts.put(artifact.getDependencyConflictId(), artifact);            }        }        List<Dependency> dependencies = new ArrayList<>();        if (request.getArtifact() instanceof ArtifactWithDependencies) {            dependencies = ((ArtifactWithDependencies) request.getArtifact()).getDependencies();        } else {            Artifact pomArtifact = createProjectArtifact(request.getArtifact().getGroupId(), request.getArtifact().getArtifactId(), request.getArtifact().getVersion());            File pomFile = new File(request.getLocalRepository().getBasedir(), request.getLocalRepository().pathOf(pomArtifact));            try {                Model model = modelReader.read(pomFile, null);                dependencies = model.getDependencies();            } catch (IOException e) {                e.printStackTrace();            }        }        for (Dependency dependency : dependencies) {            Artifact artifact = createDependencyArtifact(dependency);            if (!artifacts.containsKey(artifact.getDependencyConflictId())) {                artifacts.put(artifact.getDependencyConflictId(), artifact);            }        }        for (Artifact artifact : artifacts.values()) {            try {                resolve(artifact, request);                result.addArtifact(artifact);            } catch (IOException e) {                result.addMissingArtifact(artifact);            }        }    }    return result;}
e7fe97a557046cd30de4a1b644be008b6d346d66be8acbad0ec3efbbaf3dc57d
resolve
private void resolve(Artifact artifact, ArtifactResolutionRequest request) throws IOException
{    if (Artifact.SCOPE_SYSTEM.equals(artifact.getScope())) {        return;    }    ArtifactRepository localRepo = request.getLocalRepository();    File localFile = new File(localRepo.getBasedir(), localRepo.pathOf(artifact));    artifact.setFile(localFile);    if (!localFile.exists()) {        if (request.getRemoteRepositories().isEmpty()) {            throw new IOException(localFile + " does not exist and no remote repositories are configured");        }        ArtifactRepository remoteRepo = request.getRemoteRepositories().get(0);        File remoteFile = new File(remoteRepo.getBasedir(), remoteRepo.pathOf(artifact));        FileUtils.copyFile(remoteFile, localFile);    }    artifact.setResolved(true);}
3fa6a862ec16329ab6a6963e376b46c0cd34eb9721899d541b0dcc47d7d768b2
retrieve
public void retrieve(ArtifactRepository repository, File destination, String remotePath, ArtifactTransferListener transferListener) throws ArtifactTransferFailedException, ArtifactDoesNotExistException
{}
7b51646ca668c6e9862ffcbf5b4a0410b275f09f503985296422e249cea4033b
injectMirror
public void injectMirror(RepositorySystemSession session, List<ArtifactRepository> repositories)
{}
ff5c8a85e02c8eeed19d9841ddf23931b4721f3b2b299841f2eba6426de17b25
injectProxy
public void injectProxy(RepositorySystemSession session, List<ArtifactRepository> repositories)
{}
24049d25ed73938e13d72fa18c664728b7252c115e7751b9af078890bd672425
injectAuthentication
public void injectAuthentication(RepositorySystemSession session, List<ArtifactRepository> repositories)
{}
e65b06aa4489bc6740b2351d0c454594f2768b8d74f3bc83d181fce3183c51e0
testGetMavenVersion
public void testGetMavenVersion() throws Exception
{    RuntimeInformation rtInfo = lookup(RuntimeInformation.class);    String mavenVersion = rtInfo.getMavenVersion();    assertNotNull(mavenVersion);    assertTrue(mavenVersion.length() > 0);}
ad68e96d6515ea5c7812c230e1b11163087792aed7c18e7b29d41838986bdbfd
testIsMavenVersion
public void testIsMavenVersion() throws Exception
{    RuntimeInformation rtInfo = lookup(RuntimeInformation.class);    assertTrue(rtInfo.isMavenVersion("2.0"));    assertFalse(rtInfo.isMavenVersion("9.9"));    assertTrue(rtInfo.isMavenVersion("[2.0.11,2.1.0),[3.0,)"));    assertFalse(rtInfo.isMavenVersion("[9.0,)"));    try {        rtInfo.isMavenVersion("[3.0,");        fail("Bad version range wasn't rejected");    } catch (IllegalArgumentException e) {        assertTrue(true);    }    try {        rtInfo.isMavenVersion("");        fail("Bad version range wasn't rejected");    } catch (IllegalArgumentException e) {        assertTrue(true);    }    try {        rtInfo.isMavenVersion(null);        fail("Bad version range wasn't rejected");    } catch (NullPointerException e) {        assertTrue(true);    }}
d57c1d7022b9b24e5d6471b55681e866b61cc2646c5e5e41baf69039be0b670b
customizeContainerConfiguration
protected void customizeContainerConfiguration(ContainerConfiguration containerConfiguration)
{    super.customizeContainerConfiguration(containerConfiguration);    containerConfiguration.setAutoWiring(true);    containerConfiguration.setClassPathScanning(PlexusConstants.SCANNING_INDEX);}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    testDirectory = new File(getBasedir(), BASE_POM_DIR);    projectBuilder = (DefaultProjectBuilder) lookup(ProjectBuilder.class);    repositorySystem = lookup(RepositorySystem.class);}
68bbf6c94fbad4862990669ea582b65c28678087c2377b2c3fb0948d54293af4
tearDown
protected void tearDown() throws Exception
{    projectBuilder = null;    super.tearDown();}
02911ce03be770b5e2d65bce36e81a78857cf65fa2f5bf6bcec62fcdd9768a44
testSettingsNoPom
public void testSettingsNoPom() throws Exception
{    PomTestWrapper pom = buildPom("settings-no-pom");    assertEquals("local-profile-prop-value", pom.getValue("properties/local-profile-prop"));}
cf08ca81545db068c238fd5c6d900711b24f2f3531245089d33c79c17c4ed211
testPomAndSettingsInterpolation
public void testPomAndSettingsInterpolation() throws Exception
{    PomTestWrapper pom = buildPom("test-pom-and-settings-interpolation");    assertEquals("applied", pom.getValue("properties/settingsProfile"));    assertEquals("applied", pom.getValue("properties/pomProfile"));    assertEquals("settings", pom.getValue("properties/pomVsSettings"));    assertEquals("settings", pom.getValue("properties/pomVsSettingsInterpolated"));}
0950f9b25bb79b57022eafeab01dccc95c5a9aff5b9b51b7081b76c39a7f3eca
testRepositories
public void testRepositories() throws Exception
{    PomTestWrapper pom = buildPom("repositories");    assertEquals("maven-core-it-0", pom.getValue("repositories[1]/id"));}
eff3f25ec683604c6e6a6fea30fbdb244adaf2f877806e39a73ec955e8f369ea
buildPom
private PomTestWrapper buildPom(String pomPath) throws Exception
{    File pomFile = new File(testDirectory + File.separator + pomPath, "pom.xml");    File settingsFile = new File(testDirectory + File.separator + pomPath, "settings.xml");    Settings settings = readSettingsFile(settingsFile);    ProjectBuildingRequest config = new DefaultProjectBuildingRequest();    for (org.apache.maven.settings.Profile rawProfile : settings.getProfiles()) {        Profile profile = SettingsUtils.convertFromSettingsProfile(rawProfile);        config.addProfile(profile);    }    String localRepoUrl = System.getProperty("maven.repo.local", System.getProperty("user.home") + "/.m2/repository");    localRepoUrl = "file://" + localRepoUrl;    config.setLocalRepository(repositorySystem.createArtifactRepository("local", localRepoUrl, new DefaultRepositoryLayout(), null, null));    config.setActiveProfileIds(settings.getActiveProfiles());    DefaultRepositorySystemSession repoSession = MavenRepositorySystemUtils.newSession();    LocalRepository localRepo = new LocalRepository(config.getLocalRepository().getBasedir());    repoSession.setLocalRepositoryManager(new SimpleLocalRepositoryManagerFactory().newInstance(repoSession, localRepo));    config.setRepositorySession(repoSession);    return new PomTestWrapper(pomFile, projectBuilder.build(pomFile, config).getProject());}
54d6de04c668cc6b020bab5875e92a99c033702196606cdef2207ce1a375e876
readSettingsFile
private static Settings readSettingsFile(File settingsFile) throws IOException, XmlPullParserException
{    Settings settings = null;    try (Reader reader = ReaderFactory.newXmlReader(settingsFile)) {        SettingsXpp3Reader modelReader = new SettingsXpp3Reader();        settings = modelReader.read(reader);    }    return settings;}
802758079af2b161ca1fefaeeca905a0360244b7b1cdefce82e756b5d9270420
testShouldAppendRecessivePluginGroupIds
public void testShouldAppendRecessivePluginGroupIds()
{    Settings dominant = new Settings();    dominant.addPluginGroup("org.apache.maven.plugins");    dominant.addPluginGroup("org.codehaus.modello");    Settings recessive = new Settings();    recessive.addPluginGroup("org.codehaus.plexus");    SettingsUtils.merge(dominant, recessive, Settings.GLOBAL_LEVEL);    List<String> pluginGroups = dominant.getPluginGroups();    assertNotNull(pluginGroups);    assertEquals(3, pluginGroups.size());    assertEquals("org.apache.maven.plugins", pluginGroups.get(0));    assertEquals("org.codehaus.modello", pluginGroups.get(1));    assertEquals("org.codehaus.plexus", pluginGroups.get(2));}
d32b16332f7a624ec63097bea905c50f177de403f3e8b6a69744bf3fc477a648
testRoundTripProfiles
public void testRoundTripProfiles()
{    Random entropy = new Random();    Profile p = new Profile();    p.setId("id" + Long.toHexString(entropy.nextLong()));    Activation a = new Activation();    a.setActiveByDefault(entropy.nextBoolean());    a.setJdk("jdk" + Long.toHexString(entropy.nextLong()));    ActivationFile af = new ActivationFile();    af.setExists("exists" + Long.toHexString(entropy.nextLong()));    af.setMissing("missing" + Long.toHexString(entropy.nextLong()));    a.setFile(af);    ActivationProperty ap = new ActivationProperty();    ap.setName("name" + Long.toHexString(entropy.nextLong()));    ap.setValue("value" + Long.toHexString(entropy.nextLong()));    a.setProperty(ap);    ActivationOS ao = new ActivationOS();    ao.setArch("arch" + Long.toHexString(entropy.nextLong()));    ao.setFamily("family" + Long.toHexString(entropy.nextLong()));    ao.setName("name" + Long.toHexString(entropy.nextLong()));    ao.setVersion("version" + Long.toHexString(entropy.nextLong()));    a.setOs(ao);    p.setActivation(a);    Properties props = new Properties();    int count = entropy.nextInt(10);    for (int i = 0; i < count; i++) {        props.setProperty("name" + Long.toHexString(entropy.nextLong()), "value" + Long.toHexString(entropy.nextLong()));    }    p.setProperties(props);    count = entropy.nextInt(3);    List<Repository> repos = new ArrayList<>();    for (int i = 0; i < count; i++) {        Repository r = new Repository();        r.setId("id" + Long.toHexString(entropy.nextLong()));        r.setName("name" + Long.toHexString(entropy.nextLong()));        r.setUrl("url" + Long.toHexString(entropy.nextLong()));        repos.add(r);    }    p.setRepositories(repos);    count = entropy.nextInt(3);    repos = new ArrayList<>();    for (int i = 0; i < count; i++) {        Repository r = new Repository();        r.setId("id" + Long.toHexString(entropy.nextLong()));        r.setName("name" + Long.toHexString(entropy.nextLong()));        r.setUrl("url" + Long.toHexString(entropy.nextLong()));        repos.add(r);    }    p.setPluginRepositories(repos);    Profile clone = SettingsUtils.convertToSettingsProfile(SettingsUtils.convertFromSettingsProfile(p));    assertEquals(p.getId(), clone.getId());    assertEquals(p.getActivation().getJdk(), clone.getActivation().getJdk());    assertEquals(p.getActivation().getFile().getExists(), clone.getActivation().getFile().getExists());    assertEquals(p.getActivation().getFile().getMissing(), clone.getActivation().getFile().getMissing());    assertEquals(p.getActivation().getProperty().getName(), clone.getActivation().getProperty().getName());    assertEquals(p.getActivation().getProperty().getValue(), clone.getActivation().getProperty().getValue());    assertEquals(p.getActivation().getOs().getArch(), clone.getActivation().getOs().getArch());    assertEquals(p.getActivation().getOs().getFamily(), clone.getActivation().getOs().getFamily());    assertEquals(p.getActivation().getOs().getName(), clone.getActivation().getOs().getName());    assertEquals(p.getActivation().getOs().getVersion(), clone.getActivation().getOs().getVersion());    assertEquals(p.getProperties(), clone.getProperties());    assertEquals(p.getRepositories().size(), clone.getRepositories().size());        assertEquals(p.getPluginRepositories().size(), clone.getPluginRepositories().size());}
10eef92bb71ab7f9f0d66184fd101d472573455dc97f4349fc3f15cbe3bd17bf
onSetup
public void onSetup()
{    MockitoAnnotations.initMocks(this);    Map<String, String> envVarMap = new HashMap<>();    envVarMap.put("testKey", "testValue");    envVarMap.put("testSpecialCharactersKey", "<test&Value>");    OperatingSystemUtils.setEnvVarSource(new TestEnvVarSource(envVarMap));}
899d11b823692ed71db6521022e46f686a1f4819a7dc79412440d9dfed9467d4
testBuildEmptyRequest
public void testBuildEmptyRequest() throws Exception
{    ToolchainsBuildingRequest request = new DefaultToolchainsBuildingRequest();    ToolchainsBuildingResult result = toolchainBuilder.build(request);    assertNotNull(result.getEffectiveToolchains());    assertNotNull(result.getProblems());    assertEquals(0, result.getProblems().size());}
cd0b6ca8f508efb73c403643c13520be03d0c622185e703f140010ea4c884cb3
testBuildRequestWithUserToolchains
public void testBuildRequestWithUserToolchains() throws Exception
{    ToolchainsBuildingRequest request = new DefaultToolchainsBuildingRequest();    request.setUserToolchainsSource(new StringSource(""));    PersistedToolchains userResult = new PersistedToolchains();    ToolchainModel toolchain = new ToolchainModel();    toolchain.setType("TYPE");    toolchain.addProvide("key", "user_value");    userResult.addToolchain(toolchain);    doReturn(userResult).when(toolchainsReader).read(any(InputStream.class), ArgumentMatchers.<String, Object>anyMap());    ToolchainsBuildingResult result = toolchainBuilder.build(request);    assertNotNull(result.getEffectiveToolchains());    assertEquals(1, result.getEffectiveToolchains().getToolchains().size());    assertEquals("TYPE", result.getEffectiveToolchains().getToolchains().get(0).getType());    assertEquals("user_value", result.getEffectiveToolchains().getToolchains().get(0).getProvides().getProperty("key"));    assertNotNull(result.getProblems());    assertEquals(0, result.getProblems().size());}
bea8d72c797fde13ba81d18572f79892bb30571335cdb4878f4d790182cbfb03
testBuildRequestWithGlobalToolchains
public void testBuildRequestWithGlobalToolchains() throws Exception
{    ToolchainsBuildingRequest request = new DefaultToolchainsBuildingRequest();    request.setGlobalToolchainsSource(new StringSource(""));    PersistedToolchains globalResult = new PersistedToolchains();    ToolchainModel toolchain = new ToolchainModel();    toolchain.setType("TYPE");    toolchain.addProvide("key", "global_value");    globalResult.addToolchain(toolchain);    doReturn(globalResult).when(toolchainsReader).read(any(InputStream.class), ArgumentMatchers.<String, Object>anyMap());    ToolchainsBuildingResult result = toolchainBuilder.build(request);    assertNotNull(result.getEffectiveToolchains());    assertEquals(1, result.getEffectiveToolchains().getToolchains().size());    assertEquals("TYPE", result.getEffectiveToolchains().getToolchains().get(0).getType());    assertEquals("global_value", result.getEffectiveToolchains().getToolchains().get(0).getProvides().getProperty("key"));    assertNotNull(result.getProblems());    assertEquals(0, result.getProblems().size());}
a8ab07b075aacf13bfcdc34e3a7a9ce5bcf0212d383f869104a318534591d59c
testBuildRequestWithBothToolchains
public void testBuildRequestWithBothToolchains() throws Exception
{    ToolchainsBuildingRequest request = new DefaultToolchainsBuildingRequest();    request.setGlobalToolchainsSource(new StringSource(""));    request.setUserToolchainsSource(new StringSource(""));    PersistedToolchains userResult = new PersistedToolchains();    ToolchainModel userToolchain = new ToolchainModel();    userToolchain.setType("TYPE");    userToolchain.addProvide("key", "user_value");    userResult.addToolchain(userToolchain);    PersistedToolchains globalResult = new PersistedToolchains();    ToolchainModel globalToolchain = new ToolchainModel();    globalToolchain.setType("TYPE");    globalToolchain.addProvide("key", "global_value");    globalResult.addToolchain(globalToolchain);    doReturn(globalResult).doReturn(userResult).when(toolchainsReader).read(any(InputStream.class), ArgumentMatchers.<String, Object>anyMap());    ToolchainsBuildingResult result = toolchainBuilder.build(request);    assertNotNull(result.getEffectiveToolchains());    assertEquals(2, result.getEffectiveToolchains().getToolchains().size());    assertEquals("TYPE", result.getEffectiveToolchains().getToolchains().get(0).getType());    assertEquals("user_value", result.getEffectiveToolchains().getToolchains().get(0).getProvides().getProperty("key"));    assertEquals("TYPE", result.getEffectiveToolchains().getToolchains().get(1).getType());    assertEquals("global_value", result.getEffectiveToolchains().getToolchains().get(1).getProvides().getProperty("key"));    assertNotNull(result.getProblems());    assertEquals(0, result.getProblems().size());}
f1a73f05d59d9b73c53f6cd347253cd6c9f9e9cae79f01627b7a79176a5eb944
testStrictToolchainsParseException
public void testStrictToolchainsParseException() throws Exception
{    ToolchainsBuildingRequest request = new DefaultToolchainsBuildingRequest();    request.setGlobalToolchainsSource(new StringSource(""));    ToolchainsParseException parseException = new ToolchainsParseException("MESSAGE", 4, 2);    doThrow(parseException).when(toolchainsReader).read(any(InputStream.class), ArgumentMatchers.<String, Object>anyMap());    try {        toolchainBuilder.build(request);    } catch (ToolchainsBuildingException e) {        assertEquals("1 problem was encountered while building the effective toolchains" + LS + "[FATAL] Non-parseable toolchains (memory): MESSAGE @ line 4, column 2" + LS, e.getMessage());    }}
ee497b62a30a9ef9fd2d32fae44dced5d47dc0c5071ec3ab450cb27e0a7255b3
testIOException
public void testIOException() throws Exception
{    ToolchainsBuildingRequest request = new DefaultToolchainsBuildingRequest();    request.setGlobalToolchainsSource(new StringSource("", "LOCATION"));    IOException ioException = new IOException("MESSAGE");    doThrow(ioException).when(toolchainsReader).read(any(InputStream.class), ArgumentMatchers.<String, Object>anyMap());    try {        toolchainBuilder.build(request);    } catch (ToolchainsBuildingException e) {        assertEquals("1 problem was encountered while building the effective toolchains" + LS + "[FATAL] Non-readable toolchains LOCATION: MESSAGE" + LS, e.getMessage());    }}
5bb1af707f8843580f5c5b49c4404622efd28407d059f796af5bba1f67dd6ab0
testEnvironmentVariablesAreInterpolated
public void testEnvironmentVariablesAreInterpolated() throws Exception
{    ToolchainsBuildingRequest request = new DefaultToolchainsBuildingRequest();    request.setUserToolchainsSource(new StringSource(""));    PersistedToolchains persistedToolchains = new PersistedToolchains();    ToolchainModel toolchain = new ToolchainModel();    toolchain.setType("TYPE");    toolchain.addProvide("key", "${env.testKey}");    Xpp3Dom configurationChild = new Xpp3Dom("jdkHome");    configurationChild.setValue("${env.testKey}");    Xpp3Dom configuration = new Xpp3Dom("configuration");    configuration.addChild(configurationChild);    toolchain.setConfiguration(configuration);    persistedToolchains.addToolchain(toolchain);    doReturn(persistedToolchains).when(toolchainsReader).read(any(InputStream.class), ArgumentMatchers.<String, Object>anyMap());    ToolchainsBuildingResult result = toolchainBuilder.build(request);    String interpolatedValue = "testValue";    assertEquals(interpolatedValue, result.getEffectiveToolchains().getToolchains().get(0).getProvides().getProperty("key"));    Xpp3Dom toolchainConfiguration = (Xpp3Dom) result.getEffectiveToolchains().getToolchains().get(0).getConfiguration();    assertEquals(interpolatedValue, toolchainConfiguration.getChild("jdkHome").getValue());    assertNotNull(result.getProblems());    assertEquals(0, result.getProblems().size());}
07bd1a0c601faae2135b6bf5f487563a5a8166066d8dd54615ff8a63feec5e51
testNonExistingEnvironmentVariablesAreNotInterpolated
public void testNonExistingEnvironmentVariablesAreNotInterpolated() throws Exception
{    ToolchainsBuildingRequest request = new DefaultToolchainsBuildingRequest();    request.setUserToolchainsSource(new StringSource(""));    PersistedToolchains persistedToolchains = new PersistedToolchains();    ToolchainModel toolchain = new ToolchainModel();    toolchain.setType("TYPE");    toolchain.addProvide("key", "${env.testNonExistingKey}");    persistedToolchains.addToolchain(toolchain);    doReturn(persistedToolchains).when(toolchainsReader).read(any(InputStream.class), ArgumentMatchers.<String, Object>anyMap());    ToolchainsBuildingResult result = toolchainBuilder.build(request);    assertEquals("${env.testNonExistingKey}", result.getEffectiveToolchains().getToolchains().get(0).getProvides().getProperty("key"));    assertNotNull(result.getProblems());    assertEquals(0, result.getProblems().size());}
ad459398ff8cd19bec9efed23a5648aa8506aacb7c3cbe5ef1e64105b3c0d162
testEnvironmentVariablesWithSpecialCharactersAreInterpolated
public void testEnvironmentVariablesWithSpecialCharactersAreInterpolated() throws Exception
{    ToolchainsBuildingRequest request = new DefaultToolchainsBuildingRequest();    request.setUserToolchainsSource(new StringSource(""));    PersistedToolchains persistedToolchains = new PersistedToolchains();    ToolchainModel toolchain = new ToolchainModel();    toolchain.setType("TYPE");    toolchain.addProvide("key", "${env.testSpecialCharactersKey}");    persistedToolchains.addToolchain(toolchain);    doReturn(persistedToolchains).when(toolchainsReader).read(any(InputStream.class), ArgumentMatchers.<String, Object>anyMap());    ToolchainsBuildingResult result = toolchainBuilder.build(request);    String interpolatedValue = "<test&Value>";    assertEquals(interpolatedValue, result.getEffectiveToolchains().getToolchains().get(0).getProvides().getProperty("key"));    assertNotNull(result.getProblems());    assertEquals(0, result.getProblems().size());}
978c395290d3916266f5bb2e827bc84e46f037c3707e8903fff8b075ce561ec4
getEnvMap
public Map<String, String> getEnvMap()
{    return envVarMap;}
179093beddb891dc55356aade041526d106fb02ad63eff41c7aa6d2b0d3e1e73
testNoProblems
public void testNoProblems()
{    ToolchainsBuildingException e = new ToolchainsBuildingException(Collections.<Problem>emptyList());    assertEquals("0 problems were encountered while building the effective toolchains" + LS, e.getMessage());}
55d5efd7218603882219f7fa7fc4082975f2bddf98caa9ed69ad8e607e093721
testOneProblem
public void testOneProblem()
{    ProblemCollector problemCollector = ProblemCollectorFactory.newInstance(null);    problemCollector.add(Problem.Severity.ERROR, "MESSAGE", 3, 5, new Exception());    ToolchainsBuildingException e = new ToolchainsBuildingException(problemCollector.getProblems());    assertEquals("1 problem was encountered while building the effective toolchains" + LS + "[ERROR] MESSAGE @ line 3, column 5" + LS, e.getMessage());}
d05a4aa32cf2be4b09ac78b640154e9ce2be98b242350c887d12dfdf3f84a10e
testUnknownPositionAndSource
public void testUnknownPositionAndSource()
{    ProblemCollector problemCollector = ProblemCollectorFactory.newInstance(null);    problemCollector.add(Problem.Severity.ERROR, "MESSAGE", -1, -1, new Exception());    ToolchainsBuildingException e = new ToolchainsBuildingException(problemCollector.getProblems());    assertEquals("1 problem was encountered while building the effective toolchains" + LS + "[ERROR] MESSAGE" + LS, e.getMessage());}
f677d04aa998d1cd5e36ce7428a2c68de4d619f2cfa478bae88daa138bf61fb0
testUnknownPosition
public void testUnknownPosition()
{    ProblemCollector problemCollector = ProblemCollectorFactory.newInstance(null);    problemCollector.setSource("SOURCE");    problemCollector.add(Problem.Severity.ERROR, "MESSAGE", -1, -1, new Exception());    ToolchainsBuildingException e = new ToolchainsBuildingException(problemCollector.getProblems());    assertEquals("1 problem was encountered while building the effective toolchains" + LS + "[ERROR] MESSAGE @ SOURCE" + LS, e.getMessage());}
4adaefafec562702d887f5960a1408e5f9d1add92c42fab7cb857d701c42d2a2
setUp
public void setUp()
{    toolchainManager = new DefaultToolchainManagerPrivate();    MockitoAnnotations.initMocks(this);    toolchainManager.factories = new HashMap<>();    toolchainManager.factories.put("basic", toolchainFactory_basicType);    toolchainManager.factories.put("rare", toolchainFactory_rareType);}
739a7c862bb720b65f43ec16a2beab1795cd1bb7e318a4258b7858138a08dbc1
testToolchainsForAvailableType
public void testToolchainsForAvailableType() throws Exception
{        MavenSession session = mock(MavenSession.class);    MavenExecutionRequest req = new DefaultMavenExecutionRequest();    when(session.getRequest()).thenReturn(req);    ToolchainPrivate basicToolchain = mock(ToolchainPrivate.class);    when(toolchainFactory_basicType.createDefaultToolchain()).thenReturn(basicToolchain);    ToolchainPrivate rareToolchain = mock(ToolchainPrivate.class);    when(toolchainFactory_rareType.createDefaultToolchain()).thenReturn(rareToolchain);        ToolchainPrivate[] toolchains = toolchainManager.getToolchainsForType("basic", session);        verify(logger, never()).error(anyString());    assertEquals(1, toolchains.length);}
de24583bfa1d9c2be41eac241d4f8e95d23eeaa6569843371d5c4c7a478ef051
testToolchainsForUnknownType
public void testToolchainsForUnknownType() throws Exception
{        MavenSession session = mock(MavenSession.class);    MavenExecutionRequest req = new DefaultMavenExecutionRequest();    when(session.getRequest()).thenReturn(req);    ToolchainPrivate basicToolchain = mock(ToolchainPrivate.class);    when(toolchainFactory_basicType.createDefaultToolchain()).thenReturn(basicToolchain);    ToolchainPrivate rareToolchain = mock(ToolchainPrivate.class);    when(toolchainFactory_rareType.createDefaultToolchain()).thenReturn(rareToolchain);        ToolchainPrivate[] toolchains = toolchainManager.getToolchainsForType("unknown", session);        verify(logger).error("Missing toolchain factory for type: unknown. Possibly caused by misconfigured project.");    assertEquals(0, toolchains.length);}
286279ebc5c6282b26a019ec61378813b8eea4052d9bd4f357094484b1d01c6e
testToolchainsForConfiguredType
public void testToolchainsForConfiguredType() throws Exception
{        MavenSession session = mock(MavenSession.class);    MavenExecutionRequest req = new DefaultMavenExecutionRequest();    when(session.getRequest()).thenReturn(req);    Map<String, List<ToolchainModel>> groupedToolchains = new HashMap<>();    req.setToolchains(groupedToolchains);    List<ToolchainModel> basicToolchains = new ArrayList<>();    ToolchainModel basicToolchainModel = new ToolchainModel();    basicToolchainModel.setType("basic");    basicToolchains.add(basicToolchainModel);    basicToolchains.add(basicToolchainModel);    groupedToolchains.put("basic", basicToolchains);    List<ToolchainModel> rareToolchains = new ArrayList<>();    ToolchainModel rareToolchainModel = new ToolchainModel();    rareToolchainModel.setType("rare");    rareToolchains.add(rareToolchainModel);    groupedToolchains.put("rare", rareToolchains);        ToolchainPrivate[] toolchains = toolchainManager.getToolchainsForType("basic", session);        verify(logger, never()).error(anyString());    assertEquals(2, toolchains.length);}
f5608486ab4ec74139e2ac759b24c0e4ca9ae2945006a4fe69b4cf4fbcf16c24
testMisconfiguredToolchain
public void testMisconfiguredToolchain() throws Exception
{        MavenSession session = mock(MavenSession.class);    MavenExecutionRequest req = new DefaultMavenExecutionRequest();    when(session.getRequest()).thenReturn(req);        ToolchainPrivate[] basics = toolchainManager.getToolchainsForType("basic", session);        assertEquals(0, basics.length);}
fe801c19184d43a2cc8fcc7bc09c2d8edb070079c7f3f2891e8b2cd179ab3945
onSetup
public void onSetup() throws Exception
{    toolchainManager = new DefaultToolchainManager();    MockitoAnnotations.initMocks(this);    toolchainManager.factories = new HashMap<>();    toolchainManager.factories.put("basic", toolchainFactory_basicType);    toolchainManager.factories.put("rare", toolchainFactory_rareType);}
a4446d6c99597ec4e85d6a42a1705d17349ad4aefc749276800ca016e0918ff6
testNoModels
public void testNoModels()
{    MavenSession session = mock(MavenSession.class);    MavenExecutionRequest executionRequest = new DefaultMavenExecutionRequest();    when(session.getRequest()).thenReturn(executionRequest);    List<Toolchain> toolchains = toolchainManager.getToolchains(session, "unknown", null);    assertEquals(0, toolchains.size());}
0fca921ba23a454c84d53bf419063039e41224e80948884712585c6eb7bc7f43
testModelNoFactory
public void testModelNoFactory()
{    MavenSession session = mock(MavenSession.class);    MavenExecutionRequest executionRequest = new DefaultMavenExecutionRequest();    Map<String, List<ToolchainModel>> toolchainModels = new HashMap<>();    toolchainModels.put("unknown", Collections.singletonList(new ToolchainModel()));    executionRequest.setToolchains(toolchainModels);    when(session.getRequest()).thenReturn(executionRequest);    List<Toolchain> toolchains = toolchainManager.getToolchains(session, "unknown", null);    assertEquals(0, toolchains.size());    verify(logger).error("Missing toolchain factory for type: unknown. Possibly caused by misconfigured project.");}
084a0b6a12ea4841f35980eff4e25df9a35ad68f7aff5a9db1c5fbc2b674ec1b
testModelAndFactory
public void testModelAndFactory()
{    MavenSession session = mock(MavenSession.class);    MavenExecutionRequest executionRequest = new DefaultMavenExecutionRequest();    Map<String, List<ToolchainModel>> toolchainModels = new HashMap<>();    toolchainModels.put("basic", Arrays.asList(new ToolchainModel(), new ToolchainModel()));    toolchainModels.put("rare", Collections.singletonList(new ToolchainModel()));    executionRequest.setToolchains(toolchainModels);    when(session.getRequest()).thenReturn(executionRequest);    List<Toolchain> toolchains = toolchainManager.getToolchains(session, "rare", null);    assertEquals(1, toolchains.size());}
c31ce3c652a8b8ae02af2c14c93c3e4c774bf04fb158686f7c1f831c172328fa
testModelsAndFactory
public void testModelsAndFactory()
{    MavenSession session = mock(MavenSession.class);    MavenExecutionRequest executionRequest = new DefaultMavenExecutionRequest();    Map<String, List<ToolchainModel>> toolchainModels = new HashMap<>();    toolchainModels.put("basic", Arrays.asList(new ToolchainModel(), new ToolchainModel()));    toolchainModels.put("rare", Collections.singletonList(new ToolchainModel()));    executionRequest.setToolchains(toolchainModels);    when(session.getRequest()).thenReturn(executionRequest);    List<Toolchain> toolchains = toolchainManager.getToolchains(session, "basic", null);    assertEquals(2, toolchains.size());}
8f9243671d71500da74f420e33265b7f0e1f9e03591556809a825a4ff14d6eac
testRequirements
public void testRequirements() throws Exception
{    MavenSession session = mock(MavenSession.class);    MavenExecutionRequest executionRequest = new DefaultMavenExecutionRequest();    Map<String, List<ToolchainModel>> toolchainModels = new HashMap<>();    toolchainModels.put("basic", Arrays.asList(new ToolchainModel(), new ToolchainModel()));    toolchainModels.put("rare", Collections.singletonList(new ToolchainModel()));    executionRequest.setToolchains(toolchainModels);    when(session.getRequest()).thenReturn(executionRequest);    ToolchainPrivate basicPrivate = mock(ToolchainPrivate.class);    when(basicPrivate.matchesRequirements(ArgumentMatchers.<String, String>anyMap())).thenReturn(false).thenReturn(true);    when(toolchainFactory_basicType.createToolchain(isA(ToolchainModel.class))).thenReturn(basicPrivate);    List<Toolchain> toolchains = toolchainManager.getToolchains(session, "basic", Collections.singletonMap("key", "value"));    assertEquals(1, toolchains.size());}
9d69bfd2a279cacda04001b1c50c6f6698b00750596931407928c5a8169d56b7
setUp
public void setUp() throws Exception
{    MockitoAnnotations.initMocks(this);}
9cff6c9d91b396d24feac3580f344ff8f3533bd230290aed96f72466acf964c7
newDefaultToolchain
private DefaultToolchain newDefaultToolchain(ToolchainModel model)
{    return new DefaultToolchain(model, logger) {        @Override        public String findTool(String toolName) {            return null;        }    };}
f6af714bd6298caf8ee5f32f9bc3c9fce87dfa22c08698bf513bc5274fbe13a9
findTool
public String findTool(String toolName)
{    return null;}
1b044346e1b78f3b2108ccd222da92461d7dd1e3f6d0a52fbccd515c0799ee5e
newDefaultToolchain
private DefaultToolchain newDefaultToolchain(ToolchainModel model, String type)
{    return new DefaultToolchain(model, type, logger) {        @Override        public String findTool(String toolName) {            return null;        }    };}
f6af714bd6298caf8ee5f32f9bc3c9fce87dfa22c08698bf513bc5274fbe13a9
findTool
public String findTool(String toolName)
{    return null;}
90e99a8c88210f8dbc2ea40e0b5b6d0e63229a4151de4aceb8d8553ae5b8f252
testGetModel
public void testGetModel()
{    ToolchainModel model = new ToolchainModel();    DefaultToolchain toolchain = newDefaultToolchain(model);    assertEquals(model, toolchain.getModel());}
e874eda45a4feb076ef384e9ef564510973d47db5f1a16755c673c67f6ad389a
testGetType
public void testGetType()
{    ToolchainModel model = new ToolchainModel();    DefaultToolchain toolchain = newDefaultToolchain(model, "TYPE");    assertEquals("TYPE", toolchain.getType());    model.setType("MODEL_TYPE");    toolchain = newDefaultToolchain(model);    assertEquals("MODEL_TYPE", toolchain.getType());}
a1462c100c54e344065b7f533df5c81c6bc7d7c2bd1e9fcf5bc1b01a9dc32e1b
testGetLogger
public void testGetLogger()
{    ToolchainModel model = new ToolchainModel();    DefaultToolchain toolchain = newDefaultToolchain(model);    assertEquals(logger, toolchain.getLog());}
cddaa130870b376e022d596310540b4e6ed14bcd1a8e60e5004557c39f58f22e
testMissingRequirementProperty
public void testMissingRequirementProperty()
{    ToolchainModel model = new ToolchainModel();    model.setType("TYPE");    DefaultToolchain toolchain = newDefaultToolchain(model);    assertFalse(toolchain.matchesRequirements(Collections.singletonMap("name", "John Doe")));    verify(logger).debug("Toolchain type:TYPE{} is missing required property: name");}
2224ca0d608a61bd60fb75d0a5d0a8f25480ff3b92c3d40fb8abdf4973193c1a
testNonMatchingRequirementProperty
public void testNonMatchingRequirementProperty()
{    ToolchainModel model = new ToolchainModel();    model.setType("TYPE");    DefaultToolchain toolchain = newDefaultToolchain(model);    toolchain.addProvideToken("name", RequirementMatcherFactory.createExactMatcher("Jane Doe"));    assertFalse(toolchain.matchesRequirements(Collections.singletonMap("name", "John Doe")));    verify(logger).debug("Toolchain type:TYPE{name = Jane Doe} doesn't match required property: name");}
6acab1cbc363bd5786c0e810770b8201a2a7595dfc2f8a2c79737ae284c4147b
testEquals
public void testEquals() throws Exception
{    try (InputStream jdksIS = ToolchainModel.class.getResourceAsStream("toolchains-jdks.xml");        InputStream jdksExtraIS = ToolchainModel.class.getResourceAsStream("toolchains-jdks-extra.xml")) {        PersistedToolchains jdks = reader.read(jdksIS);        PersistedToolchains jdksExtra = reader.read(jdksExtraIS);        DefaultToolchain tc1 = new DefaultJavaToolChain(jdks.getToolchains().get(0), null);        DefaultToolchain tc2 = new DefaultJavaToolChain(jdksExtra.getToolchains().get(0), null);        assertTrue(tc1.equals(tc1));        assertFalse(tc1.equals(tc2));        assertFalse(tc2.equals(tc1));        assertTrue(tc2.equals(tc2));    }}
f2b2551e25862ada1940899d2d4cdd5e14c0cec34cbe80b56cb0f02619f44982
testMergeNulls
public void testMergeNulls()
{    merger.merge(null, null, null);    PersistedToolchains pt = new PersistedToolchains();    merger.merge(pt, null, null);    merger.merge(null, pt, null);}
50dcff43d7249256cc8bdbd80f470599f2b621bc7b31a88390617c5820624876
testMergeJdk
public void testMergeJdk() throws Exception
{    try (InputStream isDominant = ToolchainModel.class.getResourceAsStream("toolchains-jdks.xml");        InputStream isRecessive = ToolchainModel.class.getResourceAsStream("toolchains-jdks.xml")) {        PersistedToolchains dominant = reader.read(isDominant);        PersistedToolchains recessive = reader.read(isRecessive);        assertEquals(2, dominant.getToolchains().size());        merger.merge(dominant, recessive, TrackableBase.USER_LEVEL);        assertEquals(2, dominant.getToolchains().size());    }}
85cc39be9e1f8bde1f0604f2f821ba2c6f78d8353dc86d198ce772c7648d4f09
testMergeJdkExtra
public void testMergeJdkExtra() throws Exception
{    try (InputStream jdksIS = ToolchainModel.class.getResourceAsStream("toolchains-jdks.xml");        InputStream jdksExtraIS = ToolchainModel.class.getResourceAsStream("toolchains-jdks-extra.xml")) {        PersistedToolchains jdks = reader.read(jdksIS);        PersistedToolchains jdksExtra = reader.read(jdksExtraIS);        assertEquals(2, jdks.getToolchains().size());        merger.merge(jdks, jdksExtra, TrackableBase.USER_LEVEL);        assertEquals(4, jdks.getToolchains().size());        assertEquals(2, jdksExtra.getToolchains().size());    }    try (InputStream jdksIS = ToolchainModel.class.getResourceAsStream("toolchains-jdks.xml");        InputStream jdksExtraIS = ToolchainModel.class.getResourceAsStream("toolchains-jdks-extra.xml")) {        PersistedToolchains jdks = reader.read(jdksIS);        PersistedToolchains jdksExtra = reader.read(jdksExtraIS);        assertEquals(2, jdks.getToolchains().size());                merger.merge(jdksExtra, jdks, TrackableBase.USER_LEVEL);        assertEquals(4, jdksExtra.getToolchains().size());        assertEquals(2, jdks.getToolchains().size());    }}
8f7638f4d410a66fa29b2c68d9947731460be8c6244a5c7718f304121ac120b1
testMergeJdkExtend
public void testMergeJdkExtend() throws Exception
{    try (InputStream jdksIS = ToolchainModel.class.getResourceAsStream("toolchains-jdks.xml");        InputStream jdksExtendIS = ToolchainModel.class.getResourceAsStream("toolchains-jdks-extend.xml")) {        PersistedToolchains jdks = reader.read(jdksIS);        PersistedToolchains jdksExtend = reader.read(jdksExtendIS);        assertEquals(2, jdks.getToolchains().size());        merger.merge(jdks, jdksExtend, TrackableBase.USER_LEVEL);        assertEquals(2, jdks.getToolchains().size());        Xpp3Dom config0 = (Xpp3Dom) jdks.getToolchains().get(0).getConfiguration();        assertEquals("lib/tools.jar", config0.getChild("toolsJar").getValue());        assertEquals(2, config0.getChildCount());        Xpp3Dom config1 = (Xpp3Dom) jdks.getToolchains().get(1).getConfiguration();        assertEquals(2, config1.getChildCount());        assertEquals("lib/classes.jar", config1.getChild("toolsJar").getValue());        assertEquals(2, jdksExtend.getToolchains().size());    }    try (InputStream jdksIS = ToolchainModel.class.getResourceAsStream("toolchains-jdks.xml");        InputStream jdksExtendIS = ToolchainModel.class.getResourceAsStream("toolchains-jdks-extend.xml")) {        PersistedToolchains jdks = reader.read(jdksIS);        PersistedToolchains jdksExtend = reader.read(jdksExtendIS);        assertEquals(2, jdks.getToolchains().size());                merger.merge(jdksExtend, jdks, TrackableBase.USER_LEVEL);        assertEquals(2, jdksExtend.getToolchains().size());        Xpp3Dom config0 = (Xpp3Dom) jdksExtend.getToolchains().get(0).getConfiguration();        assertEquals("lib/tools.jar", config0.getChild("toolsJar").getValue());        assertEquals(2, config0.getChildCount());        Xpp3Dom config1 = (Xpp3Dom) jdksExtend.getToolchains().get(1).getConfiguration();        assertEquals(2, config1.getChildCount());        assertEquals("lib/classes.jar", config1.getChild("toolsJar").getValue());        assertEquals(2, jdks.getToolchains().size());    }}
a43cdeb31cc60c91ec5cd887bc014544d37d7a6455666d73b81060c0f009db3b
testCreateExactMatcher
public void testCreateExactMatcher()
{    RequirementMatcher matcher;    matcher = RequirementMatcherFactory.createExactMatcher("foo");    assertFalse(matcher.matches("bar"));    assertFalse(matcher.matches("foobar"));    assertFalse(matcher.matches("foob"));    assertTrue(matcher.matches("foo"));}
32817ea9585b6148905ba5362965756084d3366de89e200ff5b4d02056241784
testCreateVersionMatcher
public void testCreateVersionMatcher()
{    RequirementMatcher matcher;    matcher = RequirementMatcherFactory.createVersionMatcher("1.5.2");    assertFalse(matcher.matches("1.5"));    assertTrue(matcher.matches("1.5.2"));    assertFalse(matcher.matches("[1.4,1.5)"));    assertFalse(matcher.matches("[1.5,1.5.2)"));    assertFalse(matcher.matches("(1.5.2,1.6)"));    assertTrue(matcher.matches("(1.4,1.5.2]"));    assertTrue(matcher.matches("(1.5,)"));    assertEquals("1.5.2", matcher.toString());        matcher = RequirementMatcherFactory.createVersionMatcher("1.5");    assertEquals("1.5", matcher.toString());}
3116ea2053d9de960ec3753eb07f3d243c370662aa1f0175ad357057c9ce5a52
main
public static void main(String[] args)
{    System.out.println("Hello World!");}
0726523a73bad537f74ac5912d840d3c7fe0c2e304fe52f26dedb3d2e7d7350f
suite
public static Test suite()
{    return new TestSuite(AppTest.class);}
5c5a643b0b44f81060e7ec9ff1ceeee39878cad6f6e30d97b8edc9289f010ead
testApp
public void testApp()
{    assertTrue(true);}
3116ea2053d9de960ec3753eb07f3d243c370662aa1f0175ad357057c9ce5a52
main
public static void main(String[] args)
{    System.out.println("Hello World!");}
0726523a73bad537f74ac5912d840d3c7fe0c2e304fe52f26dedb3d2e7d7350f
suite
public static Test suite()
{    return new TestSuite(AppTest.class);}
5c5a643b0b44f81060e7ec9ff1ceeee39878cad6f6e30d97b8edc9289f010ead
testApp
public void testApp()
{    assertTrue(true);}
73926ac1e03d891e0d5a9540bf75dceb162aa9c5ef7158bdd835992dedb06d9a
cleanArgs
public static String[] cleanArgs(String[] args)
{    List<String> cleaned = new ArrayList<>();    StringBuilder currentArg = null;    for (String arg : args) {        boolean addedToBuffer = false;        if (arg.startsWith("\"")) {                        if (currentArg != null) {                cleaned.add(currentArg.toString());            }                        currentArg = new StringBuilder(arg.substring(1));            addedToBuffer = true;        }                if (addedToBuffer && arg.endsWith("\"")) {            String cleanArgPart = arg.substring(0, arg.length() - 1);                        if (currentArg != null) {                                if (addedToBuffer) {                    currentArg.setLength(currentArg.length() - 1);                } else                 {                                        currentArg.append(' ').append(cleanArgPart);                }                cleaned.add(currentArg.toString());            } else {                cleaned.add(cleanArgPart);            }            currentArg = null;            addedToBuffer = false;            continue;        }                if (!addedToBuffer) {            if (currentArg != null) {                currentArg.append(' ').append(arg);            } else {                cleaned.add(arg);            }        }    }    if (currentArg != null) {        cleaned.add(currentArg.toString());    }    int cleanedSz = cleaned.size();    String[] cleanArgs;    if (cleanedSz == 0) {        cleanArgs = args;    } else {        cleanArgs = cleaned.toArray(new String[0]);    }    return cleanArgs;}
5a823aca961c48593b74a5e9c4cab4a0a1108465b65f3adbf2cb20fd13980fd2
parse
public CommandLine parse(String[] args) throws ParseException
{        String[] cleanArgs = CleanArgument.cleanArgs(args);    CommandLineParser parser = new GnuParser();    return parser.parse(options, cleanArgs);}
3c14fa1f280b3c0ed4f1b895584ac367a27a5e5454a6a62a860b36a6ff351e77
displayHelp
public void displayHelp(PrintStream stdout)
{    stdout.println();    PrintWriter pw = new PrintWriter(stdout);    HelpFormatter formatter = new HelpFormatter();    formatter.printHelp(pw, HelpFormatter.DEFAULT_WIDTH, "mvn [options] [<goal(s)>] [<phase(s)>]", "\nOptions:", options, HelpFormatter.DEFAULT_LEFT_PAD, HelpFormatter.DEFAULT_DESC_PAD, "\n", false);    pw.flush();}
32ba122d14722a577458d51f1867e27d929b0cf7b7192f9d485e240cc8a1f64b
showVersion
public static String showVersion()
{    final String ls = System.getProperty("line.separator");    Properties properties = getBuildProperties();    StringBuilder version = new StringBuilder(256);    version.append(buffer().strong(createMavenVersionString(properties))).append(ls);    version.append(reduce(properties.getProperty("distributionShortName") + " home: " + System.getProperty("maven.home", "<unknown Maven " + "home>"))).append(ls);    version.append("Java version: ").append(System.getProperty("java.version", "<unknown Java version>")).append(", vendor: ").append(System.getProperty("java.vendor", "<unknown vendor>")).append(", runtime: ").append(System.getProperty("java.home", "<unknown runtime>")).append(ls);    version.append("Default locale: ").append(Locale.getDefault()).append(", platform encoding: ").append(System.getProperty("file.encoding", "<unknown encoding>")).append(ls);    version.append("OS name: \"").append(Os.OS_NAME).append("\", version: \"").append(Os.OS_VERSION).append("\", arch: \"").append(Os.OS_ARCH).append("\", family: \"").append(Os.OS_FAMILY).append('\"');    return version.toString();}
dd39dfa687a7f6fe7985bdb00e3a9ddbe540b798d53edeb44944a11f9730dc19
createMavenVersionString
 static String createMavenVersionString(Properties buildProperties)
{    String timestamp = reduce(buildProperties.getProperty("timestamp"));    String version = reduce(buildProperties.getProperty(BUILD_VERSION_PROPERTY));    String rev = reduce(buildProperties.getProperty("buildNumber"));    String distributionName = reduce(buildProperties.getProperty("distributionName"));    String msg = distributionName + " ";    msg += (version != null ? version : "<version unknown>");    if (rev != null || timestamp != null) {        msg += " (";        msg += (rev != null ? rev : "");        if (StringUtils.isNotBlank(timestamp)) {            String ts = formatTimestamp(Long.valueOf(timestamp));            msg += (rev != null ? "; " : "") + ts;        }        msg += ")";    }    return msg;}
4febecddec91c053990d844aabf7995089f16f4cf4471bfedd19f2b479008d1e
reduce
private static String reduce(String s)
{    return (s != null ? (s.startsWith("${") && s.endsWith("}") ? null : s) : null);}
12055ea754b3390c104f950a2bc02728329906003ed5ef44e6908590756aa0b7
getBuildProperties
 static Properties getBuildProperties()
{    Properties properties = new Properties();    try (InputStream resourceAsStream = MavenCli.class.getResourceAsStream("/org/apache/maven/messages/build.properties")) {        if (resourceAsStream != null) {            properties.load(resourceAsStream);        }    } catch (IOException e) {        System.err.println("Unable determine version from JAR file: " + e.getMessage());    }    return properties;}
7a6004473aac21a73e3a0f70fb050bd226fc8de3319ff84000a0b85ca08a0608
showError
public static void showError(Logger logger, String message, Throwable e, boolean showStackTrace)
{    if (showStackTrace) {        logger.error(message, e);    } else {        logger.error(message);        if (e != null) {            logger.error(e.getMessage());            for (Throwable cause = e.getCause(); cause != null; cause = cause.getCause()) {                logger.error("Caused by: {}", cause.getMessage());            }        }    }}
a825d955659e8420377406438c91056bc56acc54c8502795f97bf7e2f4cf104c
formatTimestamp
public static String formatTimestamp(long timestamp)
{    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX");    return sdf.format(new Date(timestamp));}
12000e676fbee61f2f92a0f9c23eff01d2527ee2ccd5f239984507d217fdbeb2
formatDuration
public static String formatDuration(long duration)
{        long ms = duration % 1000;    long s = (duration / ONE_SECOND) % 60;    long m = (duration / ONE_MINUTE) % 60;    long h = (duration / ONE_HOUR) % 24;    long d = duration / ONE_DAY;        String format;    if (d > 0) {                format = "%d d %02d:%02d h";    } else if (h > 0) {                format = "%2$02d:%3$02d h";    } else if (m > 0) {                format = "%3$02d:%4$02d min";    } else {                format = "%4$d.%5$03d s";    }    return String.format(format, d, h, m, s, ms);}
63c9fbbfc8fd0c446fa0184a5eed4111e14f05b4735608439c43552757f7ae4c
getArgs
public String[] getArgs()
{    return args;}
3d1aaa5c16507259323eb65c091816b48b41634c29b19caa1c1bb1b2faf2ad90
getCommandLine
public CommandLine getCommandLine()
{    return commandLine;}
66b8131e36deb15d192225b1bdfa1dfcdf719e56e64bf846cec2bebdfea5490b
getClassWorld
public ClassWorld getClassWorld()
{    return classWorld;}
cc8f017af0f9c5ae64da25fddc3584ad37c5225877677d4f4616a15b6955c1e5
getWorkingDirectory
public String getWorkingDirectory()
{    return workingDirectory;}
fad67d0f98078ad918245257fd7128cd664ed78d241b5b4df24bad68873f38fc
getMultiModuleProjectDirectory
public File getMultiModuleProjectDirectory()
{    return multiModuleProjectDirectory;}
e4d49706e0e08328cc4a167dee5f860e85a016b3ad9108ec10423d80edc1e32c
isDebug
public boolean isDebug()
{    return debug;}
992fce569242832616b5e6d2d90ad1c98366f3c697d3405b40cc55abdcdea1ff
isQuiet
public boolean isQuiet()
{    return quiet;}
db8598d4554c461d2fbe3ad311e5529c836eece9a3a02e7c72b631746c8871fd
isShowErrors
public boolean isShowErrors()
{    return showErrors;}
378f8d6e21d4ae0bd6aa85de0988ab8d214704648e0ad1a17b8ce9c7e3a14225
getUserProperties
public Properties getUserProperties()
{    return userProperties;}
8b369022cea09c7bb7272e8cc545450dc294bedf652bae5b2ea9f14fffe1fc46
getSystemProperties
public Properties getSystemProperties()
{    return systemProperties;}
7c318a75c10bdf7ccc70b9c78c342fb8899fb88315cdf5124a31b22ff1c07598
getRequest
public MavenExecutionRequest getRequest()
{    return request;}
ce51d062b27235af6fa5d64fe8bac1b8136383babd5947d303ce0a9732c4ab6a
setUserProperties
public void setUserProperties(Properties properties)
{    this.userProperties.putAll(properties);}
ddd209c4007c5e09d16f21a2bb58a8623ab7038b35964e46a2d9a8d60f717024
process
public void process(CliRequest cliRequest) throws Exception
{    CommandLine commandLine = cliRequest.getCommandLine();    String workingDirectory = cliRequest.getWorkingDirectory();    MavenExecutionRequest request = cliRequest.getRequest();    File userSettingsFile;    if (commandLine.hasOption(CLIManager.ALTERNATE_USER_SETTINGS)) {        userSettingsFile = new File(commandLine.getOptionValue(CLIManager.ALTERNATE_USER_SETTINGS));        userSettingsFile = resolveFile(userSettingsFile, workingDirectory);        if (!userSettingsFile.isFile()) {            throw new FileNotFoundException("The specified user settings file does not exist: " + userSettingsFile);        }    } else {        userSettingsFile = DEFAULT_USER_SETTINGS_FILE;    }    File globalSettingsFile;    if (commandLine.hasOption(CLIManager.ALTERNATE_GLOBAL_SETTINGS)) {        globalSettingsFile = new File(commandLine.getOptionValue(CLIManager.ALTERNATE_GLOBAL_SETTINGS));        globalSettingsFile = resolveFile(globalSettingsFile, workingDirectory);        if (!globalSettingsFile.isFile()) {            throw new FileNotFoundException("The specified global settings file does not exist: " + globalSettingsFile);        }    } else {        globalSettingsFile = DEFAULT_GLOBAL_SETTINGS_FILE;    }    request.setGlobalSettingsFile(globalSettingsFile);    request.setUserSettingsFile(userSettingsFile);    SettingsBuildingRequest settingsRequest = new DefaultSettingsBuildingRequest();    settingsRequest.setGlobalSettingsFile(globalSettingsFile);    settingsRequest.setUserSettingsFile(userSettingsFile);    settingsRequest.setSystemProperties(cliRequest.getSystemProperties());    settingsRequest.setUserProperties(cliRequest.getUserProperties());    if (request.getEventSpyDispatcher() != null) {        request.getEventSpyDispatcher().onEvent(settingsRequest);    }    logger.debug("Reading global settings from {}", getLocation(settingsRequest.getGlobalSettingsSource(), settingsRequest.getGlobalSettingsFile()));    logger.debug("Reading user settings from {}", getLocation(settingsRequest.getUserSettingsSource(), settingsRequest.getUserSettingsFile()));    SettingsBuildingResult settingsResult = settingsBuilder.build(settingsRequest);    if (request.getEventSpyDispatcher() != null) {        request.getEventSpyDispatcher().onEvent(settingsResult);    }    populateFromSettings(request, settingsResult.getEffectiveSettings());    if (!settingsResult.getProblems().isEmpty() && logger.isWarnEnabled()) {        logger.warn("");        logger.warn("Some problems were encountered while building the effective settings");        for (SettingsProblem problem : settingsResult.getProblems()) {            logger.warn("{} @ {}", problem.getMessage(), problem.getLocation());        }        logger.warn("");    }}
82602c9d289aa2b11f6ddb94f2410e213aaf4e631ab357720c13d57c5538350e
populateFromSettings
private MavenExecutionRequest populateFromSettings(MavenExecutionRequest request, Settings settings) throws MavenExecutionRequestPopulationException
{    if (settings == null) {        return request;    }    request.setOffline(settings.isOffline());    request.setInteractiveMode(settings.isInteractiveMode());    request.setPluginGroups(settings.getPluginGroups());    request.setLocalRepositoryPath(settings.getLocalRepository());    for (Server server : settings.getServers()) {        server = server.clone();        request.addServer(server);    }    for (Proxy proxy : settings.getProxies()) {        if (!proxy.isActive()) {            continue;        }        proxy = proxy.clone();        request.addProxy(proxy);    }    for (Mirror mirror : settings.getMirrors()) {        mirror = mirror.clone();        request.addMirror(mirror);    }    request.setActiveProfiles(settings.getActiveProfiles());    for (org.apache.maven.settings.Profile rawProfile : settings.getProfiles()) {        request.addProfile(SettingsUtils.convertFromSettingsProfile(rawProfile));        if (settings.getActiveProfiles().contains(rawProfile.getId())) {            List<Repository> remoteRepositories = rawProfile.getRepositories();            for (Repository remoteRepository : remoteRepositories) {                try {                    request.addRemoteRepository(MavenRepositorySystem.buildArtifactRepository(remoteRepository));                } catch (InvalidRepositoryException e) {                                }            }            List<Repository> pluginRepositories = rawProfile.getPluginRepositories();            for (Repository pluginRepository : pluginRepositories) {                try {                    request.addPluginArtifactRepository(MavenRepositorySystem.buildArtifactRepository(pluginRepository));                } catch (InvalidRepositoryException e) {                                }            }        }    }    return request;}
a78c77a2d4185fb4d7f9466ce597491be45c5cd469b70386087031ed5f5dd1ea
getLocation
private Object getLocation(Source source, File defaultLocation)
{    if (source != null) {        return source.getLocation();    }    return defaultLocation;}
dda86b27e6989cf71f82e41da2d76548adabb9f29626d5870a73e56b31d83822
resolveFile
 static File resolveFile(File file, String workingDirectory)
{    if (file == null) {        return null;    } else if (file.isAbsolute()) {        return file;    } else if (file.getPath().startsWith(File.separator)) {                return file.getAbsoluteFile();    } else {        return new File(workingDirectory, file.getPath()).getAbsoluteFile();    }}
5acc1da92c12fc444554e37df661720882bc2e507e63566bbe170e955ba0f8a1
getData
public Map<String, Object> getData()
{    return data;}
8d11405eb70f5d57d03344ca83cb47037a26cf7b677de45dede7ad1259bea0b8
chars
private static String chars(char c, int count)
{    StringBuilder buffer = new StringBuilder(count);    for (int i = count; i > 0; i--) {        buffer.append(c);    }    return buffer.toString();}
b3a307bfc40e3c93e7a602ef044ee28b366349111cd84ced07a874870c9def78
infoLine
private void infoLine(char c)
{    infoMain(chars(c, LINE_LENGTH));}
78b7771ea2a5ed739e80ed3502197c4e37b1b1a153e226ac8a467b910300e971
infoMain
private void infoMain(String msg)
{    logger.info(buffer().strong(msg).toString());}
bde074900751c3b25c26912d6c9be48e4d4843d941508f08d4e23d0a1a535db5
projectDiscoveryStarted
public void projectDiscoveryStarted(ExecutionEvent event)
{    if (logger.isInfoEnabled()) {        logger.info("Scanning for projects...");    }}
c45e4dd7ea75ec66380b113e76712481ffa32a1ab1707e8bf77234af1a3f71f0
sessionStarted
public void sessionStarted(ExecutionEvent event)
{    if (logger.isInfoEnabled() && event.getSession().getProjects().size() > 1) {        infoLine('-');        infoMain("Reactor Build Order:");        logger.info("");        final List<MavenProject> projects = event.getSession().getProjects();        for (MavenProject project : projects) {            int len = LINE_LENGTH - project.getName().length() - project.getPackaging().length() - 2;            logger.info("{}{}[{}]", project.getName(), chars(' ', (len > 0) ? len : 1), project.getPackaging());        }        totalProjects = projects.size();    }}
73cf25d4af4150bd5e6423205c871e872330c350d955ee4bf8f527df86a22215
sessionEnded
public void sessionEnded(ExecutionEvent event)
{    if (logger.isInfoEnabled()) {        if (event.getSession().getProjects().size() > 1) {            logReactorSummary(event.getSession());        }        logResult(event.getSession());        logStats(event.getSession());        infoLine('-');    }}
dbec0327a3cbc7a0d04a20029463405a18caf08df573e04b1184f3de5595e234
isSingleVersionedReactor
private boolean isSingleVersionedReactor(MavenSession session)
{    boolean result = true;    MavenProject topProject = session.getTopLevelProject();    List<MavenProject> sortedProjects = session.getProjectDependencyGraph().getSortedProjects();    for (MavenProject mavenProject : sortedProjects) {        if (!topProject.getVersion().equals(mavenProject.getVersion())) {            result = false;            break;        }    }    return result;}
27e5d2ba999a3486f1742749fe1da05cbe3f6af5940ec20c16cd9a59f24a182d
logReactorSummary
private void logReactorSummary(MavenSession session)
{    boolean isSingleVersion = isSingleVersionedReactor(session);    infoLine('-');    StringBuilder summary = new StringBuilder("Reactor Summary");    if (isSingleVersion) {        summary.append(" for ");        summary.append(session.getTopLevelProject().getName());        summary.append(" ");        summary.append(session.getTopLevelProject().getVersion());    }    summary.append(":");    infoMain(summary.toString());    logger.info("");    MavenExecutionResult result = session.getResult();    List<MavenProject> projects = session.getProjects();    for (MavenProject project : projects) {        StringBuilder buffer = new StringBuilder(128);        buffer.append(project.getName());        buffer.append(' ');        if (!isSingleVersion) {            buffer.append(project.getVersion());            buffer.append(' ');        }        if (buffer.length() <= MAX_PROJECT_NAME_LENGTH) {            while (buffer.length() < MAX_PROJECT_NAME_LENGTH) {                buffer.append('.');            }            buffer.append(' ');        }        BuildSummary buildSummary = result.getBuildSummary(project);        if (buildSummary == null) {            buffer.append(buffer().warning("SKIPPED"));        } else if (buildSummary instanceof BuildSuccess) {            buffer.append(buffer().success("SUCCESS"));            buffer.append(" [");            String buildTimeDuration = formatDuration(buildSummary.getTime());            int padSize = MAX_PADDED_BUILD_TIME_DURATION_LENGTH - buildTimeDuration.length();            if (padSize > 0) {                buffer.append(chars(' ', padSize));            }            buffer.append(buildTimeDuration);            buffer.append(']');        } else if (buildSummary instanceof BuildFailure) {            buffer.append(buffer().failure("FAILURE"));            buffer.append(" [");            String buildTimeDuration = formatDuration(buildSummary.getTime());            int padSize = MAX_PADDED_BUILD_TIME_DURATION_LENGTH - buildTimeDuration.length();            if (padSize > 0) {                buffer.append(chars(' ', padSize));            }            buffer.append(buildTimeDuration);            buffer.append(']');        }        logger.info(buffer.toString());    }}
30b84071f1c08c444b4cc29d0a12cb90ab4ee1e796ea2bb8eff287c03b4bc7c3
logResult
private void logResult(MavenSession session)
{    infoLine('-');    MessageBuilder buffer = buffer();    if (session.getResult().hasExceptions()) {        buffer.failure("BUILD FAILURE");    } else {        buffer.success("BUILD SUCCESS");    }    logger.info(buffer.toString());}
aa9ba39a5cbb94a3fe1eb179a7d70a4543b2e79f39bb798e693f6ceefb8591ef
logStats
private void logStats(MavenSession session)
{    infoLine('-');    long finish = System.currentTimeMillis();    long time = finish - session.getRequest().getStartTime().getTime();    String wallClock = session.getRequest().getDegreeOfConcurrency() > 1 ? " (Wall Clock)" : "";    logger.info("Total time:  {}{}", formatDuration(time), wallClock);    logger.info("Finished at: {}", formatTimestamp(finish));}
d319d6ff0357b049c416e143bb2b46f1bcdb12bfbfcb6e240e05a648218eeaab
projectSkipped
public void projectSkipped(ExecutionEvent event)
{    if (logger.isInfoEnabled()) {        logger.info("");        infoLine('-');        infoMain("Skipping " + event.getProject().getName());        logger.info("This project has been banned from the build due to previous failures.");        infoLine('-');    }}
dd3e62eef1d8e7cab546dfe7191afb60ca4d59daa13f2054d91e4e97be33b80f
projectStarted
public void projectStarted(ExecutionEvent event)
{    if (logger.isInfoEnabled()) {        MavenProject project = event.getProject();        logger.info("");                String projectKey = project.getGroupId() + ':' + project.getArtifactId();        final String preHeader = "--< ";        final String postHeader = " >--";        final int headerLen = preHeader.length() + projectKey.length() + postHeader.length();        String prefix = chars('-', Math.max(0, (LINE_LENGTH - headerLen) / 2)) + preHeader;        String suffix = postHeader + chars('-', Math.max(0, LINE_LENGTH - headerLen - prefix.length() + preHeader.length()));        logger.info(buffer().strong(prefix).project(projectKey).strong(suffix).toString());                String building = "Building " + event.getProject().getName() + " " + event.getProject().getVersion();        if (totalProjects <= 1) {            infoMain(building);        } else {                        int number;            synchronized (this) {                number = ++currentVisitedProjectCount;            }            String progress = " [" + number + '/' + totalProjects + ']';            int pad = LINE_LENGTH - building.length() - progress.length();            infoMain(building + ((pad > 0) ? chars(' ', pad) : "") + progress);        }                prefix = chars('-', Math.max(0, (LINE_LENGTH - project.getPackaging().length() - 4) / 2));        suffix = chars('-', Math.max(0, LINE_LENGTH - project.getPackaging().length() - 4 - prefix.length()));        infoMain(prefix + "[ " + project.getPackaging() + " ]" + suffix);    }}
b7a2616539a1d5fa0295fa4db735ebf0339570272731149c7d79ea145f8d275e
mojoSkipped
public void mojoSkipped(ExecutionEvent event)
{    if (logger.isWarnEnabled()) {        logger.warn("Goal {} requires online mode for execution but Maven is currently offline, skipping", event.getMojoExecution().getGoal());    }}
d5ce85245dc6eeb7970d2efaa177d17cd4ac3d4023f01b7d6be498e000967579
mojoStarted
public void mojoStarted(ExecutionEvent event)
{    if (logger.isInfoEnabled()) {        logger.info("");        MessageBuilder buffer = buffer().strong("--- ");        append(buffer, event.getMojoExecution());        append(buffer, event.getProject());        buffer.strong(" ---");        logger.info(buffer.toString());    }}
27cbe5e049a212addd857ddfe44c0b4b27c450ea4f4fdb39091e9e7d900c34bc
forkStarted
public void forkStarted(ExecutionEvent event)
{    if (logger.isInfoEnabled()) {        logger.info("");        MessageBuilder buffer = buffer().strong(">>> ");        append(buffer, event.getMojoExecution());        buffer.strong(" > ");        appendForkInfo(buffer, event.getMojoExecution().getMojoDescriptor());        append(buffer, event.getProject());        buffer.strong(" >>>");        logger.info(buffer.toString());    }}
d2cd2407e98598390dda7c32774876409194957bcf85c6aaccede8839f570c9e
forkSucceeded
public void forkSucceeded(ExecutionEvent event)
{    if (logger.isInfoEnabled()) {        logger.info("");        MessageBuilder buffer = buffer().strong("<<< ");        append(buffer, event.getMojoExecution());        buffer.strong(" < ");        appendForkInfo(buffer, event.getMojoExecution().getMojoDescriptor());        append(buffer, event.getProject());        buffer.strong(" <<<");        logger.info(buffer.toString());        logger.info("");    }}
5b0a49aa08299ea5935fe92280a8f943e667541ddd8d39db1163818e443265bb
append
private void append(MessageBuilder buffer, MojoExecution me)
{    buffer.mojo(me.getArtifactId() + ':' + me.getVersion() + ':' + me.getGoal());    if (me.getExecutionId() != null) {        buffer.a(' ').strong('(' + me.getExecutionId() + ')');    }}
99d445462de09e68d340a4367e1f721ffda532b0e31d90afecf70c06a5ed8a3c
appendForkInfo
private void appendForkInfo(MessageBuilder buffer, MojoDescriptor md)
{    StringBuilder buff = new StringBuilder();    if (StringUtils.isNotEmpty(md.getExecutePhase())) {                if (StringUtils.isNotEmpty(md.getExecuteLifecycle())) {            buff.append('[');            buff.append(md.getExecuteLifecycle());            buff.append(']');        }        buff.append(md.getExecutePhase());    } else {                buff.append(':');        buff.append(md.getExecuteGoal());    }    buffer.strong(buff.toString());}
dc5a5c30f8511791fc4ef01a70893069486938e1943a6dff3ed1ea001b9960c2
append
private void append(MessageBuilder buffer, MavenProject project)
{    buffer.a(" @ ").project(project.getArtifactId());}
444ad0a75462931f834b7df4b26ab092609d9ba60f680a92a5d59ee5eba5a30e
forkedProjectStarted
public void forkedProjectStarted(ExecutionEvent event)
{    if (logger.isInfoEnabled() && event.getMojoExecution().getForkedExecutions().size() > 1) {        logger.info("");        infoLine('>');        infoMain("Forking " + event.getProject().getName() + " " + event.getProject().getVersion());        infoLine('>');    }}
27abac6a6b8a857f61d099e83e747effcca82c71b8fea5bf282c3e1c7fbbd40e
loadCoreExtensions
public List<CoreExtensionEntry> loadCoreExtensions(MavenExecutionRequest request, Set<String> providedArtifacts, List<CoreExtension> extensions) throws Exception
{    RepositorySystemSession repoSession = repositorySystemSessionFactory.newRepositorySession(request);    List<RemoteRepository> repositories = RepositoryUtils.toRepos(request.getPluginArtifactRepositories());    return resolveCoreExtensions(repoSession, repositories, providedArtifacts, extensions);}
444ff7f18ba8900153b6dcbf598429f180e8838f334bba867385988a43ffb3c7
resolveCoreExtensions
private List<CoreExtensionEntry> resolveCoreExtensions(RepositorySystemSession repoSession, List<RemoteRepository> repositories, Set<String> providedArtifacts, List<CoreExtension> configuration) throws Exception
{    List<CoreExtensionEntry> extensions = new ArrayList<>();    DependencyFilter dependencyFilter = new ExclusionsDependencyFilter(providedArtifacts);    for (CoreExtension extension : configuration) {        List<Artifact> artifacts = resolveExtension(extension, repoSession, repositories, dependencyFilter);        if (!artifacts.isEmpty()) {            extensions.add(createExtension(extension, artifacts));        }    }    return Collections.unmodifiableList(extensions);}
a26644b49b365ae9adb6ca8ca0d0517e714e8637eb45fe64cf0d7bfcae0c0f47
createExtension
private CoreExtensionEntry createExtension(CoreExtension extension, List<Artifact> artifacts) throws Exception
{    String realmId = "coreExtension>" + extension.getGroupId() + ":" + extension.getArtifactId() + ":" + extension.getVersion();    ClassRealm realm = classWorld.newRealm(realmId, null);    log.debug("Populating class realm " + realm.getId());    realm.setParentRealm(parentRealm);    for (Artifact artifact : artifacts) {        File file = artifact.getFile();        log.debug("  Included " + file);        realm.addURL(file.toURI().toURL());    }    return CoreExtensionEntry.discoverFrom(realm, Collections.singleton(artifacts.get(0).getFile()));}
ed1774678d6183caa94fb79db9eb22c5271ac5554ab759436890252d5e35513f
resolveExtension
private List<Artifact> resolveExtension(CoreExtension extension, RepositorySystemSession repoSession, List<RemoteRepository> repositories, DependencyFilter dependencyFilter) throws PluginResolutionException
{    Plugin plugin = new Plugin();    plugin.setGroupId(extension.getGroupId());    plugin.setArtifactId(extension.getArtifactId());    plugin.setVersion(extension.getVersion());    DependencyNode root = pluginDependenciesResolver.resolveCoreExtension(plugin, dependencyFilter, repositories, repoSession);    PreorderNodeListGenerator nlg = new PreorderNodeListGenerator();    root.accept(nlg);    List<Artifact> artifacts = nlg.getArtifacts(false);    return artifacts;}
57088c50a042125b2d1ab7573fb455ba71bcef8003e1bde67fd7da797c0246bf
setRootLoggerLevel
public void setRootLoggerLevel(Level level)
{    logger.warn("setRootLoggerLevel: operation not supported");}
0b04c0a2cfd501177191cfd8e53569c693fe717af49b4ca05ec656f7acc8833f
activate
public void activate()
{    logger.warn("reset(): operation not supported");}
57088c50a042125b2d1ab7573fb455ba71bcef8003e1bde67fd7da797c0246bf
setRootLoggerLevel
public void setRootLoggerLevel(Level level)
{    String value;    switch(level) {        case DEBUG:            value = "debug";            break;        case INFO:            value = "info";            break;        default:            value = "error";            break;    }    System.setProperty("maven.logging.root.level", value);}
0b04c0a2cfd501177191cfd8e53569c693fe717af49b4ca05ec656f7acc8833f
activate
public void activate()
{}
57088c50a042125b2d1ab7573fb455ba71bcef8003e1bde67fd7da797c0246bf
setRootLoggerLevel
public void setRootLoggerLevel(Level level)
{    ch.qos.logback.classic.Level value;    switch(level) {        case DEBUG:            value = ch.qos.logback.classic.Level.DEBUG;            break;        case INFO:            value = ch.qos.logback.classic.Level.INFO;            break;        default:            value = ch.qos.logback.classic.Level.ERROR;            break;    }    ((ch.qos.logback.classic.Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME)).setLevel(value);}
0b04c0a2cfd501177191cfd8e53569c693fe717af49b4ca05ec656f7acc8833f
activate
public void activate()
{}
57088c50a042125b2d1ab7573fb455ba71bcef8003e1bde67fd7da797c0246bf
setRootLoggerLevel
public void setRootLoggerLevel(Level level)
{    String value;    switch(level) {        case DEBUG:            value = "debug";            break;        case INFO:            value = "info";            break;        default:            value = "error";            break;    }    System.setProperty("org.slf4j.simpleLogger.defaultLogLevel", value);}
0b04c0a2cfd501177191cfd8e53569c693fe717af49b4ca05ec656f7acc8833f
activate
public void activate()
{        MavenSlf4jFriend.reset();    MavenSlf4jSimpleFriend.init();}
0b04c0a2cfd501177191cfd8e53569c693fe717af49b4ca05ec656f7acc8833f
activate
public void activate()
{    logger.warn("The SLF4J binding actually used is not supported by Maven: {}", slf4jBinding);    logger.warn("Maven supported bindings are:");    String ls = System.getProperty("line.separator");    for (Map.Entry<URL, Set<Object>> entry : supported.entrySet()) {        StringBuilder sb = new StringBuilder();        sb.append("(from ").append(entry.getKey().toExternalForm()).append(')');        for (Object binding : entry.getValue()) {            sb.append(ls).append("- ").append(binding);        }        logger.warn(sb.toString());    }}
ad11cc92ee9358a01ba38d9033a949e36b00ba2eb5929cbd59bf10759565937f
getConfiguration
public static Slf4jConfiguration getConfiguration(ILoggerFactory loggerFactory)
{    Map<URL, Set<Object>> supported = new LinkedHashMap<>();    String slf4jBinding = loggerFactory.getClass().getCanonicalName();    try {        Enumeration<URL> resources = Slf4jConfigurationFactory.class.getClassLoader().getResources(RESOURCE);        while (resources.hasMoreElements()) {            URL resource = resources.nextElement();            Properties conf = PropertyUtils.loadProperties(resource.openStream());            String impl = conf.getProperty(slf4jBinding);            if (impl != null) {                return (Slf4jConfiguration) Class.forName(impl).newInstance();            }            supported.put(resource, conf.keySet());        }    } catch (IOException | ClassNotFoundException | IllegalAccessException | InstantiationException e) {        e.printStackTrace();    }    return new UnsupportedSlf4jBindingConfiguration(slf4jBinding, supported);}
7aac23a7b2811b66d2d3d2b593ab28f1d4d72a40344a95b1fe55fb7a5d090ced
debug
public void debug(String message)
{    logger.debug(message);}
93bc6a389bfc0bb9e29af6a778abae10625e9a821997056e045b75f6cdbbbee8
debug
public void debug(String message, Throwable throwable)
{    logger.debug(message, throwable);}
78a12d10dabb3d8114aaac00c701b5b6aa7cbfaa2d8d5e567d835d24c4e4049e
isDebugEnabled
public boolean isDebugEnabled()
{    return logger.isDebugEnabled();}
a2ed677f9992311730a006ef271b236d943fdfcaee8b6cf4c163778e102a666c
info
public void info(String message)
{    logger.info(message);}
b2b569ecad577637c1d1965fcb7ddccc3a1eaff1f0f79e17d8384c8ed192b142
info
public void info(String message, Throwable throwable)
{    logger.info(message, throwable);}
791133a98f4bf579531e6f98c8eedc6a6b04fa18d00c49cc69e44fb34f1d7bfb
isInfoEnabled
public boolean isInfoEnabled()
{    return logger.isInfoEnabled();}
0e9ebe16e9d5871c645fb7890d5cf55101d7ecf97f9695dcaccc6609f8c9bcd8
warn
public void warn(String message)
{    logger.warn(message);}
19c189bc006350c03336b80456836317c7464e11f0cecc4c4ec585fba87b9f50
warn
public void warn(String message, Throwable throwable)
{    logger.warn(message, throwable);}
ed1cbf9afb39ae4c470fcb5327707d375fad568a93babe54ea77258009a55c9a
isWarnEnabled
public boolean isWarnEnabled()
{    return logger.isWarnEnabled();}
3d531da8b0df815c8f55a2d9cbe619318c40cc111aa45b249d64cf5f69961b1c
error
public void error(String message)
{    logger.error(message);}
aa9c7ffdc16cb2ea50896295a57321509fb204b4235a9071a3f86fd75d644a41
error
public void error(String message, Throwable throwable)
{    logger.error(message, throwable);}
57f02ea050263534c4a0e031302153aeaf6c901a04ad56b7140d80df41a36abd
isErrorEnabled
public boolean isErrorEnabled()
{    return logger.isErrorEnabled();}
c9f504a28d690bb8e51bae2b5d191d48df5dc0170a272a816358d8eed93407bf
fatalError
public void fatalError(String message)
{    logger.error(message);}
0994821f27c2cbe8f668bb2fe2cda25f86f56790eb20ce38b79ed9bffd684a88
fatalError
public void fatalError(String message, Throwable throwable)
{    logger.error(message, throwable);}
1471709423ea34758cb2c9c789a79c7e47e1eceef9ce6572a83271b2b70591b9
isFatalErrorEnabled
public boolean isFatalErrorEnabled()
{    return logger.isErrorEnabled();}
49b6d134697e50240add951addd4f3b66e8dc36b3c4739cbbf097d0150540b4b
getThreshold
public int getThreshold()
{    return 0;}
018b4b6c447f0ef5682a1a97677981e0c412a9ec3f9c2aeaa0564488b7eca23e
setThreshold
public void setThreshold(int threshold)
{}
3234bf963d3f58d7568ba6447b96dd83ddde942715cc95dbd323d05802a2b837
getChildLogger
public Logger getChildLogger(String name)
{    return null;}
239fbe3eb64d679cbac1161825b07d6a8436ead3c6c3d140d9caec2275827023
getName
public String getName()
{    return logger.getName();}
7bc0df8a8ea66dd2794097aafacb63ef094f58cfecd35319faa8b0e0fee5a2ae
getLoggerForComponent
public Logger getLoggerForComponent(String role)
{    return new Slf4jLogger(loggerFactory.getLogger(role));}
c6a648d91de3e77f80cd5109df90227aad672accb6cec0a86802d014fe7221d4
getLoggerForComponent
public Logger getLoggerForComponent(String role, String hint)
{    return (null == hint ? getLoggerForComponent(role) : new Slf4jLogger(loggerFactory.getLogger(role + '.' + hint)));}
46ab4048f6e2769960f7fb51e12a9ad76e922eae8d98dd09225833be19a57432
returnComponentLogger
public void returnComponentLogger(String role)
{}
0466397188c1e919b7b0ae63ba6cc21402c1e37c494f9b8ea835b894a5bffebe
returnComponentLogger
public void returnComponentLogger(String role, String hint)
{}
49b6d134697e50240add951addd4f3b66e8dc36b3c4739cbbf097d0150540b4b
getThreshold
public int getThreshold()
{    return 0;}
018b4b6c447f0ef5682a1a97677981e0c412a9ec3f9c2aeaa0564488b7eca23e
setThreshold
public void setThreshold(int threshold)
{}
bc36dc97fc30768127ea982b3fe5e514370af08dd169d8c62995c0a54da6e0ee
setThresholds
public void setThresholds(int threshold)
{}
561428c314ffb81ea49e8dbf8526af33968bb13b722ca06491a3dc416e0f4579
getActiveLoggerCount
public int getActiveLoggerCount()
{    return 0;}
4b24bd3900fe9b8b33a3516c2d2de582a25e60496ae8d0c2ae8bd24cdc14094c
error
public void error(String msg)
{    out.print(ERROR);    out.println(msg);}
a48b0d9a62f46c8336e83d64effe56361ae58bba7cc08b625cba93e2e39c83a9
error
public void error(String msg, Throwable t)
{    error(msg);    if (null != t) {        t.printStackTrace(out);    }}
239fbe3eb64d679cbac1161825b07d6a8436ead3c6c3d140d9caec2275827023
getName
public String getName()
{    return null;}
4364efe81d69dd89de0ddbc0674354a62d8e8ba8ed7d567691994c4945c90844
isTraceEnabled
public boolean isTraceEnabled()
{    return false;}
009eb3617e9f443576c84e788ead0e1d75e2866b4e20f7d37df8d46299bd9feb
trace
public void trace(String msg)
{}
a351b6683432bc2f4d6219044bdf73b74807e636649818a2dc2aa85b3df27139
trace
public void trace(String format, Object arg)
{}
534d7e025f69c9c3e74fae577af04b6c6add1c651ee6dec3d8af242007be45ae
trace
public void trace(String format, Object arg1, Object arg2)
{}
81daf7602071c1cd7492b9539cdcddfed4eb9990a788f7b930922459f7b6136e
trace
public void trace(String format, Object... arguments)
{}
614da04b7b6ae823a7d2695d07f5e3a22cb63bf612beb0d95503c7caddbef791
trace
public void trace(String msg, Throwable t)
{}
fb2801495382490e5efa0fa1d978dc72d2aa1a5743b8c80c9e4da1a908f49ec3
isTraceEnabled
public boolean isTraceEnabled(Marker marker)
{    return false;}
1769865506c7442ecba76d383a2a15591dc8cc57bdfd49e6070edc11015779f4
trace
public void trace(Marker marker, String msg)
{}
0de7ea5f4fb9e32f8497afb65aa753019a8071179d26e46f93fcd1c3a63f6cf4
trace
public void trace(Marker marker, String format, Object arg)
{}
8575464cdd24119259ce63e7cf84cc9c6b680db9ef7ffb5e76911b1a491d62b7
trace
public void trace(Marker marker, String format, Object arg1, Object arg2)
{}
7e65a7ddce586ce976513d10e1f1f08454321cabf2ecbb087989fa5d6fbbb511
trace
public void trace(Marker marker, String format, Object... argArray)
{}
7e0348b0cab268ae637795352bbd33ee83043491fb7544c330aaf9fcd9089519
trace
public void trace(Marker marker, String msg, Throwable t)
{}
78a12d10dabb3d8114aaac00c701b5b6aa7cbfaa2d8d5e567d835d24c4e4049e
isDebugEnabled
public boolean isDebugEnabled()
{    return false;}
5a9f003fc74a2e31052dc44d05f642f6f30200e9282663181bd15acf88db3cb5
debug
public void debug(String msg)
{}
5b757d697219718e96dc9d5ddc2ad69141283c72143c762220522e68a39d7451
debug
public void debug(String format, Object arg)
{}
eb199301afaf6ee66fd5b2815f165b260ed362e2f8b3b1a9dcde3bac4bfcfedf
debug
public void debug(String format, Object arg1, Object arg2)
{}
3e1717fc8bc0ac5eef0d5f244e816b378d82600a7404c6fcbcdd469de99dc9a9
debug
public void debug(String format, Object... arguments)
{}
7f5727f1dbc2d7582209cd542bc80d9f91baebe09a8da752d54856213d066eb7
debug
public void debug(String msg, Throwable t)
{}
f6025f5d07931f91e484a354b507cd324363914fa101d957b2dc8b608dbdf697
isDebugEnabled
public boolean isDebugEnabled(Marker marker)
{    return false;}
e401a845e5c2666495d3c05ac78b27466217e086d684907e90ca796d1d1a5398
debug
public void debug(Marker marker, String msg)
{}
cb222fced7807df788e2e79a26d3d0a3999db202c880fb1932d1438bd1089cbf
debug
public void debug(Marker marker, String format, Object arg)
{}
36b3fc6bb06898715670b93d652c1e37063761d25ce44faaff7dac15c0684295
debug
public void debug(Marker marker, String format, Object arg1, Object arg2)
{}
287ec3dfd6d4e971fa464baa77814b1b0cbaa3281eb3c764c17b952cd14a07bc
debug
public void debug(Marker marker, String format, Object... arguments)
{}
53a8dfecc29de7fadad30f2eae92ada3f727c0df11f71a42ccc5c56693415c9e
debug
public void debug(Marker marker, String msg, Throwable t)
{}
791133a98f4bf579531e6f98c8eedc6a6b04fa18d00c49cc69e44fb34f1d7bfb
isInfoEnabled
public boolean isInfoEnabled()
{    return false;}
d076ef863add33e1c5853cfb21eafe958a1522d93d2934fea31d3dfba5daaa22
info
public void info(String msg)
{}
1b3b743fc90394f46005c576f39f9239711dc7d95b3901631ed6e508882251dd
info
public void info(String format, Object arg)
{}
48ad6c09c0889c51c7362e6fda53d468db464cab43401f0966d6553ff4f79f27
info
public void info(String format, Object arg1, Object arg2)
{}
15b382568160b3565e4362d1d2c339a0b11695d27958eb2cbae618b4642607ee
info
public void info(String format, Object... arguments)
{}
27480d5118e4f7ae76bf1edad35996adf768c9d1246661527b3081ef654e7593
info
public void info(String msg, Throwable t)
{}
6295f2af8d11076db78dacef2efe47a367ef3e433d4ae1bdbe6bbdfd76dae772
isInfoEnabled
public boolean isInfoEnabled(Marker marker)
{    return false;}
d4e5ef78fa3b16942a3ddb27420137c0b53da462a7892e6b706101eec3127201
info
public void info(Marker marker, String msg)
{}
88972e4589a76d503ddf08e4d1e7596096ebd8fe03d253c434e5d13604fecc8b
info
public void info(Marker marker, String format, Object arg)
{}
25ad305dc2f19657bb86b9097e688c3e5a4837304b8dcb62a737081c4653c9b1
info
public void info(Marker marker, String format, Object arg1, Object arg2)
{}
854bb8d61344398e0a0a0735a0edbfd975f390b0abe41f333e2c3ad9d0df69fc
info
public void info(Marker marker, String format, Object... arguments)
{}
6df4afde3db8e9a0eed787f2d9f741fb018eaa1dce0195f8f274f6b765be3a85
info
public void info(Marker marker, String msg, Throwable t)
{}
ed1cbf9afb39ae4c470fcb5327707d375fad568a93babe54ea77258009a55c9a
isWarnEnabled
public boolean isWarnEnabled()
{    return false;}
55ec351509e5a64fbe4ca7858b40823e1a9455adc8b736e8164ba27c6595354d
warn
public void warn(String msg)
{}
133111f056c92aaccc8550110dfd70c81e3eaaf7566e0443c9d10fba1b9525d0
warn
public void warn(String format, Object arg)
{}
dbaffd62df36532538780954368b0c53e557db7ef89d0ae83a7a41f6d9a6f69d
warn
public void warn(String format, Object... arguments)
{}
b688c9d8e18c4fc3e6eaf812c5b5c23e040d197b843710f6ab6a5845b239f085
warn
public void warn(String format, Object arg1, Object arg2)
{}
072c939607faf2f79acb4b092e602da7a8da396b0fc436e45748cd5587c05ae4
warn
public void warn(String msg, Throwable t)
{}
60175dc314cfdfbeff5ad2bd1136f0e0e521a2ac620fa2dab0deedd2b3f5f7a5
isWarnEnabled
public boolean isWarnEnabled(Marker marker)
{    return false;}
9a81badac99ef67630c3a13bde88ec5cf4243b462927823cdeaea4c319e32614
warn
public void warn(Marker marker, String msg)
{}
23edff5286c41c6ff619bc6d2ff104edf8dbccbc4357ef13e3ce650c51d0d1a9
warn
public void warn(Marker marker, String format, Object arg)
{}
b589cd887b07e1dbe018e95f0fcf458489acbce38b81d2878bee40b83061f06e
warn
public void warn(Marker marker, String format, Object arg1, Object arg2)
{}
aa43c6a3e35e28cf075fee93dfa397c636cf4ea75de3a641cab836d87955730e
warn
public void warn(Marker marker, String format, Object... arguments)
{}
f220dc92a59c79d5dc8f385d924265bd6a772d781500a61a2461c2a0044ec30d
warn
public void warn(Marker marker, String msg, Throwable t)
{}
57f02ea050263534c4a0e031302153aeaf6c901a04ad56b7140d80df41a36abd
isErrorEnabled
public boolean isErrorEnabled()
{    return false;}
06ff093ef9d7f6f1cf2223376ab8a100cc9860c88863d3f466b64a1752a508a3
error
public void error(String format, Object arg)
{}
d5375efccef8c3e860c5cc8308ea52b6be656c3c94a268a09984c92a68d493f4
error
public void error(String format, Object arg1, Object arg2)
{}
38a8471bbbe7a3f595429935fdd18d26e848476863351130e921627746344208
error
public void error(String format, Object... arguments)
{}
32c4e174fbb1a74b98bd8a7589dff645d47648fe04b996bd342492a2ce6121b3
isErrorEnabled
public boolean isErrorEnabled(Marker marker)
{    return false;}
9ae827e80544fe52e2cdcab97b68f6793396911e02a46073029c5077c5c73f80
error
public void error(Marker marker, String msg)
{}
04e68ab5374ca69be9357fcc9aed02a953b0da71a1da9892c9f443eb2c6091d6
error
public void error(Marker marker, String format, Object arg)
{}
1428b3649ae4cbfad2c646d3c97af6eac3ec8a3b691dbc5cba8d36e6cf535b1e
error
public void error(Marker marker, String format, Object arg1, Object arg2)
{}
83634e66e2e251eff9c49f5bce1ed7aea854e639209a7d8127142957669e21b4
error
public void error(Marker marker, String format, Object... arguments)
{}
b0845a03e320e3094bb73d823f05c42b24262fed6ba1cd9d3f29ba1b1e3d4bbb
error
public void error(Marker marker, String msg, Throwable t)
{}
3116ea2053d9de960ec3753eb07f3d243c370662aa1f0175ad357057c9ce5a52
main
public static void main(String[] args)
{    int result = main(args, null);    System.exit(result);}
4bc20f5a2d76cc2379665345c359756abb4d2ac0c6f8becec373daa3fd1ddf0e
main
public static int main(String[] args, ClassWorld classWorld)
{    MavenCli cli = new MavenCli();    MessageUtils.systemInstall();    MessageUtils.registerShutdownHook();    int result = cli.doMain(new CliRequest(args, classWorld));    MessageUtils.systemUninstall();    return result;}
705bfbad5ccd9a2e027a5e52cd14cb4b987fb10674c6eec6ea20a5a2dc871517
doMain
public static int doMain(String[] args, ClassWorld classWorld)
{    MavenCli cli = new MavenCli();    return cli.doMain(new CliRequest(args, classWorld));}
0dda6c77593cf1124eb717f9971d47b0fb1e9ce9e8996e99eb9722f8e119e71b
doMain
public int doMain(String[] args, String workingDirectory, PrintStream stdout, PrintStream stderr)
{    PrintStream oldout = System.out;    PrintStream olderr = System.err;    final Set<String> realms;    if (classWorld != null) {        realms = new HashSet<>();        for (ClassRealm realm : classWorld.getRealms()) {            realms.add(realm.getId());        }    } else {        realms = Collections.emptySet();    }    try {        if (stdout != null) {            System.setOut(stdout);        }        if (stderr != null) {            System.setErr(stderr);        }        CliRequest cliRequest = new CliRequest(args, classWorld);        cliRequest.workingDirectory = workingDirectory;        return doMain(cliRequest);    } finally {        if (classWorld != null) {            for (ClassRealm realm : new ArrayList<>(classWorld.getRealms())) {                String realmId = realm.getId();                if (!realms.contains(realmId)) {                    try {                        classWorld.disposeRealm(realmId);                    } catch (NoSuchRealmException ignored) {                                        }                }            }        }        System.setOut(oldout);        System.setErr(olderr);    }}
e9a5292594b26744858b80d96e3f5d08c3fba515a04e25f6726f172cf8896b7c
doMain
public int doMain(CliRequest cliRequest)
{    PlexusContainer localContainer = null;    try {        initialize(cliRequest);        cli(cliRequest);        properties(cliRequest);        logging(cliRequest);        version(cliRequest);        localContainer = container(cliRequest);        commands(cliRequest);        configure(cliRequest);        toolchains(cliRequest);        populateRequest(cliRequest);        encryption(cliRequest);        repository(cliRequest);        return execute(cliRequest);    } catch (ExitException e) {        return e.exitCode;    } catch (UnrecognizedOptionException e) {                return 1;    } catch (BuildAbort e) {        CLIReportingUtils.showError(slf4jLogger, "ABORTED", e, cliRequest.showErrors);        return 2;    } catch (Exception e) {        CLIReportingUtils.showError(slf4jLogger, "Error executing Maven.", e, cliRequest.showErrors);        return 1;    } finally {        if (localContainer != null) {            localContainer.dispose();        }    }}
97ee9f9007ec8b470c319df6821f0691b6e47ba0993fa1d017cb7ee237fd4635
initialize
 void initialize(CliRequest cliRequest) throws ExitException
{    if (cliRequest.workingDirectory == null) {        cliRequest.workingDirectory = System.getProperty("user.dir");    }    if (cliRequest.multiModuleProjectDirectory == null) {        String basedirProperty = System.getProperty(MULTIMODULE_PROJECT_DIRECTORY);        if (basedirProperty == null) {            System.err.format("-D%s system property is not set.", MULTIMODULE_PROJECT_DIRECTORY);            throw new ExitException(1);        }        File basedir = basedirProperty != null ? new File(basedirProperty) : new File("");        try {            cliRequest.multiModuleProjectDirectory = basedir.getCanonicalFile();        } catch (IOException e) {            cliRequest.multiModuleProjectDirectory = basedir.getAbsoluteFile();        }    }                    String mavenHome = System.getProperty("maven.home");    if (mavenHome != null) {        System.setProperty("maven.home", new File(mavenHome).getAbsolutePath());    }}
b2bc50e83df765c3b0657db6f925220b2dd3e79c1a59c3669a2ee90b559cf0dd
cli
 void cli(CliRequest cliRequest) throws Exception
{                    slf4jLogger = new Slf4jStdoutLogger();    CLIManager cliManager = new CLIManager();    List<String> args = new ArrayList<>();    CommandLine mavenConfig = null;    try {        File configFile = new File(cliRequest.multiModuleProjectDirectory, MVN_MAVEN_CONFIG);        if (configFile.isFile()) {            for (String arg : new String(Files.readAllBytes(configFile.toPath())).split("\\s+")) {                if (!arg.isEmpty()) {                    args.add(arg);                }            }            mavenConfig = cliManager.parse(args.toArray(new String[0]));            List<?> unrecongized = mavenConfig.getArgList();            if (!unrecongized.isEmpty()) {                throw new ParseException("Unrecognized maven.config entries: " + unrecongized);            }        }    } catch (ParseException e) {        System.err.println("Unable to parse maven.config: " + e.getMessage());        cliManager.displayHelp(System.out);        throw e;    }    try {        if (mavenConfig == null) {            cliRequest.commandLine = cliManager.parse(cliRequest.args);        } else {            cliRequest.commandLine = cliMerge(cliManager.parse(cliRequest.args), mavenConfig);        }    } catch (ParseException e) {        System.err.println("Unable to parse command line options: " + e.getMessage());        cliManager.displayHelp(System.out);        throw e;    }    if (cliRequest.commandLine.hasOption(CLIManager.HELP)) {        cliManager.displayHelp(System.out);        throw new ExitException(0);    }    if (cliRequest.commandLine.hasOption(CLIManager.VERSION)) {        System.out.println(CLIReportingUtils.showVersion());        throw new ExitException(0);    }}
1a14c8b4b6f06098c4f3fe4bb771e83f40b43f86838bc2850c4fb150321ece72
cliMerge
private CommandLine cliMerge(CommandLine mavenArgs, CommandLine mavenConfig)
{    CommandLine.Builder commandLineBuilder = new CommandLine.Builder();        for (String arg : mavenArgs.getArgs()) {        commandLineBuilder.addArg(arg);    }    for (String arg : mavenConfig.getArgs()) {        commandLineBuilder.addArg(arg);    }        List<Option> setPropertyOptions = new ArrayList<>();    for (Option opt : mavenArgs.getOptions()) {        if (String.valueOf(CLIManager.SET_SYSTEM_PROPERTY).equals(opt.getOpt())) {            setPropertyOptions.add(opt);        } else {            commandLineBuilder.addOption(opt);        }    }    for (Option opt : mavenConfig.getOptions()) {        commandLineBuilder.addOption(opt);    }        for (Option opt : setPropertyOptions) {        commandLineBuilder.addOption(opt);    }    return commandLineBuilder.build();}
c79e8a3234c23699c7296a5b984c01413cc768f04eb703de705109bd58166eee
logging
 void logging(CliRequest cliRequest)
{        cliRequest.debug = cliRequest.commandLine.hasOption(CLIManager.DEBUG);    cliRequest.quiet = !cliRequest.debug && cliRequest.commandLine.hasOption(CLIManager.QUIET);    cliRequest.showErrors = cliRequest.debug || cliRequest.commandLine.hasOption(CLIManager.ERRORS);    slf4jLoggerFactory = LoggerFactory.getILoggerFactory();    Slf4jConfiguration slf4jConfiguration = Slf4jConfigurationFactory.getConfiguration(slf4jLoggerFactory);    if (cliRequest.debug) {        cliRequest.request.setLoggingLevel(MavenExecutionRequest.LOGGING_LEVEL_DEBUG);        slf4jConfiguration.setRootLoggerLevel(Slf4jConfiguration.Level.DEBUG);    } else if (cliRequest.quiet) {        cliRequest.request.setLoggingLevel(MavenExecutionRequest.LOGGING_LEVEL_ERROR);        slf4jConfiguration.setRootLoggerLevel(Slf4jConfiguration.Level.ERROR);    }                String styleColor = cliRequest.getUserProperties().getProperty(STYLE_COLOR_PROPERTY, "auto");    if ("always".equals(styleColor)) {        MessageUtils.setColorEnabled(true);    } else if ("never".equals(styleColor)) {        MessageUtils.setColorEnabled(false);    } else if (!"auto".equals(styleColor)) {        throw new IllegalArgumentException("Invalid color configuration option [" + styleColor + "]. Supported values are (auto|always|never).");    } else if (cliRequest.commandLine.hasOption(CLIManager.BATCH_MODE) || cliRequest.commandLine.hasOption(CLIManager.LOG_FILE)) {        MessageUtils.setColorEnabled(false);    }        if (cliRequest.commandLine.hasOption(CLIManager.LOG_FILE)) {        File logFile = new File(cliRequest.commandLine.getOptionValue(CLIManager.LOG_FILE));        logFile = resolveFile(logFile, cliRequest.workingDirectory);                try {            PrintStream ps = new PrintStream(new FileOutputStream(logFile));            System.setOut(ps);            System.setErr(ps);        } catch (FileNotFoundException e) {                                }    }    slf4jConfiguration.activate();    plexusLoggerManager = new Slf4jLoggerManager();    slf4jLogger = slf4jLoggerFactory.getLogger(this.getClass().getName());}
3b35674f0b4621bb6a97a5955a2a2ee72eb923ad31974b8a2737e42abfcb03f6
version
private void version(CliRequest cliRequest)
{    if (cliRequest.debug || cliRequest.commandLine.hasOption(CLIManager.SHOW_VERSION)) {        System.out.println(CLIReportingUtils.showVersion());    }}
50ec79786063fd5bfa59781191d66782ad4fc9ac40c43d2e6415befe5d373af6
commands
private void commands(CliRequest cliRequest)
{    if (cliRequest.showErrors) {        slf4jLogger.info("Error stacktraces are turned on.");    }    if (MavenExecutionRequest.CHECKSUM_POLICY_WARN.equals(cliRequest.request.getGlobalChecksumPolicy())) {        slf4jLogger.info("Disabling strict checksum verification on all artifact downloads.");    } else if (MavenExecutionRequest.CHECKSUM_POLICY_FAIL.equals(cliRequest.request.getGlobalChecksumPolicy())) {        slf4jLogger.info("Enabling strict checksum verification on all artifact downloads.");    }    if (slf4jLogger.isDebugEnabled()) {        slf4jLogger.debug("Message scheme: {}", (MessageUtils.isColorEnabled() ? "color" : "plain"));        if (MessageUtils.isColorEnabled()) {            MessageBuilder buff = MessageUtils.buffer();            buff.a("Message styles: ");            buff.a(MessageUtils.level().debug("debug")).a(' ');            buff.a(MessageUtils.level().info("info")).a(' ');            buff.a(MessageUtils.level().warning("warning")).a(' ');            buff.a(MessageUtils.level().error("error")).a(' ');            buff.success("success").a(' ');            buff.failure("failure").a(' ');            buff.strong("strong").a(' ');            buff.mojo("mojo").a(' ');            buff.project("project");            slf4jLogger.debug(buff.toString());        }    }}
028efa341f6848798b18a0627912f73cee25e65b668ecbcb797ab7c81882fe24
properties
 void properties(CliRequest cliRequest)
{    populateProperties(cliRequest.commandLine, cliRequest.systemProperties, cliRequest.userProperties);}
664c21863d3c4c61eee890337d6454eae22ea66ce0131103350d869e58b2b5f9
container
 PlexusContainer container(CliRequest cliRequest) throws Exception
{    if (cliRequest.classWorld == null) {        cliRequest.classWorld = new ClassWorld("plexus.core", Thread.currentThread().getContextClassLoader());    }    ClassRealm coreRealm = cliRequest.classWorld.getClassRealm("plexus.core");    if (coreRealm == null) {        coreRealm = cliRequest.classWorld.getRealms().iterator().next();    }    List<File> extClassPath = parseExtClasspath(cliRequest);    CoreExtensionEntry coreEntry = CoreExtensionEntry.discoverFrom(coreRealm);    List<CoreExtensionEntry> extensions = loadCoreExtensions(cliRequest, coreRealm, coreEntry.getExportedArtifacts());    ClassRealm containerRealm = setupContainerRealm(cliRequest.classWorld, coreRealm, extClassPath, extensions);    ContainerConfiguration cc = new DefaultContainerConfiguration().setClassWorld(cliRequest.classWorld).setRealm(containerRealm).setClassPathScanning(PlexusConstants.SCANNING_INDEX).setAutoWiring(true).setJSR250Lifecycle(true).setName("maven");    Set<String> exportedArtifacts = new HashSet<>(coreEntry.getExportedArtifacts());    Set<String> exportedPackages = new HashSet<>(coreEntry.getExportedPackages());    for (CoreExtensionEntry extension : extensions) {        exportedArtifacts.addAll(extension.getExportedArtifacts());        exportedPackages.addAll(extension.getExportedPackages());    }    final CoreExports exports = new CoreExports(containerRealm, exportedArtifacts, exportedPackages);    DefaultPlexusContainer container = new DefaultPlexusContainer(cc, new AbstractModule() {        @Override        protected void configure() {            bind(ILoggerFactory.class).toInstance(slf4jLoggerFactory);            bind(CoreExports.class).toInstance(exports);        }    });        container.setLookupRealm(null);    Thread.currentThread().setContextClassLoader(container.getContainerRealm());    container.setLoggerManager(plexusLoggerManager);    for (CoreExtensionEntry extension : extensions) {        container.discoverComponents(extension.getClassRealm(), new SessionScopeModule(container), new MojoExecutionScopeModule(container));    }    customizeContainer(container);    container.getLoggerManager().setThresholds(cliRequest.request.getLoggingLevel());    eventSpyDispatcher = container.lookup(EventSpyDispatcher.class);    DefaultEventSpyContext eventSpyContext = new DefaultEventSpyContext();    Map<String, Object> data = eventSpyContext.getData();    data.put("plexus", container);    data.put("workingDirectory", cliRequest.workingDirectory);    data.put("systemProperties", cliRequest.systemProperties);    data.put("userProperties", cliRequest.userProperties);    data.put("versionProperties", CLIReportingUtils.getBuildProperties());    eventSpyDispatcher.init(eventSpyContext);        slf4jLogger = slf4jLoggerFactory.getLogger(this.getClass().getName());    maven = container.lookup(Maven.class);    executionRequestPopulator = container.lookup(MavenExecutionRequestPopulator.class);    modelProcessor = createModelProcessor(container);    configurationProcessors = container.lookupMap(ConfigurationProcessor.class);    toolchainsBuilder = container.lookup(ToolchainsBuilder.class);    dispatcher = (DefaultSecDispatcher) container.lookup(SecDispatcher.class, "maven");    return container;}
e3f3888bce5cf21b1820845ce277d3e72af79375bd35bb93929649159ac47dbe
configure
protected void configure()
{    bind(ILoggerFactory.class).toInstance(slf4jLoggerFactory);    bind(CoreExports.class).toInstance(exports);}
7fb47f8284372a010e0f987bad6012ad39edf5de2398e25d9c50590702760888
loadCoreExtensions
private List<CoreExtensionEntry> loadCoreExtensions(CliRequest cliRequest, ClassRealm containerRealm, Set<String> providedArtifacts)
{    if (cliRequest.multiModuleProjectDirectory == null) {        return Collections.emptyList();    }    File extensionsFile = new File(cliRequest.multiModuleProjectDirectory, EXTENSIONS_FILENAME);    if (!extensionsFile.isFile()) {        return Collections.emptyList();    }    try {        List<CoreExtension> extensions = readCoreExtensionsDescriptor(extensionsFile);        if (extensions.isEmpty()) {            return Collections.emptyList();        }        ContainerConfiguration cc =         new DefaultContainerConfiguration().setClassWorld(        cliRequest.classWorld).setRealm(        containerRealm).setClassPathScanning(        PlexusConstants.SCANNING_INDEX).setAutoWiring(        true).setJSR250Lifecycle(        true).setName("maven");        DefaultPlexusContainer container = new DefaultPlexusContainer(cc, new AbstractModule() {            @Override            protected void configure() {                bind(ILoggerFactory.class).toInstance(slf4jLoggerFactory);            }        });        try {            container.setLookupRealm(null);            container.setLoggerManager(plexusLoggerManager);            container.getLoggerManager().setThresholds(cliRequest.request.getLoggingLevel());            Thread.currentThread().setContextClassLoader(container.getContainerRealm());            executionRequestPopulator = container.lookup(MavenExecutionRequestPopulator.class);            configurationProcessors = container.lookupMap(ConfigurationProcessor.class);            configure(cliRequest);            MavenExecutionRequest request = DefaultMavenExecutionRequest.copy(cliRequest.request);            request = populateRequest(cliRequest, request);            request = executionRequestPopulator.populateDefaults(request);            BootstrapCoreExtensionManager resolver = container.lookup(BootstrapCoreExtensionManager.class);            return Collections.unmodifiableList(resolver.loadCoreExtensions(request, providedArtifacts, extensions));        } finally {            executionRequestPopulator = null;            container.dispose();        }    } catch (RuntimeException e) {                throw e;    } catch (Exception e) {        slf4jLogger.warn("Failed to read extensions descriptor {}: {}", extensionsFile, e.getMessage());    }    return Collections.emptyList();}
e3f3888bce5cf21b1820845ce277d3e72af79375bd35bb93929649159ac47dbe
configure
protected void configure()
{    bind(ILoggerFactory.class).toInstance(slf4jLoggerFactory);}
71f996738f7c3b3b339cbf1cd0f033e53a68b77b74b35e0a86bcd49a40a2ae02
readCoreExtensionsDescriptor
private List<CoreExtension> readCoreExtensionsDescriptor(File extensionsFile) throws IOException, XmlPullParserException
{    CoreExtensionsXpp3Reader parser = new CoreExtensionsXpp3Reader();    try (InputStream is = new BufferedInputStream(new FileInputStream(extensionsFile))) {        return parser.read(is).getExtensions();    }}
fa9388bbbb214df53c49967f1018a7befa05c525df83bae4aed09cb4de686e0f
setupContainerRealm
private ClassRealm setupContainerRealm(ClassWorld classWorld, ClassRealm coreRealm, List<File> extClassPath, List<CoreExtensionEntry> extensions) throws Exception
{    if (!extClassPath.isEmpty() || !extensions.isEmpty()) {        ClassRealm extRealm = classWorld.newRealm("maven.ext", null);        extRealm.setParentRealm(coreRealm);        slf4jLogger.debug("Populating class realm {}", extRealm.getId());        for (File file : extClassPath) {            slf4jLogger.debug("  Included {}", file);            extRealm.addURL(file.toURI().toURL());        }        for (CoreExtensionEntry entry : reverse(extensions)) {            Set<String> exportedPackages = entry.getExportedPackages();            ClassRealm realm = entry.getClassRealm();            for (String exportedPackage : exportedPackages) {                extRealm.importFrom(realm, exportedPackage);            }            if (exportedPackages.isEmpty()) {                                extRealm.importFrom(realm, realm.getId());            }        }        return extRealm;    }    return coreRealm;}
2ee7c67c117a8ad30d577b0936478cb414031e9c532dc551b14f6b10d4dff299
reverse
private static List<T> reverse(List<T> list)
{    List<T> copy = new ArrayList<>(list);    Collections.reverse(copy);    return copy;}
8484b6220ba97e75aa0e462904523e94a8655bcef0d9c12c5e7a717aa421d1d6
parseExtClasspath
private List<File> parseExtClasspath(CliRequest cliRequest)
{    String extClassPath = cliRequest.userProperties.getProperty(EXT_CLASS_PATH);    if (extClassPath == null) {        extClassPath = cliRequest.systemProperties.getProperty(EXT_CLASS_PATH);    }    List<File> jars = new ArrayList<>();    if (StringUtils.isNotEmpty(extClassPath)) {        for (String jar : StringUtils.split(extClassPath, File.pathSeparator)) {            File file = resolveFile(new File(jar), cliRequest.workingDirectory);            slf4jLogger.debug("  Included {}", file);            jars.add(file);        }    }    return jars;}
c00795f6b1603c0ff24ecf18f59ac2c9b8defcf5586840cb0192e500042be9df
encryption
private void encryption(CliRequest cliRequest) throws Exception
{    if (cliRequest.commandLine.hasOption(CLIManager.ENCRYPT_MASTER_PASSWORD)) {        String passwd = cliRequest.commandLine.getOptionValue(CLIManager.ENCRYPT_MASTER_PASSWORD);        if (passwd == null) {            Console cons = System.console();            char[] password = (cons == null) ? null : cons.readPassword("Master password: ");            if (password != null) {                                passwd = String.copyValueOf(password);                                java.util.Arrays.fill(password, ' ');            }        }        DefaultPlexusCipher cipher = new DefaultPlexusCipher();        System.out.println(cipher.encryptAndDecorate(passwd, DefaultSecDispatcher.SYSTEM_PROPERTY_SEC_LOCATION));        throw new ExitException(0);    } else if (cliRequest.commandLine.hasOption(CLIManager.ENCRYPT_PASSWORD)) {        String passwd = cliRequest.commandLine.getOptionValue(CLIManager.ENCRYPT_PASSWORD);        if (passwd == null) {            Console cons = System.console();            char[] password = (cons == null) ? null : cons.readPassword("Password: ");            if (password != null) {                                passwd = String.copyValueOf(password);                                java.util.Arrays.fill(password, ' ');            }        }        String configurationFile = dispatcher.getConfigurationFile();        if (configurationFile.startsWith("~")) {            configurationFile = System.getProperty("user.home") + configurationFile.substring(1);        }        String file = System.getProperty(DefaultSecDispatcher.SYSTEM_PROPERTY_SEC_LOCATION, configurationFile);        String master = null;        SettingsSecurity sec = SecUtil.read(file, true);        if (sec != null) {            master = sec.getMaster();        }        if (master == null) {            throw new IllegalStateException("Master password is not set in the setting security file: " + file);        }        DefaultPlexusCipher cipher = new DefaultPlexusCipher();        String masterPasswd = cipher.decryptDecorated(master, DefaultSecDispatcher.SYSTEM_PROPERTY_SEC_LOCATION);        System.out.println(cipher.encryptAndDecorate(passwd, masterPasswd));        throw new ExitException(0);    }}
782929fa9bc2b3b0a6349ebe6aba70d377c440b51715008ab760d4a08dfb8389
repository
private void repository(CliRequest cliRequest) throws Exception
{    if (cliRequest.commandLine.hasOption(CLIManager.LEGACY_LOCAL_REPOSITORY) || Boolean.getBoolean("maven.legacyLocalRepo")) {        cliRequest.request.setUseLegacyLocalRepository(true);    }}
490983956dc77055c3a317728fd08e1c7395a4dfa0f8d08118ee293c7989f6c9
execute
private int execute(CliRequest cliRequest) throws MavenExecutionRequestPopulationException
{    MavenExecutionRequest request = executionRequestPopulator.populateDefaults(cliRequest.request);    eventSpyDispatcher.onEvent(request);    MavenExecutionResult result = maven.execute(request);    eventSpyDispatcher.onEvent(result);    eventSpyDispatcher.close();    if (result.hasExceptions()) {        ExceptionHandler handler = new DefaultExceptionHandler();        Map<String, String> references = new LinkedHashMap<>();        MavenProject project = null;        for (Throwable exception : result.getExceptions()) {            ExceptionSummary summary = handler.handleException(exception);            logSummary(summary, references, "", cliRequest.showErrors);            if (project == null && exception instanceof LifecycleExecutionException) {                project = ((LifecycleExecutionException) exception).getProject();            }        }        slf4jLogger.error("");        if (!cliRequest.showErrors) {            slf4jLogger.error("To see the full stack trace of the errors, re-run Maven with the {} switch.", buffer().strong("-e"));        }        if (!slf4jLogger.isDebugEnabled()) {            slf4jLogger.error("Re-run Maven using the {} switch to enable full debug logging.", buffer().strong("-X"));        }        if (!references.isEmpty()) {            slf4jLogger.error("");            slf4jLogger.error("For more information about the errors and possible solutions" + ", please read the following articles:");            for (Map.Entry<String, String> entry : references.entrySet()) {                slf4jLogger.error("{} {}", buffer().strong(entry.getValue()), entry.getKey());            }        }        if (project != null && !project.equals(result.getTopologicallySortedProjects().get(0))) {            slf4jLogger.error("");            slf4jLogger.error("After correcting the problems, you can resume the build with the command");            slf4jLogger.error(buffer().a("  ").strong("mvn <args> -rf " + getResumeFrom(result.getTopologicallySortedProjects(), project)).toString());        }        if (MavenExecutionRequest.REACTOR_FAIL_NEVER.equals(cliRequest.request.getReactorFailureBehavior())) {            slf4jLogger.info("Build failures were ignored.");            return 0;        } else {            return 1;        }    } else {        return 0;    }}
cd1985bc5bf0bd362ce69cf9faac122b180d1b1cb33216d47ef9f29a00eecca1
getResumeFrom
private String getResumeFrom(List<MavenProject> mavenProjects, MavenProject failedProject)
{    for (MavenProject buildProject : mavenProjects) {        if (failedProject.getArtifactId().equals(buildProject.getArtifactId()) && !failedProject.equals(buildProject)) {            return failedProject.getGroupId() + ":" + failedProject.getArtifactId();        }    }    return ":" + failedProject.getArtifactId();}
1b216df6c35dae3e5d2c97dbe1a926cbc22f51d7c7fa616c80e73a62dbf73030
logSummary
private void logSummary(ExceptionSummary summary, Map<String, String> references, String indent, boolean showErrors)
{    String referenceKey = "";    if (StringUtils.isNotEmpty(summary.getReference())) {        referenceKey = references.get(summary.getReference());        if (referenceKey == null) {            referenceKey = "[Help " + (references.size() + 1) + "]";            references.put(summary.getReference(), referenceKey);        }    }    String msg = summary.getMessage();    if (StringUtils.isNotEmpty(referenceKey)) {        if (msg.indexOf('\n') < 0) {            msg += " -> " + buffer().strong(referenceKey);        } else {            msg += "\n-> " + buffer().strong(referenceKey);        }    }    String[] lines = msg.split("(\r\n)|(\r)|(\n)");    String currentColor = "";    for (int i = 0; i < lines.length; i++) {                String line = currentColor + lines[i];                Matcher matcher = LAST_ANSI_SEQUENCE.matcher(line);        String nextColor = "";        if (matcher.find()) {            nextColor = matcher.group(1);            if (ANSI_RESET.equals(nextColor)) {                                nextColor = "";            }        }                line = indent + line + ("".equals(nextColor) ? "" : ANSI_RESET);        if ((i == lines.length - 1) && (showErrors || (summary.getException() instanceof InternalErrorException))) {            slf4jLogger.error(line, summary.getException());        } else {            slf4jLogger.error(line);        }        currentColor = nextColor;    }    indent += "  ";    for (ExceptionSummary child : summary.getChildren()) {        logSummary(child, references, indent, showErrors);    }}
58c797775c5f58479968ff3365cf8daa63e762497a214704406bce2c86afb4e6
configure
private void configure(CliRequest cliRequest) throws Exception
{                            cliRequest.request.setEventSpyDispatcher(eventSpyDispatcher);                                int userSuppliedConfigurationProcessorCount = configurationProcessors.size() - 1;    if (userSuppliedConfigurationProcessorCount == 0) {                                        configurationProcessors.get(SettingsXmlConfigurationProcessor.HINT).process(cliRequest);    } else if (userSuppliedConfigurationProcessorCount == 1) {                for (Entry<String, ConfigurationProcessor> entry : configurationProcessors.entrySet()) {            String hint = entry.getKey();            if (!hint.equals(SettingsXmlConfigurationProcessor.HINT)) {                ConfigurationProcessor configurationProcessor = entry.getValue();                configurationProcessor.process(cliRequest);            }        }    } else if (userSuppliedConfigurationProcessorCount > 1) {                                StringBuilder sb = new StringBuilder(String.format("\nThere can only be one user supplied ConfigurationProcessor, there are %s:\n\n", userSuppliedConfigurationProcessorCount));        for (Entry<String, ConfigurationProcessor> entry : configurationProcessors.entrySet()) {            String hint = entry.getKey();            if (!hint.equals(SettingsXmlConfigurationProcessor.HINT)) {                ConfigurationProcessor configurationProcessor = entry.getValue();                sb.append(String.format("%s\n", configurationProcessor.getClass().getName()));            }        }        sb.append("\n");        throw new Exception(sb.toString());    }}
742a1cc9e609bd0bb3113753bef89a1891ab3628ce14d4f297bf5c228629aafc
toolchains
 void toolchains(CliRequest cliRequest) throws Exception
{    File userToolchainsFile;    if (cliRequest.commandLine.hasOption(CLIManager.ALTERNATE_USER_TOOLCHAINS)) {        userToolchainsFile = new File(cliRequest.commandLine.getOptionValue(CLIManager.ALTERNATE_USER_TOOLCHAINS));        userToolchainsFile = resolveFile(userToolchainsFile, cliRequest.workingDirectory);        if (!userToolchainsFile.isFile()) {            throw new FileNotFoundException("The specified user toolchains file does not exist: " + userToolchainsFile);        }    } else {        userToolchainsFile = DEFAULT_USER_TOOLCHAINS_FILE;    }    File globalToolchainsFile;    if (cliRequest.commandLine.hasOption(CLIManager.ALTERNATE_GLOBAL_TOOLCHAINS)) {        globalToolchainsFile = new File(cliRequest.commandLine.getOptionValue(CLIManager.ALTERNATE_GLOBAL_TOOLCHAINS));        globalToolchainsFile = resolveFile(globalToolchainsFile, cliRequest.workingDirectory);        if (!globalToolchainsFile.isFile()) {            throw new FileNotFoundException("The specified global toolchains file does not exist: " + globalToolchainsFile);        }    } else {        globalToolchainsFile = DEFAULT_GLOBAL_TOOLCHAINS_FILE;    }    cliRequest.request.setGlobalToolchainsFile(globalToolchainsFile);    cliRequest.request.setUserToolchainsFile(userToolchainsFile);    DefaultToolchainsBuildingRequest toolchainsRequest = new DefaultToolchainsBuildingRequest();    if (globalToolchainsFile.isFile()) {        toolchainsRequest.setGlobalToolchainsSource(new FileSource(globalToolchainsFile));    }    if (userToolchainsFile.isFile()) {        toolchainsRequest.setUserToolchainsSource(new FileSource(userToolchainsFile));    }    eventSpyDispatcher.onEvent(toolchainsRequest);    slf4jLogger.debug("Reading global toolchains from {}", getLocation(toolchainsRequest.getGlobalToolchainsSource(), globalToolchainsFile));    slf4jLogger.debug("Reading user toolchains from {}", getLocation(toolchainsRequest.getUserToolchainsSource(), userToolchainsFile));    ToolchainsBuildingResult toolchainsResult = toolchainsBuilder.build(toolchainsRequest);    eventSpyDispatcher.onEvent(toolchainsResult);    executionRequestPopulator.populateFromToolchains(cliRequest.request, toolchainsResult.getEffectiveToolchains());    if (!toolchainsResult.getProblems().isEmpty() && slf4jLogger.isWarnEnabled()) {        slf4jLogger.warn("");        slf4jLogger.warn("Some problems were encountered while building the effective toolchains");        for (Problem problem : toolchainsResult.getProblems()) {            slf4jLogger.warn("{} @ {}", problem.getMessage(), problem.getLocation());        }        slf4jLogger.warn("");    }}
a78c77a2d4185fb4d7f9466ce597491be45c5cd469b70386087031ed5f5dd1ea
getLocation
private Object getLocation(Source source, File defaultLocation)
{    if (source != null) {        return source.getLocation();    }    return defaultLocation;}
9b1b06a086ce692c827f246ea340a276e2a864cc4bb88007e8e79c9b45834a6b
populateRequest
private MavenExecutionRequest populateRequest(CliRequest cliRequest)
{    return populateRequest(cliRequest, cliRequest.request);}
6f9c56c849ec4180b01e4f22fed55a92e5c9dd809577c430683d6d91555833ff
populateRequest
private MavenExecutionRequest populateRequest(CliRequest cliRequest, MavenExecutionRequest request)
{    CommandLine commandLine = cliRequest.commandLine;    String workingDirectory = cliRequest.workingDirectory;    boolean quiet = cliRequest.quiet;    boolean showErrors = cliRequest.showErrors;    String[] deprecatedOptions = { "up", "npu", "cpu", "npr" };    for (String deprecatedOption : deprecatedOptions) {        if (commandLine.hasOption(deprecatedOption)) {            slf4jLogger.warn("Command line option -{} is deprecated and will be removed in future Maven versions.", deprecatedOption);        }    }    if (commandLine.hasOption(CLIManager.BATCH_MODE)) {        request.setInteractiveMode(false);    }    boolean noSnapshotUpdates = false;    if (commandLine.hasOption(CLIManager.SUPRESS_SNAPSHOT_UPDATES)) {        noSnapshotUpdates = true;    }                List<String> goals = commandLine.getArgList();    boolean recursive = true;        String reactorFailureBehaviour = MavenExecutionRequest.REACTOR_FAIL_FAST;    if (commandLine.hasOption(CLIManager.NON_RECURSIVE)) {        recursive = false;    }    if (commandLine.hasOption(CLIManager.FAIL_FAST)) {        reactorFailureBehaviour = MavenExecutionRequest.REACTOR_FAIL_FAST;    } else if (commandLine.hasOption(CLIManager.FAIL_AT_END)) {        reactorFailureBehaviour = MavenExecutionRequest.REACTOR_FAIL_AT_END;    } else if (commandLine.hasOption(CLIManager.FAIL_NEVER)) {        reactorFailureBehaviour = MavenExecutionRequest.REACTOR_FAIL_NEVER;    }    if (commandLine.hasOption(CLIManager.OFFLINE)) {        request.setOffline(true);    }    boolean updateSnapshots = false;    if (commandLine.hasOption(CLIManager.UPDATE_SNAPSHOTS)) {        updateSnapshots = true;    }    String globalChecksumPolicy = null;    if (commandLine.hasOption(CLIManager.CHECKSUM_FAILURE_POLICY)) {        globalChecksumPolicy = MavenExecutionRequest.CHECKSUM_POLICY_FAIL;    } else if (commandLine.hasOption(CLIManager.CHECKSUM_WARNING_POLICY)) {        globalChecksumPolicy = MavenExecutionRequest.CHECKSUM_POLICY_WARN;    }    File baseDirectory = new File(workingDirectory, "").getAbsoluteFile();                List<String> activeProfiles = new ArrayList<>();    List<String> inactiveProfiles = new ArrayList<>();    if (commandLine.hasOption(CLIManager.ACTIVATE_PROFILES)) {        String[] profileOptionValues = commandLine.getOptionValues(CLIManager.ACTIVATE_PROFILES);        if (profileOptionValues != null) {            for (String profileOptionValue : profileOptionValues) {                StringTokenizer profileTokens = new StringTokenizer(profileOptionValue, ",");                while (profileTokens.hasMoreTokens()) {                    String profileAction = profileTokens.nextToken().trim();                    if (profileAction.startsWith("-") || profileAction.startsWith("!")) {                        inactiveProfiles.add(profileAction.substring(1));                    } else if (profileAction.startsWith("+")) {                        activeProfiles.add(profileAction.substring(1));                    } else {                        activeProfiles.add(profileAction);                    }                }            }        }    }    TransferListener transferListener;    if (quiet || cliRequest.commandLine.hasOption(CLIManager.NO_TRANSFER_PROGRESS)) {        transferListener = new QuietMavenTransferListener();    } else if (request.isInteractiveMode() && !cliRequest.commandLine.hasOption(CLIManager.LOG_FILE)) {                                        transferListener = getConsoleTransferListener(cliRequest.commandLine.hasOption(CLIManager.DEBUG));    } else {        transferListener = getBatchTransferListener();    }    ExecutionListener executionListener = new ExecutionEventLogger();    if (eventSpyDispatcher != null) {        executionListener = eventSpyDispatcher.chainListener(executionListener);    }    String alternatePomFile = null;    if (commandLine.hasOption(CLIManager.ALTERNATE_POM_FILE)) {        alternatePomFile = commandLine.getOptionValue(CLIManager.ALTERNATE_POM_FILE);    }    request.setBaseDirectory(baseDirectory).setGoals(goals).setSystemProperties(cliRequest.systemProperties).setUserProperties(cliRequest.userProperties).setReactorFailureBehavior(    reactorFailureBehaviour).setRecursive(    recursive).setShowErrors(    showErrors).addActiveProfiles(    activeProfiles).addInactiveProfiles(    inactiveProfiles).setExecutionListener(executionListener).setTransferListener(    transferListener).setUpdateSnapshots(    updateSnapshots).setNoSnapshotUpdates(    noSnapshotUpdates).setGlobalChecksumPolicy(    globalChecksumPolicy).setMultiModuleProjectDirectory(cliRequest.multiModuleProjectDirectory);    if (alternatePomFile != null) {        File pom = resolveFile(new File(alternatePomFile), workingDirectory);        if (pom.isDirectory()) {            pom = new File(pom, "pom.xml");        }        request.setPom(pom);    } else if (modelProcessor != null) {        File pom = modelProcessor.locatePom(baseDirectory);        if (pom.isFile()) {            request.setPom(pom);        }    }    if ((request.getPom() != null) && (request.getPom().getParentFile() != null)) {        request.setBaseDirectory(request.getPom().getParentFile());    }    if (commandLine.hasOption(CLIManager.RESUME_FROM)) {        request.setResumeFrom(commandLine.getOptionValue(CLIManager.RESUME_FROM));    }    if (commandLine.hasOption(CLIManager.PROJECT_LIST)) {        String[] projectOptionValues = commandLine.getOptionValues(CLIManager.PROJECT_LIST);        List<String> inclProjects = new ArrayList<>();        List<String> exclProjects = new ArrayList<>();        if (projectOptionValues != null) {            for (String projectOptionValue : projectOptionValues) {                StringTokenizer projectTokens = new StringTokenizer(projectOptionValue, ",");                while (projectTokens.hasMoreTokens()) {                    String projectAction = projectTokens.nextToken().trim();                    if (projectAction.startsWith("-") || projectAction.startsWith("!")) {                        exclProjects.add(projectAction.substring(1));                    } else if (projectAction.startsWith("+")) {                        inclProjects.add(projectAction.substring(1));                    } else {                        inclProjects.add(projectAction);                    }                }            }        }        request.setSelectedProjects(inclProjects);        request.setExcludedProjects(exclProjects);    }    if (commandLine.hasOption(CLIManager.ALSO_MAKE) && !commandLine.hasOption(CLIManager.ALSO_MAKE_DEPENDENTS)) {        request.setMakeBehavior(MavenExecutionRequest.REACTOR_MAKE_UPSTREAM);    } else if (!commandLine.hasOption(CLIManager.ALSO_MAKE) && commandLine.hasOption(CLIManager.ALSO_MAKE_DEPENDENTS)) {        request.setMakeBehavior(MavenExecutionRequest.REACTOR_MAKE_DOWNSTREAM);    } else if (commandLine.hasOption(CLIManager.ALSO_MAKE) && commandLine.hasOption(CLIManager.ALSO_MAKE_DEPENDENTS)) {        request.setMakeBehavior(MavenExecutionRequest.REACTOR_MAKE_BOTH);    }    String localRepoProperty = request.getUserProperties().getProperty(MavenCli.LOCAL_REPO_PROPERTY);    if (localRepoProperty == null) {        localRepoProperty = request.getSystemProperties().getProperty(MavenCli.LOCAL_REPO_PROPERTY);    }    if (localRepoProperty != null) {        request.setLocalRepositoryPath(localRepoProperty);    }    request.setCacheNotFound(true);    request.setCacheTransferError(false);                                    final String threadConfiguration = commandLine.hasOption(CLIManager.THREADS) ? commandLine.getOptionValue(CLIManager.THREADS) : null;    if (threadConfiguration != null) {                                request.setBuilderId("multithreaded");        if (threadConfiguration.contains("C")) {            request.setDegreeOfConcurrency(calculateDegreeOfConcurrencyWithCoreMultiplier(threadConfiguration));        } else {            request.setDegreeOfConcurrency(Integer.valueOf(threadConfiguration));        }    }        if (commandLine.hasOption(CLIManager.BUILDER)) {        request.setBuilderId(commandLine.getOptionValue(CLIManager.BUILDER));    }    return request;}
d9235492f19d4267685073537ca96bcf88af02c0767dc43bcb1371b29b660ece
calculateDegreeOfConcurrencyWithCoreMultiplier
 int calculateDegreeOfConcurrencyWithCoreMultiplier(String threadConfiguration)
{    int procs = Runtime.getRuntime().availableProcessors();    return (int) (Float.valueOf(threadConfiguration.replace("C", "")) * procs);}
dda86b27e6989cf71f82e41da2d76548adabb9f29626d5870a73e56b31d83822
resolveFile
 static File resolveFile(File file, String workingDirectory)
{    if (file == null) {        return null;    } else if (file.isAbsolute()) {        return file;    } else if (file.getPath().startsWith(File.separator)) {                return file.getAbsoluteFile();    } else {        return new File(workingDirectory, file.getPath()).getAbsoluteFile();    }}
71ad7c564f99bde49ca72618b22a27051c52c745aeba182bb684cb33083da780
populateProperties
 static void populateProperties(CommandLine commandLine, Properties systemProperties, Properties userProperties)
{    EnvironmentUtils.addEnvVars(systemProperties);    if (commandLine.hasOption(CLIManager.SET_SYSTEM_PROPERTY)) {        String[] defStrs = commandLine.getOptionValues(CLIManager.SET_SYSTEM_PROPERTY);        if (defStrs != null) {            for (String defStr : defStrs) {                setCliProperty(defStr, userProperties);            }        }    }    SystemProperties.addSystemProperties(systemProperties);                    Properties buildProperties = CLIReportingUtils.getBuildProperties();    String mavenVersion = buildProperties.getProperty(CLIReportingUtils.BUILD_VERSION_PROPERTY);    systemProperties.setProperty("maven.version", mavenVersion);    String mavenBuildVersion = CLIReportingUtils.createMavenVersionString(buildProperties);    systemProperties.setProperty("maven.build.version", mavenBuildVersion);}
7a1c1b70eccf97b629bccbdaa2292dd1b80e14089cfd0cfcdd8e578e47e23cad
setCliProperty
private static void setCliProperty(String property, Properties properties)
{    String name;    String value;    int i = property.indexOf('=');    if (i <= 0) {        name = property.trim();        value = "true";    } else {        name = property.substring(0, i).trim();        value = property.substring(i + 1);    }    properties.setProperty(name, value);                    System.setProperty(name, value);}
53be8d2649d11807d566db11f6484358df41798014ece3e6c985f197cd414298
getConsoleTransferListener
protected TransferListener getConsoleTransferListener(boolean printResourceNames)
{    return new ConsoleMavenTransferListener(System.out, printResourceNames);}
ddd3385e151103b996be8179030dfbf7593673bc478ea5c1bc4d087e5fa35580
getBatchTransferListener
protected TransferListener getBatchTransferListener()
{    return new Slf4jMavenTransferListener();}
237877ee4c54437e9d81c26f4aa733e4207bffba6c37fd4182dc87fb85933c84
customizeContainer
protected void customizeContainer(PlexusContainer container)
{}
34ceec660b72ed22fc95ea99d6f7e516d7321c5586a6486562cb14464bde598e
createModelProcessor
protected ModelProcessor createModelProcessor(PlexusContainer container) throws ComponentLookupException
{    return container.lookup(ModelProcessor.class);}
6cf4267a75fbc6903d768d6b4f57cfdc6705921ceaadea3206d75307de419557
getScaleUnit
public static ScaleUnit getScaleUnit(long size)
{    Validate.isTrue(size >= 0L, "file size cannot be negative: %s", size);    if (size >= GIGABYTE.bytes()) {        return GIGABYTE;    } else if (size >= MEGABYTE.bytes()) {        return MEGABYTE;    } else if (size >= KILOBYTE.bytes()) {        return KILOBYTE;    } else {        return BYTE;    }}
7ca9877bf758433d45d868bf2eb9822b85949eb45e472317aaad8c2b7fc66084
bytes
public long bytes()
{    return 1L;}
c1bc565f4b453cda2306ff92ec842a25099fe3275f219b0b258dc7ec898ca227
symbol
public String symbol()
{    return "B";}
7ca9877bf758433d45d868bf2eb9822b85949eb45e472317aaad8c2b7fc66084
bytes
public long bytes()
{    return 1000L;}
c1bc565f4b453cda2306ff92ec842a25099fe3275f219b0b258dc7ec898ca227
symbol
public String symbol()
{    return "kB";}
7ca9877bf758433d45d868bf2eb9822b85949eb45e472317aaad8c2b7fc66084
bytes
public long bytes()
{    return KILOBYTE.bytes() * KILOBYTE.bytes();}
c1bc565f4b453cda2306ff92ec842a25099fe3275f219b0b258dc7ec898ca227
symbol
public String symbol()
{    return "MB";}
7ca9877bf758433d45d868bf2eb9822b85949eb45e472317aaad8c2b7fc66084
bytes
public long bytes()
{    return MEGABYTE.bytes() * KILOBYTE.bytes();}
c1bc565f4b453cda2306ff92ec842a25099fe3275f219b0b258dc7ec898ca227
symbol
public String symbol()
{    return "GB";}
9112e2c53c30d9df4dadafba3630708a9ee0fa55a91ac8e8d26cf1eb8a362eef
format
public String format(long size)
{    return format(size, null);}
b47bd2c09d0d8fa706022647ca04c24f2b0394216e88a5b3b5bbb84c319861c8
format
public String format(long size, ScaleUnit unit)
{    return format(size, unit, false);}
3ff1d25a1c23c98f6deaa62571f553515616840e860b336fd15368f630cad573
format
public String format(long size, ScaleUnit unit, boolean omitSymbol)
{    Validate.isTrue(size >= 0L, "file size cannot be negative: %s", size);    if (unit == null) {        unit = ScaleUnit.getScaleUnit(size);    }    double scaledSize = (double) size / unit.bytes();    String scaledSymbol = " " + unit.symbol();    if (omitSymbol) {        scaledSymbol = "";    }    if (unit == ScaleUnit.BYTE) {        return largeFormat.format(size) + scaledSymbol;    }    if (scaledSize < 0.05 || scaledSize >= 10.0) {        return largeFormat.format(scaledSize) + scaledSymbol;    } else {        return smallFormat.format(scaledSize) + scaledSymbol;    }}
d85e65300af450873b4515500d8b388dce8a6aeef5168fc791c0edb46765b5eb
formatProgress
public String formatProgress(long progressedSize, long size)
{    Validate.isTrue(progressedSize >= 0L, "progressed file size cannot be negative: %s", progressedSize);    Validate.isTrue(size >= 0L && progressedSize <= size || size < 0L, "progressed file size cannot be greater than size: %s > %s", progressedSize, size);    if (size >= 0L && progressedSize != size) {        ScaleUnit unit = ScaleUnit.getScaleUnit(size);        String formattedProgressedSize = format(progressedSize, unit, true);        String formattedSize = format(size, unit);        return formattedProgressedSize + "/" + formattedSize;    } else {        return format(progressedSize);    }}
0c181f0e24dfb04df8d45e00c8f7ffd61164151738ffba693969dcd2e38ca8b4
transferInitiated
public void transferInitiated(TransferEvent event)
{    String action = event.getRequestType() == TransferEvent.RequestType.PUT ? "Uploading" : "Downloading";    String direction = event.getRequestType() == TransferEvent.RequestType.PUT ? "to" : "from";    TransferResource resource = event.getResource();    StringBuilder message = new StringBuilder();    message.append(action).append(' ').append(direction).append(' ').append(resource.getRepositoryId());    message.append(": ");    message.append(resource.getRepositoryUrl()).append(resource.getResourceName());    out.println(message.toString());}
b135f67d691bebb38e5ed883ebf21d1f68ff1abc420b085d1b6834c2cb97786f
transferCorrupted
public void transferCorrupted(TransferEvent event) throws TransferCancelledException
{    TransferResource resource = event.getResource();        out.println("[WARNING] " + event.getException().getMessage() + " from " + resource.getRepositoryId() + " for " + resource.getRepositoryUrl() + resource.getResourceName());}
3aface5249cde915569e4ba3538363b21012cd5266e5b84f94d68d07aa3e3c99
transferSucceeded
public void transferSucceeded(TransferEvent event)
{    String action = (event.getRequestType() == TransferEvent.RequestType.PUT ? "Uploaded" : "Downloaded");    String direction = event.getRequestType() == TransferEvent.RequestType.PUT ? "to" : "from";    TransferResource resource = event.getResource();    long contentLength = event.getTransferredBytes();    FileSizeFormat format = new FileSizeFormat(Locale.ENGLISH);    StringBuilder message = new StringBuilder();    message.append(action).append(' ').append(direction).append(' ').append(resource.getRepositoryId());    message.append(": ");    message.append(resource.getRepositoryUrl()).append(resource.getResourceName());    message.append(" (").append(format.format(contentLength));    long duration = System.currentTimeMillis() - resource.getTransferStartTime();    if (duration > 0L) {        double bytesPerSecond = contentLength / (duration / 1000.0);        message.append(" at ").append(format.format((long) bytesPerSecond)).append("/s");    }    message.append(')');    out.println(message.toString());}
bd93a670b4168f2d8b487fc2501c5b0ab8438c7b2e921fd220ebb3663e1777ea
transferInitiated
public synchronized void transferInitiated(TransferEvent event)
{    overridePreviousTransfer(event);    super.transferInitiated(event);}
ac8bc2408be07780d275cf43f4f8b7e1a0eee32b16b1d1b7e4c5be3820ebd477
transferCorrupted
public synchronized void transferCorrupted(TransferEvent event) throws TransferCancelledException
{    overridePreviousTransfer(event);    super.transferCorrupted(event);}
758f5746b30c8bdbb1d171d1bd6a2a938af2e826d3d3a2f7c95a9860d2f53248
transferProgressed
public synchronized void transferProgressed(TransferEvent event) throws TransferCancelledException
{    TransferResource resource = event.getResource();    transfers.put(resource, event.getTransferredBytes());    StringBuilder buffer = new StringBuilder(128);    buffer.append("Progress (").append(transfers.size()).append("): ");    synchronized (transfers) {        Iterator<Map.Entry<TransferResource, Long>> entries = transfers.entrySet().iterator();        while (entries.hasNext()) {            Map.Entry<TransferResource, Long> entry = entries.next();            long total = entry.getKey().getContentLength();            Long complete = entry.getValue();            buffer.append(getStatus(entry.getKey().getResourceName(), complete, total));            if (entries.hasNext()) {                buffer.append(" | ");            }        }    }    int pad = lastLength - buffer.length();    lastLength = buffer.length();    pad(buffer, pad);    buffer.append('\r');    out.print(buffer);    out.flush();}
4fd071c813eddaad64b8ed6479f37760a8bff86240c45207901423a8600ced9c
getStatus
private String getStatus(String resourceName, long complete, long total)
{    FileSizeFormat format = new FileSizeFormat(Locale.ENGLISH);    StringBuilder status = new StringBuilder();    if (printResourceNames) {        status.append(StringUtils.substringAfterLast(resourceName, "/"));        status.append(" (");    }    status.append(format.formatProgress(complete, total));    if (printResourceNames) {        status.append(")");    }    return status.toString();}
df0177f0ce041406772304cf51561e8c3c10ae84ed943481d3fa3e6343e39dd3
pad
private void pad(StringBuilder buffer, int spaces)
{    String block = "                                        ";    while (spaces > 0) {        int n = Math.min(spaces, block.length());        buffer.append(block, 0, n);        spaces -= n;    }}
3ddb1865ad47385a9b399309a53b580db155b4f400ff3b7d2b416f4392d5f623
transferSucceeded
public synchronized void transferSucceeded(TransferEvent event)
{    transfers.remove(event.getResource());    overridePreviousTransfer(event);    super.transferSucceeded(event);}
c41360c95a0ac96dd3af4990e203f8858dc44283ecb534b42ae00225ad661ef4
transferFailed
public synchronized void transferFailed(TransferEvent event)
{    transfers.remove(event.getResource());    overridePreviousTransfer(event);    super.transferFailed(event);}
3ff8fe98388a3a18f78ec5b8f24228c42eea9777aa1452082c1a1008560be508
overridePreviousTransfer
private void overridePreviousTransfer(TransferEvent event)
{    if (lastLength > 0) {        StringBuilder buffer = new StringBuilder(128);        pad(buffer, lastLength);        buffer.append('\r');        out.print(buffer);        out.flush();        lastLength = 0;    }}
0c181f0e24dfb04df8d45e00c8f7ffd61164151738ffba693969dcd2e38ca8b4
transferInitiated
public void transferInitiated(TransferEvent event)
{    String action = event.getRequestType() == TransferEvent.RequestType.PUT ? "Uploading" : "Downloading";    String direction = event.getRequestType() == TransferEvent.RequestType.PUT ? "to" : "from";    TransferResource resource = event.getResource();    StringBuilder message = new StringBuilder();    message.append(action).append(' ').append(direction).append(' ').append(resource.getRepositoryId());    message.append(": ");    message.append(resource.getRepositoryUrl()).append(resource.getResourceName());    out.info(message.toString());}
b135f67d691bebb38e5ed883ebf21d1f68ff1abc420b085d1b6834c2cb97786f
transferCorrupted
public void transferCorrupted(TransferEvent event) throws TransferCancelledException
{    TransferResource resource = event.getResource();    out.warn("{} from {} for {}{}", event.getException().getMessage(), resource.getRepositoryId(), resource.getRepositoryUrl(), resource.getResourceName());}
3aface5249cde915569e4ba3538363b21012cd5266e5b84f94d68d07aa3e3c99
transferSucceeded
public void transferSucceeded(TransferEvent event)
{    String action = (event.getRequestType() == TransferEvent.RequestType.PUT ? "Uploaded" : "Downloaded");    String direction = event.getRequestType() == TransferEvent.RequestType.PUT ? "to" : "from";    TransferResource resource = event.getResource();    long contentLength = event.getTransferredBytes();    FileSizeFormat format = new FileSizeFormat(Locale.ENGLISH);    StringBuilder message = new StringBuilder();    message.append(action).append(' ').append(direction).append(' ').append(resource.getRepositoryId());    message.append(": ");    message.append(resource.getRepositoryUrl()).append(resource.getResourceName());    message.append(" (").append(format.format(contentLength));    long duration = System.currentTimeMillis() - resource.getTransferStartTime();    if (duration > 0L) {        double bytesPerSecond = contentLength / (duration / 1000.0);        message.append(" at ").append(format.format((long) bytesPerSecond)).append("/s");    }    message.append(')');    out.info(message.toString());}
7c1203297d6f00c7339a0f8eb5c3970de980476fea8d1f9ae49f44e151af83f4
init
public static void init()
{    SimpleLogger.init();    ILoggerFactory loggerFactory = LoggerFactory.getILoggerFactory();    if (loggerFactory instanceof SimpleLoggerFactory) {        ((SimpleLoggerFactory) loggerFactory).reset();    }}
8b14883896e9dbd16e433d8992a7e3362db19048b3a1baf1298796fbe5db7f6d
reset
public static void reset()
{    LoggerFactory.reset();}
3116ea2053d9de960ec3753eb07f3d243c370662aa1f0175ad357057c9ce5a52
main
public static void main(String[] args)
{    System.out.println("Hello World!");}
0726523a73bad537f74ac5912d840d3c7fe0c2e304fe52f26dedb3d2e7d7350f
suite
public static Test suite()
{    return new TestSuite(AppTest.class);}
5c5a643b0b44f81060e7ec9ff1ceeee39878cad6f6e30d97b8edc9289f010ead
testApp
public void testApp()
{    assertTrue(true);}
424f0692b82bb82439dc4eb1e3ddc86b626e6b156024b388b630a7943f38f510
execute
public void execute() throws MojoExecutionException, MojoFailureException
{    throw new MojoFailureException(this, "This mojo will always fail.", "This mojo is programmed to fail at all times, to express certain error-reporting functions.");}
8a71b1835a0936b6845d1253159a5ef65ff188240faa68ee983ded3df5e15459
getLog
public Log getLog()
{    return log;}
b3da3b921f2ec93483a8e7925f8983e33901c07c3eaa4c37a0447ec7113dac64
setLog
public void setLog(Log log)
{    this.log = log;}
424f0692b82bb82439dc4eb1e3ddc86b626e6b156024b388b630a7943f38f510
execute
public void execute() throws MojoExecutionException, MojoFailureException
{}
8a71b1835a0936b6845d1253159a5ef65ff188240faa68ee983ded3df5e15459
getLog
public Log getLog()
{    return log;}
b3da3b921f2ec93483a8e7925f8983e33901c07c3eaa4c37a0447ec7113dac64
setLog
public void setLog(Log log)
{    this.log = log;}
424f0692b82bb82439dc4eb1e3ddc86b626e6b156024b388b630a7943f38f510
execute
public void execute() throws MojoExecutionException, MojoFailureException
{    throw new MojoExecutionException("This is meant to fail.");}
8a71b1835a0936b6845d1253159a5ef65ff188240faa68ee983ded3df5e15459
getLog
public Log getLog()
{    return log;}
b3da3b921f2ec93483a8e7925f8983e33901c07c3eaa4c37a0447ec7113dac64
setLog
public void setLog(Log log)
{    this.log = log;}
424f0692b82bb82439dc4eb1e3ddc86b626e6b156024b388b630a7943f38f510
execute
public void execute() throws MojoExecutionException, MojoFailureException
{    throw new MojoExecutionException("This is meant to fail.");}
8a71b1835a0936b6845d1253159a5ef65ff188240faa68ee983ded3df5e15459
getLog
public Log getLog()
{    return log;}
b3da3b921f2ec93483a8e7925f8983e33901c07c3eaa4c37a0447ec7113dac64
setLog
public void setLog(Log log)
{    this.log = log;}
424f0692b82bb82439dc4eb1e3ddc86b626e6b156024b388b630a7943f38f510
execute
public void execute() throws MojoExecutionException, MojoFailureException
{}
8a71b1835a0936b6845d1253159a5ef65ff188240faa68ee983ded3df5e15459
getLog
public Log getLog()
{    return log;}
b3da3b921f2ec93483a8e7925f8983e33901c07c3eaa4c37a0447ec7113dac64
setLog
public void setLog(Log log)
{    this.log = log;}
424f0692b82bb82439dc4eb1e3ddc86b626e6b156024b388b630a7943f38f510
execute
public void execute() throws MojoExecutionException, MojoFailureException
{    mavenProjectHelper.attachArtifact(project, "pom", "classifier", project.getFile());    mavenProjectHelper.attachArtifact(project, "pom", "classifier", project.getFile());}
8a71b1835a0936b6845d1253159a5ef65ff188240faa68ee983ded3df5e15459
getLog
public Log getLog()
{    return log;}
b3da3b921f2ec93483a8e7925f8983e33901c07c3eaa4c37a0447ec7113dac64
setLog
public void setLog(Log log)
{    this.log = log;}
3116ea2053d9de960ec3753eb07f3d243c370662aa1f0175ad357057c9ce5a52
main
public static void main(String[] args)
{    System.out.println("Hello World!");}
0726523a73bad537f74ac5912d840d3c7fe0c2e304fe52f26dedb3d2e7d7350f
suite
public static Test suite()
{    return new TestSuite(AppTest.class);}
5c5a643b0b44f81060e7ec9ff1ceeee39878cad6f6e30d97b8edc9289f010ead
testApp
public void testApp()
{    assertTrue(true);}
424f0692b82bb82439dc4eb1e3ddc86b626e6b156024b388b630a7943f38f510
execute
public void execute() throws MojoExecutionException, MojoFailureException
{}
8a71b1835a0936b6845d1253159a5ef65ff188240faa68ee983ded3df5e15459
getLog
public Log getLog()
{    return log;}
b3da3b921f2ec93483a8e7925f8983e33901c07c3eaa4c37a0447ec7113dac64
setLog
public void setLog(Log log)
{    this.log = log;}
424f0692b82bb82439dc4eb1e3ddc86b626e6b156024b388b630a7943f38f510
execute
public void execute() throws MojoExecutionException, MojoFailureException
{    throw new MojoExecutionException("This is meant to fail.");}
8a71b1835a0936b6845d1253159a5ef65ff188240faa68ee983ded3df5e15459
getLog
public Log getLog()
{    return log;}
b3da3b921f2ec93483a8e7925f8983e33901c07c3eaa4c37a0447ec7113dac64
setLog
public void setLog(Log log)
{    this.log = log;}
3116ea2053d9de960ec3753eb07f3d243c370662aa1f0175ad357057c9ce5a52
main
public static void main(String[] args)
{    System.out.println("Hello World!");}
424f0692b82bb82439dc4eb1e3ddc86b626e6b156024b388b630a7943f38f510
execute
public void execute() throws MojoExecutionException, MojoFailureException
{    throw new MojoFailureException(this, "This mojo will always fail.", "This mojo is programmed to fail at all times, to express certain error-reporting functions.");}
8a71b1835a0936b6845d1253159a5ef65ff188240faa68ee983ded3df5e15459
getLog
public Log getLog()
{    return log;}
b3da3b921f2ec93483a8e7925f8983e33901c07c3eaa4c37a0447ec7113dac64
setLog
public void setLog(Log log)
{    this.log = log;}
3116ea2053d9de960ec3753eb07f3d243c370662aa1f0175ad357057c9ce5a52
main
public static void main(String[] args)
{    System.out.println("Hello World!");}
0726523a73bad537f74ac5912d840d3c7fe0c2e304fe52f26dedb3d2e7d7350f
suite
public static Test suite()
{    return new TestSuite(AppTest.class);}
5c5a643b0b44f81060e7ec9ff1ceeee39878cad6f6e30d97b8edc9289f010ead
testApp
public void testApp()
{    assertTrue(true);}
424f0692b82bb82439dc4eb1e3ddc86b626e6b156024b388b630a7943f38f510
execute
public void execute() throws MojoExecutionException, MojoFailureException
{}
8a71b1835a0936b6845d1253159a5ef65ff188240faa68ee983ded3df5e15459
getLog
public Log getLog()
{    return log;}
b3da3b921f2ec93483a8e7925f8983e33901c07c3eaa4c37a0447ec7113dac64
setLog
public void setLog(Log log)
{    this.log = log;}
424f0692b82bb82439dc4eb1e3ddc86b626e6b156024b388b630a7943f38f510
execute
public void execute() throws MojoExecutionException, MojoFailureException
{    throw new MojoExecutionException("This is meant to fail.");}
8a71b1835a0936b6845d1253159a5ef65ff188240faa68ee983ded3df5e15459
getLog
public Log getLog()
{    return log;}
b3da3b921f2ec93483a8e7925f8983e33901c07c3eaa4c37a0447ec7113dac64
setLog
public void setLog(Log log)
{    this.log = log;}
424f0692b82bb82439dc4eb1e3ddc86b626e6b156024b388b630a7943f38f510
execute
public void execute() throws MojoExecutionException, MojoFailureException
{    throw new MojoExecutionException("This is meant to fail.");}
8a71b1835a0936b6845d1253159a5ef65ff188240faa68ee983ded3df5e15459
getLog
public Log getLog()
{    return log;}
b3da3b921f2ec93483a8e7925f8983e33901c07c3eaa4c37a0447ec7113dac64
setLog
public void setLog(Log log)
{    this.log = log;}
424f0692b82bb82439dc4eb1e3ddc86b626e6b156024b388b630a7943f38f510
execute
public void execute() throws MojoExecutionException, MojoFailureException
{    throw new MojoExecutionException("THIS SHOULD NEVER BE CALLED.");}
8a71b1835a0936b6845d1253159a5ef65ff188240faa68ee983ded3df5e15459
getLog
public Log getLog()
{    return log;}
b3da3b921f2ec93483a8e7925f8983e33901c07c3eaa4c37a0447ec7113dac64
setLog
public void setLog(Log log)
{    this.log = log;}
3116ea2053d9de960ec3753eb07f3d243c370662aa1f0175ad357057c9ce5a52
main
public static void main(String[] args)
{    System.out.println("Hello World!");}
3116ea2053d9de960ec3753eb07f3d243c370662aa1f0175ad357057c9ce5a52
main
public static void main(String[] args)
{    System.out.println("Hello World!");}
0726523a73bad537f74ac5912d840d3c7fe0c2e304fe52f26dedb3d2e7d7350f
suite
public static Test suite()
{    return new TestSuite(AppTest.class);}
5c5a643b0b44f81060e7ec9ff1ceeee39878cad6f6e30d97b8edc9289f010ead
testApp
public void testApp()
{    assertTrue(true);}
3116ea2053d9de960ec3753eb07f3d243c370662aa1f0175ad357057c9ce5a52
main
public static void main(String[] args)
{    System.out.println("Hello World!");    StringUtils utils;}
0726523a73bad537f74ac5912d840d3c7fe0c2e304fe52f26dedb3d2e7d7350f
suite
public static Test suite()
{    return new TestSuite(AppTest.class);}
5c5a643b0b44f81060e7ec9ff1ceeee39878cad6f6e30d97b8edc9289f010ead
testApp
public void testApp()
{    assertTrue(true);}
d314e87ba803a60542f1873fbcddc19bc417583cb77ac0027d91052f9d28a48b
cleanArgsShouldRemoveWrongSurroundingQuotes
public void cleanArgsShouldRemoveWrongSurroundingQuotes()
{    String[] args = { "\"-Dfoo=bar", "\"-Dfoo2=bar two\"" };    String[] cleanArgs = CleanArgument.cleanArgs(args);    assertEquals(args.length, cleanArgs.length);    assertEquals("-Dfoo=bar", cleanArgs[0]);    assertEquals("-Dfoo2=bar two", cleanArgs[1]);}
84a94ece5142f5add73b3c7cea4258795fb3577ac9f15326c43afe7e72f74abf
testCleanArgsShouldNotTouchCorrectlyQuotedArgumentsUsingDoubleQuotes
public void testCleanArgsShouldNotTouchCorrectlyQuotedArgumentsUsingDoubleQuotes()
{    String information = "-Dinformation=\"The Information is important.\"";    String[] args = { information };    String[] cleanArgs = CleanArgument.cleanArgs(args);    assertEquals(args.length, cleanArgs.length);    assertEquals(information, cleanArgs[0]);}
3d1a9f674ac7359a4d6aac0aabb82238a4052bf862aa9c70437ed7fde3a066b9
testCleanArgsShouldNotTouchCorrectlyQuotedArgumentsUsingSingleQuotes
public void testCleanArgsShouldNotTouchCorrectlyQuotedArgumentsUsingSingleQuotes()
{    String information = "-Dinformation='The Information is important.'";    String[] args = { information };    String[] cleanArgs = CleanArgument.cleanArgs(args);    assertEquals(args.length, cleanArgs.length);    assertEquals(information, cleanArgs[0]);}
cb142a54a4d73294f66abd4dbd42dbc4316d656104827d838a1fb0734124a6ee
compare
public int compare(Option opt1, Option opt2)
{    return opt1.getOpt().compareToIgnoreCase(opt2.getOpt());}
eb75829d8b4ceba97ece3ae38fdb89a0e12821cf7e078d333bccb37d828da449
getOptions
public Collection<Option> getOptions()
{    List<Option> optList = new ArrayList<>(options.getOptions());    Collections.sort(optList, new OptionComparator());    return optList;}
25ccc747f79c05dffbad717780da7656238ae0ab4e4458522b016bb8ef30abbb
getOptionsAsHtml
public String getOptionsAsHtml()
{    StringBuilder sb = new StringBuilder(512);    boolean a = true;    sb.append("<table border='1' class='zebra-striped'><tr class='a'><th><b>Options</b></th><th><b>Description</b></th></tr>");    for (Option option : new CLIManagerExtension().getOptions()) {        a = !a;        sb.append("<tr class='").append(a ? 'a' : 'b').append("'><td><code>-<a name='");        sb.append(option.getOpt());        sb.append("'>");        sb.append(option.getOpt());        sb.append("</a>,--<a name='");        sb.append(option.getLongOpt());        sb.append("'>");        sb.append(option.getLongOpt());        sb.append("</a>");        if (option.hasArg()) {            if (option.hasArgName()) {                sb.append(" &lt;").append(option.getArgName()).append("&gt;");            } else {                sb.append(' ');            }        }        sb.append("</code></td><td>");        sb.append(option.getDescription());        sb.append("</td></tr>");        sb.append(LS);    }    sb.append("</table>");    return sb.toString();}
ea990e02019506c2678c54efe1757adb11ceb993c37ef2359139f2e048165b15
testOptionsAsHtml
public void testOptionsAsHtml() throws IOException
{    File options = new File("target/test-classes/options.html");    FileUtils.fileWrite(options, "UTF-8", getOptionsAsHtml());}
5ff0b8f7d2b080bcc6214fa5f91be74727145ea81cacb63a99c8d0f3106c089f
setup
public void setup()
{    cliManager = new CLIManager();}
37904a5111847cec3ebf1bf932e7b94c93e1fc8cb06a4c559e47ef5e9287664f
spacedOptions
public void spacedOptions() throws Exception
{    CommandLine cmdLine = cliManager.parse("-X -Dx=1 -D y=2 test".split(" "));    assertTrue(cmdLine.hasOption(CLIManager.DEBUG));    assertThat(cmdLine.getOptionValues(CLIManager.SET_SYSTEM_PROPERTY)[0], is("x=1"));    assertThat(cmdLine.getOptionValues(CLIManager.SET_SYSTEM_PROPERTY)[1], is("y=2"));}
448d23d48eec98325b923d13d8a65f439a6122c1dc45fb2d53346c77a620773e
testFormatDuration
public void testFormatDuration()
{    assertEquals("0.001 s", CLIReportingUtils.formatDuration(1));    assertEquals("0.999 s", CLIReportingUtils.formatDuration(1000 - 1));    assertEquals("1.000 s", CLIReportingUtils.formatDuration(1000));    assertEquals("59.999 s", CLIReportingUtils.formatDuration(60 * 1000 - 1));    assertEquals("01:00 min", CLIReportingUtils.formatDuration(60 * 1000));    assertEquals("59:59 min", CLIReportingUtils.formatDuration(60 * 60 * 1000 - 1));    assertEquals("01:00 h", CLIReportingUtils.formatDuration(60 * 60 * 1000));    assertEquals("23:59 h", CLIReportingUtils.formatDuration(24 * 60 * 60 * 1000 - 1));    assertEquals("1 d 00:00 h", CLIReportingUtils.formatDuration(24 * 60 * 60 * 1000));}
ca86f0db8b699367a1e071192b0ab724903096b25a11d522de42a85bae0700a9
setUp
public static void setUp()
{    MessageUtils.setColorEnabled(false);}
7bc01499962f9db4f29ce028fa1e575b4b5f7e9b37f763467d82ccb96ea15886
tearDown
public static void tearDown()
{    MessageUtils.setColorEnabled(true);}
2874f02240dc7dfd853424ca5fb69c8a653444f41249ec1a9af3ad862613a0e0
testProjectStarted
public void testProjectStarted()
{        Logger logger = mock(Logger.class);    when(logger.isInfoEnabled()).thenReturn(true);    executionEventLogger = new ExecutionEventLogger(logger);    ExecutionEvent event = mock(ExecutionEvent.class);    MavenProject project = mock(MavenProject.class);    when(project.getGroupId()).thenReturn("org.apache.maven");    when(project.getArtifactId()).thenReturn("maven-embedder");    when(project.getPackaging()).thenReturn("jar");    when(project.getName()).thenReturn("Apache Maven Embedder");    when(project.getVersion()).thenReturn("3.5.4-SNAPSHOT");    when(event.getProject()).thenReturn(project);        executionEventLogger.projectStarted(event);        InOrder inOrder = inOrder(logger);    inOrder.verify(logger).info("");    inOrder.verify(logger).info("------------------< org.apache.maven:maven-embedder >-------------------");    inOrder.verify(logger).info("Building Apache Maven Embedder 3.5.4-SNAPSHOT");    inOrder.verify(logger).info("--------------------------------[ jar ]---------------------------------");}
2230196ff90341641932178a3a1c342d5a4e09e76ecbbba3c6ce108913a7f43d
testProjectStartedOverflow
public void testProjectStartedOverflow()
{        Logger logger = mock(Logger.class);    when(logger.isInfoEnabled()).thenReturn(true);    executionEventLogger = new ExecutionEventLogger(logger);    ExecutionEvent event = mock(ExecutionEvent.class);    MavenProject project = mock(MavenProject.class);    when(project.getGroupId()).thenReturn("org.apache.maven.plugins.overflow");    when(project.getArtifactId()).thenReturn("maven-project-info-reports-plugin");    when(project.getPackaging()).thenReturn("maven-plugin");    when(project.getName()).thenReturn("Apache Maven Project Info Reports Plugin");    when(project.getVersion()).thenReturn("3.0.0-SNAPSHOT");    when(event.getProject()).thenReturn(project);        executionEventLogger.projectStarted(event);        InOrder inOrder = inOrder(logger);    inOrder.verify(logger).info("");    inOrder.verify(logger).info("--< org.apache.maven.plugins.overflow:maven-project-info-reports-plugin >--");    inOrder.verify(logger).info("Building Apache Maven Project Info Reports Plugin 3.0.0-SNAPSHOT");    inOrder.verify(logger).info("----------------------------[ maven-plugin ]----------------------------");}
4adaefafec562702d887f5960a1408e5f9d1add92c42fab7cb857d701c42d2a2
setUp
public void setUp()
{    cli = new MavenCli();    origBasedir = System.getProperty(MavenCli.MULTIMODULE_PROJECT_DIRECTORY);}
c6aaebb5a52567751db8dc8e1cb9dd4a4e582ef964a374b376c6a04f741802dc
tearDown
public void tearDown() throws Exception
{    if (origBasedir != null) {        System.setProperty(MavenCli.MULTIMODULE_PROJECT_DIRECTORY, origBasedir);    } else {        System.getProperties().remove(MavenCli.MULTIMODULE_PROJECT_DIRECTORY);    }}
4e6186e06e4038721c1f51f8b2be1a2d74ecf22de1ad58d98e2845fe036eef71
testCalculateDegreeOfConcurrencyWithCoreMultiplier
public void testCalculateDegreeOfConcurrencyWithCoreMultiplier()
{    int cores = Runtime.getRuntime().availableProcessors();        assertEquals((int) (cores * 2.2), cli.calculateDegreeOfConcurrencyWithCoreMultiplier("C2.2"));        assertEquals((int) (cores * 2.2), cli.calculateDegreeOfConcurrencyWithCoreMultiplier("2.2C"));    try {        cli.calculateDegreeOfConcurrencyWithCoreMultiplier("CXXX");        fail("Should have failed with a NumberFormatException");    } catch (NumberFormatException e) {        }}
f7a03ca86e85c64e7157487734074cfeb0e88d192e383fd1300a56c07e9a0296
testMavenConfig
public void testMavenConfig() throws Exception
{    System.setProperty(MavenCli.MULTIMODULE_PROJECT_DIRECTORY, new File("src/test/projects/config").getCanonicalPath());    CliRequest request = new CliRequest(new String[0], null);        cli.initialize(request);    cli.cli(request);    assertEquals("multithreaded", request.commandLine.getOptionValue(CLIManager.BUILDER));    assertEquals("8", request.commandLine.getOptionValue(CLIManager.THREADS));        request = new CliRequest(new String[] { "--builder", "foobar" }, null);    cli.cli(request);    assertEquals("foobar", request.commandLine.getOptionValue("builder"));}
9cb773f3040f5ee4b32eeaea541fca051e1f2580747ad8b5005f77e5404f36e6
testMavenConfigInvalid
public void testMavenConfigInvalid() throws Exception
{    System.setProperty(MavenCli.MULTIMODULE_PROJECT_DIRECTORY, new File("src/test/projects/config-illegal").getCanonicalPath());    CliRequest request = new CliRequest(new String[0], null);    cli.initialize(request);    try {        cli.cli(request);        fail();    } catch (ParseException expected) {    }}
ca8480a9199a9dd4c47c94e97e9a86da11a3efb581a7ae9fec3668d029858b45
testMVNConfigurationThreadCanBeOverwrittenViaCommandLine
public void testMVNConfigurationThreadCanBeOverwrittenViaCommandLine() throws Exception
{    System.setProperty(MavenCli.MULTIMODULE_PROJECT_DIRECTORY, new File("src/test/projects/mavenConfigProperties").getCanonicalPath());    CliRequest request = new CliRequest(new String[] { "-T", "5" }, null);    cli.initialize(request);        cli.cli(request);    assertEquals("5", request.commandLine.getOptionValue(CLIManager.THREADS));}
568bbed357ebf09056da2ec33b1b4dcf1ed09027bcf9d8f37eed642dcd52256b
testMVNConfigurationDefinedPropertiesCanBeOverwrittenViaCommandLine
public void testMVNConfigurationDefinedPropertiesCanBeOverwrittenViaCommandLine() throws Exception
{    System.setProperty(MavenCli.MULTIMODULE_PROJECT_DIRECTORY, new File("src/test/projects/mavenConfigProperties").getCanonicalPath());    CliRequest request = new CliRequest(new String[] { "-Drevision=8.1.0" }, null);    cli.initialize(request);        cli.cli(request);    cli.properties(request);    String revision = System.getProperty("revision");    assertEquals("8.1.0", revision);}
5c0111d3132057f5a44a4f80f440088ae37ecf0d218afe811da8ac55026970cc
testMVNConfigurationCLIRepeatedPropertiesLastWins
public void testMVNConfigurationCLIRepeatedPropertiesLastWins() throws Exception
{    System.setProperty(MavenCli.MULTIMODULE_PROJECT_DIRECTORY, new File("src/test/projects/mavenConfigProperties").getCanonicalPath());    CliRequest request = new CliRequest(new String[] { "-Drevision=8.1.0", "-Drevision=8.2.0" }, null);    cli.initialize(request);        cli.cli(request);    cli.properties(request);    String revision = System.getProperty("revision");    assertEquals("8.2.0", revision);}
aff1f7763a79f903438f74329ca0a10a441979f97b1f0fc78410bd33146c5e89
testMVNConfigurationFunkyArguments
public void testMVNConfigurationFunkyArguments() throws Exception
{    System.setProperty(MavenCli.MULTIMODULE_PROJECT_DIRECTORY, new File("src/test/projects/mavenConfigProperties").getCanonicalPath());    CliRequest request = new CliRequest(new String[] { "-Drevision=8.1.0", "--file=-Dpom.xml", "\"-Dfoo=bar ", "\"-Dfoo2=bar two\"", "-Drevision=8.2.0" }, null);    cli.initialize(request);        cli.cli(request);    cli.properties(request);    String revision = System.getProperty("revision");    assertEquals("8.2.0", revision);    assertEquals("bar ", request.getSystemProperties().getProperty("foo"));    assertEquals("bar two", request.getSystemProperties().getProperty("foo2"));    assertEquals("-Dpom.xml", request.getCommandLine().getOptionValue(CLIManager.ALTERNATE_POM_FILE));}
4d3f1c67f9f770da8a4961c0e3861114f53a4c71456dfdb59d47f832b8541649
testStyleColors
public void testStyleColors() throws Exception
{    assumeTrue("ANSI not supported", MessageUtils.isColorEnabled());    CliRequest request;    MessageUtils.setColorEnabled(true);    request = new CliRequest(new String[] { "-B" }, null);    cli.cli(request);    cli.properties(request);    cli.logging(request);    assertFalse(MessageUtils.isColorEnabled());    MessageUtils.setColorEnabled(true);    request = new CliRequest(new String[] { "-l", "target/temp/mvn.log" }, null);    cli.cli(request);    cli.properties(request);    cli.logging(request);    assertFalse(MessageUtils.isColorEnabled());    MessageUtils.setColorEnabled(false);    request = new CliRequest(new String[] { "-Dstyle.color=always" }, null);    cli.cli(request);    cli.properties(request);    cli.logging(request);    assertTrue(MessageUtils.isColorEnabled());    MessageUtils.setColorEnabled(true);    request = new CliRequest(new String[] { "-Dstyle.color=never" }, null);    cli.cli(request);    cli.properties(request);    cli.logging(request);    assertFalse(MessageUtils.isColorEnabled());    MessageUtils.setColorEnabled(false);    request = new CliRequest(new String[] { "-Dstyle.color=always", "-B", "-l", "target/temp/mvn.log" }, null);    cli.cli(request);    cli.properties(request);    cli.logging(request);    assertTrue(MessageUtils.isColorEnabled());    try {        MessageUtils.setColorEnabled(false);        request = new CliRequest(new String[] { "-Dstyle.color=maybe", "-B", "-l", "target/temp/mvn.log" }, null);        cli.cli(request);        cli.properties(request);        cli.logging(request);        fail("maybe is not a valid option");    } catch (IllegalArgumentException e) {        }}
452180d12a0ac41d52ba1bdc6cd6718a05f53feedc36187c471430492040a988
testToolchainsBuildingEvents
public void testToolchainsBuildingEvents() throws Exception
{    final EventSpyDispatcher eventSpyDispatcherMock = mock(EventSpyDispatcher.class);    MavenCli customizedMavenCli = new MavenCli() {        @Override        protected void customizeContainer(PlexusContainer container) {            super.customizeContainer(container);            container.addComponent(eventSpyDispatcherMock, "org.apache.maven.eventspy.internal.EventSpyDispatcher");            container.addComponent(mock(Maven.class), "org.apache.maven.Maven");        }    };    CliRequest cliRequest = new CliRequest(new String[] {}, null);    customizedMavenCli.cli(cliRequest);    customizedMavenCli.logging(cliRequest);    customizedMavenCli.container(cliRequest);    customizedMavenCli.toolchains(cliRequest);    InOrder orderdEventSpyDispatcherMock = inOrder(eventSpyDispatcherMock);    orderdEventSpyDispatcherMock.verify(eventSpyDispatcherMock, times(1)).onEvent(any(ToolchainsBuildingRequest.class));    orderdEventSpyDispatcherMock.verify(eventSpyDispatcherMock, times(1)).onEvent(any(ToolchainsBuildingResult.class));}
237877ee4c54437e9d81c26f4aa733e4207bffba6c37fd4182dc87fb85933c84
customizeContainer
protected void customizeContainer(PlexusContainer container)
{    super.customizeContainer(container);    container.addComponent(eventSpyDispatcherMock, "org.apache.maven.eventspy.internal.EventSpyDispatcher");    container.addComponent(mock(Maven.class), "org.apache.maven.Maven");}
a5601cca8d222ee6f9154571a1d6c33f77845f03c4fcaa653330689d0675965c
testNegativeSize
public void testNegativeSize()
{    FileSizeFormat format = new FileSizeFormat(Locale.ENGLISH);    long negativeSize = -100L;    format.format(negativeSize);}
4418db934d4155c558cef1530654d1053ddcdb06e41cedabef91b0a8f1be57e3
testSize
public void testSize()
{    FileSizeFormat format = new FileSizeFormat(Locale.ENGLISH);    long _0_bytes = 0L;    assertEquals("0 B", format.format(_0_bytes));    long _5_bytes = 5L;    assertEquals("5 B", format.format(_5_bytes));    long _10_bytes = 10L;    assertEquals("10 B", format.format(_10_bytes));    long _15_bytes = 15L;    assertEquals("15 B", format.format(_15_bytes));    long _999_bytes = 999L;    assertEquals("999 B", format.format(_999_bytes));    long _1000_bytes = 1000L;    assertEquals("1.0 kB", format.format(_1000_bytes));    long _5500_bytes = 5500L;    assertEquals("5.5 kB", format.format(_5500_bytes));    long _10_kilobytes = 10L * 1000L;    assertEquals("10 kB", format.format(_10_kilobytes));    long _15_kilobytes = 15L * 1000L;    assertEquals("15 kB", format.format(_15_kilobytes));    long _999_kilobytes = 999L * 1000L;    assertEquals("999 kB", format.format(_999_kilobytes));    long _1000_kilobytes = 1000L * 1000L;    assertEquals("1.0 MB", format.format(_1000_kilobytes));    long _5500_kilobytes = 5500L * 1000L;    assertEquals("5.5 MB", format.format(_5500_kilobytes));    long _10_megabytes = 10L * 1000L * 1000L;    assertEquals("10 MB", format.format(_10_megabytes));    long _15_megabytes = 15L * 1000L * 1000L;    assertEquals("15 MB", format.format(_15_megabytes));    long _999_megabytes = 999L * 1000L * 1000L;    assertEquals("999 MB", format.format(_999_megabytes));    long _1000_megabytes = 1000L * 1000L * 1000L;    assertEquals("1.0 GB", format.format(_1000_megabytes));    long _5500_megabytes = 5500L * 1000L * 1000L;    assertEquals("5.5 GB", format.format(_5500_megabytes));    long _10_gigabytes = 10L * 1000L * 1000L * 1000L;    assertEquals("10 GB", format.format(_10_gigabytes));    long _15_gigabytes = 15L * 1000L * 1000L * 1000L;    assertEquals("15 GB", format.format(_15_gigabytes));    long _1000_gigabytes = 1000L * 1000L * 1000L * 1000L;    assertEquals("1000 GB", format.format(_1000_gigabytes));}
9b291c0696cfebb1ac38a85d07d802d7239110734fc067fe440df99037b82520
testSizeWithSelectedScaleUnit
public void testSizeWithSelectedScaleUnit()
{    FileSizeFormat format = new FileSizeFormat(Locale.ENGLISH);    long _0_bytes = 0L;    assertEquals("0 B", format.format(_0_bytes));    assertEquals("0 B", format.format(_0_bytes, ScaleUnit.BYTE));    assertEquals("0 kB", format.format(_0_bytes, ScaleUnit.KILOBYTE));    assertEquals("0 MB", format.format(_0_bytes, ScaleUnit.MEGABYTE));    assertEquals("0 GB", format.format(_0_bytes, ScaleUnit.GIGABYTE));    long _5_bytes = 5L;    assertEquals("5 B", format.format(_5_bytes));    assertEquals("5 B", format.format(_5_bytes, ScaleUnit.BYTE));    assertEquals("0 kB", format.format(_5_bytes, ScaleUnit.KILOBYTE));    assertEquals("0 MB", format.format(_5_bytes, ScaleUnit.MEGABYTE));    assertEquals("0 GB", format.format(_5_bytes, ScaleUnit.GIGABYTE));    long _49_bytes = 49L;    assertEquals("49 B", format.format(_49_bytes));    assertEquals("49 B", format.format(_49_bytes, ScaleUnit.BYTE));    assertEquals("0 kB", format.format(_49_bytes, ScaleUnit.KILOBYTE));    assertEquals("0 MB", format.format(_49_bytes, ScaleUnit.MEGABYTE));    assertEquals("0 GB", format.format(_49_bytes, ScaleUnit.GIGABYTE));    long _50_bytes = 50L;    assertEquals("50 B", format.format(_50_bytes));    assertEquals("50 B", format.format(_50_bytes, ScaleUnit.BYTE));    if (SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_8)) {        assertEquals("0.1 kB", format.format(_50_bytes, ScaleUnit.KILOBYTE));    }    assertEquals("0 MB", format.format(_50_bytes, ScaleUnit.MEGABYTE));    assertEquals("0 GB", format.format(_50_bytes, ScaleUnit.GIGABYTE));    long _999_bytes = 999L;    assertEquals("999 B", format.format(_999_bytes));    assertEquals("999 B", format.format(_999_bytes, ScaleUnit.BYTE));    assertEquals("1.0 kB", format.format(_999_bytes, ScaleUnit.KILOBYTE));    assertEquals("0 MB", format.format(_999_bytes, ScaleUnit.MEGABYTE));    assertEquals("0 GB", format.format(_999_bytes, ScaleUnit.GIGABYTE));    long _1000_bytes = 1000L;    assertEquals("1.0 kB", format.format(_1000_bytes));    assertEquals("1000 B", format.format(_1000_bytes, ScaleUnit.BYTE));    assertEquals("1.0 kB", format.format(_1000_bytes, ScaleUnit.KILOBYTE));    assertEquals("0 MB", format.format(_1000_bytes, ScaleUnit.MEGABYTE));    assertEquals("0 GB", format.format(_1000_bytes, ScaleUnit.GIGABYTE));    long _49_kilobytes = 49L * 1000L;    assertEquals("49 kB", format.format(_49_kilobytes));    assertEquals("49000 B", format.format(_49_kilobytes, ScaleUnit.BYTE));    assertEquals("49 kB", format.format(_49_kilobytes, ScaleUnit.KILOBYTE));    assertEquals("0 MB", format.format(_49_kilobytes, ScaleUnit.MEGABYTE));    assertEquals("0 GB", format.format(_49_kilobytes, ScaleUnit.GIGABYTE));    long _50_kilobytes = 50L * 1000L;    assertEquals("50 kB", format.format(_50_kilobytes));    assertEquals("50000 B", format.format(_50_kilobytes, ScaleUnit.BYTE));    assertEquals("50 kB", format.format(_50_kilobytes, ScaleUnit.KILOBYTE));    if (SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_8)) {        assertEquals("0.1 MB", format.format(_50_kilobytes, ScaleUnit.MEGABYTE));    }    assertEquals("0 GB", format.format(_50_kilobytes, ScaleUnit.GIGABYTE));    long _999_kilobytes = 999L * 1000L;    assertEquals("999 kB", format.format(_999_kilobytes));    assertEquals("999000 B", format.format(_999_kilobytes, ScaleUnit.BYTE));    assertEquals("999 kB", format.format(_999_kilobytes, ScaleUnit.KILOBYTE));    assertEquals("1.0 MB", format.format(_999_kilobytes, ScaleUnit.MEGABYTE));    assertEquals("0 GB", format.format(_999_kilobytes, ScaleUnit.GIGABYTE));    long _1000_kilobytes = 1000L * 1000L;    assertEquals("1.0 MB", format.format(_1000_kilobytes));    assertEquals("1000000 B", format.format(_1000_kilobytes, ScaleUnit.BYTE));    assertEquals("1000 kB", format.format(_1000_kilobytes, ScaleUnit.KILOBYTE));    assertEquals("1.0 MB", format.format(_1000_kilobytes, ScaleUnit.MEGABYTE));    assertEquals("0 GB", format.format(_1000_kilobytes, ScaleUnit.GIGABYTE));    long _49_megabytes = 49L * 1000L * 1000L;    assertEquals("49 MB", format.format(_49_megabytes));    assertEquals("49000000 B", format.format(_49_megabytes, ScaleUnit.BYTE));    assertEquals("49000 kB", format.format(_49_megabytes, ScaleUnit.KILOBYTE));    assertEquals("49 MB", format.format(_49_megabytes, ScaleUnit.MEGABYTE));    assertEquals("0 GB", format.format(_49_megabytes, ScaleUnit.GIGABYTE));    long _50_megabytes = 50L * 1000L * 1000L;    assertEquals("50 MB", format.format(_50_megabytes));    assertEquals("50000000 B", format.format(_50_megabytes, ScaleUnit.BYTE));    assertEquals("50000 kB", format.format(_50_megabytes, ScaleUnit.KILOBYTE));    assertEquals("50 MB", format.format(_50_megabytes, ScaleUnit.MEGABYTE));    if (SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_8)) {        assertEquals("0.1 GB", format.format(_50_megabytes, ScaleUnit.GIGABYTE));    }    long _999_megabytes = 999L * 1000L * 1000L;    assertEquals("999 MB", format.format(_999_megabytes));    assertEquals("999000000 B", format.format(_999_megabytes, ScaleUnit.BYTE));    assertEquals("999000 kB", format.format(_999_megabytes, ScaleUnit.KILOBYTE));    assertEquals("999 MB", format.format(_999_megabytes, ScaleUnit.MEGABYTE));    assertEquals("1.0 GB", format.format(_999_megabytes, ScaleUnit.GIGABYTE));    long _1000_megabytes = 1000L * 1000L * 1000L;    assertEquals("1.0 GB", format.format(_1000_megabytes));    assertEquals("1000000000 B", format.format(_1000_megabytes, ScaleUnit.BYTE));    assertEquals("1000000 kB", format.format(_1000_megabytes, ScaleUnit.KILOBYTE));    assertEquals("1000 MB", format.format(_1000_megabytes, ScaleUnit.MEGABYTE));    assertEquals("1.0 GB", format.format(_1000_megabytes, ScaleUnit.GIGABYTE));}
d511c9af7c219a04673b6a20341ccfae0a448089027ad5842e7e9f94e156dab0
testNegativeProgressedSize
public void testNegativeProgressedSize()
{    FileSizeFormat format = new FileSizeFormat(Locale.ENGLISH);    long negativeProgressedSize = -100L;    format.formatProgress(negativeProgressedSize, 10L);}
b9029a388d3c428fc619ae413e1f6315912808a854c6b05b904c77926953d194
testNegativeProgressedSizeBiggerThanSize
public void testNegativeProgressedSizeBiggerThanSize()
{    FileSizeFormat format = new FileSizeFormat(Locale.ENGLISH);    format.formatProgress(100L, 10L);}
b2fa03ec5fbb3fe762dc0d6becee447b46dc924f31e83d482ed3968f4a8b0925
testProgressedSizeWithoutSize
public void testProgressedSizeWithoutSize()
{    FileSizeFormat format = new FileSizeFormat(Locale.ENGLISH);    long _0_bytes = 0L;    assertEquals("0 B", format.formatProgress(_0_bytes, -1L));    long _1000_bytes = 1000L;    assertEquals("1.0 kB", format.formatProgress(_1000_bytes, -1L));    long _1000_kilobytes = 1000L * 1000L;    assertEquals("1.0 MB", format.formatProgress(_1000_kilobytes, -1L));    long _1000_megabytes = 1000L * 1000L * 1000L;    assertEquals("1.0 GB", format.formatProgress(_1000_megabytes, -1L));}
c6f1ebdb23ea5434aa5c078bdca530f2f4603a71e77703d3946e86307d93e63d
testProgressedBothZero
public void testProgressedBothZero()
{    FileSizeFormat format = new FileSizeFormat(Locale.ENGLISH);    long _0_bytes = 0L;    assertEquals("0 B", format.formatProgress(_0_bytes, _0_bytes));}
41829734afc01ffc750653d482daa6f1acff3d3a9ab8bcd19b71ebf3449bbe27
testProgressedSizeWithSize
public void testProgressedSizeWithSize()
{    FileSizeFormat format = new FileSizeFormat(Locale.ENGLISH);    long _0_bytes = 0L;    long _400_bytes = 400L;    long _800_bytes = 2L * _400_bytes;    assertEquals("0/800 B", format.formatProgress(_0_bytes, _800_bytes));    assertEquals("400/800 B", format.formatProgress(_400_bytes, _800_bytes));    assertEquals("800 B", format.formatProgress(_800_bytes, _800_bytes));    long _4000_bytes = 4000L;    long _8000_bytes = 2L * _4000_bytes;    long _50_kilobytes = 50000L;    assertEquals("0/8.0 kB", format.formatProgress(_0_bytes, _8000_bytes));    assertEquals("0.4/8.0 kB", format.formatProgress(_400_bytes, _8000_bytes));    assertEquals("4.0/8.0 kB", format.formatProgress(_4000_bytes, _8000_bytes));    assertEquals("8.0 kB", format.formatProgress(_8000_bytes, _8000_bytes));    assertEquals("8.0/50 kB", format.formatProgress(_8000_bytes, _50_kilobytes));    assertEquals("16/50 kB", format.formatProgress(2L * _8000_bytes, _50_kilobytes));    assertEquals("50 kB", format.formatProgress(_50_kilobytes, _50_kilobytes));    long _500_kilobytes = 500000L;    long _1000_kilobytes = 2L * _500_kilobytes;    ;    long _5000_kilobytes = 5L * _1000_kilobytes;    long _15_megabytes = 3L * _5000_kilobytes;    assertEquals("0/5.0 MB", format.formatProgress(_0_bytes, _5000_kilobytes));    assertEquals("0.5/5.0 MB", format.formatProgress(_500_kilobytes, _5000_kilobytes));    assertEquals("1.0/5.0 MB", format.formatProgress(_1000_kilobytes, _5000_kilobytes));    assertEquals("5.0 MB", format.formatProgress(_5000_kilobytes, _5000_kilobytes));    assertEquals("5.0/15 MB", format.formatProgress(_5000_kilobytes, _15_megabytes));    assertEquals("15 MB", format.formatProgress(_15_megabytes, _15_megabytes));    long _500_megabytes = 500000000L;    long _1000_megabytes = 2L * _500_megabytes;    long _5000_megabytes = 5L * _1000_megabytes;    long _15_gigabytes = 3L * _5000_megabytes;    assertEquals("0/500 MB", format.formatProgress(_0_bytes, _500_megabytes));    assertEquals("1.0/5.0 GB", format.formatProgress(_1000_megabytes, _5000_megabytes));    assertEquals("5.0 GB", format.formatProgress(_5000_megabytes, _5000_megabytes));    assertEquals("5.0/15 GB", format.formatProgress(_5000_megabytes, _15_gigabytes));    assertEquals("15 GB", format.formatProgress(_15_gigabytes, _15_gigabytes));}
3116ea2053d9de960ec3753eb07f3d243c370662aa1f0175ad357057c9ce5a52
main
public static void main(String[] args)
{    System.out.println("Hello World!");}
0726523a73bad537f74ac5912d840d3c7fe0c2e304fe52f26dedb3d2e7d7350f
suite
public static Test suite()
{    return new TestSuite(AppTest.class);}
5c5a643b0b44f81060e7ec9ff1ceeee39878cad6f6e30d97b8edc9289f010ead
testApp
public void testApp()
{    assertTrue(true);}
02f0eb57f9440f5415af75401dc8f005e2bfe35e3f6b8ad3f0e10d52e7ced208
merge
public void merge(Model target, Model source, boolean sourceDominant, Map<?, ?> hints)
{    Objects.requireNonNull(target, "target cannot be null");    if (source == null) {        return;    }    Map<Object, Object> context = new HashMap<>();    if (hints != null) {        context.putAll(hints);    }    mergeModel(target, source, sourceDominant, context);}
94228a6dbec2b8414aa99ab684c3259017f15824fb3e543a6437e010189d0926
mergeModel
protected void mergeModel(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    mergeModelBase(target, source, sourceDominant, context);    mergeModel_ChildProjectUrlInheritAppendPath(target, source, sourceDominant, context);    mergeModel_ModelVersion(target, source, sourceDominant, context);    mergeModel_Parent(target, source, sourceDominant, context);    mergeModel_GroupId(target, source, sourceDominant, context);    mergeModel_ArtifactId(target, source, sourceDominant, context);    mergeModel_Version(target, source, sourceDominant, context);    mergeModel_Packaging(target, source, sourceDominant, context);    mergeModel_Name(target, source, sourceDominant, context);    mergeModel_Description(target, source, sourceDominant, context);    mergeModel_Url(target, source, sourceDominant, context);    mergeModel_InceptionYear(target, source, sourceDominant, context);    mergeModel_Organization(target, source, sourceDominant, context);    mergeModel_Licenses(target, source, sourceDominant, context);    mergeModel_MailingLists(target, source, sourceDominant, context);    mergeModel_Developers(target, source, sourceDominant, context);    mergeModel_Contributors(target, source, sourceDominant, context);    mergeModel_IssueManagement(target, source, sourceDominant, context);    mergeModel_Scm(target, source, sourceDominant, context);    mergeModel_CiManagement(target, source, sourceDominant, context);    mergeModel_Prerequisites(target, source, sourceDominant, context);    mergeModel_Build(target, source, sourceDominant, context);    mergeModel_Profiles(target, source, sourceDominant, context);}
0288f1ef772bdd000f919e088f44973dcd2fb1a2a8cce42ae1c7f37f6fe9b950
mergeModel_ModelVersion
protected void mergeModel_ModelVersion(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getModelVersion();    if (src != null) {        if (sourceDominant || target.getModelVersion() == null) {            target.setModelVersion(src);            target.setLocation("modelVersion", source.getLocation("modelVersion"));        }    }}
b2c980dc203c2d16fa60658eae566d7b731afbde58485587a72deb999b33cb4a
mergeModel_Parent
protected void mergeModel_Parent(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    Parent src = source.getParent();    if (src != null) {        Parent tgt = target.getParent();        if (tgt == null) {            tgt = new Parent();            tgt.setRelativePath(null);            target.setParent(tgt);        }        mergeParent(tgt, src, sourceDominant, context);    }}
f53b6feae091ed56f1be6b8e0f479a1c620b0e9bc35aaea7d88dc834e47274fc
mergeModel_GroupId
protected void mergeModel_GroupId(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getGroupId();    if (src != null) {        if (sourceDominant || target.getGroupId() == null) {            target.setGroupId(src);            target.setLocation("groupId", source.getLocation("groupId"));        }    }}
a6bbb2ebcb499f4aaca32e6a47bb81b43bb855017d0050f758109c545f2f9e0f
mergeModel_ArtifactId
protected void mergeModel_ArtifactId(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getArtifactId();    if (src != null) {        if (sourceDominant || target.getArtifactId() == null) {            target.setArtifactId(src);            target.setLocation("artifactId", source.getLocation("artifactId"));        }    }}
9d1e6b3b5cf753da5c8a87cd266d725de8de043d5c589146b329606f346b94e5
mergeModel_ChildProjectUrlInheritAppendPath
protected void mergeModel_ChildProjectUrlInheritAppendPath(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getChildProjectUrlInheritAppendPath();    if (src != null) {        if (sourceDominant || target.getChildProjectUrlInheritAppendPath() == null) {            target.setChildProjectUrlInheritAppendPath(src);            target.setLocation("child.project.url.inherit.append.path", source.getLocation("child.project.url.inherit.append.path"));        }    }}
8d93a232d37d73b5b7b3e1311e97dc98c3102f855a9f3bdf5a7710d7aea120ab
mergeModel_Version
protected void mergeModel_Version(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getVersion();    if (src != null) {        if (sourceDominant || target.getVersion() == null) {            target.setVersion(src);            target.setLocation("version", source.getLocation("version"));        }    }}
e55bcd84f62970d7da46e5843db01855ad39f067411aafddaccac683f17039d3
mergeModel_Packaging
protected void mergeModel_Packaging(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getPackaging();    if (src != null) {        if (sourceDominant || target.getPackaging() == null) {            target.setPackaging(src);            target.setLocation("packaging", source.getLocation("packaging"));        }    }}
ae2ce65d2a22a9ef62cb47cf150e4d3f7a824298de4f0b0a2744419c43288e14
mergeModel_Name
protected void mergeModel_Name(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getName();    if (src != null) {        if (sourceDominant || target.getName() == null) {            target.setName(src);            target.setLocation("name", source.getLocation("name"));        }    }}
4f6a686d0798d3428fde8be348b9f67c8e78dc0d5ee9cd1158d222b317289539
mergeModel_Description
protected void mergeModel_Description(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getDescription();    if (src != null) {        if (sourceDominant || target.getDescription() == null) {            target.setDescription(src);            target.setLocation("description", source.getLocation("description"));        }    }}
848e0ef87ce2a7feb6bdba3e8ba03490d05813a65440d2ee00e8579c726ce061
mergeModel_Url
protected void mergeModel_Url(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getUrl();    if (src != null) {        if (sourceDominant || target.getUrl() == null) {            target.setUrl(src);            target.setLocation("url", source.getLocation("url"));        }    }}
659987a3400675f4c83ecabba907f1515e2c82486cde8828897da2bd0064379e
mergeModel_InceptionYear
protected void mergeModel_InceptionYear(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getInceptionYear();    if (src != null) {        if (sourceDominant || target.getInceptionYear() == null) {            target.setInceptionYear(src);            target.setLocation("inceptionYear", source.getLocation("inceptionYear"));        }    }}
0f04da2cd7dc64e67a099f4593c2091be0473e364e01efda30be70c92c0219fc
mergeModel_Organization
protected void mergeModel_Organization(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    Organization src = source.getOrganization();    if (src != null) {        Organization tgt = target.getOrganization();        if (tgt == null) {            tgt = new Organization();            target.setOrganization(tgt);        }        mergeOrganization(tgt, src, sourceDominant, context);    }}
0d277c30e3d515950352128478002f1e6ab2781a75ff5a67fe87fbcef86feada
mergeModel_Licenses
protected void mergeModel_Licenses(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    target.setLicenses(merge(target.getLicenses(), source.getLicenses(), sourceDominant, new LicenseKeyComputer()));}
f7480a50119ac22eb8c425eddd01b6ec0b10b793540489d7502158d24126e169
mergeModel_MailingLists
protected void mergeModel_MailingLists(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    target.setMailingLists(merge(target.getMailingLists(), source.getMailingLists(), sourceDominant, new MailingListKeyComputer()));}
64298385a50df6bc27388d5273474a4725cad8ccee6eace74666db2d7f89d681
mergeModel_Developers
protected void mergeModel_Developers(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    target.setDevelopers(merge(target.getDevelopers(), source.getDevelopers(), sourceDominant, new DeveloperKeyComputer()));}
71c6fc860ab7c9019d89bad20e5df216444f31a7c705dcbb5121d341cf4936fd
mergeModel_Contributors
protected void mergeModel_Contributors(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    target.setContributors(merge(target.getContributors(), source.getContributors(), sourceDominant, new ContributorKeyComputer()));}
b7a3264d2cd46b0ab17b4ee6cd927d1b3f184745035d830a172faa3d7e94eeff
mergeModel_IssueManagement
protected void mergeModel_IssueManagement(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    IssueManagement src = source.getIssueManagement();    if (src != null) {        IssueManagement tgt = target.getIssueManagement();        if (tgt == null) {            tgt = new IssueManagement();            target.setIssueManagement(tgt);        }        mergeIssueManagement(tgt, src, sourceDominant, context);    }}
9ccbb7bad23a80afbac30cecfd4d1b55627f196624b6bc84c1670165d9631939
mergeModel_Scm
protected void mergeModel_Scm(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    Scm src = source.getScm();    if (src != null) {        Scm tgt = target.getScm();        if (tgt == null) {            tgt = new Scm();            tgt.setTag(null);            target.setScm(tgt);        }        mergeScm(tgt, src, sourceDominant, context);    }}
cf0da19ffda2b2360f71ce4af70a0c3b9fb16985f4a6383ce1162e4e5f65c372
mergeModel_CiManagement
protected void mergeModel_CiManagement(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    CiManagement src = source.getCiManagement();    if (src != null) {        CiManagement tgt = target.getCiManagement();        if (tgt == null) {            tgt = new CiManagement();            target.setCiManagement(tgt);        }        mergeCiManagement(tgt, src, sourceDominant, context);    }}
590efe5a6080eb831ba55b7aad3ae6c3cfebcbed48058c70dfa7d18e00ba673c
mergeModel_Prerequisites
protected void mergeModel_Prerequisites(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    Prerequisites src = source.getPrerequisites();    if (src != null) {        Prerequisites tgt = target.getPrerequisites();        if (tgt == null) {            tgt = new Prerequisites();            tgt.setMaven(null);            target.setPrerequisites(tgt);        }        mergePrerequisites(tgt, src, sourceDominant, context);    }}
4a41bc436d6c9833162df3768dc8e70b7bff369865f291323b8c6b2d5b6a85b5
mergeModel_Build
protected void mergeModel_Build(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    Build src = source.getBuild();    if (src != null) {        Build tgt = target.getBuild();        if (tgt == null) {            tgt = new Build();            target.setBuild(tgt);        }        mergeBuild(tgt, src, sourceDominant, context);    }}
4cb09252805ff56d6532b361deb8726d0f6bd59f9a024f47084cfc85fa4a729a
mergeModel_Profiles
protected void mergeModel_Profiles(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    target.setProfiles(merge(target.getProfiles(), source.getProfiles(), sourceDominant, new ProfileKeyComputer()));}
bba39cc9146a2f43ee3a71f51190901fba487aba1273cf1dbde6eff9140828f3
mergeModelBase
protected void mergeModelBase(ModelBase target, ModelBase source, boolean sourceDominant, Map<Object, Object> context)
{    mergeModelBase_DistributionManagement(target, source, sourceDominant, context);    mergeModelBase_Modules(target, source, sourceDominant, context);    mergeModelBase_Repositories(target, source, sourceDominant, context);    mergeModelBase_PluginRepositories(target, source, sourceDominant, context);    mergeModelBase_Dependencies(target, source, sourceDominant, context);    mergeModelBase_Reporting(target, source, sourceDominant, context);    mergeModelBase_DependencyManagement(target, source, sourceDominant, context);    mergeModelBase_Properties(target, source, sourceDominant, context);}
5687b7839bbe1d63a92574c2c8a1a14fd32c2257ea75befba6c461fc350e0ba5
mergeModelBase_Modules
protected void mergeModelBase_Modules(ModelBase target, ModelBase source, boolean sourceDominant, Map<Object, Object> context)
{    List<String> src = source.getModules();    if (!src.isEmpty()) {        List<String> tgt = target.getModules();        List<String> merged = new ArrayList<>(tgt.size() + src.size());        merged.addAll(tgt);        merged.addAll(src);        target.setModules(merged);    }}
3f05f8a29bc98a7fc3183f6016a577f54588741dae315a260950b954494e1951
mergeModelBase_Dependencies
protected void mergeModelBase_Dependencies(ModelBase target, ModelBase source, boolean sourceDominant, Map<Object, Object> context)
{    target.setDependencies(merge(target.getDependencies(), source.getDependencies(), sourceDominant, new DependencyKeyComputer()));}
72feebc70af9a5c5127bbb336f40ecdf1cf4924f7b55fc20c7e6c4efa0f7e712
mergeModelBase_Repositories
protected void mergeModelBase_Repositories(ModelBase target, ModelBase source, boolean sourceDominant, Map<Object, Object> context)
{    target.setRepositories(merge(target.getRepositories(), source.getRepositories(), sourceDominant, new RepositoryKeyComputer()));}
0b696267ca10b276c0afe974a4079c6b85789a27d303c6f34d5690987777b99f
mergeModelBase_PluginRepositories
protected void mergeModelBase_PluginRepositories(ModelBase target, ModelBase source, boolean sourceDominant, Map<Object, Object> context)
{    target.setPluginRepositories(merge(target.getPluginRepositories(), source.getPluginRepositories(), sourceDominant, new RepositoryKeyComputer()));}
8b5449446d28c35a1b2b7a85a0df6768ab7b02d73adb33c8a6afc0cf56c492b6
mergeModelBase_DistributionManagement
protected void mergeModelBase_DistributionManagement(ModelBase target, ModelBase source, boolean sourceDominant, Map<Object, Object> context)
{    DistributionManagement src = source.getDistributionManagement();    if (src != null) {        DistributionManagement tgt = target.getDistributionManagement();        if (tgt == null) {            tgt = new DistributionManagement();            target.setDistributionManagement(tgt);        }        mergeDistributionManagement(tgt, src, sourceDominant, context);    }}
7c036a749ac84536d9c07aec556e705ded794b21e88da3701348a72ae8c258e6
mergeModelBase_Reporting
protected void mergeModelBase_Reporting(ModelBase target, ModelBase source, boolean sourceDominant, Map<Object, Object> context)
{    Reporting src = source.getReporting();    if (src != null) {        Reporting tgt = target.getReporting();        if (tgt == null) {            tgt = new Reporting();            target.setReporting(tgt);        }        mergeReporting(tgt, src, sourceDominant, context);    }}
cecac190cd41f40348d6b5f115b47cdb1e7ff0731b9e10ad45e79b45f1a67af9
mergeModelBase_DependencyManagement
protected void mergeModelBase_DependencyManagement(ModelBase target, ModelBase source, boolean sourceDominant, Map<Object, Object> context)
{    DependencyManagement src = source.getDependencyManagement();    if (src != null) {        DependencyManagement tgt = target.getDependencyManagement();        if (tgt == null) {            tgt = new DependencyManagement();            target.setDependencyManagement(tgt);        }        mergeDependencyManagement(tgt, src, sourceDominant, context);    }}
adb88d10b5394bc909a0b05de593033656fa03e8a1089864ec1afa1d2b513e9a
mergeModelBase_Properties
protected void mergeModelBase_Properties(ModelBase target, ModelBase source, boolean sourceDominant, Map<Object, Object> context)
{    Properties merged = new Properties();    if (sourceDominant) {        merged.putAll(target.getProperties());        merged.putAll(source.getProperties());    } else {        merged.putAll(source.getProperties());        merged.putAll(target.getProperties());    }    target.setProperties(merged);    target.setLocation("properties", InputLocation.merge(target.getLocation("properties"), source.getLocation("properties"), sourceDominant));}
54a164e559c6859b4e009e6f0cc784f4a54b88401c3c6480501be7f3733ce188
mergeDistributionManagement
protected void mergeDistributionManagement(DistributionManagement target, DistributionManagement source, boolean sourceDominant, Map<Object, Object> context)
{    mergeDistributionManagement_Repository(target, source, sourceDominant, context);    mergeDistributionManagement_SnapshotRepository(target, source, sourceDominant, context);    mergeDistributionManagement_Site(target, source, sourceDominant, context);    mergeDistributionManagement_Status(target, source, sourceDominant, context);    mergeDistributionManagement_DownloadUrl(target, source, sourceDominant, context);}
c2045ddb4e04a45641ccbd29ba8a84f92c218215cef49456313f647ef0bfa86e
mergeDistributionManagement_Repository
protected void mergeDistributionManagement_Repository(DistributionManagement target, DistributionManagement source, boolean sourceDominant, Map<Object, Object> context)
{    DeploymentRepository src = source.getRepository();    if (src != null) {        DeploymentRepository tgt = target.getRepository();        if (tgt == null) {            tgt = new DeploymentRepository();            target.setRepository(tgt);        }        mergeDeploymentRepository(tgt, src, sourceDominant, context);    }}
78bd0aaf8cace56768567961330166e1c351d5dc4fd7ce03bf5865525beb3382
mergeDistributionManagement_SnapshotRepository
protected void mergeDistributionManagement_SnapshotRepository(DistributionManagement target, DistributionManagement source, boolean sourceDominant, Map<Object, Object> context)
{    DeploymentRepository src = source.getSnapshotRepository();    if (src != null) {        DeploymentRepository tgt = target.getSnapshotRepository();        if (tgt == null) {            tgt = new DeploymentRepository();            target.setSnapshotRepository(tgt);        }        mergeDeploymentRepository(tgt, src, sourceDominant, context);    }}
500049566fb13f58978b8bd24901fa44365fa1a53be1b2789da0e34e63c40903
mergeDistributionManagement_Site
protected void mergeDistributionManagement_Site(DistributionManagement target, DistributionManagement source, boolean sourceDominant, Map<Object, Object> context)
{    Site src = source.getSite();    if (src != null) {        Site tgt = target.getSite();        if (tgt == null) {            tgt = new Site();            target.setSite(tgt);        }        mergeSite(tgt, src, sourceDominant, context);    }}
a74619514e11ba88952ccb43858539c4d8fe57376577956fe2b910c5f0c7f602
mergeDistributionManagement_Status
protected void mergeDistributionManagement_Status(DistributionManagement target, DistributionManagement source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getStatus();    if (src != null) {        if (sourceDominant || target.getStatus() == null) {            target.setStatus(src);            target.setLocation("status", source.getLocation("status"));        }    }}
4166585a3c465ec958f00976e53fa9585db52e4ea11e26c23a2d94c4f6e79da3
mergeDistributionManagement_DownloadUrl
protected void mergeDistributionManagement_DownloadUrl(DistributionManagement target, DistributionManagement source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getDownloadUrl();    if (src != null) {        if (sourceDominant || target.getDownloadUrl() == null) {            target.setDownloadUrl(src);            target.setLocation("downloadUrl", source.getLocation("downloadUrl"));        }    }}
6d88fef7b5af32de93fa27880a5868fa71247005956bace106e0f65bb917c57c
mergeRelocation
protected void mergeRelocation(Relocation target, Relocation source, boolean sourceDominant, Map<Object, Object> context)
{    mergeRelocation_GroupId(target, source, sourceDominant, context);    mergeRelocation_ArtifactId(target, source, sourceDominant, context);    mergeRelocation_Version(target, source, sourceDominant, context);    mergeRelocation_Message(target, source, sourceDominant, context);}
4d79e5302dc1b39eca5cadcb511598574644f450435bd4521ca4afcccf8143b1
mergeRelocation_GroupId
protected void mergeRelocation_GroupId(Relocation target, Relocation source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getGroupId();    if (src != null) {        if (sourceDominant || target.getGroupId() == null) {            target.setGroupId(src);            target.setLocation("groupId", source.getLocation("groupId"));        }    }}
9379809536b5f21b8f203119d9ea02375eec7fef54bd3506f8459d5db94c06ca
mergeRelocation_ArtifactId
protected void mergeRelocation_ArtifactId(Relocation target, Relocation source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getArtifactId();    if (src != null) {        if (sourceDominant || target.getArtifactId() == null) {            target.setArtifactId(src);            target.setLocation("artifactId", source.getLocation("artifactId"));        }    }}
183be7b5ab52af7c0a65ed0e767adffd6b5b1c9b3e44fbf5c1172d29633957e1
mergeRelocation_Version
protected void mergeRelocation_Version(Relocation target, Relocation source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getVersion();    if (src != null) {        if (sourceDominant || target.getVersion() == null) {            target.setVersion(src);            target.setLocation("version", source.getLocation("version"));        }    }}
feb0ee4b103015e32849dc04a781cc0478e34d35f2b0e238ea7025f137578ad6
mergeRelocation_Message
protected void mergeRelocation_Message(Relocation target, Relocation source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getMessage();    if (src != null) {        if (sourceDominant || target.getMessage() == null) {            target.setMessage(src);            target.setLocation("message", source.getLocation("message"));        }    }}
4da404bcfcaee2eafcc912366617d922f423822ab95c8a6e06c11d7b8b117447
mergeDeploymentRepository
protected void mergeDeploymentRepository(DeploymentRepository target, DeploymentRepository source, boolean sourceDominant, Map<Object, Object> context)
{    mergeRepository(target, source, sourceDominant, context);    mergeDeploymentRepository_UniqueVersion(target, source, sourceDominant, context);}
7823af7b460e1131659337495393e0cbe28850887c191e2cc99916f29485f801
mergeDeploymentRepository_UniqueVersion
protected void mergeDeploymentRepository_UniqueVersion(DeploymentRepository target, DeploymentRepository source, boolean sourceDominant, Map<Object, Object> context)
{    if (sourceDominant) {        target.setUniqueVersion(source.isUniqueVersion());        target.setLocation("uniqueVersion", source.getLocation("uniqueVersion"));    }}
48e604e9ba7383770b74656c7df44e148469ae5cfc2f0bc151b02191bccf89fb
mergeSite
protected void mergeSite(Site target, Site source, boolean sourceDominant, Map<Object, Object> context)
{    mergeSite_ChildSiteUrlInheritAppendPath(target, source, sourceDominant, context);    mergeSite_Id(target, source, sourceDominant, context);    mergeSite_Name(target, source, sourceDominant, context);    mergeSite_Url(target, source, sourceDominant, context);}
f16c513a9a40b2bb82e208f234d50469af7b155f2281b0cc09e81cb941bcf9fd
mergeSite_ChildSiteUrlInheritAppendPath
protected void mergeSite_ChildSiteUrlInheritAppendPath(Site target, Site source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getChildSiteUrlInheritAppendPath();    if (src != null) {        if (sourceDominant || target.getChildSiteUrlInheritAppendPath() == null) {            target.setChildSiteUrlInheritAppendPath(src);            target.setLocation("child.site.url.inherit.append.path", source.getLocation("child.site.url.inherit.append.path"));        }    }}
16ce8d7f0d831667465eaa221500527f355a84330341a28a2c3237b7c0cd8504
mergeSite_Id
protected void mergeSite_Id(Site target, Site source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getId();    if (src != null) {        if (sourceDominant || target.getId() == null) {            target.setId(src);            target.setLocation("id", source.getLocation("id"));        }    }}
222160aa285febbe73db6660d89498b5407645c69f030d67bcc6174fc07f80cd
mergeSite_Name
protected void mergeSite_Name(Site target, Site source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getName();    if (src != null) {        if (sourceDominant || target.getName() == null) {            target.setName(src);            target.setLocation("name", source.getLocation("name"));        }    }}
e5f964d6b6562c0fe8745373666b3729ebd5629dd056de601ee53825b94b4715
mergeSite_Url
protected void mergeSite_Url(Site target, Site source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getUrl();    if (src != null) {        if (sourceDominant || target.getUrl() == null) {            target.setUrl(src);            target.setLocation("url", source.getLocation("url"));        }    }}
ac8202042e45d3d047dd215b0316ec59eafa5f34208104e7a432842393bac518
mergeRepository
protected void mergeRepository(Repository target, Repository source, boolean sourceDominant, Map<Object, Object> context)
{    mergeRepositoryBase(target, source, sourceDominant, context);    mergeRepository_Releases(target, source, sourceDominant, context);    mergeRepository_Snapshots(target, source, sourceDominant, context);}
9e44e3d67dc588d13a58257cb3d1e169d197df6283f4b3198540932155e365f1
mergeRepository_Releases
protected void mergeRepository_Releases(Repository target, Repository source, boolean sourceDominant, Map<Object, Object> context)
{    RepositoryPolicy src = source.getReleases();    if (src != null) {        RepositoryPolicy tgt = target.getReleases();        if (tgt == null) {            tgt = new RepositoryPolicy();            target.setReleases(tgt);        }        mergeRepositoryPolicy(tgt, src, sourceDominant, context);    }}
d8b2f173c190aad8bd7f8edeb750f98e3508a0621a95ef5b9442cd24a6b499fa
mergeRepository_Snapshots
protected void mergeRepository_Snapshots(Repository target, Repository source, boolean sourceDominant, Map<Object, Object> context)
{    RepositoryPolicy src = source.getSnapshots();    if (src != null) {        RepositoryPolicy tgt = target.getSnapshots();        if (tgt == null) {            tgt = new RepositoryPolicy();            target.setSnapshots(tgt);        }        mergeRepositoryPolicy(tgt, src, sourceDominant, context);    }}
a39265aff962794e5937a985978ae6dd402b50081624a0b321c50b5875a7efc7
mergeRepositoryBase
protected void mergeRepositoryBase(RepositoryBase target, RepositoryBase source, boolean sourceDominant, Map<Object, Object> context)
{    mergeRepositoryBase_Id(target, source, sourceDominant, context);    mergeRepositoryBase_Name(target, source, sourceDominant, context);    mergeRepositoryBase_Url(target, source, sourceDominant, context);    mergeRepositoryBase_Layout(target, source, sourceDominant, context);}
1d2842737e22b3a966981cd6433aa4f169ab095ef95258f44943a7e429e1ec1e
mergeRepositoryBase_Id
protected void mergeRepositoryBase_Id(RepositoryBase target, RepositoryBase source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getId();    if (src != null) {        if (sourceDominant || target.getId() == null) {            target.setId(src);            target.setLocation("id", source.getLocation("id"));        }    }}
03cdee3773510bc30eef004d759edf9fc199dca9a7b0be00ba318483b8a3c3b8
mergeRepositoryBase_Url
protected void mergeRepositoryBase_Url(RepositoryBase target, RepositoryBase source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getUrl();    if (src != null) {        if (sourceDominant || target.getUrl() == null) {            target.setUrl(src);            target.setLocation("url", source.getLocation("url"));        }    }}
ea39ec9f79940bfb44553824aa06aca6b1eb246849f1920b67316646b11e6bbf
mergeRepositoryBase_Name
protected void mergeRepositoryBase_Name(RepositoryBase target, RepositoryBase source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getName();    if (src != null) {        if (sourceDominant || target.getName() == null) {            target.setName(src);            target.setLocation("name", source.getLocation("name"));        }    }}
b7545dbd97f0cf41b02592febd85dba794dac5795fc93de32f424c40ce1a4792
mergeRepositoryBase_Layout
protected void mergeRepositoryBase_Layout(RepositoryBase target, RepositoryBase source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getLayout();    if (src != null) {        if (sourceDominant || target.getLayout() == null) {            target.setLayout(src);            target.setLocation("layout", source.getLocation("layout"));        }    }}
d5d0313c03a4092155240f45a65591aa4d1e0707e1b82cd2da7cb013910a7175
mergeRepositoryPolicy
protected void mergeRepositoryPolicy(RepositoryPolicy target, RepositoryPolicy source, boolean sourceDominant, Map<Object, Object> context)
{    mergeRepositoryPolicy_Enabled(target, source, sourceDominant, context);    mergeRepositoryPolicy_UpdatePolicy(target, source, sourceDominant, context);    mergeRepositoryPolicy_ChecksumPolicy(target, source, sourceDominant, context);}
ca1f22ef7ea1144a1c90d94dda7e0eb136f9abd1ee88be18fb1978070dccba22
mergeRepositoryPolicy_Enabled
protected void mergeRepositoryPolicy_Enabled(RepositoryPolicy target, RepositoryPolicy source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getEnabled();    if (src != null) {        if (sourceDominant || target.getEnabled() == null) {            target.setEnabled(src);            target.setLocation("enabled", source.getLocation("enabled"));        }    }}
36521483db547cc4d5ca9b6d1054cf9a550cc0ab639c67bdb5af975e666392c1
mergeRepositoryPolicy_UpdatePolicy
protected void mergeRepositoryPolicy_UpdatePolicy(RepositoryPolicy target, RepositoryPolicy source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getUpdatePolicy();    if (src != null) {        if (sourceDominant || target.getUpdatePolicy() == null) {            target.setUpdatePolicy(src);            target.setLocation("updatePolicy", source.getLocation("updatePolicy"));        }    }}
2ac451e912504504405a4a3b79668a5ceaec4c44d03f9f6e7c75055b20990f31
mergeRepositoryPolicy_ChecksumPolicy
protected void mergeRepositoryPolicy_ChecksumPolicy(RepositoryPolicy target, RepositoryPolicy source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getChecksumPolicy();    if (src != null) {        if (sourceDominant || target.getChecksumPolicy() == null) {            target.setChecksumPolicy(src);            target.setLocation("checksumPolicy", source.getLocation("checksumPolicy"));        }    }}
a53f4da3636c14b789e1046c9c3f7bf8f4cd96631cac4174bf217708bf99f5e5
mergeDependency
protected void mergeDependency(Dependency target, Dependency source, boolean sourceDominant, Map<Object, Object> context)
{    mergeDependency_GroupId(target, source, sourceDominant, context);    mergeDependency_ArtifactId(target, source, sourceDominant, context);    mergeDependency_Version(target, source, sourceDominant, context);    mergeDependency_Type(target, source, sourceDominant, context);    mergeDependency_Classifier(target, source, sourceDominant, context);    mergeDependency_Scope(target, source, sourceDominant, context);    mergeDependency_SystemPath(target, source, sourceDominant, context);    mergeDependency_Optional(target, source, sourceDominant, context);    mergeDependency_Exclusions(target, source, sourceDominant, context);}
93e454df1d5a7c2578b18a40d206572c01d38784b4ae2a883c083f91b81e21aa
mergeDependency_GroupId
protected void mergeDependency_GroupId(Dependency target, Dependency source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getGroupId();    if (src != null) {        if (sourceDominant || target.getGroupId() == null) {            target.setGroupId(src);            target.setLocation("groupId", source.getLocation("groupId"));        }    }}
11760344d94e19a285264be3c861d22594a43b079526c72c49f552459f8b48d0
mergeDependency_ArtifactId
protected void mergeDependency_ArtifactId(Dependency target, Dependency source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getArtifactId();    if (src != null) {        if (sourceDominant || target.getArtifactId() == null) {            target.setArtifactId(src);            target.setLocation("artifactId", source.getLocation("artifactId"));        }    }}
8fcc8a8b5c55d7f6a59a27df0fd7fee113ae6fe6cfce6661be87e01e465e864c
mergeDependency_Version
protected void mergeDependency_Version(Dependency target, Dependency source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getVersion();    if (src != null) {        if (sourceDominant || target.getVersion() == null) {            target.setVersion(src);            target.setLocation("version", source.getLocation("version"));        }    }}
578a9627a2633e0b9a015ebf4d29a40ac179d3841b59a14dcd3707f10771c93b
mergeDependency_Type
protected void mergeDependency_Type(Dependency target, Dependency source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getType();    if (src != null) {        if (sourceDominant || target.getType() == null) {            target.setType(src);            target.setLocation("type", source.getLocation("type"));        }    }}
f66f941e3541830d6c395624189d5baa4b7815479df19a8083068c8b0283ba10
mergeDependency_Classifier
protected void mergeDependency_Classifier(Dependency target, Dependency source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getClassifier();    if (src != null) {        if (sourceDominant || target.getClassifier() == null) {            target.setClassifier(src);            target.setLocation("classifier", source.getLocation("classifier"));        }    }}
289115fd0aaebccf7624905e10ad07ff55dfcfd8efa53a46fb8dc06f3b52c237
mergeDependency_Scope
protected void mergeDependency_Scope(Dependency target, Dependency source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getScope();    if (src != null) {        if (sourceDominant || target.getScope() == null) {            target.setScope(src);            target.setLocation("scope", source.getLocation("scope"));        }    }}
7c672efd9eacb48f681d3dc2212ee47ad7e78322fb20f3bb5c5ecd05ca5988b1
mergeDependency_SystemPath
protected void mergeDependency_SystemPath(Dependency target, Dependency source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getSystemPath();    if (src != null) {        if (sourceDominant || target.getSystemPath() == null) {            target.setSystemPath(src);            target.setLocation("systemPath", source.getLocation("systemPath"));        }    }}
69ad527c5584211825648220141c96af82398dfb6286dab8c819ecc02559be43
mergeDependency_Optional
protected void mergeDependency_Optional(Dependency target, Dependency source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getOptional();    if (src != null) {        if (sourceDominant || target.getOptional() == null) {            target.setOptional(src);            target.setLocation("optional", source.getLocation("optional"));        }    }}
28670c4900c4acfecdb43b7c86ce7ee6778d6fa5063d2652aa9bccc9b1b9f220
mergeDependency_Exclusions
protected void mergeDependency_Exclusions(Dependency target, Dependency source, boolean sourceDominant, Map<Object, Object> context)
{    target.setExclusions(merge(target.getExclusions(), source.getExclusions(), sourceDominant, new ExclusionKeyComputer()));}
4db6864e15e7f987e631832734890fe09c321dd9bdab4c6ba26315b99b7f6f19
mergeExclusion
protected void mergeExclusion(Exclusion target, Exclusion source, boolean sourceDominant, Map<Object, Object> context)
{    mergeExclusion_GroupId(target, source, sourceDominant, context);    mergeExclusion_ArtifactId(target, source, sourceDominant, context);}
ad82f1fd384da1768920104d3c8365a9fda4f1439a081b31d3c8a863674317b1
mergeExclusion_GroupId
protected void mergeExclusion_GroupId(Exclusion target, Exclusion source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getGroupId();    if (src != null) {        if (sourceDominant || target.getGroupId() == null) {            target.setGroupId(src);            target.setLocation("groupId", source.getLocation("groupId"));        }    }}
6be5a623568314035576f1888e26f875d02faddf9b755df80664e2c36e862286
mergeExclusion_ArtifactId
protected void mergeExclusion_ArtifactId(Exclusion target, Exclusion source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getArtifactId();    if (src != null) {        if (sourceDominant || target.getArtifactId() == null) {            target.setArtifactId(src);            target.setLocation("artifactId", source.getLocation("artifactId"));        }    }}
c54b9b9ca266c110954d2397a76bde8e83feb76afc8993bcf71d585a24c69529
mergeReporting
protected void mergeReporting(Reporting target, Reporting source, boolean sourceDominant, Map<Object, Object> context)
{    mergeReporting_OutputDirectory(target, source, sourceDominant, context);    mergeReporting_ExcludeDefaults(target, source, sourceDominant, context);    mergeReporting_Plugins(target, source, sourceDominant, context);}
3d0d459d559f628e0862b54defc2aeb106c1d5163f27781c24c360ec2a508d35
mergeReporting_OutputDirectory
protected void mergeReporting_OutputDirectory(Reporting target, Reporting source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getOutputDirectory();    if (src != null) {        if (sourceDominant || target.getOutputDirectory() == null) {            target.setOutputDirectory(src);            target.setLocation("outputDirectory", source.getLocation("outputDirectory"));        }    }}
52758b93deaa32168d4c4999ebec076c815a7941be36aef9bddf5374a5e87a38
mergeReporting_ExcludeDefaults
protected void mergeReporting_ExcludeDefaults(Reporting target, Reporting source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getExcludeDefaults();    if (src != null) {        if (sourceDominant || target.getExcludeDefaults() == null) {            target.setExcludeDefaults(src);            target.setLocation("excludeDefaults", source.getLocation("excludeDefaults"));        }    }}
f4011b29373adcba2687554512b430787bd0b1f64ea73251c2015a3f13ca3638
mergeReporting_Plugins
protected void mergeReporting_Plugins(Reporting target, Reporting source, boolean sourceDominant, Map<Object, Object> context)
{    target.setPlugins(merge(target.getPlugins(), source.getPlugins(), sourceDominant, new ReportPluginKeyComputer()));}
fcaa85c5ea544361a7fd344292799e705f378ca96a4e60cdfb61185804fe43ca
mergeReportPlugin
protected void mergeReportPlugin(ReportPlugin target, ReportPlugin source, boolean sourceDominant, Map<Object, Object> context)
{    mergeConfigurationContainer(target, source, sourceDominant, context);    mergeReportPlugin_GroupId(target, source, sourceDominant, context);    mergeReportPlugin_ArtifactId(target, source, sourceDominant, context);    mergeReportPlugin_Version(target, source, sourceDominant, context);    mergeReportPlugin_ReportSets(target, source, sourceDominant, context);}
63f25da292bbe5b031a1647b48ce40d5b4415cea0bc1607e682865145d90660f
mergeReportPlugin_GroupId
protected void mergeReportPlugin_GroupId(ReportPlugin target, ReportPlugin source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getGroupId();    if (src != null) {        if (sourceDominant || target.getGroupId() == null) {            target.setGroupId(src);            target.setLocation("groupId", source.getLocation("groupId"));        }    }}
e3624d3b584a2f5a25b67720414397d943b6ed363fa942af4bced16ab2e8ea89
mergeReportPlugin_ArtifactId
protected void mergeReportPlugin_ArtifactId(ReportPlugin target, ReportPlugin source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getArtifactId();    if (src != null) {        if (sourceDominant || target.getArtifactId() == null) {            target.setArtifactId(src);            target.setLocation("artifactId", source.getLocation("artifactId"));        }    }}
f06bd4dc2f1b7e6928dded6b01bb80ec99f85ff79da63b96aa0fd0d1f51a22e1
mergeReportPlugin_Version
protected void mergeReportPlugin_Version(ReportPlugin target, ReportPlugin source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getVersion();    if (src != null) {        if (sourceDominant || target.getVersion() == null) {            target.setVersion(src);            target.setLocation("version", source.getLocation("version"));        }    }}
d71aa350681362d64960a05c6461e5314519ff28c275f981fa1e27a40e0eab76
mergeReportPlugin_ReportSets
protected void mergeReportPlugin_ReportSets(ReportPlugin target, ReportPlugin source, boolean sourceDominant, Map<Object, Object> context)
{    target.setReportSets(merge(target.getReportSets(), source.getReportSets(), sourceDominant, new ReportSetKeyComputer()));}
76ef2ecc4e1daf1c8ff6784ca711a487b20d7c9c1d9522d3a0404e59532fe88e
mergeReportSet
protected void mergeReportSet(ReportSet target, ReportSet source, boolean sourceDominant, Map<Object, Object> context)
{    mergeConfigurationContainer(target, source, sourceDominant, context);    mergeReportSet_Id(target, source, sourceDominant, context);    mergeReportSet_Reports(target, source, sourceDominant, context);}
3cdb03a10198bec559dfc7931c897fd5678034c2bc8914d513335f0c9eae73f8
mergeReportSet_Id
protected void mergeReportSet_Id(ReportSet target, ReportSet source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getId();    if (src != null) {        if (sourceDominant || target.getId() == null) {            target.setId(src);            target.setLocation("id", source.getLocation("id"));        }    }}
323a45564ee33a62cc09f50ab6e093026df0c16dba7505a79c0214c1ec532437
mergeReportSet_Reports
protected void mergeReportSet_Reports(ReportSet target, ReportSet source, boolean sourceDominant, Map<Object, Object> context)
{    List<String> src = source.getReports();    if (!src.isEmpty()) {        List<String> tgt = target.getReports();        List<String> merged = new ArrayList<>(tgt.size() + src.size());        merged.addAll(tgt);        merged.addAll(src);        target.setReports(merged);        InputLocation sourceLocation = source.getLocation("reports");        if (sourceLocation != null) {            InputLocation targetLocation = target.getLocation("reports");            if (targetLocation == null) {                target.setLocation("reports", sourceLocation);            } else {                for (int i = 0; i < src.size(); i++) {                    targetLocation.setLocation(Integer.valueOf(tgt.size() + i), sourceLocation.getLocation(Integer.valueOf(i)));                }            }        }    }}
20b7f0ab86c1412177a05f6e7f8981b3fa33142c921c263d74e3b1550a43e232
mergeDependencyManagement
protected void mergeDependencyManagement(DependencyManagement target, DependencyManagement source, boolean sourceDominant, Map<Object, Object> context)
{    mergeDependencyManagement_Dependencies(target, source, sourceDominant, context);}
359c8706c742616f15cbab4eea004dc597f03e4975abee680dfaede96b0fd085
mergeDependencyManagement_Dependencies
protected void mergeDependencyManagement_Dependencies(DependencyManagement target, DependencyManagement source, boolean sourceDominant, Map<Object, Object> context)
{    target.setDependencies(merge(target.getDependencies(), source.getDependencies(), sourceDominant, new DependencyKeyComputer()));}
8faed87903dc35f73e9c5a96c0f3654eceed1c6aa7004e868041e8d17ce1e5d6
mergeParent
protected void mergeParent(Parent target, Parent source, boolean sourceDominant, Map<Object, Object> context)
{    mergeParent_GroupId(target, source, sourceDominant, context);    mergeParent_ArtifactId(target, source, sourceDominant, context);    mergeParent_Version(target, source, sourceDominant, context);    mergeParent_RelativePath(target, source, sourceDominant, context);}
9329c0c6964b4470108352d3cc440c99730bf77839668eaa8267aef7f94df460
mergeParent_GroupId
protected void mergeParent_GroupId(Parent target, Parent source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getGroupId();    if (src != null) {        if (sourceDominant || target.getGroupId() == null) {            target.setGroupId(src);            target.setLocation("groupId", source.getLocation("groupId"));        }    }}
f0846b8937d5583a445d5857c32f1a25b2af98d24217adfb2a011053b16d9e42
mergeParent_ArtifactId
protected void mergeParent_ArtifactId(Parent target, Parent source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getArtifactId();    if (src != null) {        if (sourceDominant || target.getArtifactId() == null) {            target.setArtifactId(src);            target.setLocation("artifactId", source.getLocation("artifactId"));        }    }}
2b3863b3000afbf33985acdd9c7af9f83619a4aacf5a22131855c53e39e66dd5
mergeParent_Version
protected void mergeParent_Version(Parent target, Parent source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getVersion();    if (src != null) {        if (sourceDominant || target.getVersion() == null) {            target.setVersion(src);            target.setLocation("version", source.getLocation("version"));        }    }}
a7c9fe7772dc341bd35e3ef7092d964847f31a4456195cdc3e3bc837476b34e5
mergeParent_RelativePath
protected void mergeParent_RelativePath(Parent target, Parent source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getRelativePath();    if (src != null) {        if (sourceDominant || target.getRelativePath() == null) {            target.setRelativePath(src);            target.setLocation("relativePath", source.getLocation("relativePath"));        }    }}
37e32c9d3ce225b834394cacf2940bcd23173a5b8d723082f046823b24c4e374
mergeOrganization
protected void mergeOrganization(Organization target, Organization source, boolean sourceDominant, Map<Object, Object> context)
{    mergeOrganization_Name(target, source, sourceDominant, context);    mergeOrganization_Url(target, source, sourceDominant, context);}
b642a7f8e958aa4e1f6183bed3380166cd760d6a344d8417c086d405bd189a06
mergeOrganization_Name
protected void mergeOrganization_Name(Organization target, Organization source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getName();    if (src != null) {        if (sourceDominant || target.getName() == null) {            target.setName(src);            target.setLocation("name", source.getLocation("name"));        }    }}
a9da8e526c921650aa872f0dd37145b53887a56c3b87f0a7bdfbc47cc13c0d81
mergeOrganization_Url
protected void mergeOrganization_Url(Organization target, Organization source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getUrl();    if (src != null) {        if (sourceDominant || target.getUrl() == null) {            target.setUrl(src);            target.setLocation("url", source.getLocation("url"));        }    }}
3ab40d170637b3d331d6b0e3ad915f82f84d302b661ccc2152769f2d9773c990
mergeLicense
protected void mergeLicense(License target, License source, boolean sourceDominant, Map<Object, Object> context)
{    mergeLicense_Name(target, source, sourceDominant, context);    mergeLicense_Url(target, source, sourceDominant, context);    mergeLicense_Distribution(target, source, sourceDominant, context);    mergeLicense_Comments(target, source, sourceDominant, context);}
4fef0d21665ab93fc4c4bccf2e730070090152e409c5ca66f3e52af8c3745aab
mergeLicense_Name
protected void mergeLicense_Name(License target, License source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getName();    if (src != null) {        if (sourceDominant || target.getName() == null) {            target.setName(src);            target.setLocation("name", source.getLocation("name"));        }    }}
85d5343ca65b9468732c17d30552db47791c50a12e7f924a2f68ef7524f08683
mergeLicense_Url
protected void mergeLicense_Url(License target, License source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getUrl();    if (src != null) {        if (sourceDominant || target.getUrl() == null) {            target.setUrl(src);            target.setLocation("url", source.getLocation("url"));        }    }}
9b7c19f8ecbc9f16dec530b53bd2edf1069b518fdbf9a53776daf39d71096d88
mergeLicense_Distribution
protected void mergeLicense_Distribution(License target, License source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getDistribution();    if (src != null) {        if (sourceDominant || target.getDistribution() == null) {            target.setDistribution(src);            target.setLocation("distribution", source.getLocation("distribution"));        }    }}
1a1952833484f497e6cf45d30f4c9db91b9fd33f907e341eaecc3692f1e1952c
mergeLicense_Comments
protected void mergeLicense_Comments(License target, License source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getComments();    if (src != null) {        if (sourceDominant || target.getComments() == null) {            target.setComments(src);            target.setLocation("comments", source.getLocation("comments"));        }    }}
8268afbe76526e2be097165dac7bc27fe115d5470631c9fbcdcb9dc0ca0ed615
mergeMailingList
protected void mergeMailingList(MailingList target, MailingList source, boolean sourceDominant, Map<Object, Object> context)
{    mergeMailingList_Name(target, source, sourceDominant, context);    mergeMailingList_Subscribe(target, source, sourceDominant, context);    mergeMailingList_Unsubscribe(target, source, sourceDominant, context);    mergeMailingList_Post(target, source, sourceDominant, context);    mergeMailingList_OtherArchives(target, source, sourceDominant, context);}
278ea6205898edabb1ccf3aac2452c021e57080bb26e55c90d69e758b15ab38c
mergeMailingList_Name
protected void mergeMailingList_Name(MailingList target, MailingList source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getName();    if (src != null) {        if (sourceDominant || target.getName() == null) {            target.setName(src);            target.setLocation("name", source.getLocation("name"));        }    }}
6bbb3b453e78ba52cd5d82cf54f24c46f24998b9d11007f2248f2955ca0ab6e1
mergeMailingList_Subscribe
protected void mergeMailingList_Subscribe(MailingList target, MailingList source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getSubscribe();    if (src != null) {        if (sourceDominant || target.getSubscribe() == null) {            target.setSubscribe(src);            target.setLocation("subscribe", source.getLocation("subscribe"));        }    }}
760cf4992e16a2fa86e77955a071e5d5ab6e6703a8b9261e664a78f11f5ff37e
mergeMailingList_Unsubscribe
protected void mergeMailingList_Unsubscribe(MailingList target, MailingList source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getUnsubscribe();    if (src != null) {        if (sourceDominant || target.getUnsubscribe() == null) {            target.setUnsubscribe(src);            target.setLocation("unsubscribe", source.getLocation("unsubscribe"));        }    }}
5fc15d77e315de926bedebf2d64d9a92bf45fce5aae90758541f47857c0bb5cd
mergeMailingList_Post
protected void mergeMailingList_Post(MailingList target, MailingList source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getPost();    if (src != null) {        if (sourceDominant || target.getPost() == null) {            target.setPost(src);            target.setLocation("post", source.getLocation("post"));        }    }}
974b70829582e0336728c7827e4e5fb27dfa533b4e556252ab2b22b267921546
mergeMailingList_Archive
protected void mergeMailingList_Archive(MailingList target, MailingList source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getArchive();    if (src != null) {        if (sourceDominant || target.getArchive() == null) {            target.setArchive(src);            target.setLocation("archive", source.getLocation("archive"));        }    }}
167cbf7252eb540a32f71584c5f0e4e158b82ee52bc1ba19dd5548fc9bbee716
mergeMailingList_OtherArchives
protected void mergeMailingList_OtherArchives(MailingList target, MailingList source, boolean sourceDominant, Map<Object, Object> context)
{    List<String> src = source.getOtherArchives();    if (!src.isEmpty()) {        List<String> tgt = target.getOtherArchives();        List<String> merged = new ArrayList<>(tgt.size() + src.size());        merged.addAll(tgt);        merged.addAll(src);        target.setOtherArchives(merged);    }}
d9c5c99bfed69e8a17062074da2d1fe88b3ff0d0be071f92c6c5dee3c0c3c8f2
mergeDeveloper
protected void mergeDeveloper(Developer target, Developer source, boolean sourceDominant, Map<Object, Object> context)
{    mergeContributor(target, source, sourceDominant, context);    mergeDeveloper_Id(target, source, sourceDominant, context);}
a7c52abece9d4a58503787a839473664cda4ca4e9a960b59a5daa133edf97341
mergeDeveloper_Id
protected void mergeDeveloper_Id(Developer target, Developer source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getId();    if (src != null) {        if (sourceDominant || target.getId() == null) {            target.setId(src);            target.setLocation("id", source.getLocation("id"));        }    }}
1c97c9d9a336d70fba8b3a0ca3cb12bce5f393c9b5d93638c19be52d2f4cdc8d
mergeContributor
protected void mergeContributor(Contributor target, Contributor source, boolean sourceDominant, Map<Object, Object> context)
{    mergeContributor_Name(target, source, sourceDominant, context);    mergeContributor_Email(target, source, sourceDominant, context);    mergeContributor_Url(target, source, sourceDominant, context);    mergeContributor_Organization(target, source, sourceDominant, context);    mergeContributor_OrganizationUrl(target, source, sourceDominant, context);    mergeContributor_Timezone(target, source, sourceDominant, context);    mergeContributor_Roles(target, source, sourceDominant, context);    mergeContributor_Properties(target, source, sourceDominant, context);}
6c0c6c1524856436efe60617d299d4a30bd46dc2184b393aea4a9e0acacb3c67
mergeContributor_Name
protected void mergeContributor_Name(Contributor target, Contributor source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getName();    if (src != null) {        if (sourceDominant || target.getName() == null) {            target.setName(src);            target.setLocation("name", source.getLocation("name"));        }    }}
565e87315b4913fb31b990f10d4a4a975c77bd6d81a5911625d64fa1f61e74ce
mergeContributor_Email
protected void mergeContributor_Email(Contributor target, Contributor source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getEmail();    if (src != null) {        if (sourceDominant || target.getEmail() == null) {            target.setEmail(src);            target.setLocation("email", source.getLocation("email"));        }    }}
1665339d110d45c858b8c07d2c24a900b6d9583cf8c69e02fe25dbd7a844418a
mergeContributor_Url
protected void mergeContributor_Url(Contributor target, Contributor source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getUrl();    if (src != null) {        if (sourceDominant || target.getUrl() == null) {            target.setUrl(src);            target.setLocation("url", source.getLocation("url"));        }    }}
fc9f4ebff30265f47a8b53cb596e81147b1ce1836a3a1be3aa4239228608eefa
mergeContributor_Organization
protected void mergeContributor_Organization(Contributor target, Contributor source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getOrganization();    if (src != null) {        if (sourceDominant || target.getOrganization() == null) {            target.setOrganization(src);            target.setLocation("organization", source.getLocation("organization"));        }    }}
c158d7d0fcba605d9c6b9c03af1dc76b1c6378cbd51feadadaa686cdd3189cbb
mergeContributor_OrganizationUrl
protected void mergeContributor_OrganizationUrl(Contributor target, Contributor source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getOrganizationUrl();    if (src != null) {        if (sourceDominant || target.getOrganizationUrl() == null) {            target.setOrganizationUrl(src);            target.setLocation("organizationUrl", source.getLocation("organizationUrl"));        }    }}
8e5f42b68c5522d5fa5a8f666c40e0e426c4157df8eb02822a30e59956a35c2c
mergeContributor_Timezone
protected void mergeContributor_Timezone(Contributor target, Contributor source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getTimezone();    if (src != null) {        if (sourceDominant || target.getTimezone() == null) {            target.setTimezone(src);            target.setLocation("timezone", source.getLocation("timezone"));        }    }}
3db36c8d975997361bb0ee44f15f12a788e55f38d4f98141dd1cfb44e7932c7e
mergeContributor_Roles
protected void mergeContributor_Roles(Contributor target, Contributor source, boolean sourceDominant, Map<Object, Object> context)
{    List<String> src = source.getRoles();    if (!src.isEmpty()) {        List<String> tgt = target.getRoles();        List<String> merged = new ArrayList<>(tgt.size() + src.size());        merged.addAll(tgt);        merged.addAll(src);        target.setRoles(merged);    }}
10cced26de394cdfe814497eeb3ecbee34ca62d877de696616fba00e98663b93
mergeContributor_Properties
protected void mergeContributor_Properties(Contributor target, Contributor source, boolean sourceDominant, Map<Object, Object> context)
{    Properties merged = new Properties();    if (sourceDominant) {        merged.putAll(target.getProperties());        merged.putAll(source.getProperties());    } else {        merged.putAll(source.getProperties());        merged.putAll(target.getProperties());    }    target.setProperties(merged);    target.setLocation("properties", InputLocation.merge(target.getLocation("properties"), source.getLocation("properties"), sourceDominant));}
d72a140ebd25ae08d399d2940991c226376f71867c825bc395c570243d9068d1
mergeIssueManagement
protected void mergeIssueManagement(IssueManagement target, IssueManagement source, boolean sourceDominant, Map<Object, Object> context)
{    mergeIssueManagement_Url(target, source, sourceDominant, context);    mergeIssueManagement_System(target, source, sourceDominant, context);}
279bb55e18b1ad76e990012d78654239d239837d700cbe492316e84ac4804236
mergeIssueManagement_System
protected void mergeIssueManagement_System(IssueManagement target, IssueManagement source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getSystem();    if (src != null) {        if (sourceDominant || target.getSystem() == null) {            target.setSystem(src);            target.setLocation("system", source.getLocation("system"));        }    }}
41a2552917475f0f713031f440b4dc6d08333c30f158b8775c1ec2c2c198a8e9
mergeIssueManagement_Url
protected void mergeIssueManagement_Url(IssueManagement target, IssueManagement source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getUrl();    if (src != null) {        if (sourceDominant || target.getUrl() == null) {            target.setUrl(src);            target.setLocation("url", source.getLocation("url"));        }    }}
4b5b12031ca4bedad9d16a0c0b3862c12c1466bd8c08876e8ca7813271ad178e
mergeScm
protected void mergeScm(Scm target, Scm source, boolean sourceDominant, Map<Object, Object> context)
{    mergeScm_ChildScmConnectionInheritAppendPath(target, source, sourceDominant, context);    mergeScm_ChildScmDeveloperConnectionInheritAppendPath(target, source, sourceDominant, context);    mergeScm_ChildScmUrlInheritAppendPath(target, source, sourceDominant, context);    mergeScm_Url(target, source, sourceDominant, context);    mergeScm_Connection(target, source, sourceDominant, context);    mergeScm_DeveloperConnection(target, source, sourceDominant, context);    mergeScm_Tag(target, source, sourceDominant, context);}
df663ee91182f8e9af3d130eeed188956509f0a47ac55927194ccd62a0e2781a
mergeScm_ChildScmConnectionInheritAppendPath
protected void mergeScm_ChildScmConnectionInheritAppendPath(Scm target, Scm source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getChildScmConnectionInheritAppendPath();    if (src != null) {        if (sourceDominant || target.getChildScmConnectionInheritAppendPath() == null) {            target.setChildScmConnectionInheritAppendPath(src);            target.setLocation("child.scm.connection.inherit.append.path", source.getLocation("child.scm.connection.inherit.append.path"));        }    }}
ec44b0792c414ab7b0b02d1ec00adf4ce6d191d41f601475c706c92ec05fb6d4
mergeScm_ChildScmDeveloperConnectionInheritAppendPath
protected void mergeScm_ChildScmDeveloperConnectionInheritAppendPath(Scm target, Scm source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getChildScmDeveloperConnectionInheritAppendPath();    if (src != null) {        if (sourceDominant || target.getChildScmDeveloperConnectionInheritAppendPath() == null) {            target.setChildScmDeveloperConnectionInheritAppendPath(src);            target.setLocation("child.scm.developerConnection.inherit.append.path", source.getLocation("child.scm.developerConnection.inherit.append.path"));        }    }}
6dc1d6c010f9c2c3e864a58e73131dfb852af6150bfa4786c7afd81a66a822e3
mergeScm_ChildScmUrlInheritAppendPath
protected void mergeScm_ChildScmUrlInheritAppendPath(Scm target, Scm source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getChildScmUrlInheritAppendPath();    if (src != null) {        if (sourceDominant || target.getChildScmUrlInheritAppendPath() == null) {            target.setChildScmUrlInheritAppendPath(src);            target.setLocation("child.scm.url.inherit.append.path", source.getLocation("child.scm.url.inherit.append.path"));        }    }}
dbb1131c21d74b1bd89fc75b16e5578cdb94f8f8745cbd92639a888c6145b1fc
mergeScm_Url
protected void mergeScm_Url(Scm target, Scm source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getUrl();    if (src != null) {        if (sourceDominant || target.getUrl() == null) {            target.setUrl(src);            target.setLocation("url", source.getLocation("url"));        }    }}
42e45216b327a03bca878fe8775815243bf7c2a4de28d2d59b314fecf647e434
mergeScm_Connection
protected void mergeScm_Connection(Scm target, Scm source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getConnection();    if (src != null) {        if (sourceDominant || target.getConnection() == null) {            target.setConnection(src);            target.setLocation("connection", source.getLocation("connection"));        }    }}
c486146ba2bebf9a0b7addd163ac331fb16d8e9c79b055b32a1977a0479ed542
mergeScm_DeveloperConnection
protected void mergeScm_DeveloperConnection(Scm target, Scm source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getDeveloperConnection();    if (src != null) {        if (sourceDominant || target.getDeveloperConnection() == null) {            target.setDeveloperConnection(src);            target.setLocation("developerConnection", source.getLocation("developerConnection"));        }    }}
daf42c365b99074f678da717bbee726611410959cfcfd6093b217136619d7522
mergeScm_Tag
protected void mergeScm_Tag(Scm target, Scm source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getTag();    if (src != null) {        if (sourceDominant || target.getTag() == null) {            target.setTag(src);            target.setLocation("tag", source.getLocation("tag"));        }    }}
365b4b5d4d6606ff783722bb5b1f97edd48562dcb024e7fbc371effed762c346
mergeCiManagement
protected void mergeCiManagement(CiManagement target, CiManagement source, boolean sourceDominant, Map<Object, Object> context)
{    mergeCiManagement_System(target, source, sourceDominant, context);    mergeCiManagement_Url(target, source, sourceDominant, context);    mergeCiManagement_Notifiers(target, source, sourceDominant, context);}
98ff6a5bee8b3260b2f40b8e7df88e42a2b4065c4a4367e67495924e11884520
mergeCiManagement_System
protected void mergeCiManagement_System(CiManagement target, CiManagement source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getSystem();    if (src != null) {        if (sourceDominant || target.getSystem() == null) {            target.setSystem(src);            target.setLocation("system", source.getLocation("system"));        }    }}
77f2419b5b42e359ac670c32d1869a37b357a1d9f2fb6094d7ef938002a7962f
mergeCiManagement_Url
protected void mergeCiManagement_Url(CiManagement target, CiManagement source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getUrl();    if (src != null) {        if (sourceDominant || target.getUrl() == null) {            target.setUrl(src);            target.setLocation("url", source.getLocation("url"));        }    }}
76d9b834fd153964fa712db207182c467546df898713d84c2c67b389751f5d35
mergeCiManagement_Notifiers
protected void mergeCiManagement_Notifiers(CiManagement target, CiManagement source, boolean sourceDominant, Map<Object, Object> context)
{    target.setNotifiers(merge(target.getNotifiers(), source.getNotifiers(), sourceDominant, new NotifierKeyComputer()));}
67eeceb0a250fbf6e8d4ce4196dee0d288fa6150bd5c74e6036a07d489d53494
mergeNotifier
protected void mergeNotifier(Notifier target, Notifier source, boolean sourceDominant, Map<Object, Object> context)
{    mergeNotifier_Type(target, source, sourceDominant, context);    mergeNotifier_Address(target, source, sourceDominant, context);    mergeNotifier_Configuration(target, source, sourceDominant, context);    mergeNotifier_SendOnError(target, source, sourceDominant, context);    mergeNotifier_SendOnFailure(target, source, sourceDominant, context);    mergeNotifier_SendOnSuccess(target, source, sourceDominant, context);    mergeNotifier_SendOnWarning(target, source, sourceDominant, context);}
92e63dfd0879e12cd91200e573c1a93c3f70878ebb465b141d4f739f706a886c
mergeNotifier_Type
protected void mergeNotifier_Type(Notifier target, Notifier source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getType();    if (src != null) {        if (sourceDominant || target.getType() == null) {            target.setType(src);        }    }}
9aab5f1f9de1f0161035f0caccc25ac08e8ca7c5166dd045414345b0d2fc3c6a
mergeNotifier_Address
protected void mergeNotifier_Address(Notifier target, Notifier source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getAddress();    if (src != null) {        if (sourceDominant || target.getAddress() == null) {            target.setAddress(src);        }    }}
b64cc68b744f24bf08ad6bec8dcb52cf0aa823450c3d3b595044a1947d73e0e1
mergeNotifier_Configuration
protected void mergeNotifier_Configuration(Notifier target, Notifier source, boolean sourceDominant, Map<Object, Object> context)
{    Properties merged = new Properties();    if (sourceDominant) {        merged.putAll(target.getConfiguration());        merged.putAll(source.getConfiguration());    } else {        merged.putAll(source.getConfiguration());        merged.putAll(target.getConfiguration());    }    target.setConfiguration(merged);}
10ea13a8c8356dcb7b3f93a518288c26c2b47536d0e8d68a36d5e8f3fb5f7815
mergeNotifier_SendOnError
protected void mergeNotifier_SendOnError(Notifier target, Notifier source, boolean sourceDominant, Map<Object, Object> context)
{    if (sourceDominant) {        target.setSendOnError(source.isSendOnError());    }}
80e1fe1f5a339262faf1370ad224206daa4abd4cc6b89e9c1c0b294562e49dd4
mergeNotifier_SendOnFailure
protected void mergeNotifier_SendOnFailure(Notifier target, Notifier source, boolean sourceDominant, Map<Object, Object> context)
{    if (sourceDominant) {        target.setSendOnFailure(source.isSendOnFailure());    }}
f3e84d465db5c1dd7363e9269bbc18d237edaf21baad015c60d55d5e7cdf6d36
mergeNotifier_SendOnSuccess
protected void mergeNotifier_SendOnSuccess(Notifier target, Notifier source, boolean sourceDominant, Map<Object, Object> context)
{    if (sourceDominant) {        target.setSendOnSuccess(source.isSendOnSuccess());    }}
9d0e85bb1e6294ed07eb6c6683e84e781b8bc739c0b185bbad7be5418aceb323
mergeNotifier_SendOnWarning
protected void mergeNotifier_SendOnWarning(Notifier target, Notifier source, boolean sourceDominant, Map<Object, Object> context)
{    if (sourceDominant) {        target.setSendOnWarning(source.isSendOnWarning());    }}
09eb9749fbd94d9df54d262b04e9b84c031f306bb1a4aa73b0d3f3ece5d58461
mergePrerequisites
protected void mergePrerequisites(Prerequisites target, Prerequisites source, boolean sourceDominant, Map<Object, Object> context)
{    mergePrerequisites_Maven(target, source, sourceDominant, context);}
669ea6112396ddabd0076386597a2e8e2d7e7da8072c090def240400a9f6e813
mergePrerequisites_Maven
protected void mergePrerequisites_Maven(Prerequisites target, Prerequisites source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getMaven();    if (src != null) {        if (sourceDominant || target.getMaven() == null) {            target.setMaven(src);            target.setLocation("maven", source.getLocation("maven"));        }    }}
50461c79fc1dbabd2639014366bbfe03b5e046711b935b68d0b94a19bde2c06d
mergeBuild
protected void mergeBuild(Build target, Build source, boolean sourceDominant, Map<Object, Object> context)
{    mergeBuildBase(target, source, sourceDominant, context);    mergeBuild_SourceDirectory(target, source, sourceDominant, context);    mergeBuild_ScriptSourceDirectory(target, source, sourceDominant, context);    mergeBuild_TestSourceDirectory(target, source, sourceDominant, context);    mergeBuild_OutputDirectory(target, source, sourceDominant, context);    mergeBuild_TestOutputDirectory(target, source, sourceDominant, context);    mergeBuild_Extensions(target, source, sourceDominant, context);}
84523b34d5d48adc90b93e719d1c9ba43ea986d23e3b85228e152ffa95483ab9
mergeBuild_SourceDirectory
protected void mergeBuild_SourceDirectory(Build target, Build source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getSourceDirectory();    if (src != null) {        if (sourceDominant || target.getSourceDirectory() == null) {            target.setSourceDirectory(src);            target.setLocation("sourceDirectory", source.getLocation("sourceDirectory"));        }    }}
bfc0e43b0d660713c54037018d41374569673379fb0adfbc93a9b8e316b954cd
mergeBuild_ScriptSourceDirectory
protected void mergeBuild_ScriptSourceDirectory(Build target, Build source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getScriptSourceDirectory();    if (src != null) {        if (sourceDominant || target.getScriptSourceDirectory() == null) {            target.setScriptSourceDirectory(src);            target.setLocation("scriptSourceDirectory", source.getLocation("scriptSourceDirectory"));        }    }}
6abf19db3946c20c5ac1a2e23de3b5a8f70c1df806602466399f4fa5aa921bce
mergeBuild_TestSourceDirectory
protected void mergeBuild_TestSourceDirectory(Build target, Build source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getTestSourceDirectory();    if (src != null) {        if (sourceDominant || target.getTestSourceDirectory() == null) {            target.setTestSourceDirectory(src);            target.setLocation("testSourceDirectory", source.getLocation("testSourceDirectory"));        }    }}
d44a00a536d9527caeaaa79d8481a4d05077f3aa82086ab60b34616bcf63b7f7
mergeBuild_OutputDirectory
protected void mergeBuild_OutputDirectory(Build target, Build source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getOutputDirectory();    if (src != null) {        if (sourceDominant || target.getOutputDirectory() == null) {            target.setOutputDirectory(src);            target.setLocation("outputDirectory", source.getLocation("outputDirectory"));        }    }}
29795aa5658f36ee17f1b133151ea3cec615f0cbb4bafb3a0b509c37fb91055b
mergeBuild_TestOutputDirectory
protected void mergeBuild_TestOutputDirectory(Build target, Build source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getTestOutputDirectory();    if (src != null) {        if (sourceDominant || target.getTestOutputDirectory() == null) {            target.setTestOutputDirectory(src);            target.setLocation("testOutputDirectory", source.getLocation("testOutputDirectory"));        }    }}
f72fcea69437d0c08f01e08478d07fcb56ccf6bb0d7c78faeea662e39a160f32
mergeBuild_Extensions
protected void mergeBuild_Extensions(Build target, Build source, boolean sourceDominant, Map<Object, Object> context)
{    target.setExtensions(merge(target.getExtensions(), source.getExtensions(), sourceDominant, new ExtensionKeyComputer()));}
020d808e1d36dd91f7fc04b157854c780ec9bb2a73bb4b0da62ce0becafe5bde
mergeExtension
protected void mergeExtension(Extension target, Extension source, boolean sourceDominant, Map<Object, Object> context)
{    mergeExtension_GroupId(target, source, sourceDominant, context);    mergeExtension_ArtifactId(target, source, sourceDominant, context);    mergeExtension_Version(target, source, sourceDominant, context);}
d45e0884e5d33c54e34e2d024d362510d622752e154de3b167d8793f383da2e5
mergeExtension_GroupId
protected void mergeExtension_GroupId(Extension target, Extension source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getGroupId();    if (src != null) {        if (sourceDominant || target.getGroupId() == null) {            target.setGroupId(src);            target.setLocation("groupId", source.getLocation("groupId"));        }    }}
a0b7ed46ca80a8be2dd9cf26ca87f965ef4e839d156781a299ef1400a68cf117
mergeExtension_ArtifactId
protected void mergeExtension_ArtifactId(Extension target, Extension source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getArtifactId();    if (src != null) {        if (sourceDominant || target.getArtifactId() == null) {            target.setArtifactId(src);            target.setLocation("artifactId", source.getLocation("artifactId"));        }    }}
8b3cb1af94535b41d530d466d8fab96aa52bb9e43a9947b778b92fc467278ecc
mergeExtension_Version
protected void mergeExtension_Version(Extension target, Extension source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getVersion();    if (src != null) {        if (sourceDominant || target.getVersion() == null) {            target.setVersion(src);            target.setLocation("version", source.getLocation("version"));        }    }}
533691dd46a7d93098617f7d2439e6ac0671545718b76485515b0006dcf6e57f
mergeBuildBase
protected void mergeBuildBase(BuildBase target, BuildBase source, boolean sourceDominant, Map<Object, Object> context)
{    mergePluginConfiguration(target, source, sourceDominant, context);    mergeBuildBase_DefaultGoal(target, source, sourceDominant, context);    mergeBuildBase_FinalName(target, source, sourceDominant, context);    mergeBuildBase_Directory(target, source, sourceDominant, context);    mergeBuildBase_Resources(target, source, sourceDominant, context);    mergeBuildBase_TestResources(target, source, sourceDominant, context);    mergeBuildBase_Filters(target, source, sourceDominant, context);}
6ccc1cf4f133fbeadf41f4c5c0cb6b1cfb3fc1f9408d37e27400f830b945edbe
mergeBuildBase_DefaultGoal
protected void mergeBuildBase_DefaultGoal(BuildBase target, BuildBase source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getDefaultGoal();    if (src != null) {        if (sourceDominant || target.getDefaultGoal() == null) {            target.setDefaultGoal(src);            target.setLocation("defaultGoal", source.getLocation("defaultGoal"));        }    }}
7b30547505ed3624f6ca36bc9c77365c8386a62b7f01e456fe02c4f5a4c6d55e
mergeBuildBase_Directory
protected void mergeBuildBase_Directory(BuildBase target, BuildBase source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getDirectory();    if (src != null) {        if (sourceDominant || target.getDirectory() == null) {            target.setDirectory(src);            target.setLocation("directory", source.getLocation("directory"));        }    }}
4027658067586ea8bdfc484821cfbeb60fab75de971cacbaf3dac4542c74e212
mergeBuildBase_FinalName
protected void mergeBuildBase_FinalName(BuildBase target, BuildBase source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getFinalName();    if (src != null) {        if (sourceDominant || target.getFinalName() == null) {            target.setFinalName(src);            target.setLocation("finalName", source.getLocation("finalName"));        }    }}
6994a3fc2db1550bb27d0b3d42bd64c211dd79d0825b4b81bf00cc8ad3f43d73
mergeBuildBase_Filters
protected void mergeBuildBase_Filters(BuildBase target, BuildBase source, boolean sourceDominant, Map<Object, Object> context)
{    List<String> src = source.getFilters();    if (!src.isEmpty()) {        List<String> tgt = target.getFilters();        List<String> merged = new ArrayList<>(tgt.size() + src.size());        merged.addAll(tgt);        merged.addAll(src);        target.setFilters(merged);    }}
6d2be137a082d89dafae56c24248437011cdd11a8091f92b65298d972cee9f1a
mergeBuildBase_Resources
protected void mergeBuildBase_Resources(BuildBase target, BuildBase source, boolean sourceDominant, Map<Object, Object> context)
{    target.setResources(merge(target.getResources(), source.getResources(), sourceDominant, new ResourceKeyComputer()));}
dbcb14060c8f48e2c681aaac386bd09d15afd955418896ebeebfa4faf773d7e8
mergeBuildBase_TestResources
protected void mergeBuildBase_TestResources(BuildBase target, BuildBase source, boolean sourceDominant, Map<Object, Object> context)
{    target.setTestResources(merge(target.getTestResources(), source.getTestResources(), sourceDominant, new ResourceKeyComputer()));}
d5c1aa2603f5ee8d9ba87df67e4cbd20c387275486f4eaffdc5be7142bc33342
mergePluginConfiguration
protected void mergePluginConfiguration(PluginConfiguration target, PluginConfiguration source, boolean sourceDominant, Map<Object, Object> context)
{    mergePluginContainer(target, source, sourceDominant, context);    mergePluginConfiguration_PluginManagement(target, source, sourceDominant, context);}
5fde70f4ec2d1d051a8f444c14d630e262ddd08bdd18a59407edde224c5a9894
mergePluginConfiguration_PluginManagement
protected void mergePluginConfiguration_PluginManagement(PluginConfiguration target, PluginConfiguration source, boolean sourceDominant, Map<Object, Object> context)
{    PluginManagement src = source.getPluginManagement();    if (src != null) {        PluginManagement tgt = target.getPluginManagement();        if (tgt == null) {            tgt = new PluginManagement();            target.setPluginManagement(tgt);        }        mergePluginManagement(tgt, src, sourceDominant, context);    }}
74556322425c0298e57bc91d9f3f26e63d1978bdadcffb953946cb9072929d2c
mergePluginContainer
protected void mergePluginContainer(PluginContainer target, PluginContainer source, boolean sourceDominant, Map<Object, Object> context)
{    mergePluginContainer_Plugins(target, source, sourceDominant, context);}
4dfefd0e1a9d2e2ec36522b87bc50609dee76c19bd871b54c6c21a022b576c70
mergePluginContainer_Plugins
protected void mergePluginContainer_Plugins(PluginContainer target, PluginContainer source, boolean sourceDominant, Map<Object, Object> context)
{    target.setPlugins(merge(target.getPlugins(), source.getPlugins(), sourceDominant, new PluginKeyComputer()));}
edafc842ec531ffe4570c9995089928c34a4f9e9b86cd78779d55d2d54741034
mergePluginManagement
protected void mergePluginManagement(PluginManagement target, PluginManagement source, boolean sourceDominant, Map<Object, Object> context)
{    mergePluginContainer(target, source, sourceDominant, context);}
4f8797c8a0cb3a8f288e0a69c9dc21ace4f4969c0d34ac224589c522700aec84
mergePlugin
protected void mergePlugin(Plugin target, Plugin source, boolean sourceDominant, Map<Object, Object> context)
{    mergeConfigurationContainer(target, source, sourceDominant, context);    mergePlugin_GroupId(target, source, sourceDominant, context);    mergePlugin_ArtifactId(target, source, sourceDominant, context);    mergePlugin_Version(target, source, sourceDominant, context);    mergePlugin_Extensions(target, source, sourceDominant, context);    mergePlugin_Dependencies(target, source, sourceDominant, context);    mergePlugin_Executions(target, source, sourceDominant, context);}
359f66d5820be30dff13ba34c3210be3980538d1c14f213af5bd7fcea2f434e7
mergePlugin_GroupId
protected void mergePlugin_GroupId(Plugin target, Plugin source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getGroupId();    if (src != null) {        if (sourceDominant || target.getGroupId() == null) {            target.setGroupId(src);            target.setLocation("groupId", source.getLocation("groupId"));        }    }}
c33939c74a87185412c7af68c8047d3a467a6e4636300dbfb71835f203b762f3
mergePlugin_ArtifactId
protected void mergePlugin_ArtifactId(Plugin target, Plugin source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getArtifactId();    if (src != null) {        if (sourceDominant || target.getArtifactId() == null) {            target.setArtifactId(src);            target.setLocation("artifactId", source.getLocation("artifactId"));        }    }}
5414f3d53d5b77b16771281ed08ca7ecf3bf292416af13e032cfd56421fb42b0
mergePlugin_Version
protected void mergePlugin_Version(Plugin target, Plugin source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getVersion();    if (src != null) {        if (sourceDominant || target.getVersion() == null) {            target.setVersion(src);            target.setLocation("version", source.getLocation("version"));        }    }}
9186986cb9d046404144c0b7d1a37c945f1bb3a85cd2a80469d14a68a4a00c4b
mergePlugin_Extensions
protected void mergePlugin_Extensions(Plugin target, Plugin source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getExtensions();    if (src != null) {        if (sourceDominant || target.getExtensions() == null) {            target.setExtensions(src);            target.setLocation("extensions", source.getLocation("extensions"));        }    }}
0753de0332e200355e2388f364118f0eb76daf2ed8c686576037723bc567d300
mergePlugin_Dependencies
protected void mergePlugin_Dependencies(Plugin target, Plugin source, boolean sourceDominant, Map<Object, Object> context)
{    target.setDependencies(merge(target.getDependencies(), source.getDependencies(), sourceDominant, new DependencyKeyComputer()));}
94561c2f150c1e63a70e78ef092f147c6c77e819719f81018fd770308e07f225
mergePlugin_Executions
protected void mergePlugin_Executions(Plugin target, Plugin source, boolean sourceDominant, Map<Object, Object> context)
{    target.setExecutions(merge(target.getExecutions(), source.getExecutions(), sourceDominant, new ExecutionKeyComputer()));}
5a3b44314c87d8b767cb58f2f6a0b2698000981c5147a7ed698f1309fe2fa542
mergeConfigurationContainer
protected void mergeConfigurationContainer(ConfigurationContainer target, ConfigurationContainer source, boolean sourceDominant, Map<Object, Object> context)
{    mergeConfigurationContainer_Inherited(target, source, sourceDominant, context);    mergeConfigurationContainer_Configuration(target, source, sourceDominant, context);}
7e793050e548ee029f1c59526c18d89254470f440fee52a093c0c13f06c79231
mergeConfigurationContainer_Inherited
protected void mergeConfigurationContainer_Inherited(ConfigurationContainer target, ConfigurationContainer source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getInherited();    if (src != null) {        if (sourceDominant || target.getInherited() == null) {            target.setInherited(src);            target.setLocation("inherited", source.getLocation("inherited"));        }    }}
800f156dd1d79f548343466afc961436eb9f845c9fae61063a8ecfc861136fe8
mergeConfigurationContainer_Configuration
protected void mergeConfigurationContainer_Configuration(ConfigurationContainer target, ConfigurationContainer source, boolean sourceDominant, Map<Object, Object> context)
{    Xpp3Dom src = (Xpp3Dom) source.getConfiguration();    if (src != null) {        Xpp3Dom tgt = (Xpp3Dom) target.getConfiguration();        if (sourceDominant || tgt == null) {            tgt = Xpp3Dom.mergeXpp3Dom(new Xpp3Dom(src), tgt);        } else {            tgt = Xpp3Dom.mergeXpp3Dom(tgt, src);        }        target.setConfiguration(tgt);    }}
58fd27357979fb84941ac99bdd9ecdd0e7a6eac36bcc1d7fa0bc62f518069899
mergePluginExecution
protected void mergePluginExecution(PluginExecution target, PluginExecution source, boolean sourceDominant, Map<Object, Object> context)
{    mergeConfigurationContainer(target, source, sourceDominant, context);    mergePluginExecution_Id(target, source, sourceDominant, context);    mergePluginExecution_Phase(target, source, sourceDominant, context);    mergePluginExecution_Goals(target, source, sourceDominant, context);}
cb8c6847cce0eda49e58a5203d090472cc06265da171ca1098d7464e1ae4cf42
mergePluginExecution_Id
protected void mergePluginExecution_Id(PluginExecution target, PluginExecution source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getId();    if (src != null) {        if (sourceDominant || target.getId() == null) {            target.setId(src);            target.setLocation("id", source.getLocation("id"));        }    }}
b9f51687e2cce0cfca8a7f188b1bbbf83bd7d2fcfc457e9a8e1344c963789f32
mergePluginExecution_Phase
protected void mergePluginExecution_Phase(PluginExecution target, PluginExecution source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getPhase();    if (src != null) {        if (sourceDominant || target.getPhase() == null) {            target.setPhase(src);            target.setLocation("phase", source.getLocation("phase"));        }    }}
c4279807db5f789625fc2c55447fc95f71cbe483abe57a62ca8e52f362a47580
mergePluginExecution_Goals
protected void mergePluginExecution_Goals(PluginExecution target, PluginExecution source, boolean sourceDominant, Map<Object, Object> context)
{    List<String> src = source.getGoals();    if (!src.isEmpty()) {        List<String> tgt = target.getGoals();        List<String> merged = new ArrayList<>(tgt.size() + src.size());        merged.addAll(tgt);        merged.addAll(src);        target.setGoals(merged);    }}
cad0a2eded674c9436e8598fa758801cf6dee3ca4951db6280a04a9b0f800a7a
mergeResource
protected void mergeResource(Resource target, Resource source, boolean sourceDominant, Map<Object, Object> context)
{    mergeFileSet(target, source, sourceDominant, context);    mergeResource_TargetPath(target, source, sourceDominant, context);    mergeResource_Filtering(target, source, sourceDominant, context);    mergeResource_MergeId(target, source, sourceDominant, context);}
b0c837862aaee6ceac7119b7318a16c1c08689d34b993818fe4c52e479fc4bc2
mergeResource_TargetPath
protected void mergeResource_TargetPath(Resource target, Resource source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getTargetPath();    if (src != null) {        if (sourceDominant || target.getTargetPath() == null) {            target.setTargetPath(src);            target.setLocation("targetPath", source.getLocation("targetPath"));        }    }}
7180540d1d57d2aa86fd34da63fe870b928d9a549fd2fab8360797b30f50c3a0
mergeResource_Filtering
protected void mergeResource_Filtering(Resource target, Resource source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getFiltering();    if (src != null) {        if (sourceDominant || target.getFiltering() == null) {            target.setFiltering(src);            target.setLocation("filtering", source.getLocation("filtering"));        }    }}
c01b02ae5399b445993c2b62581a3b30cb63ddf2231f2d2494b99c9a621aa793
mergeResource_MergeId
protected void mergeResource_MergeId(Resource target, Resource source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getMergeId();    if (src != null) {        if (sourceDominant || target.getMergeId() == null) {            target.setMergeId(src);        }    }}
70255a30247a38b54cb5db07ea4c3ff01179b818ae21b2a129063c2b62b0a5b5
mergeFileSet
protected void mergeFileSet(FileSet target, FileSet source, boolean sourceDominant, Map<Object, Object> context)
{    mergePatternSet(target, source, sourceDominant, context);    mergeFileSet_Directory(target, source, sourceDominant, context);}
5cc3ba373e56b8921e0334430eb52d15bdcf2e74e3bcb9750ed67915c31882ac
mergeFileSet_Directory
protected void mergeFileSet_Directory(FileSet target, FileSet source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getDirectory();    if (src != null) {        if (sourceDominant || target.getDirectory() == null) {            target.setDirectory(src);            target.setLocation("directory", source.getLocation("directory"));        }    }}
1511a3d254c06a0bf6c03b6ca66402c577155059a4d5fa6924565e8c3ca96d37
mergePatternSet
protected void mergePatternSet(PatternSet target, PatternSet source, boolean sourceDominant, Map<Object, Object> context)
{    mergePatternSet_Includes(target, source, sourceDominant, context);    mergePatternSet_Excludes(target, source, sourceDominant, context);}
208ef5ad19e604cf8cddf411e43362cb4ab153fe953afc81ace356cffbbca5b0
mergePatternSet_Includes
protected void mergePatternSet_Includes(PatternSet target, PatternSet source, boolean sourceDominant, Map<Object, Object> context)
{    List<String> src = source.getIncludes();    if (!src.isEmpty()) {        List<String> tgt = target.getIncludes();        List<String> merged = new ArrayList<>(tgt.size() + src.size());        merged.addAll(tgt);        merged.addAll(src);        target.setIncludes(merged);    }}
ce156ca5426d4dc8a19b2f5cd24686ebd874125d49d8b3646fe070762b4bf1a8
mergePatternSet_Excludes
protected void mergePatternSet_Excludes(PatternSet target, PatternSet source, boolean sourceDominant, Map<Object, Object> context)
{    List<String> src = source.getExcludes();    if (!src.isEmpty()) {        List<String> tgt = target.getExcludes();        List<String> merged = new ArrayList<>(tgt.size() + src.size());        merged.addAll(tgt);        merged.addAll(src);        target.setExcludes(merged);    }}
a9f9b490511b3d5e233065e0e3b228d2899d7907766bbba9c09a559da5594bf6
mergeProfile
protected void mergeProfile(Profile target, Profile source, boolean sourceDominant, Map<Object, Object> context)
{    mergeModelBase(target, source, sourceDominant, context);}
36dd5f94ffc27316d77a6862437c9b912366211b1f1a82b3b6e881a546a07b9e
mergeActivation
protected void mergeActivation(Activation target, Activation source, boolean sourceDominant, Map<Object, Object> context)
{}
97a9e82d016018fb2b7aae14ee9b8cabcbc44499ae9e47bbe17bebcbaa1e82a4
getDependencyKey
protected Object getDependencyKey(Dependency dependency)
{    return dependency;}
a30f6a272dee71be9cb7636d8198665bbe45dbcf178ffaaba08377c8bbecabd3
getPluginKey
protected Object getPluginKey(Plugin plugin)
{    return plugin;}
9ebabaa6d53c162b4907871e6d6c75af2ad983a055a8a18a531055d00de5482d
getPluginExecutionKey
protected Object getPluginExecutionKey(PluginExecution pluginExecution)
{    return pluginExecution;}
4cd50b262c17af9d4d2097a5704b4e04356ba1c5304134e30bec115b0a8535d9
getReportPluginKey
protected Object getReportPluginKey(ReportPlugin reportPlugin)
{    return reportPlugin;}
f5eb0e3c4341a4a7fffc9c17f96297139f24482b3b71b2c8b8f315f184728bcc
getReportSetKey
protected Object getReportSetKey(ReportSet reportSet)
{    return reportSet;}
b59c4be5948ae2777dd14934bc09c9bafc0a21cc790e516b397eac728e2d58a2
getLicenseKey
protected Object getLicenseKey(License license)
{    return license;}
013fe231147cbdef7ede5d0c63b5db4605dc85e111f7b9d1428b6beeb0663352
getMailingListKey
protected Object getMailingListKey(MailingList mailingList)
{    return mailingList;}
b14e6762c141518906fc8ba6cbef4645023c5d1bab24b95e8ff4086b61a1ddc0
getDeveloperKey
protected Object getDeveloperKey(Developer developer)
{    return developer;}
f5a666b4aa3814c8ed1e8f7cd03303c83451d0a854171060a3a6dd8693d7e474
getContributorKey
protected Object getContributorKey(Contributor contributor)
{    return contributor;}
d5da116fc64e3ffdd50d2b03b7568564c2fc09bbf654cf60bed1513a234c3db4
getProfileKey
protected Object getProfileKey(Profile profile)
{    return profile;}
ae181261ad8fa8f55666c0a60f8c422f69865c9136fb5b5c29273ae9a779429d
getRepositoryKey
protected Object getRepositoryKey(Repository repository)
{    return getRepositoryBaseKey(repository);}
eab3f0762b4bf59cb5b4d430bc43ed0be54d9c0124107a5e9851abcac19017b8
getRepositoryBaseKey
protected Object getRepositoryBaseKey(RepositoryBase repositoryBase)
{    return repositoryBase;}
5ad53fb34d5479769cc25e639f6ca755e12fa779777b66c95761433d4f1967dd
getNotifierKey
protected Object getNotifierKey(Notifier notifier)
{    return notifier;}
ba4dee349b1d05ffa0f0171aad8346d2902ba20349d6073572016e0a40e3d1c7
getResourceKey
protected Object getResourceKey(Resource resource)
{    return resource;}
1d6d569c2bb15fbd8f939ff21336c0f2f8ffba12defad62de7ecdf82967b0c2c
getExtensionKey
protected Object getExtensionKey(Extension extension)
{    return extension;}
8276493920ef0925e9029c7a9d904a6e6938fdde2817adda91d015e708553643
getExclusionKey
protected Object getExclusionKey(Exclusion exclusion)
{    return exclusion;}
b61fefd9578275e6b2704597478a716b22811485d3d7bf02d42df83857950005
key
public Object key(Dependency dependency)
{    return getDependencyKey(dependency);}
03c751f6daf56a5263bcf27cfc302d06236d89cccb402ed418ec9150e4203c3c
key
public Object key(License license)
{    return getLicenseKey(license);}
b971b5409d820dc60d39a000d2988e2050fe7d4bd508a883206648d59434889e
key
public Object key(MailingList mailingList)
{    return getMailingListKey(mailingList);}
9f30cb196ae746a64b93f744257265fd7ab73aeed7f5d614df1c13c255ca098a
key
public Object key(Developer developer)
{    return getDeveloperKey(developer);}
2f6cf8f4ca7275ad114c1b6d9c4a2e941c5ac16edeff6fed8af97304b23c3d30
key
public Object key(Contributor contributor)
{    return getContributorKey(contributor);}
c31c69fd87f941cc277efb8db006d2ed428c5128a17ed77beb22847604acb874
key
public Object key(Profile profile)
{    return getProfileKey(profile);}
37687f7ddc2201a8eba09003ae53ec70b00a19a4a1c3ba2150a973947c9ff95a
key
public Object key(Repository repository)
{    return getRepositoryKey(repository);}
03b9582f4d3924a461e754aa92d2b545efe68e5cce3385d0143d7ee1a2d92c83
key
public Object key(ReportPlugin plugin)
{    return getReportPluginKey(plugin);}
05adecf21d7366a65eae7306b41b5bc3bf09c9371dd020141f1e1f75eb085f9b
key
public Object key(Plugin plugin)
{    return getPluginKey(plugin);}
10b622d2ce67cb11190fec0495e68c739e3bb8e880b0f01ee0ae07aa0e3a83df
key
public Object key(ReportSet reportSet)
{    return getReportSetKey(reportSet);}
e76c51c9ff3e4d0d824b4c0b53a618e41e1ef764eeb75ffe1af95cfbfcdcaec6
key
public Object key(Notifier notifier)
{    return getNotifierKey(notifier);}
c7ff58716f3f3fd5821f05c4868c7d0b4bc8321a423a10b19f98ef2abe028ab6
key
public Object key(Extension extension)
{    return getExtensionKey(extension);}
75fed9b3d2918299577d979ea6178a0856597a5530dd7dbdddfbc15af378da3b
key
public Object key(Resource resource)
{    return getResourceKey(resource);}
809efc5ea79d3a57e285e753c3e6bb56eb98d049afad7041c61c3ddf0933386a
key
public Object key(PluginExecution pluginExecution)
{    return getPluginExecutionKey(pluginExecution);}
b94ec33096430731a61c17ef081dc886d02d148751aecce917264a480a57e652
key
public Object key(Exclusion exclusion)
{    return getExclusionKey(exclusion);}
4c60ccfaf370fce134c08ee7da919a76a4bb147992bdbc7d89b32a5411d9e433
merge
public T merge(T u, T v)
{    return sourceDominant ? v : u;}
1c863d6f5950fb3f44585c2cd5c363eec810531492f0567eed9a9c5b823cc419
merge
private static List<T> merge(List<T> tgt, List<T> src, boolean sourceDominant, KeyComputer<T> computer)
{    return merge(tgt, src, computer, new SourceDominant<T>(sourceDominant));}
8cba66703004f5adbf79a7740148288eb40bd54d73d65999e30fa6e8aa1b0f06
merge
private static List<T> merge(List<T> tgt, List<T> src, KeyComputer<T> computer, Remapping<T> remapping)
{    if (src.isEmpty()) {        return tgt;    }    MergingList<T> list;    if (tgt instanceof MergingList) {        list = (MergingList<T>) tgt;    } else {        list = new MergingList<>(computer, src.size() + tgt.size());        list.mergeAll(tgt, new SourceDominant<T>(true));    }    list.mergeAll(src, remapping);    return list;}
d40381ab6f038666ae133df9f475ec0ae3c2f19a5af68da0ebdc4aa1776ccba6
iterator
public Iterator<V> iterator()
{    if (map != null) {        return map.values().iterator();    } else {        return list.iterator();    }}
4800f6b266ed49b1460cec0cd17b634bf4b6c0beef2c4cff4b4994229b6cff5d
mergeAll
 void mergeAll(Collection<V> vs, Remapping<V> remapping)
{    if (map == null) {        map = new LinkedHashMap<>(list.size() + vs.size());        for (V v : list) {            map.put(keyComputer.key(v), v);        }        list = null;    }    if (vs instanceof MergingList && ((MergingList) vs).map != null) {        for (Map.Entry<Object, V> e : ((MergingList<V>) vs).map.entrySet()) {            Object key = e.getKey();            V oldValue = map.get(key);                        V newValue = (oldValue == null) ? e.getValue() : remapping.merge(oldValue, e.getValue());            if (newValue == null) {                remove(key);            } else if (newValue != oldValue) {                map.put(key, newValue);            }        }    } else {        for (V v : vs) {            Object key = keyComputer.key(v);                        V oldValue = map.get(key);            V newValue = (oldValue == null) ? v : remapping.merge(oldValue, v);            if (newValue == null) {                remove(key);            } else {                map.put(key, newValue);            }        }    }}
4da0ec02fabfc9d8d6db55f6b5aa73f917fe3ba7bce50e808cca9ac75625aec8
contains
public boolean contains(Object o)
{    if (map != null) {        return map.containsValue(o);    } else {        return list.contains(o);    }}
4d36ef610c127f3b55b2bf8b6d20b6b0a8d0f9e6c4ab5845c2a9077a254b54a7
asList
private List<V> asList()
{    if (list == null) {        list = new ArrayList<>(map.values());        map = null;    }    return list;}
0b1e69ece96d4140bb08dabe4f49321c75479386176cd6550c7abd9a21ae1c67
add
public void add(int index, V element)
{    asList().add(index, element);}
94d1c0bf9f7f4bbd55bf9b038aea987cea7a84a4c00fa9983a8a9d2aaaefef54
remove
public V remove(int index)
{    return asList().remove(index);}
482c8796c056532d7ad019214fa6a728845ab396d838dfdd9ea2e1bc9488bdea
get
public V get(int index)
{    return asList().get(index);}
72ef1e59027007ffe0950edfd2670ad03bb65cd6463d5d1d282dfeb1750435b0
size
public int size()
{    if (map != null) {        return map.size();    } else {        return list.size();    }}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new ActivationFile().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new ActivationFile().equals(null));    new ActivationFile().equals(new ActivationFile());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    ActivationFile thing = new ActivationFile();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new ActivationFile().toString());}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new ActivationOS().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new ActivationOS().equals(null));    new ActivationOS().equals(new ActivationOS());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    ActivationOS thing = new ActivationOS();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new ActivationOS().toString());}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new ActivationProperty().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new ActivationProperty().equals(null));    new ActivationProperty().equals(new ActivationProperty());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    ActivationProperty thing = new ActivationProperty();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new ActivationProperty().toString());}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new Activation().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new Activation().equals(null));    new Activation().equals(new Activation());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    Activation thing = new Activation();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new Activation().toString());}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new Build().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new Build().equals(null));    new Build().equals(new Build());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    Build thing = new Build();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new Build().toString());}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new CiManagement().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new CiManagement().equals(null));    new CiManagement().equals(new CiManagement());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    CiManagement thing = new CiManagement();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new CiManagement().toString());}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new Contributor().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new Contributor().equals(null));    new Contributor().equals(new Contributor());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    Contributor thing = new Contributor();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new Contributor().toString());}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new DependencyManagement().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new DependencyManagement().equals(null));    new DependencyManagement().equals(new DependencyManagement());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    DependencyManagement thing = new DependencyManagement();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new DependencyManagement().toString());}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new Dependency().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new Dependency().equals(null));    new Dependency().equals(new Dependency());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    Dependency thing = new Dependency();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new Dependency().toString());}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new DeploymentRepository().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new DeploymentRepository().equals(null));    new DeploymentRepository().equals(new DeploymentRepository());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    DeploymentRepository thing = new DeploymentRepository();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new DeploymentRepository().toString());}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new Developer().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new Developer().equals(null));    new Developer().equals(new Developer());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    Developer thing = new Developer();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new Developer().toString());}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new DistributionManagement().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new DistributionManagement().equals(null));    new DistributionManagement().equals(new DistributionManagement());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    DistributionManagement thing = new DistributionManagement();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new DistributionManagement().toString());}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new Exclusion().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new Exclusion().equals(null));    new Exclusion().equals(new Exclusion());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    Exclusion thing = new Exclusion();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new Exclusion().toString());}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new Extension().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new Extension().equals(null));    new Extension().equals(new Extension());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    Extension thing = new Extension();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new Extension().toString());}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new IssueManagement().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new IssueManagement().equals(null));    new IssueManagement().equals(new IssueManagement());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    IssueManagement thing = new IssueManagement();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new IssueManagement().toString());}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new License().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new License().equals(null));    new License().equals(new License());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    License thing = new License();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new License().toString());}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new MailingList().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new MailingList().equals(null));    new MailingList().equals(new MailingList());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    MailingList thing = new MailingList();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new MailingList().toString());}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new Model().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new Model().equals(null));    new Model().equals(new Model());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    Model thing = new Model();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new Model().toString());}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new Notifier().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new Notifier().equals(null));    new Notifier().equals(new Notifier());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    Notifier thing = new Notifier();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new Notifier().toString());}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new Organization().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new Organization().equals(null));    new Organization().equals(new Organization());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    Organization thing = new Organization();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new Organization().toString());}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new Parent().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new Parent().equals(null));    new Parent().equals(new Parent());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    Parent thing = new Parent();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new Parent().toString());}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new PluginConfiguration().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new PluginConfiguration().equals(null));    new PluginConfiguration().equals(new PluginConfiguration());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    PluginConfiguration thing = new PluginConfiguration();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new PluginConfiguration().toString());}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new PluginContainer().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new PluginContainer().equals(null));    new PluginContainer().equals(new PluginContainer());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    PluginContainer thing = new PluginContainer();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new PluginContainer().toString());}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new PluginExecution().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new PluginExecution().equals(null));    new PluginExecution().equals(new PluginExecution());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    PluginExecution thing = new PluginExecution();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new PluginExecution().toString());}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new PluginManagement().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new PluginManagement().equals(null));    new PluginManagement().equals(new PluginManagement());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    PluginManagement thing = new PluginManagement();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new PluginManagement().toString());}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new Plugin().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new Plugin().equals(null));    new Plugin().equals(new Plugin());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    Plugin thing = new Plugin();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new Plugin().toString());}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new Prerequisites().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new Prerequisites().equals(null));    new Prerequisites().equals(new Prerequisites());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    Prerequisites thing = new Prerequisites();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new Prerequisites().toString());}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new Profile().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new Profile().equals(null));    new Profile().equals(new Profile());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    Profile thing = new Profile();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new Profile().toString());}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new Relocation().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new Relocation().equals(null));    new Relocation().equals(new Relocation());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    Relocation thing = new Relocation();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new Relocation().toString());}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new Reporting().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new Reporting().equals(null));    new Reporting().equals(new Reporting());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    Reporting thing = new Reporting();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new Reporting().toString());}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new ReportPlugin().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new ReportPlugin().equals(null));    new ReportPlugin().equals(new ReportPlugin());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    ReportPlugin thing = new ReportPlugin();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new ReportPlugin().toString());}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new ReportSet().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new ReportSet().equals(null));    new ReportSet().equals(new ReportSet());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    ReportSet thing = new ReportSet();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new ReportSet().toString());}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new RepositoryPolicy().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new RepositoryPolicy().equals(null));    new RepositoryPolicy().equals(new RepositoryPolicy());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    RepositoryPolicy thing = new RepositoryPolicy();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new RepositoryPolicy().toString());}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new Repository().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new Repository().equals(null));    new Repository().equals(new Repository());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    Repository thing = new Repository();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new Repository().toString());}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new Resource().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new Resource().equals(null));    new Resource().equals(new Resource());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    Resource thing = new Resource();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new Resource().toString());}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new Scm().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new Scm().equals(null));    new Scm().equals(new Scm());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    Scm thing = new Scm();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new Scm().toString());}
5c9ac4d02aa549572efea66e753068bcab73a1735bb93236bfaa4577bc21a5d3
testHashCodeNullSafe
public void testHashCodeNullSafe()
{    new Site().hashCode();}
7a531f1c72a4327b6fb7cd99b6782bf4ae68887b9bfe6a3647e9473dd76e4cb9
testEqualsNullSafe
public void testEqualsNullSafe()
{    assertFalse(new Site().equals(null));    new Site().equals(new Site());}
65658e672b42ce82fc57f78ee8f06faeab605d987df8cb5a54faba4b1a6ea600
testEqualsIdentity
public void testEqualsIdentity()
{    Site thing = new Site();    assertTrue(thing.equals(thing));}
b24820db1dc9650bb6778244c48e2a553d926409dce96caa3de8edc1dcd28918
testToStringNullSafe
public void testToStringNullSafe()
{    assertNotNull(new Site().toString());}
1e91bec93918d33ff32f96824213790b432e802a412095a02439d448c2fe178f
buildExtensionsAssembled
public void buildExtensionsAssembled(ModelBuildingEvent event)
{}
fab0060aaea41e097669190f34420c049680b4da9cc3a1c6bd398a750be64965
setModelProcessor
public DefaultModelBuilder setModelProcessor(ModelProcessor modelProcessor)
{    this.modelProcessor = modelProcessor;    return this;}
8fae0e86c66446c5120275d08c55ba7d3bd2faa49f3c45bc840d45ef39e109e7
setModelValidator
public DefaultModelBuilder setModelValidator(ModelValidator modelValidator)
{    this.modelValidator = modelValidator;    return this;}
988792de0a4a780c8be58612d54fa1221150b93a52cdb73a1015969bbfc912ba
setModelNormalizer
public DefaultModelBuilder setModelNormalizer(ModelNormalizer modelNormalizer)
{    this.modelNormalizer = modelNormalizer;    return this;}
8ef4ba4ab4b6e2c22e32a01a92c58eaec7c814d2c2beb925313c9de2db6eb30a
setModelInterpolator
public DefaultModelBuilder setModelInterpolator(ModelInterpolator modelInterpolator)
{    this.modelInterpolator = modelInterpolator;    return this;}
6d14e92d3ef5e877e5763ea26f910520343912dd3d70f753c26dfe3a6a7655b0
setModelPathTranslator
public DefaultModelBuilder setModelPathTranslator(ModelPathTranslator modelPathTranslator)
{    this.modelPathTranslator = modelPathTranslator;    return this;}
7c32dfdec8877bb65f189724e745cf122d5b0cf83c57180b290389086b268f2b
setModelUrlNormalizer
public DefaultModelBuilder setModelUrlNormalizer(ModelUrlNormalizer modelUrlNormalizer)
{    this.modelUrlNormalizer = modelUrlNormalizer;    return this;}
98f1740eb10abf7eec65c8f12f8fc10f89f0a0c8fd48b1487e8fa4b6c0bac687
setSuperPomProvider
public DefaultModelBuilder setSuperPomProvider(SuperPomProvider superPomProvider)
{    this.superPomProvider = superPomProvider;    return this;}
bae27f239e7b659cdcba4bff4c708a795dc5b69435a287b5dacc37a968e8508f
setProfileSelector
public DefaultModelBuilder setProfileSelector(ProfileSelector profileSelector)
{    this.profileSelector = profileSelector;    return this;}
2351e119e711cce992035446417eac8fd297c5eeffa396ffb94d398a557a9241
setProfileInjector
public DefaultModelBuilder setProfileInjector(ProfileInjector profileInjector)
{    this.profileInjector = profileInjector;    return this;}
25d2a9ad617641aae76e76c7f5f6f0c3e221cda204007632bcdbab0a959229e5
setInheritanceAssembler
public DefaultModelBuilder setInheritanceAssembler(InheritanceAssembler inheritanceAssembler)
{    this.inheritanceAssembler = inheritanceAssembler;    return this;}
79acff2ce6d5e576d35c160413c6a1793bec25a911c1f60f7f20eac55e6100fa
setDependencyManagementImporter
public DefaultModelBuilder setDependencyManagementImporter(DependencyManagementImporter depMgmtImporter)
{    this.dependencyManagementImporter = depMgmtImporter;    return this;}
823d723e6bcfbb18c016cceda79e5fe7b4dc09306be0a6f90a6774f05a17deb6
setDependencyManagementInjector
public DefaultModelBuilder setDependencyManagementInjector(DependencyManagementInjector depMgmtInjector)
{    this.dependencyManagementInjector = depMgmtInjector;    return this;}
a315939b807dd6deb7f45f753d9c5982a67525a6bd0fcf7bc23b9e1952bca148
setLifecycleBindingsInjector
public DefaultModelBuilder setLifecycleBindingsInjector(LifecycleBindingsInjector lifecycleBindingsInjector)
{    this.lifecycleBindingsInjector = lifecycleBindingsInjector;    return this;}
3db445bc70a086fa00112e8139bb6dcaffe9edce65db3dfffbc68928af6779fd
setPluginConfigurationExpander
public DefaultModelBuilder setPluginConfigurationExpander(PluginConfigurationExpander pluginConfigurationExpander)
{    this.pluginConfigurationExpander = pluginConfigurationExpander;    return this;}
d0821fc651a27e33a1b4312b675c2341b7ac3ebc2f87b98258bf568e8075487c
setPluginManagementInjector
public DefaultModelBuilder setPluginManagementInjector(PluginManagementInjector pluginManagementInjector)
{    this.pluginManagementInjector = pluginManagementInjector;    return this;}
eaf2d3da13731d2a1f3b45fd3568f623d446a1b3fe6786cfdf5cd89da4858981
setReportConfigurationExpander
public DefaultModelBuilder setReportConfigurationExpander(ReportConfigurationExpander reportConfigurationExpander)
{    this.reportConfigurationExpander = reportConfigurationExpander;    return this;}
6ca843e3208242a23303653f2d65fc7043bad722eb2212ae8b9ac0bfdd67b0f2
setReportingConverter
public DefaultModelBuilder setReportingConverter(ReportingConverter reportingConverter)
{    this.reportingConverter = reportingConverter;    return this;}
9f58b87c7cf98ab6aa043d7c024694ee616f99cd91e31c923ff65aed29ff87cf
build
public ModelBuildingResult build(ModelBuildingRequest request) throws ModelBuildingException
{        DefaultModelBuildingResult result = new DefaultModelBuildingResult();    DefaultModelProblemCollector problems = new DefaultModelProblemCollector(result);        DefaultProfileActivationContext profileActivationContext = getProfileActivationContext(request);    problems.setSource("(external profiles)");    List<Profile> activeExternalProfiles = profileSelector.getActiveProfiles(request.getProfiles(), profileActivationContext, problems);    result.setActiveExternalProfiles(activeExternalProfiles);    if (!activeExternalProfiles.isEmpty()) {        Properties profileProps = new Properties();        for (Profile profile : activeExternalProfiles) {            profileProps.putAll(profile.getProperties());        }        profileProps.putAll(profileActivationContext.getUserProperties());        profileActivationContext.setUserProperties(profileProps);    }        Model inputModel = request.getRawModel();    if (inputModel == null) {        inputModel = readModel(request.getModelSource(), request.getPomFile(), request, problems);    }    problems.setRootModel(inputModel);    ModelData resultData = new ModelData(request.getModelSource(), inputModel);    ModelData superData = new ModelData(null, getSuperModel());    Collection<String> parentIds = new LinkedHashSet<>();    List<ModelData> lineage = new ArrayList<>();    for (ModelData currentData = resultData; currentData != null; ) {        lineage.add(currentData);        Model rawModel = currentData.getModel();        currentData.setRawModel(rawModel);        Model tmpModel = rawModel.clone();        currentData.setModel(tmpModel);        problems.setSource(tmpModel);                modelNormalizer.mergeDuplicates(tmpModel, request, problems);        profileActivationContext.setProjectProperties(tmpModel.getProperties());        List<Profile> activePomProfiles = profileSelector.getActiveProfiles(rawModel.getProfiles(), profileActivationContext, problems);        currentData.setActiveProfiles(activePomProfiles);        Map<String, Activation> interpolatedActivations = getProfileActivations(rawModel, false);        injectProfileActivations(tmpModel, interpolatedActivations);                for (Profile activeProfile : activePomProfiles) {            profileInjector.injectProfile(tmpModel, activeProfile, request, problems);        }        if (currentData == resultData) {            for (Profile activeProfile : activeExternalProfiles) {                profileInjector.injectProfile(tmpModel, activeProfile, request, problems);            }        }        if (currentData == superData) {            break;        }        configureResolver(request.getModelResolver(), tmpModel, problems);        ModelData parentData = readParent(tmpModel, currentData.getSource(), request, problems);        if (parentData == null) {            currentData = superData;        } else if (currentData == resultData) {                        currentData.setGroupId(currentData.getRawModel().getGroupId() == null ? parentData.getGroupId() : currentData.getRawModel().getGroupId());            currentData.setVersion(currentData.getRawModel().getVersion() == null ? parentData.getVersion() : currentData.getRawModel().getVersion());            currentData.setArtifactId(currentData.getRawModel().getArtifactId());            parentIds.add(currentData.getId());                        currentData.setGroupId(null);            currentData.setArtifactId(null);            currentData.setVersion(null);            currentData = parentData;        } else if (!parentIds.add(parentData.getId())) {            String message = "The parents form a cycle: ";            for (String modelId : parentIds) {                message += modelId + " -> ";            }            message += parentData.getId();            problems.add(new ModelProblemCollectorRequest(ModelProblem.Severity.FATAL, ModelProblem.Version.BASE).setMessage(message));            throw problems.newModelBuildingException();        } else {            currentData = parentData;        }    }    problems.setSource(inputModel);    checkPluginVersions(lineage, request, problems);        assembleInheritance(lineage, request, problems);    Model resultModel = resultData.getModel();    problems.setSource(resultModel);    problems.setRootModel(resultModel);        resultModel = interpolateModel(resultModel, request, problems);    resultData.setModel(resultModel);    if (resultModel.getParent() != null) {        final ModelData parentData = lineage.get(1);        if (parentData.getVersion() == null || parentData.getVersion().contains("${")) {            final Model interpolatedParent = interpolateModel(parentData.getModel(), request, problems);                        parentData.setVersion(interpolatedParent.getVersion());        }    }        modelUrlNormalizer.normalize(resultModel, request);        configureResolver(request.getModelResolver(), resultModel, problems, true);    resultData.setGroupId(resultModel.getGroupId());    resultData.setArtifactId(resultModel.getArtifactId());    resultData.setVersion(resultModel.getVersion());    result.setEffectiveModel(resultModel);    for (ModelData currentData : lineage) {        String modelId = (currentData != superData) ? currentData.getId() : "";        result.addModelId(modelId);        result.setActivePomProfiles(modelId, currentData.getActiveProfiles());        result.setRawModel(modelId, currentData.getRawModel());    }    if (!request.isTwoPhaseBuilding()) {        build(request, result);    }    return result;}
a7c0e4125a7962b74206106a958833813754d3c7928797da5f476746756981bc
build
public ModelBuildingResult build(ModelBuildingRequest request, ModelBuildingResult result) throws ModelBuildingException
{    return build(request, result, new LinkedHashSet<String>());}
0bf51d0630842d3b7212e09015ad9845e79d8ed171ed5ccf5d094357365a2c80
build
private ModelBuildingResult build(ModelBuildingRequest request, ModelBuildingResult result, Collection<String> imports) throws ModelBuildingException
{        Model resultModel = result.getEffectiveModel();    DefaultModelProblemCollector problems = new DefaultModelProblemCollector(result);    problems.setSource(resultModel);    problems.setRootModel(resultModel);        modelPathTranslator.alignToBaseDirectory(resultModel, resultModel.getProjectDirectory(), request);        pluginManagementInjector.injectManagement(resultModel, request, problems);    fireEvent(resultModel, request, problems, ModelBuildingEventCatapult.BUILD_EXTENSIONS_ASSEMBLED);    if (request.isProcessPlugins()) {        if (lifecycleBindingsInjector == null) {            throw new IllegalStateException("lifecycle bindings injector is missing");        }                lifecycleBindingsInjector.injectLifecycleBindings(resultModel, request, problems);    }        importDependencyManagement(resultModel, request, problems, imports);        dependencyManagementInjector.injectManagement(resultModel, request, problems);    modelNormalizer.injectDefaultValues(resultModel, request, problems);    if (request.isProcessPlugins()) {                reportConfigurationExpander.expandPluginConfiguration(resultModel, request, problems);                reportingConverter.convertReporting(resultModel, request, problems);                pluginConfigurationExpander.expandPluginConfiguration(resultModel, request, problems);    }        modelValidator.validateEffectiveModel(resultModel, request, problems);    if (hasModelErrors(problems)) {        throw problems.newModelBuildingException();    }    return result;}
61c276f1314184eb1a62235091efd4ba56d99f3eef99e24705b1d5df8a330854
buildRawModel
public Result<? extends Model> buildRawModel(File pomFile, int validationLevel, boolean locationTracking)
{    final ModelBuildingRequest request = new DefaultModelBuildingRequest().setValidationLevel(validationLevel).setLocationTracking(locationTracking);    final DefaultModelProblemCollector collector = new DefaultModelProblemCollector(new DefaultModelBuildingResult());    try {        return newResult(readModel(null, pomFile, request, collector), collector.getProblems());    } catch (ModelBuildingException e) {        return error(collector.getProblems());    }}
7208d630e0a69abf26b4b3dbde79d99637114ba0c38afce3206df5fabbeec129
readModel
private Model readModel(ModelSource modelSource, File pomFile, ModelBuildingRequest request, DefaultModelProblemCollector problems) throws ModelBuildingException
{    Model model;    if (modelSource == null) {        if (pomFile != null) {            modelSource = new FileModelSource(pomFile);        } else {            throw new NullPointerException("neither pomFile nor modelSource can be null");        }    }    problems.setSource(modelSource.getLocation());    try {        boolean strict = request.getValidationLevel() >= ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0;        InputSource source = request.isLocationTracking() ? new InputSource() : null;        Map<String, Object> options = new HashMap<>();        options.put(ModelProcessor.IS_STRICT, strict);        options.put(ModelProcessor.INPUT_SOURCE, source);        options.put(ModelProcessor.SOURCE, modelSource);        try {            model = modelProcessor.read(modelSource.getInputStream(), options);        } catch (ModelParseException e) {            if (!strict) {                throw e;            }            options.put(ModelProcessor.IS_STRICT, Boolean.FALSE);            try {                model = modelProcessor.read(modelSource.getInputStream(), options);            } catch (ModelParseException ne) {                                throw e;            }            if (pomFile != null) {                problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.V20).setMessage("Malformed POM " + modelSource.getLocation() + ": " + e.getMessage()).setException(e));            } else {                problems.add(new ModelProblemCollectorRequest(Severity.WARNING, Version.V20).setMessage("Malformed POM " + modelSource.getLocation() + ": " + e.getMessage()).setException(e));            }        }        if (source != null) {            source.setModelId(ModelProblemUtils.toId(model));            source.setLocation(modelSource.getLocation());        }    } catch (ModelParseException e) {        problems.add(new ModelProblemCollectorRequest(Severity.FATAL, Version.BASE).setMessage("Non-parseable POM " + modelSource.getLocation() + ": " + e.getMessage()).setException(e));        throw problems.newModelBuildingException();    } catch (IOException e) {        String msg = e.getMessage();        if (msg == null || msg.length() <= 0) {                        if (e.getClass().getName().endsWith("MalformedInputException")) {                msg = "Some input bytes do not match the file encoding.";            } else {                msg = e.getClass().getSimpleName();            }        }        problems.add(new ModelProblemCollectorRequest(Severity.FATAL, Version.BASE).setMessage("Non-readable POM " + modelSource.getLocation() + ": " + msg).setException(e));        throw problems.newModelBuildingException();    }    model.setPomFile(pomFile);    problems.setSource(model);    modelValidator.validateRawModel(model, request, problems);    if (hasFatalErrors(problems)) {        throw problems.newModelBuildingException();    }    return model;}
34957d2b739d0fcbaca63715e0f0bcbcd5f632bf8fd3667f853ff8d08bd4d308
getProfileActivationContext
private DefaultProfileActivationContext getProfileActivationContext(ModelBuildingRequest request)
{    DefaultProfileActivationContext context = new DefaultProfileActivationContext();    context.setActiveProfileIds(request.getActiveProfileIds());    context.setInactiveProfileIds(request.getInactiveProfileIds());    context.setSystemProperties(request.getSystemProperties());    context.setUserProperties(request.getUserProperties());    context.setProjectDirectory((request.getPomFile() != null) ? request.getPomFile().getParentFile() : null);    return context;}
7d18d15aac8dd9edc1a445e3064b6c7cc03aed8022b86c60b732d6c9c63fc84f
configureResolver
private void configureResolver(ModelResolver modelResolver, Model model, DefaultModelProblemCollector problems)
{    configureResolver(modelResolver, model, problems, false);}
848849124f3852a80014419a04512bf892453657cf53aea36a7988e1e70e48b4
configureResolver
private void configureResolver(ModelResolver modelResolver, Model model, DefaultModelProblemCollector problems, boolean replaceRepositories)
{    if (modelResolver == null) {        return;    }    problems.setSource(model);    List<Repository> repositories = model.getRepositories();    for (Repository repository : repositories) {        try {            modelResolver.addRepository(repository, replaceRepositories);        } catch (InvalidRepositoryException e) {            problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage("Invalid repository " + repository.getId() + ": " + e.getMessage()).setLocation(repository.getLocation("")).setException(e));        }    }}
4d4095d98f5cf8f63c3cf923b8e5be2fe00e9303b9aa840e0a5381ad5a266e61
checkPluginVersions
private void checkPluginVersions(List<ModelData> lineage, ModelBuildingRequest request, ModelProblemCollector problems)
{    if (request.getValidationLevel() < ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {        return;    }    Map<String, Plugin> plugins = new HashMap<>();    Map<String, String> versions = new HashMap<>();    Map<String, String> managedVersions = new HashMap<>();    for (int i = lineage.size() - 1; i >= 0; i--) {        Model model = lineage.get(i).getModel();        Build build = model.getBuild();        if (build != null) {            for (Plugin plugin : build.getPlugins()) {                String key = plugin.getKey();                if (versions.get(key) == null) {                    versions.put(key, plugin.getVersion());                    plugins.put(key, plugin);                }            }            PluginManagement mgmt = build.getPluginManagement();            if (mgmt != null) {                for (Plugin plugin : mgmt.getPlugins()) {                    String key = plugin.getKey();                    if (managedVersions.get(key) == null) {                        managedVersions.put(key, plugin.getVersion());                    }                }            }        }    }    for (String key : versions.keySet()) {        if (versions.get(key) == null && managedVersions.get(key) == null) {            InputLocation location = plugins.get(key).getLocation("");            problems.add(new ModelProblemCollectorRequest(Severity.WARNING, Version.V20).setMessage("'build.plugins.plugin.version' for " + key + " is missing.").setLocation(location));        }    }}
ca8a0011d9e9f84cc305f55ae17d5efee102f35f2d651e37f853e55827a2f793
assembleInheritance
private void assembleInheritance(List<ModelData> lineage, ModelBuildingRequest request, ModelProblemCollector problems)
{    for (int i = lineage.size() - 2; i >= 0; i--) {        Model parent = lineage.get(i + 1).getModel();        Model child = lineage.get(i).getModel();        inheritanceAssembler.assembleModelInheritance(child, parent, request, problems);    }}
8a788d64fb6f1ced5ec294495fb5ce360a30b073ce56247fc6d5b4c1dcbff06b
getProfileActivations
private Map<String, Activation> getProfileActivations(Model model, boolean clone)
{    Map<String, Activation> activations = new HashMap<>();    for (Profile profile : model.getProfiles()) {        Activation activation = profile.getActivation();        if (activation == null) {            continue;        }        if (clone) {            activation = activation.clone();        }        activations.put(profile.getId(), activation);    }    return activations;}
f8f37276f911c5282ddd518b95382a5fbd5ef2f7759b1f31fd7f7dda96c3b16d
injectProfileActivations
private void injectProfileActivations(Model model, Map<String, Activation> activations)
{    for (Profile profile : model.getProfiles()) {        Activation activation = profile.getActivation();        if (activation == null) {            continue;        }                profile.setActivation(activations.get(profile.getId()));    }}
2b736ca2024adab3fe352cc30a6b5a23bfe636a8ec1742470939f342c6999012
interpolateModel
private Model interpolateModel(Model model, ModelBuildingRequest request, ModelProblemCollector problems)
{        Map<String, Activation> originalActivations = getProfileActivations(model, true);    Model interpolatedModel = modelInterpolator.interpolateModel(model, model.getProjectDirectory(), request, problems);    if (interpolatedModel.getParent() != null) {        StringSearchInterpolator ssi = new StringSearchInterpolator();        ssi.addValueSource(new MapBasedValueSource(request.getUserProperties()));        ssi.addValueSource(new MapBasedValueSource(model.getProperties()));        ssi.addValueSource(new MapBasedValueSource(request.getSystemProperties()));        try {            String interpolated = ssi.interpolate(interpolatedModel.getParent().getVersion());            interpolatedModel.getParent().setVersion(interpolated);        } catch (Exception e) {            ModelProblemCollectorRequest mpcr = new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage("Failed to interpolate field: " + interpolatedModel.getParent().getVersion() + " on class: ").setException(e);            problems.add(mpcr);        }    }    interpolatedModel.setPomFile(model.getPomFile());        injectProfileActivations(model, originalActivations);    return interpolatedModel;}
7a9501a5d74bb4cf37244269966ee4b88c55d2ef68a85725aa983d0ae6203959
readParent
private ModelData readParent(Model childModel, ModelSource childSource, ModelBuildingRequest request, DefaultModelProblemCollector problems) throws ModelBuildingException
{    ModelData parentData;    Parent parent = childModel.getParent();    if (parent != null) {        String groupId = parent.getGroupId();        String artifactId = parent.getArtifactId();        String version = parent.getVersion();        parentData = getCache(request.getModelCache(), groupId, artifactId, version, ModelCacheTag.RAW);        if (parentData == null) {            parentData = readParentLocally(childModel, childSource, request, problems);            if (parentData == null) {                parentData = readParentExternally(childModel, request, problems);            }            putCache(request.getModelCache(), groupId, artifactId, version, ModelCacheTag.RAW, parentData);        } else {            /*                 * NOTE: This is a sanity check of the cache hit. If the cached parent POM was locally resolved, the                 * child's <relativePath> should point at that parent, too. If it doesn't, we ignore the cache and                 * resolve externally, to mimic the behavior if the cache didn't exist in the first place. Otherwise,                 * the cache would obscure a bad POM.                 */            File pomFile = parentData.getModel().getPomFile();            if (pomFile != null) {                FileModelSource pomSource = new FileModelSource(pomFile);                ModelSource expectedParentSource = getParentPomFile(childModel, childSource);                if (expectedParentSource == null || (expectedParentSource instanceof ModelSource2 && !pomSource.equals(expectedParentSource))) {                    parentData = readParentExternally(childModel, request, problems);                }            }        }        Model parentModel = parentData.getModel();        if (!"pom".equals(parentModel.getPackaging())) {            problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage("Invalid packaging for parent POM " + ModelProblemUtils.toSourceHint(parentModel) + ", must be \"pom\" but is \"" + parentModel.getPackaging() + "\"").setLocation(parentModel.getLocation("packaging")));        }    } else {        parentData = null;    }    return parentData;}
3cfbe66755647d3ec4248969d29a33967ca0ce622d2e1dd6a1efbf02e9b8f751
readParentLocally
private ModelData readParentLocally(Model childModel, ModelSource childSource, ModelBuildingRequest request, DefaultModelProblemCollector problems) throws ModelBuildingException
{    final Parent parent = childModel.getParent();    final ModelSource candidateSource;    final Model candidateModel;    final WorkspaceModelResolver resolver = request.getWorkspaceModelResolver();    if (resolver == null) {        candidateSource = getParentPomFile(childModel, childSource);        if (candidateSource == null) {            return null;        }        File pomFile = null;        if (candidateSource instanceof FileModelSource) {            pomFile = ((FileModelSource) candidateSource).getPomFile();        }        candidateModel = readModel(candidateSource, pomFile, request, problems);    } else {        try {            candidateModel = resolver.resolveRawModel(parent.getGroupId(), parent.getArtifactId(), parent.getVersion());        } catch (UnresolvableModelException e) {            problems.add(            new ModelProblemCollectorRequest(Severity.FATAL, Version.BASE).setMessage(e.getMessage().toString()).setLocation(parent.getLocation("")).setException(e));            throw problems.newModelBuildingException();        }        if (candidateModel == null) {            return null;        }        candidateSource = new FileModelSource(candidateModel.getPomFile());    }                        String groupId = candidateModel.getGroupId();    if (groupId == null && candidateModel.getParent() != null) {        groupId = candidateModel.getParent().getGroupId();    }    String artifactId = candidateModel.getArtifactId();    String version = candidateModel.getVersion();    if (version == null && candidateModel.getParent() != null) {        version = candidateModel.getParent().getVersion();    }    if (groupId == null || !groupId.equals(parent.getGroupId()) || artifactId == null || !artifactId.equals(parent.getArtifactId())) {        StringBuilder buffer = new StringBuilder(256);        buffer.append("'parent.relativePath'");        if (childModel != problems.getRootModel()) {            buffer.append(" of POM ").append(ModelProblemUtils.toSourceHint(childModel));        }        buffer.append(" points at ").append(groupId).append(':').append(artifactId);        buffer.append(" instead of ").append(parent.getGroupId()).append(':');        buffer.append(parent.getArtifactId()).append(", please verify your project structure");        problems.setSource(childModel);        problems.add(new ModelProblemCollectorRequest(Severity.WARNING, Version.BASE).setMessage(buffer.toString()).setLocation(parent.getLocation("")));        return null;    }    if (version != null && parent.getVersion() != null && !version.equals(parent.getVersion())) {        try {            VersionRange parentRange = VersionRange.createFromVersionSpec(parent.getVersion());            if (!parentRange.hasRestrictions()) {                                return null;            }            if (!parentRange.containsVersion(new DefaultArtifactVersion(version))) {                                return null;            }                        if (childModel.getVersion() == null) {                                problems.add(new ModelProblemCollectorRequest(Severity.FATAL, Version.V31).setMessage("Version must be a constant").setLocation(childModel.getLocation("")));            } else {                if (childModel.getVersion().contains("${")) {                                        problems.add(new ModelProblemCollectorRequest(Severity.FATAL, Version.V31).setMessage("Version must be a constant").setLocation(childModel.getLocation("version")));                }            }                } catch (InvalidVersionSpecificationException e) {                        return null;        }    }                    /*         * if ( version == null || !version.equals( parent.getVersion() ) ) { return null; }         */    ModelData parentData = new ModelData(candidateSource, candidateModel, groupId, artifactId, version);    return parentData;}
4e96cf6d9b860170fe0f35d3b6bb051e866617780a98a3795a17a4d3bac5654a
getParentPomFile
private ModelSource getParentPomFile(Model childModel, ModelSource source)
{    if (!(source instanceof ModelSource2)) {        return null;    }    String parentPath = childModel.getParent().getRelativePath();    if (parentPath == null || parentPath.length() <= 0) {        return null;    }    return ((ModelSource2) source).getRelatedSource(parentPath);}
8aa78617bb3206287afb3316ccdc2e249feb737af5a44675468db4acccd6f207
readParentExternally
private ModelData readParentExternally(Model childModel, ModelBuildingRequest request, DefaultModelProblemCollector problems) throws ModelBuildingException
{    problems.setSource(childModel);    Parent parent = childModel.getParent().clone();    String groupId = parent.getGroupId();    String artifactId = parent.getArtifactId();    String version = parent.getVersion();    ModelResolver modelResolver = request.getModelResolver();    Objects.requireNonNull(modelResolver, String.format("request.modelResolver cannot be null (parent POM %s and POM %s)", ModelProblemUtils.toId(groupId, artifactId, version), ModelProblemUtils.toSourceHint(childModel)));    ModelSource modelSource;    try {        modelSource = modelResolver.resolveModel(parent);    } catch (UnresolvableModelException e) {                StringBuilder buffer = new StringBuilder(256);        buffer.append("Non-resolvable parent POM");        if (!containsCoordinates(e.getMessage(), groupId, artifactId, version)) {            buffer.append(' ').append(ModelProblemUtils.toId(groupId, artifactId, version));        }        if (childModel != problems.getRootModel()) {            buffer.append(" for ").append(ModelProblemUtils.toId(childModel));        }        buffer.append(": ").append(e.getMessage());        if (childModel.getProjectDirectory() != null) {            if (parent.getRelativePath() == null || parent.getRelativePath().length() <= 0) {                buffer.append(" and 'parent.relativePath' points at no local POM");            } else {                buffer.append(" and 'parent.relativePath' points at wrong local POM");            }        }        problems.add(new ModelProblemCollectorRequest(Severity.FATAL, Version.BASE).setMessage(buffer.toString()).setLocation(parent.getLocation("")).setException(e));        throw problems.newModelBuildingException();    }    ModelBuildingRequest lenientRequest = request;    if (request.getValidationLevel() > ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {        lenientRequest = new FilterModelBuildingRequest(request) {            @Override            public int getValidationLevel() {                return ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0;            }        };    }    Model parentModel = readModel(modelSource, null, lenientRequest, problems);    if (!parent.getVersion().equals(version)) {        if (childModel.getVersion() == null) {                        problems.add(new ModelProblemCollectorRequest(Severity.FATAL, Version.V31).setMessage("Version must be a constant").setLocation(childModel.getLocation("")));        } else {            if (childModel.getVersion().contains("${")) {                                problems.add(new ModelProblemCollectorRequest(Severity.FATAL, Version.V31).setMessage("Version must be a constant").setLocation(childModel.getLocation("version")));            }        }        }    ModelData parentData = new ModelData(modelSource, parentModel, parent.getGroupId(), parent.getArtifactId(), parent.getVersion());    return parentData;}
cedc9d30d793a95bc432229d6308faea636d2bfe1a884ce5b844a48888ca25e0
getValidationLevel
public int getValidationLevel()
{    return ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0;}
766e36e35e9e85c9356829821d1499adef8cc9cd079a05ec0b4d3f1551921f3f
getSuperModel
private Model getSuperModel()
{    return superPomProvider.getSuperModel("4.0.0").clone();}
3b7784fdae988216934983c7fcb365a8f48a8b5ab827649887093e6e012f1dc4
importDependencyManagement
private void importDependencyManagement(Model model, ModelBuildingRequest request, DefaultModelProblemCollector problems, Collection<String> importIds)
{    DependencyManagement depMgmt = model.getDependencyManagement();    if (depMgmt == null) {        return;    }    String importing = model.getGroupId() + ':' + model.getArtifactId() + ':' + model.getVersion();    importIds.add(importing);    final WorkspaceModelResolver workspaceResolver = request.getWorkspaceModelResolver();    final ModelResolver modelResolver = request.getModelResolver();    ModelBuildingRequest importRequest = null;    List<DependencyManagement> importMgmts = null;    for (Iterator<Dependency> it = depMgmt.getDependencies().iterator(); it.hasNext(); ) {        Dependency dependency = it.next();        if (!"pom".equals(dependency.getType()) || !"import".equals(dependency.getScope())) {            continue;        }        it.remove();        String groupId = dependency.getGroupId();        String artifactId = dependency.getArtifactId();        String version = dependency.getVersion();        if (groupId == null || groupId.length() <= 0) {            problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage("'dependencyManagement.dependencies.dependency.groupId' for " + dependency.getManagementKey() + " is missing.").setLocation(dependency.getLocation("")));            continue;        }        if (artifactId == null || artifactId.length() <= 0) {            problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage("'dependencyManagement.dependencies.dependency.artifactId' for " + dependency.getManagementKey() + " is missing.").setLocation(dependency.getLocation("")));            continue;        }        if (version == null || version.length() <= 0) {            problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage("'dependencyManagement.dependencies.dependency.version' for " + dependency.getManagementKey() + " is missing.").setLocation(dependency.getLocation("")));            continue;        }        String imported = groupId + ':' + artifactId + ':' + version;        if (importIds.contains(imported)) {            String message = "The dependencies of type=pom and with scope=import form a cycle: ";            for (String modelId : importIds) {                message += modelId + " -> ";            }            message += imported;            problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage(message));            continue;        }        DependencyManagement importMgmt = getCache(request.getModelCache(), groupId, artifactId, version, ModelCacheTag.IMPORT);        if (importMgmt == null) {            if (workspaceResolver == null && modelResolver == null) {                throw new NullPointerException(String.format("request.workspaceModelResolver and request.modelResolver cannot be null" + " (parent POM %s and POM %s)", ModelProblemUtils.toId(groupId, artifactId, version), ModelProblemUtils.toSourceHint(model)));            }            Model importModel = null;            if (workspaceResolver != null) {                try {                    importModel = workspaceResolver.resolveEffectiveModel(groupId, artifactId, version);                } catch (UnresolvableModelException e) {                    problems.add(new ModelProblemCollectorRequest(Severity.FATAL, Version.BASE).setMessage(e.getMessage().toString()).setException(e));                    continue;                }            }                        if (importModel == null) {                final ModelSource importSource;                try {                    importSource = modelResolver.resolveModel(groupId, artifactId, version);                } catch (UnresolvableModelException e) {                    StringBuilder buffer = new StringBuilder(256);                    buffer.append("Non-resolvable import POM");                    if (!containsCoordinates(e.getMessage(), groupId, artifactId, version)) {                        buffer.append(' ').append(ModelProblemUtils.toId(groupId, artifactId, version));                    }                    buffer.append(": ").append(e.getMessage());                    problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage(buffer.toString()).setLocation(dependency.getLocation("")).setException(e));                    continue;                }                if (importRequest == null) {                    importRequest = new DefaultModelBuildingRequest();                    importRequest.setValidationLevel(ModelBuildingRequest.VALIDATION_LEVEL_MINIMAL);                    importRequest.setModelCache(request.getModelCache());                    importRequest.setSystemProperties(request.getSystemProperties());                    importRequest.setUserProperties(request.getUserProperties());                    importRequest.setLocationTracking(request.isLocationTracking());                }                importRequest.setModelSource(importSource);                importRequest.setModelResolver(modelResolver.newCopy());                final ModelBuildingResult importResult;                try {                    importResult = build(importRequest);                } catch (ModelBuildingException e) {                    problems.addAll(e.getProblems());                    continue;                }                problems.addAll(importResult.getProblems());                importModel = importResult.getEffectiveModel();            }            importMgmt = importModel.getDependencyManagement();            if (importMgmt == null) {                importMgmt = new DependencyManagement();            }            putCache(request.getModelCache(), groupId, artifactId, version, ModelCacheTag.IMPORT, importMgmt);        }        if (importMgmts == null) {            importMgmts = new ArrayList<>();        }        importMgmts.add(importMgmt);    }    importIds.remove(importing);    dependencyManagementImporter.importManagement(model, importMgmts, request, problems);}
4be8f93ddd911e4fb6d7fc57d9337244c6785d8e6515c3dd073c055d35f65ae5
putCache
private void putCache(ModelCache modelCache, String groupId, String artifactId, String version, ModelCacheTag<T> tag, T data)
{    if (modelCache != null) {        modelCache.put(groupId, artifactId, version, tag.getName(), tag.intoCache(data));    }}
1984b8ada13c1d0da4be2d5d5ba687d9708c0130ae667193cfe0af7fe9aaa400
getCache
private T getCache(ModelCache modelCache, String groupId, String artifactId, String version, ModelCacheTag<T> tag)
{    if (modelCache != null) {        Object data = modelCache.get(groupId, artifactId, version, tag.getName());        if (data != null) {            return tag.fromCache(tag.getType().cast(data));        }    }    return null;}
5f4ee009b1b9200933bdfdeadd4eddd876c518f7f8e46b399e26a060ff732584
fireEvent
private void fireEvent(Model model, ModelBuildingRequest request, ModelProblemCollector problems, ModelBuildingEventCatapult catapult) throws ModelBuildingException
{    ModelBuildingListener listener = request.getModelBuildingListener();    if (listener != null) {        ModelBuildingEvent event = new DefaultModelBuildingEvent(model, request, problems);        catapult.fire(listener, event);    }}
d8f83e33c42908e31e533010f98e686beb3dacbfe1cba52bacd8ad6a0f564726
containsCoordinates
private boolean containsCoordinates(String message, String groupId, String artifactId, String version)
{    return message != null && (groupId == null || message.contains(groupId)) && (artifactId == null || message.contains(artifactId)) && (version == null || message.contains(version));}
f5c38c985d087928ee62fada38f75243e36c613546803ab9369c3155919e314b
hasModelErrors
protected boolean hasModelErrors(ModelProblemCollectorExt problems)
{    if (problems instanceof DefaultModelProblemCollector) {        return ((DefaultModelProblemCollector) problems).hasErrors();    } else {                throw new IllegalStateException();    }}
b00a9cfc32900ae2e47df1faa2f53106c89e76382e69d2c4efd01284e06f2c4b
hasFatalErrors
protected boolean hasFatalErrors(ModelProblemCollectorExt problems)
{    if (problems instanceof DefaultModelProblemCollector) {        return ((DefaultModelProblemCollector) problems).hasFatalErrors();    } else {                throw new IllegalStateException();    }}
e192b52ec0ba00931c1537ba89f3a635f2866bab0b8f1222dc9bceb642077c36
newModelProcessor
protected ModelProcessor newModelProcessor()
{    DefaultModelProcessor processor = new DefaultModelProcessor();    processor.setModelLocator(newModelLocator());    processor.setModelReader(newModelReader());    return processor;}
e506fd73ac1c929bad7508db024953ac8e36a5c305dc7768b5e48e85f012f4f2
newModelLocator
protected ModelLocator newModelLocator()
{    return new DefaultModelLocator();}
bf6ee7b72dae195e00d2659056f21c9223f4e6dbf35604137d9abc0f77821d00
newModelReader
protected ModelReader newModelReader()
{    return new DefaultModelReader();}
a680af602d6493b6da42258fba6e07a930f7405d1fdef983ca269f20c56ccf5a
newProfileSelector
protected ProfileSelector newProfileSelector()
{    DefaultProfileSelector profileSelector = new DefaultProfileSelector();    for (ProfileActivator activator : newProfileActivators()) {        profileSelector.addProfileActivator(activator);    }    return profileSelector;}
124c4d91c9dd2696ef33bc0574687b97c1d2dbcd0c42992a0e607a0d1a60f07d
newProfileActivators
protected ProfileActivator[] newProfileActivators()
{    return new ProfileActivator[] { new JdkVersionProfileActivator(), new OperatingSystemProfileActivator(), new PropertyProfileActivator(), new FileProfileActivator().setPathTranslator(newPathTranslator()) };}
84f745bda2d2005232a306a6f4c3e050f50e50b8f670e3cd06229fe90f2df2e5
newUrlNormalizer
protected UrlNormalizer newUrlNormalizer()
{    return new DefaultUrlNormalizer();}
a520e33c684ef48674b526658709ed3028e69cb6b6fa09f541e7f078d16b627e
newPathTranslator
protected PathTranslator newPathTranslator()
{    return new DefaultPathTranslator();}
e97e5fc85602d21f7c89d00e8fc6064f33838e917167253bb798cf7c845c27dd
newModelInterpolator
protected ModelInterpolator newModelInterpolator()
{    UrlNormalizer normalizer = newUrlNormalizer();    PathTranslator pathTranslator = newPathTranslator();    return new StringVisitorModelInterpolator().setPathTranslator(pathTranslator).setUrlNormalizer(normalizer);}
f95d0c23138c411aa76defcd1a6606c62876d0c8d5fe0bf25d3ff89c7b923b3a
newModelValidator
protected ModelValidator newModelValidator()
{    return new DefaultModelValidator();}
41b48e5a5e5b4befa7fd47b24aab10b172e81e94a76b1e3e8272c2e1f831b942
newModelNormalizer
protected ModelNormalizer newModelNormalizer()
{    return new DefaultModelNormalizer();}
233d929f204464445071ab06bf903accca28ce170a51d5c0bb7a507108978b1a
newModelPathTranslator
protected ModelPathTranslator newModelPathTranslator()
{    return new DefaultModelPathTranslator().setPathTranslator(newPathTranslator());}
baeac248bcbb333e3e7bcc58c08686736dae600f657118d1903f1ad28e06e892
newModelUrlNormalizer
protected ModelUrlNormalizer newModelUrlNormalizer()
{    return new DefaultModelUrlNormalizer().setUrlNormalizer(newUrlNormalizer());}
542327f957503e3ae287c5424ac16f47c1b65f43b1ec83e2fc39cc5cfbb95e2d
newInheritanceAssembler
protected InheritanceAssembler newInheritanceAssembler()
{    return new DefaultInheritanceAssembler();}
c0b7cbcf60e0b83ced4ca3e37c35aadd442736e0cdbf7ea23160ee5f2ce4d35b
newProfileInjector
protected ProfileInjector newProfileInjector()
{    return new DefaultProfileInjector();}
9b166fdd9935e751d0680949764f567edf1d57399792764f55362d0b250bedaa
newSuperPomProvider
protected SuperPomProvider newSuperPomProvider()
{    return new DefaultSuperPomProvider().setModelProcessor(newModelProcessor());}
fe15e7601b6a06e819f9d6a306621a0647e4e8b25e1cf8175eb954522ac3592c
newDependencyManagementImporter
protected DependencyManagementImporter newDependencyManagementImporter()
{    return new DefaultDependencyManagementImporter();}
e9dd1e610c7e919c21faf440ba4a5bdc1f997db591ba037a898cac7904171d1e
newDependencyManagementInjector
protected DependencyManagementInjector newDependencyManagementInjector()
{    return new DefaultDependencyManagementInjector();}
f598ccf4e603255bb0bd12cf00ded449398840a7173ad667cb90a65585836a95
newLifecycleBindingsInjector
protected LifecycleBindingsInjector newLifecycleBindingsInjector()
{    return new StubLifecycleBindingsInjector();}
0124de404a4436a531342a2cc3862306e5a591875b46822191a5d25f7d305c67
newPluginManagementInjector
protected PluginManagementInjector newPluginManagementInjector()
{    return new DefaultPluginManagementInjector();}
85bf4e8e9752d1e410f301bb4d10d6c31190316e8f1546381fe5e38e7200f414
newPluginConfigurationExpander
protected PluginConfigurationExpander newPluginConfigurationExpander()
{    return new DefaultPluginConfigurationExpander();}
6d03dec80cb95746cc6e6f67fb0eacdc730a27659ab41b6a93aaacfbf5604457
newReportConfigurationExpander
protected ReportConfigurationExpander newReportConfigurationExpander()
{    return new DefaultReportConfigurationExpander();}
a612380b0f0b330c4a105d5aac50ff6ed306b67186c012aee426e5ab4c0ff428
newReportingConverter
protected ReportingConverter newReportingConverter()
{    return new DefaultReportingConverter();}
ab09e8bde536964f0b567365171d36422a94baaab9f833f05a3d7f26bc9084bb
newInstance
public DefaultModelBuilder newInstance()
{    DefaultModelBuilder modelBuilder = new DefaultModelBuilder();    modelBuilder.setModelProcessor(newModelProcessor());    modelBuilder.setModelValidator(newModelValidator());    modelBuilder.setModelNormalizer(newModelNormalizer());    modelBuilder.setModelPathTranslator(newModelPathTranslator());    modelBuilder.setModelUrlNormalizer(newModelUrlNormalizer());    modelBuilder.setModelInterpolator(newModelInterpolator());    modelBuilder.setInheritanceAssembler(newInheritanceAssembler());    modelBuilder.setProfileInjector(newProfileInjector());    modelBuilder.setProfileSelector(newProfileSelector());    modelBuilder.setSuperPomProvider(newSuperPomProvider());    modelBuilder.setDependencyManagementImporter(newDependencyManagementImporter());    modelBuilder.setDependencyManagementInjector(newDependencyManagementInjector());    modelBuilder.setLifecycleBindingsInjector(newLifecycleBindingsInjector());    modelBuilder.setPluginManagementInjector(newPluginManagementInjector());    modelBuilder.setPluginConfigurationExpander(newPluginConfigurationExpander());    modelBuilder.setReportConfigurationExpander(newReportConfigurationExpander());    modelBuilder.setReportingConverter(newReportingConverter());    return modelBuilder;}
45dfc46b723eaf7a21a6bd04035fa728e87c50cfff748057bf598b936fad7a47
injectLifecycleBindings
public void injectLifecycleBindings(Model model, ModelBuildingRequest request, ModelProblemCollector problems)
{}
f938998a08eadbdbb54a4592f85c356494c5fd4a09480ef41473d448461d6a49
getModel
public Model getModel()
{    return model;}
16d6bf41981a68f83d831da67dda446e4d37d626e09a8cbdd954a1fe80feb0f6
getRequest
public ModelBuildingRequest getRequest()
{    return request;}
bcd909ff1dd5e79bbfca7b81ef8c19975d0c95f2efcdd6b0758af8eefc38beef
getProblems
public ModelProblemCollector getProblems()
{    return problems;}
9e41472ee24bfb1867a8e9e5c5bd1fe3eb2642f5fedb094f54f96a5b46b086ba
getPomFile
public File getPomFile()
{    return pomFile;}
b96ed3ad4739b5be903877f89c7b552dbdbeb1fbfa5b003380eba4f9320b2f2e
setPomFile
public DefaultModelBuildingRequest setPomFile(File pomFile)
{    this.pomFile = (pomFile != null) ? pomFile.getAbsoluteFile() : null;    return this;}
4d6f4eae3a569335d318e15f9e554b7f7b8e3ed7f89bf2b625fd11bacbee4851
getModelSource
public synchronized ModelSource getModelSource()
{    if (modelSource == null && pomFile != null) {        modelSource = new FileModelSource(pomFile);    }    return modelSource;}
2c695a9a4397e335b27837444ca86662594af48f8d2351696e90db8c22cda4a6
setModelSource
public DefaultModelBuildingRequest setModelSource(ModelSource modelSource)
{    this.modelSource = modelSource;    return this;}
cedc9d30d793a95bc432229d6308faea636d2bfe1a884ce5b844a48888ca25e0
getValidationLevel
public int getValidationLevel()
{    return validationLevel;}
f5bf5b6123b9c7ac868859b07eefdcacd32270c9b3e7e034fd2c8ce7dfa3bb02
setValidationLevel
public DefaultModelBuildingRequest setValidationLevel(int validationLevel)
{    this.validationLevel = validationLevel;    return this;}
fb5aa23cec5727b1ee69ee2223c3dac50c01a7e9c600cfc3ade8c4592b52fed8
isProcessPlugins
public boolean isProcessPlugins()
{    return processPlugins;}
46334393cdf37d59c6fa40733fd19ae87bebdfa62f0e194ce286edf14afb6999
setProcessPlugins
public DefaultModelBuildingRequest setProcessPlugins(boolean processPlugins)
{    this.processPlugins = processPlugins;    return this;}
61846e0affd2505fbc9bdfe402664cc430b626e3f016e45be8e06f3f535aa5fe
isTwoPhaseBuilding
public boolean isTwoPhaseBuilding()
{    return twoPhaseBuilding;}
d09927c0b0319adf61b693079eaec7171e3cfd2efbbb71e844ac3e52b904df9e
setTwoPhaseBuilding
public DefaultModelBuildingRequest setTwoPhaseBuilding(boolean twoPhaseBuilding)
{    this.twoPhaseBuilding = twoPhaseBuilding;    return this;}
8b3bcb305979c03c4cfb1aa67a1413dad69328ad104cedfe018cfabdb5a95d32
isLocationTracking
public boolean isLocationTracking()
{    return locationTracking;}
df3e47857a46c09e560181fa85b76a12adc9d3ea8e18d0516721af219125fe44
setLocationTracking
public DefaultModelBuildingRequest setLocationTracking(boolean locationTracking)
{    this.locationTracking = locationTracking;    return this;}
07f936934d46b8317f059da2ec27eb16b676abfedf6a187723d3defbd4f5707f
getProfiles
public List<Profile> getProfiles()
{    if (profiles == null) {        profiles = new ArrayList<>();    }    return profiles;}
2f31162bfb71ea332c8e83f31e93d01c6e1a7e856a84087ad324283f2ab5bd3f
setProfiles
public DefaultModelBuildingRequest setProfiles(List<Profile> profiles)
{    if (profiles != null) {        this.profiles = new ArrayList<>(profiles);    } else {        this.profiles = null;    }    return this;}
e14ffb2a27c664e5057ee17c4a1fb0bb5b055f2a4b10065731f970cb254fa6a4
getActiveProfileIds
public List<String> getActiveProfileIds()
{    if (activeProfileIds == null) {        activeProfileIds = new ArrayList<>();    }    return activeProfileIds;}
fa888538d5a1cf747b4432e8f3ed2e41196939fe271c18f80c13e24f2b0ec673
setActiveProfileIds
public DefaultModelBuildingRequest setActiveProfileIds(List<String> activeProfileIds)
{    if (activeProfileIds != null) {        this.activeProfileIds = new ArrayList<>(activeProfileIds);    } else {        this.activeProfileIds = null;    }    return this;}
74822a7709f5a5a1241339c1cdc0e2793c5f8fec1d0f52e09d8c8b484423e538
getInactiveProfileIds
public List<String> getInactiveProfileIds()
{    if (inactiveProfileIds == null) {        inactiveProfileIds = new ArrayList<>();    }    return inactiveProfileIds;}
220f382b4bdb7ad4b86c93724b66d72d20bb333106dcf617b9a5143b266daa43
setInactiveProfileIds
public DefaultModelBuildingRequest setInactiveProfileIds(List<String> inactiveProfileIds)
{    if (inactiveProfileIds != null) {        this.inactiveProfileIds = new ArrayList<>(inactiveProfileIds);    } else {        this.inactiveProfileIds = null;    }    return this;}
8b369022cea09c7bb7272e8cc545450dc294bedf652bae5b2ea9f14fffe1fc46
getSystemProperties
public Properties getSystemProperties()
{    if (systemProperties == null) {        systemProperties = new Properties();    }    return systemProperties;}
51c040865ef24cad7a517087504c1de491d63a1a19b0001c23ed3fa972f8edef
setSystemProperties
public DefaultModelBuildingRequest setSystemProperties(Properties systemProperties)
{    if (systemProperties != null) {        this.systemProperties = new Properties();        synchronized (systemProperties) {                        this.systemProperties.putAll(systemProperties);        }    } else {        this.systemProperties = null;    }    return this;}
378f8d6e21d4ae0bd6aa85de0988ab8d214704648e0ad1a17b8ce9c7e3a14225
getUserProperties
public Properties getUserProperties()
{    if (userProperties == null) {        userProperties = new Properties();    }    return userProperties;}
156d92e0fdae82ea34fb0ace1abb0fdf5bd51377a80a9a9b2f92323de2f86ea3
setUserProperties
public DefaultModelBuildingRequest setUserProperties(Properties userProperties)
{    if (userProperties != null) {        this.userProperties = new Properties();        this.userProperties.putAll(userProperties);    } else {        this.userProperties = null;    }    return this;}
2168fd766a195a9904679de5bb0e68ef88a89fd39b1468640cdae24d4a564431
getBuildStartTime
public Date getBuildStartTime()
{    return buildStartTime;}
aed2e97203d5a4ae9e5c2fc68b1e8a4f88a44b4ec3ac41ee1711e1cd40b93be4
setBuildStartTime
public ModelBuildingRequest setBuildStartTime(Date buildStartTime)
{    this.buildStartTime = buildStartTime;    return this;}
e26fa2a396dff74843c14a1757fcfa626aa1c7a164ef486100d88f85e2f8666e
getModelResolver
public ModelResolver getModelResolver()
{    return this.modelResolver;}
3099d79560e9b97687f5a1e3c95bca013c8bb08e2ec401c1bcb4e0ab0924ffef
setModelResolver
public DefaultModelBuildingRequest setModelResolver(ModelResolver modelResolver)
{    this.modelResolver = modelResolver;    return this;}
083db102f25e503b1a5420c350ad8b4db6a9220293b82a600eb3bdce34d59b72
getModelBuildingListener
public ModelBuildingListener getModelBuildingListener()
{    return modelBuildingListener;}
3f261dfaf8b5bfff7ad231f6ca098b09f3b49b89b68f0019b061e62b826922e1
setModelBuildingListener
public ModelBuildingRequest setModelBuildingListener(ModelBuildingListener modelBuildingListener)
{    this.modelBuildingListener = modelBuildingListener;    return this;}
42ffb83acd70e473337130e635f944b12013e821ade4c6c737b6f8db6e3167ad
getModelCache
public ModelCache getModelCache()
{    return this.modelCache;}
d38f851fc394e9c4d36072b4ae7ba1a788db400d30448328d19ac5d611946712
setModelCache
public DefaultModelBuildingRequest setModelCache(ModelCache modelCache)
{    this.modelCache = modelCache;    return this;}
758a2b9c95b61aa06bd9db1a6b79e7572fc8d4d624e05ce8c18aa852c80fcb4e
getRawModel
public Model getRawModel()
{    return rawModel;}
e2b6255c09295537f90e5f67c103b5d3c8ec726e2ee0c8dc6905fa48acd57c85
setRawModel
public ModelBuildingRequest setRawModel(Model rawModel)
{    this.rawModel = rawModel;    return this;}
001a6b42decc3fc2836429f9cb5596512d9a6e2ec51ebad2382fe19246b75525
getWorkspaceModelResolver
public WorkspaceModelResolver getWorkspaceModelResolver()
{    return workspaceResolver;}
0a602e4d577a5819e888e3ec394c1f8ac8b4a1f67d4590406eeb8617ffbbbc54
setWorkspaceModelResolver
public ModelBuildingRequest setWorkspaceModelResolver(WorkspaceModelResolver workspaceResolver)
{    this.workspaceResolver = workspaceResolver;    return this;}
6cbe781bfd50b621bcadb64aaa4ea18209f10d606fab6b4a4b333fb3b15148c0
getEffectiveModel
public Model getEffectiveModel()
{    return effectiveModel;}
cecc3559fa41eccee12646c02b4951b4feb8fd6c75f1e96e15aff25a20d4276b
setEffectiveModel
public DefaultModelBuildingResult setEffectiveModel(Model model)
{    this.effectiveModel = model;    return this;}
03d2846ea406b1a99620a5cf225235c1025f160f5b37d0f69e3dc69bc428fa19
getModelIds
public List<String> getModelIds()
{    return modelIds;}
ae6c9434586ad996b1b22708b4d15b8e459cee03a37e58cba4b7c723489e719c
addModelId
public DefaultModelBuildingResult addModelId(String modelId)
{        Objects.requireNonNull(modelId, "modelId cannot null");    modelIds.add(modelId);    return this;}
758a2b9c95b61aa06bd9db1a6b79e7572fc8d4d624e05ce8c18aa852c80fcb4e
getRawModel
public Model getRawModel()
{    return rawModels.get(modelIds.get(0));}
37ff19c08db72eccac99b8579002848a60cc106729fb5cd733b3e32dcc42884b
getRawModel
public Model getRawModel(String modelId)
{    return rawModels.get(modelId);}
d78820b3abe1dc189ce7de07c002407e6a2a3caed4bc282ba6167ae2c7d99ca5
setRawModel
public DefaultModelBuildingResult setRawModel(String modelId, Model rawModel)
{        Objects.requireNonNull(modelId, "modelId cannot null");    rawModels.put(modelId, rawModel);    return this;}
d62d9b50fc5338e4389e9907a4fc2788e6cb57074827c13f1f196e184b9884e6
getActivePomProfiles
public List<Profile> getActivePomProfiles(String modelId)
{    return activePomProfiles.get(modelId);}
6331312a245d9c03e2c54786da6577734ff10c80681559a9bb786c463ced66c6
setActivePomProfiles
public DefaultModelBuildingResult setActivePomProfiles(String modelId, List<Profile> activeProfiles)
{        Objects.requireNonNull(modelId, "modelId cannot null");    if (activeProfiles != null) {        this.activePomProfiles.put(modelId, new ArrayList<>(activeProfiles));    } else {        this.activePomProfiles.remove(modelId);    }    return this;}
620fa27ffc85afb77fec042e4c398091717a948752fbc2a16bb5a4e65bcc0188
getActiveExternalProfiles
public List<Profile> getActiveExternalProfiles()
{    return activeExternalProfiles;}
08f0c3cb09001c2ec977afe989a498bbf0710425fcc88fc5547e1a65a9ae6604
setActiveExternalProfiles
public DefaultModelBuildingResult setActiveExternalProfiles(List<Profile> activeProfiles)
{    if (activeProfiles != null) {        this.activeExternalProfiles = new ArrayList<>(activeProfiles);    } else {        this.activeExternalProfiles.clear();    }    return this;}
a2ea96049239ca557f106e499635d922b304c6461a115dff7d982c9db8123264
getProblems
public List<ModelProblem> getProblems()
{    return problems;}
dc68debdad54eb2903108c37e8b216538b280606146a447c05c18bad43e63b41
setProblems
public DefaultModelBuildingResult setProblems(List<ModelProblem> problems)
{    if (problems != null) {        this.problems = new ArrayList<>(problems);    } else {        this.problems.clear();    }    return this;}
c544784f026afebea24caaff889181a15292a98786506cbfc66814257976c7b9
getSource
public String getSource()
{    return source;}
d0206afdd4bbfbca49378097e83c12789d7836ac6e56572eee8d2abd20c4c84d
getLineNumber
public int getLineNumber()
{    return lineNumber;}
de418c2b40b113f31f0e80a27291a5fc9f70e24067ed5b3ab5871ddcb04ceb6e
getColumnNumber
public int getColumnNumber()
{    return columnNumber;}
174e8a34a44121368f245f81059cdcbc8bef9bc1d1c977af0cca90e8dcfd12a7
getModelId
public String getModelId()
{    return modelId;}
854d9d54d3315f04df8394cf9b7e23acfa1148329c6dabcb18e9f24a7ab80028
getException
public Exception getException()
{    return exception;}
b46153cc21231cb60e014b6b3c49b437699575e4012681cb08026e5238c66751
getMessage
public String getMessage()
{    String msg;    if (message != null && message.length() > 0) {        msg = message;    } else {        msg = exception.getMessage();        if (msg == null) {            msg = "";        }    }    return msg;}
60ad86dc590f7242c4533d9ac40bba78bbbb39054da6560754306741e80942d2
getSeverity
public Severity getSeverity()
{    return severity;}
67c43c33eda42a20e66b634c061c7d8d0d71830d5ca6dd8747909248ea0437e8
getVersion
public Version getVersion()
{    return version;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    StringBuilder buffer = new StringBuilder(128);    buffer.append('[').append(getSeverity()).append("] ");    buffer.append(getMessage());    buffer.append(" @ ").append(ModelProblemUtils.formatLocation(this, null));    return buffer.toString();}
2e06e9d3f7e276ecfe4b8e1f177f8b05e7a013cdb1245b47a341885977d48ab0
hasFatalErrors
public boolean hasFatalErrors()
{    return severities.contains(ModelProblem.Severity.FATAL);}
d99f047ebe8df4153e3d36ea8ba66b404f66ea62695843f4770c3ef6eed92ae1
hasErrors
public boolean hasErrors()
{    return severities.contains(ModelProblem.Severity.ERROR) || severities.contains(ModelProblem.Severity.FATAL);}
a2ea96049239ca557f106e499635d922b304c6461a115dff7d982c9db8123264
getProblems
public List<ModelProblem> getProblems()
{    return problems;}
d57b630a432828ab4cae20dd742ae31b73be5d282f67404d4a4b739bf68622a9
setSource
public void setSource(String source)
{    this.source = source;    this.sourceModel = null;}
b1825a0abb87b07a1622f98edf645cc521fb2ebcf4dd551439191a02d4a271f1
setSource
public void setSource(Model source)
{    this.sourceModel = source;    this.source = null;    if (rootModel == null) {        rootModel = source;    }}
b51b455db94022b9c42c4239a9a6e451eefa8853f2373421553f3ce2554197c6
getSource
private String getSource()
{    if (source == null && sourceModel != null) {        source = ModelProblemUtils.toPath(sourceModel);    }    return source;}
7b56600ac031df6cf27d8e8fc0aecb16fe154f8fe6f5bf5c11ad815b2305fba3
getModelId
private String getModelId()
{    return ModelProblemUtils.toId(sourceModel);}
a88b7f1d58e1f5e3e3776726eb15075f8b27cb6d8313ac18d9d1781b5fcb441f
setRootModel
public void setRootModel(Model rootModel)
{    this.rootModel = rootModel;}
47d5992fd7da283127d5094b3662c7f99bfb0114d50f52b76d82ea481635ba1d
getRootModel
public Model getRootModel()
{    return rootModel;}
b7da458dd67732bcff9265f7e58bb3d31ac960f537fa89ba36f3905d1a54539f
getRootModelId
public String getRootModelId()
{    return ModelProblemUtils.toId(rootModel);}
cff8b5d597a311e9370967aed2866497d46f7885179deeb28322fc74c9a7db23
add
public void add(ModelProblem problem)
{    problems.add(problem);    severities.add(problem.getSeverity());}
955ba24f763e4845a3c4ac171fd9475784b1ca42fe3967cc106e66d07fe19913
addAll
public void addAll(List<ModelProblem> problems)
{    this.problems.addAll(problems);    for (ModelProblem problem : problems) {        severities.add(problem.getSeverity());    }}
db24eb665ffaac0d3626cacc0bf9a02aa9918f27efe6dce02ae97c60cd1bc733
add
public void add(ModelProblemCollectorRequest req)
{    int line = -1;    int column = -1;    String source = null;    String modelId = null;    if (req.getLocation() != null) {        line = req.getLocation().getLineNumber();        column = req.getLocation().getColumnNumber();        if (req.getLocation().getSource() != null) {            modelId = req.getLocation().getSource().getModelId();            source = req.getLocation().getSource().getLocation();        }    }    if (modelId == null) {        modelId = getModelId();        source = getSource();    }    if (line <= 0 && column <= 0 && req.getException() instanceof ModelParseException) {        ModelParseException e = (ModelParseException) req.getException();        line = e.getLineNumber();        column = e.getColumnNumber();    }    ModelProblem problem = new DefaultModelProblem(req.getMessage(), req.getSeverity(), req.getVersion(), source, line, column, modelId, req.getException());    add(problem);}
82dfdc9c543a9d7a40fef3bf21f032ee86f77515b0ffcc187d9582e6547f7723
newModelBuildingException
public ModelBuildingException newModelBuildingException()
{    ModelBuildingResult result = this.result;    if (result.getModelIds().isEmpty()) {        DefaultModelBuildingResult tmp = new DefaultModelBuildingResult();        tmp.setEffectiveModel(result.getEffectiveModel());        tmp.setProblems(getProblems());        tmp.setActiveExternalProfiles(result.getActiveExternalProfiles());        String id = getRootModelId();        tmp.addModelId(id);        tmp.setRawModel(id, getRootModel());        result = tmp;    }    return new ModelBuildingException(result);}
7b257e3d194631abac87f6c63cbe380b0fab4a2d7536116e2490e2fd8c9081f4
setModelLocator
public DefaultModelProcessor setModelLocator(ModelLocator locator)
{    this.locator = locator;    return this;}
dee3711f9ba0acd370993b184f9753cfb65d8f620eade53e27cb12cc522f830b
setModelReader
public DefaultModelProcessor setModelReader(ModelReader reader)
{    this.reader = reader;    return this;}
743f221b5314652f66ac5d34ff7b8454c9d2960d7413f3a68d08cce876c7d877
locatePom
public File locatePom(File projectDirectory)
{    return locator.locatePom(projectDirectory);}
f90ca8f88e16914e6b1b9ea15b4cbcf18f94de15aa63d029355a566490df37ad
read
public Model read(File input, Map<String, ?> options) throws IOException
{    return reader.read(input, options);}
fb163c75d3160cac572ef2fed851c79386622b2cabd2d6c38a0399fddc8f2c7c
read
public Model read(Reader input, Map<String, ?> options) throws IOException
{    return reader.read(input, options);}
8dc86971a1d6631e01710e75affa7f855865f83ce7bebd54194dda60988ba430
read
public Model read(InputStream input, Map<String, ?> options) throws IOException
{    return reader.read(input, options);}
9e41472ee24bfb1867a8e9e5c5bd1fe3eb2642f5fedb094f54f96a5b46b086ba
getPomFile
public File getPomFile()
{    return getFile();}
c5741444ee98d247e16c6fbc360167710cf8d712dd6f925a28a85ba1028b561e
getRelatedSource
public ModelSource2 getRelatedSource(String relPath)
{    relPath = relPath.replace('\\', File.separatorChar).replace('/', File.separatorChar);    File relatedPom = new File(getFile().getParentFile(), relPath);    if (relatedPom.isDirectory()) {                relatedPom = new File(relatedPom, "pom.xml");    }    if (relatedPom.isFile() && relatedPom.canRead()) {        return new FileModelSource(new File(relatedPom.toURI().normalize()));    }    return null;}
bef8944cd80966e8c3f2910cc8402bf8dd36cfbf168b2776ddccdfe1801646cc
getLocationURI
public URI getLocationURI()
{    return getFile().toURI();}
4afeb0868b55bdd8e18a00a3cb43d83e0714378d1c4bb36f0936daefc060e2e8
equals
public boolean equals(Object obj)
{    if (this == obj) {        return true;    }    if (!(obj instanceof FileModelSource)) {        return false;    }    FileModelSource other = (FileModelSource) obj;    return getFile().equals(other.getFile());}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    return getFile().hashCode();}
9e41472ee24bfb1867a8e9e5c5bd1fe3eb2642f5fedb094f54f96a5b46b086ba
getPomFile
public File getPomFile()
{    return request.getPomFile();}
210d658ee1163ed69cfa36f072de98d33cda6d70e67fc8ae7e63fde1c6bd6481
setPomFile
public FilterModelBuildingRequest setPomFile(File pomFile)
{    request.setPomFile(pomFile);    return this;}
fc5519389fed682fe40d06814487073def8da10562fe954458ce6ce8af594324
getModelSource
public ModelSource getModelSource()
{    return request.getModelSource();}
76451cd47665fd2f2d86edf0fe9e5c21ff43abfe0c24cd2f28bdbaa394cea046
setModelSource
public FilterModelBuildingRequest setModelSource(ModelSource modelSource)
{    request.setModelSource(modelSource);    return this;}
cedc9d30d793a95bc432229d6308faea636d2bfe1a884ce5b844a48888ca25e0
getValidationLevel
public int getValidationLevel()
{    return request.getValidationLevel();}
47a3921a8531cd5ae9447009aac8793ef2a533962b509fe13d6d8473d914dd4c
setValidationLevel
public FilterModelBuildingRequest setValidationLevel(int validationLevel)
{    request.setValidationLevel(validationLevel);    return this;}
fb5aa23cec5727b1ee69ee2223c3dac50c01a7e9c600cfc3ade8c4592b52fed8
isProcessPlugins
public boolean isProcessPlugins()
{    return request.isProcessPlugins();}
cb14ba43d66c80570ea79fabc6e0bc1e046c85a017e6f088e19091dc19abf498
setProcessPlugins
public FilterModelBuildingRequest setProcessPlugins(boolean processPlugins)
{    request.setProcessPlugins(processPlugins);    return this;}
61846e0affd2505fbc9bdfe402664cc430b626e3f016e45be8e06f3f535aa5fe
isTwoPhaseBuilding
public boolean isTwoPhaseBuilding()
{    return request.isTwoPhaseBuilding();}
39149a9376d61fd8c550b39aa530d4257440e2ce5c13a352c4fea7d3bfed1923
setTwoPhaseBuilding
public FilterModelBuildingRequest setTwoPhaseBuilding(boolean twoPhaseBuilding)
{    request.setTwoPhaseBuilding(twoPhaseBuilding);    return this;}
8b3bcb305979c03c4cfb1aa67a1413dad69328ad104cedfe018cfabdb5a95d32
isLocationTracking
public boolean isLocationTracking()
{    return request.isLocationTracking();}
a5b77a71db8b3737f0e02863deb97da72058998b005ebb295d2c013b66a09fd3
setLocationTracking
public FilterModelBuildingRequest setLocationTracking(boolean locationTracking)
{    request.setLocationTracking(locationTracking);    return this;}
07f936934d46b8317f059da2ec27eb16b676abfedf6a187723d3defbd4f5707f
getProfiles
public List<Profile> getProfiles()
{    return request.getProfiles();}
d73df48c61046a398c18d8d359193526adc1d2aec7c45842b57e262769c5e908
setProfiles
public FilterModelBuildingRequest setProfiles(List<Profile> profiles)
{    request.setProfiles(profiles);    return this;}
e14ffb2a27c664e5057ee17c4a1fb0bb5b055f2a4b10065731f970cb254fa6a4
getActiveProfileIds
public List<String> getActiveProfileIds()
{    return request.getActiveProfileIds();}
651e9ce7638e7c1e8bd958cc19ecec22833a43708ad163fed67ea441ef550790
setActiveProfileIds
public FilterModelBuildingRequest setActiveProfileIds(List<String> activeProfileIds)
{    request.setActiveProfileIds(activeProfileIds);    return this;}
74822a7709f5a5a1241339c1cdc0e2793c5f8fec1d0f52e09d8c8b484423e538
getInactiveProfileIds
public List<String> getInactiveProfileIds()
{    return request.getInactiveProfileIds();}
ce5b1459c23ab453a5c39d41bea694e06e02d9698c2aa5fce1265dbf59fd5b89
setInactiveProfileIds
public FilterModelBuildingRequest setInactiveProfileIds(List<String> inactiveProfileIds)
{    request.setInactiveProfileIds(inactiveProfileIds);    return this;}
8b369022cea09c7bb7272e8cc545450dc294bedf652bae5b2ea9f14fffe1fc46
getSystemProperties
public Properties getSystemProperties()
{    return request.getSystemProperties();}
cd0d76b41646517daf2dfcf9f1091c9e2b7c55fc879671550cb519c659a6816a
setSystemProperties
public FilterModelBuildingRequest setSystemProperties(Properties systemProperties)
{    request.setSystemProperties(systemProperties);    return this;}
378f8d6e21d4ae0bd6aa85de0988ab8d214704648e0ad1a17b8ce9c7e3a14225
getUserProperties
public Properties getUserProperties()
{    return request.getUserProperties();}
194c48d2553990c7a9e0828fdcef5dd8032fb7929290e8e7fb9d8fee81267239
setUserProperties
public FilterModelBuildingRequest setUserProperties(Properties userProperties)
{    request.setUserProperties(userProperties);    return this;}
2168fd766a195a9904679de5bb0e68ef88a89fd39b1468640cdae24d4a564431
getBuildStartTime
public Date getBuildStartTime()
{    return request.getBuildStartTime();}
aed2e97203d5a4ae9e5c2fc68b1e8a4f88a44b4ec3ac41ee1711e1cd40b93be4
setBuildStartTime
public ModelBuildingRequest setBuildStartTime(Date buildStartTime)
{    request.setBuildStartTime(buildStartTime);    return this;}
e26fa2a396dff74843c14a1757fcfa626aa1c7a164ef486100d88f85e2f8666e
getModelResolver
public ModelResolver getModelResolver()
{    return request.getModelResolver();}
8f286cbc94f4e1aab1078baf5d43fc8a4ca48e36c9e2439fdd3db29bff0bb968
setModelResolver
public FilterModelBuildingRequest setModelResolver(ModelResolver modelResolver)
{    request.setModelResolver(modelResolver);    return this;}
083db102f25e503b1a5420c350ad8b4db6a9220293b82a600eb3bdce34d59b72
getModelBuildingListener
public ModelBuildingListener getModelBuildingListener()
{    return request.getModelBuildingListener();}
3f261dfaf8b5bfff7ad231f6ca098b09f3b49b89b68f0019b061e62b826922e1
setModelBuildingListener
public ModelBuildingRequest setModelBuildingListener(ModelBuildingListener modelBuildingListener)
{    request.setModelBuildingListener(modelBuildingListener);    return this;}
42ffb83acd70e473337130e635f944b12013e821ade4c6c737b6f8db6e3167ad
getModelCache
public ModelCache getModelCache()
{    return request.getModelCache();}
02ca1cdcba1131a377d08cd84cf017f88c3d3e932f5f402d281d6cc5314d866c
setModelCache
public FilterModelBuildingRequest setModelCache(ModelCache modelCache)
{    request.setModelCache(modelCache);    return this;}
758a2b9c95b61aa06bd9db1a6b79e7572fc8d4d624e05ce8c18aa852c80fcb4e
getRawModel
public Model getRawModel()
{    return request.getRawModel();}
e2b6255c09295537f90e5f67c103b5d3c8ec726e2ee0c8dc6905fa48acd57c85
setRawModel
public ModelBuildingRequest setRawModel(Model rawModel)
{    request.setRawModel(rawModel);    return this;}
001a6b42decc3fc2836429f9cb5596512d9a6e2ec51ebad2382fe19246b75525
getWorkspaceModelResolver
public WorkspaceModelResolver getWorkspaceModelResolver()
{    return request.getWorkspaceModelResolver();}
0a602e4d577a5819e888e3ec394c1f8ac8b4a1f67d4590406eeb8617ffbbbc54
setWorkspaceModelResolver
public ModelBuildingRequest setWorkspaceModelResolver(WorkspaceModelResolver workspaceResolver)
{    request.setWorkspaceModelResolver(workspaceResolver);    return this;}
c2b836fdf3607668a71d66a19d6aa77e4184c099b8af861b05157add540c7d49
fire
public void fire(ModelBuildingListener listener, ModelBuildingEvent event)
{    listener.buildExtensionsAssembled(event);}
660f1fe7478f57ed08c2491e4835d637d42ed3d0583ea58322fa9f2039210c6d
getResult
public ModelBuildingResult getResult()
{    return result;}
f938998a08eadbdbb54a4592f85c356494c5fd4a09480ef41473d448461d6a49
getModel
public Model getModel()
{    if (result == null) {        return null;    }    if (result.getEffectiveModel() != null) {        return result.getEffectiveModel();    }    return result.getRawModel();}
174e8a34a44121368f245f81059cdcbc8bef9bc1d1c977af0cca90e8dcfd12a7
getModelId
public String getModelId()
{    if (result == null || result.getModelIds().isEmpty()) {        return "";    }    return result.getModelIds().get(0);}
a2ea96049239ca557f106e499635d922b304c6461a115dff7d982c9db8123264
getProblems
public List<ModelProblem> getProblems()
{    if (result == null) {        return Collections.emptyList();    }    return Collections.unmodifiableList(result.getProblems());}
235e2dd28e30616c72bfdda0bf370311378221020451de640c1b39e0ee8fbb84
toMessage
private static String toMessage(ModelBuildingResult result)
{    if (result != null && !result.getModelIds().isEmpty()) {        return toMessage(result.getModelIds().get(0), result.getProblems());    }    return null;}
e36b6aa26efd361be2c64f29e1e78af498d35deae891d14a1778ee048a4d85e2
toMessage
private static String toMessage(String modelId, List<ModelProblem> problems)
{    StringWriter buffer = new StringWriter(1024);    PrintWriter writer = new PrintWriter(buffer);    writer.print(problems.size());    writer.print((problems.size() == 1) ? " problem was " : " problems were ");    writer.print("encountered while building the effective model");    if (modelId != null && modelId.length() > 0) {        writer.print(" for ");        writer.print(modelId);    }    writer.println();    for (ModelProblem problem : problems) {        writer.print("[");        writer.print(problem.getSeverity());        writer.print("] ");        writer.print(problem.getMessage());        writer.print(" @ ");        writer.println(ModelProblemUtils.formatLocation(problem, modelId));    }    return buffer.toString();}
239fbe3eb64d679cbac1161825b07d6a8436ead3c6c3d140d9caec2275827023
getName
public String getName()
{    return "raw";}
a837bb78b0596b5f90d0f48fc9d4037f86820933009684ea5f7dd55ed5885496
getType
public Class<ModelData> getType()
{    return ModelData.class;}
0e9eb9a028f86b8b1a7a7b5099c43c987eed81915c9f9e117e0ce7576e679568
intoCache
public ModelData intoCache(ModelData data)
{    Model model = (data.getModel() != null) ? data.getModel().clone() : null;    return new ModelData(data.getSource(), model, data.getGroupId(), data.getArtifactId(), data.getVersion());}
c70670d8341544fa6a041f6e38727770c3b01e41f13f4b330177b9c552178615
fromCache
public ModelData fromCache(ModelData data)
{    return intoCache(data);}
239fbe3eb64d679cbac1161825b07d6a8436ead3c6c3d140d9caec2275827023
getName
public String getName()
{    return "import";}
065a3b3ad6ce044387558bb8e61419cbfc183a3839bcab91cc927fcc5ef4d162
getType
public Class<DependencyManagement> getType()
{    return DependencyManagement.class;}
dabf2a68e701983353b34a8555acc03e3923d35ac4ed062eb01d9785ff797c4b
intoCache
public DependencyManagement intoCache(DependencyManagement data)
{    return (data != null) ? data.clone() : null;}
07e3f90baf967952ce11f0d9818d2ccde15909d5dac5c22a5f4a0d96ce4eb0c9
fromCache
public DependencyManagement fromCache(DependencyManagement data)
{    return intoCache(data);}
f99f8cf535869e29eae8eab0e46d00bbedeb1feff9d223942010d4db8a5dabde
getSource
public ModelSource getSource()
{    return source;}
f938998a08eadbdbb54a4592f85c356494c5fd4a09480ef41473d448461d6a49
getModel
public Model getModel()
{    return model;}
bed66aab2d230f0da58021af59b552451fbdb0495ff7e0cfeed543eadd9b29bc
setModel
public void setModel(Model model)
{    this.model = model;}
758a2b9c95b61aa06bd9db1a6b79e7572fc8d4d624e05ce8c18aa852c80fcb4e
getRawModel
public Model getRawModel()
{    return rawModel;}
e1c7acf61ad828e3579c8c80325795faea49ed85d52efebf21bd7c6a976199eb
setRawModel
public void setRawModel(Model rawModel)
{    this.rawModel = rawModel;}
1aea36cefa606fc4fc88d3d2c313e87927892cd12ab460dddae7fd6917e14659
getActiveProfiles
public List<Profile> getActiveProfiles()
{    return activeProfiles;}
65103e24417ff186ae0f70fc41b0bb1da2f84e408a93109e734eb93131d500b7
setActiveProfiles
public void setActiveProfiles(List<Profile> activeProfiles)
{    this.activeProfiles = activeProfiles;}
9590314d7a6edd0118345714cc714a8e73448e57e702bb4c6893b363f509d64d
getGroupId
public String getGroupId()
{    return (groupId != null) ? groupId : "";}
71bcb3c91e0d464929235253ed6afcc351b3e9058163242c449a951b7b882841
setGroupId
public void setGroupId(String groupId)
{    this.groupId = groupId;}
1e5191dc99d9314f2df50294bcd8d717af7b8f4311575d36d8d75b27121f1064
getArtifactId
public String getArtifactId()
{    return (artifactId != null) ? artifactId : "";}
20cbd85c6b33f77aed396f8e4100794ba5666a5469aea43d797e8b46e9761df1
setArtifactId
public void setArtifactId(String artifactId)
{    this.artifactId = artifactId;}
446b3b91c7c41085df1dc5542616b89ccd409f6a1d45e4d60d3ca00ac839ecf0
getVersion
public String getVersion()
{    return (version != null) ? version : "";}
fa655d76002df94322c0d82cb5fbadecc48b0bb7bb0e58203d0a274985fccd86
setVersion
public void setVersion(String version)
{    this.version = version;}
09e8f13a9a603d31d64bb498b77d15572483824d843d0e82a570643192f62186
getId
public String getId()
{    StringBuilder buffer = new StringBuilder(128);    buffer.append(getGroupId()).append(':').append(getArtifactId()).append(':').append(getVersion());    return buffer.toString();}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return String.valueOf(model);}
60ad86dc590f7242c4533d9ac40bba78bbbb39054da6560754306741e80942d2
getSeverity
public Severity getSeverity()
{    return severity;}
67c43c33eda42a20e66b634c061c7d8d0d71830d5ca6dd8747909248ea0437e8
getVersion
public Version getVersion()
{    return version;}
854d9d54d3315f04df8394cf9b7e23acfa1148329c6dabcb18e9f24a7ab80028
getException
public Exception getException()
{    return exception;}
5856729b43010d0c024780d45a088c723841d9e8c57e484081f3f01741a0ad4a
setException
public ModelProblemCollectorRequest setException(Exception exception)
{    this.exception = exception;    return this;}
b46153cc21231cb60e014b6b3c49b437699575e4012681cb08026e5238c66751
getMessage
public String getMessage()
{    return message;}
7d7da299de383bfd25fa89c0e7a4f1d75be1d109231c25d583e2921d6e20972b
setMessage
public ModelProblemCollectorRequest setMessage(String message)
{    this.message = message;    return this;}
e6592a4a9499b8de14a7200537676c1c4c74945594057bbf269178dd9d9fa993
getLocation
public InputLocation getLocation()
{    return location;}
0e2c2b55f530ad0de1478362b6c2d5f344b1230f56f75f6cdf5d1c23e74f75cd
setLocation
public ModelProblemCollectorRequest setLocation(InputLocation location)
{    this.location = location;    return this;}
213edd2d31c1f2cddfa10e13e6af6c687b9f5353032f27e0651b0f9a383c4791
toSourceHint
 static String toSourceHint(Model model)
{    if (model == null) {        return "";    }    StringBuilder buffer = new StringBuilder(128);    buffer.append(toId(model));    File pomFile = model.getPomFile();    if (pomFile != null) {        buffer.append(" (").append(pomFile).append(')');    }    return buffer.toString();}
c58e44fa3a0e6bf0db753de4e2b7c5124ae8411280533ff68d32f7daf664862f
toPath
 static String toPath(Model model)
{    String path = "";    if (model != null) {        File pomFile = model.getPomFile();        if (pomFile != null) {            path = pomFile.getAbsolutePath();        }    }    return path;}
c88d6bd4533f94c93ca6e37a857fefd49fa4feb0a6908fc448519fc4152fa312
toId
 static String toId(Model model)
{    if (model == null) {        return "";    }    String groupId = model.getGroupId();    if (groupId == null && model.getParent() != null) {        groupId = model.getParent().getGroupId();    }    String artifactId = model.getArtifactId();    String version = model.getVersion();    if (version == null && model.getParent() != null) {        version = model.getParent().getVersion();    }    if (version == null) {        version = "[unknown-version]";    }    return toId(groupId, artifactId, version);}
4d9c3efe3bfabda9e7297606d38cd5e66b511d5f6071833bb66af2c31791611e
toId
 static String toId(String groupId, String artifactId, String version)
{    StringBuilder buffer = new StringBuilder(128);    buffer.append((groupId != null && groupId.length() > 0) ? groupId : "[unknown-group-id]");    buffer.append(':');    buffer.append((artifactId != null && artifactId.length() > 0) ? artifactId : "[unknown-artifact-id]");    buffer.append(':');    buffer.append((version != null && version.length() > 0) ? version : "[unknown-version]");    return buffer.toString();}
4d17cf70e4cc0df46aaa7892e04050d1154b32c81253e8be6a30b10f3e42a617
formatLocation
public static String formatLocation(ModelProblem problem, String projectId)
{    StringBuilder buffer = new StringBuilder(256);    if (!problem.getModelId().equals(projectId)) {        buffer.append(problem.getModelId());        if (problem.getSource().length() > 0) {            if (buffer.length() > 0) {                buffer.append(", ");            }            buffer.append(problem.getSource());        }    }    if (problem.getLineNumber() > 0) {        if (buffer.length() > 0) {            buffer.append(", ");        }        buffer.append("line ").append(problem.getLineNumber());    }    if (problem.getColumnNumber() > 0) {        if (buffer.length() > 0) {            buffer.append(", ");        }        buffer.append("column ").append(problem.getColumnNumber());    }    return buffer.toString();}
78b193fc6e69cbd690102caf76fd7fbaa90c0af9c3a55c3fc2100487d56391de
success
public static Result<T> success(T model)
{    return success(model, Collections.<ModelProblem>emptyList());}
77748a05ea7063980499188e5b1f9af24fcf0fbf7f4e8ab2279df24a319f2e85
success
public static Result<T> success(T model, Iterable<? extends ModelProblem> problems)
{    assert !hasErrors(problems);    return new Result<>(false, model, problems);}
b7b8e1886f5c640f574c86b3312dd4fcada7c913f864009e4c052b5c37357ff1
success
public static Result<T> success(T model, Result<?>... results)
{    final List<ModelProblem> problemsList = new ArrayList<>();    for (Result<?> result1 : results) {        for (ModelProblem modelProblem : result1.getProblems()) {            problemsList.add(modelProblem);        }    }    return success(model, problemsList);}
de9913dcaf3810c88625a477cf3919e73b6825a786800b6dff194398f78ad991
error
public static Result<T> error(Iterable<? extends ModelProblem> problems)
{    return error(null, problems);}
0910e62a72d2a187b0a258aeab3a4199d9765314a86e7156ce01647e8b5762ab
error
public static Result<T> error(T model)
{    return error(model, Collections.<ModelProblem>emptyList());}
7c42237358b4b6097e218a1f47fea9ed47522e83ed5baab24537e5eff4054bf3
error
public static Result<T> error(Result<?> result)
{    return error(result.getProblems());}
baf8745ca958674318b638697a88db6c6e18ccebcdfde663ae7b8af1b597f700
error
public static Result<T> error(Result<?>... results)
{    final List<ModelProblem> problemsList = new ArrayList<>();    for (Result<?> result1 : results) {        for (ModelProblem modelProblem : result1.getProblems()) {            problemsList.add(modelProblem);        }    }    return error(problemsList);}
e79b025ac8cb478c2e6ffb2d2784ecdc0b55d88908f5f165a88a38b516f75c09
error
public static Result<T> error(T model, Iterable<? extends ModelProblem> problems)
{    return new Result<>(true, model, problems);}
45d87a0a7a0c65af98230021f7f46f45eea3707f759abf61ff8c62d1dde73df9
newResult
public static Result<T> newResult(T model, Iterable<? extends ModelProblem> problems)
{    return new Result<>(hasErrors(problems), model, problems);}
6901ccb805e93eca98498c9210c57e2bf8c15611ac62c2efd450f10a942a41d1
addProblem
public static Result<T> addProblem(Result<T> result, ModelProblem problem)
{    return addProblems(result, singleton(problem));}
aebf393ce0b0d5c244da7892e1af1789ed10d5cd3ee71e7cc89bd1b1930b6bb6
addProblems
public static Result<T> addProblems(Result<T> result, Iterable<? extends ModelProblem> problems)
{    Collection<ModelProblem> list = new ArrayList<>();    for (ModelProblem item : problems) {        list.add(item);    }    for (ModelProblem item : result.getProblems()) {        list.add(item);    }    return new Result<>(result.hasErrors() || hasErrors(problems), result.get(), list);}
ddd7fbb233641c011fd8187d21f93a45dd0c72fe2e069d8f1779cd2806ad901d
addProblems
public static Result<T> addProblems(Result<T> result, Result<?>... results)
{    final List<ModelProblem> problemsList = new ArrayList<>();    for (Result<?> result1 : results) {        for (ModelProblem modelProblem : result1.getProblems()) {            problemsList.add(modelProblem);        }    }    return addProblems(result, problemsList);}
c4f1f3f630a18bbc57131d0f68ce0b1fb02d8a6c6b2751fde456d48196fa97f6
newResultSet
public static Result<Iterable<T>> newResultSet(Iterable<? extends Result<? extends T>> results)
{    boolean hasErrors = false;    List<T> modelsList = new ArrayList<>();    List<ModelProblem> problemsList = new ArrayList<>();    for (Result<? extends T> result : results) {        modelsList.add(result.get());        for (ModelProblem modelProblem : result.getProblems()) {            problemsList.add(modelProblem);        }        if (result.hasErrors()) {            hasErrors = true;        }    }    return new Result<>(hasErrors, (Iterable<T>) modelsList, problemsList);}
fe745c4e7b6861566bdee8e340a8d799e8a8bc01c801b5f9d37b0b972e89c8f0
hasErrors
private static boolean hasErrors(Iterable<? extends ModelProblem> problems)
{    for (ModelProblem input : problems) {        if (input.getSeverity().equals(ERROR) || input.getSeverity().equals(FATAL)) {            return true;        }    }    return false;}
35dde7a34e2535a2a4327124fa0a232945ba7a9f6ba0aa9c437264c9cf4ffc48
getProblems
public Iterable<? extends ModelProblem> getProblems()
{    return problems;}
f92b71e18fa63d96cf2b628ad8520702b897423512edea5de9dd0e96f471f5ff
get
public T get()
{    return value;}
d99f047ebe8df4153e3d36ea8ba66b404f66ea62695843f4770c3ef6eed92ae1
hasErrors
public boolean hasErrors()
{    return errors;}
df72fe44194b702e7bfcd19cacee231f2987530cf0fd8d80faa683ba875a29e7
importManagement
public void importManagement(Model target, List<? extends DependencyManagement> sources, ModelBuildingRequest request, ModelProblemCollector problems)
{    if (sources != null && !sources.isEmpty()) {        Map<String, Dependency> dependencies = new LinkedHashMap<>();        DependencyManagement depMgmt = target.getDependencyManagement();        if (depMgmt != null) {            for (Dependency dependency : depMgmt.getDependencies()) {                dependencies.put(dependency.getManagementKey(), dependency);            }        } else {            depMgmt = new DependencyManagement();            target.setDependencyManagement(depMgmt);        }        for (DependencyManagement source : sources) {            for (Dependency dependency : source.getDependencies()) {                String key = dependency.getManagementKey();                if (!dependencies.containsKey(key)) {                    dependencies.put(key, dependency);                }            }        }        depMgmt.setDependencies(new ArrayList<>(dependencies.values()));    }}
6e8f05d29cd28e607684b34907c0fc37e0a6c47e53a416d1ba9999b2ec4aa4e0
assembleModelInheritance
public void assembleModelInheritance(Model child, Model parent, ModelBuildingRequest request, ModelProblemCollector problems)
{    Map<Object, Object> hints = new HashMap<>();    String childPath = child.getProperties().getProperty(CHILD_DIRECTORY_PROPERTY, child.getArtifactId());    hints.put(CHILD_DIRECTORY, childPath);    hints.put(MavenModelMerger.CHILD_PATH_ADJUSTMENT, getChildPathAdjustment(child, parent, childPath));    merger.merge(child, parent, false, hints);}
f87d892b2c1c54994e16e0f329e35f317f98df58e037896b3f40fc1bb9625396
getChildPathAdjustment
private String getChildPathAdjustment(Model child, Model parent, String childDirectory)
{    String adjustment = "";    if (parent != null) {        String childName = child.getArtifactId();        /*             * This logic (using filesystem, against wanted independence from the user environment) exists only for the             * sake of backward-compat with 2.x (MNG-5000). In general, it is wrong to             * base URL inheritance on the module directory names as this information is unavailable for POMs in the             * repository. In other words, modules where artifactId != moduleDirName will see different effective URLs             * depending on how the model was constructed (from filesystem or from repository).             */        if (child.getProjectDirectory() != null) {            childName = child.getProjectDirectory().getName();        }        for (String module : parent.getModules()) {            module = module.replace('\\', '/');            if (module.regionMatches(true, module.length() - 4, ".xml", 0, 4)) {                module = module.substring(0, module.lastIndexOf('/') + 1);            }            String moduleName = module;            if (moduleName.endsWith("/")) {                moduleName = moduleName.substring(0, moduleName.length() - 1);            }            int lastSlash = moduleName.lastIndexOf('/');            moduleName = moduleName.substring(lastSlash + 1);            if ((moduleName.equals(childName) || (moduleName.equals(childDirectory))) && lastSlash >= 0) {                adjustment = module.substring(0, lastSlash);                break;            }        }    }    return adjustment;}
637d1a6206b60c529136ac827a0227a52ae120b88da7526a1f8e770f6f72c5cd
extrapolateChildUrl
protected String extrapolateChildUrl(String parentUrl, boolean appendPath, Map<Object, Object> context)
{    Object childDirectory = context.get(CHILD_DIRECTORY);    Object childPathAdjustment = context.get(CHILD_PATH_ADJUSTMENT);    if (StringUtils.isBlank(parentUrl) || childDirectory == null || childPathAdjustment == null || !appendPath) {        return parentUrl;    }        return appendPath(parentUrl, childDirectory.toString(), childPathAdjustment.toString());}
af0b50ca03fb3a2d043bfd6320833ed32addeed912897ae9eb0af70a429c3c5f
appendPath
private String appendPath(String parentUrl, String childPath, String pathAdjustment)
{    StringBuilder url = new StringBuilder(parentUrl.length() + pathAdjustment.length() + childPath.length() + ((pathAdjustment.length() == 0) ? 1 : 2));    url.append(parentUrl);    concatPath(url, pathAdjustment);    concatPath(url, childPath);    return url.toString();}
32173a8e829a0afe81b52ccb2b85a48a39af21f20809f5c39ee55e643ee9172e
concatPath
private void concatPath(StringBuilder url, String path)
{    if (path.length() > 0) {        boolean initialUrlEndsWithSlash = url.charAt(url.length() - 1) == '/';        boolean pathStartsWithSlash = path.charAt(0) == '/';        if (pathStartsWithSlash) {            if (initialUrlEndsWithSlash) {                                url.setLength(url.length() - 1);            }        } else if (!initialUrlEndsWithSlash) {                        url.append('/');        }        url.append(path);                if (initialUrlEndsWithSlash && !path.endsWith("/")) {            url.append('/');        }    }}
adb88d10b5394bc909a0b05de593033656fa03e8a1089864ec1afa1d2b513e9a
mergeModelBase_Properties
protected void mergeModelBase_Properties(ModelBase target, ModelBase source, boolean sourceDominant, Map<Object, Object> context)
{    Properties merged = new Properties();    if (sourceDominant) {        merged.putAll(target.getProperties());        putAll(merged, source.getProperties(), CHILD_DIRECTORY_PROPERTY);    } else {        putAll(merged, source.getProperties(), CHILD_DIRECTORY_PROPERTY);        merged.putAll(target.getProperties());    }    target.setProperties(merged);    target.setLocation("properties", InputLocation.merge(target.getLocation("properties"), source.getLocation("properties"), sourceDominant));}
9d0ddb5782bb2483b00500cb2b631e966f5b2218245e5a24f38b66e2462e75b1
putAll
private void putAll(Map<Object, Object> s, Map<Object, Object> t, Object excludeKey)
{    for (Map.Entry<Object, Object> e : t.entrySet()) {        if (!e.getKey().equals(excludeKey)) {            s.put(e.getKey(), e.getValue());        }    }}
4dfefd0e1a9d2e2ec36522b87bc50609dee76c19bd871b54c6c21a022b576c70
mergePluginContainer_Plugins
protected void mergePluginContainer_Plugins(PluginContainer target, PluginContainer source, boolean sourceDominant, Map<Object, Object> context)
{    List<Plugin> src = source.getPlugins();    if (!src.isEmpty()) {        List<Plugin> tgt = target.getPlugins();        Map<Object, Plugin> master = new LinkedHashMap<>(src.size() * 2);        for (Plugin element : src) {            if (element.isInherited() || !element.getExecutions().isEmpty()) {                                Plugin plugin = new Plugin();                plugin.setLocation("", element.getLocation(""));                plugin.setGroupId(null);                mergePlugin(plugin, element, sourceDominant, context);                Object key = getPluginKey(element);                master.put(key, plugin);            }        }        Map<Object, List<Plugin>> predecessors = new LinkedHashMap<>();        List<Plugin> pending = new ArrayList<>();        for (Plugin element : tgt) {            Object key = getPluginKey(element);            Plugin existing = master.get(key);            if (existing != null) {                mergePlugin(element, existing, sourceDominant, context);                master.put(key, element);                if (!pending.isEmpty()) {                    predecessors.put(key, pending);                    pending = new ArrayList<>();                }            } else {                pending.add(element);            }        }        List<Plugin> result = new ArrayList<>(src.size() + tgt.size());        for (Map.Entry<Object, Plugin> entry : master.entrySet()) {            List<Plugin> pre = predecessors.get(entry.getKey());            if (pre != null) {                result.addAll(pre);            }            result.add(entry.getValue());        }        result.addAll(pending);        target.setPlugins(result);    }}
4f8797c8a0cb3a8f288e0a69c9dc21ace4f4969c0d34ac224589c522700aec84
mergePlugin
protected void mergePlugin(Plugin target, Plugin source, boolean sourceDominant, Map<Object, Object> context)
{    if (source.isInherited()) {        mergeConfigurationContainer(target, source, sourceDominant, context);    }    mergePlugin_GroupId(target, source, sourceDominant, context);    mergePlugin_ArtifactId(target, source, sourceDominant, context);    mergePlugin_Version(target, source, sourceDominant, context);    mergePlugin_Extensions(target, source, sourceDominant, context);    mergePlugin_Dependencies(target, source, sourceDominant, context);    mergePlugin_Executions(target, source, sourceDominant, context);}
f4011b29373adcba2687554512b430787bd0b1f64ea73251c2015a3f13ca3638
mergeReporting_Plugins
protected void mergeReporting_Plugins(Reporting target, Reporting source, boolean sourceDominant, Map<Object, Object> context)
{    List<ReportPlugin> src = source.getPlugins();    if (!src.isEmpty()) {        List<ReportPlugin> tgt = target.getPlugins();        Map<Object, ReportPlugin> merged = new LinkedHashMap<>((src.size() + tgt.size()) * 2);        for (ReportPlugin element : src) {            Object key = getReportPluginKey(element);            if (element.isInherited()) {                                ReportPlugin plugin = new ReportPlugin();                plugin.setLocation("", element.getLocation(""));                plugin.setGroupId(null);                mergeReportPlugin(plugin, element, sourceDominant, context);                merged.put(key, plugin);            }        }        for (ReportPlugin element : tgt) {            Object key = getReportPluginKey(element);            ReportPlugin existing = merged.get(key);            if (existing != null) {                mergeReportPlugin(element, existing, sourceDominant, context);            }            merged.put(key, element);        }        target.setPlugins(new ArrayList<>(merged.values()));    }}
ecac1f0de8a6b55bb4c4f81ffd43b1257dc5873ad5f7ad46b3df02e5f93b9352
setPathTranslator
public AbstractStringBasedModelInterpolator setPathTranslator(PathTranslator pathTranslator)
{    this.pathTranslator = pathTranslator;    return this;}
33b0e44bba2d65cd7042d8be601ac7275c8b86c9a2db146cb8a4cbe8d18ec33c
setUrlNormalizer
public AbstractStringBasedModelInterpolator setUrlNormalizer(UrlNormalizer urlNormalizer)
{    this.urlNormalizer = urlNormalizer;    return this;}
74d4476b0fd7a700f52354a00d8a3f668396ea303690fe93462906cc84411f40
createValueSources
protected List<ValueSource> createValueSources(final Model model, final File projectDir, final ModelBuildingRequest config, final ModelProblemCollector problems)
{    Properties modelProperties = model.getProperties();    ValueSource modelValueSource1 = new PrefixedObjectValueSource(PROJECT_PREFIXES, model, false);    if (config.getValidationLevel() >= ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {        modelValueSource1 = new ProblemDetectingValueSource(modelValueSource1, "pom.", "project.", problems);    }    ValueSource modelValueSource2 = new ObjectBasedValueSource(model);    if (config.getValidationLevel() >= ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {        modelValueSource2 = new ProblemDetectingValueSource(modelValueSource2, "", "project.", problems);    }        List<ValueSource> valueSources = new ArrayList<>(9);    if (projectDir != null) {        ValueSource basedirValueSource = new PrefixedValueSourceWrapper(new AbstractValueSource(false) {            @Override            public Object getValue(String expression) {                if ("basedir".equals(expression)) {                    return projectDir.getAbsolutePath();                }                return null;            }        }, PROJECT_PREFIXES, true);        valueSources.add(basedirValueSource);        ValueSource baseUriValueSource = new PrefixedValueSourceWrapper(new AbstractValueSource(false) {            @Override            public Object getValue(String expression) {                if ("baseUri".equals(expression)) {                    return projectDir.getAbsoluteFile().toPath().toUri().toASCIIString();                }                return null;            }        }, PROJECT_PREFIXES, false);        valueSources.add(baseUriValueSource);        valueSources.add(new BuildTimestampValueSource(config.getBuildStartTime(), modelProperties));    }    valueSources.add(modelValueSource1);    valueSources.add(new MapBasedValueSource(config.getUserProperties()));        if (config.getSystemProperties().containsKey(REVISION_PROPERTY)) {        modelProperties.put(REVISION_PROPERTY, config.getSystemProperties().get(REVISION_PROPERTY));    }    if (config.getSystemProperties().containsKey(CHANGELIST_PROPERTY)) {        modelProperties.put(CHANGELIST_PROPERTY, config.getSystemProperties().get(CHANGELIST_PROPERTY));    }    if (config.getSystemProperties().containsKey(SHA1_PROPERTY)) {        modelProperties.put(SHA1_PROPERTY, config.getSystemProperties().get(SHA1_PROPERTY));    }    valueSources.add(new MapBasedValueSource(modelProperties));    valueSources.add(new MapBasedValueSource(config.getSystemProperties()));    valueSources.add(new AbstractValueSource(false) {        @Override        public Object getValue(String expression) {            return config.getSystemProperties().getProperty("env." + expression);        }    });    valueSources.add(modelValueSource2);    return valueSources;}
11847c6fc1ea657a09fb97cfea92c7688683b7b646d9a6d928e2358295df5188
getValue
public Object getValue(String expression)
{    if ("basedir".equals(expression)) {        return projectDir.getAbsolutePath();    }    return null;}
11847c6fc1ea657a09fb97cfea92c7688683b7b646d9a6d928e2358295df5188
getValue
public Object getValue(String expression)
{    if ("baseUri".equals(expression)) {        return projectDir.getAbsoluteFile().toPath().toUri().toASCIIString();    }    return null;}
11847c6fc1ea657a09fb97cfea92c7688683b7b646d9a6d928e2358295df5188
getValue
public Object getValue(String expression)
{    return config.getSystemProperties().getProperty("env." + expression);}
dd535eec6675e577b087ce216113d7aeee98484d5d6fbcfac90605a80c20a4d6
createPostProcessors
protected List<? extends InterpolationPostProcessor> createPostProcessors(final Model model, final File projectDir, final ModelBuildingRequest config)
{    List<InterpolationPostProcessor> processors = new ArrayList<>(2);    if (projectDir != null) {        processors.add(new PathTranslatingPostProcessor(PROJECT_PREFIXES, TRANSLATED_PATH_EXPRESSIONS, projectDir, pathTranslator));    }    processors.add(new UrlNormalizingPostProcessor(urlNormalizer));    return processors;}
b268909cb5c543497b0192e1bcc76b44724875606b6960a0d502a242630f9a9e
createRecursionInterceptor
protected RecursionInterceptor createRecursionInterceptor()
{    return new PrefixAwareRecursionInterceptor(PROJECT_PREFIXES);}
11847c6fc1ea657a09fb97cfea92c7688683b7b646d9a6d928e2358295df5188
getValue
public Object getValue(String expression)
{    if ("build.timestamp".equals(expression) || "maven.build.timestamp".equals(expression)) {        return mavenBuildTimestamp.formattedTimestamp();    }    return null;}
65bf147f10cbd421d639389113106da2595ac07a8a00a32f8fae56f5da6dcdca
formattedTimestamp
public String formattedTimestamp()
{    return formattedTimestamp;}
fe2a911fe55b44d52d299fcb381b34c61df4b2095337c2d78f2fb1f1e77a3bb5
execute
public Object execute(String expression, Object value)
{    if (value != null) {        expression = ValueSourceUtils.trimPrefix(expression, expressionPrefixes, true);        if (unprefixedPathKeys.contains(expression)) {            return pathTranslator.alignToBaseDirectory(String.valueOf(value), projectDir);        }    }    return null;}
11847c6fc1ea657a09fb97cfea92c7688683b7b646d9a6d928e2358295df5188
getValue
public Object getValue(String expression)
{    Object value = valueSource.getValue(expression);    if (value != null && expression.startsWith(bannedPrefix)) {        String msg = "The expression ${" + expression + "} is deprecated.";        if (newPrefix != null && newPrefix.length() > 0) {            msg += " Please use ${" + newPrefix + expression.substring(bannedPrefix.length()) + "} instead.";        }        problems.add(new ModelProblemCollectorRequest(Severity.WARNING, Version.V20).setMessage(msg));    }    return value;}
86146b5c8c27edcfd7f598132a3be5352327d752216eb4241ea7bf5cc6eafc72
getFeedback
public List getFeedback()
{    return valueSource.getFeedback();}
1922062d214bcbf5c0d7b40cae143059ca73e64c53166e50a5fc2b4dab76ba87
clearFeedback
public void clearFeedback()
{    valueSource.clearFeedback();}
65b61839a41e55b5621586aca8e371026ff838d737f50cc840cd6030a00463bf
interpolateModel
public Model interpolateModel(Model model, File projectDir, ModelBuildingRequest config, ModelProblemCollector problems)
{    interpolateObject(model, model, projectDir, config, problems);    return model;}
ecc415db5f8c3999c733843452ccc234372b38082821bdc8ddd9a826951dd47e
interpolateObject
 void interpolateObject(Object obj, Model model, File projectDir, ModelBuildingRequest config, ModelProblemCollector problems)
{    List<? extends ValueSource> valueSources = createValueSources(model, projectDir, config, problems);    List<? extends InterpolationPostProcessor> postProcessors = createPostProcessors(model, projectDir, config);    InnerInterpolator innerInterpolator = createInterpolator(valueSources, postProcessors, problems);    PrivilegedAction<Object> action = new InterpolateObjectAction(obj, innerInterpolator, problems);    AccessController.doPrivileged(action);}
5d5f3527003235cd428c50a7313eacc6c6988c1970bc09361d494e867fb3a84b
createInterpolator
private InnerInterpolator createInterpolator(List<? extends ValueSource> valueSources, List<? extends InterpolationPostProcessor> postProcessors, final ModelProblemCollector problems)
{    final Map<String, String> cache = new HashMap<>();    final StringSearchInterpolator interpolator = new StringSearchInterpolator();    interpolator.setCacheAnswers(true);    for (ValueSource vs : valueSources) {        interpolator.addValueSource(vs);    }    for (InterpolationPostProcessor postProcessor : postProcessors) {        interpolator.addPostProcessor(postProcessor);    }    final RecursionInterceptor recursionInterceptor = createRecursionInterceptor();    return new InnerInterpolator() {        @Override        public String interpolate(String value) {            if (value != null && value.contains("${")) {                String c = cache.get(value);                if (c == null) {                    try {                        c = interpolator.interpolate(value, recursionInterceptor);                    } catch (InterpolationException e) {                        problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage(e.getMessage()).setException(e));                    }                    cache.put(value, c);                }                return c;            }            return value;        }    };}
12791edd7d317f266559787439df1aa67cabd19b3b444f723566a017cd71b1c9
interpolate
public String interpolate(String value)
{    if (value != null && value.contains("${")) {        String c = cache.get(value);        if (c == null) {            try {                c = interpolator.interpolate(value, recursionInterceptor);            } catch (InterpolationException e) {                problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage(e.getMessage()).setException(e));            }            cache.put(value, c);        }        return c;    }    return value;}
c776c1d9926d3c451c94535f06a7834f6cdda8e431a2f491bdd1600744ded326
run
public Object run()
{    while (!interpolationTargets.isEmpty()) {        Object obj = interpolationTargets.removeFirst();        traverseObjectWithParents(obj.getClass(), obj);    }    return null;}
665693c8cc5c7c3262aa8c773ee79475ea8d25aa472e437df4f84ed14fdf389f
interpolate
private String interpolate(String value)
{    return interpolator.interpolate(value);}
efdd55bc5f1686a32cb432cf1e1cfb9f4205ecaf84f03006f369967c62d4fe3f
traverseObjectWithParents
private void traverseObjectWithParents(Class<?> cls, Object target)
{    if (cls == null) {        return;    }    CacheItem cacheEntry = getCacheEntry(cls);    if (cacheEntry.isArray()) {        evaluateArray(target, this);    } else if (cacheEntry.isQualifiedForInterpolation) {        cacheEntry.interpolate(target, this);        traverseObjectWithParents(cls.getSuperclass(), target);    }}
71ebb250c090a698007a94e56c8623a311fc0f1b330991cf45ab1f5c12536411
getCacheEntry
private CacheItem getCacheEntry(Class<?> cls)
{    CacheItem cacheItem = CACHED_ENTRIES.get(cls);    if (cacheItem == null) {        cacheItem = new CacheItem(cls);        CACHED_ENTRIES.put(cls, cacheItem);    }    return cacheItem;}
df50ccef70a201a9043dc7066eab904f81522ee45f68c72821f1fbff651a0e43
evaluateArray
private static void evaluateArray(Object target, InterpolateObjectAction ctx)
{    int len = Array.getLength(target);    for (int i = 0; i < len; i++) {        Object value = Array.get(target, i);        if (value != null) {            if (String.class == value.getClass()) {                String interpolated = ctx.interpolate((String) value);                if (!interpolated.equals(value)) {                    Array.set(target, i, interpolated);                }            } else {                ctx.interpolationTargets.add(value);            }        }    }}
1b6aa501302f24ff86ee87d1122ec43866a8be54e86429b8ce144b742bea1982
isQualifiedForInterpolation
private boolean isQualifiedForInterpolation(Class<?> cls)
{    Package pkg = cls.getPackage();    if (pkg == null) {        return true;    }    String pkgName = pkg.getName();    return !pkgName.startsWith("java.") && !pkgName.startsWith("javax.");}
1f8738cacbfb07953cbb93596b3305bf7cca49744eb3b85335bff233c6f57e54
isQualifiedForInterpolation
private boolean isQualifiedForInterpolation(Field field, Class<?> fieldType)
{    if (Map.class.equals(fieldType) && "locations".equals(field.getName())) {        return false;    }    if (InputLocation.class.equals(fieldType)) {        return false;    }        if (fieldType.isPrimitive()) {        return false;    }    return !"parent".equals(field.getName());}
b337264a120927b0ca022c00e3274b0f9795778b7a40b4a219b27e1de2f8b987
interpolate
 void interpolate(Object target, InterpolateObjectAction interpolateObjectAction)
{    for (CacheField field : fields) {        field.interpolate(target, interpolateObjectAction);    }}
a2c09d55aae4c214ae7ad079b70f566150824f9a17834cfe629c00fc0ff192e1
isArray
 boolean isArray()
{    return isArray;}
b337264a120927b0ca022c00e3274b0f9795778b7a40b4a219b27e1de2f8b987
interpolate
 void interpolate(Object target, InterpolateObjectAction interpolateObjectAction)
{    try {        doInterpolate(target, interpolateObjectAction);    } catch (IllegalArgumentException e) {        interpolateObjectAction.problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage("Failed to interpolate field3: " + field + " on class: " + field.getType().getName()).setException(        e));    } catch (IllegalAccessException e) {        interpolateObjectAction.problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage("Failed to interpolate field4: " + field + " on class: " + field.getType().getName()).setException(e));    }}
f6c8b7e2dd10bc4338e41348f7ae0248c071ddd22fa9ed87144f5252c24a95b4
doInterpolate
 void doInterpolate(Object target, InterpolateObjectAction ctx) throws IllegalAccessException
{    String value = (String) field.get(target);    if (value == null) {        return;    }    String interpolated = ctx.interpolate(value);    if (!interpolated.equals(value)) {        field.set(target, interpolated);    }}
f6c8b7e2dd10bc4338e41348f7ae0248c071ddd22fa9ed87144f5252c24a95b4
doInterpolate
 void doInterpolate(Object target, InterpolateObjectAction ctx) throws IllegalAccessException
{    @SuppressWarnings("unchecked")    List<Object> c = (List<Object>) field.get(target);    if (c == null) {        return;    }    for (int i = 0, size = c.size(); i < size; i++) {        Object value = c.get(i);        if (value != null) {            if (String.class == value.getClass()) {                String interpolated = ctx.interpolate((String) value);                if (!interpolated.equals(value)) {                    try {                        c.set(i, interpolated);                    } catch (UnsupportedOperationException e) {                        return;                    }                }            } else {                if (value.getClass().isArray()) {                    evaluateArray(value, ctx);                } else {                    ctx.interpolationTargets.add(value);                }            }        }    }}
f6c8b7e2dd10bc4338e41348f7ae0248c071ddd22fa9ed87144f5252c24a95b4
doInterpolate
 void doInterpolate(Object target, InterpolateObjectAction ctx) throws IllegalAccessException
{    @SuppressWarnings("unchecked")    Map<Object, Object> m = (Map<Object, Object>) field.get(target);    if (m == null || m.isEmpty()) {        return;    }    for (Map.Entry<Object, Object> entry : m.entrySet()) {        Object value = entry.getValue();        if (value == null) {            continue;        }        if (String.class == value.getClass()) {            String interpolated = ctx.interpolate((String) value);            if (!interpolated.equals(value)) {                try {                    entry.setValue(interpolated);                } catch (UnsupportedOperationException ignore) {                                }            }        } else if (value.getClass().isArray()) {            evaluateArray(value, ctx);        } else {            ctx.interpolationTargets.add(value);        }    }}
f6c8b7e2dd10bc4338e41348f7ae0248c071ddd22fa9ed87144f5252c24a95b4
doInterpolate
 void doInterpolate(Object target, InterpolateObjectAction ctx) throws IllegalAccessException
{    Object value = field.get(target);    if (value != null) {        if (isArray) {            evaluateArray(value, ctx);        } else {            ctx.interpolationTargets.add(value);        }    }}
65b61839a41e55b5621586aca8e371026ff838d737f50cc840cd6030a00463bf
interpolateModel
public Model interpolateModel(Model model, File projectDir, ModelBuildingRequest config, ModelProblemCollector problems)
{    List<? extends ValueSource> valueSources = createValueSources(model, projectDir, config, problems);    List<? extends InterpolationPostProcessor> postProcessors = createPostProcessors(model, projectDir, config);    InnerInterpolator innerInterpolator = createInterpolator(valueSources, postProcessors, problems);    new ModelVisitor(innerInterpolator).visit(model);    return model;}
5d5f3527003235cd428c50a7313eacc6c6988c1970bc09361d494e867fb3a84b
createInterpolator
private InnerInterpolator createInterpolator(List<? extends ValueSource> valueSources, List<? extends InterpolationPostProcessor> postProcessors, final ModelProblemCollector problems)
{    final Map<String, String> cache = new HashMap<>();    final StringSearchInterpolator interpolator = new StringSearchInterpolator();    interpolator.setCacheAnswers(true);    for (ValueSource vs : valueSources) {        interpolator.addValueSource(vs);    }    for (InterpolationPostProcessor postProcessor : postProcessors) {        interpolator.addPostProcessor(postProcessor);    }    final RecursionInterceptor recursionInterceptor = createRecursionInterceptor();    return new InnerInterpolator() {        @Override        public String interpolate(String value) {            if (value != null && value.contains("${")) {                String c = cache.get(value);                if (c == null) {                    try {                        c = interpolator.interpolate(value, recursionInterceptor);                    } catch (InterpolationException e) {                        problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage(e.getMessage()).setException(e));                    }                    cache.put(value, c);                }                return c;            }            return value;        }    };}
12791edd7d317f266559787439df1aa67cabd19b3b444f723566a017cd71b1c9
interpolate
public String interpolate(String value)
{    if (value != null && value.contains("${")) {        String c = cache.get(value);        if (c == null) {            try {                c = interpolator.interpolate(value, recursionInterceptor);            } catch (InterpolationException e) {                problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage(e.getMessage()).setException(e));            }            cache.put(value, c);        }        return c;    }    return value;}
5a3dc36e0c238b9361c9829a0137ad9498e11e3779c0524fda1fa7681ba8810f
visit
 void visit(Model model)
{    if (model != null) {        visit((ModelBase) model);                String orgModelVersion = model.getModelVersion();        String intModelVersion = interpolate(orgModelVersion);        if (orgModelVersion != intModelVersion) {            model.setModelVersion(intModelVersion);        }        visit(model.getParent());                String orgGroupId = model.getGroupId();        String intGroupId = interpolate(orgGroupId);        if (orgGroupId != intGroupId) {            model.setGroupId(intGroupId);        }                String orgArtifactId = model.getArtifactId();        String intArtifactId = interpolate(orgArtifactId);        if (orgArtifactId != intArtifactId) {            model.setArtifactId(intArtifactId);        }                String orgVersion = model.getVersion();        String intVersion = interpolate(orgVersion);        if (orgVersion != intVersion) {            model.setVersion(intVersion);        }                String orgPackaging = model.getPackaging();        String intPackaging = interpolate(orgPackaging);        if (orgPackaging != intPackaging) {            model.setPackaging(intPackaging);        }                String orgName = model.getName();        String intName = interpolate(orgName);        if (orgName != intName) {            model.setName(intName);        }                String orgDescription = model.getDescription();        String intDescription = interpolate(orgDescription);        if (orgDescription != intDescription) {            model.setDescription(intDescription);        }                String orgUrl = model.getUrl();        String intUrl = interpolate(orgUrl);        if (orgUrl != intUrl) {            model.setUrl(intUrl);        }                String orgChildProjectUrlInheritAppendPath = model.getChildProjectUrlInheritAppendPath();        String intChildProjectUrlInheritAppendPath = interpolate(orgChildProjectUrlInheritAppendPath);        if (orgChildProjectUrlInheritAppendPath != intChildProjectUrlInheritAppendPath) {            model.setChildProjectUrlInheritAppendPath(intChildProjectUrlInheritAppendPath);        }                String orgInceptionYear = model.getInceptionYear();        String intInceptionYear = interpolate(orgInceptionYear);        if (orgInceptionYear != intInceptionYear) {            model.setInceptionYear(intInceptionYear);        }        visit(model.getOrganization());        for (License license : model.getLicenses()) {            visit(license);        }        for (Developer developer : model.getDevelopers()) {            visit(developer);        }        for (Contributor contributor : model.getContributors()) {            visit(contributor);        }        for (MailingList mailingList : model.getMailingLists()) {            visit(mailingList);        }        visit(model.getPrerequisites());        visit(model.getScm());        visit(model.getIssueManagement());        visit(model.getCiManagement());        visit(model.getBuild());        for (Profile profile : model.getProfiles()) {            visit(profile);        }    }}
dc5b6ebc2ce77f6add6c0f9e5cdad085144ff0110720a9ce92a715005be32167
visit
private void visit(Parent parent)
{    if (parent != null) {        String org, val;                org = parent.getGroupId();        val = interpolate(org);        if (org != val) {            parent.setGroupId(val);        }                org = parent.getArtifactId();        val = interpolate(org);        if (org != val) {            parent.setArtifactId(val);        }                org = parent.getVersion();        val = interpolate(org);        if (org != val) {            parent.setVersion(val);        }                org = parent.getRelativePath();        val = interpolate(org);        if (org != val) {            parent.setRelativePath(val);        }    }}
c7879a0cea0b6912b3d99cc45fa0d2e5471beb1d4d0d46be968fed65f7552fef
visit
private void visit(Organization organization)
{    if (organization != null) {        String org, val;                org = organization.getName();        val = interpolate(org);        if (org != val) {            organization.setName(val);        }                org = organization.getUrl();        val = interpolate(org);        if (org != val) {            organization.setUrl(val);        }    }}
8908cc50fa0aca62733ecbbfb1805aae621665fb8a039b0f423ac1ad68a933c8
visit
private void visit(License license)
{    if (license != null) {        String org, val;                org = license.getName();        val = interpolate(org);        if (org != val) {            license.setName(val);        }                org = license.getUrl();        val = interpolate(org);        if (org != val) {            license.setUrl(val);        }                org = license.getDistribution();        val = interpolate(org);        if (org != val) {            license.setDistribution(val);        }                org = license.getComments();        val = interpolate(org);        if (org != val) {            license.setComments(val);        }    }}
36f1d34f6a1d38a2742f60ff322e562b587f7c53c067b978781aebd43d72376e
visit
private void visit(Developer developer)
{    if (developer != null) {        String org, val;                visit((Contributor) developer);                org = developer.getId();        val = interpolate(org);        if (org != val) {            developer.setId(val);        }    }}
c8f77d77565bbaf33157e20b0cc54c96573bca2ab653c39206400b19393bfad7
visit
private void visit(Contributor contributor)
{    if (contributor != null) {        String org, val;                org = contributor.getName();        val = interpolate(org);        if (org != val) {            contributor.setName(val);        }                org = contributor.getEmail();        val = interpolate(org);        if (org != val) {            contributor.setEmail(val);        }                org = contributor.getUrl();        val = interpolate(org);        if (org != val) {            contributor.setUrl(val);        }                org = contributor.getOrganization();        val = interpolate(org);        if (org != val) {            contributor.setOrganization(val);        }                org = contributor.getOrganizationUrl();        val = interpolate(org);        if (org != val) {            contributor.setOrganizationUrl(val);        }                visit(contributor.getRoles());    }}
b3d61c4bbb1bed534ba0aa7fd69ed495d42385f98442a0d51a633549df98e69d
visit
private void visit(MailingList mailingList)
{    if (mailingList != null) {        String org, val;                org = mailingList.getName();        val = interpolate(org);        if (org != val) {            mailingList.setName(val);        }                org = mailingList.getSubscribe();        val = interpolate(org);        if (org != val) {            mailingList.setSubscribe(val);        }                org = mailingList.getUnsubscribe();        val = interpolate(org);        if (org != val) {            mailingList.setUnsubscribe(val);        }                org = mailingList.getPost();        val = interpolate(org);        if (org != val) {            mailingList.setPost(val);        }                org = mailingList.getArchive();        val = interpolate(org);        if (org != val) {            mailingList.setArchive(val);        }    }}
cc438c3833f61368338628fbf9c05554dba62b83e253afac7202b89c0efd0f2f
visit
private void visit(Prerequisites prerequisites)
{    if (prerequisites != null) {        String org, val;                org = prerequisites.getMaven();        val = interpolate(org);        if (org != val) {            prerequisites.setMaven(val);        }    }}
fe7f7483cdaa10dcd4887dd69fbf54bbbd5b22c931a9f57313b655ab5ea6d116
visit
private void visit(Scm scm)
{    if (scm != null) {        String org, val;                org = scm.getConnection();        val = interpolate(org);        if (org != val) {            scm.setConnection(val);        }                org = scm.getDeveloperConnection();        val = interpolate(org);        if (org != val) {            scm.setDeveloperConnection(val);        }                org = scm.getTag();        val = interpolate(org);        if (org != val) {            scm.setTag(val);        }                org = scm.getUrl();        val = interpolate(org);        if (org != val) {            scm.setUrl(val);        }                org = scm.getChildScmConnectionInheritAppendPath();        val = interpolate(org);        if (org != val) {            scm.setChildScmConnectionInheritAppendPath(val);        }                org = scm.getChildScmDeveloperConnectionInheritAppendPath();        val = interpolate(org);        if (org != val) {            scm.setChildScmDeveloperConnectionInheritAppendPath(val);        }                org = scm.getChildScmUrlInheritAppendPath();        val = interpolate(org);        if (org != val) {            scm.setChildScmUrlInheritAppendPath(val);        }    }}
1c79c94105c32727aa2078b007b39cc9079dc34e077796ade3878ba33e458da7
visit
private void visit(IssueManagement issueManagement)
{    if (issueManagement != null) {        String org, val;                org = issueManagement.getSystem();        val = interpolate(org);        if (org != val) {            issueManagement.setSystem(val);        }                org = issueManagement.getUrl();        val = interpolate(org);        if (org != val) {            issueManagement.setUrl(val);        }    }}
d880ad008f89ce263705db17816e1aea93be8d9f1aa5a349ca49f390c38b20f8
visit
private void visit(CiManagement ciManagement)
{    if (ciManagement != null) {        String org, val;                org = ciManagement.getSystem();        val = interpolate(org);        if (org != val) {            ciManagement.setSystem(val);        }                org = ciManagement.getUrl();        val = interpolate(org);        if (org != val) {            ciManagement.setUrl(val);        }                for (Notifier notifier : ciManagement.getNotifiers()) {            visit(notifier);        }    }}
a9debbf7c5bda49f939a4216c48c3466904b0400749f0ef70b936f7f13863ab4
visit
private void visit(Notifier notifier)
{    if (notifier != null) {        String org, val;                org = notifier.getType();        val = interpolate(org);        if (org != val) {            notifier.setType(val);        }                visit(notifier.getConfiguration());    }}
9ee369dfce3604403d030c35bd946507da261b4a6acc850a9b42a4e6709f7b5f
visit
private void visit(BuildBase build)
{    if (build != null) {        String org, val;                for (Plugin plugin : build.getPlugins()) {            visit(plugin);        }                visit(build.getPluginManagement());                org = build.getDefaultGoal();        val = interpolate(org);        if (org != val) {            build.setDefaultGoal(val);        }                for (Resource resource : build.getResources()) {            visit(resource);        }                for (Resource resource : build.getTestResources()) {            visit(resource);        }                org = build.getDirectory();        val = interpolate(org);        if (org != val) {            build.setDirectory(val);        }                org = build.getFinalName();        val = interpolate(org);        if (org != val) {            build.setFinalName(val);        }                visit(build.getFilters());    }}
7ae429905eacf2f32a45dec7611088a3ec260528847d15d43c48f1b02a677676
visit
private void visit(PluginManagement pluginManagement)
{    if (pluginManagement != null) {        for (Plugin plugin : pluginManagement.getPlugins()) {            visit(plugin);        }    }}
5d197f089ab3ef0a199ede88b31d8f01c4f9a078e314624a4c44569d6dcc066d
visit
private void visit(Build build)
{    if (build != null) {        String org, val;                visit((BuildBase) build);                org = build.getSourceDirectory();        val = interpolate(org);        if (org != val) {            build.setSourceDirectory(val);        }                org = build.getScriptSourceDirectory();        val = interpolate(org);        if (org != val) {            build.setScriptSourceDirectory(val);        }                org = build.getTestSourceDirectory();        val = interpolate(org);        if (org != val) {            build.setTestSourceDirectory(val);        }                org = build.getOutputDirectory();        val = interpolate(org);        if (org != val) {            build.setOutputDirectory(val);        }                org = build.getTestOutputDirectory();        val = interpolate(org);        if (org != val) {            build.setTestOutputDirectory(val);        }                for (Extension extension : build.getExtensions()) {            visit(extension);        }    }}
57d783e145029a0ea1ce4a4bfa2878e45cd38168b638340c5965f83197e7ec63
visit
private void visit(Resource resource)
{    if (resource != null) {        String org, val;                visit(resource.getIncludes());                visit(resource.getExcludes());                org = resource.getDirectory();        val = interpolate(org);        if (org != val) {            resource.setDirectory(val);        }                org = resource.getTargetPath();        val = interpolate(org);        if (org != val) {            resource.setTargetPath(val);        }                org = resource.getFiltering();        val = interpolate(org);        if (org != val) {            resource.setFiltering(val);        }    }}
a792738d14503477343818bb5afe1ecbc6bb657a728fc4e6fdac3193e4cf3faa
visit
private void visit(Plugin plugin)
{    if (plugin != null) {        String org, val;                org = plugin.getInherited();        val = interpolate(org);        if (org != val) {            plugin.setInherited(val);        }                visit((Xpp3Dom) plugin.getConfiguration());                org = plugin.getGroupId();        val = interpolate(org);        if (org != val) {            plugin.setGroupId(val);        }                org = plugin.getArtifactId();        val = interpolate(org);        if (org != val) {            plugin.setArtifactId(val);        }                org = plugin.getVersion();        val = interpolate(org);        if (org != val) {            plugin.setVersion(val);        }                org = plugin.getExtensions();        val = interpolate(org);        if (org != val) {            plugin.setExtensions(val);        }                for (PluginExecution execution : plugin.getExecutions()) {            visit(execution);        }                for (Dependency dependency : plugin.getDependencies()) {            visit(dependency);        }    }}
84a18c4b443933f2459007b93569fc8620dcaebb6325e41d767bfa8b04c3dc35
visit
private void visit(PluginExecution execution)
{    if (execution != null) {        String org, val;                org = execution.getInherited();        val = interpolate(org);        if (org != val) {            execution.setInherited(val);        }                visit((Xpp3Dom) execution.getConfiguration());                org = execution.getId();        val = interpolate(org);        if (org != val) {            execution.setId(val);        }                org = execution.getPhase();        val = interpolate(org);        if (org != val) {            execution.setPhase(val);        }                visit(execution.getGoals());    }}
26f45fde48d49158eea246a0eb68ee54bdcfe47655da3e5925e68ee2b28d155a
visit
private void visit(Xpp3Dom dom)
{    if (dom != null) {        String org, val;                org = dom.getValue();        val = interpolate(org);        if (org != val) {            dom.setValue(val);        }                for (String attr : dom.getAttributeNames()) {            org = dom.getAttribute(attr);            val = interpolate(org);            if (org != val) {                dom.setAttribute(attr, val);            }        }                for (int i = 0, l = dom.getChildCount(); i < l; i++) {            visit(dom.getChild(i));        }    }}
6164b9d61fd35ee1eed82e0372e6a6fb9e5190a9339abe4a0d6147b58f5be490
visit
private void visit(Extension extension)
{    if (extension != null) {        String org, val;                org = extension.getGroupId();        val = interpolate(org);        if (org != val) {            extension.setGroupId(val);        }                org = extension.getArtifactId();        val = interpolate(org);        if (org != val) {            extension.setArtifactId(val);        }                org = extension.getVersion();        val = interpolate(org);        if (org != val) {            extension.setVersion(val);        }    }}
1c96196984ad53839a37dafb0f76b338835139a5cfd8c9b12aad2e51a3577d24
visit
private void visit(Profile profile)
{    if (profile != null) {        String org, val;                visit((ModelBase) profile);                org = profile.getId();        val = interpolate(org);        if (org != val) {            profile.setId(val);        }                visit(profile.getActivation());                visit(profile.getBuild());    }}
7d5f3465a80d8a2146b77ab1e9fe4e18f10efe2502e657ef0396d6e9cc2cb200
visit
private void visit(Activation activation)
{    if (activation != null) {        String org, val;                org = activation.getJdk();        val = interpolate(org);        if (org != val) {            activation.setJdk(val);        }                visit(activation.getOs());                visit(activation.getProperty());                visit(activation.getFile());    }}
374e71675a5293b61c54aeb6b850dd5a588ad0bc5463f29a133d047be102db9d
visit
private void visit(ActivationOS activationOS)
{    if (activationOS != null) {        String org, val;                org = activationOS.getName();        val = interpolate(org);        if (org != val) {            activationOS.setName(val);        }                org = activationOS.getFamily();        val = interpolate(org);        if (org != val) {            activationOS.setFamily(val);        }                org = activationOS.getArch();        val = interpolate(org);        if (org != val) {            activationOS.setArch(val);        }                org = activationOS.getVersion();        val = interpolate(org);        if (org != val) {            activationOS.setVersion(val);        }    }}
0c98fa00de83ba8136034d93a5ebd890c45df5348868849268859bb83f0189e8
visit
private void visit(ActivationProperty activationProperty)
{    if (activationProperty != null) {        String org, val;                org = activationProperty.getName();        val = interpolate(org);        if (org != val) {            activationProperty.setName(val);        }                org = activationProperty.getValue();        val = interpolate(org);        if (org != val) {            activationProperty.setValue(val);        }    }}
98f91521866c2034a6d97ee9776f824d0ec4bc475c8f91dcbce46b8cbf6943a0
visit
private void visit(ActivationFile activationFile)
{    if (activationFile != null) {        String org, val;                org = activationFile.getMissing();        val = interpolate(org);        if (org != val) {            activationFile.setMissing(val);        }                org = activationFile.getExists();        val = interpolate(org);        if (org != val) {            activationFile.setExists(val);        }    }}
6362ab5d47633d6eda637e4e05a07fea8c53fc26dc8a984f417c9457287d6b31
visit
private void visit(ModelBase modelBase)
{    if (modelBase != null) {        visit(modelBase.getModules());        visit(modelBase.getDistributionManagement());        visit(modelBase.getProperties());        visit(modelBase.getDependencyManagement());        for (Dependency dependency : modelBase.getDependencies()) {            visit(dependency);        }        for (Repository repository : modelBase.getRepositories()) {            visit(repository);        }        for (Repository repository : modelBase.getPluginRepositories()) {            visit(repository);        }        visit(modelBase.getReporting());    }}
44a7869f89c2b822c63f983f71d76afacd7db2feeed6133e0a4c2ba7016f2443
visit
private void visit(DistributionManagement distributionManagement)
{    if (distributionManagement != null) {        String org, val;                visit(distributionManagement.getRepository());                visit(distributionManagement.getSnapshotRepository());                visit(distributionManagement.getSite());                org = distributionManagement.getDownloadUrl();        val = interpolate(org);        if (org != val) {            distributionManagement.setDownloadUrl(val);        }                visit(distributionManagement.getRelocation());    }}
64c24cf6976ec29bd919181613f610f08ba69808f92accf7fbd5ed28072f5513
visit
private void visit(Site site)
{    if (site != null) {        String org, val;                org = site.getId();        val = interpolate(org);        if (org != val) {            site.setId(val);        }                org = site.getName();        val = interpolate(org);        if (org != val) {            site.setName(val);        }                org = site.getUrl();        val = interpolate(org);        if (org != val) {            site.setUrl(val);        }                org = site.getChildSiteUrlInheritAppendPath();        val = interpolate(org);        if (org != val) {            site.setChildSiteUrlInheritAppendPath(val);        }    }}
4e37d4c3c3c6cc687f6e4d3069bc1892f382de6b5bf2b4206694b39099992329
visit
private void visit(Relocation relocation)
{    if (relocation != null) {        String org, val;                org = relocation.getGroupId();        val = interpolate(org);        if (org != val) {            relocation.setGroupId(val);        }                org = relocation.getArtifactId();        val = interpolate(org);        if (org != val) {            relocation.setArtifactId(val);        }                org = relocation.getVersion();        val = interpolate(org);        if (org != val) {            relocation.setVersion(val);        }                org = relocation.getMessage();        val = interpolate(org);        if (org != val) {            relocation.setMessage(val);        }    }}
480fa713ece985e782f18637162b06454b5a19e18a5aaba77c4cad83791cc3c7
visit
private void visit(DependencyManagement dependencyManagement)
{    if (dependencyManagement != null) {                for (Dependency dependency : dependencyManagement.getDependencies()) {            visit(dependency);        }    }}
6a16fd003073288088d9d6eaee89fa6d11cabd919191d1b0f3abea787424a12d
visit
private void visit(Repository repository)
{    if (repository != null) {        visit((RepositoryBase) repository);        visit(repository.getReleases());        visit(repository.getSnapshots());    }}
35cf09d9ca17fcf7d3100efb2964a32601849a108607de912cfa01b57368781d
visit
private void visit(RepositoryBase repositoryBase)
{    if (repositoryBase != null) {                String orgId = repositoryBase.getId();        String intId = interpolate(orgId);        if (orgId != intId) {            repositoryBase.setId(intId);        }                String orgName = repositoryBase.getName();        String intName = interpolate(orgName);        if (orgName != intName) {            repositoryBase.setName(intName);        }                String orgUrl = repositoryBase.getUrl();        String intUrl = interpolate(orgUrl);        if (orgUrl != intUrl) {            repositoryBase.setUrl(intUrl);        }                String orgLayout = repositoryBase.getLayout();        String intLayout = interpolate(orgLayout);        if (orgLayout != intLayout) {            repositoryBase.setLayout(intLayout);        }    }}
220418d5d1882cf34be1d8219dd5fea6417142492aea9b11d0f386a0ec3f35a5
visit
private void visit(RepositoryPolicy repositoryPolicy)
{    if (repositoryPolicy != null) {                String orgEnabled = repositoryPolicy.getEnabled();        String intEnabled = interpolate(orgEnabled);        if (orgEnabled != intEnabled) {            repositoryPolicy.setEnabled(intEnabled);        }                String orgUpdatePolicy = repositoryPolicy.getUpdatePolicy();        String intUpdatePolicy = interpolate(orgUpdatePolicy);        if (orgUpdatePolicy != intUpdatePolicy) {            repositoryPolicy.setUpdatePolicy(intUpdatePolicy);        }                String orgChecksumPolicy = repositoryPolicy.getChecksumPolicy();        String intChecksumPolicy = interpolate(orgChecksumPolicy);        if (orgChecksumPolicy != intChecksumPolicy) {            repositoryPolicy.setChecksumPolicy(intChecksumPolicy);        }    }}
c9ee2953c8c3e72b649f99752d234c844b0bb3201161ad9e851b0788f1805c4e
visit
private void visit(Dependency dependency)
{    if (dependency != null) {        String org, val;                org = dependency.getGroupId();        val = interpolate(org);        if (org != val) {            dependency.setGroupId(val);            dependency.clearManagementKey();        }                org = dependency.getArtifactId();        val = interpolate(org);        if (org != val) {            dependency.setArtifactId(val);            dependency.clearManagementKey();        }                org = dependency.getVersion();        val = interpolate(org);        if (org != val) {            dependency.setVersion(val);        }                org = dependency.getType();        val = interpolate(org);        if (org != val) {            dependency.setType(val);            dependency.clearManagementKey();        }                org = dependency.getClassifier();        val = interpolate(org);        if (org != val) {            dependency.setClassifier(val);            dependency.clearManagementKey();        }                org = dependency.getScope();        val = interpolate(org);        if (org != val) {            dependency.setScope(val);        }                org = dependency.getSystemPath();        val = interpolate(org);        if (org != val) {            dependency.setSystemPath(val);        }                for (Exclusion exclusion : dependency.getExclusions()) {            visit(exclusion);        }                org = dependency.getOptional();        val = interpolate(org);        if (org != val) {            dependency.setOptional(val);        }    }}
42d682b779d0fd49decaa8e827002012cc0f70029ebc2265469fde7761139a87
visit
private void visit(Exclusion exclusion)
{    if (exclusion != null) {        String org, val;                org = exclusion.getGroupId();        val = interpolate(org);        if (org != val) {            exclusion.setGroupId(val);        }                org = exclusion.getArtifactId();        val = interpolate(org);        if (org != val) {            exclusion.setArtifactId(val);        }    }}
8979f2fb70bf943b82d795799c04b6cb925da756a073e2416f73a8de23aa581f
visit
private void visit(Reporting reporting)
{    if (reporting != null) {        String org, val;                org = reporting.getExcludeDefaults();        val = interpolate(org);        if (org != val) {            reporting.setExcludeDefaults(val);        }                org = reporting.getOutputDirectory();        val = interpolate(org);        if (org != val) {            reporting.setOutputDirectory(val);        }                for (ReportPlugin plugin : reporting.getPlugins()) {            visit(plugin);        }    }}
227af7dd79174dffc7b6c921136799a9c5bdd6ce025d5c59b7ca12db71ca0f37
visit
private void visit(ReportPlugin plugin)
{    if (plugin != null) {        String org, val;                org = plugin.getInherited();        val = interpolate(org);        if (org != val) {            plugin.setInherited(val);        }                visit((Xpp3Dom) plugin.getConfiguration());                org = plugin.getGroupId();        val = interpolate(org);        if (org != val) {            plugin.setGroupId(val);        }                org = plugin.getArtifactId();        val = interpolate(org);        if (org != val) {            plugin.setArtifactId(val);        }                org = plugin.getVersion();        val = interpolate(org);        if (org != val) {            plugin.setVersion(val);        }                for (ReportSet reportSet : plugin.getReportSets()) {            visit(reportSet);        }    }}
af7eeaee36636fba31ece3ffa52e38d69a1635c3581fd8a621f3cae0b11abd3a
visit
private void visit(ReportSet reportSet)
{    if (reportSet != null) {        String org, val;                org = reportSet.getInherited();        val = interpolate(org);        if (org != val) {            reportSet.setInherited(val);        }                visit((Xpp3Dom) reportSet.getConfiguration());                org = reportSet.getId();        val = interpolate(org);        if (org != val) {            reportSet.setId(val);        }                visit(reportSet.getReports());    }}
640c4dba3725b315423dd60aa55c0a2f6e187812f4c13b93b52731efd4778767
visit
private void visit(Properties properties)
{    if (properties != null) {        for (Map.Entry<Object, Object> entry : properties.entrySet()) {            Object v = entry.getValue();            if (v instanceof String) {                String value = (String) v;                String inter = interpolate(value);                if (value != inter) {                    entry.setValue(inter);                }            }        }    }}
06a24185db1a97bc63665e6b45edd7d3c2c192353f4371967e00137d307c46c5
visit
private void visit(List<String> list)
{    if (list != null) {        ListIterator<String> it = list.listIterator();        while (it.hasNext()) {            String value = it.next();            String inter = interpolate(value);            if (value != inter) {                it.set(inter);            }        }    }}
665693c8cc5c7c3262aa8c773ee79475ea8d25aa472e437df4f84ed14fdf389f
interpolate
private String interpolate(String value)
{    return interpolator.interpolate(value);}
fe2a911fe55b44d52d299fcb381b34c61df4b2095337c2d78f2fb1f1e77a3bb5
execute
public Object execute(String expression, Object value)
{    if (value != null && URL_EXPRESSIONS.contains(expression)) {        return normalizer.normalize(value.toString());    }    return null;}
f90ca8f88e16914e6b1b9ea15b4cbcf18f94de15aa63d029355a566490df37ad
read
public Model read(File input, Map<String, ?> options) throws IOException
{    Objects.requireNonNull(input, "input cannot be null");    Model model = read(new FileInputStream(input), options);    model.setPomFile(input);    return model;}
fb163c75d3160cac572ef2fed851c79386622b2cabd2d6c38a0399fddc8f2c7c
read
public Model read(Reader input, Map<String, ?> options) throws IOException
{    Objects.requireNonNull(input, "input cannot be null");    try (final Reader in = input) {        return read(in, isStrict(options), getSource(options));    }}
8dc86971a1d6631e01710e75affa7f855865f83ce7bebd54194dda60988ba430
read
public Model read(InputStream input, Map<String, ?> options) throws IOException
{    Objects.requireNonNull(input, "input cannot be null");    try (final XmlStreamReader in = ReaderFactory.newXmlReader(input)) {        return read(in, isStrict(options), getSource(options));    }}
6c7fea5c07553d4dd29f26b80b3a43d5b3576e5ae38d612c87b5e80f010983ed
isStrict
private boolean isStrict(Map<String, ?> options)
{    Object value = (options != null) ? options.get(IS_STRICT) : null;    return value == null || Boolean.parseBoolean(value.toString());}
212523cbe0693ab378de5823c965b73b49976dbcdef22b895383ea56ab6e02e0
getSource
private InputSource getSource(Map<String, ?> options)
{    Object value = (options != null) ? options.get(INPUT_SOURCE) : null;    return (InputSource) value;}
f1b16b29a475c4845f3ef4320a8da2f67e3f27e3551e22bd557e56e989eaf57e
read
private Model read(Reader reader, boolean strict, InputSource source) throws IOException
{    try {        if (source != null) {            return new MavenXpp3ReaderEx().read(reader, strict, source);        } else {            return new MavenXpp3Reader().read(reader, strict);        }    } catch (XmlPullParserException e) {        throw new ModelParseException(e.getMessage(), e.getLineNumber(), e.getColumnNumber(), e);    }}
715f5c09c42e453fa32da51943f6e1a10c0485ce69d28104d518dc8efa06ebda
write
public void write(File output, Map<String, Object> options, Model model) throws IOException
{    Objects.requireNonNull(output, "output cannot be null");    Objects.requireNonNull(model, "model cannot be null");    output.getParentFile().mkdirs();    write(WriterFactory.newXmlWriter(output), options, model);}
2a908c09c897d87a6e2ae350e66762f57cc7eac5752f604b6097540aa55bc661
write
public void write(Writer output, Map<String, Object> options, Model model) throws IOException
{    Objects.requireNonNull(output, "output cannot be null");    Objects.requireNonNull(model, "model cannot be null");    try (final Writer out = output) {        new MavenXpp3Writer().write(out, model);    }}
9fc4e1902e374ae5fd23a565aa59061ee838998e937be18b000733450ba450b4
write
public void write(OutputStream output, Map<String, Object> options, Model model) throws IOException
{    Objects.requireNonNull(output, "output cannot be null");    Objects.requireNonNull(model, "model cannot be null");    String encoding = model.getModelEncoding();        if (encoding == null || encoding.length() <= 0) {        encoding = "UTF-8";    }    try (final Writer out = new OutputStreamWriter(output, encoding)) {        write(out, options, model);    }}
d0206afdd4bbfbca49378097e83c12789d7836ac6e56572eee8d2abd20c4c84d
getLineNumber
public int getLineNumber()
{    return lineNumber;}
de418c2b40b113f31f0e80a27291a5fc9f70e24067ed5b3ab5871ddcb04ceb6e
getColumnNumber
public int getColumnNumber()
{    return columnNumber;}
743f221b5314652f66ac5d34ff7b8454c9d2960d7413f3a68d08cce876c7d877
locatePom
public File locatePom(File projectDirectory)
{    return new File(projectDirectory, "pom.xml");}
f3541231e60b796b272bb5a32d69e2ded4ae4656a230df57937ee6b923de08b3
injectManagement
public void injectManagement(Model model, ModelBuildingRequest request, ModelProblemCollector problems)
{    merger.mergeManagedDependencies(model);}
fd6a242e14dae9471c7a2aad071b0dc05c2e97525775969ada0b0f1b466c4527
mergeManagedDependencies
public void mergeManagedDependencies(Model model)
{    DependencyManagement dependencyManagement = model.getDependencyManagement();    if (dependencyManagement != null) {        Map<Object, Dependency> dependencies = new HashMap<>();        Map<Object, Object> context = Collections.emptyMap();        for (Dependency dependency : model.getDependencies()) {            Object key = getDependencyKey(dependency);            dependencies.put(key, dependency);        }        for (Dependency managedDependency : dependencyManagement.getDependencies()) {            Object key = getDependencyKey(managedDependency);            Dependency dependency = dependencies.get(key);            if (dependency != null) {                mergeDependency(dependency, managedDependency, false, context);            }        }    }}
69ad527c5584211825648220141c96af82398dfb6286dab8c819ecc02559be43
mergeDependency_Optional
protected void mergeDependency_Optional(Dependency target, Dependency source, boolean sourceDominant, Map<Object, Object> context)
{}
28670c4900c4acfecdb43b7c86ce7ee6778d6fa5063d2652aa9bccc9b1b9f220
mergeDependency_Exclusions
protected void mergeDependency_Exclusions(Dependency target, Dependency source, boolean sourceDominant, Map<Object, Object> context)
{    List<Exclusion> tgt = target.getExclusions();    if (tgt.isEmpty()) {        List<Exclusion> src = source.getExclusions();        for (Exclusion element : src) {            Exclusion clone = element.clone();            target.addExclusion(clone);        }    }}
f3541231e60b796b272bb5a32d69e2ded4ae4656a230df57937ee6b923de08b3
injectManagement
public void injectManagement(Model model, ModelBuildingRequest request, ModelProblemCollector problems)
{    merger.mergeManagedBuildPlugins(model);}
b2485632cb4b1fc5972620a6b5ba5f991c7a0a4e02e269c4207dea4c786e3c6b
mergeManagedBuildPlugins
public void mergeManagedBuildPlugins(Model model)
{    Build build = model.getBuild();    if (build != null) {        PluginManagement pluginManagement = build.getPluginManagement();        if (pluginManagement != null) {            mergePluginContainerPlugins(build, pluginManagement);        }    }}
cad777e4b8f47dee007ef09dcbaf7e20aeeabf61321e7bb781269fe42ff0cf86
mergePluginContainerPlugins
private void mergePluginContainerPlugins(PluginContainer target, PluginContainer source)
{    List<Plugin> src = source.getPlugins();    if (!src.isEmpty()) {        List<Plugin> tgt = target.getPlugins();        Map<Object, Plugin> managedPlugins = new LinkedHashMap<>(src.size() * 2);        Map<Object, Object> context = Collections.emptyMap();        for (Plugin element : src) {            Object key = getPluginKey(element);            managedPlugins.put(key, element);        }        for (Plugin element : tgt) {            Object key = getPluginKey(element);            Plugin managedPlugin = managedPlugins.get(key);            if (managedPlugin != null) {                mergePlugin(element, managedPlugin, false, context);            }        }    }}
94561c2f150c1e63a70e78ef092f147c6c77e819719f81018fd770308e07f225
mergePlugin_Executions
protected void mergePlugin_Executions(Plugin target, Plugin source, boolean sourceDominant, Map<Object, Object> context)
{    List<PluginExecution> src = source.getExecutions();    if (!src.isEmpty()) {        List<PluginExecution> tgt = target.getExecutions();        Map<Object, PluginExecution> merged = new LinkedHashMap<>((src.size() + tgt.size()) * 2);        for (PluginExecution element : src) {            Object key = getPluginExecutionKey(element);            merged.put(key, element.clone());        }        for (PluginExecution element : tgt) {            Object key = getPluginExecutionKey(element);            PluginExecution existing = merged.get(key);            if (existing != null) {                mergePluginExecution(element, existing, sourceDominant, context);            }            merged.put(key, element);        }        target.setExecutions(new ArrayList<>(merged.values()));    }}
94228a6dbec2b8414aa99ab684c3259017f15824fb3e543a6437e010189d0926
mergeModel
protected void mergeModel(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    context.put(ARTIFACT_ID, target.getArtifactId());    super.mergeModel(target, source, sourceDominant, context);}
ae2ce65d2a22a9ef62cb47cf150e4d3f7a824298de4f0b0a2744419c43288e14
mergeModel_Name
protected void mergeModel_Name(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getName();    if (src != null) {        if (sourceDominant) {            target.setName(src);            target.setLocation("name", source.getLocation("name"));        }    }}
848e0ef87ce2a7feb6bdba3e8ba03490d05813a65440d2ee00e8579c726ce061
mergeModel_Url
protected void mergeModel_Url(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getUrl();    if (src != null) {        if (sourceDominant) {            target.setUrl(src);            target.setLocation("url", source.getLocation("url"));        } else if (target.getUrl() == null) {            target.setUrl(extrapolateChildUrl(src, source.isChildProjectUrlInheritAppendPath(), context));            target.setLocation("url", source.getLocation("url"));        }    }}
0f04da2cd7dc64e67a099f4593c2091be0473e364e01efda30be70c92c0219fc
mergeModel_Organization
protected void mergeModel_Organization(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    Organization src = source.getOrganization();    if (src != null) {        Organization tgt = target.getOrganization();        if (tgt == null) {            tgt = new Organization();            tgt.setLocation("", src.getLocation(""));            target.setOrganization(tgt);            mergeOrganization(tgt, src, sourceDominant, context);        }    }}
b7a3264d2cd46b0ab17b4ee6cd927d1b3f184745035d830a172faa3d7e94eeff
mergeModel_IssueManagement
protected void mergeModel_IssueManagement(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    IssueManagement src = source.getIssueManagement();    if (src != null) {        IssueManagement tgt = target.getIssueManagement();        if (tgt == null) {            tgt = new IssueManagement();            tgt.setLocation("", src.getLocation(""));            target.setIssueManagement(tgt);            mergeIssueManagement(tgt, src, sourceDominant, context);        }    }}
cf0da19ffda2b2360f71ce4af70a0c3b9fb16985f4a6383ce1162e4e5f65c372
mergeModel_CiManagement
protected void mergeModel_CiManagement(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    CiManagement src = source.getCiManagement();    if (src != null) {        CiManagement tgt = target.getCiManagement();        if (tgt == null) {            tgt = new CiManagement();            tgt.setLocation("", src.getLocation(""));            target.setCiManagement(tgt);            mergeCiManagement(tgt, src, sourceDominant, context);        }    }}
0288f1ef772bdd000f919e088f44973dcd2fb1a2a8cce42ae1c7f37f6fe9b950
mergeModel_ModelVersion
protected void mergeModel_ModelVersion(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{}
a6bbb2ebcb499f4aaca32e6a47bb81b43bb855017d0050f758109c545f2f9e0f
mergeModel_ArtifactId
protected void mergeModel_ArtifactId(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{}
4cb09252805ff56d6532b361deb8726d0f6bd59f9a024f47084cfc85fa4a729a
mergeModel_Profiles
protected void mergeModel_Profiles(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{}
590efe5a6080eb831ba55b7aad3ae6c3cfebcbed48058c70dfa7d18e00ba673c
mergeModel_Prerequisites
protected void mergeModel_Prerequisites(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{}
0d277c30e3d515950352128478002f1e6ab2781a75ff5a67fe87fbcef86feada
mergeModel_Licenses
protected void mergeModel_Licenses(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    if (target.getLicenses().isEmpty()) {        target.setLicenses(new ArrayList<>(source.getLicenses()));    }}
64298385a50df6bc27388d5273474a4725cad8ccee6eace74666db2d7f89d681
mergeModel_Developers
protected void mergeModel_Developers(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    if (target.getDevelopers().isEmpty()) {        target.setDevelopers(new ArrayList<>(source.getDevelopers()));    }}
71c6fc860ab7c9019d89bad20e5df216444f31a7c705dcbb5121d341cf4936fd
mergeModel_Contributors
protected void mergeModel_Contributors(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    if (target.getContributors().isEmpty()) {        target.setContributors(new ArrayList<>(source.getContributors()));    }}
f7480a50119ac22eb8c425eddd01b6ec0b10b793540489d7502158d24126e169
mergeModel_MailingLists
protected void mergeModel_MailingLists(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    if (target.getMailingLists().isEmpty()) {        target.setMailingLists(new ArrayList<>(source.getMailingLists()));    }}
5687b7839bbe1d63a92574c2c8a1a14fd32c2257ea75befba6c461fc350e0ba5
mergeModelBase_Modules
protected void mergeModelBase_Modules(ModelBase target, ModelBase source, boolean sourceDominant, Map<Object, Object> context)
{    List<String> src = source.getModules();    if (!src.isEmpty() && sourceDominant) {        List<Integer> indices = new ArrayList<>();        List<String> tgt = target.getModules();        Set<String> excludes = new LinkedHashSet<>(tgt);        List<String> merged = new ArrayList<>(tgt.size() + src.size());        merged.addAll(tgt);        for (int i = 0, n = tgt.size(); i < n; i++) {            indices.add(i);        }        for (int i = 0, n = src.size(); i < n; i++) {            String s = src.get(i);            if (!excludes.contains(s)) {                merged.add(s);                indices.add(~i);            }        }        target.setModules(merged);        target.setLocation("modules", InputLocation.merge(target.getLocation("modules"), source.getLocation("modules"), indices));    }}
72feebc70af9a5c5127bbb336f40ecdf1cf4924f7b55fc20c7e6c4efa0f7e712
mergeModelBase_Repositories
protected void mergeModelBase_Repositories(ModelBase target, ModelBase source, boolean sourceDominant, Map<Object, Object> context)
{    List<Repository> src = source.getRepositories();    if (!src.isEmpty()) {        List<Repository> tgt = target.getRepositories();        Map<Object, Repository> merged = new LinkedHashMap<>((src.size() + tgt.size()) * 2);        List<Repository> dominant, recessive;        if (sourceDominant) {            dominant = src;            recessive = tgt;        } else {            dominant = tgt;            recessive = src;        }        for (Repository element : dominant) {            Object key = getRepositoryKey(element);            merged.put(key, element);        }        for (Repository element : recessive) {            Object key = getRepositoryKey(element);            if (!merged.containsKey(key)) {                merged.put(key, element);            }        }        target.setRepositories(new ArrayList<>(merged.values()));    }}
0b696267ca10b276c0afe974a4079c6b85789a27d303c6f34d5690987777b99f
mergeModelBase_PluginRepositories
protected void mergeModelBase_PluginRepositories(ModelBase target, ModelBase source, boolean sourceDominant, Map<Object, Object> context)
{    List<Repository> src = source.getPluginRepositories();    if (!src.isEmpty()) {        List<Repository> tgt = target.getPluginRepositories();        Map<Object, Repository> merged = new LinkedHashMap<>((src.size() + tgt.size()) * 2);        List<Repository> dominant, recessive;        if (sourceDominant) {            dominant = src;            recessive = tgt;        } else {            dominant = tgt;            recessive = src;        }        for (Repository element : dominant) {            Object key = getRepositoryKey(element);            merged.put(key, element);        }        for (Repository element : recessive) {            Object key = getRepositoryKey(element);            if (!merged.containsKey(key)) {                merged.put(key, element);            }        }        target.setPluginRepositories(new ArrayList<>(merged.values()));    }}
6994a3fc2db1550bb27d0b3d42bd64c211dd79d0825b4b81bf00cc8ad3f43d73
mergeBuildBase_Filters
protected void mergeBuildBase_Filters(BuildBase target, BuildBase source, boolean sourceDominant, Map<Object, Object> context)
{    List<String> src = source.getFilters();    if (!src.isEmpty()) {        List<String> tgt = target.getFilters();        Set<String> excludes = new LinkedHashSet<>(tgt);        List<String> merged = new ArrayList<>(tgt.size() + src.size());        merged.addAll(tgt);        for (String s : src) {            if (!excludes.contains(s)) {                merged.add(s);            }        }        target.setFilters(merged);    }}
6d2be137a082d89dafae56c24248437011cdd11a8091f92b65298d972cee9f1a
mergeBuildBase_Resources
protected void mergeBuildBase_Resources(BuildBase target, BuildBase source, boolean sourceDominant, Map<Object, Object> context)
{    if (sourceDominant || target.getResources().isEmpty()) {        super.mergeBuildBase_Resources(target, source, sourceDominant, context);    }}
dbcb14060c8f48e2c681aaac386bd09d15afd955418896ebeebfa4faf773d7e8
mergeBuildBase_TestResources
protected void mergeBuildBase_TestResources(BuildBase target, BuildBase source, boolean sourceDominant, Map<Object, Object> context)
{    if (sourceDominant || target.getTestResources().isEmpty()) {        super.mergeBuildBase_TestResources(target, source, sourceDominant, context);    }}
c2045ddb4e04a45641ccbd29ba8a84f92c218215cef49456313f647ef0bfa86e
mergeDistributionManagement_Repository
protected void mergeDistributionManagement_Repository(DistributionManagement target, DistributionManagement source, boolean sourceDominant, Map<Object, Object> context)
{    DeploymentRepository src = source.getRepository();    if (src != null) {        DeploymentRepository tgt = target.getRepository();        if (sourceDominant || tgt == null) {            tgt = new DeploymentRepository();            tgt.setLocation("", src.getLocation(""));            target.setRepository(tgt);            mergeDeploymentRepository(tgt, src, sourceDominant, context);        }    }}
78bd0aaf8cace56768567961330166e1c351d5dc4fd7ce03bf5865525beb3382
mergeDistributionManagement_SnapshotRepository
protected void mergeDistributionManagement_SnapshotRepository(DistributionManagement target, DistributionManagement source, boolean sourceDominant, Map<Object, Object> context)
{    DeploymentRepository src = source.getSnapshotRepository();    if (src != null) {        DeploymentRepository tgt = target.getSnapshotRepository();        if (sourceDominant || tgt == null) {            tgt = new DeploymentRepository();            tgt.setLocation("", src.getLocation(""));            target.setSnapshotRepository(tgt);            mergeDeploymentRepository(tgt, src, sourceDominant, context);        }    }}
500049566fb13f58978b8bd24901fa44365fa1a53be1b2789da0e34e63c40903
mergeDistributionManagement_Site
protected void mergeDistributionManagement_Site(DistributionManagement target, DistributionManagement source, boolean sourceDominant, Map<Object, Object> context)
{    Site src = source.getSite();    if (src != null) {        Site tgt = target.getSite();        if (sourceDominant || tgt == null || isSiteEmpty(tgt)) {            if (tgt == null) {                tgt = new Site();            }            tgt.setLocation("", src.getLocation(""));            target.setSite(tgt);            mergeSite(tgt, src, sourceDominant, context);        }        mergeSite_ChildSiteUrlInheritAppendPath(tgt, src, sourceDominant, context);    }}
48e604e9ba7383770b74656c7df44e148469ae5cfc2f0bc151b02191bccf89fb
mergeSite
protected void mergeSite(Site target, Site source, boolean sourceDominant, Map<Object, Object> context)
{    mergeSite_Id(target, source, sourceDominant, context);    mergeSite_Name(target, source, sourceDominant, context);    mergeSite_Url(target, source, sourceDominant, context);}
a5a845736fb76600f635e941a2ec234ca985376839474fc7205efa1fe2990aa5
isSiteEmpty
protected boolean isSiteEmpty(Site site)
{    return StringUtils.isEmpty(site.getId()) && StringUtils.isEmpty(site.getName()) && StringUtils.isEmpty(site.getUrl());}
e5f964d6b6562c0fe8745373666b3729ebd5629dd056de601ee53825b94b4715
mergeSite_Url
protected void mergeSite_Url(Site target, Site source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getUrl();    if (src != null) {        if (sourceDominant) {            target.setUrl(src);            target.setLocation("url", source.getLocation("url"));        } else if (target.getUrl() == null) {            target.setUrl(extrapolateChildUrl(src, source.isChildSiteUrlInheritAppendPath(), context));            target.setLocation("url", source.getLocation("url"));        }    }}
dbb1131c21d74b1bd89fc75b16e5578cdb94f8f8745cbd92639a888c6145b1fc
mergeScm_Url
protected void mergeScm_Url(Scm target, Scm source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getUrl();    if (src != null) {        if (sourceDominant) {            target.setUrl(src);            target.setLocation("url", source.getLocation("url"));        } else if (target.getUrl() == null) {            target.setUrl(extrapolateChildUrl(src, source.isChildScmUrlInheritAppendPath(), context));            target.setLocation("url", source.getLocation("url"));        }    }}
42e45216b327a03bca878fe8775815243bf7c2a4de28d2d59b314fecf647e434
mergeScm_Connection
protected void mergeScm_Connection(Scm target, Scm source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getConnection();    if (src != null) {        if (sourceDominant) {            target.setConnection(src);            target.setLocation("connection", source.getLocation("connection"));        } else if (target.getConnection() == null) {            target.setConnection(extrapolateChildUrl(src, source.isChildScmConnectionInheritAppendPath(), context));            target.setLocation("connection", source.getLocation("connection"));        }    }}
c486146ba2bebf9a0b7addd163ac331fb16d8e9c79b055b32a1977a0479ed542
mergeScm_DeveloperConnection
protected void mergeScm_DeveloperConnection(Scm target, Scm source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getDeveloperConnection();    if (src != null) {        if (sourceDominant) {            target.setDeveloperConnection(src);            target.setLocation("developerConnection", source.getLocation("developerConnection"));        } else if (target.getDeveloperConnection() == null) {            String e = extrapolateChildUrl(src, source.isChildScmDeveloperConnectionInheritAppendPath(), context);            target.setDeveloperConnection(e);            target.setLocation("developerConnection", source.getLocation("developerConnection"));        }    }}
94561c2f150c1e63a70e78ef092f147c6c77e819719f81018fd770308e07f225
mergePlugin_Executions
protected void mergePlugin_Executions(Plugin target, Plugin source, boolean sourceDominant, Map<Object, Object> context)
{    List<PluginExecution> src = source.getExecutions();    if (!src.isEmpty()) {        List<PluginExecution> tgt = target.getExecutions();        Map<Object, PluginExecution> merged = new LinkedHashMap<>((src.size() + tgt.size()) * 2);        for (PluginExecution element : src) {            if (sourceDominant || (element.getInherited() != null ? element.isInherited() : source.isInherited())) {                Object key = getPluginExecutionKey(element);                merged.put(key, element);            }        }        for (PluginExecution element : tgt) {            Object key = getPluginExecutionKey(element);            PluginExecution existing = merged.get(key);            if (existing != null) {                mergePluginExecution(element, existing, sourceDominant, context);            }            merged.put(key, element);        }        target.setExecutions(new ArrayList<>(merged.values()));    }}
c4279807db5f789625fc2c55447fc95f71cbe483abe57a62ca8e52f362a47580
mergePluginExecution_Goals
protected void mergePluginExecution_Goals(PluginExecution target, PluginExecution source, boolean sourceDominant, Map<Object, Object> context)
{    List<String> src = source.getGoals();    if (!src.isEmpty()) {        List<String> tgt = target.getGoals();        Set<String> excludes = new LinkedHashSet<>(tgt);        List<String> merged = new ArrayList<>(tgt.size() + src.size());        merged.addAll(tgt);        for (String s : src) {            if (!excludes.contains(s)) {                merged.add(s);            }        }        target.setGoals(merged);    }}
d71aa350681362d64960a05c6461e5314519ff28c275f981fa1e27a40e0eab76
mergeReportPlugin_ReportSets
protected void mergeReportPlugin_ReportSets(ReportPlugin target, ReportPlugin source, boolean sourceDominant, Map<Object, Object> context)
{    List<ReportSet> src = source.getReportSets();    if (!src.isEmpty()) {        List<ReportSet> tgt = target.getReportSets();        Map<Object, ReportSet> merged = new LinkedHashMap<>((src.size() + tgt.size()) * 2);        for (ReportSet rset : src) {            if (sourceDominant || (rset.getInherited() != null ? rset.isInherited() : source.isInherited())) {                Object key = getReportSetKey(rset);                merged.put(key, rset);            }        }        for (ReportSet element : tgt) {            Object key = getReportSetKey(element);            ReportSet existing = merged.get(key);            if (existing != null) {                mergeReportSet(element, existing, sourceDominant, context);            }            merged.put(key, element);        }        target.setReportSets(new ArrayList<>(merged.values()));    }}
97a9e82d016018fb2b7aae14ee9b8cabcbc44499ae9e47bbe17bebcbaa1e82a4
getDependencyKey
protected Object getDependencyKey(Dependency dependency)
{    return dependency.getManagementKey();}
a30f6a272dee71be9cb7636d8198665bbe45dbcf178ffaaba08377c8bbecabd3
getPluginKey
protected Object getPluginKey(Plugin plugin)
{    return plugin.getKey();}
9ebabaa6d53c162b4907871e6d6c75af2ad983a055a8a18a531055d00de5482d
getPluginExecutionKey
protected Object getPluginExecutionKey(PluginExecution pluginExecution)
{    return pluginExecution.getId();}
4cd50b262c17af9d4d2097a5704b4e04356ba1c5304134e30bec115b0a8535d9
getReportPluginKey
protected Object getReportPluginKey(ReportPlugin reportPlugin)
{    return reportPlugin.getKey();}
f5eb0e3c4341a4a7fffc9c17f96297139f24482b3b71b2c8b8f315f184728bcc
getReportSetKey
protected Object getReportSetKey(ReportSet reportSet)
{    return reportSet.getId();}
eab3f0762b4bf59cb5b4d430bc43ed0be54d9c0124107a5e9851abcac19017b8
getRepositoryBaseKey
protected Object getRepositoryBaseKey(RepositoryBase repositoryBase)
{    return repositoryBase.getId();}
1d6d569c2bb15fbd8f939ff21336c0f2f8ffba12defad62de7ecdf82967b0c2c
getExtensionKey
protected Object getExtensionKey(Extension extension)
{    return extension.getGroupId() + ':' + extension.getArtifactId();}
8276493920ef0925e9029c7a9d904a6e6938fdde2817adda91d015e708553643
getExclusionKey
protected Object getExclusionKey(Exclusion exclusion)
{    return exclusion.getGroupId() + ':' + exclusion.getArtifactId();}
637d1a6206b60c529136ac827a0227a52ae120b88da7526a1f8e770f6f72c5cd
extrapolateChildUrl
protected String extrapolateChildUrl(String parentUrl, boolean appendPath, Map<Object, Object> context)
{    return parentUrl;}
d6c83125cfe7386888a2bfba49daf7cd14084727ee181fd498954a4ae27c2c51
mergeDuplicates
public void mergeDuplicates(Model model, ModelBuildingRequest request, ModelProblemCollector problems)
{    Build build = model.getBuild();    if (build != null) {        List<Plugin> plugins = build.getPlugins();        Map<Object, Plugin> normalized = new LinkedHashMap<>(plugins.size() * 2);        for (Plugin plugin : plugins) {            Object key = plugin.getKey();            Plugin first = normalized.get(key);            if (first != null) {                merger.mergePlugin(plugin, first);            }            normalized.put(key, plugin);        }        if (plugins.size() != normalized.size()) {            build.setPlugins(new ArrayList<>(normalized.values()));        }    }    /*         * NOTE: This is primarily to keep backward-compat with Maven 2.x which did not validate that dependencies are         * unique within a single POM. Upon multiple declarations, 2.x just kept the last one but retained the order of         * the first occurrence. So when we're in lenient/compat mode, we have to deal with such broken POMs and mimic         * the way 2.x works. When we're in strict mode, the removal of duplicates just saves other merging steps from         * aftereffects and bogus error messages.         */    List<Dependency> dependencies = model.getDependencies();    Map<String, Dependency> normalized = new LinkedHashMap<>(dependencies.size() * 2);    for (Dependency dependency : dependencies) {        normalized.put(dependency.getManagementKey(), dependency);    }    if (dependencies.size() != normalized.size()) {        model.setDependencies(new ArrayList<>(normalized.values()));    }}
a0eb0ee9e1a32f152f929a9a937c29f6340b2ce617178625a90d55f5a99df60b
mergePlugin
public void mergePlugin(Plugin target, Plugin source)
{    super.mergePlugin(target, source, false, Collections.emptyMap());}
ef867201906f1beea2f281c7829002b3d5df7a0192e9b659e7a6171f3a6b4562
injectDefaultValues
public void injectDefaultValues(Model model, ModelBuildingRequest request, ModelProblemCollector problems)
{    injectDependencyDefaults(model.getDependencies());    Build build = model.getBuild();    if (build != null) {        for (Plugin plugin : build.getPlugins()) {            injectDependencyDefaults(plugin.getDependencies());        }    }}
8a330c0c8ebb196d3d2dcc40870570c9278716e9c7e77a89ee8214ac855bcc88
injectDependencyDefaults
private void injectDependencyDefaults(List<Dependency> dependencies)
{    for (Dependency dependency : dependencies) {        if (StringUtils.isEmpty(dependency.getScope())) {                        dependency.setScope("compile");        }    }}
bf114194b6dd27006e510cb32ce5da7a6facbaade7a49303660c558682e62aba
setPathTranslator
public DefaultModelPathTranslator setPathTranslator(PathTranslator pathTranslator)
{    this.pathTranslator = pathTranslator;    return this;}
3aff58f508a9f79f2bed89610e34dc7f5126a39e30b3aaf0d263080a04ae95d3
alignToBaseDirectory
public void alignToBaseDirectory(Model model, File basedir, ModelBuildingRequest request)
{    if (model == null || basedir == null) {        return;    }    Build build = model.getBuild();    if (build != null) {        build.setDirectory(alignToBaseDirectory(build.getDirectory(), basedir));        build.setSourceDirectory(alignToBaseDirectory(build.getSourceDirectory(), basedir));        build.setTestSourceDirectory(alignToBaseDirectory(build.getTestSourceDirectory(), basedir));        build.setScriptSourceDirectory(alignToBaseDirectory(build.getScriptSourceDirectory(), basedir));        for (Resource resource : build.getResources()) {            resource.setDirectory(alignToBaseDirectory(resource.getDirectory(), basedir));        }        for (Resource resource : build.getTestResources()) {            resource.setDirectory(alignToBaseDirectory(resource.getDirectory(), basedir));        }        if (build.getFilters() != null) {            List<String> filters = new ArrayList<>(build.getFilters().size());            for (String filter : build.getFilters()) {                filters.add(alignToBaseDirectory(filter, basedir));            }            build.setFilters(filters);        }        build.setOutputDirectory(alignToBaseDirectory(build.getOutputDirectory(), basedir));        build.setTestOutputDirectory(alignToBaseDirectory(build.getTestOutputDirectory(), basedir));    }    Reporting reporting = model.getReporting();    if (reporting != null) {        reporting.setOutputDirectory(alignToBaseDirectory(reporting.getOutputDirectory(), basedir));    }}
96d88b992015b44d34ca17fb795e0be247ea9f5445ab72ca6fe82487cdacf2c0
alignToBaseDirectory
private String alignToBaseDirectory(String path, File basedir)
{    return pathTranslator.alignToBaseDirectory(path, basedir);}
95b92d072fc4422ba3cb51ad1dd0f2a0261b511ca61365e908037b97b16f48b3
setUrlNormalizer
public DefaultModelUrlNormalizer setUrlNormalizer(UrlNormalizer urlNormalizer)
{    this.urlNormalizer = urlNormalizer;    return this;}
bdad9b284998b4423532278195713558f931cb0057f0c363921d73c1e08cbccb
normalize
public void normalize(Model model, ModelBuildingRequest request)
{    if (model == null) {        return;    }    model.setUrl(normalize(model.getUrl()));    Scm scm = model.getScm();    if (scm != null) {        scm.setUrl(normalize(scm.getUrl()));        scm.setConnection(normalize(scm.getConnection()));        scm.setDeveloperConnection(normalize(scm.getDeveloperConnection()));    }    DistributionManagement dist = model.getDistributionManagement();    if (dist != null) {        Site site = dist.getSite();        if (site != null) {            site.setUrl(normalize(site.getUrl()));        }    }}
495c2f08575f01358a7e691aa5ff2542c293b8a49016b2105ffc4fdea76a297c
normalize
private String normalize(String url)
{    return urlNormalizer.normalize(url);}
354a1082414820dbbf9e47bd6a5085105d873a28c1dacc5d514f5fb7c987ab0f
alignToBaseDirectory
public String alignToBaseDirectory(String path, File basedir)
{    String result = path;    if (path != null && basedir != null) {        path = path.replace('\\', File.separatorChar).replace('/', File.separatorChar);        File file = new File(path);        if (file.isAbsolute()) {                        result = file.getPath();        } else if (file.getPath().startsWith(File.separator)) {                        result = file.getAbsolutePath();        } else {                        result = new File(new File(basedir, path).toURI().normalize()).getAbsolutePath();        }    }    return result;}
a1217c75897a9509b5880023c012bdd9ae1646bb5ad642a9c3cda145a5a36c11
normalize
public String normalize(String url)
{    String result = url;    if (result != null) {        while (true) {            int idx = result.indexOf("/../");            if (idx < 0) {                break;            } else if (idx == 0) {                result = result.substring(3);                continue;            }            int parent = idx - 1;            while (parent >= 0 && result.charAt(parent) == '/') {                parent--;            }            parent = result.lastIndexOf('/', parent);            if (parent < 0) {                result = result.substring(idx + 4);            } else {                result = result.substring(0, parent) + result.substring(idx + 3);            }        }    }    return result;}
a411767ead145e9ccb69f56bae492908c64393bdc05e5b4b4350c3549bbde3a5
expandPluginConfiguration
public void expandPluginConfiguration(Model model, ModelBuildingRequest request, ModelProblemCollector problems)
{    Build build = model.getBuild();    if (build != null) {        expand(build.getPlugins());        PluginManagement pluginManagement = build.getPluginManagement();        if (pluginManagement != null) {            expand(pluginManagement.getPlugins());        }    }}
14d9f4ef0736a3233542dd76b1d23b7fdc323613cbce820d88ad02200e45f62a
expand
private void expand(List<Plugin> plugins)
{    for (Plugin plugin : plugins) {        Xpp3Dom pluginConfiguration = (Xpp3Dom) plugin.getConfiguration();        if (pluginConfiguration != null) {            for (PluginExecution execution : plugin.getExecutions()) {                Xpp3Dom executionConfiguration = (Xpp3Dom) execution.getConfiguration();                executionConfiguration = Xpp3Dom.mergeXpp3Dom(executionConfiguration, new Xpp3Dom(pluginConfiguration));                execution.setConfiguration(executionConfiguration);            }        }    }}
a411767ead145e9ccb69f56bae492908c64393bdc05e5b4b4350c3549bbde3a5
expandPluginConfiguration
public void expandPluginConfiguration(Model model, ModelBuildingRequest request, ModelProblemCollector problems)
{    Reporting reporting = model.getReporting();    if (reporting != null) {        for (ReportPlugin reportPlugin : reporting.getPlugins()) {            Xpp3Dom parentDom = (Xpp3Dom) reportPlugin.getConfiguration();            if (parentDom != null) {                for (ReportSet execution : reportPlugin.getReportSets()) {                    Xpp3Dom childDom = (Xpp3Dom) execution.getConfiguration();                    childDom = Xpp3Dom.mergeXpp3Dom(childDom, new Xpp3Dom(parentDom));                    execution.setConfiguration(childDom);                }            }        }    }}
47cdb33447c17e8ec32c2fc97c3216d6ee32645a8058d3bff522bb870a21b0c0
convertReporting
public void convertReporting(Model model, ModelBuildingRequest request, ModelProblemCollector problems)
{    Reporting reporting = model.getReporting();    if (reporting == null) {        return;    }    Build build = model.getBuild();    if (build == null) {        build = new Build();        model.setBuild(build);        model.setLocation("build", location);    }    Plugin sitePlugin = findSitePlugin(build);    if (sitePlugin == null) {        sitePlugin = new Plugin();        sitePlugin.setArtifactId("maven-site-plugin");        sitePlugin.setLocation("artifactId", location);        PluginManagement pluginManagement = build.getPluginManagement();        if (pluginManagement == null) {            pluginManagement = new PluginManagement();            build.setPluginManagement(pluginManagement);        }        pluginManagement.addPlugin(sitePlugin);    }    Xpp3Dom configuration = (Xpp3Dom) sitePlugin.getConfiguration();    if (configuration == null) {        configuration = new Xpp3Dom("configuration", location);        sitePlugin.setConfiguration(configuration);    }    Xpp3Dom reportPlugins = configuration.getChild("reportPlugins");    if (reportPlugins != null) {                        problems.add(new ModelProblemCollectorRequest(Severity.WARNING, Version.BASE).setMessage("Reporting configuration should be done in <reporting> section, " + "not in maven-site-plugin <configuration> as reportPlugins parameter.").setLocation(sitePlugin.getLocation("configuration")));        return;    }    if (configuration.getChild("outputDirectory") == null) {        addDom(configuration, "outputDirectory", reporting.getOutputDirectory(), reporting.getLocation("outputDirectory"));    }    reportPlugins = new Xpp3Dom("reportPlugins", location);    configuration.addChild(reportPlugins);    boolean hasMavenProjectInfoReportsPlugin = false;    for (ReportPlugin plugin : reporting.getPlugins()) {        Xpp3Dom reportPlugin = convert(plugin);        reportPlugins.addChild(reportPlugin);        if (!reporting.isExcludeDefaults() && !hasMavenProjectInfoReportsPlugin && "org.apache.maven.plugins".equals(plugin.getGroupId()) && "maven-project-info-reports-plugin".equals(plugin.getArtifactId())) {            hasMavenProjectInfoReportsPlugin = true;        }    }    if (!reporting.isExcludeDefaults() && !hasMavenProjectInfoReportsPlugin) {        Xpp3Dom dom = new Xpp3Dom("reportPlugin", location);        addDom(dom, "groupId", "org.apache.maven.plugins");        addDom(dom, "artifactId", "maven-project-info-reports-plugin");        reportPlugins.addChild(dom);    }}
8edddcdd9fb7e9d6fa3d0689474fe96a602758e629586205b1313a117c214fed
findSitePlugin
private Plugin findSitePlugin(Build build)
{    for (Plugin plugin : build.getPlugins()) {        if (isSitePlugin(plugin)) {            return plugin;        }    }    PluginManagement pluginManagement = build.getPluginManagement();    if (pluginManagement != null) {        for (Plugin plugin : pluginManagement.getPlugins()) {            if (isSitePlugin(plugin)) {                return plugin;            }        }    }    return null;}
25caed22019bdbc3eac8dad7b88e6105c78e0d13e011e92c9e4a9b977f1d929a
isSitePlugin
private boolean isSitePlugin(Plugin plugin)
{    return "maven-site-plugin".equals(plugin.getArtifactId()) && "org.apache.maven.plugins".equals(plugin.getGroupId());}
13ff8b4b4957356ff6609a3959a4c9ca1eb6ef9ed5d83e0649cc23402732428f
convert
private Xpp3Dom convert(ReportPlugin plugin)
{    Xpp3Dom dom = new Xpp3Dom("reportPlugin", plugin.getLocation(""));    addDom(dom, "groupId", plugin.getGroupId(), plugin.getLocation("groupId"));    addDom(dom, "artifactId", plugin.getArtifactId(), plugin.getLocation("artifactId"));    addDom(dom, "version", plugin.getVersion(), plugin.getLocation("version"));    Xpp3Dom configuration = (Xpp3Dom) plugin.getConfiguration();    if (configuration != null) {        configuration = new Xpp3Dom(configuration);        dom.addChild(configuration);    }    if (!plugin.getReportSets().isEmpty()) {        Xpp3Dom reportSets = new Xpp3Dom("reportSets", plugin.getLocation("reportSets"));        for (ReportSet reportSet : plugin.getReportSets()) {            Xpp3Dom rs = convert(reportSet);            reportSets.addChild(rs);        }        dom.addChild(reportSets);    }    return dom;}
70f118d0c3eaab862f0bfbb0b9768ae19da73872ed9b92dc43893b91e46be0f1
convert
private Xpp3Dom convert(ReportSet reportSet)
{    Xpp3Dom dom = new Xpp3Dom("reportSet", reportSet.getLocation(""));    InputLocation idLocation = reportSet.getLocation("id");    addDom(dom, "id", reportSet.getId(), idLocation == null ? location : idLocation);    Xpp3Dom configuration = (Xpp3Dom) reportSet.getConfiguration();    if (configuration != null) {        configuration = new Xpp3Dom(configuration);        dom.addChild(configuration);    }    if (!reportSet.getReports().isEmpty()) {        InputLocation location = reportSet.getLocation("reports");        Xpp3Dom reports = new Xpp3Dom("reports", location);        int n = 0;        for (String report : reportSet.getReports()) {            addDom(reports, "report", report, (location == null) ? null : location.getLocation(n++));        }        dom.addChild(reports);    }    return dom;}
34963576fb328dffb222c515b701eba8cb81f5a92db4b6c80a2e9e6194936943
addDom
private void addDom(Xpp3Dom parent, String childName, String childValue)
{    addDom(parent, childName, childValue, location);}
88c76c4b09ff6d793caf07aa384060322f60a7a219eb78e862e90907f5c002c2
addDom
private void addDom(Xpp3Dom parent, String childName, String childValue, InputLocation location)
{    if (StringUtils.isNotEmpty(childValue)) {        parent.addChild(newDom(childName, childValue, location));    }}
a0008e1837e66e7d007b71b8c577cd3d6d019f6643ddbc5efbf88b02404eef0b
newDom
private Xpp3Dom newDom(String name, String value, InputLocation location)
{    Xpp3Dom dom = new Xpp3Dom(name, location);    dom.setValue(value);    return dom;}
dd2ed841ecaf4225025e62207a598b32d17fc822ad03cf194e62cd057153cb14
setPathTranslator
public FileProfileActivator setPathTranslator(PathTranslator pathTranslator)
{    this.pathTranslator = pathTranslator;    return this;}
3c640c2147044edf657357da8c88025932bb2754c77b277c838078b0cfd1807a
isActive
public boolean isActive(Profile profile, ProfileActivationContext context, ModelProblemCollector problems)
{    Activation activation = profile.getActivation();    if (activation == null) {        return false;    }    ActivationFile file = activation.getFile();    if (file == null) {        return false;    }    String path;    boolean missing;    if (StringUtils.isNotEmpty(file.getExists())) {        path = file.getExists();        missing = false;    } else if (StringUtils.isNotEmpty(file.getMissing())) {        path = file.getMissing();        missing = true;    } else {        return false;    }    RegexBasedInterpolator interpolator = new RegexBasedInterpolator();    final File basedir = context.getProjectDirectory();    if (basedir != null) {        interpolator.addValueSource(new AbstractValueSource(false) {            @Override            public Object getValue(String expression) {                /*                     * NOTE: We intentionally only support ${basedir} and not ${project.basedir} as the latter form                     * would suggest that other project.* expressions can be used which is however beyond the design.                     */                if ("basedir".equals(expression)) {                    return basedir.getAbsolutePath();                }                return null;            }        });    } else if (path.contains("${basedir}")) {        return false;    }    interpolator.addValueSource(new MapBasedValueSource(context.getProjectProperties()));    interpolator.addValueSource(new MapBasedValueSource(context.getUserProperties()));    interpolator.addValueSource(new MapBasedValueSource(context.getSystemProperties()));    try {        path = interpolator.interpolate(path, "");    } catch (Exception e) {        problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage("Failed to interpolate file location " + path + " for profile " + profile.getId() + ": " + e.getMessage()).setLocation(file.getLocation(missing ? "missing" : "exists")).setException(e));        return false;    }    path = pathTranslator.alignToBaseDirectory(path, basedir);        if (missing) {        file.setMissing(path);    } else {        file.setExists(path);    }    File f = new File(path);    if (!f.isAbsolute()) {        return false;    }    boolean fileExists = f.exists();    return missing ? !fileExists : fileExists;}
11847c6fc1ea657a09fb97cfea92c7688683b7b646d9a6d928e2358295df5188
getValue
public Object getValue(String expression)
{    /*                     * NOTE: We intentionally only support ${basedir} and not ${project.basedir} as the latter form                     * would suggest that other project.* expressions can be used which is however beyond the design.                     */    if ("basedir".equals(expression)) {        return basedir.getAbsolutePath();    }    return null;}
91df0c7fe16fe5239aa7cd33829fbfe47d7c810fdc72f142437ff179e5fc02a2
presentInConfig
public boolean presentInConfig(Profile profile, ProfileActivationContext context, ModelProblemCollector problems)
{    Activation activation = profile.getActivation();    if (activation == null) {        return false;    }    ActivationFile file = activation.getFile();    if (file == null) {        return false;    }    return true;}
3c640c2147044edf657357da8c88025932bb2754c77b277c838078b0cfd1807a
isActive
public boolean isActive(Profile profile, ProfileActivationContext context, ModelProblemCollector problems)
{    Activation activation = profile.getActivation();    if (activation == null) {        return false;    }    String jdk = activation.getJdk();    if (jdk == null) {        return false;    }    String version = context.getSystemProperties().get("java.version");    if (version == null || version.length() <= 0) {        problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage("Failed to determine Java version for profile " + profile.getId()).setLocation(activation.getLocation("jdk")));        return false;    }    if (jdk.startsWith("!")) {        return !version.startsWith(jdk.substring(1));    } else if (isRange(jdk)) {        return isInRange(version, getRange(jdk));    } else {        return version.startsWith(jdk);    }}
91df0c7fe16fe5239aa7cd33829fbfe47d7c810fdc72f142437ff179e5fc02a2
presentInConfig
public boolean presentInConfig(Profile profile, ProfileActivationContext context, ModelProblemCollector problems)
{    Activation activation = profile.getActivation();    if (activation == null) {        return false;    }    String jdk = activation.getJdk();    if (jdk == null) {        return false;    }    return true;}
65273e207c01e01016a30db3bc9cc8fa2a8be1d97b2435fbe4a5520739fd4d7a
isInRange
private static boolean isInRange(String value, List<RangeValue> range)
{    int leftRelation = getRelationOrder(value, range.get(0), true);    if (leftRelation == 0) {        return true;    }    if (leftRelation < 0) {        return false;    }    return getRelationOrder(value, range.get(1), false) <= 0;}
b8d761018de50a74134b0c1b0cf409c6efd5eeb4a9c1a06dd259f441093690ea
getRelationOrder
private static int getRelationOrder(String value, RangeValue rangeValue, boolean isLeft)
{    if (rangeValue.value.length() <= 0) {        return isLeft ? 1 : -1;    }    value = value.replaceAll("[^0-9\\.\\-\\_]", "");    List<String> valueTokens = new ArrayList<>(Arrays.asList(value.split("[\\.\\-\\_]")));    List<String> rangeValueTokens = new ArrayList<>(Arrays.asList(rangeValue.value.split("\\.")));    addZeroTokens(valueTokens, 3);    addZeroTokens(rangeValueTokens, 3);    for (int i = 0; i < 3; i++) {        int x = Integer.parseInt(valueTokens.get(i));        int y = Integer.parseInt(rangeValueTokens.get(i));        if (x < y) {            return -1;        } else if (x > y) {            return 1;        }    }    if (!rangeValue.closed) {        return isLeft ? -1 : 1;    }    return 0;}
d2a94d025ebcc4c15de64fdc266fd8a79beed739453468045687fe17f5af6501
addZeroTokens
private static void addZeroTokens(List<String> tokens, int max)
{    while (tokens.size() < max) {        tokens.add("0");    }}
83bca150f8f00a066555965c0c460d8a5cc1cb987bbcfd4ec9c5b1a4d421d9fd
isRange
private static boolean isRange(String value)
{    return value.startsWith("[") || value.startsWith("(");}
4555a2264451d588f3586093f2369d80e8fba17bd88cd2a6054ca6aae6c52c59
getRange
private static List<RangeValue> getRange(String range)
{    List<RangeValue> ranges = new ArrayList<>();    for (String token : range.split(",")) {        if (token.startsWith("[")) {            ranges.add(new RangeValue(token.replace("[", ""), true));        } else if (token.startsWith("(")) {            ranges.add(new RangeValue(token.replace("(", ""), false));        } else if (token.endsWith("]")) {            ranges.add(new RangeValue(token.replace("]", ""), true));        } else if (token.endsWith(")")) {            ranges.add(new RangeValue(token.replace(")", ""), false));        } else if (token.length() <= 0) {            ranges.add(new RangeValue("", false));        }    }    if (ranges.size() < 2) {        ranges.add(new RangeValue("99999999", false));    }    return ranges;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return value;}
3c640c2147044edf657357da8c88025932bb2754c77b277c838078b0cfd1807a
isActive
public boolean isActive(Profile profile, ProfileActivationContext context, ModelProblemCollector problems)
{    Activation activation = profile.getActivation();    if (activation == null) {        return false;    }    ActivationOS os = activation.getOs();    if (os == null) {        return false;    }    boolean active = ensureAtLeastOneNonNull(os);    if (active && os.getFamily() != null) {        active = determineFamilyMatch(os.getFamily());    }    if (active && os.getName() != null) {        active = determineNameMatch(os.getName());    }    if (active && os.getArch() != null) {        active = determineArchMatch(os.getArch());    }    if (active && os.getVersion() != null) {        active = determineVersionMatch(os.getVersion());    }    return active;}
91df0c7fe16fe5239aa7cd33829fbfe47d7c810fdc72f142437ff179e5fc02a2
presentInConfig
public boolean presentInConfig(Profile profile, ProfileActivationContext context, ModelProblemCollector problems)
{    Activation activation = profile.getActivation();    if (activation == null) {        return false;    }    ActivationOS os = activation.getOs();    if (os == null) {        return false;    }    return true;}
d1c7cee862db36bf551aba658ca94cd67331133e0c78360344bf560af8130f3a
ensureAtLeastOneNonNull
private boolean ensureAtLeastOneNonNull(ActivationOS os)
{    return os.getArch() != null || os.getFamily() != null || os.getName() != null || os.getVersion() != null;}
1959be5500c1000baba7d288577eba0c4fefd66c6557f55ef129f50780f3e21c
determineVersionMatch
private boolean determineVersionMatch(String version)
{    String test = version;    boolean reverse = false;    if (test.startsWith("!")) {        reverse = true;        test = test.substring(1);    }    boolean result = Os.isVersion(test);    return reverse ? !result : result;}
bac339c93db97d069212240aea5685c58a0a021e397883c8058e7195761c2d61
determineArchMatch
private boolean determineArchMatch(String arch)
{    String test = arch;    boolean reverse = false;    if (test.startsWith("!")) {        reverse = true;        test = test.substring(1);    }    boolean result = Os.isArch(test);    return reverse ? !result : result;}
193e2ccb2b3e2d60b72344977d322cf023c1d60020022dc300e4c1abe62ebc14
determineNameMatch
private boolean determineNameMatch(String name)
{    String test = name;    boolean reverse = false;    if (test.startsWith("!")) {        reverse = true;        test = test.substring(1);    }    boolean result = Os.isName(test);    return reverse ? !result : result;}
07bbc7203dc650a9a6e155ca170ad907e6cbd89f0b59fa7872dd3364fd936ee1
determineFamilyMatch
private boolean determineFamilyMatch(String family)
{    String test = family;    boolean reverse = false;    if (test.startsWith("!")) {        reverse = true;        test = test.substring(1);    }    boolean result = Os.isFamily(test);    return reverse ? !result : result;}
3c640c2147044edf657357da8c88025932bb2754c77b277c838078b0cfd1807a
isActive
public boolean isActive(Profile profile, ProfileActivationContext context, ModelProblemCollector problems)
{    Activation activation = profile.getActivation();    if (activation == null) {        return false;    }    ActivationProperty property = activation.getProperty();    if (property == null) {        return false;    }    String name = property.getName();    boolean reverseName = false;    if (name != null && name.startsWith("!")) {        reverseName = true;        name = name.substring(1);    }    if (name == null || name.length() <= 0) {        problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage("The property name is required to activate the profile " + profile.getId()).setLocation(property.getLocation("")));        return false;    }    String sysValue = context.getUserProperties().get(name);    if (sysValue == null) {        sysValue = context.getSystemProperties().get(name);    }    String propValue = property.getValue();    if (StringUtils.isNotEmpty(propValue)) {        boolean reverseValue = false;        if (propValue.startsWith("!")) {            reverseValue = true;            propValue = propValue.substring(1);        }                boolean result = propValue.equals(sysValue);        return reverseValue ? !result : result;    } else {        boolean result = StringUtils.isNotEmpty(sysValue);        return reverseName ? !result : result;    }}
91df0c7fe16fe5239aa7cd33829fbfe47d7c810fdc72f142437ff179e5fc02a2
presentInConfig
public boolean presentInConfig(Profile profile, ProfileActivationContext context, ModelProblemCollector problems)
{    Activation activation = profile.getActivation();    if (activation == null) {        return false;    }    ActivationProperty property = activation.getProperty();    if (property == null) {        return false;    }    return true;}
e14ffb2a27c664e5057ee17c4a1fb0bb5b055f2a4b10065731f970cb254fa6a4
getActiveProfileIds
public List<String> getActiveProfileIds()
{    return activeProfileIds;}
ded12890634cd70cf981097dfb7e06becaa9b0e89dc1f95c6acdac855e59b714
setActiveProfileIds
public DefaultProfileActivationContext setActiveProfileIds(List<String> activeProfileIds)
{    if (activeProfileIds != null) {        this.activeProfileIds = Collections.unmodifiableList(activeProfileIds);    } else {        this.activeProfileIds = Collections.emptyList();    }    return this;}
74822a7709f5a5a1241339c1cdc0e2793c5f8fec1d0f52e09d8c8b484423e538
getInactiveProfileIds
public List<String> getInactiveProfileIds()
{    return inactiveProfileIds;}
370a6f7ed308a83f7f6fb1dda39366360428772929217d68dbc5633e746ffac8
setInactiveProfileIds
public DefaultProfileActivationContext setInactiveProfileIds(List<String> inactiveProfileIds)
{    if (inactiveProfileIds != null) {        this.inactiveProfileIds = Collections.unmodifiableList(inactiveProfileIds);    } else {        this.inactiveProfileIds = Collections.emptyList();    }    return this;}
2f4503d5caaaa1e87109eb17a960760af88f4949b75a526ac9742e5a79a4a037
getSystemProperties
public Map<String, String> getSystemProperties()
{    return systemProperties;}
915f732b0f059defc18ae4397b23cc5e9497bc7409c65281e5a837e4a1cc3524
setSystemProperties
public DefaultProfileActivationContext setSystemProperties(Properties systemProperties)
{    if (systemProperties != null) {        this.systemProperties = Collections.unmodifiableMap((Map) systemProperties);    } else {        this.systemProperties = Collections.emptyMap();    }    return this;}
81e561285b74a65101b659b27de9d364598ca89e0eddc095dcf7cf3f2fee4c4f
setSystemProperties
public DefaultProfileActivationContext setSystemProperties(Map<String, String> systemProperties)
{    if (systemProperties != null) {        this.systemProperties = Collections.unmodifiableMap(systemProperties);    } else {        this.systemProperties = Collections.emptyMap();    }    return this;}
67f318ffb426fd0dcfceb3af71f2f006e18ed72283299b932e49d2912325748f
getUserProperties
public Map<String, String> getUserProperties()
{    return userProperties;}
26e3a77542905e8dbd439a2fbce963c33c47a02a9f75ceafc99dfd534f5b8942
setUserProperties
public DefaultProfileActivationContext setUserProperties(Properties userProperties)
{    if (userProperties != null) {        this.userProperties = Collections.unmodifiableMap((Map) userProperties);    } else {        this.userProperties = Collections.emptyMap();    }    return this;}
20b54b037be79b00e2ae7dfdee1a68383c3cc71a22609c9631ecca45fee5cc5f
setUserProperties
public DefaultProfileActivationContext setUserProperties(Map<String, String> userProperties)
{    if (userProperties != null) {        this.userProperties = Collections.unmodifiableMap(userProperties);    } else {        this.userProperties = Collections.emptyMap();    }    return this;}
b9ab6519d274cbb5510f2db631224e4e1051c0d53046a9806399b92d40ce15a4
getProjectDirectory
public File getProjectDirectory()
{    return projectDirectory;}
bebefd93620965fb233262384a107ceccbcbd8001af41ed278baf84b89b92b56
setProjectDirectory
public DefaultProfileActivationContext setProjectDirectory(File projectDirectory)
{    this.projectDirectory = projectDirectory;    return this;}
353912725f13c8f168d49ddfc2ef569c3e584f0d5a9cf647ae9e81a3bd553a1d
getProjectProperties
public Map<String, String> getProjectProperties()
{    return projectProperties;}
8493f6c07f6c27ce8baf55429d8be42603f7a5c99fa322d057fd2faff219e8b6
setProjectProperties
public DefaultProfileActivationContext setProjectProperties(Properties projectProperties)
{    if (projectProperties != null) {        this.projectProperties = Collections.unmodifiableMap(toMap(projectProperties));    } else {        this.projectProperties = Collections.emptyMap();    }    return this;}
3e4bd825d306da7f1acd9defc7ed919e95b1a99c51bbf905ecb0a425a2f8c979
toMap
private Map<String, String> toMap(Properties properties)
{    if (properties == null) {        return Collections.emptyMap();    }    Map<String, String> map = new HashMap<>();    Enumeration keys = properties.keys();    while (keys.hasMoreElements()) {        String key = (String) keys.nextElement();        map.put(key, properties.getProperty(key));    }    return map;}
e5852a435c0d0bef9361ea55af1e26f151f9c5a596f2142e5f74b8f3366c6371
injectProfile
public void injectProfile(Model model, Profile profile, ModelBuildingRequest request, ModelProblemCollector problems)
{    if (profile != null) {        merger.mergeModelBase(model, profile);        if (profile.getBuild() != null) {            if (model.getBuild() == null) {                model.setBuild(new Build());            }            merger.mergeBuildBase(model.getBuild(), profile.getBuild());        }    }}
d80f8d0235ff52450fd8ca986f69ece6a528e6d03618b2f7d89737e84f7f6546
mergeModelBase
public void mergeModelBase(ModelBase target, ModelBase source)
{    mergeModelBase(target, source, true, Collections.emptyMap());}
d7c3a65aa771b97bab07328b863c79a3242b8233f5169098dc1865e2ab88e3ab
mergeBuildBase
public void mergeBuildBase(BuildBase target, BuildBase source)
{    mergeBuildBase(target, source, true, Collections.emptyMap());}
4dfefd0e1a9d2e2ec36522b87bc50609dee76c19bd871b54c6c21a022b576c70
mergePluginContainer_Plugins
protected void mergePluginContainer_Plugins(PluginContainer target, PluginContainer source, boolean sourceDominant, Map<Object, Object> context)
{    List<Plugin> src = source.getPlugins();    if (!src.isEmpty()) {        List<Plugin> tgt = target.getPlugins();        Map<Object, Plugin> master = new LinkedHashMap<>(tgt.size() * 2);        for (Plugin element : tgt) {            Object key = getPluginKey(element);            master.put(key, element);        }        Map<Object, List<Plugin>> predecessors = new LinkedHashMap<>();        List<Plugin> pending = new ArrayList<>();        for (Plugin element : src) {            Object key = getPluginKey(element);            Plugin existing = master.get(key);            if (existing != null) {                mergePlugin(existing, element, sourceDominant, context);                if (!pending.isEmpty()) {                    predecessors.put(key, pending);                    pending = new ArrayList<>();                }            } else {                pending.add(element);            }        }        List<Plugin> result = new ArrayList<>(src.size() + tgt.size());        for (Map.Entry<Object, Plugin> entry : master.entrySet()) {            List<Plugin> pre = predecessors.get(entry.getKey());            if (pre != null) {                result.addAll(pre);            }            result.add(entry.getValue());        }        result.addAll(pending);        target.setPlugins(result);    }}
94561c2f150c1e63a70e78ef092f147c6c77e819719f81018fd770308e07f225
mergePlugin_Executions
protected void mergePlugin_Executions(Plugin target, Plugin source, boolean sourceDominant, Map<Object, Object> context)
{    List<PluginExecution> src = source.getExecutions();    if (!src.isEmpty()) {        List<PluginExecution> tgt = target.getExecutions();        Map<Object, PluginExecution> merged = new LinkedHashMap<>((src.size() + tgt.size()) * 2);        for (PluginExecution element : tgt) {            Object key = getPluginExecutionKey(element);            merged.put(key, element);        }        for (PluginExecution element : src) {            Object key = getPluginExecutionKey(element);            PluginExecution existing = merged.get(key);            if (existing != null) {                mergePluginExecution(existing, element, sourceDominant, context);            } else {                merged.put(key, element);            }        }        target.setExecutions(new ArrayList<>(merged.values()));    }}
f4011b29373adcba2687554512b430787bd0b1f64ea73251c2015a3f13ca3638
mergeReporting_Plugins
protected void mergeReporting_Plugins(Reporting target, Reporting source, boolean sourceDominant, Map<Object, Object> context)
{    List<ReportPlugin> src = source.getPlugins();    if (!src.isEmpty()) {        List<ReportPlugin> tgt = target.getPlugins();        Map<Object, ReportPlugin> merged = new LinkedHashMap<>((src.size() + tgt.size()) * 2);        for (ReportPlugin element : tgt) {            Object key = getReportPluginKey(element);            merged.put(key, element);        }        for (ReportPlugin element : src) {            Object key = getReportPluginKey(element);            ReportPlugin existing = merged.get(key);            if (existing == null) {                merged.put(key, element);            } else {                mergeReportPlugin(existing, element, sourceDominant, context);            }        }        target.setPlugins(new ArrayList<>(merged.values()));    }}
d71aa350681362d64960a05c6461e5314519ff28c275f981fa1e27a40e0eab76
mergeReportPlugin_ReportSets
protected void mergeReportPlugin_ReportSets(ReportPlugin target, ReportPlugin source, boolean sourceDominant, Map<Object, Object> context)
{    List<ReportSet> src = source.getReportSets();    if (!src.isEmpty()) {        List<ReportSet> tgt = target.getReportSets();        Map<Object, ReportSet> merged = new LinkedHashMap<>((src.size() + tgt.size()) * 2);        for (ReportSet element : tgt) {            Object key = getReportSetKey(element);            merged.put(key, element);        }        for (ReportSet element : src) {            Object key = getReportSetKey(element);            ReportSet existing = merged.get(key);            if (existing != null) {                mergeReportSet(existing, element, sourceDominant, context);            } else {                merged.put(key, element);            }        }        target.setReportSets(new ArrayList<>(merged.values()));    }}
6390f7fc8caca3a4bbb2812c6005c884fd36dfd53c3095b3486985878313a42a
addProfileActivator
public DefaultProfileSelector addProfileActivator(ProfileActivator profileActivator)
{    if (profileActivator != null) {        activators.add(profileActivator);    }    return this;}
5f82f2baa1774ca0a05d106d0ef4a604a9f9bd99c3fd720a58f7cc716bdb58af
getActiveProfiles
public List<Profile> getActiveProfiles(Collection<Profile> profiles, ProfileActivationContext context, ModelProblemCollector problems)
{    Collection<String> activatedIds = new HashSet<>(context.getActiveProfileIds());    Collection<String> deactivatedIds = new HashSet<>(context.getInactiveProfileIds());    List<Profile> activeProfiles = new ArrayList<>(profiles.size());    List<Profile> activePomProfilesByDefault = new ArrayList<>();    boolean activatedPomProfileNotByDefault = false;    for (Profile profile : profiles) {        if (!deactivatedIds.contains(profile.getId())) {            if (activatedIds.contains(profile.getId()) || isActive(profile, context, problems)) {                activeProfiles.add(profile);                if (Profile.SOURCE_POM.equals(profile.getSource())) {                    activatedPomProfileNotByDefault = true;                }            } else if (isActiveByDefault(profile)) {                if (Profile.SOURCE_POM.equals(profile.getSource())) {                    activePomProfilesByDefault.add(profile);                } else {                    activeProfiles.add(profile);                }            }        }    }    if (!activatedPomProfileNotByDefault) {        activeProfiles.addAll(activePomProfilesByDefault);    }    return activeProfiles;}
3cde0a7c90aecaf2086cea7fbcbf3dc3e84863bbc45eea3ff8f06eb90bf3f618
isActive
private boolean isActive(Profile profile, ProfileActivationContext context, ModelProblemCollector problems)
{    boolean isActive = false;    for (ProfileActivator activator : activators) {        if (activator.presentInConfig(profile, context, problems)) {            isActive = true;        }    }    for (ProfileActivator activator : activators) {        try {            if (activator.presentInConfig(profile, context, problems)) {                isActive &= activator.isActive(profile, context, problems);            }        } catch (RuntimeException e) {            problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage("Failed to determine activation for profile " + profile.getId()).setLocation(profile.getLocation("")).setException(e));            return false;        }    }    return isActive;}
0e083276737fb87eca0643a79348fbaef1f89dd4d3071b52655f876a2ec2b5e9
isActiveByDefault
private boolean isActiveByDefault(Profile profile)
{    Activation activation = profile.getActivation();    return activation != null && activation.isActiveByDefault();}
307f452f91ceebdcc60c1cb580c5e87ca04be23c2d12777ee96a1ab92eb7933a
getRepository
public Repository getRepository()
{    return repository;}
9590314d7a6edd0118345714cc714a8e73448e57e702bb4c6893b363f509d64d
getGroupId
public String getGroupId()
{    return groupId;}
1e5191dc99d9314f2df50294bcd8d717af7b8f4311575d36d8d75b27121f1064
getArtifactId
public String getArtifactId()
{    return artifactId;}
446b3b91c7c41085df1dc5542616b89ccd409f6a1d45e4d60d3ca00ac839ecf0
getVersion
public String getVersion()
{    return version;}
435ab750a8b2ede9316f2d4bb1a43ff89c747fe6311fed46ee07104d87cc0a6b
setModelProcessor
public DefaultSuperPomProvider setModelProcessor(ModelProcessor modelProcessor)
{    this.modelProcessor = modelProcessor;    return this;}
070be7025e305fa71c7cfa217356798d2737db9dc6f07cde3760498abb63cc53
getSuperModel
public Model getSuperModel(String version)
{    if (superModel == null) {        String resource = "/org/apache/maven/model/pom-" + version + ".xml";        InputStream is = getClass().getResourceAsStream(resource);        if (is == null) {            throw new IllegalStateException("The super POM " + resource + " was not found" + ", please verify the integrity of your Maven installation");        }        try {            Map<String, Object> options = new HashMap<>();            options.put("xml:4.0.0", "xml:4.0.0");            String modelId = "org.apache.maven:maven-model-builder:" + this.getClass().getPackage().getImplementationVersion() + ":super-pom";            InputSource inputSource = new InputSource();            inputSource.setModelId(modelId);            inputSource.setLocation(getClass().getResource(resource).toExternalForm());            options.put(ModelProcessor.INPUT_SOURCE, inputSource);            superModel = modelProcessor.read(is, options);        } catch (IOException e) {            throw new IllegalStateException("The super POM " + resource + " is damaged" + ", please verify the integrity of your Maven installation", e);        }    }    return superModel;}
ae2bdb23223839528d8936249b0694bcdd7a3676cb4a3394fda54c41d1f67cb9
validateRawModel
public void validateRawModel(Model m, ModelBuildingRequest request, ModelProblemCollector problems)
{    Parent parent = m.getParent();    if (parent != null) {        validateStringNotEmpty("parent.groupId", problems, Severity.FATAL, Version.BASE, parent.getGroupId(), parent);        validateStringNotEmpty("parent.artifactId", problems, Severity.FATAL, Version.BASE, parent.getArtifactId(), parent);        validateStringNotEmpty("parent.version", problems, Severity.FATAL, Version.BASE, parent.getVersion(), parent);        if (equals(parent.getGroupId(), m.getGroupId()) && equals(parent.getArtifactId(), m.getArtifactId())) {            addViolation(problems, Severity.FATAL, Version.BASE, "parent.artifactId", null, "must be changed" + ", the parent element cannot have the same groupId:artifactId as the project.", parent);        }        if (equals("LATEST", parent.getVersion()) || equals("RELEASE", parent.getVersion())) {            addViolation(problems, Severity.WARNING, Version.BASE, "parent.version", null, "is either LATEST or RELEASE (both of them are being deprecated)", parent);        }    }    if (request.getValidationLevel() >= ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {        Severity errOn30 = getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);                                                        validateStringNotEmpty("modelVersion", problems, Severity.ERROR, Version.V20, m.getModelVersion(), m);        validateModelVersion(problems, m.getModelVersion(), m, "4.0.0");        validateStringNoExpression("groupId", problems, Severity.WARNING, Version.V20, m.getGroupId(), m);        if (parent == null) {            validateStringNotEmpty("groupId", problems, Severity.FATAL, Version.V20, m.getGroupId(), m);        }        validateStringNoExpression("artifactId", problems, Severity.WARNING, Version.V20, m.getArtifactId(), m);        validateStringNotEmpty("artifactId", problems, Severity.FATAL, Version.V20, m.getArtifactId(), m);        validateVersionNoExpression("version", problems, Severity.WARNING, Version.V20, m.getVersion(), m);        if (parent == null) {            validateStringNotEmpty("version", problems, Severity.FATAL, Version.V20, m.getVersion(), m);        }        validate20RawDependencies(problems, m.getDependencies(), "dependencies.dependency.", EMPTY, request);        validate20RawDependenciesSelfReferencing(problems, m, m.getDependencies(), "dependencies.dependency", request);        if (m.getDependencyManagement() != null) {            validate20RawDependencies(problems, m.getDependencyManagement().getDependencies(), "dependencyManagement.dependencies.dependency.", EMPTY, request);        }        validateRawRepositories(problems, m.getRepositories(), "repositories.repository.", EMPTY, request);        validateRawRepositories(problems, m.getPluginRepositories(), "pluginRepositories.pluginRepository.", EMPTY, request);        Build build = m.getBuild();        if (build != null) {            validate20RawPlugins(problems, build.getPlugins(), "build.plugins.plugin.", EMPTY, request);            PluginManagement mgmt = build.getPluginManagement();            if (mgmt != null) {                validate20RawPlugins(problems, mgmt.getPlugins(), "build.pluginManagement.plugins.plugin.", EMPTY, request);            }        }        Set<String> profileIds = new HashSet<>();        for (Profile profile : m.getProfiles()) {            String prefix = "profiles.profile[" + profile.getId() + "].";            if (!profileIds.add(profile.getId())) {                addViolation(problems, errOn30, Version.V20, "profiles.profile.id", null, "must be unique but found duplicate profile with id " + profile.getId(), profile);            }            validate30RawProfileActivation(problems, profile.getActivation(), profile.getId(), prefix, "activation", request);            validate20RawDependencies(problems, profile.getDependencies(), prefix, "dependencies.dependency.", request);            if (profile.getDependencyManagement() != null) {                validate20RawDependencies(problems, profile.getDependencyManagement().getDependencies(), prefix, "dependencyManagement.dependencies.dependency.", request);            }            validateRawRepositories(problems, profile.getRepositories(), prefix, "repositories.repository.", request);            validateRawRepositories(problems, profile.getPluginRepositories(), prefix, "pluginRepositories.pluginRepository.", request);            BuildBase buildBase = profile.getBuild();            if (buildBase != null) {                validate20RawPlugins(problems, buildBase.getPlugins(), prefix, "plugins.plugin.", request);                PluginManagement mgmt = buildBase.getPluginManagement();                if (mgmt != null) {                    validate20RawPlugins(problems, mgmt.getPlugins(), prefix, "pluginManagement.plugins.plugin.", request);                }            }        }    }}
585b2e6a4bd689d2b53ad59923b4a3ecd77bfebd0e5a8fd09fa2115636f23b85
validate30RawProfileActivation
private void validate30RawProfileActivation(ModelProblemCollector problems, Activation activation, String sourceHint, String prefix, String fieldName, ModelBuildingRequest request)
{    if (activation == null) {        return;    }    ActivationFile file = activation.getFile();    if (file != null) {        String path;        boolean missing;        if (StringUtils.isNotEmpty(file.getExists())) {            path = file.getExists();            missing = false;        } else if (StringUtils.isNotEmpty(file.getMissing())) {            path = file.getMissing();            missing = true;        } else {            return;        }        if (path.contains("${project.basedir}")) {            addViolation(problems, Severity.WARNING, Version.V30, prefix + fieldName + (missing ? ".file.missing" : ".file.exists"), null, "Failed to interpolate file location " + path + " for profile " + sourceHint + ": ${project.basedir} expression not supported during profile activation, " + "use ${basedir} instead", file.getLocation(missing ? "missing" : "exists"));        } else if (hasProjectExpression(path)) {            addViolation(problems, Severity.WARNING, Version.V30, prefix + fieldName + (missing ? ".file.missing" : ".file.exists"), null, "Failed to interpolate file location " + path + " for profile " + sourceHint + ": ${project.*} expressions are not supported during profile activation", file.getLocation(missing ? "missing" : "exists"));        }    }}
62b0f5abb8b242e5c32dac52b6a33f56940a01197351a3aec49f5830737f78cc
validate20RawPlugins
private void validate20RawPlugins(ModelProblemCollector problems, List<Plugin> plugins, String prefix, String prefix2, ModelBuildingRequest request)
{    Severity errOn31 = getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1);    Map<String, Plugin> index = new HashMap<>();    for (Plugin plugin : plugins) {        if (plugin.getGroupId() == null || (plugin.getGroupId() != null && plugin.getGroupId().trim().isEmpty())) {            addViolation(problems, Severity.FATAL, Version.V20, prefix + prefix2 + "(groupId:artifactId)", null, "groupId of a plugin must be defined. ", plugin);        }        if (plugin.getArtifactId() == null || (plugin.getArtifactId() != null && plugin.getArtifactId().trim().isEmpty())) {            addViolation(problems, Severity.FATAL, Version.V20, prefix + prefix2 + "(groupId:artifactId)", null, "artifactId of a plugin must be defined. ", plugin);        }                if (plugin.getVersion() != null && plugin.getVersion().trim().isEmpty()) {            addViolation(problems, Severity.FATAL, Version.V20, prefix + prefix2 + "(groupId:artifactId)", null, "version of a plugin must be defined. ", plugin);        }        String key = plugin.getKey();        Plugin existing = index.get(key);        if (existing != null) {            addViolation(problems, errOn31, Version.V20, prefix + prefix2 + "(groupId:artifactId)", null, "must be unique but found duplicate declaration of plugin " + key, plugin);        } else {            index.put(key, plugin);        }        Set<String> executionIds = new HashSet<>();        for (PluginExecution exec : plugin.getExecutions()) {            if (!executionIds.add(exec.getId())) {                addViolation(problems, Severity.ERROR, Version.V20, prefix + prefix2 + "[" + plugin.getKey() + "].executions.execution.id", null, "must be unique but found duplicate execution with id " + exec.getId(), exec);            }        }    }}
1c7b20896ea3e7d9afb39845ab9478b80075100be1a985fcb65dad4d86766197
validateEffectiveModel
public void validateEffectiveModel(Model m, ModelBuildingRequest request, ModelProblemCollector problems)
{    validateStringNotEmpty("modelVersion", problems, Severity.ERROR, Version.BASE, m.getModelVersion(), m);    validateId("groupId", problems, m.getGroupId(), m);    validateId("artifactId", problems, m.getArtifactId(), m);    validateStringNotEmpty("packaging", problems, Severity.ERROR, Version.BASE, m.getPackaging(), m);    if (!m.getModules().isEmpty()) {        if (!"pom".equals(m.getPackaging())) {            addViolation(problems, Severity.ERROR, Version.BASE, "packaging", null, "with value '" + m.getPackaging() + "' is invalid. Aggregator projects " + "require 'pom' as packaging.", m);        }        for (int i = 0, n = m.getModules().size(); i < n; i++) {            String module = m.getModules().get(i);            if (StringUtils.isBlank(module)) {                addViolation(problems, Severity.ERROR, Version.BASE, "modules.module[" + i + "]", null, "has been specified without a path to the project directory.", m.getLocation("modules"));            }        }    }    validateStringNotEmpty("version", problems, Severity.ERROR, Version.BASE, m.getVersion(), m);    Severity errOn30 = getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);    validateEffectiveDependencies(problems, m, m.getDependencies(), false, request);    DependencyManagement mgmt = m.getDependencyManagement();    if (mgmt != null) {        validateEffectiveDependencies(problems, m, mgmt.getDependencies(), true, request);    }    if (request.getValidationLevel() >= ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {        Set<String> modules = new HashSet<>();        for (int i = 0, n = m.getModules().size(); i < n; i++) {            String module = m.getModules().get(i);            if (!modules.add(module)) {                addViolation(problems, Severity.ERROR, Version.V20, "modules.module[" + i + "]", null, "specifies duplicate child module " + module, m.getLocation("modules"));            }        }        Severity errOn31 = getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1);        validateBannedCharacters(EMPTY, "version", problems, errOn31, Version.V20, m.getVersion(), null, m, ILLEGAL_VERSION_CHARS);        validate20ProperSnapshotVersion("version", problems, errOn31, Version.V20, m.getVersion(), null, m);        Build build = m.getBuild();        if (build != null) {            for (Plugin p : build.getPlugins()) {                validateStringNotEmpty("build.plugins.plugin.artifactId", problems, Severity.ERROR, Version.V20, p.getArtifactId(), p);                validateStringNotEmpty("build.plugins.plugin.groupId", problems, Severity.ERROR, Version.V20, p.getGroupId(), p);                validate20PluginVersion("build.plugins.plugin.version", problems, p.getVersion(), p.getKey(), p, request);                validateBoolean("build.plugins.plugin.inherited", EMPTY, problems, errOn30, Version.V20, p.getInherited(), p.getKey(), p);                validateBoolean("build.plugins.plugin.extensions", EMPTY, problems, errOn30, Version.V20, p.getExtensions(), p.getKey(), p);                validate20EffectivePluginDependencies(problems, p, request);            }            validate20RawResources(problems, build.getResources(), "build.resources.resource.", request);            validate20RawResources(problems, build.getTestResources(), "build.testResources.testResource.", request);        }        Reporting reporting = m.getReporting();        if (reporting != null) {            for (ReportPlugin p : reporting.getPlugins()) {                validateStringNotEmpty("reporting.plugins.plugin.artifactId", problems, Severity.ERROR, Version.V20, p.getArtifactId(), p);                validateStringNotEmpty("reporting.plugins.plugin.groupId", problems, Severity.ERROR, Version.V20, p.getGroupId(), p);            }        }        for (Repository repository : m.getRepositories()) {            validate20EffectiveRepository(problems, repository, "repositories.repository.", request);        }        for (Repository repository : m.getPluginRepositories()) {            validate20EffectiveRepository(problems, repository, "pluginRepositories.pluginRepository.", request);        }        DistributionManagement distMgmt = m.getDistributionManagement();        if (distMgmt != null) {            if (distMgmt.getStatus() != null) {                addViolation(problems, Severity.ERROR, Version.V20, "distributionManagement.status", null, "must not be specified.", distMgmt);            }            validate20EffectiveRepository(problems, distMgmt.getRepository(), "distributionManagement.repository.", request);            validate20EffectiveRepository(problems, distMgmt.getSnapshotRepository(), "distributionManagement.snapshotRepository.", request);        }    }}
858576d8227183d461c2a1fd1871d9d38aaa9967c3e38e78de47bc04258516d9
validate20RawDependencies
private void validate20RawDependencies(ModelProblemCollector problems, List<Dependency> dependencies, String prefix, String prefix2, ModelBuildingRequest request)
{    Severity errOn30 = getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);    Severity errOn31 = getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1);    Map<String, Dependency> index = new HashMap<>();    for (Dependency dependency : dependencies) {        String key = dependency.getManagementKey();        if ("import".equals(dependency.getScope())) {            if (!"pom".equals(dependency.getType())) {                addViolation(problems, Severity.WARNING, Version.V20, prefix + prefix2 + "type", key, "must be 'pom' to import the managed dependencies.", dependency);            } else if (StringUtils.isNotEmpty(dependency.getClassifier())) {                addViolation(problems, errOn30, Version.V20, prefix + prefix2 + "classifier", key, "must be empty, imported POM cannot have a classifier.", dependency);            }        } else if ("system".equals(dependency.getScope())) {            if (request.getValidationLevel() >= ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1) {                addViolation(problems, Severity.WARNING, Version.V31, prefix + prefix2 + "scope", key, "declares usage of deprecated 'system' scope ", dependency);            }            String sysPath = dependency.getSystemPath();            if (StringUtils.isNotEmpty(sysPath)) {                if (!hasExpression(sysPath)) {                    addViolation(problems, Severity.WARNING, Version.V20, prefix + prefix2 + "systemPath", key, "should use a variable instead of a hard-coded path " + sysPath, dependency);                } else if (sysPath.contains("${basedir}") || sysPath.contains("${project.basedir}")) {                    addViolation(problems, Severity.WARNING, Version.V20, prefix + prefix2 + "systemPath", key, "should not point at files within the project directory, " + sysPath + " will be unresolvable by dependent projects", dependency);                }            }        }        if (equals("LATEST", dependency.getVersion()) || equals("RELEASE", dependency.getVersion())) {            addViolation(problems, Severity.WARNING, Version.BASE, prefix + prefix2 + "version", key, "is either LATEST or RELEASE (both of them are being deprecated)", dependency);        }        Dependency existing = index.get(key);        if (existing != null) {            String msg;            if (equals(existing.getVersion(), dependency.getVersion())) {                msg = "duplicate declaration of version " + StringUtils.defaultString(dependency.getVersion(), "(?)");            } else {                msg = "version " + StringUtils.defaultString(existing.getVersion(), "(?)") + " vs " + StringUtils.defaultString(dependency.getVersion(), "(?)");            }            addViolation(problems, errOn31, Version.V20, prefix + prefix2 + "(groupId:artifactId:type:classifier)", null, "must be unique: " + key + " -> " + msg, dependency);        } else {            index.put(key, dependency);        }    }}
7228d12085251ca84efba987ded1597c2bd7b5d07b7cc74963e8ce431e2ffedd
validate20RawDependenciesSelfReferencing
private void validate20RawDependenciesSelfReferencing(ModelProblemCollector problems, Model m, List<Dependency> dependencies, String prefix, ModelBuildingRequest request)
{        for (Dependency dependency : dependencies) {        String key = dependency.getGroupId() + ":" + dependency.getArtifactId() + ":" + dependency.getVersion() + (dependency.getClassifier() != null ? ":" + dependency.getClassifier() : EMPTY);        String mKey = m.getGroupId() + ":" + m.getArtifactId() + ":" + m.getVersion();        if (key.equals(mKey)) {                                                addViolation(problems, Severity.FATAL, Version.V31, prefix + "[" + key + "]", key, "is referencing itself.", dependency);        }    }}
39e923b2ec06eb48b786414e9ab4c187dea9e30bf3cde4324ffb23ca0e2cb4d9
validateEffectiveDependencies
private void validateEffectiveDependencies(ModelProblemCollector problems, Model m, List<Dependency> dependencies, boolean management, ModelBuildingRequest request)
{    Severity errOn30 = getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);    String prefix = management ? "dependencyManagement.dependencies.dependency." : "dependencies.dependency.";    for (Dependency d : dependencies) {        validateEffectiveDependency(problems, d, management, prefix, request);        if (request.getValidationLevel() >= ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {            validateBoolean(prefix, "optional", problems, errOn30, Version.V20, d.getOptional(), d.getManagementKey(), d);            if (!management) {                validateVersion(prefix, "version", problems, errOn30, Version.V20, d.getVersion(), d.getManagementKey(), d);                /*                     * TODO Extensions like Flex Mojos use custom scopes like "merged", "internal", "external", etc. In                     * order to don't break backward-compat with those, only warn but don't error out.                     */                validateEnum(prefix, "scope", problems, Severity.WARNING, Version.V20, d.getScope(), d.getManagementKey(), d, "provided", "compile", "runtime", "test", "system");                validateEffectiveModelAgainstDependency(prefix, problems, m, d, request);            } else {                validateEnum(prefix, "scope", problems, Severity.WARNING, Version.V20, d.getScope(), d.getManagementKey(), d, "provided", "compile", "runtime", "test", "system", "import");            }        }    }}
869b2d55f285598aab7f1b80d7e279691b811e6480827f1634bd77c89a0c1af8
validateEffectiveModelAgainstDependency
private void validateEffectiveModelAgainstDependency(String prefix, ModelProblemCollector problems, Model m, Dependency d, ModelBuildingRequest request)
{    String key = d.getGroupId() + ":" + d.getArtifactId() + ":" + d.getVersion() + (d.getClassifier() != null ? ":" + d.getClassifier() : EMPTY);    String mKey = m.getGroupId() + ":" + m.getArtifactId() + ":" + m.getVersion();    if (key.equals(mKey)) {                                addViolation(problems, Severity.FATAL, Version.V31, prefix + "[" + key + "]", key, "is referencing itself.", d);    }}
6c90f0ea8a038e71a5b6fe2ed25332e4591905fd2227b32f8055542d0d053aec
validate20EffectivePluginDependencies
private void validate20EffectivePluginDependencies(ModelProblemCollector problems, Plugin plugin, ModelBuildingRequest request)
{    List<Dependency> dependencies = plugin.getDependencies();    if (!dependencies.isEmpty()) {        String prefix = "build.plugins.plugin[" + plugin.getKey() + "].dependencies.dependency.";        Severity errOn30 = getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);        for (Dependency d : dependencies) {            validateEffectiveDependency(problems, d, false, prefix, request);            validateVersion(prefix, "version", problems, errOn30, Version.BASE, d.getVersion(), d.getManagementKey(), d);            validateEnum(prefix, "scope", problems, errOn30, Version.BASE, d.getScope(), d.getManagementKey(), d, "compile", "runtime", "system");        }    }}
f84a1852428fb8e2843d21397baf23ef9ba30ff3b095f6e3569e9309d7cd1b28
validateEffectiveDependency
private void validateEffectiveDependency(ModelProblemCollector problems, Dependency d, boolean management, String prefix, ModelBuildingRequest request)
{    validateId(prefix, "artifactId", problems, Severity.ERROR, Version.BASE, d.getArtifactId(), d.getManagementKey(), d);    validateId(prefix, "groupId", problems, Severity.ERROR, Version.BASE, d.getGroupId(), d.getManagementKey(), d);    if (!management) {        validateStringNotEmpty(prefix, "type", problems, Severity.ERROR, Version.BASE, d.getType(), d.getManagementKey(), d);        validateDependencyVersion(problems, d, prefix);    }    if ("system".equals(d.getScope())) {        String systemPath = d.getSystemPath();        if (StringUtils.isEmpty(systemPath)) {            addViolation(problems, Severity.ERROR, Version.BASE, prefix + "systemPath", d.getManagementKey(), "is missing.", d);        } else {            File sysFile = new File(systemPath);            if (!sysFile.isAbsolute()) {                addViolation(problems, Severity.ERROR, Version.BASE, prefix + "systemPath", d.getManagementKey(), "must specify an absolute path but is " + systemPath, d);            } else if (!sysFile.isFile()) {                String msg = "refers to a non-existing file " + sysFile.getAbsolutePath();                systemPath = systemPath.replace('/', File.separatorChar).replace('\\', File.separatorChar);                String jdkHome = request.getSystemProperties().getProperty("java.home", EMPTY) + File.separator + "..";                if (systemPath.startsWith(jdkHome)) {                    msg += ". Please verify that you run Maven using a JDK and not just a JRE.";                }                addViolation(problems, Severity.WARNING, Version.BASE, prefix + "systemPath", d.getManagementKey(), msg, d);            }        }    } else if (StringUtils.isNotEmpty(d.getSystemPath())) {        addViolation(problems, Severity.ERROR, Version.BASE, prefix + "systemPath", d.getManagementKey(), "must be omitted." + " This field may only be specified for a dependency with system scope.", d);    }    if (request.getValidationLevel() >= ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {        for (Exclusion exclusion : d.getExclusions()) {            if (request.getValidationLevel() < ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0) {                validateId(prefix, "exclusions.exclusion.groupId", problems, Severity.WARNING, Version.V20, exclusion.getGroupId(), d.getManagementKey(), exclusion);                validateId(prefix, "exclusions.exclusion.artifactId", problems, Severity.WARNING, Version.V20, exclusion.getArtifactId(), d.getManagementKey(), exclusion);            } else {                validateIdWithWildcards(prefix, "exclusions.exclusion.groupId", problems, Severity.WARNING, Version.V30, exclusion.getGroupId(), d.getManagementKey(), exclusion);                validateIdWithWildcards(prefix, "exclusions.exclusion.artifactId", problems, Severity.WARNING, Version.V30, exclusion.getArtifactId(), d.getManagementKey(), exclusion);            }        }    }}
94deec034a72259154bc71f91211c3dd3874212f31a1f6be0623ece888dcf89f
validateDependencyVersion
protected void validateDependencyVersion(ModelProblemCollector problems, Dependency d, String prefix)
{    validateStringNotEmpty(prefix, "version", problems, Severity.ERROR, Version.BASE, d.getVersion(), d.getManagementKey(), d);}
9b7a6dfad7458a83265fdf7af7de041e3d15ddecfd138d6f80b6b8e0b5b20456
validateRawRepositories
private void validateRawRepositories(ModelProblemCollector problems, List<Repository> repositories, String prefix, String prefix2, ModelBuildingRequest request)
{    Map<String, Repository> index = new HashMap<>();    for (Repository repository : repositories) {        validateStringNotEmpty(prefix, prefix2, "id", problems, Severity.ERROR, Version.V20, repository.getId(), null, repository);        validateStringNotEmpty(prefix, prefix2, "[" + repository.getId() + "].url", problems, Severity.ERROR, Version.V20, repository.getUrl(), null, repository);        String key = repository.getId();        Repository existing = index.get(key);        if (existing != null) {            Severity errOn30 = getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);            addViolation(problems, errOn30, Version.V20, prefix + prefix2 + "id", null, "must be unique: " + repository.getId() + " -> " + existing.getUrl() + " vs " + repository.getUrl(), repository);        } else {            index.put(key, repository);        }    }}
0b44f5f1ad4ec56d19cc5c6732b95485db1e42a5bfd1874b18f4ee9d366d1a9a
validate20EffectiveRepository
private void validate20EffectiveRepository(ModelProblemCollector problems, Repository repository, String prefix, ModelBuildingRequest request)
{    if (repository != null) {        Severity errOn31 = getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1);        validateBannedCharacters(prefix, "id", problems, errOn31, Version.V20, repository.getId(), null, repository, ILLEGAL_REPO_ID_CHARS);        if ("local".equals(repository.getId())) {            addViolation(problems, errOn31, Version.V20, prefix + "id", null, "must not be 'local'" + ", this identifier is reserved for the local repository" + ", using it for other repositories will corrupt your repository metadata.", repository);        }        if ("legacy".equals(repository.getLayout())) {            addViolation(problems, Severity.WARNING, Version.V20, prefix + "layout", repository.getId(), "uses the unsupported value 'legacy', artifact resolution might fail.", repository);        }    }}
e751bfbeeabd0913e4b5417219e2850f525347cbf1db36813a5bf798572169ed
validate20RawResources
private void validate20RawResources(ModelProblemCollector problems, List<Resource> resources, String prefix, ModelBuildingRequest request)
{    Severity errOn30 = getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);    for (Resource resource : resources) {        validateStringNotEmpty(prefix, "directory", problems, Severity.ERROR, Version.V20, resource.getDirectory(), null, resource);        validateBoolean(prefix, "filtering", problems, errOn30, Version.V20, resource.getFiltering(), resource.getDirectory(), resource);    }}
ac148392914b6f3276a14df1ebf9bb6ef1972af632a3fd9115475504d5a32c76
validateId
private boolean validateId(String fieldName, ModelProblemCollector problems, String id, InputLocationTracker tracker)
{    return validateId(EMPTY, fieldName, problems, Severity.ERROR, Version.BASE, id, null, tracker);}
c3d01c83ea81289adff5bfed351a81d2194e618e1433d54c22e85a3c707cd38d
validateId
private boolean validateId(String prefix, String fieldName, ModelProblemCollector problems, Severity severity, Version version, String id, String sourceHint, InputLocationTracker tracker)
{    if (validIds.contains(id)) {        return true;    }    if (!validateStringNotEmpty(prefix, fieldName, problems, severity, version, id, sourceHint, tracker)) {        return false;    } else {        if (!isValidId(id)) {            addViolation(problems, severity, version, prefix + fieldName, sourceHint, "with value '" + id + "' does not match a valid id pattern.", tracker);            return false;        }        validIds.add(id);        return true;    }}
b28ed7a13a8c9282c81169ef31a36d64fbc328d5bddf69323f3fefd71ed973de
isValidId
private boolean isValidId(String id)
{    for (int i = 0; i < id.length(); i++) {        char c = id.charAt(i);        if (!isValidIdCharacter(c)) {            return false;        }    }    return true;}
55ff6cdc324886ce3f4c42423d743b32f9affe0ecdcc77d5275662aa11fb8031
isValidIdCharacter
private boolean isValidIdCharacter(char c)
{    return c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c >= '0' && c <= '9' || c == '-' || c == '_' || c == '.';}
c18a06166a2f4aafe2b64360017cc2c9ef90f99ba4bdcbac65dd6e0df20ab3c4
validateIdWithWildcards
private boolean validateIdWithWildcards(String prefix, String fieldName, ModelProblemCollector problems, Severity severity, Version version, String id, String sourceHint, InputLocationTracker tracker)
{    if (!validateStringNotEmpty(prefix, fieldName, problems, severity, version, id, sourceHint, tracker)) {        return false;    } else {        if (!isValidIdWithWildCards(id)) {            addViolation(problems, severity, version, prefix + fieldName, sourceHint, "with value '" + id + "' does not match a valid id pattern.", tracker);            return false;        }        return true;    }}
18aa67717b553400fff291ecf07a50d3afa2d4c9d7166d0c68b13e629e120113
isValidIdWithWildCards
private boolean isValidIdWithWildCards(String id)
{    for (int i = 0; i < id.length(); i++) {        char c = id.charAt(i);        if (!isValidIdWithWildCardCharacter(c)) {            return false;        }    }    return true;}
cc69e0311dabbc8471e0450ec20c56697b8081c4b5dc7073d3483c01b2f6364e
isValidIdWithWildCardCharacter
private boolean isValidIdWithWildCardCharacter(char c)
{    return isValidIdCharacter(c) || c == '?' || c == '*';}
05424dcd383a2765b08f24c0b78aa7622528ff0c2aa03947856a05b762c1282e
validateStringNoExpression
private boolean validateStringNoExpression(String fieldName, ModelProblemCollector problems, Severity severity, Version version, String string, InputLocationTracker tracker)
{    if (!hasExpression(string)) {        return true;    }    addViolation(problems, severity, version, fieldName, null, "contains an expression but should be a constant.", tracker);    return false;}
f57bb9d3a5576e857201617071e58f5e781ed82cac134cf2284f90a214141e1d
validateVersionNoExpression
private boolean validateVersionNoExpression(String fieldName, ModelProblemCollector problems, Severity severity, Version version, String string, InputLocationTracker tracker)
{    if (!hasExpression(string)) {        return true;    }                                Matcher m = CI_FRIENDLY_EXPRESSION.matcher(string.trim());    while (m.find()) {        if (!CI_FRIENDLY_POSSIBLE_PROPERTY_NAMES.contains(m.group(1))) {            addViolation(problems, severity, version, fieldName, null, "contains an expression but should be a constant.", tracker);            return false;        }    }    return true;}
21a326e7bb5f0b34164020ae4050ffbdfa22fcd7fdc0c2d740fc7c325b15a525
hasExpression
private boolean hasExpression(String value)
{    return value != null && value.contains("${");}
18c1b9c381694b651cdb473b3d835be98c115b71ccbca239a204a522c8ded3ab
hasProjectExpression
private boolean hasProjectExpression(String value)
{    return value != null && value.contains("${project.");}
659eaa593d093d82a5843f90f0e2620976be2b221c28edce152d64dbba3605e3
validateStringNotEmpty
private boolean validateStringNotEmpty(String fieldName, ModelProblemCollector problems, Severity severity, Version version, String string, InputLocationTracker tracker)
{    return validateStringNotEmpty(EMPTY, fieldName, problems, severity, version, string, null, tracker);}
5afba6d4d28126bf466f3bed3bde7c857ba42b4b8199c0c4f2af47331b0c2b1a
validateStringNotEmpty
private boolean validateStringNotEmpty(String prefix, String prefix2, String fieldName, ModelProblemCollector problems, Severity severity, Version version, String string, String sourceHint, InputLocationTracker tracker)
{    if (!validateNotNull(prefix, prefix2, fieldName, problems, severity, version, string, sourceHint, tracker)) {        return false;    }    if (!string.isEmpty()) {        return true;    }    addViolation(problems, severity, version, prefix + prefix2 + fieldName, sourceHint, "is missing.", tracker);    return false;}
8bc3fdcb5afd5f00db477910e6718c86f942aaf374b758d9d25b14fefd2d040c
validateStringNotEmpty
private boolean validateStringNotEmpty(String prefix, String fieldName, ModelProblemCollector problems, Severity severity, Version version, String string, String sourceHint, InputLocationTracker tracker)
{    if (!validateNotNull(prefix, fieldName, problems, severity, version, string, sourceHint, tracker)) {        return false;    }    if (string.length() > 0) {        return true;    }    addViolation(problems, severity, version, prefix + fieldName, sourceHint, "is missing.", tracker);    return false;}
0fea813d6d40853672132ff1c95234645714a33aeb72ace48658af69ebbe245e
validateNotNull
private boolean validateNotNull(String prefix, String fieldName, ModelProblemCollector problems, Severity severity, Version version, Object object, String sourceHint, InputLocationTracker tracker)
{    if (object != null) {        return true;    }    addViolation(problems, severity, version, prefix + fieldName, sourceHint, "is missing.", tracker);    return false;}
9c70240a9b3c0f1f375fa9b4bdad38c832256a6369cdf6a1d98e8891edc5ef96
validateNotNull
private boolean validateNotNull(String prefix, String prefix2, String fieldName, ModelProblemCollector problems, Severity severity, Version version, Object object, String sourceHint, InputLocationTracker tracker)
{    if (object != null) {        return true;    }    addViolation(problems, severity, version, prefix + prefix2 + fieldName, sourceHint, "is missing.", tracker);    return false;}
e442342de13c5b00466f1399d0ed478c49a71dbe5217eb1dc4ddfa13ccd83eaa
validateBoolean
private boolean validateBoolean(String prefix, String fieldName, ModelProblemCollector problems, Severity severity, Version version, String string, String sourceHint, InputLocationTracker tracker)
{    if (string == null || string.length() <= 0) {        return true;    }    if ("true".equalsIgnoreCase(string) || "false".equalsIgnoreCase(string)) {        return true;    }    addViolation(problems, severity, version, prefix + fieldName, sourceHint, "must be 'true' or 'false' but is '" + string + "'.", tracker);    return false;}
9040e8ec4158e50bad2b09511978097e8325049ba83684a9517a95865f8b2843
validateEnum
private boolean validateEnum(String prefix, String fieldName, ModelProblemCollector problems, Severity severity, Version version, String string, String sourceHint, InputLocationTracker tracker, String... validValues)
{    if (string == null || string.length() <= 0) {        return true;    }    List<String> values = Arrays.asList(validValues);    if (values.contains(string)) {        return true;    }    addViolation(problems, severity, version, prefix + fieldName, sourceHint, "must be one of " + values + " but is '" + string + "'.", tracker);    return false;}
5392b4852f7f2800b3dc68d32b0f616560a96378e6562f22c30129b90e09d18f
validateModelVersion
private boolean validateModelVersion(ModelProblemCollector problems, String string, InputLocationTracker tracker, String... validVersions)
{    if (string == null || string.length() <= 0) {        return true;    }    List<String> values = Arrays.asList(validVersions);    if (values.contains(string)) {        return true;    }    boolean newerThanAll = true;    boolean olderThanAll = true;    for (String validValue : validVersions) {        final int comparison = compareModelVersions(validValue, string);        newerThanAll = newerThanAll && comparison < 0;        olderThanAll = olderThanAll && comparison > 0;    }    if (newerThanAll) {        addViolation(problems, Severity.FATAL, Version.V20, "modelVersion", null, "of '" + string + "' is newer than the versions supported by this version of Maven: " + values + ". Building this project requires a newer version of Maven.", tracker);    } else if (olderThanAll) {                addViolation(problems, Severity.FATAL, Version.V20, "modelVersion", null, "of '" + string + "' is older than the versions supported by this version of Maven: " + values + ". Building this project requires an older version of Maven.", tracker);    } else {        addViolation(problems, Severity.ERROR, Version.V20, "modelVersion", null, "must be one of " + values + " but is '" + string + "'.", tracker);    }    return false;}
7181638b98bc98cbcbef0b451e68c8fe55a2d3949eefb1487b15f4f2bb115622
compareModelVersions
private static int compareModelVersions(String first, String second)
{        String[] firstSegments = StringUtils.split(first, ".");    String[] secondSegments = StringUtils.split(second, ".");    for (int i = 0; i < Math.min(firstSegments.length, secondSegments.length); i++) {        int result = Long.valueOf(firstSegments[i]).compareTo(Long.valueOf(secondSegments[i]));        if (result != 0) {            return result;        }    }    if (firstSegments.length == secondSegments.length) {        return 0;    }    return firstSegments.length > secondSegments.length ? -1 : 1;}
80c322599483ac999f49222c6ff5dd4b9d152a10c23e49a87fb8a3bd1d5f0d17
validateBannedCharacters
private boolean validateBannedCharacters(String prefix, String fieldName, ModelProblemCollector problems, Severity severity, Version version, String string, String sourceHint, InputLocationTracker tracker, String banned)
{    if (string != null) {        for (int i = string.length() - 1; i >= 0; i--) {            if (banned.indexOf(string.charAt(i)) >= 0) {                addViolation(problems, severity, version, prefix + fieldName, sourceHint, "must not contain any of these characters " + banned + " but found " + string.charAt(i), tracker);                return false;            }        }    }    return true;}
9f26a54e54df33a11046f7adef1b0743bd4681db738d6226c495f2c7b0cefb64
validateVersion
private boolean validateVersion(String prefix, String fieldName, ModelProblemCollector problems, Severity severity, Version version, String string, String sourceHint, InputLocationTracker tracker)
{    if (string == null || string.length() <= 0) {        return true;    }    if (hasExpression(string)) {        addViolation(problems, severity, version, prefix + fieldName, sourceHint, "must be a valid version but is '" + string + "'.", tracker);        return false;    }    return validateBannedCharacters(prefix, fieldName, problems, severity, version, string, sourceHint, tracker, ILLEGAL_VERSION_CHARS);}
7a0d2be57609778a30c2d79b967a3af653ddd35b2a4f36f9192d10b544d035de
validate20ProperSnapshotVersion
private boolean validate20ProperSnapshotVersion(String fieldName, ModelProblemCollector problems, Severity severity, Version version, String string, String sourceHint, InputLocationTracker tracker)
{    if (string == null || string.length() <= 0) {        return true;    }    if (string.endsWith("SNAPSHOT") && !string.endsWith("-SNAPSHOT")) {        addViolation(problems, severity, version, fieldName, sourceHint, "uses an unsupported snapshot version format, should be '*-SNAPSHOT' instead.", tracker);        return false;    }    return true;}
66d7ec028068bcc908031b2edf0923118e21715f66eb8753ebe6fac9f994e3eb
validate20PluginVersion
private boolean validate20PluginVersion(String fieldName, ModelProblemCollector problems, String string, String sourceHint, InputLocationTracker tracker, ModelBuildingRequest request)
{    if (string == null) {                return true;    }    Severity errOn30 = getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);    if (!validateVersion(EMPTY, fieldName, problems, errOn30, Version.V20, string, sourceHint, tracker)) {        return false;    }    if (string.length() <= 0 || "RELEASE".equals(string) || "LATEST".equals(string)) {        addViolation(problems, errOn30, Version.V20, fieldName, sourceHint, "must be a valid version but is '" + string + "'.", tracker);        return false;    }    return true;}
0af0e310f3316ca3b793b894e70acb23de7f5c725ee3a5ad1cc4e738917bd958
addViolation
private static void addViolation(ModelProblemCollector problems, Severity severity, Version version, String fieldName, String sourceHint, String message, InputLocationTracker tracker)
{    StringBuilder buffer = new StringBuilder(256);    buffer.append('\'').append(fieldName).append('\'');    if (sourceHint != null) {        buffer.append(" for ").append(sourceHint);    }    buffer.append(' ').append(message);        problems.add(new ModelProblemCollectorRequest(severity, version).setMessage(buffer.toString()).setLocation(getLocation(fieldName, tracker)));}
33da38d7325147f1f8032825be09f2c0722689393ed2a3ff45c3304bfcd7e644
getLocation
private static InputLocation getLocation(String fieldName, InputLocationTracker tracker)
{    InputLocation location = null;    if (tracker != null) {        if (fieldName != null) {            Object key = fieldName;            int idx = fieldName.lastIndexOf('.');            if (idx >= 0) {                fieldName = fieldName.substring(idx + 1);                key = fieldName;            }            if (fieldName.endsWith("]")) {                key = fieldName.substring(fieldName.lastIndexOf('[') + 1, fieldName.length() - 1);                try {                    key = Integer.valueOf(key.toString());                } catch (NumberFormatException e) {                                }            }            location = tracker.getLocation(key);        }        if (location == null) {            location = tracker.getLocation(EMPTY);        }    }    return location;}
6a3839e49976fad6df4146becd0d095c4b39704ab9b960189757e601e9672ce2
equals
private static boolean equals(String s1, String s2)
{    return StringUtils.clean(s1).equals(StringUtils.clean(s2));}
f96c49aefe5d5a485daa14416882132cf1e0802571d54c4b41bf4a0cc3fa9c9f
getSeverity
private static Severity getSeverity(ModelBuildingRequest request, int errorThreshold)
{    return getSeverity(request.getValidationLevel(), errorThreshold);}
49d59d06bb49245b82239e600c9571991649e68e1c74de511ce03faebb2d4f7b
getSeverity
private static Severity getSeverity(int validationLevel, int errorThreshold)
{    if (validationLevel < errorThreshold) {        return Severity.WARNING;    } else {        return Severity.ERROR;    }}
9fdd3437a14cd0bba6a4ae5d4ec1c74b9381354dfc7a0d5ba5b6a63c2e3713cd
getPom
private File getPom(String name)
{    return new File("src/test/resources/poms/factory/" + name + ".xml").getAbsoluteFile();}
2043e9539f6762ebd1b0198f033bd04b355808d513cf3ba0bd71088c7d693626
testAndConditionInActivation
public void testAndConditionInActivation() throws Exception
{    Properties sysProperties = new Properties();    sysProperties.setProperty("myproperty", "test");    ModelBuilder builder = new DefaultModelBuilderFactory().newInstance();    assertNotNull(builder);    DefaultModelBuildingRequest request = new DefaultModelBuildingRequest();    request.setProcessPlugins(true);    request.setPomFile(getPom("complex"));    request.setSystemProperties(sysProperties);    ModelBuildingResult result = builder.build(request);    assertNotNull(result);    assertNotNull(result.getEffectiveModel());    assertEquals("activated-1", result.getEffectiveModel().getProperties().get("profile.file"));    assertNull(result.getEffectiveModel().getProperties().get("profile.miss"));}
9fdd3437a14cd0bba6a4ae5d4ec1c74b9381354dfc7a0d5ba5b6a63c2e3713cd
getPom
private File getPom(String name)
{    return new File("src/test/resources/poms/factory/" + name + ".xml").getAbsoluteFile();}
90b1d307123f816943e9e678ffebb3aca3e0152557eb2d13133f6d27a91ba538
testCompleteWiring
public void testCompleteWiring() throws Exception
{    ModelBuilder builder = new DefaultModelBuilderFactory().newInstance();    assertNotNull(builder);    DefaultModelBuildingRequest request = new DefaultModelBuildingRequest();    request.setProcessPlugins(true);    request.setPomFile(getPom("simple"));    ModelBuildingResult result = builder.build(request);    assertNotNull(result);    assertNotNull(result.getEffectiveModel());    assertEquals("activated", result.getEffectiveModel().getProperties().get("profile.file"));    Xpp3Dom conf = (Xpp3Dom) result.getEffectiveModel().getBuild().getPlugins().get(0).getConfiguration();    assertEquals("1.5", conf.getChild("source").getValue());    assertEquals("  1.5  ", conf.getChild("target").getValue());}
6acab1cbc363bd5786c0e810770b8201a2a7595dfc2f8a2c79737ae284c4147b
testEquals
public void testEquals() throws Exception
{    File tempFile = createTempFile("pomTest");    FileModelSource instance = new FileModelSource(tempFile);    assertFalse(instance.equals(null));    assertFalse(instance.equals(new Object()));    assertTrue(instance.equals(instance));    assertTrue(instance.equals(new FileModelSource(tempFile)));}
48f414468c3cfa329f4a3b7e7c395a8013db448d8fbe9ecd1aa30a6d055eabf0
testWindowsPaths
public void testWindowsPaths() throws Exception
{    assumeTrue(SystemUtils.IS_OS_WINDOWS);    File upperCaseFile = createTempFile("TESTE");    String absolutePath = upperCaseFile.getAbsolutePath();    File lowerCaseFile = new File(absolutePath.toLowerCase());    FileModelSource upperCaseFileSouce = new FileModelSource(upperCaseFile);    FileModelSource lowerCaseFileSouce = new FileModelSource(lowerCaseFile);    assertTrue(upperCaseFileSouce.equals(lowerCaseFileSouce));}
51df26d4191996d717ef35afa83ec27908a5ea99c8bd8655c9c0520fe9cd9863
createTempFile
private File createTempFile(String name) throws IOException
{    File tempFile = File.createTempFile(name, ".xml");    tempFile.deleteOnExit();    return tempFile;}
f938998a08eadbdbb54a4592f85c356494c5fd4a09480ef41473d448461d6a49
getModel
public Model getModel()
{    return model;}
6179609fd3583157b629017ca7b19ccd0e3fa71016df70d073b8236319d4346c
getWarnings
public List<String> getWarnings()
{    return warnings;}
e888a6d64706b06e73757b74290a24277ec021ca4f15afb86c901c4d707d444e
getErrors
public List<String> getErrors()
{    return errors;}
b17ac2d85db3cdbf802b09b8d39304554d21ff41b61464b66f093a81e2609d2b
getFatals
public List<String> getFatals()
{    return fatals;}
db24eb665ffaac0d3626cacc0bf9a02aa9918f27efe6dce02ae97c60cd1bc733
add
public void add(ModelProblemCollectorRequest req)
{    switch(req.getSeverity()) {        case FATAL:            fatals.add(req.getMessage());            break;        case ERROR:            errors.add(req.getMessage());            break;        case WARNING:            warnings.add(req.getMessage());            break;    }}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();    reader = new DefaultModelReader();    writer = new DefaultModelWriter();    assembler = new DefaultInheritanceAssembler();}
9fdd3437a14cd0bba6a4ae5d4ec1c74b9381354dfc7a0d5ba5b6a63c2e3713cd
getPom
private File getPom(String name)
{    return new File("src/test/resources/poms/inheritance/" + name + ".xml");}
335f202a9ce64f23d5d072b553d0ce5c603e54fc1daa81942ed5d938456713f1
getModel
private Model getModel(String name) throws IOException
{    return reader.read(getPom(name), null);}
df40de428ad291710d36ec3168e0f513978cd82d2454645897ba5cbee32f7ab8
testPluginConfiguration
public void testPluginConfiguration() throws Exception
{    testInheritance("plugin-configuration");}
a349513c35d838222d009facb52e747e7e45976ae5521744bb4f90b4bd4fd5d1
testUrls
public void testUrls() throws Exception
{    testInheritance("urls");}
5681193c14ef88fbce63e868e0f505adc7cb31edcb6d51cf3c2ddf240349fe8e
testFlatUrls
public void testFlatUrls() throws IOException
{    testInheritance("flat-urls");}
2fe89dee076ec9afda1c5c043412417859c73bf9f92fee746f9a88509f652159
testNoAppendUrls
public void testNoAppendUrls() throws Exception
{    testInheritance("no-append-urls");}
b265f4d45103845768cbd285c2833780d6b8932bcdd1a8b620f9ddd7db14e715
testNoAppendUrls2
public void testNoAppendUrls2() throws Exception
{    testInheritance("no-append-urls2");}
7894a4b103bf0c26e46b302ec71f078d537a65f65bb892118d9626ad8aebd4d4
testNoAppendUrls3
public void testNoAppendUrls3() throws Exception
{    testInheritance("no-append-urls3");}
b189b105b0e8d66532a2743c41ffec9d57e1eca7f73f430be6ae141963ca7bec
testFlatTrickyUrls
public void testFlatTrickyUrls() throws IOException
{        try {                testInheritance("tricky-flat-artifactId-urls", false);        } catch (AssertionError afe) {                assertTrue(afe.getMessage(), afe.getMessage().contains("Expected text value 'http://www.apache.org/path/to/parent/child-artifact-id/' but was " + "'http://www.apache.org/path/to/parent/../child-artifact-id/'"));    }        testInheritance("tricky-flat-artifactId-urls", true);            testInheritance("tricky-flat-directory-urls", false);    try {        testInheritance("tricky-flat-directory-urls", true);        fail("should have failed since module reference == directory name != artifactId");    } catch (AssertionError afe) {                assertTrue(afe.getMessage(), afe.getMessage().contains("Expected text value 'http://www.apache.org/path/to/parent/../child-artifact-id/' but was " + "'http://www.apache.org/path/to/parent/child-artifact-id/'"));    }}
34e50516d58f5b8909e57551654dd72ea5457c831af53ccdafcce8f9cbec4a9f
testWithEmptyUrl
public void testWithEmptyUrl() throws IOException
{    testInheritance("empty-urls", false);}
8c516e5fb35e744b11fbd92767460ac61de4eb433cad41b8607db2ea99d546d6
testInheritance
public void testInheritance(String baseName) throws IOException
{    testInheritance(baseName, false);    testInheritance(baseName, true);}
8ff922c702fbef892b0cd4dee284b8aa9aa4517eceedb16214a108803c603519
testInheritance
public void testInheritance(String baseName, boolean fromRepo) throws IOException
{    Model parent = getModel(baseName + "-parent");    Model child = getModel(baseName + "-child");    if (fromRepo) {                        parent.setPomFile(null);        child.setPomFile(null);    }    SimpleProblemCollector problems = new SimpleProblemCollector();    assembler.assembleModelInheritance(child, parent, null, problems);        File actual = new File("target/test-classes/poms/inheritance/" + baseName + (fromRepo ? "-build" : "-repo") + "-actual.xml");    writer.write(actual, null, child);        File expected = getPom(baseName + "-expected");    assertThat(actual, CompareMatcher.isIdenticalTo(expected).ignoreComments().ignoreWhitespace());}
aed54aea762a16a75af6abadc786eceed470bba114140d11443ebcd120ce1edb
testModulePathNotArtifactId
public void testModulePathNotArtifactId() throws IOException
{    Model parent = getModel("module-path-not-artifactId-parent");    Model child = getModel("module-path-not-artifactId-child");    SimpleProblemCollector problems = new SimpleProblemCollector();    assembler.assembleModelInheritance(child, parent, null, problems);    File actual = new File("target/test-classes/poms/inheritance/module-path-not-artifactId-actual.xml");    writer.write(actual, null, child);        File expected = getPom("module-path-not-artifactId-expected");    assertThat(actual, CompareMatcher.isIdenticalTo(expected).ignoreComments().ignoreWhitespace());}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();    context = new Properties();    context.put("basedir", "myBasedir");    context.put("project.baseUri", "myBaseUri");}
6e018006118787f0aada615b17bda50d301b36d20d650ef2eaba063d54b0db59
assertProblemFree
protected void assertProblemFree(SimpleProblemCollector collector)
{    assertEquals("Expected no errors", 0, collector.getErrors().size());    assertEquals("Expected no warnings", 0, collector.getWarnings().size());    assertEquals("Expected no fatals", 0, collector.getFatals().size());}
70c861b4e0f173f731f25dd3623755f5986eaea6aa7f61b1c26c481040105c03
assertColllectorState
protected void assertColllectorState(int numFatals, int numErrors, int numWarnings, SimpleProblemCollector collector)
{    assertEquals("Errors", numErrors, collector.getErrors().size());    assertEquals("Warnings", numWarnings, collector.getWarnings().size());    assertEquals("Fatals", numFatals, collector.getFatals().size());}
56c0f1421ada69231ff788f360dafd77ffb5113c19d2ce518557322da90124dc
assertCollectorState
protected void assertCollectorState(int numFatals, int numErrors, int numWarnings, SimpleProblemCollector collector)
{    assertColllectorState(numFatals, numErrors, numWarnings, collector);}
77da65b336aa0687c3394059b2a4649d8a7f314d47097ae254a85172ba0379ac
createModelBuildingRequest
private ModelBuildingRequest createModelBuildingRequest(Properties p)
{    ModelBuildingRequest config = new DefaultModelBuildingRequest();    if (p != null) {        config.setSystemProperties(p);    }    return config;}
6704634b503dffbac50faad779e99c130eaaad0aa60022bfaa8918433773482d
testDefaultBuildTimestampFormatShouldFormatTimeIn24HourFormat
public void testDefaultBuildTimestampFormatShouldFormatTimeIn24HourFormat()
{    Calendar cal = Calendar.getInstance();    cal.setTimeZone(MavenBuildTimestamp.DEFAULT_BUILD_TIME_ZONE);    cal.set(Calendar.HOUR, 12);    cal.set(Calendar.AM_PM, Calendar.AM);        cal.set(Calendar.HOUR_OF_DAY, 0);    cal.set(Calendar.MINUTE, 16);    cal.set(Calendar.SECOND, 0);    cal.set(Calendar.YEAR, 1976);    cal.set(Calendar.MONTH, Calendar.NOVEMBER);    cal.set(Calendar.DATE, 11);    Date firstTestDate = cal.getTime();    cal.set(Calendar.HOUR, 11);    cal.set(Calendar.AM_PM, Calendar.PM);        cal.set(Calendar.HOUR_OF_DAY, 23);    Date secondTestDate = cal.getTime();    SimpleDateFormat format = new SimpleDateFormat(MavenBuildTimestamp.DEFAULT_BUILD_TIMESTAMP_FORMAT);    format.setTimeZone(MavenBuildTimestamp.DEFAULT_BUILD_TIME_ZONE);    assertEquals("1976-11-11T00:16:00Z", format.format(firstTestDate));    assertEquals("1976-11-11T23:16:00Z", format.format(secondTestDate));}
19ff545462a6ad2ab091c089c3716eb690fe7589e598e21b53e685fd5f50017c
testDefaultBuildTimestampFormatWithLocalTimeZoneMidnightRollover
public void testDefaultBuildTimestampFormatWithLocalTimeZoneMidnightRollover()
{    Calendar cal = Calendar.getInstance();    cal.setTimeZone(TimeZone.getTimeZone("Europe/Berlin"));    cal.set(Calendar.HOUR_OF_DAY, 1);    cal.set(Calendar.MINUTE, 16);    cal.set(Calendar.SECOND, 0);    cal.set(Calendar.YEAR, 2014);    cal.set(Calendar.MONTH, Calendar.JUNE);    cal.set(Calendar.DATE, 16);    Date firstTestDate = cal.getTime();    cal.set(Calendar.MONTH, Calendar.NOVEMBER);    Date secondTestDate = cal.getTime();    SimpleDateFormat format = new SimpleDateFormat(MavenBuildTimestamp.DEFAULT_BUILD_TIMESTAMP_FORMAT);    format.setTimeZone(MavenBuildTimestamp.DEFAULT_BUILD_TIME_ZONE);    assertEquals("2014-06-15T23:16:00Z", format.format(firstTestDate));    assertEquals("2014-11-16T00:16:00Z", format.format(secondTestDate));}
d34c75d8d19c177036cc08c354112ff95697d937a5bf9b49c104d972ecf927d1
testShouldNotThrowExceptionOnReferenceToNonExistentValue
public void testShouldNotThrowExceptionOnReferenceToNonExistentValue() throws Exception
{    Model model = new Model();    Scm scm = new Scm();    scm.setConnection("${test}/somepath");    model.setScm(scm);    ModelInterpolator interpolator = createInterpolator();    final SimpleProblemCollector collector = new SimpleProblemCollector();    Model out = interpolator.interpolateModel(model, new File("."), createModelBuildingRequest(context), collector);    assertProblemFree(collector);    assertEquals("${test}/somepath", out.getScm().getConnection());}
d669d351b669824c22ba6bcb62cb62fe4acf6d81b5a279bca90e320e4125c41e
testShouldThrowExceptionOnRecursiveScmConnectionReference
public void testShouldThrowExceptionOnRecursiveScmConnectionReference() throws Exception
{    Model model = new Model();    Scm scm = new Scm();    scm.setConnection("${project.scm.connection}/somepath");    model.setScm(scm);    try {        ModelInterpolator interpolator = createInterpolator();        final SimpleProblemCollector collector = new SimpleProblemCollector();        interpolator.interpolateModel(model, null, createModelBuildingRequest(context), collector);        assertCollectorState(0, 1, 0, collector);    } catch (Exception e) {    }}
e76f5ca6d88ab8dec1ee3cfc61098a23cb8341453e8101a346bf7d511994cf5a
testShouldNotThrowExceptionOnReferenceToValueContainingNakedExpression
public void testShouldNotThrowExceptionOnReferenceToValueContainingNakedExpression() throws Exception
{    Model model = new Model();    Scm scm = new Scm();    scm.setConnection("${test}/somepath");    model.setScm(scm);    model.addProperty("test", "test");    ModelInterpolator interpolator = createInterpolator();    final SimpleProblemCollector collector = new SimpleProblemCollector();    Model out = interpolator.interpolateModel(model, new File("."), createModelBuildingRequest(context), collector);    assertProblemFree(collector);    assertEquals("test/somepath", out.getScm().getConnection());}
87ed31003ac96b64c98f27b5f2d41a3cedea6d9879159485dd1a744675dbcb38
testShouldInterpolateOrganizationNameCorrectly
public void testShouldInterpolateOrganizationNameCorrectly() throws Exception
{    String orgName = "MyCo";    Model model = new Model();    model.setName("${pom.organization.name} Tools");    Organization org = new Organization();    org.setName(orgName);    model.setOrganization(org);    ModelInterpolator interpolator = createInterpolator();    Model out = interpolator.interpolateModel(model, new File("."), createModelBuildingRequest(context), new SimpleProblemCollector());    assertEquals(orgName + " Tools", out.getName());}
b904ec2bf78d2a1a3403c8ffc23f1e2e59f1955e91a5fcb9f328ff0ca91d47be
testShouldInterpolateDependencyVersionToSetSameAsProjectVersion
public void testShouldInterpolateDependencyVersionToSetSameAsProjectVersion() throws Exception
{    Model model = new Model();    model.setVersion("3.8.1");    Dependency dep = new Dependency();    dep.setVersion("${version}");    model.addDependency(dep);    ModelInterpolator interpolator = createInterpolator();    final SimpleProblemCollector collector = new SimpleProblemCollector();    Model out = interpolator.interpolateModel(model, new File("."), createModelBuildingRequest(context), collector);    assertCollectorState(0, 0, 1, collector);    assertEquals("3.8.1", (out.getDependencies().get(0)).getVersion());}
3f1950a9aa9b50113256c4c7594402bf3c24fec2865fb3978acad4d580cd1310
testShouldNotInterpolateDependencyVersionWithInvalidReference
public void testShouldNotInterpolateDependencyVersionWithInvalidReference() throws Exception
{    Model model = new Model();    model.setVersion("3.8.1");    Dependency dep = new Dependency();    dep.setVersion("${something}");    model.addDependency(dep);    /*                           try         {         new RegexBasedModelInterpolator().interpolate( model, context );         fail( "Should have failed to interpolate with invalid reference" );         }         catch ( ModelInterpolationException expected )         {         assertTrue( true );         }         */    ModelInterpolator interpolator = createInterpolator();    final SimpleProblemCollector collector = new SimpleProblemCollector();    Model out = interpolator.interpolateModel(model, new File("."), createModelBuildingRequest(context), collector);    assertProblemFree(collector);    assertEquals("${something}", (out.getDependencies().get(0)).getVersion());}
efd1ecc4be589c9be12c077c28f1ca9dadcbcce615dfdca25448dedfebaa667d
testTwoReferences
public void testTwoReferences() throws Exception
{    Model model = new Model();    model.setVersion("3.8.1");    model.setArtifactId("foo");    Dependency dep = new Dependency();    dep.setVersion("${artifactId}-${version}");    model.addDependency(dep);    ModelInterpolator interpolator = createInterpolator();    final SimpleProblemCollector collector = new SimpleProblemCollector();    Model out = interpolator.interpolateModel(model, new File("."), createModelBuildingRequest(context), collector);    assertCollectorState(0, 0, 2, collector);    assertEquals("foo-3.8.1", (out.getDependencies().get(0)).getVersion());}
5532ff39dad84b7c0dd386761c2eb8e5cc4de1f95cd6b0e03d2414ec02b837c5
testBasedir
public void testBasedir() throws Exception
{    Model model = new Model();    model.setVersion("3.8.1");    model.setArtifactId("foo");    Repository repository = new Repository();    repository.setUrl("file://localhost/${basedir}/temp-repo");    model.addRepository(repository);    ModelInterpolator interpolator = createInterpolator();    final SimpleProblemCollector collector = new SimpleProblemCollector();    Model out = interpolator.interpolateModel(model, null, createModelBuildingRequest(context), collector);    assertProblemFree(collector);    assertEquals("file://localhost/myBasedir/temp-repo", (out.getRepositories().get(0)).getUrl());}
7c5ddb6842b3574bfcac63903e70111e2b1ea9a87da7b882ab8542233fa6e7ec
testBaseUri
public void testBaseUri() throws Exception
{    Model model = new Model();    model.setVersion("3.8.1");    model.setArtifactId("foo");    Repository repository = new Repository();    repository.setUrl("${project.baseUri}/temp-repo");    model.addRepository(repository);    ModelInterpolator interpolator = createInterpolator();    final SimpleProblemCollector collector = new SimpleProblemCollector();    Model out = interpolator.interpolateModel(model, null, createModelBuildingRequest(context), collector);    assertProblemFree(collector);    assertEquals("myBaseUri/temp-repo", (out.getRepositories().get(0)).getUrl());}
7ee1b000974ca8c022cd87f96b50d9543e5eb83b006cd632aa60878fd68f5f67
testEnvars
public void testEnvars() throws Exception
{    Properties context = new Properties();    context.put("env.HOME", "/path/to/home");    Model model = new Model();    Properties modelProperties = new Properties();    modelProperties.setProperty("outputDirectory", "${env.HOME}");    model.setProperties(modelProperties);    ModelInterpolator interpolator = createInterpolator();    final SimpleProblemCollector collector = new SimpleProblemCollector();    Model out = interpolator.interpolateModel(model, new File("."), createModelBuildingRequest(context), collector);    assertProblemFree(collector);    assertEquals("/path/to/home", out.getProperties().getProperty("outputDirectory"));}
a2efa40d2b6ee8481646ef19a472a1f9f8a49b0c2a2f1090a05f66eebb6f28a8
testEnvarExpressionThatEvaluatesToNullReturnsTheLiteralString
public void testEnvarExpressionThatEvaluatesToNullReturnsTheLiteralString() throws Exception
{    Model model = new Model();    Properties modelProperties = new Properties();    modelProperties.setProperty("outputDirectory", "${env.DOES_NOT_EXIST}");    model.setProperties(modelProperties);    ModelInterpolator interpolator = createInterpolator();    final SimpleProblemCollector collector = new SimpleProblemCollector();    Model out = interpolator.interpolateModel(model, new File("."), createModelBuildingRequest(context), collector);    assertProblemFree(collector);    assertEquals(out.getProperties().getProperty("outputDirectory"), "${env.DOES_NOT_EXIST}");}
ccfb0b794ef0de4bee80f98aecd6b90ba577f50bc8182ea878721697449588ac
testExpressionThatEvaluatesToNullReturnsTheLiteralString
public void testExpressionThatEvaluatesToNullReturnsTheLiteralString() throws Exception
{    Model model = new Model();    Properties modelProperties = new Properties();    modelProperties.setProperty("outputDirectory", "${DOES_NOT_EXIST}");    model.setProperties(modelProperties);    ModelInterpolator interpolator = createInterpolator();    final SimpleProblemCollector collector = new SimpleProblemCollector();    Model out = interpolator.interpolateModel(model, new File("."), createModelBuildingRequest(context), collector);    assertProblemFree(collector);    assertEquals(out.getProperties().getProperty("outputDirectory"), "${DOES_NOT_EXIST}");}
86f1dda8f71dc976b256344ca5660e6b76038a96269fa2e27516b94760cf8362
testShouldInterpolateSourceDirectoryReferencedFromResourceDirectoryCorrectly
public void testShouldInterpolateSourceDirectoryReferencedFromResourceDirectoryCorrectly() throws Exception
{    Model model = new Model();    Build build = new Build();    build.setSourceDirectory("correct");    Resource res = new Resource();    res.setDirectory("${project.build.sourceDirectory}");    build.addResource(res);    Resource res2 = new Resource();    res2.setDirectory("${pom.build.sourceDirectory}");    build.addResource(res2);    Resource res3 = new Resource();    res3.setDirectory("${build.sourceDirectory}");    build.addResource(res3);    model.setBuild(build);    ModelInterpolator interpolator = createInterpolator();    final SimpleProblemCollector collector = new SimpleProblemCollector();    Model out = interpolator.interpolateModel(model, null, createModelBuildingRequest(context), collector);    assertCollectorState(0, 0, 2, collector);    List<Resource> outResources = out.getBuild().getResources();    Iterator<Resource> resIt = outResources.iterator();    assertEquals(build.getSourceDirectory(), resIt.next().getDirectory());    assertEquals(build.getSourceDirectory(), resIt.next().getDirectory());    assertEquals(build.getSourceDirectory(), resIt.next().getDirectory());}
b191b8d992960a01aa346b0909ea135bbd9ca33f77d512674096946b15cd29f1
testShouldInterpolateUnprefixedBasedirExpression
public void testShouldInterpolateUnprefixedBasedirExpression() throws Exception
{    File basedir = new File("/test/path");    Model model = new Model();    Dependency dep = new Dependency();    dep.setSystemPath("${basedir}/artifact.jar");    model.addDependency(dep);    ModelInterpolator interpolator = createInterpolator();    final SimpleProblemCollector collector = new SimpleProblemCollector();    Model result = interpolator.interpolateModel(model, basedir, createModelBuildingRequest(context), collector);    assertProblemFree(collector);    List<Dependency> rDeps = result.getDependencies();    assertNotNull(rDeps);    assertEquals(1, rDeps.size());    assertEquals(new File(basedir, "artifact.jar").getAbsolutePath(), new File(rDeps.get(0).getSystemPath()).getAbsolutePath());}
ce316d45eaeeb3e204a9dcf02488cca5001028ec2239d52a549d59bb2818444e
testMavenBuildTimestampUsesUTC
public void testMavenBuildTimestampUsesUTC()
{    Properties interpolationProperties = new Properties();    interpolationProperties.setProperty("maven.build.timestamp.format", "yyyyMMdd'T'HHmm'Z'");    MavenBuildTimestamp timestamp = new MavenBuildTimestamp(new Date(), interpolationProperties);    String formattedTimestamp = timestamp.formattedTimestamp();    assertTrue("We expect the UTC marker at the end of the timestamp.", formattedTimestamp.endsWith("Z"));}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();    interpolator = new StringSearchModelInterpolator();}
de57b1ec5385e5505ac122dbd0207a0fc56e6ecd1177e17f343be0436cbea96f
createInterpolator
protected ModelInterpolator createInterpolator(org.apache.maven.model.path.PathTranslator translator) throws Exception
{    return this.interpolator;}
0bf4ad0e0c8133c8af4ee3546302be9c4647869a2c2b2c9c06577c061662f02e
createInterpolator
protected ModelInterpolator createInterpolator() throws Exception
{    return this.interpolator;}
13bb40732be1e248b431b0365c09c0da375c15f4d9a34d949f58c10c57ff5b34
testInterpolateStringArray
public void testInterpolateStringArray() throws Exception
{    Model model = new Model();    Properties p = new Properties();    p.setProperty("key", "value");    p.setProperty("key2", "value2");    String[] values = { "${key}", "${key2}" };    StringSearchModelInterpolator interpolator = (StringSearchModelInterpolator) createInterpolator();    ModelBuildingRequest config = createModelBuildingRequest(p);    final SimpleProblemCollector collector = new SimpleProblemCollector();    interpolator.interpolateObject(values, model, new File("."), config, collector);    assertProblemFree(collector);    assertEquals("value", values[0]);    assertEquals("value2", values[1]);}
77da65b336aa0687c3394059b2a4649d8a7f314d47097ae254a85172ba0379ac
createModelBuildingRequest
private ModelBuildingRequest createModelBuildingRequest(Properties p)
{    ModelBuildingRequest config = new DefaultModelBuildingRequest();    config.setSystemProperties(p);    return config;}
9ee6f03da6875721c26ca8c9b489a0fa718dcb77b6a166dada56fffe28003828
testInterpolateObjectWithStringArrayField
public void testInterpolateObjectWithStringArrayField() throws Exception
{    Model model = new Model();    Properties p = new Properties();    p.setProperty("key", "value");    p.setProperty("key2", "value2");    String[] values = { "${key}", "${key2}" };    ObjectWithStringArrayField obj = new ObjectWithStringArrayField(values);    StringSearchModelInterpolator interpolator = (StringSearchModelInterpolator) createInterpolator();    ModelBuildingRequest config = createModelBuildingRequest(p);    final SimpleProblemCollector collector = new SimpleProblemCollector();    interpolator.interpolateObject(obj, model, new File("."), config, collector);    assertProblemFree(collector);    assertEquals("value", obj.values[0]);    assertEquals("value2", obj.values[1]);}
ca0b906bb52eed065c3b54c8e4581b68912022c1c9e0469f4865f0d8c39a9e19
testInterpolateObjectWithStringListField
public void testInterpolateObjectWithStringListField() throws Exception
{    Model model = new Model();    Properties p = new Properties();    p.setProperty("key", "value");    p.setProperty("key2", "value2");    List<String> values = new ArrayList<>();    values.add("${key}");    values.add("${key2}");    ObjectWithListField obj = new ObjectWithListField(values);    StringSearchModelInterpolator interpolator = (StringSearchModelInterpolator) createInterpolator();    ModelBuildingRequest config = createModelBuildingRequest(p);    final SimpleProblemCollector collector = new SimpleProblemCollector();    interpolator.interpolateObject(obj, model, new File("."), config, collector);    assertProblemFree(collector);    assertEquals("value", obj.values.get(0));    assertEquals("value2", obj.values.get(1));}
954d14310d4e3cd6d705c490cef92d8fd9a8b3c2ec0ee1cd88dd064cf11c8eb5
testInterpolateObjectWithStringListFieldAndOneLiteralValue
public void testInterpolateObjectWithStringListFieldAndOneLiteralValue() throws Exception
{    Model model = new Model();    Properties p = new Properties();    p.setProperty("key", "value");    p.setProperty("key2", "value2");    List<String> values = new ArrayList<>();    values.add("key");    values.add("${key2}");    ObjectWithListField obj = new ObjectWithListField(values);    StringSearchModelInterpolator interpolator = (StringSearchModelInterpolator) createInterpolator();    ModelBuildingRequest config = createModelBuildingRequest(p);    final SimpleProblemCollector collector = new SimpleProblemCollector();    interpolator.interpolateObject(obj, model, new File("."), config, collector);    assertProblemFree(collector);    assertEquals("key", obj.values.get(0));    assertEquals("value2", obj.values.get(1));}
15cb038c0d257379af3dcd478c599e31a7dbc51c4b026c3fd36ca6a735d31cef
testInterpolateObjectWithUnmodifiableStringListField
public void testInterpolateObjectWithUnmodifiableStringListField() throws Exception
{    Model model = new Model();    Properties p = new Properties();    p.setProperty("key", "value");    p.setProperty("key2", "value2");    List<String> values = Collections.unmodifiableList(Collections.singletonList("${key}"));    ObjectWithListField obj = new ObjectWithListField(values);    StringSearchModelInterpolator interpolator = (StringSearchModelInterpolator) createInterpolator();    ModelBuildingRequest config = createModelBuildingRequest(p);    final SimpleProblemCollector collector = new SimpleProblemCollector();    interpolator.interpolateObject(obj, model, new File("."), config, collector);    assertProblemFree(collector);    assertEquals("${key}", obj.values.get(0));}
866fbeca2d0b8628753215af9e8aa2d2888c3013f801affed0b424e0cee599cf
testInterpolateObjectWithStringArrayListField
public void testInterpolateObjectWithStringArrayListField() throws Exception
{    Model model = new Model();    Properties p = new Properties();    p.setProperty("key", "value");    p.setProperty("key2", "value2");    p.setProperty("key3", "value3");    p.setProperty("key4", "value4");    List<String[]> values = new ArrayList<>();    values.add(new String[] { "${key}", "${key2}" });    values.add(new String[] { "${key3}", "${key4}" });    ObjectWithListField obj = new ObjectWithListField(values);    StringSearchModelInterpolator interpolator = (StringSearchModelInterpolator) createInterpolator();    ModelBuildingRequest config = createModelBuildingRequest(p);    final SimpleProblemCollector collector = new SimpleProblemCollector();    interpolator.interpolateObject(obj, model, new File("."), config, collector);    assertProblemFree(collector);    assertEquals("value", ((String[]) obj.values.get(0))[0]);    assertEquals("value2", ((String[]) obj.values.get(0))[1]);    assertEquals("value3", ((String[]) obj.values.get(1))[0]);    assertEquals("value4", ((String[]) obj.values.get(1))[1]);}
97ee92bff4c5cfefc8f3b30fea0c8d86d909a3fde399e01e3b11847d32e21c85
testInterpolateObjectWithStringToStringMapField
public void testInterpolateObjectWithStringToStringMapField() throws Exception
{    Model model = new Model();    Properties p = new Properties();    p.setProperty("key", "value");    p.setProperty("key2", "value2");    Map<String, String> values = new HashMap<>();    values.put("key", "${key}");    values.put("key2", "${key2}");    ObjectWithMapField obj = new ObjectWithMapField(values);    StringSearchModelInterpolator interpolator = (StringSearchModelInterpolator) createInterpolator();    ModelBuildingRequest config = createModelBuildingRequest(p);    final SimpleProblemCollector collector = new SimpleProblemCollector();    interpolator.interpolateObject(obj, model, new File("."), config, collector);    assertProblemFree(collector);    assertEquals("value", obj.values.get("key"));    assertEquals("value2", obj.values.get("key2"));}
83c753937e46ca5fd801dda6cd8caa9e7a3df7449f68bdac67fa2a08921178e8
testInterpolateObjectWithStringToStringMapFieldAndOneLiteralValue
public void testInterpolateObjectWithStringToStringMapFieldAndOneLiteralValue() throws Exception
{    Model model = new Model();    Properties p = new Properties();    p.setProperty("key", "value");    p.setProperty("key2", "value2");    Map<String, String> values = new HashMap<>();    values.put("key", "val");    values.put("key2", "${key2}");    ObjectWithMapField obj = new ObjectWithMapField(values);    StringSearchModelInterpolator interpolator = (StringSearchModelInterpolator) createInterpolator();    ModelBuildingRequest config = createModelBuildingRequest(p);    final SimpleProblemCollector collector = new SimpleProblemCollector();    interpolator.interpolateObject(obj, model, new File("."), config, collector);    assertProblemFree(collector);    assertEquals("val", obj.values.get("key"));    assertEquals("value2", obj.values.get("key2"));}
7384d9a69e53518eca8224f1dc07becc176c4f9073d96369499cad0b650fdb55
testInterpolateObjectWithUnmodifiableStringToStringMapField
public void testInterpolateObjectWithUnmodifiableStringToStringMapField() throws Exception
{    Model model = new Model();    Properties p = new Properties();    p.setProperty("key", "value");    p.setProperty("key2", "value2");    Map<String, String> values = Collections.unmodifiableMap(Collections.singletonMap("key", "${key}"));    ObjectWithMapField obj = new ObjectWithMapField(values);    StringSearchModelInterpolator interpolator = (StringSearchModelInterpolator) createInterpolator();    ModelBuildingRequest config = createModelBuildingRequest(p);    final SimpleProblemCollector collector = new SimpleProblemCollector();    interpolator.interpolateObject(obj, model, new File("."), config, collector);    assertProblemFree(collector);    assertEquals("${key}", obj.values.get("key"));}
8f99cfc12e677ce6396b86a03927bec628655f5ffd661d8c8788b268ed54230c
testInterpolateObjectWithStringToStringArrayMapField
public void testInterpolateObjectWithStringToStringArrayMapField() throws Exception
{    Model model = new Model();    Properties p = new Properties();    p.setProperty("key", "value");    p.setProperty("key2", "value2");    p.setProperty("key3", "value3");    p.setProperty("key4", "value4");    Map<String, String[]> values = new HashMap<>();    values.put("key", new String[] { "${key}", "${key2}" });    values.put("key2", new String[] { "${key3}", "${key4}" });    ObjectWithMapField obj = new ObjectWithMapField(values);    StringSearchModelInterpolator interpolator = (StringSearchModelInterpolator) createInterpolator();    ModelBuildingRequest config = createModelBuildingRequest(p);    final SimpleProblemCollector collector = new SimpleProblemCollector();    interpolator.interpolateObject(obj, model, new File("."), config, collector);    assertProblemFree(collector);    assertEquals("value", ((String[]) obj.values.get("key"))[0]);    assertEquals("value2", ((String[]) obj.values.get("key"))[1]);    assertEquals("value3", ((String[]) obj.values.get("key2"))[0]);    assertEquals("value4", ((String[]) obj.values.get("key2"))[1]);}
707f1006333dc8365029e79ef9425dbb5b9a7bfcf122d800ed65ece1dd16f640
testInterpolateObjectWithPomFile
public void testInterpolateObjectWithPomFile() throws Exception
{    Model model = new Model();    model.setPomFile(new File(System.getProperty("user.dir"), "pom.xml"));    File baseDir = model.getProjectDirectory();    Properties p = new Properties();    Map<String, String> values = new HashMap<>();    values.put("key", "${project.basedir}" + File.separator + "target");    ObjectWithMapField obj = new ObjectWithMapField(values);    StringSearchModelInterpolator interpolator = (StringSearchModelInterpolator) createInterpolator();    ModelBuildingRequest config = createModelBuildingRequest(p);    SimpleProblemCollector collector = new SimpleProblemCollector();    interpolator.interpolateObject(obj, model, new File("."), config, collector);    assertProblemFree(collector);    assertThat(baseDir.getCanonicalPath(), is(System.getProperty("user.dir")));    assertThat(obj.values.size(), is(1));    assertThat((String) obj.values.get("key"), is(anyOf(is(System.getProperty("user.dir") + File.separator + "target"),     is(System.getProperty("user.dir") + File.separator + '.' + File.separator + "target"))));}
50268bcf144bc00f41866f12f7816ece72ca9ca9b4bd32315a319d12eee5a591
testNotInterpolateObjectWithFile
public void testNotInterpolateObjectWithFile() throws Exception
{    Model model = new Model();    File baseDir = new File(System.getProperty("user.dir"));    Properties p = new Properties();    ObjectWithNotInterpolatedFile obj = new ObjectWithNotInterpolatedFile(baseDir);    StringSearchModelInterpolator interpolator = (StringSearchModelInterpolator) createInterpolator();    ModelBuildingRequest config = createModelBuildingRequest(p);    SimpleProblemCollector collector = new SimpleProblemCollector();    interpolator.interpolateObject(obj, model, new File("."), config, collector);    assertProblemFree(collector);        Map<Class<?>, ?> cache = (Map<Class<?>, ?>) getField(StringSearchModelInterpolator.class, "CACHED_ENTRIES").get(null);    Object objCacheItem = cache.get(Object.class);    Object fileCacheItem = cache.get(File.class);    assertNotNull(objCacheItem);    assertNotNull(fileCacheItem);    assertThat(((Object[]) getInternalState(objCacheItem, "fields")).length, is(0));    assertThat(((Object[]) getInternalState(fileCacheItem, "fields")).length, is(0));}
a2a121fddf9a603b9355fc8243f7b2e5abc4f1862f260b88a43bc9ca50fc1e23
testNotInterpolateFile
public void testNotInterpolateFile() throws Exception
{    Model model = new Model();    File baseDir = new File(System.getProperty("user.dir"));    Properties p = new Properties();    StringSearchModelInterpolator interpolator = (StringSearchModelInterpolator) createInterpolator();    ModelBuildingRequest config = createModelBuildingRequest(p);    SimpleProblemCollector collector = new SimpleProblemCollector();    interpolator.interpolateObject(baseDir, model, new File("."), config, collector);    assertProblemFree(collector);        Map<Class<?>, ?> cache = (Map<Class<?>, ?>) getField(StringSearchModelInterpolator.class, "CACHED_ENTRIES").get(null);    Object fileCacheItem = cache.get(File.class);    assertNotNull(fileCacheItem);    assertThat(((Object[]) getInternalState(fileCacheItem, "fields")).length, is(0));}
472eac2fc1c5ca81688e107d5da7452b9881a2b06d0037ed6e1c2083652c4ed5
testConcurrentInterpolation
public void testConcurrentInterpolation() throws Exception
{    final Model model = new Model();    final Properties p = new Properties();    p.setProperty("key", "value");    p.setProperty("key2", "value2");    p.setProperty("key3", "value3");    p.setProperty("key4", "value4");    p.setProperty("key5", "value5");    final StringSearchModelInterpolator interpolator = (StringSearchModelInterpolator) createInterpolator();    int numItems = 100;    final CountDownLatch countDownLatch = new CountDownLatch(1);    List<Future<SimpleProblemCollector>> futures = new ArrayList<>();    for (int i = 0; i < numItems; i++) {        Callable<SimpleProblemCollector> future = new Callable<SimpleProblemCollector>() {            public SimpleProblemCollector call() throws Exception {                final ObjectWithMixedProtection obj = getValueList();                final ModelBuildingRequest config = createModelBuildingRequest(p);                countDownLatch.await();                final SimpleProblemCollector collector = new SimpleProblemCollector();                interpolator.interpolateObject(obj, model, new File("."), config, collector);                return collector;            }        };        FutureTask<SimpleProblemCollector> task = new FutureTask<>(future);        futures.add(task);        new Thread(task).start();    }        countDownLatch.countDown();    for (Future<SimpleProblemCollector> result : futures) {                SimpleProblemCollector problemCollector = result.get();        assertProblemFree(problemCollector);    }}
e4bf7007fa8e732b7bc08556b9343275ff1b91ed2af8995d594cb908d3655795
call
public SimpleProblemCollector call() throws Exception
{    final ObjectWithMixedProtection obj = getValueList();    final ModelBuildingRequest config = createModelBuildingRequest(p);    countDownLatch.await();    final SimpleProblemCollector collector = new SimpleProblemCollector();    interpolator.interpolateObject(obj, model, new File("."), config, collector);    return collector;}
205fdaa07907a3c07a89c7e0ac8653798179d817017e0d49e20a19d01d3a6851
getValueList
private ObjectWithMixedProtection getValueList()
{    List<String[]> values = new ArrayList<>();    values.add(new String[] { "${key}", "${key2}" });    values.add(new String[] { "${key3}", "${key4}" });    List<String> values2 = new ArrayList<>();    values.add(new String[] { "${key}", "${key2}" });    values.add(new String[] { "${key3}", "${key4}" });    List<String> values3 = new ArrayList<>();    values.add(new String[] { "${key}", "${key2}" });    values.add(new String[] { "${key3}", "${key4}" });    return new ObjectWithMixedProtection(values, values2, values3, "${key5}");}
aa38486d3753dbd3d06a3c2f6a611bfddab0117ddea9777acdce91bde067b8e1
getFooBar
public String getFooBar()
{    return fooBar;}
92fdccdbb1d1b5cb7b7583e61cd8bf60bd5216aff630331d4f6fe8440c6f913d
testFinalFieldsExcludedFromInterpolation
public void testFinalFieldsExcludedFromInterpolation()
{    Properties props = new Properties();    props.setProperty("expression", "value");    DefaultModelBuildingRequest request = new DefaultModelBuildingRequest();    request.setUserProperties(props);    SimpleProblemCollector problems = new SimpleProblemCollector();    StringSearchModelInterpolator interpolator = new StringSearchModelInterpolator();    interpolator.interpolateObject(new ClassWithFinalField(), new Model(), null, request, problems);    assertProblemFree(problems);}
4f19c6f40ac50dd3fa4efeb1e3ed7ed7e44fa4f20c01f28c995a5ec32041e666
testLocationTrackerShouldBeExcludedFromInterpolation
public void testLocationTrackerShouldBeExcludedFromInterpolation()
{    Properties props = new Properties();    props.setProperty("expression", "value");    DefaultModelBuildingRequest request = new DefaultModelBuildingRequest();    request.setUserProperties(props);    InputSource source = new InputSource();    source.setLocation("${expression}");    source.setModelId("${expression}");    Model model = new Model();    model.setLocation("", new InputLocation(1, 1, source));    SimpleProblemCollector problems = new SimpleProblemCollector();    StringSearchModelInterpolator interpolator = new StringSearchModelInterpolator();    interpolator.interpolateObject(model, model, null, request, problems);    assertProblemFree(problems);    assertEquals("${expression}", source.getLocation());    assertEquals("${expression}", source.getModelId());}
b8c9789a8c0d245ec6c4e52746bf422efc618a7ba0b47ddf2a326f440a3cc03b
testMergeModel_ModelVersion
public void testMergeModel_ModelVersion()
{    Model parent = new Model();    parent.setModelVersion("4.0.0");    Model model = new Model();    modelMerger.mergeModel_ModelVersion(model, parent, false, null);    assertNull(model.getModelVersion());    model.setModelVersion("5.0.0");    modelMerger.mergeModel_ModelVersion(model, parent, false, null);    assertEquals("5.0.0", model.getModelVersion());}
10c220d5dbb0c3d01a7e2e64a002dca9c3059a2d141f0faf857612a2af826775
testMergeModel_ArtifactId
public void testMergeModel_ArtifactId()
{    Model parent = new Model();    parent.setArtifactId("PARENT");    Model model = new Model();    modelMerger.mergeModel_ArtifactId(model, parent, false, null);    assertNull(model.getArtifactId());    model.setArtifactId("MODEL");    modelMerger.mergeModel_ArtifactId(model, parent, false, null);    assertEquals("MODEL", model.getArtifactId());}
59167ada23c5cece81246acc1cbf654cc11c52afd25efc33912218ba1bd86f52
testMergeModel_Prerequisites
public void testMergeModel_Prerequisites()
{    Model parent = new Model();    parent.setPrerequisites(new Prerequisites());    Model model = new Model();    modelMerger.mergeModel_Prerequisites(model, parent, false, null);    assertNull(model.getPrerequisites());    Prerequisites modelPrerequisites = new Prerequisites();    modelPrerequisites.setMaven("3.0");    model.setPrerequisites(modelPrerequisites);    modelMerger.mergeModel_Prerequisites(model, parent, false, null);    assertEquals(modelPrerequisites, model.getPrerequisites());}
fb58eb2f2a0018864e638d30fab3a7abf7cbaa9cc3b5e0f95c67078fc547b5a2
testMergeModel_Profiles
public void testMergeModel_Profiles()
{    Model parent = new Model();    parent.setProfiles(Collections.singletonList(new Profile()));    ;    Model model = new Model();    modelMerger.mergeModel_Profiles(model, parent, false, null);    assertEquals(0, model.getProfiles().size());    Profile modelProfile = new Profile();    modelProfile.setId("MODEL");    model.setProfiles(Collections.singletonList(modelProfile));    modelMerger.mergeModel_Prerequisites(model, parent, false, null);    assertEquals(Collections.singletonList(modelProfile), model.getProfiles());}
495c2f08575f01358a7e691aa5ff2542c293b8a49016b2105ffc4fdea76a297c
normalize
private String normalize(String url)
{    return normalizer.normalize(url);}
6be306320b1136eacb2f8aaba3fa9746ecc2790292c77fb5483500745a44763e
testNullSafe
public void testNullSafe()
{    assertNull(normalize(null));}
e42e59b5b416c8876d54e5bebbd86c47280ec654933dbd48c1f1d1a41c5b8adc
testTrailingSlash
public void testTrailingSlash()
{    assertEquals("", normalize(""));    assertEquals("http://server.org/dir", normalize("http://server.org/dir"));    assertEquals("http://server.org/dir/", normalize("http://server.org/dir/"));}
718be5f649d494a6e534f8389cc0b42fbdc3fb8d2879fee4a82fe29df921e0e2
testRemovalOfParentRefs
public void testRemovalOfParentRefs()
{    assertEquals("http://server.org/child", normalize("http://server.org/parent/../child"));    assertEquals("http://server.org/child", normalize("http://server.org/grand/parent/../../child"));    assertEquals("http://server.org//child", normalize("http://server.org/parent/..//child"));    assertEquals("http://server.org/child", normalize("http://server.org/parent//../child"));}
4d8e792cbf32bc7703a268739563de4723418d1dba3df1af131c0290d9d50f31
testPreservationOfDoubleSlashes
public void testPreservationOfDoubleSlashes()
{    assertEquals("scm:hg:ssh://localhost//home/user", normalize("scm:hg:ssh://localhost//home/user"));    assertEquals("file:////UNC/server", normalize("file:////UNC/server"));    assertEquals("[fetch=]http://server.org/[push=]ssh://server.org/", normalize("[fetch=]http://server.org/[push=]ssh://server.org/"));}
ac991b541dd2df6435a27fda6ee9f074f83fb8d58b2bbfe0a413c5c7ae521c79
absolutePathTraversalPastRootIsOmitted
public void absolutePathTraversalPastRootIsOmitted()
{    assertEquals("/", normalize("/../"));}
82415338162ea2593a61aacf592dcf25a3c8a97bf642a1c23e8f76a76dff0d68
parentDirectoryRemovedFromRelativeUriReference
public void parentDirectoryRemovedFromRelativeUriReference()
{    assertEquals("", normalize("a/../"));}
a14cbb415c04de736bd5e3a659411dd3c07ebb3a34c6719b29c3b1217c521dfa
leadingParentDirectoryNotRemovedFromRelativeUriReference
public void leadingParentDirectoryNotRemovedFromRelativeUriReference()
{    assertEquals("../", normalize("../"));}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();    activator = activatorClass.getConstructor().newInstance();}
68bbf6c94fbad4862990669ea582b65c28678087c2377b2c3fb0948d54293af4
tearDown
protected void tearDown() throws Exception
{    activator = null;    super.tearDown();}
7af74354bf893dc99ceb79f188d09f107c4bb9e1027061775a86f727d15e65d4
newContext
protected ProfileActivationContext newContext(final Properties userProperties, final Properties systemProperties)
{    DefaultProfileActivationContext context = new DefaultProfileActivationContext();    return context.setUserProperties(userProperties).setSystemProperties(systemProperties);}
114086938fc2f0db8cd13775b9503ba2aa2ee9dd146725ae632cae4ac25bfcac
assertActivation
protected void assertActivation(boolean active, Profile profile, ProfileActivationContext context)
{    SimpleProblemCollector problems = new SimpleProblemCollector();    assertEquals(active, activator.isActive(profile, context, problems));    assertEquals(problems.getErrors().toString(), 0, problems.getErrors().size());    assertEquals(problems.getWarnings().toString(), 0, problems.getWarnings().size());}
b0272207cfab7c9cd7505e218acb02a815946d3d07147516f0f12e7af3c6482a
newProfile
private Profile newProfile(String jdkVersion)
{    Activation a = new Activation();    a.setJdk(jdkVersion);    Profile p = new Profile();    p.setActivation(a);    return p;}
77b37f53826ff08a0ab2564b10a30a4caab4f55a2ba6018fbc80067ed945d25d
newProperties
private Properties newProperties(String javaVersion)
{    Properties props = new Properties();    props.setProperty("java.version", javaVersion);    return props;}
da79acca5e38ca35c9f835ba1c8ef1dd6f5778f34db429e9cd613fef4385de69
testNullSafe
public void testNullSafe() throws Exception
{    Profile p = new Profile();    assertActivation(false, p, newContext(null, null));    p.setActivation(new Activation());    assertActivation(false, p, newContext(null, null));}
211fe5981d1c2d523147e4319878d903a75390843a8a7c5ae38f9b3b3d41aac8
testPrefix
public void testPrefix() throws Exception
{    Profile profile = newProfile("1.4");    assertActivation(true, profile, newContext(null, newProperties("1.4")));    assertActivation(true, profile, newContext(null, newProperties("1.4.2")));    assertActivation(true, profile, newContext(null, newProperties("1.4.2_09")));    assertActivation(true, profile, newContext(null, newProperties("1.4.2_09-b03")));    assertActivation(false, profile, newContext(null, newProperties("1.3")));    assertActivation(false, profile, newContext(null, newProperties("1.5")));}
fd0caca9e0b5467a12af01dbfcab637cc68e9a7cf83b849af1e8679fc0d401d4
testPrefixNegated
public void testPrefixNegated() throws Exception
{    Profile profile = newProfile("!1.4");    assertActivation(false, profile, newContext(null, newProperties("1.4")));    assertActivation(false, profile, newContext(null, newProperties("1.4.2")));    assertActivation(false, profile, newContext(null, newProperties("1.4.2_09")));    assertActivation(false, profile, newContext(null, newProperties("1.4.2_09-b03")));    assertActivation(true, profile, newContext(null, newProperties("1.3")));    assertActivation(true, profile, newContext(null, newProperties("1.5")));}
943352fa24ce846445c2b3df8fc784c277f894b9ed482b496cca56831440d2e1
testVersionRangeInclusiveBounds
public void testVersionRangeInclusiveBounds() throws Exception
{    Profile profile = newProfile("[1.5,1.6]");    assertActivation(false, profile, newContext(null, newProperties("1.4")));    assertActivation(false, profile, newContext(null, newProperties("1.4.2")));    assertActivation(false, profile, newContext(null, newProperties("1.4.2_09")));    assertActivation(false, profile, newContext(null, newProperties("1.4.2_09-b03")));    assertActivation(true, profile, newContext(null, newProperties("1.5")));    assertActivation(true, profile, newContext(null, newProperties("1.5.0")));    assertActivation(true, profile, newContext(null, newProperties("1.5.0_09")));    assertActivation(true, profile, newContext(null, newProperties("1.5.0_09-b03")));    assertActivation(true, profile, newContext(null, newProperties("1.5.1")));    assertActivation(true, profile, newContext(null, newProperties("1.6")));    assertActivation(true, profile, newContext(null, newProperties("1.6.0")));    assertActivation(true, profile, newContext(null, newProperties("1.6.0_09")));    assertActivation(true, profile, newContext(null, newProperties("1.6.0_09-b03")));}
6bbe99783d4bc192e77dcdbeda3211a512c39f570ed8de076949dfc87b4f8fdb
testVersionRangeExclusiveBounds
public void testVersionRangeExclusiveBounds() throws Exception
{    Profile profile = newProfile("(1.3,1.6)");    assertActivation(false, profile, newContext(null, newProperties("1.3")));    assertActivation(false, profile, newContext(null, newProperties("1.3.0")));    assertActivation(false, profile, newContext(null, newProperties("1.3.0_09")));    assertActivation(false, profile, newContext(null, newProperties("1.3.0_09-b03")));    assertActivation(true, profile, newContext(null, newProperties("1.3.1")));    assertActivation(true, profile, newContext(null, newProperties("1.3.1_09")));    assertActivation(true, profile, newContext(null, newProperties("1.3.1_09-b03")));    assertActivation(true, profile, newContext(null, newProperties("1.5")));    assertActivation(true, profile, newContext(null, newProperties("1.5.0")));    assertActivation(true, profile, newContext(null, newProperties("1.5.0_09")));    assertActivation(true, profile, newContext(null, newProperties("1.5.0_09-b03")));    assertActivation(true, profile, newContext(null, newProperties("1.5.1")));    assertActivation(false, profile, newContext(null, newProperties("1.6")));}
ff52fb22eae5453fd6a15db43cc789d0ad43fd82a42684681df17e38a9881dd8
testVersionRangeInclusiveLowerBound
public void testVersionRangeInclusiveLowerBound() throws Exception
{    Profile profile = newProfile("[1.5,)");    assertActivation(false, profile, newContext(null, newProperties("1.4")));    assertActivation(false, profile, newContext(null, newProperties("1.4.2")));    assertActivation(false, profile, newContext(null, newProperties("1.4.2_09")));    assertActivation(false, profile, newContext(null, newProperties("1.4.2_09-b03")));    assertActivation(true, profile, newContext(null, newProperties("1.5")));    assertActivation(true, profile, newContext(null, newProperties("1.5.0")));    assertActivation(true, profile, newContext(null, newProperties("1.5.0_09")));    assertActivation(true, profile, newContext(null, newProperties("1.5.0_09-b03")));    assertActivation(true, profile, newContext(null, newProperties("1.5.1")));    assertActivation(true, profile, newContext(null, newProperties("1.6")));    assertActivation(true, profile, newContext(null, newProperties("1.6.0")));    assertActivation(true, profile, newContext(null, newProperties("1.6.0_09")));    assertActivation(true, profile, newContext(null, newProperties("1.6.0_09-b03")));}
1e0101456fd9ba7a620da39b5d4822dbe41d9a934fd86aa36ac6d776f005ec1b
testVersionRangeExclusiveUpperBound
public void testVersionRangeExclusiveUpperBound() throws Exception
{    Profile profile = newProfile("(,1.6)");    assertActivation(true, profile, newContext(null, newProperties("1.5")));    assertActivation(true, profile, newContext(null, newProperties("1.5.0")));    assertActivation(true, profile, newContext(null, newProperties("1.5.0_09")));    assertActivation(true, profile, newContext(null, newProperties("1.5.0_09-b03")));    assertActivation(true, profile, newContext(null, newProperties("1.5.1")));    assertActivation(false, profile, newContext(null, newProperties("1.6")));    assertActivation(false, profile, newContext(null, newProperties("1.6.0")));    assertActivation(false, profile, newContext(null, newProperties("1.6.0_09")));    assertActivation(false, profile, newContext(null, newProperties("1.6.0_09-b03")));}
a89fa851c6133992ced1c76e8bddb1dfa1bacf77c9788296ed0f0ccbd8ca81d7
newProfile
private Profile newProfile(String key, String value)
{    ActivationProperty ap = new ActivationProperty();    ap.setName(key);    ap.setValue(value);    Activation a = new Activation();    a.setProperty(ap);    Profile p = new Profile();    p.setActivation(a);    return p;}
451ad170ed59620aa79a13bff32f94e03a7f7e2bdce61a1eeb954574bccef105
newProperties
private Properties newProperties(String key, String value)
{    Properties props = new Properties();    props.setProperty(key, value);    return props;}
da79acca5e38ca35c9f835ba1c8ef1dd6f5778f34db429e9cd613fef4385de69
testNullSafe
public void testNullSafe() throws Exception
{    Profile p = new Profile();    assertActivation(false, p, newContext(null, null));    p.setActivation(new Activation());    assertActivation(false, p, newContext(null, null));}
87f2cdd1a3d0dc3c9a67480797ead43bca06843db8d2376af2c00f6b78b09a58
testWithNameOnly_UserProperty
public void testWithNameOnly_UserProperty() throws Exception
{    Profile profile = newProfile("prop", null);    assertActivation(true, profile, newContext(newProperties("prop", "value"), null));    assertActivation(false, profile, newContext(newProperties("prop", ""), null));    assertActivation(false, profile, newContext(newProperties("other", "value"), null));}
6f86f28a4a858d593cf7d58ad49c86ee9577cc30c285d6be34874057e90153d9
testWithNameOnly_SystemProperty
public void testWithNameOnly_SystemProperty() throws Exception
{    Profile profile = newProfile("prop", null);    assertActivation(true, profile, newContext(null, newProperties("prop", "value")));    assertActivation(false, profile, newContext(null, newProperties("prop", "")));    assertActivation(false, profile, newContext(null, newProperties("other", "value")));}
d441ea613ebb45dcf975acaca103c1f1b6c365768480f9f517dbd30501af8388
testWithNegatedNameOnly_UserProperty
public void testWithNegatedNameOnly_UserProperty() throws Exception
{    Profile profile = newProfile("!prop", null);    assertActivation(false, profile, newContext(newProperties("prop", "value"), null));    assertActivation(true, profile, newContext(newProperties("prop", ""), null));    assertActivation(true, profile, newContext(newProperties("other", "value"), null));}
b8dbc8c8c9d46d86786abab1c5767565a2aef15866d0cdad4fc3312156121177
testWithNegatedNameOnly_SystemProperty
public void testWithNegatedNameOnly_SystemProperty() throws Exception
{    Profile profile = newProfile("!prop", null);    assertActivation(false, profile, newContext(null, newProperties("prop", "value")));    assertActivation(true, profile, newContext(null, newProperties("prop", "")));    assertActivation(true, profile, newContext(null, newProperties("other", "value")));}
f134092bac7611a845a5f67b65af57a327a84286822c6f11f9ba6426edd1aaa0
testWithValue_UserProperty
public void testWithValue_UserProperty() throws Exception
{    Profile profile = newProfile("prop", "value");    assertActivation(true, profile, newContext(newProperties("prop", "value"), null));    assertActivation(false, profile, newContext(newProperties("prop", "other"), null));    assertActivation(false, profile, newContext(newProperties("prop", ""), null));}
86dd37729f07eb58d7e8dc67984fb11bce596bf6758528e6b1936cc109fabecd
testWithValue_SystemProperty
public void testWithValue_SystemProperty() throws Exception
{    Profile profile = newProfile("prop", "value");    assertActivation(true, profile, newContext(null, newProperties("prop", "value")));    assertActivation(false, profile, newContext(null, newProperties("prop", "other")));    assertActivation(false, profile, newContext(null, newProperties("other", "")));}
ce621f8780dc5bce20220d5addbfe74cf5bd981856b10c3fa17de90e3093985d
testWithNegatedValue_UserProperty
public void testWithNegatedValue_UserProperty() throws Exception
{    Profile profile = newProfile("prop", "!value");    assertActivation(false, profile, newContext(newProperties("prop", "value"), null));    assertActivation(true, profile, newContext(newProperties("prop", "other"), null));    assertActivation(true, profile, newContext(newProperties("prop", ""), null));}
857f37ea05afa8e595828e974276d8b10fcac1caec208dfffd300be4f2a51de8
testWithNegatedValue_SystemProperty
public void testWithNegatedValue_SystemProperty() throws Exception
{    Profile profile = newProfile("prop", "!value");    assertActivation(false, profile, newContext(null, newProperties("prop", "value")));    assertActivation(true, profile, newContext(null, newProperties("prop", "other")));    assertActivation(true, profile, newContext(null, newProperties("other", "")));}
a4565c39260c6c9f823f6cfdc4195977991361b0070706181e5c8189e80b43ba
testWithValue_UserPropertyDominantOverSystemProperty
public void testWithValue_UserPropertyDominantOverSystemProperty() throws Exception
{    Profile profile = newProfile("prop", "value");    Properties props1 = newProperties("prop", "value");    Properties props2 = newProperties("prop", "other");    assertActivation(true, profile, newContext(props1, props2));    assertActivation(false, profile, newContext(props2, props1));}
043dcfedf6220c2ee9f372630d86351dd8dcaac632f8b42ec8d7c4389fe64a1c
read
private Model read(String pom) throws Exception
{    String resource = "/poms/validation/" + pom;    InputStream is = getClass().getResourceAsStream(resource);    assertNotNull("missing resource: " + resource, is);    return new MavenXpp3Reader().read(is);}
c22eae0c629ba125f2d25b34d606bf1a31554220df678ec320560007ca2e3ec6
validate
private SimpleProblemCollector validate(String pom) throws Exception
{    return validateEffective(pom, ModelBuildingRequest.VALIDATION_LEVEL_STRICT);}
2fd5edc3c4757a17225728353f8d01a78c63e2e6a317900b7554f87889c10456
validateRaw
private SimpleProblemCollector validateRaw(String pom) throws Exception
{    return validateRaw(pom, ModelBuildingRequest.VALIDATION_LEVEL_STRICT);}
d0c9cfb8652fd4d3b050d9218a1e36f04ff193f6dc661dec5aea5dbed6aa307d
validateEffective
private SimpleProblemCollector validateEffective(String pom, int level) throws Exception
{    ModelBuildingRequest request = new DefaultModelBuildingRequest().setValidationLevel(level);    SimpleProblemCollector problems = new SimpleProblemCollector(read(pom));    validator.validateEffectiveModel(problems.getModel(), request, problems);    return problems;}
e2c9fb81e6c71c1d16e18dc63c623c8451858908d6687b10ee68afdb829ab783
validateRaw
private SimpleProblemCollector validateRaw(String pom, int level) throws Exception
{    ModelBuildingRequest request = new DefaultModelBuildingRequest().setValidationLevel(level);    SimpleProblemCollector problems = new SimpleProblemCollector(read(pom));    validator.validateRawModel(problems.getModel(), request, problems);    return problems;}
9a99bfda708be1eb3e9744815f59a9f75d485dab2cc09a40ce6a9c6a041988fb
assertContains
private void assertContains(String msg, String substring)
{    assertTrue("\"" + substring + "\" was not found in: " + msg, msg.contains(substring));}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();    validator = new DefaultModelValidator();}
68bbf6c94fbad4862990669ea582b65c28678087c2377b2c3fb0948d54293af4
tearDown
protected void tearDown() throws Exception
{    this.validator = null;    super.tearDown();}
ac6a52446892cccaa07b215cbc1073b1f708f91e41d477aa8d468b2536bc1397
assertViolations
private void assertViolations(SimpleProblemCollector result, int fatals, int errors, int warnings)
{    assertEquals(String.valueOf(result.getFatals()), fatals, result.getFatals().size());    assertEquals(String.valueOf(result.getErrors()), errors, result.getErrors().size());    assertEquals(String.valueOf(result.getWarnings()), warnings, result.getWarnings().size());}
75659eec7570bc0a824bcff391959423d51ec06e02ae585579f8f59add3a30d0
testMissingModelVersion
public void testMissingModelVersion() throws Exception
{    SimpleProblemCollector result = validate("missing-modelVersion-pom.xml");    assertViolations(result, 0, 1, 0);    assertEquals("'modelVersion' is missing.", result.getErrors().get(0));}
369fd2fe21f2700eea829db915c115e4b37824e9fce85040e860ce858d5cd681
testBadModelVersion
public void testBadModelVersion() throws Exception
{    SimpleProblemCollector result = validateRaw("bad-modelVersion.xml", ModelBuildingRequest.VALIDATION_LEVEL_STRICT);    assertViolations(result, 1, 0, 0);    assertTrue(result.getFatals().get(0).contains("modelVersion"));}
008ddff485411567dba5a35eab1b29751c1fc4d0ab33d3ceaa656d0e88e59c88
testMissingArtifactId
public void testMissingArtifactId() throws Exception
{    SimpleProblemCollector result = validate("missing-artifactId-pom.xml");    assertViolations(result, 0, 1, 0);    assertEquals("'artifactId' is missing.", result.getErrors().get(0));}
0dab59ee58e2d4434eb96d69f7ded41170626dc4e2807fc96559e149e0663af9
testMissingGroupId
public void testMissingGroupId() throws Exception
{    SimpleProblemCollector result = validate("missing-groupId-pom.xml");    assertViolations(result, 0, 1, 0);    assertEquals("'groupId' is missing.", result.getErrors().get(0));}
86eaeb8e8929038425217ffb3b5923b42385171233c88b638028aa530a3ac56d
testInvalidIds
public void testInvalidIds() throws Exception
{    SimpleProblemCollector result = validate("invalid-ids-pom.xml");    assertViolations(result, 0, 2, 0);    assertEquals("'groupId' with value 'o/a/m' does not match a valid id pattern.", result.getErrors().get(0));    assertEquals("'artifactId' with value 'm$-do$' does not match a valid id pattern.", result.getErrors().get(1));}
3b61d96ef6e6b5aca378f0c5807d52144250ef6c3109804cbdbd23e9758abd1e
testMissingType
public void testMissingType() throws Exception
{    SimpleProblemCollector result = validate("missing-type-pom.xml");    assertViolations(result, 0, 1, 0);    assertEquals("'packaging' is missing.", result.getErrors().get(0));}
d79a927dea456591731259940021842cb005203eced086ea7eab1fed049dfc7c
testMissingVersion
public void testMissingVersion() throws Exception
{    SimpleProblemCollector result = validate("missing-version-pom.xml");    assertViolations(result, 0, 1, 0);    assertEquals("'version' is missing.", result.getErrors().get(0));}
84185040a6bb06e7480239e9e717d8b366802603496a1bdfff80fd4386a5528e
testInvalidAggregatorPackaging
public void testInvalidAggregatorPackaging() throws Exception
{    SimpleProblemCollector result = validate("invalid-aggregator-packaging-pom.xml");    assertViolations(result, 0, 1, 0);    assertTrue(result.getErrors().get(0).contains("Aggregator projects require 'pom' as packaging."));}
1aa27fccd7df518386eeb2793234679378b0b6707d89d7c065f52fc7efef9a0f
testMissingDependencyArtifactId
public void testMissingDependencyArtifactId() throws Exception
{    SimpleProblemCollector result = validate("missing-dependency-artifactId-pom.xml");    assertViolations(result, 0, 1, 0);    assertTrue(result.getErrors().get(0).contains("'dependencies.dependency.artifactId' for groupId:null:jar is missing"));}
561b6a8b34c6873a1d9c7c3f446054b7e473a34ac779bddc33d85b5c0556a12e
testMissingDependencyGroupId
public void testMissingDependencyGroupId() throws Exception
{    SimpleProblemCollector result = validate("missing-dependency-groupId-pom.xml");    assertViolations(result, 0, 1, 0);    assertTrue(result.getErrors().get(0).contains("'dependencies.dependency.groupId' for null:artifactId:jar is missing"));}
05109b06ad51fac27344dbaa893f71722398f9578de682049e52d338ee7fd512
testMissingDependencyVersion
public void testMissingDependencyVersion() throws Exception
{    SimpleProblemCollector result = validate("missing-dependency-version-pom.xml");    assertViolations(result, 0, 1, 0);    assertTrue(result.getErrors().get(0).contains("'dependencies.dependency.version' for groupId:artifactId:jar is missing"));}
369915b5f5627aa4fc9c15c9484445a24833484e50d9cc8fbc0fea4bd09d210c
testMissingDependencyManagementArtifactId
public void testMissingDependencyManagementArtifactId() throws Exception
{    SimpleProblemCollector result = validate("missing-dependency-mgmt-artifactId-pom.xml");    assertViolations(result, 0, 1, 0);    assertTrue(result.getErrors().get(0).contains("'dependencyManagement.dependencies.dependency.artifactId' for groupId:null:jar is missing"));}
efe3b8ec7d0b442d9f2c2a5fc62c86344e630311a47456f559486568a4501117
testMissingDependencyManagementGroupId
public void testMissingDependencyManagementGroupId() throws Exception
{    SimpleProblemCollector result = validate("missing-dependency-mgmt-groupId-pom.xml");    assertViolations(result, 0, 1, 0);    assertTrue(result.getErrors().get(0).contains("'dependencyManagement.dependencies.dependency.groupId' for null:artifactId:jar is missing"));}
225a95a3d7b2e1e8ad7d8ebabe5bdfa065007af8c888bf5b8522a01ed2b305c7
testMissingAll
public void testMissingAll() throws Exception
{    SimpleProblemCollector result = validate("missing-1-pom.xml");    assertViolations(result, 0, 4, 0);    List<String> messages = result.getErrors();    assertTrue(messages.contains("\'modelVersion\' is missing."));    assertTrue(messages.contains("\'groupId\' is missing."));    assertTrue(messages.contains("\'artifactId\' is missing."));    assertTrue(messages.contains("\'version\' is missing."));}
975c75486ed3097f5fdce9cb4ea632572fc662315cb94877494b6222f4d7a558
testMissingPluginArtifactId
public void testMissingPluginArtifactId() throws Exception
{    SimpleProblemCollector result = validate("missing-plugin-artifactId-pom.xml");    assertViolations(result, 0, 1, 0);    assertEquals("'build.plugins.plugin.artifactId' is missing.", result.getErrors().get(0));}
3724871df21d3837c4ad1aa3fcc75b52608f64684fbc7fafdb24760fd699a821
testEmptyPluginVersion
public void testEmptyPluginVersion() throws Exception
{    SimpleProblemCollector result = validate("empty-plugin-version.xml");    assertViolations(result, 0, 1, 0);    assertEquals("'build.plugins.plugin.version' for org.apache.maven.plugins:maven-it-plugin" + " must be a valid version but is ''.", result.getErrors().get(0));}
70cfef7e78810d5169ddaae3e4f4261cb65abd1ebaabb1b7f650c1d6d6519196
testMissingRepositoryId
public void testMissingRepositoryId() throws Exception
{    SimpleProblemCollector result = validateRaw("missing-repository-id-pom.xml", ModelBuildingRequest.VALIDATION_LEVEL_STRICT);    assertViolations(result, 0, 4, 0);    assertEquals("'repositories.repository.id' is missing.", result.getErrors().get(0));    assertEquals("'repositories.repository.[null].url' is missing.", result.getErrors().get(1));    assertEquals("'pluginRepositories.pluginRepository.id' is missing.", result.getErrors().get(2));    assertEquals("'pluginRepositories.pluginRepository.[null].url' is missing.", result.getErrors().get(3));}
8c69b26be7ebe9d518b9cc62a5be13338cb636d851158ed47c0fc2a1e92ee831
testMissingResourceDirectory
public void testMissingResourceDirectory() throws Exception
{    SimpleProblemCollector result = validate("missing-resource-directory-pom.xml");    assertViolations(result, 0, 2, 0);    assertEquals("'build.resources.resource.directory' is missing.", result.getErrors().get(0));    assertEquals("'build.testResources.testResource.directory' is missing.", result.getErrors().get(1));}
4141945b27a703d20730daf4ce04f2ff2c4d5ff56d7cd38625ad9fbe2d9e10ce
testBadPluginDependencyScope
public void testBadPluginDependencyScope() throws Exception
{    SimpleProblemCollector result = validate("bad-plugin-dependency-scope.xml");    assertViolations(result, 0, 3, 0);    assertTrue(result.getErrors().get(0).contains("test:d"));    assertTrue(result.getErrors().get(1).contains("test:e"));    assertTrue(result.getErrors().get(2).contains("test:f"));}
d7d9514450c8b3830a4ffcb501fbd3c2975eae93f2c9793e932760ebb38fb020
testBadDependencyScope
public void testBadDependencyScope() throws Exception
{    SimpleProblemCollector result = validate("bad-dependency-scope.xml");    assertViolations(result, 0, 0, 2);    assertTrue(result.getWarnings().get(0).contains("test:f"));    assertTrue(result.getWarnings().get(1).contains("test:g"));}
fb122c0d17937e2213160ed0dd5f085b135a9ef04adce4151b8b08e6ee6ae2a5
testBadDependencyManagementScope
public void testBadDependencyManagementScope() throws Exception
{    SimpleProblemCollector result = validate("bad-dependency-management-scope.xml");    assertViolations(result, 0, 0, 1);    assertContains(result.getWarnings().get(0), "test:g");}
d9a560b178ac2ca7f9b09fe4e88fb605903a2fc0fa1047919c551deb6c382152
testBadDependencyVersion
public void testBadDependencyVersion() throws Exception
{    SimpleProblemCollector result = validate("bad-dependency-version.xml");    assertViolations(result, 0, 2, 0);    assertContains(result.getErrors().get(0), "'dependencies.dependency.version' for test:b:jar must be a valid version");    assertContains(result.getErrors().get(1), "'dependencies.dependency.version' for test:c:jar must not contain any of these characters");}
ae672009448660a2c7d76980f59faf7094a47e03b5061c1fbd998e5ba2f6ce2c
testDuplicateModule
public void testDuplicateModule() throws Exception
{    SimpleProblemCollector result = validate("duplicate-module.xml");    assertViolations(result, 0, 1, 0);    assertTrue(result.getErrors().get(0).contains("child"));}
2bf891b0ea2bcb875583386ef2f4d68c102cb0c76c1a5b8d40a729cd109cec05
testDuplicateProfileId
public void testDuplicateProfileId() throws Exception
{    SimpleProblemCollector result = validateRaw("duplicate-profile-id.xml");    assertViolations(result, 0, 1, 0);    assertTrue(result.getErrors().get(0).contains("non-unique-id"));}
7aa70edc82875bdb756b37ff42a20293e3de82c0c3ccc62c66a3207d65bf3663
testBadPluginVersion
public void testBadPluginVersion() throws Exception
{    SimpleProblemCollector result = validate("bad-plugin-version.xml");    assertViolations(result, 0, 4, 0);    assertContains(result.getErrors().get(0), "'build.plugins.plugin.version' for test:mip must be a valid version");    assertContains(result.getErrors().get(1), "'build.plugins.plugin.version' for test:rmv must be a valid version");    assertContains(result.getErrors().get(2), "'build.plugins.plugin.version' for test:lmv must be a valid version");    assertContains(result.getErrors().get(3), "'build.plugins.plugin.version' for test:ifsc must not contain any of these characters");}
761a0bfe4749187e16f0df34df1a9a174ca1bdade8bedb503790a7b2822af89f
testDistributionManagementStatus
public void testDistributionManagementStatus() throws Exception
{    SimpleProblemCollector result = validate("distribution-management-status.xml");    assertViolations(result, 0, 1, 0);    assertTrue(result.getErrors().get(0).contains("distributionManagement.status"));}
105aa467ce64d5637b1b648b2b75f67ea3971fcb177e1982ed31fef5f8405b27
testIncompleteParent
public void testIncompleteParent() throws Exception
{    SimpleProblemCollector result = validateRaw("incomplete-parent.xml");    assertViolations(result, 3, 0, 0);    assertTrue(result.getFatals().get(0).contains("parent.groupId"));    assertTrue(result.getFatals().get(1).contains("parent.artifactId"));    assertTrue(result.getFatals().get(2).contains("parent.version"));}
14755f27f311e0f9cb051f1bd4477052f1ae8f203245972fe3bd65b3cdd3921b
testHardCodedSystemPath
public void testHardCodedSystemPath() throws Exception
{    SimpleProblemCollector result = validateRaw("hard-coded-system-path.xml");    assertViolations(result, 0, 0, 1);    assertContains(result.getWarnings().get(0), "'dependencies.dependency.systemPath' for test:a:jar should use a variable instead of a hard-coded path");    SimpleProblemCollector result_31 = validateRaw("hard-coded-system-path.xml", ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1);    assertViolations(result_31, 0, 0, 3);    assertContains(result_31.getWarnings().get(0), "'dependencies.dependency.scope' for test:a:jar declares usage of deprecated 'system' scope");    assertContains(result_31.getWarnings().get(1), "'dependencies.dependency.systemPath' for test:a:jar should use a variable instead of a hard-coded path");    assertContains(result_31.getWarnings().get(2), "'dependencies.dependency.scope' for test:b:jar declares usage of deprecated 'system' scope");}
db8e625a120d9750e1ab3e1354ddcf8f9912cf3c9d986ba3c347907266c9585b
testEmptyModule
public void testEmptyModule() throws Exception
{    SimpleProblemCollector result = validate("empty-module.xml");    assertViolations(result, 0, 1, 0);    assertTrue(result.getErrors().get(0).contains("'modules.module[0]' has been specified without a path"));}
b287265cfe8f3dc72fc7231c1e4e754a2733715ae91f8b5f980066da58aecd76
testDuplicatePlugin
public void testDuplicatePlugin() throws Exception
{    SimpleProblemCollector result = validateRaw("duplicate-plugin.xml");    assertViolations(result, 0, 0, 4);    assertTrue(result.getWarnings().get(0).contains("duplicate declaration of plugin test:duplicate"));    assertTrue(result.getWarnings().get(1).contains("duplicate declaration of plugin test:managed-duplicate"));    assertTrue(result.getWarnings().get(2).contains("duplicate declaration of plugin profile:duplicate"));    assertTrue(result.getWarnings().get(3).contains("duplicate declaration of plugin profile:managed-duplicate"));}
0c2ba7f01b648a23862483d79fcae5f91b9d2141a96b974df2a0421aa2a2d4d5
testDuplicatePluginExecution
public void testDuplicatePluginExecution() throws Exception
{    SimpleProblemCollector result = validateRaw("duplicate-plugin-execution.xml");    assertViolations(result, 0, 4, 0);    assertContains(result.getErrors().get(0), "duplicate execution with id a");    assertContains(result.getErrors().get(1), "duplicate execution with id default");    assertContains(result.getErrors().get(2), "duplicate execution with id c");    assertContains(result.getErrors().get(3), "duplicate execution with id b");}
e30a23552e640e33c49b76e8685b229b4fbfda920777861551aa7965cd008b42
testReservedRepositoryId
public void testReservedRepositoryId() throws Exception
{    SimpleProblemCollector result = validate("reserved-repository-id.xml");    assertViolations(result, 0, 0, 4);    assertContains(result.getWarnings().get(0), "'repositories.repository.id'" + " must not be 'local'");    assertContains(result.getWarnings().get(1), "'pluginRepositories.pluginRepository.id' must not be 'local'");    assertContains(result.getWarnings().get(2), "'distributionManagement.repository.id' must not be 'local'");    assertContains(result.getWarnings().get(3), "'distributionManagement.snapshotRepository.id' must not be 'local'");}
d57c06c23ef1c0bd0498ee55642ba262da6b137bf3da9f757e260af3ac9429aa
testMissingPluginDependencyGroupId
public void testMissingPluginDependencyGroupId() throws Exception
{    SimpleProblemCollector result = validate("missing-plugin-dependency-groupId.xml");    assertViolations(result, 0, 1, 0);    assertTrue(result.getErrors().get(0).contains(":a:"));}
fcb4bbc47c051af42c31d311f389c4f23513f9c7932b979b681dc7b109e1befe
testMissingPluginDependencyArtifactId
public void testMissingPluginDependencyArtifactId() throws Exception
{    SimpleProblemCollector result = validate("missing-plugin-dependency-artifactId.xml");    assertViolations(result, 0, 1, 0);    assertTrue(result.getErrors().get(0).contains("test:"));}
6d253423e5f2fb55b3a83b7d4139c05a3fd4ee1ecb4ababe3c447aac73694fc2
testMissingPluginDependencyVersion
public void testMissingPluginDependencyVersion() throws Exception
{    SimpleProblemCollector result = validate("missing-plugin-dependency-version.xml");    assertViolations(result, 0, 1, 0);    assertTrue(result.getErrors().get(0).contains("test:a"));}
4ecf1d6bcfabaea0a26bb87d08afba0f6fec50b7b3e8b85177ae61c75870d1fc
testBadPluginDependencyVersion
public void testBadPluginDependencyVersion() throws Exception
{    SimpleProblemCollector result = validate("bad-plugin-dependency-version.xml");    assertViolations(result, 0, 1, 0);    assertTrue(result.getErrors().get(0).contains("test:b"));}
43c987d8762d397b0be0afb0bcdd38b417a6879b14201b7daa999885ded90a3d
testBadVersion
public void testBadVersion() throws Exception
{    SimpleProblemCollector result = validate("bad-version.xml");    assertViolations(result, 0, 0, 1);    assertContains(result.getWarnings().get(0), "'version' must not contain any of these characters");}
cedb4d182054cc4410e243c0bd03ed571637166dddf61e0f86463b30e812a295
testBadSnapshotVersion
public void testBadSnapshotVersion() throws Exception
{    SimpleProblemCollector result = validate("bad-snapshot-version.xml");    assertViolations(result, 0, 0, 1);    assertContains(result.getWarnings().get(0), "'version' uses an unsupported snapshot version format");}
9c10c25d80cbe0a5a787c9c109b9efab75e4c155748252f00e88368b9409c48a
testBadRepositoryId
public void testBadRepositoryId() throws Exception
{    SimpleProblemCollector result = validate("bad-repository-id.xml");    assertViolations(result, 0, 0, 4);    assertContains(result.getWarnings().get(0), "'repositories.repository.id' must not contain any of these characters");    assertContains(result.getWarnings().get(1), "'pluginRepositories.pluginRepository.id' must not contain any of these characters");    assertContains(result.getWarnings().get(2), "'distributionManagement.repository.id' must not contain any of these characters");    assertContains(result.getWarnings().get(3), "'distributionManagement.snapshotRepository.id' must not contain any of these characters");}
7bac406ceb4e3102d1073dda2a5a4f71c14a9933375233066ae6a6bd5e669043
testBadDependencyExclusionId
public void testBadDependencyExclusionId() throws Exception
{    SimpleProblemCollector result = validateEffective("bad-dependency-exclusion-id.xml", ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0);    assertViolations(result, 0, 0, 2);    assertContains(result.getWarnings().get(0), "'dependencies.dependency.exclusions.exclusion.groupId' for gid:aid:jar");    assertContains(result.getWarnings().get(1), "'dependencies.dependency.exclusions.exclusion.artifactId' for gid:aid:jar");        SimpleProblemCollector result_30 = validate("bad-dependency-exclusion-id.xml");    assertViolations(result_30, 0, 0, 0);}
856f57a5d7fed98a8db92903f5605db63fec0372c49c2bd8a1896595a992c1de
testMissingDependencyExclusionId
public void testMissingDependencyExclusionId() throws Exception
{    SimpleProblemCollector result = validate("missing-dependency-exclusion-id.xml");    assertViolations(result, 0, 0, 2);    assertContains(result.getWarnings().get(0), "'dependencies.dependency.exclusions.exclusion.groupId' for gid:aid:jar is missing");    assertContains(result.getWarnings().get(1), "'dependencies.dependency.exclusions.exclusion.artifactId' for gid:aid:jar is missing");}
3f1175f52675ebeb97c96a32fd1f3807e83c371b225812dbbbcbd0b2f5436271
testBadImportScopeType
public void testBadImportScopeType() throws Exception
{    SimpleProblemCollector result = validateRaw("bad-import-scope-type.xml");    assertViolations(result, 0, 0, 1);    assertContains(result.getWarnings().get(0), "'dependencyManagement.dependencies.dependency.type' for test:a:jar must be 'pom'");}
2f6ba1810059e67bf5e1fa2f074d5abd3a137cf45a64bfa70b01e5127aaef815
testBadImportScopeClassifier
public void testBadImportScopeClassifier() throws Exception
{    SimpleProblemCollector result = validateRaw("bad-import-scope-classifier.xml");    assertViolations(result, 0, 1, 0);    assertContains(result.getErrors().get(0), "'dependencyManagement.dependencies.dependency.classifier' for test:a:pom:cls must be empty");}
cfa678022d50bce4ea5ebfa25503e87fc570203134776629da74581f2f302cda
testSystemPathRefersToProjectBasedir
public void testSystemPathRefersToProjectBasedir() throws Exception
{    SimpleProblemCollector result = validateRaw("basedir-system-path.xml");    assertViolations(result, 0, 0, 2);    assertContains(result.getWarnings().get(0), "'dependencies.dependency.systemPath' for test:a:jar should not point at files within the project directory");    assertContains(result.getWarnings().get(1), "'dependencies.dependency.systemPath' for test:b:jar should not point at files within the project directory");    SimpleProblemCollector result_31 = validateRaw("basedir-system-path.xml", ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1);    assertViolations(result_31, 0, 0, 4);    assertContains(result_31.getWarnings().get(0), "'dependencies.dependency.scope' for test:a:jar declares usage of deprecated 'system' scope");    assertContains(result_31.getWarnings().get(1), "'dependencies.dependency.systemPath' for test:a:jar should not point at files within the project directory");    assertContains(result_31.getWarnings().get(2), "'dependencies.dependency.scope' for test:b:jar declares usage of deprecated 'system' scope");    assertContains(result_31.getWarnings().get(3), "'dependencies.dependency.systemPath' for test:b:jar should not point at files within the project directory");}
1b7ba25ab8a722e706bf647f57ecafa2ec6251dd1afe3ea7ac5d4701740207d5
testInvalidVersionInPluginManagement
public void testInvalidVersionInPluginManagement() throws Exception
{    SimpleProblemCollector result = validateRaw("raw-model/missing-plugin-version-pluginManagement.xml");    assertViolations(result, 1, 0, 0);    assertEquals("'build.pluginManagement.plugins.plugin.(groupId:artifactId)' version of a plugin must be defined. ", result.getFatals().get(0));}
4fc879fa52240b8400e29077cbc99a9985366e5549c5c2a402922a96f19b5951
testInvalidGroupIdInPluginManagement
public void testInvalidGroupIdInPluginManagement() throws Exception
{    SimpleProblemCollector result = validateRaw("raw-model/missing-groupId-pluginManagement.xml");    assertViolations(result, 1, 0, 0);    assertEquals("'build.pluginManagement.plugins.plugin.(groupId:artifactId)' groupId of a plugin must be defined. ", result.getFatals().get(0));}
509b6ae2c818ba4f7bf218f85efd83bd0d98046a5986ecd1764f04cbf6f8e5de
testInvalidArtifactIdInPluginManagement
public void testInvalidArtifactIdInPluginManagement() throws Exception
{    SimpleProblemCollector result = validateRaw("raw-model/missing-artifactId-pluginManagement.xml");    assertViolations(result, 1, 0, 0);    assertEquals("'build.pluginManagement.plugins.plugin.(groupId:artifactId)' artifactId of a plugin must be defined. ", result.getFatals().get(0));}
5e16236adc6b3cd11a6ce6bc56df12183183eb3f69f40b0d1c332b76433547ea
testInvalidGroupAndArtifactIdInPluginManagement
public void testInvalidGroupAndArtifactIdInPluginManagement() throws Exception
{    SimpleProblemCollector result = validateRaw("raw-model/missing-ga-pluginManagement.xml");    assertViolations(result, 2, 0, 0);    assertEquals("'build.pluginManagement.plugins.plugin.(groupId:artifactId)' groupId of a plugin must be defined. ", result.getFatals().get(0));    assertEquals("'build.pluginManagement.plugins.plugin.(groupId:artifactId)' artifactId of a plugin must be defined. ", result.getFatals().get(1));}
00ca48a0419664abaac609080020d30623c02134c97356486fd15a9fa20eb9e4
testMissingReportPluginVersion
public void testMissingReportPluginVersion() throws Exception
{    SimpleProblemCollector result = validate("missing-report-version-pom.xml");    assertViolations(result, 0, 0, 0);}
d2542e1819bd8d2732199833b4934abde22a06f36222cc3cb3ed376dfa7fd18d
testDeprecatedDependencyMetaversionsLatestAndRelease
public void testDeprecatedDependencyMetaversionsLatestAndRelease() throws Exception
{    SimpleProblemCollector result = validateRaw("deprecated-dependency-metaversions-latest-and-release.xml");    assertViolations(result, 0, 0, 2);    assertContains(result.getWarnings().get(0), "'dependencies.dependency.version' for test:a:jar is either LATEST or RELEASE (both of them are being deprecated)");    assertContains(result.getWarnings().get(1), "'dependencies.dependency.version' for test:b:jar is either LATEST or RELEASE (both of them are being deprecated)");}
8fef27c5b1c6b6a5c3f36daf5cd881e27a3d8c51d943b5f87265debaebcf1de4
testSelfReferencingDependencyInRawModel
public void testSelfReferencingDependencyInRawModel() throws Exception
{    SimpleProblemCollector result = validateRaw("raw-model/self-referencing.xml");    assertViolations(result, 1, 0, 0);    assertEquals("'dependencies.dependency[com.example.group:testinvalidpom:0.0.1-SNAPSHOT]' for com.example.group:testinvalidpom:0.0.1-SNAPSHOT is referencing itself.", result.getFatals().get(0));}
e6e7782f9d1e854522716920757bbff9a9635bb87f7097f1521e34e6682ee70a
testSelfReferencingDependencyWithClassifierInRawModel
public void testSelfReferencingDependencyWithClassifierInRawModel() throws Exception
{    SimpleProblemCollector result = validateRaw("raw-model/self-referencing-classifier.xml");    assertViolations(result, 0, 0, 0);}
b5c3e49554cd11e055652d05f3a52640ddaede25cabb02034ca8bdcb1f553f77
testCiFriendlySha1
public void testCiFriendlySha1() throws Exception
{    SimpleProblemCollector result = validateRaw("raw-model/ok-ci-friendly-sha1.xml");    assertViolations(result, 0, 0, 0);}
92c88fa83b22cd99e5fac97346e0ce9ac278d0c0ecfa434d0afa7168316561e4
testCiFriendlyRevision
public void testCiFriendlyRevision() throws Exception
{    SimpleProblemCollector result = validateRaw("raw-model/ok-ci-friendly-revision.xml");    assertViolations(result, 0, 0, 0);}
47f63aa53dbde2767d9b18771e4c6f3b7f80cb7e33fe44943dff6827121edc62
testCiFriendlyChangeList
public void testCiFriendlyChangeList() throws Exception
{    SimpleProblemCollector result = validateRaw("raw-model/ok-ci-friendly-changelist.xml");    assertViolations(result, 0, 0, 0);}
f5ded89fa376ee3766b25ae545f906ff3ef16110354acc656be6d672f1df1155
testCiFriendlyAllExpressions
public void testCiFriendlyAllExpressions() throws Exception
{    SimpleProblemCollector result = validateRaw("raw-model/ok-ci-friendly-all-expressions.xml");    assertViolations(result, 0, 0, 0);}
cb3868a3e022fe3c80811b3d7771d34295f939928e42ecec9e19c32f9cc258b3
testCiFriendlyBad
public void testCiFriendlyBad() throws Exception
{    SimpleProblemCollector result = validateRaw("raw-model/bad-ci-friendly.xml");    assertViolations(result, 0, 0, 1);    assertEquals("'version' contains an expression but should be a constant.", result.getWarnings().get(0));}
63d3d71ada2986e8b4c55c0032f839d5a5647db02b8f9b519f7f2e322c326652
testCiFriendlyBadSha1Plus
public void testCiFriendlyBadSha1Plus() throws Exception
{    SimpleProblemCollector result = validateRaw("raw-model/bad-ci-friendly-sha1plus.xml");    assertViolations(result, 0, 0, 1);    assertEquals("'version' contains an expression but should be a constant.", result.getWarnings().get(0));}
384341041fa377042b1875f8298fe2a0a88e2d31b967679a9da0d4cbc30ef106
testCiFriendlyBadSha1Plus2
public void testCiFriendlyBadSha1Plus2() throws Exception
{    SimpleProblemCollector result = validateRaw("raw-model/bad-ci-friendly-sha1plus2.xml");    assertViolations(result, 0, 0, 1);    assertEquals("'version' contains an expression but should be a constant.", result.getWarnings().get(0));}
1e0bfcd574a3099b09ae86778529001d620004dfbef73ff6a8f1e6e0661f8e51
testParentVersionLATEST
public void testParentVersionLATEST() throws Exception
{    SimpleProblemCollector result = validateRaw("raw-model/bad-parent-version-latest.xml");    assertViolations(result, 0, 0, 1);    assertEquals("'parent.version' is either LATEST or RELEASE (both of them are being deprecated)", result.getWarnings().get(0));}
edeb1101f2666c073e5bb9d529f4fbaf2ee89ce6302a34198e028f744fdbb740
testParentVersionRELEASE
public void testParentVersionRELEASE() throws Exception
{    SimpleProblemCollector result = validateRaw("raw-model/bad-parent-version-release.xml");    assertViolations(result, 0, 0, 1);    assertEquals("'parent.version' is either LATEST or RELEASE (both of them are being deprecated)", result.getWarnings().get(0));}
d7a67a3a6316e14e7bb3b1589f54066b465c10e33c94236edccd2a4ea2bda185
debug
public void debug(CharSequence content)
{    logger.debug(toString(content));}
c256b77fcf948803b404e4e669214125af439a9993d1cb3827d6b1b454246861
toString
private String toString(CharSequence content)
{    if (content == null) {        return "";    } else {        return content.toString();    }}
37bc80bc637a5a370ee2f7688dc9aa6ac84dda0b74b78db37b44838bd6406190
debug
public void debug(CharSequence content, Throwable error)
{    logger.debug(toString(content), error);}
6131910a083c5f50cddf103acd8afc8094ee881b916aaf7ce23e76915f5d8c20
debug
public void debug(Throwable error)
{    logger.debug("", error);}
02e221445c2ecbc120eda0f189c7e4849271d1f430c16c1cf2fd49ed2f683f48
info
public void info(CharSequence content)
{    logger.info(toString(content));}
6de1585359f5b6cb6475a560ec3bcc1d4f81bf0dc89220ca898bac5c540f27d9
info
public void info(CharSequence content, Throwable error)
{    logger.info(toString(content), error);}
614e4a6e6be2604916a79bdb8c045993ab0c50982509c336169ee51ca7dc3636
info
public void info(Throwable error)
{    logger.info("", error);}
c26b5169e9c507ee2e68f6c59890fa76681e9642e03381cc98669492948afeef
warn
public void warn(CharSequence content)
{    logger.warn(toString(content));}
b64076c63917d39c54f680b5be7cb712ddbadccae407023d92d58f1fa48b5712
warn
public void warn(CharSequence content, Throwable error)
{    logger.warn(toString(content), error);}
b1a5c2449f7ac54a3ef9ad44059024f8e2a0fa98296cc5d1478f533299419d0f
warn
public void warn(Throwable error)
{    logger.warn("", error);}
2a10e6d560ad6b3eb9925618be15af241633561c3bffd98ddbf5684df0cf8bd6
error
public void error(CharSequence content)
{    logger.error(toString(content));}
0364a39fab00ebd2612ea1ff69daa218623f655341fd940622a344e961ea338d
error
public void error(CharSequence content, Throwable error)
{    logger.error(toString(content), error);}
2ac69be8081dcdbc14a41bfb38d76be2a44da1209a74268771586d5b60f3de47
error
public void error(Throwable error)
{    logger.error("", error);}
78a12d10dabb3d8114aaac00c701b5b6aa7cbfaa2d8d5e567d835d24c4e4049e
isDebugEnabled
public boolean isDebugEnabled()
{    return logger.isDebugEnabled();}
791133a98f4bf579531e6f98c8eedc6a6b04fa18d00c49cc69e44fb34f1d7bfb
isInfoEnabled
public boolean isInfoEnabled()
{    return logger.isInfoEnabled();}
ed1cbf9afb39ae4c470fcb5327707d375fad568a93babe54ea77258009a55c9a
isWarnEnabled
public boolean isWarnEnabled()
{    return logger.isWarnEnabled();}
57f02ea050263534c4a0e031302153aeaf6c901a04ad56b7140d80df41a36abd
isErrorEnabled
public boolean isErrorEnabled()
{    return logger.isErrorEnabled();}
b3da3b921f2ec93483a8e7925f8983e33901c07c3eaa4c37a0447ec7113dac64
setLog
public void setLog(Log log)
{    this.log = log;}
8a71b1835a0936b6845d1253159a5ef65ff188240faa68ee983ded3df5e15459
getLog
public Log getLog()
{    if (log == null) {        log = new SystemStreamLog();    }    return log;}
fa9e4eda7b811a8d71ff652bc68a1dbf0c70683fce93ed3ca71bb2cf254da71f
getPluginContext
public Map getPluginContext()
{    return pluginContext;}
2c2fb03bb53f7b60f9e6cedb8c9e676377a5d66147022c8237f26eedeff4504c
setPluginContext
public void setPluginContext(Map pluginContext)
{    this.pluginContext = pluginContext;}
8786ae1598557e2fc60806557d456da52f96c92fba28f02f9e8a59e21dc95e3a
getLongMessage
public String getLongMessage()
{    return longMessage;}
d31cfcc0b6b48313840cadaf89fd6992f7acb386ad6b25bba63a344c0884a6ee
getSource
public Object getSource()
{    return source;}
345e79f504a23e5b53f54930d7e01f191e855cd500fc60bdda621eec493957bb
getLanguage
public String getLanguage()
{    return getComponentFactory();}
d8e69827e8a460f65316bd1cfe439ebe9888ba1e85355ee02c0eab20e4fecfe1
setLanguage
public void setLanguage(String language)
{    setComponentFactory(language);}
ebac839d7556b651c14109926c534410d79937325778b5af3df9de13ebc4e66c
getDeprecated
public String getDeprecated()
{    return deprecated;}
e06fd3b056489ef30bd31f821514a1632bcbf37d1962464d5a64a3821702f975
setDeprecated
public void setDeprecated(String deprecated)
{    this.deprecated = deprecated;}
45a8043f6581aba0cf47ec77fc955eb9e43af3bcafbb67e357102237522f26f8
getParameters
public List<Parameter> getParameters()
{    return parameters;}
6d4b94547b48b73056e79196ec75ef0e20b96729e1c0b79bd63e20674e589330
setParameters
public void setParameters(List<Parameter> parameters) throws DuplicateParameterException
{    for (Parameter parameter : parameters) {        addParameter(parameter);    }}
e2c30b4ac978b669187bd08cc7748645ab7f793b9f7c5c6be7fee8379dc920e2
addParameter
public void addParameter(Parameter parameter) throws DuplicateParameterException
{    if (parameters != null && parameters.contains(parameter)) {        throw new DuplicateParameterException(parameter.getName() + " has been declared multiple times in mojo with goal: " + getGoal() + " (implementation: " + getImplementation() + ")");    }    if (parameters == null) {        parameters = new LinkedList<>();    }    parameters.add(parameter);}
c8684b3b845b149cfd769a62133b29a7f4f6507defec19c45643b56702aa2fe6
getParameterMap
public Map<String, Parameter> getParameterMap()
{    if (parameterMap == null) {        parameterMap = new HashMap<>();        if (parameters != null) {            for (Parameter pd : parameters) {                parameterMap.put(pd.getName(), pd);            }        }    }    return parameterMap;}
17adb0b86fdaa0e967323d049d59e1d6abc393a2bbfff7d82b7a53c4c2c21c79
setDependencyResolutionRequired
public void setDependencyResolutionRequired(String requiresDependencyResolution)
{    this.dependencyResolutionRequired = requiresDependencyResolution;}
c7a16542da3763b6c82c31bbd6414be506841d46e8dde16617e5af0abd097648
getDependencyResolutionRequired
public String getDependencyResolutionRequired()
{    return dependencyResolutionRequired;}
cc8b977933563fb19ad1e656e0e3b70a2d0e172d1511cab4298de92201ab623f
isDependencyResolutionRequired
public String isDependencyResolutionRequired()
{    return dependencyResolutionRequired;}
fe737624ebffdbb065eb78c5b6220dbd76ac1b4ae3fd9f4c6e7e45b345512768
setDependencyCollectionRequired
public void setDependencyCollectionRequired(String requiresDependencyCollection)
{    this.dependencyCollectionRequired = requiresDependencyCollection;}
cff2c26ea14c52325adff6e193e20b15962b11e11a29d22898c6658c03027fa6
getDependencyCollectionRequired
public String getDependencyCollectionRequired()
{    return dependencyCollectionRequired;}
e95d156d46830e54b7a62244765de17918ef636d2f1bf33a25ad66f846143017
setProjectRequired
public void setProjectRequired(boolean requiresProject)
{    this.projectRequired = requiresProject;}
86c8daf5f8de73170baec1ec209b2f45163014f400c67f86b973571a5c0ef2ef
isProjectRequired
public boolean isProjectRequired()
{    return projectRequired;}
aface8e4962808357649db1058c8ba9a7a503d573a54880211572b30852abccd
setOnlineRequired
public void setOnlineRequired(boolean requiresOnline)
{    this.onlineRequired = requiresOnline;}
7b51c9ecb9a3ec5407a7ec66d4d7125e4d2568c5edcb0139cddc5733a8dce887
isOnlineRequired
public boolean isOnlineRequired()
{    return onlineRequired;}
b4e46500d54eaaafb994a6b8eb21a86cebf5bf6c71ac2870ee74613758bfbc06
requiresOnline
public boolean requiresOnline()
{    return onlineRequired;}
238df31d8f26ed1cbf5ea4a0a911efba67664a4b9c5ba563073ed306c4977233
getPhase
public String getPhase()
{    return phase;}
63d537c12a0b389cec50af364298f1146c3ca66632c632d89568a48fea40d8d7
setPhase
public void setPhase(String phase)
{    this.phase = phase;}
38685ed358e8f59b9a50f47692485480b781f2f8735fc3808ddd7e35b6f0d36d
getSince
public String getSince()
{    return since;}
8e891fffb6f683d7328463c75ed094067a98b6079ae9dfd08e7ede5bd9eb0090
setSince
public void setSince(String since)
{    this.since = since;}
9082fc77639536bd0806cf5ff8e124732907b588c0a1ce3bbdf3069504999815
getGoal
public String getGoal()
{    return goal;}
e3d2cc5c87f45839004cd192d5f7cab2663199640c568e1de65c56f6d60e05a8
setGoal
public void setGoal(String goal)
{    this.goal = goal;}
dfee75cbc1acc1d1fae8f0c7754a0ef5a5cf2b6d9bec54134e1e71b0a7733d16
getExecutePhase
public String getExecutePhase()
{    return executePhase;}
0446f3f149d9cc4dc4ce9c2358a33d901c2f3d8eb9b6ec37bf200a42d719a9f2
setExecutePhase
public void setExecutePhase(String executePhase)
{    this.executePhase = executePhase;}
651dcb2fb7d2f22d331a077da0410d77db2df59ecef1efebf230fb5d2c318144
alwaysExecute
public boolean alwaysExecute()
{    return MULTI_PASS_EXEC_STRATEGY.equals(executionStrategy);}
ad3416b3f2e8d92deab30dc1fefdfa85e0d08fef912fff5965b69ccfe1c25376
getExecutionStrategy
public String getExecutionStrategy()
{    return executionStrategy;}
3d7cce637df29bb0728ebab6c32475c038a3b68b418843c42cf44933b7e1b7c4
setExecutionStrategy
public void setExecutionStrategy(String executionStrategy)
{    this.executionStrategy = executionStrategy;}
e6806ea022d7c561b32465ee5ca49dae8c4948b796da30544ed15e1df0230cdf
getMojoConfiguration
public PlexusConfiguration getMojoConfiguration()
{    if (mojoConfiguration == null) {        mojoConfiguration = new XmlPlexusConfiguration("configuration");    }    return mojoConfiguration;}
3d2b2187343d96d5716994b33616869b81566ee5865e8c384e0f42aec3df88bc
setMojoConfiguration
public void setMojoConfiguration(PlexusConfiguration mojoConfiguration)
{    this.mojoConfiguration = mojoConfiguration;}
1ddbb75d0ee91d64180c5ad6be25474fa754e5ebca48b1ff09fa8666b55d37a2
getRole
public String getRole()
{    return Mojo.ROLE;}
57042e2d08911a37de2758cab3393f981a0017a0065beeb7ffcde1ddaabfccaa
getRoleHint
public String getRoleHint()
{    return getId();}
09e8f13a9a603d31d64bb498b77d15572483824d843d0e82a570643192f62186
getId
public String getId()
{    return getPluginDescriptor().getId() + ":" + getGoal();}
67e85f9ab18b8717af8c5cac244750e585c6139d7887c2273a8cba8f3a24c926
getFullGoalName
public String getFullGoalName()
{    return getPluginDescriptor().getGoalPrefix() + ":" + getGoal();}
618d5399cb8fdfe87ba0e41f4dc09577f1a960037a2d58dabf8514613b5ba5d9
getComponentType
public String getComponentType()
{    return MAVEN_PLUGIN;}
e390e4eeed94ef2144b8c2c39fb6c8bd579dfc9c27b5a1ab9180ce5ca362baec
getPluginDescriptor
public PluginDescriptor getPluginDescriptor()
{    return pluginDescriptor;}
94fddd999ec095ccd4e56ab5e0ea03c13c4599f6e9386c29fc5c2f5f2d5c3e56
setPluginDescriptor
public void setPluginDescriptor(PluginDescriptor pluginDescriptor)
{    this.pluginDescriptor = pluginDescriptor;}
c3a69840d6fe75c300e902efd687ac309e4482441a19d78f1c1d53fef791392b
isInheritedByDefault
public boolean isInheritedByDefault()
{    return inheritedByDefault;}
256368852f6e28b555cda102b267025fc91eed2e9773a6b20a6c3d2553101228
setInheritedByDefault
public void setInheritedByDefault(boolean inheritedByDefault)
{    this.inheritedByDefault = inheritedByDefault;}
823cf3c2c9b350a7bec8e1eb75128d5ae596967491202ff2de1826c2d457281c
equals
public boolean equals(Object object)
{    if (this == object) {        return true;    }    if (object instanceof MojoDescriptor) {        MojoDescriptor other = (MojoDescriptor) object;        if (!compareObjects(getPluginDescriptor(), other.getPluginDescriptor())) {            return false;        }        return compareObjects(getGoal(), other.getGoal());    }    return false;}
6aaeaeb4254433dfe7f2daf9d9940e08ccdb3fafe0c6c7210b60abb7cffc9897
compareObjects
private boolean compareObjects(Object first, Object second)
{    if (first == second) {        return true;    }    if (first == null || second == null) {        return false;    }    return first.equals(second);}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    int result = 1;    String goal = getGoal();    if (goal != null) {        result += goal.hashCode();    }    PluginDescriptor pd = getPluginDescriptor();    if (pd != null) {        result -= pd.hashCode();    }    return result;}
c23155168d70a2c9a96825ff6f0f125de975fa0ef89618e56b4139ff0389cf7c
getExecuteLifecycle
public String getExecuteLifecycle()
{    return executeLifecycle;}
147fd67de8eb35aa9020f11a86023b268dd065d2390786b64bdac6f2216befc1
setExecuteLifecycle
public void setExecuteLifecycle(String executeLifecycle)
{    this.executeLifecycle = executeLifecycle;}
f9afd836af47aa2884bf2aa7281209195b514a34676ea3eefb1c6c035c728ae2
setAggregator
public void setAggregator(boolean aggregator)
{    this.aggregator = aggregator;}
1ff9d437799c82a96cf16b513dc7df0cb3abf962dfa85bc90f9ba519dd37be6b
isAggregator
public boolean isAggregator()
{    return aggregator;}
c6912249ba02ae83c21119f89141548739c57f8dfdb9a042711841c933c970e9
isDirectInvocationOnly
public boolean isDirectInvocationOnly()
{    return directInvocationOnly;}
84cfa43fa3c0654bbbca16e7ef6d50c581ea1c9f5d4e47987a1d7933bf32fe68
setDirectInvocationOnly
public void setDirectInvocationOnly(boolean directInvocationOnly)
{    this.directInvocationOnly = directInvocationOnly;}
9e024b247a8f6257eaeca5b57ed70cf960cba12199a522e8210231c5ab2a0881
isRequiresReports
public boolean isRequiresReports()
{    return requiresReports;}
0be83c05d6c02ded035178f598ca1217a7e8f86ad352d10a07ead6e917f9f74f
setRequiresReports
public void setRequiresReports(boolean requiresReports)
{    this.requiresReports = requiresReports;}
c737601fb3707aebbcb650cf68294d5ef9e0f481492e049c29ce0fa66fa423de
setExecuteGoal
public void setExecuteGoal(String executeGoal)
{    this.executeGoal = executeGoal;}
b4625e4b7692df2f158b7ad0e19ccaf951afff3a691ba01d3309b673bdf62b6e
getExecuteGoal
public String getExecuteGoal()
{    return executeGoal;}
659bb0ef65957ab00526216235a01ecaf9eaa80c544708510a253606cc331983
isThreadSafe
public boolean isThreadSafe()
{    return threadSafe;}
858cd03fd13a37c5a517d40dd87e4f4ab1ad457782d7e0b55536f2ffa22c835b
setThreadSafe
public void setThreadSafe(boolean threadSafe)
{    this.threadSafe = threadSafe;}
9ad6491b094daed0c416ae4e6b480caca8f4a85ec799c39a80e8315d39236b57
isForking
public boolean isForking()
{    return (getExecuteGoal() != null && getExecuteGoal().length() > 0) || (getExecutePhase() != null && getExecutePhase().length() > 0);}
c3ce353cef2238fb42a29a0e987df9e6da9b6748696d3e045b50faab13e52796
clone
public MojoDescriptor clone()
{    try {        return (MojoDescriptor) super.clone();    } catch (CloneNotSupportedException e) {        throw new UnsupportedOperationException(e);    }}
239fbe3eb64d679cbac1161825b07d6a8436ead3c6c3d140d9caec2275827023
getName
public String getName()
{    return name;}
f498f22eaf0816bf385a43365651d1b6d0455905fdd2d6be01ceefeb84e8f432
setName
public void setName(String name)
{    this.name = name;}
624f725337dde847c4a699397a02f1b5558c709c88374adb10e603d835f48c88
getType
public String getType()
{    return type;}
8ab53042064bb8f4e31355121ce5a5ccc6f3b8e9227cceb605ae26d51b21bddd
setType
public void setType(String type)
{    this.type = type;}
216484d8461748efc76b2c389fc93a5dc3ab8fa3805241385a036e4db4efb997
isRequired
public boolean isRequired()
{    return required;}
4420776bd3b1ef5422a1e92569ffaf266af04c02028dc4a6e7c7b5471fcdabcf
setRequired
public void setRequired(boolean required)
{    this.required = required;}
706203ef14181d53971fddf5ab6603fcf31442cdccb19cc5e237bca9faee9d63
getDescription
public String getDescription()
{    return description;}
1a211ebf68b221c2c3c67d58559d636c48c482bac17440249777eb28f553a9ad
setDescription
public void setDescription(String description)
{    this.description = description;}
747b6115ad290211fe9c732a1673c80e3ab8293cad92382e1e50e4da076fa750
getExpression
public String getExpression()
{    return expression;}
f1194fc4c38f8c863daab12448dd85168d73a2d2757250eca74701eaa90c0984
setExpression
public void setExpression(String expression)
{    this.expression = expression;}
ebac839d7556b651c14109926c534410d79937325778b5af3df9de13ebc4e66c
getDeprecated
public String getDeprecated()
{    return deprecated;}
e06fd3b056489ef30bd31f821514a1632bcbf37d1962464d5a64a3821702f975
setDeprecated
public void setDeprecated(String deprecated)
{    this.deprecated = deprecated;}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    return name.hashCode();}
74e378df448c6c3cd090d6daf881cfac8957dd555869ea4c13a46bdc6cdcf9a6
equals
public boolean equals(Object other)
{    return (other instanceof Parameter) && getName().equals(((Parameter) other).getName());}
f623a8f047126a9c11843783d9a3f95a07d46f4de9d40050bb830e24346a8d0f
getAlias
public String getAlias()
{    return alias;}
f9d23d5a63c6b5ab2c4d87437cc439a69d642465b00185931f07987298c1b7a6
setAlias
public void setAlias(String alias)
{    this.alias = alias;}
34c9dc4d7e298b0ce279ef2487ac4feffafe38238e8bd26e6483db9944f409b2
isEditable
public boolean isEditable()
{    return editable;}
79ac8e55bfd64c36ceaa5ae31b6f3f8d4a5a51515e394b9e2b3db93d781dc32c
setEditable
public void setEditable(boolean editable)
{    this.editable = editable;}
c3d5165114bf824442529a36e4b45ff75eaaa040bd046f1e16cc20a83823218d
setDefaultValue
public void setDefaultValue(String defaultValue)
{    this.defaultValue = defaultValue;}
ee9bb53fab9c4745c45b4a746144b80867aad2e218c71e071dfc47288e0c0313
getDefaultValue
public String getDefaultValue()
{    return defaultValue;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    return "Mojo parameter [name: \'" + getName() + "\'; alias: \'" + getAlias() + "\']";}
f9a0bb49fc0728c6d110ee6d4a517369106f706a375e0ba64c1123225d5ab8b0
getRequirement
public Requirement getRequirement()
{    return requirement;}
b62c107f7b70ceca0953ae9aca190f1505a37975a5d32dd59da7c19521fa2193
setRequirement
public void setRequirement(Requirement requirement)
{    this.requirement = requirement;}
aef2d9b3e6adde84311e6e1e4e4ef04625d606e16d95f1f9a38778d6dfeb9b81
getImplementation
public String getImplementation()
{    return implementation;}
f2dd0007c29d8d3d405f8925ea180eaa98de33d1ff7619ed29a15222d54aa4d7
setImplementation
public void setImplementation(String implementation)
{    this.implementation = implementation;}
38685ed358e8f59b9a50f47692485480b781f2f8735fc3808ddd7e35b6f0d36d
getSince
public String getSince()
{    return since;}
8e891fffb6f683d7328463c75ed094067a98b6079ae9dfd08e7ede5bd9eb0090
setSince
public void setSince(String since)
{    this.since = since;}
65e0ddbe3b148475bd3b9dd16d18fe3f24fc473f1db577db9fc32a2117fd3cc6
clone
public Parameter clone()
{    try {        return (Parameter) super.clone();    } catch (CloneNotSupportedException e) {        throw new UnsupportedOperationException(e);    }}
2e469c696e73fd924dc2c5211a1a86b0516ae0d89978bb341ac7b5dbf0e30ff4
getMojos
public List<MojoDescriptor> getMojos()
{    return (List) getComponents();}
84285c18b563ab0f8326cc4bc1d117ba305363cd5f36ddd3b0ffaa741bc48f39
addMojo
public void addMojo(MojoDescriptor mojoDescriptor) throws DuplicateMojoDescriptorException
{    MojoDescriptor existing = null;                List<MojoDescriptor> mojos = getMojos();    if (mojos != null && mojos.contains(mojoDescriptor)) {        int indexOf = mojos.indexOf(mojoDescriptor);        existing = mojos.get(indexOf);    }    if (existing != null) {        throw new DuplicateMojoDescriptorException(getGoalPrefix(), mojoDescriptor.getGoal(), existing.getImplementation(), mojoDescriptor.getImplementation());    } else {        addComponentDescriptor(mojoDescriptor);    }}
9590314d7a6edd0118345714cc714a8e73448e57e702bb4c6893b363f509d64d
getGroupId
public String getGroupId()
{    return groupId;}
71bcb3c91e0d464929235253ed6afcc351b3e9058163242c449a951b7b882841
setGroupId
public void setGroupId(String groupId)
{    this.groupId = groupId;}
1e5191dc99d9314f2df50294bcd8d717af7b8f4311575d36d8d75b27121f1064
getArtifactId
public String getArtifactId()
{    return artifactId;}
20cbd85c6b33f77aed396f8e4100794ba5666a5469aea43d797e8b46e9761df1
setArtifactId
public void setArtifactId(String artifactId)
{    this.artifactId = artifactId;}
1abc8209ce4a5e1027436a085fe3c645a77f41e7e06067bfc045a3effb51dc8d
constructPluginKey
public static String constructPluginKey(String groupId, String artifactId, String version)
{    return groupId + ":" + artifactId + ":" + version;}
7db2011695cbe0edfa84b650ef883457c6f50b7fd80161475be05e531234fdbc
getPluginLookupKey
public String getPluginLookupKey()
{    return groupId + ":" + artifactId;}
09e8f13a9a603d31d64bb498b77d15572483824d843d0e82a570643192f62186
getId
public String getId()
{    return constructPluginKey(groupId, artifactId, version);}
f6aa4b5d70c77968fb8c2a3e4b14dc23b8ba6e74b254bddfac9d511f28d28778
getDefaultPluginArtifactId
public static String getDefaultPluginArtifactId(String id)
{    return "maven-" + id + "-plugin";}
f915013ca3a52fa5fc51251d6f4b90d91171ebb902b94e3fe39addf956254cb5
getDefaultPluginGroupId
public static String getDefaultPluginGroupId()
{    return "org.apache.maven.plugins";}
6faa868432e4d15176ecdca12ce0a7536beb350bee975c4eb179af641a8bdf43
getGoalPrefixFromArtifactId
public static String getGoalPrefixFromArtifactId(String artifactId)
{    if ("maven-plugin-plugin".equals(artifactId)) {        return "plugin";    } else {        return artifactId.replaceAll("-?maven-?", "").replaceAll("-?plugin-?", "");    }}
8303f4972c4009f5e14822ebcc166180ae73daf2ad64d3de2188b2ebddadba07
getGoalPrefix
public String getGoalPrefix()
{    return goalPrefix;}
17dde79507d5ec3af05d73dcae3882ce70e043e72c81e2645fba7391268251e1
setGoalPrefix
public void setGoalPrefix(String goalPrefix)
{    this.goalPrefix = goalPrefix;}
fa655d76002df94322c0d82cb5fbadecc48b0bb7bb0e58203d0a274985fccd86
setVersion
public void setVersion(String version)
{    this.version = version;}
446b3b91c7c41085df1dc5542616b89ccd409f6a1d45e4d60d3ca00ac839ecf0
getVersion
public String getVersion()
{    return version;}
d57b630a432828ab4cae20dd742ae31b73be5d282f67404d4a4b739bf68622a9
setSource
public void setSource(String source)
{    this.source = source;}
c544784f026afebea24caaff889181a15292a98786506cbfc66814257976c7b9
getSource
public String getSource()
{    return source;}
c3a69840d6fe75c300e902efd687ac309e4482441a19d78f1c1d53fef791392b
isInheritedByDefault
public boolean isInheritedByDefault()
{    return inheritedByDefault;}
256368852f6e28b555cda102b267025fc91eed2e9773a6b20a6c3d2553101228
setInheritedByDefault
public void setInheritedByDefault(boolean inheritedByDefault)
{    this.inheritedByDefault = inheritedByDefault;}
a0643fa51f5c50a137f4c462d6e6ca72900bdcb1f098a11391a7572bc24da55e
getArtifacts
public List<Artifact> getArtifacts()
{    return artifacts;}
30972cbfae077e26617289169fa3bd1fa3ff7a0086ba47f586cb439c241fde7b
setArtifacts
public void setArtifacts(List<Artifact> artifacts)
{    this.artifacts = artifacts;        artifactMap = null;}
92aff013ac1e5c8033bb1761799d3b85f9a24406729c3ec77d55d1c7477883b8
getArtifactMap
public Map<String, Artifact> getArtifactMap()
{    if (artifactMap == null) {        artifactMap = ArtifactUtils.artifactMapByVersionlessId(getArtifacts());    }    return artifactMap;}
823cf3c2c9b350a7bec8e1eb75128d5ae596967491202ff2de1826c2d457281c
equals
public boolean equals(Object object)
{    if (this == object) {        return true;    }    return object instanceof PluginDescriptor && getId().equals(((PluginDescriptor) object).getId());}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    return 10 + getId().hashCode();}
84a4b143f492dc72e2c2fbf9b7bbd1e8a3b238efa1dce95d57ec13a7359661b7
getMojo
public MojoDescriptor getMojo(String goal)
{    if (getMojos() == null) {                return null;    }        for (MojoDescriptor desc : getMojos()) {        if (goal.equals(desc.getGoal())) {            return desc;        }    }    return null;}
3397f08fcc9666661f1a607685d4d58bbf7f760cceff7f81b6dd86cb12b9f30e
setClassRealm
public void setClassRealm(ClassRealm classRealm)
{    this.classRealm = classRealm;}
41b95a701d5ea67ed5412b37319f1271a238f18a1d7643168356b36e4e17b887
getClassRealm
public ClassRealm getClassRealm()
{    return classRealm;}
29418c39c5bdbf3996c95698bd99f36901cfb2a3d4192c361770055f183522f7
setIntroducedDependencyArtifacts
public void setIntroducedDependencyArtifacts(Set<Artifact> introducedDependencyArtifacts)
{    this.introducedDependencyArtifacts = introducedDependencyArtifacts;}
3de1915389b14e185dea99af26ca27ae16284c44154637b567ba10ab4e56c349
getIntroducedDependencyArtifacts
public Set<Artifact> getIntroducedDependencyArtifacts()
{    return (introducedDependencyArtifacts != null) ? introducedDependencyArtifacts : Collections.<Artifact>emptySet();}
f498f22eaf0816bf385a43365651d1b6d0455905fdd2d6be01ceefeb84e8f432
setName
public void setName(String name)
{    this.name = name;}
239fbe3eb64d679cbac1161825b07d6a8436ead3c6c3d140d9caec2275827023
getName
public String getName()
{    return name;}
1a211ebf68b221c2c3c67d58559d636c48c482bac17440249777eb28f553a9ad
setDescription
public void setDescription(String description)
{    this.description = description;}
706203ef14181d53971fddf5ab6603fcf31442cdccb19cc5e237bca9faee9d63
getDescription
public String getDescription()
{    return description;}
c8ec0bb177010f4d576864b4c9376d9f712d62f85221b6367cec1c85dc4bd5e0
setRequiredMavenVersion
public void setRequiredMavenVersion(String requiredMavenVersion)
{    this.requiredMavenVersion = requiredMavenVersion;}
3eb61cacac501f4178a728de5d17ad6d8aeabc06fd5db436a356e61bb9cd0f65
getRequiredMavenVersion
public String getRequiredMavenVersion()
{    return requiredMavenVersion;}
1987d1f3ce9b47199f3668cae33f3a3d455ede266d2002668e582a0f0bd2c9f9
setPlugin
public void setPlugin(Plugin plugin)
{    this.plugin = plugin;}
73b43cf9677adc9b3dcd547ea67954af9521f47fc5ca326c40bf0c5890ba2d96
getPlugin
public Plugin getPlugin()
{    return plugin;}
d6a31f34c8563bd4f577ee744569962abda4891cba606780916938feafee8bb3
getPluginArtifact
public Artifact getPluginArtifact()
{    return pluginArtifact;}
93505017d89abd53c57d354998322ba8bd3dd7434e808c248e49f517d3985df0
setPluginArtifact
public void setPluginArtifact(Artifact pluginArtifact)
{    this.pluginArtifact = pluginArtifact;}
63585d682f5597b148011f1dbae43dc9b7c1e74f78d87a080cef3d3f6b3e7393
getLifecycleMapping
public Lifecycle getLifecycleMapping(String lifecycleId) throws IOException, XmlPullParserException
{    if (lifecycleMappings == null) {        LifecycleConfiguration lifecycleConfiguration;        try (Reader reader = ReaderFactory.newXmlReader(getDescriptorStream(LIFECYCLE_DESCRIPTOR))) {            lifecycleConfiguration = new LifecycleMappingsXpp3Reader().read(reader);        }        lifecycleMappings = new HashMap<>();        for (Lifecycle lifecycle : lifecycleConfiguration.getLifecycles()) {            lifecycleMappings.put(lifecycle.getId(), lifecycle);        }    }    return lifecycleMappings.get(lifecycleId);}
69dc625f3dc4e12e7f88d172b5501a6f43deafb90b255bc2862ed7b457f49d72
getDescriptorStream
private InputStream getDescriptorStream(String descriptor) throws IOException
{    File pluginFile = (pluginArtifact != null) ? pluginArtifact.getFile() : null;    if (pluginFile == null) {        throw new IllegalStateException("plugin main artifact has not been resolved for " + getId());    }    if (pluginFile.isFile()) {        try {            return new URL("jar:" + pluginFile.toURI() + "!/" + descriptor).openStream();        } catch (MalformedURLException e) {            throw new IllegalStateException(e);        }    } else {        return new FileInputStream(new File(pluginFile, descriptor));    }}
47f04d40308a14ebfa62bfe70660a1be7b61ef927ee42919b51d3c9738443b54
clone
public PluginDescriptor clone()
{    try {        return (PluginDescriptor) super.clone();    } catch (CloneNotSupportedException e) {        throw new UnsupportedOperationException(e);    }}
a6cd4e60de8eb114e66b787c0a8fcccc2f3226561cb47531969a878a0208bce3
build
public PluginDescriptor build(Reader reader) throws PlexusConfigurationException
{    return build(reader, null);}
4ec175930b90114d6d77c685a16210075625e1cf9fc2ccd25304414b6a66ace2
build
public PluginDescriptor build(Reader reader, String source) throws PlexusConfigurationException
{    PlexusConfiguration c = buildConfiguration(reader);    PluginDescriptor pluginDescriptor = new PluginDescriptor();    pluginDescriptor.setSource(source);    pluginDescriptor.setGroupId(c.getChild("groupId").getValue());    pluginDescriptor.setArtifactId(c.getChild("artifactId").getValue());    pluginDescriptor.setVersion(c.getChild("version").getValue());    pluginDescriptor.setGoalPrefix(c.getChild("goalPrefix").getValue());    pluginDescriptor.setName(c.getChild("name").getValue());    pluginDescriptor.setDescription(c.getChild("description").getValue());    String isolatedRealm = c.getChild("isolatedRealm").getValue();    if (isolatedRealm != null) {        pluginDescriptor.setIsolatedRealm(Boolean.parseBoolean(isolatedRealm));    }    String inheritedByDefault = c.getChild("inheritedByDefault").getValue();    if (inheritedByDefault != null) {        pluginDescriptor.setInheritedByDefault(Boolean.parseBoolean(inheritedByDefault));    }                PlexusConfiguration[] mojoConfigurations = c.getChild("mojos").getChildren("mojo");    for (PlexusConfiguration component : mojoConfigurations) {        MojoDescriptor mojoDescriptor = buildComponentDescriptor(component, pluginDescriptor);        pluginDescriptor.addMojo(mojoDescriptor);    }                PlexusConfiguration[] dependencyConfigurations = c.getChild("dependencies").getChildren("dependency");    List<ComponentDependency> dependencies = new ArrayList<>();    for (PlexusConfiguration d : dependencyConfigurations) {        ComponentDependency cd = new ComponentDependency();        cd.setArtifactId(d.getChild("artifactId").getValue());        cd.setGroupId(d.getChild("groupId").getValue());        cd.setType(d.getChild("type").getValue());        cd.setVersion(d.getChild("version").getValue());        dependencies.add(cd);    }    pluginDescriptor.setDependencies(dependencies);    return pluginDescriptor;}
a828dde037ffa1b6a1b90ce56c7a5d63c9c335f9871b8967f55e61941076844f
buildComponentDescriptor
public MojoDescriptor buildComponentDescriptor(PlexusConfiguration c, PluginDescriptor pluginDescriptor) throws PlexusConfigurationException
{    MojoDescriptor mojo = new MojoDescriptor();    mojo.setPluginDescriptor(pluginDescriptor);    mojo.setGoal(c.getChild("goal").getValue());    mojo.setImplementation(c.getChild("implementation").getValue());    PlexusConfiguration langConfig = c.getChild("language");    if (langConfig != null) {        mojo.setLanguage(langConfig.getValue());    }    PlexusConfiguration configuratorConfig = c.getChild("configurator");    if (configuratorConfig != null) {        mojo.setComponentConfigurator(configuratorConfig.getValue());    }    PlexusConfiguration composerConfig = c.getChild("composer");    if (composerConfig != null) {        mojo.setComponentComposer(composerConfig.getValue());    }    String since = c.getChild("since").getValue();    if (since != null) {        mojo.setSince(since);    }    PlexusConfiguration deprecated = c.getChild("deprecated", false);    if (deprecated != null) {        mojo.setDeprecated(deprecated.getValue());    }    String phase = c.getChild("phase").getValue();    if (phase != null) {        mojo.setPhase(phase);    }    String executePhase = c.getChild("executePhase").getValue();    if (executePhase != null) {        mojo.setExecutePhase(executePhase);    }    String executeMojo = c.getChild("executeGoal").getValue();    if (executeMojo != null) {        mojo.setExecuteGoal(executeMojo);    }    String executeLifecycle = c.getChild("executeLifecycle").getValue();    if (executeLifecycle != null) {        mojo.setExecuteLifecycle(executeLifecycle);    }    mojo.setInstantiationStrategy(c.getChild("instantiationStrategy").getValue());    mojo.setDescription(c.getChild("description").getValue());    PlexusConfiguration dependencyResolution = c.getChild("requiresDependencyResolution", false);    if (dependencyResolution != null) {        mojo.setDependencyResolutionRequired(dependencyResolution.getValue());    }    PlexusConfiguration dependencyCollection = c.getChild("requiresDependencyCollection", false);    if (dependencyCollection != null) {        mojo.setDependencyCollectionRequired(dependencyCollection.getValue());    }    String directInvocationOnly = c.getChild("requiresDirectInvocation").getValue();    if (directInvocationOnly != null) {        mojo.setDirectInvocationOnly(Boolean.parseBoolean(directInvocationOnly));    }    String requiresProject = c.getChild("requiresProject").getValue();    if (requiresProject != null) {        mojo.setProjectRequired(Boolean.parseBoolean(requiresProject));    }    String requiresReports = c.getChild("requiresReports").getValue();    if (requiresReports != null) {        mojo.setRequiresReports(Boolean.parseBoolean(requiresReports));    }    String aggregator = c.getChild("aggregator").getValue();    if (aggregator != null) {        mojo.setAggregator(Boolean.parseBoolean(aggregator));    }    String requiresOnline = c.getChild("requiresOnline").getValue();    if (requiresOnline != null) {        mojo.setOnlineRequired(Boolean.parseBoolean(requiresOnline));    }    String inheritedByDefault = c.getChild("inheritedByDefault").getValue();    if (inheritedByDefault != null) {        mojo.setInheritedByDefault(Boolean.parseBoolean(inheritedByDefault));    }    String threadSafe = c.getChild("threadSafe").getValue();    if (threadSafe != null) {        mojo.setThreadSafe(Boolean.parseBoolean(threadSafe));    }                PlexusConfiguration mojoConfig = c.getChild("configuration");    mojo.setMojoConfiguration(mojoConfig);                PlexusConfiguration[] parameterConfigurations = c.getChild("parameters").getChildren("parameter");    List<Parameter> parameters = new ArrayList<>();    for (PlexusConfiguration d : parameterConfigurations) {        Parameter parameter = new Parameter();        parameter.setName(d.getChild("name").getValue());        parameter.setAlias(d.getChild("alias").getValue());        parameter.setType(d.getChild("type").getValue());        String required = d.getChild("required").getValue();        parameter.setRequired(Boolean.parseBoolean(required));        PlexusConfiguration editableConfig = d.getChild("editable");                if (editableConfig != null) {            String editable = d.getChild("editable").getValue();            parameter.setEditable(editable == null || Boolean.parseBoolean(editable));        }        parameter.setDescription(d.getChild("description").getValue());        parameter.setDeprecated(d.getChild("deprecated").getValue());        parameter.setImplementation(d.getChild("implementation").getValue());        parameter.setSince(d.getChild("since").getValue());        PlexusConfiguration paramConfig = mojoConfig.getChild(parameter.getName(), false);        if (paramConfig != null) {            parameter.setExpression(paramConfig.getValue(null));            parameter.setDefaultValue(paramConfig.getAttribute("default-value"));        }        parameters.add(parameter);    }    mojo.setParameters(parameters);                    PlexusConfiguration[] requirements = c.getChild("requirements").getChildren("requirement");    for (PlexusConfiguration requirement : requirements) {        ComponentRequirement cr = new ComponentRequirement();        cr.setRole(requirement.getChild("role").getValue());        cr.setRoleHint(requirement.getChild("role-hint").getValue());        cr.setFieldName(requirement.getChild("field-name").getValue());        mojo.addRequirement(cr);    }    return mojo;}
83ae5ddb4bdddf44fa404f471654785193862197793c9b4f4ccf221cefad0efc
buildConfiguration
public PlexusConfiguration buildConfiguration(Reader configuration) throws PlexusConfigurationException
{    try {        return new XmlPlexusConfiguration(Xpp3DomBuilder.build(configuration));    } catch (IOException | XmlPullParserException e) {        throw new PlexusConfigurationException(e.getMessage(), e);    }}
1ddbb75d0ee91d64180c5ad6be25474fa754e5ebca48b1ff09fa8666b55d37a2
getRole
public String getRole()
{    return role;}
57042e2d08911a37de2758cab3393f981a0017a0065beeb7ffcde1ddaabfccaa
getRoleHint
public String getRoleHint()
{    return roleHint;}
dd8e17df6c0e328cd96b8f5ee331416678e0bc6b16f1ea8a0eecb7ed49af5f4e
clone
public Requirement clone()
{    try {        return (Requirement) super.clone();    } catch (CloneNotSupportedException e) {        throw new UnsupportedOperationException(e);    }}
d7a67a3a6316e14e7bb3b1589f54066b465c10e33c94236edccd2a4ea2bda185
debug
public void debug(CharSequence content)
{    print("debug", content);}
37bc80bc637a5a370ee2f7688dc9aa6ac84dda0b74b78db37b44838bd6406190
debug
public void debug(CharSequence content, Throwable error)
{    print("debug", content, error);}
6131910a083c5f50cddf103acd8afc8094ee881b916aaf7ce23e76915f5d8c20
debug
public void debug(Throwable error)
{    print("debug", error);}
02e221445c2ecbc120eda0f189c7e4849271d1f430c16c1cf2fd49ed2f683f48
info
public void info(CharSequence content)
{    print("info", content);}
6de1585359f5b6cb6475a560ec3bcc1d4f81bf0dc89220ca898bac5c540f27d9
info
public void info(CharSequence content, Throwable error)
{    print("info", content, error);}
614e4a6e6be2604916a79bdb8c045993ab0c50982509c336169ee51ca7dc3636
info
public void info(Throwable error)
{    print("info", error);}
c26b5169e9c507ee2e68f6c59890fa76681e9642e03381cc98669492948afeef
warn
public void warn(CharSequence content)
{    print("warn", content);}
b64076c63917d39c54f680b5be7cb712ddbadccae407023d92d58f1fa48b5712
warn
public void warn(CharSequence content, Throwable error)
{    print("warn", content, error);}
b1a5c2449f7ac54a3ef9ad44059024f8e2a0fa98296cc5d1478f533299419d0f
warn
public void warn(Throwable error)
{    print("warn", error);}
2a10e6d560ad6b3eb9925618be15af241633561c3bffd98ddbf5684df0cf8bd6
error
public void error(CharSequence content)
{    System.err.println("[error] " + content.toString());}
0364a39fab00ebd2612ea1ff69daa218623f655341fd940622a344e961ea338d
error
public void error(CharSequence content, Throwable error)
{    StringWriter sWriter = new StringWriter();    PrintWriter pWriter = new PrintWriter(sWriter);    error.printStackTrace(pWriter);    System.err.println("[error] " + content.toString() + "\n\n" + sWriter.toString());}
2ac69be8081dcdbc14a41bfb38d76be2a44da1209a74268771586d5b60f3de47
error
public void error(Throwable error)
{    StringWriter sWriter = new StringWriter();    PrintWriter pWriter = new PrintWriter(sWriter);    error.printStackTrace(pWriter);    System.err.println("[error] " + sWriter.toString());}
78a12d10dabb3d8114aaac00c701b5b6aa7cbfaa2d8d5e567d835d24c4e4049e
isDebugEnabled
public boolean isDebugEnabled()
{        return false;}
791133a98f4bf579531e6f98c8eedc6a6b04fa18d00c49cc69e44fb34f1d7bfb
isInfoEnabled
public boolean isInfoEnabled()
{    return true;}
ed1cbf9afb39ae4c470fcb5327707d375fad568a93babe54ea77258009a55c9a
isWarnEnabled
public boolean isWarnEnabled()
{    return true;}
57f02ea050263534c4a0e031302153aeaf6c901a04ad56b7140d80df41a36abd
isErrorEnabled
public boolean isErrorEnabled()
{    return true;}
974f732dbb6c10585042d6304c933f889b981742509ab53c85f3dfdf39184fa5
print
private void print(String prefix, CharSequence content)
{    System.out.println("[" + prefix + "] " + content.toString());}
ddf47bbd57f3f222b317985041400a51a30c53f21e69c9be8c504517a761bd6c
print
private void print(String prefix, Throwable error)
{    StringWriter sWriter = new StringWriter();    PrintWriter pWriter = new PrintWriter(sWriter);    error.printStackTrace(pWriter);    System.out.println("[" + prefix + "] " + sWriter.toString());}
94f7767b78fbf33385fef2cb3dba057c23c7c0fdb4caedce875a2877ed1ea87e
print
private void print(String prefix, CharSequence content, Throwable error)
{    StringWriter sWriter = new StringWriter();    PrintWriter pWriter = new PrintWriter(sWriter);    error.printStackTrace(pWriter);    System.out.println("[" + prefix + "] " + content.toString() + "\n\n" + sWriter.toString());}
9082fc77639536bd0806cf5ff8e124732907b588c0a1ce3bbdf3069504999815
getGoal
public String getGoal()
{    return goal;}
e390e4eeed94ef2144b8c2c39fb6c8bd579dfc9c27b5a1ab9180ce5ca362baec
getPluginDescriptor
public PluginDescriptor getPluginDescriptor()
{    return pluginDescriptor;}
e61bb0109fe4a3b18d403a079b46ff0b229f9a871a7a4486f463d5cba809c8be
toMessage
private static String toMessage(String goal, PluginDescriptor pluginDescriptor)
{    StringBuilder buffer = new StringBuilder(256);    buffer.append("Could not find goal '").append(goal).append('\'');    if (pluginDescriptor != null) {        buffer.append(" in plugin ").append(pluginDescriptor.getId());        buffer.append(" among available goals ");        List<MojoDescriptor> mojos = pluginDescriptor.getMojos();        if (mojos != null) {            for (Iterator<MojoDescriptor> it = mojos.iterator(); it.hasNext(); ) {                MojoDescriptor mojo = it.next();                if (mojo != null) {                    buffer.append(mojo.getGoal());                }                if (it.hasNext()) {                    buffer.append(", ");                }            }        }    }    return buffer.toString();}
85bc3d9c0afa4aa35be6e0890f2f4a9dce10d08b954bfa05abb779d3ee20fe19
build
private PluginDescriptor build(String resource) throws IOException, PlexusConfigurationException
{    Reader reader = ReaderFactory.newXmlReader(getClass().getResourceAsStream(resource));    return new PluginDescriptorBuilder().build(reader);}
1b196de8b308eb8aeee06230a8dd8b9a9e531b97790594db426800b08b72f8af
testBuildReader
public void testBuildReader() throws Exception
{    PluginDescriptor pd = build("/plugin.xml");    assertEquals("org.apache.maven.plugins", pd.getGroupId());    assertEquals("maven-jar-plugin", pd.getArtifactId());    assertEquals("2.3-SNAPSHOT", pd.getVersion());    assertEquals("jar", pd.getGoalPrefix());    assertEquals("plugin-description", pd.getDescription());    assertEquals(false, pd.isIsolatedRealm());    assertEquals(true, pd.isInheritedByDefault());    assertEquals(2, pd.getMojos().size());    assertEquals(1, pd.getDependencies().size());    MojoDescriptor md = pd.getMojos().get(0);    assertEquals("jar", md.getGoal());    assertEquals("mojo-description", md.getDescription());    assertEquals("runtime", md.getDependencyResolutionRequired());    assertEquals("test", md.getDependencyCollectionRequired());    assertEquals(false, md.isAggregator());    assertEquals(false, md.isDirectInvocationOnly());    assertEquals(true, md.isInheritedByDefault());    assertEquals(false, md.isOnlineRequired());    assertEquals(true, md.isProjectRequired());    assertEquals(false, md.isThreadSafe());    assertEquals("package", md.getPhase());    assertEquals("org.apache.maven.plugin.jar.JarMojo", md.getImplementation());    assertEquals("antrun", md.getComponentConfigurator());    assertEquals("java", md.getLanguage());    assertEquals("per-lookup", md.getInstantiationStrategy());    assertEquals("some-goal", md.getExecuteGoal());    assertEquals("generate-sources", md.getExecutePhase());    assertEquals("cobertura", md.getExecuteLifecycle());    assertEquals("2.2", md.getSince());    assertEquals("deprecated-mojo", md.getDeprecated());    assertEquals(1, md.getRequirements().size());    assertEquals(1, md.getParameters().size());    assertNotNull(md.getMojoConfiguration());    assertEquals(1, md.getMojoConfiguration().getChildCount());    PlexusConfiguration pc = md.getMojoConfiguration().getChild(0);    assertEquals("${jar.finalName}", pc.getValue());    assertEquals("${project.build.finalName}", pc.getAttribute("default-value"));    assertEquals("java.lang.String", pc.getAttribute("implementation"));    Parameter mp = md.getParameters().get(0);    assertEquals("finalName", mp.getName());    assertEquals("jarName", mp.getAlias());    assertEquals("java.lang.String", mp.getType());    assertEquals("java.lang.String", mp.getImplementation());    assertEquals(true, mp.isEditable());    assertEquals(false, mp.isRequired());    assertEquals("parameter-description", mp.getDescription());    assertEquals("deprecated-parameter", mp.getDeprecated());    assertEquals("${jar.finalName}", mp.getExpression());    assertEquals("${project.build.finalName}", mp.getDefaultValue());    assertEquals("3.0.0", mp.getSince());    ComponentRequirement cr = md.getRequirements().get(0);    assertEquals("org.codehaus.plexus.archiver.Archiver", cr.getRole());    assertEquals("jar", cr.getRoleHint());    assertEquals("jarArchiver", cr.getFieldName());    ComponentDependency cd = pd.getDependencies().get(0);    assertEquals("org.apache.maven", cd.getGroupId());    assertEquals("maven-plugin-api", cd.getArtifactId());    assertEquals("2.0.6", cd.getVersion());    assertEquals("jar", cd.getType());    md = pd.getMojos().get(1);    assertEquals("war", md.getGoal());    assertEquals(null, md.getDependencyResolutionRequired());    assertEquals(null, md.getDependencyCollectionRequired());    assertEquals(true, md.isThreadSafe());}
6c940192bf677e6abce628bed2ecb6c562143307f405eed25af4c8ce86f69f45
testLifecycleReader
public void testLifecycleReader() throws IOException, XmlPullParserException
{/*        LifecycleMappingsXpp3Reader reader = new LifecycleMappingsXpp3Reader();        LifecycleConfiguration config = reader.read( new InputStreamReader( getClass().getResourceAsStream( "/lifecycle.xml" ) ) );        assertEquals( "check number of lifecycles", 1, config.getLifecycles().size() );        Lifecycle l = (Lifecycle) config.getLifecycles().iterator().next();        assertEquals( "check id", "clover", l.getId() );        assertEquals( "check number of phases", 1, l.getPhases().size() );        Phase p = (Phase) l.getPhases().iterator().next();        assertEquals( "check id", "generate-sources", p.getId() );        assertEquals( "check number of executions", 1, p.getExecutions().size() );        Execution e = (Execution) p.getExecutions().iterator().next();        assertEquals( "check configuration", "true", ((Xpp3Dom) e.getConfiguration()).getChild( "debug" ).getValue() );        assertEquals( "check number of goals", 1, e.getGoals().size() );        String g = (String) e.getGoals().iterator().next();        assertEquals( "check goal", "clover:compiler", g );        */}
82501957cf749fcec8d119d3cdf861ef5d9da3bdb8f06a9d306bccc20a5b046f
populateResult
public void populateResult(RepositorySystemSession session, ArtifactDescriptorResult result, Model model)
{    ArtifactTypeRegistry stereotypes = session.getArtifactTypeRegistry();    for (Repository r : model.getRepositories()) {        result.addRepository(ArtifactDescriptorUtils.toRemoteRepository(r));    }    for (org.apache.maven.model.Dependency dependency : model.getDependencies()) {        result.addDependency(convert(dependency, stereotypes));    }    DependencyManagement mgmt = model.getDependencyManagement();    if (mgmt != null) {        for (org.apache.maven.model.Dependency dependency : mgmt.getDependencies()) {            result.addManagedDependency(convert(dependency, stereotypes));        }    }    Map<String, Object> properties = new LinkedHashMap<>();    Prerequisites prerequisites = model.getPrerequisites();    if (prerequisites != null) {        properties.put("prerequisites.maven", prerequisites.getMaven());    }    List<License> licenses = model.getLicenses();    properties.put("license.count", licenses.size());    for (int i = 0; i < licenses.size(); i++) {        License license = licenses.get(i);        properties.put("license." + i + ".name", license.getName());        properties.put("license." + i + ".url", license.getUrl());        properties.put("license." + i + ".comments", license.getComments());        properties.put("license." + i + ".distribution", license.getDistribution());    }    result.setProperties(properties);    setArtifactProperties(result, model);}
bfe3064e68865f195130c272701beb7dd62270cd41e59db665915908ed0b0a11
convert
private Dependency convert(org.apache.maven.model.Dependency dependency, ArtifactTypeRegistry stereotypes)
{    ArtifactType stereotype = stereotypes.get(dependency.getType());    if (stereotype == null) {        stereotype = new DefaultArtifactType(dependency.getType());    }    boolean system = dependency.getSystemPath() != null && dependency.getSystemPath().length() > 0;    Map<String, String> props = null;    if (system) {        props = Collections.singletonMap(ArtifactProperties.LOCAL_PATH, dependency.getSystemPath());    }    Artifact artifact = new DefaultArtifact(dependency.getGroupId(), dependency.getArtifactId(), dependency.getClassifier(), null, dependency.getVersion(), props, stereotype);    List<Exclusion> exclusions = new ArrayList<>(dependency.getExclusions().size());    for (org.apache.maven.model.Exclusion exclusion : dependency.getExclusions()) {        exclusions.add(convert(exclusion));    }    Dependency result = new Dependency(artifact, dependency.getScope(), dependency.getOptional() != null ? dependency.isOptional() : null, exclusions);    return result;}
2e7e7119c4c76035166a5a8b3f4fced2eb1988323013680b91764cfe775783ee
convert
private Exclusion convert(org.apache.maven.model.Exclusion exclusion)
{    return new Exclusion(exclusion.getGroupId(), exclusion.getArtifactId(), "*", "*");}
84f15f7f844e79f6ccc3fe3e4aee007684426efaedc2ec88b1c26a6aa6c55a76
setArtifactProperties
private void setArtifactProperties(ArtifactDescriptorResult result, Model model)
{    String downloadUrl = null;    DistributionManagement distMgmt = model.getDistributionManagement();    if (distMgmt != null) {        downloadUrl = distMgmt.getDownloadUrl();    }    if (downloadUrl != null && downloadUrl.length() > 0) {        Artifact artifact = result.getArtifact();        Map<String, String> props = new HashMap<>(artifact.getProperties());        props.put(ArtifactProperties.DOWNLOAD_URL, downloadUrl);        result.setArtifact(artifact.setProperties(props));    }}
306215db37817aa45bb2545c69f92be95b6643a7548c3d02e3a018fa5b25ad2c
toPomArtifact
public static Artifact toPomArtifact(Artifact artifact)
{    Artifact pomArtifact = artifact;    if (pomArtifact.getClassifier().length() > 0 || !"pom".equals(pomArtifact.getExtension())) {        pomArtifact = new DefaultArtifact(artifact.getGroupId(), artifact.getArtifactId(), "pom", artifact.getVersion());    }    return pomArtifact;}
77f7662fefbbb4b00de98dcbcaf137eb6dd48c66486662abfb075aaa3216660f
toRemoteRepository
public static RemoteRepository toRemoteRepository(Repository repository)
{    RemoteRepository.Builder builder = new RemoteRepository.Builder(repository.getId(), repository.getLayout(), repository.getUrl());    builder.setSnapshotPolicy(toRepositoryPolicy(repository.getSnapshots()));    builder.setReleasePolicy(toRepositoryPolicy(repository.getReleases()));    return builder.build();}
9d4784b4dcfd03cea7a7f74fd57655523fa6f124f78f6d0680a165c40dc431e7
toRepositoryPolicy
public static RepositoryPolicy toRepositoryPolicy(org.apache.maven.model.RepositoryPolicy policy)
{    boolean enabled = true;    String checksums = RepositoryPolicy.CHECKSUM_POLICY_WARN;    String updates = RepositoryPolicy.UPDATE_POLICY_DAILY;    if (policy != null) {        enabled = policy.isEnabled();        if (policy.getUpdatePolicy() != null) {            updates = policy.getUpdatePolicy();        }        if (policy.getChecksumPolicy() != null) {            checksums = policy.getChecksumPolicy();        }    }    return new RepositoryPolicy(enabled, updates, checksums);}
780f3629bf6acb3980458a3bbec0b97a3448631d9cca6455743339ac7356af8d
initService
public void initService(ServiceLocator locator)
{    setRemoteRepositoryManager(locator.getService(RemoteRepositoryManager.class));    setVersionResolver(locator.getService(VersionResolver.class));    setVersionRangeResolver(locator.getService(VersionRangeResolver.class));    setArtifactResolver(locator.getService(ArtifactResolver.class));    modelBuilder = locator.getService(ModelBuilder.class);    if (modelBuilder == null) {        setModelBuilder(new DefaultModelBuilderFactory().newInstance());    }    setRepositoryEventDispatcher(locator.getService(RepositoryEventDispatcher.class));}
61ebba82f8dea714be3f17e006ea7a9edad3c783ab6ab58c06fc0b70f80fb9eb
setRemoteRepositoryManager
public DefaultArtifactDescriptorReader setRemoteRepositoryManager(RemoteRepositoryManager remoteRepositoryManager)
{    this.remoteRepositoryManager = Objects.requireNonNull(remoteRepositoryManager, "remoteRepositoryManager cannot be null");    return this;}
3d176581b6c582c601dbeb811c3158f6c904f3bf4df11125c96e00a75bb0cbdf
setVersionResolver
public DefaultArtifactDescriptorReader setVersionResolver(VersionResolver versionResolver)
{    this.versionResolver = Objects.requireNonNull(versionResolver, "versionResolver cannot be null");    return this;}
c8ba12ec86a045451f353c4889fdd378674fe18886c05e996a644c10b2d9b02e
setVersionRangeResolver
public DefaultArtifactDescriptorReader setVersionRangeResolver(VersionRangeResolver versionRangeResolver)
{    this.versionRangeResolver = Objects.requireNonNull(versionRangeResolver, "versionRangeResolver cannot be null");    return this;}
ca951e821c564f1efa95eaefbb71e579169fab1980ced304dddbc86219364b0a
setArtifactResolver
public DefaultArtifactDescriptorReader setArtifactResolver(ArtifactResolver artifactResolver)
{    this.artifactResolver = Objects.requireNonNull(artifactResolver, "artifactResolver cannot be null");    return this;}
435e8f93c687f4db544739f4346cc81aa8fe987e7f42c189e0d006189797c426
setRepositoryEventDispatcher
public DefaultArtifactDescriptorReader setRepositoryEventDispatcher(RepositoryEventDispatcher repositoryEventDispatcher)
{    this.repositoryEventDispatcher = Objects.requireNonNull(repositoryEventDispatcher, "repositoryEventDispatcher cannot be null");    return this;}
752583d490ff3b2d74dbe7586366333aa08679312322ecc8961adde0cdd99d52
setModelBuilder
public DefaultArtifactDescriptorReader setModelBuilder(ModelBuilder modelBuilder)
{    this.modelBuilder = Objects.requireNonNull(modelBuilder, "modelBuilder cannot be null");    return this;}
08f36814bbafad1eb808be68451c1c6c0cb0629ea626d6d1c0365af8ced4697a
readArtifactDescriptor
public ArtifactDescriptorResult readArtifactDescriptor(RepositorySystemSession session, ArtifactDescriptorRequest request) throws ArtifactDescriptorException
{    ArtifactDescriptorResult result = new ArtifactDescriptorResult(request);    Model model = loadPom(session, request, result);    if (model != null) {        Map<String, Object> config = session.getConfigProperties();        ArtifactDescriptorReaderDelegate delegate = (ArtifactDescriptorReaderDelegate) config.get(ArtifactDescriptorReaderDelegate.class.getName());        if (delegate == null) {            delegate = new ArtifactDescriptorReaderDelegate();        }        delegate.populateResult(session, result, model);    }    return result;}
45284fd82a5ffb2865af5ff9834f24037e4cbab6ee452b3c9627f1a229babfef
loadPom
private Model loadPom(RepositorySystemSession session, ArtifactDescriptorRequest request, ArtifactDescriptorResult result) throws ArtifactDescriptorException
{    RequestTrace trace = RequestTrace.newChild(request.getTrace(), request);    Set<String> visited = new LinkedHashSet<>();    for (Artifact a = request.getArtifact(); ; ) {        Artifact pomArtifact = ArtifactDescriptorUtils.toPomArtifact(a);        try {            VersionRequest versionRequest = new VersionRequest(a, request.getRepositories(), request.getRequestContext());            versionRequest.setTrace(trace);            VersionResult versionResult = versionResolver.resolveVersion(session, versionRequest);            a = a.setVersion(versionResult.getVersion());            versionRequest = new VersionRequest(pomArtifact, request.getRepositories(), request.getRequestContext());            versionRequest.setTrace(trace);            versionResult = versionResolver.resolveVersion(session, versionRequest);            pomArtifact = pomArtifact.setVersion(versionResult.getVersion());        } catch (VersionResolutionException e) {            result.addException(e);            throw new ArtifactDescriptorException(result);        }        if (!visited.add(a.getGroupId() + ':' + a.getArtifactId() + ':' + a.getBaseVersion())) {            RepositoryException exception = new RepositoryException("Artifact relocations form a cycle: " + visited);            invalidDescriptor(session, trace, a, exception);            if ((getPolicy(session, a, request) & ArtifactDescriptorPolicy.IGNORE_INVALID) != 0) {                return null;            }            result.addException(exception);            throw new ArtifactDescriptorException(result);        }        ArtifactResult resolveResult;        try {            ArtifactRequest resolveRequest = new ArtifactRequest(pomArtifact, request.getRepositories(), request.getRequestContext());            resolveRequest.setTrace(trace);            resolveResult = artifactResolver.resolveArtifact(session, resolveRequest);            pomArtifact = resolveResult.getArtifact();            result.setRepository(resolveResult.getRepository());        } catch (ArtifactResolutionException e) {            if (e.getCause() instanceof ArtifactNotFoundException) {                missingDescriptor(session, trace, a, (Exception) e.getCause());                if ((getPolicy(session, a, request) & ArtifactDescriptorPolicy.IGNORE_MISSING) != 0) {                    return null;                }            }            result.addException(e);            throw new ArtifactDescriptorException(result);        }        Model model;        final WorkspaceReader workspace = session.getWorkspaceReader();        if (workspace instanceof MavenWorkspaceReader) {            model = ((MavenWorkspaceReader) workspace).findModel(pomArtifact);            if (model != null) {                return model;            }        }        try {            ModelBuildingRequest modelRequest = new DefaultModelBuildingRequest();            modelRequest.setValidationLevel(ModelBuildingRequest.VALIDATION_LEVEL_MINIMAL);            modelRequest.setProcessPlugins(false);            modelRequest.setTwoPhaseBuilding(false);            modelRequest.setSystemProperties(toProperties(session.getUserProperties(), session.getSystemProperties()));            modelRequest.setModelCache(DefaultModelCache.newInstance(session));            modelRequest.setModelResolver(new DefaultModelResolver(session, trace.newChild(modelRequest), request.getRequestContext(), artifactResolver, versionRangeResolver, remoteRepositoryManager, request.getRepositories()));            if (resolveResult.getRepository() instanceof WorkspaceRepository) {                modelRequest.setPomFile(pomArtifact.getFile());            } else {                modelRequest.setModelSource(new FileModelSource(pomArtifact.getFile()));            }            model = modelBuilder.build(modelRequest).getEffectiveModel();        } catch (ModelBuildingException e) {            for (ModelProblem problem : e.getProblems()) {                if (problem.getException() instanceof UnresolvableModelException) {                    result.addException(problem.getException());                    throw new ArtifactDescriptorException(result);                }            }            invalidDescriptor(session, trace, a, e);            if ((getPolicy(session, a, request) & ArtifactDescriptorPolicy.IGNORE_INVALID) != 0) {                return null;            }            result.addException(e);            throw new ArtifactDescriptorException(result);        }        Relocation relocation = getRelocation(model);        if (relocation != null) {            result.addRelocation(a);            a = new RelocatedArtifact(a, relocation.getGroupId(), relocation.getArtifactId(), relocation.getVersion());            result.setArtifact(a);        } else {            return model;        }    }}
4443da87e41692d77e4b7fa975e95ea558c7346504893bf680b9909cc58e38cd
toProperties
private Properties toProperties(Map<String, String> dominant, Map<String, String> recessive)
{    Properties props = new Properties();    if (recessive != null) {        props.putAll(recessive);    }    if (dominant != null) {        props.putAll(dominant);    }    return props;}
fbf5708d4a32bd43808d7c1f4835b2598cd319b3f356016d338e35cba8eea273
getRelocation
private Relocation getRelocation(Model model)
{    Relocation relocation = null;    DistributionManagement distMgmt = model.getDistributionManagement();    if (distMgmt != null) {        relocation = distMgmt.getRelocation();    }    return relocation;}
b4331207ed06c3d557e1a0f8776f38db3317a675c86fb52eb34303ac1a134989
missingDescriptor
private void missingDescriptor(RepositorySystemSession session, RequestTrace trace, Artifact artifact, Exception exception)
{    RepositoryEvent.Builder event = new RepositoryEvent.Builder(session, EventType.ARTIFACT_DESCRIPTOR_MISSING);    event.setTrace(trace);    event.setArtifact(artifact);    event.setException(exception);    repositoryEventDispatcher.dispatch(event.build());}
d965c3e41e5e2b2041bae053a096960907200553ca24ac7c1c19aea4e6a0cb87
invalidDescriptor
private void invalidDescriptor(RepositorySystemSession session, RequestTrace trace, Artifact artifact, Exception exception)
{    RepositoryEvent.Builder event = new RepositoryEvent.Builder(session, EventType.ARTIFACT_DESCRIPTOR_INVALID);    event.setTrace(trace);    event.setArtifact(artifact);    event.setException(exception);    repositoryEventDispatcher.dispatch(event.build());}
1a5a489e84a21e40946a8c8d3d0cb6d5989be12a1d867da5990c6f3eb0cbe648
getPolicy
private int getPolicy(RepositorySystemSession session, Artifact a, ArtifactDescriptorRequest request)
{    ArtifactDescriptorPolicy policy = session.getArtifactDescriptorPolicy();    if (policy == null) {        return ArtifactDescriptorPolicy.STRICT;    }    return policy.getPolicy(session, new ArtifactDescriptorPolicyRequest(a, request.getRequestContext()));}
cbb0956b13d70f4bdb1ce76f4db6232562d2dee6ac09930b72a9ab8997d20d68
newInstance
public static ModelCache newInstance(RepositorySystemSession session)
{    if (session.getCache() == null) {        return null;    } else {        return new DefaultModelCache(session);    }}
3ba0719ba0a4eb8adf63f719fa27051808bba53d102089d8e8eb248f0466a20d
get
public Object get(String groupId, String artifactId, String version, String tag)
{    return cache.get(session, new Key(groupId, artifactId, version, tag));}
828b663836ea5cf2e4476429a75f4d11892b09d5a2a45fe05e63fdba7b19c68b
put
public void put(String groupId, String artifactId, String version, String tag, Object data)
{    cache.put(session, new Key(groupId, artifactId, version, tag), data);}
4afeb0868b55bdd8e18a00a3cb43d83e0714378d1c4bb36f0936daefc060e2e8
equals
public boolean equals(Object obj)
{    if (this == obj) {        return true;    }    if (null == obj || !getClass().equals(obj.getClass())) {        return false;    }    Key that = (Key) obj;    return artifactId.equals(that.artifactId) && groupId.equals(that.groupId) && version.equals(that.version) && tag.equals(that.tag);}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    return hash;}
467ea5e295e1f15047a9b83ae3e55e9464c209cc6ae2bee05fdb315572532646
addRepository
public void addRepository(Repository repository) throws InvalidRepositoryException
{    addRepository(repository, false);}
8343f67aab5514aff60481158c0cd8325c0c3bf8859dd7a98add97adfe77299e
addRepository
public void addRepository(final Repository repository, boolean replace) throws InvalidRepositoryException
{    if (session.isIgnoreArtifactDescriptorRepositories()) {        return;    }    if (!repositoryIds.add(repository.getId())) {        if (!replace) {            return;        }        removeMatchingRepository(repositories, repository.getId());    }    List<RemoteRepository> newRepositories = Collections.singletonList(ArtifactDescriptorUtils.toRemoteRepository(repository));    this.repositories = remoteRepositoryManager.aggregateRepositories(session, repositories, newRepositories, true);}
3c224e2ee32649e4a530ceb70cad8fb54bd7275f90fb46a9404ebe2c1e92c540
removeMatchingRepository
private static void removeMatchingRepository(Iterable<RemoteRepository> repositories, final String id)
{    Iterator<RemoteRepository> iterator = repositories.iterator();    while (iterator.hasNext()) {        RemoteRepository remoteRepository = iterator.next();        if (remoteRepository.getId().equals(id)) {            iterator.remove();        }    }}
446063212e23e9fc60d1234332ccf63a43972cd5c4ae2a0af1b45ee35164b304
newCopy
public ModelResolver newCopy()
{    return new DefaultModelResolver(this);}
a1f0ab58c62382803001e3a2c6a037c159e0fe62056cded8b49d68f7639ff18f
resolveModel
public ModelSource resolveModel(String groupId, String artifactId, String version) throws UnresolvableModelException
{    Artifact pomArtifact = new DefaultArtifact(groupId, artifactId, "", "pom", version);    try {        ArtifactRequest request = new ArtifactRequest(pomArtifact, repositories, context);        request.setTrace(trace);        pomArtifact = resolver.resolveArtifact(session, request).getArtifact();    } catch (ArtifactResolutionException e) {        throw new UnresolvableModelException(e.getMessage(), groupId, artifactId, version, e);    }    File pomFile = pomArtifact.getFile();    return new FileModelSource(pomFile);}
47f48a9db6ee67cda33d0d71d480f7d963f9f1daa84a0ccd079e975719ad5a8f
resolveModel
public ModelSource resolveModel(final Parent parent) throws UnresolvableModelException
{    try {        final Artifact artifact = new DefaultArtifact(parent.getGroupId(), parent.getArtifactId(), "", "pom", parent.getVersion());        final VersionRangeRequest versionRangeRequest = new VersionRangeRequest(artifact, repositories, context);        versionRangeRequest.setTrace(trace);        final VersionRangeResult versionRangeResult = versionRangeResolver.resolveVersionRange(session, versionRangeRequest);        if (versionRangeResult.getHighestVersion() == null) {            throw new UnresolvableModelException(String.format("No versions matched the requested parent version range '%s'", parent.getVersion()), parent.getGroupId(), parent.getArtifactId(), parent.getVersion());        }        if (versionRangeResult.getVersionConstraint() != null && versionRangeResult.getVersionConstraint().getRange() != null && versionRangeResult.getVersionConstraint().getRange().getUpperBound() == null) {                        throw new UnresolvableModelException(String.format("The requested parent version range '%s' does not specify an upper bound", parent.getVersion()), parent.getGroupId(), parent.getArtifactId(), parent.getVersion());        }        parent.setVersion(versionRangeResult.getHighestVersion().toString());        return resolveModel(parent.getGroupId(), parent.getArtifactId(), parent.getVersion());    } catch (final VersionRangeResolutionException e) {        throw new UnresolvableModelException(e.getMessage(), parent.getGroupId(), parent.getArtifactId(), parent.getVersion(), e);    }}
ee82a01c8cb484ef212006487cd73128f4cbcf54b98d69bf20404a45bf356c50
resolveModel
public ModelSource resolveModel(final Dependency dependency) throws UnresolvableModelException
{    try {        final Artifact artifact = new DefaultArtifact(dependency.getGroupId(), dependency.getArtifactId(), "", "pom", dependency.getVersion());        final VersionRangeRequest versionRangeRequest = new VersionRangeRequest(artifact, repositories, context);        versionRangeRequest.setTrace(trace);        final VersionRangeResult versionRangeResult = versionRangeResolver.resolveVersionRange(session, versionRangeRequest);        if (versionRangeResult.getHighestVersion() == null) {            throw new UnresolvableModelException(String.format("No versions matched the requested dependency version range '%s'", dependency.getVersion()), dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion());        }        if (versionRangeResult.getVersionConstraint() != null && versionRangeResult.getVersionConstraint().getRange() != null && versionRangeResult.getVersionConstraint().getRange().getUpperBound() == null) {                        throw new UnresolvableModelException(String.format("The requested dependency version range '%s' does not specify an upper bound", dependency.getVersion()), dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion());        }        dependency.setVersion(versionRangeResult.getHighestVersion().toString());        return resolveModel(dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion());    } catch (VersionRangeResolutionException e) {        throw new UnresolvableModelException(e.getMessage(), dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion(), e);    }}
780f3629bf6acb3980458a3bbec0b97a3448631d9cca6455743339ac7356af8d
initService
public void initService(ServiceLocator locator)
{    setMetadataResolver(locator.getService(MetadataResolver.class));    setSyncContextFactory(locator.getService(SyncContextFactory.class));    setRepositoryEventDispatcher(locator.getService(RepositoryEventDispatcher.class));}
9e49d05f009c9abdf3804f17053186f7c5d63520ca57c31e9402ec304c4f36ba
setMetadataResolver
public DefaultVersionRangeResolver setMetadataResolver(MetadataResolver metadataResolver)
{    this.metadataResolver = Objects.requireNonNull(metadataResolver, "metadataResolver cannot be null");    return this;}
7af7ac87531ed4fa41959518f74a9c1e48d9c6340571c157ecf2642e6ec908e3
setSyncContextFactory
public DefaultVersionRangeResolver setSyncContextFactory(SyncContextFactory syncContextFactory)
{    this.syncContextFactory = Objects.requireNonNull(syncContextFactory, "syncContextFactory cannot be null");    return this;}
70265580794b6bb2ac65bf2c90180649d34a82a7d33972b16d31293d5ffe3095
setRepositoryEventDispatcher
public DefaultVersionRangeResolver setRepositoryEventDispatcher(RepositoryEventDispatcher repositoryEventDispatcher)
{    this.repositoryEventDispatcher = Objects.requireNonNull(repositoryEventDispatcher, "repositoryEventDispatcher cannot be null");    return this;}
60e9406db4694cc1afd07736c5eb87562672a64127cf30774beba1d96ee4901f
resolveVersionRange
public VersionRangeResult resolveVersionRange(RepositorySystemSession session, VersionRangeRequest request) throws VersionRangeResolutionException
{    VersionRangeResult result = new VersionRangeResult(request);    VersionScheme versionScheme = new GenericVersionScheme();    VersionConstraint versionConstraint;    try {        versionConstraint = versionScheme.parseVersionConstraint(request.getArtifact().getVersion());    } catch (InvalidVersionSpecificationException e) {        result.addException(e);        throw new VersionRangeResolutionException(result);    }    result.setVersionConstraint(versionConstraint);    if (versionConstraint.getRange() == null) {        result.addVersion(versionConstraint.getVersion());    } else {        Map<String, ArtifactRepository> versionIndex = getVersions(session, result, request);        List<Version> versions = new ArrayList<>();        for (Map.Entry<String, ArtifactRepository> v : versionIndex.entrySet()) {            try {                Version ver = versionScheme.parseVersion(v.getKey());                if (versionConstraint.containsVersion(ver)) {                    versions.add(ver);                    result.setRepository(ver, v.getValue());                }            } catch (InvalidVersionSpecificationException e) {                result.addException(e);            }        }        Collections.sort(versions);        result.setVersions(versions);    }    return result;}
763001b4a4c03fd871ae061fec344bb20a0ac502391e6830969c288b4b1ac055
getVersions
private Map<String, ArtifactRepository> getVersions(RepositorySystemSession session, VersionRangeResult result, VersionRangeRequest request)
{    RequestTrace trace = RequestTrace.newChild(request.getTrace(), request);    Map<String, ArtifactRepository> versionIndex = new HashMap<>();    Metadata metadata = new DefaultMetadata(request.getArtifact().getGroupId(), request.getArtifact().getArtifactId(), MAVEN_METADATA_XML, Metadata.Nature.RELEASE_OR_SNAPSHOT);    List<MetadataRequest> metadataRequests = new ArrayList<>(request.getRepositories().size());    metadataRequests.add(new MetadataRequest(metadata, null, request.getRequestContext()));    for (RemoteRepository repository : request.getRepositories()) {        MetadataRequest metadataRequest = new MetadataRequest(metadata, repository, request.getRequestContext());        metadataRequest.setDeleteLocalCopyIfMissing(true);        metadataRequest.setTrace(trace);        metadataRequests.add(metadataRequest);    }    List<MetadataResult> metadataResults = metadataResolver.resolveMetadata(session, metadataRequests);    WorkspaceReader workspace = session.getWorkspaceReader();    if (workspace != null) {        List<String> versions = workspace.findVersions(request.getArtifact());        for (String version : versions) {            versionIndex.put(version, workspace.getRepository());        }    }    for (MetadataResult metadataResult : metadataResults) {        result.addException(metadataResult.getException());        ArtifactRepository repository = metadataResult.getRequest().getRepository();        if (repository == null) {            repository = session.getLocalRepository();        }        Versioning versioning = readVersions(session, trace, metadataResult.getMetadata(), repository, result);        for (String version : versioning.getVersions()) {            if (!versionIndex.containsKey(version)) {                versionIndex.put(version, repository);            }        }    }    return versionIndex;}
b7191fa054f1b0c2860cdea78d637ec339c57da0c95fa4bcd41efccd39f49612
readVersions
private Versioning readVersions(RepositorySystemSession session, RequestTrace trace, Metadata metadata, ArtifactRepository repository, VersionRangeResult result)
{    Versioning versioning = null;    try {        if (metadata != null) {            try (SyncContext syncContext = syncContextFactory.newInstance(session, true)) {                syncContext.acquire(null, Collections.singleton(metadata));                if (metadata.getFile() != null && metadata.getFile().exists()) {                    try (final InputStream in = new FileInputStream(metadata.getFile())) {                        versioning = new MetadataXpp3Reader().read(in, false).getVersioning();                    }                }            }        }    } catch (Exception e) {        invalidMetadata(session, trace, metadata, repository, e);        result.addException(e);    }    return (versioning != null) ? versioning : new Versioning();}
8cc9514c3b96585b7a8b6d617ebe04a8684822d9b823048ef11240656d9c5de0
invalidMetadata
private void invalidMetadata(RepositorySystemSession session, RequestTrace trace, Metadata metadata, ArtifactRepository repository, Exception exception)
{    RepositoryEvent.Builder event = new RepositoryEvent.Builder(session, EventType.METADATA_INVALID);    event.setTrace(trace);    event.setMetadata(metadata);    event.setException(exception);    event.setRepository(repository);    repositoryEventDispatcher.dispatch(event.build());}
780f3629bf6acb3980458a3bbec0b97a3448631d9cca6455743339ac7356af8d
initService
public void initService(ServiceLocator locator)
{    setMetadataResolver(locator.getService(MetadataResolver.class));    setSyncContextFactory(locator.getService(SyncContextFactory.class));    setRepositoryEventDispatcher(locator.getService(RepositoryEventDispatcher.class));}
5699827f2d02da95d2ed70e789675e5706f364cdba514f5d64eddd0f44cc8f53
setMetadataResolver
public DefaultVersionResolver setMetadataResolver(MetadataResolver metadataResolver)
{    this.metadataResolver = Objects.requireNonNull(metadataResolver, "metadataResolver cannot be null");    return this;}
82806f06ad41c1be13a0345029507ebf3e19644557b6c598a963bbe5e588dae2
setSyncContextFactory
public DefaultVersionResolver setSyncContextFactory(SyncContextFactory syncContextFactory)
{    this.syncContextFactory = Objects.requireNonNull(syncContextFactory, "syncContextFactory cannot be null");    return this;}
620edbde6c94f0e90dbf745fac40e772f490ba0697c8d4a9ae87529d56e1bf09
setRepositoryEventDispatcher
public DefaultVersionResolver setRepositoryEventDispatcher(RepositoryEventDispatcher repositoryEventDispatcher)
{    this.repositoryEventDispatcher = Objects.requireNonNull(repositoryEventDispatcher, "repositoryEventDispatcher cannot be null");    return this;}
64b42b85a717337301a23f9ce91cddb0f3156bc55bfc32fe1c44adfd51f98091
resolveVersion
public VersionResult resolveVersion(RepositorySystemSession session, VersionRequest request) throws VersionResolutionException
{    RequestTrace trace = RequestTrace.newChild(request.getTrace(), request);    Artifact artifact = request.getArtifact();    String version = artifact.getVersion();    VersionResult result = new VersionResult(request);    Key cacheKey = null;    RepositoryCache cache = session.getCache();    if (cache != null && !ConfigUtils.getBoolean(session, false, "aether.versionResolver.noCache")) {        cacheKey = new Key(session, request);        Object obj = cache.get(session, cacheKey);        if (obj instanceof Record) {            Record record = (Record) obj;            result.setVersion(record.version);            result.setRepository(getRepository(session, request.getRepositories(), record.repoClass, record.repoId));            return result;        }    }    Metadata metadata;    if (RELEASE.equals(version)) {        metadata = new DefaultMetadata(artifact.getGroupId(), artifact.getArtifactId(), MAVEN_METADATA_XML, Metadata.Nature.RELEASE);    } else if (LATEST.equals(version)) {        metadata = new DefaultMetadata(artifact.getGroupId(), artifact.getArtifactId(), MAVEN_METADATA_XML, Metadata.Nature.RELEASE_OR_SNAPSHOT);    } else if (version.endsWith(SNAPSHOT)) {        WorkspaceReader workspace = session.getWorkspaceReader();        if (workspace != null && workspace.findVersions(artifact).contains(version)) {            metadata = null;            result.setRepository(workspace.getRepository());        } else {            metadata = new DefaultMetadata(artifact.getGroupId(), artifact.getArtifactId(), version, MAVEN_METADATA_XML, Metadata.Nature.SNAPSHOT);        }    } else {        metadata = null;    }    if (metadata == null) {        result.setVersion(version);    } else {        List<MetadataRequest> metadataReqs = new ArrayList<>(request.getRepositories().size());        metadataReqs.add(new MetadataRequest(metadata, null, request.getRequestContext()));        for (RemoteRepository repository : request.getRepositories()) {            MetadataRequest metadataRequest = new MetadataRequest(metadata, repository, request.getRequestContext());            metadataRequest.setDeleteLocalCopyIfMissing(true);            metadataRequest.setFavorLocalRepository(true);            metadataRequest.setTrace(trace);            metadataReqs.add(metadataRequest);        }        List<MetadataResult> metadataResults = metadataResolver.resolveMetadata(session, metadataReqs);        Map<String, VersionInfo> infos = new HashMap<>();        for (MetadataResult metadataResult : metadataResults) {            result.addException(metadataResult.getException());            ArtifactRepository repository = metadataResult.getRequest().getRepository();            if (repository == null) {                repository = session.getLocalRepository();            }            Versioning v = readVersions(session, trace, metadataResult.getMetadata(), repository, result);            merge(artifact, infos, v, repository);        }        if (RELEASE.equals(version)) {            resolve(result, infos, RELEASE);        } else if (LATEST.equals(version)) {            if (!resolve(result, infos, LATEST)) {                resolve(result, infos, RELEASE);            }            if (result.getVersion() != null && result.getVersion().endsWith(SNAPSHOT)) {                VersionRequest subRequest = new VersionRequest();                subRequest.setArtifact(artifact.setVersion(result.getVersion()));                if (result.getRepository() instanceof RemoteRepository) {                    RemoteRepository r = (RemoteRepository) result.getRepository();                    subRequest.setRepositories(Collections.singletonList(r));                } else {                    subRequest.setRepositories(request.getRepositories());                }                VersionResult subResult = resolveVersion(session, subRequest);                result.setVersion(subResult.getVersion());                result.setRepository(subResult.getRepository());                for (Exception exception : subResult.getExceptions()) {                    result.addException(exception);                }            }        } else {            String key = SNAPSHOT + getKey(artifact.getClassifier(), artifact.getExtension());            merge(infos, SNAPSHOT, key);            if (!resolve(result, infos, key)) {                result.setVersion(version);            }        }        if (StringUtils.isEmpty(result.getVersion())) {            throw new VersionResolutionException(result);        }    }    if (cacheKey != null && metadata != null && isSafelyCacheable(session, artifact)) {        cache.put(session, cacheKey, new Record(result.getVersion(), result.getRepository()));    }    return result;}
95110a1ec798fb840daa38d4952b88e408c08dea402bf153f8cf31f27660dac4
resolve
private boolean resolve(VersionResult result, Map<String, VersionInfo> infos, String key)
{    VersionInfo info = infos.get(key);    if (info != null) {        result.setVersion(info.version);        result.setRepository(info.repository);    }    return info != null;}
23f0631e98ac3395184d23d377f0bd49bcad59aecb5c8bb2ea82fc0bbb10402b
readVersions
private Versioning readVersions(RepositorySystemSession session, RequestTrace trace, Metadata metadata, ArtifactRepository repository, VersionResult result)
{    Versioning versioning = null;    try {        if (metadata != null) {            try (SyncContext syncContext = syncContextFactory.newInstance(session, true)) {                syncContext.acquire(null, Collections.singleton(metadata));                if (metadata.getFile() != null && metadata.getFile().exists()) {                    try (final InputStream in = new FileInputStream(metadata.getFile())) {                        versioning = new MetadataXpp3Reader().read(in, false).getVersioning();                        /*                            NOTE: Users occasionally misuse the id "local" for remote repos which screws up the metadata                            of the local repository. This is especially troublesome during snapshot resolution so we try                            to handle that gracefully.                             */                        if (versioning != null && repository instanceof LocalRepository && versioning.getSnapshot() != null && versioning.getSnapshot().getBuildNumber() > 0) {                            final Versioning repaired = new Versioning();                            repaired.setLastUpdated(versioning.getLastUpdated());                            repaired.setSnapshot(new Snapshot());                            repaired.getSnapshot().setLocalCopy(true);                            versioning = repaired;                            throw new IOException("Snapshot information corrupted with remote repository data" + ", please verify that no remote repository uses the id '" + repository.getId() + "'");                        }                    }                }            }        }    } catch (Exception e) {        invalidMetadata(session, trace, metadata, repository, e);        result.addException(e);    }    return (versioning != null) ? versioning : new Versioning();}
8cc9514c3b96585b7a8b6d617ebe04a8684822d9b823048ef11240656d9c5de0
invalidMetadata
private void invalidMetadata(RepositorySystemSession session, RequestTrace trace, Metadata metadata, ArtifactRepository repository, Exception exception)
{    RepositoryEvent.Builder event = new RepositoryEvent.Builder(session, EventType.METADATA_INVALID);    event.setTrace(trace);    event.setMetadata(metadata);    event.setException(exception);    event.setRepository(repository);    repositoryEventDispatcher.dispatch(event.build());}
8038376ad3ccae3b030856889bea5223ab658634671203e8ed0e5c0fb01ef10f
merge
private void merge(Artifact artifact, Map<String, VersionInfo> infos, Versioning versioning, ArtifactRepository repository)
{    if (StringUtils.isNotEmpty(versioning.getRelease())) {        merge(RELEASE, infos, versioning.getLastUpdated(), versioning.getRelease(), repository);    }    if (StringUtils.isNotEmpty(versioning.getLatest())) {        merge(LATEST, infos, versioning.getLastUpdated(), versioning.getLatest(), repository);    }    for (SnapshotVersion sv : versioning.getSnapshotVersions()) {        if (StringUtils.isNotEmpty(sv.getVersion())) {            String key = getKey(sv.getClassifier(), sv.getExtension());            merge(SNAPSHOT + key, infos, sv.getUpdated(), sv.getVersion(), repository);        }    }    Snapshot snapshot = versioning.getSnapshot();    if (snapshot != null && versioning.getSnapshotVersions().isEmpty()) {        String version = artifact.getVersion();        if (snapshot.getTimestamp() != null && snapshot.getBuildNumber() > 0) {            String qualifier = snapshot.getTimestamp() + '-' + snapshot.getBuildNumber();            version = version.substring(0, version.length() - SNAPSHOT.length()) + qualifier;        }        merge(SNAPSHOT, infos, versioning.getLastUpdated(), version, repository);    }}
d4e5641b030063c55d8d2fcb652e96009f0f27caf8a257f887d65956eba7152c
merge
private void merge(String key, Map<String, VersionInfo> infos, String timestamp, String version, ArtifactRepository repository)
{    VersionInfo info = infos.get(key);    if (info == null) {        info = new VersionInfo(timestamp, version, repository);        infos.put(key, info);    } else if (info.isOutdated(timestamp)) {        info.version = version;        info.repository = repository;        info.timestamp = timestamp;    }}
77af30cc6174224466fceb4bae4fabaf371fb672403794c2dd26978b8ecb8621
merge
private void merge(Map<String, VersionInfo> infos, String srcKey, String dstKey)
{    VersionInfo srcInfo = infos.get(srcKey);    VersionInfo dstInfo = infos.get(dstKey);    if (dstInfo == null || (srcInfo != null && dstInfo.isOutdated(srcInfo.timestamp) && srcInfo.repository != dstInfo.repository)) {        infos.put(dstKey, srcInfo);    }}
e1e99039cdcf3c4a7ca036261d2d2513176ea5450ab34222fa7fb5716a7e6fbd
getKey
private String getKey(String classifier, String extension)
{    return StringUtils.clean(classifier) + ':' + StringUtils.clean(extension);}
39b54965e872f65ae701b57f9440c98f39e636e195e00e70157f2cdfcd74cf63
getRepository
private ArtifactRepository getRepository(RepositorySystemSession session, List<RemoteRepository> repositories, Class<?> repoClass, String repoId)
{    if (repoClass != null) {        if (WorkspaceRepository.class.isAssignableFrom(repoClass)) {            return session.getWorkspaceReader().getRepository();        } else if (LocalRepository.class.isAssignableFrom(repoClass)) {            return session.getLocalRepository();        } else {            for (RemoteRepository repository : repositories) {                if (repoId.equals(repository.getId())) {                    return repository;                }            }        }    }    return null;}
b5061503490f2a112ef4fd7815c591dd0c529da4d6570d871c5a7f073730827f
isSafelyCacheable
private boolean isSafelyCacheable(RepositorySystemSession session, Artifact artifact)
{    /*         * The workspace/reactor is in flux so we better not assume definitive information for any of its         * artifacts/projects.         */    WorkspaceReader workspace = session.getWorkspaceReader();    if (workspace == null) {        return true;    }    Artifact pomArtifact = ArtifactDescriptorUtils.toPomArtifact(artifact);    return workspace.findArtifact(pomArtifact) == null;}
5c94f18399bac40e40bf46e8f7db85de81aee21c90dbbf951209a0f9c0df02ac
isOutdated
 boolean isOutdated(String timestamp)
{    return timestamp != null && timestamp.compareTo(this.timestamp) > 0;}
4afeb0868b55bdd8e18a00a3cb43d83e0714378d1c4bb36f0936daefc060e2e8
equals
public boolean equals(Object obj)
{    if (obj == this) {        return true;    } else if (obj == null || !getClass().equals(obj.getClass())) {        return false;    }    Key that = (Key) obj;    return artifactId.equals(that.artifactId) && groupId.equals(that.groupId) && classifier.equals(that.classifier) && extension.equals(that.extension) && version.equals(that.version) && context.equals(that.context) && localRepo.equals(that.localRepo) && Objects.equals(workspace, that.workspace) && repositories.equals(that.repositories);}
0ac42bf5188762fc1283b5cbd2b3bb1031e80963813b3b310b15c3fb47050003
hashCode
public int hashCode()
{    return hashCode;}
a4bf9031df3c68373256888fd1b7de6d8a23a79ab3889a0e38839320d52ad969
createMetadata
private static Metadata createMetadata(Artifact artifact, boolean legacyFormat)
{    Snapshot snapshot = new Snapshot();    snapshot.setLocalCopy(true);    Versioning versioning = new Versioning();    versioning.setSnapshot(snapshot);    Metadata metadata = new Metadata();    metadata.setVersioning(versioning);    metadata.setGroupId(artifact.getGroupId());    metadata.setArtifactId(artifact.getArtifactId());    metadata.setVersion(artifact.getBaseVersion());    if (!legacyFormat) {        metadata.setModelVersion("1.1.0");    }    return metadata;}
616f7cb5b993738f67bd6c19fd6865668624116cacd0b4cd293c6cd877dcc0dd
bind
public void bind(Artifact artifact)
{    artifacts.add(artifact);}
471fe7333d3fddddc31e709f562eae2167c0718ff821d067d4d46e9c5b6c6760
setFile
public MavenMetadata setFile(File file)
{    return new LocalSnapshotMetadata(metadata, file, legacyFormat);}
b2585874b87865eace30c330168a04230bae89eeda3d2fe20bf9bf198ae6751e
getKey
public Object getKey()
{    return getGroupId() + ':' + getArtifactId() + ':' + getVersion();}
9d98463b59efeaa7b22379910ba5cd77a352128a3e398aaff44ba4feaa3cb79e
getKey
public static Object getKey(Artifact artifact)
{    return artifact.getGroupId() + ':' + artifact.getArtifactId() + ':' + artifact.getBaseVersion();}
71f141be1ef6d6d354308a14dbbcf627038aa0f1646e1a5408a2f7d9e1679374
merge
protected void merge(Metadata recessive)
{    metadata.getVersioning().updateTimestamp();    if (!legacyFormat) {        String lastUpdated = metadata.getVersioning().getLastUpdated();        Map<String, SnapshotVersion> versions = new LinkedHashMap<>();        for (Artifact artifact : artifacts) {            SnapshotVersion sv = new SnapshotVersion();            sv.setClassifier(artifact.getClassifier());            sv.setExtension(artifact.getExtension());            sv.setVersion(getVersion());            sv.setUpdated(lastUpdated);            versions.put(getKey(sv.getClassifier(), sv.getExtension()), sv);        }        Versioning versioning = recessive.getVersioning();        if (versioning != null) {            for (SnapshotVersion sv : versioning.getSnapshotVersions()) {                String key = getKey(sv.getClassifier(), sv.getExtension());                if (!versions.containsKey(key)) {                    versions.put(key, sv);                }            }        }        metadata.getVersioning().setSnapshotVersions(new ArrayList<>(versions.values()));    }    artifacts.clear();}
e1e99039cdcf3c4a7ca036261d2d2513176ea5450ab34222fa7fb5716a7e6fbd
getKey
private String getKey(String classifier, String extension)
{    return classifier + ':' + extension;}
9590314d7a6edd0118345714cc714a8e73448e57e702bb4c6893b363f509d64d
getGroupId
public String getGroupId()
{    return metadata.getGroupId();}
1e5191dc99d9314f2df50294bcd8d717af7b8f4311575d36d8d75b27121f1064
getArtifactId
public String getArtifactId()
{    return metadata.getArtifactId();}
446b3b91c7c41085df1dc5542616b89ccd409f6a1d45e4d60d3ca00ac839ecf0
getVersion
public String getVersion()
{    return metadata.getVersion();}
d09928812d53b8e1a0690014b798570240ad8d62451844faa13841636ba63f2b
getNature
public Nature getNature()
{    return Nature.SNAPSHOT;}
a74d0c5be5b236619da5ea99d2afdfaf2c021f0a3df03d38b0162fcf0914c87e
prepare
public Collection<? extends Metadata> prepare(Collection<? extends Artifact> artifacts)
{    for (Artifact artifact : artifacts) {        if (artifact.isSnapshot()) {            Object key = LocalSnapshotMetadata.getKey(artifact);            LocalSnapshotMetadata snapshotMetadata = snapshots.get(key);            if (snapshotMetadata == null) {                snapshotMetadata = new LocalSnapshotMetadata(artifact, legacyFormat);                snapshots.put(key, snapshotMetadata);            }            snapshotMetadata.bind(artifact);        }    }    return Collections.emptyList();}
7e72f7ca951e07f66438e8a4e58c2b7c38037d36b3573c80039fd6560ec5330a
transformArtifact
public Artifact transformArtifact(Artifact artifact)
{    return artifact;}
1bb568dc249eaa1cafef1e71c15cd2232829cb4d3741b80d147044bdbe1d86b2
finish
public Collection<? extends Metadata> finish(Collection<? extends Artifact> artifacts)
{    return snapshots.values();}
e3f3888bce5cf21b1820845ce277d3e72af79375bd35bb93929649159ac47dbe
configure
protected void configure()
{    install(new AetherModule());        bind(ArtifactDescriptorReader.class).to(DefaultArtifactDescriptorReader.class).in(Singleton.class);        bind(VersionResolver.class).to(DefaultVersionResolver.class).in(Singleton.class);        bind(VersionRangeResolver.class).to(DefaultVersionRangeResolver.class).in(Singleton.class);        bind(MetadataGeneratorFactory.class).annotatedWith(Names.named("snapshot")).to(SnapshotMetadataGeneratorFactory.class).in(Singleton.class);        bind(MetadataGeneratorFactory.class).annotatedWith(Names.named("versions")).to(VersionsMetadataGeneratorFactory.class).in(Singleton.class);        bind(ModelBuilder.class).toInstance(new DefaultModelBuilderFactory().newInstance());}
c37b89e34ee08e3bd7a95bb6cd4aab16d59f6aad7024feb3ffd8bd0bd426a1bf
provideMetadataGeneratorFactories
 Set<MetadataGeneratorFactory> provideMetadataGeneratorFactories(@Named("snapshot") MetadataGeneratorFactory snapshot, @Named("versions") MetadataGeneratorFactory versions)
{    Set<MetadataGeneratorFactory> factories = new HashSet<>();    factories.add(snapshot);    factories.add(versions);    return Collections.unmodifiableSet(factories);}
624f725337dde847c4a699397a02f1b5558c709c88374adb10e603d835f48c88
getType
public String getType()
{    return MAVEN_METADATA_XML;}
ce0460f83bd172eacce98e8169f6d9b1d4ec316943fcf77ee2d8f12bbe7327a0
getFile
public File getFile()
{    return file;}
6ece292f84e90a962b69e8d7276c3ee6b9ce912bb02b00fc4028b699f977180b
merge
public void merge(File existing, File result) throws RepositoryException
{    Metadata recessive = read(existing);    merge(recessive);    write(result, metadata);    merged = true;}
cd82e61fe0a6cb4b8594ffc5700d7e4b1f51b3fa1e65ec7cedcc8d03a93a2f5f
isMerged
public boolean isMerged()
{    return merged;}
bb930d334241addfd2c57b916b0c37e5f7467647bebeea089441f7004acd6c33
read
 static Metadata read(File metadataFile) throws RepositoryException
{    if (metadataFile.length() <= 0) {        return new Metadata();    }    try (Reader reader = ReaderFactory.newXmlReader(metadataFile)) {        return new MetadataXpp3Reader().read(reader, false);    } catch (IOException e) {        throw new RepositoryException("Could not read metadata " + metadataFile + ": " + e.getMessage(), e);    } catch (XmlPullParserException e) {        throw new RepositoryException("Could not parse metadata " + metadataFile + ": " + e.getMessage(), e);    }}
0bac954ba47cde6345d53b50a8455e7c1c02a612566819e294cd602d1c05e171
write
private void write(File metadataFile, Metadata metadata) throws RepositoryException
{    metadataFile.getParentFile().mkdirs();    try (Writer writer = WriterFactory.newXmlWriter(metadataFile)) {        new MetadataXpp3Writer().write(writer, metadata);    } catch (IOException e) {        throw new RepositoryException("Could not write metadata " + metadataFile + ": " + e.getMessage(), e);    }}
2d65e12184bdd23ad5df14852e274b71e6796ed83668169853faa0f3d1fdce62
getProperties
public Map<String, String> getProperties()
{    return Collections.emptyMap();}
d63781123ccebcd0b78ff1dc9a71d6000f13de7683ae3c5b07e3122048128a56
setProperties
public org.eclipse.aether.metadata.Metadata setProperties(Map<String, String> properties)
{    return this;}
9abf44e9d02e1bf84f249cfe10c99d579d08f226408d23bab066ff0844e6a166
newServiceLocator
public static DefaultServiceLocator newServiceLocator()
{    DefaultServiceLocator locator = new DefaultServiceLocator();    locator.addService(ArtifactDescriptorReader.class, DefaultArtifactDescriptorReader.class);    locator.addService(VersionResolver.class, DefaultVersionResolver.class);    locator.addService(VersionRangeResolver.class, DefaultVersionRangeResolver.class);    locator.addService(MetadataGeneratorFactory.class, SnapshotMetadataGeneratorFactory.class);    locator.addService(MetadataGeneratorFactory.class, VersionsMetadataGeneratorFactory.class);    return locator;}
c510ff3dde370da9c578316c092a21005e8e9fba7be5284a665a44069dda0072
newSession
public static DefaultRepositorySystemSession newSession()
{    DefaultRepositorySystemSession session = new DefaultRepositorySystemSession();    DependencyTraverser depTraverser = new FatArtifactTraverser();    session.setDependencyTraverser(depTraverser);    DependencyManager depManager = new ClassicDependencyManager();    session.setDependencyManager(depManager);    DependencySelector depFilter = new AndDependencySelector(new ScopeDependencySelector("test", "provided"), new OptionalDependencySelector(), new ExclusionDependencySelector());    session.setDependencySelector(depFilter);    DependencyGraphTransformer transformer = new ConflictResolver(new NearestVersionSelector(), new JavaScopeSelector(), new SimpleOptionalitySelector(), new JavaScopeDeriver());    transformer = new ChainedDependencyGraphTransformer(transformer, new JavaDependencyContextRefiner());    session.setDependencyGraphTransformer(transformer);    DefaultArtifactTypeRegistry stereotypes = new DefaultArtifactTypeRegistry();    stereotypes.add(new DefaultArtifactType("pom"));    stereotypes.add(new DefaultArtifactType("maven-plugin", "jar", "", "java"));    stereotypes.add(new DefaultArtifactType("jar", "jar", "", "java"));    stereotypes.add(new DefaultArtifactType("ejb", "jar", "", "java"));    stereotypes.add(new DefaultArtifactType("ejb-client", "jar", "client", "java"));    stereotypes.add(new DefaultArtifactType("test-jar", "jar", "tests", "java"));    stereotypes.add(new DefaultArtifactType("javadoc", "jar", "javadoc", "java"));    stereotypes.add(new DefaultArtifactType("java-source", "jar", "sources", "java", false, false));    stereotypes.add(new DefaultArtifactType("war", "war", "", "java", false, true));    stereotypes.add(new DefaultArtifactType("ear", "ear", "", "java", false, true));    stereotypes.add(new DefaultArtifactType("rar", "rar", "", "java", false, true));    stereotypes.add(new DefaultArtifactType("par", "par", "", "java", false, true));    session.setArtifactTypeRegistry(stereotypes);    session.setArtifactDescriptorPolicy(new SimpleArtifactDescriptorPolicy(true, true));    final Properties systemProperties = new Properties();            Properties sysProp = System.getProperties();    synchronized (sysProp) {        systemProperties.putAll(sysProp);    }    session.setSystemProperties(systemProperties);    session.setConfigProperties(systemProperties);    return session;}
e3f3888bce5cf21b1820845ce277d3e72af79375bd35bb93929649159ac47dbe
configure
protected void configure()
{    install(new AetherModule());    bind(ArtifactDescriptorReader.class).to(DefaultArtifactDescriptorReader.class).in(Singleton.class);    bind(VersionResolver.class).to(DefaultVersionResolver.class).in(Singleton.class);    bind(VersionRangeResolver.class).to(DefaultVersionRangeResolver.class).in(Singleton.class);    bind(MetadataGeneratorFactory.class).annotatedWith(Names.named("snapshot")).to(SnapshotMetadataGeneratorFactory.class).in(Singleton.class);    bind(MetadataGeneratorFactory.class).annotatedWith(Names.named("versions")).to(VersionsMetadataGeneratorFactory.class).in(Singleton.class);    bind(ModelBuilder.class).toInstance(new DefaultModelBuilderFactory().newInstance());}
c37b89e34ee08e3bd7a95bb6cd4aab16d59f6aad7024feb3ffd8bd0bd426a1bf
provideMetadataGeneratorFactories
 Set<MetadataGeneratorFactory> provideMetadataGeneratorFactories(@Named("snapshot") MetadataGeneratorFactory snapshot, @Named("versions") MetadataGeneratorFactory versions)
{    Set<MetadataGeneratorFactory> factories = new HashSet<>(2);    factories.add(snapshot);    factories.add(versions);    return Collections.unmodifiableSet(factories);}
e5f4301724c4b0a1104612453f8c75446140188df5a0ec486c2a3a69b1e41c1d
createRepositoryMetadata
protected static Metadata createRepositoryMetadata(Artifact artifact, boolean legacyFormat)
{    Metadata metadata = new Metadata();    if (!legacyFormat) {        metadata.setModelVersion("1.1.0");    }    metadata.setGroupId(artifact.getGroupId());    metadata.setArtifactId(artifact.getArtifactId());    metadata.setVersion(artifact.getBaseVersion());    return metadata;}
616f7cb5b993738f67bd6c19fd6865668624116cacd0b4cd293c6cd877dcc0dd
bind
public void bind(Artifact artifact)
{    artifacts.add(artifact);}
b2585874b87865eace30c330168a04230bae89eeda3d2fe20bf9bf198ae6751e
getKey
public Object getKey()
{    return getGroupId() + ':' + getArtifactId() + ':' + getVersion();}
9d98463b59efeaa7b22379910ba5cd77a352128a3e398aaff44ba4feaa3cb79e
getKey
public static Object getKey(Artifact artifact)
{    return artifact.getGroupId() + ':' + artifact.getArtifactId() + ':' + artifact.getBaseVersion();}
2ed19d20c758ebd2892e59bef49d51cc516635a2f5bc9451117070435526e6ce
getKey
protected String getKey(String classifier, String extension)
{    return classifier + ':' + extension;}
9590314d7a6edd0118345714cc714a8e73448e57e702bb4c6893b363f509d64d
getGroupId
public String getGroupId()
{    return metadata.getGroupId();}
1e5191dc99d9314f2df50294bcd8d717af7b8f4311575d36d8d75b27121f1064
getArtifactId
public String getArtifactId()
{    return metadata.getArtifactId();}
446b3b91c7c41085df1dc5542616b89ccd409f6a1d45e4d60d3ca00ac839ecf0
getVersion
public String getVersion()
{    return metadata.getVersion();}
d09928812d53b8e1a0690014b798570240ad8d62451844faa13841636ba63f2b
getNature
public Nature getNature()
{    return Nature.SNAPSHOT;}
9590314d7a6edd0118345714cc714a8e73448e57e702bb4c6893b363f509d64d
getGroupId
public String getGroupId()
{    if (groupId != null) {        return groupId;    } else {        return artifact.getGroupId();    }}
1e5191dc99d9314f2df50294bcd8d717af7b8f4311575d36d8d75b27121f1064
getArtifactId
public String getArtifactId()
{    if (artifactId != null) {        return artifactId;    } else {        return artifact.getArtifactId();    }}
446b3b91c7c41085df1dc5542616b89ccd409f6a1d45e4d60d3ca00ac839ecf0
getVersion
public String getVersion()
{    if (version != null) {        return version;    } else {        return artifact.getVersion();    }}
72a56f4f76ed886823d719d171deaf7269e3e03581e490ae41d8888ab09c151c
getClassifier
public String getClassifier()
{    return artifact.getClassifier();}
dd386f4d75b694f73345347a9b2e46289fee679d7748d4d3eee41cd501d6e88c
getExtension
public String getExtension()
{    return artifact.getExtension();}
ce0460f83bd172eacce98e8169f6d9b1d4ec316943fcf77ee2d8f12bbe7327a0
getFile
public File getFile()
{    return artifact.getFile();}
52d4e9e6b53b263485aa0a2b4c64d81d841e9444c5dccd2381c46a38f66ebd41
getProperty
public String getProperty(String key, String defaultValue)
{    return artifact.getProperty(key, defaultValue);}
2d65e12184bdd23ad5df14852e274b71e6796ed83668169853faa0f3d1fdce62
getProperties
public Map<String, String> getProperties()
{    return artifact.getProperties();}
471fe7333d3fddddc31e709f562eae2167c0718ff821d067d4d46e9c5b6c6760
setFile
public MavenMetadata setFile(File file)
{    return new RemoteSnapshotMetadata(metadata, file, legacyFormat);}
b1f0f503572c3504efb1a5de6d79cf98b6e9dc492180749c985be368d3358be8
getExpandedVersion
public String getExpandedVersion(Artifact artifact)
{    String key = getKey(artifact.getClassifier(), artifact.getExtension());    return versions.get(key).getVersion();}
71f141be1ef6d6d354308a14dbbcf627038aa0f1646e1a5408a2f7d9e1679374
merge
protected void merge(Metadata recessive)
{    Snapshot snapshot;    String lastUpdated;    if (metadata.getVersioning() == null) {        DateFormat utcDateFormatter = new SimpleDateFormat(DEFAULT_SNAPSHOT_TIMESTAMP_FORMAT);        utcDateFormatter.setCalendar(new GregorianCalendar());        utcDateFormatter.setTimeZone(DEFAULT_SNAPSHOT_TIME_ZONE);        snapshot = new Snapshot();        snapshot.setBuildNumber(getBuildNumber(recessive) + 1);        snapshot.setTimestamp(utcDateFormatter.format(new Date()));        Versioning versioning = new Versioning();        versioning.setSnapshot(snapshot);        versioning.setLastUpdated(snapshot.getTimestamp().replace(".", ""));        lastUpdated = versioning.getLastUpdated();        metadata.setVersioning(versioning);    } else {        snapshot = metadata.getVersioning().getSnapshot();        lastUpdated = metadata.getVersioning().getLastUpdated();    }    for (Artifact artifact : artifacts) {        String version = artifact.getVersion();        if (version.endsWith(SNAPSHOT)) {            String qualifier = snapshot.getTimestamp() + '-' + snapshot.getBuildNumber();            version = version.substring(0, version.length() - SNAPSHOT.length()) + qualifier;        }        SnapshotVersion sv = new SnapshotVersion();        sv.setClassifier(artifact.getClassifier());        sv.setExtension(artifact.getExtension());        sv.setVersion(version);        sv.setUpdated(lastUpdated);        versions.put(getKey(sv.getClassifier(), sv.getExtension()), sv);    }    artifacts.clear();    Versioning versioning = recessive.getVersioning();    if (versioning != null) {        for (SnapshotVersion sv : versioning.getSnapshotVersions()) {            String key = getKey(sv.getClassifier(), sv.getExtension());            if (!versions.containsKey(key)) {                versions.put(key, sv);            }        }    }    if (!legacyFormat) {        metadata.getVersioning().setSnapshotVersions(new ArrayList<>(versions.values()));    }}
16a4912e5bed77363da848fb3ef29c31ed9a061dadce1509f24b5c8cfd8a35bc
getBuildNumber
private static int getBuildNumber(Metadata metadata)
{    int number = 0;    Versioning versioning = metadata.getVersioning();    if (versioning != null) {        Snapshot snapshot = versioning.getSnapshot();        if (snapshot != null && snapshot.getBuildNumber() > 0) {            number = snapshot.getBuildNumber();        }    }    return number;}
a74d0c5be5b236619da5ea99d2afdfaf2c021f0a3df03d38b0162fcf0914c87e
prepare
public Collection<? extends Metadata> prepare(Collection<? extends Artifact> artifacts)
{    for (Artifact artifact : artifacts) {        if (artifact.isSnapshot()) {            Object key = RemoteSnapshotMetadata.getKey(artifact);            RemoteSnapshotMetadata snapshotMetadata = snapshots.get(key);            if (snapshotMetadata == null) {                snapshotMetadata = new RemoteSnapshotMetadata(artifact, legacyFormat);                snapshots.put(key, snapshotMetadata);            }            snapshotMetadata.bind(artifact);        }    }    return snapshots.values();}
7e72f7ca951e07f66438e8a4e58c2b7c38037d36b3573c80039fd6560ec5330a
transformArtifact
public Artifact transformArtifact(Artifact artifact)
{    if (artifact.isSnapshot() && artifact.getVersion().equals(artifact.getBaseVersion())) {        Object key = RemoteSnapshotMetadata.getKey(artifact);        RemoteSnapshotMetadata snapshotMetadata = snapshots.get(key);        if (snapshotMetadata != null) {            artifact = artifact.setVersion(snapshotMetadata.getExpandedVersion(artifact));        }    }    return artifact;}
1bb568dc249eaa1cafef1e71c15cd2232829cb4d3741b80d147044bdbe1d86b2
finish
public Collection<? extends Metadata> finish(Collection<? extends Artifact> artifacts)
{    return Collections.emptyList();}
e781d24415275b0c03268fde05c4a3222b2c8b2987a71fa4851cbcf2690b7ff8
newInstance
public MetadataGenerator newInstance(RepositorySystemSession session, InstallRequest request)
{    return new LocalSnapshotMetadataGenerator(session, request);}
5bd23e030e591c4eea1be7bc17060383d605ba28b73e3d69a7110f0f0656472b
newInstance
public MetadataGenerator newInstance(RepositorySystemSession session, DeployRequest request)
{    return new RemoteSnapshotMetadataGenerator(session, request);}
05059ca149ccaeab9b544201863a810ff640c2cd00713f51ae2dd34812733778
getPriority
public float getPriority()
{    return 10;}
e246b7605a0fb246338fb53ec958979db36731e3e7b3cea7f5a0ad037c129053
createRepositoryMetadata
private static Metadata createRepositoryMetadata(Artifact artifact)
{    Metadata metadata = new Metadata();    metadata.setGroupId(artifact.getGroupId());    metadata.setArtifactId(artifact.getArtifactId());    Versioning versioning = new Versioning();    versioning.addVersion(artifact.getBaseVersion());    if (!artifact.isSnapshot()) {        versioning.setRelease(artifact.getBaseVersion());    }    if ("maven-plugin".equals(artifact.getProperty(ArtifactProperties.TYPE, ""))) {        versioning.setLatest(artifact.getBaseVersion());    }    metadata.setVersioning(versioning);    return metadata;}
71f141be1ef6d6d354308a14dbbcf627038aa0f1646e1a5408a2f7d9e1679374
merge
protected void merge(Metadata recessive)
{    Versioning versioning = metadata.getVersioning();    versioning.updateTimestamp();    if (recessive.getVersioning() != null) {        if (versioning.getLatest() == null) {            versioning.setLatest(recessive.getVersioning().getLatest());        }        if (versioning.getRelease() == null) {            versioning.setRelease(recessive.getVersioning().getRelease());        }        Collection<String> versions = new LinkedHashSet<>(recessive.getVersioning().getVersions());        versions.addAll(versioning.getVersions());        versioning.setVersions(new ArrayList<>(versions));    }}
b2585874b87865eace30c330168a04230bae89eeda3d2fe20bf9bf198ae6751e
getKey
public Object getKey()
{    return getGroupId() + ':' + getArtifactId();}
9d98463b59efeaa7b22379910ba5cd77a352128a3e398aaff44ba4feaa3cb79e
getKey
public static Object getKey(Artifact artifact)
{    return artifact.getGroupId() + ':' + artifact.getArtifactId();}
471fe7333d3fddddc31e709f562eae2167c0718ff821d067d4d46e9c5b6c6760
setFile
public MavenMetadata setFile(File file)
{    return new VersionsMetadata(artifact, file);}
9590314d7a6edd0118345714cc714a8e73448e57e702bb4c6893b363f509d64d
getGroupId
public String getGroupId()
{    return artifact.getGroupId();}
1e5191dc99d9314f2df50294bcd8d717af7b8f4311575d36d8d75b27121f1064
getArtifactId
public String getArtifactId()
{    return artifact.getArtifactId();}
446b3b91c7c41085df1dc5542616b89ccd409f6a1d45e4d60d3ca00ac839ecf0
getVersion
public String getVersion()
{    return "";}
d09928812d53b8e1a0690014b798570240ad8d62451844faa13841636ba63f2b
getNature
public Nature getNature()
{    return artifact.isSnapshot() ? Nature.RELEASE_OR_SNAPSHOT : Nature.RELEASE;}
a74d0c5be5b236619da5ea99d2afdfaf2c021f0a3df03d38b0162fcf0914c87e
prepare
public Collection<? extends Metadata> prepare(Collection<? extends Artifact> artifacts)
{    return Collections.emptyList();}
7e72f7ca951e07f66438e8a4e58c2b7c38037d36b3573c80039fd6560ec5330a
transformArtifact
public Artifact transformArtifact(Artifact artifact)
{    return artifact;}
1bb568dc249eaa1cafef1e71c15cd2232829cb4d3741b80d147044bdbe1d86b2
finish
public Collection<? extends Metadata> finish(Collection<? extends Artifact> artifacts)
{    for (Artifact artifact : artifacts) {        Object key = VersionsMetadata.getKey(artifact);        if (processedVersions.get(key) == null) {            VersionsMetadata versionsMetadata = versions.get(key);            if (versionsMetadata == null) {                versionsMetadata = new VersionsMetadata(artifact);                versions.put(key, versionsMetadata);            }        }    }    return versions.values();}
e781d24415275b0c03268fde05c4a3222b2c8b2987a71fa4851cbcf2690b7ff8
newInstance
public MetadataGenerator newInstance(RepositorySystemSession session, InstallRequest request)
{    return new VersionsMetadataGenerator(session, request);}
5bd23e030e591c4eea1be7bc17060383d605ba28b73e3d69a7110f0f0656472b
newInstance
public MetadataGenerator newInstance(RepositorySystemSession session, DeployRequest request)
{    return new VersionsMetadataGenerator(session, request);}
05059ca149ccaeab9b544201863a810ff640c2cd00713f51ae2dd34812733778
getPriority
public float getPriority()
{    return 5;}
d57c1d7022b9b24e5d6471b55681e866b61cc2646c5e5e41baf69039be0b670b
customizeContainerConfiguration
protected void customizeContainerConfiguration(ContainerConfiguration containerConfiguration)
{    super.customizeContainerConfiguration(containerConfiguration);    containerConfiguration.setAutoWiring(true);    containerConfiguration.setClassPathScanning(PlexusConstants.SCANNING_INDEX);}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();    system = lookup(RepositorySystem.class);    session = newMavenRepositorySystemSession(system);}
68bbf6c94fbad4862990669ea582b65c28678087c2377b2c3fb0948d54293af4
tearDown
protected void tearDown() throws Exception
{    session = null;    system = null;    super.tearDown();}
0f41a8ea7b95ed1953d0a54de8aa5424444239f45617ac0b8dcb698311c4e626
newMavenRepositorySystemSession
public static RepositorySystemSession newMavenRepositorySystemSession(RepositorySystem system)
{    DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();    LocalRepository localRepo = new LocalRepository("target/local-repo");    session.setLocalRepositoryManager(system.newLocalRepositoryManager(session, localRepo));    session.setTransferListener(new ConsoleTransferListener());    session.setRepositoryListener(new ConsoleRepositoryListener());    return session;}
bdf30557e8dabf4af6c237ae913f1f1df8ba0f7d13fd7ba1f1181cd7242dabf9
newTestRepository
public static RemoteRepository newTestRepository() throws MalformedURLException
{    return new RemoteRepository.Builder("repo", "default", getTestFile("target/test-classes/repo").toURI().toURL().toString()).build();}
02e3e288b95fffa9fd5bd95501c60de240465b189e635b9acd2eeca603820149
testMng5459
public void testMng5459() throws Exception
{        DefaultArtifactDescriptorReader reader = (DefaultArtifactDescriptorReader) lookup(ArtifactDescriptorReader.class);    RepositoryEventDispatcher eventDispatcher = mock(RepositoryEventDispatcher.class);    ArgumentCaptor<RepositoryEvent> event = ArgumentCaptor.forClass(RepositoryEvent.class);    reader.setRepositoryEventDispatcher(eventDispatcher);    ArtifactDescriptorRequest request = new ArtifactDescriptorRequest();    request.addRepository(newTestRepository());    request.setArtifact(new DefaultArtifact("org.apache.maven.its", "dep-mng5459", "jar", "0.4.0-SNAPSHOT"));        reader.readArtifactDescriptor(session, request);        verify(eventDispatcher).dispatch(event.capture());    boolean missingArtifactDescriptor = false;    for (RepositoryEvent evt : event.getAllValues()) {        if (EventType.ARTIFACT_DESCRIPTOR_MISSING.equals(evt.getType())) {            assertEquals("Could not find artifact org.apache.maven.its:dep-mng5459:pom:0.4.0-20130404.090532-2 in repo (" + newTestRepository().getUrl() + ")", evt.getException().getMessage());            missingArtifactDescriptor = true;        }    }    if (!missingArtifactDescriptor) {        fail("Expected missing artifact descriptor for org.apache.maven.its:dep-mng5459:pom:0.4.0-20130404.090532-2");    }}
042f9df5e2d072985c137909e88ab90ad237ebae82f80dfc99ce712061acf9e3
testResolveParentThrowsUnresolvableModelExceptionWhenNotFound
public void testResolveParentThrowsUnresolvableModelExceptionWhenNotFound() throws Exception
{    final Parent parent = new Parent();    parent.setGroupId("ut.simple");    parent.setArtifactId("artifact");    parent.setVersion("0");    try {        this.newModelResolver().resolveModel(parent);        fail("Expected 'UnresolvableModelException' not thrown.");    } catch (final UnresolvableModelException e) {        assertNotNull(e.getMessage());        assertTrue(e.getMessage().startsWith("Could not find artifact ut.simple:artifact:pom:0 in repo"));    }}
24b15d737b18756f8bcd288906dca4928e5d47182198810ea71fd9638a530d28
testResolveParentThrowsUnresolvableModelExceptionWhenNoMatchingVersionFound
public void testResolveParentThrowsUnresolvableModelExceptionWhenNoMatchingVersionFound() throws Exception
{    final Parent parent = new Parent();    parent.setGroupId("ut.simple");    parent.setArtifactId("artifact");    parent.setVersion("[2.0,2.1)");    try {        this.newModelResolver().resolveModel(parent);        fail("Expected 'UnresolvableModelException' not thrown.");    } catch (final UnresolvableModelException e) {        assertEquals("No versions matched the requested parent version range '[2.0,2.1)'", e.getMessage());    }}
991b1cf72428e4d6dc0f1be2fb6015541b3a37cba40d9271aa6949405b4e7138
testResolveParentThrowsUnresolvableModelExceptionWhenUsingRangesWithoutUpperBound
public void testResolveParentThrowsUnresolvableModelExceptionWhenUsingRangesWithoutUpperBound() throws Exception
{    final Parent parent = new Parent();    parent.setGroupId("ut.simple");    parent.setArtifactId("artifact");    parent.setVersion("[1.0,)");    try {        this.newModelResolver().resolveModel(parent);        fail("Expected 'UnresolvableModelException' not thrown.");    } catch (final UnresolvableModelException e) {        assertEquals("The requested parent version range '[1.0,)' does not specify an upper bound", e.getMessage());    }}
a4980fe65692d3947e8d2e04228b134ca83be2d8dbc2afbd9ec6b1d96132b887
testResolveParentSuccessfullyResolvesExistingParentWithoutRange
public void testResolveParentSuccessfullyResolvesExistingParentWithoutRange() throws Exception
{    final Parent parent = new Parent();    parent.setGroupId("ut.simple");    parent.setArtifactId("artifact");    parent.setVersion("1.0");    assertNotNull(this.newModelResolver().resolveModel(parent));    assertEquals("1.0", parent.getVersion());}
1afccffcb3d27b2bf629f255973454d21bedf32e3349fd16edb3b25a258b91e1
testResolveParentSuccessfullyResolvesExistingParentUsingHighestVersion
public void testResolveParentSuccessfullyResolvesExistingParentUsingHighestVersion() throws Exception
{    final Parent parent = new Parent();    parent.setGroupId("ut.simple");    parent.setArtifactId("artifact");    parent.setVersion("(,2.0)");    assertNotNull(this.newModelResolver().resolveModel(parent));    assertEquals("1.0", parent.getVersion());}
d017e044218aa08ae4aead2208da552dff242706a125a6e044d6176491840e08
testResolveDependencyThrowsUnresolvableModelExceptionWhenNotFound
public void testResolveDependencyThrowsUnresolvableModelExceptionWhenNotFound() throws Exception
{    final Dependency dependency = new Dependency();    dependency.setGroupId("ut.simple");    dependency.setArtifactId("artifact");    dependency.setVersion("0");    try {        this.newModelResolver().resolveModel(dependency);        fail("Expected 'UnresolvableModelException' not thrown.");    } catch (final UnresolvableModelException e) {        assertNotNull(e.getMessage());        assertTrue(e.getMessage().startsWith("Could not find artifact ut.simple:artifact:pom:0 in repo"));    }}
71e6f273ad35df8acd356817b036bb09fcdf717745e55d5792c453dd1e31c552
testResolveDependencyThrowsUnresolvableModelExceptionWhenNoMatchingVersionFound
public void testResolveDependencyThrowsUnresolvableModelExceptionWhenNoMatchingVersionFound() throws Exception
{    final Dependency dependency = new Dependency();    dependency.setGroupId("ut.simple");    dependency.setArtifactId("artifact");    dependency.setVersion("[2.0,2.1)");    try {        this.newModelResolver().resolveModel(dependency);        fail("Expected 'UnresolvableModelException' not thrown.");    } catch (final UnresolvableModelException e) {        assertEquals("No versions matched the requested dependency version range '[2.0,2.1)'", e.getMessage());    }}
a3c17ab183fcf38a1cd8190acd3b15881b9631a3d58a224bb98b0a4612ee1349
testResolveDependencyThrowsUnresolvableModelExceptionWhenUsingRangesWithoutUpperBound
public void testResolveDependencyThrowsUnresolvableModelExceptionWhenUsingRangesWithoutUpperBound() throws Exception
{    final Dependency dependency = new Dependency();    dependency.setGroupId("ut.simple");    dependency.setArtifactId("artifact");    dependency.setVersion("[1.0,)");    try {        this.newModelResolver().resolveModel(dependency);        fail("Expected 'UnresolvableModelException' not thrown.");    } catch (final UnresolvableModelException e) {        assertEquals("The requested dependency version range '[1.0,)' does not specify an upper bound", e.getMessage());    }}
b975c57fc0e140ca994be768b59fa26058fda00f57afce5fdc2e0f8ed512f9ad
testResolveDependencySuccessfullyResolvesExistingDependencyWithoutRange
public void testResolveDependencySuccessfullyResolvesExistingDependencyWithoutRange() throws Exception
{    final Dependency dependency = new Dependency();    dependency.setGroupId("ut.simple");    dependency.setArtifactId("artifact");    dependency.setVersion("1.0");    assertNotNull(this.newModelResolver().resolveModel(dependency));    assertEquals("1.0", dependency.getVersion());}
2a7c8c9ddb07fea00acb6c17f0b6d1b262229c97b9027027d65b170304384acc
testResolveDependencySuccessfullyResolvesExistingDependencyUsingHighestVersion
public void testResolveDependencySuccessfullyResolvesExistingDependencyUsingHighestVersion() throws Exception
{    final Dependency dependency = new Dependency();    dependency.setGroupId("ut.simple");    dependency.setArtifactId("artifact");    dependency.setVersion("(,2.0)");    assertNotNull(this.newModelResolver().resolveModel(dependency));    assertEquals("1.0", dependency.getVersion());}
15c4c277d77a30928a2c6ce76fcd5be83eabf80f2986b8315d1b38619d7aed87
newModelResolver
private ModelResolver newModelResolver() throws ComponentLookupException, MalformedURLException
{    return new DefaultModelResolver(this.session, null, this.getClass().getName(), lookup(ArtifactResolver.class), lookup(VersionRangeResolver.class), lookup(RemoteRepositoryManager.class), Arrays.asList(newTestRepository()));}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();        versionResolver = (DefaultVersionResolver) lookup(VersionResolver.class, "default");}
68bbf6c94fbad4862990669ea582b65c28678087c2377b2c3fb0948d54293af4
tearDown
protected void tearDown() throws Exception
{    versionResolver = null;    super.tearDown();}
9d33e6901e060c4b8e9cddca9bbef7974225b29540b4229298ef9ea891925107
testResolveSeparateInstalledClassifiedNonUniqueVersionedArtifacts
public void testResolveSeparateInstalledClassifiedNonUniqueVersionedArtifacts() throws Exception
{    VersionRequest requestB = new VersionRequest();    requestB.addRepository(newTestRepository());    Artifact artifactB = new DefaultArtifact("org.apache.maven.its", "dep-mng5324", "classifierB", "jar", "07.20.3-SNAPSHOT");    requestB.setArtifact(artifactB);    VersionResult resultB = versionResolver.resolveVersion(session, requestB);    assertEquals("07.20.3-20120809.112920-97", resultB.getVersion());    VersionRequest requestA = new VersionRequest();    requestA.addRepository(newTestRepository());    Artifact artifactA = new DefaultArtifact("org.apache.maven.its", "dep-mng5324", "classifierA", "jar", "07.20.3-SNAPSHOT");    requestA.setArtifact(artifactA);    VersionResult resultA = versionResolver.resolveVersion(session, requestA);    assertEquals("07.20.3-20120809.112124-88", resultA.getVersion());}
5d6b5a2ac23b31405f279b571b06ef4c783594e85d5ab1a5f6a01a782ef40b3e
testResolveSeparateInstalledClassifiedNonVersionedArtifacts
public void testResolveSeparateInstalledClassifiedNonVersionedArtifacts() throws Exception
{    VersionRequest requestA = new VersionRequest();    requestA.addRepository(newTestRepository());    String versionA = "07.20.3-20120809.112124-88";    Artifact artifactA = new DefaultArtifact("org.apache.maven.its", "dep-mng5324", "classifierA", "jar", versionA);    requestA.setArtifact(artifactA);    VersionResult resultA = versionResolver.resolveVersion(session, requestA);    assertEquals(versionA, resultA.getVersion());    VersionRequest requestB = new VersionRequest();    requestB.addRepository(newTestRepository());    String versionB = "07.20.3-20120809.112920-97";    Artifact artifactB = new DefaultArtifact("org.apache.maven.its", "dep-mng5324", "classifierB", "jar", versionB);    requestB.setArtifact(artifactB);    VersionResult resultB = versionResolver.resolveVersion(session, requestB);    assertEquals(versionB, resultB.getVersion());}
05d429b63aa2d79d7304c31270905d8b43449e49bcaef1ee8a9825668b42d689
testGetRepositorySystem
public void testGetRepositorySystem()
{    ServiceLocator locator = MavenRepositorySystemUtils.newServiceLocator();    RepositorySystem repoSys = locator.getService(RepositorySystem.class);    assertNotNull(repoSys);}
f6e2cc594fda9460a0e814969da8dd15870b4d89b765f537a635c535fde73932
testGetMetadataGeneratorFactories
public void testGetMetadataGeneratorFactories()
{    ServiceLocator locator = MavenRepositorySystemUtils.newServiceLocator();    assertEquals(2, locator.getServices(MetadataGeneratorFactory.class).size());}
4ca715305cc557491994ddb3033f25902160f1f9289726a69be843bf9b1b86f3
setLocaleToUseBuddhistCalendar
public void setLocaleToUseBuddhistCalendar()
{    defaultLocale = Locale.getDefault();    Locale.setDefault(new Locale("th", "TH"));}
fdd3b393b92463e78f75e0f65314fdb5dbebb6cdfed72fb676e5b43f6a1ea0aa
restoreLocale
public void restoreLocale()
{    Locale.setDefault(defaultLocale);}
4d40d36f46e68b5dc1cff674d150c5ffaf140f56d3c1eb23c4a3d11f19f2f610
gregorianDate
 static String gregorianDate()
{    SimpleDateFormat df = new SimpleDateFormat("yyyyMMdd");    df.setCalendar(new GregorianCalendar());    df.setTimeZone(RemoteSnapshotMetadata.DEFAULT_SNAPSHOT_TIME_ZONE);    return df.format(new Date());}
c429c3d62212b7868835a71b37e947e1d776a3808fdac52c4f9ec723bdf71123
gregorianCalendarIsUsed
public void gregorianCalendarIsUsed()
{    String dateBefore = gregorianDate();    RemoteSnapshotMetadata metadata = new RemoteSnapshotMetadata(new DefaultArtifact("a:b:1-SNAPSHOT"), false);    metadata.merge(new Metadata());    String dateAfter = gregorianDate();    String ts = metadata.metadata.getVersioning().getSnapshot().getTimestamp();    String datePart = ts.replaceAll("\\..*", "");    /* Allow for this test running across midnight */    Set<String> expected = new HashSet<String>(Arrays.asList(dateBefore, dateAfter));    assertTrue("Expected " + datePart + " to be in " + expected, expected.contains(datePart));}
74c087ea508a482cb09f87a467a6e7d201300845d82812ad5ac6e2c019e31bd8
testResolveVersionRange
public void testResolveVersionRange() throws Exception
{}
0e6a4cfdb3529bc542a4926c2b5cae5f952ef4339b28343cd851904252bdb6fc
testResolveVersion
public void testResolveVersion() throws Exception
{}
d071bc3372127a31bd72cfbeeba51a19524bfd892d82b8dbcda52832490e70ad
testReadArtifactDescriptor
public void testReadArtifactDescriptor() throws Exception
{    Artifact artifact = new DefaultArtifact("ut.simple:artifact:extension:classifier:1.0");    ArtifactDescriptorRequest request = new ArtifactDescriptorRequest();    request.setArtifact(artifact);    request.addRepository(newTestRepository());    ArtifactDescriptorResult result = system.readArtifactDescriptor(session, request);    List<Dependency> deps = result.getDependencies();    assertEquals(2, deps.size());    checkUtSimpleArtifactDependencies(deps.get(0), deps.get(1));}
bfb76efe7a60b4307669fe68b0c580d135169c34fbf210d162b6ce79126bdad6
checkUtSimpleArtifactDependencies
private void checkUtSimpleArtifactDependencies(Dependency dep1, Dependency dep2)
{    assertEquals("compile", dep1.getScope());    assertFalse(dep1.isOptional());    assertEquals(0, dep1.getExclusions().size());    Artifact depArtifact = dep1.getArtifact();    assertEquals("ut.simple", depArtifact.getGroupId());    assertEquals("dependency", depArtifact.getArtifactId());    assertEquals("1.0", depArtifact.getVersion());    assertEquals("1.0", depArtifact.getBaseVersion());    assertNull(depArtifact.getFile());    assertFalse(depArtifact.isSnapshot());    assertEquals("", depArtifact.getClassifier());    assertEquals("jar", depArtifact.getExtension());    assertEquals("java", depArtifact.getProperty("language", null));    assertEquals("jar", depArtifact.getProperty("type", null));    assertEquals("true", depArtifact.getProperty("constitutesBuildPath", null));    assertEquals("false", depArtifact.getProperty("includesDependencies", null));    assertEquals(4, depArtifact.getProperties().size());    assertEquals("compile", dep2.getScope());    assertFalse(dep2.isOptional());    assertEquals(0, dep2.getExclusions().size());    depArtifact = dep2.getArtifact();    assertEquals("ut.simple", depArtifact.getGroupId());    assertEquals("dependency", depArtifact.getArtifactId());    assertEquals("1.0", depArtifact.getVersion());    assertEquals("1.0", depArtifact.getBaseVersion());    assertNull(depArtifact.getFile());    assertFalse(depArtifact.isSnapshot());    assertEquals("sources", depArtifact.getClassifier());    assertEquals("jar", depArtifact.getExtension());    assertEquals("java", depArtifact.getProperty("language", null));        assertEquals("jar", depArtifact.getProperty("type", null));        assertEquals("true", depArtifact.getProperty("constitutesBuildPath", null));    assertEquals("false", depArtifact.getProperty("includesDependencies", null));    assertEquals(4, depArtifact.getProperties().size());}
ba481ef1b6234a0678adabf0b57721feee661a49453d54e1a0617b701aea14d4
testCollectDependencies
public void testCollectDependencies() throws Exception
{    Artifact artifact = new DefaultArtifact("ut.simple:artifact:extension:classifier:1.0");        CollectRequest collectRequest = new CollectRequest();    collectRequest.setRoot(new Dependency(artifact, null));    collectRequest.addRepository(newTestRepository());    CollectResult collectResult = system.collectDependencies(session, collectRequest);    List<DependencyNode> nodes = collectResult.getRoot().getChildren();    assertEquals(2, nodes.size());    checkUtSimpleArtifactDependencies(nodes.get(0).getDependency(), nodes.get(1).getDependency());}
3e0f4ad44b255841369dbcbfd95084f26e4b879f83592d002704dd39ed18e4af
testResolveArtifact
public void testResolveArtifact() throws Exception
{    Artifact artifact = new DefaultArtifact("ut.simple:artifact:1.0");    ArtifactRequest artifactRequest = new ArtifactRequest();    artifactRequest.setArtifact(artifact);    artifactRequest.addRepository(newTestRepository());    ArtifactResult artifactResult = system.resolveArtifact(session, artifactRequest);    checkArtifactResult(artifactResult, "artifact-1.0.jar");    artifact = new DefaultArtifact("ut.simple:artifact:zip:1.0");    artifactRequest.setArtifact(artifact);    artifactResult = system.resolveArtifact(session, artifactRequest);    checkArtifactResult(artifactResult, "artifact-1.0.zip");    artifact = new DefaultArtifact("ut.simple:artifact:zip:classifier:1.0");    artifactRequest.setArtifact(artifact);    artifactResult = system.resolveArtifact(session, artifactRequest);    checkArtifactResult(artifactResult, "artifact-1.0-classifier.zip");}
3523d5d4a3ee5d298eeae36a46e800d566f951632be2f6a56484abc850788d9a
checkArtifactResult
private void checkArtifactResult(ArtifactResult result, String filename)
{    assertFalse(result.isMissing());    assertTrue(result.isResolved());    Artifact artifact = result.getArtifact();    assertNotNull(artifact.getFile());    assertEquals(filename, artifact.getFile().getName());}
8f7e6bbc72b3bf0c63dead9e367c4815af6adf901ef280ffadcce5cbcaf70cb0
testResolveArtifacts
public void testResolveArtifacts() throws Exception
{    ArtifactRequest req1 = new ArtifactRequest();    req1.setArtifact(new DefaultArtifact("ut.simple:artifact:1.0"));    req1.addRepository(newTestRepository());    ArtifactRequest req2 = new ArtifactRequest();    req2.setArtifact(new DefaultArtifact("ut.simple:artifact:zip:1.0"));    req2.addRepository(newTestRepository());    ArtifactRequest req3 = new ArtifactRequest();    req3.setArtifact(new DefaultArtifact("ut.simple:artifact:zip:classifier:1.0"));    req3.addRepository(newTestRepository());    List<ArtifactRequest> requests = Arrays.asList(req1, req2, req3);    List<ArtifactResult> results = system.resolveArtifacts(session, requests);    assertEquals(3, results.size());    checkArtifactResult(results.get(0), "artifact-1.0.jar");    checkArtifactResult(results.get(1), "artifact-1.0.zip");    checkArtifactResult(results.get(2), "artifact-1.0-classifier.zip");}
62f1f1d6bacad5a8cd370ef4904de9f46cd81f96dbd95b67ec4e74efa4242497
testResolveMetadata
public void testResolveMetadata() throws Exception
{}
4832f40fe7afccae71c742495aec907b3a4d9fa2667dc8eaf23b224649e60ce0
testInstall
public void testInstall() throws Exception
{}
f2980c095a884ada335d3ddb737ffebe793f48bf9192540f2fdc664221d348c6
testDeploy
public void testDeploy() throws Exception
{}
97e510b277465d450cdec8a95d41be8f096bbc02ff5192d5b7fa9e11299463ad
testNewLocalRepositoryManager
public void testNewLocalRepositoryManager() throws Exception
{}
811ac032e439e3d23b7e01f1b98210c8a874eaa1143ba256937587264da86e71
testNewSyncContext
public void testNewSyncContext() throws Exception
{}
b3a25219893e44d3bf19456a3603cbffd0b351baefbd4df7b48b8c0658c749ef
artifactDeployed
public void artifactDeployed(RepositoryEvent event)
{    println("artifactDeployed", event.getArtifact() + " to " + event.getRepository());}
6154a169e945319fe612b4f8f7558f2b6d1712fd469be1c5f0f868f22a3c5494
artifactDeploying
public void artifactDeploying(RepositoryEvent event)
{    println("artifactDeploying", event.getArtifact() + " to " + event.getRepository());}
f1e301d83bfdae897667ae95d4f5d2492d3c00907292eb6c9aa79610986d6676
artifactDescriptorInvalid
public void artifactDescriptorInvalid(RepositoryEvent event)
{    println("artifactDescriptorInvalid", "for " + event.getArtifact() + ": " + event.getException().getMessage());}
eabdfac5fe85a9fb25305640d906eafc91431676b02d8419323e702d711b1d9b
artifactDescriptorMissing
public void artifactDescriptorMissing(RepositoryEvent event)
{    println("artifactDescriptorMissing", "for " + event.getArtifact());}
8e8ea92d4d2a193565eeb171d7e62b4fe3d438a3ed250d2019f57376e291a72a
artifactInstalled
public void artifactInstalled(RepositoryEvent event)
{    println("artifactInstalled", event.getArtifact() + " to " + event.getFile());}
8a756148e2b12512aa3928f8ac78935964f7942d5ac4aa39608e8065ea8cbfbb
artifactInstalling
public void artifactInstalling(RepositoryEvent event)
{    println("artifactInstalling", event.getArtifact() + " to " + event.getFile());}
40fd07553750fd47584bb574904f97f461cec4092efee37cc6dd0d07580e3a1c
artifactResolved
public void artifactResolved(RepositoryEvent event)
{    println("artifactResolved", event.getArtifact() + " from " + event.getRepository());}
b2e0a06942acbb4b3465a301aadf6cf7c1611b857ff824e618156f6b5a3d71b3
artifactDownloading
public void artifactDownloading(RepositoryEvent event)
{    println("artifactDownloading", event.getArtifact() + " from " + event.getRepository());}
7dac4b5513fcf9f6c452e181588bdd50e054967f94d1068e78e293d0a3b68408
artifactDownloaded
public void artifactDownloaded(RepositoryEvent event)
{    println("artifactDownloaded", event.getArtifact() + " from " + event.getRepository());}
078ae8163bc558e4cd07798d09f2be2113d04dc0ca12254f8980f6fd0ad45162
artifactResolving
public void artifactResolving(RepositoryEvent event)
{    println("artifactResolving", event.getArtifact().toString());}
f648c8d5b18eccf82f72313817b3d08af194f0e181b076f9d38520abeaf633c0
metadataDeployed
public void metadataDeployed(RepositoryEvent event)
{    println("metadataDeployed", event.getMetadata() + " to " + event.getRepository());}
d5dfa50396ffc19e7af9fa14bd9a5c3212d4d12dc9d6987f4a0014a1a11037a4
metadataDeploying
public void metadataDeploying(RepositoryEvent event)
{    println("metadataDeploying", event.getMetadata() + " to " + event.getRepository());}
1cb30e055e371de3ffb136f5b2f3afb29bf18a223794ee93a76150a2aece8dd7
metadataInstalled
public void metadataInstalled(RepositoryEvent event)
{    println("metadataInstalled", event.getMetadata() + " to " + event.getFile());}
eb974cf8314cc951656e512e4f6617994786037e4c0ca6b1733127dfb0e47f73
metadataInstalling
public void metadataInstalling(RepositoryEvent event)
{    println("metadataInstalling", event.getMetadata() + " to " + event.getFile());}
11feda80caf4c182286f3c22a0012ae9dd09a08ef64509a1b58e7dd663e483ce
metadataInvalid
public void metadataInvalid(RepositoryEvent event)
{    println("metadataInvalid", event.getMetadata().toString());}
87a28c3260b10bd2d310415ff0e99f76ce1ee09fbbb12d062e70b8149e201f44
metadataResolved
public void metadataResolved(RepositoryEvent event)
{    println("metadataResolved", event.getMetadata() + " from " + event.getRepository());}
ca0a77257b3764653f5f520784024dc0a5877c1cd1fe6cc06bd45ee1c3980d0b
metadataResolving
public void metadataResolving(RepositoryEvent event)
{    println("metadataResolving", event.getMetadata() + " from " + event.getRepository());}
0727770a7239e14417de051576485c38ec8a3ab503a966072a55334142bc3f75
println
private void println(String event, String message)
{    out.println("Aether Repository - " + event + ": " + message);}
0c181f0e24dfb04df8d45e00c8f7ffd61164151738ffba693969dcd2e38ca8b4
transferInitiated
public void transferInitiated(TransferEvent event)
{    String message = event.getRequestType() == TransferEvent.RequestType.PUT ? "Uploading" : "Downloading";    println("transferInitiated", message + ": " + event.getResource().getRepositoryUrl() + event.getResource().getResourceName());}
7cd422dac01732468e457b7de3820b2f24eb0161fdab7bf0d579d7ee5c2038c3
transferProgressed
public void transferProgressed(TransferEvent event)
{    TransferResource resource = event.getResource();    downloads.put(resource, event.getTransferredBytes());    StringBuilder buffer = new StringBuilder(64);    for (Map.Entry<TransferResource, Long> entry : downloads.entrySet()) {        long total = entry.getKey().getContentLength();        long complete = entry.getValue();        buffer.append(getStatus(complete, total)).append("  ");    }    int pad = lastLength - buffer.length();    lastLength = buffer.length();    pad(buffer, pad);    buffer.append('\r');    print("transferProgressed", buffer.toString());}
f2c24b4cff181259cd549876d2cc051cb789455e624827b0a14a4e0597aaaa3b
getStatus
private String getStatus(long complete, long total)
{    if (total >= 1024) {        return toKB(complete) + "/" + toKB(total) + " KB ";    } else if (total >= 0) {        return complete + "/" + total + " B ";    } else if (complete >= 1024) {        return toKB(complete) + " KB ";    } else {        return complete + " B ";    }}
df0177f0ce041406772304cf51561e8c3c10ae84ed943481d3fa3e6343e39dd3
pad
private void pad(StringBuilder buffer, int spaces)
{    String block = "                                        ";    while (spaces > 0) {        int n = Math.min(spaces, block.length());        buffer.append(block, 0, n);        spaces -= n;    }}
3aface5249cde915569e4ba3538363b21012cd5266e5b84f94d68d07aa3e3c99
transferSucceeded
public void transferSucceeded(TransferEvent event)
{    transferCompleted(event);    TransferResource resource = event.getResource();    long contentLength = event.getTransferredBytes();    if (contentLength >= 0) {        String type = (event.getRequestType() == TransferEvent.RequestType.PUT ? "Uploaded" : "Downloaded");        String len = contentLength >= 1024 ? toKB(contentLength) + " KB" : contentLength + " B";        String throughput = "";        long duration = System.currentTimeMillis() - resource.getTransferStartTime();        if (duration > 0) {            DecimalFormat format = new DecimalFormat("0.0", new DecimalFormatSymbols(Locale.ENGLISH));            double kbPerSec = (contentLength / 1024.0) / (duration / 1000.0);            throughput = " at " + format.format(kbPerSec) + " KB/sec";        }        println("transferSucceeded", type + ": " + resource.getRepositoryUrl() + resource.getResourceName() + " (" + len + throughput + ")");    }}
a58cf7110b9bd87cf42f42c37a83577429cbb42183cfc451b24499305d95f867
transferFailed
public void transferFailed(TransferEvent event)
{    transferCompleted(event);    println("transferFailed", event.getException().getClass() + ": " + event.getException().getMessage());}
7f2564dd087f776a0b12997ea73a4b75e66cdf8c8c32a5cf7f6048408403606d
transferCompleted
private void transferCompleted(TransferEvent event)
{    downloads.remove(event.getResource());    StringBuilder buffer = new StringBuilder(64);    pad(buffer, lastLength);    buffer.append('\r');    out.println(buffer);}
c3be5a665ea68139e2c5ce9e0b9a69c2edc7bc0dc2191649dc73c03fbe7f9f34
transferCorrupted
public void transferCorrupted(TransferEvent event)
{    println("transferCorrupted", event.getException().getClass() + ": " + event.getException().getMessage());}
4ab9a9180607711510f3c61720bd44d6522b94421f805caf1b44feaeb8b35090
toKB
protected long toKB(long bytes)
{    return (bytes + 1023) / 1024;}
0727770a7239e14417de051576485c38ec8a3ab503a966072a55334142bc3f75
println
private void println(String event, String message)
{    print(event, message);    out.println();}
e073c6cb14558db030502f8f6190668d0cfd08941fca87cbfba0393e8fab2a51
print
private void print(String event, String message)
{    out.print("Aether Transfer - " + event);    if (message != null) {        out.print(": ");        out.print(message);    }}
ce0460f83bd172eacce98e8169f6d9b1d4ec316943fcf77ee2d8f12bbe7327a0
getFile
public File getFile()
{    return settings;}
ccd71d64a667c3383121909dc9dc30493ddf1211f954623c881d1b79b74c41e0
setSettingsReader
public DefaultSettingsBuilder setSettingsReader(SettingsReader settingsReader)
{    this.settingsReader = settingsReader;    return this;}
bc1c6e583ffbeb27e997a77c420cc099e777848e121a820df5b63f870dd10e64
setSettingsWriter
public DefaultSettingsBuilder setSettingsWriter(SettingsWriter settingsWriter)
{    this.settingsWriter = settingsWriter;    return this;}
0574d74fb1f7cb002790fda54f89b094e966dd1441fbc9ce60abf97e7cca8344
setSettingsValidator
public DefaultSettingsBuilder setSettingsValidator(SettingsValidator settingsValidator)
{    this.settingsValidator = settingsValidator;    return this;}
d9cb01bcbf2587090a94473d2858cf2eb1003e6113d57d7d48e18beb7688a71d
build
public SettingsBuildingResult build(SettingsBuildingRequest request) throws SettingsBuildingException
{    DefaultSettingsProblemCollector problems = new DefaultSettingsProblemCollector(null);    Source globalSettingsSource = getSettingsSource(request.getGlobalSettingsFile(), request.getGlobalSettingsSource());    Settings globalSettings = readSettings(globalSettingsSource, request, problems);    Source userSettingsSource = getSettingsSource(request.getUserSettingsFile(), request.getUserSettingsSource());    Settings userSettings = readSettings(userSettingsSource, request, problems);    settingsMerger.merge(userSettings, globalSettings, TrackableBase.GLOBAL_LEVEL);    problems.setSource("");    userSettings = interpolate(userSettings, request, problems);        String localRepository = userSettings.getLocalRepository();    if (localRepository != null && localRepository.length() > 0) {        File file = new File(localRepository);        if (!file.isAbsolute() && file.getPath().startsWith(File.separator)) {            userSettings.setLocalRepository(file.getAbsolutePath());        }    }    if (hasErrors(problems.getProblems())) {        throw new SettingsBuildingException(problems.getProblems());    }    return new DefaultSettingsBuildingResult(userSettings, problems.getProblems());}
b77b542f388adf0e0bf193f2f2c8d001c03e6d8332ecae93796ba4e4a7d54d18
hasErrors
private boolean hasErrors(List<SettingsProblem> problems)
{    if (problems != null) {        for (SettingsProblem problem : problems) {            if (SettingsProblem.Severity.ERROR.compareTo(problem.getSeverity()) >= 0) {                return true;            }        }    }    return false;}
e7640df27c9a8c91bec361ed3cabe49c61555fe6736addb49f486d436971608f
getSettingsSource
private Source getSettingsSource(File settingsFile, Source settingsSource)
{    if (settingsSource != null) {        return settingsSource;    } else if (settingsFile != null && settingsFile.exists()) {        return new FileSource(settingsFile);    }    return null;}
c3998b2c918a26c362820ea1e6529ad1149c64bd62f284a051e3ff2d277a001e
readSettings
private Settings readSettings(Source settingsSource, SettingsBuildingRequest request, DefaultSettingsProblemCollector problems)
{    if (settingsSource == null) {        return new Settings();    }    problems.setSource(settingsSource.getLocation());    Settings settings;    try {        Map<String, ?> options = Collections.singletonMap(SettingsReader.IS_STRICT, Boolean.TRUE);        try {            settings = settingsReader.read(settingsSource.getInputStream(), options);        } catch (SettingsParseException e) {            options = Collections.singletonMap(SettingsReader.IS_STRICT, Boolean.FALSE);            settings = settingsReader.read(settingsSource.getInputStream(), options);            problems.add(SettingsProblem.Severity.WARNING, e.getMessage(), e.getLineNumber(), e.getColumnNumber(), e);        }    } catch (SettingsParseException e) {        problems.add(SettingsProblem.Severity.FATAL, "Non-parseable settings " + settingsSource.getLocation() + ": " + e.getMessage(), e.getLineNumber(), e.getColumnNumber(), e);        return new Settings();    } catch (IOException e) {        problems.add(SettingsProblem.Severity.FATAL, "Non-readable settings " + settingsSource.getLocation() + ": " + e.getMessage(), -1, -1, e);        return new Settings();    }    settingsValidator.validate(settings, problems);    return settings;}
9395326f82ebd2ac812e522a03e1c10b3c1a04731dadd56b02d477677ede484b
interpolate
private Settings interpolate(Settings settings, SettingsBuildingRequest request, SettingsProblemCollector problems)
{    StringWriter writer = new StringWriter(1024 * 4);    try {        settingsWriter.write(writer, null, settings);    } catch (IOException e) {        throw new IllegalStateException("Failed to serialize settings to memory", e);    }    String serializedSettings = writer.toString();    RegexBasedInterpolator interpolator = new RegexBasedInterpolator();    interpolator.addValueSource(new PropertiesBasedValueSource(request.getUserProperties()));    interpolator.addValueSource(new PropertiesBasedValueSource(request.getSystemProperties()));    try {        interpolator.addValueSource(new EnvarBasedValueSource());    } catch (IOException e) {        problems.add(SettingsProblem.Severity.WARNING, "Failed to use environment variables for interpolation: " + e.getMessage(), -1, -1, e);    }    interpolator.addPostProcessor(new InterpolationPostProcessor() {        @Override        public Object execute(String expression, Object value) {            if (value != null) {                                value = value.toString().replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;");                return value;            }            return null;        }    });    try {        serializedSettings = interpolator.interpolate(serializedSettings, "settings");    } catch (InterpolationException e) {        problems.add(SettingsProblem.Severity.ERROR, "Failed to interpolate settings: " + e.getMessage(), -1, -1, e);        return settings;    }    Settings result;    try {        Map<String, ?> options = Collections.singletonMap(SettingsReader.IS_STRICT, Boolean.FALSE);        result = settingsReader.read(new StringReader(serializedSettings), options);    } catch (IOException e) {        problems.add(SettingsProblem.Severity.ERROR, "Failed to interpolate settings: " + e.getMessage(), -1, -1, e);        return settings;    }    return result;}
fe2a911fe55b44d52d299fcb381b34c61df4b2095337c2d78f2fb1f1e77a3bb5
execute
public Object execute(String expression, Object value)
{    if (value != null) {                value = value.toString().replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;");        return value;    }    return null;}
30bc112ca2a153f901d65bc100fae41dbff3de4ad1ac670df0a7d204b854bab5
newSettingsReader
protected SettingsReader newSettingsReader()
{    return new DefaultSettingsReader();}
c00de5047889e1157ead39a986774fa8f99ffba7587b7f6ae945e5879cac7e92
newSettingsWriter
protected SettingsWriter newSettingsWriter()
{    return new DefaultSettingsWriter();}
ca586bc925dcaf28842ccd2ebf94df74f343ec3d4bffd44e2ea721ecd37f8b3e
newSettingsValidator
protected SettingsValidator newSettingsValidator()
{    return new DefaultSettingsValidator();}
d0317757165c12603a6b4ba2770a37e390a78e4d3147e912e50bda1b3c313b35
newInstance
public DefaultSettingsBuilder newInstance()
{    return new DefaultSettingsBuilder(newSettingsReader(), newSettingsWriter(), newSettingsValidator());}
49e600078846f3f0fb7229d6bb535723c45d55deaf4b4cc47629c8f97872b45c
getGlobalSettingsFile
public File getGlobalSettingsFile()
{    return globalSettingsFile;}
8509302c7db162f19a2ac6204e168b9855b240093da93191953c50934c8f09f0
setGlobalSettingsFile
public DefaultSettingsBuildingRequest setGlobalSettingsFile(File globalSettingsFile)
{    this.globalSettingsFile = globalSettingsFile;    return this;}
4e2c282887a766ed6f54883b11319cda01268049fc9a5eae00faa3151095fe0e
getGlobalSettingsSource
public SettingsSource getGlobalSettingsSource()
{    return globalSettingsSource;}
47f1c916f79144bf7faae9375e1084c37e64744f54365907d4976c6b6e16812d
setGlobalSettingsSource
public DefaultSettingsBuildingRequest setGlobalSettingsSource(SettingsSource globalSettingsSource)
{    this.globalSettingsSource = globalSettingsSource;    return this;}
5815121cfc1ce6f319c1a893f64a30d2608dd239a4b592c68334cbb6fa7fa818
getUserSettingsFile
public File getUserSettingsFile()
{    return userSettingsFile;}
f8a9138b1d7af311c5623378a5e9ad2e55b76303661910f38637ea5a20da5a75
setUserSettingsFile
public DefaultSettingsBuildingRequest setUserSettingsFile(File userSettingsFile)
{    this.userSettingsFile = userSettingsFile;    return this;}
edb0b6b88ad32dd1d7ea65ea16b3e2acd904f01c4fca76a8a606bd3e78401a11
getUserSettingsSource
public SettingsSource getUserSettingsSource()
{    return userSettingsSource;}
1beeff2e1207f2a31b0842c19d1ba04f92df57eedbbd9864f5aaa120b7601272
setUserSettingsSource
public DefaultSettingsBuildingRequest setUserSettingsSource(SettingsSource userSettingsSource)
{    this.userSettingsSource = userSettingsSource;    return this;}
8b369022cea09c7bb7272e8cc545450dc294bedf652bae5b2ea9f14fffe1fc46
getSystemProperties
public Properties getSystemProperties()
{    if (systemProperties == null) {        systemProperties = new Properties();    }    return systemProperties;}
6a2692ca86b3f99e49098ec11a53c2313f417db67a0b26354b93b080115ae2d8
setSystemProperties
public DefaultSettingsBuildingRequest setSystemProperties(Properties systemProperties)
{    if (systemProperties != null) {        this.systemProperties = new Properties();        synchronized (systemProperties) {                        this.systemProperties.putAll(systemProperties);        }    } else {        this.systemProperties = null;    }    return this;}
378f8d6e21d4ae0bd6aa85de0988ab8d214704648e0ad1a17b8ce9c7e3a14225
getUserProperties
public Properties getUserProperties()
{    if (userProperties == null) {        userProperties = new Properties();    }    return userProperties;}
38b8816f83bdbcf177c8edcc6ceb5903aac1cc1c698d3c3b5359ba594d62dcaf
setUserProperties
public DefaultSettingsBuildingRequest setUserProperties(Properties userProperties)
{    if (userProperties != null) {        this.userProperties = new Properties();        this.userProperties.putAll(userProperties);    } else {        this.userProperties = null;    }    return this;}
e40fca3b124eeb8c6de2b7dad7e939d335c2e755c47fc62034a17471e2f3bbea
getEffectiveSettings
public Settings getEffectiveSettings()
{    return effectiveSettings;}
11a82ea958b610fa4d032146ce5a29008e48a4b33c614afbb5e6e0651963a1d4
getProblems
public List<SettingsProblem> getProblems()
{    return problems;}
c544784f026afebea24caaff889181a15292a98786506cbfc66814257976c7b9
getSource
public String getSource()
{    return source;}
d0206afdd4bbfbca49378097e83c12789d7836ac6e56572eee8d2abd20c4c84d
getLineNumber
public int getLineNumber()
{    return lineNumber;}
de418c2b40b113f31f0e80a27291a5fc9f70e24067ed5b3ab5871ddcb04ceb6e
getColumnNumber
public int getColumnNumber()
{    return columnNumber;}
a50882ead68e94dcbbdf96fb8dae09b529366434d16e69e44544e30f2176d810
getLocation
public String getLocation()
{    StringBuilder buffer = new StringBuilder(256);    if (getSource().length() > 0) {        if (buffer.length() > 0) {            buffer.append(", ");        }        buffer.append(getSource());    }    if (getLineNumber() > 0) {        if (buffer.length() > 0) {            buffer.append(", ");        }        buffer.append("line ").append(getLineNumber());    }    if (getColumnNumber() > 0) {        if (buffer.length() > 0) {            buffer.append(", ");        }        buffer.append("column ").append(getColumnNumber());    }    return buffer.toString();}
854d9d54d3315f04df8394cf9b7e23acfa1148329c6dabcb18e9f24a7ab80028
getException
public Exception getException()
{    return exception;}
b46153cc21231cb60e014b6b3c49b437699575e4012681cb08026e5238c66751
getMessage
public String getMessage()
{    String msg;    if (message != null && message.length() > 0) {        msg = message;    } else {        msg = exception.getMessage();        if (msg == null) {            msg = "";        }    }    return msg;}
60ad86dc590f7242c4533d9ac40bba78bbbb39054da6560754306741e80942d2
getSeverity
public Severity getSeverity()
{    return severity;}
210eee3d731623cb7c6189497cc462f9c459d9c81b6e0fe12b4b36ce53a197b7
toString
public String toString()
{    StringBuilder buffer = new StringBuilder(128);    buffer.append('[').append(getSeverity()).append("] ");    buffer.append(getMessage());    buffer.append(" @ ").append(getLocation());    return buffer.toString();}
11a82ea958b610fa4d032146ce5a29008e48a4b33c614afbb5e6e0651963a1d4
getProblems
public List<SettingsProblem> getProblems()
{    return problems;}
d57b630a432828ab4cae20dd742ae31b73be5d282f67404d4a4b739bf68622a9
setSource
public void setSource(String source)
{    this.source = source;}
d0c98f862bf287723eecd90ae6ef782e797d3cc5e668e1ded14711222de1471d
add
public void add(SettingsProblem.Severity severity, String message, int line, int column, Exception cause)
{    if (line <= 0 && column <= 0 && (cause instanceof SettingsParseException)) {        SettingsParseException e = (SettingsParseException) cause;        line = e.getLineNumber();        column = e.getColumnNumber();    }    SettingsProblem problem = new DefaultSettingsProblem(message, severity, source, line, column, cause);    problems.add(problem);}
cf77efafb29909f7e70ed3c86cac1b608f73994bfa3c188e8f2b0f696be60591
getSettingsFile
public File getSettingsFile()
{    return getFile();}
11a82ea958b610fa4d032146ce5a29008e48a4b33c614afbb5e6e0651963a1d4
getProblems
public List<SettingsProblem> getProblems()
{    return problems;}
bbafe42564c80dd20502be9811fbf4679ad6fb91e1cec27257039d36d48f153e
toMessage
private static String toMessage(List<SettingsProblem> problems)
{    StringWriter buffer = new StringWriter(1024);    PrintWriter writer = new PrintWriter(buffer);    writer.print(problems.size());    writer.print((problems.size() == 1) ? " problem was " : " problems were ");    writer.print("encountered while building the effective settings");    writer.println();    for (SettingsProblem problem : problems) {        writer.print("[");        writer.print(problem.getSeverity());        writer.print("] ");        writer.print(problem.getMessage());        writer.print(" @ ");        writer.println(problem.getLocation());    }    return buffer.toString();}
420aa7bbafd2f7770806fd29ecb5cb5cc507859e94aa1224644c19c4603a9494
getSettings
public String getSettings()
{    return getContent();}
ec85584f85a7f49ec7cd71f1b33eabd66626b76745ff835f5489684b9a957cf5
getSettingsUrl
public URL getSettingsUrl()
{    return getUrl();}
b74e47f8cb982607f6cc24d9c2df8d4157c4e5a1017988d3d0d32cc942afb6ad
decrypt
public SettingsDecryptionResult decrypt(SettingsDecryptionRequest request)
{    List<SettingsProblem> problems = new ArrayList<>();    List<Server> servers = new ArrayList<>();    for (Server server : request.getServers()) {        server = server.clone();        servers.add(server);        try {            server.setPassword(decrypt(server.getPassword()));        } catch (SecDispatcherException e) {            problems.add(new DefaultSettingsProblem("Failed to decrypt password for server " + server.getId() + ": " + e.getMessage(), Severity.ERROR, "server: " + server.getId(), -1, -1, e));        }        try {            server.setPassphrase(decrypt(server.getPassphrase()));        } catch (SecDispatcherException e) {            problems.add(new DefaultSettingsProblem("Failed to decrypt passphrase for server " + server.getId() + ": " + e.getMessage(), Severity.ERROR, "server: " + server.getId(), -1, -1, e));        }    }    List<Proxy> proxies = new ArrayList<>();    for (Proxy proxy : request.getProxies()) {        proxy = proxy.clone();        proxies.add(proxy);        try {            proxy.setPassword(decrypt(proxy.getPassword()));        } catch (SecDispatcherException e) {            problems.add(new DefaultSettingsProblem("Failed to decrypt password for proxy " + proxy.getId() + ": " + e.getMessage(), Severity.ERROR, "proxy: " + proxy.getId(), -1, -1, e));        }    }    return new DefaultSettingsDecryptionResult(servers, proxies, problems);}
d79dfdecaeb305df2a4bc840c8618e32a00805cec8fcc7e5326893673454b270
decrypt
private String decrypt(String str) throws SecDispatcherException
{    return (str == null) ? null : securityDispatcher.decrypt(str);}
a50ce03fbdd41821e15d3724fddb0b75023a1201ba0f6a90b301b8541e5eec6c
getServers
public List<Server> getServers()
{    if (servers == null) {        servers = new ArrayList<>();    }    return servers;}
70cbd669f80deef2d7f9741d9081a216514ac78c8523178d91dea3c9de6283ac
setServers
public DefaultSettingsDecryptionRequest setServers(List<Server> servers)
{    this.servers = servers;    return this;}
1dddedf2228f7f14ce20545b861fc996084e9df55600dfe14616dd12019e32fc
getProxies
public List<Proxy> getProxies()
{    if (proxies == null) {        proxies = new ArrayList<>();    }    return proxies;}
d761e13e38367af77dacc9551cd35b6d96430dbc3f1816cf88216ad3f63de9db
setProxies
public DefaultSettingsDecryptionRequest setProxies(List<Proxy> proxies)
{    this.proxies = proxies;    return this;}
175048be41750f7d39c6c3ec5f6ca6a233f0b101b914e6a789b3a851248ae822
getServer
public Server getServer()
{    return servers.isEmpty() ? null : servers.get(0);}
a50ce03fbdd41821e15d3724fddb0b75023a1201ba0f6a90b301b8541e5eec6c
getServers
public List<Server> getServers()
{    return servers;}
c70b87b7ec5d89054605722508abc6cf4c33d7e80c898c44a9112dbd3f52c7be
getProxy
public Proxy getProxy()
{    return proxies.isEmpty() ? null : proxies.get(0);}
1dddedf2228f7f14ce20545b861fc996084e9df55600dfe14616dd12019e32fc
getProxies
public List<Proxy> getProxies()
{    return proxies;}
11a82ea958b610fa4d032146ce5a29008e48a4b33c614afbb5e6e0651963a1d4
getProblems
public List<SettingsProblem> getProblems()
{    return problems;}
c68173b20a1f163b690d2ebdf614ab9b0d5bb30c60d3121a0919f7a513e08f21
read
public Settings read(File input, Map<String, ?> options) throws IOException
{    Objects.requireNonNull(input, "input cannot be null");    Settings settings = read(ReaderFactory.newXmlReader(input), options);    return settings;}
aaa985939815ef2dfc16e49c41a1bc96378b3d7fa67ba2d6d281bb43a2690c25
read
public Settings read(Reader input, Map<String, ?> options) throws IOException
{    Objects.requireNonNull(input, "input cannot be null");    try (final Reader in = input) {        return new SettingsXpp3Reader().read(in, isStrict(options));    } catch (XmlPullParserException e) {        throw new SettingsParseException(e.getMessage(), e.getLineNumber(), e.getColumnNumber(), e);    }}
08bb2491a3c726d454ed66794211a829e685ebc3ce4404fc9cecbb1d4117d7eb
read
public Settings read(InputStream input, Map<String, ?> options) throws IOException
{    Objects.requireNonNull(input, "input cannot be null");    try (final InputStream in = input) {        return new SettingsXpp3Reader().read(in, isStrict(options));    } catch (XmlPullParserException e) {        throw new SettingsParseException(e.getMessage(), e.getLineNumber(), e.getColumnNumber(), e);    }}
6c7fea5c07553d4dd29f26b80b3a43d5b3576e5ae38d612c87b5e80f010983ed
isStrict
private boolean isStrict(Map<String, ?> options)
{    Object value = (options != null) ? options.get(IS_STRICT) : null;    return value == null || Boolean.parseBoolean(value.toString());}
a3424d972312877a6bf3476191f3503b484cd1f281c069253721c7ce4278e986
write
public void write(File output, Map<String, Object> options, Settings settings) throws IOException
{    Objects.requireNonNull(output, "output cannot be null");    Objects.requireNonNull(settings, "settings cannot be null");    output.getParentFile().mkdirs();    write(WriterFactory.newXmlWriter(output), options, settings);}
99dd7aefb050e9228241987ed9ab3784e63e73d6bceeefc28764e2ce08a6df40
write
public void write(Writer output, Map<String, Object> options, Settings settings) throws IOException
{    Objects.requireNonNull(output, "output cannot be null");    Objects.requireNonNull(settings, "settings cannot be null");    try (final Writer out = output) {        new SettingsXpp3Writer().write(out, settings);    }}
d523c4c9124f43d215d473533f83e5e03aa63a408eb7c5b4940f66075bf396c8
write
public void write(OutputStream output, Map<String, Object> options, Settings settings) throws IOException
{    Objects.requireNonNull(output, "output cannot be null");    Objects.requireNonNull(settings, "settings cannot be null");    String encoding = settings.getModelEncoding();        if (encoding == null || encoding.length() <= 0) {        encoding = "UTF-8";    }    try (final Writer out = new OutputStreamWriter(output, encoding)) {        write(out, options, settings);    }}
d0206afdd4bbfbca49378097e83c12789d7836ac6e56572eee8d2abd20c4c84d
getLineNumber
public int getLineNumber()
{    return lineNumber;}
de418c2b40b113f31f0e80a27291a5fc9f70e24067ed5b3ab5871ddcb04ceb6e
getColumnNumber
public int getColumnNumber()
{    return columnNumber;}
d9513c36ce43fef9f13576d78a9121bc861d88eb8c0f0f3e4af96462e1e4ce39
merge
public void merge(Settings dominant, Settings recessive, String recessiveSourceLevel)
{    if (dominant == null || recessive == null) {        return;    }    recessive.setSourceLevel(recessiveSourceLevel);    List<String> dominantActiveProfiles = dominant.getActiveProfiles();    List<String> recessiveActiveProfiles = recessive.getActiveProfiles();    if (recessiveActiveProfiles != null) {        if (dominantActiveProfiles == null) {            dominantActiveProfiles = new ArrayList<>();            dominant.setActiveProfiles(dominantActiveProfiles);        }        for (String profileId : recessiveActiveProfiles) {            if (!dominantActiveProfiles.contains(profileId)) {                dominantActiveProfiles.add(profileId);            }        }    }    List<String> dominantPluginGroupIds = dominant.getPluginGroups();    List<String> recessivePluginGroupIds = recessive.getPluginGroups();    if (recessivePluginGroupIds != null) {        if (dominantPluginGroupIds == null) {            dominantPluginGroupIds = new ArrayList<>();            dominant.setPluginGroups(dominantPluginGroupIds);        }        for (String pluginGroupId : recessivePluginGroupIds) {            if (!dominantPluginGroupIds.contains(pluginGroupId)) {                dominantPluginGroupIds.add(pluginGroupId);            }        }    }    if (StringUtils.isEmpty(dominant.getLocalRepository())) {        dominant.setLocalRepository(recessive.getLocalRepository());    }    shallowMergeById(dominant.getMirrors(), recessive.getMirrors(), recessiveSourceLevel);    shallowMergeById(dominant.getServers(), recessive.getServers(), recessiveSourceLevel);    shallowMergeById(dominant.getProxies(), recessive.getProxies(), recessiveSourceLevel);    shallowMergeById(dominant.getProfiles(), recessive.getProfiles(), recessiveSourceLevel);}
a644eddeb86462235068b3e3e942dc89342f62917d9423c123671fe4450f7c31
shallowMergeById
private static void shallowMergeById(List<T> dominant, List<T> recessive, String recessiveSourceLevel)
{    Map<String, T> dominantById = mapById(dominant);    for (T identifiable : recessive) {        if (!dominantById.containsKey(identifiable.getId())) {            identifiable.setSourceLevel(recessiveSourceLevel);            dominant.add(identifiable);        }    }}
0a2f730fed44620b51579346f29c1e5d5b071a88a34cf3ec6ddd757370a3adb5
mapById
private static Map<String, T> mapById(List<T> identifiables)
{    Map<String, T> byId = new HashMap<>();    for (T identifiable : identifiables) {        byId.put(identifiable.getId(), identifiable);    }    return byId;}
fea512f69496395a4d6e668834fb35b9fafa17ae8d68afbbfb21a0dfa421653f
validate
public void validate(Settings settings, SettingsProblemCollector problems)
{    if (settings.isUsePluginRegistry()) {        addViolation(problems, Severity.WARNING, "usePluginRegistry", null, "is deprecated and has no effect.");    }    List<String> pluginGroups = settings.getPluginGroups();    if (pluginGroups != null) {        for (int i = 0; i < pluginGroups.size(); i++) {            String pluginGroup = pluginGroups.get(i).trim();            if (StringUtils.isBlank(pluginGroup)) {                addViolation(problems, Severity.ERROR, "pluginGroups.pluginGroup[" + i + "]", null, "must not be empty");            } else if (!pluginGroup.matches(ID_REGEX)) {                addViolation(problems, Severity.ERROR, "pluginGroups.pluginGroup[" + i + "]", null, "must denote a valid group id and match the pattern " + ID_REGEX);            }        }    }    List<Server> servers = settings.getServers();    if (servers != null) {        Set<String> serverIds = new HashSet<>();        for (int i = 0; i < servers.size(); i++) {            Server server = servers.get(i);            validateStringNotEmpty(problems, "servers.server[" + i + "].id", server.getId(), null);            if (!serverIds.add(server.getId())) {                addViolation(problems, Severity.WARNING, "servers.server.id", null, "must be unique but found duplicate server with id " + server.getId());            }        }    }    List<Mirror> mirrors = settings.getMirrors();    if (mirrors != null) {        for (Mirror mirror : mirrors) {            validateStringNotEmpty(problems, "mirrors.mirror.id", mirror.getId(), mirror.getUrl());            validateBannedCharacters(problems, "mirrors.mirror.id", Severity.WARNING, mirror.getId(), null, ILLEGAL_REPO_ID_CHARS);            if ("local".equals(mirror.getId())) {                addViolation(problems, Severity.WARNING, "mirrors.mirror.id", null, "must not be 'local'" + ", this identifier is reserved for the local repository" + ", using it for other repositories will corrupt your repository metadata.");            }            validateStringNotEmpty(problems, "mirrors.mirror.url", mirror.getUrl(), mirror.getId());            validateStringNotEmpty(problems, "mirrors.mirror.mirrorOf", mirror.getMirrorOf(), mirror.getId());        }    }    List<Profile> profiles = settings.getProfiles();    if (profiles != null) {        Set<String> profileIds = new HashSet<>();        for (Profile profile : profiles) {            if (!profileIds.add(profile.getId())) {                addViolation(problems, Severity.WARNING, "profiles.profile.id", null, "must be unique but found duplicate profile with id " + profile.getId());            }            String prefix = "profiles.profile[" + profile.getId() + "].";            validateRepositories(problems, profile.getRepositories(), prefix + "repositories.repository");            validateRepositories(problems, profile.getPluginRepositories(), prefix + "pluginRepositories.pluginRepository");        }    }    List<Proxy> proxies = settings.getProxies();    if (proxies != null) {        Set<String> proxyIds = new HashSet<>();        for (Proxy proxy : proxies) {            if (!proxyIds.add(proxy.getId())) {                addViolation(problems, Severity.WARNING, "proxies.proxy.id", null, "must be unique but found duplicate proxy with id " + proxy.getId());            }            validateStringNotEmpty(problems, "proxies.proxy.host", proxy.getHost(), proxy.getId());        }    }}
9b45347d36aa318727616ce2273985ef01c1daf92b84065cb6497be2323fc722
validateRepositories
private void validateRepositories(SettingsProblemCollector problems, List<Repository> repositories, String prefix)
{    Set<String> repoIds = new HashSet<>();    for (Repository repository : repositories) {        validateStringNotEmpty(problems, prefix + ".id", repository.getId(), repository.getUrl());        validateBannedCharacters(problems, prefix + ".id", Severity.WARNING, repository.getId(), null, ILLEGAL_REPO_ID_CHARS);        if ("local".equals(repository.getId())) {            addViolation(problems, Severity.WARNING, prefix + ".id", null, "must not be 'local'" + ", this identifier is reserved for the local repository" + ", using it for other repositories will corrupt your repository metadata.");        }        if (!repoIds.add(repository.getId())) {            addViolation(problems, Severity.WARNING, prefix + ".id", null, "must be unique but found duplicate repository with id " + repository.getId());        }        validateStringNotEmpty(problems, prefix + ".url", repository.getUrl(), repository.getId());        if ("legacy".equals(repository.getLayout())) {            addViolation(problems, Severity.WARNING, prefix + ".layout", repository.getId(), "uses the unsupported value 'legacy', artifact resolution might fail.");        }    }}
06705dbc6d465e54acd2fbaa3bc3b9d717152ab6314fdcb516d7d04bf8d7cf3d
validateStringNotEmpty
private static boolean validateStringNotEmpty(SettingsProblemCollector problems, String fieldName, String string, String sourceHint)
{    if (!validateNotNull(problems, fieldName, string, sourceHint)) {        return false;    }    if (string.length() > 0) {        return true;    }    addViolation(problems, Severity.ERROR, fieldName, sourceHint, "is missing");    return false;}
2208fab4d1a5c1501b50eafa7cc57f98f83493afab9ad609f7fa0f8d9026143e
validateNotNull
private static boolean validateNotNull(SettingsProblemCollector problems, String fieldName, Object object, String sourceHint)
{    if (object != null) {        return true;    }    addViolation(problems, Severity.ERROR, fieldName, sourceHint, "is missing");    return false;}
268d40d2c5042ec2cb4f902302906cc341845e71e35a72ea2187826148f5ac40
validateBannedCharacters
private static boolean validateBannedCharacters(SettingsProblemCollector problems, String fieldName, Severity severity, String string, String sourceHint, String banned)
{    if (string != null) {        for (int i = string.length() - 1; i >= 0; i--) {            if (banned.indexOf(string.charAt(i)) >= 0) {                addViolation(problems, severity, fieldName, sourceHint, "must not contain any of these characters " + banned + " but found " + string.charAt(i));                return false;            }        }    }    return true;}
7833a9d3565a02e797c73517be614713d7d9016ef604ec58daf710ec8845da75
addViolation
private static void addViolation(SettingsProblemCollector problems, Severity severity, String fieldName, String sourceHint, String message)
{    StringBuilder buffer = new StringBuilder(256);    buffer.append('\'').append(fieldName).append('\'');    if (sourceHint != null) {        buffer.append(" for ").append(sourceHint);    }    buffer.append(' ').append(message);    problems.add(severity, buffer.toString(), -1, -1, null);}
be1094d282bfbe737d352eb9c7266a59c3d7a3c64a6426d7ba955d28fea514af
getSettings
private File getSettings(String name)
{    return new File("src/test/resources/settings/factory/" + name + ".xml").getAbsoluteFile();}
90b1d307123f816943e9e678ffebb3aca3e0152557eb2d13133f6d27a91ba538
testCompleteWiring
public void testCompleteWiring() throws Exception
{    SettingsBuilder builder = new DefaultSettingsBuilderFactory().newInstance();    assertNotNull(builder);    DefaultSettingsBuildingRequest request = new DefaultSettingsBuildingRequest();    request.setSystemProperties(System.getProperties());    request.setUserSettingsFile(getSettings("simple"));    SettingsBuildingResult result = builder.build(request);    assertNotNull(result);    assertNotNull(result.getEffectiveSettings());}
26a0331a24c03c828018e317812b10eb3777313f83cb980b39b64dc28c386bff
setUp
protected void setUp() throws Exception
{    super.setUp();    validator = new DefaultSettingsValidator();}
68bbf6c94fbad4862990669ea582b65c28678087c2377b2c3fb0948d54293af4
tearDown
protected void tearDown() throws Exception
{    validator = null;    super.tearDown();}
9a99bfda708be1eb3e9744815f59a9f75d485dab2cc09a40ce6a9c6a041988fb
assertContains
private void assertContains(String msg, String substring)
{    assertTrue("\"" + substring + "\" was not found in: " + msg, msg.contains(substring));}
e4f16bbe874b80000bd8eb6173fe73448cddae485dbdba41c5964acbf8f61da9
testValidate
public void testValidate()
{    Settings model = new Settings();    Profile prof = new Profile();    prof.setId("xxx");    model.addProfile(prof);    SimpleProblemCollector problems = new SimpleProblemCollector();    validator.validate(model, problems);    assertEquals(0, problems.messages.size());    Repository repo = new Repository();    prof.addRepository(repo);    problems = new SimpleProblemCollector();    validator.validate(model, problems);    assertEquals(2, problems.messages.size());    repo.setUrl("http://xxx.xxx.com");    problems = new SimpleProblemCollector();    validator.validate(model, problems);    assertEquals(1, problems.messages.size());    repo.setId("xxx");    problems = new SimpleProblemCollector();    validator.validate(model, problems);    assertEquals(0, problems.messages.size());}
01f525ef91b9b93a33f29f151e40942e0fae0285cc8fb2e8773bd65fd3ce319b
testValidateMirror
public void testValidateMirror() throws Exception
{    Settings settings = new Settings();    Mirror mirror = new Mirror();    mirror.setId("local");    settings.addMirror(mirror);    mirror = new Mirror();    mirror.setId("illegal\\:/chars");    mirror.setUrl("http://void");    mirror.setMirrorOf("void");    settings.addMirror(mirror);    SimpleProblemCollector problems = new SimpleProblemCollector();    validator.validate(settings, problems);    assertEquals(4, problems.messages.size());    assertContains(problems.messages.get(0), "'mirrors.mirror.id' must not be 'local'");    assertContains(problems.messages.get(1), "'mirrors.mirror.url' for local is missing");    assertContains(problems.messages.get(2), "'mirrors.mirror.mirrorOf' for local is missing");    assertContains(problems.messages.get(3), "'mirrors.mirror.id' must not contain any of these characters");}
dd9020ce9f67e907e5deed1fa5c105a90189dcf4034983b291a7c789dc1cb9dd
testValidateRepository
public void testValidateRepository() throws Exception
{    Profile profile = new Profile();    Repository repo = new Repository();    repo.setId("local");    profile.addRepository(repo);    repo = new Repository();    repo.setId("illegal\\:/chars");    repo.setUrl("http://void");    profile.addRepository(repo);    Settings settings = new Settings();    settings.addProfile(profile);    SimpleProblemCollector problems = new SimpleProblemCollector();    validator.validate(settings, problems);    assertEquals(3, problems.messages.size());    assertContains(problems.messages.get(0), "'profiles.profile[default].repositories.repository.id' must not be 'local'");    assertContains(problems.messages.get(1), "'profiles.profile[default].repositories.repository.url' for local is missing");    assertContains(problems.messages.get(2), "'profiles.profile[default].repositories.repository.id' must not contain any of these characters");}
2aaeba831bc235930ebd652b270645acd09367259642548679cf8562a67bf49e
testValidateUniqueServerId
public void testValidateUniqueServerId() throws Exception
{    Settings settings = new Settings();    Server server1 = new Server();    server1.setId("test");    settings.addServer(server1);    Server server2 = new Server();    server2.setId("test");    settings.addServer(server2);    SimpleProblemCollector problems = new SimpleProblemCollector();    validator.validate(settings, problems);    assertEquals(1, problems.messages.size());    assertContains(problems.messages.get(0), "'servers.server.id' must be unique but found duplicate server with id test");}
d96bb8a06be93609dc43fe63b3d5fd26952a470ae9cea6331dd8c614e685ab21
testValidateUniqueProfileId
public void testValidateUniqueProfileId() throws Exception
{    Settings settings = new Settings();    Profile profile1 = new Profile();    profile1.setId("test");    settings.addProfile(profile1);    Profile profile2 = new Profile();    profile2.setId("test");    settings.addProfile(profile2);    SimpleProblemCollector problems = new SimpleProblemCollector();    validator.validate(settings, problems);    assertEquals(1, problems.messages.size());    assertContains(problems.messages.get(0), "'profiles.profile.id' must be unique but found duplicate profile with id test");}
5be694434e899302005dbc8fc5325de1db6cf4d5d75cb6e9dab2da655f664b2e
testValidateUniqueRepositoryId
public void testValidateUniqueRepositoryId() throws Exception
{    Settings settings = new Settings();    Profile profile = new Profile();    profile.setId("pro");    settings.addProfile(profile);    Repository repo1 = new Repository();    repo1.setUrl("http://apache.org/");    repo1.setId("test");    profile.addRepository(repo1);    Repository repo2 = new Repository();    repo2.setUrl("http://apache.org/");    repo2.setId("test");    profile.addRepository(repo2);    SimpleProblemCollector problems = new SimpleProblemCollector();    validator.validate(settings, problems);    assertEquals(1, problems.messages.size());    assertContains(problems.messages.get(0), "'profiles.profile[pro].repositories.repository.id' must be unique" + " but found duplicate repository with id test");}
7cfe6b005107e2e5b8e27eed2001b88f50093989571b7923a5df98ebae86c136
testValidateUniqueProxyId
public void testValidateUniqueProxyId() throws Exception
{    Settings settings = new Settings();    Proxy proxy = new Proxy();    String id = null;    proxy.setId(id);    proxy.setHost("www.example.com");    settings.addProxy(proxy);    settings.addProxy(proxy);    SimpleProblemCollector problems = new SimpleProblemCollector();    validator.validate(settings, problems);    assertEquals(1, problems.messages.size());    assertContains(problems.messages.get(0), "'proxies.proxy.id' must be unique" + " but found duplicate proxy with id " + id);}
c57e1bbe1df2321ebb1069579005e31006b0dee81096b5a88a4368ccfdb656fc
testValidateProxy
public void testValidateProxy() throws Exception
{    Settings settings = new Settings();    Proxy proxy1 = new Proxy();    settings.addProxy(proxy1);    SimpleProblemCollector problems = new SimpleProblemCollector();    validator.validate(settings, problems);    assertEquals(1, problems.messages.size());    assertContains(problems.messages.get(0), "'proxies.proxy.host' for default is missing");}
d4ad716db315eb2ba5da72850d6ff04eb99c09658e39c5f271957fa12ece5721
add
public void add(Severity severity, String message, int line, int column, Exception cause)
{    messages.add(message);}
fdce51f14598e9394ffde43385852045db4ad73b19ff9056df9830ca97687142
renderLevel
protected String renderLevel(int level)
{    switch(level) {        case LOG_LEVEL_TRACE:            return level().debug("TRACE").toString();        case LOG_LEVEL_DEBUG:            return level().debug("DEBUG").toString();        case LOG_LEVEL_INFO:            return level().info("INFO").toString();        case LOG_LEVEL_WARN:            return level().warning("WARNING").toString();        case LOG_LEVEL_ERROR:        default:            return level().error("ERROR").toString();    }}
3476e01fc12a1bb9631d618c0ce40304f5a7afa7fa8976ef0db00e5608cf51c1
writeThrowable
protected void writeThrowable(Throwable t, PrintStream stream)
{    if (t == null) {        return;    }    stream.print(buffer().failure(t.getClass().getName()));    if (t.getMessage() != null) {        stream.print(": ");        stream.print(buffer().failure(t.getMessage()));    }    stream.println();    while (t != null) {        for (StackTraceElement e : t.getStackTrace()) {            stream.print("    ");            stream.print(buffer().strong("at"));            stream.print(" " + e.getClassName() + "." + e.getMethodName());            stream.print(buffer().a(" (").strong(getLocation(e)).a(")"));            stream.println();        }        t = t.getCause();        if (t != null) {            stream.print(buffer().strong("Caused by").a(": ").a(t.getClass().getName()));            if (t.getMessage() != null) {                stream.print(": ");                stream.print(buffer().failure(t.getMessage()));            }            stream.println();        }    }}
9e5c4811e8ad2e0248a2971c5cdd307fee3e194973db90c0a59ef0614448fe5b
getLocation
protected String getLocation(final StackTraceElement e)
{    assert e != null;    if (e.isNativeMethod()) {        return "Native Method";    } else if (e.getFileName() == null) {        return "Unknown Source";    } else if (e.getLineNumber() >= 0) {        return String.format("%s:%s", e.getFileName(), e.getLineNumber());    } else {        return e.getFileName();    }}
77e9284ab9c8e19ce6dc20bbbd67679967d9560c40ce2ed0d6b7f2398e0700b9
getLogger
public Logger getLogger(String name)
{    Logger simpleLogger = loggerMap.get(name);    if (simpleLogger != null) {        return simpleLogger;    } else {        Logger newInstance = new MavenSimpleLogger(name);        Logger oldInstance = loggerMap.putIfAbsent(name, newInstance);        return oldInstance == null ? newInstance : oldInstance;    }}
c0275ac1c738887e039614bed189c6cf16aa77958ef43bc2a01c506f92391ffc
getSingleton
public static StaticLoggerBinder getSingleton()
{    return SINGLETON;}
d11c2ec38b86801ceba8fa4304ece8a634f8585ca2ba8e9a5d9ad5920ad1b288
getLoggerFactory
public ILoggerFactory getLoggerFactory()
{    return loggerFactory;}
990930cde3bc972d0ae8123756c54b8c1d4e61d32f0a0beab079daae249fa83b
getLoggerFactoryClassStr
public String getLoggerFactoryClassStr()
{    return LOGGER_FACTORY_CLASS_STR;}
